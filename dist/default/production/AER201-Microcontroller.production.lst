

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Tue Feb 28 15:07:05 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    16                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    17                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    18                           	psect	text0,global,reloc=2,class=CODE,delta=1
    19                           	psect	text1,global,reloc=2,class=CODE,delta=1
    20                           	psect	text2,global,reloc=2,class=CODE,delta=1
    21                           	psect	text3,global,reloc=2,class=CODE,delta=1
    22                           	psect	text4,global,reloc=2,class=CODE,delta=1
    23                           	psect	text5,global,reloc=2,class=CODE,delta=1
    24                           	psect	text6,global,reloc=2,class=CODE,delta=1
    25                           	psect	text7,global,reloc=2,class=CODE,delta=1
    26                           	psect	text8,global,reloc=2,class=CODE,delta=1
    27                           	psect	text9,global,reloc=2,class=CODE,delta=1
    28                           	psect	text10,global,reloc=2,class=CODE,delta=1
    29                           	psect	text11,global,reloc=2,class=CODE,delta=1
    30                           	psect	text12,global,reloc=2,class=CODE,delta=1
    31                           	psect	text13,global,reloc=2,class=CODE,delta=1
    32                           	psect	text14,global,reloc=2,class=CODE,delta=1
    33                           	psect	text15,global,reloc=2,class=CODE,delta=1
    34                           	psect	text16,global,reloc=2,class=CODE,delta=1
    35                           	psect	text17,global,reloc=2,class=CODE,delta=1
    36                           	psect	text18,global,reloc=2,class=CODE,delta=1
    37                           	psect	text19,global,reloc=2,class=CODE,delta=1
    38                           	psect	text20,global,reloc=2,class=CODE,delta=1
    39                           	psect	text21,global,reloc=2,class=CODE,delta=1
    40                           	psect	text22,global,reloc=2,class=CODE,delta=1
    41                           	psect	text23,global,reloc=2,class=CODE,delta=1
    42                           	psect	text24,global,reloc=2,class=CODE,delta=1
    43                           	psect	text25,global,reloc=2,class=CODE,delta=1
    44                           	psect	text26,global,reloc=2,class=CODE,delta=1
    45                           	psect	text27,global,reloc=2,class=CODE,delta=1
    46                           	psect	text28,global,reloc=2,class=CODE,delta=1
    47                           	psect	text29,global,reloc=2,class=CODE,delta=1
    48                           	psect	text30,global,reloc=2,class=CODE,delta=1
    49                           	psect	text31,global,reloc=2,class=CODE,delta=1
    50                           	psect	text32,global,reloc=2,class=CODE,delta=1
    51                           	psect	text33,global,reloc=2,class=CODE,delta=1
    52                           	psect	text34,global,reloc=2,class=CODE,delta=1
    53                           	psect	text35,global,reloc=2,class=CODE,delta=1
    54                           	psect	text36,global,reloc=2,class=CODE,delta=1
    55                           	psect	text37,global,reloc=2,class=CODE,delta=1
    56                           	psect	text38,global,reloc=2,class=CODE,delta=1
    57                           	psect	text39,global,reloc=2,class=CODE,delta=1
    58                           	psect	text40,global,reloc=2,class=CODE,delta=1
    59                           	psect	text41,global,reloc=2,class=CODE,delta=1
    60                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    61                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    62                           	psect	text43,global,reloc=2,class=CODE,delta=1
    63                           	psect	text44,global,reloc=2,class=CODE,delta=1
    64                           	psect	text45,global,reloc=2,class=CODE,delta=1
    65                           	psect	text46,global,reloc=2,class=CODE,delta=1
    66                           	psect	text47,global,reloc=2,class=CODE,delta=1
    67                           	psect	text48,global,reloc=2,class=CODE,delta=1
    68                           	psect	text49,global,reloc=2,class=CODE,delta=1
    69                           	psect	text50,global,reloc=2,class=CODE,delta=1
    70                           	psect	text51,global,reloc=2,class=CODE,delta=1
    71                           	psect	text52,global,reloc=2,class=CODE,delta=1
    72                           	psect	text53,global,reloc=2,class=CODE,delta=1
    73                           	psect	text54,global,reloc=2,class=CODE,delta=1
    74                           	psect	text55,global,reloc=2,class=CODE,delta=1
    75                           	psect	text56,global,reloc=2,class=CODE,delta=1
    76                           	psect	text57,global,reloc=2,class=CODE,delta=1
    77                           	psect	text58,global,reloc=2,class=CODE,delta=1
    78                           	psect	text59,global,reloc=2,class=CODE,delta=1
    79                           	psect	text60,global,reloc=2,class=CODE,delta=1
    80                           	psect	text61,global,reloc=2,class=CODE,delta=1
    81                           	psect	text62,global,reloc=2,class=CODE,delta=1
    82                           	psect	text63,global,reloc=2,class=CODE,delta=1
    83                           	psect	text64,global,reloc=2,class=CODE,delta=1
    84                           	psect	text65,global,reloc=2,class=CODE,delta=1
    85                           	psect	text66,global,reloc=2,class=CODE,delta=1
    86                           	psect	text67,global,reloc=2,class=CODE,delta=1
    87                           	psect	text68,global,reloc=2,class=CODE,delta=1
    88                           	psect	text69,global,reloc=2,class=CODE,delta=1
    89                           	psect	text70,global,reloc=2,class=CODE,delta=1
    90                           	psect	text71,global,reloc=2,class=CODE,delta=1
    91                           	psect	text72,global,reloc=2,class=CODE,delta=1
    92                           	psect	text73,global,reloc=2,class=CODE,delta=1
    93                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    94                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    95                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    96  0000                     
    97                           ; Version 1.40
    98                           ; Generated 01/12/2016 GMT
    99                           ; 
   100                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
   101                           ; All rights reserved.
   102                           ; 
   103                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   104                           ; 
   105                           ; Redistribution and use in source and binary forms, with or without modification, are
   106                           ; permitted provided that the following conditions are met:
   107                           ; 
   108                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   109                           ;        conditions and the following disclaimer.
   110                           ; 
   111                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   112                           ;        of conditions and the following disclaimer in the documentation and/or other
   113                           ;        materials provided with the distribution.
   114                           ; 
   115                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   116                           ;        software without specific prior written permission.
   117                           ; 
   118                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   119                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   120                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   121                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   122                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   123                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   124                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   125                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   126                           ; 
   127                           ; 
   128                           ; Code-generator required, PIC18F4620 Definitions
   129                           ; 
   130                           ; SFR Addresses
   131  0000                     
   132                           	psect	idataCOMRAM
   133  002C16                     __pidataCOMRAM:
   134                           	opt stack 0
   135                           
   136                           ;initializer for _THIR
   137  002C16  00FF               	dw	255
   138                           
   139                           	psect	idataBANK0
   140  002C0C                     __pidataBANK0:
   141                           	opt stack 0
   142                           
   143                           ;initializer for _THMAG
   144  002C0C  00FF               	dw	255
   145                           
   146                           ;initializer for _f_ID_receive
   147  002C0E  0001               	dw	1
   148                           
   149                           ;initializer for _first
   150  002C10  0001               	dw	1
   151                           
   152                           	psect	idataBANK1
   153  002C12                     __pidataBANK1:
   154                           	opt stack 0
   155                           
   156                           ;initializer for printRTC@F3192
   157  002C12  4D                 	db	77
   158  002C13  4D                 	db	77
   159  002C14  4D                 	db	77
   160  002C15  00                 	db	0
   161                           
   162                           	psect	mediumconst
   163  00FDB4                     __pmediumconst:
   164                           	opt stack 0
   165  00FDB4  00                 	db	0
   166  00FDB5                     _keys:
   167                           	opt stack 0
   168  00FDB5  31                 	db	49
   169  00FDB6  32                 	db	50
   170  00FDB7  33                 	db	51
   171  00FDB8  41                 	db	65
   172  00FDB9  34                 	db	52
   173  00FDBA  35                 	db	53
   174  00FDBB  36                 	db	54
   175  00FDBC  42                 	db	66
   176  00FDBD  37                 	db	55
   177  00FDBE  38                 	db	56
   178  00FDBF  39                 	db	57
   179  00FDC0  43                 	db	67
   180  00FDC1  2A                 	db	42
   181  00FDC2  30                 	db	48
   182  00FDC3  23                 	db	35
   183  00FDC4  44                 	db	68
   184  00FDC5  00                 	db	0
   185  00FDC6                     __end_of_keys:
   186                           	opt stack 0
   187  00FDC6                     _dpowers:
   188                           	opt stack 0
   189  00FDC6  0001               	dw	1
   190  00FDC8  000A               	dw	10
   191  00FDCA  0064               	dw	100
   192  00FDCC  03E8               	dw	1000
   193  00FDCE  2710               	dw	10000
   194  00FDD0                     __end_of_dpowers:
   195                           	opt stack 0
   196  0000                     _ADCON0	set	4034
   197  0000                     _ADCON0bits	set	4034
   198  0000                     _ADCON1	set	4033
   199  0000                     _ADRESH	set	4036
   200  0000                     _ADRESL	set	4035
   201  0000                     _CMCONbits	set	4020
   202  0000                     _CVRCON	set	4021
   203  0000                     _INTCONbits	set	4082
   204  0000                     _LATA	set	3977
   205  0000                     _LATAbits	set	3977
   206  0000                     _LATB	set	3978
   207  0000                     _LATC	set	3979
   208  0000                     _LATCbits	set	3979
   209  0000                     _LATD	set	3980
   210  0000                     _LATDbits	set	3980
   211  0000                     _LATE	set	3981
   212  0000                     _OSCCON	set	4051
   213  0000                     _OSCTUNEbits	set	3995
   214  0000                     _PORTAbits	set	3968
   215  0000                     _PORTB	set	3969
   216  0000                     _PORTBbits	set	3969
   217  0000                     _SSPADD	set	4040
   218  0000                     _SSPBUF	set	4041
   219  0000                     _SSPCON1	set	4038
   220  0000                     _SSPCON2	set	4037
   221  0000                     _SSPSTAT	set	4039
   222  0000                     _T0CON	set	4053
   223  0000                     _T1CON	set	4045
   224  0000                     _TMR0H	set	4055
   225  0000                     _TMR0L	set	4054
   226  0000                     _TMR1H	set	4047
   227  0000                     _TMR1L	set	4046
   228  0000                     _TMR3H	set	4019
   229  0000                     _TMR3L	set	4018
   230  0000                     _TRISA	set	3986
   231  0000                     _TRISB	set	3987
   232  0000                     _TRISC	set	3988
   233  0000                     _TRISD	set	3989
   234  0000                     _TRISE	set	3990
   235  0000                     _ACKDT	set	32301
   236  0000                     _ACKEN	set	32300
   237  0000                     _ADFM	set	32263
   238  0000                     _ADIE	set	31982
   239  0000                     _ADON	set	32272
   240  0000                     _INT1IE	set	32643
   241  0000                     _INT1IF	set	32640
   242  0000                     _PEIE	set	32662
   243  0000                     _PEN	set	32298
   244  0000                     _RCEN	set	32299
   245  0000                     _RSEN	set	32297
   246  0000                     _SEN	set	32296
   247  0000                     _TMR0IE	set	32661
   248  0000                     _TMR0IF	set	32658
   249  0000                     _TMR0ON	set	32431
   250  0000                     _TMR1IE	set	31976
   251  0000                     _TMR1IF	set	31984
   252  0000                     _TMR1ON	set	32360
   253  0000                     _TMR2IE	set	31977
   254  0000                     _TMR3IE	set	32001
   255  0000                     _TMR3IF	set	32009
   256  0000                     _TMR3ON	set	32136
   257  0000                     _TRISC3	set	31907
   258  0000                     _TRISC4	set	31908
   259  0000                     _VCFG0	set	32268
   260  0000                     _VCFG1	set	32269
   261  0000                     _nRBPU	set	32655
   262  00FDD0                     STR_48:
   263  00FDD0  25                 	db	37
   264  00FDD1  30                 	db	48	;'0'
   265  00FDD2  32                 	db	50	;'2'
   266  00FDD3  64                 	db	100	;'d'
   267  00FDD4  25                 	db	37
   268  00FDD5  73                 	db	115	;'s'
   269  00FDD6  20                 	db	32
   270  00FDD7  7C                 	db	124
   271  00FDD8  20                 	db	32
   272  00FDD9  25                 	db	37
   273  00FDDA  30                 	db	48	;'0'
   274  00FDDB  32                 	db	50	;'2'
   275  00FDDC  64                 	db	100	;'d'
   276  00FDDD  3A                 	db	58	;':'
   277  00FDDE  25                 	db	37
   278  00FDDF  30                 	db	48	;'0'
   279  00FDE0  32                 	db	50	;'2'
   280  00FDE1  64                 	db	100	;'d'
   281  00FDE2  3A                 	db	58	;':'
   282  00FDE3  25                 	db	37
   283  00FDE4  30                 	db	48	;'0'
   284  00FDE5  32                 	db	50	;'2'
   285  00FDE6  64                 	db	100	;'d'
   286  00FDE7  00                 	db	0
   287  00FDE8                     STR_2:
   288  00FDE8  54                 	db	84	;'T'
   289  00FDE9  69                 	db	105	;'i'
   290  00FDEA  6D                 	db	109	;'m'
   291  00FDEB  65                 	db	101	;'e'
   292  00FDEC  3A                 	db	58	;':'
   293  00FDED  20                 	db	32
   294  00FDEE  25                 	db	37
   295  00FDEF  30                 	db	48	;'0'
   296  00FDF0  32                 	db	50	;'2'
   297  00FDF1  64                 	db	100	;'d'
   298  00FDF2  3A                 	db	58	;':'
   299  00FDF3  25                 	db	37
   300  00FDF4  30                 	db	48	;'0'
   301  00FDF5  32                 	db	50	;'2'
   302  00FDF6  64                 	db	100	;'d'
   303  00FDF7  3A                 	db	58	;':'
   304  00FDF8  25                 	db	37
   305  00FDF9  30                 	db	48	;'0'
   306  00FDFA  32                 	db	50	;'2'
   307  00FDFB  64                 	db	100	;'d'
   308  00FDFC  00                 	db	0
   309  00FDFD                     STR_3:
   310  00FDFD  2D                 	db	45
   311  00FDFE  2D                 	db	45
   312  00FDFF  20                 	db	32
   313  00FE00  4C                 	db	76	;'L'
   314  00FE01  6F                 	db	111	;'o'
   315  00FE02  67                 	db	103	;'g'
   316  00FE03  20                 	db	32
   317  00FE04  25                 	db	37
   318  00FE05  32                 	db	50	;'2'
   319  00FE06  64                 	db	100	;'d'
   320  00FE07  20                 	db	32
   321  00FE08  68                 	db	104	;'h'
   322  00FE09  65                 	db	101	;'e'
   323  00FE0A  72                 	db	114	;'r'
   324  00FE0B  65                 	db	101	;'e'
   325  00FE0C  2D                 	db	45
   326  00FE0D  2D                 	db	45
   327  00FE0E  00                 	db	0
   328  00FE0F                     STR_8:
   329  00FE0F  25                 	db	37
   330  00FE10  64                 	db	100	;'d'
   331  00FE11  20                 	db	32
   332  00FE12  6D                 	db	109	;'m'
   333  00FE13  69                 	db	105	;'i'
   334  00FE14  6E                 	db	110	;'n'
   335  00FE15  28                 	db	40
   336  00FE16  73                 	db	115	;'s'
   337  00FE17  29                 	db	41
   338  00FE18  20                 	db	32
   339  00FE19  25                 	db	37
   340  00FE1A  64                 	db	100	;'d'
   341  00FE1B  20                 	db	32
   342  00FE1C  73                 	db	115	;'s'
   343  00FE1D  65                 	db	101	;'e'
   344  00FE1E  63                 	db	99	;'c'
   345  00FE1F  73                 	db	115	;'s'
   346  00FE20  00                 	db	0
   347  00FE21                     STR_26:
   348  00FE21  4C                 	db	76	;'L'
   349  00FE22  4F                 	db	79	;'O'
   350  00FE23  47                 	db	71	;'G'
   351  00FE24  20                 	db	32
   352  00FE25  31                 	db	49	;'1'
   353  00FE26  20                 	db	32
   354  00FE27  20                 	db	32
   355  00FE28  20                 	db	32
   356  00FE29  20                 	db	32
   357  00FE2A  20                 	db	32
   358  00FE2B  20                 	db	32
   359  00FE2C  20                 	db	32
   360  00FE2D  20                 	db	32
   361  00FE2E  20                 	db	32
   362  00FE2F  20                 	db	32
   363  00FE30  20                 	db	32
   364  00FE31  00                 	db	0
   365  00FE32                     STR_25:
   366  00FE32  4C                 	db	76	;'L'
   367  00FE33  4F                 	db	79	;'O'
   368  00FE34  47                 	db	71	;'G'
   369  00FE35  20                 	db	32
   370  00FE36  32                 	db	50	;'2'
   371  00FE37  20                 	db	32
   372  00FE38  20                 	db	32
   373  00FE39  20                 	db	32
   374  00FE3A  20                 	db	32
   375  00FE3B  20                 	db	32
   376  00FE3C  20                 	db	32
   377  00FE3D  20                 	db	32
   378  00FE3E  20                 	db	32
   379  00FE3F  20                 	db	32
   380  00FE40  20                 	db	32
   381  00FE41  20                 	db	32
   382  00FE42  00                 	db	0
   383  00FE43                     STR_29:
   384  00FE43  4C                 	db	76	;'L'
   385  00FE44  4F                 	db	79	;'O'
   386  00FE45  47                 	db	71	;'G'
   387  00FE46  20                 	db	32
   388  00FE47  33                 	db	51	;'3'
   389  00FE48  20                 	db	32
   390  00FE49  20                 	db	32
   391  00FE4A  20                 	db	32
   392  00FE4B  20                 	db	32
   393  00FE4C  20                 	db	32
   394  00FE4D  20                 	db	32
   395  00FE4E  20                 	db	32
   396  00FE4F  20                 	db	32
   397  00FE50  20                 	db	32
   398  00FE51  20                 	db	32
   399  00FE52  20                 	db	32
   400  00FE53  00                 	db	0
   401  00FE54                     STR_33:
   402  00FE54  4C                 	db	76	;'L'
   403  00FE55  4F                 	db	79	;'O'
   404  00FE56  47                 	db	71	;'G'
   405  00FE57  20                 	db	32
   406  00FE58  34                 	db	52	;'4'
   407  00FE59  20                 	db	32
   408  00FE5A  20                 	db	32
   409  00FE5B  20                 	db	32
   410  00FE5C  20                 	db	32
   411  00FE5D  20                 	db	32
   412  00FE5E  20                 	db	32
   413  00FE5F  20                 	db	32
   414  00FE60  20                 	db	32
   415  00FE61  20                 	db	32
   416  00FE62  20                 	db	32
   417  00FE63  20                 	db	32
   418  00FE64  00                 	db	0
   419  00FE65                     STR_21:
   420  00FE65  33                 	db	51	;'3'
   421  00FE66  2E                 	db	46
   422  00FE67  20                 	db	32
   423  00FE68  4C                 	db	76	;'L'
   424  00FE69  4F                 	db	79	;'O'
   425  00FE6A  47                 	db	71	;'G'
   426  00FE6B  53                 	db	83	;'S'
   427  00FE6C  20                 	db	32
   428  00FE6D  20                 	db	32
   429  00FE6E  20                 	db	32
   430  00FE6F  20                 	db	32
   431  00FE70  20                 	db	32
   432  00FE71  20                 	db	32
   433  00FE72  20                 	db	32
   434  00FE73  20                 	db	32
   435  00FE74  20                 	db	32
   436  00FE75  00                 	db	0
   437  00FE76                     STR_17:
   438  00FE76  32                 	db	50	;'2'
   439  00FE77  2E                 	db	46
   440  00FE78  20                 	db	32
   441  00FE79  53                 	db	83	;'S'
   442  00FE7A  4F                 	db	79	;'O'
   443  00FE7B  52                 	db	82	;'R'
   444  00FE7C  54                 	db	84	;'T'
   445  00FE7D  20                 	db	32
   446  00FE7E  20                 	db	32
   447  00FE7F  20                 	db	32
   448  00FE80  20                 	db	32
   449  00FE81  20                 	db	32
   450  00FE82  20                 	db	32
   451  00FE83  20                 	db	32
   452  00FE84  20                 	db	32
   453  00FE85  20                 	db	32
   454  00FE86  00                 	db	0
   455  00FE87                     STR_18:
   456  00FE87  31                 	db	49	;'1'
   457  00FE88  2E                 	db	46
   458  00FE89  20                 	db	32
   459  00FE8A  44                 	db	68	;'D'
   460  00FE8B  41                 	db	65	;'A'
   461  00FE8C  54                 	db	84	;'T'
   462  00FE8D  45                 	db	69	;'E'
   463  00FE8E  2F                 	db	47
   464  00FE8F  54                 	db	84	;'T'
   465  00FE90  49                 	db	73	;'I'
   466  00FE91  4D                 	db	77	;'M'
   467  00FE92  45                 	db	69	;'E'
   468  00FE93  20                 	db	32
   469  00FE94  20                 	db	32
   470  00FE95  20                 	db	32
   471  00FE96  20                 	db	32
   472  00FE97  00                 	db	0
   473  00FE98                     STR_9:
   474  00FE98  20                 	db	32
   475  00FE99  2D                 	db	45
   476  00FE9A  2D                 	db	45
   477  00FE9B  20                 	db	32
   478  00FE9C  50                 	db	80	;'P'
   479  00FE9D  6F                 	db	111	;'o'
   480  00FE9E  70                 	db	112	;'p'
   481  00FE9F  20                 	db	32
   482  00FEA0  20                 	db	32
   483  00FEA1  63                 	db	99	;'c'
   484  00FEA2  61                 	db	97	;'a'
   485  00FEA3  6E                 	db	110	;'n'
   486  00FEA4  20                 	db	32
   487  00FEA5  2D                 	db	45
   488  00FEA6  2D                 	db	45
   489  00FEA7  20                 	db	32
   490  00FEA8  00                 	db	0
   491  00FEA9                     STR_11:
   492  00FEA9  20                 	db	32
   493  00FEAA  2D                 	db	45
   494  00FEAB  2D                 	db	45
   495  00FEAC  20                 	db	32
   496  00FEAD  53                 	db	83	;'S'
   497  00FEAE  6F                 	db	111	;'o'
   498  00FEAF  75                 	db	117	;'u'
   499  00FEB0  70                 	db	112	;'p'
   500  00FEB1  20                 	db	32
   501  00FEB2  63                 	db	99	;'c'
   502  00FEB3  61                 	db	97	;'a'
   503  00FEB4  6E                 	db	110	;'n'
   504  00FEB5  20                 	db	32
   505  00FEB6  2D                 	db	45
   506  00FEB7  2D                 	db	45
   507  00FEB8  20                 	db	32
   508  00FEB9  00                 	db	0
   509  00FEBA                     STR_1:
   510  00FEBA  21                 	db	33
   511  00FEBB  53                 	db	83	;'S'
   512  00FEBC  4F                 	db	79	;'O'
   513  00FEBD  52                 	db	82	;'R'
   514  00FEBE  54                 	db	84	;'T'
   515  00FEBF  20                 	db	32
   516  00FEC0  43                 	db	67	;'C'
   517  00FEC1  4F                 	db	79	;'O'
   518  00FEC2  4E                 	db	78	;'N'
   519  00FEC3  43                 	db	67	;'C'
   520  00FEC4  4C                 	db	76	;'L'
   521  00FEC5  55                 	db	85	;'U'
   522  00FEC6  44                 	db	68	;'D'
   523  00FEC7  45                 	db	69	;'E'
   524  00FEC8  44                 	db	68	;'D'
   525  00FEC9  21                 	db	33
   526  00FECA  00                 	db	0
   527  00FECB                     STR_13:
   528  00FECB  2D                 	db	45
   529  00FECC  2D                 	db	45
   530  00FECD  20                 	db	32
   531  00FECE  54                 	db	84	;'T'
   532  00FECF  6F                 	db	111	;'o'
   533  00FED0  74                 	db	116	;'t'
   534  00FED1  61                 	db	97	;'a'
   535  00FED2  6C                 	db	108	;'l'
   536  00FED3  20                 	db	32
   537  00FED4  63                 	db	99	;'c'
   538  00FED5  61                 	db	97	;'a'
   539  00FED6  6E                 	db	110	;'n'
   540  00FED7  73                 	db	115	;'s'
   541  00FED8  20                 	db	32
   542  00FED9  2D                 	db	45
   543  00FEDA  2D                 	db	45
   544  00FEDB  00                 	db	0
   545  00FEDC                     STR_10:
   546  00FEDC  4E                 	db	78	;'N'
   547  00FEDD  6F                 	db	111	;'o'
   548  00FEDE  20                 	db	32
   549  00FEDF  74                 	db	116	;'t'
   550  00FEE0  61                 	db	97	;'a'
   551  00FEE1  62                 	db	98	;'b'
   552  00FEE2  3A                 	db	58	;':'
   553  00FEE3  20                 	db	32
   554  00FEE4  39                 	db	57	;'9'
   555  00FEE5  7C                 	db	124
   556  00FEE6  54                 	db	84	;'T'
   557  00FEE7  61                 	db	97	;'a'
   558  00FEE8  62                 	db	98	;'b'
   559  00FEE9  3A                 	db	58	;':'
   560  00FEEA  20                 	db	32
   561  00FEEB  31                 	db	49	;'1'
   562  00FEEC  00                 	db	0
   563  00FEED                     STR_12:
   564  00FEED  4E                 	db	78	;'N'
   565  00FEEE  6F                 	db	111	;'o'
   566  00FEEF  20                 	db	32
   567  00FEF0  6C                 	db	108	;'l'
   568  00FEF1  62                 	db	98	;'b'
   569  00FEF2  6C                 	db	108	;'l'
   570  00FEF3  3A                 	db	58	;':'
   571  00FEF4  20                 	db	32
   572  00FEF5  31                 	db	49	;'1'
   573  00FEF6  7C                 	db	124
   574  00FEF7  6C                 	db	108	;'l'
   575  00FEF8  62                 	db	98	;'b'
   576  00FEF9  6C                 	db	108	;'l'
   577  00FEFA  3A                 	db	58	;':'
   578  00FEFB  20                 	db	32
   579  00FEFC  31                 	db	49	;'1'
   580  00FEFD  00                 	db	0
   581  00FEFE                     STR_6:
   582  00FEFE  30                 	db	48	;'0'
   583  00FEFF  36                 	db	54	;'6'
   584  00FF00  46                 	db	70	;'F'
   585  00FF01  65                 	db	101	;'e'
   586  00FF02  62                 	db	98	;'b'
   587  00FF03  20                 	db	32
   588  00FF04  7C                 	db	124
   589  00FF05  20                 	db	32
   590  00FF06  30                 	db	48	;'0'
   591  00FF07  31                 	db	49	;'1'
   592  00FF08  3A                 	db	58	;':'
   593  00FF09  30                 	db	48	;'0'
   594  00FF0A  38                 	db	56	;'8'
   595  00FF0B  3A                 	db	58	;':'
   596  00FF0C  35                 	db	53	;'5'
   597  00FF0D  36                 	db	54	;'6'
   598  00FF0E  00                 	db	0
   599  00FF0F                     STR_24:
   600  00FF0F  4C                 	db	76	;'L'
   601  00FF10  4F                 	db	79	;'O'
   602  00FF11  47                 	db	71	;'G'
   603  00FF12  20                 	db	32
   604  00FF13  31                 	db	49	;'1'
   605  00FF14  20                 	db	32
   606  00FF15  20                 	db	32
   607  00FF16  20                 	db	32
   608  00FF17  20                 	db	32
   609  00FF18  20                 	db	32
   610  00FF19  20                 	db	32
   611  00FF1A  20                 	db	32
   612  00FF1B  20                 	db	32
   613  00FF1C  20                 	db	32
   614  00FF1D  20                 	db	32
   615  00FF1E  3C                 	db	60	;'<'
   616  00FF1F  00                 	db	0
   617  00FF20                     STR_27:
   618  00FF20  4C                 	db	76	;'L'
   619  00FF21  4F                 	db	79	;'O'
   620  00FF22  47                 	db	71	;'G'
   621  00FF23  20                 	db	32
   622  00FF24  32                 	db	50	;'2'
   623  00FF25  20                 	db	32
   624  00FF26  20                 	db	32
   625  00FF27  20                 	db	32
   626  00FF28  20                 	db	32
   627  00FF29  20                 	db	32
   628  00FF2A  20                 	db	32
   629  00FF2B  20                 	db	32
   630  00FF2C  20                 	db	32
   631  00FF2D  20                 	db	32
   632  00FF2E  20                 	db	32
   633  00FF2F  3C                 	db	60	;'<'
   634  00FF30  00                 	db	0
   635  00FF31                     STR_31:
   636  00FF31  4C                 	db	76	;'L'
   637  00FF32  4F                 	db	79	;'O'
   638  00FF33  47                 	db	71	;'G'
   639  00FF34  20                 	db	32
   640  00FF35  33                 	db	51	;'3'
   641  00FF36  20                 	db	32
   642  00FF37  20                 	db	32
   643  00FF38  20                 	db	32
   644  00FF39  20                 	db	32
   645  00FF3A  20                 	db	32
   646  00FF3B  20                 	db	32
   647  00FF3C  20                 	db	32
   648  00FF3D  20                 	db	32
   649  00FF3E  20                 	db	32
   650  00FF3F  20                 	db	32
   651  00FF40  3C                 	db	60	;'<'
   652  00FF41  00                 	db	0
   653  00FF42                     STR_35:
   654  00FF42  4C                 	db	76	;'L'
   655  00FF43  4F                 	db	79	;'O'
   656  00FF44  47                 	db	71	;'G'
   657  00FF45  20                 	db	32
   658  00FF46  34                 	db	52	;'4'
   659  00FF47  20                 	db	32
   660  00FF48  20                 	db	32
   661  00FF49  20                 	db	32
   662  00FF4A  20                 	db	32
   663  00FF4B  20                 	db	32
   664  00FF4C  20                 	db	32
   665  00FF4D  20                 	db	32
   666  00FF4E  20                 	db	32
   667  00FF4F  20                 	db	32
   668  00FF50  20                 	db	32
   669  00FF51  3C                 	db	60	;'<'
   670  00FF52  00                 	db	0
   671  00FF53                     STR_23:
   672  00FF53  33                 	db	51	;'3'
   673  00FF54  2E                 	db	46
   674  00FF55  20                 	db	32
   675  00FF56  4C                 	db	76	;'L'
   676  00FF57  4F                 	db	79	;'O'
   677  00FF58  47                 	db	71	;'G'
   678  00FF59  53                 	db	83	;'S'
   679  00FF5A  20                 	db	32
   680  00FF5B  20                 	db	32
   681  00FF5C  20                 	db	32
   682  00FF5D  20                 	db	32
   683  00FF5E  20                 	db	32
   684  00FF5F  20                 	db	32
   685  00FF60  20                 	db	32
   686  00FF61  20                 	db	32
   687  00FF62  3C                 	db	60	;'<'
   688  00FF63  00                 	db	0
   689  00FF64                     STR_19:
   690  00FF64  32                 	db	50	;'2'
   691  00FF65  2E                 	db	46
   692  00FF66  20                 	db	32
   693  00FF67  53                 	db	83	;'S'
   694  00FF68  4F                 	db	79	;'O'
   695  00FF69  52                 	db	82	;'R'
   696  00FF6A  54                 	db	84	;'T'
   697  00FF6B  20                 	db	32
   698  00FF6C  20                 	db	32
   699  00FF6D  20                 	db	32
   700  00FF6E  20                 	db	32
   701  00FF6F  20                 	db	32
   702  00FF70  20                 	db	32
   703  00FF71  20                 	db	32
   704  00FF72  20                 	db	32
   705  00FF73  3C                 	db	60	;'<'
   706  00FF74  00                 	db	0
   707  00FF75                     STR_16:
   708  00FF75  31                 	db	49	;'1'
   709  00FF76  2E                 	db	46
   710  00FF77  20                 	db	32
   711  00FF78  44                 	db	68	;'D'
   712  00FF79  41                 	db	65	;'A'
   713  00FF7A  54                 	db	84	;'T'
   714  00FF7B  45                 	db	69	;'E'
   715  00FF7C  2F                 	db	47
   716  00FF7D  54                 	db	84	;'T'
   717  00FF7E  49                 	db	73	;'I'
   718  00FF7F  4D                 	db	77	;'M'
   719  00FF80  45                 	db	69	;'E'
   720  00FF81  20                 	db	32
   721  00FF82  20                 	db	32
   722  00FF83  20                 	db	32
   723  00FF84  3C                 	db	60	;'<'
   724  00FF85  00                 	db	0
   725  00FF86                     STR_4:
   726  00FF86  50                 	db	80	;'P'
   727  00FF87  61                 	db	97	;'a'
   728  00FF88  75                 	db	117	;'u'
   729  00FF89  73                 	db	115	;'s'
   730  00FF8A  65                 	db	101	;'e'
   731  00FF8B  3A                 	db	58	;':'
   732  00FF8C  3C                 	db	60	;'<'
   733  00FF8D  20                 	db	32
   734  00FF8E  7C                 	db	124
   735  00FF8F  20                 	db	32
   736  00FF90  42                 	db	66	;'B'
   737  00FF91  61                 	db	97	;'a'
   738  00FF92  63                 	db	99	;'c'
   739  00FF93  6B                 	db	107	;'k'
   740  00FF94  3A                 	db	58	;':'
   741  00FF95  3E                 	db	62	;'>'
   742  00FF96  00                 	db	0
   743  00FF97                     STR_15:
   744  00FF97  50                 	db	80	;'P'
   745  00FF98  55                 	db	85	;'U'
   746  00FF99  53                 	db	83	;'S'
   747  00FF9A  48                 	db	72	;'H'
   748  00FF9B  20                 	db	32
   749  00FF9C  54                 	db	84	;'T'
   750  00FF9D  4F                 	db	79	;'O'
   751  00FF9E  20                 	db	32
   752  00FF9F  43                 	db	67	;'C'
   753  00FFA0  4F                 	db	79	;'O'
   754  00FFA1  4E                 	db	78	;'N'
   755  00FFA2  54                 	db	84	;'T'
   756  00FFA3  49                 	db	73	;'I'
   757  00FFA4  4E                 	db	78	;'N'
   758  00FFA5  55                 	db	85	;'U'
   759  00FFA6  45                 	db	69	;'E'
   760  00FFA7  00                 	db	0
   761  00FFA8                     STR_49:
   762  00FFA8  53                 	db	83	;'S'
   763  00FFA9  6F                 	db	111	;'o'
   764  00FFAA  72                 	db	114	;'r'
   765  00FFAB  74                 	db	116	;'t'
   766  00FFAC  69                 	db	105	;'i'
   767  00FFAD  6E                 	db	110	;'n'
   768  00FFAE  67                 	db	103	;'g'
   769  00FFAF  2E                 	db	46
   770  00FFB0  2E                 	db	46
   771  00FFB1  2E                 	db	46
   772  00FFB2  00                 	db	0
   773  00FFB3                     STR_7:
   774  00FFB3  44                 	db	68	;'D'
   775  00FFB4  75                 	db	117	;'u'
   776  00FFB5  72                 	db	114	;'r'
   777  00FFB6  61                 	db	97	;'a'
   778  00FFB7  74                 	db	116	;'t'
   779  00FFB8  69                 	db	105	;'i'
   780  00FFB9  6F                 	db	111	;'o'
   781  00FFBA  6E                 	db	110	;'n'
   782  00FFBB  3A                 	db	58	;':'
   783  00FFBC  00                 	db	0
   784  00FFBD                     STR_51:
   785  00FFBD  28                 	db	40
   786  00FFBE  6E                 	db	110	;'n'
   787  00FFBF  75                 	db	117	;'u'
   788  00FFC0  6C                 	db	108	;'l'
   789  00FFC1  6C                 	db	108	;'l'
   790  00FFC2  29                 	db	41
   791  00FFC3  00                 	db	0
   792  00FFC4                     STR_5:
   793  00FFC4  53                 	db	83	;'S'
   794  00FFC5  74                 	db	116	;'t'
   795  00FFC6  61                 	db	97	;'a'
   796  00FFC7  72                 	db	114	;'r'
   797  00FFC8  74                 	db	116	;'t'
   798  00FFC9  3A                 	db	58	;':'
   799  00FFCA  00                 	db	0
   800  00FFCB                     STR_37:
   801  00FFCB  46                 	db	70	;'F'
   802  00FFCC  65                 	db	101	;'e'
   803  00FFCD  62                 	db	98	;'b'
   804  00FFCE  00                 	db	0
   805  00FFCF                     STR_47:
   806  00FFCF  44                 	db	68	;'D'
   807  00FFD0  65                 	db	101	;'e'
   808  00FFD1  63                 	db	99	;'c'
   809  00FFD2  00                 	db	0
   810  00FFD3                     STR_43:
   811  00FFD3  41                 	db	65	;'A'
   812  00FFD4  75                 	db	117	;'u'
   813  00FFD5  67                 	db	103	;'g'
   814  00FFD6  00                 	db	0
   815  00FFD7                     STR_42:
   816  00FFD7  4A                 	db	74	;'J'
   817  00FFD8  75                 	db	117	;'u'
   818  00FFD9  6C                 	db	108	;'l'
   819  00FFDA  00                 	db	0
   820  00FFDB                     STR_36:
   821  00FFDB  4A                 	db	74	;'J'
   822  00FFDC  61                 	db	97	;'a'
   823  00FFDD  6E                 	db	110	;'n'
   824  00FFDE  00                 	db	0
   825  00FFDF                     STR_41:
   826  00FFDF  4A                 	db	74	;'J'
   827  00FFE0  75                 	db	117	;'u'
   828  00FFE1  6E                 	db	110	;'n'
   829  00FFE2  00                 	db	0
   830  00FFE3                     STR_44:
   831  00FFE3  53                 	db	83	;'S'
   832  00FFE4  65                 	db	101	;'e'
   833  00FFE5  70                 	db	112	;'p'
   834  00FFE6  00                 	db	0
   835  00FFE7                     STR_38:
   836  00FFE7  4D                 	db	77	;'M'
   837  00FFE8  61                 	db	97	;'a'
   838  00FFE9  72                 	db	114	;'r'
   839  00FFEA  00                 	db	0
   840  00FFEB                     STR_39:
   841  00FFEB  41                 	db	65	;'A'
   842  00FFEC  70                 	db	112	;'p'
   843  00FFED  72                 	db	114	;'r'
   844  00FFEE  00                 	db	0
   845  00FFEF                     STR_45:
   846  00FFEF  4F                 	db	79	;'O'
   847  00FFF0  63                 	db	99	;'c'
   848  00FFF1  74                 	db	116	;'t'
   849  00FFF2  00                 	db	0
   850  00FFF3                     STR_46:
   851  00FFF3  4E                 	db	78	;'N'
   852  00FFF4  6F                 	db	111	;'o'
   853  00FFF5  76                 	db	118	;'v'
   854  00FFF6  00                 	db	0
   855  00FFF7                     STR_40:
   856  00FFF7  4D                 	db	77	;'M'
   857  00FFF8  61                 	db	97	;'a'
   858  00FFF9  79                 	db	121	;'y'
   859  00FFFA  00                 	db	0
   860  00FFFB                     STR_14:
   861  00FFFB  31                 	db	49	;'1'
   862  00FFFC  32                 	db	50	;'2'
   863  00FFFD  00                 	db	0
   864  0000                     
   865                           ; #config settings
   866  00FFFE  00                 	db	0	; dummy byte at the end
   867  0000                     
   868                           	psect	cinit
   869  0020AA                     __pcinit:
   870                           	opt stack 0
   871  0020AA                     start_initialization:
   872                           	opt stack 0
   873  0020AA                     __initialization:
   874                           	opt stack 0
   875                           
   876                           ; Initialize objects allocated to BANK1 (4 bytes)
   877                           ; load TBLPTR registers with __pidataBANK1
   878  0020AA  0E12               	movlw	low __pidataBANK1
   879  0020AC  6EF6               	movwf	tblptrl,c
   880  0020AE  0E2C               	movlw	high __pidataBANK1
   881  0020B0  6EF7               	movwf	tblptrh,c
   882  0020B2  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   883  0020B4  6EF8               	movwf	tblptru,c
   884  0020B6  EE01  F00E         	lfsr	0,__pdataBANK1
   885  0020BA  EE10 F004          	lfsr	1,4
   886  0020BE                     copy_data0:
   887  0020BE  0009               	tblrd		*+
   888  0020C0  CFF5 FFEE          	movff	tablat,postinc0
   889  0020C4  50E5               	movf	postdec1,w,c
   890  0020C6  50E1               	movf	fsr1l,w,c
   891  0020C8  E1FA               	bnz	copy_data0
   892                           
   893                           ; Initialize objects allocated to BANK0 (6 bytes)
   894                           ; load TBLPTR registers with __pidataBANK0
   895  0020CA  0E0C               	movlw	low __pidataBANK0
   896  0020CC  6EF6               	movwf	tblptrl,c
   897  0020CE  0E2C               	movlw	high __pidataBANK0
   898  0020D0  6EF7               	movwf	tblptrh,c
   899  0020D2  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   900  0020D4  6EF8               	movwf	tblptru,c
   901  0020D6  EE00  F0F8         	lfsr	0,__pdataBANK0
   902  0020DA  EE10 F006          	lfsr	1,6
   903  0020DE                     copy_data1:
   904  0020DE  0009               	tblrd		*+
   905  0020E0  CFF5 FFEE          	movff	tablat,postinc0
   906  0020E4  50E5               	movf	postdec1,w,c
   907  0020E6  50E1               	movf	fsr1l,w,c
   908  0020E8  E1FA               	bnz	copy_data1
   909                           
   910                           ; Initialize objects allocated to COMRAM (2 bytes)
   911                           ; load TBLPTR registers with __pidataCOMRAM
   912  0020EA  0E16               	movlw	low __pidataCOMRAM
   913  0020EC  6EF6               	movwf	tblptrl,c
   914  0020EE  0E2C               	movlw	high __pidataCOMRAM
   915  0020F0  6EF7               	movwf	tblptrh,c
   916  0020F2  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   917  0020F4  6EF8               	movwf	tblptru,c
   918  0020F6  0009               	tblrd		*+	;fetch initializer
   919  0020F8  CFF5 F07A          	movff	tablat,__pdataCOMRAM
   920  0020FC  0009               	tblrd		*+	;fetch initializer
   921  0020FE  CFF5 F07B          	movff	tablat,__pdataCOMRAM+1
   922                           
   923                           ; Clear objects allocated to BANK1 (14 bytes)
   924  002102  EE01  F000         	lfsr	0,__pbssBANK1
   925  002106  0E0E               	movlw	14
   926  002108                     clear_0:
   927  002108  6AEE               	clrf	postinc0,c
   928  00210A  06E8               	decf	wreg,f,c
   929  00210C  E1FD               	bnz	clear_0
   930                           
   931                           ; Clear objects allocated to BANK0 (36 bytes)
   932  00210E  EE00  F0D4         	lfsr	0,__pbssBANK0
   933  002112  0E24               	movlw	36
   934  002114                     clear_1:
   935  002114  6AEE               	clrf	postinc0,c
   936  002116  06E8               	decf	wreg,f,c
   937  002118  E1FD               	bnz	clear_1
   938                           
   939                           ; Clear objects allocated to COMRAM (31 bytes)
   940  00211A  EE00  F05B         	lfsr	0,__pbssCOMRAM
   941  00211E  0E1F               	movlw	31
   942  002120                     clear_2:
   943  002120  6AEE               	clrf	postinc0,c
   944  002122  06E8               	decf	wreg,f,c
   945  002124  E1FD               	bnz	clear_2
   946  002126                     end_of_initialization:
   947                           	opt stack 0
   948  002126                     __end_of__initialization:
   949                           	opt stack 0
   950  002126  907C               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   951  002128  927C               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   952  00212A  0100               	movlb	0
   953  00212C  EF11  F010         	goto	_main	;jump to C main() function
   954                           tblptru	equ	0xFF8
   955                           tblptrh	equ	0xFF7
   956                           tblptrl	equ	0xFF6
   957                           tablat	equ	0xFF5
   958                           postinc0	equ	0xFEE
   959                           wreg	equ	0xFE8
   960                           postdec1	equ	0xFE5
   961                           fsr1l	equ	0xFE1
   962                           
   963                           	psect	bssCOMRAM
   964  00005B                     __pbssCOMRAM:
   965                           	opt stack 0
   966  00005B                     _IR_signal:
   967                           	opt stack 0
   968  00005B                     	ds	2
   969  00005D                     _TMR3CF:
   970                           	opt stack 0
   971  00005D                     	ds	2
   972  00005F                     _TMR3counter:
   973                           	opt stack 0
   974  00005F                     	ds	2
   975  000061                     _UIenabled:
   976                           	opt stack 0
   977  000061                     	ds	2
   978  000063                     _back:
   979                           	opt stack 0
   980  000063                     	ds	2
   981  000065                     _count_can_no_lab:
   982                           	opt stack 0
   983  000065                     	ds	2
   984  000067                     _count_can_w_lab:
   985                           	opt stack 0
   986  000067                     	ds	2
   987  000069                     _count_pop_no_tab:
   988                           	opt stack 0
   989  000069                     	ds	2
   990  00006B                     _count_pop_w_tab:
   991                           	opt stack 0
   992  00006B                     	ds	2
   993  00006D                     _down:
   994                           	opt stack 0
   995  00006D                     	ds	2
   996  00006F                     _enter:
   997                           	opt stack 0
   998  00006F                     	ds	2
   999  000071                     _f_can_distributed:
  1000                           	opt stack 0
  1001  000071                     	ds	2
  1002  000073                     _firstboot:
  1003                           	opt stack 0
  1004  000073                     	ds	2
  1005  000075                     _up:
  1006                           	opt stack 0
  1007  000075                     	ds	2
  1008  000077                     _was_low:
  1009                           	opt stack 0
  1010  000077                     	ds	2
  1011  000079                     _input:
  1012                           	opt stack 0
  1013  000079                     	ds	1
  1014                           tblptru	equ	0xFF8
  1015                           tblptrh	equ	0xFF7
  1016                           tblptrl	equ	0xFF6
  1017                           tablat	equ	0xFF5
  1018                           postinc0	equ	0xFEE
  1019                           wreg	equ	0xFE8
  1020                           postdec1	equ	0xFE5
  1021                           fsr1l	equ	0xFE1
  1022                           
  1023                           	psect	dataCOMRAM
  1024  00007A                     __pdataCOMRAM:
  1025                           	opt stack 0
  1026  00007A                     _THIR:
  1027                           	opt stack 0
  1028  00007A                     	ds	2
  1029                           tblptru	equ	0xFF8
  1030                           tblptrh	equ	0xFF7
  1031                           tblptrl	equ	0xFF6
  1032                           tablat	equ	0xFF5
  1033                           postinc0	equ	0xFEE
  1034                           wreg	equ	0xFE8
  1035                           postdec1	equ	0xFE5
  1036                           fsr1l	equ	0xFE1
  1037                           
  1038                           	psect	bssBANK0
  1039  0000D4                     __pbssBANK0:
  1040                           	opt stack 0
  1041  0000D4                     _servoTimes:
  1042                           	opt stack 0
  1043  0000D4                     	ds	8
  1044  0000DC                     _time:
  1045                           	opt stack 0
  1046  0000DC                     	ds	7
  1047  0000E3                     _MAG_signal:
  1048                           	opt stack 0
  1049  0000E3                     	ds	2
  1050  0000E5                     _count_total:
  1051                           	opt stack 0
  1052  0000E5                     	ds	2
  1053  0000E7                     _cur_state:
  1054                           	opt stack 0
  1055  0000E7                     	ds	2
  1056  0000E9                     _f_can_coming_to_ID:
  1057                           	opt stack 0
  1058  0000E9                     	ds	2
  1059  0000EB                     _f_can_coming_to_distribution:
  1060                           	opt stack 0
  1061  0000EB                     	ds	2
  1062  0000ED                     _f_lastCan:
  1063                           	opt stack 0
  1064  0000ED                     	ds	2
  1065  0000EF                     _f_loadingNewCan:
  1066                           	opt stack 0
  1067  0000EF                     	ds	2
  1068  0000F1                     _log:
  1069                           	opt stack 0
  1070  0000F1                     	ds	2
  1071  0000F3                     _logstate:
  1072                           	opt stack 0
  1073  0000F3                     	ds	2
  1074  0000F5                     _total_time:
  1075                           	opt stack 0
  1076  0000F5                     	ds	2
  1077  0000F7                     _machine_state:
  1078                           	opt stack 0
  1079  0000F7                     	ds	1
  1080                           tblptru	equ	0xFF8
  1081                           tblptrh	equ	0xFF7
  1082                           tblptrl	equ	0xFF6
  1083                           tablat	equ	0xFF5
  1084                           postinc0	equ	0xFEE
  1085                           wreg	equ	0xFE8
  1086                           postdec1	equ	0xFE5
  1087                           fsr1l	equ	0xFE1
  1088                           
  1089                           	psect	dataBANK0
  1090  0000F8                     __pdataBANK0:
  1091                           	opt stack 0
  1092  0000F8                     _THMAG:
  1093                           	opt stack 0
  1094  0000F8                     	ds	2
  1095  0000FA                     _f_ID_receive:
  1096                           	opt stack 0
  1097  0000FA                     	ds	2
  1098  0000FC                     _first:
  1099                           	opt stack 0
  1100  0000FC                     	ds	2
  1101                           tblptru	equ	0xFF8
  1102                           tblptrh	equ	0xFF7
  1103                           tblptrl	equ	0xFF6
  1104                           tablat	equ	0xFF5
  1105                           postinc0	equ	0xFEE
  1106                           wreg	equ	0xFE8
  1107                           postdec1	equ	0xFE5
  1108                           fsr1l	equ	0xFE1
  1109                           
  1110                           	psect	bssBANK1
  1111  000100                     __pbssBANK1:
  1112                           	opt stack 0
  1113  000100                     _startTime:
  1114                           	opt stack 0
  1115  000100                     	ds	14
  1116                           tblptru	equ	0xFF8
  1117                           tblptrh	equ	0xFF7
  1118                           tblptrl	equ	0xFF6
  1119                           tablat	equ	0xFF5
  1120                           postinc0	equ	0xFEE
  1121                           wreg	equ	0xFE8
  1122                           postdec1	equ	0xFE5
  1123                           fsr1l	equ	0xFE1
  1124                           
  1125                           	psect	dataBANK1
  1126  00010E                     __pdataBANK1:
  1127                           	opt stack 0
  1128  00010E                     printRTC@F3192:
  1129                           	opt stack 0
  1130  00010E                     	ds	4
  1131                           tblptru	equ	0xFF8
  1132                           tblptrh	equ	0xFF7
  1133                           tblptrl	equ	0xFF6
  1134                           tablat	equ	0xFF5
  1135                           postinc0	equ	0xFEE
  1136                           wreg	equ	0xFE8
  1137                           postdec1	equ	0xFE5
  1138                           fsr1l	equ	0xFE1
  1139                           
  1140                           	psect	cstackBANK0
  1141  000080                     __pcstackBANK0:
  1142                           	opt stack 0
  1143  000080                     ??_isdigit:
  1144  000080                     ??_readADC:
  1145  000080                     ??_I2C_Master_Wait:
  1146  000080                     ?___wmul:
  1147                           	opt stack 0
  1148  000080                     ?___awmod:
  1149                           	opt stack 0
  1150  000080                     ?___lwdiv:
  1151                           	opt stack 0
  1152  000080                     ?___lldiv:
  1153                           	opt stack 0
  1154  000080                     lcdNibble@temp:
  1155                           	opt stack 0
  1156  000080                     initTime@m:
  1157                           	opt stack 0
  1158  000080                     updateServoPosition@time_us:
  1159                           	opt stack 0
  1160  000080                     ___wmul@multiplier:
  1161                           	opt stack 0
  1162  000080                     ___awmod@dividend:
  1163                           	opt stack 0
  1164  000080                     ___lwdiv@dividend:
  1165                           	opt stack 0
  1166  000080                     strcpy@to:
  1167                           	opt stack 0
  1168  000080                     ___lldiv@dividend:
  1169                           	opt stack 0
  1170                           
  1171                           ; 4 bytes @ 0x0
  1172  000080                     	ds	1
  1173  000081                     readADC@channel:
  1174                           	opt stack 0
  1175  000081                     I2C_Master_Read@a:
  1176                           	opt stack 0
  1177  000081                     lcdNibble@data:
  1178                           	opt stack 0
  1179  000081                     initTime@h:
  1180                           	opt stack 0
  1181  000081                     _isdigit$1648:
  1182                           	opt stack 0
  1183  000081                     I2C_Master_Write@d:
  1184                           	opt stack 0
  1185                           
  1186                           ; 2 bytes @ 0x1
  1187  000081                     	ds	1
  1188  000082                     ??_readMAG:
  1189  000082                     I2C_Master_Read@temp:
  1190                           	opt stack 0
  1191  000082                     lcdInst@data:
  1192                           	opt stack 0
  1193  000082                     putch@data:
  1194                           	opt stack 0
  1195  000082                     initTime@w:
  1196                           	opt stack 0
  1197  000082                     isdigit@c:
  1198                           	opt stack 0
  1199  000082                     updateServoPosition@timer:
  1200                           	opt stack 0
  1201  000082                     ___wmul@multiplicand:
  1202                           	opt stack 0
  1203  000082                     ___awmod@divisor:
  1204                           	opt stack 0
  1205  000082                     ___lwdiv@divisor:
  1206                           	opt stack 0
  1207  000082                     strcpy@from:
  1208                           	opt stack 0
  1209                           
  1210                           ; 2 bytes @ 0x2
  1211  000082                     	ds	1
  1212  000083                     ??_initLCD:
  1213  000083                     initTime@DD:
  1214                           	opt stack 0
  1215  000083                     getRTC@i:
  1216                           	opt stack 0
  1217                           
  1218                           ; 2 bytes @ 0x3
  1219  000083                     	ds	1
  1220  000084                     ??_updateServoPosition:
  1221  000084                     initTime@MM:
  1222                           	opt stack 0
  1223  000084                     ___awmod@counter:
  1224                           	opt stack 0
  1225  000084                     readMAG@res:
  1226                           	opt stack 0
  1227  000084                     ___wmul@product:
  1228                           	opt stack 0
  1229  000084                     ___lwdiv@quotient:
  1230                           	opt stack 0
  1231  000084                     strcpy@cp:
  1232                           	opt stack 0
  1233  000084                     ___lldiv@divisor:
  1234                           	opt stack 0
  1235                           
  1236                           ; 4 bytes @ 0x4
  1237  000084                     	ds	1
  1238  000085                     ??_initSortTimer:
  1239  000085                     initTime@YY:
  1240                           	opt stack 0
  1241  000085                     ___awmod@sign:
  1242                           	opt stack 0
  1243                           
  1244                           ; 1 bytes @ 0x5
  1245  000085                     	ds	1
  1246  000086                     ??_ID:
  1247  000086                     ?___awdiv:
  1248                           	opt stack 0
  1249  000086                     initTime@s:
  1250                           	opt stack 0
  1251  000086                     ___lwdiv@counter:
  1252                           	opt stack 0
  1253  000086                     updateServoPosition@my_time:
  1254                           	opt stack 0
  1255  000086                     ___awdiv@dividend:
  1256                           	opt stack 0
  1257                           
  1258                           ; 2 bytes @ 0x6
  1259  000086                     	ds	1
  1260  000087                     ?___lwmod:
  1261                           	opt stack 0
  1262  000087                     ___lwmod@dividend:
  1263                           	opt stack 0
  1264                           
  1265                           ; 2 bytes @ 0x7
  1266  000087                     	ds	1
  1267  000088                     ID@top_bottom_conductivity:
  1268                           	opt stack 0
  1269  000088                     initSortTimer@i:
  1270                           	opt stack 0
  1271  000088                     ___awdiv@divisor:
  1272                           	opt stack 0
  1273  000088                     ___lldiv@quotient:
  1274                           	opt stack 0
  1275                           
  1276                           ; 4 bytes @ 0x8
  1277  000088                     	ds	1
  1278  000089                     ___lwmod@divisor:
  1279                           	opt stack 0
  1280                           
  1281                           ; 2 bytes @ 0x9
  1282  000089                     	ds	1
  1283  00008A                     ??_Loading:
  1284  00008A                     ___awdiv@counter:
  1285                           	opt stack 0
  1286  00008A                     ID@side_conductivity:
  1287                           	opt stack 0
  1288                           
  1289                           ; 2 bytes @ 0xA
  1290  00008A                     	ds	1
  1291  00008B                     Loading@i:
  1292                           	opt stack 0
  1293  00008B                     ___awdiv@sign:
  1294                           	opt stack 0
  1295  00008B                     ___lwmod@counter:
  1296                           	opt stack 0
  1297                           
  1298                           ; 1 bytes @ 0xB
  1299  00008B                     	ds	1
  1300  00008C                     Loading@i_1256:
  1301                           	opt stack 0
  1302  00008C                     ___lldiv@counter:
  1303                           	opt stack 0
  1304  00008C                     ID@magnetic:
  1305                           	opt stack 0
  1306  00008C                     ___awdiv@quotient:
  1307                           	opt stack 0
  1308                           
  1309                           ; 2 bytes @ 0xC
  1310  00008C                     	ds	1
  1311  00008D                     Loading@i_1257:
  1312                           	opt stack 0
  1313  00008D                     I2C_Master_Init@c:
  1314                           	opt stack 0
  1315                           
  1316                           ; 4 bytes @ 0xD
  1317  00008D                     	ds	1
  1318  00008E                     ?_printf:
  1319                           	opt stack 0
  1320  00008E                     Loading@i_1258:
  1321                           	opt stack 0
  1322  00008E                     printf@f:
  1323                           	opt stack 0
  1324                           
  1325                           ; 2 bytes @ 0xE
  1326  00008E                     	ds	1
  1327  00008F                     Loading@i_1259:
  1328                           	opt stack 0
  1329                           
  1330                           ; 1 bytes @ 0xF
  1331  00008F                     	ds	1
  1332  000090                     Loading@i_1260:
  1333                           	opt stack 0
  1334                           
  1335                           ; 1 bytes @ 0x10
  1336  000090                     	ds	1
  1337  000091                     ??_I2C_Master_Init:
  1338  000091                     Loading@i_1261:
  1339                           	opt stack 0
  1340                           
  1341                           ; 1 bytes @ 0x11
  1342  000091                     	ds	1
  1343  000092                     Loading@i_1262:
  1344                           	opt stack 0
  1345                           
  1346                           ; 1 bytes @ 0x12
  1347  000092                     	ds	1
  1348  000093                     
  1349                           ; 1 bytes @ 0x13
  1350  000093                     	ds	2
  1351  000095                     ??_loadRTC:
  1352                           
  1353                           ; 1 bytes @ 0x15
  1354  000095                     	ds	1
  1355  000096                     loadRTC@i:
  1356                           	opt stack 0
  1357                           
  1358                           ; 2 bytes @ 0x16
  1359  000096                     	ds	4
  1360  00009A                     ??_printf:
  1361                           
  1362                           ; 1 bytes @ 0x1A
  1363  00009A                     	ds	4
  1364  00009E                     printf@prec:
  1365                           	opt stack 0
  1366                           
  1367                           ; 1 bytes @ 0x1E
  1368  00009E                     	ds	1
  1369  00009F                     printf@ap:
  1370                           	opt stack 0
  1371                           
  1372                           ; 2 bytes @ 0x1F
  1373  00009F                     	ds	2
  1374  0000A1                     printf@cp:
  1375                           	opt stack 0
  1376                           
  1377                           ; 2 bytes @ 0x21
  1378  0000A1                     	ds	2
  1379  0000A3                     printf@val:
  1380                           	opt stack 0
  1381                           
  1382                           ; 2 bytes @ 0x23
  1383  0000A3                     	ds	2
  1384  0000A5                     printf@len:
  1385                           	opt stack 0
  1386                           
  1387                           ; 2 bytes @ 0x25
  1388  0000A5                     	ds	2
  1389  0000A7                     printf@flag:
  1390                           	opt stack 0
  1391                           
  1392                           ; 1 bytes @ 0x27
  1393  0000A7                     	ds	1
  1394  0000A8                     printf@c:
  1395                           	opt stack 0
  1396                           
  1397                           ; 1 bytes @ 0x28
  1398  0000A8                     	ds	1
  1399  0000A9                     printf@width:
  1400                           	opt stack 0
  1401                           
  1402                           ; 2 bytes @ 0x29
  1403  0000A9                     	ds	2
  1404  0000AB                     ??_printRTC:
  1405                           
  1406                           ; 1 bytes @ 0x2B
  1407  0000AB                     	ds	3
  1408  0000AE                     printRTC@INT_time:
  1409                           	opt stack 0
  1410                           
  1411                           ; 14 bytes @ 0x2E
  1412  0000AE                     	ds	14
  1413  0000BC                     printRTC@RTC_month:
  1414                           	opt stack 0
  1415                           
  1416                           ; 2 bytes @ 0x3C
  1417  0000BC                     	ds	2
  1418  0000BE                     printRTC@month:
  1419                           	opt stack 0
  1420                           
  1421                           ; 4 bytes @ 0x3E
  1422  0000BE                     	ds	4
  1423  0000C2                     printRTC@i:
  1424                           	opt stack 0
  1425                           
  1426                           ; 2 bytes @ 0x42
  1427  0000C2                     	ds	2
  1428  0000C4                     ??_UI:
  1429                           
  1430                           ; 1 bytes @ 0x44
  1431  0000C4                     	ds	1
  1432  0000C5                     _UI$2006:
  1433                           	opt stack 0
  1434                           
  1435                           ; 2 bytes @ 0x45
  1436  0000C5                     	ds	2
  1437  0000C7                     UI@i:
  1438                           	opt stack 0
  1439                           
  1440                           ; 1 bytes @ 0x47
  1441  0000C7                     	ds	1
  1442  0000C8                     UI@i_582:
  1443                           	opt stack 0
  1444                           
  1445                           ; 1 bytes @ 0x48
  1446  0000C8                     	ds	1
  1447  0000C9                     UI@i_583:
  1448                           	opt stack 0
  1449                           
  1450                           ; 1 bytes @ 0x49
  1451  0000C9                     	ds	1
  1452  0000CA                     UI@i_586:
  1453                           	opt stack 0
  1454                           
  1455                           ; 1 bytes @ 0x4A
  1456  0000CA                     	ds	1
  1457  0000CB                     UI@i_587:
  1458                           	opt stack 0
  1459                           
  1460                           ; 1 bytes @ 0x4B
  1461  0000CB                     	ds	1
  1462  0000CC                     UI@i_590:
  1463                           	opt stack 0
  1464                           
  1465                           ; 1 bytes @ 0x4C
  1466  0000CC                     	ds	1
  1467  0000CD                     UI@i_591:
  1468                           	opt stack 0
  1469                           
  1470                           ; 1 bytes @ 0x4D
  1471  0000CD                     	ds	1
  1472  0000CE                     UI@i_594:
  1473                           	opt stack 0
  1474                           
  1475                           ; 1 bytes @ 0x4E
  1476  0000CE                     	ds	1
  1477  0000CF                     UI@i_595:
  1478                           	opt stack 0
  1479                           
  1480                           ; 1 bytes @ 0x4F
  1481  0000CF                     	ds	1
  1482  0000D0                     UI@i_598:
  1483                           	opt stack 0
  1484                           
  1485                           ; 1 bytes @ 0x50
  1486  0000D0                     	ds	1
  1487  0000D1                     UI@i_599:
  1488                           	opt stack 0
  1489                           
  1490                           ; 1 bytes @ 0x51
  1491  0000D1                     	ds	1
  1492  0000D2                     UI@i_602:
  1493                           	opt stack 0
  1494                           
  1495                           ; 1 bytes @ 0x52
  1496  0000D2                     	ds	1
  1497  0000D3                     UI@i_603:
  1498                           	opt stack 0
  1499                           
  1500                           ; 1 bytes @ 0x53
  1501  0000D3                     	ds	1
  1502  0000D4                     tblptru	equ	0xFF8
  1503                           tblptrh	equ	0xFF7
  1504                           tblptrl	equ	0xFF6
  1505                           tablat	equ	0xFF5
  1506                           postinc0	equ	0xFEE
  1507                           wreg	equ	0xFE8
  1508                           postdec1	equ	0xFE5
  1509                           fsr1l	equ	0xFE1
  1510                           
  1511                           ; 1 bytes @ 0x54
  1512                           
  1513                           	psect	cstackCOMRAM
  1514  000001                     __pcstackCOMRAM:
  1515                           	opt stack 0
  1516  000001                     ??i2_I2C_Master_Wait:
  1517  000001                     ??i2_isdigit:
  1518  000001                     ?i2___wmul:
  1519                           	opt stack 0
  1520  000001                     ?i2___lwmod:
  1521                           	opt stack 0
  1522  000001                     i2lcdNibble@temp:
  1523                           	opt stack 0
  1524  000001                     dispLogs@myLog:
  1525                           	opt stack 0
  1526  000001                     i2___wmul@multiplier:
  1527                           	opt stack 0
  1528  000001                     i2___lwmod@dividend:
  1529                           	opt stack 0
  1530  000001                     i2strcpy@to:
  1531                           	opt stack 0
  1532                           
  1533                           ; 2 bytes @ 0x0
  1534  000001                     	ds	1
  1535  000002                     i2I2C_Master_Read@a:
  1536                           	opt stack 0
  1537  000002                     i2lcdNibble@data:
  1538                           	opt stack 0
  1539  000002                     i2_isdigit$1648:
  1540                           	opt stack 0
  1541  000002                     i2I2C_Master_Write@d:
  1542                           	opt stack 0
  1543                           
  1544                           ; 2 bytes @ 0x1
  1545  000002                     	ds	1
  1546  000003                     i2I2C_Master_Read@temp:
  1547                           	opt stack 0
  1548  000003                     i2lcdInst@data:
  1549                           	opt stack 0
  1550  000003                     i2putch@data:
  1551                           	opt stack 0
  1552  000003                     i2isdigit@c:
  1553                           	opt stack 0
  1554  000003                     i2___wmul@multiplicand:
  1555                           	opt stack 0
  1556  000003                     i2___lwmod@divisor:
  1557                           	opt stack 0
  1558  000003                     i2strcpy@from:
  1559                           	opt stack 0
  1560                           
  1561                           ; 2 bytes @ 0x2
  1562  000003                     	ds	1
  1563  000004                     i2getRTC@i:
  1564                           	opt stack 0
  1565                           
  1566                           ; 2 bytes @ 0x3
  1567  000004                     	ds	1
  1568  000005                     i2___lwmod@counter:
  1569                           	opt stack 0
  1570  000005                     i2___wmul@product:
  1571                           	opt stack 0
  1572  000005                     i2strcpy@cp:
  1573                           	opt stack 0
  1574                           
  1575                           ; 2 bytes @ 0x4
  1576  000005                     	ds	1
  1577  000006                     ?i2___lwdiv:
  1578                           	opt stack 0
  1579  000006                     i2___lwdiv@dividend:
  1580                           	opt stack 0
  1581                           
  1582                           ; 2 bytes @ 0x5
  1583  000006                     	ds	2
  1584  000008                     i2___lwdiv@divisor:
  1585                           	opt stack 0
  1586                           
  1587                           ; 2 bytes @ 0x7
  1588  000008                     	ds	2
  1589  00000A                     i2___lwdiv@quotient:
  1590                           	opt stack 0
  1591                           
  1592                           ; 2 bytes @ 0x9
  1593  00000A                     	ds	2
  1594  00000C                     i2___lwdiv@counter:
  1595                           	opt stack 0
  1596                           
  1597                           ; 1 bytes @ 0xB
  1598  00000C                     	ds	1
  1599  00000D                     ?i2_printf:
  1600                           	opt stack 0
  1601  00000D                     i2printf@f:
  1602                           	opt stack 0
  1603                           
  1604                           ; 2 bytes @ 0xC
  1605  00000D                     	ds	12
  1606  000019                     ??i2_printf:
  1607                           
  1608                           ; 1 bytes @ 0x18
  1609  000019                     	ds	4
  1610  00001D                     i2printf@prec:
  1611                           	opt stack 0
  1612                           
  1613                           ; 1 bytes @ 0x1C
  1614  00001D                     	ds	1
  1615  00001E                     i2printf@ap:
  1616                           	opt stack 0
  1617                           
  1618                           ; 2 bytes @ 0x1D
  1619  00001E                     	ds	2
  1620  000020                     i2printf@cp:
  1621                           	opt stack 0
  1622                           
  1623                           ; 2 bytes @ 0x1F
  1624  000020                     	ds	2
  1625  000022                     i2printf@val:
  1626                           	opt stack 0
  1627                           
  1628                           ; 2 bytes @ 0x21
  1629  000022                     	ds	2
  1630  000024                     i2printf@len:
  1631                           	opt stack 0
  1632                           
  1633                           ; 2 bytes @ 0x23
  1634  000024                     	ds	2
  1635  000026                     i2printf@flag:
  1636                           	opt stack 0
  1637                           
  1638                           ; 1 bytes @ 0x25
  1639  000026                     	ds	1
  1640  000027                     i2printf@c:
  1641                           	opt stack 0
  1642                           
  1643                           ; 1 bytes @ 0x26
  1644  000027                     	ds	1
  1645  000028                     i2printf@width:
  1646                           	opt stack 0
  1647                           
  1648                           ; 2 bytes @ 0x27
  1649  000028                     	ds	2
  1650  00002A                     ??_printSortTimer:
  1651  00002A                     ??i2_printRTC:
  1652  00002A                     ?_inputHandler:
  1653                           	opt stack 0
  1654                           
  1655                           ; 2 bytes @ 0x29
  1656  00002A                     	ds	2
  1657  00002C                     ??_inputHandler:
  1658                           
  1659                           ; 1 bytes @ 0x2B
  1660  00002C                     	ds	1
  1661  00002D                     printSortTimer@curTime:
  1662                           	opt stack 0
  1663  00002D                     i2printRTC@INT_time:
  1664                           	opt stack 0
  1665                           
  1666                           ; 14 bytes @ 0x2C
  1667  00002D                     	ds	14
  1668  00003B                     printSortTimer@start_sec:
  1669                           	opt stack 0
  1670  00003B                     i2printRTC@RTC_month:
  1671                           	opt stack 0
  1672                           
  1673                           ; 2 bytes @ 0x3A
  1674  00003B                     	ds	2
  1675  00003D                     printSortTimer@cur_sec:
  1676                           	opt stack 0
  1677  00003D                     i2printRTC@month:
  1678                           	opt stack 0
  1679                           
  1680                           ; 4 bytes @ 0x3C
  1681  00003D                     	ds	2
  1682  00003F                     printSortTimer@hour:
  1683                           	opt stack 0
  1684                           
  1685                           ; 2 bytes @ 0x3E
  1686  00003F                     	ds	2
  1687  000041                     printSortTimer@min:
  1688                           	opt stack 0
  1689  000041                     i2printRTC@i:
  1690                           	opt stack 0
  1691                           
  1692                           ; 2 bytes @ 0x40
  1693  000041                     	ds	2
  1694  000043                     ??_updateMenu:
  1695  000043                     printSortTimer@sec:
  1696                           	opt stack 0
  1697                           
  1698                           ; 2 bytes @ 0x42
  1699  000043                     	ds	2
  1700  000045                     _printSortTimer$2121:
  1701                           	opt stack 0
  1702                           
  1703                           ; 2 bytes @ 0x44
  1704  000045                     	ds	2
  1705  000047                     printSortTimer@timeDiff:
  1706                           	opt stack 0
  1707                           
  1708                           ; 2 bytes @ 0x46
  1709  000047                     	ds	2
  1710  000049                     printSortTimer@i:
  1711                           	opt stack 0
  1712                           
  1713                           ; 2 bytes @ 0x48
  1714  000049                     	ds	2
  1715  00004B                     ??_handler:
  1716                           
  1717                           ; 1 bytes @ 0x4A
  1718  00004B                     	ds	16
  1719                           tblptru	equ	0xFF8
  1720                           tblptrh	equ	0xFF7
  1721                           tblptrl	equ	0xFF6
  1722                           tablat	equ	0xFF5
  1723                           postinc0	equ	0xFEE
  1724                           wreg	equ	0xFE8
  1725                           postdec1	equ	0xFE5
  1726                           fsr1l	equ	0xFE1
  1727                           
  1728 ;;
  1729 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1730 ;;
  1731 ;; *************** function _main *****************
  1732 ;; Defined at:
  1733 ;;		line 16 in file "main.c"
  1734 ;; Parameters:    Size  Location     Type
  1735 ;;		None
  1736 ;; Auto vars:     Size  Location     Type
  1737 ;;		None
  1738 ;; Return value:  Size  Location     Type
  1739 ;;                  1    wreg      void 
  1740 ;; Registers used:
  1741 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1742 ;; Tracked objects:
  1743 ;;		On entry : 0/0
  1744 ;;		On exit  : 0/0
  1745 ;;		Unchanged: 0/0
  1746 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1747 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1748 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1749 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1750 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1751 ;;Total ram usage:        0 bytes
  1752 ;; Hardware stack levels required when called:   13
  1753 ;; This function calls:
  1754 ;;		_PortTestA5
  1755 ;;		_UI
  1756 ;;		_initLCD
  1757 ;;		_initTime
  1758 ;;		_initUI
  1759 ;;		_machineConfig
  1760 ;;		_sort
  1761 ;;		_stopSignals
  1762 ;; This function is called by:
  1763 ;;		Startup code after reset
  1764 ;; This function uses a non-reentrant model
  1765 ;;
  1766                           
  1767                           	psect	text0
  1768  002022                     __ptext0:
  1769                           	opt stack 0
  1770  002022                     _main:
  1771                           	opt stack 18
  1772                           
  1773                           ;main.c: 17: machineConfig();
  1774                           
  1775                           ;incstack = 0
  1776  002022  EC20  F012         	call	_machineConfig	;wreg free
  1777                           
  1778                           ;main.c: 18: initLCD();
  1779  002026  ECCC  F012         	call	_initLCD	;wreg free
  1780                           
  1781                           ;main.c: 19: initTime(0x42, 0x44, 0x19, 0x06, 0x24, 0x02, 0x17);
  1782  00202A  0E44               	movlw	68
  1783  00202C  0100               	movlb	0	; () banked
  1784  00202E  6F80               	movwf	initTime@m& (0+255),b
  1785  002030  0E19               	movlw	25
  1786  002032  0100               	movlb	0	; () banked
  1787  002034  6F81               	movwf	initTime@h& (0+255),b
  1788  002036  0E06               	movlw	6
  1789  002038  0100               	movlb	0	; () banked
  1790  00203A  6F82               	movwf	initTime@w& (0+255),b
  1791  00203C  0E24               	movlw	36
  1792  00203E  0100               	movlb	0	; () banked
  1793  002040  6F83               	movwf	initTime@DD& (0+255),b
  1794  002042  0E02               	movlw	2
  1795  002044  0100               	movlb	0	; () banked
  1796  002046  6F84               	movwf	initTime@MM& (0+255),b
  1797  002048  0E17               	movlw	23
  1798  00204A  0100               	movlb	0	; () banked
  1799  00204C  6F85               	movwf	initTime@YY& (0+255),b
  1800  00204E  0E42               	movlw	66
  1801  002050  EC62  F015         	call	_initTime
  1802                           
  1803                           ;main.c: 20: initUI();
  1804  002054  EC92  F015         	call	_initUI	;wreg free
  1805                           
  1806                           ;main.c: 24: switch(machine_state){
  1807                           
  1808                           ;main.c: 23: while(1){
  1809  002058  D016               	goto	l5919
  1810  00205A                     l5903:
  1811                           
  1812                           ;main.c: 26: UI();
  1813  00205A  EC09  F000         	call	_UI	;wreg free
  1814                           
  1815                           ;main.c: 27: break;
  1816  00205E  D013               	goto	l5919
  1817  002060                     l5905:
  1818                           
  1819                           ;main.c: 29: sort();
  1820  002060  EC51  F015         	call	_sort	;wreg free
  1821                           
  1822                           ;main.c: 30: break;
  1823  002064  D010               	goto	l5919
  1824  002066                     l5907:
  1825                           
  1826                           ;main.c: 32: stopSignals();
  1827  002066  EC9F  F015         	call	_stopSignals	;wreg free
  1828                           
  1829                           ;main.c: 33: first = 1;
  1830  00206A  0E00               	movlw	0
  1831  00206C  0100               	movlb	0	; () banked
  1832  00206E  6FFD               	movwf	(_first+1)& (0+255),b
  1833  002070  0E01               	movlw	1
  1834  002072  6FFC               	movwf	_first& (0+255),b
  1835                           
  1836                           ; BSR set to: 0
  1837                           ;main.c: 34: UI();
  1838  002074  EC09  F000         	call	_UI	;wreg free
  1839                           
  1840                           ;main.c: 35: break;
  1841  002078  D006               	goto	l5919
  1842  00207A                     l5913:
  1843                           
  1844                           ;main.c: 37: PortTestA5();
  1845  00207A  ECBE  F015         	call	_PortTestA5	;wreg free
  1846                           
  1847                           ;main.c: 38: break;
  1848  00207E  D003               	goto	l5919
  1849  002080                     l5915:
  1850                           
  1851                           ;main.c: 40: stopSignals();
  1852  002080  EC9F  F015         	call	_stopSignals	;wreg free
  1853  002084                     l748:
  1854  002084  D7FF               	goto	l748
  1855  002086                     l5919:
  1856  002086  0100               	movlb	0	; () banked
  1857  002088  51F7               	movf	_machine_state& (0+255),w,b
  1858                           
  1859                           ; Switch size 1, requested type "space"
  1860                           ; Number of cases is 5, Range of values is 0 to 4
  1861                           ; switch strategies available:
  1862                           ; Name         Instructions Cycles
  1863                           ; simple_byte           16     9 (average)
  1864                           ;	Chosen strategy is simple_byte
  1865  00208A  0A00               	xorlw	0	; case 0
  1866  00208C  B4D8               	btfsc	status,2,c
  1867  00208E  D7E5               	goto	l5903
  1868  002090  0A01               	xorlw	1	; case 1
  1869  002092  B4D8               	btfsc	status,2,c
  1870  002094  D7E5               	goto	l5905
  1871  002096  0A03               	xorlw	3	; case 2
  1872  002098  B4D8               	btfsc	status,2,c
  1873  00209A  D7E5               	goto	l5907
  1874  00209C  0A01               	xorlw	1	; case 3
  1875  00209E  B4D8               	btfsc	status,2,c
  1876  0020A0  D7EC               	goto	l5913
  1877  0020A2  0A07               	xorlw	7	; case 4
  1878  0020A4  B4D8               	btfsc	status,2,c
  1879  0020A6  D7EC               	goto	l5915
  1880                           
  1881                           ; BSR set to: 0
  1882                           
  1883                           ; BSR set to: 0
  1884  0020A8  D7EE               	goto	l5919
  1885  0020AA                     __end_of_main:
  1886                           	opt stack 0
  1887                           tblptru	equ	0xFF8
  1888                           tblptrh	equ	0xFF7
  1889                           tblptrl	equ	0xFF6
  1890                           tablat	equ	0xFF5
  1891                           postinc0	equ	0xFEE
  1892                           wreg	equ	0xFE8
  1893                           postdec1	equ	0xFE5
  1894                           fsr1l	equ	0xFE1
  1895                           status	equ	0xFD8
  1896                           
  1897 ;; *************** function _stopSignals *****************
  1898 ;; Defined at:
  1899 ;;		line 49 in file "main.c"
  1900 ;; Parameters:    Size  Location     Type
  1901 ;;		None
  1902 ;; Auto vars:     Size  Location     Type
  1903 ;;		None
  1904 ;; Return value:  Size  Location     Type
  1905 ;;                  1    wreg      void 
  1906 ;; Registers used:
  1907 ;;		wreg, status,2
  1908 ;; Tracked objects:
  1909 ;;		On entry : 0/0
  1910 ;;		On exit  : 0/0
  1911 ;;		Unchanged: 0/0
  1912 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1913 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1914 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1915 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1916 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1917 ;;Total ram usage:        0 bytes
  1918 ;; Hardware stack levels used:    1
  1919 ;; Hardware stack levels required when called:    7
  1920 ;; This function calls:
  1921 ;;		Nothing
  1922 ;; This function is called by:
  1923 ;;		_main
  1924 ;; This function uses a non-reentrant model
  1925 ;;
  1926                           
  1927                           	psect	text1
  1928  002B3E                     __ptext1:
  1929                           	opt stack 0
  1930  002B3E                     _stopSignals:
  1931                           	opt stack 23
  1932                           
  1933                           ;main.c: 50: LATA = 0x00;
  1934                           
  1935                           ; BSR set to: 0
  1936                           ;incstack = 0
  1937  002B3E  0E00               	movlw	0
  1938  002B40  6E89               	movwf	3977,c	;volatile
  1939                           
  1940                           ;main.c: 51: LATB = 0x00;
  1941  002B42  0E00               	movlw	0
  1942  002B44  6E8A               	movwf	3978,c	;volatile
  1943                           
  1944                           ;main.c: 52: LATC = 0x00;
  1945  002B46  0E00               	movlw	0
  1946  002B48  6E8B               	movwf	3979,c	;volatile
  1947                           
  1948                           ;main.c: 53: LATD = 0x00;
  1949  002B4A  0E00               	movlw	0
  1950  002B4C  6E8C               	movwf	3980,c	;volatile
  1951                           
  1952                           ;main.c: 54: LATE = 0x00;
  1953  002B4E  0E00               	movlw	0
  1954  002B50  6E8D               	movwf	3981,c	;volatile
  1955  002B52  0012               	return		;funcret
  1956  002B54                     __end_of_stopSignals:
  1957                           	opt stack 0
  1958                           tblptru	equ	0xFF8
  1959                           tblptrh	equ	0xFF7
  1960                           tblptrl	equ	0xFF6
  1961                           tablat	equ	0xFF5
  1962                           postinc0	equ	0xFEE
  1963                           wreg	equ	0xFE8
  1964                           postdec1	equ	0xFE5
  1965                           fsr1l	equ	0xFE1
  1966                           status	equ	0xFD8
  1967                           
  1968 ;; *************** function _sort *****************
  1969 ;; Defined at:
  1970 ;;		line 14 in file "sort.c"
  1971 ;; Parameters:    Size  Location     Type
  1972 ;;		None
  1973 ;; Auto vars:     Size  Location     Type
  1974 ;;		None
  1975 ;; Return value:  Size  Location     Type
  1976 ;;                  1    wreg      void 
  1977 ;; Registers used:
  1978 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1979 ;; Tracked objects:
  1980 ;;		On entry : 0/0
  1981 ;;		On exit  : 0/0
  1982 ;;		Unchanged: 0/0
  1983 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1984 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1985 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1986 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1987 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1988 ;;Total ram usage:        0 bytes
  1989 ;; Hardware stack levels used:    1
  1990 ;; Hardware stack levels required when called:   12
  1991 ;; This function calls:
  1992 ;;		_Distribution
  1993 ;;		_ID
  1994 ;;		_Loading
  1995 ;; This function is called by:
  1996 ;;		_main
  1997 ;; This function uses a non-reentrant model
  1998 ;;
  1999                           
  2000                           	psect	text2
  2001  002AA2                     __ptext2:
  2002                           	opt stack 0
  2003  002AA2                     _sort:
  2004                           	opt stack 18
  2005                           
  2006                           ;sort.c: 15: if(machine_state == Sorting_state){
  2007                           
  2008                           ;incstack = 0
  2009  002AA2  0100               	movlb	0	; () banked
  2010  002AA4  05F7               	decf	_machine_state& (0+255),w,b
  2011  002AA6  B4D8               	btfsc	status,2,c
  2012                           
  2013                           ; BSR set to: 0
  2014                           ;sort.c: 16: Loading();
  2015  002AA8  EC28  F009         	call	_Loading	;wreg free
  2016                           
  2017                           ;sort.c: 17: }
  2018                           ;sort.c: 18: if(machine_state == Sorting_state){
  2019  002AAC  0100               	movlb	0	; () banked
  2020  002AAE  05F7               	decf	_machine_state& (0+255),w,b
  2021  002AB0  B4D8               	btfsc	status,2,c
  2022                           
  2023                           ; BSR set to: 0
  2024                           ;sort.c: 19: ID();
  2025  002AB2  ECFF  F00D         	call	_ID	;wreg free
  2026                           
  2027                           ;sort.c: 20: }
  2028                           ;sort.c: 21: if(machine_state == Sorting_state){
  2029  002AB6  0100               	movlb	0	; () banked
  2030  002AB8  05F7               	decf	_machine_state& (0+255),w,b
  2031  002ABA  A4D8               	btfss	status,2,c
  2032  002ABC  0012               	return	
  2033                           
  2034                           ; BSR set to: 0
  2035                           ;sort.c: 22: Distribution();
  2036  002ABE  EC73  F015         	call	_Distribution	;wreg free
  2037  002AC2  0012               	return	
  2038  002AC4                     __end_of_sort:
  2039                           	opt stack 0
  2040                           tblptru	equ	0xFF8
  2041                           tblptrh	equ	0xFF7
  2042                           tblptrl	equ	0xFF6
  2043                           tablat	equ	0xFF5
  2044                           postinc0	equ	0xFEE
  2045                           wreg	equ	0xFE8
  2046                           postdec1	equ	0xFE5
  2047                           fsr1l	equ	0xFE1
  2048                           status	equ	0xFD8
  2049                           
  2050 ;; *************** function _Loading *****************
  2051 ;; Defined at:
  2052 ;;		line 26 in file "sort.c"
  2053 ;; Parameters:    Size  Location     Type
  2054 ;;		None
  2055 ;; Auto vars:     Size  Location     Type
  2056 ;;  i               1   18[BANK0 ] unsigned char 
  2057 ;;  i               1   17[BANK0 ] unsigned char 
  2058 ;;  i               1   16[BANK0 ] unsigned char 
  2059 ;;  i               1   15[BANK0 ] unsigned char 
  2060 ;;  i               1   14[BANK0 ] unsigned char 
  2061 ;;  i               1   13[BANK0 ] unsigned char 
  2062 ;;  i               1   12[BANK0 ] unsigned char 
  2063 ;;  i               1   11[BANK0 ] unsigned char 
  2064 ;; Return value:  Size  Location     Type
  2065 ;;                  1    wreg      void 
  2066 ;; Registers used:
  2067 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2068 ;; Tracked objects:
  2069 ;;		On entry : 0/0
  2070 ;;		On exit  : 0/0
  2071 ;;		Unchanged: 0/0
  2072 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2073 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2074 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2075 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2076 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2077 ;;Total ram usage:        9 bytes
  2078 ;; Hardware stack levels used:    1
  2079 ;; Hardware stack levels required when called:   11
  2080 ;; This function calls:
  2081 ;;		_initFlags
  2082 ;;		_initServos
  2083 ;;		_initSortTimer
  2084 ;;		_lcdInst
  2085 ;;		_updateServoPosition
  2086 ;; This function is called by:
  2087 ;;		_sort
  2088 ;; This function uses a non-reentrant model
  2089 ;;
  2090                           
  2091                           	psect	text3
  2092  001250                     __ptext3:
  2093                           	opt stack 0
  2094  001250                     _Loading:
  2095                           	opt stack 18
  2096                           
  2097                           ;sort.c: 27: if(first){
  2098                           
  2099                           ;incstack = 0
  2100  001250  0100               	movlb	0	; () banked
  2101  001252  51FC               	movf	_first& (0+255),w,b
  2102  001254  0100               	movlb	0	; () banked
  2103  001256  11FD               	iorwf	(_first+1)& (0+255),w,b
  2104  001258  B4D8               	btfsc	status,2,c
  2105  00125A  D0E8               	goto	l5161
  2106                           
  2107                           ; BSR set to: 0
  2108                           ;sort.c: 28: first = 0;
  2109  00125C  0E00               	movlw	0
  2110  00125E  0100               	movlb	0	; () banked
  2111  001260  6FFD               	movwf	(_first+1)& (0+255),b
  2112  001262  0E00               	movlw	0
  2113  001264  6FFC               	movwf	_first& (0+255),b
  2114                           
  2115                           ; BSR set to: 0
  2116                           ;sort.c: 29: initFlags();
  2117  001266  EC10  F013         	call	_initFlags	;wreg free
  2118                           
  2119                           ;sort.c: 30: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  2120  00126A  0E01               	movlw	1
  2121  00126C  ECD8  F015         	call	_lcdInst
  2122  001270  0E68               	movlw	104
  2123  001272  0100               	movlb	0	; () banked
  2124  001274  6F8A               	movwf	??_Loading& (0+255),b
  2125  001276  0EE4               	movlw	228
  2126  001278                     u5017:
  2127  001278  2EE8               	decfsz	wreg,f,c
  2128  00127A  D7FE               	bra	u5017
  2129  00127C  2F8A               	decfsz	??_Loading& (0+255),f,b
  2130  00127E  D7FC               	bra	u5017
  2131  001280  F000               	nop	
  2132                           
  2133                           ;sort.c: 31: initSortTimer();
  2134  001282  EC25  F00F         	call	_initSortTimer	;wreg free
  2135                           
  2136                           ;sort.c: 34: LATAbits.LATA5 = 1;
  2137  001286  8A89               	bsf	3977,5,c	;volatile
  2138                           
  2139                           ;sort.c: 37: initServos();
  2140  001288  EC66  F013         	call	_initServos	;wreg free
  2141                           
  2142                           ;sort.c: 38: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};f
      +                          or(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
  2143  00128C  0E00               	movlw	0
  2144  00128E  0100               	movlb	0	; () banked
  2145  001290  6F8B               	movwf	Loading@i& (0+255),b
  2146  001292                     l5077:
  2147                           
  2148                           ; BSR set to: 0
  2149  001292  0E63               	movlw	99
  2150  001294  0100               	movlb	0	; () banked
  2151  001296  658B               	cpfsgt	Loading@i& (0+255),b
  2152  001298  D001               	goto	l5081
  2153  00129A  D00C               	goto	l5085
  2154  00129C                     l5081:
  2155                           
  2156                           ; BSR set to: 0
  2157  00129C  0E68               	movlw	104
  2158  00129E  0100               	movlb	0	; () banked
  2159  0012A0  6F8A               	movwf	??_Loading& (0+255),b
  2160  0012A2  0EE4               	movlw	228
  2161  0012A4                     u5027:
  2162  0012A4  2EE8               	decfsz	wreg,f,c
  2163  0012A6  D7FE               	bra	u5027
  2164  0012A8  2F8A               	decfsz	??_Loading& (0+255),f,b
  2165  0012AA  D7FC               	bra	u5027
  2166  0012AC  F000               	nop	
  2167  0012AE  0100               	movlb	0	; () banked
  2168  0012B0  2B8B               	incf	Loading@i& (0+255),f,b
  2169  0012B2  D7EF               	goto	l5077
  2170  0012B4                     l5085:
  2171                           
  2172                           ; BSR set to: 0
  2173  0012B4  0E00               	movlw	0
  2174  0012B6  0100               	movlb	0	; () banked
  2175  0012B8  6F8C               	movwf	Loading@i_1256& (0+255),b
  2176  0012BA                     l5087:
  2177                           
  2178                           ; BSR set to: 0
  2179  0012BA  0E63               	movlw	99
  2180  0012BC  0100               	movlb	0	; () banked
  2181  0012BE  658C               	cpfsgt	Loading@i_1256& (0+255),b
  2182  0012C0  D001               	goto	l5091
  2183  0012C2  D00C               	goto	l5095
  2184  0012C4                     l5091:
  2185                           
  2186                           ; BSR set to: 0
  2187  0012C4  0E68               	movlw	104
  2188  0012C6  0100               	movlb	0	; () banked
  2189  0012C8  6F8A               	movwf	??_Loading& (0+255),b
  2190  0012CA  0EE4               	movlw	228
  2191  0012CC                     u5037:
  2192  0012CC  2EE8               	decfsz	wreg,f,c
  2193  0012CE  D7FE               	bra	u5037
  2194  0012D0  2F8A               	decfsz	??_Loading& (0+255),f,b
  2195  0012D2  D7FC               	bra	u5037
  2196  0012D4  F000               	nop	
  2197  0012D6  0100               	movlb	0	; () banked
  2198  0012D8  2B8C               	incf	Loading@i_1256& (0+255),f,b
  2199  0012DA  D7EF               	goto	l5087
  2200  0012DC                     l5095:
  2201                           
  2202                           ; BSR set to: 0
  2203                           ;sort.c: 39: updateServoPosition(1000, 1);
  2204  0012DC  0E03               	movlw	3
  2205  0012DE  0100               	movlb	0	; () banked
  2206  0012E0  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  2207  0012E2  0EE8               	movlw	232
  2208  0012E4  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  2209  0012E6  0E00               	movlw	0
  2210  0012E8  0100               	movlb	0	; () banked
  2211  0012EA  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  2212  0012EC  0E01               	movlw	1
  2213  0012EE  6F82               	movwf	updateServoPosition@timer& (0+255),b
  2214  0012F0  EC17  F011         	call	_updateServoPosition	;wreg free
  2215                           
  2216                           ;sort.c: 40: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};f
      +                          or(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
  2217  0012F4  0E00               	movlw	0
  2218  0012F6  0100               	movlb	0	; () banked
  2219  0012F8  6F8D               	movwf	Loading@i_1257& (0+255),b
  2220  0012FA                     l5099:
  2221                           
  2222                           ; BSR set to: 0
  2223  0012FA  0E63               	movlw	99
  2224  0012FC  0100               	movlb	0	; () banked
  2225  0012FE  658D               	cpfsgt	Loading@i_1257& (0+255),b
  2226  001300  D001               	goto	l5103
  2227  001302  D00C               	goto	l5107
  2228  001304                     l5103:
  2229                           
  2230                           ; BSR set to: 0
  2231  001304  0E68               	movlw	104
  2232  001306  0100               	movlb	0	; () banked
  2233  001308  6F8A               	movwf	??_Loading& (0+255),b
  2234  00130A  0EE4               	movlw	228
  2235  00130C                     u5047:
  2236  00130C  2EE8               	decfsz	wreg,f,c
  2237  00130E  D7FE               	bra	u5047
  2238  001310  2F8A               	decfsz	??_Loading& (0+255),f,b
  2239  001312  D7FC               	bra	u5047
  2240  001314  F000               	nop	
  2241  001316  0100               	movlb	0	; () banked
  2242  001318  2B8D               	incf	Loading@i_1257& (0+255),f,b
  2243  00131A  D7EF               	goto	l5099
  2244  00131C                     l5107:
  2245                           
  2246                           ; BSR set to: 0
  2247  00131C  0E00               	movlw	0
  2248  00131E  0100               	movlb	0	; () banked
  2249  001320  6F8E               	movwf	Loading@i_1258& (0+255),b
  2250  001322                     l5109:
  2251                           
  2252                           ; BSR set to: 0
  2253  001322  0E63               	movlw	99
  2254  001324  0100               	movlb	0	; () banked
  2255  001326  658E               	cpfsgt	Loading@i_1258& (0+255),b
  2256  001328  D001               	goto	l5113
  2257  00132A  D00C               	goto	l5117
  2258  00132C                     l5113:
  2259                           
  2260                           ; BSR set to: 0
  2261  00132C  0E68               	movlw	104
  2262  00132E  0100               	movlb	0	; () banked
  2263  001330  6F8A               	movwf	??_Loading& (0+255),b
  2264  001332  0EE4               	movlw	228
  2265  001334                     u5057:
  2266  001334  2EE8               	decfsz	wreg,f,c
  2267  001336  D7FE               	bra	u5057
  2268  001338  2F8A               	decfsz	??_Loading& (0+255),f,b
  2269  00133A  D7FC               	bra	u5057
  2270  00133C  F000               	nop	
  2271  00133E  0100               	movlb	0	; () banked
  2272  001340  2B8E               	incf	Loading@i_1258& (0+255),f,b
  2273  001342  D7EF               	goto	l5109
  2274  001344                     l5117:
  2275                           
  2276                           ; BSR set to: 0
  2277                           ;sort.c: 41: updateServoPosition(1500, 3);
  2278  001344  0E05               	movlw	5
  2279  001346  0100               	movlb	0	; () banked
  2280  001348  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  2281  00134A  0EDC               	movlw	220
  2282  00134C  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  2283  00134E  0E00               	movlw	0
  2284  001350  0100               	movlb	0	; () banked
  2285  001352  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  2286  001354  0E03               	movlw	3
  2287  001356  6F82               	movwf	updateServoPosition@timer& (0+255),b
  2288  001358  EC17  F011         	call	_updateServoPosition	;wreg free
  2289                           
  2290                           ;sort.c: 42: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};f
      +                          or(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
  2291  00135C  0E00               	movlw	0
  2292  00135E  0100               	movlb	0	; () banked
  2293  001360  6F8F               	movwf	Loading@i_1259& (0+255),b
  2294  001362                     l5121:
  2295                           
  2296                           ; BSR set to: 0
  2297  001362  0E63               	movlw	99
  2298  001364  0100               	movlb	0	; () banked
  2299  001366  658F               	cpfsgt	Loading@i_1259& (0+255),b
  2300  001368  D001               	goto	l5125
  2301  00136A  D00C               	goto	l5129
  2302  00136C                     l5125:
  2303                           
  2304                           ; BSR set to: 0
  2305  00136C  0E68               	movlw	104
  2306  00136E  0100               	movlb	0	; () banked
  2307  001370  6F8A               	movwf	??_Loading& (0+255),b
  2308  001372  0EE4               	movlw	228
  2309  001374                     u5067:
  2310  001374  2EE8               	decfsz	wreg,f,c
  2311  001376  D7FE               	bra	u5067
  2312  001378  2F8A               	decfsz	??_Loading& (0+255),f,b
  2313  00137A  D7FC               	bra	u5067
  2314  00137C  F000               	nop	
  2315  00137E  0100               	movlb	0	; () banked
  2316  001380  2B8F               	incf	Loading@i_1259& (0+255),f,b
  2317  001382  D7EF               	goto	l5121
  2318  001384                     l5129:
  2319                           
  2320                           ; BSR set to: 0
  2321  001384  0E00               	movlw	0
  2322  001386  0100               	movlb	0	; () banked
  2323  001388  6F90               	movwf	Loading@i_1260& (0+255),b
  2324  00138A                     l5131:
  2325                           
  2326                           ; BSR set to: 0
  2327  00138A  0E63               	movlw	99
  2328  00138C  0100               	movlb	0	; () banked
  2329  00138E  6590               	cpfsgt	Loading@i_1260& (0+255),b
  2330  001390  D001               	goto	l5135
  2331  001392  D00C               	goto	l5139
  2332  001394                     l5135:
  2333                           
  2334                           ; BSR set to: 0
  2335  001394  0E68               	movlw	104
  2336  001396  0100               	movlb	0	; () banked
  2337  001398  6F8A               	movwf	??_Loading& (0+255),b
  2338  00139A  0EE4               	movlw	228
  2339  00139C                     u5077:
  2340  00139C  2EE8               	decfsz	wreg,f,c
  2341  00139E  D7FE               	bra	u5077
  2342  0013A0  2F8A               	decfsz	??_Loading& (0+255),f,b
  2343  0013A2  D7FC               	bra	u5077
  2344  0013A4  F000               	nop	
  2345  0013A6  0100               	movlb	0	; () banked
  2346  0013A8  2B90               	incf	Loading@i_1260& (0+255),f,b
  2347  0013AA  D7EF               	goto	l5131
  2348  0013AC                     l5139:
  2349                           
  2350                           ; BSR set to: 0
  2351                           ;sort.c: 43: updateServoPosition(1000, 3);
  2352  0013AC  0E03               	movlw	3
  2353  0013AE  0100               	movlb	0	; () banked
  2354  0013B0  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  2355  0013B2  0EE8               	movlw	232
  2356  0013B4  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  2357  0013B6  0E00               	movlw	0
  2358  0013B8  0100               	movlb	0	; () banked
  2359  0013BA  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  2360  0013BC  0E03               	movlw	3
  2361  0013BE  6F82               	movwf	updateServoPosition@timer& (0+255),b
  2362  0013C0  EC17  F011         	call	_updateServoPosition	;wreg free
  2363                           
  2364                           ;sort.c: 44: updateServoPosition(1500, 1);
  2365  0013C4  0E05               	movlw	5
  2366  0013C6  0100               	movlb	0	; () banked
  2367  0013C8  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  2368  0013CA  0EDC               	movlw	220
  2369  0013CC  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  2370  0013CE  0E00               	movlw	0
  2371  0013D0  0100               	movlb	0	; () banked
  2372  0013D2  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  2373  0013D4  0E01               	movlw	1
  2374  0013D6  6F82               	movwf	updateServoPosition@timer& (0+255),b
  2375  0013D8  EC17  F011         	call	_updateServoPosition	;wreg free
  2376                           
  2377                           ;sort.c: 45: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};f
      +                          or(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
  2378  0013DC  0E00               	movlw	0
  2379  0013DE  0100               	movlb	0	; () banked
  2380  0013E0  6F91               	movwf	Loading@i_1261& (0+255),b
  2381  0013E2                     l5143:
  2382                           
  2383                           ; BSR set to: 0
  2384  0013E2  0E63               	movlw	99
  2385  0013E4  0100               	movlb	0	; () banked
  2386  0013E6  6591               	cpfsgt	Loading@i_1261& (0+255),b
  2387  0013E8  D001               	goto	l5147
  2388  0013EA  D00C               	goto	l5151
  2389  0013EC                     l5147:
  2390                           
  2391                           ; BSR set to: 0
  2392  0013EC  0E68               	movlw	104
  2393  0013EE  0100               	movlb	0	; () banked
  2394  0013F0  6F8A               	movwf	??_Loading& (0+255),b
  2395  0013F2  0EE4               	movlw	228
  2396  0013F4                     u5087:
  2397  0013F4  2EE8               	decfsz	wreg,f,c
  2398  0013F6  D7FE               	bra	u5087
  2399  0013F8  2F8A               	decfsz	??_Loading& (0+255),f,b
  2400  0013FA  D7FC               	bra	u5087
  2401  0013FC  F000               	nop	
  2402  0013FE  0100               	movlb	0	; () banked
  2403  001400  2B91               	incf	Loading@i_1261& (0+255),f,b
  2404  001402  D7EF               	goto	l5143
  2405  001404                     l5151:
  2406                           
  2407                           ; BSR set to: 0
  2408  001404  0E00               	movlw	0
  2409  001406  0100               	movlb	0	; () banked
  2410  001408  6F92               	movwf	Loading@i_1262& (0+255),b
  2411  00140A                     l5153:
  2412                           
  2413                           ; BSR set to: 0
  2414  00140A  0E63               	movlw	99
  2415  00140C  0100               	movlb	0	; () banked
  2416  00140E  6592               	cpfsgt	Loading@i_1262& (0+255),b
  2417  001410  D001               	goto	l5157
  2418  001412  0012               	return	
  2419  001414                     l5157:
  2420                           
  2421                           ; BSR set to: 0
  2422  001414  0E68               	movlw	104
  2423  001416  0100               	movlb	0	; () banked
  2424  001418  6F8A               	movwf	??_Loading& (0+255),b
  2425  00141A  0EE4               	movlw	228
  2426  00141C                     u5097:
  2427  00141C  2EE8               	decfsz	wreg,f,c
  2428  00141E  D7FE               	bra	u5097
  2429  001420  2F8A               	decfsz	??_Loading& (0+255),f,b
  2430  001422  D7FC               	bra	u5097
  2431  001424  F000               	nop	
  2432  001426  0100               	movlb	0	; () banked
  2433  001428  2B92               	incf	Loading@i_1262& (0+255),f,b
  2434  00142A  D7EF               	goto	l5153
  2435  00142C                     l5161:
  2436                           
  2437                           ; BSR set to: 0
  2438                           ;sort.c: 49: else{
  2439                           ;sort.c: 52: if(!f_loadingNewCan){
  2440  00142C  0100               	movlb	0	; () banked
  2441  00142E  51EF               	movf	_f_loadingNewCan& (0+255),w,b
  2442  001430  0100               	movlb	0	; () banked
  2443  001432  11F0               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  2444  001434  A4D8               	btfss	status,2,c
  2445  001436  D016               	goto	l5175
  2446                           
  2447                           ; BSR set to: 0
  2448                           ;sort.c: 56: if(!f_loadingNewCan){
  2449  001438  0100               	movlb	0	; () banked
  2450  00143A  51EF               	movf	_f_loadingNewCan& (0+255),w,b
  2451  00143C  0100               	movlb	0	; () banked
  2452  00143E  11F0               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  2453  001440  B4D8               	btfsc	status,2,c
  2454  001442  0012               	return	
  2455                           
  2456                           ; BSR set to: 0
  2457                           ;sort.c: 60: else{
  2458                           ;sort.c: 61: count_total++;
  2459                           
  2460                           ; BSR set to: 0
  2461                           
  2462                           ; BSR set to: 0
  2463                           ;sort.c: 58: }
  2464                           
  2465                           ; BSR set to: 0
  2466                           ;sort.c: 57: return;
  2467  001444  0100               	movlb	0	; () banked
  2468  001446  4BE5               	infsnz	_count_total& (0+255),f,b
  2469  001448  2BE6               	incf	(_count_total+1)& (0+255),f,b
  2470                           
  2471                           ; BSR set to: 0
  2472                           ;sort.c: 62: if(count_total == 12){
  2473  00144A  0E0C               	movlw	12
  2474  00144C  0100               	movlb	0	; () banked
  2475  00144E  19E5               	xorwf	_count_total& (0+255),w,b
  2476  001450  0100               	movlb	0	; () banked
  2477  001452  11E6               	iorwf	(_count_total+1)& (0+255),w,b
  2478  001454  A4D8               	btfss	status,2,c
  2479  001456  0012               	return	
  2480                           
  2481                           ; BSR set to: 0
  2482                           ;sort.c: 63: f_lastCan = 1;
  2483  001458  0E00               	movlw	0
  2484  00145A  0100               	movlb	0	; () banked
  2485  00145C  6FEE               	movwf	(_f_lastCan+1)& (0+255),b
  2486  00145E  0E01               	movlw	1
  2487  001460  6FED               	movwf	_f_lastCan& (0+255),b
  2488                           
  2489                           ; BSR set to: 0
  2490                           ;sort.c: 64: }
  2491                           ;sort.c: 65: }
  2492                           ;sort.c: 66: }
  2493                           
  2494                           ; BSR set to: 0
  2495  001462  0012               	return	
  2496  001464                     l5175:
  2497                           
  2498                           ; BSR set to: 0
  2499                           ;sort.c: 69: else if(f_ID_receive){
  2500  001464  0100               	movlb	0	; () banked
  2501  001466  51FA               	movf	_f_ID_receive& (0+255),w,b
  2502  001468  0100               	movlb	0	; () banked
  2503  00146A  11FB               	iorwf	(_f_ID_receive+1)& (0+255),w,b
  2504  00146C  B4D8               	btfsc	status,2,c
  2505  00146E  0012               	return	
  2506                           
  2507                           ; BSR set to: 0
  2508                           ;sort.c: 70: f_loadingNewCan = 0;
  2509  001470  0E00               	movlw	0
  2510  001472  0100               	movlb	0	; () banked
  2511  001474  6FF0               	movwf	(_f_loadingNewCan+1)& (0+255),b
  2512  001476  0E00               	movlw	0
  2513  001478  6FEF               	movwf	_f_loadingNewCan& (0+255),b
  2514                           
  2515                           ; BSR set to: 0
  2516                           ;sort.c: 71: LATAbits.LATA4 = 1;
  2517  00147A  8889               	bsf	3977,4,c	;volatile
  2518                           
  2519                           ;sort.c: 72: f_can_coming_to_ID = 1;
  2520  00147C  0E00               	movlw	0
  2521  00147E  0100               	movlb	0	; () banked
  2522  001480  6FEA               	movwf	(_f_can_coming_to_ID+1)& (0+255),b
  2523  001482  0E01               	movlw	1
  2524  001484  6FE9               	movwf	_f_can_coming_to_ID& (0+255),b
  2525                           
  2526                           ; BSR set to: 0
  2527                           ;sort.c: 75: LATAbits.LATA4 = 0;
  2528  001486  9889               	bcf	3977,4,c	;volatile
  2529                           
  2530                           ; BSR set to: 0
  2531                           
  2532                           ; BSR set to: 0
  2533  001488  0012               	return	
  2534  00148A                     __end_of_Loading:
  2535                           	opt stack 0
  2536                           tblptru	equ	0xFF8
  2537                           tblptrh	equ	0xFF7
  2538                           tblptrl	equ	0xFF6
  2539                           tablat	equ	0xFF5
  2540                           postinc0	equ	0xFEE
  2541                           wreg	equ	0xFE8
  2542                           postdec1	equ	0xFE5
  2543                           fsr1l	equ	0xFE1
  2544                           status	equ	0xFD8
  2545                           
  2546 ;; *************** function _initSortTimer *****************
  2547 ;; Defined at:
  2548 ;;		line 128 in file "sort.c"
  2549 ;; Parameters:    Size  Location     Type
  2550 ;;		None
  2551 ;; Auto vars:     Size  Location     Type
  2552 ;;  i               2    8[BANK0 ] int 
  2553 ;; Return value:  Size  Location     Type
  2554 ;;                  1    wreg      void 
  2555 ;; Registers used:
  2556 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2557 ;; Tracked objects:
  2558 ;;		On entry : 0/0
  2559 ;;		On exit  : 0/0
  2560 ;;		Unchanged: 0/0
  2561 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2562 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2563 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2564 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2565 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2566 ;;Total ram usage:        5 bytes
  2567 ;; Hardware stack levels used:    1
  2568 ;; Hardware stack levels required when called:   10
  2569 ;; This function calls:
  2570 ;;		_getRTC
  2571 ;; This function is called by:
  2572 ;;		_Loading
  2573 ;; This function uses a non-reentrant model
  2574 ;;
  2575                           
  2576                           	psect	text4
  2577  001E4A                     __ptext4:
  2578                           	opt stack 0
  2579  001E4A                     _initSortTimer:
  2580                           	opt stack 18
  2581                           
  2582                           ;sort.c: 130: getRTC();
  2583                           
  2584                           ; BSR set to: 0
  2585                           ;incstack = 0
  2586  001E4A  EC98  F010         	call	_getRTC	;wreg free
  2587                           
  2588                           ;sort.c: 131: for(int i = 0; i < 7; i++){
  2589  001E4E  0E00               	movlw	0
  2590  001E50  0100               	movlb	0	; () banked
  2591  001E52  6F89               	movwf	(initSortTimer@i+1)& (0+255),b
  2592  001E54  0E00               	movlw	0
  2593  001E56  6F88               	movwf	initSortTimer@i& (0+255),b
  2594  001E58                     l4775:
  2595                           
  2596                           ; BSR set to: 0
  2597  001E58  0100               	movlb	0	; () banked
  2598  001E5A  BF89               	btfsc	(initSortTimer@i+1)& (0+255),7,b
  2599  001E5C  D008               	goto	l4779
  2600  001E5E  0100               	movlb	0	; () banked
  2601  001E60  5189               	movf	(initSortTimer@i+1)& (0+255),w,b
  2602  001E62  E140               	bnz	l4785
  2603  001E64  0E07               	movlw	7
  2604  001E66  0100               	movlb	0	; () banked
  2605  001E68  5D88               	subwf	initSortTimer@i& (0+255),w,b
  2606  001E6A  B0D8               	btfsc	status,0,c
  2607  001E6C  D03B               	goto	l4785
  2608  001E6E                     l4779:
  2609                           
  2610                           ; BSR set to: 0
  2611                           ;sort.c: 132: startTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  2612  001E6E  0EDC               	movlw	low _time
  2613  001E70  0100               	movlb	0	; () banked
  2614  001E72  2588               	addwf	initSortTimer@i& (0+255),w,b
  2615  001E74  6ED9               	movwf	fsr2l,c
  2616  001E76  0E00               	movlw	high _time
  2617  001E78  0100               	movlb	0	; () banked
  2618  001E7A  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  2619  001E7C  6EDA               	movwf	fsr2h,c
  2620  001E7E  50DF               	movf	indf2,w,c
  2621  001E80  0100               	movlb	0	; () banked
  2622  001E82  6F85               	movwf	??_initSortTimer& (0+255),b
  2623  001E84  0100               	movlb	0	; () banked
  2624  001E86  3B85               	swapf	??_initSortTimer& (0+255),f,b
  2625  001E88  0E0F               	movlw	15
  2626  001E8A  1785               	andwf	??_initSortTimer& (0+255),f,b
  2627  001E8C  0E0F               	movlw	15
  2628  001E8E  0100               	movlb	0	; () banked
  2629  001E90  1785               	andwf	??_initSortTimer& (0+255),f,b
  2630  001E92  0100               	movlb	0	; () banked
  2631  001E94  5185               	movf	??_initSortTimer& (0+255),w,b
  2632  001E96  0D0A               	mullw	10
  2633  001E98  0EDC               	movlw	low _time
  2634  001E9A  0100               	movlb	0	; () banked
  2635  001E9C  2588               	addwf	initSortTimer@i& (0+255),w,b
  2636  001E9E  6ED9               	movwf	fsr2l,c
  2637  001EA0  0E00               	movlw	high _time
  2638  001EA2  0100               	movlb	0	; () banked
  2639  001EA4  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  2640  001EA6  6EDA               	movwf	fsr2h,c
  2641  001EA8  50DF               	movf	indf2,w,c
  2642  001EAA  0B0F               	andlw	15
  2643  001EAC  0100               	movlb	0	; () banked
  2644  001EAE  6F86               	movwf	(??_initSortTimer+1)& (0+255),b
  2645  001EB0  6B87               	clrf	(??_initSortTimer+2)& (0+255),b
  2646  001EB2  50F3               	movf	prodl,w,c
  2647  001EB4  0100               	movlb	0	; () banked
  2648  001EB6  2786               	addwf	(??_initSortTimer+1)& (0+255),f,b
  2649  001EB8  50F4               	movf	prodh,w,c
  2650  001EBA  0100               	movlb	0	; () banked
  2651  001EBC  2387               	addwfc	(??_initSortTimer+2)& (0+255),f,b
  2652  001EBE  90D8               	bcf	status,0,c
  2653  001EC0  0100               	movlb	0	; () banked
  2654  001EC2  3588               	rlcf	initSortTimer@i& (0+255),w,b
  2655  001EC4  6ED9               	movwf	fsr2l,c
  2656  001EC6  0100               	movlb	0	; () banked
  2657  001EC8  3589               	rlcf	(initSortTimer@i+1)& (0+255),w,b
  2658  001ECA  6EDA               	movwf	fsr2h,c
  2659  001ECC  0E00               	movlw	low _startTime
  2660  001ECE  26D9               	addwf	fsr2l,f,c
  2661  001ED0  0E01               	movlw	high _startTime
  2662  001ED2  22DA               	addwfc	fsr2h,f,c
  2663  001ED4  C086  FFDE         	movff	??_initSortTimer+1,postinc2
  2664  001ED8  C087  FFDD         	movff	??_initSortTimer+2,postdec2
  2665                           
  2666                           ; BSR set to: 0
  2667  001EDC  0100               	movlb	0	; () banked
  2668  001EDE  4B88               	infsnz	initSortTimer@i& (0+255),f,b
  2669  001EE0  2B89               	incf	(initSortTimer@i+1)& (0+255),f,b
  2670  001EE2  D7BA               	goto	l4775
  2671  001EE4                     l4785:
  2672                           
  2673                           ; BSR set to: 0
  2674                           ;sort.c: 133: }
  2675                           ;sort.c: 135: T0CON = 0b00010111;
  2676  001EE4  0E17               	movlw	23
  2677  001EE6  6ED5               	movwf	4053,c	;volatile
  2678                           
  2679                           ;sort.c: 144: TMR0H = 0b10000101;
  2680  001EE8  0E85               	movlw	133
  2681  001EEA  6ED7               	movwf	4055,c	;volatile
  2682                           
  2683                           ;sort.c: 145: TMR0L = 0b11101110;
  2684  001EEC  0EEE               	movlw	238
  2685  001EEE  6ED6               	movwf	4054,c	;volatile
  2686                           
  2687                           ; BSR set to: 0
  2688                           ;sort.c: 146: TMR0ON = 1;
  2689  001EF0  8ED5               	bsf	4053,7,c	;volatile
  2690                           
  2691                           ; BSR set to: 0
  2692  001EF2  0012               	return		;funcret
  2693  001EF4                     __end_of_initSortTimer:
  2694                           	opt stack 0
  2695                           tblptru	equ	0xFF8
  2696                           tblptrh	equ	0xFF7
  2697                           tblptrl	equ	0xFF6
  2698                           tablat	equ	0xFF5
  2699                           prodh	equ	0xFF4
  2700                           prodl	equ	0xFF3
  2701                           postinc0	equ	0xFEE
  2702                           wreg	equ	0xFE8
  2703                           postdec1	equ	0xFE5
  2704                           fsr1l	equ	0xFE1
  2705                           indf2	equ	0xFDF
  2706                           postinc2	equ	0xFDE
  2707                           postdec2	equ	0xFDD
  2708                           fsr2h	equ	0xFDA
  2709                           fsr2l	equ	0xFD9
  2710                           status	equ	0xFD8
  2711                           
  2712 ;; *************** function _initServos *****************
  2713 ;; Defined at:
  2714 ;;		line 148 in file "sort.c"
  2715 ;; Parameters:    Size  Location     Type
  2716 ;;		None
  2717 ;; Auto vars:     Size  Location     Type
  2718 ;;		None
  2719 ;; Return value:  Size  Location     Type
  2720 ;;                  1    wreg      void 
  2721 ;; Registers used:
  2722 ;;		wreg, status,2, status,0, cstack
  2723 ;; Tracked objects:
  2724 ;;		On entry : 0/0
  2725 ;;		On exit  : 0/0
  2726 ;;		Unchanged: 0/0
  2727 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2728 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2729 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2730 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2731 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2732 ;;Total ram usage:        0 bytes
  2733 ;; Hardware stack levels used:    1
  2734 ;; Hardware stack levels required when called:    8
  2735 ;; This function calls:
  2736 ;;		_updateServoPosition
  2737 ;; This function is called by:
  2738 ;;		_Loading
  2739 ;; This function uses a non-reentrant model
  2740 ;;
  2741                           
  2742                           	psect	text5
  2743  0026CC                     __ptext5:
  2744                           	opt stack 0
  2745  0026CC                     _initServos:
  2746                           	opt stack 20
  2747                           
  2748                           ;sort.c: 149: updateServoPosition(1500, 1);
  2749                           
  2750                           ; BSR set to: 0
  2751                           ;incstack = 0
  2752  0026CC  0E05               	movlw	5
  2753  0026CE  0100               	movlb	0	; () banked
  2754  0026D0  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  2755  0026D2  0EDC               	movlw	220
  2756  0026D4  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  2757  0026D6  0E00               	movlw	0
  2758  0026D8  0100               	movlb	0	; () banked
  2759  0026DA  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  2760  0026DC  0E01               	movlw	1
  2761  0026DE  6F82               	movwf	updateServoPosition@timer& (0+255),b
  2762  0026E0  EC17  F011         	call	_updateServoPosition	;wreg free
  2763                           
  2764                           ;sort.c: 150: updateServoPosition(1000, 3);
  2765  0026E4  0E03               	movlw	3
  2766  0026E6  0100               	movlb	0	; () banked
  2767  0026E8  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  2768  0026EA  0EE8               	movlw	232
  2769  0026EC  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  2770  0026EE  0E00               	movlw	0
  2771  0026F0  0100               	movlb	0	; () banked
  2772  0026F2  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  2773  0026F4  0E03               	movlw	3
  2774  0026F6  6F82               	movwf	updateServoPosition@timer& (0+255),b
  2775  0026F8  EC17  F011         	call	_updateServoPosition	;wreg free
  2776                           
  2777                           ;sort.c: 151: TMR1ON = 1;
  2778  0026FC  80CD               	bsf	4045,0,c	;volatile
  2779                           
  2780                           ;sort.c: 152: TMR3ON = 1;
  2781  0026FE  80B1               	bsf	4017,0,c	;volatile
  2782  002700  0012               	return		;funcret
  2783  002702                     __end_of_initServos:
  2784                           	opt stack 0
  2785                           tblptru	equ	0xFF8
  2786                           tblptrh	equ	0xFF7
  2787                           tblptrl	equ	0xFF6
  2788                           tablat	equ	0xFF5
  2789                           prodh	equ	0xFF4
  2790                           prodl	equ	0xFF3
  2791                           postinc0	equ	0xFEE
  2792                           wreg	equ	0xFE8
  2793                           postdec1	equ	0xFE5
  2794                           fsr1l	equ	0xFE1
  2795                           indf2	equ	0xFDF
  2796                           postinc2	equ	0xFDE
  2797                           postdec2	equ	0xFDD
  2798                           fsr2h	equ	0xFDA
  2799                           fsr2l	equ	0xFD9
  2800                           status	equ	0xFD8
  2801                           
  2802 ;; *************** function _updateServoPosition *****************
  2803 ;; Defined at:
  2804 ;;		line 194 in file "sort.c"
  2805 ;; Parameters:    Size  Location     Type
  2806 ;;  time_us         2    0[BANK0 ] int 
  2807 ;;  timer           2    2[BANK0 ] int 
  2808 ;; Auto vars:     Size  Location     Type
  2809 ;;  my_time         2    6[BANK0 ] unsigned int 
  2810 ;; Return value:  Size  Location     Type
  2811 ;;                  1    wreg      void 
  2812 ;; Registers used:
  2813 ;;		wreg, status,2, status,0
  2814 ;; Tracked objects:
  2815 ;;		On entry : 0/0
  2816 ;;		On exit  : 0/0
  2817 ;;		Unchanged: 0/0
  2818 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2819 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2820 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2821 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2822 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2823 ;;Total ram usage:        8 bytes
  2824 ;; Hardware stack levels used:    1
  2825 ;; Hardware stack levels required when called:    7
  2826 ;; This function calls:
  2827 ;;		Nothing
  2828 ;; This function is called by:
  2829 ;;		_Loading
  2830 ;;		_initServos
  2831 ;; This function uses a non-reentrant model
  2832 ;;
  2833                           
  2834                           	psect	text6
  2835  00222E                     __ptext6:
  2836                           	opt stack 0
  2837  00222E                     _updateServoPosition:
  2838                           	opt stack 21
  2839                           
  2840                           ;sort.c: 195: unsigned int my_time = 65535 - time_us;
  2841                           
  2842                           ;incstack = 0
  2843  00222E  C080  F084         	movff	updateServoPosition@time_us,??_updateServoPosition
  2844  002232  C081  F085         	movff	updateServoPosition@time_us+1,??_updateServoPosition+1
  2845  002236  0100               	movlb	0	; () banked
  2846  002238  1F84               	comf	??_updateServoPosition& (0+255),f,b
  2847  00223A  1F85               	comf	(??_updateServoPosition+1)& (0+255),f,b
  2848  00223C  4B84               	infsnz	??_updateServoPosition& (0+255),f,b
  2849  00223E  2B85               	incf	(??_updateServoPosition+1)& (0+255),f,b
  2850  002240  0EFF               	movlw	255
  2851  002242  0100               	movlb	0	; () banked
  2852  002244  2584               	addwf	??_updateServoPosition& (0+255),w,b
  2853  002246  0100               	movlb	0	; () banked
  2854  002248  6F86               	movwf	updateServoPosition@my_time& (0+255),b
  2855  00224A  0EFF               	movlw	255
  2856  00224C  0100               	movlb	0	; () banked
  2857  00224E  2185               	addwfc	(??_updateServoPosition+1)& (0+255),w,b
  2858  002250  0100               	movlb	0	; () banked
  2859  002252  6F87               	movwf	(updateServoPosition@my_time+1)& (0+255),b
  2860                           
  2861                           ;sort.c: 196: switch(timer){
  2862  002254  D015               	goto	l4441
  2863  002256                     l4439:
  2864                           
  2865                           ; BSR set to: 0
  2866                           ;sort.c: 198: servoTimes[0] = my_time >> 8;
  2867  002256  0100               	movlb	0	; () banked
  2868  002258  5187               	movf	(updateServoPosition@my_time+1)& (0+255),w,b
  2869  00225A  0100               	movlb	0	; () banked
  2870  00225C  6FD4               	movwf	_servoTimes& (0+255),b
  2871  00225E  6BD5               	clrf	(_servoTimes+1)& (0+255),b
  2872                           
  2873                           ;sort.c: 199: servoTimes[1] = my_time & 0xFF;
  2874  002260  0100               	movlb	0	; () banked
  2875  002262  5186               	movf	updateServoPosition@my_time& (0+255),w,b
  2876  002264  0100               	movlb	0	; () banked
  2877  002266  6FD6               	movwf	(_servoTimes+2)& (0+255),b
  2878  002268  6BD7               	clrf	(_servoTimes+3)& (0+255),b
  2879  00226A                     l1151:
  2880                           
  2881                           ; BSR set to: 0
  2882                           ;sort.c: 201: servoTimes[2] = my_time >> 8;
  2883  00226A  0100               	movlb	0	; () banked
  2884  00226C  5187               	movf	(updateServoPosition@my_time+1)& (0+255),w,b
  2885  00226E  0100               	movlb	0	; () banked
  2886  002270  6FD8               	movwf	(_servoTimes+4)& (0+255),b
  2887  002272  6BD9               	clrf	(_servoTimes+5)& (0+255),b
  2888                           
  2889                           ;sort.c: 202: servoTimes[3] = my_time & 0xFF;
  2890  002274  0100               	movlb	0	; () banked
  2891  002276  5186               	movf	updateServoPosition@my_time& (0+255),w,b
  2892  002278  0100               	movlb	0	; () banked
  2893  00227A  6FDA               	movwf	(_servoTimes+6)& (0+255),b
  2894  00227C  6BDB               	clrf	(_servoTimes+7)& (0+255),b
  2895                           
  2896                           ;sort.c: 203: }
  2897  00227E  0012               	return	
  2898  002280                     l4441:
  2899                           
  2900                           ; BSR set to: 0
  2901  002280  C082  F084         	movff	updateServoPosition@timer,??_updateServoPosition
  2902  002284  C083  F085         	movff	updateServoPosition@timer+1,??_updateServoPosition+1
  2903                           
  2904                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2905                           ; Switch size 1, requested type "space"
  2906                           ; Number of cases is 1, Range of values is 0 to 0
  2907                           ; switch strategies available:
  2908                           ; Name         Instructions Cycles
  2909                           ; simple_byte            4     3 (average)
  2910                           ;	Chosen strategy is simple_byte
  2911  002288  0100               	movlb	0	; () banked
  2912  00228A  5185               	movf	(??_updateServoPosition+1)& (0+255),w,b
  2913  00228C  0A00               	xorlw	0	; case 0
  2914  00228E  A4D8               	btfss	status,2,c
  2915  002290  0012               	return	
  2916                           
  2917                           ; BSR set to: 0
  2918                           ; Switch size 1, requested type "space"
  2919                           ; Number of cases is 2, Range of values is 1 to 3
  2920                           ; switch strategies available:
  2921                           ; Name         Instructions Cycles
  2922                           ; simple_byte            7     4 (average)
  2923                           ;	Chosen strategy is simple_byte
  2924  002292  0100               	movlb	0	; () banked
  2925  002294  5184               	movf	??_updateServoPosition& (0+255),w,b
  2926  002296  0A01               	xorlw	1	; case 1
  2927  002298  B4D8               	btfsc	status,2,c
  2928  00229A  D7DD               	goto	l4439
  2929  00229C  0A02               	xorlw	2	; case 3
  2930  00229E  A4D8               	btfss	status,2,c
  2931  0022A0  0012               	return	
  2932  0022A2  D7E3               	goto	l1151
  2933  0022A4                     __end_of_updateServoPosition:
  2934                           	opt stack 0
  2935                           tblptru	equ	0xFF8
  2936                           tblptrh	equ	0xFF7
  2937                           tblptrl	equ	0xFF6
  2938                           tablat	equ	0xFF5
  2939                           prodh	equ	0xFF4
  2940                           prodl	equ	0xFF3
  2941                           postinc0	equ	0xFEE
  2942                           wreg	equ	0xFE8
  2943                           postdec1	equ	0xFE5
  2944                           fsr1l	equ	0xFE1
  2945                           indf2	equ	0xFDF
  2946                           postinc2	equ	0xFDE
  2947                           postdec2	equ	0xFDD
  2948                           fsr2h	equ	0xFDA
  2949                           fsr2l	equ	0xFD9
  2950                           status	equ	0xFD8
  2951                           
  2952 ;; *************** function _initFlags *****************
  2953 ;; Defined at:
  2954 ;;		line 120 in file "sort.c"
  2955 ;; Parameters:    Size  Location     Type
  2956 ;;		None
  2957 ;; Auto vars:     Size  Location     Type
  2958 ;;		None
  2959 ;; Return value:  Size  Location     Type
  2960 ;;                  1    wreg      void 
  2961 ;; Registers used:
  2962 ;;		wreg, status,2
  2963 ;; Tracked objects:
  2964 ;;		On entry : 0/0
  2965 ;;		On exit  : 0/0
  2966 ;;		Unchanged: 0/0
  2967 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2968 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2969 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2970 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2971 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2972 ;;Total ram usage:        0 bytes
  2973 ;; Hardware stack levels used:    1
  2974 ;; Hardware stack levels required when called:    7
  2975 ;; This function calls:
  2976 ;;		Nothing
  2977 ;; This function is called by:
  2978 ;;		_Loading
  2979 ;; This function uses a non-reentrant model
  2980 ;;
  2981                           
  2982                           	psect	text7
  2983  002620                     __ptext7:
  2984                           	opt stack 0
  2985  002620                     _initFlags:
  2986                           	opt stack 21
  2987                           
  2988                           ;sort.c: 121: f_loadingNewCan = 0;
  2989                           
  2990                           ; BSR set to: 0
  2991                           ;incstack = 0
  2992  002620  0E00               	movlw	0
  2993  002622  0100               	movlb	0	; () banked
  2994  002624  6FF0               	movwf	(_f_loadingNewCan+1)& (0+255),b
  2995  002626  0E00               	movlw	0
  2996  002628  6FEF               	movwf	_f_loadingNewCan& (0+255),b
  2997                           
  2998                           ;sort.c: 122: f_lastCan = 0;
  2999  00262A  0E00               	movlw	0
  3000  00262C  0100               	movlb	0	; () banked
  3001  00262E  6FEE               	movwf	(_f_lastCan+1)& (0+255),b
  3002  002630  0E00               	movlw	0
  3003  002632  6FED               	movwf	_f_lastCan& (0+255),b
  3004                           
  3005                           ;sort.c: 123: f_ID_receive = 1;
  3006  002634  0E00               	movlw	0
  3007  002636  0100               	movlb	0	; () banked
  3008  002638  6FFB               	movwf	(_f_ID_receive+1)& (0+255),b
  3009  00263A  0E01               	movlw	1
  3010  00263C  6FFA               	movwf	_f_ID_receive& (0+255),b
  3011                           
  3012                           ;sort.c: 124: f_can_coming_to_ID = 0;
  3013  00263E  0E00               	movlw	0
  3014  002640  0100               	movlb	0	; () banked
  3015  002642  6FEA               	movwf	(_f_can_coming_to_ID+1)& (0+255),b
  3016  002644  0E00               	movlw	0
  3017  002646  6FE9               	movwf	_f_can_coming_to_ID& (0+255),b
  3018                           
  3019                           ;sort.c: 125: f_can_coming_to_distribution = 0;
  3020  002648  0E00               	movlw	0
  3021  00264A  0100               	movlb	0	; () banked
  3022  00264C  6FEC               	movwf	(_f_can_coming_to_distribution+1)& (0+255),b
  3023  00264E  0E00               	movlw	0
  3024  002650  6FEB               	movwf	_f_can_coming_to_distribution& (0+255),b
  3025                           
  3026                           ;sort.c: 126: f_can_distributed = 0;
  3027  002652  0E00               	movlw	0
  3028  002654  6E72               	movwf	_f_can_distributed+1,c
  3029  002656  0E00               	movlw	0
  3030  002658  6E71               	movwf	_f_can_distributed,c
  3031                           
  3032                           ; BSR set to: 0
  3033  00265A  0012               	return		;funcret
  3034  00265C                     __end_of_initFlags:
  3035                           	opt stack 0
  3036                           tblptru	equ	0xFF8
  3037                           tblptrh	equ	0xFF7
  3038                           tblptrl	equ	0xFF6
  3039                           tablat	equ	0xFF5
  3040                           prodh	equ	0xFF4
  3041                           prodl	equ	0xFF3
  3042                           postinc0	equ	0xFEE
  3043                           wreg	equ	0xFE8
  3044                           postdec1	equ	0xFE5
  3045                           fsr1l	equ	0xFE1
  3046                           indf2	equ	0xFDF
  3047                           postinc2	equ	0xFDE
  3048                           postdec2	equ	0xFDD
  3049                           fsr2h	equ	0xFDA
  3050                           fsr2l	equ	0xFD9
  3051                           status	equ	0xFD8
  3052                           
  3053 ;; *************** function _ID *****************
  3054 ;; Defined at:
  3055 ;;		line 79 in file "sort.c"
  3056 ;; Parameters:    Size  Location     Type
  3057 ;;		None
  3058 ;; Auto vars:     Size  Location     Type
  3059 ;;  magnetic        2   12[BANK0 ] int 
  3060 ;;  side_conduct    2   10[BANK0 ] int 
  3061 ;;  top_bottom_c    2    8[BANK0 ] int 
  3062 ;; Return value:  Size  Location     Type
  3063 ;;                  1    wreg      void 
  3064 ;; Registers used:
  3065 ;;		wreg, status,2, status,0, cstack
  3066 ;; Tracked objects:
  3067 ;;		On entry : 0/0
  3068 ;;		On exit  : 0/0
  3069 ;;		Unchanged: 0/0
  3070 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3071 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3072 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3073 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3074 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3075 ;;Total ram usage:        8 bytes
  3076 ;; Hardware stack levels used:    1
  3077 ;; Hardware stack levels required when called:    9
  3078 ;; This function calls:
  3079 ;;		_readMAG
  3080 ;; This function is called by:
  3081 ;;		_sort
  3082 ;; This function uses a non-reentrant model
  3083 ;;
  3084                           
  3085                           	psect	text8
  3086  001BFE                     __ptext8:
  3087                           	opt stack 0
  3088  001BFE                     _ID:
  3089                           	opt stack 20
  3090                           
  3091                           ;sort.c: 80: if(f_can_coming_to_ID){
  3092                           
  3093                           ; BSR set to: 0
  3094                           ;incstack = 0
  3095  001BFE  0100               	movlb	0	; () banked
  3096  001C00  51E9               	movf	_f_can_coming_to_ID& (0+255),w,b
  3097  001C02  0100               	movlb	0	; () banked
  3098  001C04  11EA               	iorwf	(_f_can_coming_to_ID+1)& (0+255),w,b
  3099  001C06  B4D8               	btfsc	status,2,c
  3100  001C08  0012               	return	
  3101                           
  3102                           ; BSR set to: 0
  3103                           ;sort.c: 82: _delay((unsigned long)((500)*(32000000/4000.0)));
  3104  001C0A  0E15               	movlw	21
  3105  001C0C  0100               	movlb	0	; () banked
  3106  001C0E  6F87               	movwf	(??_ID+1)& (0+255),b
  3107  001C10  0E4B               	movlw	75
  3108  001C12  0100               	movlb	0	; () banked
  3109  001C14  6F86               	movwf	??_ID& (0+255),b
  3110  001C16  0EBE               	movlw	190
  3111  001C18                     u5107:
  3112  001C18  2EE8               	decfsz	wreg,f,c
  3113  001C1A  D7FE               	bra	u5107
  3114  001C1C  2F86               	decfsz	??_ID& (0+255),f,b
  3115  001C1E  D7FC               	bra	u5107
  3116  001C20  2F87               	decfsz	(??_ID+1)& (0+255),f,b
  3117  001C22  D7FA               	bra	u5107
  3118  001C24  F000               	nop	
  3119                           
  3120                           ;sort.c: 84: int side_conductivity = 0;
  3121  001C26  0E00               	movlw	0
  3122  001C28  0100               	movlb	0	; () banked
  3123  001C2A  6F8B               	movwf	(ID@side_conductivity+1)& (0+255),b
  3124  001C2C  0E00               	movlw	0
  3125  001C2E  6F8A               	movwf	ID@side_conductivity& (0+255),b
  3126                           
  3127                           ; BSR set to: 0
  3128                           ;sort.c: 85: int magnetic = 0;
  3129  001C30  0E00               	movlw	0
  3130  001C32  0100               	movlb	0	; () banked
  3131  001C34  6F8D               	movwf	(ID@magnetic+1)& (0+255),b
  3132  001C36  0E00               	movlw	0
  3133  001C38  6F8C               	movwf	ID@magnetic& (0+255),b
  3134                           
  3135                           ; BSR set to: 0
  3136                           ;sort.c: 86: int top_bottom_conductivity = 0;
  3137  001C3A  0E00               	movlw	0
  3138  001C3C  0100               	movlb	0	; () banked
  3139  001C3E  6F89               	movwf	(ID@top_bottom_conductivity+1)& (0+255),b
  3140  001C40  0E00               	movlw	0
  3141  001C42  6F88               	movwf	ID@top_bottom_conductivity& (0+255),b
  3142                           
  3143                           ; BSR set to: 0
  3144                           ;sort.c: 88: side_conductivity = PORTAbits.RA2;
  3145  001C44  A480               	btfss	3968,2,c	;volatile
  3146  001C46  D004               	goto	u3810
  3147  001C48  0100               	movlb	0	; () banked
  3148  001C4A  6B86               	clrf	??_ID& (0+255),b
  3149  001C4C  2B86               	incf	??_ID& (0+255),f,b
  3150  001C4E  D002               	goto	u3818
  3151  001C50                     u3810:
  3152  001C50  0100               	movlb	0	; () banked
  3153  001C52  6B86               	clrf	??_ID& (0+255),b
  3154  001C54                     u3818:
  3155  001C54  0100               	movlb	0	; () banked
  3156  001C56  5186               	movf	??_ID& (0+255),w,b
  3157  001C58  0100               	movlb	0	; () banked
  3158  001C5A  6F8A               	movwf	ID@side_conductivity& (0+255),b
  3159  001C5C  6B8B               	clrf	(ID@side_conductivity+1)& (0+255),b
  3160                           
  3161                           ; BSR set to: 0
  3162                           ;sort.c: 89: if(!side_conductivity){
  3163  001C5E  0100               	movlb	0	; () banked
  3164  001C60  518A               	movf	ID@side_conductivity& (0+255),w,b
  3165  001C62  0100               	movlb	0	; () banked
  3166  001C64  118B               	iorwf	(ID@side_conductivity+1)& (0+255),w,b
  3167  001C66  A4D8               	btfss	status,2,c
  3168  001C68  D028               	goto	l5211
  3169                           
  3170                           ; BSR set to: 0
  3171                           ;sort.c: 90: readMAG();
  3172  001C6A  EC4D  F012         	call	_readMAG	;wreg free
  3173                           
  3174                           ;sort.c: 91: magnetic = MAG_signal;
  3175  001C6E  C0E3  F08C         	movff	_MAG_signal,ID@magnetic
  3176  001C72  C0E4  F08D         	movff	_MAG_signal+1,ID@magnetic+1
  3177                           
  3178                           ;sort.c: 92: if(!magnetic){
  3179  001C76  0100               	movlb	0	; () banked
  3180  001C78  518C               	movf	ID@magnetic& (0+255),w,b
  3181  001C7A  0100               	movlb	0	; () banked
  3182  001C7C  118D               	iorwf	(ID@magnetic+1)& (0+255),w,b
  3183  001C7E  A4D8               	btfss	status,2,c
  3184  001C80  D01C               	goto	l5211
  3185                           
  3186                           ; BSR set to: 0
  3187                           ;sort.c: 93: LATAbits.LATA3 = 1;
  3188  001C82  8689               	bsf	3977,3,c	;volatile
  3189                           
  3190                           ; BSR set to: 0
  3191                           ;sort.c: 95: _delay((unsigned long)((100)*(32000000/4000.0)));
  3192  001C84  0E05               	movlw	5
  3193  001C86  0100               	movlb	0	; () banked
  3194  001C88  6F87               	movwf	(??_ID+1)& (0+255),b
  3195  001C8A  0E0F               	movlw	15
  3196  001C8C  0100               	movlb	0	; () banked
  3197  001C8E  6F86               	movwf	??_ID& (0+255),b
  3198  001C90  0EF1               	movlw	241
  3199  001C92                     u5117:
  3200  001C92  2EE8               	decfsz	wreg,f,c
  3201  001C94  D7FE               	bra	u5117
  3202  001C96  2F86               	decfsz	??_ID& (0+255),f,b
  3203  001C98  D7FC               	bra	u5117
  3204  001C9A  2F87               	decfsz	(??_ID+1)& (0+255),f,b
  3205  001C9C  D7FA               	bra	u5117
  3206                           
  3207                           ;sort.c: 96: top_bottom_conductivity = PORTAbits.RA2;
  3208  001C9E  A480               	btfss	3968,2,c	;volatile
  3209  001CA0  D004               	goto	u3840
  3210  001CA2  0100               	movlb	0	; () banked
  3211  001CA4  6B86               	clrf	??_ID& (0+255),b
  3212  001CA6  2B86               	incf	??_ID& (0+255),f,b
  3213  001CA8  D002               	goto	u3848
  3214  001CAA                     u3840:
  3215  001CAA  0100               	movlb	0	; () banked
  3216  001CAC  6B86               	clrf	??_ID& (0+255),b
  3217  001CAE                     u3848:
  3218  001CAE  0100               	movlb	0	; () banked
  3219  001CB0  5186               	movf	??_ID& (0+255),w,b
  3220  001CB2  0100               	movlb	0	; () banked
  3221  001CB4  6F88               	movwf	ID@top_bottom_conductivity& (0+255),b
  3222  001CB6  6B89               	clrf	(ID@top_bottom_conductivity+1)& (0+255),b
  3223                           
  3224                           ; BSR set to: 0
  3225                           ;sort.c: 97: LATAbits.LATA3 = 0;
  3226  001CB8  9689               	bcf	3977,3,c	;volatile
  3227  001CBA                     l5211:
  3228                           
  3229                           ; BSR set to: 0
  3230                           ;sort.c: 98: }
  3231                           ;sort.c: 99: }
  3232                           ;sort.c: 104: f_can_coming_to_distribution = 1;
  3233  001CBA  0E00               	movlw	0
  3234  001CBC  0100               	movlb	0	; () banked
  3235  001CBE  6FEC               	movwf	(_f_can_coming_to_distribution+1)& (0+255),b
  3236  001CC0  0E01               	movlw	1
  3237  001CC2  6FEB               	movwf	_f_can_coming_to_distribution& (0+255),b
  3238                           
  3239                           ; BSR set to: 0
  3240                           ;sort.c: 106: f_can_coming_to_ID = 0;
  3241  001CC4  0E00               	movlw	0
  3242  001CC6  0100               	movlb	0	; () banked
  3243  001CC8  6FEA               	movwf	(_f_can_coming_to_ID+1)& (0+255),b
  3244  001CCA  0E00               	movlw	0
  3245  001CCC  6FE9               	movwf	_f_can_coming_to_ID& (0+255),b
  3246  001CCE  0012               	return	
  3247  001CD0                     __end_of_ID:
  3248                           	opt stack 0
  3249                           tblptru	equ	0xFF8
  3250                           tblptrh	equ	0xFF7
  3251                           tblptrl	equ	0xFF6
  3252                           tablat	equ	0xFF5
  3253                           prodh	equ	0xFF4
  3254                           prodl	equ	0xFF3
  3255                           postinc0	equ	0xFEE
  3256                           wreg	equ	0xFE8
  3257                           postdec1	equ	0xFE5
  3258                           fsr1l	equ	0xFE1
  3259                           indf2	equ	0xFDF
  3260                           postinc2	equ	0xFDE
  3261                           postdec2	equ	0xFDD
  3262                           fsr2h	equ	0xFDA
  3263                           fsr2l	equ	0xFD9
  3264                           status	equ	0xFD8
  3265                           
  3266 ;; *************** function _readMAG *****************
  3267 ;; Defined at:
  3268 ;;		line 28 in file "ADCFunctionality.c"
  3269 ;; Parameters:    Size  Location     Type
  3270 ;;		None
  3271 ;; Auto vars:     Size  Location     Type
  3272 ;;  res             2    4[BANK0 ] int 
  3273 ;; Return value:  Size  Location     Type
  3274 ;;                  1    wreg      void 
  3275 ;; Registers used:
  3276 ;;		wreg, status,2, status,0, cstack
  3277 ;; Tracked objects:
  3278 ;;		On entry : 0/0
  3279 ;;		On exit  : 0/0
  3280 ;;		Unchanged: 0/0
  3281 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3282 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3283 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3284 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3285 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3286 ;;Total ram usage:        4 bytes
  3287 ;; Hardware stack levels used:    1
  3288 ;; Hardware stack levels required when called:    8
  3289 ;; This function calls:
  3290 ;;		_readADC
  3291 ;; This function is called by:
  3292 ;;		_ID
  3293 ;; This function uses a non-reentrant model
  3294 ;;
  3295                           
  3296                           	psect	text9
  3297  00249A                     __ptext9:
  3298                           	opt stack 0
  3299  00249A                     _readMAG:
  3300                           	opt stack 20
  3301                           
  3302                           ;ADCFunctionality.c: 29: readADC(1);
  3303                           
  3304                           ; BSR set to: 0
  3305                           ;incstack = 0
  3306  00249A  0E01               	movlw	1
  3307  00249C  ECD6  F014         	call	_readADC
  3308                           
  3309                           ;ADCFunctionality.c: 30: int res = ADRESH<<8 | ADRESL;
  3310  0024A0  50C3               	movf	4035,w,c	;volatile
  3311  0024A2  CFC4 F082          	movff	4036,??_readMAG	;volatile
  3312  0024A6  0100               	movlb	0	; () banked
  3313  0024A8  6B83               	clrf	(??_readMAG+1)& (0+255),b
  3314  0024AA  C082  F083         	movff	??_readMAG,??_readMAG+1
  3315  0024AE  0100               	movlb	0	; () banked
  3316  0024B0  6B82               	clrf	??_readMAG& (0+255),b
  3317  0024B2  0100               	movlb	0	; () banked
  3318  0024B4  1182               	iorwf	??_readMAG& (0+255),w,b
  3319  0024B6  0100               	movlb	0	; () banked
  3320  0024B8  6F84               	movwf	readMAG@res& (0+255),b
  3321  0024BA  0100               	movlb	0	; () banked
  3322  0024BC  5183               	movf	(??_readMAG+1)& (0+255),w,b
  3323  0024BE  0100               	movlb	0	; () banked
  3324  0024C0  6F85               	movwf	(readMAG@res+1)& (0+255),b
  3325                           
  3326                           ; BSR set to: 0
  3327                           ;ADCFunctionality.c: 31: MAG_signal = (res < THMAG) ? 1 : 0;
  3328  0024C2  0100               	movlb	0	; () banked
  3329  0024C4  51F8               	movf	_THMAG& (0+255),w,b
  3330  0024C6  0100               	movlb	0	; () banked
  3331  0024C8  5D84               	subwf	readMAG@res& (0+255),w,b
  3332  0024CA  0100               	movlb	0	; () banked
  3333  0024CC  5185               	movf	(readMAG@res+1)& (0+255),w,b
  3334  0024CE  0A80               	xorlw	128
  3335  0024D0  0100               	movlb	0	; () banked
  3336  0024D2  6F82               	movwf	??_readMAG& (0+255),b
  3337  0024D4  0100               	movlb	0	; () banked
  3338  0024D6  51F9               	movf	(_THMAG+1)& (0+255),w,b
  3339  0024D8  0A80               	xorlw	128
  3340  0024DA  0100               	movlb	0	; () banked
  3341  0024DC  5982               	subwfb	??_readMAG& (0+255),w,b
  3342  0024DE  B0D8               	btfsc	status,0,c
  3343  0024E0  D002               	goto	u3370
  3344  0024E2  0E01               	movlw	1
  3345  0024E4  D001               	goto	u3380
  3346  0024E6                     u3370:
  3347  0024E6  0E00               	movlw	0
  3348  0024E8                     u3380:
  3349  0024E8  0100               	movlb	0	; () banked
  3350  0024EA  6FE3               	movwf	_MAG_signal& (0+255),b
  3351  0024EC  6BE4               	clrf	(_MAG_signal+1)& (0+255),b
  3352                           
  3353                           ; BSR set to: 0
  3354  0024EE  0012               	return		;funcret
  3355  0024F0                     __end_of_readMAG:
  3356                           	opt stack 0
  3357                           tblptru	equ	0xFF8
  3358                           tblptrh	equ	0xFF7
  3359                           tblptrl	equ	0xFF6
  3360                           tablat	equ	0xFF5
  3361                           prodh	equ	0xFF4
  3362                           prodl	equ	0xFF3
  3363                           postinc0	equ	0xFEE
  3364                           wreg	equ	0xFE8
  3365                           postdec1	equ	0xFE5
  3366                           fsr1l	equ	0xFE1
  3367                           indf2	equ	0xFDF
  3368                           postinc2	equ	0xFDE
  3369                           postdec2	equ	0xFDD
  3370                           fsr2h	equ	0xFDA
  3371                           fsr2l	equ	0xFD9
  3372                           status	equ	0xFD8
  3373                           
  3374 ;; *************** function _readADC *****************
  3375 ;; Defined at:
  3376 ;;		line 14 in file "ADCFunctionality.c"
  3377 ;; Parameters:    Size  Location     Type
  3378 ;;  channel         1    wreg     unsigned char 
  3379 ;; Auto vars:     Size  Location     Type
  3380 ;;  channel         1    1[BANK0 ] unsigned char 
  3381 ;; Return value:  Size  Location     Type
  3382 ;;                  1    wreg      void 
  3383 ;; Registers used:
  3384 ;;		wreg, status,2, status,0, cstack
  3385 ;; Tracked objects:
  3386 ;;		On entry : 0/0
  3387 ;;		On exit  : 0/0
  3388 ;;		Unchanged: 0/0
  3389 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3390 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3391 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3392 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3393 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3394 ;;Total ram usage:        2 bytes
  3395 ;; Hardware stack levels used:    1
  3396 ;; Hardware stack levels required when called:    7
  3397 ;; This function calls:
  3398 ;;		Nothing
  3399 ;; This function is called by:
  3400 ;;		_readMAG
  3401 ;;		_readIR
  3402 ;; This function uses a non-reentrant model
  3403 ;;
  3404                           
  3405                           	psect	text10
  3406  0029AC                     __ptext10:
  3407                           	opt stack 0
  3408  0029AC                     _readADC:
  3409                           	opt stack 20
  3410                           
  3411                           ; BSR set to: 0
  3412                           ;incstack = 0
  3413                           ;readADC@channel stored from wreg
  3414  0029AC  0100               	movlb	0	; () banked
  3415  0029AE  6F81               	movwf	readADC@channel& (0+255),b
  3416                           
  3417                           ;ADCFunctionality.c: 16: ADCON0 = ((channel <<2));
  3418  0029B0  0100               	movlb	0	; () banked
  3419  0029B2  4581               	rlncf	readADC@channel& (0+255),w,b
  3420  0029B4  46E8               	rlncf	wreg,f,c
  3421  0029B6  0BFC               	andlw	252
  3422  0029B8  6EC2               	movwf	4034,c	;volatile
  3423                           
  3424                           ; BSR set to: 0
  3425                           ;ADCFunctionality.c: 17: ADON = 1;
  3426  0029BA  80C2               	bsf	4034,0,c	;volatile
  3427                           
  3428                           ; BSR set to: 0
  3429                           ;ADCFunctionality.c: 18: ADCON0bits.GO = 1;
  3430  0029BC  82C2               	bsf	4034,1,c	;volatile
  3431                           
  3432                           ;ADCFunctionality.c: 19: while(ADCON0bits.GO_NOT_DONE){_delay((unsigned long)((5)*(32000
      +                          000/4000.0)));}
  3433  0029BE  D009               	goto	l4281
  3434  0029C0                     l4279:
  3435  0029C0  0E34               	movlw	52
  3436  0029C2  0100               	movlb	0	; () banked
  3437  0029C4  6F80               	movwf	??_readADC& (0+255),b
  3438  0029C6  0EF1               	movlw	241
  3439  0029C8                     u5127:
  3440  0029C8  2EE8               	decfsz	wreg,f,c
  3441  0029CA  D7FE               	bra	u5127
  3442  0029CC  2F80               	decfsz	??_readADC& (0+255),f,b
  3443  0029CE  D7FC               	bra	u5127
  3444  0029D0  D000               	nop2	
  3445  0029D2                     l4281:
  3446  0029D2  A2C2               	btfss	4034,1,c	;volatile
  3447  0029D4  0012               	return	
  3448  0029D6  D7F4               	goto	l4279
  3449  0029D8                     __end_of_readADC:
  3450                           	opt stack 0
  3451                           tblptru	equ	0xFF8
  3452                           tblptrh	equ	0xFF7
  3453                           tblptrl	equ	0xFF6
  3454                           tablat	equ	0xFF5
  3455                           prodh	equ	0xFF4
  3456                           prodl	equ	0xFF3
  3457                           postinc0	equ	0xFEE
  3458                           wreg	equ	0xFE8
  3459                           postdec1	equ	0xFE5
  3460                           fsr1l	equ	0xFE1
  3461                           indf2	equ	0xFDF
  3462                           postinc2	equ	0xFDE
  3463                           postdec2	equ	0xFDD
  3464                           fsr2h	equ	0xFDA
  3465                           fsr2l	equ	0xFD9
  3466                           status	equ	0xFD8
  3467                           
  3468 ;; *************** function _Distribution *****************
  3469 ;; Defined at:
  3470 ;;		line 109 in file "sort.c"
  3471 ;; Parameters:    Size  Location     Type
  3472 ;;		None
  3473 ;; Auto vars:     Size  Location     Type
  3474 ;;		None
  3475 ;; Return value:  Size  Location     Type
  3476 ;;                  1    wreg      void 
  3477 ;; Registers used:
  3478 ;;		wreg, status,2, status,0
  3479 ;; Tracked objects:
  3480 ;;		On entry : 0/0
  3481 ;;		On exit  : 0/0
  3482 ;;		Unchanged: 0/0
  3483 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3484 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3485 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3486 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3487 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3488 ;;Total ram usage:        0 bytes
  3489 ;; Hardware stack levels used:    1
  3490 ;; Hardware stack levels required when called:    7
  3491 ;; This function calls:
  3492 ;;		Nothing
  3493 ;; This function is called by:
  3494 ;;		_sort
  3495 ;; This function uses a non-reentrant model
  3496 ;;
  3497                           
  3498                           	psect	text11
  3499  002AE6                     __ptext11:
  3500                           	opt stack 0
  3501  002AE6                     _Distribution:
  3502                           	opt stack 22
  3503                           
  3504                           ;sort.c: 110: if(f_can_coming_to_distribution){
  3505                           
  3506                           ;incstack = 0
  3507  002AE6  0100               	movlb	0	; () banked
  3508  002AE8  51EB               	movf	_f_can_coming_to_distribution& (0+255),w,b
  3509  002AEA  0100               	movlb	0	; () banked
  3510  002AEC  11EC               	iorwf	(_f_can_coming_to_distribution+1)& (0+255),w,b
  3511  002AEE  B4D8               	btfsc	status,2,c
  3512  002AF0  0012               	return	
  3513                           
  3514                           ; BSR set to: 0
  3515                           ;sort.c: 115: f_can_coming_to_distribution = 0;
  3516  002AF2  0E00               	movlw	0
  3517  002AF4  0100               	movlb	0	; () banked
  3518  002AF6  6FEC               	movwf	(_f_can_coming_to_distribution+1)& (0+255),b
  3519  002AF8  0E00               	movlw	0
  3520  002AFA  6FEB               	movwf	_f_can_coming_to_distribution& (0+255),b
  3521                           
  3522                           ;sort.c: 116: f_can_distributed = 1;
  3523  002AFC  0E00               	movlw	0
  3524  002AFE  6E72               	movwf	_f_can_distributed+1,c
  3525  002B00  0E01               	movlw	1
  3526  002B02  6E71               	movwf	_f_can_distributed,c
  3527  002B04  0012               	return	
  3528  002B06                     __end_of_Distribution:
  3529                           	opt stack 0
  3530                           tblptru	equ	0xFF8
  3531                           tblptrh	equ	0xFF7
  3532                           tblptrl	equ	0xFF6
  3533                           tablat	equ	0xFF5
  3534                           prodh	equ	0xFF4
  3535                           prodl	equ	0xFF3
  3536                           postinc0	equ	0xFEE
  3537                           wreg	equ	0xFE8
  3538                           postdec1	equ	0xFE5
  3539                           fsr1l	equ	0xFE1
  3540                           indf2	equ	0xFDF
  3541                           postinc2	equ	0xFDE
  3542                           postdec2	equ	0xFDD
  3543                           fsr2h	equ	0xFDA
  3544                           fsr2l	equ	0xFD9
  3545                           status	equ	0xFD8
  3546                           
  3547 ;; *************** function _machineConfig *****************
  3548 ;; Defined at:
  3549 ;;		line 14 in file "MachineConfig.c"
  3550 ;; Parameters:    Size  Location     Type
  3551 ;;		None
  3552 ;; Auto vars:     Size  Location     Type
  3553 ;;		None
  3554 ;; Return value:  Size  Location     Type
  3555 ;;                  1    wreg      void 
  3556 ;; Registers used:
  3557 ;;		wreg, status,2
  3558 ;; Tracked objects:
  3559 ;;		On entry : 0/0
  3560 ;;		On exit  : 0/0
  3561 ;;		Unchanged: 0/0
  3562 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3563 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3564 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3565 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3566 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3567 ;;Total ram usage:        0 bytes
  3568 ;; Hardware stack levels used:    1
  3569 ;; Hardware stack levels required when called:    7
  3570 ;; This function calls:
  3571 ;;		Nothing
  3572 ;; This function is called by:
  3573 ;;		_main
  3574 ;; This function uses a non-reentrant model
  3575 ;;
  3576                           
  3577                           	psect	text12
  3578  002440                     __ptext12:
  3579                           	opt stack 0
  3580  002440                     _machineConfig:
  3581                           	opt stack 23
  3582                           
  3583                           ;MachineConfig.c: 16: OSCCON = 0xF0;
  3584                           
  3585                           ; BSR set to: 0
  3586                           ;incstack = 0
  3587  002440  0EF0               	movlw	240
  3588  002442  6ED3               	movwf	4051,c	;volatile
  3589                           
  3590                           ;MachineConfig.c: 17: OSCTUNEbits.PLLEN = 1;
  3591  002444  8C9B               	bsf	3995,6,c	;volatile
  3592                           
  3593                           ;MachineConfig.c: 21: TRISA = 0b01000111;
  3594  002446  0E47               	movlw	71
  3595  002448  6E92               	movwf	3986,c	;volatile
  3596                           
  3597                           ;MachineConfig.c: 23: TRISB = 0b11110010;
  3598  00244A  0EF2               	movlw	242
  3599  00244C  6E93               	movwf	3987,c	;volatile
  3600                           
  3601                           ;MachineConfig.c: 26: TRISC = 0x00;
  3602  00244E  0E00               	movlw	0
  3603  002450  6E94               	movwf	3988,c	;volatile
  3604                           
  3605                           ;MachineConfig.c: 30: TRISD = 0x00;
  3606  002452  0E00               	movlw	0
  3607  002454  6E95               	movwf	3989,c	;volatile
  3608                           
  3609                           ;MachineConfig.c: 33: TRISE = 0x00;
  3610  002456  0E00               	movlw	0
  3611  002458  6E96               	movwf	3990,c	;volatile
  3612                           
  3613                           ;MachineConfig.c: 36: LATA = 0x00;
  3614  00245A  0E00               	movlw	0
  3615  00245C  6E89               	movwf	3977,c	;volatile
  3616                           
  3617                           ;MachineConfig.c: 37: LATB = 0x00;
  3618  00245E  0E00               	movlw	0
  3619  002460  6E8A               	movwf	3978,c	;volatile
  3620                           
  3621                           ;MachineConfig.c: 38: LATC = 0x00;
  3622  002462  0E00               	movlw	0
  3623  002464  6E8B               	movwf	3979,c	;volatile
  3624                           
  3625                           ;MachineConfig.c: 39: LATD = 0x00;
  3626  002466  0E00               	movlw	0
  3627  002468  6E8C               	movwf	3980,c	;volatile
  3628                           
  3629                           ;MachineConfig.c: 40: LATE = 0x00;
  3630  00246A  0E00               	movlw	0
  3631  00246C  6E8D               	movwf	3981,c	;volatile
  3632                           
  3633                           ;MachineConfig.c: 43: ADCON0 = 0x00;
  3634  00246E  0E00               	movlw	0
  3635  002470  6EC2               	movwf	4034,c	;volatile
  3636                           
  3637                           ;MachineConfig.c: 44: ADCON1 = 0x0D;
  3638  002472  0E0D               	movlw	13
  3639  002474  6EC1               	movwf	4033,c	;volatile
  3640                           
  3641                           ;MachineConfig.c: 47: VCFG1 = 0;
  3642  002476  9AC1               	bcf	4033,5,c	;volatile
  3643                           
  3644                           ;MachineConfig.c: 48: VCFG0 = 0;
  3645  002478  98C1               	bcf	4033,4,c	;volatile
  3646                           
  3647                           ;MachineConfig.c: 49: CVRCON = 0x00;
  3648  00247A  0E00               	movlw	0
  3649  00247C  6EB5               	movwf	4021,c	;volatile
  3650                           
  3651                           ;MachineConfig.c: 50: CMCONbits.CIS = 0;
  3652  00247E  96B4               	bcf	4020,3,c	;volatile
  3653                           
  3654                           ;MachineConfig.c: 51: ADFM = 1;
  3655  002480  8EC0               	bsf	4032,7,c	;volatile
  3656                           
  3657                           ;MachineConfig.c: 52: nRBPU = 0;
  3658  002482  9EF1               	bcf	intcon2,7,c	;volatile
  3659                           
  3660                           ;MachineConfig.c: 55: INT1IE = 1;
  3661  002484  86F0               	bsf	intcon3,3,c	;volatile
  3662                           
  3663                           ;MachineConfig.c: 57: TMR0IE = 1;
  3664  002486  8AF2               	bsf	intcon,5,c	;volatile
  3665                           
  3666                           ;MachineConfig.c: 58: TMR1IE = 1;
  3667  002488  809D               	bsf	3997,0,c	;volatile
  3668                           
  3669                           ;MachineConfig.c: 59: T1CON = 0b10110000;
  3670  00248A  0EB0               	movlw	176
  3671  00248C  6ECD               	movwf	4045,c	;volatile
  3672                           
  3673                           ;MachineConfig.c: 60: TMR2IE = 1;
  3674  00248E  829D               	bsf	3997,1,c	;volatile
  3675                           
  3676                           ;MachineConfig.c: 61: TMR3IE = 1;
  3677  002490  82A0               	bsf	4000,1,c	;volatile
  3678                           
  3679                           ;MachineConfig.c: 62: PEIE = 1;
  3680  002492  8CF2               	bsf	intcon,6,c	;volatile
  3681                           
  3682                           ;MachineConfig.c: 64: ADIE = 1;
  3683  002494  8C9D               	bsf	3997,6,c	;volatile
  3684                           
  3685                           ;MachineConfig.c: 65: (INTCONbits.GIE = 0);
  3686  002496  9EF2               	bcf	intcon,7,c	;volatile
  3687  002498  0012               	return		;funcret
  3688  00249A                     __end_of_machineConfig:
  3689                           	opt stack 0
  3690                           tblptru	equ	0xFF8
  3691                           tblptrh	equ	0xFF7
  3692                           tblptrl	equ	0xFF6
  3693                           tablat	equ	0xFF5
  3694                           prodh	equ	0xFF4
  3695                           prodl	equ	0xFF3
  3696                           intcon	equ	0xFF2
  3697                           intcon2	equ	0xFF1
  3698                           intcon3	equ	0xFF0
  3699                           postinc0	equ	0xFEE
  3700                           wreg	equ	0xFE8
  3701                           postdec1	equ	0xFE5
  3702                           fsr1l	equ	0xFE1
  3703                           indf2	equ	0xFDF
  3704                           postinc2	equ	0xFDE
  3705                           postdec2	equ	0xFDD
  3706                           fsr2h	equ	0xFDA
  3707                           fsr2l	equ	0xFD9
  3708                           status	equ	0xFD8
  3709                           
  3710 ;; *************** function _initUI *****************
  3711 ;; Defined at:
  3712 ;;		line 61 in file "UI.c"
  3713 ;; Parameters:    Size  Location     Type
  3714 ;;		None
  3715 ;; Auto vars:     Size  Location     Type
  3716 ;;		None
  3717 ;; Return value:  Size  Location     Type
  3718 ;;                  1    wreg      void 
  3719 ;; Registers used:
  3720 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3721 ;; Tracked objects:
  3722 ;;		On entry : 0/0
  3723 ;;		On exit  : 0/0
  3724 ;;		Unchanged: 0/0
  3725 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3726 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3727 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3728 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3729 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3730 ;;Total ram usage:        0 bytes
  3731 ;; Hardware stack levels used:    1
  3732 ;; Hardware stack levels required when called:   12
  3733 ;; This function calls:
  3734 ;;		_change_state_to_menu_start
  3735 ;;		_loadRTC
  3736 ;; This function is called by:
  3737 ;;		_main
  3738 ;; This function uses a non-reentrant model
  3739 ;;
  3740                           
  3741                           	psect	text13
  3742  002B24                     __ptext13:
  3743                           	opt stack 0
  3744  002B24                     _initUI:
  3745                           	opt stack 18
  3746                           
  3747                           ;UI.c: 62: (INTCONbits.GIE = 1);
  3748                           
  3749                           ;incstack = 0
  3750  002B24  8EF2               	bsf	intcon,7,c	;volatile
  3751                           
  3752                           ;UI.c: 63: machine_state = UI_state;
  3753  002B26  0E00               	movlw	0
  3754  002B28  0100               	movlb	0	; () banked
  3755  002B2A  6FF7               	movwf	_machine_state& (0+255),b
  3756                           
  3757                           ; BSR set to: 0
  3758                           ;UI.c: 65: loadRTC();
  3759  002B2C  ECCB  F00F         	call	_loadRTC	;wreg free
  3760                           
  3761                           ;UI.c: 67: change_state_to_menu_start();
  3762  002B30  ECEC  F014         	call	_change_state_to_menu_start	;wreg free
  3763                           
  3764                           ;UI.c: 68: firstboot = 1;
  3765  002B34  0E00               	movlw	0
  3766  002B36  6E74               	movwf	_firstboot+1,c
  3767  002B38  0E01               	movlw	1
  3768  002B3A  6E73               	movwf	_firstboot,c
  3769  002B3C  0012               	return		;funcret
  3770  002B3E                     __end_of_initUI:
  3771                           	opt stack 0
  3772                           tblptru	equ	0xFF8
  3773                           tblptrh	equ	0xFF7
  3774                           tblptrl	equ	0xFF6
  3775                           tablat	equ	0xFF5
  3776                           prodh	equ	0xFF4
  3777                           prodl	equ	0xFF3
  3778                           intcon	equ	0xFF2
  3779                           intcon2	equ	0xFF1
  3780                           intcon3	equ	0xFF0
  3781                           postinc0	equ	0xFEE
  3782                           wreg	equ	0xFE8
  3783                           postdec1	equ	0xFE5
  3784                           fsr1l	equ	0xFE1
  3785                           indf2	equ	0xFDF
  3786                           postinc2	equ	0xFDE
  3787                           postdec2	equ	0xFDD
  3788                           fsr2h	equ	0xFDA
  3789                           fsr2l	equ	0xFD9
  3790                           status	equ	0xFD8
  3791                           
  3792 ;; *************** function _loadRTC *****************
  3793 ;; Defined at:
  3794 ;;		line 27 in file "RTC.c"
  3795 ;; Parameters:    Size  Location     Type
  3796 ;;		None
  3797 ;; Auto vars:     Size  Location     Type
  3798 ;;  i               2   22[BANK0 ] int 
  3799 ;; Return value:  Size  Location     Type
  3800 ;;                  1    wreg      void 
  3801 ;; Registers used:
  3802 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3803 ;; Tracked objects:
  3804 ;;		On entry : 0/0
  3805 ;;		On exit  : 0/0
  3806 ;;		Unchanged: 0/0
  3807 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3808 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3809 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3810 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3811 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3812 ;;Total ram usage:        3 bytes
  3813 ;; Hardware stack levels used:    1
  3814 ;; Hardware stack levels required when called:    9
  3815 ;; This function calls:
  3816 ;;		_I2C_Master_Init
  3817 ;;		_I2C_Master_Start
  3818 ;;		_I2C_Master_Stop
  3819 ;;		_I2C_Master_Write
  3820 ;; This function is called by:
  3821 ;;		_initUI
  3822 ;; This function uses a non-reentrant model
  3823 ;;
  3824                           
  3825                           	psect	text14
  3826  001F96                     __ptext14:
  3827                           	opt stack 0
  3828  001F96                     _loadRTC:
  3829                           	opt stack 20
  3830                           
  3831                           ;RTC.c: 29: I2C_Master_Init(10000);
  3832                           
  3833                           ;incstack = 0
  3834  001F96  0E10               	movlw	16
  3835  001F98  0100               	movlb	0	; () banked
  3836  001F9A  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  3837  001F9C  0E27               	movlw	39
  3838  001F9E  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  3839  001FA0  0E00               	movlw	0
  3840  001FA2  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  3841  001FA4  0E00               	movlw	0
  3842  001FA6  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  3843  001FA8  ECF0  F011         	call	_I2C_Master_Init	;wreg free
  3844                           
  3845                           ;RTC.c: 31: (INTCONbits.GIE = 0);
  3846  001FAC  9EF2               	bcf	intcon,7,c	;volatile
  3847                           
  3848                           ;RTC.c: 33: I2C_Master_Start();
  3849  001FAE  ECFA  F015         	call	_I2C_Master_Start	;wreg free
  3850                           
  3851                           ;RTC.c: 34: I2C_Master_Write(0b11010000);
  3852  001FB2  0E00               	movlw	0
  3853  001FB4  0100               	movlb	0	; () banked
  3854  001FB6  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  3855  001FB8  0ED0               	movlw	208
  3856  001FBA  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  3857  001FBC  ECEC  F015         	call	_I2C_Master_Write	;wreg free
  3858                           
  3859                           ;RTC.c: 35: I2C_Master_Write(0x00);
  3860  001FC0  0E00               	movlw	0
  3861  001FC2  0100               	movlb	0	; () banked
  3862  001FC4  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  3863  001FC6  0E00               	movlw	0
  3864  001FC8  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  3865  001FCA  ECEC  F015         	call	_I2C_Master_Write	;wreg free
  3866                           
  3867                           ;RTC.c: 36: for(int i = 0; i<7; i++){
  3868  001FCE  0E00               	movlw	0
  3869  001FD0  0100               	movlb	0	; () banked
  3870  001FD2  6F97               	movwf	(loadRTC@i+1)& (0+255),b
  3871  001FD4  0E00               	movlw	0
  3872  001FD6  6F96               	movwf	loadRTC@i& (0+255),b
  3873  001FD8                     l4873:
  3874                           
  3875                           ; BSR set to: 0
  3876  001FD8  0100               	movlb	0	; () banked
  3877  001FDA  BF97               	btfsc	(loadRTC@i+1)& (0+255),7,b
  3878  001FDC  D008               	goto	l4877
  3879  001FDE  0100               	movlb	0	; () banked
  3880  001FE0  5197               	movf	(loadRTC@i+1)& (0+255),w,b
  3881  001FE2  E11B               	bnz	l4883
  3882  001FE4  0E07               	movlw	7
  3883  001FE6  0100               	movlb	0	; () banked
  3884  001FE8  5D96               	subwf	loadRTC@i& (0+255),w,b
  3885  001FEA  B0D8               	btfsc	status,0,c
  3886  001FEC  D016               	goto	l4883
  3887  001FEE                     l4877:
  3888                           
  3889                           ; BSR set to: 0
  3890                           ;RTC.c: 37: I2C_Master_Write(time[i]);
  3891  001FEE  0EDC               	movlw	low _time
  3892  001FF0  0100               	movlb	0	; () banked
  3893  001FF2  2596               	addwf	loadRTC@i& (0+255),w,b
  3894  001FF4  6ED9               	movwf	fsr2l,c
  3895  001FF6  0E00               	movlw	high _time
  3896  001FF8  0100               	movlb	0	; () banked
  3897  001FFA  2197               	addwfc	(loadRTC@i+1)& (0+255),w,b
  3898  001FFC  6EDA               	movwf	fsr2h,c
  3899  001FFE  50DF               	movf	indf2,w,c
  3900  002000  0100               	movlb	0	; () banked
  3901  002002  6F95               	movwf	??_loadRTC& (0+255),b
  3902  002004  0100               	movlb	0	; () banked
  3903  002006  5195               	movf	??_loadRTC& (0+255),w,b
  3904  002008  0100               	movlb	0	; () banked
  3905  00200A  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  3906  00200C  6B82               	clrf	(I2C_Master_Write@d+1)& (0+255),b
  3907  00200E  ECEC  F015         	call	_I2C_Master_Write	;wreg free
  3908  002012  0100               	movlb	0	; () banked
  3909  002014  4B96               	infsnz	loadRTC@i& (0+255),f,b
  3910  002016  2B97               	incf	(loadRTC@i+1)& (0+255),f,b
  3911  002018  D7DF               	goto	l4873
  3912  00201A                     l4883:
  3913                           
  3914                           ; BSR set to: 0
  3915                           ;RTC.c: 38: }
  3916                           ;RTC.c: 39: I2C_Master_Stop();
  3917  00201A  ECF6  F015         	call	_I2C_Master_Stop	;wreg free
  3918                           
  3919                           ;RTC.c: 40: (INTCONbits.GIE = 1);
  3920  00201E  8EF2               	bsf	intcon,7,c	;volatile
  3921  002020  0012               	return		;funcret
  3922  002022                     __end_of_loadRTC:
  3923                           	opt stack 0
  3924                           tblptru	equ	0xFF8
  3925                           tblptrh	equ	0xFF7
  3926                           tblptrl	equ	0xFF6
  3927                           tablat	equ	0xFF5
  3928                           prodh	equ	0xFF4
  3929                           prodl	equ	0xFF3
  3930                           intcon	equ	0xFF2
  3931                           intcon2	equ	0xFF1
  3932                           intcon3	equ	0xFF0
  3933                           postinc0	equ	0xFEE
  3934                           wreg	equ	0xFE8
  3935                           postdec1	equ	0xFE5
  3936                           fsr1l	equ	0xFE1
  3937                           indf2	equ	0xFDF
  3938                           postinc2	equ	0xFDE
  3939                           postdec2	equ	0xFDD
  3940                           fsr2h	equ	0xFDA
  3941                           fsr2l	equ	0xFD9
  3942                           status	equ	0xFD8
  3943                           
  3944 ;; *************** function _I2C_Master_Init *****************
  3945 ;; Defined at:
  3946 ;;		line 14 in file "I2C.c"
  3947 ;; Parameters:    Size  Location     Type
  3948 ;;  c               4   13[BANK0 ] const unsigned long 
  3949 ;; Auto vars:     Size  Location     Type
  3950 ;;		None
  3951 ;; Return value:  Size  Location     Type
  3952 ;;                  1    wreg      void 
  3953 ;; Registers used:
  3954 ;;		wreg, status,2, status,0, cstack
  3955 ;; Tracked objects:
  3956 ;;		On entry : 0/0
  3957 ;;		On exit  : 0/0
  3958 ;;		Unchanged: 0/0
  3959 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3960 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3961 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3962 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3963 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3964 ;;Total ram usage:        8 bytes
  3965 ;; Hardware stack levels used:    1
  3966 ;; Hardware stack levels required when called:    8
  3967 ;; This function calls:
  3968 ;;		___lldiv
  3969 ;; This function is called by:
  3970 ;;		_loadRTC
  3971 ;; This function uses a non-reentrant model
  3972 ;;
  3973                           
  3974                           	psect	text15
  3975  0023E0                     __ptext15:
  3976                           	opt stack 0
  3977  0023E0                     _I2C_Master_Init:
  3978                           	opt stack 20
  3979                           
  3980                           ;I2C.c: 17: SSPSTAT = 0b00000000;
  3981                           
  3982                           ;incstack = 0
  3983  0023E0  0E00               	movlw	0
  3984  0023E2  6EC7               	movwf	4039,c	;volatile
  3985                           
  3986                           ;I2C.c: 18: SSPCON1 = 0b00101000;
  3987  0023E4  0E28               	movlw	40
  3988  0023E6  6EC6               	movwf	4038,c	;volatile
  3989                           
  3990                           ;I2C.c: 19: SSPCON2 = 0b00000000;
  3991  0023E8  0E00               	movlw	0
  3992  0023EA  6EC5               	movwf	4037,c	;volatile
  3993                           
  3994                           ;I2C.c: 20: SSPADD = (32000000/(4*c))-1;
  3995  0023EC  0E00               	movlw	0
  3996  0023EE  0100               	movlb	0	; () banked
  3997  0023F0  6F80               	movwf	___lldiv@dividend& (0+255),b
  3998  0023F2  0E48               	movlw	72
  3999  0023F4  6F81               	movwf	(___lldiv@dividend+1)& (0+255),b
  4000  0023F6  0EE8               	movlw	232
  4001  0023F8  6F82               	movwf	(___lldiv@dividend+2)& (0+255),b
  4002  0023FA  0E01               	movlw	1
  4003  0023FC  6F83               	movwf	(___lldiv@dividend+3)& (0+255),b
  4004  0023FE  C08D  F091         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  4005  002402  C08E  F092         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  4006  002406  C08F  F093         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  4007  00240A  C090  F094         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  4008  00240E  0E02               	movlw	2
  4009  002410                     u3395:
  4010  002410  90D8               	bcf	status,0,c
  4011  002412  0100               	movlb	0	; () banked
  4012  002414  3791               	rlcf	??_I2C_Master_Init& (0+255),f,b
  4013  002416  3792               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
  4014  002418  3793               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
  4015  00241A  3794               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
  4016  00241C  2EE8               	decfsz	wreg,f,c
  4017  00241E  D7F8               	goto	u3395
  4018  002420  C091  F084         	movff	??_I2C_Master_Init,___lldiv@divisor
  4019  002424  C092  F085         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  4020  002428  C093  F086         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  4021  00242C  C094  F087         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  4022  002430  ECC7  F00E         	call	___lldiv	;wreg free
  4023  002434  0100               	movlb	0	; () banked
  4024  002436  0580               	decf	?___lldiv& (0+255),w,b
  4025  002438  6EC8               	movwf	4040,c	;volatile
  4026                           
  4027                           ; BSR set to: 0
  4028                           ;I2C.c: 21: TRISC3 = 1;
  4029  00243A  8694               	bsf	3988,3,c	;volatile
  4030                           
  4031                           ; BSR set to: 0
  4032                           ;I2C.c: 22: TRISC4 = 1;
  4033  00243C  8894               	bsf	3988,4,c	;volatile
  4034                           
  4035                           ; BSR set to: 0
  4036  00243E  0012               	return		;funcret
  4037  002440                     __end_of_I2C_Master_Init:
  4038                           	opt stack 0
  4039                           tblptru	equ	0xFF8
  4040                           tblptrh	equ	0xFF7
  4041                           tblptrl	equ	0xFF6
  4042                           tablat	equ	0xFF5
  4043                           prodh	equ	0xFF4
  4044                           prodl	equ	0xFF3
  4045                           intcon	equ	0xFF2
  4046                           intcon2	equ	0xFF1
  4047                           intcon3	equ	0xFF0
  4048                           postinc0	equ	0xFEE
  4049                           wreg	equ	0xFE8
  4050                           postdec1	equ	0xFE5
  4051                           fsr1l	equ	0xFE1
  4052                           indf2	equ	0xFDF
  4053                           postinc2	equ	0xFDE
  4054                           postdec2	equ	0xFDD
  4055                           fsr2h	equ	0xFDA
  4056                           fsr2l	equ	0xFD9
  4057                           status	equ	0xFD8
  4058                           
  4059 ;; *************** function ___lldiv *****************
  4060 ;; Defined at:
  4061 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  4062 ;; Parameters:    Size  Location     Type
  4063 ;;  dividend        4    0[BANK0 ] unsigned long 
  4064 ;;  divisor         4    4[BANK0 ] unsigned long 
  4065 ;; Auto vars:     Size  Location     Type
  4066 ;;  quotient        4    8[BANK0 ] unsigned long 
  4067 ;;  counter         1   12[BANK0 ] unsigned char 
  4068 ;; Return value:  Size  Location     Type
  4069 ;;                  4    0[BANK0 ] unsigned long 
  4070 ;; Registers used:
  4071 ;;		wreg, status,2, status,0
  4072 ;; Tracked objects:
  4073 ;;		On entry : 0/0
  4074 ;;		On exit  : 0/0
  4075 ;;		Unchanged: 0/0
  4076 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4077 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4078 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4079 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4080 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4081 ;;Total ram usage:       13 bytes
  4082 ;; Hardware stack levels used:    1
  4083 ;; Hardware stack levels required when called:    7
  4084 ;; This function calls:
  4085 ;;		Nothing
  4086 ;; This function is called by:
  4087 ;;		_I2C_Master_Init
  4088 ;; This function uses a non-reentrant model
  4089 ;;
  4090                           
  4091                           	psect	text16
  4092  001D8E                     __ptext16:
  4093                           	opt stack 0
  4094  001D8E                     ___lldiv:
  4095                           	opt stack 20
  4096                           
  4097                           ; BSR set to: 0
  4098                           ;incstack = 0
  4099  001D8E  0E00               	movlw	0
  4100  001D90  0100               	movlb	0	; () banked
  4101  001D92  6F88               	movwf	___lldiv@quotient& (0+255),b
  4102  001D94  0E00               	movlw	0
  4103  001D96  6F89               	movwf	(___lldiv@quotient+1)& (0+255),b
  4104  001D98  0E00               	movlw	0
  4105  001D9A  6F8A               	movwf	(___lldiv@quotient+2)& (0+255),b
  4106  001D9C  0E00               	movlw	0
  4107  001D9E  6F8B               	movwf	(___lldiv@quotient+3)& (0+255),b
  4108                           
  4109                           ; BSR set to: 0
  4110  001DA0  0100               	movlb	0	; () banked
  4111  001DA2  5184               	movf	___lldiv@divisor& (0+255),w,b
  4112  001DA4  0100               	movlb	0	; () banked
  4113  001DA6  1185               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  4114  001DA8  0100               	movlb	0	; () banked
  4115  001DAA  1186               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  4116  001DAC  0100               	movlb	0	; () banked
  4117  001DAE  1187               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  4118  001DB0  B4D8               	btfsc	status,2,c
  4119  001DB2  D042               	goto	l1679
  4120                           
  4121                           ; BSR set to: 0
  4122  001DB4  0E01               	movlw	1
  4123  001DB6  0100               	movlb	0	; () banked
  4124  001DB8  6F8C               	movwf	___lldiv@counter& (0+255),b
  4125  001DBA  D008               	goto	l4455
  4126  001DBC                     l4453:
  4127                           
  4128                           ; BSR set to: 0
  4129  001DBC  0100               	movlb	0	; () banked
  4130  001DBE  90D8               	bcf	status,0,c
  4131  001DC0  3784               	rlcf	___lldiv@divisor& (0+255),f,b
  4132  001DC2  3785               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  4133  001DC4  3786               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  4134  001DC6  3787               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  4135  001DC8  0100               	movlb	0	; () banked
  4136  001DCA  2B8C               	incf	___lldiv@counter& (0+255),f,b
  4137  001DCC                     l4455:
  4138                           
  4139                           ; BSR set to: 0
  4140  001DCC  0100               	movlb	0	; () banked
  4141  001DCE  AF87               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  4142  001DD0  D7F5               	goto	l4453
  4143  001DD2                     l4457:
  4144                           
  4145                           ; BSR set to: 0
  4146  001DD2  0100               	movlb	0	; () banked
  4147  001DD4  90D8               	bcf	status,0,c
  4148  001DD6  3788               	rlcf	___lldiv@quotient& (0+255),f,b
  4149  001DD8  3789               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  4150  001DDA  378A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  4151  001DDC  378B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  4152                           
  4153                           ; BSR set to: 0
  4154  001DDE  0100               	movlb	0	; () banked
  4155  001DE0  5184               	movf	___lldiv@divisor& (0+255),w,b
  4156  001DE2  0100               	movlb	0	; () banked
  4157  001DE4  5D80               	subwf	___lldiv@dividend& (0+255),w,b
  4158  001DE6  0100               	movlb	0	; () banked
  4159  001DE8  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  4160  001DEA  0100               	movlb	0	; () banked
  4161  001DEC  5981               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  4162  001DEE  0100               	movlb	0	; () banked
  4163  001DF0  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  4164  001DF2  0100               	movlb	0	; () banked
  4165  001DF4  5982               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  4166  001DF6  0100               	movlb	0	; () banked
  4167  001DF8  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  4168  001DFA  0100               	movlb	0	; () banked
  4169  001DFC  5983               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  4170  001DFE  A0D8               	btfss	status,0,c
  4171  001E00  D012               	goto	l4465
  4172                           
  4173                           ; BSR set to: 0
  4174  001E02  0100               	movlb	0	; () banked
  4175  001E04  5184               	movf	___lldiv@divisor& (0+255),w,b
  4176  001E06  0100               	movlb	0	; () banked
  4177  001E08  5F80               	subwf	___lldiv@dividend& (0+255),f,b
  4178  001E0A  0100               	movlb	0	; () banked
  4179  001E0C  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  4180  001E0E  0100               	movlb	0	; () banked
  4181  001E10  5B81               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  4182  001E12  0100               	movlb	0	; () banked
  4183  001E14  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  4184  001E16  0100               	movlb	0	; () banked
  4185  001E18  5B82               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  4186  001E1A  0100               	movlb	0	; () banked
  4187  001E1C  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  4188  001E1E  0100               	movlb	0	; () banked
  4189  001E20  5B83               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  4190                           
  4191                           ; BSR set to: 0
  4192  001E22  0100               	movlb	0	; () banked
  4193  001E24  8188               	bsf	___lldiv@quotient& (0+255),0,b
  4194  001E26                     l4465:
  4195                           
  4196                           ; BSR set to: 0
  4197  001E26  0100               	movlb	0	; () banked
  4198  001E28  90D8               	bcf	status,0,c
  4199  001E2A  3387               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  4200  001E2C  3386               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  4201  001E2E  3385               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  4202  001E30  3384               	rrcf	___lldiv@divisor& (0+255),f,b
  4203                           
  4204                           ; BSR set to: 0
  4205  001E32  0100               	movlb	0	; () banked
  4206  001E34  2F8C               	decfsz	___lldiv@counter& (0+255),f,b
  4207  001E36  D7CD               	goto	l4457
  4208  001E38                     l1679:
  4209                           
  4210                           ; BSR set to: 0
  4211  001E38  C088  F080         	movff	___lldiv@quotient,?___lldiv
  4212  001E3C  C089  F081         	movff	___lldiv@quotient+1,?___lldiv+1
  4213  001E40  C08A  F082         	movff	___lldiv@quotient+2,?___lldiv+2
  4214  001E44  C08B  F083         	movff	___lldiv@quotient+3,?___lldiv+3
  4215                           
  4216                           ; BSR set to: 0
  4217  001E48  0012               	return		;funcret
  4218  001E4A                     __end_of___lldiv:
  4219                           	opt stack 0
  4220                           tblptru	equ	0xFF8
  4221                           tblptrh	equ	0xFF7
  4222                           tblptrl	equ	0xFF6
  4223                           tablat	equ	0xFF5
  4224                           prodh	equ	0xFF4
  4225                           prodl	equ	0xFF3
  4226                           intcon	equ	0xFF2
  4227                           intcon2	equ	0xFF1
  4228                           intcon3	equ	0xFF0
  4229                           postinc0	equ	0xFEE
  4230                           wreg	equ	0xFE8
  4231                           postdec1	equ	0xFE5
  4232                           fsr1l	equ	0xFE1
  4233                           indf2	equ	0xFDF
  4234                           postinc2	equ	0xFDE
  4235                           postdec2	equ	0xFDD
  4236                           fsr2h	equ	0xFDA
  4237                           fsr2l	equ	0xFD9
  4238                           status	equ	0xFD8
  4239                           
  4240 ;; *************** function _change_state_to_menu_start *****************
  4241 ;; Defined at:
  4242 ;;		line 416 in file "UI.c"
  4243 ;; Parameters:    Size  Location     Type
  4244 ;;		None
  4245 ;; Auto vars:     Size  Location     Type
  4246 ;;		None
  4247 ;; Return value:  Size  Location     Type
  4248 ;;                  1    wreg      void 
  4249 ;; Registers used:
  4250 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4251 ;; Tracked objects:
  4252 ;;		On entry : 0/0
  4253 ;;		On exit  : 0/0
  4254 ;;		Unchanged: 0/0
  4255 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4256 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4257 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4258 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4259 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4260 ;;Total ram usage:        0 bytes
  4261 ;; Hardware stack levels used:    1
  4262 ;; Hardware stack levels required when called:   11
  4263 ;; This function calls:
  4264 ;;		_lcdInst
  4265 ;;		_printRTC
  4266 ;;		_printf
  4267 ;; This function is called by:
  4268 ;;		_initUI
  4269 ;; This function uses a non-reentrant model
  4270 ;;
  4271                           
  4272                           	psect	text17
  4273  0029D8                     __ptext17:
  4274                           	opt stack 0
  4275  0029D8                     _change_state_to_menu_start:
  4276                           	opt stack 18
  4277                           
  4278                           ;UI.c: 417: cur_state = 0;
  4279                           
  4280                           ; BSR set to: 0
  4281                           ;incstack = 0
  4282  0029D8  0E00               	movlw	0
  4283  0029DA  0100               	movlb	0	; () banked
  4284  0029DC  6FE8               	movwf	(_cur_state+1)& (0+255),b
  4285  0029DE  0E00               	movlw	0
  4286  0029E0  6FE7               	movwf	_cur_state& (0+255),b
  4287                           
  4288                           ; BSR set to: 0
  4289                           ;UI.c: 419: lcdInst(0b10000000);;
  4290  0029E2  0E80               	movlw	128
  4291  0029E4  ECD8  F015         	call	_lcdInst
  4292                           
  4293                           ;UI.c: 420: printRTC();
  4294  0029E8  EC63  F006         	call	_printRTC	;wreg free
  4295                           
  4296                           ;UI.c: 421: lcdInst(0b11000000);;
  4297  0029EC  0EC0               	movlw	192
  4298  0029EE  ECD8  F015         	call	_lcdInst
  4299                           
  4300                           ;UI.c: 422: printf("PUSH TO CONTINUE");
  4301  0029F2  0E97               	movlw	low STR_15
  4302  0029F4  0100               	movlb	0	; () banked
  4303  0029F6  6F8E               	movwf	printf@f& (0+255),b
  4304  0029F8  0EFF               	movlw	high STR_15
  4305  0029FA  0100               	movlb	0	; () banked
  4306  0029FC  6F8F               	movwf	(printf@f+1)& (0+255),b
  4307  0029FE  ECBB  F002         	call	_printf	;wreg free
  4308  002A02  0012               	return		;funcret
  4309  002A04                     __end_of_change_state_to_menu_start:
  4310                           	opt stack 0
  4311                           tblptru	equ	0xFF8
  4312                           tblptrh	equ	0xFF7
  4313                           tblptrl	equ	0xFF6
  4314                           tablat	equ	0xFF5
  4315                           prodh	equ	0xFF4
  4316                           prodl	equ	0xFF3
  4317                           intcon	equ	0xFF2
  4318                           intcon2	equ	0xFF1
  4319                           intcon3	equ	0xFF0
  4320                           postinc0	equ	0xFEE
  4321                           wreg	equ	0xFE8
  4322                           postdec1	equ	0xFE5
  4323                           fsr1l	equ	0xFE1
  4324                           indf2	equ	0xFDF
  4325                           postinc2	equ	0xFDE
  4326                           postdec2	equ	0xFDD
  4327                           fsr2h	equ	0xFDA
  4328                           fsr2l	equ	0xFD9
  4329                           status	equ	0xFD8
  4330                           
  4331 ;; *************** function _initTime *****************
  4332 ;; Defined at:
  4333 ;;		line 16 in file "RTC.c"
  4334 ;; Parameters:    Size  Location     Type
  4335 ;;  s               1    wreg     unsigned char 
  4336 ;;  m               1    0[BANK0 ] unsigned char 
  4337 ;;  h               1    1[BANK0 ] unsigned char 
  4338 ;;  w               1    2[BANK0 ] unsigned char 
  4339 ;;  DD              1    3[BANK0 ] unsigned char 
  4340 ;;  MM              1    4[BANK0 ] unsigned char 
  4341 ;;  YY              1    5[BANK0 ] unsigned char 
  4342 ;; Auto vars:     Size  Location     Type
  4343 ;;  s               1    6[BANK0 ] unsigned char 
  4344 ;; Return value:  Size  Location     Type
  4345 ;;                  1    wreg      void 
  4346 ;; Registers used:
  4347 ;;		wreg
  4348 ;; Tracked objects:
  4349 ;;		On entry : 0/0
  4350 ;;		On exit  : 0/0
  4351 ;;		Unchanged: 0/0
  4352 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4353 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4354 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4355 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4356 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4357 ;;Total ram usage:        7 bytes
  4358 ;; Hardware stack levels used:    1
  4359 ;; Hardware stack levels required when called:    7
  4360 ;; This function calls:
  4361 ;;		Nothing
  4362 ;; This function is called by:
  4363 ;;		_main
  4364 ;; This function uses a non-reentrant model
  4365 ;;
  4366                           
  4367                           	psect	text18
  4368  002AC4                     __ptext18:
  4369                           	opt stack 0
  4370  002AC4                     _initTime:
  4371                           	opt stack 23
  4372                           
  4373                           ;incstack = 0
  4374                           ;initTime@s stored from wreg
  4375  002AC4  0100               	movlb	0	; () banked
  4376  002AC6  6F86               	movwf	initTime@s& (0+255),b
  4377                           
  4378                           ;RTC.c: 18: time[0] = s;
  4379  002AC8  C086  F0DC         	movff	initTime@s,_time
  4380                           
  4381                           ;RTC.c: 19: time[1] = m;
  4382  002ACC  C080  F0DD         	movff	initTime@m,_time+1
  4383                           
  4384                           ;RTC.c: 20: time[2] = h;
  4385  002AD0  C081  F0DE         	movff	initTime@h,_time+2
  4386                           
  4387                           ;RTC.c: 21: time[3] = w;
  4388  002AD4  C082  F0DF         	movff	initTime@w,_time+3
  4389                           
  4390                           ;RTC.c: 22: time[4] = DD;
  4391  002AD8  C083  F0E0         	movff	initTime@DD,_time+4
  4392                           
  4393                           ;RTC.c: 23: time[5] = MM;
  4394  002ADC  C084  F0E1         	movff	initTime@MM,_time+5
  4395                           
  4396                           ;RTC.c: 24: time[6] = YY;
  4397  002AE0  C085  F0E2         	movff	initTime@YY,_time+6
  4398  002AE4  0012               	return		;funcret
  4399  002AE6                     __end_of_initTime:
  4400                           	opt stack 0
  4401                           tblptru	equ	0xFF8
  4402                           tblptrh	equ	0xFF7
  4403                           tblptrl	equ	0xFF6
  4404                           tablat	equ	0xFF5
  4405                           prodh	equ	0xFF4
  4406                           prodl	equ	0xFF3
  4407                           intcon	equ	0xFF2
  4408                           intcon2	equ	0xFF1
  4409                           intcon3	equ	0xFF0
  4410                           postinc0	equ	0xFEE
  4411                           wreg	equ	0xFE8
  4412                           postdec1	equ	0xFE5
  4413                           fsr1l	equ	0xFE1
  4414                           indf2	equ	0xFDF
  4415                           postinc2	equ	0xFDE
  4416                           postdec2	equ	0xFDD
  4417                           fsr2h	equ	0xFDA
  4418                           fsr2l	equ	0xFD9
  4419                           status	equ	0xFD8
  4420                           
  4421 ;; *************** function _initLCD *****************
  4422 ;; Defined at:
  4423 ;;		line 47 in file "lcd.c"
  4424 ;; Parameters:    Size  Location     Type
  4425 ;;		None
  4426 ;; Auto vars:     Size  Location     Type
  4427 ;;		None
  4428 ;; Return value:  Size  Location     Type
  4429 ;;                  1    wreg      void 
  4430 ;; Registers used:
  4431 ;;		wreg, status,2, status,0, cstack
  4432 ;; Tracked objects:
  4433 ;;		On entry : 0/0
  4434 ;;		On exit  : 0/0
  4435 ;;		Unchanged: 0/0
  4436 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4437 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4438 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4439 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4440 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4441 ;;Total ram usage:        1 bytes
  4442 ;; Hardware stack levels used:    1
  4443 ;; Hardware stack levels required when called:    9
  4444 ;; This function calls:
  4445 ;;		_lcdInst
  4446 ;; This function is called by:
  4447 ;;		_main
  4448 ;; This function uses a non-reentrant model
  4449 ;;
  4450                           
  4451                           	psect	text19
  4452  002598                     __ptext19:
  4453                           	opt stack 0
  4454  002598                     _initLCD:
  4455                           	opt stack 21
  4456                           
  4457                           ;lcd.c: 48: _delay((unsigned long)((15)*(32000000/4000.0)));
  4458                           
  4459                           ;incstack = 0
  4460  002598  0E9C               	movlw	156
  4461  00259A  0100               	movlb	0	; () banked
  4462  00259C  6F83               	movwf	??_initLCD& (0+255),b
  4463  00259E  0ED7               	movlw	215
  4464  0025A0                     u5137:
  4465  0025A0  2EE8               	decfsz	wreg,f,c
  4466  0025A2  D7FE               	bra	u5137
  4467  0025A4  2F83               	decfsz	??_initLCD& (0+255),f,b
  4468  0025A6  D7FC               	bra	u5137
  4469                           
  4470                           ;lcd.c: 49: lcdInst(0b00110011);
  4471  0025A8  0E33               	movlw	51
  4472  0025AA  ECD8  F015         	call	_lcdInst
  4473                           
  4474                           ;lcd.c: 50: lcdInst(0b00110010);
  4475  0025AE  0E32               	movlw	50
  4476  0025B0  ECD8  F015         	call	_lcdInst
  4477                           
  4478                           ;lcd.c: 52: lcdInst(0b00101000);
  4479  0025B4  0E28               	movlw	40
  4480  0025B6  ECD8  F015         	call	_lcdInst
  4481                           
  4482                           ;lcd.c: 53: lcdInst(0b00001100);
  4483  0025BA  0E0C               	movlw	12
  4484  0025BC  ECD8  F015         	call	_lcdInst
  4485                           
  4486                           ;lcd.c: 54: lcdInst(0b00000110);
  4487  0025C0  0E06               	movlw	6
  4488  0025C2  ECD8  F015         	call	_lcdInst
  4489                           
  4490                           ;lcd.c: 55: lcdInst(0b00000001);
  4491  0025C6  0E01               	movlw	1
  4492  0025C8  ECD8  F015         	call	_lcdInst
  4493                           
  4494                           ;lcd.c: 56: _delay((unsigned long)((15)*(32000000/4000.0)));
  4495  0025CC  0E9C               	movlw	156
  4496  0025CE  0100               	movlb	0	; () banked
  4497  0025D0  6F83               	movwf	??_initLCD& (0+255),b
  4498  0025D2  0ED7               	movlw	215
  4499  0025D4                     u5147:
  4500  0025D4  2EE8               	decfsz	wreg,f,c
  4501  0025D6  D7FE               	bra	u5147
  4502  0025D8  2F83               	decfsz	??_initLCD& (0+255),f,b
  4503  0025DA  D7FC               	bra	u5147
  4504  0025DC  0012               	return		;funcret
  4505  0025DE                     __end_of_initLCD:
  4506                           	opt stack 0
  4507                           tblptru	equ	0xFF8
  4508                           tblptrh	equ	0xFF7
  4509                           tblptrl	equ	0xFF6
  4510                           tablat	equ	0xFF5
  4511                           prodh	equ	0xFF4
  4512                           prodl	equ	0xFF3
  4513                           intcon	equ	0xFF2
  4514                           intcon2	equ	0xFF1
  4515                           intcon3	equ	0xFF0
  4516                           postinc0	equ	0xFEE
  4517                           wreg	equ	0xFE8
  4518                           postdec1	equ	0xFE5
  4519                           fsr1l	equ	0xFE1
  4520                           indf2	equ	0xFDF
  4521                           postinc2	equ	0xFDE
  4522                           postdec2	equ	0xFDD
  4523                           fsr2h	equ	0xFDA
  4524                           fsr2l	equ	0xFD9
  4525                           status	equ	0xFD8
  4526                           
  4527 ;; *************** function _UI *****************
  4528 ;; Defined at:
  4529 ;;		line 72 in file "UI.c"
  4530 ;; Parameters:    Size  Location     Type
  4531 ;;		None
  4532 ;; Auto vars:     Size  Location     Type
  4533 ;;  i               1   83[BANK0 ] unsigned char 
  4534 ;;  i               1   82[BANK0 ] unsigned char 
  4535 ;;  i               1   81[BANK0 ] unsigned char 
  4536 ;;  i               1   80[BANK0 ] unsigned char 
  4537 ;;  i               1   79[BANK0 ] unsigned char 
  4538 ;;  i               1   78[BANK0 ] unsigned char 
  4539 ;;  i               1   77[BANK0 ] unsigned char 
  4540 ;;  i               1   76[BANK0 ] unsigned char 
  4541 ;;  i               1   75[BANK0 ] unsigned char 
  4542 ;;  i               1   74[BANK0 ] unsigned char 
  4543 ;;  i               1   73[BANK0 ] unsigned char 
  4544 ;;  i               1   72[BANK0 ] unsigned char 
  4545 ;;  i               1   71[BANK0 ] unsigned char 
  4546 ;; Return value:  Size  Location     Type
  4547 ;;                  1    wreg      void 
  4548 ;; Registers used:
  4549 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4550 ;; Tracked objects:
  4551 ;;		On entry : 0/0
  4552 ;;		On exit  : 0/0
  4553 ;;		Unchanged: 0/0
  4554 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4555 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4556 ;;      Locals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4557 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4558 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4559 ;;Total ram usage:       16 bytes
  4560 ;; Hardware stack levels used:    1
  4561 ;; Hardware stack levels required when called:   11
  4562 ;; This function calls:
  4563 ;;		___awdiv
  4564 ;;		___awmod
  4565 ;;		_change_state_to_menu_12
  4566 ;;		_change_state_to_menu_22
  4567 ;;		_lcdInst
  4568 ;;		_printRTC
  4569 ;;		_printf
  4570 ;; This function is called by:
  4571 ;;		_main
  4572 ;; This function uses a non-reentrant model
  4573 ;;
  4574                           
  4575                           	psect	text20
  4576  000012                     __ptext20:
  4577                           	opt stack 0
  4578  000012                     _UI:
  4579                           	opt stack 19
  4580                           
  4581                           ;UI.c: 73: if(machine_state == DoneSorting_state){
  4582                           
  4583                           ;incstack = 0
  4584  000012  0E02               	movlw	2
  4585  000014  0100               	movlb	0	; () banked
  4586  000016  19F7               	xorwf	_machine_state& (0+255),w,b
  4587  000018  A4D8               	btfss	status,2,c
  4588  00001A  D071               	goto	l5351
  4589                           
  4590                           ; BSR set to: 0
  4591                           ;UI.c: 74: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  4592  00001C  0E01               	movlw	1
  4593  00001E  ECD8  F015         	call	_lcdInst
  4594  000022  0E68               	movlw	104
  4595  000024  0100               	movlb	0	; () banked
  4596  000026  6FC4               	movwf	??_UI& (0+255),b
  4597  000028  0EE4               	movlw	228
  4598  00002A                     u5157:
  4599  00002A  2EE8               	decfsz	wreg,f,c
  4600  00002C  D7FE               	bra	u5157
  4601  00002E  2FC4               	decfsz	??_UI& (0+255),f,b
  4602  000030  D7FC               	bra	u5157
  4603  000032  F000               	nop	
  4604                           
  4605                           ;UI.c: 75: lcdInst(0b10000000);;
  4606  000034  0E80               	movlw	128
  4607  000036  ECD8  F015         	call	_lcdInst
  4608                           
  4609                           ;UI.c: 76: printf("!SORT CONCLUDED!");
  4610  00003A  0EBA               	movlw	low STR_1
  4611  00003C  0100               	movlb	0	; () banked
  4612  00003E  6F8E               	movwf	printf@f& (0+255),b
  4613  000040  0EFE               	movlw	high STR_1
  4614  000042  0100               	movlb	0	; () banked
  4615  000044  6F8F               	movwf	(printf@f+1)& (0+255),b
  4616  000046  ECBB  F002         	call	_printf	;wreg free
  4617                           
  4618                           ;UI.c: 77: lcdInst(0b11000000);;
  4619  00004A  0EC0               	movlw	192
  4620  00004C  ECD8  F015         	call	_lcdInst
  4621                           
  4622                           ;UI.c: 78: printf("Time: %02d:%02d:%02d", 0, (total_time % 3600) / 60, (total_time % 360
      +                          0) % 60);
  4623  000050  0E0E               	movlw	14
  4624  000052  0100               	movlb	0	; () banked
  4625  000054  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  4626  000056  0E10               	movlw	16
  4627  000058  6F82               	movwf	___awmod@divisor& (0+255),b
  4628  00005A  C0F5  F080         	movff	_total_time,___awmod@dividend
  4629  00005E  C0F6  F081         	movff	_total_time+1,___awmod@dividend+1
  4630  000062  EC7A  F00F         	call	___awmod	;wreg free
  4631  000066  C080  F0C5         	movff	?___awmod,_UI$2006
  4632  00006A  C081  F0C6         	movff	?___awmod+1,_UI$2006+1
  4633                           
  4634                           ;UI.c: 78: printf("Time: %02d:%02d:%02d", 0, (total_time % 3600) / 60, (total_time % 360
      +                          0) % 60);
  4635  00006E  0EE8               	movlw	low STR_2
  4636  000070  0100               	movlb	0	; () banked
  4637  000072  6F8E               	movwf	printf@f& (0+255),b
  4638  000074  0EFD               	movlw	high STR_2
  4639  000076  0100               	movlb	0	; () banked
  4640  000078  6F8F               	movwf	(printf@f+1)& (0+255),b
  4641  00007A  0E00               	movlw	0
  4642  00007C  0100               	movlb	0	; () banked
  4643  00007E  6F91               	movwf	(?_printf+3)& (0+255),b
  4644  000080  0E00               	movlw	0
  4645  000082  6F90               	movwf	(?_printf+2)& (0+255),b
  4646  000084  0E0E               	movlw	14
  4647  000086  0100               	movlb	0	; () banked
  4648  000088  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  4649  00008A  0E10               	movlw	16
  4650  00008C  6F82               	movwf	___awmod@divisor& (0+255),b
  4651  00008E  C0F5  F080         	movff	_total_time,___awmod@dividend
  4652  000092  C0F6  F081         	movff	_total_time+1,___awmod@dividend+1
  4653  000096  EC7A  F00F         	call	___awmod	;wreg free
  4654  00009A  C080  F086         	movff	?___awmod,___awdiv@dividend
  4655  00009E  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  4656  0000A2  0E00               	movlw	0
  4657  0000A4  0100               	movlb	0	; () banked
  4658  0000A6  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  4659  0000A8  0E3C               	movlw	60
  4660  0000AA  6F88               	movwf	___awdiv@divisor& (0+255),b
  4661  0000AC  EC68  F00E         	call	___awdiv	;wreg free
  4662  0000B0  C086  F092         	movff	?___awdiv,?_printf+4
  4663  0000B4  C087  F093         	movff	?___awdiv+1,?_printf+5
  4664  0000B8  C0C5  F080         	movff	_UI$2006,___awmod@dividend
  4665  0000BC  C0C6  F081         	movff	_UI$2006+1,___awmod@dividend+1
  4666  0000C0  0E00               	movlw	0
  4667  0000C2  0100               	movlb	0	; () banked
  4668  0000C4  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  4669  0000C6  0E3C               	movlw	60
  4670  0000C8  6F82               	movwf	___awmod@divisor& (0+255),b
  4671  0000CA  EC7A  F00F         	call	___awmod	;wreg free
  4672  0000CE  C080  F094         	movff	?___awmod,?_printf+6
  4673  0000D2  C081  F095         	movff	?___awmod+1,?_printf+7
  4674  0000D6  ECBB  F002         	call	_printf	;wreg free
  4675                           
  4676                           ;UI.c: 79: machine_state = UI_state;
  4677  0000DA  0E00               	movlw	0
  4678  0000DC  0100               	movlb	0	; () banked
  4679  0000DE  6FF7               	movwf	_machine_state& (0+255),b
  4680  0000E0                     l374:
  4681  0000E0  A281               	btfss	3969,1,c	;volatile
  4682  0000E2  D7FE               	goto	l374
  4683                           
  4684                           ;UI.c: 82: }
  4685                           ;UI.c: 83: if(cur_state==12){
  4686  0000E4  0E0C               	movlw	12
  4687  0000E6  0100               	movlb	0	; () banked
  4688  0000E8  19E7               	xorwf	_cur_state& (0+255),w,b
  4689  0000EA  0100               	movlb	0	; () banked
  4690  0000EC  11E8               	iorwf	(_cur_state+1)& (0+255),w,b
  4691  0000EE  A4D8               	btfss	status,2,c
  4692  0000F0  D003               	goto	l5349
  4693                           
  4694                           ; BSR set to: 0
  4695                           ;UI.c: 84: change_state_to_menu_12();
  4696  0000F2  EC4A  F013         	call	_change_state_to_menu_12	;wreg free
  4697                           
  4698                           ;UI.c: 85: }
  4699  0000F6  D238               	goto	l5607
  4700  0000F8                     l5349:
  4701                           
  4702                           ;UI.c: 86: else{
  4703                           ;UI.c: 87: change_state_to_menu_22();
  4704  0000F8  EC2E  F013         	call	_change_state_to_menu_22	;wreg free
  4705                           
  4706                           ;UI.c: 88: }
  4707                           ;UI.c: 89: }
  4708  0000FC  D235               	goto	l5607
  4709  0000FE                     l5351:
  4710                           
  4711                           ;UI.c: 90: else if(cur_state == 0){
  4712  0000FE  0100               	movlb	0	; () banked
  4713  000100  51E7               	movf	_cur_state& (0+255),w,b
  4714  000102  0100               	movlb	0	; () banked
  4715  000104  11E8               	iorwf	(_cur_state+1)& (0+255),w,b
  4716  000106  A4D8               	btfss	status,2,c
  4717  000108  D22F               	goto	l5607
  4718                           
  4719                           ; BSR set to: 0
  4720                           ;UI.c: 91: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
  4721  00010A  0E00               	movlw	0
  4722  00010C  0100               	movlb	0	; () banked
  4723  00010E  6FC7               	movwf	UI@i& (0+255),b
  4724  000110                     l5355:
  4725                           
  4726                           ; BSR set to: 0
  4727  000110  0E63               	movlw	99
  4728  000112  0100               	movlb	0	; () banked
  4729  000114  65C7               	cpfsgt	UI@i& (0+255),b
  4730  000116  D001               	goto	l5359
  4731  000118  D00C               	goto	l5363
  4732  00011A                     l5359:
  4733                           
  4734                           ; BSR set to: 0
  4735  00011A  0E68               	movlw	104
  4736  00011C  0100               	movlb	0	; () banked
  4737  00011E  6FC4               	movwf	??_UI& (0+255),b
  4738  000120  0EE4               	movlw	228
  4739  000122                     u5167:
  4740  000122  2EE8               	decfsz	wreg,f,c
  4741  000124  D7FE               	bra	u5167
  4742  000126  2FC4               	decfsz	??_UI& (0+255),f,b
  4743  000128  D7FC               	bra	u5167
  4744  00012A  F000               	nop	
  4745  00012C  0100               	movlb	0	; () banked
  4746  00012E  2BC7               	incf	UI@i& (0+255),f,b
  4747  000130  D7EF               	goto	l5355
  4748  000132                     l5363:
  4749                           
  4750                           ; BSR set to: 0
  4751                           ;UI.c: 92: if(cur_state == 0){
  4752  000132  0100               	movlb	0	; () banked
  4753  000134  51E7               	movf	_cur_state& (0+255),w,b
  4754  000136  0100               	movlb	0	; () banked
  4755  000138  11E8               	iorwf	(_cur_state+1)& (0+255),w,b
  4756  00013A  A4D8               	btfss	status,2,c
  4757  00013C  D215               	goto	l5607
  4758                           
  4759                           ; BSR set to: 0
  4760                           ;UI.c: 93: printRTC();
  4761  00013E  EC63  F006         	call	_printRTC	;wreg free
  4762                           
  4763                           ;UI.c: 94: }
  4764                           ;UI.c: 95: }
  4765                           ;UI.c: 96: while(logstate){
  4766  000142  D212               	goto	l5607
  4767  000144                     l5367:
  4768                           
  4769                           ;UI.c: 98: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  4770  000144  0E01               	movlw	1
  4771  000146  ECD8  F015         	call	_lcdInst
  4772  00014A  0E68               	movlw	104
  4773  00014C  0100               	movlb	0	; () banked
  4774  00014E  6FC4               	movwf	??_UI& (0+255),b
  4775  000150  0EE4               	movlw	228
  4776  000152                     u5177:
  4777  000152  2EE8               	decfsz	wreg,f,c
  4778  000154  D7FE               	bra	u5177
  4779  000156  2FC4               	decfsz	??_UI& (0+255),f,b
  4780  000158  D7FC               	bra	u5177
  4781  00015A  F000               	nop	
  4782                           
  4783                           ;UI.c: 99: lcdInst(0b10000000);;
  4784  00015C  0E80               	movlw	128
  4785  00015E  ECD8  F015         	call	_lcdInst
  4786                           
  4787                           ;UI.c: 100: printf("-- Log %2d here--", log);
  4788  000162  0EFD               	movlw	low STR_3
  4789  000164  0100               	movlb	0	; () banked
  4790  000166  6F8E               	movwf	printf@f& (0+255),b
  4791  000168  0EFD               	movlw	high STR_3
  4792  00016A  0100               	movlb	0	; () banked
  4793  00016C  6F8F               	movwf	(printf@f+1)& (0+255),b
  4794  00016E  C0F1  F090         	movff	_log,?_printf+2
  4795  000172  C0F2  F091         	movff	_log+1,?_printf+3
  4796  000176  ECBB  F002         	call	_printf	;wreg free
  4797                           
  4798                           ;UI.c: 101: lcdInst(0b11000000);;
  4799  00017A  0EC0               	movlw	192
  4800  00017C  ECD8  F015         	call	_lcdInst
  4801                           
  4802                           ;UI.c: 102: printf("Pause:< | Back:>");
  4803  000180  0E86               	movlw	low STR_4
  4804  000182  0100               	movlb	0	; () banked
  4805  000184  6F8E               	movwf	printf@f& (0+255),b
  4806  000186  0EFF               	movlw	high STR_4
  4807  000188  0100               	movlb	0	; () banked
  4808  00018A  6F8F               	movwf	(printf@f+1)& (0+255),b
  4809  00018C  ECBB  F002         	call	_printf	;wreg free
  4810                           
  4811                           ;UI.c: 104: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  4812  000190  0E00               	movlw	0
  4813  000192  0100               	movlb	0	; () banked
  4814  000194  6FC8               	movwf	UI@i_582& (0+255),b
  4815  000196                     l5381:
  4816                           
  4817                           ; BSR set to: 0
  4818  000196  0E63               	movlw	99
  4819  000198  0100               	movlb	0	; () banked
  4820  00019A  65C8               	cpfsgt	UI@i_582& (0+255),b
  4821  00019C  D001               	goto	l5385
  4822  00019E  D00C               	goto	l5389
  4823  0001A0                     l5385:
  4824                           
  4825                           ; BSR set to: 0
  4826  0001A0  0E68               	movlw	104
  4827  0001A2  0100               	movlb	0	; () banked
  4828  0001A4  6FC4               	movwf	??_UI& (0+255),b
  4829  0001A6  0EE4               	movlw	228
  4830  0001A8                     u5187:
  4831  0001A8  2EE8               	decfsz	wreg,f,c
  4832  0001AA  D7FE               	bra	u5187
  4833  0001AC  2FC4               	decfsz	??_UI& (0+255),f,b
  4834  0001AE  D7FC               	bra	u5187
  4835  0001B0  F000               	nop	
  4836  0001B2  0100               	movlb	0	; () banked
  4837  0001B4  2BC8               	incf	UI@i_582& (0+255),f,b
  4838  0001B6  D7EF               	goto	l5381
  4839  0001B8                     l5389:
  4840                           
  4841                           ; BSR set to: 0
  4842  0001B8  0100               	movlb	0	; () banked
  4843  0001BA  51F3               	movf	_logstate& (0+255),w,b
  4844  0001BC  0100               	movlb	0	; () banked
  4845  0001BE  11F4               	iorwf	(_logstate+1)& (0+255),w,b
  4846  0001C0  B4D8               	btfsc	status,2,c
  4847  0001C2  0012               	return	
  4848                           
  4849                           ; BSR set to: 0
  4850                           ;UI.c: 105: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  4851                           
  4852                           ; BSR set to: 0
  4853                           
  4854                           ; BSR set to: 0
  4855  0001C4  0E00               	movlw	0
  4856  0001C6  0100               	movlb	0	; () banked
  4857  0001C8  6FC9               	movwf	UI@i_583& (0+255),b
  4858  0001CA                     l5395:
  4859                           
  4860                           ; BSR set to: 0
  4861  0001CA  0E63               	movlw	99
  4862  0001CC  0100               	movlb	0	; () banked
  4863  0001CE  65C9               	cpfsgt	UI@i_583& (0+255),b
  4864  0001D0  D001               	goto	l5399
  4865  0001D2  D00C               	goto	l5403
  4866  0001D4                     l5399:
  4867                           
  4868                           ; BSR set to: 0
  4869  0001D4  0E68               	movlw	104
  4870  0001D6  0100               	movlb	0	; () banked
  4871  0001D8  6FC4               	movwf	??_UI& (0+255),b
  4872  0001DA  0EE4               	movlw	228
  4873  0001DC                     u5197:
  4874  0001DC  2EE8               	decfsz	wreg,f,c
  4875  0001DE  D7FE               	bra	u5197
  4876  0001E0  2FC4               	decfsz	??_UI& (0+255),f,b
  4877  0001E2  D7FC               	bra	u5197
  4878  0001E4  F000               	nop	
  4879  0001E6  0100               	movlb	0	; () banked
  4880  0001E8  2BC9               	incf	UI@i_583& (0+255),f,b
  4881  0001EA  D7EF               	goto	l5395
  4882  0001EC                     l5403:
  4883                           
  4884                           ; BSR set to: 0
  4885  0001EC  0100               	movlb	0	; () banked
  4886  0001EE  51F3               	movf	_logstate& (0+255),w,b
  4887  0001F0  0100               	movlb	0	; () banked
  4888  0001F2  11F4               	iorwf	(_logstate+1)& (0+255),w,b
  4889  0001F4  B4D8               	btfsc	status,2,c
  4890  0001F6  0012               	return	
  4891                           
  4892                           ; BSR set to: 0
  4893                           ;UI.c: 107: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  4894                           
  4895                           ; BSR set to: 0
  4896                           
  4897                           ; BSR set to: 0
  4898  0001F8  0E01               	movlw	1
  4899  0001FA  ECD8  F015         	call	_lcdInst
  4900  0001FE  0E68               	movlw	104
  4901  000200  0100               	movlb	0	; () banked
  4902  000202  6FC4               	movwf	??_UI& (0+255),b
  4903  000204  0EE4               	movlw	228
  4904  000206                     u5207:
  4905  000206  2EE8               	decfsz	wreg,f,c
  4906  000208  D7FE               	bra	u5207
  4907  00020A  2FC4               	decfsz	??_UI& (0+255),f,b
  4908  00020C  D7FC               	bra	u5207
  4909  00020E  F000               	nop	
  4910                           
  4911                           ;UI.c: 108: lcdInst(0b10000000);;
  4912  000210  0E80               	movlw	128
  4913  000212  ECD8  F015         	call	_lcdInst
  4914                           
  4915                           ;UI.c: 109: printf("Start:");
  4916  000216  0EC4               	movlw	low STR_5
  4917  000218  0100               	movlb	0	; () banked
  4918  00021A  6F8E               	movwf	printf@f& (0+255),b
  4919  00021C  0EFF               	movlw	high STR_5
  4920  00021E  0100               	movlb	0	; () banked
  4921  000220  6F8F               	movwf	(printf@f+1)& (0+255),b
  4922  000222  ECBB  F002         	call	_printf	;wreg free
  4923                           
  4924                           ;UI.c: 110: lcdInst(0b11000000);;
  4925  000226  0EC0               	movlw	192
  4926  000228  ECD8  F015         	call	_lcdInst
  4927                           
  4928                           ;UI.c: 111: printf("06Feb | 01:08:56");
  4929  00022C  0EFE               	movlw	low STR_6
  4930  00022E  0100               	movlb	0	; () banked
  4931  000230  6F8E               	movwf	printf@f& (0+255),b
  4932  000232  0EFE               	movlw	high STR_6
  4933  000234  0100               	movlb	0	; () banked
  4934  000236  6F8F               	movwf	(printf@f+1)& (0+255),b
  4935  000238  ECBB  F002         	call	_printf	;wreg free
  4936                           
  4937                           ;UI.c: 113: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  4938  00023C  0E00               	movlw	0
  4939  00023E  0100               	movlb	0	; () banked
  4940  000240  6FCA               	movwf	UI@i_586& (0+255),b
  4941  000242                     l5421:
  4942                           
  4943                           ; BSR set to: 0
  4944  000242  0E63               	movlw	99
  4945  000244  0100               	movlb	0	; () banked
  4946  000246  65CA               	cpfsgt	UI@i_586& (0+255),b
  4947  000248  D001               	goto	l5425
  4948  00024A  D00C               	goto	l5429
  4949  00024C                     l5425:
  4950                           
  4951                           ; BSR set to: 0
  4952  00024C  0E68               	movlw	104
  4953  00024E  0100               	movlb	0	; () banked
  4954  000250  6FC4               	movwf	??_UI& (0+255),b
  4955  000252  0EE4               	movlw	228
  4956  000254                     u5217:
  4957  000254  2EE8               	decfsz	wreg,f,c
  4958  000256  D7FE               	bra	u5217
  4959  000258  2FC4               	decfsz	??_UI& (0+255),f,b
  4960  00025A  D7FC               	bra	u5217
  4961  00025C  F000               	nop	
  4962  00025E  0100               	movlb	0	; () banked
  4963  000260  2BCA               	incf	UI@i_586& (0+255),f,b
  4964  000262  D7EF               	goto	l5421
  4965  000264                     l5429:
  4966                           
  4967                           ; BSR set to: 0
  4968  000264  0100               	movlb	0	; () banked
  4969  000266  51F3               	movf	_logstate& (0+255),w,b
  4970  000268  0100               	movlb	0	; () banked
  4971  00026A  11F4               	iorwf	(_logstate+1)& (0+255),w,b
  4972  00026C  B4D8               	btfsc	status,2,c
  4973  00026E  0012               	return	
  4974                           
  4975                           ; BSR set to: 0
  4976                           ;UI.c: 114: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  4977                           
  4978                           ; BSR set to: 0
  4979                           
  4980                           ; BSR set to: 0
  4981  000270  0E00               	movlw	0
  4982  000272  0100               	movlb	0	; () banked
  4983  000274  6FCB               	movwf	UI@i_587& (0+255),b
  4984  000276                     l5435:
  4985                           
  4986                           ; BSR set to: 0
  4987  000276  0E63               	movlw	99
  4988  000278  0100               	movlb	0	; () banked
  4989  00027A  65CB               	cpfsgt	UI@i_587& (0+255),b
  4990  00027C  D001               	goto	l5439
  4991  00027E  D00C               	goto	l5443
  4992  000280                     l5439:
  4993                           
  4994                           ; BSR set to: 0
  4995  000280  0E68               	movlw	104
  4996  000282  0100               	movlb	0	; () banked
  4997  000284  6FC4               	movwf	??_UI& (0+255),b
  4998  000286  0EE4               	movlw	228
  4999  000288                     u5227:
  5000  000288  2EE8               	decfsz	wreg,f,c
  5001  00028A  D7FE               	bra	u5227
  5002  00028C  2FC4               	decfsz	??_UI& (0+255),f,b
  5003  00028E  D7FC               	bra	u5227
  5004  000290  F000               	nop	
  5005  000292  0100               	movlb	0	; () banked
  5006  000294  2BCB               	incf	UI@i_587& (0+255),f,b
  5007  000296  D7EF               	goto	l5435
  5008  000298                     l5443:
  5009                           
  5010                           ; BSR set to: 0
  5011  000298  0100               	movlb	0	; () banked
  5012  00029A  51F3               	movf	_logstate& (0+255),w,b
  5013  00029C  0100               	movlb	0	; () banked
  5014  00029E  11F4               	iorwf	(_logstate+1)& (0+255),w,b
  5015  0002A0  B4D8               	btfsc	status,2,c
  5016  0002A2  0012               	return	
  5017                           
  5018                           ; BSR set to: 0
  5019                           ;UI.c: 116: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  5020                           
  5021                           ; BSR set to: 0
  5022                           
  5023                           ; BSR set to: 0
  5024  0002A4  0E01               	movlw	1
  5025  0002A6  ECD8  F015         	call	_lcdInst
  5026  0002AA  0E68               	movlw	104
  5027  0002AC  0100               	movlb	0	; () banked
  5028  0002AE  6FC4               	movwf	??_UI& (0+255),b
  5029  0002B0  0EE4               	movlw	228
  5030  0002B2                     u5237:
  5031  0002B2  2EE8               	decfsz	wreg,f,c
  5032  0002B4  D7FE               	bra	u5237
  5033  0002B6  2FC4               	decfsz	??_UI& (0+255),f,b
  5034  0002B8  D7FC               	bra	u5237
  5035  0002BA  F000               	nop	
  5036                           
  5037                           ;UI.c: 117: lcdInst(0b10000000);;
  5038  0002BC  0E80               	movlw	128
  5039  0002BE  ECD8  F015         	call	_lcdInst
  5040                           
  5041                           ;UI.c: 118: printf("Duration:");
  5042  0002C2  0EB3               	movlw	low STR_7
  5043  0002C4  0100               	movlb	0	; () banked
  5044  0002C6  6F8E               	movwf	printf@f& (0+255),b
  5045  0002C8  0EFF               	movlw	high STR_7
  5046  0002CA  0100               	movlb	0	; () banked
  5047  0002CC  6F8F               	movwf	(printf@f+1)& (0+255),b
  5048  0002CE  ECBB  F002         	call	_printf	;wreg free
  5049                           
  5050                           ;UI.c: 119: lcdInst(0b11000000);;
  5051  0002D2  0EC0               	movlw	192
  5052  0002D4  ECD8  F015         	call	_lcdInst
  5053                           
  5054                           ;UI.c: 120: printf("%d min(s) %d secs", 2, 42);
  5055  0002D8  0E0F               	movlw	low STR_8
  5056  0002DA  0100               	movlb	0	; () banked
  5057  0002DC  6F8E               	movwf	printf@f& (0+255),b
  5058  0002DE  0EFE               	movlw	high STR_8
  5059  0002E0  0100               	movlb	0	; () banked
  5060  0002E2  6F8F               	movwf	(printf@f+1)& (0+255),b
  5061  0002E4  0E00               	movlw	0
  5062  0002E6  0100               	movlb	0	; () banked
  5063  0002E8  6F91               	movwf	(?_printf+3)& (0+255),b
  5064  0002EA  0E02               	movlw	2
  5065  0002EC  6F90               	movwf	(?_printf+2)& (0+255),b
  5066  0002EE  0E00               	movlw	0
  5067  0002F0  0100               	movlb	0	; () banked
  5068  0002F2  6F93               	movwf	(?_printf+5)& (0+255),b
  5069  0002F4  0E2A               	movlw	42
  5070  0002F6  6F92               	movwf	(?_printf+4)& (0+255),b
  5071  0002F8  ECBB  F002         	call	_printf	;wreg free
  5072                           
  5073                           ;UI.c: 122: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  5074  0002FC  0E00               	movlw	0
  5075  0002FE  0100               	movlb	0	; () banked
  5076  000300  6FCC               	movwf	UI@i_590& (0+255),b
  5077  000302                     l5461:
  5078                           
  5079                           ; BSR set to: 0
  5080  000302  0E63               	movlw	99
  5081  000304  0100               	movlb	0	; () banked
  5082  000306  65CC               	cpfsgt	UI@i_590& (0+255),b
  5083  000308  D001               	goto	l5465
  5084  00030A  D00C               	goto	l5469
  5085  00030C                     l5465:
  5086                           
  5087                           ; BSR set to: 0
  5088  00030C  0E68               	movlw	104
  5089  00030E  0100               	movlb	0	; () banked
  5090  000310  6FC4               	movwf	??_UI& (0+255),b
  5091  000312  0EE4               	movlw	228
  5092  000314                     u5247:
  5093  000314  2EE8               	decfsz	wreg,f,c
  5094  000316  D7FE               	bra	u5247
  5095  000318  2FC4               	decfsz	??_UI& (0+255),f,b
  5096  00031A  D7FC               	bra	u5247
  5097  00031C  F000               	nop	
  5098  00031E  0100               	movlb	0	; () banked
  5099  000320  2BCC               	incf	UI@i_590& (0+255),f,b
  5100  000322  D7EF               	goto	l5461
  5101  000324                     l5469:
  5102                           
  5103                           ; BSR set to: 0
  5104  000324  0100               	movlb	0	; () banked
  5105  000326  51F3               	movf	_logstate& (0+255),w,b
  5106  000328  0100               	movlb	0	; () banked
  5107  00032A  11F4               	iorwf	(_logstate+1)& (0+255),w,b
  5108  00032C  B4D8               	btfsc	status,2,c
  5109  00032E  0012               	return	
  5110                           
  5111                           ; BSR set to: 0
  5112                           ;UI.c: 123: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  5113                           
  5114                           ; BSR set to: 0
  5115                           
  5116                           ; BSR set to: 0
  5117  000330  0E00               	movlw	0
  5118  000332  0100               	movlb	0	; () banked
  5119  000334  6FCD               	movwf	UI@i_591& (0+255),b
  5120  000336                     l5475:
  5121                           
  5122                           ; BSR set to: 0
  5123  000336  0E63               	movlw	99
  5124  000338  0100               	movlb	0	; () banked
  5125  00033A  65CD               	cpfsgt	UI@i_591& (0+255),b
  5126  00033C  D001               	goto	l5479
  5127  00033E  D00C               	goto	l5483
  5128  000340                     l5479:
  5129                           
  5130                           ; BSR set to: 0
  5131  000340  0E68               	movlw	104
  5132  000342  0100               	movlb	0	; () banked
  5133  000344  6FC4               	movwf	??_UI& (0+255),b
  5134  000346  0EE4               	movlw	228
  5135  000348                     u5257:
  5136  000348  2EE8               	decfsz	wreg,f,c
  5137  00034A  D7FE               	bra	u5257
  5138  00034C  2FC4               	decfsz	??_UI& (0+255),f,b
  5139  00034E  D7FC               	bra	u5257
  5140  000350  F000               	nop	
  5141  000352  0100               	movlb	0	; () banked
  5142  000354  2BCD               	incf	UI@i_591& (0+255),f,b
  5143  000356  D7EF               	goto	l5475
  5144  000358                     l5483:
  5145                           
  5146                           ; BSR set to: 0
  5147  000358  0100               	movlb	0	; () banked
  5148  00035A  51F3               	movf	_logstate& (0+255),w,b
  5149  00035C  0100               	movlb	0	; () banked
  5150  00035E  11F4               	iorwf	(_logstate+1)& (0+255),w,b
  5151  000360  B4D8               	btfsc	status,2,c
  5152  000362  0012               	return	
  5153                           
  5154                           ; BSR set to: 0
  5155                           ;UI.c: 125: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  5156                           
  5157                           ; BSR set to: 0
  5158                           
  5159                           ; BSR set to: 0
  5160  000364  0E01               	movlw	1
  5161  000366  ECD8  F015         	call	_lcdInst
  5162  00036A  0E68               	movlw	104
  5163  00036C  0100               	movlb	0	; () banked
  5164  00036E  6FC4               	movwf	??_UI& (0+255),b
  5165  000370  0EE4               	movlw	228
  5166  000372                     u5267:
  5167  000372  2EE8               	decfsz	wreg,f,c
  5168  000374  D7FE               	bra	u5267
  5169  000376  2FC4               	decfsz	??_UI& (0+255),f,b
  5170  000378  D7FC               	bra	u5267
  5171  00037A  F000               	nop	
  5172                           
  5173                           ;UI.c: 126: lcdInst(0b10000000);;
  5174  00037C  0E80               	movlw	128
  5175  00037E  ECD8  F015         	call	_lcdInst
  5176                           
  5177                           ;UI.c: 127: printf(" -- Pop  can -- ");
  5178  000382  0E98               	movlw	low STR_9
  5179  000384  0100               	movlb	0	; () banked
  5180  000386  6F8E               	movwf	printf@f& (0+255),b
  5181  000388  0EFE               	movlw	high STR_9
  5182  00038A  0100               	movlb	0	; () banked
  5183  00038C  6F8F               	movwf	(printf@f+1)& (0+255),b
  5184  00038E  ECBB  F002         	call	_printf	;wreg free
  5185                           
  5186                           ;UI.c: 128: lcdInst(0b11000000);;
  5187  000392  0EC0               	movlw	192
  5188  000394  ECD8  F015         	call	_lcdInst
  5189                           
  5190                           ;UI.c: 129: printf("No tab: 9|Tab: 1");
  5191  000398  0EDC               	movlw	low STR_10
  5192  00039A  0100               	movlb	0	; () banked
  5193  00039C  6F8E               	movwf	printf@f& (0+255),b
  5194  00039E  0EFE               	movlw	high STR_10
  5195  0003A0  0100               	movlb	0	; () banked
  5196  0003A2  6F8F               	movwf	(printf@f+1)& (0+255),b
  5197  0003A4  ECBB  F002         	call	_printf	;wreg free
  5198                           
  5199                           ;UI.c: 131: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  5200  0003A8  0E00               	movlw	0
  5201  0003AA  0100               	movlb	0	; () banked
  5202  0003AC  6FCE               	movwf	UI@i_594& (0+255),b
  5203  0003AE                     l5501:
  5204                           
  5205                           ; BSR set to: 0
  5206  0003AE  0E63               	movlw	99
  5207  0003B0  0100               	movlb	0	; () banked
  5208  0003B2  65CE               	cpfsgt	UI@i_594& (0+255),b
  5209  0003B4  D001               	goto	l5505
  5210  0003B6  D00C               	goto	l5509
  5211  0003B8                     l5505:
  5212                           
  5213                           ; BSR set to: 0
  5214  0003B8  0E68               	movlw	104
  5215  0003BA  0100               	movlb	0	; () banked
  5216  0003BC  6FC4               	movwf	??_UI& (0+255),b
  5217  0003BE  0EE4               	movlw	228
  5218  0003C0                     u5277:
  5219  0003C0  2EE8               	decfsz	wreg,f,c
  5220  0003C2  D7FE               	bra	u5277
  5221  0003C4  2FC4               	decfsz	??_UI& (0+255),f,b
  5222  0003C6  D7FC               	bra	u5277
  5223  0003C8  F000               	nop	
  5224  0003CA  0100               	movlb	0	; () banked
  5225  0003CC  2BCE               	incf	UI@i_594& (0+255),f,b
  5226  0003CE  D7EF               	goto	l5501
  5227  0003D0                     l5509:
  5228                           
  5229                           ; BSR set to: 0
  5230  0003D0  0100               	movlb	0	; () banked
  5231  0003D2  51F3               	movf	_logstate& (0+255),w,b
  5232  0003D4  0100               	movlb	0	; () banked
  5233  0003D6  11F4               	iorwf	(_logstate+1)& (0+255),w,b
  5234  0003D8  B4D8               	btfsc	status,2,c
  5235  0003DA  0012               	return	
  5236                           
  5237                           ; BSR set to: 0
  5238                           ;UI.c: 132: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  5239                           
  5240                           ; BSR set to: 0
  5241                           
  5242                           ; BSR set to: 0
  5243  0003DC  0E00               	movlw	0
  5244  0003DE  0100               	movlb	0	; () banked
  5245  0003E0  6FCF               	movwf	UI@i_595& (0+255),b
  5246  0003E2                     l5515:
  5247                           
  5248                           ; BSR set to: 0
  5249  0003E2  0E63               	movlw	99
  5250  0003E4  0100               	movlb	0	; () banked
  5251  0003E6  65CF               	cpfsgt	UI@i_595& (0+255),b
  5252  0003E8  D001               	goto	l5519
  5253  0003EA  D00C               	goto	l5523
  5254  0003EC                     l5519:
  5255                           
  5256                           ; BSR set to: 0
  5257  0003EC  0E68               	movlw	104
  5258  0003EE  0100               	movlb	0	; () banked
  5259  0003F0  6FC4               	movwf	??_UI& (0+255),b
  5260  0003F2  0EE4               	movlw	228
  5261  0003F4                     u5287:
  5262  0003F4  2EE8               	decfsz	wreg,f,c
  5263  0003F6  D7FE               	bra	u5287
  5264  0003F8  2FC4               	decfsz	??_UI& (0+255),f,b
  5265  0003FA  D7FC               	bra	u5287
  5266  0003FC  F000               	nop	
  5267  0003FE  0100               	movlb	0	; () banked
  5268  000400  2BCF               	incf	UI@i_595& (0+255),f,b
  5269  000402  D7EF               	goto	l5515
  5270  000404                     l5523:
  5271                           
  5272                           ; BSR set to: 0
  5273  000404  0100               	movlb	0	; () banked
  5274  000406  51F3               	movf	_logstate& (0+255),w,b
  5275  000408  0100               	movlb	0	; () banked
  5276  00040A  11F4               	iorwf	(_logstate+1)& (0+255),w,b
  5277  00040C  B4D8               	btfsc	status,2,c
  5278  00040E  0012               	return	
  5279                           
  5280                           ; BSR set to: 0
  5281                           ;UI.c: 134: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  5282                           
  5283                           ; BSR set to: 0
  5284                           
  5285                           ; BSR set to: 0
  5286  000410  0E01               	movlw	1
  5287  000412  ECD8  F015         	call	_lcdInst
  5288  000416  0E68               	movlw	104
  5289  000418  0100               	movlb	0	; () banked
  5290  00041A  6FC4               	movwf	??_UI& (0+255),b
  5291  00041C  0EE4               	movlw	228
  5292  00041E                     u5297:
  5293  00041E  2EE8               	decfsz	wreg,f,c
  5294  000420  D7FE               	bra	u5297
  5295  000422  2FC4               	decfsz	??_UI& (0+255),f,b
  5296  000424  D7FC               	bra	u5297
  5297  000426  F000               	nop	
  5298                           
  5299                           ;UI.c: 135: lcdInst(0b10000000);;
  5300  000428  0E80               	movlw	128
  5301  00042A  ECD8  F015         	call	_lcdInst
  5302                           
  5303                           ;UI.c: 136: printf(" -- Soup can -- ");
  5304  00042E  0EA9               	movlw	low STR_11
  5305  000430  0100               	movlb	0	; () banked
  5306  000432  6F8E               	movwf	printf@f& (0+255),b
  5307  000434  0EFE               	movlw	high STR_11
  5308  000436  0100               	movlb	0	; () banked
  5309  000438  6F8F               	movwf	(printf@f+1)& (0+255),b
  5310  00043A  ECBB  F002         	call	_printf	;wreg free
  5311                           
  5312                           ;UI.c: 137: lcdInst(0b11000000);;
  5313  00043E  0EC0               	movlw	192
  5314  000440  ECD8  F015         	call	_lcdInst
  5315                           
  5316                           ;UI.c: 138: printf("No lbl: 1|lbl: 1");
  5317  000444  0EED               	movlw	low STR_12
  5318  000446  0100               	movlb	0	; () banked
  5319  000448  6F8E               	movwf	printf@f& (0+255),b
  5320  00044A  0EFE               	movlw	high STR_12
  5321  00044C  0100               	movlb	0	; () banked
  5322  00044E  6F8F               	movwf	(printf@f+1)& (0+255),b
  5323  000450  ECBB  F002         	call	_printf	;wreg free
  5324                           
  5325                           ;UI.c: 140: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  5326  000454  0E00               	movlw	0
  5327  000456  0100               	movlb	0	; () banked
  5328  000458  6FD0               	movwf	UI@i_598& (0+255),b
  5329  00045A                     l5541:
  5330                           
  5331                           ; BSR set to: 0
  5332  00045A  0E63               	movlw	99
  5333  00045C  0100               	movlb	0	; () banked
  5334  00045E  65D0               	cpfsgt	UI@i_598& (0+255),b
  5335  000460  D001               	goto	l5545
  5336  000462  D00C               	goto	l5549
  5337  000464                     l5545:
  5338                           
  5339                           ; BSR set to: 0
  5340  000464  0E68               	movlw	104
  5341  000466  0100               	movlb	0	; () banked
  5342  000468  6FC4               	movwf	??_UI& (0+255),b
  5343  00046A  0EE4               	movlw	228
  5344  00046C                     u5307:
  5345  00046C  2EE8               	decfsz	wreg,f,c
  5346  00046E  D7FE               	bra	u5307
  5347  000470  2FC4               	decfsz	??_UI& (0+255),f,b
  5348  000472  D7FC               	bra	u5307
  5349  000474  F000               	nop	
  5350  000476  0100               	movlb	0	; () banked
  5351  000478  2BD0               	incf	UI@i_598& (0+255),f,b
  5352  00047A  D7EF               	goto	l5541
  5353  00047C                     l5549:
  5354                           
  5355                           ; BSR set to: 0
  5356  00047C  0100               	movlb	0	; () banked
  5357  00047E  51F3               	movf	_logstate& (0+255),w,b
  5358  000480  0100               	movlb	0	; () banked
  5359  000482  11F4               	iorwf	(_logstate+1)& (0+255),w,b
  5360  000484  B4D8               	btfsc	status,2,c
  5361  000486  0012               	return	
  5362                           
  5363                           ; BSR set to: 0
  5364                           ;UI.c: 141: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  5365                           
  5366                           ; BSR set to: 0
  5367                           
  5368                           ; BSR set to: 0
  5369  000488  0E00               	movlw	0
  5370  00048A  0100               	movlb	0	; () banked
  5371  00048C  6FD1               	movwf	UI@i_599& (0+255),b
  5372  00048E                     l5555:
  5373                           
  5374                           ; BSR set to: 0
  5375  00048E  0E63               	movlw	99
  5376  000490  0100               	movlb	0	; () banked
  5377  000492  65D1               	cpfsgt	UI@i_599& (0+255),b
  5378  000494  D001               	goto	l5559
  5379  000496  D00C               	goto	l5563
  5380  000498                     l5559:
  5381                           
  5382                           ; BSR set to: 0
  5383  000498  0E68               	movlw	104
  5384  00049A  0100               	movlb	0	; () banked
  5385  00049C  6FC4               	movwf	??_UI& (0+255),b
  5386  00049E  0EE4               	movlw	228
  5387  0004A0                     u5317:
  5388  0004A0  2EE8               	decfsz	wreg,f,c
  5389  0004A2  D7FE               	bra	u5317
  5390  0004A4  2FC4               	decfsz	??_UI& (0+255),f,b
  5391  0004A6  D7FC               	bra	u5317
  5392  0004A8  F000               	nop	
  5393  0004AA  0100               	movlb	0	; () banked
  5394  0004AC  2BD1               	incf	UI@i_599& (0+255),f,b
  5395  0004AE  D7EF               	goto	l5555
  5396  0004B0                     l5563:
  5397                           
  5398                           ; BSR set to: 0
  5399  0004B0  0100               	movlb	0	; () banked
  5400  0004B2  51F3               	movf	_logstate& (0+255),w,b
  5401  0004B4  0100               	movlb	0	; () banked
  5402  0004B6  11F4               	iorwf	(_logstate+1)& (0+255),w,b
  5403  0004B8  B4D8               	btfsc	status,2,c
  5404  0004BA  0012               	return	
  5405                           
  5406                           ; BSR set to: 0
  5407                           ;UI.c: 143: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  5408                           
  5409                           ; BSR set to: 0
  5410                           
  5411                           ; BSR set to: 0
  5412  0004BC  0E01               	movlw	1
  5413  0004BE  ECD8  F015         	call	_lcdInst
  5414  0004C2  0E68               	movlw	104
  5415  0004C4  0100               	movlb	0	; () banked
  5416  0004C6  6FC4               	movwf	??_UI& (0+255),b
  5417  0004C8  0EE4               	movlw	228
  5418  0004CA                     u5327:
  5419  0004CA  2EE8               	decfsz	wreg,f,c
  5420  0004CC  D7FE               	bra	u5327
  5421  0004CE  2FC4               	decfsz	??_UI& (0+255),f,b
  5422  0004D0  D7FC               	bra	u5327
  5423  0004D2  F000               	nop	
  5424                           
  5425                           ;UI.c: 144: lcdInst(0b10000000);;
  5426  0004D4  0E80               	movlw	128
  5427  0004D6  ECD8  F015         	call	_lcdInst
  5428                           
  5429                           ;UI.c: 145: printf("-- Total cans --");
  5430  0004DA  0ECB               	movlw	low STR_13
  5431  0004DC  0100               	movlb	0	; () banked
  5432  0004DE  6F8E               	movwf	printf@f& (0+255),b
  5433  0004E0  0EFE               	movlw	high STR_13
  5434  0004E2  0100               	movlb	0	; () banked
  5435  0004E4  6F8F               	movwf	(printf@f+1)& (0+255),b
  5436  0004E6  ECBB  F002         	call	_printf	;wreg free
  5437                           
  5438                           ;UI.c: 146: lcdInst(0b11000000);;
  5439  0004EA  0EC0               	movlw	192
  5440  0004EC  ECD8  F015         	call	_lcdInst
  5441                           
  5442                           ;UI.c: 147: printf("12");
  5443  0004F0  0EFB               	movlw	low STR_14
  5444  0004F2  0100               	movlb	0	; () banked
  5445  0004F4  6F8E               	movwf	printf@f& (0+255),b
  5446  0004F6  0EFF               	movlw	high STR_14
  5447  0004F8  0100               	movlb	0	; () banked
  5448  0004FA  6F8F               	movwf	(printf@f+1)& (0+255),b
  5449  0004FC  ECBB  F002         	call	_printf	;wreg free
  5450                           
  5451                           ;UI.c: 149: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  5452  000500  0E00               	movlw	0
  5453  000502  0100               	movlb	0	; () banked
  5454  000504  6FD2               	movwf	UI@i_602& (0+255),b
  5455  000506                     l5581:
  5456                           
  5457                           ; BSR set to: 0
  5458  000506  0E63               	movlw	99
  5459  000508  0100               	movlb	0	; () banked
  5460  00050A  65D2               	cpfsgt	UI@i_602& (0+255),b
  5461  00050C  D001               	goto	l5585
  5462  00050E  D00C               	goto	l5589
  5463  000510                     l5585:
  5464                           
  5465                           ; BSR set to: 0
  5466  000510  0E68               	movlw	104
  5467  000512  0100               	movlb	0	; () banked
  5468  000514  6FC4               	movwf	??_UI& (0+255),b
  5469  000516  0EE4               	movlw	228
  5470  000518                     u5337:
  5471  000518  2EE8               	decfsz	wreg,f,c
  5472  00051A  D7FE               	bra	u5337
  5473  00051C  2FC4               	decfsz	??_UI& (0+255),f,b
  5474  00051E  D7FC               	bra	u5337
  5475  000520  F000               	nop	
  5476  000522  0100               	movlb	0	; () banked
  5477  000524  2BD2               	incf	UI@i_602& (0+255),f,b
  5478  000526  D7EF               	goto	l5581
  5479  000528                     l5589:
  5480                           
  5481                           ; BSR set to: 0
  5482  000528  0100               	movlb	0	; () banked
  5483  00052A  51F3               	movf	_logstate& (0+255),w,b
  5484  00052C  0100               	movlb	0	; () banked
  5485  00052E  11F4               	iorwf	(_logstate+1)& (0+255),w,b
  5486  000530  B4D8               	btfsc	status,2,c
  5487  000532  0012               	return	
  5488                           
  5489                           ; BSR set to: 0
  5490                           ;UI.c: 150: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  5491                           
  5492                           ; BSR set to: 0
  5493                           
  5494                           ; BSR set to: 0
  5495  000534  0E00               	movlw	0
  5496  000536  0100               	movlb	0	; () banked
  5497  000538  6FD3               	movwf	UI@i_603& (0+255),b
  5498  00053A                     l5595:
  5499                           
  5500                           ; BSR set to: 0
  5501  00053A  0E63               	movlw	99
  5502  00053C  0100               	movlb	0	; () banked
  5503  00053E  65D3               	cpfsgt	UI@i_603& (0+255),b
  5504  000540  D001               	goto	l5599
  5505  000542  D00C               	goto	l5603
  5506  000544                     l5599:
  5507                           
  5508                           ; BSR set to: 0
  5509  000544  0E68               	movlw	104
  5510  000546  0100               	movlb	0	; () banked
  5511  000548  6FC4               	movwf	??_UI& (0+255),b
  5512  00054A  0EE4               	movlw	228
  5513  00054C                     u5347:
  5514  00054C  2EE8               	decfsz	wreg,f,c
  5515  00054E  D7FE               	bra	u5347
  5516  000550  2FC4               	decfsz	??_UI& (0+255),f,b
  5517  000552  D7FC               	bra	u5347
  5518  000554  F000               	nop	
  5519  000556  0100               	movlb	0	; () banked
  5520  000558  2BD3               	incf	UI@i_603& (0+255),f,b
  5521  00055A  D7EF               	goto	l5595
  5522  00055C                     l5603:
  5523                           
  5524                           ; BSR set to: 0
  5525  00055C  0100               	movlb	0	; () banked
  5526  00055E  51F3               	movf	_logstate& (0+255),w,b
  5527  000560  0100               	movlb	0	; () banked
  5528  000562  11F4               	iorwf	(_logstate+1)& (0+255),w,b
  5529  000564  B4D8               	btfsc	status,2,c
  5530  000566  0012               	return	
  5531  000568                     l5607:
  5532  000568  0100               	movlb	0	; () banked
  5533  00056A  51F3               	movf	_logstate& (0+255),w,b
  5534  00056C  0100               	movlb	0	; () banked
  5535  00056E  11F4               	iorwf	(_logstate+1)& (0+255),w,b
  5536  000570  B4D8               	btfsc	status,2,c
  5537  000572  0012               	return	
  5538  000574  D5E7               	goto	l5367
  5539  000576                     __end_of_UI:
  5540                           	opt stack 0
  5541                           tblptru	equ	0xFF8
  5542                           tblptrh	equ	0xFF7
  5543                           tblptrl	equ	0xFF6
  5544                           tablat	equ	0xFF5
  5545                           prodh	equ	0xFF4
  5546                           prodl	equ	0xFF3
  5547                           intcon	equ	0xFF2
  5548                           intcon2	equ	0xFF1
  5549                           intcon3	equ	0xFF0
  5550                           postinc0	equ	0xFEE
  5551                           wreg	equ	0xFE8
  5552                           postdec1	equ	0xFE5
  5553                           fsr1l	equ	0xFE1
  5554                           indf2	equ	0xFDF
  5555                           postinc2	equ	0xFDE
  5556                           postdec2	equ	0xFDD
  5557                           fsr2h	equ	0xFDA
  5558                           fsr2l	equ	0xFD9
  5559                           status	equ	0xFD8
  5560                           
  5561 ;; *************** function _printRTC *****************
  5562 ;; Defined at:
  5563 ;;		line 62 in file "RTC.c"
  5564 ;; Parameters:    Size  Location     Type
  5565 ;;		None
  5566 ;; Auto vars:     Size  Location     Type
  5567 ;;  i               2   66[BANK0 ] int 
  5568 ;;  INT_time       14   46[BANK0 ] int [7]
  5569 ;;  month           4   62[BANK0 ] unsigned char [4]
  5570 ;;  RTC_month       2   60[BANK0 ] int 
  5571 ;; Return value:  Size  Location     Type
  5572 ;;                  1    wreg      void 
  5573 ;; Registers used:
  5574 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5575 ;; Tracked objects:
  5576 ;;		On entry : 0/0
  5577 ;;		On exit  : 0/0
  5578 ;;		Unchanged: 0/0
  5579 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5580 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5581 ;;      Locals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5582 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5583 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5584 ;;Total ram usage:       25 bytes
  5585 ;; Hardware stack levels used:    1
  5586 ;; Hardware stack levels required when called:   10
  5587 ;; This function calls:
  5588 ;;		_getRTC
  5589 ;;		_lcdInst
  5590 ;;		_printf
  5591 ;;		_strcpy
  5592 ;; This function is called by:
  5593 ;;		_UI
  5594 ;;		_change_state_to_menu_start
  5595 ;; This function uses a non-reentrant model
  5596 ;;
  5597                           
  5598                           	psect	text21
  5599  000CC6                     __ptext21:
  5600                           	opt stack 0
  5601  000CC6                     _printRTC:
  5602                           	opt stack 18
  5603                           
  5604                           ;RTC.c: 63: getRTC();
  5605                           
  5606                           ; BSR set to: 0
  5607                           ;incstack = 0
  5608  000CC6  EC98  F010         	call	_getRTC	;wreg free
  5609                           
  5610                           ;RTC.c: 64: char month[] = "MMM";
  5611  000CCA  C10E  F0BE         	movff	printRTC@F3192,printRTC@month
  5612  000CCE  C10F  F0BF         	movff	printRTC@F3192+1,printRTC@month+1
  5613  000CD2  C110  F0C0         	movff	printRTC@F3192+2,printRTC@month+2
  5614  000CD6  C111  F0C1         	movff	printRTC@F3192+3,printRTC@month+3
  5615                           
  5616                           ;RTC.c: 65: int INT_time[7];
  5617                           ;RTC.c: 66: for(int i = 0; i < 7; i++){
  5618  000CDA  0E00               	movlw	0
  5619  000CDC  0100               	movlb	0	; () banked
  5620  000CDE  6FC3               	movwf	(printRTC@i+1)& (0+255),b
  5621  000CE0  0E00               	movlw	0
  5622  000CE2  6FC2               	movwf	printRTC@i& (0+255),b
  5623                           
  5624                           ; BSR set to: 0
  5625  000CE4  0100               	movlb	0	; () banked
  5626  000CE6  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
  5627  000CE8  D008               	goto	l4647
  5628  000CEA  0100               	movlb	0	; () banked
  5629  000CEC  51C3               	movf	(printRTC@i+1)& (0+255),w,b
  5630  000CEE  E146               	bnz	l967
  5631  000CF0  0E07               	movlw	7
  5632  000CF2  0100               	movlb	0	; () banked
  5633  000CF4  5DC2               	subwf	printRTC@i& (0+255),w,b
  5634  000CF6  B0D8               	btfsc	status,0,c
  5635  000CF8  D041               	goto	l967
  5636  000CFA                     l4647:
  5637                           
  5638                           ; BSR set to: 0
  5639                           ;RTC.c: 67: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  5640  000CFA  0EDC               	movlw	low _time
  5641  000CFC  0100               	movlb	0	; () banked
  5642  000CFE  25C2               	addwf	printRTC@i& (0+255),w,b
  5643  000D00  6ED9               	movwf	fsr2l,c
  5644  000D02  0E00               	movlw	high _time
  5645  000D04  0100               	movlb	0	; () banked
  5646  000D06  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
  5647  000D08  6EDA               	movwf	fsr2h,c
  5648  000D0A  50DF               	movf	indf2,w,c
  5649  000D0C  0100               	movlb	0	; () banked
  5650  000D0E  6FAB               	movwf	??_printRTC& (0+255),b
  5651  000D10  0100               	movlb	0	; () banked
  5652  000D12  3BAB               	swapf	??_printRTC& (0+255),f,b
  5653  000D14  0E0F               	movlw	15
  5654  000D16  17AB               	andwf	??_printRTC& (0+255),f,b
  5655  000D18  0E0F               	movlw	15
  5656  000D1A  0100               	movlb	0	; () banked
  5657  000D1C  17AB               	andwf	??_printRTC& (0+255),f,b
  5658  000D1E  0100               	movlb	0	; () banked
  5659  000D20  51AB               	movf	??_printRTC& (0+255),w,b
  5660  000D22  0D0A               	mullw	10
  5661  000D24  0EDC               	movlw	low _time
  5662  000D26  0100               	movlb	0	; () banked
  5663  000D28  25C2               	addwf	printRTC@i& (0+255),w,b
  5664  000D2A  6ED9               	movwf	fsr2l,c
  5665  000D2C  0E00               	movlw	high _time
  5666  000D2E  0100               	movlb	0	; () banked
  5667  000D30  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
  5668  000D32  6EDA               	movwf	fsr2h,c
  5669  000D34  50DF               	movf	indf2,w,c
  5670  000D36  0B0F               	andlw	15
  5671  000D38  0100               	movlb	0	; () banked
  5672  000D3A  6FAC               	movwf	(??_printRTC+1)& (0+255),b
  5673  000D3C  6BAD               	clrf	(??_printRTC+2)& (0+255),b
  5674  000D3E  50F3               	movf	prodl,w,c
  5675  000D40  0100               	movlb	0	; () banked
  5676  000D42  27AC               	addwf	(??_printRTC+1)& (0+255),f,b
  5677  000D44  50F4               	movf	prodh,w,c
  5678  000D46  0100               	movlb	0	; () banked
  5679  000D48  23AD               	addwfc	(??_printRTC+2)& (0+255),f,b
  5680  000D4A  90D8               	bcf	status,0,c
  5681  000D4C  0100               	movlb	0	; () banked
  5682  000D4E  35C2               	rlcf	printRTC@i& (0+255),w,b
  5683  000D50  6ED9               	movwf	fsr2l,c
  5684  000D52  0100               	movlb	0	; () banked
  5685  000D54  35C3               	rlcf	(printRTC@i+1)& (0+255),w,b
  5686  000D56  6EDA               	movwf	fsr2h,c
  5687  000D58  0EAE               	movlw	low printRTC@INT_time
  5688  000D5A  26D9               	addwf	fsr2l,f,c
  5689  000D5C  0E00               	movlw	high printRTC@INT_time
  5690  000D5E  22DA               	addwfc	fsr2h,f,c
  5691  000D60  C0AC  FFDE         	movff	??_printRTC+1,postinc2
  5692  000D64  C0AD  FFDD         	movff	??_printRTC+2,postdec2
  5693                           
  5694                           ; BSR set to: 0
  5695  000D68  0100               	movlb	0	; () banked
  5696  000D6A  4BC2               	infsnz	printRTC@i& (0+255),f,b
  5697  000D6C  2BC3               	incf	(printRTC@i+1)& (0+255),f,b
  5698                           
  5699                           ; BSR set to: 0
  5700  000D6E  0100               	movlb	0	; () banked
  5701  000D70  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
  5702  000D72  D7C3               	goto	l4647
  5703  000D74  0100               	movlb	0	; () banked
  5704  000D76  51C3               	movf	(printRTC@i+1)& (0+255),w,b
  5705  000D78  E101               	bnz	u3410
  5706  000D7A  D7BA               	goto	L1
  5707  000D7C                     u3410:
  5708  000D7C                     l967:
  5709                           
  5710                           ; BSR set to: 0
  5711                           ;RTC.c: 68: }
  5712                           ;RTC.c: 69: int RTC_month = INT_time[5];
  5713  000D7C  C0B8  F0BC         	movff	printRTC@INT_time+10,printRTC@RTC_month
  5714  000D80  C0B9  F0BD         	movff	printRTC@INT_time+11,printRTC@RTC_month+1
  5715                           
  5716                           ;RTC.c: 70: switch(RTC_month){
  5717  000D84  D0B4               	goto	l4679
  5718  000D86                     l4653:
  5719                           
  5720                           ; BSR set to: 0
  5721                           ;RTC.c: 72: strcpy(month, "Jan");
  5722  000D86  0EBE               	movlw	low printRTC@month
  5723  000D88  0100               	movlb	0	; () banked
  5724  000D8A  6F80               	movwf	strcpy@to& (0+255),b
  5725  000D8C  0E00               	movlw	high printRTC@month
  5726  000D8E  0100               	movlb	0	; () banked
  5727  000D90  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5728  000D92  0EDB               	movlw	low STR_36
  5729  000D94  0100               	movlb	0	; () banked
  5730  000D96  6F82               	movwf	strcpy@from& (0+255),b
  5731  000D98  0EFF               	movlw	high STR_36
  5732  000D9A  0100               	movlb	0	; () banked
  5733  000D9C  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5734  000D9E  EC81  F013         	call	_strcpy	;wreg free
  5735                           
  5736                           ;RTC.c: 73: break;
  5737  000DA2  D0D4               	goto	l4681
  5738  000DA4                     l4655:
  5739                           
  5740                           ;RTC.c: 75: strcpy(month, "Feb");
  5741  000DA4  0EBE               	movlw	low printRTC@month
  5742  000DA6  0100               	movlb	0	; () banked
  5743  000DA8  6F80               	movwf	strcpy@to& (0+255),b
  5744  000DAA  0E00               	movlw	high printRTC@month
  5745  000DAC  0100               	movlb	0	; () banked
  5746  000DAE  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5747  000DB0  0ECB               	movlw	low STR_37
  5748  000DB2  0100               	movlb	0	; () banked
  5749  000DB4  6F82               	movwf	strcpy@from& (0+255),b
  5750  000DB6  0EFF               	movlw	high STR_37
  5751  000DB8  0100               	movlb	0	; () banked
  5752  000DBA  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5753  000DBC  EC81  F013         	call	_strcpy	;wreg free
  5754                           
  5755                           ;RTC.c: 76: break;
  5756  000DC0  D0C5               	goto	l4681
  5757  000DC2                     l4657:
  5758                           
  5759                           ;RTC.c: 78: strcpy(month, "Mar");
  5760  000DC2  0EBE               	movlw	low printRTC@month
  5761  000DC4  0100               	movlb	0	; () banked
  5762  000DC6  6F80               	movwf	strcpy@to& (0+255),b
  5763  000DC8  0E00               	movlw	high printRTC@month
  5764  000DCA  0100               	movlb	0	; () banked
  5765  000DCC  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5766  000DCE  0EE7               	movlw	low STR_38
  5767  000DD0  0100               	movlb	0	; () banked
  5768  000DD2  6F82               	movwf	strcpy@from& (0+255),b
  5769  000DD4  0EFF               	movlw	high STR_38
  5770  000DD6  0100               	movlb	0	; () banked
  5771  000DD8  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5772  000DDA  EC81  F013         	call	_strcpy	;wreg free
  5773                           
  5774                           ;RTC.c: 79: break;
  5775  000DDE  D0B6               	goto	l4681
  5776  000DE0                     l4659:
  5777                           
  5778                           ;RTC.c: 81: strcpy(month, "Apr");
  5779  000DE0  0EBE               	movlw	low printRTC@month
  5780  000DE2  0100               	movlb	0	; () banked
  5781  000DE4  6F80               	movwf	strcpy@to& (0+255),b
  5782  000DE6  0E00               	movlw	high printRTC@month
  5783  000DE8  0100               	movlb	0	; () banked
  5784  000DEA  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5785  000DEC  0EEB               	movlw	low STR_39
  5786  000DEE  0100               	movlb	0	; () banked
  5787  000DF0  6F82               	movwf	strcpy@from& (0+255),b
  5788  000DF2  0EFF               	movlw	high STR_39
  5789  000DF4  0100               	movlb	0	; () banked
  5790  000DF6  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5791  000DF8  EC81  F013         	call	_strcpy	;wreg free
  5792                           
  5793                           ;RTC.c: 82: break;
  5794  000DFC  D0A7               	goto	l4681
  5795  000DFE                     l4661:
  5796                           
  5797                           ;RTC.c: 84: strcpy(month, "May");
  5798  000DFE  0EBE               	movlw	low printRTC@month
  5799  000E00  0100               	movlb	0	; () banked
  5800  000E02  6F80               	movwf	strcpy@to& (0+255),b
  5801  000E04  0E00               	movlw	high printRTC@month
  5802  000E06  0100               	movlb	0	; () banked
  5803  000E08  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5804  000E0A  0EF7               	movlw	low STR_40
  5805  000E0C  0100               	movlb	0	; () banked
  5806  000E0E  6F82               	movwf	strcpy@from& (0+255),b
  5807  000E10  0EFF               	movlw	high STR_40
  5808  000E12  0100               	movlb	0	; () banked
  5809  000E14  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5810  000E16  EC81  F013         	call	_strcpy	;wreg free
  5811                           
  5812                           ;RTC.c: 85: break;
  5813  000E1A  D098               	goto	l4681
  5814  000E1C                     l4663:
  5815                           
  5816                           ;RTC.c: 87: strcpy(month, "Jun");
  5817  000E1C  0EBE               	movlw	low printRTC@month
  5818  000E1E  0100               	movlb	0	; () banked
  5819  000E20  6F80               	movwf	strcpy@to& (0+255),b
  5820  000E22  0E00               	movlw	high printRTC@month
  5821  000E24  0100               	movlb	0	; () banked
  5822  000E26  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5823  000E28  0EDF               	movlw	low STR_41
  5824  000E2A  0100               	movlb	0	; () banked
  5825  000E2C  6F82               	movwf	strcpy@from& (0+255),b
  5826  000E2E  0EFF               	movlw	high STR_41
  5827  000E30  0100               	movlb	0	; () banked
  5828  000E32  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5829  000E34  EC81  F013         	call	_strcpy	;wreg free
  5830                           
  5831                           ;RTC.c: 88: break;
  5832  000E38  D089               	goto	l4681
  5833  000E3A                     l4665:
  5834                           
  5835                           ;RTC.c: 90: strcpy(month, "Jul");
  5836  000E3A  0EBE               	movlw	low printRTC@month
  5837  000E3C  0100               	movlb	0	; () banked
  5838  000E3E  6F80               	movwf	strcpy@to& (0+255),b
  5839  000E40  0E00               	movlw	high printRTC@month
  5840  000E42  0100               	movlb	0	; () banked
  5841  000E44  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5842  000E46  0ED7               	movlw	low STR_42
  5843  000E48  0100               	movlb	0	; () banked
  5844  000E4A  6F82               	movwf	strcpy@from& (0+255),b
  5845  000E4C  0EFF               	movlw	high STR_42
  5846  000E4E  0100               	movlb	0	; () banked
  5847  000E50  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5848  000E52  EC81  F013         	call	_strcpy	;wreg free
  5849                           
  5850                           ;RTC.c: 91: break;
  5851  000E56  D07A               	goto	l4681
  5852  000E58                     l4667:
  5853                           
  5854                           ;RTC.c: 93: strcpy(month, "Aug");
  5855  000E58  0EBE               	movlw	low printRTC@month
  5856  000E5A  0100               	movlb	0	; () banked
  5857  000E5C  6F80               	movwf	strcpy@to& (0+255),b
  5858  000E5E  0E00               	movlw	high printRTC@month
  5859  000E60  0100               	movlb	0	; () banked
  5860  000E62  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5861  000E64  0ED3               	movlw	low STR_43
  5862  000E66  0100               	movlb	0	; () banked
  5863  000E68  6F82               	movwf	strcpy@from& (0+255),b
  5864  000E6A  0EFF               	movlw	high STR_43
  5865  000E6C  0100               	movlb	0	; () banked
  5866  000E6E  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5867  000E70  EC81  F013         	call	_strcpy	;wreg free
  5868                           
  5869                           ;RTC.c: 94: break;
  5870  000E74  D06B               	goto	l4681
  5871  000E76                     l4669:
  5872                           
  5873                           ;RTC.c: 96: strcpy(month, "Sep");
  5874  000E76  0EBE               	movlw	low printRTC@month
  5875  000E78  0100               	movlb	0	; () banked
  5876  000E7A  6F80               	movwf	strcpy@to& (0+255),b
  5877  000E7C  0E00               	movlw	high printRTC@month
  5878  000E7E  0100               	movlb	0	; () banked
  5879  000E80  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5880  000E82  0EE3               	movlw	low STR_44
  5881  000E84  0100               	movlb	0	; () banked
  5882  000E86  6F82               	movwf	strcpy@from& (0+255),b
  5883  000E88  0EFF               	movlw	high STR_44
  5884  000E8A  0100               	movlb	0	; () banked
  5885  000E8C  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5886  000E8E  EC81  F013         	call	_strcpy	;wreg free
  5887                           
  5888                           ;RTC.c: 97: break;
  5889  000E92  D05C               	goto	l4681
  5890  000E94                     l4671:
  5891                           
  5892                           ;RTC.c: 99: strcpy(month, "Oct");
  5893  000E94  0EBE               	movlw	low printRTC@month
  5894  000E96  0100               	movlb	0	; () banked
  5895  000E98  6F80               	movwf	strcpy@to& (0+255),b
  5896  000E9A  0E00               	movlw	high printRTC@month
  5897  000E9C  0100               	movlb	0	; () banked
  5898  000E9E  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5899  000EA0  0EEF               	movlw	low STR_45
  5900  000EA2  0100               	movlb	0	; () banked
  5901  000EA4  6F82               	movwf	strcpy@from& (0+255),b
  5902  000EA6  0EFF               	movlw	high STR_45
  5903  000EA8  0100               	movlb	0	; () banked
  5904  000EAA  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5905  000EAC  EC81  F013         	call	_strcpy	;wreg free
  5906                           
  5907                           ;RTC.c: 100: break;
  5908  000EB0  D04D               	goto	l4681
  5909  000EB2                     l4673:
  5910                           
  5911                           ;RTC.c: 102: strcpy(month, "Nov");
  5912  000EB2  0EBE               	movlw	low printRTC@month
  5913  000EB4  0100               	movlb	0	; () banked
  5914  000EB6  6F80               	movwf	strcpy@to& (0+255),b
  5915  000EB8  0E00               	movlw	high printRTC@month
  5916  000EBA  0100               	movlb	0	; () banked
  5917  000EBC  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5918  000EBE  0EF3               	movlw	low STR_46
  5919  000EC0  0100               	movlb	0	; () banked
  5920  000EC2  6F82               	movwf	strcpy@from& (0+255),b
  5921  000EC4  0EFF               	movlw	high STR_46
  5922  000EC6  0100               	movlb	0	; () banked
  5923  000EC8  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5924  000ECA  EC81  F013         	call	_strcpy	;wreg free
  5925                           
  5926                           ;RTC.c: 103: break;
  5927  000ECE  D03E               	goto	l4681
  5928  000ED0                     l4675:
  5929                           
  5930                           ;RTC.c: 105: strcpy(month, "Dec");
  5931  000ED0  0EBE               	movlw	low printRTC@month
  5932  000ED2  0100               	movlb	0	; () banked
  5933  000ED4  6F80               	movwf	strcpy@to& (0+255),b
  5934  000ED6  0E00               	movlw	high printRTC@month
  5935  000ED8  0100               	movlb	0	; () banked
  5936  000EDA  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5937  000EDC  0ECF               	movlw	low STR_47
  5938  000EDE  0100               	movlb	0	; () banked
  5939  000EE0  6F82               	movwf	strcpy@from& (0+255),b
  5940  000EE2  0EFF               	movlw	high STR_47
  5941  000EE4  0100               	movlb	0	; () banked
  5942  000EE6  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5943  000EE8  EC81  F013         	call	_strcpy	;wreg free
  5944                           
  5945                           ;RTC.c: 107: }
  5946                           
  5947                           ;RTC.c: 106: break;
  5948  000EEC  D02F               	goto	l4681
  5949  000EEE                     l4679:
  5950  000EEE  C0BC  F0AB         	movff	printRTC@RTC_month,??_printRTC
  5951  000EF2  C0BD  F0AC         	movff	printRTC@RTC_month+1,??_printRTC+1
  5952                           
  5953                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5954                           ; Switch size 1, requested type "space"
  5955                           ; Number of cases is 1, Range of values is 0 to 0
  5956                           ; switch strategies available:
  5957                           ; Name         Instructions Cycles
  5958                           ; simple_byte            4     3 (average)
  5959                           ;	Chosen strategy is simple_byte
  5960  000EF6  0100               	movlb	0	; () banked
  5961  000EF8  51AC               	movf	(??_printRTC+1)& (0+255),w,b
  5962  000EFA  0A00               	xorlw	0	; case 0
  5963  000EFC  A4D8               	btfss	status,2,c
  5964  000EFE  D026               	goto	l4681
  5965                           
  5966                           ; BSR set to: 0
  5967                           ; Switch size 1, requested type "space"
  5968                           ; Number of cases is 12, Range of values is 1 to 12
  5969                           ; switch strategies available:
  5970                           ; Name         Instructions Cycles
  5971                           ; simple_byte           37    19 (average)
  5972                           ;	Chosen strategy is simple_byte
  5973  000F00  0100               	movlb	0	; () banked
  5974  000F02  51AB               	movf	??_printRTC& (0+255),w,b
  5975  000F04  0A01               	xorlw	1	; case 1
  5976  000F06  B4D8               	btfsc	status,2,c
  5977  000F08  D73E               	goto	l4653
  5978  000F0A  0A03               	xorlw	3	; case 2
  5979  000F0C  B4D8               	btfsc	status,2,c
  5980  000F0E  D74A               	goto	l4655
  5981  000F10  0A01               	xorlw	1	; case 3
  5982  000F12  B4D8               	btfsc	status,2,c
  5983  000F14  D756               	goto	l4657
  5984  000F16  0A07               	xorlw	7	; case 4
  5985  000F18  B4D8               	btfsc	status,2,c
  5986  000F1A  D762               	goto	l4659
  5987  000F1C  0A01               	xorlw	1	; case 5
  5988  000F1E  B4D8               	btfsc	status,2,c
  5989  000F20  D76E               	goto	l4661
  5990  000F22  0A03               	xorlw	3	; case 6
  5991  000F24  B4D8               	btfsc	status,2,c
  5992  000F26  D77A               	goto	l4663
  5993  000F28  0A01               	xorlw	1	; case 7
  5994  000F2A  B4D8               	btfsc	status,2,c
  5995  000F2C  D786               	goto	l4665
  5996  000F2E  0A0F               	xorlw	15	; case 8
  5997  000F30  B4D8               	btfsc	status,2,c
  5998  000F32  D792               	goto	l4667
  5999  000F34  0A01               	xorlw	1	; case 9
  6000  000F36  B4D8               	btfsc	status,2,c
  6001  000F38  D79E               	goto	l4669
  6002  000F3A  0A03               	xorlw	3	; case 10
  6003  000F3C  B4D8               	btfsc	status,2,c
  6004  000F3E  D7AA               	goto	l4671
  6005  000F40  0A01               	xorlw	1	; case 11
  6006  000F42  B4D8               	btfsc	status,2,c
  6007  000F44  D7B6               	goto	l4673
  6008  000F46  0A07               	xorlw	7	; case 12
  6009  000F48  B4D8               	btfsc	status,2,c
  6010  000F4A  D7C2               	goto	l4675
  6011  000F4C                     l4681:
  6012                           
  6013                           ;RTC.c: 108: lcdInst(0b10000000);;
  6014  000F4C  0E80               	movlw	128
  6015  000F4E  ECD8  F015         	call	_lcdInst
  6016                           
  6017                           ;RTC.c: 109: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
  6018  000F52  0ED0               	movlw	low STR_48
  6019  000F54  0100               	movlb	0	; () banked
  6020  000F56  6F8E               	movwf	printf@f& (0+255),b
  6021  000F58  0EFD               	movlw	high STR_48
  6022  000F5A  0100               	movlb	0	; () banked
  6023  000F5C  6F8F               	movwf	(printf@f+1)& (0+255),b
  6024  000F5E  C0B6  F090         	movff	printRTC@INT_time+8,?_printf+2
  6025  000F62  C0B7  F091         	movff	printRTC@INT_time+9,?_printf+3
  6026  000F66  0EBE               	movlw	low printRTC@month
  6027  000F68  0100               	movlb	0	; () banked
  6028  000F6A  6F92               	movwf	(?_printf+4)& (0+255),b
  6029  000F6C  0E00               	movlw	high printRTC@month
  6030  000F6E  0100               	movlb	0	; () banked
  6031  000F70  6F93               	movwf	(?_printf+5)& (0+255),b
  6032  000F72  C0B2  F094         	movff	printRTC@INT_time+4,?_printf+6
  6033  000F76  C0B3  F095         	movff	printRTC@INT_time+5,?_printf+7
  6034  000F7A  C0B0  F096         	movff	printRTC@INT_time+2,?_printf+8
  6035  000F7E  C0B1  F097         	movff	printRTC@INT_time+3,?_printf+9
  6036  000F82  C0AE  F098         	movff	printRTC@INT_time,?_printf+10
  6037  000F86  C0AF  F099         	movff	printRTC@INT_time+1,?_printf+11
  6038  000F8A  ECBB  F002         	call	_printf	;wreg free
  6039  000F8E  0012               	return		;funcret
  6040  000F90                     __end_of_printRTC:
  6041                           	opt stack 0
  6042                           tblptru	equ	0xFF8
  6043                           tblptrh	equ	0xFF7
  6044                           tblptrl	equ	0xFF6
  6045                           tablat	equ	0xFF5
  6046                           prodh	equ	0xFF4
  6047                           prodl	equ	0xFF3
  6048                           intcon	equ	0xFF2
  6049                           intcon2	equ	0xFF1
  6050                           intcon3	equ	0xFF0
  6051                           postinc0	equ	0xFEE
  6052                           wreg	equ	0xFE8
  6053                           postdec1	equ	0xFE5
  6054                           fsr1l	equ	0xFE1
  6055                           indf2	equ	0xFDF
  6056                           postinc2	equ	0xFDE
  6057                           postdec2	equ	0xFDD
  6058                           fsr2h	equ	0xFDA
  6059                           fsr2l	equ	0xFD9
  6060                           status	equ	0xFD8
  6061                           
  6062 ;; *************** function _strcpy *****************
  6063 ;; Defined at:
  6064 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
  6065 ;; Parameters:    Size  Location     Type
  6066 ;;  to              2    0[BANK0 ] PTR unsigned char 
  6067 ;;		 -> printRTC@month(4), 
  6068 ;;  from            2    2[BANK0 ] PTR const unsigned char 
  6069 ;;		 -> STR_47(4), STR_46(4), STR_45(4), STR_44(4), 
  6070 ;;		 -> STR_43(4), STR_42(4), STR_41(4), STR_40(4), 
  6071 ;;		 -> STR_39(4), STR_38(4), STR_37(4), STR_36(4), 
  6072 ;; Auto vars:     Size  Location     Type
  6073 ;;  cp              2    4[BANK0 ] PTR unsigned char 
  6074 ;;		 -> printRTC@month(4), 
  6075 ;; Return value:  Size  Location     Type
  6076 ;;                  2    0[BANK0 ] PTR unsigned char 
  6077 ;; Registers used:
  6078 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  6079 ;; Tracked objects:
  6080 ;;		On entry : 0/0
  6081 ;;		On exit  : 0/0
  6082 ;;		Unchanged: 0/0
  6083 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6084 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6085 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6086 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6087 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6088 ;;Total ram usage:        6 bytes
  6089 ;; Hardware stack levels used:    1
  6090 ;; Hardware stack levels required when called:    7
  6091 ;; This function calls:
  6092 ;;		Nothing
  6093 ;; This function is called by:
  6094 ;;		_printRTC
  6095 ;; This function uses a non-reentrant model
  6096 ;;
  6097                           
  6098                           	psect	text22
  6099  002702                     __ptext22:
  6100                           	opt stack 0
  6101  002702                     _strcpy:
  6102                           	opt stack 20
  6103                           
  6104                           ;incstack = 0
  6105  002702  C080  F084         	movff	strcpy@to,strcpy@cp
  6106  002706  C081  F085         	movff	strcpy@to+1,strcpy@cp+1
  6107  00270A  D006               	goto	l4435
  6108  00270C                     l4433:
  6109  00270C  0100               	movlb	0	; () banked
  6110  00270E  4B84               	infsnz	strcpy@cp& (0+255),f,b
  6111  002710  2B85               	incf	(strcpy@cp+1)& (0+255),f,b
  6112  002712  0100               	movlb	0	; () banked
  6113  002714  4B82               	infsnz	strcpy@from& (0+255),f,b
  6114  002716  2B83               	incf	(strcpy@from+1)& (0+255),f,b
  6115  002718                     l4435:
  6116  002718  C082  FFF6         	movff	strcpy@from,tblptrl
  6117  00271C  C083  FFF7         	movff	strcpy@from+1,tblptrh
  6118  002720                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  6119  002720  6AF8               	clrf	tblptru,c
  6120  002722                     	endif
  6121  002722                     	if	0	;tblptru may be non-zero
  6122  002722                     	endif
  6123  002722  C084  FFD9         	movff	strcpy@cp,fsr2l
  6124  002726  C085  FFDA         	movff	strcpy@cp+1,fsr2h
  6125  00272A  0008               	tblrd		*
  6126  00272C  CFF5 FFDF          	movff	tablat,indf2
  6127  002730  50DF               	movf	indf2,w,c
  6128  002732  B4D8               	btfsc	status,2,c
  6129  002734  0012               	return	
  6130  002736  D7EA               	goto	l4433
  6131  002738                     __end_of_strcpy:
  6132                           	opt stack 0
  6133                           tblptru	equ	0xFF8
  6134                           tblptrh	equ	0xFF7
  6135                           tblptrl	equ	0xFF6
  6136                           tablat	equ	0xFF5
  6137                           prodh	equ	0xFF4
  6138                           prodl	equ	0xFF3
  6139                           intcon	equ	0xFF2
  6140                           intcon2	equ	0xFF1
  6141                           intcon3	equ	0xFF0
  6142                           postinc0	equ	0xFEE
  6143                           wreg	equ	0xFE8
  6144                           postdec1	equ	0xFE5
  6145                           fsr1l	equ	0xFE1
  6146                           indf2	equ	0xFDF
  6147                           postinc2	equ	0xFDE
  6148                           postdec2	equ	0xFDD
  6149                           fsr2h	equ	0xFDA
  6150                           fsr2l	equ	0xFD9
  6151                           status	equ	0xFD8
  6152                           
  6153 ;; *************** function _getRTC *****************
  6154 ;; Defined at:
  6155 ;;		line 43 in file "RTC.c"
  6156 ;; Parameters:    Size  Location     Type
  6157 ;;		None
  6158 ;; Auto vars:     Size  Location     Type
  6159 ;;  i               2    3[BANK0 ] int 
  6160 ;; Return value:  Size  Location     Type
  6161 ;;                  1    wreg      void 
  6162 ;; Registers used:
  6163 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6164 ;; Tracked objects:
  6165 ;;		On entry : 0/0
  6166 ;;		On exit  : 0/0
  6167 ;;		Unchanged: 0/0
  6168 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6169 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6170 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6171 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6172 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6173 ;;Total ram usage:        2 bytes
  6174 ;; Hardware stack levels used:    1
  6175 ;; Hardware stack levels required when called:    9
  6176 ;; This function calls:
  6177 ;;		_I2C_Master_Read
  6178 ;;		_I2C_Master_Start
  6179 ;;		_I2C_Master_Stop
  6180 ;;		_I2C_Master_Write
  6181 ;; This function is called by:
  6182 ;;		_printRTC
  6183 ;;		_initSortTimer
  6184 ;; This function uses a non-reentrant model
  6185 ;;
  6186                           
  6187                           	psect	text23
  6188  002130                     __ptext23:
  6189                           	opt stack 0
  6190  002130                     _getRTC:
  6191                           	opt stack 18
  6192                           
  6193                           ;RTC.c: 47: I2C_Master_Start();
  6194                           
  6195                           ;incstack = 0
  6196  002130  ECFA  F015         	call	_I2C_Master_Start	;wreg free
  6197                           
  6198                           ;RTC.c: 48: I2C_Master_Write(0b11010000);
  6199  002134  0E00               	movlw	0
  6200  002136  0100               	movlb	0	; () banked
  6201  002138  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  6202  00213A  0ED0               	movlw	208
  6203  00213C  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  6204  00213E  ECEC  F015         	call	_I2C_Master_Write	;wreg free
  6205                           
  6206                           ;RTC.c: 49: I2C_Master_Write(0x00);
  6207  002142  0E00               	movlw	0
  6208  002144  0100               	movlb	0	; () banked
  6209  002146  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  6210  002148  0E00               	movlw	0
  6211  00214A  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  6212  00214C  ECEC  F015         	call	_I2C_Master_Write	;wreg free
  6213                           
  6214                           ;RTC.c: 50: I2C_Master_Stop();
  6215  002150  ECF6  F015         	call	_I2C_Master_Stop	;wreg free
  6216                           
  6217                           ;RTC.c: 53: I2C_Master_Start();
  6218  002154  ECFA  F015         	call	_I2C_Master_Start	;wreg free
  6219                           
  6220                           ;RTC.c: 54: I2C_Master_Write(0b11010001);
  6221  002158  0E00               	movlw	0
  6222  00215A  0100               	movlb	0	; () banked
  6223  00215C  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  6224  00215E  0ED1               	movlw	209
  6225  002160  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  6226  002162  ECEC  F015         	call	_I2C_Master_Write	;wreg free
  6227                           
  6228                           ;RTC.c: 55: for(int i = 0; i < 6; i++){
  6229  002166  0E00               	movlw	0
  6230  002168  0100               	movlb	0	; () banked
  6231  00216A  6F84               	movwf	(getRTC@i+1)& (0+255),b
  6232  00216C  0E00               	movlw	0
  6233  00216E  6F83               	movwf	getRTC@i& (0+255),b
  6234  002170                     l4419:
  6235                           
  6236                           ; BSR set to: 0
  6237  002170  0100               	movlb	0	; () banked
  6238  002172  BF84               	btfsc	(getRTC@i+1)& (0+255),7,b
  6239  002174  D008               	goto	l4423
  6240  002176  0100               	movlb	0	; () banked
  6241  002178  5184               	movf	(getRTC@i+1)& (0+255),w,b
  6242  00217A  E115               	bnz	l4429
  6243  00217C  0E06               	movlw	6
  6244  00217E  0100               	movlb	0	; () banked
  6245  002180  5D83               	subwf	getRTC@i& (0+255),w,b
  6246  002182  B0D8               	btfsc	status,0,c
  6247  002184  D010               	goto	l4429
  6248  002186                     l4423:
  6249                           
  6250                           ; BSR set to: 0
  6251                           ;RTC.c: 56: time[i] = I2C_Master_Read(1);
  6252  002186  0EDC               	movlw	low _time
  6253  002188  0100               	movlb	0	; () banked
  6254  00218A  2583               	addwf	getRTC@i& (0+255),w,b
  6255  00218C  6ED9               	movwf	fsr2l,c
  6256  00218E  0E00               	movlw	high _time
  6257  002190  0100               	movlb	0	; () banked
  6258  002192  2184               	addwfc	(getRTC@i+1)& (0+255),w,b
  6259  002194  6EDA               	movwf	fsr2h,c
  6260  002196  0E01               	movlw	1
  6261  002198  ECA8  F014         	call	_I2C_Master_Read
  6262  00219C  6EDF               	movwf	indf2,c
  6263  00219E  0100               	movlb	0	; () banked
  6264  0021A0  4B83               	infsnz	getRTC@i& (0+255),f,b
  6265  0021A2  2B84               	incf	(getRTC@i+1)& (0+255),f,b
  6266  0021A4  D7E5               	goto	l4419
  6267  0021A6                     l4429:
  6268                           
  6269                           ; BSR set to: 0
  6270                           ;RTC.c: 57: }
  6271                           ;RTC.c: 58: time[6] = I2C_Master_Read(0);
  6272  0021A6  0E00               	movlw	0
  6273  0021A8  ECA8  F014         	call	_I2C_Master_Read
  6274  0021AC  0100               	movlb	0	; () banked
  6275  0021AE  6FE2               	movwf	(_time+6)& (0+255),b
  6276                           
  6277                           ;RTC.c: 59: I2C_Master_Stop();
  6278  0021B0  ECF6  F015         	call	_I2C_Master_Stop	;wreg free
  6279  0021B4  0012               	return		;funcret
  6280  0021B6                     __end_of_getRTC:
  6281                           	opt stack 0
  6282                           tblptru	equ	0xFF8
  6283                           tblptrh	equ	0xFF7
  6284                           tblptrl	equ	0xFF6
  6285                           tablat	equ	0xFF5
  6286                           prodh	equ	0xFF4
  6287                           prodl	equ	0xFF3
  6288                           intcon	equ	0xFF2
  6289                           intcon2	equ	0xFF1
  6290                           intcon3	equ	0xFF0
  6291                           postinc0	equ	0xFEE
  6292                           wreg	equ	0xFE8
  6293                           postdec1	equ	0xFE5
  6294                           fsr1l	equ	0xFE1
  6295                           indf2	equ	0xFDF
  6296                           postinc2	equ	0xFDE
  6297                           postdec2	equ	0xFDD
  6298                           fsr2h	equ	0xFDA
  6299                           fsr2l	equ	0xFD9
  6300                           status	equ	0xFD8
  6301                           
  6302 ;; *************** function _I2C_Master_Write *****************
  6303 ;; Defined at:
  6304 ;;		line 48 in file "I2C.c"
  6305 ;; Parameters:    Size  Location     Type
  6306 ;;  d               2    1[BANK0 ] unsigned int 
  6307 ;; Auto vars:     Size  Location     Type
  6308 ;;		None
  6309 ;; Return value:  Size  Location     Type
  6310 ;;                  1    wreg      void 
  6311 ;; Registers used:
  6312 ;;		wreg, status,2, status,0, cstack
  6313 ;; Tracked objects:
  6314 ;;		On entry : 0/0
  6315 ;;		On exit  : 0/0
  6316 ;;		Unchanged: 0/0
  6317 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6318 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6319 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6320 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6321 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6322 ;;Total ram usage:        2 bytes
  6323 ;; Hardware stack levels used:    1
  6324 ;; Hardware stack levels required when called:    8
  6325 ;; This function calls:
  6326 ;;		_I2C_Master_Wait
  6327 ;; This function is called by:
  6328 ;;		_loadRTC
  6329 ;;		_getRTC
  6330 ;; This function uses a non-reentrant model
  6331 ;;
  6332                           
  6333                           	psect	text24
  6334  002BD8                     __ptext24:
  6335                           	opt stack 0
  6336  002BD8                     _I2C_Master_Write:
  6337                           	opt stack 18
  6338                           
  6339                           ;I2C.c: 50: I2C_Master_Wait();
  6340                           
  6341                           ;incstack = 0
  6342  002BD8  ECAA  F015         	call	_I2C_Master_Wait	;wreg free
  6343                           
  6344                           ;I2C.c: 51: SSPBUF = d;
  6345  002BDC  C081  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  6346  002BE0  0012               	return		;funcret
  6347  002BE2                     __end_of_I2C_Master_Write:
  6348                           	opt stack 0
  6349                           tblptru	equ	0xFF8
  6350                           tblptrh	equ	0xFF7
  6351                           tblptrl	equ	0xFF6
  6352                           tablat	equ	0xFF5
  6353                           prodh	equ	0xFF4
  6354                           prodl	equ	0xFF3
  6355                           intcon	equ	0xFF2
  6356                           intcon2	equ	0xFF1
  6357                           intcon3	equ	0xFF0
  6358                           postinc0	equ	0xFEE
  6359                           wreg	equ	0xFE8
  6360                           postdec1	equ	0xFE5
  6361                           fsr1l	equ	0xFE1
  6362                           indf2	equ	0xFDF
  6363                           postinc2	equ	0xFDE
  6364                           postdec2	equ	0xFDD
  6365                           fsr2h	equ	0xFDA
  6366                           fsr2l	equ	0xFD9
  6367                           status	equ	0xFD8
  6368                           
  6369 ;; *************** function _I2C_Master_Stop *****************
  6370 ;; Defined at:
  6371 ;;		line 42 in file "I2C.c"
  6372 ;; Parameters:    Size  Location     Type
  6373 ;;		None
  6374 ;; Auto vars:     Size  Location     Type
  6375 ;;		None
  6376 ;; Return value:  Size  Location     Type
  6377 ;;                  1    wreg      void 
  6378 ;; Registers used:
  6379 ;;		wreg, status,2, status,0, cstack
  6380 ;; Tracked objects:
  6381 ;;		On entry : 0/0
  6382 ;;		On exit  : 0/0
  6383 ;;		Unchanged: 0/0
  6384 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6385 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6386 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6387 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6388 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6389 ;;Total ram usage:        0 bytes
  6390 ;; Hardware stack levels used:    1
  6391 ;; Hardware stack levels required when called:    8
  6392 ;; This function calls:
  6393 ;;		_I2C_Master_Wait
  6394 ;; This function is called by:
  6395 ;;		_loadRTC
  6396 ;;		_getRTC
  6397 ;; This function uses a non-reentrant model
  6398 ;;
  6399                           
  6400                           	psect	text25
  6401  002BEC                     __ptext25:
  6402                           	opt stack 0
  6403  002BEC                     _I2C_Master_Stop:
  6404                           	opt stack 18
  6405                           
  6406                           ;I2C.c: 44: I2C_Master_Wait();
  6407                           
  6408                           ;incstack = 0
  6409  002BEC  ECAA  F015         	call	_I2C_Master_Wait	;wreg free
  6410                           
  6411                           ;I2C.c: 45: PEN = 1;
  6412  002BF0  84C5               	bsf	4037,2,c	;volatile
  6413  002BF2  0012               	return		;funcret
  6414  002BF4                     __end_of_I2C_Master_Stop:
  6415                           	opt stack 0
  6416                           tblptru	equ	0xFF8
  6417                           tblptrh	equ	0xFF7
  6418                           tblptrl	equ	0xFF6
  6419                           tablat	equ	0xFF5
  6420                           prodh	equ	0xFF4
  6421                           prodl	equ	0xFF3
  6422                           intcon	equ	0xFF2
  6423                           intcon2	equ	0xFF1
  6424                           intcon3	equ	0xFF0
  6425                           postinc0	equ	0xFEE
  6426                           wreg	equ	0xFE8
  6427                           postdec1	equ	0xFE5
  6428                           fsr1l	equ	0xFE1
  6429                           indf2	equ	0xFDF
  6430                           postinc2	equ	0xFDE
  6431                           postdec2	equ	0xFDD
  6432                           fsr2h	equ	0xFDA
  6433                           fsr2l	equ	0xFD9
  6434                           status	equ	0xFD8
  6435                           
  6436 ;; *************** function _I2C_Master_Start *****************
  6437 ;; Defined at:
  6438 ;;		line 30 in file "I2C.c"
  6439 ;; Parameters:    Size  Location     Type
  6440 ;;		None
  6441 ;; Auto vars:     Size  Location     Type
  6442 ;;		None
  6443 ;; Return value:  Size  Location     Type
  6444 ;;                  1    wreg      void 
  6445 ;; Registers used:
  6446 ;;		wreg, status,2, status,0, cstack
  6447 ;; Tracked objects:
  6448 ;;		On entry : 0/0
  6449 ;;		On exit  : 0/0
  6450 ;;		Unchanged: 0/0
  6451 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6452 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6453 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6454 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6455 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6456 ;;Total ram usage:        0 bytes
  6457 ;; Hardware stack levels used:    1
  6458 ;; Hardware stack levels required when called:    8
  6459 ;; This function calls:
  6460 ;;		_I2C_Master_Wait
  6461 ;; This function is called by:
  6462 ;;		_loadRTC
  6463 ;;		_getRTC
  6464 ;; This function uses a non-reentrant model
  6465 ;;
  6466                           
  6467                           	psect	text26
  6468  002BF4                     __ptext26:
  6469                           	opt stack 0
  6470  002BF4                     _I2C_Master_Start:
  6471                           	opt stack 18
  6472                           
  6473                           ;I2C.c: 32: I2C_Master_Wait();
  6474                           
  6475                           ;incstack = 0
  6476  002BF4  ECAA  F015         	call	_I2C_Master_Wait	;wreg free
  6477                           
  6478                           ;I2C.c: 33: SEN = 1;
  6479  002BF8  80C5               	bsf	4037,0,c	;volatile
  6480  002BFA  0012               	return		;funcret
  6481  002BFC                     __end_of_I2C_Master_Start:
  6482                           	opt stack 0
  6483                           tblptru	equ	0xFF8
  6484                           tblptrh	equ	0xFF7
  6485                           tblptrl	equ	0xFF6
  6486                           tablat	equ	0xFF5
  6487                           prodh	equ	0xFF4
  6488                           prodl	equ	0xFF3
  6489                           intcon	equ	0xFF2
  6490                           intcon2	equ	0xFF1
  6491                           intcon3	equ	0xFF0
  6492                           postinc0	equ	0xFEE
  6493                           wreg	equ	0xFE8
  6494                           postdec1	equ	0xFE5
  6495                           fsr1l	equ	0xFE1
  6496                           indf2	equ	0xFDF
  6497                           postinc2	equ	0xFDE
  6498                           postdec2	equ	0xFDD
  6499                           fsr2h	equ	0xFDA
  6500                           fsr2l	equ	0xFD9
  6501                           status	equ	0xFD8
  6502                           
  6503 ;; *************** function _I2C_Master_Read *****************
  6504 ;; Defined at:
  6505 ;;		line 54 in file "I2C.c"
  6506 ;; Parameters:    Size  Location     Type
  6507 ;;  a               1    wreg     unsigned char 
  6508 ;; Auto vars:     Size  Location     Type
  6509 ;;  a               1    1[BANK0 ] unsigned char 
  6510 ;;  temp            1    2[BANK0 ] unsigned char 
  6511 ;; Return value:  Size  Location     Type
  6512 ;;                  1    wreg      unsigned char 
  6513 ;; Registers used:
  6514 ;;		wreg, status,2, status,0, cstack
  6515 ;; Tracked objects:
  6516 ;;		On entry : 0/0
  6517 ;;		On exit  : 0/0
  6518 ;;		Unchanged: 0/0
  6519 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6520 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6521 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6522 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6523 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6524 ;;Total ram usage:        2 bytes
  6525 ;; Hardware stack levels used:    1
  6526 ;; Hardware stack levels required when called:    8
  6527 ;; This function calls:
  6528 ;;		_I2C_Master_Wait
  6529 ;; This function is called by:
  6530 ;;		_getRTC
  6531 ;; This function uses a non-reentrant model
  6532 ;;
  6533                           
  6534                           	psect	text27
  6535  002950                     __ptext27:
  6536                           	opt stack 0
  6537  002950                     _I2C_Master_Read:
  6538                           	opt stack 18
  6539                           
  6540                           ;incstack = 0
  6541                           ;I2C_Master_Read@a stored from wreg
  6542  002950  0100               	movlb	0	; () banked
  6543  002952  6F81               	movwf	I2C_Master_Read@a& (0+255),b
  6544                           
  6545                           ;I2C.c: 56: unsigned char temp;
  6546                           ;I2C.c: 57: I2C_Master_Wait();
  6547  002954  ECAA  F015         	call	_I2C_Master_Wait	;wreg free
  6548                           
  6549                           ;I2C.c: 58: RCEN = 1;
  6550  002958  86C5               	bsf	4037,3,c	;volatile
  6551                           
  6552                           ;I2C.c: 59: I2C_Master_Wait();
  6553  00295A  ECAA  F015         	call	_I2C_Master_Wait	;wreg free
  6554                           
  6555                           ;I2C.c: 60: temp = SSPBUF;
  6556  00295E  CFC9 F082          	movff	4041,I2C_Master_Read@temp	;volatile
  6557                           
  6558                           ;I2C.c: 61: I2C_Master_Wait();
  6559  002962  ECAA  F015         	call	_I2C_Master_Wait	;wreg free
  6560                           
  6561                           ;I2C.c: 62: ACKDT = (a)?0:1;
  6562  002966  0100               	movlb	0	; () banked
  6563  002968  5181               	movf	I2C_Master_Read@a& (0+255),w,b
  6564  00296A  0100               	movlb	0	; () banked
  6565  00296C  A4D8               	btfss	status,2,c
  6566  00296E  D002               	goto	u2550
  6567  002970  8AC5               	bsf	4037,5,c	;volatile
  6568  002972  D001               	goto	l4121
  6569  002974                     u2550:
  6570  002974  9AC5               	bcf	4037,5,c	;volatile
  6571  002976                     l4121:
  6572                           
  6573                           ;I2C.c: 63: ACKEN = 1;
  6574  002976  88C5               	bsf	4037,4,c	;volatile
  6575                           
  6576                           ;I2C.c: 64: return temp;
  6577  002978  0100               	movlb	0	; () banked
  6578  00297A  5182               	movf	I2C_Master_Read@temp& (0+255),w,b
  6579  00297C  0012               	return	
  6580  00297E                     __end_of_I2C_Master_Read:
  6581                           	opt stack 0
  6582                           tblptru	equ	0xFF8
  6583                           tblptrh	equ	0xFF7
  6584                           tblptrl	equ	0xFF6
  6585                           tablat	equ	0xFF5
  6586                           prodh	equ	0xFF4
  6587                           prodl	equ	0xFF3
  6588                           intcon	equ	0xFF2
  6589                           intcon2	equ	0xFF1
  6590                           intcon3	equ	0xFF0
  6591                           postinc0	equ	0xFEE
  6592                           wreg	equ	0xFE8
  6593                           postdec1	equ	0xFE5
  6594                           fsr1l	equ	0xFE1
  6595                           indf2	equ	0xFDF
  6596                           postinc2	equ	0xFDE
  6597                           postdec2	equ	0xFDD
  6598                           fsr2h	equ	0xFDA
  6599                           fsr2l	equ	0xFD9
  6600                           status	equ	0xFD8
  6601                           
  6602 ;; *************** function _I2C_Master_Wait *****************
  6603 ;; Defined at:
  6604 ;;		line 25 in file "I2C.c"
  6605 ;; Parameters:    Size  Location     Type
  6606 ;;		None
  6607 ;; Auto vars:     Size  Location     Type
  6608 ;;		None
  6609 ;; Return value:  Size  Location     Type
  6610 ;;                  1    wreg      void 
  6611 ;; Registers used:
  6612 ;;		wreg, status,2, status,0
  6613 ;; Tracked objects:
  6614 ;;		On entry : 0/0
  6615 ;;		On exit  : 0/0
  6616 ;;		Unchanged: 0/0
  6617 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6618 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6619 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6620 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6621 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6622 ;;Total ram usage:        1 bytes
  6623 ;; Hardware stack levels used:    1
  6624 ;; Hardware stack levels required when called:    7
  6625 ;; This function calls:
  6626 ;;		Nothing
  6627 ;; This function is called by:
  6628 ;;		_I2C_Master_Start
  6629 ;;		_I2C_Master_Stop
  6630 ;;		_I2C_Master_Write
  6631 ;;		_I2C_Master_Read
  6632 ;;		_I2C_Master_RepeatedStart
  6633 ;; This function uses a non-reentrant model
  6634 ;;
  6635                           
  6636                           	psect	text28
  6637  002B54                     __ptext28:
  6638                           	opt stack 0
  6639  002B54                     _I2C_Master_Wait:
  6640                           	opt stack 18
  6641  002B54                     l168:
  6642  002B54  B4C7               	btfsc	4039,2,c	;volatile
  6643  002B56  D7FE               	goto	l168
  6644  002B58  CFC5 F080          	movff	4037,??_I2C_Master_Wait	;volatile
  6645  002B5C  0E1F               	movlw	31
  6646  002B5E  0100               	movlb	0	; () banked
  6647  002B60  1780               	andwf	??_I2C_Master_Wait& (0+255),f,b
  6648  002B62  B4D8               	btfsc	status,2,c
  6649  002B64  0012               	return	
  6650  002B66  D7F6               	goto	l168
  6651  002B68                     __end_of_I2C_Master_Wait:
  6652                           	opt stack 0
  6653                           tblptru	equ	0xFF8
  6654                           tblptrh	equ	0xFF7
  6655                           tblptrl	equ	0xFF6
  6656                           tablat	equ	0xFF5
  6657                           prodh	equ	0xFF4
  6658                           prodl	equ	0xFF3
  6659                           intcon	equ	0xFF2
  6660                           intcon2	equ	0xFF1
  6661                           intcon3	equ	0xFF0
  6662                           postinc0	equ	0xFEE
  6663                           wreg	equ	0xFE8
  6664                           postdec1	equ	0xFE5
  6665                           fsr1l	equ	0xFE1
  6666                           indf2	equ	0xFDF
  6667                           postinc2	equ	0xFDE
  6668                           postdec2	equ	0xFDD
  6669                           fsr2h	equ	0xFDA
  6670                           fsr2l	equ	0xFD9
  6671                           status	equ	0xFD8
  6672                           
  6673 ;; *************** function _change_state_to_menu_22 *****************
  6674 ;; Defined at:
  6675 ;;		line 440 in file "UI.c"
  6676 ;; Parameters:    Size  Location     Type
  6677 ;;		None
  6678 ;; Auto vars:     Size  Location     Type
  6679 ;;		None
  6680 ;; Return value:  Size  Location     Type
  6681 ;;                  1    wreg      void 
  6682 ;; Registers used:
  6683 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6684 ;; Tracked objects:
  6685 ;;		On entry : 0/0
  6686 ;;		On exit  : 0/0
  6687 ;;		Unchanged: 0/0
  6688 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6689 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6690 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6691 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6692 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6693 ;;Total ram usage:        0 bytes
  6694 ;; Hardware stack levels used:    1
  6695 ;; Hardware stack levels required when called:   10
  6696 ;; This function calls:
  6697 ;;		_lcdInst
  6698 ;;		_printf
  6699 ;; This function is called by:
  6700 ;;		_UI
  6701 ;; This function uses a non-reentrant model
  6702 ;;
  6703                           
  6704                           	psect	text29
  6705  00265C                     __ptext29:
  6706                           	opt stack 0
  6707  00265C                     _change_state_to_menu_22:
  6708                           	opt stack 19
  6709                           
  6710                           ;UI.c: 441: cur_state = 22;
  6711                           
  6712                           ; BSR set to: 0
  6713                           ;incstack = 0
  6714  00265C  0E00               	movlw	0
  6715  00265E  0100               	movlb	0	; () banked
  6716  002660  6FE8               	movwf	(_cur_state+1)& (0+255),b
  6717  002662  0E16               	movlw	22
  6718  002664  6FE7               	movwf	_cur_state& (0+255),b
  6719                           
  6720                           ; BSR set to: 0
  6721                           ;UI.c: 443: lcdInst(0b10000000);;
  6722  002666  0E80               	movlw	128
  6723  002668  ECD8  F015         	call	_lcdInst
  6724                           
  6725                           ;UI.c: 444: printf("2. SORT        <");
  6726  00266C  0E64               	movlw	low STR_19
  6727  00266E  0100               	movlb	0	; () banked
  6728  002670  6F8E               	movwf	printf@f& (0+255),b
  6729  002672  0EFF               	movlw	high STR_19
  6730  002674  0100               	movlb	0	; () banked
  6731  002676  6F8F               	movwf	(printf@f+1)& (0+255),b
  6732  002678  ECBB  F002         	call	_printf	;wreg free
  6733                           
  6734                           ;UI.c: 445: lcdInst(0b11000000);;
  6735  00267C  0EC0               	movlw	192
  6736  00267E  ECD8  F015         	call	_lcdInst
  6737                           
  6738                           ;UI.c: 446: printf("3. LOGS         ");
  6739  002682  0E65               	movlw	low STR_21
  6740  002684  0100               	movlb	0	; () banked
  6741  002686  6F8E               	movwf	printf@f& (0+255),b
  6742  002688  0EFE               	movlw	high STR_21
  6743  00268A  0100               	movlb	0	; () banked
  6744  00268C  6F8F               	movwf	(printf@f+1)& (0+255),b
  6745  00268E  ECBB  F002         	call	_printf	;wreg free
  6746  002692  0012               	return		;funcret
  6747  002694                     __end_of_change_state_to_menu_22:
  6748                           	opt stack 0
  6749                           tblptru	equ	0xFF8
  6750                           tblptrh	equ	0xFF7
  6751                           tblptrl	equ	0xFF6
  6752                           tablat	equ	0xFF5
  6753                           prodh	equ	0xFF4
  6754                           prodl	equ	0xFF3
  6755                           intcon	equ	0xFF2
  6756                           intcon2	equ	0xFF1
  6757                           intcon3	equ	0xFF0
  6758                           postinc0	equ	0xFEE
  6759                           wreg	equ	0xFE8
  6760                           postdec1	equ	0xFE5
  6761                           fsr1l	equ	0xFE1
  6762                           indf2	equ	0xFDF
  6763                           postinc2	equ	0xFDE
  6764                           postdec2	equ	0xFDD
  6765                           fsr2h	equ	0xFDA
  6766                           fsr2l	equ	0xFD9
  6767                           status	equ	0xFD8
  6768                           
  6769 ;; *************** function _change_state_to_menu_12 *****************
  6770 ;; Defined at:
  6771 ;;		line 432 in file "UI.c"
  6772 ;; Parameters:    Size  Location     Type
  6773 ;;		None
  6774 ;; Auto vars:     Size  Location     Type
  6775 ;;		None
  6776 ;; Return value:  Size  Location     Type
  6777 ;;                  1    wreg      void 
  6778 ;; Registers used:
  6779 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6780 ;; Tracked objects:
  6781 ;;		On entry : 0/0
  6782 ;;		On exit  : 0/0
  6783 ;;		Unchanged: 0/0
  6784 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6785 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6786 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6787 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6788 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6789 ;;Total ram usage:        0 bytes
  6790 ;; Hardware stack levels used:    1
  6791 ;; Hardware stack levels required when called:   10
  6792 ;; This function calls:
  6793 ;;		_lcdInst
  6794 ;;		_printf
  6795 ;; This function is called by:
  6796 ;;		_UI
  6797 ;; This function uses a non-reentrant model
  6798 ;;
  6799                           
  6800                           	psect	text30
  6801  002694                     __ptext30:
  6802                           	opt stack 0
  6803  002694                     _change_state_to_menu_12:
  6804                           	opt stack 19
  6805                           
  6806                           ;UI.c: 433: cur_state = 12;
  6807                           
  6808                           ;incstack = 0
  6809  002694  0E00               	movlw	0
  6810  002696  0100               	movlb	0	; () banked
  6811  002698  6FE8               	movwf	(_cur_state+1)& (0+255),b
  6812  00269A  0E0C               	movlw	12
  6813  00269C  6FE7               	movwf	_cur_state& (0+255),b
  6814                           
  6815                           ; BSR set to: 0
  6816                           ;UI.c: 435: lcdInst(0b10000000);;
  6817  00269E  0E80               	movlw	128
  6818  0026A0  ECD8  F015         	call	_lcdInst
  6819                           
  6820                           ;UI.c: 436: printf("1. DATE/TIME    ");
  6821  0026A4  0E87               	movlw	low STR_18
  6822  0026A6  0100               	movlb	0	; () banked
  6823  0026A8  6F8E               	movwf	printf@f& (0+255),b
  6824  0026AA  0EFE               	movlw	high STR_18
  6825  0026AC  0100               	movlb	0	; () banked
  6826  0026AE  6F8F               	movwf	(printf@f+1)& (0+255),b
  6827  0026B0  ECBB  F002         	call	_printf	;wreg free
  6828                           
  6829                           ;UI.c: 437: lcdInst(0b11000000);;
  6830  0026B4  0EC0               	movlw	192
  6831  0026B6  ECD8  F015         	call	_lcdInst
  6832                           
  6833                           ;UI.c: 438: printf("2. SORT        <");
  6834  0026BA  0E64               	movlw	low STR_19
  6835  0026BC  0100               	movlb	0	; () banked
  6836  0026BE  6F8E               	movwf	printf@f& (0+255),b
  6837  0026C0  0EFF               	movlw	high STR_19
  6838  0026C2  0100               	movlb	0	; () banked
  6839  0026C4  6F8F               	movwf	(printf@f+1)& (0+255),b
  6840  0026C6  ECBB  F002         	call	_printf	;wreg free
  6841  0026CA  0012               	return		;funcret
  6842  0026CC                     __end_of_change_state_to_menu_12:
  6843                           	opt stack 0
  6844                           tblptru	equ	0xFF8
  6845                           tblptrh	equ	0xFF7
  6846                           tblptrl	equ	0xFF6
  6847                           tablat	equ	0xFF5
  6848                           prodh	equ	0xFF4
  6849                           prodl	equ	0xFF3
  6850                           intcon	equ	0xFF2
  6851                           intcon2	equ	0xFF1
  6852                           intcon3	equ	0xFF0
  6853                           postinc0	equ	0xFEE
  6854                           wreg	equ	0xFE8
  6855                           postdec1	equ	0xFE5
  6856                           fsr1l	equ	0xFE1
  6857                           indf2	equ	0xFDF
  6858                           postinc2	equ	0xFDE
  6859                           postdec2	equ	0xFDD
  6860                           fsr2h	equ	0xFDA
  6861                           fsr2l	equ	0xFD9
  6862                           status	equ	0xFD8
  6863                           
  6864 ;; *************** function _printf *****************
  6865 ;; Defined at:
  6866 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  6867 ;; Parameters:    Size  Location     Type
  6868 ;;  f               2   14[BANK0 ] PTR const unsigned char 
  6869 ;;		 -> STR_50(21), STR_49(11), STR_48(24), STR_35(17), 
  6870 ;;		 -> STR_34(17), STR_33(17), STR_32(17), STR_31(17), 
  6871 ;;		 -> STR_30(17), STR_29(17), STR_28(17), STR_27(17), 
  6872 ;;		 -> STR_26(17), STR_25(17), STR_24(17), STR_23(17), 
  6873 ;;		 -> STR_22(17), STR_21(17), STR_20(17), STR_19(17), 
  6874 ;;		 -> STR_18(17), STR_17(17), STR_16(17), STR_15(17), 
  6875 ;;		 -> STR_14(3), STR_13(17), STR_12(17), STR_11(17), 
  6876 ;;		 -> STR_10(17), STR_9(17), STR_8(18), STR_7(10), 
  6877 ;;		 -> STR_6(17), STR_5(7), STR_4(17), STR_3(18), 
  6878 ;;		 -> STR_2(21), STR_1(17), 
  6879 ;; Auto vars:     Size  Location     Type
  6880 ;;  tmpval          4    0        struct .
  6881 ;;  width           2   41[BANK0 ] int 
  6882 ;;  len             2   37[BANK0 ] unsigned int 
  6883 ;;  val             2   35[BANK0 ] unsigned int 
  6884 ;;  cp              2   33[BANK0 ] PTR const unsigned char 
  6885 ;;		 -> STR_51(7), printRTC@month(4), 
  6886 ;;  ap              2   31[BANK0 ] PTR void [1]
  6887 ;;		 -> ?i2_printf(2), ?_printf(2), 
  6888 ;;  c               1   40[BANK0 ] char 
  6889 ;;  flag            1   39[BANK0 ] unsigned char 
  6890 ;;  prec            1   30[BANK0 ] char 
  6891 ;; Return value:  Size  Location     Type
  6892 ;;                  2   14[BANK0 ] int 
  6893 ;; Registers used:
  6894 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6895 ;; Tracked objects:
  6896 ;;		On entry : 0/0
  6897 ;;		On exit  : 0/0
  6898 ;;		Unchanged: 0/0
  6899 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6900 ;;      Params:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6901 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6902 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6903 ;;      Totals:         0      29       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6904 ;;Total ram usage:       29 bytes
  6905 ;; Hardware stack levels used:    1
  6906 ;; Hardware stack levels required when called:    9
  6907 ;; This function calls:
  6908 ;;		___lwdiv
  6909 ;;		___lwmod
  6910 ;;		___wmul
  6911 ;;		_isdigit
  6912 ;;		_putch
  6913 ;; This function is called by:
  6914 ;;		_UI
  6915 ;;		_change_state_to_menu_start
  6916 ;;		_change_state_to_menu_12
  6917 ;;		_change_state_to_menu_22
  6918 ;;		_printRTC
  6919 ;; This function uses a non-reentrant model
  6920 ;;
  6921                           
  6922                           	psect	text31
  6923  000576                     __ptext31:
  6924                           	opt stack 0
  6925  000576                     _printf:
  6926                           	opt stack 19
  6927                           
  6928                           ;doprnt.c: 466: va_list ap;
  6929                           ;doprnt.c: 499: signed char c;
  6930                           ;doprnt.c: 501: int width;
  6931                           ;doprnt.c: 506: signed char prec;
  6932                           ;doprnt.c: 508: unsigned char flag;
  6933                           ;doprnt.c: 523: union {
  6934                           ;doprnt.c: 524: unsigned long vd;
  6935                           ;doprnt.c: 525: double integ;
  6936                           ;doprnt.c: 526: } tmpval;
  6937                           ;doprnt.c: 528: unsigned int val;
  6938                           ;doprnt.c: 529: unsigned len;
  6939                           ;doprnt.c: 530: const char * cp;
  6940                           ;doprnt.c: 533: *ap = __va_start();
  6941                           
  6942                           ;incstack = 0
  6943  000576  0E90               	movlw	low (?_printf+2)
  6944  000578  0100               	movlb	0	; () banked
  6945  00057A  6F9F               	movwf	printf@ap& (0+255),b
  6946  00057C  0E00               	movlw	high (?_printf+2)
  6947  00057E  0100               	movlb	0	; () banked
  6948  000580  6FA0               	movwf	(printf@ap+1)& (0+255),b
  6949                           
  6950                           ;doprnt.c: 536: while(c = *f++) {
  6951  000582  D1EE               	goto	l4413
  6952  000584                     l4289:
  6953                           
  6954                           ; BSR set to: 0
  6955                           ;doprnt.c: 538: if(c != '%')
  6956  000584  0E25               	movlw	37
  6957  000586  0100               	movlb	0	; () banked
  6958  000588  19A8               	xorwf	printf@c& (0+255),w,b
  6959  00058A  B4D8               	btfsc	status,2,c
  6960  00058C  D005               	goto	l4293
  6961                           
  6962                           ; BSR set to: 0
  6963                           ;doprnt.c: 540: {
  6964                           ;doprnt.c: 541: (putch(c) );
  6965  00058E  0100               	movlb	0	; () banked
  6966  000590  51A8               	movf	printf@c& (0+255),w,b
  6967  000592  ECD0  F015         	call	_putch
  6968                           
  6969                           ;doprnt.c: 542: continue;
  6970  000596  D1E4               	goto	l4413
  6971  000598                     l4293:
  6972                           
  6973                           ;doprnt.c: 543: }
  6974                           ;doprnt.c: 546: width = 0;
  6975  000598  0E00               	movlw	0
  6976  00059A  0100               	movlb	0	; () banked
  6977  00059C  6FAA               	movwf	(printf@width+1)& (0+255),b
  6978  00059E  0E00               	movlw	0
  6979  0005A0  6FA9               	movwf	printf@width& (0+255),b
  6980                           
  6981                           ;doprnt.c: 548: flag = 0;
  6982  0005A2  0E00               	movlw	0
  6983  0005A4  0100               	movlb	0	; () banked
  6984  0005A6  6FA7               	movwf	printf@flag& (0+255),b
  6985                           
  6986                           ; BSR set to: 0
  6987                           ;doprnt.c: 551: switch(*f) {
  6988                           
  6989                           ;doprnt.c: 550: for(;;) {
  6990  0005A8  D005               	goto	l4299
  6991  0005AA                     l4295:
  6992                           
  6993                           ;doprnt.c: 580: flag |= 0x04;
  6994  0005AA  0100               	movlb	0	; () banked
  6995  0005AC  85A7               	bsf	printf@flag& (0+255),2,b
  6996                           
  6997                           ;doprnt.c: 581: f++;
  6998  0005AE  0100               	movlb	0	; () banked
  6999  0005B0  4B8E               	infsnz	printf@f& (0+255),f,b
  7000  0005B2  2B8F               	incf	(printf@f+1)& (0+255),f,b
  7001  0005B4                     l4299:
  7002  0005B4  C08E  FFF6         	movff	printf@f,tblptrl
  7003  0005B8  C08F  FFF7         	movff	printf@f+1,tblptrh
  7004  0005BC                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  7005  0005BC  6AF8               	clrf	tblptru,c
  7006  0005BE                     	endif
  7007  0005BE                     	if	0	;tblptru may be non-zero
  7008  0005BE                     	endif
  7009  0005BE  0008               	tblrd		*
  7010  0005C0  50F5               	movf	tablat,w,c
  7011                           
  7012                           ; Switch size 1, requested type "space"
  7013                           ; Number of cases is 1, Range of values is 48 to 48
  7014                           ; switch strategies available:
  7015                           ; Name         Instructions Cycles
  7016                           ; simple_byte            4     3 (average)
  7017                           ;	Chosen strategy is simple_byte
  7018  0005C2  0A30               	xorlw	48	; case 48
  7019  0005C4  B4D8               	btfsc	status,2,c
  7020  0005C6  D7F1               	goto	l4295
  7021                           
  7022                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  7023                           
  7024                           ;doprnt.c: 586: }
  7025                           
  7026                           ;doprnt.c: 585: break;
  7027  0005C8  C08E  FFF6         	movff	printf@f,tblptrl
  7028  0005CC  C08F  FFF7         	movff	printf@f+1,tblptrh
  7029  0005D0                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  7030  0005D0  6AF8               	clrf	tblptru,c
  7031  0005D2                     	endif
  7032  0005D2                     	if	0	;tblptru may be non-zero
  7033  0005D2                     	endif
  7034  0005D2  0008               	tblrd		*
  7035  0005D4  50F5               	movf	tablat,w,c
  7036  0005D6  EC02  F015         	call	_isdigit
  7037  0005DA  A0D8               	btfss	status,0,c
  7038  0005DC  D0CF               	goto	l4345
  7039                           
  7040                           ;doprnt.c: 598: width = 0;
  7041  0005DE  0E00               	movlw	0
  7042  0005E0  0100               	movlb	0	; () banked
  7043  0005E2  6FAA               	movwf	(printf@width+1)& (0+255),b
  7044  0005E4  0E00               	movlw	0
  7045  0005E6  6FA9               	movwf	printf@width& (0+255),b
  7046  0005E8                     l4305:
  7047                           
  7048                           ;doprnt.c: 600: width *= 10;
  7049  0005E8  C0A9  F080         	movff	printf@width,___wmul@multiplier
  7050  0005EC  C0AA  F081         	movff	printf@width+1,___wmul@multiplier+1
  7051  0005F0  0E00               	movlw	0
  7052  0005F2  0100               	movlb	0	; () banked
  7053  0005F4  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7054  0005F6  0E0A               	movlw	10
  7055  0005F8  6F82               	movwf	___wmul@multiplicand& (0+255),b
  7056  0005FA  EC9C  F013         	call	___wmul	;wreg free
  7057  0005FE  C080  F0A9         	movff	?___wmul,printf@width
  7058  000602  C081  F0AA         	movff	?___wmul+1,printf@width+1
  7059                           
  7060                           ;doprnt.c: 601: width += *f++ - '0';
  7061  000606  0ED0               	movlw	208
  7062  000608  0100               	movlb	0	; () banked
  7063  00060A  6F9A               	movwf	??_printf& (0+255),b
  7064  00060C  0EFF               	movlw	255
  7065  00060E  0100               	movlb	0	; () banked
  7066  000610  6F9B               	movwf	(??_printf+1)& (0+255),b
  7067  000612  C08E  FFF6         	movff	printf@f,tblptrl
  7068  000616  C08F  FFF7         	movff	printf@f+1,tblptrh
  7069  00061A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  7070  00061A  6AF8               	clrf	tblptru,c
  7071  00061C                     	endif
  7072  00061C                     	if	0	;tblptru may be non-zero
  7073  00061C                     	endif
  7074  00061C  0008               	tblrd		*
  7075  00061E  50F5               	movf	tablat,w,c
  7076  000620  0100               	movlb	0	; () banked
  7077  000622  6F9C               	movwf	(??_printf+2)& (0+255),b
  7078  000624  6B9D               	clrf	(??_printf+3)& (0+255),b
  7079  000626  0100               	movlb	0	; () banked
  7080  000628  519A               	movf	??_printf& (0+255),w,b
  7081  00062A  0100               	movlb	0	; () banked
  7082  00062C  279C               	addwf	(??_printf+2)& (0+255),f,b
  7083  00062E  0100               	movlb	0	; () banked
  7084  000630  519B               	movf	(??_printf+1)& (0+255),w,b
  7085  000632  0100               	movlb	0	; () banked
  7086  000634  239D               	addwfc	(??_printf+3)& (0+255),f,b
  7087  000636  0100               	movlb	0	; () banked
  7088  000638  519C               	movf	(??_printf+2)& (0+255),w,b
  7089  00063A  0100               	movlb	0	; () banked
  7090  00063C  27A9               	addwf	printf@width& (0+255),f,b
  7091  00063E  0100               	movlb	0	; () banked
  7092  000640  519D               	movf	(??_printf+3)& (0+255),w,b
  7093  000642  0100               	movlb	0	; () banked
  7094  000644  23AA               	addwfc	(printf@width+1)& (0+255),f,b
  7095                           
  7096                           ; BSR set to: 0
  7097  000646  0100               	movlb	0	; () banked
  7098  000648  4B8E               	infsnz	printf@f& (0+255),f,b
  7099  00064A  2B8F               	incf	(printf@f+1)& (0+255),f,b
  7100                           
  7101                           ; BSR set to: 0
  7102                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  7103  00064C  C08E  FFF6         	movff	printf@f,tblptrl
  7104  000650  C08F  FFF7         	movff	printf@f+1,tblptrh
  7105  000654                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  7106  000654  6AF8               	clrf	tblptru,c
  7107  000656                     	endif
  7108  000656                     	if	0	;tblptru may be non-zero
  7109  000656                     	endif
  7110  000656  0008               	tblrd		*
  7111  000658  50F5               	movf	tablat,w,c
  7112  00065A  EC02  F015         	call	_isdigit
  7113  00065E  A0D8               	btfss	status,0,c
  7114  000660  D08D               	goto	l4345
  7115  000662  D7C2               	goto	l4305
  7116  000664                     l4313:
  7117                           
  7118                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  7119  000664  C09F  FFD9         	movff	printf@ap,fsr2l
  7120  000668  C0A0  FFDA         	movff	printf@ap+1,fsr2h
  7121  00066C  CFDE F0A1          	movff	postinc2,printf@cp
  7122  000670  CFDD F0A2          	movff	postdec2,printf@cp+1
  7123  000674  0E02               	movlw	2
  7124  000676  0100               	movlb	0	; () banked
  7125  000678  279F               	addwf	printf@ap& (0+255),f,b
  7126  00067A  0E00               	movlw	0
  7127  00067C  23A0               	addwfc	(printf@ap+1)& (0+255),f,b
  7128                           
  7129                           ; BSR set to: 0
  7130                           ;doprnt.c: 740: if(!cp)
  7131  00067E  0100               	movlb	0	; () banked
  7132  000680  51A1               	movf	printf@cp& (0+255),w,b
  7133  000682  0100               	movlb	0	; () banked
  7134  000684  11A2               	iorwf	(printf@cp+1)& (0+255),w,b
  7135  000686  A4D8               	btfss	status,2,c
  7136  000688  D006               	goto	l4321
  7137                           
  7138                           ; BSR set to: 0
  7139                           ;doprnt.c: 741: cp = "(null)";
  7140  00068A  0EBD               	movlw	low STR_51
  7141  00068C  0100               	movlb	0	; () banked
  7142  00068E  6FA1               	movwf	printf@cp& (0+255),b
  7143  000690  0EFF               	movlw	high STR_51
  7144  000692  0100               	movlb	0	; () banked
  7145  000694  6FA2               	movwf	(printf@cp+1)& (0+255),b
  7146  000696                     l4321:
  7147                           
  7148                           ; BSR set to: 0
  7149                           ;doprnt.c: 745: len = 0;
  7150  000696  0E00               	movlw	0
  7151  000698  0100               	movlb	0	; () banked
  7152  00069A  6FA6               	movwf	(printf@len+1)& (0+255),b
  7153  00069C  0E00               	movlw	0
  7154  00069E  6FA5               	movwf	printf@len& (0+255),b
  7155                           
  7156                           ;doprnt.c: 746: while(cp[len])
  7157  0006A0  D003               	goto	l4325
  7158  0006A2                     l4323:
  7159                           
  7160                           ;doprnt.c: 747: len++;
  7161  0006A2  0100               	movlb	0	; () banked
  7162  0006A4  4BA5               	infsnz	printf@len& (0+255),f,b
  7163  0006A6  2BA6               	incf	(printf@len+1)& (0+255),f,b
  7164  0006A8                     l4325:
  7165                           
  7166                           ; BSR set to: 0
  7167  0006A8  0100               	movlb	0	; () banked
  7168  0006AA  51A5               	movf	printf@len& (0+255),w,b
  7169  0006AC  0100               	movlb	0	; () banked
  7170  0006AE  25A1               	addwf	printf@cp& (0+255),w,b
  7171  0006B0  0100               	movlb	0	; () banked
  7172  0006B2  6F9A               	movwf	??_printf& (0+255),b
  7173  0006B4  0100               	movlb	0	; () banked
  7174  0006B6  51A6               	movf	(printf@len+1)& (0+255),w,b
  7175  0006B8  0100               	movlb	0	; () banked
  7176  0006BA  21A2               	addwfc	(printf@cp+1)& (0+255),w,b
  7177  0006BC  0100               	movlb	0	; () banked
  7178  0006BE  6F9B               	movwf	(??_printf+1)& (0+255),b
  7179  0006C0  C09A  FFF6         	movff	??_printf,tblptrl
  7180  0006C4  C09B  FFF7         	movff	??_printf+1,tblptrh
  7181  0006C8  0E00               	movlw	low (__mediumconst shr (0+16))
  7182  0006CA  6EF8               	movwf	tblptru,c
  7183  0006CC  0E0F               	movlw	(high __ramtop+-1)
  7184  0006CE  64F7               	cpfsgt	tblptrh,c
  7185  0006D0  D003               	bra	u2807
  7186  0006D2  0008               	tblrd		*
  7187  0006D4  50F5               	movf	tablat,w,c
  7188  0006D6  D005               	bra	u2800
  7189  0006D8                     u2807:
  7190  0006D8  CFF6 FFE9          	movff	tblptrl,fsr0l
  7191  0006DC  CFF7 FFEA          	movff	tblptrh,fsr0h
  7192  0006E0  50EF               	movf	indf0,w,c
  7193  0006E2                     u2800:
  7194  0006E2  0900               	iorlw	0
  7195  0006E4  A4D8               	btfss	status,2,c
  7196  0006E6  D7DD               	goto	l4323
  7197                           
  7198                           ;doprnt.c: 757: if(width > len)
  7199  0006E8  0100               	movlb	0	; () banked
  7200  0006EA  51A9               	movf	printf@width& (0+255),w,b
  7201  0006EC  0100               	movlb	0	; () banked
  7202  0006EE  5DA5               	subwf	printf@len& (0+255),w,b
  7203  0006F0  0100               	movlb	0	; () banked
  7204  0006F2  51AA               	movf	(printf@width+1)& (0+255),w,b
  7205  0006F4  0100               	movlb	0	; () banked
  7206  0006F6  59A6               	subwfb	(printf@len+1)& (0+255),w,b
  7207  0006F8  B0D8               	btfsc	status,0,c
  7208  0006FA  D009               	goto	l4331
  7209                           
  7210                           ; BSR set to: 0
  7211                           ;doprnt.c: 758: width -= len;
  7212  0006FC  0100               	movlb	0	; () banked
  7213  0006FE  51A5               	movf	printf@len& (0+255),w,b
  7214  000700  0100               	movlb	0	; () banked
  7215  000702  5FA9               	subwf	printf@width& (0+255),f,b
  7216  000704  0100               	movlb	0	; () banked
  7217  000706  51A6               	movf	(printf@len+1)& (0+255),w,b
  7218  000708  0100               	movlb	0	; () banked
  7219  00070A  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
  7220  00070C  D009               	goto	l4335
  7221  00070E                     l4331:
  7222                           
  7223                           ; BSR set to: 0
  7224                           ;doprnt.c: 759: else
  7225                           ;doprnt.c: 760: width = 0;
  7226  00070E  0E00               	movlw	0
  7227  000710  0100               	movlb	0	; () banked
  7228  000712  6FAA               	movwf	(printf@width+1)& (0+255),b
  7229  000714  0E00               	movlw	0
  7230  000716  6FA9               	movwf	printf@width& (0+255),b
  7231                           
  7232                           ; BSR set to: 0
  7233                           ;doprnt.c: 764: while(width--)
  7234  000718  D003               	goto	l4335
  7235  00071A                     l4333:
  7236                           
  7237                           ; BSR set to: 0
  7238                           ;doprnt.c: 765: (putch(' ') );
  7239  00071A  0E20               	movlw	32
  7240  00071C  ECD0  F015         	call	_putch
  7241  000720                     l4335:
  7242  000720  0100               	movlb	0	; () banked
  7243  000722  07A9               	decf	printf@width& (0+255),f,b
  7244  000724  A0D8               	btfss	status,0,c
  7245  000726  07AA               	decf	(printf@width+1)& (0+255),f,b
  7246  000728  0100               	movlb	0	; () banked
  7247  00072A  29A9               	incf	printf@width& (0+255),w,b
  7248  00072C  E1F6               	bnz	l4333
  7249  00072E  0100               	movlb	0	; () banked
  7250  000730  29AA               	incf	(printf@width+1)& (0+255),w,b
  7251  000732  B4D8               	btfsc	status,2,c
  7252  000734  D017               	goto	l4341
  7253  000736  D7F1               	goto	l4333
  7254  000738                     l4337:
  7255                           
  7256                           ; BSR set to: 0
  7257                           ;doprnt.c: 768: (putch(*cp++) );
  7258  000738  C0A1  FFF6         	movff	printf@cp,tblptrl
  7259  00073C  C0A2  FFF7         	movff	printf@cp+1,tblptrh
  7260  000740  0E00               	movlw	low (__mediumconst shr (0+16))
  7261  000742  6EF8               	movwf	tblptru,c
  7262  000744  0E0F               	movlw	(high __ramtop+-1)
  7263  000746  64F7               	cpfsgt	tblptrh,c
  7264  000748  D003               	bra	u2847
  7265  00074A  0008               	tblrd		*
  7266  00074C  50F5               	movf	tablat,w,c
  7267  00074E  D005               	bra	u2840
  7268  000750                     u2847:
  7269  000750  CFF6 FFE9          	movff	tblptrl,fsr0l
  7270  000754  CFF7 FFEA          	movff	tblptrh,fsr0h
  7271  000758  50EF               	movf	indf0,w,c
  7272  00075A                     u2840:
  7273  00075A  ECD0  F015         	call	_putch
  7274  00075E  0100               	movlb	0	; () banked
  7275  000760  4BA1               	infsnz	printf@cp& (0+255),f,b
  7276  000762  2BA2               	incf	(printf@cp+1)& (0+255),f,b
  7277  000764                     l4341:
  7278                           
  7279                           ; BSR set to: 0
  7280  000764  0100               	movlb	0	; () banked
  7281  000766  07A5               	decf	printf@len& (0+255),f,b
  7282  000768  A0D8               	btfss	status,0,c
  7283  00076A  07A6               	decf	(printf@len+1)& (0+255),f,b
  7284  00076C  0100               	movlb	0	; () banked
  7285  00076E  29A5               	incf	printf@len& (0+255),w,b
  7286  000770  E1E3               	bnz	l4337
  7287  000772  0100               	movlb	0	; () banked
  7288  000774  29A6               	incf	(printf@len+1)& (0+255),w,b
  7289  000776  B4D8               	btfsc	status,2,c
  7290  000778  D0F3               	goto	l4413
  7291  00077A  D7DE               	goto	l4337
  7292  00077C                     l4345:
  7293  00077C  C08E  FFF6         	movff	printf@f,tblptrl
  7294  000780  C08F  FFF7         	movff	printf@f+1,tblptrh
  7295  000784  0100               	movlb	0	; () banked
  7296  000786  4B8E               	infsnz	printf@f& (0+255),f,b
  7297  000788  2B8F               	incf	(printf@f+1)& (0+255),f,b
  7298  00078A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  7299  00078A  6AF8               	clrf	tblptru,c
  7300  00078C                     	endif
  7301  00078C                     	if	0	;tblptru may be non-zero
  7302  00078C                     	endif
  7303  00078C  0008               	tblrd		*
  7304  00078E  CFF5 F0A8          	movff	tablat,printf@c
  7305  000792  0100               	movlb	0	; () banked
  7306  000794  51A8               	movf	printf@c& (0+255),w,b
  7307                           
  7308                           ; Switch size 1, requested type "space"
  7309                           ; Number of cases is 4, Range of values is 0 to 115
  7310                           ; switch strategies available:
  7311                           ; Name         Instructions Cycles
  7312                           ; simple_byte           13     7 (average)
  7313                           ;	Chosen strategy is simple_byte
  7314  000796  0A00               	xorlw	0	; case 0
  7315  000798  B4D8               	btfsc	status,2,c
  7316  00079A  0012               	return	
  7317  00079C  0A64               	xorlw	100	; case 100
  7318  00079E  B4D8               	btfsc	status,2,c
  7319  0007A0  D007               	goto	l4347
  7320  0007A2  0A0D               	xorlw	13	; case 105
  7321  0007A4  B4D8               	btfsc	status,2,c
  7322  0007A6  D004               	goto	l4347
  7323  0007A8  0A1A               	xorlw	26	; case 115
  7324  0007AA  B4D8               	btfsc	status,2,c
  7325  0007AC  D75B               	goto	l4313
  7326  0007AE  D0D8               	goto	l4413
  7327  0007B0                     l4347:
  7328                           
  7329                           ;doprnt.c: 1253: {
  7330                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  7331  0007B0  C09F  FFD9         	movff	printf@ap,fsr2l
  7332  0007B4  C0A0  FFDA         	movff	printf@ap+1,fsr2h
  7333  0007B8  CFDE F0A3          	movff	postinc2,printf@val
  7334  0007BC  CFDD F0A4          	movff	postdec2,printf@val+1
  7335  0007C0  0E02               	movlw	2
  7336  0007C2  0100               	movlb	0	; () banked
  7337  0007C4  279F               	addwf	printf@ap& (0+255),f,b
  7338  0007C6  0E00               	movlw	0
  7339  0007C8  23A0               	addwfc	(printf@ap+1)& (0+255),f,b
  7340                           
  7341                           ; BSR set to: 0
  7342                           ;doprnt.c: 1261: if((int)val < 0) {
  7343  0007CA  0100               	movlb	0	; () banked
  7344  0007CC  AFA4               	btfss	(printf@val+1)& (0+255),7,b
  7345  0007CE  D008               	goto	l4357
  7346                           
  7347                           ; BSR set to: 0
  7348                           ;doprnt.c: 1262: flag |= 0x03;
  7349  0007D0  0E03               	movlw	3
  7350  0007D2  0100               	movlb	0	; () banked
  7351  0007D4  13A7               	iorwf	printf@flag& (0+255),f,b
  7352                           
  7353                           ; BSR set to: 0
  7354                           ;doprnt.c: 1263: val = -val;
  7355  0007D6  0100               	movlb	0	; () banked
  7356  0007D8  6DA3               	negf	printf@val& (0+255),b
  7357  0007DA  1FA4               	comf	(printf@val+1)& (0+255),f,b
  7358  0007DC  B0D8               	btfsc	status,0,c
  7359  0007DE  2BA4               	incf	(printf@val+1)& (0+255),f,b
  7360  0007E0                     l4357:
  7361                           
  7362                           ; BSR set to: 0
  7363                           ;doprnt.c: 1264: }
  7364                           ;doprnt.c: 1266: }
  7365                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  7366  0007E0  0E01               	movlw	1
  7367  0007E2  0100               	movlb	0	; () banked
  7368  0007E4  6FA8               	movwf	printf@c& (0+255),b
  7369  0007E6                     l4359:
  7370                           
  7371                           ; BSR set to: 0
  7372  0007E6  0E05               	movlw	5
  7373  0007E8  0100               	movlb	0	; () banked
  7374  0007EA  19A8               	xorwf	printf@c& (0+255),w,b
  7375  0007EC  B4D8               	btfsc	status,2,c
  7376  0007EE  D019               	goto	l4371
  7377                           
  7378                           ; BSR set to: 0
  7379                           ;doprnt.c: 1306: if(val < dpowers[c])
  7380                           
  7381                           ; BSR set to: 0
  7382                           
  7383                           ; BSR set to: 0
  7384  0007F0  0100               	movlb	0	; () banked
  7385  0007F2  51A8               	movf	printf@c& (0+255),w,b
  7386  0007F4  0D02               	mullw	2
  7387  0007F6  0EC6               	movlw	low _dpowers
  7388  0007F8  24F3               	addwf	prodl,w,c
  7389  0007FA  6EF6               	movwf	tblptrl,c
  7390  0007FC  0EFD               	movlw	high _dpowers
  7391  0007FE  20F4               	addwfc	prodh,w,c
  7392  000800  6EF7               	movwf	tblptrh,c
  7393  000802                     	if	1	;There are 3 active tblptr bytes
  7394  000802  6AF8               	clrf	tblptru,c
  7395  000804  0E00               	movlw	low (__mediumconst shr (0+16))
  7396  000806  22F8               	addwfc	tblptru,f,c
  7397  000808                     	endif
  7398  000808  0009               	tblrd		*+
  7399  00080A  50F5               	movf	tablat,w,c
  7400  00080C  0100               	movlb	0	; () banked
  7401  00080E  5DA3               	subwf	printf@val& (0+255),w,b
  7402  000810  0009               	tblrd		*+
  7403  000812  50F5               	movf	tablat,w,c
  7404  000814  0100               	movlb	0	; () banked
  7405  000816  59A4               	subwfb	(printf@val+1)& (0+255),w,b
  7406  000818  A0D8               	btfss	status,0,c
  7407  00081A  D003               	goto	l4371
  7408                           
  7409                           ; BSR set to: 0
  7410                           
  7411                           ; BSR set to: 0
  7412                           
  7413                           ; BSR set to: 0
  7414                           ;doprnt.c: 1307: break;
  7415  00081C  0100               	movlb	0	; () banked
  7416  00081E  2BA8               	incf	printf@c& (0+255),f,b
  7417  000820  D7E2               	goto	l4359
  7418  000822                     l4371:
  7419                           
  7420                           ; BSR set to: 0
  7421                           ;doprnt.c: 1345: if(width && flag & 0x03)
  7422  000822  0100               	movlb	0	; () banked
  7423  000824  51A9               	movf	printf@width& (0+255),w,b
  7424  000826  0100               	movlb	0	; () banked
  7425  000828  11AA               	iorwf	(printf@width+1)& (0+255),w,b
  7426  00082A  B4D8               	btfsc	status,2,c
  7427  00082C  D00B               	goto	l4377
  7428                           
  7429                           ; BSR set to: 0
  7430  00082E  C0A7  F09A         	movff	printf@flag,??_printf
  7431  000832  0E03               	movlw	3
  7432  000834  0100               	movlb	0	; () banked
  7433  000836  179A               	andwf	??_printf& (0+255),f,b
  7434  000838  B4D8               	btfsc	status,2,c
  7435  00083A  D004               	goto	l4377
  7436                           
  7437                           ; BSR set to: 0
  7438                           ;doprnt.c: 1346: width--;
  7439  00083C  0100               	movlb	0	; () banked
  7440  00083E  07A9               	decf	printf@width& (0+255),f,b
  7441  000840  A0D8               	btfss	status,0,c
  7442  000842  07AA               	decf	(printf@width+1)& (0+255),f,b
  7443  000844                     l4377:
  7444                           
  7445                           ; BSR set to: 0
  7446                           ;doprnt.c: 1381: if(width > c)
  7447  000844  0E80               	movlw	128
  7448  000846  0100               	movlb	0	; () banked
  7449  000848  BFA8               	btfsc	printf@c& (0+255),7,b
  7450  00084A  0E7F               	movlw	127
  7451  00084C  0100               	movlb	0	; () banked
  7452  00084E  6F9A               	movwf	??_printf& (0+255),b
  7453  000850  0100               	movlb	0	; () banked
  7454  000852  51A9               	movf	printf@width& (0+255),w,b
  7455  000854  0100               	movlb	0	; () banked
  7456  000856  5DA8               	subwf	printf@c& (0+255),w,b
  7457  000858  0100               	movlb	0	; () banked
  7458  00085A  51AA               	movf	(printf@width+1)& (0+255),w,b
  7459  00085C  0A80               	xorlw	128
  7460  00085E  0100               	movlb	0	; () banked
  7461  000860  599A               	subwfb	??_printf& (0+255),w,b
  7462  000862  B0D8               	btfsc	status,0,c
  7463  000864  D00B               	goto	l4381
  7464                           
  7465                           ; BSR set to: 0
  7466                           ;doprnt.c: 1382: width -= c;
  7467  000866  0100               	movlb	0	; () banked
  7468  000868  51A8               	movf	printf@c& (0+255),w,b
  7469  00086A  0100               	movlb	0	; () banked
  7470  00086C  5FA9               	subwf	printf@width& (0+255),f,b
  7471  00086E  0E00               	movlw	0
  7472  000870  0100               	movlb	0	; () banked
  7473  000872  BFA8               	btfsc	printf@c& (0+255),7,b
  7474  000874  0EFF               	movlw	255
  7475  000876  0100               	movlb	0	; () banked
  7476  000878  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
  7477  00087A  D005               	goto	l4383
  7478  00087C                     l4381:
  7479                           
  7480                           ; BSR set to: 0
  7481                           ;doprnt.c: 1383: else
  7482                           ;doprnt.c: 1384: width = 0;
  7483  00087C  0E00               	movlw	0
  7484  00087E  0100               	movlb	0	; () banked
  7485  000880  6FAA               	movwf	(printf@width+1)& (0+255),b
  7486  000882  0E00               	movlw	0
  7487  000884  6FA9               	movwf	printf@width& (0+255),b
  7488  000886                     l4383:
  7489                           
  7490                           ; BSR set to: 0
  7491                           ;doprnt.c: 1387: if(flag & 0x04) {
  7492  000886  0100               	movlb	0	; () banked
  7493  000888  A5A7               	btfss	printf@flag& (0+255),2,b
  7494  00088A  D018               	goto	l4395
  7495                           
  7496                           ; BSR set to: 0
  7497                           ;doprnt.c: 1392: if(flag & 0x03)
  7498  00088C  C0A7  F09A         	movff	printf@flag,??_printf
  7499  000890  0E03               	movlw	3
  7500  000892  0100               	movlb	0	; () banked
  7501  000894  179A               	andwf	??_printf& (0+255),f,b
  7502  000896  B4D8               	btfsc	status,2,c
  7503  000898  D003               	goto	l4389
  7504                           
  7505                           ; BSR set to: 0
  7506                           ;doprnt.c: 1393: (putch('-') );
  7507  00089A  0E2D               	movlw	45
  7508  00089C  ECD0  F015         	call	_putch
  7509  0008A0                     l4389:
  7510                           
  7511                           ;doprnt.c: 1415: if(width)
  7512  0008A0  0100               	movlb	0	; () banked
  7513  0008A2  51A9               	movf	printf@width& (0+255),w,b
  7514  0008A4  0100               	movlb	0	; () banked
  7515  0008A6  11AA               	iorwf	(printf@width+1)& (0+255),w,b
  7516  0008A8  B4D8               	btfsc	status,2,c
  7517  0008AA  D025               	goto	l4405
  7518                           
  7519                           ; BSR set to: 0
  7520                           ;doprnt.c: 1417: (putch('0') );
  7521                           
  7522                           ; BSR set to: 0
  7523                           
  7524                           ;doprnt.c: 1416: do
  7525  0008AC  0E30               	movlw	48
  7526  0008AE  ECD0  F015         	call	_putch
  7527                           
  7528                           ;doprnt.c: 1418: while(--width);
  7529  0008B2  0100               	movlb	0	; () banked
  7530  0008B4  07A9               	decf	printf@width& (0+255),f,b
  7531  0008B6  A0D8               	btfss	status,0,c
  7532  0008B8  07AA               	decf	(printf@width+1)& (0+255),f,b
  7533  0008BA  D7F2               	goto	l4389
  7534  0008BC                     l4395:
  7535                           
  7536                           ; BSR set to: 0
  7537                           ;doprnt.c: 1422: {
  7538                           ;doprnt.c: 1424: if(width
  7539                           ;doprnt.c: 1428: )
  7540  0008BC  0100               	movlb	0	; () banked
  7541  0008BE  51A9               	movf	printf@width& (0+255),w,b
  7542  0008C0  0100               	movlb	0	; () banked
  7543  0008C2  11AA               	iorwf	(printf@width+1)& (0+255),w,b
  7544  0008C4  B4D8               	btfsc	status,2,c
  7545  0008C6  D00D               	goto	l4401
  7546  0008C8                     l4397:
  7547                           
  7548                           ; BSR set to: 0
  7549                           ;doprnt.c: 1430: (putch(' ') );
  7550  0008C8  0E20               	movlw	32
  7551  0008CA  ECD0  F015         	call	_putch
  7552                           
  7553                           ;doprnt.c: 1431: while(--width);
  7554  0008CE  0100               	movlb	0	; () banked
  7555  0008D0  07A9               	decf	printf@width& (0+255),f,b
  7556  0008D2  A0D8               	btfss	status,0,c
  7557  0008D4  07AA               	decf	(printf@width+1)& (0+255),f,b
  7558  0008D6  0100               	movlb	0	; () banked
  7559  0008D8  51A9               	movf	printf@width& (0+255),w,b
  7560  0008DA  0100               	movlb	0	; () banked
  7561  0008DC  11AA               	iorwf	(printf@width+1)& (0+255),w,b
  7562  0008DE  A4D8               	btfss	status,2,c
  7563  0008E0  D7F3               	goto	l4397
  7564  0008E2                     l4401:
  7565                           
  7566                           ; BSR set to: 0
  7567                           ;doprnt.c: 1438: if(flag & 0x03)
  7568  0008E2  C0A7  F09A         	movff	printf@flag,??_printf
  7569  0008E6  0E03               	movlw	3
  7570  0008E8  0100               	movlb	0	; () banked
  7571  0008EA  179A               	andwf	??_printf& (0+255),f,b
  7572  0008EC  B4D8               	btfsc	status,2,c
  7573  0008EE  D003               	goto	l4405
  7574                           
  7575                           ; BSR set to: 0
  7576                           ;doprnt.c: 1439: (putch('-') );
  7577  0008F0  0E2D               	movlw	45
  7578  0008F2  ECD0  F015         	call	_putch
  7579  0008F6                     l4405:
  7580                           
  7581                           ;doprnt.c: 1469: }
  7582                           ;doprnt.c: 1472: prec = c;
  7583  0008F6  C0A8  F09E         	movff	printf@c,printf@prec
  7584                           
  7585                           ;doprnt.c: 1474: while(prec--) {
  7586  0008FA  D02C               	goto	l4411
  7587  0008FC                     l4407:
  7588                           
  7589                           ;doprnt.c: 1478: {
  7590                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  7591  0008FC  0100               	movlb	0	; () banked
  7592  0008FE  519E               	movf	printf@prec& (0+255),w,b
  7593  000900  0D02               	mullw	2
  7594  000902  0EC6               	movlw	low _dpowers
  7595  000904  24F3               	addwf	prodl,w,c
  7596  000906  6EF6               	movwf	tblptrl,c
  7597  000908  0EFD               	movlw	high _dpowers
  7598  00090A  20F4               	addwfc	prodh,w,c
  7599  00090C  6EF7               	movwf	tblptrh,c
  7600  00090E                     	if	1	;There are 3 active tblptr bytes
  7601  00090E  6AF8               	clrf	tblptru,c
  7602  000910  0E00               	movlw	low (__mediumconst shr (0+16))
  7603  000912  22F8               	addwfc	tblptru,f,c
  7604  000914                     	endif
  7605  000914  0009               	tblrd		*+
  7606  000916  CFF5 F082          	movff	tablat,___lwdiv@divisor
  7607  00091A  000A               	tblrd		*-
  7608  00091C  CFF5 F083          	movff	tablat,___lwdiv@divisor+1
  7609  000920  C0A3  F080         	movff	printf@val,___lwdiv@dividend
  7610  000924  C0A4  F081         	movff	printf@val+1,___lwdiv@dividend+1
  7611  000928  ECDB  F010         	call	___lwdiv	;wreg free
  7612  00092C  C080  F087         	movff	?___lwdiv,___lwmod@dividend
  7613  000930  C081  F088         	movff	?___lwdiv+1,___lwmod@dividend+1
  7614  000934  0E00               	movlw	0
  7615  000936  0100               	movlb	0	; () banked
  7616  000938  6F8A               	movwf	(___lwmod@divisor+1)& (0+255),b
  7617  00093A  0E0A               	movlw	10
  7618  00093C  6F89               	movwf	___lwmod@divisor& (0+255),b
  7619  00093E  ECBF  F011         	call	___lwmod	;wreg free
  7620  000942  0100               	movlb	0	; () banked
  7621  000944  5187               	movf	?___lwmod& (0+255),w,b
  7622  000946  0F30               	addlw	48
  7623  000948  0100               	movlb	0	; () banked
  7624  00094A  6FA8               	movwf	printf@c& (0+255),b
  7625                           
  7626                           ; BSR set to: 0
  7627                           ;doprnt.c: 1523: }
  7628                           ;doprnt.c: 1524: (putch(c) );
  7629  00094C  0100               	movlb	0	; () banked
  7630  00094E  51A8               	movf	printf@c& (0+255),w,b
  7631  000950  ECD0  F015         	call	_putch
  7632  000954                     l4411:
  7633  000954  0100               	movlb	0	; () banked
  7634  000956  079E               	decf	printf@prec& (0+255),f,b
  7635  000958  0100               	movlb	0	; () banked
  7636  00095A  299E               	incf	printf@prec& (0+255),w,b
  7637  00095C  A4D8               	btfss	status,2,c
  7638  00095E  D7CE               	goto	l4407
  7639  000960                     l4413:
  7640  000960  C08E  FFF6         	movff	printf@f,tblptrl
  7641  000964  C08F  FFF7         	movff	printf@f+1,tblptrh
  7642  000968  0100               	movlb	0	; () banked
  7643  00096A  4B8E               	infsnz	printf@f& (0+255),f,b
  7644  00096C  2B8F               	incf	(printf@f+1)& (0+255),f,b
  7645  00096E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  7646  00096E  6AF8               	clrf	tblptru,c
  7647  000970                     	endif
  7648  000970                     	if	0	;tblptru may be non-zero
  7649  000970                     	endif
  7650  000970  0008               	tblrd		*
  7651  000972  CFF5 F0A8          	movff	tablat,printf@c
  7652  000976  0100               	movlb	0	; () banked
  7653  000978  51A8               	movf	printf@c& (0+255),w,b
  7654  00097A  B4D8               	btfsc	status,2,c
  7655  00097C  0012               	return	
  7656  00097E  D602               	goto	l4289
  7657  000980                     __end_of_printf:
  7658                           	opt stack 0
  7659                           tblptru	equ	0xFF8
  7660                           tblptrh	equ	0xFF7
  7661                           tblptrl	equ	0xFF6
  7662                           tablat	equ	0xFF5
  7663                           prodh	equ	0xFF4
  7664                           prodl	equ	0xFF3
  7665                           intcon	equ	0xFF2
  7666                           intcon2	equ	0xFF1
  7667                           intcon3	equ	0xFF0
  7668                           indf0	equ	0xFEF
  7669                           postinc0	equ	0xFEE
  7670                           fsr0h	equ	0xFEA
  7671                           fsr0l	equ	0xFE9
  7672                           wreg	equ	0xFE8
  7673                           postdec1	equ	0xFE5
  7674                           fsr1l	equ	0xFE1
  7675                           indf2	equ	0xFDF
  7676                           postinc2	equ	0xFDE
  7677                           postdec2	equ	0xFDD
  7678                           fsr2h	equ	0xFDA
  7679                           fsr2l	equ	0xFD9
  7680                           status	equ	0xFD8
  7681                           
  7682 ;; *************** function _putch *****************
  7683 ;; Defined at:
  7684 ;;		line 19 in file "lcd.c"
  7685 ;; Parameters:    Size  Location     Type
  7686 ;;  data            1    wreg     unsigned char 
  7687 ;; Auto vars:     Size  Location     Type
  7688 ;;  data            1    2[BANK0 ] unsigned char 
  7689 ;; Return value:  Size  Location     Type
  7690 ;;                  1    wreg      void 
  7691 ;; Registers used:
  7692 ;;		wreg, status,2, status,0, cstack
  7693 ;; Tracked objects:
  7694 ;;		On entry : 0/0
  7695 ;;		On exit  : 0/0
  7696 ;;		Unchanged: 0/0
  7697 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7698 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7699 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7700 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7701 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7702 ;;Total ram usage:        1 bytes
  7703 ;; Hardware stack levels used:    1
  7704 ;; Hardware stack levels required when called:    8
  7705 ;; This function calls:
  7706 ;;		_lcdNibble
  7707 ;; This function is called by:
  7708 ;;		_printf
  7709 ;; This function uses a non-reentrant model
  7710 ;;
  7711                           
  7712                           	psect	text32
  7713  002BA0                     __ptext32:
  7714                           	opt stack 0
  7715  002BA0                     _putch:
  7716                           	opt stack 19
  7717                           
  7718                           ;incstack = 0
  7719                           ;putch@data stored from wreg
  7720  002BA0  0100               	movlb	0	; () banked
  7721  002BA2  6F82               	movwf	putch@data& (0+255),b
  7722                           
  7723                           ;lcd.c: 20: LATDbits.LATD2 = 1;
  7724  002BA4  848C               	bsf	3980,2,c	;volatile
  7725                           
  7726                           ;lcd.c: 21: lcdNibble(data);
  7727  002BA6  0100               	movlb	0	; () banked
  7728  002BA8  5182               	movf	putch@data& (0+255),w,b
  7729  002BAA  EC8B  F011         	call	_lcdNibble
  7730  002BAE  0012               	return		;funcret
  7731  002BB0                     __end_of_putch:
  7732                           	opt stack 0
  7733                           tblptru	equ	0xFF8
  7734                           tblptrh	equ	0xFF7
  7735                           tblptrl	equ	0xFF6
  7736                           tablat	equ	0xFF5
  7737                           prodh	equ	0xFF4
  7738                           prodl	equ	0xFF3
  7739                           intcon	equ	0xFF2
  7740                           intcon2	equ	0xFF1
  7741                           intcon3	equ	0xFF0
  7742                           indf0	equ	0xFEF
  7743                           postinc0	equ	0xFEE
  7744                           fsr0h	equ	0xFEA
  7745                           fsr0l	equ	0xFE9
  7746                           wreg	equ	0xFE8
  7747                           postdec1	equ	0xFE5
  7748                           fsr1l	equ	0xFE1
  7749                           indf2	equ	0xFDF
  7750                           postinc2	equ	0xFDE
  7751                           postdec2	equ	0xFDD
  7752                           fsr2h	equ	0xFDA
  7753                           fsr2l	equ	0xFD9
  7754                           status	equ	0xFD8
  7755                           
  7756 ;; *************** function _isdigit *****************
  7757 ;; Defined at:
  7758 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
  7759 ;; Parameters:    Size  Location     Type
  7760 ;;  c               1    wreg     unsigned char 
  7761 ;; Auto vars:     Size  Location     Type
  7762 ;;  c               1    2[BANK0 ] unsigned char 
  7763 ;; Return value:  Size  Location     Type
  7764 ;;		None               void
  7765 ;; Registers used:
  7766 ;;		wreg, status,2, status,0
  7767 ;; Tracked objects:
  7768 ;;		On entry : 0/0
  7769 ;;		On exit  : 0/0
  7770 ;;		Unchanged: 0/0
  7771 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7772 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7773 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7774 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7775 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7776 ;;Total ram usage:        3 bytes
  7777 ;; Hardware stack levels used:    1
  7778 ;; Hardware stack levels required when called:    7
  7779 ;; This function calls:
  7780 ;;		Nothing
  7781 ;; This function is called by:
  7782 ;;		_printf
  7783 ;; This function uses a non-reentrant model
  7784 ;;
  7785                           
  7786                           	psect	text33
  7787  002A04                     __ptext33:
  7788                           	opt stack 0
  7789  002A04                     _isdigit:
  7790                           	opt stack 20
  7791                           
  7792                           ;incstack = 0
  7793                           ;isdigit@c stored from wreg
  7794  002A04  0100               	movlb	0	; () banked
  7795  002A06  6F82               	movwf	isdigit@c& (0+255),b
  7796  002A08  0E00               	movlw	0
  7797  002A0A  0100               	movlb	0	; () banked
  7798  002A0C  6F81               	movwf	_isdigit$1648& (0+255),b
  7799                           
  7800                           ; BSR set to: 0
  7801  002A0E  0E3A               	movlw	58
  7802  002A10  0100               	movlb	0	; () banked
  7803  002A12  6182               	cpfslt	isdigit@c& (0+255),b
  7804  002A14  D007               	goto	l4139
  7805                           
  7806                           ; BSR set to: 0
  7807  002A16  0E2F               	movlw	47
  7808  002A18  0100               	movlb	0	; () banked
  7809  002A1A  6582               	cpfsgt	isdigit@c& (0+255),b
  7810  002A1C  D003               	goto	l4139
  7811                           
  7812                           ; BSR set to: 0
  7813  002A1E  0E01               	movlw	1
  7814  002A20  0100               	movlb	0	; () banked
  7815  002A22  6F81               	movwf	_isdigit$1648& (0+255),b
  7816  002A24                     l4139:
  7817                           
  7818                           ; BSR set to: 0
  7819  002A24  C081  F080         	movff	_isdigit$1648,??_isdigit
  7820  002A28  0100               	movlb	0	; () banked
  7821  002A2A  3180               	rrcf	??_isdigit& (0+255),w,b
  7822  002A2C  0012               	return	
  7823  002A2E                     __end_of_isdigit:
  7824                           	opt stack 0
  7825                           tblptru	equ	0xFF8
  7826                           tblptrh	equ	0xFF7
  7827                           tblptrl	equ	0xFF6
  7828                           tablat	equ	0xFF5
  7829                           prodh	equ	0xFF4
  7830                           prodl	equ	0xFF3
  7831                           intcon	equ	0xFF2
  7832                           intcon2	equ	0xFF1
  7833                           intcon3	equ	0xFF0
  7834                           indf0	equ	0xFEF
  7835                           postinc0	equ	0xFEE
  7836                           fsr0h	equ	0xFEA
  7837                           fsr0l	equ	0xFE9
  7838                           wreg	equ	0xFE8
  7839                           postdec1	equ	0xFE5
  7840                           fsr1l	equ	0xFE1
  7841                           indf2	equ	0xFDF
  7842                           postinc2	equ	0xFDE
  7843                           postdec2	equ	0xFDD
  7844                           fsr2h	equ	0xFDA
  7845                           fsr2l	equ	0xFD9
  7846                           status	equ	0xFD8
  7847                           
  7848 ;; *************** function ___wmul *****************
  7849 ;; Defined at:
  7850 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
  7851 ;; Parameters:    Size  Location     Type
  7852 ;;  multiplier      2    0[BANK0 ] unsigned int 
  7853 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  7854 ;; Auto vars:     Size  Location     Type
  7855 ;;  product         2    4[BANK0 ] unsigned int 
  7856 ;; Return value:  Size  Location     Type
  7857 ;;                  2    0[BANK0 ] unsigned int 
  7858 ;; Registers used:
  7859 ;;		wreg, status,2, status,0, prodl, prodh
  7860 ;; Tracked objects:
  7861 ;;		On entry : 0/0
  7862 ;;		On exit  : 0/0
  7863 ;;		Unchanged: 0/0
  7864 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7865 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7866 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7867 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7868 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7869 ;;Total ram usage:        6 bytes
  7870 ;; Hardware stack levels used:    1
  7871 ;; Hardware stack levels required when called:    7
  7872 ;; This function calls:
  7873 ;;		Nothing
  7874 ;; This function is called by:
  7875 ;;		_printf
  7876 ;; This function uses a non-reentrant model
  7877 ;;
  7878                           
  7879                           	psect	text34
  7880  002738                     __ptext34:
  7881                           	opt stack 0
  7882  002738                     ___wmul:
  7883                           	opt stack 20
  7884                           
  7885                           ; BSR set to: 0
  7886                           ;incstack = 0
  7887  002738  0100               	movlb	0	; () banked
  7888  00273A  5180               	movf	___wmul@multiplier& (0+255),w,b
  7889  00273C  0100               	movlb	0	; () banked
  7890  00273E  0382               	mulwf	___wmul@multiplicand& (0+255),b
  7891  002740  CFF3 F084          	movff	prodl,___wmul@product
  7892  002744  CFF4 F085          	movff	prodh,___wmul@product+1
  7893  002748  0100               	movlb	0	; () banked
  7894  00274A  5180               	movf	___wmul@multiplier& (0+255),w,b
  7895  00274C  0100               	movlb	0	; () banked
  7896  00274E  0383               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  7897  002750  50F3               	movf	prodl,w,c
  7898  002752  0100               	movlb	0	; () banked
  7899  002754  2785               	addwf	(___wmul@product+1)& (0+255),f,b
  7900  002756  0100               	movlb	0	; () banked
  7901  002758  5181               	movf	(___wmul@multiplier+1)& (0+255),w,b
  7902  00275A  0100               	movlb	0	; () banked
  7903  00275C  0382               	mulwf	___wmul@multiplicand& (0+255),b
  7904  00275E  50F3               	movf	prodl,w,c
  7905  002760  0100               	movlb	0	; () banked
  7906  002762  2785               	addwf	(___wmul@product+1)& (0+255),f,b
  7907                           
  7908                           ; BSR set to: 0
  7909  002764  C084  F080         	movff	___wmul@product,?___wmul
  7910  002768  C085  F081         	movff	___wmul@product+1,?___wmul+1
  7911  00276C  0012               	return	
  7912  00276E                     __end_of___wmul:
  7913                           	opt stack 0
  7914                           tblptru	equ	0xFF8
  7915                           tblptrh	equ	0xFF7
  7916                           tblptrl	equ	0xFF6
  7917                           tablat	equ	0xFF5
  7918                           prodh	equ	0xFF4
  7919                           prodl	equ	0xFF3
  7920                           intcon	equ	0xFF2
  7921                           intcon2	equ	0xFF1
  7922                           intcon3	equ	0xFF0
  7923                           indf0	equ	0xFEF
  7924                           postinc0	equ	0xFEE
  7925                           fsr0h	equ	0xFEA
  7926                           fsr0l	equ	0xFE9
  7927                           wreg	equ	0xFE8
  7928                           postdec1	equ	0xFE5
  7929                           fsr1l	equ	0xFE1
  7930                           indf2	equ	0xFDF
  7931                           postinc2	equ	0xFDE
  7932                           postdec2	equ	0xFDD
  7933                           fsr2h	equ	0xFDA
  7934                           fsr2l	equ	0xFD9
  7935                           status	equ	0xFD8
  7936                           
  7937 ;; *************** function ___lwmod *****************
  7938 ;; Defined at:
  7939 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
  7940 ;; Parameters:    Size  Location     Type
  7941 ;;  dividend        2    7[BANK0 ] unsigned int 
  7942 ;;  divisor         2    9[BANK0 ] unsigned int 
  7943 ;; Auto vars:     Size  Location     Type
  7944 ;;  counter         1   11[BANK0 ] unsigned char 
  7945 ;; Return value:  Size  Location     Type
  7946 ;;                  2    7[BANK0 ] unsigned int 
  7947 ;; Registers used:
  7948 ;;		wreg, status,2, status,0
  7949 ;; Tracked objects:
  7950 ;;		On entry : 0/0
  7951 ;;		On exit  : 0/0
  7952 ;;		Unchanged: 0/0
  7953 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7954 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7955 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7956 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7957 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7958 ;;Total ram usage:        5 bytes
  7959 ;; Hardware stack levels used:    1
  7960 ;; Hardware stack levels required when called:    7
  7961 ;; This function calls:
  7962 ;;		Nothing
  7963 ;; This function is called by:
  7964 ;;		_printf
  7965 ;; This function uses a non-reentrant model
  7966 ;;
  7967                           
  7968                           	psect	text35
  7969  00237E                     __ptext35:
  7970                           	opt stack 0
  7971  00237E                     ___lwmod:
  7972                           	opt stack 20
  7973                           
  7974                           ; BSR set to: 0
  7975                           ;incstack = 0
  7976  00237E  0100               	movlb	0	; () banked
  7977  002380  5189               	movf	___lwmod@divisor& (0+255),w,b
  7978  002382  0100               	movlb	0	; () banked
  7979  002384  118A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
  7980  002386  B4D8               	btfsc	status,2,c
  7981  002388  D026               	goto	l1742
  7982                           
  7983                           ; BSR set to: 0
  7984  00238A  0E01               	movlw	1
  7985  00238C  0100               	movlb	0	; () banked
  7986  00238E  6F8B               	movwf	___lwmod@counter& (0+255),b
  7987  002390  D006               	goto	l4177
  7988  002392                     l4175:
  7989                           
  7990                           ; BSR set to: 0
  7991  002392  0100               	movlb	0	; () banked
  7992  002394  90D8               	bcf	status,0,c
  7993  002396  3789               	rlcf	___lwmod@divisor& (0+255),f,b
  7994  002398  378A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  7995  00239A  0100               	movlb	0	; () banked
  7996  00239C  2B8B               	incf	___lwmod@counter& (0+255),f,b
  7997  00239E                     l4177:
  7998                           
  7999                           ; BSR set to: 0
  8000  00239E  0100               	movlb	0	; () banked
  8001  0023A0  AF8A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
  8002  0023A2  D7F7               	goto	l4175
  8003  0023A4                     l4179:
  8004                           
  8005                           ; BSR set to: 0
  8006  0023A4  0100               	movlb	0	; () banked
  8007  0023A6  5189               	movf	___lwmod@divisor& (0+255),w,b
  8008  0023A8  0100               	movlb	0	; () banked
  8009  0023AA  5D87               	subwf	___lwmod@dividend& (0+255),w,b
  8010  0023AC  0100               	movlb	0	; () banked
  8011  0023AE  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
  8012  0023B0  0100               	movlb	0	; () banked
  8013  0023B2  5988               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  8014  0023B4  A0D8               	btfss	status,0,c
  8015  0023B6  D008               	goto	l4183
  8016                           
  8017                           ; BSR set to: 0
  8018  0023B8  0100               	movlb	0	; () banked
  8019  0023BA  5189               	movf	___lwmod@divisor& (0+255),w,b
  8020  0023BC  0100               	movlb	0	; () banked
  8021  0023BE  5F87               	subwf	___lwmod@dividend& (0+255),f,b
  8022  0023C0  0100               	movlb	0	; () banked
  8023  0023C2  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
  8024  0023C4  0100               	movlb	0	; () banked
  8025  0023C6  5B88               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  8026  0023C8                     l4183:
  8027                           
  8028                           ; BSR set to: 0
  8029  0023C8  0100               	movlb	0	; () banked
  8030  0023CA  90D8               	bcf	status,0,c
  8031  0023CC  338A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  8032  0023CE  3389               	rrcf	___lwmod@divisor& (0+255),f,b
  8033                           
  8034                           ; BSR set to: 0
  8035  0023D0  0100               	movlb	0	; () banked
  8036  0023D2  2F8B               	decfsz	___lwmod@counter& (0+255),f,b
  8037  0023D4  D7E7               	goto	l4179
  8038  0023D6                     l1742:
  8039                           
  8040                           ; BSR set to: 0
  8041  0023D6  C087  F087         	movff	___lwmod@dividend,?___lwmod
  8042  0023DA  C088  F088         	movff	___lwmod@dividend+1,?___lwmod+1
  8043                           
  8044                           ; BSR set to: 0
  8045  0023DE  0012               	return		;funcret
  8046  0023E0                     __end_of___lwmod:
  8047                           	opt stack 0
  8048                           tblptru	equ	0xFF8
  8049                           tblptrh	equ	0xFF7
  8050                           tblptrl	equ	0xFF6
  8051                           tablat	equ	0xFF5
  8052                           prodh	equ	0xFF4
  8053                           prodl	equ	0xFF3
  8054                           intcon	equ	0xFF2
  8055                           intcon2	equ	0xFF1
  8056                           intcon3	equ	0xFF0
  8057                           indf0	equ	0xFEF
  8058                           postinc0	equ	0xFEE
  8059                           fsr0h	equ	0xFEA
  8060                           fsr0l	equ	0xFE9
  8061                           wreg	equ	0xFE8
  8062                           postdec1	equ	0xFE5
  8063                           fsr1l	equ	0xFE1
  8064                           indf2	equ	0xFDF
  8065                           postinc2	equ	0xFDE
  8066                           postdec2	equ	0xFDD
  8067                           fsr2h	equ	0xFDA
  8068                           fsr2l	equ	0xFD9
  8069                           status	equ	0xFD8
  8070                           
  8071 ;; *************** function ___lwdiv *****************
  8072 ;; Defined at:
  8073 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
  8074 ;; Parameters:    Size  Location     Type
  8075 ;;  dividend        2    0[BANK0 ] unsigned int 
  8076 ;;  divisor         2    2[BANK0 ] unsigned int 
  8077 ;; Auto vars:     Size  Location     Type
  8078 ;;  quotient        2    4[BANK0 ] unsigned int 
  8079 ;;  counter         1    6[BANK0 ] unsigned char 
  8080 ;; Return value:  Size  Location     Type
  8081 ;;                  2    0[BANK0 ] unsigned int 
  8082 ;; Registers used:
  8083 ;;		wreg, status,2, status,0
  8084 ;; Tracked objects:
  8085 ;;		On entry : 0/0
  8086 ;;		On exit  : 0/0
  8087 ;;		Unchanged: 0/0
  8088 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8089 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8090 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8091 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8092 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8093 ;;Total ram usage:        7 bytes
  8094 ;; Hardware stack levels used:    1
  8095 ;; Hardware stack levels required when called:    7
  8096 ;; This function calls:
  8097 ;;		Nothing
  8098 ;; This function is called by:
  8099 ;;		_printf
  8100 ;; This function uses a non-reentrant model
  8101 ;;
  8102                           
  8103                           	psect	text36
  8104  0021B6                     __ptext36:
  8105                           	opt stack 0
  8106  0021B6                     ___lwdiv:
  8107                           	opt stack 20
  8108                           
  8109                           ; BSR set to: 0
  8110                           ;incstack = 0
  8111  0021B6  0E00               	movlw	0
  8112  0021B8  0100               	movlb	0	; () banked
  8113  0021BA  6F85               	movwf	(___lwdiv@quotient+1)& (0+255),b
  8114  0021BC  0E00               	movlw	0
  8115  0021BE  6F84               	movwf	___lwdiv@quotient& (0+255),b
  8116                           
  8117                           ; BSR set to: 0
  8118  0021C0  0100               	movlb	0	; () banked
  8119  0021C2  5182               	movf	___lwdiv@divisor& (0+255),w,b
  8120  0021C4  0100               	movlb	0	; () banked
  8121  0021C6  1183               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  8122  0021C8  B4D8               	btfsc	status,2,c
  8123  0021CA  D02C               	goto	l1732
  8124                           
  8125                           ; BSR set to: 0
  8126  0021CC  0E01               	movlw	1
  8127  0021CE  0100               	movlb	0	; () banked
  8128  0021D0  6F86               	movwf	___lwdiv@counter& (0+255),b
  8129  0021D2  D006               	goto	l4157
  8130  0021D4                     l4155:
  8131                           
  8132                           ; BSR set to: 0
  8133  0021D4  0100               	movlb	0	; () banked
  8134  0021D6  90D8               	bcf	status,0,c
  8135  0021D8  3782               	rlcf	___lwdiv@divisor& (0+255),f,b
  8136  0021DA  3783               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  8137  0021DC  0100               	movlb	0	; () banked
  8138  0021DE  2B86               	incf	___lwdiv@counter& (0+255),f,b
  8139  0021E0                     l4157:
  8140                           
  8141                           ; BSR set to: 0
  8142  0021E0  0100               	movlb	0	; () banked
  8143  0021E2  AF83               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  8144  0021E4  D7F7               	goto	l4155
  8145  0021E6                     l4159:
  8146                           
  8147                           ; BSR set to: 0
  8148  0021E6  0100               	movlb	0	; () banked
  8149  0021E8  90D8               	bcf	status,0,c
  8150  0021EA  3784               	rlcf	___lwdiv@quotient& (0+255),f,b
  8151  0021EC  3785               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  8152                           
  8153                           ; BSR set to: 0
  8154  0021EE  0100               	movlb	0	; () banked
  8155  0021F0  5182               	movf	___lwdiv@divisor& (0+255),w,b
  8156  0021F2  0100               	movlb	0	; () banked
  8157  0021F4  5D80               	subwf	___lwdiv@dividend& (0+255),w,b
  8158  0021F6  0100               	movlb	0	; () banked
  8159  0021F8  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  8160  0021FA  0100               	movlb	0	; () banked
  8161  0021FC  5981               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  8162  0021FE  A0D8               	btfss	status,0,c
  8163  002200  D00A               	goto	l4167
  8164                           
  8165                           ; BSR set to: 0
  8166  002202  0100               	movlb	0	; () banked
  8167  002204  5182               	movf	___lwdiv@divisor& (0+255),w,b
  8168  002206  0100               	movlb	0	; () banked
  8169  002208  5F80               	subwf	___lwdiv@dividend& (0+255),f,b
  8170  00220A  0100               	movlb	0	; () banked
  8171  00220C  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  8172  00220E  0100               	movlb	0	; () banked
  8173  002210  5B81               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  8174                           
  8175                           ; BSR set to: 0
  8176  002212  0100               	movlb	0	; () banked
  8177  002214  8184               	bsf	___lwdiv@quotient& (0+255),0,b
  8178  002216                     l4167:
  8179                           
  8180                           ; BSR set to: 0
  8181  002216  0100               	movlb	0	; () banked
  8182  002218  90D8               	bcf	status,0,c
  8183  00221A  3383               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  8184  00221C  3382               	rrcf	___lwdiv@divisor& (0+255),f,b
  8185                           
  8186                           ; BSR set to: 0
  8187  00221E  0100               	movlb	0	; () banked
  8188  002220  2F86               	decfsz	___lwdiv@counter& (0+255),f,b
  8189  002222  D7E1               	goto	l4159
  8190  002224                     l1732:
  8191                           
  8192                           ; BSR set to: 0
  8193  002224  C084  F080         	movff	___lwdiv@quotient,?___lwdiv
  8194  002228  C085  F081         	movff	___lwdiv@quotient+1,?___lwdiv+1
  8195                           
  8196                           ; BSR set to: 0
  8197  00222C  0012               	return		;funcret
  8198  00222E                     __end_of___lwdiv:
  8199                           	opt stack 0
  8200                           tblptru	equ	0xFF8
  8201                           tblptrh	equ	0xFF7
  8202                           tblptrl	equ	0xFF6
  8203                           tablat	equ	0xFF5
  8204                           prodh	equ	0xFF4
  8205                           prodl	equ	0xFF3
  8206                           intcon	equ	0xFF2
  8207                           intcon2	equ	0xFF1
  8208                           intcon3	equ	0xFF0
  8209                           indf0	equ	0xFEF
  8210                           postinc0	equ	0xFEE
  8211                           fsr0h	equ	0xFEA
  8212                           fsr0l	equ	0xFE9
  8213                           wreg	equ	0xFE8
  8214                           postdec1	equ	0xFE5
  8215                           fsr1l	equ	0xFE1
  8216                           indf2	equ	0xFDF
  8217                           postinc2	equ	0xFDE
  8218                           postdec2	equ	0xFDD
  8219                           fsr2h	equ	0xFDA
  8220                           fsr2l	equ	0xFD9
  8221                           status	equ	0xFD8
  8222                           
  8223 ;; *************** function _lcdInst *****************
  8224 ;; Defined at:
  8225 ;;		line 14 in file "lcd.c"
  8226 ;; Parameters:    Size  Location     Type
  8227 ;;  data            1    wreg     unsigned char 
  8228 ;; Auto vars:     Size  Location     Type
  8229 ;;  data            1    2[BANK0 ] unsigned char 
  8230 ;; Return value:  Size  Location     Type
  8231 ;;                  1    wreg      void 
  8232 ;; Registers used:
  8233 ;;		wreg, status,2, status,0, cstack
  8234 ;; Tracked objects:
  8235 ;;		On entry : 0/0
  8236 ;;		On exit  : 0/0
  8237 ;;		Unchanged: 0/0
  8238 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8239 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8240 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8241 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8242 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8243 ;;Total ram usage:        1 bytes
  8244 ;; Hardware stack levels used:    1
  8245 ;; Hardware stack levels required when called:    8
  8246 ;; This function calls:
  8247 ;;		_lcdNibble
  8248 ;; This function is called by:
  8249 ;;		_UI
  8250 ;;		_change_state_to_menu_start
  8251 ;;		_change_state_to_menu_12
  8252 ;;		_change_state_to_menu_22
  8253 ;;		_initLCD
  8254 ;;		_printRTC
  8255 ;;		_Loading
  8256 ;; This function uses a non-reentrant model
  8257 ;;
  8258                           
  8259                           	psect	text37
  8260  002BB0                     __ptext37:
  8261                           	opt stack 0
  8262  002BB0                     _lcdInst:
  8263                           	opt stack 20
  8264                           
  8265                           ; BSR set to: 0
  8266                           ;incstack = 0
  8267                           ;lcdInst@data stored from wreg
  8268  002BB0  0100               	movlb	0	; () banked
  8269  002BB2  6F82               	movwf	lcdInst@data& (0+255),b
  8270                           
  8271                           ;lcd.c: 15: LATDbits.LATD2 = 0;
  8272  002BB4  948C               	bcf	3980,2,c	;volatile
  8273                           
  8274                           ;lcd.c: 16: lcdNibble(data);
  8275  002BB6  0100               	movlb	0	; () banked
  8276  002BB8  5182               	movf	lcdInst@data& (0+255),w,b
  8277  002BBA  EC8B  F011         	call	_lcdNibble
  8278  002BBE  0012               	return		;funcret
  8279  002BC0                     __end_of_lcdInst:
  8280                           	opt stack 0
  8281                           tblptru	equ	0xFF8
  8282                           tblptrh	equ	0xFF7
  8283                           tblptrl	equ	0xFF6
  8284                           tablat	equ	0xFF5
  8285                           prodh	equ	0xFF4
  8286                           prodl	equ	0xFF3
  8287                           intcon	equ	0xFF2
  8288                           intcon2	equ	0xFF1
  8289                           intcon3	equ	0xFF0
  8290                           indf0	equ	0xFEF
  8291                           postinc0	equ	0xFEE
  8292                           fsr0h	equ	0xFEA
  8293                           fsr0l	equ	0xFE9
  8294                           wreg	equ	0xFE8
  8295                           postdec1	equ	0xFE5
  8296                           fsr1l	equ	0xFE1
  8297                           indf2	equ	0xFDF
  8298                           postinc2	equ	0xFDE
  8299                           postdec2	equ	0xFDD
  8300                           fsr2h	equ	0xFDA
  8301                           fsr2l	equ	0xFD9
  8302                           status	equ	0xFD8
  8303                           
  8304 ;; *************** function _lcdNibble *****************
  8305 ;; Defined at:
  8306 ;;		line 24 in file "lcd.c"
  8307 ;; Parameters:    Size  Location     Type
  8308 ;;  data            1    wreg     unsigned char 
  8309 ;; Auto vars:     Size  Location     Type
  8310 ;;  data            1    1[BANK0 ] unsigned char 
  8311 ;;  temp            1    0[BANK0 ] unsigned char 
  8312 ;; Return value:  Size  Location     Type
  8313 ;;                  1    wreg      void 
  8314 ;; Registers used:
  8315 ;;		wreg, status,2, status,0
  8316 ;; Tracked objects:
  8317 ;;		On entry : 0/0
  8318 ;;		On exit  : 0/0
  8319 ;;		Unchanged: 0/0
  8320 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8321 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8322 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8323 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8324 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8325 ;;Total ram usage:        2 bytes
  8326 ;; Hardware stack levels used:    1
  8327 ;; Hardware stack levels required when called:    7
  8328 ;; This function calls:
  8329 ;;		Nothing
  8330 ;; This function is called by:
  8331 ;;		_lcdInst
  8332 ;;		_putch
  8333 ;; This function uses a non-reentrant model
  8334 ;;
  8335                           
  8336                           	psect	text38
  8337  002316                     __ptext38:
  8338                           	opt stack 0
  8339  002316                     _lcdNibble:
  8340                           	opt stack 20
  8341                           
  8342                           ;incstack = 0
  8343                           ;lcdNibble@data stored from wreg
  8344  002316  0100               	movlb	0	; () banked
  8345  002318  6F81               	movwf	lcdNibble@data& (0+255),b
  8346                           
  8347                           ;lcd.c: 26: char temp = data & 0xF0;
  8348  00231A  0100               	movlb	0	; () banked
  8349  00231C  5181               	movf	lcdNibble@data& (0+255),w,b
  8350  00231E  0BF0               	andlw	240
  8351  002320  0100               	movlb	0	; () banked
  8352  002322  6F80               	movwf	lcdNibble@temp& (0+255),b
  8353                           
  8354                           ;lcd.c: 27: LATD = LATD & 0x0F;
  8355  002324  508C               	movf	3980,w,c	;volatile
  8356  002326  0B0F               	andlw	15
  8357  002328  6E8C               	movwf	3980,c	;volatile
  8358                           
  8359                           ;lcd.c: 28: LATD = temp | LATD;
  8360  00232A  0100               	movlb	0	; () banked
  8361  00232C  5180               	movf	lcdNibble@temp& (0+255),w,b
  8362  00232E  108C               	iorwf	3980,w,c	;volatile
  8363  002330  6E8C               	movwf	3980,c	;volatile
  8364                           
  8365                           ; BSR set to: 0
  8366                           ;lcd.c: 30: LATDbits.LATD3 = 1;
  8367  002332  868C               	bsf	3980,3,c	;volatile
  8368                           
  8369                           ; BSR set to: 0
  8370                           ;lcd.c: 31: _delay((unsigned long)((25)*(32000000/4000000.0)));
  8371  002334  0E42               	movlw	66
  8372  002336                     u5357:
  8373  002336  2EE8               	decfsz	wreg,f,c
  8374  002338  D7FE               	bra	u5357
  8375  00233A  D000               	nop2	
  8376                           
  8377                           ;lcd.c: 32: LATDbits.LATD3 = 0;
  8378  00233C  968C               	bcf	3980,3,c	;volatile
  8379                           
  8380                           ;lcd.c: 33: _delay((unsigned long)((25)*(32000000/4000000.0)));
  8381  00233E  0E42               	movlw	66
  8382  002340                     u5367:
  8383  002340  2EE8               	decfsz	wreg,f,c
  8384  002342  D7FE               	bra	u5367
  8385  002344  D000               	nop2	
  8386                           
  8387                           ;lcd.c: 35: data = data << 4;
  8388  002346  0100               	movlb	0	; () banked
  8389  002348  3981               	swapf	lcdNibble@data& (0+255),w,b
  8390  00234A  0BF0               	andlw	240
  8391  00234C  0100               	movlb	0	; () banked
  8392  00234E  6F81               	movwf	lcdNibble@data& (0+255),b
  8393                           
  8394                           ;lcd.c: 37: temp = data & 0xF0;
  8395  002350  0100               	movlb	0	; () banked
  8396  002352  5181               	movf	lcdNibble@data& (0+255),w,b
  8397  002354  0BF0               	andlw	240
  8398  002356  0100               	movlb	0	; () banked
  8399  002358  6F80               	movwf	lcdNibble@temp& (0+255),b
  8400                           
  8401                           ;lcd.c: 38: LATD = LATD & 0x0F;
  8402  00235A  508C               	movf	3980,w,c	;volatile
  8403  00235C  0B0F               	andlw	15
  8404  00235E  6E8C               	movwf	3980,c	;volatile
  8405                           
  8406                           ;lcd.c: 39: LATD = temp | LATD;
  8407  002360  0100               	movlb	0	; () banked
  8408  002362  5180               	movf	lcdNibble@temp& (0+255),w,b
  8409  002364  108C               	iorwf	3980,w,c	;volatile
  8410  002366  6E8C               	movwf	3980,c	;volatile
  8411                           
  8412                           ; BSR set to: 0
  8413                           ;lcd.c: 41: LATDbits.LATD3 = 1;
  8414  002368  868C               	bsf	3980,3,c	;volatile
  8415                           
  8416                           ; BSR set to: 0
  8417                           ;lcd.c: 42: _delay((unsigned long)((25)*(32000000/4000000.0)));
  8418  00236A  0E42               	movlw	66
  8419  00236C                     u5377:
  8420  00236C  2EE8               	decfsz	wreg,f,c
  8421  00236E  D7FE               	bra	u5377
  8422  002370  D000               	nop2	
  8423                           
  8424                           ;lcd.c: 43: LATDbits.LATD3 = 0;
  8425  002372  968C               	bcf	3980,3,c	;volatile
  8426                           
  8427                           ;lcd.c: 44: _delay((unsigned long)((25)*(32000000/4000000.0)));
  8428  002374  0E42               	movlw	66
  8429  002376                     u5387:
  8430  002376  2EE8               	decfsz	wreg,f,c
  8431  002378  D7FE               	bra	u5387
  8432  00237A  D000               	nop2	
  8433  00237C  0012               	return		;funcret
  8434  00237E                     __end_of_lcdNibble:
  8435                           	opt stack 0
  8436                           tblptru	equ	0xFF8
  8437                           tblptrh	equ	0xFF7
  8438                           tblptrl	equ	0xFF6
  8439                           tablat	equ	0xFF5
  8440                           prodh	equ	0xFF4
  8441                           prodl	equ	0xFF3
  8442                           intcon	equ	0xFF2
  8443                           intcon2	equ	0xFF1
  8444                           intcon3	equ	0xFF0
  8445                           indf0	equ	0xFEF
  8446                           postinc0	equ	0xFEE
  8447                           fsr0h	equ	0xFEA
  8448                           fsr0l	equ	0xFE9
  8449                           wreg	equ	0xFE8
  8450                           postdec1	equ	0xFE5
  8451                           fsr1l	equ	0xFE1
  8452                           indf2	equ	0xFDF
  8453                           postinc2	equ	0xFDE
  8454                           postdec2	equ	0xFDD
  8455                           fsr2h	equ	0xFDA
  8456                           fsr2l	equ	0xFD9
  8457                           status	equ	0xFD8
  8458                           
  8459 ;; *************** function ___awmod *****************
  8460 ;; Defined at:
  8461 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
  8462 ;; Parameters:    Size  Location     Type
  8463 ;;  dividend        2    0[BANK0 ] int 
  8464 ;;  divisor         2    2[BANK0 ] int 
  8465 ;; Auto vars:     Size  Location     Type
  8466 ;;  sign            1    5[BANK0 ] unsigned char 
  8467 ;;  counter         1    4[BANK0 ] unsigned char 
  8468 ;; Return value:  Size  Location     Type
  8469 ;;                  2    0[BANK0 ] int 
  8470 ;; Registers used:
  8471 ;;		wreg, status,2, status,0
  8472 ;; Tracked objects:
  8473 ;;		On entry : 0/0
  8474 ;;		On exit  : 0/0
  8475 ;;		Unchanged: 0/0
  8476 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8477 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8478 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8479 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8480 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8481 ;;Total ram usage:        6 bytes
  8482 ;; Hardware stack levels used:    1
  8483 ;; Hardware stack levels required when called:    7
  8484 ;; This function calls:
  8485 ;;		Nothing
  8486 ;; This function is called by:
  8487 ;;		_UI
  8488 ;; This function uses a non-reentrant model
  8489 ;;
  8490                           
  8491                           	psect	text39
  8492  001EF4                     __ptext39:
  8493                           	opt stack 0
  8494  001EF4                     ___awmod:
  8495                           	opt stack 22
  8496                           
  8497                           ;incstack = 0
  8498  001EF4  0E00               	movlw	0
  8499  001EF6  0100               	movlb	0	; () banked
  8500  001EF8  6F85               	movwf	___awmod@sign& (0+255),b
  8501                           
  8502                           ; BSR set to: 0
  8503  001EFA  0100               	movlb	0	; () banked
  8504  001EFC  AF81               	btfss	(___awmod@dividend+1)& (0+255),7,b
  8505  001EFE  D008               	goto	l5271
  8506                           
  8507                           ; BSR set to: 0
  8508  001F00  0100               	movlb	0	; () banked
  8509  001F02  6D80               	negf	___awmod@dividend& (0+255),b
  8510  001F04  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
  8511  001F06  B0D8               	btfsc	status,0,c
  8512  001F08  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
  8513                           
  8514                           ; BSR set to: 0
  8515  001F0A  0E01               	movlw	1
  8516  001F0C  0100               	movlb	0	; () banked
  8517  001F0E  6F85               	movwf	___awmod@sign& (0+255),b
  8518  001F10                     l5271:
  8519                           
  8520                           ; BSR set to: 0
  8521  001F10  0100               	movlb	0	; () banked
  8522  001F12  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
  8523  001F14  D005               	goto	l5275
  8524                           
  8525                           ; BSR set to: 0
  8526  001F16  0100               	movlb	0	; () banked
  8527  001F18  6D82               	negf	___awmod@divisor& (0+255),b
  8528  001F1A  1F83               	comf	(___awmod@divisor+1)& (0+255),f,b
  8529  001F1C  B0D8               	btfsc	status,0,c
  8530  001F1E  2B83               	incf	(___awmod@divisor+1)& (0+255),f,b
  8531  001F20                     l5275:
  8532                           
  8533                           ; BSR set to: 0
  8534  001F20  0100               	movlb	0	; () banked
  8535  001F22  5182               	movf	___awmod@divisor& (0+255),w,b
  8536  001F24  0100               	movlb	0	; () banked
  8537  001F26  1183               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  8538  001F28  B4D8               	btfsc	status,2,c
  8539  001F2A  D026               	goto	l5291
  8540                           
  8541                           ; BSR set to: 0
  8542  001F2C  0E01               	movlw	1
  8543  001F2E  0100               	movlb	0	; () banked
  8544  001F30  6F84               	movwf	___awmod@counter& (0+255),b
  8545  001F32  D006               	goto	l5281
  8546  001F34                     l5279:
  8547                           
  8548                           ; BSR set to: 0
  8549  001F34  0100               	movlb	0	; () banked
  8550  001F36  90D8               	bcf	status,0,c
  8551  001F38  3782               	rlcf	___awmod@divisor& (0+255),f,b
  8552  001F3A  3783               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  8553  001F3C  0100               	movlb	0	; () banked
  8554  001F3E  2B84               	incf	___awmod@counter& (0+255),f,b
  8555  001F40                     l5281:
  8556                           
  8557                           ; BSR set to: 0
  8558  001F40  0100               	movlb	0	; () banked
  8559  001F42  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
  8560  001F44  D7F7               	goto	l5279
  8561  001F46                     l5283:
  8562                           
  8563                           ; BSR set to: 0
  8564  001F46  0100               	movlb	0	; () banked
  8565  001F48  5182               	movf	___awmod@divisor& (0+255),w,b
  8566  001F4A  0100               	movlb	0	; () banked
  8567  001F4C  5D80               	subwf	___awmod@dividend& (0+255),w,b
  8568  001F4E  0100               	movlb	0	; () banked
  8569  001F50  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
  8570  001F52  0100               	movlb	0	; () banked
  8571  001F54  5981               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  8572  001F56  A0D8               	btfss	status,0,c
  8573  001F58  D008               	goto	l5287
  8574                           
  8575                           ; BSR set to: 0
  8576  001F5A  0100               	movlb	0	; () banked
  8577  001F5C  5182               	movf	___awmod@divisor& (0+255),w,b
  8578  001F5E  0100               	movlb	0	; () banked
  8579  001F60  5F80               	subwf	___awmod@dividend& (0+255),f,b
  8580  001F62  0100               	movlb	0	; () banked
  8581  001F64  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
  8582  001F66  0100               	movlb	0	; () banked
  8583  001F68  5B81               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  8584  001F6A                     l5287:
  8585                           
  8586                           ; BSR set to: 0
  8587  001F6A  0100               	movlb	0	; () banked
  8588  001F6C  90D8               	bcf	status,0,c
  8589  001F6E  3383               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  8590  001F70  3382               	rrcf	___awmod@divisor& (0+255),f,b
  8591                           
  8592                           ; BSR set to: 0
  8593  001F72  0100               	movlb	0	; () banked
  8594  001F74  2F84               	decfsz	___awmod@counter& (0+255),f,b
  8595  001F76  D7E7               	goto	l5283
  8596  001F78                     l5291:
  8597                           
  8598                           ; BSR set to: 0
  8599  001F78  0100               	movlb	0	; () banked
  8600  001F7A  5185               	movf	___awmod@sign& (0+255),w,b
  8601  001F7C  0100               	movlb	0	; () banked
  8602  001F7E  B4D8               	btfsc	status,2,c
  8603  001F80  D005               	goto	l5295
  8604                           
  8605                           ; BSR set to: 0
  8606  001F82  0100               	movlb	0	; () banked
  8607  001F84  6D80               	negf	___awmod@dividend& (0+255),b
  8608  001F86  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
  8609  001F88  B0D8               	btfsc	status,0,c
  8610  001F8A  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
  8611  001F8C                     l5295:
  8612                           
  8613                           ; BSR set to: 0
  8614  001F8C  C080  F080         	movff	___awmod@dividend,?___awmod
  8615  001F90  C081  F081         	movff	___awmod@dividend+1,?___awmod+1
  8616  001F94  0012               	return	
  8617  001F96                     __end_of___awmod:
  8618                           	opt stack 0
  8619                           tblptru	equ	0xFF8
  8620                           tblptrh	equ	0xFF7
  8621                           tblptrl	equ	0xFF6
  8622                           tablat	equ	0xFF5
  8623                           prodh	equ	0xFF4
  8624                           prodl	equ	0xFF3
  8625                           intcon	equ	0xFF2
  8626                           intcon2	equ	0xFF1
  8627                           intcon3	equ	0xFF0
  8628                           indf0	equ	0xFEF
  8629                           postinc0	equ	0xFEE
  8630                           fsr0h	equ	0xFEA
  8631                           fsr0l	equ	0xFE9
  8632                           wreg	equ	0xFE8
  8633                           postdec1	equ	0xFE5
  8634                           fsr1l	equ	0xFE1
  8635                           indf2	equ	0xFDF
  8636                           postinc2	equ	0xFDE
  8637                           postdec2	equ	0xFDD
  8638                           fsr2h	equ	0xFDA
  8639                           fsr2l	equ	0xFD9
  8640                           status	equ	0xFD8
  8641                           
  8642 ;; *************** function ___awdiv *****************
  8643 ;; Defined at:
  8644 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
  8645 ;; Parameters:    Size  Location     Type
  8646 ;;  dividend        2    6[BANK0 ] int 
  8647 ;;  divisor         2    8[BANK0 ] int 
  8648 ;; Auto vars:     Size  Location     Type
  8649 ;;  quotient        2   12[BANK0 ] int 
  8650 ;;  sign            1   11[BANK0 ] unsigned char 
  8651 ;;  counter         1   10[BANK0 ] unsigned char 
  8652 ;; Return value:  Size  Location     Type
  8653 ;;                  2    6[BANK0 ] int 
  8654 ;; Registers used:
  8655 ;;		wreg, status,2, status,0
  8656 ;; Tracked objects:
  8657 ;;		On entry : 0/0
  8658 ;;		On exit  : 0/0
  8659 ;;		Unchanged: 0/0
  8660 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8661 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8662 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8663 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8664 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8665 ;;Total ram usage:        8 bytes
  8666 ;; Hardware stack levels used:    1
  8667 ;; Hardware stack levels required when called:    7
  8668 ;; This function calls:
  8669 ;;		Nothing
  8670 ;; This function is called by:
  8671 ;;		_UI
  8672 ;; This function uses a non-reentrant model
  8673 ;;
  8674                           
  8675                           	psect	text40
  8676  001CD0                     __ptext40:
  8677                           	opt stack 0
  8678  001CD0                     ___awdiv:
  8679                           	opt stack 22
  8680                           
  8681                           ; BSR set to: 0
  8682                           ;incstack = 0
  8683  001CD0  0E00               	movlw	0
  8684  001CD2  0100               	movlb	0	; () banked
  8685  001CD4  6F8B               	movwf	___awdiv@sign& (0+255),b
  8686                           
  8687                           ; BSR set to: 0
  8688  001CD6  0100               	movlb	0	; () banked
  8689  001CD8  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  8690  001CDA  D008               	goto	l5227
  8691                           
  8692                           ; BSR set to: 0
  8693  001CDC  0100               	movlb	0	; () banked
  8694  001CDE  6D88               	negf	___awdiv@divisor& (0+255),b
  8695  001CE0  1F89               	comf	(___awdiv@divisor+1)& (0+255),f,b
  8696  001CE2  B0D8               	btfsc	status,0,c
  8697  001CE4  2B89               	incf	(___awdiv@divisor+1)& (0+255),f,b
  8698                           
  8699                           ; BSR set to: 0
  8700  001CE6  0E01               	movlw	1
  8701  001CE8  0100               	movlb	0	; () banked
  8702  001CEA  6F8B               	movwf	___awdiv@sign& (0+255),b
  8703  001CEC                     l5227:
  8704                           
  8705                           ; BSR set to: 0
  8706  001CEC  0100               	movlb	0	; () banked
  8707  001CEE  AF87               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  8708  001CF0  D008               	goto	l5233
  8709                           
  8710                           ; BSR set to: 0
  8711  001CF2  0100               	movlb	0	; () banked
  8712  001CF4  6D86               	negf	___awdiv@dividend& (0+255),b
  8713  001CF6  1F87               	comf	(___awdiv@dividend+1)& (0+255),f,b
  8714  001CF8  B0D8               	btfsc	status,0,c
  8715  001CFA  2B87               	incf	(___awdiv@dividend+1)& (0+255),f,b
  8716                           
  8717                           ; BSR set to: 0
  8718  001CFC  0E01               	movlw	1
  8719  001CFE  0100               	movlb	0	; () banked
  8720  001D00  1B8B               	xorwf	___awdiv@sign& (0+255),f,b
  8721  001D02                     l5233:
  8722                           
  8723                           ; BSR set to: 0
  8724  001D02  0E00               	movlw	0
  8725  001D04  0100               	movlb	0	; () banked
  8726  001D06  6F8D               	movwf	(___awdiv@quotient+1)& (0+255),b
  8727  001D08  0E00               	movlw	0
  8728  001D0A  6F8C               	movwf	___awdiv@quotient& (0+255),b
  8729                           
  8730                           ; BSR set to: 0
  8731  001D0C  0100               	movlb	0	; () banked
  8732  001D0E  5188               	movf	___awdiv@divisor& (0+255),w,b
  8733  001D10  0100               	movlb	0	; () banked
  8734  001D12  1189               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  8735  001D14  B4D8               	btfsc	status,2,c
  8736  001D16  D02C               	goto	l5255
  8737                           
  8738                           ; BSR set to: 0
  8739  001D18  0E01               	movlw	1
  8740  001D1A  0100               	movlb	0	; () banked
  8741  001D1C  6F8A               	movwf	___awdiv@counter& (0+255),b
  8742  001D1E  D006               	goto	l5241
  8743  001D20                     l5239:
  8744                           
  8745                           ; BSR set to: 0
  8746  001D20  0100               	movlb	0	; () banked
  8747  001D22  90D8               	bcf	status,0,c
  8748  001D24  3788               	rlcf	___awdiv@divisor& (0+255),f,b
  8749  001D26  3789               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  8750  001D28  0100               	movlb	0	; () banked
  8751  001D2A  2B8A               	incf	___awdiv@counter& (0+255),f,b
  8752  001D2C                     l5241:
  8753                           
  8754                           ; BSR set to: 0
  8755  001D2C  0100               	movlb	0	; () banked
  8756  001D2E  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  8757  001D30  D7F7               	goto	l5239
  8758  001D32                     l5243:
  8759                           
  8760                           ; BSR set to: 0
  8761  001D32  0100               	movlb	0	; () banked
  8762  001D34  90D8               	bcf	status,0,c
  8763  001D36  378C               	rlcf	___awdiv@quotient& (0+255),f,b
  8764  001D38  378D               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  8765                           
  8766                           ; BSR set to: 0
  8767  001D3A  0100               	movlb	0	; () banked
  8768  001D3C  5188               	movf	___awdiv@divisor& (0+255),w,b
  8769  001D3E  0100               	movlb	0	; () banked
  8770  001D40  5D86               	subwf	___awdiv@dividend& (0+255),w,b
  8771  001D42  0100               	movlb	0	; () banked
  8772  001D44  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
  8773  001D46  0100               	movlb	0	; () banked
  8774  001D48  5987               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  8775  001D4A  A0D8               	btfss	status,0,c
  8776  001D4C  D00A               	goto	l5251
  8777                           
  8778                           ; BSR set to: 0
  8779  001D4E  0100               	movlb	0	; () banked
  8780  001D50  5188               	movf	___awdiv@divisor& (0+255),w,b
  8781  001D52  0100               	movlb	0	; () banked
  8782  001D54  5F86               	subwf	___awdiv@dividend& (0+255),f,b
  8783  001D56  0100               	movlb	0	; () banked
  8784  001D58  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
  8785  001D5A  0100               	movlb	0	; () banked
  8786  001D5C  5B87               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  8787                           
  8788                           ; BSR set to: 0
  8789  001D5E  0100               	movlb	0	; () banked
  8790  001D60  818C               	bsf	___awdiv@quotient& (0+255),0,b
  8791  001D62                     l5251:
  8792                           
  8793                           ; BSR set to: 0
  8794  001D62  0100               	movlb	0	; () banked
  8795  001D64  90D8               	bcf	status,0,c
  8796  001D66  3389               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  8797  001D68  3388               	rrcf	___awdiv@divisor& (0+255),f,b
  8798                           
  8799                           ; BSR set to: 0
  8800  001D6A  0100               	movlb	0	; () banked
  8801  001D6C  2F8A               	decfsz	___awdiv@counter& (0+255),f,b
  8802  001D6E  D7E1               	goto	l5243
  8803  001D70                     l5255:
  8804                           
  8805                           ; BSR set to: 0
  8806  001D70  0100               	movlb	0	; () banked
  8807  001D72  518B               	movf	___awdiv@sign& (0+255),w,b
  8808  001D74  0100               	movlb	0	; () banked
  8809  001D76  B4D8               	btfsc	status,2,c
  8810  001D78  D005               	goto	l5259
  8811                           
  8812                           ; BSR set to: 0
  8813  001D7A  0100               	movlb	0	; () banked
  8814  001D7C  6D8C               	negf	___awdiv@quotient& (0+255),b
  8815  001D7E  1F8D               	comf	(___awdiv@quotient+1)& (0+255),f,b
  8816  001D80  B0D8               	btfsc	status,0,c
  8817  001D82  2B8D               	incf	(___awdiv@quotient+1)& (0+255),f,b
  8818  001D84                     l5259:
  8819                           
  8820                           ; BSR set to: 0
  8821  001D84  C08C  F086         	movff	___awdiv@quotient,?___awdiv
  8822  001D88  C08D  F087         	movff	___awdiv@quotient+1,?___awdiv+1
  8823  001D8C  0012               	return	
  8824  001D8E                     __end_of___awdiv:
  8825                           	opt stack 0
  8826                           tblptru	equ	0xFF8
  8827                           tblptrh	equ	0xFF7
  8828                           tblptrl	equ	0xFF6
  8829                           tablat	equ	0xFF5
  8830                           prodh	equ	0xFF4
  8831                           prodl	equ	0xFF3
  8832                           intcon	equ	0xFF2
  8833                           intcon2	equ	0xFF1
  8834                           intcon3	equ	0xFF0
  8835                           indf0	equ	0xFEF
  8836                           postinc0	equ	0xFEE
  8837                           fsr0h	equ	0xFEA
  8838                           fsr0l	equ	0xFE9
  8839                           wreg	equ	0xFE8
  8840                           postdec1	equ	0xFE5
  8841                           fsr1l	equ	0xFE1
  8842                           indf2	equ	0xFDF
  8843                           postinc2	equ	0xFDE
  8844                           postdec2	equ	0xFDD
  8845                           fsr2h	equ	0xFDA
  8846                           fsr2l	equ	0xFD9
  8847                           status	equ	0xFD8
  8848                           
  8849 ;; *************** function _PortTestA5 *****************
  8850 ;; Defined at:
  8851 ;;		line 14 in file "PortHigh.c"
  8852 ;; Parameters:    Size  Location     Type
  8853 ;;		None
  8854 ;; Auto vars:     Size  Location     Type
  8855 ;;		None
  8856 ;; Return value:  Size  Location     Type
  8857 ;;                  1    wreg      void 
  8858 ;; Registers used:
  8859 ;;		None
  8860 ;; Tracked objects:
  8861 ;;		On entry : 0/0
  8862 ;;		On exit  : 0/0
  8863 ;;		Unchanged: 0/0
  8864 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8865 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8866 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8867 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8868 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8869 ;;Total ram usage:        0 bytes
  8870 ;; Hardware stack levels used:    1
  8871 ;; Hardware stack levels required when called:    7
  8872 ;; This function calls:
  8873 ;;		Nothing
  8874 ;; This function is called by:
  8875 ;;		_main
  8876 ;; This function uses a non-reentrant model
  8877 ;;
  8878                           
  8879                           	psect	text41
  8880  002B7C                     __ptext41:
  8881                           	opt stack 0
  8882  002B7C                     _PortTestA5:
  8883                           	opt stack 23
  8884  002B7C                     l251:
  8885  002B7C  A281               	btfss	3969,1,c	;volatile
  8886  002B7E  D7FE               	goto	l251
  8887                           
  8888                           ;PortHigh.c: 18: }
  8889                           ;PortHigh.c: 19: LATAbits.LATA5 = 1;
  8890  002B80  8A89               	bsf	3977,5,c	;volatile
  8891  002B82                     l254:
  8892  002B82  B281               	btfsc	3969,1,c	;volatile
  8893  002B84  D7FE               	goto	l254
  8894                           
  8895                           ;PortHigh.c: 22: }
  8896                           ;PortHigh.c: 23: __nop();
  8897  002B86  F000               	nop	
  8898                           
  8899                           ;PortHigh.c: 24: __nop();
  8900  002B88  F000               	nop	
  8901                           
  8902                           ;PortHigh.c: 25: LATAbits.LATA5 = 0;
  8903  002B8A  9A89               	bcf	3977,5,c	;volatile
  8904  002B8C  0012               	return		;funcret
  8905  002B8E                     __end_of_PortTestA5:
  8906                           	opt stack 0
  8907                           tblptru	equ	0xFF8
  8908                           tblptrh	equ	0xFF7
  8909                           tblptrl	equ	0xFF6
  8910                           tablat	equ	0xFF5
  8911                           prodh	equ	0xFF4
  8912                           prodl	equ	0xFF3
  8913                           intcon	equ	0xFF2
  8914                           intcon2	equ	0xFF1
  8915                           intcon3	equ	0xFF0
  8916                           indf0	equ	0xFEF
  8917                           postinc0	equ	0xFEE
  8918                           fsr0h	equ	0xFEA
  8919                           fsr0l	equ	0xFE9
  8920                           wreg	equ	0xFE8
  8921                           postdec1	equ	0xFE5
  8922                           fsr1l	equ	0xFE1
  8923                           indf2	equ	0xFDF
  8924                           postinc2	equ	0xFDE
  8925                           postdec2	equ	0xFDD
  8926                           fsr2h	equ	0xFDA
  8927                           fsr2l	equ	0xFD9
  8928                           status	equ	0xFD8
  8929                           
  8930 ;; *************** function _handler *****************
  8931 ;; Defined at:
  8932 ;;		line 15 in file "interruptHandler.c"
  8933 ;; Parameters:    Size  Location     Type
  8934 ;;		None
  8935 ;; Auto vars:     Size  Location     Type
  8936 ;;		None
  8937 ;; Return value:  Size  Location     Type
  8938 ;;                  1    wreg      void 
  8939 ;; Registers used:
  8940 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8941 ;; Tracked objects:
  8942 ;;		On entry : 0/0
  8943 ;;		On exit  : 0/0
  8944 ;;		Unchanged: 0/0
  8945 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8946 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8947 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8948 ;;      Temps:         16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8949 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8950 ;;Total ram usage:       16 bytes
  8951 ;; Hardware stack levels used:    1
  8952 ;; Hardware stack levels required when called:    6
  8953 ;; This function calls:
  8954 ;;		_printSortTimer
  8955 ;;		_updateMenu
  8956 ;; This function is called by:
  8957 ;;		Interrupt level 2
  8958 ;; This function uses a non-reentrant model
  8959 ;;
  8960                           
  8961                           	psect	intcode
  8962  000008                     __pintcode:
  8963                           	opt stack 0
  8964  000008                     _handler:
  8965                           	opt stack 18
  8966                           
  8967                           ;incstack = 0
  8968  000008  827C               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  8969  00000A  ED50  F00D         	call	int_func,f	;refresh shadow registers
  8970                           tblptru	equ	0xFF8
  8971                           tblptrh	equ	0xFF7
  8972                           tblptrl	equ	0xFF6
  8973                           tablat	equ	0xFF5
  8974                           prodh	equ	0xFF4
  8975                           prodl	equ	0xFF3
  8976                           intcon	equ	0xFF2
  8977                           intcon2	equ	0xFF1
  8978                           intcon3	equ	0xFF0
  8979                           indf0	equ	0xFEF
  8980                           postinc0	equ	0xFEE
  8981                           fsr0h	equ	0xFEA
  8982                           fsr0l	equ	0xFE9
  8983                           wreg	equ	0xFE8
  8984                           postdec1	equ	0xFE5
  8985                           fsr1l	equ	0xFE1
  8986                           indf2	equ	0xFDF
  8987                           postinc2	equ	0xFDE
  8988                           postdec2	equ	0xFDD
  8989                           fsr2h	equ	0xFDA
  8990                           fsr2l	equ	0xFD9
  8991                           status	equ	0xFD8
  8992                           
  8993                           	psect	intcode_body
  8994  001AA0                     __pintcode_body:
  8995                           	opt stack 18
  8996  001AA0                     int_func:
  8997                           	opt stack 18
  8998  001AA0  0006               	pop		; remove dummy address from shadow register refresh
  8999  001AA2  CFFA F04D          	movff	pclath,??_handler+2
  9000  001AA6  CFFB F04E          	movff	pclatu,??_handler+3
  9001  001AAA  CFE9 F04F          	movff	fsr0l,??_handler+4
  9002  001AAE  CFEA F050          	movff	fsr0h,??_handler+5
  9003  001AB2  CFE1 F051          	movff	fsr1l,??_handler+6
  9004  001AB6  CFE2 F052          	movff	fsr1h,??_handler+7
  9005  001ABA  CFD9 F053          	movff	fsr2l,??_handler+8
  9006  001ABE  CFDA F054          	movff	fsr2h,??_handler+9
  9007  001AC2  CFF3 F055          	movff	prodl,??_handler+10
  9008  001AC6  CFF4 F056          	movff	prodh,??_handler+11
  9009  001ACA  CFF6 F057          	movff	tblptrl,??_handler+12
  9010  001ACE  CFF7 F058          	movff	tblptrh,??_handler+13
  9011  001AD2  CFF8 F059          	movff	tblptru,??_handler+14
  9012  001AD6  CFF5 F05A          	movff	tablat,??_handler+15
  9013                           
  9014                           ;interruptHandler.c: 17: if(INT1IF){
  9015  001ADA  A0F0               	btfss	intcon3,0,c	;volatile
  9016  001ADC  D018               	goto	i2l5943
  9017                           
  9018                           ;interruptHandler.c: 18: INT1IF = 0;
  9019  001ADE  90F0               	bcf	intcon3,0,c	;volatile
  9020                           
  9021                           ;interruptHandler.c: 19: if(machine_state == UI_state) {
  9022  001AE0  0100               	movlb	0	; () banked
  9023  001AE2  51F7               	movf	_machine_state& (0+255),w,b
  9024  001AE4  A4D8               	btfss	status,2,c
  9025  001AE6  D013               	goto	i2l5943
  9026                           
  9027                           ; BSR set to: 0
  9028                           ;interruptHandler.c: 20: input = keys[(PORTB & 0xF0) >> 4];
  9029  001AE8  3881               	swapf	3969,w,c	;volatile
  9030  001AEA  0B0F               	andlw	15
  9031  001AEC  0B0F               	andlw	15
  9032  001AEE  6E4B               	movwf	??_handler& (0+255),c
  9033  001AF0  6A4C               	clrf	(??_handler+1)& (0+255),c
  9034  001AF2  0EB5               	movlw	low _keys
  9035  001AF4  244B               	addwf	??_handler,w,c
  9036  001AF6  6EF6               	movwf	tblptrl,c
  9037  001AF8  0EFD               	movlw	high _keys
  9038  001AFA  204C               	addwfc	??_handler+1,w,c
  9039  001AFC  6EF7               	movwf	tblptrh,c
  9040  001AFE                     	if	1	;There are 3 active tblptr bytes
  9041  001AFE  6AF8               	clrf	tblptru,c
  9042  001B00  0E00               	movlw	low (__mediumconst shr (0+16))
  9043  001B02  22F8               	addwfc	tblptru,f,c
  9044  001B04                     	endif
  9045  001B04  0008               	tblrd		*
  9046  001B06  CFF5 F079          	movff	tablat,_input
  9047                           
  9048                           ; BSR set to: 0
  9049                           ;interruptHandler.c: 21: updateMenu();
  9050  001B0A  ECC8  F007         	call	_updateMenu	;wreg free
  9051  001B0E                     i2l5943:
  9052                           
  9053                           ;interruptHandler.c: 22: }
  9054                           ;interruptHandler.c: 23: }
  9055                           ;interruptHandler.c: 26: if(TMR0IF){
  9056  001B0E  A4F2               	btfss	intcon,2,c	;volatile
  9057  001B10  D00C               	goto	i2l5957
  9058                           
  9059                           ;interruptHandler.c: 27: TMR0IF = 0;
  9060  001B12  94F2               	bcf	intcon,2,c	;volatile
  9061                           
  9062                           ;interruptHandler.c: 28: if(machine_state == Sorting_state){
  9063  001B14  0100               	movlb	0	; () banked
  9064  001B16  05F7               	decf	_machine_state& (0+255),w,b
  9065  001B18  A4D8               	btfss	status,2,c
  9066  001B1A  D007               	goto	i2l5957
  9067                           
  9068                           ; BSR set to: 0
  9069                           ;interruptHandler.c: 29: printSortTimer();
  9070  001B1C  EC60  F00B         	call	_printSortTimer	;wreg free
  9071                           
  9072                           ;interruptHandler.c: 31: TMR0H = 0b10000101;
  9073  001B20  0E85               	movlw	133
  9074  001B22  6ED7               	movwf	4055,c	;volatile
  9075                           
  9076                           ;interruptHandler.c: 32: TMR0L = 0b11101110;
  9077  001B24  0EEE               	movlw	238
  9078  001B26  6ED6               	movwf	4054,c	;volatile
  9079                           
  9080                           ;interruptHandler.c: 33: TMR0ON = 1;
  9081  001B28  8ED5               	bsf	4053,7,c	;volatile
  9082  001B2A                     i2l5957:
  9083                           
  9084                           ;interruptHandler.c: 34: }
  9085                           ;interruptHandler.c: 35: }
  9086                           ;interruptHandler.c: 38: if(TMR1IF){
  9087  001B2A  A09E               	btfss	3998,0,c	;volatile
  9088  001B2C  D024               	goto	i2l5981
  9089                           
  9090                           ;interruptHandler.c: 39: TMR1IF = 0;
  9091  001B2E  909E               	bcf	3998,0,c	;volatile
  9092                           
  9093                           ;interruptHandler.c: 40: TMR1ON = 0;
  9094  001B30  90CD               	bcf	4045,0,c	;volatile
  9095                           
  9096                           ;interruptHandler.c: 41: if(machine_state == Sorting_state){
  9097  001B32  0100               	movlb	0	; () banked
  9098  001B34  05F7               	decf	_machine_state& (0+255),w,b
  9099  001B36  A4D8               	btfss	status,2,c
  9100  001B38  D01E               	goto	i2l5981
  9101                           
  9102                           ; BSR set to: 0
  9103                           ;interruptHandler.c: 42: if(was_low){
  9104  001B3A  5077               	movf	_was_low,w,c
  9105  001B3C  1078               	iorwf	_was_low+1,w,c
  9106  001B3E  B4D8               	btfsc	status,2,c
  9107  001B40  D00A               	goto	i2l1252
  9108                           
  9109                           ; BSR set to: 0
  9110                           ;interruptHandler.c: 43: LATCbits.LATC1 = 1;
  9111  001B42  828B               	bsf	3979,1,c	;volatile
  9112                           
  9113                           ; BSR set to: 0
  9114                           ;interruptHandler.c: 44: was_low = 0;
  9115  001B44  0E00               	movlw	0
  9116  001B46  6E78               	movwf	_was_low+1,c
  9117  001B48  0E00               	movlw	0
  9118  001B4A  6E77               	movwf	_was_low,c
  9119                           
  9120                           ; BSR set to: 0
  9121                           ;interruptHandler.c: 45: TMR1H = servoTimes[0];
  9122  001B4C  C0D4  FFCF         	movff	_servoTimes,4047	;volatile
  9123                           
  9124                           ; BSR set to: 0
  9125                           ;interruptHandler.c: 46: TMR1L = servoTimes[1];
  9126  001B50  C0D6  FFCE         	movff	_servoTimes+2,4046	;volatile
  9127                           
  9128                           ;interruptHandler.c: 47: }
  9129  001B54  D00F               	goto	i2l5979
  9130  001B56                     i2l1252:
  9131                           
  9132                           ; BSR set to: 0
  9133                           ;interruptHandler.c: 48: else{
  9134                           ;interruptHandler.c: 49: LATCbits.LATC1 = 0;
  9135  001B56  928B               	bcf	3979,1,c	;volatile
  9136                           
  9137                           ; BSR set to: 0
  9138                           ;interruptHandler.c: 50: was_low = 1;
  9139  001B58  0E00               	movlw	0
  9140  001B5A  6E78               	movwf	_was_low+1,c
  9141  001B5C  0E01               	movlw	1
  9142  001B5E  6E77               	movwf	_was_low,c
  9143                           
  9144                           ; BSR set to: 0
  9145                           ;interruptHandler.c: 51: TMR1H = 20000 - servoTimes[0];
  9146  001B60  0100               	movlb	0	; () banked
  9147  001B62  51D4               	movf	_servoTimes& (0+255),w,b
  9148  001B64  0800               	sublw	0
  9149  001B66  0F20               	addlw	32
  9150  001B68  6ECF               	movwf	4047,c	;volatile
  9151                           
  9152                           ; BSR set to: 0
  9153                           ;interruptHandler.c: 52: TMR1L = 20000 - servoTimes[1];
  9154  001B6A  0100               	movlb	0	; () banked
  9155  001B6C  51D6               	movf	(_servoTimes+2)& (0+255),w,b
  9156  001B6E  0800               	sublw	0
  9157  001B70  0F20               	addlw	32
  9158  001B72  6ECE               	movwf	4046,c	;volatile
  9159  001B74                     i2l5979:
  9160                           
  9161                           ; BSR set to: 0
  9162                           ;interruptHandler.c: 53: }
  9163                           ;interruptHandler.c: 54: TMR1ON = 1;
  9164  001B74  80CD               	bsf	4045,0,c	;volatile
  9165  001B76                     i2l5981:
  9166                           
  9167                           ;interruptHandler.c: 55: }
  9168                           ;interruptHandler.c: 56: }
  9169                           ;interruptHandler.c: 58: if(TMR3IF){
  9170  001B76  A2A1               	btfss	4001,1,c	;volatile
  9171  001B78  D024               	goto	i2l1258
  9172                           
  9173                           ;interruptHandler.c: 59: TMR3IF = 0;
  9174  001B7A  92A1               	bcf	4001,1,c	;volatile
  9175                           
  9176                           ;interruptHandler.c: 60: TMR3ON = 0;
  9177  001B7C  90B1               	bcf	4017,0,c	;volatile
  9178                           
  9179                           ;interruptHandler.c: 61: if(machine_state == Sorting_state){
  9180  001B7E  0100               	movlb	0	; () banked
  9181  001B80  05F7               	decf	_machine_state& (0+255),w,b
  9182  001B82  A4D8               	btfss	status,2,c
  9183  001B84  D01E               	goto	i2l1258
  9184                           
  9185                           ; BSR set to: 0
  9186                           ;interruptHandler.c: 62: if(was_low){
  9187  001B86  5077               	movf	_was_low,w,c
  9188  001B88  1078               	iorwf	_was_low+1,w,c
  9189  001B8A  B4D8               	btfsc	status,2,c
  9190  001B8C  D00A               	goto	i2l1256
  9191                           
  9192                           ; BSR set to: 0
  9193                           ;interruptHandler.c: 63: LATCbits.LATC2 = 1;
  9194  001B8E  848B               	bsf	3979,2,c	;volatile
  9195                           
  9196                           ; BSR set to: 0
  9197                           ;interruptHandler.c: 64: was_low = 0;
  9198  001B90  0E00               	movlw	0
  9199  001B92  6E78               	movwf	_was_low+1,c
  9200  001B94  0E00               	movlw	0
  9201  001B96  6E77               	movwf	_was_low,c
  9202                           
  9203                           ; BSR set to: 0
  9204                           ;interruptHandler.c: 65: TMR3H = servoTimes[2];
  9205  001B98  C0D8  FFB3         	movff	_servoTimes+4,4019	;volatile
  9206                           
  9207                           ; BSR set to: 0
  9208                           ;interruptHandler.c: 66: TMR3L = servoTimes[3];
  9209  001B9C  C0DA  FFB2         	movff	_servoTimes+6,4018	;volatile
  9210                           
  9211                           ;interruptHandler.c: 67: }
  9212  001BA0  D00F               	goto	i2l6003
  9213  001BA2                     i2l1256:
  9214                           
  9215                           ; BSR set to: 0
  9216                           ;interruptHandler.c: 68: else{
  9217                           ;interruptHandler.c: 69: LATCbits.LATC2 = 0;
  9218  001BA2  948B               	bcf	3979,2,c	;volatile
  9219                           
  9220                           ; BSR set to: 0
  9221                           ;interruptHandler.c: 70: was_low = 1;
  9222  001BA4  0E00               	movlw	0
  9223  001BA6  6E78               	movwf	_was_low+1,c
  9224  001BA8  0E01               	movlw	1
  9225  001BAA  6E77               	movwf	_was_low,c
  9226                           
  9227                           ; BSR set to: 0
  9228                           ;interruptHandler.c: 71: TMR3H = 20000 - servoTimes[2];
  9229  001BAC  0100               	movlb	0	; () banked
  9230  001BAE  51D8               	movf	(_servoTimes+4)& (0+255),w,b
  9231  001BB0  0800               	sublw	0
  9232  001BB2  0F20               	addlw	32
  9233  001BB4  6EB3               	movwf	4019,c	;volatile
  9234                           
  9235                           ; BSR set to: 0
  9236                           ;interruptHandler.c: 72: TMR3L = 20000 - servoTimes[3];
  9237  001BB6  0100               	movlb	0	; () banked
  9238  001BB8  51DA               	movf	(_servoTimes+6)& (0+255),w,b
  9239  001BBA  0800               	sublw	0
  9240  001BBC  0F20               	addlw	32
  9241  001BBE  6EB2               	movwf	4018,c	;volatile
  9242  001BC0                     i2l6003:
  9243                           
  9244                           ; BSR set to: 0
  9245                           ;interruptHandler.c: 73: }
  9246                           ;interruptHandler.c: 74: TMR3ON = 1;
  9247  001BC0  80B1               	bsf	4017,0,c	;volatile
  9248  001BC2                     i2l1258:
  9249  001BC2  C05A  FFF5         	movff	??_handler+15,tablat
  9250  001BC6  C059  FFF8         	movff	??_handler+14,tblptru
  9251  001BCA  C058  FFF7         	movff	??_handler+13,tblptrh
  9252  001BCE  C057  FFF6         	movff	??_handler+12,tblptrl
  9253  001BD2  C056  FFF4         	movff	??_handler+11,prodh
  9254  001BD6  C055  FFF3         	movff	??_handler+10,prodl
  9255  001BDA  C054  FFDA         	movff	??_handler+9,fsr2h
  9256  001BDE  C053  FFD9         	movff	??_handler+8,fsr2l
  9257  001BE2  C052  FFE2         	movff	??_handler+7,fsr1h
  9258  001BE6  C051  FFE1         	movff	??_handler+6,fsr1l
  9259  001BEA  C050  FFEA         	movff	??_handler+5,fsr0h
  9260  001BEE  C04F  FFE9         	movff	??_handler+4,fsr0l
  9261  001BF2  C04E  FFFB         	movff	??_handler+3,pclatu
  9262  001BF6  C04D  FFFA         	movff	??_handler+2,pclath
  9263  001BFA  927C               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  9264  001BFC  0011               	retfie		f
  9265  001BFE                     __end_of_handler:
  9266                           	opt stack 0
  9267                           pclatu	equ	0xFFB
  9268                           pclath	equ	0xFFA
  9269                           tblptru	equ	0xFF8
  9270                           tblptrh	equ	0xFF7
  9271                           tblptrl	equ	0xFF6
  9272                           tablat	equ	0xFF5
  9273                           prodh	equ	0xFF4
  9274                           prodl	equ	0xFF3
  9275                           intcon	equ	0xFF2
  9276                           intcon2	equ	0xFF1
  9277                           intcon3	equ	0xFF0
  9278                           indf0	equ	0xFEF
  9279                           postinc0	equ	0xFEE
  9280                           fsr0h	equ	0xFEA
  9281                           fsr0l	equ	0xFE9
  9282                           wreg	equ	0xFE8
  9283                           postdec1	equ	0xFE5
  9284                           fsr1h	equ	0xFE2
  9285                           fsr1l	equ	0xFE1
  9286                           indf2	equ	0xFDF
  9287                           postinc2	equ	0xFDE
  9288                           postdec2	equ	0xFDD
  9289                           fsr2h	equ	0xFDA
  9290                           fsr2l	equ	0xFD9
  9291                           status	equ	0xFD8
  9292                           
  9293 ;; *************** function _updateMenu *****************
  9294 ;; Defined at:
  9295 ;;		line 156 in file "UI.c"
  9296 ;; Parameters:    Size  Location     Type
  9297 ;;		None
  9298 ;; Auto vars:     Size  Location     Type
  9299 ;;		None
  9300 ;; Return value:  Size  Location     Type
  9301 ;;                  1    wreg      void 
  9302 ;; Registers used:
  9303 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9304 ;; Tracked objects:
  9305 ;;		On entry : 0/0
  9306 ;;		On exit  : 0/0
  9307 ;;		Unchanged: 0/0
  9308 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9309 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9310 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9311 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9312 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9313 ;;Total ram usage:        2 bytes
  9314 ;; Hardware stack levels used:    1
  9315 ;; Hardware stack levels required when called:    5
  9316 ;; This function calls:
  9317 ;;		_change_state_to_logs_11
  9318 ;;		_change_state_to_logs_12
  9319 ;;		_change_state_to_logs_22
  9320 ;;		_change_state_to_logs_23
  9321 ;;		_change_state_to_logs_33
  9322 ;;		_change_state_to_logs_34
  9323 ;;		_change_state_to_menu_11
  9324 ;;		_change_state_to_menu_23
  9325 ;;		_dispLogs
  9326 ;;		_inputHandler
  9327 ;;		i2_change_state_to_menu_12
  9328 ;;		i2_change_state_to_menu_22
  9329 ;;		i2_change_state_to_menu_start
  9330 ;; This function is called by:
  9331 ;;		_handler
  9332 ;; This function uses a non-reentrant model
  9333 ;;
  9334                           
  9335                           	psect	text43
  9336  000F90                     __ptext43:
  9337                           	opt stack 0
  9338  000F90                     _updateMenu:
  9339                           	opt stack 18
  9340                           
  9341                           ;UI.c: 157: up = 0; down = 0; enter = 0; back = 0;
  9342                           
  9343                           ;incstack = 0
  9344  000F90  0E00               	movlw	0
  9345  000F92  6E76               	movwf	_up+1,c
  9346  000F94  0E00               	movlw	0
  9347  000F96  6E75               	movwf	_up,c
  9348  000F98  0E00               	movlw	0
  9349  000F9A  6E6E               	movwf	_down+1,c
  9350  000F9C  0E00               	movlw	0
  9351  000F9E  6E6D               	movwf	_down,c
  9352  000FA0  0E00               	movlw	0
  9353  000FA2  6E70               	movwf	_enter+1,c
  9354  000FA4  0E00               	movlw	0
  9355  000FA6  6E6F               	movwf	_enter,c
  9356  000FA8  0E00               	movlw	0
  9357  000FAA  6E64               	movwf	_back+1,c
  9358  000FAC  0E00               	movlw	0
  9359  000FAE  6E63               	movwf	_back,c
  9360                           
  9361                           ;UI.c: 158: (INTCONbits.GIE = 0);
  9362  000FB0  9EF2               	bcf	intcon,7,c	;volatile
  9363                           
  9364                           ;UI.c: 160: if (inputHandler()
  9365                           ;UI.c: 163: ){
  9366  000FB2  EC5D  F00C         	call	_inputHandler	;wreg free
  9367  000FB6  502A               	movf	?_inputHandler,w,c
  9368  000FB8  102B               	iorwf	?_inputHandler+1,w,c
  9369  000FBA  A4D8               	btfss	status,2,c
  9370  000FBC  D112               	goto	i2l5765
  9371  000FBE  D146               	goto	i2l426
  9372  000FC0                     i2l5617:
  9373                           
  9374                           ;UI.c: 167: change_state_to_menu_11();
  9375  000FC0  EC18  F014         	call	_change_state_to_menu_11	;wreg free
  9376                           
  9377                           ;UI.c: 168: break;
  9378  000FC4  D143               	goto	i2l426
  9379  000FC6                     i2l5619:
  9380                           
  9381                           ;UI.c: 171: if(up){
  9382  000FC6  5075               	movf	_up,w,c
  9383  000FC8  1076               	iorwf	_up+1,w,c
  9384  000FCA  B4D8               	btfsc	status,2,c
  9385  000FCC  D003               	goto	i2l5623
  9386                           
  9387                           ;UI.c: 172: change_state_to_menu_23();
  9388  000FCE  EC00  F014         	call	_change_state_to_menu_23	;wreg free
  9389                           
  9390                           ;UI.c: 173: }
  9391  000FD2  D13C               	goto	i2l426
  9392  000FD4                     i2l5623:
  9393                           
  9394                           ;UI.c: 174: else if(down){
  9395  000FD4  506D               	movf	_down,w,c
  9396  000FD6  106E               	iorwf	_down+1,w,c
  9397  000FD8  B4D8               	btfsc	status,2,c
  9398  000FDA  D003               	goto	i2l5627
  9399                           
  9400                           ;UI.c: 175: change_state_to_menu_12();
  9401  000FDC  ECE8  F013         	call	i2_change_state_to_menu_12	;wreg free
  9402                           
  9403                           ;UI.c: 176: }
  9404  000FE0  D135               	goto	i2l426
  9405  000FE2                     i2l5627:
  9406                           
  9407                           ;UI.c: 177: else if(enter){
  9408  000FE2  506F               	movf	_enter,w,c
  9409  000FE4  1070               	iorwf	_enter+1,w,c
  9410  000FE6  B4D8               	btfsc	status,2,c
  9411  000FE8  D131               	goto	i2l426
  9412                           
  9413                           ;UI.c: 178: change_state_to_menu_start();
  9414  000FEA  EC17  F015         	call	i2_change_state_to_menu_start	;wreg free
  9415                           
  9416                           ;UI.c: 179: }
  9417                           ;UI.c: 180: break;
  9418  000FEE  D12E               	goto	i2l426
  9419  000FF0                     i2l5631:
  9420                           
  9421                           ;UI.c: 183: if(up){
  9422  000FF0  5075               	movf	_up,w,c
  9423  000FF2  1076               	iorwf	_up+1,w,c
  9424  000FF4  B4D8               	btfsc	status,2,c
  9425  000FF6  D003               	goto	i2l5635
  9426                           
  9427                           ;UI.c: 184: change_state_to_menu_11();
  9428  000FF8  EC18  F014         	call	_change_state_to_menu_11	;wreg free
  9429                           
  9430                           ;UI.c: 185: }
  9431  000FFC  D127               	goto	i2l426
  9432  000FFE                     i2l5635:
  9433                           
  9434                           ;UI.c: 186: else if(down){
  9435  000FFE  506D               	movf	_down,w,c
  9436  001000  106E               	iorwf	_down+1,w,c
  9437  001002  B4D8               	btfsc	status,2,c
  9438  001004  D011               	goto	i2l5651
  9439                           
  9440                           ;UI.c: 187: change_state_to_menu_23();
  9441  001006  EC00  F014         	call	_change_state_to_menu_23	;wreg free
  9442                           
  9443                           ;UI.c: 188: }
  9444  00100A  D120               	goto	i2l426
  9445  00100C                     i2l5643:
  9446                           
  9447                           ;UI.c: 195: if(up){
  9448  00100C  5075               	movf	_up,w,c
  9449  00100E  1076               	iorwf	_up+1,w,c
  9450  001010  B4D8               	btfsc	status,2,c
  9451  001012  D003               	goto	i2l5647
  9452                           
  9453                           ;UI.c: 196: change_state_to_menu_11();
  9454  001014  EC18  F014         	call	_change_state_to_menu_11	;wreg free
  9455                           
  9456                           ;UI.c: 197: }
  9457  001018  D119               	goto	i2l426
  9458  00101A                     i2l5647:
  9459                           
  9460                           ;UI.c: 198: else if(down){
  9461  00101A  506D               	movf	_down,w,c
  9462  00101C  106E               	iorwf	_down+1,w,c
  9463  00101E  B4D8               	btfsc	status,2,c
  9464  001020  D003               	goto	i2l5651
  9465                           
  9466                           ;UI.c: 199: change_state_to_menu_23();
  9467  001022  EC00  F014         	call	_change_state_to_menu_23	;wreg free
  9468                           
  9469                           ;UI.c: 200: }
  9470  001026  D112               	goto	i2l426
  9471  001028                     i2l5651:
  9472                           
  9473                           ;UI.c: 201: else if(enter){
  9474  001028  506F               	movf	_enter,w,c
  9475  00102A  1070               	iorwf	_enter+1,w,c
  9476  00102C  B4D8               	btfsc	status,2,c
  9477  00102E  D10E               	goto	i2l426
  9478                           
  9479                           ;UI.c: 202: machine_state = Sorting_state;
  9480  001030  0E01               	movlw	1
  9481  001032  0100               	movlb	0	; () banked
  9482  001034  6FF7               	movwf	_machine_state& (0+255),b
  9483                           
  9484                           ; BSR set to: 0
  9485                           ;UI.c: 203: }
  9486                           ;UI.c: 204: break;
  9487                           
  9488                           ; BSR set to: 0
  9489                           
  9490                           ; BSR set to: 0
  9491  001036  D10A               	goto	i2l426
  9492  001038                     i2l5655:
  9493                           
  9494                           ;UI.c: 207: if(up){
  9495  001038  5075               	movf	_up,w,c
  9496  00103A  1076               	iorwf	_up+1,w,c
  9497  00103C  B4D8               	btfsc	status,2,c
  9498  00103E  D003               	goto	i2l5659
  9499                           
  9500                           ;UI.c: 208: change_state_to_menu_22();
  9501  001040  ECD0  F013         	call	i2_change_state_to_menu_22	;wreg free
  9502                           
  9503                           ;UI.c: 209: }
  9504  001044  D103               	goto	i2l426
  9505  001046                     i2l5659:
  9506                           
  9507                           ;UI.c: 210: else if(down){
  9508  001046  506D               	movf	_down,w,c
  9509  001048  106E               	iorwf	_down+1,w,c
  9510  00104A  B4D8               	btfsc	status,2,c
  9511  00104C  D003               	goto	i2l5663
  9512                           
  9513                           ;UI.c: 211: change_state_to_menu_11();
  9514  00104E  EC18  F014         	call	_change_state_to_menu_11	;wreg free
  9515                           
  9516                           ;UI.c: 212: }
  9517  001052  D0FC               	goto	i2l426
  9518  001054                     i2l5663:
  9519                           
  9520                           ;UI.c: 213: else if(enter){
  9521  001054  506F               	movf	_enter,w,c
  9522  001056  1070               	iorwf	_enter+1,w,c
  9523  001058  B4D8               	btfsc	status,2,c
  9524  00105A  D0F8               	goto	i2l426
  9525                           
  9526                           ;UI.c: 214: change_state_to_logs_11();
  9527  00105C  EC90  F014         	call	_change_state_to_logs_11	;wreg free
  9528                           
  9529                           ;UI.c: 215: }
  9530                           ;UI.c: 216: break;
  9531  001060  D0F5               	goto	i2l426
  9532  001062                     i2l5667:
  9533                           
  9534                           ;UI.c: 219: if(up){
  9535  001062  5075               	movf	_up,w,c
  9536  001064  1076               	iorwf	_up+1,w,c
  9537  001066  B4D8               	btfsc	status,2,c
  9538  001068  D003               	goto	i2l5671
  9539                           
  9540                           ;UI.c: 220: change_state_to_logs_34();
  9541  00106A  EC30  F014         	call	_change_state_to_logs_34	;wreg free
  9542                           
  9543                           ;UI.c: 221: }
  9544  00106E  D0EE               	goto	i2l426
  9545  001070                     i2l5671:
  9546                           
  9547                           ;UI.c: 222: else if(down){
  9548  001070  506D               	movf	_down,w,c
  9549  001072  106E               	iorwf	_down+1,w,c
  9550  001074  B4D8               	btfsc	status,2,c
  9551  001076  D003               	goto	i2l5675
  9552                           
  9553                           ;UI.c: 223: change_state_to_logs_12();
  9554  001078  EC78  F014         	call	_change_state_to_logs_12	;wreg free
  9555                           
  9556                           ;UI.c: 224: }
  9557  00107C  D0E7               	goto	i2l426
  9558  00107E                     i2l5675:
  9559                           
  9560                           ;UI.c: 225: else if(enter){
  9561  00107E  506F               	movf	_enter,w,c
  9562  001080  1070               	iorwf	_enter+1,w,c
  9563  001082  B4D8               	btfsc	status,2,c
  9564  001084  D007               	goto	i2l5679
  9565                           
  9566                           ;UI.c: 226: dispLogs(1);
  9567  001086  0E00               	movlw	0
  9568  001088  6E02               	movwf	dispLogs@myLog+1,c
  9569  00108A  0E01               	movlw	1
  9570  00108C  6E01               	movwf	dispLogs@myLog,c
  9571  00108E  ECB4  F015         	call	_dispLogs	;wreg free
  9572                           
  9573                           ;UI.c: 227: }
  9574  001092  D0DC               	goto	i2l426
  9575  001094                     i2l5679:
  9576                           
  9577                           ;UI.c: 228: else if(back){
  9578  001094  5063               	movf	_back,w,c
  9579  001096  1064               	iorwf	_back+1,w,c
  9580  001098  B4D8               	btfsc	status,2,c
  9581  00109A  D0D8               	goto	i2l426
  9582                           
  9583                           ;UI.c: 229: change_state_to_menu_23();
  9584  00109C  EC00  F014         	call	_change_state_to_menu_23	;wreg free
  9585                           
  9586                           ;UI.c: 230: }
  9587                           ;UI.c: 231: break;
  9588  0010A0  D0D5               	goto	i2l426
  9589  0010A2                     i2l5683:
  9590                           
  9591                           ;UI.c: 234: if(up){
  9592  0010A2  5075               	movf	_up,w,c
  9593  0010A4  1076               	iorwf	_up+1,w,c
  9594  0010A6  B4D8               	btfsc	status,2,c
  9595  0010A8  D003               	goto	i2l5687
  9596                           
  9597                           ;UI.c: 235: change_state_to_logs_11();
  9598  0010AA  EC90  F014         	call	_change_state_to_logs_11	;wreg free
  9599                           
  9600                           ;UI.c: 236: }
  9601  0010AE  D0CE               	goto	i2l426
  9602  0010B0                     i2l5687:
  9603                           
  9604                           ;UI.c: 237: else if(down){
  9605  0010B0  506D               	movf	_down,w,c
  9606  0010B2  106E               	iorwf	_down+1,w,c
  9607  0010B4  B4D8               	btfsc	status,2,c
  9608  0010B6  D003               	goto	i2l5691
  9609                           
  9610                           ;UI.c: 238: change_state_to_logs_23();
  9611  0010B8  ECBF  F014         	call	_change_state_to_logs_23	;wreg free
  9612                           
  9613                           ;UI.c: 239: }
  9614  0010BC  D0C7               	goto	i2l426
  9615  0010BE                     i2l5691:
  9616                           
  9617                           ;UI.c: 240: else if(enter){
  9618  0010BE  506F               	movf	_enter,w,c
  9619  0010C0  1070               	iorwf	_enter+1,w,c
  9620  0010C2  B4D8               	btfsc	status,2,c
  9621  0010C4  D007               	goto	i2l5695
  9622                           
  9623                           ;UI.c: 241: dispLogs(2);
  9624  0010C6  0E00               	movlw	0
  9625  0010C8  6E02               	movwf	dispLogs@myLog+1,c
  9626  0010CA  0E02               	movlw	2
  9627  0010CC  6E01               	movwf	dispLogs@myLog,c
  9628  0010CE  ECB4  F015         	call	_dispLogs	;wreg free
  9629                           
  9630                           ;UI.c: 242: }
  9631  0010D2  D0BC               	goto	i2l426
  9632  0010D4                     i2l5695:
  9633                           
  9634                           ;UI.c: 243: else if(back){
  9635  0010D4  5063               	movf	_back,w,c
  9636  0010D6  1064               	iorwf	_back+1,w,c
  9637  0010D8  B4D8               	btfsc	status,2,c
  9638  0010DA  D0B8               	goto	i2l426
  9639                           
  9640                           ;UI.c: 244: change_state_to_menu_23();
  9641  0010DC  EC00  F014         	call	_change_state_to_menu_23	;wreg free
  9642                           
  9643                           ;UI.c: 245: }
  9644                           ;UI.c: 246: break;
  9645  0010E0  D0B5               	goto	i2l426
  9646  0010E2                     i2l5699:
  9647                           
  9648                           ;UI.c: 249: if(up){
  9649  0010E2  5075               	movf	_up,w,c
  9650  0010E4  1076               	iorwf	_up+1,w,c
  9651  0010E6  B4D8               	btfsc	status,2,c
  9652  0010E8  D003               	goto	i2l5703
  9653                           
  9654                           ;UI.c: 250: change_state_to_logs_11();
  9655  0010EA  EC90  F014         	call	_change_state_to_logs_11	;wreg free
  9656                           
  9657                           ;UI.c: 251: }
  9658  0010EE  D0AE               	goto	i2l426
  9659  0010F0                     i2l5703:
  9660                           
  9661                           ;UI.c: 252: else if(down){
  9662  0010F0  506D               	movf	_down,w,c
  9663  0010F2  106E               	iorwf	_down+1,w,c
  9664  0010F4  B4D8               	btfsc	status,2,c
  9665  0010F6  D003               	goto	i2l5707
  9666                           
  9667                           ;UI.c: 253: change_state_to_logs_23();
  9668  0010F8  ECBF  F014         	call	_change_state_to_logs_23	;wreg free
  9669                           
  9670                           ;UI.c: 254: }
  9671  0010FC  D0A7               	goto	i2l426
  9672  0010FE                     i2l5707:
  9673                           
  9674                           ;UI.c: 255: else if(enter){
  9675  0010FE  506F               	movf	_enter,w,c
  9676  001100  1070               	iorwf	_enter+1,w,c
  9677  001102  B4D8               	btfsc	status,2,c
  9678  001104  D007               	goto	i2l5711
  9679                           
  9680                           ;UI.c: 256: dispLogs(2);
  9681  001106  0E00               	movlw	0
  9682  001108  6E02               	movwf	dispLogs@myLog+1,c
  9683  00110A  0E02               	movlw	2
  9684  00110C  6E01               	movwf	dispLogs@myLog,c
  9685  00110E  ECB4  F015         	call	_dispLogs	;wreg free
  9686                           
  9687                           ;UI.c: 257: }
  9688  001112  D09C               	goto	i2l426
  9689  001114                     i2l5711:
  9690                           
  9691                           ;UI.c: 258: else if(back){
  9692  001114  5063               	movf	_back,w,c
  9693  001116  1064               	iorwf	_back+1,w,c
  9694  001118  B4D8               	btfsc	status,2,c
  9695  00111A  D098               	goto	i2l426
  9696                           
  9697                           ;UI.c: 259: change_state_to_menu_23();
  9698  00111C  EC00  F014         	call	_change_state_to_menu_23	;wreg free
  9699                           
  9700                           ;UI.c: 260: }
  9701                           ;UI.c: 261: break;
  9702  001120  D095               	goto	i2l426
  9703  001122                     i2l5715:
  9704                           
  9705                           ;UI.c: 264: if(up){
  9706  001122  5075               	movf	_up,w,c
  9707  001124  1076               	iorwf	_up+1,w,c
  9708  001126  B4D8               	btfsc	status,2,c
  9709  001128  D003               	goto	i2l5719
  9710                           
  9711                           ;UI.c: 265: change_state_to_logs_22();
  9712  00112A  EC60  F014         	call	_change_state_to_logs_22	;wreg free
  9713                           
  9714                           ;UI.c: 266: }
  9715  00112E  D08E               	goto	i2l426
  9716  001130                     i2l5719:
  9717                           
  9718                           ;UI.c: 267: else if(down){
  9719  001130  506D               	movf	_down,w,c
  9720  001132  106E               	iorwf	_down+1,w,c
  9721  001134  B4D8               	btfsc	status,2,c
  9722  001136  D003               	goto	i2l5723
  9723                           
  9724                           ;UI.c: 268: change_state_to_logs_34();
  9725  001138  EC30  F014         	call	_change_state_to_logs_34	;wreg free
  9726                           
  9727                           ;UI.c: 269: }
  9728  00113C  D087               	goto	i2l426
  9729  00113E                     i2l5723:
  9730                           
  9731                           ;UI.c: 270: else if(enter){
  9732  00113E  506F               	movf	_enter,w,c
  9733  001140  1070               	iorwf	_enter+1,w,c
  9734  001142  B4D8               	btfsc	status,2,c
  9735  001144  D007               	goto	i2l5727
  9736                           
  9737                           ;UI.c: 271: dispLogs(3);
  9738  001146  0E00               	movlw	0
  9739  001148  6E02               	movwf	dispLogs@myLog+1,c
  9740  00114A  0E03               	movlw	3
  9741  00114C  6E01               	movwf	dispLogs@myLog,c
  9742  00114E  ECB4  F015         	call	_dispLogs	;wreg free
  9743                           
  9744                           ;UI.c: 272: }
  9745  001152  D07C               	goto	i2l426
  9746  001154                     i2l5727:
  9747                           
  9748                           ;UI.c: 273: else if(back){
  9749  001154  5063               	movf	_back,w,c
  9750  001156  1064               	iorwf	_back+1,w,c
  9751  001158  B4D8               	btfsc	status,2,c
  9752  00115A  D078               	goto	i2l426
  9753                           
  9754                           ;UI.c: 274: change_state_to_menu_23();
  9755  00115C  EC00  F014         	call	_change_state_to_menu_23	;wreg free
  9756                           
  9757                           ;UI.c: 275: }
  9758                           ;UI.c: 276: break;
  9759  001160  D075               	goto	i2l426
  9760  001162                     i2l5731:
  9761                           
  9762                           ;UI.c: 279: if(up){
  9763  001162  5075               	movf	_up,w,c
  9764  001164  1076               	iorwf	_up+1,w,c
  9765  001166  B4D8               	btfsc	status,2,c
  9766  001168  D003               	goto	i2l5735
  9767                           
  9768                           ;UI.c: 280: change_state_to_logs_22();
  9769  00116A  EC60  F014         	call	_change_state_to_logs_22	;wreg free
  9770                           
  9771                           ;UI.c: 281: }
  9772  00116E  D06E               	goto	i2l426
  9773  001170                     i2l5735:
  9774                           
  9775                           ;UI.c: 282: else if(down){
  9776  001170  506D               	movf	_down,w,c
  9777  001172  106E               	iorwf	_down+1,w,c
  9778  001174  B4D8               	btfsc	status,2,c
  9779  001176  D003               	goto	i2l5739
  9780                           
  9781                           ;UI.c: 283: change_state_to_logs_34();
  9782  001178  EC30  F014         	call	_change_state_to_logs_34	;wreg free
  9783                           
  9784                           ;UI.c: 284: }
  9785  00117C  D067               	goto	i2l426
  9786  00117E                     i2l5739:
  9787                           
  9788                           ;UI.c: 285: else if(enter){
  9789  00117E  506F               	movf	_enter,w,c
  9790  001180  1070               	iorwf	_enter+1,w,c
  9791  001182  B4D8               	btfsc	status,2,c
  9792  001184  D007               	goto	i2l5743
  9793                           
  9794                           ;UI.c: 286: dispLogs(3);
  9795  001186  0E00               	movlw	0
  9796  001188  6E02               	movwf	dispLogs@myLog+1,c
  9797  00118A  0E03               	movlw	3
  9798  00118C  6E01               	movwf	dispLogs@myLog,c
  9799  00118E  ECB4  F015         	call	_dispLogs	;wreg free
  9800                           
  9801                           ;UI.c: 287: }
  9802  001192  D05C               	goto	i2l426
  9803  001194                     i2l5743:
  9804                           
  9805                           ;UI.c: 288: else if(back){
  9806  001194  5063               	movf	_back,w,c
  9807  001196  1064               	iorwf	_back+1,w,c
  9808  001198  B4D8               	btfsc	status,2,c
  9809  00119A  D058               	goto	i2l426
  9810                           
  9811                           ;UI.c: 289: change_state_to_menu_23();
  9812  00119C  EC00  F014         	call	_change_state_to_menu_23	;wreg free
  9813                           
  9814                           ;UI.c: 290: }
  9815                           ;UI.c: 291: break;
  9816  0011A0  D055               	goto	i2l426
  9817  0011A2                     i2l5747:
  9818                           
  9819                           ;UI.c: 294: if(up){
  9820  0011A2  5075               	movf	_up,w,c
  9821  0011A4  1076               	iorwf	_up+1,w,c
  9822  0011A6  B4D8               	btfsc	status,2,c
  9823  0011A8  D003               	goto	i2l5751
  9824                           
  9825                           ;UI.c: 295: change_state_to_logs_33();
  9826  0011AA  EC48  F014         	call	_change_state_to_logs_33	;wreg free
  9827                           
  9828                           ;UI.c: 296: }
  9829  0011AE  D04E               	goto	i2l426
  9830  0011B0                     i2l5751:
  9831                           
  9832                           ;UI.c: 297: else if(down){
  9833  0011B0  506D               	movf	_down,w,c
  9834  0011B2  106E               	iorwf	_down+1,w,c
  9835  0011B4  B4D8               	btfsc	status,2,c
  9836  0011B6  D003               	goto	i2l5755
  9837                           
  9838                           ;UI.c: 298: change_state_to_logs_11();
  9839  0011B8  EC90  F014         	call	_change_state_to_logs_11	;wreg free
  9840                           
  9841                           ;UI.c: 299: }
  9842  0011BC  D047               	goto	i2l426
  9843  0011BE                     i2l5755:
  9844                           
  9845                           ;UI.c: 300: else if(enter){
  9846  0011BE  506F               	movf	_enter,w,c
  9847  0011C0  1070               	iorwf	_enter+1,w,c
  9848  0011C2  B4D8               	btfsc	status,2,c
  9849  0011C4  D007               	goto	i2l5759
  9850                           
  9851                           ;UI.c: 301: dispLogs(4);
  9852  0011C6  0E00               	movlw	0
  9853  0011C8  6E02               	movwf	dispLogs@myLog+1,c
  9854  0011CA  0E04               	movlw	4
  9855  0011CC  6E01               	movwf	dispLogs@myLog,c
  9856  0011CE  ECB4  F015         	call	_dispLogs	;wreg free
  9857                           
  9858                           ;UI.c: 302: }
  9859  0011D2  D03C               	goto	i2l426
  9860  0011D4                     i2l5759:
  9861                           
  9862                           ;UI.c: 303: else if(back){
  9863  0011D4  5063               	movf	_back,w,c
  9864  0011D6  1064               	iorwf	_back+1,w,c
  9865  0011D8  B4D8               	btfsc	status,2,c
  9866  0011DA  D038               	goto	i2l426
  9867                           
  9868                           ;UI.c: 304: change_state_to_menu_23();
  9869  0011DC  EC00  F014         	call	_change_state_to_menu_23	;wreg free
  9870                           
  9871                           ;UI.c: 310: }
  9872                           
  9873                           ;UI.c: 309: break;
  9874                           
  9875                           ;UI.c: 308: default:
  9876                           
  9877                           ;UI.c: 305: }
  9878                           ;UI.c: 306: break;
  9879  0011E0  D035               	goto	i2l426
  9880  0011E2                     i2l5765:
  9881  0011E2  C0E7  F043         	movff	_cur_state,??_updateMenu
  9882  0011E6  C0E8  F044         	movff	_cur_state+1,??_updateMenu+1
  9883                           
  9884                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 3 sub-sw
      +                          itches
  9885                           ; Switch size 1, requested type "space"
  9886                           ; Number of cases is 3, Range of values is 0 to 4
  9887                           ; switch strategies available:
  9888                           ; Name         Instructions Cycles
  9889                           ; simple_byte           10     6 (average)
  9890                           ;	Chosen strategy is simple_byte
  9891  0011EA  5044               	movf	??_updateMenu+1,w,c
  9892  0011EC  0A00               	xorlw	0	; case 0
  9893  0011EE  B4D8               	btfsc	status,2,c
  9894  0011F0  D007               	goto	i2l6169
  9895  0011F2  0A03               	xorlw	3	; case 3
  9896  0011F4  B4D8               	btfsc	status,2,c
  9897  0011F6  D015               	goto	i2l6171
  9898  0011F8  0A07               	xorlw	7	; case 4
  9899  0011FA  B4D8               	btfsc	status,2,c
  9900  0011FC  D020               	goto	i2l6173
  9901  0011FE  D026               	goto	i2l426
  9902  001200                     i2l6169:
  9903                           
  9904                           ; Switch size 1, requested type "space"
  9905                           ; Number of cases is 5, Range of values is 0 to 23
  9906                           ; switch strategies available:
  9907                           ; Name         Instructions Cycles
  9908                           ; simple_byte           16     9 (average)
  9909                           ;	Chosen strategy is simple_byte
  9910  001200  5043               	movf	??_updateMenu,w,c
  9911  001202  0A00               	xorlw	0	; case 0
  9912  001204  B4D8               	btfsc	status,2,c
  9913  001206  D6DC               	goto	i2l5617
  9914  001208  0A0B               	xorlw	11	; case 11
  9915  00120A  B4D8               	btfsc	status,2,c
  9916  00120C  D6DC               	goto	i2l5619
  9917  00120E  0A07               	xorlw	7	; case 12
  9918  001210  B4D8               	btfsc	status,2,c
  9919  001212  D6EE               	goto	i2l5631
  9920  001214  0A1A               	xorlw	26	; case 22
  9921  001216  B4D8               	btfsc	status,2,c
  9922  001218  D6F9               	goto	i2l5643
  9923  00121A  0A01               	xorlw	1	; case 23
  9924  00121C  B4D8               	btfsc	status,2,c
  9925  00121E  D70C               	goto	i2l5655
  9926  001220  D015               	goto	i2l426
  9927  001222                     i2l6171:
  9928                           
  9929                           ; Switch size 1, requested type "space"
  9930                           ; Number of cases is 4, Range of values is 243 to 255
  9931                           ; switch strategies available:
  9932                           ; Name         Instructions Cycles
  9933                           ; simple_byte           13     7 (average)
  9934                           ;	Chosen strategy is simple_byte
  9935  001222  5043               	movf	??_updateMenu,w,c
  9936  001224  0AF3               	xorlw	243	; case 243
  9937  001226  B4D8               	btfsc	status,2,c
  9938  001228  D71C               	goto	i2l5667
  9939  00122A  0A07               	xorlw	7	; case 244
  9940  00122C  B4D8               	btfsc	status,2,c
  9941  00122E  D739               	goto	i2l5683
  9942  001230  0A0A               	xorlw	10	; case 254
  9943  001232  B4D8               	btfsc	status,2,c
  9944  001234  D756               	goto	i2l5699
  9945  001236  0A01               	xorlw	1	; case 255
  9946  001238  B4D8               	btfsc	status,2,c
  9947  00123A  D773               	goto	i2l5715
  9948  00123C  D007               	goto	i2l426
  9949  00123E                     i2l6173:
  9950                           
  9951                           ; Switch size 1, requested type "space"
  9952                           ; Number of cases is 2, Range of values is 9 to 10
  9953                           ; switch strategies available:
  9954                           ; Name         Instructions Cycles
  9955                           ; simple_byte            7     4 (average)
  9956                           ;	Chosen strategy is simple_byte
  9957  00123E  5043               	movf	??_updateMenu,w,c
  9958  001240  0A09               	xorlw	9	; case 9
  9959  001242  B4D8               	btfsc	status,2,c
  9960  001244  D78E               	goto	i2l5731
  9961  001246  0A03               	xorlw	3	; case 10
  9962  001248  B4D8               	btfsc	status,2,c
  9963  00124A  D7AB               	goto	i2l5747
  9964  00124C                     i2l426:
  9965                           
  9966                           ;UI.c: 311: }
  9967                           ;UI.c: 312: (INTCONbits.GIE = 1);
  9968  00124C  8EF2               	bsf	intcon,7,c	;volatile
  9969  00124E  0012               	return		;funcret
  9970  001250                     __end_of_updateMenu:
  9971                           	opt stack 0
  9972                           pclatu	equ	0xFFB
  9973                           pclath	equ	0xFFA
  9974                           tblptru	equ	0xFF8
  9975                           tblptrh	equ	0xFF7
  9976                           tblptrl	equ	0xFF6
  9977                           tablat	equ	0xFF5
  9978                           prodh	equ	0xFF4
  9979                           prodl	equ	0xFF3
  9980                           intcon	equ	0xFF2
  9981                           intcon2	equ	0xFF1
  9982                           intcon3	equ	0xFF0
  9983                           indf0	equ	0xFEF
  9984                           postinc0	equ	0xFEE
  9985                           fsr0h	equ	0xFEA
  9986                           fsr0l	equ	0xFE9
  9987                           wreg	equ	0xFE8
  9988                           postdec1	equ	0xFE5
  9989                           fsr1h	equ	0xFE2
  9990                           fsr1l	equ	0xFE1
  9991                           indf2	equ	0xFDF
  9992                           postinc2	equ	0xFDE
  9993                           postdec2	equ	0xFDD
  9994                           fsr2h	equ	0xFDA
  9995                           fsr2l	equ	0xFD9
  9996                           status	equ	0xFD8
  9997                           
  9998 ;; *************** function i2_change_state_to_menu_start *****************
  9999 ;; Defined at:
 10000 ;;		line 416 in file "UI.c"
 10001 ;; Parameters:    Size  Location     Type
 10002 ;;		None
 10003 ;; Auto vars:     Size  Location     Type
 10004 ;;		None
 10005 ;; Return value:  Size  Location     Type
 10006 ;;                  1    wreg      void 
 10007 ;; Registers used:
 10008 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10009 ;; Tracked objects:
 10010 ;;		On entry : 0/0
 10011 ;;		On exit  : 0/0
 10012 ;;		Unchanged: 0/0
 10013 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10014 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10015 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10016 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10017 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10018 ;;Total ram usage:        0 bytes
 10019 ;; Hardware stack levels used:    1
 10020 ;; Hardware stack levels required when called:    4
 10021 ;; This function calls:
 10022 ;;		i2_lcdInst
 10023 ;;		i2_printRTC
 10024 ;;		i2_printf
 10025 ;; This function is called by:
 10026 ;;		_updateMenu
 10027 ;; This function uses a non-reentrant model
 10028 ;;
 10029                           
 10030                           	psect	text44
 10031  002A2E                     __ptext44:
 10032                           	opt stack 0
 10033  002A2E                     i2_change_state_to_menu_start:
 10034                           	opt stack 18
 10035                           
 10036                           ;UI.c: 417: cur_state = 0;
 10037                           
 10038                           ;incstack = 0
 10039  002A2E  0E00               	movlw	0
 10040  002A30  0100               	movlb	0	; () banked
 10041  002A32  6FE8               	movwf	(_cur_state+1)& (0+255),b
 10042  002A34  0E00               	movlw	0
 10043  002A36  6FE7               	movwf	_cur_state& (0+255),b
 10044                           
 10045                           ; BSR set to: 0
 10046                           ;UI.c: 419: lcdInst(0b10000000);;
 10047  002A38  0E80               	movlw	128
 10048  002A3A  ECE6  F015         	call	i2_lcdInst
 10049                           
 10050                           ;UI.c: 420: printRTC();
 10051  002A3E  EC45  F00A         	call	i2_printRTC	;wreg free
 10052                           
 10053                           ;UI.c: 421: lcdInst(0b11000000);;
 10054  002A42  0EC0               	movlw	192
 10055  002A44  ECE6  F015         	call	i2_lcdInst
 10056                           
 10057                           ;UI.c: 422: printf("PUSH TO CONTINUE");
 10058  002A48  0E97               	movlw	low STR_15
 10059  002A4A  6E0D               	movwf	i2printf@f,c
 10060  002A4C  0EFF               	movlw	high STR_15
 10061  002A4E  6E0E               	movwf	i2printf@f+1,c
 10062  002A50  ECC0  F004         	call	i2_printf	;wreg free
 10063  002A54  0012               	return		;funcret
 10064  002A56                     __end_ofi2_change_state_to_menu_start:
 10065                           	opt stack 0
 10066                           pclatu	equ	0xFFB
 10067                           pclath	equ	0xFFA
 10068                           tblptru	equ	0xFF8
 10069                           tblptrh	equ	0xFF7
 10070                           tblptrl	equ	0xFF6
 10071                           tablat	equ	0xFF5
 10072                           prodh	equ	0xFF4
 10073                           prodl	equ	0xFF3
 10074                           intcon	equ	0xFF2
 10075                           intcon2	equ	0xFF1
 10076                           intcon3	equ	0xFF0
 10077                           indf0	equ	0xFEF
 10078                           postinc0	equ	0xFEE
 10079                           fsr0h	equ	0xFEA
 10080                           fsr0l	equ	0xFE9
 10081                           wreg	equ	0xFE8
 10082                           postdec1	equ	0xFE5
 10083                           fsr1h	equ	0xFE2
 10084                           fsr1l	equ	0xFE1
 10085                           indf2	equ	0xFDF
 10086                           postinc2	equ	0xFDE
 10087                           postdec2	equ	0xFDD
 10088                           fsr2h	equ	0xFDA
 10089                           fsr2l	equ	0xFD9
 10090                           status	equ	0xFD8
 10091                           
 10092 ;; *************** function i2_printRTC *****************
 10093 ;; Defined at:
 10094 ;;		line 62 in file "RTC.c"
 10095 ;; Parameters:    Size  Location     Type
 10096 ;;		None
 10097 ;; Auto vars:     Size  Location     Type
 10098 ;;  printRTC       14   44[COMRAM] int [7]
 10099 ;;  printRTC        4   60[COMRAM] unsigned char [4]
 10100 ;;  printRTC        2   64[COMRAM] int 
 10101 ;;  printRTC        2   58[COMRAM] int 
 10102 ;; Return value:  Size  Location     Type
 10103 ;;                  1    wreg      void 
 10104 ;; Registers used:
 10105 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10106 ;; Tracked objects:
 10107 ;;		On entry : 0/0
 10108 ;;		On exit  : 0/0
 10109 ;;		Unchanged: 0/0
 10110 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10111 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10112 ;;      Locals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10113 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10114 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10115 ;;Total ram usage:       25 bytes
 10116 ;; Hardware stack levels used:    1
 10117 ;; Hardware stack levels required when called:    3
 10118 ;; This function calls:
 10119 ;;		i2_getRTC
 10120 ;;		i2_lcdInst
 10121 ;;		i2_printf
 10122 ;;		i2_strcpy
 10123 ;; This function is called by:
 10124 ;;		i2_change_state_to_menu_start
 10125 ;; This function uses a non-reentrant model
 10126 ;;
 10127                           
 10128                           	psect	text45
 10129  00148A                     __ptext45:
 10130                           	opt stack 0
 10131  00148A                     i2_printRTC:
 10132                           	opt stack 18
 10133                           
 10134                           ;RTC.c: 63: getRTC();
 10135                           
 10136                           ;incstack = 0
 10137  00148A  EC52  F011         	call	i2_getRTC	;wreg free
 10138                           
 10139                           ;RTC.c: 64: char month[] = "MMM";
 10140  00148E  C10E  F03D         	movff	printRTC@F3192,i2printRTC@month
 10141  001492  C10F  F03E         	movff	printRTC@F3192+1,i2printRTC@month+1
 10142  001496  C110  F03F         	movff	printRTC@F3192+2,i2printRTC@month+2
 10143  00149A  C111  F040         	movff	printRTC@F3192+3,i2printRTC@month+3
 10144                           
 10145                           ;RTC.c: 65: int INT_time[7];
 10146                           ;RTC.c: 66: for(int i = 0; i < 7; i++){
 10147  00149E  0E00               	movlw	0
 10148  0014A0  6E42               	movwf	i2printRTC@i+1,c
 10149  0014A2  0E00               	movlw	0
 10150  0014A4  6E41               	movwf	i2printRTC@i,c
 10151  0014A6  BE42               	btfsc	i2printRTC@i+1,7,c
 10152  0014A8  D006               	goto	i2l4825
 10153  0014AA  5042               	movf	i2printRTC@i+1,w,c
 10154  0014AC  E135               	bnz	i2l967
 10155  0014AE  0E07               	movlw	7
 10156  0014B0  5C41               	subwf	i2printRTC@i,w,c
 10157  0014B2  B0D8               	btfsc	status,0,c
 10158  0014B4  D031               	goto	i2l967
 10159  0014B6                     i2l4825:
 10160                           
 10161                           ;RTC.c: 67: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 10162  0014B6  0EDC               	movlw	low _time
 10163  0014B8  2441               	addwf	i2printRTC@i,w,c
 10164  0014BA  6ED9               	movwf	fsr2l,c
 10165  0014BC  0E00               	movlw	high _time
 10166  0014BE  2042               	addwfc	i2printRTC@i+1,w,c
 10167  0014C0  6EDA               	movwf	fsr2h,c
 10168  0014C2  50DF               	movf	indf2,w,c
 10169  0014C4  6E2A               	movwf	??i2_printRTC& (0+255),c
 10170  0014C6  3A2A               	swapf	??i2_printRTC,f,c
 10171  0014C8  0E0F               	movlw	15
 10172  0014CA  162A               	andwf	??i2_printRTC,f,c
 10173  0014CC  0E0F               	movlw	15
 10174  0014CE  162A               	andwf	??i2_printRTC,f,c
 10175  0014D0  502A               	movf	??i2_printRTC,w,c
 10176  0014D2  0D0A               	mullw	10
 10177  0014D4  0EDC               	movlw	low _time
 10178  0014D6  2441               	addwf	i2printRTC@i,w,c
 10179  0014D8  6ED9               	movwf	fsr2l,c
 10180  0014DA  0E00               	movlw	high _time
 10181  0014DC  2042               	addwfc	i2printRTC@i+1,w,c
 10182  0014DE  6EDA               	movwf	fsr2h,c
 10183  0014E0  50DF               	movf	indf2,w,c
 10184  0014E2  0B0F               	andlw	15
 10185  0014E4  6E2B               	movwf	(??i2_printRTC+1)& (0+255),c
 10186  0014E6  6A2C               	clrf	(??i2_printRTC+2)& (0+255),c
 10187  0014E8  50F3               	movf	prodl,w,c
 10188  0014EA  262B               	addwf	??i2_printRTC+1,f,c
 10189  0014EC  50F4               	movf	prodh,w,c
 10190  0014EE  222C               	addwfc	??i2_printRTC+2,f,c
 10191  0014F0  90D8               	bcf	status,0,c
 10192  0014F2  3441               	rlcf	i2printRTC@i,w,c
 10193  0014F4  6ED9               	movwf	fsr2l,c
 10194  0014F6  3442               	rlcf	i2printRTC@i+1,w,c
 10195  0014F8  6EDA               	movwf	fsr2h,c
 10196  0014FA  0E2D               	movlw	low i2printRTC@INT_time
 10197  0014FC  26D9               	addwf	fsr2l,f,c
 10198  0014FE  0E00               	movlw	high i2printRTC@INT_time
 10199  001500  22DA               	addwfc	fsr2h,f,c
 10200  001502  C02B  FFDE         	movff	??i2_printRTC+1,postinc2
 10201  001506  C02C  FFDD         	movff	??i2_printRTC+2,postdec2
 10202  00150A  4A41               	infsnz	i2printRTC@i,f,c
 10203  00150C  2A42               	incf	i2printRTC@i+1,f,c
 10204  00150E  BE42               	btfsc	i2printRTC@i+1,7,c
 10205  001510  D7D2               	goto	i2l4825
 10206  001512  5042               	movf	i2printRTC@i+1,w,c
 10207  001514  E101               	bnz	i2u345_40
 10208  001516  D7CB               	goto	L2
 10209  001518                     i2u345_40:
 10210  001518                     i2l967:
 10211                           
 10212                           ;RTC.c: 68: }
 10213                           ;RTC.c: 69: int RTC_month = INT_time[5];
 10214  001518  C037  F03B         	movff	i2printRTC@INT_time+10,i2printRTC@RTC_month
 10215  00151C  C038  F03C         	movff	i2printRTC@INT_time+11,i2printRTC@RTC_month+1
 10216                           
 10217                           ;RTC.c: 70: switch(RTC_month){
 10218  001520  D084               	goto	i2l4857
 10219  001522                     i2l4831:
 10220                           
 10221                           ;RTC.c: 72: strcpy(month, "Jan");
 10222  001522  0E3D               	movlw	low i2printRTC@month
 10223  001524  6E01               	movwf	i2strcpy@to,c
 10224  001526  0E00               	movlw	high i2printRTC@month
 10225  001528  6E02               	movwf	i2strcpy@to+1,c
 10226  00152A  0EDB               	movlw	low STR_36
 10227  00152C  6E03               	movwf	i2strcpy@from,c
 10228  00152E  0EFF               	movlw	high STR_36
 10229  001530  6E04               	movwf	i2strcpy@from+1,c
 10230  001532  ECB7  F013         	call	i2_strcpy	;wreg free
 10231                           
 10232                           ;RTC.c: 73: break;
 10233  001536  D0A6               	goto	i2l4859
 10234  001538                     i2l4833:
 10235                           
 10236                           ;RTC.c: 75: strcpy(month, "Feb");
 10237  001538  0E3D               	movlw	low i2printRTC@month
 10238  00153A  6E01               	movwf	i2strcpy@to,c
 10239  00153C  0E00               	movlw	high i2printRTC@month
 10240  00153E  6E02               	movwf	i2strcpy@to+1,c
 10241  001540  0ECB               	movlw	low STR_37
 10242  001542  6E03               	movwf	i2strcpy@from,c
 10243  001544  0EFF               	movlw	high STR_37
 10244  001546  6E04               	movwf	i2strcpy@from+1,c
 10245  001548  ECB7  F013         	call	i2_strcpy	;wreg free
 10246                           
 10247                           ;RTC.c: 76: break;
 10248  00154C  D09B               	goto	i2l4859
 10249  00154E                     i2l4835:
 10250                           
 10251                           ;RTC.c: 78: strcpy(month, "Mar");
 10252  00154E  0E3D               	movlw	low i2printRTC@month
 10253  001550  6E01               	movwf	i2strcpy@to,c
 10254  001552  0E00               	movlw	high i2printRTC@month
 10255  001554  6E02               	movwf	i2strcpy@to+1,c
 10256  001556  0EE7               	movlw	low STR_38
 10257  001558  6E03               	movwf	i2strcpy@from,c
 10258  00155A  0EFF               	movlw	high STR_38
 10259  00155C  6E04               	movwf	i2strcpy@from+1,c
 10260  00155E  ECB7  F013         	call	i2_strcpy	;wreg free
 10261                           
 10262                           ;RTC.c: 79: break;
 10263  001562  D090               	goto	i2l4859
 10264  001564                     i2l4837:
 10265                           
 10266                           ;RTC.c: 81: strcpy(month, "Apr");
 10267  001564  0E3D               	movlw	low i2printRTC@month
 10268  001566  6E01               	movwf	i2strcpy@to,c
 10269  001568  0E00               	movlw	high i2printRTC@month
 10270  00156A  6E02               	movwf	i2strcpy@to+1,c
 10271  00156C  0EEB               	movlw	low STR_39
 10272  00156E  6E03               	movwf	i2strcpy@from,c
 10273  001570  0EFF               	movlw	high STR_39
 10274  001572  6E04               	movwf	i2strcpy@from+1,c
 10275  001574  ECB7  F013         	call	i2_strcpy	;wreg free
 10276                           
 10277                           ;RTC.c: 82: break;
 10278  001578  D085               	goto	i2l4859
 10279  00157A                     i2l4839:
 10280                           
 10281                           ;RTC.c: 84: strcpy(month, "May");
 10282  00157A  0E3D               	movlw	low i2printRTC@month
 10283  00157C  6E01               	movwf	i2strcpy@to,c
 10284  00157E  0E00               	movlw	high i2printRTC@month
 10285  001580  6E02               	movwf	i2strcpy@to+1,c
 10286  001582  0EF7               	movlw	low STR_40
 10287  001584  6E03               	movwf	i2strcpy@from,c
 10288  001586  0EFF               	movlw	high STR_40
 10289  001588  6E04               	movwf	i2strcpy@from+1,c
 10290  00158A  ECB7  F013         	call	i2_strcpy	;wreg free
 10291                           
 10292                           ;RTC.c: 85: break;
 10293  00158E  D07A               	goto	i2l4859
 10294  001590                     i2l4841:
 10295                           
 10296                           ;RTC.c: 87: strcpy(month, "Jun");
 10297  001590  0E3D               	movlw	low i2printRTC@month
 10298  001592  6E01               	movwf	i2strcpy@to,c
 10299  001594  0E00               	movlw	high i2printRTC@month
 10300  001596  6E02               	movwf	i2strcpy@to+1,c
 10301  001598  0EDF               	movlw	low STR_41
 10302  00159A  6E03               	movwf	i2strcpy@from,c
 10303  00159C  0EFF               	movlw	high STR_41
 10304  00159E  6E04               	movwf	i2strcpy@from+1,c
 10305  0015A0  ECB7  F013         	call	i2_strcpy	;wreg free
 10306                           
 10307                           ;RTC.c: 88: break;
 10308  0015A4  D06F               	goto	i2l4859
 10309  0015A6                     i2l4843:
 10310                           
 10311                           ;RTC.c: 90: strcpy(month, "Jul");
 10312  0015A6  0E3D               	movlw	low i2printRTC@month
 10313  0015A8  6E01               	movwf	i2strcpy@to,c
 10314  0015AA  0E00               	movlw	high i2printRTC@month
 10315  0015AC  6E02               	movwf	i2strcpy@to+1,c
 10316  0015AE  0ED7               	movlw	low STR_42
 10317  0015B0  6E03               	movwf	i2strcpy@from,c
 10318  0015B2  0EFF               	movlw	high STR_42
 10319  0015B4  6E04               	movwf	i2strcpy@from+1,c
 10320  0015B6  ECB7  F013         	call	i2_strcpy	;wreg free
 10321                           
 10322                           ;RTC.c: 91: break;
 10323  0015BA  D064               	goto	i2l4859
 10324  0015BC                     i2l4845:
 10325                           
 10326                           ;RTC.c: 93: strcpy(month, "Aug");
 10327  0015BC  0E3D               	movlw	low i2printRTC@month
 10328  0015BE  6E01               	movwf	i2strcpy@to,c
 10329  0015C0  0E00               	movlw	high i2printRTC@month
 10330  0015C2  6E02               	movwf	i2strcpy@to+1,c
 10331  0015C4  0ED3               	movlw	low STR_43
 10332  0015C6  6E03               	movwf	i2strcpy@from,c
 10333  0015C8  0EFF               	movlw	high STR_43
 10334  0015CA  6E04               	movwf	i2strcpy@from+1,c
 10335  0015CC  ECB7  F013         	call	i2_strcpy	;wreg free
 10336                           
 10337                           ;RTC.c: 94: break;
 10338  0015D0  D059               	goto	i2l4859
 10339  0015D2                     i2l4847:
 10340                           
 10341                           ;RTC.c: 96: strcpy(month, "Sep");
 10342  0015D2  0E3D               	movlw	low i2printRTC@month
 10343  0015D4  6E01               	movwf	i2strcpy@to,c
 10344  0015D6  0E00               	movlw	high i2printRTC@month
 10345  0015D8  6E02               	movwf	i2strcpy@to+1,c
 10346  0015DA  0EE3               	movlw	low STR_44
 10347  0015DC  6E03               	movwf	i2strcpy@from,c
 10348  0015DE  0EFF               	movlw	high STR_44
 10349  0015E0  6E04               	movwf	i2strcpy@from+1,c
 10350  0015E2  ECB7  F013         	call	i2_strcpy	;wreg free
 10351                           
 10352                           ;RTC.c: 97: break;
 10353  0015E6  D04E               	goto	i2l4859
 10354  0015E8                     i2l4849:
 10355                           
 10356                           ;RTC.c: 99: strcpy(month, "Oct");
 10357  0015E8  0E3D               	movlw	low i2printRTC@month
 10358  0015EA  6E01               	movwf	i2strcpy@to,c
 10359  0015EC  0E00               	movlw	high i2printRTC@month
 10360  0015EE  6E02               	movwf	i2strcpy@to+1,c
 10361  0015F0  0EEF               	movlw	low STR_45
 10362  0015F2  6E03               	movwf	i2strcpy@from,c
 10363  0015F4  0EFF               	movlw	high STR_45
 10364  0015F6  6E04               	movwf	i2strcpy@from+1,c
 10365  0015F8  ECB7  F013         	call	i2_strcpy	;wreg free
 10366                           
 10367                           ;RTC.c: 100: break;
 10368  0015FC  D043               	goto	i2l4859
 10369  0015FE                     i2l4851:
 10370                           
 10371                           ;RTC.c: 102: strcpy(month, "Nov");
 10372  0015FE  0E3D               	movlw	low i2printRTC@month
 10373  001600  6E01               	movwf	i2strcpy@to,c
 10374  001602  0E00               	movlw	high i2printRTC@month
 10375  001604  6E02               	movwf	i2strcpy@to+1,c
 10376  001606  0EF3               	movlw	low STR_46
 10377  001608  6E03               	movwf	i2strcpy@from,c
 10378  00160A  0EFF               	movlw	high STR_46
 10379  00160C  6E04               	movwf	i2strcpy@from+1,c
 10380  00160E  ECB7  F013         	call	i2_strcpy	;wreg free
 10381                           
 10382                           ;RTC.c: 103: break;
 10383  001612  D038               	goto	i2l4859
 10384  001614                     i2l4853:
 10385                           
 10386                           ;RTC.c: 105: strcpy(month, "Dec");
 10387  001614  0E3D               	movlw	low i2printRTC@month
 10388  001616  6E01               	movwf	i2strcpy@to,c
 10389  001618  0E00               	movlw	high i2printRTC@month
 10390  00161A  6E02               	movwf	i2strcpy@to+1,c
 10391  00161C  0ECF               	movlw	low STR_47
 10392  00161E  6E03               	movwf	i2strcpy@from,c
 10393  001620  0EFF               	movlw	high STR_47
 10394  001622  6E04               	movwf	i2strcpy@from+1,c
 10395  001624  ECB7  F013         	call	i2_strcpy	;wreg free
 10396                           
 10397                           ;RTC.c: 107: }
 10398                           
 10399                           ;RTC.c: 106: break;
 10400  001628  D02D               	goto	i2l4859
 10401  00162A                     i2l4857:
 10402  00162A  C03B  F02A         	movff	i2printRTC@RTC_month,??i2_printRTC
 10403  00162E  C03C  F02B         	movff	i2printRTC@RTC_month+1,??i2_printRTC+1
 10404                           
 10405                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 10406                           ; Switch size 1, requested type "space"
 10407                           ; Number of cases is 1, Range of values is 0 to 0
 10408                           ; switch strategies available:
 10409                           ; Name         Instructions Cycles
 10410                           ; simple_byte            4     3 (average)
 10411                           ;	Chosen strategy is simple_byte
 10412  001632  502B               	movf	??i2_printRTC+1,w,c
 10413  001634  0A00               	xorlw	0	; case 0
 10414  001636  A4D8               	btfss	status,2,c
 10415  001638  D025               	goto	i2l4859
 10416                           
 10417                           ; Switch size 1, requested type "space"
 10418                           ; Number of cases is 12, Range of values is 1 to 12
 10419                           ; switch strategies available:
 10420                           ; Name         Instructions Cycles
 10421                           ; simple_byte           37    19 (average)
 10422                           ;	Chosen strategy is simple_byte
 10423  00163A  502A               	movf	??i2_printRTC,w,c
 10424  00163C  0A01               	xorlw	1	; case 1
 10425  00163E  B4D8               	btfsc	status,2,c
 10426  001640  D770               	goto	i2l4831
 10427  001642  0A03               	xorlw	3	; case 2
 10428  001644  B4D8               	btfsc	status,2,c
 10429  001646  D778               	goto	i2l4833
 10430  001648  0A01               	xorlw	1	; case 3
 10431  00164A  B4D8               	btfsc	status,2,c
 10432  00164C  D780               	goto	i2l4835
 10433  00164E  0A07               	xorlw	7	; case 4
 10434  001650  B4D8               	btfsc	status,2,c
 10435  001652  D788               	goto	i2l4837
 10436  001654  0A01               	xorlw	1	; case 5
 10437  001656  B4D8               	btfsc	status,2,c
 10438  001658  D790               	goto	i2l4839
 10439  00165A  0A03               	xorlw	3	; case 6
 10440  00165C  B4D8               	btfsc	status,2,c
 10441  00165E  D798               	goto	i2l4841
 10442  001660  0A01               	xorlw	1	; case 7
 10443  001662  B4D8               	btfsc	status,2,c
 10444  001664  D7A0               	goto	i2l4843
 10445  001666  0A0F               	xorlw	15	; case 8
 10446  001668  B4D8               	btfsc	status,2,c
 10447  00166A  D7A8               	goto	i2l4845
 10448  00166C  0A01               	xorlw	1	; case 9
 10449  00166E  B4D8               	btfsc	status,2,c
 10450  001670  D7B0               	goto	i2l4847
 10451  001672  0A03               	xorlw	3	; case 10
 10452  001674  B4D8               	btfsc	status,2,c
 10453  001676  D7B8               	goto	i2l4849
 10454  001678  0A01               	xorlw	1	; case 11
 10455  00167A  B4D8               	btfsc	status,2,c
 10456  00167C  D7C0               	goto	i2l4851
 10457  00167E  0A07               	xorlw	7	; case 12
 10458  001680  B4D8               	btfsc	status,2,c
 10459  001682  D7C8               	goto	i2l4853
 10460  001684                     i2l4859:
 10461                           
 10462                           ;RTC.c: 108: lcdInst(0b10000000);;
 10463  001684  0E80               	movlw	128
 10464  001686  ECE6  F015         	call	i2_lcdInst
 10465                           
 10466                           ;RTC.c: 109: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
 10467  00168A  0ED0               	movlw	low STR_48
 10468  00168C  6E0D               	movwf	i2printf@f,c
 10469  00168E  0EFD               	movlw	high STR_48
 10470  001690  6E0E               	movwf	i2printf@f+1,c
 10471  001692  C035  F00F         	movff	i2printRTC@INT_time+8,?i2_printf+2
 10472  001696  C036  F010         	movff	i2printRTC@INT_time+9,?i2_printf+3
 10473  00169A  0E3D               	movlw	low i2printRTC@month
 10474  00169C  6E11               	movwf	?i2_printf+4,c
 10475  00169E  0E00               	movlw	high i2printRTC@month
 10476  0016A0  6E12               	movwf	?i2_printf+5,c
 10477  0016A2  C031  F013         	movff	i2printRTC@INT_time+4,?i2_printf+6
 10478  0016A6  C032  F014         	movff	i2printRTC@INT_time+5,?i2_printf+7
 10479  0016AA  C02F  F015         	movff	i2printRTC@INT_time+2,?i2_printf+8
 10480  0016AE  C030  F016         	movff	i2printRTC@INT_time+3,?i2_printf+9
 10481  0016B2  C02D  F017         	movff	i2printRTC@INT_time,?i2_printf+10
 10482  0016B6  C02E  F018         	movff	i2printRTC@INT_time+1,?i2_printf+11
 10483  0016BA  ECC0  F004         	call	i2_printf	;wreg free
 10484  0016BE  0012               	return		;funcret
 10485  0016C0                     __end_ofi2_printRTC:
 10486                           	opt stack 0
 10487                           pclatu	equ	0xFFB
 10488                           pclath	equ	0xFFA
 10489                           tblptru	equ	0xFF8
 10490                           tblptrh	equ	0xFF7
 10491                           tblptrl	equ	0xFF6
 10492                           tablat	equ	0xFF5
 10493                           prodh	equ	0xFF4
 10494                           prodl	equ	0xFF3
 10495                           intcon	equ	0xFF2
 10496                           intcon2	equ	0xFF1
 10497                           intcon3	equ	0xFF0
 10498                           indf0	equ	0xFEF
 10499                           postinc0	equ	0xFEE
 10500                           fsr0h	equ	0xFEA
 10501                           fsr0l	equ	0xFE9
 10502                           wreg	equ	0xFE8
 10503                           postdec1	equ	0xFE5
 10504                           fsr1h	equ	0xFE2
 10505                           fsr1l	equ	0xFE1
 10506                           indf2	equ	0xFDF
 10507                           postinc2	equ	0xFDE
 10508                           postdec2	equ	0xFDD
 10509                           fsr2h	equ	0xFDA
 10510                           fsr2l	equ	0xFD9
 10511                           status	equ	0xFD8
 10512                           
 10513 ;; *************** function i2_strcpy *****************
 10514 ;; Defined at:
 10515 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
 10516 ;; Parameters:    Size  Location     Type
 10517 ;;  to              2    0[COMRAM] PTR unsigned char 
 10518 ;;		 -> printRTC@month(4), 
 10519 ;;  from            2    2[COMRAM] PTR const unsigned char 
 10520 ;;		 -> STR_47(4), STR_46(4), STR_45(4), STR_44(4), 
 10521 ;;		 -> STR_43(4), STR_42(4), STR_41(4), STR_40(4), 
 10522 ;;		 -> STR_39(4), STR_38(4), STR_37(4), STR_36(4), 
 10523 ;; Auto vars:     Size  Location     Type
 10524 ;;  strcpy          2    4[COMRAM] PTR unsigned char 
 10525 ;;		 -> printRTC@month(4), 
 10526 ;; Return value:  Size  Location     Type
 10527 ;;                  2    0[COMRAM] PTR unsigned char 
 10528 ;; Registers used:
 10529 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 10530 ;; Tracked objects:
 10531 ;;		On entry : 0/0
 10532 ;;		On exit  : 0/0
 10533 ;;		Unchanged: 0/0
 10534 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10535 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10536 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10537 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10538 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10539 ;;Total ram usage:        6 bytes
 10540 ;; Hardware stack levels used:    1
 10541 ;; This function calls:
 10542 ;;		Nothing
 10543 ;; This function is called by:
 10544 ;;		i2_printRTC
 10545 ;; This function uses a non-reentrant model
 10546 ;;
 10547                           
 10548                           	psect	text46
 10549  00276E                     __ptext46:
 10550                           	opt stack 0
 10551  00276E                     i2_strcpy:
 10552                           	opt stack 20
 10553                           
 10554                           ;incstack = 0
 10555  00276E  C001  F005         	movff	i2strcpy@to,i2strcpy@cp
 10556  002772  C002  F006         	movff	i2strcpy@to+1,i2strcpy@cp+1
 10557  002776  D004               	goto	i2l4621
 10558  002778                     i2l4619:
 10559  002778  4A05               	infsnz	i2strcpy@cp,f,c
 10560  00277A  2A06               	incf	i2strcpy@cp+1,f,c
 10561  00277C  4A03               	infsnz	i2strcpy@from,f,c
 10562  00277E  2A04               	incf	i2strcpy@from+1,f,c
 10563  002780                     i2l4621:
 10564  002780  C003  FFF6         	movff	i2strcpy@from,tblptrl
 10565  002784  C004  FFF7         	movff	i2strcpy@from+1,tblptrh
 10566  002788                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 10567  002788  6AF8               	clrf	tblptru,c
 10568  00278A                     	endif
 10569  00278A                     	if	0	;tblptru may be non-zero
 10570  00278A                     	endif
 10571  00278A  C005  FFD9         	movff	i2strcpy@cp,fsr2l
 10572  00278E  C006  FFDA         	movff	i2strcpy@cp+1,fsr2h
 10573  002792  0008               	tblrd		*
 10574  002794  CFF5 FFDF          	movff	tablat,indf2
 10575  002798  50DF               	movf	indf2,w,c
 10576  00279A  B4D8               	btfsc	status,2,c
 10577  00279C  0012               	return	
 10578  00279E  D7EC               	goto	i2l4619
 10579  0027A0                     __end_ofi2_strcpy:
 10580                           	opt stack 0
 10581                           pclatu	equ	0xFFB
 10582                           pclath	equ	0xFFA
 10583                           tblptru	equ	0xFF8
 10584                           tblptrh	equ	0xFF7
 10585                           tblptrl	equ	0xFF6
 10586                           tablat	equ	0xFF5
 10587                           prodh	equ	0xFF4
 10588                           prodl	equ	0xFF3
 10589                           intcon	equ	0xFF2
 10590                           intcon2	equ	0xFF1
 10591                           intcon3	equ	0xFF0
 10592                           indf0	equ	0xFEF
 10593                           postinc0	equ	0xFEE
 10594                           fsr0h	equ	0xFEA
 10595                           fsr0l	equ	0xFE9
 10596                           wreg	equ	0xFE8
 10597                           postdec1	equ	0xFE5
 10598                           fsr1h	equ	0xFE2
 10599                           fsr1l	equ	0xFE1
 10600                           indf2	equ	0xFDF
 10601                           postinc2	equ	0xFDE
 10602                           postdec2	equ	0xFDD
 10603                           fsr2h	equ	0xFDA
 10604                           fsr2l	equ	0xFD9
 10605                           status	equ	0xFD8
 10606                           
 10607 ;; *************** function _inputHandler *****************
 10608 ;; Defined at:
 10609 ;;		line 315 in file "UI.c"
 10610 ;; Parameters:    Size  Location     Type
 10611 ;;		None
 10612 ;; Auto vars:     Size  Location     Type
 10613 ;;		None
 10614 ;; Return value:  Size  Location     Type
 10615 ;;                  2   41[COMRAM] int 
 10616 ;; Registers used:
 10617 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10618 ;; Tracked objects:
 10619 ;;		On entry : 0/0
 10620 ;;		On exit  : 0/0
 10621 ;;		Unchanged: 0/0
 10622 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10623 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10624 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10625 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10626 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10627 ;;Total ram usage:        4 bytes
 10628 ;; Hardware stack levels used:    1
 10629 ;; Hardware stack levels required when called:    4
 10630 ;; This function calls:
 10631 ;;		_change_state_to_logs_11
 10632 ;;		_change_state_to_logs_12
 10633 ;;		_change_state_to_logs_22
 10634 ;;		_change_state_to_logs_23
 10635 ;;		_change_state_to_logs_33
 10636 ;;		_change_state_to_logs_34
 10637 ;;		_change_state_to_menu_11
 10638 ;;		_change_state_to_menu_23
 10639 ;;		i2_change_state_to_menu_12
 10640 ;;		i2_change_state_to_menu_22
 10641 ;; This function is called by:
 10642 ;;		_updateMenu
 10643 ;; This function uses a non-reentrant model
 10644 ;;
 10645                           
 10646                           	psect	text47
 10647  0018BA                     __ptext47:
 10648                           	opt stack 0
 10649  0018BA                     _inputHandler:
 10650                           	opt stack 18
 10651                           
 10652                           ;UI.c: 320: if(firstboot){
 10653                           
 10654                           ;incstack = 0
 10655  0018BA  5073               	movf	_firstboot,w,c
 10656  0018BC  1074               	iorwf	_firstboot+1,w,c
 10657  0018BE  B4D8               	btfsc	status,2,c
 10658  0018C0  D00B               	goto	i2l4927
 10659                           
 10660                           ;UI.c: 321: change_state_to_menu_11();
 10661  0018C2  EC18  F014         	call	_change_state_to_menu_11	;wreg free
 10662                           
 10663                           ;UI.c: 322: firstboot = 0;
 10664  0018C6  0E00               	movlw	0
 10665  0018C8  6E74               	movwf	_firstboot+1,c
 10666  0018CA  0E00               	movlw	0
 10667  0018CC  6E73               	movwf	_firstboot,c
 10668                           
 10669                           ;UI.c: 323: return 0;
 10670  0018CE  0E00               	movlw	0
 10671  0018D0  6E2B               	movwf	?_inputHandler+1,c
 10672  0018D2  0E00               	movlw	0
 10673  0018D4  6E2A               	movwf	?_inputHandler,c
 10674  0018D6  0012               	return	
 10675  0018D8                     i2l4927:
 10676                           
 10677                           ;UI.c: 324: }
 10678                           ;UI.c: 325: if (logstate){
 10679  0018D8  0100               	movlb	0	; () banked
 10680  0018DA  51F3               	movf	_logstate& (0+255),w,b
 10681  0018DC  0100               	movlb	0	; () banked
 10682  0018DE  11F4               	iorwf	(_logstate+1)& (0+255),w,b
 10683  0018E0  B4D8               	btfsc	status,2,c
 10684  0018E2  D0C7               	goto	i2l5045
 10685                           
 10686                           ; BSR set to: 0
 10687                           ;UI.c: 326: if(input == 'C' && PORTBbits.RB1 == 1){
 10688  0018E4  0E43               	movlw	67
 10689  0018E6  1879               	xorwf	_input,w,c
 10690  0018E8  A4D8               	btfss	status,2,c
 10691  0018EA  D012               	goto	i2l4945
 10692                           
 10693                           ; BSR set to: 0
 10694  0018EC  B281               	btfsc	3969,1,c	;volatile
 10695  0018EE  D009               	goto	i2l4937
 10696  0018F0  D00F               	goto	i2l4945
 10697  0018F2                     i2l4935:
 10698                           
 10699                           ;UI.c: 329: _delay((unsigned long)((10)*(32000000/4000.0)));
 10700  0018F2  0E68               	movlw	104
 10701  0018F4  6E2C               	movwf	??_inputHandler& (0+255),c
 10702  0018F6  0EE4               	movlw	228
 10703  0018F8                     i2u539_47:
 10704  0018F8  2EE8               	decfsz	wreg,f,c
 10705  0018FA  D7FE               	bra	i2u539_47
 10706  0018FC  2E2C               	decfsz	??_inputHandler& (0+255),f,c
 10707  0018FE  D7FC               	bra	i2u539_47
 10708  001900  D000               	nop2	
 10709  001902                     i2l4937:
 10710  001902  B281               	btfsc	3969,1,c	;volatile
 10711  001904  D7F6               	goto	i2l4935
 10712  001906                     i2l4939:
 10713                           
 10714                           ;UI.c: 330: }
 10715                           ;UI.c: 331: return 0;
 10716  001906  0E00               	movlw	0
 10717  001908  6E2B               	movwf	?_inputHandler+1,c
 10718  00190A  0E00               	movlw	0
 10719  00190C  6E2A               	movwf	?_inputHandler,c
 10720  00190E  0012               	return	
 10721  001910                     i2l4945:
 10722                           
 10723                           ;UI.c: 333: else if (input == 'D'){
 10724  001910  0E44               	movlw	68
 10725  001912  1879               	xorwf	_input,w,c
 10726  001914  A4D8               	btfss	status,2,c
 10727  001916  D7F7               	goto	i2l4939
 10728                           
 10729                           ;UI.c: 335: logstate = 0;
 10730  001918  0E00               	movlw	0
 10731  00191A  0100               	movlb	0	; () banked
 10732  00191C  6FF4               	movwf	(_logstate+1)& (0+255),b
 10733  00191E  0E00               	movlw	0
 10734  001920  6FF3               	movwf	_logstate& (0+255),b
 10735                           
 10736                           ;UI.c: 336: switch(cur_state){
 10737  001922  D012               	goto	i2l4963
 10738  001924                     i2l4949:
 10739                           
 10740                           ;UI.c: 338: change_state_to_logs_11();
 10741  001924  EC90  F014         	call	_change_state_to_logs_11	;wreg free
 10742                           
 10743                           ;UI.c: 339: break;
 10744  001928  D7EE               	goto	i2l4939
 10745  00192A                     i2l4951:
 10746                           
 10747                           ;UI.c: 341: change_state_to_logs_12();
 10748  00192A  EC78  F014         	call	_change_state_to_logs_12	;wreg free
 10749                           
 10750                           ;UI.c: 342: break;
 10751  00192E  D7EB               	goto	i2l4939
 10752  001930                     i2l4953:
 10753                           
 10754                           ;UI.c: 344: change_state_to_logs_22();
 10755  001930  EC60  F014         	call	_change_state_to_logs_22	;wreg free
 10756                           
 10757                           ;UI.c: 345: break;
 10758  001934  D7E8               	goto	i2l4939
 10759  001936                     i2l4955:
 10760                           
 10761                           ;UI.c: 347: change_state_to_logs_23();
 10762  001936  ECBF  F014         	call	_change_state_to_logs_23	;wreg free
 10763                           
 10764                           ;UI.c: 348: break;
 10765  00193A  D7E5               	goto	i2l4939
 10766  00193C                     i2l4957:
 10767                           
 10768                           ;UI.c: 350: change_state_to_logs_33();
 10769  00193C  EC48  F014         	call	_change_state_to_logs_33	;wreg free
 10770                           
 10771                           ;UI.c: 351: break;
 10772  001940  D7E2               	goto	i2l4939
 10773  001942                     i2l4959:
 10774                           
 10775                           ;UI.c: 353: change_state_to_logs_34();
 10776  001942  EC30  F014         	call	_change_state_to_logs_34	;wreg free
 10777                           
 10778                           ;UI.c: 355: }
 10779                           
 10780                           ;UI.c: 354: break;
 10781  001946  D7DF               	goto	i2l4939
 10782  001948                     i2l4963:
 10783  001948  C0E7  F02C         	movff	_cur_state,??_inputHandler
 10784  00194C  C0E8  F02D         	movff	_cur_state+1,??_inputHandler+1
 10785                           
 10786                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
 10787                           ; Switch size 1, requested type "space"
 10788                           ; Number of cases is 2, Range of values is 3 to 4
 10789                           ; switch strategies available:
 10790                           ; Name         Instructions Cycles
 10791                           ; simple_byte            7     4 (average)
 10792                           ;	Chosen strategy is simple_byte
 10793  001950  502D               	movf	??_inputHandler+1,w,c
 10794  001952  0A03               	xorlw	3	; case 3
 10795  001954  B4D8               	btfsc	status,2,c
 10796  001956  D004               	goto	i2l6177
 10797  001958  0A07               	xorlw	7	; case 4
 10798  00195A  B4D8               	btfsc	status,2,c
 10799  00195C  D00F               	goto	i2l6179
 10800  00195E  D7D3               	goto	i2l4939
 10801  001960                     i2l6177:
 10802                           
 10803                           ; Switch size 1, requested type "space"
 10804                           ; Number of cases is 4, Range of values is 243 to 255
 10805                           ; switch strategies available:
 10806                           ; Name         Instructions Cycles
 10807                           ; simple_byte           13     7 (average)
 10808                           ;	Chosen strategy is simple_byte
 10809  001960  502C               	movf	??_inputHandler,w,c
 10810  001962  0AF3               	xorlw	243	; case 243
 10811  001964  B4D8               	btfsc	status,2,c
 10812  001966  D7DE               	goto	i2l4949
 10813  001968  0A07               	xorlw	7	; case 244
 10814  00196A  B4D8               	btfsc	status,2,c
 10815  00196C  D7DE               	goto	i2l4951
 10816  00196E  0A0A               	xorlw	10	; case 254
 10817  001970  B4D8               	btfsc	status,2,c
 10818  001972  D7DE               	goto	i2l4953
 10819  001974  0A01               	xorlw	1	; case 255
 10820  001976  B4D8               	btfsc	status,2,c
 10821  001978  D7DE               	goto	i2l4955
 10822  00197A  D7C5               	goto	i2l4939
 10823  00197C                     i2l6179:
 10824                           
 10825                           ; Switch size 1, requested type "space"
 10826                           ; Number of cases is 2, Range of values is 9 to 10
 10827                           ; switch strategies available:
 10828                           ; Name         Instructions Cycles
 10829                           ; simple_byte            7     4 (average)
 10830                           ;	Chosen strategy is simple_byte
 10831  00197C  502C               	movf	??_inputHandler,w,c
 10832  00197E  0A09               	xorlw	9	; case 9
 10833  001980  B4D8               	btfsc	status,2,c
 10834  001982  D7DC               	goto	i2l4957
 10835  001984  0A03               	xorlw	3	; case 10
 10836  001986  B4D8               	btfsc	status,2,c
 10837  001988  D7DC               	goto	i2l4959
 10838  00198A  D7BD               	goto	i2l4939
 10839  00198C                     i2l4975:
 10840                           
 10841                           ;UI.c: 365: if(cur_state == 11){
 10842  00198C  0E0B               	movlw	11
 10843  00198E  0100               	movlb	0	; () banked
 10844  001990  19E7               	xorwf	_cur_state& (0+255),w,b
 10845  001992  0100               	movlb	0	; () banked
 10846  001994  11E8               	iorwf	(_cur_state+1)& (0+255),w,b
 10847  001996  A4D8               	btfss	status,2,c
 10848  001998  D005               	goto	i2l4983
 10849                           
 10850                           ; BSR set to: 0
 10851                           ;UI.c: 366: return 0;
 10852  00199A  0E00               	movlw	0
 10853  00199C  6E2B               	movwf	?_inputHandler+1,c
 10854  00199E  0E00               	movlw	0
 10855  0019A0  6E2A               	movwf	?_inputHandler,c
 10856                           
 10857                           ; BSR set to: 0
 10858  0019A2  0012               	return	
 10859  0019A4                     i2l4983:
 10860                           
 10861                           ; BSR set to: 0
 10862                           ;UI.c: 368: else{
 10863                           ;UI.c: 369: change_state_to_menu_11();
 10864  0019A4  EC18  F014         	call	_change_state_to_menu_11	;wreg free
 10865                           
 10866                           ;UI.c: 370: }
 10867                           ;UI.c: 371: return 0;
 10868  0019A8  0E00               	movlw	0
 10869  0019AA  6E2B               	movwf	?_inputHandler+1,c
 10870  0019AC  0E00               	movlw	0
 10871  0019AE  6E2A               	movwf	?_inputHandler,c
 10872  0019B0  0012               	return	
 10873  0019B2                     i2l4989:
 10874                           
 10875                           ;UI.c: 373: if(cur_state == 22 | cur_state == 12){
 10876  0019B2  0E16               	movlw	22
 10877  0019B4  0100               	movlb	0	; () banked
 10878  0019B6  19E7               	xorwf	_cur_state& (0+255),w,b
 10879  0019B8  0100               	movlb	0	; () banked
 10880  0019BA  11E8               	iorwf	(_cur_state+1)& (0+255),w,b
 10881  0019BC  B4D8               	btfsc	status,2,c
 10882  0019BE  D007               	goto	i2l4993
 10883                           
 10884                           ; BSR set to: 0
 10885  0019C0  0E0C               	movlw	12
 10886  0019C2  0100               	movlb	0	; () banked
 10887  0019C4  19E7               	xorwf	_cur_state& (0+255),w,b
 10888  0019C6  0100               	movlb	0	; () banked
 10889  0019C8  11E8               	iorwf	(_cur_state+1)& (0+255),w,b
 10890  0019CA  A4D8               	btfss	status,2,c
 10891  0019CC  D005               	goto	i2l4999
 10892  0019CE                     i2l4993:
 10893                           
 10894                           ; BSR set to: 0
 10895                           ;UI.c: 374: return 0;
 10896  0019CE  0E00               	movlw	0
 10897  0019D0  6E2B               	movwf	?_inputHandler+1,c
 10898  0019D2  0E00               	movlw	0
 10899  0019D4  6E2A               	movwf	?_inputHandler,c
 10900                           
 10901                           ; BSR set to: 0
 10902  0019D6  0012               	return	
 10903  0019D8                     i2l4999:
 10904                           
 10905                           ; BSR set to: 0
 10906                           ;UI.c: 376: else if(cur_state == 23){
 10907  0019D8  0E17               	movlw	23
 10908  0019DA  0100               	movlb	0	; () banked
 10909  0019DC  19E7               	xorwf	_cur_state& (0+255),w,b
 10910  0019DE  0100               	movlb	0	; () banked
 10911  0019E0  11E8               	iorwf	(_cur_state+1)& (0+255),w,b
 10912  0019E2  A4D8               	btfss	status,2,c
 10913  0019E4  D003               	goto	i2l5003
 10914                           
 10915                           ; BSR set to: 0
 10916                           ;UI.c: 377: change_state_to_menu_22();
 10917  0019E6  ECD0  F013         	call	i2_change_state_to_menu_22	;wreg free
 10918                           
 10919                           ;UI.c: 378: }
 10920  0019EA  D002               	goto	i2l5005
 10921  0019EC                     i2l5003:
 10922                           
 10923                           ;UI.c: 379: else{
 10924                           ;UI.c: 380: change_state_to_menu_12();
 10925  0019EC  ECE8  F013         	call	i2_change_state_to_menu_12	;wreg free
 10926  0019F0                     i2l5005:
 10927                           
 10928                           ;UI.c: 381: }
 10929                           ;UI.c: 382: return 0;
 10930  0019F0  0E00               	movlw	0
 10931  0019F2  6E2B               	movwf	?_inputHandler+1,c
 10932  0019F4  0E00               	movlw	0
 10933  0019F6  6E2A               	movwf	?_inputHandler,c
 10934  0019F8  0012               	return	
 10935  0019FA                     i2l5009:
 10936                           
 10937                           ;UI.c: 384: if(cur_state == 23){
 10938  0019FA  0E17               	movlw	23
 10939  0019FC  0100               	movlb	0	; () banked
 10940  0019FE  19E7               	xorwf	_cur_state& (0+255),w,b
 10941  001A00  0100               	movlb	0	; () banked
 10942  001A02  11E8               	iorwf	(_cur_state+1)& (0+255),w,b
 10943  001A04  A4D8               	btfss	status,2,c
 10944  001A06  D005               	goto	i2l5017
 10945                           
 10946                           ; BSR set to: 0
 10947                           ;UI.c: 385: return 0;
 10948  001A08  0E00               	movlw	0
 10949  001A0A  6E2B               	movwf	?_inputHandler+1,c
 10950  001A0C  0E00               	movlw	0
 10951  001A0E  6E2A               	movwf	?_inputHandler,c
 10952                           
 10953                           ; BSR set to: 0
 10954  001A10  0012               	return	
 10955  001A12                     i2l5017:
 10956                           
 10957                           ; BSR set to: 0
 10958                           ;UI.c: 387: else{
 10959                           ;UI.c: 388: change_state_to_menu_23();
 10960  001A12  EC00  F014         	call	_change_state_to_menu_23	;wreg free
 10961                           
 10962                           ;UI.c: 389: }
 10963                           ;UI.c: 390: return 0;
 10964  001A16  0E00               	movlw	0
 10965  001A18  6E2B               	movwf	?_inputHandler+1,c
 10966  001A1A  0E00               	movlw	0
 10967  001A1C  6E2A               	movwf	?_inputHandler,c
 10968  001A1E  0012               	return	
 10969  001A20                     i2l5023:
 10970                           
 10971                           ;UI.c: 393: up = 1;
 10972  001A20  0E00               	movlw	0
 10973  001A22  6E76               	movwf	_up+1,c
 10974  001A24  0E01               	movlw	1
 10975  001A26  6E75               	movwf	_up,c
 10976                           
 10977                           ;UI.c: 394: return 1;
 10978  001A28  0E00               	movlw	0
 10979  001A2A  6E2B               	movwf	?_inputHandler+1,c
 10980  001A2C  0E01               	movlw	1
 10981  001A2E  6E2A               	movwf	?_inputHandler,c
 10982  001A30  0012               	return	
 10983  001A32                     i2l5027:
 10984                           
 10985                           ;UI.c: 396: down = 1;
 10986  001A32  0E00               	movlw	0
 10987  001A34  6E6E               	movwf	_down+1,c
 10988  001A36  0E01               	movlw	1
 10989  001A38  6E6D               	movwf	_down,c
 10990                           
 10991                           ;UI.c: 397: return 1;
 10992  001A3A  0E00               	movlw	0
 10993  001A3C  6E2B               	movwf	?_inputHandler+1,c
 10994  001A3E  0E01               	movlw	1
 10995  001A40  6E2A               	movwf	?_inputHandler,c
 10996  001A42  0012               	return	
 10997  001A44                     i2l5031:
 10998                           
 10999                           ;UI.c: 399: enter = 1;
 11000  001A44  0E00               	movlw	0
 11001  001A46  6E70               	movwf	_enter+1,c
 11002  001A48  0E01               	movlw	1
 11003  001A4A  6E6F               	movwf	_enter,c
 11004                           
 11005                           ;UI.c: 400: return 1;
 11006  001A4C  0E00               	movlw	0
 11007  001A4E  6E2B               	movwf	?_inputHandler+1,c
 11008  001A50  0E01               	movlw	1
 11009  001A52  6E2A               	movwf	?_inputHandler,c
 11010  001A54  0012               	return	
 11011  001A56                     i2l5035:
 11012                           
 11013                           ;UI.c: 402: back = 1;
 11014  001A56  0E00               	movlw	0
 11015  001A58  6E64               	movwf	_back+1,c
 11016  001A5A  0E01               	movlw	1
 11017  001A5C  6E63               	movwf	_back,c
 11018                           
 11019                           ;UI.c: 403: return 1;
 11020  001A5E  0E00               	movlw	0
 11021  001A60  6E2B               	movwf	?_inputHandler+1,c
 11022  001A62  0E01               	movlw	1
 11023  001A64  6E2A               	movwf	?_inputHandler,c
 11024  001A66  0012               	return	
 11025  001A68                     i2l5039:
 11026                           
 11027                           ;UI.c: 406: return 1;
 11028  001A68  0E00               	movlw	0
 11029  001A6A  6E2B               	movwf	?_inputHandler+1,c
 11030  001A6C  0E01               	movlw	1
 11031  001A6E  6E2A               	movwf	?_inputHandler,c
 11032                           
 11033                           ;UI.c: 407: }
 11034  001A70  0012               	return	
 11035  001A72                     i2l5045:
 11036  001A72  5079               	movf	_input,w,c
 11037                           
 11038                           ; Switch size 1, requested type "space"
 11039                           ; Number of cases is 7, Range of values is 49 to 68
 11040                           ; switch strategies available:
 11041                           ; Name         Instructions Cycles
 11042                           ; simple_byte           22    12 (average)
 11043                           ;	Chosen strategy is simple_byte
 11044  001A74  0A31               	xorlw	49	; case 49
 11045  001A76  B4D8               	btfsc	status,2,c
 11046  001A78  D789               	goto	i2l4975
 11047  001A7A  0A03               	xorlw	3	; case 50
 11048  001A7C  B4D8               	btfsc	status,2,c
 11049  001A7E  D799               	goto	i2l4989
 11050  001A80  0A01               	xorlw	1	; case 51
 11051  001A82  B4D8               	btfsc	status,2,c
 11052  001A84  D7BA               	goto	i2l5009
 11053  001A86  0A72               	xorlw	114	; case 65
 11054  001A88  B4D8               	btfsc	status,2,c
 11055  001A8A  D7CA               	goto	i2l5023
 11056  001A8C  0A03               	xorlw	3	; case 66
 11057  001A8E  B4D8               	btfsc	status,2,c
 11058  001A90  D7D0               	goto	i2l5027
 11059  001A92  0A01               	xorlw	1	; case 67
 11060  001A94  B4D8               	btfsc	status,2,c
 11061  001A96  D7D6               	goto	i2l5031
 11062  001A98  0A07               	xorlw	7	; case 68
 11063  001A9A  B4D8               	btfsc	status,2,c
 11064  001A9C  D7DC               	goto	i2l5035
 11065  001A9E  D7E4               	goto	i2l5039
 11066  001AA0                     __end_of_inputHandler:
 11067                           	opt stack 0
 11068                           pclatu	equ	0xFFB
 11069                           pclath	equ	0xFFA
 11070                           tblptru	equ	0xFF8
 11071                           tblptrh	equ	0xFF7
 11072                           tblptrl	equ	0xFF6
 11073                           tablat	equ	0xFF5
 11074                           prodh	equ	0xFF4
 11075                           prodl	equ	0xFF3
 11076                           intcon	equ	0xFF2
 11077                           intcon2	equ	0xFF1
 11078                           intcon3	equ	0xFF0
 11079                           indf0	equ	0xFEF
 11080                           postinc0	equ	0xFEE
 11081                           fsr0h	equ	0xFEA
 11082                           fsr0l	equ	0xFE9
 11083                           wreg	equ	0xFE8
 11084                           postdec1	equ	0xFE5
 11085                           fsr1h	equ	0xFE2
 11086                           fsr1l	equ	0xFE1
 11087                           indf2	equ	0xFDF
 11088                           postinc2	equ	0xFDE
 11089                           postdec2	equ	0xFDD
 11090                           fsr2h	equ	0xFDA
 11091                           fsr2l	equ	0xFD9
 11092                           status	equ	0xFD8
 11093                           
 11094 ;; *************** function i2_change_state_to_menu_22 *****************
 11095 ;; Defined at:
 11096 ;;		line 440 in file "UI.c"
 11097 ;; Parameters:    Size  Location     Type
 11098 ;;		None
 11099 ;; Auto vars:     Size  Location     Type
 11100 ;;		None
 11101 ;; Return value:  Size  Location     Type
 11102 ;;                  1    wreg      void 
 11103 ;; Registers used:
 11104 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11105 ;; Tracked objects:
 11106 ;;		On entry : 0/0
 11107 ;;		On exit  : 0/0
 11108 ;;		Unchanged: 0/0
 11109 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11110 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11111 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11112 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11113 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11114 ;;Total ram usage:        0 bytes
 11115 ;; Hardware stack levels used:    1
 11116 ;; Hardware stack levels required when called:    3
 11117 ;; This function calls:
 11118 ;;		i2_lcdInst
 11119 ;;		i2_printf
 11120 ;; This function is called by:
 11121 ;;		_updateMenu
 11122 ;;		_inputHandler
 11123 ;; This function uses a non-reentrant model
 11124 ;;
 11125                           
 11126                           	psect	text48
 11127  0027A0                     __ptext48:
 11128                           	opt stack 0
 11129  0027A0                     i2_change_state_to_menu_22:
 11130                           	opt stack 19
 11131                           
 11132                           ;UI.c: 441: cur_state = 22;
 11133                           
 11134                           ;incstack = 0
 11135  0027A0  0E00               	movlw	0
 11136  0027A2  0100               	movlb	0	; () banked
 11137  0027A4  6FE8               	movwf	(_cur_state+1)& (0+255),b
 11138  0027A6  0E16               	movlw	22
 11139  0027A8  6FE7               	movwf	_cur_state& (0+255),b
 11140                           
 11141                           ; BSR set to: 0
 11142                           ;UI.c: 443: lcdInst(0b10000000);;
 11143  0027AA  0E80               	movlw	128
 11144  0027AC  ECE6  F015         	call	i2_lcdInst
 11145                           
 11146                           ;UI.c: 444: printf("2. SORT        <");
 11147  0027B0  0E64               	movlw	low STR_19
 11148  0027B2  6E0D               	movwf	i2printf@f,c
 11149  0027B4  0EFF               	movlw	high STR_19
 11150  0027B6  6E0E               	movwf	i2printf@f+1,c
 11151  0027B8  ECC0  F004         	call	i2_printf	;wreg free
 11152                           
 11153                           ;UI.c: 445: lcdInst(0b11000000);;
 11154  0027BC  0EC0               	movlw	192
 11155  0027BE  ECE6  F015         	call	i2_lcdInst
 11156                           
 11157                           ;UI.c: 446: printf("3. LOGS         ");
 11158  0027C2  0E65               	movlw	low STR_21
 11159  0027C4  6E0D               	movwf	i2printf@f,c
 11160  0027C6  0EFE               	movlw	high STR_21
 11161  0027C8  6E0E               	movwf	i2printf@f+1,c
 11162  0027CA  ECC0  F004         	call	i2_printf	;wreg free
 11163  0027CE  0012               	return		;funcret
 11164  0027D0                     __end_ofi2_change_state_to_menu_22:
 11165                           	opt stack 0
 11166                           pclatu	equ	0xFFB
 11167                           pclath	equ	0xFFA
 11168                           tblptru	equ	0xFF8
 11169                           tblptrh	equ	0xFF7
 11170                           tblptrl	equ	0xFF6
 11171                           tablat	equ	0xFF5
 11172                           prodh	equ	0xFF4
 11173                           prodl	equ	0xFF3
 11174                           intcon	equ	0xFF2
 11175                           intcon2	equ	0xFF1
 11176                           intcon3	equ	0xFF0
 11177                           indf0	equ	0xFEF
 11178                           postinc0	equ	0xFEE
 11179                           fsr0h	equ	0xFEA
 11180                           fsr0l	equ	0xFE9
 11181                           wreg	equ	0xFE8
 11182                           postdec1	equ	0xFE5
 11183                           fsr1h	equ	0xFE2
 11184                           fsr1l	equ	0xFE1
 11185                           indf2	equ	0xFDF
 11186                           postinc2	equ	0xFDE
 11187                           postdec2	equ	0xFDD
 11188                           fsr2h	equ	0xFDA
 11189                           fsr2l	equ	0xFD9
 11190                           status	equ	0xFD8
 11191                           
 11192 ;; *************** function i2_change_state_to_menu_12 *****************
 11193 ;; Defined at:
 11194 ;;		line 432 in file "UI.c"
 11195 ;; Parameters:    Size  Location     Type
 11196 ;;		None
 11197 ;; Auto vars:     Size  Location     Type
 11198 ;;		None
 11199 ;; Return value:  Size  Location     Type
 11200 ;;                  1    wreg      void 
 11201 ;; Registers used:
 11202 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11203 ;; Tracked objects:
 11204 ;;		On entry : 0/0
 11205 ;;		On exit  : 0/0
 11206 ;;		Unchanged: 0/0
 11207 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11208 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11209 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11210 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11211 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11212 ;;Total ram usage:        0 bytes
 11213 ;; Hardware stack levels used:    1
 11214 ;; Hardware stack levels required when called:    3
 11215 ;; This function calls:
 11216 ;;		i2_lcdInst
 11217 ;;		i2_printf
 11218 ;; This function is called by:
 11219 ;;		_updateMenu
 11220 ;;		_inputHandler
 11221 ;; This function uses a non-reentrant model
 11222 ;;
 11223                           
 11224                           	psect	text49
 11225  0027D0                     __ptext49:
 11226                           	opt stack 0
 11227  0027D0                     i2_change_state_to_menu_12:
 11228                           	opt stack 19
 11229                           
 11230                           ;UI.c: 433: cur_state = 12;
 11231                           
 11232                           ;incstack = 0
 11233  0027D0  0E00               	movlw	0
 11234  0027D2  0100               	movlb	0	; () banked
 11235  0027D4  6FE8               	movwf	(_cur_state+1)& (0+255),b
 11236  0027D6  0E0C               	movlw	12
 11237  0027D8  6FE7               	movwf	_cur_state& (0+255),b
 11238                           
 11239                           ; BSR set to: 0
 11240                           ;UI.c: 435: lcdInst(0b10000000);;
 11241  0027DA  0E80               	movlw	128
 11242  0027DC  ECE6  F015         	call	i2_lcdInst
 11243                           
 11244                           ;UI.c: 436: printf("1. DATE/TIME    ");
 11245  0027E0  0E87               	movlw	low STR_18
 11246  0027E2  6E0D               	movwf	i2printf@f,c
 11247  0027E4  0EFE               	movlw	high STR_18
 11248  0027E6  6E0E               	movwf	i2printf@f+1,c
 11249  0027E8  ECC0  F004         	call	i2_printf	;wreg free
 11250                           
 11251                           ;UI.c: 437: lcdInst(0b11000000);;
 11252  0027EC  0EC0               	movlw	192
 11253  0027EE  ECE6  F015         	call	i2_lcdInst
 11254                           
 11255                           ;UI.c: 438: printf("2. SORT        <");
 11256  0027F2  0E64               	movlw	low STR_19
 11257  0027F4  6E0D               	movwf	i2printf@f,c
 11258  0027F6  0EFF               	movlw	high STR_19
 11259  0027F8  6E0E               	movwf	i2printf@f+1,c
 11260  0027FA  ECC0  F004         	call	i2_printf	;wreg free
 11261  0027FE  0012               	return		;funcret
 11262  002800                     __end_ofi2_change_state_to_menu_12:
 11263                           	opt stack 0
 11264                           pclatu	equ	0xFFB
 11265                           pclath	equ	0xFFA
 11266                           tblptru	equ	0xFF8
 11267                           tblptrh	equ	0xFF7
 11268                           tblptrl	equ	0xFF6
 11269                           tablat	equ	0xFF5
 11270                           prodh	equ	0xFF4
 11271                           prodl	equ	0xFF3
 11272                           intcon	equ	0xFF2
 11273                           intcon2	equ	0xFF1
 11274                           intcon3	equ	0xFF0
 11275                           indf0	equ	0xFEF
 11276                           postinc0	equ	0xFEE
 11277                           fsr0h	equ	0xFEA
 11278                           fsr0l	equ	0xFE9
 11279                           wreg	equ	0xFE8
 11280                           postdec1	equ	0xFE5
 11281                           fsr1h	equ	0xFE2
 11282                           fsr1l	equ	0xFE1
 11283                           indf2	equ	0xFDF
 11284                           postinc2	equ	0xFDE
 11285                           postdec2	equ	0xFDD
 11286                           fsr2h	equ	0xFDA
 11287                           fsr2l	equ	0xFD9
 11288                           status	equ	0xFD8
 11289                           
 11290 ;; *************** function _change_state_to_menu_23 *****************
 11291 ;; Defined at:
 11292 ;;		line 448 in file "UI.c"
 11293 ;; Parameters:    Size  Location     Type
 11294 ;;		None
 11295 ;; Auto vars:     Size  Location     Type
 11296 ;;		None
 11297 ;; Return value:  Size  Location     Type
 11298 ;;                  1    wreg      void 
 11299 ;; Registers used:
 11300 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11301 ;; Tracked objects:
 11302 ;;		On entry : 0/0
 11303 ;;		On exit  : 0/0
 11304 ;;		Unchanged: 0/0
 11305 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11306 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11307 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11308 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11309 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11310 ;;Total ram usage:        0 bytes
 11311 ;; Hardware stack levels used:    1
 11312 ;; Hardware stack levels required when called:    3
 11313 ;; This function calls:
 11314 ;;		i2_lcdInst
 11315 ;;		i2_printf
 11316 ;; This function is called by:
 11317 ;;		_updateMenu
 11318 ;;		_inputHandler
 11319 ;; This function uses a non-reentrant model
 11320 ;;
 11321                           
 11322                           	psect	text50
 11323  002800                     __ptext50:
 11324                           	opt stack 0
 11325  002800                     _change_state_to_menu_23:
 11326                           	opt stack 18
 11327                           
 11328                           ;UI.c: 449: cur_state = 23;
 11329                           
 11330                           ;incstack = 0
 11331  002800  0E00               	movlw	0
 11332  002802  0100               	movlb	0	; () banked
 11333  002804  6FE8               	movwf	(_cur_state+1)& (0+255),b
 11334  002806  0E17               	movlw	23
 11335  002808  6FE7               	movwf	_cur_state& (0+255),b
 11336                           
 11337                           ; BSR set to: 0
 11338                           ;UI.c: 451: lcdInst(0b10000000);;
 11339  00280A  0E80               	movlw	128
 11340  00280C  ECE6  F015         	call	i2_lcdInst
 11341                           
 11342                           ;UI.c: 452: printf("2. SORT         ");
 11343  002810  0E76               	movlw	low STR_17
 11344  002812  6E0D               	movwf	i2printf@f,c
 11345  002814  0EFE               	movlw	high STR_17
 11346  002816  6E0E               	movwf	i2printf@f+1,c
 11347  002818  ECC0  F004         	call	i2_printf	;wreg free
 11348                           
 11349                           ;UI.c: 453: lcdInst(0b11000000);;
 11350  00281C  0EC0               	movlw	192
 11351  00281E  ECE6  F015         	call	i2_lcdInst
 11352                           
 11353                           ;UI.c: 454: printf("3. LOGS        <");
 11354  002822  0E53               	movlw	low STR_23
 11355  002824  6E0D               	movwf	i2printf@f,c
 11356  002826  0EFF               	movlw	high STR_23
 11357  002828  6E0E               	movwf	i2printf@f+1,c
 11358  00282A  ECC0  F004         	call	i2_printf	;wreg free
 11359  00282E  0012               	return		;funcret
 11360  002830                     __end_of_change_state_to_menu_23:
 11361                           	opt stack 0
 11362                           pclatu	equ	0xFFB
 11363                           pclath	equ	0xFFA
 11364                           tblptru	equ	0xFF8
 11365                           tblptrh	equ	0xFF7
 11366                           tblptrl	equ	0xFF6
 11367                           tablat	equ	0xFF5
 11368                           prodh	equ	0xFF4
 11369                           prodl	equ	0xFF3
 11370                           intcon	equ	0xFF2
 11371                           intcon2	equ	0xFF1
 11372                           intcon3	equ	0xFF0
 11373                           indf0	equ	0xFEF
 11374                           postinc0	equ	0xFEE
 11375                           fsr0h	equ	0xFEA
 11376                           fsr0l	equ	0xFE9
 11377                           wreg	equ	0xFE8
 11378                           postdec1	equ	0xFE5
 11379                           fsr1h	equ	0xFE2
 11380                           fsr1l	equ	0xFE1
 11381                           indf2	equ	0xFDF
 11382                           postinc2	equ	0xFDE
 11383                           postdec2	equ	0xFDD
 11384                           fsr2h	equ	0xFDA
 11385                           fsr2l	equ	0xFD9
 11386                           status	equ	0xFD8
 11387                           
 11388 ;; *************** function _change_state_to_menu_11 *****************
 11389 ;; Defined at:
 11390 ;;		line 424 in file "UI.c"
 11391 ;; Parameters:    Size  Location     Type
 11392 ;;		None
 11393 ;; Auto vars:     Size  Location     Type
 11394 ;;		None
 11395 ;; Return value:  Size  Location     Type
 11396 ;;                  1    wreg      void 
 11397 ;; Registers used:
 11398 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11399 ;; Tracked objects:
 11400 ;;		On entry : 0/0
 11401 ;;		On exit  : 0/0
 11402 ;;		Unchanged: 0/0
 11403 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11404 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11405 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11406 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11407 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11408 ;;Total ram usage:        0 bytes
 11409 ;; Hardware stack levels used:    1
 11410 ;; Hardware stack levels required when called:    3
 11411 ;; This function calls:
 11412 ;;		i2_lcdInst
 11413 ;;		i2_printf
 11414 ;; This function is called by:
 11415 ;;		_updateMenu
 11416 ;;		_inputHandler
 11417 ;; This function uses a non-reentrant model
 11418 ;;
 11419                           
 11420                           	psect	text51
 11421  002830                     __ptext51:
 11422                           	opt stack 0
 11423  002830                     _change_state_to_menu_11:
 11424                           	opt stack 18
 11425                           
 11426                           ;UI.c: 425: cur_state = 11;
 11427                           
 11428                           ;incstack = 0
 11429  002830  0E00               	movlw	0
 11430  002832  0100               	movlb	0	; () banked
 11431  002834  6FE8               	movwf	(_cur_state+1)& (0+255),b
 11432  002836  0E0B               	movlw	11
 11433  002838  6FE7               	movwf	_cur_state& (0+255),b
 11434                           
 11435                           ; BSR set to: 0
 11436                           ;UI.c: 427: lcdInst(0b10000000);;
 11437  00283A  0E80               	movlw	128
 11438  00283C  ECE6  F015         	call	i2_lcdInst
 11439                           
 11440                           ;UI.c: 428: printf("1. DATE/TIME   <");
 11441  002840  0E75               	movlw	low STR_16
 11442  002842  6E0D               	movwf	i2printf@f,c
 11443  002844  0EFF               	movlw	high STR_16
 11444  002846  6E0E               	movwf	i2printf@f+1,c
 11445  002848  ECC0  F004         	call	i2_printf	;wreg free
 11446                           
 11447                           ;UI.c: 429: lcdInst(0b11000000);;
 11448  00284C  0EC0               	movlw	192
 11449  00284E  ECE6  F015         	call	i2_lcdInst
 11450                           
 11451                           ;UI.c: 430: printf("2. SORT         ");
 11452  002852  0E76               	movlw	low STR_17
 11453  002854  6E0D               	movwf	i2printf@f,c
 11454  002856  0EFE               	movlw	high STR_17
 11455  002858  6E0E               	movwf	i2printf@f+1,c
 11456  00285A  ECC0  F004         	call	i2_printf	;wreg free
 11457  00285E  0012               	return		;funcret
 11458  002860                     __end_of_change_state_to_menu_11:
 11459                           	opt stack 0
 11460                           pclatu	equ	0xFFB
 11461                           pclath	equ	0xFFA
 11462                           tblptru	equ	0xFF8
 11463                           tblptrh	equ	0xFF7
 11464                           tblptrl	equ	0xFF6
 11465                           tablat	equ	0xFF5
 11466                           prodh	equ	0xFF4
 11467                           prodl	equ	0xFF3
 11468                           intcon	equ	0xFF2
 11469                           intcon2	equ	0xFF1
 11470                           intcon3	equ	0xFF0
 11471                           indf0	equ	0xFEF
 11472                           postinc0	equ	0xFEE
 11473                           fsr0h	equ	0xFEA
 11474                           fsr0l	equ	0xFE9
 11475                           wreg	equ	0xFE8
 11476                           postdec1	equ	0xFE5
 11477                           fsr1h	equ	0xFE2
 11478                           fsr1l	equ	0xFE1
 11479                           indf2	equ	0xFDF
 11480                           postinc2	equ	0xFDE
 11481                           postdec2	equ	0xFDD
 11482                           fsr2h	equ	0xFDA
 11483                           fsr2l	equ	0xFD9
 11484                           status	equ	0xFD8
 11485                           
 11486 ;; *************** function _change_state_to_logs_34 *****************
 11487 ;; Defined at:
 11488 ;;		line 491 in file "UI.c"
 11489 ;; Parameters:    Size  Location     Type
 11490 ;;		None
 11491 ;; Auto vars:     Size  Location     Type
 11492 ;;		None
 11493 ;; Return value:  Size  Location     Type
 11494 ;;                  1    wreg      void 
 11495 ;; Registers used:
 11496 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11497 ;; Tracked objects:
 11498 ;;		On entry : 0/0
 11499 ;;		On exit  : 0/0
 11500 ;;		Unchanged: 0/0
 11501 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11502 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11503 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11504 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11505 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11506 ;;Total ram usage:        0 bytes
 11507 ;; Hardware stack levels used:    1
 11508 ;; Hardware stack levels required when called:    3
 11509 ;; This function calls:
 11510 ;;		i2_lcdInst
 11511 ;;		i2_printf
 11512 ;; This function is called by:
 11513 ;;		_updateMenu
 11514 ;;		_inputHandler
 11515 ;; This function uses a non-reentrant model
 11516 ;;
 11517                           
 11518                           	psect	text52
 11519  002860                     __ptext52:
 11520                           	opt stack 0
 11521  002860                     _change_state_to_logs_34:
 11522                           	opt stack 18
 11523                           
 11524                           ;UI.c: 492: cur_state = 1034;
 11525                           
 11526                           ;incstack = 0
 11527  002860  0E04               	movlw	4
 11528  002862  0100               	movlb	0	; () banked
 11529  002864  6FE8               	movwf	(_cur_state+1)& (0+255),b
 11530  002866  0E0A               	movlw	10
 11531  002868  6FE7               	movwf	_cur_state& (0+255),b
 11532                           
 11533                           ; BSR set to: 0
 11534                           ;UI.c: 493: lcdInst(0b10000000);;
 11535  00286A  0E80               	movlw	128
 11536  00286C  ECE6  F015         	call	i2_lcdInst
 11537                           
 11538                           ;UI.c: 494: printf("LOG 3           ");
 11539  002870  0E43               	movlw	low STR_29
 11540  002872  6E0D               	movwf	i2printf@f,c
 11541  002874  0EFE               	movlw	high STR_29
 11542  002876  6E0E               	movwf	i2printf@f+1,c
 11543  002878  ECC0  F004         	call	i2_printf	;wreg free
 11544                           
 11545                           ;UI.c: 495: lcdInst(0b11000000);;
 11546  00287C  0EC0               	movlw	192
 11547  00287E  ECE6  F015         	call	i2_lcdInst
 11548                           
 11549                           ;UI.c: 496: printf("LOG 4          <");
 11550  002882  0E42               	movlw	low STR_35
 11551  002884  6E0D               	movwf	i2printf@f,c
 11552  002886  0EFF               	movlw	high STR_35
 11553  002888  6E0E               	movwf	i2printf@f+1,c
 11554  00288A  ECC0  F004         	call	i2_printf	;wreg free
 11555  00288E  0012               	return		;funcret
 11556  002890                     __end_of_change_state_to_logs_34:
 11557                           	opt stack 0
 11558                           pclatu	equ	0xFFB
 11559                           pclath	equ	0xFFA
 11560                           tblptru	equ	0xFF8
 11561                           tblptrh	equ	0xFF7
 11562                           tblptrl	equ	0xFF6
 11563                           tablat	equ	0xFF5
 11564                           prodh	equ	0xFF4
 11565                           prodl	equ	0xFF3
 11566                           intcon	equ	0xFF2
 11567                           intcon2	equ	0xFF1
 11568                           intcon3	equ	0xFF0
 11569                           indf0	equ	0xFEF
 11570                           postinc0	equ	0xFEE
 11571                           fsr0h	equ	0xFEA
 11572                           fsr0l	equ	0xFE9
 11573                           wreg	equ	0xFE8
 11574                           postdec1	equ	0xFE5
 11575                           fsr1h	equ	0xFE2
 11576                           fsr1l	equ	0xFE1
 11577                           indf2	equ	0xFDF
 11578                           postinc2	equ	0xFDE
 11579                           postdec2	equ	0xFDD
 11580                           fsr2h	equ	0xFDA
 11581                           fsr2l	equ	0xFD9
 11582                           status	equ	0xFD8
 11583                           
 11584 ;; *************** function _change_state_to_logs_33 *****************
 11585 ;; Defined at:
 11586 ;;		line 484 in file "UI.c"
 11587 ;; Parameters:    Size  Location     Type
 11588 ;;		None
 11589 ;; Auto vars:     Size  Location     Type
 11590 ;;		None
 11591 ;; Return value:  Size  Location     Type
 11592 ;;                  1    wreg      void 
 11593 ;; Registers used:
 11594 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11595 ;; Tracked objects:
 11596 ;;		On entry : 0/0
 11597 ;;		On exit  : 0/0
 11598 ;;		Unchanged: 0/0
 11599 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11600 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11601 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11602 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11603 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11604 ;;Total ram usage:        0 bytes
 11605 ;; Hardware stack levels used:    1
 11606 ;; Hardware stack levels required when called:    3
 11607 ;; This function calls:
 11608 ;;		i2_lcdInst
 11609 ;;		i2_printf
 11610 ;; This function is called by:
 11611 ;;		_updateMenu
 11612 ;;		_inputHandler
 11613 ;; This function uses a non-reentrant model
 11614 ;;
 11615                           
 11616                           	psect	text53
 11617  002890                     __ptext53:
 11618                           	opt stack 0
 11619  002890                     _change_state_to_logs_33:
 11620                           	opt stack 18
 11621                           
 11622                           ;UI.c: 485: cur_state = 1033;
 11623                           
 11624                           ;incstack = 0
 11625  002890  0E04               	movlw	4
 11626  002892  0100               	movlb	0	; () banked
 11627  002894  6FE8               	movwf	(_cur_state+1)& (0+255),b
 11628  002896  0E09               	movlw	9
 11629  002898  6FE7               	movwf	_cur_state& (0+255),b
 11630                           
 11631                           ; BSR set to: 0
 11632                           ;UI.c: 486: lcdInst(0b10000000);;
 11633  00289A  0E80               	movlw	128
 11634  00289C  ECE6  F015         	call	i2_lcdInst
 11635                           
 11636                           ;UI.c: 487: printf("LOG 3          <");
 11637  0028A0  0E31               	movlw	low STR_31
 11638  0028A2  6E0D               	movwf	i2printf@f,c
 11639  0028A4  0EFF               	movlw	high STR_31
 11640  0028A6  6E0E               	movwf	i2printf@f+1,c
 11641  0028A8  ECC0  F004         	call	i2_printf	;wreg free
 11642                           
 11643                           ;UI.c: 488: lcdInst(0b11000000);;
 11644  0028AC  0EC0               	movlw	192
 11645  0028AE  ECE6  F015         	call	i2_lcdInst
 11646                           
 11647                           ;UI.c: 489: printf("LOG 4           ");
 11648  0028B2  0E54               	movlw	low STR_33
 11649  0028B4  6E0D               	movwf	i2printf@f,c
 11650  0028B6  0EFE               	movlw	high STR_33
 11651  0028B8  6E0E               	movwf	i2printf@f+1,c
 11652  0028BA  ECC0  F004         	call	i2_printf	;wreg free
 11653  0028BE  0012               	return		;funcret
 11654  0028C0                     __end_of_change_state_to_logs_33:
 11655                           	opt stack 0
 11656                           pclatu	equ	0xFFB
 11657                           pclath	equ	0xFFA
 11658                           tblptru	equ	0xFF8
 11659                           tblptrh	equ	0xFF7
 11660                           tblptrl	equ	0xFF6
 11661                           tablat	equ	0xFF5
 11662                           prodh	equ	0xFF4
 11663                           prodl	equ	0xFF3
 11664                           intcon	equ	0xFF2
 11665                           intcon2	equ	0xFF1
 11666                           intcon3	equ	0xFF0
 11667                           indf0	equ	0xFEF
 11668                           postinc0	equ	0xFEE
 11669                           fsr0h	equ	0xFEA
 11670                           fsr0l	equ	0xFE9
 11671                           wreg	equ	0xFE8
 11672                           postdec1	equ	0xFE5
 11673                           fsr1h	equ	0xFE2
 11674                           fsr1l	equ	0xFE1
 11675                           indf2	equ	0xFDF
 11676                           postinc2	equ	0xFDE
 11677                           postdec2	equ	0xFDD
 11678                           fsr2h	equ	0xFDA
 11679                           fsr2l	equ	0xFD9
 11680                           status	equ	0xFD8
 11681                           
 11682 ;; *************** function _change_state_to_logs_23 *****************
 11683 ;; Defined at:
 11684 ;;		line 477 in file "UI.c"
 11685 ;; Parameters:    Size  Location     Type
 11686 ;;		None
 11687 ;; Auto vars:     Size  Location     Type
 11688 ;;		None
 11689 ;; Return value:  Size  Location     Type
 11690 ;;                  1    wreg      void 
 11691 ;; Registers used:
 11692 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11693 ;; Tracked objects:
 11694 ;;		On entry : 0/0
 11695 ;;		On exit  : 0/0
 11696 ;;		Unchanged: 0/0
 11697 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11698 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11699 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11700 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11701 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11702 ;;Total ram usage:        0 bytes
 11703 ;; Hardware stack levels used:    1
 11704 ;; Hardware stack levels required when called:    3
 11705 ;; This function calls:
 11706 ;;		i2_lcdInst
 11707 ;;		i2_printf
 11708 ;; This function is called by:
 11709 ;;		_updateMenu
 11710 ;;		_inputHandler
 11711 ;; This function uses a non-reentrant model
 11712 ;;
 11713                           
 11714                           	psect	text54
 11715  00297E                     __ptext54:
 11716                           	opt stack 0
 11717  00297E                     _change_state_to_logs_23:
 11718                           	opt stack 18
 11719                           
 11720                           ;UI.c: 478: cur_state = 1023;
 11721                           
 11722                           ;incstack = 0
 11723  00297E  0E03               	movlw	3
 11724  002980  0100               	movlb	0	; () banked
 11725  002982  6FE8               	movwf	(_cur_state+1)& (0+255),b
 11726  002984  69E7               	setf	_cur_state& (0+255),b
 11727                           
 11728                           ; BSR set to: 0
 11729                           ;UI.c: 479: lcdInst(0b10000000);;
 11730  002986  0E80               	movlw	128
 11731  002988  ECE6  F015         	call	i2_lcdInst
 11732                           
 11733                           ;UI.c: 480: printf("LOG 2           ");
 11734  00298C  0E32               	movlw	low STR_25
 11735  00298E  6E0D               	movwf	i2printf@f,c
 11736  002990  0EFE               	movlw	high STR_25
 11737  002992  6E0E               	movwf	i2printf@f+1,c
 11738  002994  ECC0  F004         	call	i2_printf	;wreg free
 11739                           
 11740                           ;UI.c: 481: lcdInst(0b11000000);;
 11741  002998  0EC0               	movlw	192
 11742  00299A  ECE6  F015         	call	i2_lcdInst
 11743                           
 11744                           ;UI.c: 482: printf("LOG 3          <");
 11745  00299E  0E31               	movlw	low STR_31
 11746  0029A0  6E0D               	movwf	i2printf@f,c
 11747  0029A2  0EFF               	movlw	high STR_31
 11748  0029A4  6E0E               	movwf	i2printf@f+1,c
 11749  0029A6  ECC0  F004         	call	i2_printf	;wreg free
 11750  0029AA  0012               	return		;funcret
 11751  0029AC                     __end_of_change_state_to_logs_23:
 11752                           	opt stack 0
 11753                           pclatu	equ	0xFFB
 11754                           pclath	equ	0xFFA
 11755                           tblptru	equ	0xFF8
 11756                           tblptrh	equ	0xFF7
 11757                           tblptrl	equ	0xFF6
 11758                           tablat	equ	0xFF5
 11759                           prodh	equ	0xFF4
 11760                           prodl	equ	0xFF3
 11761                           intcon	equ	0xFF2
 11762                           intcon2	equ	0xFF1
 11763                           intcon3	equ	0xFF0
 11764                           indf0	equ	0xFEF
 11765                           postinc0	equ	0xFEE
 11766                           fsr0h	equ	0xFEA
 11767                           fsr0l	equ	0xFE9
 11768                           wreg	equ	0xFE8
 11769                           postdec1	equ	0xFE5
 11770                           fsr1h	equ	0xFE2
 11771                           fsr1l	equ	0xFE1
 11772                           indf2	equ	0xFDF
 11773                           postinc2	equ	0xFDE
 11774                           postdec2	equ	0xFDD
 11775                           fsr2h	equ	0xFDA
 11776                           fsr2l	equ	0xFD9
 11777                           status	equ	0xFD8
 11778                           
 11779 ;; *************** function _change_state_to_logs_22 *****************
 11780 ;; Defined at:
 11781 ;;		line 470 in file "UI.c"
 11782 ;; Parameters:    Size  Location     Type
 11783 ;;		None
 11784 ;; Auto vars:     Size  Location     Type
 11785 ;;		None
 11786 ;; Return value:  Size  Location     Type
 11787 ;;                  1    wreg      void 
 11788 ;; Registers used:
 11789 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11790 ;; Tracked objects:
 11791 ;;		On entry : 0/0
 11792 ;;		On exit  : 0/0
 11793 ;;		Unchanged: 0/0
 11794 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11795 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11796 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11797 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11798 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11799 ;;Total ram usage:        0 bytes
 11800 ;; Hardware stack levels used:    1
 11801 ;; Hardware stack levels required when called:    3
 11802 ;; This function calls:
 11803 ;;		i2_lcdInst
 11804 ;;		i2_printf
 11805 ;; This function is called by:
 11806 ;;		_updateMenu
 11807 ;;		_inputHandler
 11808 ;; This function uses a non-reentrant model
 11809 ;;
 11810                           
 11811                           	psect	text55
 11812  0028C0                     __ptext55:
 11813                           	opt stack 0
 11814  0028C0                     _change_state_to_logs_22:
 11815                           	opt stack 18
 11816                           
 11817                           ;UI.c: 471: cur_state = 1022;
 11818                           
 11819                           ;incstack = 0
 11820  0028C0  0E03               	movlw	3
 11821  0028C2  0100               	movlb	0	; () banked
 11822  0028C4  6FE8               	movwf	(_cur_state+1)& (0+255),b
 11823  0028C6  0EFE               	movlw	254
 11824  0028C8  6FE7               	movwf	_cur_state& (0+255),b
 11825                           
 11826                           ; BSR set to: 0
 11827                           ;UI.c: 472: lcdInst(0b10000000);;
 11828  0028CA  0E80               	movlw	128
 11829  0028CC  ECE6  F015         	call	i2_lcdInst
 11830                           
 11831                           ;UI.c: 473: printf("LOG 2          <");
 11832  0028D0  0E20               	movlw	low STR_27
 11833  0028D2  6E0D               	movwf	i2printf@f,c
 11834  0028D4  0EFF               	movlw	high STR_27
 11835  0028D6  6E0E               	movwf	i2printf@f+1,c
 11836  0028D8  ECC0  F004         	call	i2_printf	;wreg free
 11837                           
 11838                           ;UI.c: 474: lcdInst(0b11000000);;
 11839  0028DC  0EC0               	movlw	192
 11840  0028DE  ECE6  F015         	call	i2_lcdInst
 11841                           
 11842                           ;UI.c: 475: printf("LOG 3           ");
 11843  0028E2  0E43               	movlw	low STR_29
 11844  0028E4  6E0D               	movwf	i2printf@f,c
 11845  0028E6  0EFE               	movlw	high STR_29
 11846  0028E8  6E0E               	movwf	i2printf@f+1,c
 11847  0028EA  ECC0  F004         	call	i2_printf	;wreg free
 11848  0028EE  0012               	return		;funcret
 11849  0028F0                     __end_of_change_state_to_logs_22:
 11850                           	opt stack 0
 11851                           pclatu	equ	0xFFB
 11852                           pclath	equ	0xFFA
 11853                           tblptru	equ	0xFF8
 11854                           tblptrh	equ	0xFF7
 11855                           tblptrl	equ	0xFF6
 11856                           tablat	equ	0xFF5
 11857                           prodh	equ	0xFF4
 11858                           prodl	equ	0xFF3
 11859                           intcon	equ	0xFF2
 11860                           intcon2	equ	0xFF1
 11861                           intcon3	equ	0xFF0
 11862                           indf0	equ	0xFEF
 11863                           postinc0	equ	0xFEE
 11864                           fsr0h	equ	0xFEA
 11865                           fsr0l	equ	0xFE9
 11866                           wreg	equ	0xFE8
 11867                           postdec1	equ	0xFE5
 11868                           fsr1h	equ	0xFE2
 11869                           fsr1l	equ	0xFE1
 11870                           indf2	equ	0xFDF
 11871                           postinc2	equ	0xFDE
 11872                           postdec2	equ	0xFDD
 11873                           fsr2h	equ	0xFDA
 11874                           fsr2l	equ	0xFD9
 11875                           status	equ	0xFD8
 11876                           
 11877 ;; *************** function _change_state_to_logs_12 *****************
 11878 ;; Defined at:
 11879 ;;		line 463 in file "UI.c"
 11880 ;; Parameters:    Size  Location     Type
 11881 ;;		None
 11882 ;; Auto vars:     Size  Location     Type
 11883 ;;		None
 11884 ;; Return value:  Size  Location     Type
 11885 ;;                  1    wreg      void 
 11886 ;; Registers used:
 11887 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11888 ;; Tracked objects:
 11889 ;;		On entry : 0/0
 11890 ;;		On exit  : 0/0
 11891 ;;		Unchanged: 0/0
 11892 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11893 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11894 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11895 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11896 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11897 ;;Total ram usage:        0 bytes
 11898 ;; Hardware stack levels used:    1
 11899 ;; Hardware stack levels required when called:    3
 11900 ;; This function calls:
 11901 ;;		i2_lcdInst
 11902 ;;		i2_printf
 11903 ;; This function is called by:
 11904 ;;		_updateMenu
 11905 ;;		_inputHandler
 11906 ;; This function uses a non-reentrant model
 11907 ;;
 11908                           
 11909                           	psect	text56
 11910  0028F0                     __ptext56:
 11911                           	opt stack 0
 11912  0028F0                     _change_state_to_logs_12:
 11913                           	opt stack 18
 11914                           
 11915                           ;UI.c: 464: cur_state = 1012;
 11916                           
 11917                           ;incstack = 0
 11918  0028F0  0E03               	movlw	3
 11919  0028F2  0100               	movlb	0	; () banked
 11920  0028F4  6FE8               	movwf	(_cur_state+1)& (0+255),b
 11921  0028F6  0EF4               	movlw	244
 11922  0028F8  6FE7               	movwf	_cur_state& (0+255),b
 11923                           
 11924                           ; BSR set to: 0
 11925                           ;UI.c: 465: lcdInst(0b10000000);;
 11926  0028FA  0E80               	movlw	128
 11927  0028FC  ECE6  F015         	call	i2_lcdInst
 11928                           
 11929                           ;UI.c: 466: printf("LOG 1           ");
 11930  002900  0E21               	movlw	low STR_26
 11931  002902  6E0D               	movwf	i2printf@f,c
 11932  002904  0EFE               	movlw	high STR_26
 11933  002906  6E0E               	movwf	i2printf@f+1,c
 11934  002908  ECC0  F004         	call	i2_printf	;wreg free
 11935                           
 11936                           ;UI.c: 467: lcdInst(0b11000000);;
 11937  00290C  0EC0               	movlw	192
 11938  00290E  ECE6  F015         	call	i2_lcdInst
 11939                           
 11940                           ;UI.c: 468: printf("LOG 2          <");
 11941  002912  0E20               	movlw	low STR_27
 11942  002914  6E0D               	movwf	i2printf@f,c
 11943  002916  0EFF               	movlw	high STR_27
 11944  002918  6E0E               	movwf	i2printf@f+1,c
 11945  00291A  ECC0  F004         	call	i2_printf	;wreg free
 11946  00291E  0012               	return		;funcret
 11947  002920                     __end_of_change_state_to_logs_12:
 11948                           	opt stack 0
 11949                           pclatu	equ	0xFFB
 11950                           pclath	equ	0xFFA
 11951                           tblptru	equ	0xFF8
 11952                           tblptrh	equ	0xFF7
 11953                           tblptrl	equ	0xFF6
 11954                           tablat	equ	0xFF5
 11955                           prodh	equ	0xFF4
 11956                           prodl	equ	0xFF3
 11957                           intcon	equ	0xFF2
 11958                           intcon2	equ	0xFF1
 11959                           intcon3	equ	0xFF0
 11960                           indf0	equ	0xFEF
 11961                           postinc0	equ	0xFEE
 11962                           fsr0h	equ	0xFEA
 11963                           fsr0l	equ	0xFE9
 11964                           wreg	equ	0xFE8
 11965                           postdec1	equ	0xFE5
 11966                           fsr1h	equ	0xFE2
 11967                           fsr1l	equ	0xFE1
 11968                           indf2	equ	0xFDF
 11969                           postinc2	equ	0xFDE
 11970                           postdec2	equ	0xFDD
 11971                           fsr2h	equ	0xFDA
 11972                           fsr2l	equ	0xFD9
 11973                           status	equ	0xFD8
 11974                           
 11975 ;; *************** function _change_state_to_logs_11 *****************
 11976 ;; Defined at:
 11977 ;;		line 456 in file "UI.c"
 11978 ;; Parameters:    Size  Location     Type
 11979 ;;		None
 11980 ;; Auto vars:     Size  Location     Type
 11981 ;;		None
 11982 ;; Return value:  Size  Location     Type
 11983 ;;                  1    wreg      void 
 11984 ;; Registers used:
 11985 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11986 ;; Tracked objects:
 11987 ;;		On entry : 0/0
 11988 ;;		On exit  : 0/0
 11989 ;;		Unchanged: 0/0
 11990 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11991 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11992 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11993 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11994 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11995 ;;Total ram usage:        0 bytes
 11996 ;; Hardware stack levels used:    1
 11997 ;; Hardware stack levels required when called:    3
 11998 ;; This function calls:
 11999 ;;		i2_lcdInst
 12000 ;;		i2_printf
 12001 ;; This function is called by:
 12002 ;;		_updateMenu
 12003 ;;		_inputHandler
 12004 ;; This function uses a non-reentrant model
 12005 ;;
 12006                           
 12007                           	psect	text57
 12008  002920                     __ptext57:
 12009                           	opt stack 0
 12010  002920                     _change_state_to_logs_11:
 12011                           	opt stack 18
 12012                           
 12013                           ;UI.c: 457: cur_state = 1011;
 12014                           
 12015                           ;incstack = 0
 12016  002920  0E03               	movlw	3
 12017  002922  0100               	movlb	0	; () banked
 12018  002924  6FE8               	movwf	(_cur_state+1)& (0+255),b
 12019  002926  0EF3               	movlw	243
 12020  002928  6FE7               	movwf	_cur_state& (0+255),b
 12021                           
 12022                           ; BSR set to: 0
 12023                           ;UI.c: 458: lcdInst(0b10000000);;
 12024  00292A  0E80               	movlw	128
 12025  00292C  ECE6  F015         	call	i2_lcdInst
 12026                           
 12027                           ;UI.c: 459: printf("LOG 1          <");
 12028  002930  0E0F               	movlw	low STR_24
 12029  002932  6E0D               	movwf	i2printf@f,c
 12030  002934  0EFF               	movlw	high STR_24
 12031  002936  6E0E               	movwf	i2printf@f+1,c
 12032  002938  ECC0  F004         	call	i2_printf	;wreg free
 12033                           
 12034                           ;UI.c: 460: lcdInst(0b11000000);;
 12035  00293C  0EC0               	movlw	192
 12036  00293E  ECE6  F015         	call	i2_lcdInst
 12037                           
 12038                           ;UI.c: 461: printf("LOG 2           ");
 12039  002942  0E32               	movlw	low STR_25
 12040  002944  6E0D               	movwf	i2printf@f,c
 12041  002946  0EFE               	movlw	high STR_25
 12042  002948  6E0E               	movwf	i2printf@f+1,c
 12043  00294A  ECC0  F004         	call	i2_printf	;wreg free
 12044  00294E  0012               	return		;funcret
 12045  002950                     __end_of_change_state_to_logs_11:
 12046                           	opt stack 0
 12047                           pclatu	equ	0xFFB
 12048                           pclath	equ	0xFFA
 12049                           tblptru	equ	0xFF8
 12050                           tblptrh	equ	0xFF7
 12051                           tblptrl	equ	0xFF6
 12052                           tablat	equ	0xFF5
 12053                           prodh	equ	0xFF4
 12054                           prodl	equ	0xFF3
 12055                           intcon	equ	0xFF2
 12056                           intcon2	equ	0xFF1
 12057                           intcon3	equ	0xFF0
 12058                           indf0	equ	0xFEF
 12059                           postinc0	equ	0xFEE
 12060                           fsr0h	equ	0xFEA
 12061                           fsr0l	equ	0xFE9
 12062                           wreg	equ	0xFE8
 12063                           postdec1	equ	0xFE5
 12064                           fsr1h	equ	0xFE2
 12065                           fsr1l	equ	0xFE1
 12066                           indf2	equ	0xFDF
 12067                           postinc2	equ	0xFDE
 12068                           postdec2	equ	0xFDD
 12069                           fsr2h	equ	0xFDA
 12070                           fsr2l	equ	0xFD9
 12071                           status	equ	0xFD8
 12072                           
 12073 ;; *************** function _dispLogs *****************
 12074 ;; Defined at:
 12075 ;;		line 410 in file "UI.c"
 12076 ;; Parameters:    Size  Location     Type
 12077 ;;  myLog           2    0[COMRAM] int 
 12078 ;; Auto vars:     Size  Location     Type
 12079 ;;		None
 12080 ;; Return value:  Size  Location     Type
 12081 ;;                  1    wreg      void 
 12082 ;; Registers used:
 12083 ;;		wreg, status,2
 12084 ;; Tracked objects:
 12085 ;;		On entry : 0/0
 12086 ;;		On exit  : 0/0
 12087 ;;		Unchanged: 0/0
 12088 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12089 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12090 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12091 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12092 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12093 ;;Total ram usage:        2 bytes
 12094 ;; Hardware stack levels used:    1
 12095 ;; This function calls:
 12096 ;;		Nothing
 12097 ;; This function is called by:
 12098 ;;		_updateMenu
 12099 ;; This function uses a non-reentrant model
 12100 ;;
 12101                           
 12102                           	psect	text58
 12103  002B68                     __ptext58:
 12104                           	opt stack 0
 12105  002B68                     _dispLogs:
 12106                           	opt stack 22
 12107                           
 12108                           ;UI.c: 411: logstate = 1;
 12109                           
 12110                           ;incstack = 0
 12111  002B68  0E00               	movlw	0
 12112  002B6A  0100               	movlb	0	; () banked
 12113  002B6C  6FF4               	movwf	(_logstate+1)& (0+255),b
 12114  002B6E  0E01               	movlw	1
 12115  002B70  6FF3               	movwf	_logstate& (0+255),b
 12116                           
 12117                           ; BSR set to: 0
 12118                           ;UI.c: 412: log = myLog;
 12119  002B72  C001  F0F1         	movff	dispLogs@myLog,_log
 12120  002B76  C002  F0F2         	movff	dispLogs@myLog+1,_log+1
 12121                           
 12122                           ; BSR set to: 0
 12123  002B7A  0012               	return		;funcret
 12124  002B7C                     __end_of_dispLogs:
 12125                           	opt stack 0
 12126                           pclatu	equ	0xFFB
 12127                           pclath	equ	0xFFA
 12128                           tblptru	equ	0xFF8
 12129                           tblptrh	equ	0xFF7
 12130                           tblptrl	equ	0xFF6
 12131                           tablat	equ	0xFF5
 12132                           prodh	equ	0xFF4
 12133                           prodl	equ	0xFF3
 12134                           intcon	equ	0xFF2
 12135                           intcon2	equ	0xFF1
 12136                           intcon3	equ	0xFF0
 12137                           indf0	equ	0xFEF
 12138                           postinc0	equ	0xFEE
 12139                           fsr0h	equ	0xFEA
 12140                           fsr0l	equ	0xFE9
 12141                           wreg	equ	0xFE8
 12142                           postdec1	equ	0xFE5
 12143                           fsr1h	equ	0xFE2
 12144                           fsr1l	equ	0xFE1
 12145                           indf2	equ	0xFDF
 12146                           postinc2	equ	0xFDE
 12147                           postdec2	equ	0xFDD
 12148                           fsr2h	equ	0xFDA
 12149                           fsr2l	equ	0xFD9
 12150                           status	equ	0xFD8
 12151                           
 12152 ;; *************** function _printSortTimer *****************
 12153 ;; Defined at:
 12154 ;;		line 154 in file "sort.c"
 12155 ;; Parameters:    Size  Location     Type
 12156 ;;		None
 12157 ;; Auto vars:     Size  Location     Type
 12158 ;;  i               2   72[COMRAM] int 
 12159 ;;  curTime        14   44[COMRAM] int [7]
 12160 ;;  timeDiff        2   70[COMRAM] unsigned int 
 12161 ;;  sec             2   66[COMRAM] int 
 12162 ;;  min             2   64[COMRAM] int 
 12163 ;;  hour            2   62[COMRAM] int 
 12164 ;;  cur_sec         2   60[COMRAM] unsigned int 
 12165 ;;  start_sec       2   58[COMRAM] unsigned int 
 12166 ;; Return value:  Size  Location     Type
 12167 ;;                  1    wreg      void 
 12168 ;; Registers used:
 12169 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12170 ;; Tracked objects:
 12171 ;;		On entry : 0/0
 12172 ;;		On exit  : 0/0
 12173 ;;		Unchanged: 0/0
 12174 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12175 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12176 ;;      Locals:        30       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12177 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12178 ;;      Totals:        33       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12179 ;;Total ram usage:       33 bytes
 12180 ;; Hardware stack levels used:    1
 12181 ;; Hardware stack levels required when called:    3
 12182 ;; This function calls:
 12183 ;;		i2___lwdiv
 12184 ;;		i2___lwmod
 12185 ;;		i2___wmul
 12186 ;;		i2_getRTC
 12187 ;;		i2_lcdInst
 12188 ;;		i2_printf
 12189 ;; This function is called by:
 12190 ;;		_handler
 12191 ;; This function uses a non-reentrant model
 12192 ;;
 12193                           
 12194                           	psect	text59
 12195  0016C0                     __ptext59:
 12196                           	opt stack 0
 12197  0016C0                     _printSortTimer:
 12198                           	opt stack 20
 12199                           
 12200                           ;sort.c: 155: getRTC();
 12201                           
 12202                           ; BSR set to: 0
 12203                           ;incstack = 0
 12204  0016C0  EC52  F011         	call	i2_getRTC	;wreg free
 12205                           
 12206                           ;sort.c: 156: int curTime[7];
 12207                           ;sort.c: 157: for(int i = 0; i < 7; i++){
 12208  0016C4  0E00               	movlw	0
 12209  0016C6  6E4A               	movwf	printSortTimer@i+1,c
 12210  0016C8  0E00               	movlw	0
 12211  0016CA  6E49               	movwf	printSortTimer@i,c
 12212  0016CC                     i2l5855:
 12213  0016CC  BE4A               	btfsc	printSortTimer@i+1,7,c
 12214  0016CE  D006               	goto	i2l5859
 12215  0016D0  504A               	movf	printSortTimer@i+1,w,c
 12216  0016D2  E131               	bnz	i2l5865
 12217  0016D4  0E07               	movlw	7
 12218  0016D6  5C49               	subwf	printSortTimer@i,w,c
 12219  0016D8  B0D8               	btfsc	status,0,c
 12220  0016DA  D02D               	goto	i2l5865
 12221  0016DC                     i2l5859:
 12222                           
 12223                           ;sort.c: 158: curTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 12224  0016DC  0EDC               	movlw	low _time
 12225  0016DE  2449               	addwf	printSortTimer@i,w,c
 12226  0016E0  6ED9               	movwf	fsr2l,c
 12227  0016E2  0E00               	movlw	high _time
 12228  0016E4  204A               	addwfc	printSortTimer@i+1,w,c
 12229  0016E6  6EDA               	movwf	fsr2h,c
 12230  0016E8  50DF               	movf	indf2,w,c
 12231  0016EA  6E2A               	movwf	??_printSortTimer& (0+255),c
 12232  0016EC  3A2A               	swapf	??_printSortTimer,f,c
 12233  0016EE  0E0F               	movlw	15
 12234  0016F0  162A               	andwf	??_printSortTimer,f,c
 12235  0016F2  0E0F               	movlw	15
 12236  0016F4  162A               	andwf	??_printSortTimer,f,c
 12237  0016F6  502A               	movf	??_printSortTimer,w,c
 12238  0016F8  0D0A               	mullw	10
 12239  0016FA  0EDC               	movlw	low _time
 12240  0016FC  2449               	addwf	printSortTimer@i,w,c
 12241  0016FE  6ED9               	movwf	fsr2l,c
 12242  001700  0E00               	movlw	high _time
 12243  001702  204A               	addwfc	printSortTimer@i+1,w,c
 12244  001704  6EDA               	movwf	fsr2h,c
 12245  001706  50DF               	movf	indf2,w,c
 12246  001708  0B0F               	andlw	15
 12247  00170A  6E2B               	movwf	(??_printSortTimer+1)& (0+255),c
 12248  00170C  6A2C               	clrf	(??_printSortTimer+2)& (0+255),c
 12249  00170E  50F3               	movf	prodl,w,c
 12250  001710  262B               	addwf	??_printSortTimer+1,f,c
 12251  001712  50F4               	movf	prodh,w,c
 12252  001714  222C               	addwfc	??_printSortTimer+2,f,c
 12253  001716  90D8               	bcf	status,0,c
 12254  001718  3449               	rlcf	printSortTimer@i,w,c
 12255  00171A  6ED9               	movwf	fsr2l,c
 12256  00171C  344A               	rlcf	printSortTimer@i+1,w,c
 12257  00171E  6EDA               	movwf	fsr2h,c
 12258  001720  0E2D               	movlw	low printSortTimer@curTime
 12259  001722  26D9               	addwf	fsr2l,f,c
 12260  001724  0E00               	movlw	high printSortTimer@curTime
 12261  001726  22DA               	addwfc	fsr2h,f,c
 12262  001728  C02B  FFDE         	movff	??_printSortTimer+1,postinc2
 12263  00172C  C02C  FFDD         	movff	??_printSortTimer+2,postdec2
 12264  001730  4A49               	infsnz	printSortTimer@i,f,c
 12265  001732  2A4A               	incf	printSortTimer@i+1,f,c
 12266  001734  D7CB               	goto	i2l5855
 12267  001736                     i2l5865:
 12268                           
 12269                           ;sort.c: 159: }
 12270                           ;sort.c: 160: unsigned int start_sec = startTime[0] + startTime[1]*60 + startTime[2]*360
      +                          0;
 12271  001736  C102  F001         	movff	_startTime+2,i2___wmul@multiplier
 12272  00173A  C103  F002         	movff	_startTime+3,i2___wmul@multiplier+1
 12273  00173E  0E00               	movlw	0
 12274  001740  6E04               	movwf	i2___wmul@multiplicand+1,c
 12275  001742  0E3C               	movlw	60
 12276  001744  6E03               	movwf	i2___wmul@multiplicand,c
 12277  001746  EC2B  F015         	call	i2___wmul	;wreg free
 12278  00174A  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 12279  00174E  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 12280  001752  C104  F001         	movff	_startTime+4,i2___wmul@multiplier
 12281  001756  C105  F002         	movff	_startTime+5,i2___wmul@multiplier+1
 12282  00175A  0E0E               	movlw	14
 12283  00175C  6E04               	movwf	i2___wmul@multiplicand+1,c
 12284  00175E  0E10               	movlw	16
 12285  001760  6E03               	movwf	i2___wmul@multiplicand,c
 12286  001762  EC2B  F015         	call	i2___wmul	;wreg free
 12287  001766  5001               	movf	?i2___wmul,w,c
 12288  001768  262A               	addwf	??_printSortTimer,f,c
 12289  00176A  5002               	movf	?i2___wmul+1,w,c
 12290  00176C  222B               	addwfc	??_printSortTimer+1,f,c
 12291  00176E  0101               	movlb	1	; () banked
 12292  001770  5100               	movf	_startTime& (0+255),w,b
 12293  001772  242A               	addwf	??_printSortTimer,w,c
 12294  001774  6E3B               	movwf	printSortTimer@start_sec,c
 12295  001776  0101               	movlb	1	; () banked
 12296  001778  5101               	movf	(_startTime+1)& (0+255),w,b
 12297  00177A  202B               	addwfc	??_printSortTimer+1,w,c
 12298  00177C  6E3C               	movwf	printSortTimer@start_sec+1,c
 12299                           
 12300                           ;sort.c: 161: unsigned int cur_sec = curTime[0] + curTime[1]*60 + curTime[2]*3600;
 12301  00177E  C02F  F001         	movff	printSortTimer@curTime+2,i2___wmul@multiplier
 12302  001782  C030  F002         	movff	printSortTimer@curTime+3,i2___wmul@multiplier+1
 12303  001786  0E00               	movlw	0
 12304  001788  6E04               	movwf	i2___wmul@multiplicand+1,c
 12305  00178A  0E3C               	movlw	60
 12306  00178C  6E03               	movwf	i2___wmul@multiplicand,c
 12307  00178E  EC2B  F015         	call	i2___wmul	;wreg free
 12308  001792  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 12309  001796  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 12310  00179A  C031  F001         	movff	printSortTimer@curTime+4,i2___wmul@multiplier
 12311  00179E  C032  F002         	movff	printSortTimer@curTime+5,i2___wmul@multiplier+1
 12312  0017A2  0E0E               	movlw	14
 12313  0017A4  6E04               	movwf	i2___wmul@multiplicand+1,c
 12314  0017A6  0E10               	movlw	16
 12315  0017A8  6E03               	movwf	i2___wmul@multiplicand,c
 12316  0017AA  EC2B  F015         	call	i2___wmul	;wreg free
 12317  0017AE  5001               	movf	?i2___wmul,w,c
 12318  0017B0  262A               	addwf	??_printSortTimer,f,c
 12319  0017B2  5002               	movf	?i2___wmul+1,w,c
 12320  0017B4  222B               	addwfc	??_printSortTimer+1,f,c
 12321  0017B6  502D               	movf	printSortTimer@curTime,w,c
 12322  0017B8  242A               	addwf	??_printSortTimer,w,c
 12323  0017BA  6E3D               	movwf	printSortTimer@cur_sec,c
 12324  0017BC  502E               	movf	printSortTimer@curTime+1,w,c
 12325  0017BE  202B               	addwfc	??_printSortTimer+1,w,c
 12326  0017C0  6E3E               	movwf	printSortTimer@cur_sec+1,c
 12327                           
 12328                           ;sort.c: 162: unsigned int timeDiff = cur_sec - start_sec;
 12329  0017C2  C03B  F02A         	movff	printSortTimer@start_sec,??_printSortTimer
 12330  0017C6  C03C  F02B         	movff	printSortTimer@start_sec+1,??_printSortTimer+1
 12331  0017CA  1E2A               	comf	??_printSortTimer,f,c
 12332  0017CC  1E2B               	comf	??_printSortTimer+1,f,c
 12333  0017CE  4A2A               	infsnz	??_printSortTimer,f,c
 12334  0017D0  2A2B               	incf	??_printSortTimer+1,f,c
 12335  0017D2  503D               	movf	printSortTimer@cur_sec,w,c
 12336  0017D4  242A               	addwf	??_printSortTimer,w,c
 12337  0017D6  6E47               	movwf	printSortTimer@timeDiff,c
 12338  0017D8  503E               	movf	printSortTimer@cur_sec+1,w,c
 12339  0017DA  202B               	addwfc	??_printSortTimer+1,w,c
 12340  0017DC  6E48               	movwf	printSortTimer@timeDiff+1,c
 12341                           
 12342                           ;sort.c: 164: total_time = timeDiff;
 12343  0017DE  C047  F0F5         	movff	printSortTimer@timeDiff,_total_time
 12344  0017E2  C048  F0F6         	movff	printSortTimer@timeDiff+1,_total_time+1
 12345                           
 12346                           ;sort.c: 166: if(timeDiff >= 10){
 12347  0017E6  5048               	movf	printSortTimer@timeDiff+1,w,c
 12348  0017E8  E104               	bnz	i2u488_40
 12349  0017EA  0E0A               	movlw	10
 12350  0017EC  5C47               	subwf	printSortTimer@timeDiff,w,c
 12351  0017EE  A0D8               	btfss	status,0,c
 12352  0017F0  D003               	goto	i2l5875
 12353  0017F2                     i2u488_40:
 12354                           
 12355                           ;sort.c: 167: machine_state = DoneSorting_state;
 12356  0017F2  0E02               	movlw	2
 12357  0017F4  0100               	movlb	0	; () banked
 12358  0017F6  6FF7               	movwf	_machine_state& (0+255),b
 12359  0017F8                     i2l5875:
 12360                           
 12361                           ;sort.c: 169: }
 12362                           ;sort.c: 171: int hour = timeDiff / 3600;
 12363  0017F8  C047  F006         	movff	printSortTimer@timeDiff,i2___lwdiv@dividend
 12364  0017FC  C048  F007         	movff	printSortTimer@timeDiff+1,i2___lwdiv@dividend+1
 12365  001800  0E0E               	movlw	14
 12366  001802  6E09               	movwf	i2___lwdiv@divisor+1,c
 12367  001804  0E10               	movlw	16
 12368  001806  6E08               	movwf	i2___lwdiv@divisor,c
 12369  001808  ECA3  F012         	call	i2___lwdiv	;wreg free
 12370  00180C  C006  F03F         	movff	?i2___lwdiv,printSortTimer@hour
 12371  001810  C007  F040         	movff	?i2___lwdiv+1,printSortTimer@hour+1
 12372                           
 12373                           ;sort.c: 172: int min = (timeDiff % 3600) / 60;
 12374  001814  0E0E               	movlw	14
 12375  001816  6E04               	movwf	i2___lwmod@divisor+1,c
 12376  001818  0E10               	movlw	16
 12377  00181A  6E03               	movwf	i2___lwmod@divisor,c
 12378  00181C  C047  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 12379  001820  C048  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 12380  001824  ECEF  F012         	call	i2___lwmod	;wreg free
 12381  001828  C001  F006         	movff	?i2___lwmod,i2___lwdiv@dividend
 12382  00182C  C002  F007         	movff	?i2___lwmod+1,i2___lwdiv@dividend+1
 12383  001830  0E00               	movlw	0
 12384  001832  6E09               	movwf	i2___lwdiv@divisor+1,c
 12385  001834  0E3C               	movlw	60
 12386  001836  6E08               	movwf	i2___lwdiv@divisor,c
 12387  001838  ECA3  F012         	call	i2___lwdiv	;wreg free
 12388  00183C  C006  F041         	movff	?i2___lwdiv,printSortTimer@min
 12389  001840  C007  F042         	movff	?i2___lwdiv+1,printSortTimer@min+1
 12390                           
 12391                           ;sort.c: 173: int sec = (timeDiff % 3600) % 60;
 12392  001844  0E0E               	movlw	14
 12393  001846  6E04               	movwf	i2___lwmod@divisor+1,c
 12394  001848  0E10               	movlw	16
 12395  00184A  6E03               	movwf	i2___lwmod@divisor,c
 12396  00184C  C047  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 12397  001850  C048  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 12398  001854  ECEF  F012         	call	i2___lwmod	;wreg free
 12399  001858  C001  F045         	movff	?i2___lwmod,_printSortTimer$2121
 12400  00185C  C002  F046         	movff	?i2___lwmod+1,_printSortTimer$2121+1
 12401                           
 12402                           ;sort.c: 173: int sec = (timeDiff % 3600) % 60;
 12403  001860  C045  F001         	movff	_printSortTimer$2121,i2___lwmod@dividend
 12404  001864  C046  F002         	movff	_printSortTimer$2121+1,i2___lwmod@dividend+1
 12405  001868  0E00               	movlw	0
 12406  00186A  6E04               	movwf	i2___lwmod@divisor+1,c
 12407  00186C  0E3C               	movlw	60
 12408  00186E  6E03               	movwf	i2___lwmod@divisor,c
 12409  001870  ECEF  F012         	call	i2___lwmod	;wreg free
 12410  001874  C001  F043         	movff	?i2___lwmod,printSortTimer@sec
 12411  001878  C002  F044         	movff	?i2___lwmod+1,printSortTimer@sec+1
 12412                           
 12413                           ;sort.c: 175: lcdInst(0b10000000);;
 12414  00187C  0E80               	movlw	128
 12415  00187E  ECE6  F015         	call	i2_lcdInst
 12416                           
 12417                           ;sort.c: 176: printf("Sorting...");
 12418  001882  0EA8               	movlw	low STR_49
 12419  001884  6E0D               	movwf	i2printf@f,c
 12420  001886  0EFF               	movlw	high STR_49
 12421  001888  6E0E               	movwf	i2printf@f+1,c
 12422  00188A  ECC0  F004         	call	i2_printf	;wreg free
 12423                           
 12424                           ;sort.c: 177: lcdInst(0b11000000);;
 12425  00188E  0EC0               	movlw	192
 12426  001890  ECE6  F015         	call	i2_lcdInst
 12427                           
 12428                           ;sort.c: 178: printf("Time: %02d:%02d:%02d", hour, min, sec);
 12429  001894  0EE8               	movlw	low STR_2
 12430  001896  6E0D               	movwf	i2printf@f,c
 12431  001898  0EFD               	movlw	high STR_2
 12432  00189A  6E0E               	movwf	i2printf@f+1,c
 12433  00189C  C03F  F00F         	movff	printSortTimer@hour,?i2_printf+2
 12434  0018A0  C040  F010         	movff	printSortTimer@hour+1,?i2_printf+3
 12435  0018A4  C041  F011         	movff	printSortTimer@min,?i2_printf+4
 12436  0018A8  C042  F012         	movff	printSortTimer@min+1,?i2_printf+5
 12437  0018AC  C043  F013         	movff	printSortTimer@sec,?i2_printf+6
 12438  0018B0  C044  F014         	movff	printSortTimer@sec+1,?i2_printf+7
 12439  0018B4  ECC0  F004         	call	i2_printf	;wreg free
 12440  0018B8  0012               	return		;funcret
 12441  0018BA                     __end_of_printSortTimer:
 12442                           	opt stack 0
 12443                           pclatu	equ	0xFFB
 12444                           pclath	equ	0xFFA
 12445                           tblptru	equ	0xFF8
 12446                           tblptrh	equ	0xFF7
 12447                           tblptrl	equ	0xFF6
 12448                           tablat	equ	0xFF5
 12449                           prodh	equ	0xFF4
 12450                           prodl	equ	0xFF3
 12451                           intcon	equ	0xFF2
 12452                           intcon2	equ	0xFF1
 12453                           intcon3	equ	0xFF0
 12454                           indf0	equ	0xFEF
 12455                           postinc0	equ	0xFEE
 12456                           fsr0h	equ	0xFEA
 12457                           fsr0l	equ	0xFE9
 12458                           wreg	equ	0xFE8
 12459                           postdec1	equ	0xFE5
 12460                           fsr1h	equ	0xFE2
 12461                           fsr1l	equ	0xFE1
 12462                           indf2	equ	0xFDF
 12463                           postinc2	equ	0xFDE
 12464                           postdec2	equ	0xFDD
 12465                           fsr2h	equ	0xFDA
 12466                           fsr2l	equ	0xFD9
 12467                           status	equ	0xFD8
 12468                           
 12469 ;; *************** function i2_printf *****************
 12470 ;; Defined at:
 12471 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 12472 ;; Parameters:    Size  Location     Type
 12473 ;;  f               2   12[COMRAM] PTR const unsigned char 
 12474 ;;		 -> STR_50(21), STR_49(11), STR_48(24), STR_35(17), 
 12475 ;;		 -> STR_34(17), STR_33(17), STR_32(17), STR_31(17), 
 12476 ;;		 -> STR_30(17), STR_29(17), STR_28(17), STR_27(17), 
 12477 ;;		 -> STR_26(17), STR_25(17), STR_24(17), STR_23(17), 
 12478 ;;		 -> STR_22(17), STR_21(17), STR_20(17), STR_19(17), 
 12479 ;;		 -> STR_18(17), STR_17(17), STR_16(17), STR_15(17), 
 12480 ;;		 -> STR_14(3), STR_13(17), STR_12(17), STR_11(17), 
 12481 ;;		 -> STR_10(17), STR_9(17), STR_8(18), STR_7(10), 
 12482 ;;		 -> STR_6(17), STR_5(7), STR_4(17), STR_3(18), 
 12483 ;;		 -> STR_2(21), STR_1(17), 
 12484 ;; Auto vars:     Size  Location     Type
 12485 ;;  printf          4    0        struct .
 12486 ;;  printf          2   39[COMRAM] int 
 12487 ;;  printf          2   35[COMRAM] unsigned int 
 12488 ;;  printf          2   33[COMRAM] unsigned int 
 12489 ;;  printf          2   31[COMRAM] PTR const unsigned char 
 12490 ;;		 -> STR_51(7), printRTC@month(4), 
 12491 ;;  printf          2   29[COMRAM] PTR void [1]
 12492 ;;		 -> ?i2_printf(2), ?_printf(2), 
 12493 ;;  printf          1   38[COMRAM] char 
 12494 ;;  printf          1   37[COMRAM] unsigned char 
 12495 ;;  printf          1   28[COMRAM] char 
 12496 ;; Return value:  Size  Location     Type
 12497 ;;                  2   12[COMRAM] int 
 12498 ;; Registers used:
 12499 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12500 ;; Tracked objects:
 12501 ;;		On entry : 0/0
 12502 ;;		On exit  : 0/0
 12503 ;;		Unchanged: 0/0
 12504 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12505 ;;      Params:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12506 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12507 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12508 ;;      Totals:        29       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12509 ;;Total ram usage:       29 bytes
 12510 ;; Hardware stack levels used:    1
 12511 ;; Hardware stack levels required when called:    2
 12512 ;; This function calls:
 12513 ;;		i2___lwdiv
 12514 ;;		i2___lwmod
 12515 ;;		i2___wmul
 12516 ;;		i2_isdigit
 12517 ;;		i2_putch
 12518 ;; This function is called by:
 12519 ;;		_change_state_to_menu_11
 12520 ;;		_change_state_to_menu_23
 12521 ;;		_change_state_to_logs_11
 12522 ;;		_change_state_to_logs_12
 12523 ;;		_change_state_to_logs_22
 12524 ;;		_change_state_to_logs_23
 12525 ;;		_change_state_to_logs_33
 12526 ;;		_change_state_to_logs_34
 12527 ;;		_printSortTimer
 12528 ;;		i2_change_state_to_menu_start
 12529 ;;		i2_change_state_to_menu_12
 12530 ;;		i2_change_state_to_menu_22
 12531 ;;		i2_printRTC
 12532 ;; This function uses a non-reentrant model
 12533 ;;
 12534                           
 12535                           	psect	text60
 12536  000980                     __ptext60:
 12537                           	opt stack 0
 12538  000980                     i2_printf:
 12539                           	opt stack 19
 12540                           
 12541                           ;doprnt.c: 466: va_list ap;
 12542                           ;doprnt.c: 499: signed char c;
 12543                           ;doprnt.c: 501: int width;
 12544                           ;doprnt.c: 506: signed char prec;
 12545                           ;doprnt.c: 508: unsigned char flag;
 12546                           ;doprnt.c: 523: union {
 12547                           ;doprnt.c: 524: unsigned long vd;
 12548                           ;doprnt.c: 525: double integ;
 12549                           ;doprnt.c: 526: } tmpval;
 12550                           ;doprnt.c: 528: unsigned int val;
 12551                           ;doprnt.c: 529: unsigned len;
 12552                           ;doprnt.c: 530: const char * cp;
 12553                           ;doprnt.c: 533: *ap = __va_start();
 12554                           
 12555                           ;incstack = 0
 12556  000980  0E0F               	movlw	low (?i2_printf+2)
 12557  000982  6E1E               	movwf	i2printf@ap,c
 12558  000984  0E00               	movlw	high (?i2_printf+2)
 12559  000986  6E1F               	movwf	i2printf@ap+1,c
 12560                           
 12561                           ;doprnt.c: 536: while(c = *f++) {
 12562  000988  D190               	goto	i2l4615
 12563  00098A                     i2l4491:
 12564                           
 12565                           ;doprnt.c: 538: if(c != '%')
 12566  00098A  0E25               	movlw	37
 12567  00098C  1827               	xorwf	i2printf@c,w,c
 12568  00098E  B4D8               	btfsc	status,2,c
 12569  000990  D004               	goto	i2l4495
 12570                           
 12571                           ;doprnt.c: 540: {
 12572                           ;doprnt.c: 541: (putch(c) );
 12573  000992  5027               	movf	i2printf@c,w,c
 12574  000994  ECE0  F015         	call	i2_putch
 12575                           
 12576                           ;doprnt.c: 542: continue;
 12577  000998  D188               	goto	i2l4615
 12578  00099A                     i2l4495:
 12579                           
 12580                           ;doprnt.c: 543: }
 12581                           ;doprnt.c: 546: width = 0;
 12582  00099A  0E00               	movlw	0
 12583  00099C  6E29               	movwf	i2printf@width+1,c
 12584  00099E  0E00               	movlw	0
 12585  0009A0  6E28               	movwf	i2printf@width,c
 12586                           
 12587                           ;doprnt.c: 548: flag = 0;
 12588  0009A2  0E00               	movlw	0
 12589  0009A4  6E26               	movwf	i2printf@flag,c
 12590                           
 12591                           ;doprnt.c: 551: switch(*f) {
 12592                           
 12593                           ;doprnt.c: 550: for(;;) {
 12594  0009A6  D003               	goto	i2l4501
 12595  0009A8                     i2l4497:
 12596                           
 12597                           ;doprnt.c: 580: flag |= 0x04;
 12598  0009A8  8426               	bsf	i2printf@flag,2,c
 12599                           
 12600                           ;doprnt.c: 581: f++;
 12601  0009AA  4A0D               	infsnz	i2printf@f,f,c
 12602  0009AC  2A0E               	incf	i2printf@f+1,f,c
 12603  0009AE                     i2l4501:
 12604  0009AE  C00D  FFF6         	movff	i2printf@f,tblptrl
 12605  0009B2  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 12606  0009B6                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 12607  0009B6  6AF8               	clrf	tblptru,c
 12608  0009B8                     	endif
 12609  0009B8                     	if	0	;tblptru may be non-zero
 12610  0009B8                     	endif
 12611  0009B8  0008               	tblrd		*
 12612  0009BA  50F5               	movf	tablat,w,c
 12613                           
 12614                           ; Switch size 1, requested type "space"
 12615                           ; Number of cases is 1, Range of values is 48 to 48
 12616                           ; switch strategies available:
 12617                           ; Name         Instructions Cycles
 12618                           ; simple_byte            4     3 (average)
 12619                           ;	Chosen strategy is simple_byte
 12620  0009BC  0A30               	xorlw	48	; case 48
 12621  0009BE  B4D8               	btfsc	status,2,c
 12622  0009C0  D7F3               	goto	i2l4497
 12623                           
 12624                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 12625                           
 12626                           ;doprnt.c: 586: }
 12627                           
 12628                           ;doprnt.c: 585: break;
 12629  0009C2  C00D  FFF6         	movff	i2printf@f,tblptrl
 12630  0009C6  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 12631  0009CA                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 12632  0009CA  6AF8               	clrf	tblptru,c
 12633  0009CC                     	endif
 12634  0009CC                     	if	0	;tblptru may be non-zero
 12635  0009CC                     	endif
 12636  0009CC  0008               	tblrd		*
 12637  0009CE  50F5               	movf	tablat,w,c
 12638  0009D0  EC83  F015         	call	i2_isdigit
 12639  0009D4  A0D8               	btfss	status,0,c
 12640  0009D6  D0A4               	goto	i2l4547
 12641                           
 12642                           ;doprnt.c: 598: width = 0;
 12643  0009D8  0E00               	movlw	0
 12644  0009DA  6E29               	movwf	i2printf@width+1,c
 12645  0009DC  0E00               	movlw	0
 12646  0009DE  6E28               	movwf	i2printf@width,c
 12647  0009E0                     i2l4507:
 12648                           
 12649                           ;doprnt.c: 600: width *= 10;
 12650  0009E0  C028  F001         	movff	i2printf@width,i2___wmul@multiplier
 12651  0009E4  C029  F002         	movff	i2printf@width+1,i2___wmul@multiplier+1
 12652  0009E8  0E00               	movlw	0
 12653  0009EA  6E04               	movwf	i2___wmul@multiplicand+1,c
 12654  0009EC  0E0A               	movlw	10
 12655  0009EE  6E03               	movwf	i2___wmul@multiplicand,c
 12656  0009F0  EC2B  F015         	call	i2___wmul	;wreg free
 12657  0009F4  C001  F028         	movff	?i2___wmul,i2printf@width
 12658  0009F8  C002  F029         	movff	?i2___wmul+1,i2printf@width+1
 12659                           
 12660                           ;doprnt.c: 601: width += *f++ - '0';
 12661  0009FC  0ED0               	movlw	208
 12662  0009FE  6E19               	movwf	??i2_printf& (0+255),c
 12663  000A00  0EFF               	movlw	255
 12664  000A02  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 12665  000A04  C00D  FFF6         	movff	i2printf@f,tblptrl
 12666  000A08  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 12667  000A0C                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 12668  000A0C  6AF8               	clrf	tblptru,c
 12669  000A0E                     	endif
 12670  000A0E                     	if	0	;tblptru may be non-zero
 12671  000A0E                     	endif
 12672  000A0E  0008               	tblrd		*
 12673  000A10  50F5               	movf	tablat,w,c
 12674  000A12  6E1B               	movwf	(??i2_printf+2)& (0+255),c
 12675  000A14  6A1C               	clrf	(??i2_printf+3)& (0+255),c
 12676  000A16  5019               	movf	??i2_printf,w,c
 12677  000A18  261B               	addwf	??i2_printf+2,f,c
 12678  000A1A  501A               	movf	??i2_printf+1,w,c
 12679  000A1C  221C               	addwfc	??i2_printf+3,f,c
 12680  000A1E  501B               	movf	??i2_printf+2,w,c
 12681  000A20  2628               	addwf	i2printf@width,f,c
 12682  000A22  501C               	movf	??i2_printf+3,w,c
 12683  000A24  2229               	addwfc	i2printf@width+1,f,c
 12684  000A26  4A0D               	infsnz	i2printf@f,f,c
 12685  000A28  2A0E               	incf	i2printf@f+1,f,c
 12686                           
 12687                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 12688  000A2A  C00D  FFF6         	movff	i2printf@f,tblptrl
 12689  000A2E  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 12690  000A32                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 12691  000A32  6AF8               	clrf	tblptru,c
 12692  000A34                     	endif
 12693  000A34                     	if	0	;tblptru may be non-zero
 12694  000A34                     	endif
 12695  000A34  0008               	tblrd		*
 12696  000A36  50F5               	movf	tablat,w,c
 12697  000A38  EC83  F015         	call	i2_isdigit
 12698  000A3C  A0D8               	btfss	status,0,c
 12699  000A3E  D070               	goto	i2l4547
 12700  000A40  D7CF               	goto	i2l4507
 12701  000A42                     i2l4515:
 12702                           
 12703                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 12704  000A42  C01E  FFD9         	movff	i2printf@ap,fsr2l
 12705  000A46  C01F  FFDA         	movff	i2printf@ap+1,fsr2h
 12706  000A4A  CFDE F020          	movff	postinc2,i2printf@cp
 12707  000A4E  CFDD F021          	movff	postdec2,i2printf@cp+1
 12708  000A52  0E02               	movlw	2
 12709  000A54  261E               	addwf	i2printf@ap,f,c
 12710  000A56  0E00               	movlw	0
 12711  000A58  221F               	addwfc	i2printf@ap+1,f,c
 12712                           
 12713                           ;doprnt.c: 740: if(!cp)
 12714  000A5A  5020               	movf	i2printf@cp,w,c
 12715  000A5C  1021               	iorwf	i2printf@cp+1,w,c
 12716  000A5E  A4D8               	btfss	status,2,c
 12717  000A60  D004               	goto	i2l4523
 12718                           
 12719                           ;doprnt.c: 741: cp = "(null)";
 12720  000A62  0EBD               	movlw	low STR_51
 12721  000A64  6E20               	movwf	i2printf@cp,c
 12722  000A66  0EFF               	movlw	high STR_51
 12723  000A68  6E21               	movwf	i2printf@cp+1,c
 12724  000A6A                     i2l4523:
 12725                           
 12726                           ;doprnt.c: 745: len = 0;
 12727  000A6A  0E00               	movlw	0
 12728  000A6C  6E25               	movwf	i2printf@len+1,c
 12729  000A6E  0E00               	movlw	0
 12730  000A70  6E24               	movwf	i2printf@len,c
 12731                           
 12732                           ;doprnt.c: 746: while(cp[len])
 12733  000A72  D002               	goto	i2l4527
 12734  000A74                     i2l4525:
 12735                           
 12736                           ;doprnt.c: 747: len++;
 12737  000A74  4A24               	infsnz	i2printf@len,f,c
 12738  000A76  2A25               	incf	i2printf@len+1,f,c
 12739  000A78                     i2l4527:
 12740  000A78  5024               	movf	i2printf@len,w,c
 12741  000A7A  2420               	addwf	i2printf@cp,w,c
 12742  000A7C  6E19               	movwf	??i2_printf& (0+255),c
 12743  000A7E  5025               	movf	i2printf@len+1,w,c
 12744  000A80  2021               	addwfc	i2printf@cp+1,w,c
 12745  000A82  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 12746  000A84  C019  FFF6         	movff	??i2_printf,tblptrl
 12747  000A88  C01A  FFF7         	movff	??i2_printf+1,tblptrh
 12748  000A8C  0E00               	movlw	low (__mediumconst shr (0+16))
 12749  000A8E  6EF8               	movwf	tblptru,c
 12750  000A90  0E0F               	movlw	(high __ramtop+-1)
 12751  000A92  64F7               	cpfsgt	tblptrh,c
 12752  000A94  D003               	bra	i2u314_47
 12753  000A96  0008               	tblrd		*
 12754  000A98  50F5               	movf	tablat,w,c
 12755  000A9A  D005               	bra	i2u314_40
 12756  000A9C                     i2u314_47:
 12757  000A9C  CFF6 FFE9          	movff	tblptrl,fsr0l
 12758  000AA0  CFF7 FFEA          	movff	tblptrh,fsr0h
 12759  000AA4  50EF               	movf	indf0,w,c
 12760  000AA6                     i2u314_40:
 12761  000AA6  0900               	iorlw	0
 12762  000AA8  A4D8               	btfss	status,2,c
 12763  000AAA  D7E4               	goto	i2l4525
 12764                           
 12765                           ;doprnt.c: 757: if(width > len)
 12766  000AAC  5028               	movf	i2printf@width,w,c
 12767  000AAE  5C24               	subwf	i2printf@len,w,c
 12768  000AB0  5029               	movf	i2printf@width+1,w,c
 12769  000AB2  5825               	subwfb	i2printf@len+1,w,c
 12770  000AB4  B0D8               	btfsc	status,0,c
 12771  000AB6  D005               	goto	i2l4533
 12772                           
 12773                           ;doprnt.c: 758: width -= len;
 12774  000AB8  5024               	movf	i2printf@len,w,c
 12775  000ABA  5E28               	subwf	i2printf@width,f,c
 12776  000ABC  5025               	movf	i2printf@len+1,w,c
 12777  000ABE  5A29               	subwfb	i2printf@width+1,f,c
 12778  000AC0  D008               	goto	i2l4537
 12779  000AC2                     i2l4533:
 12780                           
 12781                           ;doprnt.c: 759: else
 12782                           ;doprnt.c: 760: width = 0;
 12783  000AC2  0E00               	movlw	0
 12784  000AC4  6E29               	movwf	i2printf@width+1,c
 12785  000AC6  0E00               	movlw	0
 12786  000AC8  6E28               	movwf	i2printf@width,c
 12787                           
 12788                           ;doprnt.c: 764: while(width--)
 12789  000ACA  D003               	goto	i2l4537
 12790  000ACC                     i2l4535:
 12791                           
 12792                           ;doprnt.c: 765: (putch(' ') );
 12793  000ACC  0E20               	movlw	32
 12794  000ACE  ECE0  F015         	call	i2_putch
 12795  000AD2                     i2l4537:
 12796  000AD2  0628               	decf	i2printf@width,f,c
 12797  000AD4  A0D8               	btfss	status,0,c
 12798  000AD6  0629               	decf	i2printf@width+1,f,c
 12799  000AD8  2828               	incf	i2printf@width,w,c
 12800  000ADA  E1F8               	bnz	i2l4535
 12801  000ADC  2829               	incf	i2printf@width+1,w,c
 12802  000ADE  B4D8               	btfsc	status,2,c
 12803  000AE0  D016               	goto	i2l4543
 12804  000AE2  D7F4               	goto	i2l4535
 12805  000AE4                     i2l4539:
 12806                           
 12807                           ;doprnt.c: 768: (putch(*cp++) );
 12808  000AE4  C020  FFF6         	movff	i2printf@cp,tblptrl
 12809  000AE8  C021  FFF7         	movff	i2printf@cp+1,tblptrh
 12810  000AEC  0E00               	movlw	low (__mediumconst shr (0+16))
 12811  000AEE  6EF8               	movwf	tblptru,c
 12812  000AF0  0E0F               	movlw	(high __ramtop+-1)
 12813  000AF2  64F7               	cpfsgt	tblptrh,c
 12814  000AF4  D003               	bra	i2u318_47
 12815  000AF6  0008               	tblrd		*
 12816  000AF8  50F5               	movf	tablat,w,c
 12817  000AFA  D005               	bra	i2u318_40
 12818  000AFC                     i2u318_47:
 12819  000AFC  CFF6 FFE9          	movff	tblptrl,fsr0l
 12820  000B00  CFF7 FFEA          	movff	tblptrh,fsr0h
 12821  000B04  50EF               	movf	indf0,w,c
 12822  000B06                     i2u318_40:
 12823  000B06  ECE0  F015         	call	i2_putch
 12824  000B0A  4A20               	infsnz	i2printf@cp,f,c
 12825  000B0C  2A21               	incf	i2printf@cp+1,f,c
 12826  000B0E                     i2l4543:
 12827  000B0E  0624               	decf	i2printf@len,f,c
 12828  000B10  A0D8               	btfss	status,0,c
 12829  000B12  0625               	decf	i2printf@len+1,f,c
 12830  000B14  2824               	incf	i2printf@len,w,c
 12831  000B16  E1E6               	bnz	i2l4539
 12832  000B18  2825               	incf	i2printf@len+1,w,c
 12833  000B1A  B4D8               	btfsc	status,2,c
 12834  000B1C  D0C6               	goto	i2l4615
 12835  000B1E  D7E2               	goto	i2l4539
 12836  000B20                     i2l4547:
 12837  000B20  C00D  FFF6         	movff	i2printf@f,tblptrl
 12838  000B24  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 12839  000B28  4A0D               	infsnz	i2printf@f,f,c
 12840  000B2A  2A0E               	incf	i2printf@f+1,f,c
 12841  000B2C                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 12842  000B2C  6AF8               	clrf	tblptru,c
 12843  000B2E                     	endif
 12844  000B2E                     	if	0	;tblptru may be non-zero
 12845  000B2E                     	endif
 12846  000B2E  0008               	tblrd		*
 12847  000B30  CFF5 F027          	movff	tablat,i2printf@c
 12848  000B34  5027               	movf	i2printf@c,w,c
 12849                           
 12850                           ; Switch size 1, requested type "space"
 12851                           ; Number of cases is 4, Range of values is 0 to 115
 12852                           ; switch strategies available:
 12853                           ; Name         Instructions Cycles
 12854                           ; simple_byte           13     7 (average)
 12855                           ;	Chosen strategy is simple_byte
 12856  000B36  0A00               	xorlw	0	; case 0
 12857  000B38  B4D8               	btfsc	status,2,c
 12858  000B3A  0012               	return	
 12859  000B3C  0A64               	xorlw	100	; case 100
 12860  000B3E  B4D8               	btfsc	status,2,c
 12861  000B40  D007               	goto	i2l4549
 12862  000B42  0A0D               	xorlw	13	; case 105
 12863  000B44  B4D8               	btfsc	status,2,c
 12864  000B46  D004               	goto	i2l4549
 12865  000B48  0A1A               	xorlw	26	; case 115
 12866  000B4A  B4D8               	btfsc	status,2,c
 12867  000B4C  D77A               	goto	i2l4515
 12868  000B4E  D0AD               	goto	i2l4615
 12869  000B50                     i2l4549:
 12870                           
 12871                           ;doprnt.c: 1253: {
 12872                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 12873  000B50  C01E  FFD9         	movff	i2printf@ap,fsr2l
 12874  000B54  C01F  FFDA         	movff	i2printf@ap+1,fsr2h
 12875  000B58  CFDE F022          	movff	postinc2,i2printf@val
 12876  000B5C  CFDD F023          	movff	postdec2,i2printf@val+1
 12877  000B60  0E02               	movlw	2
 12878  000B62  261E               	addwf	i2printf@ap,f,c
 12879  000B64  0E00               	movlw	0
 12880  000B66  221F               	addwfc	i2printf@ap+1,f,c
 12881                           
 12882                           ;doprnt.c: 1261: if((int)val < 0) {
 12883  000B68  AE23               	btfss	i2printf@val+1,7,c
 12884  000B6A  D006               	goto	i2l4559
 12885                           
 12886                           ;doprnt.c: 1262: flag |= 0x03;
 12887  000B6C  0E03               	movlw	3
 12888  000B6E  1226               	iorwf	i2printf@flag,f,c
 12889                           
 12890                           ;doprnt.c: 1263: val = -val;
 12891  000B70  6C22               	negf	i2printf@val,c
 12892  000B72  1E23               	comf	i2printf@val+1,f,c
 12893  000B74  B0D8               	btfsc	status,0,c
 12894  000B76  2A23               	incf	i2printf@val+1,f,c
 12895  000B78                     i2l4559:
 12896                           
 12897                           ;doprnt.c: 1264: }
 12898                           ;doprnt.c: 1266: }
 12899                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 12900  000B78  0E01               	movlw	1
 12901  000B7A  6E27               	movwf	i2printf@c,c
 12902  000B7C                     i2l4561:
 12903  000B7C  0E05               	movlw	5
 12904  000B7E  1827               	xorwf	i2printf@c,w,c
 12905  000B80  B4D8               	btfsc	status,2,c
 12906  000B82  D015               	goto	i2l4573
 12907                           
 12908                           ;doprnt.c: 1306: if(val < dpowers[c])
 12909  000B84  5027               	movf	i2printf@c,w,c
 12910  000B86  0D02               	mullw	2
 12911  000B88  0EC6               	movlw	low _dpowers
 12912  000B8A  24F3               	addwf	prodl,w,c
 12913  000B8C  6EF6               	movwf	tblptrl,c
 12914  000B8E  0EFD               	movlw	high _dpowers
 12915  000B90  20F4               	addwfc	prodh,w,c
 12916  000B92  6EF7               	movwf	tblptrh,c
 12917  000B94                     	if	1	;There are 3 active tblptr bytes
 12918  000B94  6AF8               	clrf	tblptru,c
 12919  000B96  0E00               	movlw	low (__mediumconst shr (0+16))
 12920  000B98  22F8               	addwfc	tblptru,f,c
 12921  000B9A                     	endif
 12922  000B9A  0009               	tblrd		*+
 12923  000B9C  50F5               	movf	tablat,w,c
 12924  000B9E  5C22               	subwf	i2printf@val,w,c
 12925  000BA0  0009               	tblrd		*+
 12926  000BA2  50F5               	movf	tablat,w,c
 12927  000BA4  5823               	subwfb	i2printf@val+1,w,c
 12928  000BA6  A0D8               	btfss	status,0,c
 12929  000BA8  D002               	goto	i2l4573
 12930                           
 12931                           ;doprnt.c: 1307: break;
 12932  000BAA  2A27               	incf	i2printf@c,f,c
 12933  000BAC  D7E7               	goto	i2l4561
 12934  000BAE                     i2l4573:
 12935                           
 12936                           ;doprnt.c: 1345: if(width && flag & 0x03)
 12937  000BAE  5028               	movf	i2printf@width,w,c
 12938  000BB0  1029               	iorwf	i2printf@width+1,w,c
 12939  000BB2  B4D8               	btfsc	status,2,c
 12940  000BB4  D009               	goto	i2l4579
 12941  000BB6  C026  F019         	movff	i2printf@flag,??i2_printf
 12942  000BBA  0E03               	movlw	3
 12943  000BBC  1619               	andwf	??i2_printf,f,c
 12944  000BBE  B4D8               	btfsc	status,2,c
 12945  000BC0  D003               	goto	i2l4579
 12946                           
 12947                           ;doprnt.c: 1346: width--;
 12948  000BC2  0628               	decf	i2printf@width,f,c
 12949  000BC4  A0D8               	btfss	status,0,c
 12950  000BC6  0629               	decf	i2printf@width+1,f,c
 12951  000BC8                     i2l4579:
 12952                           
 12953                           ;doprnt.c: 1381: if(width > c)
 12954  000BC8  0E80               	movlw	128
 12955  000BCA  BE27               	btfsc	i2printf@c,7,c
 12956  000BCC  0E7F               	movlw	127
 12957  000BCE  6E19               	movwf	??i2_printf& (0+255),c
 12958  000BD0  5028               	movf	i2printf@width,w,c
 12959  000BD2  5C27               	subwf	i2printf@c,w,c
 12960  000BD4  5029               	movf	i2printf@width+1,w,c
 12961  000BD6  0A80               	xorlw	128
 12962  000BD8  5819               	subwfb	??i2_printf& (0+255),w,c
 12963  000BDA  B0D8               	btfsc	status,0,c
 12964  000BDC  D007               	goto	i2l4583
 12965                           
 12966                           ;doprnt.c: 1382: width -= c;
 12967  000BDE  5027               	movf	i2printf@c,w,c
 12968  000BE0  5E28               	subwf	i2printf@width,f,c
 12969  000BE2  0E00               	movlw	0
 12970  000BE4  BE27               	btfsc	i2printf@c,7,c
 12971  000BE6  0EFF               	movlw	255
 12972  000BE8  5A29               	subwfb	i2printf@width+1,f,c
 12973  000BEA  D004               	goto	i2l4585
 12974  000BEC                     i2l4583:
 12975                           
 12976                           ;doprnt.c: 1383: else
 12977                           ;doprnt.c: 1384: width = 0;
 12978  000BEC  0E00               	movlw	0
 12979  000BEE  6E29               	movwf	i2printf@width+1,c
 12980  000BF0  0E00               	movlw	0
 12981  000BF2  6E28               	movwf	i2printf@width,c
 12982  000BF4                     i2l4585:
 12983                           
 12984                           ;doprnt.c: 1387: if(flag & 0x04) {
 12985  000BF4  A426               	btfss	i2printf@flag,2,c
 12986  000BF6  D014               	goto	i2l4597
 12987                           
 12988                           ;doprnt.c: 1392: if(flag & 0x03)
 12989  000BF8  C026  F019         	movff	i2printf@flag,??i2_printf
 12990  000BFC  0E03               	movlw	3
 12991  000BFE  1619               	andwf	??i2_printf,f,c
 12992  000C00  B4D8               	btfsc	status,2,c
 12993  000C02  D003               	goto	i2l4591
 12994                           
 12995                           ;doprnt.c: 1393: (putch('-') );
 12996  000C04  0E2D               	movlw	45
 12997  000C06  ECE0  F015         	call	i2_putch
 12998  000C0A                     i2l4591:
 12999                           
 13000                           ;doprnt.c: 1415: if(width)
 13001  000C0A  5028               	movf	i2printf@width,w,c
 13002  000C0C  1029               	iorwf	i2printf@width+1,w,c
 13003  000C0E  B4D8               	btfsc	status,2,c
 13004  000C10  D01E               	goto	i2l4607
 13005                           
 13006                           ;doprnt.c: 1417: (putch('0') );
 13007                           
 13008                           ;doprnt.c: 1416: do
 13009  000C12  0E30               	movlw	48
 13010  000C14  ECE0  F015         	call	i2_putch
 13011                           
 13012                           ;doprnt.c: 1418: while(--width);
 13013  000C18  0628               	decf	i2printf@width,f,c
 13014  000C1A  A0D8               	btfss	status,0,c
 13015  000C1C  0629               	decf	i2printf@width+1,f,c
 13016  000C1E  D7F5               	goto	i2l4591
 13017  000C20                     i2l4597:
 13018                           
 13019                           ;doprnt.c: 1422: {
 13020                           ;doprnt.c: 1424: if(width
 13021                           ;doprnt.c: 1428: )
 13022  000C20  5028               	movf	i2printf@width,w,c
 13023  000C22  1029               	iorwf	i2printf@width+1,w,c
 13024  000C24  B4D8               	btfsc	status,2,c
 13025  000C26  D00A               	goto	i2l4603
 13026  000C28                     i2l4599:
 13027                           
 13028                           ;doprnt.c: 1430: (putch(' ') );
 13029  000C28  0E20               	movlw	32
 13030  000C2A  ECE0  F015         	call	i2_putch
 13031                           
 13032                           ;doprnt.c: 1431: while(--width);
 13033  000C2E  0628               	decf	i2printf@width,f,c
 13034  000C30  A0D8               	btfss	status,0,c
 13035  000C32  0629               	decf	i2printf@width+1,f,c
 13036  000C34  5028               	movf	i2printf@width,w,c
 13037  000C36  1029               	iorwf	i2printf@width+1,w,c
 13038  000C38  A4D8               	btfss	status,2,c
 13039  000C3A  D7F6               	goto	i2l4599
 13040  000C3C                     i2l4603:
 13041                           
 13042                           ;doprnt.c: 1438: if(flag & 0x03)
 13043  000C3C  C026  F019         	movff	i2printf@flag,??i2_printf
 13044  000C40  0E03               	movlw	3
 13045  000C42  1619               	andwf	??i2_printf,f,c
 13046  000C44  B4D8               	btfsc	status,2,c
 13047  000C46  D003               	goto	i2l4607
 13048                           
 13049                           ;doprnt.c: 1439: (putch('-') );
 13050  000C48  0E2D               	movlw	45
 13051  000C4A  ECE0  F015         	call	i2_putch
 13052  000C4E                     i2l4607:
 13053                           
 13054                           ;doprnt.c: 1469: }
 13055                           ;doprnt.c: 1472: prec = c;
 13056  000C4E  C027  F01D         	movff	i2printf@c,i2printf@prec
 13057                           
 13058                           ;doprnt.c: 1474: while(prec--) {
 13059  000C52  D027               	goto	i2l4613
 13060  000C54                     i2l4609:
 13061                           
 13062                           ;doprnt.c: 1478: {
 13063                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 13064  000C54  501D               	movf	i2printf@prec,w,c
 13065  000C56  0D02               	mullw	2
 13066  000C58  0EC6               	movlw	low _dpowers
 13067  000C5A  24F3               	addwf	prodl,w,c
 13068  000C5C  6EF6               	movwf	tblptrl,c
 13069  000C5E  0EFD               	movlw	high _dpowers
 13070  000C60  20F4               	addwfc	prodh,w,c
 13071  000C62  6EF7               	movwf	tblptrh,c
 13072  000C64                     	if	1	;There are 3 active tblptr bytes
 13073  000C64  6AF8               	clrf	tblptru,c
 13074  000C66  0E00               	movlw	low (__mediumconst shr (0+16))
 13075  000C68  22F8               	addwfc	tblptru,f,c
 13076  000C6A                     	endif
 13077  000C6A  0009               	tblrd		*+
 13078  000C6C  CFF5 F008          	movff	tablat,i2___lwdiv@divisor
 13079  000C70  000A               	tblrd		*-
 13080  000C72  CFF5 F009          	movff	tablat,i2___lwdiv@divisor+1
 13081  000C76  C022  F006         	movff	i2printf@val,i2___lwdiv@dividend
 13082  000C7A  C023  F007         	movff	i2printf@val+1,i2___lwdiv@dividend+1
 13083  000C7E  ECA3  F012         	call	i2___lwdiv	;wreg free
 13084  000C82  C006  F001         	movff	?i2___lwdiv,i2___lwmod@dividend
 13085  000C86  C007  F002         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
 13086  000C8A  0E00               	movlw	0
 13087  000C8C  6E04               	movwf	i2___lwmod@divisor+1,c
 13088  000C8E  0E0A               	movlw	10
 13089  000C90  6E03               	movwf	i2___lwmod@divisor,c
 13090  000C92  ECEF  F012         	call	i2___lwmod	;wreg free
 13091  000C96  5001               	movf	?i2___lwmod,w,c
 13092  000C98  0F30               	addlw	48
 13093  000C9A  6E27               	movwf	i2printf@c,c
 13094                           
 13095                           ;doprnt.c: 1523: }
 13096                           ;doprnt.c: 1524: (putch(c) );
 13097  000C9C  5027               	movf	i2printf@c,w,c
 13098  000C9E  ECE0  F015         	call	i2_putch
 13099  000CA2                     i2l4613:
 13100  000CA2  061D               	decf	i2printf@prec,f,c
 13101  000CA4  281D               	incf	i2printf@prec,w,c
 13102  000CA6  A4D8               	btfss	status,2,c
 13103  000CA8  D7D5               	goto	i2l4609
 13104  000CAA                     i2l4615:
 13105  000CAA  C00D  FFF6         	movff	i2printf@f,tblptrl
 13106  000CAE  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 13107  000CB2  4A0D               	infsnz	i2printf@f,f,c
 13108  000CB4  2A0E               	incf	i2printf@f+1,f,c
 13109  000CB6                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 13110  000CB6  6AF8               	clrf	tblptru,c
 13111  000CB8                     	endif
 13112  000CB8                     	if	0	;tblptru may be non-zero
 13113  000CB8                     	endif
 13114  000CB8  0008               	tblrd		*
 13115  000CBA  CFF5 F027          	movff	tablat,i2printf@c
 13116  000CBE  5027               	movf	i2printf@c,w,c
 13117  000CC0  B4D8               	btfsc	status,2,c
 13118  000CC2  0012               	return	
 13119  000CC4  D662               	goto	i2l4491
 13120  000CC6                     __end_ofi2_printf:
 13121                           	opt stack 0
 13122                           pclatu	equ	0xFFB
 13123                           pclath	equ	0xFFA
 13124                           tblptru	equ	0xFF8
 13125                           tblptrh	equ	0xFF7
 13126                           tblptrl	equ	0xFF6
 13127                           tablat	equ	0xFF5
 13128                           prodh	equ	0xFF4
 13129                           prodl	equ	0xFF3
 13130                           intcon	equ	0xFF2
 13131                           intcon2	equ	0xFF1
 13132                           intcon3	equ	0xFF0
 13133                           indf0	equ	0xFEF
 13134                           postinc0	equ	0xFEE
 13135                           fsr0h	equ	0xFEA
 13136                           fsr0l	equ	0xFE9
 13137                           wreg	equ	0xFE8
 13138                           postdec1	equ	0xFE5
 13139                           fsr1h	equ	0xFE2
 13140                           fsr1l	equ	0xFE1
 13141                           indf2	equ	0xFDF
 13142                           postinc2	equ	0xFDE
 13143                           postdec2	equ	0xFDD
 13144                           fsr2h	equ	0xFDA
 13145                           fsr2l	equ	0xFD9
 13146                           status	equ	0xFD8
 13147                           
 13148 ;; *************** function i2_putch *****************
 13149 ;; Defined at:
 13150 ;;		line 19 in file "lcd.c"
 13151 ;; Parameters:    Size  Location     Type
 13152 ;;  data            1    wreg     unsigned char 
 13153 ;; Auto vars:     Size  Location     Type
 13154 ;;  data            1    2[COMRAM] unsigned char 
 13155 ;; Return value:  Size  Location     Type
 13156 ;;                  1    wreg      void 
 13157 ;; Registers used:
 13158 ;;		wreg, status,2, status,0, cstack
 13159 ;; Tracked objects:
 13160 ;;		On entry : 0/0
 13161 ;;		On exit  : 0/0
 13162 ;;		Unchanged: 0/0
 13163 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13164 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13165 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13166 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13167 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13168 ;;Total ram usage:        1 bytes
 13169 ;; Hardware stack levels used:    1
 13170 ;; Hardware stack levels required when called:    1
 13171 ;; This function calls:
 13172 ;;		i2_lcdNibble
 13173 ;; This function is called by:
 13174 ;;		i2_printf
 13175 ;; This function uses a non-reentrant model
 13176 ;;
 13177                           
 13178                           	psect	text61
 13179  002BC0                     __ptext61:
 13180                           	opt stack 0
 13181  002BC0                     i2_putch:
 13182                           	opt stack 19
 13183                           
 13184                           ;incstack = 0
 13185                           ;i2putch@data stored from wreg
 13186  002BC0  6E03               	movwf	i2putch@data,c
 13187                           
 13188                           ;lcd.c: 20: LATDbits.LATD2 = 1;
 13189  002BC2  848C               	bsf	3980,2,c	;volatile
 13190                           
 13191                           ;lcd.c: 21: lcdNibble(data);
 13192  002BC4  5003               	movf	i2putch@data,w,c
 13193  002BC6  EC78  F012         	call	i2_lcdNibble
 13194  002BCA  0012               	return		;funcret
 13195  002BCC                     __end_ofi2_putch:
 13196                           	opt stack 0
 13197                           pclatu	equ	0xFFB
 13198                           pclath	equ	0xFFA
 13199                           tblptru	equ	0xFF8
 13200                           tblptrh	equ	0xFF7
 13201                           tblptrl	equ	0xFF6
 13202                           tablat	equ	0xFF5
 13203                           prodh	equ	0xFF4
 13204                           prodl	equ	0xFF3
 13205                           intcon	equ	0xFF2
 13206                           intcon2	equ	0xFF1
 13207                           intcon3	equ	0xFF0
 13208                           indf0	equ	0xFEF
 13209                           postinc0	equ	0xFEE
 13210                           fsr0h	equ	0xFEA
 13211                           fsr0l	equ	0xFE9
 13212                           wreg	equ	0xFE8
 13213                           postdec1	equ	0xFE5
 13214                           fsr1h	equ	0xFE2
 13215                           fsr1l	equ	0xFE1
 13216                           indf2	equ	0xFDF
 13217                           postinc2	equ	0xFDE
 13218                           postdec2	equ	0xFDD
 13219                           fsr2h	equ	0xFDA
 13220                           fsr2l	equ	0xFD9
 13221                           status	equ	0xFD8
 13222                           
 13223 ;; *************** function i2_isdigit *****************
 13224 ;; Defined at:
 13225 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 13226 ;; Parameters:    Size  Location     Type
 13227 ;;  c               1    wreg     unsigned char 
 13228 ;; Auto vars:     Size  Location     Type
 13229 ;;  c               1    2[COMRAM] unsigned char 
 13230 ;; Return value:  Size  Location     Type
 13231 ;;		None               void
 13232 ;; Registers used:
 13233 ;;		wreg, status,2, status,0
 13234 ;; Tracked objects:
 13235 ;;		On entry : 0/0
 13236 ;;		On exit  : 0/0
 13237 ;;		Unchanged: 0/0
 13238 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13239 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13240 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13241 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13242 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13243 ;;Total ram usage:        3 bytes
 13244 ;; Hardware stack levels used:    1
 13245 ;; This function calls:
 13246 ;;		Nothing
 13247 ;; This function is called by:
 13248 ;;		i2_printf
 13249 ;; This function uses a non-reentrant model
 13250 ;;
 13251                           
 13252                           	psect	text62
 13253  002B06                     __ptext62:
 13254                           	opt stack 0
 13255  002B06                     i2_isdigit:
 13256                           	opt stack 20
 13257                           
 13258                           ;incstack = 0
 13259                           ;i2isdigit@c stored from wreg
 13260  002B06  6E03               	movwf	i2isdigit@c,c
 13261  002B08  0E00               	movlw	0
 13262  002B0A  6E02               	movwf	i2_isdigit$1648,c
 13263  002B0C  0E3A               	movlw	58
 13264  002B0E  6003               	cpfslt	i2isdigit@c,c
 13265  002B10  D005               	goto	i2l4231
 13266  002B12  0E2F               	movlw	47
 13267  002B14  6403               	cpfsgt	i2isdigit@c,c
 13268  002B16  D002               	goto	i2l4231
 13269  002B18  0E01               	movlw	1
 13270  002B1A  6E02               	movwf	i2_isdigit$1648,c
 13271  002B1C                     i2l4231:
 13272  002B1C  C002  F001         	movff	i2_isdigit$1648,??i2_isdigit
 13273  002B20  3001               	rrcf	??i2_isdigit,w,c
 13274  002B22  0012               	return	
 13275  002B24                     __end_ofi2_isdigit:
 13276                           	opt stack 0
 13277                           pclatu	equ	0xFFB
 13278                           pclath	equ	0xFFA
 13279                           tblptru	equ	0xFF8
 13280                           tblptrh	equ	0xFF7
 13281                           tblptrl	equ	0xFF6
 13282                           tablat	equ	0xFF5
 13283                           prodh	equ	0xFF4
 13284                           prodl	equ	0xFF3
 13285                           intcon	equ	0xFF2
 13286                           intcon2	equ	0xFF1
 13287                           intcon3	equ	0xFF0
 13288                           indf0	equ	0xFEF
 13289                           postinc0	equ	0xFEE
 13290                           fsr0h	equ	0xFEA
 13291                           fsr0l	equ	0xFE9
 13292                           wreg	equ	0xFE8
 13293                           postdec1	equ	0xFE5
 13294                           fsr1h	equ	0xFE2
 13295                           fsr1l	equ	0xFE1
 13296                           indf2	equ	0xFDF
 13297                           postinc2	equ	0xFDE
 13298                           postdec2	equ	0xFDD
 13299                           fsr2h	equ	0xFDA
 13300                           fsr2l	equ	0xFD9
 13301                           status	equ	0xFD8
 13302                           
 13303 ;; *************** function i2___wmul *****************
 13304 ;; Defined at:
 13305 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 13306 ;; Parameters:    Size  Location     Type
 13307 ;;  multiplier      2    0[COMRAM] unsigned int 
 13308 ;;  multiplicand    2    2[COMRAM] unsigned int 
 13309 ;; Auto vars:     Size  Location     Type
 13310 ;;  __wmul          2    4[COMRAM] unsigned int 
 13311 ;; Return value:  Size  Location     Type
 13312 ;;                  2    0[COMRAM] unsigned int 
 13313 ;; Registers used:
 13314 ;;		wreg, status,2, status,0, prodl, prodh
 13315 ;; Tracked objects:
 13316 ;;		On entry : 0/0
 13317 ;;		On exit  : 0/0
 13318 ;;		Unchanged: 0/0
 13319 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13320 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13321 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13322 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13323 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13324 ;;Total ram usage:        6 bytes
 13325 ;; Hardware stack levels used:    1
 13326 ;; This function calls:
 13327 ;;		Nothing
 13328 ;; This function is called by:
 13329 ;;		_printSortTimer
 13330 ;;		i2_printf
 13331 ;; This function uses a non-reentrant model
 13332 ;;
 13333                           
 13334                           	psect	text63
 13335  002A56                     __ptext63:
 13336                           	opt stack 0
 13337  002A56                     i2___wmul:
 13338                           	opt stack 20
 13339                           
 13340                           ;incstack = 0
 13341  002A56  5001               	movf	i2___wmul@multiplier,w,c
 13342  002A58  0203               	mulwf	i2___wmul@multiplicand,c
 13343  002A5A  CFF3 F005          	movff	prodl,i2___wmul@product
 13344  002A5E  CFF4 F006          	movff	prodh,i2___wmul@product+1
 13345  002A62  5001               	movf	i2___wmul@multiplier,w,c
 13346  002A64  0204               	mulwf	i2___wmul@multiplicand+1,c
 13347  002A66  50F3               	movf	prodl,w,c
 13348  002A68  2606               	addwf	i2___wmul@product+1,f,c
 13349  002A6A  5002               	movf	i2___wmul@multiplier+1,w,c
 13350  002A6C  0203               	mulwf	i2___wmul@multiplicand,c
 13351  002A6E  50F3               	movf	prodl,w,c
 13352  002A70  2606               	addwf	i2___wmul@product+1,f,c
 13353  002A72  C005  F001         	movff	i2___wmul@product,?i2___wmul
 13354  002A76  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
 13355  002A7A  0012               	return	
 13356  002A7C                     __end_ofi2___wmul:
 13357                           	opt stack 0
 13358                           pclatu	equ	0xFFB
 13359                           pclath	equ	0xFFA
 13360                           tblptru	equ	0xFF8
 13361                           tblptrh	equ	0xFF7
 13362                           tblptrl	equ	0xFF6
 13363                           tablat	equ	0xFF5
 13364                           prodh	equ	0xFF4
 13365                           prodl	equ	0xFF3
 13366                           intcon	equ	0xFF2
 13367                           intcon2	equ	0xFF1
 13368                           intcon3	equ	0xFF0
 13369                           indf0	equ	0xFEF
 13370                           postinc0	equ	0xFEE
 13371                           fsr0h	equ	0xFEA
 13372                           fsr0l	equ	0xFE9
 13373                           wreg	equ	0xFE8
 13374                           postdec1	equ	0xFE5
 13375                           fsr1h	equ	0xFE2
 13376                           fsr1l	equ	0xFE1
 13377                           indf2	equ	0xFDF
 13378                           postinc2	equ	0xFDE
 13379                           postdec2	equ	0xFDD
 13380                           fsr2h	equ	0xFDA
 13381                           fsr2l	equ	0xFD9
 13382                           status	equ	0xFD8
 13383                           
 13384 ;; *************** function i2___lwmod *****************
 13385 ;; Defined at:
 13386 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 13387 ;; Parameters:    Size  Location     Type
 13388 ;;  dividend        2    0[COMRAM] unsigned int 
 13389 ;;  divisor         2    2[COMRAM] unsigned int 
 13390 ;; Auto vars:     Size  Location     Type
 13391 ;;  __lwmod         1    4[COMRAM] unsigned char 
 13392 ;; Return value:  Size  Location     Type
 13393 ;;                  2    0[COMRAM] unsigned int 
 13394 ;; Registers used:
 13395 ;;		wreg, status,2, status,0
 13396 ;; Tracked objects:
 13397 ;;		On entry : 0/0
 13398 ;;		On exit  : 0/0
 13399 ;;		Unchanged: 0/0
 13400 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13401 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13402 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13403 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13404 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13405 ;;Total ram usage:        5 bytes
 13406 ;; Hardware stack levels used:    1
 13407 ;; This function calls:
 13408 ;;		Nothing
 13409 ;; This function is called by:
 13410 ;;		_printSortTimer
 13411 ;;		i2_printf
 13412 ;; This function uses a non-reentrant model
 13413 ;;
 13414                           
 13415                           	psect	text64
 13416  0025DE                     __ptext64:
 13417                           	opt stack 0
 13418  0025DE                     i2___lwmod:
 13419                           	opt stack 20
 13420                           
 13421                           ;incstack = 0
 13422  0025DE  5003               	movf	i2___lwmod@divisor,w,c
 13423  0025E0  1004               	iorwf	i2___lwmod@divisor+1,w,c
 13424  0025E2  B4D8               	btfsc	status,2,c
 13425  0025E4  D018               	goto	i2l1742
 13426  0025E6  0E01               	movlw	1
 13427  0025E8  6E05               	movwf	i2___lwmod@counter,c
 13428  0025EA  D004               	goto	i2l4263
 13429  0025EC                     i2l4261:
 13430  0025EC  90D8               	bcf	status,0,c
 13431  0025EE  3603               	rlcf	i2___lwmod@divisor,f,c
 13432  0025F0  3604               	rlcf	i2___lwmod@divisor+1,f,c
 13433  0025F2  2A05               	incf	i2___lwmod@counter,f,c
 13434  0025F4                     i2l4263:
 13435  0025F4  AE04               	btfss	i2___lwmod@divisor+1,7,c
 13436  0025F6  D7FA               	goto	i2l4261
 13437  0025F8                     i2l4265:
 13438  0025F8  5003               	movf	i2___lwmod@divisor,w,c
 13439  0025FA  5C01               	subwf	i2___lwmod@dividend,w,c
 13440  0025FC  5004               	movf	i2___lwmod@divisor+1,w,c
 13441  0025FE  5802               	subwfb	i2___lwmod@dividend+1,w,c
 13442  002600  A0D8               	btfss	status,0,c
 13443  002602  D004               	goto	i2l4269
 13444  002604  5003               	movf	i2___lwmod@divisor,w,c
 13445  002606  5E01               	subwf	i2___lwmod@dividend,f,c
 13446  002608  5004               	movf	i2___lwmod@divisor+1,w,c
 13447  00260A  5A02               	subwfb	i2___lwmod@dividend+1,f,c
 13448  00260C                     i2l4269:
 13449  00260C  90D8               	bcf	status,0,c
 13450  00260E  3204               	rrcf	i2___lwmod@divisor+1,f,c
 13451  002610  3203               	rrcf	i2___lwmod@divisor,f,c
 13452  002612  2E05               	decfsz	i2___lwmod@counter,f,c
 13453  002614  D7F1               	goto	i2l4265
 13454  002616                     i2l1742:
 13455  002616  C001  F001         	movff	i2___lwmod@dividend,?i2___lwmod
 13456  00261A  C002  F002         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
 13457  00261E  0012               	return		;funcret
 13458  002620                     __end_ofi2___lwmod:
 13459                           	opt stack 0
 13460                           pclatu	equ	0xFFB
 13461                           pclath	equ	0xFFA
 13462                           tblptru	equ	0xFF8
 13463                           tblptrh	equ	0xFF7
 13464                           tblptrl	equ	0xFF6
 13465                           tablat	equ	0xFF5
 13466                           prodh	equ	0xFF4
 13467                           prodl	equ	0xFF3
 13468                           intcon	equ	0xFF2
 13469                           intcon2	equ	0xFF1
 13470                           intcon3	equ	0xFF0
 13471                           indf0	equ	0xFEF
 13472                           postinc0	equ	0xFEE
 13473                           fsr0h	equ	0xFEA
 13474                           fsr0l	equ	0xFE9
 13475                           wreg	equ	0xFE8
 13476                           postdec1	equ	0xFE5
 13477                           fsr1h	equ	0xFE2
 13478                           fsr1l	equ	0xFE1
 13479                           indf2	equ	0xFDF
 13480                           postinc2	equ	0xFDE
 13481                           postdec2	equ	0xFDD
 13482                           fsr2h	equ	0xFDA
 13483                           fsr2l	equ	0xFD9
 13484                           status	equ	0xFD8
 13485                           
 13486 ;; *************** function i2___lwdiv *****************
 13487 ;; Defined at:
 13488 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 13489 ;; Parameters:    Size  Location     Type
 13490 ;;  dividend        2    5[COMRAM] unsigned int 
 13491 ;;  divisor         2    7[COMRAM] unsigned int 
 13492 ;; Auto vars:     Size  Location     Type
 13493 ;;  __lwdiv         2    9[COMRAM] unsigned int 
 13494 ;;  __lwdiv         1   11[COMRAM] unsigned char 
 13495 ;; Return value:  Size  Location     Type
 13496 ;;                  2    5[COMRAM] unsigned int 
 13497 ;; Registers used:
 13498 ;;		wreg, status,2, status,0
 13499 ;; Tracked objects:
 13500 ;;		On entry : 0/0
 13501 ;;		On exit  : 0/0
 13502 ;;		Unchanged: 0/0
 13503 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13504 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13505 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13506 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13507 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13508 ;;Total ram usage:        7 bytes
 13509 ;; Hardware stack levels used:    1
 13510 ;; This function calls:
 13511 ;;		Nothing
 13512 ;; This function is called by:
 13513 ;;		_printSortTimer
 13514 ;;		i2_printf
 13515 ;; This function uses a non-reentrant model
 13516 ;;
 13517                           
 13518                           	psect	text65
 13519  002546                     __ptext65:
 13520                           	opt stack 0
 13521  002546                     i2___lwdiv:
 13522                           	opt stack 20
 13523                           
 13524                           ;incstack = 0
 13525  002546  0E00               	movlw	0
 13526  002548  6E0B               	movwf	i2___lwdiv@quotient+1,c
 13527  00254A  0E00               	movlw	0
 13528  00254C  6E0A               	movwf	i2___lwdiv@quotient,c
 13529  00254E  5008               	movf	i2___lwdiv@divisor,w,c
 13530  002550  1009               	iorwf	i2___lwdiv@divisor+1,w,c
 13531  002552  B4D8               	btfsc	status,2,c
 13532  002554  D01C               	goto	i2l1732
 13533  002556  0E01               	movlw	1
 13534  002558  6E0C               	movwf	i2___lwdiv@counter,c
 13535  00255A  D004               	goto	i2l4243
 13536  00255C                     i2l4241:
 13537  00255C  90D8               	bcf	status,0,c
 13538  00255E  3608               	rlcf	i2___lwdiv@divisor,f,c
 13539  002560  3609               	rlcf	i2___lwdiv@divisor+1,f,c
 13540  002562  2A0C               	incf	i2___lwdiv@counter,f,c
 13541  002564                     i2l4243:
 13542  002564  AE09               	btfss	i2___lwdiv@divisor+1,7,c
 13543  002566  D7FA               	goto	i2l4241
 13544  002568                     i2l4245:
 13545  002568  90D8               	bcf	status,0,c
 13546  00256A  360A               	rlcf	i2___lwdiv@quotient,f,c
 13547  00256C  360B               	rlcf	i2___lwdiv@quotient+1,f,c
 13548  00256E  5008               	movf	i2___lwdiv@divisor,w,c
 13549  002570  5C06               	subwf	i2___lwdiv@dividend,w,c
 13550  002572  5009               	movf	i2___lwdiv@divisor+1,w,c
 13551  002574  5807               	subwfb	i2___lwdiv@dividend+1,w,c
 13552  002576  A0D8               	btfss	status,0,c
 13553  002578  D005               	goto	i2l4253
 13554  00257A  5008               	movf	i2___lwdiv@divisor,w,c
 13555  00257C  5E06               	subwf	i2___lwdiv@dividend,f,c
 13556  00257E  5009               	movf	i2___lwdiv@divisor+1,w,c
 13557  002580  5A07               	subwfb	i2___lwdiv@dividend+1,f,c
 13558  002582  800A               	bsf	i2___lwdiv@quotient,0,c
 13559  002584                     i2l4253:
 13560  002584  90D8               	bcf	status,0,c
 13561  002586  3209               	rrcf	i2___lwdiv@divisor+1,f,c
 13562  002588  3208               	rrcf	i2___lwdiv@divisor,f,c
 13563  00258A  2E0C               	decfsz	i2___lwdiv@counter,f,c
 13564  00258C  D7ED               	goto	i2l4245
 13565  00258E                     i2l1732:
 13566  00258E  C00A  F006         	movff	i2___lwdiv@quotient,?i2___lwdiv
 13567  002592  C00B  F007         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
 13568  002596  0012               	return		;funcret
 13569  002598                     __end_ofi2___lwdiv:
 13570                           	opt stack 0
 13571                           pclatu	equ	0xFFB
 13572                           pclath	equ	0xFFA
 13573                           tblptru	equ	0xFF8
 13574                           tblptrh	equ	0xFF7
 13575                           tblptrl	equ	0xFF6
 13576                           tablat	equ	0xFF5
 13577                           prodh	equ	0xFF4
 13578                           prodl	equ	0xFF3
 13579                           intcon	equ	0xFF2
 13580                           intcon2	equ	0xFF1
 13581                           intcon3	equ	0xFF0
 13582                           indf0	equ	0xFEF
 13583                           postinc0	equ	0xFEE
 13584                           fsr0h	equ	0xFEA
 13585                           fsr0l	equ	0xFE9
 13586                           wreg	equ	0xFE8
 13587                           postdec1	equ	0xFE5
 13588                           fsr1h	equ	0xFE2
 13589                           fsr1l	equ	0xFE1
 13590                           indf2	equ	0xFDF
 13591                           postinc2	equ	0xFDE
 13592                           postdec2	equ	0xFDD
 13593                           fsr2h	equ	0xFDA
 13594                           fsr2l	equ	0xFD9
 13595                           status	equ	0xFD8
 13596                           
 13597 ;; *************** function i2_lcdInst *****************
 13598 ;; Defined at:
 13599 ;;		line 14 in file "lcd.c"
 13600 ;; Parameters:    Size  Location     Type
 13601 ;;  data            1    wreg     unsigned char 
 13602 ;; Auto vars:     Size  Location     Type
 13603 ;;  data            1    2[COMRAM] unsigned char 
 13604 ;; Return value:  Size  Location     Type
 13605 ;;                  1    wreg      void 
 13606 ;; Registers used:
 13607 ;;		wreg, status,2, status,0, cstack
 13608 ;; Tracked objects:
 13609 ;;		On entry : 0/0
 13610 ;;		On exit  : 0/0
 13611 ;;		Unchanged: 0/0
 13612 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13613 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13614 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13615 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13616 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13617 ;;Total ram usage:        1 bytes
 13618 ;; Hardware stack levels used:    1
 13619 ;; Hardware stack levels required when called:    1
 13620 ;; This function calls:
 13621 ;;		i2_lcdNibble
 13622 ;; This function is called by:
 13623 ;;		_change_state_to_menu_11
 13624 ;;		_change_state_to_menu_23
 13625 ;;		_change_state_to_logs_11
 13626 ;;		_change_state_to_logs_12
 13627 ;;		_change_state_to_logs_22
 13628 ;;		_change_state_to_logs_23
 13629 ;;		_change_state_to_logs_33
 13630 ;;		_change_state_to_logs_34
 13631 ;;		_printSortTimer
 13632 ;;		i2_change_state_to_menu_start
 13633 ;;		i2_change_state_to_menu_12
 13634 ;;		i2_change_state_to_menu_22
 13635 ;;		i2_printRTC
 13636 ;; This function uses a non-reentrant model
 13637 ;;
 13638                           
 13639                           	psect	text66
 13640  002BCC                     __ptext66:
 13641                           	opt stack 0
 13642  002BCC                     i2_lcdInst:
 13643                           	opt stack 19
 13644                           
 13645                           ;incstack = 0
 13646                           ;i2lcdInst@data stored from wreg
 13647  002BCC  6E03               	movwf	i2lcdInst@data,c
 13648                           
 13649                           ;lcd.c: 15: LATDbits.LATD2 = 0;
 13650  002BCE  948C               	bcf	3980,2,c	;volatile
 13651                           
 13652                           ;lcd.c: 16: lcdNibble(data);
 13653  002BD0  5003               	movf	i2lcdInst@data,w,c
 13654  002BD2  EC78  F012         	call	i2_lcdNibble
 13655  002BD6  0012               	return		;funcret
 13656  002BD8                     __end_ofi2_lcdInst:
 13657                           	opt stack 0
 13658                           pclatu	equ	0xFFB
 13659                           pclath	equ	0xFFA
 13660                           tblptru	equ	0xFF8
 13661                           tblptrh	equ	0xFF7
 13662                           tblptrl	equ	0xFF6
 13663                           tablat	equ	0xFF5
 13664                           prodh	equ	0xFF4
 13665                           prodl	equ	0xFF3
 13666                           intcon	equ	0xFF2
 13667                           intcon2	equ	0xFF1
 13668                           intcon3	equ	0xFF0
 13669                           indf0	equ	0xFEF
 13670                           postinc0	equ	0xFEE
 13671                           fsr0h	equ	0xFEA
 13672                           fsr0l	equ	0xFE9
 13673                           wreg	equ	0xFE8
 13674                           postdec1	equ	0xFE5
 13675                           fsr1h	equ	0xFE2
 13676                           fsr1l	equ	0xFE1
 13677                           indf2	equ	0xFDF
 13678                           postinc2	equ	0xFDE
 13679                           postdec2	equ	0xFDD
 13680                           fsr2h	equ	0xFDA
 13681                           fsr2l	equ	0xFD9
 13682                           status	equ	0xFD8
 13683                           
 13684 ;; *************** function i2_lcdNibble *****************
 13685 ;; Defined at:
 13686 ;;		line 24 in file "lcd.c"
 13687 ;; Parameters:    Size  Location     Type
 13688 ;;  data            1    wreg     unsigned char 
 13689 ;; Auto vars:     Size  Location     Type
 13690 ;;  data            1    1[COMRAM] unsigned char 
 13691 ;;  lcdNibble       1    0[COMRAM] unsigned char 
 13692 ;; Return value:  Size  Location     Type
 13693 ;;                  1    wreg      void 
 13694 ;; Registers used:
 13695 ;;		wreg, status,2, status,0
 13696 ;; Tracked objects:
 13697 ;;		On entry : 0/0
 13698 ;;		On exit  : 0/0
 13699 ;;		Unchanged: 0/0
 13700 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13701 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13702 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13703 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13704 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13705 ;;Total ram usage:        2 bytes
 13706 ;; Hardware stack levels used:    1
 13707 ;; This function calls:
 13708 ;;		Nothing
 13709 ;; This function is called by:
 13710 ;;		i2_lcdInst
 13711 ;;		i2_putch
 13712 ;; This function uses a non-reentrant model
 13713 ;;
 13714                           
 13715                           	psect	text67
 13716  0024F0                     __ptext67:
 13717                           	opt stack 0
 13718  0024F0                     i2_lcdNibble:
 13719                           	opt stack 19
 13720                           
 13721                           ;incstack = 0
 13722                           ;i2lcdNibble@data stored from wreg
 13723  0024F0  6E02               	movwf	i2lcdNibble@data,c
 13724                           
 13725                           ;lcd.c: 26: char temp = data & 0xF0;
 13726  0024F2  5002               	movf	i2lcdNibble@data,w,c
 13727  0024F4  0BF0               	andlw	240
 13728  0024F6  6E01               	movwf	i2lcdNibble@temp,c
 13729                           
 13730                           ;lcd.c: 27: LATD = LATD & 0x0F;
 13731  0024F8  508C               	movf	3980,w,c	;volatile
 13732  0024FA  0B0F               	andlw	15
 13733  0024FC  6E8C               	movwf	3980,c	;volatile
 13734                           
 13735                           ;lcd.c: 28: LATD = temp | LATD;
 13736  0024FE  5001               	movf	i2lcdNibble@temp,w,c
 13737  002500  108C               	iorwf	3980,w,c	;volatile
 13738  002502  6E8C               	movwf	3980,c	;volatile
 13739                           
 13740                           ;lcd.c: 30: LATDbits.LATD3 = 1;
 13741  002504  868C               	bsf	3980,3,c	;volatile
 13742                           
 13743                           ;lcd.c: 31: _delay((unsigned long)((25)*(32000000/4000000.0)));
 13744  002506  0E42               	movlw	66
 13745  002508                     i2u540_47:
 13746  002508  2EE8               	decfsz	wreg,f,c
 13747  00250A  D7FE               	bra	i2u540_47
 13748  00250C  D000               	nop2	
 13749                           
 13750                           ;lcd.c: 32: LATDbits.LATD3 = 0;
 13751  00250E  968C               	bcf	3980,3,c	;volatile
 13752                           
 13753                           ;lcd.c: 33: _delay((unsigned long)((25)*(32000000/4000000.0)));
 13754  002510  0E42               	movlw	66
 13755  002512                     i2u541_47:
 13756  002512  2EE8               	decfsz	wreg,f,c
 13757  002514  D7FE               	bra	i2u541_47
 13758  002516  D000               	nop2	
 13759                           
 13760                           ;lcd.c: 35: data = data << 4;
 13761  002518  3802               	swapf	i2lcdNibble@data,w,c
 13762  00251A  0BF0               	andlw	240
 13763  00251C  6E02               	movwf	i2lcdNibble@data,c
 13764                           
 13765                           ;lcd.c: 37: temp = data & 0xF0;
 13766  00251E  5002               	movf	i2lcdNibble@data,w,c
 13767  002520  0BF0               	andlw	240
 13768  002522  6E01               	movwf	i2lcdNibble@temp,c
 13769                           
 13770                           ;lcd.c: 38: LATD = LATD & 0x0F;
 13771  002524  508C               	movf	3980,w,c	;volatile
 13772  002526  0B0F               	andlw	15
 13773  002528  6E8C               	movwf	3980,c	;volatile
 13774                           
 13775                           ;lcd.c: 39: LATD = temp | LATD;
 13776  00252A  5001               	movf	i2lcdNibble@temp,w,c
 13777  00252C  108C               	iorwf	3980,w,c	;volatile
 13778  00252E  6E8C               	movwf	3980,c	;volatile
 13779                           
 13780                           ;lcd.c: 41: LATDbits.LATD3 = 1;
 13781  002530  868C               	bsf	3980,3,c	;volatile
 13782                           
 13783                           ;lcd.c: 42: _delay((unsigned long)((25)*(32000000/4000000.0)));
 13784  002532  0E42               	movlw	66
 13785  002534                     i2u542_47:
 13786  002534  2EE8               	decfsz	wreg,f,c
 13787  002536  D7FE               	bra	i2u542_47
 13788  002538  D000               	nop2	
 13789                           
 13790                           ;lcd.c: 43: LATDbits.LATD3 = 0;
 13791  00253A  968C               	bcf	3980,3,c	;volatile
 13792                           
 13793                           ;lcd.c: 44: _delay((unsigned long)((25)*(32000000/4000000.0)));
 13794  00253C  0E42               	movlw	66
 13795  00253E                     i2u543_47:
 13796  00253E  2EE8               	decfsz	wreg,f,c
 13797  002540  D7FE               	bra	i2u543_47
 13798  002542  D000               	nop2	
 13799  002544  0012               	return		;funcret
 13800  002546                     __end_ofi2_lcdNibble:
 13801                           	opt stack 0
 13802                           pclatu	equ	0xFFB
 13803                           pclath	equ	0xFFA
 13804                           tblptru	equ	0xFF8
 13805                           tblptrh	equ	0xFF7
 13806                           tblptrl	equ	0xFF6
 13807                           tablat	equ	0xFF5
 13808                           prodh	equ	0xFF4
 13809                           prodl	equ	0xFF3
 13810                           intcon	equ	0xFF2
 13811                           intcon2	equ	0xFF1
 13812                           intcon3	equ	0xFF0
 13813                           indf0	equ	0xFEF
 13814                           postinc0	equ	0xFEE
 13815                           fsr0h	equ	0xFEA
 13816                           fsr0l	equ	0xFE9
 13817                           wreg	equ	0xFE8
 13818                           postdec1	equ	0xFE5
 13819                           fsr1h	equ	0xFE2
 13820                           fsr1l	equ	0xFE1
 13821                           indf2	equ	0xFDF
 13822                           postinc2	equ	0xFDE
 13823                           postdec2	equ	0xFDD
 13824                           fsr2h	equ	0xFDA
 13825                           fsr2l	equ	0xFD9
 13826                           status	equ	0xFD8
 13827                           
 13828 ;; *************** function i2_getRTC *****************
 13829 ;; Defined at:
 13830 ;;		line 43 in file "RTC.c"
 13831 ;; Parameters:    Size  Location     Type
 13832 ;;		None
 13833 ;; Auto vars:     Size  Location     Type
 13834 ;;  getRTC          2    3[COMRAM] int 
 13835 ;; Return value:  Size  Location     Type
 13836 ;;                  1    wreg      void 
 13837 ;; Registers used:
 13838 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13839 ;; Tracked objects:
 13840 ;;		On entry : 0/0
 13841 ;;		On exit  : 0/0
 13842 ;;		Unchanged: 0/0
 13843 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13844 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13845 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13846 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13847 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13848 ;;Total ram usage:        2 bytes
 13849 ;; Hardware stack levels used:    1
 13850 ;; Hardware stack levels required when called:    2
 13851 ;; This function calls:
 13852 ;;		i2_I2C_Master_Read
 13853 ;;		i2_I2C_Master_Start
 13854 ;;		i2_I2C_Master_Stop
 13855 ;;		i2_I2C_Master_Write
 13856 ;; This function is called by:
 13857 ;;		_printSortTimer
 13858 ;;		i2_printRTC
 13859 ;; This function uses a non-reentrant model
 13860 ;;
 13861                           
 13862                           	psect	text68
 13863  0022A4                     __ptext68:
 13864                           	opt stack 0
 13865  0022A4                     i2_getRTC:
 13866                           	opt stack 18
 13867                           
 13868                           ;RTC.c: 47: I2C_Master_Start();
 13869                           
 13870                           ;incstack = 0
 13871  0022A4  EC02  F016         	call	i2_I2C_Master_Start	;wreg free
 13872                           
 13873                           ;RTC.c: 48: I2C_Master_Write(0b11010000);
 13874  0022A8  0E00               	movlw	0
 13875  0022AA  6E03               	movwf	i2I2C_Master_Write@d+1,c
 13876  0022AC  0ED0               	movlw	208
 13877  0022AE  6E02               	movwf	i2I2C_Master_Write@d,c
 13878  0022B0  ECF1  F015         	call	i2_I2C_Master_Write	;wreg free
 13879                           
 13880                           ;RTC.c: 49: I2C_Master_Write(0x00);
 13881  0022B4  0E00               	movlw	0
 13882  0022B6  6E03               	movwf	i2I2C_Master_Write@d+1,c
 13883  0022B8  0E00               	movlw	0
 13884  0022BA  6E02               	movwf	i2I2C_Master_Write@d,c
 13885  0022BC  ECF1  F015         	call	i2_I2C_Master_Write	;wreg free
 13886                           
 13887                           ;RTC.c: 50: I2C_Master_Stop();
 13888  0022C0  ECFE  F015         	call	i2_I2C_Master_Stop	;wreg free
 13889                           
 13890                           ;RTC.c: 53: I2C_Master_Start();
 13891  0022C4  EC02  F016         	call	i2_I2C_Master_Start	;wreg free
 13892                           
 13893                           ;RTC.c: 54: I2C_Master_Write(0b11010001);
 13894  0022C8  0E00               	movlw	0
 13895  0022CA  6E03               	movwf	i2I2C_Master_Write@d+1,c
 13896  0022CC  0ED1               	movlw	209
 13897  0022CE  6E02               	movwf	i2I2C_Master_Write@d,c
 13898  0022D0  ECF1  F015         	call	i2_I2C_Master_Write	;wreg free
 13899                           
 13900                           ;RTC.c: 55: for(int i = 0; i < 6; i++){
 13901  0022D4  0E00               	movlw	0
 13902  0022D6  6E05               	movwf	i2getRTC@i+1,c
 13903  0022D8  0E00               	movlw	0
 13904  0022DA  6E04               	movwf	i2getRTC@i,c
 13905  0022DC                     i2l4477:
 13906  0022DC  BE05               	btfsc	i2getRTC@i+1,7,c
 13907  0022DE  D006               	goto	i2l4481
 13908  0022E0  5005               	movf	i2getRTC@i+1,w,c
 13909  0022E2  E111               	bnz	i2l4487
 13910  0022E4  0E06               	movlw	6
 13911  0022E6  5C04               	subwf	i2getRTC@i,w,c
 13912  0022E8  B0D8               	btfsc	status,0,c
 13913  0022EA  D00D               	goto	i2l4487
 13914  0022EC                     i2l4481:
 13915                           
 13916                           ;RTC.c: 56: time[i] = I2C_Master_Read(1);
 13917  0022EC  0EDC               	movlw	low _time
 13918  0022EE  2404               	addwf	i2getRTC@i,w,c
 13919  0022F0  6ED9               	movwf	fsr2l,c
 13920  0022F2  0E00               	movlw	high _time
 13921  0022F4  2005               	addwfc	i2getRTC@i+1,w,c
 13922  0022F6  6EDA               	movwf	fsr2h,c
 13923  0022F8  0E01               	movlw	1
 13924  0022FA  EC3E  F015         	call	i2_I2C_Master_Read
 13925  0022FE  6EDF               	movwf	indf2,c
 13926  002300  4A04               	infsnz	i2getRTC@i,f,c
 13927  002302  2A05               	incf	i2getRTC@i+1,f,c
 13928  002304  D7EB               	goto	i2l4477
 13929  002306                     i2l4487:
 13930                           
 13931                           ;RTC.c: 57: }
 13932                           ;RTC.c: 58: time[6] = I2C_Master_Read(0);
 13933  002306  0E00               	movlw	0
 13934  002308  EC3E  F015         	call	i2_I2C_Master_Read
 13935  00230C  0100               	movlb	0	; () banked
 13936  00230E  6FE2               	movwf	(_time+6)& (0+255),b
 13937                           
 13938                           ;RTC.c: 59: I2C_Master_Stop();
 13939  002310  ECFE  F015         	call	i2_I2C_Master_Stop	;wreg free
 13940  002314  0012               	return		;funcret
 13941  002316                     __end_ofi2_getRTC:
 13942                           	opt stack 0
 13943                           pclatu	equ	0xFFB
 13944                           pclath	equ	0xFFA
 13945                           tblptru	equ	0xFF8
 13946                           tblptrh	equ	0xFF7
 13947                           tblptrl	equ	0xFF6
 13948                           tablat	equ	0xFF5
 13949                           prodh	equ	0xFF4
 13950                           prodl	equ	0xFF3
 13951                           intcon	equ	0xFF2
 13952                           intcon2	equ	0xFF1
 13953                           intcon3	equ	0xFF0
 13954                           indf0	equ	0xFEF
 13955                           postinc0	equ	0xFEE
 13956                           fsr0h	equ	0xFEA
 13957                           fsr0l	equ	0xFE9
 13958                           wreg	equ	0xFE8
 13959                           postdec1	equ	0xFE5
 13960                           fsr1h	equ	0xFE2
 13961                           fsr1l	equ	0xFE1
 13962                           indf2	equ	0xFDF
 13963                           postinc2	equ	0xFDE
 13964                           postdec2	equ	0xFDD
 13965                           fsr2h	equ	0xFDA
 13966                           fsr2l	equ	0xFD9
 13967                           status	equ	0xFD8
 13968                           
 13969 ;; *************** function i2_I2C_Master_Write *****************
 13970 ;; Defined at:
 13971 ;;		line 48 in file "I2C.c"
 13972 ;; Parameters:    Size  Location     Type
 13973 ;;  d               2    1[COMRAM] unsigned int 
 13974 ;; Auto vars:     Size  Location     Type
 13975 ;;		None
 13976 ;; Return value:  Size  Location     Type
 13977 ;;                  1    wreg      void 
 13978 ;; Registers used:
 13979 ;;		wreg, status,2, status,0, cstack
 13980 ;; Tracked objects:
 13981 ;;		On entry : 0/0
 13982 ;;		On exit  : 0/0
 13983 ;;		Unchanged: 0/0
 13984 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13985 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13986 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13987 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13988 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13989 ;;Total ram usage:        2 bytes
 13990 ;; Hardware stack levels used:    1
 13991 ;; Hardware stack levels required when called:    1
 13992 ;; This function calls:
 13993 ;;		i2_I2C_Master_Wait
 13994 ;; This function is called by:
 13995 ;;		i2_getRTC
 13996 ;; This function uses a non-reentrant model
 13997 ;;
 13998                           
 13999                           	psect	text69
 14000  002BE2                     __ptext69:
 14001                           	opt stack 0
 14002  002BE2                     i2_I2C_Master_Write:
 14003                           	opt stack 18
 14004                           
 14005                           ;I2C.c: 50: I2C_Master_Wait();
 14006                           
 14007                           ;incstack = 0
 14008  002BE2  ECC7  F015         	call	i2_I2C_Master_Wait	;wreg free
 14009                           
 14010                           ;I2C.c: 51: SSPBUF = d;
 14011  002BE6  C002  FFC9         	movff	i2I2C_Master_Write@d,4041	;volatile
 14012  002BEA  0012               	return		;funcret
 14013  002BEC                     __end_ofi2_I2C_Master_Write:
 14014                           	opt stack 0
 14015                           pclatu	equ	0xFFB
 14016                           pclath	equ	0xFFA
 14017                           tblptru	equ	0xFF8
 14018                           tblptrh	equ	0xFF7
 14019                           tblptrl	equ	0xFF6
 14020                           tablat	equ	0xFF5
 14021                           prodh	equ	0xFF4
 14022                           prodl	equ	0xFF3
 14023                           intcon	equ	0xFF2
 14024                           intcon2	equ	0xFF1
 14025                           intcon3	equ	0xFF0
 14026                           indf0	equ	0xFEF
 14027                           postinc0	equ	0xFEE
 14028                           fsr0h	equ	0xFEA
 14029                           fsr0l	equ	0xFE9
 14030                           wreg	equ	0xFE8
 14031                           postdec1	equ	0xFE5
 14032                           fsr1h	equ	0xFE2
 14033                           fsr1l	equ	0xFE1
 14034                           indf2	equ	0xFDF
 14035                           postinc2	equ	0xFDE
 14036                           postdec2	equ	0xFDD
 14037                           fsr2h	equ	0xFDA
 14038                           fsr2l	equ	0xFD9
 14039                           status	equ	0xFD8
 14040                           
 14041 ;; *************** function i2_I2C_Master_Stop *****************
 14042 ;; Defined at:
 14043 ;;		line 42 in file "I2C.c"
 14044 ;; Parameters:    Size  Location     Type
 14045 ;;		None
 14046 ;; Auto vars:     Size  Location     Type
 14047 ;;		None
 14048 ;; Return value:  Size  Location     Type
 14049 ;;                  1    wreg      void 
 14050 ;; Registers used:
 14051 ;;		wreg, status,2, status,0, cstack
 14052 ;; Tracked objects:
 14053 ;;		On entry : 0/0
 14054 ;;		On exit  : 0/0
 14055 ;;		Unchanged: 0/0
 14056 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14057 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14058 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14059 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14060 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14061 ;;Total ram usage:        0 bytes
 14062 ;; Hardware stack levels used:    1
 14063 ;; Hardware stack levels required when called:    1
 14064 ;; This function calls:
 14065 ;;		i2_I2C_Master_Wait
 14066 ;; This function is called by:
 14067 ;;		i2_getRTC
 14068 ;; This function uses a non-reentrant model
 14069 ;;
 14070                           
 14071                           	psect	text70
 14072  002BFC                     __ptext70:
 14073                           	opt stack 0
 14074  002BFC                     i2_I2C_Master_Stop:
 14075                           	opt stack 18
 14076                           
 14077                           ;I2C.c: 44: I2C_Master_Wait();
 14078                           
 14079                           ;incstack = 0
 14080  002BFC  ECC7  F015         	call	i2_I2C_Master_Wait	;wreg free
 14081                           
 14082                           ;I2C.c: 45: PEN = 1;
 14083  002C00  84C5               	bsf	4037,2,c	;volatile
 14084  002C02  0012               	return		;funcret
 14085  002C04                     __end_ofi2_I2C_Master_Stop:
 14086                           	opt stack 0
 14087                           pclatu	equ	0xFFB
 14088                           pclath	equ	0xFFA
 14089                           tblptru	equ	0xFF8
 14090                           tblptrh	equ	0xFF7
 14091                           tblptrl	equ	0xFF6
 14092                           tablat	equ	0xFF5
 14093                           prodh	equ	0xFF4
 14094                           prodl	equ	0xFF3
 14095                           intcon	equ	0xFF2
 14096                           intcon2	equ	0xFF1
 14097                           intcon3	equ	0xFF0
 14098                           indf0	equ	0xFEF
 14099                           postinc0	equ	0xFEE
 14100                           fsr0h	equ	0xFEA
 14101                           fsr0l	equ	0xFE9
 14102                           wreg	equ	0xFE8
 14103                           postdec1	equ	0xFE5
 14104                           fsr1h	equ	0xFE2
 14105                           fsr1l	equ	0xFE1
 14106                           indf2	equ	0xFDF
 14107                           postinc2	equ	0xFDE
 14108                           postdec2	equ	0xFDD
 14109                           fsr2h	equ	0xFDA
 14110                           fsr2l	equ	0xFD9
 14111                           status	equ	0xFD8
 14112                           
 14113 ;; *************** function i2_I2C_Master_Start *****************
 14114 ;; Defined at:
 14115 ;;		line 30 in file "I2C.c"
 14116 ;; Parameters:    Size  Location     Type
 14117 ;;		None
 14118 ;; Auto vars:     Size  Location     Type
 14119 ;;		None
 14120 ;; Return value:  Size  Location     Type
 14121 ;;                  1    wreg      void 
 14122 ;; Registers used:
 14123 ;;		wreg, status,2, status,0, cstack
 14124 ;; Tracked objects:
 14125 ;;		On entry : 0/0
 14126 ;;		On exit  : 0/0
 14127 ;;		Unchanged: 0/0
 14128 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14129 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14130 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14131 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14132 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14133 ;;Total ram usage:        0 bytes
 14134 ;; Hardware stack levels used:    1
 14135 ;; Hardware stack levels required when called:    1
 14136 ;; This function calls:
 14137 ;;		i2_I2C_Master_Wait
 14138 ;; This function is called by:
 14139 ;;		i2_getRTC
 14140 ;; This function uses a non-reentrant model
 14141 ;;
 14142                           
 14143                           	psect	text71
 14144  002C04                     __ptext71:
 14145                           	opt stack 0
 14146  002C04                     i2_I2C_Master_Start:
 14147                           	opt stack 18
 14148                           
 14149                           ;I2C.c: 32: I2C_Master_Wait();
 14150                           
 14151                           ;incstack = 0
 14152  002C04  ECC7  F015         	call	i2_I2C_Master_Wait	;wreg free
 14153                           
 14154                           ;I2C.c: 33: SEN = 1;
 14155  002C08  80C5               	bsf	4037,0,c	;volatile
 14156  002C0A  0012               	return		;funcret
 14157  002C0C                     __end_ofi2_I2C_Master_Start:
 14158                           	opt stack 0
 14159                           pclatu	equ	0xFFB
 14160                           pclath	equ	0xFFA
 14161                           tblptru	equ	0xFF8
 14162                           tblptrh	equ	0xFF7
 14163                           tblptrl	equ	0xFF6
 14164                           tablat	equ	0xFF5
 14165                           prodh	equ	0xFF4
 14166                           prodl	equ	0xFF3
 14167                           intcon	equ	0xFF2
 14168                           intcon2	equ	0xFF1
 14169                           intcon3	equ	0xFF0
 14170                           indf0	equ	0xFEF
 14171                           postinc0	equ	0xFEE
 14172                           fsr0h	equ	0xFEA
 14173                           fsr0l	equ	0xFE9
 14174                           wreg	equ	0xFE8
 14175                           postdec1	equ	0xFE5
 14176                           fsr1h	equ	0xFE2
 14177                           fsr1l	equ	0xFE1
 14178                           indf2	equ	0xFDF
 14179                           postinc2	equ	0xFDE
 14180                           postdec2	equ	0xFDD
 14181                           fsr2h	equ	0xFDA
 14182                           fsr2l	equ	0xFD9
 14183                           status	equ	0xFD8
 14184                           
 14185 ;; *************** function i2_I2C_Master_Read *****************
 14186 ;; Defined at:
 14187 ;;		line 54 in file "I2C.c"
 14188 ;; Parameters:    Size  Location     Type
 14189 ;;  a               1    wreg     unsigned char 
 14190 ;; Auto vars:     Size  Location     Type
 14191 ;;  a               1    1[COMRAM] unsigned char 
 14192 ;;  I2C_Master_R    1    2[COMRAM] unsigned char 
 14193 ;; Return value:  Size  Location     Type
 14194 ;;                  1    wreg      unsigned char 
 14195 ;; Registers used:
 14196 ;;		wreg, status,2, status,0, cstack
 14197 ;; Tracked objects:
 14198 ;;		On entry : 0/0
 14199 ;;		On exit  : 0/0
 14200 ;;		Unchanged: 0/0
 14201 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14202 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14203 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14204 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14205 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14206 ;;Total ram usage:        2 bytes
 14207 ;; Hardware stack levels used:    1
 14208 ;; Hardware stack levels required when called:    1
 14209 ;; This function calls:
 14210 ;;		i2_I2C_Master_Wait
 14211 ;; This function is called by:
 14212 ;;		i2_getRTC
 14213 ;; This function uses a non-reentrant model
 14214 ;;
 14215                           
 14216                           	psect	text72
 14217  002A7C                     __ptext72:
 14218                           	opt stack 0
 14219  002A7C                     i2_I2C_Master_Read:
 14220                           	opt stack 18
 14221                           
 14222                           ;incstack = 0
 14223                           ;i2I2C_Master_Read@a stored from wreg
 14224  002A7C  6E02               	movwf	i2I2C_Master_Read@a,c
 14225                           
 14226                           ;I2C.c: 56: unsigned char temp;
 14227                           ;I2C.c: 57: I2C_Master_Wait();
 14228  002A7E  ECC7  F015         	call	i2_I2C_Master_Wait	;wreg free
 14229                           
 14230                           ;I2C.c: 58: RCEN = 1;
 14231  002A82  86C5               	bsf	4037,3,c	;volatile
 14232                           
 14233                           ;I2C.c: 59: I2C_Master_Wait();
 14234  002A84  ECC7  F015         	call	i2_I2C_Master_Wait	;wreg free
 14235                           
 14236                           ;I2C.c: 60: temp = SSPBUF;
 14237  002A88  CFC9 F003          	movff	4041,i2I2C_Master_Read@temp	;volatile
 14238                           
 14239                           ;I2C.c: 61: I2C_Master_Wait();
 14240  002A8C  ECC7  F015         	call	i2_I2C_Master_Wait	;wreg free
 14241                           
 14242                           ;I2C.c: 62: ACKDT = (a)?0:1;
 14243  002A90  5002               	movf	i2I2C_Master_Read@a,w,c
 14244  002A92  A4D8               	btfss	status,2,c
 14245  002A94  D002               	goto	i2u265_40
 14246  002A96  8AC5               	bsf	4037,5,c	;volatile
 14247  002A98  D001               	goto	i2l4207
 14248  002A9A                     i2u265_40:
 14249  002A9A  9AC5               	bcf	4037,5,c	;volatile
 14250  002A9C                     i2l4207:
 14251                           
 14252                           ;I2C.c: 63: ACKEN = 1;
 14253  002A9C  88C5               	bsf	4037,4,c	;volatile
 14254                           
 14255                           ;I2C.c: 64: return temp;
 14256  002A9E  5003               	movf	i2I2C_Master_Read@temp,w,c
 14257  002AA0  0012               	return	
 14258  002AA2                     __end_ofi2_I2C_Master_Read:
 14259                           	opt stack 0
 14260                           pclatu	equ	0xFFB
 14261                           pclath	equ	0xFFA
 14262                           tblptru	equ	0xFF8
 14263                           tblptrh	equ	0xFF7
 14264                           tblptrl	equ	0xFF6
 14265                           tablat	equ	0xFF5
 14266                           prodh	equ	0xFF4
 14267                           prodl	equ	0xFF3
 14268                           intcon	equ	0xFF2
 14269                           intcon2	equ	0xFF1
 14270                           intcon3	equ	0xFF0
 14271                           indf0	equ	0xFEF
 14272                           postinc0	equ	0xFEE
 14273                           fsr0h	equ	0xFEA
 14274                           fsr0l	equ	0xFE9
 14275                           wreg	equ	0xFE8
 14276                           postdec1	equ	0xFE5
 14277                           fsr1h	equ	0xFE2
 14278                           fsr1l	equ	0xFE1
 14279                           indf2	equ	0xFDF
 14280                           postinc2	equ	0xFDE
 14281                           postdec2	equ	0xFDD
 14282                           fsr2h	equ	0xFDA
 14283                           fsr2l	equ	0xFD9
 14284                           status	equ	0xFD8
 14285                           
 14286 ;; *************** function i2_I2C_Master_Wait *****************
 14287 ;; Defined at:
 14288 ;;		line 25 in file "I2C.c"
 14289 ;; Parameters:    Size  Location     Type
 14290 ;;		None
 14291 ;; Auto vars:     Size  Location     Type
 14292 ;;		None
 14293 ;; Return value:  Size  Location     Type
 14294 ;;                  1    wreg      void 
 14295 ;; Registers used:
 14296 ;;		wreg, status,2, status,0
 14297 ;; Tracked objects:
 14298 ;;		On entry : 0/0
 14299 ;;		On exit  : 0/0
 14300 ;;		Unchanged: 0/0
 14301 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14302 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14303 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14304 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14305 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14306 ;;Total ram usage:        1 bytes
 14307 ;; Hardware stack levels used:    1
 14308 ;; This function calls:
 14309 ;;		Nothing
 14310 ;; This function is called by:
 14311 ;;		i2_I2C_Master_Start
 14312 ;;		i2_I2C_Master_Stop
 14313 ;;		i2_I2C_Master_Write
 14314 ;;		i2_I2C_Master_Read
 14315 ;; This function uses a non-reentrant model
 14316 ;;
 14317                           
 14318                           	psect	text73
 14319  002B8E                     __ptext73:
 14320                           	opt stack 0
 14321  002B8E                     i2_I2C_Master_Wait:
 14322                           	opt stack 18
 14323  002B8E                     i2l168:
 14324  002B8E  B4C7               	btfsc	4039,2,c	;volatile
 14325  002B90  D7FE               	goto	i2l168
 14326  002B92  CFC5 F001          	movff	4037,??i2_I2C_Master_Wait	;volatile
 14327  002B96  0E1F               	movlw	31
 14328  002B98  1601               	andwf	??i2_I2C_Master_Wait,f,c
 14329  002B9A  B4D8               	btfsc	status,2,c
 14330  002B9C  0012               	return	
 14331  002B9E  D7F7               	goto	i2l168
 14332  002BA0                     __end_ofi2_I2C_Master_Wait:
 14333                           	opt stack 0
 14334                           pclatu	equ	0xFFB
 14335                           pclath	equ	0xFFA
 14336                           tblptru	equ	0xFF8
 14337                           tblptrh	equ	0xFF7
 14338                           tblptrl	equ	0xFF6
 14339                           tablat	equ	0xFF5
 14340                           prodh	equ	0xFF4
 14341                           prodl	equ	0xFF3
 14342                           intcon	equ	0xFF2
 14343                           intcon2	equ	0xFF1
 14344                           intcon3	equ	0xFF0
 14345                           indf0	equ	0xFEF
 14346                           postinc0	equ	0xFEE
 14347                           fsr0h	equ	0xFEA
 14348                           fsr0l	equ	0xFE9
 14349                           wreg	equ	0xFE8
 14350                           postdec1	equ	0xFE5
 14351                           fsr1h	equ	0xFE2
 14352                           fsr1l	equ	0xFE1
 14353                           indf2	equ	0xFDF
 14354                           postinc2	equ	0xFDE
 14355                           postdec2	equ	0xFDD
 14356                           fsr2h	equ	0xFDA
 14357                           fsr2l	equ	0xFD9
 14358                           status	equ	0xFD8
 14359                           pclatu	equ	0xFFB
 14360                           pclath	equ	0xFFA
 14361                           tblptru	equ	0xFF8
 14362                           tblptrh	equ	0xFF7
 14363                           tblptrl	equ	0xFF6
 14364                           tablat	equ	0xFF5
 14365                           prodh	equ	0xFF4
 14366                           prodl	equ	0xFF3
 14367                           intcon	equ	0xFF2
 14368                           intcon2	equ	0xFF1
 14369                           intcon3	equ	0xFF0
 14370                           indf0	equ	0xFEF
 14371                           postinc0	equ	0xFEE
 14372                           fsr0h	equ	0xFEA
 14373                           fsr0l	equ	0xFE9
 14374                           wreg	equ	0xFE8
 14375                           postdec1	equ	0xFE5
 14376                           fsr1h	equ	0xFE2
 14377                           fsr1l	equ	0xFE1
 14378                           indf2	equ	0xFDF
 14379                           postinc2	equ	0xFDE
 14380                           postdec2	equ	0xFDD
 14381                           fsr2h	equ	0xFDA
 14382                           fsr2l	equ	0xFD9
 14383                           status	equ	0xFD8
 14384                           
 14385                           	psect	rparam
 14386  0000                     pclatu	equ	0xFFB
 14387                           pclath	equ	0xFFA
 14388                           tblptru	equ	0xFF8
 14389                           tblptrh	equ	0xFF7
 14390                           tblptrl	equ	0xFF6
 14391                           tablat	equ	0xFF5
 14392                           prodh	equ	0xFF4
 14393                           prodl	equ	0xFF3
 14394                           intcon	equ	0xFF2
 14395                           intcon2	equ	0xFF1
 14396                           intcon3	equ	0xFF0
 14397                           indf0	equ	0xFEF
 14398                           postinc0	equ	0xFEE
 14399                           fsr0h	equ	0xFEA
 14400                           fsr0l	equ	0xFE9
 14401                           wreg	equ	0xFE8
 14402                           postdec1	equ	0xFE5
 14403                           fsr1h	equ	0xFE2
 14404                           fsr1l	equ	0xFE1
 14405                           indf2	equ	0xFDF
 14406                           postinc2	equ	0xFDE
 14407                           postdec2	equ	0xFDD
 14408                           fsr2h	equ	0xFDA
 14409                           fsr2l	equ	0xFD9
 14410                           status	equ	0xFD8
 14411                           
 14412                           	psect	temp
 14413  00007C                     btemp:
 14414                           	opt stack 0
 14415  00007C                     	ds	1
 14416  0000                     int$flags	set	btemp
 14417                           pclatu	equ	0xFFB
 14418                           pclath	equ	0xFFA
 14419                           tblptru	equ	0xFF8
 14420                           tblptrh	equ	0xFF7
 14421                           tblptrl	equ	0xFF6
 14422                           tablat	equ	0xFF5
 14423                           prodh	equ	0xFF4
 14424                           prodl	equ	0xFF3
 14425                           intcon	equ	0xFF2
 14426                           intcon2	equ	0xFF1
 14427                           intcon3	equ	0xFF0
 14428                           indf0	equ	0xFEF
 14429                           postinc0	equ	0xFEE
 14430                           fsr0h	equ	0xFEA
 14431                           fsr0l	equ	0xFE9
 14432                           wreg	equ	0xFE8
 14433                           postdec1	equ	0xFE5
 14434                           fsr1h	equ	0xFE2
 14435                           fsr1l	equ	0xFE1
 14436                           indf2	equ	0xFDF
 14437                           postinc2	equ	0xFDE
 14438                           postdec2	equ	0xFDD
 14439                           fsr2h	equ	0xFDA
 14440                           fsr2l	equ	0xFD9
 14441                           status	equ	0xFD8


Data Sizes:
    Strings     558
    Constant    27
    Data        12
    BSS         81
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     90     123
    BANK0           128     84     126
    BANK1           256      0      18
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    strcpy@from	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_47(CODE[4]), STR_46(CODE[4]), STR_45(CODE[4]), STR_44(CODE[4]), 
		 -> STR_43(CODE[4]), STR_42(CODE[4]), STR_41(CODE[4]), STR_40(CODE[4]), 
		 -> STR_39(CODE[4]), STR_38(CODE[4]), STR_37(CODE[4]), STR_36(CODE[4]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_51(CODE[7]), printRTC@month(BANK0[4]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 24
		 -> STR_50(CODE[21]), STR_49(CODE[11]), STR_48(CODE[24]), STR_35(CODE[17]), 
		 -> STR_34(CODE[17]), STR_33(CODE[17]), STR_32(CODE[17]), STR_31(CODE[17]), 
		 -> STR_30(CODE[17]), STR_29(CODE[17]), STR_28(CODE[17]), STR_27(CODE[17]), 
		 -> STR_26(CODE[17]), STR_25(CODE[17]), STR_24(CODE[17]), STR_23(CODE[17]), 
		 -> STR_22(CODE[17]), STR_21(CODE[17]), STR_20(CODE[17]), STR_19(CODE[17]), 
		 -> STR_18(CODE[17]), STR_17(CODE[17]), STR_16(CODE[17]), STR_15(CODE[17]), 
		 -> STR_14(CODE[3]), STR_13(CODE[17]), STR_12(CODE[17]), STR_11(CODE[17]), 
		 -> STR_10(CODE[17]), STR_9(CODE[17]), STR_8(CODE[18]), STR_7(CODE[10]), 
		 -> STR_6(CODE[17]), STR_5(CODE[7]), STR_4(CODE[17]), STR_3(CODE[18]), 
		 -> STR_2(CODE[21]), STR_1(CODE[17]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _handler in COMRAM

    _handler->_printSortTimer
    i2_change_state_to_menu_start->i2_printRTC
    i2_printRTC->i2_printf
    i2_change_state_to_menu_22->i2_printf
    i2_change_state_to_menu_12->i2_printf
    _change_state_to_menu_23->i2_printf
    _change_state_to_menu_11->i2_printf
    _change_state_to_logs_34->i2_printf
    _change_state_to_logs_33->i2_printf
    _change_state_to_logs_23->i2_printf
    _change_state_to_logs_22->i2_printf
    _change_state_to_logs_12->i2_printf
    _change_state_to_logs_11->i2_printf
    _printSortTimer->i2_printf
    i2_printf->i2___lwdiv
    i2_putch->i2_lcdNibble
    i2___lwdiv->i2___lwmod
    i2_lcdInst->i2_lcdNibble
    i2_getRTC->i2_I2C_Master_Read
    i2_getRTC->i2_I2C_Master_Write
    i2_I2C_Master_Write->i2_I2C_Master_Wait
    i2_I2C_Master_Stop->i2_I2C_Master_Wait
    i2_I2C_Master_Start->i2_I2C_Master_Wait
    i2_I2C_Master_Read->i2_I2C_Master_Wait

Critical Paths under _main in BANK0

    _main->_UI
    _sort->_Loading
    _Loading->_initSortTimer
    _initSortTimer->_getRTC
    _initServos->_updateServoPosition
    _ID->_readMAG
    _readMAG->_readADC
    _loadRTC->_I2C_Master_Init
    _I2C_Master_Init->___lldiv
    _change_state_to_menu_start->_printRTC
    _initLCD->_lcdInst
    _UI->_printRTC
    _printRTC->_printf
    _getRTC->_I2C_Master_Read
    _getRTC->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _change_state_to_menu_22->_printf
    _change_state_to_menu_12->_printf
    _printf->___awdiv
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _lcdInst->_lcdNibble
    ___awdiv->___awmod

Critical Paths under _handler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _handler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _handler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _handler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _handler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _handler in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _handler in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _handler in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _handler in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _handler in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _handler in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _handler in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _handler in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _handler in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _handler in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _handler in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   40659
                         _PortTestA5
                                 _UI
                            _initLCD
                           _initTime
                             _initUI
                      _machineConfig
                               _sort
                        _stopSignals
 ---------------------------------------------------------------------------------
 (1) _stopSignals                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _sort                                                 0     0      0    3031
                       _Distribution
                                 _ID
                            _Loading
 ---------------------------------------------------------------------------------
 (2) _Loading                                              9     9      0    2936
                                             10 BANK0      9     9      0
                          _initFlags
                         _initServos
                      _initSortTimer
                            _lcdInst
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (3) _initSortTimer                                        5     5      0     631
                                              5 BANK0      5     5      0
                             _getRTC
 ---------------------------------------------------------------------------------
 (3) _initServos                                           0     0      0     901
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (3) _updateServoPosition                                  8     4      4     901
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (3) _initFlags                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ID                                                   8     8      0      95
                                              6 BANK0      8     8      0
                            _readMAG
 ---------------------------------------------------------------------------------
 (3) _readMAG                                              4     4      0      45
                                              2 BANK0      4     4      0
                            _readADC
 ---------------------------------------------------------------------------------
 (4) _readADC                                              2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _Distribution                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _machineConfig                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initUI                                               0     0      0   13210
         _change_state_to_menu_start
                            _loadRTC
 ---------------------------------------------------------------------------------
 (2) _loadRTC                                              3     3      0     850
                                             21 BANK0      3     3      0
                    _I2C_Master_Init
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Init                                      8     4      4     376
                                             13 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     290
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_start                           0     0      0   12360
                            _lcdInst
                           _printRTC
                             _printf
 ---------------------------------------------------------------------------------
 (1) _initTime                                             7     1      6     538
                                              0 BANK0      7     1      6
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                              3 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _UI                                                  16    16      0   23745
                                             68 BANK0     16    16      0
                            ___awdiv
                            ___awmod
            _change_state_to_menu_12
            _change_state_to_menu_22
                            _lcdInst
                           _printRTC
                             _printf
 ---------------------------------------------------------------------------------
 (3) _printRTC                                            25    25      0    7532
                                             43 BANK0     25    25      0
                             _getRTC
                            _lcdInst
                             _printf
                             _strcpy
 ---------------------------------------------------------------------------------
 (4) _strcpy                                               6     2      4    1611
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) _getRTC                                               2     2      0     519
                                              3 BANK0      2     2      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Write                                     2     0      2     406
                                              1 BANK0      2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Read                                      2     2      0      45
                                              1 BANK0      2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (6) _I2C_Master_Wait                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_22                              0     0      0    4828
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_12                              0     0      0    4828
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (3) _printf                                              33    21     12    4693
                                             14 BANK0     29    17     12
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (4) _putch                                                1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              3     3      0      68
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     593
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4     515
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     442
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) _lcdInst                                              1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     113
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4     680
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     428
                                              6 BANK0      8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (1) _PortTestA5                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _handler                                             16    16      0   73560
                                             74 COMRAM    16    16      0
                     _printSortTimer
                         _updateMenu
 ---------------------------------------------------------------------------------
 (8) _updateMenu                                           2     2      0   68752
                                             66 COMRAM     2     2      0
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
                           _dispLogs
                       _inputHandler
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
       i2_change_state_to_menu_start
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_start                         0     0      0    7546
                          i2_lcdInst
                         i2_printRTC
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) i2_printRTC                                         25    25      0    4506
                                             41 COMRAM    25    25      0
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
                           i2_strcpy
 ---------------------------------------------------------------------------------
 (11) i2_strcpy                                            6     2      4     699
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (9) _inputHandler                                         4     2      2   30400
                                             41 COMRAM     4     2      2
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_22                            0     0      0    3040
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_12                            0     0      0    3040
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_23                             0     0      0    3040
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_11                             0     0      0    3040
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_34                             0     0      0    3040
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_33                             0     0      0    3040
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_23                             0     0      0    3040
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_22                             0     0      0    3040
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_12                             0     0      0    3040
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_11                             0     0      0    3040
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) _dispLogs                                             2     0      2     406
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (8) _printSortTimer                                      33    33      0    4808
                                             41 COMRAM    33    33      0
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) i2_printf                                           33    21     12    2905
                                             12 COMRAM    29    17     12
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch
 ---------------------------------------------------------------------------------
 (11) i2_putch                                             1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (11) i2_isdigit                                           3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (11) i2___wmul                                            6     2      4     417
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (11) i2___lwmod                                           5     1      4     367
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (11) i2___lwdiv                                           7     3      4     318
                                              5 COMRAM     7     3      4
                          i2___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (11) i2_lcdInst                                           1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (12) i2_lcdNibble                                         2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (11) i2_getRTC                                            2     2      0     213
                                              3 COMRAM     2     2      0
                  i2_I2C_Master_Read
                 i2_I2C_Master_Start
                  i2_I2C_Master_Stop
                 i2_I2C_Master_Write
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Write                                  2     0      2     100
                                              1 COMRAM     2     0      2
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Stop                                   0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Start                                  0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Read                                   2     2      0      45
                                              1 COMRAM     2     2      0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (13) i2_I2C_Master_Wait                                   1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _PortTestA5
   _UI
     ___awdiv
       ___awmod (ARG)
     ___awmod
     _change_state_to_menu_12
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _change_state_to_menu_22
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _lcdInst
       _lcdNibble
     _printRTC
       _getRTC
         _I2C_Master_Read
           _I2C_Master_Wait
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _strcpy
     _printf
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
   _initLCD
     _lcdInst
       _lcdNibble
   _initTime
   _initUI
     _change_state_to_menu_start
       _lcdInst
         _lcdNibble
       _printRTC
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
         _lcdInst
           _lcdNibble
         _printf
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _lcdNibble
         _strcpy
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _loadRTC
       _I2C_Master_Init
         ___lldiv
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
   _machineConfig
   _sort
     _Distribution
     _ID
       _readMAG
         _readADC
     _Loading
       _initFlags
       _initServos
         _updateServoPosition
       _initSortTimer
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
       _lcdInst
         _lcdNibble
       _updateServoPosition
   _stopSignals

 _handler (ROOT)
   _printSortTimer
     i2___lwdiv
       i2___lwmod (ARG)
     i2___lwmod
     i2___wmul
     i2_getRTC
       i2_I2C_Master_Read
         i2_I2C_Master_Wait
       i2_I2C_Master_Start
         i2_I2C_Master_Wait
       i2_I2C_Master_Stop
         i2_I2C_Master_Wait
       i2_I2C_Master_Write
         i2_I2C_Master_Wait
     i2_lcdInst
       i2_lcdNibble
     i2_printf
       i2___lwdiv
         i2___lwmod (ARG)
       i2___lwmod
       i2___wmul
       i2_isdigit
       i2_putch
         i2_lcdNibble
   _updateMenu
     _change_state_to_logs_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_33
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_34
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _dispLogs
     _inputHandler
       _change_state_to_logs_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_33
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_34
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
     i2_change_state_to_menu_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_start
       i2_lcdInst
         i2_lcdNibble
       i2_printRTC
         i2_getRTC
           i2_I2C_Master_Read
             i2_I2C_Master_Wait
           i2_I2C_Master_Start
             i2_I2C_Master_Wait
           i2_I2C_Master_Stop
             i2_I2C_Master_Wait
           i2_I2C_Master_Write
             i2_I2C_Master_Wait
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
         i2_strcpy
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      12       7        7.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     54      7E       5       98.4%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     5A      7B       1       97.6%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     10B      34        0.0%
DATA                 0      0     10B       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Tue Feb 28 15:07:05 2017

                   i2_I2C_Master_Start 2C04                     i2_I2C_Master_Write 2BE2  
                                   _ID 1BFE                                     _UI 0012  
                         ___awdiv@sign 008B                                     _up 0075  
                  ___wmul@multiplicand 0082                     i2___lwdiv@dividend 0006  
                          __CFG_BORV$3 000000                           __CFG_CP0$OFF 000000  
                         __CFG_CP1$OFF 000000                           __CFG_CP2$OFF 000000  
                         __CFG_CP3$OFF 000000                                    ?_ID 0001  
                                  ?_UI 0001                                    UI@i 00C7  
                                  l251 2B7C                                    l254 2B82  
                                  l168 2B54                                    l374 00E0  
                                  l748 2084                                    l967 0D7C  
                         __CFG_CPB$OFF 000000                                    _PEN 007E2A  
                         __CFG_CPD$OFF 000000                                    _SEN 007E28  
                  ?i2_I2C_Master_Start 0001                         ?_machineConfig 0001  
                  ?i2_I2C_Master_Write 0002                                    _log 00F1  
                         ___awmod@sign 0085                                    wreg 000FE8  
                  i2printRTC@RTC_month 003B        __end_of_change_state_to_menu_11 2860  
      __end_of_change_state_to_menu_12 26CC        __end_of_change_state_to_menu_22 2694  
      __end_of_change_state_to_menu_23 2830           _f_can_coming_to_distribution 00EB  
                       ??_Distribution 0080        __end_of_change_state_to_logs_11 2950  
      __end_of_change_state_to_logs_12 2920        __end_of_change_state_to_logs_22 28F0  
      __end_of_change_state_to_logs_23 29AC        __end_of_change_state_to_logs_33 28C0  
      __end_of_change_state_to_logs_34 2890                                   ??_ID 0086  
                                 ??_UI 00C4                           __CFG_LVP$OFF 000000  
                         __CFG_WDT$OFF 000000                                   l1151 226A  
                                 l4121 2976                                   l1732 2224  
                                 l1742 23D6                                   l5103 1304  
                                 l4401 08E2                                   l4321 0696  
                                 l4313 0664                                   l4305 05E8  
                                 l5121 1362                                   l5113 132C  
                                 l4155 21D4                                   l4139 2A24  
                                 l4411 0954                                   l4331 070E  
                                 l4323 06A2                                   l5211 1CBA  
                                 l5131 138A                                   l5107 131C  
                                 l4157 21E0                                   l4405 08F6  
                                 l4341 0764                                   l4333 071A  
                                 l4325 06A8                                   l4413 0960  
                                 l5125 136C                                   l5117 1344  
                                 l5109 1322                                   l4167 2216  
                                 l4159 21E6                                   l4183 23C8  
                                 l4175 2392                                   l4407 08FC  
                                 l4335 0720                                   l4423 2186  
                                 l1679 1E38                                   l5151 1404  
                                 l5143 13E2                                   l5135 1394  
                                 l5241 1D2C                                   l5233 1D02  
                                 l4177 239E                                   l4337 0738  
                                 l4345 077C                                   l4433 270C  
                                 l4281 29D2                                   l4441 2280  
                                 l5153 140A                                   l5129 1384  
                                 l5081 129C                                   l5161 142C  
                                 l5251 1D62                                   l5243 1D32  
                                 l5227 1CEC                                   l4179 23A4  
                                 l4371 0822                                   l4347 07B0  
                                 l4419 2170                                   l4435 2718  
                                 l5403 01EC                                   l5147 13EC  
                                 l5139 13AC                                   l5091 12C4  
                                 l4381 087C                                   l4357 07E0  
                                 l4293 0598                                   l4429 21A6  
                                 l5501 03AE                                   l5421 0242  
                                 l4453 1DBC                                   l5157 1414  
                                 l5085 12B4                                   l5077 1292  
                                 l5239 1D20                                   l5255 1D70  
                                 l5271 1F10                                   l4383 0886  
                                 l4359 07E6                                   l4295 05AA  
                                 l5351 00FE                                   l4455 1DCC  
                                 l4279 29C0                                   l4439 2256  
                                 l5175 1464                                   l5095 12DC  
                                 l5087 12BA                                   l5281 1F40  
                                 l4377 0844                                   l4289 0584  
                                 l5505 03B8                                   l5425 024C  
                                 l4465 1E26                                   l4457 1DD2  
                                 l5259 1D84                                   l5283 1F46  
                                 l5291 1F78                                   l5275 1F20  
                                 l4395 08BC                                   l4299 05B4  
                                 l5603 055C                                   l5523 0404  
                                 l5515 03E2                                   l5443 0298  
                                 l5435 0276                                   l5363 0132  
                                 l5355 0110                                   l5099 12FA  
                                 l4397 08C8                                   l4389 08A0  
                                 l4661 0DFE                                   l4653 0D86  
                                 l5541 045A                                   l5509 03D0  
                                 l5461 0302                                   l5429 0264  
                                 l5381 0196                                   l5349 00F8  
                                 l5295 1F8C                                   l5287 1F6A  
                                 l5279 1F34                                   l4671 0E94  
                                 l4663 0E1C                                   l4655 0DA4  
                                 l4647 0CFA                                   l5519 03EC  
                                 l5439 0280                                   l5367 0144  
                                 l5359 011A                                   l5607 0568  
                                 l4673 0EB2                                   l4665 0E3A  
                                 l4657 0DC2                                   l4681 0F4C  
                                 l5545 0464                                   l5465 030C  
                                 l5385 01A0                                   l4675 0ED0  
                                 l4667 0E58                                   l4659 0DE0  
                                 l5563 04B0                                   l5555 048E  
                                 l5483 0358                                   l5475 0336  
                                 l5395 01CA                                   l4669 0E76  
                                 l5581 0506                                   l5549 047C  
                                 l5469 0324                                   l5389 01B8  
                                 l4679 0EEE                                   l5559 0498  
                                 l5479 0340                                   l5399 01D4  
                                 l4775 1E58                                   l5903 205A  
                                 _ADIE 007CEE                                   l5585 0510  
                                 l4873 1FD8                                   l4785 1EE4  
                                 l5913 207A                                   l5905 2060  
                                 _ADFM 007E07                                   l5595 053A  
                                 l4883 201A                                   l4779 1E6E  
                                 l5915 2080                                   l5907 2066  
                                 l5589 0528                                   l4877 1FEE  
                                 l5599 0544                                   l5919 2086  
                                 _ADON 007E10                                   STR_1 FEBA  
                                 STR_2 FDE8                                   STR_3 FDFD  
                                 STR_4 FF86                                   STR_5 FFC4  
                                 STR_6 FEFE                                   STR_7 FFB3  
                                 STR_8 FE0F                                   STR_9 FE98  
                                 _LATA 000F89                                   _LATB 000F8A  
                                 _LATC 000F8B                                   _LATD 000F8C  
                                 _LATE 000F8D                                   u3410 0D7C  
                                 u2550 2974                                   u2800 06E2  
                                 u5017 1278                                   u3370 24E6  
                                 u5107 1C18                                   u5027 12A4  
                                 u3380 24E8                                   u5117 1C92  
                                 u5037 12CC                                   u2807 06D8  
                                 u5207 0206                                   u5127 29C8  
                                 u5047 130C                                   u2840 075A  
                                 u5217 0254                                   u5137 25A0  
                                 u5057 1334                                   u3810 1C50  
                                 u5307 046C                                   u5227 0288  
                                 u5147 25D4                                   u3395 2410  
                                 u5067 1374                                   _PEIE 007F96  
                                 u5317 04A0                                   u5237 02B2  
                                 u5157 002A                                   u5077 139C  
                                 u2847 0750                                   u5327 04CA  
                                 u5247 0314                                   u5167 0122  
                                 u5087 13F4                                   u3840 1CAA  
                                 u5337 0518                                   u5257 0348  
                                 u5177 0152                                   u5097 141C  
                                 u3818 1C54                                   u5347 054C  
                                 u5267 0372                                   u5187 01A8  
                                 _RCEN 007E2B                                   u5357 2336  
                                 u5277 03C0                                   u5197 01DC  
                                 u5367 2340                                   u5287 03F4  
                                 u3848 1CAE                                   u5377 236C  
                                 u5297 041E                                   u5387 2376  
                                 _THIR 007A                                   _RSEN 007E29  
                          _stopSignals 2B3E                                   _back 0063  
                                 _main 2022                                   _down 006D  
                                 _keys FDB5                                   _time 00DC  
                                 fsr0h 000FEA                                   fsr1h 000FE2  
                   i2___lwdiv@quotient 000A                                   indf0 000FEF  
                                 fsr2h 000FDA                                   fsr0l 000FE9  
                                 indf2 000FDF                                   fsr1l 000FE1  
                                 fsr2l 000FD9                                   _sort 2AA2  
                                 btemp 007C                   ??i2_I2C_Master_Start 0002  
                 ??i2_I2C_Master_Write 0004                                   prodh 000FF4  
                                 prodl 000FF3                                   start 000E  
                        __CFG_IESO$OFF 000000                        __end_ofi2_putch 2BCC  
                        __CFG_MCLRE$ON 000000                           ___param_bank 000000  
                           i2_printRTC 148A                            i2_lcdNibble 24F0  
                      __end_of_Loading 148A                       ?_I2C_Master_Init 008D  
                     ?_I2C_Master_Read 0001                       ?_I2C_Master_Wait 0001  
          ??i2_change_state_to_menu_12 002A            ??i2_change_state_to_menu_22 002A  
                     ?_I2C_Master_Stop 0001                                  ?_main 0001  
                                _ACKEN 007E2C                                  _ACKDT 007E2D  
                      __end_of___awdiv 1D8E                                  STR_10 FEDC  
                                STR_11 FEA9                                  STR_20 FF64  
                                STR_12 FEED                                  STR_13 FECB  
                                STR_21 FE65                                  STR_30 FE32  
                                STR_22 FE76                                  STR_14 FFFB  
                                STR_15 FF97                                  STR_23 FF53  
                                STR_31 FF31                                  STR_32 FF31  
                                STR_40 FFF7                                  STR_16 FF75  
                                STR_24 FF0F                                  STR_41 FFDF  
                                STR_17 FE76                                  STR_33 FE54  
                                STR_25 FE32                                  STR_34 FE43  
                                STR_50 FDE8                                  STR_42 FFD7  
                                STR_18 FE87                                  STR_26 FE21  
                                STR_43 FFD3                                  STR_51 FFBD  
                                STR_19 FF64                                  STR_35 FF42  
                                STR_27 FF20                                  STR_28 FF20  
                                STR_44 FFE3                                  STR_36 FFDB  
                      __end_of___awmod 1F96                                  STR_45 FFEF  
                                STR_37 FFCB                                  STR_29 FE43  
                                STR_46 FFF3                                  STR_38 FFE7  
                                STR_39 FFEB                                  STR_47 FFCF  
                                STR_48 FDD0                                  STR_49 FFA8  
                                ?_sort 0001                        __end_of___lldiv 1E4A  
                                _T0CON 000FD5                        ___awdiv@divisor 0088  
                                _T1CON 000FCD                        __end_of___lwdiv 222E  
                      __end_of___lwmod 23E0                                  i2l168 2B8E  
                                i2l426 124C                        ___awdiv@counter 008A  
                                i2l967 1518                                  _VCFG0 007E0C  
                                _VCFG1 007E0D                                  _THMAG 00F8  
                                _TMR0H 000FD7                                  _TMR1H 000FCF  
                                _TMR0L 000FD6                                  _TMR3H 000FB3  
                                _TMR1L 000FCE                                  _TMR3L 000FB2  
                                _PORTB 000F81                                  _TRISA 000F92  
                                _TRISB 000F93                                  _TRISC 000F94  
                                _TRISD 000F95                                  _TRISE 000F96  
                        __CFG_PWRT$OFF 000000                          __CFG_WRT0$OFF 000000  
                        __CFG_WRT1$OFF 000000                          __CFG_WRT2$OFF 000000  
                        __CFG_WRT3$OFF 000000                        __end_of_lcdInst 2BC0  
                      __end_of_handler 1BFE                         __CFG_EBTR0$OFF 000000  
                       __CFG_FCMEN$OFF 000000                         __CFG_EBTR1$OFF 000000  
                       __CFG_EBTR2$OFF 000000                         __CFG_EBTR3$OFF 000000  
                                _nRBPU 007F8F                          __CFG_WRTB$OFF 000000  
                        __CFG_WRTC$OFF 000000                          __CFG_WRTD$OFF 000000  
                      __end_of_readADC 29D8                        __end_of_initLCD 25DE  
                       __CFG_EBTRB$OFF 000000                             i2isdigit@c 0003  
                      __end_of_loadRTC 2022                        __end_of_readMAG 24F0  
                      __end_of_dpowers FDD0                                  _first 00FC  
                                _enter 006F                        __end_of_isdigit 2A2E  
                                _input 0079                                  _putch 2BA0  
                                pclath 000FFA                                  tablat 000FF5  
                     __end_ofi2___wmul 2A7C                       __end_ofi2_getRTC 2316  
                                status 000FD8                         __CFG_PBADEN$ON 000000  
                        i2printf@width 0028                       __end_ofi2_printf 0CC6  
                   __size_ofi2___lwdiv 0052                     __size_ofi2___lwmod 0042  
                     __end_ofi2_strcpy 27A0                       _count_can_no_lab 0065  
                      __initialization 20AA                     __size_ofi2_lcdInst 000C  
                         __end_of_main 20AA                           __end_of_keys FDC6  
                         __end_of_sort 2AC4                             i2printf@ap 001E  
                           i2printf@cp 0020                     __size_ofi2_isdigit 001E  
  __size_of_change_state_to_menu_start 002C                        ??_machineConfig 0080  
                               ??_main 00D4                                 ??_sort 0093  
                        __activetblptr 000003             updateServoPosition@my_time 0086  
           updateServoPosition@time_us 0080                             i2strcpy@cp 0005  
                           i2strcpy@to 0001                      ?_I2C_Master_Start 0001  
                    ?_I2C_Master_Write 0081                     ??_I2C_Master_Start 0081  
                               _ADCON0 000FC2                                 _ADCON1 000FC1  
                   ??_I2C_Master_Write 0083                                 _ADRESH 000FC4  
                               _ADRESL 000FC3                       ___awdiv@dividend 0086  
                      i2lcdNibble@data 0002                                 ?_putch 0001  
               __size_of_initSortTimer 00AA                        i2lcdNibble@temp 0001  
            i2_change_state_to_menu_12 27D0              i2_change_state_to_menu_22 27A0  
                               _INT1IE 007F83                                 _INT1IF 007F80  
                               _CVRCON 000FB5                                 i2l1252 1B56  
                               i2l1256 1BA2                                 i2l1258 1BC2  
                               i2l5003 19EC                                 i2l1732 258E  
                               i2l5005 19F0                                 i2l1742 2616  
                               i2l4207 2A9C                                 i2l4231 2B1C  
                               i2l5031 1A44                                 i2l5023 1A20  
                               i2l4241 255C                                 i2l5017 1A12  
                               i2l5009 19FA                                 i2l4243 2564  
                               i2l5035 1A56                                 i2l5027 1A32  
                               i2l6003 1BC0                                 i2l4253 2584  
                               i2l4245 2568                                 i2l4261 25EC  
                               i2l4501 09AE                                 i2l5045 1A72  
                               i2l4263 25F4                                 i2l5039 1A68  
                               i2l4265 25F8                                 i2l4603 0C3C  
                               i2l4523 0A6A                                 i2l4515 0A42  
                               i2l4507 09E0                                 i2l4269 260C  
                               i2l4613 0CA2                                 i2l4533 0AC2  
                               i2l4525 0A74                                 i2l4621 2780  
                               i2l4607 0C4E                                 i2l4543 0B0E  
                               i2l4535 0ACC                                 i2l4527 0A78  
                               i2l4615 0CAA                                 i2l4481 22EC  
                               i2l4609 0C54                                 i2l4561 0B7C  
                               i2l4537 0AD2                                 i2l4539 0AE4  
                               i2l4547 0B20                                 i2l4491 098A  
                               i2l4619 2778                                 i2l6171 1222  
                               i2l4477 22DC                                 i2l4573 0BAE  
                               i2l4549 0B50                                 i2l6173 123E  
                               i2l4487 2306                                 i2l4591 0C0A  
                               i2l4583 0BEC                                 i2l4559 0B78  
                               i2l4495 099A                                 i2l4831 1522  
                               i2l5711 1114                                 i2l5703 10F0  
                               i2l5631 0FF0                                 i2l5623 0FD4  
                               i2l4585 0BF4                                 i2l4497 09A8  
                               i2l6177 1960                                 i2l4841 1590  
                               i2l4833 1538                                 i2l4825 14B6  
                               i2l6169 1200                                 i2l5617 0FC0  
                               i2l4579 0BC8                                 i2l6179 197C  
                               i2l4851 15FE                                 i2l4843 15A6  
                               i2l4835 154E                                 i2l5731 1162  
                               i2l5723 113E                                 i2l5715 1122  
                               i2l5707 10FE                                 i2l5651 1028  
                               i2l5643 100C                                 i2l5635 0FFE  
                               i2l5627 0FE2                                 i2l5619 0FC6  
                               i2l4597 0C20                                 i2l4853 1614  
                               i2l4845 15BC                                 i2l4837 1564  
                               i2l4599 0C28                                 i2l4951 192A  
                               i2l4935 18F2                                 i2l4927 18D8  
                               i2l4847 15D2                                 i2l4839 157A  
                               i2l5751 11B0                                 i2l5743 1194  
                               i2l5735 1170                                 i2l5727 1154  
                               i2l5719 1130                                 i2l5671 1070  
                               i2l5663 1054                                 i2l5655 1038  
                               i2l5647 101A                                 i2l4953 1930  
                               i2l4937 1902                                 i2l4945 1910  
                               i2l4849 15E8                                 i2l4857 162A  
                               i2l4955 1936                                 i2l4963 1948  
                               i2l4939 1906                                 i2l4859 1684  
                               i2l5755 11BE                                 i2l5747 11A2  
                               i2l5739 117E                                 i2l5691 10BE  
                               i2l5683 10A2                                 i2l5675 107E  
                               i2l5667 1062                                 i2l5659 1046  
                               i2l4957 193C                                 i2l4949 1924  
                               i2l5765 11E2                                 i2l5855 16CC  
                               i2l4983 19A4                                 i2l4975 198C  
                               i2l4959 1942                                 i2l5759 11D4  
                               i2l5695 10D4                                 i2l5687 10B0  
                               i2l5679 1094                                 i2l5943 1B0E  
                               i2l5865 1736                                 i2l4993 19CE  
                               i2l5875 17F8                                 i2l5859 16DC  
                               i2l5699 10E2                                 i2l4989 19B2  
                               i2l5981 1B76                                 i2l5957 1B2A  
                               i2l4999 19D8                                 i2l5979 1B74  
                               _OSCCON 000FD3                                 _TMR0IE 007F95  
                               _TMR3CF 005D                                 _TMR0IF 007F92  
                            ??i2_putch 0003                                 _TMR1IE 007CE8  
                               _TMR1IF 007CF0                                 _TMR2IE 007CE9  
                               _TMR3IE 007D01                                 _TMR3IF 007D09  
                               _TMR0ON 007EAF                                 _TMR1ON 007E68  
                               _TMR3ON 007D88                                 _SSPADD 000FC8  
                               _TRISC3 007CA3                                 _TRISC4 007CA4  
                               _SSPBUF 000FC9                              ??_Loading 008A  
                       __CFG_XINST$OFF 000000                       __end_of_dispLogs 2B7C  
                          ?i2_printRTC 0001                   __end_of_Distribution 2B06  
                               ___wmul 2738                              ??___awdiv 008A  
                       __CFG_STVREN$ON 000000                              ??___awmod 0084  
                               _getRTC 2130                              ??___lldiv 0088  
                            ??___lwdiv 0084                              ??___lwmod 008B  
                     ??_printSortTimer 002A                       __end_of_initTime 2AE6  
                               _initUI 2B24                                 clear_0 2108  
                               clear_1 2114                                 clear_2 2120  
                     ___awdiv@quotient 008C                        ___awmod@divisor 0082  
                           _PortTestA5 2B7C                        ___awmod@counter 0084  
                            ??_lcdInst 0082                                 _printf 0576  
                            ??_handler 004B                                 _strcpy 2702  
                            ??_readADC 0080                              ??_initLCD 0083  
                            ??_loadRTC 0095                              ??_readMAG 0082  
 __end_ofi2_change_state_to_menu_start 2A56  __size_ofi2_change_state_to_menu_start 0028  
         i2_change_state_to_menu_start 2A2E                           __pdataCOMRAM 007A  
                            ??_isdigit 0080                      __end_ofi2___lwdiv 2598  
                     __end_of_printRTC 0F90                           __mediumconst FDB4  
                    __end_ofi2___lwmod 2620                                 tblptrh 000FF7  
                               tblptrl 000FF6                                 tblptru 000FF8  
                    __end_ofi2_lcdInst 2BD8                      __end_ofi2_isdigit 2B24  
                           __accesstop 0080                __end_of__initialization 2126  
                        ?_inputHandler 002A                          ___rparam_used 000001  
              printSortTimer@start_sec 003B                     i2___lwmod@dividend 0001  
                       __pcstackCOMRAM 0001                           __pidataBANK0 2C0C  
                         __pidataBANK1 2C12                            i2printRTC@i 0041  
                        _initSortTimer 1E4A            __end_of_updateServoPosition 22A4  
                        __end_of_putch 2BB0                            i2printf@len 0024  
                          i2printf@val 0022                             __end_of_ID 1CD0  
                           __end_of_UI 0576                     printSortTimer@hour 003F  
                            ?i2___wmul 0001                     __size_of_lcdNibble 0068  
                            ?i2_getRTC 0001                            i2putch@data 0003  
                printSortTimer@curTime 002D     __end_of_change_state_to_menu_start 2A04  
        ?i2_change_state_to_menu_start 0001             _change_state_to_menu_start 29D8  
                printSortTimer@cur_sec 003D                              ?i2_printf 000D  
                            ?i2_strcpy 0001                       _count_pop_no_tab 0069  
                  __size_ofi2_printRTC 0236                                ??_putch 0082  
                           __pbssBANK0 00D4                             __pbssBANK1 0100  
                         ?_stopSignals 0001                         ??_inputHandler 002C  
                   __size_of_initFlags 003C               ?_change_state_to_menu_11 0001  
             ?_change_state_to_menu_12 0001               ?_change_state_to_menu_22 0001  
             ?_change_state_to_menu_23 0001               ?_change_state_to_logs_11 0001  
             ?_change_state_to_logs_12 0001               ?_change_state_to_logs_22 0001  
             ?_change_state_to_logs_23 0001               ?_change_state_to_logs_33 0001  
             ?_change_state_to_logs_34 0001                      printRTC@RTC_month 00BC  
                         ?i2_lcdNibble 0001                                UI@i_602 00D2  
                              UI@i_603 00D3                         ?_initSortTimer 0001  
                              UI@i_590 00CC                                UI@i_582 00C8  
                              UI@i_591 00CD                                UI@i_583 00C9  
                              UI@i_594 00CE                                UI@i_586 00CA  
                              UI@i_595 00CF                                UI@i_587 00CB  
                              UI@i_598 00D0                                UI@i_599 00D1  
                              ?___wmul 0080                                ?_getRTC 0001  
                              ?_initUI 0001               updateServoPosition@timer 0082  
                          ?_PortTestA5 0001                                ?_printf 008E  
            ID@top_bottom_conductivity 0088                                _UI$2006 00C5  
                              ?_strcpy 0080                             ??i2___wmul 0005  
                           ??i2_getRTC 0004                             ??i2_printf 0019  
                           ??i2_strcpy 0005                              ?_dispLogs 0001  
                              _SSPCON1 000FC6                                _SSPCON2 000FC5  
                              _SSPSTAT 000FC7                                i2_putch 2BC0  
                            ?_initTime 0080                        _f_loadingNewCan 00EF  
                      i2printRTC@month 003D                  __size_of_Distribution 0020  
          __size_ofi2_I2C_Master_Start 0008                      __end_of_lcdNibble 237E  
                              _Loading 1250            __size_ofi2_I2C_Master_Write 000A  
                              __Hparam 0000                                __Lparam 0000  
   __size_ofi2_change_state_to_menu_12 0030     __size_ofi2_change_state_to_menu_22 0030  
                            ?_printRTC 0001                                ___awdiv 1CD0  
                              ___awmod 1EF4                             _initServos 26CC  
                              ___lldiv 1D8E                        __size_of___wmul 0036  
                              ___lwdiv 21B6                                ___lwmod 237E  
                      __size_of_getRTC 0086                        printSortTimer@i 0049  
                            _CMCONbits 000FB4                        __size_of_initUI 001A  
                              __pcinit 20AA                                __ramtop 1000  
                              _lcdInst 2BB0                                _handler 0008  
                              __ptext0 2022                                __ptext1 2B3E  
                              __ptext2 2AA2                                __ptext3 1250  
                              __ptext4 1E4A                                __ptext5 26CC  
                              __ptext6 222E                                __ptext7 2620  
                              __ptext8 1BFE                                __ptext9 249A  
                    __end_of_initFlags 265C                        __size_of_printf 040A  
                              _readADC 29AC                        __size_of_strcpy 0036  
                              _initLCD 2598                                _loadRTC 1F96  
                              _readMAG 249A                                _dpowers FDC6  
                              _isdigit 2A04                       ___awmod@dividend 0080  
                              getRTC@i 0083               __size_of_I2C_Master_Init 0060  
             __size_of_I2C_Master_Read 002E               __size_of_I2C_Master_Wait 0014  
             __size_of_I2C_Master_Stop 0008                                _was_low 0077  
                           ??_dispLogs 0003                           _Distribution 2AE6  
                       __pintcode_body 1AA0                   end_of_initialization 2126  
                           ??_initTime 0086                                int_func 1AA0  
                  i2___wmul@multiplier 0001                    __size_of_PortTestA5 0012  
            __size_of_I2C_Master_Start 0008              __size_of_I2C_Master_Write 000A  
                      ___lldiv@divisor 0084                        ___lldiv@counter 008C  
                      ??_initSortTimer 0085                                printf@c 00A8  
                         ??i2_printRTC 002A                                printf@f 008E  
                           ??_printRTC 00AB                       I2C_Master_Init@c 008D  
                     I2C_Master_Read@a 0081                                postdec1 000FE5  
                              postdec2 000FDD                                postinc0 000FEE  
                              postinc2 000FDE                             _servoTimes 00D4  
                            _PORTAbits 000F80                              _PORTBbits 000F81  
                 __end_of_inputHandler 1AA0                  __end_of_machineConfig 249A  
                           _updateMenu 0F90                      i2_I2C_Master_Read 2A7C  
                            _IR_signal 005B                      i2_I2C_Master_Wait 2B8E  
                    i2_I2C_Master_Stop 2BFC                      i2___lwdiv@divisor 0008  
                            i2___lwdiv 2546                              i2___lwmod 25DE  
                    i2___lwdiv@counter 000C                     ?i2_I2C_Master_Read 0001  
                   ?i2_I2C_Master_Wait 0001                     __end_ofi2_printRTC 16C0  
                   ?i2_I2C_Master_Stop 0001           ??_change_state_to_menu_start 00C4  
                            i2_lcdInst 2BCC                          Loading@i_1260 0090  
                        Loading@i_1261 0091                          Loading@i_1262 0092  
                        Loading@i_1256 008C                          Loading@i_1257 008D  
                        Loading@i_1258 008E                          Loading@i_1259 008F  
                           _total_time 00F5                            printf@width 00A9  
                 __size_of_stopSignals 0016                             ID@magnetic 008C  
                  ??i2_I2C_Master_Read 0002                              i2_isdigit 2B06  
                  ??i2_I2C_Master_Wait 0001                    ??i2_I2C_Master_Stop 0002  
                            i2getRTC@i 0004                              _UIenabled 0061  
                          ?_initServos 0001                         __end_of___wmul 276E  
                       __end_of_getRTC 21B6                   __size_ofi2_lcdNibble 0056  
                        __pidataCOMRAM 2C16                          i2lcdInst@data 0003  
                       __end_of_initUI 2B3E                       i2___wmul@product 0005  
                       __end_of_printf 0980                           i2printf@flag 0026  
                       __end_of_strcpy 2738              __end_ofi2_I2C_Master_Read 2AA2  
            __end_ofi2_I2C_Master_Wait 2BA0                           i2printf@prec 001D  
                  start_initialization 20AA              __end_ofi2_I2C_Master_Stop 2C04  
                           readMAG@res 0084                      __size_ofi2___wmul 0026  
                      _count_can_w_lab 0067            ?_change_state_to_menu_start 0001  
                    __size_ofi2_getRTC 0072                              i2printf@c 0027  
                            i2printf@f 000D                  i2I2C_Master_Read@temp 0003  
                           ?i2___lwdiv 0006                             ?i2___lwmod 0001  
                    __size_ofi2_printf 0346                      __size_ofi2_strcpy 0032  
                    ??_I2C_Master_Init 0091                      ??_I2C_Master_Read 0081  
                    ??_I2C_Master_Wait 0080                             ?i2_lcdInst 0001  
                    ??_I2C_Master_Stop 0081                       __CFG_OSC$INTIO67 000000  
                           ?i2_isdigit 0001                             initTime@DD 0083  
                           initTime@MM 0084                             initTime@YY 0085  
                             ??___wmul 0084                               ??_getRTC 0083  
                          __pdataBANK0 00F8                            __pdataBANK1 010E  
                     __CFG_LPT1OSC$OFF 000000                               ??_initUI 00C4  
                         ??_PortTestA5 0080                 printSortTimer@timeDiff 0047  
     __size_of_change_state_to_menu_11 0030       __size_of_change_state_to_menu_12 0038  
     __size_of_change_state_to_menu_22 0038       __size_of_change_state_to_menu_23 0030  
                             ??_printf 009A       __size_of_change_state_to_logs_11 0030  
     __size_of_change_state_to_logs_12 0030       __size_of_change_state_to_logs_22 0030  
     __size_of_change_state_to_logs_23 002E       __size_of_change_state_to_logs_33 0030  
     __size_of_change_state_to_logs_34 0030                               ??_strcpy 0084  
                  _printSortTimer$2121 0045                            __pbssCOMRAM 005B  
         __size_of_updateServoPosition 0076                            ?_updateMenu 0001  
                        __pcstackBANK0 0080                __size_of_printSortTimer 01FA  
                    i2___lwmod@divisor 0003                      i2___lwmod@counter 0005  
                         _isdigit$1648 0081                         initSortTimer@i 0088  
                    printSortTimer@min 0041                      printSortTimer@sec 0043  
                  __size_of_initServos 0036                      __size_of_dispLogs 0014  
                     printRTC@INT_time 00AE                           i2strcpy@from 0003  
                             ?i2_putch 0001                        _count_pop_w_tab 006B  
                   __end_of_PortTestA5 2B8E                       _I2C_Master_Start 2BF4  
                            _f_lastCan 00ED                               ?_Loading 0001  
                  i2I2C_Master_Write@d 0002                       _I2C_Master_Write 2BD8  
                    __size_of_initTime 0022                       ___lwdiv@dividend 0080  
                    __CFG_CCP2MX$PORTC 000000                              __pintcode 0008  
                        __pmediumconst FDB4                              _lcdNibble 2316  
                __size_of_inputHandler 01E6                               ?___awdiv 0086  
                             ?___awmod 0080                               ?___lldiv 0080  
                             ?___lwdiv 0080                               ?___lwmod 0087  
                    __size_of_printRTC 02CA                               ?_lcdInst 0001  
                             ?_handler 0001                               ?_readADC 0001  
                             ?_initLCD 0001                               ?_loadRTC 0001  
                             ?_readMAG 0001                               ?_isdigit 0001  
           __size_ofi2_I2C_Master_Read 0026             __size_ofi2_I2C_Master_Wait 0012  
           __size_ofi2_I2C_Master_Stop 0008                              _firstboot 0073  
                            _initFlags 2620                              _cur_state 00E7  
                     ___lwdiv@quotient 0084                            ??i2___lwdiv 000A  
                          ??i2___lwmod 0005                         __size_of_putch 0010  
                          __size_of_ID 00D2                            __size_of_UI 0564  
           __end_ofi2_I2C_Master_Start 2C0C             __end_ofi2_I2C_Master_Write 2BEC  
                          ??i2_lcdInst 0003                         ___wmul@product 0084  
                             _LATAbits 000F89                               _LATCbits 000F8B  
                             _LATDbits 000F8C                           _inputHandler 18BA  
                          ??i2_isdigit 0001                               i2u314_40 0AA6  
                             i2u314_47 0A9C                               i2u318_40 0B06  
                             i2u318_47 0AFC                               i2u265_40 2A9A  
                             i2u345_40 1518                               i2u540_47 2508  
                             i2u541_47 2512                               i2u542_47 2534  
                             i2u543_47 253E                               i2u539_47 18F8  
                             i2u488_40 17F2                    __size_of_updateMenu 02C0  
                     __CFG_WDTPS$32768 000000                             ?_lcdNibble 0001  
                  ID@side_conductivity 008A                             _ADCON0bits 000FC2  
                    ___wmul@multiplier 0080                              _startTime 0100  
                             i2___wmul 2A56                          lcdNibble@data 0081  
                             i2_getRTC 22A4                             printf@flag 00A7  
                        lcdNibble@temp 0080                             printf@prec 009E  
                           ?_initFlags 0001                               Loading@i 008B  
                             i2_printf 0980                               i2_strcpy 276E  
                  I2C_Master_Read@temp 0082                              copy_data0 20BE  
                            copy_data1 20DE                       __size_ofi2_putch 000C  
                          _count_total 00E5                               __Hrparam 0000  
                     __size_of_Loading 023A                              initTime@h 0081  
                            initTime@m 0080                              initTime@s 0086  
                            initTime@w 0082                               __Lrparam 0000  
                   __CFG_BOREN$SBORDIS 000000                  __end_of_initSortTimer 1EF4  
                         ??_initServos 0088                       __size_of___awdiv 00BE  
                     __size_of___awmod 00A2                _change_state_to_menu_11 2830  
           ?i2_change_state_to_menu_12 0001                _change_state_to_menu_12 2694  
           ?i2_change_state_to_menu_22 0001                _change_state_to_menu_22 265C  
              _change_state_to_menu_23 2800                  i2___wmul@multiplicand 0003  
                     __size_of___lldiv 00BC                       __size_of___lwdiv 0078  
              _change_state_to_logs_11 2920                _change_state_to_logs_12 28F0  
              _change_state_to_logs_22 28C0                _change_state_to_logs_23 297E  
              _change_state_to_logs_33 2890                _change_state_to_logs_34 2860  
                     __size_of___lwmod 0062                         readADC@channel 0081  
                   i2I2C_Master_Read@a 0002                       __size_of_lcdInst 0010  
                     __size_of_handler 1BF6                        _I2C_Master_Init 23E0  
                     __size_of_readADC 002C                        _I2C_Master_Read 2950  
                     __size_of_initLCD 0046                           _f_ID_receive 00FA  
                     __size_of_loadRTC 008C                       __size_of_readMAG 0056  
                      _I2C_Master_Wait 2B54                        _I2C_Master_Stop 2BEC  
                     __size_of_isdigit 002A                         _printSortTimer 16C0  
                      ___lwdiv@divisor 0082                        ___lwdiv@counter 0086  
                             __ptext10 29AC                               __ptext11 2AE6  
                             __ptext20 0012                               __ptext12 2440  
                             __ptext21 0CC6                               __ptext13 2B24  
                             __ptext30 2694                               __ptext22 2702  
                             __ptext14 1F96                               __ptext31 0576  
                             __ptext23 2130                               __ptext15 23E0  
                             __ptext40 1CD0                               __ptext32 2BA0  
                             __ptext24 2BD8                               __ptext16 1D8E  
                             __ptext41 2B7C                               __ptext33 2A04  
                             __ptext25 2BEC                               __ptext17 29D8  
                             __ptext50 2800                               __ptext34 2738  
                             __ptext26 2BF4                               __ptext18 2AC4  
                             __ptext51 2830                               __ptext43 0F90  
                             __ptext35 237E                               __ptext27 2950  
                             __ptext19 2598                               __ptext60 0980  
                             __ptext52 2860                               __ptext44 2A2E  
                             __ptext36 21B6                               __ptext28 2B54  
                             __ptext61 2BC0                               __ptext53 2890  
                             __ptext45 148A                               __ptext37 2BB0  
                             __ptext29 265C                               __ptext70 2BFC  
                             __ptext62 2B06                               __ptext54 297E  
                             __ptext46 276E                               __ptext38 2316  
                             __ptext71 2C04                               __ptext63 2A56  
                             __ptext55 28C0                               __ptext47 18BA  
                             __ptext39 1EF4                               __ptext72 2A7C  
                             __ptext64 25DE                               __ptext56 28F0  
                             __ptext48 27A0                               __ptext73 2B8E  
                             __ptext65 2546                               __ptext57 2920  
                             __ptext49 27D0                               __ptext66 2BCC  
                             __ptext58 2B68                               __ptext67 24F0  
                             __ptext59 16C0                               __ptext68 22A4  
                             __ptext69 2BE2                               _dispLogs 2B68  
                        ??_stopSignals 0080                             strcpy@from 0082  
                       i2_isdigit$1648 0002                     __end_of_initServos 2702  
                             _initTime 2AC4                          __size_of_main 0088  
                        __size_of_sort 0022         ??i2_change_state_to_menu_start 0043  
                             _logstate 00F3                    _updateServoPosition 222E  
               __size_of_machineConfig 005A                          ??i2_lcdNibble 0001  
                             _printRTC 0CC6                            ??_lcdNibble 0080  
                            printRTC@i 00C2                               int$flags 007C  
                   _f_can_coming_to_ID 00E9                              printf@len 00A5  
                            printf@val 00A3      __end_ofi2_change_state_to_menu_12 2800  
    __end_ofi2_change_state_to_menu_22 27D0                               loadRTC@i 0096  
               __end_of_printSortTimer 18BA                              putch@data 0082  
             __end_of_I2C_Master_Start 2BFC                            _OSCTUNEbits 000F9B  
             __end_of_I2C_Master_Write 2BE2                             _INTCONbits 000FF2  
                 ?_updateServoPosition 0080                           ??_updateMenu 0043  
                          ??_initFlags 0080                             _MAG_signal 00E3  
                             isdigit@c 0082                               intlevel2 0000  
                     ___lwmod@dividend 0087                       ___lldiv@dividend 0080  
                  __end_of_stopSignals 2B54              ??_change_state_to_menu_11 002A  
            ??_change_state_to_menu_12 00AB              ??_change_state_to_menu_22 00AB  
            ??_change_state_to_menu_23 002A              ??_change_state_to_logs_11 002A  
            ??_change_state_to_logs_12 002A              ??_change_state_to_logs_22 002A  
            ??_change_state_to_logs_23 002A              ??_change_state_to_logs_33 002A  
            ??_change_state_to_logs_34 002A                               printf@ap 009F  
                             printf@cp 00A1                     __end_of_updateMenu 1250  
              __end_of_I2C_Master_Init 2440                __end_of_I2C_Master_Read 297E  
              __end_of_I2C_Master_Wait 2B68                __end_of_I2C_Master_Stop 2BF4  
                          lcdInst@data 0082                          printRTC@F3192 010E  
                  __end_ofi2_lcdNibble 2546                  ??_updateServoPosition 0084  
                      ?_printSortTimer 0001                       ___lldiv@quotient 0088  
                    I2C_Master_Write@d 0081                        ___lwmod@divisor 0089  
                    _f_can_distributed 0071                               strcpy@cp 0084  
                             strcpy@to 0080                          _machineConfig 2440  
                      ___lwmod@counter 008B                            _TMR3counter 005F  
                        printRTC@month 00BE                          ?_Distribution 0001  
                        _machine_state 00F7                          dispLogs@myLog 0001  
                   i2printRTC@INT_time 002D  
