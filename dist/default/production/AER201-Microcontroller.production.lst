

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Sat Mar 25 14:50:20 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	text45,global,reloc=2,class=CODE,delta=1
    60                           	psect	text46,global,reloc=2,class=CODE,delta=1
    61                           	psect	text47,global,reloc=2,class=CODE,delta=1
    62                           	psect	text48,global,reloc=2,class=CODE,delta=1
    63                           	psect	text49,global,reloc=2,class=CODE,delta=1
    64                           	psect	text50,global,reloc=2,class=CODE,delta=1
    65                           	psect	text51,global,reloc=2,class=CODE,delta=1
    66                           	psect	text52,global,reloc=2,class=CODE,delta=1
    67                           	psect	text53,global,reloc=2,class=CODE,delta=1
    68                           	psect	text54,global,reloc=2,class=CODE,delta=1
    69                           	psect	text55,global,reloc=2,class=CODE,delta=1
    70                           	psect	text56,global,reloc=2,class=CODE,delta=1
    71                           	psect	text57,global,reloc=2,class=CODE,delta=1
    72                           	psect	text58,global,reloc=2,class=CODE,delta=1
    73                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    74                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    75                           	psect	text60,global,reloc=2,class=CODE,delta=1
    76                           	psect	text61,global,reloc=2,class=CODE,delta=1
    77                           	psect	text62,global,reloc=2,class=CODE,delta=1
    78                           	psect	text63,global,reloc=2,class=CODE,delta=1
    79                           	psect	text64,global,reloc=2,class=CODE,delta=1
    80                           	psect	text65,global,reloc=2,class=CODE,delta=1
    81                           	psect	text66,global,reloc=2,class=CODE,delta=1
    82                           	psect	text67,global,reloc=2,class=CODE,delta=1
    83                           	psect	text68,global,reloc=2,class=CODE,delta=1
    84                           	psect	text69,global,reloc=2,class=CODE,delta=1
    85                           	psect	text70,global,reloc=2,class=CODE,delta=1
    86                           	psect	text71,global,reloc=2,class=CODE,delta=1
    87                           	psect	text72,global,reloc=2,class=CODE,delta=1
    88                           	psect	text73,global,reloc=2,class=CODE,delta=1
    89                           	psect	text74,global,reloc=2,class=CODE,delta=1
    90                           	psect	text75,global,reloc=2,class=CODE,delta=1
    91                           	psect	text76,global,reloc=2,class=CODE,delta=1
    92                           	psect	text77,global,reloc=2,class=CODE,delta=1
    93                           	psect	text78,global,reloc=2,class=CODE,delta=1
    94                           	psect	text79,global,reloc=2,class=CODE,delta=1
    95                           	psect	text80,global,reloc=2,class=CODE,delta=1
    96                           	psect	text81,global,reloc=2,class=CODE,delta=1
    97                           	psect	text82,global,reloc=2,class=CODE,delta=1
    98                           	psect	text83,global,reloc=2,class=CODE,delta=1
    99                           	psect	text84,global,reloc=2,class=CODE,delta=1
   100                           	psect	text85,global,reloc=2,class=CODE,delta=1
   101                           	psect	text86,global,reloc=2,class=CODE,delta=1
   102                           	psect	text87,global,reloc=2,class=CODE,delta=1
   103                           	psect	text88,global,reloc=2,class=CODE,delta=1
   104                           	psect	text89,global,reloc=2,class=CODE,delta=1
   105                           	psect	text90,global,reloc=2,class=CODE,delta=1
   106                           	psect	text91,global,reloc=2,class=CODE,delta=1
   107                           	psect	text92,global,reloc=2,class=CODE,delta=1
   108                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   109                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   110                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   111  0000                     
   112                           ; Version 1.40
   113                           ; Generated 01/12/2016 GMT
   114                           ; 
   115                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
   116                           ; All rights reserved.
   117                           ; 
   118                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   119                           ; 
   120                           ; Redistribution and use in source and binary forms, with or without modification, are
   121                           ; permitted provided that the following conditions are met:
   122                           ; 
   123                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   124                           ;        conditions and the following disclaimer.
   125                           ; 
   126                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   127                           ;        of conditions and the following disclaimer in the documentation and/or other
   128                           ;        materials provided with the distribution.
   129                           ; 
   130                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   131                           ;        software without specific prior written permission.
   132                           ; 
   133                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   134                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   135                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   136                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   137                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   138                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   139                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   140                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   141                           ; 
   142                           ; 
   143                           ; Code-generator required, PIC18F4620 Definitions
   144                           ; 
   145                           ; SFR Addresses
   146  0000                     
   147                           	psect	idataBANK1
   148  004AB4                     __pidataBANK1:
   149                           	opt stack 0
   150                           
   151                           ;initializer for UI@F3226
   152  004AB4  4D                 	db	77
   153  004AB5  4D                 	db	77
   154  004AB6  4D                 	db	77
   155  004AB7  00                 	db	0
   156                           
   157                           ;initializer for printRTC@F3217
   158  004AB8  4D                 	db	77
   159  004AB9  4D                 	db	77
   160  004ABA  4D                 	db	77
   161  004ABB  00                 	db	0
   162                           
   163                           	psect	mediumconst
   164  00FB00                     __pmediumconst:
   165                           	opt stack 0
   166  00FB00  00                 	db	0
   167  00FB01                     _keys:
   168                           	opt stack 0
   169  00FB01  31                 	db	49
   170  00FB02  32                 	db	50
   171  00FB03  33                 	db	51
   172  00FB04  41                 	db	65
   173  00FB05  34                 	db	52
   174  00FB06  35                 	db	53
   175  00FB07  36                 	db	54
   176  00FB08  42                 	db	66
   177  00FB09  37                 	db	55
   178  00FB0A  38                 	db	56
   179  00FB0B  39                 	db	57
   180  00FB0C  43                 	db	67
   181  00FB0D  2A                 	db	42
   182  00FB0E  30                 	db	48
   183  00FB0F  23                 	db	35
   184  00FB10  44                 	db	68
   185  00FB11  00                 	db	0
   186  00FB12                     __end_of_keys:
   187                           	opt stack 0
   188  00FB12                     _dpowers:
   189                           	opt stack 0
   190  00FB12  0001               	dw	1
   191  00FB14  000A               	dw	10
   192  00FB16  0064               	dw	100
   193  00FB18  03E8               	dw	1000
   194  00FB1A  2710               	dw	10000
   195  00FB1C                     __end_of_dpowers:
   196                           	opt stack 0
   197  0000                     _ADCON0	set	4034
   198  0000                     _ADCON0bits	set	4034
   199  0000                     _ADCON1	set	4033
   200  0000                     _ADCON2	set	4032
   201  0000                     _ADRESH	set	4036
   202  0000                     _ADRESL	set	4035
   203  0000                     _CMCONbits	set	4020
   204  0000                     _CVRCON	set	4021
   205  0000                     _EEADR	set	4009
   206  0000                     _EEADRH	set	4010
   207  0000                     _EECON1bits	set	4006
   208  0000                     _EECON2	set	4007
   209  0000                     _EEDATA	set	4008
   210  0000                     _INTCONbits	set	4082
   211  0000                     _LATA	set	3977
   212  0000                     _LATAbits	set	3977
   213  0000                     _LATB	set	3978
   214  0000                     _LATC	set	3979
   215  0000                     _LATCbits	set	3979
   216  0000                     _LATD	set	3980
   217  0000                     _LATDbits	set	3980
   218  0000                     _LATE	set	3981
   219  0000                     _LATEbits	set	3981
   220  0000                     _OSCCON	set	4051
   221  0000                     _OSCTUNEbits	set	3995
   222  0000                     _PIR2bits	set	4001
   223  0000                     _PORTAbits	set	3968
   224  0000                     _PORTB	set	3969
   225  0000                     _PORTBbits	set	3969
   226  0000                     _SSPADD	set	4040
   227  0000                     _SSPBUF	set	4041
   228  0000                     _SSPCON1	set	4038
   229  0000                     _SSPCON2	set	4037
   230  0000                     _SSPSTAT	set	4039
   231  0000                     _T0CON	set	4053
   232  0000                     _T1CON	set	4045
   233  0000                     _T3CON	set	4017
   234  0000                     _TMR0H	set	4055
   235  0000                     _TMR0L	set	4054
   236  0000                     _TMR1H	set	4047
   237  0000                     _TMR1L	set	4046
   238  0000                     _TMR3H	set	4019
   239  0000                     _TMR3L	set	4018
   240  0000                     _TRISA	set	3986
   241  0000                     _TRISB	set	3987
   242  0000                     _TRISC	set	3988
   243  0000                     _TRISD	set	3989
   244  0000                     _TRISE	set	3990
   245  0000                     _ACKDT	set	32301
   246  0000                     _ACKEN	set	32300
   247  0000                     _ADIE	set	31982
   248  0000                     _INT1IE	set	32643
   249  0000                     _INT1IF	set	32640
   250  0000                     _PEIE	set	32662
   251  0000                     _PEN	set	32298
   252  0000                     _RCEN	set	32299
   253  0000                     _RSEN	set	32297
   254  0000                     _SEN	set	32296
   255  0000                     _TMR0IE	set	32661
   256  0000                     _TMR0IF	set	32658
   257  0000                     _TMR0ON	set	32431
   258  0000                     _TMR1IE	set	31976
   259  0000                     _TMR1IF	set	31984
   260  0000                     _TMR1ON	set	32360
   261  0000                     _TMR2IE	set	31977
   262  0000                     _TMR3IE	set	32001
   263  0000                     _TMR3IF	set	32009
   264  0000                     _TMR3ON	set	32136
   265  0000                     _TRISC3	set	31907
   266  0000                     _TRISC4	set	31908
   267  0000                     _nRBPU	set	32655
   268  00FB1C                     STR_21:
   269  00FB1C  25                 	db	37
   270  00FB1D  30                 	db	48	;'0'
   271  00FB1E  32                 	db	50	;'2'
   272  00FB1F  64                 	db	100	;'d'
   273  00FB20  25                 	db	37
   274  00FB21  73                 	db	115	;'s'
   275  00FB22  20                 	db	32
   276  00FB23  7C                 	db	124
   277  00FB24  20                 	db	32
   278  00FB25  25                 	db	37
   279  00FB26  30                 	db	48	;'0'
   280  00FB27  32                 	db	50	;'2'
   281  00FB28  64                 	db	100	;'d'
   282  00FB29  3A                 	db	58	;':'
   283  00FB2A  25                 	db	37
   284  00FB2B  30                 	db	48	;'0'
   285  00FB2C  32                 	db	50	;'2'
   286  00FB2D  64                 	db	100	;'d'
   287  00FB2E  3A                 	db	58	;':'
   288  00FB2F  25                 	db	37
   289  00FB30  30                 	db	48	;'0'
   290  00FB31  32                 	db	50	;'2'
   291  00FB32  64                 	db	100	;'d'
   292  00FB33  00                 	db	0
   293  00FB34                     STR_66:
   294  00FB34  28                 	db	40
   295  00FB35  64                 	db	100	;'d'
   296  00FB36  61                 	db	97	;'a'
   297  00FB37  74                 	db	116	;'t'
   298  00FB38  61                 	db	97	;'a'
   299  00FB39  3A                 	db	58	;':'
   300  00FB3A  20                 	db	32
   301  00FB3B  25                 	db	37
   302  00FB3C  75                 	db	117	;'u'
   303  00FB3D  2C                 	db	44
   304  00FB3E  20                 	db	32
   305  00FB3F  61                 	db	97	;'a'
   306  00FB40  64                 	db	100	;'d'
   307  00FB41  64                 	db	100	;'d'
   308  00FB42  72                 	db	114	;'r'
   309  00FB43  3A                 	db	58	;':'
   310  00FB44  20                 	db	32
   311  00FB45  25                 	db	37
   312  00FB46  75                 	db	117	;'u'
   313  00FB47  29                 	db	41
   314  00FB48  00                 	db	0
   315  00FB49                     STR_111:
   316  00FB49  44                 	db	68	;'D'
   317  00FB4A  20                 	db	32
   318  00FB4B  57                 	db	87	;'W'
   319  00FB4C  49                 	db	73	;'I'
   320  00FB4D  4C                 	db	76	;'L'
   321  00FB4E  4C                 	db	76	;'L'
   322  00FB4F  20                 	db	32
   323  00FB50  52                 	db	82	;'R'
   324  00FB51  45                 	db	69	;'E'
   325  00FB52  54                 	db	84	;'T'
   326  00FB53  55                 	db	85	;'U'
   327  00FB54  52                 	db	82	;'R'
   328  00FB55  4E                 	db	78	;'N'
   329  00FB56  20                 	db	32
   330  00FB57  20                 	db	32
   331  00FB58  20                 	db	32
   332  00FB59  20                 	db	32
   333  00FB5A  00                 	db	0
   334  00FB5B                     STR_112:
   335  00FB5B  4F                 	db	79	;'O'
   336  00FB5C  54                 	db	84	;'T'
   337  00FB5D  48                 	db	72	;'H'
   338  00FB5E  45                 	db	69	;'E'
   339  00FB5F  52                 	db	82	;'R'
   340  00FB60  20                 	db	32
   341  00FB61  53                 	db	83	;'S'
   342  00FB62  45                 	db	69	;'E'
   343  00FB63  54                 	db	84	;'T'
   344  00FB64  53                 	db	83	;'S'
   345  00FB65  20                 	db	32
   346  00FB66  52                 	db	82	;'R'
   347  00FB67  41                 	db	65	;'A'
   348  00FB68  35                 	db	53	;'5'
   349  00FB69  20                 	db	32
   350  00FB6A  20                 	db	32
   351  00FB6B  20                 	db	32
   352  00FB6C  00                 	db	0
   353  00FB6D                     STR_116:
   354  00FB6D  53                 	db	83	;'S'
   355  00FB6E  3A                 	db	58	;':'
   356  00FB6F  20                 	db	32
   357  00FB70  44                 	db	68	;'D'
   358  00FB71  20                 	db	32
   359  00FB72  57                 	db	87	;'W'
   360  00FB73  49                 	db	73	;'I'
   361  00FB74  4C                 	db	76	;'L'
   362  00FB75  4C                 	db	76	;'L'
   363  00FB76  20                 	db	32
   364  00FB77  52                 	db	82	;'R'
   365  00FB78  45                 	db	69	;'E'
   366  00FB79  54                 	db	84	;'T'
   367  00FB7A  55                 	db	85	;'U'
   368  00FB7B  52                 	db	82	;'R'
   369  00FB7C  4E                 	db	78	;'N'
   370  00FB7D  20                 	db	32
   371  00FB7E  00                 	db	0
   372  00FB7F                     STR_119:
   373  00FB7F  4F                 	db	79	;'O'
   374  00FB80  54                 	db	84	;'T'
   375  00FB81  48                 	db	72	;'H'
   376  00FB82  45                 	db	69	;'E'
   377  00FB83  52                 	db	82	;'R'
   378  00FB84  20                 	db	32
   379  00FB85  54                 	db	84	;'T'
   380  00FB86  4F                 	db	79	;'O'
   381  00FB87  47                 	db	71	;'G'
   382  00FB88  47                 	db	71	;'G'
   383  00FB89  4C                 	db	76	;'L'
   384  00FB8A  45                 	db	69	;'E'
   385  00FB8B  53                 	db	83	;'S'
   386  00FB8C  20                 	db	32
   387  00FB8D  43                 	db	67	;'C'
   388  00FB8E  41                 	db	65	;'A'
   389  00FB8F  4D                 	db	77	;'M'
   390  00FB90  00                 	db	0
   391  00FB91                     STR_3:
   392  00FB91  2D                 	db	45
   393  00FB92  2D                 	db	45
   394  00FB93  20                 	db	32
   395  00FB94  4C                 	db	76	;'L'
   396  00FB95  4F                 	db	79	;'O'
   397  00FB96  47                 	db	71	;'G'
   398  00FB97  20                 	db	32
   399  00FB98  25                 	db	37
   400  00FB99  32                 	db	50	;'2'
   401  00FB9A  64                 	db	100	;'d'
   402  00FB9B  20                 	db	32
   403  00FB9C  48                 	db	72	;'H'
   404  00FB9D  45                 	db	69	;'E'
   405  00FB9E  52                 	db	82	;'R'
   406  00FB9F  45                 	db	69	;'E'
   407  00FBA0  2D                 	db	45
   408  00FBA1  2D                 	db	45
   409  00FBA2  00                 	db	0
   410  00FBA3                     STR_1:
   411  00FBA3  52                 	db	82	;'R'
   412  00FBA4  45                 	db	69	;'E'
   413  00FBA5  53                 	db	83	;'S'
   414  00FBA6  55                 	db	85	;'U'
   415  00FBA7  4C                 	db	76	;'L'
   416  00FBA8  54                 	db	84	;'T'
   417  00FBA9  53                 	db	83	;'S'
   418  00FBAA  20                 	db	32
   419  00FBAB  49                 	db	73	;'I'
   420  00FBAC  4E                 	db	78	;'N'
   421  00FBAD  20                 	db	32
   422  00FBAE  4C                 	db	76	;'L'
   423  00FBAF  4F                 	db	79	;'O'
   424  00FBB0  47                 	db	71	;'G'
   425  00FBB1  20                 	db	32
   426  00FBB2  25                 	db	37
   427  00FBB3  64                 	db	100	;'d'
   428  00FBB4  00                 	db	0
   429  00FBB5                     STR_102:
   430  00FBB5  4D                 	db	77	;'M'
   431  00FBB6  49                 	db	73	;'I'
   432  00FBB7  44                 	db	68	;'D'
   433  00FBB8  20                 	db	32
   434  00FBB9  2D                 	db	45
   435  00FBBA  2D                 	db	45
   436  00FBBB  20                 	db	32
   437  00FBBC  32                 	db	50	;'2'
   438  00FBBD  73                 	db	115	;'s'
   439  00FBBE  20                 	db	32
   440  00FBBF  20                 	db	32
   441  00FBC0  20                 	db	32
   442  00FBC1  20                 	db	32
   443  00FBC2  20                 	db	32
   444  00FBC3  20                 	db	32
   445  00FBC4  20                 	db	32
   446  00FBC5  00                 	db	0
   447  00FBC6                     STR_105:
   448  00FBC6  44                 	db	68	;'D'
   449  00FBC7  52                 	db	82	;'R'
   450  00FBC8  4F                 	db	79	;'O'
   451  00FBC9  50                 	db	80	;'P'
   452  00FBCA  20                 	db	32
   453  00FBCB  2D                 	db	45
   454  00FBCC  2D                 	db	45
   455  00FBCD  20                 	db	32
   456  00FBCE  32                 	db	50	;'2'
   457  00FBCF  73                 	db	115	;'s'
   458  00FBD0  20                 	db	32
   459  00FBD1  20                 	db	32
   460  00FBD2  20                 	db	32
   461  00FBD3  20                 	db	32
   462  00FBD4  20                 	db	32
   463  00FBD5  20                 	db	32
   464  00FBD6  00                 	db	0
   465  00FBD7                     STR_99:
   466  00FBD7  4C                 	db	76	;'L'
   467  00FBD8  45                 	db	69	;'E'
   468  00FBD9  46                 	db	70	;'F'
   469  00FBDA  54                 	db	84	;'T'
   470  00FBDB  20                 	db	32
   471  00FBDC  2D                 	db	45
   472  00FBDD  2D                 	db	45
   473  00FBDE  20                 	db	32
   474  00FBDF  32                 	db	50	;'2'
   475  00FBE0  73                 	db	115	;'s'
   476  00FBE1  20                 	db	32
   477  00FBE2  20                 	db	32
   478  00FBE3  20                 	db	32
   479  00FBE4  20                 	db	32
   480  00FBE5  20                 	db	32
   481  00FBE6  20                 	db	32
   482  00FBE7  00                 	db	0
   483  00FBE8                     STR_104:
   484  00FBE8  4C                 	db	76	;'L'
   485  00FBE9  45                 	db	69	;'E'
   486  00FBEA  56                 	db	86	;'V'
   487  00FBEB  45                 	db	69	;'E'
   488  00FBEC  4C                 	db	76	;'L'
   489  00FBED  20                 	db	32
   490  00FBEE  2D                 	db	45
   491  00FBEF  2D                 	db	45
   492  00FBF0  20                 	db	32
   493  00FBF1  32                 	db	50	;'2'
   494  00FBF2  73                 	db	115	;'s'
   495  00FBF3  20                 	db	32
   496  00FBF4  20                 	db	32
   497  00FBF5  20                 	db	32
   498  00FBF6  20                 	db	32
   499  00FBF7  20                 	db	32
   500  00FBF8  00                 	db	0
   501  00FBF9                     STR_98:
   502  00FBF9  52                 	db	82	;'R'
   503  00FBFA  49                 	db	73	;'I'
   504  00FBFB  47                 	db	71	;'G'
   505  00FBFC  48                 	db	72	;'H'
   506  00FBFD  54                 	db	84	;'T'
   507  00FBFE  20                 	db	32
   508  00FBFF  2D                 	db	45
   509  00FC00  2D                 	db	45
   510  00FC01  20                 	db	32
   511  00FC02  32                 	db	50	;'2'
   512  00FC03  73                 	db	115	;'s'
   513  00FC04  20                 	db	32
   514  00FC05  20                 	db	32
   515  00FC06  20                 	db	32
   516  00FC07  20                 	db	32
   517  00FC08  20                 	db	32
   518  00FC09  00                 	db	0
   519  00FC0A                     STR_97:
   520  00FC0A  4D                 	db	77	;'M'
   521  00FC0B  49                 	db	73	;'I'
   522  00FC0C  44                 	db	68	;'D'
   523  00FC0D  44                 	db	68	;'D'
   524  00FC0E  4C                 	db	76	;'L'
   525  00FC0F  45                 	db	69	;'E'
   526  00FC10  20                 	db	32
   527  00FC11  2D                 	db	45
   528  00FC12  2D                 	db	45
   529  00FC13  20                 	db	32
   530  00FC14  32                 	db	50	;'2'
   531  00FC15  73                 	db	115	;'s'
   532  00FC16  20                 	db	32
   533  00FC17  20                 	db	32
   534  00FC18  20                 	db	32
   535  00FC19  20                 	db	32
   536  00FC1A  00                 	db	0
   537  00FC1B  44                 	db	68	;'D'
   538  00FC1C  20                 	db	32
   539  00FC1D  57                 	db	87	;'W'
   540  00FC1E  49                 	db	73	;'I'
   541  00FC1F  4C                 	db	76	;'L'
   542  00FC20  4C                 	db	76	;'L'
   543  00FC21  20                 	db	32
   544  00FC22  52                 	db	82	;'R'
   545  00FC23  45                 	db	69	;'E'
   546  00FC24  54                 	db	84	;'T'
   547  00FC25  55                 	db	85	;'U'
   548  00FC26  52                 	db	82	;'R'
   549  00FC27  4E                 	db	78	;'N'
   550  00FC28  20                 	db	32
   551  00FC29  20                 	db	32
   552  00FC2A  20                 	db	32
   553  00FC2B  00                 	db	0
   554  00FC2C                     STR_100:
   555  00FC2C  4D                 	db	77	;'M'
   556  00FC2D  49                 	db	73	;'I'
   557  00FC2E  44                 	db	68	;'D'
   558  00FC2F  2D                 	db	45
   559  00FC30  4C                 	db	76	;'L'
   560  00FC31  45                 	db	69	;'E'
   561  00FC32  46                 	db	70	;'F'
   562  00FC33  54                 	db	84	;'T'
   563  00FC34  20                 	db	32
   564  00FC35  2D                 	db	45
   565  00FC36  2D                 	db	45
   566  00FC37  20                 	db	32
   567  00FC38  32                 	db	50	;'2'
   568  00FC39  73                 	db	115	;'s'
   569  00FC3A  20                 	db	32
   570  00FC3B  20                 	db	32
   571  00FC3C  00                 	db	0
   572  00FC3D                     STR_101:
   573  00FC3D  4D                 	db	77	;'M'
   574  00FC3E  49                 	db	73	;'I'
   575  00FC3F  44                 	db	68	;'D'
   576  00FC40  2D                 	db	45
   577  00FC41  52                 	db	82	;'R'
   578  00FC42  49                 	db	73	;'I'
   579  00FC43  47                 	db	71	;'G'
   580  00FC44  48                 	db	72	;'H'
   581  00FC45  54                 	db	84	;'T'
   582  00FC46  20                 	db	32
   583  00FC47  2D                 	db	45
   584  00FC48  2D                 	db	45
   585  00FC49  20                 	db	32
   586  00FC4A  32                 	db	50	;'2'
   587  00FC4B  73                 	db	115	;'s'
   588  00FC4C  20                 	db	32
   589  00FC4D  00                 	db	0
   590  00FC4E  45                 	db	69	;'E'
   591  00FC4F  4C                 	db	76	;'L'
   592  00FC50  53                 	db	83	;'S'
   593  00FC51  45                 	db	69	;'E'
   594  00FC52  20                 	db	32
   595  00FC53  54                 	db	84	;'T'
   596  00FC54  4F                 	db	79	;'O'
   597  00FC55  47                 	db	71	;'G'
   598  00FC56  47                 	db	71	;'G'
   599  00FC57  4C                 	db	76	;'L'
   600  00FC58  45                 	db	69	;'E'
   601  00FC59  53                 	db	83	;'S'
   602  00FC5A  20                 	db	32
   603  00FC5B  52                 	db	82	;'R'
   604  00FC5C  41                 	db	65	;'A'
   605  00FC5D  35                 	db	53	;'5'
   606  00FC5E  00                 	db	0
   607  00FC5F                     STR_72:
   608  00FC5F  41                 	db	65	;'A'
   609  00FC60  4C                 	db	76	;'L'
   610  00FC61  47                 	db	71	;'G'
   611  00FC62  31                 	db	49	;'1'
   612  00FC63  3A                 	db	58	;':'
   613  00FC64  20                 	db	32
   614  00FC65  39                 	db	57	;'9'
   615  00FC66  20                 	db	32
   616  00FC67  50                 	db	80	;'P'
   617  00FC68  4F                 	db	79	;'O'
   618  00FC69  50                 	db	80	;'P'
   619  00FC6A  4E                 	db	78	;'N'
   620  00FC6B  4F                 	db	79	;'O'
   621  00FC6C  54                 	db	84	;'T'
   622  00FC6D  41                 	db	65	;'A'
   623  00FC6E  42                 	db	66	;'B'
   624  00FC6F  00                 	db	0
   625  00FC70                     STR_68:
   626  00FC70  31                 	db	49	;'1'
   627  00FC71  2E                 	db	46
   628  00FC72  41                 	db	65	;'A'
   629  00FC73  4C                 	db	76	;'L'
   630  00FC74  47                 	db	71	;'G'
   631  00FC75  7C                 	db	124
   632  00FC76  32                 	db	50	;'2'
   633  00FC77  2E                 	db	46
   634  00FC78  53                 	db	83	;'S'
   635  00FC79  4E                 	db	78	;'N'
   636  00FC7A  52                 	db	82	;'R'
   637  00FC7B  7C                 	db	124
   638  00FC7C  33                 	db	51	;'3'
   639  00FC7D  2E                 	db	46
   640  00FC7E  41                 	db	65	;'A'
   641  00FC7F  43                 	db	67	;'C'
   642  00FC80  00                 	db	0
   643  00FC81                     STR_92:
   644  00FC81  54                 	db	84	;'T'
   645  00FC82  53                 	db	83	;'S'
   646  00FC83  54                 	db	84	;'T'
   647  00FC84  3A                 	db	58	;':'
   648  00FC85  20                 	db	32
   649  00FC86  43                 	db	67	;'C'
   650  00FC87  4F                 	db	79	;'O'
   651  00FC88  4E                 	db	78	;'N'
   652  00FC89  44                 	db	68	;'D'
   653  00FC8A  20                 	db	32
   654  00FC8B  53                 	db	83	;'S'
   655  00FC8C  4F                 	db	79	;'O'
   656  00FC8D  4C                 	db	76	;'L'
   657  00FC8E  4E                 	db	78	;'N'
   658  00FC8F  27                 	db	39
   659  00FC90  44                 	db	68	;'D'
   660  00FC91  00                 	db	0
   661  00FC92                     STR_94:
   662  00FC92  54                 	db	84	;'T'
   663  00FC93  53                 	db	83	;'S'
   664  00FC94  54                 	db	84	;'T'
   665  00FC95  3A                 	db	58	;':'
   666  00FC96  20                 	db	32
   667  00FC97  50                 	db	80	;'P'
   668  00FC98  55                 	db	85	;'U'
   669  00FC99  53                 	db	83	;'S'
   670  00FC9A  48                 	db	72	;'H'
   671  00FC9B  20                 	db	32
   672  00FC9C  53                 	db	83	;'S'
   673  00FC9D  4F                 	db	79	;'O'
   674  00FC9E  4C                 	db	76	;'L'
   675  00FC9F  4E                 	db	78	;'N'
   676  00FCA0  27                 	db	39
   677  00FCA1  44                 	db	68	;'D'
   678  00FCA2  00                 	db	0
   679  00FCA3                     STR_69:
   680  00FCA3  34                 	db	52	;'4'
   681  00FCA4  2E                 	db	46
   682  00FCA5  48                 	db	72	;'H'
   683  00FCA6  49                 	db	73	;'I'
   684  00FCA7  7C                 	db	124
   685  00FCA8  35                 	db	53	;'5'
   686  00FCA9  2E                 	db	46
   687  00FCAA  54                 	db	84	;'T'
   688  00FCAB  4F                 	db	79	;'O'
   689  00FCAC  47                 	db	71	;'G'
   690  00FCAD  7C                 	db	124
   691  00FCAE  36                 	db	54	;'6'
   692  00FCAF  2E                 	db	46
   693  00FCB0  45                 	db	69	;'E'
   694  00FCB1  45                 	db	69	;'E'
   695  00FCB2  50                 	db	80	;'P'
   696  00FCB3  00                 	db	0
   697  00FCB4                     STR_110:
   698  00FCB4  54                 	db	84	;'T'
   699  00FCB5  53                 	db	83	;'S'
   700  00FCB6  54                 	db	84	;'T'
   701  00FCB7  3A                 	db	58	;':'
   702  00FCB8  20                 	db	32
   703  00FCB9  42                 	db	66	;'B'
   704  00FCBA  4F                 	db	79	;'O'
   705  00FCBB  54                 	db	84	;'T'
   706  00FCBC  48                 	db	72	;'H'
   707  00FCBD  20                 	db	32
   708  00FCBE  53                 	db	83	;'S'
   709  00FCBF  45                 	db	69	;'E'
   710  00FCC0  52                 	db	82	;'R'
   711  00FCC1  56                 	db	86	;'V'
   712  00FCC2  4F                 	db	79	;'O'
   713  00FCC3  53                 	db	83	;'S'
   714  00FCC4  00                 	db	0
   715  00FCC5                     STR_41:
   716  00FCC5  4C                 	db	76	;'L'
   717  00FCC6  4F                 	db	79	;'O'
   718  00FCC7  47                 	db	71	;'G'
   719  00FCC8  20                 	db	32
   720  00FCC9  31                 	db	49	;'1'
   721  00FCCA  20                 	db	32
   722  00FCCB  20                 	db	32
   723  00FCCC  20                 	db	32
   724  00FCCD  20                 	db	32
   725  00FCCE  20                 	db	32
   726  00FCCF  20                 	db	32
   727  00FCD0  20                 	db	32
   728  00FCD1  20                 	db	32
   729  00FCD2  20                 	db	32
   730  00FCD3  20                 	db	32
   731  00FCD4  20                 	db	32
   732  00FCD5  00                 	db	0
   733  00FCD6                     STR_40:
   734  00FCD6  4C                 	db	76	;'L'
   735  00FCD7  4F                 	db	79	;'O'
   736  00FCD8  47                 	db	71	;'G'
   737  00FCD9  20                 	db	32
   738  00FCDA  32                 	db	50	;'2'
   739  00FCDB  20                 	db	32
   740  00FCDC  20                 	db	32
   741  00FCDD  20                 	db	32
   742  00FCDE  20                 	db	32
   743  00FCDF  20                 	db	32
   744  00FCE0  20                 	db	32
   745  00FCE1  20                 	db	32
   746  00FCE2  20                 	db	32
   747  00FCE3  20                 	db	32
   748  00FCE4  20                 	db	32
   749  00FCE5  20                 	db	32
   750  00FCE6  00                 	db	0
   751  00FCE7                     STR_44:
   752  00FCE7  4C                 	db	76	;'L'
   753  00FCE8  4F                 	db	79	;'O'
   754  00FCE9  47                 	db	71	;'G'
   755  00FCEA  20                 	db	32
   756  00FCEB  33                 	db	51	;'3'
   757  00FCEC  20                 	db	32
   758  00FCED  20                 	db	32
   759  00FCEE  20                 	db	32
   760  00FCEF  20                 	db	32
   761  00FCF0  20                 	db	32
   762  00FCF1  20                 	db	32
   763  00FCF2  20                 	db	32
   764  00FCF3  20                 	db	32
   765  00FCF4  20                 	db	32
   766  00FCF5  20                 	db	32
   767  00FCF6  20                 	db	32
   768  00FCF7  00                 	db	0
   769  00FCF8                     STR_48:
   770  00FCF8  4C                 	db	76	;'L'
   771  00FCF9  4F                 	db	79	;'O'
   772  00FCFA  47                 	db	71	;'G'
   773  00FCFB  20                 	db	32
   774  00FCFC  34                 	db	52	;'4'
   775  00FCFD  20                 	db	32
   776  00FCFE  20                 	db	32
   777  00FCFF  20                 	db	32
   778  00FD00  20                 	db	32
   779  00FD01  20                 	db	32
   780  00FD02  20                 	db	32
   781  00FD03  20                 	db	32
   782  00FD04  20                 	db	32
   783  00FD05  20                 	db	32
   784  00FD06  20                 	db	32
   785  00FD07  20                 	db	32
   786  00FD08  00                 	db	0
   787  00FD09                     STR_36:
   788  00FD09  33                 	db	51	;'3'
   789  00FD0A  2E                 	db	46
   790  00FD0B  20                 	db	32
   791  00FD0C  4C                 	db	76	;'L'
   792  00FD0D  4F                 	db	79	;'O'
   793  00FD0E  47                 	db	71	;'G'
   794  00FD0F  53                 	db	83	;'S'
   795  00FD10  20                 	db	32
   796  00FD11  20                 	db	32
   797  00FD12  20                 	db	32
   798  00FD13  20                 	db	32
   799  00FD14  20                 	db	32
   800  00FD15  20                 	db	32
   801  00FD16  20                 	db	32
   802  00FD17  20                 	db	32
   803  00FD18  20                 	db	32
   804  00FD19  00                 	db	0
   805  00FD1A                     STR_32:
   806  00FD1A  32                 	db	50	;'2'
   807  00FD1B  2E                 	db	46
   808  00FD1C  20                 	db	32
   809  00FD1D  53                 	db	83	;'S'
   810  00FD1E  4F                 	db	79	;'O'
   811  00FD1F  52                 	db	82	;'R'
   812  00FD20  54                 	db	84	;'T'
   813  00FD21  20                 	db	32
   814  00FD22  20                 	db	32
   815  00FD23  20                 	db	32
   816  00FD24  20                 	db	32
   817  00FD25  20                 	db	32
   818  00FD26  20                 	db	32
   819  00FD27  20                 	db	32
   820  00FD28  20                 	db	32
   821  00FD29  20                 	db	32
   822  00FD2A  00                 	db	0
   823  00FD2B                     STR_33:
   824  00FD2B  31                 	db	49	;'1'
   825  00FD2C  2E                 	db	46
   826  00FD2D  20                 	db	32
   827  00FD2E  44                 	db	68	;'D'
   828  00FD2F  41                 	db	65	;'A'
   829  00FD30  54                 	db	84	;'T'
   830  00FD31  45                 	db	69	;'E'
   831  00FD32  2F                 	db	47
   832  00FD33  54                 	db	84	;'T'
   833  00FD34  49                 	db	73	;'I'
   834  00FD35  4D                 	db	77	;'M'
   835  00FD36  45                 	db	69	;'E'
   836  00FD37  20                 	db	32
   837  00FD38  20                 	db	32
   838  00FD39  20                 	db	32
   839  00FD3A  20                 	db	32
   840  00FD3B  00                 	db	0
   841  00FD3C                     STR_24:
   842  00FD3C  20                 	db	32
   843  00FD3D  2D                 	db	45
   844  00FD3E  2D                 	db	45
   845  00FD3F  20                 	db	32
   846  00FD40  50                 	db	80	;'P'
   847  00FD41  4F                 	db	79	;'O'
   848  00FD42  50                 	db	80	;'P'
   849  00FD43  20                 	db	32
   850  00FD44  20                 	db	32
   851  00FD45  43                 	db	67	;'C'
   852  00FD46  41                 	db	65	;'A'
   853  00FD47  4E                 	db	78	;'N'
   854  00FD48  20                 	db	32
   855  00FD49  2D                 	db	45
   856  00FD4A  2D                 	db	45
   857  00FD4B  20                 	db	32
   858  00FD4C  00                 	db	0
   859  00FD4D                     STR_26:
   860  00FD4D  20                 	db	32
   861  00FD4E  2D                 	db	45
   862  00FD4F  2D                 	db	45
   863  00FD50  20                 	db	32
   864  00FD51  53                 	db	83	;'S'
   865  00FD52  4F                 	db	79	;'O'
   866  00FD53  55                 	db	85	;'U'
   867  00FD54  50                 	db	80	;'P'
   868  00FD55  20                 	db	32
   869  00FD56  43                 	db	67	;'C'
   870  00FD57  41                 	db	65	;'A'
   871  00FD58  4E                 	db	78	;'N'
   872  00FD59  20                 	db	32
   873  00FD5A  2D                 	db	45
   874  00FD5B  2D                 	db	45
   875  00FD5C  20                 	db	32
   876  00FD5D  00                 	db	0
   877  00FD5E                     STR_28:
   878  00FD5E  2D                 	db	45
   879  00FD5F  2D                 	db	45
   880  00FD60  20                 	db	32
   881  00FD61  54                 	db	84	;'T'
   882  00FD62  4F                 	db	79	;'O'
   883  00FD63  54                 	db	84	;'T'
   884  00FD64  41                 	db	65	;'A'
   885  00FD65  4C                 	db	76	;'L'
   886  00FD66  20                 	db	32
   887  00FD67  43                 	db	67	;'C'
   888  00FD68  41                 	db	65	;'A'
   889  00FD69  4E                 	db	78	;'N'
   890  00FD6A  53                 	db	83	;'S'
   891  00FD6B  20                 	db	32
   892  00FD6C  2D                 	db	45
   893  00FD6D  2D                 	db	45
   894  00FD6E  00                 	db	0
   895  00FD6F                     STR_39:
   896  00FD6F  4C                 	db	76	;'L'
   897  00FD70  4F                 	db	79	;'O'
   898  00FD71  47                 	db	71	;'G'
   899  00FD72  20                 	db	32
   900  00FD73  31                 	db	49	;'1'
   901  00FD74  20                 	db	32
   902  00FD75  20                 	db	32
   903  00FD76  20                 	db	32
   904  00FD77  20                 	db	32
   905  00FD78  20                 	db	32
   906  00FD79  20                 	db	32
   907  00FD7A  20                 	db	32
   908  00FD7B  20                 	db	32
   909  00FD7C  20                 	db	32
   910  00FD7D  20                 	db	32
   911  00FD7E  3C                 	db	60	;'<'
   912  00FD7F  00                 	db	0
   913  00FD80                     STR_42:
   914  00FD80  4C                 	db	76	;'L'
   915  00FD81  4F                 	db	79	;'O'
   916  00FD82  47                 	db	71	;'G'
   917  00FD83  20                 	db	32
   918  00FD84  32                 	db	50	;'2'
   919  00FD85  20                 	db	32
   920  00FD86  20                 	db	32
   921  00FD87  20                 	db	32
   922  00FD88  20                 	db	32
   923  00FD89  20                 	db	32
   924  00FD8A  20                 	db	32
   925  00FD8B  20                 	db	32
   926  00FD8C  20                 	db	32
   927  00FD8D  20                 	db	32
   928  00FD8E  20                 	db	32
   929  00FD8F  3C                 	db	60	;'<'
   930  00FD90  00                 	db	0
   931  00FD91                     STR_46:
   932  00FD91  4C                 	db	76	;'L'
   933  00FD92  4F                 	db	79	;'O'
   934  00FD93  47                 	db	71	;'G'
   935  00FD94  20                 	db	32
   936  00FD95  33                 	db	51	;'3'
   937  00FD96  20                 	db	32
   938  00FD97  20                 	db	32
   939  00FD98  20                 	db	32
   940  00FD99  20                 	db	32
   941  00FD9A  20                 	db	32
   942  00FD9B  20                 	db	32
   943  00FD9C  20                 	db	32
   944  00FD9D  20                 	db	32
   945  00FD9E  20                 	db	32
   946  00FD9F  20                 	db	32
   947  00FDA0  3C                 	db	60	;'<'
   948  00FDA1  00                 	db	0
   949  00FDA2                     STR_50:
   950  00FDA2  4C                 	db	76	;'L'
   951  00FDA3  4F                 	db	79	;'O'
   952  00FDA4  47                 	db	71	;'G'
   953  00FDA5  20                 	db	32
   954  00FDA6  34                 	db	52	;'4'
   955  00FDA7  20                 	db	32
   956  00FDA8  20                 	db	32
   957  00FDA9  20                 	db	32
   958  00FDAA  20                 	db	32
   959  00FDAB  20                 	db	32
   960  00FDAC  20                 	db	32
   961  00FDAD  20                 	db	32
   962  00FDAE  20                 	db	32
   963  00FDAF  20                 	db	32
   964  00FDB0  20                 	db	32
   965  00FDB1  3C                 	db	60	;'<'
   966  00FDB2  00                 	db	0
   967  00FDB3                     STR_38:
   968  00FDB3  33                 	db	51	;'3'
   969  00FDB4  2E                 	db	46
   970  00FDB5  20                 	db	32
   971  00FDB6  4C                 	db	76	;'L'
   972  00FDB7  4F                 	db	79	;'O'
   973  00FDB8  47                 	db	71	;'G'
   974  00FDB9  53                 	db	83	;'S'
   975  00FDBA  20                 	db	32
   976  00FDBB  20                 	db	32
   977  00FDBC  20                 	db	32
   978  00FDBD  20                 	db	32
   979  00FDBE  20                 	db	32
   980  00FDBF  20                 	db	32
   981  00FDC0  20                 	db	32
   982  00FDC1  20                 	db	32
   983  00FDC2  3C                 	db	60	;'<'
   984  00FDC3  00                 	db	0
   985  00FDC4                     STR_34:
   986  00FDC4  32                 	db	50	;'2'
   987  00FDC5  2E                 	db	46
   988  00FDC6  20                 	db	32
   989  00FDC7  53                 	db	83	;'S'
   990  00FDC8  4F                 	db	79	;'O'
   991  00FDC9  52                 	db	82	;'R'
   992  00FDCA  54                 	db	84	;'T'
   993  00FDCB  20                 	db	32
   994  00FDCC  20                 	db	32
   995  00FDCD  20                 	db	32
   996  00FDCE  20                 	db	32
   997  00FDCF  20                 	db	32
   998  00FDD0  20                 	db	32
   999  00FDD1  20                 	db	32
  1000  00FDD2  20                 	db	32
  1001  00FDD3  3C                 	db	60	;'<'
  1002  00FDD4  00                 	db	0
  1003  00FDD5                     STR_31:
  1004  00FDD5  31                 	db	49	;'1'
  1005  00FDD6  2E                 	db	46
  1006  00FDD7  20                 	db	32
  1007  00FDD8  44                 	db	68	;'D'
  1008  00FDD9  41                 	db	65	;'A'
  1009  00FDDA  54                 	db	84	;'T'
  1010  00FDDB  45                 	db	69	;'E'
  1011  00FDDC  2F                 	db	47
  1012  00FDDD  54                 	db	84	;'T'
  1013  00FDDE  49                 	db	73	;'I'
  1014  00FDDF  4D                 	db	77	;'M'
  1015  00FDE0  45                 	db	69	;'E'
  1016  00FDE1  20                 	db	32
  1017  00FDE2  20                 	db	32
  1018  00FDE3  20                 	db	32
  1019  00FDE4  3C                 	db	60	;'<'
  1020  00FDE5  00                 	db	0
  1021  00FDE6                     STR_6:
  1022  00FDE6  50                 	db	80	;'P'
  1023  00FDE7  41                 	db	65	;'A'
  1024  00FDE8  55                 	db	85	;'U'
  1025  00FDE9  53                 	db	83	;'S'
  1026  00FDEA  45                 	db	69	;'E'
  1027  00FDEB  20                 	db	32
  1028  00FDEC  3C                 	db	60	;'<'
  1029  00FDED  20                 	db	32
  1030  00FDEE  7C                 	db	124
  1031  00FDEF  20                 	db	32
  1032  00FDF0  42                 	db	66	;'B'
  1033  00FDF1  41                 	db	65	;'A'
  1034  00FDF2  43                 	db	67	;'C'
  1035  00FDF3  4B                 	db	75	;'K'
  1036  00FDF4  20                 	db	32
  1037  00FDF5  3E                 	db	62	;'>'
  1038  00FDF6  00                 	db	0
  1039  00FDF7                     STR_30:
  1040  00FDF7  50                 	db	80	;'P'
  1041  00FDF8  55                 	db	85	;'U'
  1042  00FDF9  53                 	db	83	;'S'
  1043  00FDFA  48                 	db	72	;'H'
  1044  00FDFB  20                 	db	32
  1045  00FDFC  54                 	db	84	;'T'
  1046  00FDFD  4F                 	db	79	;'O'
  1047  00FDFE  20                 	db	32
  1048  00FDFF  43                 	db	67	;'C'
  1049  00FE00  4F                 	db	79	;'O'
  1050  00FE01  4E                 	db	78	;'N'
  1051  00FE02  54                 	db	84	;'T'
  1052  00FE03  49                 	db	73	;'I'
  1053  00FE04  4E                 	db	78	;'N'
  1054  00FE05  55                 	db	85	;'U'
  1055  00FE06  45                 	db	69	;'E'
  1056  00FE07  00                 	db	0
  1057  00FE08                     STR_27:
  1058  00FE08  4E                 	db	78	;'N'
  1059  00FE09  4C                 	db	76	;'L'
  1060  00FE0A  41                 	db	65	;'A'
  1061  00FE0B  42                 	db	66	;'B'
  1062  00FE0C  3A                 	db	58	;':'
  1063  00FE0D  20                 	db	32
  1064  00FE0E  25                 	db	37
  1065  00FE0F  64                 	db	100	;'d'
  1066  00FE10  7C                 	db	124
  1067  00FE11  4C                 	db	76	;'L'
  1068  00FE12  41                 	db	65	;'A'
  1069  00FE13  42                 	db	66	;'B'
  1070  00FE14  3A                 	db	58	;':'
  1071  00FE15  20                 	db	32
  1072  00FE16  25                 	db	37
  1073  00FE17  64                 	db	100	;'d'
  1074  00FE18  00                 	db	0
  1075  00FE19                     STR_25:
  1076  00FE19  4E                 	db	78	;'N'
  1077  00FE1A  54                 	db	84	;'T'
  1078  00FE1B  41                 	db	65	;'A'
  1079  00FE1C  42                 	db	66	;'B'
  1080  00FE1D  3A                 	db	58	;':'
  1081  00FE1E  20                 	db	32
  1082  00FE1F  25                 	db	37
  1083  00FE20  64                 	db	100	;'d'
  1084  00FE21  7C                 	db	124
  1085  00FE22  54                 	db	84	;'T'
  1086  00FE23  41                 	db	65	;'A'
  1087  00FE24  42                 	db	66	;'B'
  1088  00FE25  3A                 	db	58	;':'
  1089  00FE26  20                 	db	32
  1090  00FE27  25                 	db	37
  1091  00FE28  64                 	db	100	;'d'
  1092  00FE29  00                 	db	0
  1093  00FE2A                     STR_83:
  1094  00FE2A  4D                 	db	77	;'M'
  1095  00FE2B  41                 	db	65	;'A'
  1096  00FE2C  47                 	db	71	;'G'
  1097  00FE2D  5F                 	db	95	;'_'
  1098  00FE2E  73                 	db	115	;'s'
  1099  00FE2F  69                 	db	105	;'i'
  1100  00FE30  67                 	db	103	;'g'
  1101  00FE31  6E                 	db	110	;'n'
  1102  00FE32  61                 	db	97	;'a'
  1103  00FE33  6C                 	db	108	;'l'
  1104  00FE34  3A                 	db	58	;':'
  1105  00FE35  20                 	db	32
  1106  00FE36  25                 	db	37
  1107  00FE37  64                 	db	100	;'d'
  1108  00FE38  20                 	db	32
  1109  00FE39  00                 	db	0
  1110  00FE3A                     STR_103:
  1111  00FE3A  54                 	db	84	;'T'
  1112  00FE3B  53                 	db	83	;'S'
  1113  00FE3C  54                 	db	84	;'T'
  1114  00FE3D  3A                 	db	58	;':'
  1115  00FE3E  20                 	db	32
  1116  00FE3F  54                 	db	84	;'T'
  1117  00FE40  49                 	db	73	;'I'
  1118  00FE41  4C                 	db	76	;'L'
  1119  00FE42  54                 	db	84	;'T'
  1120  00FE43  20                 	db	32
  1121  00FE44  53                 	db	83	;'S'
  1122  00FE45  45                 	db	69	;'E'
  1123  00FE46  52                 	db	82	;'R'
  1124  00FE47  56                 	db	86	;'V'
  1125  00FE48  4F                 	db	79	;'O'
  1126  00FE49  00                 	db	0
  1127  00FE4A                     STR_4:
  1128  00FE4A  44                 	db	68	;'D'
  1129  00FE4B  49                 	db	73	;'I'
  1130  00FE4C  44                 	db	68	;'D'
  1131  00FE4D  4E                 	db	78	;'N'
  1132  00FE4E  27                 	db	39
  1133  00FE4F  54                 	db	84	;'T'
  1134  00FE50  20                 	db	32
  1135  00FE51  43                 	db	67	;'C'
  1136  00FE52  4F                 	db	79	;'O'
  1137  00FE53  4D                 	db	77	;'M'
  1138  00FE54  50                 	db	80	;'P'
  1139  00FE55  4C                 	db	76	;'L'
  1140  00FE56  45                 	db	69	;'E'
  1141  00FE57  54                 	db	84	;'T'
  1142  00FE58  45                 	db	69	;'E'
  1143  00FE59  00                 	db	0
  1144  00FE5A                     STR_80:
  1145  00FE5A  49                 	db	73	;'I'
  1146  00FE5B  52                 	db	82	;'R'
  1147  00FE5C  5F                 	db	95	;'_'
  1148  00FE5D  73                 	db	115	;'s'
  1149  00FE5E  69                 	db	105	;'i'
  1150  00FE5F  67                 	db	103	;'g'
  1151  00FE60  6E                 	db	110	;'n'
  1152  00FE61  61                 	db	97	;'a'
  1153  00FE62  6C                 	db	108	;'l'
  1154  00FE63  3A                 	db	58	;':'
  1155  00FE64  20                 	db	32
  1156  00FE65  25                 	db	37
  1157  00FE66  64                 	db	100	;'d'
  1158  00FE67  20                 	db	32
  1159  00FE68  00                 	db	0
  1160  00FE69                     STR_109:
  1161  00FE69  43                 	db	67	;'C'
  1162  00FE6A  41                 	db	65	;'A'
  1163  00FE6B  4D                 	db	77	;'M'
  1164  00FE6C  20                 	db	32
  1165  00FE6D  44                 	db	68	;'D'
  1166  00FE6E  57                 	db	87	;'W'
  1167  00FE6F  4E                 	db	78	;'N'
  1168  00FE70  20                 	db	32
  1169  00FE71  7C                 	db	124
  1170  00FE72  52                 	db	82	;'R'
  1171  00FE73  43                 	db	67	;'C'
  1172  00FE74  30                 	db	48	;'0'
  1173  00FE75  3D                 	db	61	;'='
  1174  00FE76  30                 	db	48	;'0'
  1175  00FE77  00                 	db	0
  1176  00FE78                     STR_108:
  1177  00FE78  43                 	db	67	;'C'
  1178  00FE79  41                 	db	65	;'A'
  1179  00FE7A  4D                 	db	77	;'M'
  1180  00FE7B  20                 	db	32
  1181  00FE7C  55                 	db	85	;'U'
  1182  00FE7D  50                 	db	80	;'P'
  1183  00FE7E  20                 	db	32
  1184  00FE7F  20                 	db	32
  1185  00FE80  7C                 	db	124
  1186  00FE81  52                 	db	82	;'R'
  1187  00FE82  43                 	db	67	;'C'
  1188  00FE83  30                 	db	48	;'0'
  1189  00FE84  3D                 	db	61	;'='
  1190  00FE85  31                 	db	49	;'1'
  1191  00FE86  00                 	db	0
  1192  00FE87                     STR_82:
  1193  00FE87  54                 	db	84	;'T'
  1194  00FE88  53                 	db	83	;'S'
  1195  00FE89  54                 	db	84	;'T'
  1196  00FE8A  3A                 	db	58	;':'
  1197  00FE8B  20                 	db	32
  1198  00FE8C  4D                 	db	77	;'M'
  1199  00FE8D  41                 	db	65	;'A'
  1200  00FE8E  47                 	db	71	;'G'
  1201  00FE8F  4E                 	db	78	;'N'
  1202  00FE90  45                 	db	69	;'E'
  1203  00FE91  54                 	db	84	;'T'
  1204  00FE92  49                 	db	73	;'I'
  1205  00FE93  53                 	db	83	;'S'
  1206  00FE94  4D                 	db	77	;'M'
  1207  00FE95  00                 	db	0
  1208  00FE96                     STR_107:
  1209  00FE96  54                 	db	84	;'T'
  1210  00FE97  53                 	db	83	;'S'
  1211  00FE98  54                 	db	84	;'T'
  1212  00FE99  3A                 	db	58	;':'
  1213  00FE9A  20                 	db	32
  1214  00FE9B  43                 	db	67	;'C'
  1215  00FE9C  41                 	db	65	;'A'
  1216  00FE9D  4D                 	db	77	;'M'
  1217  00FE9E  20                 	db	32
  1218  00FE9F  53                 	db	83	;'S'
  1219  00FEA0  45                 	db	69	;'E'
  1220  00FEA1  52                 	db	82	;'R'
  1221  00FEA2  56                 	db	86	;'V'
  1222  00FEA3  4F                 	db	79	;'O'
  1223  00FEA4  00                 	db	0
  1224  00FEA5                     STR_96:
  1225  00FEA5  54                 	db	84	;'T'
  1226  00FEA6  53                 	db	83	;'S'
  1227  00FEA7  54                 	db	84	;'T'
  1228  00FEA8  3A                 	db	58	;':'
  1229  00FEA9  20                 	db	32
  1230  00FEAA  50                 	db	80	;'P'
  1231  00FEAB  41                 	db	65	;'A'
  1232  00FEAC  4E                 	db	78	;'N'
  1233  00FEAD  20                 	db	32
  1234  00FEAE  53                 	db	83	;'S'
  1235  00FEAF  45                 	db	69	;'E'
  1236  00FEB0  52                 	db	82	;'R'
  1237  00FEB1  56                 	db	86	;'V'
  1238  00FEB2  4F                 	db	79	;'O'
  1239  00FEB3  00                 	db	0
  1240  00FEB4                     STR_75:
  1241  00FEB4  41                 	db	65	;'A'
  1242  00FEB5  4C                 	db	76	;'L'
  1243  00FEB6  47                 	db	71	;'G'
  1244  00FEB7  34                 	db	52	;'4'
  1245  00FEB8  3A                 	db	58	;':'
  1246  00FEB9  20                 	db	32
  1247  00FEBA  41                 	db	65	;'A'
  1248  00FEBB  4C                 	db	76	;'L'
  1249  00FEBC  4C                 	db	76	;'L'
  1250  00FEBD  20                 	db	32
  1251  00FEBE  43                 	db	67	;'C'
  1252  00FEBF  41                 	db	65	;'A'
  1253  00FEC0  4E                 	db	78	;'N'
  1254  00FEC1  53                 	db	83	;'S'
  1255  00FEC2  00                 	db	0
  1256  00FEC3                     STR_90:
  1257  00FEC3  54                 	db	84	;'T'
  1258  00FEC4  53                 	db	83	;'S'
  1259  00FEC5  54                 	db	84	;'T'
  1260  00FEC6  3A                 	db	58	;':'
  1261  00FEC7  20                 	db	32
  1262  00FEC8  44                 	db	68	;'D'
  1263  00FEC9  43                 	db	67	;'C'
  1264  00FECA  20                 	db	32
  1265  00FECB  4D                 	db	77	;'M'
  1266  00FECC  4F                 	db	79	;'O'
  1267  00FECD  54                 	db	84	;'T'
  1268  00FECE  4F                 	db	79	;'O'
  1269  00FECF  52                 	db	82	;'R'
  1270  00FED0  53                 	db	83	;'S'
  1271  00FED1  00                 	db	0
  1272  00FED2                     STR_70:
  1273  00FED2  41                 	db	65	;'A'
  1274  00FED3  4C                 	db	76	;'L'
  1275  00FED4  47                 	db	71	;'G'
  1276  00FED5  4F                 	db	79	;'O'
  1277  00FED6  52                 	db	82	;'R'
  1278  00FED7  49                 	db	73	;'I'
  1279  00FED8  54                 	db	84	;'T'
  1280  00FED9  48                 	db	72	;'H'
  1281  00FEDA  4D                 	db	77	;'M'
  1282  00FEDB  20                 	db	32
  1283  00FEDC  54                 	db	84	;'T'
  1284  00FEDD  45                 	db	69	;'E'
  1285  00FEDE  53                 	db	83	;'S'
  1286  00FEDF  54                 	db	84	;'T'
  1287  00FEE0  00                 	db	0
  1288  00FEE1                     STR_91:
  1289  00FEE1  50                 	db	80	;'P'
  1290  00FEE2  49                 	db	73	;'I'
  1291  00FEE3  4E                 	db	78	;'N'
  1292  00FEE4  20                 	db	32
  1293  00FEE5  52                 	db	82	;'R'
  1294  00FEE6  41                 	db	65	;'A'
  1295  00FEE7  35                 	db	53	;'5'
  1296  00FEE8  20                 	db	32
  1297  00FEE9  48                 	db	72	;'H'
  1298  00FEEA  49                 	db	73	;'I'
  1299  00FEEB  47                 	db	71	;'G'
  1300  00FEEC  48                 	db	72	;'H'
  1301  00FEED  2E                 	db	46
  1302  00FEEE  00                 	db	0
  1303  00FEEF                     STR_73:
  1304  00FEEF  41                 	db	65	;'A'
  1305  00FEF0  4C                 	db	76	;'L'
  1306  00FEF1  47                 	db	71	;'G'
  1307  00FEF2  32                 	db	50	;'2'
  1308  00FEF3  3A                 	db	58	;':'
  1309  00FEF4  20                 	db	32
  1310  00FEF5  31                 	db	49	;'1'
  1311  00FEF6  32                 	db	50	;'2'
  1312  00FEF7  20                 	db	32
  1313  00FEF8  43                 	db	67	;'C'
  1314  00FEF9  41                 	db	65	;'A'
  1315  00FEFA  4E                 	db	78	;'N'
  1316  00FEFB  53                 	db	83	;'S'
  1317  00FEFC  00                 	db	0
  1318  00FEFD                     STR_76:
  1319  00FEFD  41                 	db	65	;'A'
  1320  00FEFE  4C                 	db	76	;'L'
  1321  00FEFF  47                 	db	71	;'G'
  1322  00FF00  35                 	db	53	;'5'
  1323  00FF01  3A                 	db	58	;':'
  1324  00FF02  20                 	db	32
  1325  00FF03  4E                 	db	78	;'N'
  1326  00FF04  4F                 	db	79	;'O'
  1327  00FF05  20                 	db	32
  1328  00FF06  43                 	db	67	;'C'
  1329  00FF07  41                 	db	65	;'A'
  1330  00FF08  4E                 	db	78	;'N'
  1331  00FF09  53                 	db	83	;'S'
  1332  00FF0A  00                 	db	0
  1333  00FF0B                     STR_71:
  1334  00FF0B  50                 	db	80	;'P'
  1335  00FF0C  55                 	db	85	;'U'
  1336  00FF0D  53                 	db	83	;'S'
  1337  00FF0E  48                 	db	72	;'H'
  1338  00FF0F  20                 	db	32
  1339  00FF10  54                 	db	84	;'T'
  1340  00FF11  4F                 	db	79	;'O'
  1341  00FF12  20                 	db	32
  1342  00FF13  53                 	db	83	;'S'
  1343  00FF14  54                 	db	84	;'T'
  1344  00FF15  41                 	db	65	;'A'
  1345  00FF16  52                 	db	82	;'R'
  1346  00FF17  54                 	db	84	;'T'
  1347  00FF18  00                 	db	0
  1348  00FF19                     STR_23:
  1349  00FF19  25                 	db	37
  1350  00FF1A  64                 	db	100	;'d'
  1351  00FF1B  20                 	db	32
  1352  00FF1C  4D                 	db	77	;'M'
  1353  00FF1D  49                 	db	73	;'I'
  1354  00FF1E  4E                 	db	78	;'N'
  1355  00FF1F  20                 	db	32
  1356  00FF20  25                 	db	37
  1357  00FF21  64                 	db	100	;'d'
  1358  00FF22  20                 	db	32
  1359  00FF23  53                 	db	83	;'S'
  1360  00FF24  45                 	db	69	;'E'
  1361  00FF25  43                 	db	67	;'C'
  1362  00FF26  00                 	db	0
  1363  00FF27                     STR_2:
  1364  00FF27  54                 	db	84	;'T'
  1365  00FF28  49                 	db	73	;'I'
  1366  00FF29  4D                 	db	77	;'M'
  1367  00FF2A  45                 	db	69	;'E'
  1368  00FF2B  3A                 	db	58	;':'
  1369  00FF2C  20                 	db	32
  1370  00FF2D  25                 	db	37
  1371  00FF2E  64                 	db	100	;'d'
  1372  00FF2F  3A                 	db	58	;':'
  1373  00FF30  25                 	db	37
  1374  00FF31  30                 	db	48	;'0'
  1375  00FF32  32                 	db	50	;'2'
  1376  00FF33  64                 	db	100	;'d'
  1377  00FF34  00                 	db	0
  1378  00FF35                     STR_79:
  1379  00FF35  54                 	db	84	;'T'
  1380  00FF36  53                 	db	83	;'S'
  1381  00FF37  54                 	db	84	;'T'
  1382  00FF38  3A                 	db	58	;':'
  1383  00FF39  20                 	db	32
  1384  00FF3A  49                 	db	73	;'I'
  1385  00FF3B  52                 	db	82	;'R'
  1386  00FF3C  20                 	db	32
  1387  00FF3D  53                 	db	83	;'S'
  1388  00FF3E  4E                 	db	78	;'N'
  1389  00FF3F  53                 	db	83	;'S'
  1390  00FF40  52                 	db	82	;'R'
  1391  00FF41  00                 	db	0
  1392  00FF42                     STR_65:
  1393  00FF42  54                 	db	84	;'T'
  1394  00FF43  49                 	db	73	;'I'
  1395  00FF44  4D                 	db	77	;'M'
  1396  00FF45  45                 	db	69	;'E'
  1397  00FF46  20                 	db	32
  1398  00FF47  25                 	db	37
  1399  00FF48  64                 	db	100	;'d'
  1400  00FF49  3A                 	db	58	;':'
  1401  00FF4A  25                 	db	37
  1402  00FF4B  30                 	db	48	;'0'
  1403  00FF4C  32                 	db	50	;'2'
  1404  00FF4D  64                 	db	100	;'d'
  1405  00FF4E  00                 	db	0
  1406  00FF4F                     STR_74:
  1407  00FF4F  41                 	db	65	;'A'
  1408  00FF50  4C                 	db	76	;'L'
  1409  00FF51  47                 	db	71	;'G'
  1410  00FF52  33                 	db	51	;'3'
  1411  00FF53  3A                 	db	58	;':'
  1412  00FF54  20                 	db	32
  1413  00FF55  31                 	db	49	;'1'
  1414  00FF56  20                 	db	32
  1415  00FF57  43                 	db	67	;'C'
  1416  00FF58  41                 	db	65	;'A'
  1417  00FF59  4E                 	db	78	;'N'
  1418  00FF5A  00                 	db	0
  1419  00FF5B                     STR_93:
  1420  00FF5B  50                 	db	80	;'P'
  1421  00FF5C  49                 	db	73	;'I'
  1422  00FF5D  4E                 	db	78	;'N'
  1423  00FF5E  20                 	db	32
  1424  00FF5F  52                 	db	82	;'R'
  1425  00FF60  41                 	db	65	;'A'
  1426  00FF61  33                 	db	51	;'3'
  1427  00FF62  2E                 	db	46
  1428  00FF63  2E                 	db	46
  1429  00FF64  2E                 	db	46
  1430  00FF65  00                 	db	0
  1431  00FF66                     STR_95:
  1432  00FF66  50                 	db	80	;'P'
  1433  00FF67  49                 	db	73	;'I'
  1434  00FF68  4E                 	db	78	;'N'
  1435  00FF69  20                 	db	32
  1436  00FF6A  52                 	db	82	;'R'
  1437  00FF6B  41                 	db	65	;'A'
  1438  00FF6C  34                 	db	52	;'4'
  1439  00FF6D  2E                 	db	46
  1440  00FF6E  2E                 	db	46
  1441  00FF6F  2E                 	db	46
  1442  00FF70  00                 	db	0
  1443  00FF71                     STR_113:
  1444  00FF71  50                 	db	80	;'P'
  1445  00FF72  55                 	db	85	;'U'
  1446  00FF73  53                 	db	83	;'S'
  1447  00FF74  48                 	db	72	;'H'
  1448  00FF75  45                 	db	69	;'E'
  1449  00FF76  52                 	db	82	;'R'
  1450  00FF77  20                 	db	32
  1451  00FF78  54                 	db	84	;'T'
  1452  00FF79  53                 	db	83	;'S'
  1453  00FF7A  54                 	db	84	;'T'
  1454  00FF7B  00                 	db	0
  1455  00FF7C                     STR_64:
  1456  00FF7C  53                 	db	83	;'S'
  1457  00FF7D  4F                 	db	79	;'O'
  1458  00FF7E  52                 	db	82	;'R'
  1459  00FF7F  54                 	db	84	;'T'
  1460  00FF80  49                 	db	73	;'I'
  1461  00FF81  4E                 	db	78	;'N'
  1462  00FF82  47                 	db	71	;'G'
  1463  00FF83  2E                 	db	46
  1464  00FF84  2E                 	db	46
  1465  00FF85  2E                 	db	46
  1466  00FF86  00                 	db	0
  1467  00FF87                     STR_84:
  1468  00FF87  54                 	db	84	;'T'
  1469  00FF88  53                 	db	83	;'S'
  1470  00FF89  54                 	db	84	;'T'
  1471  00FF8A  3A                 	db	58	;':'
  1472  00FF8B  20                 	db	32
  1473  00FF8C  43                 	db	67	;'C'
  1474  00FF8D  4F                 	db	79	;'O'
  1475  00FF8E  4E                 	db	78	;'N'
  1476  00FF8F  44                 	db	68	;'D'
  1477  00FF90  00                 	db	0
  1478  00FF91                     STR_88:
  1479  00FF91  41                 	db	65	;'A'
  1480  00FF92  43                 	db	67	;'C'
  1481  00FF93  54                 	db	84	;'T'
  1482  00FF94  55                 	db	85	;'U'
  1483  00FF95  41                 	db	65	;'A'
  1484  00FF96  54                 	db	84	;'T'
  1485  00FF97  4F                 	db	79	;'O'
  1486  00FF98  52                 	db	82	;'R'
  1487  00FF99  53                 	db	83	;'S'
  1488  00FF9A  00                 	db	0
  1489  00FF9B                     STR_22:
  1490  00FF9B  44                 	db	68	;'D'
  1491  00FF9C  55                 	db	85	;'U'
  1492  00FF9D  52                 	db	82	;'R'
  1493  00FF9E  41                 	db	65	;'A'
  1494  00FF9F  54                 	db	84	;'T'
  1495  00FFA0  49                 	db	73	;'I'
  1496  00FFA1  4F                 	db	79	;'O'
  1497  00FFA2  4E                 	db	78	;'N'
  1498  00FFA3  3A                 	db	58	;':'
  1499  00FFA4  00                 	db	0
  1500  00FFA5                     STR_86:
  1501  00FFA5  43                 	db	67	;'C'
  1502  00FFA6  4F                 	db	79	;'O'
  1503  00FFA7  4E                 	db	78	;'N'
  1504  00FFA8  44                 	db	68	;'D'
  1505  00FFA9  3A                 	db	58	;':'
  1506  00FFAA  20                 	db	32
  1507  00FFAB  25                 	db	37
  1508  00FFAC  64                 	db	100	;'d'
  1509  00FFAD  00                 	db	0
  1510  00FFAE                     STR_77:
  1511  00FFAE  53                 	db	83	;'S'
  1512  00FFAF  45                 	db	69	;'E'
  1513  00FFB0  4E                 	db	78	;'N'
  1514  00FFB1  53                 	db	83	;'S'
  1515  00FFB2  4F                 	db	79	;'O'
  1516  00FFB3  52                 	db	82	;'R'
  1517  00FFB4  53                 	db	83	;'S'
  1518  00FFB5  00                 	db	0
  1519  00FFB6                     STR_120:
  1520  00FFB6  28                 	db	40
  1521  00FFB7  6E                 	db	110	;'n'
  1522  00FFB8  75                 	db	117	;'u'
  1523  00FFB9  6C                 	db	108	;'l'
  1524  00FFBA  6C                 	db	108	;'l'
  1525  00FFBB  29                 	db	41
  1526  00FFBC  00                 	db	0
  1527  00FFBD                     STR_67:
  1528  00FFBD  46                 	db	70	;'F'
  1529  00FFBE  41                 	db	65	;'A'
  1530  00FFBF  49                 	db	73	;'I'
  1531  00FFC0  4C                 	db	76	;'L'
  1532  00FFC1  45                 	db	69	;'E'
  1533  00FFC2  44                 	db	68	;'D'
  1534  00FFC3  00                 	db	0
  1535  00FFC4                     STR_7:
  1536  00FFC4  53                 	db	83	;'S'
  1537  00FFC5  54                 	db	84	;'T'
  1538  00FFC6  41                 	db	65	;'A'
  1539  00FFC7  52                 	db	82	;'R'
  1540  00FFC8  54                 	db	84	;'T'
  1541  00FFC9  3A                 	db	58	;':'
  1542  00FFCA  00                 	db	0
  1543  00FFCB                     STR_9:
  1544  00FFCB  46                 	db	70	;'F'
  1545  00FFCC  45                 	db	69	;'E'
  1546  00FFCD  42                 	db	66	;'B'
  1547  00FFCE  00                 	db	0
  1548  00FFCF                     STR_19:
  1549  00FFCF  44                 	db	68	;'D'
  1550  00FFD0  45                 	db	69	;'E'
  1551  00FFD1  43                 	db	67	;'C'
  1552  00FFD2  00                 	db	0
  1553  00FFD3                     STR_15:
  1554  00FFD3  41                 	db	65	;'A'
  1555  00FFD4  55                 	db	85	;'U'
  1556  00FFD5  47                 	db	71	;'G'
  1557  00FFD6  00                 	db	0
  1558  00FFD7                     STR_14:
  1559  00FFD7  4A                 	db	74	;'J'
  1560  00FFD8  55                 	db	85	;'U'
  1561  00FFD9  4C                 	db	76	;'L'
  1562  00FFDA  00                 	db	0
  1563  00FFDB                     STR_8:
  1564  00FFDB  4A                 	db	74	;'J'
  1565  00FFDC  41                 	db	65	;'A'
  1566  00FFDD  4E                 	db	78	;'N'
  1567  00FFDE  00                 	db	0
  1568  00FFDF                     STR_13:
  1569  00FFDF  4A                 	db	74	;'J'
  1570  00FFE0  55                 	db	85	;'U'
  1571  00FFE1  4E                 	db	78	;'N'
  1572  00FFE2  00                 	db	0
  1573  00FFE3                     STR_16:
  1574  00FFE3  53                 	db	83	;'S'
  1575  00FFE4  45                 	db	69	;'E'
  1576  00FFE5  50                 	db	80	;'P'
  1577  00FFE6  00                 	db	0
  1578  00FFE7                     STR_10:
  1579  00FFE7  4D                 	db	77	;'M'
  1580  00FFE8  41                 	db	65	;'A'
  1581  00FFE9  52                 	db	82	;'R'
  1582  00FFEA  00                 	db	0
  1583  00FFEB                     STR_11:
  1584  00FFEB  41                 	db	65	;'A'
  1585  00FFEC  50                 	db	80	;'P'
  1586  00FFED  52                 	db	82	;'R'
  1587  00FFEE  00                 	db	0
  1588  00FFEF                     STR_20:
  1589  00FFEF  45                 	db	69	;'E'
  1590  00FFF0  52                 	db	82	;'R'
  1591  00FFF1  52                 	db	82	;'R'
  1592  00FFF2  00                 	db	0
  1593  00FFF3                     STR_17:
  1594  00FFF3  4F                 	db	79	;'O'
  1595  00FFF4  43                 	db	67	;'C'
  1596  00FFF5  54                 	db	84	;'T'
  1597  00FFF6  00                 	db	0
  1598  00FFF7                     STR_18:
  1599  00FFF7  4E                 	db	78	;'N'
  1600  00FFF8  4F                 	db	79	;'O'
  1601  00FFF9  56                 	db	86	;'V'
  1602  00FFFA  00                 	db	0
  1603  00FFFB                     STR_12:
  1604  00FFFB  4D                 	db	77	;'M'
  1605  00FFFC  41                 	db	65	;'A'
  1606  00FFFD  59                 	db	89	;'Y'
  1607  00FFFE  00                 	db	0
  1608  0000                     
  1609                           ; #config settings
  1610  00FFFF  00                 	db	0	; dummy byte at the end
  1611  0000                     
  1612                           	psect	cinit
  1613  004372                     __pcinit:
  1614                           	opt stack 0
  1615  004372                     start_initialization:
  1616                           	opt stack 0
  1617  004372                     __initialization:
  1618                           	opt stack 0
  1619                           
  1620                           ; Initialize objects allocated to BANK1 (8 bytes)
  1621                           ; load TBLPTR registers with __pidataBANK1
  1622  004372  0EB4               	movlw	low __pidataBANK1
  1623  004374  6EF6               	movwf	tblptrl,c
  1624  004376  0E4A               	movlw	high __pidataBANK1
  1625  004378  6EF7               	movwf	tblptrh,c
  1626  00437A  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1627  00437C  6EF8               	movwf	tblptru,c
  1628  00437E  EE01  F033         	lfsr	0,__pdataBANK1
  1629  004382  EE10 F008          	lfsr	1,8
  1630  004386                     copy_data0:
  1631  004386  0009               	tblrd		*+
  1632  004388  CFF5 FFEE          	movff	tablat,postinc0
  1633  00438C  50E5               	movf	postdec1,w,c
  1634  00438E  50E1               	movf	fsr1l,w,c
  1635  004390  E1FA               	bnz	copy_data0
  1636                           
  1637                           ; Clear objects allocated to BANK1 (51 bytes)
  1638  004392  EE01  F000         	lfsr	0,__pbssBANK1
  1639  004396  0E33               	movlw	51
  1640  004398                     clear_0:
  1641  004398  6AEE               	clrf	postinc0,c
  1642  00439A  06E8               	decf	wreg,f,c
  1643  00439C  E1FD               	bnz	clear_0
  1644                           
  1645                           ; Clear objects allocated to BANK0 (38 bytes)
  1646  00439E  EE00  F0DA         	lfsr	0,__pbssBANK0
  1647  0043A2  0E26               	movlw	38
  1648  0043A4                     clear_1:
  1649  0043A4  6AEE               	clrf	postinc0,c
  1650  0043A6  06E8               	decf	wreg,f,c
  1651  0043A8  E1FD               	bnz	clear_1
  1652                           
  1653                           ; Clear objects allocated to COMRAM (35 bytes)
  1654  0043AA  EE00  F05B         	lfsr	0,__pbssCOMRAM
  1655  0043AE  0E23               	movlw	35
  1656  0043B0                     clear_2:
  1657  0043B0  6AEE               	clrf	postinc0,c
  1658  0043B2  06E8               	decf	wreg,f,c
  1659  0043B4  E1FD               	bnz	clear_2
  1660  0043B6                     end_of_initialization:
  1661                           	opt stack 0
  1662  0043B6                     __end_of__initialization:
  1663                           	opt stack 0
  1664  0043B6  907E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1665  0043B8  927E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1666  0043BA  0100               	movlb	0
  1667  0043BC  EF58  F01C         	goto	_main	;jump to C main() function
  1668                           tblptru	equ	0xFF8
  1669                           tblptrh	equ	0xFF7
  1670                           tblptrl	equ	0xFF6
  1671                           tablat	equ	0xFF5
  1672                           postinc0	equ	0xFEE
  1673                           wreg	equ	0xFE8
  1674                           postdec1	equ	0xFE5
  1675                           fsr1l	equ	0xFE1
  1676                           
  1677                           	psect	bssCOMRAM
  1678  00005B                     __pbssCOMRAM:
  1679                           	opt stack 0
  1680  00005B                     _back:
  1681                           	opt stack 0
  1682  00005B                     	ds	2
  1683  00005D                     _count_pop_no_tab:
  1684                           	opt stack 0
  1685  00005D                     	ds	2
  1686  00005F                     _count_pop_w_tab:
  1687                           	opt stack 0
  1688  00005F                     	ds	2
  1689  000061                     _debug:
  1690                           	opt stack 0
  1691  000061                     	ds	2
  1692  000063                     _down:
  1693                           	opt stack 0
  1694  000063                     	ds	2
  1695  000065                     _enter:
  1696                           	opt stack 0
  1697  000065                     	ds	2
  1698  000067                     _f_ID_receive:
  1699                           	opt stack 0
  1700  000067                     	ds	2
  1701  000069                     _f_can_coming_to_ID:
  1702                           	opt stack 0
  1703  000069                     	ds	2
  1704  00006B                     _f_can_coming_to_distribution:
  1705                           	opt stack 0
  1706  00006B                     	ds	2
  1707  00006D                     _f_lastCan:
  1708                           	opt stack 0
  1709  00006D                     	ds	2
  1710  00006F                     _first:
  1711                           	opt stack 0
  1712  00006F                     	ds	2
  1713  000071                     _firstboot:
  1714                           	opt stack 0
  1715  000071                     	ds	2
  1716  000073                     _log_count_can_w_lab:
  1717                           	opt stack 0
  1718  000073                     	ds	2
  1719  000075                     _log_count_total:
  1720                           	opt stack 0
  1721  000075                     	ds	2
  1722  000077                     _up:
  1723                           	opt stack 0
  1724  000077                     	ds	2
  1725  000079                     _was_low_1:
  1726                           	opt stack 0
  1727  000079                     	ds	2
  1728  00007B                     _was_low_3:
  1729                           	opt stack 0
  1730  00007B                     	ds	2
  1731  00007D                     _input:
  1732                           	opt stack 0
  1733  00007D                     	ds	1
  1734                           tblptru	equ	0xFF8
  1735                           tblptrh	equ	0xFF7
  1736                           tblptrl	equ	0xFF6
  1737                           tablat	equ	0xFF5
  1738                           postinc0	equ	0xFEE
  1739                           wreg	equ	0xFE8
  1740                           postdec1	equ	0xFE5
  1741                           fsr1l	equ	0xFE1
  1742                           
  1743                           	psect	bssBANK0
  1744  0000DA                     __pbssBANK0:
  1745                           	opt stack 0
  1746  0000DA                     _sensor_outputs:
  1747                           	opt stack 0
  1748  0000DA                     	ds	4
  1749  0000DE                     _IR_signal:
  1750                           	opt stack 0
  1751  0000DE                     	ds	2
  1752  0000E0                     _MAG_signal:
  1753                           	opt stack 0
  1754  0000E0                     	ds	2
  1755  0000E2                     _RTCflag:
  1756                           	opt stack 0
  1757  0000E2                     	ds	2
  1758  0000E4                     _cur_can:
  1759                           	opt stack 0
  1760  0000E4                     	ds	2
  1761  0000E6                     _cur_state:
  1762                           	opt stack 0
  1763  0000E6                     	ds	2
  1764  0000E8                     _f_loadingNewCan:
  1765                           	opt stack 0
  1766  0000E8                     	ds	2
  1767  0000EA                     _log:
  1768                           	opt stack 0
  1769  0000EA                     	ds	2
  1770  0000EC                     _log_completion:
  1771                           	opt stack 0
  1772  0000EC                     	ds	2
  1773  0000EE                     _log_count_can_no_lab:
  1774                           	opt stack 0
  1775  0000EE                     	ds	2
  1776  0000F0                     _log_count_pop_no_tab:
  1777                           	opt stack 0
  1778  0000F0                     	ds	2
  1779  0000F2                     _log_count_pop_w_tab:
  1780                           	opt stack 0
  1781  0000F2                     	ds	2
  1782  0000F4                     _log_total_time:
  1783                           	opt stack 0
  1784  0000F4                     	ds	2
  1785  0000F6                     _logstate:
  1786                           	opt stack 0
  1787  0000F6                     	ds	2
  1788  0000F8                     _total_time:
  1789                           	opt stack 0
  1790  0000F8                     	ds	2
  1791  0000FA                     _var:
  1792                           	opt stack 0
  1793  0000FA                     	ds	2
  1794  0000FC                     _machine_state:
  1795                           	opt stack 0
  1796  0000FC                     	ds	1
  1797  0000FD                     _sel:
  1798                           	opt stack 0
  1799  0000FD                     	ds	1
  1800  0000FE                     _count_total:
  1801                           	opt stack 0
  1802  0000FE                     	ds	2
  1803                           tblptru	equ	0xFF8
  1804                           tblptrh	equ	0xFF7
  1805                           tblptrl	equ	0xFF6
  1806                           tablat	equ	0xFF5
  1807                           postinc0	equ	0xFEE
  1808                           wreg	equ	0xFE8
  1809                           postdec1	equ	0xFE5
  1810                           fsr1l	equ	0xFE1
  1811                           
  1812                           	psect	bssBANK1
  1813  000100                     __pbssBANK1:
  1814                           	opt stack 0
  1815  000100                     _log_startTime:
  1816                           	opt stack 0
  1817  000100                     	ds	14
  1818  00010E                     _startTime:
  1819                           	opt stack 0
  1820  00010E                     	ds	14
  1821  00011C                     _servoTimes:
  1822                           	opt stack 0
  1823  00011C                     	ds	8
  1824  000124                     _time:
  1825                           	opt stack 0
  1826  000124                     	ds	7
  1827  00012B                     _count_can_no_lab:
  1828                           	opt stack 0
  1829  00012B                     	ds	2
  1830  00012D                     _count_can_w_lab:
  1831                           	opt stack 0
  1832  00012D                     	ds	2
  1833  00012F                     _f_can_distributed:
  1834                           	opt stack 0
  1835  00012F                     	ds	2
  1836  000131                     _i:
  1837                           	opt stack 0
  1838  000131                     	ds	2
  1839                           tblptru	equ	0xFF8
  1840                           tblptrh	equ	0xFF7
  1841                           tblptrl	equ	0xFF6
  1842                           tablat	equ	0xFF5
  1843                           postinc0	equ	0xFEE
  1844                           wreg	equ	0xFE8
  1845                           postdec1	equ	0xFE5
  1846                           fsr1l	equ	0xFE1
  1847                           
  1848                           	psect	dataBANK1
  1849  000133                     __pdataBANK1:
  1850                           	opt stack 0
  1851  000133                     UI@F3226:
  1852                           	opt stack 0
  1853  000133                     	ds	4
  1854  000137                     printRTC@F3217:
  1855                           	opt stack 0
  1856  000137                     	ds	4
  1857                           tblptru	equ	0xFF8
  1858                           tblptrh	equ	0xFF7
  1859                           tblptrl	equ	0xFF6
  1860                           tablat	equ	0xFF5
  1861                           postinc0	equ	0xFEE
  1862                           wreg	equ	0xFE8
  1863                           postdec1	equ	0xFE5
  1864                           fsr1l	equ	0xFE1
  1865                           
  1866                           	psect	cstackBANK0
  1867  000080                     __pcstackBANK0:
  1868                           	opt stack 0
  1869  000080                     ??_ID:
  1870  000080                     ??_delay_ms:
  1871  000080                     ??_PortTests:
  1872  000080                     ??_isdigit:
  1873  000080                     ??_readADC:
  1874  000080                     ??_I2C_Master_Wait:
  1875  000080                     ?___wmul:
  1876                           	opt stack 0
  1877  000080                     ?___awmod:
  1878                           	opt stack 0
  1879  000080                     ?___lwdiv:
  1880                           	opt stack 0
  1881  000080                     ?___lldiv:
  1882                           	opt stack 0
  1883  000080                     lcdNibble@temp:
  1884                           	opt stack 0
  1885  000080                     initTime@m:
  1886                           	opt stack 0
  1887  000080                     updateServoPosition@time_us:
  1888                           	opt stack 0
  1889  000080                     EEPROM_read@address:
  1890                           	opt stack 0
  1891  000080                     ___wmul@multiplier:
  1892                           	opt stack 0
  1893  000080                     ___awmod@dividend:
  1894                           	opt stack 0
  1895  000080                     ___lwdiv@dividend:
  1896                           	opt stack 0
  1897  000080                     strcpy@to:
  1898                           	opt stack 0
  1899  000080                     ___lldiv@dividend:
  1900                           	opt stack 0
  1901                           
  1902                           ; 4 bytes @ 0x0
  1903  000080                     	ds	1
  1904  000081                     readADC@channel:
  1905                           	opt stack 0
  1906  000081                     I2C_Master_Read@a:
  1907                           	opt stack 0
  1908  000081                     lcdNibble@data:
  1909                           	opt stack 0
  1910  000081                     initTime@h:
  1911                           	opt stack 0
  1912  000081                     delay_ms@milliseconds:
  1913                           	opt stack 0
  1914  000081                     _isdigit$1960:
  1915                           	opt stack 0
  1916  000081                     I2C_Master_Write@d:
  1917                           	opt stack 0
  1918                           
  1919                           ; 2 bytes @ 0x1
  1920  000081                     	ds	1
  1921  000082                     ??_readIR:
  1922  000082                     ??_readMAG:
  1923  000082                     I2C_Master_Read@temp:
  1924                           	opt stack 0
  1925  000082                     lcdInst@data:
  1926                           	opt stack 0
  1927  000082                     putch@data:
  1928                           	opt stack 0
  1929  000082                     initTime@w:
  1930                           	opt stack 0
  1931  000082                     isdigit@c:
  1932                           	opt stack 0
  1933  000082                     ID@i:
  1934                           	opt stack 0
  1935  000082                     updateServoPosition@timer:
  1936                           	opt stack 0
  1937  000082                     ___wmul@multiplicand:
  1938                           	opt stack 0
  1939  000082                     ___awmod@divisor:
  1940                           	opt stack 0
  1941  000082                     ___lwdiv@divisor:
  1942                           	opt stack 0
  1943  000082                     strcpy@from:
  1944                           	opt stack 0
  1945                           
  1946                           ; 2 bytes @ 0x2
  1947  000082                     	ds	1
  1948  000083                     ??_initLCD:
  1949  000083                     initTime@DD:
  1950                           	opt stack 0
  1951  000083                     getRTC@i:
  1952                           	opt stack 0
  1953                           
  1954                           ; 2 bytes @ 0x3
  1955  000083                     	ds	1
  1956  000084                     ??_updateServoPosition:
  1957  000084                     initTime@MM:
  1958                           	opt stack 0
  1959  000084                     ___awmod@counter:
  1960                           	opt stack 0
  1961  000084                     readIR@res:
  1962                           	opt stack 0
  1963  000084                     readMAG@res:
  1964                           	opt stack 0
  1965  000084                     ___wmul@product:
  1966                           	opt stack 0
  1967  000084                     ___lwdiv@quotient:
  1968                           	opt stack 0
  1969  000084                     strcpy@cp:
  1970                           	opt stack 0
  1971  000084                     ___lldiv@divisor:
  1972                           	opt stack 0
  1973                           
  1974                           ; 4 bytes @ 0x4
  1975  000084                     	ds	1
  1976  000085                     ??_initSortTimer:
  1977  000085                     initTime@YY:
  1978                           	opt stack 0
  1979  000085                     ___awmod@sign:
  1980                           	opt stack 0
  1981                           
  1982                           ; 1 bytes @ 0x5
  1983  000085                     	ds	1
  1984  000086                     ??_getIR:
  1985  000086                     ??_getMAG:
  1986  000086                     ?___awdiv:
  1987                           	opt stack 0
  1988  000086                     initTime@s:
  1989                           	opt stack 0
  1990  000086                     ___lwdiv@counter:
  1991                           	opt stack 0
  1992  000086                     updateServoPosition@my_time:
  1993                           	opt stack 0
  1994  000086                     ___awdiv@dividend:
  1995                           	opt stack 0
  1996                           
  1997                           ; 2 bytes @ 0x6
  1998  000086                     	ds	1
  1999  000087                     ?___lwmod:
  2000                           	opt stack 0
  2001  000087                     getIR@i:
  2002                           	opt stack 0
  2003  000087                     ___lwmod@dividend:
  2004                           	opt stack 0
  2005                           
  2006                           ; 2 bytes @ 0x7
  2007  000087                     	ds	1
  2008  000088                     ??_Distribution:
  2009  000088                     ??_initServos:
  2010  000088                     initSortTimer@i:
  2011                           	opt stack 0
  2012  000088                     ___awdiv@divisor:
  2013                           	opt stack 0
  2014  000088                     ___lldiv@quotient:
  2015                           	opt stack 0
  2016                           
  2017                           ; 4 bytes @ 0x8
  2018  000088                     	ds	1
  2019  000089                     ___lwmod@divisor:
  2020                           	opt stack 0
  2021                           
  2022                           ; 2 bytes @ 0x9
  2023  000089                     	ds	1
  2024  00008A                     ___awdiv@counter:
  2025                           	opt stack 0
  2026                           
  2027                           ; 1 bytes @ 0xA
  2028  00008A                     	ds	1
  2029  00008B                     ___awdiv@sign:
  2030                           	opt stack 0
  2031  00008B                     ___lwmod@counter:
  2032                           	opt stack 0
  2033                           
  2034                           ; 1 bytes @ 0xB
  2035  00008B                     	ds	1
  2036  00008C                     ___lldiv@counter:
  2037                           	opt stack 0
  2038  00008C                     ___awdiv@quotient:
  2039                           	opt stack 0
  2040                           
  2041                           ; 2 bytes @ 0xC
  2042  00008C                     	ds	1
  2043  00008D                     I2C_Master_Init@c:
  2044                           	opt stack 0
  2045                           
  2046                           ; 4 bytes @ 0xD
  2047  00008D                     	ds	1
  2048  00008E                     ?_printf:
  2049                           	opt stack 0
  2050  00008E                     printf@f:
  2051                           	opt stack 0
  2052                           
  2053                           ; 2 bytes @ 0xE
  2054  00008E                     	ds	3
  2055  000091                     ??_I2C_Master_Init:
  2056                           
  2057                           ; 1 bytes @ 0x11
  2058  000091                     	ds	4
  2059  000095                     ??_loadRTC:
  2060                           
  2061                           ; 1 bytes @ 0x15
  2062  000095                     	ds	1
  2063  000096                     loadRTC@i:
  2064                           	opt stack 0
  2065                           
  2066                           ; 2 bytes @ 0x16
  2067  000096                     	ds	4
  2068  00009A                     ??_printf:
  2069                           
  2070                           ; 1 bytes @ 0x1A
  2071  00009A                     	ds	4
  2072  00009E                     printf@prec:
  2073                           	opt stack 0
  2074                           
  2075                           ; 1 bytes @ 0x1E
  2076  00009E                     	ds	1
  2077  00009F                     printf@cp:
  2078                           	opt stack 0
  2079                           
  2080                           ; 2 bytes @ 0x1F
  2081  00009F                     	ds	2
  2082  0000A1                     printf@ap:
  2083                           	opt stack 0
  2084                           
  2085                           ; 2 bytes @ 0x21
  2086  0000A1                     	ds	2
  2087  0000A3                     printf@len:
  2088                           	opt stack 0
  2089                           
  2090                           ; 2 bytes @ 0x23
  2091  0000A3                     	ds	2
  2092  0000A5                     printf@val:
  2093                           	opt stack 0
  2094                           
  2095                           ; 2 bytes @ 0x25
  2096  0000A5                     	ds	2
  2097  0000A7                     printf@flag:
  2098                           	opt stack 0
  2099                           
  2100                           ; 1 bytes @ 0x27
  2101  0000A7                     	ds	1
  2102  0000A8                     printf@c:
  2103                           	opt stack 0
  2104                           
  2105                           ; 1 bytes @ 0x28
  2106  0000A8                     	ds	1
  2107  0000A9                     printf@width:
  2108                           	opt stack 0
  2109                           
  2110                           ; 2 bytes @ 0x29
  2111  0000A9                     	ds	2
  2112  0000AB                     ??_printRTC:
  2113  0000AB                     ??_algorithmTest:
  2114  0000AB                     ??_sensorTest:
  2115  0000AB                     ??_actuatorTest:
  2116  0000AB                     ??_PortTestA5:
  2117  0000AB                     ??_SpeedTest:
  2118  0000AB                     ??_PusherTest:
  2119  0000AB                     ??_BothServos:
  2120  0000AB                     ??_BlockerTest:
  2121  0000AB                     EEPROM_write@address:
  2122                           	opt stack 0
  2123                           
  2124                           ; 2 bytes @ 0x2B
  2125  0000AB                     	ds	1
  2126  0000AC                     PusherTest@i:
  2127                           	opt stack 0
  2128  0000AC                     BlockerTest@i:
  2129                           	opt stack 0
  2130                           
  2131                           ; 2 bytes @ 0x2C
  2132  0000AC                     	ds	1
  2133  0000AD                     EEPROM_write@data:
  2134                           	opt stack 0
  2135  0000AD                     actuatorTest@i_1645:
  2136                           	opt stack 0
  2137  0000AD                     sensorTest@res:
  2138                           	opt stack 0
  2139                           
  2140                           ; 2 bytes @ 0x2D
  2141  0000AD                     	ds	1
  2142  0000AE                     ??_EEPROM_write:
  2143  0000AE                     actuatorTest@i_1652:
  2144                           	opt stack 0
  2145  0000AE                     PusherTest@i_1698:
  2146                           	opt stack 0
  2147  0000AE                     BlockerTest@flag:
  2148                           	opt stack 0
  2149  0000AE                     printRTC@INT_time:
  2150                           	opt stack 0
  2151                           
  2152                           ; 14 bytes @ 0x2E
  2153  0000AE                     	ds	1
  2154  0000AF                     EEPROM_write@i:
  2155                           	opt stack 0
  2156  0000AF                     actuatorTest@i_1653:
  2157                           	opt stack 0
  2158                           
  2159                           ; 1 bytes @ 0x2F
  2160  0000AF                     	ds	1
  2161  0000B0                     EEPROM_write@i_1331:
  2162                           	opt stack 0
  2163  0000B0                     actuatorTest@i_1655:
  2164                           	opt stack 0
  2165                           
  2166                           ; 1 bytes @ 0x30
  2167  0000B0                     	ds	1
  2168  0000B1                     ??_Loading:
  2169  0000B1                     logRun@num:
  2170                           	opt stack 0
  2171  0000B1                     actuatorTest@i_1656:
  2172                           	opt stack 0
  2173                           
  2174                           ; 1 bytes @ 0x31
  2175  0000B1                     	ds	1
  2176  0000B2                     logRun@byte1:
  2177                           	opt stack 0
  2178  0000B2                     actuatorTest@i_1658:
  2179                           	opt stack 0
  2180                           
  2181                           ; 1 bytes @ 0x32
  2182  0000B2                     	ds	1
  2183  0000B3                     logRun@byte2:
  2184                           	opt stack 0
  2185  0000B3                     actuatorTest@i_1659:
  2186                           	opt stack 0
  2187  0000B3                     Loading@addr:
  2188                           	opt stack 0
  2189                           
  2190                           ; 2 bytes @ 0x33
  2191  0000B3                     	ds	1
  2192  0000B4                     logRun@byte3:
  2193                           	opt stack 0
  2194  0000B4                     actuatorTest@i_1661:
  2195                           	opt stack 0
  2196                           
  2197                           ; 1 bytes @ 0x34
  2198  0000B4                     	ds	1
  2199  0000B5                     Loading@byte1:
  2200                           	opt stack 0
  2201  0000B5                     logRun@byte_i:
  2202                           	opt stack 0
  2203  0000B5                     actuatorTest@i_1662:
  2204                           	opt stack 0
  2205                           
  2206                           ; 1 bytes @ 0x35
  2207  0000B5                     	ds	1
  2208  0000B6                     logRun@byte11:
  2209                           	opt stack 0
  2210  0000B6                     actuatorTest@i_1664:
  2211                           	opt stack 0
  2212  0000B6                     Loading@i_1099:
  2213                           	opt stack 0
  2214                           
  2215                           ; 2 bytes @ 0x36
  2216  0000B6                     	ds	1
  2217  0000B7                     actuatorTest@i_1665:
  2218                           	opt stack 0
  2219  0000B7                     logRun@i:
  2220                           	opt stack 0
  2221                           
  2222                           ; 2 bytes @ 0x37
  2223  0000B7                     	ds	1
  2224  0000B8                     actuatorTest@i_1667:
  2225                           	opt stack 0
  2226  0000B8                     Loading@i_1100:
  2227                           	opt stack 0
  2228                           
  2229                           ; 2 bytes @ 0x38
  2230  0000B8                     	ds	1
  2231  0000B9                     actuatorTest@i_1668:
  2232                           	opt stack 0
  2233  0000B9                     logRun@addr:
  2234                           	opt stack 0
  2235                           
  2236                           ; 2 bytes @ 0x39
  2237  0000B9                     	ds	1
  2238  0000BA                     actuatorTest@i_1671:
  2239                           	opt stack 0
  2240  0000BA                     Loading@i:
  2241                           	opt stack 0
  2242                           
  2243                           ; 2 bytes @ 0x3A
  2244  0000BA                     	ds	1
  2245  0000BB                     actuatorTest@i_1672:
  2246                           	opt stack 0
  2247                           
  2248                           ; 1 bytes @ 0x3B
  2249  0000BB                     	ds	1
  2250  0000BC                     actuatorTest@i_1674:
  2251                           	opt stack 0
  2252  0000BC                     printRTC@RTC_month:
  2253                           	opt stack 0
  2254                           
  2255                           ; 2 bytes @ 0x3C
  2256  0000BC                     	ds	1
  2257  0000BD                     actuatorTest@i_1675:
  2258                           	opt stack 0
  2259                           
  2260                           ; 1 bytes @ 0x3D
  2261  0000BD                     	ds	1
  2262  0000BE                     actuatorTest@i_1677:
  2263                           	opt stack 0
  2264  0000BE                     printRTC@month:
  2265                           	opt stack 0
  2266                           
  2267                           ; 4 bytes @ 0x3E
  2268  0000BE                     	ds	1
  2269  0000BF                     actuatorTest@i_1678:
  2270                           	opt stack 0
  2271                           
  2272                           ; 1 bytes @ 0x3F
  2273  0000BF                     	ds	1
  2274  0000C0                     actuatorTest@i_1681:
  2275                           	opt stack 0
  2276                           
  2277                           ; 1 bytes @ 0x40
  2278  0000C0                     	ds	1
  2279  0000C1                     actuatorTest@i_1682:
  2280                           	opt stack 0
  2281                           
  2282                           ; 1 bytes @ 0x41
  2283  0000C1                     	ds	1
  2284  0000C2                     actuatorTest@i_1684:
  2285                           	opt stack 0
  2286  0000C2                     printRTC@i:
  2287                           	opt stack 0
  2288                           
  2289                           ; 2 bytes @ 0x42
  2290  0000C2                     	ds	1
  2291  0000C3                     actuatorTest@i_1685:
  2292                           	opt stack 0
  2293                           
  2294                           ; 1 bytes @ 0x43
  2295  0000C3                     	ds	1
  2296  0000C4                     ??_UI:
  2297  0000C4                     actuatorTest@i:
  2298                           	opt stack 0
  2299                           
  2300                           ; 2 bytes @ 0x44
  2301  0000C4                     	ds	2
  2302  0000C6                     ??_Test:
  2303  0000C6                     _UI$2316:
  2304                           	opt stack 0
  2305                           
  2306                           ; 2 bytes @ 0x46
  2307  0000C6                     	ds	2
  2308  0000C8                     UI@i:
  2309                           	opt stack 0
  2310                           
  2311                           ; 1 bytes @ 0x48
  2312  0000C8                     	ds	1
  2313  0000C9                     UI@i_409:
  2314                           	opt stack 0
  2315                           
  2316                           ; 1 bytes @ 0x49
  2317  0000C9                     	ds	1
  2318  0000CA                     UI@i_412:
  2319                           	opt stack 0
  2320                           
  2321                           ; 1 bytes @ 0x4A
  2322  0000CA                     	ds	1
  2323  0000CB                     UI@i_413:
  2324                           	opt stack 0
  2325                           
  2326                           ; 1 bytes @ 0x4B
  2327  0000CB                     	ds	1
  2328  0000CC                     UI@i_431:
  2329                           	opt stack 0
  2330                           
  2331                           ; 1 bytes @ 0x4C
  2332  0000CC                     	ds	1
  2333  0000CD                     UI@i_432:
  2334                           	opt stack 0
  2335                           
  2336                           ; 1 bytes @ 0x4D
  2337  0000CD                     	ds	1
  2338  0000CE                     UI@i_435:
  2339                           	opt stack 0
  2340                           
  2341                           ; 1 bytes @ 0x4E
  2342  0000CE                     	ds	1
  2343  0000CF                     UI@i_436:
  2344                           	opt stack 0
  2345                           
  2346                           ; 1 bytes @ 0x4F
  2347  0000CF                     	ds	1
  2348  0000D0                     UI@i_439:
  2349                           	opt stack 0
  2350                           
  2351                           ; 1 bytes @ 0x50
  2352  0000D0                     	ds	1
  2353  0000D1                     UI@i_440:
  2354                           	opt stack 0
  2355                           
  2356                           ; 1 bytes @ 0x51
  2357  0000D1                     	ds	1
  2358  0000D2                     UI@i_443:
  2359                           	opt stack 0
  2360                           
  2361                           ; 1 bytes @ 0x52
  2362  0000D2                     	ds	1
  2363  0000D3                     UI@i_444:
  2364                           	opt stack 0
  2365                           
  2366                           ; 1 bytes @ 0x53
  2367  0000D3                     	ds	1
  2368  0000D4                     UI@i_447:
  2369                           	opt stack 0
  2370                           
  2371                           ; 1 bytes @ 0x54
  2372  0000D4                     	ds	1
  2373  0000D5                     UI@i_448:
  2374                           	opt stack 0
  2375                           
  2376                           ; 1 bytes @ 0x55
  2377  0000D5                     	ds	1
  2378  0000D6                     UI@month:
  2379                           	opt stack 0
  2380                           
  2381                           ; 4 bytes @ 0x56
  2382  0000D6                     	ds	4
  2383  0000DA                     tblptru	equ	0xFF8
  2384                           tblptrh	equ	0xFF7
  2385                           tblptrl	equ	0xFF6
  2386                           tablat	equ	0xFF5
  2387                           postinc0	equ	0xFEE
  2388                           wreg	equ	0xFE8
  2389                           postdec1	equ	0xFE5
  2390                           fsr1l	equ	0xFE1
  2391                           
  2392                           ; 1 bytes @ 0x5A
  2393                           
  2394                           	psect	cstackCOMRAM
  2395  000001                     __pcstackCOMRAM:
  2396                           	opt stack 0
  2397  000001                     ??i2_I2C_Master_Wait:
  2398  000001                     ??i2_isdigit:
  2399  000001                     ?i2___wmul:
  2400                           	opt stack 0
  2401  000001                     ?i2___lwmod:
  2402                           	opt stack 0
  2403  000001                     i2lcdNibble@temp:
  2404                           	opt stack 0
  2405  000001                     i2EEPROM_read@address:
  2406                           	opt stack 0
  2407  000001                     i2___wmul@multiplier:
  2408                           	opt stack 0
  2409  000001                     i2___lwmod@dividend:
  2410                           	opt stack 0
  2411  000001                     i2strcpy@to:
  2412                           	opt stack 0
  2413                           
  2414                           ; 2 bytes @ 0x0
  2415  000001                     	ds	1
  2416  000002                     i2I2C_Master_Read@a:
  2417                           	opt stack 0
  2418  000002                     i2lcdNibble@data:
  2419                           	opt stack 0
  2420  000002                     i2_isdigit$1960:
  2421                           	opt stack 0
  2422  000002                     i2I2C_Master_Write@d:
  2423                           	opt stack 0
  2424                           
  2425                           ; 2 bytes @ 0x1
  2426  000002                     	ds	1
  2427  000003                     i2I2C_Master_Read@temp:
  2428                           	opt stack 0
  2429  000003                     i2lcdInst@data:
  2430                           	opt stack 0
  2431  000003                     i2putch@data:
  2432                           	opt stack 0
  2433  000003                     i2isdigit@c:
  2434                           	opt stack 0
  2435  000003                     i2___wmul@multiplicand:
  2436                           	opt stack 0
  2437  000003                     i2___lwmod@divisor:
  2438                           	opt stack 0
  2439  000003                     i2strcpy@from:
  2440                           	opt stack 0
  2441                           
  2442                           ; 2 bytes @ 0x2
  2443  000003                     	ds	1
  2444  000004                     i2getRTC@i:
  2445                           	opt stack 0
  2446                           
  2447                           ; 2 bytes @ 0x3
  2448  000004                     	ds	1
  2449  000005                     i2___lwmod@counter:
  2450                           	opt stack 0
  2451  000005                     i2___wmul@product:
  2452                           	opt stack 0
  2453  000005                     i2strcpy@cp:
  2454                           	opt stack 0
  2455                           
  2456                           ; 2 bytes @ 0x4
  2457  000005                     	ds	1
  2458  000006                     ?i2___lwdiv:
  2459                           	opt stack 0
  2460  000006                     i2___lwdiv@dividend:
  2461                           	opt stack 0
  2462                           
  2463                           ; 2 bytes @ 0x5
  2464  000006                     	ds	1
  2465  000007                     retrieveLog@logNum:
  2466                           	opt stack 0
  2467                           
  2468                           ; 2 bytes @ 0x6
  2469  000007                     	ds	1
  2470  000008                     i2___lwdiv@divisor:
  2471                           	opt stack 0
  2472                           
  2473                           ; 2 bytes @ 0x7
  2474  000008                     	ds	1
  2475  000009                     ??_retrieveLog:
  2476                           
  2477                           ; 1 bytes @ 0x8
  2478  000009                     	ds	1
  2479  00000A                     i2___lwdiv@quotient:
  2480                           	opt stack 0
  2481                           
  2482                           ; 2 bytes @ 0x9
  2483  00000A                     	ds	1
  2484  00000B                     retrieveLog@byte1:
  2485                           	opt stack 0
  2486                           
  2487                           ; 1 bytes @ 0xA
  2488  00000B                     	ds	1
  2489  00000C                     retrieveLog@byte2:
  2490                           	opt stack 0
  2491  00000C                     i2___lwdiv@counter:
  2492                           	opt stack 0
  2493                           
  2494                           ; 1 bytes @ 0xB
  2495  00000C                     	ds	1
  2496  00000D                     ?i2_printf:
  2497                           	opt stack 0
  2498  00000D                     retrieveLog@byte3:
  2499                           	opt stack 0
  2500  00000D                     i2printf@f:
  2501                           	opt stack 0
  2502                           
  2503                           ; 2 bytes @ 0xC
  2504  00000D                     	ds	1
  2505  00000E                     retrieveLog@i:
  2506                           	opt stack 0
  2507                           
  2508                           ; 2 bytes @ 0xD
  2509  00000E                     	ds	2
  2510  000010                     retrieveLog@addr:
  2511                           	opt stack 0
  2512                           
  2513                           ; 2 bytes @ 0xF
  2514  000010                     	ds	2
  2515  000012                     dispLogs@myLog:
  2516                           	opt stack 0
  2517                           
  2518                           ; 2 bytes @ 0x11
  2519  000012                     	ds	2
  2520  000014                     
  2521                           ; 1 bytes @ 0x13
  2522  000014                     	ds	5
  2523  000019                     ??i2_printf:
  2524                           
  2525                           ; 1 bytes @ 0x18
  2526  000019                     	ds	4
  2527  00001D                     i2printf@prec:
  2528                           	opt stack 0
  2529                           
  2530                           ; 1 bytes @ 0x1C
  2531  00001D                     	ds	1
  2532  00001E                     i2printf@cp:
  2533                           	opt stack 0
  2534                           
  2535                           ; 2 bytes @ 0x1D
  2536  00001E                     	ds	2
  2537  000020                     i2printf@ap:
  2538                           	opt stack 0
  2539                           
  2540                           ; 2 bytes @ 0x1F
  2541  000020                     	ds	2
  2542  000022                     i2printf@len:
  2543                           	opt stack 0
  2544                           
  2545                           ; 2 bytes @ 0x21
  2546  000022                     	ds	2
  2547  000024                     i2printf@val:
  2548                           	opt stack 0
  2549                           
  2550                           ; 2 bytes @ 0x23
  2551  000024                     	ds	2
  2552  000026                     i2printf@flag:
  2553                           	opt stack 0
  2554                           
  2555                           ; 1 bytes @ 0x25
  2556  000026                     	ds	1
  2557  000027                     i2printf@c:
  2558                           	opt stack 0
  2559                           
  2560                           ; 1 bytes @ 0x26
  2561  000027                     	ds	1
  2562  000028                     i2printf@width:
  2563                           	opt stack 0
  2564                           
  2565                           ; 2 bytes @ 0x27
  2566  000028                     	ds	2
  2567  00002A                     ??_printSortTimer:
  2568  00002A                     ??i2_printRTC:
  2569  00002A                     ?_inputHandler:
  2570                           	opt stack 0
  2571                           
  2572                           ; 2 bytes @ 0x29
  2573  00002A                     	ds	2
  2574  00002C                     ??_inputHandler:
  2575                           
  2576                           ; 1 bytes @ 0x2B
  2577  00002C                     	ds	1
  2578  00002D                     printSortTimer@hour:
  2579                           	opt stack 0
  2580  00002D                     i2printRTC@INT_time:
  2581                           	opt stack 0
  2582                           
  2583                           ; 14 bytes @ 0x2C
  2584  00002D                     	ds	2
  2585  00002F                     printSortTimer@curTime:
  2586                           	opt stack 0
  2587                           
  2588                           ; 14 bytes @ 0x2E
  2589  00002F                     	ds	12
  2590  00003B                     i2printRTC@RTC_month:
  2591                           	opt stack 0
  2592                           
  2593                           ; 2 bytes @ 0x3A
  2594  00003B                     	ds	2
  2595  00003D                     printSortTimer@start_sec:
  2596                           	opt stack 0
  2597  00003D                     i2printRTC@month:
  2598                           	opt stack 0
  2599                           
  2600                           ; 4 bytes @ 0x3C
  2601  00003D                     	ds	2
  2602  00003F                     printSortTimer@cur_sec:
  2603                           	opt stack 0
  2604                           
  2605                           ; 2 bytes @ 0x3E
  2606  00003F                     	ds	2
  2607  000041                     printSortTimer@min:
  2608                           	opt stack 0
  2609  000041                     i2printRTC@i:
  2610                           	opt stack 0
  2611                           
  2612                           ; 2 bytes @ 0x40
  2613  000041                     	ds	2
  2614  000043                     ??_updateMenu:
  2615  000043                     printSortTimer@sec:
  2616                           	opt stack 0
  2617                           
  2618                           ; 2 bytes @ 0x42
  2619  000043                     	ds	2
  2620  000045                     _printSortTimer$2436:
  2621                           	opt stack 0
  2622                           
  2623                           ; 2 bytes @ 0x44
  2624  000045                     	ds	2
  2625  000047                     printSortTimer@timeDiff:
  2626                           	opt stack 0
  2627                           
  2628                           ; 2 bytes @ 0x46
  2629  000047                     	ds	2
  2630  000049                     printSortTimer@i:
  2631                           	opt stack 0
  2632                           
  2633                           ; 2 bytes @ 0x48
  2634  000049                     	ds	2
  2635  00004B                     ??_handler:
  2636                           
  2637                           ; 1 bytes @ 0x4A
  2638  00004B                     	ds	16
  2639                           tblptru	equ	0xFF8
  2640                           tblptrh	equ	0xFF7
  2641                           tblptrl	equ	0xFF6
  2642                           tablat	equ	0xFF5
  2643                           postinc0	equ	0xFEE
  2644                           wreg	equ	0xFE8
  2645                           postdec1	equ	0xFE5
  2646                           fsr1l	equ	0xFE1
  2647                           
  2648 ;;
  2649 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2650 ;;
  2651 ;; *************** function _main *****************
  2652 ;; Defined at:
  2653 ;;		line 19 in file "main.c"
  2654 ;; Parameters:    Size  Location     Type
  2655 ;;		None
  2656 ;; Auto vars:     Size  Location     Type
  2657 ;;		None
  2658 ;; Return value:  Size  Location     Type
  2659 ;;                  1    wreg      void 
  2660 ;; Registers used:
  2661 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2662 ;; Tracked objects:
  2663 ;;		On entry : 0/0
  2664 ;;		On exit  : 0/0
  2665 ;;		Unchanged: 0/0
  2666 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2667 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2668 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2669 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2670 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2671 ;;Total ram usage:        0 bytes
  2672 ;; Hardware stack levels required when called:   13
  2673 ;; This function calls:
  2674 ;;		_I2C_Master_Init
  2675 ;;		_Test
  2676 ;;		_UI
  2677 ;;		_initLCD
  2678 ;;		_initTime
  2679 ;;		_initUI
  2680 ;;		_logRun
  2681 ;;		_machineConfig
  2682 ;;		_sort
  2683 ;;		_stopSignals
  2684 ;; This function is called by:
  2685 ;;		Startup code after reset
  2686 ;; This function uses a non-reentrant model
  2687 ;;
  2688                           
  2689                           	psect	text0
  2690  0038B0                     __ptext0:
  2691                           	opt stack 0
  2692  0038B0                     _main:
  2693                           	opt stack 18
  2694                           
  2695                           ;main.c: 20: machineConfig();
  2696                           
  2697                           ;incstack = 0
  2698  0038B0  ECDC  F020         	call	_machineConfig	;wreg free
  2699                           
  2700                           ;main.c: 21: initLCD();
  2701  0038B4  EC2C  F022         	call	_initLCD	;wreg free
  2702                           
  2703                           ;main.c: 24: RTCflag = 0;
  2704  0038B8  0E00               	movlw	0
  2705  0038BA  0100               	movlb	0	; () banked
  2706  0038BC  6FE3               	movwf	(_RTCflag+1)& (0+255),b
  2707  0038BE  0E00               	movlw	0
  2708  0038C0  6FE2               	movwf	_RTCflag& (0+255),b
  2709                           
  2710                           ;main.c: 25: if(RTCflag){
  2711  0038C2  0100               	movlb	0	; () banked
  2712  0038C4  51E2               	movf	_RTCflag& (0+255),w,b
  2713  0038C6  0100               	movlb	0	; () banked
  2714  0038C8  11E3               	iorwf	(_RTCflag+1)& (0+255),w,b
  2715  0038CA  B4D8               	btfsc	status,2,c
  2716  0038CC  D016               	goto	l8404
  2717                           
  2718                           ; BSR set to: 0
  2719                           ;main.c: 26: initTime(0x42, 0x20, 0x15, 0x04, 0x15, 0x03, 0x17);
  2720  0038CE  0E20               	movlw	32
  2721  0038D0  0100               	movlb	0	; () banked
  2722  0038D2  6F80               	movwf	initTime@m& (0+255),b
  2723  0038D4  0E15               	movlw	21
  2724  0038D6  0100               	movlb	0	; () banked
  2725  0038D8  6F81               	movwf	initTime@h& (0+255),b
  2726  0038DA  0E04               	movlw	4
  2727  0038DC  0100               	movlb	0	; () banked
  2728  0038DE  6F82               	movwf	initTime@w& (0+255),b
  2729  0038E0  0E15               	movlw	21
  2730  0038E2  0100               	movlb	0	; () banked
  2731  0038E4  6F83               	movwf	initTime@DD& (0+255),b
  2732  0038E6  0E03               	movlw	3
  2733  0038E8  0100               	movlb	0	; () banked
  2734  0038EA  6F84               	movwf	initTime@MM& (0+255),b
  2735  0038EC  0E17               	movlw	23
  2736  0038EE  0100               	movlb	0	; () banked
  2737  0038F0  6F85               	movwf	initTime@YY& (0+255),b
  2738  0038F2  0E42               	movlw	66
  2739  0038F4  ECDF  F024         	call	_initTime
  2740                           
  2741                           ;main.c: 27: }
  2742  0038F8  D00B               	goto	l8406
  2743  0038FA                     l8404:
  2744                           
  2745                           ;main.c: 28: else{
  2746                           ;main.c: 29: I2C_Master_Init(10000);
  2747  0038FA  0E10               	movlw	16
  2748  0038FC  0100               	movlb	0	; () banked
  2749  0038FE  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  2750  003900  0E27               	movlw	39
  2751  003902  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  2752  003904  0E00               	movlw	0
  2753  003906  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  2754  003908  0E00               	movlw	0
  2755  00390A  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  2756  00390C  ECAC  F020         	call	_I2C_Master_Init	;wreg free
  2757  003910                     l8406:
  2758                           
  2759                           ;main.c: 30: }
  2760                           ;main.c: 32: initUI();
  2761  003910  ECE8  F023         	call	_initUI	;wreg free
  2762                           
  2763                           ;main.c: 33: first = 1;
  2764  003914  0E00               	movlw	0
  2765  003916  6E70               	movwf	_first+1,c
  2766  003918  0E01               	movlw	1
  2767  00391A  6E6F               	movwf	_first,c
  2768                           
  2769                           ;main.c: 44: switch(machine_state){
  2770                           
  2771                           ;main.c: 43: while(1){
  2772  00391C  D017               	goto	l8428
  2773  00391E                     l8410:
  2774                           
  2775                           ;main.c: 46: UI();
  2776  00391E  EC65  F004         	call	_UI	;wreg free
  2777                           
  2778                           ;main.c: 47: break;
  2779  003922  D014               	goto	l8428
  2780  003924                     l8412:
  2781                           
  2782                           ;main.c: 49: sort();
  2783  003924  ECCE  F024         	call	_sort	;wreg free
  2784                           
  2785                           ;main.c: 50: break;
  2786  003928  D011               	goto	l8428
  2787  00392A                     l8414:
  2788                           
  2789                           ;main.c: 52: stopSignals();
  2790  00392A  EC0B  F025         	call	_stopSignals	;wreg free
  2791                           
  2792                           ;main.c: 53: logRun();
  2793  00392E  ECF7  F018         	call	_logRun	;wreg free
  2794                           
  2795                           ;main.c: 54: first = 1;
  2796  003932  0E00               	movlw	0
  2797  003934  6E70               	movwf	_first+1,c
  2798  003936  0E01               	movlw	1
  2799  003938  6E6F               	movwf	_first,c
  2800                           
  2801                           ;main.c: 55: UI();
  2802  00393A  EC65  F004         	call	_UI	;wreg free
  2803                           
  2804                           ;main.c: 56: break;
  2805  00393E  D006               	goto	l8428
  2806  003940                     l8422:
  2807                           
  2808                           ;main.c: 58: Test();
  2809  003940  EC28  F01A         	call	_Test	;wreg free
  2810                           
  2811                           ;main.c: 59: break;
  2812  003944  D003               	goto	l8428
  2813  003946                     l8424:
  2814                           
  2815                           ;main.c: 61: stopSignals();
  2816  003946  EC0B  F025         	call	_stopSignals	;wreg free
  2817  00394A                     l487:
  2818  00394A  D7FF               	goto	l487
  2819  00394C                     l8428:
  2820  00394C  0100               	movlb	0	; () banked
  2821  00394E  51FC               	movf	_machine_state& (0+255),w,b
  2822                           
  2823                           ; Switch size 1, requested type "space"
  2824                           ; Number of cases is 5, Range of values is 0 to 4
  2825                           ; switch strategies available:
  2826                           ; Name         Instructions Cycles
  2827                           ; simple_byte           16     9 (average)
  2828                           ;	Chosen strategy is simple_byte
  2829  003950  0A00               	xorlw	0	; case 0
  2830  003952  B4D8               	btfsc	status,2,c
  2831  003954  D7E4               	goto	l8410
  2832  003956  0A01               	xorlw	1	; case 1
  2833  003958  B4D8               	btfsc	status,2,c
  2834  00395A  D7E4               	goto	l8412
  2835  00395C  0A03               	xorlw	3	; case 2
  2836  00395E  B4D8               	btfsc	status,2,c
  2837  003960  D7E4               	goto	l8414
  2838  003962  0A01               	xorlw	1	; case 3
  2839  003964  B4D8               	btfsc	status,2,c
  2840  003966  D7EC               	goto	l8422
  2841  003968  0A07               	xorlw	7	; case 4
  2842  00396A  B4D8               	btfsc	status,2,c
  2843  00396C  D7EC               	goto	l8424
  2844                           
  2845                           ; BSR set to: 0
  2846                           
  2847                           ; BSR set to: 0
  2848  00396E  D7EE               	goto	l8428
  2849  003970                     __end_of_main:
  2850                           	opt stack 0
  2851                           tblptru	equ	0xFF8
  2852                           tblptrh	equ	0xFF7
  2853                           tblptrl	equ	0xFF6
  2854                           tablat	equ	0xFF5
  2855                           postinc0	equ	0xFEE
  2856                           wreg	equ	0xFE8
  2857                           postdec1	equ	0xFE5
  2858                           fsr1l	equ	0xFE1
  2859                           status	equ	0xFD8
  2860                           
  2861 ;; *************** function _stopSignals *****************
  2862 ;; Defined at:
  2863 ;;		line 70 in file "main.c"
  2864 ;; Parameters:    Size  Location     Type
  2865 ;;		None
  2866 ;; Auto vars:     Size  Location     Type
  2867 ;;		None
  2868 ;; Return value:  Size  Location     Type
  2869 ;;                  1    wreg      void 
  2870 ;; Registers used:
  2871 ;;		wreg, status,2
  2872 ;; Tracked objects:
  2873 ;;		On entry : 0/0
  2874 ;;		On exit  : 0/0
  2875 ;;		Unchanged: 0/0
  2876 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2877 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2878 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2879 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2880 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2881 ;;Total ram usage:        0 bytes
  2882 ;; Hardware stack levels used:    1
  2883 ;; Hardware stack levels required when called:    7
  2884 ;; This function calls:
  2885 ;;		Nothing
  2886 ;; This function is called by:
  2887 ;;		_main
  2888 ;; This function uses a non-reentrant model
  2889 ;;
  2890                           
  2891                           	psect	text1
  2892  004A16                     __ptext1:
  2893                           	opt stack 0
  2894  004A16                     _stopSignals:
  2895                           	opt stack 23
  2896                           
  2897                           ;main.c: 71: LATA = 0x00;
  2898                           
  2899                           ; BSR set to: 0
  2900                           ;incstack = 0
  2901  004A16  0E00               	movlw	0
  2902  004A18  6E89               	movwf	3977,c	;volatile
  2903                           
  2904                           ;main.c: 72: LATB = 0x00;
  2905  004A1A  0E00               	movlw	0
  2906  004A1C  6E8A               	movwf	3978,c	;volatile
  2907                           
  2908                           ;main.c: 73: LATC = 0x00;
  2909  004A1E  0E00               	movlw	0
  2910  004A20  6E8B               	movwf	3979,c	;volatile
  2911                           
  2912                           ;main.c: 74: LATD = 0x00;
  2913  004A22  0E00               	movlw	0
  2914  004A24  6E8C               	movwf	3980,c	;volatile
  2915                           
  2916                           ;main.c: 75: LATE = 0x00;
  2917  004A26  0E00               	movlw	0
  2918  004A28  6E8D               	movwf	3981,c	;volatile
  2919  004A2A  0012               	return		;funcret
  2920  004A2C                     __end_of_stopSignals:
  2921                           	opt stack 0
  2922                           tblptru	equ	0xFF8
  2923                           tblptrh	equ	0xFF7
  2924                           tblptrl	equ	0xFF6
  2925                           tablat	equ	0xFF5
  2926                           postinc0	equ	0xFEE
  2927                           wreg	equ	0xFE8
  2928                           postdec1	equ	0xFE5
  2929                           fsr1l	equ	0xFE1
  2930                           status	equ	0xFD8
  2931                           
  2932 ;; *************** function _sort *****************
  2933 ;; Defined at:
  2934 ;;		line 56 in file "sort.c"
  2935 ;; Parameters:    Size  Location     Type
  2936 ;;		None
  2937 ;; Auto vars:     Size  Location     Type
  2938 ;;		None
  2939 ;; Return value:  Size  Location     Type
  2940 ;;                  1    wreg      void 
  2941 ;; Registers used:
  2942 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2943 ;; Tracked objects:
  2944 ;;		On entry : 0/0
  2945 ;;		On exit  : 0/0
  2946 ;;		Unchanged: 0/0
  2947 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2948 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2949 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2950 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2951 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2952 ;;Total ram usage:        0 bytes
  2953 ;; Hardware stack levels used:    1
  2954 ;; Hardware stack levels required when called:   12
  2955 ;; This function calls:
  2956 ;;		_Distribution
  2957 ;;		_ID
  2958 ;;		_Loading
  2959 ;; This function is called by:
  2960 ;;		_main
  2961 ;; This function uses a non-reentrant model
  2962 ;;
  2963                           
  2964                           	psect	text2
  2965  00499C                     __ptext2:
  2966                           	opt stack 0
  2967  00499C                     _sort:
  2968                           	opt stack 18
  2969                           
  2970                           ;sort.c: 57: if(machine_state == Sorting_state){
  2971                           
  2972                           ;incstack = 0
  2973  00499C  0100               	movlb	0	; () banked
  2974  00499E  05FC               	decf	_machine_state& (0+255),w,b
  2975  0049A0  B4D8               	btfsc	status,2,c
  2976                           
  2977                           ; BSR set to: 0
  2978                           ;sort.c: 58: Loading();
  2979  0049A2  ECAB  F015         	call	_Loading	;wreg free
  2980                           
  2981                           ;sort.c: 59: }
  2982                           ;sort.c: 60: if(machine_state == Sorting_state){
  2983  0049A6  0100               	movlb	0	; () banked
  2984  0049A8  05FC               	decf	_machine_state& (0+255),w,b
  2985  0049AA  B4D8               	btfsc	status,2,c
  2986                           
  2987                           ; BSR set to: 0
  2988                           ;sort.c: 61: ID();
  2989  0049AC  EC4C  F018         	call	_ID	;wreg free
  2990                           
  2991                           ;sort.c: 62: }
  2992                           ;sort.c: 63: if(machine_state == Sorting_state){
  2993  0049B0  0100               	movlb	0	; () banked
  2994  0049B2  05FC               	decf	_machine_state& (0+255),w,b
  2995  0049B4  A4D8               	btfss	status,2,c
  2996  0049B6  0012               	return	
  2997                           
  2998                           ; BSR set to: 0
  2999                           ;sort.c: 64: Distribution();
  3000  0049B8  ECAC  F013         	call	_Distribution	;wreg free
  3001  0049BC  0012               	return	
  3002  0049BE                     __end_of_sort:
  3003                           	opt stack 0
  3004                           tblptru	equ	0xFF8
  3005                           tblptrh	equ	0xFF7
  3006                           tblptrl	equ	0xFF6
  3007                           tablat	equ	0xFF5
  3008                           postinc0	equ	0xFEE
  3009                           wreg	equ	0xFE8
  3010                           postdec1	equ	0xFE5
  3011                           fsr1l	equ	0xFE1
  3012                           status	equ	0xFD8
  3013                           
  3014 ;; *************** function _Loading *****************
  3015 ;; Defined at:
  3016 ;;		line 68 in file "sort.c"
  3017 ;; Parameters:    Size  Location     Type
  3018 ;;		None
  3019 ;; Auto vars:     Size  Location     Type
  3020 ;;  i               2   56[BANK0 ] int 
  3021 ;;  i               2   54[BANK0 ] int 
  3022 ;;  i               2   58[BANK0 ] int 
  3023 ;;  addr            2   51[BANK0 ] unsigned short 
  3024 ;;  byte1           1   53[BANK0 ] unsigned char 
  3025 ;; Return value:  Size  Location     Type
  3026 ;;                  1    wreg      void 
  3027 ;; Registers used:
  3028 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3029 ;; Tracked objects:
  3030 ;;		On entry : 0/0
  3031 ;;		On exit  : 0/0
  3032 ;;		Unchanged: 0/0
  3033 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3034 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3035 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3036 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3037 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3038 ;;Total ram usage:       11 bytes
  3039 ;; Hardware stack levels used:    1
  3040 ;; Hardware stack levels required when called:   11
  3041 ;; This function calls:
  3042 ;;		_EEPROM_read
  3043 ;;		_EEPROM_write
  3044 ;;		_delay_ms
  3045 ;;		_getIR
  3046 ;;		_getMAG
  3047 ;;		_initGlobalVars
  3048 ;;		_initServos
  3049 ;;		_initSortTimer
  3050 ;;		_lcdInst
  3051 ;; This function is called by:
  3052 ;;		_sort
  3053 ;; This function uses a non-reentrant model
  3054 ;;
  3055                           
  3056                           	psect	text3
  3057  002B56                     __ptext3:
  3058                           	opt stack 0
  3059  002B56                     _Loading:
  3060                           	opt stack 18
  3061                           
  3062                           ;sort.c: 69: if(first){
  3063                           
  3064                           ;incstack = 0
  3065  002B56  506F               	movf	_first,w,c
  3066  002B58  1070               	iorwf	_first+1,w,c
  3067  002B5A  B4D8               	btfsc	status,2,c
  3068  002B5C  D074               	goto	l6624
  3069                           
  3070                           ;sort.c: 70: initGlobalVars();
  3071  002B5E  EC11  F020         	call	_initGlobalVars	;wreg free
  3072                           
  3073                           ;sort.c: 71: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  3074  002B62  0E01               	movlw	1
  3075  002B64  EC3C  F025         	call	_lcdInst
  3076  002B68  0E68               	movlw	104
  3077  002B6A  0100               	movlb	0	; () banked
  3078  002B6C  6FB1               	movwf	??_Loading& (0+255),b
  3079  002B6E  0EE4               	movlw	228
  3080  002B70                     u7457:
  3081  002B70  2EE8               	decfsz	wreg,f,c
  3082  002B72  D7FE               	bra	u7457
  3083  002B74  2FB1               	decfsz	??_Loading& (0+255),f,b
  3084  002B76  D7FC               	bra	u7457
  3085  002B78  F000               	nop	
  3086                           
  3087                           ;sort.c: 72: initSortTimer();
  3088  002B7A  EC75  F01D         	call	_initSortTimer	;wreg free
  3089                           
  3090                           ;sort.c: 73: LATCbits.LATC5 = 1;
  3091  002B7E  8A8B               	bsf	3979,5,c	;volatile
  3092                           
  3093                           ;sort.c: 78: sel = EEPROM_read(0);
  3094  002B80  0E00               	movlw	0
  3095  002B82  0100               	movlb	0	; () banked
  3096  002B84  6F81               	movwf	(EEPROM_read@address+1)& (0+255),b
  3097  002B86  0E00               	movlw	0
  3098  002B88  6F80               	movwf	EEPROM_read@address& (0+255),b
  3099  002B8A  ECFF  F024         	call	_EEPROM_read	;wreg free
  3100  002B8E  0100               	movlb	0	; () banked
  3101  002B90  6FFD               	movwf	_sel& (0+255),b
  3102                           
  3103                           ; BSR set to: 0
  3104                           ;sort.c: 79: unsigned short addr = 1 + 11 * sel;
  3105  002B92  0100               	movlb	0	; () banked
  3106  002B94  51FD               	movf	_sel& (0+255),w,b
  3107  002B96  0D0B               	mullw	11
  3108  002B98  0E01               	movlw	1
  3109  002B9A  24F3               	addwf	prodl,w,c
  3110  002B9C  0100               	movlb	0	; () banked
  3111  002B9E  6FB3               	movwf	Loading@addr& (0+255),b
  3112  002BA0  0E00               	movlw	0
  3113  002BA2  20F4               	addwfc	prodh,w,c
  3114  002BA4  0100               	movlb	0	; () banked
  3115  002BA6  6FB4               	movwf	(Loading@addr+1)& (0+255),b
  3116                           
  3117                           ; BSR set to: 0
  3118                           ;sort.c: 80: unsigned char byte1 = 0b01111111;
  3119  002BA8  0E7F               	movlw	127
  3120  002BAA  0100               	movlb	0	; () banked
  3121  002BAC  6FB5               	movwf	Loading@byte1& (0+255),b
  3122                           
  3123                           ; BSR set to: 0
  3124                           ;sort.c: 81: EEPROM_write(addr, byte1);
  3125  002BAE  C0B3  F0AB         	movff	Loading@addr,EEPROM_write@address
  3126  002BB2  C0B4  F0AC         	movff	Loading@addr+1,EEPROM_write@address+1
  3127  002BB6  C0B5  F0AD         	movff	Loading@byte1,EEPROM_write@data
  3128  002BBA  ECB2  F01A         	call	_EEPROM_write	;wreg free
  3129                           
  3130                           ;sort.c: 84: LATAbits.LATA5 = 0;
  3131  002BBE  9A89               	bcf	3977,5,c	;volatile
  3132                           
  3133                           ;sort.c: 86: for(int i=0; i<46; i++){
  3134  002BC0  0E00               	movlw	0
  3135  002BC2  0100               	movlb	0	; () banked
  3136  002BC4  6FBB               	movwf	(Loading@i+1)& (0+255),b
  3137  002BC6  0E00               	movlw	0
  3138  002BC8  6FBA               	movwf	Loading@i& (0+255),b
  3139                           
  3140                           ; BSR set to: 0
  3141  002BCA  0100               	movlb	0	; () banked
  3142  002BCC  BFBB               	btfsc	(Loading@i+1)& (0+255),7,b
  3143  002BCE  D008               	goto	l6612
  3144  002BD0  0100               	movlb	0	; () banked
  3145  002BD2  51BB               	movf	(Loading@i+1)& (0+255),w,b
  3146  002BD4  E126               	bnz	l732
  3147  002BD6  0E2E               	movlw	46
  3148  002BD8  0100               	movlb	0	; () banked
  3149  002BDA  5DBA               	subwf	Loading@i& (0+255),w,b
  3150  002BDC  B0D8               	btfsc	status,0,c
  3151  002BDE  D021               	goto	l732
  3152  002BE0                     l6612:
  3153                           
  3154                           ; BSR set to: 0
  3155                           ;sort.c: 87: LATAbits.LATA5 = !LATAbits.LATA5;
  3156  002BE0  BA89               	btfsc	3977,5,c	;volatile
  3157  002BE2  D004               	goto	u5040
  3158  002BE4  0100               	movlb	0	; () banked
  3159  002BE6  6BB1               	clrf	??_Loading& (0+255),b
  3160  002BE8  2BB1               	incf	??_Loading& (0+255),f,b
  3161  002BEA  D002               	goto	u5058
  3162  002BEC                     u5040:
  3163  002BEC  0100               	movlb	0	; () banked
  3164  002BEE  6BB1               	clrf	??_Loading& (0+255),b
  3165  002BF0                     u5058:
  3166  002BF0  0100               	movlb	0	; () banked
  3167  002BF2  3BB1               	swapf	??_Loading& (0+255),f,b
  3168  002BF4  47B1               	rlncf	??_Loading& (0+255),f,b
  3169  002BF6  5089               	movf	3977,w,c	;volatile
  3170  002BF8  0100               	movlb	0	; () banked
  3171  002BFA  19B1               	xorwf	??_Loading& (0+255),w,b
  3172  002BFC  0BDF               	andlw	-33
  3173  002BFE  19B1               	xorwf	??_Loading& (0+255),w,b
  3174  002C00  6E89               	movwf	3977,c	;volatile
  3175                           
  3176                           ; BSR set to: 0
  3177                           ;sort.c: 88: delay_ms(45-i);
  3178  002C02  0100               	movlb	0	; () banked
  3179  002C04  51BA               	movf	Loading@i& (0+255),w,b
  3180  002C06  0800               	sublw	0
  3181  002C08  0F2D               	addlw	45
  3182  002C0A  EC6E  F024         	call	_delay_ms
  3183  002C0E  0100               	movlb	0	; () banked
  3184  002C10  4BBA               	infsnz	Loading@i& (0+255),f,b
  3185  002C12  2BBB               	incf	(Loading@i+1)& (0+255),f,b
  3186                           
  3187                           ; BSR set to: 0
  3188  002C14  0100               	movlb	0	; () banked
  3189  002C16  BFBB               	btfsc	(Loading@i+1)& (0+255),7,b
  3190  002C18  D7E3               	goto	l6612
  3191  002C1A  0100               	movlb	0	; () banked
  3192  002C1C  51BB               	movf	(Loading@i+1)& (0+255),w,b
  3193  002C1E  E101               	bnz	u5060
  3194  002C20  D7DA               	goto	L1
  3195  002C22                     u5060:
  3196  002C22                     l732:
  3197                           
  3198                           ; BSR set to: 0
  3199                           ;sort.c: 89: }
  3200                           ;sort.c: 90: LATAbits.LATA5 = 1;
  3201  002C22  8A89               	bsf	3977,5,c	;volatile
  3202                           
  3203                           ; BSR set to: 0
  3204                           ;sort.c: 93: initServos();
  3205  002C24  EC38  F021         	call	_initServos	;wreg free
  3206                           
  3207                           ;sort.c: 94: _delay((unsigned long)((5000)*(32000000/4000.0)));
  3208  002C28  0ECB               	movlw	203
  3209  002C2A  0100               	movlb	0	; () banked
  3210  002C2C  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3211  002C2E  0EEC               	movlw	236
  3212  002C30  0100               	movlb	0	; () banked
  3213  002C32  6FB1               	movwf	??_Loading& (0+255),b
  3214  002C34  0E84               	movlw	132
  3215  002C36                     u7467:
  3216  002C36  2EE8               	decfsz	wreg,f,c
  3217  002C38  D7FE               	bra	u7467
  3218  002C3A  2FB1               	decfsz	??_Loading& (0+255),f,b
  3219  002C3C  D7FC               	bra	u7467
  3220  002C3E  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3221  002C40  D7FA               	bra	u7467
  3222  002C42  F000               	nop	
  3223                           
  3224                           ;sort.c: 95: }
  3225  002C44  0012               	return	
  3226  002C46                     l6624:
  3227                           
  3228                           ;sort.c: 96: else{
  3229                           ;sort.c: 99: if(!f_loadingNewCan){
  3230  002C46  0100               	movlb	0	; () banked
  3231  002C48  51E8               	movf	_f_loadingNewCan& (0+255),w,b
  3232  002C4A  0100               	movlb	0	; () banked
  3233  002C4C  11E9               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  3234  002C4E  A4D8               	btfss	status,2,c
  3235  002C50  D017               	goto	l6640
  3236                           
  3237                           ; BSR set to: 0
  3238                           ;sort.c: 101: getIR();
  3239  002C52  EC9F  F01F         	call	_getIR	;wreg free
  3240                           
  3241                           ;sort.c: 103: if(!f_loadingNewCan){
  3242  002C56  0100               	movlb	0	; () banked
  3243  002C58  51E8               	movf	_f_loadingNewCan& (0+255),w,b
  3244  002C5A  0100               	movlb	0	; () banked
  3245  002C5C  11E9               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  3246  002C5E  B4D8               	btfsc	status,2,c
  3247  002C60  0012               	return	
  3248                           
  3249                           ; BSR set to: 0
  3250                           ;sort.c: 107: else{
  3251                           ;sort.c: 108: count_total++;
  3252                           
  3253                           ; BSR set to: 0
  3254                           
  3255                           ; BSR set to: 0
  3256                           ;sort.c: 105: }
  3257                           
  3258                           ; BSR set to: 0
  3259                           ;sort.c: 104: return;
  3260  002C62  0100               	movlb	0	; () banked
  3261  002C64  4BFE               	infsnz	_count_total& (0+255),f,b
  3262  002C66  2BFF               	incf	(_count_total+1)& (0+255),f,b
  3263                           
  3264                           ; BSR set to: 0
  3265                           ;sort.c: 109: if(count_total == 12){
  3266  002C68  0E0C               	movlw	12
  3267  002C6A  0100               	movlb	0	; () banked
  3268  002C6C  19FE               	xorwf	_count_total& (0+255),w,b
  3269  002C6E  0100               	movlb	0	; () banked
  3270  002C70  11FF               	iorwf	(_count_total+1)& (0+255),w,b
  3271  002C72  A4D8               	btfss	status,2,c
  3272  002C74  0012               	return	
  3273                           
  3274                           ; BSR set to: 0
  3275                           ;sort.c: 110: f_lastCan = 1;
  3276  002C76  0E00               	movlw	0
  3277  002C78  6E6E               	movwf	_f_lastCan+1,c
  3278  002C7A  0E01               	movlw	1
  3279  002C7C  6E6D               	movwf	_f_lastCan,c
  3280                           
  3281                           ; BSR set to: 0
  3282                           ;sort.c: 111: }
  3283                           ;sort.c: 112: }
  3284                           ;sort.c: 113: }
  3285                           
  3286                           ; BSR set to: 0
  3287  002C7E  0012               	return	
  3288  002C80                     l6640:
  3289                           
  3290                           ; BSR set to: 0
  3291                           ;sort.c: 116: else if(f_ID_receive){
  3292  002C80  5067               	movf	_f_ID_receive,w,c
  3293  002C82  1068               	iorwf	_f_ID_receive+1,w,c
  3294  002C84  B4D8               	btfsc	status,2,c
  3295  002C86  0012               	return	
  3296                           
  3297                           ; BSR set to: 0
  3298                           ;sort.c: 117: f_loadingNewCan = 0;
  3299  002C88  0E00               	movlw	0
  3300  002C8A  0100               	movlb	0	; () banked
  3301  002C8C  6FE9               	movwf	(_f_loadingNewCan+1)& (0+255),b
  3302  002C8E  0E00               	movlw	0
  3303  002C90  6FE8               	movwf	_f_loadingNewCan& (0+255),b
  3304                           
  3305                           ; BSR set to: 0
  3306                           ;sort.c: 118: _delay((unsigned long)((1500)*(32000000/4000.0)));
  3307  002C92  0E3D               	movlw	61
  3308  002C94  0100               	movlb	0	; () banked
  3309  002C96  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3310  002C98  0EE1               	movlw	225
  3311  002C9A  0100               	movlb	0	; () banked
  3312  002C9C  6FB1               	movwf	??_Loading& (0+255),b
  3313  002C9E  0E3F               	movlw	63
  3314  002CA0                     u7477:
  3315  002CA0  2EE8               	decfsz	wreg,f,c
  3316  002CA2  D7FE               	bra	u7477
  3317  002CA4  2FB1               	decfsz	??_Loading& (0+255),f,b
  3318  002CA6  D7FC               	bra	u7477
  3319  002CA8  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3320  002CAA  D7FA               	bra	u7477
  3321  002CAC  D000               	nop2	
  3322                           
  3323                           ;sort.c: 121: getMAG();
  3324  002CAE  ECDE  F022         	call	_getMAG	;wreg free
  3325                           
  3326                           ;sort.c: 122: sensor_outputs[0] = MAG_signal;
  3327  002CB2  C0E0  F0DA         	movff	_MAG_signal,_sensor_outputs
  3328  002CB6  C0E1  F0DB         	movff	_MAG_signal+1,_sensor_outputs+1
  3329                           
  3330                           ;sort.c: 124: if(sensor_outputs[0]){
  3331  002CBA  0100               	movlb	0	; () banked
  3332  002CBC  51DA               	movf	_sensor_outputs& (0+255),w,b
  3333  002CBE  0100               	movlb	0	; () banked
  3334  002CC0  11DB               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  3335  002CC2  B4D8               	btfsc	status,2,c
  3336  002CC4  D01D               	goto	l6664
  3337                           
  3338                           ; BSR set to: 0
  3339                           ;sort.c: 125: for(int i = 0; i<2500; i++){
  3340  002CC6  0E00               	movlw	0
  3341  002CC8  0100               	movlb	0	; () banked
  3342  002CCA  6FB7               	movwf	(Loading@i_1099+1)& (0+255),b
  3343  002CCC  0E00               	movlw	0
  3344  002CCE  6FB6               	movwf	Loading@i_1099& (0+255),b
  3345  002CD0                     l6654:
  3346                           
  3347                           ; BSR set to: 0
  3348  002CD0  0100               	movlb	0	; () banked
  3349  002CD2  BFB7               	btfsc	(Loading@i_1099+1)& (0+255),7,b
  3350  002CD4  D008               	goto	l742
  3351  002CD6  0EC4               	movlw	196
  3352  002CD8  0100               	movlb	0	; () banked
  3353  002CDA  5DB6               	subwf	Loading@i_1099& (0+255),w,b
  3354  002CDC  0E09               	movlw	9
  3355  002CDE  0100               	movlb	0	; () banked
  3356  002CE0  59B7               	subwfb	(Loading@i_1099+1)& (0+255),w,b
  3357  002CE2  B0D8               	btfsc	status,0,c
  3358  002CE4  D02A               	goto	l6676
  3359  002CE6                     l742:
  3360                           
  3361                           ; BSR set to: 0
  3362                           ;sort.c: 126: LATAbits.LATA4 = 1;
  3363  002CE6  8889               	bsf	3977,4,c	;volatile
  3364                           
  3365                           ; BSR set to: 0
  3366                           ;sort.c: 127: _delay((unsigned long)((70)*(32000000/4000000.0)));
  3367  002CE8  0EBA               	movlw	186
  3368  002CEA                     u7487:
  3369  002CEA  2EE8               	decfsz	wreg,f,c
  3370  002CEC  D7FE               	bra	u7487
  3371  002CEE  D000               	nop2	
  3372                           
  3373                           ;sort.c: 128: LATAbits.LATA4 = 0;
  3374  002CF0  9889               	bcf	3977,4,c	;volatile
  3375                           
  3376                           ;sort.c: 129: _delay((unsigned long)((30)*(32000000/4000000.0)));
  3377  002CF2  0E50               	movlw	80
  3378  002CF4                     u7497:
  3379  002CF4  2EE8               	decfsz	wreg,f,c
  3380  002CF6  D7FE               	bra	u7497
  3381  002CF8  0100               	movlb	0	; () banked
  3382  002CFA  4BB6               	infsnz	Loading@i_1099& (0+255),f,b
  3383  002CFC  2BB7               	incf	(Loading@i_1099+1)& (0+255),f,b
  3384  002CFE  D7E8               	goto	l6654
  3385  002D00                     l6664:
  3386                           
  3387                           ; BSR set to: 0
  3388                           ;sort.c: 132: else{
  3389                           ;sort.c: 133: for(int i = 0; i<2500; i++){
  3390  002D00  0E00               	movlw	0
  3391  002D02  0100               	movlb	0	; () banked
  3392  002D04  6FB9               	movwf	(Loading@i_1100+1)& (0+255),b
  3393  002D06  0E00               	movlw	0
  3394  002D08  6FB8               	movwf	Loading@i_1100& (0+255),b
  3395  002D0A                     l6666:
  3396                           
  3397                           ; BSR set to: 0
  3398  002D0A  0100               	movlb	0	; () banked
  3399  002D0C  BFB9               	btfsc	(Loading@i_1100+1)& (0+255),7,b
  3400  002D0E  D008               	goto	l745
  3401  002D10  0EC4               	movlw	196
  3402  002D12  0100               	movlb	0	; () banked
  3403  002D14  5DB8               	subwf	Loading@i_1100& (0+255),w,b
  3404  002D16  0E09               	movlw	9
  3405  002D18  0100               	movlb	0	; () banked
  3406  002D1A  59B9               	subwfb	(Loading@i_1100+1)& (0+255),w,b
  3407  002D1C  B0D8               	btfsc	status,0,c
  3408  002D1E  D00D               	goto	l6676
  3409  002D20                     l745:
  3410                           
  3411                           ; BSR set to: 0
  3412                           ;sort.c: 134: LATAbits.LATA4 = 1;
  3413  002D20  8889               	bsf	3977,4,c	;volatile
  3414                           
  3415                           ; BSR set to: 0
  3416                           ;sort.c: 135: _delay((unsigned long)((58)*(32000000/4000000.0)));
  3417  002D22  0E9A               	movlw	154
  3418  002D24                     u7507:
  3419  002D24  2EE8               	decfsz	wreg,f,c
  3420  002D26  D7FE               	bra	u7507
  3421  002D28  D000               	nop2	
  3422                           
  3423                           ;sort.c: 136: LATAbits.LATA4 = 0;
  3424  002D2A  9889               	bcf	3977,4,c	;volatile
  3425                           
  3426                           ;sort.c: 137: _delay((unsigned long)((42)*(32000000/4000000.0)));
  3427  002D2C  0E70               	movlw	112
  3428  002D2E                     u7517:
  3429  002D2E  2EE8               	decfsz	wreg,f,c
  3430  002D30  D7FE               	bra	u7517
  3431  002D32  0100               	movlb	0	; () banked
  3432  002D34  4BB8               	infsnz	Loading@i_1100& (0+255),f,b
  3433  002D36  2BB9               	incf	(Loading@i_1100+1)& (0+255),f,b
  3434  002D38  D7E8               	goto	l6666
  3435  002D3A                     l6676:
  3436                           
  3437                           ; BSR set to: 0
  3438                           ;sort.c: 138: }
  3439                           ;sort.c: 139: }
  3440                           ;sort.c: 141: f_can_coming_to_ID = 1;
  3441  002D3A  0E00               	movlw	0
  3442  002D3C  6E6A               	movwf	_f_can_coming_to_ID+1,c
  3443  002D3E  0E01               	movlw	1
  3444  002D40  6E69               	movwf	_f_can_coming_to_ID,c
  3445                           
  3446                           ; BSR set to: 0
  3447                           
  3448                           ; BSR set to: 0
  3449  002D42  0012               	return	
  3450  002D44                     __end_of_Loading:
  3451                           	opt stack 0
  3452                           tblptru	equ	0xFF8
  3453                           tblptrh	equ	0xFF7
  3454                           tblptrl	equ	0xFF6
  3455                           tablat	equ	0xFF5
  3456                           prodh	equ	0xFF4
  3457                           prodl	equ	0xFF3
  3458                           postinc0	equ	0xFEE
  3459                           wreg	equ	0xFE8
  3460                           postdec1	equ	0xFE5
  3461                           fsr1l	equ	0xFE1
  3462                           status	equ	0xFD8
  3463                           
  3464 ;; *************** function _initSortTimer *****************
  3465 ;; Defined at:
  3466 ;;		line 290 in file "sort.c"
  3467 ;; Parameters:    Size  Location     Type
  3468 ;;		None
  3469 ;; Auto vars:     Size  Location     Type
  3470 ;;  i               2    8[BANK0 ] int 
  3471 ;; Return value:  Size  Location     Type
  3472 ;;                  1    wreg      void 
  3473 ;; Registers used:
  3474 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3475 ;; Tracked objects:
  3476 ;;		On entry : 0/0
  3477 ;;		On exit  : 0/0
  3478 ;;		Unchanged: 0/0
  3479 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3480 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3481 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3482 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3483 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3484 ;;Total ram usage:        5 bytes
  3485 ;; Hardware stack levels used:    1
  3486 ;; Hardware stack levels required when called:   10
  3487 ;; This function calls:
  3488 ;;		_getRTC
  3489 ;; This function is called by:
  3490 ;;		_Loading
  3491 ;; This function uses a non-reentrant model
  3492 ;;
  3493                           
  3494                           	psect	text4
  3495  003AEA                     __ptext4:
  3496                           	opt stack 0
  3497  003AEA                     _initSortTimer:
  3498                           	opt stack 18
  3499                           
  3500                           ;sort.c: 292: getRTC();
  3501                           
  3502                           ;incstack = 0
  3503  003AEA  EC61  F01E         	call	_getRTC	;wreg free
  3504                           
  3505                           ;sort.c: 293: for(int i = 0; i < 7; i++){
  3506  003AEE  0E00               	movlw	0
  3507  003AF0  0100               	movlb	0	; () banked
  3508  003AF2  6F89               	movwf	(initSortTimer@i+1)& (0+255),b
  3509  003AF4  0E00               	movlw	0
  3510  003AF6  6F88               	movwf	initSortTimer@i& (0+255),b
  3511  003AF8                     l6196:
  3512                           
  3513                           ; BSR set to: 0
  3514  003AF8  0100               	movlb	0	; () banked
  3515  003AFA  BF89               	btfsc	(initSortTimer@i+1)& (0+255),7,b
  3516  003AFC  D008               	goto	l6200
  3517  003AFE  0100               	movlb	0	; () banked
  3518  003B00  5189               	movf	(initSortTimer@i+1)& (0+255),w,b
  3519  003B02  E140               	bnz	l6206
  3520  003B04  0E07               	movlw	7
  3521  003B06  0100               	movlb	0	; () banked
  3522  003B08  5D88               	subwf	initSortTimer@i& (0+255),w,b
  3523  003B0A  B0D8               	btfsc	status,0,c
  3524  003B0C  D03B               	goto	l6206
  3525  003B0E                     l6200:
  3526                           
  3527                           ; BSR set to: 0
  3528                           ;sort.c: 294: startTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  3529  003B0E  0E24               	movlw	low _time
  3530  003B10  0100               	movlb	0	; () banked
  3531  003B12  2588               	addwf	initSortTimer@i& (0+255),w,b
  3532  003B14  6ED9               	movwf	fsr2l,c
  3533  003B16  0E01               	movlw	high _time
  3534  003B18  0100               	movlb	0	; () banked
  3535  003B1A  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  3536  003B1C  6EDA               	movwf	fsr2h,c
  3537  003B1E  50DF               	movf	indf2,w,c
  3538  003B20  0100               	movlb	0	; () banked
  3539  003B22  6F85               	movwf	??_initSortTimer& (0+255),b
  3540  003B24  0100               	movlb	0	; () banked
  3541  003B26  3B85               	swapf	??_initSortTimer& (0+255),f,b
  3542  003B28  0E0F               	movlw	15
  3543  003B2A  1785               	andwf	??_initSortTimer& (0+255),f,b
  3544  003B2C  0E0F               	movlw	15
  3545  003B2E  0100               	movlb	0	; () banked
  3546  003B30  1785               	andwf	??_initSortTimer& (0+255),f,b
  3547  003B32  0100               	movlb	0	; () banked
  3548  003B34  5185               	movf	??_initSortTimer& (0+255),w,b
  3549  003B36  0D0A               	mullw	10
  3550  003B38  0E24               	movlw	low _time
  3551  003B3A  0100               	movlb	0	; () banked
  3552  003B3C  2588               	addwf	initSortTimer@i& (0+255),w,b
  3553  003B3E  6ED9               	movwf	fsr2l,c
  3554  003B40  0E01               	movlw	high _time
  3555  003B42  0100               	movlb	0	; () banked
  3556  003B44  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  3557  003B46  6EDA               	movwf	fsr2h,c
  3558  003B48  50DF               	movf	indf2,w,c
  3559  003B4A  0B0F               	andlw	15
  3560  003B4C  0100               	movlb	0	; () banked
  3561  003B4E  6F86               	movwf	(??_initSortTimer+1)& (0+255),b
  3562  003B50  6B87               	clrf	(??_initSortTimer+2)& (0+255),b
  3563  003B52  50F3               	movf	prodl,w,c
  3564  003B54  0100               	movlb	0	; () banked
  3565  003B56  2786               	addwf	(??_initSortTimer+1)& (0+255),f,b
  3566  003B58  50F4               	movf	prodh,w,c
  3567  003B5A  0100               	movlb	0	; () banked
  3568  003B5C  2387               	addwfc	(??_initSortTimer+2)& (0+255),f,b
  3569  003B5E  90D8               	bcf	status,0,c
  3570  003B60  0100               	movlb	0	; () banked
  3571  003B62  3588               	rlcf	initSortTimer@i& (0+255),w,b
  3572  003B64  6ED9               	movwf	fsr2l,c
  3573  003B66  0100               	movlb	0	; () banked
  3574  003B68  3589               	rlcf	(initSortTimer@i+1)& (0+255),w,b
  3575  003B6A  6EDA               	movwf	fsr2h,c
  3576  003B6C  0E0E               	movlw	low _startTime
  3577  003B6E  26D9               	addwf	fsr2l,f,c
  3578  003B70  0E01               	movlw	high _startTime
  3579  003B72  22DA               	addwfc	fsr2h,f,c
  3580  003B74  C086  FFDE         	movff	??_initSortTimer+1,postinc2
  3581  003B78  C087  FFDD         	movff	??_initSortTimer+2,postdec2
  3582                           
  3583                           ; BSR set to: 0
  3584  003B7C  0100               	movlb	0	; () banked
  3585  003B7E  4B88               	infsnz	initSortTimer@i& (0+255),f,b
  3586  003B80  2B89               	incf	(initSortTimer@i+1)& (0+255),f,b
  3587  003B82  D7BA               	goto	l6196
  3588  003B84                     l6206:
  3589                           
  3590                           ; BSR set to: 0
  3591                           ;sort.c: 295: }
  3592                           ;sort.c: 297: T0CON = 0b00010111;
  3593  003B84  0E17               	movlw	23
  3594  003B86  6ED5               	movwf	4053,c	;volatile
  3595                           
  3596                           ;sort.c: 306: TMR0H = 0b10000101;
  3597  003B88  0E85               	movlw	133
  3598  003B8A  6ED7               	movwf	4055,c	;volatile
  3599                           
  3600                           ;sort.c: 307: TMR0L = 0b11101110;
  3601  003B8C  0EEE               	movlw	238
  3602  003B8E  6ED6               	movwf	4054,c	;volatile
  3603                           
  3604                           ; BSR set to: 0
  3605                           ;sort.c: 308: TMR0ON = 1;
  3606  003B90  8ED5               	bsf	4053,7,c	;volatile
  3607                           
  3608                           ; BSR set to: 0
  3609  003B92  0012               	return		;funcret
  3610  003B94                     __end_of_initSortTimer:
  3611                           	opt stack 0
  3612                           tblptru	equ	0xFF8
  3613                           tblptrh	equ	0xFF7
  3614                           tblptrl	equ	0xFF6
  3615                           tablat	equ	0xFF5
  3616                           prodh	equ	0xFF4
  3617                           prodl	equ	0xFF3
  3618                           postinc0	equ	0xFEE
  3619                           wreg	equ	0xFE8
  3620                           postdec1	equ	0xFE5
  3621                           fsr1l	equ	0xFE1
  3622                           indf2	equ	0xFDF
  3623                           postinc2	equ	0xFDE
  3624                           postdec2	equ	0xFDD
  3625                           fsr2h	equ	0xFDA
  3626                           fsr2l	equ	0xFD9
  3627                           status	equ	0xFD8
  3628                           
  3629 ;; *************** function _initGlobalVars *****************
  3630 ;; Defined at:
  3631 ;;		line 271 in file "sort.c"
  3632 ;; Parameters:    Size  Location     Type
  3633 ;;		None
  3634 ;; Auto vars:     Size  Location     Type
  3635 ;;		None
  3636 ;; Return value:  Size  Location     Type
  3637 ;;                  1    wreg      void 
  3638 ;; Registers used:
  3639 ;;		wreg, status,2
  3640 ;; Tracked objects:
  3641 ;;		On entry : 0/0
  3642 ;;		On exit  : 0/0
  3643 ;;		Unchanged: 0/0
  3644 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3645 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3646 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3647 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3648 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3649 ;;Total ram usage:        0 bytes
  3650 ;; Hardware stack levels used:    1
  3651 ;; Hardware stack levels required when called:    7
  3652 ;; This function calls:
  3653 ;;		Nothing
  3654 ;; This function is called by:
  3655 ;;		_Loading
  3656 ;; This function uses a non-reentrant model
  3657 ;;
  3658                           
  3659                           	psect	text5
  3660  004022                     __ptext5:
  3661                           	opt stack 0
  3662  004022                     _initGlobalVars:
  3663                           	opt stack 21
  3664                           
  3665                           ;sort.c: 273: first = 0;
  3666                           
  3667                           ; BSR set to: 0
  3668                           ;incstack = 0
  3669  004022  0E00               	movlw	0
  3670  004024  6E70               	movwf	_first+1,c
  3671  004026  0E00               	movlw	0
  3672  004028  6E6F               	movwf	_first,c
  3673                           
  3674                           ;sort.c: 276: f_loadingNewCan = 0;
  3675  00402A  0E00               	movlw	0
  3676  00402C  0100               	movlb	0	; () banked
  3677  00402E  6FE9               	movwf	(_f_loadingNewCan+1)& (0+255),b
  3678  004030  0E00               	movlw	0
  3679  004032  6FE8               	movwf	_f_loadingNewCan& (0+255),b
  3680                           
  3681                           ;sort.c: 277: f_lastCan = 0;
  3682  004034  0E00               	movlw	0
  3683  004036  6E6E               	movwf	_f_lastCan+1,c
  3684  004038  0E00               	movlw	0
  3685  00403A  6E6D               	movwf	_f_lastCan,c
  3686                           
  3687                           ;sort.c: 278: f_ID_receive = 1;
  3688  00403C  0E00               	movlw	0
  3689  00403E  6E68               	movwf	_f_ID_receive+1,c
  3690  004040  0E01               	movlw	1
  3691  004042  6E67               	movwf	_f_ID_receive,c
  3692                           
  3693                           ;sort.c: 279: f_can_coming_to_ID = 0;
  3694  004044  0E00               	movlw	0
  3695  004046  6E6A               	movwf	_f_can_coming_to_ID+1,c
  3696  004048  0E00               	movlw	0
  3697  00404A  6E69               	movwf	_f_can_coming_to_ID,c
  3698                           
  3699                           ;sort.c: 280: f_can_coming_to_distribution = 0;
  3700  00404C  0E00               	movlw	0
  3701  00404E  6E6C               	movwf	_f_can_coming_to_distribution+1,c
  3702  004050  0E00               	movlw	0
  3703  004052  6E6B               	movwf	_f_can_coming_to_distribution,c
  3704                           
  3705                           ;sort.c: 281: f_can_distributed = 0;
  3706  004054  0E00               	movlw	0
  3707  004056  0101               	movlb	1	; () banked
  3708  004058  6F30               	movwf	(_f_can_distributed+1)& (0+255),b
  3709  00405A  0E00               	movlw	0
  3710  00405C  6F2F               	movwf	_f_can_distributed& (0+255),b
  3711                           
  3712                           ;sort.c: 284: count_total = 0;
  3713  00405E  0E00               	movlw	0
  3714  004060  0100               	movlb	0	; () banked
  3715  004062  6FFF               	movwf	(_count_total+1)& (0+255),b
  3716  004064  0E00               	movlw	0
  3717  004066  6FFE               	movwf	_count_total& (0+255),b
  3718                           
  3719                           ;sort.c: 285: count_pop_no_tab = 0;
  3720  004068  0E00               	movlw	0
  3721  00406A  6E5E               	movwf	_count_pop_no_tab+1,c
  3722  00406C  0E00               	movlw	0
  3723  00406E  6E5D               	movwf	_count_pop_no_tab,c
  3724                           
  3725                           ;sort.c: 286: count_pop_w_tab = 0;
  3726  004070  0E00               	movlw	0
  3727  004072  6E60               	movwf	_count_pop_w_tab+1,c
  3728  004074  0E00               	movlw	0
  3729  004076  6E5F               	movwf	_count_pop_w_tab,c
  3730                           
  3731                           ;sort.c: 287: count_can_w_lab = 0;
  3732  004078  0E00               	movlw	0
  3733  00407A  0101               	movlb	1	; () banked
  3734  00407C  6F2E               	movwf	(_count_can_w_lab+1)& (0+255),b
  3735  00407E  0E00               	movlw	0
  3736  004080  6F2D               	movwf	_count_can_w_lab& (0+255),b
  3737                           
  3738                           ;sort.c: 288: count_can_no_lab = 0;
  3739  004082  0E00               	movlw	0
  3740  004084  0101               	movlb	1	; () banked
  3741  004086  6F2C               	movwf	(_count_can_no_lab+1)& (0+255),b
  3742  004088  0E00               	movlw	0
  3743  00408A  6F2B               	movwf	_count_can_no_lab& (0+255),b
  3744                           
  3745                           ; BSR set to: 1
  3746  00408C  0012               	return		;funcret
  3747  00408E                     __end_of_initGlobalVars:
  3748                           	opt stack 0
  3749                           tblptru	equ	0xFF8
  3750                           tblptrh	equ	0xFF7
  3751                           tblptrl	equ	0xFF6
  3752                           tablat	equ	0xFF5
  3753                           prodh	equ	0xFF4
  3754                           prodl	equ	0xFF3
  3755                           postinc0	equ	0xFEE
  3756                           wreg	equ	0xFE8
  3757                           postdec1	equ	0xFE5
  3758                           fsr1l	equ	0xFE1
  3759                           indf2	equ	0xFDF
  3760                           postinc2	equ	0xFDE
  3761                           postdec2	equ	0xFDD
  3762                           fsr2h	equ	0xFDA
  3763                           fsr2l	equ	0xFD9
  3764                           status	equ	0xFD8
  3765                           
  3766 ;; *************** function _getMAG *****************
  3767 ;; Defined at:
  3768 ;;		line 364 in file "sort.c"
  3769 ;; Parameters:    Size  Location     Type
  3770 ;;		None
  3771 ;; Auto vars:     Size  Location     Type
  3772 ;;		None
  3773 ;; Return value:  Size  Location     Type
  3774 ;;                  1    wreg      void 
  3775 ;; Registers used:
  3776 ;;		wreg, status,2, status,0, cstack
  3777 ;; Tracked objects:
  3778 ;;		On entry : 0/0
  3779 ;;		On exit  : 0/0
  3780 ;;		Unchanged: 0/0
  3781 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3782 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3783 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3784 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3785 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3786 ;;Total ram usage:        2 bytes
  3787 ;; Hardware stack levels used:    1
  3788 ;; Hardware stack levels required when called:    9
  3789 ;; This function calls:
  3790 ;;		_readMAG
  3791 ;; This function is called by:
  3792 ;;		_Loading
  3793 ;; This function uses a non-reentrant model
  3794 ;;
  3795                           
  3796                           	psect	text6
  3797  0045BC                     __ptext6:
  3798                           	opt stack 0
  3799  0045BC                     _getMAG:
  3800                           	opt stack 19
  3801                           
  3802                           ;sort.c: 365: readMAG();
  3803                           
  3804                           ; BSR set to: 1
  3805                           ;incstack = 0
  3806  0045BC  EC06  F022         	call	_readMAG	;wreg free
  3807                           
  3808                           ;sort.c: 367: if(MAG_signal==1){
  3809  0045C0  0100               	movlb	0	; () banked
  3810  0045C2  05E0               	decf	_MAG_signal& (0+255),w,b
  3811  0045C4  0100               	movlb	0	; () banked
  3812  0045C6  11E1               	iorwf	(_MAG_signal+1)& (0+255),w,b
  3813  0045C8  A4D8               	btfss	status,2,c
  3814  0045CA  0012               	return	
  3815                           
  3816                           ; BSR set to: 0
  3817                           ;sort.c: 368: _delay((unsigned long)((500)*(32000000/4000.0)));
  3818  0045CC  0E15               	movlw	21
  3819  0045CE  0100               	movlb	0	; () banked
  3820  0045D0  6F87               	movwf	(??_getMAG+1)& (0+255),b
  3821  0045D2  0E4B               	movlw	75
  3822  0045D4  0100               	movlb	0	; () banked
  3823  0045D6  6F86               	movwf	??_getMAG& (0+255),b
  3824  0045D8  0EBE               	movlw	190
  3825  0045DA                     u7527:
  3826  0045DA  2EE8               	decfsz	wreg,f,c
  3827  0045DC  D7FE               	bra	u7527
  3828  0045DE  2F86               	decfsz	??_getMAG& (0+255),f,b
  3829  0045E0  D7FC               	bra	u7527
  3830  0045E2  2F87               	decfsz	(??_getMAG+1)& (0+255),f,b
  3831  0045E4  D7FA               	bra	u7527
  3832  0045E6  F000               	nop	
  3833                           
  3834                           ;sort.c: 369: readMAG();
  3835  0045E8  EC06  F022         	call	_readMAG	;wreg free
  3836  0045EC  0012               	return	
  3837  0045EE                     __end_of_getMAG:
  3838                           	opt stack 0
  3839                           tblptru	equ	0xFF8
  3840                           tblptrh	equ	0xFF7
  3841                           tblptrl	equ	0xFF6
  3842                           tablat	equ	0xFF5
  3843                           prodh	equ	0xFF4
  3844                           prodl	equ	0xFF3
  3845                           postinc0	equ	0xFEE
  3846                           wreg	equ	0xFE8
  3847                           postdec1	equ	0xFE5
  3848                           fsr1l	equ	0xFE1
  3849                           indf2	equ	0xFDF
  3850                           postinc2	equ	0xFDE
  3851                           postdec2	equ	0xFDD
  3852                           fsr2h	equ	0xFDA
  3853                           fsr2l	equ	0xFD9
  3854                           status	equ	0xFD8
  3855                           
  3856 ;; *************** function _getIR *****************
  3857 ;; Defined at:
  3858 ;;		line 348 in file "sort.c"
  3859 ;; Parameters:    Size  Location     Type
  3860 ;;		None
  3861 ;; Auto vars:     Size  Location     Type
  3862 ;;  i               2    7[BANK0 ] int 
  3863 ;; Return value:  Size  Location     Type
  3864 ;;                  1    wreg      void 
  3865 ;; Registers used:
  3866 ;;		wreg, status,2, status,0, cstack
  3867 ;; Tracked objects:
  3868 ;;		On entry : 0/0
  3869 ;;		On exit  : 0/0
  3870 ;;		Unchanged: 0/0
  3871 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3872 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3873 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3874 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3875 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3876 ;;Total ram usage:        3 bytes
  3877 ;; Hardware stack levels used:    1
  3878 ;; Hardware stack levels required when called:    9
  3879 ;; This function calls:
  3880 ;;		_readIR
  3881 ;; This function is called by:
  3882 ;;		_Loading
  3883 ;; This function uses a non-reentrant model
  3884 ;;
  3885                           
  3886                           	psect	text7
  3887  003F3E                     __ptext7:
  3888                           	opt stack 0
  3889  003F3E                     _getIR:
  3890                           	opt stack 19
  3891                           
  3892                           ;sort.c: 349: readIR();
  3893                           
  3894                           ;incstack = 0
  3895  003F3E  ECE0  F021         	call	_readIR	;wreg free
  3896                           
  3897                           ;sort.c: 350: for(int i = 0; i < 150; i++){
  3898  003F42  0E00               	movlw	0
  3899  003F44  0100               	movlb	0	; () banked
  3900  003F46  6F88               	movwf	(getIR@i+1)& (0+255),b
  3901  003F48  0E00               	movlw	0
  3902  003F4A  6F87               	movwf	getIR@i& (0+255),b
  3903  003F4C                     l6288:
  3904                           
  3905                           ; BSR set to: 0
  3906  003F4C  0100               	movlb	0	; () banked
  3907  003F4E  BF88               	btfsc	(getIR@i+1)& (0+255),7,b
  3908  003F50  D008               	goto	l6292
  3909  003F52  0100               	movlb	0	; () banked
  3910  003F54  5188               	movf	(getIR@i+1)& (0+255),w,b
  3911  003F56  E11A               	bnz	l6304
  3912  003F58  0E96               	movlw	150
  3913  003F5A  0100               	movlb	0	; () banked
  3914  003F5C  5D87               	subwf	getIR@i& (0+255),w,b
  3915  003F5E  B0D8               	btfsc	status,0,c
  3916  003F60  D015               	goto	l6304
  3917  003F62                     l6292:
  3918                           
  3919                           ; BSR set to: 0
  3920                           ;sort.c: 351: _delay((unsigned long)((500)*(32000000/4000000.0)));
  3921  003F62  0E06               	movlw	6
  3922  003F64  0100               	movlb	0	; () banked
  3923  003F66  6F86               	movwf	??_getIR& (0+255),b
  3924  003F68  0E30               	movlw	48
  3925  003F6A                     u7537:
  3926  003F6A  2EE8               	decfsz	wreg,f,c
  3927  003F6C  D7FE               	bra	u7537
  3928  003F6E  2F86               	decfsz	??_getIR& (0+255),f,b
  3929  003F70  D7FC               	bra	u7537
  3930  003F72  F000               	nop	
  3931                           
  3932                           ;sort.c: 352: readIR();
  3933  003F74  ECE0  F021         	call	_readIR	;wreg free
  3934                           
  3935                           ;sort.c: 353: if(!IR_signal){
  3936  003F78  0100               	movlb	0	; () banked
  3937  003F7A  51DE               	movf	_IR_signal& (0+255),w,b
  3938  003F7C  0100               	movlb	0	; () banked
  3939  003F7E  11DF               	iorwf	(_IR_signal+1)& (0+255),w,b
  3940  003F80  B4D8               	btfsc	status,2,c
  3941  003F82  D004               	goto	l6304
  3942                           
  3943                           ; BSR set to: 0
  3944                           
  3945                           ; BSR set to: 0
  3946                           
  3947                           ; BSR set to: 0
  3948                           ;sort.c: 354: break;
  3949  003F84  0100               	movlb	0	; () banked
  3950  003F86  4B87               	infsnz	getIR@i& (0+255),f,b
  3951  003F88  2B88               	incf	(getIR@i+1)& (0+255),f,b
  3952  003F8A  D7E0               	goto	l6288
  3953  003F8C                     l6304:
  3954                           
  3955                           ; BSR set to: 0
  3956                           ;sort.c: 355: }
  3957                           ;sort.c: 356: }
  3958                           ;sort.c: 357: if(IR_signal==1){
  3959  003F8C  0100               	movlb	0	; () banked
  3960  003F8E  05DE               	decf	_IR_signal& (0+255),w,b
  3961  003F90  0100               	movlb	0	; () banked
  3962  003F92  11DF               	iorwf	(_IR_signal+1)& (0+255),w,b
  3963  003F94  A4D8               	btfss	status,2,c
  3964  003F96  D006               	goto	l6308
  3965                           
  3966                           ; BSR set to: 0
  3967                           ;sort.c: 358: f_loadingNewCan = 1;
  3968  003F98  0E00               	movlw	0
  3969  003F9A  0100               	movlb	0	; () banked
  3970  003F9C  6FE9               	movwf	(_f_loadingNewCan+1)& (0+255),b
  3971  003F9E  0E01               	movlw	1
  3972  003FA0  6FE8               	movwf	_f_loadingNewCan& (0+255),b
  3973                           
  3974                           ;sort.c: 359: }
  3975  003FA2  0012               	return	
  3976  003FA4                     l6308:
  3977                           
  3978                           ; BSR set to: 0
  3979                           ;sort.c: 360: else{
  3980                           ;sort.c: 361: f_loadingNewCan = 0;
  3981  003FA4  0E00               	movlw	0
  3982  003FA6  0100               	movlb	0	; () banked
  3983  003FA8  6FE9               	movwf	(_f_loadingNewCan+1)& (0+255),b
  3984  003FAA  0E00               	movlw	0
  3985  003FAC  6FE8               	movwf	_f_loadingNewCan& (0+255),b
  3986  003FAE  0012               	return	
  3987  003FB0                     __end_of_getIR:
  3988                           	opt stack 0
  3989                           tblptru	equ	0xFF8
  3990                           tblptrh	equ	0xFF7
  3991                           tblptrl	equ	0xFF6
  3992                           tablat	equ	0xFF5
  3993                           prodh	equ	0xFF4
  3994                           prodl	equ	0xFF3
  3995                           postinc0	equ	0xFEE
  3996                           wreg	equ	0xFE8
  3997                           postdec1	equ	0xFE5
  3998                           fsr1l	equ	0xFE1
  3999                           indf2	equ	0xFDF
  4000                           postinc2	equ	0xFDE
  4001                           postdec2	equ	0xFDD
  4002                           fsr2h	equ	0xFDA
  4003                           fsr2l	equ	0xFD9
  4004                           status	equ	0xFD8
  4005                           
  4006 ;; *************** function _readIR *****************
  4007 ;; Defined at:
  4008 ;;		line 23 in file "ADCFunctionality.c"
  4009 ;; Parameters:    Size  Location     Type
  4010 ;;		None
  4011 ;; Auto vars:     Size  Location     Type
  4012 ;;  res             2    4[BANK0 ] int 
  4013 ;; Return value:  Size  Location     Type
  4014 ;;                  1    wreg      void 
  4015 ;; Registers used:
  4016 ;;		wreg, status,2, status,0, cstack
  4017 ;; Tracked objects:
  4018 ;;		On entry : 0/0
  4019 ;;		On exit  : 0/0
  4020 ;;		Unchanged: 0/0
  4021 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4022 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4023 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4024 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4025 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4026 ;;Total ram usage:        4 bytes
  4027 ;; Hardware stack levels used:    1
  4028 ;; Hardware stack levels required when called:    8
  4029 ;; This function calls:
  4030 ;;		_readADC
  4031 ;; This function is called by:
  4032 ;;		_getIR
  4033 ;; This function uses a non-reentrant model
  4034 ;;
  4035                           
  4036                           	psect	text8
  4037  0043C0                     __ptext8:
  4038                           	opt stack 0
  4039  0043C0                     _readIR:
  4040                           	opt stack 19
  4041                           
  4042                           ;ADCFunctionality.c: 24: readADC(0);
  4043                           
  4044                           ; BSR set to: 0
  4045                           ;incstack = 0
  4046  0043C0  0E00               	movlw	0
  4047  0043C2  EC43  F024         	call	_readADC
  4048                           
  4049                           ;ADCFunctionality.c: 25: int res = ADRESH<<8 | ADRESL;
  4050  0043C6  50C3               	movf	4035,w,c	;volatile
  4051  0043C8  CFC4 F082          	movff	4036,??_readIR	;volatile
  4052  0043CC  0100               	movlb	0	; () banked
  4053  0043CE  6B83               	clrf	(??_readIR+1)& (0+255),b
  4054  0043D0  C082  F083         	movff	??_readIR,??_readIR+1
  4055  0043D4  0100               	movlb	0	; () banked
  4056  0043D6  6B82               	clrf	??_readIR& (0+255),b
  4057  0043D8  0100               	movlb	0	; () banked
  4058  0043DA  1182               	iorwf	??_readIR& (0+255),w,b
  4059  0043DC  0100               	movlb	0	; () banked
  4060  0043DE  6F84               	movwf	readIR@res& (0+255),b
  4061  0043E0  0100               	movlb	0	; () banked
  4062  0043E2  5183               	movf	(??_readIR+1)& (0+255),w,b
  4063  0043E4  0100               	movlb	0	; () banked
  4064  0043E6  6F85               	movwf	(readIR@res+1)& (0+255),b
  4065                           
  4066                           ; BSR set to: 0
  4067                           ;ADCFunctionality.c: 26: IR_signal = (res > 1000) ? 1 : 0;
  4068  0043E8  0100               	movlb	0	; () banked
  4069  0043EA  BF85               	btfsc	(readIR@res+1)& (0+255),7,b
  4070  0043EC  D00A               	goto	u3980
  4071  0043EE  0EE9               	movlw	233
  4072  0043F0  0100               	movlb	0	; () banked
  4073  0043F2  5D84               	subwf	readIR@res& (0+255),w,b
  4074  0043F4  0E03               	movlw	3
  4075  0043F6  0100               	movlb	0	; () banked
  4076  0043F8  5985               	subwfb	(readIR@res+1)& (0+255),w,b
  4077  0043FA  A0D8               	btfss	status,0,c
  4078  0043FC  D002               	goto	u3980
  4079  0043FE  0E01               	movlw	1
  4080  004400  D001               	goto	u3990
  4081  004402                     u3980:
  4082  004402  0E00               	movlw	0
  4083  004404                     u3990:
  4084  004404  0100               	movlb	0	; () banked
  4085  004406  6FDE               	movwf	_IR_signal& (0+255),b
  4086  004408  6BDF               	clrf	(_IR_signal+1)& (0+255),b
  4087                           
  4088                           ; BSR set to: 0
  4089  00440A  0012               	return		;funcret
  4090  00440C                     __end_of_readIR:
  4091                           	opt stack 0
  4092                           tblptru	equ	0xFF8
  4093                           tblptrh	equ	0xFF7
  4094                           tblptrl	equ	0xFF6
  4095                           tablat	equ	0xFF5
  4096                           prodh	equ	0xFF4
  4097                           prodl	equ	0xFF3
  4098                           postinc0	equ	0xFEE
  4099                           wreg	equ	0xFE8
  4100                           postdec1	equ	0xFE5
  4101                           fsr1l	equ	0xFE1
  4102                           indf2	equ	0xFDF
  4103                           postinc2	equ	0xFDE
  4104                           postdec2	equ	0xFDD
  4105                           fsr2h	equ	0xFDA
  4106                           fsr2l	equ	0xFD9
  4107                           status	equ	0xFD8
  4108                           
  4109 ;; *************** function _delay_ms *****************
  4110 ;; Defined at:
  4111 ;;		line 385 in file "sort.c"
  4112 ;; Parameters:    Size  Location     Type
  4113 ;;  milliseconds    1    wreg     unsigned char 
  4114 ;; Auto vars:     Size  Location     Type
  4115 ;;  milliseconds    1    1[BANK0 ] unsigned char 
  4116 ;; Return value:  Size  Location     Type
  4117 ;;                  1    wreg      void 
  4118 ;; Registers used:
  4119 ;;		wreg, status,2, status,0, cstack
  4120 ;; Tracked objects:
  4121 ;;		On entry : 0/0
  4122 ;;		On exit  : 0/0
  4123 ;;		Unchanged: 0/0
  4124 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4125 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4126 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4127 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4128 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4129 ;;Total ram usage:        2 bytes
  4130 ;; Hardware stack levels used:    1
  4131 ;; Hardware stack levels required when called:    7
  4132 ;; This function calls:
  4133 ;;		Nothing
  4134 ;; This function is called by:
  4135 ;;		_Loading
  4136 ;; This function uses a non-reentrant model
  4137 ;;
  4138                           
  4139                           	psect	text9
  4140  0048DC                     __ptext9:
  4141                           	opt stack 0
  4142  0048DC                     _delay_ms:
  4143                           	opt stack 21
  4144                           
  4145                           ; BSR set to: 0
  4146                           ;incstack = 0
  4147                           ;delay_ms@milliseconds stored from wreg
  4148  0048DC  0100               	movlb	0	; () banked
  4149  0048DE  6F81               	movwf	delay_ms@milliseconds& (0+255),b
  4150                           
  4151                           ;sort.c: 386: while(milliseconds > 0)
  4152  0048E0  D00B               	goto	l6268
  4153  0048E2                     l6264:
  4154                           
  4155                           ;sort.c: 387: {
  4156                           ;sort.c: 388: milliseconds--;
  4157  0048E2  0100               	movlb	0	; () banked
  4158  0048E4  0781               	decf	delay_ms@milliseconds& (0+255),f,b
  4159                           
  4160                           ; BSR set to: 0
  4161                           ;sort.c: 389: _delay((unsigned long)((990)*(32000000/4000000.0)));
  4162  0048E6  0E0B               	movlw	11
  4163  0048E8  0100               	movlb	0	; () banked
  4164  0048EA  6F80               	movwf	??_delay_ms& (0+255),b
  4165  0048EC  0E47               	movlw	71
  4166  0048EE                     u7547:
  4167  0048EE  2EE8               	decfsz	wreg,f,c
  4168  0048F0  D7FE               	bra	u7547
  4169  0048F2  2F80               	decfsz	??_delay_ms& (0+255),f,b
  4170  0048F4  D7FC               	bra	u7547
  4171  0048F6  D000               	nop2	
  4172  0048F8                     l6268:
  4173  0048F8  0100               	movlb	0	; () banked
  4174  0048FA  5181               	movf	delay_ms@milliseconds& (0+255),w,b
  4175  0048FC  0100               	movlb	0	; () banked
  4176  0048FE  B4D8               	btfsc	status,2,c
  4177  004900  0012               	return	
  4178  004902  D7EF               	goto	l6264
  4179  004904                     __end_of_delay_ms:
  4180                           	opt stack 0
  4181                           tblptru	equ	0xFF8
  4182                           tblptrh	equ	0xFF7
  4183                           tblptrl	equ	0xFF6
  4184                           tablat	equ	0xFF5
  4185                           prodh	equ	0xFF4
  4186                           prodl	equ	0xFF3
  4187                           postinc0	equ	0xFEE
  4188                           wreg	equ	0xFE8
  4189                           postdec1	equ	0xFE5
  4190                           fsr1l	equ	0xFE1
  4191                           indf2	equ	0xFDF
  4192                           postinc2	equ	0xFDE
  4193                           postdec2	equ	0xFDD
  4194                           fsr2h	equ	0xFDA
  4195                           fsr2l	equ	0xFD9
  4196                           status	equ	0xFD8
  4197                           
  4198 ;; *************** function _ID *****************
  4199 ;; Defined at:
  4200 ;;		line 145 in file "sort.c"
  4201 ;; Parameters:    Size  Location     Type
  4202 ;;		None
  4203 ;; Auto vars:     Size  Location     Type
  4204 ;;  i               2    2[BANK0 ] int 
  4205 ;; Return value:  Size  Location     Type
  4206 ;;                  1    wreg      void 
  4207 ;; Registers used:
  4208 ;;		wreg, status,2, status,0
  4209 ;; Tracked objects:
  4210 ;;		On entry : 0/0
  4211 ;;		On exit  : 0/0
  4212 ;;		Unchanged: 0/0
  4213 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4214 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4215 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4216 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4217 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4218 ;;Total ram usage:        4 bytes
  4219 ;; Hardware stack levels used:    1
  4220 ;; Hardware stack levels required when called:    7
  4221 ;; This function calls:
  4222 ;;		Nothing
  4223 ;; This function is called by:
  4224 ;;		_sort
  4225 ;; This function uses a non-reentrant model
  4226 ;;
  4227                           
  4228                           	psect	text10
  4229  003098                     __ptext10:
  4230                           	opt stack 0
  4231  003098                     _ID:
  4232                           	opt stack 22
  4233                           
  4234                           ;sort.c: 146: if(f_can_coming_to_ID){
  4235                           
  4236                           ; BSR set to: 0
  4237                           ;incstack = 0
  4238  003098  5069               	movf	_f_can_coming_to_ID,w,c
  4239  00309A  106A               	iorwf	_f_can_coming_to_ID+1,w,c
  4240  00309C  B4D8               	btfsc	status,2,c
  4241  00309E  0012               	return	
  4242                           
  4243                           ;sort.c: 148: _delay((unsigned long)((1500)*(32000000/4000.0)));
  4244  0030A0  0E3D               	movlw	61
  4245  0030A2  0100               	movlb	0	; () banked
  4246  0030A4  6F81               	movwf	(??_ID+1)& (0+255),b
  4247  0030A6  0EE1               	movlw	225
  4248  0030A8  0100               	movlb	0	; () banked
  4249  0030AA  6F80               	movwf	??_ID& (0+255),b
  4250  0030AC  0E3F               	movlw	63
  4251  0030AE                     u7557:
  4252  0030AE  2EE8               	decfsz	wreg,f,c
  4253  0030B0  D7FE               	bra	u7557
  4254  0030B2  2F80               	decfsz	??_ID& (0+255),f,b
  4255  0030B4  D7FC               	bra	u7557
  4256  0030B6  2F81               	decfsz	(??_ID+1)& (0+255),f,b
  4257  0030B8  D7FA               	bra	u7557
  4258  0030BA  D000               	nop2	
  4259                           
  4260                           ;sort.c: 150: LATAbits.LATA3 = 1;
  4261  0030BC  8689               	bsf	3977,3,c	;volatile
  4262                           
  4263                           ;sort.c: 151: _delay((unsigned long)((600)*(32000000/4000.0)));
  4264  0030BE  0E19               	movlw	25
  4265  0030C0  0100               	movlb	0	; () banked
  4266  0030C2  6F81               	movwf	(??_ID+1)& (0+255),b
  4267  0030C4  0E5A               	movlw	90
  4268  0030C6  0100               	movlb	0	; () banked
  4269  0030C8  6F80               	movwf	??_ID& (0+255),b
  4270  0030CA  0EB1               	movlw	177
  4271  0030CC                     u7567:
  4272  0030CC  2EE8               	decfsz	wreg,f,c
  4273  0030CE  D7FE               	bra	u7567
  4274  0030D0  2F80               	decfsz	??_ID& (0+255),f,b
  4275  0030D2  D7FC               	bra	u7567
  4276  0030D4  2F81               	decfsz	(??_ID+1)& (0+255),f,b
  4277  0030D6  D7FA               	bra	u7567
  4278  0030D8  D000               	nop2	
  4279                           
  4280                           ;sort.c: 152: sensor_outputs[1] = PORTAbits.RA2;
  4281  0030DA  A480               	btfss	3968,2,c	;volatile
  4282  0030DC  D004               	goto	u5170
  4283  0030DE  0100               	movlb	0	; () banked
  4284  0030E0  6B80               	clrf	??_ID& (0+255),b
  4285  0030E2  2B80               	incf	??_ID& (0+255),f,b
  4286  0030E4  D002               	goto	u5178
  4287  0030E6                     u5170:
  4288  0030E6  0100               	movlb	0	; () banked
  4289  0030E8  6B80               	clrf	??_ID& (0+255),b
  4290  0030EA                     u5178:
  4291  0030EA  0100               	movlb	0	; () banked
  4292  0030EC  5180               	movf	??_ID& (0+255),w,b
  4293  0030EE  0100               	movlb	0	; () banked
  4294  0030F0  6FDC               	movwf	(_sensor_outputs+2)& (0+255),b
  4295  0030F2  6BDD               	clrf	(_sensor_outputs+3)& (0+255),b
  4296                           
  4297                           ; BSR set to: 0
  4298                           ;sort.c: 160: if(!sensor_outputs[0]){
  4299  0030F4  0100               	movlb	0	; () banked
  4300  0030F6  51DA               	movf	_sensor_outputs& (0+255),w,b
  4301  0030F8  0100               	movlb	0	; () banked
  4302  0030FA  11DB               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  4303  0030FC  A4D8               	btfss	status,2,c
  4304  0030FE  D014               	goto	l6698
  4305                           
  4306                           ; BSR set to: 0
  4307                           ;sort.c: 161: if(!sensor_outputs[1]){
  4308  003100  0100               	movlb	0	; () banked
  4309  003102  51DC               	movf	(_sensor_outputs+2)& (0+255),w,b
  4310  003104  0100               	movlb	0	; () banked
  4311  003106  11DD               	iorwf	(_sensor_outputs+3)& (0+255),w,b
  4312  003108  A4D8               	btfss	status,2,c
  4313  00310A  D007               	goto	l6694
  4314                           
  4315                           ; BSR set to: 0
  4316                           ;sort.c: 162: count_pop_no_tab++;
  4317  00310C  4A5D               	infsnz	_count_pop_no_tab,f,c
  4318  00310E  2A5E               	incf	_count_pop_no_tab+1,f,c
  4319                           
  4320                           ; BSR set to: 0
  4321                           ;sort.c: 163: cur_can = 0;
  4322  003110  0E00               	movlw	0
  4323  003112  0100               	movlb	0	; () banked
  4324  003114  6FE5               	movwf	(_cur_can+1)& (0+255),b
  4325  003116  0E00               	movlw	0
  4326  003118  D006               	goto	L2
  4327  00311A                     l6694:
  4328                           
  4329                           ; BSR set to: 0
  4330                           ;sort.c: 165: else{
  4331                           ;sort.c: 166: count_pop_w_tab++;
  4332  00311A  4A5F               	infsnz	_count_pop_w_tab,f,c
  4333  00311C  2A60               	incf	_count_pop_w_tab+1,f,c
  4334                           
  4335                           ; BSR set to: 0
  4336                           ;sort.c: 167: cur_can = 1;
  4337  00311E  0E00               	movlw	0
  4338  003120  0100               	movlb	0	; () banked
  4339  003122  6FE5               	movwf	(_cur_can+1)& (0+255),b
  4340  003124  0E01               	movlw	1
  4341  003126                     L2:
  4342  003126  6FE4               	movwf	_cur_can& (0+255),b
  4343  003128                     l6698:
  4344                           
  4345                           ; BSR set to: 0
  4346                           ;sort.c: 168: }
  4347                           ;sort.c: 169: }
  4348                           ;sort.c: 170: if(sensor_outputs[0]){
  4349  003128  0100               	movlb	0	; () banked
  4350  00312A  51DA               	movf	_sensor_outputs& (0+255),w,b
  4351  00312C  0100               	movlb	0	; () banked
  4352  00312E  11DB               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  4353  003130  B4D8               	btfsc	status,2,c
  4354  003132  D016               	goto	l6710
  4355                           
  4356                           ; BSR set to: 0
  4357                           ;sort.c: 171: if(!sensor_outputs[1]){
  4358  003134  0100               	movlb	0	; () banked
  4359  003136  51DC               	movf	(_sensor_outputs+2)& (0+255),w,b
  4360  003138  0100               	movlb	0	; () banked
  4361  00313A  11DD               	iorwf	(_sensor_outputs+3)& (0+255),w,b
  4362  00313C  A4D8               	btfss	status,2,c
  4363  00313E  D008               	goto	l6706
  4364                           
  4365                           ; BSR set to: 0
  4366                           ;sort.c: 172: count_can_w_lab++;
  4367  003140  0101               	movlb	1	; () banked
  4368  003142  4B2D               	infsnz	_count_can_w_lab& (0+255),f,b
  4369  003144  2B2E               	incf	(_count_can_w_lab+1)& (0+255),f,b
  4370                           
  4371                           ; BSR set to: 1
  4372                           ;sort.c: 173: cur_can = 2;
  4373  003146  0E00               	movlw	0
  4374  003148  0100               	movlb	0	; () banked
  4375  00314A  6FE5               	movwf	(_cur_can+1)& (0+255),b
  4376  00314C  0E02               	movlw	2
  4377  00314E  D007               	goto	L3
  4378  003150                     l6706:
  4379                           
  4380                           ; BSR set to: 0
  4381                           ;sort.c: 175: else{
  4382                           ;sort.c: 176: count_can_no_lab++;
  4383  003150  0101               	movlb	1	; () banked
  4384  003152  4B2B               	infsnz	_count_can_no_lab& (0+255),f,b
  4385  003154  2B2C               	incf	(_count_can_no_lab+1)& (0+255),f,b
  4386                           
  4387                           ; BSR set to: 1
  4388                           ;sort.c: 177: cur_can = 3;
  4389  003156  0E00               	movlw	0
  4390  003158  0100               	movlb	0	; () banked
  4391  00315A  6FE5               	movwf	(_cur_can+1)& (0+255),b
  4392  00315C  0E03               	movlw	3
  4393  00315E                     L3:
  4394  00315E  6FE4               	movwf	_cur_can& (0+255),b
  4395  003160                     l6710:
  4396                           
  4397                           ; BSR set to: 0
  4398                           ;sort.c: 178: }
  4399                           ;sort.c: 179: }
  4400                           ;sort.c: 180: LATAbits.LATA3 = 0;
  4401  003160  9689               	bcf	3977,3,c	;volatile
  4402                           
  4403                           ; BSR set to: 0
  4404                           ;sort.c: 181: _delay((unsigned long)((200)*(32000000/4000.0)));
  4405  003162  0E09               	movlw	9
  4406  003164  0100               	movlb	0	; () banked
  4407  003166  6F81               	movwf	(??_ID+1)& (0+255),b
  4408  003168  0E1E               	movlw	30
  4409  00316A  0100               	movlb	0	; () banked
  4410  00316C  6F80               	movwf	??_ID& (0+255),b
  4411  00316E  0EE4               	movlw	228
  4412  003170                     u7577:
  4413  003170  2EE8               	decfsz	wreg,f,c
  4414  003172  D7FE               	bra	u7577
  4415  003174  2F80               	decfsz	??_ID& (0+255),f,b
  4416  003176  D7FC               	bra	u7577
  4417  003178  2F81               	decfsz	(??_ID+1)& (0+255),f,b
  4418  00317A  D7FA               	bra	u7577
  4419  00317C  F000               	nop	
  4420                           
  4421                           ;sort.c: 182: LATAbits.LATA3 = 1;
  4422  00317E  8689               	bsf	3977,3,c	;volatile
  4423                           
  4424                           ;sort.c: 185: for(int i=0;i<10000;i++)
  4425  003180  0E00               	movlw	0
  4426  003182  0100               	movlb	0	; () banked
  4427  003184  6F83               	movwf	(ID@i+1)& (0+255),b
  4428  003186  0E00               	movlw	0
  4429  003188  6F82               	movwf	ID@i& (0+255),b
  4430  00318A  0100               	movlb	0	; () banked
  4431  00318C  BF83               	btfsc	(ID@i+1)& (0+255),7,b
  4432  00318E  D008               	goto	l756
  4433  003190  0E10               	movlw	16
  4434  003192  0100               	movlb	0	; () banked
  4435  003194  5D82               	subwf	ID@i& (0+255),w,b
  4436  003196  0E27               	movlw	39
  4437  003198  0100               	movlb	0	; () banked
  4438  00319A  5983               	subwfb	(ID@i+1)& (0+255),w,b
  4439  00319C  B0D8               	btfsc	status,0,c
  4440  00319E  D00D               	goto	l757
  4441  0031A0                     l756:
  4442                           
  4443                           ; BSR set to: 0
  4444                           ;sort.c: 186: {
  4445                           ;sort.c: 187: LATCbits.LATC0 = 1;
  4446  0031A0  808B               	bsf	3979,0,c	;volatile
  4447                           
  4448                           ; BSR set to: 0
  4449                           ;sort.c: 188: _delay((unsigned long)((10)*(32000000/4000000.0)));
  4450  0031A2  0E1A               	movlw	26
  4451  0031A4                     u7587:
  4452  0031A4  2EE8               	decfsz	wreg,f,c
  4453  0031A6  D7FE               	bra	u7587
  4454  0031A8  D000               	nop2	
  4455                           
  4456                           ;sort.c: 189: LATCbits.LATC0 = 0;
  4457  0031AA  908B               	bcf	3979,0,c	;volatile
  4458                           
  4459                           ;sort.c: 190: _delay((unsigned long)((90)*(32000000/4000000.0)));
  4460  0031AC  0EF0               	movlw	240
  4461  0031AE                     u7597:
  4462  0031AE  2EE8               	decfsz	wreg,f,c
  4463  0031B0  D7FE               	bra	u7597
  4464  0031B2  0100               	movlb	0	; () banked
  4465  0031B4  4B82               	infsnz	ID@i& (0+255),f,b
  4466  0031B6  2B83               	incf	(ID@i+1)& (0+255),f,b
  4467  0031B8  D7E8               	goto	L4
  4468  0031BA                     l757:
  4469                           
  4470                           ; BSR set to: 0
  4471                           ;sort.c: 191: }
  4472                           ;sort.c: 192: LATCbits.LATC0 = 0;
  4473  0031BA  908B               	bcf	3979,0,c	;volatile
  4474                           
  4475                           ;sort.c: 194: LATAbits.LATA3 = 0;
  4476  0031BC  9689               	bcf	3977,3,c	;volatile
  4477                           
  4478                           ; BSR set to: 0
  4479                           ;sort.c: 198: f_can_coming_to_distribution = 1;
  4480  0031BE  0E00               	movlw	0
  4481  0031C0  6E6C               	movwf	_f_can_coming_to_distribution+1,c
  4482  0031C2  0E01               	movlw	1
  4483  0031C4  6E6B               	movwf	_f_can_coming_to_distribution,c
  4484                           
  4485                           ; BSR set to: 0
  4486                           ;sort.c: 199: _delay((unsigned long)((1500)*(32000000/4000.0)));
  4487  0031C6  0E3D               	movlw	61
  4488  0031C8  0100               	movlb	0	; () banked
  4489  0031CA  6F81               	movwf	(??_ID+1)& (0+255),b
  4490  0031CC  0EE1               	movlw	225
  4491  0031CE  0100               	movlb	0	; () banked
  4492  0031D0  6F80               	movwf	??_ID& (0+255),b
  4493  0031D2  0E3F               	movlw	63
  4494  0031D4                     u7607:
  4495  0031D4  2EE8               	decfsz	wreg,f,c
  4496  0031D6  D7FE               	bra	u7607
  4497  0031D8  2F80               	decfsz	??_ID& (0+255),f,b
  4498  0031DA  D7FC               	bra	u7607
  4499  0031DC  2F81               	decfsz	(??_ID+1)& (0+255),f,b
  4500  0031DE  D7FA               	bra	u7607
  4501  0031E0  D000               	nop2	
  4502                           
  4503                           ;sort.c: 200: LATCbits.LATC0 = 1;
  4504  0031E2  808B               	bsf	3979,0,c	;volatile
  4505                           
  4506                           ;sort.c: 202: f_can_coming_to_ID = 0;
  4507  0031E4  0E00               	movlw	0
  4508  0031E6  6E6A               	movwf	_f_can_coming_to_ID+1,c
  4509  0031E8  0E00               	movlw	0
  4510  0031EA  6E69               	movwf	_f_can_coming_to_ID,c
  4511  0031EC  0012               	return	
  4512  0031EE                     __end_of_ID:
  4513                           	opt stack 0
  4514                           tblptru	equ	0xFF8
  4515                           tblptrh	equ	0xFF7
  4516                           tblptrl	equ	0xFF6
  4517                           tablat	equ	0xFF5
  4518                           prodh	equ	0xFF4
  4519                           prodl	equ	0xFF3
  4520                           postinc0	equ	0xFEE
  4521                           wreg	equ	0xFE8
  4522                           postdec1	equ	0xFE5
  4523                           fsr1l	equ	0xFE1
  4524                           indf2	equ	0xFDF
  4525                           postinc2	equ	0xFDE
  4526                           postdec2	equ	0xFDD
  4527                           fsr2h	equ	0xFDA
  4528                           fsr2l	equ	0xFD9
  4529                           status	equ	0xFD8
  4530                           
  4531 ;; *************** function _Distribution *****************
  4532 ;; Defined at:
  4533 ;;		line 205 in file "sort.c"
  4534 ;; Parameters:    Size  Location     Type
  4535 ;;		None
  4536 ;; Auto vars:     Size  Location     Type
  4537 ;;		None
  4538 ;; Return value:  Size  Location     Type
  4539 ;;                  1    wreg      void 
  4540 ;; Registers used:
  4541 ;;		wreg, status,2, status,0, cstack
  4542 ;; Tracked objects:
  4543 ;;		On entry : 0/0
  4544 ;;		On exit  : 0/0
  4545 ;;		Unchanged: 0/0
  4546 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4547 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4548 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4549 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4550 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4551 ;;Total ram usage:        2 bytes
  4552 ;; Hardware stack levels used:    1
  4553 ;; Hardware stack levels required when called:    8
  4554 ;; This function calls:
  4555 ;;		_updateServoPosition
  4556 ;; This function is called by:
  4557 ;;		_sort
  4558 ;; This function uses a non-reentrant model
  4559 ;;
  4560                           
  4561                           	psect	text11
  4562  002758                     __ptext11:
  4563                           	opt stack 0
  4564  002758                     _Distribution:
  4565                           	opt stack 21
  4566                           
  4567                           ;sort.c: 206: if(f_can_coming_to_distribution){
  4568                           
  4569                           ;incstack = 0
  4570  002758  506B               	movf	_f_can_coming_to_distribution,w,c
  4571  00275A  106C               	iorwf	_f_can_coming_to_distribution+1,w,c
  4572  00275C  B4D8               	btfsc	status,2,c
  4573  00275E  0012               	return	
  4574  002760  D034               	goto	l6748
  4575  002762                     l6738:
  4576                           
  4577                           ;sort.c: 216: updateServoPosition(500, 1);
  4578  002762  0E01               	movlw	1
  4579  002764  0100               	movlb	0	; () banked
  4580  002766  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4581  002768  0EF4               	movlw	244
  4582  00276A  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4583  00276C  0E00               	movlw	0
  4584  00276E  0100               	movlb	0	; () banked
  4585  002770  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4586  002772  0E01               	movlw	1
  4587  002774  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4588  002776  EC64  F01F         	call	_updateServoPosition	;wreg free
  4589                           
  4590                           ;sort.c: 217: break;
  4591  00277A  D03E               	goto	l6750
  4592  00277C                     l6740:
  4593                           
  4594                           ;sort.c: 219: updateServoPosition(850, 1);
  4595  00277C  0E03               	movlw	3
  4596  00277E  0100               	movlb	0	; () banked
  4597  002780  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4598  002782  0E52               	movlw	82
  4599  002784  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4600  002786  0E00               	movlw	0
  4601  002788  0100               	movlb	0	; () banked
  4602  00278A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4603  00278C  0E01               	movlw	1
  4604  00278E  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4605  002790  EC64  F01F         	call	_updateServoPosition	;wreg free
  4606                           
  4607                           ;sort.c: 220: break;
  4608  002794  D031               	goto	l6750
  4609  002796                     l6742:
  4610                           
  4611                           ;sort.c: 222: updateServoPosition(1670, 1);
  4612  002796  0E06               	movlw	6
  4613  002798  0100               	movlb	0	; () banked
  4614  00279A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4615  00279C  0E86               	movlw	134
  4616  00279E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4617  0027A0  0E00               	movlw	0
  4618  0027A2  0100               	movlb	0	; () banked
  4619  0027A4  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4620  0027A6  0E01               	movlw	1
  4621  0027A8  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4622  0027AA  EC64  F01F         	call	_updateServoPosition	;wreg free
  4623                           
  4624                           ;sort.c: 223: break;
  4625  0027AE  D024               	goto	l6750
  4626  0027B0                     l6744:
  4627                           
  4628                           ;sort.c: 225: updateServoPosition(2200, 1);
  4629  0027B0  0E08               	movlw	8
  4630  0027B2  0100               	movlb	0	; () banked
  4631  0027B4  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4632  0027B6  0E98               	movlw	152
  4633  0027B8  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4634  0027BA  0E00               	movlw	0
  4635  0027BC  0100               	movlb	0	; () banked
  4636  0027BE  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4637  0027C0  0E01               	movlw	1
  4638  0027C2  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4639  0027C4  EC64  F01F         	call	_updateServoPosition	;wreg free
  4640                           
  4641                           ;sort.c: 229: }
  4642                           
  4643                           ;sort.c: 228: break;
  4644                           
  4645                           ;sort.c: 227: default:
  4646                           
  4647                           ;sort.c: 226: break;
  4648  0027C8  D017               	goto	l6750
  4649  0027CA                     l6748:
  4650  0027CA  C0E4  F088         	movff	_cur_can,??_Distribution
  4651  0027CE  C0E5  F089         	movff	_cur_can+1,??_Distribution+1
  4652                           
  4653                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4654                           ; Switch size 1, requested type "space"
  4655                           ; Number of cases is 1, Range of values is 0 to 0
  4656                           ; switch strategies available:
  4657                           ; Name         Instructions Cycles
  4658                           ; simple_byte            4     3 (average)
  4659                           ;	Chosen strategy is simple_byte
  4660  0027D2  0100               	movlb	0	; () banked
  4661  0027D4  5189               	movf	(??_Distribution+1)& (0+255),w,b
  4662  0027D6  0A00               	xorlw	0	; case 0
  4663  0027D8  A4D8               	btfss	status,2,c
  4664  0027DA  D00E               	goto	l6750
  4665                           
  4666                           ; BSR set to: 0
  4667                           ; Switch size 1, requested type "space"
  4668                           ; Number of cases is 4, Range of values is 0 to 3
  4669                           ; switch strategies available:
  4670                           ; Name         Instructions Cycles
  4671                           ; simple_byte           13     7 (average)
  4672                           ;	Chosen strategy is simple_byte
  4673  0027DC  0100               	movlb	0	; () banked
  4674  0027DE  5188               	movf	??_Distribution& (0+255),w,b
  4675  0027E0  0A00               	xorlw	0	; case 0
  4676  0027E2  B4D8               	btfsc	status,2,c
  4677  0027E4  D7BE               	goto	l6738
  4678  0027E6  0A01               	xorlw	1	; case 1
  4679  0027E8  B4D8               	btfsc	status,2,c
  4680  0027EA  D7C8               	goto	l6740
  4681  0027EC  0A03               	xorlw	3	; case 2
  4682  0027EE  B4D8               	btfsc	status,2,c
  4683  0027F0  D7D2               	goto	l6742
  4684  0027F2  0A01               	xorlw	1	; case 3
  4685  0027F4  B4D8               	btfsc	status,2,c
  4686  0027F6  D7DC               	goto	l6744
  4687  0027F8                     l6750:
  4688                           
  4689                           ;sort.c: 230: updateServoPosition(1150, 3);
  4690  0027F8  0E04               	movlw	4
  4691  0027FA  0100               	movlb	0	; () banked
  4692  0027FC  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4693  0027FE  0E7E               	movlw	126
  4694  002800  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4695  002802  0E00               	movlw	0
  4696  002804  0100               	movlb	0	; () banked
  4697  002806  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4698  002808  0E03               	movlw	3
  4699  00280A  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4700  00280C  EC64  F01F         	call	_updateServoPosition	;wreg free
  4701                           
  4702                           ;sort.c: 231: _delay((unsigned long)((750)*(32000000/4000.0)));
  4703  002810  0E1F               	movlw	31
  4704  002812  0100               	movlb	0	; () banked
  4705  002814  6F89               	movwf	(??_Distribution+1)& (0+255),b
  4706  002816  0E71               	movlw	113
  4707  002818  0100               	movlb	0	; () banked
  4708  00281A  6F88               	movwf	??_Distribution& (0+255),b
  4709  00281C  0E1E               	movlw	30
  4710  00281E                     u7617:
  4711  00281E  2EE8               	decfsz	wreg,f,c
  4712  002820  D7FE               	bra	u7617
  4713  002822  2F88               	decfsz	??_Distribution& (0+255),f,b
  4714  002824  D7FC               	bra	u7617
  4715  002826  2F89               	decfsz	(??_Distribution+1)& (0+255),f,b
  4716  002828  D7FA               	bra	u7617
  4717  00282A  F000               	nop	
  4718                           
  4719                           ;sort.c: 239: switch(cur_can){
  4720  00282C  D034               	goto	l6764
  4721  00282E                     l6754:
  4722                           
  4723                           ;sort.c: 241: updateServoPosition(1260, 3);
  4724  00282E  0E04               	movlw	4
  4725  002830  0100               	movlb	0	; () banked
  4726  002832  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4727  002834  0EEC               	movlw	236
  4728  002836  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4729  002838  0E00               	movlw	0
  4730  00283A  0100               	movlb	0	; () banked
  4731  00283C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4732  00283E  0E03               	movlw	3
  4733  002840  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4734  002842  EC64  F01F         	call	_updateServoPosition	;wreg free
  4735                           
  4736                           ;sort.c: 242: break;
  4737  002846  D03E               	goto	l6766
  4738  002848                     l6756:
  4739                           
  4740                           ;sort.c: 244: updateServoPosition(1260, 3);
  4741  002848  0E04               	movlw	4
  4742  00284A  0100               	movlb	0	; () banked
  4743  00284C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4744  00284E  0EEC               	movlw	236
  4745  002850  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4746  002852  0E00               	movlw	0
  4747  002854  0100               	movlb	0	; () banked
  4748  002856  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4749  002858  0E03               	movlw	3
  4750  00285A  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4751  00285C  EC64  F01F         	call	_updateServoPosition	;wreg free
  4752                           
  4753                           ;sort.c: 245: break;
  4754  002860  D031               	goto	l6766
  4755  002862                     l6758:
  4756                           
  4757                           ;sort.c: 247: updateServoPosition(1300, 3);
  4758  002862  0E05               	movlw	5
  4759  002864  0100               	movlb	0	; () banked
  4760  002866  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4761  002868  0E14               	movlw	20
  4762  00286A  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4763  00286C  0E00               	movlw	0
  4764  00286E  0100               	movlb	0	; () banked
  4765  002870  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4766  002872  0E03               	movlw	3
  4767  002874  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4768  002876  EC64  F01F         	call	_updateServoPosition	;wreg free
  4769                           
  4770                           ;sort.c: 248: break;
  4771  00287A  D024               	goto	l6766
  4772  00287C                     l6760:
  4773                           
  4774                           ;sort.c: 250: updateServoPosition(1300, 3);
  4775  00287C  0E05               	movlw	5
  4776  00287E  0100               	movlb	0	; () banked
  4777  002880  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4778  002882  0E14               	movlw	20
  4779  002884  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4780  002886  0E00               	movlw	0
  4781  002888  0100               	movlb	0	; () banked
  4782  00288A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4783  00288C  0E03               	movlw	3
  4784  00288E  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4785  002890  EC64  F01F         	call	_updateServoPosition	;wreg free
  4786                           
  4787                           ;sort.c: 254: }
  4788                           
  4789                           ;sort.c: 253: break;
  4790                           
  4791                           ;sort.c: 252: default:
  4792                           
  4793                           ;sort.c: 251: break;
  4794  002894  D017               	goto	l6766
  4795  002896                     l6764:
  4796  002896  C0E4  F088         	movff	_cur_can,??_Distribution
  4797  00289A  C0E5  F089         	movff	_cur_can+1,??_Distribution+1
  4798                           
  4799                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4800                           ; Switch size 1, requested type "space"
  4801                           ; Number of cases is 1, Range of values is 0 to 0
  4802                           ; switch strategies available:
  4803                           ; Name         Instructions Cycles
  4804                           ; simple_byte            4     3 (average)
  4805                           ;	Chosen strategy is simple_byte
  4806  00289E  0100               	movlb	0	; () banked
  4807  0028A0  5189               	movf	(??_Distribution+1)& (0+255),w,b
  4808  0028A2  0A00               	xorlw	0	; case 0
  4809  0028A4  A4D8               	btfss	status,2,c
  4810  0028A6  D00E               	goto	l6766
  4811                           
  4812                           ; BSR set to: 0
  4813                           ; Switch size 1, requested type "space"
  4814                           ; Number of cases is 4, Range of values is 0 to 3
  4815                           ; switch strategies available:
  4816                           ; Name         Instructions Cycles
  4817                           ; simple_byte           13     7 (average)
  4818                           ;	Chosen strategy is simple_byte
  4819  0028A8  0100               	movlb	0	; () banked
  4820  0028AA  5188               	movf	??_Distribution& (0+255),w,b
  4821  0028AC  0A00               	xorlw	0	; case 0
  4822  0028AE  B4D8               	btfsc	status,2,c
  4823  0028B0  D7BE               	goto	l6754
  4824  0028B2  0A01               	xorlw	1	; case 1
  4825  0028B4  B4D8               	btfsc	status,2,c
  4826  0028B6  D7C8               	goto	l6756
  4827  0028B8  0A03               	xorlw	3	; case 2
  4828  0028BA  B4D8               	btfsc	status,2,c
  4829  0028BC  D7D2               	goto	l6758
  4830  0028BE  0A01               	xorlw	1	; case 3
  4831  0028C0  B4D8               	btfsc	status,2,c
  4832  0028C2  D7DC               	goto	l6760
  4833  0028C4                     l6766:
  4834                           
  4835                           ;sort.c: 255: _delay((unsigned long)((2500)*(32000000/4000.0)));
  4836  0028C4  0E66               	movlw	102
  4837  0028C6  0100               	movlb	0	; () banked
  4838  0028C8  6F89               	movwf	(??_Distribution+1)& (0+255),b
  4839  0028CA  0E76               	movlw	118
  4840  0028CC  0100               	movlb	0	; () banked
  4841  0028CE  6F88               	movwf	??_Distribution& (0+255),b
  4842  0028D0  0EC1               	movlw	193
  4843  0028D2                     u7627:
  4844  0028D2  2EE8               	decfsz	wreg,f,c
  4845  0028D4  D7FE               	bra	u7627
  4846  0028D6  2F88               	decfsz	??_Distribution& (0+255),f,b
  4847  0028D8  D7FC               	bra	u7627
  4848  0028DA  2F89               	decfsz	(??_Distribution+1)& (0+255),f,b
  4849  0028DC  D7FA               	bra	u7627
  4850                           
  4851                           ;sort.c: 258: updateServoPosition(1150, 3);
  4852  0028DE  0E04               	movlw	4
  4853  0028E0  0100               	movlb	0	; () banked
  4854  0028E2  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4855  0028E4  0E7E               	movlw	126
  4856  0028E6  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4857  0028E8  0E00               	movlw	0
  4858  0028EA  0100               	movlb	0	; () banked
  4859  0028EC  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4860  0028EE  0E03               	movlw	3
  4861  0028F0  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4862  0028F2  EC64  F01F         	call	_updateServoPosition	;wreg free
  4863                           
  4864                           ;sort.c: 259: _delay((unsigned long)((750)*(32000000/4000.0)));
  4865  0028F6  0E1F               	movlw	31
  4866  0028F8  0100               	movlb	0	; () banked
  4867  0028FA  6F89               	movwf	(??_Distribution+1)& (0+255),b
  4868  0028FC  0E71               	movlw	113
  4869  0028FE  0100               	movlb	0	; () banked
  4870  002900  6F88               	movwf	??_Distribution& (0+255),b
  4871  002902  0E1E               	movlw	30
  4872  002904                     u7637:
  4873  002904  2EE8               	decfsz	wreg,f,c
  4874  002906  D7FE               	bra	u7637
  4875  002908  2F88               	decfsz	??_Distribution& (0+255),f,b
  4876  00290A  D7FC               	bra	u7637
  4877  00290C  2F89               	decfsz	(??_Distribution+1)& (0+255),f,b
  4878  00290E  D7FA               	bra	u7637
  4879  002910  F000               	nop	
  4880                           
  4881                           ;sort.c: 260: updateServoPosition(1200, 1);
  4882  002912  0E04               	movlw	4
  4883  002914  0100               	movlb	0	; () banked
  4884  002916  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4885  002918  0EB0               	movlw	176
  4886  00291A  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4887  00291C  0E00               	movlw	0
  4888  00291E  0100               	movlb	0	; () banked
  4889  002920  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4890  002922  0E01               	movlw	1
  4891  002924  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4892  002926  EC64  F01F         	call	_updateServoPosition	;wreg free
  4893                           
  4894                           ;sort.c: 261: updateServoPosition(1150, 3);
  4895  00292A  0E04               	movlw	4
  4896  00292C  0100               	movlb	0	; () banked
  4897  00292E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4898  002930  0E7E               	movlw	126
  4899  002932  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4900  002934  0E00               	movlw	0
  4901  002936  0100               	movlb	0	; () banked
  4902  002938  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4903  00293A  0E03               	movlw	3
  4904  00293C  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4905  00293E  EC64  F01F         	call	_updateServoPosition	;wreg free
  4906                           
  4907                           ;sort.c: 263: f_can_coming_to_distribution = 0;
  4908  002942  0E00               	movlw	0
  4909  002944  6E6C               	movwf	_f_can_coming_to_distribution+1,c
  4910  002946  0E00               	movlw	0
  4911  002948  6E6B               	movwf	_f_can_coming_to_distribution,c
  4912                           
  4913                           ;sort.c: 264: f_can_distributed = 1;
  4914  00294A  0E00               	movlw	0
  4915  00294C  0101               	movlb	1	; () banked
  4916  00294E  6F30               	movwf	(_f_can_distributed+1)& (0+255),b
  4917  002950  0E01               	movlw	1
  4918  002952  6F2F               	movwf	_f_can_distributed& (0+255),b
  4919                           
  4920                           ; BSR set to: 1
  4921                           ;sort.c: 265: if(f_lastCan == 1){
  4922  002954  046D               	decf	_f_lastCan,w,c
  4923  002956  106E               	iorwf	_f_lastCan+1,w,c
  4924  002958  A4D8               	btfss	status,2,c
  4925  00295A  0012               	return	
  4926                           
  4927                           ; BSR set to: 1
  4928                           ;sort.c: 266: machine_state = DoneSorting_state;
  4929  00295C  0E02               	movlw	2
  4930  00295E  0100               	movlb	0	; () banked
  4931  002960  6FFC               	movwf	_machine_state& (0+255),b
  4932                           
  4933                           ; BSR set to: 0
  4934  002962  0012               	return	
  4935  002964                     __end_of_Distribution:
  4936                           	opt stack 0
  4937                           tblptru	equ	0xFF8
  4938                           tblptrh	equ	0xFF7
  4939                           tblptrl	equ	0xFF6
  4940                           tablat	equ	0xFF5
  4941                           prodh	equ	0xFF4
  4942                           prodl	equ	0xFF3
  4943                           postinc0	equ	0xFEE
  4944                           wreg	equ	0xFE8
  4945                           postdec1	equ	0xFE5
  4946                           fsr1l	equ	0xFE1
  4947                           indf2	equ	0xFDF
  4948                           postinc2	equ	0xFDE
  4949                           postdec2	equ	0xFDD
  4950                           fsr2h	equ	0xFDA
  4951                           fsr2l	equ	0xFD9
  4952                           status	equ	0xFD8
  4953                           
  4954 ;; *************** function _machineConfig *****************
  4955 ;; Defined at:
  4956 ;;		line 15 in file "MachineConfig.c"
  4957 ;; Parameters:    Size  Location     Type
  4958 ;;		None
  4959 ;; Auto vars:     Size  Location     Type
  4960 ;;		None
  4961 ;; Return value:  Size  Location     Type
  4962 ;;                  1    wreg      void 
  4963 ;; Registers used:
  4964 ;;		wreg, status,2
  4965 ;; Tracked objects:
  4966 ;;		On entry : 0/0
  4967 ;;		On exit  : 0/0
  4968 ;;		Unchanged: 0/0
  4969 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4970 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4971 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4972 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4973 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4974 ;;Total ram usage:        0 bytes
  4975 ;; Hardware stack levels used:    1
  4976 ;; Hardware stack levels required when called:    7
  4977 ;; This function calls:
  4978 ;;		Nothing
  4979 ;; This function is called by:
  4980 ;;		_main
  4981 ;; This function uses a non-reentrant model
  4982 ;;
  4983                           
  4984                           	psect	text12
  4985  0041B8                     __ptext12:
  4986                           	opt stack 0
  4987  0041B8                     _machineConfig:
  4988                           	opt stack 23
  4989                           
  4990                           ;MachineConfig.c: 17: OSCCON = 0xF0;
  4991                           
  4992                           ;incstack = 0
  4993  0041B8  0EF0               	movlw	240
  4994  0041BA  6ED3               	movwf	4051,c	;volatile
  4995                           
  4996                           ;MachineConfig.c: 18: OSCTUNEbits.PLLEN = 1;
  4997  0041BC  8C9B               	bsf	3995,6,c	;volatile
  4998                           
  4999                           ;MachineConfig.c: 22: TRISA = 0b00000111;
  5000  0041BE  0E07               	movlw	7
  5001  0041C0  6E92               	movwf	3986,c	;volatile
  5002                           
  5003                           ;MachineConfig.c: 24: TRISB = 0b11110010;
  5004  0041C2  0EF2               	movlw	242
  5005  0041C4  6E93               	movwf	3987,c	;volatile
  5006                           
  5007                           ;MachineConfig.c: 27: TRISC = 0x00;
  5008  0041C6  0E00               	movlw	0
  5009  0041C8  6E94               	movwf	3988,c	;volatile
  5010                           
  5011                           ;MachineConfig.c: 31: TRISD = 0x00;
  5012  0041CA  0E00               	movlw	0
  5013  0041CC  6E95               	movwf	3989,c	;volatile
  5014                           
  5015                           ;MachineConfig.c: 34: TRISE = 0x00;
  5016  0041CE  0E00               	movlw	0
  5017  0041D0  6E96               	movwf	3990,c	;volatile
  5018                           
  5019                           ;MachineConfig.c: 37: LATA = 0x00;
  5020  0041D2  0E00               	movlw	0
  5021  0041D4  6E89               	movwf	3977,c	;volatile
  5022                           
  5023                           ;MachineConfig.c: 38: LATB = 0x00;
  5024  0041D6  0E00               	movlw	0
  5025  0041D8  6E8A               	movwf	3978,c	;volatile
  5026                           
  5027                           ;MachineConfig.c: 39: LATC = 0x00;
  5028  0041DA  0E00               	movlw	0
  5029  0041DC  6E8B               	movwf	3979,c	;volatile
  5030                           
  5031                           ;MachineConfig.c: 40: LATD = 0x00;
  5032  0041DE  0E00               	movlw	0
  5033  0041E0  6E8C               	movwf	3980,c	;volatile
  5034                           
  5035                           ;MachineConfig.c: 41: LATE = 0x00;
  5036  0041E2  0E00               	movlw	0
  5037  0041E4  6E8D               	movwf	3981,c	;volatile
  5038                           
  5039                           ;MachineConfig.c: 43: nRBPU = 0;
  5040  0041E6  9EF1               	bcf	intcon2,7,c	;volatile
  5041                           
  5042                           ;MachineConfig.c: 46: ADCON0 = 0x00;
  5043  0041E8  0E00               	movlw	0
  5044  0041EA  6EC2               	movwf	4034,c	;volatile
  5045                           
  5046                           ;MachineConfig.c: 47: ADCON1 = 0b00001101;
  5047  0041EC  0E0D               	movlw	13
  5048  0041EE  6EC1               	movwf	4033,c	;volatile
  5049                           
  5050                           ;MachineConfig.c: 50: CVRCON = 0x00;
  5051  0041F0  0E00               	movlw	0
  5052  0041F2  6EB5               	movwf	4021,c	;volatile
  5053                           
  5054                           ;MachineConfig.c: 51: CMCONbits.CIS = 0;
  5055  0041F4  96B4               	bcf	4020,3,c	;volatile
  5056                           
  5057                           ;MachineConfig.c: 52: ADCON2 = 0b10110001;
  5058  0041F6  0EB1               	movlw	177
  5059  0041F8  6EC0               	movwf	4032,c	;volatile
  5060                           
  5061                           ;MachineConfig.c: 55: INT1IE = 1;
  5062  0041FA  86F0               	bsf	intcon3,3,c	;volatile
  5063                           
  5064                           ;MachineConfig.c: 57: TMR0IE = 1;
  5065  0041FC  8AF2               	bsf	intcon,5,c	;volatile
  5066                           
  5067                           ;MachineConfig.c: 58: TMR1IE = 1;
  5068  0041FE  809D               	bsf	3997,0,c	;volatile
  5069                           
  5070                           ;MachineConfig.c: 59: T1CON = 0b10110000;
  5071  004200  0EB0               	movlw	176
  5072  004202  6ECD               	movwf	4045,c	;volatile
  5073                           
  5074                           ;MachineConfig.c: 60: T3CON = 0b10110000;
  5075  004204  0EB0               	movlw	176
  5076  004206  6EB1               	movwf	4017,c	;volatile
  5077                           
  5078                           ;MachineConfig.c: 61: TMR2IE = 1;
  5079  004208  829D               	bsf	3997,1,c	;volatile
  5080                           
  5081                           ;MachineConfig.c: 62: TMR3IE = 1;
  5082  00420A  82A0               	bsf	4000,1,c	;volatile
  5083                           
  5084                           ;MachineConfig.c: 63: PEIE = 1;
  5085  00420C  8CF2               	bsf	intcon,6,c	;volatile
  5086                           
  5087                           ;MachineConfig.c: 64: ADIE = 0;
  5088  00420E  9C9D               	bcf	3997,6,c	;volatile
  5089                           
  5090                           ;MachineConfig.c: 65: (INTCONbits.GIE = 0);
  5091  004210  9EF2               	bcf	intcon,7,c	;volatile
  5092  004212  0012               	return		;funcret
  5093  004214                     __end_of_machineConfig:
  5094                           	opt stack 0
  5095                           tblptru	equ	0xFF8
  5096                           tblptrh	equ	0xFF7
  5097                           tblptrl	equ	0xFF6
  5098                           tablat	equ	0xFF5
  5099                           prodh	equ	0xFF4
  5100                           prodl	equ	0xFF3
  5101                           intcon	equ	0xFF2
  5102                           intcon2	equ	0xFF1
  5103                           intcon3	equ	0xFF0
  5104                           postinc0	equ	0xFEE
  5105                           wreg	equ	0xFE8
  5106                           postdec1	equ	0xFE5
  5107                           fsr1l	equ	0xFE1
  5108                           indf2	equ	0xFDF
  5109                           postinc2	equ	0xFDE
  5110                           postdec2	equ	0xFDD
  5111                           fsr2h	equ	0xFDA
  5112                           fsr2l	equ	0xFD9
  5113                           status	equ	0xFD8
  5114                           
  5115 ;; *************** function _logRun *****************
  5116 ;; Defined at:
  5117 ;;		line 84 in file "EEPROM.c"
  5118 ;; Parameters:    Size  Location     Type
  5119 ;;		None
  5120 ;; Auto vars:     Size  Location     Type
  5121 ;;  byte_i          1   53[BANK0 ] unsigned char 
  5122 ;;  i               2   55[BANK0 ] int 
  5123 ;;  num             1   49[BANK0 ] unsigned char 
  5124 ;;  addr            2   57[BANK0 ] unsigned short 
  5125 ;;  byte11          1   54[BANK0 ] unsigned char 
  5126 ;;  byte3           1   52[BANK0 ] unsigned char 
  5127 ;;  byte2           1   51[BANK0 ] unsigned char 
  5128 ;;  byte1           1   50[BANK0 ] unsigned char 
  5129 ;; Return value:  Size  Location     Type
  5130 ;;                  1    wreg      void 
  5131 ;; Registers used:
  5132 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5133 ;; Tracked objects:
  5134 ;;		On entry : 0/0
  5135 ;;		On exit  : 0/0
  5136 ;;		Unchanged: 0/0
  5137 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5138 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5139 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5140 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5141 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5142 ;;Total ram usage:       10 bytes
  5143 ;; Hardware stack levels used:    1
  5144 ;; Hardware stack levels required when called:   11
  5145 ;; This function calls:
  5146 ;;		_EEPROM_read
  5147 ;;		_EEPROM_write
  5148 ;; This function is called by:
  5149 ;;		_main
  5150 ;; This function uses a non-reentrant model
  5151 ;;
  5152                           
  5153                           	psect	text13
  5154  0031EE                     __ptext13:
  5155                           	opt stack 0
  5156  0031EE                     _logRun:
  5157                           	opt stack 19
  5158                           
  5159                           ;EEPROM.c: 97: sel = EEPROM_read(0);
  5160                           
  5161                           ;incstack = 0
  5162  0031EE  0E00               	movlw	0
  5163  0031F0  0100               	movlb	0	; () banked
  5164  0031F2  6F81               	movwf	(EEPROM_read@address+1)& (0+255),b
  5165  0031F4  0E00               	movlw	0
  5166  0031F6  6F80               	movwf	EEPROM_read@address& (0+255),b
  5167  0031F8  ECFF  F024         	call	_EEPROM_read	;wreg free
  5168  0031FC  0100               	movlb	0	; () banked
  5169  0031FE  6FFD               	movwf	_sel& (0+255),b
  5170                           
  5171                           ; BSR set to: 0
  5172                           ;EEPROM.c: 98: unsigned short addr = 1 + 11 * sel;
  5173  003200  0100               	movlb	0	; () banked
  5174  003202  51FD               	movf	_sel& (0+255),w,b
  5175  003204  0D0B               	mullw	11
  5176  003206  0E01               	movlw	1
  5177  003208  24F3               	addwf	prodl,w,c
  5178  00320A  0100               	movlb	0	; () banked
  5179  00320C  6FB9               	movwf	logRun@addr& (0+255),b
  5180  00320E  0E00               	movlw	0
  5181  003210  20F4               	addwfc	prodh,w,c
  5182  003212  0100               	movlb	0	; () banked
  5183  003214  6FBA               	movwf	(logRun@addr+1)& (0+255),b
  5184                           
  5185                           ; BSR set to: 0
  5186                           ;EEPROM.c: 101: if (sel < 3){
  5187  003216  0E03               	movlw	3
  5188  003218  0100               	movlb	0	; () banked
  5189  00321A  61FD               	cpfslt	_sel& (0+255),b
  5190  00321C  D00E               	goto	l8268
  5191                           
  5192                           ; BSR set to: 0
  5193                           ;EEPROM.c: 102: unsigned char num = sel+1;
  5194  00321E  0100               	movlb	0	; () banked
  5195  003220  29FD               	incf	_sel& (0+255),w,b
  5196  003222  0100               	movlb	0	; () banked
  5197  003224  6FB1               	movwf	logRun@num& (0+255),b
  5198                           
  5199                           ; BSR set to: 0
  5200                           ;EEPROM.c: 103: EEPROM_write(0, num);
  5201  003226  0E00               	movlw	0
  5202  003228  0100               	movlb	0	; () banked
  5203  00322A  6FAC               	movwf	(EEPROM_write@address+1)& (0+255),b
  5204  00322C  0E00               	movlw	0
  5205  00322E  6FAB               	movwf	EEPROM_write@address& (0+255),b
  5206  003230  C0B1  F0AD         	movff	logRun@num,EEPROM_write@data
  5207  003234  ECB2  F01A         	call	_EEPROM_write	;wreg free
  5208                           
  5209                           ;EEPROM.c: 104: }
  5210  003238  D00A               	goto	l8270
  5211  00323A                     l8268:
  5212                           
  5213                           ;EEPROM.c: 105: else{
  5214                           ;EEPROM.c: 106: EEPROM_write(0, 0);
  5215  00323A  0E00               	movlw	0
  5216  00323C  0100               	movlb	0	; () banked
  5217  00323E  6FAC               	movwf	(EEPROM_write@address+1)& (0+255),b
  5218  003240  0E00               	movlw	0
  5219  003242  6FAB               	movwf	EEPROM_write@address& (0+255),b
  5220  003244  0E00               	movlw	0
  5221  003246  0100               	movlb	0	; () banked
  5222  003248  6FAD               	movwf	EEPROM_write@data& (0+255),b
  5223  00324A  ECB2  F01A         	call	_EEPROM_write	;wreg free
  5224  00324E                     l8270:
  5225                           
  5226                           ;EEPROM.c: 107: }
  5227                           ;EEPROM.c: 110: unsigned char byte1 = 0b10000000 | count_total;
  5228  00324E  0100               	movlb	0	; () banked
  5229  003250  51FE               	movf	_count_total& (0+255),w,b
  5230  003252  0980               	iorlw	128
  5231  003254  0100               	movlb	0	; () banked
  5232  003256  6FB2               	movwf	logRun@byte1& (0+255),b
  5233                           
  5234                           ; BSR set to: 0
  5235                           ;EEPROM.c: 111: EEPROM_write(addr, byte1);
  5236  003258  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  5237  00325C  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  5238  003260  C0B2  F0AD         	movff	logRun@byte1,EEPROM_write@data
  5239  003264  ECB2  F01A         	call	_EEPROM_write	;wreg free
  5240                           
  5241                           ;EEPROM.c: 112: addr++;
  5242  003268  0100               	movlb	0	; () banked
  5243  00326A  4BB9               	infsnz	logRun@addr& (0+255),f,b
  5244  00326C  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  5245                           
  5246                           ; BSR set to: 0
  5247                           ;EEPROM.c: 115: unsigned char byte2 = (count_pop_no_tab << 4) | count_pop_w_tab;
  5248  00326E  385D               	swapf	_count_pop_no_tab,w,c
  5249  003270  0BF0               	andlw	240
  5250  003272  105F               	iorwf	_count_pop_w_tab,w,c
  5251  003274  0100               	movlb	0	; () banked
  5252  003276  6FB3               	movwf	logRun@byte2& (0+255),b
  5253                           
  5254                           ; BSR set to: 0
  5255                           ;EEPROM.c: 116: EEPROM_write(addr, byte2);
  5256  003278  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  5257  00327C  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  5258  003280  C0B3  F0AD         	movff	logRun@byte2,EEPROM_write@data
  5259  003284  ECB2  F01A         	call	_EEPROM_write	;wreg free
  5260                           
  5261                           ;EEPROM.c: 117: addr++;
  5262  003288  0100               	movlb	0	; () banked
  5263  00328A  4BB9               	infsnz	logRun@addr& (0+255),f,b
  5264  00328C  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  5265                           
  5266                           ; BSR set to: 0
  5267                           ;EEPROM.c: 118: unsigned char byte3 = (count_can_w_lab << 4) | count_can_no_lab;
  5268  00328E  0101               	movlb	1	; () banked
  5269  003290  392D               	swapf	_count_can_w_lab& (0+255),w,b
  5270  003292  0BF0               	andlw	240
  5271  003294  0101               	movlb	1	; () banked
  5272  003296  112B               	iorwf	_count_can_no_lab& (0+255),w,b
  5273  003298  0100               	movlb	0	; () banked
  5274  00329A  6FB4               	movwf	logRun@byte3& (0+255),b
  5275                           
  5276                           ; BSR set to: 0
  5277                           ;EEPROM.c: 119: EEPROM_write(addr, byte3);
  5278  00329C  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  5279  0032A0  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  5280  0032A4  C0B4  F0AD         	movff	logRun@byte3,EEPROM_write@data
  5281  0032A8  ECB2  F01A         	call	_EEPROM_write	;wreg free
  5282                           
  5283                           ;EEPROM.c: 120: addr++;
  5284  0032AC  0100               	movlb	0	; () banked
  5285  0032AE  4BB9               	infsnz	logRun@addr& (0+255),f,b
  5286  0032B0  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  5287                           
  5288                           ; BSR set to: 0
  5289                           ;EEPROM.c: 123: for(int i = 0; i < 7; i++){
  5290  0032B2  0E00               	movlw	0
  5291  0032B4  0100               	movlb	0	; () banked
  5292  0032B6  6FB8               	movwf	(logRun@i+1)& (0+255),b
  5293  0032B8  0E00               	movlw	0
  5294  0032BA  6FB7               	movwf	logRun@i& (0+255),b
  5295                           
  5296                           ; BSR set to: 0
  5297  0032BC  0100               	movlb	0	; () banked
  5298  0032BE  BFB8               	btfsc	(logRun@i+1)& (0+255),7,b
  5299  0032C0  D008               	goto	l8294
  5300  0032C2  0100               	movlb	0	; () banked
  5301  0032C4  51B8               	movf	(logRun@i+1)& (0+255),w,b
  5302  0032C6  E128               	bnz	l967
  5303  0032C8  0E07               	movlw	7
  5304  0032CA  0100               	movlb	0	; () banked
  5305  0032CC  5DB7               	subwf	logRun@i& (0+255),w,b
  5306  0032CE  B0D8               	btfsc	status,0,c
  5307  0032D0  D023               	goto	l967
  5308  0032D2                     l8294:
  5309                           
  5310                           ; BSR set to: 0
  5311                           ;EEPROM.c: 124: unsigned char byte_i = startTime[i];
  5312  0032D2  90D8               	bcf	status,0,c
  5313  0032D4  0100               	movlb	0	; () banked
  5314  0032D6  35B7               	rlcf	logRun@i& (0+255),w,b
  5315  0032D8  6ED9               	movwf	fsr2l,c
  5316  0032DA  0100               	movlb	0	; () banked
  5317  0032DC  35B8               	rlcf	(logRun@i+1)& (0+255),w,b
  5318  0032DE  6EDA               	movwf	fsr2h,c
  5319  0032E0  0E0E               	movlw	low _startTime
  5320  0032E2  26D9               	addwf	fsr2l,f,c
  5321  0032E4  0E01               	movlw	high _startTime
  5322  0032E6  22DA               	addwfc	fsr2h,f,c
  5323  0032E8  50DF               	movf	indf2,w,c
  5324  0032EA  0100               	movlb	0	; () banked
  5325  0032EC  6FB5               	movwf	logRun@byte_i& (0+255),b
  5326                           
  5327                           ; BSR set to: 0
  5328                           ;EEPROM.c: 125: EEPROM_write(addr, byte_i);
  5329  0032EE  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  5330  0032F2  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  5331  0032F6  C0B5  F0AD         	movff	logRun@byte_i,EEPROM_write@data
  5332  0032FA  ECB2  F01A         	call	_EEPROM_write	;wreg free
  5333                           
  5334                           ;EEPROM.c: 126: addr++;
  5335  0032FE  0100               	movlb	0	; () banked
  5336  003300  4BB9               	infsnz	logRun@addr& (0+255),f,b
  5337  003302  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  5338                           
  5339                           ; BSR set to: 0
  5340  003304  0100               	movlb	0	; () banked
  5341  003306  4BB7               	infsnz	logRun@i& (0+255),f,b
  5342  003308  2BB8               	incf	(logRun@i+1)& (0+255),f,b
  5343                           
  5344                           ; BSR set to: 0
  5345  00330A  0100               	movlb	0	; () banked
  5346  00330C  BFB8               	btfsc	(logRun@i+1)& (0+255),7,b
  5347  00330E  D7E1               	goto	l8294
  5348  003310  0100               	movlb	0	; () banked
  5349  003312  51B8               	movf	(logRun@i+1)& (0+255),w,b
  5350  003314  E101               	bnz	u7250
  5351  003316  D7D8               	goto	L5
  5352  003318                     u7250:
  5353  003318                     l967:
  5354                           
  5355                           ; BSR set to: 0
  5356                           ;EEPROM.c: 127: }
  5357                           ;EEPROM.c: 130: unsigned char byte11 = total_time;
  5358  003318  C0F8  F0B6         	movff	_total_time,logRun@byte11
  5359                           
  5360                           ; BSR set to: 0
  5361                           ;EEPROM.c: 131: EEPROM_write(addr, byte11);
  5362  00331C  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  5363  003320  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  5364  003324  C0B6  F0AD         	movff	logRun@byte11,EEPROM_write@data
  5365  003328  ECB2  F01A         	call	_EEPROM_write	;wreg free
  5366  00332C  0012               	return		;funcret
  5367  00332E                     __end_of_logRun:
  5368                           	opt stack 0
  5369                           tblptru	equ	0xFF8
  5370                           tblptrh	equ	0xFF7
  5371                           tblptrl	equ	0xFF6
  5372                           tablat	equ	0xFF5
  5373                           prodh	equ	0xFF4
  5374                           prodl	equ	0xFF3
  5375                           intcon	equ	0xFF2
  5376                           intcon2	equ	0xFF1
  5377                           intcon3	equ	0xFF0
  5378                           postinc0	equ	0xFEE
  5379                           wreg	equ	0xFE8
  5380                           postdec1	equ	0xFE5
  5381                           fsr1l	equ	0xFE1
  5382                           indf2	equ	0xFDF
  5383                           postinc2	equ	0xFDE
  5384                           postdec2	equ	0xFDD
  5385                           fsr2h	equ	0xFDA
  5386                           fsr2l	equ	0xFD9
  5387                           status	equ	0xFD8
  5388                           
  5389 ;; *************** function _EEPROM_write *****************
  5390 ;; Defined at:
  5391 ;;		line 32 in file "EEPROM.c"
  5392 ;; Parameters:    Size  Location     Type
  5393 ;;  address         2   43[BANK0 ] unsigned short 
  5394 ;;  data            1   45[BANK0 ] unsigned char 
  5395 ;; Auto vars:     Size  Location     Type
  5396 ;;  i               1   48[BANK0 ] unsigned char 
  5397 ;;  i               1   47[BANK0 ] unsigned char 
  5398 ;; Return value:  Size  Location     Type
  5399 ;;                  1    wreg      void 
  5400 ;; Registers used:
  5401 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5402 ;; Tracked objects:
  5403 ;;		On entry : 0/0
  5404 ;;		On exit  : 0/0
  5405 ;;		Unchanged: 0/0
  5406 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5407 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5408 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5409 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5410 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5411 ;;Total ram usage:        6 bytes
  5412 ;; Hardware stack levels used:    1
  5413 ;; Hardware stack levels required when called:   10
  5414 ;; This function calls:
  5415 ;;		_EEPROM_read
  5416 ;;		_lcdInst
  5417 ;;		_printf
  5418 ;; This function is called by:
  5419 ;;		_Loading
  5420 ;;		_logRun
  5421 ;; This function uses a non-reentrant model
  5422 ;;
  5423                           
  5424                           	psect	text14
  5425  003564                     __ptext14:
  5426                           	opt stack 0
  5427  003564                     _EEPROM_write:
  5428                           	opt stack 18
  5429                           
  5430                           ;EEPROM.c: 33: EECON1bits.WREN = 1;
  5431                           
  5432                           ;incstack = 0
  5433  003564  84A6               	bsf	4006,2,c	;volatile
  5434                           
  5435                           ;EEPROM.c: 36: EEADRH = (unsigned char)(address >> 8);
  5436  003566  0100               	movlb	0	; () banked
  5437  003568  51AC               	movf	(EEPROM_write@address+1)& (0+255),w,b
  5438  00356A  6EAA               	movwf	4010,c	;volatile
  5439                           
  5440                           ; BSR set to: 0
  5441                           ;EEPROM.c: 37: EEADR = (unsigned char)address;
  5442  00356C  C0AB  FFA9         	movff	EEPROM_write@address,4009	;volatile
  5443                           
  5444                           ; BSR set to: 0
  5445                           ;EEPROM.c: 39: EEDATA = data;
  5446  003570  C0AD  FFA8         	movff	EEPROM_write@data,4008	;volatile
  5447                           
  5448                           ; BSR set to: 0
  5449                           ;EEPROM.c: 40: EECON1bits.EEPGD = 0;
  5450  003574  9EA6               	bcf	4006,7,c	;volatile
  5451                           
  5452                           ; BSR set to: 0
  5453                           ;EEPROM.c: 41: EECON1bits.CFGS = 0;
  5454  003576  9CA6               	bcf	4006,6,c	;volatile
  5455                           
  5456                           ; BSR set to: 0
  5457                           ;EEPROM.c: 43: (INTCONbits.GIE = 0);
  5458  003578  9EF2               	bcf	intcon,7,c	;volatile
  5459                           
  5460                           ;EEPROM.c: 45: EECON2 = 0x55;
  5461  00357A  0E55               	movlw	85
  5462  00357C  6EA7               	movwf	4007,c	;volatile
  5463                           
  5464                           ;EEPROM.c: 46: EECON2 = 0x0AA;
  5465  00357E  0EAA               	movlw	170
  5466  003580  6EA7               	movwf	4007,c	;volatile
  5467                           
  5468                           ; BSR set to: 0
  5469                           ;EEPROM.c: 47: EECON1bits.WR = 1;
  5470  003582  82A6               	bsf	4006,1,c	;volatile
  5471                           
  5472                           ; BSR set to: 0
  5473                           ;EEPROM.c: 48: (INTCONbits.GIE = 1);
  5474  003584  8EF2               	bsf	intcon,7,c	;volatile
  5475  003586                     l945:
  5476  003586  A8A1               	btfss	4001,4,c	;volatile
  5477  003588  D7FE               	goto	l945
  5478                           
  5479                           ;EEPROM.c: 53: PIR2bits.EEIF = 0;
  5480  00358A  98A1               	bcf	4001,4,c	;volatile
  5481                           
  5482                           ;EEPROM.c: 54: EECON1bits.WREN = 0;
  5483  00358C  94A6               	bcf	4006,2,c	;volatile
  5484                           
  5485                           ;EEPROM.c: 57: if(debug){
  5486  00358E  5061               	movf	_debug,w,c
  5487  003590  1062               	iorwf	_debug+1,w,c
  5488  003592  B4D8               	btfsc	status,2,c
  5489  003594  0012               	return	
  5490                           
  5491                           ;EEPROM.c: 58: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  5492  003596  0E01               	movlw	1
  5493  003598  EC3C  F025         	call	_lcdInst
  5494  00359C  0E68               	movlw	104
  5495  00359E  0100               	movlb	0	; () banked
  5496  0035A0  6FAE               	movwf	??_EEPROM_write& (0+255),b
  5497  0035A2  0EE4               	movlw	228
  5498  0035A4                     u7647:
  5499  0035A4  2EE8               	decfsz	wreg,f,c
  5500  0035A6  D7FE               	bra	u7647
  5501  0035A8  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  5502  0035AA  D7FC               	bra	u7647
  5503  0035AC  F000               	nop	
  5504                           
  5505                           ;EEPROM.c: 59: lcdInst(0b10000000);;
  5506  0035AE  0E80               	movlw	128
  5507  0035B0  EC3C  F025         	call	_lcdInst
  5508                           
  5509                           ;EEPROM.c: 60: if(EEPROM_read(address)==data){
  5510  0035B4  C0AB  F080         	movff	EEPROM_write@address,EEPROM_read@address
  5511  0035B8  C0AC  F081         	movff	EEPROM_write@address+1,EEPROM_read@address+1
  5512  0035BC  ECFF  F024         	call	_EEPROM_read	;wreg free
  5513  0035C0  0100               	movlb	0	; () banked
  5514  0035C2  19AD               	xorwf	EEPROM_write@data& (0+255),w,b
  5515  0035C4  A4D8               	btfss	status,2,c
  5516  0035C6  D024               	goto	l6250
  5517                           
  5518                           ; BSR set to: 0
  5519                           ;EEPROM.c: 61: printf("(data: %u, addr: %u)", data, address);
  5520  0035C8  0E34               	movlw	low STR_66
  5521  0035CA  0100               	movlb	0	; () banked
  5522  0035CC  6F8E               	movwf	printf@f& (0+255),b
  5523  0035CE  0EFB               	movlw	high STR_66
  5524  0035D0  0100               	movlb	0	; () banked
  5525  0035D2  6F8F               	movwf	(printf@f+1)& (0+255),b
  5526  0035D4  C0AD  F090         	movff	EEPROM_write@data,?_printf+2
  5527  0035D8  0100               	movlb	0	; () banked
  5528  0035DA  6B91               	clrf	(?_printf+3)& (0+255),b
  5529  0035DC  C0AB  F092         	movff	EEPROM_write@address,?_printf+4
  5530  0035E0  C0AC  F093         	movff	EEPROM_write@address+1,?_printf+5
  5531  0035E4  ECB8  F008         	call	_printf	;wreg free
  5532                           
  5533                           ;EEPROM.c: 62: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));}
      +                          ;
  5534  0035E8  0E00               	movlw	0
  5535  0035EA  0100               	movlb	0	; () banked
  5536  0035EC  6FAF               	movwf	EEPROM_write@i& (0+255),b
  5537  0035EE                     l6242:
  5538                           
  5539                           ; BSR set to: 0
  5540  0035EE  0E63               	movlw	99
  5541  0035F0  0100               	movlb	0	; () banked
  5542  0035F2  65AF               	cpfsgt	EEPROM_write@i& (0+255),b
  5543  0035F4  D001               	goto	l6246
  5544  0035F6  0012               	return	
  5545  0035F8                     l6246:
  5546                           
  5547                           ; BSR set to: 0
  5548  0035F8  0E68               	movlw	104
  5549  0035FA  0100               	movlb	0	; () banked
  5550  0035FC  6FAE               	movwf	??_EEPROM_write& (0+255),b
  5551  0035FE  0EE4               	movlw	228
  5552  003600                     u7657:
  5553  003600  2EE8               	decfsz	wreg,f,c
  5554  003602  D7FE               	bra	u7657
  5555  003604  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  5556  003606  D7FC               	bra	u7657
  5557  003608  F000               	nop	
  5558  00360A  0100               	movlb	0	; () banked
  5559  00360C  2BAF               	incf	EEPROM_write@i& (0+255),f,b
  5560  00360E  D7EF               	goto	l6242
  5561  003610                     l6250:
  5562                           
  5563                           ; BSR set to: 0
  5564                           ;EEPROM.c: 64: else{ printf("FAILED"); for(char i=0;i<100;i++){_delay((unsigned long)((1
      +                          0)*(32000000/4000.0)));}; }
  5565  003610  0EBD               	movlw	low STR_67
  5566  003612  0100               	movlb	0	; () banked
  5567  003614  6F8E               	movwf	printf@f& (0+255),b
  5568  003616  0EFF               	movlw	high STR_67
  5569  003618  0100               	movlb	0	; () banked
  5570  00361A  6F8F               	movwf	(printf@f+1)& (0+255),b
  5571  00361C  ECB8  F008         	call	_printf	;wreg free
  5572  003620  0E00               	movlw	0
  5573  003622  0100               	movlb	0	; () banked
  5574  003624  6FB0               	movwf	EEPROM_write@i_1331& (0+255),b
  5575  003626                     l6254:
  5576                           
  5577                           ; BSR set to: 0
  5578  003626  0E63               	movlw	99
  5579  003628  0100               	movlb	0	; () banked
  5580  00362A  65B0               	cpfsgt	EEPROM_write@i_1331& (0+255),b
  5581  00362C  D001               	goto	l6258
  5582  00362E  0012               	return	
  5583  003630                     l6258:
  5584                           
  5585                           ; BSR set to: 0
  5586  003630  0E68               	movlw	104
  5587  003632  0100               	movlb	0	; () banked
  5588  003634  6FAE               	movwf	??_EEPROM_write& (0+255),b
  5589  003636  0EE4               	movlw	228
  5590  003638                     u7667:
  5591  003638  2EE8               	decfsz	wreg,f,c
  5592  00363A  D7FE               	bra	u7667
  5593  00363C  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  5594  00363E  D7FC               	bra	u7667
  5595  003640  F000               	nop	
  5596  003642  0100               	movlb	0	; () banked
  5597  003644  2BB0               	incf	EEPROM_write@i_1331& (0+255),f,b
  5598  003646  D7EF               	goto	l6254
  5599  003648                     __end_of_EEPROM_write:
  5600                           	opt stack 0
  5601                           tblptru	equ	0xFF8
  5602                           tblptrh	equ	0xFF7
  5603                           tblptrl	equ	0xFF6
  5604                           tablat	equ	0xFF5
  5605                           prodh	equ	0xFF4
  5606                           prodl	equ	0xFF3
  5607                           intcon	equ	0xFF2
  5608                           intcon2	equ	0xFF1
  5609                           intcon3	equ	0xFF0
  5610                           postinc0	equ	0xFEE
  5611                           wreg	equ	0xFE8
  5612                           postdec1	equ	0xFE5
  5613                           fsr1l	equ	0xFE1
  5614                           indf2	equ	0xFDF
  5615                           postinc2	equ	0xFDE
  5616                           postdec2	equ	0xFDD
  5617                           fsr2h	equ	0xFDA
  5618                           fsr2l	equ	0xFD9
  5619                           status	equ	0xFD8
  5620                           
  5621 ;; *************** function _EEPROM_read *****************
  5622 ;; Defined at:
  5623 ;;		line 68 in file "EEPROM.c"
  5624 ;; Parameters:    Size  Location     Type
  5625 ;;  address         2    0[BANK0 ] unsigned short 
  5626 ;; Auto vars:     Size  Location     Type
  5627 ;;		None
  5628 ;; Return value:  Size  Location     Type
  5629 ;;                  1    wreg      unsigned char 
  5630 ;; Registers used:
  5631 ;;		wreg, status,2
  5632 ;; Tracked objects:
  5633 ;;		On entry : 0/0
  5634 ;;		On exit  : 0/0
  5635 ;;		Unchanged: 0/0
  5636 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5637 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5638 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5639 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5640 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5641 ;;Total ram usage:        2 bytes
  5642 ;; Hardware stack levels used:    1
  5643 ;; Hardware stack levels required when called:    7
  5644 ;; This function calls:
  5645 ;;		Nothing
  5646 ;; This function is called by:
  5647 ;;		_Loading
  5648 ;;		_EEPROM_write
  5649 ;;		_logRun
  5650 ;; This function uses a non-reentrant model
  5651 ;;
  5652                           
  5653                           	psect	text15
  5654  0049FE                     __ptext15:
  5655                           	opt stack 0
  5656  0049FE                     _EEPROM_read:
  5657                           	opt stack 20
  5658                           
  5659                           ;EEPROM.c: 70: EEADRH = (unsigned char)(address >> 8);
  5660                           
  5661                           ;incstack = 0
  5662  0049FE  0100               	movlb	0	; () banked
  5663  004A00  5181               	movf	(EEPROM_read@address+1)& (0+255),w,b
  5664  004A02  6EAA               	movwf	4010,c	;volatile
  5665                           
  5666                           ; BSR set to: 0
  5667                           ;EEPROM.c: 71: EEADR = (unsigned char)address;
  5668  004A04  C080  FFA9         	movff	EEPROM_read@address,4009	;volatile
  5669                           
  5670                           ; BSR set to: 0
  5671                           ;EEPROM.c: 73: EECON1bits.EEPGD = 0;
  5672  004A08  9EA6               	bcf	4006,7,c	;volatile
  5673                           
  5674                           ; BSR set to: 0
  5675                           ;EEPROM.c: 74: EECON1bits.CFGS = 0;
  5676  004A0A  9CA6               	bcf	4006,6,c	;volatile
  5677                           
  5678                           ; BSR set to: 0
  5679                           ;EEPROM.c: 75: EECON1bits.RD = 1;
  5680  004A0C  80A6               	bsf	4006,0,c	;volatile
  5681  004A0E                     l958:
  5682  004A0E  B0A6               	btfsc	4006,0,c	;volatile
  5683  004A10  D7FE               	goto	l958
  5684                           
  5685                           ;EEPROM.c: 81: return EEDATA;
  5686  004A12  50A8               	movf	4008,w,c	;volatile
  5687  004A14  0012               	return	
  5688  004A16                     __end_of_EEPROM_read:
  5689                           	opt stack 0
  5690                           tblptru	equ	0xFF8
  5691                           tblptrh	equ	0xFF7
  5692                           tblptrl	equ	0xFF6
  5693                           tablat	equ	0xFF5
  5694                           prodh	equ	0xFF4
  5695                           prodl	equ	0xFF3
  5696                           intcon	equ	0xFF2
  5697                           intcon2	equ	0xFF1
  5698                           intcon3	equ	0xFF0
  5699                           postinc0	equ	0xFEE
  5700                           wreg	equ	0xFE8
  5701                           postdec1	equ	0xFE5
  5702                           fsr1l	equ	0xFE1
  5703                           indf2	equ	0xFDF
  5704                           postinc2	equ	0xFDE
  5705                           postdec2	equ	0xFDD
  5706                           fsr2h	equ	0xFDA
  5707                           fsr2l	equ	0xFD9
  5708                           status	equ	0xFD8
  5709                           
  5710 ;; *************** function _initUI *****************
  5711 ;; Defined at:
  5712 ;;		line 62 in file "UI.c"
  5713 ;; Parameters:    Size  Location     Type
  5714 ;;		None
  5715 ;; Auto vars:     Size  Location     Type
  5716 ;;		None
  5717 ;; Return value:  Size  Location     Type
  5718 ;;                  1    wreg      void 
  5719 ;; Registers used:
  5720 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5721 ;; Tracked objects:
  5722 ;;		On entry : 0/0
  5723 ;;		On exit  : 0/0
  5724 ;;		Unchanged: 0/0
  5725 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5726 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5727 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5728 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5729 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5730 ;;Total ram usage:        0 bytes
  5731 ;; Hardware stack levels used:    1
  5732 ;; Hardware stack levels required when called:   12
  5733 ;; This function calls:
  5734 ;;		_change_state_to_menu_start
  5735 ;;		_loadRTC
  5736 ;; This function is called by:
  5737 ;;		_main
  5738 ;; This function uses a non-reentrant model
  5739 ;;
  5740                           
  5741                           	psect	text16
  5742  0047D0                     __ptext16:
  5743                           	opt stack 0
  5744  0047D0                     _initUI:
  5745                           	opt stack 18
  5746                           
  5747                           ;UI.c: 63: (INTCONbits.GIE = 1);
  5748                           
  5749                           ;incstack = 0
  5750  0047D0  8EF2               	bsf	intcon,7,c	;volatile
  5751                           
  5752                           ;UI.c: 64: machine_state = UI_state;
  5753  0047D2  0E00               	movlw	0
  5754  0047D4  0100               	movlb	0	; () banked
  5755  0047D6  6FFC               	movwf	_machine_state& (0+255),b
  5756                           
  5757                           ;UI.c: 65: logstate = 0;
  5758  0047D8  0E00               	movlw	0
  5759  0047DA  0100               	movlb	0	; () banked
  5760  0047DC  6FF7               	movwf	(_logstate+1)& (0+255),b
  5761  0047DE  0E00               	movlw	0
  5762  0047E0  6FF6               	movwf	_logstate& (0+255),b
  5763                           
  5764                           ; BSR set to: 0
  5765                           ;UI.c: 67: if(RTCflag){
  5766  0047E2  0100               	movlb	0	; () banked
  5767  0047E4  51E2               	movf	_RTCflag& (0+255),w,b
  5768  0047E6  0100               	movlb	0	; () banked
  5769  0047E8  11E3               	iorwf	(_RTCflag+1)& (0+255),w,b
  5770  0047EA  A4D8               	btfss	status,2,c
  5771                           
  5772                           ; BSR set to: 0
  5773                           ;UI.c: 68: loadRTC();
  5774  0047EC  EC1B  F01E         	call	_loadRTC	;wreg free
  5775                           
  5776                           ;UI.c: 69: }
  5777                           ;UI.c: 71: change_state_to_menu_start();
  5778  0047F0  EC2D  F024         	call	_change_state_to_menu_start	;wreg free
  5779                           
  5780                           ;UI.c: 72: firstboot = 1;
  5781  0047F4  0E00               	movlw	0
  5782  0047F6  6E72               	movwf	_firstboot+1,c
  5783  0047F8  0E01               	movlw	1
  5784  0047FA  6E71               	movwf	_firstboot,c
  5785  0047FC  0012               	return		;funcret
  5786  0047FE                     __end_of_initUI:
  5787                           	opt stack 0
  5788                           tblptru	equ	0xFF8
  5789                           tblptrh	equ	0xFF7
  5790                           tblptrl	equ	0xFF6
  5791                           tablat	equ	0xFF5
  5792                           prodh	equ	0xFF4
  5793                           prodl	equ	0xFF3
  5794                           intcon	equ	0xFF2
  5795                           intcon2	equ	0xFF1
  5796                           intcon3	equ	0xFF0
  5797                           postinc0	equ	0xFEE
  5798                           wreg	equ	0xFE8
  5799                           postdec1	equ	0xFE5
  5800                           fsr1l	equ	0xFE1
  5801                           indf2	equ	0xFDF
  5802                           postinc2	equ	0xFDE
  5803                           postdec2	equ	0xFDD
  5804                           fsr2h	equ	0xFDA
  5805                           fsr2l	equ	0xFD9
  5806                           status	equ	0xFD8
  5807                           
  5808 ;; *************** function _loadRTC *****************
  5809 ;; Defined at:
  5810 ;;		line 28 in file "RTC.c"
  5811 ;; Parameters:    Size  Location     Type
  5812 ;;		None
  5813 ;; Auto vars:     Size  Location     Type
  5814 ;;  i               2   22[BANK0 ] int 
  5815 ;; Return value:  Size  Location     Type
  5816 ;;                  1    wreg      void 
  5817 ;; Registers used:
  5818 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5819 ;; Tracked objects:
  5820 ;;		On entry : 0/0
  5821 ;;		On exit  : 0/0
  5822 ;;		Unchanged: 0/0
  5823 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5824 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5825 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5826 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5827 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5828 ;;Total ram usage:        3 bytes
  5829 ;; Hardware stack levels used:    1
  5830 ;; Hardware stack levels required when called:    9
  5831 ;; This function calls:
  5832 ;;		_I2C_Master_Init
  5833 ;;		_I2C_Master_Start
  5834 ;;		_I2C_Master_Stop
  5835 ;;		_I2C_Master_Write
  5836 ;; This function is called by:
  5837 ;;		_initUI
  5838 ;; This function uses a non-reentrant model
  5839 ;;
  5840                           
  5841                           	psect	text17
  5842  003C36                     __ptext17:
  5843                           	opt stack 0
  5844  003C36                     _loadRTC:
  5845                           	opt stack 20
  5846                           
  5847                           ;RTC.c: 30: I2C_Master_Init(10000);
  5848                           
  5849                           ;incstack = 0
  5850  003C36  0E10               	movlw	16
  5851  003C38  0100               	movlb	0	; () banked
  5852  003C3A  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  5853  003C3C  0E27               	movlw	39
  5854  003C3E  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  5855  003C40  0E00               	movlw	0
  5856  003C42  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  5857  003C44  0E00               	movlw	0
  5858  003C46  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  5859  003C48  ECAC  F020         	call	_I2C_Master_Init	;wreg free
  5860                           
  5861                           ;RTC.c: 32: (INTCONbits.GIE = 0);
  5862  003C4C  9EF2               	bcf	intcon,7,c	;volatile
  5863                           
  5864                           ;RTC.c: 34: I2C_Master_Start();
  5865  003C4E  EC62  F025         	call	_I2C_Master_Start	;wreg free
  5866                           
  5867                           ;RTC.c: 35: I2C_Master_Write(0b11010000);
  5868  003C52  0E00               	movlw	0
  5869  003C54  0100               	movlb	0	; () banked
  5870  003C56  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5871  003C58  0ED0               	movlw	208
  5872  003C5A  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  5873  003C5C  EC50  F025         	call	_I2C_Master_Write	;wreg free
  5874                           
  5875                           ;RTC.c: 36: I2C_Master_Write(0x00);
  5876  003C60  0E00               	movlw	0
  5877  003C62  0100               	movlb	0	; () banked
  5878  003C64  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5879  003C66  0E00               	movlw	0
  5880  003C68  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  5881  003C6A  EC50  F025         	call	_I2C_Master_Write	;wreg free
  5882                           
  5883                           ;RTC.c: 37: for(int i = 0; i<7; i++){
  5884  003C6E  0E00               	movlw	0
  5885  003C70  0100               	movlb	0	; () banked
  5886  003C72  6F97               	movwf	(loadRTC@i+1)& (0+255),b
  5887  003C74  0E00               	movlw	0
  5888  003C76  6F96               	movwf	loadRTC@i& (0+255),b
  5889  003C78                     l6396:
  5890                           
  5891                           ; BSR set to: 0
  5892  003C78  0100               	movlb	0	; () banked
  5893  003C7A  BF97               	btfsc	(loadRTC@i+1)& (0+255),7,b
  5894  003C7C  D008               	goto	l6400
  5895  003C7E  0100               	movlb	0	; () banked
  5896  003C80  5197               	movf	(loadRTC@i+1)& (0+255),w,b
  5897  003C82  E11B               	bnz	l6406
  5898  003C84  0E07               	movlw	7
  5899  003C86  0100               	movlb	0	; () banked
  5900  003C88  5D96               	subwf	loadRTC@i& (0+255),w,b
  5901  003C8A  B0D8               	btfsc	status,0,c
  5902  003C8C  D016               	goto	l6406
  5903  003C8E                     l6400:
  5904                           
  5905                           ; BSR set to: 0
  5906                           ;RTC.c: 38: I2C_Master_Write(time[i]);
  5907  003C8E  0E24               	movlw	low _time
  5908  003C90  0100               	movlb	0	; () banked
  5909  003C92  2596               	addwf	loadRTC@i& (0+255),w,b
  5910  003C94  6ED9               	movwf	fsr2l,c
  5911  003C96  0E01               	movlw	high _time
  5912  003C98  0100               	movlb	0	; () banked
  5913  003C9A  2197               	addwfc	(loadRTC@i+1)& (0+255),w,b
  5914  003C9C  6EDA               	movwf	fsr2h,c
  5915  003C9E  50DF               	movf	indf2,w,c
  5916  003CA0  0100               	movlb	0	; () banked
  5917  003CA2  6F95               	movwf	??_loadRTC& (0+255),b
  5918  003CA4  0100               	movlb	0	; () banked
  5919  003CA6  5195               	movf	??_loadRTC& (0+255),w,b
  5920  003CA8  0100               	movlb	0	; () banked
  5921  003CAA  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  5922  003CAC  6B82               	clrf	(I2C_Master_Write@d+1)& (0+255),b
  5923  003CAE  EC50  F025         	call	_I2C_Master_Write	;wreg free
  5924  003CB2  0100               	movlb	0	; () banked
  5925  003CB4  4B96               	infsnz	loadRTC@i& (0+255),f,b
  5926  003CB6  2B97               	incf	(loadRTC@i+1)& (0+255),f,b
  5927  003CB8  D7DF               	goto	l6396
  5928  003CBA                     l6406:
  5929                           
  5930                           ; BSR set to: 0
  5931                           ;RTC.c: 39: }
  5932                           ;RTC.c: 40: I2C_Master_Stop();
  5933  003CBA  EC5E  F025         	call	_I2C_Master_Stop	;wreg free
  5934                           
  5935                           ;RTC.c: 41: (INTCONbits.GIE = 1);
  5936  003CBE  8EF2               	bsf	intcon,7,c	;volatile
  5937  003CC0  0012               	return		;funcret
  5938  003CC2                     __end_of_loadRTC:
  5939                           	opt stack 0
  5940                           tblptru	equ	0xFF8
  5941                           tblptrh	equ	0xFF7
  5942                           tblptrl	equ	0xFF6
  5943                           tablat	equ	0xFF5
  5944                           prodh	equ	0xFF4
  5945                           prodl	equ	0xFF3
  5946                           intcon	equ	0xFF2
  5947                           intcon2	equ	0xFF1
  5948                           intcon3	equ	0xFF0
  5949                           postinc0	equ	0xFEE
  5950                           wreg	equ	0xFE8
  5951                           postdec1	equ	0xFE5
  5952                           fsr1l	equ	0xFE1
  5953                           indf2	equ	0xFDF
  5954                           postinc2	equ	0xFDE
  5955                           postdec2	equ	0xFDD
  5956                           fsr2h	equ	0xFDA
  5957                           fsr2l	equ	0xFD9
  5958                           status	equ	0xFD8
  5959                           
  5960 ;; *************** function _I2C_Master_Init *****************
  5961 ;; Defined at:
  5962 ;;		line 15 in file "I2C.c"
  5963 ;; Parameters:    Size  Location     Type
  5964 ;;  c               4   13[BANK0 ] const unsigned long 
  5965 ;; Auto vars:     Size  Location     Type
  5966 ;;		None
  5967 ;; Return value:  Size  Location     Type
  5968 ;;                  1    wreg      void 
  5969 ;; Registers used:
  5970 ;;		wreg, status,2, status,0, cstack
  5971 ;; Tracked objects:
  5972 ;;		On entry : 0/0
  5973 ;;		On exit  : 0/0
  5974 ;;		Unchanged: 0/0
  5975 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5976 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5977 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5978 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5979 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5980 ;;Total ram usage:        8 bytes
  5981 ;; Hardware stack levels used:    1
  5982 ;; Hardware stack levels required when called:    8
  5983 ;; This function calls:
  5984 ;;		___lldiv
  5985 ;; This function is called by:
  5986 ;;		_main
  5987 ;;		_loadRTC
  5988 ;; This function uses a non-reentrant model
  5989 ;;
  5990                           
  5991                           	psect	text18
  5992  004158                     __ptext18:
  5993                           	opt stack 0
  5994  004158                     _I2C_Master_Init:
  5995                           	opt stack 20
  5996                           
  5997                           ;I2C.c: 18: SSPSTAT = 0b00000000;
  5998                           
  5999                           ;incstack = 0
  6000  004158  0E00               	movlw	0
  6001  00415A  6EC7               	movwf	4039,c	;volatile
  6002                           
  6003                           ;I2C.c: 19: SSPCON1 = 0b00101000;
  6004  00415C  0E28               	movlw	40
  6005  00415E  6EC6               	movwf	4038,c	;volatile
  6006                           
  6007                           ;I2C.c: 20: SSPCON2 = 0b00000000;
  6008  004160  0E00               	movlw	0
  6009  004162  6EC5               	movwf	4037,c	;volatile
  6010                           
  6011                           ;I2C.c: 21: SSPADD = (32000000/(4*c))-1;
  6012  004164  0E00               	movlw	0
  6013  004166  0100               	movlb	0	; () banked
  6014  004168  6F80               	movwf	___lldiv@dividend& (0+255),b
  6015  00416A  0E48               	movlw	72
  6016  00416C  6F81               	movwf	(___lldiv@dividend+1)& (0+255),b
  6017  00416E  0EE8               	movlw	232
  6018  004170  6F82               	movwf	(___lldiv@dividend+2)& (0+255),b
  6019  004172  0E01               	movlw	1
  6020  004174  6F83               	movwf	(___lldiv@dividend+3)& (0+255),b
  6021  004176  C08D  F091         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  6022  00417A  C08E  F092         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  6023  00417E  C08F  F093         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  6024  004182  C090  F094         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  6025  004186  0E02               	movlw	2
  6026  004188                     u4675:
  6027  004188  90D8               	bcf	status,0,c
  6028  00418A  0100               	movlb	0	; () banked
  6029  00418C  3791               	rlcf	??_I2C_Master_Init& (0+255),f,b
  6030  00418E  3792               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
  6031  004190  3793               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
  6032  004192  3794               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
  6033  004194  2EE8               	decfsz	wreg,f,c
  6034  004196  D7F8               	goto	u4675
  6035  004198  C091  F084         	movff	??_I2C_Master_Init,___lldiv@divisor
  6036  00419C  C092  F085         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  6037  0041A0  C093  F086         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  6038  0041A4  C094  F087         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  6039  0041A8  EC17  F01D         	call	___lldiv	;wreg free
  6040  0041AC  0100               	movlb	0	; () banked
  6041  0041AE  0580               	decf	?___lldiv& (0+255),w,b
  6042  0041B0  6EC8               	movwf	4040,c	;volatile
  6043                           
  6044                           ; BSR set to: 0
  6045                           ;I2C.c: 22: TRISC3 = 1;
  6046  0041B2  8694               	bsf	3988,3,c	;volatile
  6047                           
  6048                           ; BSR set to: 0
  6049                           ;I2C.c: 23: TRISC4 = 1;
  6050  0041B4  8894               	bsf	3988,4,c	;volatile
  6051                           
  6052                           ; BSR set to: 0
  6053  0041B6  0012               	return		;funcret
  6054  0041B8                     __end_of_I2C_Master_Init:
  6055                           	opt stack 0
  6056                           tblptru	equ	0xFF8
  6057                           tblptrh	equ	0xFF7
  6058                           tblptrl	equ	0xFF6
  6059                           tablat	equ	0xFF5
  6060                           prodh	equ	0xFF4
  6061                           prodl	equ	0xFF3
  6062                           intcon	equ	0xFF2
  6063                           intcon2	equ	0xFF1
  6064                           intcon3	equ	0xFF0
  6065                           postinc0	equ	0xFEE
  6066                           wreg	equ	0xFE8
  6067                           postdec1	equ	0xFE5
  6068                           fsr1l	equ	0xFE1
  6069                           indf2	equ	0xFDF
  6070                           postinc2	equ	0xFDE
  6071                           postdec2	equ	0xFDD
  6072                           fsr2h	equ	0xFDA
  6073                           fsr2l	equ	0xFD9
  6074                           status	equ	0xFD8
  6075                           
  6076 ;; *************** function ___lldiv *****************
  6077 ;; Defined at:
  6078 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  6079 ;; Parameters:    Size  Location     Type
  6080 ;;  dividend        4    0[BANK0 ] unsigned long 
  6081 ;;  divisor         4    4[BANK0 ] unsigned long 
  6082 ;; Auto vars:     Size  Location     Type
  6083 ;;  quotient        4    8[BANK0 ] unsigned long 
  6084 ;;  counter         1   12[BANK0 ] unsigned char 
  6085 ;; Return value:  Size  Location     Type
  6086 ;;                  4    0[BANK0 ] unsigned long 
  6087 ;; Registers used:
  6088 ;;		wreg, status,2, status,0
  6089 ;; Tracked objects:
  6090 ;;		On entry : 0/0
  6091 ;;		On exit  : 0/0
  6092 ;;		Unchanged: 0/0
  6093 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6094 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6095 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6096 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6097 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6098 ;;Total ram usage:       13 bytes
  6099 ;; Hardware stack levels used:    1
  6100 ;; Hardware stack levels required when called:    7
  6101 ;; This function calls:
  6102 ;;		Nothing
  6103 ;; This function is called by:
  6104 ;;		_I2C_Master_Init
  6105 ;; This function uses a non-reentrant model
  6106 ;;
  6107                           
  6108                           	psect	text19
  6109  003A2E                     __ptext19:
  6110                           	opt stack 0
  6111  003A2E                     ___lldiv:
  6112                           	opt stack 20
  6113                           
  6114                           ; BSR set to: 0
  6115                           ;incstack = 0
  6116  003A2E  0E00               	movlw	0
  6117  003A30  0100               	movlb	0	; () banked
  6118  003A32  6F88               	movwf	___lldiv@quotient& (0+255),b
  6119  003A34  0E00               	movlw	0
  6120  003A36  6F89               	movwf	(___lldiv@quotient+1)& (0+255),b
  6121  003A38  0E00               	movlw	0
  6122  003A3A  6F8A               	movwf	(___lldiv@quotient+2)& (0+255),b
  6123  003A3C  0E00               	movlw	0
  6124  003A3E  6F8B               	movwf	(___lldiv@quotient+3)& (0+255),b
  6125                           
  6126                           ; BSR set to: 0
  6127  003A40  0100               	movlb	0	; () banked
  6128  003A42  5184               	movf	___lldiv@divisor& (0+255),w,b
  6129  003A44  0100               	movlb	0	; () banked
  6130  003A46  1185               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  6131  003A48  0100               	movlb	0	; () banked
  6132  003A4A  1186               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  6133  003A4C  0100               	movlb	0	; () banked
  6134  003A4E  1187               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  6135  003A50  B4D8               	btfsc	status,2,c
  6136  003A52  D042               	goto	l1710
  6137                           
  6138                           ; BSR set to: 0
  6139  003A54  0E01               	movlw	1
  6140  003A56  0100               	movlb	0	; () banked
  6141  003A58  6F8C               	movwf	___lldiv@counter& (0+255),b
  6142  003A5A  D008               	goto	l5820
  6143  003A5C                     l5818:
  6144                           
  6145                           ; BSR set to: 0
  6146  003A5C  0100               	movlb	0	; () banked
  6147  003A5E  90D8               	bcf	status,0,c
  6148  003A60  3784               	rlcf	___lldiv@divisor& (0+255),f,b
  6149  003A62  3785               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  6150  003A64  3786               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  6151  003A66  3787               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  6152  003A68  0100               	movlb	0	; () banked
  6153  003A6A  2B8C               	incf	___lldiv@counter& (0+255),f,b
  6154  003A6C                     l5820:
  6155                           
  6156                           ; BSR set to: 0
  6157  003A6C  0100               	movlb	0	; () banked
  6158  003A6E  AF87               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  6159  003A70  D7F5               	goto	l5818
  6160  003A72                     l5822:
  6161                           
  6162                           ; BSR set to: 0
  6163  003A72  0100               	movlb	0	; () banked
  6164  003A74  90D8               	bcf	status,0,c
  6165  003A76  3788               	rlcf	___lldiv@quotient& (0+255),f,b
  6166  003A78  3789               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  6167  003A7A  378A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  6168  003A7C  378B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  6169                           
  6170                           ; BSR set to: 0
  6171  003A7E  0100               	movlb	0	; () banked
  6172  003A80  5184               	movf	___lldiv@divisor& (0+255),w,b
  6173  003A82  0100               	movlb	0	; () banked
  6174  003A84  5D80               	subwf	___lldiv@dividend& (0+255),w,b
  6175  003A86  0100               	movlb	0	; () banked
  6176  003A88  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  6177  003A8A  0100               	movlb	0	; () banked
  6178  003A8C  5981               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  6179  003A8E  0100               	movlb	0	; () banked
  6180  003A90  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  6181  003A92  0100               	movlb	0	; () banked
  6182  003A94  5982               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  6183  003A96  0100               	movlb	0	; () banked
  6184  003A98  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  6185  003A9A  0100               	movlb	0	; () banked
  6186  003A9C  5983               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  6187  003A9E  A0D8               	btfss	status,0,c
  6188  003AA0  D012               	goto	l5830
  6189                           
  6190                           ; BSR set to: 0
  6191  003AA2  0100               	movlb	0	; () banked
  6192  003AA4  5184               	movf	___lldiv@divisor& (0+255),w,b
  6193  003AA6  0100               	movlb	0	; () banked
  6194  003AA8  5F80               	subwf	___lldiv@dividend& (0+255),f,b
  6195  003AAA  0100               	movlb	0	; () banked
  6196  003AAC  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  6197  003AAE  0100               	movlb	0	; () banked
  6198  003AB0  5B81               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  6199  003AB2  0100               	movlb	0	; () banked
  6200  003AB4  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  6201  003AB6  0100               	movlb	0	; () banked
  6202  003AB8  5B82               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  6203  003ABA  0100               	movlb	0	; () banked
  6204  003ABC  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  6205  003ABE  0100               	movlb	0	; () banked
  6206  003AC0  5B83               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  6207                           
  6208                           ; BSR set to: 0
  6209  003AC2  0100               	movlb	0	; () banked
  6210  003AC4  8188               	bsf	___lldiv@quotient& (0+255),0,b
  6211  003AC6                     l5830:
  6212                           
  6213                           ; BSR set to: 0
  6214  003AC6  0100               	movlb	0	; () banked
  6215  003AC8  90D8               	bcf	status,0,c
  6216  003ACA  3387               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  6217  003ACC  3386               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  6218  003ACE  3385               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  6219  003AD0  3384               	rrcf	___lldiv@divisor& (0+255),f,b
  6220                           
  6221                           ; BSR set to: 0
  6222  003AD2  0100               	movlb	0	; () banked
  6223  003AD4  2F8C               	decfsz	___lldiv@counter& (0+255),f,b
  6224  003AD6  D7CD               	goto	l5822
  6225  003AD8                     l1710:
  6226                           
  6227                           ; BSR set to: 0
  6228  003AD8  C088  F080         	movff	___lldiv@quotient,?___lldiv
  6229  003ADC  C089  F081         	movff	___lldiv@quotient+1,?___lldiv+1
  6230  003AE0  C08A  F082         	movff	___lldiv@quotient+2,?___lldiv+2
  6231  003AE4  C08B  F083         	movff	___lldiv@quotient+3,?___lldiv+3
  6232                           
  6233                           ; BSR set to: 0
  6234  003AE8  0012               	return		;funcret
  6235  003AEA                     __end_of___lldiv:
  6236                           	opt stack 0
  6237                           tblptru	equ	0xFF8
  6238                           tblptrh	equ	0xFF7
  6239                           tblptrl	equ	0xFF6
  6240                           tablat	equ	0xFF5
  6241                           prodh	equ	0xFF4
  6242                           prodl	equ	0xFF3
  6243                           intcon	equ	0xFF2
  6244                           intcon2	equ	0xFF1
  6245                           intcon3	equ	0xFF0
  6246                           postinc0	equ	0xFEE
  6247                           wreg	equ	0xFE8
  6248                           postdec1	equ	0xFE5
  6249                           fsr1l	equ	0xFE1
  6250                           indf2	equ	0xFDF
  6251                           postinc2	equ	0xFDE
  6252                           postdec2	equ	0xFDD
  6253                           fsr2h	equ	0xFDA
  6254                           fsr2l	equ	0xFD9
  6255                           status	equ	0xFD8
  6256                           
  6257 ;; *************** function _change_state_to_menu_start *****************
  6258 ;; Defined at:
  6259 ;;		line 474 in file "UI.c"
  6260 ;; Parameters:    Size  Location     Type
  6261 ;;		None
  6262 ;; Auto vars:     Size  Location     Type
  6263 ;;		None
  6264 ;; Return value:  Size  Location     Type
  6265 ;;                  1    wreg      void 
  6266 ;; Registers used:
  6267 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6268 ;; Tracked objects:
  6269 ;;		On entry : 0/0
  6270 ;;		On exit  : 0/0
  6271 ;;		Unchanged: 0/0
  6272 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6273 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6274 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6275 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6276 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6277 ;;Total ram usage:        0 bytes
  6278 ;; Hardware stack levels used:    1
  6279 ;; Hardware stack levels required when called:   11
  6280 ;; This function calls:
  6281 ;;		_lcdInst
  6282 ;;		_printRTC
  6283 ;;		_printf
  6284 ;; This function is called by:
  6285 ;;		_initUI
  6286 ;; This function uses a non-reentrant model
  6287 ;;
  6288                           
  6289                           	psect	text20
  6290  00485A                     __ptext20:
  6291                           	opt stack 0
  6292  00485A                     _change_state_to_menu_start:
  6293                           	opt stack 18
  6294                           
  6295                           ;UI.c: 475: cur_state = 0;
  6296                           
  6297                           ; BSR set to: 0
  6298                           ;incstack = 0
  6299  00485A  0E00               	movlw	0
  6300  00485C  0100               	movlb	0	; () banked
  6301  00485E  6FE7               	movwf	(_cur_state+1)& (0+255),b
  6302  004860  0E00               	movlw	0
  6303  004862  6FE6               	movwf	_cur_state& (0+255),b
  6304                           
  6305                           ; BSR set to: 0
  6306                           ;UI.c: 477: lcdInst(0b10000000);;
  6307  004864  0E80               	movlw	128
  6308  004866  EC3C  F025         	call	_lcdInst
  6309                           
  6310                           ;UI.c: 478: printRTC();
  6311  00486A  ECCC  F00F         	call	_printRTC	;wreg free
  6312                           
  6313                           ;UI.c: 479: lcdInst(0b11000000);;
  6314  00486E  0EC0               	movlw	192
  6315  004870  EC3C  F025         	call	_lcdInst
  6316                           
  6317                           ;UI.c: 480: printf("PUSH TO CONTINUE");
  6318  004874  0EF7               	movlw	low STR_30
  6319  004876  0100               	movlb	0	; () banked
  6320  004878  6F8E               	movwf	printf@f& (0+255),b
  6321  00487A  0EFD               	movlw	high STR_30
  6322  00487C  0100               	movlb	0	; () banked
  6323  00487E  6F8F               	movwf	(printf@f+1)& (0+255),b
  6324  004880  ECB8  F008         	call	_printf	;wreg free
  6325  004884  0012               	return		;funcret
  6326  004886                     __end_of_change_state_to_menu_start:
  6327                           	opt stack 0
  6328                           tblptru	equ	0xFF8
  6329                           tblptrh	equ	0xFF7
  6330                           tblptrl	equ	0xFF6
  6331                           tablat	equ	0xFF5
  6332                           prodh	equ	0xFF4
  6333                           prodl	equ	0xFF3
  6334                           intcon	equ	0xFF2
  6335                           intcon2	equ	0xFF1
  6336                           intcon3	equ	0xFF0
  6337                           postinc0	equ	0xFEE
  6338                           wreg	equ	0xFE8
  6339                           postdec1	equ	0xFE5
  6340                           fsr1l	equ	0xFE1
  6341                           indf2	equ	0xFDF
  6342                           postinc2	equ	0xFDE
  6343                           postdec2	equ	0xFDD
  6344                           fsr2h	equ	0xFDA
  6345                           fsr2l	equ	0xFD9
  6346                           status	equ	0xFD8
  6347                           
  6348 ;; *************** function _initTime *****************
  6349 ;; Defined at:
  6350 ;;		line 17 in file "RTC.c"
  6351 ;; Parameters:    Size  Location     Type
  6352 ;;  s               1    wreg     unsigned char 
  6353 ;;  m               1    0[BANK0 ] unsigned char 
  6354 ;;  h               1    1[BANK0 ] unsigned char 
  6355 ;;  w               1    2[BANK0 ] unsigned char 
  6356 ;;  DD              1    3[BANK0 ] unsigned char 
  6357 ;;  MM              1    4[BANK0 ] unsigned char 
  6358 ;;  YY              1    5[BANK0 ] unsigned char 
  6359 ;; Auto vars:     Size  Location     Type
  6360 ;;  s               1    6[BANK0 ] unsigned char 
  6361 ;; Return value:  Size  Location     Type
  6362 ;;                  1    wreg      void 
  6363 ;; Registers used:
  6364 ;;		wreg
  6365 ;; Tracked objects:
  6366 ;;		On entry : 0/0
  6367 ;;		On exit  : 0/0
  6368 ;;		Unchanged: 0/0
  6369 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6370 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6371 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6372 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6373 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6374 ;;Total ram usage:        7 bytes
  6375 ;; Hardware stack levels used:    1
  6376 ;; Hardware stack levels required when called:    7
  6377 ;; This function calls:
  6378 ;;		Nothing
  6379 ;; This function is called by:
  6380 ;;		_main
  6381 ;; This function uses a non-reentrant model
  6382 ;;
  6383                           
  6384                           	psect	text21
  6385  0049BE                     __ptext21:
  6386                           	opt stack 0
  6387  0049BE                     _initTime:
  6388                           	opt stack 23
  6389                           
  6390                           ;incstack = 0
  6391                           ;initTime@s stored from wreg
  6392  0049BE  0100               	movlb	0	; () banked
  6393  0049C0  6F86               	movwf	initTime@s& (0+255),b
  6394                           
  6395                           ;RTC.c: 19: time[0] = s;
  6396  0049C2  C086  F124         	movff	initTime@s,_time
  6397                           
  6398                           ;RTC.c: 20: time[1] = m;
  6399  0049C6  C080  F125         	movff	initTime@m,_time+1
  6400                           
  6401                           ;RTC.c: 21: time[2] = h;
  6402  0049CA  C081  F126         	movff	initTime@h,_time+2
  6403                           
  6404                           ;RTC.c: 22: time[3] = w;
  6405  0049CE  C082  F127         	movff	initTime@w,_time+3
  6406                           
  6407                           ;RTC.c: 23: time[4] = DD;
  6408  0049D2  C083  F128         	movff	initTime@DD,_time+4
  6409                           
  6410                           ;RTC.c: 24: time[5] = MM;
  6411  0049D6  C084  F129         	movff	initTime@MM,_time+5
  6412                           
  6413                           ;RTC.c: 25: time[6] = YY;
  6414  0049DA  C085  F12A         	movff	initTime@YY,_time+6
  6415  0049DE  0012               	return		;funcret
  6416  0049E0                     __end_of_initTime:
  6417                           	opt stack 0
  6418                           tblptru	equ	0xFF8
  6419                           tblptrh	equ	0xFF7
  6420                           tblptrl	equ	0xFF6
  6421                           tablat	equ	0xFF5
  6422                           prodh	equ	0xFF4
  6423                           prodl	equ	0xFF3
  6424                           intcon	equ	0xFF2
  6425                           intcon2	equ	0xFF1
  6426                           intcon3	equ	0xFF0
  6427                           postinc0	equ	0xFEE
  6428                           wreg	equ	0xFE8
  6429                           postdec1	equ	0xFE5
  6430                           fsr1l	equ	0xFE1
  6431                           indf2	equ	0xFDF
  6432                           postinc2	equ	0xFDE
  6433                           postdec2	equ	0xFDD
  6434                           fsr2h	equ	0xFDA
  6435                           fsr2l	equ	0xFD9
  6436                           status	equ	0xFD8
  6437                           
  6438 ;; *************** function _initLCD *****************
  6439 ;; Defined at:
  6440 ;;		line 48 in file "lcd.c"
  6441 ;; Parameters:    Size  Location     Type
  6442 ;;		None
  6443 ;; Auto vars:     Size  Location     Type
  6444 ;;		None
  6445 ;; Return value:  Size  Location     Type
  6446 ;;                  1    wreg      void 
  6447 ;; Registers used:
  6448 ;;		wreg, status,2, status,0, cstack
  6449 ;; Tracked objects:
  6450 ;;		On entry : 0/0
  6451 ;;		On exit  : 0/0
  6452 ;;		Unchanged: 0/0
  6453 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6454 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6455 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6456 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6457 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6458 ;;Total ram usage:        1 bytes
  6459 ;; Hardware stack levels used:    1
  6460 ;; Hardware stack levels required when called:    9
  6461 ;; This function calls:
  6462 ;;		_lcdInst
  6463 ;; This function is called by:
  6464 ;;		_main
  6465 ;; This function uses a non-reentrant model
  6466 ;;
  6467                           
  6468                           	psect	text22
  6469  004458                     __ptext22:
  6470                           	opt stack 0
  6471  004458                     _initLCD:
  6472                           	opt stack 21
  6473                           
  6474                           ;lcd.c: 49: _delay((unsigned long)((15)*(32000000/4000.0)));
  6475                           
  6476                           ;incstack = 0
  6477  004458  0E9C               	movlw	156
  6478  00445A  0100               	movlb	0	; () banked
  6479  00445C  6F83               	movwf	??_initLCD& (0+255),b
  6480  00445E  0ED7               	movlw	215
  6481  004460                     u7677:
  6482  004460  2EE8               	decfsz	wreg,f,c
  6483  004462  D7FE               	bra	u7677
  6484  004464  2F83               	decfsz	??_initLCD& (0+255),f,b
  6485  004466  D7FC               	bra	u7677
  6486                           
  6487                           ;lcd.c: 50: lcdInst(0b00110011);
  6488  004468  0E33               	movlw	51
  6489  00446A  EC3C  F025         	call	_lcdInst
  6490                           
  6491                           ;lcd.c: 51: lcdInst(0b00110010);
  6492  00446E  0E32               	movlw	50
  6493  004470  EC3C  F025         	call	_lcdInst
  6494                           
  6495                           ;lcd.c: 53: lcdInst(0b00101000);
  6496  004474  0E28               	movlw	40
  6497  004476  EC3C  F025         	call	_lcdInst
  6498                           
  6499                           ;lcd.c: 54: lcdInst(0b00001100);
  6500  00447A  0E0C               	movlw	12
  6501  00447C  EC3C  F025         	call	_lcdInst
  6502                           
  6503                           ;lcd.c: 55: lcdInst(0b00000110);
  6504  004480  0E06               	movlw	6
  6505  004482  EC3C  F025         	call	_lcdInst
  6506                           
  6507                           ;lcd.c: 56: lcdInst(0b00000001);
  6508  004486  0E01               	movlw	1
  6509  004488  EC3C  F025         	call	_lcdInst
  6510                           
  6511                           ;lcd.c: 57: _delay((unsigned long)((15)*(32000000/4000.0)));
  6512  00448C  0E9C               	movlw	156
  6513  00448E  0100               	movlb	0	; () banked
  6514  004490  6F83               	movwf	??_initLCD& (0+255),b
  6515  004492  0ED7               	movlw	215
  6516  004494                     u7687:
  6517  004494  2EE8               	decfsz	wreg,f,c
  6518  004496  D7FE               	bra	u7687
  6519  004498  2F83               	decfsz	??_initLCD& (0+255),f,b
  6520  00449A  D7FC               	bra	u7687
  6521  00449C  0012               	return		;funcret
  6522  00449E                     __end_of_initLCD:
  6523                           	opt stack 0
  6524                           tblptru	equ	0xFF8
  6525                           tblptrh	equ	0xFF7
  6526                           tblptrl	equ	0xFF6
  6527                           tablat	equ	0xFF5
  6528                           prodh	equ	0xFF4
  6529                           prodl	equ	0xFF3
  6530                           intcon	equ	0xFF2
  6531                           intcon2	equ	0xFF1
  6532                           intcon3	equ	0xFF0
  6533                           postinc0	equ	0xFEE
  6534                           wreg	equ	0xFE8
  6535                           postdec1	equ	0xFE5
  6536                           fsr1l	equ	0xFE1
  6537                           indf2	equ	0xFDF
  6538                           postinc2	equ	0xFDE
  6539                           postdec2	equ	0xFDD
  6540                           fsr2h	equ	0xFDA
  6541                           fsr2l	equ	0xFD9
  6542                           status	equ	0xFD8
  6543                           
  6544 ;; *************** function _UI *****************
  6545 ;; Defined at:
  6546 ;;		line 76 in file "UI.c"
  6547 ;; Parameters:    Size  Location     Type
  6548 ;;		None
  6549 ;; Auto vars:     Size  Location     Type
  6550 ;;  i               1   73[BANK0 ] unsigned char 
  6551 ;;  i               1   85[BANK0 ] unsigned char 
  6552 ;;  i               1   84[BANK0 ] unsigned char 
  6553 ;;  i               1   83[BANK0 ] unsigned char 
  6554 ;;  i               1   82[BANK0 ] unsigned char 
  6555 ;;  i               1   81[BANK0 ] unsigned char 
  6556 ;;  i               1   80[BANK0 ] unsigned char 
  6557 ;;  i               1   79[BANK0 ] unsigned char 
  6558 ;;  i               1   78[BANK0 ] unsigned char 
  6559 ;;  i               1   77[BANK0 ] unsigned char 
  6560 ;;  i               1   76[BANK0 ] unsigned char 
  6561 ;;  i               1   75[BANK0 ] unsigned char 
  6562 ;;  i               1   74[BANK0 ] unsigned char 
  6563 ;;  month           4   86[BANK0 ] unsigned char [4]
  6564 ;;  i               1   72[BANK0 ] unsigned char 
  6565 ;; Return value:  Size  Location     Type
  6566 ;;                  1    wreg      void 
  6567 ;; Registers used:
  6568 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6569 ;; Tracked objects:
  6570 ;;		On entry : 0/0
  6571 ;;		On exit  : 0/0
  6572 ;;		Unchanged: 0/0
  6573 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6574 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6575 ;;      Locals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6576 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6577 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6578 ;;Total ram usage:       22 bytes
  6579 ;; Hardware stack levels used:    1
  6580 ;; Hardware stack levels required when called:   11
  6581 ;; This function calls:
  6582 ;;		___awdiv
  6583 ;;		___awmod
  6584 ;;		_change_state_to_menu_12
  6585 ;;		_change_state_to_menu_22
  6586 ;;		_lcdInst
  6587 ;;		_printRTC
  6588 ;;		_printf
  6589 ;;		_strcpy
  6590 ;; This function is called by:
  6591 ;;		_main
  6592 ;; This function uses a non-reentrant model
  6593 ;;
  6594                           
  6595                           	psect	text23
  6596  0008CA                     __ptext23:
  6597                           	opt stack 0
  6598  0008CA                     _UI:
  6599                           	opt stack 19
  6600                           
  6601                           ;UI.c: 77: if(machine_state == DoneSorting_state){
  6602                           
  6603                           ;incstack = 0
  6604  0008CA  0E02               	movlw	2
  6605  0008CC  0100               	movlb	0	; () banked
  6606  0008CE  19FC               	xorwf	_machine_state& (0+255),w,b
  6607  0008D0  A4D8               	btfss	status,2,c
  6608  0008D2  D075               	goto	l7696
  6609                           
  6610                           ; BSR set to: 0
  6611                           ;UI.c: 78: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  6612  0008D4  0E01               	movlw	1
  6613  0008D6  EC3C  F025         	call	_lcdInst
  6614  0008DA  0E68               	movlw	104
  6615  0008DC  0100               	movlb	0	; () banked
  6616  0008DE  6FC4               	movwf	??_UI& (0+255),b
  6617  0008E0  0EE4               	movlw	228
  6618  0008E2                     u7697:
  6619  0008E2  2EE8               	decfsz	wreg,f,c
  6620  0008E4  D7FE               	bra	u7697
  6621  0008E6  2FC4               	decfsz	??_UI& (0+255),f,b
  6622  0008E8  D7FC               	bra	u7697
  6623  0008EA  F000               	nop	
  6624                           
  6625                           ;UI.c: 79: lcdInst(0b10000000);;
  6626  0008EC  0E80               	movlw	128
  6627  0008EE  EC3C  F025         	call	_lcdInst
  6628                           
  6629                           ;UI.c: 80: printf("RESULTS IN LOG %d", sel+1);
  6630  0008F2  0EA3               	movlw	low STR_1
  6631  0008F4  0100               	movlb	0	; () banked
  6632  0008F6  6F8E               	movwf	printf@f& (0+255),b
  6633  0008F8  0EFB               	movlw	high STR_1
  6634  0008FA  0100               	movlb	0	; () banked
  6635  0008FC  6F8F               	movwf	(printf@f+1)& (0+255),b
  6636  0008FE  0E01               	movlw	1
  6637  000900  0100               	movlb	0	; () banked
  6638  000902  25FD               	addwf	_sel& (0+255),w,b
  6639  000904  0100               	movlb	0	; () banked
  6640  000906  6F90               	movwf	(?_printf+2)& (0+255),b
  6641  000908  0100               	movlb	0	; () banked
  6642  00090A  6B91               	clrf	(?_printf+3)& (0+255),b
  6643  00090C  0E00               	movlw	0
  6644  00090E  2391               	addwfc	(?_printf+3)& (0+255),f,b
  6645  000910  ECB8  F008         	call	_printf	;wreg free
  6646                           
  6647                           ;UI.c: 81: lcdInst(0b11000000);;
  6648  000914  0EC0               	movlw	192
  6649  000916  EC3C  F025         	call	_lcdInst
  6650                           
  6651                           ;UI.c: 82: printf("TIME: %d:%02d", (total_time % 3600) / 60, (total_time % 3600) % 60);
  6652  00091A  0E0E               	movlw	14
  6653  00091C  0100               	movlb	0	; () banked
  6654  00091E  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  6655  000920  0E10               	movlw	16
  6656  000922  6F82               	movwf	___awmod@divisor& (0+255),b
  6657  000924  C0F8  F080         	movff	_total_time,___awmod@dividend
  6658  000928  C0F9  F081         	movff	_total_time+1,___awmod@dividend+1
  6659  00092C  ECCA  F01D         	call	___awmod	;wreg free
  6660  000930  C080  F0C6         	movff	?___awmod,_UI$2316
  6661  000934  C081  F0C7         	movff	?___awmod+1,_UI$2316+1
  6662                           
  6663                           ;UI.c: 82: printf("TIME: %d:%02d", (total_time % 3600) / 60, (total_time % 3600) % 60);
  6664  000938  0E27               	movlw	low STR_2
  6665  00093A  0100               	movlb	0	; () banked
  6666  00093C  6F8E               	movwf	printf@f& (0+255),b
  6667  00093E  0EFF               	movlw	high STR_2
  6668  000940  0100               	movlb	0	; () banked
  6669  000942  6F8F               	movwf	(printf@f+1)& (0+255),b
  6670  000944  0E0E               	movlw	14
  6671  000946  0100               	movlb	0	; () banked
  6672  000948  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  6673  00094A  0E10               	movlw	16
  6674  00094C  6F82               	movwf	___awmod@divisor& (0+255),b
  6675  00094E  C0F8  F080         	movff	_total_time,___awmod@dividend
  6676  000952  C0F9  F081         	movff	_total_time+1,___awmod@dividend+1
  6677  000956  ECCA  F01D         	call	___awmod	;wreg free
  6678  00095A  C080  F086         	movff	?___awmod,___awdiv@dividend
  6679  00095E  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  6680  000962  0E00               	movlw	0
  6681  000964  0100               	movlb	0	; () banked
  6682  000966  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  6683  000968  0E3C               	movlw	60
  6684  00096A  6F88               	movwf	___awdiv@divisor& (0+255),b
  6685  00096C  ECB8  F01C         	call	___awdiv	;wreg free
  6686  000970  C086  F090         	movff	?___awdiv,?_printf+2
  6687  000974  C087  F091         	movff	?___awdiv+1,?_printf+3
  6688  000978  C0C6  F080         	movff	_UI$2316,___awmod@dividend
  6689  00097C  C0C7  F081         	movff	_UI$2316+1,___awmod@dividend+1
  6690  000980  0E00               	movlw	0
  6691  000982  0100               	movlb	0	; () banked
  6692  000984  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  6693  000986  0E3C               	movlw	60
  6694  000988  6F82               	movwf	___awmod@divisor& (0+255),b
  6695  00098A  ECCA  F01D         	call	___awmod	;wreg free
  6696  00098E  C080  F092         	movff	?___awmod,?_printf+4
  6697  000992  C081  F093         	movff	?___awmod+1,?_printf+5
  6698  000996  ECB8  F008         	call	_printf	;wreg free
  6699                           
  6700                           ;UI.c: 83: machine_state = UI_state;
  6701  00099A  0E00               	movlw	0
  6702  00099C  0100               	movlb	0	; () banked
  6703  00099E  6FFC               	movwf	_machine_state& (0+255),b
  6704  0009A0                     l180:
  6705  0009A0  A281               	btfss	3969,1,c	;volatile
  6706  0009A2  D7FE               	goto	l180
  6707                           
  6708                           ;UI.c: 86: }
  6709                           ;UI.c: 87: if(cur_state==12){
  6710  0009A4  0E0C               	movlw	12
  6711  0009A6  0100               	movlb	0	; () banked
  6712  0009A8  19E6               	xorwf	_cur_state& (0+255),w,b
  6713  0009AA  0100               	movlb	0	; () banked
  6714  0009AC  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
  6715  0009AE  A4D8               	btfss	status,2,c
  6716  0009B0  D003               	goto	l7694
  6717                           
  6718                           ; BSR set to: 0
  6719                           ;UI.c: 88: change_state_to_menu_12();
  6720  0009B2  EC8C  F022         	call	_change_state_to_menu_12	;wreg free
  6721                           
  6722                           ;UI.c: 89: }
  6723  0009B6  D3D5               	goto	l8016
  6724  0009B8                     l7694:
  6725                           
  6726                           ;UI.c: 90: else{
  6727                           ;UI.c: 91: change_state_to_menu_22();
  6728  0009B8  EC70  F022         	call	_change_state_to_menu_22	;wreg free
  6729                           
  6730                           ;UI.c: 92: }
  6731                           ;UI.c: 93: }
  6732  0009BC  D3D2               	goto	l8016
  6733  0009BE                     l7696:
  6734                           
  6735                           ;UI.c: 94: else if(cur_state == 0){
  6736  0009BE  0100               	movlb	0	; () banked
  6737  0009C0  51E6               	movf	_cur_state& (0+255),w,b
  6738  0009C2  0100               	movlb	0	; () banked
  6739  0009C4  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
  6740  0009C6  A4D8               	btfss	status,2,c
  6741  0009C8  D3CC               	goto	l8016
  6742                           
  6743                           ; BSR set to: 0
  6744                           ;UI.c: 95: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
  6745  0009CA  0E00               	movlw	0
  6746  0009CC  0100               	movlb	0	; () banked
  6747  0009CE  6FC8               	movwf	UI@i& (0+255),b
  6748  0009D0                     l7700:
  6749                           
  6750                           ; BSR set to: 0
  6751  0009D0  0E63               	movlw	99
  6752  0009D2  0100               	movlb	0	; () banked
  6753  0009D4  65C8               	cpfsgt	UI@i& (0+255),b
  6754  0009D6  D001               	goto	l7704
  6755  0009D8  D00C               	goto	l7708
  6756  0009DA                     l7704:
  6757                           
  6758                           ; BSR set to: 0
  6759  0009DA  0E68               	movlw	104
  6760  0009DC  0100               	movlb	0	; () banked
  6761  0009DE  6FC4               	movwf	??_UI& (0+255),b
  6762  0009E0  0EE4               	movlw	228
  6763  0009E2                     u7707:
  6764  0009E2  2EE8               	decfsz	wreg,f,c
  6765  0009E4  D7FE               	bra	u7707
  6766  0009E6  2FC4               	decfsz	??_UI& (0+255),f,b
  6767  0009E8  D7FC               	bra	u7707
  6768  0009EA  F000               	nop	
  6769  0009EC  0100               	movlb	0	; () banked
  6770  0009EE  2BC8               	incf	UI@i& (0+255),f,b
  6771  0009F0  D7EF               	goto	l7700
  6772  0009F2                     l7708:
  6773                           
  6774                           ; BSR set to: 0
  6775                           ;UI.c: 96: if(cur_state == 0){
  6776  0009F2  0100               	movlb	0	; () banked
  6777  0009F4  51E6               	movf	_cur_state& (0+255),w,b
  6778  0009F6  0100               	movlb	0	; () banked
  6779  0009F8  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
  6780  0009FA  A4D8               	btfss	status,2,c
  6781  0009FC  D3B2               	goto	l8016
  6782                           
  6783                           ; BSR set to: 0
  6784                           ;UI.c: 97: printRTC();
  6785  0009FE  ECCC  F00F         	call	_printRTC	;wreg free
  6786                           
  6787                           ;UI.c: 98: }
  6788                           ;UI.c: 99: }
  6789                           ;UI.c: 100: while(logstate){
  6790  000A02  D3AF               	goto	l8016
  6791  000A04                     l7712:
  6792                           
  6793                           ;UI.c: 102: if(!log_completion){
  6794  000A04  0100               	movlb	0	; () banked
  6795  000A06  51EC               	movf	_log_completion& (0+255),w,b
  6796  000A08  0100               	movlb	0	; () banked
  6797  000A0A  11ED               	iorwf	(_log_completion+1)& (0+255),w,b
  6798  000A0C  A4D8               	btfss	status,2,c
  6799  000A0E  D041               	goto	l7742
  6800                           
  6801                           ; BSR set to: 0
  6802                           ;UI.c: 103: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  6803  000A10  0E01               	movlw	1
  6804  000A12  EC3C  F025         	call	_lcdInst
  6805  000A16  0E68               	movlw	104
  6806  000A18  0100               	movlb	0	; () banked
  6807  000A1A  6FC4               	movwf	??_UI& (0+255),b
  6808  000A1C  0EE4               	movlw	228
  6809  000A1E                     u7717:
  6810  000A1E  2EE8               	decfsz	wreg,f,c
  6811  000A20  D7FE               	bra	u7717
  6812  000A22  2FC4               	decfsz	??_UI& (0+255),f,b
  6813  000A24  D7FC               	bra	u7717
  6814  000A26  F000               	nop	
  6815                           
  6816                           ;UI.c: 104: lcdInst(0b10000000);;
  6817  000A28  0E80               	movlw	128
  6818  000A2A  EC3C  F025         	call	_lcdInst
  6819                           
  6820                           ;UI.c: 105: printf("-- LOG %2d HERE--", log);
  6821  000A2E  0E91               	movlw	low STR_3
  6822  000A30  0100               	movlb	0	; () banked
  6823  000A32  6F8E               	movwf	printf@f& (0+255),b
  6824  000A34  0EFB               	movlw	high STR_3
  6825  000A36  0100               	movlb	0	; () banked
  6826  000A38  6F8F               	movwf	(printf@f+1)& (0+255),b
  6827  000A3A  C0EA  F090         	movff	_log,?_printf+2
  6828  000A3E  C0EB  F091         	movff	_log+1,?_printf+3
  6829  000A42  ECB8  F008         	call	_printf	;wreg free
  6830                           
  6831                           ;UI.c: 106: lcdInst(0b11000000);;
  6832  000A46  0EC0               	movlw	192
  6833  000A48  EC3C  F025         	call	_lcdInst
  6834                           
  6835                           ;UI.c: 107: printf("DIDN'T COMPLETE");
  6836  000A4C  0E4A               	movlw	low STR_4
  6837  000A4E  0100               	movlb	0	; () banked
  6838  000A50  6F8E               	movwf	printf@f& (0+255),b
  6839  000A52  0EFE               	movlw	high STR_4
  6840  000A54  0100               	movlb	0	; () banked
  6841  000A56  6F8F               	movwf	(printf@f+1)& (0+255),b
  6842  000A58  ECB8  F008         	call	_printf	;wreg free
  6843  000A5C                     l7726:
  6844  000A5C  0E00               	movlw	0
  6845  000A5E  0100               	movlb	0	; () banked
  6846  000A60  6FC9               	movwf	UI@i_409& (0+255),b
  6847  000A62                     l7728:
  6848                           
  6849                           ; BSR set to: 0
  6850  000A62  0E63               	movlw	99
  6851  000A64  0100               	movlb	0	; () banked
  6852  000A66  65C9               	cpfsgt	UI@i_409& (0+255),b
  6853  000A68  D001               	goto	l7732
  6854  000A6A  D00C               	goto	l7736
  6855  000A6C                     l7732:
  6856                           
  6857                           ; BSR set to: 0
  6858  000A6C  0E68               	movlw	104
  6859  000A6E  0100               	movlb	0	; () banked
  6860  000A70  6FC4               	movwf	??_UI& (0+255),b
  6861  000A72  0EE4               	movlw	228
  6862  000A74                     u7727:
  6863  000A74  2EE8               	decfsz	wreg,f,c
  6864  000A76  D7FE               	bra	u7727
  6865  000A78  2FC4               	decfsz	??_UI& (0+255),f,b
  6866  000A7A  D7FC               	bra	u7727
  6867  000A7C  F000               	nop	
  6868  000A7E  0100               	movlb	0	; () banked
  6869  000A80  2BC9               	incf	UI@i_409& (0+255),f,b
  6870  000A82  D7EF               	goto	l7728
  6871  000A84                     l7736:
  6872                           
  6873                           ; BSR set to: 0
  6874  000A84  0100               	movlb	0	; () banked
  6875  000A86  51F6               	movf	_logstate& (0+255),w,b
  6876  000A88  0100               	movlb	0	; () banked
  6877  000A8A  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  6878  000A8C  B4D8               	btfsc	status,2,c
  6879  000A8E  0012               	return	
  6880  000A90  D7E5               	goto	l7726
  6881  000A92                     l7742:
  6882                           
  6883                           ; BSR set to: 0
  6884                           ;UI.c: 111: else{
  6885                           ;UI.c: 112: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  6886  000A92  0E01               	movlw	1
  6887  000A94  EC3C  F025         	call	_lcdInst
  6888  000A98  0E68               	movlw	104
  6889  000A9A  0100               	movlb	0	; () banked
  6890  000A9C  6FC4               	movwf	??_UI& (0+255),b
  6891  000A9E  0EE4               	movlw	228
  6892  000AA0                     u7737:
  6893  000AA0  2EE8               	decfsz	wreg,f,c
  6894  000AA2  D7FE               	bra	u7737
  6895  000AA4  2FC4               	decfsz	??_UI& (0+255),f,b
  6896  000AA6  D7FC               	bra	u7737
  6897  000AA8  F000               	nop	
  6898                           
  6899                           ;UI.c: 113: lcdInst(0b10000000);;
  6900  000AAA  0E80               	movlw	128
  6901  000AAC  EC3C  F025         	call	_lcdInst
  6902                           
  6903                           ;UI.c: 114: printf("-- LOG %2d HERE--", log);
  6904  000AB0  0E91               	movlw	low STR_3
  6905  000AB2  0100               	movlb	0	; () banked
  6906  000AB4  6F8E               	movwf	printf@f& (0+255),b
  6907  000AB6  0EFB               	movlw	high STR_3
  6908  000AB8  0100               	movlb	0	; () banked
  6909  000ABA  6F8F               	movwf	(printf@f+1)& (0+255),b
  6910  000ABC  C0EA  F090         	movff	_log,?_printf+2
  6911  000AC0  C0EB  F091         	movff	_log+1,?_printf+3
  6912  000AC4  ECB8  F008         	call	_printf	;wreg free
  6913                           
  6914                           ;UI.c: 115: lcdInst(0b11000000);;
  6915  000AC8  0EC0               	movlw	192
  6916  000ACA  EC3C  F025         	call	_lcdInst
  6917                           
  6918                           ;UI.c: 116: printf("PAUSE < | BACK >");
  6919  000ACE  0EE6               	movlw	low STR_6
  6920  000AD0  0100               	movlb	0	; () banked
  6921  000AD2  6F8E               	movwf	printf@f& (0+255),b
  6922  000AD4  0EFD               	movlw	high STR_6
  6923  000AD6  0100               	movlb	0	; () banked
  6924  000AD8  6F8F               	movwf	(printf@f+1)& (0+255),b
  6925  000ADA  ECB8  F008         	call	_printf	;wreg free
  6926                           
  6927                           ;UI.c: 118: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  6928  000ADE  0E00               	movlw	0
  6929  000AE0  0100               	movlb	0	; () banked
  6930  000AE2  6FCA               	movwf	UI@i_412& (0+255),b
  6931  000AE4                     l7756:
  6932                           
  6933                           ; BSR set to: 0
  6934  000AE4  0E63               	movlw	99
  6935  000AE6  0100               	movlb	0	; () banked
  6936  000AE8  65CA               	cpfsgt	UI@i_412& (0+255),b
  6937  000AEA  D001               	goto	l7760
  6938  000AEC  D00C               	goto	l7764
  6939  000AEE                     l7760:
  6940                           
  6941                           ; BSR set to: 0
  6942  000AEE  0E68               	movlw	104
  6943  000AF0  0100               	movlb	0	; () banked
  6944  000AF2  6FC4               	movwf	??_UI& (0+255),b
  6945  000AF4  0EE4               	movlw	228
  6946  000AF6                     u7747:
  6947  000AF6  2EE8               	decfsz	wreg,f,c
  6948  000AF8  D7FE               	bra	u7747
  6949  000AFA  2FC4               	decfsz	??_UI& (0+255),f,b
  6950  000AFC  D7FC               	bra	u7747
  6951  000AFE  F000               	nop	
  6952  000B00  0100               	movlb	0	; () banked
  6953  000B02  2BCA               	incf	UI@i_412& (0+255),f,b
  6954  000B04  D7EF               	goto	l7756
  6955  000B06                     l7764:
  6956                           
  6957                           ; BSR set to: 0
  6958  000B06  0100               	movlb	0	; () banked
  6959  000B08  51F6               	movf	_logstate& (0+255),w,b
  6960  000B0A  0100               	movlb	0	; () banked
  6961  000B0C  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  6962  000B0E  B4D8               	btfsc	status,2,c
  6963  000B10  0012               	return	
  6964                           
  6965                           ; BSR set to: 0
  6966                           ;UI.c: 119: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  6967                           
  6968                           ; BSR set to: 0
  6969                           
  6970                           ; BSR set to: 0
  6971  000B12  0E00               	movlw	0
  6972  000B14  0100               	movlb	0	; () banked
  6973  000B16  6FCB               	movwf	UI@i_413& (0+255),b
  6974  000B18                     l7770:
  6975                           
  6976                           ; BSR set to: 0
  6977  000B18  0E63               	movlw	99
  6978  000B1A  0100               	movlb	0	; () banked
  6979  000B1C  65CB               	cpfsgt	UI@i_413& (0+255),b
  6980  000B1E  D001               	goto	l7774
  6981  000B20  D00C               	goto	l7778
  6982  000B22                     l7774:
  6983                           
  6984                           ; BSR set to: 0
  6985  000B22  0E68               	movlw	104
  6986  000B24  0100               	movlb	0	; () banked
  6987  000B26  6FC4               	movwf	??_UI& (0+255),b
  6988  000B28  0EE4               	movlw	228
  6989  000B2A                     u7757:
  6990  000B2A  2EE8               	decfsz	wreg,f,c
  6991  000B2C  D7FE               	bra	u7757
  6992  000B2E  2FC4               	decfsz	??_UI& (0+255),f,b
  6993  000B30  D7FC               	bra	u7757
  6994  000B32  F000               	nop	
  6995  000B34  0100               	movlb	0	; () banked
  6996  000B36  2BCB               	incf	UI@i_413& (0+255),f,b
  6997  000B38  D7EF               	goto	l7770
  6998  000B3A                     l7778:
  6999                           
  7000                           ; BSR set to: 0
  7001  000B3A  0100               	movlb	0	; () banked
  7002  000B3C  51F6               	movf	_logstate& (0+255),w,b
  7003  000B3E  0100               	movlb	0	; () banked
  7004  000B40  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7005  000B42  B4D8               	btfsc	status,2,c
  7006  000B44  0012               	return	
  7007                           
  7008                           ; BSR set to: 0
  7009                           ;UI.c: 121: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7010                           
  7011                           ; BSR set to: 0
  7012                           
  7013                           ; BSR set to: 0
  7014  000B46  0E01               	movlw	1
  7015  000B48  EC3C  F025         	call	_lcdInst
  7016  000B4C  0E68               	movlw	104
  7017  000B4E  0100               	movlb	0	; () banked
  7018  000B50  6FC4               	movwf	??_UI& (0+255),b
  7019  000B52  0EE4               	movlw	228
  7020  000B54                     u7767:
  7021  000B54  2EE8               	decfsz	wreg,f,c
  7022  000B56  D7FE               	bra	u7767
  7023  000B58  2FC4               	decfsz	??_UI& (0+255),f,b
  7024  000B5A  D7FC               	bra	u7767
  7025  000B5C  F000               	nop	
  7026                           
  7027                           ;UI.c: 122: lcdInst(0b10000000);;
  7028  000B5E  0E80               	movlw	128
  7029  000B60  EC3C  F025         	call	_lcdInst
  7030                           
  7031                           ;UI.c: 123: printf("START:");
  7032  000B64  0EC4               	movlw	low STR_7
  7033  000B66  0100               	movlb	0	; () banked
  7034  000B68  6F8E               	movwf	printf@f& (0+255),b
  7035  000B6A  0EFF               	movlw	high STR_7
  7036  000B6C  0100               	movlb	0	; () banked
  7037  000B6E  6F8F               	movwf	(printf@f+1)& (0+255),b
  7038  000B70  ECB8  F008         	call	_printf	;wreg free
  7039                           
  7040                           ;UI.c: 124: lcdInst(0b11000000);;
  7041  000B74  0EC0               	movlw	192
  7042  000B76  EC3C  F025         	call	_lcdInst
  7043                           
  7044                           ;UI.c: 125: char month[] = "MMM";
  7045  000B7A  C133  F0D6         	movff	UI@F3226,UI@month
  7046  000B7E  C134  F0D7         	movff	UI@F3226+1,UI@month+1
  7047  000B82  C135  F0D8         	movff	UI@F3226+2,UI@month+2
  7048  000B86  C136  F0D9         	movff	UI@F3226+3,UI@month+3
  7049                           
  7050                           ;UI.c: 126: switch(log_startTime[5]){
  7051  000B8A  D0C3               	goto	l7822
  7052  000B8C                     l7794:
  7053                           
  7054                           ;UI.c: 128: strcpy(month, "JAN");
  7055  000B8C  0ED6               	movlw	low UI@month
  7056  000B8E  0100               	movlb	0	; () banked
  7057  000B90  6F80               	movwf	strcpy@to& (0+255),b
  7058  000B92  0E00               	movlw	high UI@month
  7059  000B94  0100               	movlb	0	; () banked
  7060  000B96  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7061  000B98  0EDB               	movlw	low STR_8
  7062  000B9A  0100               	movlb	0	; () banked
  7063  000B9C  6F82               	movwf	strcpy@from& (0+255),b
  7064  000B9E  0EFF               	movlw	high STR_8
  7065  000BA0  0100               	movlb	0	; () banked
  7066  000BA2  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7067  000BA4  ECA8  F022         	call	_strcpy	;wreg free
  7068                           
  7069                           ;UI.c: 129: break;
  7070  000BA8  D0E6               	goto	l7824
  7071  000BAA                     l7796:
  7072                           
  7073                           ;UI.c: 131: strcpy(month, "FEB");
  7074  000BAA  0ED6               	movlw	low UI@month
  7075  000BAC  0100               	movlb	0	; () banked
  7076  000BAE  6F80               	movwf	strcpy@to& (0+255),b
  7077  000BB0  0E00               	movlw	high UI@month
  7078  000BB2  0100               	movlb	0	; () banked
  7079  000BB4  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7080  000BB6  0ECB               	movlw	low STR_9
  7081  000BB8  0100               	movlb	0	; () banked
  7082  000BBA  6F82               	movwf	strcpy@from& (0+255),b
  7083  000BBC  0EFF               	movlw	high STR_9
  7084  000BBE  0100               	movlb	0	; () banked
  7085  000BC0  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7086  000BC2  ECA8  F022         	call	_strcpy	;wreg free
  7087                           
  7088                           ;UI.c: 132: break;
  7089  000BC6  D0D7               	goto	l7824
  7090  000BC8                     l7798:
  7091                           
  7092                           ;UI.c: 134: strcpy(month, "MAR");
  7093  000BC8  0ED6               	movlw	low UI@month
  7094  000BCA  0100               	movlb	0	; () banked
  7095  000BCC  6F80               	movwf	strcpy@to& (0+255),b
  7096  000BCE  0E00               	movlw	high UI@month
  7097  000BD0  0100               	movlb	0	; () banked
  7098  000BD2  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7099  000BD4  0EE7               	movlw	low STR_10
  7100  000BD6  0100               	movlb	0	; () banked
  7101  000BD8  6F82               	movwf	strcpy@from& (0+255),b
  7102  000BDA  0EFF               	movlw	high STR_10
  7103  000BDC  0100               	movlb	0	; () banked
  7104  000BDE  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7105  000BE0  ECA8  F022         	call	_strcpy	;wreg free
  7106                           
  7107                           ;UI.c: 135: break;
  7108  000BE4  D0C8               	goto	l7824
  7109  000BE6                     l7800:
  7110                           
  7111                           ;UI.c: 137: strcpy(month, "APR");
  7112  000BE6  0ED6               	movlw	low UI@month
  7113  000BE8  0100               	movlb	0	; () banked
  7114  000BEA  6F80               	movwf	strcpy@to& (0+255),b
  7115  000BEC  0E00               	movlw	high UI@month
  7116  000BEE  0100               	movlb	0	; () banked
  7117  000BF0  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7118  000BF2  0EEB               	movlw	low STR_11
  7119  000BF4  0100               	movlb	0	; () banked
  7120  000BF6  6F82               	movwf	strcpy@from& (0+255),b
  7121  000BF8  0EFF               	movlw	high STR_11
  7122  000BFA  0100               	movlb	0	; () banked
  7123  000BFC  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7124  000BFE  ECA8  F022         	call	_strcpy	;wreg free
  7125                           
  7126                           ;UI.c: 138: break;
  7127  000C02  D0B9               	goto	l7824
  7128  000C04                     l7802:
  7129                           
  7130                           ;UI.c: 140: strcpy(month, "MAY");
  7131  000C04  0ED6               	movlw	low UI@month
  7132  000C06  0100               	movlb	0	; () banked
  7133  000C08  6F80               	movwf	strcpy@to& (0+255),b
  7134  000C0A  0E00               	movlw	high UI@month
  7135  000C0C  0100               	movlb	0	; () banked
  7136  000C0E  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7137  000C10  0EFB               	movlw	low STR_12
  7138  000C12  0100               	movlb	0	; () banked
  7139  000C14  6F82               	movwf	strcpy@from& (0+255),b
  7140  000C16  0EFF               	movlw	high STR_12
  7141  000C18  0100               	movlb	0	; () banked
  7142  000C1A  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7143  000C1C  ECA8  F022         	call	_strcpy	;wreg free
  7144                           
  7145                           ;UI.c: 141: break;
  7146  000C20  D0AA               	goto	l7824
  7147  000C22                     l7804:
  7148                           
  7149                           ;UI.c: 143: strcpy(month, "JUN");
  7150  000C22  0ED6               	movlw	low UI@month
  7151  000C24  0100               	movlb	0	; () banked
  7152  000C26  6F80               	movwf	strcpy@to& (0+255),b
  7153  000C28  0E00               	movlw	high UI@month
  7154  000C2A  0100               	movlb	0	; () banked
  7155  000C2C  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7156  000C2E  0EDF               	movlw	low STR_13
  7157  000C30  0100               	movlb	0	; () banked
  7158  000C32  6F82               	movwf	strcpy@from& (0+255),b
  7159  000C34  0EFF               	movlw	high STR_13
  7160  000C36  0100               	movlb	0	; () banked
  7161  000C38  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7162  000C3A  ECA8  F022         	call	_strcpy	;wreg free
  7163                           
  7164                           ;UI.c: 144: break;
  7165  000C3E  D09B               	goto	l7824
  7166  000C40                     l7806:
  7167                           
  7168                           ;UI.c: 146: strcpy(month, "JUL");
  7169  000C40  0ED6               	movlw	low UI@month
  7170  000C42  0100               	movlb	0	; () banked
  7171  000C44  6F80               	movwf	strcpy@to& (0+255),b
  7172  000C46  0E00               	movlw	high UI@month
  7173  000C48  0100               	movlb	0	; () banked
  7174  000C4A  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7175  000C4C  0ED7               	movlw	low STR_14
  7176  000C4E  0100               	movlb	0	; () banked
  7177  000C50  6F82               	movwf	strcpy@from& (0+255),b
  7178  000C52  0EFF               	movlw	high STR_14
  7179  000C54  0100               	movlb	0	; () banked
  7180  000C56  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7181  000C58  ECA8  F022         	call	_strcpy	;wreg free
  7182                           
  7183                           ;UI.c: 147: break;
  7184  000C5C  D08C               	goto	l7824
  7185  000C5E                     l7808:
  7186                           
  7187                           ;UI.c: 149: strcpy(month, "AUG");
  7188  000C5E  0ED6               	movlw	low UI@month
  7189  000C60  0100               	movlb	0	; () banked
  7190  000C62  6F80               	movwf	strcpy@to& (0+255),b
  7191  000C64  0E00               	movlw	high UI@month
  7192  000C66  0100               	movlb	0	; () banked
  7193  000C68  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7194  000C6A  0ED3               	movlw	low STR_15
  7195  000C6C  0100               	movlb	0	; () banked
  7196  000C6E  6F82               	movwf	strcpy@from& (0+255),b
  7197  000C70  0EFF               	movlw	high STR_15
  7198  000C72  0100               	movlb	0	; () banked
  7199  000C74  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7200  000C76  ECA8  F022         	call	_strcpy	;wreg free
  7201                           
  7202                           ;UI.c: 150: break;
  7203  000C7A  D07D               	goto	l7824
  7204  000C7C                     l7810:
  7205                           
  7206                           ;UI.c: 152: strcpy(month, "SEP");
  7207  000C7C  0ED6               	movlw	low UI@month
  7208  000C7E  0100               	movlb	0	; () banked
  7209  000C80  6F80               	movwf	strcpy@to& (0+255),b
  7210  000C82  0E00               	movlw	high UI@month
  7211  000C84  0100               	movlb	0	; () banked
  7212  000C86  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7213  000C88  0EE3               	movlw	low STR_16
  7214  000C8A  0100               	movlb	0	; () banked
  7215  000C8C  6F82               	movwf	strcpy@from& (0+255),b
  7216  000C8E  0EFF               	movlw	high STR_16
  7217  000C90  0100               	movlb	0	; () banked
  7218  000C92  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7219  000C94  ECA8  F022         	call	_strcpy	;wreg free
  7220                           
  7221                           ;UI.c: 153: break;
  7222  000C98  D06E               	goto	l7824
  7223  000C9A                     l7812:
  7224                           
  7225                           ;UI.c: 155: strcpy(month, "OCT");
  7226  000C9A  0ED6               	movlw	low UI@month
  7227  000C9C  0100               	movlb	0	; () banked
  7228  000C9E  6F80               	movwf	strcpy@to& (0+255),b
  7229  000CA0  0E00               	movlw	high UI@month
  7230  000CA2  0100               	movlb	0	; () banked
  7231  000CA4  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7232  000CA6  0EF3               	movlw	low STR_17
  7233  000CA8  0100               	movlb	0	; () banked
  7234  000CAA  6F82               	movwf	strcpy@from& (0+255),b
  7235  000CAC  0EFF               	movlw	high STR_17
  7236  000CAE  0100               	movlb	0	; () banked
  7237  000CB0  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7238  000CB2  ECA8  F022         	call	_strcpy	;wreg free
  7239                           
  7240                           ;UI.c: 156: break;
  7241  000CB6  D05F               	goto	l7824
  7242  000CB8                     l7814:
  7243                           
  7244                           ;UI.c: 158: strcpy(month, "NOV");
  7245  000CB8  0ED6               	movlw	low UI@month
  7246  000CBA  0100               	movlb	0	; () banked
  7247  000CBC  6F80               	movwf	strcpy@to& (0+255),b
  7248  000CBE  0E00               	movlw	high UI@month
  7249  000CC0  0100               	movlb	0	; () banked
  7250  000CC2  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7251  000CC4  0EF7               	movlw	low STR_18
  7252  000CC6  0100               	movlb	0	; () banked
  7253  000CC8  6F82               	movwf	strcpy@from& (0+255),b
  7254  000CCA  0EFF               	movlw	high STR_18
  7255  000CCC  0100               	movlb	0	; () banked
  7256  000CCE  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7257  000CD0  ECA8  F022         	call	_strcpy	;wreg free
  7258                           
  7259                           ;UI.c: 159: break;
  7260  000CD4  D050               	goto	l7824
  7261  000CD6                     l7816:
  7262                           
  7263                           ;UI.c: 161: strcpy(month, "DEC");
  7264  000CD6  0ED6               	movlw	low UI@month
  7265  000CD8  0100               	movlb	0	; () banked
  7266  000CDA  6F80               	movwf	strcpy@to& (0+255),b
  7267  000CDC  0E00               	movlw	high UI@month
  7268  000CDE  0100               	movlb	0	; () banked
  7269  000CE0  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7270  000CE2  0ECF               	movlw	low STR_19
  7271  000CE4  0100               	movlb	0	; () banked
  7272  000CE6  6F82               	movwf	strcpy@from& (0+255),b
  7273  000CE8  0EFF               	movlw	high STR_19
  7274  000CEA  0100               	movlb	0	; () banked
  7275  000CEC  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7276  000CEE  ECA8  F022         	call	_strcpy	;wreg free
  7277                           
  7278                           ;UI.c: 162: break;
  7279  000CF2  D041               	goto	l7824
  7280  000CF4                     l7818:
  7281                           
  7282                           ;UI.c: 164: strcpy(month, "ERR");
  7283  000CF4  0ED6               	movlw	low UI@month
  7284  000CF6  0100               	movlb	0	; () banked
  7285  000CF8  6F80               	movwf	strcpy@to& (0+255),b
  7286  000CFA  0E00               	movlw	high UI@month
  7287  000CFC  0100               	movlb	0	; () banked
  7288  000CFE  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7289  000D00  0EEF               	movlw	low STR_20
  7290  000D02  0100               	movlb	0	; () banked
  7291  000D04  6F82               	movwf	strcpy@from& (0+255),b
  7292  000D06  0EFF               	movlw	high STR_20
  7293  000D08  0100               	movlb	0	; () banked
  7294  000D0A  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7295  000D0C  ECA8  F022         	call	_strcpy	;wreg free
  7296                           
  7297                           ;UI.c: 166: }
  7298                           
  7299                           ;UI.c: 165: break;
  7300  000D10  D032               	goto	l7824
  7301  000D12                     l7822:
  7302  000D12  EE21  F00A         	lfsr	2,_log_startTime+10
  7303  000D16  CFDE F0C4          	movff	postinc2,??_UI
  7304  000D1A  CFDD F0C5          	movff	postdec2,??_UI+1
  7305                           
  7306                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7307                           ; Switch size 1, requested type "space"
  7308                           ; Number of cases is 1, Range of values is 0 to 0
  7309                           ; switch strategies available:
  7310                           ; Name         Instructions Cycles
  7311                           ; simple_byte            4     3 (average)
  7312                           ;	Chosen strategy is simple_byte
  7313  000D1E  0100               	movlb	0	; () banked
  7314  000D20  51C5               	movf	(??_UI+1)& (0+255),w,b
  7315  000D22  0A00               	xorlw	0	; case 0
  7316  000D24  A4D8               	btfss	status,2,c
  7317  000D26  D7E6               	goto	l7818
  7318                           
  7319                           ; BSR set to: 0
  7320                           ; Switch size 1, requested type "space"
  7321                           ; Number of cases is 12, Range of values is 1 to 12
  7322                           ; switch strategies available:
  7323                           ; Name         Instructions Cycles
  7324                           ; simple_byte           37    19 (average)
  7325                           ;	Chosen strategy is simple_byte
  7326  000D28  0100               	movlb	0	; () banked
  7327  000D2A  51C4               	movf	??_UI& (0+255),w,b
  7328  000D2C  0A01               	xorlw	1	; case 1
  7329  000D2E  B4D8               	btfsc	status,2,c
  7330  000D30  D72D               	goto	l7794
  7331  000D32  0A03               	xorlw	3	; case 2
  7332  000D34  B4D8               	btfsc	status,2,c
  7333  000D36  D739               	goto	l7796
  7334  000D38  0A01               	xorlw	1	; case 3
  7335  000D3A  B4D8               	btfsc	status,2,c
  7336  000D3C  D745               	goto	l7798
  7337  000D3E  0A07               	xorlw	7	; case 4
  7338  000D40  B4D8               	btfsc	status,2,c
  7339  000D42  D751               	goto	l7800
  7340  000D44  0A01               	xorlw	1	; case 5
  7341  000D46  B4D8               	btfsc	status,2,c
  7342  000D48  D75D               	goto	l7802
  7343  000D4A  0A03               	xorlw	3	; case 6
  7344  000D4C  B4D8               	btfsc	status,2,c
  7345  000D4E  D769               	goto	l7804
  7346  000D50  0A01               	xorlw	1	; case 7
  7347  000D52  B4D8               	btfsc	status,2,c
  7348  000D54  D775               	goto	l7806
  7349  000D56  0A0F               	xorlw	15	; case 8
  7350  000D58  B4D8               	btfsc	status,2,c
  7351  000D5A  D781               	goto	l7808
  7352  000D5C  0A01               	xorlw	1	; case 9
  7353  000D5E  B4D8               	btfsc	status,2,c
  7354  000D60  D78D               	goto	l7810
  7355  000D62  0A03               	xorlw	3	; case 10
  7356  000D64  B4D8               	btfsc	status,2,c
  7357  000D66  D799               	goto	l7812
  7358  000D68  0A01               	xorlw	1	; case 11
  7359  000D6A  B4D8               	btfsc	status,2,c
  7360  000D6C  D7A5               	goto	l7814
  7361  000D6E  0A07               	xorlw	7	; case 12
  7362  000D70  B4D8               	btfsc	status,2,c
  7363  000D72  D7B1               	goto	l7816
  7364  000D74  D7BF               	goto	l7818
  7365  000D76                     l7824:
  7366                           
  7367                           ;UI.c: 167: printf("%02d%s | %02d:%02d:%02d", log_startTime[4],month,log_startTime[2],lo
      +                          g_startTime[1],log_startTime[0]);
  7368  000D76  0E1C               	movlw	low STR_21
  7369  000D78  0100               	movlb	0	; () banked
  7370  000D7A  6F8E               	movwf	printf@f& (0+255),b
  7371  000D7C  0EFB               	movlw	high STR_21
  7372  000D7E  0100               	movlb	0	; () banked
  7373  000D80  6F8F               	movwf	(printf@f+1)& (0+255),b
  7374  000D82  C108  F090         	movff	_log_startTime+8,?_printf+2
  7375  000D86  C109  F091         	movff	_log_startTime+9,?_printf+3
  7376  000D8A  0ED6               	movlw	low UI@month
  7377  000D8C  0100               	movlb	0	; () banked
  7378  000D8E  6F92               	movwf	(?_printf+4)& (0+255),b
  7379  000D90  0E00               	movlw	high UI@month
  7380  000D92  0100               	movlb	0	; () banked
  7381  000D94  6F93               	movwf	(?_printf+5)& (0+255),b
  7382  000D96  C104  F094         	movff	_log_startTime+4,?_printf+6
  7383  000D9A  C105  F095         	movff	_log_startTime+5,?_printf+7
  7384  000D9E  C102  F096         	movff	_log_startTime+2,?_printf+8
  7385  000DA2  C103  F097         	movff	_log_startTime+3,?_printf+9
  7386  000DA6  C100  F098         	movff	_log_startTime,?_printf+10
  7387  000DAA  C101  F099         	movff	_log_startTime+1,?_printf+11
  7388  000DAE  ECB8  F008         	call	_printf	;wreg free
  7389                           
  7390                           ;UI.c: 169: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7391  000DB2  0E00               	movlw	0
  7392  000DB4  0100               	movlb	0	; () banked
  7393  000DB6  6FCC               	movwf	UI@i_431& (0+255),b
  7394  000DB8                     l7828:
  7395                           
  7396                           ; BSR set to: 0
  7397  000DB8  0E63               	movlw	99
  7398  000DBA  0100               	movlb	0	; () banked
  7399  000DBC  65CC               	cpfsgt	UI@i_431& (0+255),b
  7400  000DBE  D001               	goto	l7832
  7401  000DC0  D00C               	goto	l7836
  7402  000DC2                     l7832:
  7403                           
  7404                           ; BSR set to: 0
  7405  000DC2  0E68               	movlw	104
  7406  000DC4  0100               	movlb	0	; () banked
  7407  000DC6  6FC4               	movwf	??_UI& (0+255),b
  7408  000DC8  0EE4               	movlw	228
  7409  000DCA                     u7777:
  7410  000DCA  2EE8               	decfsz	wreg,f,c
  7411  000DCC  D7FE               	bra	u7777
  7412  000DCE  2FC4               	decfsz	??_UI& (0+255),f,b
  7413  000DD0  D7FC               	bra	u7777
  7414  000DD2  F000               	nop	
  7415  000DD4  0100               	movlb	0	; () banked
  7416  000DD6  2BCC               	incf	UI@i_431& (0+255),f,b
  7417  000DD8  D7EF               	goto	l7828
  7418  000DDA                     l7836:
  7419                           
  7420                           ; BSR set to: 0
  7421  000DDA  0100               	movlb	0	; () banked
  7422  000DDC  51F6               	movf	_logstate& (0+255),w,b
  7423  000DDE  0100               	movlb	0	; () banked
  7424  000DE0  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7425  000DE2  B4D8               	btfsc	status,2,c
  7426  000DE4  0012               	return	
  7427                           
  7428                           ; BSR set to: 0
  7429                           ;UI.c: 170: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7430                           
  7431                           ; BSR set to: 0
  7432                           
  7433                           ; BSR set to: 0
  7434  000DE6  0E00               	movlw	0
  7435  000DE8  0100               	movlb	0	; () banked
  7436  000DEA  6FCD               	movwf	UI@i_432& (0+255),b
  7437  000DEC                     l7842:
  7438                           
  7439                           ; BSR set to: 0
  7440  000DEC  0E63               	movlw	99
  7441  000DEE  0100               	movlb	0	; () banked
  7442  000DF0  65CD               	cpfsgt	UI@i_432& (0+255),b
  7443  000DF2  D001               	goto	l7846
  7444  000DF4  D00C               	goto	l7850
  7445  000DF6                     l7846:
  7446                           
  7447                           ; BSR set to: 0
  7448  000DF6  0E68               	movlw	104
  7449  000DF8  0100               	movlb	0	; () banked
  7450  000DFA  6FC4               	movwf	??_UI& (0+255),b
  7451  000DFC  0EE4               	movlw	228
  7452  000DFE                     u7787:
  7453  000DFE  2EE8               	decfsz	wreg,f,c
  7454  000E00  D7FE               	bra	u7787
  7455  000E02  2FC4               	decfsz	??_UI& (0+255),f,b
  7456  000E04  D7FC               	bra	u7787
  7457  000E06  F000               	nop	
  7458  000E08  0100               	movlb	0	; () banked
  7459  000E0A  2BCD               	incf	UI@i_432& (0+255),f,b
  7460  000E0C  D7EF               	goto	l7842
  7461  000E0E                     l7850:
  7462                           
  7463                           ; BSR set to: 0
  7464  000E0E  0100               	movlb	0	; () banked
  7465  000E10  51F6               	movf	_logstate& (0+255),w,b
  7466  000E12  0100               	movlb	0	; () banked
  7467  000E14  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7468  000E16  B4D8               	btfsc	status,2,c
  7469  000E18  0012               	return	
  7470                           
  7471                           ; BSR set to: 0
  7472                           ;UI.c: 172: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7473                           
  7474                           ; BSR set to: 0
  7475                           
  7476                           ; BSR set to: 0
  7477  000E1A  0E01               	movlw	1
  7478  000E1C  EC3C  F025         	call	_lcdInst
  7479  000E20  0E68               	movlw	104
  7480  000E22  0100               	movlb	0	; () banked
  7481  000E24  6FC4               	movwf	??_UI& (0+255),b
  7482  000E26  0EE4               	movlw	228
  7483  000E28                     u7797:
  7484  000E28  2EE8               	decfsz	wreg,f,c
  7485  000E2A  D7FE               	bra	u7797
  7486  000E2C  2FC4               	decfsz	??_UI& (0+255),f,b
  7487  000E2E  D7FC               	bra	u7797
  7488  000E30  F000               	nop	
  7489                           
  7490                           ;UI.c: 173: lcdInst(0b10000000);;
  7491  000E32  0E80               	movlw	128
  7492  000E34  EC3C  F025         	call	_lcdInst
  7493                           
  7494                           ;UI.c: 174: printf("DURATION:");
  7495  000E38  0E9B               	movlw	low STR_22
  7496  000E3A  0100               	movlb	0	; () banked
  7497  000E3C  6F8E               	movwf	printf@f& (0+255),b
  7498  000E3E  0EFF               	movlw	high STR_22
  7499  000E40  0100               	movlb	0	; () banked
  7500  000E42  6F8F               	movwf	(printf@f+1)& (0+255),b
  7501  000E44  ECB8  F008         	call	_printf	;wreg free
  7502                           
  7503                           ;UI.c: 175: lcdInst(0b11000000);;
  7504  000E48  0EC0               	movlw	192
  7505  000E4A  EC3C  F025         	call	_lcdInst
  7506                           
  7507                           ;UI.c: 176: printf("%d MIN %d SEC", (log_total_time % 3600) / 60, (log_total_time % 3600
      +                          ) % 60);
  7508  000E4E  0E0E               	movlw	14
  7509  000E50  0100               	movlb	0	; () banked
  7510  000E52  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7511  000E54  0E10               	movlw	16
  7512  000E56  6F82               	movwf	___awmod@divisor& (0+255),b
  7513  000E58  C0F4  F080         	movff	_log_total_time,___awmod@dividend
  7514  000E5C  C0F5  F081         	movff	_log_total_time+1,___awmod@dividend+1
  7515  000E60  ECCA  F01D         	call	___awmod	;wreg free
  7516  000E64  C080  F0C6         	movff	?___awmod,_UI$2316
  7517  000E68  C081  F0C7         	movff	?___awmod+1,_UI$2316+1
  7518                           
  7519                           ;UI.c: 176: printf("%d MIN %d SEC", (log_total_time % 3600) / 60, (log_total_time % 3600
      +                          ) % 60);
  7520  000E6C  0E19               	movlw	low STR_23
  7521  000E6E  0100               	movlb	0	; () banked
  7522  000E70  6F8E               	movwf	printf@f& (0+255),b
  7523  000E72  0EFF               	movlw	high STR_23
  7524  000E74  0100               	movlb	0	; () banked
  7525  000E76  6F8F               	movwf	(printf@f+1)& (0+255),b
  7526  000E78  0E0E               	movlw	14
  7527  000E7A  0100               	movlb	0	; () banked
  7528  000E7C  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7529  000E7E  0E10               	movlw	16
  7530  000E80  6F82               	movwf	___awmod@divisor& (0+255),b
  7531  000E82  C0F4  F080         	movff	_log_total_time,___awmod@dividend
  7532  000E86  C0F5  F081         	movff	_log_total_time+1,___awmod@dividend+1
  7533  000E8A  ECCA  F01D         	call	___awmod	;wreg free
  7534  000E8E  C080  F086         	movff	?___awmod,___awdiv@dividend
  7535  000E92  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  7536  000E96  0E00               	movlw	0
  7537  000E98  0100               	movlb	0	; () banked
  7538  000E9A  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  7539  000E9C  0E3C               	movlw	60
  7540  000E9E  6F88               	movwf	___awdiv@divisor& (0+255),b
  7541  000EA0  ECB8  F01C         	call	___awdiv	;wreg free
  7542  000EA4  C086  F090         	movff	?___awdiv,?_printf+2
  7543  000EA8  C087  F091         	movff	?___awdiv+1,?_printf+3
  7544  000EAC  C0C6  F080         	movff	_UI$2316,___awmod@dividend
  7545  000EB0  C0C7  F081         	movff	_UI$2316+1,___awmod@dividend+1
  7546  000EB4  0E00               	movlw	0
  7547  000EB6  0100               	movlb	0	; () banked
  7548  000EB8  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7549  000EBA  0E3C               	movlw	60
  7550  000EBC  6F82               	movwf	___awmod@divisor& (0+255),b
  7551  000EBE  ECCA  F01D         	call	___awmod	;wreg free
  7552  000EC2  C080  F092         	movff	?___awmod,?_printf+4
  7553  000EC6  C081  F093         	movff	?___awmod+1,?_printf+5
  7554  000ECA  ECB8  F008         	call	_printf	;wreg free
  7555                           
  7556                           ;UI.c: 178: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7557  000ECE  0E00               	movlw	0
  7558  000ED0  0100               	movlb	0	; () banked
  7559  000ED2  6FCE               	movwf	UI@i_435& (0+255),b
  7560  000ED4                     l7870:
  7561                           
  7562                           ; BSR set to: 0
  7563  000ED4  0E63               	movlw	99
  7564  000ED6  0100               	movlb	0	; () banked
  7565  000ED8  65CE               	cpfsgt	UI@i_435& (0+255),b
  7566  000EDA  D001               	goto	l7874
  7567  000EDC  D00C               	goto	l7878
  7568  000EDE                     l7874:
  7569                           
  7570                           ; BSR set to: 0
  7571  000EDE  0E68               	movlw	104
  7572  000EE0  0100               	movlb	0	; () banked
  7573  000EE2  6FC4               	movwf	??_UI& (0+255),b
  7574  000EE4  0EE4               	movlw	228
  7575  000EE6                     u7807:
  7576  000EE6  2EE8               	decfsz	wreg,f,c
  7577  000EE8  D7FE               	bra	u7807
  7578  000EEA  2FC4               	decfsz	??_UI& (0+255),f,b
  7579  000EEC  D7FC               	bra	u7807
  7580  000EEE  F000               	nop	
  7581  000EF0  0100               	movlb	0	; () banked
  7582  000EF2  2BCE               	incf	UI@i_435& (0+255),f,b
  7583  000EF4  D7EF               	goto	l7870
  7584  000EF6                     l7878:
  7585                           
  7586                           ; BSR set to: 0
  7587  000EF6  0100               	movlb	0	; () banked
  7588  000EF8  51F6               	movf	_logstate& (0+255),w,b
  7589  000EFA  0100               	movlb	0	; () banked
  7590  000EFC  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7591  000EFE  B4D8               	btfsc	status,2,c
  7592  000F00  0012               	return	
  7593                           
  7594                           ; BSR set to: 0
  7595                           ;UI.c: 179: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7596                           
  7597                           ; BSR set to: 0
  7598                           
  7599                           ; BSR set to: 0
  7600  000F02  0E00               	movlw	0
  7601  000F04  0100               	movlb	0	; () banked
  7602  000F06  6FCF               	movwf	UI@i_436& (0+255),b
  7603  000F08                     l7884:
  7604                           
  7605                           ; BSR set to: 0
  7606  000F08  0E63               	movlw	99
  7607  000F0A  0100               	movlb	0	; () banked
  7608  000F0C  65CF               	cpfsgt	UI@i_436& (0+255),b
  7609  000F0E  D001               	goto	l7888
  7610  000F10  D00C               	goto	l7892
  7611  000F12                     l7888:
  7612                           
  7613                           ; BSR set to: 0
  7614  000F12  0E68               	movlw	104
  7615  000F14  0100               	movlb	0	; () banked
  7616  000F16  6FC4               	movwf	??_UI& (0+255),b
  7617  000F18  0EE4               	movlw	228
  7618  000F1A                     u7817:
  7619  000F1A  2EE8               	decfsz	wreg,f,c
  7620  000F1C  D7FE               	bra	u7817
  7621  000F1E  2FC4               	decfsz	??_UI& (0+255),f,b
  7622  000F20  D7FC               	bra	u7817
  7623  000F22  F000               	nop	
  7624  000F24  0100               	movlb	0	; () banked
  7625  000F26  2BCF               	incf	UI@i_436& (0+255),f,b
  7626  000F28  D7EF               	goto	l7884
  7627  000F2A                     l7892:
  7628                           
  7629                           ; BSR set to: 0
  7630  000F2A  0100               	movlb	0	; () banked
  7631  000F2C  51F6               	movf	_logstate& (0+255),w,b
  7632  000F2E  0100               	movlb	0	; () banked
  7633  000F30  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7634  000F32  B4D8               	btfsc	status,2,c
  7635  000F34  0012               	return	
  7636                           
  7637                           ; BSR set to: 0
  7638                           ;UI.c: 181: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7639                           
  7640                           ; BSR set to: 0
  7641                           
  7642                           ; BSR set to: 0
  7643  000F36  0E01               	movlw	1
  7644  000F38  EC3C  F025         	call	_lcdInst
  7645  000F3C  0E68               	movlw	104
  7646  000F3E  0100               	movlb	0	; () banked
  7647  000F40  6FC4               	movwf	??_UI& (0+255),b
  7648  000F42  0EE4               	movlw	228
  7649  000F44                     u7827:
  7650  000F44  2EE8               	decfsz	wreg,f,c
  7651  000F46  D7FE               	bra	u7827
  7652  000F48  2FC4               	decfsz	??_UI& (0+255),f,b
  7653  000F4A  D7FC               	bra	u7827
  7654  000F4C  F000               	nop	
  7655                           
  7656                           ;UI.c: 182: lcdInst(0b10000000);;
  7657  000F4E  0E80               	movlw	128
  7658  000F50  EC3C  F025         	call	_lcdInst
  7659                           
  7660                           ;UI.c: 183: printf(" -- POP  CAN -- ");
  7661  000F54  0E3C               	movlw	low STR_24
  7662  000F56  0100               	movlb	0	; () banked
  7663  000F58  6F8E               	movwf	printf@f& (0+255),b
  7664  000F5A  0EFD               	movlw	high STR_24
  7665  000F5C  0100               	movlb	0	; () banked
  7666  000F5E  6F8F               	movwf	(printf@f+1)& (0+255),b
  7667  000F60  ECB8  F008         	call	_printf	;wreg free
  7668                           
  7669                           ;UI.c: 184: lcdInst(0b11000000);;
  7670  000F64  0EC0               	movlw	192
  7671  000F66  EC3C  F025         	call	_lcdInst
  7672                           
  7673                           ;UI.c: 185: printf("NTAB: %d|TAB: %d", log_count_pop_no_tab, log_count_pop_w_tab);
  7674  000F6A  0E19               	movlw	low STR_25
  7675  000F6C  0100               	movlb	0	; () banked
  7676  000F6E  6F8E               	movwf	printf@f& (0+255),b
  7677  000F70  0EFE               	movlw	high STR_25
  7678  000F72  0100               	movlb	0	; () banked
  7679  000F74  6F8F               	movwf	(printf@f+1)& (0+255),b
  7680  000F76  C0F0  F090         	movff	_log_count_pop_no_tab,?_printf+2
  7681  000F7A  C0F1  F091         	movff	_log_count_pop_no_tab+1,?_printf+3
  7682  000F7E  C0F2  F092         	movff	_log_count_pop_w_tab,?_printf+4
  7683  000F82  C0F3  F093         	movff	_log_count_pop_w_tab+1,?_printf+5
  7684  000F86  ECB8  F008         	call	_printf	;wreg free
  7685                           
  7686                           ;UI.c: 187: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7687  000F8A  0E00               	movlw	0
  7688  000F8C  0100               	movlb	0	; () banked
  7689  000F8E  6FD0               	movwf	UI@i_439& (0+255),b
  7690  000F90                     l7910:
  7691                           
  7692                           ; BSR set to: 0
  7693  000F90  0E63               	movlw	99
  7694  000F92  0100               	movlb	0	; () banked
  7695  000F94  65D0               	cpfsgt	UI@i_439& (0+255),b
  7696  000F96  D001               	goto	l7914
  7697  000F98  D00C               	goto	l7918
  7698  000F9A                     l7914:
  7699                           
  7700                           ; BSR set to: 0
  7701  000F9A  0E68               	movlw	104
  7702  000F9C  0100               	movlb	0	; () banked
  7703  000F9E  6FC4               	movwf	??_UI& (0+255),b
  7704  000FA0  0EE4               	movlw	228
  7705  000FA2                     u7837:
  7706  000FA2  2EE8               	decfsz	wreg,f,c
  7707  000FA4  D7FE               	bra	u7837
  7708  000FA6  2FC4               	decfsz	??_UI& (0+255),f,b
  7709  000FA8  D7FC               	bra	u7837
  7710  000FAA  F000               	nop	
  7711  000FAC  0100               	movlb	0	; () banked
  7712  000FAE  2BD0               	incf	UI@i_439& (0+255),f,b
  7713  000FB0  D7EF               	goto	l7910
  7714  000FB2                     l7918:
  7715                           
  7716                           ; BSR set to: 0
  7717  000FB2  0100               	movlb	0	; () banked
  7718  000FB4  51F6               	movf	_logstate& (0+255),w,b
  7719  000FB6  0100               	movlb	0	; () banked
  7720  000FB8  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7721  000FBA  B4D8               	btfsc	status,2,c
  7722  000FBC  0012               	return	
  7723                           
  7724                           ; BSR set to: 0
  7725                           ;UI.c: 188: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7726                           
  7727                           ; BSR set to: 0
  7728                           
  7729                           ; BSR set to: 0
  7730  000FBE  0E00               	movlw	0
  7731  000FC0  0100               	movlb	0	; () banked
  7732  000FC2  6FD1               	movwf	UI@i_440& (0+255),b
  7733  000FC4                     l7924:
  7734                           
  7735                           ; BSR set to: 0
  7736  000FC4  0E63               	movlw	99
  7737  000FC6  0100               	movlb	0	; () banked
  7738  000FC8  65D1               	cpfsgt	UI@i_440& (0+255),b
  7739  000FCA  D001               	goto	l7928
  7740  000FCC  D00C               	goto	l7932
  7741  000FCE                     l7928:
  7742                           
  7743                           ; BSR set to: 0
  7744  000FCE  0E68               	movlw	104
  7745  000FD0  0100               	movlb	0	; () banked
  7746  000FD2  6FC4               	movwf	??_UI& (0+255),b
  7747  000FD4  0EE4               	movlw	228
  7748  000FD6                     u7847:
  7749  000FD6  2EE8               	decfsz	wreg,f,c
  7750  000FD8  D7FE               	bra	u7847
  7751  000FDA  2FC4               	decfsz	??_UI& (0+255),f,b
  7752  000FDC  D7FC               	bra	u7847
  7753  000FDE  F000               	nop	
  7754  000FE0  0100               	movlb	0	; () banked
  7755  000FE2  2BD1               	incf	UI@i_440& (0+255),f,b
  7756  000FE4  D7EF               	goto	l7924
  7757  000FE6                     l7932:
  7758                           
  7759                           ; BSR set to: 0
  7760  000FE6  0100               	movlb	0	; () banked
  7761  000FE8  51F6               	movf	_logstate& (0+255),w,b
  7762  000FEA  0100               	movlb	0	; () banked
  7763  000FEC  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7764  000FEE  B4D8               	btfsc	status,2,c
  7765  000FF0  0012               	return	
  7766                           
  7767                           ; BSR set to: 0
  7768                           ;UI.c: 190: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7769                           
  7770                           ; BSR set to: 0
  7771                           
  7772                           ; BSR set to: 0
  7773  000FF2  0E01               	movlw	1
  7774  000FF4  EC3C  F025         	call	_lcdInst
  7775  000FF8  0E68               	movlw	104
  7776  000FFA  0100               	movlb	0	; () banked
  7777  000FFC  6FC4               	movwf	??_UI& (0+255),b
  7778  000FFE  0EE4               	movlw	228
  7779  001000                     u7857:
  7780  001000  2EE8               	decfsz	wreg,f,c
  7781  001002  D7FE               	bra	u7857
  7782  001004  2FC4               	decfsz	??_UI& (0+255),f,b
  7783  001006  D7FC               	bra	u7857
  7784  001008  F000               	nop	
  7785                           
  7786                           ;UI.c: 191: lcdInst(0b10000000);;
  7787  00100A  0E80               	movlw	128
  7788  00100C  EC3C  F025         	call	_lcdInst
  7789                           
  7790                           ;UI.c: 192: printf(" -- SOUP CAN -- ");
  7791  001010  0E4D               	movlw	low STR_26
  7792  001012  0100               	movlb	0	; () banked
  7793  001014  6F8E               	movwf	printf@f& (0+255),b
  7794  001016  0EFD               	movlw	high STR_26
  7795  001018  0100               	movlb	0	; () banked
  7796  00101A  6F8F               	movwf	(printf@f+1)& (0+255),b
  7797  00101C  ECB8  F008         	call	_printf	;wreg free
  7798                           
  7799                           ;UI.c: 193: lcdInst(0b11000000);;
  7800  001020  0EC0               	movlw	192
  7801  001022  EC3C  F025         	call	_lcdInst
  7802                           
  7803                           ;UI.c: 194: printf("NLAB: %d|LAB: %d", log_count_can_no_lab, log_count_can_w_lab);
  7804  001026  0E08               	movlw	low STR_27
  7805  001028  0100               	movlb	0	; () banked
  7806  00102A  6F8E               	movwf	printf@f& (0+255),b
  7807  00102C  0EFE               	movlw	high STR_27
  7808  00102E  0100               	movlb	0	; () banked
  7809  001030  6F8F               	movwf	(printf@f+1)& (0+255),b
  7810  001032  C0EE  F090         	movff	_log_count_can_no_lab,?_printf+2
  7811  001036  C0EF  F091         	movff	_log_count_can_no_lab+1,?_printf+3
  7812  00103A  C073  F092         	movff	_log_count_can_w_lab,?_printf+4
  7813  00103E  C074  F093         	movff	_log_count_can_w_lab+1,?_printf+5
  7814  001042  ECB8  F008         	call	_printf	;wreg free
  7815                           
  7816                           ;UI.c: 196: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7817  001046  0E00               	movlw	0
  7818  001048  0100               	movlb	0	; () banked
  7819  00104A  6FD2               	movwf	UI@i_443& (0+255),b
  7820  00104C                     l7950:
  7821                           
  7822                           ; BSR set to: 0
  7823  00104C  0E63               	movlw	99
  7824  00104E  0100               	movlb	0	; () banked
  7825  001050  65D2               	cpfsgt	UI@i_443& (0+255),b
  7826  001052  D001               	goto	l7954
  7827  001054  D00C               	goto	l7958
  7828  001056                     l7954:
  7829                           
  7830                           ; BSR set to: 0
  7831  001056  0E68               	movlw	104
  7832  001058  0100               	movlb	0	; () banked
  7833  00105A  6FC4               	movwf	??_UI& (0+255),b
  7834  00105C  0EE4               	movlw	228
  7835  00105E                     u7867:
  7836  00105E  2EE8               	decfsz	wreg,f,c
  7837  001060  D7FE               	bra	u7867
  7838  001062  2FC4               	decfsz	??_UI& (0+255),f,b
  7839  001064  D7FC               	bra	u7867
  7840  001066  F000               	nop	
  7841  001068  0100               	movlb	0	; () banked
  7842  00106A  2BD2               	incf	UI@i_443& (0+255),f,b
  7843  00106C  D7EF               	goto	l7950
  7844  00106E                     l7958:
  7845                           
  7846                           ; BSR set to: 0
  7847  00106E  0100               	movlb	0	; () banked
  7848  001070  51F6               	movf	_logstate& (0+255),w,b
  7849  001072  0100               	movlb	0	; () banked
  7850  001074  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7851  001076  B4D8               	btfsc	status,2,c
  7852  001078  0012               	return	
  7853                           
  7854                           ; BSR set to: 0
  7855                           ;UI.c: 197: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7856                           
  7857                           ; BSR set to: 0
  7858                           
  7859                           ; BSR set to: 0
  7860  00107A  0E00               	movlw	0
  7861  00107C  0100               	movlb	0	; () banked
  7862  00107E  6FD3               	movwf	UI@i_444& (0+255),b
  7863  001080                     l7964:
  7864                           
  7865                           ; BSR set to: 0
  7866  001080  0E63               	movlw	99
  7867  001082  0100               	movlb	0	; () banked
  7868  001084  65D3               	cpfsgt	UI@i_444& (0+255),b
  7869  001086  D001               	goto	l7968
  7870  001088  D00C               	goto	l7972
  7871  00108A                     l7968:
  7872                           
  7873                           ; BSR set to: 0
  7874  00108A  0E68               	movlw	104
  7875  00108C  0100               	movlb	0	; () banked
  7876  00108E  6FC4               	movwf	??_UI& (0+255),b
  7877  001090  0EE4               	movlw	228
  7878  001092                     u7877:
  7879  001092  2EE8               	decfsz	wreg,f,c
  7880  001094  D7FE               	bra	u7877
  7881  001096  2FC4               	decfsz	??_UI& (0+255),f,b
  7882  001098  D7FC               	bra	u7877
  7883  00109A  F000               	nop	
  7884  00109C  0100               	movlb	0	; () banked
  7885  00109E  2BD3               	incf	UI@i_444& (0+255),f,b
  7886  0010A0  D7EF               	goto	l7964
  7887  0010A2                     l7972:
  7888                           
  7889                           ; BSR set to: 0
  7890  0010A2  0100               	movlb	0	; () banked
  7891  0010A4  51F6               	movf	_logstate& (0+255),w,b
  7892  0010A6  0100               	movlb	0	; () banked
  7893  0010A8  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7894  0010AA  B4D8               	btfsc	status,2,c
  7895  0010AC  0012               	return	
  7896                           
  7897                           ; BSR set to: 0
  7898                           ;UI.c: 199: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7899                           
  7900                           ; BSR set to: 0
  7901                           
  7902                           ; BSR set to: 0
  7903  0010AE  0E01               	movlw	1
  7904  0010B0  EC3C  F025         	call	_lcdInst
  7905  0010B4  0E68               	movlw	104
  7906  0010B6  0100               	movlb	0	; () banked
  7907  0010B8  6FC4               	movwf	??_UI& (0+255),b
  7908  0010BA  0EE4               	movlw	228
  7909  0010BC                     u7887:
  7910  0010BC  2EE8               	decfsz	wreg,f,c
  7911  0010BE  D7FE               	bra	u7887
  7912  0010C0  2FC4               	decfsz	??_UI& (0+255),f,b
  7913  0010C2  D7FC               	bra	u7887
  7914  0010C4  F000               	nop	
  7915                           
  7916                           ;UI.c: 200: lcdInst(0b10000000);;
  7917  0010C6  0E80               	movlw	128
  7918  0010C8  EC3C  F025         	call	_lcdInst
  7919                           
  7920                           ;UI.c: 201: printf("-- TOTAL CANS --");
  7921  0010CC  0E5E               	movlw	low STR_28
  7922  0010CE  0100               	movlb	0	; () banked
  7923  0010D0  6F8E               	movwf	printf@f& (0+255),b
  7924  0010D2  0EFD               	movlw	high STR_28
  7925  0010D4  0100               	movlb	0	; () banked
  7926  0010D6  6F8F               	movwf	(printf@f+1)& (0+255),b
  7927  0010D8  ECB8  F008         	call	_printf	;wreg free
  7928                           
  7929                           ;UI.c: 202: lcdInst(0b11000000);;
  7930  0010DC  0EC0               	movlw	192
  7931  0010DE  EC3C  F025         	call	_lcdInst
  7932                           
  7933                           ;UI.c: 203: printf("%d", log_count_total);
  7934  0010E2  0E16               	movlw	low (STR_27+14)
  7935  0010E4  0100               	movlb	0	; () banked
  7936  0010E6  6F8E               	movwf	printf@f& (0+255),b
  7937  0010E8  0EFE               	movlw	high (STR_27+14)
  7938  0010EA  0100               	movlb	0	; () banked
  7939  0010EC  6F8F               	movwf	(printf@f+1)& (0+255),b
  7940  0010EE  C075  F090         	movff	_log_count_total,?_printf+2
  7941  0010F2  C076  F091         	movff	_log_count_total+1,?_printf+3
  7942  0010F6  ECB8  F008         	call	_printf	;wreg free
  7943                           
  7944                           ;UI.c: 205: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7945  0010FA  0E00               	movlw	0
  7946  0010FC  0100               	movlb	0	; () banked
  7947  0010FE  6FD4               	movwf	UI@i_447& (0+255),b
  7948  001100                     l7990:
  7949                           
  7950                           ; BSR set to: 0
  7951  001100  0E63               	movlw	99
  7952  001102  0100               	movlb	0	; () banked
  7953  001104  65D4               	cpfsgt	UI@i_447& (0+255),b
  7954  001106  D001               	goto	l7994
  7955  001108  D00C               	goto	l7998
  7956  00110A                     l7994:
  7957                           
  7958                           ; BSR set to: 0
  7959  00110A  0E68               	movlw	104
  7960  00110C  0100               	movlb	0	; () banked
  7961  00110E  6FC4               	movwf	??_UI& (0+255),b
  7962  001110  0EE4               	movlw	228
  7963  001112                     u7897:
  7964  001112  2EE8               	decfsz	wreg,f,c
  7965  001114  D7FE               	bra	u7897
  7966  001116  2FC4               	decfsz	??_UI& (0+255),f,b
  7967  001118  D7FC               	bra	u7897
  7968  00111A  F000               	nop	
  7969  00111C  0100               	movlb	0	; () banked
  7970  00111E  2BD4               	incf	UI@i_447& (0+255),f,b
  7971  001120  D7EF               	goto	l7990
  7972  001122                     l7998:
  7973                           
  7974                           ; BSR set to: 0
  7975  001122  0100               	movlb	0	; () banked
  7976  001124  51F6               	movf	_logstate& (0+255),w,b
  7977  001126  0100               	movlb	0	; () banked
  7978  001128  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7979  00112A  B4D8               	btfsc	status,2,c
  7980  00112C  0012               	return	
  7981                           
  7982                           ; BSR set to: 0
  7983                           ;UI.c: 206: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7984                           
  7985                           ; BSR set to: 0
  7986                           
  7987                           ; BSR set to: 0
  7988  00112E  0E00               	movlw	0
  7989  001130  0100               	movlb	0	; () banked
  7990  001132  6FD5               	movwf	UI@i_448& (0+255),b
  7991  001134                     l8004:
  7992                           
  7993                           ; BSR set to: 0
  7994  001134  0E63               	movlw	99
  7995  001136  0100               	movlb	0	; () banked
  7996  001138  65D5               	cpfsgt	UI@i_448& (0+255),b
  7997  00113A  D001               	goto	l8008
  7998  00113C  D00C               	goto	l8012
  7999  00113E                     l8008:
  8000                           
  8001                           ; BSR set to: 0
  8002  00113E  0E68               	movlw	104
  8003  001140  0100               	movlb	0	; () banked
  8004  001142  6FC4               	movwf	??_UI& (0+255),b
  8005  001144  0EE4               	movlw	228
  8006  001146                     u7907:
  8007  001146  2EE8               	decfsz	wreg,f,c
  8008  001148  D7FE               	bra	u7907
  8009  00114A  2FC4               	decfsz	??_UI& (0+255),f,b
  8010  00114C  D7FC               	bra	u7907
  8011  00114E  F000               	nop	
  8012  001150  0100               	movlb	0	; () banked
  8013  001152  2BD5               	incf	UI@i_448& (0+255),f,b
  8014  001154  D7EF               	goto	l8004
  8015  001156                     l8012:
  8016                           
  8017                           ; BSR set to: 0
  8018  001156  0100               	movlb	0	; () banked
  8019  001158  51F6               	movf	_logstate& (0+255),w,b
  8020  00115A  0100               	movlb	0	; () banked
  8021  00115C  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  8022  00115E  B4D8               	btfsc	status,2,c
  8023  001160  0012               	return	
  8024  001162                     l8016:
  8025  001162  0100               	movlb	0	; () banked
  8026  001164  51F6               	movf	_logstate& (0+255),w,b
  8027  001166  0100               	movlb	0	; () banked
  8028  001168  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  8029  00116A  B4D8               	btfsc	status,2,c
  8030  00116C  0012               	return	
  8031  00116E  D44A               	goto	l7712
  8032  001170                     __end_of_UI:
  8033                           	opt stack 0
  8034                           tblptru	equ	0xFF8
  8035                           tblptrh	equ	0xFF7
  8036                           tblptrl	equ	0xFF6
  8037                           tablat	equ	0xFF5
  8038                           prodh	equ	0xFF4
  8039                           prodl	equ	0xFF3
  8040                           intcon	equ	0xFF2
  8041                           intcon2	equ	0xFF1
  8042                           intcon3	equ	0xFF0
  8043                           postinc0	equ	0xFEE
  8044                           wreg	equ	0xFE8
  8045                           postdec1	equ	0xFE5
  8046                           fsr1l	equ	0xFE1
  8047                           indf2	equ	0xFDF
  8048                           postinc2	equ	0xFDE
  8049                           postdec2	equ	0xFDD
  8050                           fsr2h	equ	0xFDA
  8051                           fsr2l	equ	0xFD9
  8052                           status	equ	0xFD8
  8053                           
  8054 ;; *************** function _printRTC *****************
  8055 ;; Defined at:
  8056 ;;		line 63 in file "RTC.c"
  8057 ;; Parameters:    Size  Location     Type
  8058 ;;		None
  8059 ;; Auto vars:     Size  Location     Type
  8060 ;;  i               2   66[BANK0 ] int 
  8061 ;;  INT_time       14   46[BANK0 ] int [7]
  8062 ;;  month           4   62[BANK0 ] unsigned char [4]
  8063 ;;  RTC_month       2   60[BANK0 ] int 
  8064 ;; Return value:  Size  Location     Type
  8065 ;;                  1    wreg      void 
  8066 ;; Registers used:
  8067 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8068 ;; Tracked objects:
  8069 ;;		On entry : 0/0
  8070 ;;		On exit  : 0/0
  8071 ;;		Unchanged: 0/0
  8072 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8073 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8074 ;;      Locals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8075 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8076 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8077 ;;Total ram usage:       25 bytes
  8078 ;; Hardware stack levels used:    1
  8079 ;; Hardware stack levels required when called:   10
  8080 ;; This function calls:
  8081 ;;		_getRTC
  8082 ;;		_lcdInst
  8083 ;;		_printf
  8084 ;;		_strcpy
  8085 ;; This function is called by:
  8086 ;;		_UI
  8087 ;;		_change_state_to_menu_start
  8088 ;; This function uses a non-reentrant model
  8089 ;;
  8090                           
  8091                           	psect	text24
  8092  001F98                     __ptext24:
  8093                           	opt stack 0
  8094  001F98                     _printRTC:
  8095                           	opt stack 18
  8096                           
  8097                           ;RTC.c: 64: getRTC();
  8098                           
  8099                           ; BSR set to: 0
  8100                           ;incstack = 0
  8101  001F98  EC61  F01E         	call	_getRTC	;wreg free
  8102                           
  8103                           ;RTC.c: 65: char month[] = "MMM";
  8104  001F9C  C137  F0BE         	movff	printRTC@F3217,printRTC@month
  8105  001FA0  C138  F0BF         	movff	printRTC@F3217+1,printRTC@month+1
  8106  001FA4  C139  F0C0         	movff	printRTC@F3217+2,printRTC@month+2
  8107  001FA8  C13A  F0C1         	movff	printRTC@F3217+3,printRTC@month+3
  8108                           
  8109                           ;RTC.c: 66: int INT_time[7];
  8110                           ;RTC.c: 67: for(int i = 0; i < 7; i++){
  8111  001FAC  0E00               	movlw	0
  8112  001FAE  0100               	movlb	0	; () banked
  8113  001FB0  6FC3               	movwf	(printRTC@i+1)& (0+255),b
  8114  001FB2  0E00               	movlw	0
  8115  001FB4  6FC2               	movwf	printRTC@i& (0+255),b
  8116                           
  8117                           ; BSR set to: 0
  8118  001FB6  0100               	movlb	0	; () banked
  8119  001FB8  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
  8120  001FBA  D008               	goto	l6026
  8121  001FBC  0100               	movlb	0	; () banked
  8122  001FBE  51C3               	movf	(printRTC@i+1)& (0+255),w,b
  8123  001FC0  E146               	bnz	l602
  8124  001FC2  0E07               	movlw	7
  8125  001FC4  0100               	movlb	0	; () banked
  8126  001FC6  5DC2               	subwf	printRTC@i& (0+255),w,b
  8127  001FC8  B0D8               	btfsc	status,0,c
  8128  001FCA  D041               	goto	l602
  8129  001FCC                     l6026:
  8130                           
  8131                           ; BSR set to: 0
  8132                           ;RTC.c: 68: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  8133  001FCC  0E24               	movlw	low _time
  8134  001FCE  0100               	movlb	0	; () banked
  8135  001FD0  25C2               	addwf	printRTC@i& (0+255),w,b
  8136  001FD2  6ED9               	movwf	fsr2l,c
  8137  001FD4  0E01               	movlw	high _time
  8138  001FD6  0100               	movlb	0	; () banked
  8139  001FD8  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
  8140  001FDA  6EDA               	movwf	fsr2h,c
  8141  001FDC  50DF               	movf	indf2,w,c
  8142  001FDE  0100               	movlb	0	; () banked
  8143  001FE0  6FAB               	movwf	??_printRTC& (0+255),b
  8144  001FE2  0100               	movlb	0	; () banked
  8145  001FE4  3BAB               	swapf	??_printRTC& (0+255),f,b
  8146  001FE6  0E0F               	movlw	15
  8147  001FE8  17AB               	andwf	??_printRTC& (0+255),f,b
  8148  001FEA  0E0F               	movlw	15
  8149  001FEC  0100               	movlb	0	; () banked
  8150  001FEE  17AB               	andwf	??_printRTC& (0+255),f,b
  8151  001FF0  0100               	movlb	0	; () banked
  8152  001FF2  51AB               	movf	??_printRTC& (0+255),w,b
  8153  001FF4  0D0A               	mullw	10
  8154  001FF6  0E24               	movlw	low _time
  8155  001FF8  0100               	movlb	0	; () banked
  8156  001FFA  25C2               	addwf	printRTC@i& (0+255),w,b
  8157  001FFC  6ED9               	movwf	fsr2l,c
  8158  001FFE  0E01               	movlw	high _time
  8159  002000  0100               	movlb	0	; () banked
  8160  002002  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
  8161  002004  6EDA               	movwf	fsr2h,c
  8162  002006  50DF               	movf	indf2,w,c
  8163  002008  0B0F               	andlw	15
  8164  00200A  0100               	movlb	0	; () banked
  8165  00200C  6FAC               	movwf	(??_printRTC+1)& (0+255),b
  8166  00200E  6BAD               	clrf	(??_printRTC+2)& (0+255),b
  8167  002010  50F3               	movf	prodl,w,c
  8168  002012  0100               	movlb	0	; () banked
  8169  002014  27AC               	addwf	(??_printRTC+1)& (0+255),f,b
  8170  002016  50F4               	movf	prodh,w,c
  8171  002018  0100               	movlb	0	; () banked
  8172  00201A  23AD               	addwfc	(??_printRTC+2)& (0+255),f,b
  8173  00201C  90D8               	bcf	status,0,c
  8174  00201E  0100               	movlb	0	; () banked
  8175  002020  35C2               	rlcf	printRTC@i& (0+255),w,b
  8176  002022  6ED9               	movwf	fsr2l,c
  8177  002024  0100               	movlb	0	; () banked
  8178  002026  35C3               	rlcf	(printRTC@i+1)& (0+255),w,b
  8179  002028  6EDA               	movwf	fsr2h,c
  8180  00202A  0EAE               	movlw	low printRTC@INT_time
  8181  00202C  26D9               	addwf	fsr2l,f,c
  8182  00202E  0E00               	movlw	high printRTC@INT_time
  8183  002030  22DA               	addwfc	fsr2h,f,c
  8184  002032  C0AC  FFDE         	movff	??_printRTC+1,postinc2
  8185  002036  C0AD  FFDD         	movff	??_printRTC+2,postdec2
  8186                           
  8187                           ; BSR set to: 0
  8188  00203A  0100               	movlb	0	; () banked
  8189  00203C  4BC2               	infsnz	printRTC@i& (0+255),f,b
  8190  00203E  2BC3               	incf	(printRTC@i+1)& (0+255),f,b
  8191                           
  8192                           ; BSR set to: 0
  8193  002040  0100               	movlb	0	; () banked
  8194  002042  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
  8195  002044  D7C3               	goto	l6026
  8196  002046  0100               	movlb	0	; () banked
  8197  002048  51C3               	movf	(printRTC@i+1)& (0+255),w,b
  8198  00204A  E101               	bnz	u4690
  8199  00204C  D7BA               	goto	L6
  8200  00204E                     u4690:
  8201  00204E                     l602:
  8202                           
  8203                           ; BSR set to: 0
  8204                           ;RTC.c: 69: }
  8205                           ;RTC.c: 70: int RTC_month = INT_time[5];
  8206  00204E  C0B8  F0BC         	movff	printRTC@INT_time+10,printRTC@RTC_month
  8207  002052  C0B9  F0BD         	movff	printRTC@INT_time+11,printRTC@RTC_month+1
  8208                           
  8209                           ;RTC.c: 71: switch(RTC_month){
  8210  002056  D0B4               	goto	l6058
  8211  002058                     l6032:
  8212                           
  8213                           ; BSR set to: 0
  8214                           ;RTC.c: 73: strcpy(month, "JAN");
  8215  002058  0EBE               	movlw	low printRTC@month
  8216  00205A  0100               	movlb	0	; () banked
  8217  00205C  6F80               	movwf	strcpy@to& (0+255),b
  8218  00205E  0E00               	movlw	high printRTC@month
  8219  002060  0100               	movlb	0	; () banked
  8220  002062  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8221  002064  0EDB               	movlw	low STR_8
  8222  002066  0100               	movlb	0	; () banked
  8223  002068  6F82               	movwf	strcpy@from& (0+255),b
  8224  00206A  0EFF               	movlw	high STR_8
  8225  00206C  0100               	movlb	0	; () banked
  8226  00206E  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8227  002070  ECA8  F022         	call	_strcpy	;wreg free
  8228                           
  8229                           ;RTC.c: 74: break;
  8230  002074  D0D4               	goto	l6060
  8231  002076                     l6034:
  8232                           
  8233                           ;RTC.c: 76: strcpy(month, "FEB");
  8234  002076  0EBE               	movlw	low printRTC@month
  8235  002078  0100               	movlb	0	; () banked
  8236  00207A  6F80               	movwf	strcpy@to& (0+255),b
  8237  00207C  0E00               	movlw	high printRTC@month
  8238  00207E  0100               	movlb	0	; () banked
  8239  002080  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8240  002082  0ECB               	movlw	low STR_9
  8241  002084  0100               	movlb	0	; () banked
  8242  002086  6F82               	movwf	strcpy@from& (0+255),b
  8243  002088  0EFF               	movlw	high STR_9
  8244  00208A  0100               	movlb	0	; () banked
  8245  00208C  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8246  00208E  ECA8  F022         	call	_strcpy	;wreg free
  8247                           
  8248                           ;RTC.c: 77: break;
  8249  002092  D0C5               	goto	l6060
  8250  002094                     l6036:
  8251                           
  8252                           ;RTC.c: 79: strcpy(month, "MAR");
  8253  002094  0EBE               	movlw	low printRTC@month
  8254  002096  0100               	movlb	0	; () banked
  8255  002098  6F80               	movwf	strcpy@to& (0+255),b
  8256  00209A  0E00               	movlw	high printRTC@month
  8257  00209C  0100               	movlb	0	; () banked
  8258  00209E  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8259  0020A0  0EE7               	movlw	low STR_10
  8260  0020A2  0100               	movlb	0	; () banked
  8261  0020A4  6F82               	movwf	strcpy@from& (0+255),b
  8262  0020A6  0EFF               	movlw	high STR_10
  8263  0020A8  0100               	movlb	0	; () banked
  8264  0020AA  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8265  0020AC  ECA8  F022         	call	_strcpy	;wreg free
  8266                           
  8267                           ;RTC.c: 80: break;
  8268  0020B0  D0B6               	goto	l6060
  8269  0020B2                     l6038:
  8270                           
  8271                           ;RTC.c: 82: strcpy(month, "APR");
  8272  0020B2  0EBE               	movlw	low printRTC@month
  8273  0020B4  0100               	movlb	0	; () banked
  8274  0020B6  6F80               	movwf	strcpy@to& (0+255),b
  8275  0020B8  0E00               	movlw	high printRTC@month
  8276  0020BA  0100               	movlb	0	; () banked
  8277  0020BC  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8278  0020BE  0EEB               	movlw	low STR_11
  8279  0020C0  0100               	movlb	0	; () banked
  8280  0020C2  6F82               	movwf	strcpy@from& (0+255),b
  8281  0020C4  0EFF               	movlw	high STR_11
  8282  0020C6  0100               	movlb	0	; () banked
  8283  0020C8  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8284  0020CA  ECA8  F022         	call	_strcpy	;wreg free
  8285                           
  8286                           ;RTC.c: 83: break;
  8287  0020CE  D0A7               	goto	l6060
  8288  0020D0                     l6040:
  8289                           
  8290                           ;RTC.c: 85: strcpy(month, "MAY");
  8291  0020D0  0EBE               	movlw	low printRTC@month
  8292  0020D2  0100               	movlb	0	; () banked
  8293  0020D4  6F80               	movwf	strcpy@to& (0+255),b
  8294  0020D6  0E00               	movlw	high printRTC@month
  8295  0020D8  0100               	movlb	0	; () banked
  8296  0020DA  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8297  0020DC  0EFB               	movlw	low STR_12
  8298  0020DE  0100               	movlb	0	; () banked
  8299  0020E0  6F82               	movwf	strcpy@from& (0+255),b
  8300  0020E2  0EFF               	movlw	high STR_12
  8301  0020E4  0100               	movlb	0	; () banked
  8302  0020E6  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8303  0020E8  ECA8  F022         	call	_strcpy	;wreg free
  8304                           
  8305                           ;RTC.c: 86: break;
  8306  0020EC  D098               	goto	l6060
  8307  0020EE                     l6042:
  8308                           
  8309                           ;RTC.c: 88: strcpy(month, "JUN");
  8310  0020EE  0EBE               	movlw	low printRTC@month
  8311  0020F0  0100               	movlb	0	; () banked
  8312  0020F2  6F80               	movwf	strcpy@to& (0+255),b
  8313  0020F4  0E00               	movlw	high printRTC@month
  8314  0020F6  0100               	movlb	0	; () banked
  8315  0020F8  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8316  0020FA  0EDF               	movlw	low STR_13
  8317  0020FC  0100               	movlb	0	; () banked
  8318  0020FE  6F82               	movwf	strcpy@from& (0+255),b
  8319  002100  0EFF               	movlw	high STR_13
  8320  002102  0100               	movlb	0	; () banked
  8321  002104  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8322  002106  ECA8  F022         	call	_strcpy	;wreg free
  8323                           
  8324                           ;RTC.c: 89: break;
  8325  00210A  D089               	goto	l6060
  8326  00210C                     l6044:
  8327                           
  8328                           ;RTC.c: 91: strcpy(month, "JUL");
  8329  00210C  0EBE               	movlw	low printRTC@month
  8330  00210E  0100               	movlb	0	; () banked
  8331  002110  6F80               	movwf	strcpy@to& (0+255),b
  8332  002112  0E00               	movlw	high printRTC@month
  8333  002114  0100               	movlb	0	; () banked
  8334  002116  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8335  002118  0ED7               	movlw	low STR_14
  8336  00211A  0100               	movlb	0	; () banked
  8337  00211C  6F82               	movwf	strcpy@from& (0+255),b
  8338  00211E  0EFF               	movlw	high STR_14
  8339  002120  0100               	movlb	0	; () banked
  8340  002122  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8341  002124  ECA8  F022         	call	_strcpy	;wreg free
  8342                           
  8343                           ;RTC.c: 92: break;
  8344  002128  D07A               	goto	l6060
  8345  00212A                     l6046:
  8346                           
  8347                           ;RTC.c: 94: strcpy(month, "AUG");
  8348  00212A  0EBE               	movlw	low printRTC@month
  8349  00212C  0100               	movlb	0	; () banked
  8350  00212E  6F80               	movwf	strcpy@to& (0+255),b
  8351  002130  0E00               	movlw	high printRTC@month
  8352  002132  0100               	movlb	0	; () banked
  8353  002134  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8354  002136  0ED3               	movlw	low STR_15
  8355  002138  0100               	movlb	0	; () banked
  8356  00213A  6F82               	movwf	strcpy@from& (0+255),b
  8357  00213C  0EFF               	movlw	high STR_15
  8358  00213E  0100               	movlb	0	; () banked
  8359  002140  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8360  002142  ECA8  F022         	call	_strcpy	;wreg free
  8361                           
  8362                           ;RTC.c: 95: break;
  8363  002146  D06B               	goto	l6060
  8364  002148                     l6048:
  8365                           
  8366                           ;RTC.c: 97: strcpy(month, "SEP");
  8367  002148  0EBE               	movlw	low printRTC@month
  8368  00214A  0100               	movlb	0	; () banked
  8369  00214C  6F80               	movwf	strcpy@to& (0+255),b
  8370  00214E  0E00               	movlw	high printRTC@month
  8371  002150  0100               	movlb	0	; () banked
  8372  002152  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8373  002154  0EE3               	movlw	low STR_16
  8374  002156  0100               	movlb	0	; () banked
  8375  002158  6F82               	movwf	strcpy@from& (0+255),b
  8376  00215A  0EFF               	movlw	high STR_16
  8377  00215C  0100               	movlb	0	; () banked
  8378  00215E  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8379  002160  ECA8  F022         	call	_strcpy	;wreg free
  8380                           
  8381                           ;RTC.c: 98: break;
  8382  002164  D05C               	goto	l6060
  8383  002166                     l6050:
  8384                           
  8385                           ;RTC.c: 100: strcpy(month, "OCT");
  8386  002166  0EBE               	movlw	low printRTC@month
  8387  002168  0100               	movlb	0	; () banked
  8388  00216A  6F80               	movwf	strcpy@to& (0+255),b
  8389  00216C  0E00               	movlw	high printRTC@month
  8390  00216E  0100               	movlb	0	; () banked
  8391  002170  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8392  002172  0EF3               	movlw	low STR_17
  8393  002174  0100               	movlb	0	; () banked
  8394  002176  6F82               	movwf	strcpy@from& (0+255),b
  8395  002178  0EFF               	movlw	high STR_17
  8396  00217A  0100               	movlb	0	; () banked
  8397  00217C  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8398  00217E  ECA8  F022         	call	_strcpy	;wreg free
  8399                           
  8400                           ;RTC.c: 101: break;
  8401  002182  D04D               	goto	l6060
  8402  002184                     l6052:
  8403                           
  8404                           ;RTC.c: 103: strcpy(month, "NOV");
  8405  002184  0EBE               	movlw	low printRTC@month
  8406  002186  0100               	movlb	0	; () banked
  8407  002188  6F80               	movwf	strcpy@to& (0+255),b
  8408  00218A  0E00               	movlw	high printRTC@month
  8409  00218C  0100               	movlb	0	; () banked
  8410  00218E  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8411  002190  0EF7               	movlw	low STR_18
  8412  002192  0100               	movlb	0	; () banked
  8413  002194  6F82               	movwf	strcpy@from& (0+255),b
  8414  002196  0EFF               	movlw	high STR_18
  8415  002198  0100               	movlb	0	; () banked
  8416  00219A  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8417  00219C  ECA8  F022         	call	_strcpy	;wreg free
  8418                           
  8419                           ;RTC.c: 104: break;
  8420  0021A0  D03E               	goto	l6060
  8421  0021A2                     l6054:
  8422                           
  8423                           ;RTC.c: 106: strcpy(month, "DEC");
  8424  0021A2  0EBE               	movlw	low printRTC@month
  8425  0021A4  0100               	movlb	0	; () banked
  8426  0021A6  6F80               	movwf	strcpy@to& (0+255),b
  8427  0021A8  0E00               	movlw	high printRTC@month
  8428  0021AA  0100               	movlb	0	; () banked
  8429  0021AC  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8430  0021AE  0ECF               	movlw	low STR_19
  8431  0021B0  0100               	movlb	0	; () banked
  8432  0021B2  6F82               	movwf	strcpy@from& (0+255),b
  8433  0021B4  0EFF               	movlw	high STR_19
  8434  0021B6  0100               	movlb	0	; () banked
  8435  0021B8  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8436  0021BA  ECA8  F022         	call	_strcpy	;wreg free
  8437                           
  8438                           ;RTC.c: 108: }
  8439                           
  8440                           ;RTC.c: 107: break;
  8441  0021BE  D02F               	goto	l6060
  8442  0021C0                     l6058:
  8443  0021C0  C0BC  F0AB         	movff	printRTC@RTC_month,??_printRTC
  8444  0021C4  C0BD  F0AC         	movff	printRTC@RTC_month+1,??_printRTC+1
  8445                           
  8446                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8447                           ; Switch size 1, requested type "space"
  8448                           ; Number of cases is 1, Range of values is 0 to 0
  8449                           ; switch strategies available:
  8450                           ; Name         Instructions Cycles
  8451                           ; simple_byte            4     3 (average)
  8452                           ;	Chosen strategy is simple_byte
  8453  0021C8  0100               	movlb	0	; () banked
  8454  0021CA  51AC               	movf	(??_printRTC+1)& (0+255),w,b
  8455  0021CC  0A00               	xorlw	0	; case 0
  8456  0021CE  A4D8               	btfss	status,2,c
  8457  0021D0  D026               	goto	l6060
  8458                           
  8459                           ; BSR set to: 0
  8460                           ; Switch size 1, requested type "space"
  8461                           ; Number of cases is 12, Range of values is 1 to 12
  8462                           ; switch strategies available:
  8463                           ; Name         Instructions Cycles
  8464                           ; simple_byte           37    19 (average)
  8465                           ;	Chosen strategy is simple_byte
  8466  0021D2  0100               	movlb	0	; () banked
  8467  0021D4  51AB               	movf	??_printRTC& (0+255),w,b
  8468  0021D6  0A01               	xorlw	1	; case 1
  8469  0021D8  B4D8               	btfsc	status,2,c
  8470  0021DA  D73E               	goto	l6032
  8471  0021DC  0A03               	xorlw	3	; case 2
  8472  0021DE  B4D8               	btfsc	status,2,c
  8473  0021E0  D74A               	goto	l6034
  8474  0021E2  0A01               	xorlw	1	; case 3
  8475  0021E4  B4D8               	btfsc	status,2,c
  8476  0021E6  D756               	goto	l6036
  8477  0021E8  0A07               	xorlw	7	; case 4
  8478  0021EA  B4D8               	btfsc	status,2,c
  8479  0021EC  D762               	goto	l6038
  8480  0021EE  0A01               	xorlw	1	; case 5
  8481  0021F0  B4D8               	btfsc	status,2,c
  8482  0021F2  D76E               	goto	l6040
  8483  0021F4  0A03               	xorlw	3	; case 6
  8484  0021F6  B4D8               	btfsc	status,2,c
  8485  0021F8  D77A               	goto	l6042
  8486  0021FA  0A01               	xorlw	1	; case 7
  8487  0021FC  B4D8               	btfsc	status,2,c
  8488  0021FE  D786               	goto	l6044
  8489  002200  0A0F               	xorlw	15	; case 8
  8490  002202  B4D8               	btfsc	status,2,c
  8491  002204  D792               	goto	l6046
  8492  002206  0A01               	xorlw	1	; case 9
  8493  002208  B4D8               	btfsc	status,2,c
  8494  00220A  D79E               	goto	l6048
  8495  00220C  0A03               	xorlw	3	; case 10
  8496  00220E  B4D8               	btfsc	status,2,c
  8497  002210  D7AA               	goto	l6050
  8498  002212  0A01               	xorlw	1	; case 11
  8499  002214  B4D8               	btfsc	status,2,c
  8500  002216  D7B6               	goto	l6052
  8501  002218  0A07               	xorlw	7	; case 12
  8502  00221A  B4D8               	btfsc	status,2,c
  8503  00221C  D7C2               	goto	l6054
  8504  00221E                     l6060:
  8505                           
  8506                           ;RTC.c: 109: lcdInst(0b10000000);;
  8507  00221E  0E80               	movlw	128
  8508  002220  EC3C  F025         	call	_lcdInst
  8509                           
  8510                           ;RTC.c: 110: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
  8511  002224  0E1C               	movlw	low STR_21
  8512  002226  0100               	movlb	0	; () banked
  8513  002228  6F8E               	movwf	printf@f& (0+255),b
  8514  00222A  0EFB               	movlw	high STR_21
  8515  00222C  0100               	movlb	0	; () banked
  8516  00222E  6F8F               	movwf	(printf@f+1)& (0+255),b
  8517  002230  C0B6  F090         	movff	printRTC@INT_time+8,?_printf+2
  8518  002234  C0B7  F091         	movff	printRTC@INT_time+9,?_printf+3
  8519  002238  0EBE               	movlw	low printRTC@month
  8520  00223A  0100               	movlb	0	; () banked
  8521  00223C  6F92               	movwf	(?_printf+4)& (0+255),b
  8522  00223E  0E00               	movlw	high printRTC@month
  8523  002240  0100               	movlb	0	; () banked
  8524  002242  6F93               	movwf	(?_printf+5)& (0+255),b
  8525  002244  C0B2  F094         	movff	printRTC@INT_time+4,?_printf+6
  8526  002248  C0B3  F095         	movff	printRTC@INT_time+5,?_printf+7
  8527  00224C  C0B0  F096         	movff	printRTC@INT_time+2,?_printf+8
  8528  002250  C0B1  F097         	movff	printRTC@INT_time+3,?_printf+9
  8529  002254  C0AE  F098         	movff	printRTC@INT_time,?_printf+10
  8530  002258  C0AF  F099         	movff	printRTC@INT_time+1,?_printf+11
  8531  00225C  ECB8  F008         	call	_printf	;wreg free
  8532  002260  0012               	return		;funcret
  8533  002262                     __end_of_printRTC:
  8534                           	opt stack 0
  8535                           tblptru	equ	0xFF8
  8536                           tblptrh	equ	0xFF7
  8537                           tblptrl	equ	0xFF6
  8538                           tablat	equ	0xFF5
  8539                           prodh	equ	0xFF4
  8540                           prodl	equ	0xFF3
  8541                           intcon	equ	0xFF2
  8542                           intcon2	equ	0xFF1
  8543                           intcon3	equ	0xFF0
  8544                           postinc0	equ	0xFEE
  8545                           wreg	equ	0xFE8
  8546                           postdec1	equ	0xFE5
  8547                           fsr1l	equ	0xFE1
  8548                           indf2	equ	0xFDF
  8549                           postinc2	equ	0xFDE
  8550                           postdec2	equ	0xFDD
  8551                           fsr2h	equ	0xFDA
  8552                           fsr2l	equ	0xFD9
  8553                           status	equ	0xFD8
  8554                           
  8555 ;; *************** function _strcpy *****************
  8556 ;; Defined at:
  8557 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
  8558 ;; Parameters:    Size  Location     Type
  8559 ;;  to              2    0[BANK0 ] PTR unsigned char 
  8560 ;;		 -> printRTC@month(4), UI@month(4), 
  8561 ;;  from            2    2[BANK0 ] PTR const unsigned char 
  8562 ;;		 -> STR_62(4), STR_61(4), STR_60(4), STR_59(4), 
  8563 ;;		 -> STR_58(4), STR_57(4), STR_56(4), STR_55(4), 
  8564 ;;		 -> STR_54(4), STR_53(4), STR_52(4), STR_51(4), 
  8565 ;;		 -> STR_20(4), STR_19(4), STR_18(4), STR_17(4), 
  8566 ;;		 -> STR_16(4), STR_15(4), STR_14(4), STR_13(4), 
  8567 ;;		 -> STR_12(4), STR_11(4), STR_10(4), STR_9(4), 
  8568 ;;		 -> STR_8(4), 
  8569 ;; Auto vars:     Size  Location     Type
  8570 ;;  cp              2    4[BANK0 ] PTR unsigned char 
  8571 ;;		 -> printRTC@month(4), UI@month(4), 
  8572 ;; Return value:  Size  Location     Type
  8573 ;;                  2    0[BANK0 ] PTR unsigned char 
  8574 ;; Registers used:
  8575 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  8576 ;; Tracked objects:
  8577 ;;		On entry : 0/0
  8578 ;;		On exit  : 0/0
  8579 ;;		Unchanged: 0/0
  8580 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8581 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8582 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8583 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8584 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8585 ;;Total ram usage:        6 bytes
  8586 ;; Hardware stack levels used:    1
  8587 ;; Hardware stack levels required when called:    7
  8588 ;; This function calls:
  8589 ;;		Nothing
  8590 ;; This function is called by:
  8591 ;;		_UI
  8592 ;;		_printRTC
  8593 ;; This function uses a non-reentrant model
  8594 ;;
  8595                           
  8596                           	psect	text25
  8597  004550                     __ptext25:
  8598                           	opt stack 0
  8599  004550                     _strcpy:
  8600                           	opt stack 20
  8601                           
  8602                           ;incstack = 0
  8603  004550  C080  F084         	movff	strcpy@to,strcpy@cp
  8604  004554  C081  F085         	movff	strcpy@to+1,strcpy@cp+1
  8605  004558  D006               	goto	l5770
  8606  00455A                     l5768:
  8607  00455A  0100               	movlb	0	; () banked
  8608  00455C  4B84               	infsnz	strcpy@cp& (0+255),f,b
  8609  00455E  2B85               	incf	(strcpy@cp+1)& (0+255),f,b
  8610  004560  0100               	movlb	0	; () banked
  8611  004562  4B82               	infsnz	strcpy@from& (0+255),f,b
  8612  004564  2B83               	incf	(strcpy@from+1)& (0+255),f,b
  8613  004566                     l5770:
  8614  004566  C082  FFF6         	movff	strcpy@from,tblptrl
  8615  00456A  C083  FFF7         	movff	strcpy@from+1,tblptrh
  8616  00456E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  8617  00456E  6AF8               	clrf	tblptru,c
  8618  004570                     	endif
  8619  004570                     	if	0	;tblptru may be non-zero
  8620  004570                     	endif
  8621  004570  C084  FFD9         	movff	strcpy@cp,fsr2l
  8622  004574  C085  FFDA         	movff	strcpy@cp+1,fsr2h
  8623  004578  0008               	tblrd		*
  8624  00457A  CFF5 FFDF          	movff	tablat,indf2
  8625  00457E  50DF               	movf	indf2,w,c
  8626  004580  B4D8               	btfsc	status,2,c
  8627  004582  0012               	return	
  8628  004584  D7EA               	goto	l5768
  8629  004586                     __end_of_strcpy:
  8630                           	opt stack 0
  8631                           tblptru	equ	0xFF8
  8632                           tblptrh	equ	0xFF7
  8633                           tblptrl	equ	0xFF6
  8634                           tablat	equ	0xFF5
  8635                           prodh	equ	0xFF4
  8636                           prodl	equ	0xFF3
  8637                           intcon	equ	0xFF2
  8638                           intcon2	equ	0xFF1
  8639                           intcon3	equ	0xFF0
  8640                           postinc0	equ	0xFEE
  8641                           wreg	equ	0xFE8
  8642                           postdec1	equ	0xFE5
  8643                           fsr1l	equ	0xFE1
  8644                           indf2	equ	0xFDF
  8645                           postinc2	equ	0xFDE
  8646                           postdec2	equ	0xFDD
  8647                           fsr2h	equ	0xFDA
  8648                           fsr2l	equ	0xFD9
  8649                           status	equ	0xFD8
  8650                           
  8651 ;; *************** function _getRTC *****************
  8652 ;; Defined at:
  8653 ;;		line 44 in file "RTC.c"
  8654 ;; Parameters:    Size  Location     Type
  8655 ;;		None
  8656 ;; Auto vars:     Size  Location     Type
  8657 ;;  i               2    3[BANK0 ] int 
  8658 ;; Return value:  Size  Location     Type
  8659 ;;                  1    wreg      void 
  8660 ;; Registers used:
  8661 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8662 ;; Tracked objects:
  8663 ;;		On entry : 0/0
  8664 ;;		On exit  : 0/0
  8665 ;;		Unchanged: 0/0
  8666 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8667 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8668 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8669 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8670 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8671 ;;Total ram usage:        2 bytes
  8672 ;; Hardware stack levels used:    1
  8673 ;; Hardware stack levels required when called:    9
  8674 ;; This function calls:
  8675 ;;		_I2C_Master_Read
  8676 ;;		_I2C_Master_Start
  8677 ;;		_I2C_Master_Stop
  8678 ;;		_I2C_Master_Write
  8679 ;; This function is called by:
  8680 ;;		_printRTC
  8681 ;;		_initSortTimer
  8682 ;; This function uses a non-reentrant model
  8683 ;;
  8684                           
  8685                           	psect	text26
  8686  003CC2                     __ptext26:
  8687                           	opt stack 0
  8688  003CC2                     _getRTC:
  8689                           	opt stack 18
  8690                           
  8691                           ;RTC.c: 48: I2C_Master_Start();
  8692                           
  8693                           ;incstack = 0
  8694  003CC2  EC62  F025         	call	_I2C_Master_Start	;wreg free
  8695                           
  8696                           ;RTC.c: 49: I2C_Master_Write(0b11010000);
  8697  003CC6  0E00               	movlw	0
  8698  003CC8  0100               	movlb	0	; () banked
  8699  003CCA  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  8700  003CCC  0ED0               	movlw	208
  8701  003CCE  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  8702  003CD0  EC50  F025         	call	_I2C_Master_Write	;wreg free
  8703                           
  8704                           ;RTC.c: 50: I2C_Master_Write(0x00);
  8705  003CD4  0E00               	movlw	0
  8706  003CD6  0100               	movlb	0	; () banked
  8707  003CD8  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  8708  003CDA  0E00               	movlw	0
  8709  003CDC  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  8710  003CDE  EC50  F025         	call	_I2C_Master_Write	;wreg free
  8711                           
  8712                           ;RTC.c: 51: I2C_Master_Stop();
  8713  003CE2  EC5E  F025         	call	_I2C_Master_Stop	;wreg free
  8714                           
  8715                           ;RTC.c: 54: I2C_Master_Start();
  8716  003CE6  EC62  F025         	call	_I2C_Master_Start	;wreg free
  8717                           
  8718                           ;RTC.c: 55: I2C_Master_Write(0b11010001);
  8719  003CEA  0E00               	movlw	0
  8720  003CEC  0100               	movlb	0	; () banked
  8721  003CEE  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  8722  003CF0  0ED1               	movlw	209
  8723  003CF2  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  8724  003CF4  EC50  F025         	call	_I2C_Master_Write	;wreg free
  8725                           
  8726                           ;RTC.c: 56: for(int i = 0; i < 6; i++){
  8727  003CF8  0E00               	movlw	0
  8728  003CFA  0100               	movlb	0	; () banked
  8729  003CFC  6F84               	movwf	(getRTC@i+1)& (0+255),b
  8730  003CFE  0E00               	movlw	0
  8731  003D00  6F83               	movwf	getRTC@i& (0+255),b
  8732  003D02                     l5776:
  8733                           
  8734                           ; BSR set to: 0
  8735  003D02  0100               	movlb	0	; () banked
  8736  003D04  BF84               	btfsc	(getRTC@i+1)& (0+255),7,b
  8737  003D06  D008               	goto	l5780
  8738  003D08  0100               	movlb	0	; () banked
  8739  003D0A  5184               	movf	(getRTC@i+1)& (0+255),w,b
  8740  003D0C  E115               	bnz	l5786
  8741  003D0E  0E06               	movlw	6
  8742  003D10  0100               	movlb	0	; () banked
  8743  003D12  5D83               	subwf	getRTC@i& (0+255),w,b
  8744  003D14  B0D8               	btfsc	status,0,c
  8745  003D16  D010               	goto	l5786
  8746  003D18                     l5780:
  8747                           
  8748                           ; BSR set to: 0
  8749                           ;RTC.c: 57: time[i] = I2C_Master_Read(1);
  8750  003D18  0E24               	movlw	low _time
  8751  003D1A  0100               	movlb	0	; () banked
  8752  003D1C  2583               	addwf	getRTC@i& (0+255),w,b
  8753  003D1E  6ED9               	movwf	fsr2l,c
  8754  003D20  0E01               	movlw	high _time
  8755  003D22  0100               	movlb	0	; () banked
  8756  003D24  2184               	addwfc	(getRTC@i+1)& (0+255),w,b
  8757  003D26  6EDA               	movwf	fsr2h,c
  8758  003D28  0E01               	movlw	1
  8759  003D2A  ECFF  F023         	call	_I2C_Master_Read
  8760  003D2E  6EDF               	movwf	indf2,c
  8761  003D30  0100               	movlb	0	; () banked
  8762  003D32  4B83               	infsnz	getRTC@i& (0+255),f,b
  8763  003D34  2B84               	incf	(getRTC@i+1)& (0+255),f,b
  8764  003D36  D7E5               	goto	l5776
  8765  003D38                     l5786:
  8766                           
  8767                           ; BSR set to: 0
  8768                           ;RTC.c: 58: }
  8769                           ;RTC.c: 59: time[6] = I2C_Master_Read(0);
  8770  003D38  0E00               	movlw	0
  8771  003D3A  ECFF  F023         	call	_I2C_Master_Read
  8772  003D3E  0101               	movlb	1	; () banked
  8773  003D40  6F2A               	movwf	(_time+6)& (0+255),b
  8774                           
  8775                           ;RTC.c: 60: I2C_Master_Stop();
  8776  003D42  EC5E  F025         	call	_I2C_Master_Stop	;wreg free
  8777  003D46  0012               	return		;funcret
  8778  003D48                     __end_of_getRTC:
  8779                           	opt stack 0
  8780                           tblptru	equ	0xFF8
  8781                           tblptrh	equ	0xFF7
  8782                           tblptrl	equ	0xFF6
  8783                           tablat	equ	0xFF5
  8784                           prodh	equ	0xFF4
  8785                           prodl	equ	0xFF3
  8786                           intcon	equ	0xFF2
  8787                           intcon2	equ	0xFF1
  8788                           intcon3	equ	0xFF0
  8789                           postinc0	equ	0xFEE
  8790                           wreg	equ	0xFE8
  8791                           postdec1	equ	0xFE5
  8792                           fsr1l	equ	0xFE1
  8793                           indf2	equ	0xFDF
  8794                           postinc2	equ	0xFDE
  8795                           postdec2	equ	0xFDD
  8796                           fsr2h	equ	0xFDA
  8797                           fsr2l	equ	0xFD9
  8798                           status	equ	0xFD8
  8799                           
  8800 ;; *************** function _I2C_Master_Write *****************
  8801 ;; Defined at:
  8802 ;;		line 49 in file "I2C.c"
  8803 ;; Parameters:    Size  Location     Type
  8804 ;;  d               2    1[BANK0 ] unsigned int 
  8805 ;; Auto vars:     Size  Location     Type
  8806 ;;		None
  8807 ;; Return value:  Size  Location     Type
  8808 ;;                  1    wreg      void 
  8809 ;; Registers used:
  8810 ;;		wreg, status,2, status,0, cstack
  8811 ;; Tracked objects:
  8812 ;;		On entry : 0/0
  8813 ;;		On exit  : 0/0
  8814 ;;		Unchanged: 0/0
  8815 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8816 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8817 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8818 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8819 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8820 ;;Total ram usage:        2 bytes
  8821 ;; Hardware stack levels used:    1
  8822 ;; Hardware stack levels required when called:    8
  8823 ;; This function calls:
  8824 ;;		_I2C_Master_Wait
  8825 ;; This function is called by:
  8826 ;;		_loadRTC
  8827 ;;		_getRTC
  8828 ;; This function uses a non-reentrant model
  8829 ;;
  8830                           
  8831                           	psect	text27
  8832  004AA0                     __ptext27:
  8833                           	opt stack 0
  8834  004AA0                     _I2C_Master_Write:
  8835                           	opt stack 18
  8836                           
  8837                           ;I2C.c: 51: I2C_Master_Wait();
  8838                           
  8839                           ;incstack = 0
  8840  004AA0  EC21  F025         	call	_I2C_Master_Wait	;wreg free
  8841                           
  8842                           ;I2C.c: 52: SSPBUF = d;
  8843  004AA4  C081  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  8844  004AA8  0012               	return		;funcret
  8845  004AAA                     __end_of_I2C_Master_Write:
  8846                           	opt stack 0
  8847                           tblptru	equ	0xFF8
  8848                           tblptrh	equ	0xFF7
  8849                           tblptrl	equ	0xFF6
  8850                           tablat	equ	0xFF5
  8851                           prodh	equ	0xFF4
  8852                           prodl	equ	0xFF3
  8853                           intcon	equ	0xFF2
  8854                           intcon2	equ	0xFF1
  8855                           intcon3	equ	0xFF0
  8856                           postinc0	equ	0xFEE
  8857                           wreg	equ	0xFE8
  8858                           postdec1	equ	0xFE5
  8859                           fsr1l	equ	0xFE1
  8860                           indf2	equ	0xFDF
  8861                           postinc2	equ	0xFDE
  8862                           postdec2	equ	0xFDD
  8863                           fsr2h	equ	0xFDA
  8864                           fsr2l	equ	0xFD9
  8865                           status	equ	0xFD8
  8866                           
  8867 ;; *************** function _I2C_Master_Stop *****************
  8868 ;; Defined at:
  8869 ;;		line 43 in file "I2C.c"
  8870 ;; Parameters:    Size  Location     Type
  8871 ;;		None
  8872 ;; Auto vars:     Size  Location     Type
  8873 ;;		None
  8874 ;; Return value:  Size  Location     Type
  8875 ;;                  1    wreg      void 
  8876 ;; Registers used:
  8877 ;;		wreg, status,2, status,0, cstack
  8878 ;; Tracked objects:
  8879 ;;		On entry : 0/0
  8880 ;;		On exit  : 0/0
  8881 ;;		Unchanged: 0/0
  8882 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8883 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8884 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8885 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8886 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8887 ;;Total ram usage:        0 bytes
  8888 ;; Hardware stack levels used:    1
  8889 ;; Hardware stack levels required when called:    8
  8890 ;; This function calls:
  8891 ;;		_I2C_Master_Wait
  8892 ;; This function is called by:
  8893 ;;		_loadRTC
  8894 ;;		_getRTC
  8895 ;; This function uses a non-reentrant model
  8896 ;;
  8897                           
  8898                           	psect	text28
  8899  004ABC                     __ptext28:
  8900                           	opt stack 0
  8901  004ABC                     _I2C_Master_Stop:
  8902                           	opt stack 18
  8903                           
  8904                           ;I2C.c: 45: I2C_Master_Wait();
  8905                           
  8906                           ;incstack = 0
  8907  004ABC  EC21  F025         	call	_I2C_Master_Wait	;wreg free
  8908                           
  8909                           ;I2C.c: 46: PEN = 1;
  8910  004AC0  84C5               	bsf	4037,2,c	;volatile
  8911  004AC2  0012               	return		;funcret
  8912  004AC4                     __end_of_I2C_Master_Stop:
  8913                           	opt stack 0
  8914                           tblptru	equ	0xFF8
  8915                           tblptrh	equ	0xFF7
  8916                           tblptrl	equ	0xFF6
  8917                           tablat	equ	0xFF5
  8918                           prodh	equ	0xFF4
  8919                           prodl	equ	0xFF3
  8920                           intcon	equ	0xFF2
  8921                           intcon2	equ	0xFF1
  8922                           intcon3	equ	0xFF0
  8923                           postinc0	equ	0xFEE
  8924                           wreg	equ	0xFE8
  8925                           postdec1	equ	0xFE5
  8926                           fsr1l	equ	0xFE1
  8927                           indf2	equ	0xFDF
  8928                           postinc2	equ	0xFDE
  8929                           postdec2	equ	0xFDD
  8930                           fsr2h	equ	0xFDA
  8931                           fsr2l	equ	0xFD9
  8932                           status	equ	0xFD8
  8933                           
  8934 ;; *************** function _I2C_Master_Start *****************
  8935 ;; Defined at:
  8936 ;;		line 31 in file "I2C.c"
  8937 ;; Parameters:    Size  Location     Type
  8938 ;;		None
  8939 ;; Auto vars:     Size  Location     Type
  8940 ;;		None
  8941 ;; Return value:  Size  Location     Type
  8942 ;;                  1    wreg      void 
  8943 ;; Registers used:
  8944 ;;		wreg, status,2, status,0, cstack
  8945 ;; Tracked objects:
  8946 ;;		On entry : 0/0
  8947 ;;		On exit  : 0/0
  8948 ;;		Unchanged: 0/0
  8949 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8950 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8951 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8952 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8953 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8954 ;;Total ram usage:        0 bytes
  8955 ;; Hardware stack levels used:    1
  8956 ;; Hardware stack levels required when called:    8
  8957 ;; This function calls:
  8958 ;;		_I2C_Master_Wait
  8959 ;; This function is called by:
  8960 ;;		_loadRTC
  8961 ;;		_getRTC
  8962 ;; This function uses a non-reentrant model
  8963 ;;
  8964                           
  8965                           	psect	text29
  8966  004AC4                     __ptext29:
  8967                           	opt stack 0
  8968  004AC4                     _I2C_Master_Start:
  8969                           	opt stack 18
  8970                           
  8971                           ;I2C.c: 33: I2C_Master_Wait();
  8972                           
  8973                           ;incstack = 0
  8974  004AC4  EC21  F025         	call	_I2C_Master_Wait	;wreg free
  8975                           
  8976                           ;I2C.c: 34: SEN = 1;
  8977  004AC8  80C5               	bsf	4037,0,c	;volatile
  8978  004ACA  0012               	return		;funcret
  8979  004ACC                     __end_of_I2C_Master_Start:
  8980                           	opt stack 0
  8981                           tblptru	equ	0xFF8
  8982                           tblptrh	equ	0xFF7
  8983                           tblptrl	equ	0xFF6
  8984                           tablat	equ	0xFF5
  8985                           prodh	equ	0xFF4
  8986                           prodl	equ	0xFF3
  8987                           intcon	equ	0xFF2
  8988                           intcon2	equ	0xFF1
  8989                           intcon3	equ	0xFF0
  8990                           postinc0	equ	0xFEE
  8991                           wreg	equ	0xFE8
  8992                           postdec1	equ	0xFE5
  8993                           fsr1l	equ	0xFE1
  8994                           indf2	equ	0xFDF
  8995                           postinc2	equ	0xFDE
  8996                           postdec2	equ	0xFDD
  8997                           fsr2h	equ	0xFDA
  8998                           fsr2l	equ	0xFD9
  8999                           status	equ	0xFD8
  9000                           
  9001 ;; *************** function _I2C_Master_Read *****************
  9002 ;; Defined at:
  9003 ;;		line 55 in file "I2C.c"
  9004 ;; Parameters:    Size  Location     Type
  9005 ;;  a               1    wreg     unsigned char 
  9006 ;; Auto vars:     Size  Location     Type
  9007 ;;  a               1    1[BANK0 ] unsigned char 
  9008 ;;  temp            1    2[BANK0 ] unsigned char 
  9009 ;; Return value:  Size  Location     Type
  9010 ;;                  1    wreg      unsigned char 
  9011 ;; Registers used:
  9012 ;;		wreg, status,2, status,0, cstack
  9013 ;; Tracked objects:
  9014 ;;		On entry : 0/0
  9015 ;;		On exit  : 0/0
  9016 ;;		Unchanged: 0/0
  9017 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9018 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9019 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9020 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9021 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9022 ;;Total ram usage:        2 bytes
  9023 ;; Hardware stack levels used:    1
  9024 ;; Hardware stack levels required when called:    8
  9025 ;; This function calls:
  9026 ;;		_I2C_Master_Wait
  9027 ;; This function is called by:
  9028 ;;		_getRTC
  9029 ;; This function uses a non-reentrant model
  9030 ;;
  9031                           
  9032                           	psect	text30
  9033  0047FE                     __ptext30:
  9034                           	opt stack 0
  9035  0047FE                     _I2C_Master_Read:
  9036                           	opt stack 18
  9037                           
  9038                           ;incstack = 0
  9039                           ;I2C_Master_Read@a stored from wreg
  9040  0047FE  0100               	movlb	0	; () banked
  9041  004800  6F81               	movwf	I2C_Master_Read@a& (0+255),b
  9042                           
  9043                           ;I2C.c: 57: unsigned char temp;
  9044                           ;I2C.c: 58: I2C_Master_Wait();
  9045  004802  EC21  F025         	call	_I2C_Master_Wait	;wreg free
  9046                           
  9047                           ;I2C.c: 59: RCEN = 1;
  9048  004806  86C5               	bsf	4037,3,c	;volatile
  9049                           
  9050                           ;I2C.c: 60: I2C_Master_Wait();
  9051  004808  EC21  F025         	call	_I2C_Master_Wait	;wreg free
  9052                           
  9053                           ;I2C.c: 61: temp = SSPBUF;
  9054  00480C  CFC9 F082          	movff	4041,I2C_Master_Read@temp	;volatile
  9055                           
  9056                           ;I2C.c: 62: I2C_Master_Wait();
  9057  004810  EC21  F025         	call	_I2C_Master_Wait	;wreg free
  9058                           
  9059                           ;I2C.c: 63: ACKDT = (a)?0:1;
  9060  004814  0100               	movlb	0	; () banked
  9061  004816  5181               	movf	I2C_Master_Read@a& (0+255),w,b
  9062  004818  0100               	movlb	0	; () banked
  9063  00481A  A4D8               	btfss	status,2,c
  9064  00481C  D002               	goto	u3780
  9065  00481E  8AC5               	bsf	4037,5,c	;volatile
  9066  004820  D001               	goto	l5464
  9067  004822                     u3780:
  9068  004822  9AC5               	bcf	4037,5,c	;volatile
  9069  004824                     l5464:
  9070                           
  9071                           ;I2C.c: 64: ACKEN = 1;
  9072  004824  88C5               	bsf	4037,4,c	;volatile
  9073                           
  9074                           ;I2C.c: 65: return temp;
  9075  004826  0100               	movlb	0	; () banked
  9076  004828  5182               	movf	I2C_Master_Read@temp& (0+255),w,b
  9077  00482A  0012               	return	
  9078  00482C                     __end_of_I2C_Master_Read:
  9079                           	opt stack 0
  9080                           tblptru	equ	0xFF8
  9081                           tblptrh	equ	0xFF7
  9082                           tblptrl	equ	0xFF6
  9083                           tablat	equ	0xFF5
  9084                           prodh	equ	0xFF4
  9085                           prodl	equ	0xFF3
  9086                           intcon	equ	0xFF2
  9087                           intcon2	equ	0xFF1
  9088                           intcon3	equ	0xFF0
  9089                           postinc0	equ	0xFEE
  9090                           wreg	equ	0xFE8
  9091                           postdec1	equ	0xFE5
  9092                           fsr1l	equ	0xFE1
  9093                           indf2	equ	0xFDF
  9094                           postinc2	equ	0xFDE
  9095                           postdec2	equ	0xFDD
  9096                           fsr2h	equ	0xFDA
  9097                           fsr2l	equ	0xFD9
  9098                           status	equ	0xFD8
  9099                           
  9100 ;; *************** function _I2C_Master_Wait *****************
  9101 ;; Defined at:
  9102 ;;		line 26 in file "I2C.c"
  9103 ;; Parameters:    Size  Location     Type
  9104 ;;		None
  9105 ;; Auto vars:     Size  Location     Type
  9106 ;;		None
  9107 ;; Return value:  Size  Location     Type
  9108 ;;                  1    wreg      void 
  9109 ;; Registers used:
  9110 ;;		wreg, status,2, status,0
  9111 ;; Tracked objects:
  9112 ;;		On entry : 0/0
  9113 ;;		On exit  : 0/0
  9114 ;;		Unchanged: 0/0
  9115 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9116 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9117 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9118 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9119 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9120 ;;Total ram usage:        1 bytes
  9121 ;; Hardware stack levels used:    1
  9122 ;; Hardware stack levels required when called:    7
  9123 ;; This function calls:
  9124 ;;		Nothing
  9125 ;; This function is called by:
  9126 ;;		_I2C_Master_Start
  9127 ;;		_I2C_Master_Stop
  9128 ;;		_I2C_Master_Write
  9129 ;;		_I2C_Master_Read
  9130 ;;		_I2C_Master_RepeatedStart
  9131 ;; This function uses a non-reentrant model
  9132 ;;
  9133                           
  9134                           	psect	text31
  9135  004A42                     __ptext31:
  9136                           	opt stack 0
  9137  004A42                     _I2C_Master_Wait:
  9138                           	opt stack 18
  9139  004A42                     l66:
  9140  004A42  B4C7               	btfsc	4039,2,c	;volatile
  9141  004A44  D7FE               	goto	l66
  9142  004A46  CFC5 F080          	movff	4037,??_I2C_Master_Wait	;volatile
  9143  004A4A  0E1F               	movlw	31
  9144  004A4C  0100               	movlb	0	; () banked
  9145  004A4E  1780               	andwf	??_I2C_Master_Wait& (0+255),f,b
  9146  004A50  B4D8               	btfsc	status,2,c
  9147  004A52  0012               	return	
  9148  004A54  D7F6               	goto	l66
  9149  004A56                     __end_of_I2C_Master_Wait:
  9150                           	opt stack 0
  9151                           tblptru	equ	0xFF8
  9152                           tblptrh	equ	0xFF7
  9153                           tblptrl	equ	0xFF6
  9154                           tablat	equ	0xFF5
  9155                           prodh	equ	0xFF4
  9156                           prodl	equ	0xFF3
  9157                           intcon	equ	0xFF2
  9158                           intcon2	equ	0xFF1
  9159                           intcon3	equ	0xFF0
  9160                           postinc0	equ	0xFEE
  9161                           wreg	equ	0xFE8
  9162                           postdec1	equ	0xFE5
  9163                           fsr1l	equ	0xFE1
  9164                           indf2	equ	0xFDF
  9165                           postinc2	equ	0xFDE
  9166                           postdec2	equ	0xFDD
  9167                           fsr2h	equ	0xFDA
  9168                           fsr2l	equ	0xFD9
  9169                           status	equ	0xFD8
  9170                           
  9171 ;; *************** function _change_state_to_menu_22 *****************
  9172 ;; Defined at:
  9173 ;;		line 498 in file "UI.c"
  9174 ;; Parameters:    Size  Location     Type
  9175 ;;		None
  9176 ;; Auto vars:     Size  Location     Type
  9177 ;;		None
  9178 ;; Return value:  Size  Location     Type
  9179 ;;                  1    wreg      void 
  9180 ;; Registers used:
  9181 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9182 ;; Tracked objects:
  9183 ;;		On entry : 0/0
  9184 ;;		On exit  : 0/0
  9185 ;;		Unchanged: 0/0
  9186 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9187 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9188 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9189 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9190 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9191 ;;Total ram usage:        0 bytes
  9192 ;; Hardware stack levels used:    1
  9193 ;; Hardware stack levels required when called:   10
  9194 ;; This function calls:
  9195 ;;		_lcdInst
  9196 ;;		_printf
  9197 ;; This function is called by:
  9198 ;;		_UI
  9199 ;; This function uses a non-reentrant model
  9200 ;;
  9201                           
  9202                           	psect	text32
  9203  0044E0                     __ptext32:
  9204                           	opt stack 0
  9205  0044E0                     _change_state_to_menu_22:
  9206                           	opt stack 19
  9207                           
  9208                           ;UI.c: 499: cur_state = 22;
  9209                           
  9210                           ; BSR set to: 0
  9211                           ;incstack = 0
  9212  0044E0  0E00               	movlw	0
  9213  0044E2  0100               	movlb	0	; () banked
  9214  0044E4  6FE7               	movwf	(_cur_state+1)& (0+255),b
  9215  0044E6  0E16               	movlw	22
  9216  0044E8  6FE6               	movwf	_cur_state& (0+255),b
  9217                           
  9218                           ; BSR set to: 0
  9219                           ;UI.c: 501: lcdInst(0b10000000);;
  9220  0044EA  0E80               	movlw	128
  9221  0044EC  EC3C  F025         	call	_lcdInst
  9222                           
  9223                           ;UI.c: 502: printf("2. SORT        <");
  9224  0044F0  0EC4               	movlw	low STR_34
  9225  0044F2  0100               	movlb	0	; () banked
  9226  0044F4  6F8E               	movwf	printf@f& (0+255),b
  9227  0044F6  0EFD               	movlw	high STR_34
  9228  0044F8  0100               	movlb	0	; () banked
  9229  0044FA  6F8F               	movwf	(printf@f+1)& (0+255),b
  9230  0044FC  ECB8  F008         	call	_printf	;wreg free
  9231                           
  9232                           ;UI.c: 503: lcdInst(0b11000000);;
  9233  004500  0EC0               	movlw	192
  9234  004502  EC3C  F025         	call	_lcdInst
  9235                           
  9236                           ;UI.c: 504: printf("3. LOGS         ");
  9237  004506  0E09               	movlw	low STR_36
  9238  004508  0100               	movlb	0	; () banked
  9239  00450A  6F8E               	movwf	printf@f& (0+255),b
  9240  00450C  0EFD               	movlw	high STR_36
  9241  00450E  0100               	movlb	0	; () banked
  9242  004510  6F8F               	movwf	(printf@f+1)& (0+255),b
  9243  004512  ECB8  F008         	call	_printf	;wreg free
  9244  004516  0012               	return		;funcret
  9245  004518                     __end_of_change_state_to_menu_22:
  9246                           	opt stack 0
  9247                           tblptru	equ	0xFF8
  9248                           tblptrh	equ	0xFF7
  9249                           tblptrl	equ	0xFF6
  9250                           tablat	equ	0xFF5
  9251                           prodh	equ	0xFF4
  9252                           prodl	equ	0xFF3
  9253                           intcon	equ	0xFF2
  9254                           intcon2	equ	0xFF1
  9255                           intcon3	equ	0xFF0
  9256                           postinc0	equ	0xFEE
  9257                           wreg	equ	0xFE8
  9258                           postdec1	equ	0xFE5
  9259                           fsr1l	equ	0xFE1
  9260                           indf2	equ	0xFDF
  9261                           postinc2	equ	0xFDE
  9262                           postdec2	equ	0xFDD
  9263                           fsr2h	equ	0xFDA
  9264                           fsr2l	equ	0xFD9
  9265                           status	equ	0xFD8
  9266                           
  9267 ;; *************** function _change_state_to_menu_12 *****************
  9268 ;; Defined at:
  9269 ;;		line 490 in file "UI.c"
  9270 ;; Parameters:    Size  Location     Type
  9271 ;;		None
  9272 ;; Auto vars:     Size  Location     Type
  9273 ;;		None
  9274 ;; Return value:  Size  Location     Type
  9275 ;;                  1    wreg      void 
  9276 ;; Registers used:
  9277 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9278 ;; Tracked objects:
  9279 ;;		On entry : 0/0
  9280 ;;		On exit  : 0/0
  9281 ;;		Unchanged: 0/0
  9282 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9283 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9284 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9285 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9286 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9287 ;;Total ram usage:        0 bytes
  9288 ;; Hardware stack levels used:    1
  9289 ;; Hardware stack levels required when called:   10
  9290 ;; This function calls:
  9291 ;;		_lcdInst
  9292 ;;		_printf
  9293 ;; This function is called by:
  9294 ;;		_UI
  9295 ;; This function uses a non-reentrant model
  9296 ;;
  9297                           
  9298                           	psect	text33
  9299  004518                     __ptext33:
  9300                           	opt stack 0
  9301  004518                     _change_state_to_menu_12:
  9302                           	opt stack 19
  9303                           
  9304                           ;UI.c: 491: cur_state = 12;
  9305                           
  9306                           ;incstack = 0
  9307  004518  0E00               	movlw	0
  9308  00451A  0100               	movlb	0	; () banked
  9309  00451C  6FE7               	movwf	(_cur_state+1)& (0+255),b
  9310  00451E  0E0C               	movlw	12
  9311  004520  6FE6               	movwf	_cur_state& (0+255),b
  9312                           
  9313                           ; BSR set to: 0
  9314                           ;UI.c: 493: lcdInst(0b10000000);;
  9315  004522  0E80               	movlw	128
  9316  004524  EC3C  F025         	call	_lcdInst
  9317                           
  9318                           ;UI.c: 494: printf("1. DATE/TIME    ");
  9319  004528  0E2B               	movlw	low STR_33
  9320  00452A  0100               	movlb	0	; () banked
  9321  00452C  6F8E               	movwf	printf@f& (0+255),b
  9322  00452E  0EFD               	movlw	high STR_33
  9323  004530  0100               	movlb	0	; () banked
  9324  004532  6F8F               	movwf	(printf@f+1)& (0+255),b
  9325  004534  ECB8  F008         	call	_printf	;wreg free
  9326                           
  9327                           ;UI.c: 495: lcdInst(0b11000000);;
  9328  004538  0EC0               	movlw	192
  9329  00453A  EC3C  F025         	call	_lcdInst
  9330                           
  9331                           ;UI.c: 496: printf("2. SORT        <");
  9332  00453E  0EC4               	movlw	low STR_34
  9333  004540  0100               	movlb	0	; () banked
  9334  004542  6F8E               	movwf	printf@f& (0+255),b
  9335  004544  0EFD               	movlw	high STR_34
  9336  004546  0100               	movlb	0	; () banked
  9337  004548  6F8F               	movwf	(printf@f+1)& (0+255),b
  9338  00454A  ECB8  F008         	call	_printf	;wreg free
  9339  00454E  0012               	return		;funcret
  9340  004550                     __end_of_change_state_to_menu_12:
  9341                           	opt stack 0
  9342                           tblptru	equ	0xFF8
  9343                           tblptrh	equ	0xFF7
  9344                           tblptrl	equ	0xFF6
  9345                           tablat	equ	0xFF5
  9346                           prodh	equ	0xFF4
  9347                           prodl	equ	0xFF3
  9348                           intcon	equ	0xFF2
  9349                           intcon2	equ	0xFF1
  9350                           intcon3	equ	0xFF0
  9351                           postinc0	equ	0xFEE
  9352                           wreg	equ	0xFE8
  9353                           postdec1	equ	0xFE5
  9354                           fsr1l	equ	0xFE1
  9355                           indf2	equ	0xFDF
  9356                           postinc2	equ	0xFDE
  9357                           postdec2	equ	0xFDD
  9358                           fsr2h	equ	0xFDA
  9359                           fsr2l	equ	0xFD9
  9360                           status	equ	0xFD8
  9361                           
  9362 ;; *************** function ___awmod *****************
  9363 ;; Defined at:
  9364 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
  9365 ;; Parameters:    Size  Location     Type
  9366 ;;  dividend        2    0[BANK0 ] int 
  9367 ;;  divisor         2    2[BANK0 ] int 
  9368 ;; Auto vars:     Size  Location     Type
  9369 ;;  sign            1    5[BANK0 ] unsigned char 
  9370 ;;  counter         1    4[BANK0 ] unsigned char 
  9371 ;; Return value:  Size  Location     Type
  9372 ;;                  2    0[BANK0 ] int 
  9373 ;; Registers used:
  9374 ;;		wreg, status,2, status,0
  9375 ;; Tracked objects:
  9376 ;;		On entry : 0/0
  9377 ;;		On exit  : 0/0
  9378 ;;		Unchanged: 0/0
  9379 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9380 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9381 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9382 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9383 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9384 ;;Total ram usage:        6 bytes
  9385 ;; Hardware stack levels used:    1
  9386 ;; Hardware stack levels required when called:    7
  9387 ;; This function calls:
  9388 ;;		Nothing
  9389 ;; This function is called by:
  9390 ;;		_UI
  9391 ;; This function uses a non-reentrant model
  9392 ;;
  9393                           
  9394                           	psect	text34
  9395  003B94                     __ptext34:
  9396                           	opt stack 0
  9397  003B94                     ___awmod:
  9398                           	opt stack 22
  9399                           
  9400                           ;incstack = 0
  9401  003B94  0E00               	movlw	0
  9402  003B96  0100               	movlb	0	; () banked
  9403  003B98  6F85               	movwf	___awmod@sign& (0+255),b
  9404                           
  9405                           ; BSR set to: 0
  9406  003B9A  0100               	movlb	0	; () banked
  9407  003B9C  AF81               	btfss	(___awmod@dividend+1)& (0+255),7,b
  9408  003B9E  D008               	goto	l7622
  9409                           
  9410                           ; BSR set to: 0
  9411  003BA0  0100               	movlb	0	; () banked
  9412  003BA2  6D80               	negf	___awmod@dividend& (0+255),b
  9413  003BA4  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
  9414  003BA6  B0D8               	btfsc	status,0,c
  9415  003BA8  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
  9416                           
  9417                           ; BSR set to: 0
  9418  003BAA  0E01               	movlw	1
  9419  003BAC  0100               	movlb	0	; () banked
  9420  003BAE  6F85               	movwf	___awmod@sign& (0+255),b
  9421  003BB0                     l7622:
  9422                           
  9423                           ; BSR set to: 0
  9424  003BB0  0100               	movlb	0	; () banked
  9425  003BB2  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
  9426  003BB4  D005               	goto	l7626
  9427                           
  9428                           ; BSR set to: 0
  9429  003BB6  0100               	movlb	0	; () banked
  9430  003BB8  6D82               	negf	___awmod@divisor& (0+255),b
  9431  003BBA  1F83               	comf	(___awmod@divisor+1)& (0+255),f,b
  9432  003BBC  B0D8               	btfsc	status,0,c
  9433  003BBE  2B83               	incf	(___awmod@divisor+1)& (0+255),f,b
  9434  003BC0                     l7626:
  9435                           
  9436                           ; BSR set to: 0
  9437  003BC0  0100               	movlb	0	; () banked
  9438  003BC2  5182               	movf	___awmod@divisor& (0+255),w,b
  9439  003BC4  0100               	movlb	0	; () banked
  9440  003BC6  1183               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  9441  003BC8  B4D8               	btfsc	status,2,c
  9442  003BCA  D026               	goto	l7642
  9443                           
  9444                           ; BSR set to: 0
  9445  003BCC  0E01               	movlw	1
  9446  003BCE  0100               	movlb	0	; () banked
  9447  003BD0  6F84               	movwf	___awmod@counter& (0+255),b
  9448  003BD2  D006               	goto	l7632
  9449  003BD4                     l7630:
  9450                           
  9451                           ; BSR set to: 0
  9452  003BD4  0100               	movlb	0	; () banked
  9453  003BD6  90D8               	bcf	status,0,c
  9454  003BD8  3782               	rlcf	___awmod@divisor& (0+255),f,b
  9455  003BDA  3783               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  9456  003BDC  0100               	movlb	0	; () banked
  9457  003BDE  2B84               	incf	___awmod@counter& (0+255),f,b
  9458  003BE0                     l7632:
  9459                           
  9460                           ; BSR set to: 0
  9461  003BE0  0100               	movlb	0	; () banked
  9462  003BE2  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
  9463  003BE4  D7F7               	goto	l7630
  9464  003BE6                     l7634:
  9465                           
  9466                           ; BSR set to: 0
  9467  003BE6  0100               	movlb	0	; () banked
  9468  003BE8  5182               	movf	___awmod@divisor& (0+255),w,b
  9469  003BEA  0100               	movlb	0	; () banked
  9470  003BEC  5D80               	subwf	___awmod@dividend& (0+255),w,b
  9471  003BEE  0100               	movlb	0	; () banked
  9472  003BF0  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
  9473  003BF2  0100               	movlb	0	; () banked
  9474  003BF4  5981               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  9475  003BF6  A0D8               	btfss	status,0,c
  9476  003BF8  D008               	goto	l7638
  9477                           
  9478                           ; BSR set to: 0
  9479  003BFA  0100               	movlb	0	; () banked
  9480  003BFC  5182               	movf	___awmod@divisor& (0+255),w,b
  9481  003BFE  0100               	movlb	0	; () banked
  9482  003C00  5F80               	subwf	___awmod@dividend& (0+255),f,b
  9483  003C02  0100               	movlb	0	; () banked
  9484  003C04  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
  9485  003C06  0100               	movlb	0	; () banked
  9486  003C08  5B81               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  9487  003C0A                     l7638:
  9488                           
  9489                           ; BSR set to: 0
  9490  003C0A  0100               	movlb	0	; () banked
  9491  003C0C  90D8               	bcf	status,0,c
  9492  003C0E  3383               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  9493  003C10  3382               	rrcf	___awmod@divisor& (0+255),f,b
  9494                           
  9495                           ; BSR set to: 0
  9496  003C12  0100               	movlb	0	; () banked
  9497  003C14  2F84               	decfsz	___awmod@counter& (0+255),f,b
  9498  003C16  D7E7               	goto	l7634
  9499  003C18                     l7642:
  9500                           
  9501                           ; BSR set to: 0
  9502  003C18  0100               	movlb	0	; () banked
  9503  003C1A  5185               	movf	___awmod@sign& (0+255),w,b
  9504  003C1C  0100               	movlb	0	; () banked
  9505  003C1E  B4D8               	btfsc	status,2,c
  9506  003C20  D005               	goto	l7646
  9507                           
  9508                           ; BSR set to: 0
  9509  003C22  0100               	movlb	0	; () banked
  9510  003C24  6D80               	negf	___awmod@dividend& (0+255),b
  9511  003C26  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
  9512  003C28  B0D8               	btfsc	status,0,c
  9513  003C2A  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
  9514  003C2C                     l7646:
  9515                           
  9516                           ; BSR set to: 0
  9517  003C2C  C080  F080         	movff	___awmod@dividend,?___awmod
  9518  003C30  C081  F081         	movff	___awmod@dividend+1,?___awmod+1
  9519  003C34  0012               	return	
  9520  003C36                     __end_of___awmod:
  9521                           	opt stack 0
  9522                           tblptru	equ	0xFF8
  9523                           tblptrh	equ	0xFF7
  9524                           tblptrl	equ	0xFF6
  9525                           tablat	equ	0xFF5
  9526                           prodh	equ	0xFF4
  9527                           prodl	equ	0xFF3
  9528                           intcon	equ	0xFF2
  9529                           intcon2	equ	0xFF1
  9530                           intcon3	equ	0xFF0
  9531                           postinc0	equ	0xFEE
  9532                           wreg	equ	0xFE8
  9533                           postdec1	equ	0xFE5
  9534                           fsr1l	equ	0xFE1
  9535                           indf2	equ	0xFDF
  9536                           postinc2	equ	0xFDE
  9537                           postdec2	equ	0xFDD
  9538                           fsr2h	equ	0xFDA
  9539                           fsr2l	equ	0xFD9
  9540                           status	equ	0xFD8
  9541                           
  9542 ;; *************** function ___awdiv *****************
  9543 ;; Defined at:
  9544 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
  9545 ;; Parameters:    Size  Location     Type
  9546 ;;  dividend        2    6[BANK0 ] int 
  9547 ;;  divisor         2    8[BANK0 ] int 
  9548 ;; Auto vars:     Size  Location     Type
  9549 ;;  quotient        2   12[BANK0 ] int 
  9550 ;;  sign            1   11[BANK0 ] unsigned char 
  9551 ;;  counter         1   10[BANK0 ] unsigned char 
  9552 ;; Return value:  Size  Location     Type
  9553 ;;                  2    6[BANK0 ] int 
  9554 ;; Registers used:
  9555 ;;		wreg, status,2, status,0
  9556 ;; Tracked objects:
  9557 ;;		On entry : 0/0
  9558 ;;		On exit  : 0/0
  9559 ;;		Unchanged: 0/0
  9560 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9561 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9562 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9563 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9564 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9565 ;;Total ram usage:        8 bytes
  9566 ;; Hardware stack levels used:    1
  9567 ;; Hardware stack levels required when called:    7
  9568 ;; This function calls:
  9569 ;;		Nothing
  9570 ;; This function is called by:
  9571 ;;		_UI
  9572 ;; This function uses a non-reentrant model
  9573 ;;
  9574                           
  9575                           	psect	text35
  9576  003970                     __ptext35:
  9577                           	opt stack 0
  9578  003970                     ___awdiv:
  9579                           	opt stack 22
  9580                           
  9581                           ; BSR set to: 0
  9582                           ;incstack = 0
  9583  003970  0E00               	movlw	0
  9584  003972  0100               	movlb	0	; () banked
  9585  003974  6F8B               	movwf	___awdiv@sign& (0+255),b
  9586                           
  9587                           ; BSR set to: 0
  9588  003976  0100               	movlb	0	; () banked
  9589  003978  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  9590  00397A  D008               	goto	l7578
  9591                           
  9592                           ; BSR set to: 0
  9593  00397C  0100               	movlb	0	; () banked
  9594  00397E  6D88               	negf	___awdiv@divisor& (0+255),b
  9595  003980  1F89               	comf	(___awdiv@divisor+1)& (0+255),f,b
  9596  003982  B0D8               	btfsc	status,0,c
  9597  003984  2B89               	incf	(___awdiv@divisor+1)& (0+255),f,b
  9598                           
  9599                           ; BSR set to: 0
  9600  003986  0E01               	movlw	1
  9601  003988  0100               	movlb	0	; () banked
  9602  00398A  6F8B               	movwf	___awdiv@sign& (0+255),b
  9603  00398C                     l7578:
  9604                           
  9605                           ; BSR set to: 0
  9606  00398C  0100               	movlb	0	; () banked
  9607  00398E  AF87               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  9608  003990  D008               	goto	l7584
  9609                           
  9610                           ; BSR set to: 0
  9611  003992  0100               	movlb	0	; () banked
  9612  003994  6D86               	negf	___awdiv@dividend& (0+255),b
  9613  003996  1F87               	comf	(___awdiv@dividend+1)& (0+255),f,b
  9614  003998  B0D8               	btfsc	status,0,c
  9615  00399A  2B87               	incf	(___awdiv@dividend+1)& (0+255),f,b
  9616                           
  9617                           ; BSR set to: 0
  9618  00399C  0E01               	movlw	1
  9619  00399E  0100               	movlb	0	; () banked
  9620  0039A0  1B8B               	xorwf	___awdiv@sign& (0+255),f,b
  9621  0039A2                     l7584:
  9622                           
  9623                           ; BSR set to: 0
  9624  0039A2  0E00               	movlw	0
  9625  0039A4  0100               	movlb	0	; () banked
  9626  0039A6  6F8D               	movwf	(___awdiv@quotient+1)& (0+255),b
  9627  0039A8  0E00               	movlw	0
  9628  0039AA  6F8C               	movwf	___awdiv@quotient& (0+255),b
  9629                           
  9630                           ; BSR set to: 0
  9631  0039AC  0100               	movlb	0	; () banked
  9632  0039AE  5188               	movf	___awdiv@divisor& (0+255),w,b
  9633  0039B0  0100               	movlb	0	; () banked
  9634  0039B2  1189               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  9635  0039B4  B4D8               	btfsc	status,2,c
  9636  0039B6  D02C               	goto	l7606
  9637                           
  9638                           ; BSR set to: 0
  9639  0039B8  0E01               	movlw	1
  9640  0039BA  0100               	movlb	0	; () banked
  9641  0039BC  6F8A               	movwf	___awdiv@counter& (0+255),b
  9642  0039BE  D006               	goto	l7592
  9643  0039C0                     l7590:
  9644                           
  9645                           ; BSR set to: 0
  9646  0039C0  0100               	movlb	0	; () banked
  9647  0039C2  90D8               	bcf	status,0,c
  9648  0039C4  3788               	rlcf	___awdiv@divisor& (0+255),f,b
  9649  0039C6  3789               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  9650  0039C8  0100               	movlb	0	; () banked
  9651  0039CA  2B8A               	incf	___awdiv@counter& (0+255),f,b
  9652  0039CC                     l7592:
  9653                           
  9654                           ; BSR set to: 0
  9655  0039CC  0100               	movlb	0	; () banked
  9656  0039CE  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  9657  0039D0  D7F7               	goto	l7590
  9658  0039D2                     l7594:
  9659                           
  9660                           ; BSR set to: 0
  9661  0039D2  0100               	movlb	0	; () banked
  9662  0039D4  90D8               	bcf	status,0,c
  9663  0039D6  378C               	rlcf	___awdiv@quotient& (0+255),f,b
  9664  0039D8  378D               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  9665                           
  9666                           ; BSR set to: 0
  9667  0039DA  0100               	movlb	0	; () banked
  9668  0039DC  5188               	movf	___awdiv@divisor& (0+255),w,b
  9669  0039DE  0100               	movlb	0	; () banked
  9670  0039E0  5D86               	subwf	___awdiv@dividend& (0+255),w,b
  9671  0039E2  0100               	movlb	0	; () banked
  9672  0039E4  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
  9673  0039E6  0100               	movlb	0	; () banked
  9674  0039E8  5987               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  9675  0039EA  A0D8               	btfss	status,0,c
  9676  0039EC  D00A               	goto	l7602
  9677                           
  9678                           ; BSR set to: 0
  9679  0039EE  0100               	movlb	0	; () banked
  9680  0039F0  5188               	movf	___awdiv@divisor& (0+255),w,b
  9681  0039F2  0100               	movlb	0	; () banked
  9682  0039F4  5F86               	subwf	___awdiv@dividend& (0+255),f,b
  9683  0039F6  0100               	movlb	0	; () banked
  9684  0039F8  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
  9685  0039FA  0100               	movlb	0	; () banked
  9686  0039FC  5B87               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  9687                           
  9688                           ; BSR set to: 0
  9689  0039FE  0100               	movlb	0	; () banked
  9690  003A00  818C               	bsf	___awdiv@quotient& (0+255),0,b
  9691  003A02                     l7602:
  9692                           
  9693                           ; BSR set to: 0
  9694  003A02  0100               	movlb	0	; () banked
  9695  003A04  90D8               	bcf	status,0,c
  9696  003A06  3389               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  9697  003A08  3388               	rrcf	___awdiv@divisor& (0+255),f,b
  9698                           
  9699                           ; BSR set to: 0
  9700  003A0A  0100               	movlb	0	; () banked
  9701  003A0C  2F8A               	decfsz	___awdiv@counter& (0+255),f,b
  9702  003A0E  D7E1               	goto	l7594
  9703  003A10                     l7606:
  9704                           
  9705                           ; BSR set to: 0
  9706  003A10  0100               	movlb	0	; () banked
  9707  003A12  518B               	movf	___awdiv@sign& (0+255),w,b
  9708  003A14  0100               	movlb	0	; () banked
  9709  003A16  B4D8               	btfsc	status,2,c
  9710  003A18  D005               	goto	l7610
  9711                           
  9712                           ; BSR set to: 0
  9713  003A1A  0100               	movlb	0	; () banked
  9714  003A1C  6D8C               	negf	___awdiv@quotient& (0+255),b
  9715  003A1E  1F8D               	comf	(___awdiv@quotient+1)& (0+255),f,b
  9716  003A20  B0D8               	btfsc	status,0,c
  9717  003A22  2B8D               	incf	(___awdiv@quotient+1)& (0+255),f,b
  9718  003A24                     l7610:
  9719                           
  9720                           ; BSR set to: 0
  9721  003A24  C08C  F086         	movff	___awdiv@quotient,?___awdiv
  9722  003A28  C08D  F087         	movff	___awdiv@quotient+1,?___awdiv+1
  9723  003A2C  0012               	return	
  9724  003A2E                     __end_of___awdiv:
  9725                           	opt stack 0
  9726                           tblptru	equ	0xFF8
  9727                           tblptrh	equ	0xFF7
  9728                           tblptrl	equ	0xFF6
  9729                           tablat	equ	0xFF5
  9730                           prodh	equ	0xFF4
  9731                           prodl	equ	0xFF3
  9732                           intcon	equ	0xFF2
  9733                           intcon2	equ	0xFF1
  9734                           intcon3	equ	0xFF0
  9735                           postinc0	equ	0xFEE
  9736                           wreg	equ	0xFE8
  9737                           postdec1	equ	0xFE5
  9738                           fsr1l	equ	0xFE1
  9739                           indf2	equ	0xFDF
  9740                           postinc2	equ	0xFDE
  9741                           postdec2	equ	0xFDD
  9742                           fsr2h	equ	0xFDA
  9743                           fsr2l	equ	0xFD9
  9744                           status	equ	0xFD8
  9745                           
  9746 ;; *************** function _Test *****************
  9747 ;; Defined at:
  9748 ;;		line 30 in file "Test.c"
  9749 ;; Parameters:    Size  Location     Type
  9750 ;;		None
  9751 ;; Auto vars:     Size  Location     Type
  9752 ;;		None
  9753 ;; Return value:  Size  Location     Type
  9754 ;;                  1    wreg      void 
  9755 ;; Registers used:
  9756 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9757 ;; Tracked objects:
  9758 ;;		On entry : 0/0
  9759 ;;		On exit  : 0/0
  9760 ;;		Unchanged: 0/0
  9761 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9762 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9763 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9764 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9765 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9766 ;;Total ram usage:        2 bytes
  9767 ;; Hardware stack levels used:    1
  9768 ;; Hardware stack levels required when called:   11
  9769 ;; This function calls:
  9770 ;;		_BlockerTest
  9771 ;;		_BothServos
  9772 ;;		_EEPROMTest
  9773 ;;		_PortTestA5
  9774 ;;		_PortTests
  9775 ;;		_PusherTest
  9776 ;;		_SpeedTest
  9777 ;;		_actuatorTest
  9778 ;;		_algorithmTest
  9779 ;;		_lcdInst
  9780 ;;		_printf
  9781 ;;		_sensorTest
  9782 ;; This function is called by:
  9783 ;;		_main
  9784 ;; This function uses a non-reentrant model
  9785 ;;
  9786                           
  9787                           	psect	text36
  9788  003450                     __ptext36:
  9789                           	opt stack 0
  9790  003450                     _Test:
  9791                           	opt stack 19
  9792  003450                     
  9793                           ;Test.c: 33: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
  9794  003450  0E01               	movlw	1
  9795  003452  EC3C  F025         	call	_lcdInst
  9796  003456  0E68               	movlw	104
  9797  003458  0100               	movlb	0	; () banked
  9798  00345A  6FC6               	movwf	??_Test& (0+255),b
  9799  00345C  0EE4               	movlw	228
  9800  00345E                     u7917:
  9801  00345E  2EE8               	decfsz	wreg,f,c
  9802  003460  D7FE               	bra	u7917
  9803  003462  2FC6               	decfsz	??_Test& (0+255),f,b
  9804  003464  D7FC               	bra	u7917
  9805  003466  F000               	nop	
  9806  003468  0E80               	movlw	128
  9807  00346A  EC3C  F025         	call	_lcdInst
  9808                           
  9809                           ;Test.c: 34: printf("1.ALG|2.SNR|3.AC");
  9810  00346E  0E70               	movlw	low STR_68
  9811  003470  0100               	movlb	0	; () banked
  9812  003472  6F8E               	movwf	printf@f& (0+255),b
  9813  003474  0EFC               	movlw	high STR_68
  9814  003476  0100               	movlb	0	; () banked
  9815  003478  6F8F               	movwf	(printf@f+1)& (0+255),b
  9816  00347A  ECB8  F008         	call	_printf	;wreg free
  9817                           
  9818                           ;Test.c: 35: lcdInst(0b11000000);;
  9819  00347E  0EC0               	movlw	192
  9820  003480  EC3C  F025         	call	_lcdInst
  9821                           
  9822                           ;Test.c: 36: printf("4.HI|5.TOG|6.EEP");
  9823  003484  0EA3               	movlw	low STR_69
  9824  003486  0100               	movlb	0	; () banked
  9825  003488  6F8E               	movwf	printf@f& (0+255),b
  9826  00348A  0EFC               	movlw	high STR_69
  9827  00348C  0100               	movlb	0	; () banked
  9828  00348E  6F8F               	movwf	(printf@f+1)& (0+255),b
  9829  003490  ECB8  F008         	call	_printf	;wreg free
  9830                           
  9831                           ;Test.c: 37: _delay((unsigned long)((100)*(32000000/4000.0)));
  9832  003494  0E05               	movlw	5
  9833  003496  0100               	movlb	0	; () banked
  9834  003498  6FC7               	movwf	(??_Test+1)& (0+255),b
  9835  00349A  0E0F               	movlw	15
  9836  00349C  0100               	movlb	0	; () banked
  9837  00349E  6FC6               	movwf	??_Test& (0+255),b
  9838  0034A0  0EF1               	movlw	241
  9839  0034A2                     u7927:
  9840  0034A2  2EE8               	decfsz	wreg,f,c
  9841  0034A4  D7FE               	bra	u7927
  9842  0034A6  2FC6               	decfsz	??_Test& (0+255),f,b
  9843  0034A8  D7FC               	bra	u7927
  9844  0034AA  2FC7               	decfsz	(??_Test+1)& (0+255),f,b
  9845  0034AC  D7FA               	bra	u7927
  9846  0034AE                     l1059:
  9847  0034AE  A281               	btfss	3969,1,c	;volatile
  9848  0034B0  D7FE               	goto	l1059
  9849                           
  9850                           ;Test.c: 39: var = PORTB >> 4;
  9851  0034B2  CF81 F0C6          	movff	3969,??_Test	;volatile
  9852  0034B6  0100               	movlb	0	; () banked
  9853  0034B8  3BC6               	swapf	??_Test& (0+255),f,b
  9854  0034BA  0E0F               	movlw	15
  9855  0034BC  17C6               	andwf	??_Test& (0+255),f,b
  9856  0034BE  0100               	movlb	0	; () banked
  9857  0034C0  51C6               	movf	??_Test& (0+255),w,b
  9858  0034C2  0100               	movlb	0	; () banked
  9859  0034C4  6FFA               	movwf	_var& (0+255),b
  9860  0034C6  6BFB               	clrf	(_var+1)& (0+255),b
  9861                           
  9862                           ; BSR set to: 0
  9863                           ;Test.c: 40: var++;
  9864  0034C8  0100               	movlb	0	; () banked
  9865  0034CA  4BFA               	infsnz	_var& (0+255),f,b
  9866  0034CC  2BFB               	incf	(_var+1)& (0+255),f,b
  9867  0034CE                     l1062:
  9868  0034CE  A281               	btfss	3969,1,c	;volatile
  9869  0034D0  D01F               	goto	l8346
  9870  0034D2  D7FD               	goto	l1062
  9871  0034D4                     l8324:
  9872                           
  9873                           ;Test.c: 44: algorithmTest();
  9874  0034D4  EC24  F01B         	call	_algorithmTest	;wreg free
  9875                           
  9876                           ;Test.c: 45: break;
  9877  0034D8  D7BB               	goto	l8306
  9878  0034DA                     l8326:
  9879                           
  9880                           ;Test.c: 47: sensorTest();
  9881  0034DA  EC4D  F00E         	call	_sensorTest	;wreg free
  9882                           
  9883                           ;Test.c: 48: break;
  9884  0034DE  D7B8               	goto	l8306
  9885  0034E0                     l8328:
  9886                           
  9887                           ;Test.c: 50: actuatorTest();
  9888  0034E0  EC09  F000         	call	_actuatorTest	;wreg free
  9889                           
  9890                           ;Test.c: 51: break;
  9891  0034E4  D7B5               	goto	l8306
  9892  0034E6                     l8330:
  9893                           
  9894                           ;Test.c: 53: PortTestA5();
  9895  0034E6  EC0A  F021         	call	_PortTestA5	;wreg free
  9896                           
  9897                           ;Test.c: 54: break;
  9898  0034EA  D7B2               	goto	l8306
  9899  0034EC                     l8332:
  9900                           
  9901                           ;Test.c: 57: SpeedTest();
  9902  0034EC  ECA4  F01E         	call	_SpeedTest	;wreg free
  9903                           
  9904                           ;Test.c: 58: break;
  9905  0034F0  D7AF               	goto	l8306
  9906  0034F2                     l8334:
  9907                           
  9908                           ;Test.c: 60: EEPROMTest();
  9909  0034F2  EC6E  F025         	call	_EEPROMTest	;wreg free
  9910                           
  9911                           ;Test.c: 61: break;
  9912  0034F6  D7AC               	goto	l8306
  9913  0034F8                     l8336:
  9914                           
  9915                           ;Test.c: 63: PusherTest();
  9916  0034F8  EC8F  F01B         	call	_PusherTest	;wreg free
  9917                           
  9918                           ;Test.c: 64: break;
  9919  0034FC  D7A9               	goto	l8306
  9920  0034FE                     l8338:
  9921                           
  9922                           ;Test.c: 66: PortTests();
  9923  0034FE  ECE6  F01E         	call	_PortTests	;wreg free
  9924                           
  9925                           ;Test.c: 67: break;
  9926  003502  D7A6               	goto	l8306
  9927  003504                     l8340:
  9928                           
  9929                           ;Test.c: 69: BothServos();
  9930  003504  ECD4  F00A         	call	_BothServos	;wreg free
  9931                           
  9932                           ;Test.c: 70: break;
  9933  003508  D7A3               	goto	l8306
  9934  00350A                     l8342:
  9935                           
  9936                           ;Test.c: 72: BlockerTest();
  9937  00350A  ECF4  F01B         	call	_BlockerTest	;wreg free
  9938                           
  9939                           ;Test.c: 76: }
  9940                           
  9941                           ;Test.c: 75: break;
  9942                           
  9943                           ;Test.c: 74: default:
  9944                           
  9945                           ;Test.c: 73: break;
  9946  00350E  D7A0               	goto	l8306
  9947  003510                     l8346:
  9948  003510  C0FA  F0C6         	movff	_var,??_Test
  9949  003514  C0FB  F0C7         	movff	_var+1,??_Test+1
  9950                           
  9951                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9952                           ; Switch size 1, requested type "space"
  9953                           ; Number of cases is 1, Range of values is 0 to 0
  9954                           ; switch strategies available:
  9955                           ; Name         Instructions Cycles
  9956                           ; simple_byte            4     3 (average)
  9957                           ;	Chosen strategy is simple_byte
  9958  003518  0100               	movlb	0	; () banked
  9959  00351A  51C7               	movf	(??_Test+1)& (0+255),w,b
  9960  00351C  0A00               	xorlw	0	; case 0
  9961  00351E  A4D8               	btfss	status,2,c
  9962  003520  D797               	goto	l8306
  9963                           
  9964                           ; BSR set to: 0
  9965                           ; Switch size 1, requested type "space"
  9966                           ; Number of cases is 10, Range of values is 1 to 11
  9967                           ; switch strategies available:
  9968                           ; Name         Instructions Cycles
  9969                           ; simple_byte           31    16 (average)
  9970                           ;	Chosen strategy is simple_byte
  9971  003522  0100               	movlb	0	; () banked
  9972  003524  51C6               	movf	??_Test& (0+255),w,b
  9973  003526  0A01               	xorlw	1	; case 1
  9974  003528  B4D8               	btfsc	status,2,c
  9975  00352A  D7D4               	goto	l8324
  9976  00352C  0A03               	xorlw	3	; case 2
  9977  00352E  B4D8               	btfsc	status,2,c
  9978  003530  D7D4               	goto	l8326
  9979  003532  0A01               	xorlw	1	; case 3
  9980  003534  B4D8               	btfsc	status,2,c
  9981  003536  D7D4               	goto	l8328
  9982  003538  0A06               	xorlw	6	; case 5
  9983  00353A  B4D8               	btfsc	status,2,c
  9984  00353C  D7D4               	goto	l8330
  9985  00353E  0A03               	xorlw	3	; case 6
  9986  003540  B4D8               	btfsc	status,2,c
  9987  003542  D7D4               	goto	l8332
  9988  003544  0A01               	xorlw	1	; case 7
  9989  003546  B4D8               	btfsc	status,2,c
  9990  003548  D7D4               	goto	l8334
  9991  00354A  0A0F               	xorlw	15	; case 8
  9992  00354C  B4D8               	btfsc	status,2,c
  9993  00354E  D7D4               	goto	l8336
  9994  003550  0A01               	xorlw	1	; case 9
  9995  003552  B4D8               	btfsc	status,2,c
  9996  003554  D7D4               	goto	l8338
  9997  003556  0A03               	xorlw	3	; case 10
  9998  003558  B4D8               	btfsc	status,2,c
  9999  00355A  D7D4               	goto	l8340
 10000  00355C  0A01               	xorlw	1	; case 11
 10001  00355E  B4D8               	btfsc	status,2,c
 10002  003560  D7D4               	goto	l8342
 10003                           
 10004                           ; BSR set to: 0
 10005                           
 10006                           ; BSR set to: 0
 10007  003562  D776               	goto	l8306
 10008  003564                     __end_of_Test:
 10009                           	opt stack 0
 10010                           tblptru	equ	0xFF8
 10011                           tblptrh	equ	0xFF7
 10012                           tblptrl	equ	0xFF6
 10013                           tablat	equ	0xFF5
 10014                           prodh	equ	0xFF4
 10015                           prodl	equ	0xFF3
 10016                           intcon	equ	0xFF2
 10017                           intcon2	equ	0xFF1
 10018                           intcon3	equ	0xFF0
 10019                           postinc0	equ	0xFEE
 10020                           wreg	equ	0xFE8
 10021                           postdec1	equ	0xFE5
 10022                           fsr1l	equ	0xFE1
 10023                           indf2	equ	0xFDF
 10024                           postinc2	equ	0xFDE
 10025                           postdec2	equ	0xFDD
 10026                           fsr2h	equ	0xFDA
 10027                           fsr2l	equ	0xFD9
 10028                           status	equ	0xFD8
 10029                           
 10030 ;; *************** function _sensorTest *****************
 10031 ;; Defined at:
 10032 ;;		line 124 in file "Test.c"
 10033 ;; Parameters:    Size  Location     Type
 10034 ;;		None
 10035 ;; Auto vars:     Size  Location     Type
 10036 ;;  res             2   45[BANK0 ] int 
 10037 ;; Return value:  Size  Location     Type
 10038 ;;                  1    wreg      void 
 10039 ;; Registers used:
 10040 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10041 ;; Tracked objects:
 10042 ;;		On entry : 0/0
 10043 ;;		On exit  : 0/0
 10044 ;;		Unchanged: 0/0
 10045 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10046 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10047 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10048 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10049 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10050 ;;Total ram usage:        4 bytes
 10051 ;; Hardware stack levels used:    1
 10052 ;; Hardware stack levels required when called:   10
 10053 ;; This function calls:
 10054 ;;		_lcdInst
 10055 ;;		_printf
 10056 ;;		_readADC
 10057 ;;		_readMAG
 10058 ;; This function is called by:
 10059 ;;		_Test
 10060 ;; This function uses a non-reentrant model
 10061 ;;
 10062                           
 10063                           	psect	text37
 10064  001C9A                     __ptext37:
 10065                           	opt stack 0
 10066  001C9A                     _sensorTest:
 10067                           	opt stack 19
 10068                           
 10069                           ;Test.c: 126: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10070                           
 10071                           ; BSR set to: 0
 10072                           ;incstack = 0
 10073  001C9A  0E01               	movlw	1
 10074  001C9C  EC3C  F025         	call	_lcdInst
 10075  001CA0  0E68               	movlw	104
 10076  001CA2  0100               	movlb	0	; () banked
 10077  001CA4  6FAB               	movwf	??_sensorTest& (0+255),b
 10078  001CA6  0EE4               	movlw	228
 10079  001CA8                     u7937:
 10080  001CA8  2EE8               	decfsz	wreg,f,c
 10081  001CAA  D7FE               	bra	u7937
 10082  001CAC  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10083  001CAE  D7FC               	bra	u7937
 10084  001CB0  F000               	nop	
 10085  001CB2  0E80               	movlw	128
 10086  001CB4  EC3C  F025         	call	_lcdInst
 10087                           
 10088                           ;Test.c: 127: printf("SENSORS");
 10089  001CB8  0EAE               	movlw	low STR_77
 10090  001CBA  0100               	movlb	0	; () banked
 10091  001CBC  6F8E               	movwf	printf@f& (0+255),b
 10092  001CBE  0EFF               	movlw	high STR_77
 10093  001CC0  0100               	movlb	0	; () banked
 10094  001CC2  6F8F               	movwf	(printf@f+1)& (0+255),b
 10095  001CC4  ECB8  F008         	call	_printf	;wreg free
 10096                           
 10097                           ;Test.c: 128: lcdInst(0b11000000);;
 10098  001CC8  0EC0               	movlw	192
 10099  001CCA  EC3C  F025         	call	_lcdInst
 10100                           
 10101                           ;Test.c: 129: printf("PUSH TO START");
 10102  001CCE  0E0B               	movlw	low STR_71
 10103  001CD0  0100               	movlb	0	; () banked
 10104  001CD2  6F8E               	movwf	printf@f& (0+255),b
 10105  001CD4  0EFF               	movlw	high STR_71
 10106  001CD6  0100               	movlb	0	; () banked
 10107  001CD8  6F8F               	movwf	(printf@f+1)& (0+255),b
 10108  001CDA  ECB8  F008         	call	_printf	;wreg free
 10109                           
 10110                           ;Test.c: 130: _delay((unsigned long)((100)*(32000000/4000.0)));
 10111  001CDE  0E05               	movlw	5
 10112  001CE0  0100               	movlb	0	; () banked
 10113  001CE2  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 10114  001CE4  0E0F               	movlw	15
 10115  001CE6  0100               	movlb	0	; () banked
 10116  001CE8  6FAB               	movwf	??_sensorTest& (0+255),b
 10117  001CEA  0EF1               	movlw	241
 10118  001CEC                     u7947:
 10119  001CEC  2EE8               	decfsz	wreg,f,c
 10120  001CEE  D7FE               	bra	u7947
 10121  001CF0  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10122  001CF2  D7FC               	bra	u7947
 10123  001CF4  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 10124  001CF6  D7FA               	bra	u7947
 10125  001CF8                     l1092:
 10126  001CF8  A281               	btfss	3969,1,c	;volatile
 10127  001CFA  D7FE               	goto	l1092
 10128  001CFC                     l1095:
 10129  001CFC  B281               	btfsc	3969,1,c	;volatile
 10130  001CFE  D7FE               	goto	l1095
 10131                           
 10132                           ;Test.c: 133: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10133  001D00  0E01               	movlw	1
 10134  001D02  EC3C  F025         	call	_lcdInst
 10135  001D06  0E68               	movlw	104
 10136  001D08  0100               	movlb	0	; () banked
 10137  001D0A  6FAB               	movwf	??_sensorTest& (0+255),b
 10138  001D0C  0EE4               	movlw	228
 10139  001D0E                     u7957:
 10140  001D0E  2EE8               	decfsz	wreg,f,c
 10141  001D10  D7FE               	bra	u7957
 10142  001D12  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10143  001D14  D7FC               	bra	u7957
 10144  001D16  F000               	nop	
 10145  001D18  0E80               	movlw	128
 10146  001D1A  EC3C  F025         	call	_lcdInst
 10147                           
 10148                           ;Test.c: 138: printf("TST: IR SNSR");
 10149  001D1E  0E35               	movlw	low STR_79
 10150  001D20  0100               	movlb	0	; () banked
 10151  001D22  6F8E               	movwf	printf@f& (0+255),b
 10152  001D24  0EFF               	movlw	high STR_79
 10153  001D26  0100               	movlb	0	; () banked
 10154  001D28  6F8F               	movwf	(printf@f+1)& (0+255),b
 10155  001D2A  ECB8  F008         	call	_printf	;wreg free
 10156                           
 10157                           ;Test.c: 139: _delay((unsigned long)((100)*(32000000/4000.0)));
 10158  001D2E  0E05               	movlw	5
 10159  001D30  0100               	movlb	0	; () banked
 10160  001D32  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 10161  001D34  0E0F               	movlw	15
 10162  001D36  0100               	movlb	0	; () banked
 10163  001D38  6FAB               	movwf	??_sensorTest& (0+255),b
 10164  001D3A  0EF1               	movlw	241
 10165  001D3C                     u7967:
 10166  001D3C  2EE8               	decfsz	wreg,f,c
 10167  001D3E  D7FE               	bra	u7967
 10168  001D40  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10169  001D42  D7FC               	bra	u7967
 10170  001D44  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 10171  001D46  D7FA               	bra	u7967
 10172                           
 10173                           ;Test.c: 140: LATCbits.LATC5 = 1;
 10174  001D48  8A8B               	bsf	3979,5,c	;volatile
 10175                           
 10176                           ;Test.c: 142: while(PORTBbits.RB1 == 0){
 10177  001D4A  D05C               	goto	l6862
 10178  001D4C                     l6844:
 10179                           
 10180                           ;Test.c: 143: readADC(0);
 10181  001D4C  0E00               	movlw	0
 10182  001D4E  EC43  F024         	call	_readADC
 10183                           
 10184                           ;Test.c: 144: int res = ADRESH<<8 | ADRESL;
 10185  001D52  50C3               	movf	4035,w,c	;volatile
 10186  001D54  CFC4 F0AB          	movff	4036,??_sensorTest	;volatile
 10187  001D58  0100               	movlb	0	; () banked
 10188  001D5A  6BAC               	clrf	(??_sensorTest+1)& (0+255),b
 10189  001D5C  C0AB  F0AC         	movff	??_sensorTest,??_sensorTest+1
 10190  001D60  0100               	movlb	0	; () banked
 10191  001D62  6BAB               	clrf	??_sensorTest& (0+255),b
 10192  001D64  0100               	movlb	0	; () banked
 10193  001D66  11AB               	iorwf	??_sensorTest& (0+255),w,b
 10194  001D68  0100               	movlb	0	; () banked
 10195  001D6A  6FAD               	movwf	sensorTest@res& (0+255),b
 10196  001D6C  0100               	movlb	0	; () banked
 10197  001D6E  51AC               	movf	(??_sensorTest+1)& (0+255),w,b
 10198  001D70  0100               	movlb	0	; () banked
 10199  001D72  6FAE               	movwf	(sensorTest@res+1)& (0+255),b
 10200                           
 10201                           ; BSR set to: 0
 10202                           ;Test.c: 145: IR_signal = (res > 1000) ? 1 : 0;
 10203  001D74  0100               	movlb	0	; () banked
 10204  001D76  BFAE               	btfsc	(sensorTest@res+1)& (0+255),7,b
 10205  001D78  D00A               	goto	u5300
 10206  001D7A  0EE9               	movlw	233
 10207  001D7C  0100               	movlb	0	; () banked
 10208  001D7E  5DAD               	subwf	sensorTest@res& (0+255),w,b
 10209  001D80  0E03               	movlw	3
 10210  001D82  0100               	movlb	0	; () banked
 10211  001D84  59AE               	subwfb	(sensorTest@res+1)& (0+255),w,b
 10212  001D86  A0D8               	btfss	status,0,c
 10213  001D88  D002               	goto	u5300
 10214  001D8A  0E01               	movlw	1
 10215  001D8C  D001               	goto	u5310
 10216  001D8E                     u5300:
 10217  001D8E  0E00               	movlw	0
 10218  001D90                     u5310:
 10219  001D90  0100               	movlb	0	; () banked
 10220  001D92  6FDE               	movwf	_IR_signal& (0+255),b
 10221  001D94  6BDF               	clrf	(_IR_signal+1)& (0+255),b
 10222                           
 10223                           ;Test.c: 147: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10224  001D96  0E01               	movlw	1
 10225  001D98  EC3C  F025         	call	_lcdInst
 10226  001D9C  0E68               	movlw	104
 10227  001D9E  0100               	movlb	0	; () banked
 10228  001DA0  6FAB               	movwf	??_sensorTest& (0+255),b
 10229  001DA2  0EE4               	movlw	228
 10230  001DA4                     u7977:
 10231  001DA4  2EE8               	decfsz	wreg,f,c
 10232  001DA6  D7FE               	bra	u7977
 10233  001DA8  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10234  001DAA  D7FC               	bra	u7977
 10235  001DAC  F000               	nop	
 10236  001DAE  0E80               	movlw	128
 10237  001DB0  EC3C  F025         	call	_lcdInst
 10238                           
 10239                           ;Test.c: 148: printf("IR_signal: %d ", IR_signal);
 10240  001DB4  0E5A               	movlw	low STR_80
 10241  001DB6  0100               	movlb	0	; () banked
 10242  001DB8  6F8E               	movwf	printf@f& (0+255),b
 10243  001DBA  0EFE               	movlw	high STR_80
 10244  001DBC  0100               	movlb	0	; () banked
 10245  001DBE  6F8F               	movwf	(printf@f+1)& (0+255),b
 10246  001DC0  C0DE  F090         	movff	_IR_signal,?_printf+2
 10247  001DC4  C0DF  F091         	movff	_IR_signal+1,?_printf+3
 10248  001DC8  ECB8  F008         	call	_printf	;wreg free
 10249                           
 10250                           ;Test.c: 149: lcdInst(0b11000000);;
 10251  001DCC  0EC0               	movlw	192
 10252  001DCE  EC3C  F025         	call	_lcdInst
 10253                           
 10254                           ;Test.c: 150: printf("%d", res);
 10255  001DD2  0E16               	movlw	low (STR_27+14)
 10256  001DD4  0100               	movlb	0	; () banked
 10257  001DD6  6F8E               	movwf	printf@f& (0+255),b
 10258  001DD8  0EFE               	movlw	high (STR_27+14)
 10259  001DDA  0100               	movlb	0	; () banked
 10260  001DDC  6F8F               	movwf	(printf@f+1)& (0+255),b
 10261  001DDE  C0AD  F090         	movff	sensorTest@res,?_printf+2
 10262  001DE2  C0AE  F091         	movff	sensorTest@res+1,?_printf+3
 10263  001DE6  ECB8  F008         	call	_printf	;wreg free
 10264                           
 10265                           ;Test.c: 151: _delay((unsigned long)((100)*(32000000/4000.0)));
 10266  001DEA  0E05               	movlw	5
 10267  001DEC  0100               	movlb	0	; () banked
 10268  001DEE  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 10269  001DF0  0E0F               	movlw	15
 10270  001DF2  0100               	movlb	0	; () banked
 10271  001DF4  6FAB               	movwf	??_sensorTest& (0+255),b
 10272  001DF6  0EF1               	movlw	241
 10273  001DF8                     u7987:
 10274  001DF8  2EE8               	decfsz	wreg,f,c
 10275  001DFA  D7FE               	bra	u7987
 10276  001DFC  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10277  001DFE  D7FC               	bra	u7987
 10278  001E00  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 10279  001E02  D7FA               	bra	u7987
 10280  001E04                     l6862:
 10281  001E04  A281               	btfss	3969,1,c	;volatile
 10282  001E06  D7A2               	goto	l6844
 10283                           
 10284                           ;Test.c: 152: }
 10285                           ;Test.c: 153: LATCbits.LATC5 = 0;
 10286  001E08  9A8B               	bcf	3979,5,c	;volatile
 10287                           
 10288                           ;Test.c: 161: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10289  001E0A  0E01               	movlw	1
 10290  001E0C  EC3C  F025         	call	_lcdInst
 10291  001E10  0E68               	movlw	104
 10292  001E12  0100               	movlb	0	; () banked
 10293  001E14  6FAB               	movwf	??_sensorTest& (0+255),b
 10294  001E16  0EE4               	movlw	228
 10295  001E18                     u7997:
 10296  001E18  2EE8               	decfsz	wreg,f,c
 10297  001E1A  D7FE               	bra	u7997
 10298  001E1C  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10299  001E1E  D7FC               	bra	u7997
 10300  001E20  F000               	nop	
 10301  001E22  0E80               	movlw	128
 10302  001E24  EC3C  F025         	call	_lcdInst
 10303                           
 10304                           ;Test.c: 162: printf("TST: MAGNETISM");
 10305  001E28  0E87               	movlw	low STR_82
 10306  001E2A  0100               	movlb	0	; () banked
 10307  001E2C  6F8E               	movwf	printf@f& (0+255),b
 10308  001E2E  0EFE               	movlw	high STR_82
 10309  001E30  0100               	movlb	0	; () banked
 10310  001E32  6F8F               	movwf	(printf@f+1)& (0+255),b
 10311  001E34  ECB8  F008         	call	_printf	;wreg free
 10312                           
 10313                           ;Test.c: 163: _delay((unsigned long)((100)*(32000000/4000.0)));
 10314  001E38  0E05               	movlw	5
 10315  001E3A  0100               	movlb	0	; () banked
 10316  001E3C  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 10317  001E3E  0E0F               	movlw	15
 10318  001E40  0100               	movlb	0	; () banked
 10319  001E42  6FAB               	movwf	??_sensorTest& (0+255),b
 10320  001E44  0EF1               	movlw	241
 10321  001E46                     u8007:
 10322  001E46  2EE8               	decfsz	wreg,f,c
 10323  001E48  D7FE               	bra	u8007
 10324  001E4A  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10325  001E4C  D7FC               	bra	u8007
 10326  001E4E  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 10327  001E50  D7FA               	bra	u8007
 10328                           
 10329                           ;Test.c: 164: while(PORTBbits.RB1 == 0){
 10330  001E52  D021               	goto	l6880
 10331  001E54                     l6874:
 10332                           
 10333                           ;Test.c: 165: readMAG();
 10334  001E54  EC06  F022         	call	_readMAG	;wreg free
 10335                           
 10336                           ;Test.c: 166: lcdInst(0b10000000);;
 10337  001E58  0E80               	movlw	128
 10338  001E5A  EC3C  F025         	call	_lcdInst
 10339                           
 10340                           ;Test.c: 167: lcdInst(0b11000000);;
 10341  001E5E  0EC0               	movlw	192
 10342  001E60  EC3C  F025         	call	_lcdInst
 10343                           
 10344                           ;Test.c: 168: printf("MAG_signal: %d ", MAG_signal);
 10345  001E64  0E2A               	movlw	low STR_83
 10346  001E66  0100               	movlb	0	; () banked
 10347  001E68  6F8E               	movwf	printf@f& (0+255),b
 10348  001E6A  0EFE               	movlw	high STR_83
 10349  001E6C  0100               	movlb	0	; () banked
 10350  001E6E  6F8F               	movwf	(printf@f+1)& (0+255),b
 10351  001E70  C0E0  F090         	movff	_MAG_signal,?_printf+2
 10352  001E74  C0E1  F091         	movff	_MAG_signal+1,?_printf+3
 10353  001E78  ECB8  F008         	call	_printf	;wreg free
 10354                           
 10355                           ;Test.c: 169: _delay((unsigned long)((100)*(32000000/4000.0)));
 10356  001E7C  0E05               	movlw	5
 10357  001E7E  0100               	movlb	0	; () banked
 10358  001E80  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 10359  001E82  0E0F               	movlw	15
 10360  001E84  0100               	movlb	0	; () banked
 10361  001E86  6FAB               	movwf	??_sensorTest& (0+255),b
 10362  001E88  0EF1               	movlw	241
 10363  001E8A                     u8017:
 10364  001E8A  2EE8               	decfsz	wreg,f,c
 10365  001E8C  D7FE               	bra	u8017
 10366  001E8E  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10367  001E90  D7FC               	bra	u8017
 10368  001E92  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 10369  001E94  D7FA               	bra	u8017
 10370  001E96                     l6880:
 10371  001E96  A281               	btfss	3969,1,c	;volatile
 10372  001E98  D7DD               	goto	l6874
 10373                           
 10374                           ;Test.c: 170: }
 10375                           ;Test.c: 175: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10376  001E9A  0E01               	movlw	1
 10377  001E9C  EC3C  F025         	call	_lcdInst
 10378  001EA0  0E68               	movlw	104
 10379  001EA2  0100               	movlb	0	; () banked
 10380  001EA4  6FAB               	movwf	??_sensorTest& (0+255),b
 10381  001EA6  0EE4               	movlw	228
 10382  001EA8                     u8027:
 10383  001EA8  2EE8               	decfsz	wreg,f,c
 10384  001EAA  D7FE               	bra	u8027
 10385  001EAC  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10386  001EAE  D7FC               	bra	u8027
 10387  001EB0  F000               	nop	
 10388  001EB2  0E80               	movlw	128
 10389  001EB4  EC3C  F025         	call	_lcdInst
 10390                           
 10391                           ;Test.c: 176: printf("TST: COND");
 10392  001EB8  0E87               	movlw	low STR_84
 10393  001EBA  0100               	movlb	0	; () banked
 10394  001EBC  6F8E               	movwf	printf@f& (0+255),b
 10395  001EBE  0EFF               	movlw	high STR_84
 10396  001EC0  0100               	movlb	0	; () banked
 10397  001EC2  6F8F               	movwf	(printf@f+1)& (0+255),b
 10398  001EC4  ECB8  F008         	call	_printf	;wreg free
 10399                           
 10400                           ;Test.c: 177: _delay((unsigned long)((100)*(32000000/4000.0)));
 10401  001EC8  0E05               	movlw	5
 10402  001ECA  0100               	movlb	0	; () banked
 10403  001ECC  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 10404  001ECE  0E0F               	movlw	15
 10405  001ED0  0100               	movlb	0	; () banked
 10406  001ED2  6FAB               	movwf	??_sensorTest& (0+255),b
 10407  001ED4  0EF1               	movlw	241
 10408  001ED6                     u8037:
 10409  001ED6  2EE8               	decfsz	wreg,f,c
 10410  001ED8  D7FE               	bra	u8037
 10411  001EDA  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10412  001EDC  D7FC               	bra	u8037
 10413  001EDE  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 10414  001EE0  D7FA               	bra	u8037
 10415  001EE2                     l6892:
 10416                           
 10417                           ;Test.c: 179: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10418  001EE2  0E01               	movlw	1
 10419  001EE4  EC3C  F025         	call	_lcdInst
 10420  001EE8  0E68               	movlw	104
 10421  001EEA  0100               	movlb	0	; () banked
 10422  001EEC  6FAB               	movwf	??_sensorTest& (0+255),b
 10423  001EEE  0EE4               	movlw	228
 10424  001EF0                     u8047:
 10425  001EF0  2EE8               	decfsz	wreg,f,c
 10426  001EF2  D7FE               	bra	u8047
 10427  001EF4  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10428  001EF6  D7FC               	bra	u8047
 10429  001EF8  F000               	nop	
 10430  001EFA  0E80               	movlw	128
 10431  001EFC  EC3C  F025         	call	_lcdInst
 10432                           
 10433                           ;Test.c: 180: printf("TST: COND");
 10434  001F00  0E87               	movlw	low STR_84
 10435  001F02  0100               	movlb	0	; () banked
 10436  001F04  6F8E               	movwf	printf@f& (0+255),b
 10437  001F06  0EFF               	movlw	high STR_84
 10438  001F08  0100               	movlb	0	; () banked
 10439  001F0A  6F8F               	movwf	(printf@f+1)& (0+255),b
 10440  001F0C  ECB8  F008         	call	_printf	;wreg free
 10441                           
 10442                           ;Test.c: 181: while(PORTBbits.RB1 == 0){
 10443  001F10  D01B               	goto	l6904
 10444  001F12                     l6900:
 10445                           
 10446                           ;Test.c: 185: lcdInst(0b10000000);;lcdInst(0b11000000);;
 10447  001F12  0E80               	movlw	128
 10448  001F14  EC3C  F025         	call	_lcdInst
 10449  001F18  0EC0               	movlw	192
 10450  001F1A  EC3C  F025         	call	_lcdInst
 10451                           
 10452                           ;Test.c: 186: printf("COND: %d", PORTAbits.RA2);
 10453  001F1E  0EA5               	movlw	low STR_86
 10454  001F20  0100               	movlb	0	; () banked
 10455  001F22  6F8E               	movwf	printf@f& (0+255),b
 10456  001F24  0EFF               	movlw	high STR_86
 10457  001F26  0100               	movlb	0	; () banked
 10458  001F28  6F8F               	movwf	(printf@f+1)& (0+255),b
 10459  001F2A  A480               	btfss	3968,2,c	;volatile
 10460  001F2C  D004               	goto	u5340
 10461  001F2E  0100               	movlb	0	; () banked
 10462  001F30  6BAB               	clrf	??_sensorTest& (0+255),b
 10463  001F32  2BAB               	incf	??_sensorTest& (0+255),f,b
 10464  001F34  D002               	goto	u5348
 10465  001F36                     u5340:
 10466  001F36  0100               	movlb	0	; () banked
 10467  001F38  6BAB               	clrf	??_sensorTest& (0+255),b
 10468  001F3A                     u5348:
 10469  001F3A  0100               	movlb	0	; () banked
 10470  001F3C  51AB               	movf	??_sensorTest& (0+255),w,b
 10471  001F3E  0100               	movlb	0	; () banked
 10472  001F40  6F90               	movwf	(?_printf+2)& (0+255),b
 10473  001F42  6B91               	clrf	(?_printf+3)& (0+255),b
 10474  001F44  ECB8  F008         	call	_printf	;wreg free
 10475  001F48                     l6904:
 10476  001F48  A281               	btfss	3969,1,c	;volatile
 10477  001F4A  D7E3               	goto	l6900
 10478                           
 10479                           ;Test.c: 187: }
 10480                           ;Test.c: 188: if(PORTB >> 4 == 0b1111){
 10481  001F4C  3881               	swapf	3969,w,c	;volatile
 10482  001F4E  0B0F               	andlw	15
 10483  001F50  0A0F               	xorlw	15
 10484  001F52  B4D8               	btfsc	status,2,c
 10485  001F54  0012               	return	
 10486                           
 10487                           ;Test.c: 191: else{
 10488                           ;Test.c: 192: LATAbits.LATA3 = 1;
 10489                           
 10490                           ;Test.c: 190: }
 10491                           
 10492                           ;Test.c: 189: break;
 10493  001F56  8689               	bsf	3977,3,c	;volatile
 10494                           
 10495                           ;Test.c: 193: while(PORTBbits.RB1 == 1){
 10496  001F58  D01B               	goto	l6916
 10497  001F5A                     l6912:
 10498                           
 10499                           ;Test.c: 195: lcdInst(0b10000000);;lcdInst(0b11000000);;
 10500  001F5A  0E80               	movlw	128
 10501  001F5C  EC3C  F025         	call	_lcdInst
 10502  001F60  0EC0               	movlw	192
 10503  001F62  EC3C  F025         	call	_lcdInst
 10504                           
 10505                           ;Test.c: 196: printf("COND: %d", PORTAbits.RA2);
 10506  001F66  0EA5               	movlw	low STR_86
 10507  001F68  0100               	movlb	0	; () banked
 10508  001F6A  6F8E               	movwf	printf@f& (0+255),b
 10509  001F6C  0EFF               	movlw	high STR_86
 10510  001F6E  0100               	movlb	0	; () banked
 10511  001F70  6F8F               	movwf	(printf@f+1)& (0+255),b
 10512  001F72  A480               	btfss	3968,2,c	;volatile
 10513  001F74  D004               	goto	u5370
 10514  001F76  0100               	movlb	0	; () banked
 10515  001F78  6BAB               	clrf	??_sensorTest& (0+255),b
 10516  001F7A  2BAB               	incf	??_sensorTest& (0+255),f,b
 10517  001F7C  D002               	goto	u5378
 10518  001F7E                     u5370:
 10519  001F7E  0100               	movlb	0	; () banked
 10520  001F80  6BAB               	clrf	??_sensorTest& (0+255),b
 10521  001F82                     u5378:
 10522  001F82  0100               	movlb	0	; () banked
 10523  001F84  51AB               	movf	??_sensorTest& (0+255),w,b
 10524  001F86  0100               	movlb	0	; () banked
 10525  001F88  6F90               	movwf	(?_printf+2)& (0+255),b
 10526  001F8A  6B91               	clrf	(?_printf+3)& (0+255),b
 10527  001F8C  ECB8  F008         	call	_printf	;wreg free
 10528  001F90                     l6916:
 10529  001F90  B281               	btfsc	3969,1,c	;volatile
 10530  001F92  D7E3               	goto	l6912
 10531                           
 10532                           ;Test.c: 197: }
 10533                           ;Test.c: 198: LATAbits.LATA3 = ~1;
 10534  001F94  9689               	bcf	3977,3,c	;volatile
 10535  001F96  D7A5               	goto	l6892
 10536  001F98                     __end_of_sensorTest:
 10537                           	opt stack 0
 10538                           tblptru	equ	0xFF8
 10539                           tblptrh	equ	0xFF7
 10540                           tblptrl	equ	0xFF6
 10541                           tablat	equ	0xFF5
 10542                           prodh	equ	0xFF4
 10543                           prodl	equ	0xFF3
 10544                           intcon	equ	0xFF2
 10545                           intcon2	equ	0xFF1
 10546                           intcon3	equ	0xFF0
 10547                           postinc0	equ	0xFEE
 10548                           wreg	equ	0xFE8
 10549                           postdec1	equ	0xFE5
 10550                           fsr1l	equ	0xFE1
 10551                           indf2	equ	0xFDF
 10552                           postinc2	equ	0xFDE
 10553                           postdec2	equ	0xFDD
 10554                           fsr2h	equ	0xFDA
 10555                           fsr2l	equ	0xFD9
 10556                           status	equ	0xFD8
 10557                           
 10558 ;; *************** function _readMAG *****************
 10559 ;; Defined at:
 10560 ;;		line 29 in file "ADCFunctionality.c"
 10561 ;; Parameters:    Size  Location     Type
 10562 ;;		None
 10563 ;; Auto vars:     Size  Location     Type
 10564 ;;  res             2    4[BANK0 ] int 
 10565 ;; Return value:  Size  Location     Type
 10566 ;;                  1    wreg      void 
 10567 ;; Registers used:
 10568 ;;		wreg, status,2, status,0, cstack
 10569 ;; Tracked objects:
 10570 ;;		On entry : 0/0
 10571 ;;		On exit  : 0/0
 10572 ;;		Unchanged: 0/0
 10573 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10574 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10575 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10576 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10577 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10578 ;;Total ram usage:        4 bytes
 10579 ;; Hardware stack levels used:    1
 10580 ;; Hardware stack levels required when called:    8
 10581 ;; This function calls:
 10582 ;;		_readADC
 10583 ;; This function is called by:
 10584 ;;		_getMAG
 10585 ;;		_sensorTest
 10586 ;; This function uses a non-reentrant model
 10587 ;;
 10588                           
 10589                           	psect	text38
 10590  00440C                     __ptext38:
 10591                           	opt stack 0
 10592  00440C                     _readMAG:
 10593                           	opt stack 19
 10594                           
 10595                           ;ADCFunctionality.c: 30: readADC(1);
 10596                           
 10597                           ;incstack = 0
 10598  00440C  0E01               	movlw	1
 10599  00440E  EC43  F024         	call	_readADC
 10600                           
 10601                           ;ADCFunctionality.c: 31: int res = ADRESH<<8 | ADRESL;
 10602  004412  50C3               	movf	4035,w,c	;volatile
 10603  004414  CFC4 F082          	movff	4036,??_readMAG	;volatile
 10604  004418  0100               	movlb	0	; () banked
 10605  00441A  6B83               	clrf	(??_readMAG+1)& (0+255),b
 10606  00441C  C082  F083         	movff	??_readMAG,??_readMAG+1
 10607  004420  0100               	movlb	0	; () banked
 10608  004422  6B82               	clrf	??_readMAG& (0+255),b
 10609  004424  0100               	movlb	0	; () banked
 10610  004426  1182               	iorwf	??_readMAG& (0+255),w,b
 10611  004428  0100               	movlb	0	; () banked
 10612  00442A  6F84               	movwf	readMAG@res& (0+255),b
 10613  00442C  0100               	movlb	0	; () banked
 10614  00442E  5183               	movf	(??_readMAG+1)& (0+255),w,b
 10615  004430  0100               	movlb	0	; () banked
 10616  004432  6F85               	movwf	(readMAG@res+1)& (0+255),b
 10617                           
 10618                           ; BSR set to: 0
 10619                           ;ADCFunctionality.c: 32: MAG_signal = (res < 150) ? 1 : 0;
 10620  004434  0100               	movlb	0	; () banked
 10621  004436  BF85               	btfsc	(readMAG@res+1)& (0+255),7,b
 10622  004438  D008               	goto	u4001
 10623  00443A  0100               	movlb	0	; () banked
 10624  00443C  5185               	movf	(readMAG@res+1)& (0+255),w,b
 10625  00443E  E107               	bnz	u4000
 10626  004440  0E96               	movlw	150
 10627  004442  0100               	movlb	0	; () banked
 10628  004444  5D84               	subwf	readMAG@res& (0+255),w,b
 10629  004446  B0D8               	btfsc	status,0,c
 10630  004448  D002               	goto	u4000
 10631  00444A                     u4001:
 10632  00444A  0E01               	movlw	1
 10633  00444C  D001               	goto	u4010
 10634  00444E                     u4000:
 10635  00444E  0E00               	movlw	0
 10636  004450                     u4010:
 10637  004450  0100               	movlb	0	; () banked
 10638  004452  6FE0               	movwf	_MAG_signal& (0+255),b
 10639  004454  6BE1               	clrf	(_MAG_signal+1)& (0+255),b
 10640                           
 10641                           ; BSR set to: 0
 10642  004456  0012               	return		;funcret
 10643  004458                     __end_of_readMAG:
 10644                           	opt stack 0
 10645                           tblptru	equ	0xFF8
 10646                           tblptrh	equ	0xFF7
 10647                           tblptrl	equ	0xFF6
 10648                           tablat	equ	0xFF5
 10649                           prodh	equ	0xFF4
 10650                           prodl	equ	0xFF3
 10651                           intcon	equ	0xFF2
 10652                           intcon2	equ	0xFF1
 10653                           intcon3	equ	0xFF0
 10654                           postinc0	equ	0xFEE
 10655                           wreg	equ	0xFE8
 10656                           postdec1	equ	0xFE5
 10657                           fsr1l	equ	0xFE1
 10658                           indf2	equ	0xFDF
 10659                           postinc2	equ	0xFDE
 10660                           postdec2	equ	0xFDD
 10661                           fsr2h	equ	0xFDA
 10662                           fsr2l	equ	0xFD9
 10663                           status	equ	0xFD8
 10664                           
 10665 ;; *************** function _readADC *****************
 10666 ;; Defined at:
 10667 ;;		line 15 in file "ADCFunctionality.c"
 10668 ;; Parameters:    Size  Location     Type
 10669 ;;  channel         1    wreg     unsigned char 
 10670 ;; Auto vars:     Size  Location     Type
 10671 ;;  channel         1    1[BANK0 ] unsigned char 
 10672 ;; Return value:  Size  Location     Type
 10673 ;;                  1    wreg      void 
 10674 ;; Registers used:
 10675 ;;		wreg, status,2, status,0, cstack
 10676 ;; Tracked objects:
 10677 ;;		On entry : 0/0
 10678 ;;		On exit  : 0/0
 10679 ;;		Unchanged: 0/0
 10680 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10681 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10682 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10683 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10684 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10685 ;;Total ram usage:        2 bytes
 10686 ;; Hardware stack levels used:    1
 10687 ;; Hardware stack levels required when called:    7
 10688 ;; This function calls:
 10689 ;;		Nothing
 10690 ;; This function is called by:
 10691 ;;		_readIR
 10692 ;;		_readMAG
 10693 ;;		_sensorTest
 10694 ;; This function uses a non-reentrant model
 10695 ;;
 10696                           
 10697                           	psect	text39
 10698  004886                     __ptext39:
 10699                           	opt stack 0
 10700  004886                     _readADC:
 10701                           	opt stack 19
 10702                           
 10703                           ; BSR set to: 0
 10704                           ;incstack = 0
 10705                           ;readADC@channel stored from wreg
 10706  004886  0100               	movlb	0	; () banked
 10707  004888  6F81               	movwf	readADC@channel& (0+255),b
 10708                           
 10709                           ;ADCFunctionality.c: 17: ADCON0 = channel << 2;
 10710  00488A  0100               	movlb	0	; () banked
 10711  00488C  4581               	rlncf	readADC@channel& (0+255),w,b
 10712  00488E  46E8               	rlncf	wreg,f,c
 10713  004890  0BFC               	andlw	252
 10714  004892  6EC2               	movwf	4034,c	;volatile
 10715                           
 10716                           ; BSR set to: 0
 10717                           ;ADCFunctionality.c: 18: ADCON0bits.ADON = 1;
 10718  004894  80C2               	bsf	4034,0,c	;volatile
 10719                           
 10720                           ; BSR set to: 0
 10721                           ;ADCFunctionality.c: 19: ADCON0bits.GO = 1;
 10722  004896  82C2               	bsf	4034,1,c	;volatile
 10723                           
 10724                           ;ADCFunctionality.c: 20: while(ADCON0bits.GO_NOT_DONE){_delay((unsigned long)((5)*(32000
      +                          000/4000.0)));}
 10725  004898  D009               	goto	l5442
 10726  00489A                     l5440:
 10727  00489A  0E34               	movlw	52
 10728  00489C  0100               	movlb	0	; () banked
 10729  00489E  6F80               	movwf	??_readADC& (0+255),b
 10730  0048A0  0EF1               	movlw	241
 10731  0048A2                     u8057:
 10732  0048A2  2EE8               	decfsz	wreg,f,c
 10733  0048A4  D7FE               	bra	u8057
 10734  0048A6  2F80               	decfsz	??_readADC& (0+255),f,b
 10735  0048A8  D7FC               	bra	u8057
 10736  0048AA  D000               	nop2	
 10737  0048AC                     l5442:
 10738  0048AC  A2C2               	btfss	4034,1,c	;volatile
 10739  0048AE  0012               	return	
 10740  0048B0  D7F4               	goto	l5440
 10741  0048B2                     __end_of_readADC:
 10742                           	opt stack 0
 10743                           tblptru	equ	0xFF8
 10744                           tblptrh	equ	0xFF7
 10745                           tblptrl	equ	0xFF6
 10746                           tablat	equ	0xFF5
 10747                           prodh	equ	0xFF4
 10748                           prodl	equ	0xFF3
 10749                           intcon	equ	0xFF2
 10750                           intcon2	equ	0xFF1
 10751                           intcon3	equ	0xFF0
 10752                           postinc0	equ	0xFEE
 10753                           wreg	equ	0xFE8
 10754                           postdec1	equ	0xFE5
 10755                           fsr1l	equ	0xFE1
 10756                           indf2	equ	0xFDF
 10757                           postinc2	equ	0xFDE
 10758                           postdec2	equ	0xFDD
 10759                           fsr2h	equ	0xFDA
 10760                           fsr2l	equ	0xFD9
 10761                           status	equ	0xFD8
 10762                           
 10763 ;; *************** function _algorithmTest *****************
 10764 ;; Defined at:
 10765 ;;		line 80 in file "Test.c"
 10766 ;; Parameters:    Size  Location     Type
 10767 ;;		None
 10768 ;; Auto vars:     Size  Location     Type
 10769 ;;		None
 10770 ;; Return value:  Size  Location     Type
 10771 ;;                  1    wreg      void 
 10772 ;; Registers used:
 10773 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10774 ;; Tracked objects:
 10775 ;;		On entry : 0/0
 10776 ;;		On exit  : 0/0
 10777 ;;		Unchanged: 0/0
 10778 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10779 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10780 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10781 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10782 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10783 ;;Total ram usage:        2 bytes
 10784 ;; Hardware stack levels used:    1
 10785 ;; Hardware stack levels required when called:   10
 10786 ;; This function calls:
 10787 ;;		_lcdInst
 10788 ;;		_printf
 10789 ;; This function is called by:
 10790 ;;		_Test
 10791 ;; This function uses a non-reentrant model
 10792 ;;
 10793                           
 10794                           	psect	text40
 10795  003648                     __ptext40:
 10796                           	opt stack 0
 10797  003648                     _algorithmTest:
 10798                           	opt stack 19
 10799                           
 10800                           ;Test.c: 82: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 10801                           
 10802                           ;incstack = 0
 10803  003648  0E01               	movlw	1
 10804  00364A  EC3C  F025         	call	_lcdInst
 10805  00364E  0E68               	movlw	104
 10806  003650  0100               	movlb	0	; () banked
 10807  003652  6FAB               	movwf	??_algorithmTest& (0+255),b
 10808  003654  0EE4               	movlw	228
 10809  003656                     u8067:
 10810  003656  2EE8               	decfsz	wreg,f,c
 10811  003658  D7FE               	bra	u8067
 10812  00365A  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 10813  00365C  D7FC               	bra	u8067
 10814  00365E  F000               	nop	
 10815  003660  0E80               	movlw	128
 10816  003662  EC3C  F025         	call	_lcdInst
 10817                           
 10818                           ;Test.c: 83: printf("ALGORITHM TEST");
 10819  003666  0ED2               	movlw	low STR_70
 10820  003668  0100               	movlb	0	; () banked
 10821  00366A  6F8E               	movwf	printf@f& (0+255),b
 10822  00366C  0EFE               	movlw	high STR_70
 10823  00366E  0100               	movlb	0	; () banked
 10824  003670  6F8F               	movwf	(printf@f+1)& (0+255),b
 10825  003672  ECB8  F008         	call	_printf	;wreg free
 10826                           
 10827                           ;Test.c: 84: lcdInst(0b11000000);;
 10828  003676  0EC0               	movlw	192
 10829  003678  EC3C  F025         	call	_lcdInst
 10830                           
 10831                           ;Test.c: 85: printf("PUSH TO START");
 10832  00367C  0E0B               	movlw	low STR_71
 10833  00367E  0100               	movlb	0	; () banked
 10834  003680  6F8E               	movwf	printf@f& (0+255),b
 10835  003682  0EFF               	movlw	high STR_71
 10836  003684  0100               	movlb	0	; () banked
 10837  003686  6F8F               	movwf	(printf@f+1)& (0+255),b
 10838  003688  ECB8  F008         	call	_printf	;wreg free
 10839                           
 10840                           ;Test.c: 86: _delay((unsigned long)((100)*(32000000/4000.0)));
 10841  00368C  0E05               	movlw	5
 10842  00368E  0100               	movlb	0	; () banked
 10843  003690  6FAC               	movwf	(??_algorithmTest+1)& (0+255),b
 10844  003692  0E0F               	movlw	15
 10845  003694  0100               	movlb	0	; () banked
 10846  003696  6FAB               	movwf	??_algorithmTest& (0+255),b
 10847  003698  0EF1               	movlw	241
 10848  00369A                     u8077:
 10849  00369A  2EE8               	decfsz	wreg,f,c
 10850  00369C  D7FE               	bra	u8077
 10851  00369E  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 10852  0036A0  D7FC               	bra	u8077
 10853  0036A2  2FAC               	decfsz	(??_algorithmTest+1)& (0+255),f,b
 10854  0036A4  D7FA               	bra	u8077
 10855  0036A6                     l1083:
 10856  0036A6  A281               	btfss	3969,1,c	;volatile
 10857  0036A8  D7FE               	goto	l1083
 10858  0036AA                     l1086:
 10859  0036AA  B281               	btfsc	3969,1,c	;volatile
 10860  0036AC  D7FE               	goto	l1086
 10861                           
 10862                           ;Test.c: 89: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 10863  0036AE  0E01               	movlw	1
 10864  0036B0  EC3C  F025         	call	_lcdInst
 10865  0036B4  0E68               	movlw	104
 10866  0036B6  0100               	movlb	0	; () banked
 10867  0036B8  6FAB               	movwf	??_algorithmTest& (0+255),b
 10868  0036BA  0EE4               	movlw	228
 10869  0036BC                     u8087:
 10870  0036BC  2EE8               	decfsz	wreg,f,c
 10871  0036BE  D7FE               	bra	u8087
 10872  0036C0  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 10873  0036C2  D7FC               	bra	u8087
 10874  0036C4  F000               	nop	
 10875  0036C6  0E80               	movlw	128
 10876  0036C8  EC3C  F025         	call	_lcdInst
 10877                           
 10878                           ;Test.c: 94: printf("ALG1: 9 POPNOTAB");
 10879  0036CC  0E5F               	movlw	low STR_72
 10880  0036CE  0100               	movlb	0	; () banked
 10881  0036D0  6F8E               	movwf	printf@f& (0+255),b
 10882  0036D2  0EFC               	movlw	high STR_72
 10883  0036D4  0100               	movlb	0	; () banked
 10884  0036D6  6F8F               	movwf	(printf@f+1)& (0+255),b
 10885  0036D8  ECB8  F008         	call	_printf	;wreg free
 10886                           
 10887                           ;Test.c: 101: printf("ALG2: 12 CANS");
 10888  0036DC  0EEF               	movlw	low STR_73
 10889  0036DE  0100               	movlb	0	; () banked
 10890  0036E0  6F8E               	movwf	printf@f& (0+255),b
 10891  0036E2  0EFE               	movlw	high STR_73
 10892  0036E4  0100               	movlb	0	; () banked
 10893  0036E6  6F8F               	movwf	(printf@f+1)& (0+255),b
 10894  0036E8  ECB8  F008         	call	_printf	;wreg free
 10895                           
 10896                           ;Test.c: 110: printf("ALG3: 1 CAN");
 10897  0036EC  0E4F               	movlw	low STR_74
 10898  0036EE  0100               	movlb	0	; () banked
 10899  0036F0  6F8E               	movwf	printf@f& (0+255),b
 10900  0036F2  0EFF               	movlw	high STR_74
 10901  0036F4  0100               	movlb	0	; () banked
 10902  0036F6  6F8F               	movwf	(printf@f+1)& (0+255),b
 10903  0036F8  ECB8  F008         	call	_printf	;wreg free
 10904                           
 10905                           ;Test.c: 116: printf("ALG4: ALL CANS");
 10906  0036FC  0EB4               	movlw	low STR_75
 10907  0036FE  0100               	movlb	0	; () banked
 10908  003700  6F8E               	movwf	printf@f& (0+255),b
 10909  003702  0EFE               	movlw	high STR_75
 10910  003704  0100               	movlb	0	; () banked
 10911  003706  6F8F               	movwf	(printf@f+1)& (0+255),b
 10912  003708  ECB8  F008         	call	_printf	;wreg free
 10913                           
 10914                           ;Test.c: 121: printf("ALG5: NO CANS");
 10915  00370C  0EFD               	movlw	low STR_76
 10916  00370E  0100               	movlb	0	; () banked
 10917  003710  6F8E               	movwf	printf@f& (0+255),b
 10918  003712  0EFE               	movlw	high STR_76
 10919  003714  0100               	movlb	0	; () banked
 10920  003716  6F8F               	movwf	(printf@f+1)& (0+255),b
 10921  003718  ECB8  F008         	call	_printf	;wreg free
 10922  00371C  0012               	return		;funcret
 10923  00371E                     __end_of_algorithmTest:
 10924                           	opt stack 0
 10925                           tblptru	equ	0xFF8
 10926                           tblptrh	equ	0xFF7
 10927                           tblptrl	equ	0xFF6
 10928                           tablat	equ	0xFF5
 10929                           prodh	equ	0xFF4
 10930                           prodl	equ	0xFF3
 10931                           intcon	equ	0xFF2
 10932                           intcon2	equ	0xFF1
 10933                           intcon3	equ	0xFF0
 10934                           postinc0	equ	0xFEE
 10935                           wreg	equ	0xFE8
 10936                           postdec1	equ	0xFE5
 10937                           fsr1l	equ	0xFE1
 10938                           indf2	equ	0xFDF
 10939                           postinc2	equ	0xFDE
 10940                           postdec2	equ	0xFDD
 10941                           fsr2h	equ	0xFDA
 10942                           fsr2l	equ	0xFD9
 10943                           status	equ	0xFD8
 10944                           
 10945 ;; *************** function _actuatorTest *****************
 10946 ;; Defined at:
 10947 ;;		line 203 in file "Test.c"
 10948 ;; Parameters:    Size  Location     Type
 10949 ;;		None
 10950 ;; Auto vars:     Size  Location     Type
 10951 ;;  i               1   45[BANK0 ] unsigned char 
 10952 ;;  i               1   67[BANK0 ] unsigned char 
 10953 ;;  i               1   66[BANK0 ] unsigned char 
 10954 ;;  i               1   65[BANK0 ] unsigned char 
 10955 ;;  i               1   64[BANK0 ] unsigned char 
 10956 ;;  i               1   63[BANK0 ] unsigned char 
 10957 ;;  i               1   62[BANK0 ] unsigned char 
 10958 ;;  i               1   61[BANK0 ] unsigned char 
 10959 ;;  i               1   60[BANK0 ] unsigned char 
 10960 ;;  i               1   59[BANK0 ] unsigned char 
 10961 ;;  i               1   58[BANK0 ] unsigned char 
 10962 ;;  i               1   57[BANK0 ] unsigned char 
 10963 ;;  i               1   56[BANK0 ] unsigned char 
 10964 ;;  i               1   55[BANK0 ] unsigned char 
 10965 ;;  i               1   54[BANK0 ] unsigned char 
 10966 ;;  i               1   53[BANK0 ] unsigned char 
 10967 ;;  i               1   52[BANK0 ] unsigned char 
 10968 ;;  i               1   51[BANK0 ] unsigned char 
 10969 ;;  i               1   50[BANK0 ] unsigned char 
 10970 ;;  i               1   49[BANK0 ] unsigned char 
 10971 ;;  i               1   48[BANK0 ] unsigned char 
 10972 ;;  i               1   47[BANK0 ] unsigned char 
 10973 ;;  i               1   46[BANK0 ] unsigned char 
 10974 ;;  i               2   68[BANK0 ] int 
 10975 ;; Return value:  Size  Location     Type
 10976 ;;                  1    wreg      void 
 10977 ;; Registers used:
 10978 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10979 ;; Tracked objects:
 10980 ;;		On entry : 0/0
 10981 ;;		On exit  : 0/0
 10982 ;;		Unchanged: 0/0
 10983 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10984 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10985 ;;      Locals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10986 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10987 ;;      Totals:         0      27       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10988 ;;Total ram usage:       27 bytes
 10989 ;; Hardware stack levels used:    1
 10990 ;; Hardware stack levels required when called:   10
 10991 ;; This function calls:
 10992 ;;		_lcdInst
 10993 ;;		_printf
 10994 ;;		_updateServoPosition
 10995 ;; This function is called by:
 10996 ;;		_Test
 10997 ;; This function uses a non-reentrant model
 10998 ;;
 10999                           
 11000                           	psect	text41
 11001  000012                     __ptext41:
 11002                           	opt stack 0
 11003  000012                     _actuatorTest:
 11004                           	opt stack 19
 11005                           
 11006                           ;Test.c: 205: int i = 0;
 11007                           
 11008                           ;incstack = 0
 11009  000012  0E00               	movlw	0
 11010  000014  0100               	movlb	0	; () banked
 11011  000016  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 11012  000018  0E00               	movlw	0
 11013  00001A  6FC4               	movwf	actuatorTest@i& (0+255),b
 11014                           
 11015                           ; BSR set to: 0
 11016                           ;Test.c: 207: (INTCONbits.GIE = 1);
 11017  00001C  8EF2               	bsf	intcon,7,c	;volatile
 11018                           
 11019                           ; BSR set to: 0
 11020                           ;Test.c: 208: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11021  00001E  0E01               	movlw	1
 11022  000020  EC3C  F025         	call	_lcdInst
 11023  000024  0E68               	movlw	104
 11024  000026  0100               	movlb	0	; () banked
 11025  000028  6FAB               	movwf	??_actuatorTest& (0+255),b
 11026  00002A  0EE4               	movlw	228
 11027  00002C                     u8097:
 11028  00002C  2EE8               	decfsz	wreg,f,c
 11029  00002E  D7FE               	bra	u8097
 11030  000030  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11031  000032  D7FC               	bra	u8097
 11032  000034  F000               	nop	
 11033  000036  0E80               	movlw	128
 11034  000038  EC3C  F025         	call	_lcdInst
 11035                           
 11036                           ;Test.c: 209: printf("ACTUATORS");
 11037  00003C  0E91               	movlw	low STR_88
 11038  00003E  0100               	movlb	0	; () banked
 11039  000040  6F8E               	movwf	printf@f& (0+255),b
 11040  000042  0EFF               	movlw	high STR_88
 11041  000044  0100               	movlb	0	; () banked
 11042  000046  6F8F               	movwf	(printf@f+1)& (0+255),b
 11043  000048  ECB8  F008         	call	_printf	;wreg free
 11044                           
 11045                           ;Test.c: 210: lcdInst(0b11000000);;
 11046  00004C  0EC0               	movlw	192
 11047  00004E  EC3C  F025         	call	_lcdInst
 11048                           
 11049                           ;Test.c: 211: printf("PUSH TO START");
 11050  000052  0E0B               	movlw	low STR_71
 11051  000054  0100               	movlb	0	; () banked
 11052  000056  6F8E               	movwf	printf@f& (0+255),b
 11053  000058  0EFF               	movlw	high STR_71
 11054  00005A  0100               	movlb	0	; () banked
 11055  00005C  6F8F               	movwf	(printf@f+1)& (0+255),b
 11056  00005E  ECB8  F008         	call	_printf	;wreg free
 11057                           
 11058                           ;Test.c: 212: _delay((unsigned long)((100)*(32000000/4000.0)));
 11059  000062  0E05               	movlw	5
 11060  000064  0100               	movlb	0	; () banked
 11061  000066  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 11062  000068  0E0F               	movlw	15
 11063  00006A  0100               	movlb	0	; () banked
 11064  00006C  6FAB               	movwf	??_actuatorTest& (0+255),b
 11065  00006E  0EF1               	movlw	241
 11066  000070                     u8107:
 11067  000070  2EE8               	decfsz	wreg,f,c
 11068  000072  D7FE               	bra	u8107
 11069  000074  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11070  000076  D7FC               	bra	u8107
 11071  000078  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 11072  00007A  D7FA               	bra	u8107
 11073  00007C                     l1118:
 11074  00007C  A281               	btfss	3969,1,c	;volatile
 11075  00007E  D7FE               	goto	l1118
 11076  000080                     l1121:
 11077  000080  B281               	btfsc	3969,1,c	;volatile
 11078  000082  D7FE               	goto	l1121
 11079                           
 11080                           ;Test.c: 215: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11081  000084  0E01               	movlw	1
 11082  000086  EC3C  F025         	call	_lcdInst
 11083  00008A  0E68               	movlw	104
 11084  00008C  0100               	movlb	0	; () banked
 11085  00008E  6FAB               	movwf	??_actuatorTest& (0+255),b
 11086  000090  0EE4               	movlw	228
 11087  000092                     u8117:
 11088  000092  2EE8               	decfsz	wreg,f,c
 11089  000094  D7FE               	bra	u8117
 11090  000096  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11091  000098  D7FC               	bra	u8117
 11092  00009A  F000               	nop	
 11093  00009C  0E80               	movlw	128
 11094  00009E  EC3C  F025         	call	_lcdInst
 11095                           
 11096                           ;Test.c: 220: printf("TST: DC MOTORS");
 11097  0000A2  0EC3               	movlw	low STR_90
 11098  0000A4  0100               	movlb	0	; () banked
 11099  0000A6  6F8E               	movwf	printf@f& (0+255),b
 11100  0000A8  0EFE               	movlw	high STR_90
 11101  0000AA  0100               	movlb	0	; () banked
 11102  0000AC  6F8F               	movwf	(printf@f+1)& (0+255),b
 11103  0000AE  ECB8  F008         	call	_printf	;wreg free
 11104                           
 11105                           ;Test.c: 221: lcdInst(0b11000000);;
 11106  0000B2  0EC0               	movlw	192
 11107  0000B4  EC3C  F025         	call	_lcdInst
 11108                           
 11109                           ;Test.c: 222: printf("PIN RA5 HIGH.");
 11110  0000B8  0EE1               	movlw	low STR_91
 11111  0000BA  0100               	movlb	0	; () banked
 11112  0000BC  6F8E               	movwf	printf@f& (0+255),b
 11113  0000BE  0EFE               	movlw	high STR_91
 11114  0000C0  0100               	movlb	0	; () banked
 11115  0000C2  6F8F               	movwf	(printf@f+1)& (0+255),b
 11116  0000C4  ECB8  F008         	call	_printf	;wreg free
 11117                           
 11118                           ;Test.c: 223: LATAbits.LATA5 = 1;
 11119  0000C8  8A89               	bsf	3977,5,c	;volatile
 11120                           
 11121                           ;Test.c: 224: for(i=0;i<5;i++){for(char i=0;i<100;i++){_delay((unsigned long)((10)*(3200
      +                          0000/4000.0)));};}
 11122  0000CA  0E00               	movlw	0
 11123  0000CC  0100               	movlb	0	; () banked
 11124  0000CE  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 11125  0000D0  0E00               	movlw	0
 11126  0000D2  6FC4               	movwf	actuatorTest@i& (0+255),b
 11127                           
 11128                           ; BSR set to: 0
 11129  0000D4  0100               	movlb	0	; () banked
 11130  0000D6  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 11131  0000D8  D008               	goto	l6956
 11132  0000DA  0100               	movlb	0	; () banked
 11133  0000DC  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 11134  0000DE  E123               	bnz	l1125
 11135  0000E0  0E05               	movlw	5
 11136  0000E2  0100               	movlb	0	; () banked
 11137  0000E4  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 11138  0000E6  B0D8               	btfsc	status,0,c
 11139  0000E8  D01E               	goto	l1125
 11140  0000EA                     l6956:
 11141                           
 11142                           ; BSR set to: 0
 11143  0000EA  0E00               	movlw	0
 11144  0000EC  0100               	movlb	0	; () banked
 11145  0000EE  6FAD               	movwf	actuatorTest@i_1645& (0+255),b
 11146  0000F0                     l6958:
 11147                           
 11148                           ; BSR set to: 0
 11149  0000F0  0E63               	movlw	99
 11150  0000F2  0100               	movlb	0	; () banked
 11151  0000F4  65AD               	cpfsgt	actuatorTest@i_1645& (0+255),b
 11152  0000F6  D001               	goto	l6962
 11153  0000F8  D00C               	goto	l6966
 11154  0000FA                     l6962:
 11155                           
 11156                           ; BSR set to: 0
 11157  0000FA  0E68               	movlw	104
 11158  0000FC  0100               	movlb	0	; () banked
 11159  0000FE  6FAB               	movwf	??_actuatorTest& (0+255),b
 11160  000100  0EE4               	movlw	228
 11161  000102                     u8127:
 11162  000102  2EE8               	decfsz	wreg,f,c
 11163  000104  D7FE               	bra	u8127
 11164  000106  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11165  000108  D7FC               	bra	u8127
 11166  00010A  F000               	nop	
 11167  00010C  0100               	movlb	0	; () banked
 11168  00010E  2BAD               	incf	actuatorTest@i_1645& (0+255),f,b
 11169  000110  D7EF               	goto	l6958
 11170  000112                     l6966:
 11171                           
 11172                           ; BSR set to: 0
 11173  000112  0100               	movlb	0	; () banked
 11174  000114  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 11175  000116  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 11176                           
 11177                           ; BSR set to: 0
 11178  000118  0100               	movlb	0	; () banked
 11179  00011A  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 11180  00011C  D7E6               	goto	l6956
 11181  00011E  0100               	movlb	0	; () banked
 11182  000120  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 11183  000122  E101               	bnz	u5440
 11184  000124  D7DD               	goto	L7
 11185  000126                     u5440:
 11186  000126                     l1125:
 11187                           
 11188                           ; BSR set to: 0
 11189                           ;Test.c: 225: LATAbits.LATA5 = 0;
 11190  000126  9A89               	bcf	3977,5,c	;volatile
 11191                           
 11192                           ; BSR set to: 0
 11193                           ;Test.c: 226: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11194  000128  0E01               	movlw	1
 11195  00012A  EC3C  F025         	call	_lcdInst
 11196  00012E  0E68               	movlw	104
 11197  000130  0100               	movlb	0	; () banked
 11198  000132  6FAB               	movwf	??_actuatorTest& (0+255),b
 11199  000134  0EE4               	movlw	228
 11200  000136                     u8137:
 11201  000136  2EE8               	decfsz	wreg,f,c
 11202  000138  D7FE               	bra	u8137
 11203  00013A  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11204  00013C  D7FC               	bra	u8137
 11205  00013E  F000               	nop	
 11206  000140  0E80               	movlw	128
 11207  000142  EC3C  F025         	call	_lcdInst
 11208                           
 11209                           ;Test.c: 232: printf("TST: COND SOLN'D");
 11210  000146  0E81               	movlw	low STR_92
 11211  000148  0100               	movlb	0	; () banked
 11212  00014A  6F8E               	movwf	printf@f& (0+255),b
 11213  00014C  0EFC               	movlw	high STR_92
 11214  00014E  0100               	movlb	0	; () banked
 11215  000150  6F8F               	movwf	(printf@f+1)& (0+255),b
 11216  000152  ECB8  F008         	call	_printf	;wreg free
 11217                           
 11218                           ;Test.c: 233: lcdInst(0b11000000);;
 11219  000156  0EC0               	movlw	192
 11220  000158  EC3C  F025         	call	_lcdInst
 11221                           
 11222                           ;Test.c: 234: printf("PIN RA3...");
 11223  00015C  0E5B               	movlw	low STR_93
 11224  00015E  0100               	movlb	0	; () banked
 11225  000160  6F8E               	movwf	printf@f& (0+255),b
 11226  000162  0EFF               	movlw	high STR_93
 11227  000164  0100               	movlb	0	; () banked
 11228  000166  6F8F               	movwf	(printf@f+1)& (0+255),b
 11229  000168  ECB8  F008         	call	_printf	;wreg free
 11230                           
 11231                           ;Test.c: 235: for(i=0;i<5;i++){
 11232  00016C  0E00               	movlw	0
 11233  00016E  0100               	movlb	0	; () banked
 11234  000170  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 11235  000172  0E00               	movlw	0
 11236  000174  6FC4               	movwf	actuatorTest@i& (0+255),b
 11237                           
 11238                           ; BSR set to: 0
 11239  000176  0100               	movlb	0	; () banked
 11240  000178  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 11241  00017A  D008               	goto	l1128
 11242  00017C  0100               	movlb	0	; () banked
 11243  00017E  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 11244  000180  E12C               	bnz	l1129
 11245  000182  0E05               	movlw	5
 11246  000184  0100               	movlb	0	; () banked
 11247  000186  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 11248  000188  B0D8               	btfsc	status,0,c
 11249  00018A  D027               	goto	l1129
 11250  00018C                     l1128:
 11251                           
 11252                           ; BSR set to: 0
 11253                           ;Test.c: 236: LATAbits.LATA3 = 1;
 11254  00018C  8689               	bsf	3977,3,c	;volatile
 11255                           
 11256                           ; BSR set to: 0
 11257                           ;Test.c: 237: _delay((unsigned long)((300)*(32000000/4000.0)));
 11258  00018E  0E0D               	movlw	13
 11259  000190  0100               	movlb	0	; () banked
 11260  000192  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 11261  000194  0E2D               	movlw	45
 11262  000196  0100               	movlb	0	; () banked
 11263  000198  6FAB               	movwf	??_actuatorTest& (0+255),b
 11264  00019A  0ED7               	movlw	215
 11265  00019C                     u8147:
 11266  00019C  2EE8               	decfsz	wreg,f,c
 11267  00019E  D7FE               	bra	u8147
 11268  0001A0  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11269  0001A2  D7FC               	bra	u8147
 11270  0001A4  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 11271  0001A6  D7FA               	bra	u8147
 11272  0001A8  D000               	nop2	
 11273                           
 11274                           ;Test.c: 238: LATAbits.LATA3 = ~1;
 11275  0001AA  9689               	bcf	3977,3,c	;volatile
 11276                           
 11277                           ;Test.c: 239: _delay((unsigned long)((1000-300)*(32000000/4000.0)));
 11278  0001AC  0E1D               	movlw	29
 11279  0001AE  0100               	movlb	0	; () banked
 11280  0001B0  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 11281  0001B2  0E69               	movlw	105
 11282  0001B4  0100               	movlb	0	; () banked
 11283  0001B6  6FAB               	movwf	??_actuatorTest& (0+255),b
 11284  0001B8  0EA5               	movlw	165
 11285  0001BA                     u8157:
 11286  0001BA  2EE8               	decfsz	wreg,f,c
 11287  0001BC  D7FE               	bra	u8157
 11288  0001BE  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11289  0001C0  D7FC               	bra	u8157
 11290  0001C2  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 11291  0001C4  D7FA               	bra	u8157
 11292  0001C6  0100               	movlb	0	; () banked
 11293  0001C8  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 11294  0001CA  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 11295  0001CC  0100               	movlb	0	; () banked
 11296  0001CE  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 11297  0001D0  D7DD               	goto	l1128
 11298  0001D2  0100               	movlb	0	; () banked
 11299  0001D4  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 11300  0001D6  E101               	bnz	u5460
 11301  0001D8  D7D4               	goto	L8
 11302  0001DA                     u5460:
 11303  0001DA                     l1129:
 11304                           
 11305                           ; BSR set to: 0
 11306                           ;Test.c: 240: }
 11307                           ;Test.c: 241: LATAbits.LATA3 = ~1;
 11308  0001DA  9689               	bcf	3977,3,c	;volatile
 11309                           
 11310                           ; BSR set to: 0
 11311                           ;Test.c: 242: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11312  0001DC  0E01               	movlw	1
 11313  0001DE  EC3C  F025         	call	_lcdInst
 11314  0001E2  0E68               	movlw	104
 11315  0001E4  0100               	movlb	0	; () banked
 11316  0001E6  6FAB               	movwf	??_actuatorTest& (0+255),b
 11317  0001E8  0EE4               	movlw	228
 11318  0001EA                     u8167:
 11319  0001EA  2EE8               	decfsz	wreg,f,c
 11320  0001EC  D7FE               	bra	u8167
 11321  0001EE  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11322  0001F0  D7FC               	bra	u8167
 11323  0001F2  F000               	nop	
 11324  0001F4  0E80               	movlw	128
 11325  0001F6  EC3C  F025         	call	_lcdInst
 11326                           
 11327                           ;Test.c: 248: printf("TST: PUSH SOLN'D");
 11328  0001FA  0E92               	movlw	low STR_94
 11329  0001FC  0100               	movlb	0	; () banked
 11330  0001FE  6F8E               	movwf	printf@f& (0+255),b
 11331  000200  0EFC               	movlw	high STR_94
 11332  000202  0100               	movlb	0	; () banked
 11333  000204  6F8F               	movwf	(printf@f+1)& (0+255),b
 11334  000206  ECB8  F008         	call	_printf	;wreg free
 11335                           
 11336                           ;Test.c: 249: lcdInst(0b11000000);;
 11337  00020A  0EC0               	movlw	192
 11338  00020C  EC3C  F025         	call	_lcdInst
 11339                           
 11340                           ;Test.c: 250: printf("PIN RA4...");
 11341  000210  0E66               	movlw	low STR_95
 11342  000212  0100               	movlb	0	; () banked
 11343  000214  6F8E               	movwf	printf@f& (0+255),b
 11344  000216  0EFF               	movlw	high STR_95
 11345  000218  0100               	movlb	0	; () banked
 11346  00021A  6F8F               	movwf	(printf@f+1)& (0+255),b
 11347  00021C  ECB8  F008         	call	_printf	;wreg free
 11348                           
 11349                           ;Test.c: 251: for(i=0;i<5;i++){
 11350  000220  0E00               	movlw	0
 11351  000222  0100               	movlb	0	; () banked
 11352  000224  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 11353  000226  0E00               	movlw	0
 11354  000228  6FC4               	movwf	actuatorTest@i& (0+255),b
 11355                           
 11356                           ; BSR set to: 0
 11357  00022A  0100               	movlb	0	; () banked
 11358  00022C  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 11359  00022E  D008               	goto	l1130
 11360  000230  0100               	movlb	0	; () banked
 11361  000232  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 11362  000234  E12C               	bnz	l1131
 11363  000236  0E05               	movlw	5
 11364  000238  0100               	movlb	0	; () banked
 11365  00023A  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 11366  00023C  B0D8               	btfsc	status,0,c
 11367  00023E  D027               	goto	l1131
 11368  000240                     l1130:
 11369                           
 11370                           ; BSR set to: 0
 11371                           ;Test.c: 252: LATAbits.LATA4 = 1;
 11372  000240  8889               	bsf	3977,4,c	;volatile
 11373                           
 11374                           ; BSR set to: 0
 11375                           ;Test.c: 253: _delay((unsigned long)((300)*(32000000/4000.0)));
 11376  000242  0E0D               	movlw	13
 11377  000244  0100               	movlb	0	; () banked
 11378  000246  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 11379  000248  0E2D               	movlw	45
 11380  00024A  0100               	movlb	0	; () banked
 11381  00024C  6FAB               	movwf	??_actuatorTest& (0+255),b
 11382  00024E  0ED7               	movlw	215
 11383  000250                     u8177:
 11384  000250  2EE8               	decfsz	wreg,f,c
 11385  000252  D7FE               	bra	u8177
 11386  000254  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11387  000256  D7FC               	bra	u8177
 11388  000258  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 11389  00025A  D7FA               	bra	u8177
 11390  00025C  D000               	nop2	
 11391                           
 11392                           ;Test.c: 254: LATAbits.LATA4 = ~1;
 11393  00025E  9889               	bcf	3977,4,c	;volatile
 11394                           
 11395                           ;Test.c: 255: _delay((unsigned long)((1000-300)*(32000000/4000.0)));
 11396  000260  0E1D               	movlw	29
 11397  000262  0100               	movlb	0	; () banked
 11398  000264  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 11399  000266  0E69               	movlw	105
 11400  000268  0100               	movlb	0	; () banked
 11401  00026A  6FAB               	movwf	??_actuatorTest& (0+255),b
 11402  00026C  0EA5               	movlw	165
 11403  00026E                     u8187:
 11404  00026E  2EE8               	decfsz	wreg,f,c
 11405  000270  D7FE               	bra	u8187
 11406  000272  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11407  000274  D7FC               	bra	u8187
 11408  000276  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 11409  000278  D7FA               	bra	u8187
 11410  00027A  0100               	movlb	0	; () banked
 11411  00027C  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 11412  00027E  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 11413  000280  0100               	movlb	0	; () banked
 11414  000282  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 11415  000284  D7DD               	goto	l1130
 11416  000286  0100               	movlb	0	; () banked
 11417  000288  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 11418  00028A  E101               	bnz	u5480
 11419  00028C  D7D4               	goto	L9
 11420  00028E                     u5480:
 11421  00028E                     l1131:
 11422                           
 11423                           ; BSR set to: 0
 11424                           ;Test.c: 256: }
 11425                           ;Test.c: 257: LATAbits.LATA4 = ~1;
 11426  00028E  9889               	bcf	3977,4,c	;volatile
 11427                           
 11428                           ; BSR set to: 0
 11429                           ;Test.c: 258: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11430  000290  0E01               	movlw	1
 11431  000292  EC3C  F025         	call	_lcdInst
 11432  000296  0E68               	movlw	104
 11433  000298  0100               	movlb	0	; () banked
 11434  00029A  6FAB               	movwf	??_actuatorTest& (0+255),b
 11435  00029C  0EE4               	movlw	228
 11436  00029E                     u8197:
 11437  00029E  2EE8               	decfsz	wreg,f,c
 11438  0002A0  D7FE               	bra	u8197
 11439  0002A2  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11440  0002A4  D7FC               	bra	u8197
 11441  0002A6  F000               	nop	
 11442  0002A8  0E80               	movlw	128
 11443  0002AA  EC3C  F025         	call	_lcdInst
 11444                           
 11445                           ;Test.c: 261: machine_state = Sorting_state;
 11446  0002AE  0E01               	movlw	1
 11447  0002B0  0100               	movlb	0	; () banked
 11448  0002B2  6FFC               	movwf	_machine_state& (0+255),b
 11449                           
 11450                           ; BSR set to: 0
 11451                           ;Test.c: 262: was_low_1 = 0;
 11452  0002B4  0E00               	movlw	0
 11453  0002B6  6E7A               	movwf	_was_low_1+1,c	;volatile
 11454  0002B8  0E00               	movlw	0
 11455  0002BA  6E79               	movwf	_was_low_1,c	;volatile
 11456                           
 11457                           ; BSR set to: 0
 11458                           ;Test.c: 263: was_low_1 = 0;
 11459  0002BC  0E00               	movlw	0
 11460  0002BE  6E7A               	movwf	_was_low_1+1,c	;volatile
 11461  0002C0  0E00               	movlw	0
 11462  0002C2  6E79               	movwf	_was_low_1,c	;volatile
 11463                           
 11464                           ; BSR set to: 0
 11465                           ;Test.c: 270: printf("TST: PAN SERVO");
 11466  0002C4  0EA5               	movlw	low STR_96
 11467  0002C6  0100               	movlb	0	; () banked
 11468  0002C8  6F8E               	movwf	printf@f& (0+255),b
 11469  0002CA  0EFE               	movlw	high STR_96
 11470  0002CC  0100               	movlb	0	; () banked
 11471  0002CE  6F8F               	movwf	(printf@f+1)& (0+255),b
 11472  0002D0  ECB8  F008         	call	_printf	;wreg free
 11473                           
 11474                           ;Test.c: 271: lcdInst(0b11000000);;
 11475  0002D4  0EC0               	movlw	192
 11476  0002D6  EC3C  F025         	call	_lcdInst
 11477                           
 11478                           ;Test.c: 272: printf("MIDDLE -- 2s    ");
 11479  0002DA  0E0A               	movlw	low STR_97
 11480  0002DC  0100               	movlb	0	; () banked
 11481  0002DE  6F8E               	movwf	printf@f& (0+255),b
 11482  0002E0  0EFC               	movlw	high STR_97
 11483  0002E2  0100               	movlb	0	; () banked
 11484  0002E4  6F8F               	movwf	(printf@f+1)& (0+255),b
 11485  0002E6  ECB8  F008         	call	_printf	;wreg free
 11486                           
 11487                           ;Test.c: 273: updateServoPosition(1200, 1);
 11488  0002EA  0E04               	movlw	4
 11489  0002EC  0100               	movlb	0	; () banked
 11490  0002EE  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11491  0002F0  0EB0               	movlw	176
 11492  0002F2  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11493  0002F4  0E00               	movlw	0
 11494  0002F6  0100               	movlb	0	; () banked
 11495  0002F8  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11496  0002FA  0E01               	movlw	1
 11497  0002FC  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11498  0002FE  EC64  F01F         	call	_updateServoPosition	;wreg free
 11499                           
 11500                           ;Test.c: 274: TMR1ON = 1;
 11501  000302  80CD               	bsf	4045,0,c	;volatile
 11502                           
 11503                           ;Test.c: 275: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11504  000304  0E00               	movlw	0
 11505  000306  0100               	movlb	0	; () banked
 11506  000308  6FAE               	movwf	actuatorTest@i_1652& (0+255),b
 11507  00030A                     l7042:
 11508                           
 11509                           ; BSR set to: 0
 11510  00030A  0E63               	movlw	99
 11511  00030C  0100               	movlb	0	; () banked
 11512  00030E  65AE               	cpfsgt	actuatorTest@i_1652& (0+255),b
 11513  000310  D001               	goto	l7046
 11514  000312  D00C               	goto	l7050
 11515  000314                     l7046:
 11516                           
 11517                           ; BSR set to: 0
 11518  000314  0E68               	movlw	104
 11519  000316  0100               	movlb	0	; () banked
 11520  000318  6FAB               	movwf	??_actuatorTest& (0+255),b
 11521  00031A  0EE4               	movlw	228
 11522  00031C                     u8207:
 11523  00031C  2EE8               	decfsz	wreg,f,c
 11524  00031E  D7FE               	bra	u8207
 11525  000320  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11526  000322  D7FC               	bra	u8207
 11527  000324  F000               	nop	
 11528  000326  0100               	movlb	0	; () banked
 11529  000328  2BAE               	incf	actuatorTest@i_1652& (0+255),f,b
 11530  00032A  D7EF               	goto	l7042
 11531  00032C                     l7050:
 11532                           
 11533                           ; BSR set to: 0
 11534  00032C  0E00               	movlw	0
 11535  00032E  0100               	movlb	0	; () banked
 11536  000330  6FAF               	movwf	actuatorTest@i_1653& (0+255),b
 11537  000332                     l7052:
 11538                           
 11539                           ; BSR set to: 0
 11540  000332  0E63               	movlw	99
 11541  000334  0100               	movlb	0	; () banked
 11542  000336  65AF               	cpfsgt	actuatorTest@i_1653& (0+255),b
 11543  000338  D001               	goto	l7056
 11544  00033A  D00C               	goto	l7060
 11545  00033C                     l7056:
 11546                           
 11547                           ; BSR set to: 0
 11548  00033C  0E68               	movlw	104
 11549  00033E  0100               	movlb	0	; () banked
 11550  000340  6FAB               	movwf	??_actuatorTest& (0+255),b
 11551  000342  0EE4               	movlw	228
 11552  000344                     u8217:
 11553  000344  2EE8               	decfsz	wreg,f,c
 11554  000346  D7FE               	bra	u8217
 11555  000348  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11556  00034A  D7FC               	bra	u8217
 11557  00034C  F000               	nop	
 11558  00034E  0100               	movlb	0	; () banked
 11559  000350  2BAF               	incf	actuatorTest@i_1653& (0+255),f,b
 11560  000352  D7EF               	goto	l7052
 11561  000354                     l7060:
 11562                           
 11563                           ; BSR set to: 0
 11564                           ;Test.c: 277: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11565  000354  0E80               	movlw	128
 11566  000356  EC3C  F025         	call	_lcdInst
 11567  00035A  0EC0               	movlw	192
 11568  00035C  EC3C  F025         	call	_lcdInst
 11569                           
 11570                           ;Test.c: 278: printf("RIGHT -- 2s     ");
 11571  000360  0EF9               	movlw	low STR_98
 11572  000362  0100               	movlb	0	; () banked
 11573  000364  6F8E               	movwf	printf@f& (0+255),b
 11574  000366  0EFB               	movlw	high STR_98
 11575  000368  0100               	movlb	0	; () banked
 11576  00036A  6F8F               	movwf	(printf@f+1)& (0+255),b
 11577  00036C  ECB8  F008         	call	_printf	;wreg free
 11578                           
 11579                           ;Test.c: 279: updateServoPosition(500, 1);
 11580  000370  0E01               	movlw	1
 11581  000372  0100               	movlb	0	; () banked
 11582  000374  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11583  000376  0EF4               	movlw	244
 11584  000378  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11585  00037A  0E00               	movlw	0
 11586  00037C  0100               	movlb	0	; () banked
 11587  00037E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11588  000380  0E01               	movlw	1
 11589  000382  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11590  000384  EC64  F01F         	call	_updateServoPosition	;wreg free
 11591                           
 11592                           ;Test.c: 280: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11593  000388  0E00               	movlw	0
 11594  00038A  0100               	movlb	0	; () banked
 11595  00038C  6FB0               	movwf	actuatorTest@i_1655& (0+255),b
 11596  00038E                     l7068:
 11597                           
 11598                           ; BSR set to: 0
 11599  00038E  0E63               	movlw	99
 11600  000390  0100               	movlb	0	; () banked
 11601  000392  65B0               	cpfsgt	actuatorTest@i_1655& (0+255),b
 11602  000394  D001               	goto	l7072
 11603  000396  D00C               	goto	l7076
 11604  000398                     l7072:
 11605                           
 11606                           ; BSR set to: 0
 11607  000398  0E68               	movlw	104
 11608  00039A  0100               	movlb	0	; () banked
 11609  00039C  6FAB               	movwf	??_actuatorTest& (0+255),b
 11610  00039E  0EE4               	movlw	228
 11611  0003A0                     u8227:
 11612  0003A0  2EE8               	decfsz	wreg,f,c
 11613  0003A2  D7FE               	bra	u8227
 11614  0003A4  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11615  0003A6  D7FC               	bra	u8227
 11616  0003A8  F000               	nop	
 11617  0003AA  0100               	movlb	0	; () banked
 11618  0003AC  2BB0               	incf	actuatorTest@i_1655& (0+255),f,b
 11619  0003AE  D7EF               	goto	l7068
 11620  0003B0                     l7076:
 11621                           
 11622                           ; BSR set to: 0
 11623  0003B0  0E00               	movlw	0
 11624  0003B2  0100               	movlb	0	; () banked
 11625  0003B4  6FB1               	movwf	actuatorTest@i_1656& (0+255),b
 11626  0003B6                     l7078:
 11627                           
 11628                           ; BSR set to: 0
 11629  0003B6  0E63               	movlw	99
 11630  0003B8  0100               	movlb	0	; () banked
 11631  0003BA  65B1               	cpfsgt	actuatorTest@i_1656& (0+255),b
 11632  0003BC  D001               	goto	l7082
 11633  0003BE  D00C               	goto	l7086
 11634  0003C0                     l7082:
 11635                           
 11636                           ; BSR set to: 0
 11637  0003C0  0E68               	movlw	104
 11638  0003C2  0100               	movlb	0	; () banked
 11639  0003C4  6FAB               	movwf	??_actuatorTest& (0+255),b
 11640  0003C6  0EE4               	movlw	228
 11641  0003C8                     u8237:
 11642  0003C8  2EE8               	decfsz	wreg,f,c
 11643  0003CA  D7FE               	bra	u8237
 11644  0003CC  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11645  0003CE  D7FC               	bra	u8237
 11646  0003D0  F000               	nop	
 11647  0003D2  0100               	movlb	0	; () banked
 11648  0003D4  2BB1               	incf	actuatorTest@i_1656& (0+255),f,b
 11649  0003D6  D7EF               	goto	l7078
 11650  0003D8                     l7086:
 11651                           
 11652                           ; BSR set to: 0
 11653                           ;Test.c: 282: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11654  0003D8  0E80               	movlw	128
 11655  0003DA  EC3C  F025         	call	_lcdInst
 11656  0003DE  0EC0               	movlw	192
 11657  0003E0  EC3C  F025         	call	_lcdInst
 11658                           
 11659                           ;Test.c: 283: printf("LEFT -- 2s      ");
 11660  0003E4  0ED7               	movlw	low STR_99
 11661  0003E6  0100               	movlb	0	; () banked
 11662  0003E8  6F8E               	movwf	printf@f& (0+255),b
 11663  0003EA  0EFB               	movlw	high STR_99
 11664  0003EC  0100               	movlb	0	; () banked
 11665  0003EE  6F8F               	movwf	(printf@f+1)& (0+255),b
 11666  0003F0  ECB8  F008         	call	_printf	;wreg free
 11667                           
 11668                           ;Test.c: 284: updateServoPosition(2200, 1);
 11669  0003F4  0E08               	movlw	8
 11670  0003F6  0100               	movlb	0	; () banked
 11671  0003F8  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11672  0003FA  0E98               	movlw	152
 11673  0003FC  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11674  0003FE  0E00               	movlw	0
 11675  000400  0100               	movlb	0	; () banked
 11676  000402  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11677  000404  0E01               	movlw	1
 11678  000406  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11679  000408  EC64  F01F         	call	_updateServoPosition	;wreg free
 11680                           
 11681                           ;Test.c: 285: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11682  00040C  0E00               	movlw	0
 11683  00040E  0100               	movlb	0	; () banked
 11684  000410  6FB2               	movwf	actuatorTest@i_1658& (0+255),b
 11685  000412                     l7094:
 11686                           
 11687                           ; BSR set to: 0
 11688  000412  0E63               	movlw	99
 11689  000414  0100               	movlb	0	; () banked
 11690  000416  65B2               	cpfsgt	actuatorTest@i_1658& (0+255),b
 11691  000418  D001               	goto	l7098
 11692  00041A  D00C               	goto	l7102
 11693  00041C                     l7098:
 11694                           
 11695                           ; BSR set to: 0
 11696  00041C  0E68               	movlw	104
 11697  00041E  0100               	movlb	0	; () banked
 11698  000420  6FAB               	movwf	??_actuatorTest& (0+255),b
 11699  000422  0EE4               	movlw	228
 11700  000424                     u8247:
 11701  000424  2EE8               	decfsz	wreg,f,c
 11702  000426  D7FE               	bra	u8247
 11703  000428  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11704  00042A  D7FC               	bra	u8247
 11705  00042C  F000               	nop	
 11706  00042E  0100               	movlb	0	; () banked
 11707  000430  2BB2               	incf	actuatorTest@i_1658& (0+255),f,b
 11708  000432  D7EF               	goto	l7094
 11709  000434                     l7102:
 11710                           
 11711                           ; BSR set to: 0
 11712  000434  0E00               	movlw	0
 11713  000436  0100               	movlb	0	; () banked
 11714  000438  6FB3               	movwf	actuatorTest@i_1659& (0+255),b
 11715  00043A                     l7104:
 11716                           
 11717                           ; BSR set to: 0
 11718  00043A  0E63               	movlw	99
 11719  00043C  0100               	movlb	0	; () banked
 11720  00043E  65B3               	cpfsgt	actuatorTest@i_1659& (0+255),b
 11721  000440  D001               	goto	l7108
 11722  000442  D00C               	goto	l7112
 11723  000444                     l7108:
 11724                           
 11725                           ; BSR set to: 0
 11726  000444  0E68               	movlw	104
 11727  000446  0100               	movlb	0	; () banked
 11728  000448  6FAB               	movwf	??_actuatorTest& (0+255),b
 11729  00044A  0EE4               	movlw	228
 11730  00044C                     u8257:
 11731  00044C  2EE8               	decfsz	wreg,f,c
 11732  00044E  D7FE               	bra	u8257
 11733  000450  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11734  000452  D7FC               	bra	u8257
 11735  000454  F000               	nop	
 11736  000456  0100               	movlb	0	; () banked
 11737  000458  2BB3               	incf	actuatorTest@i_1659& (0+255),f,b
 11738  00045A  D7EF               	goto	l7104
 11739  00045C                     l7112:
 11740                           
 11741                           ; BSR set to: 0
 11742                           ;Test.c: 287: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11743  00045C  0E80               	movlw	128
 11744  00045E  EC3C  F025         	call	_lcdInst
 11745  000462  0EC0               	movlw	192
 11746  000464  EC3C  F025         	call	_lcdInst
 11747                           
 11748                           ;Test.c: 288: printf("MID-LEFT -- 2s  ");
 11749  000468  0E2C               	movlw	low STR_100
 11750  00046A  0100               	movlb	0	; () banked
 11751  00046C  6F8E               	movwf	printf@f& (0+255),b
 11752  00046E  0EFC               	movlw	high STR_100
 11753  000470  0100               	movlb	0	; () banked
 11754  000472  6F8F               	movwf	(printf@f+1)& (0+255),b
 11755  000474  ECB8  F008         	call	_printf	;wreg free
 11756                           
 11757                           ;Test.c: 289: updateServoPosition(1670, 1);
 11758  000478  0E06               	movlw	6
 11759  00047A  0100               	movlb	0	; () banked
 11760  00047C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11761  00047E  0E86               	movlw	134
 11762  000480  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11763  000482  0E00               	movlw	0
 11764  000484  0100               	movlb	0	; () banked
 11765  000486  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11766  000488  0E01               	movlw	1
 11767  00048A  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11768  00048C  EC64  F01F         	call	_updateServoPosition	;wreg free
 11769                           
 11770                           ;Test.c: 290: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11771  000490  0E00               	movlw	0
 11772  000492  0100               	movlb	0	; () banked
 11773  000494  6FB4               	movwf	actuatorTest@i_1661& (0+255),b
 11774  000496                     l7120:
 11775                           
 11776                           ; BSR set to: 0
 11777  000496  0E63               	movlw	99
 11778  000498  0100               	movlb	0	; () banked
 11779  00049A  65B4               	cpfsgt	actuatorTest@i_1661& (0+255),b
 11780  00049C  D001               	goto	l7124
 11781  00049E  D00C               	goto	l7128
 11782  0004A0                     l7124:
 11783                           
 11784                           ; BSR set to: 0
 11785  0004A0  0E68               	movlw	104
 11786  0004A2  0100               	movlb	0	; () banked
 11787  0004A4  6FAB               	movwf	??_actuatorTest& (0+255),b
 11788  0004A6  0EE4               	movlw	228
 11789  0004A8                     u8267:
 11790  0004A8  2EE8               	decfsz	wreg,f,c
 11791  0004AA  D7FE               	bra	u8267
 11792  0004AC  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11793  0004AE  D7FC               	bra	u8267
 11794  0004B0  F000               	nop	
 11795  0004B2  0100               	movlb	0	; () banked
 11796  0004B4  2BB4               	incf	actuatorTest@i_1661& (0+255),f,b
 11797  0004B6  D7EF               	goto	l7120
 11798  0004B8                     l7128:
 11799                           
 11800                           ; BSR set to: 0
 11801  0004B8  0E00               	movlw	0
 11802  0004BA  0100               	movlb	0	; () banked
 11803  0004BC  6FB5               	movwf	actuatorTest@i_1662& (0+255),b
 11804  0004BE                     l7130:
 11805                           
 11806                           ; BSR set to: 0
 11807  0004BE  0E63               	movlw	99
 11808  0004C0  0100               	movlb	0	; () banked
 11809  0004C2  65B5               	cpfsgt	actuatorTest@i_1662& (0+255),b
 11810  0004C4  D001               	goto	l7134
 11811  0004C6  D00C               	goto	l7138
 11812  0004C8                     l7134:
 11813                           
 11814                           ; BSR set to: 0
 11815  0004C8  0E68               	movlw	104
 11816  0004CA  0100               	movlb	0	; () banked
 11817  0004CC  6FAB               	movwf	??_actuatorTest& (0+255),b
 11818  0004CE  0EE4               	movlw	228
 11819  0004D0                     u8277:
 11820  0004D0  2EE8               	decfsz	wreg,f,c
 11821  0004D2  D7FE               	bra	u8277
 11822  0004D4  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11823  0004D6  D7FC               	bra	u8277
 11824  0004D8  F000               	nop	
 11825  0004DA  0100               	movlb	0	; () banked
 11826  0004DC  2BB5               	incf	actuatorTest@i_1662& (0+255),f,b
 11827  0004DE  D7EF               	goto	l7130
 11828  0004E0                     l7138:
 11829                           
 11830                           ; BSR set to: 0
 11831                           ;Test.c: 292: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11832  0004E0  0E80               	movlw	128
 11833  0004E2  EC3C  F025         	call	_lcdInst
 11834  0004E6  0EC0               	movlw	192
 11835  0004E8  EC3C  F025         	call	_lcdInst
 11836                           
 11837                           ;Test.c: 293: printf("MID-RIGHT -- 2s ");
 11838  0004EC  0E3D               	movlw	low STR_101
 11839  0004EE  0100               	movlb	0	; () banked
 11840  0004F0  6F8E               	movwf	printf@f& (0+255),b
 11841  0004F2  0EFC               	movlw	high STR_101
 11842  0004F4  0100               	movlb	0	; () banked
 11843  0004F6  6F8F               	movwf	(printf@f+1)& (0+255),b
 11844  0004F8  ECB8  F008         	call	_printf	;wreg free
 11845                           
 11846                           ;Test.c: 294: updateServoPosition(850, 1);
 11847  0004FC  0E03               	movlw	3
 11848  0004FE  0100               	movlb	0	; () banked
 11849  000500  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11850  000502  0E52               	movlw	82
 11851  000504  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11852  000506  0E00               	movlw	0
 11853  000508  0100               	movlb	0	; () banked
 11854  00050A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11855  00050C  0E01               	movlw	1
 11856  00050E  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11857  000510  EC64  F01F         	call	_updateServoPosition	;wreg free
 11858                           
 11859                           ;Test.c: 295: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11860  000514  0E00               	movlw	0
 11861  000516  0100               	movlb	0	; () banked
 11862  000518  6FB6               	movwf	actuatorTest@i_1664& (0+255),b
 11863  00051A                     l7146:
 11864                           
 11865                           ; BSR set to: 0
 11866  00051A  0E63               	movlw	99
 11867  00051C  0100               	movlb	0	; () banked
 11868  00051E  65B6               	cpfsgt	actuatorTest@i_1664& (0+255),b
 11869  000520  D001               	goto	l7150
 11870  000522  D00C               	goto	l7154
 11871  000524                     l7150:
 11872                           
 11873                           ; BSR set to: 0
 11874  000524  0E68               	movlw	104
 11875  000526  0100               	movlb	0	; () banked
 11876  000528  6FAB               	movwf	??_actuatorTest& (0+255),b
 11877  00052A  0EE4               	movlw	228
 11878  00052C                     u8287:
 11879  00052C  2EE8               	decfsz	wreg,f,c
 11880  00052E  D7FE               	bra	u8287
 11881  000530  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11882  000532  D7FC               	bra	u8287
 11883  000534  F000               	nop	
 11884  000536  0100               	movlb	0	; () banked
 11885  000538  2BB6               	incf	actuatorTest@i_1664& (0+255),f,b
 11886  00053A  D7EF               	goto	l7146
 11887  00053C                     l7154:
 11888                           
 11889                           ; BSR set to: 0
 11890  00053C  0E00               	movlw	0
 11891  00053E  0100               	movlb	0	; () banked
 11892  000540  6FB7               	movwf	actuatorTest@i_1665& (0+255),b
 11893  000542                     l7156:
 11894                           
 11895                           ; BSR set to: 0
 11896  000542  0E63               	movlw	99
 11897  000544  0100               	movlb	0	; () banked
 11898  000546  65B7               	cpfsgt	actuatorTest@i_1665& (0+255),b
 11899  000548  D001               	goto	l7160
 11900  00054A  D00C               	goto	l7164
 11901  00054C                     l7160:
 11902                           
 11903                           ; BSR set to: 0
 11904  00054C  0E68               	movlw	104
 11905  00054E  0100               	movlb	0	; () banked
 11906  000550  6FAB               	movwf	??_actuatorTest& (0+255),b
 11907  000552  0EE4               	movlw	228
 11908  000554                     u8297:
 11909  000554  2EE8               	decfsz	wreg,f,c
 11910  000556  D7FE               	bra	u8297
 11911  000558  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11912  00055A  D7FC               	bra	u8297
 11913  00055C  F000               	nop	
 11914  00055E  0100               	movlb	0	; () banked
 11915  000560  2BB7               	incf	actuatorTest@i_1665& (0+255),f,b
 11916  000562  D7EF               	goto	l7156
 11917  000564                     l7164:
 11918                           
 11919                           ; BSR set to: 0
 11920                           ;Test.c: 297: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11921  000564  0E80               	movlw	128
 11922  000566  EC3C  F025         	call	_lcdInst
 11923  00056A  0EC0               	movlw	192
 11924  00056C  EC3C  F025         	call	_lcdInst
 11925                           
 11926                           ;Test.c: 298: printf("MID -- 2s       ");
 11927  000570  0EB5               	movlw	low STR_102
 11928  000572  0100               	movlb	0	; () banked
 11929  000574  6F8E               	movwf	printf@f& (0+255),b
 11930  000576  0EFB               	movlw	high STR_102
 11931  000578  0100               	movlb	0	; () banked
 11932  00057A  6F8F               	movwf	(printf@f+1)& (0+255),b
 11933  00057C  ECB8  F008         	call	_printf	;wreg free
 11934                           
 11935                           ;Test.c: 299: updateServoPosition(1200, 1);
 11936  000580  0E04               	movlw	4
 11937  000582  0100               	movlb	0	; () banked
 11938  000584  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11939  000586  0EB0               	movlw	176
 11940  000588  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11941  00058A  0E00               	movlw	0
 11942  00058C  0100               	movlb	0	; () banked
 11943  00058E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11944  000590  0E01               	movlw	1
 11945  000592  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11946  000594  EC64  F01F         	call	_updateServoPosition	;wreg free
 11947                           
 11948                           ;Test.c: 300: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11949  000598  0E00               	movlw	0
 11950  00059A  0100               	movlb	0	; () banked
 11951  00059C  6FB8               	movwf	actuatorTest@i_1667& (0+255),b
 11952  00059E                     l7172:
 11953                           
 11954                           ; BSR set to: 0
 11955  00059E  0E63               	movlw	99
 11956  0005A0  0100               	movlb	0	; () banked
 11957  0005A2  65B8               	cpfsgt	actuatorTest@i_1667& (0+255),b
 11958  0005A4  D001               	goto	l7176
 11959  0005A6  D00C               	goto	l7180
 11960  0005A8                     l7176:
 11961                           
 11962                           ; BSR set to: 0
 11963  0005A8  0E68               	movlw	104
 11964  0005AA  0100               	movlb	0	; () banked
 11965  0005AC  6FAB               	movwf	??_actuatorTest& (0+255),b
 11966  0005AE  0EE4               	movlw	228
 11967  0005B0                     u8307:
 11968  0005B0  2EE8               	decfsz	wreg,f,c
 11969  0005B2  D7FE               	bra	u8307
 11970  0005B4  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11971  0005B6  D7FC               	bra	u8307
 11972  0005B8  F000               	nop	
 11973  0005BA  0100               	movlb	0	; () banked
 11974  0005BC  2BB8               	incf	actuatorTest@i_1667& (0+255),f,b
 11975  0005BE  D7EF               	goto	l7172
 11976  0005C0                     l7180:
 11977                           
 11978                           ; BSR set to: 0
 11979  0005C0  0E00               	movlw	0
 11980  0005C2  0100               	movlb	0	; () banked
 11981  0005C4  6FB9               	movwf	actuatorTest@i_1668& (0+255),b
 11982  0005C6                     l7182:
 11983                           
 11984                           ; BSR set to: 0
 11985  0005C6  0E63               	movlw	99
 11986  0005C8  0100               	movlb	0	; () banked
 11987  0005CA  65B9               	cpfsgt	actuatorTest@i_1668& (0+255),b
 11988  0005CC  D001               	goto	l7186
 11989  0005CE  D00C               	goto	l1155
 11990  0005D0                     l7186:
 11991                           
 11992                           ; BSR set to: 0
 11993  0005D0  0E68               	movlw	104
 11994  0005D2  0100               	movlb	0	; () banked
 11995  0005D4  6FAB               	movwf	??_actuatorTest& (0+255),b
 11996  0005D6  0EE4               	movlw	228
 11997  0005D8                     u8317:
 11998  0005D8  2EE8               	decfsz	wreg,f,c
 11999  0005DA  D7FE               	bra	u8317
 12000  0005DC  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12001  0005DE  D7FC               	bra	u8317
 12002  0005E0  F000               	nop	
 12003  0005E2  0100               	movlb	0	; () banked
 12004  0005E4  2BB9               	incf	actuatorTest@i_1668& (0+255),f,b
 12005  0005E6  D7EF               	goto	l7182
 12006  0005E8                     l1155:
 12007                           
 12008                           ; BSR set to: 0
 12009                           ;Test.c: 301: TMR1ON = 0;
 12010  0005E8  90CD               	bcf	4045,0,c	;volatile
 12011                           
 12012                           ; BSR set to: 0
 12013                           ;Test.c: 308: printf("TST: TILT SERVO");
 12014  0005EA  0E3A               	movlw	low STR_103
 12015  0005EC  0100               	movlb	0	; () banked
 12016  0005EE  6F8E               	movwf	printf@f& (0+255),b
 12017  0005F0  0EFE               	movlw	high STR_103
 12018  0005F2  0100               	movlb	0	; () banked
 12019  0005F4  6F8F               	movwf	(printf@f+1)& (0+255),b
 12020  0005F6  ECB8  F008         	call	_printf	;wreg free
 12021                           
 12022                           ;Test.c: 309: lcdInst(0b11000000);;
 12023  0005FA  0EC0               	movlw	192
 12024  0005FC  EC3C  F025         	call	_lcdInst
 12025                           
 12026                           ;Test.c: 310: printf("LEVEL -- 2s     ");
 12027  000600  0EE8               	movlw	low STR_104
 12028  000602  0100               	movlb	0	; () banked
 12029  000604  6F8E               	movwf	printf@f& (0+255),b
 12030  000606  0EFB               	movlw	high STR_104
 12031  000608  0100               	movlb	0	; () banked
 12032  00060A  6F8F               	movwf	(printf@f+1)& (0+255),b
 12033  00060C  ECB8  F008         	call	_printf	;wreg free
 12034                           
 12035                           ;Test.c: 311: updateServoPosition(1150, 3);
 12036  000610  0E04               	movlw	4
 12037  000612  0100               	movlb	0	; () banked
 12038  000614  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12039  000616  0E7E               	movlw	126
 12040  000618  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12041  00061A  0E00               	movlw	0
 12042  00061C  0100               	movlb	0	; () banked
 12043  00061E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12044  000620  0E03               	movlw	3
 12045  000622  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12046  000624  EC64  F01F         	call	_updateServoPosition	;wreg free
 12047                           
 12048                           ;Test.c: 312: TMR3ON = 1;
 12049  000628  80B1               	bsf	4017,0,c	;volatile
 12050                           
 12051                           ;Test.c: 313: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12052  00062A  0E00               	movlw	0
 12053  00062C  0100               	movlb	0	; () banked
 12054  00062E  6FBA               	movwf	actuatorTest@i_1671& (0+255),b
 12055  000630                     l7200:
 12056                           
 12057                           ; BSR set to: 0
 12058  000630  0E63               	movlw	99
 12059  000632  0100               	movlb	0	; () banked
 12060  000634  65BA               	cpfsgt	actuatorTest@i_1671& (0+255),b
 12061  000636  D001               	goto	l7204
 12062  000638  D00C               	goto	l7208
 12063  00063A                     l7204:
 12064                           
 12065                           ; BSR set to: 0
 12066  00063A  0E68               	movlw	104
 12067  00063C  0100               	movlb	0	; () banked
 12068  00063E  6FAB               	movwf	??_actuatorTest& (0+255),b
 12069  000640  0EE4               	movlw	228
 12070  000642                     u8327:
 12071  000642  2EE8               	decfsz	wreg,f,c
 12072  000644  D7FE               	bra	u8327
 12073  000646  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12074  000648  D7FC               	bra	u8327
 12075  00064A  F000               	nop	
 12076  00064C  0100               	movlb	0	; () banked
 12077  00064E  2BBA               	incf	actuatorTest@i_1671& (0+255),f,b
 12078  000650  D7EF               	goto	l7200
 12079  000652                     l7208:
 12080                           
 12081                           ; BSR set to: 0
 12082  000652  0E00               	movlw	0
 12083  000654  0100               	movlb	0	; () banked
 12084  000656  6FBB               	movwf	actuatorTest@i_1672& (0+255),b
 12085  000658                     l7210:
 12086                           
 12087                           ; BSR set to: 0
 12088  000658  0E63               	movlw	99
 12089  00065A  0100               	movlb	0	; () banked
 12090  00065C  65BB               	cpfsgt	actuatorTest@i_1672& (0+255),b
 12091  00065E  D001               	goto	l7214
 12092  000660  D00C               	goto	l7218
 12093  000662                     l7214:
 12094                           
 12095                           ; BSR set to: 0
 12096  000662  0E68               	movlw	104
 12097  000664  0100               	movlb	0	; () banked
 12098  000666  6FAB               	movwf	??_actuatorTest& (0+255),b
 12099  000668  0EE4               	movlw	228
 12100  00066A                     u8337:
 12101  00066A  2EE8               	decfsz	wreg,f,c
 12102  00066C  D7FE               	bra	u8337
 12103  00066E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12104  000670  D7FC               	bra	u8337
 12105  000672  F000               	nop	
 12106  000674  0100               	movlb	0	; () banked
 12107  000676  2BBB               	incf	actuatorTest@i_1672& (0+255),f,b
 12108  000678  D7EF               	goto	l7210
 12109  00067A                     l7218:
 12110                           
 12111                           ; BSR set to: 0
 12112                           ;Test.c: 315: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12113  00067A  0E80               	movlw	128
 12114  00067C  EC3C  F025         	call	_lcdInst
 12115  000680  0EC0               	movlw	192
 12116  000682  EC3C  F025         	call	_lcdInst
 12117                           
 12118                           ;Test.c: 316: printf("DROP -- 2s      ");
 12119  000686  0EC6               	movlw	low STR_105
 12120  000688  0100               	movlb	0	; () banked
 12121  00068A  6F8E               	movwf	printf@f& (0+255),b
 12122  00068C  0EFB               	movlw	high STR_105
 12123  00068E  0100               	movlb	0	; () banked
 12124  000690  6F8F               	movwf	(printf@f+1)& (0+255),b
 12125  000692  ECB8  F008         	call	_printf	;wreg free
 12126                           
 12127                           ;Test.c: 317: updateServoPosition(1260, 3);
 12128  000696  0E04               	movlw	4
 12129  000698  0100               	movlb	0	; () banked
 12130  00069A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12131  00069C  0EEC               	movlw	236
 12132  00069E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12133  0006A0  0E00               	movlw	0
 12134  0006A2  0100               	movlb	0	; () banked
 12135  0006A4  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12136  0006A6  0E03               	movlw	3
 12137  0006A8  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12138  0006AA  EC64  F01F         	call	_updateServoPosition	;wreg free
 12139                           
 12140                           ;Test.c: 318: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12141  0006AE  0E00               	movlw	0
 12142  0006B0  0100               	movlb	0	; () banked
 12143  0006B2  6FBC               	movwf	actuatorTest@i_1674& (0+255),b
 12144  0006B4                     l7226:
 12145                           
 12146                           ; BSR set to: 0
 12147  0006B4  0E63               	movlw	99
 12148  0006B6  0100               	movlb	0	; () banked
 12149  0006B8  65BC               	cpfsgt	actuatorTest@i_1674& (0+255),b
 12150  0006BA  D001               	goto	l7230
 12151  0006BC  D00C               	goto	l7234
 12152  0006BE                     l7230:
 12153                           
 12154                           ; BSR set to: 0
 12155  0006BE  0E68               	movlw	104
 12156  0006C0  0100               	movlb	0	; () banked
 12157  0006C2  6FAB               	movwf	??_actuatorTest& (0+255),b
 12158  0006C4  0EE4               	movlw	228
 12159  0006C6                     u8347:
 12160  0006C6  2EE8               	decfsz	wreg,f,c
 12161  0006C8  D7FE               	bra	u8347
 12162  0006CA  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12163  0006CC  D7FC               	bra	u8347
 12164  0006CE  F000               	nop	
 12165  0006D0  0100               	movlb	0	; () banked
 12166  0006D2  2BBC               	incf	actuatorTest@i_1674& (0+255),f,b
 12167  0006D4  D7EF               	goto	l7226
 12168  0006D6                     l7234:
 12169                           
 12170                           ; BSR set to: 0
 12171  0006D6  0E00               	movlw	0
 12172  0006D8  0100               	movlb	0	; () banked
 12173  0006DA  6FBD               	movwf	actuatorTest@i_1675& (0+255),b
 12174  0006DC                     l7236:
 12175                           
 12176                           ; BSR set to: 0
 12177  0006DC  0E63               	movlw	99
 12178  0006DE  0100               	movlb	0	; () banked
 12179  0006E0  65BD               	cpfsgt	actuatorTest@i_1675& (0+255),b
 12180  0006E2  D001               	goto	l7240
 12181  0006E4  D00C               	goto	l7244
 12182  0006E6                     l7240:
 12183                           
 12184                           ; BSR set to: 0
 12185  0006E6  0E68               	movlw	104
 12186  0006E8  0100               	movlb	0	; () banked
 12187  0006EA  6FAB               	movwf	??_actuatorTest& (0+255),b
 12188  0006EC  0EE4               	movlw	228
 12189  0006EE                     u8357:
 12190  0006EE  2EE8               	decfsz	wreg,f,c
 12191  0006F0  D7FE               	bra	u8357
 12192  0006F2  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12193  0006F4  D7FC               	bra	u8357
 12194  0006F6  F000               	nop	
 12195  0006F8  0100               	movlb	0	; () banked
 12196  0006FA  2BBD               	incf	actuatorTest@i_1675& (0+255),f,b
 12197  0006FC  D7EF               	goto	l7236
 12198  0006FE                     l7244:
 12199                           
 12200                           ; BSR set to: 0
 12201                           ;Test.c: 320: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12202  0006FE  0E80               	movlw	128
 12203  000700  EC3C  F025         	call	_lcdInst
 12204  000704  0EC0               	movlw	192
 12205  000706  EC3C  F025         	call	_lcdInst
 12206                           
 12207                           ;Test.c: 321: printf("LEVEL -- 2s     ");
 12208  00070A  0EE8               	movlw	low STR_104
 12209  00070C  0100               	movlb	0	; () banked
 12210  00070E  6F8E               	movwf	printf@f& (0+255),b
 12211  000710  0EFB               	movlw	high STR_104
 12212  000712  0100               	movlb	0	; () banked
 12213  000714  6F8F               	movwf	(printf@f+1)& (0+255),b
 12214  000716  ECB8  F008         	call	_printf	;wreg free
 12215                           
 12216                           ;Test.c: 322: updateServoPosition(1150, 3);
 12217  00071A  0E04               	movlw	4
 12218  00071C  0100               	movlb	0	; () banked
 12219  00071E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12220  000720  0E7E               	movlw	126
 12221  000722  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12222  000724  0E00               	movlw	0
 12223  000726  0100               	movlb	0	; () banked
 12224  000728  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12225  00072A  0E03               	movlw	3
 12226  00072C  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12227  00072E  EC64  F01F         	call	_updateServoPosition	;wreg free
 12228                           
 12229                           ;Test.c: 323: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12230  000732  0E00               	movlw	0
 12231  000734  0100               	movlb	0	; () banked
 12232  000736  6FBE               	movwf	actuatorTest@i_1677& (0+255),b
 12233  000738                     l7252:
 12234                           
 12235                           ; BSR set to: 0
 12236  000738  0E63               	movlw	99
 12237  00073A  0100               	movlb	0	; () banked
 12238  00073C  65BE               	cpfsgt	actuatorTest@i_1677& (0+255),b
 12239  00073E  D001               	goto	l7256
 12240  000740  D00C               	goto	l7260
 12241  000742                     l7256:
 12242                           
 12243                           ; BSR set to: 0
 12244  000742  0E68               	movlw	104
 12245  000744  0100               	movlb	0	; () banked
 12246  000746  6FAB               	movwf	??_actuatorTest& (0+255),b
 12247  000748  0EE4               	movlw	228
 12248  00074A                     u8367:
 12249  00074A  2EE8               	decfsz	wreg,f,c
 12250  00074C  D7FE               	bra	u8367
 12251  00074E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12252  000750  D7FC               	bra	u8367
 12253  000752  F000               	nop	
 12254  000754  0100               	movlb	0	; () banked
 12255  000756  2BBE               	incf	actuatorTest@i_1677& (0+255),f,b
 12256  000758  D7EF               	goto	l7252
 12257  00075A                     l7260:
 12258                           
 12259                           ; BSR set to: 0
 12260  00075A  0E00               	movlw	0
 12261  00075C  0100               	movlb	0	; () banked
 12262  00075E  6FBF               	movwf	actuatorTest@i_1678& (0+255),b
 12263  000760                     l7262:
 12264                           
 12265                           ; BSR set to: 0
 12266  000760  0E63               	movlw	99
 12267  000762  0100               	movlb	0	; () banked
 12268  000764  65BF               	cpfsgt	actuatorTest@i_1678& (0+255),b
 12269  000766  D001               	goto	l7266
 12270  000768  D00C               	goto	l1167
 12271  00076A                     l7266:
 12272                           
 12273                           ; BSR set to: 0
 12274  00076A  0E68               	movlw	104
 12275  00076C  0100               	movlb	0	; () banked
 12276  00076E  6FAB               	movwf	??_actuatorTest& (0+255),b
 12277  000770  0EE4               	movlw	228
 12278  000772                     u8377:
 12279  000772  2EE8               	decfsz	wreg,f,c
 12280  000774  D7FE               	bra	u8377
 12281  000776  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12282  000778  D7FC               	bra	u8377
 12283  00077A  F000               	nop	
 12284  00077C  0100               	movlb	0	; () banked
 12285  00077E  2BBF               	incf	actuatorTest@i_1678& (0+255),f,b
 12286  000780  D7EF               	goto	l7262
 12287  000782                     l1167:
 12288                           
 12289                           ; BSR set to: 0
 12290                           ;Test.c: 324: TMR3ON = 0;
 12291  000782  90B1               	bcf	4017,0,c	;volatile
 12292                           
 12293                           ;Test.c: 325: (INTCONbits.GIE = 0);
 12294  000784  9EF2               	bcf	intcon,7,c	;volatile
 12295                           
 12296                           ; BSR set to: 0
 12297                           ;Test.c: 330: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12298  000786  0E01               	movlw	1
 12299  000788  EC3C  F025         	call	_lcdInst
 12300  00078C  0E68               	movlw	104
 12301  00078E  0100               	movlb	0	; () banked
 12302  000790  6FAB               	movwf	??_actuatorTest& (0+255),b
 12303  000792  0EE4               	movlw	228
 12304  000794                     u8387:
 12305  000794  2EE8               	decfsz	wreg,f,c
 12306  000796  D7FE               	bra	u8387
 12307  000798  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12308  00079A  D7FC               	bra	u8387
 12309  00079C  F000               	nop	
 12310  00079E  0E80               	movlw	128
 12311  0007A0  EC3C  F025         	call	_lcdInst
 12312                           
 12313                           ;Test.c: 331: printf("TST: CAM SERVO");
 12314  0007A4  0E96               	movlw	low STR_107
 12315  0007A6  0100               	movlb	0	; () banked
 12316  0007A8  6F8E               	movwf	printf@f& (0+255),b
 12317  0007AA  0EFE               	movlw	high STR_107
 12318  0007AC  0100               	movlb	0	; () banked
 12319  0007AE  6F8F               	movwf	(printf@f+1)& (0+255),b
 12320  0007B0  ECB8  F008         	call	_printf	;wreg free
 12321                           
 12322                           ;Test.c: 332: lcdInst(0b11000000);;
 12323  0007B4  0EC0               	movlw	192
 12324  0007B6  EC3C  F025         	call	_lcdInst
 12325                           
 12326                           ;Test.c: 333: printf("CAM UP  |RC0=1");
 12327  0007BA  0E78               	movlw	low STR_108
 12328  0007BC  0100               	movlb	0	; () banked
 12329  0007BE  6F8E               	movwf	printf@f& (0+255),b
 12330  0007C0  0EFE               	movlw	high STR_108
 12331  0007C2  0100               	movlb	0	; () banked
 12332  0007C4  6F8F               	movwf	(printf@f+1)& (0+255),b
 12333  0007C6  ECB8  F008         	call	_printf	;wreg free
 12334                           
 12335                           ;Test.c: 334: LATCbits.LATC0 = 1;
 12336  0007CA  808B               	bsf	3979,0,c	;volatile
 12337                           
 12338                           ;Test.c: 335: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12339  0007CC  0E00               	movlw	0
 12340  0007CE  0100               	movlb	0	; () banked
 12341  0007D0  6FC0               	movwf	actuatorTest@i_1681& (0+255),b
 12342  0007D2                     l7286:
 12343                           
 12344                           ; BSR set to: 0
 12345  0007D2  0E63               	movlw	99
 12346  0007D4  0100               	movlb	0	; () banked
 12347  0007D6  65C0               	cpfsgt	actuatorTest@i_1681& (0+255),b
 12348  0007D8  D001               	goto	l7290
 12349  0007DA  D00C               	goto	l7294
 12350  0007DC                     l7290:
 12351                           
 12352                           ; BSR set to: 0
 12353  0007DC  0E68               	movlw	104
 12354  0007DE  0100               	movlb	0	; () banked
 12355  0007E0  6FAB               	movwf	??_actuatorTest& (0+255),b
 12356  0007E2  0EE4               	movlw	228
 12357  0007E4                     u8397:
 12358  0007E4  2EE8               	decfsz	wreg,f,c
 12359  0007E6  D7FE               	bra	u8397
 12360  0007E8  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12361  0007EA  D7FC               	bra	u8397
 12362  0007EC  F000               	nop	
 12363  0007EE  0100               	movlb	0	; () banked
 12364  0007F0  2BC0               	incf	actuatorTest@i_1681& (0+255),f,b
 12365  0007F2  D7EF               	goto	l7286
 12366  0007F4                     l7294:
 12367                           
 12368                           ; BSR set to: 0
 12369  0007F4  0E00               	movlw	0
 12370  0007F6  0100               	movlb	0	; () banked
 12371  0007F8  6FC1               	movwf	actuatorTest@i_1682& (0+255),b
 12372  0007FA                     l7296:
 12373                           
 12374                           ; BSR set to: 0
 12375  0007FA  0E63               	movlw	99
 12376  0007FC  0100               	movlb	0	; () banked
 12377  0007FE  65C1               	cpfsgt	actuatorTest@i_1682& (0+255),b
 12378  000800  D001               	goto	l7300
 12379  000802  D00C               	goto	l7304
 12380  000804                     l7300:
 12381                           
 12382                           ; BSR set to: 0
 12383  000804  0E68               	movlw	104
 12384  000806  0100               	movlb	0	; () banked
 12385  000808  6FAB               	movwf	??_actuatorTest& (0+255),b
 12386  00080A  0EE4               	movlw	228
 12387  00080C                     u8407:
 12388  00080C  2EE8               	decfsz	wreg,f,c
 12389  00080E  D7FE               	bra	u8407
 12390  000810  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12391  000812  D7FC               	bra	u8407
 12392  000814  F000               	nop	
 12393  000816  0100               	movlb	0	; () banked
 12394  000818  2BC1               	incf	actuatorTest@i_1682& (0+255),f,b
 12395  00081A  D7EF               	goto	l7296
 12396  00081C                     l7304:
 12397                           
 12398                           ; BSR set to: 0
 12399                           ;Test.c: 336: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12400  00081C  0E80               	movlw	128
 12401  00081E  EC3C  F025         	call	_lcdInst
 12402  000822  0EC0               	movlw	192
 12403  000824  EC3C  F025         	call	_lcdInst
 12404                           
 12405                           ;Test.c: 337: printf("CAM DWN |RC0=0");
 12406  000828  0E69               	movlw	low STR_109
 12407  00082A  0100               	movlb	0	; () banked
 12408  00082C  6F8E               	movwf	printf@f& (0+255),b
 12409  00082E  0EFE               	movlw	high STR_109
 12410  000830  0100               	movlb	0	; () banked
 12411  000832  6F8F               	movwf	(printf@f+1)& (0+255),b
 12412  000834  ECB8  F008         	call	_printf	;wreg free
 12413                           
 12414                           ;Test.c: 340: for(i=0;i<10000;i++)
 12415  000838  0E00               	movlw	0
 12416  00083A  0100               	movlb	0	; () banked
 12417  00083C  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 12418  00083E  0E00               	movlw	0
 12419  000840  6FC4               	movwf	actuatorTest@i& (0+255),b
 12420  000842                     l7310:
 12421                           
 12422                           ; BSR set to: 0
 12423  000842  0100               	movlb	0	; () banked
 12424  000844  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 12425  000846  D008               	goto	l1172
 12426  000848  0E10               	movlw	16
 12427  00084A  0100               	movlb	0	; () banked
 12428  00084C  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 12429  00084E  0E27               	movlw	39
 12430  000850  0100               	movlb	0	; () banked
 12431  000852  59C5               	subwfb	(actuatorTest@i+1)& (0+255),w,b
 12432  000854  B0D8               	btfsc	status,0,c
 12433  000856  D00D               	goto	l7320
 12434  000858                     l1172:
 12435                           
 12436                           ; BSR set to: 0
 12437                           ;Test.c: 341: {
 12438                           ;Test.c: 342: LATCbits.LATC0 = 1;
 12439  000858  808B               	bsf	3979,0,c	;volatile
 12440                           
 12441                           ; BSR set to: 0
 12442                           ;Test.c: 343: _delay((unsigned long)((10)*(32000000/4000000.0)));
 12443  00085A  0E1A               	movlw	26
 12444  00085C                     u8417:
 12445  00085C  2EE8               	decfsz	wreg,f,c
 12446  00085E  D7FE               	bra	u8417
 12447  000860  D000               	nop2	
 12448                           
 12449                           ;Test.c: 344: LATCbits.LATC0 = 0;
 12450  000862  908B               	bcf	3979,0,c	;volatile
 12451                           
 12452                           ;Test.c: 345: _delay((unsigned long)((90)*(32000000/4000000.0)));
 12453  000864  0EF0               	movlw	240
 12454  000866                     u8427:
 12455  000866  2EE8               	decfsz	wreg,f,c
 12456  000868  D7FE               	bra	u8427
 12457  00086A  0100               	movlb	0	; () banked
 12458  00086C  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 12459  00086E  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 12460  000870  D7E8               	goto	l7310
 12461  000872                     l7320:
 12462                           
 12463                           ; BSR set to: 0
 12464                           ;Test.c: 346: }
 12465                           ;Test.c: 348: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12466  000872  0E00               	movlw	0
 12467  000874  0100               	movlb	0	; () banked
 12468  000876  6FC2               	movwf	actuatorTest@i_1684& (0+255),b
 12469  000878                     l7322:
 12470                           
 12471                           ; BSR set to: 0
 12472  000878  0E63               	movlw	99
 12473  00087A  0100               	movlb	0	; () banked
 12474  00087C  65C2               	cpfsgt	actuatorTest@i_1684& (0+255),b
 12475  00087E  D001               	goto	l7326
 12476  000880  D00C               	goto	l7330
 12477  000882                     l7326:
 12478                           
 12479                           ; BSR set to: 0
 12480  000882  0E68               	movlw	104
 12481  000884  0100               	movlb	0	; () banked
 12482  000886  6FAB               	movwf	??_actuatorTest& (0+255),b
 12483  000888  0EE4               	movlw	228
 12484  00088A                     u8437:
 12485  00088A  2EE8               	decfsz	wreg,f,c
 12486  00088C  D7FE               	bra	u8437
 12487  00088E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12488  000890  D7FC               	bra	u8437
 12489  000892  F000               	nop	
 12490  000894  0100               	movlb	0	; () banked
 12491  000896  2BC2               	incf	actuatorTest@i_1684& (0+255),f,b
 12492  000898  D7EF               	goto	l7322
 12493  00089A                     l7330:
 12494                           
 12495                           ; BSR set to: 0
 12496  00089A  0E00               	movlw	0
 12497  00089C  0100               	movlb	0	; () banked
 12498  00089E  6FC3               	movwf	actuatorTest@i_1685& (0+255),b
 12499  0008A0                     l7332:
 12500                           
 12501                           ; BSR set to: 0
 12502  0008A0  0E63               	movlw	99
 12503  0008A2  0100               	movlb	0	; () banked
 12504  0008A4  65C3               	cpfsgt	actuatorTest@i_1685& (0+255),b
 12505  0008A6  D001               	goto	l7336
 12506  0008A8  D00C               	goto	l7340
 12507  0008AA                     l7336:
 12508                           
 12509                           ; BSR set to: 0
 12510  0008AA  0E68               	movlw	104
 12511  0008AC  0100               	movlb	0	; () banked
 12512  0008AE  6FAB               	movwf	??_actuatorTest& (0+255),b
 12513  0008B0  0EE4               	movlw	228
 12514  0008B2                     u8447:
 12515  0008B2  2EE8               	decfsz	wreg,f,c
 12516  0008B4  D7FE               	bra	u8447
 12517  0008B6  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12518  0008B8  D7FC               	bra	u8447
 12519  0008BA  F000               	nop	
 12520  0008BC  0100               	movlb	0	; () banked
 12521  0008BE  2BC3               	incf	actuatorTest@i_1685& (0+255),f,b
 12522  0008C0  D7EF               	goto	l7332
 12523  0008C2                     l7340:
 12524                           
 12525                           ; BSR set to: 0
 12526                           ;Test.c: 349: machine_state = Testing_state;
 12527  0008C2  0E03               	movlw	3
 12528  0008C4  0100               	movlb	0	; () banked
 12529  0008C6  6FFC               	movwf	_machine_state& (0+255),b
 12530                           
 12531                           ; BSR set to: 0
 12532  0008C8  0012               	return		;funcret
 12533  0008CA                     __end_of_actuatorTest:
 12534                           	opt stack 0
 12535                           tblptru	equ	0xFF8
 12536                           tblptrh	equ	0xFF7
 12537                           tblptrl	equ	0xFF6
 12538                           tablat	equ	0xFF5
 12539                           prodh	equ	0xFF4
 12540                           prodl	equ	0xFF3
 12541                           intcon	equ	0xFF2
 12542                           intcon2	equ	0xFF1
 12543                           intcon3	equ	0xFF0
 12544                           postinc0	equ	0xFEE
 12545                           wreg	equ	0xFE8
 12546                           postdec1	equ	0xFE5
 12547                           fsr1l	equ	0xFE1
 12548                           indf2	equ	0xFDF
 12549                           postinc2	equ	0xFDE
 12550                           postdec2	equ	0xFDD
 12551                           fsr2h	equ	0xFDA
 12552                           fsr2l	equ	0xFD9
 12553                           status	equ	0xFD8
 12554                           
 12555 ;; *************** function _SpeedTest *****************
 12556 ;; Defined at:
 12557 ;;		line 528 in file "Test.c"
 12558 ;; Parameters:    Size  Location     Type
 12559 ;;		None
 12560 ;; Auto vars:     Size  Location     Type
 12561 ;;		None
 12562 ;; Return value:  Size  Location     Type
 12563 ;;                  1    wreg      void 
 12564 ;; Registers used:
 12565 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12566 ;; Tracked objects:
 12567 ;;		On entry : 0/0
 12568 ;;		On exit  : 0/0
 12569 ;;		Unchanged: 0/0
 12570 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12571 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12572 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12573 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12574 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12575 ;;Total ram usage:        1 bytes
 12576 ;; Hardware stack levels used:    1
 12577 ;; Hardware stack levels required when called:   10
 12578 ;; This function calls:
 12579 ;;		_lcdInst
 12580 ;;		_printf
 12581 ;; This function is called by:
 12582 ;;		_Test
 12583 ;; This function uses a non-reentrant model
 12584 ;;
 12585                           
 12586                           	psect	text42
 12587  003D48                     __ptext42:
 12588                           	opt stack 0
 12589  003D48                     _SpeedTest:
 12590                           	opt stack 19
 12591                           
 12592                           ;Test.c: 530: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12593                           
 12594                           ; BSR set to: 0
 12595                           ;incstack = 0
 12596  003D48  0E01               	movlw	1
 12597  003D4A  EC3C  F025         	call	_lcdInst
 12598  003D4E  0E68               	movlw	104
 12599  003D50  0100               	movlb	0	; () banked
 12600  003D52  6FAB               	movwf	??_SpeedTest& (0+255),b
 12601  003D54  0EE4               	movlw	228
 12602  003D56                     u8457:
 12603  003D56  2EE8               	decfsz	wreg,f,c
 12604  003D58  D7FE               	bra	u8457
 12605  003D5A  2FAB               	decfsz	??_SpeedTest& (0+255),f,b
 12606  003D5C  D7FC               	bra	u8457
 12607  003D5E  F000               	nop	
 12608  003D60  0E80               	movlw	128
 12609  003D62  EC3C  F025         	call	_lcdInst
 12610                           
 12611                           ;Test.c: 531: printf("S: D WILL RETURN ");
 12612  003D66  0E6D               	movlw	low STR_116
 12613  003D68  0100               	movlb	0	; () banked
 12614  003D6A  6F8E               	movwf	printf@f& (0+255),b
 12615  003D6C  0EFB               	movlw	high STR_116
 12616  003D6E  0100               	movlb	0	; () banked
 12617  003D70  6F8F               	movwf	(printf@f+1)& (0+255),b
 12618  003D72  ECB8  F008         	call	_printf	;wreg free
 12619                           
 12620                           ;Test.c: 532: lcdInst(0b11000000);;
 12621  003D76  0EC0               	movlw	192
 12622  003D78  EC3C  F025         	call	_lcdInst
 12623                           
 12624                           ;Test.c: 533: printf("OTHER SETS RA5   ");
 12625  003D7C  0E5B               	movlw	low STR_112
 12626  003D7E  0100               	movlb	0	; () banked
 12627  003D80  6F8E               	movwf	printf@f& (0+255),b
 12628  003D82  0EFB               	movlw	high STR_112
 12629  003D84  0100               	movlb	0	; () banked
 12630  003D86  6F8F               	movwf	(printf@f+1)& (0+255),b
 12631  003D88  ECB8  F008         	call	_printf	;wreg free
 12632  003D8C                     l1255:
 12633  003D8C  A281               	btfss	3969,1,c	;volatile
 12634  003D8E  D7FE               	goto	l1255
 12635                           
 12636                           ;Test.c: 538: }
 12637                           ;Test.c: 539: if(PORTB >> 4 == 0b1111){
 12638  003D90  3881               	swapf	3969,w,c	;volatile
 12639  003D92  0B0F               	andlw	15
 12640  003D94  0A0F               	xorlw	15
 12641  003D96  B4D8               	btfsc	status,2,c
 12642  003D98  0012               	return	
 12643  003D9A  D014               	goto	l7382
 12644  003D9C                     l1262:
 12645                           
 12646                           ;Test.c: 544: LATAbits.LATA5 = 1;
 12647  003D9C  8A89               	bsf	3977,5,c	;volatile
 12648                           
 12649                           ;Test.c: 545: _delay((unsigned long)((5)*(32000000/4000.0)));
 12650  003D9E  0E34               	movlw	52
 12651  003DA0  0100               	movlb	0	; () banked
 12652  003DA2  6FAB               	movwf	??_SpeedTest& (0+255),b
 12653  003DA4  0EF1               	movlw	241
 12654  003DA6                     u8467:
 12655  003DA6  2EE8               	decfsz	wreg,f,c
 12656  003DA8  D7FE               	bra	u8467
 12657  003DAA  2FAB               	decfsz	??_SpeedTest& (0+255),f,b
 12658  003DAC  D7FC               	bra	u8467
 12659  003DAE  D000               	nop2	
 12660                           
 12661                           ;Test.c: 546: LATAbits.LATA5 = 0;
 12662  003DB0  9A89               	bcf	3977,5,c	;volatile
 12663                           
 12664                           ;Test.c: 547: _delay((unsigned long)((5)*(32000000/4000.0)));
 12665  003DB2  0E34               	movlw	52
 12666  003DB4  0100               	movlb	0	; () banked
 12667  003DB6  6FAB               	movwf	??_SpeedTest& (0+255),b
 12668  003DB8  0EF1               	movlw	241
 12669  003DBA                     u8477:
 12670  003DBA  2EE8               	decfsz	wreg,f,c
 12671  003DBC  D7FE               	bra	u8477
 12672  003DBE  2FAB               	decfsz	??_SpeedTest& (0+255),f,b
 12673  003DC0  D7FC               	bra	u8477
 12674  003DC2  D000               	nop2	
 12675  003DC4                     l7382:
 12676  003DC4  B281               	btfsc	3969,1,c	;volatile
 12677  003DC6  D7EA               	goto	l1262
 12678                           
 12679                           ;Test.c: 550: }
 12680                           ;Test.c: 551: LATAbits.LATA5 = 0;
 12681  003DC8  9A89               	bcf	3977,5,c	;volatile
 12682  003DCA  D7E0               	goto	l1255
 12683  003DCC                     __end_of_SpeedTest:
 12684                           	opt stack 0
 12685                           tblptru	equ	0xFF8
 12686                           tblptrh	equ	0xFF7
 12687                           tblptrl	equ	0xFF6
 12688                           tablat	equ	0xFF5
 12689                           prodh	equ	0xFF4
 12690                           prodl	equ	0xFF3
 12691                           intcon	equ	0xFF2
 12692                           intcon2	equ	0xFF1
 12693                           intcon3	equ	0xFF0
 12694                           postinc0	equ	0xFEE
 12695                           wreg	equ	0xFE8
 12696                           postdec1	equ	0xFE5
 12697                           fsr1l	equ	0xFE1
 12698                           indf2	equ	0xFDF
 12699                           postinc2	equ	0xFDE
 12700                           postdec2	equ	0xFDD
 12701                           fsr2h	equ	0xFDA
 12702                           fsr2l	equ	0xFD9
 12703                           status	equ	0xFD8
 12704                           
 12705 ;; *************** function _PusherTest *****************
 12706 ;; Defined at:
 12707 ;;		line 467 in file "Test.c"
 12708 ;; Parameters:    Size  Location     Type
 12709 ;;		None
 12710 ;; Auto vars:     Size  Location     Type
 12711 ;;  i               2   46[BANK0 ] int 
 12712 ;;  i               2   44[BANK0 ] int 
 12713 ;; Return value:  Size  Location     Type
 12714 ;;                  1    wreg      void 
 12715 ;; Registers used:
 12716 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12717 ;; Tracked objects:
 12718 ;;		On entry : 0/0
 12719 ;;		On exit  : 0/0
 12720 ;;		Unchanged: 0/0
 12721 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12722 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12723 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12724 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12725 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12726 ;;Total ram usage:        5 bytes
 12727 ;; Hardware stack levels used:    1
 12728 ;; Hardware stack levels required when called:   10
 12729 ;; This function calls:
 12730 ;;		_lcdInst
 12731 ;;		_printf
 12732 ;; This function is called by:
 12733 ;;		_Test
 12734 ;; This function uses a non-reentrant model
 12735 ;;
 12736                           
 12737                           	psect	text43
 12738  00371E                     __ptext43:
 12739                           	opt stack 0
 12740  00371E                     _PusherTest:
 12741                           	opt stack 19
 12742                           
 12743                           ;Test.c: 468: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12744                           
 12745                           ;incstack = 0
 12746  00371E  0E01               	movlw	1
 12747  003720  EC3C  F025         	call	_lcdInst
 12748  003724  0E68               	movlw	104
 12749  003726  0100               	movlb	0	; () banked
 12750  003728  6FAB               	movwf	??_PusherTest& (0+255),b
 12751  00372A  0EE4               	movlw	228
 12752  00372C                     u8487:
 12753  00372C  2EE8               	decfsz	wreg,f,c
 12754  00372E  D7FE               	bra	u8487
 12755  003730  2FAB               	decfsz	??_PusherTest& (0+255),f,b
 12756  003732  D7FC               	bra	u8487
 12757  003734  F000               	nop	
 12758  003736  0E80               	movlw	128
 12759  003738  EC3C  F025         	call	_lcdInst
 12760                           
 12761                           ;Test.c: 469: printf("PUSHER TST");
 12762  00373C  0E71               	movlw	low STR_113
 12763  00373E  0100               	movlb	0	; () banked
 12764  003740  6F8E               	movwf	printf@f& (0+255),b
 12765  003742  0EFF               	movlw	high STR_113
 12766  003744  0100               	movlb	0	; () banked
 12767  003746  6F8F               	movwf	(printf@f+1)& (0+255),b
 12768  003748  ECB8  F008         	call	_printf	;wreg free
 12769  00374C                     l1220:
 12770  00374C  A281               	btfss	3969,1,c	;volatile
 12771  00374E  D7FE               	goto	l1220
 12772                           
 12773                           ;Test.c: 475: }
 12774                           ;Test.c: 476: if(PORTB >> 4 == 0b1111){
 12775  003750  3881               	swapf	3969,w,c	;volatile
 12776  003752  0B0F               	andlw	15
 12777  003754  0A0F               	xorlw	15
 12778  003756  B4D8               	btfsc	status,2,c
 12779  003758  0012               	return	
 12780                           
 12781                           ;Test.c: 481: else if(PORTB >> 4 == 0b0101){
 12782                           
 12783                           ;Test.c: 478: }
 12784                           
 12785                           ;Test.c: 477: break;
 12786  00375A  3881               	swapf	3969,w,c	;volatile
 12787  00375C  0B0F               	andlw	15
 12788  00375E  0A05               	xorlw	5
 12789  003760  A4D8               	btfss	status,2,c
 12790  003762  D01D               	goto	l7412
 12791                           
 12792                           ;Test.c: 482: for(int i = 0; i<3000; i++){
 12793  003764  0E00               	movlw	0
 12794  003766  0100               	movlb	0	; () banked
 12795  003768  6FAD               	movwf	(PusherTest@i+1)& (0+255),b
 12796  00376A  0E00               	movlw	0
 12797  00376C  6FAC               	movwf	PusherTest@i& (0+255),b
 12798  00376E                     l7402:
 12799                           
 12800                           ; BSR set to: 0
 12801  00376E  0100               	movlb	0	; () banked
 12802  003770  BFAD               	btfsc	(PusherTest@i+1)& (0+255),7,b
 12803  003772  D008               	goto	l1227
 12804  003774  0EB8               	movlw	184
 12805  003776  0100               	movlb	0	; () banked
 12806  003778  5DAC               	subwf	PusherTest@i& (0+255),w,b
 12807  00377A  0E0B               	movlw	11
 12808  00377C  0100               	movlb	0	; () banked
 12809  00377E  59AD               	subwfb	(PusherTest@i+1)& (0+255),w,b
 12810  003780  B0D8               	btfsc	status,0,c
 12811  003782  D02F               	goto	l1233
 12812  003784                     l1227:
 12813                           
 12814                           ; BSR set to: 0
 12815                           ;Test.c: 483: LATAbits.LATA4 = 1;
 12816  003784  8889               	bsf	3977,4,c	;volatile
 12817                           
 12818                           ; BSR set to: 0
 12819                           ;Test.c: 484: _delay((unsigned long)((75)*(32000000/4000000.0)));
 12820  003786  0EC8               	movlw	200
 12821  003788                     u8497:
 12822  003788  2EE8               	decfsz	wreg,f,c
 12823  00378A  D7FE               	bra	u8497
 12824                           
 12825                           ;Test.c: 485: LATAbits.LATA4 = 0;
 12826  00378C  9889               	bcf	3977,4,c	;volatile
 12827                           
 12828                           ;Test.c: 486: _delay((unsigned long)((25)*(32000000/4000000.0)));
 12829  00378E  0E42               	movlw	66
 12830  003790                     u8507:
 12831  003790  2EE8               	decfsz	wreg,f,c
 12832  003792  D7FE               	bra	u8507
 12833  003794  D000               	nop2	
 12834  003796  0100               	movlb	0	; () banked
 12835  003798  4BAC               	infsnz	PusherTest@i& (0+255),f,b
 12836  00379A  2BAD               	incf	(PusherTest@i+1)& (0+255),f,b
 12837  00379C  D7E8               	goto	l7402
 12838  00379E                     l7412:
 12839                           
 12840                           ;Test.c: 489: else if (PORTB >> 4 == 0b110){
 12841  00379E  3881               	swapf	3969,w,c	;volatile
 12842  0037A0  0B0F               	andlw	15
 12843  0037A2  0A06               	xorlw	6
 12844  0037A4  A4D8               	btfss	status,2,c
 12845  0037A6  D01D               	goto	l1233
 12846                           
 12847                           ;Test.c: 490: for(int i = 0; i<3000; i++){
 12848  0037A8  0E00               	movlw	0
 12849  0037AA  0100               	movlb	0	; () banked
 12850  0037AC  6FAF               	movwf	(PusherTest@i_1698+1)& (0+255),b
 12851  0037AE  0E00               	movlw	0
 12852  0037B0  6FAE               	movwf	PusherTest@i_1698& (0+255),b
 12853  0037B2                     l7416:
 12854                           
 12855                           ; BSR set to: 0
 12856  0037B2  0100               	movlb	0	; () banked
 12857  0037B4  BFAF               	btfsc	(PusherTest@i_1698+1)& (0+255),7,b
 12858  0037B6  D008               	goto	l1231
 12859  0037B8  0EB8               	movlw	184
 12860  0037BA  0100               	movlb	0	; () banked
 12861  0037BC  5DAE               	subwf	PusherTest@i_1698& (0+255),w,b
 12862  0037BE  0E0B               	movlw	11
 12863  0037C0  0100               	movlb	0	; () banked
 12864  0037C2  59AF               	subwfb	(PusherTest@i_1698+1)& (0+255),w,b
 12865  0037C4  B0D8               	btfsc	status,0,c
 12866  0037C6  D00D               	goto	l1233
 12867  0037C8                     l1231:
 12868                           
 12869                           ; BSR set to: 0
 12870                           ;Test.c: 491: LATAbits.LATA4 = 1;
 12871  0037C8  8889               	bsf	3977,4,c	;volatile
 12872                           
 12873                           ; BSR set to: 0
 12874                           ;Test.c: 492: _delay((unsigned long)((58)*(32000000/4000000.0)));
 12875  0037CA  0E9A               	movlw	154
 12876  0037CC                     u8517:
 12877  0037CC  2EE8               	decfsz	wreg,f,c
 12878  0037CE  D7FE               	bra	u8517
 12879  0037D0  D000               	nop2	
 12880                           
 12881                           ;Test.c: 493: LATAbits.LATA4 = 0;
 12882  0037D2  9889               	bcf	3977,4,c	;volatile
 12883                           
 12884                           ;Test.c: 494: _delay((unsigned long)((42)*(32000000/4000000.0)));
 12885  0037D4  0E70               	movlw	112
 12886  0037D6                     u8527:
 12887  0037D6  2EE8               	decfsz	wreg,f,c
 12888  0037D8  D7FE               	bra	u8527
 12889  0037DA  0100               	movlb	0	; () banked
 12890  0037DC  4BAE               	infsnz	PusherTest@i_1698& (0+255),f,b
 12891  0037DE  2BAF               	incf	(PusherTest@i_1698+1)& (0+255),f,b
 12892  0037E0  D7E8               	goto	l7416
 12893  0037E2                     l1233:
 12894  0037E2  A281               	btfss	3969,1,c	;volatile
 12895  0037E4  D7B3               	goto	l1220
 12896  0037E6  D7FD               	goto	l1233
 12897  0037E8                     __end_of_PusherTest:
 12898                           	opt stack 0
 12899                           tblptru	equ	0xFF8
 12900                           tblptrh	equ	0xFF7
 12901                           tblptrl	equ	0xFF6
 12902                           tablat	equ	0xFF5
 12903                           prodh	equ	0xFF4
 12904                           prodl	equ	0xFF3
 12905                           intcon	equ	0xFF2
 12906                           intcon2	equ	0xFF1
 12907                           intcon3	equ	0xFF0
 12908                           postinc0	equ	0xFEE
 12909                           wreg	equ	0xFE8
 12910                           postdec1	equ	0xFE5
 12911                           fsr1l	equ	0xFE1
 12912                           indf2	equ	0xFDF
 12913                           postinc2	equ	0xFDE
 12914                           postdec2	equ	0xFDD
 12915                           fsr2h	equ	0xFDA
 12916                           fsr2l	equ	0xFD9
 12917                           status	equ	0xFD8
 12918                           
 12919 ;; *************** function _PortTests *****************
 12920 ;; Defined at:
 12921 ;;		line 409 in file "Test.c"
 12922 ;; Parameters:    Size  Location     Type
 12923 ;;		None
 12924 ;; Auto vars:     Size  Location     Type
 12925 ;;		None
 12926 ;; Return value:  Size  Location     Type
 12927 ;;                  1    wreg      void 
 12928 ;; Registers used:
 12929 ;;		wreg, status,2, status,0
 12930 ;; Tracked objects:
 12931 ;;		On entry : 0/0
 12932 ;;		On exit  : 0/0
 12933 ;;		Unchanged: 0/0
 12934 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12935 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12936 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12937 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12938 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12939 ;;Total ram usage:        2 bytes
 12940 ;; Hardware stack levels used:    1
 12941 ;; Hardware stack levels required when called:    7
 12942 ;; This function calls:
 12943 ;;		Nothing
 12944 ;; This function is called by:
 12945 ;;		_Test
 12946 ;; This function uses a non-reentrant model
 12947 ;;
 12948                           
 12949                           	psect	text44
 12950  003DCC                     __ptext44:
 12951                           	opt stack 0
 12952  003DCC                     _PortTests:
 12953                           	opt stack 22
 12954  003DCC                     l1185:
 12955  003DCC  A281               	btfss	3969,1,c	;volatile
 12956  003DCE  D7FE               	goto	l1185
 12957                           
 12958                           ;Test.c: 413: var = PORTB >> 4;
 12959  003DD0  CF81 F080          	movff	3969,??_PortTests	;volatile
 12960  003DD4  0100               	movlb	0	; () banked
 12961  003DD6  3B80               	swapf	??_PortTests& (0+255),f,b
 12962  003DD8  0E0F               	movlw	15
 12963  003DDA  1780               	andwf	??_PortTests& (0+255),f,b
 12964  003DDC  0100               	movlb	0	; () banked
 12965  003DDE  5180               	movf	??_PortTests& (0+255),w,b
 12966  003DE0  0100               	movlb	0	; () banked
 12967  003DE2  6FFA               	movwf	_var& (0+255),b
 12968  003DE4  6BFB               	clrf	(_var+1)& (0+255),b
 12969                           
 12970                           ;Test.c: 414: switch(var){
 12971  003DE6  D00C               	goto	l7430
 12972  003DE8                     l1189:
 12973                           
 12974                           ; BSR set to: 0
 12975                           ;Test.c: 416: LATEbits.LATE0 = 1;
 12976  003DE8  808D               	bsf	3981,0,c	;volatile
 12977                           
 12978                           ;Test.c: 417: break;
 12979  003DEA  D027               	goto	l1197
 12980  003DEC                     l1191:
 12981                           
 12982                           ; BSR set to: 0
 12983                           ;Test.c: 419: LATEbits.LATE1 = 1;
 12984  003DEC  828D               	bsf	3981,1,c	;volatile
 12985                           
 12986                           ;Test.c: 420: break;
 12987  003DEE  D025               	goto	l1197
 12988  003DF0                     l1192:
 12989                           
 12990                           ; BSR set to: 0
 12991                           ;Test.c: 422: LATDbits.LATD0 = 1;
 12992  003DF0  808C               	bsf	3980,0,c	;volatile
 12993                           
 12994                           ;Test.c: 423: break;
 12995  003DF2  D023               	goto	l1197
 12996  003DF4                     l1193:
 12997                           
 12998                           ; BSR set to: 0
 12999                           ;Test.c: 425: LATAbits.LATA3 = 1;
 13000  003DF4  8689               	bsf	3977,3,c	;volatile
 13001                           
 13002                           ;Test.c: 426: break;
 13003  003DF6  D021               	goto	l1197
 13004  003DF8                     l1194:
 13005                           
 13006                           ; BSR set to: 0
 13007                           ;Test.c: 428: LATAbits.LATA4 = 1;
 13008  003DF8  8889               	bsf	3977,4,c	;volatile
 13009                           
 13010                           ;Test.c: 429: break;
 13011  003DFA  D01F               	goto	l1197
 13012  003DFC                     l1195:
 13013                           
 13014                           ; BSR set to: 0
 13015                           ;Test.c: 431: LATAbits.LATA5 = 1;
 13016  003DFC  8A89               	bsf	3977,5,c	;volatile
 13017                           
 13018                           ; BSR set to: 0
 13019                           ;Test.c: 435: }
 13020                           
 13021                           ; BSR set to: 0
 13022                           ;Test.c: 434: break;
 13023                           
 13024                           ;Test.c: 433: default:
 13025                           
 13026                           ;Test.c: 432: break;
 13027  003DFE  D01D               	goto	l1197
 13028  003E00                     l7430:
 13029                           
 13030                           ; BSR set to: 0
 13031  003E00  C0FA  F080         	movff	_var,??_PortTests
 13032  003E04  C0FB  F081         	movff	_var+1,??_PortTests+1
 13033                           
 13034                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 13035                           ; Switch size 1, requested type "space"
 13036                           ; Number of cases is 1, Range of values is 0 to 0
 13037                           ; switch strategies available:
 13038                           ; Name         Instructions Cycles
 13039                           ; simple_byte            4     3 (average)
 13040                           ;	Chosen strategy is simple_byte
 13041  003E08  0100               	movlb	0	; () banked
 13042  003E0A  5181               	movf	(??_PortTests+1)& (0+255),w,b
 13043  003E0C  0A00               	xorlw	0	; case 0
 13044  003E0E  A4D8               	btfss	status,2,c
 13045  003E10  D014               	goto	l1197
 13046                           
 13047                           ; BSR set to: 0
 13048                           ; Switch size 1, requested type "space"
 13049                           ; Number of cases is 6, Range of values is 0 to 5
 13050                           ; switch strategies available:
 13051                           ; Name         Instructions Cycles
 13052                           ; simple_byte           19    10 (average)
 13053                           ;	Chosen strategy is simple_byte
 13054  003E12  0100               	movlb	0	; () banked
 13055  003E14  5180               	movf	??_PortTests& (0+255),w,b
 13056  003E16  0A00               	xorlw	0	; case 0
 13057  003E18  B4D8               	btfsc	status,2,c
 13058  003E1A  D7E6               	goto	l1189
 13059  003E1C  0A01               	xorlw	1	; case 1
 13060  003E1E  B4D8               	btfsc	status,2,c
 13061  003E20  D7E5               	goto	l1191
 13062  003E22  0A03               	xorlw	3	; case 2
 13063  003E24  B4D8               	btfsc	status,2,c
 13064  003E26  D7E4               	goto	l1192
 13065  003E28  0A01               	xorlw	1	; case 3
 13066  003E2A  B4D8               	btfsc	status,2,c
 13067  003E2C  D7E3               	goto	l1193
 13068  003E2E  0A07               	xorlw	7	; case 4
 13069  003E30  B4D8               	btfsc	status,2,c
 13070  003E32  D7E2               	goto	l1194
 13071  003E34  0A01               	xorlw	1	; case 5
 13072  003E36  B4D8               	btfsc	status,2,c
 13073  003E38  D7E1               	goto	l1195
 13074  003E3A                     l1197:
 13075  003E3A  B281               	btfsc	3969,1,c	;volatile
 13076  003E3C  D7FE               	goto	l1197
 13077                           
 13078                           ;Test.c: 437: __nop();
 13079  003E3E  F000               	nop	
 13080                           
 13081                           ;Test.c: 438: __nop();
 13082  003E40  F000               	nop	
 13083                           
 13084                           ;Test.c: 439: LATA = 0x00;
 13085  003E42  0E00               	movlw	0
 13086  003E44  6E89               	movwf	3977,c	;volatile
 13087                           
 13088                           ;Test.c: 440: LATE = 0x00;
 13089  003E46  0E00               	movlw	0
 13090  003E48  6E8D               	movwf	3981,c	;volatile
 13091                           
 13092                           ;Test.c: 441: LATD = 0x00; }
 13093  003E4A  0E00               	movlw	0
 13094  003E4C  6E8C               	movwf	3980,c	;volatile
 13095  003E4E  D7BE               	goto	l1185
 13096  003E50                     __end_of_PortTests:
 13097                           	opt stack 0
 13098                           tblptru	equ	0xFF8
 13099                           tblptrh	equ	0xFF7
 13100                           tblptrl	equ	0xFF6
 13101                           tablat	equ	0xFF5
 13102                           prodh	equ	0xFF4
 13103                           prodl	equ	0xFF3
 13104                           intcon	equ	0xFF2
 13105                           intcon2	equ	0xFF1
 13106                           intcon3	equ	0xFF0
 13107                           postinc0	equ	0xFEE
 13108                           wreg	equ	0xFE8
 13109                           postdec1	equ	0xFE5
 13110                           fsr1l	equ	0xFE1
 13111                           indf2	equ	0xFDF
 13112                           postinc2	equ	0xFDE
 13113                           postdec2	equ	0xFDD
 13114                           fsr2h	equ	0xFDA
 13115                           fsr2l	equ	0xFD9
 13116                           status	equ	0xFD8
 13117                           
 13118 ;; *************** function _PortTestA5 *****************
 13119 ;; Defined at:
 13120 ;;		line 444 in file "Test.c"
 13121 ;; Parameters:    Size  Location     Type
 13122 ;;		None
 13123 ;; Auto vars:     Size  Location     Type
 13124 ;;		None
 13125 ;; Return value:  Size  Location     Type
 13126 ;;                  1    wreg      void 
 13127 ;; Registers used:
 13128 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13129 ;; Tracked objects:
 13130 ;;		On entry : 0/0
 13131 ;;		On exit  : 0/0
 13132 ;;		Unchanged: 0/0
 13133 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13134 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13135 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13136 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13137 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13138 ;;Total ram usage:        1 bytes
 13139 ;; Hardware stack levels used:    1
 13140 ;; Hardware stack levels required when called:   10
 13141 ;; This function calls:
 13142 ;;		_lcdInst
 13143 ;;		_printf
 13144 ;; This function is called by:
 13145 ;;		_Test
 13146 ;; This function uses a non-reentrant model
 13147 ;;
 13148                           
 13149                           	psect	text45
 13150  004214                     __ptext45:
 13151                           	opt stack 0
 13152  004214                     _PortTestA5:
 13153                           	opt stack 19
 13154                           
 13155                           ;Test.c: 445: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13156                           
 13157                           ;incstack = 0
 13158  004214  0E01               	movlw	1
 13159  004216  EC3C  F025         	call	_lcdInst
 13160  00421A  0E68               	movlw	104
 13161  00421C  0100               	movlb	0	; () banked
 13162  00421E  6FAB               	movwf	??_PortTestA5& (0+255),b
 13163  004220  0EE4               	movlw	228
 13164  004222                     u8537:
 13165  004222  2EE8               	decfsz	wreg,f,c
 13166  004224  D7FE               	bra	u8537
 13167  004226  2FAB               	decfsz	??_PortTestA5& (0+255),f,b
 13168  004228  D7FC               	bra	u8537
 13169  00422A  F000               	nop	
 13170  00422C  0E80               	movlw	128
 13171  00422E  EC3C  F025         	call	_lcdInst
 13172                           
 13173                           ;Test.c: 446: printf("D WILL RETURN    ");
 13174  004232  0E49               	movlw	low STR_111
 13175  004234  0100               	movlb	0	; () banked
 13176  004236  6F8E               	movwf	printf@f& (0+255),b
 13177  004238  0EFB               	movlw	high STR_111
 13178  00423A  0100               	movlb	0	; () banked
 13179  00423C  6F8F               	movwf	(printf@f+1)& (0+255),b
 13180  00423E  ECB8  F008         	call	_printf	;wreg free
 13181                           
 13182                           ;Test.c: 447: lcdInst(0b11000000);;
 13183  004242  0EC0               	movlw	192
 13184  004244  EC3C  F025         	call	_lcdInst
 13185                           
 13186                           ;Test.c: 448: printf("OTHER SETS RA5   ");
 13187  004248  0E5B               	movlw	low STR_112
 13188  00424A  0100               	movlb	0	; () banked
 13189  00424C  6F8E               	movwf	printf@f& (0+255),b
 13190  00424E  0EFB               	movlw	high STR_112
 13191  004250  0100               	movlb	0	; () banked
 13192  004252  6F8F               	movwf	(printf@f+1)& (0+255),b
 13193  004254  ECB8  F008         	call	_printf	;wreg free
 13194  004258                     l1206:
 13195  004258  A281               	btfss	3969,1,c	;volatile
 13196  00425A  D7FE               	goto	l1206
 13197                           
 13198                           ;Test.c: 453: }
 13199                           ;Test.c: 454: if(PORTB >> 4 == 0b1111){
 13200  00425C  3881               	swapf	3969,w,c	;volatile
 13201  00425E  0B0F               	andlw	15
 13202  004260  0A0F               	xorlw	15
 13203  004262  B4D8               	btfsc	status,2,c
 13204  004264  0012               	return	
 13205                           
 13206                           ;Test.c: 457: else{
 13207                           ;Test.c: 458: LATAbits.LATA5 = 1;
 13208                           
 13209                           ;Test.c: 456: }
 13210                           
 13211                           ;Test.c: 455: break;
 13212  004266  8A89               	bsf	3977,5,c	;volatile
 13213  004268                     l1212:
 13214  004268  B281               	btfsc	3969,1,c	;volatile
 13215  00426A  D7FE               	goto	l1212
 13216                           
 13217                           ;Test.c: 461: }
 13218                           ;Test.c: 462: LATAbits.LATA5 = 0;
 13219  00426C  9A89               	bcf	3977,5,c	;volatile
 13220  00426E  D7F4               	goto	l1206
 13221  004270                     __end_of_PortTestA5:
 13222                           	opt stack 0
 13223                           tblptru	equ	0xFF8
 13224                           tblptrh	equ	0xFF7
 13225                           tblptrl	equ	0xFF6
 13226                           tablat	equ	0xFF5
 13227                           prodh	equ	0xFF4
 13228                           prodl	equ	0xFF3
 13229                           intcon	equ	0xFF2
 13230                           intcon2	equ	0xFF1
 13231                           intcon3	equ	0xFF0
 13232                           postinc0	equ	0xFEE
 13233                           wreg	equ	0xFE8
 13234                           postdec1	equ	0xFE5
 13235                           fsr1l	equ	0xFE1
 13236                           indf2	equ	0xFDF
 13237                           postinc2	equ	0xFDE
 13238                           postdec2	equ	0xFDD
 13239                           fsr2h	equ	0xFDA
 13240                           fsr2l	equ	0xFD9
 13241                           status	equ	0xFD8
 13242                           
 13243 ;; *************** function _EEPROMTest *****************
 13244 ;; Defined at:
 13245 ;;		line 556 in file "Test.c"
 13246 ;; Parameters:    Size  Location     Type
 13247 ;;		None
 13248 ;; Auto vars:     Size  Location     Type
 13249 ;;		None
 13250 ;; Return value:  Size  Location     Type
 13251 ;;                  1    wreg      void 
 13252 ;; Registers used:
 13253 ;;		None
 13254 ;; Tracked objects:
 13255 ;;		On entry : 0/0
 13256 ;;		On exit  : 0/0
 13257 ;;		Unchanged: 0/0
 13258 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13259 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13260 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13261 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13262 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13263 ;;Total ram usage:        0 bytes
 13264 ;; Hardware stack levels used:    1
 13265 ;; Hardware stack levels required when called:    7
 13266 ;; This function calls:
 13267 ;;		Nothing
 13268 ;; This function is called by:
 13269 ;;		_Test
 13270 ;; This function uses a non-reentrant model
 13271 ;;
 13272                           
 13273                           	psect	text46
 13274  004ADC                     __ptext46:
 13275                           	opt stack 0
 13276  004ADC                     _EEPROMTest:
 13277                           	opt stack 22
 13278                           
 13279                           ;incstack = 0
 13280  004ADC  0012               	return		;funcret
 13281  004ADE                     __end_of_EEPROMTest:
 13282                           	opt stack 0
 13283                           tblptru	equ	0xFF8
 13284                           tblptrh	equ	0xFF7
 13285                           tblptrl	equ	0xFF6
 13286                           tablat	equ	0xFF5
 13287                           prodh	equ	0xFF4
 13288                           prodl	equ	0xFF3
 13289                           intcon	equ	0xFF2
 13290                           intcon2	equ	0xFF1
 13291                           intcon3	equ	0xFF0
 13292                           postinc0	equ	0xFEE
 13293                           wreg	equ	0xFE8
 13294                           postdec1	equ	0xFE5
 13295                           fsr1l	equ	0xFE1
 13296                           indf2	equ	0xFDF
 13297                           postinc2	equ	0xFDE
 13298                           postdec2	equ	0xFDD
 13299                           fsr2h	equ	0xFDA
 13300                           fsr2l	equ	0xFD9
 13301                           status	equ	0xFD8
 13302                           
 13303 ;; *************** function _BothServos *****************
 13304 ;; Defined at:
 13305 ;;		line 352 in file "Test.c"
 13306 ;; Parameters:    Size  Location     Type
 13307 ;;		None
 13308 ;; Auto vars:     Size  Location     Type
 13309 ;;		None
 13310 ;; Return value:  Size  Location     Type
 13311 ;;                  1    wreg      void 
 13312 ;; Registers used:
 13313 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13314 ;; Tracked objects:
 13315 ;;		On entry : 0/0
 13316 ;;		On exit  : 0/0
 13317 ;;		Unchanged: 0/0
 13318 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13319 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13320 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13321 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13322 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13323 ;;Total ram usage:        2 bytes
 13324 ;; Hardware stack levels used:    1
 13325 ;; Hardware stack levels required when called:   10
 13326 ;; This function calls:
 13327 ;;		_initServos
 13328 ;;		_lcdInst
 13329 ;;		_printf
 13330 ;;		_updateServoPosition
 13331 ;; This function is called by:
 13332 ;;		_Test
 13333 ;; This function uses a non-reentrant model
 13334 ;;
 13335                           
 13336                           	psect	text47
 13337  0015A8                     __ptext47:
 13338                           	opt stack 0
 13339  0015A8                     _BothServos:
 13340                           	opt stack 19
 13341                           
 13342                           ;Test.c: 353: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13343                           
 13344                           ;incstack = 0
 13345  0015A8  0E01               	movlw	1
 13346  0015AA  EC3C  F025         	call	_lcdInst
 13347  0015AE  0E68               	movlw	104
 13348  0015B0  0100               	movlb	0	; () banked
 13349  0015B2  6FAB               	movwf	??_BothServos& (0+255),b
 13350  0015B4  0EE4               	movlw	228
 13351  0015B6                     u8547:
 13352  0015B6  2EE8               	decfsz	wreg,f,c
 13353  0015B8  D7FE               	bra	u8547
 13354  0015BA  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13355  0015BC  D7FC               	bra	u8547
 13356  0015BE  F000               	nop	
 13357  0015C0  0E80               	movlw	128
 13358  0015C2  EC3C  F025         	call	_lcdInst
 13359                           
 13360                           ;Test.c: 354: printf("TST: BOTH SERVOS");
 13361  0015C6  0EB4               	movlw	low STR_110
 13362  0015C8  0100               	movlb	0	; () banked
 13363  0015CA  6F8E               	movwf	printf@f& (0+255),b
 13364  0015CC  0EFC               	movlw	high STR_110
 13365  0015CE  0100               	movlb	0	; () banked
 13366  0015D0  6F8F               	movwf	(printf@f+1)& (0+255),b
 13367  0015D2  ECB8  F008         	call	_printf	;wreg free
 13368                           
 13369                           ;Test.c: 355: TMR1ON = 1;
 13370  0015D6  80CD               	bsf	4045,0,c	;volatile
 13371                           
 13372                           ;Test.c: 356: TMR3ON = 1;
 13373  0015D8  80B1               	bsf	4017,0,c	;volatile
 13374                           
 13375                           ;Test.c: 357: machine_state = Sorting_state;
 13376  0015DA  0E01               	movlw	1
 13377  0015DC  0100               	movlb	0	; () banked
 13378  0015DE  6FFC               	movwf	_machine_state& (0+255),b
 13379                           
 13380                           ; BSR set to: 0
 13381                           ;Test.c: 358: was_low_1 = 0;
 13382  0015E0  0E00               	movlw	0
 13383  0015E2  6E7A               	movwf	_was_low_1+1,c	;volatile
 13384  0015E4  0E00               	movlw	0
 13385  0015E6  6E79               	movwf	_was_low_1,c	;volatile
 13386                           
 13387                           ; BSR set to: 0
 13388                           ;Test.c: 359: was_low_3 = 0;
 13389  0015E8  0E00               	movlw	0
 13390  0015EA  6E7C               	movwf	_was_low_3+1,c	;volatile
 13391  0015EC  0E00               	movlw	0
 13392  0015EE  6E7B               	movwf	_was_low_3,c	;volatile
 13393                           
 13394                           ; BSR set to: 0
 13395                           ;Test.c: 365: initServos();
 13396  0015F0  EC38  F021         	call	_initServos	;wreg free
 13397                           
 13398                           ;Test.c: 366: _delay((unsigned long)((1500)*(32000000/4000.0)));
 13399  0015F4  0E3D               	movlw	61
 13400  0015F6  0100               	movlb	0	; () banked
 13401  0015F8  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13402  0015FA  0EE1               	movlw	225
 13403  0015FC  0100               	movlb	0	; () banked
 13404  0015FE  6FAB               	movwf	??_BothServos& (0+255),b
 13405  001600  0E3F               	movlw	63
 13406  001602                     u8557:
 13407  001602  2EE8               	decfsz	wreg,f,c
 13408  001604  D7FE               	bra	u8557
 13409  001606  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13410  001608  D7FC               	bra	u8557
 13411  00160A  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13412  00160C  D7FA               	bra	u8557
 13413  00160E  D000               	nop2	
 13414                           
 13415                           ;Test.c: 368: updateServoPosition(500, 1);
 13416  001610  0E01               	movlw	1
 13417  001612  0100               	movlb	0	; () banked
 13418  001614  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13419  001616  0EF4               	movlw	244
 13420  001618  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13421  00161A  0E00               	movlw	0
 13422  00161C  0100               	movlb	0	; () banked
 13423  00161E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13424  001620  0E01               	movlw	1
 13425  001622  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13426  001624  EC64  F01F         	call	_updateServoPosition	;wreg free
 13427                           
 13428                           ;Test.c: 369: updateServoPosition(1150, 3);
 13429  001628  0E04               	movlw	4
 13430  00162A  0100               	movlb	0	; () banked
 13431  00162C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13432  00162E  0E7E               	movlw	126
 13433  001630  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13434  001632  0E00               	movlw	0
 13435  001634  0100               	movlb	0	; () banked
 13436  001636  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13437  001638  0E03               	movlw	3
 13438  00163A  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13439  00163C  EC64  F01F         	call	_updateServoPosition	;wreg free
 13440                           
 13441                           ;Test.c: 370: _delay((unsigned long)((750)*(32000000/4000.0)));
 13442  001640  0E1F               	movlw	31
 13443  001642  0100               	movlb	0	; () banked
 13444  001644  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13445  001646  0E71               	movlw	113
 13446  001648  0100               	movlb	0	; () banked
 13447  00164A  6FAB               	movwf	??_BothServos& (0+255),b
 13448  00164C  0E1E               	movlw	30
 13449  00164E                     u8567:
 13450  00164E  2EE8               	decfsz	wreg,f,c
 13451  001650  D7FE               	bra	u8567
 13452  001652  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13453  001654  D7FC               	bra	u8567
 13454  001656  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13455  001658  D7FA               	bra	u8567
 13456  00165A  F000               	nop	
 13457                           
 13458                           ;Test.c: 371: updateServoPosition(1260, 3);
 13459  00165C  0E04               	movlw	4
 13460  00165E  0100               	movlb	0	; () banked
 13461  001660  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13462  001662  0EEC               	movlw	236
 13463  001664  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13464  001666  0E00               	movlw	0
 13465  001668  0100               	movlb	0	; () banked
 13466  00166A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13467  00166C  0E03               	movlw	3
 13468  00166E  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13469  001670  EC64  F01F         	call	_updateServoPosition	;wreg free
 13470                           
 13471                           ;Test.c: 372: _delay((unsigned long)((2500)*(32000000/4000.0)));
 13472  001674  0E66               	movlw	102
 13473  001676  0100               	movlb	0	; () banked
 13474  001678  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13475  00167A  0E76               	movlw	118
 13476  00167C  0100               	movlb	0	; () banked
 13477  00167E  6FAB               	movwf	??_BothServos& (0+255),b
 13478  001680  0EC1               	movlw	193
 13479  001682                     u8577:
 13480  001682  2EE8               	decfsz	wreg,f,c
 13481  001684  D7FE               	bra	u8577
 13482  001686  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13483  001688  D7FC               	bra	u8577
 13484  00168A  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13485  00168C  D7FA               	bra	u8577
 13486                           
 13487                           ;Test.c: 373: updateServoPosition(1150, 3);
 13488  00168E  0E04               	movlw	4
 13489  001690  0100               	movlb	0	; () banked
 13490  001692  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13491  001694  0E7E               	movlw	126
 13492  001696  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13493  001698  0E00               	movlw	0
 13494  00169A  0100               	movlb	0	; () banked
 13495  00169C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13496  00169E  0E03               	movlw	3
 13497  0016A0  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13498  0016A2  EC64  F01F         	call	_updateServoPosition	;wreg free
 13499                           
 13500                           ;Test.c: 374: _delay((unsigned long)((750)*(32000000/4000.0)));
 13501  0016A6  0E1F               	movlw	31
 13502  0016A8  0100               	movlb	0	; () banked
 13503  0016AA  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13504  0016AC  0E71               	movlw	113
 13505  0016AE  0100               	movlb	0	; () banked
 13506  0016B0  6FAB               	movwf	??_BothServos& (0+255),b
 13507  0016B2  0E1E               	movlw	30
 13508  0016B4                     u8587:
 13509  0016B4  2EE8               	decfsz	wreg,f,c
 13510  0016B6  D7FE               	bra	u8587
 13511  0016B8  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13512  0016BA  D7FC               	bra	u8587
 13513  0016BC  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13514  0016BE  D7FA               	bra	u8587
 13515  0016C0  F000               	nop	
 13516                           
 13517                           ;Test.c: 376: updateServoPosition(850, 1);
 13518  0016C2  0E03               	movlw	3
 13519  0016C4  0100               	movlb	0	; () banked
 13520  0016C6  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13521  0016C8  0E52               	movlw	82
 13522  0016CA  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13523  0016CC  0E00               	movlw	0
 13524  0016CE  0100               	movlb	0	; () banked
 13525  0016D0  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13526  0016D2  0E01               	movlw	1
 13527  0016D4  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13528  0016D6  EC64  F01F         	call	_updateServoPosition	;wreg free
 13529                           
 13530                           ;Test.c: 377: updateServoPosition(1150, 3);
 13531  0016DA  0E04               	movlw	4
 13532  0016DC  0100               	movlb	0	; () banked
 13533  0016DE  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13534  0016E0  0E7E               	movlw	126
 13535  0016E2  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13536  0016E4  0E00               	movlw	0
 13537  0016E6  0100               	movlb	0	; () banked
 13538  0016E8  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13539  0016EA  0E03               	movlw	3
 13540  0016EC  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13541  0016EE  EC64  F01F         	call	_updateServoPosition	;wreg free
 13542                           
 13543                           ;Test.c: 378: _delay((unsigned long)((750)*(32000000/4000.0)));
 13544  0016F2  0E1F               	movlw	31
 13545  0016F4  0100               	movlb	0	; () banked
 13546  0016F6  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13547  0016F8  0E71               	movlw	113
 13548  0016FA  0100               	movlb	0	; () banked
 13549  0016FC  6FAB               	movwf	??_BothServos& (0+255),b
 13550  0016FE  0E1E               	movlw	30
 13551  001700                     u8597:
 13552  001700  2EE8               	decfsz	wreg,f,c
 13553  001702  D7FE               	bra	u8597
 13554  001704  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13555  001706  D7FC               	bra	u8597
 13556  001708  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13557  00170A  D7FA               	bra	u8597
 13558  00170C  F000               	nop	
 13559                           
 13560                           ;Test.c: 379: updateServoPosition(1260, 3);
 13561  00170E  0E04               	movlw	4
 13562  001710  0100               	movlb	0	; () banked
 13563  001712  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13564  001714  0EEC               	movlw	236
 13565  001716  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13566  001718  0E00               	movlw	0
 13567  00171A  0100               	movlb	0	; () banked
 13568  00171C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13569  00171E  0E03               	movlw	3
 13570  001720  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13571  001722  EC64  F01F         	call	_updateServoPosition	;wreg free
 13572                           
 13573                           ;Test.c: 380: _delay((unsigned long)((2500)*(32000000/4000.0)));
 13574  001726  0E66               	movlw	102
 13575  001728  0100               	movlb	0	; () banked
 13576  00172A  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13577  00172C  0E76               	movlw	118
 13578  00172E  0100               	movlb	0	; () banked
 13579  001730  6FAB               	movwf	??_BothServos& (0+255),b
 13580  001732  0EC1               	movlw	193
 13581  001734                     u8607:
 13582  001734  2EE8               	decfsz	wreg,f,c
 13583  001736  D7FE               	bra	u8607
 13584  001738  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13585  00173A  D7FC               	bra	u8607
 13586  00173C  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13587  00173E  D7FA               	bra	u8607
 13588                           
 13589                           ;Test.c: 381: updateServoPosition(1150, 3);
 13590  001740  0E04               	movlw	4
 13591  001742  0100               	movlb	0	; () banked
 13592  001744  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13593  001746  0E7E               	movlw	126
 13594  001748  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13595  00174A  0E00               	movlw	0
 13596  00174C  0100               	movlb	0	; () banked
 13597  00174E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13598  001750  0E03               	movlw	3
 13599  001752  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13600  001754  EC64  F01F         	call	_updateServoPosition	;wreg free
 13601                           
 13602                           ;Test.c: 382: _delay((unsigned long)((750)*(32000000/4000.0)));
 13603  001758  0E1F               	movlw	31
 13604  00175A  0100               	movlb	0	; () banked
 13605  00175C  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13606  00175E  0E71               	movlw	113
 13607  001760  0100               	movlb	0	; () banked
 13608  001762  6FAB               	movwf	??_BothServos& (0+255),b
 13609  001764  0E1E               	movlw	30
 13610  001766                     u8617:
 13611  001766  2EE8               	decfsz	wreg,f,c
 13612  001768  D7FE               	bra	u8617
 13613  00176A  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13614  00176C  D7FC               	bra	u8617
 13615  00176E  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13616  001770  D7FA               	bra	u8617
 13617  001772  F000               	nop	
 13618                           
 13619                           ;Test.c: 384: updateServoPosition(1200, 1);
 13620  001774  0E04               	movlw	4
 13621  001776  0100               	movlb	0	; () banked
 13622  001778  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13623  00177A  0EB0               	movlw	176
 13624  00177C  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13625  00177E  0E00               	movlw	0
 13626  001780  0100               	movlb	0	; () banked
 13627  001782  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13628  001784  0E01               	movlw	1
 13629  001786  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13630  001788  EC64  F01F         	call	_updateServoPosition	;wreg free
 13631                           
 13632                           ;Test.c: 385: updateServoPosition(1150, 3);
 13633  00178C  0E04               	movlw	4
 13634  00178E  0100               	movlb	0	; () banked
 13635  001790  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13636  001792  0E7E               	movlw	126
 13637  001794  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13638  001796  0E00               	movlw	0
 13639  001798  0100               	movlb	0	; () banked
 13640  00179A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13641  00179C  0E03               	movlw	3
 13642  00179E  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13643  0017A0  EC64  F01F         	call	_updateServoPosition	;wreg free
 13644                           
 13645                           ;Test.c: 386: _delay((unsigned long)((1500)*(32000000/4000.0)));
 13646  0017A4  0E3D               	movlw	61
 13647  0017A6  0100               	movlb	0	; () banked
 13648  0017A8  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13649  0017AA  0EE1               	movlw	225
 13650  0017AC  0100               	movlb	0	; () banked
 13651  0017AE  6FAB               	movwf	??_BothServos& (0+255),b
 13652  0017B0  0E3F               	movlw	63
 13653  0017B2                     u8627:
 13654  0017B2  2EE8               	decfsz	wreg,f,c
 13655  0017B4  D7FE               	bra	u8627
 13656  0017B6  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13657  0017B8  D7FC               	bra	u8627
 13658  0017BA  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13659  0017BC  D7FA               	bra	u8627
 13660  0017BE  D000               	nop2	
 13661                           
 13662                           ;Test.c: 388: updateServoPosition(1670, 1);
 13663  0017C0  0E06               	movlw	6
 13664  0017C2  0100               	movlb	0	; () banked
 13665  0017C4  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13666  0017C6  0E86               	movlw	134
 13667  0017C8  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13668  0017CA  0E00               	movlw	0
 13669  0017CC  0100               	movlb	0	; () banked
 13670  0017CE  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13671  0017D0  0E01               	movlw	1
 13672  0017D2  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13673  0017D4  EC64  F01F         	call	_updateServoPosition	;wreg free
 13674                           
 13675                           ;Test.c: 389: updateServoPosition(1150, 3);
 13676  0017D8  0E04               	movlw	4
 13677  0017DA  0100               	movlb	0	; () banked
 13678  0017DC  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13679  0017DE  0E7E               	movlw	126
 13680  0017E0  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13681  0017E2  0E00               	movlw	0
 13682  0017E4  0100               	movlb	0	; () banked
 13683  0017E6  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13684  0017E8  0E03               	movlw	3
 13685  0017EA  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13686  0017EC  EC64  F01F         	call	_updateServoPosition	;wreg free
 13687                           
 13688                           ;Test.c: 390: _delay((unsigned long)((750)*(32000000/4000.0)));
 13689  0017F0  0E1F               	movlw	31
 13690  0017F2  0100               	movlb	0	; () banked
 13691  0017F4  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13692  0017F6  0E71               	movlw	113
 13693  0017F8  0100               	movlb	0	; () banked
 13694  0017FA  6FAB               	movwf	??_BothServos& (0+255),b
 13695  0017FC  0E1E               	movlw	30
 13696  0017FE                     u8637:
 13697  0017FE  2EE8               	decfsz	wreg,f,c
 13698  001800  D7FE               	bra	u8637
 13699  001802  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13700  001804  D7FC               	bra	u8637
 13701  001806  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13702  001808  D7FA               	bra	u8637
 13703  00180A  F000               	nop	
 13704                           
 13705                           ;Test.c: 391: updateServoPosition(1300, 3);
 13706  00180C  0E05               	movlw	5
 13707  00180E  0100               	movlb	0	; () banked
 13708  001810  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13709  001812  0E14               	movlw	20
 13710  001814  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13711  001816  0E00               	movlw	0
 13712  001818  0100               	movlb	0	; () banked
 13713  00181A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13714  00181C  0E03               	movlw	3
 13715  00181E  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13716  001820  EC64  F01F         	call	_updateServoPosition	;wreg free
 13717                           
 13718                           ;Test.c: 392: _delay((unsigned long)((2500)*(32000000/4000.0)));
 13719  001824  0E66               	movlw	102
 13720  001826  0100               	movlb	0	; () banked
 13721  001828  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13722  00182A  0E76               	movlw	118
 13723  00182C  0100               	movlb	0	; () banked
 13724  00182E  6FAB               	movwf	??_BothServos& (0+255),b
 13725  001830  0EC1               	movlw	193
 13726  001832                     u8647:
 13727  001832  2EE8               	decfsz	wreg,f,c
 13728  001834  D7FE               	bra	u8647
 13729  001836  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13730  001838  D7FC               	bra	u8647
 13731  00183A  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13732  00183C  D7FA               	bra	u8647
 13733                           
 13734                           ;Test.c: 393: updateServoPosition(1150, 3);
 13735  00183E  0E04               	movlw	4
 13736  001840  0100               	movlb	0	; () banked
 13737  001842  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13738  001844  0E7E               	movlw	126
 13739  001846  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13740  001848  0E00               	movlw	0
 13741  00184A  0100               	movlb	0	; () banked
 13742  00184C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13743  00184E  0E03               	movlw	3
 13744  001850  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13745  001852  EC64  F01F         	call	_updateServoPosition	;wreg free
 13746                           
 13747                           ;Test.c: 394: _delay((unsigned long)((750)*(32000000/4000.0)));
 13748  001856  0E1F               	movlw	31
 13749  001858  0100               	movlb	0	; () banked
 13750  00185A  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13751  00185C  0E71               	movlw	113
 13752  00185E  0100               	movlb	0	; () banked
 13753  001860  6FAB               	movwf	??_BothServos& (0+255),b
 13754  001862  0E1E               	movlw	30
 13755  001864                     u8657:
 13756  001864  2EE8               	decfsz	wreg,f,c
 13757  001866  D7FE               	bra	u8657
 13758  001868  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13759  00186A  D7FC               	bra	u8657
 13760  00186C  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13761  00186E  D7FA               	bra	u8657
 13762  001870  F000               	nop	
 13763                           
 13764                           ;Test.c: 396: updateServoPosition(2200, 1);
 13765  001872  0E08               	movlw	8
 13766  001874  0100               	movlb	0	; () banked
 13767  001876  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13768  001878  0E98               	movlw	152
 13769  00187A  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13770  00187C  0E00               	movlw	0
 13771  00187E  0100               	movlb	0	; () banked
 13772  001880  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13773  001882  0E01               	movlw	1
 13774  001884  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13775  001886  EC64  F01F         	call	_updateServoPosition	;wreg free
 13776                           
 13777                           ;Test.c: 397: updateServoPosition(1150, 3);
 13778  00188A  0E04               	movlw	4
 13779  00188C  0100               	movlb	0	; () banked
 13780  00188E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13781  001890  0E7E               	movlw	126
 13782  001892  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13783  001894  0E00               	movlw	0
 13784  001896  0100               	movlb	0	; () banked
 13785  001898  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13786  00189A  0E03               	movlw	3
 13787  00189C  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13788  00189E  EC64  F01F         	call	_updateServoPosition	;wreg free
 13789                           
 13790                           ;Test.c: 398: _delay((unsigned long)((750)*(32000000/4000.0)));
 13791  0018A2  0E1F               	movlw	31
 13792  0018A4  0100               	movlb	0	; () banked
 13793  0018A6  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13794  0018A8  0E71               	movlw	113
 13795  0018AA  0100               	movlb	0	; () banked
 13796  0018AC  6FAB               	movwf	??_BothServos& (0+255),b
 13797  0018AE  0E1E               	movlw	30
 13798  0018B0                     u8667:
 13799  0018B0  2EE8               	decfsz	wreg,f,c
 13800  0018B2  D7FE               	bra	u8667
 13801  0018B4  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13802  0018B6  D7FC               	bra	u8667
 13803  0018B8  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13804  0018BA  D7FA               	bra	u8667
 13805  0018BC  F000               	nop	
 13806                           
 13807                           ;Test.c: 399: updateServoPosition(1300, 3);
 13808  0018BE  0E05               	movlw	5
 13809  0018C0  0100               	movlb	0	; () banked
 13810  0018C2  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13811  0018C4  0E14               	movlw	20
 13812  0018C6  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13813  0018C8  0E00               	movlw	0
 13814  0018CA  0100               	movlb	0	; () banked
 13815  0018CC  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13816  0018CE  0E03               	movlw	3
 13817  0018D0  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13818  0018D2  EC64  F01F         	call	_updateServoPosition	;wreg free
 13819                           
 13820                           ;Test.c: 400: _delay((unsigned long)((2500)*(32000000/4000.0)));
 13821  0018D6  0E66               	movlw	102
 13822  0018D8  0100               	movlb	0	; () banked
 13823  0018DA  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13824  0018DC  0E76               	movlw	118
 13825  0018DE  0100               	movlb	0	; () banked
 13826  0018E0  6FAB               	movwf	??_BothServos& (0+255),b
 13827  0018E2  0EC1               	movlw	193
 13828  0018E4                     u8677:
 13829  0018E4  2EE8               	decfsz	wreg,f,c
 13830  0018E6  D7FE               	bra	u8677
 13831  0018E8  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13832  0018EA  D7FC               	bra	u8677
 13833  0018EC  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13834  0018EE  D7FA               	bra	u8677
 13835                           
 13836                           ;Test.c: 401: updateServoPosition(1150, 3);
 13837  0018F0  0E04               	movlw	4
 13838  0018F2  0100               	movlb	0	; () banked
 13839  0018F4  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13840  0018F6  0E7E               	movlw	126
 13841  0018F8  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13842  0018FA  0E00               	movlw	0
 13843  0018FC  0100               	movlb	0	; () banked
 13844  0018FE  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13845  001900  0E03               	movlw	3
 13846  001902  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13847  001904  EC64  F01F         	call	_updateServoPosition	;wreg free
 13848                           
 13849                           ;Test.c: 402: _delay((unsigned long)((750)*(32000000/4000.0)));
 13850  001908  0E1F               	movlw	31
 13851  00190A  0100               	movlb	0	; () banked
 13852  00190C  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13853  00190E  0E71               	movlw	113
 13854  001910  0100               	movlb	0	; () banked
 13855  001912  6FAB               	movwf	??_BothServos& (0+255),b
 13856  001914  0E1E               	movlw	30
 13857  001916                     u8687:
 13858  001916  2EE8               	decfsz	wreg,f,c
 13859  001918  D7FE               	bra	u8687
 13860  00191A  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13861  00191C  D7FC               	bra	u8687
 13862  00191E  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13863  001920  D7FA               	bra	u8687
 13864  001922  F000               	nop	
 13865                           
 13866                           ;Test.c: 404: TMR1ON = 0;
 13867  001924  90CD               	bcf	4045,0,c	;volatile
 13868                           
 13869                           ;Test.c: 405: TMR3ON = 0;
 13870  001926  90B1               	bcf	4017,0,c	;volatile
 13871                           
 13872                           ;Test.c: 406: (INTCONbits.GIE = 0);
 13873  001928  9EF2               	bcf	intcon,7,c	;volatile
 13874  00192A  0012               	return		;funcret
 13875  00192C                     __end_of_BothServos:
 13876                           	opt stack 0
 13877                           tblptru	equ	0xFF8
 13878                           tblptrh	equ	0xFF7
 13879                           tblptrl	equ	0xFF6
 13880                           tablat	equ	0xFF5
 13881                           prodh	equ	0xFF4
 13882                           prodl	equ	0xFF3
 13883                           intcon	equ	0xFF2
 13884                           intcon2	equ	0xFF1
 13885                           intcon3	equ	0xFF0
 13886                           postinc0	equ	0xFEE
 13887                           wreg	equ	0xFE8
 13888                           postdec1	equ	0xFE5
 13889                           fsr1l	equ	0xFE1
 13890                           indf2	equ	0xFDF
 13891                           postinc2	equ	0xFDE
 13892                           postdec2	equ	0xFDD
 13893                           fsr2h	equ	0xFDA
 13894                           fsr2l	equ	0xFD9
 13895                           status	equ	0xFD8
 13896                           
 13897 ;; *************** function _initServos *****************
 13898 ;; Defined at:
 13899 ;;		line 310 in file "sort.c"
 13900 ;; Parameters:    Size  Location     Type
 13901 ;;		None
 13902 ;; Auto vars:     Size  Location     Type
 13903 ;;		None
 13904 ;; Return value:  Size  Location     Type
 13905 ;;                  1    wreg      void 
 13906 ;; Registers used:
 13907 ;;		wreg, status,2, status,0, cstack
 13908 ;; Tracked objects:
 13909 ;;		On entry : 0/0
 13910 ;;		On exit  : 0/0
 13911 ;;		Unchanged: 0/0
 13912 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13913 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13914 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13915 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13916 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13917 ;;Total ram usage:        1 bytes
 13918 ;; Hardware stack levels used:    1
 13919 ;; Hardware stack levels required when called:    8
 13920 ;; This function calls:
 13921 ;;		_updateServoPosition
 13922 ;; This function is called by:
 13923 ;;		_Loading
 13924 ;;		_BothServos
 13925 ;; This function uses a non-reentrant model
 13926 ;;
 13927                           
 13928                           	psect	text48
 13929  004270                     __ptext48:
 13930                           	opt stack 0
 13931  004270                     _initServos:
 13932                           	opt stack 20
 13933                           
 13934                           ;sort.c: 311: updateServoPosition(1200, 1);
 13935                           
 13936                           ;incstack = 0
 13937  004270  0E04               	movlw	4
 13938  004272  0100               	movlb	0	; () banked
 13939  004274  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13940  004276  0EB0               	movlw	176
 13941  004278  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13942  00427A  0E00               	movlw	0
 13943  00427C  0100               	movlb	0	; () banked
 13944  00427E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13945  004280  0E01               	movlw	1
 13946  004282  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13947  004284  EC64  F01F         	call	_updateServoPosition	;wreg free
 13948                           
 13949                           ;sort.c: 312: updateServoPosition(1150, 3);
 13950  004288  0E04               	movlw	4
 13951  00428A  0100               	movlb	0	; () banked
 13952  00428C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13953  00428E  0E7E               	movlw	126
 13954  004290  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13955  004292  0E00               	movlw	0
 13956  004294  0100               	movlb	0	; () banked
 13957  004296  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13958  004298  0E03               	movlw	3
 13959  00429A  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13960  00429C  EC64  F01F         	call	_updateServoPosition	;wreg free
 13961                           
 13962                           ;sort.c: 313: TMR1ON = 1;
 13963  0042A0  80CD               	bsf	4045,0,c	;volatile
 13964                           
 13965                           ;sort.c: 314: was_low_1 = 0;
 13966  0042A2  0E00               	movlw	0
 13967  0042A4  6E7A               	movwf	_was_low_1+1,c	;volatile
 13968  0042A6  0E00               	movlw	0
 13969  0042A8  6E79               	movwf	_was_low_1,c	;volatile
 13970                           
 13971                           ;sort.c: 315: _delay((unsigned long)((5)*(32000000/4000.0)));
 13972  0042AA  0E34               	movlw	52
 13973  0042AC  0100               	movlb	0	; () banked
 13974  0042AE  6F88               	movwf	??_initServos& (0+255),b
 13975  0042B0  0EF1               	movlw	241
 13976  0042B2                     u8697:
 13977  0042B2  2EE8               	decfsz	wreg,f,c
 13978  0042B4  D7FE               	bra	u8697
 13979  0042B6  2F88               	decfsz	??_initServos& (0+255),f,b
 13980  0042B8  D7FC               	bra	u8697
 13981  0042BA  D000               	nop2	
 13982                           
 13983                           ;sort.c: 316: TMR3ON = 1;
 13984  0042BC  80B1               	bsf	4017,0,c	;volatile
 13985                           
 13986                           ;sort.c: 317: was_low_3 = 0;
 13987  0042BE  0E00               	movlw	0
 13988  0042C0  6E7C               	movwf	_was_low_3+1,c	;volatile
 13989  0042C2  0E00               	movlw	0
 13990  0042C4  6E7B               	movwf	_was_low_3,c	;volatile
 13991                           
 13992                           ;sort.c: 319: LATCbits.LATC0 = 1;
 13993  0042C6  808B               	bsf	3979,0,c	;volatile
 13994  0042C8  0012               	return		;funcret
 13995  0042CA                     __end_of_initServos:
 13996                           	opt stack 0
 13997                           tblptru	equ	0xFF8
 13998                           tblptrh	equ	0xFF7
 13999                           tblptrl	equ	0xFF6
 14000                           tablat	equ	0xFF5
 14001                           prodh	equ	0xFF4
 14002                           prodl	equ	0xFF3
 14003                           intcon	equ	0xFF2
 14004                           intcon2	equ	0xFF1
 14005                           intcon3	equ	0xFF0
 14006                           postinc0	equ	0xFEE
 14007                           wreg	equ	0xFE8
 14008                           postdec1	equ	0xFE5
 14009                           fsr1l	equ	0xFE1
 14010                           indf2	equ	0xFDF
 14011                           postinc2	equ	0xFDE
 14012                           postdec2	equ	0xFDD
 14013                           fsr2h	equ	0xFDA
 14014                           fsr2l	equ	0xFD9
 14015                           status	equ	0xFD8
 14016                           
 14017 ;; *************** function _updateServoPosition *****************
 14018 ;; Defined at:
 14019 ;;		line 373 in file "sort.c"
 14020 ;; Parameters:    Size  Location     Type
 14021 ;;  time_us         2    0[BANK0 ] int 
 14022 ;;  timer           2    2[BANK0 ] int 
 14023 ;; Auto vars:     Size  Location     Type
 14024 ;;  my_time         2    6[BANK0 ] unsigned int 
 14025 ;; Return value:  Size  Location     Type
 14026 ;;                  1    wreg      void 
 14027 ;; Registers used:
 14028 ;;		wreg, status,2, status,0
 14029 ;; Tracked objects:
 14030 ;;		On entry : 0/0
 14031 ;;		On exit  : 0/0
 14032 ;;		Unchanged: 0/0
 14033 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14034 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14035 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14036 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14037 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14038 ;;Total ram usage:        8 bytes
 14039 ;; Hardware stack levels used:    1
 14040 ;; Hardware stack levels required when called:    7
 14041 ;; This function calls:
 14042 ;;		Nothing
 14043 ;; This function is called by:
 14044 ;;		_Distribution
 14045 ;;		_initServos
 14046 ;;		_actuatorTest
 14047 ;;		_BothServos
 14048 ;; This function uses a non-reentrant model
 14049 ;;
 14050                           
 14051                           	psect	text49
 14052  003EC8                     __ptext49:
 14053                           	opt stack 0
 14054  003EC8                     _updateServoPosition:
 14055                           	opt stack 20
 14056                           
 14057                           ;sort.c: 374: unsigned int my_time = 65535 - time_us;
 14058                           
 14059                           ;incstack = 0
 14060  003EC8  C080  F084         	movff	updateServoPosition@time_us,??_updateServoPosition
 14061  003ECC  C081  F085         	movff	updateServoPosition@time_us+1,??_updateServoPosition+1
 14062  003ED0  0100               	movlb	0	; () banked
 14063  003ED2  1F84               	comf	??_updateServoPosition& (0+255),f,b
 14064  003ED4  1F85               	comf	(??_updateServoPosition+1)& (0+255),f,b
 14065  003ED6  4B84               	infsnz	??_updateServoPosition& (0+255),f,b
 14066  003ED8  2B85               	incf	(??_updateServoPosition+1)& (0+255),f,b
 14067  003EDA  0EFF               	movlw	255
 14068  003EDC  0100               	movlb	0	; () banked
 14069  003EDE  2584               	addwf	??_updateServoPosition& (0+255),w,b
 14070  003EE0  0100               	movlb	0	; () banked
 14071  003EE2  6F86               	movwf	updateServoPosition@my_time& (0+255),b
 14072  003EE4  0EFF               	movlw	255
 14073  003EE6  0100               	movlb	0	; () banked
 14074  003EE8  2185               	addwfc	(??_updateServoPosition+1)& (0+255),w,b
 14075  003EEA  0100               	movlb	0	; () banked
 14076  003EEC  6F87               	movwf	(updateServoPosition@my_time+1)& (0+255),b
 14077                           
 14078                           ;sort.c: 375: switch(timer){
 14079  003EEE  D015               	goto	l5806
 14080  003EF0                     l5804:
 14081                           
 14082                           ; BSR set to: 0
 14083                           ;sort.c: 377: servoTimes[0] = my_time >> 8;
 14084  003EF0  0100               	movlb	0	; () banked
 14085  003EF2  5187               	movf	(updateServoPosition@my_time+1)& (0+255),w,b
 14086  003EF4  0101               	movlb	1	; () banked
 14087  003EF6  6F1C               	movwf	_servoTimes& (0+255),b
 14088  003EF8  6B1D               	clrf	(_servoTimes+1)& (0+255),b
 14089                           
 14090                           ;sort.c: 378: servoTimes[1] = my_time & 0xFF;
 14091  003EFA  0100               	movlb	0	; () banked
 14092  003EFC  5186               	movf	updateServoPosition@my_time& (0+255),w,b
 14093  003EFE  0101               	movlb	1	; () banked
 14094  003F00  6F1E               	movwf	(_servoTimes+2)& (0+255),b
 14095  003F02  6B1F               	clrf	(_servoTimes+3)& (0+255),b
 14096  003F04                     l811:
 14097                           
 14098                           ;sort.c: 380: servoTimes[2] = my_time >> 8;
 14099  003F04  0100               	movlb	0	; () banked
 14100  003F06  5187               	movf	(updateServoPosition@my_time+1)& (0+255),w,b
 14101  003F08  0101               	movlb	1	; () banked
 14102  003F0A  6F20               	movwf	(_servoTimes+4)& (0+255),b
 14103  003F0C  6B21               	clrf	(_servoTimes+5)& (0+255),b
 14104                           
 14105                           ;sort.c: 381: servoTimes[3] = my_time & 0xFF;
 14106  003F0E  0100               	movlb	0	; () banked
 14107  003F10  5186               	movf	updateServoPosition@my_time& (0+255),w,b
 14108  003F12  0101               	movlb	1	; () banked
 14109  003F14  6F22               	movwf	(_servoTimes+6)& (0+255),b
 14110  003F16  6B23               	clrf	(_servoTimes+7)& (0+255),b
 14111                           
 14112                           ;sort.c: 382: }
 14113  003F18  0012               	return	
 14114  003F1A                     l5806:
 14115  003F1A  C082  F084         	movff	updateServoPosition@timer,??_updateServoPosition
 14116  003F1E  C083  F085         	movff	updateServoPosition@timer+1,??_updateServoPosition+1
 14117                           
 14118                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 14119                           ; Switch size 1, requested type "space"
 14120                           ; Number of cases is 1, Range of values is 0 to 0
 14121                           ; switch strategies available:
 14122                           ; Name         Instructions Cycles
 14123                           ; simple_byte            4     3 (average)
 14124                           ;	Chosen strategy is simple_byte
 14125  003F22  0100               	movlb	0	; () banked
 14126  003F24  5185               	movf	(??_updateServoPosition+1)& (0+255),w,b
 14127  003F26  0A00               	xorlw	0	; case 0
 14128  003F28  A4D8               	btfss	status,2,c
 14129  003F2A  0012               	return	
 14130                           
 14131                           ; BSR set to: 0
 14132                           ; Switch size 1, requested type "space"
 14133                           ; Number of cases is 2, Range of values is 1 to 3
 14134                           ; switch strategies available:
 14135                           ; Name         Instructions Cycles
 14136                           ; simple_byte            7     4 (average)
 14137                           ;	Chosen strategy is simple_byte
 14138  003F2C  0100               	movlb	0	; () banked
 14139  003F2E  5184               	movf	??_updateServoPosition& (0+255),w,b
 14140  003F30  0A01               	xorlw	1	; case 1
 14141  003F32  B4D8               	btfsc	status,2,c
 14142  003F34  D7DD               	goto	l5804
 14143  003F36  0A02               	xorlw	2	; case 3
 14144  003F38  A4D8               	btfss	status,2,c
 14145  003F3A  0012               	return	
 14146  003F3C  D7E3               	goto	l811
 14147  003F3E                     __end_of_updateServoPosition:
 14148                           	opt stack 0
 14149                           tblptru	equ	0xFF8
 14150                           tblptrh	equ	0xFF7
 14151                           tblptrl	equ	0xFF6
 14152                           tablat	equ	0xFF5
 14153                           prodh	equ	0xFF4
 14154                           prodl	equ	0xFF3
 14155                           intcon	equ	0xFF2
 14156                           intcon2	equ	0xFF1
 14157                           intcon3	equ	0xFF0
 14158                           postinc0	equ	0xFEE
 14159                           wreg	equ	0xFE8
 14160                           postdec1	equ	0xFE5
 14161                           fsr1l	equ	0xFE1
 14162                           indf2	equ	0xFDF
 14163                           postinc2	equ	0xFDE
 14164                           postdec2	equ	0xFDD
 14165                           fsr2h	equ	0xFDA
 14166                           fsr2l	equ	0xFD9
 14167                           status	equ	0xFD8
 14168                           
 14169 ;; *************** function _BlockerTest *****************
 14170 ;; Defined at:
 14171 ;;		line 568 in file "Test.c"
 14172 ;; Parameters:    Size  Location     Type
 14173 ;;		None
 14174 ;; Auto vars:     Size  Location     Type
 14175 ;;  i               2   44[BANK0 ] int 
 14176 ;;  flag            2   46[BANK0 ] int 
 14177 ;; Return value:  Size  Location     Type
 14178 ;;                  1    wreg      void 
 14179 ;; Registers used:
 14180 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14181 ;; Tracked objects:
 14182 ;;		On entry : 0/0
 14183 ;;		On exit  : 0/0
 14184 ;;		Unchanged: 0/0
 14185 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14186 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14187 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14188 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14189 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14190 ;;Total ram usage:        5 bytes
 14191 ;; Hardware stack levels used:    1
 14192 ;; Hardware stack levels required when called:   10
 14193 ;; This function calls:
 14194 ;;		_lcdInst
 14195 ;;		_printf
 14196 ;; This function is called by:
 14197 ;;		_Test
 14198 ;; This function uses a non-reentrant model
 14199 ;;
 14200                           
 14201                           	psect	text50
 14202  0037E8                     __ptext50:
 14203                           	opt stack 0
 14204  0037E8                     _BlockerTest:
 14205                           	opt stack 19
 14206                           
 14207                           ;Test.c: 569: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 14208                           
 14209                           ;incstack = 0
 14210  0037E8  0E01               	movlw	1
 14211  0037EA  EC3C  F025         	call	_lcdInst
 14212  0037EE  0E68               	movlw	104
 14213  0037F0  0100               	movlb	0	; () banked
 14214  0037F2  6FAB               	movwf	??_BlockerTest& (0+255),b
 14215  0037F4  0EE4               	movlw	228
 14216  0037F6                     u8707:
 14217  0037F6  2EE8               	decfsz	wreg,f,c
 14218  0037F8  D7FE               	bra	u8707
 14219  0037FA  2FAB               	decfsz	??_BlockerTest& (0+255),f,b
 14220  0037FC  D7FC               	bra	u8707
 14221  0037FE  F000               	nop	
 14222  003800  0E80               	movlw	128
 14223  003802  EC3C  F025         	call	_lcdInst
 14224                           
 14225                           ;Test.c: 570: printf("D WILL RETURN    ");
 14226  003806  0E49               	movlw	low STR_111
 14227  003808  0100               	movlb	0	; () banked
 14228  00380A  6F8E               	movwf	printf@f& (0+255),b
 14229  00380C  0EFB               	movlw	high STR_111
 14230  00380E  0100               	movlb	0	; () banked
 14231  003810  6F8F               	movwf	(printf@f+1)& (0+255),b
 14232  003812  ECB8  F008         	call	_printf	;wreg free
 14233                           
 14234                           ;Test.c: 571: lcdInst(0b11000000);;
 14235  003816  0EC0               	movlw	192
 14236  003818  EC3C  F025         	call	_lcdInst
 14237                           
 14238                           ;Test.c: 572: printf("OTHER TOGGLES CAM");
 14239  00381C  0E7F               	movlw	low STR_119
 14240  00381E  0100               	movlb	0	; () banked
 14241  003820  6F8E               	movwf	printf@f& (0+255),b
 14242  003822  0EFB               	movlw	high STR_119
 14243  003824  0100               	movlb	0	; () banked
 14244  003826  6F8F               	movwf	(printf@f+1)& (0+255),b
 14245  003828  ECB8  F008         	call	_printf	;wreg free
 14246                           
 14247                           ;Test.c: 573: int flag = 1;
 14248  00382C  0E00               	movlw	0
 14249  00382E  0100               	movlb	0	; () banked
 14250  003830  6FAF               	movwf	(BlockerTest@flag+1)& (0+255),b
 14251  003832  0E01               	movlw	1
 14252  003834  6FAE               	movwf	BlockerTest@flag& (0+255),b
 14253  003836                     l1272:
 14254  003836  A281               	btfss	3969,1,c	;volatile
 14255  003838  D7FE               	goto	l1272
 14256                           
 14257                           ;Test.c: 576: if(PORTB >> 4 == 0b1111){
 14258  00383A  3881               	swapf	3969,w,c	;volatile
 14259  00383C  0B0F               	andlw	15
 14260  00383E  0A0F               	xorlw	15
 14261  003840  B4D8               	btfsc	status,2,c
 14262  003842  0012               	return	
 14263                           
 14264                           ;Test.c: 579: else{
 14265                           ;Test.c: 580: if(flag){
 14266                           
 14267                           ;Test.c: 578: }
 14268                           
 14269                           ;Test.c: 577: break;
 14270  003844  0100               	movlb	0	; () banked
 14271  003846  51AE               	movf	BlockerTest@flag& (0+255),w,b
 14272  003848  0100               	movlb	0	; () banked
 14273  00384A  11AF               	iorwf	(BlockerTest@flag+1)& (0+255),w,b
 14274  00384C  B4D8               	btfsc	status,2,c
 14275  00384E  D007               	goto	l7556
 14276                           
 14277                           ; BSR set to: 0
 14278                           ;Test.c: 581: LATCbits.LATC0 = 1;
 14279  003850  808B               	bsf	3979,0,c	;volatile
 14280  003852  D023               	goto	l7568
 14281  003854                     u6151:
 14282  003854  0E01               	movlw	1
 14283  003856                     u6160:
 14284  003856  0100               	movlb	0	; () banked
 14285  003858  6FAE               	movwf	BlockerTest@flag& (0+255),b
 14286  00385A  6BAF               	clrf	(BlockerTest@flag+1)& (0+255),b
 14287                           
 14288                           ;Test.c: 583: }
 14289  00385C  D026               	goto	l1282
 14290  00385E                     l7556:
 14291                           
 14292                           ; BSR set to: 0
 14293                           ;Test.c: 584: else{
 14294                           ;Test.c: 585: for(int i=0;i<5000;i++)
 14295  00385E  0E00               	movlw	0
 14296  003860  0100               	movlb	0	; () banked
 14297  003862  6FAD               	movwf	(BlockerTest@i+1)& (0+255),b
 14298  003864  0E00               	movlw	0
 14299  003866  6FAC               	movwf	BlockerTest@i& (0+255),b
 14300  003868                     l7558:
 14301                           
 14302                           ; BSR set to: 0
 14303  003868  0100               	movlb	0	; () banked
 14304  00386A  BFAD               	btfsc	(BlockerTest@i+1)& (0+255),7,b
 14305  00386C  D008               	goto	l1280
 14306  00386E  0E88               	movlw	136
 14307  003870  0100               	movlb	0	; () banked
 14308  003872  5DAC               	subwf	BlockerTest@i& (0+255),w,b
 14309  003874  0E13               	movlw	19
 14310  003876  0100               	movlb	0	; () banked
 14311  003878  59AD               	subwfb	(BlockerTest@i+1)& (0+255),w,b
 14312  00387A  B0D8               	btfsc	status,0,c
 14313  00387C  D00D               	goto	l1281
 14314  00387E                     l1280:
 14315                           
 14316                           ; BSR set to: 0
 14317                           ;Test.c: 586: {
 14318                           ;Test.c: 587: LATCbits.LATC0 = 1;
 14319  00387E  808B               	bsf	3979,0,c	;volatile
 14320                           
 14321                           ; BSR set to: 0
 14322                           ;Test.c: 588: _delay((unsigned long)((10)*(32000000/4000000.0)));
 14323  003880  0E1A               	movlw	26
 14324  003882                     u8717:
 14325  003882  2EE8               	decfsz	wreg,f,c
 14326  003884  D7FE               	bra	u8717
 14327  003886  D000               	nop2	
 14328                           
 14329                           ;Test.c: 589: LATCbits.LATC0 = 0;
 14330  003888  908B               	bcf	3979,0,c	;volatile
 14331                           
 14332                           ;Test.c: 590: _delay((unsigned long)((90)*(32000000/4000000.0)));
 14333  00388A  0EF0               	movlw	240
 14334  00388C                     u8727:
 14335  00388C  2EE8               	decfsz	wreg,f,c
 14336  00388E  D7FE               	bra	u8727
 14337  003890  0100               	movlb	0	; () banked
 14338  003892  4BAC               	infsnz	BlockerTest@i& (0+255),f,b
 14339  003894  2BAD               	incf	(BlockerTest@i+1)& (0+255),f,b
 14340  003896  D7E8               	goto	l7558
 14341  003898                     l1281:
 14342                           
 14343                           ; BSR set to: 0
 14344                           ;Test.c: 591: }
 14345                           ;Test.c: 592: LATCbits.LATC0 = 0;
 14346  003898  908B               	bcf	3979,0,c	;volatile
 14347  00389A                     l7568:
 14348                           
 14349                           ; BSR set to: 0
 14350                           ;Test.c: 593: flag = !flag;
 14351  00389A  0100               	movlb	0	; () banked
 14352  00389C  51AE               	movf	BlockerTest@flag& (0+255),w,b
 14353  00389E  0100               	movlb	0	; () banked
 14354  0038A0  11AF               	iorwf	(BlockerTest@flag+1)& (0+255),w,b
 14355  0038A2  B4D8               	btfsc	status,2,c
 14356  0038A4  D7D7               	goto	u6151
 14357  0038A6  0E00               	movlw	0
 14358  0038A8  D7D6               	goto	u6160
 14359  0038AA                     l1282:
 14360  0038AA  A281               	btfss	3969,1,c	;volatile
 14361  0038AC  D7C4               	goto	l1272
 14362  0038AE  D7FD               	goto	l1282
 14363  0038B0                     __end_of_BlockerTest:
 14364                           	opt stack 0
 14365                           tblptru	equ	0xFF8
 14366                           tblptrh	equ	0xFF7
 14367                           tblptrl	equ	0xFF6
 14368                           tablat	equ	0xFF5
 14369                           prodh	equ	0xFF4
 14370                           prodl	equ	0xFF3
 14371                           intcon	equ	0xFF2
 14372                           intcon2	equ	0xFF1
 14373                           intcon3	equ	0xFF0
 14374                           postinc0	equ	0xFEE
 14375                           wreg	equ	0xFE8
 14376                           postdec1	equ	0xFE5
 14377                           fsr1l	equ	0xFE1
 14378                           indf2	equ	0xFDF
 14379                           postinc2	equ	0xFDE
 14380                           postdec2	equ	0xFDD
 14381                           fsr2h	equ	0xFDA
 14382                           fsr2l	equ	0xFD9
 14383                           status	equ	0xFD8
 14384                           
 14385 ;; *************** function _printf *****************
 14386 ;; Defined at:
 14387 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 14388 ;; Parameters:    Size  Location     Type
 14389 ;;  f               2   14[BANK0 ] PTR const unsigned char 
 14390 ;;		 -> STR_119(18), STR_118(18), STR_117(18), STR_116(18), 
 14391 ;;		 -> STR_115(17), STR_114(17), STR_113(11), STR_112(18), 
 14392 ;;		 -> STR_111(18), STR_110(17), STR_109(15), STR_108(15), 
 14393 ;;		 -> STR_107(15), STR_106(17), STR_105(17), STR_104(17), 
 14394 ;;		 -> STR_103(16), STR_102(17), STR_101(17), STR_100(17), 
 14395 ;;		 -> STR_99(17), STR_98(17), STR_97(17), STR_96(15), 
 14396 ;;		 -> STR_95(11), STR_94(17), STR_93(11), STR_92(17), 
 14397 ;;		 -> STR_91(14), STR_90(15), STR_89(14), STR_88(10), 
 14398 ;;		 -> STR_87(9), STR_86(9), STR_85(10), STR_84(10), 
 14399 ;;		 -> STR_83(16), STR_82(15), STR_81(3), STR_80(15), 
 14400 ;;		 -> STR_79(13), STR_78(14), STR_77(8), STR_76(14), 
 14401 ;;		 -> STR_75(15), STR_74(12), STR_73(14), STR_72(17), 
 14402 ;;		 -> STR_71(14), STR_70(15), STR_69(17), STR_68(17), 
 14403 ;;		 -> STR_67(7), STR_66(21), STR_65(13), STR_64(11), 
 14404 ;;		 -> STR_63(24), STR_50(17), STR_49(17), STR_48(17), 
 14405 ;;		 -> STR_47(17), STR_46(17), STR_45(17), STR_44(17), 
 14406 ;;		 -> STR_43(17), STR_42(17), STR_41(17), STR_40(17), 
 14407 ;;		 -> STR_39(17), STR_38(17), STR_37(17), STR_36(17), 
 14408 ;;		 -> STR_35(17), STR_34(17), STR_33(17), STR_32(17), 
 14409 ;;		 -> STR_31(17), STR_30(17), STR_29(3), STR_28(17), 
 14410 ;;		 -> STR_27(17), STR_26(17), STR_25(17), STR_24(17), 
 14411 ;;		 -> STR_23(14), STR_22(10), STR_21(24), STR_7(7), 
 14412 ;;		 -> STR_6(17), STR_5(18), STR_4(16), STR_3(18), 
 14413 ;;		 -> STR_2(14), STR_1(18), 
 14414 ;; Auto vars:     Size  Location     Type
 14415 ;;  tmpval          4    0        struct .
 14416 ;;  width           2   41[BANK0 ] int 
 14417 ;;  val             2   37[BANK0 ] unsigned int 
 14418 ;;  len             2   35[BANK0 ] unsigned int 
 14419 ;;  ap              2   33[BANK0 ] PTR void [1]
 14420 ;;		 -> ?i2_printf(2), ?_printf(2), 
 14421 ;;  cp              2   31[BANK0 ] PTR const unsigned char 
 14422 ;;		 -> STR_120(7), count_total(2), printRTC@month(4), UI@month(4), 
 14423 ;;  c               1   40[BANK0 ] char 
 14424 ;;  flag            1   39[BANK0 ] unsigned char 
 14425 ;;  prec            1   30[BANK0 ] char 
 14426 ;; Return value:  Size  Location     Type
 14427 ;;                  2   14[BANK0 ] int 
 14428 ;; Registers used:
 14429 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14430 ;; Tracked objects:
 14431 ;;		On entry : 0/0
 14432 ;;		On exit  : 0/0
 14433 ;;		Unchanged: 0/0
 14434 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14435 ;;      Params:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14436 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14437 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14438 ;;      Totals:         0      29       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14439 ;;Total ram usage:       29 bytes
 14440 ;; Hardware stack levels used:    1
 14441 ;; Hardware stack levels required when called:    9
 14442 ;; This function calls:
 14443 ;;		___lwdiv
 14444 ;;		___lwmod
 14445 ;;		___wmul
 14446 ;;		_isdigit
 14447 ;;		_putch
 14448 ;; This function is called by:
 14449 ;;		_UI
 14450 ;;		_change_state_to_menu_start
 14451 ;;		_change_state_to_menu_12
 14452 ;;		_change_state_to_menu_22
 14453 ;;		_printRTC
 14454 ;;		_EEPROM_write
 14455 ;;		_Test
 14456 ;;		_algorithmTest
 14457 ;;		_sensorTest
 14458 ;;		_actuatorTest
 14459 ;;		_BothServos
 14460 ;;		_PortTestA5
 14461 ;;		_PusherTest
 14462 ;;		_SpeedTest
 14463 ;;		_BlockerTest
 14464 ;;		_ToggleTestA5
 14465 ;; This function uses a non-reentrant model
 14466 ;;
 14467                           
 14468                           	psect	text51
 14469  001170                     __ptext51:
 14470                           	opt stack 0
 14471  001170                     _printf:
 14472                           	opt stack 18
 14473                           
 14474                           ;doprnt.c: 466: va_list ap;
 14475                           ;doprnt.c: 499: signed char c;
 14476                           ;doprnt.c: 501: int width;
 14477                           ;doprnt.c: 506: signed char prec;
 14478                           ;doprnt.c: 508: unsigned char flag;
 14479                           ;doprnt.c: 523: union {
 14480                           ;doprnt.c: 524: unsigned long vd;
 14481                           ;doprnt.c: 525: double integ;
 14482                           ;doprnt.c: 526: } tmpval;
 14483                           ;doprnt.c: 528: unsigned int val;
 14484                           ;doprnt.c: 529: unsigned len;
 14485                           ;doprnt.c: 530: const char * cp;
 14486                           ;doprnt.c: 533: *ap = __va_start();
 14487                           
 14488                           ;incstack = 0
 14489  001170  0E90               	movlw	low (?_printf+2)
 14490  001172  0100               	movlb	0	; () banked
 14491  001174  6FA1               	movwf	printf@ap& (0+255),b
 14492  001176  0E00               	movlw	high (?_printf+2)
 14493  001178  0100               	movlb	0	; () banked
 14494  00117A  6FA2               	movwf	(printf@ap+1)& (0+255),b
 14495                           
 14496                           ;doprnt.c: 536: while(c = *f++) {
 14497  00117C  D205               	goto	l5764
 14498  00117E                     l5634:
 14499                           
 14500                           ; BSR set to: 0
 14501                           ;doprnt.c: 538: if(c != '%')
 14502  00117E  0E25               	movlw	37
 14503  001180  0100               	movlb	0	; () banked
 14504  001182  19A8               	xorwf	printf@c& (0+255),w,b
 14505  001184  B4D8               	btfsc	status,2,c
 14506  001186  D005               	goto	l5638
 14507                           
 14508                           ; BSR set to: 0
 14509                           ;doprnt.c: 540: {
 14510                           ;doprnt.c: 541: (putch(c) );
 14511  001188  0100               	movlb	0	; () banked
 14512  00118A  51A8               	movf	printf@c& (0+255),w,b
 14513  00118C  EC34  F025         	call	_putch
 14514                           
 14515                           ;doprnt.c: 542: continue;
 14516  001190  D1FB               	goto	l5764
 14517  001192                     l5638:
 14518                           
 14519                           ;doprnt.c: 543: }
 14520                           ;doprnt.c: 546: width = 0;
 14521  001192  0E00               	movlw	0
 14522  001194  0100               	movlb	0	; () banked
 14523  001196  6FAA               	movwf	(printf@width+1)& (0+255),b
 14524  001198  0E00               	movlw	0
 14525  00119A  6FA9               	movwf	printf@width& (0+255),b
 14526                           
 14527                           ;doprnt.c: 548: flag = 0;
 14528  00119C  0E00               	movlw	0
 14529  00119E  0100               	movlb	0	; () banked
 14530  0011A0  6FA7               	movwf	printf@flag& (0+255),b
 14531                           
 14532                           ; BSR set to: 0
 14533                           ;doprnt.c: 551: switch(*f) {
 14534                           
 14535                           ;doprnt.c: 550: for(;;) {
 14536  0011A2  D005               	goto	l5644
 14537  0011A4                     l5640:
 14538                           
 14539                           ;doprnt.c: 580: flag |= 0x04;
 14540  0011A4  0100               	movlb	0	; () banked
 14541  0011A6  85A7               	bsf	printf@flag& (0+255),2,b
 14542                           
 14543                           ;doprnt.c: 581: f++;
 14544  0011A8  0100               	movlb	0	; () banked
 14545  0011AA  4B8E               	infsnz	printf@f& (0+255),f,b
 14546  0011AC  2B8F               	incf	(printf@f+1)& (0+255),f,b
 14547  0011AE                     l5644:
 14548  0011AE  C08E  FFF6         	movff	printf@f,tblptrl
 14549  0011B2  C08F  FFF7         	movff	printf@f+1,tblptrh
 14550  0011B6                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 14551  0011B6  6AF8               	clrf	tblptru,c
 14552  0011B8                     	endif
 14553  0011B8                     	if	0	;tblptru may be non-zero
 14554  0011B8                     	endif
 14555  0011B8  0008               	tblrd		*
 14556  0011BA  50F5               	movf	tablat,w,c
 14557                           
 14558                           ; Switch size 1, requested type "space"
 14559                           ; Number of cases is 1, Range of values is 48 to 48
 14560                           ; switch strategies available:
 14561                           ; Name         Instructions Cycles
 14562                           ; simple_byte            4     3 (average)
 14563                           ;	Chosen strategy is simple_byte
 14564  0011BC  0A30               	xorlw	48	; case 48
 14565  0011BE  B4D8               	btfsc	status,2,c
 14566  0011C0  D7F1               	goto	l5640
 14567                           
 14568                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 14569                           
 14570                           ;doprnt.c: 586: }
 14571                           
 14572                           ;doprnt.c: 585: break;
 14573  0011C2  C08E  FFF6         	movff	printf@f,tblptrl
 14574  0011C6  C08F  FFF7         	movff	printf@f+1,tblptrh
 14575  0011CA                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 14576  0011CA  6AF8               	clrf	tblptru,c
 14577  0011CC                     	endif
 14578  0011CC                     	if	0	;tblptru may be non-zero
 14579  0011CC                     	endif
 14580  0011CC  0008               	tblrd		*
 14581  0011CE  50F5               	movf	tablat,w,c
 14582  0011D0  EC59  F024         	call	_isdigit
 14583  0011D4  A0D8               	btfss	status,0,c
 14584  0011D6  D0D2               	goto	l5692
 14585                           
 14586                           ;doprnt.c: 598: width = 0;
 14587  0011D8  0E00               	movlw	0
 14588  0011DA  0100               	movlb	0	; () banked
 14589  0011DC  6FAA               	movwf	(printf@width+1)& (0+255),b
 14590  0011DE  0E00               	movlw	0
 14591  0011E0  6FA9               	movwf	printf@width& (0+255),b
 14592  0011E2                     l5650:
 14593                           
 14594                           ;doprnt.c: 600: width *= 10;
 14595  0011E2  C0A9  F080         	movff	printf@width,___wmul@multiplier
 14596  0011E6  C0AA  F081         	movff	printf@width+1,___wmul@multiplier+1
 14597  0011EA  0E00               	movlw	0
 14598  0011EC  0100               	movlb	0	; () banked
 14599  0011EE  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
 14600  0011F0  0E0A               	movlw	10
 14601  0011F2  6F82               	movwf	___wmul@multiplicand& (0+255),b
 14602  0011F4  ECC3  F022         	call	___wmul	;wreg free
 14603  0011F8  C080  F0A9         	movff	?___wmul,printf@width
 14604  0011FC  C081  F0AA         	movff	?___wmul+1,printf@width+1
 14605                           
 14606                           ;doprnt.c: 601: width += *f++ - '0';
 14607  001200  0ED0               	movlw	208
 14608  001202  0100               	movlb	0	; () banked
 14609  001204  6F9A               	movwf	??_printf& (0+255),b
 14610  001206  0EFF               	movlw	255
 14611  001208  0100               	movlb	0	; () banked
 14612  00120A  6F9B               	movwf	(??_printf+1)& (0+255),b
 14613  00120C  C08E  FFF6         	movff	printf@f,tblptrl
 14614  001210  C08F  FFF7         	movff	printf@f+1,tblptrh
 14615  001214                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 14616  001214  6AF8               	clrf	tblptru,c
 14617  001216                     	endif
 14618  001216                     	if	0	;tblptru may be non-zero
 14619  001216                     	endif
 14620  001216  0008               	tblrd		*
 14621  001218  50F5               	movf	tablat,w,c
 14622  00121A  0100               	movlb	0	; () banked
 14623  00121C  6F9C               	movwf	(??_printf+2)& (0+255),b
 14624  00121E  6B9D               	clrf	(??_printf+3)& (0+255),b
 14625  001220  0100               	movlb	0	; () banked
 14626  001222  519A               	movf	??_printf& (0+255),w,b
 14627  001224  0100               	movlb	0	; () banked
 14628  001226  279C               	addwf	(??_printf+2)& (0+255),f,b
 14629  001228  0100               	movlb	0	; () banked
 14630  00122A  519B               	movf	(??_printf+1)& (0+255),w,b
 14631  00122C  0100               	movlb	0	; () banked
 14632  00122E  239D               	addwfc	(??_printf+3)& (0+255),f,b
 14633  001230  0100               	movlb	0	; () banked
 14634  001232  519C               	movf	(??_printf+2)& (0+255),w,b
 14635  001234  0100               	movlb	0	; () banked
 14636  001236  27A9               	addwf	printf@width& (0+255),f,b
 14637  001238  0100               	movlb	0	; () banked
 14638  00123A  519D               	movf	(??_printf+3)& (0+255),w,b
 14639  00123C  0100               	movlb	0	; () banked
 14640  00123E  23AA               	addwfc	(printf@width+1)& (0+255),f,b
 14641                           
 14642                           ; BSR set to: 0
 14643  001240  0100               	movlb	0	; () banked
 14644  001242  4B8E               	infsnz	printf@f& (0+255),f,b
 14645  001244  2B8F               	incf	(printf@f+1)& (0+255),f,b
 14646                           
 14647                           ; BSR set to: 0
 14648                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 14649  001246  C08E  FFF6         	movff	printf@f,tblptrl
 14650  00124A  C08F  FFF7         	movff	printf@f+1,tblptrh
 14651  00124E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 14652  00124E  6AF8               	clrf	tblptru,c
 14653  001250                     	endif
 14654  001250                     	if	0	;tblptru may be non-zero
 14655  001250                     	endif
 14656  001250  0008               	tblrd		*
 14657  001252  50F5               	movf	tablat,w,c
 14658  001254  EC59  F024         	call	_isdigit
 14659  001258  A0D8               	btfss	status,0,c
 14660  00125A  D090               	goto	l5692
 14661  00125C  D7C2               	goto	l5650
 14662  00125E                     l5658:
 14663                           
 14664                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 14665  00125E  C0A1  FFD9         	movff	printf@ap,fsr2l
 14666  001262  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 14667  001266  CFDE F09F          	movff	postinc2,printf@cp
 14668  00126A  CFDD F0A0          	movff	postdec2,printf@cp+1
 14669  00126E  0E02               	movlw	2
 14670  001270  0100               	movlb	0	; () banked
 14671  001272  27A1               	addwf	printf@ap& (0+255),f,b
 14672  001274  0E00               	movlw	0
 14673  001276  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 14674                           
 14675                           ; BSR set to: 0
 14676                           ;doprnt.c: 740: if(!cp)
 14677  001278  0100               	movlb	0	; () banked
 14678  00127A  519F               	movf	printf@cp& (0+255),w,b
 14679  00127C  0100               	movlb	0	; () banked
 14680  00127E  11A0               	iorwf	(printf@cp+1)& (0+255),w,b
 14681  001280  A4D8               	btfss	status,2,c
 14682  001282  D006               	goto	l5666
 14683                           
 14684                           ; BSR set to: 0
 14685                           ;doprnt.c: 741: cp = "(null)";
 14686  001284  0EB6               	movlw	low STR_120
 14687  001286  0100               	movlb	0	; () banked
 14688  001288  6F9F               	movwf	printf@cp& (0+255),b
 14689  00128A  0EFF               	movlw	high STR_120
 14690  00128C  0100               	movlb	0	; () banked
 14691  00128E  6FA0               	movwf	(printf@cp+1)& (0+255),b
 14692  001290                     l5666:
 14693                           
 14694                           ; BSR set to: 0
 14695                           ;doprnt.c: 745: len = 0;
 14696  001290  0E00               	movlw	0
 14697  001292  0100               	movlb	0	; () banked
 14698  001294  6FA4               	movwf	(printf@len+1)& (0+255),b
 14699  001296  0E00               	movlw	0
 14700  001298  6FA3               	movwf	printf@len& (0+255),b
 14701                           
 14702                           ;doprnt.c: 746: while(cp[len])
 14703  00129A  D003               	goto	l5670
 14704  00129C                     l5668:
 14705                           
 14706                           ;doprnt.c: 747: len++;
 14707  00129C  0100               	movlb	0	; () banked
 14708  00129E  4BA3               	infsnz	printf@len& (0+255),f,b
 14709  0012A0  2BA4               	incf	(printf@len+1)& (0+255),f,b
 14710  0012A2                     l5670:
 14711                           
 14712                           ; BSR set to: 0
 14713  0012A2  0100               	movlb	0	; () banked
 14714  0012A4  51A3               	movf	printf@len& (0+255),w,b
 14715  0012A6  0100               	movlb	0	; () banked
 14716  0012A8  259F               	addwf	printf@cp& (0+255),w,b
 14717  0012AA  0100               	movlb	0	; () banked
 14718  0012AC  6F9A               	movwf	??_printf& (0+255),b
 14719  0012AE  0100               	movlb	0	; () banked
 14720  0012B0  51A4               	movf	(printf@len+1)& (0+255),w,b
 14721  0012B2  0100               	movlb	0	; () banked
 14722  0012B4  21A0               	addwfc	(printf@cp+1)& (0+255),w,b
 14723  0012B6  0100               	movlb	0	; () banked
 14724  0012B8  6F9B               	movwf	(??_printf+1)& (0+255),b
 14725  0012BA  C09A  FFF6         	movff	??_printf,tblptrl
 14726  0012BE  C09B  FFF7         	movff	??_printf+1,tblptrh
 14727  0012C2  0E00               	movlw	low (__mediumconst shr (0+16))
 14728  0012C4  6EF8               	movwf	tblptru,c
 14729  0012C6  0E0F               	movlw	(high __ramtop+-1)
 14730  0012C8  64F7               	cpfsgt	tblptrh,c
 14731  0012CA  D003               	bra	u4067
 14732  0012CC  0008               	tblrd		*
 14733  0012CE  50F5               	movf	tablat,w,c
 14734  0012D0  D005               	bra	u4060
 14735  0012D2                     u4067:
 14736  0012D2  CFF6 FFE9          	movff	tblptrl,fsr0l
 14737  0012D6  CFF7 FFEA          	movff	tblptrh,fsr0h
 14738  0012DA  50EF               	movf	indf0,w,c
 14739  0012DC                     u4060:
 14740  0012DC  0900               	iorlw	0
 14741  0012DE  A4D8               	btfss	status,2,c
 14742  0012E0  D7DD               	goto	l5668
 14743                           
 14744                           ;doprnt.c: 757: if(width > len)
 14745  0012E2  0100               	movlb	0	; () banked
 14746  0012E4  51A9               	movf	printf@width& (0+255),w,b
 14747  0012E6  0100               	movlb	0	; () banked
 14748  0012E8  5DA3               	subwf	printf@len& (0+255),w,b
 14749  0012EA  0100               	movlb	0	; () banked
 14750  0012EC  51AA               	movf	(printf@width+1)& (0+255),w,b
 14751  0012EE  0100               	movlb	0	; () banked
 14752  0012F0  59A4               	subwfb	(printf@len+1)& (0+255),w,b
 14753  0012F2  B0D8               	btfsc	status,0,c
 14754  0012F4  D009               	goto	l5676
 14755                           
 14756                           ; BSR set to: 0
 14757                           ;doprnt.c: 758: width -= len;
 14758  0012F6  0100               	movlb	0	; () banked
 14759  0012F8  51A3               	movf	printf@len& (0+255),w,b
 14760  0012FA  0100               	movlb	0	; () banked
 14761  0012FC  5FA9               	subwf	printf@width& (0+255),f,b
 14762  0012FE  0100               	movlb	0	; () banked
 14763  001300  51A4               	movf	(printf@len+1)& (0+255),w,b
 14764  001302  0100               	movlb	0	; () banked
 14765  001304  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
 14766  001306  D009               	goto	l5680
 14767  001308                     l5676:
 14768                           
 14769                           ; BSR set to: 0
 14770                           ;doprnt.c: 759: else
 14771                           ;doprnt.c: 760: width = 0;
 14772  001308  0E00               	movlw	0
 14773  00130A  0100               	movlb	0	; () banked
 14774  00130C  6FAA               	movwf	(printf@width+1)& (0+255),b
 14775  00130E  0E00               	movlw	0
 14776  001310  6FA9               	movwf	printf@width& (0+255),b
 14777                           
 14778                           ; BSR set to: 0
 14779                           ;doprnt.c: 764: while(width--)
 14780  001312  D003               	goto	l5680
 14781  001314                     l5678:
 14782                           
 14783                           ; BSR set to: 0
 14784                           ;doprnt.c: 765: (putch(' ') );
 14785  001314  0E20               	movlw	32
 14786  001316  EC34  F025         	call	_putch
 14787  00131A                     l5680:
 14788  00131A  0100               	movlb	0	; () banked
 14789  00131C  07A9               	decf	printf@width& (0+255),f,b
 14790  00131E  A0D8               	btfss	status,0,c
 14791  001320  07AA               	decf	(printf@width+1)& (0+255),f,b
 14792  001322  0100               	movlb	0	; () banked
 14793  001324  29A9               	incf	printf@width& (0+255),w,b
 14794  001326  E1F6               	bnz	l5678
 14795  001328  0100               	movlb	0	; () banked
 14796  00132A  29AA               	incf	(printf@width+1)& (0+255),w,b
 14797  00132C  B4D8               	btfsc	status,2,c
 14798  00132E  D017               	goto	l5686
 14799  001330  D7F1               	goto	l5678
 14800  001332                     l5682:
 14801                           
 14802                           ; BSR set to: 0
 14803                           ;doprnt.c: 768: (putch(*cp++) );
 14804  001332  C09F  FFF6         	movff	printf@cp,tblptrl
 14805  001336  C0A0  FFF7         	movff	printf@cp+1,tblptrh
 14806  00133A  0E00               	movlw	low (__mediumconst shr (0+16))
 14807  00133C  6EF8               	movwf	tblptru,c
 14808  00133E  0E0F               	movlw	(high __ramtop+-1)
 14809  001340  64F7               	cpfsgt	tblptrh,c
 14810  001342  D003               	bra	u4107
 14811  001344  0008               	tblrd		*
 14812  001346  50F5               	movf	tablat,w,c
 14813  001348  D005               	bra	u4100
 14814  00134A                     u4107:
 14815  00134A  CFF6 FFE9          	movff	tblptrl,fsr0l
 14816  00134E  CFF7 FFEA          	movff	tblptrh,fsr0h
 14817  001352  50EF               	movf	indf0,w,c
 14818  001354                     u4100:
 14819  001354  EC34  F025         	call	_putch
 14820  001358  0100               	movlb	0	; () banked
 14821  00135A  4B9F               	infsnz	printf@cp& (0+255),f,b
 14822  00135C  2BA0               	incf	(printf@cp+1)& (0+255),f,b
 14823  00135E                     l5686:
 14824                           
 14825                           ; BSR set to: 0
 14826  00135E  0100               	movlb	0	; () banked
 14827  001360  07A3               	decf	printf@len& (0+255),f,b
 14828  001362  A0D8               	btfss	status,0,c
 14829  001364  07A4               	decf	(printf@len+1)& (0+255),f,b
 14830  001366  0100               	movlb	0	; () banked
 14831  001368  29A3               	incf	printf@len& (0+255),w,b
 14832  00136A  E1E3               	bnz	l5682
 14833  00136C  0100               	movlb	0	; () banked
 14834  00136E  29A4               	incf	(printf@len+1)& (0+255),w,b
 14835  001370  B4D8               	btfsc	status,2,c
 14836  001372  D10A               	goto	l5764
 14837  001374  D7DE               	goto	l5682
 14838  001376                     l5688:
 14839                           
 14840                           ; BSR set to: 0
 14841                           ;doprnt.c: 818: flag |= 0x40;
 14842  001376  0100               	movlb	0	; () banked
 14843  001378  8DA7               	bsf	printf@flag& (0+255),6,b
 14844                           
 14845                           ; BSR set to: 0
 14846                           ;doprnt.c: 822: }
 14847                           
 14848                           ;doprnt.c: 819: break;
 14849  00137A  D01D               	goto	l1316
 14850  00137C                     l5692:
 14851  00137C  C08E  FFF6         	movff	printf@f,tblptrl
 14852  001380  C08F  FFF7         	movff	printf@f+1,tblptrh
 14853  001384  0100               	movlb	0	; () banked
 14854  001386  4B8E               	infsnz	printf@f& (0+255),f,b
 14855  001388  2B8F               	incf	(printf@f+1)& (0+255),f,b
 14856  00138A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 14857  00138A  6AF8               	clrf	tblptru,c
 14858  00138C                     	endif
 14859  00138C                     	if	0	;tblptru may be non-zero
 14860  00138C                     	endif
 14861  00138C  0008               	tblrd		*
 14862  00138E  CFF5 F0A8          	movff	tablat,printf@c
 14863  001392  0100               	movlb	0	; () banked
 14864  001394  51A8               	movf	printf@c& (0+255),w,b
 14865                           
 14866                           ; Switch size 1, requested type "space"
 14867                           ; Number of cases is 5, Range of values is 0 to 117
 14868                           ; switch strategies available:
 14869                           ; Name         Instructions Cycles
 14870                           ; simple_byte           16     9 (average)
 14871                           ;	Chosen strategy is simple_byte
 14872  001396  0A00               	xorlw	0	; case 0
 14873  001398  B4D8               	btfsc	status,2,c
 14874  00139A  0012               	return	
 14875  00139C  0A64               	xorlw	100	; case 100
 14876  00139E  B4D8               	btfsc	status,2,c
 14877  0013A0  D00A               	goto	l1316
 14878  0013A2  0A0D               	xorlw	13	; case 105
 14879  0013A4  B4D8               	btfsc	status,2,c
 14880  0013A6  D007               	goto	l1316
 14881  0013A8  0A1A               	xorlw	26	; case 115
 14882  0013AA  B4D8               	btfsc	status,2,c
 14883  0013AC  D758               	goto	l5658
 14884  0013AE  0A06               	xorlw	6	; case 117
 14885  0013B0  B4D8               	btfsc	status,2,c
 14886  0013B2  D7E1               	goto	l5688
 14887  0013B4  D0E9               	goto	l5764
 14888  0013B6                     l1316:
 14889                           
 14890                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
 14891  0013B6  0100               	movlb	0	; () banked
 14892  0013B8  BDA7               	btfsc	printf@flag& (0+255),6,b
 14893  0013BA  D019               	goto	l5704
 14894                           
 14895                           ; BSR set to: 0
 14896                           ;doprnt.c: 1253: {
 14897                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 14898  0013BC  C0A1  FFD9         	movff	printf@ap,fsr2l
 14899  0013C0  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 14900  0013C4  CFDE F0A5          	movff	postinc2,printf@val
 14901  0013C8  CFDD F0A6          	movff	postdec2,printf@val+1
 14902                           
 14903                           ; BSR set to: 0
 14904  0013CC  0E02               	movlw	2
 14905  0013CE  0100               	movlb	0	; () banked
 14906  0013D0  27A1               	addwf	printf@ap& (0+255),f,b
 14907  0013D2  0E00               	movlw	0
 14908  0013D4  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 14909                           
 14910                           ; BSR set to: 0
 14911                           ;doprnt.c: 1261: if((int)val < 0) {
 14912  0013D6  0100               	movlb	0	; () banked
 14913  0013D8  AFA6               	btfss	(printf@val+1)& (0+255),7,b
 14914  0013DA  D016               	goto	l5708
 14915                           
 14916                           ; BSR set to: 0
 14917                           ;doprnt.c: 1262: flag |= 0x03;
 14918  0013DC  0E03               	movlw	3
 14919  0013DE  0100               	movlb	0	; () banked
 14920  0013E0  13A7               	iorwf	printf@flag& (0+255),f,b
 14921                           
 14922                           ; BSR set to: 0
 14923                           ;doprnt.c: 1263: val = -val;
 14924  0013E2  0100               	movlb	0	; () banked
 14925  0013E4  6DA5               	negf	printf@val& (0+255),b
 14926  0013E6  1FA6               	comf	(printf@val+1)& (0+255),f,b
 14927  0013E8  B0D8               	btfsc	status,0,c
 14928  0013EA  2BA6               	incf	(printf@val+1)& (0+255),f,b
 14929                           
 14930                           ; BSR set to: 0
 14931                           ;doprnt.c: 1264: }
 14932                           ;doprnt.c: 1266: }
 14933  0013EC  D00D               	goto	l5708
 14934  0013EE                     l5704:
 14935                           
 14936                           ; BSR set to: 0
 14937                           ;doprnt.c: 1268: else
 14938                           ;doprnt.c: 1273: {
 14939                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 14940  0013EE  C0A1  FFD9         	movff	printf@ap,fsr2l
 14941  0013F2  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 14942  0013F6  CFDE F0A5          	movff	postinc2,printf@val
 14943  0013FA  CFDD F0A6          	movff	postdec2,printf@val+1
 14944                           
 14945                           ; BSR set to: 0
 14946  0013FE  0E02               	movlw	2
 14947  001400  0100               	movlb	0	; () banked
 14948  001402  27A1               	addwf	printf@ap& (0+255),f,b
 14949  001404  0E00               	movlw	0
 14950  001406  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 14951  001408                     l5708:
 14952                           
 14953                           ; BSR set to: 0
 14954                           ;doprnt.c: 1287: }
 14955                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 14956  001408  0E01               	movlw	1
 14957  00140A  0100               	movlb	0	; () banked
 14958  00140C  6FA8               	movwf	printf@c& (0+255),b
 14959  00140E                     l5710:
 14960                           
 14961                           ; BSR set to: 0
 14962  00140E  0E05               	movlw	5
 14963  001410  0100               	movlb	0	; () banked
 14964  001412  19A8               	xorwf	printf@c& (0+255),w,b
 14965  001414  B4D8               	btfsc	status,2,c
 14966  001416  D019               	goto	l5722
 14967                           
 14968                           ; BSR set to: 0
 14969                           ;doprnt.c: 1306: if(val < dpowers[c])
 14970                           
 14971                           ; BSR set to: 0
 14972                           
 14973                           ; BSR set to: 0
 14974  001418  0100               	movlb	0	; () banked
 14975  00141A  51A8               	movf	printf@c& (0+255),w,b
 14976  00141C  0D02               	mullw	2
 14977  00141E  0E12               	movlw	low _dpowers
 14978  001420  24F3               	addwf	prodl,w,c
 14979  001422  6EF6               	movwf	tblptrl,c
 14980  001424  0EFB               	movlw	high _dpowers
 14981  001426  20F4               	addwfc	prodh,w,c
 14982  001428  6EF7               	movwf	tblptrh,c
 14983  00142A                     	if	1	;There are 3 active tblptr bytes
 14984  00142A  6AF8               	clrf	tblptru,c
 14985  00142C  0E00               	movlw	low (__mediumconst shr (0+16))
 14986  00142E  22F8               	addwfc	tblptru,f,c
 14987  001430                     	endif
 14988  001430  0009               	tblrd		*+
 14989  001432  50F5               	movf	tablat,w,c
 14990  001434  0100               	movlb	0	; () banked
 14991  001436  5DA5               	subwf	printf@val& (0+255),w,b
 14992  001438  0009               	tblrd		*+
 14993  00143A  50F5               	movf	tablat,w,c
 14994  00143C  0100               	movlb	0	; () banked
 14995  00143E  59A6               	subwfb	(printf@val+1)& (0+255),w,b
 14996  001440  A0D8               	btfss	status,0,c
 14997  001442  D003               	goto	l5722
 14998                           
 14999                           ; BSR set to: 0
 15000                           
 15001                           ; BSR set to: 0
 15002                           
 15003                           ; BSR set to: 0
 15004                           ;doprnt.c: 1307: break;
 15005  001444  0100               	movlb	0	; () banked
 15006  001446  2BA8               	incf	printf@c& (0+255),f,b
 15007  001448  D7E2               	goto	l5710
 15008  00144A                     l5722:
 15009                           
 15010                           ; BSR set to: 0
 15011                           ;doprnt.c: 1345: if(width && flag & 0x03)
 15012  00144A  0100               	movlb	0	; () banked
 15013  00144C  51A9               	movf	printf@width& (0+255),w,b
 15014  00144E  0100               	movlb	0	; () banked
 15015  001450  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 15016  001452  B4D8               	btfsc	status,2,c
 15017  001454  D00B               	goto	l5728
 15018                           
 15019                           ; BSR set to: 0
 15020  001456  C0A7  F09A         	movff	printf@flag,??_printf
 15021  00145A  0E03               	movlw	3
 15022  00145C  0100               	movlb	0	; () banked
 15023  00145E  179A               	andwf	??_printf& (0+255),f,b
 15024  001460  B4D8               	btfsc	status,2,c
 15025  001462  D004               	goto	l5728
 15026                           
 15027                           ; BSR set to: 0
 15028                           ;doprnt.c: 1346: width--;
 15029  001464  0100               	movlb	0	; () banked
 15030  001466  07A9               	decf	printf@width& (0+255),f,b
 15031  001468  A0D8               	btfss	status,0,c
 15032  00146A  07AA               	decf	(printf@width+1)& (0+255),f,b
 15033  00146C                     l5728:
 15034                           
 15035                           ; BSR set to: 0
 15036                           ;doprnt.c: 1381: if(width > c)
 15037  00146C  0E80               	movlw	128
 15038  00146E  0100               	movlb	0	; () banked
 15039  001470  BFA8               	btfsc	printf@c& (0+255),7,b
 15040  001472  0E7F               	movlw	127
 15041  001474  0100               	movlb	0	; () banked
 15042  001476  6F9A               	movwf	??_printf& (0+255),b
 15043  001478  0100               	movlb	0	; () banked
 15044  00147A  51A9               	movf	printf@width& (0+255),w,b
 15045  00147C  0100               	movlb	0	; () banked
 15046  00147E  5DA8               	subwf	printf@c& (0+255),w,b
 15047  001480  0100               	movlb	0	; () banked
 15048  001482  51AA               	movf	(printf@width+1)& (0+255),w,b
 15049  001484  0A80               	xorlw	128
 15050  001486  0100               	movlb	0	; () banked
 15051  001488  599A               	subwfb	??_printf& (0+255),w,b
 15052  00148A  B0D8               	btfsc	status,0,c
 15053  00148C  D00B               	goto	l5732
 15054                           
 15055                           ; BSR set to: 0
 15056                           ;doprnt.c: 1382: width -= c;
 15057  00148E  0100               	movlb	0	; () banked
 15058  001490  51A8               	movf	printf@c& (0+255),w,b
 15059  001492  0100               	movlb	0	; () banked
 15060  001494  5FA9               	subwf	printf@width& (0+255),f,b
 15061  001496  0E00               	movlw	0
 15062  001498  0100               	movlb	0	; () banked
 15063  00149A  BFA8               	btfsc	printf@c& (0+255),7,b
 15064  00149C  0EFF               	movlw	255
 15065  00149E  0100               	movlb	0	; () banked
 15066  0014A0  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
 15067  0014A2  D005               	goto	l5734
 15068  0014A4                     l5732:
 15069                           
 15070                           ; BSR set to: 0
 15071                           ;doprnt.c: 1383: else
 15072                           ;doprnt.c: 1384: width = 0;
 15073  0014A4  0E00               	movlw	0
 15074  0014A6  0100               	movlb	0	; () banked
 15075  0014A8  6FAA               	movwf	(printf@width+1)& (0+255),b
 15076  0014AA  0E00               	movlw	0
 15077  0014AC  6FA9               	movwf	printf@width& (0+255),b
 15078  0014AE                     l5734:
 15079                           
 15080                           ; BSR set to: 0
 15081                           ;doprnt.c: 1387: if(flag & 0x04) {
 15082  0014AE  0100               	movlb	0	; () banked
 15083  0014B0  A5A7               	btfss	printf@flag& (0+255),2,b
 15084  0014B2  D018               	goto	l5746
 15085                           
 15086                           ; BSR set to: 0
 15087                           ;doprnt.c: 1392: if(flag & 0x03)
 15088  0014B4  C0A7  F09A         	movff	printf@flag,??_printf
 15089  0014B8  0E03               	movlw	3
 15090  0014BA  0100               	movlb	0	; () banked
 15091  0014BC  179A               	andwf	??_printf& (0+255),f,b
 15092  0014BE  B4D8               	btfsc	status,2,c
 15093  0014C0  D003               	goto	l5740
 15094                           
 15095                           ; BSR set to: 0
 15096                           ;doprnt.c: 1393: (putch('-') );
 15097  0014C2  0E2D               	movlw	45
 15098  0014C4  EC34  F025         	call	_putch
 15099  0014C8                     l5740:
 15100                           
 15101                           ;doprnt.c: 1415: if(width)
 15102  0014C8  0100               	movlb	0	; () banked
 15103  0014CA  51A9               	movf	printf@width& (0+255),w,b
 15104  0014CC  0100               	movlb	0	; () banked
 15105  0014CE  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 15106  0014D0  B4D8               	btfsc	status,2,c
 15107  0014D2  D025               	goto	l5756
 15108                           
 15109                           ; BSR set to: 0
 15110                           ;doprnt.c: 1417: (putch('0') );
 15111                           
 15112                           ; BSR set to: 0
 15113                           
 15114                           ;doprnt.c: 1416: do
 15115  0014D4  0E30               	movlw	48
 15116  0014D6  EC34  F025         	call	_putch
 15117                           
 15118                           ;doprnt.c: 1418: while(--width);
 15119  0014DA  0100               	movlb	0	; () banked
 15120  0014DC  07A9               	decf	printf@width& (0+255),f,b
 15121  0014DE  A0D8               	btfss	status,0,c
 15122  0014E0  07AA               	decf	(printf@width+1)& (0+255),f,b
 15123  0014E2  D7F2               	goto	l5740
 15124  0014E4                     l5746:
 15125                           
 15126                           ; BSR set to: 0
 15127                           ;doprnt.c: 1422: {
 15128                           ;doprnt.c: 1424: if(width
 15129                           ;doprnt.c: 1428: )
 15130  0014E4  0100               	movlb	0	; () banked
 15131  0014E6  51A9               	movf	printf@width& (0+255),w,b
 15132  0014E8  0100               	movlb	0	; () banked
 15133  0014EA  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 15134  0014EC  B4D8               	btfsc	status,2,c
 15135  0014EE  D00D               	goto	l5752
 15136  0014F0                     l5748:
 15137                           
 15138                           ; BSR set to: 0
 15139                           ;doprnt.c: 1430: (putch(' ') );
 15140  0014F0  0E20               	movlw	32
 15141  0014F2  EC34  F025         	call	_putch
 15142                           
 15143                           ;doprnt.c: 1431: while(--width);
 15144  0014F6  0100               	movlb	0	; () banked
 15145  0014F8  07A9               	decf	printf@width& (0+255),f,b
 15146  0014FA  A0D8               	btfss	status,0,c
 15147  0014FC  07AA               	decf	(printf@width+1)& (0+255),f,b
 15148  0014FE  0100               	movlb	0	; () banked
 15149  001500  51A9               	movf	printf@width& (0+255),w,b
 15150  001502  0100               	movlb	0	; () banked
 15151  001504  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 15152  001506  A4D8               	btfss	status,2,c
 15153  001508  D7F3               	goto	l5748
 15154  00150A                     l5752:
 15155                           
 15156                           ; BSR set to: 0
 15157                           ;doprnt.c: 1438: if(flag & 0x03)
 15158  00150A  C0A7  F09A         	movff	printf@flag,??_printf
 15159  00150E  0E03               	movlw	3
 15160  001510  0100               	movlb	0	; () banked
 15161  001512  179A               	andwf	??_printf& (0+255),f,b
 15162  001514  B4D8               	btfsc	status,2,c
 15163  001516  D003               	goto	l5756
 15164                           
 15165                           ; BSR set to: 0
 15166                           ;doprnt.c: 1439: (putch('-') );
 15167  001518  0E2D               	movlw	45
 15168  00151A  EC34  F025         	call	_putch
 15169  00151E                     l5756:
 15170                           
 15171                           ;doprnt.c: 1469: }
 15172                           ;doprnt.c: 1472: prec = c;
 15173  00151E  C0A8  F09E         	movff	printf@c,printf@prec
 15174                           
 15175                           ;doprnt.c: 1474: while(prec--) {
 15176  001522  D02C               	goto	l5762
 15177  001524                     l5758:
 15178                           
 15179                           ;doprnt.c: 1478: {
 15180                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 15181  001524  0100               	movlb	0	; () banked
 15182  001526  519E               	movf	printf@prec& (0+255),w,b
 15183  001528  0D02               	mullw	2
 15184  00152A  0E12               	movlw	low _dpowers
 15185  00152C  24F3               	addwf	prodl,w,c
 15186  00152E  6EF6               	movwf	tblptrl,c
 15187  001530  0EFB               	movlw	high _dpowers
 15188  001532  20F4               	addwfc	prodh,w,c
 15189  001534  6EF7               	movwf	tblptrh,c
 15190  001536                     	if	1	;There are 3 active tblptr bytes
 15191  001536  6AF8               	clrf	tblptru,c
 15192  001538  0E00               	movlw	low (__mediumconst shr (0+16))
 15193  00153A  22F8               	addwfc	tblptru,f,c
 15194  00153C                     	endif
 15195  00153C  0009               	tblrd		*+
 15196  00153E  CFF5 F082          	movff	tablat,___lwdiv@divisor
 15197  001542  000A               	tblrd		*-
 15198  001544  CFF5 F083          	movff	tablat,___lwdiv@divisor+1
 15199  001548  C0A5  F080         	movff	printf@val,___lwdiv@dividend
 15200  00154C  C0A6  F081         	movff	printf@val+1,___lwdiv@dividend+1
 15201  001550  EC28  F01F         	call	___lwdiv	;wreg free
 15202  001554  C080  F087         	movff	?___lwdiv,___lwmod@dividend
 15203  001558  C081  F088         	movff	?___lwdiv+1,___lwmod@dividend+1
 15204  00155C  0E00               	movlw	0
 15205  00155E  0100               	movlb	0	; () banked
 15206  001560  6F8A               	movwf	(___lwmod@divisor+1)& (0+255),b
 15207  001562  0E0A               	movlw	10
 15208  001564  6F89               	movwf	___lwmod@divisor& (0+255),b
 15209  001566  EC7B  F020         	call	___lwmod	;wreg free
 15210  00156A  0100               	movlb	0	; () banked
 15211  00156C  5187               	movf	?___lwmod& (0+255),w,b
 15212  00156E  0F30               	addlw	48
 15213  001570  0100               	movlb	0	; () banked
 15214  001572  6FA8               	movwf	printf@c& (0+255),b
 15215                           
 15216                           ; BSR set to: 0
 15217                           ;doprnt.c: 1523: }
 15218                           ;doprnt.c: 1524: (putch(c) );
 15219  001574  0100               	movlb	0	; () banked
 15220  001576  51A8               	movf	printf@c& (0+255),w,b
 15221  001578  EC34  F025         	call	_putch
 15222  00157C                     l5762:
 15223  00157C  0100               	movlb	0	; () banked
 15224  00157E  079E               	decf	printf@prec& (0+255),f,b
 15225  001580  0100               	movlb	0	; () banked
 15226  001582  299E               	incf	printf@prec& (0+255),w,b
 15227  001584  A4D8               	btfss	status,2,c
 15228  001586  D7CE               	goto	l5758
 15229  001588                     l5764:
 15230  001588  C08E  FFF6         	movff	printf@f,tblptrl
 15231  00158C  C08F  FFF7         	movff	printf@f+1,tblptrh
 15232  001590  0100               	movlb	0	; () banked
 15233  001592  4B8E               	infsnz	printf@f& (0+255),f,b
 15234  001594  2B8F               	incf	(printf@f+1)& (0+255),f,b
 15235  001596                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 15236  001596  6AF8               	clrf	tblptru,c
 15237  001598                     	endif
 15238  001598                     	if	0	;tblptru may be non-zero
 15239  001598                     	endif
 15240  001598  0008               	tblrd		*
 15241  00159A  CFF5 F0A8          	movff	tablat,printf@c
 15242  00159E  0100               	movlb	0	; () banked
 15243  0015A0  51A8               	movf	printf@c& (0+255),w,b
 15244  0015A2  B4D8               	btfsc	status,2,c
 15245  0015A4  0012               	return	
 15246  0015A6  D5EB               	goto	l5634
 15247  0015A8                     __end_of_printf:
 15248                           	opt stack 0
 15249                           tblptru	equ	0xFF8
 15250                           tblptrh	equ	0xFF7
 15251                           tblptrl	equ	0xFF6
 15252                           tablat	equ	0xFF5
 15253                           prodh	equ	0xFF4
 15254                           prodl	equ	0xFF3
 15255                           intcon	equ	0xFF2
 15256                           intcon2	equ	0xFF1
 15257                           intcon3	equ	0xFF0
 15258                           indf0	equ	0xFEF
 15259                           postinc0	equ	0xFEE
 15260                           fsr0h	equ	0xFEA
 15261                           fsr0l	equ	0xFE9
 15262                           wreg	equ	0xFE8
 15263                           postdec1	equ	0xFE5
 15264                           fsr1l	equ	0xFE1
 15265                           indf2	equ	0xFDF
 15266                           postinc2	equ	0xFDE
 15267                           postdec2	equ	0xFDD
 15268                           fsr2h	equ	0xFDA
 15269                           fsr2l	equ	0xFD9
 15270                           status	equ	0xFD8
 15271                           
 15272 ;; *************** function _putch *****************
 15273 ;; Defined at:
 15274 ;;		line 20 in file "lcd.c"
 15275 ;; Parameters:    Size  Location     Type
 15276 ;;  data            1    wreg     unsigned char 
 15277 ;; Auto vars:     Size  Location     Type
 15278 ;;  data            1    2[BANK0 ] unsigned char 
 15279 ;; Return value:  Size  Location     Type
 15280 ;;                  1    wreg      void 
 15281 ;; Registers used:
 15282 ;;		wreg, status,2, status,0, cstack
 15283 ;; Tracked objects:
 15284 ;;		On entry : 0/0
 15285 ;;		On exit  : 0/0
 15286 ;;		Unchanged: 0/0
 15287 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15288 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15289 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15290 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15291 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15292 ;;Total ram usage:        1 bytes
 15293 ;; Hardware stack levels used:    1
 15294 ;; Hardware stack levels required when called:    8
 15295 ;; This function calls:
 15296 ;;		_lcdNibble
 15297 ;; This function is called by:
 15298 ;;		_printf
 15299 ;; This function uses a non-reentrant model
 15300 ;;
 15301                           
 15302                           	psect	text52
 15303  004A68                     __ptext52:
 15304                           	opt stack 0
 15305  004A68                     _putch:
 15306                           	opt stack 18
 15307                           
 15308                           ;incstack = 0
 15309                           ;putch@data stored from wreg
 15310  004A68  0100               	movlb	0	; () banked
 15311  004A6A  6F82               	movwf	putch@data& (0+255),b
 15312                           
 15313                           ;lcd.c: 21: LATDbits.LATD2 = 1;
 15314  004A6C  848C               	bsf	3980,2,c	;volatile
 15315                           
 15316                           ;lcd.c: 22: lcdNibble(data);
 15317  004A6E  0100               	movlb	0	; () banked
 15318  004A70  5182               	movf	putch@data& (0+255),w,b
 15319  004A72  EC47  F020         	call	_lcdNibble
 15320  004A76  0012               	return		;funcret
 15321  004A78                     __end_of_putch:
 15322                           	opt stack 0
 15323                           tblptru	equ	0xFF8
 15324                           tblptrh	equ	0xFF7
 15325                           tblptrl	equ	0xFF6
 15326                           tablat	equ	0xFF5
 15327                           prodh	equ	0xFF4
 15328                           prodl	equ	0xFF3
 15329                           intcon	equ	0xFF2
 15330                           intcon2	equ	0xFF1
 15331                           intcon3	equ	0xFF0
 15332                           indf0	equ	0xFEF
 15333                           postinc0	equ	0xFEE
 15334                           fsr0h	equ	0xFEA
 15335                           fsr0l	equ	0xFE9
 15336                           wreg	equ	0xFE8
 15337                           postdec1	equ	0xFE5
 15338                           fsr1l	equ	0xFE1
 15339                           indf2	equ	0xFDF
 15340                           postinc2	equ	0xFDE
 15341                           postdec2	equ	0xFDD
 15342                           fsr2h	equ	0xFDA
 15343                           fsr2l	equ	0xFD9
 15344                           status	equ	0xFD8
 15345                           
 15346 ;; *************** function _isdigit *****************
 15347 ;; Defined at:
 15348 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 15349 ;; Parameters:    Size  Location     Type
 15350 ;;  c               1    wreg     unsigned char 
 15351 ;; Auto vars:     Size  Location     Type
 15352 ;;  c               1    2[BANK0 ] unsigned char 
 15353 ;; Return value:  Size  Location     Type
 15354 ;;		None               void
 15355 ;; Registers used:
 15356 ;;		wreg, status,2, status,0
 15357 ;; Tracked objects:
 15358 ;;		On entry : 0/0
 15359 ;;		On exit  : 0/0
 15360 ;;		Unchanged: 0/0
 15361 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15362 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15363 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15364 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15365 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15366 ;;Total ram usage:        3 bytes
 15367 ;; Hardware stack levels used:    1
 15368 ;; Hardware stack levels required when called:    7
 15369 ;; This function calls:
 15370 ;;		Nothing
 15371 ;; This function is called by:
 15372 ;;		_printf
 15373 ;; This function uses a non-reentrant model
 15374 ;;
 15375                           
 15376                           	psect	text53
 15377  0048B2                     __ptext53:
 15378                           	opt stack 0
 15379  0048B2                     _isdigit:
 15380                           	opt stack 19
 15381                           
 15382                           ;incstack = 0
 15383                           ;isdigit@c stored from wreg
 15384  0048B2  0100               	movlb	0	; () banked
 15385  0048B4  6F82               	movwf	isdigit@c& (0+255),b
 15386  0048B6  0E00               	movlw	0
 15387  0048B8  0100               	movlb	0	; () banked
 15388  0048BA  6F81               	movwf	_isdigit$1960& (0+255),b
 15389                           
 15390                           ; BSR set to: 0
 15391  0048BC  0E3A               	movlw	58
 15392  0048BE  0100               	movlb	0	; () banked
 15393  0048C0  6182               	cpfslt	isdigit@c& (0+255),b
 15394  0048C2  D007               	goto	l5482
 15395                           
 15396                           ; BSR set to: 0
 15397  0048C4  0E2F               	movlw	47
 15398  0048C6  0100               	movlb	0	; () banked
 15399  0048C8  6582               	cpfsgt	isdigit@c& (0+255),b
 15400  0048CA  D003               	goto	l5482
 15401                           
 15402                           ; BSR set to: 0
 15403  0048CC  0E01               	movlw	1
 15404  0048CE  0100               	movlb	0	; () banked
 15405  0048D0  6F81               	movwf	_isdigit$1960& (0+255),b
 15406  0048D2                     l5482:
 15407                           
 15408                           ; BSR set to: 0
 15409  0048D2  C081  F080         	movff	_isdigit$1960,??_isdigit
 15410  0048D6  0100               	movlb	0	; () banked
 15411  0048D8  3180               	rrcf	??_isdigit& (0+255),w,b
 15412  0048DA  0012               	return	
 15413  0048DC                     __end_of_isdigit:
 15414                           	opt stack 0
 15415                           tblptru	equ	0xFF8
 15416                           tblptrh	equ	0xFF7
 15417                           tblptrl	equ	0xFF6
 15418                           tablat	equ	0xFF5
 15419                           prodh	equ	0xFF4
 15420                           prodl	equ	0xFF3
 15421                           intcon	equ	0xFF2
 15422                           intcon2	equ	0xFF1
 15423                           intcon3	equ	0xFF0
 15424                           indf0	equ	0xFEF
 15425                           postinc0	equ	0xFEE
 15426                           fsr0h	equ	0xFEA
 15427                           fsr0l	equ	0xFE9
 15428                           wreg	equ	0xFE8
 15429                           postdec1	equ	0xFE5
 15430                           fsr1l	equ	0xFE1
 15431                           indf2	equ	0xFDF
 15432                           postinc2	equ	0xFDE
 15433                           postdec2	equ	0xFDD
 15434                           fsr2h	equ	0xFDA
 15435                           fsr2l	equ	0xFD9
 15436                           status	equ	0xFD8
 15437                           
 15438 ;; *************** function ___wmul *****************
 15439 ;; Defined at:
 15440 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 15441 ;; Parameters:    Size  Location     Type
 15442 ;;  multiplier      2    0[BANK0 ] unsigned int 
 15443 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 15444 ;; Auto vars:     Size  Location     Type
 15445 ;;  product         2    4[BANK0 ] unsigned int 
 15446 ;; Return value:  Size  Location     Type
 15447 ;;                  2    0[BANK0 ] unsigned int 
 15448 ;; Registers used:
 15449 ;;		wreg, status,2, status,0, prodl, prodh
 15450 ;; Tracked objects:
 15451 ;;		On entry : 0/0
 15452 ;;		On exit  : 0/0
 15453 ;;		Unchanged: 0/0
 15454 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15455 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15456 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15457 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15458 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15459 ;;Total ram usage:        6 bytes
 15460 ;; Hardware stack levels used:    1
 15461 ;; Hardware stack levels required when called:    7
 15462 ;; This function calls:
 15463 ;;		Nothing
 15464 ;; This function is called by:
 15465 ;;		_printf
 15466 ;; This function uses a non-reentrant model
 15467 ;;
 15468                           
 15469                           	psect	text54
 15470  004586                     __ptext54:
 15471                           	opt stack 0
 15472  004586                     ___wmul:
 15473                           	opt stack 19
 15474                           
 15475                           ; BSR set to: 0
 15476                           ;incstack = 0
 15477  004586  0100               	movlb	0	; () banked
 15478  004588  5180               	movf	___wmul@multiplier& (0+255),w,b
 15479  00458A  0100               	movlb	0	; () banked
 15480  00458C  0382               	mulwf	___wmul@multiplicand& (0+255),b
 15481  00458E  CFF3 F084          	movff	prodl,___wmul@product
 15482  004592  CFF4 F085          	movff	prodh,___wmul@product+1
 15483  004596  0100               	movlb	0	; () banked
 15484  004598  5180               	movf	___wmul@multiplier& (0+255),w,b
 15485  00459A  0100               	movlb	0	; () banked
 15486  00459C  0383               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 15487  00459E  50F3               	movf	prodl,w,c
 15488  0045A0  0100               	movlb	0	; () banked
 15489  0045A2  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 15490  0045A4  0100               	movlb	0	; () banked
 15491  0045A6  5181               	movf	(___wmul@multiplier+1)& (0+255),w,b
 15492  0045A8  0100               	movlb	0	; () banked
 15493  0045AA  0382               	mulwf	___wmul@multiplicand& (0+255),b
 15494  0045AC  50F3               	movf	prodl,w,c
 15495  0045AE  0100               	movlb	0	; () banked
 15496  0045B0  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 15497                           
 15498                           ; BSR set to: 0
 15499  0045B2  C084  F080         	movff	___wmul@product,?___wmul
 15500  0045B6  C085  F081         	movff	___wmul@product+1,?___wmul+1
 15501  0045BA  0012               	return	
 15502  0045BC                     __end_of___wmul:
 15503                           	opt stack 0
 15504                           tblptru	equ	0xFF8
 15505                           tblptrh	equ	0xFF7
 15506                           tblptrl	equ	0xFF6
 15507                           tablat	equ	0xFF5
 15508                           prodh	equ	0xFF4
 15509                           prodl	equ	0xFF3
 15510                           intcon	equ	0xFF2
 15511                           intcon2	equ	0xFF1
 15512                           intcon3	equ	0xFF0
 15513                           indf0	equ	0xFEF
 15514                           postinc0	equ	0xFEE
 15515                           fsr0h	equ	0xFEA
 15516                           fsr0l	equ	0xFE9
 15517                           wreg	equ	0xFE8
 15518                           postdec1	equ	0xFE5
 15519                           fsr1l	equ	0xFE1
 15520                           indf2	equ	0xFDF
 15521                           postinc2	equ	0xFDE
 15522                           postdec2	equ	0xFDD
 15523                           fsr2h	equ	0xFDA
 15524                           fsr2l	equ	0xFD9
 15525                           status	equ	0xFD8
 15526                           
 15527 ;; *************** function ___lwmod *****************
 15528 ;; Defined at:
 15529 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 15530 ;; Parameters:    Size  Location     Type
 15531 ;;  dividend        2    7[BANK0 ] unsigned int 
 15532 ;;  divisor         2    9[BANK0 ] unsigned int 
 15533 ;; Auto vars:     Size  Location     Type
 15534 ;;  counter         1   11[BANK0 ] unsigned char 
 15535 ;; Return value:  Size  Location     Type
 15536 ;;                  2    7[BANK0 ] unsigned int 
 15537 ;; Registers used:
 15538 ;;		wreg, status,2, status,0
 15539 ;; Tracked objects:
 15540 ;;		On entry : 0/0
 15541 ;;		On exit  : 0/0
 15542 ;;		Unchanged: 0/0
 15543 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15544 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15545 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15546 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15547 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15548 ;;Total ram usage:        5 bytes
 15549 ;; Hardware stack levels used:    1
 15550 ;; Hardware stack levels required when called:    7
 15551 ;; This function calls:
 15552 ;;		Nothing
 15553 ;; This function is called by:
 15554 ;;		_printf
 15555 ;; This function uses a non-reentrant model
 15556 ;;
 15557                           
 15558                           	psect	text55
 15559  0040F6                     __ptext55:
 15560                           	opt stack 0
 15561  0040F6                     ___lwmod:
 15562                           	opt stack 19
 15563                           
 15564                           ; BSR set to: 0
 15565                           ;incstack = 0
 15566  0040F6  0100               	movlb	0	; () banked
 15567  0040F8  5189               	movf	___lwmod@divisor& (0+255),w,b
 15568  0040FA  0100               	movlb	0	; () banked
 15569  0040FC  118A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
 15570  0040FE  B4D8               	btfsc	status,2,c
 15571  004100  D026               	goto	l1773
 15572                           
 15573                           ; BSR set to: 0
 15574  004102  0E01               	movlw	1
 15575  004104  0100               	movlb	0	; () banked
 15576  004106  6F8B               	movwf	___lwmod@counter& (0+255),b
 15577  004108  D006               	goto	l5520
 15578  00410A                     l5518:
 15579                           
 15580                           ; BSR set to: 0
 15581  00410A  0100               	movlb	0	; () banked
 15582  00410C  90D8               	bcf	status,0,c
 15583  00410E  3789               	rlcf	___lwmod@divisor& (0+255),f,b
 15584  004110  378A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 15585  004112  0100               	movlb	0	; () banked
 15586  004114  2B8B               	incf	___lwmod@counter& (0+255),f,b
 15587  004116                     l5520:
 15588                           
 15589                           ; BSR set to: 0
 15590  004116  0100               	movlb	0	; () banked
 15591  004118  AF8A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 15592  00411A  D7F7               	goto	l5518
 15593  00411C                     l5522:
 15594                           
 15595                           ; BSR set to: 0
 15596  00411C  0100               	movlb	0	; () banked
 15597  00411E  5189               	movf	___lwmod@divisor& (0+255),w,b
 15598  004120  0100               	movlb	0	; () banked
 15599  004122  5D87               	subwf	___lwmod@dividend& (0+255),w,b
 15600  004124  0100               	movlb	0	; () banked
 15601  004126  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 15602  004128  0100               	movlb	0	; () banked
 15603  00412A  5988               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 15604  00412C  A0D8               	btfss	status,0,c
 15605  00412E  D008               	goto	l5526
 15606                           
 15607                           ; BSR set to: 0
 15608  004130  0100               	movlb	0	; () banked
 15609  004132  5189               	movf	___lwmod@divisor& (0+255),w,b
 15610  004134  0100               	movlb	0	; () banked
 15611  004136  5F87               	subwf	___lwmod@dividend& (0+255),f,b
 15612  004138  0100               	movlb	0	; () banked
 15613  00413A  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 15614  00413C  0100               	movlb	0	; () banked
 15615  00413E  5B88               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 15616  004140                     l5526:
 15617                           
 15618                           ; BSR set to: 0
 15619  004140  0100               	movlb	0	; () banked
 15620  004142  90D8               	bcf	status,0,c
 15621  004144  338A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 15622  004146  3389               	rrcf	___lwmod@divisor& (0+255),f,b
 15623                           
 15624                           ; BSR set to: 0
 15625  004148  0100               	movlb	0	; () banked
 15626  00414A  2F8B               	decfsz	___lwmod@counter& (0+255),f,b
 15627  00414C  D7E7               	goto	l5522
 15628  00414E                     l1773:
 15629                           
 15630                           ; BSR set to: 0
 15631  00414E  C087  F087         	movff	___lwmod@dividend,?___lwmod
 15632  004152  C088  F088         	movff	___lwmod@dividend+1,?___lwmod+1
 15633                           
 15634                           ; BSR set to: 0
 15635  004156  0012               	return		;funcret
 15636  004158                     __end_of___lwmod:
 15637                           	opt stack 0
 15638                           tblptru	equ	0xFF8
 15639                           tblptrh	equ	0xFF7
 15640                           tblptrl	equ	0xFF6
 15641                           tablat	equ	0xFF5
 15642                           prodh	equ	0xFF4
 15643                           prodl	equ	0xFF3
 15644                           intcon	equ	0xFF2
 15645                           intcon2	equ	0xFF1
 15646                           intcon3	equ	0xFF0
 15647                           indf0	equ	0xFEF
 15648                           postinc0	equ	0xFEE
 15649                           fsr0h	equ	0xFEA
 15650                           fsr0l	equ	0xFE9
 15651                           wreg	equ	0xFE8
 15652                           postdec1	equ	0xFE5
 15653                           fsr1l	equ	0xFE1
 15654                           indf2	equ	0xFDF
 15655                           postinc2	equ	0xFDE
 15656                           postdec2	equ	0xFDD
 15657                           fsr2h	equ	0xFDA
 15658                           fsr2l	equ	0xFD9
 15659                           status	equ	0xFD8
 15660                           
 15661 ;; *************** function ___lwdiv *****************
 15662 ;; Defined at:
 15663 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 15664 ;; Parameters:    Size  Location     Type
 15665 ;;  dividend        2    0[BANK0 ] unsigned int 
 15666 ;;  divisor         2    2[BANK0 ] unsigned int 
 15667 ;; Auto vars:     Size  Location     Type
 15668 ;;  quotient        2    4[BANK0 ] unsigned int 
 15669 ;;  counter         1    6[BANK0 ] unsigned char 
 15670 ;; Return value:  Size  Location     Type
 15671 ;;                  2    0[BANK0 ] unsigned int 
 15672 ;; Registers used:
 15673 ;;		wreg, status,2, status,0
 15674 ;; Tracked objects:
 15675 ;;		On entry : 0/0
 15676 ;;		On exit  : 0/0
 15677 ;;		Unchanged: 0/0
 15678 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15679 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15680 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15681 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15682 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15683 ;;Total ram usage:        7 bytes
 15684 ;; Hardware stack levels used:    1
 15685 ;; Hardware stack levels required when called:    7
 15686 ;; This function calls:
 15687 ;;		Nothing
 15688 ;; This function is called by:
 15689 ;;		_printf
 15690 ;; This function uses a non-reentrant model
 15691 ;;
 15692                           
 15693                           	psect	text56
 15694  003E50                     __ptext56:
 15695                           	opt stack 0
 15696  003E50                     ___lwdiv:
 15697                           	opt stack 19
 15698                           
 15699                           ; BSR set to: 0
 15700                           ;incstack = 0
 15701  003E50  0E00               	movlw	0
 15702  003E52  0100               	movlb	0	; () banked
 15703  003E54  6F85               	movwf	(___lwdiv@quotient+1)& (0+255),b
 15704  003E56  0E00               	movlw	0
 15705  003E58  6F84               	movwf	___lwdiv@quotient& (0+255),b
 15706                           
 15707                           ; BSR set to: 0
 15708  003E5A  0100               	movlb	0	; () banked
 15709  003E5C  5182               	movf	___lwdiv@divisor& (0+255),w,b
 15710  003E5E  0100               	movlb	0	; () banked
 15711  003E60  1183               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
 15712  003E62  B4D8               	btfsc	status,2,c
 15713  003E64  D02C               	goto	l1763
 15714                           
 15715                           ; BSR set to: 0
 15716  003E66  0E01               	movlw	1
 15717  003E68  0100               	movlb	0	; () banked
 15718  003E6A  6F86               	movwf	___lwdiv@counter& (0+255),b
 15719  003E6C  D006               	goto	l5500
 15720  003E6E                     l5498:
 15721                           
 15722                           ; BSR set to: 0
 15723  003E6E  0100               	movlb	0	; () banked
 15724  003E70  90D8               	bcf	status,0,c
 15725  003E72  3782               	rlcf	___lwdiv@divisor& (0+255),f,b
 15726  003E74  3783               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 15727  003E76  0100               	movlb	0	; () banked
 15728  003E78  2B86               	incf	___lwdiv@counter& (0+255),f,b
 15729  003E7A                     l5500:
 15730                           
 15731                           ; BSR set to: 0
 15732  003E7A  0100               	movlb	0	; () banked
 15733  003E7C  AF83               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 15734  003E7E  D7F7               	goto	l5498
 15735  003E80                     l5502:
 15736                           
 15737                           ; BSR set to: 0
 15738  003E80  0100               	movlb	0	; () banked
 15739  003E82  90D8               	bcf	status,0,c
 15740  003E84  3784               	rlcf	___lwdiv@quotient& (0+255),f,b
 15741  003E86  3785               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 15742                           
 15743                           ; BSR set to: 0
 15744  003E88  0100               	movlb	0	; () banked
 15745  003E8A  5182               	movf	___lwdiv@divisor& (0+255),w,b
 15746  003E8C  0100               	movlb	0	; () banked
 15747  003E8E  5D80               	subwf	___lwdiv@dividend& (0+255),w,b
 15748  003E90  0100               	movlb	0	; () banked
 15749  003E92  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 15750  003E94  0100               	movlb	0	; () banked
 15751  003E96  5981               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 15752  003E98  A0D8               	btfss	status,0,c
 15753  003E9A  D00A               	goto	l5510
 15754                           
 15755                           ; BSR set to: 0
 15756  003E9C  0100               	movlb	0	; () banked
 15757  003E9E  5182               	movf	___lwdiv@divisor& (0+255),w,b
 15758  003EA0  0100               	movlb	0	; () banked
 15759  003EA2  5F80               	subwf	___lwdiv@dividend& (0+255),f,b
 15760  003EA4  0100               	movlb	0	; () banked
 15761  003EA6  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 15762  003EA8  0100               	movlb	0	; () banked
 15763  003EAA  5B81               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 15764                           
 15765                           ; BSR set to: 0
 15766  003EAC  0100               	movlb	0	; () banked
 15767  003EAE  8184               	bsf	___lwdiv@quotient& (0+255),0,b
 15768  003EB0                     l5510:
 15769                           
 15770                           ; BSR set to: 0
 15771  003EB0  0100               	movlb	0	; () banked
 15772  003EB2  90D8               	bcf	status,0,c
 15773  003EB4  3383               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 15774  003EB6  3382               	rrcf	___lwdiv@divisor& (0+255),f,b
 15775                           
 15776                           ; BSR set to: 0
 15777  003EB8  0100               	movlb	0	; () banked
 15778  003EBA  2F86               	decfsz	___lwdiv@counter& (0+255),f,b
 15779  003EBC  D7E1               	goto	l5502
 15780  003EBE                     l1763:
 15781                           
 15782                           ; BSR set to: 0
 15783  003EBE  C084  F080         	movff	___lwdiv@quotient,?___lwdiv
 15784  003EC2  C085  F081         	movff	___lwdiv@quotient+1,?___lwdiv+1
 15785                           
 15786                           ; BSR set to: 0
 15787  003EC6  0012               	return		;funcret
 15788  003EC8                     __end_of___lwdiv:
 15789                           	opt stack 0
 15790                           tblptru	equ	0xFF8
 15791                           tblptrh	equ	0xFF7
 15792                           tblptrl	equ	0xFF6
 15793                           tablat	equ	0xFF5
 15794                           prodh	equ	0xFF4
 15795                           prodl	equ	0xFF3
 15796                           intcon	equ	0xFF2
 15797                           intcon2	equ	0xFF1
 15798                           intcon3	equ	0xFF0
 15799                           indf0	equ	0xFEF
 15800                           postinc0	equ	0xFEE
 15801                           fsr0h	equ	0xFEA
 15802                           fsr0l	equ	0xFE9
 15803                           wreg	equ	0xFE8
 15804                           postdec1	equ	0xFE5
 15805                           fsr1l	equ	0xFE1
 15806                           indf2	equ	0xFDF
 15807                           postinc2	equ	0xFDE
 15808                           postdec2	equ	0xFDD
 15809                           fsr2h	equ	0xFDA
 15810                           fsr2l	equ	0xFD9
 15811                           status	equ	0xFD8
 15812                           
 15813 ;; *************** function _lcdInst *****************
 15814 ;; Defined at:
 15815 ;;		line 15 in file "lcd.c"
 15816 ;; Parameters:    Size  Location     Type
 15817 ;;  data            1    wreg     unsigned char 
 15818 ;; Auto vars:     Size  Location     Type
 15819 ;;  data            1    2[BANK0 ] unsigned char 
 15820 ;; Return value:  Size  Location     Type
 15821 ;;                  1    wreg      void 
 15822 ;; Registers used:
 15823 ;;		wreg, status,2, status,0, cstack
 15824 ;; Tracked objects:
 15825 ;;		On entry : 0/0
 15826 ;;		On exit  : 0/0
 15827 ;;		Unchanged: 0/0
 15828 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15829 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15830 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15831 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15832 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15833 ;;Total ram usage:        1 bytes
 15834 ;; Hardware stack levels used:    1
 15835 ;; Hardware stack levels required when called:    8
 15836 ;; This function calls:
 15837 ;;		_lcdNibble
 15838 ;; This function is called by:
 15839 ;;		_UI
 15840 ;;		_change_state_to_menu_start
 15841 ;;		_change_state_to_menu_12
 15842 ;;		_change_state_to_menu_22
 15843 ;;		_initLCD
 15844 ;;		_printRTC
 15845 ;;		_Loading
 15846 ;;		_EEPROM_write
 15847 ;;		_Test
 15848 ;;		_algorithmTest
 15849 ;;		_sensorTest
 15850 ;;		_actuatorTest
 15851 ;;		_BothServos
 15852 ;;		_PortTestA5
 15853 ;;		_PusherTest
 15854 ;;		_SpeedTest
 15855 ;;		_BlockerTest
 15856 ;;		_ToggleTestA5
 15857 ;; This function uses a non-reentrant model
 15858 ;;
 15859                           
 15860                           	psect	text57
 15861  004A78                     __ptext57:
 15862                           	opt stack 0
 15863  004A78                     _lcdInst:
 15864                           	opt stack 20
 15865                           
 15866                           ; BSR set to: 0
 15867                           ;incstack = 0
 15868                           ;lcdInst@data stored from wreg
 15869  004A78  0100               	movlb	0	; () banked
 15870  004A7A  6F82               	movwf	lcdInst@data& (0+255),b
 15871                           
 15872                           ;lcd.c: 16: LATDbits.LATD2 = 0;
 15873  004A7C  948C               	bcf	3980,2,c	;volatile
 15874                           
 15875                           ;lcd.c: 17: lcdNibble(data);
 15876  004A7E  0100               	movlb	0	; () banked
 15877  004A80  5182               	movf	lcdInst@data& (0+255),w,b
 15878  004A82  EC47  F020         	call	_lcdNibble
 15879  004A86  0012               	return		;funcret
 15880  004A88                     __end_of_lcdInst:
 15881                           	opt stack 0
 15882                           tblptru	equ	0xFF8
 15883                           tblptrh	equ	0xFF7
 15884                           tblptrl	equ	0xFF6
 15885                           tablat	equ	0xFF5
 15886                           prodh	equ	0xFF4
 15887                           prodl	equ	0xFF3
 15888                           intcon	equ	0xFF2
 15889                           intcon2	equ	0xFF1
 15890                           intcon3	equ	0xFF0
 15891                           indf0	equ	0xFEF
 15892                           postinc0	equ	0xFEE
 15893                           fsr0h	equ	0xFEA
 15894                           fsr0l	equ	0xFE9
 15895                           wreg	equ	0xFE8
 15896                           postdec1	equ	0xFE5
 15897                           fsr1l	equ	0xFE1
 15898                           indf2	equ	0xFDF
 15899                           postinc2	equ	0xFDE
 15900                           postdec2	equ	0xFDD
 15901                           fsr2h	equ	0xFDA
 15902                           fsr2l	equ	0xFD9
 15903                           status	equ	0xFD8
 15904                           
 15905 ;; *************** function _lcdNibble *****************
 15906 ;; Defined at:
 15907 ;;		line 25 in file "lcd.c"
 15908 ;; Parameters:    Size  Location     Type
 15909 ;;  data            1    wreg     unsigned char 
 15910 ;; Auto vars:     Size  Location     Type
 15911 ;;  data            1    1[BANK0 ] unsigned char 
 15912 ;;  temp            1    0[BANK0 ] unsigned char 
 15913 ;; Return value:  Size  Location     Type
 15914 ;;                  1    wreg      void 
 15915 ;; Registers used:
 15916 ;;		wreg, status,2, status,0
 15917 ;; Tracked objects:
 15918 ;;		On entry : 0/0
 15919 ;;		On exit  : 0/0
 15920 ;;		Unchanged: 0/0
 15921 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15922 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15923 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15924 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15925 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15926 ;;Total ram usage:        2 bytes
 15927 ;; Hardware stack levels used:    1
 15928 ;; Hardware stack levels required when called:    7
 15929 ;; This function calls:
 15930 ;;		Nothing
 15931 ;; This function is called by:
 15932 ;;		_lcdInst
 15933 ;;		_putch
 15934 ;; This function uses a non-reentrant model
 15935 ;;
 15936                           
 15937                           	psect	text58
 15938  00408E                     __ptext58:
 15939                           	opt stack 0
 15940  00408E                     _lcdNibble:
 15941                           	opt stack 20
 15942                           
 15943                           ;incstack = 0
 15944                           ;lcdNibble@data stored from wreg
 15945  00408E  0100               	movlb	0	; () banked
 15946  004090  6F81               	movwf	lcdNibble@data& (0+255),b
 15947                           
 15948                           ;lcd.c: 27: char temp = data & 0xF0;
 15949  004092  0100               	movlb	0	; () banked
 15950  004094  5181               	movf	lcdNibble@data& (0+255),w,b
 15951  004096  0BF0               	andlw	240
 15952  004098  0100               	movlb	0	; () banked
 15953  00409A  6F80               	movwf	lcdNibble@temp& (0+255),b
 15954                           
 15955                           ;lcd.c: 28: LATD = LATD & 0x0F;
 15956  00409C  508C               	movf	3980,w,c	;volatile
 15957  00409E  0B0F               	andlw	15
 15958  0040A0  6E8C               	movwf	3980,c	;volatile
 15959                           
 15960                           ;lcd.c: 29: LATD = temp | LATD;
 15961  0040A2  0100               	movlb	0	; () banked
 15962  0040A4  5180               	movf	lcdNibble@temp& (0+255),w,b
 15963  0040A6  108C               	iorwf	3980,w,c	;volatile
 15964  0040A8  6E8C               	movwf	3980,c	;volatile
 15965                           
 15966                           ; BSR set to: 0
 15967                           ;lcd.c: 31: LATDbits.LATD3 = 1;
 15968  0040AA  868C               	bsf	3980,3,c	;volatile
 15969                           
 15970                           ; BSR set to: 0
 15971                           ;lcd.c: 32: _delay((unsigned long)((25)*(32000000/4000000.0)));
 15972  0040AC  0E42               	movlw	66
 15973  0040AE                     u8737:
 15974  0040AE  2EE8               	decfsz	wreg,f,c
 15975  0040B0  D7FE               	bra	u8737
 15976  0040B2  D000               	nop2	
 15977                           
 15978                           ;lcd.c: 33: LATDbits.LATD3 = 0;
 15979  0040B4  968C               	bcf	3980,3,c	;volatile
 15980                           
 15981                           ;lcd.c: 34: _delay((unsigned long)((25)*(32000000/4000000.0)));
 15982  0040B6  0E42               	movlw	66
 15983  0040B8                     u8747:
 15984  0040B8  2EE8               	decfsz	wreg,f,c
 15985  0040BA  D7FE               	bra	u8747
 15986  0040BC  D000               	nop2	
 15987                           
 15988                           ;lcd.c: 36: data = data << 4;
 15989  0040BE  0100               	movlb	0	; () banked
 15990  0040C0  3981               	swapf	lcdNibble@data& (0+255),w,b
 15991  0040C2  0BF0               	andlw	240
 15992  0040C4  0100               	movlb	0	; () banked
 15993  0040C6  6F81               	movwf	lcdNibble@data& (0+255),b
 15994                           
 15995                           ;lcd.c: 38: temp = data & 0xF0;
 15996  0040C8  0100               	movlb	0	; () banked
 15997  0040CA  5181               	movf	lcdNibble@data& (0+255),w,b
 15998  0040CC  0BF0               	andlw	240
 15999  0040CE  0100               	movlb	0	; () banked
 16000  0040D0  6F80               	movwf	lcdNibble@temp& (0+255),b
 16001                           
 16002                           ;lcd.c: 39: LATD = LATD & 0x0F;
 16003  0040D2  508C               	movf	3980,w,c	;volatile
 16004  0040D4  0B0F               	andlw	15
 16005  0040D6  6E8C               	movwf	3980,c	;volatile
 16006                           
 16007                           ;lcd.c: 40: LATD = temp | LATD;
 16008  0040D8  0100               	movlb	0	; () banked
 16009  0040DA  5180               	movf	lcdNibble@temp& (0+255),w,b
 16010  0040DC  108C               	iorwf	3980,w,c	;volatile
 16011  0040DE  6E8C               	movwf	3980,c	;volatile
 16012                           
 16013                           ; BSR set to: 0
 16014                           ;lcd.c: 42: LATDbits.LATD3 = 1;
 16015  0040E0  868C               	bsf	3980,3,c	;volatile
 16016                           
 16017                           ; BSR set to: 0
 16018                           ;lcd.c: 43: _delay((unsigned long)((25)*(32000000/4000000.0)));
 16019  0040E2  0E42               	movlw	66
 16020  0040E4                     u8757:
 16021  0040E4  2EE8               	decfsz	wreg,f,c
 16022  0040E6  D7FE               	bra	u8757
 16023  0040E8  D000               	nop2	
 16024                           
 16025                           ;lcd.c: 44: LATDbits.LATD3 = 0;
 16026  0040EA  968C               	bcf	3980,3,c	;volatile
 16027                           
 16028                           ;lcd.c: 45: _delay((unsigned long)((25)*(32000000/4000000.0)));
 16029  0040EC  0E42               	movlw	66
 16030  0040EE                     u8767:
 16031  0040EE  2EE8               	decfsz	wreg,f,c
 16032  0040F0  D7FE               	bra	u8767
 16033  0040F2  D000               	nop2	
 16034  0040F4  0012               	return		;funcret
 16035  0040F6                     __end_of_lcdNibble:
 16036                           	opt stack 0
 16037                           tblptru	equ	0xFF8
 16038                           tblptrh	equ	0xFF7
 16039                           tblptrl	equ	0xFF6
 16040                           tablat	equ	0xFF5
 16041                           prodh	equ	0xFF4
 16042                           prodl	equ	0xFF3
 16043                           intcon	equ	0xFF2
 16044                           intcon2	equ	0xFF1
 16045                           intcon3	equ	0xFF0
 16046                           indf0	equ	0xFEF
 16047                           postinc0	equ	0xFEE
 16048                           fsr0h	equ	0xFEA
 16049                           fsr0l	equ	0xFE9
 16050                           wreg	equ	0xFE8
 16051                           postdec1	equ	0xFE5
 16052                           fsr1l	equ	0xFE1
 16053                           indf2	equ	0xFDF
 16054                           postinc2	equ	0xFDE
 16055                           postdec2	equ	0xFDD
 16056                           fsr2h	equ	0xFDA
 16057                           fsr2l	equ	0xFD9
 16058                           status	equ	0xFD8
 16059                           
 16060 ;; *************** function _handler *****************
 16061 ;; Defined at:
 16062 ;;		line 16 in file "interruptHandler.c"
 16063 ;; Parameters:    Size  Location     Type
 16064 ;;		None
 16065 ;; Auto vars:     Size  Location     Type
 16066 ;;		None
 16067 ;; Return value:  Size  Location     Type
 16068 ;;                  1    wreg      void 
 16069 ;; Registers used:
 16070 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16071 ;; Tracked objects:
 16072 ;;		On entry : 0/0
 16073 ;;		On exit  : 0/0
 16074 ;;		Unchanged: 0/0
 16075 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16076 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16077 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16078 ;;      Temps:         16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16079 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16080 ;;Total ram usage:       16 bytes
 16081 ;; Hardware stack levels used:    1
 16082 ;; Hardware stack levels required when called:    6
 16083 ;; This function calls:
 16084 ;;		_printSortTimer
 16085 ;;		_updateMenu
 16086 ;; This function is called by:
 16087 ;;		Interrupt level 2
 16088 ;; This function uses a non-reentrant model
 16089 ;;
 16090                           
 16091                           	psect	intcode
 16092  000008                     __pintcode:
 16093                           	opt stack 0
 16094  000008                     _handler:
 16095                           	opt stack 18
 16096                           
 16097                           ;incstack = 0
 16098  000008  827E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 16099  00000A  ED95  F017         	call	int_func,f	;refresh shadow registers
 16100                           tblptru	equ	0xFF8
 16101                           tblptrh	equ	0xFF7
 16102                           tblptrl	equ	0xFF6
 16103                           tablat	equ	0xFF5
 16104                           prodh	equ	0xFF4
 16105                           prodl	equ	0xFF3
 16106                           intcon	equ	0xFF2
 16107                           intcon2	equ	0xFF1
 16108                           intcon3	equ	0xFF0
 16109                           indf0	equ	0xFEF
 16110                           postinc0	equ	0xFEE
 16111                           fsr0h	equ	0xFEA
 16112                           fsr0l	equ	0xFE9
 16113                           wreg	equ	0xFE8
 16114                           postdec1	equ	0xFE5
 16115                           fsr1l	equ	0xFE1
 16116                           indf2	equ	0xFDF
 16117                           postinc2	equ	0xFDE
 16118                           postdec2	equ	0xFDD
 16119                           fsr2h	equ	0xFDA
 16120                           fsr2l	equ	0xFD9
 16121                           status	equ	0xFD8
 16122                           
 16123                           	psect	intcode_body
 16124  002F2A                     __pintcode_body:
 16125                           	opt stack 18
 16126  002F2A                     int_func:
 16127                           	opt stack 18
 16128  002F2A  0006               	pop		; remove dummy address from shadow register refresh
 16129  002F2C  CFFA F04D          	movff	pclath,??_handler+2
 16130  002F30  CFFB F04E          	movff	pclatu,??_handler+3
 16131  002F34  CFE9 F04F          	movff	fsr0l,??_handler+4
 16132  002F38  CFEA F050          	movff	fsr0h,??_handler+5
 16133  002F3C  CFE1 F051          	movff	fsr1l,??_handler+6
 16134  002F40  CFE2 F052          	movff	fsr1h,??_handler+7
 16135  002F44  CFD9 F053          	movff	fsr2l,??_handler+8
 16136  002F48  CFDA F054          	movff	fsr2h,??_handler+9
 16137  002F4C  CFF3 F055          	movff	prodl,??_handler+10
 16138  002F50  CFF4 F056          	movff	prodh,??_handler+11
 16139  002F54  CFF6 F057          	movff	tblptrl,??_handler+12
 16140  002F58  CFF7 F058          	movff	tblptrh,??_handler+13
 16141  002F5C  CFF8 F059          	movff	tblptru,??_handler+14
 16142  002F60  CFF5 F05A          	movff	tablat,??_handler+15
 16143                           
 16144                           ;interruptHandler.c: 18: if(INT1IF){
 16145  002F64  A0F0               	btfss	intcon3,0,c	;volatile
 16146  002F66  D020               	goto	i2l8444
 16147                           
 16148                           ;interruptHandler.c: 19: INT1IF = 0;
 16149  002F68  90F0               	bcf	intcon3,0,c	;volatile
 16150                           
 16151                           ;interruptHandler.c: 20: if(machine_state == UI_state) {
 16152  002F6A  0100               	movlb	0	; () banked
 16153  002F6C  51FC               	movf	_machine_state& (0+255),w,b
 16154  002F6E  A4D8               	btfss	status,2,c
 16155  002F70  D01B               	goto	i2l8444
 16156                           
 16157                           ; BSR set to: 0
 16158                           ;interruptHandler.c: 21: input = keys[(PORTB & 0xF0) >> 4];
 16159  002F72  3881               	swapf	3969,w,c	;volatile
 16160  002F74  0B0F               	andlw	15
 16161  002F76  0B0F               	andlw	15
 16162  002F78  6E4B               	movwf	??_handler& (0+255),c
 16163  002F7A  6A4C               	clrf	(??_handler+1)& (0+255),c
 16164  002F7C  0E01               	movlw	low _keys
 16165  002F7E  244B               	addwf	??_handler,w,c
 16166  002F80  6EF6               	movwf	tblptrl,c
 16167  002F82  0EFB               	movlw	high _keys
 16168  002F84  204C               	addwfc	??_handler+1,w,c
 16169  002F86  6EF7               	movwf	tblptrh,c
 16170  002F88                     	if	1	;There are 3 active tblptr bytes
 16171  002F88  6AF8               	clrf	tblptru,c
 16172  002F8A  0E00               	movlw	low (__mediumconst shr (0+16))
 16173  002F8C  22F8               	addwfc	tblptru,f,c
 16174  002F8E                     	endif
 16175  002F8E  0008               	tblrd		*
 16176  002F90  CFF5 F07D          	movff	tablat,_input	;volatile
 16177                           
 16178                           ; BSR set to: 0
 16179                           ;interruptHandler.c: 23: if(input == '*'){
 16180  002F94  0E2A               	movlw	42
 16181  002F96  187D               	xorwf	_input,w,c	;volatile
 16182  002F98  A4D8               	btfss	status,2,c
 16183  002F9A  D004               	goto	i2l8442
 16184                           
 16185                           ; BSR set to: 0
 16186                           ;interruptHandler.c: 24: machine_state = Testing_state;
 16187  002F9C  0E03               	movlw	3
 16188  002F9E  0100               	movlb	0	; () banked
 16189  002FA0  6FFC               	movwf	_machine_state& (0+255),b
 16190                           
 16191                           ;interruptHandler.c: 25: }
 16192  002FA2  D002               	goto	i2l8444
 16193  002FA4                     i2l8442:
 16194                           
 16195                           ; BSR set to: 0
 16196                           ;interruptHandler.c: 26: else{
 16197                           ;interruptHandler.c: 27: updateMenu();
 16198  002FA4  EC31  F011         	call	_updateMenu	;wreg free
 16199  002FA8                     i2l8444:
 16200                           
 16201                           ;interruptHandler.c: 28: }
 16202                           ;interruptHandler.c: 29: }
 16203                           ;interruptHandler.c: 30: }
 16204                           ;interruptHandler.c: 33: if(TMR0IF){
 16205  002FA8  A4F2               	btfss	intcon,2,c	;volatile
 16206  002FAA  D00C               	goto	i2l8458
 16207                           
 16208                           ;interruptHandler.c: 34: TMR0IF = 0;
 16209  002FAC  94F2               	bcf	intcon,2,c	;volatile
 16210                           
 16211                           ;interruptHandler.c: 35: if(machine_state == Sorting_state){
 16212  002FAE  0100               	movlb	0	; () banked
 16213  002FB0  05FC               	decf	_machine_state& (0+255),w,b
 16214  002FB2  A4D8               	btfss	status,2,c
 16215  002FB4  D007               	goto	i2l8458
 16216                           
 16217                           ; BSR set to: 0
 16218                           ;interruptHandler.c: 36: printSortTimer();
 16219  002FB6  ECB2  F014         	call	_printSortTimer	;wreg free
 16220                           
 16221                           ;interruptHandler.c: 38: TMR0H = 0b10000101;
 16222  002FBA  0E85               	movlw	133
 16223  002FBC  6ED7               	movwf	4055,c	;volatile
 16224                           
 16225                           ;interruptHandler.c: 39: TMR0L = 0b11101110;
 16226  002FBE  0EEE               	movlw	238
 16227  002FC0  6ED6               	movwf	4054,c	;volatile
 16228                           
 16229                           ;interruptHandler.c: 40: TMR0ON = 1;
 16230  002FC2  8ED5               	bsf	4053,7,c	;volatile
 16231  002FC4                     i2l8458:
 16232                           
 16233                           ;interruptHandler.c: 41: }
 16234                           ;interruptHandler.c: 42: }
 16235                           ;interruptHandler.c: 45: if(TMR1IF){
 16236  002FC4  A09E               	btfss	3998,0,c	;volatile
 16237  002FC6  D024               	goto	i2l8482
 16238                           
 16239                           ;interruptHandler.c: 46: TMR1IF = 0;
 16240  002FC8  909E               	bcf	3998,0,c	;volatile
 16241                           
 16242                           ;interruptHandler.c: 47: TMR1ON = 0;
 16243  002FCA  90CD               	bcf	4045,0,c	;volatile
 16244                           
 16245                           ;interruptHandler.c: 48: if(machine_state == Sorting_state){
 16246  002FCC  0100               	movlb	0	; () banked
 16247  002FCE  05FC               	decf	_machine_state& (0+255),w,b
 16248  002FD0  A4D8               	btfss	status,2,c
 16249  002FD2  D01E               	goto	i2l8482
 16250                           
 16251                           ; BSR set to: 0
 16252                           ;interruptHandler.c: 49: if(was_low_1){
 16253  002FD4  5079               	movf	_was_low_1,w,c	;volatile
 16254  002FD6  107A               	iorwf	_was_low_1+1,w,c	;volatile
 16255  002FD8  B4D8               	btfsc	status,2,c
 16256  002FDA  D00A               	goto	i2l876
 16257                           
 16258                           ; BSR set to: 0
 16259                           ;interruptHandler.c: 50: LATCbits.LATC1 = 1;
 16260  002FDC  828B               	bsf	3979,1,c	;volatile
 16261                           
 16262                           ; BSR set to: 0
 16263                           ;interruptHandler.c: 51: was_low_1 = 0;
 16264  002FDE  0E00               	movlw	0
 16265  002FE0  6E7A               	movwf	_was_low_1+1,c	;volatile
 16266  002FE2  0E00               	movlw	0
 16267  002FE4  6E79               	movwf	_was_low_1,c	;volatile
 16268                           
 16269                           ; BSR set to: 0
 16270                           ;interruptHandler.c: 52: TMR1H = servoTimes[0];
 16271  002FE6  C11C  FFCF         	movff	_servoTimes,4047	;volatile
 16272                           
 16273                           ; BSR set to: 0
 16274                           ;interruptHandler.c: 53: TMR1L = servoTimes[1];
 16275  002FEA  C11E  FFCE         	movff	_servoTimes+2,4046	;volatile
 16276                           
 16277                           ;interruptHandler.c: 54: }
 16278  002FEE  D00F               	goto	i2l8480
 16279  002FF0                     i2l876:
 16280                           
 16281                           ; BSR set to: 0
 16282                           ;interruptHandler.c: 55: else{
 16283                           ;interruptHandler.c: 56: LATCbits.LATC1 = 0;
 16284  002FF0  928B               	bcf	3979,1,c	;volatile
 16285                           
 16286                           ; BSR set to: 0
 16287                           ;interruptHandler.c: 57: was_low_1 = 1;
 16288  002FF2  0E00               	movlw	0
 16289  002FF4  6E7A               	movwf	_was_low_1+1,c	;volatile
 16290  002FF6  0E01               	movlw	1
 16291  002FF8  6E79               	movwf	_was_low_1,c	;volatile
 16292                           
 16293                           ; BSR set to: 0
 16294                           ;interruptHandler.c: 58: TMR1H = 20000 - servoTimes[0];
 16295  002FFA  0101               	movlb	1	; () banked
 16296  002FFC  511C               	movf	_servoTimes& (0+255),w,b
 16297  002FFE  0800               	sublw	0
 16298  003000  0F20               	addlw	32
 16299  003002  6ECF               	movwf	4047,c	;volatile
 16300                           
 16301                           ; BSR set to: 1
 16302                           ;interruptHandler.c: 59: TMR1L = 20000 - servoTimes[1];
 16303  003004  0101               	movlb	1	; () banked
 16304  003006  511E               	movf	(_servoTimes+2)& (0+255),w,b
 16305  003008  0800               	sublw	0
 16306  00300A  0F20               	addlw	32
 16307  00300C  6ECE               	movwf	4046,c	;volatile
 16308  00300E                     i2l8480:
 16309                           
 16310                           ;interruptHandler.c: 60: }
 16311                           ;interruptHandler.c: 61: TMR1ON = 1;
 16312  00300E  80CD               	bsf	4045,0,c	;volatile
 16313  003010                     i2l8482:
 16314                           
 16315                           ;interruptHandler.c: 62: }
 16316                           ;interruptHandler.c: 63: }
 16317                           ;interruptHandler.c: 65: if(TMR3IF){
 16318  003010  A2A1               	btfss	4001,1,c	;volatile
 16319  003012  D024               	goto	i2l882
 16320                           
 16321                           ;interruptHandler.c: 66: TMR3IF = 0;
 16322  003014  92A1               	bcf	4001,1,c	;volatile
 16323                           
 16324                           ;interruptHandler.c: 67: TMR3ON = 0;
 16325  003016  90B1               	bcf	4017,0,c	;volatile
 16326                           
 16327                           ;interruptHandler.c: 68: if(machine_state == Sorting_state){
 16328  003018  0100               	movlb	0	; () banked
 16329  00301A  05FC               	decf	_machine_state& (0+255),w,b
 16330  00301C  A4D8               	btfss	status,2,c
 16331  00301E  D01E               	goto	i2l882
 16332                           
 16333                           ; BSR set to: 0
 16334                           ;interruptHandler.c: 69: if(was_low_3){
 16335  003020  507B               	movf	_was_low_3,w,c	;volatile
 16336  003022  107C               	iorwf	_was_low_3+1,w,c	;volatile
 16337  003024  B4D8               	btfsc	status,2,c
 16338  003026  D00A               	goto	i2l880
 16339                           
 16340                           ; BSR set to: 0
 16341                           ;interruptHandler.c: 70: LATCbits.LATC2 = 1;
 16342  003028  848B               	bsf	3979,2,c	;volatile
 16343                           
 16344                           ; BSR set to: 0
 16345                           ;interruptHandler.c: 71: was_low_3 = 0;
 16346  00302A  0E00               	movlw	0
 16347  00302C  6E7C               	movwf	_was_low_3+1,c	;volatile
 16348  00302E  0E00               	movlw	0
 16349  003030  6E7B               	movwf	_was_low_3,c	;volatile
 16350                           
 16351                           ; BSR set to: 0
 16352                           ;interruptHandler.c: 72: TMR3H = servoTimes[2];
 16353  003032  C120  FFB3         	movff	_servoTimes+4,4019	;volatile
 16354                           
 16355                           ; BSR set to: 0
 16356                           ;interruptHandler.c: 73: TMR3L = servoTimes[3];
 16357  003036  C122  FFB2         	movff	_servoTimes+6,4018	;volatile
 16358                           
 16359                           ;interruptHandler.c: 74: }
 16360  00303A  D00F               	goto	i2l8504
 16361  00303C                     i2l880:
 16362                           
 16363                           ; BSR set to: 0
 16364                           ;interruptHandler.c: 75: else{
 16365                           ;interruptHandler.c: 76: LATCbits.LATC2 = 0;
 16366  00303C  948B               	bcf	3979,2,c	;volatile
 16367                           
 16368                           ; BSR set to: 0
 16369                           ;interruptHandler.c: 77: was_low_3 = 1;
 16370  00303E  0E00               	movlw	0
 16371  003040  6E7C               	movwf	_was_low_3+1,c	;volatile
 16372  003042  0E01               	movlw	1
 16373  003044  6E7B               	movwf	_was_low_3,c	;volatile
 16374                           
 16375                           ; BSR set to: 0
 16376                           ;interruptHandler.c: 78: TMR3H = 20000 - servoTimes[2];
 16377  003046  0101               	movlb	1	; () banked
 16378  003048  5120               	movf	(_servoTimes+4)& (0+255),w,b
 16379  00304A  0800               	sublw	0
 16380  00304C  0F20               	addlw	32
 16381  00304E  6EB3               	movwf	4019,c	;volatile
 16382                           
 16383                           ; BSR set to: 1
 16384                           ;interruptHandler.c: 79: TMR3L = 20000 - servoTimes[3];
 16385  003050  0101               	movlb	1	; () banked
 16386  003052  5122               	movf	(_servoTimes+6)& (0+255),w,b
 16387  003054  0800               	sublw	0
 16388  003056  0F20               	addlw	32
 16389  003058  6EB2               	movwf	4018,c	;volatile
 16390  00305A                     i2l8504:
 16391                           
 16392                           ;interruptHandler.c: 80: }
 16393                           ;interruptHandler.c: 81: TMR3ON = 1;
 16394  00305A  80B1               	bsf	4017,0,c	;volatile
 16395  00305C                     i2l882:
 16396  00305C  C05A  FFF5         	movff	??_handler+15,tablat
 16397  003060  C059  FFF8         	movff	??_handler+14,tblptru
 16398  003064  C058  FFF7         	movff	??_handler+13,tblptrh
 16399  003068  C057  FFF6         	movff	??_handler+12,tblptrl
 16400  00306C  C056  FFF4         	movff	??_handler+11,prodh
 16401  003070  C055  FFF3         	movff	??_handler+10,prodl
 16402  003074  C054  FFDA         	movff	??_handler+9,fsr2h
 16403  003078  C053  FFD9         	movff	??_handler+8,fsr2l
 16404  00307C  C052  FFE2         	movff	??_handler+7,fsr1h
 16405  003080  C051  FFE1         	movff	??_handler+6,fsr1l
 16406  003084  C050  FFEA         	movff	??_handler+5,fsr0h
 16407  003088  C04F  FFE9         	movff	??_handler+4,fsr0l
 16408  00308C  C04E  FFFB         	movff	??_handler+3,pclatu
 16409  003090  C04D  FFFA         	movff	??_handler+2,pclath
 16410  003094  927E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 16411  003096  0011               	retfie		f
 16412  003098                     __end_of_handler:
 16413                           	opt stack 0
 16414                           pclatu	equ	0xFFB
 16415                           pclath	equ	0xFFA
 16416                           tblptru	equ	0xFF8
 16417                           tblptrh	equ	0xFF7
 16418                           tblptrl	equ	0xFF6
 16419                           tablat	equ	0xFF5
 16420                           prodh	equ	0xFF4
 16421                           prodl	equ	0xFF3
 16422                           intcon	equ	0xFF2
 16423                           intcon2	equ	0xFF1
 16424                           intcon3	equ	0xFF0
 16425                           indf0	equ	0xFEF
 16426                           postinc0	equ	0xFEE
 16427                           fsr0h	equ	0xFEA
 16428                           fsr0l	equ	0xFE9
 16429                           wreg	equ	0xFE8
 16430                           postdec1	equ	0xFE5
 16431                           fsr1h	equ	0xFE2
 16432                           fsr1l	equ	0xFE1
 16433                           indf2	equ	0xFDF
 16434                           postinc2	equ	0xFDE
 16435                           postdec2	equ	0xFDD
 16436                           fsr2h	equ	0xFDA
 16437                           fsr2l	equ	0xFD9
 16438                           status	equ	0xFD8
 16439                           
 16440 ;; *************** function _updateMenu *****************
 16441 ;; Defined at:
 16442 ;;		line 213 in file "UI.c"
 16443 ;; Parameters:    Size  Location     Type
 16444 ;;		None
 16445 ;; Auto vars:     Size  Location     Type
 16446 ;;		None
 16447 ;; Return value:  Size  Location     Type
 16448 ;;                  1    wreg      void 
 16449 ;; Registers used:
 16450 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16451 ;; Tracked objects:
 16452 ;;		On entry : 0/0
 16453 ;;		On exit  : 0/0
 16454 ;;		Unchanged: 0/0
 16455 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16456 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16457 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16458 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16459 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16460 ;;Total ram usage:        2 bytes
 16461 ;; Hardware stack levels used:    1
 16462 ;; Hardware stack levels required when called:    5
 16463 ;; This function calls:
 16464 ;;		_change_state_to_logs_11
 16465 ;;		_change_state_to_logs_12
 16466 ;;		_change_state_to_logs_22
 16467 ;;		_change_state_to_logs_23
 16468 ;;		_change_state_to_logs_33
 16469 ;;		_change_state_to_logs_34
 16470 ;;		_change_state_to_menu_11
 16471 ;;		_change_state_to_menu_23
 16472 ;;		_dispLogs
 16473 ;;		_inputHandler
 16474 ;;		i2_change_state_to_menu_12
 16475 ;;		i2_change_state_to_menu_22
 16476 ;;		i2_change_state_to_menu_start
 16477 ;; This function is called by:
 16478 ;;		_handler
 16479 ;; This function uses a non-reentrant model
 16480 ;;
 16481                           
 16482                           	psect	text60
 16483  002262                     __ptext60:
 16484                           	opt stack 0
 16485  002262                     _updateMenu:
 16486                           	opt stack 18
 16487                           
 16488                           ;UI.c: 214: up = 0; down = 0; enter = 0; back = 0;
 16489                           
 16490                           ;incstack = 0
 16491  002262  0E00               	movlw	0
 16492  002264  6E78               	movwf	_up+1,c
 16493  002266  0E00               	movlw	0
 16494  002268  6E77               	movwf	_up,c
 16495  00226A  0E00               	movlw	0
 16496  00226C  6E64               	movwf	_down+1,c
 16497  00226E  0E00               	movlw	0
 16498  002270  6E63               	movwf	_down,c
 16499  002272  0E00               	movlw	0
 16500  002274  6E66               	movwf	_enter+1,c
 16501  002276  0E00               	movlw	0
 16502  002278  6E65               	movwf	_enter,c
 16503  00227A  0E00               	movlw	0
 16504  00227C  6E5C               	movwf	_back+1,c
 16505  00227E  0E00               	movlw	0
 16506  002280  6E5B               	movwf	_back,c
 16507                           
 16508                           ;UI.c: 215: (INTCONbits.GIE = 0);
 16509  002282  9EF2               	bcf	intcon,7,c	;volatile
 16510                           
 16511                           ;UI.c: 217: if (inputHandler()
 16512                           ;UI.c: 220: ){
 16513  002284  ECA2  F016         	call	_inputHandler	;wreg free
 16514  002288  502A               	movf	?_inputHandler,w,c
 16515  00228A  102B               	iorwf	?_inputHandler+1,w,c
 16516  00228C  A4D8               	btfss	status,2,c
 16517  00228E  D112               	goto	i2l8178
 16518  002290  D146               	goto	i2l257
 16519  002292                     i2l8030:
 16520                           
 16521                           ;UI.c: 224: change_state_to_menu_11();
 16522  002292  EC58  F023         	call	_change_state_to_menu_11	;wreg free
 16523                           
 16524                           ;UI.c: 225: break;
 16525  002296  D143               	goto	i2l257
 16526  002298                     i2l8032:
 16527                           
 16528                           ;UI.c: 228: if(up){
 16529  002298  5077               	movf	_up,w,c
 16530  00229A  1078               	iorwf	_up+1,w,c
 16531  00229C  B4D8               	btfsc	status,2,c
 16532  00229E  D003               	goto	i2l8036
 16533                           
 16534                           ;UI.c: 229: change_state_to_menu_23();
 16535  0022A0  EC40  F023         	call	_change_state_to_menu_23	;wreg free
 16536                           
 16537                           ;UI.c: 230: }
 16538  0022A4  D13C               	goto	i2l257
 16539  0022A6                     i2l8036:
 16540                           
 16541                           ;UI.c: 231: else if(down){
 16542  0022A6  5063               	movf	_down,w,c
 16543  0022A8  1064               	iorwf	_down+1,w,c
 16544  0022AA  B4D8               	btfsc	status,2,c
 16545  0022AC  D003               	goto	i2l8040
 16546                           
 16547                           ;UI.c: 232: change_state_to_menu_12();
 16548  0022AE  EC28  F023         	call	i2_change_state_to_menu_12	;wreg free
 16549                           
 16550                           ;UI.c: 233: }
 16551  0022B2  D135               	goto	i2l257
 16552  0022B4                     i2l8040:
 16553                           
 16554                           ;UI.c: 234: else if(enter){
 16555  0022B4  5065               	movf	_enter,w,c
 16556  0022B6  1066               	iorwf	_enter+1,w,c
 16557  0022B8  B4D8               	btfsc	status,2,c
 16558  0022BA  D131               	goto	i2l257
 16559                           
 16560                           ;UI.c: 235: change_state_to_menu_start();
 16561  0022BC  EC82  F024         	call	i2_change_state_to_menu_start	;wreg free
 16562                           
 16563                           ;UI.c: 236: }
 16564                           ;UI.c: 237: break;
 16565  0022C0  D12E               	goto	i2l257
 16566  0022C2                     i2l8044:
 16567                           
 16568                           ;UI.c: 240: if(up){
 16569  0022C2  5077               	movf	_up,w,c
 16570  0022C4  1078               	iorwf	_up+1,w,c
 16571  0022C6  B4D8               	btfsc	status,2,c
 16572  0022C8  D003               	goto	i2l8048
 16573                           
 16574                           ;UI.c: 241: change_state_to_menu_11();
 16575  0022CA  EC58  F023         	call	_change_state_to_menu_11	;wreg free
 16576                           
 16577                           ;UI.c: 242: }
 16578  0022CE  D127               	goto	i2l257
 16579  0022D0                     i2l8048:
 16580                           
 16581                           ;UI.c: 243: else if(down){
 16582  0022D0  5063               	movf	_down,w,c
 16583  0022D2  1064               	iorwf	_down+1,w,c
 16584  0022D4  B4D8               	btfsc	status,2,c
 16585  0022D6  D011               	goto	i2l8064
 16586                           
 16587                           ;UI.c: 244: change_state_to_menu_23();
 16588  0022D8  EC40  F023         	call	_change_state_to_menu_23	;wreg free
 16589                           
 16590                           ;UI.c: 245: }
 16591  0022DC  D120               	goto	i2l257
 16592  0022DE                     i2l8056:
 16593                           
 16594                           ;UI.c: 252: if(up){
 16595  0022DE  5077               	movf	_up,w,c
 16596  0022E0  1078               	iorwf	_up+1,w,c
 16597  0022E2  B4D8               	btfsc	status,2,c
 16598  0022E4  D003               	goto	i2l8060
 16599                           
 16600                           ;UI.c: 253: change_state_to_menu_11();
 16601  0022E6  EC58  F023         	call	_change_state_to_menu_11	;wreg free
 16602                           
 16603                           ;UI.c: 254: }
 16604  0022EA  D119               	goto	i2l257
 16605  0022EC                     i2l8060:
 16606                           
 16607                           ;UI.c: 255: else if(down){
 16608  0022EC  5063               	movf	_down,w,c
 16609  0022EE  1064               	iorwf	_down+1,w,c
 16610  0022F0  B4D8               	btfsc	status,2,c
 16611  0022F2  D003               	goto	i2l8064
 16612                           
 16613                           ;UI.c: 256: change_state_to_menu_23();
 16614  0022F4  EC40  F023         	call	_change_state_to_menu_23	;wreg free
 16615                           
 16616                           ;UI.c: 257: }
 16617  0022F8  D112               	goto	i2l257
 16618  0022FA                     i2l8064:
 16619                           
 16620                           ;UI.c: 258: else if(enter){
 16621  0022FA  5065               	movf	_enter,w,c
 16622  0022FC  1066               	iorwf	_enter+1,w,c
 16623  0022FE  B4D8               	btfsc	status,2,c
 16624  002300  D10E               	goto	i2l257
 16625                           
 16626                           ;UI.c: 259: machine_state = Sorting_state;
 16627  002302  0E01               	movlw	1
 16628  002304  0100               	movlb	0	; () banked
 16629  002306  6FFC               	movwf	_machine_state& (0+255),b
 16630                           
 16631                           ; BSR set to: 0
 16632                           ;UI.c: 260: }
 16633                           ;UI.c: 261: break;
 16634                           
 16635                           ; BSR set to: 0
 16636                           
 16637                           ; BSR set to: 0
 16638  002308  D10A               	goto	i2l257
 16639  00230A                     i2l8068:
 16640                           
 16641                           ;UI.c: 264: if(up){
 16642  00230A  5077               	movf	_up,w,c
 16643  00230C  1078               	iorwf	_up+1,w,c
 16644  00230E  B4D8               	btfsc	status,2,c
 16645  002310  D003               	goto	i2l8072
 16646                           
 16647                           ;UI.c: 265: change_state_to_menu_22();
 16648  002312  EC10  F023         	call	i2_change_state_to_menu_22	;wreg free
 16649                           
 16650                           ;UI.c: 266: }
 16651  002316  D103               	goto	i2l257
 16652  002318                     i2l8072:
 16653                           
 16654                           ;UI.c: 267: else if(down){
 16655  002318  5063               	movf	_down,w,c
 16656  00231A  1064               	iorwf	_down+1,w,c
 16657  00231C  B4D8               	btfsc	status,2,c
 16658  00231E  D003               	goto	i2l8076
 16659                           
 16660                           ;UI.c: 268: change_state_to_menu_11();
 16661  002320  EC58  F023         	call	_change_state_to_menu_11	;wreg free
 16662                           
 16663                           ;UI.c: 269: }
 16664  002324  D0FC               	goto	i2l257
 16665  002326                     i2l8076:
 16666                           
 16667                           ;UI.c: 270: else if(enter){
 16668  002326  5065               	movf	_enter,w,c
 16669  002328  1066               	iorwf	_enter+1,w,c
 16670  00232A  B4D8               	btfsc	status,2,c
 16671  00232C  D0F8               	goto	i2l257
 16672                           
 16673                           ;UI.c: 271: change_state_to_logs_11();
 16674  00232E  ECD0  F023         	call	_change_state_to_logs_11	;wreg free
 16675                           
 16676                           ;UI.c: 272: }
 16677                           ;UI.c: 273: break;
 16678  002332  D0F5               	goto	i2l257
 16679  002334                     i2l8080:
 16680                           
 16681                           ;UI.c: 276: if(up){
 16682  002334  5077               	movf	_up,w,c
 16683  002336  1078               	iorwf	_up+1,w,c
 16684  002338  B4D8               	btfsc	status,2,c
 16685  00233A  D003               	goto	i2l8084
 16686                           
 16687                           ;UI.c: 277: change_state_to_logs_34();
 16688  00233C  EC70  F023         	call	_change_state_to_logs_34	;wreg free
 16689                           
 16690                           ;UI.c: 278: }
 16691  002340  D0EE               	goto	i2l257
 16692  002342                     i2l8084:
 16693                           
 16694                           ;UI.c: 279: else if(down){
 16695  002342  5063               	movf	_down,w,c
 16696  002344  1064               	iorwf	_down+1,w,c
 16697  002346  B4D8               	btfsc	status,2,c
 16698  002348  D003               	goto	i2l8088
 16699                           
 16700                           ;UI.c: 280: change_state_to_logs_12();
 16701  00234A  ECB8  F023         	call	_change_state_to_logs_12	;wreg free
 16702                           
 16703                           ;UI.c: 281: }
 16704  00234E  D0E7               	goto	i2l257
 16705  002350                     i2l8088:
 16706                           
 16707                           ;UI.c: 282: else if(enter){
 16708  002350  5065               	movf	_enter,w,c
 16709  002352  1066               	iorwf	_enter+1,w,c
 16710  002354  B4D8               	btfsc	status,2,c
 16711  002356  D007               	goto	i2l8092
 16712                           
 16713                           ;UI.c: 283: dispLogs(1);
 16714  002358  0E00               	movlw	0
 16715  00235A  6E13               	movwf	dispLogs@myLog+1,c
 16716  00235C  0E01               	movlw	1
 16717  00235E  6E12               	movwf	dispLogs@myLog,c
 16718  002360  ECBC  F024         	call	_dispLogs	;wreg free
 16719                           
 16720                           ;UI.c: 284: }
 16721  002364  D0DC               	goto	i2l257
 16722  002366                     i2l8092:
 16723                           
 16724                           ;UI.c: 285: else if(back){
 16725  002366  505B               	movf	_back,w,c
 16726  002368  105C               	iorwf	_back+1,w,c
 16727  00236A  B4D8               	btfsc	status,2,c
 16728  00236C  D0D8               	goto	i2l257
 16729                           
 16730                           ;UI.c: 286: change_state_to_menu_23();
 16731  00236E  EC40  F023         	call	_change_state_to_menu_23	;wreg free
 16732                           
 16733                           ;UI.c: 287: }
 16734                           ;UI.c: 288: break;
 16735  002372  D0D5               	goto	i2l257
 16736  002374                     i2l8096:
 16737                           
 16738                           ;UI.c: 291: if(up){
 16739  002374  5077               	movf	_up,w,c
 16740  002376  1078               	iorwf	_up+1,w,c
 16741  002378  B4D8               	btfsc	status,2,c
 16742  00237A  D003               	goto	i2l8100
 16743                           
 16744                           ;UI.c: 292: change_state_to_logs_11();
 16745  00237C  ECD0  F023         	call	_change_state_to_logs_11	;wreg free
 16746                           
 16747                           ;UI.c: 293: }
 16748  002380  D0CE               	goto	i2l257
 16749  002382                     i2l8100:
 16750                           
 16751                           ;UI.c: 294: else if(down){
 16752  002382  5063               	movf	_down,w,c
 16753  002384  1064               	iorwf	_down+1,w,c
 16754  002386  B4D8               	btfsc	status,2,c
 16755  002388  D003               	goto	i2l8104
 16756                           
 16757                           ;UI.c: 295: change_state_to_logs_23();
 16758  00238A  EC16  F024         	call	_change_state_to_logs_23	;wreg free
 16759                           
 16760                           ;UI.c: 296: }
 16761  00238E  D0C7               	goto	i2l257
 16762  002390                     i2l8104:
 16763                           
 16764                           ;UI.c: 297: else if(enter){
 16765  002390  5065               	movf	_enter,w,c
 16766  002392  1066               	iorwf	_enter+1,w,c
 16767  002394  B4D8               	btfsc	status,2,c
 16768  002396  D007               	goto	i2l8108
 16769                           
 16770                           ;UI.c: 298: dispLogs(2);
 16771  002398  0E00               	movlw	0
 16772  00239A  6E13               	movwf	dispLogs@myLog+1,c
 16773  00239C  0E02               	movlw	2
 16774  00239E  6E12               	movwf	dispLogs@myLog,c
 16775  0023A0  ECBC  F024         	call	_dispLogs	;wreg free
 16776                           
 16777                           ;UI.c: 299: }
 16778  0023A4  D0BC               	goto	i2l257
 16779  0023A6                     i2l8108:
 16780                           
 16781                           ;UI.c: 300: else if(back){
 16782  0023A6  505B               	movf	_back,w,c
 16783  0023A8  105C               	iorwf	_back+1,w,c
 16784  0023AA  B4D8               	btfsc	status,2,c
 16785  0023AC  D0B8               	goto	i2l257
 16786                           
 16787                           ;UI.c: 301: change_state_to_menu_23();
 16788  0023AE  EC40  F023         	call	_change_state_to_menu_23	;wreg free
 16789                           
 16790                           ;UI.c: 302: }
 16791                           ;UI.c: 303: break;
 16792  0023B2  D0B5               	goto	i2l257
 16793  0023B4                     i2l8112:
 16794                           
 16795                           ;UI.c: 306: if(up){
 16796  0023B4  5077               	movf	_up,w,c
 16797  0023B6  1078               	iorwf	_up+1,w,c
 16798  0023B8  B4D8               	btfsc	status,2,c
 16799  0023BA  D003               	goto	i2l8116
 16800                           
 16801                           ;UI.c: 307: change_state_to_logs_11();
 16802  0023BC  ECD0  F023         	call	_change_state_to_logs_11	;wreg free
 16803                           
 16804                           ;UI.c: 308: }
 16805  0023C0  D0AE               	goto	i2l257
 16806  0023C2                     i2l8116:
 16807                           
 16808                           ;UI.c: 309: else if(down){
 16809  0023C2  5063               	movf	_down,w,c
 16810  0023C4  1064               	iorwf	_down+1,w,c
 16811  0023C6  B4D8               	btfsc	status,2,c
 16812  0023C8  D003               	goto	i2l8120
 16813                           
 16814                           ;UI.c: 310: change_state_to_logs_23();
 16815  0023CA  EC16  F024         	call	_change_state_to_logs_23	;wreg free
 16816                           
 16817                           ;UI.c: 311: }
 16818  0023CE  D0A7               	goto	i2l257
 16819  0023D0                     i2l8120:
 16820                           
 16821                           ;UI.c: 312: else if(enter){
 16822  0023D0  5065               	movf	_enter,w,c
 16823  0023D2  1066               	iorwf	_enter+1,w,c
 16824  0023D4  B4D8               	btfsc	status,2,c
 16825  0023D6  D007               	goto	i2l8124
 16826                           
 16827                           ;UI.c: 313: dispLogs(2);
 16828  0023D8  0E00               	movlw	0
 16829  0023DA  6E13               	movwf	dispLogs@myLog+1,c
 16830  0023DC  0E02               	movlw	2
 16831  0023DE  6E12               	movwf	dispLogs@myLog,c
 16832  0023E0  ECBC  F024         	call	_dispLogs	;wreg free
 16833                           
 16834                           ;UI.c: 314: }
 16835  0023E4  D09C               	goto	i2l257
 16836  0023E6                     i2l8124:
 16837                           
 16838                           ;UI.c: 315: else if(back){
 16839  0023E6  505B               	movf	_back,w,c
 16840  0023E8  105C               	iorwf	_back+1,w,c
 16841  0023EA  B4D8               	btfsc	status,2,c
 16842  0023EC  D098               	goto	i2l257
 16843                           
 16844                           ;UI.c: 316: change_state_to_menu_23();
 16845  0023EE  EC40  F023         	call	_change_state_to_menu_23	;wreg free
 16846                           
 16847                           ;UI.c: 317: }
 16848                           ;UI.c: 318: break;
 16849  0023F2  D095               	goto	i2l257
 16850  0023F4                     i2l8128:
 16851                           
 16852                           ;UI.c: 321: if(up){
 16853  0023F4  5077               	movf	_up,w,c
 16854  0023F6  1078               	iorwf	_up+1,w,c
 16855  0023F8  B4D8               	btfsc	status,2,c
 16856  0023FA  D003               	goto	i2l8132
 16857                           
 16858                           ;UI.c: 322: change_state_to_logs_22();
 16859  0023FC  ECA0  F023         	call	_change_state_to_logs_22	;wreg free
 16860                           
 16861                           ;UI.c: 323: }
 16862  002400  D08E               	goto	i2l257
 16863  002402                     i2l8132:
 16864                           
 16865                           ;UI.c: 324: else if(down){
 16866  002402  5063               	movf	_down,w,c
 16867  002404  1064               	iorwf	_down+1,w,c
 16868  002406  B4D8               	btfsc	status,2,c
 16869  002408  D003               	goto	i2l8136
 16870                           
 16871                           ;UI.c: 325: change_state_to_logs_34();
 16872  00240A  EC70  F023         	call	_change_state_to_logs_34	;wreg free
 16873                           
 16874                           ;UI.c: 326: }
 16875  00240E  D087               	goto	i2l257
 16876  002410                     i2l8136:
 16877                           
 16878                           ;UI.c: 327: else if(enter){
 16879  002410  5065               	movf	_enter,w,c
 16880  002412  1066               	iorwf	_enter+1,w,c
 16881  002414  B4D8               	btfsc	status,2,c
 16882  002416  D007               	goto	i2l8140
 16883                           
 16884                           ;UI.c: 328: dispLogs(3);
 16885  002418  0E00               	movlw	0
 16886  00241A  6E13               	movwf	dispLogs@myLog+1,c
 16887  00241C  0E03               	movlw	3
 16888  00241E  6E12               	movwf	dispLogs@myLog,c
 16889  002420  ECBC  F024         	call	_dispLogs	;wreg free
 16890                           
 16891                           ;UI.c: 329: }
 16892  002424  D07C               	goto	i2l257
 16893  002426                     i2l8140:
 16894                           
 16895                           ;UI.c: 330: else if(back){
 16896  002426  505B               	movf	_back,w,c
 16897  002428  105C               	iorwf	_back+1,w,c
 16898  00242A  B4D8               	btfsc	status,2,c
 16899  00242C  D078               	goto	i2l257
 16900                           
 16901                           ;UI.c: 331: change_state_to_menu_23();
 16902  00242E  EC40  F023         	call	_change_state_to_menu_23	;wreg free
 16903                           
 16904                           ;UI.c: 332: }
 16905                           ;UI.c: 333: break;
 16906  002432  D075               	goto	i2l257
 16907  002434                     i2l8144:
 16908                           
 16909                           ;UI.c: 336: if(up){
 16910  002434  5077               	movf	_up,w,c
 16911  002436  1078               	iorwf	_up+1,w,c
 16912  002438  B4D8               	btfsc	status,2,c
 16913  00243A  D003               	goto	i2l8148
 16914                           
 16915                           ;UI.c: 337: change_state_to_logs_22();
 16916  00243C  ECA0  F023         	call	_change_state_to_logs_22	;wreg free
 16917                           
 16918                           ;UI.c: 338: }
 16919  002440  D06E               	goto	i2l257
 16920  002442                     i2l8148:
 16921                           
 16922                           ;UI.c: 339: else if(down){
 16923  002442  5063               	movf	_down,w,c
 16924  002444  1064               	iorwf	_down+1,w,c
 16925  002446  B4D8               	btfsc	status,2,c
 16926  002448  D003               	goto	i2l8152
 16927                           
 16928                           ;UI.c: 340: change_state_to_logs_34();
 16929  00244A  EC70  F023         	call	_change_state_to_logs_34	;wreg free
 16930                           
 16931                           ;UI.c: 341: }
 16932  00244E  D067               	goto	i2l257
 16933  002450                     i2l8152:
 16934                           
 16935                           ;UI.c: 342: else if(enter){
 16936  002450  5065               	movf	_enter,w,c
 16937  002452  1066               	iorwf	_enter+1,w,c
 16938  002454  B4D8               	btfsc	status,2,c
 16939  002456  D007               	goto	i2l8156
 16940                           
 16941                           ;UI.c: 343: dispLogs(3);
 16942  002458  0E00               	movlw	0
 16943  00245A  6E13               	movwf	dispLogs@myLog+1,c
 16944  00245C  0E03               	movlw	3
 16945  00245E  6E12               	movwf	dispLogs@myLog,c
 16946  002460  ECBC  F024         	call	_dispLogs	;wreg free
 16947                           
 16948                           ;UI.c: 344: }
 16949  002464  D05C               	goto	i2l257
 16950  002466                     i2l8156:
 16951                           
 16952                           ;UI.c: 345: else if(back){
 16953  002466  505B               	movf	_back,w,c
 16954  002468  105C               	iorwf	_back+1,w,c
 16955  00246A  B4D8               	btfsc	status,2,c
 16956  00246C  D058               	goto	i2l257
 16957                           
 16958                           ;UI.c: 346: change_state_to_menu_23();
 16959  00246E  EC40  F023         	call	_change_state_to_menu_23	;wreg free
 16960                           
 16961                           ;UI.c: 347: }
 16962                           ;UI.c: 348: break;
 16963  002472  D055               	goto	i2l257
 16964  002474                     i2l8160:
 16965                           
 16966                           ;UI.c: 351: if(up){
 16967  002474  5077               	movf	_up,w,c
 16968  002476  1078               	iorwf	_up+1,w,c
 16969  002478  B4D8               	btfsc	status,2,c
 16970  00247A  D003               	goto	i2l8164
 16971                           
 16972                           ;UI.c: 352: change_state_to_logs_33();
 16973  00247C  EC88  F023         	call	_change_state_to_logs_33	;wreg free
 16974                           
 16975                           ;UI.c: 353: }
 16976  002480  D04E               	goto	i2l257
 16977  002482                     i2l8164:
 16978                           
 16979                           ;UI.c: 354: else if(down){
 16980  002482  5063               	movf	_down,w,c
 16981  002484  1064               	iorwf	_down+1,w,c
 16982  002486  B4D8               	btfsc	status,2,c
 16983  002488  D003               	goto	i2l8168
 16984                           
 16985                           ;UI.c: 355: change_state_to_logs_11();
 16986  00248A  ECD0  F023         	call	_change_state_to_logs_11	;wreg free
 16987                           
 16988                           ;UI.c: 356: }
 16989  00248E  D047               	goto	i2l257
 16990  002490                     i2l8168:
 16991                           
 16992                           ;UI.c: 357: else if(enter){
 16993  002490  5065               	movf	_enter,w,c
 16994  002492  1066               	iorwf	_enter+1,w,c
 16995  002494  B4D8               	btfsc	status,2,c
 16996  002496  D007               	goto	i2l8172
 16997                           
 16998                           ;UI.c: 358: dispLogs(4);
 16999  002498  0E00               	movlw	0
 17000  00249A  6E13               	movwf	dispLogs@myLog+1,c
 17001  00249C  0E04               	movlw	4
 17002  00249E  6E12               	movwf	dispLogs@myLog,c
 17003  0024A0  ECBC  F024         	call	_dispLogs	;wreg free
 17004                           
 17005                           ;UI.c: 359: }
 17006  0024A4  D03C               	goto	i2l257
 17007  0024A6                     i2l8172:
 17008                           
 17009                           ;UI.c: 360: else if(back){
 17010  0024A6  505B               	movf	_back,w,c
 17011  0024A8  105C               	iorwf	_back+1,w,c
 17012  0024AA  B4D8               	btfsc	status,2,c
 17013  0024AC  D038               	goto	i2l257
 17014                           
 17015                           ;UI.c: 361: change_state_to_menu_23();
 17016  0024AE  EC40  F023         	call	_change_state_to_menu_23	;wreg free
 17017                           
 17018                           ;UI.c: 367: }
 17019                           
 17020                           ;UI.c: 366: break;
 17021                           
 17022                           ;UI.c: 365: default:
 17023                           
 17024                           ;UI.c: 362: }
 17025                           ;UI.c: 363: break;
 17026  0024B2  D035               	goto	i2l257
 17027  0024B4                     i2l8178:
 17028  0024B4  C0E6  F043         	movff	_cur_state,??_updateMenu
 17029  0024B8  C0E7  F044         	movff	_cur_state+1,??_updateMenu+1
 17030                           
 17031                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 3 sub-sw
      +                          itches
 17032                           ; Switch size 1, requested type "space"
 17033                           ; Number of cases is 3, Range of values is 0 to 4
 17034                           ; switch strategies available:
 17035                           ; Name         Instructions Cycles
 17036                           ; simple_byte           10     6 (average)
 17037                           ;	Chosen strategy is simple_byte
 17038  0024BC  5044               	movf	??_updateMenu+1,w,c
 17039  0024BE  0A00               	xorlw	0	; case 0
 17040  0024C0  B4D8               	btfsc	status,2,c
 17041  0024C2  D007               	goto	i2l8814
 17042  0024C4  0A03               	xorlw	3	; case 3
 17043  0024C6  B4D8               	btfsc	status,2,c
 17044  0024C8  D015               	goto	i2l8816
 17045  0024CA  0A07               	xorlw	7	; case 4
 17046  0024CC  B4D8               	btfsc	status,2,c
 17047  0024CE  D020               	goto	i2l8818
 17048  0024D0  D026               	goto	i2l257
 17049  0024D2                     i2l8814:
 17050                           
 17051                           ; Switch size 1, requested type "space"
 17052                           ; Number of cases is 5, Range of values is 0 to 23
 17053                           ; switch strategies available:
 17054                           ; Name         Instructions Cycles
 17055                           ; simple_byte           16     9 (average)
 17056                           ;	Chosen strategy is simple_byte
 17057  0024D2  5043               	movf	??_updateMenu,w,c
 17058  0024D4  0A00               	xorlw	0	; case 0
 17059  0024D6  B4D8               	btfsc	status,2,c
 17060  0024D8  D6DC               	goto	i2l8030
 17061  0024DA  0A0B               	xorlw	11	; case 11
 17062  0024DC  B4D8               	btfsc	status,2,c
 17063  0024DE  D6DC               	goto	i2l8032
 17064  0024E0  0A07               	xorlw	7	; case 12
 17065  0024E2  B4D8               	btfsc	status,2,c
 17066  0024E4  D6EE               	goto	i2l8044
 17067  0024E6  0A1A               	xorlw	26	; case 22
 17068  0024E8  B4D8               	btfsc	status,2,c
 17069  0024EA  D6F9               	goto	i2l8056
 17070  0024EC  0A01               	xorlw	1	; case 23
 17071  0024EE  B4D8               	btfsc	status,2,c
 17072  0024F0  D70C               	goto	i2l8068
 17073  0024F2  D015               	goto	i2l257
 17074  0024F4                     i2l8816:
 17075                           
 17076                           ; Switch size 1, requested type "space"
 17077                           ; Number of cases is 4, Range of values is 243 to 255
 17078                           ; switch strategies available:
 17079                           ; Name         Instructions Cycles
 17080                           ; simple_byte           13     7 (average)
 17081                           ;	Chosen strategy is simple_byte
 17082  0024F4  5043               	movf	??_updateMenu,w,c
 17083  0024F6  0AF3               	xorlw	243	; case 243
 17084  0024F8  B4D8               	btfsc	status,2,c
 17085  0024FA  D71C               	goto	i2l8080
 17086  0024FC  0A07               	xorlw	7	; case 244
 17087  0024FE  B4D8               	btfsc	status,2,c
 17088  002500  D739               	goto	i2l8096
 17089  002502  0A0A               	xorlw	10	; case 254
 17090  002504  B4D8               	btfsc	status,2,c
 17091  002506  D756               	goto	i2l8112
 17092  002508  0A01               	xorlw	1	; case 255
 17093  00250A  B4D8               	btfsc	status,2,c
 17094  00250C  D773               	goto	i2l8128
 17095  00250E  D007               	goto	i2l257
 17096  002510                     i2l8818:
 17097                           
 17098                           ; Switch size 1, requested type "space"
 17099                           ; Number of cases is 2, Range of values is 9 to 10
 17100                           ; switch strategies available:
 17101                           ; Name         Instructions Cycles
 17102                           ; simple_byte            7     4 (average)
 17103                           ;	Chosen strategy is simple_byte
 17104  002510  5043               	movf	??_updateMenu,w,c
 17105  002512  0A09               	xorlw	9	; case 9
 17106  002514  B4D8               	btfsc	status,2,c
 17107  002516  D78E               	goto	i2l8144
 17108  002518  0A03               	xorlw	3	; case 10
 17109  00251A  B4D8               	btfsc	status,2,c
 17110  00251C  D7AB               	goto	i2l8160
 17111  00251E                     i2l257:
 17112                           
 17113                           ;UI.c: 368: }
 17114                           ;UI.c: 369: (INTCONbits.GIE = 1);
 17115  00251E  8EF2               	bsf	intcon,7,c	;volatile
 17116  002520  0012               	return		;funcret
 17117  002522                     __end_of_updateMenu:
 17118                           	opt stack 0
 17119                           pclatu	equ	0xFFB
 17120                           pclath	equ	0xFFA
 17121                           tblptru	equ	0xFF8
 17122                           tblptrh	equ	0xFF7
 17123                           tblptrl	equ	0xFF6
 17124                           tablat	equ	0xFF5
 17125                           prodh	equ	0xFF4
 17126                           prodl	equ	0xFF3
 17127                           intcon	equ	0xFF2
 17128                           intcon2	equ	0xFF1
 17129                           intcon3	equ	0xFF0
 17130                           indf0	equ	0xFEF
 17131                           postinc0	equ	0xFEE
 17132                           fsr0h	equ	0xFEA
 17133                           fsr0l	equ	0xFE9
 17134                           wreg	equ	0xFE8
 17135                           postdec1	equ	0xFE5
 17136                           fsr1h	equ	0xFE2
 17137                           fsr1l	equ	0xFE1
 17138                           indf2	equ	0xFDF
 17139                           postinc2	equ	0xFDE
 17140                           postdec2	equ	0xFDD
 17141                           fsr2h	equ	0xFDA
 17142                           fsr2l	equ	0xFD9
 17143                           status	equ	0xFD8
 17144                           
 17145 ;; *************** function i2_change_state_to_menu_start *****************
 17146 ;; Defined at:
 17147 ;;		line 474 in file "UI.c"
 17148 ;; Parameters:    Size  Location     Type
 17149 ;;		None
 17150 ;; Auto vars:     Size  Location     Type
 17151 ;;		None
 17152 ;; Return value:  Size  Location     Type
 17153 ;;                  1    wreg      void 
 17154 ;; Registers used:
 17155 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17156 ;; Tracked objects:
 17157 ;;		On entry : 0/0
 17158 ;;		On exit  : 0/0
 17159 ;;		Unchanged: 0/0
 17160 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17161 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17162 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17163 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17164 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17165 ;;Total ram usage:        0 bytes
 17166 ;; Hardware stack levels used:    1
 17167 ;; Hardware stack levels required when called:    4
 17168 ;; This function calls:
 17169 ;;		i2_lcdInst
 17170 ;;		i2_printRTC
 17171 ;;		i2_printf
 17172 ;; This function is called by:
 17173 ;;		_updateMenu
 17174 ;; This function uses a non-reentrant model
 17175 ;;
 17176                           
 17177                           	psect	text61
 17178  004904                     __ptext61:
 17179                           	opt stack 0
 17180  004904                     i2_change_state_to_menu_start:
 17181                           	opt stack 18
 17182                           
 17183                           ;UI.c: 475: cur_state = 0;
 17184                           
 17185                           ;incstack = 0
 17186  004904  0E00               	movlw	0
 17187  004906  0100               	movlb	0	; () banked
 17188  004908  6FE7               	movwf	(_cur_state+1)& (0+255),b
 17189  00490A  0E00               	movlw	0
 17190  00490C  6FE6               	movwf	_cur_state& (0+255),b
 17191                           
 17192                           ; BSR set to: 0
 17193                           ;UI.c: 477: lcdInst(0b10000000);;
 17194  00490E  0E80               	movlw	128
 17195  004910  EC4A  F025         	call	i2_lcdInst
 17196                           
 17197                           ;UI.c: 478: printRTC();
 17198  004914  EC91  F012         	call	i2_printRTC	;wreg free
 17199                           
 17200                           ;UI.c: 479: lcdInst(0b11000000);;
 17201  004918  0EC0               	movlw	192
 17202  00491A  EC4A  F025         	call	i2_lcdInst
 17203                           
 17204                           ;UI.c: 480: printf("PUSH TO CONTINUE");
 17205  00491E  0EF7               	movlw	low STR_30
 17206  004920  6E0D               	movwf	i2printf@f,c
 17207  004922  0EFD               	movlw	high STR_30
 17208  004924  6E0E               	movwf	i2printf@f+1,c
 17209  004926  EC96  F00C         	call	i2_printf	;wreg free
 17210  00492A  0012               	return		;funcret
 17211  00492C                     __end_ofi2_change_state_to_menu_start:
 17212                           	opt stack 0
 17213                           pclatu	equ	0xFFB
 17214                           pclath	equ	0xFFA
 17215                           tblptru	equ	0xFF8
 17216                           tblptrh	equ	0xFF7
 17217                           tblptrl	equ	0xFF6
 17218                           tablat	equ	0xFF5
 17219                           prodh	equ	0xFF4
 17220                           prodl	equ	0xFF3
 17221                           intcon	equ	0xFF2
 17222                           intcon2	equ	0xFF1
 17223                           intcon3	equ	0xFF0
 17224                           indf0	equ	0xFEF
 17225                           postinc0	equ	0xFEE
 17226                           fsr0h	equ	0xFEA
 17227                           fsr0l	equ	0xFE9
 17228                           wreg	equ	0xFE8
 17229                           postdec1	equ	0xFE5
 17230                           fsr1h	equ	0xFE2
 17231                           fsr1l	equ	0xFE1
 17232                           indf2	equ	0xFDF
 17233                           postinc2	equ	0xFDE
 17234                           postdec2	equ	0xFDD
 17235                           fsr2h	equ	0xFDA
 17236                           fsr2l	equ	0xFD9
 17237                           status	equ	0xFD8
 17238                           
 17239 ;; *************** function i2_printRTC *****************
 17240 ;; Defined at:
 17241 ;;		line 63 in file "RTC.c"
 17242 ;; Parameters:    Size  Location     Type
 17243 ;;		None
 17244 ;; Auto vars:     Size  Location     Type
 17245 ;;  printRTC       14   44[COMRAM] int [7]
 17246 ;;  printRTC        4   60[COMRAM] unsigned char [4]
 17247 ;;  printRTC        2   64[COMRAM] int 
 17248 ;;  printRTC        2   58[COMRAM] int 
 17249 ;; Return value:  Size  Location     Type
 17250 ;;                  1    wreg      void 
 17251 ;; Registers used:
 17252 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17253 ;; Tracked objects:
 17254 ;;		On entry : 0/0
 17255 ;;		On exit  : 0/0
 17256 ;;		Unchanged: 0/0
 17257 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17258 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17259 ;;      Locals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17260 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17261 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17262 ;;Total ram usage:       25 bytes
 17263 ;; Hardware stack levels used:    1
 17264 ;; Hardware stack levels required when called:    3
 17265 ;; This function calls:
 17266 ;;		i2_getRTC
 17267 ;;		i2_lcdInst
 17268 ;;		i2_printf
 17269 ;;		i2_strcpy
 17270 ;; This function is called by:
 17271 ;;		i2_change_state_to_menu_start
 17272 ;; This function uses a non-reentrant model
 17273 ;;
 17274                           
 17275                           	psect	text62
 17276  002522                     __ptext62:
 17277                           	opt stack 0
 17278  002522                     i2_printRTC:
 17279                           	opt stack 18
 17280                           
 17281                           ;RTC.c: 64: getRTC();
 17282                           
 17283                           ;incstack = 0
 17284  002522  ECD8  F01F         	call	i2_getRTC	;wreg free
 17285                           
 17286                           ;RTC.c: 65: char month[] = "MMM";
 17287  002526  C137  F03D         	movff	printRTC@F3217,i2printRTC@month
 17288  00252A  C138  F03E         	movff	printRTC@F3217+1,i2printRTC@month+1
 17289  00252E  C139  F03F         	movff	printRTC@F3217+2,i2printRTC@month+2
 17290  002532  C13A  F040         	movff	printRTC@F3217+3,i2printRTC@month+3
 17291                           
 17292                           ;RTC.c: 66: int INT_time[7];
 17293                           ;RTC.c: 67: for(int i = 0; i < 7; i++){
 17294  002536  0E00               	movlw	0
 17295  002538  6E42               	movwf	i2printRTC@i+1,c
 17296  00253A  0E00               	movlw	0
 17297  00253C  6E41               	movwf	i2printRTC@i,c
 17298  00253E  BE42               	btfsc	i2printRTC@i+1,7,c
 17299  002540  D006               	goto	i2l6348
 17300  002542  5042               	movf	i2printRTC@i+1,w,c
 17301  002544  E135               	bnz	i2l602
 17302  002546  0E07               	movlw	7
 17303  002548  5C41               	subwf	i2printRTC@i,w,c
 17304  00254A  B0D8               	btfsc	status,0,c
 17305  00254C  D031               	goto	i2l602
 17306  00254E                     i2l6348:
 17307                           
 17308                           ;RTC.c: 68: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 17309  00254E  0E24               	movlw	low _time
 17310  002550  2441               	addwf	i2printRTC@i,w,c
 17311  002552  6ED9               	movwf	fsr2l,c
 17312  002554  0E01               	movlw	high _time
 17313  002556  2042               	addwfc	i2printRTC@i+1,w,c
 17314  002558  6EDA               	movwf	fsr2h,c
 17315  00255A  50DF               	movf	indf2,w,c
 17316  00255C  6E2A               	movwf	??i2_printRTC& (0+255),c
 17317  00255E  3A2A               	swapf	??i2_printRTC,f,c
 17318  002560  0E0F               	movlw	15
 17319  002562  162A               	andwf	??i2_printRTC,f,c
 17320  002564  0E0F               	movlw	15
 17321  002566  162A               	andwf	??i2_printRTC,f,c
 17322  002568  502A               	movf	??i2_printRTC,w,c
 17323  00256A  0D0A               	mullw	10
 17324  00256C  0E24               	movlw	low _time
 17325  00256E  2441               	addwf	i2printRTC@i,w,c
 17326  002570  6ED9               	movwf	fsr2l,c
 17327  002572  0E01               	movlw	high _time
 17328  002574  2042               	addwfc	i2printRTC@i+1,w,c
 17329  002576  6EDA               	movwf	fsr2h,c
 17330  002578  50DF               	movf	indf2,w,c
 17331  00257A  0B0F               	andlw	15
 17332  00257C  6E2B               	movwf	(??i2_printRTC+1)& (0+255),c
 17333  00257E  6A2C               	clrf	(??i2_printRTC+2)& (0+255),c
 17334  002580  50F3               	movf	prodl,w,c
 17335  002582  262B               	addwf	??i2_printRTC+1,f,c
 17336  002584  50F4               	movf	prodh,w,c
 17337  002586  222C               	addwfc	??i2_printRTC+2,f,c
 17338  002588  90D8               	bcf	status,0,c
 17339  00258A  3441               	rlcf	i2printRTC@i,w,c
 17340  00258C  6ED9               	movwf	fsr2l,c
 17341  00258E  3442               	rlcf	i2printRTC@i+1,w,c
 17342  002590  6EDA               	movwf	fsr2h,c
 17343  002592  0E2D               	movlw	low i2printRTC@INT_time
 17344  002594  26D9               	addwf	fsr2l,f,c
 17345  002596  0E00               	movlw	high i2printRTC@INT_time
 17346  002598  22DA               	addwfc	fsr2h,f,c
 17347  00259A  C02B  FFDE         	movff	??i2_printRTC+1,postinc2
 17348  00259E  C02C  FFDD         	movff	??i2_printRTC+2,postdec2
 17349  0025A2  4A41               	infsnz	i2printRTC@i,f,c
 17350  0025A4  2A42               	incf	i2printRTC@i+1,f,c
 17351  0025A6  BE42               	btfsc	i2printRTC@i+1,7,c
 17352  0025A8  D7D2               	goto	i2l6348
 17353  0025AA  5042               	movf	i2printRTC@i+1,w,c
 17354  0025AC  E101               	bnz	i2u488_40
 17355  0025AE  D7CB               	goto	L10
 17356  0025B0                     i2u488_40:
 17357  0025B0                     i2l602:
 17358                           
 17359                           ;RTC.c: 69: }
 17360                           ;RTC.c: 70: int RTC_month = INT_time[5];
 17361  0025B0  C037  F03B         	movff	i2printRTC@INT_time+10,i2printRTC@RTC_month
 17362  0025B4  C038  F03C         	movff	i2printRTC@INT_time+11,i2printRTC@RTC_month+1
 17363                           
 17364                           ;RTC.c: 71: switch(RTC_month){
 17365  0025B8  D084               	goto	i2l6380
 17366  0025BA                     i2l6354:
 17367                           
 17368                           ;RTC.c: 73: strcpy(month, "JAN");
 17369  0025BA  0E3D               	movlw	low i2printRTC@month
 17370  0025BC  6E01               	movwf	i2strcpy@to,c
 17371  0025BE  0E00               	movlw	high i2printRTC@month
 17372  0025C0  6E02               	movwf	i2strcpy@to+1,c
 17373  0025C2  0EDB               	movlw	low STR_8
 17374  0025C4  6E03               	movwf	i2strcpy@from,c
 17375  0025C6  0EFF               	movlw	high STR_8
 17376  0025C8  6E04               	movwf	i2strcpy@from+1,c
 17377  0025CA  ECF7  F022         	call	i2_strcpy	;wreg free
 17378                           
 17379                           ;RTC.c: 74: break;
 17380  0025CE  D0A6               	goto	i2l6382
 17381  0025D0                     i2l6356:
 17382                           
 17383                           ;RTC.c: 76: strcpy(month, "FEB");
 17384  0025D0  0E3D               	movlw	low i2printRTC@month
 17385  0025D2  6E01               	movwf	i2strcpy@to,c
 17386  0025D4  0E00               	movlw	high i2printRTC@month
 17387  0025D6  6E02               	movwf	i2strcpy@to+1,c
 17388  0025D8  0ECB               	movlw	low STR_9
 17389  0025DA  6E03               	movwf	i2strcpy@from,c
 17390  0025DC  0EFF               	movlw	high STR_9
 17391  0025DE  6E04               	movwf	i2strcpy@from+1,c
 17392  0025E0  ECF7  F022         	call	i2_strcpy	;wreg free
 17393                           
 17394                           ;RTC.c: 77: break;
 17395  0025E4  D09B               	goto	i2l6382
 17396  0025E6                     i2l6358:
 17397                           
 17398                           ;RTC.c: 79: strcpy(month, "MAR");
 17399  0025E6  0E3D               	movlw	low i2printRTC@month
 17400  0025E8  6E01               	movwf	i2strcpy@to,c
 17401  0025EA  0E00               	movlw	high i2printRTC@month
 17402  0025EC  6E02               	movwf	i2strcpy@to+1,c
 17403  0025EE  0EE7               	movlw	low STR_10
 17404  0025F0  6E03               	movwf	i2strcpy@from,c
 17405  0025F2  0EFF               	movlw	high STR_10
 17406  0025F4  6E04               	movwf	i2strcpy@from+1,c
 17407  0025F6  ECF7  F022         	call	i2_strcpy	;wreg free
 17408                           
 17409                           ;RTC.c: 80: break;
 17410  0025FA  D090               	goto	i2l6382
 17411  0025FC                     i2l6360:
 17412                           
 17413                           ;RTC.c: 82: strcpy(month, "APR");
 17414  0025FC  0E3D               	movlw	low i2printRTC@month
 17415  0025FE  6E01               	movwf	i2strcpy@to,c
 17416  002600  0E00               	movlw	high i2printRTC@month
 17417  002602  6E02               	movwf	i2strcpy@to+1,c
 17418  002604  0EEB               	movlw	low STR_11
 17419  002606  6E03               	movwf	i2strcpy@from,c
 17420  002608  0EFF               	movlw	high STR_11
 17421  00260A  6E04               	movwf	i2strcpy@from+1,c
 17422  00260C  ECF7  F022         	call	i2_strcpy	;wreg free
 17423                           
 17424                           ;RTC.c: 83: break;
 17425  002610  D085               	goto	i2l6382
 17426  002612                     i2l6362:
 17427                           
 17428                           ;RTC.c: 85: strcpy(month, "MAY");
 17429  002612  0E3D               	movlw	low i2printRTC@month
 17430  002614  6E01               	movwf	i2strcpy@to,c
 17431  002616  0E00               	movlw	high i2printRTC@month
 17432  002618  6E02               	movwf	i2strcpy@to+1,c
 17433  00261A  0EFB               	movlw	low STR_12
 17434  00261C  6E03               	movwf	i2strcpy@from,c
 17435  00261E  0EFF               	movlw	high STR_12
 17436  002620  6E04               	movwf	i2strcpy@from+1,c
 17437  002622  ECF7  F022         	call	i2_strcpy	;wreg free
 17438                           
 17439                           ;RTC.c: 86: break;
 17440  002626  D07A               	goto	i2l6382
 17441  002628                     i2l6364:
 17442                           
 17443                           ;RTC.c: 88: strcpy(month, "JUN");
 17444  002628  0E3D               	movlw	low i2printRTC@month
 17445  00262A  6E01               	movwf	i2strcpy@to,c
 17446  00262C  0E00               	movlw	high i2printRTC@month
 17447  00262E  6E02               	movwf	i2strcpy@to+1,c
 17448  002630  0EDF               	movlw	low STR_13
 17449  002632  6E03               	movwf	i2strcpy@from,c
 17450  002634  0EFF               	movlw	high STR_13
 17451  002636  6E04               	movwf	i2strcpy@from+1,c
 17452  002638  ECF7  F022         	call	i2_strcpy	;wreg free
 17453                           
 17454                           ;RTC.c: 89: break;
 17455  00263C  D06F               	goto	i2l6382
 17456  00263E                     i2l6366:
 17457                           
 17458                           ;RTC.c: 91: strcpy(month, "JUL");
 17459  00263E  0E3D               	movlw	low i2printRTC@month
 17460  002640  6E01               	movwf	i2strcpy@to,c
 17461  002642  0E00               	movlw	high i2printRTC@month
 17462  002644  6E02               	movwf	i2strcpy@to+1,c
 17463  002646  0ED7               	movlw	low STR_14
 17464  002648  6E03               	movwf	i2strcpy@from,c
 17465  00264A  0EFF               	movlw	high STR_14
 17466  00264C  6E04               	movwf	i2strcpy@from+1,c
 17467  00264E  ECF7  F022         	call	i2_strcpy	;wreg free
 17468                           
 17469                           ;RTC.c: 92: break;
 17470  002652  D064               	goto	i2l6382
 17471  002654                     i2l6368:
 17472                           
 17473                           ;RTC.c: 94: strcpy(month, "AUG");
 17474  002654  0E3D               	movlw	low i2printRTC@month
 17475  002656  6E01               	movwf	i2strcpy@to,c
 17476  002658  0E00               	movlw	high i2printRTC@month
 17477  00265A  6E02               	movwf	i2strcpy@to+1,c
 17478  00265C  0ED3               	movlw	low STR_15
 17479  00265E  6E03               	movwf	i2strcpy@from,c
 17480  002660  0EFF               	movlw	high STR_15
 17481  002662  6E04               	movwf	i2strcpy@from+1,c
 17482  002664  ECF7  F022         	call	i2_strcpy	;wreg free
 17483                           
 17484                           ;RTC.c: 95: break;
 17485  002668  D059               	goto	i2l6382
 17486  00266A                     i2l6370:
 17487                           
 17488                           ;RTC.c: 97: strcpy(month, "SEP");
 17489  00266A  0E3D               	movlw	low i2printRTC@month
 17490  00266C  6E01               	movwf	i2strcpy@to,c
 17491  00266E  0E00               	movlw	high i2printRTC@month
 17492  002670  6E02               	movwf	i2strcpy@to+1,c
 17493  002672  0EE3               	movlw	low STR_16
 17494  002674  6E03               	movwf	i2strcpy@from,c
 17495  002676  0EFF               	movlw	high STR_16
 17496  002678  6E04               	movwf	i2strcpy@from+1,c
 17497  00267A  ECF7  F022         	call	i2_strcpy	;wreg free
 17498                           
 17499                           ;RTC.c: 98: break;
 17500  00267E  D04E               	goto	i2l6382
 17501  002680                     i2l6372:
 17502                           
 17503                           ;RTC.c: 100: strcpy(month, "OCT");
 17504  002680  0E3D               	movlw	low i2printRTC@month
 17505  002682  6E01               	movwf	i2strcpy@to,c
 17506  002684  0E00               	movlw	high i2printRTC@month
 17507  002686  6E02               	movwf	i2strcpy@to+1,c
 17508  002688  0EF3               	movlw	low STR_17
 17509  00268A  6E03               	movwf	i2strcpy@from,c
 17510  00268C  0EFF               	movlw	high STR_17
 17511  00268E  6E04               	movwf	i2strcpy@from+1,c
 17512  002690  ECF7  F022         	call	i2_strcpy	;wreg free
 17513                           
 17514                           ;RTC.c: 101: break;
 17515  002694  D043               	goto	i2l6382
 17516  002696                     i2l6374:
 17517                           
 17518                           ;RTC.c: 103: strcpy(month, "NOV");
 17519  002696  0E3D               	movlw	low i2printRTC@month
 17520  002698  6E01               	movwf	i2strcpy@to,c
 17521  00269A  0E00               	movlw	high i2printRTC@month
 17522  00269C  6E02               	movwf	i2strcpy@to+1,c
 17523  00269E  0EF7               	movlw	low STR_18
 17524  0026A0  6E03               	movwf	i2strcpy@from,c
 17525  0026A2  0EFF               	movlw	high STR_18
 17526  0026A4  6E04               	movwf	i2strcpy@from+1,c
 17527  0026A6  ECF7  F022         	call	i2_strcpy	;wreg free
 17528                           
 17529                           ;RTC.c: 104: break;
 17530  0026AA  D038               	goto	i2l6382
 17531  0026AC                     i2l6376:
 17532                           
 17533                           ;RTC.c: 106: strcpy(month, "DEC");
 17534  0026AC  0E3D               	movlw	low i2printRTC@month
 17535  0026AE  6E01               	movwf	i2strcpy@to,c
 17536  0026B0  0E00               	movlw	high i2printRTC@month
 17537  0026B2  6E02               	movwf	i2strcpy@to+1,c
 17538  0026B4  0ECF               	movlw	low STR_19
 17539  0026B6  6E03               	movwf	i2strcpy@from,c
 17540  0026B8  0EFF               	movlw	high STR_19
 17541  0026BA  6E04               	movwf	i2strcpy@from+1,c
 17542  0026BC  ECF7  F022         	call	i2_strcpy	;wreg free
 17543                           
 17544                           ;RTC.c: 108: }
 17545                           
 17546                           ;RTC.c: 107: break;
 17547  0026C0  D02D               	goto	i2l6382
 17548  0026C2                     i2l6380:
 17549  0026C2  C03B  F02A         	movff	i2printRTC@RTC_month,??i2_printRTC
 17550  0026C6  C03C  F02B         	movff	i2printRTC@RTC_month+1,??i2_printRTC+1
 17551                           
 17552                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 17553                           ; Switch size 1, requested type "space"
 17554                           ; Number of cases is 1, Range of values is 0 to 0
 17555                           ; switch strategies available:
 17556                           ; Name         Instructions Cycles
 17557                           ; simple_byte            4     3 (average)
 17558                           ;	Chosen strategy is simple_byte
 17559  0026CA  502B               	movf	??i2_printRTC+1,w,c
 17560  0026CC  0A00               	xorlw	0	; case 0
 17561  0026CE  A4D8               	btfss	status,2,c
 17562  0026D0  D025               	goto	i2l6382
 17563                           
 17564                           ; Switch size 1, requested type "space"
 17565                           ; Number of cases is 12, Range of values is 1 to 12
 17566                           ; switch strategies available:
 17567                           ; Name         Instructions Cycles
 17568                           ; simple_byte           37    19 (average)
 17569                           ;	Chosen strategy is simple_byte
 17570  0026D2  502A               	movf	??i2_printRTC,w,c
 17571  0026D4  0A01               	xorlw	1	; case 1
 17572  0026D6  B4D8               	btfsc	status,2,c
 17573  0026D8  D770               	goto	i2l6354
 17574  0026DA  0A03               	xorlw	3	; case 2
 17575  0026DC  B4D8               	btfsc	status,2,c
 17576  0026DE  D778               	goto	i2l6356
 17577  0026E0  0A01               	xorlw	1	; case 3
 17578  0026E2  B4D8               	btfsc	status,2,c
 17579  0026E4  D780               	goto	i2l6358
 17580  0026E6  0A07               	xorlw	7	; case 4
 17581  0026E8  B4D8               	btfsc	status,2,c
 17582  0026EA  D788               	goto	i2l6360
 17583  0026EC  0A01               	xorlw	1	; case 5
 17584  0026EE  B4D8               	btfsc	status,2,c
 17585  0026F0  D790               	goto	i2l6362
 17586  0026F2  0A03               	xorlw	3	; case 6
 17587  0026F4  B4D8               	btfsc	status,2,c
 17588  0026F6  D798               	goto	i2l6364
 17589  0026F8  0A01               	xorlw	1	; case 7
 17590  0026FA  B4D8               	btfsc	status,2,c
 17591  0026FC  D7A0               	goto	i2l6366
 17592  0026FE  0A0F               	xorlw	15	; case 8
 17593  002700  B4D8               	btfsc	status,2,c
 17594  002702  D7A8               	goto	i2l6368
 17595  002704  0A01               	xorlw	1	; case 9
 17596  002706  B4D8               	btfsc	status,2,c
 17597  002708  D7B0               	goto	i2l6370
 17598  00270A  0A03               	xorlw	3	; case 10
 17599  00270C  B4D8               	btfsc	status,2,c
 17600  00270E  D7B8               	goto	i2l6372
 17601  002710  0A01               	xorlw	1	; case 11
 17602  002712  B4D8               	btfsc	status,2,c
 17603  002714  D7C0               	goto	i2l6374
 17604  002716  0A07               	xorlw	7	; case 12
 17605  002718  B4D8               	btfsc	status,2,c
 17606  00271A  D7C8               	goto	i2l6376
 17607  00271C                     i2l6382:
 17608                           
 17609                           ;RTC.c: 109: lcdInst(0b10000000);;
 17610  00271C  0E80               	movlw	128
 17611  00271E  EC4A  F025         	call	i2_lcdInst
 17612                           
 17613                           ;RTC.c: 110: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
 17614  002722  0E1C               	movlw	low STR_21
 17615  002724  6E0D               	movwf	i2printf@f,c
 17616  002726  0EFB               	movlw	high STR_21
 17617  002728  6E0E               	movwf	i2printf@f+1,c
 17618  00272A  C035  F00F         	movff	i2printRTC@INT_time+8,?i2_printf+2
 17619  00272E  C036  F010         	movff	i2printRTC@INT_time+9,?i2_printf+3
 17620  002732  0E3D               	movlw	low i2printRTC@month
 17621  002734  6E11               	movwf	?i2_printf+4,c
 17622  002736  0E00               	movlw	high i2printRTC@month
 17623  002738  6E12               	movwf	?i2_printf+5,c
 17624  00273A  C031  F013         	movff	i2printRTC@INT_time+4,?i2_printf+6
 17625  00273E  C032  F014         	movff	i2printRTC@INT_time+5,?i2_printf+7
 17626  002742  C02F  F015         	movff	i2printRTC@INT_time+2,?i2_printf+8
 17627  002746  C030  F016         	movff	i2printRTC@INT_time+3,?i2_printf+9
 17628  00274A  C02D  F017         	movff	i2printRTC@INT_time,?i2_printf+10
 17629  00274E  C02E  F018         	movff	i2printRTC@INT_time+1,?i2_printf+11
 17630  002752  EC96  F00C         	call	i2_printf	;wreg free
 17631  002756  0012               	return		;funcret
 17632  002758                     __end_ofi2_printRTC:
 17633                           	opt stack 0
 17634                           pclatu	equ	0xFFB
 17635                           pclath	equ	0xFFA
 17636                           tblptru	equ	0xFF8
 17637                           tblptrh	equ	0xFF7
 17638                           tblptrl	equ	0xFF6
 17639                           tablat	equ	0xFF5
 17640                           prodh	equ	0xFF4
 17641                           prodl	equ	0xFF3
 17642                           intcon	equ	0xFF2
 17643                           intcon2	equ	0xFF1
 17644                           intcon3	equ	0xFF0
 17645                           indf0	equ	0xFEF
 17646                           postinc0	equ	0xFEE
 17647                           fsr0h	equ	0xFEA
 17648                           fsr0l	equ	0xFE9
 17649                           wreg	equ	0xFE8
 17650                           postdec1	equ	0xFE5
 17651                           fsr1h	equ	0xFE2
 17652                           fsr1l	equ	0xFE1
 17653                           indf2	equ	0xFDF
 17654                           postinc2	equ	0xFDE
 17655                           postdec2	equ	0xFDD
 17656                           fsr2h	equ	0xFDA
 17657                           fsr2l	equ	0xFD9
 17658                           status	equ	0xFD8
 17659                           
 17660 ;; *************** function i2_strcpy *****************
 17661 ;; Defined at:
 17662 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
 17663 ;; Parameters:    Size  Location     Type
 17664 ;;  to              2    0[COMRAM] PTR unsigned char 
 17665 ;;		 -> printRTC@month(4), UI@month(4), 
 17666 ;;  from            2    2[COMRAM] PTR const unsigned char 
 17667 ;;		 -> STR_62(4), STR_61(4), STR_60(4), STR_59(4), 
 17668 ;;		 -> STR_58(4), STR_57(4), STR_56(4), STR_55(4), 
 17669 ;;		 -> STR_54(4), STR_53(4), STR_52(4), STR_51(4), 
 17670 ;;		 -> STR_20(4), STR_19(4), STR_18(4), STR_17(4), 
 17671 ;;		 -> STR_16(4), STR_15(4), STR_14(4), STR_13(4), 
 17672 ;;		 -> STR_12(4), STR_11(4), STR_10(4), STR_9(4), 
 17673 ;;		 -> STR_8(4), 
 17674 ;; Auto vars:     Size  Location     Type
 17675 ;;  strcpy          2    4[COMRAM] PTR unsigned char 
 17676 ;;		 -> printRTC@month(4), UI@month(4), 
 17677 ;; Return value:  Size  Location     Type
 17678 ;;                  2    0[COMRAM] PTR unsigned char 
 17679 ;; Registers used:
 17680 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 17681 ;; Tracked objects:
 17682 ;;		On entry : 0/0
 17683 ;;		On exit  : 0/0
 17684 ;;		Unchanged: 0/0
 17685 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17686 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17687 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17688 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17689 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17690 ;;Total ram usage:        6 bytes
 17691 ;; Hardware stack levels used:    1
 17692 ;; This function calls:
 17693 ;;		Nothing
 17694 ;; This function is called by:
 17695 ;;		i2_printRTC
 17696 ;; This function uses a non-reentrant model
 17697 ;;
 17698                           
 17699                           	psect	text63
 17700  0045EE                     __ptext63:
 17701                           	opt stack 0
 17702  0045EE                     i2_strcpy:
 17703                           	opt stack 20
 17704                           
 17705                           ;incstack = 0
 17706  0045EE  C001  F005         	movff	i2strcpy@to,i2strcpy@cp
 17707  0045F2  C002  F006         	movff	i2strcpy@to+1,i2strcpy@cp+1
 17708  0045F6  D004               	goto	i2l6006
 17709  0045F8                     i2l6004:
 17710  0045F8  4A05               	infsnz	i2strcpy@cp,f,c
 17711  0045FA  2A06               	incf	i2strcpy@cp+1,f,c
 17712  0045FC  4A03               	infsnz	i2strcpy@from,f,c
 17713  0045FE  2A04               	incf	i2strcpy@from+1,f,c
 17714  004600                     i2l6006:
 17715  004600  C003  FFF6         	movff	i2strcpy@from,tblptrl
 17716  004604  C004  FFF7         	movff	i2strcpy@from+1,tblptrh
 17717  004608                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 17718  004608  6AF8               	clrf	tblptru,c
 17719  00460A                     	endif
 17720  00460A                     	if	0	;tblptru may be non-zero
 17721  00460A                     	endif
 17722  00460A  C005  FFD9         	movff	i2strcpy@cp,fsr2l
 17723  00460E  C006  FFDA         	movff	i2strcpy@cp+1,fsr2h
 17724  004612  0008               	tblrd		*
 17725  004614  CFF5 FFDF          	movff	tablat,indf2
 17726  004618  50DF               	movf	indf2,w,c
 17727  00461A  B4D8               	btfsc	status,2,c
 17728  00461C  0012               	return	
 17729  00461E  D7EC               	goto	i2l6004
 17730  004620                     __end_ofi2_strcpy:
 17731                           	opt stack 0
 17732                           pclatu	equ	0xFFB
 17733                           pclath	equ	0xFFA
 17734                           tblptru	equ	0xFF8
 17735                           tblptrh	equ	0xFF7
 17736                           tblptrl	equ	0xFF6
 17737                           tablat	equ	0xFF5
 17738                           prodh	equ	0xFF4
 17739                           prodl	equ	0xFF3
 17740                           intcon	equ	0xFF2
 17741                           intcon2	equ	0xFF1
 17742                           intcon3	equ	0xFF0
 17743                           indf0	equ	0xFEF
 17744                           postinc0	equ	0xFEE
 17745                           fsr0h	equ	0xFEA
 17746                           fsr0l	equ	0xFE9
 17747                           wreg	equ	0xFE8
 17748                           postdec1	equ	0xFE5
 17749                           fsr1h	equ	0xFE2
 17750                           fsr1l	equ	0xFE1
 17751                           indf2	equ	0xFDF
 17752                           postinc2	equ	0xFDE
 17753                           postdec2	equ	0xFDD
 17754                           fsr2h	equ	0xFDA
 17755                           fsr2l	equ	0xFD9
 17756                           status	equ	0xFD8
 17757                           
 17758 ;; *************** function _inputHandler *****************
 17759 ;; Defined at:
 17760 ;;		line 372 in file "UI.c"
 17761 ;; Parameters:    Size  Location     Type
 17762 ;;		None
 17763 ;; Auto vars:     Size  Location     Type
 17764 ;;		None
 17765 ;; Return value:  Size  Location     Type
 17766 ;;                  2   41[COMRAM] int 
 17767 ;; Registers used:
 17768 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17769 ;; Tracked objects:
 17770 ;;		On entry : 0/0
 17771 ;;		On exit  : 0/0
 17772 ;;		Unchanged: 0/0
 17773 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17774 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17775 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17776 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17777 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17778 ;;Total ram usage:        4 bytes
 17779 ;; Hardware stack levels used:    1
 17780 ;; Hardware stack levels required when called:    4
 17781 ;; This function calls:
 17782 ;;		_change_state_to_logs_11
 17783 ;;		_change_state_to_logs_12
 17784 ;;		_change_state_to_logs_22
 17785 ;;		_change_state_to_logs_23
 17786 ;;		_change_state_to_logs_33
 17787 ;;		_change_state_to_logs_34
 17788 ;;		_change_state_to_menu_11
 17789 ;;		_change_state_to_menu_23
 17790 ;;		i2_change_state_to_menu_12
 17791 ;;		i2_change_state_to_menu_22
 17792 ;; This function is called by:
 17793 ;;		_updateMenu
 17794 ;; This function uses a non-reentrant model
 17795 ;;
 17796                           
 17797                           	psect	text64
 17798  002D44                     __ptext64:
 17799                           	opt stack 0
 17800  002D44                     _inputHandler:
 17801                           	opt stack 18
 17802                           
 17803                           ;UI.c: 377: if(firstboot){
 17804                           
 17805                           ;incstack = 0
 17806  002D44  5071               	movf	_firstboot,w,c
 17807  002D46  1072               	iorwf	_firstboot+1,w,c
 17808  002D48  B4D8               	btfsc	status,2,c
 17809  002D4A  D00B               	goto	i2l6450
 17810                           
 17811                           ;UI.c: 378: change_state_to_menu_11();
 17812  002D4C  EC58  F023         	call	_change_state_to_menu_11	;wreg free
 17813                           
 17814                           ;UI.c: 379: firstboot = 0;
 17815  002D50  0E00               	movlw	0
 17816  002D52  6E72               	movwf	_firstboot+1,c
 17817  002D54  0E00               	movlw	0
 17818  002D56  6E71               	movwf	_firstboot,c
 17819                           
 17820                           ;UI.c: 380: return 0;
 17821  002D58  0E00               	movlw	0
 17822  002D5A  6E2B               	movwf	?_inputHandler+1,c
 17823  002D5C  0E00               	movlw	0
 17824  002D5E  6E2A               	movwf	?_inputHandler,c
 17825  002D60  0012               	return	
 17826  002D62                     i2l6450:
 17827                           
 17828                           ;UI.c: 381: }
 17829                           ;UI.c: 382: if (logstate){
 17830  002D62  0100               	movlb	0	; () banked
 17831  002D64  51F6               	movf	_logstate& (0+255),w,b
 17832  002D66  0100               	movlb	0	; () banked
 17833  002D68  11F7               	iorwf	(_logstate+1)& (0+255),w,b
 17834  002D6A  B4D8               	btfsc	status,2,c
 17835  002D6C  D0C7               	goto	i2l6568
 17836                           
 17837                           ; BSR set to: 0
 17838                           ;UI.c: 383: if(input == 'C' && PORTBbits.RB1 == 1){
 17839  002D6E  0E43               	movlw	67
 17840  002D70  187D               	xorwf	_input,w,c	;volatile
 17841  002D72  A4D8               	btfss	status,2,c
 17842  002D74  D012               	goto	i2l6468
 17843                           
 17844                           ; BSR set to: 0
 17845  002D76  B281               	btfsc	3969,1,c	;volatile
 17846  002D78  D009               	goto	i2l6460
 17847  002D7A  D00F               	goto	i2l6468
 17848  002D7C                     i2l6458:
 17849                           
 17850                           ;UI.c: 386: _delay((unsigned long)((10)*(32000000/4000.0)));
 17851  002D7C  0E68               	movlw	104
 17852  002D7E  6E2C               	movwf	??_inputHandler& (0+255),c
 17853  002D80  0EE4               	movlw	228
 17854  002D82                     i2u877_47:
 17855  002D82  2EE8               	decfsz	wreg,f,c
 17856  002D84  D7FE               	bra	i2u877_47
 17857  002D86  2E2C               	decfsz	??_inputHandler& (0+255),f,c
 17858  002D88  D7FC               	bra	i2u877_47
 17859  002D8A  D000               	nop2	
 17860  002D8C                     i2l6460:
 17861  002D8C  B281               	btfsc	3969,1,c	;volatile
 17862  002D8E  D7F6               	goto	i2l6458
 17863  002D90                     i2l6462:
 17864                           
 17865                           ;UI.c: 387: }
 17866                           ;UI.c: 388: return 0;
 17867  002D90  0E00               	movlw	0
 17868  002D92  6E2B               	movwf	?_inputHandler+1,c
 17869  002D94  0E00               	movlw	0
 17870  002D96  6E2A               	movwf	?_inputHandler,c
 17871  002D98  0012               	return	
 17872  002D9A                     i2l6468:
 17873                           
 17874                           ;UI.c: 390: else if (input == 'D'){
 17875  002D9A  0E44               	movlw	68
 17876  002D9C  187D               	xorwf	_input,w,c	;volatile
 17877  002D9E  A4D8               	btfss	status,2,c
 17878  002DA0  D7F7               	goto	i2l6462
 17879                           
 17880                           ;UI.c: 392: logstate = 0;
 17881  002DA2  0E00               	movlw	0
 17882  002DA4  0100               	movlb	0	; () banked
 17883  002DA6  6FF7               	movwf	(_logstate+1)& (0+255),b
 17884  002DA8  0E00               	movlw	0
 17885  002DAA  6FF6               	movwf	_logstate& (0+255),b
 17886                           
 17887                           ;UI.c: 393: switch(cur_state){
 17888  002DAC  D012               	goto	i2l6486
 17889  002DAE                     i2l6472:
 17890                           
 17891                           ;UI.c: 395: change_state_to_logs_11();
 17892  002DAE  ECD0  F023         	call	_change_state_to_logs_11	;wreg free
 17893                           
 17894                           ;UI.c: 396: break;
 17895  002DB2  D7EE               	goto	i2l6462
 17896  002DB4                     i2l6474:
 17897                           
 17898                           ;UI.c: 398: change_state_to_logs_12();
 17899  002DB4  ECB8  F023         	call	_change_state_to_logs_12	;wreg free
 17900                           
 17901                           ;UI.c: 399: break;
 17902  002DB8  D7EB               	goto	i2l6462
 17903  002DBA                     i2l6476:
 17904                           
 17905                           ;UI.c: 401: change_state_to_logs_22();
 17906  002DBA  ECA0  F023         	call	_change_state_to_logs_22	;wreg free
 17907                           
 17908                           ;UI.c: 402: break;
 17909  002DBE  D7E8               	goto	i2l6462
 17910  002DC0                     i2l6478:
 17911                           
 17912                           ;UI.c: 404: change_state_to_logs_23();
 17913  002DC0  EC16  F024         	call	_change_state_to_logs_23	;wreg free
 17914                           
 17915                           ;UI.c: 405: break;
 17916  002DC4  D7E5               	goto	i2l6462
 17917  002DC6                     i2l6480:
 17918                           
 17919                           ;UI.c: 407: change_state_to_logs_33();
 17920  002DC6  EC88  F023         	call	_change_state_to_logs_33	;wreg free
 17921                           
 17922                           ;UI.c: 408: break;
 17923  002DCA  D7E2               	goto	i2l6462
 17924  002DCC                     i2l6482:
 17925                           
 17926                           ;UI.c: 410: change_state_to_logs_34();
 17927  002DCC  EC70  F023         	call	_change_state_to_logs_34	;wreg free
 17928                           
 17929                           ;UI.c: 412: }
 17930                           
 17931                           ;UI.c: 411: break;
 17932  002DD0  D7DF               	goto	i2l6462
 17933  002DD2                     i2l6486:
 17934  002DD2  C0E6  F02C         	movff	_cur_state,??_inputHandler
 17935  002DD6  C0E7  F02D         	movff	_cur_state+1,??_inputHandler+1
 17936                           
 17937                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
 17938                           ; Switch size 1, requested type "space"
 17939                           ; Number of cases is 2, Range of values is 3 to 4
 17940                           ; switch strategies available:
 17941                           ; Name         Instructions Cycles
 17942                           ; simple_byte            7     4 (average)
 17943                           ;	Chosen strategy is simple_byte
 17944  002DDA  502D               	movf	??_inputHandler+1,w,c
 17945  002DDC  0A03               	xorlw	3	; case 3
 17946  002DDE  B4D8               	btfsc	status,2,c
 17947  002DE0  D004               	goto	i2l8822
 17948  002DE2  0A07               	xorlw	7	; case 4
 17949  002DE4  B4D8               	btfsc	status,2,c
 17950  002DE6  D00F               	goto	i2l8824
 17951  002DE8  D7D3               	goto	i2l6462
 17952  002DEA                     i2l8822:
 17953                           
 17954                           ; Switch size 1, requested type "space"
 17955                           ; Number of cases is 4, Range of values is 243 to 255
 17956                           ; switch strategies available:
 17957                           ; Name         Instructions Cycles
 17958                           ; simple_byte           13     7 (average)
 17959                           ;	Chosen strategy is simple_byte
 17960  002DEA  502C               	movf	??_inputHandler,w,c
 17961  002DEC  0AF3               	xorlw	243	; case 243
 17962  002DEE  B4D8               	btfsc	status,2,c
 17963  002DF0  D7DE               	goto	i2l6472
 17964  002DF2  0A07               	xorlw	7	; case 244
 17965  002DF4  B4D8               	btfsc	status,2,c
 17966  002DF6  D7DE               	goto	i2l6474
 17967  002DF8  0A0A               	xorlw	10	; case 254
 17968  002DFA  B4D8               	btfsc	status,2,c
 17969  002DFC  D7DE               	goto	i2l6476
 17970  002DFE  0A01               	xorlw	1	; case 255
 17971  002E00  B4D8               	btfsc	status,2,c
 17972  002E02  D7DE               	goto	i2l6478
 17973  002E04  D7C5               	goto	i2l6462
 17974  002E06                     i2l8824:
 17975                           
 17976                           ; Switch size 1, requested type "space"
 17977                           ; Number of cases is 2, Range of values is 9 to 10
 17978                           ; switch strategies available:
 17979                           ; Name         Instructions Cycles
 17980                           ; simple_byte            7     4 (average)
 17981                           ;	Chosen strategy is simple_byte
 17982  002E06  502C               	movf	??_inputHandler,w,c
 17983  002E08  0A09               	xorlw	9	; case 9
 17984  002E0A  B4D8               	btfsc	status,2,c
 17985  002E0C  D7DC               	goto	i2l6480
 17986  002E0E  0A03               	xorlw	3	; case 10
 17987  002E10  B4D8               	btfsc	status,2,c
 17988  002E12  D7DC               	goto	i2l6482
 17989  002E14  D7BD               	goto	i2l6462
 17990  002E16                     i2l6498:
 17991                           
 17992                           ;UI.c: 422: if(cur_state == 11){
 17993  002E16  0E0B               	movlw	11
 17994  002E18  0100               	movlb	0	; () banked
 17995  002E1A  19E6               	xorwf	_cur_state& (0+255),w,b
 17996  002E1C  0100               	movlb	0	; () banked
 17997  002E1E  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
 17998  002E20  A4D8               	btfss	status,2,c
 17999  002E22  D005               	goto	i2l6506
 18000                           
 18001                           ; BSR set to: 0
 18002                           ;UI.c: 423: return 0;
 18003  002E24  0E00               	movlw	0
 18004  002E26  6E2B               	movwf	?_inputHandler+1,c
 18005  002E28  0E00               	movlw	0
 18006  002E2A  6E2A               	movwf	?_inputHandler,c
 18007                           
 18008                           ; BSR set to: 0
 18009  002E2C  0012               	return	
 18010  002E2E                     i2l6506:
 18011                           
 18012                           ; BSR set to: 0
 18013                           ;UI.c: 425: else{
 18014                           ;UI.c: 426: change_state_to_menu_11();
 18015  002E2E  EC58  F023         	call	_change_state_to_menu_11	;wreg free
 18016                           
 18017                           ;UI.c: 427: }
 18018                           ;UI.c: 428: return 0;
 18019  002E32  0E00               	movlw	0
 18020  002E34  6E2B               	movwf	?_inputHandler+1,c
 18021  002E36  0E00               	movlw	0
 18022  002E38  6E2A               	movwf	?_inputHandler,c
 18023  002E3A  0012               	return	
 18024  002E3C                     i2l6512:
 18025                           
 18026                           ;UI.c: 430: if(cur_state == 22 | cur_state == 12){
 18027  002E3C  0E16               	movlw	22
 18028  002E3E  0100               	movlb	0	; () banked
 18029  002E40  19E6               	xorwf	_cur_state& (0+255),w,b
 18030  002E42  0100               	movlb	0	; () banked
 18031  002E44  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
 18032  002E46  B4D8               	btfsc	status,2,c
 18033  002E48  D007               	goto	i2l6516
 18034                           
 18035                           ; BSR set to: 0
 18036  002E4A  0E0C               	movlw	12
 18037  002E4C  0100               	movlb	0	; () banked
 18038  002E4E  19E6               	xorwf	_cur_state& (0+255),w,b
 18039  002E50  0100               	movlb	0	; () banked
 18040  002E52  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
 18041  002E54  A4D8               	btfss	status,2,c
 18042  002E56  D005               	goto	i2l6522
 18043  002E58                     i2l6516:
 18044                           
 18045                           ; BSR set to: 0
 18046                           ;UI.c: 431: return 0;
 18047  002E58  0E00               	movlw	0
 18048  002E5A  6E2B               	movwf	?_inputHandler+1,c
 18049  002E5C  0E00               	movlw	0
 18050  002E5E  6E2A               	movwf	?_inputHandler,c
 18051                           
 18052                           ; BSR set to: 0
 18053  002E60  0012               	return	
 18054  002E62                     i2l6522:
 18055                           
 18056                           ; BSR set to: 0
 18057                           ;UI.c: 433: else if(cur_state == 23){
 18058  002E62  0E17               	movlw	23
 18059  002E64  0100               	movlb	0	; () banked
 18060  002E66  19E6               	xorwf	_cur_state& (0+255),w,b
 18061  002E68  0100               	movlb	0	; () banked
 18062  002E6A  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
 18063  002E6C  A4D8               	btfss	status,2,c
 18064  002E6E  D003               	goto	i2l6526
 18065                           
 18066                           ; BSR set to: 0
 18067                           ;UI.c: 434: change_state_to_menu_22();
 18068  002E70  EC10  F023         	call	i2_change_state_to_menu_22	;wreg free
 18069                           
 18070                           ;UI.c: 435: }
 18071  002E74  D002               	goto	i2l6528
 18072  002E76                     i2l6526:
 18073                           
 18074                           ;UI.c: 436: else{
 18075                           ;UI.c: 437: change_state_to_menu_12();
 18076  002E76  EC28  F023         	call	i2_change_state_to_menu_12	;wreg free
 18077  002E7A                     i2l6528:
 18078                           
 18079                           ;UI.c: 438: }
 18080                           ;UI.c: 439: return 0;
 18081  002E7A  0E00               	movlw	0
 18082  002E7C  6E2B               	movwf	?_inputHandler+1,c
 18083  002E7E  0E00               	movlw	0
 18084  002E80  6E2A               	movwf	?_inputHandler,c
 18085  002E82  0012               	return	
 18086  002E84                     i2l6532:
 18087                           
 18088                           ;UI.c: 441: if(cur_state == 23){
 18089  002E84  0E17               	movlw	23
 18090  002E86  0100               	movlb	0	; () banked
 18091  002E88  19E6               	xorwf	_cur_state& (0+255),w,b
 18092  002E8A  0100               	movlb	0	; () banked
 18093  002E8C  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
 18094  002E8E  A4D8               	btfss	status,2,c
 18095  002E90  D005               	goto	i2l6540
 18096                           
 18097                           ; BSR set to: 0
 18098                           ;UI.c: 442: return 0;
 18099  002E92  0E00               	movlw	0
 18100  002E94  6E2B               	movwf	?_inputHandler+1,c
 18101  002E96  0E00               	movlw	0
 18102  002E98  6E2A               	movwf	?_inputHandler,c
 18103                           
 18104                           ; BSR set to: 0
 18105  002E9A  0012               	return	
 18106  002E9C                     i2l6540:
 18107                           
 18108                           ; BSR set to: 0
 18109                           ;UI.c: 444: else{
 18110                           ;UI.c: 445: change_state_to_menu_23();
 18111  002E9C  EC40  F023         	call	_change_state_to_menu_23	;wreg free
 18112                           
 18113                           ;UI.c: 446: }
 18114                           ;UI.c: 447: return 0;
 18115  002EA0  0E00               	movlw	0
 18116  002EA2  6E2B               	movwf	?_inputHandler+1,c
 18117  002EA4  0E00               	movlw	0
 18118  002EA6  6E2A               	movwf	?_inputHandler,c
 18119  002EA8  0012               	return	
 18120  002EAA                     i2l6546:
 18121                           
 18122                           ;UI.c: 450: up = 1;
 18123  002EAA  0E00               	movlw	0
 18124  002EAC  6E78               	movwf	_up+1,c
 18125  002EAE  0E01               	movlw	1
 18126  002EB0  6E77               	movwf	_up,c
 18127                           
 18128                           ;UI.c: 451: return 1;
 18129  002EB2  0E00               	movlw	0
 18130  002EB4  6E2B               	movwf	?_inputHandler+1,c
 18131  002EB6  0E01               	movlw	1
 18132  002EB8  6E2A               	movwf	?_inputHandler,c
 18133  002EBA  0012               	return	
 18134  002EBC                     i2l6550:
 18135                           
 18136                           ;UI.c: 453: down = 1;
 18137  002EBC  0E00               	movlw	0
 18138  002EBE  6E64               	movwf	_down+1,c
 18139  002EC0  0E01               	movlw	1
 18140  002EC2  6E63               	movwf	_down,c
 18141                           
 18142                           ;UI.c: 454: return 1;
 18143  002EC4  0E00               	movlw	0
 18144  002EC6  6E2B               	movwf	?_inputHandler+1,c
 18145  002EC8  0E01               	movlw	1
 18146  002ECA  6E2A               	movwf	?_inputHandler,c
 18147  002ECC  0012               	return	
 18148  002ECE                     i2l6554:
 18149                           
 18150                           ;UI.c: 456: enter = 1;
 18151  002ECE  0E00               	movlw	0
 18152  002ED0  6E66               	movwf	_enter+1,c
 18153  002ED2  0E01               	movlw	1
 18154  002ED4  6E65               	movwf	_enter,c
 18155                           
 18156                           ;UI.c: 457: return 1;
 18157  002ED6  0E00               	movlw	0
 18158  002ED8  6E2B               	movwf	?_inputHandler+1,c
 18159  002EDA  0E01               	movlw	1
 18160  002EDC  6E2A               	movwf	?_inputHandler,c
 18161  002EDE  0012               	return	
 18162  002EE0                     i2l6558:
 18163                           
 18164                           ;UI.c: 459: back = 1;
 18165  002EE0  0E00               	movlw	0
 18166  002EE2  6E5C               	movwf	_back+1,c
 18167  002EE4  0E01               	movlw	1
 18168  002EE6  6E5B               	movwf	_back,c
 18169                           
 18170                           ;UI.c: 460: return 1;
 18171  002EE8  0E00               	movlw	0
 18172  002EEA  6E2B               	movwf	?_inputHandler+1,c
 18173  002EEC  0E01               	movlw	1
 18174  002EEE  6E2A               	movwf	?_inputHandler,c
 18175  002EF0  0012               	return	
 18176  002EF2                     i2l6562:
 18177                           
 18178                           ;UI.c: 463: return 1;
 18179  002EF2  0E00               	movlw	0
 18180  002EF4  6E2B               	movwf	?_inputHandler+1,c
 18181  002EF6  0E01               	movlw	1
 18182  002EF8  6E2A               	movwf	?_inputHandler,c
 18183                           
 18184                           ;UI.c: 464: }
 18185  002EFA  0012               	return	
 18186  002EFC                     i2l6568:
 18187  002EFC  507D               	movf	_input,w,c	;volatile
 18188                           
 18189                           ; Switch size 1, requested type "space"
 18190                           ; Number of cases is 7, Range of values is 49 to 68
 18191                           ; switch strategies available:
 18192                           ; Name         Instructions Cycles
 18193                           ; simple_byte           22    12 (average)
 18194                           ;	Chosen strategy is simple_byte
 18195  002EFE  0A31               	xorlw	49	; case 49
 18196  002F00  B4D8               	btfsc	status,2,c
 18197  002F02  D789               	goto	i2l6498
 18198  002F04  0A03               	xorlw	3	; case 50
 18199  002F06  B4D8               	btfsc	status,2,c
 18200  002F08  D799               	goto	i2l6512
 18201  002F0A  0A01               	xorlw	1	; case 51
 18202  002F0C  B4D8               	btfsc	status,2,c
 18203  002F0E  D7BA               	goto	i2l6532
 18204  002F10  0A72               	xorlw	114	; case 65
 18205  002F12  B4D8               	btfsc	status,2,c
 18206  002F14  D7CA               	goto	i2l6546
 18207  002F16  0A03               	xorlw	3	; case 66
 18208  002F18  B4D8               	btfsc	status,2,c
 18209  002F1A  D7D0               	goto	i2l6550
 18210  002F1C  0A01               	xorlw	1	; case 67
 18211  002F1E  B4D8               	btfsc	status,2,c
 18212  002F20  D7D6               	goto	i2l6554
 18213  002F22  0A07               	xorlw	7	; case 68
 18214  002F24  B4D8               	btfsc	status,2,c
 18215  002F26  D7DC               	goto	i2l6558
 18216  002F28  D7E4               	goto	i2l6562
 18217  002F2A                     __end_of_inputHandler:
 18218                           	opt stack 0
 18219                           pclatu	equ	0xFFB
 18220                           pclath	equ	0xFFA
 18221                           tblptru	equ	0xFF8
 18222                           tblptrh	equ	0xFF7
 18223                           tblptrl	equ	0xFF6
 18224                           tablat	equ	0xFF5
 18225                           prodh	equ	0xFF4
 18226                           prodl	equ	0xFF3
 18227                           intcon	equ	0xFF2
 18228                           intcon2	equ	0xFF1
 18229                           intcon3	equ	0xFF0
 18230                           indf0	equ	0xFEF
 18231                           postinc0	equ	0xFEE
 18232                           fsr0h	equ	0xFEA
 18233                           fsr0l	equ	0xFE9
 18234                           wreg	equ	0xFE8
 18235                           postdec1	equ	0xFE5
 18236                           fsr1h	equ	0xFE2
 18237                           fsr1l	equ	0xFE1
 18238                           indf2	equ	0xFDF
 18239                           postinc2	equ	0xFDE
 18240                           postdec2	equ	0xFDD
 18241                           fsr2h	equ	0xFDA
 18242                           fsr2l	equ	0xFD9
 18243                           status	equ	0xFD8
 18244                           
 18245 ;; *************** function i2_change_state_to_menu_22 *****************
 18246 ;; Defined at:
 18247 ;;		line 498 in file "UI.c"
 18248 ;; Parameters:    Size  Location     Type
 18249 ;;		None
 18250 ;; Auto vars:     Size  Location     Type
 18251 ;;		None
 18252 ;; Return value:  Size  Location     Type
 18253 ;;                  1    wreg      void 
 18254 ;; Registers used:
 18255 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18256 ;; Tracked objects:
 18257 ;;		On entry : 0/0
 18258 ;;		On exit  : 0/0
 18259 ;;		Unchanged: 0/0
 18260 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18261 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18262 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18263 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18264 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18265 ;;Total ram usage:        0 bytes
 18266 ;; Hardware stack levels used:    1
 18267 ;; Hardware stack levels required when called:    3
 18268 ;; This function calls:
 18269 ;;		i2_lcdInst
 18270 ;;		i2_printf
 18271 ;; This function is called by:
 18272 ;;		_updateMenu
 18273 ;;		_inputHandler
 18274 ;; This function uses a non-reentrant model
 18275 ;;
 18276                           
 18277                           	psect	text65
 18278  004620                     __ptext65:
 18279                           	opt stack 0
 18280  004620                     i2_change_state_to_menu_22:
 18281                           	opt stack 19
 18282                           
 18283                           ;UI.c: 499: cur_state = 22;
 18284                           
 18285                           ;incstack = 0
 18286  004620  0E00               	movlw	0
 18287  004622  0100               	movlb	0	; () banked
 18288  004624  6FE7               	movwf	(_cur_state+1)& (0+255),b
 18289  004626  0E16               	movlw	22
 18290  004628  6FE6               	movwf	_cur_state& (0+255),b
 18291                           
 18292                           ; BSR set to: 0
 18293                           ;UI.c: 501: lcdInst(0b10000000);;
 18294  00462A  0E80               	movlw	128
 18295  00462C  EC4A  F025         	call	i2_lcdInst
 18296                           
 18297                           ;UI.c: 502: printf("2. SORT        <");
 18298  004630  0EC4               	movlw	low STR_34
 18299  004632  6E0D               	movwf	i2printf@f,c
 18300  004634  0EFD               	movlw	high STR_34
 18301  004636  6E0E               	movwf	i2printf@f+1,c
 18302  004638  EC96  F00C         	call	i2_printf	;wreg free
 18303                           
 18304                           ;UI.c: 503: lcdInst(0b11000000);;
 18305  00463C  0EC0               	movlw	192
 18306  00463E  EC4A  F025         	call	i2_lcdInst
 18307                           
 18308                           ;UI.c: 504: printf("3. LOGS         ");
 18309  004642  0E09               	movlw	low STR_36
 18310  004644  6E0D               	movwf	i2printf@f,c
 18311  004646  0EFD               	movlw	high STR_36
 18312  004648  6E0E               	movwf	i2printf@f+1,c
 18313  00464A  EC96  F00C         	call	i2_printf	;wreg free
 18314  00464E  0012               	return		;funcret
 18315  004650                     __end_ofi2_change_state_to_menu_22:
 18316                           	opt stack 0
 18317                           pclatu	equ	0xFFB
 18318                           pclath	equ	0xFFA
 18319                           tblptru	equ	0xFF8
 18320                           tblptrh	equ	0xFF7
 18321                           tblptrl	equ	0xFF6
 18322                           tablat	equ	0xFF5
 18323                           prodh	equ	0xFF4
 18324                           prodl	equ	0xFF3
 18325                           intcon	equ	0xFF2
 18326                           intcon2	equ	0xFF1
 18327                           intcon3	equ	0xFF0
 18328                           indf0	equ	0xFEF
 18329                           postinc0	equ	0xFEE
 18330                           fsr0h	equ	0xFEA
 18331                           fsr0l	equ	0xFE9
 18332                           wreg	equ	0xFE8
 18333                           postdec1	equ	0xFE5
 18334                           fsr1h	equ	0xFE2
 18335                           fsr1l	equ	0xFE1
 18336                           indf2	equ	0xFDF
 18337                           postinc2	equ	0xFDE
 18338                           postdec2	equ	0xFDD
 18339                           fsr2h	equ	0xFDA
 18340                           fsr2l	equ	0xFD9
 18341                           status	equ	0xFD8
 18342                           
 18343 ;; *************** function i2_change_state_to_menu_12 *****************
 18344 ;; Defined at:
 18345 ;;		line 490 in file "UI.c"
 18346 ;; Parameters:    Size  Location     Type
 18347 ;;		None
 18348 ;; Auto vars:     Size  Location     Type
 18349 ;;		None
 18350 ;; Return value:  Size  Location     Type
 18351 ;;                  1    wreg      void 
 18352 ;; Registers used:
 18353 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18354 ;; Tracked objects:
 18355 ;;		On entry : 0/0
 18356 ;;		On exit  : 0/0
 18357 ;;		Unchanged: 0/0
 18358 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18359 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18360 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18361 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18362 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18363 ;;Total ram usage:        0 bytes
 18364 ;; Hardware stack levels used:    1
 18365 ;; Hardware stack levels required when called:    3
 18366 ;; This function calls:
 18367 ;;		i2_lcdInst
 18368 ;;		i2_printf
 18369 ;; This function is called by:
 18370 ;;		_updateMenu
 18371 ;;		_inputHandler
 18372 ;; This function uses a non-reentrant model
 18373 ;;
 18374                           
 18375                           	psect	text66
 18376  004650                     __ptext66:
 18377                           	opt stack 0
 18378  004650                     i2_change_state_to_menu_12:
 18379                           	opt stack 19
 18380                           
 18381                           ;UI.c: 491: cur_state = 12;
 18382                           
 18383                           ;incstack = 0
 18384  004650  0E00               	movlw	0
 18385  004652  0100               	movlb	0	; () banked
 18386  004654  6FE7               	movwf	(_cur_state+1)& (0+255),b
 18387  004656  0E0C               	movlw	12
 18388  004658  6FE6               	movwf	_cur_state& (0+255),b
 18389                           
 18390                           ; BSR set to: 0
 18391                           ;UI.c: 493: lcdInst(0b10000000);;
 18392  00465A  0E80               	movlw	128
 18393  00465C  EC4A  F025         	call	i2_lcdInst
 18394                           
 18395                           ;UI.c: 494: printf("1. DATE/TIME    ");
 18396  004660  0E2B               	movlw	low STR_33
 18397  004662  6E0D               	movwf	i2printf@f,c
 18398  004664  0EFD               	movlw	high STR_33
 18399  004666  6E0E               	movwf	i2printf@f+1,c
 18400  004668  EC96  F00C         	call	i2_printf	;wreg free
 18401                           
 18402                           ;UI.c: 495: lcdInst(0b11000000);;
 18403  00466C  0EC0               	movlw	192
 18404  00466E  EC4A  F025         	call	i2_lcdInst
 18405                           
 18406                           ;UI.c: 496: printf("2. SORT        <");
 18407  004672  0EC4               	movlw	low STR_34
 18408  004674  6E0D               	movwf	i2printf@f,c
 18409  004676  0EFD               	movlw	high STR_34
 18410  004678  6E0E               	movwf	i2printf@f+1,c
 18411  00467A  EC96  F00C         	call	i2_printf	;wreg free
 18412  00467E  0012               	return		;funcret
 18413  004680                     __end_ofi2_change_state_to_menu_12:
 18414                           	opt stack 0
 18415                           pclatu	equ	0xFFB
 18416                           pclath	equ	0xFFA
 18417                           tblptru	equ	0xFF8
 18418                           tblptrh	equ	0xFF7
 18419                           tblptrl	equ	0xFF6
 18420                           tablat	equ	0xFF5
 18421                           prodh	equ	0xFF4
 18422                           prodl	equ	0xFF3
 18423                           intcon	equ	0xFF2
 18424                           intcon2	equ	0xFF1
 18425                           intcon3	equ	0xFF0
 18426                           indf0	equ	0xFEF
 18427                           postinc0	equ	0xFEE
 18428                           fsr0h	equ	0xFEA
 18429                           fsr0l	equ	0xFE9
 18430                           wreg	equ	0xFE8
 18431                           postdec1	equ	0xFE5
 18432                           fsr1h	equ	0xFE2
 18433                           fsr1l	equ	0xFE1
 18434                           indf2	equ	0xFDF
 18435                           postinc2	equ	0xFDE
 18436                           postdec2	equ	0xFDD
 18437                           fsr2h	equ	0xFDA
 18438                           fsr2l	equ	0xFD9
 18439                           status	equ	0xFD8
 18440                           
 18441 ;; *************** function _change_state_to_menu_23 *****************
 18442 ;; Defined at:
 18443 ;;		line 506 in file "UI.c"
 18444 ;; Parameters:    Size  Location     Type
 18445 ;;		None
 18446 ;; Auto vars:     Size  Location     Type
 18447 ;;		None
 18448 ;; Return value:  Size  Location     Type
 18449 ;;                  1    wreg      void 
 18450 ;; Registers used:
 18451 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18452 ;; Tracked objects:
 18453 ;;		On entry : 0/0
 18454 ;;		On exit  : 0/0
 18455 ;;		Unchanged: 0/0
 18456 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18457 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18458 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18459 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18460 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18461 ;;Total ram usage:        0 bytes
 18462 ;; Hardware stack levels used:    1
 18463 ;; Hardware stack levels required when called:    3
 18464 ;; This function calls:
 18465 ;;		i2_lcdInst
 18466 ;;		i2_printf
 18467 ;; This function is called by:
 18468 ;;		_updateMenu
 18469 ;;		_inputHandler
 18470 ;; This function uses a non-reentrant model
 18471 ;;
 18472                           
 18473                           	psect	text67
 18474  004680                     __ptext67:
 18475                           	opt stack 0
 18476  004680                     _change_state_to_menu_23:
 18477                           	opt stack 18
 18478                           
 18479                           ;UI.c: 507: cur_state = 23;
 18480                           
 18481                           ;incstack = 0
 18482  004680  0E00               	movlw	0
 18483  004682  0100               	movlb	0	; () banked
 18484  004684  6FE7               	movwf	(_cur_state+1)& (0+255),b
 18485  004686  0E17               	movlw	23
 18486  004688  6FE6               	movwf	_cur_state& (0+255),b
 18487                           
 18488                           ; BSR set to: 0
 18489                           ;UI.c: 509: lcdInst(0b10000000);;
 18490  00468A  0E80               	movlw	128
 18491  00468C  EC4A  F025         	call	i2_lcdInst
 18492                           
 18493                           ;UI.c: 510: printf("2. SORT         ");
 18494  004690  0E1A               	movlw	low STR_32
 18495  004692  6E0D               	movwf	i2printf@f,c
 18496  004694  0EFD               	movlw	high STR_32
 18497  004696  6E0E               	movwf	i2printf@f+1,c
 18498  004698  EC96  F00C         	call	i2_printf	;wreg free
 18499                           
 18500                           ;UI.c: 511: lcdInst(0b11000000);;
 18501  00469C  0EC0               	movlw	192
 18502  00469E  EC4A  F025         	call	i2_lcdInst
 18503                           
 18504                           ;UI.c: 512: printf("3. LOGS        <");
 18505  0046A2  0EB3               	movlw	low STR_38
 18506  0046A4  6E0D               	movwf	i2printf@f,c
 18507  0046A6  0EFD               	movlw	high STR_38
 18508  0046A8  6E0E               	movwf	i2printf@f+1,c
 18509  0046AA  EC96  F00C         	call	i2_printf	;wreg free
 18510  0046AE  0012               	return		;funcret
 18511  0046B0                     __end_of_change_state_to_menu_23:
 18512                           	opt stack 0
 18513                           pclatu	equ	0xFFB
 18514                           pclath	equ	0xFFA
 18515                           tblptru	equ	0xFF8
 18516                           tblptrh	equ	0xFF7
 18517                           tblptrl	equ	0xFF6
 18518                           tablat	equ	0xFF5
 18519                           prodh	equ	0xFF4
 18520                           prodl	equ	0xFF3
 18521                           intcon	equ	0xFF2
 18522                           intcon2	equ	0xFF1
 18523                           intcon3	equ	0xFF0
 18524                           indf0	equ	0xFEF
 18525                           postinc0	equ	0xFEE
 18526                           fsr0h	equ	0xFEA
 18527                           fsr0l	equ	0xFE9
 18528                           wreg	equ	0xFE8
 18529                           postdec1	equ	0xFE5
 18530                           fsr1h	equ	0xFE2
 18531                           fsr1l	equ	0xFE1
 18532                           indf2	equ	0xFDF
 18533                           postinc2	equ	0xFDE
 18534                           postdec2	equ	0xFDD
 18535                           fsr2h	equ	0xFDA
 18536                           fsr2l	equ	0xFD9
 18537                           status	equ	0xFD8
 18538                           
 18539 ;; *************** function _change_state_to_menu_11 *****************
 18540 ;; Defined at:
 18541 ;;		line 482 in file "UI.c"
 18542 ;; Parameters:    Size  Location     Type
 18543 ;;		None
 18544 ;; Auto vars:     Size  Location     Type
 18545 ;;		None
 18546 ;; Return value:  Size  Location     Type
 18547 ;;                  1    wreg      void 
 18548 ;; Registers used:
 18549 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18550 ;; Tracked objects:
 18551 ;;		On entry : 0/0
 18552 ;;		On exit  : 0/0
 18553 ;;		Unchanged: 0/0
 18554 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18555 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18556 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18557 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18558 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18559 ;;Total ram usage:        0 bytes
 18560 ;; Hardware stack levels used:    1
 18561 ;; Hardware stack levels required when called:    3
 18562 ;; This function calls:
 18563 ;;		i2_lcdInst
 18564 ;;		i2_printf
 18565 ;; This function is called by:
 18566 ;;		_updateMenu
 18567 ;;		_inputHandler
 18568 ;; This function uses a non-reentrant model
 18569 ;;
 18570                           
 18571                           	psect	text68
 18572  0046B0                     __ptext68:
 18573                           	opt stack 0
 18574  0046B0                     _change_state_to_menu_11:
 18575                           	opt stack 18
 18576                           
 18577                           ;UI.c: 483: cur_state = 11;
 18578                           
 18579                           ;incstack = 0
 18580  0046B0  0E00               	movlw	0
 18581  0046B2  0100               	movlb	0	; () banked
 18582  0046B4  6FE7               	movwf	(_cur_state+1)& (0+255),b
 18583  0046B6  0E0B               	movlw	11
 18584  0046B8  6FE6               	movwf	_cur_state& (0+255),b
 18585                           
 18586                           ; BSR set to: 0
 18587                           ;UI.c: 485: lcdInst(0b10000000);;
 18588  0046BA  0E80               	movlw	128
 18589  0046BC  EC4A  F025         	call	i2_lcdInst
 18590                           
 18591                           ;UI.c: 486: printf("1. DATE/TIME   <");
 18592  0046C0  0ED5               	movlw	low STR_31
 18593  0046C2  6E0D               	movwf	i2printf@f,c
 18594  0046C4  0EFD               	movlw	high STR_31
 18595  0046C6  6E0E               	movwf	i2printf@f+1,c
 18596  0046C8  EC96  F00C         	call	i2_printf	;wreg free
 18597                           
 18598                           ;UI.c: 487: lcdInst(0b11000000);;
 18599  0046CC  0EC0               	movlw	192
 18600  0046CE  EC4A  F025         	call	i2_lcdInst
 18601                           
 18602                           ;UI.c: 488: printf("2. SORT         ");
 18603  0046D2  0E1A               	movlw	low STR_32
 18604  0046D4  6E0D               	movwf	i2printf@f,c
 18605  0046D6  0EFD               	movlw	high STR_32
 18606  0046D8  6E0E               	movwf	i2printf@f+1,c
 18607  0046DA  EC96  F00C         	call	i2_printf	;wreg free
 18608  0046DE  0012               	return		;funcret
 18609  0046E0                     __end_of_change_state_to_menu_11:
 18610                           	opt stack 0
 18611                           pclatu	equ	0xFFB
 18612                           pclath	equ	0xFFA
 18613                           tblptru	equ	0xFF8
 18614                           tblptrh	equ	0xFF7
 18615                           tblptrl	equ	0xFF6
 18616                           tablat	equ	0xFF5
 18617                           prodh	equ	0xFF4
 18618                           prodl	equ	0xFF3
 18619                           intcon	equ	0xFF2
 18620                           intcon2	equ	0xFF1
 18621                           intcon3	equ	0xFF0
 18622                           indf0	equ	0xFEF
 18623                           postinc0	equ	0xFEE
 18624                           fsr0h	equ	0xFEA
 18625                           fsr0l	equ	0xFE9
 18626                           wreg	equ	0xFE8
 18627                           postdec1	equ	0xFE5
 18628                           fsr1h	equ	0xFE2
 18629                           fsr1l	equ	0xFE1
 18630                           indf2	equ	0xFDF
 18631                           postinc2	equ	0xFDE
 18632                           postdec2	equ	0xFDD
 18633                           fsr2h	equ	0xFDA
 18634                           fsr2l	equ	0xFD9
 18635                           status	equ	0xFD8
 18636                           
 18637 ;; *************** function _change_state_to_logs_34 *****************
 18638 ;; Defined at:
 18639 ;;		line 549 in file "UI.c"
 18640 ;; Parameters:    Size  Location     Type
 18641 ;;		None
 18642 ;; Auto vars:     Size  Location     Type
 18643 ;;		None
 18644 ;; Return value:  Size  Location     Type
 18645 ;;                  1    wreg      void 
 18646 ;; Registers used:
 18647 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18648 ;; Tracked objects:
 18649 ;;		On entry : 0/0
 18650 ;;		On exit  : 0/0
 18651 ;;		Unchanged: 0/0
 18652 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18653 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18654 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18655 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18656 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18657 ;;Total ram usage:        0 bytes
 18658 ;; Hardware stack levels used:    1
 18659 ;; Hardware stack levels required when called:    3
 18660 ;; This function calls:
 18661 ;;		i2_lcdInst
 18662 ;;		i2_printf
 18663 ;; This function is called by:
 18664 ;;		_updateMenu
 18665 ;;		_inputHandler
 18666 ;; This function uses a non-reentrant model
 18667 ;;
 18668                           
 18669                           	psect	text69
 18670  0046E0                     __ptext69:
 18671                           	opt stack 0
 18672  0046E0                     _change_state_to_logs_34:
 18673                           	opt stack 18
 18674                           
 18675                           ;UI.c: 550: cur_state = 1034;
 18676                           
 18677                           ;incstack = 0
 18678  0046E0  0E04               	movlw	4
 18679  0046E2  0100               	movlb	0	; () banked
 18680  0046E4  6FE7               	movwf	(_cur_state+1)& (0+255),b
 18681  0046E6  0E0A               	movlw	10
 18682  0046E8  6FE6               	movwf	_cur_state& (0+255),b
 18683                           
 18684                           ; BSR set to: 0
 18685                           ;UI.c: 551: lcdInst(0b10000000);;
 18686  0046EA  0E80               	movlw	128
 18687  0046EC  EC4A  F025         	call	i2_lcdInst
 18688                           
 18689                           ;UI.c: 552: printf("LOG 3           ");
 18690  0046F0  0EE7               	movlw	low STR_44
 18691  0046F2  6E0D               	movwf	i2printf@f,c
 18692  0046F4  0EFC               	movlw	high STR_44
 18693  0046F6  6E0E               	movwf	i2printf@f+1,c
 18694  0046F8  EC96  F00C         	call	i2_printf	;wreg free
 18695                           
 18696                           ;UI.c: 553: lcdInst(0b11000000);;
 18697  0046FC  0EC0               	movlw	192
 18698  0046FE  EC4A  F025         	call	i2_lcdInst
 18699                           
 18700                           ;UI.c: 554: printf("LOG 4          <");
 18701  004702  0EA2               	movlw	low STR_50
 18702  004704  6E0D               	movwf	i2printf@f,c
 18703  004706  0EFD               	movlw	high STR_50
 18704  004708  6E0E               	movwf	i2printf@f+1,c
 18705  00470A  EC96  F00C         	call	i2_printf	;wreg free
 18706  00470E  0012               	return		;funcret
 18707  004710                     __end_of_change_state_to_logs_34:
 18708                           	opt stack 0
 18709                           pclatu	equ	0xFFB
 18710                           pclath	equ	0xFFA
 18711                           tblptru	equ	0xFF8
 18712                           tblptrh	equ	0xFF7
 18713                           tblptrl	equ	0xFF6
 18714                           tablat	equ	0xFF5
 18715                           prodh	equ	0xFF4
 18716                           prodl	equ	0xFF3
 18717                           intcon	equ	0xFF2
 18718                           intcon2	equ	0xFF1
 18719                           intcon3	equ	0xFF0
 18720                           indf0	equ	0xFEF
 18721                           postinc0	equ	0xFEE
 18722                           fsr0h	equ	0xFEA
 18723                           fsr0l	equ	0xFE9
 18724                           wreg	equ	0xFE8
 18725                           postdec1	equ	0xFE5
 18726                           fsr1h	equ	0xFE2
 18727                           fsr1l	equ	0xFE1
 18728                           indf2	equ	0xFDF
 18729                           postinc2	equ	0xFDE
 18730                           postdec2	equ	0xFDD
 18731                           fsr2h	equ	0xFDA
 18732                           fsr2l	equ	0xFD9
 18733                           status	equ	0xFD8
 18734                           
 18735 ;; *************** function _change_state_to_logs_33 *****************
 18736 ;; Defined at:
 18737 ;;		line 542 in file "UI.c"
 18738 ;; Parameters:    Size  Location     Type
 18739 ;;		None
 18740 ;; Auto vars:     Size  Location     Type
 18741 ;;		None
 18742 ;; Return value:  Size  Location     Type
 18743 ;;                  1    wreg      void 
 18744 ;; Registers used:
 18745 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18746 ;; Tracked objects:
 18747 ;;		On entry : 0/0
 18748 ;;		On exit  : 0/0
 18749 ;;		Unchanged: 0/0
 18750 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18751 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18752 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18753 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18754 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18755 ;;Total ram usage:        0 bytes
 18756 ;; Hardware stack levels used:    1
 18757 ;; Hardware stack levels required when called:    3
 18758 ;; This function calls:
 18759 ;;		i2_lcdInst
 18760 ;;		i2_printf
 18761 ;; This function is called by:
 18762 ;;		_updateMenu
 18763 ;;		_inputHandler
 18764 ;; This function uses a non-reentrant model
 18765 ;;
 18766                           
 18767                           	psect	text70
 18768  004710                     __ptext70:
 18769                           	opt stack 0
 18770  004710                     _change_state_to_logs_33:
 18771                           	opt stack 18
 18772                           
 18773                           ;UI.c: 543: cur_state = 1033;
 18774                           
 18775                           ;incstack = 0
 18776  004710  0E04               	movlw	4
 18777  004712  0100               	movlb	0	; () banked
 18778  004714  6FE7               	movwf	(_cur_state+1)& (0+255),b
 18779  004716  0E09               	movlw	9
 18780  004718  6FE6               	movwf	_cur_state& (0+255),b
 18781                           
 18782                           ; BSR set to: 0
 18783                           ;UI.c: 544: lcdInst(0b10000000);;
 18784  00471A  0E80               	movlw	128
 18785  00471C  EC4A  F025         	call	i2_lcdInst
 18786                           
 18787                           ;UI.c: 545: printf("LOG 3          <");
 18788  004720  0E91               	movlw	low STR_46
 18789  004722  6E0D               	movwf	i2printf@f,c
 18790  004724  0EFD               	movlw	high STR_46
 18791  004726  6E0E               	movwf	i2printf@f+1,c
 18792  004728  EC96  F00C         	call	i2_printf	;wreg free
 18793                           
 18794                           ;UI.c: 546: lcdInst(0b11000000);;
 18795  00472C  0EC0               	movlw	192
 18796  00472E  EC4A  F025         	call	i2_lcdInst
 18797                           
 18798                           ;UI.c: 547: printf("LOG 4           ");
 18799  004732  0EF8               	movlw	low STR_48
 18800  004734  6E0D               	movwf	i2printf@f,c
 18801  004736  0EFC               	movlw	high STR_48
 18802  004738  6E0E               	movwf	i2printf@f+1,c
 18803  00473A  EC96  F00C         	call	i2_printf	;wreg free
 18804  00473E  0012               	return		;funcret
 18805  004740                     __end_of_change_state_to_logs_33:
 18806                           	opt stack 0
 18807                           pclatu	equ	0xFFB
 18808                           pclath	equ	0xFFA
 18809                           tblptru	equ	0xFF8
 18810                           tblptrh	equ	0xFF7
 18811                           tblptrl	equ	0xFF6
 18812                           tablat	equ	0xFF5
 18813                           prodh	equ	0xFF4
 18814                           prodl	equ	0xFF3
 18815                           intcon	equ	0xFF2
 18816                           intcon2	equ	0xFF1
 18817                           intcon3	equ	0xFF0
 18818                           indf0	equ	0xFEF
 18819                           postinc0	equ	0xFEE
 18820                           fsr0h	equ	0xFEA
 18821                           fsr0l	equ	0xFE9
 18822                           wreg	equ	0xFE8
 18823                           postdec1	equ	0xFE5
 18824                           fsr1h	equ	0xFE2
 18825                           fsr1l	equ	0xFE1
 18826                           indf2	equ	0xFDF
 18827                           postinc2	equ	0xFDE
 18828                           postdec2	equ	0xFDD
 18829                           fsr2h	equ	0xFDA
 18830                           fsr2l	equ	0xFD9
 18831                           status	equ	0xFD8
 18832                           
 18833 ;; *************** function _change_state_to_logs_23 *****************
 18834 ;; Defined at:
 18835 ;;		line 535 in file "UI.c"
 18836 ;; Parameters:    Size  Location     Type
 18837 ;;		None
 18838 ;; Auto vars:     Size  Location     Type
 18839 ;;		None
 18840 ;; Return value:  Size  Location     Type
 18841 ;;                  1    wreg      void 
 18842 ;; Registers used:
 18843 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18844 ;; Tracked objects:
 18845 ;;		On entry : 0/0
 18846 ;;		On exit  : 0/0
 18847 ;;		Unchanged: 0/0
 18848 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18849 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18850 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18851 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18852 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18853 ;;Total ram usage:        0 bytes
 18854 ;; Hardware stack levels used:    1
 18855 ;; Hardware stack levels required when called:    3
 18856 ;; This function calls:
 18857 ;;		i2_lcdInst
 18858 ;;		i2_printf
 18859 ;; This function is called by:
 18860 ;;		_updateMenu
 18861 ;;		_inputHandler
 18862 ;; This function uses a non-reentrant model
 18863 ;;
 18864                           
 18865                           	psect	text71
 18866  00482C                     __ptext71:
 18867                           	opt stack 0
 18868  00482C                     _change_state_to_logs_23:
 18869                           	opt stack 18
 18870                           
 18871                           ;UI.c: 536: cur_state = 1023;
 18872                           
 18873                           ;incstack = 0
 18874  00482C  0E03               	movlw	3
 18875  00482E  0100               	movlb	0	; () banked
 18876  004830  6FE7               	movwf	(_cur_state+1)& (0+255),b
 18877  004832  69E6               	setf	_cur_state& (0+255),b
 18878                           
 18879                           ; BSR set to: 0
 18880                           ;UI.c: 537: lcdInst(0b10000000);;
 18881  004834  0E80               	movlw	128
 18882  004836  EC4A  F025         	call	i2_lcdInst
 18883                           
 18884                           ;UI.c: 538: printf("LOG 2           ");
 18885  00483A  0ED6               	movlw	low STR_40
 18886  00483C  6E0D               	movwf	i2printf@f,c
 18887  00483E  0EFC               	movlw	high STR_40
 18888  004840  6E0E               	movwf	i2printf@f+1,c
 18889  004842  EC96  F00C         	call	i2_printf	;wreg free
 18890                           
 18891                           ;UI.c: 539: lcdInst(0b11000000);;
 18892  004846  0EC0               	movlw	192
 18893  004848  EC4A  F025         	call	i2_lcdInst
 18894                           
 18895                           ;UI.c: 540: printf("LOG 3          <");
 18896  00484C  0E91               	movlw	low STR_46
 18897  00484E  6E0D               	movwf	i2printf@f,c
 18898  004850  0EFD               	movlw	high STR_46
 18899  004852  6E0E               	movwf	i2printf@f+1,c
 18900  004854  EC96  F00C         	call	i2_printf	;wreg free
 18901  004858  0012               	return		;funcret
 18902  00485A                     __end_of_change_state_to_logs_23:
 18903                           	opt stack 0
 18904                           pclatu	equ	0xFFB
 18905                           pclath	equ	0xFFA
 18906                           tblptru	equ	0xFF8
 18907                           tblptrh	equ	0xFF7
 18908                           tblptrl	equ	0xFF6
 18909                           tablat	equ	0xFF5
 18910                           prodh	equ	0xFF4
 18911                           prodl	equ	0xFF3
 18912                           intcon	equ	0xFF2
 18913                           intcon2	equ	0xFF1
 18914                           intcon3	equ	0xFF0
 18915                           indf0	equ	0xFEF
 18916                           postinc0	equ	0xFEE
 18917                           fsr0h	equ	0xFEA
 18918                           fsr0l	equ	0xFE9
 18919                           wreg	equ	0xFE8
 18920                           postdec1	equ	0xFE5
 18921                           fsr1h	equ	0xFE2
 18922                           fsr1l	equ	0xFE1
 18923                           indf2	equ	0xFDF
 18924                           postinc2	equ	0xFDE
 18925                           postdec2	equ	0xFDD
 18926                           fsr2h	equ	0xFDA
 18927                           fsr2l	equ	0xFD9
 18928                           status	equ	0xFD8
 18929                           
 18930 ;; *************** function _change_state_to_logs_22 *****************
 18931 ;; Defined at:
 18932 ;;		line 528 in file "UI.c"
 18933 ;; Parameters:    Size  Location     Type
 18934 ;;		None
 18935 ;; Auto vars:     Size  Location     Type
 18936 ;;		None
 18937 ;; Return value:  Size  Location     Type
 18938 ;;                  1    wreg      void 
 18939 ;; Registers used:
 18940 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18941 ;; Tracked objects:
 18942 ;;		On entry : 0/0
 18943 ;;		On exit  : 0/0
 18944 ;;		Unchanged: 0/0
 18945 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18946 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18947 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18948 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18949 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18950 ;;Total ram usage:        0 bytes
 18951 ;; Hardware stack levels used:    1
 18952 ;; Hardware stack levels required when called:    3
 18953 ;; This function calls:
 18954 ;;		i2_lcdInst
 18955 ;;		i2_printf
 18956 ;; This function is called by:
 18957 ;;		_updateMenu
 18958 ;;		_inputHandler
 18959 ;; This function uses a non-reentrant model
 18960 ;;
 18961                           
 18962                           	psect	text72
 18963  004740                     __ptext72:
 18964                           	opt stack 0
 18965  004740                     _change_state_to_logs_22:
 18966                           	opt stack 18
 18967                           
 18968                           ;UI.c: 529: cur_state = 1022;
 18969                           
 18970                           ;incstack = 0
 18971  004740  0E03               	movlw	3
 18972  004742  0100               	movlb	0	; () banked
 18973  004744  6FE7               	movwf	(_cur_state+1)& (0+255),b
 18974  004746  0EFE               	movlw	254
 18975  004748  6FE6               	movwf	_cur_state& (0+255),b
 18976                           
 18977                           ; BSR set to: 0
 18978                           ;UI.c: 530: lcdInst(0b10000000);;
 18979  00474A  0E80               	movlw	128
 18980  00474C  EC4A  F025         	call	i2_lcdInst
 18981                           
 18982                           ;UI.c: 531: printf("LOG 2          <");
 18983  004750  0E80               	movlw	low STR_42
 18984  004752  6E0D               	movwf	i2printf@f,c
 18985  004754  0EFD               	movlw	high STR_42
 18986  004756  6E0E               	movwf	i2printf@f+1,c
 18987  004758  EC96  F00C         	call	i2_printf	;wreg free
 18988                           
 18989                           ;UI.c: 532: lcdInst(0b11000000);;
 18990  00475C  0EC0               	movlw	192
 18991  00475E  EC4A  F025         	call	i2_lcdInst
 18992                           
 18993                           ;UI.c: 533: printf("LOG 3           ");
 18994  004762  0EE7               	movlw	low STR_44
 18995  004764  6E0D               	movwf	i2printf@f,c
 18996  004766  0EFC               	movlw	high STR_44
 18997  004768  6E0E               	movwf	i2printf@f+1,c
 18998  00476A  EC96  F00C         	call	i2_printf	;wreg free
 18999  00476E  0012               	return		;funcret
 19000  004770                     __end_of_change_state_to_logs_22:
 19001                           	opt stack 0
 19002                           pclatu	equ	0xFFB
 19003                           pclath	equ	0xFFA
 19004                           tblptru	equ	0xFF8
 19005                           tblptrh	equ	0xFF7
 19006                           tblptrl	equ	0xFF6
 19007                           tablat	equ	0xFF5
 19008                           prodh	equ	0xFF4
 19009                           prodl	equ	0xFF3
 19010                           intcon	equ	0xFF2
 19011                           intcon2	equ	0xFF1
 19012                           intcon3	equ	0xFF0
 19013                           indf0	equ	0xFEF
 19014                           postinc0	equ	0xFEE
 19015                           fsr0h	equ	0xFEA
 19016                           fsr0l	equ	0xFE9
 19017                           wreg	equ	0xFE8
 19018                           postdec1	equ	0xFE5
 19019                           fsr1h	equ	0xFE2
 19020                           fsr1l	equ	0xFE1
 19021                           indf2	equ	0xFDF
 19022                           postinc2	equ	0xFDE
 19023                           postdec2	equ	0xFDD
 19024                           fsr2h	equ	0xFDA
 19025                           fsr2l	equ	0xFD9
 19026                           status	equ	0xFD8
 19027                           
 19028 ;; *************** function _change_state_to_logs_12 *****************
 19029 ;; Defined at:
 19030 ;;		line 521 in file "UI.c"
 19031 ;; Parameters:    Size  Location     Type
 19032 ;;		None
 19033 ;; Auto vars:     Size  Location     Type
 19034 ;;		None
 19035 ;; Return value:  Size  Location     Type
 19036 ;;                  1    wreg      void 
 19037 ;; Registers used:
 19038 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19039 ;; Tracked objects:
 19040 ;;		On entry : 0/0
 19041 ;;		On exit  : 0/0
 19042 ;;		Unchanged: 0/0
 19043 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19044 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19045 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19046 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19047 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19048 ;;Total ram usage:        0 bytes
 19049 ;; Hardware stack levels used:    1
 19050 ;; Hardware stack levels required when called:    3
 19051 ;; This function calls:
 19052 ;;		i2_lcdInst
 19053 ;;		i2_printf
 19054 ;; This function is called by:
 19055 ;;		_updateMenu
 19056 ;;		_inputHandler
 19057 ;; This function uses a non-reentrant model
 19058 ;;
 19059                           
 19060                           	psect	text73
 19061  004770                     __ptext73:
 19062                           	opt stack 0
 19063  004770                     _change_state_to_logs_12:
 19064                           	opt stack 18
 19065                           
 19066                           ;UI.c: 522: cur_state = 1012;
 19067                           
 19068                           ;incstack = 0
 19069  004770  0E03               	movlw	3
 19070  004772  0100               	movlb	0	; () banked
 19071  004774  6FE7               	movwf	(_cur_state+1)& (0+255),b
 19072  004776  0EF4               	movlw	244
 19073  004778  6FE6               	movwf	_cur_state& (0+255),b
 19074                           
 19075                           ; BSR set to: 0
 19076                           ;UI.c: 523: lcdInst(0b10000000);;
 19077  00477A  0E80               	movlw	128
 19078  00477C  EC4A  F025         	call	i2_lcdInst
 19079                           
 19080                           ;UI.c: 524: printf("LOG 1           ");
 19081  004780  0EC5               	movlw	low STR_41
 19082  004782  6E0D               	movwf	i2printf@f,c
 19083  004784  0EFC               	movlw	high STR_41
 19084  004786  6E0E               	movwf	i2printf@f+1,c
 19085  004788  EC96  F00C         	call	i2_printf	;wreg free
 19086                           
 19087                           ;UI.c: 525: lcdInst(0b11000000);;
 19088  00478C  0EC0               	movlw	192
 19089  00478E  EC4A  F025         	call	i2_lcdInst
 19090                           
 19091                           ;UI.c: 526: printf("LOG 2          <");
 19092  004792  0E80               	movlw	low STR_42
 19093  004794  6E0D               	movwf	i2printf@f,c
 19094  004796  0EFD               	movlw	high STR_42
 19095  004798  6E0E               	movwf	i2printf@f+1,c
 19096  00479A  EC96  F00C         	call	i2_printf	;wreg free
 19097  00479E  0012               	return		;funcret
 19098  0047A0                     __end_of_change_state_to_logs_12:
 19099                           	opt stack 0
 19100                           pclatu	equ	0xFFB
 19101                           pclath	equ	0xFFA
 19102                           tblptru	equ	0xFF8
 19103                           tblptrh	equ	0xFF7
 19104                           tblptrl	equ	0xFF6
 19105                           tablat	equ	0xFF5
 19106                           prodh	equ	0xFF4
 19107                           prodl	equ	0xFF3
 19108                           intcon	equ	0xFF2
 19109                           intcon2	equ	0xFF1
 19110                           intcon3	equ	0xFF0
 19111                           indf0	equ	0xFEF
 19112                           postinc0	equ	0xFEE
 19113                           fsr0h	equ	0xFEA
 19114                           fsr0l	equ	0xFE9
 19115                           wreg	equ	0xFE8
 19116                           postdec1	equ	0xFE5
 19117                           fsr1h	equ	0xFE2
 19118                           fsr1l	equ	0xFE1
 19119                           indf2	equ	0xFDF
 19120                           postinc2	equ	0xFDE
 19121                           postdec2	equ	0xFDD
 19122                           fsr2h	equ	0xFDA
 19123                           fsr2l	equ	0xFD9
 19124                           status	equ	0xFD8
 19125                           
 19126 ;; *************** function _change_state_to_logs_11 *****************
 19127 ;; Defined at:
 19128 ;;		line 514 in file "UI.c"
 19129 ;; Parameters:    Size  Location     Type
 19130 ;;		None
 19131 ;; Auto vars:     Size  Location     Type
 19132 ;;		None
 19133 ;; Return value:  Size  Location     Type
 19134 ;;                  1    wreg      void 
 19135 ;; Registers used:
 19136 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19137 ;; Tracked objects:
 19138 ;;		On entry : 0/0
 19139 ;;		On exit  : 0/0
 19140 ;;		Unchanged: 0/0
 19141 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19142 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19143 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19144 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19145 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19146 ;;Total ram usage:        0 bytes
 19147 ;; Hardware stack levels used:    1
 19148 ;; Hardware stack levels required when called:    3
 19149 ;; This function calls:
 19150 ;;		i2_lcdInst
 19151 ;;		i2_printf
 19152 ;; This function is called by:
 19153 ;;		_updateMenu
 19154 ;;		_inputHandler
 19155 ;; This function uses a non-reentrant model
 19156 ;;
 19157                           
 19158                           	psect	text74
 19159  0047A0                     __ptext74:
 19160                           	opt stack 0
 19161  0047A0                     _change_state_to_logs_11:
 19162                           	opt stack 18
 19163                           
 19164                           ;UI.c: 515: cur_state = 1011;
 19165                           
 19166                           ;incstack = 0
 19167  0047A0  0E03               	movlw	3
 19168  0047A2  0100               	movlb	0	; () banked
 19169  0047A4  6FE7               	movwf	(_cur_state+1)& (0+255),b
 19170  0047A6  0EF3               	movlw	243
 19171  0047A8  6FE6               	movwf	_cur_state& (0+255),b
 19172                           
 19173                           ; BSR set to: 0
 19174                           ;UI.c: 516: lcdInst(0b10000000);;
 19175  0047AA  0E80               	movlw	128
 19176  0047AC  EC4A  F025         	call	i2_lcdInst
 19177                           
 19178                           ;UI.c: 517: printf("LOG 1          <");
 19179  0047B0  0E6F               	movlw	low STR_39
 19180  0047B2  6E0D               	movwf	i2printf@f,c
 19181  0047B4  0EFD               	movlw	high STR_39
 19182  0047B6  6E0E               	movwf	i2printf@f+1,c
 19183  0047B8  EC96  F00C         	call	i2_printf	;wreg free
 19184                           
 19185                           ;UI.c: 518: lcdInst(0b11000000);;
 19186  0047BC  0EC0               	movlw	192
 19187  0047BE  EC4A  F025         	call	i2_lcdInst
 19188                           
 19189                           ;UI.c: 519: printf("LOG 2           ");
 19190  0047C2  0ED6               	movlw	low STR_40
 19191  0047C4  6E0D               	movwf	i2printf@f,c
 19192  0047C6  0EFC               	movlw	high STR_40
 19193  0047C8  6E0E               	movwf	i2printf@f+1,c
 19194  0047CA  EC96  F00C         	call	i2_printf	;wreg free
 19195  0047CE  0012               	return		;funcret
 19196  0047D0                     __end_of_change_state_to_logs_11:
 19197                           	opt stack 0
 19198                           pclatu	equ	0xFFB
 19199                           pclath	equ	0xFFA
 19200                           tblptru	equ	0xFF8
 19201                           tblptrh	equ	0xFF7
 19202                           tblptrl	equ	0xFF6
 19203                           tablat	equ	0xFF5
 19204                           prodh	equ	0xFF4
 19205                           prodl	equ	0xFF3
 19206                           intcon	equ	0xFF2
 19207                           intcon2	equ	0xFF1
 19208                           intcon3	equ	0xFF0
 19209                           indf0	equ	0xFEF
 19210                           postinc0	equ	0xFEE
 19211                           fsr0h	equ	0xFEA
 19212                           fsr0l	equ	0xFE9
 19213                           wreg	equ	0xFE8
 19214                           postdec1	equ	0xFE5
 19215                           fsr1h	equ	0xFE2
 19216                           fsr1l	equ	0xFE1
 19217                           indf2	equ	0xFDF
 19218                           postinc2	equ	0xFDE
 19219                           postdec2	equ	0xFDD
 19220                           fsr2h	equ	0xFDA
 19221                           fsr2l	equ	0xFD9
 19222                           status	equ	0xFD8
 19223                           
 19224 ;; *************** function _dispLogs *****************
 19225 ;; Defined at:
 19226 ;;		line 467 in file "UI.c"
 19227 ;; Parameters:    Size  Location     Type
 19228 ;;  myLog           2   17[COMRAM] int 
 19229 ;; Auto vars:     Size  Location     Type
 19230 ;;		None
 19231 ;; Return value:  Size  Location     Type
 19232 ;;                  1    wreg      void 
 19233 ;; Registers used:
 19234 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 19235 ;; Tracked objects:
 19236 ;;		On entry : 0/0
 19237 ;;		On exit  : 0/0
 19238 ;;		Unchanged: 0/0
 19239 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19240 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19241 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19242 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19243 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19244 ;;Total ram usage:        2 bytes
 19245 ;; Hardware stack levels used:    1
 19246 ;; Hardware stack levels required when called:    2
 19247 ;; This function calls:
 19248 ;;		_retrieveLog
 19249 ;; This function is called by:
 19250 ;;		_updateMenu
 19251 ;; This function uses a non-reentrant model
 19252 ;;
 19253                           
 19254                           	psect	text75
 19255  004978                     __ptext75:
 19256                           	opt stack 0
 19257  004978                     _dispLogs:
 19258                           	opt stack 20
 19259                           
 19260                           ;UI.c: 468: logstate = 1;
 19261                           
 19262                           ;incstack = 0
 19263  004978  0E00               	movlw	0
 19264  00497A  0100               	movlb	0	; () banked
 19265  00497C  6FF7               	movwf	(_logstate+1)& (0+255),b
 19266  00497E  0E01               	movlw	1
 19267  004980  6FF6               	movwf	_logstate& (0+255),b
 19268                           
 19269                           ; BSR set to: 0
 19270                           ;UI.c: 469: log = myLog;
 19271  004982  C012  F0EA         	movff	dispLogs@myLog,_log
 19272  004986  C013  F0EB         	movff	dispLogs@myLog+1,_log+1
 19273                           
 19274                           ; BSR set to: 0
 19275                           ;UI.c: 470: retrieveLog(myLog - 1);
 19276  00498A  0EFF               	movlw	255
 19277  00498C  2412               	addwf	dispLogs@myLog,w,c
 19278  00498E  6E07               	movwf	retrieveLog@logNum,c
 19279  004990  0EFF               	movlw	255
 19280  004992  2013               	addwfc	dispLogs@myLog+1,w,c
 19281  004994  6E08               	movwf	retrieveLog@logNum+1,c
 19282  004996  EC97  F019         	call	_retrieveLog	;wreg free
 19283  00499A  0012               	return		;funcret
 19284  00499C                     __end_of_dispLogs:
 19285                           	opt stack 0
 19286                           pclatu	equ	0xFFB
 19287                           pclath	equ	0xFFA
 19288                           tblptru	equ	0xFF8
 19289                           tblptrh	equ	0xFF7
 19290                           tblptrl	equ	0xFF6
 19291                           tablat	equ	0xFF5
 19292                           prodh	equ	0xFF4
 19293                           prodl	equ	0xFF3
 19294                           intcon	equ	0xFF2
 19295                           intcon2	equ	0xFF1
 19296                           intcon3	equ	0xFF0
 19297                           indf0	equ	0xFEF
 19298                           postinc0	equ	0xFEE
 19299                           fsr0h	equ	0xFEA
 19300                           fsr0l	equ	0xFE9
 19301                           wreg	equ	0xFE8
 19302                           postdec1	equ	0xFE5
 19303                           fsr1h	equ	0xFE2
 19304                           fsr1l	equ	0xFE1
 19305                           indf2	equ	0xFDF
 19306                           postinc2	equ	0xFDE
 19307                           postdec2	equ	0xFDD
 19308                           fsr2h	equ	0xFDA
 19309                           fsr2l	equ	0xFD9
 19310                           status	equ	0xFD8
 19311                           
 19312 ;; *************** function _retrieveLog *****************
 19313 ;; Defined at:
 19314 ;;		line 134 in file "EEPROM.c"
 19315 ;; Parameters:    Size  Location     Type
 19316 ;;  logNum          2    6[COMRAM] int 
 19317 ;; Auto vars:     Size  Location     Type
 19318 ;;  i               2   13[COMRAM] int 
 19319 ;;  addr            2   15[COMRAM] unsigned short 
 19320 ;;  byte3           1   12[COMRAM] unsigned char 
 19321 ;;  byte2           1   11[COMRAM] unsigned char 
 19322 ;;  byte1           1   10[COMRAM] unsigned char 
 19323 ;; Return value:  Size  Location     Type
 19324 ;;                  1    wreg      void 
 19325 ;; Registers used:
 19326 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 19327 ;; Tracked objects:
 19328 ;;		On entry : 0/0
 19329 ;;		On exit  : 0/0
 19330 ;;		Unchanged: 0/0
 19331 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19332 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19333 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19334 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19335 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19336 ;;Total ram usage:       11 bytes
 19337 ;; Hardware stack levels used:    1
 19338 ;; Hardware stack levels required when called:    1
 19339 ;; This function calls:
 19340 ;;		i2_EEPROM_read
 19341 ;;		i2___wmul
 19342 ;; This function is called by:
 19343 ;;		_dispLogs
 19344 ;; This function uses a non-reentrant model
 19345 ;;
 19346                           
 19347                           	psect	text76
 19348  00332E                     __ptext76:
 19349                           	opt stack 0
 19350  00332E                     _retrieveLog:
 19351                           	opt stack 20
 19352                           
 19353                           ;EEPROM.c: 140: unsigned short addr = 1 + logNum * 11;
 19354                           
 19355                           ;incstack = 0
 19356  00332E  C007  F001         	movff	retrieveLog@logNum,i2___wmul@multiplier
 19357  003332  C008  F002         	movff	retrieveLog@logNum+1,i2___wmul@multiplier+1
 19358  003336  0E00               	movlw	0
 19359  003338  6E04               	movwf	i2___wmul@multiplicand+1,c
 19360  00333A  0E0B               	movlw	11
 19361  00333C  6E03               	movwf	i2___wmul@multiplicand,c
 19362  00333E  EC96  F024         	call	i2___wmul	;wreg free
 19363  003342  0E01               	movlw	1
 19364  003344  2401               	addwf	?i2___wmul,w,c
 19365  003346  6E10               	movwf	retrieveLog@addr,c
 19366  003348  0E00               	movlw	0
 19367  00334A  2002               	addwfc	?i2___wmul+1,w,c
 19368  00334C  6E11               	movwf	retrieveLog@addr+1,c
 19369                           
 19370                           ;EEPROM.c: 143: unsigned char byte1 = EEPROM_read(addr);
 19371  00334E  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 19372  003352  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 19373  003356  EC16  F025         	call	i2_EEPROM_read	;wreg free
 19374  00335A  6E0B               	movwf	retrieveLog@byte1,c
 19375                           
 19376                           ;EEPROM.c: 144: log_completion = (int)(byte1 & 0b10000000);
 19377  00335C  C00B  F009         	movff	retrieveLog@byte1,??_retrieveLog
 19378  003360  0E80               	movlw	128
 19379  003362  1609               	andwf	??_retrieveLog,f,c
 19380  003364  5009               	movf	??_retrieveLog,w,c
 19381  003366  0100               	movlb	0	; () banked
 19382  003368  6FEC               	movwf	_log_completion& (0+255),b
 19383  00336A  6BED               	clrf	(_log_completion+1)& (0+255),b
 19384                           
 19385                           ; BSR set to: 0
 19386                           ;EEPROM.c: 145: log_count_total = (int)(byte1 & 0b00001111);
 19387  00336C  C00B  F009         	movff	retrieveLog@byte1,??_retrieveLog
 19388  003370  0E0F               	movlw	15
 19389  003372  1609               	andwf	??_retrieveLog,f,c
 19390  003374  5009               	movf	??_retrieveLog,w,c
 19391  003376  6E75               	movwf	_log_count_total,c
 19392  003378  6A76               	clrf	_log_count_total+1,c
 19393                           
 19394                           ; BSR set to: 0
 19395                           ;EEPROM.c: 146: addr++;
 19396  00337A  4A10               	infsnz	retrieveLog@addr,f,c
 19397  00337C  2A11               	incf	retrieveLog@addr+1,f,c
 19398                           
 19399                           ; BSR set to: 0
 19400                           ;EEPROM.c: 149: unsigned char byte2 = EEPROM_read(addr);
 19401  00337E  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 19402  003382  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 19403  003386  EC16  F025         	call	i2_EEPROM_read	;wreg free
 19404  00338A  6E0C               	movwf	retrieveLog@byte2,c
 19405                           
 19406                           ;EEPROM.c: 150: log_count_pop_no_tab = (int)((byte2 & 0b11110000)>> 4);
 19407  00338C  C00C  F009         	movff	retrieveLog@byte2,??_retrieveLog
 19408  003390  3A09               	swapf	??_retrieveLog,f,c
 19409  003392  0E0F               	movlw	15
 19410  003394  1609               	andwf	??_retrieveLog,f,c
 19411  003396  0E0F               	movlw	15
 19412  003398  1609               	andwf	??_retrieveLog,f,c
 19413  00339A  5009               	movf	??_retrieveLog,w,c
 19414  00339C  0100               	movlb	0	; () banked
 19415  00339E  6FF0               	movwf	_log_count_pop_no_tab& (0+255),b
 19416  0033A0  6BF1               	clrf	(_log_count_pop_no_tab+1)& (0+255),b
 19417                           
 19418                           ; BSR set to: 0
 19419                           ;EEPROM.c: 151: log_count_pop_w_tab = (int)(byte2 & 0b00001111);
 19420  0033A2  C00C  F009         	movff	retrieveLog@byte2,??_retrieveLog
 19421  0033A6  0E0F               	movlw	15
 19422  0033A8  1609               	andwf	??_retrieveLog,f,c
 19423  0033AA  5009               	movf	??_retrieveLog,w,c
 19424  0033AC  0100               	movlb	0	; () banked
 19425  0033AE  6FF2               	movwf	_log_count_pop_w_tab& (0+255),b
 19426  0033B0  6BF3               	clrf	(_log_count_pop_w_tab+1)& (0+255),b
 19427                           
 19428                           ; BSR set to: 0
 19429                           ;EEPROM.c: 152: addr++;
 19430  0033B2  4A10               	infsnz	retrieveLog@addr,f,c
 19431  0033B4  2A11               	incf	retrieveLog@addr+1,f,c
 19432                           
 19433                           ; BSR set to: 0
 19434                           ;EEPROM.c: 153: unsigned char byte3 = EEPROM_read(addr);
 19435  0033B6  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 19436  0033BA  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 19437  0033BE  EC16  F025         	call	i2_EEPROM_read	;wreg free
 19438  0033C2  6E0D               	movwf	retrieveLog@byte3,c
 19439                           
 19440                           ;EEPROM.c: 154: log_count_can_w_lab = (int)((byte3 & 0b11110000)>> 4);
 19441  0033C4  C00D  F009         	movff	retrieveLog@byte3,??_retrieveLog
 19442  0033C8  3A09               	swapf	??_retrieveLog,f,c
 19443  0033CA  0E0F               	movlw	15
 19444  0033CC  1609               	andwf	??_retrieveLog,f,c
 19445  0033CE  0E0F               	movlw	15
 19446  0033D0  1609               	andwf	??_retrieveLog,f,c
 19447  0033D2  5009               	movf	??_retrieveLog,w,c
 19448  0033D4  6E73               	movwf	_log_count_can_w_lab,c
 19449  0033D6  6A74               	clrf	_log_count_can_w_lab+1,c
 19450                           
 19451                           ;EEPROM.c: 155: log_count_can_no_lab = (int)(byte3 & 0b00001111);
 19452  0033D8  C00D  F009         	movff	retrieveLog@byte3,??_retrieveLog
 19453  0033DC  0E0F               	movlw	15
 19454  0033DE  1609               	andwf	??_retrieveLog,f,c
 19455  0033E0  5009               	movf	??_retrieveLog,w,c
 19456  0033E2  0100               	movlb	0	; () banked
 19457  0033E4  6FEE               	movwf	_log_count_can_no_lab& (0+255),b
 19458  0033E6  6BEF               	clrf	(_log_count_can_no_lab+1)& (0+255),b
 19459                           
 19460                           ; BSR set to: 0
 19461                           ;EEPROM.c: 156: addr++;
 19462  0033E8  4A10               	infsnz	retrieveLog@addr,f,c
 19463  0033EA  2A11               	incf	retrieveLog@addr+1,f,c
 19464                           
 19465                           ; BSR set to: 0
 19466                           ;EEPROM.c: 159: for(int i = 0; i < 7; i++){
 19467  0033EC  0E00               	movlw	0
 19468  0033EE  6E0F               	movwf	retrieveLog@i+1,c
 19469  0033F0  0E00               	movlw	0
 19470  0033F2  6E0E               	movwf	retrieveLog@i,c
 19471  0033F4                     i2l6176:
 19472                           
 19473                           ; BSR set to: 0
 19474  0033F4  BE0F               	btfsc	retrieveLog@i+1,7,c
 19475  0033F6  D006               	goto	i2l6180
 19476  0033F8  500F               	movf	retrieveLog@i+1,w,c
 19477  0033FA  E11E               	bnz	i2l6188
 19478  0033FC  0E07               	movlw	7
 19479  0033FE  5C0E               	subwf	retrieveLog@i,w,c
 19480  003400  B0D8               	btfsc	status,0,c
 19481  003402  D01A               	goto	i2l6188
 19482  003404                     i2l6180:
 19483                           
 19484                           ;EEPROM.c: 160: log_startTime[i] = (int)EEPROM_read(addr);
 19485  003404  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 19486  003408  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 19487  00340C  EC16  F025         	call	i2_EEPROM_read	;wreg free
 19488  003410  6E09               	movwf	??_retrieveLog& (0+255),c
 19489  003412  6A0A               	clrf	(??_retrieveLog+1)& (0+255),c
 19490  003414  90D8               	bcf	status,0,c
 19491  003416  340E               	rlcf	retrieveLog@i,w,c
 19492  003418  6ED9               	movwf	fsr2l,c
 19493  00341A  340F               	rlcf	retrieveLog@i+1,w,c
 19494  00341C  6EDA               	movwf	fsr2h,c
 19495  00341E  0E00               	movlw	low _log_startTime
 19496  003420  26D9               	addwf	fsr2l,f,c
 19497  003422  0E01               	movlw	high _log_startTime
 19498  003424  22DA               	addwfc	fsr2h,f,c
 19499  003426  C009  FFDE         	movff	??_retrieveLog,postinc2
 19500  00342A  C00A  FFDD         	movff	??_retrieveLog+1,postdec2
 19501                           
 19502                           ;EEPROM.c: 161: addr++;
 19503  00342E  4A10               	infsnz	retrieveLog@addr,f,c
 19504  003430  2A11               	incf	retrieveLog@addr+1,f,c
 19505  003432  4A0E               	infsnz	retrieveLog@i,f,c
 19506  003434  2A0F               	incf	retrieveLog@i+1,f,c
 19507  003436  D7DE               	goto	i2l6176
 19508  003438                     i2l6188:
 19509                           
 19510                           ;EEPROM.c: 162: }
 19511                           ;EEPROM.c: 165: log_total_time = (int)EEPROM_read(addr);
 19512  003438  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 19513  00343C  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 19514  003440  EC16  F025         	call	i2_EEPROM_read	;wreg free
 19515  003444  6E09               	movwf	??_retrieveLog& (0+255),c
 19516  003446  5009               	movf	??_retrieveLog,w,c
 19517  003448  0100               	movlb	0	; () banked
 19518  00344A  6FF4               	movwf	_log_total_time& (0+255),b
 19519  00344C  6BF5               	clrf	(_log_total_time+1)& (0+255),b
 19520                           
 19521                           ; BSR set to: 0
 19522  00344E  0012               	return		;funcret
 19523  003450                     __end_of_retrieveLog:
 19524                           	opt stack 0
 19525                           pclatu	equ	0xFFB
 19526                           pclath	equ	0xFFA
 19527                           tblptru	equ	0xFF8
 19528                           tblptrh	equ	0xFF7
 19529                           tblptrl	equ	0xFF6
 19530                           tablat	equ	0xFF5
 19531                           prodh	equ	0xFF4
 19532                           prodl	equ	0xFF3
 19533                           intcon	equ	0xFF2
 19534                           intcon2	equ	0xFF1
 19535                           intcon3	equ	0xFF0
 19536                           indf0	equ	0xFEF
 19537                           postinc0	equ	0xFEE
 19538                           fsr0h	equ	0xFEA
 19539                           fsr0l	equ	0xFE9
 19540                           wreg	equ	0xFE8
 19541                           postdec1	equ	0xFE5
 19542                           fsr1h	equ	0xFE2
 19543                           fsr1l	equ	0xFE1
 19544                           indf2	equ	0xFDF
 19545                           postinc2	equ	0xFDE
 19546                           postdec2	equ	0xFDD
 19547                           fsr2h	equ	0xFDA
 19548                           fsr2l	equ	0xFD9
 19549                           status	equ	0xFD8
 19550                           
 19551 ;; *************** function i2_EEPROM_read *****************
 19552 ;; Defined at:
 19553 ;;		line 68 in file "EEPROM.c"
 19554 ;; Parameters:    Size  Location     Type
 19555 ;;  address         2    0[COMRAM] unsigned short 
 19556 ;; Auto vars:     Size  Location     Type
 19557 ;;		None
 19558 ;; Return value:  Size  Location     Type
 19559 ;;                  1    wreg      unsigned char 
 19560 ;; Registers used:
 19561 ;;		wreg, status,2
 19562 ;; Tracked objects:
 19563 ;;		On entry : 0/0
 19564 ;;		On exit  : 0/0
 19565 ;;		Unchanged: 0/0
 19566 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19567 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19568 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19569 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19570 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19571 ;;Total ram usage:        2 bytes
 19572 ;; Hardware stack levels used:    1
 19573 ;; This function calls:
 19574 ;;		Nothing
 19575 ;; This function is called by:
 19576 ;;		_retrieveLog
 19577 ;; This function uses a non-reentrant model
 19578 ;;
 19579                           
 19580                           	psect	text77
 19581  004A2C                     __ptext77:
 19582                           	opt stack 0
 19583  004A2C                     i2_EEPROM_read:
 19584                           	opt stack 20
 19585                           
 19586                           ;EEPROM.c: 70: EEADRH = (unsigned char)(address >> 8);
 19587                           
 19588                           ; BSR set to: 0
 19589                           ;incstack = 0
 19590  004A2C  5002               	movf	i2EEPROM_read@address+1,w,c
 19591  004A2E  6EAA               	movwf	4010,c	;volatile
 19592                           
 19593                           ;EEPROM.c: 71: EEADR = (unsigned char)address;
 19594  004A30  C001  FFA9         	movff	i2EEPROM_read@address,4009	;volatile
 19595                           
 19596                           ;EEPROM.c: 73: EECON1bits.EEPGD = 0;
 19597  004A34  9EA6               	bcf	4006,7,c	;volatile
 19598                           
 19599                           ;EEPROM.c: 74: EECON1bits.CFGS = 0;
 19600  004A36  9CA6               	bcf	4006,6,c	;volatile
 19601                           
 19602                           ;EEPROM.c: 75: EECON1bits.RD = 1;
 19603  004A38  80A6               	bsf	4006,0,c	;volatile
 19604  004A3A                     i2l958:
 19605  004A3A  B0A6               	btfsc	4006,0,c	;volatile
 19606  004A3C  D7FE               	goto	i2l958
 19607                           
 19608                           ;EEPROM.c: 81: return EEDATA;
 19609  004A3E  50A8               	movf	4008,w,c	;volatile
 19610  004A40  0012               	return	
 19611  004A42                     __end_ofi2_EEPROM_read:
 19612                           	opt stack 0
 19613                           pclatu	equ	0xFFB
 19614                           pclath	equ	0xFFA
 19615                           tblptru	equ	0xFF8
 19616                           tblptrh	equ	0xFF7
 19617                           tblptrl	equ	0xFF6
 19618                           tablat	equ	0xFF5
 19619                           prodh	equ	0xFF4
 19620                           prodl	equ	0xFF3
 19621                           intcon	equ	0xFF2
 19622                           intcon2	equ	0xFF1
 19623                           intcon3	equ	0xFF0
 19624                           indf0	equ	0xFEF
 19625                           postinc0	equ	0xFEE
 19626                           fsr0h	equ	0xFEA
 19627                           fsr0l	equ	0xFE9
 19628                           wreg	equ	0xFE8
 19629                           postdec1	equ	0xFE5
 19630                           fsr1h	equ	0xFE2
 19631                           fsr1l	equ	0xFE1
 19632                           indf2	equ	0xFDF
 19633                           postinc2	equ	0xFDE
 19634                           postdec2	equ	0xFDD
 19635                           fsr2h	equ	0xFDA
 19636                           fsr2l	equ	0xFD9
 19637                           status	equ	0xFD8
 19638                           
 19639 ;; *************** function _printSortTimer *****************
 19640 ;; Defined at:
 19641 ;;		line 321 in file "sort.c"
 19642 ;; Parameters:    Size  Location     Type
 19643 ;;		None
 19644 ;; Auto vars:     Size  Location     Type
 19645 ;;  i               2   72[COMRAM] int 
 19646 ;;  curTime        14   46[COMRAM] int [7]
 19647 ;;  timeDiff        2   70[COMRAM] unsigned int 
 19648 ;;  sec             2   66[COMRAM] int 
 19649 ;;  min             2   64[COMRAM] int 
 19650 ;;  cur_sec         2   62[COMRAM] unsigned int 
 19651 ;;  start_sec       2   60[COMRAM] unsigned int 
 19652 ;;  hour            2   44[COMRAM] int 
 19653 ;; Return value:  Size  Location     Type
 19654 ;;                  1    wreg      void 
 19655 ;; Registers used:
 19656 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19657 ;; Tracked objects:
 19658 ;;		On entry : 0/0
 19659 ;;		On exit  : 0/0
 19660 ;;		Unchanged: 0/0
 19661 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19662 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19663 ;;      Locals:        30       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19664 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19665 ;;      Totals:        33       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19666 ;;Total ram usage:       33 bytes
 19667 ;; Hardware stack levels used:    1
 19668 ;; Hardware stack levels required when called:    3
 19669 ;; This function calls:
 19670 ;;		i2___lwdiv
 19671 ;;		i2___lwmod
 19672 ;;		i2___wmul
 19673 ;;		i2_getRTC
 19674 ;;		i2_lcdInst
 19675 ;;		i2_printf
 19676 ;; This function is called by:
 19677 ;;		_handler
 19678 ;; This function uses a non-reentrant model
 19679 ;;
 19680                           
 19681                           	psect	text78
 19682  002964                     __ptext78:
 19683                           	opt stack 0
 19684  002964                     _printSortTimer:
 19685                           	opt stack 20
 19686                           
 19687                           ;sort.c: 322: getRTC();
 19688                           
 19689                           ;incstack = 0
 19690  002964  ECD8  F01F         	call	i2_getRTC	;wreg free
 19691                           
 19692                           ;sort.c: 323: int curTime[7];
 19693                           ;sort.c: 324: for(int i = 0; i < 7; i++){
 19694  002968  0E00               	movlw	0
 19695  00296A  6E4A               	movwf	printSortTimer@i+1,c
 19696  00296C  0E00               	movlw	0
 19697  00296E  6E49               	movwf	printSortTimer@i,c
 19698  002970                     i2l8356:
 19699  002970  BE4A               	btfsc	printSortTimer@i+1,7,c
 19700  002972  D006               	goto	i2l8360
 19701  002974  504A               	movf	printSortTimer@i+1,w,c
 19702  002976  E131               	bnz	i2l8366
 19703  002978  0E07               	movlw	7
 19704  00297A  5C49               	subwf	printSortTimer@i,w,c
 19705  00297C  B0D8               	btfsc	status,0,c
 19706  00297E  D02D               	goto	i2l8366
 19707  002980                     i2l8360:
 19708                           
 19709                           ;sort.c: 325: curTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 19710  002980  0E24               	movlw	low _time
 19711  002982  2449               	addwf	printSortTimer@i,w,c
 19712  002984  6ED9               	movwf	fsr2l,c
 19713  002986  0E01               	movlw	high _time
 19714  002988  204A               	addwfc	printSortTimer@i+1,w,c
 19715  00298A  6EDA               	movwf	fsr2h,c
 19716  00298C  50DF               	movf	indf2,w,c
 19717  00298E  6E2A               	movwf	??_printSortTimer& (0+255),c
 19718  002990  3A2A               	swapf	??_printSortTimer,f,c
 19719  002992  0E0F               	movlw	15
 19720  002994  162A               	andwf	??_printSortTimer,f,c
 19721  002996  0E0F               	movlw	15
 19722  002998  162A               	andwf	??_printSortTimer,f,c
 19723  00299A  502A               	movf	??_printSortTimer,w,c
 19724  00299C  0D0A               	mullw	10
 19725  00299E  0E24               	movlw	low _time
 19726  0029A0  2449               	addwf	printSortTimer@i,w,c
 19727  0029A2  6ED9               	movwf	fsr2l,c
 19728  0029A4  0E01               	movlw	high _time
 19729  0029A6  204A               	addwfc	printSortTimer@i+1,w,c
 19730  0029A8  6EDA               	movwf	fsr2h,c
 19731  0029AA  50DF               	movf	indf2,w,c
 19732  0029AC  0B0F               	andlw	15
 19733  0029AE  6E2B               	movwf	(??_printSortTimer+1)& (0+255),c
 19734  0029B0  6A2C               	clrf	(??_printSortTimer+2)& (0+255),c
 19735  0029B2  50F3               	movf	prodl,w,c
 19736  0029B4  262B               	addwf	??_printSortTimer+1,f,c
 19737  0029B6  50F4               	movf	prodh,w,c
 19738  0029B8  222C               	addwfc	??_printSortTimer+2,f,c
 19739  0029BA  90D8               	bcf	status,0,c
 19740  0029BC  3449               	rlcf	printSortTimer@i,w,c
 19741  0029BE  6ED9               	movwf	fsr2l,c
 19742  0029C0  344A               	rlcf	printSortTimer@i+1,w,c
 19743  0029C2  6EDA               	movwf	fsr2h,c
 19744  0029C4  0E2F               	movlw	low printSortTimer@curTime
 19745  0029C6  26D9               	addwf	fsr2l,f,c
 19746  0029C8  0E00               	movlw	high printSortTimer@curTime
 19747  0029CA  22DA               	addwfc	fsr2h,f,c
 19748  0029CC  C02B  FFDE         	movff	??_printSortTimer+1,postinc2
 19749  0029D0  C02C  FFDD         	movff	??_printSortTimer+2,postdec2
 19750  0029D4  4A49               	infsnz	printSortTimer@i,f,c
 19751  0029D6  2A4A               	incf	printSortTimer@i+1,f,c
 19752  0029D8  D7CB               	goto	i2l8356
 19753  0029DA                     i2l8366:
 19754                           
 19755                           ;sort.c: 326: }
 19756                           ;sort.c: 327: unsigned int start_sec = startTime[0] + startTime[1]*60 + startTime[2]*360
      +                          0;
 19757  0029DA  C110  F001         	movff	_startTime+2,i2___wmul@multiplier
 19758  0029DE  C111  F002         	movff	_startTime+3,i2___wmul@multiplier+1
 19759  0029E2  0E00               	movlw	0
 19760  0029E4  6E04               	movwf	i2___wmul@multiplicand+1,c
 19761  0029E6  0E3C               	movlw	60
 19762  0029E8  6E03               	movwf	i2___wmul@multiplicand,c
 19763  0029EA  EC96  F024         	call	i2___wmul	;wreg free
 19764  0029EE  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 19765  0029F2  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 19766  0029F6  C112  F001         	movff	_startTime+4,i2___wmul@multiplier
 19767  0029FA  C113  F002         	movff	_startTime+5,i2___wmul@multiplier+1
 19768  0029FE  0E0E               	movlw	14
 19769  002A00  6E04               	movwf	i2___wmul@multiplicand+1,c
 19770  002A02  0E10               	movlw	16
 19771  002A04  6E03               	movwf	i2___wmul@multiplicand,c
 19772  002A06  EC96  F024         	call	i2___wmul	;wreg free
 19773  002A0A  5001               	movf	?i2___wmul,w,c
 19774  002A0C  262A               	addwf	??_printSortTimer,f,c
 19775  002A0E  5002               	movf	?i2___wmul+1,w,c
 19776  002A10  222B               	addwfc	??_printSortTimer+1,f,c
 19777  002A12  0101               	movlb	1	; () banked
 19778  002A14  510E               	movf	_startTime& (0+255),w,b
 19779  002A16  242A               	addwf	??_printSortTimer,w,c
 19780  002A18  6E3D               	movwf	printSortTimer@start_sec,c
 19781  002A1A  0101               	movlb	1	; () banked
 19782  002A1C  510F               	movf	(_startTime+1)& (0+255),w,b
 19783  002A1E  202B               	addwfc	??_printSortTimer+1,w,c
 19784  002A20  6E3E               	movwf	printSortTimer@start_sec+1,c
 19785                           
 19786                           ;sort.c: 328: unsigned int cur_sec = curTime[0] + curTime[1]*60 + curTime[2]*3600;
 19787  002A22  C031  F001         	movff	printSortTimer@curTime+2,i2___wmul@multiplier
 19788  002A26  C032  F002         	movff	printSortTimer@curTime+3,i2___wmul@multiplier+1
 19789  002A2A  0E00               	movlw	0
 19790  002A2C  6E04               	movwf	i2___wmul@multiplicand+1,c
 19791  002A2E  0E3C               	movlw	60
 19792  002A30  6E03               	movwf	i2___wmul@multiplicand,c
 19793  002A32  EC96  F024         	call	i2___wmul	;wreg free
 19794  002A36  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 19795  002A3A  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 19796  002A3E  C033  F001         	movff	printSortTimer@curTime+4,i2___wmul@multiplier
 19797  002A42  C034  F002         	movff	printSortTimer@curTime+5,i2___wmul@multiplier+1
 19798  002A46  0E0E               	movlw	14
 19799  002A48  6E04               	movwf	i2___wmul@multiplicand+1,c
 19800  002A4A  0E10               	movlw	16
 19801  002A4C  6E03               	movwf	i2___wmul@multiplicand,c
 19802  002A4E  EC96  F024         	call	i2___wmul	;wreg free
 19803  002A52  5001               	movf	?i2___wmul,w,c
 19804  002A54  262A               	addwf	??_printSortTimer,f,c
 19805  002A56  5002               	movf	?i2___wmul+1,w,c
 19806  002A58  222B               	addwfc	??_printSortTimer+1,f,c
 19807  002A5A  502F               	movf	printSortTimer@curTime,w,c
 19808  002A5C  242A               	addwf	??_printSortTimer,w,c
 19809  002A5E  6E3F               	movwf	printSortTimer@cur_sec,c
 19810  002A60  5030               	movf	printSortTimer@curTime+1,w,c
 19811  002A62  202B               	addwfc	??_printSortTimer+1,w,c
 19812  002A64  6E40               	movwf	printSortTimer@cur_sec+1,c
 19813                           
 19814                           ;sort.c: 329: unsigned int timeDiff = cur_sec - start_sec;
 19815  002A66  C03D  F02A         	movff	printSortTimer@start_sec,??_printSortTimer
 19816  002A6A  C03E  F02B         	movff	printSortTimer@start_sec+1,??_printSortTimer+1
 19817  002A6E  1E2A               	comf	??_printSortTimer,f,c
 19818  002A70  1E2B               	comf	??_printSortTimer+1,f,c
 19819  002A72  4A2A               	infsnz	??_printSortTimer,f,c
 19820  002A74  2A2B               	incf	??_printSortTimer+1,f,c
 19821  002A76  503F               	movf	printSortTimer@cur_sec,w,c
 19822  002A78  242A               	addwf	??_printSortTimer,w,c
 19823  002A7A  6E47               	movwf	printSortTimer@timeDiff,c
 19824  002A7C  5040               	movf	printSortTimer@cur_sec+1,w,c
 19825  002A7E  202B               	addwfc	??_printSortTimer+1,w,c
 19826  002A80  6E48               	movwf	printSortTimer@timeDiff+1,c
 19827                           
 19828                           ;sort.c: 331: total_time = timeDiff;
 19829  002A82  C047  F0F8         	movff	printSortTimer@timeDiff,_total_time
 19830  002A86  C048  F0F9         	movff	printSortTimer@timeDiff+1,_total_time+1
 19831                           
 19832                           ;sort.c: 333: if(timeDiff >= 179){
 19833  002A8A  5048               	movf	printSortTimer@timeDiff+1,w,c
 19834  002A8C  E104               	bnz	i2u730_40
 19835  002A8E  0EB3               	movlw	179
 19836  002A90  5C47               	subwf	printSortTimer@timeDiff,w,c
 19837  002A92  A0D8               	btfss	status,0,c
 19838  002A94  D003               	goto	i2l8376
 19839  002A96                     i2u730_40:
 19840                           
 19841                           ;sort.c: 334: machine_state = DoneSorting_state;
 19842  002A96  0E02               	movlw	2
 19843  002A98  0100               	movlb	0	; () banked
 19844  002A9A  6FFC               	movwf	_machine_state& (0+255),b
 19845  002A9C                     i2l8376:
 19846                           
 19847                           ;sort.c: 336: }
 19848                           ;sort.c: 338: int hour = timeDiff / 3600;
 19849  002A9C  C047  F006         	movff	printSortTimer@timeDiff,i2___lwdiv@dividend
 19850  002AA0  C048  F007         	movff	printSortTimer@timeDiff+1,i2___lwdiv@dividend+1
 19851  002AA4  0E0E               	movlw	14
 19852  002AA6  6E09               	movwf	i2___lwdiv@divisor+1,c
 19853  002AA8  0E10               	movlw	16
 19854  002AAA  6E08               	movwf	i2___lwdiv@divisor,c
 19855  002AAC  EC90  F021         	call	i2___lwdiv	;wreg free
 19856  002AB0  C006  F02D         	movff	?i2___lwdiv,printSortTimer@hour
 19857  002AB4  C007  F02E         	movff	?i2___lwdiv+1,printSortTimer@hour+1
 19858                           
 19859                           ;sort.c: 339: int min = (timeDiff % 3600) / 60;
 19860  002AB8  0E0E               	movlw	14
 19861  002ABA  6E04               	movwf	i2___lwmod@divisor+1,c
 19862  002ABC  0E10               	movlw	16
 19863  002ABE  6E03               	movwf	i2___lwmod@divisor,c
 19864  002AC0  C047  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 19865  002AC4  C048  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 19866  002AC8  EC4F  F022         	call	i2___lwmod	;wreg free
 19867  002ACC  C001  F006         	movff	?i2___lwmod,i2___lwdiv@dividend
 19868  002AD0  C002  F007         	movff	?i2___lwmod+1,i2___lwdiv@dividend+1
 19869  002AD4  0E00               	movlw	0
 19870  002AD6  6E09               	movwf	i2___lwdiv@divisor+1,c
 19871  002AD8  0E3C               	movlw	60
 19872  002ADA  6E08               	movwf	i2___lwdiv@divisor,c
 19873  002ADC  EC90  F021         	call	i2___lwdiv	;wreg free
 19874  002AE0  C006  F041         	movff	?i2___lwdiv,printSortTimer@min
 19875  002AE4  C007  F042         	movff	?i2___lwdiv+1,printSortTimer@min+1
 19876                           
 19877                           ;sort.c: 340: int sec = (timeDiff % 3600) % 60;
 19878  002AE8  0E0E               	movlw	14
 19879  002AEA  6E04               	movwf	i2___lwmod@divisor+1,c
 19880  002AEC  0E10               	movlw	16
 19881  002AEE  6E03               	movwf	i2___lwmod@divisor,c
 19882  002AF0  C047  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 19883  002AF4  C048  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 19884  002AF8  EC4F  F022         	call	i2___lwmod	;wreg free
 19885  002AFC  C001  F045         	movff	?i2___lwmod,_printSortTimer$2436
 19886  002B00  C002  F046         	movff	?i2___lwmod+1,_printSortTimer$2436+1
 19887                           
 19888                           ;sort.c: 340: int sec = (timeDiff % 3600) % 60;
 19889  002B04  C045  F001         	movff	_printSortTimer$2436,i2___lwmod@dividend
 19890  002B08  C046  F002         	movff	_printSortTimer$2436+1,i2___lwmod@dividend+1
 19891  002B0C  0E00               	movlw	0
 19892  002B0E  6E04               	movwf	i2___lwmod@divisor+1,c
 19893  002B10  0E3C               	movlw	60
 19894  002B12  6E03               	movwf	i2___lwmod@divisor,c
 19895  002B14  EC4F  F022         	call	i2___lwmod	;wreg free
 19896  002B18  C001  F043         	movff	?i2___lwmod,printSortTimer@sec
 19897  002B1C  C002  F044         	movff	?i2___lwmod+1,printSortTimer@sec+1
 19898                           
 19899                           ;sort.c: 342: lcdInst(0b10000000);;
 19900  002B20  0E80               	movlw	128
 19901  002B22  EC4A  F025         	call	i2_lcdInst
 19902                           
 19903                           ;sort.c: 343: printf("SORTING...");
 19904  002B26  0E7C               	movlw	low STR_64
 19905  002B28  6E0D               	movwf	i2printf@f,c
 19906  002B2A  0EFF               	movlw	high STR_64
 19907  002B2C  6E0E               	movwf	i2printf@f+1,c
 19908  002B2E  EC96  F00C         	call	i2_printf	;wreg free
 19909                           
 19910                           ;sort.c: 344: lcdInst(0b11000000);;
 19911  002B32  0EC0               	movlw	192
 19912  002B34  EC4A  F025         	call	i2_lcdInst
 19913                           
 19914                           ;sort.c: 345: printf("TIME %d:%02d", min, sec);
 19915  002B38  0E42               	movlw	low STR_65
 19916  002B3A  6E0D               	movwf	i2printf@f,c
 19917  002B3C  0EFF               	movlw	high STR_65
 19918  002B3E  6E0E               	movwf	i2printf@f+1,c
 19919  002B40  C041  F00F         	movff	printSortTimer@min,?i2_printf+2
 19920  002B44  C042  F010         	movff	printSortTimer@min+1,?i2_printf+3
 19921  002B48  C043  F011         	movff	printSortTimer@sec,?i2_printf+4
 19922  002B4C  C044  F012         	movff	printSortTimer@sec+1,?i2_printf+5
 19923  002B50  EC96  F00C         	call	i2_printf	;wreg free
 19924  002B54  0012               	return		;funcret
 19925  002B56                     __end_of_printSortTimer:
 19926                           	opt stack 0
 19927                           pclatu	equ	0xFFB
 19928                           pclath	equ	0xFFA
 19929                           tblptru	equ	0xFF8
 19930                           tblptrh	equ	0xFF7
 19931                           tblptrl	equ	0xFF6
 19932                           tablat	equ	0xFF5
 19933                           prodh	equ	0xFF4
 19934                           prodl	equ	0xFF3
 19935                           intcon	equ	0xFF2
 19936                           intcon2	equ	0xFF1
 19937                           intcon3	equ	0xFF0
 19938                           indf0	equ	0xFEF
 19939                           postinc0	equ	0xFEE
 19940                           fsr0h	equ	0xFEA
 19941                           fsr0l	equ	0xFE9
 19942                           wreg	equ	0xFE8
 19943                           postdec1	equ	0xFE5
 19944                           fsr1h	equ	0xFE2
 19945                           fsr1l	equ	0xFE1
 19946                           indf2	equ	0xFDF
 19947                           postinc2	equ	0xFDE
 19948                           postdec2	equ	0xFDD
 19949                           fsr2h	equ	0xFDA
 19950                           fsr2l	equ	0xFD9
 19951                           status	equ	0xFD8
 19952                           
 19953 ;; *************** function i2_printf *****************
 19954 ;; Defined at:
 19955 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 19956 ;; Parameters:    Size  Location     Type
 19957 ;;  f               2   12[COMRAM] PTR const unsigned char 
 19958 ;;		 -> STR_119(18), STR_118(18), STR_117(18), STR_116(18), 
 19959 ;;		 -> STR_115(17), STR_114(17), STR_113(11), STR_112(18), 
 19960 ;;		 -> STR_111(18), STR_110(17), STR_109(15), STR_108(15), 
 19961 ;;		 -> STR_107(15), STR_106(17), STR_105(17), STR_104(17), 
 19962 ;;		 -> STR_103(16), STR_102(17), STR_101(17), STR_100(17), 
 19963 ;;		 -> STR_99(17), STR_98(17), STR_97(17), STR_96(15), 
 19964 ;;		 -> STR_95(11), STR_94(17), STR_93(11), STR_92(17), 
 19965 ;;		 -> STR_91(14), STR_90(15), STR_89(14), STR_88(10), 
 19966 ;;		 -> STR_87(9), STR_86(9), STR_85(10), STR_84(10), 
 19967 ;;		 -> STR_83(16), STR_82(15), STR_81(3), STR_80(15), 
 19968 ;;		 -> STR_79(13), STR_78(14), STR_77(8), STR_76(14), 
 19969 ;;		 -> STR_75(15), STR_74(12), STR_73(14), STR_72(17), 
 19970 ;;		 -> STR_71(14), STR_70(15), STR_69(17), STR_68(17), 
 19971 ;;		 -> STR_67(7), STR_66(21), STR_65(13), STR_64(11), 
 19972 ;;		 -> STR_63(24), STR_50(17), STR_49(17), STR_48(17), 
 19973 ;;		 -> STR_47(17), STR_46(17), STR_45(17), STR_44(17), 
 19974 ;;		 -> STR_43(17), STR_42(17), STR_41(17), STR_40(17), 
 19975 ;;		 -> STR_39(17), STR_38(17), STR_37(17), STR_36(17), 
 19976 ;;		 -> STR_35(17), STR_34(17), STR_33(17), STR_32(17), 
 19977 ;;		 -> STR_31(17), STR_30(17), STR_29(3), STR_28(17), 
 19978 ;;		 -> STR_27(17), STR_26(17), STR_25(17), STR_24(17), 
 19979 ;;		 -> STR_23(14), STR_22(10), STR_21(24), STR_7(7), 
 19980 ;;		 -> STR_6(17), STR_5(18), STR_4(16), STR_3(18), 
 19981 ;;		 -> STR_2(14), STR_1(18), 
 19982 ;; Auto vars:     Size  Location     Type
 19983 ;;  printf          4    0        struct .
 19984 ;;  printf          2   39[COMRAM] int 
 19985 ;;  printf          2   35[COMRAM] unsigned int 
 19986 ;;  printf          2   33[COMRAM] unsigned int 
 19987 ;;  printf          2   31[COMRAM] PTR void [1]
 19988 ;;		 -> ?i2_printf(2), ?_printf(2), 
 19989 ;;  printf          2   29[COMRAM] PTR const unsigned char 
 19990 ;;		 -> STR_120(7), count_total(2), printRTC@month(4), UI@month(4), 
 19991 ;;  printf          1   38[COMRAM] char 
 19992 ;;  printf          1   37[COMRAM] unsigned char 
 19993 ;;  printf          1   28[COMRAM] char 
 19994 ;; Return value:  Size  Location     Type
 19995 ;;                  2   12[COMRAM] int 
 19996 ;; Registers used:
 19997 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19998 ;; Tracked objects:
 19999 ;;		On entry : 0/0
 20000 ;;		On exit  : 0/0
 20001 ;;		Unchanged: 0/0
 20002 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20003 ;;      Params:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20004 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20005 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20006 ;;      Totals:        29       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20007 ;;Total ram usage:       29 bytes
 20008 ;; Hardware stack levels used:    1
 20009 ;; Hardware stack levels required when called:    2
 20010 ;; This function calls:
 20011 ;;		i2___lwdiv
 20012 ;;		i2___lwmod
 20013 ;;		i2___wmul
 20014 ;;		i2_isdigit
 20015 ;;		i2_putch
 20016 ;; This function is called by:
 20017 ;;		_change_state_to_menu_11
 20018 ;;		_change_state_to_menu_23
 20019 ;;		_change_state_to_logs_11
 20020 ;;		_change_state_to_logs_12
 20021 ;;		_change_state_to_logs_22
 20022 ;;		_change_state_to_logs_23
 20023 ;;		_change_state_to_logs_33
 20024 ;;		_change_state_to_logs_34
 20025 ;;		_printSortTimer
 20026 ;;		i2_change_state_to_menu_start
 20027 ;;		i2_change_state_to_menu_12
 20028 ;;		i2_change_state_to_menu_22
 20029 ;;		i2_printRTC
 20030 ;; This function uses a non-reentrant model
 20031 ;;
 20032                           
 20033                           	psect	text79
 20034  00192C                     __ptext79:
 20035                           	opt stack 0
 20036  00192C                     i2_printf:
 20037                           	opt stack 19
 20038                           
 20039                           ;doprnt.c: 466: va_list ap;
 20040                           ;doprnt.c: 499: signed char c;
 20041                           ;doprnt.c: 501: int width;
 20042                           ;doprnt.c: 506: signed char prec;
 20043                           ;doprnt.c: 508: unsigned char flag;
 20044                           ;doprnt.c: 523: union {
 20045                           ;doprnt.c: 524: unsigned long vd;
 20046                           ;doprnt.c: 525: double integ;
 20047                           ;doprnt.c: 526: } tmpval;
 20048                           ;doprnt.c: 528: unsigned int val;
 20049                           ;doprnt.c: 529: unsigned len;
 20050                           ;doprnt.c: 530: const char * cp;
 20051                           ;doprnt.c: 533: *ap = __va_start();
 20052                           
 20053                           ;incstack = 0
 20054  00192C  0E0F               	movlw	low (?i2_printf+2)
 20055  00192E  6E20               	movwf	i2printf@ap,c
 20056  001930  0E00               	movlw	high (?i2_printf+2)
 20057  001932  6E21               	movwf	i2printf@ap+1,c
 20058                           
 20059                           ;doprnt.c: 536: while(c = *f++) {
 20060  001934  D1A4               	goto	i2l6000
 20061  001936                     i2l5870:
 20062                           
 20063                           ;doprnt.c: 538: if(c != '%')
 20064  001936  0E25               	movlw	37
 20065  001938  1827               	xorwf	i2printf@c,w,c
 20066  00193A  B4D8               	btfsc	status,2,c
 20067  00193C  D004               	goto	i2l5874
 20068                           
 20069                           ;doprnt.c: 540: {
 20070                           ;doprnt.c: 541: (putch(c) );
 20071  00193E  5027               	movf	i2printf@c,w,c
 20072  001940  EC44  F025         	call	i2_putch
 20073                           
 20074                           ;doprnt.c: 542: continue;
 20075  001944  D19C               	goto	i2l6000
 20076  001946                     i2l5874:
 20077                           
 20078                           ;doprnt.c: 543: }
 20079                           ;doprnt.c: 546: width = 0;
 20080  001946  0E00               	movlw	0
 20081  001948  6E29               	movwf	i2printf@width+1,c
 20082  00194A  0E00               	movlw	0
 20083  00194C  6E28               	movwf	i2printf@width,c
 20084                           
 20085                           ;doprnt.c: 548: flag = 0;
 20086  00194E  0E00               	movlw	0
 20087  001950  6E26               	movwf	i2printf@flag,c
 20088                           
 20089                           ;doprnt.c: 551: switch(*f) {
 20090                           
 20091                           ;doprnt.c: 550: for(;;) {
 20092  001952  D003               	goto	i2l5880
 20093  001954                     i2l5876:
 20094                           
 20095                           ;doprnt.c: 580: flag |= 0x04;
 20096  001954  8426               	bsf	i2printf@flag,2,c
 20097                           
 20098                           ;doprnt.c: 581: f++;
 20099  001956  4A0D               	infsnz	i2printf@f,f,c
 20100  001958  2A0E               	incf	i2printf@f+1,f,c
 20101  00195A                     i2l5880:
 20102  00195A  C00D  FFF6         	movff	i2printf@f,tblptrl
 20103  00195E  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 20104  001962                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 20105  001962  6AF8               	clrf	tblptru,c
 20106  001964                     	endif
 20107  001964                     	if	0	;tblptru may be non-zero
 20108  001964                     	endif
 20109  001964  0008               	tblrd		*
 20110  001966  50F5               	movf	tablat,w,c
 20111                           
 20112                           ; Switch size 1, requested type "space"
 20113                           ; Number of cases is 1, Range of values is 48 to 48
 20114                           ; switch strategies available:
 20115                           ; Name         Instructions Cycles
 20116                           ; simple_byte            4     3 (average)
 20117                           ;	Chosen strategy is simple_byte
 20118  001968  0A30               	xorlw	48	; case 48
 20119  00196A  B4D8               	btfsc	status,2,c
 20120  00196C  D7F3               	goto	i2l5876
 20121                           
 20122                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 20123                           
 20124                           ;doprnt.c: 586: }
 20125                           
 20126                           ;doprnt.c: 585: break;
 20127  00196E  C00D  FFF6         	movff	i2printf@f,tblptrl
 20128  001972  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 20129  001976                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 20130  001976  6AF8               	clrf	tblptru,c
 20131  001978                     	endif
 20132  001978                     	if	0	;tblptru may be non-zero
 20133  001978                     	endif
 20134  001978  0008               	tblrd		*
 20135  00197A  50F5               	movf	tablat,w,c
 20136  00197C  ECF0  F024         	call	i2_isdigit
 20137  001980  A0D8               	btfss	status,0,c
 20138  001982  D0A6               	goto	i2l5928
 20139                           
 20140                           ;doprnt.c: 598: width = 0;
 20141  001984  0E00               	movlw	0
 20142  001986  6E29               	movwf	i2printf@width+1,c
 20143  001988  0E00               	movlw	0
 20144  00198A  6E28               	movwf	i2printf@width,c
 20145  00198C                     i2l5886:
 20146                           
 20147                           ;doprnt.c: 600: width *= 10;
 20148  00198C  C028  F001         	movff	i2printf@width,i2___wmul@multiplier
 20149  001990  C029  F002         	movff	i2printf@width+1,i2___wmul@multiplier+1
 20150  001994  0E00               	movlw	0
 20151  001996  6E04               	movwf	i2___wmul@multiplicand+1,c
 20152  001998  0E0A               	movlw	10
 20153  00199A  6E03               	movwf	i2___wmul@multiplicand,c
 20154  00199C  EC96  F024         	call	i2___wmul	;wreg free
 20155  0019A0  C001  F028         	movff	?i2___wmul,i2printf@width
 20156  0019A4  C002  F029         	movff	?i2___wmul+1,i2printf@width+1
 20157                           
 20158                           ;doprnt.c: 601: width += *f++ - '0';
 20159  0019A8  0ED0               	movlw	208
 20160  0019AA  6E19               	movwf	??i2_printf& (0+255),c
 20161  0019AC  0EFF               	movlw	255
 20162  0019AE  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 20163  0019B0  C00D  FFF6         	movff	i2printf@f,tblptrl
 20164  0019B4  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 20165  0019B8                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 20166  0019B8  6AF8               	clrf	tblptru,c
 20167  0019BA                     	endif
 20168  0019BA                     	if	0	;tblptru may be non-zero
 20169  0019BA                     	endif
 20170  0019BA  0008               	tblrd		*
 20171  0019BC  50F5               	movf	tablat,w,c
 20172  0019BE  6E1B               	movwf	(??i2_printf+2)& (0+255),c
 20173  0019C0  6A1C               	clrf	(??i2_printf+3)& (0+255),c
 20174  0019C2  5019               	movf	??i2_printf,w,c
 20175  0019C4  261B               	addwf	??i2_printf+2,f,c
 20176  0019C6  501A               	movf	??i2_printf+1,w,c
 20177  0019C8  221C               	addwfc	??i2_printf+3,f,c
 20178  0019CA  501B               	movf	??i2_printf+2,w,c
 20179  0019CC  2628               	addwf	i2printf@width,f,c
 20180  0019CE  501C               	movf	??i2_printf+3,w,c
 20181  0019D0  2229               	addwfc	i2printf@width+1,f,c
 20182  0019D2  4A0D               	infsnz	i2printf@f,f,c
 20183  0019D4  2A0E               	incf	i2printf@f+1,f,c
 20184                           
 20185                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 20186  0019D6  C00D  FFF6         	movff	i2printf@f,tblptrl
 20187  0019DA  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 20188  0019DE                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 20189  0019DE  6AF8               	clrf	tblptru,c
 20190  0019E0                     	endif
 20191  0019E0                     	if	0	;tblptru may be non-zero
 20192  0019E0                     	endif
 20193  0019E0  0008               	tblrd		*
 20194  0019E2  50F5               	movf	tablat,w,c
 20195  0019E4  ECF0  F024         	call	i2_isdigit
 20196  0019E8  A0D8               	btfss	status,0,c
 20197  0019EA  D072               	goto	i2l5928
 20198  0019EC  D7CF               	goto	i2l5886
 20199  0019EE                     i2l5894:
 20200                           
 20201                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 20202  0019EE  C020  FFD9         	movff	i2printf@ap,fsr2l
 20203  0019F2  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 20204  0019F6  CFDE F01E          	movff	postinc2,i2printf@cp
 20205  0019FA  CFDD F01F          	movff	postdec2,i2printf@cp+1
 20206  0019FE  0E02               	movlw	2
 20207  001A00  2620               	addwf	i2printf@ap,f,c
 20208  001A02  0E00               	movlw	0
 20209  001A04  2221               	addwfc	i2printf@ap+1,f,c
 20210                           
 20211                           ;doprnt.c: 740: if(!cp)
 20212  001A06  501E               	movf	i2printf@cp,w,c
 20213  001A08  101F               	iorwf	i2printf@cp+1,w,c
 20214  001A0A  A4D8               	btfss	status,2,c
 20215  001A0C  D004               	goto	i2l5902
 20216                           
 20217                           ;doprnt.c: 741: cp = "(null)";
 20218  001A0E  0EB6               	movlw	low STR_120
 20219  001A10  6E1E               	movwf	i2printf@cp,c
 20220  001A12  0EFF               	movlw	high STR_120
 20221  001A14  6E1F               	movwf	i2printf@cp+1,c
 20222  001A16                     i2l5902:
 20223                           
 20224                           ;doprnt.c: 745: len = 0;
 20225  001A16  0E00               	movlw	0
 20226  001A18  6E23               	movwf	i2printf@len+1,c
 20227  001A1A  0E00               	movlw	0
 20228  001A1C  6E22               	movwf	i2printf@len,c
 20229                           
 20230                           ;doprnt.c: 746: while(cp[len])
 20231  001A1E  D002               	goto	i2l5906
 20232  001A20                     i2l5904:
 20233                           
 20234                           ;doprnt.c: 747: len++;
 20235  001A20  4A22               	infsnz	i2printf@len,f,c
 20236  001A22  2A23               	incf	i2printf@len+1,f,c
 20237  001A24                     i2l5906:
 20238  001A24  5022               	movf	i2printf@len,w,c
 20239  001A26  241E               	addwf	i2printf@cp,w,c
 20240  001A28  6E19               	movwf	??i2_printf& (0+255),c
 20241  001A2A  5023               	movf	i2printf@len+1,w,c
 20242  001A2C  201F               	addwfc	i2printf@cp+1,w,c
 20243  001A2E  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 20244  001A30  C019  FFF6         	movff	??i2_printf,tblptrl
 20245  001A34  C01A  FFF7         	movff	??i2_printf+1,tblptrh
 20246  001A38  0E00               	movlw	low (__mediumconst shr (0+16))
 20247  001A3A  6EF8               	movwf	tblptru,c
 20248  001A3C  0E0F               	movlw	(high __ramtop+-1)
 20249  001A3E  64F7               	cpfsgt	tblptrh,c
 20250  001A40  D003               	bra	i2u443_47
 20251  001A42  0008               	tblrd		*
 20252  001A44  50F5               	movf	tablat,w,c
 20253  001A46  D005               	bra	i2u443_40
 20254  001A48                     i2u443_47:
 20255  001A48  CFF6 FFE9          	movff	tblptrl,fsr0l
 20256  001A4C  CFF7 FFEA          	movff	tblptrh,fsr0h
 20257  001A50  50EF               	movf	indf0,w,c
 20258  001A52                     i2u443_40:
 20259  001A52  0900               	iorlw	0
 20260  001A54  A4D8               	btfss	status,2,c
 20261  001A56  D7E4               	goto	i2l5904
 20262                           
 20263                           ;doprnt.c: 757: if(width > len)
 20264  001A58  5028               	movf	i2printf@width,w,c
 20265  001A5A  5C22               	subwf	i2printf@len,w,c
 20266  001A5C  5029               	movf	i2printf@width+1,w,c
 20267  001A5E  5823               	subwfb	i2printf@len+1,w,c
 20268  001A60  B0D8               	btfsc	status,0,c
 20269  001A62  D005               	goto	i2l5912
 20270                           
 20271                           ;doprnt.c: 758: width -= len;
 20272  001A64  5022               	movf	i2printf@len,w,c
 20273  001A66  5E28               	subwf	i2printf@width,f,c
 20274  001A68  5023               	movf	i2printf@len+1,w,c
 20275  001A6A  5A29               	subwfb	i2printf@width+1,f,c
 20276  001A6C  D008               	goto	i2l5916
 20277  001A6E                     i2l5912:
 20278                           
 20279                           ;doprnt.c: 759: else
 20280                           ;doprnt.c: 760: width = 0;
 20281  001A6E  0E00               	movlw	0
 20282  001A70  6E29               	movwf	i2printf@width+1,c
 20283  001A72  0E00               	movlw	0
 20284  001A74  6E28               	movwf	i2printf@width,c
 20285                           
 20286                           ;doprnt.c: 764: while(width--)
 20287  001A76  D003               	goto	i2l5916
 20288  001A78                     i2l5914:
 20289                           
 20290                           ;doprnt.c: 765: (putch(' ') );
 20291  001A78  0E20               	movlw	32
 20292  001A7A  EC44  F025         	call	i2_putch
 20293  001A7E                     i2l5916:
 20294  001A7E  0628               	decf	i2printf@width,f,c
 20295  001A80  A0D8               	btfss	status,0,c
 20296  001A82  0629               	decf	i2printf@width+1,f,c
 20297  001A84  2828               	incf	i2printf@width,w,c
 20298  001A86  E1F8               	bnz	i2l5914
 20299  001A88  2829               	incf	i2printf@width+1,w,c
 20300  001A8A  B4D8               	btfsc	status,2,c
 20301  001A8C  D016               	goto	i2l5922
 20302  001A8E  D7F4               	goto	i2l5914
 20303  001A90                     i2l5918:
 20304                           
 20305                           ;doprnt.c: 768: (putch(*cp++) );
 20306  001A90  C01E  FFF6         	movff	i2printf@cp,tblptrl
 20307  001A94  C01F  FFF7         	movff	i2printf@cp+1,tblptrh
 20308  001A98  0E00               	movlw	low (__mediumconst shr (0+16))
 20309  001A9A  6EF8               	movwf	tblptru,c
 20310  001A9C  0E0F               	movlw	(high __ramtop+-1)
 20311  001A9E  64F7               	cpfsgt	tblptrh,c
 20312  001AA0  D003               	bra	i2u447_47
 20313  001AA2  0008               	tblrd		*
 20314  001AA4  50F5               	movf	tablat,w,c
 20315  001AA6  D005               	bra	i2u447_40
 20316  001AA8                     i2u447_47:
 20317  001AA8  CFF6 FFE9          	movff	tblptrl,fsr0l
 20318  001AAC  CFF7 FFEA          	movff	tblptrh,fsr0h
 20319  001AB0  50EF               	movf	indf0,w,c
 20320  001AB2                     i2u447_40:
 20321  001AB2  EC44  F025         	call	i2_putch
 20322  001AB6  4A1E               	infsnz	i2printf@cp,f,c
 20323  001AB8  2A1F               	incf	i2printf@cp+1,f,c
 20324  001ABA                     i2l5922:
 20325  001ABA  0622               	decf	i2printf@len,f,c
 20326  001ABC  A0D8               	btfss	status,0,c
 20327  001ABE  0623               	decf	i2printf@len+1,f,c
 20328  001AC0  2822               	incf	i2printf@len,w,c
 20329  001AC2  E1E6               	bnz	i2l5918
 20330  001AC4  2823               	incf	i2printf@len+1,w,c
 20331  001AC6  B4D8               	btfsc	status,2,c
 20332  001AC8  D0DA               	goto	i2l6000
 20333  001ACA  D7E2               	goto	i2l5918
 20334  001ACC                     i2l5924:
 20335                           
 20336                           ;doprnt.c: 818: flag |= 0x40;
 20337  001ACC  8C26               	bsf	i2printf@flag,6,c
 20338                           
 20339                           ;doprnt.c: 822: }
 20340                           
 20341                           ;doprnt.c: 819: break;
 20342  001ACE  D01B               	goto	i2l1316
 20343  001AD0                     i2l5928:
 20344  001AD0  C00D  FFF6         	movff	i2printf@f,tblptrl
 20345  001AD4  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 20346  001AD8  4A0D               	infsnz	i2printf@f,f,c
 20347  001ADA  2A0E               	incf	i2printf@f+1,f,c
 20348  001ADC                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 20349  001ADC  6AF8               	clrf	tblptru,c
 20350  001ADE                     	endif
 20351  001ADE                     	if	0	;tblptru may be non-zero
 20352  001ADE                     	endif
 20353  001ADE  0008               	tblrd		*
 20354  001AE0  CFF5 F027          	movff	tablat,i2printf@c
 20355  001AE4  5027               	movf	i2printf@c,w,c
 20356                           
 20357                           ; Switch size 1, requested type "space"
 20358                           ; Number of cases is 5, Range of values is 0 to 117
 20359                           ; switch strategies available:
 20360                           ; Name         Instructions Cycles
 20361                           ; simple_byte           16     9 (average)
 20362                           ;	Chosen strategy is simple_byte
 20363  001AE6  0A00               	xorlw	0	; case 0
 20364  001AE8  B4D8               	btfsc	status,2,c
 20365  001AEA  0012               	return	
 20366  001AEC  0A64               	xorlw	100	; case 100
 20367  001AEE  B4D8               	btfsc	status,2,c
 20368  001AF0  D00A               	goto	i2l1316
 20369  001AF2  0A0D               	xorlw	13	; case 105
 20370  001AF4  B4D8               	btfsc	status,2,c
 20371  001AF6  D007               	goto	i2l1316
 20372  001AF8  0A1A               	xorlw	26	; case 115
 20373  001AFA  B4D8               	btfsc	status,2,c
 20374  001AFC  D778               	goto	i2l5894
 20375  001AFE  0A06               	xorlw	6	; case 117
 20376  001B00  B4D8               	btfsc	status,2,c
 20377  001B02  D7E4               	goto	i2l5924
 20378  001B04  D0BC               	goto	i2l6000
 20379  001B06                     i2l1316:
 20380                           
 20381                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
 20382  001B06  BC26               	btfsc	i2printf@flag,6,c
 20383  001B08  D015               	goto	i2l5940
 20384                           
 20385                           ;doprnt.c: 1253: {
 20386                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 20387  001B0A  C020  FFD9         	movff	i2printf@ap,fsr2l
 20388  001B0E  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 20389  001B12  CFDE F024          	movff	postinc2,i2printf@val
 20390  001B16  CFDD F025          	movff	postdec2,i2printf@val+1
 20391  001B1A  0E02               	movlw	2
 20392  001B1C  2620               	addwf	i2printf@ap,f,c
 20393  001B1E  0E00               	movlw	0
 20394  001B20  2221               	addwfc	i2printf@ap+1,f,c
 20395                           
 20396                           ;doprnt.c: 1261: if((int)val < 0) {
 20397  001B22  AE25               	btfss	i2printf@val+1,7,c
 20398  001B24  D013               	goto	i2l5944
 20399                           
 20400                           ;doprnt.c: 1262: flag |= 0x03;
 20401  001B26  0E03               	movlw	3
 20402  001B28  1226               	iorwf	i2printf@flag,f,c
 20403                           
 20404                           ;doprnt.c: 1263: val = -val;
 20405  001B2A  6C24               	negf	i2printf@val,c
 20406  001B2C  1E25               	comf	i2printf@val+1,f,c
 20407  001B2E  B0D8               	btfsc	status,0,c
 20408  001B30  2A25               	incf	i2printf@val+1,f,c
 20409                           
 20410                           ;doprnt.c: 1264: }
 20411                           ;doprnt.c: 1266: }
 20412  001B32  D00C               	goto	i2l5944
 20413  001B34                     i2l5940:
 20414                           
 20415                           ;doprnt.c: 1268: else
 20416                           ;doprnt.c: 1273: {
 20417                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 20418  001B34  C020  FFD9         	movff	i2printf@ap,fsr2l
 20419  001B38  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 20420  001B3C  CFDE F024          	movff	postinc2,i2printf@val
 20421  001B40  CFDD F025          	movff	postdec2,i2printf@val+1
 20422  001B44  0E02               	movlw	2
 20423  001B46  2620               	addwf	i2printf@ap,f,c
 20424  001B48  0E00               	movlw	0
 20425  001B4A  2221               	addwfc	i2printf@ap+1,f,c
 20426  001B4C                     i2l5944:
 20427                           
 20428                           ;doprnt.c: 1287: }
 20429                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 20430  001B4C  0E01               	movlw	1
 20431  001B4E  6E27               	movwf	i2printf@c,c
 20432  001B50                     i2l5946:
 20433  001B50  0E05               	movlw	5
 20434  001B52  1827               	xorwf	i2printf@c,w,c
 20435  001B54  B4D8               	btfsc	status,2,c
 20436  001B56  D015               	goto	i2l5958
 20437                           
 20438                           ;doprnt.c: 1306: if(val < dpowers[c])
 20439  001B58  5027               	movf	i2printf@c,w,c
 20440  001B5A  0D02               	mullw	2
 20441  001B5C  0E12               	movlw	low _dpowers
 20442  001B5E  24F3               	addwf	prodl,w,c
 20443  001B60  6EF6               	movwf	tblptrl,c
 20444  001B62  0EFB               	movlw	high _dpowers
 20445  001B64  20F4               	addwfc	prodh,w,c
 20446  001B66  6EF7               	movwf	tblptrh,c
 20447  001B68                     	if	1	;There are 3 active tblptr bytes
 20448  001B68  6AF8               	clrf	tblptru,c
 20449  001B6A  0E00               	movlw	low (__mediumconst shr (0+16))
 20450  001B6C  22F8               	addwfc	tblptru,f,c
 20451  001B6E                     	endif
 20452  001B6E  0009               	tblrd		*+
 20453  001B70  50F5               	movf	tablat,w,c
 20454  001B72  5C24               	subwf	i2printf@val,w,c
 20455  001B74  0009               	tblrd		*+
 20456  001B76  50F5               	movf	tablat,w,c
 20457  001B78  5825               	subwfb	i2printf@val+1,w,c
 20458  001B7A  A0D8               	btfss	status,0,c
 20459  001B7C  D002               	goto	i2l5958
 20460                           
 20461                           ;doprnt.c: 1307: break;
 20462  001B7E  2A27               	incf	i2printf@c,f,c
 20463  001B80  D7E7               	goto	i2l5946
 20464  001B82                     i2l5958:
 20465                           
 20466                           ;doprnt.c: 1345: if(width && flag & 0x03)
 20467  001B82  5028               	movf	i2printf@width,w,c
 20468  001B84  1029               	iorwf	i2printf@width+1,w,c
 20469  001B86  B4D8               	btfsc	status,2,c
 20470  001B88  D009               	goto	i2l5964
 20471  001B8A  C026  F019         	movff	i2printf@flag,??i2_printf
 20472  001B8E  0E03               	movlw	3
 20473  001B90  1619               	andwf	??i2_printf,f,c
 20474  001B92  B4D8               	btfsc	status,2,c
 20475  001B94  D003               	goto	i2l5964
 20476                           
 20477                           ;doprnt.c: 1346: width--;
 20478  001B96  0628               	decf	i2printf@width,f,c
 20479  001B98  A0D8               	btfss	status,0,c
 20480  001B9A  0629               	decf	i2printf@width+1,f,c
 20481  001B9C                     i2l5964:
 20482                           
 20483                           ;doprnt.c: 1381: if(width > c)
 20484  001B9C  0E80               	movlw	128
 20485  001B9E  BE27               	btfsc	i2printf@c,7,c
 20486  001BA0  0E7F               	movlw	127
 20487  001BA2  6E19               	movwf	??i2_printf& (0+255),c
 20488  001BA4  5028               	movf	i2printf@width,w,c
 20489  001BA6  5C27               	subwf	i2printf@c,w,c
 20490  001BA8  5029               	movf	i2printf@width+1,w,c
 20491  001BAA  0A80               	xorlw	128
 20492  001BAC  5819               	subwfb	??i2_printf& (0+255),w,c
 20493  001BAE  B0D8               	btfsc	status,0,c
 20494  001BB0  D007               	goto	i2l5968
 20495                           
 20496                           ;doprnt.c: 1382: width -= c;
 20497  001BB2  5027               	movf	i2printf@c,w,c
 20498  001BB4  5E28               	subwf	i2printf@width,f,c
 20499  001BB6  0E00               	movlw	0
 20500  001BB8  BE27               	btfsc	i2printf@c,7,c
 20501  001BBA  0EFF               	movlw	255
 20502  001BBC  5A29               	subwfb	i2printf@width+1,f,c
 20503  001BBE  D004               	goto	i2l5970
 20504  001BC0                     i2l5968:
 20505                           
 20506                           ;doprnt.c: 1383: else
 20507                           ;doprnt.c: 1384: width = 0;
 20508  001BC0  0E00               	movlw	0
 20509  001BC2  6E29               	movwf	i2printf@width+1,c
 20510  001BC4  0E00               	movlw	0
 20511  001BC6  6E28               	movwf	i2printf@width,c
 20512  001BC8                     i2l5970:
 20513                           
 20514                           ;doprnt.c: 1387: if(flag & 0x04) {
 20515  001BC8  A426               	btfss	i2printf@flag,2,c
 20516  001BCA  D014               	goto	i2l5982
 20517                           
 20518                           ;doprnt.c: 1392: if(flag & 0x03)
 20519  001BCC  C026  F019         	movff	i2printf@flag,??i2_printf
 20520  001BD0  0E03               	movlw	3
 20521  001BD2  1619               	andwf	??i2_printf,f,c
 20522  001BD4  B4D8               	btfsc	status,2,c
 20523  001BD6  D003               	goto	i2l5976
 20524                           
 20525                           ;doprnt.c: 1393: (putch('-') );
 20526  001BD8  0E2D               	movlw	45
 20527  001BDA  EC44  F025         	call	i2_putch
 20528  001BDE                     i2l5976:
 20529                           
 20530                           ;doprnt.c: 1415: if(width)
 20531  001BDE  5028               	movf	i2printf@width,w,c
 20532  001BE0  1029               	iorwf	i2printf@width+1,w,c
 20533  001BE2  B4D8               	btfsc	status,2,c
 20534  001BE4  D01E               	goto	i2l5992
 20535                           
 20536                           ;doprnt.c: 1417: (putch('0') );
 20537                           
 20538                           ;doprnt.c: 1416: do
 20539  001BE6  0E30               	movlw	48
 20540  001BE8  EC44  F025         	call	i2_putch
 20541                           
 20542                           ;doprnt.c: 1418: while(--width);
 20543  001BEC  0628               	decf	i2printf@width,f,c
 20544  001BEE  A0D8               	btfss	status,0,c
 20545  001BF0  0629               	decf	i2printf@width+1,f,c
 20546  001BF2  D7F5               	goto	i2l5976
 20547  001BF4                     i2l5982:
 20548                           
 20549                           ;doprnt.c: 1422: {
 20550                           ;doprnt.c: 1424: if(width
 20551                           ;doprnt.c: 1428: )
 20552  001BF4  5028               	movf	i2printf@width,w,c
 20553  001BF6  1029               	iorwf	i2printf@width+1,w,c
 20554  001BF8  B4D8               	btfsc	status,2,c
 20555  001BFA  D00A               	goto	i2l5988
 20556  001BFC                     i2l5984:
 20557                           
 20558                           ;doprnt.c: 1430: (putch(' ') );
 20559  001BFC  0E20               	movlw	32
 20560  001BFE  EC44  F025         	call	i2_putch
 20561                           
 20562                           ;doprnt.c: 1431: while(--width);
 20563  001C02  0628               	decf	i2printf@width,f,c
 20564  001C04  A0D8               	btfss	status,0,c
 20565  001C06  0629               	decf	i2printf@width+1,f,c
 20566  001C08  5028               	movf	i2printf@width,w,c
 20567  001C0A  1029               	iorwf	i2printf@width+1,w,c
 20568  001C0C  A4D8               	btfss	status,2,c
 20569  001C0E  D7F6               	goto	i2l5984
 20570  001C10                     i2l5988:
 20571                           
 20572                           ;doprnt.c: 1438: if(flag & 0x03)
 20573  001C10  C026  F019         	movff	i2printf@flag,??i2_printf
 20574  001C14  0E03               	movlw	3
 20575  001C16  1619               	andwf	??i2_printf,f,c
 20576  001C18  B4D8               	btfsc	status,2,c
 20577  001C1A  D003               	goto	i2l5992
 20578                           
 20579                           ;doprnt.c: 1439: (putch('-') );
 20580  001C1C  0E2D               	movlw	45
 20581  001C1E  EC44  F025         	call	i2_putch
 20582  001C22                     i2l5992:
 20583                           
 20584                           ;doprnt.c: 1469: }
 20585                           ;doprnt.c: 1472: prec = c;
 20586  001C22  C027  F01D         	movff	i2printf@c,i2printf@prec
 20587                           
 20588                           ;doprnt.c: 1474: while(prec--) {
 20589  001C26  D027               	goto	i2l5998
 20590  001C28                     i2l5994:
 20591                           
 20592                           ;doprnt.c: 1478: {
 20593                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 20594  001C28  501D               	movf	i2printf@prec,w,c
 20595  001C2A  0D02               	mullw	2
 20596  001C2C  0E12               	movlw	low _dpowers
 20597  001C2E  24F3               	addwf	prodl,w,c
 20598  001C30  6EF6               	movwf	tblptrl,c
 20599  001C32  0EFB               	movlw	high _dpowers
 20600  001C34  20F4               	addwfc	prodh,w,c
 20601  001C36  6EF7               	movwf	tblptrh,c
 20602  001C38                     	if	1	;There are 3 active tblptr bytes
 20603  001C38  6AF8               	clrf	tblptru,c
 20604  001C3A  0E00               	movlw	low (__mediumconst shr (0+16))
 20605  001C3C  22F8               	addwfc	tblptru,f,c
 20606  001C3E                     	endif
 20607  001C3E  0009               	tblrd		*+
 20608  001C40  CFF5 F008          	movff	tablat,i2___lwdiv@divisor
 20609  001C44  000A               	tblrd		*-
 20610  001C46  CFF5 F009          	movff	tablat,i2___lwdiv@divisor+1
 20611  001C4A  C024  F006         	movff	i2printf@val,i2___lwdiv@dividend
 20612  001C4E  C025  F007         	movff	i2printf@val+1,i2___lwdiv@dividend+1
 20613  001C52  EC90  F021         	call	i2___lwdiv	;wreg free
 20614  001C56  C006  F001         	movff	?i2___lwdiv,i2___lwmod@dividend
 20615  001C5A  C007  F002         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
 20616  001C5E  0E00               	movlw	0
 20617  001C60  6E04               	movwf	i2___lwmod@divisor+1,c
 20618  001C62  0E0A               	movlw	10
 20619  001C64  6E03               	movwf	i2___lwmod@divisor,c
 20620  001C66  EC4F  F022         	call	i2___lwmod	;wreg free
 20621  001C6A  5001               	movf	?i2___lwmod,w,c
 20622  001C6C  0F30               	addlw	48
 20623  001C6E  6E27               	movwf	i2printf@c,c
 20624                           
 20625                           ;doprnt.c: 1523: }
 20626                           ;doprnt.c: 1524: (putch(c) );
 20627  001C70  5027               	movf	i2printf@c,w,c
 20628  001C72  EC44  F025         	call	i2_putch
 20629  001C76                     i2l5998:
 20630  001C76  061D               	decf	i2printf@prec,f,c
 20631  001C78  281D               	incf	i2printf@prec,w,c
 20632  001C7A  A4D8               	btfss	status,2,c
 20633  001C7C  D7D5               	goto	i2l5994
 20634  001C7E                     i2l6000:
 20635  001C7E  C00D  FFF6         	movff	i2printf@f,tblptrl
 20636  001C82  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 20637  001C86  4A0D               	infsnz	i2printf@f,f,c
 20638  001C88  2A0E               	incf	i2printf@f+1,f,c
 20639  001C8A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 20640  001C8A  6AF8               	clrf	tblptru,c
 20641  001C8C                     	endif
 20642  001C8C                     	if	0	;tblptru may be non-zero
 20643  001C8C                     	endif
 20644  001C8C  0008               	tblrd		*
 20645  001C8E  CFF5 F027          	movff	tablat,i2printf@c
 20646  001C92  5027               	movf	i2printf@c,w,c
 20647  001C94  B4D8               	btfsc	status,2,c
 20648  001C96  0012               	return	
 20649  001C98  D64E               	goto	i2l5870
 20650  001C9A                     __end_ofi2_printf:
 20651                           	opt stack 0
 20652                           pclatu	equ	0xFFB
 20653                           pclath	equ	0xFFA
 20654                           tblptru	equ	0xFF8
 20655                           tblptrh	equ	0xFF7
 20656                           tblptrl	equ	0xFF6
 20657                           tablat	equ	0xFF5
 20658                           prodh	equ	0xFF4
 20659                           prodl	equ	0xFF3
 20660                           intcon	equ	0xFF2
 20661                           intcon2	equ	0xFF1
 20662                           intcon3	equ	0xFF0
 20663                           indf0	equ	0xFEF
 20664                           postinc0	equ	0xFEE
 20665                           fsr0h	equ	0xFEA
 20666                           fsr0l	equ	0xFE9
 20667                           wreg	equ	0xFE8
 20668                           postdec1	equ	0xFE5
 20669                           fsr1h	equ	0xFE2
 20670                           fsr1l	equ	0xFE1
 20671                           indf2	equ	0xFDF
 20672                           postinc2	equ	0xFDE
 20673                           postdec2	equ	0xFDD
 20674                           fsr2h	equ	0xFDA
 20675                           fsr2l	equ	0xFD9
 20676                           status	equ	0xFD8
 20677                           
 20678 ;; *************** function i2_putch *****************
 20679 ;; Defined at:
 20680 ;;		line 20 in file "lcd.c"
 20681 ;; Parameters:    Size  Location     Type
 20682 ;;  data            1    wreg     unsigned char 
 20683 ;; Auto vars:     Size  Location     Type
 20684 ;;  data            1    2[COMRAM] unsigned char 
 20685 ;; Return value:  Size  Location     Type
 20686 ;;                  1    wreg      void 
 20687 ;; Registers used:
 20688 ;;		wreg, status,2, status,0, cstack
 20689 ;; Tracked objects:
 20690 ;;		On entry : 0/0
 20691 ;;		On exit  : 0/0
 20692 ;;		Unchanged: 0/0
 20693 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20694 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20695 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20696 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20697 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20698 ;;Total ram usage:        1 bytes
 20699 ;; Hardware stack levels used:    1
 20700 ;; Hardware stack levels required when called:    1
 20701 ;; This function calls:
 20702 ;;		i2_lcdNibble
 20703 ;; This function is called by:
 20704 ;;		i2_printf
 20705 ;; This function uses a non-reentrant model
 20706 ;;
 20707                           
 20708                           	psect	text80
 20709  004A88                     __ptext80:
 20710                           	opt stack 0
 20711  004A88                     i2_putch:
 20712                           	opt stack 19
 20713                           
 20714                           ;incstack = 0
 20715                           ;i2putch@data stored from wreg
 20716  004A88  6E03               	movwf	i2putch@data,c
 20717                           
 20718                           ;lcd.c: 21: LATDbits.LATD2 = 1;
 20719  004A8A  848C               	bsf	3980,2,c	;volatile
 20720                           
 20721                           ;lcd.c: 22: lcdNibble(data);
 20722  004A8C  5003               	movf	i2putch@data,w,c
 20723  004A8E  EC65  F021         	call	i2_lcdNibble
 20724  004A92  0012               	return		;funcret
 20725  004A94                     __end_ofi2_putch:
 20726                           	opt stack 0
 20727                           pclatu	equ	0xFFB
 20728                           pclath	equ	0xFFA
 20729                           tblptru	equ	0xFF8
 20730                           tblptrh	equ	0xFF7
 20731                           tblptrl	equ	0xFF6
 20732                           tablat	equ	0xFF5
 20733                           prodh	equ	0xFF4
 20734                           prodl	equ	0xFF3
 20735                           intcon	equ	0xFF2
 20736                           intcon2	equ	0xFF1
 20737                           intcon3	equ	0xFF0
 20738                           indf0	equ	0xFEF
 20739                           postinc0	equ	0xFEE
 20740                           fsr0h	equ	0xFEA
 20741                           fsr0l	equ	0xFE9
 20742                           wreg	equ	0xFE8
 20743                           postdec1	equ	0xFE5
 20744                           fsr1h	equ	0xFE2
 20745                           fsr1l	equ	0xFE1
 20746                           indf2	equ	0xFDF
 20747                           postinc2	equ	0xFDE
 20748                           postdec2	equ	0xFDD
 20749                           fsr2h	equ	0xFDA
 20750                           fsr2l	equ	0xFD9
 20751                           status	equ	0xFD8
 20752                           
 20753 ;; *************** function i2_isdigit *****************
 20754 ;; Defined at:
 20755 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 20756 ;; Parameters:    Size  Location     Type
 20757 ;;  c               1    wreg     unsigned char 
 20758 ;; Auto vars:     Size  Location     Type
 20759 ;;  c               1    2[COMRAM] unsigned char 
 20760 ;; Return value:  Size  Location     Type
 20761 ;;		None               void
 20762 ;; Registers used:
 20763 ;;		wreg, status,2, status,0
 20764 ;; Tracked objects:
 20765 ;;		On entry : 0/0
 20766 ;;		On exit  : 0/0
 20767 ;;		Unchanged: 0/0
 20768 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20769 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20770 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20771 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20772 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20773 ;;Total ram usage:        3 bytes
 20774 ;; Hardware stack levels used:    1
 20775 ;; This function calls:
 20776 ;;		Nothing
 20777 ;; This function is called by:
 20778 ;;		i2_printf
 20779 ;; This function uses a non-reentrant model
 20780 ;;
 20781                           
 20782                           	psect	text81
 20783  0049E0                     __ptext81:
 20784                           	opt stack 0
 20785  0049E0                     i2_isdigit:
 20786                           	opt stack 20
 20787                           
 20788                           ;incstack = 0
 20789                           ;i2isdigit@c stored from wreg
 20790  0049E0  6E03               	movwf	i2isdigit@c,c
 20791  0049E2  0E00               	movlw	0
 20792  0049E4  6E02               	movwf	i2_isdigit$1960,c
 20793  0049E6  0E3A               	movlw	58
 20794  0049E8  6003               	cpfslt	i2isdigit@c,c
 20795  0049EA  D005               	goto	i2l5574
 20796  0049EC  0E2F               	movlw	47
 20797  0049EE  6403               	cpfsgt	i2isdigit@c,c
 20798  0049F0  D002               	goto	i2l5574
 20799  0049F2  0E01               	movlw	1
 20800  0049F4  6E02               	movwf	i2_isdigit$1960,c
 20801  0049F6                     i2l5574:
 20802  0049F6  C002  F001         	movff	i2_isdigit$1960,??i2_isdigit
 20803  0049FA  3001               	rrcf	??i2_isdigit,w,c
 20804  0049FC  0012               	return	
 20805  0049FE                     __end_ofi2_isdigit:
 20806                           	opt stack 0
 20807                           pclatu	equ	0xFFB
 20808                           pclath	equ	0xFFA
 20809                           tblptru	equ	0xFF8
 20810                           tblptrh	equ	0xFF7
 20811                           tblptrl	equ	0xFF6
 20812                           tablat	equ	0xFF5
 20813                           prodh	equ	0xFF4
 20814                           prodl	equ	0xFF3
 20815                           intcon	equ	0xFF2
 20816                           intcon2	equ	0xFF1
 20817                           intcon3	equ	0xFF0
 20818                           indf0	equ	0xFEF
 20819                           postinc0	equ	0xFEE
 20820                           fsr0h	equ	0xFEA
 20821                           fsr0l	equ	0xFE9
 20822                           wreg	equ	0xFE8
 20823                           postdec1	equ	0xFE5
 20824                           fsr1h	equ	0xFE2
 20825                           fsr1l	equ	0xFE1
 20826                           indf2	equ	0xFDF
 20827                           postinc2	equ	0xFDE
 20828                           postdec2	equ	0xFDD
 20829                           fsr2h	equ	0xFDA
 20830                           fsr2l	equ	0xFD9
 20831                           status	equ	0xFD8
 20832                           
 20833 ;; *************** function i2___wmul *****************
 20834 ;; Defined at:
 20835 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 20836 ;; Parameters:    Size  Location     Type
 20837 ;;  multiplier      2    0[COMRAM] unsigned int 
 20838 ;;  multiplicand    2    2[COMRAM] unsigned int 
 20839 ;; Auto vars:     Size  Location     Type
 20840 ;;  __wmul          2    4[COMRAM] unsigned int 
 20841 ;; Return value:  Size  Location     Type
 20842 ;;                  2    0[COMRAM] unsigned int 
 20843 ;; Registers used:
 20844 ;;		wreg, status,2, status,0, prodl, prodh
 20845 ;; Tracked objects:
 20846 ;;		On entry : 0/0
 20847 ;;		On exit  : 0/0
 20848 ;;		Unchanged: 0/0
 20849 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20850 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20851 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20852 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20853 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20854 ;;Total ram usage:        6 bytes
 20855 ;; Hardware stack levels used:    1
 20856 ;; This function calls:
 20857 ;;		Nothing
 20858 ;; This function is called by:
 20859 ;;		_printSortTimer
 20860 ;;		_retrieveLog
 20861 ;;		i2_printf
 20862 ;; This function uses a non-reentrant model
 20863 ;;
 20864                           
 20865                           	psect	text82
 20866  00492C                     __ptext82:
 20867                           	opt stack 0
 20868  00492C                     i2___wmul:
 20869                           	opt stack 20
 20870                           
 20871                           ;incstack = 0
 20872  00492C  5001               	movf	i2___wmul@multiplier,w,c
 20873  00492E  0203               	mulwf	i2___wmul@multiplicand,c
 20874  004930  CFF3 F005          	movff	prodl,i2___wmul@product
 20875  004934  CFF4 F006          	movff	prodh,i2___wmul@product+1
 20876  004938  5001               	movf	i2___wmul@multiplier,w,c
 20877  00493A  0204               	mulwf	i2___wmul@multiplicand+1,c
 20878  00493C  50F3               	movf	prodl,w,c
 20879  00493E  2606               	addwf	i2___wmul@product+1,f,c
 20880  004940  5002               	movf	i2___wmul@multiplier+1,w,c
 20881  004942  0203               	mulwf	i2___wmul@multiplicand,c
 20882  004944  50F3               	movf	prodl,w,c
 20883  004946  2606               	addwf	i2___wmul@product+1,f,c
 20884  004948  C005  F001         	movff	i2___wmul@product,?i2___wmul
 20885  00494C  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
 20886  004950  0012               	return	
 20887  004952                     __end_ofi2___wmul:
 20888                           	opt stack 0
 20889                           pclatu	equ	0xFFB
 20890                           pclath	equ	0xFFA
 20891                           tblptru	equ	0xFF8
 20892                           tblptrh	equ	0xFF7
 20893                           tblptrl	equ	0xFF6
 20894                           tablat	equ	0xFF5
 20895                           prodh	equ	0xFF4
 20896                           prodl	equ	0xFF3
 20897                           intcon	equ	0xFF2
 20898                           intcon2	equ	0xFF1
 20899                           intcon3	equ	0xFF0
 20900                           indf0	equ	0xFEF
 20901                           postinc0	equ	0xFEE
 20902                           fsr0h	equ	0xFEA
 20903                           fsr0l	equ	0xFE9
 20904                           wreg	equ	0xFE8
 20905                           postdec1	equ	0xFE5
 20906                           fsr1h	equ	0xFE2
 20907                           fsr1l	equ	0xFE1
 20908                           indf2	equ	0xFDF
 20909                           postinc2	equ	0xFDE
 20910                           postdec2	equ	0xFDD
 20911                           fsr2h	equ	0xFDA
 20912                           fsr2l	equ	0xFD9
 20913                           status	equ	0xFD8
 20914                           
 20915 ;; *************** function i2___lwmod *****************
 20916 ;; Defined at:
 20917 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 20918 ;; Parameters:    Size  Location     Type
 20919 ;;  dividend        2    0[COMRAM] unsigned int 
 20920 ;;  divisor         2    2[COMRAM] unsigned int 
 20921 ;; Auto vars:     Size  Location     Type
 20922 ;;  __lwmod         1    4[COMRAM] unsigned char 
 20923 ;; Return value:  Size  Location     Type
 20924 ;;                  2    0[COMRAM] unsigned int 
 20925 ;; Registers used:
 20926 ;;		wreg, status,2, status,0
 20927 ;; Tracked objects:
 20928 ;;		On entry : 0/0
 20929 ;;		On exit  : 0/0
 20930 ;;		Unchanged: 0/0
 20931 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20932 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20933 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20934 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20935 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20936 ;;Total ram usage:        5 bytes
 20937 ;; Hardware stack levels used:    1
 20938 ;; This function calls:
 20939 ;;		Nothing
 20940 ;; This function is called by:
 20941 ;;		_printSortTimer
 20942 ;;		i2_printf
 20943 ;; This function uses a non-reentrant model
 20944 ;;
 20945                           
 20946                           	psect	text83
 20947  00449E                     __ptext83:
 20948                           	opt stack 0
 20949  00449E                     i2___lwmod:
 20950                           	opt stack 20
 20951                           
 20952                           ;incstack = 0
 20953  00449E  5003               	movf	i2___lwmod@divisor,w,c
 20954  0044A0  1004               	iorwf	i2___lwmod@divisor+1,w,c
 20955  0044A2  B4D8               	btfsc	status,2,c
 20956  0044A4  D018               	goto	i2l1773
 20957  0044A6  0E01               	movlw	1
 20958  0044A8  6E05               	movwf	i2___lwmod@counter,c
 20959  0044AA  D004               	goto	i2l5606
 20960  0044AC                     i2l5604:
 20961  0044AC  90D8               	bcf	status,0,c
 20962  0044AE  3603               	rlcf	i2___lwmod@divisor,f,c
 20963  0044B0  3604               	rlcf	i2___lwmod@divisor+1,f,c
 20964  0044B2  2A05               	incf	i2___lwmod@counter,f,c
 20965  0044B4                     i2l5606:
 20966  0044B4  AE04               	btfss	i2___lwmod@divisor+1,7,c
 20967  0044B6  D7FA               	goto	i2l5604
 20968  0044B8                     i2l5608:
 20969  0044B8  5003               	movf	i2___lwmod@divisor,w,c
 20970  0044BA  5C01               	subwf	i2___lwmod@dividend,w,c
 20971  0044BC  5004               	movf	i2___lwmod@divisor+1,w,c
 20972  0044BE  5802               	subwfb	i2___lwmod@dividend+1,w,c
 20973  0044C0  A0D8               	btfss	status,0,c
 20974  0044C2  D004               	goto	i2l5612
 20975  0044C4  5003               	movf	i2___lwmod@divisor,w,c
 20976  0044C6  5E01               	subwf	i2___lwmod@dividend,f,c
 20977  0044C8  5004               	movf	i2___lwmod@divisor+1,w,c
 20978  0044CA  5A02               	subwfb	i2___lwmod@dividend+1,f,c
 20979  0044CC                     i2l5612:
 20980  0044CC  90D8               	bcf	status,0,c
 20981  0044CE  3204               	rrcf	i2___lwmod@divisor+1,f,c
 20982  0044D0  3203               	rrcf	i2___lwmod@divisor,f,c
 20983  0044D2  2E05               	decfsz	i2___lwmod@counter,f,c
 20984  0044D4  D7F1               	goto	i2l5608
 20985  0044D6                     i2l1773:
 20986  0044D6  C001  F001         	movff	i2___lwmod@dividend,?i2___lwmod
 20987  0044DA  C002  F002         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
 20988  0044DE  0012               	return		;funcret
 20989  0044E0                     __end_ofi2___lwmod:
 20990                           	opt stack 0
 20991                           pclatu	equ	0xFFB
 20992                           pclath	equ	0xFFA
 20993                           tblptru	equ	0xFF8
 20994                           tblptrh	equ	0xFF7
 20995                           tblptrl	equ	0xFF6
 20996                           tablat	equ	0xFF5
 20997                           prodh	equ	0xFF4
 20998                           prodl	equ	0xFF3
 20999                           intcon	equ	0xFF2
 21000                           intcon2	equ	0xFF1
 21001                           intcon3	equ	0xFF0
 21002                           indf0	equ	0xFEF
 21003                           postinc0	equ	0xFEE
 21004                           fsr0h	equ	0xFEA
 21005                           fsr0l	equ	0xFE9
 21006                           wreg	equ	0xFE8
 21007                           postdec1	equ	0xFE5
 21008                           fsr1h	equ	0xFE2
 21009                           fsr1l	equ	0xFE1
 21010                           indf2	equ	0xFDF
 21011                           postinc2	equ	0xFDE
 21012                           postdec2	equ	0xFDD
 21013                           fsr2h	equ	0xFDA
 21014                           fsr2l	equ	0xFD9
 21015                           status	equ	0xFD8
 21016                           
 21017 ;; *************** function i2___lwdiv *****************
 21018 ;; Defined at:
 21019 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 21020 ;; Parameters:    Size  Location     Type
 21021 ;;  dividend        2    5[COMRAM] unsigned int 
 21022 ;;  divisor         2    7[COMRAM] unsigned int 
 21023 ;; Auto vars:     Size  Location     Type
 21024 ;;  __lwdiv         2    9[COMRAM] unsigned int 
 21025 ;;  __lwdiv         1   11[COMRAM] unsigned char 
 21026 ;; Return value:  Size  Location     Type
 21027 ;;                  2    5[COMRAM] unsigned int 
 21028 ;; Registers used:
 21029 ;;		wreg, status,2, status,0
 21030 ;; Tracked objects:
 21031 ;;		On entry : 0/0
 21032 ;;		On exit  : 0/0
 21033 ;;		Unchanged: 0/0
 21034 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21035 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21036 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21037 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21038 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21039 ;;Total ram usage:        7 bytes
 21040 ;; Hardware stack levels used:    1
 21041 ;; This function calls:
 21042 ;;		Nothing
 21043 ;; This function is called by:
 21044 ;;		_printSortTimer
 21045 ;;		i2_printf
 21046 ;; This function uses a non-reentrant model
 21047 ;;
 21048                           
 21049                           	psect	text84
 21050  004320                     __ptext84:
 21051                           	opt stack 0
 21052  004320                     i2___lwdiv:
 21053                           	opt stack 20
 21054                           
 21055                           ;incstack = 0
 21056  004320  0E00               	movlw	0
 21057  004322  6E0B               	movwf	i2___lwdiv@quotient+1,c
 21058  004324  0E00               	movlw	0
 21059  004326  6E0A               	movwf	i2___lwdiv@quotient,c
 21060  004328  5008               	movf	i2___lwdiv@divisor,w,c
 21061  00432A  1009               	iorwf	i2___lwdiv@divisor+1,w,c
 21062  00432C  B4D8               	btfsc	status,2,c
 21063  00432E  D01C               	goto	i2l1763
 21064  004330  0E01               	movlw	1
 21065  004332  6E0C               	movwf	i2___lwdiv@counter,c
 21066  004334  D004               	goto	i2l5586
 21067  004336                     i2l5584:
 21068  004336  90D8               	bcf	status,0,c
 21069  004338  3608               	rlcf	i2___lwdiv@divisor,f,c
 21070  00433A  3609               	rlcf	i2___lwdiv@divisor+1,f,c
 21071  00433C  2A0C               	incf	i2___lwdiv@counter,f,c
 21072  00433E                     i2l5586:
 21073  00433E  AE09               	btfss	i2___lwdiv@divisor+1,7,c
 21074  004340  D7FA               	goto	i2l5584
 21075  004342                     i2l5588:
 21076  004342  90D8               	bcf	status,0,c
 21077  004344  360A               	rlcf	i2___lwdiv@quotient,f,c
 21078  004346  360B               	rlcf	i2___lwdiv@quotient+1,f,c
 21079  004348  5008               	movf	i2___lwdiv@divisor,w,c
 21080  00434A  5C06               	subwf	i2___lwdiv@dividend,w,c
 21081  00434C  5009               	movf	i2___lwdiv@divisor+1,w,c
 21082  00434E  5807               	subwfb	i2___lwdiv@dividend+1,w,c
 21083  004350  A0D8               	btfss	status,0,c
 21084  004352  D005               	goto	i2l5596
 21085  004354  5008               	movf	i2___lwdiv@divisor,w,c
 21086  004356  5E06               	subwf	i2___lwdiv@dividend,f,c
 21087  004358  5009               	movf	i2___lwdiv@divisor+1,w,c
 21088  00435A  5A07               	subwfb	i2___lwdiv@dividend+1,f,c
 21089  00435C  800A               	bsf	i2___lwdiv@quotient,0,c
 21090  00435E                     i2l5596:
 21091  00435E  90D8               	bcf	status,0,c
 21092  004360  3209               	rrcf	i2___lwdiv@divisor+1,f,c
 21093  004362  3208               	rrcf	i2___lwdiv@divisor,f,c
 21094  004364  2E0C               	decfsz	i2___lwdiv@counter,f,c
 21095  004366  D7ED               	goto	i2l5588
 21096  004368                     i2l1763:
 21097  004368  C00A  F006         	movff	i2___lwdiv@quotient,?i2___lwdiv
 21098  00436C  C00B  F007         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
 21099  004370  0012               	return		;funcret
 21100  004372                     __end_ofi2___lwdiv:
 21101                           	opt stack 0
 21102                           pclatu	equ	0xFFB
 21103                           pclath	equ	0xFFA
 21104                           tblptru	equ	0xFF8
 21105                           tblptrh	equ	0xFF7
 21106                           tblptrl	equ	0xFF6
 21107                           tablat	equ	0xFF5
 21108                           prodh	equ	0xFF4
 21109                           prodl	equ	0xFF3
 21110                           intcon	equ	0xFF2
 21111                           intcon2	equ	0xFF1
 21112                           intcon3	equ	0xFF0
 21113                           indf0	equ	0xFEF
 21114                           postinc0	equ	0xFEE
 21115                           fsr0h	equ	0xFEA
 21116                           fsr0l	equ	0xFE9
 21117                           wreg	equ	0xFE8
 21118                           postdec1	equ	0xFE5
 21119                           fsr1h	equ	0xFE2
 21120                           fsr1l	equ	0xFE1
 21121                           indf2	equ	0xFDF
 21122                           postinc2	equ	0xFDE
 21123                           postdec2	equ	0xFDD
 21124                           fsr2h	equ	0xFDA
 21125                           fsr2l	equ	0xFD9
 21126                           status	equ	0xFD8
 21127                           
 21128 ;; *************** function i2_lcdInst *****************
 21129 ;; Defined at:
 21130 ;;		line 15 in file "lcd.c"
 21131 ;; Parameters:    Size  Location     Type
 21132 ;;  data            1    wreg     unsigned char 
 21133 ;; Auto vars:     Size  Location     Type
 21134 ;;  data            1    2[COMRAM] unsigned char 
 21135 ;; Return value:  Size  Location     Type
 21136 ;;                  1    wreg      void 
 21137 ;; Registers used:
 21138 ;;		wreg, status,2, status,0, cstack
 21139 ;; Tracked objects:
 21140 ;;		On entry : 0/0
 21141 ;;		On exit  : 0/0
 21142 ;;		Unchanged: 0/0
 21143 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21144 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21145 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21146 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21147 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21148 ;;Total ram usage:        1 bytes
 21149 ;; Hardware stack levels used:    1
 21150 ;; Hardware stack levels required when called:    1
 21151 ;; This function calls:
 21152 ;;		i2_lcdNibble
 21153 ;; This function is called by:
 21154 ;;		_change_state_to_menu_11
 21155 ;;		_change_state_to_menu_23
 21156 ;;		_change_state_to_logs_11
 21157 ;;		_change_state_to_logs_12
 21158 ;;		_change_state_to_logs_22
 21159 ;;		_change_state_to_logs_23
 21160 ;;		_change_state_to_logs_33
 21161 ;;		_change_state_to_logs_34
 21162 ;;		_printSortTimer
 21163 ;;		i2_change_state_to_menu_start
 21164 ;;		i2_change_state_to_menu_12
 21165 ;;		i2_change_state_to_menu_22
 21166 ;;		i2_printRTC
 21167 ;; This function uses a non-reentrant model
 21168 ;;
 21169                           
 21170                           	psect	text85
 21171  004A94                     __ptext85:
 21172                           	opt stack 0
 21173  004A94                     i2_lcdInst:
 21174                           	opt stack 19
 21175                           
 21176                           ;incstack = 0
 21177                           ;i2lcdInst@data stored from wreg
 21178  004A94  6E03               	movwf	i2lcdInst@data,c
 21179                           
 21180                           ;lcd.c: 16: LATDbits.LATD2 = 0;
 21181  004A96  948C               	bcf	3980,2,c	;volatile
 21182                           
 21183                           ;lcd.c: 17: lcdNibble(data);
 21184  004A98  5003               	movf	i2lcdInst@data,w,c
 21185  004A9A  EC65  F021         	call	i2_lcdNibble
 21186  004A9E  0012               	return		;funcret
 21187  004AA0                     __end_ofi2_lcdInst:
 21188                           	opt stack 0
 21189                           pclatu	equ	0xFFB
 21190                           pclath	equ	0xFFA
 21191                           tblptru	equ	0xFF8
 21192                           tblptrh	equ	0xFF7
 21193                           tblptrl	equ	0xFF6
 21194                           tablat	equ	0xFF5
 21195                           prodh	equ	0xFF4
 21196                           prodl	equ	0xFF3
 21197                           intcon	equ	0xFF2
 21198                           intcon2	equ	0xFF1
 21199                           intcon3	equ	0xFF0
 21200                           indf0	equ	0xFEF
 21201                           postinc0	equ	0xFEE
 21202                           fsr0h	equ	0xFEA
 21203                           fsr0l	equ	0xFE9
 21204                           wreg	equ	0xFE8
 21205                           postdec1	equ	0xFE5
 21206                           fsr1h	equ	0xFE2
 21207                           fsr1l	equ	0xFE1
 21208                           indf2	equ	0xFDF
 21209                           postinc2	equ	0xFDE
 21210                           postdec2	equ	0xFDD
 21211                           fsr2h	equ	0xFDA
 21212                           fsr2l	equ	0xFD9
 21213                           status	equ	0xFD8
 21214                           
 21215 ;; *************** function i2_lcdNibble *****************
 21216 ;; Defined at:
 21217 ;;		line 25 in file "lcd.c"
 21218 ;; Parameters:    Size  Location     Type
 21219 ;;  data            1    wreg     unsigned char 
 21220 ;; Auto vars:     Size  Location     Type
 21221 ;;  data            1    1[COMRAM] unsigned char 
 21222 ;;  lcdNibble       1    0[COMRAM] unsigned char 
 21223 ;; Return value:  Size  Location     Type
 21224 ;;                  1    wreg      void 
 21225 ;; Registers used:
 21226 ;;		wreg, status,2, status,0
 21227 ;; Tracked objects:
 21228 ;;		On entry : 0/0
 21229 ;;		On exit  : 0/0
 21230 ;;		Unchanged: 0/0
 21231 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21232 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21233 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21234 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21235 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21236 ;;Total ram usage:        2 bytes
 21237 ;; Hardware stack levels used:    1
 21238 ;; This function calls:
 21239 ;;		Nothing
 21240 ;; This function is called by:
 21241 ;;		i2_lcdInst
 21242 ;;		i2_putch
 21243 ;; This function uses a non-reentrant model
 21244 ;;
 21245                           
 21246                           	psect	text86
 21247  0042CA                     __ptext86:
 21248                           	opt stack 0
 21249  0042CA                     i2_lcdNibble:
 21250                           	opt stack 19
 21251                           
 21252                           ;incstack = 0
 21253                           ;i2lcdNibble@data stored from wreg
 21254  0042CA  6E02               	movwf	i2lcdNibble@data,c
 21255                           
 21256                           ;lcd.c: 27: char temp = data & 0xF0;
 21257  0042CC  5002               	movf	i2lcdNibble@data,w,c
 21258  0042CE  0BF0               	andlw	240
 21259  0042D0  6E01               	movwf	i2lcdNibble@temp,c
 21260                           
 21261                           ;lcd.c: 28: LATD = LATD & 0x0F;
 21262  0042D2  508C               	movf	3980,w,c	;volatile
 21263  0042D4  0B0F               	andlw	15
 21264  0042D6  6E8C               	movwf	3980,c	;volatile
 21265                           
 21266                           ;lcd.c: 29: LATD = temp | LATD;
 21267  0042D8  5001               	movf	i2lcdNibble@temp,w,c
 21268  0042DA  108C               	iorwf	3980,w,c	;volatile
 21269  0042DC  6E8C               	movwf	3980,c	;volatile
 21270                           
 21271                           ;lcd.c: 31: LATDbits.LATD3 = 1;
 21272  0042DE  868C               	bsf	3980,3,c	;volatile
 21273                           
 21274                           ;lcd.c: 32: _delay((unsigned long)((25)*(32000000/4000000.0)));
 21275  0042E0  0E42               	movlw	66
 21276  0042E2                     i2u878_47:
 21277  0042E2  2EE8               	decfsz	wreg,f,c
 21278  0042E4  D7FE               	bra	i2u878_47
 21279  0042E6  D000               	nop2	
 21280                           
 21281                           ;lcd.c: 33: LATDbits.LATD3 = 0;
 21282  0042E8  968C               	bcf	3980,3,c	;volatile
 21283                           
 21284                           ;lcd.c: 34: _delay((unsigned long)((25)*(32000000/4000000.0)));
 21285  0042EA  0E42               	movlw	66
 21286  0042EC                     i2u879_47:
 21287  0042EC  2EE8               	decfsz	wreg,f,c
 21288  0042EE  D7FE               	bra	i2u879_47
 21289  0042F0  D000               	nop2	
 21290                           
 21291                           ;lcd.c: 36: data = data << 4;
 21292  0042F2  3802               	swapf	i2lcdNibble@data,w,c
 21293  0042F4  0BF0               	andlw	240
 21294  0042F6  6E02               	movwf	i2lcdNibble@data,c
 21295                           
 21296                           ;lcd.c: 38: temp = data & 0xF0;
 21297  0042F8  5002               	movf	i2lcdNibble@data,w,c
 21298  0042FA  0BF0               	andlw	240
 21299  0042FC  6E01               	movwf	i2lcdNibble@temp,c
 21300                           
 21301                           ;lcd.c: 39: LATD = LATD & 0x0F;
 21302  0042FE  508C               	movf	3980,w,c	;volatile
 21303  004300  0B0F               	andlw	15
 21304  004302  6E8C               	movwf	3980,c	;volatile
 21305                           
 21306                           ;lcd.c: 40: LATD = temp | LATD;
 21307  004304  5001               	movf	i2lcdNibble@temp,w,c
 21308  004306  108C               	iorwf	3980,w,c	;volatile
 21309  004308  6E8C               	movwf	3980,c	;volatile
 21310                           
 21311                           ;lcd.c: 42: LATDbits.LATD3 = 1;
 21312  00430A  868C               	bsf	3980,3,c	;volatile
 21313                           
 21314                           ;lcd.c: 43: _delay((unsigned long)((25)*(32000000/4000000.0)));
 21315  00430C  0E42               	movlw	66
 21316  00430E                     i2u880_47:
 21317  00430E  2EE8               	decfsz	wreg,f,c
 21318  004310  D7FE               	bra	i2u880_47
 21319  004312  D000               	nop2	
 21320                           
 21321                           ;lcd.c: 44: LATDbits.LATD3 = 0;
 21322  004314  968C               	bcf	3980,3,c	;volatile
 21323                           
 21324                           ;lcd.c: 45: _delay((unsigned long)((25)*(32000000/4000000.0)));
 21325  004316  0E42               	movlw	66
 21326  004318                     i2u881_47:
 21327  004318  2EE8               	decfsz	wreg,f,c
 21328  00431A  D7FE               	bra	i2u881_47
 21329  00431C  D000               	nop2	
 21330  00431E  0012               	return		;funcret
 21331  004320                     __end_ofi2_lcdNibble:
 21332                           	opt stack 0
 21333                           pclatu	equ	0xFFB
 21334                           pclath	equ	0xFFA
 21335                           tblptru	equ	0xFF8
 21336                           tblptrh	equ	0xFF7
 21337                           tblptrl	equ	0xFF6
 21338                           tablat	equ	0xFF5
 21339                           prodh	equ	0xFF4
 21340                           prodl	equ	0xFF3
 21341                           intcon	equ	0xFF2
 21342                           intcon2	equ	0xFF1
 21343                           intcon3	equ	0xFF0
 21344                           indf0	equ	0xFEF
 21345                           postinc0	equ	0xFEE
 21346                           fsr0h	equ	0xFEA
 21347                           fsr0l	equ	0xFE9
 21348                           wreg	equ	0xFE8
 21349                           postdec1	equ	0xFE5
 21350                           fsr1h	equ	0xFE2
 21351                           fsr1l	equ	0xFE1
 21352                           indf2	equ	0xFDF
 21353                           postinc2	equ	0xFDE
 21354                           postdec2	equ	0xFDD
 21355                           fsr2h	equ	0xFDA
 21356                           fsr2l	equ	0xFD9
 21357                           status	equ	0xFD8
 21358                           
 21359 ;; *************** function i2_getRTC *****************
 21360 ;; Defined at:
 21361 ;;		line 44 in file "RTC.c"
 21362 ;; Parameters:    Size  Location     Type
 21363 ;;		None
 21364 ;; Auto vars:     Size  Location     Type
 21365 ;;  getRTC          2    3[COMRAM] int 
 21366 ;; Return value:  Size  Location     Type
 21367 ;;                  1    wreg      void 
 21368 ;; Registers used:
 21369 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 21370 ;; Tracked objects:
 21371 ;;		On entry : 0/0
 21372 ;;		On exit  : 0/0
 21373 ;;		Unchanged: 0/0
 21374 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21375 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21376 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21377 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21378 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21379 ;;Total ram usage:        2 bytes
 21380 ;; Hardware stack levels used:    1
 21381 ;; Hardware stack levels required when called:    2
 21382 ;; This function calls:
 21383 ;;		i2_I2C_Master_Read
 21384 ;;		i2_I2C_Master_Start
 21385 ;;		i2_I2C_Master_Stop
 21386 ;;		i2_I2C_Master_Write
 21387 ;; This function is called by:
 21388 ;;		_printSortTimer
 21389 ;;		i2_printRTC
 21390 ;; This function uses a non-reentrant model
 21391 ;;
 21392                           
 21393                           	psect	text87
 21394  003FB0                     __ptext87:
 21395                           	opt stack 0
 21396  003FB0                     i2_getRTC:
 21397                           	opt stack 18
 21398                           
 21399                           ;RTC.c: 48: I2C_Master_Start();
 21400                           
 21401                           ;incstack = 0
 21402  003FB0  EC6A  F025         	call	i2_I2C_Master_Start	;wreg free
 21403                           
 21404                           ;RTC.c: 49: I2C_Master_Write(0b11010000);
 21405  003FB4  0E00               	movlw	0
 21406  003FB6  6E03               	movwf	i2I2C_Master_Write@d+1,c
 21407  003FB8  0ED0               	movlw	208
 21408  003FBA  6E02               	movwf	i2I2C_Master_Write@d,c
 21409  003FBC  EC55  F025         	call	i2_I2C_Master_Write	;wreg free
 21410                           
 21411                           ;RTC.c: 50: I2C_Master_Write(0x00);
 21412  003FC0  0E00               	movlw	0
 21413  003FC2  6E03               	movwf	i2I2C_Master_Write@d+1,c
 21414  003FC4  0E00               	movlw	0
 21415  003FC6  6E02               	movwf	i2I2C_Master_Write@d,c
 21416  003FC8  EC55  F025         	call	i2_I2C_Master_Write	;wreg free
 21417                           
 21418                           ;RTC.c: 51: I2C_Master_Stop();
 21419  003FCC  EC66  F025         	call	i2_I2C_Master_Stop	;wreg free
 21420                           
 21421                           ;RTC.c: 54: I2C_Master_Start();
 21422  003FD0  EC6A  F025         	call	i2_I2C_Master_Start	;wreg free
 21423                           
 21424                           ;RTC.c: 55: I2C_Master_Write(0b11010001);
 21425  003FD4  0E00               	movlw	0
 21426  003FD6  6E03               	movwf	i2I2C_Master_Write@d+1,c
 21427  003FD8  0ED1               	movlw	209
 21428  003FDA  6E02               	movwf	i2I2C_Master_Write@d,c
 21429  003FDC  EC55  F025         	call	i2_I2C_Master_Write	;wreg free
 21430                           
 21431                           ;RTC.c: 56: for(int i = 0; i < 6; i++){
 21432  003FE0  0E00               	movlw	0
 21433  003FE2  6E05               	movwf	i2getRTC@i+1,c
 21434  003FE4  0E00               	movlw	0
 21435  003FE6  6E04               	movwf	i2getRTC@i,c
 21436  003FE8                     i2l5842:
 21437  003FE8  BE05               	btfsc	i2getRTC@i+1,7,c
 21438  003FEA  D006               	goto	i2l5846
 21439  003FEC  5005               	movf	i2getRTC@i+1,w,c
 21440  003FEE  E111               	bnz	i2l5852
 21441  003FF0  0E06               	movlw	6
 21442  003FF2  5C04               	subwf	i2getRTC@i,w,c
 21443  003FF4  B0D8               	btfsc	status,0,c
 21444  003FF6  D00D               	goto	i2l5852
 21445  003FF8                     i2l5846:
 21446                           
 21447                           ;RTC.c: 57: time[i] = I2C_Master_Read(1);
 21448  003FF8  0E24               	movlw	low _time
 21449  003FFA  2404               	addwf	i2getRTC@i,w,c
 21450  003FFC  6ED9               	movwf	fsr2l,c
 21451  003FFE  0E01               	movlw	high _time
 21452  004000  2005               	addwfc	i2getRTC@i+1,w,c
 21453  004002  6EDA               	movwf	fsr2h,c
 21454  004004  0E01               	movlw	1
 21455  004006  ECA9  F024         	call	i2_I2C_Master_Read
 21456  00400A  6EDF               	movwf	indf2,c
 21457  00400C  4A04               	infsnz	i2getRTC@i,f,c
 21458  00400E  2A05               	incf	i2getRTC@i+1,f,c
 21459  004010  D7EB               	goto	i2l5842
 21460  004012                     i2l5852:
 21461                           
 21462                           ;RTC.c: 58: }
 21463                           ;RTC.c: 59: time[6] = I2C_Master_Read(0);
 21464  004012  0E00               	movlw	0
 21465  004014  ECA9  F024         	call	i2_I2C_Master_Read
 21466  004018  0101               	movlb	1	; () banked
 21467  00401A  6F2A               	movwf	(_time+6)& (0+255),b
 21468                           
 21469                           ;RTC.c: 60: I2C_Master_Stop();
 21470  00401C  EC66  F025         	call	i2_I2C_Master_Stop	;wreg free
 21471  004020  0012               	return		;funcret
 21472  004022                     __end_ofi2_getRTC:
 21473                           	opt stack 0
 21474                           pclatu	equ	0xFFB
 21475                           pclath	equ	0xFFA
 21476                           tblptru	equ	0xFF8
 21477                           tblptrh	equ	0xFF7
 21478                           tblptrl	equ	0xFF6
 21479                           tablat	equ	0xFF5
 21480                           prodh	equ	0xFF4
 21481                           prodl	equ	0xFF3
 21482                           intcon	equ	0xFF2
 21483                           intcon2	equ	0xFF1
 21484                           intcon3	equ	0xFF0
 21485                           indf0	equ	0xFEF
 21486                           postinc0	equ	0xFEE
 21487                           fsr0h	equ	0xFEA
 21488                           fsr0l	equ	0xFE9
 21489                           wreg	equ	0xFE8
 21490                           postdec1	equ	0xFE5
 21491                           fsr1h	equ	0xFE2
 21492                           fsr1l	equ	0xFE1
 21493                           indf2	equ	0xFDF
 21494                           postinc2	equ	0xFDE
 21495                           postdec2	equ	0xFDD
 21496                           fsr2h	equ	0xFDA
 21497                           fsr2l	equ	0xFD9
 21498                           status	equ	0xFD8
 21499                           
 21500 ;; *************** function i2_I2C_Master_Write *****************
 21501 ;; Defined at:
 21502 ;;		line 49 in file "I2C.c"
 21503 ;; Parameters:    Size  Location     Type
 21504 ;;  d               2    1[COMRAM] unsigned int 
 21505 ;; Auto vars:     Size  Location     Type
 21506 ;;		None
 21507 ;; Return value:  Size  Location     Type
 21508 ;;                  1    wreg      void 
 21509 ;; Registers used:
 21510 ;;		wreg, status,2, status,0, cstack
 21511 ;; Tracked objects:
 21512 ;;		On entry : 0/0
 21513 ;;		On exit  : 0/0
 21514 ;;		Unchanged: 0/0
 21515 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21516 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21517 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21518 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21519 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21520 ;;Total ram usage:        2 bytes
 21521 ;; Hardware stack levels used:    1
 21522 ;; Hardware stack levels required when called:    1
 21523 ;; This function calls:
 21524 ;;		i2_I2C_Master_Wait
 21525 ;; This function is called by:
 21526 ;;		i2_getRTC
 21527 ;; This function uses a non-reentrant model
 21528 ;;
 21529                           
 21530                           	psect	text88
 21531  004AAA                     __ptext88:
 21532                           	opt stack 0
 21533  004AAA                     i2_I2C_Master_Write:
 21534                           	opt stack 18
 21535                           
 21536                           ;I2C.c: 51: I2C_Master_Wait();
 21537                           
 21538                           ;incstack = 0
 21539  004AAA  EC2B  F025         	call	i2_I2C_Master_Wait	;wreg free
 21540                           
 21541                           ;I2C.c: 52: SSPBUF = d;
 21542  004AAE  C002  FFC9         	movff	i2I2C_Master_Write@d,4041	;volatile
 21543  004AB2  0012               	return		;funcret
 21544  004AB4                     __end_ofi2_I2C_Master_Write:
 21545                           	opt stack 0
 21546                           pclatu	equ	0xFFB
 21547                           pclath	equ	0xFFA
 21548                           tblptru	equ	0xFF8
 21549                           tblptrh	equ	0xFF7
 21550                           tblptrl	equ	0xFF6
 21551                           tablat	equ	0xFF5
 21552                           prodh	equ	0xFF4
 21553                           prodl	equ	0xFF3
 21554                           intcon	equ	0xFF2
 21555                           intcon2	equ	0xFF1
 21556                           intcon3	equ	0xFF0
 21557                           indf0	equ	0xFEF
 21558                           postinc0	equ	0xFEE
 21559                           fsr0h	equ	0xFEA
 21560                           fsr0l	equ	0xFE9
 21561                           wreg	equ	0xFE8
 21562                           postdec1	equ	0xFE5
 21563                           fsr1h	equ	0xFE2
 21564                           fsr1l	equ	0xFE1
 21565                           indf2	equ	0xFDF
 21566                           postinc2	equ	0xFDE
 21567                           postdec2	equ	0xFDD
 21568                           fsr2h	equ	0xFDA
 21569                           fsr2l	equ	0xFD9
 21570                           status	equ	0xFD8
 21571                           
 21572 ;; *************** function i2_I2C_Master_Stop *****************
 21573 ;; Defined at:
 21574 ;;		line 43 in file "I2C.c"
 21575 ;; Parameters:    Size  Location     Type
 21576 ;;		None
 21577 ;; Auto vars:     Size  Location     Type
 21578 ;;		None
 21579 ;; Return value:  Size  Location     Type
 21580 ;;                  1    wreg      void 
 21581 ;; Registers used:
 21582 ;;		wreg, status,2, status,0, cstack
 21583 ;; Tracked objects:
 21584 ;;		On entry : 0/0
 21585 ;;		On exit  : 0/0
 21586 ;;		Unchanged: 0/0
 21587 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21588 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21589 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21590 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21591 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21592 ;;Total ram usage:        0 bytes
 21593 ;; Hardware stack levels used:    1
 21594 ;; Hardware stack levels required when called:    1
 21595 ;; This function calls:
 21596 ;;		i2_I2C_Master_Wait
 21597 ;; This function is called by:
 21598 ;;		i2_getRTC
 21599 ;; This function uses a non-reentrant model
 21600 ;;
 21601                           
 21602                           	psect	text89
 21603  004ACC                     __ptext89:
 21604                           	opt stack 0
 21605  004ACC                     i2_I2C_Master_Stop:
 21606                           	opt stack 18
 21607                           
 21608                           ;I2C.c: 45: I2C_Master_Wait();
 21609                           
 21610                           ;incstack = 0
 21611  004ACC  EC2B  F025         	call	i2_I2C_Master_Wait	;wreg free
 21612                           
 21613                           ;I2C.c: 46: PEN = 1;
 21614  004AD0  84C5               	bsf	4037,2,c	;volatile
 21615  004AD2  0012               	return		;funcret
 21616  004AD4                     __end_ofi2_I2C_Master_Stop:
 21617                           	opt stack 0
 21618                           pclatu	equ	0xFFB
 21619                           pclath	equ	0xFFA
 21620                           tblptru	equ	0xFF8
 21621                           tblptrh	equ	0xFF7
 21622                           tblptrl	equ	0xFF6
 21623                           tablat	equ	0xFF5
 21624                           prodh	equ	0xFF4
 21625                           prodl	equ	0xFF3
 21626                           intcon	equ	0xFF2
 21627                           intcon2	equ	0xFF1
 21628                           intcon3	equ	0xFF0
 21629                           indf0	equ	0xFEF
 21630                           postinc0	equ	0xFEE
 21631                           fsr0h	equ	0xFEA
 21632                           fsr0l	equ	0xFE9
 21633                           wreg	equ	0xFE8
 21634                           postdec1	equ	0xFE5
 21635                           fsr1h	equ	0xFE2
 21636                           fsr1l	equ	0xFE1
 21637                           indf2	equ	0xFDF
 21638                           postinc2	equ	0xFDE
 21639                           postdec2	equ	0xFDD
 21640                           fsr2h	equ	0xFDA
 21641                           fsr2l	equ	0xFD9
 21642                           status	equ	0xFD8
 21643                           
 21644 ;; *************** function i2_I2C_Master_Start *****************
 21645 ;; Defined at:
 21646 ;;		line 31 in file "I2C.c"
 21647 ;; Parameters:    Size  Location     Type
 21648 ;;		None
 21649 ;; Auto vars:     Size  Location     Type
 21650 ;;		None
 21651 ;; Return value:  Size  Location     Type
 21652 ;;                  1    wreg      void 
 21653 ;; Registers used:
 21654 ;;		wreg, status,2, status,0, cstack
 21655 ;; Tracked objects:
 21656 ;;		On entry : 0/0
 21657 ;;		On exit  : 0/0
 21658 ;;		Unchanged: 0/0
 21659 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21660 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21661 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21662 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21663 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21664 ;;Total ram usage:        0 bytes
 21665 ;; Hardware stack levels used:    1
 21666 ;; Hardware stack levels required when called:    1
 21667 ;; This function calls:
 21668 ;;		i2_I2C_Master_Wait
 21669 ;; This function is called by:
 21670 ;;		i2_getRTC
 21671 ;; This function uses a non-reentrant model
 21672 ;;
 21673                           
 21674                           	psect	text90
 21675  004AD4                     __ptext90:
 21676                           	opt stack 0
 21677  004AD4                     i2_I2C_Master_Start:
 21678                           	opt stack 18
 21679                           
 21680                           ;I2C.c: 33: I2C_Master_Wait();
 21681                           
 21682                           ;incstack = 0
 21683  004AD4  EC2B  F025         	call	i2_I2C_Master_Wait	;wreg free
 21684                           
 21685                           ;I2C.c: 34: SEN = 1;
 21686  004AD8  80C5               	bsf	4037,0,c	;volatile
 21687  004ADA  0012               	return		;funcret
 21688  004ADC                     __end_ofi2_I2C_Master_Start:
 21689                           	opt stack 0
 21690                           pclatu	equ	0xFFB
 21691                           pclath	equ	0xFFA
 21692                           tblptru	equ	0xFF8
 21693                           tblptrh	equ	0xFF7
 21694                           tblptrl	equ	0xFF6
 21695                           tablat	equ	0xFF5
 21696                           prodh	equ	0xFF4
 21697                           prodl	equ	0xFF3
 21698                           intcon	equ	0xFF2
 21699                           intcon2	equ	0xFF1
 21700                           intcon3	equ	0xFF0
 21701                           indf0	equ	0xFEF
 21702                           postinc0	equ	0xFEE
 21703                           fsr0h	equ	0xFEA
 21704                           fsr0l	equ	0xFE9
 21705                           wreg	equ	0xFE8
 21706                           postdec1	equ	0xFE5
 21707                           fsr1h	equ	0xFE2
 21708                           fsr1l	equ	0xFE1
 21709                           indf2	equ	0xFDF
 21710                           postinc2	equ	0xFDE
 21711                           postdec2	equ	0xFDD
 21712                           fsr2h	equ	0xFDA
 21713                           fsr2l	equ	0xFD9
 21714                           status	equ	0xFD8
 21715                           
 21716 ;; *************** function i2_I2C_Master_Read *****************
 21717 ;; Defined at:
 21718 ;;		line 55 in file "I2C.c"
 21719 ;; Parameters:    Size  Location     Type
 21720 ;;  a               1    wreg     unsigned char 
 21721 ;; Auto vars:     Size  Location     Type
 21722 ;;  a               1    1[COMRAM] unsigned char 
 21723 ;;  I2C_Master_R    1    2[COMRAM] unsigned char 
 21724 ;; Return value:  Size  Location     Type
 21725 ;;                  1    wreg      unsigned char 
 21726 ;; Registers used:
 21727 ;;		wreg, status,2, status,0, cstack
 21728 ;; Tracked objects:
 21729 ;;		On entry : 0/0
 21730 ;;		On exit  : 0/0
 21731 ;;		Unchanged: 0/0
 21732 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21733 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21734 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21735 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21736 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21737 ;;Total ram usage:        2 bytes
 21738 ;; Hardware stack levels used:    1
 21739 ;; Hardware stack levels required when called:    1
 21740 ;; This function calls:
 21741 ;;		i2_I2C_Master_Wait
 21742 ;; This function is called by:
 21743 ;;		i2_getRTC
 21744 ;; This function uses a non-reentrant model
 21745 ;;
 21746                           
 21747                           	psect	text91
 21748  004952                     __ptext91:
 21749                           	opt stack 0
 21750  004952                     i2_I2C_Master_Read:
 21751                           	opt stack 18
 21752                           
 21753                           ;incstack = 0
 21754                           ;i2I2C_Master_Read@a stored from wreg
 21755  004952  6E02               	movwf	i2I2C_Master_Read@a,c
 21756                           
 21757                           ;I2C.c: 57: unsigned char temp;
 21758                           ;I2C.c: 58: I2C_Master_Wait();
 21759  004954  EC2B  F025         	call	i2_I2C_Master_Wait	;wreg free
 21760                           
 21761                           ;I2C.c: 59: RCEN = 1;
 21762  004958  86C5               	bsf	4037,3,c	;volatile
 21763                           
 21764                           ;I2C.c: 60: I2C_Master_Wait();
 21765  00495A  EC2B  F025         	call	i2_I2C_Master_Wait	;wreg free
 21766                           
 21767                           ;I2C.c: 61: temp = SSPBUF;
 21768  00495E  CFC9 F003          	movff	4041,i2I2C_Master_Read@temp	;volatile
 21769                           
 21770                           ;I2C.c: 62: I2C_Master_Wait();
 21771  004962  EC2B  F025         	call	i2_I2C_Master_Wait	;wreg free
 21772                           
 21773                           ;I2C.c: 63: ACKDT = (a)?0:1;
 21774  004966  5002               	movf	i2I2C_Master_Read@a,w,c
 21775  004968  A4D8               	btfss	status,2,c
 21776  00496A  D002               	goto	i2u388_40
 21777  00496C  8AC5               	bsf	4037,5,c	;volatile
 21778  00496E  D001               	goto	i2l5550
 21779  004970                     i2u388_40:
 21780  004970  9AC5               	bcf	4037,5,c	;volatile
 21781  004972                     i2l5550:
 21782                           
 21783                           ;I2C.c: 64: ACKEN = 1;
 21784  004972  88C5               	bsf	4037,4,c	;volatile
 21785                           
 21786                           ;I2C.c: 65: return temp;
 21787  004974  5003               	movf	i2I2C_Master_Read@temp,w,c
 21788  004976  0012               	return	
 21789  004978                     __end_ofi2_I2C_Master_Read:
 21790                           	opt stack 0
 21791                           pclatu	equ	0xFFB
 21792                           pclath	equ	0xFFA
 21793                           tblptru	equ	0xFF8
 21794                           tblptrh	equ	0xFF7
 21795                           tblptrl	equ	0xFF6
 21796                           tablat	equ	0xFF5
 21797                           prodh	equ	0xFF4
 21798                           prodl	equ	0xFF3
 21799                           intcon	equ	0xFF2
 21800                           intcon2	equ	0xFF1
 21801                           intcon3	equ	0xFF0
 21802                           indf0	equ	0xFEF
 21803                           postinc0	equ	0xFEE
 21804                           fsr0h	equ	0xFEA
 21805                           fsr0l	equ	0xFE9
 21806                           wreg	equ	0xFE8
 21807                           postdec1	equ	0xFE5
 21808                           fsr1h	equ	0xFE2
 21809                           fsr1l	equ	0xFE1
 21810                           indf2	equ	0xFDF
 21811                           postinc2	equ	0xFDE
 21812                           postdec2	equ	0xFDD
 21813                           fsr2h	equ	0xFDA
 21814                           fsr2l	equ	0xFD9
 21815                           status	equ	0xFD8
 21816                           
 21817 ;; *************** function i2_I2C_Master_Wait *****************
 21818 ;; Defined at:
 21819 ;;		line 26 in file "I2C.c"
 21820 ;; Parameters:    Size  Location     Type
 21821 ;;		None
 21822 ;; Auto vars:     Size  Location     Type
 21823 ;;		None
 21824 ;; Return value:  Size  Location     Type
 21825 ;;                  1    wreg      void 
 21826 ;; Registers used:
 21827 ;;		wreg, status,2, status,0
 21828 ;; Tracked objects:
 21829 ;;		On entry : 0/0
 21830 ;;		On exit  : 0/0
 21831 ;;		Unchanged: 0/0
 21832 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21833 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21834 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21835 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21836 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21837 ;;Total ram usage:        1 bytes
 21838 ;; Hardware stack levels used:    1
 21839 ;; This function calls:
 21840 ;;		Nothing
 21841 ;; This function is called by:
 21842 ;;		i2_I2C_Master_Start
 21843 ;;		i2_I2C_Master_Stop
 21844 ;;		i2_I2C_Master_Write
 21845 ;;		i2_I2C_Master_Read
 21846 ;; This function uses a non-reentrant model
 21847 ;;
 21848                           
 21849                           	psect	text92
 21850  004A56                     __ptext92:
 21851                           	opt stack 0
 21852  004A56                     i2_I2C_Master_Wait:
 21853                           	opt stack 18
 21854  004A56                     i2l66:
 21855  004A56  B4C7               	btfsc	4039,2,c	;volatile
 21856  004A58  D7FE               	goto	i2l66
 21857  004A5A  CFC5 F001          	movff	4037,??i2_I2C_Master_Wait	;volatile
 21858  004A5E  0E1F               	movlw	31
 21859  004A60  1601               	andwf	??i2_I2C_Master_Wait,f,c
 21860  004A62  B4D8               	btfsc	status,2,c
 21861  004A64  0012               	return	
 21862  004A66  D7F7               	goto	i2l66
 21863  004A68                     __end_ofi2_I2C_Master_Wait:
 21864                           	opt stack 0
 21865                           pclatu	equ	0xFFB
 21866                           pclath	equ	0xFFA
 21867                           tblptru	equ	0xFF8
 21868                           tblptrh	equ	0xFF7
 21869                           tblptrl	equ	0xFF6
 21870                           tablat	equ	0xFF5
 21871                           prodh	equ	0xFF4
 21872                           prodl	equ	0xFF3
 21873                           intcon	equ	0xFF2
 21874                           intcon2	equ	0xFF1
 21875                           intcon3	equ	0xFF0
 21876                           indf0	equ	0xFEF
 21877                           postinc0	equ	0xFEE
 21878                           fsr0h	equ	0xFEA
 21879                           fsr0l	equ	0xFE9
 21880                           wreg	equ	0xFE8
 21881                           postdec1	equ	0xFE5
 21882                           fsr1h	equ	0xFE2
 21883                           fsr1l	equ	0xFE1
 21884                           indf2	equ	0xFDF
 21885                           postinc2	equ	0xFDE
 21886                           postdec2	equ	0xFDD
 21887                           fsr2h	equ	0xFDA
 21888                           fsr2l	equ	0xFD9
 21889                           status	equ	0xFD8
 21890                           pclatu	equ	0xFFB
 21891                           pclath	equ	0xFFA
 21892                           tblptru	equ	0xFF8
 21893                           tblptrh	equ	0xFF7
 21894                           tblptrl	equ	0xFF6
 21895                           tablat	equ	0xFF5
 21896                           prodh	equ	0xFF4
 21897                           prodl	equ	0xFF3
 21898                           intcon	equ	0xFF2
 21899                           intcon2	equ	0xFF1
 21900                           intcon3	equ	0xFF0
 21901                           indf0	equ	0xFEF
 21902                           postinc0	equ	0xFEE
 21903                           fsr0h	equ	0xFEA
 21904                           fsr0l	equ	0xFE9
 21905                           wreg	equ	0xFE8
 21906                           postdec1	equ	0xFE5
 21907                           fsr1h	equ	0xFE2
 21908                           fsr1l	equ	0xFE1
 21909                           indf2	equ	0xFDF
 21910                           postinc2	equ	0xFDE
 21911                           postdec2	equ	0xFDD
 21912                           fsr2h	equ	0xFDA
 21913                           fsr2l	equ	0xFD9
 21914                           status	equ	0xFD8
 21915                           
 21916                           	psect	rparam
 21917  0000                     pclatu	equ	0xFFB
 21918                           pclath	equ	0xFFA
 21919                           tblptru	equ	0xFF8
 21920                           tblptrh	equ	0xFF7
 21921                           tblptrl	equ	0xFF6
 21922                           tablat	equ	0xFF5
 21923                           prodh	equ	0xFF4
 21924                           prodl	equ	0xFF3
 21925                           intcon	equ	0xFF2
 21926                           intcon2	equ	0xFF1
 21927                           intcon3	equ	0xFF0
 21928                           indf0	equ	0xFEF
 21929                           postinc0	equ	0xFEE
 21930                           fsr0h	equ	0xFEA
 21931                           fsr0l	equ	0xFE9
 21932                           wreg	equ	0xFE8
 21933                           postdec1	equ	0xFE5
 21934                           fsr1h	equ	0xFE2
 21935                           fsr1l	equ	0xFE1
 21936                           indf2	equ	0xFDF
 21937                           postinc2	equ	0xFDE
 21938                           postdec2	equ	0xFDD
 21939                           fsr2h	equ	0xFDA
 21940                           fsr2l	equ	0xFD9
 21941                           status	equ	0xFD8
 21942                           
 21943                           	psect	temp
 21944  00007E                     btemp:
 21945                           	opt stack 0
 21946  00007E                     	ds	1
 21947  0000                     int$flags	set	btemp
 21948                           pclatu	equ	0xFFB
 21949                           pclath	equ	0xFFA
 21950                           tblptru	equ	0xFF8
 21951                           tblptrh	equ	0xFF7
 21952                           tblptrl	equ	0xFF6
 21953                           tablat	equ	0xFF5
 21954                           prodh	equ	0xFF4
 21955                           prodl	equ	0xFF3
 21956                           intcon	equ	0xFF2
 21957                           intcon2	equ	0xFF1
 21958                           intcon3	equ	0xFF0
 21959                           indf0	equ	0xFEF
 21960                           postinc0	equ	0xFEE
 21961                           fsr0h	equ	0xFEA
 21962                           fsr0l	equ	0xFE9
 21963                           wreg	equ	0xFE8
 21964                           postdec1	equ	0xFE5
 21965                           fsr1h	equ	0xFE2
 21966                           fsr1l	equ	0xFE1
 21967                           indf2	equ	0xFDF
 21968                           postinc2	equ	0xFDE
 21969                           postdec2	equ	0xFDD
 21970                           fsr2h	equ	0xFDA
 21971                           fsr2l	equ	0xFD9
 21972                           status	equ	0xFD8


Data Sizes:
    Strings     1251
    Constant    27
    Data        8
    BSS         124
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     90     125
    BANK0           128     90     128
    BANK1           256      0      59
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    strcpy@from	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_62(CODE[4]), STR_61(CODE[4]), STR_60(CODE[4]), STR_59(CODE[4]), 
		 -> STR_58(CODE[4]), STR_57(CODE[4]), STR_56(CODE[4]), STR_55(CODE[4]), 
		 -> STR_54(CODE[4]), STR_53(CODE[4]), STR_52(CODE[4]), STR_51(CODE[4]), 
		 -> STR_20(CODE[4]), STR_19(CODE[4]), STR_18(CODE[4]), STR_17(CODE[4]), 
		 -> STR_16(CODE[4]), STR_15(CODE[4]), STR_14(CODE[4]), STR_13(CODE[4]), 
		 -> STR_12(CODE[4]), STR_11(CODE[4]), STR_10(CODE[4]), STR_9(CODE[4]), 
		 -> STR_8(CODE[4]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_120(CODE[7]), count_total(BANK0[2]), printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 24
		 -> STR_119(CODE[18]), STR_118(CODE[18]), STR_117(CODE[18]), STR_116(CODE[18]), 
		 -> STR_115(CODE[17]), STR_114(CODE[17]), STR_113(CODE[11]), STR_112(CODE[18]), 
		 -> STR_111(CODE[18]), STR_110(CODE[17]), STR_109(CODE[15]), STR_108(CODE[15]), 
		 -> STR_107(CODE[15]), STR_106(CODE[17]), STR_105(CODE[17]), STR_104(CODE[17]), 
		 -> STR_103(CODE[16]), STR_102(CODE[17]), STR_101(CODE[17]), STR_100(CODE[17]), 
		 -> STR_99(CODE[17]), STR_98(CODE[17]), STR_97(CODE[17]), STR_96(CODE[15]), 
		 -> STR_95(CODE[11]), STR_94(CODE[17]), STR_93(CODE[11]), STR_92(CODE[17]), 
		 -> STR_91(CODE[14]), STR_90(CODE[15]), STR_89(CODE[14]), STR_88(CODE[10]), 
		 -> STR_87(CODE[9]), STR_86(CODE[9]), STR_85(CODE[10]), STR_84(CODE[10]), 
		 -> STR_83(CODE[16]), STR_82(CODE[15]), STR_81(CODE[3]), STR_80(CODE[15]), 
		 -> STR_79(CODE[13]), STR_78(CODE[14]), STR_77(CODE[8]), STR_76(CODE[14]), 
		 -> STR_75(CODE[15]), STR_74(CODE[12]), STR_73(CODE[14]), STR_72(CODE[17]), 
		 -> STR_71(CODE[14]), STR_70(CODE[15]), STR_69(CODE[17]), STR_68(CODE[17]), 
		 -> STR_67(CODE[7]), STR_66(CODE[21]), STR_65(CODE[13]), STR_64(CODE[11]), 
		 -> STR_63(CODE[24]), STR_50(CODE[17]), STR_49(CODE[17]), STR_48(CODE[17]), 
		 -> STR_47(CODE[17]), STR_46(CODE[17]), STR_45(CODE[17]), STR_44(CODE[17]), 
		 -> STR_43(CODE[17]), STR_42(CODE[17]), STR_41(CODE[17]), STR_40(CODE[17]), 
		 -> STR_39(CODE[17]), STR_38(CODE[17]), STR_37(CODE[17]), STR_36(CODE[17]), 
		 -> STR_35(CODE[17]), STR_34(CODE[17]), STR_33(CODE[17]), STR_32(CODE[17]), 
		 -> STR_31(CODE[17]), STR_30(CODE[17]), STR_29(CODE[3]), STR_28(CODE[17]), 
		 -> STR_27(CODE[17]), STR_26(CODE[17]), STR_25(CODE[17]), STR_24(CODE[17]), 
		 -> STR_23(CODE[14]), STR_22(CODE[10]), STR_21(CODE[24]), STR_7(CODE[7]), 
		 -> STR_6(CODE[17]), STR_5(CODE[18]), STR_4(CODE[16]), STR_3(CODE[18]), 
		 -> STR_2(CODE[14]), STR_1(CODE[18]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _handler in COMRAM

    _handler->_printSortTimer
    i2_change_state_to_menu_start->i2_printRTC
    i2_printRTC->i2_printf
    i2_change_state_to_menu_22->i2_printf
    i2_change_state_to_menu_12->i2_printf
    _change_state_to_menu_23->i2_printf
    _change_state_to_menu_11->i2_printf
    _change_state_to_logs_34->i2_printf
    _change_state_to_logs_33->i2_printf
    _change_state_to_logs_23->i2_printf
    _change_state_to_logs_22->i2_printf
    _change_state_to_logs_12->i2_printf
    _change_state_to_logs_11->i2_printf
    _dispLogs->_retrieveLog
    _retrieveLog->i2___wmul
    _printSortTimer->i2_printf
    i2_printf->i2___lwdiv
    i2_putch->i2_lcdNibble
    i2___lwdiv->i2___lwmod
    i2_lcdInst->i2_lcdNibble
    i2_getRTC->i2_I2C_Master_Read
    i2_getRTC->i2_I2C_Master_Write
    i2_I2C_Master_Write->i2_I2C_Master_Wait
    i2_I2C_Master_Stop->i2_I2C_Master_Wait
    i2_I2C_Master_Start->i2_I2C_Master_Wait
    i2_I2C_Master_Read->i2_I2C_Master_Wait

Critical Paths under _main in BANK0

    _main->_UI
    _sort->_Loading
    _Loading->_EEPROM_write
    _initSortTimer->_getRTC
    _getMAG->_readMAG
    _getIR->_readIR
    _readIR->_readADC
    _Distribution->_updateServoPosition
    _logRun->_EEPROM_write
    _EEPROM_write->_printf
    _loadRTC->_I2C_Master_Init
    _I2C_Master_Init->___lldiv
    _change_state_to_menu_start->_printRTC
    _initLCD->_lcdInst
    _UI->_printRTC
    _printRTC->_printf
    _getRTC->_I2C_Master_Read
    _getRTC->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _change_state_to_menu_22->_printf
    _change_state_to_menu_12->_printf
    ___awdiv->___awmod
    _Test->_actuatorTest
    _sensorTest->_printf
    _readMAG->_readADC
    _algorithmTest->_printf
    _actuatorTest->_printf
    _SpeedTest->_printf
    _PusherTest->_printf
    _PortTestA5->_printf
    _BothServos->_printf
    _initServos->_updateServoPosition
    _BlockerTest->_printf
    _printf->___awdiv
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _lcdInst->_lcdNibble

Critical Paths under _handler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _handler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _handler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _handler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _handler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _handler in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _handler in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _handler in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _handler in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _handler in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _handler in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _handler in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _handler in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _handler in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _handler in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _handler in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  196015
                    _I2C_Master_Init
                               _Test
                                 _UI
                            _initLCD
                           _initTime
                             _initUI
                             _logRun
                      _machineConfig
                               _sort
                        _stopSignals
 ---------------------------------------------------------------------------------
 (1) _stopSignals                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _sort                                                 0     0      0   22596
                       _Distribution
                                 _ID
                            _Loading
 ---------------------------------------------------------------------------------
 (2) _Loading                                             11    11      0   17169
                                             49 BANK0     11    11      0
                        _EEPROM_read
                       _EEPROM_write
                           _delay_ms
                              _getIR
                             _getMAG
                     _initGlobalVars
                         _initServos
                      _initSortTimer
                            _lcdInst
 ---------------------------------------------------------------------------------
 (3) _initSortTimer                                        5     5      0     631
                                              5 BANK0      5     5      0
                             _getRTC
 ---------------------------------------------------------------------------------
 (3) _initGlobalVars                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _getMAG                                               2     2      0      45
                                              6 BANK0      2     2      0
                            _readMAG
 ---------------------------------------------------------------------------------
 (3) _getIR                                                3     3      0      91
                                              6 BANK0      3     3      0
                             _readIR
 ---------------------------------------------------------------------------------
 (4) _readIR                                               4     4      0      45
                                              2 BANK0      4     4      0
                            _readADC
 ---------------------------------------------------------------------------------
 (3) _delay_ms                                             2     2      0      23
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _ID                                                   4     4      0      46
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (2) _Distribution                                         2     2      0    5381
                                              8 BANK0      2     2      0
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (1) _machineConfig                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _logRun                                              10    10      0   10978
                                             49 BANK0     10    10      0
                        _EEPROM_read
                       _EEPROM_write
 ---------------------------------------------------------------------------------
 (3) _EEPROM_write                                         6     3      3   10231
                                             43 BANK0      6     3      3
                        _EEPROM_read
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (4) _EEPROM_read                                          2     0      2     426
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _initUI                                               0     0      0   22352
         _change_state_to_menu_start
                            _loadRTC
 ---------------------------------------------------------------------------------
 (2) _loadRTC                                              3     3      0     914
                                             21 BANK0      3     3      0
                    _I2C_Master_Init
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Init                                      8     4      4     440
                                             13 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     290
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_start                           0     0      0   21438
                            _lcdInst
                           _printRTC
                             _printf
 ---------------------------------------------------------------------------------
 (1) _initTime                                             7     1      6     538
                                              0 BANK0      7     1      6
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                              3 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _UI                                                  24    24      0   44456
                                             68 BANK0     22    22      0
                            ___awdiv
                            ___awmod
            _change_state_to_menu_12
            _change_state_to_menu_22
                            _lcdInst
                           _printRTC
                             _printf
                             _strcpy
 ---------------------------------------------------------------------------------
 (3) _printRTC                                            25    25      0   12903
                                             43 BANK0     25    25      0
                             _getRTC
                            _lcdInst
                             _printf
                             _strcpy
 ---------------------------------------------------------------------------------
 (4) _strcpy                                               6     2      4    3275
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) _getRTC                                               2     2      0     519
                                              3 BANK0      2     2      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Write                                     2     0      2     406
                                              1 BANK0      2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Read                                      2     2      0      45
                                              1 BANK0      2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (6) _I2C_Master_Wait                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_22                              0     0      0    8535
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_12                              0     0      0    8535
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4    1064
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     556
                                              6 BANK0      8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (1) _Test                                                 2     2      0   94520
                                             70 BANK0      2     2      0
                        _BlockerTest
                         _BothServos
                         _EEPROMTest
                         _PortTestA5
                          _PortTests
                         _PusherTest
                          _SpeedTest
                       _actuatorTest
                      _algorithmTest
                            _lcdInst
                             _printf
                         _sensorTest
 ---------------------------------------------------------------------------------
 (2) _sensorTest                                           4     4      0    8647
                                             43 BANK0      4     4      0
                            _lcdInst
                             _printf
                            _readADC
                            _readMAG
 ---------------------------------------------------------------------------------
 (4) _readMAG                                              4     4      0      45
                                              2 BANK0      4     4      0
                            _readADC
 ---------------------------------------------------------------------------------
 (5) _readADC                                              2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _algorithmTest                                        2     2      0    8535
                                             43 BANK0      2     2      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _actuatorTest                                        27    27      0   15159
                                             43 BANK0     27    27      0
                            _lcdInst
                             _printf
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (2) _SpeedTest                                            1     1      0    8535
                                             43 BANK0      1     1      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _PusherTest                                           5     5      0    8627
                                             43 BANK0      5     5      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _PortTests                                            2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _PortTestA5                                           1     1      0    8535
                                             43 BANK0      1     1      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _EEPROMTest                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _BothServos                                           2     2      0   19297
                                             43 BANK0      2     2      0
                         _initServos
                            _lcdInst
                             _printf
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (3) _initServos                                           1     1      0    5381
                                              8 BANK0      1     1      0
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (4) _updateServoPosition                                  8     4      4    5381
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (2) _BlockerTest                                          5     5      0    8650
                                             43 BANK0      5     5      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (4) _printf                                              33    21     12    8400
                                             14 BANK0     29    17     12
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (5) _isdigit                                              3     3      0      68
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     669
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              5     1      4     515
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              7     3      4     442
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) _lcdInst                                              1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     113
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _handler                                             16    16      0   76936
                                             74 COMRAM    16    16      0
                     _printSortTimer
                         _updateMenu
 ---------------------------------------------------------------------------------
 (8) _updateMenu                                           2     2      0   71999
                                             66 COMRAM     2     2      0
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
                           _dispLogs
                       _inputHandler
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
       i2_change_state_to_menu_start
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_start                         0     0      0    7744
                          i2_lcdInst
                         i2_printRTC
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) i2_printRTC                                         25    25      0    4605
                                             41 COMRAM    25    25      0
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
                           i2_strcpy
 ---------------------------------------------------------------------------------
 (11) i2_strcpy                                            6     2      4     699
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (9) _inputHandler                                         4     2      2   31390
                                             41 COMRAM     4     2      2
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_22                            0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_12                            0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_23                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_11                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_34                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_33                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_23                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_22                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_12                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_11                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) _dispLogs                                             2     0      2    1475
                                             17 COMRAM     2     0      2
                        _retrieveLog
 ---------------------------------------------------------------------------------
 (10) _retrieveLog                                        11     9      2    1047
                                              6 COMRAM    11     9      2
                      i2_EEPROM_read
                           i2___wmul
 ---------------------------------------------------------------------------------
 (11) i2_EEPROM_read                                       2     0      2     174
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (8) _printSortTimer                                      33    33      0    4937
                                             41 COMRAM    33    33      0
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) i2_printf                                           33    21     12    3004
                                             12 COMRAM    29    17     12
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch
 ---------------------------------------------------------------------------------
 (11) i2_putch                                             1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (11) i2_isdigit                                           3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (11) i2___wmul                                            6     2      4     469
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (11) i2___lwmod                                           5     1      4     367
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (11) i2___lwdiv                                           7     3      4     318
                                              5 COMRAM     7     3      4
                          i2___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (11) i2_lcdInst                                           1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (12) i2_lcdNibble                                         2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (11) i2_getRTC                                            2     2      0     213
                                              3 COMRAM     2     2      0
                  i2_I2C_Master_Read
                 i2_I2C_Master_Start
                  i2_I2C_Master_Stop
                 i2_I2C_Master_Write
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Write                                  2     0      2     100
                                              1 COMRAM     2     0      2
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Stop                                   0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Start                                  0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Read                                   2     2      0      45
                                              1 COMRAM     2     2      0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (13) i2_I2C_Master_Wait                                   1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
     ___lldiv
   _Test
     _BlockerTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _BothServos
       _initServos
         _updateServoPosition
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _updateServoPosition
     _EEPROMTest
     _PortTestA5
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _PortTests
     _PusherTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _SpeedTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _actuatorTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _updateServoPosition
     _algorithmTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _lcdInst
       _lcdNibble
     _printf
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
     _sensorTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _readADC
       _readMAG
         _readADC
   _UI
     ___awdiv
       ___awmod (ARG)
     ___awmod
     _change_state_to_menu_12
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _change_state_to_menu_22
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _lcdInst
       _lcdNibble
     _printRTC
       _getRTC
         _I2C_Master_Read
           _I2C_Master_Wait
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _strcpy
     _printf
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
     _strcpy
   _initLCD
     _lcdInst
       _lcdNibble
   _initTime
   _initUI
     _change_state_to_menu_start
       _lcdInst
         _lcdNibble
       _printRTC
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
         _lcdInst
           _lcdNibble
         _printf
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _lcdNibble
         _strcpy
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _loadRTC
       _I2C_Master_Init
         ___lldiv
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
   _logRun
     _EEPROM_read
     _EEPROM_write
       _EEPROM_read
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
   _machineConfig
   _sort
     _Distribution
       _updateServoPosition
     _ID
     _Loading
       _EEPROM_read
       _EEPROM_write
         _EEPROM_read
         _lcdInst
           _lcdNibble
         _printf
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _lcdNibble
       _delay_ms
       _getIR
         _readIR
           _readADC
       _getMAG
         _readMAG
           _readADC
       _initGlobalVars
       _initServos
         _updateServoPosition
       _initSortTimer
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
       _lcdInst
         _lcdNibble
   _stopSignals

 _handler (ROOT)
   _printSortTimer
     i2___lwdiv
       i2___lwmod (ARG)
     i2___lwmod
     i2___wmul
     i2_getRTC
       i2_I2C_Master_Read
         i2_I2C_Master_Wait
       i2_I2C_Master_Start
         i2_I2C_Master_Wait
       i2_I2C_Master_Stop
         i2_I2C_Master_Wait
       i2_I2C_Master_Write
         i2_I2C_Master_Wait
     i2_lcdInst
       i2_lcdNibble
     i2_printf
       i2___lwdiv
         i2___lwmod (ARG)
       i2___lwmod
       i2___wmul
       i2_isdigit
       i2_putch
         i2_lcdNibble
   _updateMenu
     _change_state_to_logs_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_33
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_34
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _dispLogs
       _retrieveLog
         i2_EEPROM_read
         i2___wmul
     _inputHandler
       _change_state_to_logs_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_33
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_34
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
     i2_change_state_to_menu_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_start
       i2_lcdInst
         i2_lcdNibble
       i2_printRTC
         i2_getRTC
           i2_I2C_Master_Read
             i2_I2C_Master_Wait
           i2_I2C_Master_Start
             i2_I2C_Master_Wait
           i2_I2C_Master_Stop
             i2_I2C_Master_Wait
           i2_I2C_Master_Write
             i2_I2C_Master_Wait
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
         i2_strcpy
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      3B       7       23.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     5A      80       5      100.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     5A      7D       1       99.2%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     138      34        0.0%
DATA                 0      0     138       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Sat Mar 25 14:50:20 2017

                                    _i 0131                     i2_I2C_Master_Start 4AD4  
                   i2_I2C_Master_Write 4AAA                                     l66 4A42  
                                   _ID 3098                            __CFG_CPD$ON 000000  
                                   _UI 08CA                           ___awdiv@sign 008B  
                                   _up 0077                    ___wmul@multiplicand 0082  
                   i2___lwdiv@dividend 0006                            __CFG_BORV$3 000000  
                   EEPROM_read@address 0080                           __CFG_CP0$OFF 000000  
                         __CFG_CP1$OFF 000000                           __CFG_CP2$OFF 000000  
                         __CFG_CP3$OFF 000000                                    ID@i 0082  
                                  ?_ID 0001                                    ?_UI 0001  
                                  UI@i 00C8                                    l180 09A0  
                                  l602 204E                                    l811 3F04  
                                  l732 2C22                                    l742 2CE6  
                                  l487 394A                                    l745 2D20  
                                  l756 31A0                                    l757 31BA  
                                  l945 3586                                    l958 4A0E  
                                  l967 3318                           __CFG_CPB$OFF 000000  
                                  _PEN 007E2A                                    _SEN 007E28  
                  ?i2_I2C_Master_Start 0001                         ?_machineConfig 0001  
                  ?i2_I2C_Master_Write 0002                                    _log 00EA  
                                  _sel 00FD                                    _var 00FA  
                         ___awmod@sign 0085                                    wreg 000FE8  
                  i2printRTC@RTC_month 003B                    __end_of_BlockerTest 38B0  
                  _log_count_can_w_lab 0073        __end_of_change_state_to_menu_11 46E0  
      __end_of_change_state_to_menu_12 4550        __end_of_change_state_to_menu_22 4518  
      __end_of_change_state_to_menu_23 46B0           _f_can_coming_to_distribution 006B  
                       ??_Distribution 0088        __end_of_change_state_to_logs_11 47D0  
      __end_of_change_state_to_logs_12 47A0        __end_of_change_state_to_logs_22 4770  
      __end_of_change_state_to_logs_23 485A        __end_of_change_state_to_logs_33 4740  
      __end_of_change_state_to_logs_34 4710                                   ??_ID 0080  
                                 ??_UI 00C4                           __CFG_LVP$OFF 000000  
                         __CFG_WDT$OFF 000000                                   l1121 0080  
                                 l1130 0240                                   l1131 028E  
                                 l1212 4268                                   l1220 374C  
                                 l1125 0126                                   l1206 4258  
                                 l1118 007C                                   l1062 34CE  
                                 l1231 37C8                                   l1128 018C  
                                 l1233 37E2                                   l1129 01DA  
                                 l1227 3784                                   l1155 05E8  
                                 l1083 36A6                                   l1059 34AE  
                                 l1316 13B6                                   l1172 0858  
                                 l1092 1CF8                                   l1262 3D9C  
                                 l1086 36AA                                   l1191 3DEC  
                                 l1255 3D8C                                   l1167 0782  
                                 l1095 1CFC                                   l1280 387E  
                                 l1272 3836                                   l1192 3DF0  
                                 l1281 3898                                   l1193 3DF4  
                                 l1185 3DCC                                   l1282 38AA  
                                 l1194 3DF8                                   l1195 3DFC  
                                 l1197 3E3A                                   l1189 3DE8  
                                 l1710 3AD8                                   l1763 3EBE  
                                 l1773 414E                                   l6040 20D0  
                                 l6032 2058                                   l6200 3B0E  
                                 l6050 2166                                   l6042 20EE  
                                 l6034 2076                                   l6026 1FCC  
                                 l5500 3E7A                                   l6052 2184  
                                 l6044 210C                                   l6036 2094  
                                 l6060 221E                                   l5510 3EB0  
                                 l5502 3E80                                   l7102 0434  
                                 l6054 21A2                                   l6046 212A  
                                 l6038 20B2                                   l6206 3B84  
                                 l5520 4116                                   l7200 0630  
                                 l7120 0496                                   l7112 045C  
                                 l7104 043A                                   l5440 489A  
                                 l6048 2148                                   l6400 3C8E  
                                 l6304 3F8C                                   l5522 411C  
                                 l7210 0658                                   l7130 04BE  
                                 l7050 032C                                   l7042 030A  
                                 l5442 48AC                                   l6058 21C0  
                                 l6242 35EE                                   l6250 3610  
                                 l7300 0804                                   l7204 063A  
                                 l7124 04A0                                   l7108 0444  
                                 l7060 0354                                   l7052 0332  
                                 l8012 1156                                   l8004 1134  
                                 l6308 3FA4                                   l5526 4140  
                                 l5518 410A                                   l5710 140E  
                                 l7310 0842                                   l7230 06BE  
                                 l7214 0662                                   l7150 0524  
                                 l7134 04C8                                   l7046 0314  
                                 l6406 3CBA                                   l6254 3626  
                                 l6246 35F8                                   l5704 13EE  
                                 l5640 11A4                                   l7320 0872  
                                 l7304 081C                                   l7240 06E6  
                                 l7208 0652                                   l7160 054C  
                                 l7128 04B8                                   l7072 0398  
                                 l7056 033C                                   l5464 4824  
                                 l8008 113E                                   l8016 1162  
                                 l6264 48E2                                   l5482 48D2  
                                 l5722 144A                                   l5650 11E2  
                                 l5634 117E                                   l7402 376E  
                                 l7330 089A                                   l7322 0878  
                                 l7234 06D6                                   l7226 06B4  
                                 l7218 067A                                   l7154 053C  
                                 l7146 051A                                   l7138 04E0  
                                 l7082 03C0                                   l6258 3630  
                                 l5740 14C8                                   l5732 14A4  
                                 l5708 1408                                   l5644 11AE  
                                 l5804 3EF0                                   l7412 379E  
                                 l7340 08C2                                   l7332 08A0  
                                 l7260 075A                                   l7252 0738  
                                 l7244 06FE                                   l7236 06DC  
                                 l7180 05C0                                   l7172 059E  
                                 l7164 0564                                   l7156 0542  
                                 l7076 03B0                                   l7068 038E  
                                 l5820 3A6C                                   l6268 48F8  
                                 l6292 3F62                                   l6196 3AF8  
                                 l6612 2BE0                                   l5734 14AE  
                                 l5670 12A2                                   l5638 1192  
                                 l5806 3F1A                                   l7430 3E00  
                                 l7326 0882                                   l7262 0760  
                                 l7182 05C6                                   l7094 0412  
                                 l7086 03D8                                   l7078 03B6  
                                 l5830 3AC6                                   l5822 3A72  
                                 l6710 3160                                   _ADIE 007CEE  
                                 l5752 150A                                   l5728 146C  
                                 l5680 131A                                   l7416 37B2  
                                 l7336 08AA                                   l7256 0742  
                                 l7176 05A8                                   l6288 3F4C  
                                 l6640 2C80                                   l6624 2C46  
                                 l5498 3E6E                                   l5762 157C  
                                 l5746 14E4                                   l5682 1332  
                                 l5666 1290                                   l5658 125E  
                                 l7290 07DC                                   l7266 076A  
                                 l7186 05D0                                   l7098 041C  
                                 l8330 34E6                                   l8306 3450  
                                 l7610 3A24                                   l7602 3A02  
                                 l5770 4566                                   l5818 3A5C  
                                 l6706 3150                                   l8410 391E  
                                 l5748 14F0                                   l5756 151E  
                                 l5676 1308                                   l5668 129C  
                                 l5692 137C                                   l5764 1588  
                                 l6900 1F12                                   l8340 3504  
                                 l8332 34EC                                   l8324 34D4  
                                 l5780 3D18                                   l7700 09D0  
                                 l6396 3C78                                   l6740 277C  
                                 l8412 3924                                   l8404 38FA  
                                 l5758 1524                                   l5686 135E  
                                 l5678 1314                                   l7382 3DC4  
                                 l7294 07F4                                   l7286 07D2  
                                 l8342 350A                                   l8334 34F2  
                                 l8326 34DA                                   l7606 3A10  
                                 l7630 3BD4                                   l7622 3BB0  
                                 l8270 324E                                   l6742 2796  
                                 l6750 27F8                                   l6654 2CD0  
                                 l8422 3940                                   l8414 392A  
                                 l8406 3910                                   l5688 1376  
                                 l7296 07FA                                   l6912 1F5A  
                                 l6904 1F48                                   l8336 34F8  
                                 l8328 34E0                                   l7632 3BE0  
                                 l5776 3D02                                   l5768 455A  
                                 l7800 0BE6                                   l7712 0A04  
                                 l7704 09DA                                   l6760 287C  
                                 l6744 27B0                                   l6664 2D00  
                                 l8424 3946                                   l8338 34FE  
                                 l8346 3510                                   l7634 3BE6  
                                 l7642 3C18                                   l7626 3BC0  
                                 l5786 3D38                                   l7810 0C7C  
                                 l7802 0C04                                   l6754 282E  
                                 l6738 2762                                   l6666 2D0A  
                                 l7556 385E                                   l6916 1F90  
                                 l6844 1D4C                                   l7812 0C9A  
                                 l7804 0C22                                   l7732 0A6C  
                                 l7708 09F2                                   l8268 323A  
                                 l6756 2848                                   l6764 2896  
                                 l6748 27CA                                   l6676 2D3A  
                                 l8428 394C                                   l7558 3868  
                                 l6862 1E04                                   l7590 39C0  
                                 l7646 3C2C                                   l7638 3C0A  
                                 l7910 0F90                                   l7814 0CB8  
                                 l7806 0C40                                   l7822 0D12  
                                 l7726 0A5C                                   l7742 0A92  
                                 l8294 32D2                                   l6758 2862  
                                 l6766 28C4                                   l6694 311A  
                                 l7568 389A                                   l6880 1E96  
                                 l7592 39CC                                   l7584 39A2  
                                 l7832 0DC2                                   l7816 0CD6  
                                 l7808 0C5E                                   l7824 0D76  
                                 l7760 0AEE                                   l7736 0A84  
                                 l7728 0A62                                   l6962 00FA  
                                 l6874 1E54                                   l7594 39D2  
                                 l7578 398C                                   l7914 0F9A  
                                 l7850 0E0E                                   l7842 0DEC  
                                 l7818 0CF4                                   l7770 0B18  
                                 l6698 3128                                   l6956 00EA  
                                 l6892 1EE2                                   l7932 0FE6  
                                 l7924 0FC4                                   l7836 0DDA  
                                 l7828 0DB8                                   l7764 0B06  
                                 l7756 0AE4                                   l6966 0112  
                                 l6958 00F0                                   l7950 104C  
                                 l7918 0FB2                                   l7870 0ED4  
                                 l7846 0DF6                                   l7774 0B22  
                                 l7694 09B8                                   l7928 0FCE  
                                 l7696 09BE                                   l7954 1056  
                                 l7874 0EDE                                   l7794 0B8C  
                                 l7778 0B3A                                   l7972 10A2  
                                 l7964 1080                                   l7892 0F2A  
                                 l7884 0F08                                   l7796 0BAA  
                                 l7990 1100                                   l7958 106E  
                                 l7878 0EF6                                   l7798 0BC8  
                                 l7968 108A                                   l7888 0F12  
                                 l7994 110A                                   l7998 1122  
                                 STR_1 FBA3                                   STR_2 FF27  
                                 STR_3 FB91                                   STR_4 FE4A  
                                 STR_5 FB91                                   STR_6 FDE6  
                                 STR_7 FFC4                                   STR_8 FFDB  
                                 STR_9 FFCB                                   _LATA 000F89  
                                 _LATB 000F8A                                   _LATC 000F8B  
                                 u4000 444E                                   _LATD 000F8C  
                                 u4001 444A                                   _LATE 000F8D  
                                 u4010 4450                                   u4100 1354  
                                 u4107 134A                                   u4060 12DC  
                                 u5040 2BEC                                   u4067 12D2  
                                 u5300 1D8E                                   u5060 2C22  
                                 u5310 1D90                                   u5170 30E6  
                                 u5058 2BF0                                   _PEIE 007F96  
                                 u5340 1F36                                   u6151 3854  
                                 u6160 3856                                   u5440 0126  
                                 u5370 1F7E                                   u5178 30EA  
                                 u5460 01DA                                   u5348 1F3A  
                                 u3780 4822                                   _RCEN 007E2B  
                                 u8007 1E46                                   u5480 028E  
                                 u8017 1E8A                                   u5378 1F82  
                                 u4690 204E                                   u7250 3318  
                                 u8107 0070                                   u8027 1EA8  
                                 u4675 4188                                   u3980 4402  
                                 u8117 0092                                   u8037 1ED6  
                                 u3990 4404                                   u8207 031C  
                                 u8127 0102                                   u8047 1EF0  
                                 u8217 0344                                   u8137 0136  
                                 u8057 48A2                                   i2l66 4A56  
                                 u8307 05B0                                   u8227 03A0  
                                 u8147 019C                                   u8067 3656  
                                 u7507 2D24                                   u8317 05D8  
                                 u8237 03C8                                   u8157 01BA  
                                 u8077 369A                                   u7517 2D2E  
                                 u8407 080C                                   u8327 0642  
                                 u8247 0424                                   u8167 01EA  
                                 u8087 36BC                                   u7607 31D4  
                                 u7527 45DA                                   u8417 085C  
                                 u8337 066A                                   u8257 044C  
                                 u8177 0250                                   u8097 002C  
                                 u7617 281E                                   u7537 3F6A  
                                 u7457 2B70                                   u8507 3790  
                                 u8427 0866                                   u8347 06C6  
                                 u8267 04A8                                   u8187 026E  
                                 u7707 09E2                                   u7627 28D2  
                                 u7547 48EE                                   u7467 2C36  
                                 u8517 37CC                                   u8437 088A  
                                 u8357 06EE                                   u8277 04D0  
                                 u8197 029E                                   u7717 0A1E  
                                 u7637 2904                                   u7557 30AE  
                                 u7477 2CA0                                   u8607 1734  
                                 u8527 37D6                                   u8447 08B2  
                                 u8367 074A                                   u8287 052C  
                                 u7807 0EE6                                   u7727 0A74  
                                 u7647 35A4                                   u7567 30CC  
                                 u7487 2CEA                                   u8617 1766  
                                 u8537 4222                                   u8457 3D56  
                                 u8377 0772                                   u8297 0554  
                                 u7817 0F1A                                   u7737 0AA0  
                                 u7657 3600                                   u7577 3170  
                                 u7497 2CF4                                   u8707 37F6  
                                 u8627 17B2                                   u8547 15B6  
                                 u8467 3DA6                                   u8387 0794  
                                 u7907 1146                                   u7827 0F44  
                                 u7747 0AF6                                   u7667 3638  
                                 u7587 31A4                                   u8717 3882  
                                 u8637 17FE                                   u8557 1602  
                                 u8477 3DBA                                   u8397 07E4  
                                 u7917 345E                                   u7837 0FA2  
                                 u7757 0B2A                                   u7677 4460  
                                 u7597 31AE                                   u8727 388C  
                                 u8647 1832                                   u8567 164E  
                                 u8487 372C                                   u7927 34A2  
                                 u7847 0FD6                                   u7767 0B54  
                                 u7687 4494                                   u8737 40AE  
                                 u8657 1864                                   u8577 1682  
                                 u8497 3788                                   u7937 1CA8  
                                 u7857 1000                                   u7777 0DCA  
                                 u7697 08E2                                   u8747 40B8  
                                 u8667 18B0                                   u8587 16B4  
                                 u7947 1CEC                                   u7867 105E  
                                 u7787 0DFE                                   u8757 40E4  
                                 u8677 18E4                                   u8597 1700  
                                 u7957 1D0E                                   u7877 1092  
                                 u7797 0E28                                   u8767 40EE  
                                 u8687 1916                                   u7967 1D3C  
                                 u7887 10BC                                   u8697 42B2  
                                 u7977 1DA4                                   u7897 1112  
                                 u7987 1DF8                                   u7997 1E18  
                                 _RSEN 007E29                            _stopSignals 4A16  
                                 _Test 3450                                   _back 005B  
                                 _main 38B0                                   _down 0063  
                                 _keys FB01                                   _time 0124  
                                 fsr0h 000FEA                                   fsr1h 000FE2  
                   i2___lwdiv@quotient 000A                                   indf0 000FEF  
                                 fsr2h 000FDA                                   fsr0l 000FE9  
                                 indf2 000FDF                                   fsr1l 000FE1  
                                 fsr2l 000FD9                                   _sort 499C  
                                 btemp 007E                   ??i2_I2C_Master_Start 0002  
                 ??i2_I2C_Master_Write 0004                                   prodh 000FF4  
                                 prodl 000FF3                                   start 000E  
                        __CFG_IESO$OFF 000000                   _log_count_can_no_lab 00EE  
                      __end_ofi2_putch 4A94                    __size_of_EEPROMTest 0002  
                        __CFG_MCLRE$ON 000000                           ___param_bank 000000  
                           i2_printRTC 2522                            i2_lcdNibble 42CA  
                      __end_of_Loading 2D44                   __end_of_actuatorTest 08CA  
                     ?_I2C_Master_Init 008D                       ?_I2C_Master_Read 0001  
                     ?_I2C_Master_Wait 0001            ??i2_change_state_to_menu_12 002A  
          ??i2_change_state_to_menu_22 002A                       ?_I2C_Master_Stop 0001  
                                ?_Test 0001                   __end_of_EEPROM_write 3648  
                                ?_main 0001                                  _ACKEN 007E2C  
                                _ACKDT 007E2D                        __end_of___awdiv 3A2E  
                                _EEADR 000FA9                                  STR_10 FFE7  
                                STR_11 FFEB                                  STR_12 FFFB  
                                STR_20 FFEF                                  STR_13 FFDF  
                                STR_21 FB1C                                  STR_14 FFD7  
                                STR_22 FF9B                                  STR_30 FDF7  
                                STR_15 FFD3                                  STR_23 FF19  
                                STR_31 FDD5                                  STR_16 FFE3  
                                STR_24 FD3C                                  STR_32 FD1A  
                                STR_40 FCD6                                  STR_17 FFF3  
                                STR_25 FE19                                  STR_33 FD2B  
                                STR_41 FCC5                                  STR_18 FFF7  
                                STR_34 FDC4                                  STR_50 FDA2  
                                STR_42 FD80                                  STR_26 FD4D  
                                STR_43 FD80                                  STR_35 FDC4  
                                STR_51 FFDB                                  STR_19 FFCF  
                                STR_27 FE08                                  STR_52 FFCB  
                                STR_60 FFF3                                  STR_28 FD5E  
                                STR_36 FD09                                  STR_44 FCE7  
                      __end_of___awmod 3C36                                  STR_45 FCD6  
                                STR_37 FD1A                                  STR_53 FFE7  
                                STR_61 FFF7                                  STR_29 FE16  
                                STR_62 FFCF                                  STR_54 FFEB  
                                STR_70 FED2                                  STR_38 FDB3  
                                STR_46 FD91                                  STR_47 FD91  
                                STR_55 FFFB                                  STR_63 FB1C  
                                STR_71 FF0B                                  STR_39 FD6F  
                                STR_56 FFDF                                  STR_64 FF7C  
                                STR_80 FE5A                                  STR_48 FCF8  
                                STR_72 FC5F                                  STR_49 FCE7  
                                STR_57 FFD7                                  STR_81 FE16  
                                STR_65 FF42                                  STR_73 FEEF  
                                STR_58 FFD3                                  STR_74 FF4F  
                                STR_90 FEC3                                  STR_82 FE87  
                                STR_66 FB34                                  STR_59 FFE3  
                                STR_67 FFBD                                  STR_91 FEE1  
                                STR_75 FEB4                                  STR_83 FE2A  
                                STR_84 FF87                                  STR_76 FEFD  
                                STR_92 FC81                                  STR_68 FC70  
                                STR_85 FF87                                  STR_77 FFAE  
                                STR_93 FF5B                                  STR_69 FCA3  
                                STR_78 FF0B                                  STR_86 FFA5  
                                STR_94 FC92                                  STR_87 FFA5  
                                STR_95 FF66                                  STR_79 FF35  
                                STR_88 FF91                                  STR_96 FEA5  
                                STR_89 FF0B                                  STR_97 FC0A  
                                STR_98 FBF9                                  STR_99 FBD7  
                                ?_sort 0001                        __end_of___lldiv 3AEA  
                                _T0CON 000FD5                        ___awdiv@divisor 0088  
                                _T1CON 000FCD                                  _T3CON 000FB1  
                      __end_of___lwdiv 3EC8                        __end_of___lwmod 4158  
                                i2l257 251E                                  i2l602 25B0  
                                i2l880 303C                                  i2l882 305C  
                                i2l876 2FF0                        ___awdiv@counter 008A  
                                i2l958 4A3A                                  _TMR0H 000FD7  
                                _TMR1H 000FCF                                  _TMR0L 000FD6  
                                _TMR3H 000FB3                                  _TMR1L 000FCE  
                                _TMR3L 000FB2                             _BothServos 15A8  
                                _PORTB 000F81                                  _TRISA 000F92  
                                _TRISB 000F93                                  _TRISC 000F94  
                                _TRISD 000F95                                  _TRISE 000F96  
                        __CFG_PWRT$OFF 000000                          __CFG_WRT0$OFF 000000  
                        __CFG_WRT1$OFF 000000                          __CFG_WRT2$OFF 000000  
                        __CFG_WRT3$OFF 000000                        __end_of_lcdInst 4A88  
                      __end_of_handler 3098                         __CFG_EBTR0$OFF 000000  
                       __CFG_FCMEN$OFF 000000                         __CFG_EBTR1$OFF 000000  
                       __CFG_EBTR2$OFF 000000                         __CFG_EBTR3$OFF 000000  
                                _nRBPU 007F8F                          __CFG_WRTB$OFF 000000  
                        __CFG_WRTC$OFF 000000                          __CFG_WRTD$OFF 000000  
                      __end_of_readADC 48B2                        __end_of_initLCD 449E  
                       __CFG_EBTRB$OFF 000000                                  _debug 0061  
                           i2isdigit@c 0003                                  _getIR 3F3E  
                      __end_of_loadRTC 3CC2                        __end_of_readMAG 4458  
                      __end_of_dpowers FB1C                                  _first 006F  
                                _enter 0065                        __end_of_isdigit 48DC  
                                _input 007D                                  _putch 4A68  
                                pclath 000FFA                                  tablat 000FF5  
                     __end_ofi2___wmul 4952                       __end_ofi2_getRTC 4022  
                  _log_count_pop_w_tab 00F2                                  status 000FD8  
                       __CFG_PBADEN$ON 000000                          i2printf@width 0028  
                     __end_ofi2_printf 1C9A                     __size_ofi2___lwdiv 0052  
                   __size_ofi2___lwmod 0042                       __end_ofi2_strcpy 4620  
                          Loading@addr 00B3                       _count_can_no_lab 012B  
                 __size_of_EEPROM_read 0018                        __initialization 4372  
                         __end_of_Test 3564                     __size_ofi2_lcdInst 000C  
                         __end_of_main 3970                           __end_of_keys FB12  
                         __end_of_sort 49BE                             i2printf@ap 0020  
                           i2printf@cp 001E                     __size_ofi2_isdigit 001E  
                     PusherTest@i_1698 00AE                            _BlockerTest 37E8  
                               ??_Test 00C6    __size_of_change_state_to_menu_start 002C  
                      ??_machineConfig 0080                                 ??_main 00DA  
                               ??_sort 00BC                          __activetblptr 000003  
           updateServoPosition@my_time 0086             updateServoPosition@time_us 0080  
                           i2strcpy@cp 0005                             i2strcpy@to 0001  
                    ?_I2C_Master_Start 0001                    EEPROM_write@address 00AB  
               __size_ofi2_EEPROM_read 0016                      ?_I2C_Master_Write 0081  
                               ?_getIR 0001                     ??_I2C_Master_Start 0081  
                               _ADCON0 000FC2                                 _ADCON1 000FC1  
                   ??_I2C_Master_Write 0083                                 _ADCON2 000FC0  
                               STR_100 FC2C                                 STR_101 FC3D  
                               STR_110 FCB4                                 STR_102 FBB5  
                               STR_103 FE3A                                 STR_111 FB49  
                               STR_120 FFB6                                 STR_104 FBE8  
                               STR_112 FB5B                                 STR_113 FF71  
                               STR_105 FBC6                                 STR_106 FBE8  
                               STR_114 FC1B                                 _ADRESH 000FC4  
                               STR_107 FE96                                 STR_115 FC4E  
                               STR_108 FE78                                 STR_116 FB6D  
                               _EEADRH 000FAA                                 STR_117 FB5B  
                               STR_109 FE69                                 STR_118 FB49  
                               _ADRESL 000FC3                                 STR_119 FB7F  
                               _EEDATA 000FA8                                 _EECON2 000FA7  
                     ___awdiv@dividend 0086                        i2lcdNibble@data 0002  
                               ?_putch 0001                 __size_of_initSortTimer 00AA  
                      i2lcdNibble@temp 0001              i2_change_state_to_menu_12 4650  
            i2_change_state_to_menu_22 4620                                 _INT1IE 007F83  
                               _INT1IF 007F80                                 _CVRCON 000FB5  
                               i2l1316 1B06                                 i2l6000 1C7E  
                               i2l1763 4368                                 i2l6004 45F8  
                               i2l1773 44D6                                 i2l6006 4600  
                               i2l5612 44CC                                 i2l5604 44AC  
                               i2l6180 3404                                 i2l8100 2382  
                               i2l5550 4972                                 i2l5606 44B4  
                               i2l8030 2292                                 i2l5608 44B8  
                               i2l6176 33F4                                 i2l6512 2E3C  
                               i2l6360 25FC                                 i2l8120 23D0  
                               i2l8112 23B4                                 i2l8104 2390  
                               i2l8040 22B4                                 i2l8032 2298  
                               i2l6522 2E62                                 i2l6506 2E2E  
                               i2l6450 2D62                                 i2l6370 266A  
                               i2l6362 2612                                 i2l6354 25BA  
                               i2l6188 3438                                 i2l6540 2E9C  
                               i2l6532 2E84                                 i2l6516 2E58  
                               i2l6460 2D8C                                 i2l6372 2680  
                               i2l6364 2628                                 i2l6356 25D0  
                               i2l6380 26C2                                 i2l6348 254E  
                               i2l8140 2426                                 i2l8132 2402  
                               i2l8124 23E6                                 i2l8116 23C2  
                               i2l8108 23A6                                 i2l8060 22EC  
                               i2l8044 22C2                                 i2l8036 22A6  
                               i2l5574 49F6                                 i2l5902 1A16  
                               i2l6550 2EBC                                 i2l6526 2E76  
                               i2l6462 2D90                                 i2l6374 2696  
                               i2l6366 263E                                 i2l6358 25E6  
                               i2l6382 271C                                 i2l5584 4336  
                               i2l5912 1A6E                                 i2l5904 1A20  
                               i2l6528 2E7A                                 i2l6480 2DC6  
                               i2l6472 2DAE                                 i2l6376 26AC  
                               i2l6368 2654                                 i2l8160 2474  
                               i2l8152 2450                                 i2l8144 2434  
                               i2l8136 2410                                 i2l8128 23F4  
                               i2l8080 2334                                 i2l8072 2318  
                               i2l8064 22FA                                 i2l8056 22DE  
                               i2l8048 22D0                                 i2l5842 3FE8  
                               i2l5586 433E                                 i2l5922 1ABA  
                               i2l5914 1A78                                 i2l5906 1A24  
                               i2l6562 2EF2                                 i2l6554 2ECE  
                               i2l6546 2EAA                                 i2l6482 2DCC  
                               i2l6474 2DB4                                 i2l6458 2D7C  
                               i2l5852 4012                                 i2l5596 435E  
                               i2l5588 4342                                 i2l5940 1B34  
                               i2l5924 1ACC                                 i2l5916 1A7E  
                               i2l6476 2DBA                                 i2l6468 2D9A  
                               i2l8172 24A6                                 i2l8164 2482  
                               i2l8156 2466                                 i2l8148 2442  
                               i2l8092 2366                                 i2l8084 2342  
                               i2l8076 2326                                 i2l8068 230A  
                               i2l5846 3FF8                                 i2l5918 1A90  
                               i2l5870 1936                                 i2l6558 2EE0  
                               i2l6478 2DC0                                 i2l6486 2DD2  
                               i2l5944 1B4C                                 i2l5928 1AD0  
                               i2l5880 195A                                 i2l8360 2980  
                               i2l6568 2EFC                                 i2l8168 2490  
                               i2l8096 2374                                 i2l8088 2350  
                               i2l8504 305A                                 i2l5970 1BC8  
                               i2l5946 1B50                                 i2l5874 1946  
                               i2l6498 2E16                                 i2l8178 24B4  
                               i2l8442 2FA4                                 i2l5964 1B9C  
                               i2l5876 1954                                 i2l8356 2970  
                               i2l8444 2FA8                                 i2l5982 1BF4  
                               i2l5958 1B82                                 i2l5894 19EE  
                               i2l5886 198C                                 i2l8366 29DA  
                               i2l5984 1BFC                                 i2l5992 1C22  
                               i2l5976 1BDE                                 i2l5968 1BC0  
                               i2l8376 2A9C                                 i2l8480 300E  
                               i2l5994 1C28                                 i2l8482 3010  
                               i2l8458 2FC4                                 i2l5988 1C10  
                               i2l5998 1C76                                 i2l8822 2DEA  
                               i2l8814 24D2                                 i2l8824 2E06  
                               i2l8816 24F4                                 i2l8818 2510  
                               _OSCCON 000FD3                                 _TMR0IE 007F95  
                               _TMR0IF 007F92                              ??i2_putch 0003  
                               _TMR1IE 007CE8                                 _TMR1IF 007CF0  
                               _TMR2IE 007CE9                                 _TMR3IE 007D01  
                               _TMR3IF 007D09                                 _TMR0ON 007EAF  
                               _TMR1ON 007E68                                 _TMR3ON 007D88  
                               _SSPADD 000FC8                                 _TRISC3 007CA3  
                               _TRISC4 007CA4                                 _SSPBUF 000FC9  
                            ??_Loading 00B1                       __end_of_delay_ms 4904  
                 delay_ms@milliseconds 0081                         __CFG_XINST$OFF 000000  
                     __end_of_dispLogs 499C                            ?i2_printRTC 0001  
                     retrieveLog@byte1 000B                       retrieveLog@byte2 000C  
                     retrieveLog@byte3 000D                   __end_of_Distribution 2964  
                               ___wmul 4586                              ??___awdiv 008A  
                       __CFG_STVREN$ON 000000                                 _getMAG 45BC  
                            ??___awmod 0084                            logRun@byte1 00B2  
                          logRun@byte2 00B3                            logRun@byte3 00B4  
                               _getRTC 3CC2                              ??___lldiv 0088  
                            ??___lwdiv 0084                              ??___lwmod 008B  
                     ??_printSortTimer 002A                       __end_of_initTime 49E0  
                               _initUI 47D0                                 _readIR 43C0  
                               _logRun 31EE                                 getIR@i 0087  
                               clear_0 4398                                 clear_1 43A4  
                               clear_2 43B0                       ___awdiv@quotient 008C  
                      ___awmod@divisor 0082                             _PortTestA5 4214  
                      ___awmod@counter 0084                              ??_lcdInst 0082  
                               _printf 1170                              ??_handler 004B  
              __size_of_initGlobalVars 006C                           ?_retrieveLog 0007  
                               _strcpy 4550                     __size_of_SpeedTest 0084  
                            ??_readADC 0080                              ??_initLCD 0083  
                            ??_loadRTC 0095                              ??_readMAG 0082  
 __end_ofi2_change_state_to_menu_start 492C  __size_ofi2_change_state_to_menu_start 0028  
         i2_change_state_to_menu_start 4904                            ?_BothServos 0001  
                         ??_EEPROMTest 0080                              ??_isdigit 0080  
                   __size_of_PortTests 0084                      __end_ofi2___lwdiv 4372  
                     __end_of_printRTC 2262                           __mediumconst FB00  
                    __end_ofi2___lwmod 44E0                                 tblptrh 000FF7  
                               tblptrl 000FF6                                 tblptru 000FF8  
                 _log_count_pop_no_tab 00F0                  __end_of_algorithmTest 371E  
                    __end_ofi2_lcdInst 4AA0                             _PusherTest 371E  
                    __end_ofi2_isdigit 49FE                             __accesstop 0080  
              __end_of__initialization 43B6                          ?_inputHandler 002A  
                        ___rparam_used 000001                printSortTimer@start_sec 003D  
                __size_of_actuatorTest 08B8                          i2_EEPROM_read 4A2C  
                         Loading@byte1 00B5                     i2___lwmod@dividend 0001  
                   __end_of_EEPROMTest 4ADE                         __pcstackCOMRAM 0001  
                __size_of_EEPROM_write 00E4                           __pidataBANK1 4AB4  
                        __end_of_getIR 3FB0                            i2printRTC@i 0041  
                        _initSortTimer 3AEA            __end_of_updateServoPosition 3F3E  
                        __end_of_putch 4A78                            i2printf@len 0022  
                          i2printf@val 0024                             __end_of_ID 31EE  
                           __end_of_UI 1170                     printSortTimer@hour 002D  
                            ?i2___wmul 0001                     __size_of_lcdNibble 0068  
                            ?i2_getRTC 0001                            i2putch@data 0003  
                printSortTimer@curTime 002F     __end_of_change_state_to_menu_start 4886  
        ?i2_change_state_to_menu_start 0001             _change_state_to_menu_start 485A  
                printSortTimer@cur_sec 003F                              ?i2_printf 000D  
                              ??_getIR 0086                              ?i2_strcpy 0001  
                     _count_pop_no_tab 005D                    __size_ofi2_printRTC 0236  
                              ??_putch 0082                           _actuatorTest 0012  
                           __pbssBANK0 00DA                             __pbssBANK1 0100  
                         ?_stopSignals 0001                         ??_inputHandler 002C  
                         _EEPROM_write 3564               ?_change_state_to_menu_11 0001  
             ?_change_state_to_menu_12 0001               ?_change_state_to_menu_22 0001  
                              UI@F3226 0133               ?_change_state_to_menu_23 0001  
                    __end_of_SpeedTest 3DCC                         ?i2_EEPROM_read 0001  
             ?_change_state_to_logs_11 0001               ?_change_state_to_logs_12 0001  
             ?_change_state_to_logs_22 0001               ?_change_state_to_logs_23 0001  
             ?_change_state_to_logs_33 0001               ?_change_state_to_logs_34 0001  
                  __size_of_BothServos 0384                      __end_of_PortTests 3E50  
                    printRTC@RTC_month 00BC                           ?i2_lcdNibble 0001  
                              UI@i_412 00CA                                UI@i_413 00CB  
                              UI@i_431 00CC                                UI@i_440 00D1  
                              UI@i_432 00CD                                UI@i_409 00C9  
                              UI@i_443 00D2                                UI@i_435 00CE  
                              UI@i_444 00D3                                UI@i_436 00CF  
                              UI@i_447 00D4                                UI@i_439 00D0  
                              UI@i_448 00D5                         ?_initSortTimer 0001  
                              ?___wmul 0080                                ?_getMAG 0001  
                              ?_getRTC 0001                                ?_initUI 0001  
                              ?_readIR 0001                                ?_logRun 0001  
             updateServoPosition@timer 0082                                UI@month 00D6  
                          ?_PortTestA5 0001                                ?_printf 008E  
                              _UI$2316 00C6                                ?_strcpy 0080  
                           ??i2___wmul 0005                             ??i2_getRTC 0004  
                            ?_delay_ms 0001                             ??i2_printf 0019  
                           ??i2_strcpy 0005                              ?_dispLogs 0012  
                              _SSPCON1 000FC6                                _SSPCON2 000FC5  
                          ?_PusherTest 0001                                _SSPSTAT 000FC7  
                              _RTCflag 00E2                                i2_putch 4A88  
                            ?_initTime 0080                        _f_loadingNewCan 00E8  
                      i2printRTC@month 003D                  __size_of_Distribution 020C  
          __size_ofi2_I2C_Master_Start 0008                      __end_of_lcdNibble 40F6  
                              _Loading 2B56            __size_ofi2_I2C_Master_Write 000A  
                     EEPROM_write@data 00AD                                __Hparam 0000  
                              __Lparam 0000     __size_ofi2_change_state_to_menu_12 0030  
   __size_ofi2_change_state_to_menu_22 0030                              ?_printRTC 0001  
                              ___awdiv 3970                                ___awmod 3B94  
                           _initServos 4270                                ___lldiv 3A2E  
                      __size_of___wmul 0036                        __size_of_getMAG 0032  
                              ___lwdiv 3E50                                ___lwmod 40F6  
                      __size_of_getRTC 0086                        printSortTimer@i 0049  
                            _CMCONbits 000FB4                      retrieveLog@logNum 0007  
                         logRun@byte11 00B6                           ?_BlockerTest 0001  
                      __size_of_initUI 002E                        __size_of_readIR 004C  
                              __pcinit 4372                   i2EEPROM_read@address 0001  
                      __size_of_logRun 0140                           logRun@byte_i 00B5  
                              __ramtop 1000                         _initGlobalVars 4022  
                              _lcdInst 4A78                                _handler 0008  
                              __ptext0 38B0                                __ptext1 4A16  
                              __ptext2 499C                                __ptext3 2B56  
                              __ptext4 3AEA                                __ptext5 4022  
                              __ptext6 45BC                                __ptext7 3F3E  
                              __ptext8 43C0                                __ptext9 48DC  
                      __size_of_printf 0438                                _readADC 4886  
                      __size_of_strcpy 0036                                _initLCD 4458  
                              _cur_can 00E4                                _loadRTC 3C36  
                              _readMAG 440C                                _dpowers FB12  
                   actuatorTest@i_1652 00AE                     actuatorTest@i_1661 00B4  
                   actuatorTest@i_1653 00AF                     actuatorTest@i_1645 00AD  
                   actuatorTest@i_1662 00B5                     actuatorTest@i_1671 00BA  
                   actuatorTest@i_1655 00B0                     actuatorTest@i_1672 00BB  
                   actuatorTest@i_1664 00B6                     actuatorTest@i_1656 00B1  
                   actuatorTest@i_1681 00C0                     actuatorTest@i_1665 00B7  
                   actuatorTest@i_1682 00C1                     actuatorTest@i_1674 00BC  
                   actuatorTest@i_1658 00B2                     actuatorTest@i_1675 00BD  
                   actuatorTest@i_1667 00B8                     actuatorTest@i_1659 00B3  
                   actuatorTest@i_1684 00C2                     actuatorTest@i_1668 00B9  
                   actuatorTest@i_1685 00C3                     actuatorTest@i_1677 00BE  
                   actuatorTest@i_1678 00BF                                _isdigit 48B2  
                     ___awmod@dividend 0080                                getRTC@i 0083  
                 __size_of_retrieveLog 0122                             ??_delay_ms 0080  
             __size_of_I2C_Master_Init 0060               __size_of_I2C_Master_Read 002E  
                        _log_startTime 0100               __size_of_I2C_Master_Wait 0014  
             __size_of_I2C_Master_Stop 0008                             ??_dispLogs 0014  
                         _Distribution 2758                         __pintcode_body 2F2A  
                 end_of_initialization 43B6                                logRun@i 00B7  
                           ??_initTime 0086                        ??i2_EEPROM_read 0003  
                              int_func 2F2A                    i2___wmul@multiplier 0001  
                        ??_EEPROM_read 0082                    __size_of_PortTestA5 005C  
            __size_of_I2C_Master_Start 0008              __size_of_I2C_Master_Write 000A  
                      ___lldiv@divisor 0084                        ___lldiv@counter 008C  
                      ??_initSortTimer 0085                                printf@c 00A8  
                         ??i2_printRTC 002A                                printf@f 008E  
                           ??_printRTC 00AB                       I2C_Master_Init@c 008D  
                     I2C_Master_Read@a 0081                                postdec1 000FE5  
                              postdec2 000FDD                                postinc0 000FEE  
                              postinc2 000FDE                 __end_of_initGlobalVars 408E  
                           _sensorTest 1C9A                    __size_of_PusherTest 00CA  
                           _servoTimes 011C                              _PORTAbits 000F80  
                            _PORTBbits 000F81                   __end_of_inputHandler 2F2A  
                         ??_BothServos 00AB                  __end_of_machineConfig 4214  
                           _updateMenu 2262                      i2_I2C_Master_Read 4952  
                            _IR_signal 00DE                      i2_I2C_Master_Wait 4A56  
                    i2_I2C_Master_Stop 4ACC                      i2___lwdiv@divisor 0008  
                      _log_count_total 0075                              i2___lwdiv 4320  
                            i2___lwmod 449E                      i2___lwdiv@counter 000C  
                   ?i2_I2C_Master_Read 0001                     ?i2_I2C_Master_Wait 0001  
                   __end_ofi2_printRTC 2758                     ?i2_I2C_Master_Stop 0001  
                        actuatorTest@i 00C4           ??_change_state_to_menu_start 00C4  
                            i2_lcdInst 4A94                          Loading@i_1100 00B8  
                        Loading@i_1099 00B6                             _total_time 00F8  
                          printf@width 00A9                   __size_of_stopSignals 0016  
                  ??i2_I2C_Master_Read 0002                              i2_isdigit 49E0  
                  ??i2_I2C_Master_Wait 0001                    ??i2_I2C_Master_Stop 0002  
                            i2getRTC@i 0004                     __end_of_BothServos 192C  
                          PusherTest@i 00AC                    __end_of_EEPROM_read 4A16  
                          ?_initServos 0001                        ?_initGlobalVars 0001  
                       __end_of___wmul 45BC                         __end_of_getMAG 45EE  
                       __end_of_getRTC 3D48                   __size_ofi2_lcdNibble 0056  
                        EEPROM_write@i 00AF                          i2lcdInst@data 0003  
                       __end_of_initUI 47FE                         __end_of_readIR 440C  
                       __end_of_logRun 332E                       i2___wmul@product 0005  
                       __end_of_printf 15A8                           i2printf@flag 0026  
                       __end_of_strcpy 4586              __end_ofi2_I2C_Master_Read 4978  
            __end_ofi2_I2C_Master_Wait 4A68                           i2printf@prec 001D  
                  start_initialization 4372              __end_ofi2_I2C_Master_Stop 4AD4  
                           readMAG@res 0084                      __size_ofi2___wmul 0026  
                      _count_can_w_lab 012D            ?_change_state_to_menu_start 0001  
                    __size_ofi2_getRTC 0072                              i2printf@c 0027  
                            i2printf@f 000D                     EEPROM_write@i_1331 00B0  
                i2I2C_Master_Read@temp 0003                             ?i2___lwdiv 0006  
                           ?i2___lwmod 0001                      __size_ofi2_printf 036E  
                    __size_ofi2_strcpy 0032                      ??_I2C_Master_Init 0091  
                    ??_I2C_Master_Read 0081                      ??_I2C_Master_Wait 0080  
                           ?i2_lcdInst 0001                      ??_I2C_Master_Stop 0081  
                     __CFG_OSC$INTIO67 000000                             ?i2_isdigit 0001  
                           initTime@DD 0083                             initTime@MM 0084  
                           initTime@YY 0085                        retrieveLog@addr 0010  
                           logRun@addr 00B9                              _SpeedTest 3D48  
                             ??___wmul 0084                               ??_getMAG 0086  
                             ??_getRTC 0083                 __size_of_algorithmTest 00D6  
                            _PortTests 3DCC                            ?_sensorTest 0001  
                          __pdataBANK1 0133                       __CFG_LPT1OSC$OFF 000000  
                             ??_initUI 00C4                               ??_readIR 0082  
                             ??_logRun 00B1                           ??_PortTestA5 00AB  
               printSortTimer@timeDiff 0047       __size_of_change_state_to_menu_11 0030  
     __size_of_change_state_to_menu_12 0038       __size_of_change_state_to_menu_22 0038  
     __size_of_change_state_to_menu_23 0030                               ??_printf 009A  
     __size_of_change_state_to_logs_11 0030       __size_of_change_state_to_logs_12 0030  
     __size_of_change_state_to_logs_22 0030       __size_of_change_state_to_logs_23 002E  
     __size_of_change_state_to_logs_33 0030       __size_of_change_state_to_logs_34 0030  
                             ??_strcpy 0084                    _printSortTimer$2436 0045  
                 __size_of_BlockerTest 00C8                            __pbssCOMRAM 005B  
         __size_of_updateServoPosition 0076                            ?_updateMenu 0001  
                        __pcstackBANK0 0080                __size_of_printSortTimer 01F2  
                    i2___lwmod@divisor 0003                      i2___lwmod@counter 0005  
                         _isdigit$1960 0081                           ??_PusherTest 00AB  
                    __size_of_delay_ms 0028                         initSortTimer@i 0088  
                    printSortTimer@min 0041                      printSortTimer@sec 0043  
                  __size_of_initServos 005A                      __size_of_dispLogs 0024  
                     printRTC@INT_time 00AE                           i2strcpy@from 0003  
                             ?i2_putch 0001                        _count_pop_w_tab 005F  
                          _EEPROM_read 49FE                     __end_of_PortTestA5 4270  
                     _I2C_Master_Start 4AC4                              _f_lastCan 006D  
                             ?_Loading 0001                    i2I2C_Master_Write@d 0002  
                     _I2C_Master_Write 4AA0                      __size_of_initTime 0022  
                     ___lwdiv@dividend 0080                      __CFG_CCP2MX$PORTC 000000  
                            __pintcode 0008                             ?_SpeedTest 0001  
                        __pmediumconst FB00                              _lcdNibble 408E  
                __size_of_inputHandler 01E6                               ?___awdiv 0086  
                             ?___awmod 0080                               ?___lldiv 0080  
                       _sensor_outputs 00DA                               ?___lwdiv 0080  
                           ?_PortTests 0001                               ?___lwmod 0087  
                    __size_of_printRTC 02CA                     __end_of_PusherTest 37E8  
                             ?_lcdInst 0001                               ?_handler 0001  
                             ?_readADC 0001                               ?_initLCD 0001  
                             ?_loadRTC 0001                               ?_readMAG 0001  
                             ?_isdigit 0001             __size_ofi2_I2C_Master_Read 0026  
           __size_ofi2_I2C_Master_Wait 0012             __size_ofi2_I2C_Master_Stop 0008  
                            _firstboot 0071                              _cur_state 00E6  
                     ___lwdiv@quotient 0084                         __size_of_getIR 0072  
                        _algorithmTest 3648                            ??i2___lwdiv 000A  
                          ??i2___lwmod 0005                         __size_of_putch 0010  
                          __size_of_ID 0156                            __size_of_UI 08A6  
                  __size_of_sensorTest 02FE             __end_ofi2_I2C_Master_Start 4ADC  
           __end_ofi2_I2C_Master_Write 4AB4                            ??i2_lcdInst 0003  
                       ___wmul@product 0084                               _LATAbits 000F89  
                             _LATCbits 000F8B                               _LATDbits 000F8C  
                             _LATEbits 000F8D                           _inputHandler 2D44  
                          ??i2_isdigit 0001                           BlockerTest@i 00AC  
                             i2u443_40 1A52                               _PIR2bits 000FA1  
                             i2u443_47 1A48                               i2u447_40 1AB2  
                             i2u447_47 1AA8                               i2u730_40 2A96  
                             i2u388_40 4970                               i2u488_40 25B0  
                             i2u880_47 430E                               i2u881_47 4318  
                             i2u877_47 2D82                               i2u878_47 42E2  
                             i2u879_47 42EC                    __size_of_updateMenu 02C0  
                       _log_completion 00EC                       __CFG_WDTPS$32768 000000  
                           ?_lcdNibble 0001                              _was_low_1 0079  
                            _was_low_3 007B                          ??_retrieveLog 0009  
                           _ADCON0bits 000FC2                      ___wmul@multiplier 0080  
                            _startTime 010E                               i2___wmul 492C  
                        lcdNibble@data 0081                               i2_getRTC 3FB0  
                           printf@flag 00A7                          lcdNibble@temp 0080  
                           printf@prec 009E                               Loading@i 00BA  
                             i2_printf 192C                               i2_strcpy 45EE  
                       ?_algorithmTest 0001                    I2C_Master_Read@temp 0082  
                            copy_data0 4386                              readIR@res 0084  
                     __size_ofi2_putch 000C                             _EECON1bits 000FA6  
                __end_ofi2_EEPROM_read 4A42                            _count_total 00FE  
                     ??_initGlobalVars 0080                               __Hrparam 0000  
                     __size_of_Loading 01EE                              initTime@h 0081  
                            initTime@m 0080                              initTime@s 0086  
                            initTime@w 0082                               __Lrparam 0000  
                   __CFG_BOREN$SBORDIS 000000                              logRun@num 00B1  
                          ??_SpeedTest 00AB                  __end_of_initSortTimer 3B94  
                         ??_initServos 0088                            ??_PortTests 0080  
                     __size_of___awdiv 00BE                       __size_of___awmod 00A2  
              _change_state_to_menu_11 46B0             ?i2_change_state_to_menu_12 0001  
              _change_state_to_menu_12 4518             ?i2_change_state_to_menu_22 0001  
              _change_state_to_menu_22 44E0                _change_state_to_menu_23 4680  
                i2___wmul@multiplicand 0003                       __size_of___lldiv 00BC  
                     __size_of___lwdiv 0078                _change_state_to_logs_11 47A0  
              _change_state_to_logs_12 4770                _change_state_to_logs_22 4740  
              _change_state_to_logs_23 482C                _change_state_to_logs_33 4710  
              _change_state_to_logs_34 46E0                       __size_of___lwmod 0062  
                       readADC@channel 0081                     i2I2C_Master_Read@a 0002  
                     __size_of_lcdInst 0010                       __size_of_handler 3090  
                           _EEPROMTest 4ADC                        _I2C_Master_Init 4158  
                     __size_of_readADC 002C                        _I2C_Master_Read 47FE  
                     __size_of_initLCD 0046                           _f_ID_receive 0067  
                     __size_of_loadRTC 008C                       __size_of_readMAG 004C  
                      _I2C_Master_Wait 4A42                        _I2C_Master_Stop 4ABC  
                      BlockerTest@flag 00AE                       __size_of_isdigit 002A  
                             _delay_ms 48DC                         _printSortTimer 2964  
                      ___lwdiv@divisor 0082                        ___lwdiv@counter 0086  
                  __end_of_retrieveLog 3450                               __ptext10 3098  
                             __ptext11 2758                               __ptext20 485A  
                             __ptext12 41B8                               __ptext21 49BE  
                             __ptext13 31EE                               __ptext30 47FE  
                             __ptext22 4458                               __ptext14 3564  
                             __ptext31 4A42                               __ptext23 08CA  
                             __ptext15 49FE                               __ptext40 3648  
                             __ptext32 44E0                               __ptext24 1F98  
                             __ptext16 47D0                               __ptext41 0012  
                             __ptext33 4518                               __ptext25 4550  
                             __ptext17 3C36                               __ptext50 37E8  
                             __ptext42 3D48                               __ptext34 3B94  
                             __ptext26 3CC2                               __ptext18 4158  
                             __ptext51 1170                               __ptext43 371E  
                             __ptext35 3970                               __ptext27 4AA0  
                             __ptext19 3A2E                               __ptext60 2262  
                             __ptext52 4A68                               __ptext44 3DCC  
                             __ptext36 3450                               __ptext28 4ABC  
                             __ptext61 4904                               __ptext53 48B2  
                             __ptext45 4214                               __ptext37 1C9A  
                             __ptext29 4AC4                               __ptext70 4710  
                             __ptext62 2522                               __ptext54 4586  
                             __ptext46 4ADC                               __ptext38 440C  
                             __ptext71 482C                               __ptext63 45EE  
                             __ptext55 40F6                               __ptext47 15A8  
                             __ptext39 4886                               __ptext80 4A88  
                             __ptext72 4740                               __ptext64 2D44  
                             __ptext56 3E50                               __ptext48 4270  
                             __ptext81 49E0                               __ptext73 4770  
                             __ptext65 4620                               __ptext57 4A78  
                             __ptext49 3EC8                               __ptext90 4AD4  
                             __ptext82 492C                               __ptext74 47A0  
                             __ptext66 4650                               __ptext58 408E  
                             __ptext91 4952                               __ptext83 449E  
                             __ptext75 4978                               __ptext67 4680  
                             __ptext92 4A56                               __ptext84 4320  
                             __ptext76 332E                               __ptext68 46B0  
                             __ptext85 4A94                               __ptext77 4A2C  
                             __ptext69 46E0                               __ptext86 42CA  
                             __ptext78 2964                               __ptext87 3FB0  
                             __ptext79 192C                               __ptext88 4AAA  
                             __ptext89 4ACC                               _dispLogs 4978  
                        ?_actuatorTest 0001                          ??_stopSignals 0080  
                           strcpy@from 0082                         i2_isdigit$1960 0002  
                   __end_of_initServos 42CA                          __size_of_Test 0114  
                        ?_EEPROM_write 00AB                               _initTime 49BE  
                        __size_of_main 00C0                          __size_of_sort 0022  
       ??i2_change_state_to_menu_start 0043                               _logstate 00F6  
                  _updateServoPosition 3EC8                 __size_of_machineConfig 005C  
                        ??i2_lcdNibble 0001                               _printRTC 1F98  
                          ??_lcdNibble 0080                              printRTC@i 00C2  
                             int$flags 007E                           ??_sensorTest 00AB  
                       _log_total_time 00F4                     _f_can_coming_to_ID 0069  
                            printf@len 00A3                              printf@val 00A5  
    __end_ofi2_change_state_to_menu_12 4680      __end_ofi2_change_state_to_menu_22 4650  
                             loadRTC@i 0096                 __end_of_printSortTimer 2B56  
                            putch@data 0082               __end_of_I2C_Master_Start 4ACC  
                          _OSCTUNEbits 000F9B               __end_of_I2C_Master_Write 4AAA  
                           _INTCONbits 000FF2                   ?_updateServoPosition 0080  
                         ??_updateMenu 0043                        ??_algorithmTest 00AB  
                           _MAG_signal 00E0                               isdigit@c 0082  
                        sensorTest@res 00AD                         ??_actuatorTest 00AB  
                             intlevel2 0000                         ??_EEPROM_write 00AE  
                   __end_of_sensorTest 1F98                       ___lwmod@dividend 0087  
                     ___lldiv@dividend 0080                           ?_EEPROM_read 0080  
                  __end_of_stopSignals 4A2C              ??_change_state_to_menu_11 002A  
            ??_change_state_to_menu_12 00AB              ??_change_state_to_menu_22 00AB  
            ??_change_state_to_menu_23 002A              ??_change_state_to_logs_11 002A  
            ??_change_state_to_logs_12 002A              ??_change_state_to_logs_22 002A  
            ??_change_state_to_logs_23 002A              ??_change_state_to_logs_33 002A  
            ??_change_state_to_logs_34 002A                               printf@ap 00A1  
                             printf@cp 009F                     __end_of_updateMenu 2522  
              __end_of_I2C_Master_Init 41B8                __end_of_I2C_Master_Read 482C  
              __end_of_I2C_Master_Wait 4A56                          ??_BlockerTest 00AB  
              __end_of_I2C_Master_Stop 4AC4                            lcdInst@data 0082  
                        printRTC@F3217 0137                           retrieveLog@i 000E  
                          _retrieveLog 332E                    __end_ofi2_lcdNibble 4320  
                ??_updateServoPosition 0084                        ?_printSortTimer 0001  
                     ___lldiv@quotient 0088                      I2C_Master_Write@d 0081  
                          ?_EEPROMTest 0001                        ___lwmod@divisor 0089  
                    _f_can_distributed 012F                               strcpy@cp 0084  
                             strcpy@to 0080                          _machineConfig 41B8  
                      ___lwmod@counter 008B                          printRTC@month 00BE  
                        ?_Distribution 0001                          _machine_state 00FC  
                        dispLogs@myLog 0012                     i2printRTC@INT_time 002D  
