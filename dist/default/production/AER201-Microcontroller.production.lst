

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Thu Feb 23 21:26:12 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1
    40                           	psect	text24,global,reloc=2,class=CODE,delta=1
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1
    42                           	psect	text26,global,reloc=2,class=CODE,delta=1
    43                           	psect	text27,global,reloc=2,class=CODE,delta=1
    44                           	psect	text28,global,reloc=2,class=CODE,delta=1
    45                           	psect	text29,global,reloc=2,class=CODE,delta=1
    46                           	psect	text30,global,reloc=2,class=CODE,delta=1
    47                           	psect	text31,global,reloc=2,class=CODE,delta=1
    48                           	psect	text32,global,reloc=2,class=CODE,delta=1
    49                           	psect	text33,global,reloc=2,class=CODE,delta=1
    50                           	psect	text34,global,reloc=2,class=CODE,delta=1
    51                           	psect	text35,global,reloc=2,class=CODE,delta=1
    52                           	psect	text36,global,reloc=2,class=CODE,delta=1
    53                           	psect	text37,global,reloc=2,class=CODE,delta=1
    54                           	psect	text38,global,reloc=2,class=CODE,delta=1
    55                           	psect	text39,global,reloc=2,class=CODE,delta=1
    56                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    57                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    58                           	psect	text41,global,reloc=2,class=CODE,delta=1
    59                           	psect	text42,global,reloc=2,class=CODE,delta=1
    60                           	psect	text43,global,reloc=2,class=CODE,delta=1
    61                           	psect	text44,global,reloc=2,class=CODE,delta=1
    62                           	psect	text45,global,reloc=2,class=CODE,delta=1
    63                           	psect	text46,global,reloc=2,class=CODE,delta=1
    64                           	psect	text47,global,reloc=2,class=CODE,delta=1
    65                           	psect	text48,global,reloc=2,class=CODE,delta=1
    66                           	psect	text49,global,reloc=2,class=CODE,delta=1
    67                           	psect	text50,global,reloc=2,class=CODE,delta=1
    68                           	psect	text51,global,reloc=2,class=CODE,delta=1
    69                           	psect	text52,global,reloc=2,class=CODE,delta=1
    70                           	psect	text53,global,reloc=2,class=CODE,delta=1
    71                           	psect	text54,global,reloc=2,class=CODE,delta=1
    72                           	psect	text55,global,reloc=2,class=CODE,delta=1
    73                           	psect	text56,global,reloc=2,class=CODE,delta=1
    74                           	psect	text57,global,reloc=2,class=CODE,delta=1
    75                           	psect	text58,global,reloc=2,class=CODE,delta=1
    76                           	psect	text59,global,reloc=2,class=CODE,delta=1
    77                           	psect	text60,global,reloc=2,class=CODE,delta=1
    78                           	psect	text61,global,reloc=2,class=CODE,delta=1
    79                           	psect	text62,global,reloc=2,class=CODE,delta=1
    80                           	psect	text63,global,reloc=2,class=CODE,delta=1
    81                           	psect	text64,global,reloc=2,class=CODE,delta=1
    82                           	psect	text65,global,reloc=2,class=CODE,delta=1
    83                           	psect	text66,global,reloc=2,class=CODE,delta=1
    84                           	psect	text67,global,reloc=2,class=CODE,delta=1
    85                           	psect	text68,global,reloc=2,class=CODE,delta=1
    86                           	psect	text69,global,reloc=2,class=CODE,delta=1
    87                           	psect	text70,global,reloc=2,class=CODE,delta=1
    88                           	psect	text71,global,reloc=2,class=CODE,delta=1
    89                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    90                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    91                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    92  0000                     
    93                           ; Version 1.40
    94                           ; Generated 01/12/2016 GMT
    95                           ; 
    96                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    97                           ; All rights reserved.
    98                           ; 
    99                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   100                           ; 
   101                           ; Redistribution and use in source and binary forms, with or without modification, are
   102                           ; permitted provided that the following conditions are met:
   103                           ; 
   104                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   105                           ;        conditions and the following disclaimer.
   106                           ; 
   107                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   108                           ;        of conditions and the following disclaimer in the documentation and/or other
   109                           ;        materials provided with the distribution.
   110                           ; 
   111                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   112                           ;        software without specific prior written permission.
   113                           ; 
   114                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   115                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   116                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   117                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   118                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   119                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   120                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   121                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   122                           ; 
   123                           ; 
   124                           ; Code-generator required, PIC18F4620 Definitions
   125                           ; 
   126                           ; SFR Addresses
   127  0000                     
   128                           	psect	idataCOMRAM
   129  002962                     __pidataCOMRAM:
   130                           	opt stack 0
   131                           
   132                           ;initializer for _timer1_20ms_high
   133  002962  00B1               	dw	177
   134                           
   135                           ;initializer for _timer1_20ms_low
   136  002964  00E0               	dw	224
   137                           
   138                           	psect	idataBANK0
   139  00293A                     __pidataBANK0:
   140                           	opt stack 0
   141                           
   142                           ;initializer for printRTC@F3188
   143  00293A  4D                 	db	77
   144  00293B  4D                 	db	77
   145  00293C  4D                 	db	77
   146  00293D  00                 	db	0
   147                           
   148                           ;initializer for _f_ID_receive
   149  00293E  0001               	dw	1
   150                           
   151                           ;initializer for _first
   152  002940  0001               	dw	1
   153                           
   154                           	psect	mediumconst
   155  00FDB4                     __pmediumconst:
   156                           	opt stack 0
   157  00FDB4  00                 	db	0
   158  00FDB5                     _keys:
   159                           	opt stack 0
   160  00FDB5  31                 	db	49
   161  00FDB6  32                 	db	50
   162  00FDB7  33                 	db	51
   163  00FDB8  41                 	db	65
   164  00FDB9  34                 	db	52
   165  00FDBA  35                 	db	53
   166  00FDBB  36                 	db	54
   167  00FDBC  42                 	db	66
   168  00FDBD  37                 	db	55
   169  00FDBE  38                 	db	56
   170  00FDBF  39                 	db	57
   171  00FDC0  43                 	db	67
   172  00FDC1  2A                 	db	42
   173  00FDC2  30                 	db	48
   174  00FDC3  23                 	db	35
   175  00FDC4  44                 	db	68
   176  00FDC5  00                 	db	0
   177  00FDC6                     __end_of_keys:
   178                           	opt stack 0
   179  00FDC6                     _dpowers:
   180                           	opt stack 0
   181  00FDC6  0001               	dw	1
   182  00FDC8  000A               	dw	10
   183  00FDCA  0064               	dw	100
   184  00FDCC  03E8               	dw	1000
   185  00FDCE  2710               	dw	10000
   186  00FDD0                     __end_of_dpowers:
   187                           	opt stack 0
   188  0000                     _ADCON0	set	4034
   189  0000                     _ADCON0bits	set	4034
   190  0000                     _ADCON1	set	4033
   191  0000                     _CMCONbits	set	4020
   192  0000                     _CVRCON	set	4021
   193  0000                     _INTCONbits	set	4082
   194  0000                     _LATA	set	3977
   195  0000                     _LATAbits	set	3977
   196  0000                     _LATB	set	3978
   197  0000                     _LATC	set	3979
   198  0000                     _LATCbits	set	3979
   199  0000                     _LATD	set	3980
   200  0000                     _LATDbits	set	3980
   201  0000                     _LATE	set	3981
   202  0000                     _OSCCON	set	4051
   203  0000                     _OSCTUNEbits	set	3995
   204  0000                     _PORTAbits	set	3968
   205  0000                     _PORTB	set	3969
   206  0000                     _PORTBbits	set	3969
   207  0000                     _SSPADD	set	4040
   208  0000                     _SSPBUF	set	4041
   209  0000                     _SSPCON1	set	4038
   210  0000                     _SSPCON2	set	4037
   211  0000                     _SSPSTAT	set	4039
   212  0000                     _T0CON	set	4053
   213  0000                     _T1CON	set	4045
   214  0000                     _T3CON	set	4017
   215  0000                     _TMR0H	set	4055
   216  0000                     _TMR0L	set	4054
   217  0000                     _TMR1H	set	4047
   218  0000                     _TMR1L	set	4046
   219  0000                     _TMR3H	set	4019
   220  0000                     _TMR3L	set	4018
   221  0000                     _TRISA	set	3986
   222  0000                     _TRISB	set	3987
   223  0000                     _TRISC	set	3988
   224  0000                     _TRISD	set	3989
   225  0000                     _TRISE	set	3990
   226  0000                     _ACKDT	set	32301
   227  0000                     _ACKEN	set	32300
   228  0000                     _ADFM	set	32263
   229  0000                     _ADON	set	32272
   230  0000                     _INT1IE	set	32643
   231  0000                     _INT1IF	set	32640
   232  0000                     _PEIE	set	32662
   233  0000                     _PEN	set	32298
   234  0000                     _RCEN	set	32299
   235  0000                     _RSEN	set	32297
   236  0000                     _SEN	set	32296
   237  0000                     _TMR0IE	set	32661
   238  0000                     _TMR0IF	set	32658
   239  0000                     _TMR0ON	set	32431
   240  0000                     _TMR1IE	set	31976
   241  0000                     _TMR1IF	set	31984
   242  0000                     _TMR1ON	set	32360
   243  0000                     _TMR2IE	set	31977
   244  0000                     _TMR3IE	set	32001
   245  0000                     _TMR3ON	set	32136
   246  0000                     _TRISC3	set	31907
   247  0000                     _TRISC4	set	31908
   248  00FDD0                     STR_48:
   249  00FDD0  25                 	db	37
   250  00FDD1  30                 	db	48	;'0'
   251  00FDD2  32                 	db	50	;'2'
   252  00FDD3  64                 	db	100	;'d'
   253  00FDD4  25                 	db	37
   254  00FDD5  73                 	db	115	;'s'
   255  00FDD6  20                 	db	32
   256  00FDD7  7C                 	db	124
   257  00FDD8  20                 	db	32
   258  00FDD9  25                 	db	37
   259  00FDDA  30                 	db	48	;'0'
   260  00FDDB  32                 	db	50	;'2'
   261  00FDDC  64                 	db	100	;'d'
   262  00FDDD  3A                 	db	58	;':'
   263  00FDDE  25                 	db	37
   264  00FDDF  30                 	db	48	;'0'
   265  00FDE0  32                 	db	50	;'2'
   266  00FDE1  64                 	db	100	;'d'
   267  00FDE2  3A                 	db	58	;':'
   268  00FDE3  25                 	db	37
   269  00FDE4  30                 	db	48	;'0'
   270  00FDE5  32                 	db	50	;'2'
   271  00FDE6  64                 	db	100	;'d'
   272  00FDE7  00                 	db	0
   273  00FDE8                     STR_2:
   274  00FDE8  54                 	db	84	;'T'
   275  00FDE9  69                 	db	105	;'i'
   276  00FDEA  6D                 	db	109	;'m'
   277  00FDEB  65                 	db	101	;'e'
   278  00FDEC  3A                 	db	58	;':'
   279  00FDED  20                 	db	32
   280  00FDEE  25                 	db	37
   281  00FDEF  30                 	db	48	;'0'
   282  00FDF0  32                 	db	50	;'2'
   283  00FDF1  64                 	db	100	;'d'
   284  00FDF2  3A                 	db	58	;':'
   285  00FDF3  25                 	db	37
   286  00FDF4  30                 	db	48	;'0'
   287  00FDF5  32                 	db	50	;'2'
   288  00FDF6  64                 	db	100	;'d'
   289  00FDF7  3A                 	db	58	;':'
   290  00FDF8  25                 	db	37
   291  00FDF9  30                 	db	48	;'0'
   292  00FDFA  32                 	db	50	;'2'
   293  00FDFB  64                 	db	100	;'d'
   294  00FDFC  00                 	db	0
   295  00FDFD                     STR_3:
   296  00FDFD  2D                 	db	45
   297  00FDFE  2D                 	db	45
   298  00FDFF  20                 	db	32
   299  00FE00  4C                 	db	76	;'L'
   300  00FE01  6F                 	db	111	;'o'
   301  00FE02  67                 	db	103	;'g'
   302  00FE03  20                 	db	32
   303  00FE04  25                 	db	37
   304  00FE05  32                 	db	50	;'2'
   305  00FE06  64                 	db	100	;'d'
   306  00FE07  20                 	db	32
   307  00FE08  68                 	db	104	;'h'
   308  00FE09  65                 	db	101	;'e'
   309  00FE0A  72                 	db	114	;'r'
   310  00FE0B  65                 	db	101	;'e'
   311  00FE0C  2D                 	db	45
   312  00FE0D  2D                 	db	45
   313  00FE0E  00                 	db	0
   314  00FE0F                     STR_8:
   315  00FE0F  25                 	db	37
   316  00FE10  64                 	db	100	;'d'
   317  00FE11  20                 	db	32
   318  00FE12  6D                 	db	109	;'m'
   319  00FE13  69                 	db	105	;'i'
   320  00FE14  6E                 	db	110	;'n'
   321  00FE15  28                 	db	40
   322  00FE16  73                 	db	115	;'s'
   323  00FE17  29                 	db	41
   324  00FE18  20                 	db	32
   325  00FE19  25                 	db	37
   326  00FE1A  64                 	db	100	;'d'
   327  00FE1B  20                 	db	32
   328  00FE1C  73                 	db	115	;'s'
   329  00FE1D  65                 	db	101	;'e'
   330  00FE1E  63                 	db	99	;'c'
   331  00FE1F  73                 	db	115	;'s'
   332  00FE20  00                 	db	0
   333  00FE21                     STR_26:
   334  00FE21  4C                 	db	76	;'L'
   335  00FE22  4F                 	db	79	;'O'
   336  00FE23  47                 	db	71	;'G'
   337  00FE24  20                 	db	32
   338  00FE25  31                 	db	49	;'1'
   339  00FE26  20                 	db	32
   340  00FE27  20                 	db	32
   341  00FE28  20                 	db	32
   342  00FE29  20                 	db	32
   343  00FE2A  20                 	db	32
   344  00FE2B  20                 	db	32
   345  00FE2C  20                 	db	32
   346  00FE2D  20                 	db	32
   347  00FE2E  20                 	db	32
   348  00FE2F  20                 	db	32
   349  00FE30  20                 	db	32
   350  00FE31  00                 	db	0
   351  00FE32                     STR_25:
   352  00FE32  4C                 	db	76	;'L'
   353  00FE33  4F                 	db	79	;'O'
   354  00FE34  47                 	db	71	;'G'
   355  00FE35  20                 	db	32
   356  00FE36  32                 	db	50	;'2'
   357  00FE37  20                 	db	32
   358  00FE38  20                 	db	32
   359  00FE39  20                 	db	32
   360  00FE3A  20                 	db	32
   361  00FE3B  20                 	db	32
   362  00FE3C  20                 	db	32
   363  00FE3D  20                 	db	32
   364  00FE3E  20                 	db	32
   365  00FE3F  20                 	db	32
   366  00FE40  20                 	db	32
   367  00FE41  20                 	db	32
   368  00FE42  00                 	db	0
   369  00FE43                     STR_29:
   370  00FE43  4C                 	db	76	;'L'
   371  00FE44  4F                 	db	79	;'O'
   372  00FE45  47                 	db	71	;'G'
   373  00FE46  20                 	db	32
   374  00FE47  33                 	db	51	;'3'
   375  00FE48  20                 	db	32
   376  00FE49  20                 	db	32
   377  00FE4A  20                 	db	32
   378  00FE4B  20                 	db	32
   379  00FE4C  20                 	db	32
   380  00FE4D  20                 	db	32
   381  00FE4E  20                 	db	32
   382  00FE4F  20                 	db	32
   383  00FE50  20                 	db	32
   384  00FE51  20                 	db	32
   385  00FE52  20                 	db	32
   386  00FE53  00                 	db	0
   387  00FE54                     STR_33:
   388  00FE54  4C                 	db	76	;'L'
   389  00FE55  4F                 	db	79	;'O'
   390  00FE56  47                 	db	71	;'G'
   391  00FE57  20                 	db	32
   392  00FE58  34                 	db	52	;'4'
   393  00FE59  20                 	db	32
   394  00FE5A  20                 	db	32
   395  00FE5B  20                 	db	32
   396  00FE5C  20                 	db	32
   397  00FE5D  20                 	db	32
   398  00FE5E  20                 	db	32
   399  00FE5F  20                 	db	32
   400  00FE60  20                 	db	32
   401  00FE61  20                 	db	32
   402  00FE62  20                 	db	32
   403  00FE63  20                 	db	32
   404  00FE64  00                 	db	0
   405  00FE65                     STR_21:
   406  00FE65  33                 	db	51	;'3'
   407  00FE66  2E                 	db	46
   408  00FE67  20                 	db	32
   409  00FE68  4C                 	db	76	;'L'
   410  00FE69  4F                 	db	79	;'O'
   411  00FE6A  47                 	db	71	;'G'
   412  00FE6B  53                 	db	83	;'S'
   413  00FE6C  20                 	db	32
   414  00FE6D  20                 	db	32
   415  00FE6E  20                 	db	32
   416  00FE6F  20                 	db	32
   417  00FE70  20                 	db	32
   418  00FE71  20                 	db	32
   419  00FE72  20                 	db	32
   420  00FE73  20                 	db	32
   421  00FE74  20                 	db	32
   422  00FE75  00                 	db	0
   423  00FE76                     STR_17:
   424  00FE76  32                 	db	50	;'2'
   425  00FE77  2E                 	db	46
   426  00FE78  20                 	db	32
   427  00FE79  53                 	db	83	;'S'
   428  00FE7A  4F                 	db	79	;'O'
   429  00FE7B  52                 	db	82	;'R'
   430  00FE7C  54                 	db	84	;'T'
   431  00FE7D  20                 	db	32
   432  00FE7E  20                 	db	32
   433  00FE7F  20                 	db	32
   434  00FE80  20                 	db	32
   435  00FE81  20                 	db	32
   436  00FE82  20                 	db	32
   437  00FE83  20                 	db	32
   438  00FE84  20                 	db	32
   439  00FE85  20                 	db	32
   440  00FE86  00                 	db	0
   441  00FE87                     STR_18:
   442  00FE87  31                 	db	49	;'1'
   443  00FE88  2E                 	db	46
   444  00FE89  20                 	db	32
   445  00FE8A  44                 	db	68	;'D'
   446  00FE8B  41                 	db	65	;'A'
   447  00FE8C  54                 	db	84	;'T'
   448  00FE8D  45                 	db	69	;'E'
   449  00FE8E  2F                 	db	47
   450  00FE8F  54                 	db	84	;'T'
   451  00FE90  49                 	db	73	;'I'
   452  00FE91  4D                 	db	77	;'M'
   453  00FE92  45                 	db	69	;'E'
   454  00FE93  20                 	db	32
   455  00FE94  20                 	db	32
   456  00FE95  20                 	db	32
   457  00FE96  20                 	db	32
   458  00FE97  00                 	db	0
   459  00FE98                     STR_9:
   460  00FE98  20                 	db	32
   461  00FE99  2D                 	db	45
   462  00FE9A  2D                 	db	45
   463  00FE9B  20                 	db	32
   464  00FE9C  50                 	db	80	;'P'
   465  00FE9D  6F                 	db	111	;'o'
   466  00FE9E  70                 	db	112	;'p'
   467  00FE9F  20                 	db	32
   468  00FEA0  20                 	db	32
   469  00FEA1  63                 	db	99	;'c'
   470  00FEA2  61                 	db	97	;'a'
   471  00FEA3  6E                 	db	110	;'n'
   472  00FEA4  20                 	db	32
   473  00FEA5  2D                 	db	45
   474  00FEA6  2D                 	db	45
   475  00FEA7  20                 	db	32
   476  00FEA8  00                 	db	0
   477  00FEA9                     STR_11:
   478  00FEA9  20                 	db	32
   479  00FEAA  2D                 	db	45
   480  00FEAB  2D                 	db	45
   481  00FEAC  20                 	db	32
   482  00FEAD  53                 	db	83	;'S'
   483  00FEAE  6F                 	db	111	;'o'
   484  00FEAF  75                 	db	117	;'u'
   485  00FEB0  70                 	db	112	;'p'
   486  00FEB1  20                 	db	32
   487  00FEB2  63                 	db	99	;'c'
   488  00FEB3  61                 	db	97	;'a'
   489  00FEB4  6E                 	db	110	;'n'
   490  00FEB5  20                 	db	32
   491  00FEB6  2D                 	db	45
   492  00FEB7  2D                 	db	45
   493  00FEB8  20                 	db	32
   494  00FEB9  00                 	db	0
   495  00FEBA                     STR_1:
   496  00FEBA  21                 	db	33
   497  00FEBB  53                 	db	83	;'S'
   498  00FEBC  4F                 	db	79	;'O'
   499  00FEBD  52                 	db	82	;'R'
   500  00FEBE  54                 	db	84	;'T'
   501  00FEBF  20                 	db	32
   502  00FEC0  43                 	db	67	;'C'
   503  00FEC1  4F                 	db	79	;'O'
   504  00FEC2  4E                 	db	78	;'N'
   505  00FEC3  43                 	db	67	;'C'
   506  00FEC4  4C                 	db	76	;'L'
   507  00FEC5  55                 	db	85	;'U'
   508  00FEC6  44                 	db	68	;'D'
   509  00FEC7  45                 	db	69	;'E'
   510  00FEC8  44                 	db	68	;'D'
   511  00FEC9  21                 	db	33
   512  00FECA  00                 	db	0
   513  00FECB                     STR_13:
   514  00FECB  2D                 	db	45
   515  00FECC  2D                 	db	45
   516  00FECD  20                 	db	32
   517  00FECE  54                 	db	84	;'T'
   518  00FECF  6F                 	db	111	;'o'
   519  00FED0  74                 	db	116	;'t'
   520  00FED1  61                 	db	97	;'a'
   521  00FED2  6C                 	db	108	;'l'
   522  00FED3  20                 	db	32
   523  00FED4  63                 	db	99	;'c'
   524  00FED5  61                 	db	97	;'a'
   525  00FED6  6E                 	db	110	;'n'
   526  00FED7  73                 	db	115	;'s'
   527  00FED8  20                 	db	32
   528  00FED9  2D                 	db	45
   529  00FEDA  2D                 	db	45
   530  00FEDB  00                 	db	0
   531  00FEDC                     STR_10:
   532  00FEDC  4E                 	db	78	;'N'
   533  00FEDD  6F                 	db	111	;'o'
   534  00FEDE  20                 	db	32
   535  00FEDF  74                 	db	116	;'t'
   536  00FEE0  61                 	db	97	;'a'
   537  00FEE1  62                 	db	98	;'b'
   538  00FEE2  3A                 	db	58	;':'
   539  00FEE3  20                 	db	32
   540  00FEE4  39                 	db	57	;'9'
   541  00FEE5  7C                 	db	124
   542  00FEE6  54                 	db	84	;'T'
   543  00FEE7  61                 	db	97	;'a'
   544  00FEE8  62                 	db	98	;'b'
   545  00FEE9  3A                 	db	58	;':'
   546  00FEEA  20                 	db	32
   547  00FEEB  31                 	db	49	;'1'
   548  00FEEC  00                 	db	0
   549  00FEED                     STR_12:
   550  00FEED  4E                 	db	78	;'N'
   551  00FEEE  6F                 	db	111	;'o'
   552  00FEEF  20                 	db	32
   553  00FEF0  6C                 	db	108	;'l'
   554  00FEF1  62                 	db	98	;'b'
   555  00FEF2  6C                 	db	108	;'l'
   556  00FEF3  3A                 	db	58	;':'
   557  00FEF4  20                 	db	32
   558  00FEF5  31                 	db	49	;'1'
   559  00FEF6  7C                 	db	124
   560  00FEF7  6C                 	db	108	;'l'
   561  00FEF8  62                 	db	98	;'b'
   562  00FEF9  6C                 	db	108	;'l'
   563  00FEFA  3A                 	db	58	;':'
   564  00FEFB  20                 	db	32
   565  00FEFC  31                 	db	49	;'1'
   566  00FEFD  00                 	db	0
   567  00FEFE                     STR_6:
   568  00FEFE  30                 	db	48	;'0'
   569  00FEFF  36                 	db	54	;'6'
   570  00FF00  46                 	db	70	;'F'
   571  00FF01  65                 	db	101	;'e'
   572  00FF02  62                 	db	98	;'b'
   573  00FF03  20                 	db	32
   574  00FF04  7C                 	db	124
   575  00FF05  20                 	db	32
   576  00FF06  30                 	db	48	;'0'
   577  00FF07  31                 	db	49	;'1'
   578  00FF08  3A                 	db	58	;':'
   579  00FF09  30                 	db	48	;'0'
   580  00FF0A  38                 	db	56	;'8'
   581  00FF0B  3A                 	db	58	;':'
   582  00FF0C  35                 	db	53	;'5'
   583  00FF0D  36                 	db	54	;'6'
   584  00FF0E  00                 	db	0
   585  00FF0F                     STR_24:
   586  00FF0F  4C                 	db	76	;'L'
   587  00FF10  4F                 	db	79	;'O'
   588  00FF11  47                 	db	71	;'G'
   589  00FF12  20                 	db	32
   590  00FF13  31                 	db	49	;'1'
   591  00FF14  20                 	db	32
   592  00FF15  20                 	db	32
   593  00FF16  20                 	db	32
   594  00FF17  20                 	db	32
   595  00FF18  20                 	db	32
   596  00FF19  20                 	db	32
   597  00FF1A  20                 	db	32
   598  00FF1B  20                 	db	32
   599  00FF1C  20                 	db	32
   600  00FF1D  20                 	db	32
   601  00FF1E  3C                 	db	60	;'<'
   602  00FF1F  00                 	db	0
   603  00FF20                     STR_27:
   604  00FF20  4C                 	db	76	;'L'
   605  00FF21  4F                 	db	79	;'O'
   606  00FF22  47                 	db	71	;'G'
   607  00FF23  20                 	db	32
   608  00FF24  32                 	db	50	;'2'
   609  00FF25  20                 	db	32
   610  00FF26  20                 	db	32
   611  00FF27  20                 	db	32
   612  00FF28  20                 	db	32
   613  00FF29  20                 	db	32
   614  00FF2A  20                 	db	32
   615  00FF2B  20                 	db	32
   616  00FF2C  20                 	db	32
   617  00FF2D  20                 	db	32
   618  00FF2E  20                 	db	32
   619  00FF2F  3C                 	db	60	;'<'
   620  00FF30  00                 	db	0
   621  00FF31                     STR_31:
   622  00FF31  4C                 	db	76	;'L'
   623  00FF32  4F                 	db	79	;'O'
   624  00FF33  47                 	db	71	;'G'
   625  00FF34  20                 	db	32
   626  00FF35  33                 	db	51	;'3'
   627  00FF36  20                 	db	32
   628  00FF37  20                 	db	32
   629  00FF38  20                 	db	32
   630  00FF39  20                 	db	32
   631  00FF3A  20                 	db	32
   632  00FF3B  20                 	db	32
   633  00FF3C  20                 	db	32
   634  00FF3D  20                 	db	32
   635  00FF3E  20                 	db	32
   636  00FF3F  20                 	db	32
   637  00FF40  3C                 	db	60	;'<'
   638  00FF41  00                 	db	0
   639  00FF42                     STR_35:
   640  00FF42  4C                 	db	76	;'L'
   641  00FF43  4F                 	db	79	;'O'
   642  00FF44  47                 	db	71	;'G'
   643  00FF45  20                 	db	32
   644  00FF46  34                 	db	52	;'4'
   645  00FF47  20                 	db	32
   646  00FF48  20                 	db	32
   647  00FF49  20                 	db	32
   648  00FF4A  20                 	db	32
   649  00FF4B  20                 	db	32
   650  00FF4C  20                 	db	32
   651  00FF4D  20                 	db	32
   652  00FF4E  20                 	db	32
   653  00FF4F  20                 	db	32
   654  00FF50  20                 	db	32
   655  00FF51  3C                 	db	60	;'<'
   656  00FF52  00                 	db	0
   657  00FF53                     STR_23:
   658  00FF53  33                 	db	51	;'3'
   659  00FF54  2E                 	db	46
   660  00FF55  20                 	db	32
   661  00FF56  4C                 	db	76	;'L'
   662  00FF57  4F                 	db	79	;'O'
   663  00FF58  47                 	db	71	;'G'
   664  00FF59  53                 	db	83	;'S'
   665  00FF5A  20                 	db	32
   666  00FF5B  20                 	db	32
   667  00FF5C  20                 	db	32
   668  00FF5D  20                 	db	32
   669  00FF5E  20                 	db	32
   670  00FF5F  20                 	db	32
   671  00FF60  20                 	db	32
   672  00FF61  20                 	db	32
   673  00FF62  3C                 	db	60	;'<'
   674  00FF63  00                 	db	0
   675  00FF64                     STR_19:
   676  00FF64  32                 	db	50	;'2'
   677  00FF65  2E                 	db	46
   678  00FF66  20                 	db	32
   679  00FF67  53                 	db	83	;'S'
   680  00FF68  4F                 	db	79	;'O'
   681  00FF69  52                 	db	82	;'R'
   682  00FF6A  54                 	db	84	;'T'
   683  00FF6B  20                 	db	32
   684  00FF6C  20                 	db	32
   685  00FF6D  20                 	db	32
   686  00FF6E  20                 	db	32
   687  00FF6F  20                 	db	32
   688  00FF70  20                 	db	32
   689  00FF71  20                 	db	32
   690  00FF72  20                 	db	32
   691  00FF73  3C                 	db	60	;'<'
   692  00FF74  00                 	db	0
   693  00FF75                     STR_16:
   694  00FF75  31                 	db	49	;'1'
   695  00FF76  2E                 	db	46
   696  00FF77  20                 	db	32
   697  00FF78  44                 	db	68	;'D'
   698  00FF79  41                 	db	65	;'A'
   699  00FF7A  54                 	db	84	;'T'
   700  00FF7B  45                 	db	69	;'E'
   701  00FF7C  2F                 	db	47
   702  00FF7D  54                 	db	84	;'T'
   703  00FF7E  49                 	db	73	;'I'
   704  00FF7F  4D                 	db	77	;'M'
   705  00FF80  45                 	db	69	;'E'
   706  00FF81  20                 	db	32
   707  00FF82  20                 	db	32
   708  00FF83  20                 	db	32
   709  00FF84  3C                 	db	60	;'<'
   710  00FF85  00                 	db	0
   711  00FF86                     STR_4:
   712  00FF86  50                 	db	80	;'P'
   713  00FF87  61                 	db	97	;'a'
   714  00FF88  75                 	db	117	;'u'
   715  00FF89  73                 	db	115	;'s'
   716  00FF8A  65                 	db	101	;'e'
   717  00FF8B  3A                 	db	58	;':'
   718  00FF8C  3C                 	db	60	;'<'
   719  00FF8D  20                 	db	32
   720  00FF8E  7C                 	db	124
   721  00FF8F  20                 	db	32
   722  00FF90  42                 	db	66	;'B'
   723  00FF91  61                 	db	97	;'a'
   724  00FF92  63                 	db	99	;'c'
   725  00FF93  6B                 	db	107	;'k'
   726  00FF94  3A                 	db	58	;':'
   727  00FF95  3E                 	db	62	;'>'
   728  00FF96  00                 	db	0
   729  00FF97                     STR_15:
   730  00FF97  50                 	db	80	;'P'
   731  00FF98  55                 	db	85	;'U'
   732  00FF99  53                 	db	83	;'S'
   733  00FF9A  48                 	db	72	;'H'
   734  00FF9B  20                 	db	32
   735  00FF9C  54                 	db	84	;'T'
   736  00FF9D  4F                 	db	79	;'O'
   737  00FF9E  20                 	db	32
   738  00FF9F  43                 	db	67	;'C'
   739  00FFA0  4F                 	db	79	;'O'
   740  00FFA1  4E                 	db	78	;'N'
   741  00FFA2  54                 	db	84	;'T'
   742  00FFA3  49                 	db	73	;'I'
   743  00FFA4  4E                 	db	78	;'N'
   744  00FFA5  55                 	db	85	;'U'
   745  00FFA6  45                 	db	69	;'E'
   746  00FFA7  00                 	db	0
   747  00FFA8                     STR_49:
   748  00FFA8  53                 	db	83	;'S'
   749  00FFA9  6F                 	db	111	;'o'
   750  00FFAA  72                 	db	114	;'r'
   751  00FFAB  74                 	db	116	;'t'
   752  00FFAC  69                 	db	105	;'i'
   753  00FFAD  6E                 	db	110	;'n'
   754  00FFAE  67                 	db	103	;'g'
   755  00FFAF  2E                 	db	46
   756  00FFB0  2E                 	db	46
   757  00FFB1  2E                 	db	46
   758  00FFB2  00                 	db	0
   759  00FFB3                     STR_7:
   760  00FFB3  44                 	db	68	;'D'
   761  00FFB4  75                 	db	117	;'u'
   762  00FFB5  72                 	db	114	;'r'
   763  00FFB6  61                 	db	97	;'a'
   764  00FFB7  74                 	db	116	;'t'
   765  00FFB8  69                 	db	105	;'i'
   766  00FFB9  6F                 	db	111	;'o'
   767  00FFBA  6E                 	db	110	;'n'
   768  00FFBB  3A                 	db	58	;':'
   769  00FFBC  00                 	db	0
   770  00FFBD                     STR_51:
   771  00FFBD  28                 	db	40
   772  00FFBE  6E                 	db	110	;'n'
   773  00FFBF  75                 	db	117	;'u'
   774  00FFC0  6C                 	db	108	;'l'
   775  00FFC1  6C                 	db	108	;'l'
   776  00FFC2  29                 	db	41
   777  00FFC3  00                 	db	0
   778  00FFC4                     STR_5:
   779  00FFC4  53                 	db	83	;'S'
   780  00FFC5  74                 	db	116	;'t'
   781  00FFC6  61                 	db	97	;'a'
   782  00FFC7  72                 	db	114	;'r'
   783  00FFC8  74                 	db	116	;'t'
   784  00FFC9  3A                 	db	58	;':'
   785  00FFCA  00                 	db	0
   786  00FFCB                     STR_37:
   787  00FFCB  46                 	db	70	;'F'
   788  00FFCC  65                 	db	101	;'e'
   789  00FFCD  62                 	db	98	;'b'
   790  00FFCE  00                 	db	0
   791  00FFCF                     STR_47:
   792  00FFCF  44                 	db	68	;'D'
   793  00FFD0  65                 	db	101	;'e'
   794  00FFD1  63                 	db	99	;'c'
   795  00FFD2  00                 	db	0
   796  00FFD3                     STR_43:
   797  00FFD3  41                 	db	65	;'A'
   798  00FFD4  75                 	db	117	;'u'
   799  00FFD5  67                 	db	103	;'g'
   800  00FFD6  00                 	db	0
   801  00FFD7                     STR_42:
   802  00FFD7  4A                 	db	74	;'J'
   803  00FFD8  75                 	db	117	;'u'
   804  00FFD9  6C                 	db	108	;'l'
   805  00FFDA  00                 	db	0
   806  00FFDB                     STR_36:
   807  00FFDB  4A                 	db	74	;'J'
   808  00FFDC  61                 	db	97	;'a'
   809  00FFDD  6E                 	db	110	;'n'
   810  00FFDE  00                 	db	0
   811  00FFDF                     STR_41:
   812  00FFDF  4A                 	db	74	;'J'
   813  00FFE0  75                 	db	117	;'u'
   814  00FFE1  6E                 	db	110	;'n'
   815  00FFE2  00                 	db	0
   816  00FFE3                     STR_44:
   817  00FFE3  53                 	db	83	;'S'
   818  00FFE4  65                 	db	101	;'e'
   819  00FFE5  70                 	db	112	;'p'
   820  00FFE6  00                 	db	0
   821  00FFE7                     STR_38:
   822  00FFE7  4D                 	db	77	;'M'
   823  00FFE8  61                 	db	97	;'a'
   824  00FFE9  72                 	db	114	;'r'
   825  00FFEA  00                 	db	0
   826  00FFEB                     STR_39:
   827  00FFEB  41                 	db	65	;'A'
   828  00FFEC  70                 	db	112	;'p'
   829  00FFED  72                 	db	114	;'r'
   830  00FFEE  00                 	db	0
   831  00FFEF                     STR_45:
   832  00FFEF  4F                 	db	79	;'O'
   833  00FFF0  63                 	db	99	;'c'
   834  00FFF1  74                 	db	116	;'t'
   835  00FFF2  00                 	db	0
   836  00FFF3                     STR_46:
   837  00FFF3  4E                 	db	78	;'N'
   838  00FFF4  6F                 	db	111	;'o'
   839  00FFF5  76                 	db	118	;'v'
   840  00FFF6  00                 	db	0
   841  00FFF7                     STR_40:
   842  00FFF7  4D                 	db	77	;'M'
   843  00FFF8  61                 	db	97	;'a'
   844  00FFF9  79                 	db	121	;'y'
   845  00FFFA  00                 	db	0
   846  00FFFB                     STR_14:
   847  00FFFB  31                 	db	49	;'1'
   848  00FFFC  32                 	db	50	;'2'
   849  00FFFD  00                 	db	0
   850  0000                     
   851                           ; #config settings
   852  00FFFE  00                 	db	0	; dummy byte at the end
   853  0000                     
   854                           	psect	cinit
   855  00208C                     __pcinit:
   856                           	opt stack 0
   857  00208C                     start_initialization:
   858                           	opt stack 0
   859  00208C                     __initialization:
   860                           	opt stack 0
   861                           
   862                           ; Initialize objects allocated to BANK0 (8 bytes)
   863                           ; load TBLPTR registers with __pidataBANK0
   864  00208C  0E3A               	movlw	low __pidataBANK0
   865  00208E  6EF6               	movwf	tblptrl,c
   866  002090  0E29               	movlw	high __pidataBANK0
   867  002092  6EF7               	movwf	tblptrh,c
   868  002094  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   869  002096  6EF8               	movwf	tblptru,c
   870  002098  EE00  F0F2         	lfsr	0,__pdataBANK0
   871  00209C  EE10 F008          	lfsr	1,8
   872  0020A0                     copy_data0:
   873  0020A0  0009               	tblrd		*+
   874  0020A2  CFF5 FFEE          	movff	tablat,postinc0
   875  0020A6  50E5               	movf	postdec1,w,c
   876  0020A8  50E1               	movf	fsr1l,w,c
   877  0020AA  E1FA               	bnz	copy_data0
   878                           
   879                           ; Initialize objects allocated to COMRAM (4 bytes)
   880                           ; load TBLPTR registers with __pidataCOMRAM
   881  0020AC  0E62               	movlw	low __pidataCOMRAM
   882  0020AE  6EF6               	movwf	tblptrl,c
   883  0020B0  0E29               	movlw	high __pidataCOMRAM
   884  0020B2  6EF7               	movwf	tblptrh,c
   885  0020B4  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   886  0020B6  6EF8               	movwf	tblptru,c
   887  0020B8  EE00  F07A         	lfsr	0,__pdataCOMRAM
   888  0020BC  EE10 F004          	lfsr	1,4
   889  0020C0                     copy_data1:
   890  0020C0  0009               	tblrd		*+
   891  0020C2  CFF5 FFEE          	movff	tablat,postinc0
   892  0020C6  50E5               	movf	postdec1,w,c
   893  0020C8  50E1               	movf	fsr1l,w,c
   894  0020CA  E1FA               	bnz	copy_data1
   895                           
   896                           ; Clear objects allocated to BANK1 (14 bytes)
   897  0020CC  EE01  F000         	lfsr	0,__pbssBANK1
   898  0020D0  0E0E               	movlw	14
   899  0020D2                     clear_0:
   900  0020D2  6AEE               	clrf	postinc0,c
   901  0020D4  06E8               	decf	wreg,f,c
   902  0020D6  E1FD               	bnz	clear_0
   903                           
   904                           ; Clear objects allocated to BANK0 (30 bytes)
   905  0020D8  EE00  F0D4         	lfsr	0,__pbssBANK0
   906  0020DC  0E1E               	movlw	30
   907  0020DE                     clear_1:
   908  0020DE  6AEE               	clrf	postinc0,c
   909  0020E0  06E8               	decf	wreg,f,c
   910  0020E2  E1FD               	bnz	clear_1
   911                           
   912                           ; Clear objects allocated to COMRAM (31 bytes)
   913  0020E4  EE00  F05B         	lfsr	0,__pbssCOMRAM
   914  0020E8  0E1F               	movlw	31
   915  0020EA                     clear_2:
   916  0020EA  6AEE               	clrf	postinc0,c
   917  0020EC  06E8               	decf	wreg,f,c
   918  0020EE  E1FD               	bnz	clear_2
   919  0020F0                     end_of_initialization:
   920                           	opt stack 0
   921  0020F0                     __end_of__initialization:
   922                           	opt stack 0
   923  0020F0  907E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   924  0020F2  927E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   925  0020F4  0100               	movlb	0
   926  0020F6  EF92  F00F         	goto	_main	;jump to C main() function
   927                           tblptru	equ	0xFF8
   928                           tblptrh	equ	0xFF7
   929                           tblptrl	equ	0xFF6
   930                           tablat	equ	0xFF5
   931                           postinc0	equ	0xFEE
   932                           wreg	equ	0xFE8
   933                           postdec1	equ	0xFE5
   934                           fsr1l	equ	0xFE1
   935                           
   936                           	psect	bssCOMRAM
   937  00005B                     __pbssCOMRAM:
   938                           	opt stack 0
   939  00005B                     _UIenabled:
   940                           	opt stack 0
   941  00005B                     	ds	2
   942  00005D                     _back:
   943                           	opt stack 0
   944  00005D                     	ds	2
   945  00005F                     _count_can_no_lab:
   946                           	opt stack 0
   947  00005F                     	ds	2
   948  000061                     _count_pop_no_tab:
   949                           	opt stack 0
   950  000061                     	ds	2
   951  000063                     _count_pop_w_tab:
   952                           	opt stack 0
   953  000063                     	ds	2
   954  000065                     _down:
   955                           	opt stack 0
   956  000065                     	ds	2
   957  000067                     _enter:
   958                           	opt stack 0
   959  000067                     	ds	2
   960  000069                     _firstboot:
   961                           	opt stack 0
   962  000069                     	ds	2
   963  00006B                     _timer1highbits:
   964                           	opt stack 0
   965  00006B                     	ds	2
   966  00006D                     _timer1lowbits:
   967                           	opt stack 0
   968  00006D                     	ds	2
   969  00006F                     _timer3highbits:
   970                           	opt stack 0
   971  00006F                     	ds	2
   972  000071                     _timer3lowbits:
   973                           	opt stack 0
   974  000071                     	ds	2
   975  000073                     _up:
   976                           	opt stack 0
   977  000073                     	ds	2
   978  000075                     _was_low:
   979                           	opt stack 0
   980  000075                     	ds	2
   981  000077                     _block:
   982                           	opt stack 0
   983  000077                     	ds	1
   984  000078                     _canType:
   985                           	opt stack 0
   986  000078                     	ds	1
   987  000079                     _input:
   988                           	opt stack 0
   989  000079                     	ds	1
   990                           tblptru	equ	0xFF8
   991                           tblptrh	equ	0xFF7
   992                           tblptrl	equ	0xFF6
   993                           tablat	equ	0xFF5
   994                           postinc0	equ	0xFEE
   995                           wreg	equ	0xFE8
   996                           postdec1	equ	0xFE5
   997                           fsr1l	equ	0xFE1
   998                           
   999                           	psect	dataCOMRAM
  1000  00007A                     __pdataCOMRAM:
  1001                           	opt stack 0
  1002  00007A                     _timer1_20ms_high:
  1003                           	opt stack 0
  1004  00007A                     	ds	2
  1005  00007C                     _timer1_20ms_low:
  1006                           	opt stack 0
  1007  00007C                     	ds	2
  1008                           tblptru	equ	0xFF8
  1009                           tblptrh	equ	0xFF7
  1010                           tblptrl	equ	0xFF6
  1011                           tablat	equ	0xFF5
  1012                           postinc0	equ	0xFEE
  1013                           wreg	equ	0xFE8
  1014                           postdec1	equ	0xFE5
  1015                           fsr1l	equ	0xFE1
  1016                           
  1017                           	psect	bssBANK0
  1018  0000D4                     __pbssBANK0:
  1019                           	opt stack 0
  1020  0000D4                     _time:
  1021                           	opt stack 0
  1022  0000D4                     	ds	7
  1023  0000DB                     _count_can_w_lab:
  1024                           	opt stack 0
  1025  0000DB                     	ds	2
  1026  0000DD                     _count_total:
  1027                           	opt stack 0
  1028  0000DD                     	ds	2
  1029  0000DF                     _cur_state:
  1030                           	opt stack 0
  1031  0000DF                     	ds	2
  1032  0000E1                     _f_can_coming_to_ID:
  1033                           	opt stack 0
  1034  0000E1                     	ds	2
  1035  0000E3                     _f_can_coming_to_distribution:
  1036                           	opt stack 0
  1037  0000E3                     	ds	2
  1038  0000E5                     _f_can_distributed:
  1039                           	opt stack 0
  1040  0000E5                     	ds	2
  1041  0000E7                     _f_lastCan:
  1042                           	opt stack 0
  1043  0000E7                     	ds	2
  1044  0000E9                     _f_loadingNewCan:
  1045                           	opt stack 0
  1046  0000E9                     	ds	2
  1047  0000EB                     _log:
  1048                           	opt stack 0
  1049  0000EB                     	ds	2
  1050  0000ED                     _logstate:
  1051                           	opt stack 0
  1052  0000ED                     	ds	2
  1053  0000EF                     _total_time:
  1054                           	opt stack 0
  1055  0000EF                     	ds	2
  1056  0000F1                     _machine_state:
  1057                           	opt stack 0
  1058  0000F1                     	ds	1
  1059                           tblptru	equ	0xFF8
  1060                           tblptrh	equ	0xFF7
  1061                           tblptrl	equ	0xFF6
  1062                           tablat	equ	0xFF5
  1063                           postinc0	equ	0xFEE
  1064                           wreg	equ	0xFE8
  1065                           postdec1	equ	0xFE5
  1066                           fsr1l	equ	0xFE1
  1067                           
  1068                           	psect	dataBANK0
  1069  0000F2                     __pdataBANK0:
  1070                           	opt stack 0
  1071  0000F2                     printRTC@F3188:
  1072                           	opt stack 0
  1073  0000F2                     	ds	4
  1074  0000F6                     _f_ID_receive:
  1075                           	opt stack 0
  1076  0000F6                     	ds	2
  1077  0000F8                     _first:
  1078                           	opt stack 0
  1079  0000F8                     	ds	2
  1080                           tblptru	equ	0xFF8
  1081                           tblptrh	equ	0xFF7
  1082                           tblptrl	equ	0xFF6
  1083                           tablat	equ	0xFF5
  1084                           postinc0	equ	0xFEE
  1085                           wreg	equ	0xFE8
  1086                           postdec1	equ	0xFE5
  1087                           fsr1l	equ	0xFE1
  1088                           
  1089                           	psect	bssBANK1
  1090  000100                     __pbssBANK1:
  1091                           	opt stack 0
  1092  000100                     _startTime:
  1093                           	opt stack 0
  1094  000100                     	ds	14
  1095                           tblptru	equ	0xFF8
  1096                           tblptrh	equ	0xFF7
  1097                           tblptrl	equ	0xFF6
  1098                           tablat	equ	0xFF5
  1099                           postinc0	equ	0xFEE
  1100                           wreg	equ	0xFE8
  1101                           postdec1	equ	0xFE5
  1102                           fsr1l	equ	0xFE1
  1103                           
  1104                           	psect	cstackBANK0
  1105  000080                     __pcstackBANK0:
  1106                           	opt stack 0
  1107  000080                     ??_isdigit:
  1108  000080                     ??_I2C_Master_Wait:
  1109  000080                     ?_MAGNETISM_in:
  1110                           	opt stack 0
  1111  000080                     ?___wmul:
  1112                           	opt stack 0
  1113  000080                     ?___awmod:
  1114                           	opt stack 0
  1115  000080                     ?___lwdiv:
  1116                           	opt stack 0
  1117  000080                     ?___lldiv:
  1118                           	opt stack 0
  1119  000080                     lcdNibble@temp:
  1120                           	opt stack 0
  1121  000080                     initTime@m:
  1122                           	opt stack 0
  1123  000080                     moveServoBlock@myPosition:
  1124                           	opt stack 0
  1125  000080                     moveServoCup@myPosition:
  1126                           	opt stack 0
  1127  000080                     ___wmul@multiplier:
  1128                           	opt stack 0
  1129  000080                     ___awmod@dividend:
  1130                           	opt stack 0
  1131  000080                     ___lwdiv@dividend:
  1132                           	opt stack 0
  1133  000080                     strcpy@to:
  1134                           	opt stack 0
  1135  000080                     ___lldiv@dividend:
  1136                           	opt stack 0
  1137                           
  1138                           ; 4 bytes @ 0x0
  1139  000080                     	ds	1
  1140  000081                     I2C_Master_Read@a:
  1141                           	opt stack 0
  1142  000081                     lcdNibble@data:
  1143                           	opt stack 0
  1144  000081                     initTime@h:
  1145                           	opt stack 0
  1146  000081                     _isdigit$1698:
  1147                           	opt stack 0
  1148  000081                     I2C_Master_Write@d:
  1149                           	opt stack 0
  1150                           
  1151                           ; 2 bytes @ 0x1
  1152  000081                     	ds	1
  1153  000082                     ??_ID:
  1154  000082                     I2C_Master_Read@temp:
  1155                           	opt stack 0
  1156  000082                     lcdInst@data:
  1157                           	opt stack 0
  1158  000082                     putch@data:
  1159                           	opt stack 0
  1160  000082                     initTime@w:
  1161                           	opt stack 0
  1162  000082                     isdigit@c:
  1163                           	opt stack 0
  1164  000082                     ___wmul@multiplicand:
  1165                           	opt stack 0
  1166  000082                     ___awmod@divisor:
  1167                           	opt stack 0
  1168  000082                     ___lwdiv@divisor:
  1169                           	opt stack 0
  1170  000082                     strcpy@from:
  1171                           	opt stack 0
  1172                           
  1173                           ; 2 bytes @ 0x2
  1174  000082                     	ds	1
  1175  000083                     ??_initLCD:
  1176  000083                     initTime@DD:
  1177                           	opt stack 0
  1178  000083                     getRTC@i:
  1179                           	opt stack 0
  1180  000083                     ID@top_bottom_conductivity:
  1181                           	opt stack 0
  1182                           
  1183                           ; 2 bytes @ 0x3
  1184  000083                     	ds	1
  1185  000084                     initTime@MM:
  1186                           	opt stack 0
  1187  000084                     ___awmod@counter:
  1188                           	opt stack 0
  1189  000084                     ___wmul@product:
  1190                           	opt stack 0
  1191  000084                     ___lwdiv@quotient:
  1192                           	opt stack 0
  1193  000084                     strcpy@cp:
  1194                           	opt stack 0
  1195  000084                     ___lldiv@divisor:
  1196                           	opt stack 0
  1197                           
  1198                           ; 4 bytes @ 0x4
  1199  000084                     	ds	1
  1200  000085                     ??_initSortTimer:
  1201  000085                     initTime@YY:
  1202                           	opt stack 0
  1203  000085                     ___awmod@sign:
  1204                           	opt stack 0
  1205  000085                     ID@side_conductivity:
  1206                           	opt stack 0
  1207                           
  1208                           ; 2 bytes @ 0x5
  1209  000085                     	ds	1
  1210  000086                     ?___awdiv:
  1211                           	opt stack 0
  1212  000086                     initTime@s:
  1213                           	opt stack 0
  1214  000086                     ___lwdiv@counter:
  1215                           	opt stack 0
  1216  000086                     ___awdiv@dividend:
  1217                           	opt stack 0
  1218                           
  1219                           ; 2 bytes @ 0x6
  1220  000086                     	ds	1
  1221  000087                     ?___lwmod:
  1222                           	opt stack 0
  1223  000087                     ID@magnetic:
  1224                           	opt stack 0
  1225  000087                     ___lwmod@dividend:
  1226                           	opt stack 0
  1227                           
  1228                           ; 2 bytes @ 0x7
  1229  000087                     	ds	1
  1230  000088                     initSortTimer@i:
  1231                           	opt stack 0
  1232  000088                     ___awdiv@divisor:
  1233                           	opt stack 0
  1234  000088                     ___lldiv@quotient:
  1235                           	opt stack 0
  1236                           
  1237                           ; 4 bytes @ 0x8
  1238  000088                     	ds	1
  1239  000089                     ___lwmod@divisor:
  1240                           	opt stack 0
  1241                           
  1242                           ; 2 bytes @ 0x9
  1243  000089                     	ds	1
  1244  00008A                     ??_Loading:
  1245  00008A                     ___awdiv@counter:
  1246                           	opt stack 0
  1247                           
  1248                           ; 1 bytes @ 0xA
  1249  00008A                     	ds	1
  1250  00008B                     ___awdiv@sign:
  1251                           	opt stack 0
  1252  00008B                     ___lwmod@counter:
  1253                           	opt stack 0
  1254                           
  1255                           ; 1 bytes @ 0xB
  1256  00008B                     	ds	1
  1257  00008C                     ___lldiv@counter:
  1258                           	opt stack 0
  1259  00008C                     ___awdiv@quotient:
  1260                           	opt stack 0
  1261                           
  1262                           ; 2 bytes @ 0xC
  1263  00008C                     	ds	1
  1264  00008D                     I2C_Master_Init@c:
  1265                           	opt stack 0
  1266                           
  1267                           ; 4 bytes @ 0xD
  1268  00008D                     	ds	1
  1269  00008E                     ?_printf:
  1270                           	opt stack 0
  1271  00008E                     printf@f:
  1272                           	opt stack 0
  1273                           
  1274                           ; 2 bytes @ 0xE
  1275  00008E                     	ds	3
  1276  000091                     ??_I2C_Master_Init:
  1277                           
  1278                           ; 1 bytes @ 0x11
  1279  000091                     	ds	4
  1280  000095                     ??_loadRTC:
  1281                           
  1282                           ; 1 bytes @ 0x15
  1283  000095                     	ds	1
  1284  000096                     loadRTC@i:
  1285                           	opt stack 0
  1286                           
  1287                           ; 2 bytes @ 0x16
  1288  000096                     	ds	4
  1289  00009A                     ??_printf:
  1290                           
  1291                           ; 1 bytes @ 0x1A
  1292  00009A                     	ds	4
  1293  00009E                     printf@prec:
  1294                           	opt stack 0
  1295                           
  1296                           ; 1 bytes @ 0x1E
  1297  00009E                     	ds	1
  1298  00009F                     printf@ap:
  1299                           	opt stack 0
  1300                           
  1301                           ; 2 bytes @ 0x1F
  1302  00009F                     	ds	2
  1303  0000A1                     printf@cp:
  1304                           	opt stack 0
  1305                           
  1306                           ; 2 bytes @ 0x21
  1307  0000A1                     	ds	2
  1308  0000A3                     printf@val:
  1309                           	opt stack 0
  1310                           
  1311                           ; 2 bytes @ 0x23
  1312  0000A3                     	ds	2
  1313  0000A5                     printf@len:
  1314                           	opt stack 0
  1315                           
  1316                           ; 2 bytes @ 0x25
  1317  0000A5                     	ds	2
  1318  0000A7                     printf@flag:
  1319                           	opt stack 0
  1320                           
  1321                           ; 1 bytes @ 0x27
  1322  0000A7                     	ds	1
  1323  0000A8                     printf@c:
  1324                           	opt stack 0
  1325                           
  1326                           ; 1 bytes @ 0x28
  1327  0000A8                     	ds	1
  1328  0000A9                     printf@width:
  1329                           	opt stack 0
  1330                           
  1331                           ; 2 bytes @ 0x29
  1332  0000A9                     	ds	2
  1333  0000AB                     ??_printRTC:
  1334                           
  1335                           ; 1 bytes @ 0x2B
  1336  0000AB                     	ds	3
  1337  0000AE                     printRTC@INT_time:
  1338                           	opt stack 0
  1339                           
  1340                           ; 14 bytes @ 0x2E
  1341  0000AE                     	ds	14
  1342  0000BC                     printRTC@RTC_month:
  1343                           	opt stack 0
  1344                           
  1345                           ; 2 bytes @ 0x3C
  1346  0000BC                     	ds	2
  1347  0000BE                     printRTC@month:
  1348                           	opt stack 0
  1349                           
  1350                           ; 4 bytes @ 0x3E
  1351  0000BE                     	ds	4
  1352  0000C2                     printRTC@i:
  1353                           	opt stack 0
  1354                           
  1355                           ; 2 bytes @ 0x42
  1356  0000C2                     	ds	2
  1357  0000C4                     ??_UI:
  1358                           
  1359                           ; 1 bytes @ 0x44
  1360  0000C4                     	ds	1
  1361  0000C5                     _UI$2056:
  1362                           	opt stack 0
  1363                           
  1364                           ; 2 bytes @ 0x45
  1365  0000C5                     	ds	2
  1366  0000C7                     UI@i:
  1367                           	opt stack 0
  1368                           
  1369                           ; 1 bytes @ 0x47
  1370  0000C7                     	ds	1
  1371  0000C8                     UI@i_640:
  1372                           	opt stack 0
  1373                           
  1374                           ; 1 bytes @ 0x48
  1375  0000C8                     	ds	1
  1376  0000C9                     UI@i_641:
  1377                           	opt stack 0
  1378                           
  1379                           ; 1 bytes @ 0x49
  1380  0000C9                     	ds	1
  1381  0000CA                     UI@i_644:
  1382                           	opt stack 0
  1383                           
  1384                           ; 1 bytes @ 0x4A
  1385  0000CA                     	ds	1
  1386  0000CB                     UI@i_645:
  1387                           	opt stack 0
  1388                           
  1389                           ; 1 bytes @ 0x4B
  1390  0000CB                     	ds	1
  1391  0000CC                     UI@i_648:
  1392                           	opt stack 0
  1393                           
  1394                           ; 1 bytes @ 0x4C
  1395  0000CC                     	ds	1
  1396  0000CD                     UI@i_649:
  1397                           	opt stack 0
  1398                           
  1399                           ; 1 bytes @ 0x4D
  1400  0000CD                     	ds	1
  1401  0000CE                     UI@i_652:
  1402                           	opt stack 0
  1403                           
  1404                           ; 1 bytes @ 0x4E
  1405  0000CE                     	ds	1
  1406  0000CF                     UI@i_653:
  1407                           	opt stack 0
  1408                           
  1409                           ; 1 bytes @ 0x4F
  1410  0000CF                     	ds	1
  1411  0000D0                     UI@i_656:
  1412                           	opt stack 0
  1413                           
  1414                           ; 1 bytes @ 0x50
  1415  0000D0                     	ds	1
  1416  0000D1                     UI@i_657:
  1417                           	opt stack 0
  1418                           
  1419                           ; 1 bytes @ 0x51
  1420  0000D1                     	ds	1
  1421  0000D2                     UI@i_660:
  1422                           	opt stack 0
  1423                           
  1424                           ; 1 bytes @ 0x52
  1425  0000D2                     	ds	1
  1426  0000D3                     UI@i_661:
  1427                           	opt stack 0
  1428                           
  1429                           ; 1 bytes @ 0x53
  1430  0000D3                     	ds	1
  1431  0000D4                     tblptru	equ	0xFF8
  1432                           tblptrh	equ	0xFF7
  1433                           tblptrl	equ	0xFF6
  1434                           tablat	equ	0xFF5
  1435                           postinc0	equ	0xFEE
  1436                           wreg	equ	0xFE8
  1437                           postdec1	equ	0xFE5
  1438                           fsr1l	equ	0xFE1
  1439                           
  1440                           ; 1 bytes @ 0x54
  1441                           
  1442                           	psect	cstackCOMRAM
  1443  000001                     __pcstackCOMRAM:
  1444                           	opt stack 0
  1445  000001                     ??i2_I2C_Master_Wait:
  1446  000001                     ??i2_isdigit:
  1447  000001                     ?i2___wmul:
  1448                           	opt stack 0
  1449  000001                     ?i2___lwmod:
  1450                           	opt stack 0
  1451  000001                     i2lcdNibble@temp:
  1452                           	opt stack 0
  1453  000001                     dispLogs@myLog:
  1454                           	opt stack 0
  1455  000001                     i2___wmul@multiplier:
  1456                           	opt stack 0
  1457  000001                     i2___lwmod@dividend:
  1458                           	opt stack 0
  1459  000001                     i2strcpy@to:
  1460                           	opt stack 0
  1461                           
  1462                           ; 2 bytes @ 0x0
  1463  000001                     	ds	1
  1464  000002                     i2I2C_Master_Read@a:
  1465                           	opt stack 0
  1466  000002                     i2lcdNibble@data:
  1467                           	opt stack 0
  1468  000002                     i2_isdigit$1698:
  1469                           	opt stack 0
  1470  000002                     i2I2C_Master_Write@d:
  1471                           	opt stack 0
  1472                           
  1473                           ; 2 bytes @ 0x1
  1474  000002                     	ds	1
  1475  000003                     i2I2C_Master_Read@temp:
  1476                           	opt stack 0
  1477  000003                     i2lcdInst@data:
  1478                           	opt stack 0
  1479  000003                     i2putch@data:
  1480                           	opt stack 0
  1481  000003                     i2isdigit@c:
  1482                           	opt stack 0
  1483  000003                     i2___wmul@multiplicand:
  1484                           	opt stack 0
  1485  000003                     i2___lwmod@divisor:
  1486                           	opt stack 0
  1487  000003                     i2strcpy@from:
  1488                           	opt stack 0
  1489                           
  1490                           ; 2 bytes @ 0x2
  1491  000003                     	ds	1
  1492  000004                     i2getRTC@i:
  1493                           	opt stack 0
  1494                           
  1495                           ; 2 bytes @ 0x3
  1496  000004                     	ds	1
  1497  000005                     i2___lwmod@counter:
  1498                           	opt stack 0
  1499  000005                     i2___wmul@product:
  1500                           	opt stack 0
  1501  000005                     i2strcpy@cp:
  1502                           	opt stack 0
  1503                           
  1504                           ; 2 bytes @ 0x4
  1505  000005                     	ds	1
  1506  000006                     ?i2___lwdiv:
  1507                           	opt stack 0
  1508  000006                     i2___lwdiv@dividend:
  1509                           	opt stack 0
  1510                           
  1511                           ; 2 bytes @ 0x5
  1512  000006                     	ds	2
  1513  000008                     i2___lwdiv@divisor:
  1514                           	opt stack 0
  1515                           
  1516                           ; 2 bytes @ 0x7
  1517  000008                     	ds	2
  1518  00000A                     i2___lwdiv@quotient:
  1519                           	opt stack 0
  1520                           
  1521                           ; 2 bytes @ 0x9
  1522  00000A                     	ds	2
  1523  00000C                     i2___lwdiv@counter:
  1524                           	opt stack 0
  1525                           
  1526                           ; 1 bytes @ 0xB
  1527  00000C                     	ds	1
  1528  00000D                     ?i2_printf:
  1529                           	opt stack 0
  1530  00000D                     i2printf@f:
  1531                           	opt stack 0
  1532                           
  1533                           ; 2 bytes @ 0xC
  1534  00000D                     	ds	12
  1535  000019                     ??i2_printf:
  1536                           
  1537                           ; 1 bytes @ 0x18
  1538  000019                     	ds	4
  1539  00001D                     i2printf@prec:
  1540                           	opt stack 0
  1541                           
  1542                           ; 1 bytes @ 0x1C
  1543  00001D                     	ds	1
  1544  00001E                     i2printf@ap:
  1545                           	opt stack 0
  1546                           
  1547                           ; 2 bytes @ 0x1D
  1548  00001E                     	ds	2
  1549  000020                     i2printf@cp:
  1550                           	opt stack 0
  1551                           
  1552                           ; 2 bytes @ 0x1F
  1553  000020                     	ds	2
  1554  000022                     i2printf@val:
  1555                           	opt stack 0
  1556                           
  1557                           ; 2 bytes @ 0x21
  1558  000022                     	ds	2
  1559  000024                     i2printf@len:
  1560                           	opt stack 0
  1561                           
  1562                           ; 2 bytes @ 0x23
  1563  000024                     	ds	2
  1564  000026                     i2printf@flag:
  1565                           	opt stack 0
  1566                           
  1567                           ; 1 bytes @ 0x25
  1568  000026                     	ds	1
  1569  000027                     i2printf@c:
  1570                           	opt stack 0
  1571                           
  1572                           ; 1 bytes @ 0x26
  1573  000027                     	ds	1
  1574  000028                     i2printf@width:
  1575                           	opt stack 0
  1576                           
  1577                           ; 2 bytes @ 0x27
  1578  000028                     	ds	2
  1579  00002A                     ??_printSortTimer:
  1580  00002A                     ??i2_printRTC:
  1581  00002A                     ?_inputHandler:
  1582                           	opt stack 0
  1583                           
  1584                           ; 2 bytes @ 0x29
  1585  00002A                     	ds	2
  1586  00002C                     ??_inputHandler:
  1587                           
  1588                           ; 1 bytes @ 0x2B
  1589  00002C                     	ds	1
  1590  00002D                     printSortTimer@curTime:
  1591                           	opt stack 0
  1592  00002D                     i2printRTC@INT_time:
  1593                           	opt stack 0
  1594                           
  1595                           ; 14 bytes @ 0x2C
  1596  00002D                     	ds	14
  1597  00003B                     printSortTimer@start_sec:
  1598                           	opt stack 0
  1599  00003B                     i2printRTC@RTC_month:
  1600                           	opt stack 0
  1601                           
  1602                           ; 2 bytes @ 0x3A
  1603  00003B                     	ds	2
  1604  00003D                     printSortTimer@cur_sec:
  1605                           	opt stack 0
  1606  00003D                     i2printRTC@month:
  1607                           	opt stack 0
  1608                           
  1609                           ; 4 bytes @ 0x3C
  1610  00003D                     	ds	2
  1611  00003F                     printSortTimer@hour:
  1612                           	opt stack 0
  1613                           
  1614                           ; 2 bytes @ 0x3E
  1615  00003F                     	ds	2
  1616  000041                     printSortTimer@min:
  1617                           	opt stack 0
  1618  000041                     i2printRTC@i:
  1619                           	opt stack 0
  1620                           
  1621                           ; 2 bytes @ 0x40
  1622  000041                     	ds	2
  1623  000043                     ??_updateMenu:
  1624  000043                     printSortTimer@sec:
  1625                           	opt stack 0
  1626                           
  1627                           ; 2 bytes @ 0x42
  1628  000043                     	ds	2
  1629  000045                     _printSortTimer$2171:
  1630                           	opt stack 0
  1631                           
  1632                           ; 2 bytes @ 0x44
  1633  000045                     	ds	2
  1634  000047                     printSortTimer@timeDiff:
  1635                           	opt stack 0
  1636                           
  1637                           ; 2 bytes @ 0x46
  1638  000047                     	ds	2
  1639  000049                     printSortTimer@i:
  1640                           	opt stack 0
  1641                           
  1642                           ; 2 bytes @ 0x48
  1643  000049                     	ds	2
  1644  00004B                     ??_handler:
  1645                           
  1646                           ; 1 bytes @ 0x4A
  1647  00004B                     	ds	16
  1648                           tblptru	equ	0xFF8
  1649                           tblptrh	equ	0xFF7
  1650                           tblptrl	equ	0xFF6
  1651                           tablat	equ	0xFF5
  1652                           postinc0	equ	0xFEE
  1653                           wreg	equ	0xFE8
  1654                           postdec1	equ	0xFE5
  1655                           fsr1l	equ	0xFE1
  1656                           
  1657 ;;
  1658 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1659 ;;
  1660 ;; *************** function _main *****************
  1661 ;; Defined at:
  1662 ;;		line 16 in file "main.c"
  1663 ;; Parameters:    Size  Location     Type
  1664 ;;		None
  1665 ;; Auto vars:     Size  Location     Type
  1666 ;;		None
  1667 ;; Return value:  Size  Location     Type
  1668 ;;                  1    wreg      void 
  1669 ;; Registers used:
  1670 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1671 ;; Tracked objects:
  1672 ;;		On entry : 0/0
  1673 ;;		On exit  : 0/0
  1674 ;;		Unchanged: 0/0
  1675 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1676 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1677 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1678 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1679 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1680 ;;Total ram usage:        0 bytes
  1681 ;; Hardware stack levels required when called:   13
  1682 ;; This function calls:
  1683 ;;		_PortTestA5
  1684 ;;		_UI
  1685 ;;		_initLCD
  1686 ;;		_initTime
  1687 ;;		_initUI
  1688 ;;		_machineConfig
  1689 ;;		_sort
  1690 ;;		_stopSignals
  1691 ;; This function is called by:
  1692 ;;		Startup code after reset
  1693 ;; This function uses a non-reentrant model
  1694 ;;
  1695                           
  1696                           	psect	text0
  1697  001F24                     __ptext0:
  1698                           	opt stack 0
  1699  001F24                     _main:
  1700                           	opt stack 18
  1701                           
  1702                           ;main.c: 17: machineConfig();
  1703                           
  1704                           ;incstack = 0
  1705  001F24  EC8E  F011         	call	_machineConfig	;wreg free
  1706                           
  1707                           ;main.c: 18: initLCD();
  1708  001F28  ECB5  F011         	call	_initLCD	;wreg free
  1709                           
  1710                           ;main.c: 19: initTime(0x42, 0x32, 0x13, 0x04, 0x09, 0x02, 0x17);
  1711  001F2C  0E32               	movlw	50
  1712  001F2E  0100               	movlb	0	; () banked
  1713  001F30  6F80               	movwf	initTime@m& (0+255),b
  1714  001F32  0E13               	movlw	19
  1715  001F34  0100               	movlb	0	; () banked
  1716  001F36  6F81               	movwf	initTime@h& (0+255),b
  1717  001F38  0E04               	movlw	4
  1718  001F3A  0100               	movlb	0	; () banked
  1719  001F3C  6F82               	movwf	initTime@w& (0+255),b
  1720  001F3E  0E09               	movlw	9
  1721  001F40  0100               	movlb	0	; () banked
  1722  001F42  6F83               	movwf	initTime@DD& (0+255),b
  1723  001F44  0E02               	movlw	2
  1724  001F46  0100               	movlb	0	; () banked
  1725  001F48  6F84               	movwf	initTime@MM& (0+255),b
  1726  001F4A  0E17               	movlw	23
  1727  001F4C  0100               	movlb	0	; () banked
  1728  001F4E  6F85               	movwf	initTime@YY& (0+255),b
  1729  001F50  0E42               	movlw	66
  1730  001F52  EC13  F014         	call	_initTime
  1731                           
  1732                           ;main.c: 20: initUI();
  1733  001F56  EC33  F014         	call	_initUI	;wreg free
  1734                           
  1735                           ;main.c: 24: switch(machine_state){
  1736                           
  1737                           ;main.c: 23: while(1){
  1738  001F5A  D011               	goto	l5571
  1739  001F5C                     l5557:
  1740                           
  1741                           ;main.c: 26: UI();
  1742  001F5C  EC09  F000         	call	_UI	;wreg free
  1743                           
  1744                           ;main.c: 27: break;
  1745  001F60  D00E               	goto	l5571
  1746  001F62                     l5559:
  1747                           
  1748                           ;main.c: 29: sort();
  1749  001F62  EC02  F014         	call	_sort	;wreg free
  1750                           
  1751                           ;main.c: 30: break;
  1752  001F66  D00B               	goto	l5571
  1753  001F68                     l5561:
  1754                           
  1755                           ;main.c: 32: stopSignals();
  1756  001F68  EC40  F014         	call	_stopSignals	;wreg free
  1757                           
  1758                           ;main.c: 33: UI();
  1759  001F6C  EC09  F000         	call	_UI	;wreg free
  1760                           
  1761                           ;main.c: 34: break;
  1762  001F70  D006               	goto	l5571
  1763  001F72                     l5565:
  1764                           
  1765                           ;main.c: 36: PortTestA5();
  1766  001F72  EC5F  F014         	call	_PortTestA5	;wreg free
  1767                           
  1768                           ;main.c: 37: break;
  1769  001F76  D003               	goto	l5571
  1770  001F78                     l5567:
  1771                           
  1772                           ;main.c: 39: stopSignals();
  1773  001F78  EC40  F014         	call	_stopSignals	;wreg free
  1774  001F7C                     l689:
  1775  001F7C  D7FF               	goto	l689
  1776  001F7E                     l5571:
  1777  001F7E  0100               	movlb	0	; () banked
  1778  001F80  51F1               	movf	_machine_state& (0+255),w,b
  1779                           
  1780                           ; Switch size 1, requested type "space"
  1781                           ; Number of cases is 5, Range of values is 0 to 4
  1782                           ; switch strategies available:
  1783                           ; Name         Instructions Cycles
  1784                           ; simple_byte           16     9 (average)
  1785                           ;	Chosen strategy is simple_byte
  1786  001F82  0A00               	xorlw	0	; case 0
  1787  001F84  B4D8               	btfsc	status,2,c
  1788  001F86  D7EA               	goto	l5557
  1789  001F88  0A01               	xorlw	1	; case 1
  1790  001F8A  B4D8               	btfsc	status,2,c
  1791  001F8C  D7EA               	goto	l5559
  1792  001F8E  0A03               	xorlw	3	; case 2
  1793  001F90  B4D8               	btfsc	status,2,c
  1794  001F92  D7EA               	goto	l5561
  1795  001F94  0A01               	xorlw	1	; case 3
  1796  001F96  B4D8               	btfsc	status,2,c
  1797  001F98  D7EC               	goto	l5565
  1798  001F9A  0A07               	xorlw	7	; case 4
  1799  001F9C  B4D8               	btfsc	status,2,c
  1800  001F9E  D7EC               	goto	l5567
  1801                           
  1802                           ; BSR set to: 0
  1803                           
  1804                           ; BSR set to: 0
  1805  001FA0  D7EE               	goto	l5571
  1806  001FA2                     __end_of_main:
  1807                           	opt stack 0
  1808                           tblptru	equ	0xFF8
  1809                           tblptrh	equ	0xFF7
  1810                           tblptrl	equ	0xFF6
  1811                           tablat	equ	0xFF5
  1812                           postinc0	equ	0xFEE
  1813                           wreg	equ	0xFE8
  1814                           postdec1	equ	0xFE5
  1815                           fsr1l	equ	0xFE1
  1816                           status	equ	0xFD8
  1817                           
  1818 ;; *************** function _stopSignals *****************
  1819 ;; Defined at:
  1820 ;;		line 48 in file "main.c"
  1821 ;; Parameters:    Size  Location     Type
  1822 ;;		None
  1823 ;; Auto vars:     Size  Location     Type
  1824 ;;		None
  1825 ;; Return value:  Size  Location     Type
  1826 ;;                  1    wreg      void 
  1827 ;; Registers used:
  1828 ;;		wreg, status,2
  1829 ;; Tracked objects:
  1830 ;;		On entry : 0/0
  1831 ;;		On exit  : 0/0
  1832 ;;		Unchanged: 0/0
  1833 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1834 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1835 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1836 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1837 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1838 ;;Total ram usage:        0 bytes
  1839 ;; Hardware stack levels used:    1
  1840 ;; Hardware stack levels required when called:    7
  1841 ;; This function calls:
  1842 ;;		Nothing
  1843 ;; This function is called by:
  1844 ;;		_main
  1845 ;; This function uses a non-reentrant model
  1846 ;;
  1847                           
  1848                           	psect	text1
  1849  002880                     __ptext1:
  1850                           	opt stack 0
  1851  002880                     _stopSignals:
  1852                           	opt stack 23
  1853                           
  1854                           ;main.c: 49: LATA = 0x00;
  1855                           
  1856                           ; BSR set to: 0
  1857                           ;incstack = 0
  1858  002880  0E00               	movlw	0
  1859  002882  6E89               	movwf	3977,c	;volatile
  1860                           
  1861                           ;main.c: 50: LATB = 0x00;
  1862  002884  0E00               	movlw	0
  1863  002886  6E8A               	movwf	3978,c	;volatile
  1864                           
  1865                           ;main.c: 51: LATC = 0x00;
  1866  002888  0E00               	movlw	0
  1867  00288A  6E8B               	movwf	3979,c	;volatile
  1868                           
  1869                           ;main.c: 52: LATD = 0x00;
  1870  00288C  0E00               	movlw	0
  1871  00288E  6E8C               	movwf	3980,c	;volatile
  1872                           
  1873                           ;main.c: 53: LATE = 0x00;
  1874  002890  0E00               	movlw	0
  1875  002892  6E8D               	movwf	3981,c	;volatile
  1876  002894  0012               	return		;funcret
  1877  002896                     __end_of_stopSignals:
  1878                           	opt stack 0
  1879                           tblptru	equ	0xFF8
  1880                           tblptrh	equ	0xFF7
  1881                           tblptrl	equ	0xFF6
  1882                           tablat	equ	0xFF5
  1883                           postinc0	equ	0xFEE
  1884                           wreg	equ	0xFE8
  1885                           postdec1	equ	0xFE5
  1886                           fsr1l	equ	0xFE1
  1887                           status	equ	0xFD8
  1888                           
  1889 ;; *************** function _sort *****************
  1890 ;; Defined at:
  1891 ;;		line 28 in file "sort.c"
  1892 ;; Parameters:    Size  Location     Type
  1893 ;;		None
  1894 ;; Auto vars:     Size  Location     Type
  1895 ;;		None
  1896 ;; Return value:  Size  Location     Type
  1897 ;;                  1    wreg      void 
  1898 ;; Registers used:
  1899 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1900 ;; Tracked objects:
  1901 ;;		On entry : 0/0
  1902 ;;		On exit  : 0/0
  1903 ;;		Unchanged: 0/0
  1904 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1905 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1906 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1907 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1908 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1909 ;;Total ram usage:        0 bytes
  1910 ;; Hardware stack levels used:    1
  1911 ;; Hardware stack levels required when called:   12
  1912 ;; This function calls:
  1913 ;;		_Distribution
  1914 ;;		_ID
  1915 ;;		_Loading
  1916 ;; This function is called by:
  1917 ;;		_main
  1918 ;; This function uses a non-reentrant model
  1919 ;;
  1920                           
  1921                           	psect	text2
  1922  002804                     __ptext2:
  1923                           	opt stack 0
  1924  002804                     _sort:
  1925                           	opt stack 18
  1926                           
  1927                           ;sort.c: 29: if(machine_state == Sorting_state){
  1928                           
  1929                           ;incstack = 0
  1930  002804  0100               	movlb	0	; () banked
  1931  002806  05F1               	decf	_machine_state& (0+255),w,b
  1932  002808  B4D8               	btfsc	status,2,c
  1933                           
  1934                           ; BSR set to: 0
  1935                           ;sort.c: 30: Loading();
  1936  00280A  EC73  F00E         	call	_Loading	;wreg free
  1937                           
  1938                           ;sort.c: 31: }
  1939                           ;sort.c: 32: if(machine_state == Sorting_state){
  1940  00280E  0100               	movlb	0	; () banked
  1941  002810  05F1               	decf	_machine_state& (0+255),w,b
  1942  002812  B4D8               	btfsc	status,2,c
  1943                           
  1944                           ; BSR set to: 0
  1945                           ;sort.c: 33: ID();
  1946  002814  ECCE  F00D         	call	_ID	;wreg free
  1947                           
  1948                           ;sort.c: 34: }
  1949                           ;sort.c: 35: if(machine_state == Sorting_state){
  1950  002818  0100               	movlb	0	; () banked
  1951  00281A  05F1               	decf	_machine_state& (0+255),w,b
  1952  00281C  A4D8               	btfss	status,2,c
  1953  00281E  0012               	return	
  1954                           
  1955                           ; BSR set to: 0
  1956                           ;sort.c: 36: Distribution();
  1957  002820  EC58  F013         	call	_Distribution	;wreg free
  1958  002824  0012               	return	
  1959  002826                     __end_of_sort:
  1960                           	opt stack 0
  1961                           tblptru	equ	0xFF8
  1962                           tblptrh	equ	0xFF7
  1963                           tblptrl	equ	0xFF6
  1964                           tablat	equ	0xFF5
  1965                           postinc0	equ	0xFEE
  1966                           wreg	equ	0xFE8
  1967                           postdec1	equ	0xFE5
  1968                           fsr1l	equ	0xFE1
  1969                           status	equ	0xFD8
  1970                           
  1971 ;; *************** function _Loading *****************
  1972 ;; Defined at:
  1973 ;;		line 40 in file "sort.c"
  1974 ;; Parameters:    Size  Location     Type
  1975 ;;		None
  1976 ;; Auto vars:     Size  Location     Type
  1977 ;;		None
  1978 ;; Return value:  Size  Location     Type
  1979 ;;                  1    wreg      void 
  1980 ;; Registers used:
  1981 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1982 ;; Tracked objects:
  1983 ;;		On entry : 0/0
  1984 ;;		On exit  : 0/0
  1985 ;;		Unchanged: 0/0
  1986 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1987 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1988 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1989 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1990 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1991 ;;Total ram usage:        1 bytes
  1992 ;; Hardware stack levels used:    1
  1993 ;; Hardware stack levels required when called:   11
  1994 ;; This function calls:
  1995 ;;		_initSortTimer
  1996 ;;		_lcdInst
  1997 ;;		_moveServoCup
  1998 ;; This function is called by:
  1999 ;;		_sort
  2000 ;; This function uses a non-reentrant model
  2001 ;;
  2002                           
  2003                           	psect	text3
  2004  001CE6                     __ptext3:
  2005                           	opt stack 0
  2006  001CE6                     _Loading:
  2007                           	opt stack 18
  2008                           
  2009                           ;sort.c: 41: if(first){
  2010                           
  2011                           ;incstack = 0
  2012  001CE6  0100               	movlb	0	; () banked
  2013  001CE8  51F8               	movf	_first& (0+255),w,b
  2014  001CEA  0100               	movlb	0	; () banked
  2015  001CEC  11F9               	iorwf	(_first+1)& (0+255),w,b
  2016  001CEE  B4D8               	btfsc	status,2,c
  2017  001CF0  D018               	goto	l4835
  2018                           
  2019                           ; BSR set to: 0
  2020                           ;sort.c: 42: first = 0;
  2021  001CF2  0E00               	movlw	0
  2022  001CF4  0100               	movlb	0	; () banked
  2023  001CF6  6FF9               	movwf	(_first+1)& (0+255),b
  2024  001CF8  0E00               	movlw	0
  2025  001CFA  6FF8               	movwf	_first& (0+255),b
  2026                           
  2027                           ; BSR set to: 0
  2028                           ;sort.c: 43: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  2029  001CFC  0E01               	movlw	1
  2030  001CFE  EC79  F014         	call	_lcdInst
  2031  001D02  0E68               	movlw	104
  2032  001D04  0100               	movlb	0	; () banked
  2033  001D06  6F8A               	movwf	??_Loading& (0+255),b
  2034  001D08  0EE4               	movlw	228
  2035  001D0A                     u4587:
  2036  001D0A  2EE8               	decfsz	wreg,f,c
  2037  001D0C  D7FE               	bra	u4587
  2038  001D0E  2F8A               	decfsz	??_Loading& (0+255),f,b
  2039  001D10  D7FC               	bra	u4587
  2040  001D12  F000               	nop	
  2041                           
  2042                           ;sort.c: 44: initSortTimer();
  2043  001D14  EC79  F00D         	call	_initSortTimer	;wreg free
  2044                           
  2045                           ;sort.c: 47: LATAbits.LATA5 = 1;
  2046  001D18  8A89               	bsf	3977,5,c	;volatile
  2047                           
  2048                           ;sort.c: 50: moveServoCup(Home);
  2049  001D1A  0E00               	movlw	0
  2050  001D1C  ECC0  F00E         	call	_moveServoCup
  2051                           
  2052                           ;sort.c: 52: }
  2053  001D20  0012               	return	
  2054  001D22                     l4835:
  2055                           
  2056                           ;sort.c: 53: else{
  2057                           ;sort.c: 57: if(!f_loadingNewCan){
  2058  001D22  0100               	movlb	0	; () banked
  2059  001D24  51E9               	movf	_f_loadingNewCan& (0+255),w,b
  2060  001D26  0100               	movlb	0	; () banked
  2061  001D28  11EA               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  2062  001D2A  A4D8               	btfss	status,2,c
  2063  001D2C  D016               	goto	l4849
  2064                           
  2065                           ; BSR set to: 0
  2066                           ;sort.c: 61: if(!f_loadingNewCan){
  2067  001D2E  0100               	movlb	0	; () banked
  2068  001D30  51E9               	movf	_f_loadingNewCan& (0+255),w,b
  2069  001D32  0100               	movlb	0	; () banked
  2070  001D34  11EA               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  2071  001D36  B4D8               	btfsc	status,2,c
  2072  001D38  0012               	return	
  2073                           
  2074                           ; BSR set to: 0
  2075                           ;sort.c: 66: else{
  2076                           ;sort.c: 67: count_total++;
  2077                           
  2078                           ; BSR set to: 0
  2079                           
  2080                           ; BSR set to: 0
  2081                           ;sort.c: 63: }
  2082                           
  2083                           ; BSR set to: 0
  2084                           ;sort.c: 62: return;
  2085  001D3A  0100               	movlb	0	; () banked
  2086  001D3C  4BDD               	infsnz	_count_total& (0+255),f,b
  2087  001D3E  2BDE               	incf	(_count_total+1)& (0+255),f,b
  2088                           
  2089                           ; BSR set to: 0
  2090                           ;sort.c: 68: if(count_total == 12){
  2091  001D40  0E0C               	movlw	12
  2092  001D42  0100               	movlb	0	; () banked
  2093  001D44  19DD               	xorwf	_count_total& (0+255),w,b
  2094  001D46  0100               	movlb	0	; () banked
  2095  001D48  11DE               	iorwf	(_count_total+1)& (0+255),w,b
  2096  001D4A  A4D8               	btfss	status,2,c
  2097  001D4C  0012               	return	
  2098                           
  2099                           ; BSR set to: 0
  2100                           ;sort.c: 69: f_lastCan = 1;
  2101  001D4E  0E00               	movlw	0
  2102  001D50  0100               	movlb	0	; () banked
  2103  001D52  6FE8               	movwf	(_f_lastCan+1)& (0+255),b
  2104  001D54  0E01               	movlw	1
  2105  001D56  6FE7               	movwf	_f_lastCan& (0+255),b
  2106                           
  2107                           ; BSR set to: 0
  2108                           ;sort.c: 70: }
  2109                           ;sort.c: 71: }
  2110                           ;sort.c: 72: }
  2111                           
  2112                           ; BSR set to: 0
  2113  001D58  0012               	return	
  2114  001D5A                     l4849:
  2115                           
  2116                           ; BSR set to: 0
  2117                           ;sort.c: 75: else if(f_ID_receive){
  2118  001D5A  0100               	movlb	0	; () banked
  2119  001D5C  51F6               	movf	_f_ID_receive& (0+255),w,b
  2120  001D5E  0100               	movlb	0	; () banked
  2121  001D60  11F7               	iorwf	(_f_ID_receive+1)& (0+255),w,b
  2122  001D62  B4D8               	btfsc	status,2,c
  2123  001D64  0012               	return	
  2124                           
  2125                           ; BSR set to: 0
  2126                           ;sort.c: 76: f_loadingNewCan = 0;
  2127  001D66  0E00               	movlw	0
  2128  001D68  0100               	movlb	0	; () banked
  2129  001D6A  6FEA               	movwf	(_f_loadingNewCan+1)& (0+255),b
  2130  001D6C  0E00               	movlw	0
  2131  001D6E  6FE9               	movwf	_f_loadingNewCan& (0+255),b
  2132                           
  2133                           ; BSR set to: 0
  2134                           ;sort.c: 77: LATAbits.LATA4 = 1;
  2135  001D70  8889               	bsf	3977,4,c	;volatile
  2136                           
  2137                           ;sort.c: 78: f_can_coming_to_ID = 1;
  2138  001D72  0E00               	movlw	0
  2139  001D74  0100               	movlb	0	; () banked
  2140  001D76  6FE2               	movwf	(_f_can_coming_to_ID+1)& (0+255),b
  2141  001D78  0E01               	movlw	1
  2142  001D7A  6FE1               	movwf	_f_can_coming_to_ID& (0+255),b
  2143                           
  2144                           ; BSR set to: 0
  2145                           ;sort.c: 81: LATAbits.LATA4 = 0;
  2146  001D7C  9889               	bcf	3977,4,c	;volatile
  2147                           
  2148                           ; BSR set to: 0
  2149                           
  2150                           ; BSR set to: 0
  2151  001D7E  0012               	return	
  2152  001D80                     __end_of_Loading:
  2153                           	opt stack 0
  2154                           tblptru	equ	0xFF8
  2155                           tblptrh	equ	0xFF7
  2156                           tblptrl	equ	0xFF6
  2157                           tablat	equ	0xFF5
  2158                           postinc0	equ	0xFEE
  2159                           wreg	equ	0xFE8
  2160                           postdec1	equ	0xFE5
  2161                           fsr1l	equ	0xFE1
  2162                           status	equ	0xFD8
  2163                           
  2164 ;; *************** function _initSortTimer *****************
  2165 ;; Defined at:
  2166 ;;		line 125 in file "sort.c"
  2167 ;; Parameters:    Size  Location     Type
  2168 ;;		None
  2169 ;; Auto vars:     Size  Location     Type
  2170 ;;  i               2    8[BANK0 ] int 
  2171 ;; Return value:  Size  Location     Type
  2172 ;;                  1    wreg      void 
  2173 ;; Registers used:
  2174 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2175 ;; Tracked objects:
  2176 ;;		On entry : 0/0
  2177 ;;		On exit  : 0/0
  2178 ;;		Unchanged: 0/0
  2179 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2180 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2181 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2182 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2183 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2184 ;;Total ram usage:        5 bytes
  2185 ;; Hardware stack levels used:    1
  2186 ;; Hardware stack levels required when called:   10
  2187 ;; This function calls:
  2188 ;;		_getRTC
  2189 ;; This function is called by:
  2190 ;;		_Loading
  2191 ;; This function uses a non-reentrant model
  2192 ;;
  2193                           
  2194                           	psect	text4
  2195  001AF2                     __ptext4:
  2196                           	opt stack 0
  2197  001AF2                     _initSortTimer:
  2198                           	opt stack 18
  2199                           
  2200                           ;sort.c: 127: getRTC();
  2201                           
  2202                           ;incstack = 0
  2203  001AF2  EC4F  F00F         	call	_getRTC	;wreg free
  2204                           
  2205                           ;sort.c: 128: for(int i = 0; i < 7; i++){
  2206  001AF6  0E00               	movlw	0
  2207  001AF8  0100               	movlb	0	; () banked
  2208  001AFA  6F89               	movwf	(initSortTimer@i+1)& (0+255),b
  2209  001AFC  0E00               	movlw	0
  2210  001AFE  6F88               	movwf	initSortTimer@i& (0+255),b
  2211  001B00                     l4509:
  2212                           
  2213                           ; BSR set to: 0
  2214  001B00  0100               	movlb	0	; () banked
  2215  001B02  BF89               	btfsc	(initSortTimer@i+1)& (0+255),7,b
  2216  001B04  D008               	goto	l4513
  2217  001B06  0100               	movlb	0	; () banked
  2218  001B08  5189               	movf	(initSortTimer@i+1)& (0+255),w,b
  2219  001B0A  E140               	bnz	l4519
  2220  001B0C  0E07               	movlw	7
  2221  001B0E  0100               	movlb	0	; () banked
  2222  001B10  5D88               	subwf	initSortTimer@i& (0+255),w,b
  2223  001B12  B0D8               	btfsc	status,0,c
  2224  001B14  D03B               	goto	l4519
  2225  001B16                     l4513:
  2226                           
  2227                           ; BSR set to: 0
  2228                           ;sort.c: 129: startTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  2229  001B16  0ED4               	movlw	low _time
  2230  001B18  0100               	movlb	0	; () banked
  2231  001B1A  2588               	addwf	initSortTimer@i& (0+255),w,b
  2232  001B1C  6ED9               	movwf	fsr2l,c
  2233  001B1E  0E00               	movlw	high _time
  2234  001B20  0100               	movlb	0	; () banked
  2235  001B22  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  2236  001B24  6EDA               	movwf	fsr2h,c
  2237  001B26  50DF               	movf	indf2,w,c
  2238  001B28  0100               	movlb	0	; () banked
  2239  001B2A  6F85               	movwf	??_initSortTimer& (0+255),b
  2240  001B2C  0100               	movlb	0	; () banked
  2241  001B2E  3B85               	swapf	??_initSortTimer& (0+255),f,b
  2242  001B30  0E0F               	movlw	15
  2243  001B32  1785               	andwf	??_initSortTimer& (0+255),f,b
  2244  001B34  0E0F               	movlw	15
  2245  001B36  0100               	movlb	0	; () banked
  2246  001B38  1785               	andwf	??_initSortTimer& (0+255),f,b
  2247  001B3A  0100               	movlb	0	; () banked
  2248  001B3C  5185               	movf	??_initSortTimer& (0+255),w,b
  2249  001B3E  0D0A               	mullw	10
  2250  001B40  0ED4               	movlw	low _time
  2251  001B42  0100               	movlb	0	; () banked
  2252  001B44  2588               	addwf	initSortTimer@i& (0+255),w,b
  2253  001B46  6ED9               	movwf	fsr2l,c
  2254  001B48  0E00               	movlw	high _time
  2255  001B4A  0100               	movlb	0	; () banked
  2256  001B4C  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  2257  001B4E  6EDA               	movwf	fsr2h,c
  2258  001B50  50DF               	movf	indf2,w,c
  2259  001B52  0B0F               	andlw	15
  2260  001B54  0100               	movlb	0	; () banked
  2261  001B56  6F86               	movwf	(??_initSortTimer+1)& (0+255),b
  2262  001B58  6B87               	clrf	(??_initSortTimer+2)& (0+255),b
  2263  001B5A  50F3               	movf	prodl,w,c
  2264  001B5C  0100               	movlb	0	; () banked
  2265  001B5E  2786               	addwf	(??_initSortTimer+1)& (0+255),f,b
  2266  001B60  50F4               	movf	prodh,w,c
  2267  001B62  0100               	movlb	0	; () banked
  2268  001B64  2387               	addwfc	(??_initSortTimer+2)& (0+255),f,b
  2269  001B66  90D8               	bcf	status,0,c
  2270  001B68  0100               	movlb	0	; () banked
  2271  001B6A  3588               	rlcf	initSortTimer@i& (0+255),w,b
  2272  001B6C  6ED9               	movwf	fsr2l,c
  2273  001B6E  0100               	movlb	0	; () banked
  2274  001B70  3589               	rlcf	(initSortTimer@i+1)& (0+255),w,b
  2275  001B72  6EDA               	movwf	fsr2h,c
  2276  001B74  0E00               	movlw	low _startTime
  2277  001B76  26D9               	addwf	fsr2l,f,c
  2278  001B78  0E01               	movlw	high _startTime
  2279  001B7A  22DA               	addwfc	fsr2h,f,c
  2280  001B7C  C086  FFDE         	movff	??_initSortTimer+1,postinc2
  2281  001B80  C087  FFDD         	movff	??_initSortTimer+2,postdec2
  2282                           
  2283                           ; BSR set to: 0
  2284  001B84  0100               	movlb	0	; () banked
  2285  001B86  4B88               	infsnz	initSortTimer@i& (0+255),f,b
  2286  001B88  2B89               	incf	(initSortTimer@i+1)& (0+255),f,b
  2287  001B8A  D7BA               	goto	l4509
  2288  001B8C                     l4519:
  2289                           
  2290                           ; BSR set to: 0
  2291                           ;sort.c: 130: }
  2292                           ;sort.c: 132: T0CON = 0b00010111;
  2293  001B8C  0E17               	movlw	23
  2294  001B8E  6ED5               	movwf	4053,c	;volatile
  2295                           
  2296                           ;sort.c: 141: TMR0H = 0b10000101;
  2297  001B90  0E85               	movlw	133
  2298  001B92  6ED7               	movwf	4055,c	;volatile
  2299                           
  2300                           ;sort.c: 142: TMR0L = 0b11101110;
  2301  001B94  0EEE               	movlw	238
  2302  001B96  6ED6               	movwf	4054,c	;volatile
  2303                           
  2304                           ; BSR set to: 0
  2305                           ;sort.c: 143: TMR0ON = 1;
  2306  001B98  8ED5               	bsf	4053,7,c	;volatile
  2307                           
  2308                           ; BSR set to: 0
  2309  001B9A  0012               	return		;funcret
  2310  001B9C                     __end_of_initSortTimer:
  2311                           	opt stack 0
  2312                           tblptru	equ	0xFF8
  2313                           tblptrh	equ	0xFF7
  2314                           tblptrl	equ	0xFF6
  2315                           tablat	equ	0xFF5
  2316                           prodh	equ	0xFF4
  2317                           prodl	equ	0xFF3
  2318                           postinc0	equ	0xFEE
  2319                           wreg	equ	0xFE8
  2320                           postdec1	equ	0xFE5
  2321                           fsr1l	equ	0xFE1
  2322                           indf2	equ	0xFDF
  2323                           postinc2	equ	0xFDE
  2324                           postdec2	equ	0xFDD
  2325                           fsr2h	equ	0xFDA
  2326                           fsr2l	equ	0xFD9
  2327                           status	equ	0xFD8
  2328                           
  2329 ;; *************** function _ID *****************
  2330 ;; Defined at:
  2331 ;;		line 85 in file "sort.c"
  2332 ;; Parameters:    Size  Location     Type
  2333 ;;		None
  2334 ;; Auto vars:     Size  Location     Type
  2335 ;;  magnetic        2    7[BANK0 ] int 
  2336 ;;  side_conduct    2    5[BANK0 ] int 
  2337 ;;  top_bottom_c    2    3[BANK0 ] int 
  2338 ;; Return value:  Size  Location     Type
  2339 ;;                  1    wreg      void 
  2340 ;; Registers used:
  2341 ;;		wreg, status,2, status,0, cstack
  2342 ;; Tracked objects:
  2343 ;;		On entry : 0/0
  2344 ;;		On exit  : 0/0
  2345 ;;		Unchanged: 0/0
  2346 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2347 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2348 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2349 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2350 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2351 ;;Total ram usage:        7 bytes
  2352 ;; Hardware stack levels used:    1
  2353 ;; Hardware stack levels required when called:    8
  2354 ;; This function calls:
  2355 ;;		_MAGNETISM_in
  2356 ;;		_moveServoBlock
  2357 ;; This function is called by:
  2358 ;;		_sort
  2359 ;; This function uses a non-reentrant model
  2360 ;;
  2361                           
  2362                           	psect	text5
  2363  001B9C                     __ptext5:
  2364                           	opt stack 0
  2365  001B9C                     _ID:
  2366                           	opt stack 21
  2367                           
  2368                           ;sort.c: 86: if(f_can_coming_to_ID){
  2369                           
  2370                           ; BSR set to: 0
  2371                           ;incstack = 0
  2372  001B9C  0100               	movlb	0	; () banked
  2373  001B9E  51E1               	movf	_f_can_coming_to_ID& (0+255),w,b
  2374  001BA0  0100               	movlb	0	; () banked
  2375  001BA2  11E2               	iorwf	(_f_can_coming_to_ID+1)& (0+255),w,b
  2376  001BA4  B4D8               	btfsc	status,2,c
  2377  001BA6  0012               	return	
  2378                           
  2379                           ; BSR set to: 0
  2380                           ;sort.c: 91: int side_conductivity = 0;
  2381  001BA8  0E00               	movlw	0
  2382  001BAA  0100               	movlb	0	; () banked
  2383  001BAC  6F86               	movwf	(ID@side_conductivity+1)& (0+255),b
  2384  001BAE  0E00               	movlw	0
  2385  001BB0  6F85               	movwf	ID@side_conductivity& (0+255),b
  2386                           
  2387                           ;sort.c: 92: int magnetic = 0;
  2388  001BB2  0E00               	movlw	0
  2389  001BB4  0100               	movlb	0	; () banked
  2390  001BB6  6F88               	movwf	(ID@magnetic+1)& (0+255),b
  2391  001BB8  0E00               	movlw	0
  2392  001BBA  6F87               	movwf	ID@magnetic& (0+255),b
  2393                           
  2394                           ;sort.c: 93: int top_bottom_conductivity = 0;
  2395  001BBC  0E00               	movlw	0
  2396  001BBE  0100               	movlb	0	; () banked
  2397  001BC0  6F84               	movwf	(ID@top_bottom_conductivity+1)& (0+255),b
  2398  001BC2  0E00               	movlw	0
  2399  001BC4  6F83               	movwf	ID@top_bottom_conductivity& (0+255),b
  2400                           
  2401                           ;sort.c: 95: side_conductivity = PORTAbits.RA2;
  2402  001BC6  A480               	btfss	3968,2,c	;volatile
  2403  001BC8  D004               	goto	u3420
  2404  001BCA  0100               	movlb	0	; () banked
  2405  001BCC  6B82               	clrf	??_ID& (0+255),b
  2406  001BCE  2B82               	incf	??_ID& (0+255),f,b
  2407  001BD0  D002               	goto	u3428
  2408  001BD2                     u3420:
  2409  001BD2  0100               	movlb	0	; () banked
  2410  001BD4  6B82               	clrf	??_ID& (0+255),b
  2411  001BD6                     u3428:
  2412  001BD6  0100               	movlb	0	; () banked
  2413  001BD8  5182               	movf	??_ID& (0+255),w,b
  2414  001BDA  0100               	movlb	0	; () banked
  2415  001BDC  6F85               	movwf	ID@side_conductivity& (0+255),b
  2416  001BDE  6B86               	clrf	(ID@side_conductivity+1)& (0+255),b
  2417                           
  2418                           ; BSR set to: 0
  2419                           ;sort.c: 96: if(!side_conductivity){
  2420  001BE0  0100               	movlb	0	; () banked
  2421  001BE2  5185               	movf	ID@side_conductivity& (0+255),w,b
  2422  001BE4  0100               	movlb	0	; () banked
  2423  001BE6  1186               	iorwf	(ID@side_conductivity+1)& (0+255),w,b
  2424  001BE8  A4D8               	btfss	status,2,c
  2425  001BEA  D01B               	goto	l4873
  2426                           
  2427                           ; BSR set to: 0
  2428                           ;sort.c: 97: magnetic = MAGNETISM_in();
  2429  001BEC  EC81  F014         	call	_MAGNETISM_in	;wreg free
  2430  001BF0  C080  F087         	movff	?_MAGNETISM_in,ID@magnetic
  2431  001BF4  C081  F088         	movff	?_MAGNETISM_in+1,ID@magnetic+1
  2432                           
  2433                           ;sort.c: 98: if(!magnetic){
  2434  001BF8  0100               	movlb	0	; () banked
  2435  001BFA  5187               	movf	ID@magnetic& (0+255),w,b
  2436  001BFC  0100               	movlb	0	; () banked
  2437  001BFE  1188               	iorwf	(ID@magnetic+1)& (0+255),w,b
  2438  001C00  A4D8               	btfss	status,2,c
  2439  001C02  D00F               	goto	l4873
  2440                           
  2441                           ; BSR set to: 0
  2442                           ;sort.c: 99: LATAbits.LATA3 = 1;
  2443  001C04  8689               	bsf	3977,3,c	;volatile
  2444                           
  2445                           ; BSR set to: 0
  2446                           ;sort.c: 101: top_bottom_conductivity = PORTAbits.RA2;
  2447  001C06  A480               	btfss	3968,2,c	;volatile
  2448  001C08  D004               	goto	u3450
  2449  001C0A  0100               	movlb	0	; () banked
  2450  001C0C  6B82               	clrf	??_ID& (0+255),b
  2451  001C0E  2B82               	incf	??_ID& (0+255),f,b
  2452  001C10  D002               	goto	u3458
  2453  001C12                     u3450:
  2454  001C12  0100               	movlb	0	; () banked
  2455  001C14  6B82               	clrf	??_ID& (0+255),b
  2456  001C16                     u3458:
  2457  001C16  0100               	movlb	0	; () banked
  2458  001C18  5182               	movf	??_ID& (0+255),w,b
  2459  001C1A  0100               	movlb	0	; () banked
  2460  001C1C  6F83               	movwf	ID@top_bottom_conductivity& (0+255),b
  2461  001C1E  6B84               	clrf	(ID@top_bottom_conductivity+1)& (0+255),b
  2462                           
  2463                           ; BSR set to: 0
  2464                           ;sort.c: 102: LATAbits.LATA3 = 0;
  2465  001C20  9689               	bcf	3977,3,c	;volatile
  2466  001C22                     l4873:
  2467                           
  2468                           ; BSR set to: 0
  2469                           ;sort.c: 103: }
  2470                           ;sort.c: 104: }
  2471                           ;sort.c: 107: moveServoBlock(Lower);
  2472  001C22  0E01               	movlw	1
  2473  001C24  EC66  F011         	call	_moveServoBlock
  2474                           
  2475                           ;sort.c: 109: f_can_coming_to_distribution = 1;
  2476  001C28  0E00               	movlw	0
  2477  001C2A  0100               	movlb	0	; () banked
  2478  001C2C  6FE4               	movwf	(_f_can_coming_to_distribution+1)& (0+255),b
  2479  001C2E  0E01               	movlw	1
  2480  001C30  6FE3               	movwf	_f_can_coming_to_distribution& (0+255),b
  2481                           
  2482                           ;sort.c: 110: moveServoBlock(Raise);
  2483  001C32  0E00               	movlw	0
  2484  001C34  EC66  F011         	call	_moveServoBlock
  2485                           
  2486                           ;sort.c: 111: f_can_coming_to_ID = 0;
  2487  001C38  0E00               	movlw	0
  2488  001C3A  0100               	movlb	0	; () banked
  2489  001C3C  6FE2               	movwf	(_f_can_coming_to_ID+1)& (0+255),b
  2490  001C3E  0E00               	movlw	0
  2491  001C40  6FE1               	movwf	_f_can_coming_to_ID& (0+255),b
  2492  001C42  0012               	return	
  2493  001C44                     __end_of_ID:
  2494                           	opt stack 0
  2495                           tblptru	equ	0xFF8
  2496                           tblptrh	equ	0xFF7
  2497                           tblptrl	equ	0xFF6
  2498                           tablat	equ	0xFF5
  2499                           prodh	equ	0xFF4
  2500                           prodl	equ	0xFF3
  2501                           postinc0	equ	0xFEE
  2502                           wreg	equ	0xFE8
  2503                           postdec1	equ	0xFE5
  2504                           fsr1l	equ	0xFE1
  2505                           indf2	equ	0xFDF
  2506                           postinc2	equ	0xFDE
  2507                           postdec2	equ	0xFDD
  2508                           fsr2h	equ	0xFDA
  2509                           fsr2l	equ	0xFD9
  2510                           status	equ	0xFD8
  2511                           
  2512 ;; *************** function _moveServoBlock *****************
  2513 ;; Defined at:
  2514 ;;		line 190 in file "sort.c"
  2515 ;; Parameters:    Size  Location     Type
  2516 ;;  myPosition      1    wreg     enum E3138
  2517 ;; Auto vars:     Size  Location     Type
  2518 ;;  myPosition      1    0[BANK0 ] enum E3138
  2519 ;; Return value:  Size  Location     Type
  2520 ;;                  1    wreg      void 
  2521 ;; Registers used:
  2522 ;;		wreg, status,2, status,0
  2523 ;; Tracked objects:
  2524 ;;		On entry : 0/0
  2525 ;;		On exit  : 0/0
  2526 ;;		Unchanged: 0/0
  2527 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2528 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2529 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2530 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2531 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2532 ;;Total ram usage:        1 bytes
  2533 ;; Hardware stack levels used:    1
  2534 ;; Hardware stack levels required when called:    7
  2535 ;; This function calls:
  2536 ;;		Nothing
  2537 ;; This function is called by:
  2538 ;;		_ID
  2539 ;; This function uses a non-reentrant model
  2540 ;;
  2541                           
  2542                           	psect	text6
  2543  0022CC                     __ptext6:
  2544                           	opt stack 0
  2545  0022CC                     _moveServoBlock:
  2546                           	opt stack 21
  2547                           
  2548                           ; BSR set to: 0
  2549                           ;incstack = 0
  2550                           ;moveServoBlock@myPosition stored from wreg
  2551  0022CC  0100               	movlb	0	; () banked
  2552  0022CE  6F80               	movwf	moveServoBlock@myPosition& (0+255),b
  2553                           
  2554                           ;sort.c: 192: T3CON = 0b10110000;
  2555  0022D0  0EB0               	movlw	176
  2556  0022D2  6EB1               	movwf	4017,c	;volatile
  2557                           
  2558                           ;sort.c: 193: switch(myPosition){
  2559  0022D4  D011               	goto	l4553
  2560  0022D6                     l4547:
  2561                           
  2562                           ;sort.c: 196: timer3highbits = 0b11111000;
  2563  0022D6  0E00               	movlw	0
  2564  0022D8  6E70               	movwf	_timer3highbits+1,c
  2565  0022DA  0EF8               	movlw	248
  2566  0022DC  6E6F               	movwf	_timer3highbits,c
  2567                           
  2568                           ;sort.c: 197: timer3lowbits = 0b00110000;
  2569  0022DE  0E00               	movlw	0
  2570  0022E0  6E72               	movwf	_timer3lowbits+1,c
  2571  0022E2  0E30               	movlw	48
  2572  0022E4  D007               	goto	L1
  2573  0022E6                     l4549:
  2574                           
  2575                           ;sort.c: 201: timer3highbits = 0b11111100;
  2576  0022E6  0E00               	movlw	0
  2577  0022E8  6E70               	movwf	_timer3highbits+1,c
  2578  0022EA  0EFC               	movlw	252
  2579  0022EC  6E6F               	movwf	_timer3highbits,c
  2580                           
  2581                           ;sort.c: 202: timer3lowbits = 0b00011000;
  2582  0022EE  0E00               	movlw	0
  2583  0022F0  6E72               	movwf	_timer3lowbits+1,c
  2584  0022F2  0E18               	movlw	24
  2585  0022F4                     L1:
  2586  0022F4  6E71               	movwf	_timer3lowbits,c
  2587                           
  2588                           ;sort.c: 206: }
  2589                           
  2590                           ;sort.c: 205: break;
  2591                           
  2592                           ;sort.c: 204: default:
  2593                           
  2594                           ;sort.c: 203: break;
  2595  0022F6  D008               	goto	l1055
  2596  0022F8                     l4553:
  2597  0022F8  0100               	movlb	0	; () banked
  2598  0022FA  5180               	movf	moveServoBlock@myPosition& (0+255),w,b
  2599                           
  2600                           ; Switch size 1, requested type "space"
  2601                           ; Number of cases is 2, Range of values is 0 to 1
  2602                           ; switch strategies available:
  2603                           ; Name         Instructions Cycles
  2604                           ; simple_byte            7     4 (average)
  2605                           ;	Chosen strategy is simple_byte
  2606  0022FC  0A00               	xorlw	0	; case 0
  2607  0022FE  B4D8               	btfsc	status,2,c
  2608  002300  D7EA               	goto	l4547
  2609  002302  0A01               	xorlw	1	; case 1
  2610  002304  B4D8               	btfsc	status,2,c
  2611  002306  D7EF               	goto	l4549
  2612  002308                     l1055:
  2613                           
  2614                           ;sort.c: 208: TMR3H = timer3highbits;
  2615  002308  C06F  FFB3         	movff	_timer3highbits,4019	;volatile
  2616                           
  2617                           ;sort.c: 209: TMR3L = timer3lowbits;
  2618  00230C  C071  FFB2         	movff	_timer3lowbits,4018	;volatile
  2619                           
  2620                           ;sort.c: 210: TMR3ON = 1;
  2621  002310  80B1               	bsf	4017,0,c	;volatile
  2622                           
  2623                           ;sort.c: 211: was_low = 0;
  2624  002312  0E00               	movlw	0
  2625  002314  6E76               	movwf	_was_low+1,c
  2626  002316  0E00               	movlw	0
  2627  002318  6E75               	movwf	_was_low,c
  2628  00231A  0012               	return		;funcret
  2629  00231C                     __end_of_moveServoBlock:
  2630                           	opt stack 0
  2631                           tblptru	equ	0xFF8
  2632                           tblptrh	equ	0xFF7
  2633                           tblptrl	equ	0xFF6
  2634                           tablat	equ	0xFF5
  2635                           prodh	equ	0xFF4
  2636                           prodl	equ	0xFF3
  2637                           postinc0	equ	0xFEE
  2638                           wreg	equ	0xFE8
  2639                           postdec1	equ	0xFE5
  2640                           fsr1l	equ	0xFE1
  2641                           indf2	equ	0xFDF
  2642                           postinc2	equ	0xFDE
  2643                           postdec2	equ	0xFDD
  2644                           fsr2h	equ	0xFDA
  2645                           fsr2l	equ	0xFD9
  2646                           status	equ	0xFD8
  2647                           
  2648 ;; *************** function _MAGNETISM_in *****************
  2649 ;; Defined at:
  2650 ;;		line 185 in file "sort.c"
  2651 ;; Parameters:    Size  Location     Type
  2652 ;;		None
  2653 ;; Auto vars:     Size  Location     Type
  2654 ;;		None
  2655 ;; Return value:  Size  Location     Type
  2656 ;;                  2    0[BANK0 ] int 
  2657 ;; Registers used:
  2658 ;;		wreg, status,2
  2659 ;; Tracked objects:
  2660 ;;		On entry : 0/0
  2661 ;;		On exit  : 0/0
  2662 ;;		Unchanged: 0/0
  2663 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2664 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2665 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2666 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2667 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2668 ;;Total ram usage:        2 bytes
  2669 ;; Hardware stack levels used:    1
  2670 ;; Hardware stack levels required when called:    7
  2671 ;; This function calls:
  2672 ;;		Nothing
  2673 ;; This function is called by:
  2674 ;;		_ID
  2675 ;; This function uses a non-reentrant model
  2676 ;;
  2677                           
  2678                           	psect	text7
  2679  002902                     __ptext7:
  2680                           	opt stack 0
  2681  002902                     _MAGNETISM_in:
  2682                           	opt stack 21
  2683                           
  2684                           ;sort.c: 187: return 0;
  2685                           
  2686                           ;incstack = 0
  2687  002902  0E00               	movlw	0
  2688  002904  0100               	movlb	0	; () banked
  2689  002906  6F81               	movwf	(?_MAGNETISM_in+1)& (0+255),b
  2690  002908  0E00               	movlw	0
  2691  00290A  6F80               	movwf	?_MAGNETISM_in& (0+255),b
  2692  00290C  0012               	return	
  2693  00290E                     __end_of_MAGNETISM_in:
  2694                           	opt stack 0
  2695                           tblptru	equ	0xFF8
  2696                           tblptrh	equ	0xFF7
  2697                           tblptrl	equ	0xFF6
  2698                           tablat	equ	0xFF5
  2699                           prodh	equ	0xFF4
  2700                           prodl	equ	0xFF3
  2701                           postinc0	equ	0xFEE
  2702                           wreg	equ	0xFE8
  2703                           postdec1	equ	0xFE5
  2704                           fsr1l	equ	0xFE1
  2705                           indf2	equ	0xFDF
  2706                           postinc2	equ	0xFDE
  2707                           postdec2	equ	0xFDD
  2708                           fsr2h	equ	0xFDA
  2709                           fsr2l	equ	0xFD9
  2710                           status	equ	0xFD8
  2711                           
  2712 ;; *************** function _Distribution *****************
  2713 ;; Defined at:
  2714 ;;		line 114 in file "sort.c"
  2715 ;; Parameters:    Size  Location     Type
  2716 ;;		None
  2717 ;; Auto vars:     Size  Location     Type
  2718 ;;		None
  2719 ;; Return value:  Size  Location     Type
  2720 ;;                  1    wreg      void 
  2721 ;; Registers used:
  2722 ;;		wreg, status,2, status,0, cstack
  2723 ;; Tracked objects:
  2724 ;;		On entry : 0/0
  2725 ;;		On exit  : 0/0
  2726 ;;		Unchanged: 0/0
  2727 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2728 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2729 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2730 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2731 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2732 ;;Total ram usage:        0 bytes
  2733 ;; Hardware stack levels used:    1
  2734 ;; Hardware stack levels required when called:    8
  2735 ;; This function calls:
  2736 ;;		_moveServoCup
  2737 ;; This function is called by:
  2738 ;;		_sort
  2739 ;; This function uses a non-reentrant model
  2740 ;;
  2741                           
  2742                           	psect	text8
  2743  0026B0                     __ptext8:
  2744                           	opt stack 0
  2745  0026B0                     _Distribution:
  2746                           	opt stack 21
  2747                           
  2748                           ;sort.c: 115: if(f_can_coming_to_distribution){
  2749                           
  2750                           ; BSR set to: 0
  2751                           ;incstack = 0
  2752  0026B0  0100               	movlb	0	; () banked
  2753  0026B2  51E3               	movf	_f_can_coming_to_distribution& (0+255),w,b
  2754  0026B4  0100               	movlb	0	; () banked
  2755  0026B6  11E4               	iorwf	(_f_can_coming_to_distribution+1)& (0+255),w,b
  2756  0026B8  B4D8               	btfsc	status,2,c
  2757  0026BA  0012               	return	
  2758                           
  2759                           ; BSR set to: 0
  2760                           ;sort.c: 117: moveServoCup(canType);
  2761  0026BC  5078               	movf	_canType,w,c
  2762  0026BE  ECC0  F00E         	call	_moveServoCup
  2763                           
  2764                           ;sort.c: 119: moveServoCup(Home);
  2765  0026C2  0E00               	movlw	0
  2766  0026C4  ECC0  F00E         	call	_moveServoCup
  2767                           
  2768                           ;sort.c: 120: f_can_coming_to_distribution = 0;
  2769  0026C8  0E00               	movlw	0
  2770  0026CA  0100               	movlb	0	; () banked
  2771  0026CC  6FE4               	movwf	(_f_can_coming_to_distribution+1)& (0+255),b
  2772  0026CE  0E00               	movlw	0
  2773  0026D0  6FE3               	movwf	_f_can_coming_to_distribution& (0+255),b
  2774                           
  2775                           ; BSR set to: 0
  2776                           ;sort.c: 121: f_can_distributed = 1;
  2777  0026D2  0E00               	movlw	0
  2778  0026D4  0100               	movlb	0	; () banked
  2779  0026D6  6FE6               	movwf	(_f_can_distributed+1)& (0+255),b
  2780  0026D8  0E01               	movlw	1
  2781  0026DA  6FE5               	movwf	_f_can_distributed& (0+255),b
  2782  0026DC  0012               	return	
  2783  0026DE                     __end_of_Distribution:
  2784                           	opt stack 0
  2785                           tblptru	equ	0xFF8
  2786                           tblptrh	equ	0xFF7
  2787                           tblptrl	equ	0xFF6
  2788                           tablat	equ	0xFF5
  2789                           prodh	equ	0xFF4
  2790                           prodl	equ	0xFF3
  2791                           postinc0	equ	0xFEE
  2792                           wreg	equ	0xFE8
  2793                           postdec1	equ	0xFE5
  2794                           fsr1l	equ	0xFE1
  2795                           indf2	equ	0xFDF
  2796                           postinc2	equ	0xFDE
  2797                           postdec2	equ	0xFDD
  2798                           fsr2h	equ	0xFDA
  2799                           fsr2l	equ	0xFD9
  2800                           status	equ	0xFD8
  2801                           
  2802 ;; *************** function _moveServoCup *****************
  2803 ;; Defined at:
  2804 ;;		line 213 in file "sort.c"
  2805 ;; Parameters:    Size  Location     Type
  2806 ;;  myPosition      1    wreg     enum E3131
  2807 ;; Auto vars:     Size  Location     Type
  2808 ;;  myPosition      1    0[BANK0 ] enum E3131
  2809 ;; Return value:  Size  Location     Type
  2810 ;;                  1    wreg      void 
  2811 ;; Registers used:
  2812 ;;		wreg, status,2, status,0
  2813 ;; Tracked objects:
  2814 ;;		On entry : 0/0
  2815 ;;		On exit  : 0/0
  2816 ;;		Unchanged: 0/0
  2817 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2818 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2819 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2820 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2821 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2822 ;;Total ram usage:        1 bytes
  2823 ;; Hardware stack levels used:    1
  2824 ;; Hardware stack levels required when called:    7
  2825 ;; This function calls:
  2826 ;;		Nothing
  2827 ;; This function is called by:
  2828 ;;		_Loading
  2829 ;;		_Distribution
  2830 ;; This function uses a non-reentrant model
  2831 ;;
  2832                           
  2833                           	psect	text9
  2834  001D80                     __ptext9:
  2835                           	opt stack 0
  2836  001D80                     _moveServoCup:
  2837                           	opt stack 21
  2838                           
  2839                           ; BSR set to: 0
  2840                           ;incstack = 0
  2841                           ;moveServoCup@myPosition stored from wreg
  2842  001D80  0100               	movlb	0	; () banked
  2843  001D82  6F80               	movwf	moveServoCup@myPosition& (0+255),b
  2844                           
  2845                           ;sort.c: 215: T1CON = 0b10110000;
  2846  001D84  0EB0               	movlw	176
  2847  001D86  6ECD               	movwf	4045,c	;volatile
  2848                           
  2849                           ;sort.c: 216: switch(myPosition){
  2850  001D88  D029               	goto	l4537
  2851  001D8A                     l4525:
  2852                           
  2853                           ;sort.c: 219: timer1highbits = 0b11111010;
  2854  001D8A  0E00               	movlw	0
  2855  001D8C  6E6C               	movwf	_timer1highbits+1,c
  2856  001D8E  0EFA               	movlw	250
  2857  001D90  6E6B               	movwf	_timer1highbits,c
  2858                           
  2859                           ;sort.c: 220: timer1lowbits = 0b00100100;
  2860  001D92  0E00               	movlw	0
  2861  001D94  6E6E               	movwf	_timer1lowbits+1,c
  2862  001D96  0E24               	movlw	36
  2863  001D98  D01F               	goto	L5
  2864  001D9A                     l4527:
  2865                           
  2866                           ;sort.c: 224: timer1highbits = 0b11111100;
  2867  001D9A  0E00               	movlw	0
  2868  001D9C  6E6C               	movwf	_timer1highbits+1,c
  2869  001D9E  0EFC               	movlw	252
  2870  001DA0  6E6B               	movwf	_timer1highbits,c
  2871                           
  2872                           ;sort.c: 225: timer1lowbits = 0b00011000;
  2873  001DA2  0E00               	movlw	0
  2874  001DA4  6E6E               	movwf	_timer1lowbits+1,c
  2875  001DA6  0E18               	movlw	24
  2876  001DA8  D017               	goto	L5
  2877  001DAA                     l4529:
  2878                           
  2879                           ;sort.c: 229: timer1highbits = 0b11111010;
  2880  001DAA  0E00               	movlw	0
  2881  001DAC  6E6C               	movwf	_timer1highbits+1,c
  2882  001DAE  0EFA               	movlw	250
  2883  001DB0  6E6B               	movwf	_timer1highbits,c
  2884                           
  2885                           ;sort.c: 230: timer1lowbits = 0b11001011;
  2886  001DB2  0E00               	movlw	0
  2887  001DB4  6E6E               	movwf	_timer1lowbits+1,c
  2888  001DB6  0ECB               	movlw	203
  2889  001DB8  D00F               	goto	L5
  2890  001DBA                     l4531:
  2891                           
  2892                           ;sort.c: 234: timer1highbits = 0b11111001;
  2893  001DBA  0E00               	movlw	0
  2894  001DBC  6E6C               	movwf	_timer1highbits+1,c
  2895  001DBE  0EF9               	movlw	249
  2896  001DC0  6E6B               	movwf	_timer1highbits,c
  2897                           
  2898                           ;sort.c: 235: timer1lowbits = 0b01111101;
  2899  001DC2  0E00               	movlw	0
  2900  001DC4  6E6E               	movwf	_timer1lowbits+1,c
  2901  001DC6  0E7D               	movlw	125
  2902  001DC8  D007               	goto	L5
  2903  001DCA                     l4533:
  2904                           
  2905                           ;sort.c: 239: timer1highbits = 0b11111000;
  2906  001DCA  0E00               	movlw	0
  2907  001DCC  6E6C               	movwf	_timer1highbits+1,c
  2908  001DCE  0EF8               	movlw	248
  2909  001DD0  6E6B               	movwf	_timer1highbits,c
  2910                           
  2911                           ;sort.c: 240: timer1lowbits = 0b00110000;
  2912  001DD2  0E00               	movlw	0
  2913  001DD4  6E6E               	movwf	_timer1lowbits+1,c
  2914  001DD6  0E30               	movlw	48
  2915  001DD8                     L5:
  2916  001DD8  6E6D               	movwf	_timer1lowbits,c
  2917                           
  2918                           ;sort.c: 244: }
  2919                           
  2920                           ;sort.c: 243: break;
  2921                           
  2922                           ;sort.c: 242: default:
  2923                           
  2924                           ;sort.c: 241: break;
  2925  001DDA  D011               	goto	l1063
  2926  001DDC                     l4537:
  2927  001DDC  0100               	movlb	0	; () banked
  2928  001DDE  5180               	movf	moveServoCup@myPosition& (0+255),w,b
  2929                           
  2930                           ; Switch size 1, requested type "space"
  2931                           ; Number of cases is 5, Range of values is 0 to 4
  2932                           ; switch strategies available:
  2933                           ; Name         Instructions Cycles
  2934                           ; simple_byte           16     9 (average)
  2935                           ;	Chosen strategy is simple_byte
  2936  001DE0  0A00               	xorlw	0	; case 0
  2937  001DE2  B4D8               	btfsc	status,2,c
  2938  001DE4  D7D2               	goto	l4525
  2939  001DE6  0A01               	xorlw	1	; case 1
  2940  001DE8  B4D8               	btfsc	status,2,c
  2941  001DEA  D7D7               	goto	l4527
  2942  001DEC  0A03               	xorlw	3	; case 2
  2943  001DEE  B4D8               	btfsc	status,2,c
  2944  001DF0  D7DC               	goto	l4529
  2945  001DF2  0A01               	xorlw	1	; case 3
  2946  001DF4  B4D8               	btfsc	status,2,c
  2947  001DF6  D7E1               	goto	l4531
  2948  001DF8  0A07               	xorlw	7	; case 4
  2949  001DFA  B4D8               	btfsc	status,2,c
  2950  001DFC  D7E6               	goto	l4533
  2951  001DFE                     l1063:
  2952                           
  2953                           ;sort.c: 246: TMR1H = timer1highbits;
  2954  001DFE  C06B  FFCF         	movff	_timer1highbits,4047	;volatile
  2955                           
  2956                           ;sort.c: 247: TMR1L = timer1lowbits;
  2957  001E02  C06D  FFCE         	movff	_timer1lowbits,4046	;volatile
  2958                           
  2959                           ;sort.c: 248: TMR1ON = 1;
  2960  001E06  80CD               	bsf	4045,0,c	;volatile
  2961                           
  2962                           ;sort.c: 249: was_low = 0;
  2963  001E08  0E00               	movlw	0
  2964  001E0A  6E76               	movwf	_was_low+1,c
  2965  001E0C  0E00               	movlw	0
  2966  001E0E  6E75               	movwf	_was_low,c
  2967  001E10  0012               	return		;funcret
  2968  001E12                     __end_of_moveServoCup:
  2969                           	opt stack 0
  2970                           tblptru	equ	0xFF8
  2971                           tblptrh	equ	0xFF7
  2972                           tblptrl	equ	0xFF6
  2973                           tablat	equ	0xFF5
  2974                           prodh	equ	0xFF4
  2975                           prodl	equ	0xFF3
  2976                           postinc0	equ	0xFEE
  2977                           wreg	equ	0xFE8
  2978                           postdec1	equ	0xFE5
  2979                           fsr1l	equ	0xFE1
  2980                           indf2	equ	0xFDF
  2981                           postinc2	equ	0xFDE
  2982                           postdec2	equ	0xFDD
  2983                           fsr2h	equ	0xFDA
  2984                           fsr2l	equ	0xFD9
  2985                           status	equ	0xFD8
  2986                           
  2987 ;; *************** function _machineConfig *****************
  2988 ;; Defined at:
  2989 ;;		line 13 in file "MachineConfig.c"
  2990 ;; Parameters:    Size  Location     Type
  2991 ;;		None
  2992 ;; Auto vars:     Size  Location     Type
  2993 ;;		None
  2994 ;; Return value:  Size  Location     Type
  2995 ;;                  1    wreg      void 
  2996 ;; Registers used:
  2997 ;;		wreg, status,2
  2998 ;; Tracked objects:
  2999 ;;		On entry : 0/0
  3000 ;;		On exit  : 0/0
  3001 ;;		Unchanged: 0/0
  3002 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3003 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3004 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3005 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3006 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3007 ;;Total ram usage:        0 bytes
  3008 ;; Hardware stack levels used:    1
  3009 ;; Hardware stack levels required when called:    7
  3010 ;; This function calls:
  3011 ;;		Nothing
  3012 ;; This function is called by:
  3013 ;;		_main
  3014 ;; This function uses a non-reentrant model
  3015 ;;
  3016                           
  3017                           	psect	text10
  3018  00231C                     __ptext10:
  3019                           	opt stack 0
  3020  00231C                     _machineConfig:
  3021                           	opt stack 23
  3022                           
  3023                           ;MachineConfig.c: 15: OSCCON = 0b11110000;
  3024                           
  3025                           ;incstack = 0
  3026  00231C  0EF0               	movlw	240
  3027  00231E  6ED3               	movwf	4051,c	;volatile
  3028                           
  3029                           ;MachineConfig.c: 16: OSCTUNEbits.PLLEN = 1;
  3030  002320  8C9B               	bsf	3995,6,c	;volatile
  3031                           
  3032                           ;MachineConfig.c: 20: TRISA = 0b01000111;
  3033  002322  0E47               	movlw	71
  3034  002324  6E92               	movwf	3986,c	;volatile
  3035                           
  3036                           ;MachineConfig.c: 22: TRISB = 0b11110010;
  3037  002326  0EF2               	movlw	242
  3038  002328  6E93               	movwf	3987,c	;volatile
  3039                           
  3040                           ;MachineConfig.c: 25: TRISC = 0x00;
  3041  00232A  0E00               	movlw	0
  3042  00232C  6E94               	movwf	3988,c	;volatile
  3043                           
  3044                           ;MachineConfig.c: 29: TRISD = 0x00;
  3045  00232E  0E00               	movlw	0
  3046  002330  6E95               	movwf	3989,c	;volatile
  3047                           
  3048                           ;MachineConfig.c: 32: TRISE = 0x00;
  3049  002332  0E00               	movlw	0
  3050  002334  6E96               	movwf	3990,c	;volatile
  3051                           
  3052                           ;MachineConfig.c: 35: LATA = 0x00;
  3053  002336  0E00               	movlw	0
  3054  002338  6E89               	movwf	3977,c	;volatile
  3055                           
  3056                           ;MachineConfig.c: 36: LATB = 0x00;
  3057  00233A  0E00               	movlw	0
  3058  00233C  6E8A               	movwf	3978,c	;volatile
  3059                           
  3060                           ;MachineConfig.c: 37: LATC = 0x00;
  3061  00233E  0E00               	movlw	0
  3062  002340  6E8B               	movwf	3979,c	;volatile
  3063                           
  3064                           ;MachineConfig.c: 38: LATD = 0x00;
  3065  002342  0E00               	movlw	0
  3066  002344  6E8C               	movwf	3980,c	;volatile
  3067                           
  3068                           ;MachineConfig.c: 39: LATE = 0x00;
  3069  002346  0E00               	movlw	0
  3070  002348  6E8D               	movwf	3981,c	;volatile
  3071                           
  3072                           ;MachineConfig.c: 42: ADCON0 = 0x00;
  3073  00234A  0E00               	movlw	0
  3074  00234C  6EC2               	movwf	4034,c	;volatile
  3075                           
  3076                           ;MachineConfig.c: 43: ADCON1 = 0x0D;
  3077  00234E  0E0D               	movlw	13
  3078  002350  6EC1               	movwf	4033,c	;volatile
  3079                           
  3080                           ;MachineConfig.c: 46: CVRCON = 0x00;
  3081  002352  0E00               	movlw	0
  3082  002354  6EB5               	movwf	4021,c	;volatile
  3083                           
  3084                           ;MachineConfig.c: 47: CMCONbits.CIS = 0;
  3085  002356  96B4               	bcf	4020,3,c	;volatile
  3086                           
  3087                           ;MachineConfig.c: 48: ADFM = 1;
  3088  002358  8EC0               	bsf	4032,7,c	;volatile
  3089                           
  3090                           ;MachineConfig.c: 51: INT1IE = 1;
  3091  00235A  86F0               	bsf	intcon3,3,c	;volatile
  3092                           
  3093                           ;MachineConfig.c: 52: TMR0IE = 1;
  3094  00235C  8AF2               	bsf	intcon,5,c	;volatile
  3095                           
  3096                           ;MachineConfig.c: 53: TMR1IE = 1;
  3097  00235E  809D               	bsf	3997,0,c	;volatile
  3098                           
  3099                           ;MachineConfig.c: 54: TMR2IE = 1;
  3100  002360  829D               	bsf	3997,1,c	;volatile
  3101                           
  3102                           ;MachineConfig.c: 55: TMR3IE = 1;
  3103  002362  82A0               	bsf	4000,1,c	;volatile
  3104                           
  3105                           ;MachineConfig.c: 56: PEIE = 1;
  3106  002364  8CF2               	bsf	intcon,6,c	;volatile
  3107                           
  3108                           ;MachineConfig.c: 57: (INTCONbits.GIE = 0);
  3109  002366  9EF2               	bcf	intcon,7,c	;volatile
  3110  002368  0012               	return		;funcret
  3111  00236A                     __end_of_machineConfig:
  3112                           	opt stack 0
  3113                           tblptru	equ	0xFF8
  3114                           tblptrh	equ	0xFF7
  3115                           tblptrl	equ	0xFF6
  3116                           tablat	equ	0xFF5
  3117                           prodh	equ	0xFF4
  3118                           prodl	equ	0xFF3
  3119                           intcon	equ	0xFF2
  3120                           intcon3	equ	0xFF0
  3121                           postinc0	equ	0xFEE
  3122                           wreg	equ	0xFE8
  3123                           postdec1	equ	0xFE5
  3124                           fsr1l	equ	0xFE1
  3125                           indf2	equ	0xFDF
  3126                           postinc2	equ	0xFDE
  3127                           postdec2	equ	0xFDD
  3128                           fsr2h	equ	0xFDA
  3129                           fsr2l	equ	0xFD9
  3130                           status	equ	0xFD8
  3131                           
  3132 ;; *************** function _initUI *****************
  3133 ;; Defined at:
  3134 ;;		line 60 in file "UI.c"
  3135 ;; Parameters:    Size  Location     Type
  3136 ;;		None
  3137 ;; Auto vars:     Size  Location     Type
  3138 ;;		None
  3139 ;; Return value:  Size  Location     Type
  3140 ;;                  1    wreg      void 
  3141 ;; Registers used:
  3142 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3143 ;; Tracked objects:
  3144 ;;		On entry : 0/0
  3145 ;;		On exit  : 0/0
  3146 ;;		Unchanged: 0/0
  3147 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3148 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3149 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3150 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3151 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3152 ;;Total ram usage:        0 bytes
  3153 ;; Hardware stack levels used:    1
  3154 ;; Hardware stack levels required when called:   12
  3155 ;; This function calls:
  3156 ;;		_change_state_to_menu_start
  3157 ;;		_loadRTC
  3158 ;; This function is called by:
  3159 ;;		_main
  3160 ;; This function uses a non-reentrant model
  3161 ;;
  3162                           
  3163                           	psect	text11
  3164  002866                     __ptext11:
  3165                           	opt stack 0
  3166  002866                     _initUI:
  3167                           	opt stack 18
  3168                           
  3169                           ;UI.c: 61: (INTCONbits.GIE = 1);
  3170                           
  3171                           ;incstack = 0
  3172  002866  8EF2               	bsf	intcon,7,c	;volatile
  3173                           
  3174                           ;UI.c: 62: machine_state = UI_state;
  3175  002868  0E00               	movlw	0
  3176  00286A  0100               	movlb	0	; () banked
  3177  00286C  6FF1               	movwf	_machine_state& (0+255),b
  3178                           
  3179                           ; BSR set to: 0
  3180                           ;UI.c: 64: loadRTC();
  3181  00286E  EC09  F00F         	call	_loadRTC	;wreg free
  3182                           
  3183                           ;UI.c: 66: change_state_to_menu_start();
  3184  002872  EC9D  F013         	call	_change_state_to_menu_start	;wreg free
  3185                           
  3186                           ;UI.c: 67: firstboot = 1;
  3187  002876  0E00               	movlw	0
  3188  002878  6E6A               	movwf	_firstboot+1,c
  3189  00287A  0E01               	movlw	1
  3190  00287C  6E69               	movwf	_firstboot,c
  3191  00287E  0012               	return		;funcret
  3192  002880                     __end_of_initUI:
  3193                           	opt stack 0
  3194                           tblptru	equ	0xFF8
  3195                           tblptrh	equ	0xFF7
  3196                           tblptrl	equ	0xFF6
  3197                           tablat	equ	0xFF5
  3198                           prodh	equ	0xFF4
  3199                           prodl	equ	0xFF3
  3200                           intcon	equ	0xFF2
  3201                           intcon3	equ	0xFF0
  3202                           postinc0	equ	0xFEE
  3203                           wreg	equ	0xFE8
  3204                           postdec1	equ	0xFE5
  3205                           fsr1l	equ	0xFE1
  3206                           indf2	equ	0xFDF
  3207                           postinc2	equ	0xFDE
  3208                           postdec2	equ	0xFDD
  3209                           fsr2h	equ	0xFDA
  3210                           fsr2l	equ	0xFD9
  3211                           status	equ	0xFD8
  3212                           
  3213 ;; *************** function _loadRTC *****************
  3214 ;; Defined at:
  3215 ;;		line 26 in file "RTC.c"
  3216 ;; Parameters:    Size  Location     Type
  3217 ;;		None
  3218 ;; Auto vars:     Size  Location     Type
  3219 ;;  i               2   22[BANK0 ] int 
  3220 ;; Return value:  Size  Location     Type
  3221 ;;                  1    wreg      void 
  3222 ;; Registers used:
  3223 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3224 ;; Tracked objects:
  3225 ;;		On entry : 0/0
  3226 ;;		On exit  : 0/0
  3227 ;;		Unchanged: 0/0
  3228 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3229 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3230 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3231 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3232 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3233 ;;Total ram usage:        3 bytes
  3234 ;; Hardware stack levels used:    1
  3235 ;; Hardware stack levels required when called:    9
  3236 ;; This function calls:
  3237 ;;		_I2C_Master_Init
  3238 ;;		_I2C_Master_Start
  3239 ;;		_I2C_Master_Stop
  3240 ;;		_I2C_Master_Write
  3241 ;; This function is called by:
  3242 ;;		_initUI
  3243 ;; This function uses a non-reentrant model
  3244 ;;
  3245                           
  3246                           	psect	text12
  3247  001E12                     __ptext12:
  3248                           	opt stack 0
  3249  001E12                     _loadRTC:
  3250                           	opt stack 20
  3251                           
  3252                           ;RTC.c: 28: I2C_Master_Init(10000);
  3253                           
  3254                           ;incstack = 0
  3255  001E12  0E10               	movlw	16
  3256  001E14  0100               	movlb	0	; () banked
  3257  001E16  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  3258  001E18  0E27               	movlw	39
  3259  001E1A  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  3260  001E1C  0E00               	movlw	0
  3261  001E1E  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  3262  001E20  0E00               	movlw	0
  3263  001E22  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  3264  001E24  ECE2  F010         	call	_I2C_Master_Init	;wreg free
  3265                           
  3266                           ;RTC.c: 30: (INTCONbits.GIE = 0);
  3267  001E28  9EF2               	bcf	intcon,7,c	;volatile
  3268                           
  3269                           ;RTC.c: 32: I2C_Master_Start();
  3270  001E2A  ECA5  F014         	call	_I2C_Master_Start	;wreg free
  3271                           
  3272                           ;RTC.c: 33: I2C_Master_Write(0b11010000);
  3273  001E2E  0E00               	movlw	0
  3274  001E30  0100               	movlb	0	; () banked
  3275  001E32  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  3276  001E34  0ED0               	movlw	208
  3277  001E36  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  3278  001E38  EC93  F014         	call	_I2C_Master_Write	;wreg free
  3279                           
  3280                           ;RTC.c: 34: I2C_Master_Write(0x00);
  3281  001E3C  0E00               	movlw	0
  3282  001E3E  0100               	movlb	0	; () banked
  3283  001E40  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  3284  001E42  0E00               	movlw	0
  3285  001E44  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  3286  001E46  EC93  F014         	call	_I2C_Master_Write	;wreg free
  3287                           
  3288                           ;RTC.c: 35: for(int i = 0; i<7; i++){
  3289  001E4A  0E00               	movlw	0
  3290  001E4C  0100               	movlb	0	; () banked
  3291  001E4E  6F97               	movwf	(loadRTC@i+1)& (0+255),b
  3292  001E50  0E00               	movlw	0
  3293  001E52  6F96               	movwf	loadRTC@i& (0+255),b
  3294  001E54                     l4635:
  3295                           
  3296                           ; BSR set to: 0
  3297  001E54  0100               	movlb	0	; () banked
  3298  001E56  BF97               	btfsc	(loadRTC@i+1)& (0+255),7,b
  3299  001E58  D008               	goto	l4639
  3300  001E5A  0100               	movlb	0	; () banked
  3301  001E5C  5197               	movf	(loadRTC@i+1)& (0+255),w,b
  3302  001E5E  E11B               	bnz	l4645
  3303  001E60  0E07               	movlw	7
  3304  001E62  0100               	movlb	0	; () banked
  3305  001E64  5D96               	subwf	loadRTC@i& (0+255),w,b
  3306  001E66  B0D8               	btfsc	status,0,c
  3307  001E68  D016               	goto	l4645
  3308  001E6A                     l4639:
  3309                           
  3310                           ; BSR set to: 0
  3311                           ;RTC.c: 36: I2C_Master_Write(time[i]);
  3312  001E6A  0ED4               	movlw	low _time
  3313  001E6C  0100               	movlb	0	; () banked
  3314  001E6E  2596               	addwf	loadRTC@i& (0+255),w,b
  3315  001E70  6ED9               	movwf	fsr2l,c
  3316  001E72  0E00               	movlw	high _time
  3317  001E74  0100               	movlb	0	; () banked
  3318  001E76  2197               	addwfc	(loadRTC@i+1)& (0+255),w,b
  3319  001E78  6EDA               	movwf	fsr2h,c
  3320  001E7A  50DF               	movf	indf2,w,c
  3321  001E7C  0100               	movlb	0	; () banked
  3322  001E7E  6F95               	movwf	??_loadRTC& (0+255),b
  3323  001E80  0100               	movlb	0	; () banked
  3324  001E82  5195               	movf	??_loadRTC& (0+255),w,b
  3325  001E84  0100               	movlb	0	; () banked
  3326  001E86  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  3327  001E88  6B82               	clrf	(I2C_Master_Write@d+1)& (0+255),b
  3328  001E8A  EC93  F014         	call	_I2C_Master_Write	;wreg free
  3329  001E8E  0100               	movlb	0	; () banked
  3330  001E90  4B96               	infsnz	loadRTC@i& (0+255),f,b
  3331  001E92  2B97               	incf	(loadRTC@i+1)& (0+255),f,b
  3332  001E94  D7DF               	goto	l4635
  3333  001E96                     l4645:
  3334                           
  3335                           ; BSR set to: 0
  3336                           ;RTC.c: 37: }
  3337                           ;RTC.c: 38: I2C_Master_Stop();
  3338  001E96  ECA1  F014         	call	_I2C_Master_Stop	;wreg free
  3339                           
  3340                           ;RTC.c: 39: (INTCONbits.GIE = 1);
  3341  001E9A  8EF2               	bsf	intcon,7,c	;volatile
  3342  001E9C  0012               	return		;funcret
  3343  001E9E                     __end_of_loadRTC:
  3344                           	opt stack 0
  3345                           tblptru	equ	0xFF8
  3346                           tblptrh	equ	0xFF7
  3347                           tblptrl	equ	0xFF6
  3348                           tablat	equ	0xFF5
  3349                           prodh	equ	0xFF4
  3350                           prodl	equ	0xFF3
  3351                           intcon	equ	0xFF2
  3352                           intcon3	equ	0xFF0
  3353                           postinc0	equ	0xFEE
  3354                           wreg	equ	0xFE8
  3355                           postdec1	equ	0xFE5
  3356                           fsr1l	equ	0xFE1
  3357                           indf2	equ	0xFDF
  3358                           postinc2	equ	0xFDE
  3359                           postdec2	equ	0xFDD
  3360                           fsr2h	equ	0xFDA
  3361                           fsr2l	equ	0xFD9
  3362                           status	equ	0xFD8
  3363                           
  3364 ;; *************** function _I2C_Master_Init *****************
  3365 ;; Defined at:
  3366 ;;		line 13 in file "I2C.c"
  3367 ;; Parameters:    Size  Location     Type
  3368 ;;  c               4   13[BANK0 ] const unsigned long 
  3369 ;; Auto vars:     Size  Location     Type
  3370 ;;		None
  3371 ;; Return value:  Size  Location     Type
  3372 ;;                  1    wreg      void 
  3373 ;; Registers used:
  3374 ;;		wreg, status,2, status,0, cstack
  3375 ;; Tracked objects:
  3376 ;;		On entry : 0/0
  3377 ;;		On exit  : 0/0
  3378 ;;		Unchanged: 0/0
  3379 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3380 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3381 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3382 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3383 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3384 ;;Total ram usage:        8 bytes
  3385 ;; Hardware stack levels used:    1
  3386 ;; Hardware stack levels required when called:    8
  3387 ;; This function calls:
  3388 ;;		___lldiv
  3389 ;; This function is called by:
  3390 ;;		_loadRTC
  3391 ;; This function uses a non-reentrant model
  3392 ;;
  3393                           
  3394                           	psect	text13
  3395  0021C4                     __ptext13:
  3396                           	opt stack 0
  3397  0021C4                     _I2C_Master_Init:
  3398                           	opt stack 20
  3399                           
  3400                           ;I2C.c: 16: SSPSTAT = 0b00000000;
  3401                           
  3402                           ;incstack = 0
  3403  0021C4  0E00               	movlw	0
  3404  0021C6  6EC7               	movwf	4039,c	;volatile
  3405                           
  3406                           ;I2C.c: 17: SSPCON1 = 0b00101000;
  3407  0021C8  0E28               	movlw	40
  3408  0021CA  6EC6               	movwf	4038,c	;volatile
  3409                           
  3410                           ;I2C.c: 18: SSPCON2 = 0b00000000;
  3411  0021CC  0E00               	movlw	0
  3412  0021CE  6EC5               	movwf	4037,c	;volatile
  3413                           
  3414                           ;I2C.c: 19: SSPADD = (32000000/(4*c))-1;
  3415  0021D0  0E00               	movlw	0
  3416  0021D2  0100               	movlb	0	; () banked
  3417  0021D4  6F80               	movwf	___lldiv@dividend& (0+255),b
  3418  0021D6  0E48               	movlw	72
  3419  0021D8  6F81               	movwf	(___lldiv@dividend+1)& (0+255),b
  3420  0021DA  0EE8               	movlw	232
  3421  0021DC  6F82               	movwf	(___lldiv@dividend+2)& (0+255),b
  3422  0021DE  0E01               	movlw	1
  3423  0021E0  6F83               	movwf	(___lldiv@dividend+3)& (0+255),b
  3424  0021E2  C08D  F091         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  3425  0021E6  C08E  F092         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  3426  0021EA  C08F  F093         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  3427  0021EE  C090  F094         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  3428  0021F2  0E02               	movlw	2
  3429  0021F4                     u3165:
  3430  0021F4  90D8               	bcf	status,0,c
  3431  0021F6  0100               	movlb	0	; () banked
  3432  0021F8  3791               	rlcf	??_I2C_Master_Init& (0+255),f,b
  3433  0021FA  3792               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
  3434  0021FC  3793               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
  3435  0021FE  3794               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
  3436  002200  2EE8               	decfsz	wreg,f,c
  3437  002202  D7F8               	goto	u3165
  3438  002204  C091  F084         	movff	??_I2C_Master_Init,___lldiv@divisor
  3439  002208  C092  F085         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  3440  00220C  C093  F086         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  3441  002210  C094  F087         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  3442  002214  EC1B  F00D         	call	___lldiv	;wreg free
  3443  002218  0100               	movlb	0	; () banked
  3444  00221A  0580               	decf	?___lldiv& (0+255),w,b
  3445  00221C  6EC8               	movwf	4040,c	;volatile
  3446                           
  3447                           ; BSR set to: 0
  3448                           ;I2C.c: 20: TRISC3 = 1;
  3449  00221E  8694               	bsf	3988,3,c	;volatile
  3450                           
  3451                           ; BSR set to: 0
  3452                           ;I2C.c: 21: TRISC4 = 1;
  3453  002220  8894               	bsf	3988,4,c	;volatile
  3454                           
  3455                           ; BSR set to: 0
  3456  002222  0012               	return		;funcret
  3457  002224                     __end_of_I2C_Master_Init:
  3458                           	opt stack 0
  3459                           tblptru	equ	0xFF8
  3460                           tblptrh	equ	0xFF7
  3461                           tblptrl	equ	0xFF6
  3462                           tablat	equ	0xFF5
  3463                           prodh	equ	0xFF4
  3464                           prodl	equ	0xFF3
  3465                           intcon	equ	0xFF2
  3466                           intcon3	equ	0xFF0
  3467                           postinc0	equ	0xFEE
  3468                           wreg	equ	0xFE8
  3469                           postdec1	equ	0xFE5
  3470                           fsr1l	equ	0xFE1
  3471                           indf2	equ	0xFDF
  3472                           postinc2	equ	0xFDE
  3473                           postdec2	equ	0xFDD
  3474                           fsr2h	equ	0xFDA
  3475                           fsr2l	equ	0xFD9
  3476                           status	equ	0xFD8
  3477                           
  3478 ;; *************** function ___lldiv *****************
  3479 ;; Defined at:
  3480 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  3481 ;; Parameters:    Size  Location     Type
  3482 ;;  dividend        4    0[BANK0 ] unsigned long 
  3483 ;;  divisor         4    4[BANK0 ] unsigned long 
  3484 ;; Auto vars:     Size  Location     Type
  3485 ;;  quotient        4    8[BANK0 ] unsigned long 
  3486 ;;  counter         1   12[BANK0 ] unsigned char 
  3487 ;; Return value:  Size  Location     Type
  3488 ;;                  4    0[BANK0 ] unsigned long 
  3489 ;; Registers used:
  3490 ;;		wreg, status,2, status,0
  3491 ;; Tracked objects:
  3492 ;;		On entry : 0/0
  3493 ;;		On exit  : 0/0
  3494 ;;		Unchanged: 0/0
  3495 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3496 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3497 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3498 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3499 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3500 ;;Total ram usage:       13 bytes
  3501 ;; Hardware stack levels used:    1
  3502 ;; Hardware stack levels required when called:    7
  3503 ;; This function calls:
  3504 ;;		Nothing
  3505 ;; This function is called by:
  3506 ;;		_I2C_Master_Init
  3507 ;; This function uses a non-reentrant model
  3508 ;;
  3509                           
  3510                           	psect	text14
  3511  001A36                     __ptext14:
  3512                           	opt stack 0
  3513  001A36                     ___lldiv:
  3514                           	opt stack 20
  3515                           
  3516                           ; BSR set to: 0
  3517                           ;incstack = 0
  3518  001A36  0E00               	movlw	0
  3519  001A38  0100               	movlb	0	; () banked
  3520  001A3A  6F88               	movwf	___lldiv@quotient& (0+255),b
  3521  001A3C  0E00               	movlw	0
  3522  001A3E  6F89               	movwf	(___lldiv@quotient+1)& (0+255),b
  3523  001A40  0E00               	movlw	0
  3524  001A42  6F8A               	movwf	(___lldiv@quotient+2)& (0+255),b
  3525  001A44  0E00               	movlw	0
  3526  001A46  6F8B               	movwf	(___lldiv@quotient+3)& (0+255),b
  3527                           
  3528                           ; BSR set to: 0
  3529  001A48  0100               	movlb	0	; () banked
  3530  001A4A  5184               	movf	___lldiv@divisor& (0+255),w,b
  3531  001A4C  0100               	movlb	0	; () banked
  3532  001A4E  1185               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  3533  001A50  0100               	movlb	0	; () banked
  3534  001A52  1186               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  3535  001A54  0100               	movlb	0	; () banked
  3536  001A56  1187               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  3537  001A58  B4D8               	btfsc	status,2,c
  3538  001A5A  D042               	goto	l1577
  3539                           
  3540                           ; BSR set to: 0
  3541  001A5C  0E01               	movlw	1
  3542  001A5E  0100               	movlb	0	; () banked
  3543  001A60  6F8C               	movwf	___lldiv@counter& (0+255),b
  3544  001A62  D008               	goto	l4197
  3545  001A64                     l4195:
  3546                           
  3547                           ; BSR set to: 0
  3548  001A64  0100               	movlb	0	; () banked
  3549  001A66  90D8               	bcf	status,0,c
  3550  001A68  3784               	rlcf	___lldiv@divisor& (0+255),f,b
  3551  001A6A  3785               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  3552  001A6C  3786               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  3553  001A6E  3787               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  3554  001A70  0100               	movlb	0	; () banked
  3555  001A72  2B8C               	incf	___lldiv@counter& (0+255),f,b
  3556  001A74                     l4197:
  3557                           
  3558                           ; BSR set to: 0
  3559  001A74  0100               	movlb	0	; () banked
  3560  001A76  AF87               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  3561  001A78  D7F5               	goto	l4195
  3562  001A7A                     l4199:
  3563                           
  3564                           ; BSR set to: 0
  3565  001A7A  0100               	movlb	0	; () banked
  3566  001A7C  90D8               	bcf	status,0,c
  3567  001A7E  3788               	rlcf	___lldiv@quotient& (0+255),f,b
  3568  001A80  3789               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  3569  001A82  378A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  3570  001A84  378B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  3571                           
  3572                           ; BSR set to: 0
  3573  001A86  0100               	movlb	0	; () banked
  3574  001A88  5184               	movf	___lldiv@divisor& (0+255),w,b
  3575  001A8A  0100               	movlb	0	; () banked
  3576  001A8C  5D80               	subwf	___lldiv@dividend& (0+255),w,b
  3577  001A8E  0100               	movlb	0	; () banked
  3578  001A90  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  3579  001A92  0100               	movlb	0	; () banked
  3580  001A94  5981               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  3581  001A96  0100               	movlb	0	; () banked
  3582  001A98  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  3583  001A9A  0100               	movlb	0	; () banked
  3584  001A9C  5982               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  3585  001A9E  0100               	movlb	0	; () banked
  3586  001AA0  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  3587  001AA2  0100               	movlb	0	; () banked
  3588  001AA4  5983               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  3589  001AA6  A0D8               	btfss	status,0,c
  3590  001AA8  D012               	goto	l4207
  3591                           
  3592                           ; BSR set to: 0
  3593  001AAA  0100               	movlb	0	; () banked
  3594  001AAC  5184               	movf	___lldiv@divisor& (0+255),w,b
  3595  001AAE  0100               	movlb	0	; () banked
  3596  001AB0  5F80               	subwf	___lldiv@dividend& (0+255),f,b
  3597  001AB2  0100               	movlb	0	; () banked
  3598  001AB4  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  3599  001AB6  0100               	movlb	0	; () banked
  3600  001AB8  5B81               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  3601  001ABA  0100               	movlb	0	; () banked
  3602  001ABC  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  3603  001ABE  0100               	movlb	0	; () banked
  3604  001AC0  5B82               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  3605  001AC2  0100               	movlb	0	; () banked
  3606  001AC4  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  3607  001AC6  0100               	movlb	0	; () banked
  3608  001AC8  5B83               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  3609                           
  3610                           ; BSR set to: 0
  3611  001ACA  0100               	movlb	0	; () banked
  3612  001ACC  8188               	bsf	___lldiv@quotient& (0+255),0,b
  3613  001ACE                     l4207:
  3614                           
  3615                           ; BSR set to: 0
  3616  001ACE  0100               	movlb	0	; () banked
  3617  001AD0  90D8               	bcf	status,0,c
  3618  001AD2  3387               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  3619  001AD4  3386               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  3620  001AD6  3385               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  3621  001AD8  3384               	rrcf	___lldiv@divisor& (0+255),f,b
  3622                           
  3623                           ; BSR set to: 0
  3624  001ADA  0100               	movlb	0	; () banked
  3625  001ADC  2F8C               	decfsz	___lldiv@counter& (0+255),f,b
  3626  001ADE  D7CD               	goto	l4199
  3627  001AE0                     l1577:
  3628                           
  3629                           ; BSR set to: 0
  3630  001AE0  C088  F080         	movff	___lldiv@quotient,?___lldiv
  3631  001AE4  C089  F081         	movff	___lldiv@quotient+1,?___lldiv+1
  3632  001AE8  C08A  F082         	movff	___lldiv@quotient+2,?___lldiv+2
  3633  001AEC  C08B  F083         	movff	___lldiv@quotient+3,?___lldiv+3
  3634                           
  3635                           ; BSR set to: 0
  3636  001AF0  0012               	return		;funcret
  3637  001AF2                     __end_of___lldiv:
  3638                           	opt stack 0
  3639                           tblptru	equ	0xFF8
  3640                           tblptrh	equ	0xFF7
  3641                           tblptrl	equ	0xFF6
  3642                           tablat	equ	0xFF5
  3643                           prodh	equ	0xFF4
  3644                           prodl	equ	0xFF3
  3645                           intcon	equ	0xFF2
  3646                           intcon3	equ	0xFF0
  3647                           postinc0	equ	0xFEE
  3648                           wreg	equ	0xFE8
  3649                           postdec1	equ	0xFE5
  3650                           fsr1l	equ	0xFE1
  3651                           indf2	equ	0xFDF
  3652                           postinc2	equ	0xFDE
  3653                           postdec2	equ	0xFDD
  3654                           fsr2h	equ	0xFDA
  3655                           fsr2l	equ	0xFD9
  3656                           status	equ	0xFD8
  3657                           
  3658 ;; *************** function _change_state_to_menu_start *****************
  3659 ;; Defined at:
  3660 ;;		line 415 in file "UI.c"
  3661 ;; Parameters:    Size  Location     Type
  3662 ;;		None
  3663 ;; Auto vars:     Size  Location     Type
  3664 ;;		None
  3665 ;; Return value:  Size  Location     Type
  3666 ;;                  1    wreg      void 
  3667 ;; Registers used:
  3668 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3669 ;; Tracked objects:
  3670 ;;		On entry : 0/0
  3671 ;;		On exit  : 0/0
  3672 ;;		Unchanged: 0/0
  3673 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3674 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3675 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3676 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3677 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3678 ;;Total ram usage:        0 bytes
  3679 ;; Hardware stack levels used:    1
  3680 ;; Hardware stack levels required when called:   11
  3681 ;; This function calls:
  3682 ;;		_lcdInst
  3683 ;;		_printRTC
  3684 ;;		_printf
  3685 ;; This function is called by:
  3686 ;;		_initUI
  3687 ;; This function uses a non-reentrant model
  3688 ;;
  3689                           
  3690                           	psect	text15
  3691  00273A                     __ptext15:
  3692                           	opt stack 0
  3693  00273A                     _change_state_to_menu_start:
  3694                           	opt stack 18
  3695                           
  3696                           ;UI.c: 416: cur_state = 0;
  3697                           
  3698                           ; BSR set to: 0
  3699                           ;incstack = 0
  3700  00273A  0E00               	movlw	0
  3701  00273C  0100               	movlb	0	; () banked
  3702  00273E  6FE0               	movwf	(_cur_state+1)& (0+255),b
  3703  002740  0E00               	movlw	0
  3704  002742  6FDF               	movwf	_cur_state& (0+255),b
  3705                           
  3706                           ; BSR set to: 0
  3707                           ;UI.c: 418: lcdInst(0b10000000);;
  3708  002744  0E80               	movlw	128
  3709  002746  EC79  F014         	call	_lcdInst
  3710                           
  3711                           ;UI.c: 419: printRTC();
  3712  00274A  EC63  F006         	call	_printRTC	;wreg free
  3713                           
  3714                           ;UI.c: 420: lcdInst(0b11000000);;
  3715  00274E  0EC0               	movlw	192
  3716  002750  EC79  F014         	call	_lcdInst
  3717                           
  3718                           ;UI.c: 421: printf("PUSH TO CONTINUE");
  3719  002754  0E97               	movlw	low STR_15
  3720  002756  0100               	movlb	0	; () banked
  3721  002758  6F8E               	movwf	printf@f& (0+255),b
  3722  00275A  0EFF               	movlw	high STR_15
  3723  00275C  0100               	movlb	0	; () banked
  3724  00275E  6F8F               	movwf	(printf@f+1)& (0+255),b
  3725  002760  ECBB  F002         	call	_printf	;wreg free
  3726  002764  0012               	return		;funcret
  3727  002766                     __end_of_change_state_to_menu_start:
  3728                           	opt stack 0
  3729                           tblptru	equ	0xFF8
  3730                           tblptrh	equ	0xFF7
  3731                           tblptrl	equ	0xFF6
  3732                           tablat	equ	0xFF5
  3733                           prodh	equ	0xFF4
  3734                           prodl	equ	0xFF3
  3735                           intcon	equ	0xFF2
  3736                           intcon3	equ	0xFF0
  3737                           postinc0	equ	0xFEE
  3738                           wreg	equ	0xFE8
  3739                           postdec1	equ	0xFE5
  3740                           fsr1l	equ	0xFE1
  3741                           indf2	equ	0xFDF
  3742                           postinc2	equ	0xFDE
  3743                           postdec2	equ	0xFDD
  3744                           fsr2h	equ	0xFDA
  3745                           fsr2l	equ	0xFD9
  3746                           status	equ	0xFD8
  3747                           
  3748 ;; *************** function _initTime *****************
  3749 ;; Defined at:
  3750 ;;		line 15 in file "RTC.c"
  3751 ;; Parameters:    Size  Location     Type
  3752 ;;  s               1    wreg     unsigned char 
  3753 ;;  m               1    0[BANK0 ] unsigned char 
  3754 ;;  h               1    1[BANK0 ] unsigned char 
  3755 ;;  w               1    2[BANK0 ] unsigned char 
  3756 ;;  DD              1    3[BANK0 ] unsigned char 
  3757 ;;  MM              1    4[BANK0 ] unsigned char 
  3758 ;;  YY              1    5[BANK0 ] unsigned char 
  3759 ;; Auto vars:     Size  Location     Type
  3760 ;;  s               1    6[BANK0 ] unsigned char 
  3761 ;; Return value:  Size  Location     Type
  3762 ;;                  1    wreg      void 
  3763 ;; Registers used:
  3764 ;;		wreg
  3765 ;; Tracked objects:
  3766 ;;		On entry : 0/0
  3767 ;;		On exit  : 0/0
  3768 ;;		Unchanged: 0/0
  3769 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3770 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3771 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3772 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3773 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3774 ;;Total ram usage:        7 bytes
  3775 ;; Hardware stack levels used:    1
  3776 ;; Hardware stack levels required when called:    7
  3777 ;; This function calls:
  3778 ;;		Nothing
  3779 ;; This function is called by:
  3780 ;;		_main
  3781 ;; This function uses a non-reentrant model
  3782 ;;
  3783                           
  3784                           	psect	text16
  3785  002826                     __ptext16:
  3786                           	opt stack 0
  3787  002826                     _initTime:
  3788                           	opt stack 23
  3789                           
  3790                           ;incstack = 0
  3791                           ;initTime@s stored from wreg
  3792  002826  0100               	movlb	0	; () banked
  3793  002828  6F86               	movwf	initTime@s& (0+255),b
  3794                           
  3795                           ;RTC.c: 17: time[0] = s;
  3796  00282A  C086  F0D4         	movff	initTime@s,_time
  3797                           
  3798                           ;RTC.c: 18: time[1] = m;
  3799  00282E  C080  F0D5         	movff	initTime@m,_time+1
  3800                           
  3801                           ;RTC.c: 19: time[2] = h;
  3802  002832  C081  F0D6         	movff	initTime@h,_time+2
  3803                           
  3804                           ;RTC.c: 20: time[3] = w;
  3805  002836  C082  F0D7         	movff	initTime@w,_time+3
  3806                           
  3807                           ;RTC.c: 21: time[4] = DD;
  3808  00283A  C083  F0D8         	movff	initTime@DD,_time+4
  3809                           
  3810                           ;RTC.c: 22: time[5] = MM;
  3811  00283E  C084  F0D9         	movff	initTime@MM,_time+5
  3812                           
  3813                           ;RTC.c: 23: time[6] = YY;
  3814  002842  C085  F0DA         	movff	initTime@YY,_time+6
  3815  002846  0012               	return		;funcret
  3816  002848                     __end_of_initTime:
  3817                           	opt stack 0
  3818                           tblptru	equ	0xFF8
  3819                           tblptrh	equ	0xFF7
  3820                           tblptrl	equ	0xFF6
  3821                           tablat	equ	0xFF5
  3822                           prodh	equ	0xFF4
  3823                           prodl	equ	0xFF3
  3824                           intcon	equ	0xFF2
  3825                           intcon3	equ	0xFF0
  3826                           postinc0	equ	0xFEE
  3827                           wreg	equ	0xFE8
  3828                           postdec1	equ	0xFE5
  3829                           fsr1l	equ	0xFE1
  3830                           indf2	equ	0xFDF
  3831                           postinc2	equ	0xFDE
  3832                           postdec2	equ	0xFDD
  3833                           fsr2h	equ	0xFDA
  3834                           fsr2l	equ	0xFD9
  3835                           status	equ	0xFD8
  3836                           
  3837 ;; *************** function _initLCD *****************
  3838 ;; Defined at:
  3839 ;;		line 46 in file "lcd.c"
  3840 ;; Parameters:    Size  Location     Type
  3841 ;;		None
  3842 ;; Auto vars:     Size  Location     Type
  3843 ;;		None
  3844 ;; Return value:  Size  Location     Type
  3845 ;;                  1    wreg      void 
  3846 ;; Registers used:
  3847 ;;		wreg, status,2, status,0, cstack
  3848 ;; Tracked objects:
  3849 ;;		On entry : 0/0
  3850 ;;		On exit  : 0/0
  3851 ;;		Unchanged: 0/0
  3852 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3853 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3854 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3855 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3856 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3857 ;;Total ram usage:        1 bytes
  3858 ;; Hardware stack levels used:    1
  3859 ;; Hardware stack levels required when called:    9
  3860 ;; This function calls:
  3861 ;;		_lcdInst
  3862 ;; This function is called by:
  3863 ;;		_main
  3864 ;; This function uses a non-reentrant model
  3865 ;;
  3866                           
  3867                           	psect	text17
  3868  00236A                     __ptext17:
  3869                           	opt stack 0
  3870  00236A                     _initLCD:
  3871                           	opt stack 21
  3872                           
  3873                           ;lcd.c: 47: _delay((unsigned long)((15)*(32000000/4000.0)));
  3874                           
  3875                           ;incstack = 0
  3876  00236A  0E9C               	movlw	156
  3877  00236C  0100               	movlb	0	; () banked
  3878  00236E  6F83               	movwf	??_initLCD& (0+255),b
  3879  002370  0ED7               	movlw	215
  3880  002372                     u4597:
  3881  002372  2EE8               	decfsz	wreg,f,c
  3882  002374  D7FE               	bra	u4597
  3883  002376  2F83               	decfsz	??_initLCD& (0+255),f,b
  3884  002378  D7FC               	bra	u4597
  3885                           
  3886                           ;lcd.c: 48: lcdInst(0b00110011);
  3887  00237A  0E33               	movlw	51
  3888  00237C  EC79  F014         	call	_lcdInst
  3889                           
  3890                           ;lcd.c: 49: lcdInst(0b00110010);
  3891  002380  0E32               	movlw	50
  3892  002382  EC79  F014         	call	_lcdInst
  3893                           
  3894                           ;lcd.c: 51: lcdInst(0b00101000);
  3895  002386  0E28               	movlw	40
  3896  002388  EC79  F014         	call	_lcdInst
  3897                           
  3898                           ;lcd.c: 52: lcdInst(0b00001100);
  3899  00238C  0E0C               	movlw	12
  3900  00238E  EC79  F014         	call	_lcdInst
  3901                           
  3902                           ;lcd.c: 53: lcdInst(0b00000110);
  3903  002392  0E06               	movlw	6
  3904  002394  EC79  F014         	call	_lcdInst
  3905                           
  3906                           ;lcd.c: 54: lcdInst(0b00000001);
  3907  002398  0E01               	movlw	1
  3908  00239A  EC79  F014         	call	_lcdInst
  3909                           
  3910                           ;lcd.c: 55: _delay((unsigned long)((15)*(32000000/4000.0)));
  3911  00239E  0E9C               	movlw	156
  3912  0023A0  0100               	movlb	0	; () banked
  3913  0023A2  6F83               	movwf	??_initLCD& (0+255),b
  3914  0023A4  0ED7               	movlw	215
  3915  0023A6                     u4607:
  3916  0023A6  2EE8               	decfsz	wreg,f,c
  3917  0023A8  D7FE               	bra	u4607
  3918  0023AA  2F83               	decfsz	??_initLCD& (0+255),f,b
  3919  0023AC  D7FC               	bra	u4607
  3920  0023AE  0012               	return		;funcret
  3921  0023B0                     __end_of_initLCD:
  3922                           	opt stack 0
  3923                           tblptru	equ	0xFF8
  3924                           tblptrh	equ	0xFF7
  3925                           tblptrl	equ	0xFF6
  3926                           tablat	equ	0xFF5
  3927                           prodh	equ	0xFF4
  3928                           prodl	equ	0xFF3
  3929                           intcon	equ	0xFF2
  3930                           intcon3	equ	0xFF0
  3931                           postinc0	equ	0xFEE
  3932                           wreg	equ	0xFE8
  3933                           postdec1	equ	0xFE5
  3934                           fsr1l	equ	0xFE1
  3935                           indf2	equ	0xFDF
  3936                           postinc2	equ	0xFDE
  3937                           postdec2	equ	0xFDD
  3938                           fsr2h	equ	0xFDA
  3939                           fsr2l	equ	0xFD9
  3940                           status	equ	0xFD8
  3941                           
  3942 ;; *************** function _UI *****************
  3943 ;; Defined at:
  3944 ;;		line 71 in file "UI.c"
  3945 ;; Parameters:    Size  Location     Type
  3946 ;;		None
  3947 ;; Auto vars:     Size  Location     Type
  3948 ;;  i               1   83[BANK0 ] unsigned char 
  3949 ;;  i               1   82[BANK0 ] unsigned char 
  3950 ;;  i               1   81[BANK0 ] unsigned char 
  3951 ;;  i               1   80[BANK0 ] unsigned char 
  3952 ;;  i               1   79[BANK0 ] unsigned char 
  3953 ;;  i               1   78[BANK0 ] unsigned char 
  3954 ;;  i               1   77[BANK0 ] unsigned char 
  3955 ;;  i               1   76[BANK0 ] unsigned char 
  3956 ;;  i               1   75[BANK0 ] unsigned char 
  3957 ;;  i               1   74[BANK0 ] unsigned char 
  3958 ;;  i               1   73[BANK0 ] unsigned char 
  3959 ;;  i               1   72[BANK0 ] unsigned char 
  3960 ;;  i               1   71[BANK0 ] unsigned char 
  3961 ;; Return value:  Size  Location     Type
  3962 ;;                  1    wreg      void 
  3963 ;; Registers used:
  3964 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3965 ;; Tracked objects:
  3966 ;;		On entry : 0/0
  3967 ;;		On exit  : 0/0
  3968 ;;		Unchanged: 0/0
  3969 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3970 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3971 ;;      Locals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3972 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3973 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3974 ;;Total ram usage:       16 bytes
  3975 ;; Hardware stack levels used:    1
  3976 ;; Hardware stack levels required when called:   11
  3977 ;; This function calls:
  3978 ;;		___awdiv
  3979 ;;		___awmod
  3980 ;;		_change_state_to_menu_12
  3981 ;;		_change_state_to_menu_22
  3982 ;;		_lcdInst
  3983 ;;		_printRTC
  3984 ;;		_printf
  3985 ;; This function is called by:
  3986 ;;		_main
  3987 ;; This function uses a non-reentrant model
  3988 ;;
  3989                           
  3990                           	psect	text18
  3991  000012                     __ptext18:
  3992                           	opt stack 0
  3993  000012                     _UI:
  3994                           	opt stack 19
  3995                           
  3996                           ;UI.c: 72: if(machine_state == DoneSorting_state){
  3997                           
  3998                           ;incstack = 0
  3999  000012  0E02               	movlw	2
  4000  000014  0100               	movlb	0	; () banked
  4001  000016  19F1               	xorwf	_machine_state& (0+255),w,b
  4002  000018  A4D8               	btfss	status,2,c
  4003  00001A  D071               	goto	l5013
  4004                           
  4005                           ; BSR set to: 0
  4006                           ;UI.c: 73: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  4007  00001C  0E01               	movlw	1
  4008  00001E  EC79  F014         	call	_lcdInst
  4009  000022  0E68               	movlw	104
  4010  000024  0100               	movlb	0	; () banked
  4011  000026  6FC4               	movwf	??_UI& (0+255),b
  4012  000028  0EE4               	movlw	228
  4013  00002A                     u4617:
  4014  00002A  2EE8               	decfsz	wreg,f,c
  4015  00002C  D7FE               	bra	u4617
  4016  00002E  2FC4               	decfsz	??_UI& (0+255),f,b
  4017  000030  D7FC               	bra	u4617
  4018  000032  F000               	nop	
  4019                           
  4020                           ;UI.c: 74: lcdInst(0b10000000);;
  4021  000034  0E80               	movlw	128
  4022  000036  EC79  F014         	call	_lcdInst
  4023                           
  4024                           ;UI.c: 75: printf("!SORT CONCLUDED!");
  4025  00003A  0EBA               	movlw	low STR_1
  4026  00003C  0100               	movlb	0	; () banked
  4027  00003E  6F8E               	movwf	printf@f& (0+255),b
  4028  000040  0EFE               	movlw	high STR_1
  4029  000042  0100               	movlb	0	; () banked
  4030  000044  6F8F               	movwf	(printf@f+1)& (0+255),b
  4031  000046  ECBB  F002         	call	_printf	;wreg free
  4032                           
  4033                           ;UI.c: 76: lcdInst(0b11000000);;
  4034  00004A  0EC0               	movlw	192
  4035  00004C  EC79  F014         	call	_lcdInst
  4036                           
  4037                           ;UI.c: 77: printf("Time: %02d:%02d:%02d", 0, (total_time % 3600) / 60, (total_time % 360
      +                          0) % 60);
  4038  000050  0E0E               	movlw	14
  4039  000052  0100               	movlb	0	; () banked
  4040  000054  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  4041  000056  0E10               	movlw	16
  4042  000058  6F82               	movwf	___awmod@divisor& (0+255),b
  4043  00005A  C0EF  F080         	movff	_total_time,___awmod@dividend
  4044  00005E  C0F0  F081         	movff	_total_time+1,___awmod@dividend+1
  4045  000062  EC22  F00E         	call	___awmod	;wreg free
  4046  000066  C080  F0C5         	movff	?___awmod,_UI$2056
  4047  00006A  C081  F0C6         	movff	?___awmod+1,_UI$2056+1
  4048                           
  4049                           ;UI.c: 77: printf("Time: %02d:%02d:%02d", 0, (total_time % 3600) / 60, (total_time % 360
      +                          0) % 60);
  4050  00006E  0EE8               	movlw	low STR_2
  4051  000070  0100               	movlb	0	; () banked
  4052  000072  6F8E               	movwf	printf@f& (0+255),b
  4053  000074  0EFD               	movlw	high STR_2
  4054  000076  0100               	movlb	0	; () banked
  4055  000078  6F8F               	movwf	(printf@f+1)& (0+255),b
  4056  00007A  0E00               	movlw	0
  4057  00007C  0100               	movlb	0	; () banked
  4058  00007E  6F91               	movwf	(?_printf+3)& (0+255),b
  4059  000080  0E00               	movlw	0
  4060  000082  6F90               	movwf	(?_printf+2)& (0+255),b
  4061  000084  0E0E               	movlw	14
  4062  000086  0100               	movlb	0	; () banked
  4063  000088  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  4064  00008A  0E10               	movlw	16
  4065  00008C  6F82               	movwf	___awmod@divisor& (0+255),b
  4066  00008E  C0EF  F080         	movff	_total_time,___awmod@dividend
  4067  000092  C0F0  F081         	movff	_total_time+1,___awmod@dividend+1
  4068  000096  EC22  F00E         	call	___awmod	;wreg free
  4069  00009A  C080  F086         	movff	?___awmod,___awdiv@dividend
  4070  00009E  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  4071  0000A2  0E00               	movlw	0
  4072  0000A4  0100               	movlb	0	; () banked
  4073  0000A6  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  4074  0000A8  0E3C               	movlw	60
  4075  0000AA  6F88               	movwf	___awdiv@divisor& (0+255),b
  4076  0000AC  ECBC  F00C         	call	___awdiv	;wreg free
  4077  0000B0  C086  F092         	movff	?___awdiv,?_printf+4
  4078  0000B4  C087  F093         	movff	?___awdiv+1,?_printf+5
  4079  0000B8  C0C5  F080         	movff	_UI$2056,___awmod@dividend
  4080  0000BC  C0C6  F081         	movff	_UI$2056+1,___awmod@dividend+1
  4081  0000C0  0E00               	movlw	0
  4082  0000C2  0100               	movlb	0	; () banked
  4083  0000C4  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  4084  0000C6  0E3C               	movlw	60
  4085  0000C8  6F82               	movwf	___awmod@divisor& (0+255),b
  4086  0000CA  EC22  F00E         	call	___awmod	;wreg free
  4087  0000CE  C080  F094         	movff	?___awmod,?_printf+6
  4088  0000D2  C081  F095         	movff	?___awmod+1,?_printf+7
  4089  0000D6  ECBB  F002         	call	_printf	;wreg free
  4090                           
  4091                           ;UI.c: 78: machine_state = UI_state;
  4092  0000DA  0E00               	movlw	0
  4093  0000DC  0100               	movlb	0	; () banked
  4094  0000DE  6FF1               	movwf	_machine_state& (0+255),b
  4095  0000E0                     l335:
  4096  0000E0  A281               	btfss	3969,1,c	;volatile
  4097  0000E2  D7FE               	goto	l335
  4098                           
  4099                           ;UI.c: 81: }
  4100                           ;UI.c: 82: if(cur_state==12){
  4101  0000E4  0E0C               	movlw	12
  4102  0000E6  0100               	movlb	0	; () banked
  4103  0000E8  19DF               	xorwf	_cur_state& (0+255),w,b
  4104  0000EA  0100               	movlb	0	; () banked
  4105  0000EC  11E0               	iorwf	(_cur_state+1)& (0+255),w,b
  4106  0000EE  A4D8               	btfss	status,2,c
  4107  0000F0  D003               	goto	l5011
  4108                           
  4109                           ; BSR set to: 0
  4110                           ;UI.c: 83: change_state_to_menu_12();
  4111  0000F2  EC15  F012         	call	_change_state_to_menu_12	;wreg free
  4112                           
  4113                           ;UI.c: 84: }
  4114  0000F6  D238               	goto	l5269
  4115  0000F8                     l5011:
  4116                           
  4117                           ;UI.c: 85: else{
  4118                           ;UI.c: 86: change_state_to_menu_22();
  4119  0000F8  ECF9  F011         	call	_change_state_to_menu_22	;wreg free
  4120                           
  4121                           ;UI.c: 87: }
  4122                           ;UI.c: 88: }
  4123  0000FC  D235               	goto	l5269
  4124  0000FE                     l5013:
  4125                           
  4126                           ;UI.c: 89: else if(cur_state == 0){
  4127  0000FE  0100               	movlb	0	; () banked
  4128  000100  51DF               	movf	_cur_state& (0+255),w,b
  4129  000102  0100               	movlb	0	; () banked
  4130  000104  11E0               	iorwf	(_cur_state+1)& (0+255),w,b
  4131  000106  A4D8               	btfss	status,2,c
  4132  000108  D22F               	goto	l5269
  4133                           
  4134                           ; BSR set to: 0
  4135                           ;UI.c: 90: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
  4136  00010A  0E00               	movlw	0
  4137  00010C  0100               	movlb	0	; () banked
  4138  00010E  6FC7               	movwf	UI@i& (0+255),b
  4139  000110                     l5017:
  4140                           
  4141                           ; BSR set to: 0
  4142  000110  0E63               	movlw	99
  4143  000112  0100               	movlb	0	; () banked
  4144  000114  65C7               	cpfsgt	UI@i& (0+255),b
  4145  000116  D001               	goto	l5021
  4146  000118  D00C               	goto	l5025
  4147  00011A                     l5021:
  4148                           
  4149                           ; BSR set to: 0
  4150  00011A  0E68               	movlw	104
  4151  00011C  0100               	movlb	0	; () banked
  4152  00011E  6FC4               	movwf	??_UI& (0+255),b
  4153  000120  0EE4               	movlw	228
  4154  000122                     u4627:
  4155  000122  2EE8               	decfsz	wreg,f,c
  4156  000124  D7FE               	bra	u4627
  4157  000126  2FC4               	decfsz	??_UI& (0+255),f,b
  4158  000128  D7FC               	bra	u4627
  4159  00012A  F000               	nop	
  4160  00012C  0100               	movlb	0	; () banked
  4161  00012E  2BC7               	incf	UI@i& (0+255),f,b
  4162  000130  D7EF               	goto	l5017
  4163  000132                     l5025:
  4164                           
  4165                           ; BSR set to: 0
  4166                           ;UI.c: 91: if(cur_state == 0){
  4167  000132  0100               	movlb	0	; () banked
  4168  000134  51DF               	movf	_cur_state& (0+255),w,b
  4169  000136  0100               	movlb	0	; () banked
  4170  000138  11E0               	iorwf	(_cur_state+1)& (0+255),w,b
  4171  00013A  A4D8               	btfss	status,2,c
  4172  00013C  D215               	goto	l5269
  4173                           
  4174                           ; BSR set to: 0
  4175                           ;UI.c: 92: printRTC();
  4176  00013E  EC63  F006         	call	_printRTC	;wreg free
  4177                           
  4178                           ;UI.c: 93: }
  4179                           ;UI.c: 94: }
  4180                           ;UI.c: 95: while(logstate){
  4181  000142  D212               	goto	l5269
  4182  000144                     l5029:
  4183                           
  4184                           ;UI.c: 97: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  4185  000144  0E01               	movlw	1
  4186  000146  EC79  F014         	call	_lcdInst
  4187  00014A  0E68               	movlw	104
  4188  00014C  0100               	movlb	0	; () banked
  4189  00014E  6FC4               	movwf	??_UI& (0+255),b
  4190  000150  0EE4               	movlw	228
  4191  000152                     u4637:
  4192  000152  2EE8               	decfsz	wreg,f,c
  4193  000154  D7FE               	bra	u4637
  4194  000156  2FC4               	decfsz	??_UI& (0+255),f,b
  4195  000158  D7FC               	bra	u4637
  4196  00015A  F000               	nop	
  4197                           
  4198                           ;UI.c: 98: lcdInst(0b10000000);;
  4199  00015C  0E80               	movlw	128
  4200  00015E  EC79  F014         	call	_lcdInst
  4201                           
  4202                           ;UI.c: 99: printf("-- Log %2d here--", log);
  4203  000162  0EFD               	movlw	low STR_3
  4204  000164  0100               	movlb	0	; () banked
  4205  000166  6F8E               	movwf	printf@f& (0+255),b
  4206  000168  0EFD               	movlw	high STR_3
  4207  00016A  0100               	movlb	0	; () banked
  4208  00016C  6F8F               	movwf	(printf@f+1)& (0+255),b
  4209  00016E  C0EB  F090         	movff	_log,?_printf+2
  4210  000172  C0EC  F091         	movff	_log+1,?_printf+3
  4211  000176  ECBB  F002         	call	_printf	;wreg free
  4212                           
  4213                           ;UI.c: 100: lcdInst(0b11000000);;
  4214  00017A  0EC0               	movlw	192
  4215  00017C  EC79  F014         	call	_lcdInst
  4216                           
  4217                           ;UI.c: 101: printf("Pause:< | Back:>");
  4218  000180  0E86               	movlw	low STR_4
  4219  000182  0100               	movlb	0	; () banked
  4220  000184  6F8E               	movwf	printf@f& (0+255),b
  4221  000186  0EFF               	movlw	high STR_4
  4222  000188  0100               	movlb	0	; () banked
  4223  00018A  6F8F               	movwf	(printf@f+1)& (0+255),b
  4224  00018C  ECBB  F002         	call	_printf	;wreg free
  4225                           
  4226                           ;UI.c: 103: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  4227  000190  0E00               	movlw	0
  4228  000192  0100               	movlb	0	; () banked
  4229  000194  6FC8               	movwf	UI@i_640& (0+255),b
  4230  000196                     l5043:
  4231                           
  4232                           ; BSR set to: 0
  4233  000196  0E63               	movlw	99
  4234  000198  0100               	movlb	0	; () banked
  4235  00019A  65C8               	cpfsgt	UI@i_640& (0+255),b
  4236  00019C  D001               	goto	l5047
  4237  00019E  D00C               	goto	l5051
  4238  0001A0                     l5047:
  4239                           
  4240                           ; BSR set to: 0
  4241  0001A0  0E68               	movlw	104
  4242  0001A2  0100               	movlb	0	; () banked
  4243  0001A4  6FC4               	movwf	??_UI& (0+255),b
  4244  0001A6  0EE4               	movlw	228
  4245  0001A8                     u4647:
  4246  0001A8  2EE8               	decfsz	wreg,f,c
  4247  0001AA  D7FE               	bra	u4647
  4248  0001AC  2FC4               	decfsz	??_UI& (0+255),f,b
  4249  0001AE  D7FC               	bra	u4647
  4250  0001B0  F000               	nop	
  4251  0001B2  0100               	movlb	0	; () banked
  4252  0001B4  2BC8               	incf	UI@i_640& (0+255),f,b
  4253  0001B6  D7EF               	goto	l5043
  4254  0001B8                     l5051:
  4255                           
  4256                           ; BSR set to: 0
  4257  0001B8  0100               	movlb	0	; () banked
  4258  0001BA  51ED               	movf	_logstate& (0+255),w,b
  4259  0001BC  0100               	movlb	0	; () banked
  4260  0001BE  11EE               	iorwf	(_logstate+1)& (0+255),w,b
  4261  0001C0  B4D8               	btfsc	status,2,c
  4262  0001C2  0012               	return	
  4263                           
  4264                           ; BSR set to: 0
  4265                           ;UI.c: 104: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  4266                           
  4267                           ; BSR set to: 0
  4268                           
  4269                           ; BSR set to: 0
  4270  0001C4  0E00               	movlw	0
  4271  0001C6  0100               	movlb	0	; () banked
  4272  0001C8  6FC9               	movwf	UI@i_641& (0+255),b
  4273  0001CA                     l5057:
  4274                           
  4275                           ; BSR set to: 0
  4276  0001CA  0E63               	movlw	99
  4277  0001CC  0100               	movlb	0	; () banked
  4278  0001CE  65C9               	cpfsgt	UI@i_641& (0+255),b
  4279  0001D0  D001               	goto	l5061
  4280  0001D2  D00C               	goto	l5065
  4281  0001D4                     l5061:
  4282                           
  4283                           ; BSR set to: 0
  4284  0001D4  0E68               	movlw	104
  4285  0001D6  0100               	movlb	0	; () banked
  4286  0001D8  6FC4               	movwf	??_UI& (0+255),b
  4287  0001DA  0EE4               	movlw	228
  4288  0001DC                     u4657:
  4289  0001DC  2EE8               	decfsz	wreg,f,c
  4290  0001DE  D7FE               	bra	u4657
  4291  0001E0  2FC4               	decfsz	??_UI& (0+255),f,b
  4292  0001E2  D7FC               	bra	u4657
  4293  0001E4  F000               	nop	
  4294  0001E6  0100               	movlb	0	; () banked
  4295  0001E8  2BC9               	incf	UI@i_641& (0+255),f,b
  4296  0001EA  D7EF               	goto	l5057
  4297  0001EC                     l5065:
  4298                           
  4299                           ; BSR set to: 0
  4300  0001EC  0100               	movlb	0	; () banked
  4301  0001EE  51ED               	movf	_logstate& (0+255),w,b
  4302  0001F0  0100               	movlb	0	; () banked
  4303  0001F2  11EE               	iorwf	(_logstate+1)& (0+255),w,b
  4304  0001F4  B4D8               	btfsc	status,2,c
  4305  0001F6  0012               	return	
  4306                           
  4307                           ; BSR set to: 0
  4308                           ;UI.c: 106: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  4309                           
  4310                           ; BSR set to: 0
  4311                           
  4312                           ; BSR set to: 0
  4313  0001F8  0E01               	movlw	1
  4314  0001FA  EC79  F014         	call	_lcdInst
  4315  0001FE  0E68               	movlw	104
  4316  000200  0100               	movlb	0	; () banked
  4317  000202  6FC4               	movwf	??_UI& (0+255),b
  4318  000204  0EE4               	movlw	228
  4319  000206                     u4667:
  4320  000206  2EE8               	decfsz	wreg,f,c
  4321  000208  D7FE               	bra	u4667
  4322  00020A  2FC4               	decfsz	??_UI& (0+255),f,b
  4323  00020C  D7FC               	bra	u4667
  4324  00020E  F000               	nop	
  4325                           
  4326                           ;UI.c: 107: lcdInst(0b10000000);;
  4327  000210  0E80               	movlw	128
  4328  000212  EC79  F014         	call	_lcdInst
  4329                           
  4330                           ;UI.c: 108: printf("Start:");
  4331  000216  0EC4               	movlw	low STR_5
  4332  000218  0100               	movlb	0	; () banked
  4333  00021A  6F8E               	movwf	printf@f& (0+255),b
  4334  00021C  0EFF               	movlw	high STR_5
  4335  00021E  0100               	movlb	0	; () banked
  4336  000220  6F8F               	movwf	(printf@f+1)& (0+255),b
  4337  000222  ECBB  F002         	call	_printf	;wreg free
  4338                           
  4339                           ;UI.c: 109: lcdInst(0b11000000);;
  4340  000226  0EC0               	movlw	192
  4341  000228  EC79  F014         	call	_lcdInst
  4342                           
  4343                           ;UI.c: 110: printf("06Feb | 01:08:56");
  4344  00022C  0EFE               	movlw	low STR_6
  4345  00022E  0100               	movlb	0	; () banked
  4346  000230  6F8E               	movwf	printf@f& (0+255),b
  4347  000232  0EFE               	movlw	high STR_6
  4348  000234  0100               	movlb	0	; () banked
  4349  000236  6F8F               	movwf	(printf@f+1)& (0+255),b
  4350  000238  ECBB  F002         	call	_printf	;wreg free
  4351                           
  4352                           ;UI.c: 112: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  4353  00023C  0E00               	movlw	0
  4354  00023E  0100               	movlb	0	; () banked
  4355  000240  6FCA               	movwf	UI@i_644& (0+255),b
  4356  000242                     l5083:
  4357                           
  4358                           ; BSR set to: 0
  4359  000242  0E63               	movlw	99
  4360  000244  0100               	movlb	0	; () banked
  4361  000246  65CA               	cpfsgt	UI@i_644& (0+255),b
  4362  000248  D001               	goto	l5087
  4363  00024A  D00C               	goto	l5091
  4364  00024C                     l5087:
  4365                           
  4366                           ; BSR set to: 0
  4367  00024C  0E68               	movlw	104
  4368  00024E  0100               	movlb	0	; () banked
  4369  000250  6FC4               	movwf	??_UI& (0+255),b
  4370  000252  0EE4               	movlw	228
  4371  000254                     u4677:
  4372  000254  2EE8               	decfsz	wreg,f,c
  4373  000256  D7FE               	bra	u4677
  4374  000258  2FC4               	decfsz	??_UI& (0+255),f,b
  4375  00025A  D7FC               	bra	u4677
  4376  00025C  F000               	nop	
  4377  00025E  0100               	movlb	0	; () banked
  4378  000260  2BCA               	incf	UI@i_644& (0+255),f,b
  4379  000262  D7EF               	goto	l5083
  4380  000264                     l5091:
  4381                           
  4382                           ; BSR set to: 0
  4383  000264  0100               	movlb	0	; () banked
  4384  000266  51ED               	movf	_logstate& (0+255),w,b
  4385  000268  0100               	movlb	0	; () banked
  4386  00026A  11EE               	iorwf	(_logstate+1)& (0+255),w,b
  4387  00026C  B4D8               	btfsc	status,2,c
  4388  00026E  0012               	return	
  4389                           
  4390                           ; BSR set to: 0
  4391                           ;UI.c: 113: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  4392                           
  4393                           ; BSR set to: 0
  4394                           
  4395                           ; BSR set to: 0
  4396  000270  0E00               	movlw	0
  4397  000272  0100               	movlb	0	; () banked
  4398  000274  6FCB               	movwf	UI@i_645& (0+255),b
  4399  000276                     l5097:
  4400                           
  4401                           ; BSR set to: 0
  4402  000276  0E63               	movlw	99
  4403  000278  0100               	movlb	0	; () banked
  4404  00027A  65CB               	cpfsgt	UI@i_645& (0+255),b
  4405  00027C  D001               	goto	l5101
  4406  00027E  D00C               	goto	l5105
  4407  000280                     l5101:
  4408                           
  4409                           ; BSR set to: 0
  4410  000280  0E68               	movlw	104
  4411  000282  0100               	movlb	0	; () banked
  4412  000284  6FC4               	movwf	??_UI& (0+255),b
  4413  000286  0EE4               	movlw	228
  4414  000288                     u4687:
  4415  000288  2EE8               	decfsz	wreg,f,c
  4416  00028A  D7FE               	bra	u4687
  4417  00028C  2FC4               	decfsz	??_UI& (0+255),f,b
  4418  00028E  D7FC               	bra	u4687
  4419  000290  F000               	nop	
  4420  000292  0100               	movlb	0	; () banked
  4421  000294  2BCB               	incf	UI@i_645& (0+255),f,b
  4422  000296  D7EF               	goto	l5097
  4423  000298                     l5105:
  4424                           
  4425                           ; BSR set to: 0
  4426  000298  0100               	movlb	0	; () banked
  4427  00029A  51ED               	movf	_logstate& (0+255),w,b
  4428  00029C  0100               	movlb	0	; () banked
  4429  00029E  11EE               	iorwf	(_logstate+1)& (0+255),w,b
  4430  0002A0  B4D8               	btfsc	status,2,c
  4431  0002A2  0012               	return	
  4432                           
  4433                           ; BSR set to: 0
  4434                           ;UI.c: 115: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  4435                           
  4436                           ; BSR set to: 0
  4437                           
  4438                           ; BSR set to: 0
  4439  0002A4  0E01               	movlw	1
  4440  0002A6  EC79  F014         	call	_lcdInst
  4441  0002AA  0E68               	movlw	104
  4442  0002AC  0100               	movlb	0	; () banked
  4443  0002AE  6FC4               	movwf	??_UI& (0+255),b
  4444  0002B0  0EE4               	movlw	228
  4445  0002B2                     u4697:
  4446  0002B2  2EE8               	decfsz	wreg,f,c
  4447  0002B4  D7FE               	bra	u4697
  4448  0002B6  2FC4               	decfsz	??_UI& (0+255),f,b
  4449  0002B8  D7FC               	bra	u4697
  4450  0002BA  F000               	nop	
  4451                           
  4452                           ;UI.c: 116: lcdInst(0b10000000);;
  4453  0002BC  0E80               	movlw	128
  4454  0002BE  EC79  F014         	call	_lcdInst
  4455                           
  4456                           ;UI.c: 117: printf("Duration:");
  4457  0002C2  0EB3               	movlw	low STR_7
  4458  0002C4  0100               	movlb	0	; () banked
  4459  0002C6  6F8E               	movwf	printf@f& (0+255),b
  4460  0002C8  0EFF               	movlw	high STR_7
  4461  0002CA  0100               	movlb	0	; () banked
  4462  0002CC  6F8F               	movwf	(printf@f+1)& (0+255),b
  4463  0002CE  ECBB  F002         	call	_printf	;wreg free
  4464                           
  4465                           ;UI.c: 118: lcdInst(0b11000000);;
  4466  0002D2  0EC0               	movlw	192
  4467  0002D4  EC79  F014         	call	_lcdInst
  4468                           
  4469                           ;UI.c: 119: printf("%d min(s) %d secs", 2, 42);
  4470  0002D8  0E0F               	movlw	low STR_8
  4471  0002DA  0100               	movlb	0	; () banked
  4472  0002DC  6F8E               	movwf	printf@f& (0+255),b
  4473  0002DE  0EFE               	movlw	high STR_8
  4474  0002E0  0100               	movlb	0	; () banked
  4475  0002E2  6F8F               	movwf	(printf@f+1)& (0+255),b
  4476  0002E4  0E00               	movlw	0
  4477  0002E6  0100               	movlb	0	; () banked
  4478  0002E8  6F91               	movwf	(?_printf+3)& (0+255),b
  4479  0002EA  0E02               	movlw	2
  4480  0002EC  6F90               	movwf	(?_printf+2)& (0+255),b
  4481  0002EE  0E00               	movlw	0
  4482  0002F0  0100               	movlb	0	; () banked
  4483  0002F2  6F93               	movwf	(?_printf+5)& (0+255),b
  4484  0002F4  0E2A               	movlw	42
  4485  0002F6  6F92               	movwf	(?_printf+4)& (0+255),b
  4486  0002F8  ECBB  F002         	call	_printf	;wreg free
  4487                           
  4488                           ;UI.c: 121: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  4489  0002FC  0E00               	movlw	0
  4490  0002FE  0100               	movlb	0	; () banked
  4491  000300  6FCC               	movwf	UI@i_648& (0+255),b
  4492  000302                     l5123:
  4493                           
  4494                           ; BSR set to: 0
  4495  000302  0E63               	movlw	99
  4496  000304  0100               	movlb	0	; () banked
  4497  000306  65CC               	cpfsgt	UI@i_648& (0+255),b
  4498  000308  D001               	goto	l5127
  4499  00030A  D00C               	goto	l5131
  4500  00030C                     l5127:
  4501                           
  4502                           ; BSR set to: 0
  4503  00030C  0E68               	movlw	104
  4504  00030E  0100               	movlb	0	; () banked
  4505  000310  6FC4               	movwf	??_UI& (0+255),b
  4506  000312  0EE4               	movlw	228
  4507  000314                     u4707:
  4508  000314  2EE8               	decfsz	wreg,f,c
  4509  000316  D7FE               	bra	u4707
  4510  000318  2FC4               	decfsz	??_UI& (0+255),f,b
  4511  00031A  D7FC               	bra	u4707
  4512  00031C  F000               	nop	
  4513  00031E  0100               	movlb	0	; () banked
  4514  000320  2BCC               	incf	UI@i_648& (0+255),f,b
  4515  000322  D7EF               	goto	l5123
  4516  000324                     l5131:
  4517                           
  4518                           ; BSR set to: 0
  4519  000324  0100               	movlb	0	; () banked
  4520  000326  51ED               	movf	_logstate& (0+255),w,b
  4521  000328  0100               	movlb	0	; () banked
  4522  00032A  11EE               	iorwf	(_logstate+1)& (0+255),w,b
  4523  00032C  B4D8               	btfsc	status,2,c
  4524  00032E  0012               	return	
  4525                           
  4526                           ; BSR set to: 0
  4527                           ;UI.c: 122: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  4528                           
  4529                           ; BSR set to: 0
  4530                           
  4531                           ; BSR set to: 0
  4532  000330  0E00               	movlw	0
  4533  000332  0100               	movlb	0	; () banked
  4534  000334  6FCD               	movwf	UI@i_649& (0+255),b
  4535  000336                     l5137:
  4536                           
  4537                           ; BSR set to: 0
  4538  000336  0E63               	movlw	99
  4539  000338  0100               	movlb	0	; () banked
  4540  00033A  65CD               	cpfsgt	UI@i_649& (0+255),b
  4541  00033C  D001               	goto	l5141
  4542  00033E  D00C               	goto	l5145
  4543  000340                     l5141:
  4544                           
  4545                           ; BSR set to: 0
  4546  000340  0E68               	movlw	104
  4547  000342  0100               	movlb	0	; () banked
  4548  000344  6FC4               	movwf	??_UI& (0+255),b
  4549  000346  0EE4               	movlw	228
  4550  000348                     u4717:
  4551  000348  2EE8               	decfsz	wreg,f,c
  4552  00034A  D7FE               	bra	u4717
  4553  00034C  2FC4               	decfsz	??_UI& (0+255),f,b
  4554  00034E  D7FC               	bra	u4717
  4555  000350  F000               	nop	
  4556  000352  0100               	movlb	0	; () banked
  4557  000354  2BCD               	incf	UI@i_649& (0+255),f,b
  4558  000356  D7EF               	goto	l5137
  4559  000358                     l5145:
  4560                           
  4561                           ; BSR set to: 0
  4562  000358  0100               	movlb	0	; () banked
  4563  00035A  51ED               	movf	_logstate& (0+255),w,b
  4564  00035C  0100               	movlb	0	; () banked
  4565  00035E  11EE               	iorwf	(_logstate+1)& (0+255),w,b
  4566  000360  B4D8               	btfsc	status,2,c
  4567  000362  0012               	return	
  4568                           
  4569                           ; BSR set to: 0
  4570                           ;UI.c: 124: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  4571                           
  4572                           ; BSR set to: 0
  4573                           
  4574                           ; BSR set to: 0
  4575  000364  0E01               	movlw	1
  4576  000366  EC79  F014         	call	_lcdInst
  4577  00036A  0E68               	movlw	104
  4578  00036C  0100               	movlb	0	; () banked
  4579  00036E  6FC4               	movwf	??_UI& (0+255),b
  4580  000370  0EE4               	movlw	228
  4581  000372                     u4727:
  4582  000372  2EE8               	decfsz	wreg,f,c
  4583  000374  D7FE               	bra	u4727
  4584  000376  2FC4               	decfsz	??_UI& (0+255),f,b
  4585  000378  D7FC               	bra	u4727
  4586  00037A  F000               	nop	
  4587                           
  4588                           ;UI.c: 125: lcdInst(0b10000000);;
  4589  00037C  0E80               	movlw	128
  4590  00037E  EC79  F014         	call	_lcdInst
  4591                           
  4592                           ;UI.c: 126: printf(" -- Pop  can -- ");
  4593  000382  0E98               	movlw	low STR_9
  4594  000384  0100               	movlb	0	; () banked
  4595  000386  6F8E               	movwf	printf@f& (0+255),b
  4596  000388  0EFE               	movlw	high STR_9
  4597  00038A  0100               	movlb	0	; () banked
  4598  00038C  6F8F               	movwf	(printf@f+1)& (0+255),b
  4599  00038E  ECBB  F002         	call	_printf	;wreg free
  4600                           
  4601                           ;UI.c: 127: lcdInst(0b11000000);;
  4602  000392  0EC0               	movlw	192
  4603  000394  EC79  F014         	call	_lcdInst
  4604                           
  4605                           ;UI.c: 128: printf("No tab: 9|Tab: 1");
  4606  000398  0EDC               	movlw	low STR_10
  4607  00039A  0100               	movlb	0	; () banked
  4608  00039C  6F8E               	movwf	printf@f& (0+255),b
  4609  00039E  0EFE               	movlw	high STR_10
  4610  0003A0  0100               	movlb	0	; () banked
  4611  0003A2  6F8F               	movwf	(printf@f+1)& (0+255),b
  4612  0003A4  ECBB  F002         	call	_printf	;wreg free
  4613                           
  4614                           ;UI.c: 130: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  4615  0003A8  0E00               	movlw	0
  4616  0003AA  0100               	movlb	0	; () banked
  4617  0003AC  6FCE               	movwf	UI@i_652& (0+255),b
  4618  0003AE                     l5163:
  4619                           
  4620                           ; BSR set to: 0
  4621  0003AE  0E63               	movlw	99
  4622  0003B0  0100               	movlb	0	; () banked
  4623  0003B2  65CE               	cpfsgt	UI@i_652& (0+255),b
  4624  0003B4  D001               	goto	l5167
  4625  0003B6  D00C               	goto	l5171
  4626  0003B8                     l5167:
  4627                           
  4628                           ; BSR set to: 0
  4629  0003B8  0E68               	movlw	104
  4630  0003BA  0100               	movlb	0	; () banked
  4631  0003BC  6FC4               	movwf	??_UI& (0+255),b
  4632  0003BE  0EE4               	movlw	228
  4633  0003C0                     u4737:
  4634  0003C0  2EE8               	decfsz	wreg,f,c
  4635  0003C2  D7FE               	bra	u4737
  4636  0003C4  2FC4               	decfsz	??_UI& (0+255),f,b
  4637  0003C6  D7FC               	bra	u4737
  4638  0003C8  F000               	nop	
  4639  0003CA  0100               	movlb	0	; () banked
  4640  0003CC  2BCE               	incf	UI@i_652& (0+255),f,b
  4641  0003CE  D7EF               	goto	l5163
  4642  0003D0                     l5171:
  4643                           
  4644                           ; BSR set to: 0
  4645  0003D0  0100               	movlb	0	; () banked
  4646  0003D2  51ED               	movf	_logstate& (0+255),w,b
  4647  0003D4  0100               	movlb	0	; () banked
  4648  0003D6  11EE               	iorwf	(_logstate+1)& (0+255),w,b
  4649  0003D8  B4D8               	btfsc	status,2,c
  4650  0003DA  0012               	return	
  4651                           
  4652                           ; BSR set to: 0
  4653                           ;UI.c: 131: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  4654                           
  4655                           ; BSR set to: 0
  4656                           
  4657                           ; BSR set to: 0
  4658  0003DC  0E00               	movlw	0
  4659  0003DE  0100               	movlb	0	; () banked
  4660  0003E0  6FCF               	movwf	UI@i_653& (0+255),b
  4661  0003E2                     l5177:
  4662                           
  4663                           ; BSR set to: 0
  4664  0003E2  0E63               	movlw	99
  4665  0003E4  0100               	movlb	0	; () banked
  4666  0003E6  65CF               	cpfsgt	UI@i_653& (0+255),b
  4667  0003E8  D001               	goto	l5181
  4668  0003EA  D00C               	goto	l5185
  4669  0003EC                     l5181:
  4670                           
  4671                           ; BSR set to: 0
  4672  0003EC  0E68               	movlw	104
  4673  0003EE  0100               	movlb	0	; () banked
  4674  0003F0  6FC4               	movwf	??_UI& (0+255),b
  4675  0003F2  0EE4               	movlw	228
  4676  0003F4                     u4747:
  4677  0003F4  2EE8               	decfsz	wreg,f,c
  4678  0003F6  D7FE               	bra	u4747
  4679  0003F8  2FC4               	decfsz	??_UI& (0+255),f,b
  4680  0003FA  D7FC               	bra	u4747
  4681  0003FC  F000               	nop	
  4682  0003FE  0100               	movlb	0	; () banked
  4683  000400  2BCF               	incf	UI@i_653& (0+255),f,b
  4684  000402  D7EF               	goto	l5177
  4685  000404                     l5185:
  4686                           
  4687                           ; BSR set to: 0
  4688  000404  0100               	movlb	0	; () banked
  4689  000406  51ED               	movf	_logstate& (0+255),w,b
  4690  000408  0100               	movlb	0	; () banked
  4691  00040A  11EE               	iorwf	(_logstate+1)& (0+255),w,b
  4692  00040C  B4D8               	btfsc	status,2,c
  4693  00040E  0012               	return	
  4694                           
  4695                           ; BSR set to: 0
  4696                           ;UI.c: 133: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  4697                           
  4698                           ; BSR set to: 0
  4699                           
  4700                           ; BSR set to: 0
  4701  000410  0E01               	movlw	1
  4702  000412  EC79  F014         	call	_lcdInst
  4703  000416  0E68               	movlw	104
  4704  000418  0100               	movlb	0	; () banked
  4705  00041A  6FC4               	movwf	??_UI& (0+255),b
  4706  00041C  0EE4               	movlw	228
  4707  00041E                     u4757:
  4708  00041E  2EE8               	decfsz	wreg,f,c
  4709  000420  D7FE               	bra	u4757
  4710  000422  2FC4               	decfsz	??_UI& (0+255),f,b
  4711  000424  D7FC               	bra	u4757
  4712  000426  F000               	nop	
  4713                           
  4714                           ;UI.c: 134: lcdInst(0b10000000);;
  4715  000428  0E80               	movlw	128
  4716  00042A  EC79  F014         	call	_lcdInst
  4717                           
  4718                           ;UI.c: 135: printf(" -- Soup can -- ");
  4719  00042E  0EA9               	movlw	low STR_11
  4720  000430  0100               	movlb	0	; () banked
  4721  000432  6F8E               	movwf	printf@f& (0+255),b
  4722  000434  0EFE               	movlw	high STR_11
  4723  000436  0100               	movlb	0	; () banked
  4724  000438  6F8F               	movwf	(printf@f+1)& (0+255),b
  4725  00043A  ECBB  F002         	call	_printf	;wreg free
  4726                           
  4727                           ;UI.c: 136: lcdInst(0b11000000);;
  4728  00043E  0EC0               	movlw	192
  4729  000440  EC79  F014         	call	_lcdInst
  4730                           
  4731                           ;UI.c: 137: printf("No lbl: 1|lbl: 1");
  4732  000444  0EED               	movlw	low STR_12
  4733  000446  0100               	movlb	0	; () banked
  4734  000448  6F8E               	movwf	printf@f& (0+255),b
  4735  00044A  0EFE               	movlw	high STR_12
  4736  00044C  0100               	movlb	0	; () banked
  4737  00044E  6F8F               	movwf	(printf@f+1)& (0+255),b
  4738  000450  ECBB  F002         	call	_printf	;wreg free
  4739                           
  4740                           ;UI.c: 139: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  4741  000454  0E00               	movlw	0
  4742  000456  0100               	movlb	0	; () banked
  4743  000458  6FD0               	movwf	UI@i_656& (0+255),b
  4744  00045A                     l5203:
  4745                           
  4746                           ; BSR set to: 0
  4747  00045A  0E63               	movlw	99
  4748  00045C  0100               	movlb	0	; () banked
  4749  00045E  65D0               	cpfsgt	UI@i_656& (0+255),b
  4750  000460  D001               	goto	l5207
  4751  000462  D00C               	goto	l5211
  4752  000464                     l5207:
  4753                           
  4754                           ; BSR set to: 0
  4755  000464  0E68               	movlw	104
  4756  000466  0100               	movlb	0	; () banked
  4757  000468  6FC4               	movwf	??_UI& (0+255),b
  4758  00046A  0EE4               	movlw	228
  4759  00046C                     u4767:
  4760  00046C  2EE8               	decfsz	wreg,f,c
  4761  00046E  D7FE               	bra	u4767
  4762  000470  2FC4               	decfsz	??_UI& (0+255),f,b
  4763  000472  D7FC               	bra	u4767
  4764  000474  F000               	nop	
  4765  000476  0100               	movlb	0	; () banked
  4766  000478  2BD0               	incf	UI@i_656& (0+255),f,b
  4767  00047A  D7EF               	goto	l5203
  4768  00047C                     l5211:
  4769                           
  4770                           ; BSR set to: 0
  4771  00047C  0100               	movlb	0	; () banked
  4772  00047E  51ED               	movf	_logstate& (0+255),w,b
  4773  000480  0100               	movlb	0	; () banked
  4774  000482  11EE               	iorwf	(_logstate+1)& (0+255),w,b
  4775  000484  B4D8               	btfsc	status,2,c
  4776  000486  0012               	return	
  4777                           
  4778                           ; BSR set to: 0
  4779                           ;UI.c: 140: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  4780                           
  4781                           ; BSR set to: 0
  4782                           
  4783                           ; BSR set to: 0
  4784  000488  0E00               	movlw	0
  4785  00048A  0100               	movlb	0	; () banked
  4786  00048C  6FD1               	movwf	UI@i_657& (0+255),b
  4787  00048E                     l5217:
  4788                           
  4789                           ; BSR set to: 0
  4790  00048E  0E63               	movlw	99
  4791  000490  0100               	movlb	0	; () banked
  4792  000492  65D1               	cpfsgt	UI@i_657& (0+255),b
  4793  000494  D001               	goto	l5221
  4794  000496  D00C               	goto	l5225
  4795  000498                     l5221:
  4796                           
  4797                           ; BSR set to: 0
  4798  000498  0E68               	movlw	104
  4799  00049A  0100               	movlb	0	; () banked
  4800  00049C  6FC4               	movwf	??_UI& (0+255),b
  4801  00049E  0EE4               	movlw	228
  4802  0004A0                     u4777:
  4803  0004A0  2EE8               	decfsz	wreg,f,c
  4804  0004A2  D7FE               	bra	u4777
  4805  0004A4  2FC4               	decfsz	??_UI& (0+255),f,b
  4806  0004A6  D7FC               	bra	u4777
  4807  0004A8  F000               	nop	
  4808  0004AA  0100               	movlb	0	; () banked
  4809  0004AC  2BD1               	incf	UI@i_657& (0+255),f,b
  4810  0004AE  D7EF               	goto	l5217
  4811  0004B0                     l5225:
  4812                           
  4813                           ; BSR set to: 0
  4814  0004B0  0100               	movlb	0	; () banked
  4815  0004B2  51ED               	movf	_logstate& (0+255),w,b
  4816  0004B4  0100               	movlb	0	; () banked
  4817  0004B6  11EE               	iorwf	(_logstate+1)& (0+255),w,b
  4818  0004B8  B4D8               	btfsc	status,2,c
  4819  0004BA  0012               	return	
  4820                           
  4821                           ; BSR set to: 0
  4822                           ;UI.c: 142: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  4823                           
  4824                           ; BSR set to: 0
  4825                           
  4826                           ; BSR set to: 0
  4827  0004BC  0E01               	movlw	1
  4828  0004BE  EC79  F014         	call	_lcdInst
  4829  0004C2  0E68               	movlw	104
  4830  0004C4  0100               	movlb	0	; () banked
  4831  0004C6  6FC4               	movwf	??_UI& (0+255),b
  4832  0004C8  0EE4               	movlw	228
  4833  0004CA                     u4787:
  4834  0004CA  2EE8               	decfsz	wreg,f,c
  4835  0004CC  D7FE               	bra	u4787
  4836  0004CE  2FC4               	decfsz	??_UI& (0+255),f,b
  4837  0004D0  D7FC               	bra	u4787
  4838  0004D2  F000               	nop	
  4839                           
  4840                           ;UI.c: 143: lcdInst(0b10000000);;
  4841  0004D4  0E80               	movlw	128
  4842  0004D6  EC79  F014         	call	_lcdInst
  4843                           
  4844                           ;UI.c: 144: printf("-- Total cans --");
  4845  0004DA  0ECB               	movlw	low STR_13
  4846  0004DC  0100               	movlb	0	; () banked
  4847  0004DE  6F8E               	movwf	printf@f& (0+255),b
  4848  0004E0  0EFE               	movlw	high STR_13
  4849  0004E2  0100               	movlb	0	; () banked
  4850  0004E4  6F8F               	movwf	(printf@f+1)& (0+255),b
  4851  0004E6  ECBB  F002         	call	_printf	;wreg free
  4852                           
  4853                           ;UI.c: 145: lcdInst(0b11000000);;
  4854  0004EA  0EC0               	movlw	192
  4855  0004EC  EC79  F014         	call	_lcdInst
  4856                           
  4857                           ;UI.c: 146: printf("12");
  4858  0004F0  0EFB               	movlw	low STR_14
  4859  0004F2  0100               	movlb	0	; () banked
  4860  0004F4  6F8E               	movwf	printf@f& (0+255),b
  4861  0004F6  0EFF               	movlw	high STR_14
  4862  0004F8  0100               	movlb	0	; () banked
  4863  0004FA  6F8F               	movwf	(printf@f+1)& (0+255),b
  4864  0004FC  ECBB  F002         	call	_printf	;wreg free
  4865                           
  4866                           ;UI.c: 148: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  4867  000500  0E00               	movlw	0
  4868  000502  0100               	movlb	0	; () banked
  4869  000504  6FD2               	movwf	UI@i_660& (0+255),b
  4870  000506                     l5243:
  4871                           
  4872                           ; BSR set to: 0
  4873  000506  0E63               	movlw	99
  4874  000508  0100               	movlb	0	; () banked
  4875  00050A  65D2               	cpfsgt	UI@i_660& (0+255),b
  4876  00050C  D001               	goto	l5247
  4877  00050E  D00C               	goto	l5251
  4878  000510                     l5247:
  4879                           
  4880                           ; BSR set to: 0
  4881  000510  0E68               	movlw	104
  4882  000512  0100               	movlb	0	; () banked
  4883  000514  6FC4               	movwf	??_UI& (0+255),b
  4884  000516  0EE4               	movlw	228
  4885  000518                     u4797:
  4886  000518  2EE8               	decfsz	wreg,f,c
  4887  00051A  D7FE               	bra	u4797
  4888  00051C  2FC4               	decfsz	??_UI& (0+255),f,b
  4889  00051E  D7FC               	bra	u4797
  4890  000520  F000               	nop	
  4891  000522  0100               	movlb	0	; () banked
  4892  000524  2BD2               	incf	UI@i_660& (0+255),f,b
  4893  000526  D7EF               	goto	l5243
  4894  000528                     l5251:
  4895                           
  4896                           ; BSR set to: 0
  4897  000528  0100               	movlb	0	; () banked
  4898  00052A  51ED               	movf	_logstate& (0+255),w,b
  4899  00052C  0100               	movlb	0	; () banked
  4900  00052E  11EE               	iorwf	(_logstate+1)& (0+255),w,b
  4901  000530  B4D8               	btfsc	status,2,c
  4902  000532  0012               	return	
  4903                           
  4904                           ; BSR set to: 0
  4905                           ;UI.c: 149: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  4906                           
  4907                           ; BSR set to: 0
  4908                           
  4909                           ; BSR set to: 0
  4910  000534  0E00               	movlw	0
  4911  000536  0100               	movlb	0	; () banked
  4912  000538  6FD3               	movwf	UI@i_661& (0+255),b
  4913  00053A                     l5257:
  4914                           
  4915                           ; BSR set to: 0
  4916  00053A  0E63               	movlw	99
  4917  00053C  0100               	movlb	0	; () banked
  4918  00053E  65D3               	cpfsgt	UI@i_661& (0+255),b
  4919  000540  D001               	goto	l5261
  4920  000542  D00C               	goto	l5265
  4921  000544                     l5261:
  4922                           
  4923                           ; BSR set to: 0
  4924  000544  0E68               	movlw	104
  4925  000546  0100               	movlb	0	; () banked
  4926  000548  6FC4               	movwf	??_UI& (0+255),b
  4927  00054A  0EE4               	movlw	228
  4928  00054C                     u4807:
  4929  00054C  2EE8               	decfsz	wreg,f,c
  4930  00054E  D7FE               	bra	u4807
  4931  000550  2FC4               	decfsz	??_UI& (0+255),f,b
  4932  000552  D7FC               	bra	u4807
  4933  000554  F000               	nop	
  4934  000556  0100               	movlb	0	; () banked
  4935  000558  2BD3               	incf	UI@i_661& (0+255),f,b
  4936  00055A  D7EF               	goto	l5257
  4937  00055C                     l5265:
  4938                           
  4939                           ; BSR set to: 0
  4940  00055C  0100               	movlb	0	; () banked
  4941  00055E  51ED               	movf	_logstate& (0+255),w,b
  4942  000560  0100               	movlb	0	; () banked
  4943  000562  11EE               	iorwf	(_logstate+1)& (0+255),w,b
  4944  000564  B4D8               	btfsc	status,2,c
  4945  000566  0012               	return	
  4946  000568                     l5269:
  4947  000568  0100               	movlb	0	; () banked
  4948  00056A  51ED               	movf	_logstate& (0+255),w,b
  4949  00056C  0100               	movlb	0	; () banked
  4950  00056E  11EE               	iorwf	(_logstate+1)& (0+255),w,b
  4951  000570  B4D8               	btfsc	status,2,c
  4952  000572  0012               	return	
  4953  000574  D5E7               	goto	l5029
  4954  000576                     __end_of_UI:
  4955                           	opt stack 0
  4956                           tblptru	equ	0xFF8
  4957                           tblptrh	equ	0xFF7
  4958                           tblptrl	equ	0xFF6
  4959                           tablat	equ	0xFF5
  4960                           prodh	equ	0xFF4
  4961                           prodl	equ	0xFF3
  4962                           intcon	equ	0xFF2
  4963                           intcon3	equ	0xFF0
  4964                           postinc0	equ	0xFEE
  4965                           wreg	equ	0xFE8
  4966                           postdec1	equ	0xFE5
  4967                           fsr1l	equ	0xFE1
  4968                           indf2	equ	0xFDF
  4969                           postinc2	equ	0xFDE
  4970                           postdec2	equ	0xFDD
  4971                           fsr2h	equ	0xFDA
  4972                           fsr2l	equ	0xFD9
  4973                           status	equ	0xFD8
  4974                           
  4975 ;; *************** function _printRTC *****************
  4976 ;; Defined at:
  4977 ;;		line 61 in file "RTC.c"
  4978 ;; Parameters:    Size  Location     Type
  4979 ;;		None
  4980 ;; Auto vars:     Size  Location     Type
  4981 ;;  i               2   66[BANK0 ] int 
  4982 ;;  INT_time       14   46[BANK0 ] int [7]
  4983 ;;  month           4   62[BANK0 ] unsigned char [4]
  4984 ;;  RTC_month       2   60[BANK0 ] int 
  4985 ;; Return value:  Size  Location     Type
  4986 ;;                  1    wreg      void 
  4987 ;; Registers used:
  4988 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4989 ;; Tracked objects:
  4990 ;;		On entry : 0/0
  4991 ;;		On exit  : 0/0
  4992 ;;		Unchanged: 0/0
  4993 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4994 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4995 ;;      Locals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4996 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4997 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4998 ;;Total ram usage:       25 bytes
  4999 ;; Hardware stack levels used:    1
  5000 ;; Hardware stack levels required when called:   10
  5001 ;; This function calls:
  5002 ;;		_getRTC
  5003 ;;		_lcdInst
  5004 ;;		_printf
  5005 ;;		_strcpy
  5006 ;; This function is called by:
  5007 ;;		_UI
  5008 ;;		_change_state_to_menu_start
  5009 ;; This function uses a non-reentrant model
  5010 ;;
  5011                           
  5012                           	psect	text19
  5013  000CC6                     __ptext19:
  5014                           	opt stack 0
  5015  000CC6                     _printRTC:
  5016                           	opt stack 18
  5017                           
  5018                           ;RTC.c: 62: getRTC();
  5019                           
  5020                           ; BSR set to: 0
  5021                           ;incstack = 0
  5022  000CC6  EC4F  F00F         	call	_getRTC	;wreg free
  5023                           
  5024                           ;RTC.c: 63: char month[] = "MMM";
  5025  000CCA  C0F2  F0BE         	movff	printRTC@F3188,printRTC@month
  5026  000CCE  C0F3  F0BF         	movff	printRTC@F3188+1,printRTC@month+1
  5027  000CD2  C0F4  F0C0         	movff	printRTC@F3188+2,printRTC@month+2
  5028  000CD6  C0F5  F0C1         	movff	printRTC@F3188+3,printRTC@month+3
  5029                           
  5030                           ;RTC.c: 64: int INT_time[7];
  5031                           ;RTC.c: 65: for(int i = 0; i < 7; i++){
  5032  000CDA  0E00               	movlw	0
  5033  000CDC  0100               	movlb	0	; () banked
  5034  000CDE  6FC3               	movwf	(printRTC@i+1)& (0+255),b
  5035  000CE0  0E00               	movlw	0
  5036  000CE2  6FC2               	movwf	printRTC@i& (0+255),b
  5037                           
  5038                           ; BSR set to: 0
  5039  000CE4  0100               	movlb	0	; () banked
  5040  000CE6  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
  5041  000CE8  D008               	goto	l4383
  5042  000CEA  0100               	movlb	0	; () banked
  5043  000CEC  51C3               	movf	(printRTC@i+1)& (0+255),w,b
  5044  000CEE  E146               	bnz	l878
  5045  000CF0  0E07               	movlw	7
  5046  000CF2  0100               	movlb	0	; () banked
  5047  000CF4  5DC2               	subwf	printRTC@i& (0+255),w,b
  5048  000CF6  B0D8               	btfsc	status,0,c
  5049  000CF8  D041               	goto	l878
  5050  000CFA                     l4383:
  5051                           
  5052                           ; BSR set to: 0
  5053                           ;RTC.c: 66: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  5054  000CFA  0ED4               	movlw	low _time
  5055  000CFC  0100               	movlb	0	; () banked
  5056  000CFE  25C2               	addwf	printRTC@i& (0+255),w,b
  5057  000D00  6ED9               	movwf	fsr2l,c
  5058  000D02  0E00               	movlw	high _time
  5059  000D04  0100               	movlb	0	; () banked
  5060  000D06  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
  5061  000D08  6EDA               	movwf	fsr2h,c
  5062  000D0A  50DF               	movf	indf2,w,c
  5063  000D0C  0100               	movlb	0	; () banked
  5064  000D0E  6FAB               	movwf	??_printRTC& (0+255),b
  5065  000D10  0100               	movlb	0	; () banked
  5066  000D12  3BAB               	swapf	??_printRTC& (0+255),f,b
  5067  000D14  0E0F               	movlw	15
  5068  000D16  17AB               	andwf	??_printRTC& (0+255),f,b
  5069  000D18  0E0F               	movlw	15
  5070  000D1A  0100               	movlb	0	; () banked
  5071  000D1C  17AB               	andwf	??_printRTC& (0+255),f,b
  5072  000D1E  0100               	movlb	0	; () banked
  5073  000D20  51AB               	movf	??_printRTC& (0+255),w,b
  5074  000D22  0D0A               	mullw	10
  5075  000D24  0ED4               	movlw	low _time
  5076  000D26  0100               	movlb	0	; () banked
  5077  000D28  25C2               	addwf	printRTC@i& (0+255),w,b
  5078  000D2A  6ED9               	movwf	fsr2l,c
  5079  000D2C  0E00               	movlw	high _time
  5080  000D2E  0100               	movlb	0	; () banked
  5081  000D30  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
  5082  000D32  6EDA               	movwf	fsr2h,c
  5083  000D34  50DF               	movf	indf2,w,c
  5084  000D36  0B0F               	andlw	15
  5085  000D38  0100               	movlb	0	; () banked
  5086  000D3A  6FAC               	movwf	(??_printRTC+1)& (0+255),b
  5087  000D3C  6BAD               	clrf	(??_printRTC+2)& (0+255),b
  5088  000D3E  50F3               	movf	prodl,w,c
  5089  000D40  0100               	movlb	0	; () banked
  5090  000D42  27AC               	addwf	(??_printRTC+1)& (0+255),f,b
  5091  000D44  50F4               	movf	prodh,w,c
  5092  000D46  0100               	movlb	0	; () banked
  5093  000D48  23AD               	addwfc	(??_printRTC+2)& (0+255),f,b
  5094  000D4A  90D8               	bcf	status,0,c
  5095  000D4C  0100               	movlb	0	; () banked
  5096  000D4E  35C2               	rlcf	printRTC@i& (0+255),w,b
  5097  000D50  6ED9               	movwf	fsr2l,c
  5098  000D52  0100               	movlb	0	; () banked
  5099  000D54  35C3               	rlcf	(printRTC@i+1)& (0+255),w,b
  5100  000D56  6EDA               	movwf	fsr2h,c
  5101  000D58  0EAE               	movlw	low printRTC@INT_time
  5102  000D5A  26D9               	addwf	fsr2l,f,c
  5103  000D5C  0E00               	movlw	high printRTC@INT_time
  5104  000D5E  22DA               	addwfc	fsr2h,f,c
  5105  000D60  C0AC  FFDE         	movff	??_printRTC+1,postinc2
  5106  000D64  C0AD  FFDD         	movff	??_printRTC+2,postdec2
  5107                           
  5108                           ; BSR set to: 0
  5109  000D68  0100               	movlb	0	; () banked
  5110  000D6A  4BC2               	infsnz	printRTC@i& (0+255),f,b
  5111  000D6C  2BC3               	incf	(printRTC@i+1)& (0+255),f,b
  5112                           
  5113                           ; BSR set to: 0
  5114  000D6E  0100               	movlb	0	; () banked
  5115  000D70  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
  5116  000D72  D7C3               	goto	l4383
  5117  000D74  0100               	movlb	0	; () banked
  5118  000D76  51C3               	movf	(printRTC@i+1)& (0+255),w,b
  5119  000D78  E101               	bnz	u3180
  5120  000D7A  D7BA               	goto	L6
  5121  000D7C                     u3180:
  5122  000D7C                     l878:
  5123                           
  5124                           ; BSR set to: 0
  5125                           ;RTC.c: 67: }
  5126                           ;RTC.c: 68: int RTC_month = INT_time[5];
  5127  000D7C  C0B8  F0BC         	movff	printRTC@INT_time+10,printRTC@RTC_month
  5128  000D80  C0B9  F0BD         	movff	printRTC@INT_time+11,printRTC@RTC_month+1
  5129                           
  5130                           ;RTC.c: 69: switch(RTC_month){
  5131  000D84  D0B4               	goto	l4415
  5132  000D86                     l4389:
  5133                           
  5134                           ; BSR set to: 0
  5135                           ;RTC.c: 71: strcpy(month, "Jan");
  5136  000D86  0EBE               	movlw	low printRTC@month
  5137  000D88  0100               	movlb	0	; () banked
  5138  000D8A  6F80               	movwf	strcpy@to& (0+255),b
  5139  000D8C  0E00               	movlw	high printRTC@month
  5140  000D8E  0100               	movlb	0	; () banked
  5141  000D90  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5142  000D92  0EDB               	movlw	low STR_36
  5143  000D94  0100               	movlb	0	; () banked
  5144  000D96  6F82               	movwf	strcpy@from& (0+255),b
  5145  000D98  0EFF               	movlw	high STR_36
  5146  000D9A  0100               	movlb	0	; () banked
  5147  000D9C  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5148  000D9E  EC31  F012         	call	_strcpy	;wreg free
  5149                           
  5150                           ;RTC.c: 72: break;
  5151  000DA2  D0D4               	goto	l4417
  5152  000DA4                     l4391:
  5153                           
  5154                           ;RTC.c: 74: strcpy(month, "Feb");
  5155  000DA4  0EBE               	movlw	low printRTC@month
  5156  000DA6  0100               	movlb	0	; () banked
  5157  000DA8  6F80               	movwf	strcpy@to& (0+255),b
  5158  000DAA  0E00               	movlw	high printRTC@month
  5159  000DAC  0100               	movlb	0	; () banked
  5160  000DAE  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5161  000DB0  0ECB               	movlw	low STR_37
  5162  000DB2  0100               	movlb	0	; () banked
  5163  000DB4  6F82               	movwf	strcpy@from& (0+255),b
  5164  000DB6  0EFF               	movlw	high STR_37
  5165  000DB8  0100               	movlb	0	; () banked
  5166  000DBA  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5167  000DBC  EC31  F012         	call	_strcpy	;wreg free
  5168                           
  5169                           ;RTC.c: 75: break;
  5170  000DC0  D0C5               	goto	l4417
  5171  000DC2                     l4393:
  5172                           
  5173                           ;RTC.c: 77: strcpy(month, "Mar");
  5174  000DC2  0EBE               	movlw	low printRTC@month
  5175  000DC4  0100               	movlb	0	; () banked
  5176  000DC6  6F80               	movwf	strcpy@to& (0+255),b
  5177  000DC8  0E00               	movlw	high printRTC@month
  5178  000DCA  0100               	movlb	0	; () banked
  5179  000DCC  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5180  000DCE  0EE7               	movlw	low STR_38
  5181  000DD0  0100               	movlb	0	; () banked
  5182  000DD2  6F82               	movwf	strcpy@from& (0+255),b
  5183  000DD4  0EFF               	movlw	high STR_38
  5184  000DD6  0100               	movlb	0	; () banked
  5185  000DD8  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5186  000DDA  EC31  F012         	call	_strcpy	;wreg free
  5187                           
  5188                           ;RTC.c: 78: break;
  5189  000DDE  D0B6               	goto	l4417
  5190  000DE0                     l4395:
  5191                           
  5192                           ;RTC.c: 80: strcpy(month, "Apr");
  5193  000DE0  0EBE               	movlw	low printRTC@month
  5194  000DE2  0100               	movlb	0	; () banked
  5195  000DE4  6F80               	movwf	strcpy@to& (0+255),b
  5196  000DE6  0E00               	movlw	high printRTC@month
  5197  000DE8  0100               	movlb	0	; () banked
  5198  000DEA  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5199  000DEC  0EEB               	movlw	low STR_39
  5200  000DEE  0100               	movlb	0	; () banked
  5201  000DF0  6F82               	movwf	strcpy@from& (0+255),b
  5202  000DF2  0EFF               	movlw	high STR_39
  5203  000DF4  0100               	movlb	0	; () banked
  5204  000DF6  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5205  000DF8  EC31  F012         	call	_strcpy	;wreg free
  5206                           
  5207                           ;RTC.c: 81: break;
  5208  000DFC  D0A7               	goto	l4417
  5209  000DFE                     l4397:
  5210                           
  5211                           ;RTC.c: 83: strcpy(month, "May");
  5212  000DFE  0EBE               	movlw	low printRTC@month
  5213  000E00  0100               	movlb	0	; () banked
  5214  000E02  6F80               	movwf	strcpy@to& (0+255),b
  5215  000E04  0E00               	movlw	high printRTC@month
  5216  000E06  0100               	movlb	0	; () banked
  5217  000E08  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5218  000E0A  0EF7               	movlw	low STR_40
  5219  000E0C  0100               	movlb	0	; () banked
  5220  000E0E  6F82               	movwf	strcpy@from& (0+255),b
  5221  000E10  0EFF               	movlw	high STR_40
  5222  000E12  0100               	movlb	0	; () banked
  5223  000E14  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5224  000E16  EC31  F012         	call	_strcpy	;wreg free
  5225                           
  5226                           ;RTC.c: 84: break;
  5227  000E1A  D098               	goto	l4417
  5228  000E1C                     l4399:
  5229                           
  5230                           ;RTC.c: 86: strcpy(month, "Jun");
  5231  000E1C  0EBE               	movlw	low printRTC@month
  5232  000E1E  0100               	movlb	0	; () banked
  5233  000E20  6F80               	movwf	strcpy@to& (0+255),b
  5234  000E22  0E00               	movlw	high printRTC@month
  5235  000E24  0100               	movlb	0	; () banked
  5236  000E26  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5237  000E28  0EDF               	movlw	low STR_41
  5238  000E2A  0100               	movlb	0	; () banked
  5239  000E2C  6F82               	movwf	strcpy@from& (0+255),b
  5240  000E2E  0EFF               	movlw	high STR_41
  5241  000E30  0100               	movlb	0	; () banked
  5242  000E32  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5243  000E34  EC31  F012         	call	_strcpy	;wreg free
  5244                           
  5245                           ;RTC.c: 87: break;
  5246  000E38  D089               	goto	l4417
  5247  000E3A                     l4401:
  5248                           
  5249                           ;RTC.c: 89: strcpy(month, "Jul");
  5250  000E3A  0EBE               	movlw	low printRTC@month
  5251  000E3C  0100               	movlb	0	; () banked
  5252  000E3E  6F80               	movwf	strcpy@to& (0+255),b
  5253  000E40  0E00               	movlw	high printRTC@month
  5254  000E42  0100               	movlb	0	; () banked
  5255  000E44  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5256  000E46  0ED7               	movlw	low STR_42
  5257  000E48  0100               	movlb	0	; () banked
  5258  000E4A  6F82               	movwf	strcpy@from& (0+255),b
  5259  000E4C  0EFF               	movlw	high STR_42
  5260  000E4E  0100               	movlb	0	; () banked
  5261  000E50  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5262  000E52  EC31  F012         	call	_strcpy	;wreg free
  5263                           
  5264                           ;RTC.c: 90: break;
  5265  000E56  D07A               	goto	l4417
  5266  000E58                     l4403:
  5267                           
  5268                           ;RTC.c: 92: strcpy(month, "Aug");
  5269  000E58  0EBE               	movlw	low printRTC@month
  5270  000E5A  0100               	movlb	0	; () banked
  5271  000E5C  6F80               	movwf	strcpy@to& (0+255),b
  5272  000E5E  0E00               	movlw	high printRTC@month
  5273  000E60  0100               	movlb	0	; () banked
  5274  000E62  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5275  000E64  0ED3               	movlw	low STR_43
  5276  000E66  0100               	movlb	0	; () banked
  5277  000E68  6F82               	movwf	strcpy@from& (0+255),b
  5278  000E6A  0EFF               	movlw	high STR_43
  5279  000E6C  0100               	movlb	0	; () banked
  5280  000E6E  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5281  000E70  EC31  F012         	call	_strcpy	;wreg free
  5282                           
  5283                           ;RTC.c: 93: break;
  5284  000E74  D06B               	goto	l4417
  5285  000E76                     l4405:
  5286                           
  5287                           ;RTC.c: 95: strcpy(month, "Sep");
  5288  000E76  0EBE               	movlw	low printRTC@month
  5289  000E78  0100               	movlb	0	; () banked
  5290  000E7A  6F80               	movwf	strcpy@to& (0+255),b
  5291  000E7C  0E00               	movlw	high printRTC@month
  5292  000E7E  0100               	movlb	0	; () banked
  5293  000E80  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5294  000E82  0EE3               	movlw	low STR_44
  5295  000E84  0100               	movlb	0	; () banked
  5296  000E86  6F82               	movwf	strcpy@from& (0+255),b
  5297  000E88  0EFF               	movlw	high STR_44
  5298  000E8A  0100               	movlb	0	; () banked
  5299  000E8C  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5300  000E8E  EC31  F012         	call	_strcpy	;wreg free
  5301                           
  5302                           ;RTC.c: 96: break;
  5303  000E92  D05C               	goto	l4417
  5304  000E94                     l4407:
  5305                           
  5306                           ;RTC.c: 98: strcpy(month, "Oct");
  5307  000E94  0EBE               	movlw	low printRTC@month
  5308  000E96  0100               	movlb	0	; () banked
  5309  000E98  6F80               	movwf	strcpy@to& (0+255),b
  5310  000E9A  0E00               	movlw	high printRTC@month
  5311  000E9C  0100               	movlb	0	; () banked
  5312  000E9E  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5313  000EA0  0EEF               	movlw	low STR_45
  5314  000EA2  0100               	movlb	0	; () banked
  5315  000EA4  6F82               	movwf	strcpy@from& (0+255),b
  5316  000EA6  0EFF               	movlw	high STR_45
  5317  000EA8  0100               	movlb	0	; () banked
  5318  000EAA  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5319  000EAC  EC31  F012         	call	_strcpy	;wreg free
  5320                           
  5321                           ;RTC.c: 99: break;
  5322  000EB0  D04D               	goto	l4417
  5323  000EB2                     l4409:
  5324                           
  5325                           ;RTC.c: 101: strcpy(month, "Nov");
  5326  000EB2  0EBE               	movlw	low printRTC@month
  5327  000EB4  0100               	movlb	0	; () banked
  5328  000EB6  6F80               	movwf	strcpy@to& (0+255),b
  5329  000EB8  0E00               	movlw	high printRTC@month
  5330  000EBA  0100               	movlb	0	; () banked
  5331  000EBC  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5332  000EBE  0EF3               	movlw	low STR_46
  5333  000EC0  0100               	movlb	0	; () banked
  5334  000EC2  6F82               	movwf	strcpy@from& (0+255),b
  5335  000EC4  0EFF               	movlw	high STR_46
  5336  000EC6  0100               	movlb	0	; () banked
  5337  000EC8  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5338  000ECA  EC31  F012         	call	_strcpy	;wreg free
  5339                           
  5340                           ;RTC.c: 102: break;
  5341  000ECE  D03E               	goto	l4417
  5342  000ED0                     l4411:
  5343                           
  5344                           ;RTC.c: 104: strcpy(month, "Dec");
  5345  000ED0  0EBE               	movlw	low printRTC@month
  5346  000ED2  0100               	movlb	0	; () banked
  5347  000ED4  6F80               	movwf	strcpy@to& (0+255),b
  5348  000ED6  0E00               	movlw	high printRTC@month
  5349  000ED8  0100               	movlb	0	; () banked
  5350  000EDA  6F81               	movwf	(strcpy@to+1)& (0+255),b
  5351  000EDC  0ECF               	movlw	low STR_47
  5352  000EDE  0100               	movlb	0	; () banked
  5353  000EE0  6F82               	movwf	strcpy@from& (0+255),b
  5354  000EE2  0EFF               	movlw	high STR_47
  5355  000EE4  0100               	movlb	0	; () banked
  5356  000EE6  6F83               	movwf	(strcpy@from+1)& (0+255),b
  5357  000EE8  EC31  F012         	call	_strcpy	;wreg free
  5358                           
  5359                           ;RTC.c: 106: }
  5360                           
  5361                           ;RTC.c: 105: break;
  5362  000EEC  D02F               	goto	l4417
  5363  000EEE                     l4415:
  5364  000EEE  C0BC  F0AB         	movff	printRTC@RTC_month,??_printRTC
  5365  000EF2  C0BD  F0AC         	movff	printRTC@RTC_month+1,??_printRTC+1
  5366                           
  5367                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5368                           ; Switch size 1, requested type "space"
  5369                           ; Number of cases is 1, Range of values is 0 to 0
  5370                           ; switch strategies available:
  5371                           ; Name         Instructions Cycles
  5372                           ; simple_byte            4     3 (average)
  5373                           ;	Chosen strategy is simple_byte
  5374  000EF6  0100               	movlb	0	; () banked
  5375  000EF8  51AC               	movf	(??_printRTC+1)& (0+255),w,b
  5376  000EFA  0A00               	xorlw	0	; case 0
  5377  000EFC  A4D8               	btfss	status,2,c
  5378  000EFE  D026               	goto	l4417
  5379                           
  5380                           ; BSR set to: 0
  5381                           ; Switch size 1, requested type "space"
  5382                           ; Number of cases is 12, Range of values is 1 to 12
  5383                           ; switch strategies available:
  5384                           ; Name         Instructions Cycles
  5385                           ; simple_byte           37    19 (average)
  5386                           ;	Chosen strategy is simple_byte
  5387  000F00  0100               	movlb	0	; () banked
  5388  000F02  51AB               	movf	??_printRTC& (0+255),w,b
  5389  000F04  0A01               	xorlw	1	; case 1
  5390  000F06  B4D8               	btfsc	status,2,c
  5391  000F08  D73E               	goto	l4389
  5392  000F0A  0A03               	xorlw	3	; case 2
  5393  000F0C  B4D8               	btfsc	status,2,c
  5394  000F0E  D74A               	goto	l4391
  5395  000F10  0A01               	xorlw	1	; case 3
  5396  000F12  B4D8               	btfsc	status,2,c
  5397  000F14  D756               	goto	l4393
  5398  000F16  0A07               	xorlw	7	; case 4
  5399  000F18  B4D8               	btfsc	status,2,c
  5400  000F1A  D762               	goto	l4395
  5401  000F1C  0A01               	xorlw	1	; case 5
  5402  000F1E  B4D8               	btfsc	status,2,c
  5403  000F20  D76E               	goto	l4397
  5404  000F22  0A03               	xorlw	3	; case 6
  5405  000F24  B4D8               	btfsc	status,2,c
  5406  000F26  D77A               	goto	l4399
  5407  000F28  0A01               	xorlw	1	; case 7
  5408  000F2A  B4D8               	btfsc	status,2,c
  5409  000F2C  D786               	goto	l4401
  5410  000F2E  0A0F               	xorlw	15	; case 8
  5411  000F30  B4D8               	btfsc	status,2,c
  5412  000F32  D792               	goto	l4403
  5413  000F34  0A01               	xorlw	1	; case 9
  5414  000F36  B4D8               	btfsc	status,2,c
  5415  000F38  D79E               	goto	l4405
  5416  000F3A  0A03               	xorlw	3	; case 10
  5417  000F3C  B4D8               	btfsc	status,2,c
  5418  000F3E  D7AA               	goto	l4407
  5419  000F40  0A01               	xorlw	1	; case 11
  5420  000F42  B4D8               	btfsc	status,2,c
  5421  000F44  D7B6               	goto	l4409
  5422  000F46  0A07               	xorlw	7	; case 12
  5423  000F48  B4D8               	btfsc	status,2,c
  5424  000F4A  D7C2               	goto	l4411
  5425  000F4C                     l4417:
  5426                           
  5427                           ;RTC.c: 107: lcdInst(0b10000000);;
  5428  000F4C  0E80               	movlw	128
  5429  000F4E  EC79  F014         	call	_lcdInst
  5430                           
  5431                           ;RTC.c: 108: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
  5432  000F52  0ED0               	movlw	low STR_48
  5433  000F54  0100               	movlb	0	; () banked
  5434  000F56  6F8E               	movwf	printf@f& (0+255),b
  5435  000F58  0EFD               	movlw	high STR_48
  5436  000F5A  0100               	movlb	0	; () banked
  5437  000F5C  6F8F               	movwf	(printf@f+1)& (0+255),b
  5438  000F5E  C0B6  F090         	movff	printRTC@INT_time+8,?_printf+2
  5439  000F62  C0B7  F091         	movff	printRTC@INT_time+9,?_printf+3
  5440  000F66  0EBE               	movlw	low printRTC@month
  5441  000F68  0100               	movlb	0	; () banked
  5442  000F6A  6F92               	movwf	(?_printf+4)& (0+255),b
  5443  000F6C  0E00               	movlw	high printRTC@month
  5444  000F6E  0100               	movlb	0	; () banked
  5445  000F70  6F93               	movwf	(?_printf+5)& (0+255),b
  5446  000F72  C0B2  F094         	movff	printRTC@INT_time+4,?_printf+6
  5447  000F76  C0B3  F095         	movff	printRTC@INT_time+5,?_printf+7
  5448  000F7A  C0B0  F096         	movff	printRTC@INT_time+2,?_printf+8
  5449  000F7E  C0B1  F097         	movff	printRTC@INT_time+3,?_printf+9
  5450  000F82  C0AE  F098         	movff	printRTC@INT_time,?_printf+10
  5451  000F86  C0AF  F099         	movff	printRTC@INT_time+1,?_printf+11
  5452  000F8A  ECBB  F002         	call	_printf	;wreg free
  5453  000F8E  0012               	return		;funcret
  5454  000F90                     __end_of_printRTC:
  5455                           	opt stack 0
  5456                           tblptru	equ	0xFF8
  5457                           tblptrh	equ	0xFF7
  5458                           tblptrl	equ	0xFF6
  5459                           tablat	equ	0xFF5
  5460                           prodh	equ	0xFF4
  5461                           prodl	equ	0xFF3
  5462                           intcon	equ	0xFF2
  5463                           intcon3	equ	0xFF0
  5464                           postinc0	equ	0xFEE
  5465                           wreg	equ	0xFE8
  5466                           postdec1	equ	0xFE5
  5467                           fsr1l	equ	0xFE1
  5468                           indf2	equ	0xFDF
  5469                           postinc2	equ	0xFDE
  5470                           postdec2	equ	0xFDD
  5471                           fsr2h	equ	0xFDA
  5472                           fsr2l	equ	0xFD9
  5473                           status	equ	0xFD8
  5474                           
  5475 ;; *************** function _strcpy *****************
  5476 ;; Defined at:
  5477 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
  5478 ;; Parameters:    Size  Location     Type
  5479 ;;  to              2    0[BANK0 ] PTR unsigned char 
  5480 ;;		 -> printRTC@month(4), 
  5481 ;;  from            2    2[BANK0 ] PTR const unsigned char 
  5482 ;;		 -> STR_47(4), STR_46(4), STR_45(4), STR_44(4), 
  5483 ;;		 -> STR_43(4), STR_42(4), STR_41(4), STR_40(4), 
  5484 ;;		 -> STR_39(4), STR_38(4), STR_37(4), STR_36(4), 
  5485 ;; Auto vars:     Size  Location     Type
  5486 ;;  cp              2    4[BANK0 ] PTR unsigned char 
  5487 ;;		 -> printRTC@month(4), 
  5488 ;; Return value:  Size  Location     Type
  5489 ;;                  2    0[BANK0 ] PTR unsigned char 
  5490 ;; Registers used:
  5491 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  5492 ;; Tracked objects:
  5493 ;;		On entry : 0/0
  5494 ;;		On exit  : 0/0
  5495 ;;		Unchanged: 0/0
  5496 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5497 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5498 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5499 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5500 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5501 ;;Total ram usage:        6 bytes
  5502 ;; Hardware stack levels used:    1
  5503 ;; Hardware stack levels required when called:    7
  5504 ;; This function calls:
  5505 ;;		Nothing
  5506 ;; This function is called by:
  5507 ;;		_printRTC
  5508 ;; This function uses a non-reentrant model
  5509 ;;
  5510                           
  5511                           	psect	text20
  5512  002462                     __ptext20:
  5513                           	opt stack 0
  5514  002462                     _strcpy:
  5515                           	opt stack 20
  5516                           
  5517                           ;incstack = 0
  5518  002462  C080  F084         	movff	strcpy@to,strcpy@cp
  5519  002466  C081  F085         	movff	strcpy@to+1,strcpy@cp+1
  5520  00246A  D006               	goto	l4187
  5521  00246C                     l4185:
  5522  00246C  0100               	movlb	0	; () banked
  5523  00246E  4B84               	infsnz	strcpy@cp& (0+255),f,b
  5524  002470  2B85               	incf	(strcpy@cp+1)& (0+255),f,b
  5525  002472  0100               	movlb	0	; () banked
  5526  002474  4B82               	infsnz	strcpy@from& (0+255),f,b
  5527  002476  2B83               	incf	(strcpy@from+1)& (0+255),f,b
  5528  002478                     l4187:
  5529  002478  C082  FFF6         	movff	strcpy@from,tblptrl
  5530  00247C  C083  FFF7         	movff	strcpy@from+1,tblptrh
  5531  002480                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  5532  002480  6AF8               	clrf	tblptru,c
  5533  002482                     	endif
  5534  002482                     	if	0	;tblptru may be non-zero
  5535  002482                     	endif
  5536  002482  C084  FFD9         	movff	strcpy@cp,fsr2l
  5537  002486  C085  FFDA         	movff	strcpy@cp+1,fsr2h
  5538  00248A  0008               	tblrd		*
  5539  00248C  CFF5 FFDF          	movff	tablat,indf2
  5540  002490  50DF               	movf	indf2,w,c
  5541  002492  B4D8               	btfsc	status,2,c
  5542  002494  0012               	return	
  5543  002496  D7EA               	goto	l4185
  5544  002498                     __end_of_strcpy:
  5545                           	opt stack 0
  5546                           tblptru	equ	0xFF8
  5547                           tblptrh	equ	0xFF7
  5548                           tblptrl	equ	0xFF6
  5549                           tablat	equ	0xFF5
  5550                           prodh	equ	0xFF4
  5551                           prodl	equ	0xFF3
  5552                           intcon	equ	0xFF2
  5553                           intcon3	equ	0xFF0
  5554                           postinc0	equ	0xFEE
  5555                           wreg	equ	0xFE8
  5556                           postdec1	equ	0xFE5
  5557                           fsr1l	equ	0xFE1
  5558                           indf2	equ	0xFDF
  5559                           postinc2	equ	0xFDE
  5560                           postdec2	equ	0xFDD
  5561                           fsr2h	equ	0xFDA
  5562                           fsr2l	equ	0xFD9
  5563                           status	equ	0xFD8
  5564                           
  5565 ;; *************** function _getRTC *****************
  5566 ;; Defined at:
  5567 ;;		line 42 in file "RTC.c"
  5568 ;; Parameters:    Size  Location     Type
  5569 ;;		None
  5570 ;; Auto vars:     Size  Location     Type
  5571 ;;  i               2    3[BANK0 ] int 
  5572 ;; Return value:  Size  Location     Type
  5573 ;;                  1    wreg      void 
  5574 ;; Registers used:
  5575 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5576 ;; Tracked objects:
  5577 ;;		On entry : 0/0
  5578 ;;		On exit  : 0/0
  5579 ;;		Unchanged: 0/0
  5580 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5581 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5582 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5583 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5584 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5585 ;;Total ram usage:        2 bytes
  5586 ;; Hardware stack levels used:    1
  5587 ;; Hardware stack levels required when called:    9
  5588 ;; This function calls:
  5589 ;;		_I2C_Master_Read
  5590 ;;		_I2C_Master_Start
  5591 ;;		_I2C_Master_Stop
  5592 ;;		_I2C_Master_Write
  5593 ;; This function is called by:
  5594 ;;		_printRTC
  5595 ;;		_initSortTimer
  5596 ;;		_getIR
  5597 ;; This function uses a non-reentrant model
  5598 ;;
  5599                           
  5600                           	psect	text21
  5601  001E9E                     __ptext21:
  5602                           	opt stack 0
  5603  001E9E                     _getRTC:
  5604                           	opt stack 18
  5605                           
  5606                           ;RTC.c: 46: I2C_Master_Start();
  5607                           
  5608                           ;incstack = 0
  5609  001E9E  ECA5  F014         	call	_I2C_Master_Start	;wreg free
  5610                           
  5611                           ;RTC.c: 47: I2C_Master_Write(0b11010000);
  5612  001EA2  0E00               	movlw	0
  5613  001EA4  0100               	movlb	0	; () banked
  5614  001EA6  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5615  001EA8  0ED0               	movlw	208
  5616  001EAA  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  5617  001EAC  EC93  F014         	call	_I2C_Master_Write	;wreg free
  5618                           
  5619                           ;RTC.c: 48: I2C_Master_Write(0x00);
  5620  001EB0  0E00               	movlw	0
  5621  001EB2  0100               	movlb	0	; () banked
  5622  001EB4  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5623  001EB6  0E00               	movlw	0
  5624  001EB8  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  5625  001EBA  EC93  F014         	call	_I2C_Master_Write	;wreg free
  5626                           
  5627                           ;RTC.c: 49: I2C_Master_Stop();
  5628  001EBE  ECA1  F014         	call	_I2C_Master_Stop	;wreg free
  5629                           
  5630                           ;RTC.c: 52: I2C_Master_Start();
  5631  001EC2  ECA5  F014         	call	_I2C_Master_Start	;wreg free
  5632                           
  5633                           ;RTC.c: 53: I2C_Master_Write(0b11010001);
  5634  001EC6  0E00               	movlw	0
  5635  001EC8  0100               	movlb	0	; () banked
  5636  001ECA  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5637  001ECC  0ED1               	movlw	209
  5638  001ECE  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  5639  001ED0  EC93  F014         	call	_I2C_Master_Write	;wreg free
  5640                           
  5641                           ;RTC.c: 54: for(int i = 0; i < 6; i++){
  5642  001ED4  0E00               	movlw	0
  5643  001ED6  0100               	movlb	0	; () banked
  5644  001ED8  6F84               	movwf	(getRTC@i+1)& (0+255),b
  5645  001EDA  0E00               	movlw	0
  5646  001EDC  6F83               	movwf	getRTC@i& (0+255),b
  5647  001EDE                     l4171:
  5648                           
  5649                           ; BSR set to: 0
  5650  001EDE  0100               	movlb	0	; () banked
  5651  001EE0  BF84               	btfsc	(getRTC@i+1)& (0+255),7,b
  5652  001EE2  D008               	goto	l4175
  5653  001EE4  0100               	movlb	0	; () banked
  5654  001EE6  5184               	movf	(getRTC@i+1)& (0+255),w,b
  5655  001EE8  E115               	bnz	l4181
  5656  001EEA  0E06               	movlw	6
  5657  001EEC  0100               	movlb	0	; () banked
  5658  001EEE  5D83               	subwf	getRTC@i& (0+255),w,b
  5659  001EF0  B0D8               	btfsc	status,0,c
  5660  001EF2  D010               	goto	l4181
  5661  001EF4                     l4175:
  5662                           
  5663                           ; BSR set to: 0
  5664                           ;RTC.c: 55: time[i] = I2C_Master_Read(1);
  5665  001EF4  0ED4               	movlw	low _time
  5666  001EF6  0100               	movlb	0	; () banked
  5667  001EF8  2583               	addwf	getRTC@i& (0+255),w,b
  5668  001EFA  6ED9               	movwf	fsr2l,c
  5669  001EFC  0E00               	movlw	high _time
  5670  001EFE  0100               	movlb	0	; () banked
  5671  001F00  2184               	addwfc	(getRTC@i+1)& (0+255),w,b
  5672  001F02  6EDA               	movwf	fsr2h,c
  5673  001F04  0E01               	movlw	1
  5674  001F06  EC6F  F013         	call	_I2C_Master_Read
  5675  001F0A  6EDF               	movwf	indf2,c
  5676  001F0C  0100               	movlb	0	; () banked
  5677  001F0E  4B83               	infsnz	getRTC@i& (0+255),f,b
  5678  001F10  2B84               	incf	(getRTC@i+1)& (0+255),f,b
  5679  001F12  D7E5               	goto	l4171
  5680  001F14                     l4181:
  5681                           
  5682                           ; BSR set to: 0
  5683                           ;RTC.c: 56: }
  5684                           ;RTC.c: 57: time[6] = I2C_Master_Read(0);
  5685  001F14  0E00               	movlw	0
  5686  001F16  EC6F  F013         	call	_I2C_Master_Read
  5687  001F1A  0100               	movlb	0	; () banked
  5688  001F1C  6FDA               	movwf	(_time+6)& (0+255),b
  5689                           
  5690                           ;RTC.c: 58: I2C_Master_Stop();
  5691  001F1E  ECA1  F014         	call	_I2C_Master_Stop	;wreg free
  5692  001F22  0012               	return		;funcret
  5693  001F24                     __end_of_getRTC:
  5694                           	opt stack 0
  5695                           tblptru	equ	0xFF8
  5696                           tblptrh	equ	0xFF7
  5697                           tblptrl	equ	0xFF6
  5698                           tablat	equ	0xFF5
  5699                           prodh	equ	0xFF4
  5700                           prodl	equ	0xFF3
  5701                           intcon	equ	0xFF2
  5702                           intcon3	equ	0xFF0
  5703                           postinc0	equ	0xFEE
  5704                           wreg	equ	0xFE8
  5705                           postdec1	equ	0xFE5
  5706                           fsr1l	equ	0xFE1
  5707                           indf2	equ	0xFDF
  5708                           postinc2	equ	0xFDE
  5709                           postdec2	equ	0xFDD
  5710                           fsr2h	equ	0xFDA
  5711                           fsr2l	equ	0xFD9
  5712                           status	equ	0xFD8
  5713                           
  5714 ;; *************** function _I2C_Master_Write *****************
  5715 ;; Defined at:
  5716 ;;		line 47 in file "I2C.c"
  5717 ;; Parameters:    Size  Location     Type
  5718 ;;  d               2    1[BANK0 ] unsigned int 
  5719 ;; Auto vars:     Size  Location     Type
  5720 ;;		None
  5721 ;; Return value:  Size  Location     Type
  5722 ;;                  1    wreg      void 
  5723 ;; Registers used:
  5724 ;;		wreg, status,2, status,0, cstack
  5725 ;; Tracked objects:
  5726 ;;		On entry : 0/0
  5727 ;;		On exit  : 0/0
  5728 ;;		Unchanged: 0/0
  5729 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5730 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5731 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5732 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5733 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5734 ;;Total ram usage:        2 bytes
  5735 ;; Hardware stack levels used:    1
  5736 ;; Hardware stack levels required when called:    8
  5737 ;; This function calls:
  5738 ;;		_I2C_Master_Wait
  5739 ;; This function is called by:
  5740 ;;		_loadRTC
  5741 ;;		_getRTC
  5742 ;; This function uses a non-reentrant model
  5743 ;;
  5744                           
  5745                           	psect	text22
  5746  002926                     __ptext22:
  5747                           	opt stack 0
  5748  002926                     _I2C_Master_Write:
  5749                           	opt stack 18
  5750                           
  5751                           ;I2C.c: 49: I2C_Master_Wait();
  5752                           
  5753                           ;incstack = 0
  5754  002926  EC4B  F014         	call	_I2C_Master_Wait	;wreg free
  5755                           
  5756                           ;I2C.c: 50: SSPBUF = d;
  5757  00292A  C081  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  5758  00292E  0012               	return		;funcret
  5759  002930                     __end_of_I2C_Master_Write:
  5760                           	opt stack 0
  5761                           tblptru	equ	0xFF8
  5762                           tblptrh	equ	0xFF7
  5763                           tblptrl	equ	0xFF6
  5764                           tablat	equ	0xFF5
  5765                           prodh	equ	0xFF4
  5766                           prodl	equ	0xFF3
  5767                           intcon	equ	0xFF2
  5768                           intcon3	equ	0xFF0
  5769                           postinc0	equ	0xFEE
  5770                           wreg	equ	0xFE8
  5771                           postdec1	equ	0xFE5
  5772                           fsr1l	equ	0xFE1
  5773                           indf2	equ	0xFDF
  5774                           postinc2	equ	0xFDE
  5775                           postdec2	equ	0xFDD
  5776                           fsr2h	equ	0xFDA
  5777                           fsr2l	equ	0xFD9
  5778                           status	equ	0xFD8
  5779                           
  5780 ;; *************** function _I2C_Master_Stop *****************
  5781 ;; Defined at:
  5782 ;;		line 41 in file "I2C.c"
  5783 ;; Parameters:    Size  Location     Type
  5784 ;;		None
  5785 ;; Auto vars:     Size  Location     Type
  5786 ;;		None
  5787 ;; Return value:  Size  Location     Type
  5788 ;;                  1    wreg      void 
  5789 ;; Registers used:
  5790 ;;		wreg, status,2, status,0, cstack
  5791 ;; Tracked objects:
  5792 ;;		On entry : 0/0
  5793 ;;		On exit  : 0/0
  5794 ;;		Unchanged: 0/0
  5795 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5796 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5797 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5798 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5799 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5800 ;;Total ram usage:        0 bytes
  5801 ;; Hardware stack levels used:    1
  5802 ;; Hardware stack levels required when called:    8
  5803 ;; This function calls:
  5804 ;;		_I2C_Master_Wait
  5805 ;; This function is called by:
  5806 ;;		_loadRTC
  5807 ;;		_getRTC
  5808 ;; This function uses a non-reentrant model
  5809 ;;
  5810                           
  5811                           	psect	text23
  5812  002942                     __ptext23:
  5813                           	opt stack 0
  5814  002942                     _I2C_Master_Stop:
  5815                           	opt stack 18
  5816                           
  5817                           ;I2C.c: 43: I2C_Master_Wait();
  5818                           
  5819                           ;incstack = 0
  5820  002942  EC4B  F014         	call	_I2C_Master_Wait	;wreg free
  5821                           
  5822                           ;I2C.c: 44: PEN = 1;
  5823  002946  84C5               	bsf	4037,2,c	;volatile
  5824  002948  0012               	return		;funcret
  5825  00294A                     __end_of_I2C_Master_Stop:
  5826                           	opt stack 0
  5827                           tblptru	equ	0xFF8
  5828                           tblptrh	equ	0xFF7
  5829                           tblptrl	equ	0xFF6
  5830                           tablat	equ	0xFF5
  5831                           prodh	equ	0xFF4
  5832                           prodl	equ	0xFF3
  5833                           intcon	equ	0xFF2
  5834                           intcon3	equ	0xFF0
  5835                           postinc0	equ	0xFEE
  5836                           wreg	equ	0xFE8
  5837                           postdec1	equ	0xFE5
  5838                           fsr1l	equ	0xFE1
  5839                           indf2	equ	0xFDF
  5840                           postinc2	equ	0xFDE
  5841                           postdec2	equ	0xFDD
  5842                           fsr2h	equ	0xFDA
  5843                           fsr2l	equ	0xFD9
  5844                           status	equ	0xFD8
  5845                           
  5846 ;; *************** function _I2C_Master_Start *****************
  5847 ;; Defined at:
  5848 ;;		line 29 in file "I2C.c"
  5849 ;; Parameters:    Size  Location     Type
  5850 ;;		None
  5851 ;; Auto vars:     Size  Location     Type
  5852 ;;		None
  5853 ;; Return value:  Size  Location     Type
  5854 ;;                  1    wreg      void 
  5855 ;; Registers used:
  5856 ;;		wreg, status,2, status,0, cstack
  5857 ;; Tracked objects:
  5858 ;;		On entry : 0/0
  5859 ;;		On exit  : 0/0
  5860 ;;		Unchanged: 0/0
  5861 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5862 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5863 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5864 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5865 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5866 ;;Total ram usage:        0 bytes
  5867 ;; Hardware stack levels used:    1
  5868 ;; Hardware stack levels required when called:    8
  5869 ;; This function calls:
  5870 ;;		_I2C_Master_Wait
  5871 ;; This function is called by:
  5872 ;;		_loadRTC
  5873 ;;		_getRTC
  5874 ;; This function uses a non-reentrant model
  5875 ;;
  5876                           
  5877                           	psect	text24
  5878  00294A                     __ptext24:
  5879                           	opt stack 0
  5880  00294A                     _I2C_Master_Start:
  5881                           	opt stack 18
  5882                           
  5883                           ;I2C.c: 31: I2C_Master_Wait();
  5884                           
  5885                           ;incstack = 0
  5886  00294A  EC4B  F014         	call	_I2C_Master_Wait	;wreg free
  5887                           
  5888                           ;I2C.c: 32: SEN = 1;
  5889  00294E  80C5               	bsf	4037,0,c	;volatile
  5890  002950  0012               	return		;funcret
  5891  002952                     __end_of_I2C_Master_Start:
  5892                           	opt stack 0
  5893                           tblptru	equ	0xFF8
  5894                           tblptrh	equ	0xFF7
  5895                           tblptrl	equ	0xFF6
  5896                           tablat	equ	0xFF5
  5897                           prodh	equ	0xFF4
  5898                           prodl	equ	0xFF3
  5899                           intcon	equ	0xFF2
  5900                           intcon3	equ	0xFF0
  5901                           postinc0	equ	0xFEE
  5902                           wreg	equ	0xFE8
  5903                           postdec1	equ	0xFE5
  5904                           fsr1l	equ	0xFE1
  5905                           indf2	equ	0xFDF
  5906                           postinc2	equ	0xFDE
  5907                           postdec2	equ	0xFDD
  5908                           fsr2h	equ	0xFDA
  5909                           fsr2l	equ	0xFD9
  5910                           status	equ	0xFD8
  5911                           
  5912 ;; *************** function _I2C_Master_Read *****************
  5913 ;; Defined at:
  5914 ;;		line 53 in file "I2C.c"
  5915 ;; Parameters:    Size  Location     Type
  5916 ;;  a               1    wreg     unsigned char 
  5917 ;; Auto vars:     Size  Location     Type
  5918 ;;  a               1    1[BANK0 ] unsigned char 
  5919 ;;  temp            1    2[BANK0 ] unsigned char 
  5920 ;; Return value:  Size  Location     Type
  5921 ;;                  1    wreg      unsigned char 
  5922 ;; Registers used:
  5923 ;;		wreg, status,2, status,0, cstack
  5924 ;; Tracked objects:
  5925 ;;		On entry : 0/0
  5926 ;;		On exit  : 0/0
  5927 ;;		Unchanged: 0/0
  5928 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5929 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5930 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5931 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5932 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5933 ;;Total ram usage:        2 bytes
  5934 ;; Hardware stack levels used:    1
  5935 ;; Hardware stack levels required when called:    8
  5936 ;; This function calls:
  5937 ;;		_I2C_Master_Wait
  5938 ;; This function is called by:
  5939 ;;		_getRTC
  5940 ;; This function uses a non-reentrant model
  5941 ;;
  5942                           
  5943                           	psect	text25
  5944  0026DE                     __ptext25:
  5945                           	opt stack 0
  5946  0026DE                     _I2C_Master_Read:
  5947                           	opt stack 18
  5948                           
  5949                           ;incstack = 0
  5950                           ;I2C_Master_Read@a stored from wreg
  5951  0026DE  0100               	movlb	0	; () banked
  5952  0026E0  6F81               	movwf	I2C_Master_Read@a& (0+255),b
  5953                           
  5954                           ;I2C.c: 55: unsigned char temp;
  5955                           ;I2C.c: 56: I2C_Master_Wait();
  5956  0026E2  EC4B  F014         	call	_I2C_Master_Wait	;wreg free
  5957                           
  5958                           ;I2C.c: 57: RCEN = 1;
  5959  0026E6  86C5               	bsf	4037,3,c	;volatile
  5960                           
  5961                           ;I2C.c: 58: I2C_Master_Wait();
  5962  0026E8  EC4B  F014         	call	_I2C_Master_Wait	;wreg free
  5963                           
  5964                           ;I2C.c: 59: temp = SSPBUF;
  5965  0026EC  CFC9 F082          	movff	4041,I2C_Master_Read@temp	;volatile
  5966                           
  5967                           ;I2C.c: 60: I2C_Master_Wait();
  5968  0026F0  EC4B  F014         	call	_I2C_Master_Wait	;wreg free
  5969                           
  5970                           ;I2C.c: 61: ACKDT = (a)?0:1;
  5971  0026F4  0100               	movlb	0	; () banked
  5972  0026F6  5181               	movf	I2C_Master_Read@a& (0+255),w,b
  5973  0026F8  0100               	movlb	0	; () banked
  5974  0026FA  A4D8               	btfss	status,2,c
  5975  0026FC  D002               	goto	u2350
  5976  0026FE  8AC5               	bsf	4037,5,c	;volatile
  5977  002700  D001               	goto	l3883
  5978  002702                     u2350:
  5979  002702  9AC5               	bcf	4037,5,c	;volatile
  5980  002704                     l3883:
  5981                           
  5982                           ;I2C.c: 62: ACKEN = 1;
  5983  002704  88C5               	bsf	4037,4,c	;volatile
  5984                           
  5985                           ;I2C.c: 63: return temp;
  5986  002706  0100               	movlb	0	; () banked
  5987  002708  5182               	movf	I2C_Master_Read@temp& (0+255),w,b
  5988  00270A  0012               	return	
  5989  00270C                     __end_of_I2C_Master_Read:
  5990                           	opt stack 0
  5991                           tblptru	equ	0xFF8
  5992                           tblptrh	equ	0xFF7
  5993                           tblptrl	equ	0xFF6
  5994                           tablat	equ	0xFF5
  5995                           prodh	equ	0xFF4
  5996                           prodl	equ	0xFF3
  5997                           intcon	equ	0xFF2
  5998                           intcon3	equ	0xFF0
  5999                           postinc0	equ	0xFEE
  6000                           wreg	equ	0xFE8
  6001                           postdec1	equ	0xFE5
  6002                           fsr1l	equ	0xFE1
  6003                           indf2	equ	0xFDF
  6004                           postinc2	equ	0xFDE
  6005                           postdec2	equ	0xFDD
  6006                           fsr2h	equ	0xFDA
  6007                           fsr2l	equ	0xFD9
  6008                           status	equ	0xFD8
  6009                           
  6010 ;; *************** function _I2C_Master_Wait *****************
  6011 ;; Defined at:
  6012 ;;		line 24 in file "I2C.c"
  6013 ;; Parameters:    Size  Location     Type
  6014 ;;		None
  6015 ;; Auto vars:     Size  Location     Type
  6016 ;;		None
  6017 ;; Return value:  Size  Location     Type
  6018 ;;                  1    wreg      void 
  6019 ;; Registers used:
  6020 ;;		wreg, status,2, status,0
  6021 ;; Tracked objects:
  6022 ;;		On entry : 0/0
  6023 ;;		On exit  : 0/0
  6024 ;;		Unchanged: 0/0
  6025 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6026 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6027 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6028 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6029 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6030 ;;Total ram usage:        1 bytes
  6031 ;; Hardware stack levels used:    1
  6032 ;; Hardware stack levels required when called:    7
  6033 ;; This function calls:
  6034 ;;		Nothing
  6035 ;; This function is called by:
  6036 ;;		_I2C_Master_Start
  6037 ;;		_I2C_Master_Stop
  6038 ;;		_I2C_Master_Write
  6039 ;;		_I2C_Master_Read
  6040 ;;		_I2C_Master_RepeatedStart
  6041 ;; This function uses a non-reentrant model
  6042 ;;
  6043                           
  6044                           	psect	text26
  6045  002896                     __ptext26:
  6046                           	opt stack 0
  6047  002896                     _I2C_Master_Wait:
  6048                           	opt stack 18
  6049  002896                     l138:
  6050  002896  B4C7               	btfsc	4039,2,c	;volatile
  6051  002898  D7FE               	goto	l138
  6052  00289A  CFC5 F080          	movff	4037,??_I2C_Master_Wait	;volatile
  6053  00289E  0E1F               	movlw	31
  6054  0028A0  0100               	movlb	0	; () banked
  6055  0028A2  1780               	andwf	??_I2C_Master_Wait& (0+255),f,b
  6056  0028A4  B4D8               	btfsc	status,2,c
  6057  0028A6  0012               	return	
  6058  0028A8  D7F6               	goto	l138
  6059  0028AA                     __end_of_I2C_Master_Wait:
  6060                           	opt stack 0
  6061                           tblptru	equ	0xFF8
  6062                           tblptrh	equ	0xFF7
  6063                           tblptrl	equ	0xFF6
  6064                           tablat	equ	0xFF5
  6065                           prodh	equ	0xFF4
  6066                           prodl	equ	0xFF3
  6067                           intcon	equ	0xFF2
  6068                           intcon3	equ	0xFF0
  6069                           postinc0	equ	0xFEE
  6070                           wreg	equ	0xFE8
  6071                           postdec1	equ	0xFE5
  6072                           fsr1l	equ	0xFE1
  6073                           indf2	equ	0xFDF
  6074                           postinc2	equ	0xFDE
  6075                           postdec2	equ	0xFDD
  6076                           fsr2h	equ	0xFDA
  6077                           fsr2l	equ	0xFD9
  6078                           status	equ	0xFD8
  6079                           
  6080 ;; *************** function _change_state_to_menu_22 *****************
  6081 ;; Defined at:
  6082 ;;		line 439 in file "UI.c"
  6083 ;; Parameters:    Size  Location     Type
  6084 ;;		None
  6085 ;; Auto vars:     Size  Location     Type
  6086 ;;		None
  6087 ;; Return value:  Size  Location     Type
  6088 ;;                  1    wreg      void 
  6089 ;; Registers used:
  6090 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6091 ;; Tracked objects:
  6092 ;;		On entry : 0/0
  6093 ;;		On exit  : 0/0
  6094 ;;		Unchanged: 0/0
  6095 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6096 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6097 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6098 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6099 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6100 ;;Total ram usage:        0 bytes
  6101 ;; Hardware stack levels used:    1
  6102 ;; Hardware stack levels required when called:   10
  6103 ;; This function calls:
  6104 ;;		_lcdInst
  6105 ;;		_printf
  6106 ;; This function is called by:
  6107 ;;		_UI
  6108 ;; This function uses a non-reentrant model
  6109 ;;
  6110                           
  6111                           	psect	text27
  6112  0023F2                     __ptext27:
  6113                           	opt stack 0
  6114  0023F2                     _change_state_to_menu_22:
  6115                           	opt stack 19
  6116                           
  6117                           ;UI.c: 440: cur_state = 22;
  6118                           
  6119                           ; BSR set to: 0
  6120                           ;incstack = 0
  6121  0023F2  0E00               	movlw	0
  6122  0023F4  0100               	movlb	0	; () banked
  6123  0023F6  6FE0               	movwf	(_cur_state+1)& (0+255),b
  6124  0023F8  0E16               	movlw	22
  6125  0023FA  6FDF               	movwf	_cur_state& (0+255),b
  6126                           
  6127                           ; BSR set to: 0
  6128                           ;UI.c: 442: lcdInst(0b10000000);;
  6129  0023FC  0E80               	movlw	128
  6130  0023FE  EC79  F014         	call	_lcdInst
  6131                           
  6132                           ;UI.c: 443: printf("2. SORT        <");
  6133  002402  0E64               	movlw	low STR_19
  6134  002404  0100               	movlb	0	; () banked
  6135  002406  6F8E               	movwf	printf@f& (0+255),b
  6136  002408  0EFF               	movlw	high STR_19
  6137  00240A  0100               	movlb	0	; () banked
  6138  00240C  6F8F               	movwf	(printf@f+1)& (0+255),b
  6139  00240E  ECBB  F002         	call	_printf	;wreg free
  6140                           
  6141                           ;UI.c: 444: lcdInst(0b11000000);;
  6142  002412  0EC0               	movlw	192
  6143  002414  EC79  F014         	call	_lcdInst
  6144                           
  6145                           ;UI.c: 445: printf("3. LOGS         ");
  6146  002418  0E65               	movlw	low STR_21
  6147  00241A  0100               	movlb	0	; () banked
  6148  00241C  6F8E               	movwf	printf@f& (0+255),b
  6149  00241E  0EFE               	movlw	high STR_21
  6150  002420  0100               	movlb	0	; () banked
  6151  002422  6F8F               	movwf	(printf@f+1)& (0+255),b
  6152  002424  ECBB  F002         	call	_printf	;wreg free
  6153  002428  0012               	return		;funcret
  6154  00242A                     __end_of_change_state_to_menu_22:
  6155                           	opt stack 0
  6156                           tblptru	equ	0xFF8
  6157                           tblptrh	equ	0xFF7
  6158                           tblptrl	equ	0xFF6
  6159                           tablat	equ	0xFF5
  6160                           prodh	equ	0xFF4
  6161                           prodl	equ	0xFF3
  6162                           intcon	equ	0xFF2
  6163                           intcon3	equ	0xFF0
  6164                           postinc0	equ	0xFEE
  6165                           wreg	equ	0xFE8
  6166                           postdec1	equ	0xFE5
  6167                           fsr1l	equ	0xFE1
  6168                           indf2	equ	0xFDF
  6169                           postinc2	equ	0xFDE
  6170                           postdec2	equ	0xFDD
  6171                           fsr2h	equ	0xFDA
  6172                           fsr2l	equ	0xFD9
  6173                           status	equ	0xFD8
  6174                           
  6175 ;; *************** function _change_state_to_menu_12 *****************
  6176 ;; Defined at:
  6177 ;;		line 431 in file "UI.c"
  6178 ;; Parameters:    Size  Location     Type
  6179 ;;		None
  6180 ;; Auto vars:     Size  Location     Type
  6181 ;;		None
  6182 ;; Return value:  Size  Location     Type
  6183 ;;                  1    wreg      void 
  6184 ;; Registers used:
  6185 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6186 ;; Tracked objects:
  6187 ;;		On entry : 0/0
  6188 ;;		On exit  : 0/0
  6189 ;;		Unchanged: 0/0
  6190 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6191 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6192 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6193 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6194 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6195 ;;Total ram usage:        0 bytes
  6196 ;; Hardware stack levels used:    1
  6197 ;; Hardware stack levels required when called:   10
  6198 ;; This function calls:
  6199 ;;		_lcdInst
  6200 ;;		_printf
  6201 ;; This function is called by:
  6202 ;;		_UI
  6203 ;; This function uses a non-reentrant model
  6204 ;;
  6205                           
  6206                           	psect	text28
  6207  00242A                     __ptext28:
  6208                           	opt stack 0
  6209  00242A                     _change_state_to_menu_12:
  6210                           	opt stack 19
  6211                           
  6212                           ;UI.c: 432: cur_state = 12;
  6213                           
  6214                           ;incstack = 0
  6215  00242A  0E00               	movlw	0
  6216  00242C  0100               	movlb	0	; () banked
  6217  00242E  6FE0               	movwf	(_cur_state+1)& (0+255),b
  6218  002430  0E0C               	movlw	12
  6219  002432  6FDF               	movwf	_cur_state& (0+255),b
  6220                           
  6221                           ; BSR set to: 0
  6222                           ;UI.c: 434: lcdInst(0b10000000);;
  6223  002434  0E80               	movlw	128
  6224  002436  EC79  F014         	call	_lcdInst
  6225                           
  6226                           ;UI.c: 435: printf("1. DATE/TIME    ");
  6227  00243A  0E87               	movlw	low STR_18
  6228  00243C  0100               	movlb	0	; () banked
  6229  00243E  6F8E               	movwf	printf@f& (0+255),b
  6230  002440  0EFE               	movlw	high STR_18
  6231  002442  0100               	movlb	0	; () banked
  6232  002444  6F8F               	movwf	(printf@f+1)& (0+255),b
  6233  002446  ECBB  F002         	call	_printf	;wreg free
  6234                           
  6235                           ;UI.c: 436: lcdInst(0b11000000);;
  6236  00244A  0EC0               	movlw	192
  6237  00244C  EC79  F014         	call	_lcdInst
  6238                           
  6239                           ;UI.c: 437: printf("2. SORT        <");
  6240  002450  0E64               	movlw	low STR_19
  6241  002452  0100               	movlb	0	; () banked
  6242  002454  6F8E               	movwf	printf@f& (0+255),b
  6243  002456  0EFF               	movlw	high STR_19
  6244  002458  0100               	movlb	0	; () banked
  6245  00245A  6F8F               	movwf	(printf@f+1)& (0+255),b
  6246  00245C  ECBB  F002         	call	_printf	;wreg free
  6247  002460  0012               	return		;funcret
  6248  002462                     __end_of_change_state_to_menu_12:
  6249                           	opt stack 0
  6250                           tblptru	equ	0xFF8
  6251                           tblptrh	equ	0xFF7
  6252                           tblptrl	equ	0xFF6
  6253                           tablat	equ	0xFF5
  6254                           prodh	equ	0xFF4
  6255                           prodl	equ	0xFF3
  6256                           intcon	equ	0xFF2
  6257                           intcon3	equ	0xFF0
  6258                           postinc0	equ	0xFEE
  6259                           wreg	equ	0xFE8
  6260                           postdec1	equ	0xFE5
  6261                           fsr1l	equ	0xFE1
  6262                           indf2	equ	0xFDF
  6263                           postinc2	equ	0xFDE
  6264                           postdec2	equ	0xFDD
  6265                           fsr2h	equ	0xFDA
  6266                           fsr2l	equ	0xFD9
  6267                           status	equ	0xFD8
  6268                           
  6269 ;; *************** function _printf *****************
  6270 ;; Defined at:
  6271 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  6272 ;; Parameters:    Size  Location     Type
  6273 ;;  f               2   14[BANK0 ] PTR const unsigned char 
  6274 ;;		 -> STR_50(21), STR_49(11), STR_48(24), STR_35(17), 
  6275 ;;		 -> STR_34(17), STR_33(17), STR_32(17), STR_31(17), 
  6276 ;;		 -> STR_30(17), STR_29(17), STR_28(17), STR_27(17), 
  6277 ;;		 -> STR_26(17), STR_25(17), STR_24(17), STR_23(17), 
  6278 ;;		 -> STR_22(17), STR_21(17), STR_20(17), STR_19(17), 
  6279 ;;		 -> STR_18(17), STR_17(17), STR_16(17), STR_15(17), 
  6280 ;;		 -> STR_14(3), STR_13(17), STR_12(17), STR_11(17), 
  6281 ;;		 -> STR_10(17), STR_9(17), STR_8(18), STR_7(10), 
  6282 ;;		 -> STR_6(17), STR_5(7), STR_4(17), STR_3(18), 
  6283 ;;		 -> STR_2(21), STR_1(17), 
  6284 ;; Auto vars:     Size  Location     Type
  6285 ;;  tmpval          4    0        struct .
  6286 ;;  width           2   41[BANK0 ] int 
  6287 ;;  len             2   37[BANK0 ] unsigned int 
  6288 ;;  val             2   35[BANK0 ] unsigned int 
  6289 ;;  cp              2   33[BANK0 ] PTR const unsigned char 
  6290 ;;		 -> STR_51(7), printRTC@month(4), 
  6291 ;;  ap              2   31[BANK0 ] PTR void [1]
  6292 ;;		 -> ?i2_printf(2), ?_printf(2), 
  6293 ;;  c               1   40[BANK0 ] char 
  6294 ;;  flag            1   39[BANK0 ] unsigned char 
  6295 ;;  prec            1   30[BANK0 ] char 
  6296 ;; Return value:  Size  Location     Type
  6297 ;;                  2   14[BANK0 ] int 
  6298 ;; Registers used:
  6299 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6300 ;; Tracked objects:
  6301 ;;		On entry : 0/0
  6302 ;;		On exit  : 0/0
  6303 ;;		Unchanged: 0/0
  6304 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6305 ;;      Params:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6306 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6307 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6308 ;;      Totals:         0      29       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6309 ;;Total ram usage:       29 bytes
  6310 ;; Hardware stack levels used:    1
  6311 ;; Hardware stack levels required when called:    9
  6312 ;; This function calls:
  6313 ;;		___lwdiv
  6314 ;;		___lwmod
  6315 ;;		___wmul
  6316 ;;		_isdigit
  6317 ;;		_putch
  6318 ;; This function is called by:
  6319 ;;		_UI
  6320 ;;		_change_state_to_menu_start
  6321 ;;		_change_state_to_menu_12
  6322 ;;		_change_state_to_menu_22
  6323 ;;		_printRTC
  6324 ;; This function uses a non-reentrant model
  6325 ;;
  6326                           
  6327                           	psect	text29
  6328  000576                     __ptext29:
  6329                           	opt stack 0
  6330  000576                     _printf:
  6331                           	opt stack 19
  6332                           
  6333                           ;doprnt.c: 466: va_list ap;
  6334                           ;doprnt.c: 499: signed char c;
  6335                           ;doprnt.c: 501: int width;
  6336                           ;doprnt.c: 506: signed char prec;
  6337                           ;doprnt.c: 508: unsigned char flag;
  6338                           ;doprnt.c: 523: union {
  6339                           ;doprnt.c: 524: unsigned long vd;
  6340                           ;doprnt.c: 525: double integ;
  6341                           ;doprnt.c: 526: } tmpval;
  6342                           ;doprnt.c: 528: unsigned int val;
  6343                           ;doprnt.c: 529: unsigned len;
  6344                           ;doprnt.c: 530: const char * cp;
  6345                           ;doprnt.c: 533: *ap = __va_start();
  6346                           
  6347                           ;incstack = 0
  6348  000576  0E90               	movlw	low (?_printf+2)
  6349  000578  0100               	movlb	0	; () banked
  6350  00057A  6F9F               	movwf	printf@ap& (0+255),b
  6351  00057C  0E00               	movlw	high (?_printf+2)
  6352  00057E  0100               	movlb	0	; () banked
  6353  000580  6FA0               	movwf	(printf@ap+1)& (0+255),b
  6354                           
  6355                           ;doprnt.c: 536: while(c = *f++) {
  6356  000582  D1EE               	goto	l4165
  6357  000584                     l4041:
  6358                           
  6359                           ; BSR set to: 0
  6360                           ;doprnt.c: 538: if(c != '%')
  6361  000584  0E25               	movlw	37
  6362  000586  0100               	movlb	0	; () banked
  6363  000588  19A8               	xorwf	printf@c& (0+255),w,b
  6364  00058A  B4D8               	btfsc	status,2,c
  6365  00058C  D005               	goto	l4045
  6366                           
  6367                           ; BSR set to: 0
  6368                           ;doprnt.c: 540: {
  6369                           ;doprnt.c: 541: (putch(c) );
  6370  00058E  0100               	movlb	0	; () banked
  6371  000590  51A8               	movf	printf@c& (0+255),w,b
  6372  000592  EC71  F014         	call	_putch
  6373                           
  6374                           ;doprnt.c: 542: continue;
  6375  000596  D1E4               	goto	l4165
  6376  000598                     l4045:
  6377                           
  6378                           ;doprnt.c: 543: }
  6379                           ;doprnt.c: 546: width = 0;
  6380  000598  0E00               	movlw	0
  6381  00059A  0100               	movlb	0	; () banked
  6382  00059C  6FAA               	movwf	(printf@width+1)& (0+255),b
  6383  00059E  0E00               	movlw	0
  6384  0005A0  6FA9               	movwf	printf@width& (0+255),b
  6385                           
  6386                           ;doprnt.c: 548: flag = 0;
  6387  0005A2  0E00               	movlw	0
  6388  0005A4  0100               	movlb	0	; () banked
  6389  0005A6  6FA7               	movwf	printf@flag& (0+255),b
  6390                           
  6391                           ; BSR set to: 0
  6392                           ;doprnt.c: 551: switch(*f) {
  6393                           
  6394                           ;doprnt.c: 550: for(;;) {
  6395  0005A8  D005               	goto	l4051
  6396  0005AA                     l4047:
  6397                           
  6398                           ;doprnt.c: 580: flag |= 0x04;
  6399  0005AA  0100               	movlb	0	; () banked
  6400  0005AC  85A7               	bsf	printf@flag& (0+255),2,b
  6401                           
  6402                           ;doprnt.c: 581: f++;
  6403  0005AE  0100               	movlb	0	; () banked
  6404  0005B0  4B8E               	infsnz	printf@f& (0+255),f,b
  6405  0005B2  2B8F               	incf	(printf@f+1)& (0+255),f,b
  6406  0005B4                     l4051:
  6407  0005B4  C08E  FFF6         	movff	printf@f,tblptrl
  6408  0005B8  C08F  FFF7         	movff	printf@f+1,tblptrh
  6409  0005BC                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  6410  0005BC  6AF8               	clrf	tblptru,c
  6411  0005BE                     	endif
  6412  0005BE                     	if	0	;tblptru may be non-zero
  6413  0005BE                     	endif
  6414  0005BE  0008               	tblrd		*
  6415  0005C0  50F5               	movf	tablat,w,c
  6416                           
  6417                           ; Switch size 1, requested type "space"
  6418                           ; Number of cases is 1, Range of values is 48 to 48
  6419                           ; switch strategies available:
  6420                           ; Name         Instructions Cycles
  6421                           ; simple_byte            4     3 (average)
  6422                           ;	Chosen strategy is simple_byte
  6423  0005C2  0A30               	xorlw	48	; case 48
  6424  0005C4  B4D8               	btfsc	status,2,c
  6425  0005C6  D7F1               	goto	l4047
  6426                           
  6427                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  6428                           
  6429                           ;doprnt.c: 586: }
  6430                           
  6431                           ;doprnt.c: 585: break;
  6432  0005C8  C08E  FFF6         	movff	printf@f,tblptrl
  6433  0005CC  C08F  FFF7         	movff	printf@f+1,tblptrh
  6434  0005D0                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  6435  0005D0  6AF8               	clrf	tblptru,c
  6436  0005D2                     	endif
  6437  0005D2                     	if	0	;tblptru may be non-zero
  6438  0005D2                     	endif
  6439  0005D2  0008               	tblrd		*
  6440  0005D4  50F5               	movf	tablat,w,c
  6441  0005D6  ECB3  F013         	call	_isdigit
  6442  0005DA  A0D8               	btfss	status,0,c
  6443  0005DC  D0CF               	goto	l4097
  6444                           
  6445                           ;doprnt.c: 598: width = 0;
  6446  0005DE  0E00               	movlw	0
  6447  0005E0  0100               	movlb	0	; () banked
  6448  0005E2  6FAA               	movwf	(printf@width+1)& (0+255),b
  6449  0005E4  0E00               	movlw	0
  6450  0005E6  6FA9               	movwf	printf@width& (0+255),b
  6451  0005E8                     l4057:
  6452                           
  6453                           ;doprnt.c: 600: width *= 10;
  6454  0005E8  C0A9  F080         	movff	printf@width,___wmul@multiplier
  6455  0005EC  C0AA  F081         	movff	printf@width+1,___wmul@multiplier+1
  6456  0005F0  0E00               	movlw	0
  6457  0005F2  0100               	movlb	0	; () banked
  6458  0005F4  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  6459  0005F6  0E0A               	movlw	10
  6460  0005F8  6F82               	movwf	___wmul@multiplicand& (0+255),b
  6461  0005FA  EC4C  F012         	call	___wmul	;wreg free
  6462  0005FE  C080  F0A9         	movff	?___wmul,printf@width
  6463  000602  C081  F0AA         	movff	?___wmul+1,printf@width+1
  6464                           
  6465                           ;doprnt.c: 601: width += *f++ - '0';
  6466  000606  0ED0               	movlw	208
  6467  000608  0100               	movlb	0	; () banked
  6468  00060A  6F9A               	movwf	??_printf& (0+255),b
  6469  00060C  0EFF               	movlw	255
  6470  00060E  0100               	movlb	0	; () banked
  6471  000610  6F9B               	movwf	(??_printf+1)& (0+255),b
  6472  000612  C08E  FFF6         	movff	printf@f,tblptrl
  6473  000616  C08F  FFF7         	movff	printf@f+1,tblptrh
  6474  00061A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  6475  00061A  6AF8               	clrf	tblptru,c
  6476  00061C                     	endif
  6477  00061C                     	if	0	;tblptru may be non-zero
  6478  00061C                     	endif
  6479  00061C  0008               	tblrd		*
  6480  00061E  50F5               	movf	tablat,w,c
  6481  000620  0100               	movlb	0	; () banked
  6482  000622  6F9C               	movwf	(??_printf+2)& (0+255),b
  6483  000624  6B9D               	clrf	(??_printf+3)& (0+255),b
  6484  000626  0100               	movlb	0	; () banked
  6485  000628  519A               	movf	??_printf& (0+255),w,b
  6486  00062A  0100               	movlb	0	; () banked
  6487  00062C  279C               	addwf	(??_printf+2)& (0+255),f,b
  6488  00062E  0100               	movlb	0	; () banked
  6489  000630  519B               	movf	(??_printf+1)& (0+255),w,b
  6490  000632  0100               	movlb	0	; () banked
  6491  000634  239D               	addwfc	(??_printf+3)& (0+255),f,b
  6492  000636  0100               	movlb	0	; () banked
  6493  000638  519C               	movf	(??_printf+2)& (0+255),w,b
  6494  00063A  0100               	movlb	0	; () banked
  6495  00063C  27A9               	addwf	printf@width& (0+255),f,b
  6496  00063E  0100               	movlb	0	; () banked
  6497  000640  519D               	movf	(??_printf+3)& (0+255),w,b
  6498  000642  0100               	movlb	0	; () banked
  6499  000644  23AA               	addwfc	(printf@width+1)& (0+255),f,b
  6500                           
  6501                           ; BSR set to: 0
  6502  000646  0100               	movlb	0	; () banked
  6503  000648  4B8E               	infsnz	printf@f& (0+255),f,b
  6504  00064A  2B8F               	incf	(printf@f+1)& (0+255),f,b
  6505                           
  6506                           ; BSR set to: 0
  6507                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  6508  00064C  C08E  FFF6         	movff	printf@f,tblptrl
  6509  000650  C08F  FFF7         	movff	printf@f+1,tblptrh
  6510  000654                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  6511  000654  6AF8               	clrf	tblptru,c
  6512  000656                     	endif
  6513  000656                     	if	0	;tblptru may be non-zero
  6514  000656                     	endif
  6515  000656  0008               	tblrd		*
  6516  000658  50F5               	movf	tablat,w,c
  6517  00065A  ECB3  F013         	call	_isdigit
  6518  00065E  A0D8               	btfss	status,0,c
  6519  000660  D08D               	goto	l4097
  6520  000662  D7C2               	goto	l4057
  6521  000664                     l4065:
  6522                           
  6523                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  6524  000664  C09F  FFD9         	movff	printf@ap,fsr2l
  6525  000668  C0A0  FFDA         	movff	printf@ap+1,fsr2h
  6526  00066C  CFDE F0A1          	movff	postinc2,printf@cp
  6527  000670  CFDD F0A2          	movff	postdec2,printf@cp+1
  6528  000674  0E02               	movlw	2
  6529  000676  0100               	movlb	0	; () banked
  6530  000678  279F               	addwf	printf@ap& (0+255),f,b
  6531  00067A  0E00               	movlw	0
  6532  00067C  23A0               	addwfc	(printf@ap+1)& (0+255),f,b
  6533                           
  6534                           ; BSR set to: 0
  6535                           ;doprnt.c: 740: if(!cp)
  6536  00067E  0100               	movlb	0	; () banked
  6537  000680  51A1               	movf	printf@cp& (0+255),w,b
  6538  000682  0100               	movlb	0	; () banked
  6539  000684  11A2               	iorwf	(printf@cp+1)& (0+255),w,b
  6540  000686  A4D8               	btfss	status,2,c
  6541  000688  D006               	goto	l4073
  6542                           
  6543                           ; BSR set to: 0
  6544                           ;doprnt.c: 741: cp = "(null)";
  6545  00068A  0EBD               	movlw	low STR_51
  6546  00068C  0100               	movlb	0	; () banked
  6547  00068E  6FA1               	movwf	printf@cp& (0+255),b
  6548  000690  0EFF               	movlw	high STR_51
  6549  000692  0100               	movlb	0	; () banked
  6550  000694  6FA2               	movwf	(printf@cp+1)& (0+255),b
  6551  000696                     l4073:
  6552                           
  6553                           ; BSR set to: 0
  6554                           ;doprnt.c: 745: len = 0;
  6555  000696  0E00               	movlw	0
  6556  000698  0100               	movlb	0	; () banked
  6557  00069A  6FA6               	movwf	(printf@len+1)& (0+255),b
  6558  00069C  0E00               	movlw	0
  6559  00069E  6FA5               	movwf	printf@len& (0+255),b
  6560                           
  6561                           ;doprnt.c: 746: while(cp[len])
  6562  0006A0  D003               	goto	l4077
  6563  0006A2                     l4075:
  6564                           
  6565                           ;doprnt.c: 747: len++;
  6566  0006A2  0100               	movlb	0	; () banked
  6567  0006A4  4BA5               	infsnz	printf@len& (0+255),f,b
  6568  0006A6  2BA6               	incf	(printf@len+1)& (0+255),f,b
  6569  0006A8                     l4077:
  6570                           
  6571                           ; BSR set to: 0
  6572  0006A8  0100               	movlb	0	; () banked
  6573  0006AA  51A5               	movf	printf@len& (0+255),w,b
  6574  0006AC  0100               	movlb	0	; () banked
  6575  0006AE  25A1               	addwf	printf@cp& (0+255),w,b
  6576  0006B0  0100               	movlb	0	; () banked
  6577  0006B2  6F9A               	movwf	??_printf& (0+255),b
  6578  0006B4  0100               	movlb	0	; () banked
  6579  0006B6  51A6               	movf	(printf@len+1)& (0+255),w,b
  6580  0006B8  0100               	movlb	0	; () banked
  6581  0006BA  21A2               	addwfc	(printf@cp+1)& (0+255),w,b
  6582  0006BC  0100               	movlb	0	; () banked
  6583  0006BE  6F9B               	movwf	(??_printf+1)& (0+255),b
  6584  0006C0  C09A  FFF6         	movff	??_printf,tblptrl
  6585  0006C4  C09B  FFF7         	movff	??_printf+1,tblptrh
  6586  0006C8  0E00               	movlw	low (__mediumconst shr (0+16))
  6587  0006CA  6EF8               	movwf	tblptru,c
  6588  0006CC  0E0F               	movlw	(high __ramtop+-1)
  6589  0006CE  64F7               	cpfsgt	tblptrh,c
  6590  0006D0  D003               	bra	u2597
  6591  0006D2  0008               	tblrd		*
  6592  0006D4  50F5               	movf	tablat,w,c
  6593  0006D6  D005               	bra	u2590
  6594  0006D8                     u2597:
  6595  0006D8  CFF6 FFE9          	movff	tblptrl,fsr0l
  6596  0006DC  CFF7 FFEA          	movff	tblptrh,fsr0h
  6597  0006E0  50EF               	movf	indf0,w,c
  6598  0006E2                     u2590:
  6599  0006E2  0900               	iorlw	0
  6600  0006E4  A4D8               	btfss	status,2,c
  6601  0006E6  D7DD               	goto	l4075
  6602                           
  6603                           ;doprnt.c: 757: if(width > len)
  6604  0006E8  0100               	movlb	0	; () banked
  6605  0006EA  51A9               	movf	printf@width& (0+255),w,b
  6606  0006EC  0100               	movlb	0	; () banked
  6607  0006EE  5DA5               	subwf	printf@len& (0+255),w,b
  6608  0006F0  0100               	movlb	0	; () banked
  6609  0006F2  51AA               	movf	(printf@width+1)& (0+255),w,b
  6610  0006F4  0100               	movlb	0	; () banked
  6611  0006F6  59A6               	subwfb	(printf@len+1)& (0+255),w,b
  6612  0006F8  B0D8               	btfsc	status,0,c
  6613  0006FA  D009               	goto	l4083
  6614                           
  6615                           ; BSR set to: 0
  6616                           ;doprnt.c: 758: width -= len;
  6617  0006FC  0100               	movlb	0	; () banked
  6618  0006FE  51A5               	movf	printf@len& (0+255),w,b
  6619  000700  0100               	movlb	0	; () banked
  6620  000702  5FA9               	subwf	printf@width& (0+255),f,b
  6621  000704  0100               	movlb	0	; () banked
  6622  000706  51A6               	movf	(printf@len+1)& (0+255),w,b
  6623  000708  0100               	movlb	0	; () banked
  6624  00070A  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
  6625  00070C  D009               	goto	l4087
  6626  00070E                     l4083:
  6627                           
  6628                           ; BSR set to: 0
  6629                           ;doprnt.c: 759: else
  6630                           ;doprnt.c: 760: width = 0;
  6631  00070E  0E00               	movlw	0
  6632  000710  0100               	movlb	0	; () banked
  6633  000712  6FAA               	movwf	(printf@width+1)& (0+255),b
  6634  000714  0E00               	movlw	0
  6635  000716  6FA9               	movwf	printf@width& (0+255),b
  6636                           
  6637                           ; BSR set to: 0
  6638                           ;doprnt.c: 764: while(width--)
  6639  000718  D003               	goto	l4087
  6640  00071A                     l4085:
  6641                           
  6642                           ; BSR set to: 0
  6643                           ;doprnt.c: 765: (putch(' ') );
  6644  00071A  0E20               	movlw	32
  6645  00071C  EC71  F014         	call	_putch
  6646  000720                     l4087:
  6647  000720  0100               	movlb	0	; () banked
  6648  000722  07A9               	decf	printf@width& (0+255),f,b
  6649  000724  A0D8               	btfss	status,0,c
  6650  000726  07AA               	decf	(printf@width+1)& (0+255),f,b
  6651  000728  0100               	movlb	0	; () banked
  6652  00072A  29A9               	incf	printf@width& (0+255),w,b
  6653  00072C  E1F6               	bnz	l4085
  6654  00072E  0100               	movlb	0	; () banked
  6655  000730  29AA               	incf	(printf@width+1)& (0+255),w,b
  6656  000732  B4D8               	btfsc	status,2,c
  6657  000734  D017               	goto	l4093
  6658  000736  D7F1               	goto	l4085
  6659  000738                     l4089:
  6660                           
  6661                           ; BSR set to: 0
  6662                           ;doprnt.c: 768: (putch(*cp++) );
  6663  000738  C0A1  FFF6         	movff	printf@cp,tblptrl
  6664  00073C  C0A2  FFF7         	movff	printf@cp+1,tblptrh
  6665  000740  0E00               	movlw	low (__mediumconst shr (0+16))
  6666  000742  6EF8               	movwf	tblptru,c
  6667  000744  0E0F               	movlw	(high __ramtop+-1)
  6668  000746  64F7               	cpfsgt	tblptrh,c
  6669  000748  D003               	bra	u2637
  6670  00074A  0008               	tblrd		*
  6671  00074C  50F5               	movf	tablat,w,c
  6672  00074E  D005               	bra	u2630
  6673  000750                     u2637:
  6674  000750  CFF6 FFE9          	movff	tblptrl,fsr0l
  6675  000754  CFF7 FFEA          	movff	tblptrh,fsr0h
  6676  000758  50EF               	movf	indf0,w,c
  6677  00075A                     u2630:
  6678  00075A  EC71  F014         	call	_putch
  6679  00075E  0100               	movlb	0	; () banked
  6680  000760  4BA1               	infsnz	printf@cp& (0+255),f,b
  6681  000762  2BA2               	incf	(printf@cp+1)& (0+255),f,b
  6682  000764                     l4093:
  6683                           
  6684                           ; BSR set to: 0
  6685  000764  0100               	movlb	0	; () banked
  6686  000766  07A5               	decf	printf@len& (0+255),f,b
  6687  000768  A0D8               	btfss	status,0,c
  6688  00076A  07A6               	decf	(printf@len+1)& (0+255),f,b
  6689  00076C  0100               	movlb	0	; () banked
  6690  00076E  29A5               	incf	printf@len& (0+255),w,b
  6691  000770  E1E3               	bnz	l4089
  6692  000772  0100               	movlb	0	; () banked
  6693  000774  29A6               	incf	(printf@len+1)& (0+255),w,b
  6694  000776  B4D8               	btfsc	status,2,c
  6695  000778  D0F3               	goto	l4165
  6696  00077A  D7DE               	goto	l4089
  6697  00077C                     l4097:
  6698  00077C  C08E  FFF6         	movff	printf@f,tblptrl
  6699  000780  C08F  FFF7         	movff	printf@f+1,tblptrh
  6700  000784  0100               	movlb	0	; () banked
  6701  000786  4B8E               	infsnz	printf@f& (0+255),f,b
  6702  000788  2B8F               	incf	(printf@f+1)& (0+255),f,b
  6703  00078A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  6704  00078A  6AF8               	clrf	tblptru,c
  6705  00078C                     	endif
  6706  00078C                     	if	0	;tblptru may be non-zero
  6707  00078C                     	endif
  6708  00078C  0008               	tblrd		*
  6709  00078E  CFF5 F0A8          	movff	tablat,printf@c
  6710  000792  0100               	movlb	0	; () banked
  6711  000794  51A8               	movf	printf@c& (0+255),w,b
  6712                           
  6713                           ; Switch size 1, requested type "space"
  6714                           ; Number of cases is 4, Range of values is 0 to 115
  6715                           ; switch strategies available:
  6716                           ; Name         Instructions Cycles
  6717                           ; simple_byte           13     7 (average)
  6718                           ;	Chosen strategy is simple_byte
  6719  000796  0A00               	xorlw	0	; case 0
  6720  000798  B4D8               	btfsc	status,2,c
  6721  00079A  0012               	return	
  6722  00079C  0A64               	xorlw	100	; case 100
  6723  00079E  B4D8               	btfsc	status,2,c
  6724  0007A0  D007               	goto	l4099
  6725  0007A2  0A0D               	xorlw	13	; case 105
  6726  0007A4  B4D8               	btfsc	status,2,c
  6727  0007A6  D004               	goto	l4099
  6728  0007A8  0A1A               	xorlw	26	; case 115
  6729  0007AA  B4D8               	btfsc	status,2,c
  6730  0007AC  D75B               	goto	l4065
  6731  0007AE  D0D8               	goto	l4165
  6732  0007B0                     l4099:
  6733                           
  6734                           ;doprnt.c: 1253: {
  6735                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  6736  0007B0  C09F  FFD9         	movff	printf@ap,fsr2l
  6737  0007B4  C0A0  FFDA         	movff	printf@ap+1,fsr2h
  6738  0007B8  CFDE F0A3          	movff	postinc2,printf@val
  6739  0007BC  CFDD F0A4          	movff	postdec2,printf@val+1
  6740  0007C0  0E02               	movlw	2
  6741  0007C2  0100               	movlb	0	; () banked
  6742  0007C4  279F               	addwf	printf@ap& (0+255),f,b
  6743  0007C6  0E00               	movlw	0
  6744  0007C8  23A0               	addwfc	(printf@ap+1)& (0+255),f,b
  6745                           
  6746                           ; BSR set to: 0
  6747                           ;doprnt.c: 1261: if((int)val < 0) {
  6748  0007CA  0100               	movlb	0	; () banked
  6749  0007CC  AFA4               	btfss	(printf@val+1)& (0+255),7,b
  6750  0007CE  D008               	goto	l4109
  6751                           
  6752                           ; BSR set to: 0
  6753                           ;doprnt.c: 1262: flag |= 0x03;
  6754  0007D0  0E03               	movlw	3
  6755  0007D2  0100               	movlb	0	; () banked
  6756  0007D4  13A7               	iorwf	printf@flag& (0+255),f,b
  6757                           
  6758                           ; BSR set to: 0
  6759                           ;doprnt.c: 1263: val = -val;
  6760  0007D6  0100               	movlb	0	; () banked
  6761  0007D8  6DA3               	negf	printf@val& (0+255),b
  6762  0007DA  1FA4               	comf	(printf@val+1)& (0+255),f,b
  6763  0007DC  B0D8               	btfsc	status,0,c
  6764  0007DE  2BA4               	incf	(printf@val+1)& (0+255),f,b
  6765  0007E0                     l4109:
  6766                           
  6767                           ; BSR set to: 0
  6768                           ;doprnt.c: 1264: }
  6769                           ;doprnt.c: 1266: }
  6770                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  6771  0007E0  0E01               	movlw	1
  6772  0007E2  0100               	movlb	0	; () banked
  6773  0007E4  6FA8               	movwf	printf@c& (0+255),b
  6774  0007E6                     l4111:
  6775                           
  6776                           ; BSR set to: 0
  6777  0007E6  0E05               	movlw	5
  6778  0007E8  0100               	movlb	0	; () banked
  6779  0007EA  19A8               	xorwf	printf@c& (0+255),w,b
  6780  0007EC  B4D8               	btfsc	status,2,c
  6781  0007EE  D019               	goto	l4123
  6782                           
  6783                           ; BSR set to: 0
  6784                           ;doprnt.c: 1306: if(val < dpowers[c])
  6785                           
  6786                           ; BSR set to: 0
  6787                           
  6788                           ; BSR set to: 0
  6789  0007F0  0100               	movlb	0	; () banked
  6790  0007F2  51A8               	movf	printf@c& (0+255),w,b
  6791  0007F4  0D02               	mullw	2
  6792  0007F6  0EC6               	movlw	low _dpowers
  6793  0007F8  24F3               	addwf	prodl,w,c
  6794  0007FA  6EF6               	movwf	tblptrl,c
  6795  0007FC  0EFD               	movlw	high _dpowers
  6796  0007FE  20F4               	addwfc	prodh,w,c
  6797  000800  6EF7               	movwf	tblptrh,c
  6798  000802                     	if	1	;There are 3 active tblptr bytes
  6799  000802  6AF8               	clrf	tblptru,c
  6800  000804  0E00               	movlw	low (__mediumconst shr (0+16))
  6801  000806  22F8               	addwfc	tblptru,f,c
  6802  000808                     	endif
  6803  000808  0009               	tblrd		*+
  6804  00080A  50F5               	movf	tablat,w,c
  6805  00080C  0100               	movlb	0	; () banked
  6806  00080E  5DA3               	subwf	printf@val& (0+255),w,b
  6807  000810  0009               	tblrd		*+
  6808  000812  50F5               	movf	tablat,w,c
  6809  000814  0100               	movlb	0	; () banked
  6810  000816  59A4               	subwfb	(printf@val+1)& (0+255),w,b
  6811  000818  A0D8               	btfss	status,0,c
  6812  00081A  D003               	goto	l4123
  6813                           
  6814                           ; BSR set to: 0
  6815                           
  6816                           ; BSR set to: 0
  6817                           
  6818                           ; BSR set to: 0
  6819                           ;doprnt.c: 1307: break;
  6820  00081C  0100               	movlb	0	; () banked
  6821  00081E  2BA8               	incf	printf@c& (0+255),f,b
  6822  000820  D7E2               	goto	l4111
  6823  000822                     l4123:
  6824                           
  6825                           ; BSR set to: 0
  6826                           ;doprnt.c: 1345: if(width && flag & 0x03)
  6827  000822  0100               	movlb	0	; () banked
  6828  000824  51A9               	movf	printf@width& (0+255),w,b
  6829  000826  0100               	movlb	0	; () banked
  6830  000828  11AA               	iorwf	(printf@width+1)& (0+255),w,b
  6831  00082A  B4D8               	btfsc	status,2,c
  6832  00082C  D00B               	goto	l4129
  6833                           
  6834                           ; BSR set to: 0
  6835  00082E  C0A7  F09A         	movff	printf@flag,??_printf
  6836  000832  0E03               	movlw	3
  6837  000834  0100               	movlb	0	; () banked
  6838  000836  179A               	andwf	??_printf& (0+255),f,b
  6839  000838  B4D8               	btfsc	status,2,c
  6840  00083A  D004               	goto	l4129
  6841                           
  6842                           ; BSR set to: 0
  6843                           ;doprnt.c: 1346: width--;
  6844  00083C  0100               	movlb	0	; () banked
  6845  00083E  07A9               	decf	printf@width& (0+255),f,b
  6846  000840  A0D8               	btfss	status,0,c
  6847  000842  07AA               	decf	(printf@width+1)& (0+255),f,b
  6848  000844                     l4129:
  6849                           
  6850                           ; BSR set to: 0
  6851                           ;doprnt.c: 1381: if(width > c)
  6852  000844  0E80               	movlw	128
  6853  000846  0100               	movlb	0	; () banked
  6854  000848  BFA8               	btfsc	printf@c& (0+255),7,b
  6855  00084A  0E7F               	movlw	127
  6856  00084C  0100               	movlb	0	; () banked
  6857  00084E  6F9A               	movwf	??_printf& (0+255),b
  6858  000850  0100               	movlb	0	; () banked
  6859  000852  51A9               	movf	printf@width& (0+255),w,b
  6860  000854  0100               	movlb	0	; () banked
  6861  000856  5DA8               	subwf	printf@c& (0+255),w,b
  6862  000858  0100               	movlb	0	; () banked
  6863  00085A  51AA               	movf	(printf@width+1)& (0+255),w,b
  6864  00085C  0A80               	xorlw	128
  6865  00085E  0100               	movlb	0	; () banked
  6866  000860  599A               	subwfb	??_printf& (0+255),w,b
  6867  000862  B0D8               	btfsc	status,0,c
  6868  000864  D00B               	goto	l4133
  6869                           
  6870                           ; BSR set to: 0
  6871                           ;doprnt.c: 1382: width -= c;
  6872  000866  0100               	movlb	0	; () banked
  6873  000868  51A8               	movf	printf@c& (0+255),w,b
  6874  00086A  0100               	movlb	0	; () banked
  6875  00086C  5FA9               	subwf	printf@width& (0+255),f,b
  6876  00086E  0E00               	movlw	0
  6877  000870  0100               	movlb	0	; () banked
  6878  000872  BFA8               	btfsc	printf@c& (0+255),7,b
  6879  000874  0EFF               	movlw	255
  6880  000876  0100               	movlb	0	; () banked
  6881  000878  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
  6882  00087A  D005               	goto	l4135
  6883  00087C                     l4133:
  6884                           
  6885                           ; BSR set to: 0
  6886                           ;doprnt.c: 1383: else
  6887                           ;doprnt.c: 1384: width = 0;
  6888  00087C  0E00               	movlw	0
  6889  00087E  0100               	movlb	0	; () banked
  6890  000880  6FAA               	movwf	(printf@width+1)& (0+255),b
  6891  000882  0E00               	movlw	0
  6892  000884  6FA9               	movwf	printf@width& (0+255),b
  6893  000886                     l4135:
  6894                           
  6895                           ; BSR set to: 0
  6896                           ;doprnt.c: 1387: if(flag & 0x04) {
  6897  000886  0100               	movlb	0	; () banked
  6898  000888  A5A7               	btfss	printf@flag& (0+255),2,b
  6899  00088A  D018               	goto	l4147
  6900                           
  6901                           ; BSR set to: 0
  6902                           ;doprnt.c: 1392: if(flag & 0x03)
  6903  00088C  C0A7  F09A         	movff	printf@flag,??_printf
  6904  000890  0E03               	movlw	3
  6905  000892  0100               	movlb	0	; () banked
  6906  000894  179A               	andwf	??_printf& (0+255),f,b
  6907  000896  B4D8               	btfsc	status,2,c
  6908  000898  D003               	goto	l4141
  6909                           
  6910                           ; BSR set to: 0
  6911                           ;doprnt.c: 1393: (putch('-') );
  6912  00089A  0E2D               	movlw	45
  6913  00089C  EC71  F014         	call	_putch
  6914  0008A0                     l4141:
  6915                           
  6916                           ;doprnt.c: 1415: if(width)
  6917  0008A0  0100               	movlb	0	; () banked
  6918  0008A2  51A9               	movf	printf@width& (0+255),w,b
  6919  0008A4  0100               	movlb	0	; () banked
  6920  0008A6  11AA               	iorwf	(printf@width+1)& (0+255),w,b
  6921  0008A8  B4D8               	btfsc	status,2,c
  6922  0008AA  D025               	goto	l4157
  6923                           
  6924                           ; BSR set to: 0
  6925                           ;doprnt.c: 1417: (putch('0') );
  6926                           
  6927                           ; BSR set to: 0
  6928                           
  6929                           ;doprnt.c: 1416: do
  6930  0008AC  0E30               	movlw	48
  6931  0008AE  EC71  F014         	call	_putch
  6932                           
  6933                           ;doprnt.c: 1418: while(--width);
  6934  0008B2  0100               	movlb	0	; () banked
  6935  0008B4  07A9               	decf	printf@width& (0+255),f,b
  6936  0008B6  A0D8               	btfss	status,0,c
  6937  0008B8  07AA               	decf	(printf@width+1)& (0+255),f,b
  6938  0008BA  D7F2               	goto	l4141
  6939  0008BC                     l4147:
  6940                           
  6941                           ; BSR set to: 0
  6942                           ;doprnt.c: 1422: {
  6943                           ;doprnt.c: 1424: if(width
  6944                           ;doprnt.c: 1428: )
  6945  0008BC  0100               	movlb	0	; () banked
  6946  0008BE  51A9               	movf	printf@width& (0+255),w,b
  6947  0008C0  0100               	movlb	0	; () banked
  6948  0008C2  11AA               	iorwf	(printf@width+1)& (0+255),w,b
  6949  0008C4  B4D8               	btfsc	status,2,c
  6950  0008C6  D00D               	goto	l4153
  6951  0008C8                     l4149:
  6952                           
  6953                           ; BSR set to: 0
  6954                           ;doprnt.c: 1430: (putch(' ') );
  6955  0008C8  0E20               	movlw	32
  6956  0008CA  EC71  F014         	call	_putch
  6957                           
  6958                           ;doprnt.c: 1431: while(--width);
  6959  0008CE  0100               	movlb	0	; () banked
  6960  0008D0  07A9               	decf	printf@width& (0+255),f,b
  6961  0008D2  A0D8               	btfss	status,0,c
  6962  0008D4  07AA               	decf	(printf@width+1)& (0+255),f,b
  6963  0008D6  0100               	movlb	0	; () banked
  6964  0008D8  51A9               	movf	printf@width& (0+255),w,b
  6965  0008DA  0100               	movlb	0	; () banked
  6966  0008DC  11AA               	iorwf	(printf@width+1)& (0+255),w,b
  6967  0008DE  A4D8               	btfss	status,2,c
  6968  0008E0  D7F3               	goto	l4149
  6969  0008E2                     l4153:
  6970                           
  6971                           ; BSR set to: 0
  6972                           ;doprnt.c: 1438: if(flag & 0x03)
  6973  0008E2  C0A7  F09A         	movff	printf@flag,??_printf
  6974  0008E6  0E03               	movlw	3
  6975  0008E8  0100               	movlb	0	; () banked
  6976  0008EA  179A               	andwf	??_printf& (0+255),f,b
  6977  0008EC  B4D8               	btfsc	status,2,c
  6978  0008EE  D003               	goto	l4157
  6979                           
  6980                           ; BSR set to: 0
  6981                           ;doprnt.c: 1439: (putch('-') );
  6982  0008F0  0E2D               	movlw	45
  6983  0008F2  EC71  F014         	call	_putch
  6984  0008F6                     l4157:
  6985                           
  6986                           ;doprnt.c: 1469: }
  6987                           ;doprnt.c: 1472: prec = c;
  6988  0008F6  C0A8  F09E         	movff	printf@c,printf@prec
  6989                           
  6990                           ;doprnt.c: 1474: while(prec--) {
  6991  0008FA  D02C               	goto	l4163
  6992  0008FC                     l4159:
  6993                           
  6994                           ;doprnt.c: 1478: {
  6995                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  6996  0008FC  0100               	movlb	0	; () banked
  6997  0008FE  519E               	movf	printf@prec& (0+255),w,b
  6998  000900  0D02               	mullw	2
  6999  000902  0EC6               	movlw	low _dpowers
  7000  000904  24F3               	addwf	prodl,w,c
  7001  000906  6EF6               	movwf	tblptrl,c
  7002  000908  0EFD               	movlw	high _dpowers
  7003  00090A  20F4               	addwfc	prodh,w,c
  7004  00090C  6EF7               	movwf	tblptrh,c
  7005  00090E                     	if	1	;There are 3 active tblptr bytes
  7006  00090E  6AF8               	clrf	tblptru,c
  7007  000910  0E00               	movlw	low (__mediumconst shr (0+16))
  7008  000912  22F8               	addwfc	tblptru,f,c
  7009  000914                     	endif
  7010  000914  0009               	tblrd		*+
  7011  000916  CFF5 F082          	movff	tablat,___lwdiv@divisor
  7012  00091A  000A               	tblrd		*-
  7013  00091C  CFF5 F083          	movff	tablat,___lwdiv@divisor+1
  7014  000920  C0A3  F080         	movff	printf@val,___lwdiv@dividend
  7015  000924  C0A4  F081         	movff	printf@val+1,___lwdiv@dividend+1
  7016  000928  ECD1  F00F         	call	___lwdiv	;wreg free
  7017  00092C  C080  F087         	movff	?___lwdiv,___lwmod@dividend
  7018  000930  C081  F088         	movff	?___lwdiv+1,___lwmod@dividend+1
  7019  000934  0E00               	movlw	0
  7020  000936  0100               	movlb	0	; () banked
  7021  000938  6F8A               	movwf	(___lwmod@divisor+1)& (0+255),b
  7022  00093A  0E0A               	movlw	10
  7023  00093C  6F89               	movwf	___lwmod@divisor& (0+255),b
  7024  00093E  ECB1  F010         	call	___lwmod	;wreg free
  7025  000942  0100               	movlb	0	; () banked
  7026  000944  5187               	movf	?___lwmod& (0+255),w,b
  7027  000946  0F30               	addlw	48
  7028  000948  0100               	movlb	0	; () banked
  7029  00094A  6FA8               	movwf	printf@c& (0+255),b
  7030                           
  7031                           ; BSR set to: 0
  7032                           ;doprnt.c: 1523: }
  7033                           ;doprnt.c: 1524: (putch(c) );
  7034  00094C  0100               	movlb	0	; () banked
  7035  00094E  51A8               	movf	printf@c& (0+255),w,b
  7036  000950  EC71  F014         	call	_putch
  7037  000954                     l4163:
  7038  000954  0100               	movlb	0	; () banked
  7039  000956  079E               	decf	printf@prec& (0+255),f,b
  7040  000958  0100               	movlb	0	; () banked
  7041  00095A  299E               	incf	printf@prec& (0+255),w,b
  7042  00095C  A4D8               	btfss	status,2,c
  7043  00095E  D7CE               	goto	l4159
  7044  000960                     l4165:
  7045  000960  C08E  FFF6         	movff	printf@f,tblptrl
  7046  000964  C08F  FFF7         	movff	printf@f+1,tblptrh
  7047  000968  0100               	movlb	0	; () banked
  7048  00096A  4B8E               	infsnz	printf@f& (0+255),f,b
  7049  00096C  2B8F               	incf	(printf@f+1)& (0+255),f,b
  7050  00096E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  7051  00096E  6AF8               	clrf	tblptru,c
  7052  000970                     	endif
  7053  000970                     	if	0	;tblptru may be non-zero
  7054  000970                     	endif
  7055  000970  0008               	tblrd		*
  7056  000972  CFF5 F0A8          	movff	tablat,printf@c
  7057  000976  0100               	movlb	0	; () banked
  7058  000978  51A8               	movf	printf@c& (0+255),w,b
  7059  00097A  B4D8               	btfsc	status,2,c
  7060  00097C  0012               	return	
  7061  00097E  D602               	goto	l4041
  7062  000980                     __end_of_printf:
  7063                           	opt stack 0
  7064                           tblptru	equ	0xFF8
  7065                           tblptrh	equ	0xFF7
  7066                           tblptrl	equ	0xFF6
  7067                           tablat	equ	0xFF5
  7068                           prodh	equ	0xFF4
  7069                           prodl	equ	0xFF3
  7070                           intcon	equ	0xFF2
  7071                           intcon3	equ	0xFF0
  7072                           indf0	equ	0xFEF
  7073                           postinc0	equ	0xFEE
  7074                           fsr0h	equ	0xFEA
  7075                           fsr0l	equ	0xFE9
  7076                           wreg	equ	0xFE8
  7077                           postdec1	equ	0xFE5
  7078                           fsr1l	equ	0xFE1
  7079                           indf2	equ	0xFDF
  7080                           postinc2	equ	0xFDE
  7081                           postdec2	equ	0xFDD
  7082                           fsr2h	equ	0xFDA
  7083                           fsr2l	equ	0xFD9
  7084                           status	equ	0xFD8
  7085                           
  7086 ;; *************** function _putch *****************
  7087 ;; Defined at:
  7088 ;;		line 18 in file "lcd.c"
  7089 ;; Parameters:    Size  Location     Type
  7090 ;;  data            1    wreg     unsigned char 
  7091 ;; Auto vars:     Size  Location     Type
  7092 ;;  data            1    2[BANK0 ] unsigned char 
  7093 ;; Return value:  Size  Location     Type
  7094 ;;                  1    wreg      void 
  7095 ;; Registers used:
  7096 ;;		wreg, status,2, status,0, cstack
  7097 ;; Tracked objects:
  7098 ;;		On entry : 0/0
  7099 ;;		On exit  : 0/0
  7100 ;;		Unchanged: 0/0
  7101 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7102 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7103 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7104 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7105 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7106 ;;Total ram usage:        1 bytes
  7107 ;; Hardware stack levels used:    1
  7108 ;; Hardware stack levels required when called:    8
  7109 ;; This function calls:
  7110 ;;		_lcdNibble
  7111 ;; This function is called by:
  7112 ;;		_printf
  7113 ;; This function uses a non-reentrant model
  7114 ;;
  7115                           
  7116                           	psect	text30
  7117  0028E2                     __ptext30:
  7118                           	opt stack 0
  7119  0028E2                     _putch:
  7120                           	opt stack 19
  7121                           
  7122                           ;incstack = 0
  7123                           ;putch@data stored from wreg
  7124  0028E2  0100               	movlb	0	; () banked
  7125  0028E4  6F82               	movwf	putch@data& (0+255),b
  7126                           
  7127                           ;lcd.c: 19: LATDbits.LATD2 = 1;
  7128  0028E6  848C               	bsf	3980,2,c	;volatile
  7129                           
  7130                           ;lcd.c: 20: lcdNibble(data);
  7131  0028E8  0100               	movlb	0	; () banked
  7132  0028EA  5182               	movf	putch@data& (0+255),w,b
  7133  0028EC  EC7D  F010         	call	_lcdNibble
  7134  0028F0  0012               	return		;funcret
  7135  0028F2                     __end_of_putch:
  7136                           	opt stack 0
  7137                           tblptru	equ	0xFF8
  7138                           tblptrh	equ	0xFF7
  7139                           tblptrl	equ	0xFF6
  7140                           tablat	equ	0xFF5
  7141                           prodh	equ	0xFF4
  7142                           prodl	equ	0xFF3
  7143                           intcon	equ	0xFF2
  7144                           intcon3	equ	0xFF0
  7145                           indf0	equ	0xFEF
  7146                           postinc0	equ	0xFEE
  7147                           fsr0h	equ	0xFEA
  7148                           fsr0l	equ	0xFE9
  7149                           wreg	equ	0xFE8
  7150                           postdec1	equ	0xFE5
  7151                           fsr1l	equ	0xFE1
  7152                           indf2	equ	0xFDF
  7153                           postinc2	equ	0xFDE
  7154                           postdec2	equ	0xFDD
  7155                           fsr2h	equ	0xFDA
  7156                           fsr2l	equ	0xFD9
  7157                           status	equ	0xFD8
  7158                           
  7159 ;; *************** function _isdigit *****************
  7160 ;; Defined at:
  7161 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
  7162 ;; Parameters:    Size  Location     Type
  7163 ;;  c               1    wreg     unsigned char 
  7164 ;; Auto vars:     Size  Location     Type
  7165 ;;  c               1    2[BANK0 ] unsigned char 
  7166 ;; Return value:  Size  Location     Type
  7167 ;;		None               void
  7168 ;; Registers used:
  7169 ;;		wreg, status,2, status,0
  7170 ;; Tracked objects:
  7171 ;;		On entry : 0/0
  7172 ;;		On exit  : 0/0
  7173 ;;		Unchanged: 0/0
  7174 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7175 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7176 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7177 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7178 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7179 ;;Total ram usage:        3 bytes
  7180 ;; Hardware stack levels used:    1
  7181 ;; Hardware stack levels required when called:    7
  7182 ;; This function calls:
  7183 ;;		Nothing
  7184 ;; This function is called by:
  7185 ;;		_printf
  7186 ;; This function uses a non-reentrant model
  7187 ;;
  7188                           
  7189                           	psect	text31
  7190  002766                     __ptext31:
  7191                           	opt stack 0
  7192  002766                     _isdigit:
  7193                           	opt stack 20
  7194                           
  7195                           ;incstack = 0
  7196                           ;isdigit@c stored from wreg
  7197  002766  0100               	movlb	0	; () banked
  7198  002768  6F82               	movwf	isdigit@c& (0+255),b
  7199  00276A  0E00               	movlw	0
  7200  00276C  0100               	movlb	0	; () banked
  7201  00276E  6F81               	movwf	_isdigit$1698& (0+255),b
  7202                           
  7203                           ; BSR set to: 0
  7204  002770  0E3A               	movlw	58
  7205  002772  0100               	movlb	0	; () banked
  7206  002774  6182               	cpfslt	isdigit@c& (0+255),b
  7207  002776  D007               	goto	l3901
  7208                           
  7209                           ; BSR set to: 0
  7210  002778  0E2F               	movlw	47
  7211  00277A  0100               	movlb	0	; () banked
  7212  00277C  6582               	cpfsgt	isdigit@c& (0+255),b
  7213  00277E  D003               	goto	l3901
  7214                           
  7215                           ; BSR set to: 0
  7216  002780  0E01               	movlw	1
  7217  002782  0100               	movlb	0	; () banked
  7218  002784  6F81               	movwf	_isdigit$1698& (0+255),b
  7219  002786                     l3901:
  7220                           
  7221                           ; BSR set to: 0
  7222  002786  C081  F080         	movff	_isdigit$1698,??_isdigit
  7223  00278A  0100               	movlb	0	; () banked
  7224  00278C  3180               	rrcf	??_isdigit& (0+255),w,b
  7225  00278E  0012               	return	
  7226  002790                     __end_of_isdigit:
  7227                           	opt stack 0
  7228                           tblptru	equ	0xFF8
  7229                           tblptrh	equ	0xFF7
  7230                           tblptrl	equ	0xFF6
  7231                           tablat	equ	0xFF5
  7232                           prodh	equ	0xFF4
  7233                           prodl	equ	0xFF3
  7234                           intcon	equ	0xFF2
  7235                           intcon3	equ	0xFF0
  7236                           indf0	equ	0xFEF
  7237                           postinc0	equ	0xFEE
  7238                           fsr0h	equ	0xFEA
  7239                           fsr0l	equ	0xFE9
  7240                           wreg	equ	0xFE8
  7241                           postdec1	equ	0xFE5
  7242                           fsr1l	equ	0xFE1
  7243                           indf2	equ	0xFDF
  7244                           postinc2	equ	0xFDE
  7245                           postdec2	equ	0xFDD
  7246                           fsr2h	equ	0xFDA
  7247                           fsr2l	equ	0xFD9
  7248                           status	equ	0xFD8
  7249                           
  7250 ;; *************** function ___wmul *****************
  7251 ;; Defined at:
  7252 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
  7253 ;; Parameters:    Size  Location     Type
  7254 ;;  multiplier      2    0[BANK0 ] unsigned int 
  7255 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  7256 ;; Auto vars:     Size  Location     Type
  7257 ;;  product         2    4[BANK0 ] unsigned int 
  7258 ;; Return value:  Size  Location     Type
  7259 ;;                  2    0[BANK0 ] unsigned int 
  7260 ;; Registers used:
  7261 ;;		wreg, status,2, status,0, prodl, prodh
  7262 ;; Tracked objects:
  7263 ;;		On entry : 0/0
  7264 ;;		On exit  : 0/0
  7265 ;;		Unchanged: 0/0
  7266 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7267 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7268 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7269 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7270 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7271 ;;Total ram usage:        6 bytes
  7272 ;; Hardware stack levels used:    1
  7273 ;; Hardware stack levels required when called:    7
  7274 ;; This function calls:
  7275 ;;		Nothing
  7276 ;; This function is called by:
  7277 ;;		_printf
  7278 ;; This function uses a non-reentrant model
  7279 ;;
  7280                           
  7281                           	psect	text32
  7282  002498                     __ptext32:
  7283                           	opt stack 0
  7284  002498                     ___wmul:
  7285                           	opt stack 20
  7286                           
  7287                           ; BSR set to: 0
  7288                           ;incstack = 0
  7289  002498  0100               	movlb	0	; () banked
  7290  00249A  5180               	movf	___wmul@multiplier& (0+255),w,b
  7291  00249C  0100               	movlb	0	; () banked
  7292  00249E  0382               	mulwf	___wmul@multiplicand& (0+255),b
  7293  0024A0  CFF3 F084          	movff	prodl,___wmul@product
  7294  0024A4  CFF4 F085          	movff	prodh,___wmul@product+1
  7295  0024A8  0100               	movlb	0	; () banked
  7296  0024AA  5180               	movf	___wmul@multiplier& (0+255),w,b
  7297  0024AC  0100               	movlb	0	; () banked
  7298  0024AE  0383               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  7299  0024B0  50F3               	movf	prodl,w,c
  7300  0024B2  0100               	movlb	0	; () banked
  7301  0024B4  2785               	addwf	(___wmul@product+1)& (0+255),f,b
  7302  0024B6  0100               	movlb	0	; () banked
  7303  0024B8  5181               	movf	(___wmul@multiplier+1)& (0+255),w,b
  7304  0024BA  0100               	movlb	0	; () banked
  7305  0024BC  0382               	mulwf	___wmul@multiplicand& (0+255),b
  7306  0024BE  50F3               	movf	prodl,w,c
  7307  0024C0  0100               	movlb	0	; () banked
  7308  0024C2  2785               	addwf	(___wmul@product+1)& (0+255),f,b
  7309                           
  7310                           ; BSR set to: 0
  7311  0024C4  C084  F080         	movff	___wmul@product,?___wmul
  7312  0024C8  C085  F081         	movff	___wmul@product+1,?___wmul+1
  7313  0024CC  0012               	return	
  7314  0024CE                     __end_of___wmul:
  7315                           	opt stack 0
  7316                           tblptru	equ	0xFF8
  7317                           tblptrh	equ	0xFF7
  7318                           tblptrl	equ	0xFF6
  7319                           tablat	equ	0xFF5
  7320                           prodh	equ	0xFF4
  7321                           prodl	equ	0xFF3
  7322                           intcon	equ	0xFF2
  7323                           intcon3	equ	0xFF0
  7324                           indf0	equ	0xFEF
  7325                           postinc0	equ	0xFEE
  7326                           fsr0h	equ	0xFEA
  7327                           fsr0l	equ	0xFE9
  7328                           wreg	equ	0xFE8
  7329                           postdec1	equ	0xFE5
  7330                           fsr1l	equ	0xFE1
  7331                           indf2	equ	0xFDF
  7332                           postinc2	equ	0xFDE
  7333                           postdec2	equ	0xFDD
  7334                           fsr2h	equ	0xFDA
  7335                           fsr2l	equ	0xFD9
  7336                           status	equ	0xFD8
  7337                           
  7338 ;; *************** function ___lwmod *****************
  7339 ;; Defined at:
  7340 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
  7341 ;; Parameters:    Size  Location     Type
  7342 ;;  dividend        2    7[BANK0 ] unsigned int 
  7343 ;;  divisor         2    9[BANK0 ] unsigned int 
  7344 ;; Auto vars:     Size  Location     Type
  7345 ;;  counter         1   11[BANK0 ] unsigned char 
  7346 ;; Return value:  Size  Location     Type
  7347 ;;                  2    7[BANK0 ] unsigned int 
  7348 ;; Registers used:
  7349 ;;		wreg, status,2, status,0
  7350 ;; Tracked objects:
  7351 ;;		On entry : 0/0
  7352 ;;		On exit  : 0/0
  7353 ;;		Unchanged: 0/0
  7354 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7355 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7356 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7357 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7358 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7359 ;;Total ram usage:        5 bytes
  7360 ;; Hardware stack levels used:    1
  7361 ;; Hardware stack levels required when called:    7
  7362 ;; This function calls:
  7363 ;;		Nothing
  7364 ;; This function is called by:
  7365 ;;		_printf
  7366 ;; This function uses a non-reentrant model
  7367 ;;
  7368                           
  7369                           	psect	text33
  7370  002162                     __ptext33:
  7371                           	opt stack 0
  7372  002162                     ___lwmod:
  7373                           	opt stack 20
  7374                           
  7375                           ; BSR set to: 0
  7376                           ;incstack = 0
  7377  002162  0100               	movlb	0	; () banked
  7378  002164  5189               	movf	___lwmod@divisor& (0+255),w,b
  7379  002166  0100               	movlb	0	; () banked
  7380  002168  118A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
  7381  00216A  B4D8               	btfsc	status,2,c
  7382  00216C  D026               	goto	l1640
  7383                           
  7384                           ; BSR set to: 0
  7385  00216E  0E01               	movlw	1
  7386  002170  0100               	movlb	0	; () banked
  7387  002172  6F8B               	movwf	___lwmod@counter& (0+255),b
  7388  002174  D006               	goto	l3939
  7389  002176                     l3937:
  7390                           
  7391                           ; BSR set to: 0
  7392  002176  0100               	movlb	0	; () banked
  7393  002178  90D8               	bcf	status,0,c
  7394  00217A  3789               	rlcf	___lwmod@divisor& (0+255),f,b
  7395  00217C  378A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  7396  00217E  0100               	movlb	0	; () banked
  7397  002180  2B8B               	incf	___lwmod@counter& (0+255),f,b
  7398  002182                     l3939:
  7399                           
  7400                           ; BSR set to: 0
  7401  002182  0100               	movlb	0	; () banked
  7402  002184  AF8A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
  7403  002186  D7F7               	goto	l3937
  7404  002188                     l3941:
  7405                           
  7406                           ; BSR set to: 0
  7407  002188  0100               	movlb	0	; () banked
  7408  00218A  5189               	movf	___lwmod@divisor& (0+255),w,b
  7409  00218C  0100               	movlb	0	; () banked
  7410  00218E  5D87               	subwf	___lwmod@dividend& (0+255),w,b
  7411  002190  0100               	movlb	0	; () banked
  7412  002192  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
  7413  002194  0100               	movlb	0	; () banked
  7414  002196  5988               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  7415  002198  A0D8               	btfss	status,0,c
  7416  00219A  D008               	goto	l3945
  7417                           
  7418                           ; BSR set to: 0
  7419  00219C  0100               	movlb	0	; () banked
  7420  00219E  5189               	movf	___lwmod@divisor& (0+255),w,b
  7421  0021A0  0100               	movlb	0	; () banked
  7422  0021A2  5F87               	subwf	___lwmod@dividend& (0+255),f,b
  7423  0021A4  0100               	movlb	0	; () banked
  7424  0021A6  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
  7425  0021A8  0100               	movlb	0	; () banked
  7426  0021AA  5B88               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  7427  0021AC                     l3945:
  7428                           
  7429                           ; BSR set to: 0
  7430  0021AC  0100               	movlb	0	; () banked
  7431  0021AE  90D8               	bcf	status,0,c
  7432  0021B0  338A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  7433  0021B2  3389               	rrcf	___lwmod@divisor& (0+255),f,b
  7434                           
  7435                           ; BSR set to: 0
  7436  0021B4  0100               	movlb	0	; () banked
  7437  0021B6  2F8B               	decfsz	___lwmod@counter& (0+255),f,b
  7438  0021B8  D7E7               	goto	l3941
  7439  0021BA                     l1640:
  7440                           
  7441                           ; BSR set to: 0
  7442  0021BA  C087  F087         	movff	___lwmod@dividend,?___lwmod
  7443  0021BE  C088  F088         	movff	___lwmod@dividend+1,?___lwmod+1
  7444                           
  7445                           ; BSR set to: 0
  7446  0021C2  0012               	return		;funcret
  7447  0021C4                     __end_of___lwmod:
  7448                           	opt stack 0
  7449                           tblptru	equ	0xFF8
  7450                           tblptrh	equ	0xFF7
  7451                           tblptrl	equ	0xFF6
  7452                           tablat	equ	0xFF5
  7453                           prodh	equ	0xFF4
  7454                           prodl	equ	0xFF3
  7455                           intcon	equ	0xFF2
  7456                           intcon3	equ	0xFF0
  7457                           indf0	equ	0xFEF
  7458                           postinc0	equ	0xFEE
  7459                           fsr0h	equ	0xFEA
  7460                           fsr0l	equ	0xFE9
  7461                           wreg	equ	0xFE8
  7462                           postdec1	equ	0xFE5
  7463                           fsr1l	equ	0xFE1
  7464                           indf2	equ	0xFDF
  7465                           postinc2	equ	0xFDE
  7466                           postdec2	equ	0xFDD
  7467                           fsr2h	equ	0xFDA
  7468                           fsr2l	equ	0xFD9
  7469                           status	equ	0xFD8
  7470                           
  7471 ;; *************** function ___lwdiv *****************
  7472 ;; Defined at:
  7473 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
  7474 ;; Parameters:    Size  Location     Type
  7475 ;;  dividend        2    0[BANK0 ] unsigned int 
  7476 ;;  divisor         2    2[BANK0 ] unsigned int 
  7477 ;; Auto vars:     Size  Location     Type
  7478 ;;  quotient        2    4[BANK0 ] unsigned int 
  7479 ;;  counter         1    6[BANK0 ] unsigned char 
  7480 ;; Return value:  Size  Location     Type
  7481 ;;                  2    0[BANK0 ] unsigned int 
  7482 ;; Registers used:
  7483 ;;		wreg, status,2, status,0
  7484 ;; Tracked objects:
  7485 ;;		On entry : 0/0
  7486 ;;		On exit  : 0/0
  7487 ;;		Unchanged: 0/0
  7488 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7489 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7490 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7491 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7492 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7493 ;;Total ram usage:        7 bytes
  7494 ;; Hardware stack levels used:    1
  7495 ;; Hardware stack levels required when called:    7
  7496 ;; This function calls:
  7497 ;;		Nothing
  7498 ;; This function is called by:
  7499 ;;		_printf
  7500 ;; This function uses a non-reentrant model
  7501 ;;
  7502                           
  7503                           	psect	text34
  7504  001FA2                     __ptext34:
  7505                           	opt stack 0
  7506  001FA2                     ___lwdiv:
  7507                           	opt stack 20
  7508                           
  7509                           ; BSR set to: 0
  7510                           ;incstack = 0
  7511  001FA2  0E00               	movlw	0
  7512  001FA4  0100               	movlb	0	; () banked
  7513  001FA6  6F85               	movwf	(___lwdiv@quotient+1)& (0+255),b
  7514  001FA8  0E00               	movlw	0
  7515  001FAA  6F84               	movwf	___lwdiv@quotient& (0+255),b
  7516                           
  7517                           ; BSR set to: 0
  7518  001FAC  0100               	movlb	0	; () banked
  7519  001FAE  5182               	movf	___lwdiv@divisor& (0+255),w,b
  7520  001FB0  0100               	movlb	0	; () banked
  7521  001FB2  1183               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  7522  001FB4  B4D8               	btfsc	status,2,c
  7523  001FB6  D02C               	goto	l1630
  7524                           
  7525                           ; BSR set to: 0
  7526  001FB8  0E01               	movlw	1
  7527  001FBA  0100               	movlb	0	; () banked
  7528  001FBC  6F86               	movwf	___lwdiv@counter& (0+255),b
  7529  001FBE  D006               	goto	l3919
  7530  001FC0                     l3917:
  7531                           
  7532                           ; BSR set to: 0
  7533  001FC0  0100               	movlb	0	; () banked
  7534  001FC2  90D8               	bcf	status,0,c
  7535  001FC4  3782               	rlcf	___lwdiv@divisor& (0+255),f,b
  7536  001FC6  3783               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  7537  001FC8  0100               	movlb	0	; () banked
  7538  001FCA  2B86               	incf	___lwdiv@counter& (0+255),f,b
  7539  001FCC                     l3919:
  7540                           
  7541                           ; BSR set to: 0
  7542  001FCC  0100               	movlb	0	; () banked
  7543  001FCE  AF83               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  7544  001FD0  D7F7               	goto	l3917
  7545  001FD2                     l3921:
  7546                           
  7547                           ; BSR set to: 0
  7548  001FD2  0100               	movlb	0	; () banked
  7549  001FD4  90D8               	bcf	status,0,c
  7550  001FD6  3784               	rlcf	___lwdiv@quotient& (0+255),f,b
  7551  001FD8  3785               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  7552                           
  7553                           ; BSR set to: 0
  7554  001FDA  0100               	movlb	0	; () banked
  7555  001FDC  5182               	movf	___lwdiv@divisor& (0+255),w,b
  7556  001FDE  0100               	movlb	0	; () banked
  7557  001FE0  5D80               	subwf	___lwdiv@dividend& (0+255),w,b
  7558  001FE2  0100               	movlb	0	; () banked
  7559  001FE4  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  7560  001FE6  0100               	movlb	0	; () banked
  7561  001FE8  5981               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  7562  001FEA  A0D8               	btfss	status,0,c
  7563  001FEC  D00A               	goto	l3929
  7564                           
  7565                           ; BSR set to: 0
  7566  001FEE  0100               	movlb	0	; () banked
  7567  001FF0  5182               	movf	___lwdiv@divisor& (0+255),w,b
  7568  001FF2  0100               	movlb	0	; () banked
  7569  001FF4  5F80               	subwf	___lwdiv@dividend& (0+255),f,b
  7570  001FF6  0100               	movlb	0	; () banked
  7571  001FF8  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  7572  001FFA  0100               	movlb	0	; () banked
  7573  001FFC  5B81               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  7574                           
  7575                           ; BSR set to: 0
  7576  001FFE  0100               	movlb	0	; () banked
  7577  002000  8184               	bsf	___lwdiv@quotient& (0+255),0,b
  7578  002002                     l3929:
  7579                           
  7580                           ; BSR set to: 0
  7581  002002  0100               	movlb	0	; () banked
  7582  002004  90D8               	bcf	status,0,c
  7583  002006  3383               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  7584  002008  3382               	rrcf	___lwdiv@divisor& (0+255),f,b
  7585                           
  7586                           ; BSR set to: 0
  7587  00200A  0100               	movlb	0	; () banked
  7588  00200C  2F86               	decfsz	___lwdiv@counter& (0+255),f,b
  7589  00200E  D7E1               	goto	l3921
  7590  002010                     l1630:
  7591                           
  7592                           ; BSR set to: 0
  7593  002010  C084  F080         	movff	___lwdiv@quotient,?___lwdiv
  7594  002014  C085  F081         	movff	___lwdiv@quotient+1,?___lwdiv+1
  7595                           
  7596                           ; BSR set to: 0
  7597  002018  0012               	return		;funcret
  7598  00201A                     __end_of___lwdiv:
  7599                           	opt stack 0
  7600                           tblptru	equ	0xFF8
  7601                           tblptrh	equ	0xFF7
  7602                           tblptrl	equ	0xFF6
  7603                           tablat	equ	0xFF5
  7604                           prodh	equ	0xFF4
  7605                           prodl	equ	0xFF3
  7606                           intcon	equ	0xFF2
  7607                           intcon3	equ	0xFF0
  7608                           indf0	equ	0xFEF
  7609                           postinc0	equ	0xFEE
  7610                           fsr0h	equ	0xFEA
  7611                           fsr0l	equ	0xFE9
  7612                           wreg	equ	0xFE8
  7613                           postdec1	equ	0xFE5
  7614                           fsr1l	equ	0xFE1
  7615                           indf2	equ	0xFDF
  7616                           postinc2	equ	0xFDE
  7617                           postdec2	equ	0xFDD
  7618                           fsr2h	equ	0xFDA
  7619                           fsr2l	equ	0xFD9
  7620                           status	equ	0xFD8
  7621                           
  7622 ;; *************** function _lcdInst *****************
  7623 ;; Defined at:
  7624 ;;		line 13 in file "lcd.c"
  7625 ;; Parameters:    Size  Location     Type
  7626 ;;  data            1    wreg     unsigned char 
  7627 ;; Auto vars:     Size  Location     Type
  7628 ;;  data            1    2[BANK0 ] unsigned char 
  7629 ;; Return value:  Size  Location     Type
  7630 ;;                  1    wreg      void 
  7631 ;; Registers used:
  7632 ;;		wreg, status,2, status,0, cstack
  7633 ;; Tracked objects:
  7634 ;;		On entry : 0/0
  7635 ;;		On exit  : 0/0
  7636 ;;		Unchanged: 0/0
  7637 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7638 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7639 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7640 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7641 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7642 ;;Total ram usage:        1 bytes
  7643 ;; Hardware stack levels used:    1
  7644 ;; Hardware stack levels required when called:    8
  7645 ;; This function calls:
  7646 ;;		_lcdNibble
  7647 ;; This function is called by:
  7648 ;;		_UI
  7649 ;;		_change_state_to_menu_start
  7650 ;;		_change_state_to_menu_12
  7651 ;;		_change_state_to_menu_22
  7652 ;;		_initLCD
  7653 ;;		_printRTC
  7654 ;;		_Loading
  7655 ;; This function uses a non-reentrant model
  7656 ;;
  7657                           
  7658                           	psect	text35
  7659  0028F2                     __ptext35:
  7660                           	opt stack 0
  7661  0028F2                     _lcdInst:
  7662                           	opt stack 20
  7663                           
  7664                           ; BSR set to: 0
  7665                           ;incstack = 0
  7666                           ;lcdInst@data stored from wreg
  7667  0028F2  0100               	movlb	0	; () banked
  7668  0028F4  6F82               	movwf	lcdInst@data& (0+255),b
  7669                           
  7670                           ;lcd.c: 14: LATDbits.LATD2 = 0;
  7671  0028F6  948C               	bcf	3980,2,c	;volatile
  7672                           
  7673                           ;lcd.c: 15: lcdNibble(data);
  7674  0028F8  0100               	movlb	0	; () banked
  7675  0028FA  5182               	movf	lcdInst@data& (0+255),w,b
  7676  0028FC  EC7D  F010         	call	_lcdNibble
  7677  002900  0012               	return		;funcret
  7678  002902                     __end_of_lcdInst:
  7679                           	opt stack 0
  7680                           tblptru	equ	0xFF8
  7681                           tblptrh	equ	0xFF7
  7682                           tblptrl	equ	0xFF6
  7683                           tablat	equ	0xFF5
  7684                           prodh	equ	0xFF4
  7685                           prodl	equ	0xFF3
  7686                           intcon	equ	0xFF2
  7687                           intcon3	equ	0xFF0
  7688                           indf0	equ	0xFEF
  7689                           postinc0	equ	0xFEE
  7690                           fsr0h	equ	0xFEA
  7691                           fsr0l	equ	0xFE9
  7692                           wreg	equ	0xFE8
  7693                           postdec1	equ	0xFE5
  7694                           fsr1l	equ	0xFE1
  7695                           indf2	equ	0xFDF
  7696                           postinc2	equ	0xFDE
  7697                           postdec2	equ	0xFDD
  7698                           fsr2h	equ	0xFDA
  7699                           fsr2l	equ	0xFD9
  7700                           status	equ	0xFD8
  7701                           
  7702 ;; *************** function _lcdNibble *****************
  7703 ;; Defined at:
  7704 ;;		line 23 in file "lcd.c"
  7705 ;; Parameters:    Size  Location     Type
  7706 ;;  data            1    wreg     unsigned char 
  7707 ;; Auto vars:     Size  Location     Type
  7708 ;;  data            1    1[BANK0 ] unsigned char 
  7709 ;;  temp            1    0[BANK0 ] unsigned char 
  7710 ;; Return value:  Size  Location     Type
  7711 ;;                  1    wreg      void 
  7712 ;; Registers used:
  7713 ;;		wreg, status,2, status,0
  7714 ;; Tracked objects:
  7715 ;;		On entry : 0/0
  7716 ;;		On exit  : 0/0
  7717 ;;		Unchanged: 0/0
  7718 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7719 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7720 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7721 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7722 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7723 ;;Total ram usage:        2 bytes
  7724 ;; Hardware stack levels used:    1
  7725 ;; Hardware stack levels required when called:    7
  7726 ;; This function calls:
  7727 ;;		Nothing
  7728 ;; This function is called by:
  7729 ;;		_lcdInst
  7730 ;;		_putch
  7731 ;; This function uses a non-reentrant model
  7732 ;;
  7733                           
  7734                           	psect	text36
  7735  0020FA                     __ptext36:
  7736                           	opt stack 0
  7737  0020FA                     _lcdNibble:
  7738                           	opt stack 20
  7739                           
  7740                           ;incstack = 0
  7741                           ;lcdNibble@data stored from wreg
  7742  0020FA  0100               	movlb	0	; () banked
  7743  0020FC  6F81               	movwf	lcdNibble@data& (0+255),b
  7744                           
  7745                           ;lcd.c: 25: char temp = data & 0xF0;
  7746  0020FE  0100               	movlb	0	; () banked
  7747  002100  5181               	movf	lcdNibble@data& (0+255),w,b
  7748  002102  0BF0               	andlw	240
  7749  002104  0100               	movlb	0	; () banked
  7750  002106  6F80               	movwf	lcdNibble@temp& (0+255),b
  7751                           
  7752                           ;lcd.c: 26: LATD = LATD & 0x0F;
  7753  002108  508C               	movf	3980,w,c	;volatile
  7754  00210A  0B0F               	andlw	15
  7755  00210C  6E8C               	movwf	3980,c	;volatile
  7756                           
  7757                           ;lcd.c: 27: LATD = temp | LATD;
  7758  00210E  0100               	movlb	0	; () banked
  7759  002110  5180               	movf	lcdNibble@temp& (0+255),w,b
  7760  002112  108C               	iorwf	3980,w,c	;volatile
  7761  002114  6E8C               	movwf	3980,c	;volatile
  7762                           
  7763                           ; BSR set to: 0
  7764                           ;lcd.c: 29: LATDbits.LATD3 = 1;
  7765  002116  868C               	bsf	3980,3,c	;volatile
  7766                           
  7767                           ; BSR set to: 0
  7768                           ;lcd.c: 30: _delay((unsigned long)((25)*(32000000/4000000.0)));
  7769  002118  0E42               	movlw	66
  7770  00211A                     u4817:
  7771  00211A  2EE8               	decfsz	wreg,f,c
  7772  00211C  D7FE               	bra	u4817
  7773  00211E  D000               	nop2	
  7774                           
  7775                           ;lcd.c: 31: LATDbits.LATD3 = 0;
  7776  002120  968C               	bcf	3980,3,c	;volatile
  7777                           
  7778                           ;lcd.c: 32: _delay((unsigned long)((25)*(32000000/4000000.0)));
  7779  002122  0E42               	movlw	66
  7780  002124                     u4827:
  7781  002124  2EE8               	decfsz	wreg,f,c
  7782  002126  D7FE               	bra	u4827
  7783  002128  D000               	nop2	
  7784                           
  7785                           ;lcd.c: 34: data = data << 4;
  7786  00212A  0100               	movlb	0	; () banked
  7787  00212C  3981               	swapf	lcdNibble@data& (0+255),w,b
  7788  00212E  0BF0               	andlw	240
  7789  002130  0100               	movlb	0	; () banked
  7790  002132  6F81               	movwf	lcdNibble@data& (0+255),b
  7791                           
  7792                           ;lcd.c: 36: temp = data & 0xF0;
  7793  002134  0100               	movlb	0	; () banked
  7794  002136  5181               	movf	lcdNibble@data& (0+255),w,b
  7795  002138  0BF0               	andlw	240
  7796  00213A  0100               	movlb	0	; () banked
  7797  00213C  6F80               	movwf	lcdNibble@temp& (0+255),b
  7798                           
  7799                           ;lcd.c: 37: LATD = LATD & 0x0F;
  7800  00213E  508C               	movf	3980,w,c	;volatile
  7801  002140  0B0F               	andlw	15
  7802  002142  6E8C               	movwf	3980,c	;volatile
  7803                           
  7804                           ;lcd.c: 38: LATD = temp | LATD;
  7805  002144  0100               	movlb	0	; () banked
  7806  002146  5180               	movf	lcdNibble@temp& (0+255),w,b
  7807  002148  108C               	iorwf	3980,w,c	;volatile
  7808  00214A  6E8C               	movwf	3980,c	;volatile
  7809                           
  7810                           ; BSR set to: 0
  7811                           ;lcd.c: 40: LATDbits.LATD3 = 1;
  7812  00214C  868C               	bsf	3980,3,c	;volatile
  7813                           
  7814                           ; BSR set to: 0
  7815                           ;lcd.c: 41: _delay((unsigned long)((25)*(32000000/4000000.0)));
  7816  00214E  0E42               	movlw	66
  7817  002150                     u4837:
  7818  002150  2EE8               	decfsz	wreg,f,c
  7819  002152  D7FE               	bra	u4837
  7820  002154  D000               	nop2	
  7821                           
  7822                           ;lcd.c: 42: LATDbits.LATD3 = 0;
  7823  002156  968C               	bcf	3980,3,c	;volatile
  7824                           
  7825                           ;lcd.c: 43: _delay((unsigned long)((25)*(32000000/4000000.0)));
  7826  002158  0E42               	movlw	66
  7827  00215A                     u4847:
  7828  00215A  2EE8               	decfsz	wreg,f,c
  7829  00215C  D7FE               	bra	u4847
  7830  00215E  D000               	nop2	
  7831  002160  0012               	return		;funcret
  7832  002162                     __end_of_lcdNibble:
  7833                           	opt stack 0
  7834                           tblptru	equ	0xFF8
  7835                           tblptrh	equ	0xFF7
  7836                           tblptrl	equ	0xFF6
  7837                           tablat	equ	0xFF5
  7838                           prodh	equ	0xFF4
  7839                           prodl	equ	0xFF3
  7840                           intcon	equ	0xFF2
  7841                           intcon3	equ	0xFF0
  7842                           indf0	equ	0xFEF
  7843                           postinc0	equ	0xFEE
  7844                           fsr0h	equ	0xFEA
  7845                           fsr0l	equ	0xFE9
  7846                           wreg	equ	0xFE8
  7847                           postdec1	equ	0xFE5
  7848                           fsr1l	equ	0xFE1
  7849                           indf2	equ	0xFDF
  7850                           postinc2	equ	0xFDE
  7851                           postdec2	equ	0xFDD
  7852                           fsr2h	equ	0xFDA
  7853                           fsr2l	equ	0xFD9
  7854                           status	equ	0xFD8
  7855                           
  7856 ;; *************** function ___awmod *****************
  7857 ;; Defined at:
  7858 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
  7859 ;; Parameters:    Size  Location     Type
  7860 ;;  dividend        2    0[BANK0 ] int 
  7861 ;;  divisor         2    2[BANK0 ] int 
  7862 ;; Auto vars:     Size  Location     Type
  7863 ;;  sign            1    5[BANK0 ] unsigned char 
  7864 ;;  counter         1    4[BANK0 ] unsigned char 
  7865 ;; Return value:  Size  Location     Type
  7866 ;;                  2    0[BANK0 ] int 
  7867 ;; Registers used:
  7868 ;;		wreg, status,2, status,0
  7869 ;; Tracked objects:
  7870 ;;		On entry : 0/0
  7871 ;;		On exit  : 0/0
  7872 ;;		Unchanged: 0/0
  7873 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7874 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7875 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7876 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7877 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7878 ;;Total ram usage:        6 bytes
  7879 ;; Hardware stack levels used:    1
  7880 ;; Hardware stack levels required when called:    7
  7881 ;; This function calls:
  7882 ;;		Nothing
  7883 ;; This function is called by:
  7884 ;;		_UI
  7885 ;; This function uses a non-reentrant model
  7886 ;;
  7887                           
  7888                           	psect	text37
  7889  001C44                     __ptext37:
  7890                           	opt stack 0
  7891  001C44                     ___awmod:
  7892                           	opt stack 22
  7893                           
  7894                           ;incstack = 0
  7895  001C44  0E00               	movlw	0
  7896  001C46  0100               	movlb	0	; () banked
  7897  001C48  6F85               	movwf	___awmod@sign& (0+255),b
  7898                           
  7899                           ; BSR set to: 0
  7900  001C4A  0100               	movlb	0	; () banked
  7901  001C4C  AF81               	btfss	(___awmod@dividend+1)& (0+255),7,b
  7902  001C4E  D008               	goto	l4939
  7903                           
  7904                           ; BSR set to: 0
  7905  001C50  0100               	movlb	0	; () banked
  7906  001C52  6D80               	negf	___awmod@dividend& (0+255),b
  7907  001C54  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
  7908  001C56  B0D8               	btfsc	status,0,c
  7909  001C58  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
  7910                           
  7911                           ; BSR set to: 0
  7912  001C5A  0E01               	movlw	1
  7913  001C5C  0100               	movlb	0	; () banked
  7914  001C5E  6F85               	movwf	___awmod@sign& (0+255),b
  7915  001C60                     l4939:
  7916                           
  7917                           ; BSR set to: 0
  7918  001C60  0100               	movlb	0	; () banked
  7919  001C62  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
  7920  001C64  D005               	goto	l4943
  7921                           
  7922                           ; BSR set to: 0
  7923  001C66  0100               	movlb	0	; () banked
  7924  001C68  6D82               	negf	___awmod@divisor& (0+255),b
  7925  001C6A  1F83               	comf	(___awmod@divisor+1)& (0+255),f,b
  7926  001C6C  B0D8               	btfsc	status,0,c
  7927  001C6E  2B83               	incf	(___awmod@divisor+1)& (0+255),f,b
  7928  001C70                     l4943:
  7929                           
  7930                           ; BSR set to: 0
  7931  001C70  0100               	movlb	0	; () banked
  7932  001C72  5182               	movf	___awmod@divisor& (0+255),w,b
  7933  001C74  0100               	movlb	0	; () banked
  7934  001C76  1183               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  7935  001C78  B4D8               	btfsc	status,2,c
  7936  001C7A  D026               	goto	l4959
  7937                           
  7938                           ; BSR set to: 0
  7939  001C7C  0E01               	movlw	1
  7940  001C7E  0100               	movlb	0	; () banked
  7941  001C80  6F84               	movwf	___awmod@counter& (0+255),b
  7942  001C82  D006               	goto	l4949
  7943  001C84                     l4947:
  7944                           
  7945                           ; BSR set to: 0
  7946  001C84  0100               	movlb	0	; () banked
  7947  001C86  90D8               	bcf	status,0,c
  7948  001C88  3782               	rlcf	___awmod@divisor& (0+255),f,b
  7949  001C8A  3783               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  7950  001C8C  0100               	movlb	0	; () banked
  7951  001C8E  2B84               	incf	___awmod@counter& (0+255),f,b
  7952  001C90                     l4949:
  7953                           
  7954                           ; BSR set to: 0
  7955  001C90  0100               	movlb	0	; () banked
  7956  001C92  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
  7957  001C94  D7F7               	goto	l4947
  7958  001C96                     l4951:
  7959                           
  7960                           ; BSR set to: 0
  7961  001C96  0100               	movlb	0	; () banked
  7962  001C98  5182               	movf	___awmod@divisor& (0+255),w,b
  7963  001C9A  0100               	movlb	0	; () banked
  7964  001C9C  5D80               	subwf	___awmod@dividend& (0+255),w,b
  7965  001C9E  0100               	movlb	0	; () banked
  7966  001CA0  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
  7967  001CA2  0100               	movlb	0	; () banked
  7968  001CA4  5981               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  7969  001CA6  A0D8               	btfss	status,0,c
  7970  001CA8  D008               	goto	l4955
  7971                           
  7972                           ; BSR set to: 0
  7973  001CAA  0100               	movlb	0	; () banked
  7974  001CAC  5182               	movf	___awmod@divisor& (0+255),w,b
  7975  001CAE  0100               	movlb	0	; () banked
  7976  001CB0  5F80               	subwf	___awmod@dividend& (0+255),f,b
  7977  001CB2  0100               	movlb	0	; () banked
  7978  001CB4  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
  7979  001CB6  0100               	movlb	0	; () banked
  7980  001CB8  5B81               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  7981  001CBA                     l4955:
  7982                           
  7983                           ; BSR set to: 0
  7984  001CBA  0100               	movlb	0	; () banked
  7985  001CBC  90D8               	bcf	status,0,c
  7986  001CBE  3383               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  7987  001CC0  3382               	rrcf	___awmod@divisor& (0+255),f,b
  7988                           
  7989                           ; BSR set to: 0
  7990  001CC2  0100               	movlb	0	; () banked
  7991  001CC4  2F84               	decfsz	___awmod@counter& (0+255),f,b
  7992  001CC6  D7E7               	goto	l4951
  7993  001CC8                     l4959:
  7994                           
  7995                           ; BSR set to: 0
  7996  001CC8  0100               	movlb	0	; () banked
  7997  001CCA  5185               	movf	___awmod@sign& (0+255),w,b
  7998  001CCC  0100               	movlb	0	; () banked
  7999  001CCE  B4D8               	btfsc	status,2,c
  8000  001CD0  D005               	goto	l4963
  8001                           
  8002                           ; BSR set to: 0
  8003  001CD2  0100               	movlb	0	; () banked
  8004  001CD4  6D80               	negf	___awmod@dividend& (0+255),b
  8005  001CD6  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
  8006  001CD8  B0D8               	btfsc	status,0,c
  8007  001CDA  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
  8008  001CDC                     l4963:
  8009                           
  8010                           ; BSR set to: 0
  8011  001CDC  C080  F080         	movff	___awmod@dividend,?___awmod
  8012  001CE0  C081  F081         	movff	___awmod@dividend+1,?___awmod+1
  8013  001CE4  0012               	return	
  8014  001CE6                     __end_of___awmod:
  8015                           	opt stack 0
  8016                           tblptru	equ	0xFF8
  8017                           tblptrh	equ	0xFF7
  8018                           tblptrl	equ	0xFF6
  8019                           tablat	equ	0xFF5
  8020                           prodh	equ	0xFF4
  8021                           prodl	equ	0xFF3
  8022                           intcon	equ	0xFF2
  8023                           intcon3	equ	0xFF0
  8024                           indf0	equ	0xFEF
  8025                           postinc0	equ	0xFEE
  8026                           fsr0h	equ	0xFEA
  8027                           fsr0l	equ	0xFE9
  8028                           wreg	equ	0xFE8
  8029                           postdec1	equ	0xFE5
  8030                           fsr1l	equ	0xFE1
  8031                           indf2	equ	0xFDF
  8032                           postinc2	equ	0xFDE
  8033                           postdec2	equ	0xFDD
  8034                           fsr2h	equ	0xFDA
  8035                           fsr2l	equ	0xFD9
  8036                           status	equ	0xFD8
  8037                           
  8038 ;; *************** function ___awdiv *****************
  8039 ;; Defined at:
  8040 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
  8041 ;; Parameters:    Size  Location     Type
  8042 ;;  dividend        2    6[BANK0 ] int 
  8043 ;;  divisor         2    8[BANK0 ] int 
  8044 ;; Auto vars:     Size  Location     Type
  8045 ;;  quotient        2   12[BANK0 ] int 
  8046 ;;  sign            1   11[BANK0 ] unsigned char 
  8047 ;;  counter         1   10[BANK0 ] unsigned char 
  8048 ;; Return value:  Size  Location     Type
  8049 ;;                  2    6[BANK0 ] int 
  8050 ;; Registers used:
  8051 ;;		wreg, status,2, status,0
  8052 ;; Tracked objects:
  8053 ;;		On entry : 0/0
  8054 ;;		On exit  : 0/0
  8055 ;;		Unchanged: 0/0
  8056 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8057 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8058 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8059 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8060 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8061 ;;Total ram usage:        8 bytes
  8062 ;; Hardware stack levels used:    1
  8063 ;; Hardware stack levels required when called:    7
  8064 ;; This function calls:
  8065 ;;		Nothing
  8066 ;; This function is called by:
  8067 ;;		_UI
  8068 ;; This function uses a non-reentrant model
  8069 ;;
  8070                           
  8071                           	psect	text38
  8072  001978                     __ptext38:
  8073                           	opt stack 0
  8074  001978                     ___awdiv:
  8075                           	opt stack 22
  8076                           
  8077                           ; BSR set to: 0
  8078                           ;incstack = 0
  8079  001978  0E00               	movlw	0
  8080  00197A  0100               	movlb	0	; () banked
  8081  00197C  6F8B               	movwf	___awdiv@sign& (0+255),b
  8082                           
  8083                           ; BSR set to: 0
  8084  00197E  0100               	movlb	0	; () banked
  8085  001980  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  8086  001982  D008               	goto	l4895
  8087                           
  8088                           ; BSR set to: 0
  8089  001984  0100               	movlb	0	; () banked
  8090  001986  6D88               	negf	___awdiv@divisor& (0+255),b
  8091  001988  1F89               	comf	(___awdiv@divisor+1)& (0+255),f,b
  8092  00198A  B0D8               	btfsc	status,0,c
  8093  00198C  2B89               	incf	(___awdiv@divisor+1)& (0+255),f,b
  8094                           
  8095                           ; BSR set to: 0
  8096  00198E  0E01               	movlw	1
  8097  001990  0100               	movlb	0	; () banked
  8098  001992  6F8B               	movwf	___awdiv@sign& (0+255),b
  8099  001994                     l4895:
  8100                           
  8101                           ; BSR set to: 0
  8102  001994  0100               	movlb	0	; () banked
  8103  001996  AF87               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  8104  001998  D008               	goto	l4901
  8105                           
  8106                           ; BSR set to: 0
  8107  00199A  0100               	movlb	0	; () banked
  8108  00199C  6D86               	negf	___awdiv@dividend& (0+255),b
  8109  00199E  1F87               	comf	(___awdiv@dividend+1)& (0+255),f,b
  8110  0019A0  B0D8               	btfsc	status,0,c
  8111  0019A2  2B87               	incf	(___awdiv@dividend+1)& (0+255),f,b
  8112                           
  8113                           ; BSR set to: 0
  8114  0019A4  0E01               	movlw	1
  8115  0019A6  0100               	movlb	0	; () banked
  8116  0019A8  1B8B               	xorwf	___awdiv@sign& (0+255),f,b
  8117  0019AA                     l4901:
  8118                           
  8119                           ; BSR set to: 0
  8120  0019AA  0E00               	movlw	0
  8121  0019AC  0100               	movlb	0	; () banked
  8122  0019AE  6F8D               	movwf	(___awdiv@quotient+1)& (0+255),b
  8123  0019B0  0E00               	movlw	0
  8124  0019B2  6F8C               	movwf	___awdiv@quotient& (0+255),b
  8125                           
  8126                           ; BSR set to: 0
  8127  0019B4  0100               	movlb	0	; () banked
  8128  0019B6  5188               	movf	___awdiv@divisor& (0+255),w,b
  8129  0019B8  0100               	movlb	0	; () banked
  8130  0019BA  1189               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  8131  0019BC  B4D8               	btfsc	status,2,c
  8132  0019BE  D02C               	goto	l4923
  8133                           
  8134                           ; BSR set to: 0
  8135  0019C0  0E01               	movlw	1
  8136  0019C2  0100               	movlb	0	; () banked
  8137  0019C4  6F8A               	movwf	___awdiv@counter& (0+255),b
  8138  0019C6  D006               	goto	l4909
  8139  0019C8                     l4907:
  8140                           
  8141                           ; BSR set to: 0
  8142  0019C8  0100               	movlb	0	; () banked
  8143  0019CA  90D8               	bcf	status,0,c
  8144  0019CC  3788               	rlcf	___awdiv@divisor& (0+255),f,b
  8145  0019CE  3789               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  8146  0019D0  0100               	movlb	0	; () banked
  8147  0019D2  2B8A               	incf	___awdiv@counter& (0+255),f,b
  8148  0019D4                     l4909:
  8149                           
  8150                           ; BSR set to: 0
  8151  0019D4  0100               	movlb	0	; () banked
  8152  0019D6  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  8153  0019D8  D7F7               	goto	l4907
  8154  0019DA                     l4911:
  8155                           
  8156                           ; BSR set to: 0
  8157  0019DA  0100               	movlb	0	; () banked
  8158  0019DC  90D8               	bcf	status,0,c
  8159  0019DE  378C               	rlcf	___awdiv@quotient& (0+255),f,b
  8160  0019E0  378D               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  8161                           
  8162                           ; BSR set to: 0
  8163  0019E2  0100               	movlb	0	; () banked
  8164  0019E4  5188               	movf	___awdiv@divisor& (0+255),w,b
  8165  0019E6  0100               	movlb	0	; () banked
  8166  0019E8  5D86               	subwf	___awdiv@dividend& (0+255),w,b
  8167  0019EA  0100               	movlb	0	; () banked
  8168  0019EC  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
  8169  0019EE  0100               	movlb	0	; () banked
  8170  0019F0  5987               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  8171  0019F2  A0D8               	btfss	status,0,c
  8172  0019F4  D00A               	goto	l4919
  8173                           
  8174                           ; BSR set to: 0
  8175  0019F6  0100               	movlb	0	; () banked
  8176  0019F8  5188               	movf	___awdiv@divisor& (0+255),w,b
  8177  0019FA  0100               	movlb	0	; () banked
  8178  0019FC  5F86               	subwf	___awdiv@dividend& (0+255),f,b
  8179  0019FE  0100               	movlb	0	; () banked
  8180  001A00  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
  8181  001A02  0100               	movlb	0	; () banked
  8182  001A04  5B87               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  8183                           
  8184                           ; BSR set to: 0
  8185  001A06  0100               	movlb	0	; () banked
  8186  001A08  818C               	bsf	___awdiv@quotient& (0+255),0,b
  8187  001A0A                     l4919:
  8188                           
  8189                           ; BSR set to: 0
  8190  001A0A  0100               	movlb	0	; () banked
  8191  001A0C  90D8               	bcf	status,0,c
  8192  001A0E  3389               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  8193  001A10  3388               	rrcf	___awdiv@divisor& (0+255),f,b
  8194                           
  8195                           ; BSR set to: 0
  8196  001A12  0100               	movlb	0	; () banked
  8197  001A14  2F8A               	decfsz	___awdiv@counter& (0+255),f,b
  8198  001A16  D7E1               	goto	l4911
  8199  001A18                     l4923:
  8200                           
  8201                           ; BSR set to: 0
  8202  001A18  0100               	movlb	0	; () banked
  8203  001A1A  518B               	movf	___awdiv@sign& (0+255),w,b
  8204  001A1C  0100               	movlb	0	; () banked
  8205  001A1E  B4D8               	btfsc	status,2,c
  8206  001A20  D005               	goto	l4927
  8207                           
  8208                           ; BSR set to: 0
  8209  001A22  0100               	movlb	0	; () banked
  8210  001A24  6D8C               	negf	___awdiv@quotient& (0+255),b
  8211  001A26  1F8D               	comf	(___awdiv@quotient+1)& (0+255),f,b
  8212  001A28  B0D8               	btfsc	status,0,c
  8213  001A2A  2B8D               	incf	(___awdiv@quotient+1)& (0+255),f,b
  8214  001A2C                     l4927:
  8215                           
  8216                           ; BSR set to: 0
  8217  001A2C  C08C  F086         	movff	___awdiv@quotient,?___awdiv
  8218  001A30  C08D  F087         	movff	___awdiv@quotient+1,?___awdiv+1
  8219  001A34  0012               	return	
  8220  001A36                     __end_of___awdiv:
  8221                           	opt stack 0
  8222                           tblptru	equ	0xFF8
  8223                           tblptrh	equ	0xFF7
  8224                           tblptrl	equ	0xFF6
  8225                           tablat	equ	0xFF5
  8226                           prodh	equ	0xFF4
  8227                           prodl	equ	0xFF3
  8228                           intcon	equ	0xFF2
  8229                           intcon3	equ	0xFF0
  8230                           indf0	equ	0xFEF
  8231                           postinc0	equ	0xFEE
  8232                           fsr0h	equ	0xFEA
  8233                           fsr0l	equ	0xFE9
  8234                           wreg	equ	0xFE8
  8235                           postdec1	equ	0xFE5
  8236                           fsr1l	equ	0xFE1
  8237                           indf2	equ	0xFDF
  8238                           postinc2	equ	0xFDE
  8239                           postdec2	equ	0xFDD
  8240                           fsr2h	equ	0xFDA
  8241                           fsr2l	equ	0xFD9
  8242                           status	equ	0xFD8
  8243                           
  8244 ;; *************** function _PortTestA5 *****************
  8245 ;; Defined at:
  8246 ;;		line 27 in file "PortHigh.c"
  8247 ;; Parameters:    Size  Location     Type
  8248 ;;		None
  8249 ;; Auto vars:     Size  Location     Type
  8250 ;;		None
  8251 ;; Return value:  Size  Location     Type
  8252 ;;                  1    wreg      void 
  8253 ;; Registers used:
  8254 ;;		None
  8255 ;; Tracked objects:
  8256 ;;		On entry : 0/0
  8257 ;;		On exit  : 0/0
  8258 ;;		Unchanged: 0/0
  8259 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8260 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8261 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8262 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8263 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8264 ;;Total ram usage:        0 bytes
  8265 ;; Hardware stack levels used:    1
  8266 ;; Hardware stack levels required when called:    7
  8267 ;; This function calls:
  8268 ;;		Nothing
  8269 ;; This function is called by:
  8270 ;;		_main
  8271 ;; This function uses a non-reentrant model
  8272 ;;
  8273                           
  8274                           	psect	text39
  8275  0028BE                     __ptext39:
  8276                           	opt stack 0
  8277  0028BE                     _PortTestA5:
  8278                           	opt stack 23
  8279  0028BE                     l222:
  8280  0028BE  A281               	btfss	3969,1,c	;volatile
  8281  0028C0  D7FE               	goto	l222
  8282                           
  8283                           ;PortHigh.c: 31: }
  8284                           ;PortHigh.c: 32: LATAbits.LATA5 = 1;
  8285  0028C2  8A89               	bsf	3977,5,c	;volatile
  8286  0028C4                     l225:
  8287  0028C4  B281               	btfsc	3969,1,c	;volatile
  8288  0028C6  D7FE               	goto	l225
  8289                           
  8290                           ;PortHigh.c: 35: }
  8291                           ;PortHigh.c: 36: __nop();
  8292  0028C8  F000               	nop	
  8293                           
  8294                           ;PortHigh.c: 37: __nop();
  8295  0028CA  F000               	nop	
  8296                           
  8297                           ;PortHigh.c: 38: LATAbits.LATA5 = 0;
  8298  0028CC  9A89               	bcf	3977,5,c	;volatile
  8299  0028CE  0012               	return		;funcret
  8300  0028D0                     __end_of_PortTestA5:
  8301                           	opt stack 0
  8302                           tblptru	equ	0xFF8
  8303                           tblptrh	equ	0xFF7
  8304                           tblptrl	equ	0xFF6
  8305                           tablat	equ	0xFF5
  8306                           prodh	equ	0xFF4
  8307                           prodl	equ	0xFF3
  8308                           intcon	equ	0xFF2
  8309                           intcon3	equ	0xFF0
  8310                           indf0	equ	0xFEF
  8311                           postinc0	equ	0xFEE
  8312                           fsr0h	equ	0xFEA
  8313                           fsr0l	equ	0xFE9
  8314                           wreg	equ	0xFE8
  8315                           postdec1	equ	0xFE5
  8316                           fsr1l	equ	0xFE1
  8317                           indf2	equ	0xFDF
  8318                           postinc2	equ	0xFDE
  8319                           postdec2	equ	0xFDD
  8320                           fsr2h	equ	0xFDA
  8321                           fsr2l	equ	0xFD9
  8322                           status	equ	0xFD8
  8323                           
  8324 ;; *************** function _handler *****************
  8325 ;; Defined at:
  8326 ;;		line 14 in file "interruptHandler.c"
  8327 ;; Parameters:    Size  Location     Type
  8328 ;;		None
  8329 ;; Auto vars:     Size  Location     Type
  8330 ;;		None
  8331 ;; Return value:  Size  Location     Type
  8332 ;;                  1    wreg      void 
  8333 ;; Registers used:
  8334 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8335 ;; Tracked objects:
  8336 ;;		On entry : 0/0
  8337 ;;		On exit  : 0/0
  8338 ;;		Unchanged: 0/0
  8339 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8340 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8341 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8342 ;;      Temps:         16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8343 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8344 ;;Total ram usage:       16 bytes
  8345 ;; Hardware stack levels used:    1
  8346 ;; Hardware stack levels required when called:    6
  8347 ;; This function calls:
  8348 ;;		_printSortTimer
  8349 ;;		_updateMenu
  8350 ;; This function is called by:
  8351 ;;		Interrupt level 2
  8352 ;; This function uses a non-reentrant model
  8353 ;;
  8354                           
  8355                           	psect	intcode
  8356  000008                     __pintcode:
  8357                           	opt stack 0
  8358  000008                     _handler:
  8359                           	opt stack 18
  8360                           
  8361                           ;incstack = 0
  8362  000008  827E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  8363  00000A  ED33  F00C         	call	int_func,f	;refresh shadow registers
  8364                           tblptru	equ	0xFF8
  8365                           tblptrh	equ	0xFF7
  8366                           tblptrl	equ	0xFF6
  8367                           tablat	equ	0xFF5
  8368                           prodh	equ	0xFF4
  8369                           prodl	equ	0xFF3
  8370                           intcon	equ	0xFF2
  8371                           intcon3	equ	0xFF0
  8372                           indf0	equ	0xFEF
  8373                           postinc0	equ	0xFEE
  8374                           fsr0h	equ	0xFEA
  8375                           fsr0l	equ	0xFE9
  8376                           wreg	equ	0xFE8
  8377                           postdec1	equ	0xFE5
  8378                           fsr1l	equ	0xFE1
  8379                           indf2	equ	0xFDF
  8380                           postinc2	equ	0xFDE
  8381                           postdec2	equ	0xFDD
  8382                           fsr2h	equ	0xFDA
  8383                           fsr2l	equ	0xFD9
  8384                           status	equ	0xFD8
  8385                           
  8386                           	psect	intcode_body
  8387  001866                     __pintcode_body:
  8388                           	opt stack 18
  8389  001866                     int_func:
  8390                           	opt stack 18
  8391  001866  0006               	pop		; remove dummy address from shadow register refresh
  8392  001868  CFFA F04D          	movff	pclath,??_handler+2
  8393  00186C  CFFB F04E          	movff	pclatu,??_handler+3
  8394  001870  CFE9 F04F          	movff	fsr0l,??_handler+4
  8395  001874  CFEA F050          	movff	fsr0h,??_handler+5
  8396  001878  CFE1 F051          	movff	fsr1l,??_handler+6
  8397  00187C  CFE2 F052          	movff	fsr1h,??_handler+7
  8398  001880  CFD9 F053          	movff	fsr2l,??_handler+8
  8399  001884  CFDA F054          	movff	fsr2h,??_handler+9
  8400  001888  CFF3 F055          	movff	prodl,??_handler+10
  8401  00188C  CFF4 F056          	movff	prodh,??_handler+11
  8402  001890  CFF6 F057          	movff	tblptrl,??_handler+12
  8403  001894  CFF7 F058          	movff	tblptrh,??_handler+13
  8404  001898  CFF8 F059          	movff	tblptru,??_handler+14
  8405  00189C  CFF5 F05A          	movff	tablat,??_handler+15
  8406                           
  8407                           ;interruptHandler.c: 16: if(INT1IF){
  8408  0018A0  A0F0               	btfss	intcon3,0,c	;volatile
  8409  0018A2  D018               	goto	i2l5597
  8410                           
  8411                           ;interruptHandler.c: 17: INT1IF = 0;
  8412  0018A4  90F0               	bcf	intcon3,0,c	;volatile
  8413                           
  8414                           ;interruptHandler.c: 18: if(machine_state == UI_state) {
  8415  0018A6  0100               	movlb	0	; () banked
  8416  0018A8  51F1               	movf	_machine_state& (0+255),w,b
  8417  0018AA  A4D8               	btfss	status,2,c
  8418  0018AC  D013               	goto	i2l5597
  8419                           
  8420                           ; BSR set to: 0
  8421                           ;interruptHandler.c: 19: input = keys[(PORTB & 0xF0) >> 4];
  8422  0018AE  3881               	swapf	3969,w,c	;volatile
  8423  0018B0  0B0F               	andlw	15
  8424  0018B2  0B0F               	andlw	15
  8425  0018B4  6E4B               	movwf	??_handler& (0+255),c
  8426  0018B6  6A4C               	clrf	(??_handler+1)& (0+255),c
  8427  0018B8  0EB5               	movlw	low _keys
  8428  0018BA  244B               	addwf	??_handler,w,c
  8429  0018BC  6EF6               	movwf	tblptrl,c
  8430  0018BE  0EFD               	movlw	high _keys
  8431  0018C0  204C               	addwfc	??_handler+1,w,c
  8432  0018C2  6EF7               	movwf	tblptrh,c
  8433  0018C4                     	if	1	;There are 3 active tblptr bytes
  8434  0018C4  6AF8               	clrf	tblptru,c
  8435  0018C6  0E00               	movlw	low (__mediumconst shr (0+16))
  8436  0018C8  22F8               	addwfc	tblptru,f,c
  8437  0018CA                     	endif
  8438  0018CA  0008               	tblrd		*
  8439  0018CC  CFF5 F079          	movff	tablat,_input
  8440                           
  8441                           ; BSR set to: 0
  8442                           ;interruptHandler.c: 20: updateMenu();
  8443  0018D0  ECC8  F007         	call	_updateMenu	;wreg free
  8444  0018D4                     i2l5597:
  8445                           
  8446                           ;interruptHandler.c: 21: }
  8447                           ;interruptHandler.c: 22: }
  8448                           ;interruptHandler.c: 25: if(TMR0IF){
  8449  0018D4  A4F2               	btfss	intcon,2,c	;volatile
  8450  0018D6  D00E               	goto	i2l5613
  8451                           
  8452                           ;interruptHandler.c: 26: TMR0IF = 0;
  8453  0018D8  94F2               	bcf	intcon,2,c	;volatile
  8454                           
  8455                           ;interruptHandler.c: 27: if(machine_state == Sorting_state){
  8456  0018DA  0100               	movlb	0	; () banked
  8457  0018DC  05F1               	decf	_machine_state& (0+255),w,b
  8458  0018DE  A4D8               	btfss	status,2,c
  8459  0018E0  D009               	goto	i2l5613
  8460                           
  8461                           ; BSR set to: 0
  8462                           ;interruptHandler.c: 28: printSortTimer();
  8463  0018E2  EC43  F00A         	call	_printSortTimer	;wreg free
  8464                           
  8465                           ;interruptHandler.c: 31: T0CON = 0b00010111;
  8466  0018E6  0E17               	movlw	23
  8467  0018E8  6ED5               	movwf	4053,c	;volatile
  8468                           
  8469                           ;interruptHandler.c: 32: TMR0H = 0b10000101;
  8470  0018EA  0E85               	movlw	133
  8471  0018EC  6ED7               	movwf	4055,c	;volatile
  8472                           
  8473                           ;interruptHandler.c: 33: TMR0L = 0b11101110;
  8474  0018EE  0EEE               	movlw	238
  8475  0018F0  6ED6               	movwf	4054,c	;volatile
  8476                           
  8477                           ;interruptHandler.c: 34: TMR0ON = 1;
  8478  0018F2  8ED5               	bsf	4053,7,c	;volatile
  8479  0018F4                     i2l5613:
  8480                           
  8481                           ;interruptHandler.c: 35: }
  8482                           ;interruptHandler.c: 36: }
  8483                           ;interruptHandler.c: 39: if(TMR1IF){
  8484  0018F4  A09E               	btfss	3998,0,c	;volatile
  8485  0018F6  D022               	goto	i2l1156
  8486                           
  8487                           ;interruptHandler.c: 40: TMR1IF = 0;
  8488  0018F8  909E               	bcf	3998,0,c	;volatile
  8489                           
  8490                           ;interruptHandler.c: 41: TMR1ON = 0;
  8491  0018FA  90CD               	bcf	4045,0,c	;volatile
  8492                           
  8493                           ;interruptHandler.c: 42: if(machine_state == Sorting_state){
  8494  0018FC  0100               	movlb	0	; () banked
  8495  0018FE  05F1               	decf	_machine_state& (0+255),w,b
  8496  001900  A4D8               	btfss	status,2,c
  8497  001902  D01C               	goto	i2l1156
  8498                           
  8499                           ; BSR set to: 0
  8500                           ;interruptHandler.c: 43: T1CON = 0b10110000;
  8501  001904  0EB0               	movlw	176
  8502  001906  6ECD               	movwf	4045,c	;volatile
  8503                           
  8504                           ; BSR set to: 0
  8505                           ;interruptHandler.c: 44: if(was_low){
  8506  001908  5075               	movf	_was_low,w,c
  8507  00190A  1076               	iorwf	_was_low+1,w,c
  8508  00190C  B4D8               	btfsc	status,2,c
  8509  00190E  D00B               	goto	i2l1154
  8510                           
  8511                           ; BSR set to: 0
  8512                           ;interruptHandler.c: 45: LATCbits.LATC1 = 1;
  8513  001910  828B               	bsf	3979,1,c	;volatile
  8514                           
  8515                           ;interruptHandler.c: 46: LATCbits.LATC2 = 1;
  8516  001912  848B               	bsf	3979,2,c	;volatile
  8517                           
  8518                           ; BSR set to: 0
  8519                           ;interruptHandler.c: 47: was_low = 0;
  8520  001914  0E00               	movlw	0
  8521  001916  6E76               	movwf	_was_low+1,c
  8522  001918  0E00               	movlw	0
  8523  00191A  6E75               	movwf	_was_low,c
  8524                           
  8525                           ; BSR set to: 0
  8526                           ;interruptHandler.c: 49: TMR1H = timer1highbits;
  8527  00191C  C06B  FFCF         	movff	_timer1highbits,4047	;volatile
  8528                           
  8529                           ; BSR set to: 0
  8530                           ;interruptHandler.c: 50: TMR1L = timer1lowbits;
  8531  001920  C06D  FFCE         	movff	_timer1lowbits,4046	;volatile
  8532                           
  8533                           ;interruptHandler.c: 51: }
  8534  001924  D00A               	goto	i2l5637
  8535  001926                     i2l1154:
  8536                           
  8537                           ; BSR set to: 0
  8538                           ;interruptHandler.c: 52: else{
  8539                           ;interruptHandler.c: 53: LATCbits.LATC1 = 0;
  8540  001926  928B               	bcf	3979,1,c	;volatile
  8541                           
  8542                           ;interruptHandler.c: 54: LATCbits.LATC2 = 0;
  8543  001928  948B               	bcf	3979,2,c	;volatile
  8544                           
  8545                           ; BSR set to: 0
  8546                           ;interruptHandler.c: 55: was_low = 1;
  8547  00192A  0E00               	movlw	0
  8548  00192C  6E76               	movwf	_was_low+1,c
  8549  00192E  0E01               	movlw	1
  8550  001930  6E75               	movwf	_was_low,c
  8551                           
  8552                           ; BSR set to: 0
  8553                           ;interruptHandler.c: 57: TMR1H = timer1_20ms_high;
  8554  001932  C07A  FFCF         	movff	_timer1_20ms_high,4047	;volatile
  8555                           
  8556                           ; BSR set to: 0
  8557                           ;interruptHandler.c: 58: TMR1L = timer1_20ms_low;
  8558  001936  C07C  FFCE         	movff	_timer1_20ms_low,4046	;volatile
  8559  00193A                     i2l5637:
  8560                           
  8561                           ; BSR set to: 0
  8562                           ;interruptHandler.c: 59: }
  8563                           ;interruptHandler.c: 60: TMR1ON = 1;
  8564  00193A  80CD               	bsf	4045,0,c	;volatile
  8565  00193C                     i2l1156:
  8566  00193C  C05A  FFF5         	movff	??_handler+15,tablat
  8567  001940  C059  FFF8         	movff	??_handler+14,tblptru
  8568  001944  C058  FFF7         	movff	??_handler+13,tblptrh
  8569  001948  C057  FFF6         	movff	??_handler+12,tblptrl
  8570  00194C  C056  FFF4         	movff	??_handler+11,prodh
  8571  001950  C055  FFF3         	movff	??_handler+10,prodl
  8572  001954  C054  FFDA         	movff	??_handler+9,fsr2h
  8573  001958  C053  FFD9         	movff	??_handler+8,fsr2l
  8574  00195C  C052  FFE2         	movff	??_handler+7,fsr1h
  8575  001960  C051  FFE1         	movff	??_handler+6,fsr1l
  8576  001964  C050  FFEA         	movff	??_handler+5,fsr0h
  8577  001968  C04F  FFE9         	movff	??_handler+4,fsr0l
  8578  00196C  C04E  FFFB         	movff	??_handler+3,pclatu
  8579  001970  C04D  FFFA         	movff	??_handler+2,pclath
  8580  001974  927E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  8581  001976  0011               	retfie		f
  8582  001978                     __end_of_handler:
  8583                           	opt stack 0
  8584                           pclatu	equ	0xFFB
  8585                           pclath	equ	0xFFA
  8586                           tblptru	equ	0xFF8
  8587                           tblptrh	equ	0xFF7
  8588                           tblptrl	equ	0xFF6
  8589                           tablat	equ	0xFF5
  8590                           prodh	equ	0xFF4
  8591                           prodl	equ	0xFF3
  8592                           intcon	equ	0xFF2
  8593                           intcon3	equ	0xFF0
  8594                           indf0	equ	0xFEF
  8595                           postinc0	equ	0xFEE
  8596                           fsr0h	equ	0xFEA
  8597                           fsr0l	equ	0xFE9
  8598                           wreg	equ	0xFE8
  8599                           postdec1	equ	0xFE5
  8600                           fsr1h	equ	0xFE2
  8601                           fsr1l	equ	0xFE1
  8602                           indf2	equ	0xFDF
  8603                           postinc2	equ	0xFDE
  8604                           postdec2	equ	0xFDD
  8605                           fsr2h	equ	0xFDA
  8606                           fsr2l	equ	0xFD9
  8607                           status	equ	0xFD8
  8608                           
  8609 ;; *************** function _updateMenu *****************
  8610 ;; Defined at:
  8611 ;;		line 155 in file "UI.c"
  8612 ;; Parameters:    Size  Location     Type
  8613 ;;		None
  8614 ;; Auto vars:     Size  Location     Type
  8615 ;;		None
  8616 ;; Return value:  Size  Location     Type
  8617 ;;                  1    wreg      void 
  8618 ;; Registers used:
  8619 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8620 ;; Tracked objects:
  8621 ;;		On entry : 0/0
  8622 ;;		On exit  : 0/0
  8623 ;;		Unchanged: 0/0
  8624 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8625 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8626 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8627 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8628 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8629 ;;Total ram usage:        2 bytes
  8630 ;; Hardware stack levels used:    1
  8631 ;; Hardware stack levels required when called:    5
  8632 ;; This function calls:
  8633 ;;		_change_state_to_logs_11
  8634 ;;		_change_state_to_logs_12
  8635 ;;		_change_state_to_logs_22
  8636 ;;		_change_state_to_logs_23
  8637 ;;		_change_state_to_logs_33
  8638 ;;		_change_state_to_logs_34
  8639 ;;		_change_state_to_menu_11
  8640 ;;		_change_state_to_menu_23
  8641 ;;		_dispLogs
  8642 ;;		_inputHandler
  8643 ;;		i2_change_state_to_menu_12
  8644 ;;		i2_change_state_to_menu_22
  8645 ;;		i2_change_state_to_menu_start
  8646 ;; This function is called by:
  8647 ;;		_handler
  8648 ;; This function uses a non-reentrant model
  8649 ;;
  8650                           
  8651                           	psect	text41
  8652  000F90                     __ptext41:
  8653                           	opt stack 0
  8654  000F90                     _updateMenu:
  8655                           	opt stack 18
  8656                           
  8657                           ;UI.c: 156: up = 0; down = 0; enter = 0; back = 0;
  8658                           
  8659                           ;incstack = 0
  8660  000F90  0E00               	movlw	0
  8661  000F92  6E74               	movwf	_up+1,c
  8662  000F94  0E00               	movlw	0
  8663  000F96  6E73               	movwf	_up,c
  8664  000F98  0E00               	movlw	0
  8665  000F9A  6E66               	movwf	_down+1,c
  8666  000F9C  0E00               	movlw	0
  8667  000F9E  6E65               	movwf	_down,c
  8668  000FA0  0E00               	movlw	0
  8669  000FA2  6E68               	movwf	_enter+1,c
  8670  000FA4  0E00               	movlw	0
  8671  000FA6  6E67               	movwf	_enter,c
  8672  000FA8  0E00               	movlw	0
  8673  000FAA  6E5E               	movwf	_back+1,c
  8674  000FAC  0E00               	movlw	0
  8675  000FAE  6E5D               	movwf	_back,c
  8676                           
  8677                           ;UI.c: 157: (INTCONbits.GIE = 0);
  8678  000FB0  9EF2               	bcf	intcon,7,c	;volatile
  8679                           
  8680                           ;UI.c: 159: if (inputHandler()
  8681                           ;UI.c: 162: ){
  8682  000FB2  EC40  F00B         	call	_inputHandler	;wreg free
  8683  000FB6  502A               	movf	?_inputHandler,w,c
  8684  000FB8  102B               	iorwf	?_inputHandler+1,w,c
  8685  000FBA  A4D8               	btfss	status,2,c
  8686  000FBC  D112               	goto	i2l5427
  8687  000FBE  D146               	goto	i2l387
  8688  000FC0                     i2l5279:
  8689                           
  8690                           ;UI.c: 166: change_state_to_menu_11();
  8691  000FC0  ECC8  F012         	call	_change_state_to_menu_11	;wreg free
  8692                           
  8693                           ;UI.c: 167: break;
  8694  000FC4  D143               	goto	i2l387
  8695  000FC6                     i2l5281:
  8696                           
  8697                           ;UI.c: 170: if(up){
  8698  000FC6  5073               	movf	_up,w,c
  8699  000FC8  1074               	iorwf	_up+1,w,c
  8700  000FCA  B4D8               	btfsc	status,2,c
  8701  000FCC  D003               	goto	i2l5285
  8702                           
  8703                           ;UI.c: 171: change_state_to_menu_23();
  8704  000FCE  ECB0  F012         	call	_change_state_to_menu_23	;wreg free
  8705                           
  8706                           ;UI.c: 172: }
  8707  000FD2  D13C               	goto	i2l387
  8708  000FD4                     i2l5285:
  8709                           
  8710                           ;UI.c: 173: else if(down){
  8711  000FD4  5065               	movf	_down,w,c
  8712  000FD6  1066               	iorwf	_down+1,w,c
  8713  000FD8  B4D8               	btfsc	status,2,c
  8714  000FDA  D003               	goto	i2l5289
  8715                           
  8716                           ;UI.c: 174: change_state_to_menu_12();
  8717  000FDC  EC98  F012         	call	i2_change_state_to_menu_12	;wreg free
  8718                           
  8719                           ;UI.c: 175: }
  8720  000FE0  D135               	goto	i2l387
  8721  000FE2                     i2l5289:
  8722                           
  8723                           ;UI.c: 176: else if(enter){
  8724  000FE2  5067               	movf	_enter,w,c
  8725  000FE4  1068               	iorwf	_enter+1,w,c
  8726  000FE6  B4D8               	btfsc	status,2,c
  8727  000FE8  D131               	goto	i2l387
  8728                           
  8729                           ;UI.c: 177: change_state_to_menu_start();
  8730  000FEA  ECC8  F013         	call	i2_change_state_to_menu_start	;wreg free
  8731                           
  8732                           ;UI.c: 178: }
  8733                           ;UI.c: 179: break;
  8734  000FEE  D12E               	goto	i2l387
  8735  000FF0                     i2l5293:
  8736                           
  8737                           ;UI.c: 182: if(up){
  8738  000FF0  5073               	movf	_up,w,c
  8739  000FF2  1074               	iorwf	_up+1,w,c
  8740  000FF4  B4D8               	btfsc	status,2,c
  8741  000FF6  D003               	goto	i2l5297
  8742                           
  8743                           ;UI.c: 183: change_state_to_menu_11();
  8744  000FF8  ECC8  F012         	call	_change_state_to_menu_11	;wreg free
  8745                           
  8746                           ;UI.c: 184: }
  8747  000FFC  D127               	goto	i2l387
  8748  000FFE                     i2l5297:
  8749                           
  8750                           ;UI.c: 185: else if(down){
  8751  000FFE  5065               	movf	_down,w,c
  8752  001000  1066               	iorwf	_down+1,w,c
  8753  001002  B4D8               	btfsc	status,2,c
  8754  001004  D011               	goto	i2l5313
  8755                           
  8756                           ;UI.c: 186: change_state_to_menu_23();
  8757  001006  ECB0  F012         	call	_change_state_to_menu_23	;wreg free
  8758                           
  8759                           ;UI.c: 187: }
  8760  00100A  D120               	goto	i2l387
  8761  00100C                     i2l5305:
  8762                           
  8763                           ;UI.c: 194: if(up){
  8764  00100C  5073               	movf	_up,w,c
  8765  00100E  1074               	iorwf	_up+1,w,c
  8766  001010  B4D8               	btfsc	status,2,c
  8767  001012  D003               	goto	i2l5309
  8768                           
  8769                           ;UI.c: 195: change_state_to_menu_11();
  8770  001014  ECC8  F012         	call	_change_state_to_menu_11	;wreg free
  8771                           
  8772                           ;UI.c: 196: }
  8773  001018  D119               	goto	i2l387
  8774  00101A                     i2l5309:
  8775                           
  8776                           ;UI.c: 197: else if(down){
  8777  00101A  5065               	movf	_down,w,c
  8778  00101C  1066               	iorwf	_down+1,w,c
  8779  00101E  B4D8               	btfsc	status,2,c
  8780  001020  D003               	goto	i2l5313
  8781                           
  8782                           ;UI.c: 198: change_state_to_menu_23();
  8783  001022  ECB0  F012         	call	_change_state_to_menu_23	;wreg free
  8784                           
  8785                           ;UI.c: 199: }
  8786  001026  D112               	goto	i2l387
  8787  001028                     i2l5313:
  8788                           
  8789                           ;UI.c: 200: else if(enter){
  8790  001028  5067               	movf	_enter,w,c
  8791  00102A  1068               	iorwf	_enter+1,w,c
  8792  00102C  B4D8               	btfsc	status,2,c
  8793  00102E  D10E               	goto	i2l387
  8794                           
  8795                           ;UI.c: 201: machine_state = Sorting_state;
  8796  001030  0E01               	movlw	1
  8797  001032  0100               	movlb	0	; () banked
  8798  001034  6FF1               	movwf	_machine_state& (0+255),b
  8799                           
  8800                           ; BSR set to: 0
  8801                           ;UI.c: 202: }
  8802                           ;UI.c: 203: break;
  8803                           
  8804                           ; BSR set to: 0
  8805                           
  8806                           ; BSR set to: 0
  8807  001036  D10A               	goto	i2l387
  8808  001038                     i2l5317:
  8809                           
  8810                           ;UI.c: 206: if(up){
  8811  001038  5073               	movf	_up,w,c
  8812  00103A  1074               	iorwf	_up+1,w,c
  8813  00103C  B4D8               	btfsc	status,2,c
  8814  00103E  D003               	goto	i2l5321
  8815                           
  8816                           ;UI.c: 207: change_state_to_menu_22();
  8817  001040  EC80  F012         	call	i2_change_state_to_menu_22	;wreg free
  8818                           
  8819                           ;UI.c: 208: }
  8820  001044  D103               	goto	i2l387
  8821  001046                     i2l5321:
  8822                           
  8823                           ;UI.c: 209: else if(down){
  8824  001046  5065               	movf	_down,w,c
  8825  001048  1066               	iorwf	_down+1,w,c
  8826  00104A  B4D8               	btfsc	status,2,c
  8827  00104C  D003               	goto	i2l5325
  8828                           
  8829                           ;UI.c: 210: change_state_to_menu_11();
  8830  00104E  ECC8  F012         	call	_change_state_to_menu_11	;wreg free
  8831                           
  8832                           ;UI.c: 211: }
  8833  001052  D0FC               	goto	i2l387
  8834  001054                     i2l5325:
  8835                           
  8836                           ;UI.c: 212: else if(enter){
  8837  001054  5067               	movf	_enter,w,c
  8838  001056  1068               	iorwf	_enter+1,w,c
  8839  001058  B4D8               	btfsc	status,2,c
  8840  00105A  D0F8               	goto	i2l387
  8841                           
  8842                           ;UI.c: 213: change_state_to_logs_11();
  8843  00105C  EC40  F013         	call	_change_state_to_logs_11	;wreg free
  8844                           
  8845                           ;UI.c: 214: }
  8846                           ;UI.c: 215: break;
  8847  001060  D0F5               	goto	i2l387
  8848  001062                     i2l5329:
  8849                           
  8850                           ;UI.c: 218: if(up){
  8851  001062  5073               	movf	_up,w,c
  8852  001064  1074               	iorwf	_up+1,w,c
  8853  001066  B4D8               	btfsc	status,2,c
  8854  001068  D003               	goto	i2l5333
  8855                           
  8856                           ;UI.c: 219: change_state_to_logs_34();
  8857  00106A  ECE0  F012         	call	_change_state_to_logs_34	;wreg free
  8858                           
  8859                           ;UI.c: 220: }
  8860  00106E  D0EE               	goto	i2l387
  8861  001070                     i2l5333:
  8862                           
  8863                           ;UI.c: 221: else if(down){
  8864  001070  5065               	movf	_down,w,c
  8865  001072  1066               	iorwf	_down+1,w,c
  8866  001074  B4D8               	btfsc	status,2,c
  8867  001076  D003               	goto	i2l5337
  8868                           
  8869                           ;UI.c: 222: change_state_to_logs_12();
  8870  001078  EC28  F013         	call	_change_state_to_logs_12	;wreg free
  8871                           
  8872                           ;UI.c: 223: }
  8873  00107C  D0E7               	goto	i2l387
  8874  00107E                     i2l5337:
  8875                           
  8876                           ;UI.c: 224: else if(enter){
  8877  00107E  5067               	movf	_enter,w,c
  8878  001080  1068               	iorwf	_enter+1,w,c
  8879  001082  B4D8               	btfsc	status,2,c
  8880  001084  D007               	goto	i2l5341
  8881                           
  8882                           ;UI.c: 225: dispLogs(1);
  8883  001086  0E00               	movlw	0
  8884  001088  6E02               	movwf	dispLogs@myLog+1,c
  8885  00108A  0E01               	movlw	1
  8886  00108C  6E01               	movwf	dispLogs@myLog,c
  8887  00108E  EC55  F014         	call	_dispLogs	;wreg free
  8888                           
  8889                           ;UI.c: 226: }
  8890  001092  D0DC               	goto	i2l387
  8891  001094                     i2l5341:
  8892                           
  8893                           ;UI.c: 227: else if(back){
  8894  001094  505D               	movf	_back,w,c
  8895  001096  105E               	iorwf	_back+1,w,c
  8896  001098  B4D8               	btfsc	status,2,c
  8897  00109A  D0D8               	goto	i2l387
  8898                           
  8899                           ;UI.c: 228: change_state_to_menu_23();
  8900  00109C  ECB0  F012         	call	_change_state_to_menu_23	;wreg free
  8901                           
  8902                           ;UI.c: 229: }
  8903                           ;UI.c: 230: break;
  8904  0010A0  D0D5               	goto	i2l387
  8905  0010A2                     i2l5345:
  8906                           
  8907                           ;UI.c: 233: if(up){
  8908  0010A2  5073               	movf	_up,w,c
  8909  0010A4  1074               	iorwf	_up+1,w,c
  8910  0010A6  B4D8               	btfsc	status,2,c
  8911  0010A8  D003               	goto	i2l5349
  8912                           
  8913                           ;UI.c: 234: change_state_to_logs_11();
  8914  0010AA  EC40  F013         	call	_change_state_to_logs_11	;wreg free
  8915                           
  8916                           ;UI.c: 235: }
  8917  0010AE  D0CE               	goto	i2l387
  8918  0010B0                     i2l5349:
  8919                           
  8920                           ;UI.c: 236: else if(down){
  8921  0010B0  5065               	movf	_down,w,c
  8922  0010B2  1066               	iorwf	_down+1,w,c
  8923  0010B4  B4D8               	btfsc	status,2,c
  8924  0010B6  D003               	goto	i2l5353
  8925                           
  8926                           ;UI.c: 237: change_state_to_logs_23();
  8927  0010B8  EC86  F013         	call	_change_state_to_logs_23	;wreg free
  8928                           
  8929                           ;UI.c: 238: }
  8930  0010BC  D0C7               	goto	i2l387
  8931  0010BE                     i2l5353:
  8932                           
  8933                           ;UI.c: 239: else if(enter){
  8934  0010BE  5067               	movf	_enter,w,c
  8935  0010C0  1068               	iorwf	_enter+1,w,c
  8936  0010C2  B4D8               	btfsc	status,2,c
  8937  0010C4  D007               	goto	i2l5357
  8938                           
  8939                           ;UI.c: 240: dispLogs(2);
  8940  0010C6  0E00               	movlw	0
  8941  0010C8  6E02               	movwf	dispLogs@myLog+1,c
  8942  0010CA  0E02               	movlw	2
  8943  0010CC  6E01               	movwf	dispLogs@myLog,c
  8944  0010CE  EC55  F014         	call	_dispLogs	;wreg free
  8945                           
  8946                           ;UI.c: 241: }
  8947  0010D2  D0BC               	goto	i2l387
  8948  0010D4                     i2l5357:
  8949                           
  8950                           ;UI.c: 242: else if(back){
  8951  0010D4  505D               	movf	_back,w,c
  8952  0010D6  105E               	iorwf	_back+1,w,c
  8953  0010D8  B4D8               	btfsc	status,2,c
  8954  0010DA  D0B8               	goto	i2l387
  8955                           
  8956                           ;UI.c: 243: change_state_to_menu_23();
  8957  0010DC  ECB0  F012         	call	_change_state_to_menu_23	;wreg free
  8958                           
  8959                           ;UI.c: 244: }
  8960                           ;UI.c: 245: break;
  8961  0010E0  D0B5               	goto	i2l387
  8962  0010E2                     i2l5361:
  8963                           
  8964                           ;UI.c: 248: if(up){
  8965  0010E2  5073               	movf	_up,w,c
  8966  0010E4  1074               	iorwf	_up+1,w,c
  8967  0010E6  B4D8               	btfsc	status,2,c
  8968  0010E8  D003               	goto	i2l5365
  8969                           
  8970                           ;UI.c: 249: change_state_to_logs_11();
  8971  0010EA  EC40  F013         	call	_change_state_to_logs_11	;wreg free
  8972                           
  8973                           ;UI.c: 250: }
  8974  0010EE  D0AE               	goto	i2l387
  8975  0010F0                     i2l5365:
  8976                           
  8977                           ;UI.c: 251: else if(down){
  8978  0010F0  5065               	movf	_down,w,c
  8979  0010F2  1066               	iorwf	_down+1,w,c
  8980  0010F4  B4D8               	btfsc	status,2,c
  8981  0010F6  D003               	goto	i2l5369
  8982                           
  8983                           ;UI.c: 252: change_state_to_logs_23();
  8984  0010F8  EC86  F013         	call	_change_state_to_logs_23	;wreg free
  8985                           
  8986                           ;UI.c: 253: }
  8987  0010FC  D0A7               	goto	i2l387
  8988  0010FE                     i2l5369:
  8989                           
  8990                           ;UI.c: 254: else if(enter){
  8991  0010FE  5067               	movf	_enter,w,c
  8992  001100  1068               	iorwf	_enter+1,w,c
  8993  001102  B4D8               	btfsc	status,2,c
  8994  001104  D007               	goto	i2l5373
  8995                           
  8996                           ;UI.c: 255: dispLogs(2);
  8997  001106  0E00               	movlw	0
  8998  001108  6E02               	movwf	dispLogs@myLog+1,c
  8999  00110A  0E02               	movlw	2
  9000  00110C  6E01               	movwf	dispLogs@myLog,c
  9001  00110E  EC55  F014         	call	_dispLogs	;wreg free
  9002                           
  9003                           ;UI.c: 256: }
  9004  001112  D09C               	goto	i2l387
  9005  001114                     i2l5373:
  9006                           
  9007                           ;UI.c: 257: else if(back){
  9008  001114  505D               	movf	_back,w,c
  9009  001116  105E               	iorwf	_back+1,w,c
  9010  001118  B4D8               	btfsc	status,2,c
  9011  00111A  D098               	goto	i2l387
  9012                           
  9013                           ;UI.c: 258: change_state_to_menu_23();
  9014  00111C  ECB0  F012         	call	_change_state_to_menu_23	;wreg free
  9015                           
  9016                           ;UI.c: 259: }
  9017                           ;UI.c: 260: break;
  9018  001120  D095               	goto	i2l387
  9019  001122                     i2l5377:
  9020                           
  9021                           ;UI.c: 263: if(up){
  9022  001122  5073               	movf	_up,w,c
  9023  001124  1074               	iorwf	_up+1,w,c
  9024  001126  B4D8               	btfsc	status,2,c
  9025  001128  D003               	goto	i2l5381
  9026                           
  9027                           ;UI.c: 264: change_state_to_logs_22();
  9028  00112A  EC10  F013         	call	_change_state_to_logs_22	;wreg free
  9029                           
  9030                           ;UI.c: 265: }
  9031  00112E  D08E               	goto	i2l387
  9032  001130                     i2l5381:
  9033                           
  9034                           ;UI.c: 266: else if(down){
  9035  001130  5065               	movf	_down,w,c
  9036  001132  1066               	iorwf	_down+1,w,c
  9037  001134  B4D8               	btfsc	status,2,c
  9038  001136  D003               	goto	i2l5385
  9039                           
  9040                           ;UI.c: 267: change_state_to_logs_34();
  9041  001138  ECE0  F012         	call	_change_state_to_logs_34	;wreg free
  9042                           
  9043                           ;UI.c: 268: }
  9044  00113C  D087               	goto	i2l387
  9045  00113E                     i2l5385:
  9046                           
  9047                           ;UI.c: 269: else if(enter){
  9048  00113E  5067               	movf	_enter,w,c
  9049  001140  1068               	iorwf	_enter+1,w,c
  9050  001142  B4D8               	btfsc	status,2,c
  9051  001144  D007               	goto	i2l5389
  9052                           
  9053                           ;UI.c: 270: dispLogs(3);
  9054  001146  0E00               	movlw	0
  9055  001148  6E02               	movwf	dispLogs@myLog+1,c
  9056  00114A  0E03               	movlw	3
  9057  00114C  6E01               	movwf	dispLogs@myLog,c
  9058  00114E  EC55  F014         	call	_dispLogs	;wreg free
  9059                           
  9060                           ;UI.c: 271: }
  9061  001152  D07C               	goto	i2l387
  9062  001154                     i2l5389:
  9063                           
  9064                           ;UI.c: 272: else if(back){
  9065  001154  505D               	movf	_back,w,c
  9066  001156  105E               	iorwf	_back+1,w,c
  9067  001158  B4D8               	btfsc	status,2,c
  9068  00115A  D078               	goto	i2l387
  9069                           
  9070                           ;UI.c: 273: change_state_to_menu_23();
  9071  00115C  ECB0  F012         	call	_change_state_to_menu_23	;wreg free
  9072                           
  9073                           ;UI.c: 274: }
  9074                           ;UI.c: 275: break;
  9075  001160  D075               	goto	i2l387
  9076  001162                     i2l5393:
  9077                           
  9078                           ;UI.c: 278: if(up){
  9079  001162  5073               	movf	_up,w,c
  9080  001164  1074               	iorwf	_up+1,w,c
  9081  001166  B4D8               	btfsc	status,2,c
  9082  001168  D003               	goto	i2l5397
  9083                           
  9084                           ;UI.c: 279: change_state_to_logs_22();
  9085  00116A  EC10  F013         	call	_change_state_to_logs_22	;wreg free
  9086                           
  9087                           ;UI.c: 280: }
  9088  00116E  D06E               	goto	i2l387
  9089  001170                     i2l5397:
  9090                           
  9091                           ;UI.c: 281: else if(down){
  9092  001170  5065               	movf	_down,w,c
  9093  001172  1066               	iorwf	_down+1,w,c
  9094  001174  B4D8               	btfsc	status,2,c
  9095  001176  D003               	goto	i2l5401
  9096                           
  9097                           ;UI.c: 282: change_state_to_logs_34();
  9098  001178  ECE0  F012         	call	_change_state_to_logs_34	;wreg free
  9099                           
  9100                           ;UI.c: 283: }
  9101  00117C  D067               	goto	i2l387
  9102  00117E                     i2l5401:
  9103                           
  9104                           ;UI.c: 284: else if(enter){
  9105  00117E  5067               	movf	_enter,w,c
  9106  001180  1068               	iorwf	_enter+1,w,c
  9107  001182  B4D8               	btfsc	status,2,c
  9108  001184  D007               	goto	i2l5405
  9109                           
  9110                           ;UI.c: 285: dispLogs(3);
  9111  001186  0E00               	movlw	0
  9112  001188  6E02               	movwf	dispLogs@myLog+1,c
  9113  00118A  0E03               	movlw	3
  9114  00118C  6E01               	movwf	dispLogs@myLog,c
  9115  00118E  EC55  F014         	call	_dispLogs	;wreg free
  9116                           
  9117                           ;UI.c: 286: }
  9118  001192  D05C               	goto	i2l387
  9119  001194                     i2l5405:
  9120                           
  9121                           ;UI.c: 287: else if(back){
  9122  001194  505D               	movf	_back,w,c
  9123  001196  105E               	iorwf	_back+1,w,c
  9124  001198  B4D8               	btfsc	status,2,c
  9125  00119A  D058               	goto	i2l387
  9126                           
  9127                           ;UI.c: 288: change_state_to_menu_23();
  9128  00119C  ECB0  F012         	call	_change_state_to_menu_23	;wreg free
  9129                           
  9130                           ;UI.c: 289: }
  9131                           ;UI.c: 290: break;
  9132  0011A0  D055               	goto	i2l387
  9133  0011A2                     i2l5409:
  9134                           
  9135                           ;UI.c: 293: if(up){
  9136  0011A2  5073               	movf	_up,w,c
  9137  0011A4  1074               	iorwf	_up+1,w,c
  9138  0011A6  B4D8               	btfsc	status,2,c
  9139  0011A8  D003               	goto	i2l5413
  9140                           
  9141                           ;UI.c: 294: change_state_to_logs_33();
  9142  0011AA  ECF8  F012         	call	_change_state_to_logs_33	;wreg free
  9143                           
  9144                           ;UI.c: 295: }
  9145  0011AE  D04E               	goto	i2l387
  9146  0011B0                     i2l5413:
  9147                           
  9148                           ;UI.c: 296: else if(down){
  9149  0011B0  5065               	movf	_down,w,c
  9150  0011B2  1066               	iorwf	_down+1,w,c
  9151  0011B4  B4D8               	btfsc	status,2,c
  9152  0011B6  D003               	goto	i2l5417
  9153                           
  9154                           ;UI.c: 297: change_state_to_logs_11();
  9155  0011B8  EC40  F013         	call	_change_state_to_logs_11	;wreg free
  9156                           
  9157                           ;UI.c: 298: }
  9158  0011BC  D047               	goto	i2l387
  9159  0011BE                     i2l5417:
  9160                           
  9161                           ;UI.c: 299: else if(enter){
  9162  0011BE  5067               	movf	_enter,w,c
  9163  0011C0  1068               	iorwf	_enter+1,w,c
  9164  0011C2  B4D8               	btfsc	status,2,c
  9165  0011C4  D007               	goto	i2l5421
  9166                           
  9167                           ;UI.c: 300: dispLogs(4);
  9168  0011C6  0E00               	movlw	0
  9169  0011C8  6E02               	movwf	dispLogs@myLog+1,c
  9170  0011CA  0E04               	movlw	4
  9171  0011CC  6E01               	movwf	dispLogs@myLog,c
  9172  0011CE  EC55  F014         	call	_dispLogs	;wreg free
  9173                           
  9174                           ;UI.c: 301: }
  9175  0011D2  D03C               	goto	i2l387
  9176  0011D4                     i2l5421:
  9177                           
  9178                           ;UI.c: 302: else if(back){
  9179  0011D4  505D               	movf	_back,w,c
  9180  0011D6  105E               	iorwf	_back+1,w,c
  9181  0011D8  B4D8               	btfsc	status,2,c
  9182  0011DA  D038               	goto	i2l387
  9183                           
  9184                           ;UI.c: 303: change_state_to_menu_23();
  9185  0011DC  ECB0  F012         	call	_change_state_to_menu_23	;wreg free
  9186                           
  9187                           ;UI.c: 309: }
  9188                           
  9189                           ;UI.c: 308: break;
  9190                           
  9191                           ;UI.c: 307: default:
  9192                           
  9193                           ;UI.c: 304: }
  9194                           ;UI.c: 305: break;
  9195  0011E0  D035               	goto	i2l387
  9196  0011E2                     i2l5427:
  9197  0011E2  C0DF  F043         	movff	_cur_state,??_updateMenu
  9198  0011E6  C0E0  F044         	movff	_cur_state+1,??_updateMenu+1
  9199                           
  9200                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 3 sub-sw
      +                          itches
  9201                           ; Switch size 1, requested type "space"
  9202                           ; Number of cases is 3, Range of values is 0 to 4
  9203                           ; switch strategies available:
  9204                           ; Name         Instructions Cycles
  9205                           ; simple_byte           10     6 (average)
  9206                           ;	Chosen strategy is simple_byte
  9207  0011EA  5044               	movf	??_updateMenu+1,w,c
  9208  0011EC  0A00               	xorlw	0	; case 0
  9209  0011EE  B4D8               	btfsc	status,2,c
  9210  0011F0  D007               	goto	i2l5781
  9211  0011F2  0A03               	xorlw	3	; case 3
  9212  0011F4  B4D8               	btfsc	status,2,c
  9213  0011F6  D015               	goto	i2l5783
  9214  0011F8  0A07               	xorlw	7	; case 4
  9215  0011FA  B4D8               	btfsc	status,2,c
  9216  0011FC  D020               	goto	i2l5785
  9217  0011FE  D026               	goto	i2l387
  9218  001200                     i2l5781:
  9219                           
  9220                           ; Switch size 1, requested type "space"
  9221                           ; Number of cases is 5, Range of values is 0 to 23
  9222                           ; switch strategies available:
  9223                           ; Name         Instructions Cycles
  9224                           ; simple_byte           16     9 (average)
  9225                           ;	Chosen strategy is simple_byte
  9226  001200  5043               	movf	??_updateMenu,w,c
  9227  001202  0A00               	xorlw	0	; case 0
  9228  001204  B4D8               	btfsc	status,2,c
  9229  001206  D6DC               	goto	i2l5279
  9230  001208  0A0B               	xorlw	11	; case 11
  9231  00120A  B4D8               	btfsc	status,2,c
  9232  00120C  D6DC               	goto	i2l5281
  9233  00120E  0A07               	xorlw	7	; case 12
  9234  001210  B4D8               	btfsc	status,2,c
  9235  001212  D6EE               	goto	i2l5293
  9236  001214  0A1A               	xorlw	26	; case 22
  9237  001216  B4D8               	btfsc	status,2,c
  9238  001218  D6F9               	goto	i2l5305
  9239  00121A  0A01               	xorlw	1	; case 23
  9240  00121C  B4D8               	btfsc	status,2,c
  9241  00121E  D70C               	goto	i2l5317
  9242  001220  D015               	goto	i2l387
  9243  001222                     i2l5783:
  9244                           
  9245                           ; Switch size 1, requested type "space"
  9246                           ; Number of cases is 4, Range of values is 243 to 255
  9247                           ; switch strategies available:
  9248                           ; Name         Instructions Cycles
  9249                           ; simple_byte           13     7 (average)
  9250                           ;	Chosen strategy is simple_byte
  9251  001222  5043               	movf	??_updateMenu,w,c
  9252  001224  0AF3               	xorlw	243	; case 243
  9253  001226  B4D8               	btfsc	status,2,c
  9254  001228  D71C               	goto	i2l5329
  9255  00122A  0A07               	xorlw	7	; case 244
  9256  00122C  B4D8               	btfsc	status,2,c
  9257  00122E  D739               	goto	i2l5345
  9258  001230  0A0A               	xorlw	10	; case 254
  9259  001232  B4D8               	btfsc	status,2,c
  9260  001234  D756               	goto	i2l5361
  9261  001236  0A01               	xorlw	1	; case 255
  9262  001238  B4D8               	btfsc	status,2,c
  9263  00123A  D773               	goto	i2l5377
  9264  00123C  D007               	goto	i2l387
  9265  00123E                     i2l5785:
  9266                           
  9267                           ; Switch size 1, requested type "space"
  9268                           ; Number of cases is 2, Range of values is 9 to 10
  9269                           ; switch strategies available:
  9270                           ; Name         Instructions Cycles
  9271                           ; simple_byte            7     4 (average)
  9272                           ;	Chosen strategy is simple_byte
  9273  00123E  5043               	movf	??_updateMenu,w,c
  9274  001240  0A09               	xorlw	9	; case 9
  9275  001242  B4D8               	btfsc	status,2,c
  9276  001244  D78E               	goto	i2l5393
  9277  001246  0A03               	xorlw	3	; case 10
  9278  001248  B4D8               	btfsc	status,2,c
  9279  00124A  D7AB               	goto	i2l5409
  9280  00124C                     i2l387:
  9281                           
  9282                           ;UI.c: 310: }
  9283                           ;UI.c: 311: (INTCONbits.GIE = 1);
  9284  00124C  8EF2               	bsf	intcon,7,c	;volatile
  9285  00124E  0012               	return		;funcret
  9286  001250                     __end_of_updateMenu:
  9287                           	opt stack 0
  9288                           pclatu	equ	0xFFB
  9289                           pclath	equ	0xFFA
  9290                           tblptru	equ	0xFF8
  9291                           tblptrh	equ	0xFF7
  9292                           tblptrl	equ	0xFF6
  9293                           tablat	equ	0xFF5
  9294                           prodh	equ	0xFF4
  9295                           prodl	equ	0xFF3
  9296                           intcon	equ	0xFF2
  9297                           intcon3	equ	0xFF0
  9298                           indf0	equ	0xFEF
  9299                           postinc0	equ	0xFEE
  9300                           fsr0h	equ	0xFEA
  9301                           fsr0l	equ	0xFE9
  9302                           wreg	equ	0xFE8
  9303                           postdec1	equ	0xFE5
  9304                           fsr1h	equ	0xFE2
  9305                           fsr1l	equ	0xFE1
  9306                           indf2	equ	0xFDF
  9307                           postinc2	equ	0xFDE
  9308                           postdec2	equ	0xFDD
  9309                           fsr2h	equ	0xFDA
  9310                           fsr2l	equ	0xFD9
  9311                           status	equ	0xFD8
  9312                           
  9313 ;; *************** function i2_change_state_to_menu_start *****************
  9314 ;; Defined at:
  9315 ;;		line 415 in file "UI.c"
  9316 ;; Parameters:    Size  Location     Type
  9317 ;;		None
  9318 ;; Auto vars:     Size  Location     Type
  9319 ;;		None
  9320 ;; Return value:  Size  Location     Type
  9321 ;;                  1    wreg      void 
  9322 ;; Registers used:
  9323 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9324 ;; Tracked objects:
  9325 ;;		On entry : 0/0
  9326 ;;		On exit  : 0/0
  9327 ;;		Unchanged: 0/0
  9328 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9329 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9330 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9331 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9332 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9333 ;;Total ram usage:        0 bytes
  9334 ;; Hardware stack levels used:    1
  9335 ;; Hardware stack levels required when called:    4
  9336 ;; This function calls:
  9337 ;;		i2_lcdInst
  9338 ;;		i2_printRTC
  9339 ;;		i2_printf
  9340 ;; This function is called by:
  9341 ;;		_updateMenu
  9342 ;; This function uses a non-reentrant model
  9343 ;;
  9344                           
  9345                           	psect	text42
  9346  002790                     __ptext42:
  9347                           	opt stack 0
  9348  002790                     i2_change_state_to_menu_start:
  9349                           	opt stack 18
  9350                           
  9351                           ;UI.c: 416: cur_state = 0;
  9352                           
  9353                           ;incstack = 0
  9354  002790  0E00               	movlw	0
  9355  002792  0100               	movlb	0	; () banked
  9356  002794  6FE0               	movwf	(_cur_state+1)& (0+255),b
  9357  002796  0E00               	movlw	0
  9358  002798  6FDF               	movwf	_cur_state& (0+255),b
  9359                           
  9360                           ; BSR set to: 0
  9361                           ;UI.c: 418: lcdInst(0b10000000);;
  9362  00279A  0E80               	movlw	128
  9363  00279C  EC8D  F014         	call	i2_lcdInst
  9364                           
  9365                           ;UI.c: 419: printRTC();
  9366  0027A0  EC28  F009         	call	i2_printRTC	;wreg free
  9367                           
  9368                           ;UI.c: 420: lcdInst(0b11000000);;
  9369  0027A4  0EC0               	movlw	192
  9370  0027A6  EC8D  F014         	call	i2_lcdInst
  9371                           
  9372                           ;UI.c: 421: printf("PUSH TO CONTINUE");
  9373  0027AA  0E97               	movlw	low STR_15
  9374  0027AC  6E0D               	movwf	i2printf@f,c
  9375  0027AE  0EFF               	movlw	high STR_15
  9376  0027B0  6E0E               	movwf	i2printf@f+1,c
  9377  0027B2  ECC0  F004         	call	i2_printf	;wreg free
  9378  0027B6  0012               	return		;funcret
  9379  0027B8                     __end_ofi2_change_state_to_menu_start:
  9380                           	opt stack 0
  9381                           pclatu	equ	0xFFB
  9382                           pclath	equ	0xFFA
  9383                           tblptru	equ	0xFF8
  9384                           tblptrh	equ	0xFF7
  9385                           tblptrl	equ	0xFF6
  9386                           tablat	equ	0xFF5
  9387                           prodh	equ	0xFF4
  9388                           prodl	equ	0xFF3
  9389                           intcon	equ	0xFF2
  9390                           intcon3	equ	0xFF0
  9391                           indf0	equ	0xFEF
  9392                           postinc0	equ	0xFEE
  9393                           fsr0h	equ	0xFEA
  9394                           fsr0l	equ	0xFE9
  9395                           wreg	equ	0xFE8
  9396                           postdec1	equ	0xFE5
  9397                           fsr1h	equ	0xFE2
  9398                           fsr1l	equ	0xFE1
  9399                           indf2	equ	0xFDF
  9400                           postinc2	equ	0xFDE
  9401                           postdec2	equ	0xFDD
  9402                           fsr2h	equ	0xFDA
  9403                           fsr2l	equ	0xFD9
  9404                           status	equ	0xFD8
  9405                           
  9406 ;; *************** function i2_printRTC *****************
  9407 ;; Defined at:
  9408 ;;		line 61 in file "RTC.c"
  9409 ;; Parameters:    Size  Location     Type
  9410 ;;		None
  9411 ;; Auto vars:     Size  Location     Type
  9412 ;;  printRTC       14   44[COMRAM] int [7]
  9413 ;;  printRTC        4   60[COMRAM] unsigned char [4]
  9414 ;;  printRTC        2   64[COMRAM] int 
  9415 ;;  printRTC        2   58[COMRAM] int 
  9416 ;; Return value:  Size  Location     Type
  9417 ;;                  1    wreg      void 
  9418 ;; Registers used:
  9419 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9420 ;; Tracked objects:
  9421 ;;		On entry : 0/0
  9422 ;;		On exit  : 0/0
  9423 ;;		Unchanged: 0/0
  9424 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9425 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9426 ;;      Locals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9427 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9428 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9429 ;;Total ram usage:       25 bytes
  9430 ;; Hardware stack levels used:    1
  9431 ;; Hardware stack levels required when called:    3
  9432 ;; This function calls:
  9433 ;;		i2_getRTC
  9434 ;;		i2_lcdInst
  9435 ;;		i2_printf
  9436 ;;		i2_strcpy
  9437 ;; This function is called by:
  9438 ;;		i2_change_state_to_menu_start
  9439 ;; This function uses a non-reentrant model
  9440 ;;
  9441                           
  9442                           	psect	text43
  9443  001250                     __ptext43:
  9444                           	opt stack 0
  9445  001250                     i2_printRTC:
  9446                           	opt stack 18
  9447                           
  9448                           ;RTC.c: 62: getRTC();
  9449                           
  9450                           ;incstack = 0
  9451  001250  EC0D  F010         	call	i2_getRTC	;wreg free
  9452                           
  9453                           ;RTC.c: 63: char month[] = "MMM";
  9454  001254  C0F2  F03D         	movff	printRTC@F3188,i2printRTC@month
  9455  001258  C0F3  F03E         	movff	printRTC@F3188+1,i2printRTC@month+1
  9456  00125C  C0F4  F03F         	movff	printRTC@F3188+2,i2printRTC@month+2
  9457  001260  C0F5  F040         	movff	printRTC@F3188+3,i2printRTC@month+3
  9458                           
  9459                           ;RTC.c: 64: int INT_time[7];
  9460                           ;RTC.c: 65: for(int i = 0; i < 7; i++){
  9461  001264  0E00               	movlw	0
  9462  001266  6E42               	movwf	i2printRTC@i+1,c
  9463  001268  0E00               	movlw	0
  9464  00126A  6E41               	movwf	i2printRTC@i,c
  9465  00126C  BE42               	btfsc	i2printRTC@i+1,7,c
  9466  00126E  D006               	goto	i2l4587
  9467  001270  5042               	movf	i2printRTC@i+1,w,c
  9468  001272  E135               	bnz	i2l878
  9469  001274  0E07               	movlw	7
  9470  001276  5C41               	subwf	i2printRTC@i,w,c
  9471  001278  B0D8               	btfsc	status,0,c
  9472  00127A  D031               	goto	i2l878
  9473  00127C                     i2l4587:
  9474                           
  9475                           ;RTC.c: 66: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  9476  00127C  0ED4               	movlw	low _time
  9477  00127E  2441               	addwf	i2printRTC@i,w,c
  9478  001280  6ED9               	movwf	fsr2l,c
  9479  001282  0E00               	movlw	high _time
  9480  001284  2042               	addwfc	i2printRTC@i+1,w,c
  9481  001286  6EDA               	movwf	fsr2h,c
  9482  001288  50DF               	movf	indf2,w,c
  9483  00128A  6E2A               	movwf	??i2_printRTC& (0+255),c
  9484  00128C  3A2A               	swapf	??i2_printRTC,f,c
  9485  00128E  0E0F               	movlw	15
  9486  001290  162A               	andwf	??i2_printRTC,f,c
  9487  001292  0E0F               	movlw	15
  9488  001294  162A               	andwf	??i2_printRTC,f,c
  9489  001296  502A               	movf	??i2_printRTC,w,c
  9490  001298  0D0A               	mullw	10
  9491  00129A  0ED4               	movlw	low _time
  9492  00129C  2441               	addwf	i2printRTC@i,w,c
  9493  00129E  6ED9               	movwf	fsr2l,c
  9494  0012A0  0E00               	movlw	high _time
  9495  0012A2  2042               	addwfc	i2printRTC@i+1,w,c
  9496  0012A4  6EDA               	movwf	fsr2h,c
  9497  0012A6  50DF               	movf	indf2,w,c
  9498  0012A8  0B0F               	andlw	15
  9499  0012AA  6E2B               	movwf	(??i2_printRTC+1)& (0+255),c
  9500  0012AC  6A2C               	clrf	(??i2_printRTC+2)& (0+255),c
  9501  0012AE  50F3               	movf	prodl,w,c
  9502  0012B0  262B               	addwf	??i2_printRTC+1,f,c
  9503  0012B2  50F4               	movf	prodh,w,c
  9504  0012B4  222C               	addwfc	??i2_printRTC+2,f,c
  9505  0012B6  90D8               	bcf	status,0,c
  9506  0012B8  3441               	rlcf	i2printRTC@i,w,c
  9507  0012BA  6ED9               	movwf	fsr2l,c
  9508  0012BC  3442               	rlcf	i2printRTC@i+1,w,c
  9509  0012BE  6EDA               	movwf	fsr2h,c
  9510  0012C0  0E2D               	movlw	low i2printRTC@INT_time
  9511  0012C2  26D9               	addwf	fsr2l,f,c
  9512  0012C4  0E00               	movlw	high i2printRTC@INT_time
  9513  0012C6  22DA               	addwfc	fsr2h,f,c
  9514  0012C8  C02B  FFDE         	movff	??i2_printRTC+1,postinc2
  9515  0012CC  C02C  FFDD         	movff	??i2_printRTC+2,postdec2
  9516  0012D0  4A41               	infsnz	i2printRTC@i,f,c
  9517  0012D2  2A42               	incf	i2printRTC@i+1,f,c
  9518  0012D4  BE42               	btfsc	i2printRTC@i+1,7,c
  9519  0012D6  D7D2               	goto	i2l4587
  9520  0012D8  5042               	movf	i2printRTC@i+1,w,c
  9521  0012DA  E101               	bnz	i2u322_40
  9522  0012DC  D7CB               	goto	L7
  9523  0012DE                     i2u322_40:
  9524  0012DE                     i2l878:
  9525                           
  9526                           ;RTC.c: 67: }
  9527                           ;RTC.c: 68: int RTC_month = INT_time[5];
  9528  0012DE  C037  F03B         	movff	i2printRTC@INT_time+10,i2printRTC@RTC_month
  9529  0012E2  C038  F03C         	movff	i2printRTC@INT_time+11,i2printRTC@RTC_month+1
  9530                           
  9531                           ;RTC.c: 69: switch(RTC_month){
  9532  0012E6  D084               	goto	i2l4619
  9533  0012E8                     i2l4593:
  9534                           
  9535                           ;RTC.c: 71: strcpy(month, "Jan");
  9536  0012E8  0E3D               	movlw	low i2printRTC@month
  9537  0012EA  6E01               	movwf	i2strcpy@to,c
  9538  0012EC  0E00               	movlw	high i2printRTC@month
  9539  0012EE  6E02               	movwf	i2strcpy@to+1,c
  9540  0012F0  0EDB               	movlw	low STR_36
  9541  0012F2  6E03               	movwf	i2strcpy@from,c
  9542  0012F4  0EFF               	movlw	high STR_36
  9543  0012F6  6E04               	movwf	i2strcpy@from+1,c
  9544  0012F8  EC67  F012         	call	i2_strcpy	;wreg free
  9545                           
  9546                           ;RTC.c: 72: break;
  9547  0012FC  D0A6               	goto	i2l4621
  9548  0012FE                     i2l4595:
  9549                           
  9550                           ;RTC.c: 74: strcpy(month, "Feb");
  9551  0012FE  0E3D               	movlw	low i2printRTC@month
  9552  001300  6E01               	movwf	i2strcpy@to,c
  9553  001302  0E00               	movlw	high i2printRTC@month
  9554  001304  6E02               	movwf	i2strcpy@to+1,c
  9555  001306  0ECB               	movlw	low STR_37
  9556  001308  6E03               	movwf	i2strcpy@from,c
  9557  00130A  0EFF               	movlw	high STR_37
  9558  00130C  6E04               	movwf	i2strcpy@from+1,c
  9559  00130E  EC67  F012         	call	i2_strcpy	;wreg free
  9560                           
  9561                           ;RTC.c: 75: break;
  9562  001312  D09B               	goto	i2l4621
  9563  001314                     i2l4597:
  9564                           
  9565                           ;RTC.c: 77: strcpy(month, "Mar");
  9566  001314  0E3D               	movlw	low i2printRTC@month
  9567  001316  6E01               	movwf	i2strcpy@to,c
  9568  001318  0E00               	movlw	high i2printRTC@month
  9569  00131A  6E02               	movwf	i2strcpy@to+1,c
  9570  00131C  0EE7               	movlw	low STR_38
  9571  00131E  6E03               	movwf	i2strcpy@from,c
  9572  001320  0EFF               	movlw	high STR_38
  9573  001322  6E04               	movwf	i2strcpy@from+1,c
  9574  001324  EC67  F012         	call	i2_strcpy	;wreg free
  9575                           
  9576                           ;RTC.c: 78: break;
  9577  001328  D090               	goto	i2l4621
  9578  00132A                     i2l4599:
  9579                           
  9580                           ;RTC.c: 80: strcpy(month, "Apr");
  9581  00132A  0E3D               	movlw	low i2printRTC@month
  9582  00132C  6E01               	movwf	i2strcpy@to,c
  9583  00132E  0E00               	movlw	high i2printRTC@month
  9584  001330  6E02               	movwf	i2strcpy@to+1,c
  9585  001332  0EEB               	movlw	low STR_39
  9586  001334  6E03               	movwf	i2strcpy@from,c
  9587  001336  0EFF               	movlw	high STR_39
  9588  001338  6E04               	movwf	i2strcpy@from+1,c
  9589  00133A  EC67  F012         	call	i2_strcpy	;wreg free
  9590                           
  9591                           ;RTC.c: 81: break;
  9592  00133E  D085               	goto	i2l4621
  9593  001340                     i2l4601:
  9594                           
  9595                           ;RTC.c: 83: strcpy(month, "May");
  9596  001340  0E3D               	movlw	low i2printRTC@month
  9597  001342  6E01               	movwf	i2strcpy@to,c
  9598  001344  0E00               	movlw	high i2printRTC@month
  9599  001346  6E02               	movwf	i2strcpy@to+1,c
  9600  001348  0EF7               	movlw	low STR_40
  9601  00134A  6E03               	movwf	i2strcpy@from,c
  9602  00134C  0EFF               	movlw	high STR_40
  9603  00134E  6E04               	movwf	i2strcpy@from+1,c
  9604  001350  EC67  F012         	call	i2_strcpy	;wreg free
  9605                           
  9606                           ;RTC.c: 84: break;
  9607  001354  D07A               	goto	i2l4621
  9608  001356                     i2l4603:
  9609                           
  9610                           ;RTC.c: 86: strcpy(month, "Jun");
  9611  001356  0E3D               	movlw	low i2printRTC@month
  9612  001358  6E01               	movwf	i2strcpy@to,c
  9613  00135A  0E00               	movlw	high i2printRTC@month
  9614  00135C  6E02               	movwf	i2strcpy@to+1,c
  9615  00135E  0EDF               	movlw	low STR_41
  9616  001360  6E03               	movwf	i2strcpy@from,c
  9617  001362  0EFF               	movlw	high STR_41
  9618  001364  6E04               	movwf	i2strcpy@from+1,c
  9619  001366  EC67  F012         	call	i2_strcpy	;wreg free
  9620                           
  9621                           ;RTC.c: 87: break;
  9622  00136A  D06F               	goto	i2l4621
  9623  00136C                     i2l4605:
  9624                           
  9625                           ;RTC.c: 89: strcpy(month, "Jul");
  9626  00136C  0E3D               	movlw	low i2printRTC@month
  9627  00136E  6E01               	movwf	i2strcpy@to,c
  9628  001370  0E00               	movlw	high i2printRTC@month
  9629  001372  6E02               	movwf	i2strcpy@to+1,c
  9630  001374  0ED7               	movlw	low STR_42
  9631  001376  6E03               	movwf	i2strcpy@from,c
  9632  001378  0EFF               	movlw	high STR_42
  9633  00137A  6E04               	movwf	i2strcpy@from+1,c
  9634  00137C  EC67  F012         	call	i2_strcpy	;wreg free
  9635                           
  9636                           ;RTC.c: 90: break;
  9637  001380  D064               	goto	i2l4621
  9638  001382                     i2l4607:
  9639                           
  9640                           ;RTC.c: 92: strcpy(month, "Aug");
  9641  001382  0E3D               	movlw	low i2printRTC@month
  9642  001384  6E01               	movwf	i2strcpy@to,c
  9643  001386  0E00               	movlw	high i2printRTC@month
  9644  001388  6E02               	movwf	i2strcpy@to+1,c
  9645  00138A  0ED3               	movlw	low STR_43
  9646  00138C  6E03               	movwf	i2strcpy@from,c
  9647  00138E  0EFF               	movlw	high STR_43
  9648  001390  6E04               	movwf	i2strcpy@from+1,c
  9649  001392  EC67  F012         	call	i2_strcpy	;wreg free
  9650                           
  9651                           ;RTC.c: 93: break;
  9652  001396  D059               	goto	i2l4621
  9653  001398                     i2l4609:
  9654                           
  9655                           ;RTC.c: 95: strcpy(month, "Sep");
  9656  001398  0E3D               	movlw	low i2printRTC@month
  9657  00139A  6E01               	movwf	i2strcpy@to,c
  9658  00139C  0E00               	movlw	high i2printRTC@month
  9659  00139E  6E02               	movwf	i2strcpy@to+1,c
  9660  0013A0  0EE3               	movlw	low STR_44
  9661  0013A2  6E03               	movwf	i2strcpy@from,c
  9662  0013A4  0EFF               	movlw	high STR_44
  9663  0013A6  6E04               	movwf	i2strcpy@from+1,c
  9664  0013A8  EC67  F012         	call	i2_strcpy	;wreg free
  9665                           
  9666                           ;RTC.c: 96: break;
  9667  0013AC  D04E               	goto	i2l4621
  9668  0013AE                     i2l4611:
  9669                           
  9670                           ;RTC.c: 98: strcpy(month, "Oct");
  9671  0013AE  0E3D               	movlw	low i2printRTC@month
  9672  0013B0  6E01               	movwf	i2strcpy@to,c
  9673  0013B2  0E00               	movlw	high i2printRTC@month
  9674  0013B4  6E02               	movwf	i2strcpy@to+1,c
  9675  0013B6  0EEF               	movlw	low STR_45
  9676  0013B8  6E03               	movwf	i2strcpy@from,c
  9677  0013BA  0EFF               	movlw	high STR_45
  9678  0013BC  6E04               	movwf	i2strcpy@from+1,c
  9679  0013BE  EC67  F012         	call	i2_strcpy	;wreg free
  9680                           
  9681                           ;RTC.c: 99: break;
  9682  0013C2  D043               	goto	i2l4621
  9683  0013C4                     i2l4613:
  9684                           
  9685                           ;RTC.c: 101: strcpy(month, "Nov");
  9686  0013C4  0E3D               	movlw	low i2printRTC@month
  9687  0013C6  6E01               	movwf	i2strcpy@to,c
  9688  0013C8  0E00               	movlw	high i2printRTC@month
  9689  0013CA  6E02               	movwf	i2strcpy@to+1,c
  9690  0013CC  0EF3               	movlw	low STR_46
  9691  0013CE  6E03               	movwf	i2strcpy@from,c
  9692  0013D0  0EFF               	movlw	high STR_46
  9693  0013D2  6E04               	movwf	i2strcpy@from+1,c
  9694  0013D4  EC67  F012         	call	i2_strcpy	;wreg free
  9695                           
  9696                           ;RTC.c: 102: break;
  9697  0013D8  D038               	goto	i2l4621
  9698  0013DA                     i2l4615:
  9699                           
  9700                           ;RTC.c: 104: strcpy(month, "Dec");
  9701  0013DA  0E3D               	movlw	low i2printRTC@month
  9702  0013DC  6E01               	movwf	i2strcpy@to,c
  9703  0013DE  0E00               	movlw	high i2printRTC@month
  9704  0013E0  6E02               	movwf	i2strcpy@to+1,c
  9705  0013E2  0ECF               	movlw	low STR_47
  9706  0013E4  6E03               	movwf	i2strcpy@from,c
  9707  0013E6  0EFF               	movlw	high STR_47
  9708  0013E8  6E04               	movwf	i2strcpy@from+1,c
  9709  0013EA  EC67  F012         	call	i2_strcpy	;wreg free
  9710                           
  9711                           ;RTC.c: 106: }
  9712                           
  9713                           ;RTC.c: 105: break;
  9714  0013EE  D02D               	goto	i2l4621
  9715  0013F0                     i2l4619:
  9716  0013F0  C03B  F02A         	movff	i2printRTC@RTC_month,??i2_printRTC
  9717  0013F4  C03C  F02B         	movff	i2printRTC@RTC_month+1,??i2_printRTC+1
  9718                           
  9719                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9720                           ; Switch size 1, requested type "space"
  9721                           ; Number of cases is 1, Range of values is 0 to 0
  9722                           ; switch strategies available:
  9723                           ; Name         Instructions Cycles
  9724                           ; simple_byte            4     3 (average)
  9725                           ;	Chosen strategy is simple_byte
  9726  0013F8  502B               	movf	??i2_printRTC+1,w,c
  9727  0013FA  0A00               	xorlw	0	; case 0
  9728  0013FC  A4D8               	btfss	status,2,c
  9729  0013FE  D025               	goto	i2l4621
  9730                           
  9731                           ; Switch size 1, requested type "space"
  9732                           ; Number of cases is 12, Range of values is 1 to 12
  9733                           ; switch strategies available:
  9734                           ; Name         Instructions Cycles
  9735                           ; simple_byte           37    19 (average)
  9736                           ;	Chosen strategy is simple_byte
  9737  001400  502A               	movf	??i2_printRTC,w,c
  9738  001402  0A01               	xorlw	1	; case 1
  9739  001404  B4D8               	btfsc	status,2,c
  9740  001406  D770               	goto	i2l4593
  9741  001408  0A03               	xorlw	3	; case 2
  9742  00140A  B4D8               	btfsc	status,2,c
  9743  00140C  D778               	goto	i2l4595
  9744  00140E  0A01               	xorlw	1	; case 3
  9745  001410  B4D8               	btfsc	status,2,c
  9746  001412  D780               	goto	i2l4597
  9747  001414  0A07               	xorlw	7	; case 4
  9748  001416  B4D8               	btfsc	status,2,c
  9749  001418  D788               	goto	i2l4599
  9750  00141A  0A01               	xorlw	1	; case 5
  9751  00141C  B4D8               	btfsc	status,2,c
  9752  00141E  D790               	goto	i2l4601
  9753  001420  0A03               	xorlw	3	; case 6
  9754  001422  B4D8               	btfsc	status,2,c
  9755  001424  D798               	goto	i2l4603
  9756  001426  0A01               	xorlw	1	; case 7
  9757  001428  B4D8               	btfsc	status,2,c
  9758  00142A  D7A0               	goto	i2l4605
  9759  00142C  0A0F               	xorlw	15	; case 8
  9760  00142E  B4D8               	btfsc	status,2,c
  9761  001430  D7A8               	goto	i2l4607
  9762  001432  0A01               	xorlw	1	; case 9
  9763  001434  B4D8               	btfsc	status,2,c
  9764  001436  D7B0               	goto	i2l4609
  9765  001438  0A03               	xorlw	3	; case 10
  9766  00143A  B4D8               	btfsc	status,2,c
  9767  00143C  D7B8               	goto	i2l4611
  9768  00143E  0A01               	xorlw	1	; case 11
  9769  001440  B4D8               	btfsc	status,2,c
  9770  001442  D7C0               	goto	i2l4613
  9771  001444  0A07               	xorlw	7	; case 12
  9772  001446  B4D8               	btfsc	status,2,c
  9773  001448  D7C8               	goto	i2l4615
  9774  00144A                     i2l4621:
  9775                           
  9776                           ;RTC.c: 107: lcdInst(0b10000000);;
  9777  00144A  0E80               	movlw	128
  9778  00144C  EC8D  F014         	call	i2_lcdInst
  9779                           
  9780                           ;RTC.c: 108: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
  9781  001450  0ED0               	movlw	low STR_48
  9782  001452  6E0D               	movwf	i2printf@f,c
  9783  001454  0EFD               	movlw	high STR_48
  9784  001456  6E0E               	movwf	i2printf@f+1,c
  9785  001458  C035  F00F         	movff	i2printRTC@INT_time+8,?i2_printf+2
  9786  00145C  C036  F010         	movff	i2printRTC@INT_time+9,?i2_printf+3
  9787  001460  0E3D               	movlw	low i2printRTC@month
  9788  001462  6E11               	movwf	?i2_printf+4,c
  9789  001464  0E00               	movlw	high i2printRTC@month
  9790  001466  6E12               	movwf	?i2_printf+5,c
  9791  001468  C031  F013         	movff	i2printRTC@INT_time+4,?i2_printf+6
  9792  00146C  C032  F014         	movff	i2printRTC@INT_time+5,?i2_printf+7
  9793  001470  C02F  F015         	movff	i2printRTC@INT_time+2,?i2_printf+8
  9794  001474  C030  F016         	movff	i2printRTC@INT_time+3,?i2_printf+9
  9795  001478  C02D  F017         	movff	i2printRTC@INT_time,?i2_printf+10
  9796  00147C  C02E  F018         	movff	i2printRTC@INT_time+1,?i2_printf+11
  9797  001480  ECC0  F004         	call	i2_printf	;wreg free
  9798  001484  0012               	return		;funcret
  9799  001486                     __end_ofi2_printRTC:
  9800                           	opt stack 0
  9801                           pclatu	equ	0xFFB
  9802                           pclath	equ	0xFFA
  9803                           tblptru	equ	0xFF8
  9804                           tblptrh	equ	0xFF7
  9805                           tblptrl	equ	0xFF6
  9806                           tablat	equ	0xFF5
  9807                           prodh	equ	0xFF4
  9808                           prodl	equ	0xFF3
  9809                           intcon	equ	0xFF2
  9810                           intcon3	equ	0xFF0
  9811                           indf0	equ	0xFEF
  9812                           postinc0	equ	0xFEE
  9813                           fsr0h	equ	0xFEA
  9814                           fsr0l	equ	0xFE9
  9815                           wreg	equ	0xFE8
  9816                           postdec1	equ	0xFE5
  9817                           fsr1h	equ	0xFE2
  9818                           fsr1l	equ	0xFE1
  9819                           indf2	equ	0xFDF
  9820                           postinc2	equ	0xFDE
  9821                           postdec2	equ	0xFDD
  9822                           fsr2h	equ	0xFDA
  9823                           fsr2l	equ	0xFD9
  9824                           status	equ	0xFD8
  9825                           
  9826 ;; *************** function i2_strcpy *****************
  9827 ;; Defined at:
  9828 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
  9829 ;; Parameters:    Size  Location     Type
  9830 ;;  to              2    0[COMRAM] PTR unsigned char 
  9831 ;;		 -> printRTC@month(4), 
  9832 ;;  from            2    2[COMRAM] PTR const unsigned char 
  9833 ;;		 -> STR_47(4), STR_46(4), STR_45(4), STR_44(4), 
  9834 ;;		 -> STR_43(4), STR_42(4), STR_41(4), STR_40(4), 
  9835 ;;		 -> STR_39(4), STR_38(4), STR_37(4), STR_36(4), 
  9836 ;; Auto vars:     Size  Location     Type
  9837 ;;  strcpy          2    4[COMRAM] PTR unsigned char 
  9838 ;;		 -> printRTC@month(4), 
  9839 ;; Return value:  Size  Location     Type
  9840 ;;                  2    0[COMRAM] PTR unsigned char 
  9841 ;; Registers used:
  9842 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  9843 ;; Tracked objects:
  9844 ;;		On entry : 0/0
  9845 ;;		On exit  : 0/0
  9846 ;;		Unchanged: 0/0
  9847 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9848 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9849 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9850 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9851 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9852 ;;Total ram usage:        6 bytes
  9853 ;; Hardware stack levels used:    1
  9854 ;; This function calls:
  9855 ;;		Nothing
  9856 ;; This function is called by:
  9857 ;;		i2_printRTC
  9858 ;; This function uses a non-reentrant model
  9859 ;;
  9860                           
  9861                           	psect	text44
  9862  0024CE                     __ptext44:
  9863                           	opt stack 0
  9864  0024CE                     i2_strcpy:
  9865                           	opt stack 20
  9866                           
  9867                           ;incstack = 0
  9868  0024CE  C001  F005         	movff	i2strcpy@to,i2strcpy@cp
  9869  0024D2  C002  F006         	movff	i2strcpy@to+1,i2strcpy@cp+1
  9870  0024D6  D004               	goto	i2l4363
  9871  0024D8                     i2l4361:
  9872  0024D8  4A05               	infsnz	i2strcpy@cp,f,c
  9873  0024DA  2A06               	incf	i2strcpy@cp+1,f,c
  9874  0024DC  4A03               	infsnz	i2strcpy@from,f,c
  9875  0024DE  2A04               	incf	i2strcpy@from+1,f,c
  9876  0024E0                     i2l4363:
  9877  0024E0  C003  FFF6         	movff	i2strcpy@from,tblptrl
  9878  0024E4  C004  FFF7         	movff	i2strcpy@from+1,tblptrh
  9879  0024E8                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  9880  0024E8  6AF8               	clrf	tblptru,c
  9881  0024EA                     	endif
  9882  0024EA                     	if	0	;tblptru may be non-zero
  9883  0024EA                     	endif
  9884  0024EA  C005  FFD9         	movff	i2strcpy@cp,fsr2l
  9885  0024EE  C006  FFDA         	movff	i2strcpy@cp+1,fsr2h
  9886  0024F2  0008               	tblrd		*
  9887  0024F4  CFF5 FFDF          	movff	tablat,indf2
  9888  0024F8  50DF               	movf	indf2,w,c
  9889  0024FA  B4D8               	btfsc	status,2,c
  9890  0024FC  0012               	return	
  9891  0024FE  D7EC               	goto	i2l4361
  9892  002500                     __end_ofi2_strcpy:
  9893                           	opt stack 0
  9894                           pclatu	equ	0xFFB
  9895                           pclath	equ	0xFFA
  9896                           tblptru	equ	0xFF8
  9897                           tblptrh	equ	0xFF7
  9898                           tblptrl	equ	0xFF6
  9899                           tablat	equ	0xFF5
  9900                           prodh	equ	0xFF4
  9901                           prodl	equ	0xFF3
  9902                           intcon	equ	0xFF2
  9903                           intcon3	equ	0xFF0
  9904                           indf0	equ	0xFEF
  9905                           postinc0	equ	0xFEE
  9906                           fsr0h	equ	0xFEA
  9907                           fsr0l	equ	0xFE9
  9908                           wreg	equ	0xFE8
  9909                           postdec1	equ	0xFE5
  9910                           fsr1h	equ	0xFE2
  9911                           fsr1l	equ	0xFE1
  9912                           indf2	equ	0xFDF
  9913                           postinc2	equ	0xFDE
  9914                           postdec2	equ	0xFDD
  9915                           fsr2h	equ	0xFDA
  9916                           fsr2l	equ	0xFD9
  9917                           status	equ	0xFD8
  9918                           
  9919 ;; *************** function _inputHandler *****************
  9920 ;; Defined at:
  9921 ;;		line 314 in file "UI.c"
  9922 ;; Parameters:    Size  Location     Type
  9923 ;;		None
  9924 ;; Auto vars:     Size  Location     Type
  9925 ;;		None
  9926 ;; Return value:  Size  Location     Type
  9927 ;;                  2   41[COMRAM] int 
  9928 ;; Registers used:
  9929 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9930 ;; Tracked objects:
  9931 ;;		On entry : 0/0
  9932 ;;		On exit  : 0/0
  9933 ;;		Unchanged: 0/0
  9934 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9935 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9936 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9937 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9938 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9939 ;;Total ram usage:        4 bytes
  9940 ;; Hardware stack levels used:    1
  9941 ;; Hardware stack levels required when called:    4
  9942 ;; This function calls:
  9943 ;;		_change_state_to_logs_11
  9944 ;;		_change_state_to_logs_12
  9945 ;;		_change_state_to_logs_22
  9946 ;;		_change_state_to_logs_23
  9947 ;;		_change_state_to_logs_33
  9948 ;;		_change_state_to_logs_34
  9949 ;;		_change_state_to_menu_11
  9950 ;;		_change_state_to_menu_23
  9951 ;;		i2_change_state_to_menu_12
  9952 ;;		i2_change_state_to_menu_22
  9953 ;; This function is called by:
  9954 ;;		_updateMenu
  9955 ;; This function uses a non-reentrant model
  9956 ;;
  9957                           
  9958                           	psect	text45
  9959  001680                     __ptext45:
  9960                           	opt stack 0
  9961  001680                     _inputHandler:
  9962                           	opt stack 18
  9963                           
  9964                           ;UI.c: 319: if(firstboot){
  9965                           
  9966                           ;incstack = 0
  9967  001680  5069               	movf	_firstboot,w,c
  9968  001682  106A               	iorwf	_firstboot+1,w,c
  9969  001684  B4D8               	btfsc	status,2,c
  9970  001686  D00B               	goto	i2l4689
  9971                           
  9972                           ;UI.c: 320: change_state_to_menu_11();
  9973  001688  ECC8  F012         	call	_change_state_to_menu_11	;wreg free
  9974                           
  9975                           ;UI.c: 321: firstboot = 0;
  9976  00168C  0E00               	movlw	0
  9977  00168E  6E6A               	movwf	_firstboot+1,c
  9978  001690  0E00               	movlw	0
  9979  001692  6E69               	movwf	_firstboot,c
  9980                           
  9981                           ;UI.c: 322: return 0;
  9982  001694  0E00               	movlw	0
  9983  001696  6E2B               	movwf	?_inputHandler+1,c
  9984  001698  0E00               	movlw	0
  9985  00169A  6E2A               	movwf	?_inputHandler,c
  9986  00169C  0012               	return	
  9987  00169E                     i2l4689:
  9988                           
  9989                           ;UI.c: 323: }
  9990                           ;UI.c: 324: if (logstate){
  9991  00169E  0100               	movlb	0	; () banked
  9992  0016A0  51ED               	movf	_logstate& (0+255),w,b
  9993  0016A2  0100               	movlb	0	; () banked
  9994  0016A4  11EE               	iorwf	(_logstate+1)& (0+255),w,b
  9995  0016A6  B4D8               	btfsc	status,2,c
  9996  0016A8  D0C7               	goto	i2l4807
  9997                           
  9998                           ; BSR set to: 0
  9999                           ;UI.c: 325: if(input == 'C' && PORTBbits.RB1 == 1){
 10000  0016AA  0E43               	movlw	67
 10001  0016AC  1879               	xorwf	_input,w,c
 10002  0016AE  A4D8               	btfss	status,2,c
 10003  0016B0  D012               	goto	i2l4707
 10004                           
 10005                           ; BSR set to: 0
 10006  0016B2  B281               	btfsc	3969,1,c	;volatile
 10007  0016B4  D009               	goto	i2l4699
 10008  0016B6  D00F               	goto	i2l4707
 10009  0016B8                     i2l4697:
 10010                           
 10011                           ;UI.c: 328: _delay((unsigned long)((10)*(32000000/4000.0)));
 10012  0016B8  0E68               	movlw	104
 10013  0016BA  6E2C               	movwf	??_inputHandler& (0+255),c
 10014  0016BC  0EE4               	movlw	228
 10015  0016BE                     i2u485_47:
 10016  0016BE  2EE8               	decfsz	wreg,f,c
 10017  0016C0  D7FE               	bra	i2u485_47
 10018  0016C2  2E2C               	decfsz	??_inputHandler& (0+255),f,c
 10019  0016C4  D7FC               	bra	i2u485_47
 10020  0016C6  D000               	nop2	
 10021  0016C8                     i2l4699:
 10022  0016C8  B281               	btfsc	3969,1,c	;volatile
 10023  0016CA  D7F6               	goto	i2l4697
 10024  0016CC                     i2l4701:
 10025                           
 10026                           ;UI.c: 329: }
 10027                           ;UI.c: 330: return 0;
 10028  0016CC  0E00               	movlw	0
 10029  0016CE  6E2B               	movwf	?_inputHandler+1,c
 10030  0016D0  0E00               	movlw	0
 10031  0016D2  6E2A               	movwf	?_inputHandler,c
 10032  0016D4  0012               	return	
 10033  0016D6                     i2l4707:
 10034                           
 10035                           ;UI.c: 332: else if (input == 'D'){
 10036  0016D6  0E44               	movlw	68
 10037  0016D8  1879               	xorwf	_input,w,c
 10038  0016DA  A4D8               	btfss	status,2,c
 10039  0016DC  D7F7               	goto	i2l4701
 10040                           
 10041                           ;UI.c: 334: logstate = 0;
 10042  0016DE  0E00               	movlw	0
 10043  0016E0  0100               	movlb	0	; () banked
 10044  0016E2  6FEE               	movwf	(_logstate+1)& (0+255),b
 10045  0016E4  0E00               	movlw	0
 10046  0016E6  6FED               	movwf	_logstate& (0+255),b
 10047                           
 10048                           ;UI.c: 335: switch(cur_state){
 10049  0016E8  D012               	goto	i2l4725
 10050  0016EA                     i2l4711:
 10051                           
 10052                           ;UI.c: 337: change_state_to_logs_11();
 10053  0016EA  EC40  F013         	call	_change_state_to_logs_11	;wreg free
 10054                           
 10055                           ;UI.c: 338: break;
 10056  0016EE  D7EE               	goto	i2l4701
 10057  0016F0                     i2l4713:
 10058                           
 10059                           ;UI.c: 340: change_state_to_logs_12();
 10060  0016F0  EC28  F013         	call	_change_state_to_logs_12	;wreg free
 10061                           
 10062                           ;UI.c: 341: break;
 10063  0016F4  D7EB               	goto	i2l4701
 10064  0016F6                     i2l4715:
 10065                           
 10066                           ;UI.c: 343: change_state_to_logs_22();
 10067  0016F6  EC10  F013         	call	_change_state_to_logs_22	;wreg free
 10068                           
 10069                           ;UI.c: 344: break;
 10070  0016FA  D7E8               	goto	i2l4701
 10071  0016FC                     i2l4717:
 10072                           
 10073                           ;UI.c: 346: change_state_to_logs_23();
 10074  0016FC  EC86  F013         	call	_change_state_to_logs_23	;wreg free
 10075                           
 10076                           ;UI.c: 347: break;
 10077  001700  D7E5               	goto	i2l4701
 10078  001702                     i2l4719:
 10079                           
 10080                           ;UI.c: 349: change_state_to_logs_33();
 10081  001702  ECF8  F012         	call	_change_state_to_logs_33	;wreg free
 10082                           
 10083                           ;UI.c: 350: break;
 10084  001706  D7E2               	goto	i2l4701
 10085  001708                     i2l4721:
 10086                           
 10087                           ;UI.c: 352: change_state_to_logs_34();
 10088  001708  ECE0  F012         	call	_change_state_to_logs_34	;wreg free
 10089                           
 10090                           ;UI.c: 354: }
 10091                           
 10092                           ;UI.c: 353: break;
 10093  00170C  D7DF               	goto	i2l4701
 10094  00170E                     i2l4725:
 10095  00170E  C0DF  F02C         	movff	_cur_state,??_inputHandler
 10096  001712  C0E0  F02D         	movff	_cur_state+1,??_inputHandler+1
 10097                           
 10098                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
 10099                           ; Switch size 1, requested type "space"
 10100                           ; Number of cases is 2, Range of values is 3 to 4
 10101                           ; switch strategies available:
 10102                           ; Name         Instructions Cycles
 10103                           ; simple_byte            7     4 (average)
 10104                           ;	Chosen strategy is simple_byte
 10105  001716  502D               	movf	??_inputHandler+1,w,c
 10106  001718  0A03               	xorlw	3	; case 3
 10107  00171A  B4D8               	btfsc	status,2,c
 10108  00171C  D004               	goto	i2l5789
 10109  00171E  0A07               	xorlw	7	; case 4
 10110  001720  B4D8               	btfsc	status,2,c
 10111  001722  D00F               	goto	i2l5791
 10112  001724  D7D3               	goto	i2l4701
 10113  001726                     i2l5789:
 10114                           
 10115                           ; Switch size 1, requested type "space"
 10116                           ; Number of cases is 4, Range of values is 243 to 255
 10117                           ; switch strategies available:
 10118                           ; Name         Instructions Cycles
 10119                           ; simple_byte           13     7 (average)
 10120                           ;	Chosen strategy is simple_byte
 10121  001726  502C               	movf	??_inputHandler,w,c
 10122  001728  0AF3               	xorlw	243	; case 243
 10123  00172A  B4D8               	btfsc	status,2,c
 10124  00172C  D7DE               	goto	i2l4711
 10125  00172E  0A07               	xorlw	7	; case 244
 10126  001730  B4D8               	btfsc	status,2,c
 10127  001732  D7DE               	goto	i2l4713
 10128  001734  0A0A               	xorlw	10	; case 254
 10129  001736  B4D8               	btfsc	status,2,c
 10130  001738  D7DE               	goto	i2l4715
 10131  00173A  0A01               	xorlw	1	; case 255
 10132  00173C  B4D8               	btfsc	status,2,c
 10133  00173E  D7DE               	goto	i2l4717
 10134  001740  D7C5               	goto	i2l4701
 10135  001742                     i2l5791:
 10136                           
 10137                           ; Switch size 1, requested type "space"
 10138                           ; Number of cases is 2, Range of values is 9 to 10
 10139                           ; switch strategies available:
 10140                           ; Name         Instructions Cycles
 10141                           ; simple_byte            7     4 (average)
 10142                           ;	Chosen strategy is simple_byte
 10143  001742  502C               	movf	??_inputHandler,w,c
 10144  001744  0A09               	xorlw	9	; case 9
 10145  001746  B4D8               	btfsc	status,2,c
 10146  001748  D7DC               	goto	i2l4719
 10147  00174A  0A03               	xorlw	3	; case 10
 10148  00174C  B4D8               	btfsc	status,2,c
 10149  00174E  D7DC               	goto	i2l4721
 10150  001750  D7BD               	goto	i2l4701
 10151  001752                     i2l4737:
 10152                           
 10153                           ;UI.c: 364: if(cur_state == 11){
 10154  001752  0E0B               	movlw	11
 10155  001754  0100               	movlb	0	; () banked
 10156  001756  19DF               	xorwf	_cur_state& (0+255),w,b
 10157  001758  0100               	movlb	0	; () banked
 10158  00175A  11E0               	iorwf	(_cur_state+1)& (0+255),w,b
 10159  00175C  A4D8               	btfss	status,2,c
 10160  00175E  D005               	goto	i2l4745
 10161                           
 10162                           ; BSR set to: 0
 10163                           ;UI.c: 365: return 0;
 10164  001760  0E00               	movlw	0
 10165  001762  6E2B               	movwf	?_inputHandler+1,c
 10166  001764  0E00               	movlw	0
 10167  001766  6E2A               	movwf	?_inputHandler,c
 10168                           
 10169                           ; BSR set to: 0
 10170  001768  0012               	return	
 10171  00176A                     i2l4745:
 10172                           
 10173                           ; BSR set to: 0
 10174                           ;UI.c: 367: else{
 10175                           ;UI.c: 368: change_state_to_menu_11();
 10176  00176A  ECC8  F012         	call	_change_state_to_menu_11	;wreg free
 10177                           
 10178                           ;UI.c: 369: }
 10179                           ;UI.c: 370: return 0;
 10180  00176E  0E00               	movlw	0
 10181  001770  6E2B               	movwf	?_inputHandler+1,c
 10182  001772  0E00               	movlw	0
 10183  001774  6E2A               	movwf	?_inputHandler,c
 10184  001776  0012               	return	
 10185  001778                     i2l4751:
 10186                           
 10187                           ;UI.c: 372: if(cur_state == 22 | cur_state == 12){
 10188  001778  0E16               	movlw	22
 10189  00177A  0100               	movlb	0	; () banked
 10190  00177C  19DF               	xorwf	_cur_state& (0+255),w,b
 10191  00177E  0100               	movlb	0	; () banked
 10192  001780  11E0               	iorwf	(_cur_state+1)& (0+255),w,b
 10193  001782  B4D8               	btfsc	status,2,c
 10194  001784  D007               	goto	i2l4755
 10195                           
 10196                           ; BSR set to: 0
 10197  001786  0E0C               	movlw	12
 10198  001788  0100               	movlb	0	; () banked
 10199  00178A  19DF               	xorwf	_cur_state& (0+255),w,b
 10200  00178C  0100               	movlb	0	; () banked
 10201  00178E  11E0               	iorwf	(_cur_state+1)& (0+255),w,b
 10202  001790  A4D8               	btfss	status,2,c
 10203  001792  D005               	goto	i2l4761
 10204  001794                     i2l4755:
 10205                           
 10206                           ; BSR set to: 0
 10207                           ;UI.c: 373: return 0;
 10208  001794  0E00               	movlw	0
 10209  001796  6E2B               	movwf	?_inputHandler+1,c
 10210  001798  0E00               	movlw	0
 10211  00179A  6E2A               	movwf	?_inputHandler,c
 10212                           
 10213                           ; BSR set to: 0
 10214  00179C  0012               	return	
 10215  00179E                     i2l4761:
 10216                           
 10217                           ; BSR set to: 0
 10218                           ;UI.c: 375: else if(cur_state == 23){
 10219  00179E  0E17               	movlw	23
 10220  0017A0  0100               	movlb	0	; () banked
 10221  0017A2  19DF               	xorwf	_cur_state& (0+255),w,b
 10222  0017A4  0100               	movlb	0	; () banked
 10223  0017A6  11E0               	iorwf	(_cur_state+1)& (0+255),w,b
 10224  0017A8  A4D8               	btfss	status,2,c
 10225  0017AA  D003               	goto	i2l4765
 10226                           
 10227                           ; BSR set to: 0
 10228                           ;UI.c: 376: change_state_to_menu_22();
 10229  0017AC  EC80  F012         	call	i2_change_state_to_menu_22	;wreg free
 10230                           
 10231                           ;UI.c: 377: }
 10232  0017B0  D002               	goto	i2l4767
 10233  0017B2                     i2l4765:
 10234                           
 10235                           ;UI.c: 378: else{
 10236                           ;UI.c: 379: change_state_to_menu_12();
 10237  0017B2  EC98  F012         	call	i2_change_state_to_menu_12	;wreg free
 10238  0017B6                     i2l4767:
 10239                           
 10240                           ;UI.c: 380: }
 10241                           ;UI.c: 381: return 0;
 10242  0017B6  0E00               	movlw	0
 10243  0017B8  6E2B               	movwf	?_inputHandler+1,c
 10244  0017BA  0E00               	movlw	0
 10245  0017BC  6E2A               	movwf	?_inputHandler,c
 10246  0017BE  0012               	return	
 10247  0017C0                     i2l4771:
 10248                           
 10249                           ;UI.c: 383: if(cur_state == 23){
 10250  0017C0  0E17               	movlw	23
 10251  0017C2  0100               	movlb	0	; () banked
 10252  0017C4  19DF               	xorwf	_cur_state& (0+255),w,b
 10253  0017C6  0100               	movlb	0	; () banked
 10254  0017C8  11E0               	iorwf	(_cur_state+1)& (0+255),w,b
 10255  0017CA  A4D8               	btfss	status,2,c
 10256  0017CC  D005               	goto	i2l4779
 10257                           
 10258                           ; BSR set to: 0
 10259                           ;UI.c: 384: return 0;
 10260  0017CE  0E00               	movlw	0
 10261  0017D0  6E2B               	movwf	?_inputHandler+1,c
 10262  0017D2  0E00               	movlw	0
 10263  0017D4  6E2A               	movwf	?_inputHandler,c
 10264                           
 10265                           ; BSR set to: 0
 10266  0017D6  0012               	return	
 10267  0017D8                     i2l4779:
 10268                           
 10269                           ; BSR set to: 0
 10270                           ;UI.c: 386: else{
 10271                           ;UI.c: 387: change_state_to_menu_23();
 10272  0017D8  ECB0  F012         	call	_change_state_to_menu_23	;wreg free
 10273                           
 10274                           ;UI.c: 388: }
 10275                           ;UI.c: 389: return 0;
 10276  0017DC  0E00               	movlw	0
 10277  0017DE  6E2B               	movwf	?_inputHandler+1,c
 10278  0017E0  0E00               	movlw	0
 10279  0017E2  6E2A               	movwf	?_inputHandler,c
 10280  0017E4  0012               	return	
 10281  0017E6                     i2l4785:
 10282                           
 10283                           ;UI.c: 392: up = 1;
 10284  0017E6  0E00               	movlw	0
 10285  0017E8  6E74               	movwf	_up+1,c
 10286  0017EA  0E01               	movlw	1
 10287  0017EC  6E73               	movwf	_up,c
 10288                           
 10289                           ;UI.c: 393: return 1;
 10290  0017EE  0E00               	movlw	0
 10291  0017F0  6E2B               	movwf	?_inputHandler+1,c
 10292  0017F2  0E01               	movlw	1
 10293  0017F4  6E2A               	movwf	?_inputHandler,c
 10294  0017F6  0012               	return	
 10295  0017F8                     i2l4789:
 10296                           
 10297                           ;UI.c: 395: down = 1;
 10298  0017F8  0E00               	movlw	0
 10299  0017FA  6E66               	movwf	_down+1,c
 10300  0017FC  0E01               	movlw	1
 10301  0017FE  6E65               	movwf	_down,c
 10302                           
 10303                           ;UI.c: 396: return 1;
 10304  001800  0E00               	movlw	0
 10305  001802  6E2B               	movwf	?_inputHandler+1,c
 10306  001804  0E01               	movlw	1
 10307  001806  6E2A               	movwf	?_inputHandler,c
 10308  001808  0012               	return	
 10309  00180A                     i2l4793:
 10310                           
 10311                           ;UI.c: 398: enter = 1;
 10312  00180A  0E00               	movlw	0
 10313  00180C  6E68               	movwf	_enter+1,c
 10314  00180E  0E01               	movlw	1
 10315  001810  6E67               	movwf	_enter,c
 10316                           
 10317                           ;UI.c: 399: return 1;
 10318  001812  0E00               	movlw	0
 10319  001814  6E2B               	movwf	?_inputHandler+1,c
 10320  001816  0E01               	movlw	1
 10321  001818  6E2A               	movwf	?_inputHandler,c
 10322  00181A  0012               	return	
 10323  00181C                     i2l4797:
 10324                           
 10325                           ;UI.c: 401: back = 1;
 10326  00181C  0E00               	movlw	0
 10327  00181E  6E5E               	movwf	_back+1,c
 10328  001820  0E01               	movlw	1
 10329  001822  6E5D               	movwf	_back,c
 10330                           
 10331                           ;UI.c: 402: return 1;
 10332  001824  0E00               	movlw	0
 10333  001826  6E2B               	movwf	?_inputHandler+1,c
 10334  001828  0E01               	movlw	1
 10335  00182A  6E2A               	movwf	?_inputHandler,c
 10336  00182C  0012               	return	
 10337  00182E                     i2l4801:
 10338                           
 10339                           ;UI.c: 405: return 1;
 10340  00182E  0E00               	movlw	0
 10341  001830  6E2B               	movwf	?_inputHandler+1,c
 10342  001832  0E01               	movlw	1
 10343  001834  6E2A               	movwf	?_inputHandler,c
 10344                           
 10345                           ;UI.c: 406: }
 10346  001836  0012               	return	
 10347  001838                     i2l4807:
 10348  001838  5079               	movf	_input,w,c
 10349                           
 10350                           ; Switch size 1, requested type "space"
 10351                           ; Number of cases is 7, Range of values is 49 to 68
 10352                           ; switch strategies available:
 10353                           ; Name         Instructions Cycles
 10354                           ; simple_byte           22    12 (average)
 10355                           ;	Chosen strategy is simple_byte
 10356  00183A  0A31               	xorlw	49	; case 49
 10357  00183C  B4D8               	btfsc	status,2,c
 10358  00183E  D789               	goto	i2l4737
 10359  001840  0A03               	xorlw	3	; case 50
 10360  001842  B4D8               	btfsc	status,2,c
 10361  001844  D799               	goto	i2l4751
 10362  001846  0A01               	xorlw	1	; case 51
 10363  001848  B4D8               	btfsc	status,2,c
 10364  00184A  D7BA               	goto	i2l4771
 10365  00184C  0A72               	xorlw	114	; case 65
 10366  00184E  B4D8               	btfsc	status,2,c
 10367  001850  D7CA               	goto	i2l4785
 10368  001852  0A03               	xorlw	3	; case 66
 10369  001854  B4D8               	btfsc	status,2,c
 10370  001856  D7D0               	goto	i2l4789
 10371  001858  0A01               	xorlw	1	; case 67
 10372  00185A  B4D8               	btfsc	status,2,c
 10373  00185C  D7D6               	goto	i2l4793
 10374  00185E  0A07               	xorlw	7	; case 68
 10375  001860  B4D8               	btfsc	status,2,c
 10376  001862  D7DC               	goto	i2l4797
 10377  001864  D7E4               	goto	i2l4801
 10378  001866                     __end_of_inputHandler:
 10379                           	opt stack 0
 10380                           pclatu	equ	0xFFB
 10381                           pclath	equ	0xFFA
 10382                           tblptru	equ	0xFF8
 10383                           tblptrh	equ	0xFF7
 10384                           tblptrl	equ	0xFF6
 10385                           tablat	equ	0xFF5
 10386                           prodh	equ	0xFF4
 10387                           prodl	equ	0xFF3
 10388                           intcon	equ	0xFF2
 10389                           intcon3	equ	0xFF0
 10390                           indf0	equ	0xFEF
 10391                           postinc0	equ	0xFEE
 10392                           fsr0h	equ	0xFEA
 10393                           fsr0l	equ	0xFE9
 10394                           wreg	equ	0xFE8
 10395                           postdec1	equ	0xFE5
 10396                           fsr1h	equ	0xFE2
 10397                           fsr1l	equ	0xFE1
 10398                           indf2	equ	0xFDF
 10399                           postinc2	equ	0xFDE
 10400                           postdec2	equ	0xFDD
 10401                           fsr2h	equ	0xFDA
 10402                           fsr2l	equ	0xFD9
 10403                           status	equ	0xFD8
 10404                           
 10405 ;; *************** function i2_change_state_to_menu_22 *****************
 10406 ;; Defined at:
 10407 ;;		line 439 in file "UI.c"
 10408 ;; Parameters:    Size  Location     Type
 10409 ;;		None
 10410 ;; Auto vars:     Size  Location     Type
 10411 ;;		None
 10412 ;; Return value:  Size  Location     Type
 10413 ;;                  1    wreg      void 
 10414 ;; Registers used:
 10415 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10416 ;; Tracked objects:
 10417 ;;		On entry : 0/0
 10418 ;;		On exit  : 0/0
 10419 ;;		Unchanged: 0/0
 10420 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10421 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10422 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10423 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10424 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10425 ;;Total ram usage:        0 bytes
 10426 ;; Hardware stack levels used:    1
 10427 ;; Hardware stack levels required when called:    3
 10428 ;; This function calls:
 10429 ;;		i2_lcdInst
 10430 ;;		i2_printf
 10431 ;; This function is called by:
 10432 ;;		_updateMenu
 10433 ;;		_inputHandler
 10434 ;; This function uses a non-reentrant model
 10435 ;;
 10436                           
 10437                           	psect	text46
 10438  002500                     __ptext46:
 10439                           	opt stack 0
 10440  002500                     i2_change_state_to_menu_22:
 10441                           	opt stack 19
 10442                           
 10443                           ;UI.c: 440: cur_state = 22;
 10444                           
 10445                           ;incstack = 0
 10446  002500  0E00               	movlw	0
 10447  002502  0100               	movlb	0	; () banked
 10448  002504  6FE0               	movwf	(_cur_state+1)& (0+255),b
 10449  002506  0E16               	movlw	22
 10450  002508  6FDF               	movwf	_cur_state& (0+255),b
 10451                           
 10452                           ; BSR set to: 0
 10453                           ;UI.c: 442: lcdInst(0b10000000);;
 10454  00250A  0E80               	movlw	128
 10455  00250C  EC8D  F014         	call	i2_lcdInst
 10456                           
 10457                           ;UI.c: 443: printf("2. SORT        <");
 10458  002510  0E64               	movlw	low STR_19
 10459  002512  6E0D               	movwf	i2printf@f,c
 10460  002514  0EFF               	movlw	high STR_19
 10461  002516  6E0E               	movwf	i2printf@f+1,c
 10462  002518  ECC0  F004         	call	i2_printf	;wreg free
 10463                           
 10464                           ;UI.c: 444: lcdInst(0b11000000);;
 10465  00251C  0EC0               	movlw	192
 10466  00251E  EC8D  F014         	call	i2_lcdInst
 10467                           
 10468                           ;UI.c: 445: printf("3. LOGS         ");
 10469  002522  0E65               	movlw	low STR_21
 10470  002524  6E0D               	movwf	i2printf@f,c
 10471  002526  0EFE               	movlw	high STR_21
 10472  002528  6E0E               	movwf	i2printf@f+1,c
 10473  00252A  ECC0  F004         	call	i2_printf	;wreg free
 10474  00252E  0012               	return		;funcret
 10475  002530                     __end_ofi2_change_state_to_menu_22:
 10476                           	opt stack 0
 10477                           pclatu	equ	0xFFB
 10478                           pclath	equ	0xFFA
 10479                           tblptru	equ	0xFF8
 10480                           tblptrh	equ	0xFF7
 10481                           tblptrl	equ	0xFF6
 10482                           tablat	equ	0xFF5
 10483                           prodh	equ	0xFF4
 10484                           prodl	equ	0xFF3
 10485                           intcon	equ	0xFF2
 10486                           intcon3	equ	0xFF0
 10487                           indf0	equ	0xFEF
 10488                           postinc0	equ	0xFEE
 10489                           fsr0h	equ	0xFEA
 10490                           fsr0l	equ	0xFE9
 10491                           wreg	equ	0xFE8
 10492                           postdec1	equ	0xFE5
 10493                           fsr1h	equ	0xFE2
 10494                           fsr1l	equ	0xFE1
 10495                           indf2	equ	0xFDF
 10496                           postinc2	equ	0xFDE
 10497                           postdec2	equ	0xFDD
 10498                           fsr2h	equ	0xFDA
 10499                           fsr2l	equ	0xFD9
 10500                           status	equ	0xFD8
 10501                           
 10502 ;; *************** function i2_change_state_to_menu_12 *****************
 10503 ;; Defined at:
 10504 ;;		line 431 in file "UI.c"
 10505 ;; Parameters:    Size  Location     Type
 10506 ;;		None
 10507 ;; Auto vars:     Size  Location     Type
 10508 ;;		None
 10509 ;; Return value:  Size  Location     Type
 10510 ;;                  1    wreg      void 
 10511 ;; Registers used:
 10512 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10513 ;; Tracked objects:
 10514 ;;		On entry : 0/0
 10515 ;;		On exit  : 0/0
 10516 ;;		Unchanged: 0/0
 10517 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10518 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10519 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10520 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10521 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10522 ;;Total ram usage:        0 bytes
 10523 ;; Hardware stack levels used:    1
 10524 ;; Hardware stack levels required when called:    3
 10525 ;; This function calls:
 10526 ;;		i2_lcdInst
 10527 ;;		i2_printf
 10528 ;; This function is called by:
 10529 ;;		_updateMenu
 10530 ;;		_inputHandler
 10531 ;; This function uses a non-reentrant model
 10532 ;;
 10533                           
 10534                           	psect	text47
 10535  002530                     __ptext47:
 10536                           	opt stack 0
 10537  002530                     i2_change_state_to_menu_12:
 10538                           	opt stack 19
 10539                           
 10540                           ;UI.c: 432: cur_state = 12;
 10541                           
 10542                           ;incstack = 0
 10543  002530  0E00               	movlw	0
 10544  002532  0100               	movlb	0	; () banked
 10545  002534  6FE0               	movwf	(_cur_state+1)& (0+255),b
 10546  002536  0E0C               	movlw	12
 10547  002538  6FDF               	movwf	_cur_state& (0+255),b
 10548                           
 10549                           ; BSR set to: 0
 10550                           ;UI.c: 434: lcdInst(0b10000000);;
 10551  00253A  0E80               	movlw	128
 10552  00253C  EC8D  F014         	call	i2_lcdInst
 10553                           
 10554                           ;UI.c: 435: printf("1. DATE/TIME    ");
 10555  002540  0E87               	movlw	low STR_18
 10556  002542  6E0D               	movwf	i2printf@f,c
 10557  002544  0EFE               	movlw	high STR_18
 10558  002546  6E0E               	movwf	i2printf@f+1,c
 10559  002548  ECC0  F004         	call	i2_printf	;wreg free
 10560                           
 10561                           ;UI.c: 436: lcdInst(0b11000000);;
 10562  00254C  0EC0               	movlw	192
 10563  00254E  EC8D  F014         	call	i2_lcdInst
 10564                           
 10565                           ;UI.c: 437: printf("2. SORT        <");
 10566  002552  0E64               	movlw	low STR_19
 10567  002554  6E0D               	movwf	i2printf@f,c
 10568  002556  0EFF               	movlw	high STR_19
 10569  002558  6E0E               	movwf	i2printf@f+1,c
 10570  00255A  ECC0  F004         	call	i2_printf	;wreg free
 10571  00255E  0012               	return		;funcret
 10572  002560                     __end_ofi2_change_state_to_menu_12:
 10573                           	opt stack 0
 10574                           pclatu	equ	0xFFB
 10575                           pclath	equ	0xFFA
 10576                           tblptru	equ	0xFF8
 10577                           tblptrh	equ	0xFF7
 10578                           tblptrl	equ	0xFF6
 10579                           tablat	equ	0xFF5
 10580                           prodh	equ	0xFF4
 10581                           prodl	equ	0xFF3
 10582                           intcon	equ	0xFF2
 10583                           intcon3	equ	0xFF0
 10584                           indf0	equ	0xFEF
 10585                           postinc0	equ	0xFEE
 10586                           fsr0h	equ	0xFEA
 10587                           fsr0l	equ	0xFE9
 10588                           wreg	equ	0xFE8
 10589                           postdec1	equ	0xFE5
 10590                           fsr1h	equ	0xFE2
 10591                           fsr1l	equ	0xFE1
 10592                           indf2	equ	0xFDF
 10593                           postinc2	equ	0xFDE
 10594                           postdec2	equ	0xFDD
 10595                           fsr2h	equ	0xFDA
 10596                           fsr2l	equ	0xFD9
 10597                           status	equ	0xFD8
 10598                           
 10599 ;; *************** function _change_state_to_menu_23 *****************
 10600 ;; Defined at:
 10601 ;;		line 447 in file "UI.c"
 10602 ;; Parameters:    Size  Location     Type
 10603 ;;		None
 10604 ;; Auto vars:     Size  Location     Type
 10605 ;;		None
 10606 ;; Return value:  Size  Location     Type
 10607 ;;                  1    wreg      void 
 10608 ;; Registers used:
 10609 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10610 ;; Tracked objects:
 10611 ;;		On entry : 0/0
 10612 ;;		On exit  : 0/0
 10613 ;;		Unchanged: 0/0
 10614 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10615 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10616 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10617 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10618 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10619 ;;Total ram usage:        0 bytes
 10620 ;; Hardware stack levels used:    1
 10621 ;; Hardware stack levels required when called:    3
 10622 ;; This function calls:
 10623 ;;		i2_lcdInst
 10624 ;;		i2_printf
 10625 ;; This function is called by:
 10626 ;;		_updateMenu
 10627 ;;		_inputHandler
 10628 ;; This function uses a non-reentrant model
 10629 ;;
 10630                           
 10631                           	psect	text48
 10632  002560                     __ptext48:
 10633                           	opt stack 0
 10634  002560                     _change_state_to_menu_23:
 10635                           	opt stack 18
 10636                           
 10637                           ;UI.c: 448: cur_state = 23;
 10638                           
 10639                           ;incstack = 0
 10640  002560  0E00               	movlw	0
 10641  002562  0100               	movlb	0	; () banked
 10642  002564  6FE0               	movwf	(_cur_state+1)& (0+255),b
 10643  002566  0E17               	movlw	23
 10644  002568  6FDF               	movwf	_cur_state& (0+255),b
 10645                           
 10646                           ; BSR set to: 0
 10647                           ;UI.c: 450: lcdInst(0b10000000);;
 10648  00256A  0E80               	movlw	128
 10649  00256C  EC8D  F014         	call	i2_lcdInst
 10650                           
 10651                           ;UI.c: 451: printf("2. SORT         ");
 10652  002570  0E76               	movlw	low STR_17
 10653  002572  6E0D               	movwf	i2printf@f,c
 10654  002574  0EFE               	movlw	high STR_17
 10655  002576  6E0E               	movwf	i2printf@f+1,c
 10656  002578  ECC0  F004         	call	i2_printf	;wreg free
 10657                           
 10658                           ;UI.c: 452: lcdInst(0b11000000);;
 10659  00257C  0EC0               	movlw	192
 10660  00257E  EC8D  F014         	call	i2_lcdInst
 10661                           
 10662                           ;UI.c: 453: printf("3. LOGS        <");
 10663  002582  0E53               	movlw	low STR_23
 10664  002584  6E0D               	movwf	i2printf@f,c
 10665  002586  0EFF               	movlw	high STR_23
 10666  002588  6E0E               	movwf	i2printf@f+1,c
 10667  00258A  ECC0  F004         	call	i2_printf	;wreg free
 10668  00258E  0012               	return		;funcret
 10669  002590                     __end_of_change_state_to_menu_23:
 10670                           	opt stack 0
 10671                           pclatu	equ	0xFFB
 10672                           pclath	equ	0xFFA
 10673                           tblptru	equ	0xFF8
 10674                           tblptrh	equ	0xFF7
 10675                           tblptrl	equ	0xFF6
 10676                           tablat	equ	0xFF5
 10677                           prodh	equ	0xFF4
 10678                           prodl	equ	0xFF3
 10679                           intcon	equ	0xFF2
 10680                           intcon3	equ	0xFF0
 10681                           indf0	equ	0xFEF
 10682                           postinc0	equ	0xFEE
 10683                           fsr0h	equ	0xFEA
 10684                           fsr0l	equ	0xFE9
 10685                           wreg	equ	0xFE8
 10686                           postdec1	equ	0xFE5
 10687                           fsr1h	equ	0xFE2
 10688                           fsr1l	equ	0xFE1
 10689                           indf2	equ	0xFDF
 10690                           postinc2	equ	0xFDE
 10691                           postdec2	equ	0xFDD
 10692                           fsr2h	equ	0xFDA
 10693                           fsr2l	equ	0xFD9
 10694                           status	equ	0xFD8
 10695                           
 10696 ;; *************** function _change_state_to_menu_11 *****************
 10697 ;; Defined at:
 10698 ;;		line 423 in file "UI.c"
 10699 ;; Parameters:    Size  Location     Type
 10700 ;;		None
 10701 ;; Auto vars:     Size  Location     Type
 10702 ;;		None
 10703 ;; Return value:  Size  Location     Type
 10704 ;;                  1    wreg      void 
 10705 ;; Registers used:
 10706 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10707 ;; Tracked objects:
 10708 ;;		On entry : 0/0
 10709 ;;		On exit  : 0/0
 10710 ;;		Unchanged: 0/0
 10711 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10712 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10713 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10714 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10715 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10716 ;;Total ram usage:        0 bytes
 10717 ;; Hardware stack levels used:    1
 10718 ;; Hardware stack levels required when called:    3
 10719 ;; This function calls:
 10720 ;;		i2_lcdInst
 10721 ;;		i2_printf
 10722 ;; This function is called by:
 10723 ;;		_updateMenu
 10724 ;;		_inputHandler
 10725 ;; This function uses a non-reentrant model
 10726 ;;
 10727                           
 10728                           	psect	text49
 10729  002590                     __ptext49:
 10730                           	opt stack 0
 10731  002590                     _change_state_to_menu_11:
 10732                           	opt stack 18
 10733                           
 10734                           ;UI.c: 424: cur_state = 11;
 10735                           
 10736                           ;incstack = 0
 10737  002590  0E00               	movlw	0
 10738  002592  0100               	movlb	0	; () banked
 10739  002594  6FE0               	movwf	(_cur_state+1)& (0+255),b
 10740  002596  0E0B               	movlw	11
 10741  002598  6FDF               	movwf	_cur_state& (0+255),b
 10742                           
 10743                           ; BSR set to: 0
 10744                           ;UI.c: 426: lcdInst(0b10000000);;
 10745  00259A  0E80               	movlw	128
 10746  00259C  EC8D  F014         	call	i2_lcdInst
 10747                           
 10748                           ;UI.c: 427: printf("1. DATE/TIME   <");
 10749  0025A0  0E75               	movlw	low STR_16
 10750  0025A2  6E0D               	movwf	i2printf@f,c
 10751  0025A4  0EFF               	movlw	high STR_16
 10752  0025A6  6E0E               	movwf	i2printf@f+1,c
 10753  0025A8  ECC0  F004         	call	i2_printf	;wreg free
 10754                           
 10755                           ;UI.c: 428: lcdInst(0b11000000);;
 10756  0025AC  0EC0               	movlw	192
 10757  0025AE  EC8D  F014         	call	i2_lcdInst
 10758                           
 10759                           ;UI.c: 429: printf("2. SORT         ");
 10760  0025B2  0E76               	movlw	low STR_17
 10761  0025B4  6E0D               	movwf	i2printf@f,c
 10762  0025B6  0EFE               	movlw	high STR_17
 10763  0025B8  6E0E               	movwf	i2printf@f+1,c
 10764  0025BA  ECC0  F004         	call	i2_printf	;wreg free
 10765  0025BE  0012               	return		;funcret
 10766  0025C0                     __end_of_change_state_to_menu_11:
 10767                           	opt stack 0
 10768                           pclatu	equ	0xFFB
 10769                           pclath	equ	0xFFA
 10770                           tblptru	equ	0xFF8
 10771                           tblptrh	equ	0xFF7
 10772                           tblptrl	equ	0xFF6
 10773                           tablat	equ	0xFF5
 10774                           prodh	equ	0xFF4
 10775                           prodl	equ	0xFF3
 10776                           intcon	equ	0xFF2
 10777                           intcon3	equ	0xFF0
 10778                           indf0	equ	0xFEF
 10779                           postinc0	equ	0xFEE
 10780                           fsr0h	equ	0xFEA
 10781                           fsr0l	equ	0xFE9
 10782                           wreg	equ	0xFE8
 10783                           postdec1	equ	0xFE5
 10784                           fsr1h	equ	0xFE2
 10785                           fsr1l	equ	0xFE1
 10786                           indf2	equ	0xFDF
 10787                           postinc2	equ	0xFDE
 10788                           postdec2	equ	0xFDD
 10789                           fsr2h	equ	0xFDA
 10790                           fsr2l	equ	0xFD9
 10791                           status	equ	0xFD8
 10792                           
 10793 ;; *************** function _change_state_to_logs_34 *****************
 10794 ;; Defined at:
 10795 ;;		line 490 in file "UI.c"
 10796 ;; Parameters:    Size  Location     Type
 10797 ;;		None
 10798 ;; Auto vars:     Size  Location     Type
 10799 ;;		None
 10800 ;; Return value:  Size  Location     Type
 10801 ;;                  1    wreg      void 
 10802 ;; Registers used:
 10803 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10804 ;; Tracked objects:
 10805 ;;		On entry : 0/0
 10806 ;;		On exit  : 0/0
 10807 ;;		Unchanged: 0/0
 10808 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10809 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10810 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10811 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10812 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10813 ;;Total ram usage:        0 bytes
 10814 ;; Hardware stack levels used:    1
 10815 ;; Hardware stack levels required when called:    3
 10816 ;; This function calls:
 10817 ;;		i2_lcdInst
 10818 ;;		i2_printf
 10819 ;; This function is called by:
 10820 ;;		_updateMenu
 10821 ;;		_inputHandler
 10822 ;; This function uses a non-reentrant model
 10823 ;;
 10824                           
 10825                           	psect	text50
 10826  0025C0                     __ptext50:
 10827                           	opt stack 0
 10828  0025C0                     _change_state_to_logs_34:
 10829                           	opt stack 18
 10830                           
 10831                           ;UI.c: 491: cur_state = 1034;
 10832                           
 10833                           ;incstack = 0
 10834  0025C0  0E04               	movlw	4
 10835  0025C2  0100               	movlb	0	; () banked
 10836  0025C4  6FE0               	movwf	(_cur_state+1)& (0+255),b
 10837  0025C6  0E0A               	movlw	10
 10838  0025C8  6FDF               	movwf	_cur_state& (0+255),b
 10839                           
 10840                           ; BSR set to: 0
 10841                           ;UI.c: 492: lcdInst(0b10000000);;
 10842  0025CA  0E80               	movlw	128
 10843  0025CC  EC8D  F014         	call	i2_lcdInst
 10844                           
 10845                           ;UI.c: 493: printf("LOG 3           ");
 10846  0025D0  0E43               	movlw	low STR_29
 10847  0025D2  6E0D               	movwf	i2printf@f,c
 10848  0025D4  0EFE               	movlw	high STR_29
 10849  0025D6  6E0E               	movwf	i2printf@f+1,c
 10850  0025D8  ECC0  F004         	call	i2_printf	;wreg free
 10851                           
 10852                           ;UI.c: 494: lcdInst(0b11000000);;
 10853  0025DC  0EC0               	movlw	192
 10854  0025DE  EC8D  F014         	call	i2_lcdInst
 10855                           
 10856                           ;UI.c: 495: printf("LOG 4          <");
 10857  0025E2  0E42               	movlw	low STR_35
 10858  0025E4  6E0D               	movwf	i2printf@f,c
 10859  0025E6  0EFF               	movlw	high STR_35
 10860  0025E8  6E0E               	movwf	i2printf@f+1,c
 10861  0025EA  ECC0  F004         	call	i2_printf	;wreg free
 10862  0025EE  0012               	return		;funcret
 10863  0025F0                     __end_of_change_state_to_logs_34:
 10864                           	opt stack 0
 10865                           pclatu	equ	0xFFB
 10866                           pclath	equ	0xFFA
 10867                           tblptru	equ	0xFF8
 10868                           tblptrh	equ	0xFF7
 10869                           tblptrl	equ	0xFF6
 10870                           tablat	equ	0xFF5
 10871                           prodh	equ	0xFF4
 10872                           prodl	equ	0xFF3
 10873                           intcon	equ	0xFF2
 10874                           intcon3	equ	0xFF0
 10875                           indf0	equ	0xFEF
 10876                           postinc0	equ	0xFEE
 10877                           fsr0h	equ	0xFEA
 10878                           fsr0l	equ	0xFE9
 10879                           wreg	equ	0xFE8
 10880                           postdec1	equ	0xFE5
 10881                           fsr1h	equ	0xFE2
 10882                           fsr1l	equ	0xFE1
 10883                           indf2	equ	0xFDF
 10884                           postinc2	equ	0xFDE
 10885                           postdec2	equ	0xFDD
 10886                           fsr2h	equ	0xFDA
 10887                           fsr2l	equ	0xFD9
 10888                           status	equ	0xFD8
 10889                           
 10890 ;; *************** function _change_state_to_logs_33 *****************
 10891 ;; Defined at:
 10892 ;;		line 483 in file "UI.c"
 10893 ;; Parameters:    Size  Location     Type
 10894 ;;		None
 10895 ;; Auto vars:     Size  Location     Type
 10896 ;;		None
 10897 ;; Return value:  Size  Location     Type
 10898 ;;                  1    wreg      void 
 10899 ;; Registers used:
 10900 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10901 ;; Tracked objects:
 10902 ;;		On entry : 0/0
 10903 ;;		On exit  : 0/0
 10904 ;;		Unchanged: 0/0
 10905 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10906 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10907 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10908 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10909 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10910 ;;Total ram usage:        0 bytes
 10911 ;; Hardware stack levels used:    1
 10912 ;; Hardware stack levels required when called:    3
 10913 ;; This function calls:
 10914 ;;		i2_lcdInst
 10915 ;;		i2_printf
 10916 ;; This function is called by:
 10917 ;;		_updateMenu
 10918 ;;		_inputHandler
 10919 ;; This function uses a non-reentrant model
 10920 ;;
 10921                           
 10922                           	psect	text51
 10923  0025F0                     __ptext51:
 10924                           	opt stack 0
 10925  0025F0                     _change_state_to_logs_33:
 10926                           	opt stack 18
 10927                           
 10928                           ;UI.c: 484: cur_state = 1033;
 10929                           
 10930                           ;incstack = 0
 10931  0025F0  0E04               	movlw	4
 10932  0025F2  0100               	movlb	0	; () banked
 10933  0025F4  6FE0               	movwf	(_cur_state+1)& (0+255),b
 10934  0025F6  0E09               	movlw	9
 10935  0025F8  6FDF               	movwf	_cur_state& (0+255),b
 10936                           
 10937                           ; BSR set to: 0
 10938                           ;UI.c: 485: lcdInst(0b10000000);;
 10939  0025FA  0E80               	movlw	128
 10940  0025FC  EC8D  F014         	call	i2_lcdInst
 10941                           
 10942                           ;UI.c: 486: printf("LOG 3          <");
 10943  002600  0E31               	movlw	low STR_31
 10944  002602  6E0D               	movwf	i2printf@f,c
 10945  002604  0EFF               	movlw	high STR_31
 10946  002606  6E0E               	movwf	i2printf@f+1,c
 10947  002608  ECC0  F004         	call	i2_printf	;wreg free
 10948                           
 10949                           ;UI.c: 487: lcdInst(0b11000000);;
 10950  00260C  0EC0               	movlw	192
 10951  00260E  EC8D  F014         	call	i2_lcdInst
 10952                           
 10953                           ;UI.c: 488: printf("LOG 4           ");
 10954  002612  0E54               	movlw	low STR_33
 10955  002614  6E0D               	movwf	i2printf@f,c
 10956  002616  0EFE               	movlw	high STR_33
 10957  002618  6E0E               	movwf	i2printf@f+1,c
 10958  00261A  ECC0  F004         	call	i2_printf	;wreg free
 10959  00261E  0012               	return		;funcret
 10960  002620                     __end_of_change_state_to_logs_33:
 10961                           	opt stack 0
 10962                           pclatu	equ	0xFFB
 10963                           pclath	equ	0xFFA
 10964                           tblptru	equ	0xFF8
 10965                           tblptrh	equ	0xFF7
 10966                           tblptrl	equ	0xFF6
 10967                           tablat	equ	0xFF5
 10968                           prodh	equ	0xFF4
 10969                           prodl	equ	0xFF3
 10970                           intcon	equ	0xFF2
 10971                           intcon3	equ	0xFF0
 10972                           indf0	equ	0xFEF
 10973                           postinc0	equ	0xFEE
 10974                           fsr0h	equ	0xFEA
 10975                           fsr0l	equ	0xFE9
 10976                           wreg	equ	0xFE8
 10977                           postdec1	equ	0xFE5
 10978                           fsr1h	equ	0xFE2
 10979                           fsr1l	equ	0xFE1
 10980                           indf2	equ	0xFDF
 10981                           postinc2	equ	0xFDE
 10982                           postdec2	equ	0xFDD
 10983                           fsr2h	equ	0xFDA
 10984                           fsr2l	equ	0xFD9
 10985                           status	equ	0xFD8
 10986                           
 10987 ;; *************** function _change_state_to_logs_23 *****************
 10988 ;; Defined at:
 10989 ;;		line 476 in file "UI.c"
 10990 ;; Parameters:    Size  Location     Type
 10991 ;;		None
 10992 ;; Auto vars:     Size  Location     Type
 10993 ;;		None
 10994 ;; Return value:  Size  Location     Type
 10995 ;;                  1    wreg      void 
 10996 ;; Registers used:
 10997 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10998 ;; Tracked objects:
 10999 ;;		On entry : 0/0
 11000 ;;		On exit  : 0/0
 11001 ;;		Unchanged: 0/0
 11002 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11003 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11004 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11005 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11006 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11007 ;;Total ram usage:        0 bytes
 11008 ;; Hardware stack levels used:    1
 11009 ;; Hardware stack levels required when called:    3
 11010 ;; This function calls:
 11011 ;;		i2_lcdInst
 11012 ;;		i2_printf
 11013 ;; This function is called by:
 11014 ;;		_updateMenu
 11015 ;;		_inputHandler
 11016 ;; This function uses a non-reentrant model
 11017 ;;
 11018                           
 11019                           	psect	text52
 11020  00270C                     __ptext52:
 11021                           	opt stack 0
 11022  00270C                     _change_state_to_logs_23:
 11023                           	opt stack 18
 11024                           
 11025                           ;UI.c: 477: cur_state = 1023;
 11026                           
 11027                           ;incstack = 0
 11028  00270C  0E03               	movlw	3
 11029  00270E  0100               	movlb	0	; () banked
 11030  002710  6FE0               	movwf	(_cur_state+1)& (0+255),b
 11031  002712  69DF               	setf	_cur_state& (0+255),b
 11032                           
 11033                           ; BSR set to: 0
 11034                           ;UI.c: 478: lcdInst(0b10000000);;
 11035  002714  0E80               	movlw	128
 11036  002716  EC8D  F014         	call	i2_lcdInst
 11037                           
 11038                           ;UI.c: 479: printf("LOG 2           ");
 11039  00271A  0E32               	movlw	low STR_25
 11040  00271C  6E0D               	movwf	i2printf@f,c
 11041  00271E  0EFE               	movlw	high STR_25
 11042  002720  6E0E               	movwf	i2printf@f+1,c
 11043  002722  ECC0  F004         	call	i2_printf	;wreg free
 11044                           
 11045                           ;UI.c: 480: lcdInst(0b11000000);;
 11046  002726  0EC0               	movlw	192
 11047  002728  EC8D  F014         	call	i2_lcdInst
 11048                           
 11049                           ;UI.c: 481: printf("LOG 3          <");
 11050  00272C  0E31               	movlw	low STR_31
 11051  00272E  6E0D               	movwf	i2printf@f,c
 11052  002730  0EFF               	movlw	high STR_31
 11053  002732  6E0E               	movwf	i2printf@f+1,c
 11054  002734  ECC0  F004         	call	i2_printf	;wreg free
 11055  002738  0012               	return		;funcret
 11056  00273A                     __end_of_change_state_to_logs_23:
 11057                           	opt stack 0
 11058                           pclatu	equ	0xFFB
 11059                           pclath	equ	0xFFA
 11060                           tblptru	equ	0xFF8
 11061                           tblptrh	equ	0xFF7
 11062                           tblptrl	equ	0xFF6
 11063                           tablat	equ	0xFF5
 11064                           prodh	equ	0xFF4
 11065                           prodl	equ	0xFF3
 11066                           intcon	equ	0xFF2
 11067                           intcon3	equ	0xFF0
 11068                           indf0	equ	0xFEF
 11069                           postinc0	equ	0xFEE
 11070                           fsr0h	equ	0xFEA
 11071                           fsr0l	equ	0xFE9
 11072                           wreg	equ	0xFE8
 11073                           postdec1	equ	0xFE5
 11074                           fsr1h	equ	0xFE2
 11075                           fsr1l	equ	0xFE1
 11076                           indf2	equ	0xFDF
 11077                           postinc2	equ	0xFDE
 11078                           postdec2	equ	0xFDD
 11079                           fsr2h	equ	0xFDA
 11080                           fsr2l	equ	0xFD9
 11081                           status	equ	0xFD8
 11082                           
 11083 ;; *************** function _change_state_to_logs_22 *****************
 11084 ;; Defined at:
 11085 ;;		line 469 in file "UI.c"
 11086 ;; Parameters:    Size  Location     Type
 11087 ;;		None
 11088 ;; Auto vars:     Size  Location     Type
 11089 ;;		None
 11090 ;; Return value:  Size  Location     Type
 11091 ;;                  1    wreg      void 
 11092 ;; Registers used:
 11093 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11094 ;; Tracked objects:
 11095 ;;		On entry : 0/0
 11096 ;;		On exit  : 0/0
 11097 ;;		Unchanged: 0/0
 11098 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11099 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11100 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11101 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11102 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11103 ;;Total ram usage:        0 bytes
 11104 ;; Hardware stack levels used:    1
 11105 ;; Hardware stack levels required when called:    3
 11106 ;; This function calls:
 11107 ;;		i2_lcdInst
 11108 ;;		i2_printf
 11109 ;; This function is called by:
 11110 ;;		_updateMenu
 11111 ;;		_inputHandler
 11112 ;; This function uses a non-reentrant model
 11113 ;;
 11114                           
 11115                           	psect	text53
 11116  002620                     __ptext53:
 11117                           	opt stack 0
 11118  002620                     _change_state_to_logs_22:
 11119                           	opt stack 18
 11120                           
 11121                           ;UI.c: 470: cur_state = 1022;
 11122                           
 11123                           ;incstack = 0
 11124  002620  0E03               	movlw	3
 11125  002622  0100               	movlb	0	; () banked
 11126  002624  6FE0               	movwf	(_cur_state+1)& (0+255),b
 11127  002626  0EFE               	movlw	254
 11128  002628  6FDF               	movwf	_cur_state& (0+255),b
 11129                           
 11130                           ; BSR set to: 0
 11131                           ;UI.c: 471: lcdInst(0b10000000);;
 11132  00262A  0E80               	movlw	128
 11133  00262C  EC8D  F014         	call	i2_lcdInst
 11134                           
 11135                           ;UI.c: 472: printf("LOG 2          <");
 11136  002630  0E20               	movlw	low STR_27
 11137  002632  6E0D               	movwf	i2printf@f,c
 11138  002634  0EFF               	movlw	high STR_27
 11139  002636  6E0E               	movwf	i2printf@f+1,c
 11140  002638  ECC0  F004         	call	i2_printf	;wreg free
 11141                           
 11142                           ;UI.c: 473: lcdInst(0b11000000);;
 11143  00263C  0EC0               	movlw	192
 11144  00263E  EC8D  F014         	call	i2_lcdInst
 11145                           
 11146                           ;UI.c: 474: printf("LOG 3           ");
 11147  002642  0E43               	movlw	low STR_29
 11148  002644  6E0D               	movwf	i2printf@f,c
 11149  002646  0EFE               	movlw	high STR_29
 11150  002648  6E0E               	movwf	i2printf@f+1,c
 11151  00264A  ECC0  F004         	call	i2_printf	;wreg free
 11152  00264E  0012               	return		;funcret
 11153  002650                     __end_of_change_state_to_logs_22:
 11154                           	opt stack 0
 11155                           pclatu	equ	0xFFB
 11156                           pclath	equ	0xFFA
 11157                           tblptru	equ	0xFF8
 11158                           tblptrh	equ	0xFF7
 11159                           tblptrl	equ	0xFF6
 11160                           tablat	equ	0xFF5
 11161                           prodh	equ	0xFF4
 11162                           prodl	equ	0xFF3
 11163                           intcon	equ	0xFF2
 11164                           intcon3	equ	0xFF0
 11165                           indf0	equ	0xFEF
 11166                           postinc0	equ	0xFEE
 11167                           fsr0h	equ	0xFEA
 11168                           fsr0l	equ	0xFE9
 11169                           wreg	equ	0xFE8
 11170                           postdec1	equ	0xFE5
 11171                           fsr1h	equ	0xFE2
 11172                           fsr1l	equ	0xFE1
 11173                           indf2	equ	0xFDF
 11174                           postinc2	equ	0xFDE
 11175                           postdec2	equ	0xFDD
 11176                           fsr2h	equ	0xFDA
 11177                           fsr2l	equ	0xFD9
 11178                           status	equ	0xFD8
 11179                           
 11180 ;; *************** function _change_state_to_logs_12 *****************
 11181 ;; Defined at:
 11182 ;;		line 462 in file "UI.c"
 11183 ;; Parameters:    Size  Location     Type
 11184 ;;		None
 11185 ;; Auto vars:     Size  Location     Type
 11186 ;;		None
 11187 ;; Return value:  Size  Location     Type
 11188 ;;                  1    wreg      void 
 11189 ;; Registers used:
 11190 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11191 ;; Tracked objects:
 11192 ;;		On entry : 0/0
 11193 ;;		On exit  : 0/0
 11194 ;;		Unchanged: 0/0
 11195 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11196 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11197 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11198 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11199 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11200 ;;Total ram usage:        0 bytes
 11201 ;; Hardware stack levels used:    1
 11202 ;; Hardware stack levels required when called:    3
 11203 ;; This function calls:
 11204 ;;		i2_lcdInst
 11205 ;;		i2_printf
 11206 ;; This function is called by:
 11207 ;;		_updateMenu
 11208 ;;		_inputHandler
 11209 ;; This function uses a non-reentrant model
 11210 ;;
 11211                           
 11212                           	psect	text54
 11213  002650                     __ptext54:
 11214                           	opt stack 0
 11215  002650                     _change_state_to_logs_12:
 11216                           	opt stack 18
 11217                           
 11218                           ;UI.c: 463: cur_state = 1012;
 11219                           
 11220                           ;incstack = 0
 11221  002650  0E03               	movlw	3
 11222  002652  0100               	movlb	0	; () banked
 11223  002654  6FE0               	movwf	(_cur_state+1)& (0+255),b
 11224  002656  0EF4               	movlw	244
 11225  002658  6FDF               	movwf	_cur_state& (0+255),b
 11226                           
 11227                           ; BSR set to: 0
 11228                           ;UI.c: 464: lcdInst(0b10000000);;
 11229  00265A  0E80               	movlw	128
 11230  00265C  EC8D  F014         	call	i2_lcdInst
 11231                           
 11232                           ;UI.c: 465: printf("LOG 1           ");
 11233  002660  0E21               	movlw	low STR_26
 11234  002662  6E0D               	movwf	i2printf@f,c
 11235  002664  0EFE               	movlw	high STR_26
 11236  002666  6E0E               	movwf	i2printf@f+1,c
 11237  002668  ECC0  F004         	call	i2_printf	;wreg free
 11238                           
 11239                           ;UI.c: 466: lcdInst(0b11000000);;
 11240  00266C  0EC0               	movlw	192
 11241  00266E  EC8D  F014         	call	i2_lcdInst
 11242                           
 11243                           ;UI.c: 467: printf("LOG 2          <");
 11244  002672  0E20               	movlw	low STR_27
 11245  002674  6E0D               	movwf	i2printf@f,c
 11246  002676  0EFF               	movlw	high STR_27
 11247  002678  6E0E               	movwf	i2printf@f+1,c
 11248  00267A  ECC0  F004         	call	i2_printf	;wreg free
 11249  00267E  0012               	return		;funcret
 11250  002680                     __end_of_change_state_to_logs_12:
 11251                           	opt stack 0
 11252                           pclatu	equ	0xFFB
 11253                           pclath	equ	0xFFA
 11254                           tblptru	equ	0xFF8
 11255                           tblptrh	equ	0xFF7
 11256                           tblptrl	equ	0xFF6
 11257                           tablat	equ	0xFF5
 11258                           prodh	equ	0xFF4
 11259                           prodl	equ	0xFF3
 11260                           intcon	equ	0xFF2
 11261                           intcon3	equ	0xFF0
 11262                           indf0	equ	0xFEF
 11263                           postinc0	equ	0xFEE
 11264                           fsr0h	equ	0xFEA
 11265                           fsr0l	equ	0xFE9
 11266                           wreg	equ	0xFE8
 11267                           postdec1	equ	0xFE5
 11268                           fsr1h	equ	0xFE2
 11269                           fsr1l	equ	0xFE1
 11270                           indf2	equ	0xFDF
 11271                           postinc2	equ	0xFDE
 11272                           postdec2	equ	0xFDD
 11273                           fsr2h	equ	0xFDA
 11274                           fsr2l	equ	0xFD9
 11275                           status	equ	0xFD8
 11276                           
 11277 ;; *************** function _change_state_to_logs_11 *****************
 11278 ;; Defined at:
 11279 ;;		line 455 in file "UI.c"
 11280 ;; Parameters:    Size  Location     Type
 11281 ;;		None
 11282 ;; Auto vars:     Size  Location     Type
 11283 ;;		None
 11284 ;; Return value:  Size  Location     Type
 11285 ;;                  1    wreg      void 
 11286 ;; Registers used:
 11287 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11288 ;; Tracked objects:
 11289 ;;		On entry : 0/0
 11290 ;;		On exit  : 0/0
 11291 ;;		Unchanged: 0/0
 11292 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11293 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11294 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11295 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11296 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11297 ;;Total ram usage:        0 bytes
 11298 ;; Hardware stack levels used:    1
 11299 ;; Hardware stack levels required when called:    3
 11300 ;; This function calls:
 11301 ;;		i2_lcdInst
 11302 ;;		i2_printf
 11303 ;; This function is called by:
 11304 ;;		_updateMenu
 11305 ;;		_inputHandler
 11306 ;; This function uses a non-reentrant model
 11307 ;;
 11308                           
 11309                           	psect	text55
 11310  002680                     __ptext55:
 11311                           	opt stack 0
 11312  002680                     _change_state_to_logs_11:
 11313                           	opt stack 18
 11314                           
 11315                           ;UI.c: 456: cur_state = 1011;
 11316                           
 11317                           ;incstack = 0
 11318  002680  0E03               	movlw	3
 11319  002682  0100               	movlb	0	; () banked
 11320  002684  6FE0               	movwf	(_cur_state+1)& (0+255),b
 11321  002686  0EF3               	movlw	243
 11322  002688  6FDF               	movwf	_cur_state& (0+255),b
 11323                           
 11324                           ; BSR set to: 0
 11325                           ;UI.c: 457: lcdInst(0b10000000);;
 11326  00268A  0E80               	movlw	128
 11327  00268C  EC8D  F014         	call	i2_lcdInst
 11328                           
 11329                           ;UI.c: 458: printf("LOG 1          <");
 11330  002690  0E0F               	movlw	low STR_24
 11331  002692  6E0D               	movwf	i2printf@f,c
 11332  002694  0EFF               	movlw	high STR_24
 11333  002696  6E0E               	movwf	i2printf@f+1,c
 11334  002698  ECC0  F004         	call	i2_printf	;wreg free
 11335                           
 11336                           ;UI.c: 459: lcdInst(0b11000000);;
 11337  00269C  0EC0               	movlw	192
 11338  00269E  EC8D  F014         	call	i2_lcdInst
 11339                           
 11340                           ;UI.c: 460: printf("LOG 2           ");
 11341  0026A2  0E32               	movlw	low STR_25
 11342  0026A4  6E0D               	movwf	i2printf@f,c
 11343  0026A6  0EFE               	movlw	high STR_25
 11344  0026A8  6E0E               	movwf	i2printf@f+1,c
 11345  0026AA  ECC0  F004         	call	i2_printf	;wreg free
 11346  0026AE  0012               	return		;funcret
 11347  0026B0                     __end_of_change_state_to_logs_11:
 11348                           	opt stack 0
 11349                           pclatu	equ	0xFFB
 11350                           pclath	equ	0xFFA
 11351                           tblptru	equ	0xFF8
 11352                           tblptrh	equ	0xFF7
 11353                           tblptrl	equ	0xFF6
 11354                           tablat	equ	0xFF5
 11355                           prodh	equ	0xFF4
 11356                           prodl	equ	0xFF3
 11357                           intcon	equ	0xFF2
 11358                           intcon3	equ	0xFF0
 11359                           indf0	equ	0xFEF
 11360                           postinc0	equ	0xFEE
 11361                           fsr0h	equ	0xFEA
 11362                           fsr0l	equ	0xFE9
 11363                           wreg	equ	0xFE8
 11364                           postdec1	equ	0xFE5
 11365                           fsr1h	equ	0xFE2
 11366                           fsr1l	equ	0xFE1
 11367                           indf2	equ	0xFDF
 11368                           postinc2	equ	0xFDE
 11369                           postdec2	equ	0xFDD
 11370                           fsr2h	equ	0xFDA
 11371                           fsr2l	equ	0xFD9
 11372                           status	equ	0xFD8
 11373                           
 11374 ;; *************** function _dispLogs *****************
 11375 ;; Defined at:
 11376 ;;		line 409 in file "UI.c"
 11377 ;; Parameters:    Size  Location     Type
 11378 ;;  myLog           2    0[COMRAM] int 
 11379 ;; Auto vars:     Size  Location     Type
 11380 ;;		None
 11381 ;; Return value:  Size  Location     Type
 11382 ;;                  1    wreg      void 
 11383 ;; Registers used:
 11384 ;;		wreg, status,2
 11385 ;; Tracked objects:
 11386 ;;		On entry : 0/0
 11387 ;;		On exit  : 0/0
 11388 ;;		Unchanged: 0/0
 11389 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11390 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11391 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11392 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11393 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11394 ;;Total ram usage:        2 bytes
 11395 ;; Hardware stack levels used:    1
 11396 ;; This function calls:
 11397 ;;		Nothing
 11398 ;; This function is called by:
 11399 ;;		_updateMenu
 11400 ;; This function uses a non-reentrant model
 11401 ;;
 11402                           
 11403                           	psect	text56
 11404  0028AA                     __ptext56:
 11405                           	opt stack 0
 11406  0028AA                     _dispLogs:
 11407                           	opt stack 22
 11408                           
 11409                           ;UI.c: 410: logstate = 1;
 11410                           
 11411                           ;incstack = 0
 11412  0028AA  0E00               	movlw	0
 11413  0028AC  0100               	movlb	0	; () banked
 11414  0028AE  6FEE               	movwf	(_logstate+1)& (0+255),b
 11415  0028B0  0E01               	movlw	1
 11416  0028B2  6FED               	movwf	_logstate& (0+255),b
 11417                           
 11418                           ; BSR set to: 0
 11419                           ;UI.c: 411: log = myLog;
 11420  0028B4  C001  F0EB         	movff	dispLogs@myLog,_log
 11421  0028B8  C002  F0EC         	movff	dispLogs@myLog+1,_log+1
 11422                           
 11423                           ; BSR set to: 0
 11424  0028BC  0012               	return		;funcret
 11425  0028BE                     __end_of_dispLogs:
 11426                           	opt stack 0
 11427                           pclatu	equ	0xFFB
 11428                           pclath	equ	0xFFA
 11429                           tblptru	equ	0xFF8
 11430                           tblptrh	equ	0xFF7
 11431                           tblptrl	equ	0xFF6
 11432                           tablat	equ	0xFF5
 11433                           prodh	equ	0xFF4
 11434                           prodl	equ	0xFF3
 11435                           intcon	equ	0xFF2
 11436                           intcon3	equ	0xFF0
 11437                           indf0	equ	0xFEF
 11438                           postinc0	equ	0xFEE
 11439                           fsr0h	equ	0xFEA
 11440                           fsr0l	equ	0xFE9
 11441                           wreg	equ	0xFE8
 11442                           postdec1	equ	0xFE5
 11443                           fsr1h	equ	0xFE2
 11444                           fsr1l	equ	0xFE1
 11445                           indf2	equ	0xFDF
 11446                           postinc2	equ	0xFDE
 11447                           postdec2	equ	0xFDD
 11448                           fsr2h	equ	0xFDA
 11449                           fsr2l	equ	0xFD9
 11450                           status	equ	0xFD8
 11451                           
 11452 ;; *************** function _printSortTimer *****************
 11453 ;; Defined at:
 11454 ;;		line 145 in file "sort.c"
 11455 ;; Parameters:    Size  Location     Type
 11456 ;;		None
 11457 ;; Auto vars:     Size  Location     Type
 11458 ;;  i               2   72[COMRAM] int 
 11459 ;;  curTime        14   44[COMRAM] int [7]
 11460 ;;  timeDiff        2   70[COMRAM] unsigned int 
 11461 ;;  sec             2   66[COMRAM] int 
 11462 ;;  min             2   64[COMRAM] int 
 11463 ;;  hour            2   62[COMRAM] int 
 11464 ;;  cur_sec         2   60[COMRAM] unsigned int 
 11465 ;;  start_sec       2   58[COMRAM] unsigned int 
 11466 ;; Return value:  Size  Location     Type
 11467 ;;                  1    wreg      void 
 11468 ;; Registers used:
 11469 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11470 ;; Tracked objects:
 11471 ;;		On entry : 0/0
 11472 ;;		On exit  : 0/0
 11473 ;;		Unchanged: 0/0
 11474 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11475 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11476 ;;      Locals:        30       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11477 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11478 ;;      Totals:        33       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11479 ;;Total ram usage:       33 bytes
 11480 ;; Hardware stack levels used:    1
 11481 ;; Hardware stack levels required when called:    3
 11482 ;; This function calls:
 11483 ;;		i2___lwdiv
 11484 ;;		i2___lwmod
 11485 ;;		i2___wmul
 11486 ;;		i2_getRTC
 11487 ;;		i2_lcdInst
 11488 ;;		i2_printf
 11489 ;; This function is called by:
 11490 ;;		_handler
 11491 ;; This function uses a non-reentrant model
 11492 ;;
 11493                           
 11494                           	psect	text57
 11495  001486                     __ptext57:
 11496                           	opt stack 0
 11497  001486                     _printSortTimer:
 11498                           	opt stack 20
 11499                           
 11500                           ;sort.c: 146: getRTC();
 11501                           
 11502                           ; BSR set to: 0
 11503                           ;incstack = 0
 11504  001486  EC0D  F010         	call	i2_getRTC	;wreg free
 11505                           
 11506                           ;sort.c: 147: int curTime[7];
 11507                           ;sort.c: 148: for(int i = 0; i < 7; i++){
 11508  00148A  0E00               	movlw	0
 11509  00148C  6E4A               	movwf	printSortTimer@i+1,c
 11510  00148E  0E00               	movlw	0
 11511  001490  6E49               	movwf	printSortTimer@i,c
 11512  001492                     i2l5509:
 11513  001492  BE4A               	btfsc	printSortTimer@i+1,7,c
 11514  001494  D006               	goto	i2l5513
 11515  001496  504A               	movf	printSortTimer@i+1,w,c
 11516  001498  E131               	bnz	i2l5519
 11517  00149A  0E07               	movlw	7
 11518  00149C  5C49               	subwf	printSortTimer@i,w,c
 11519  00149E  B0D8               	btfsc	status,0,c
 11520  0014A0  D02D               	goto	i2l5519
 11521  0014A2                     i2l5513:
 11522                           
 11523                           ;sort.c: 149: curTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 11524  0014A2  0ED4               	movlw	low _time
 11525  0014A4  2449               	addwf	printSortTimer@i,w,c
 11526  0014A6  6ED9               	movwf	fsr2l,c
 11527  0014A8  0E00               	movlw	high _time
 11528  0014AA  204A               	addwfc	printSortTimer@i+1,w,c
 11529  0014AC  6EDA               	movwf	fsr2h,c
 11530  0014AE  50DF               	movf	indf2,w,c
 11531  0014B0  6E2A               	movwf	??_printSortTimer& (0+255),c
 11532  0014B2  3A2A               	swapf	??_printSortTimer,f,c
 11533  0014B4  0E0F               	movlw	15
 11534  0014B6  162A               	andwf	??_printSortTimer,f,c
 11535  0014B8  0E0F               	movlw	15
 11536  0014BA  162A               	andwf	??_printSortTimer,f,c
 11537  0014BC  502A               	movf	??_printSortTimer,w,c
 11538  0014BE  0D0A               	mullw	10
 11539  0014C0  0ED4               	movlw	low _time
 11540  0014C2  2449               	addwf	printSortTimer@i,w,c
 11541  0014C4  6ED9               	movwf	fsr2l,c
 11542  0014C6  0E00               	movlw	high _time
 11543  0014C8  204A               	addwfc	printSortTimer@i+1,w,c
 11544  0014CA  6EDA               	movwf	fsr2h,c
 11545  0014CC  50DF               	movf	indf2,w,c
 11546  0014CE  0B0F               	andlw	15
 11547  0014D0  6E2B               	movwf	(??_printSortTimer+1)& (0+255),c
 11548  0014D2  6A2C               	clrf	(??_printSortTimer+2)& (0+255),c
 11549  0014D4  50F3               	movf	prodl,w,c
 11550  0014D6  262B               	addwf	??_printSortTimer+1,f,c
 11551  0014D8  50F4               	movf	prodh,w,c
 11552  0014DA  222C               	addwfc	??_printSortTimer+2,f,c
 11553  0014DC  90D8               	bcf	status,0,c
 11554  0014DE  3449               	rlcf	printSortTimer@i,w,c
 11555  0014E0  6ED9               	movwf	fsr2l,c
 11556  0014E2  344A               	rlcf	printSortTimer@i+1,w,c
 11557  0014E4  6EDA               	movwf	fsr2h,c
 11558  0014E6  0E2D               	movlw	low printSortTimer@curTime
 11559  0014E8  26D9               	addwf	fsr2l,f,c
 11560  0014EA  0E00               	movlw	high printSortTimer@curTime
 11561  0014EC  22DA               	addwfc	fsr2h,f,c
 11562  0014EE  C02B  FFDE         	movff	??_printSortTimer+1,postinc2
 11563  0014F2  C02C  FFDD         	movff	??_printSortTimer+2,postdec2
 11564  0014F6  4A49               	infsnz	printSortTimer@i,f,c
 11565  0014F8  2A4A               	incf	printSortTimer@i+1,f,c
 11566  0014FA  D7CB               	goto	i2l5509
 11567  0014FC                     i2l5519:
 11568                           
 11569                           ;sort.c: 150: }
 11570                           ;sort.c: 151: unsigned int start_sec = startTime[0] + startTime[1]*60 + startTime[2]*360
      +                          0;
 11571  0014FC  C102  F001         	movff	_startTime+2,i2___wmul@multiplier
 11572  001500  C103  F002         	movff	_startTime+3,i2___wmul@multiplier+1
 11573  001504  0E00               	movlw	0
 11574  001506  6E04               	movwf	i2___wmul@multiplicand+1,c
 11575  001508  0E3C               	movlw	60
 11576  00150A  6E03               	movwf	i2___wmul@multiplicand,c
 11577  00150C  ECDC  F013         	call	i2___wmul	;wreg free
 11578  001510  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 11579  001514  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 11580  001518  C104  F001         	movff	_startTime+4,i2___wmul@multiplier
 11581  00151C  C105  F002         	movff	_startTime+5,i2___wmul@multiplier+1
 11582  001520  0E0E               	movlw	14
 11583  001522  6E04               	movwf	i2___wmul@multiplicand+1,c
 11584  001524  0E10               	movlw	16
 11585  001526  6E03               	movwf	i2___wmul@multiplicand,c
 11586  001528  ECDC  F013         	call	i2___wmul	;wreg free
 11587  00152C  5001               	movf	?i2___wmul,w,c
 11588  00152E  262A               	addwf	??_printSortTimer,f,c
 11589  001530  5002               	movf	?i2___wmul+1,w,c
 11590  001532  222B               	addwfc	??_printSortTimer+1,f,c
 11591  001534  0101               	movlb	1	; () banked
 11592  001536  5100               	movf	_startTime& (0+255),w,b
 11593  001538  242A               	addwf	??_printSortTimer,w,c
 11594  00153A  6E3B               	movwf	printSortTimer@start_sec,c
 11595  00153C  0101               	movlb	1	; () banked
 11596  00153E  5101               	movf	(_startTime+1)& (0+255),w,b
 11597  001540  202B               	addwfc	??_printSortTimer+1,w,c
 11598  001542  6E3C               	movwf	printSortTimer@start_sec+1,c
 11599                           
 11600                           ;sort.c: 152: unsigned int cur_sec = curTime[0] + curTime[1]*60 + curTime[2]*3600;
 11601  001544  C02F  F001         	movff	printSortTimer@curTime+2,i2___wmul@multiplier
 11602  001548  C030  F002         	movff	printSortTimer@curTime+3,i2___wmul@multiplier+1
 11603  00154C  0E00               	movlw	0
 11604  00154E  6E04               	movwf	i2___wmul@multiplicand+1,c
 11605  001550  0E3C               	movlw	60
 11606  001552  6E03               	movwf	i2___wmul@multiplicand,c
 11607  001554  ECDC  F013         	call	i2___wmul	;wreg free
 11608  001558  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 11609  00155C  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 11610  001560  C031  F001         	movff	printSortTimer@curTime+4,i2___wmul@multiplier
 11611  001564  C032  F002         	movff	printSortTimer@curTime+5,i2___wmul@multiplier+1
 11612  001568  0E0E               	movlw	14
 11613  00156A  6E04               	movwf	i2___wmul@multiplicand+1,c
 11614  00156C  0E10               	movlw	16
 11615  00156E  6E03               	movwf	i2___wmul@multiplicand,c
 11616  001570  ECDC  F013         	call	i2___wmul	;wreg free
 11617  001574  5001               	movf	?i2___wmul,w,c
 11618  001576  262A               	addwf	??_printSortTimer,f,c
 11619  001578  5002               	movf	?i2___wmul+1,w,c
 11620  00157A  222B               	addwfc	??_printSortTimer+1,f,c
 11621  00157C  502D               	movf	printSortTimer@curTime,w,c
 11622  00157E  242A               	addwf	??_printSortTimer,w,c
 11623  001580  6E3D               	movwf	printSortTimer@cur_sec,c
 11624  001582  502E               	movf	printSortTimer@curTime+1,w,c
 11625  001584  202B               	addwfc	??_printSortTimer+1,w,c
 11626  001586  6E3E               	movwf	printSortTimer@cur_sec+1,c
 11627                           
 11628                           ;sort.c: 153: unsigned int timeDiff = cur_sec - start_sec;
 11629  001588  C03B  F02A         	movff	printSortTimer@start_sec,??_printSortTimer
 11630  00158C  C03C  F02B         	movff	printSortTimer@start_sec+1,??_printSortTimer+1
 11631  001590  1E2A               	comf	??_printSortTimer,f,c
 11632  001592  1E2B               	comf	??_printSortTimer+1,f,c
 11633  001594  4A2A               	infsnz	??_printSortTimer,f,c
 11634  001596  2A2B               	incf	??_printSortTimer+1,f,c
 11635  001598  503D               	movf	printSortTimer@cur_sec,w,c
 11636  00159A  242A               	addwf	??_printSortTimer,w,c
 11637  00159C  6E47               	movwf	printSortTimer@timeDiff,c
 11638  00159E  503E               	movf	printSortTimer@cur_sec+1,w,c
 11639  0015A0  202B               	addwfc	??_printSortTimer+1,w,c
 11640  0015A2  6E48               	movwf	printSortTimer@timeDiff+1,c
 11641                           
 11642                           ;sort.c: 155: total_time = timeDiff;
 11643  0015A4  C047  F0EF         	movff	printSortTimer@timeDiff,_total_time
 11644  0015A8  C048  F0F0         	movff	printSortTimer@timeDiff+1,_total_time+1
 11645                           
 11646                           ;sort.c: 157: if(timeDiff >= 10){
 11647  0015AC  5048               	movf	printSortTimer@timeDiff+1,w,c
 11648  0015AE  E104               	bnz	i2u447_40
 11649  0015B0  0E0A               	movlw	10
 11650  0015B2  5C47               	subwf	printSortTimer@timeDiff,w,c
 11651  0015B4  A0D8               	btfss	status,0,c
 11652  0015B6  D003               	goto	i2l5529
 11653  0015B8                     i2u447_40:
 11654                           
 11655                           ;sort.c: 158: machine_state = DoneSorting_state;
 11656  0015B8  0E02               	movlw	2
 11657  0015BA  0100               	movlb	0	; () banked
 11658  0015BC  6FF1               	movwf	_machine_state& (0+255),b
 11659  0015BE                     i2l5529:
 11660                           
 11661                           ;sort.c: 160: }
 11662                           ;sort.c: 162: int hour = timeDiff / 3600;
 11663  0015BE  C047  F006         	movff	printSortTimer@timeDiff,i2___lwdiv@dividend
 11664  0015C2  C048  F007         	movff	printSortTimer@timeDiff+1,i2___lwdiv@dividend+1
 11665  0015C6  0E0E               	movlw	14
 11666  0015C8  6E09               	movwf	i2___lwdiv@divisor+1,c
 11667  0015CA  0E10               	movlw	16
 11668  0015CC  6E08               	movwf	i2___lwdiv@divisor,c
 11669  0015CE  EC3D  F011         	call	i2___lwdiv	;wreg free
 11670  0015D2  C006  F03F         	movff	?i2___lwdiv,printSortTimer@hour
 11671  0015D6  C007  F040         	movff	?i2___lwdiv+1,printSortTimer@hour+1
 11672                           
 11673                           ;sort.c: 163: int min = (timeDiff % 3600) / 60;
 11674  0015DA  0E0E               	movlw	14
 11675  0015DC  6E04               	movwf	i2___lwmod@divisor+1,c
 11676  0015DE  0E10               	movlw	16
 11677  0015E0  6E03               	movwf	i2___lwmod@divisor,c
 11678  0015E2  C047  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 11679  0015E6  C048  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 11680  0015EA  ECD8  F011         	call	i2___lwmod	;wreg free
 11681  0015EE  C001  F006         	movff	?i2___lwmod,i2___lwdiv@dividend
 11682  0015F2  C002  F007         	movff	?i2___lwmod+1,i2___lwdiv@dividend+1
 11683  0015F6  0E00               	movlw	0
 11684  0015F8  6E09               	movwf	i2___lwdiv@divisor+1,c
 11685  0015FA  0E3C               	movlw	60
 11686  0015FC  6E08               	movwf	i2___lwdiv@divisor,c
 11687  0015FE  EC3D  F011         	call	i2___lwdiv	;wreg free
 11688  001602  C006  F041         	movff	?i2___lwdiv,printSortTimer@min
 11689  001606  C007  F042         	movff	?i2___lwdiv+1,printSortTimer@min+1
 11690                           
 11691                           ;sort.c: 164: int sec = (timeDiff % 3600) % 60;
 11692  00160A  0E0E               	movlw	14
 11693  00160C  6E04               	movwf	i2___lwmod@divisor+1,c
 11694  00160E  0E10               	movlw	16
 11695  001610  6E03               	movwf	i2___lwmod@divisor,c
 11696  001612  C047  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 11697  001616  C048  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 11698  00161A  ECD8  F011         	call	i2___lwmod	;wreg free
 11699  00161E  C001  F045         	movff	?i2___lwmod,_printSortTimer$2171
 11700  001622  C002  F046         	movff	?i2___lwmod+1,_printSortTimer$2171+1
 11701                           
 11702                           ;sort.c: 164: int sec = (timeDiff % 3600) % 60;
 11703  001626  C045  F001         	movff	_printSortTimer$2171,i2___lwmod@dividend
 11704  00162A  C046  F002         	movff	_printSortTimer$2171+1,i2___lwmod@dividend+1
 11705  00162E  0E00               	movlw	0
 11706  001630  6E04               	movwf	i2___lwmod@divisor+1,c
 11707  001632  0E3C               	movlw	60
 11708  001634  6E03               	movwf	i2___lwmod@divisor,c
 11709  001636  ECD8  F011         	call	i2___lwmod	;wreg free
 11710  00163A  C001  F043         	movff	?i2___lwmod,printSortTimer@sec
 11711  00163E  C002  F044         	movff	?i2___lwmod+1,printSortTimer@sec+1
 11712                           
 11713                           ;sort.c: 166: lcdInst(0b10000000);;
 11714  001642  0E80               	movlw	128
 11715  001644  EC8D  F014         	call	i2_lcdInst
 11716                           
 11717                           ;sort.c: 167: printf("Sorting...");
 11718  001648  0EA8               	movlw	low STR_49
 11719  00164A  6E0D               	movwf	i2printf@f,c
 11720  00164C  0EFF               	movlw	high STR_49
 11721  00164E  6E0E               	movwf	i2printf@f+1,c
 11722  001650  ECC0  F004         	call	i2_printf	;wreg free
 11723                           
 11724                           ;sort.c: 168: lcdInst(0b11000000);;
 11725  001654  0EC0               	movlw	192
 11726  001656  EC8D  F014         	call	i2_lcdInst
 11727                           
 11728                           ;sort.c: 169: printf("Time: %02d:%02d:%02d", hour, min, sec);
 11729  00165A  0EE8               	movlw	low STR_2
 11730  00165C  6E0D               	movwf	i2printf@f,c
 11731  00165E  0EFD               	movlw	high STR_2
 11732  001660  6E0E               	movwf	i2printf@f+1,c
 11733  001662  C03F  F00F         	movff	printSortTimer@hour,?i2_printf+2
 11734  001666  C040  F010         	movff	printSortTimer@hour+1,?i2_printf+3
 11735  00166A  C041  F011         	movff	printSortTimer@min,?i2_printf+4
 11736  00166E  C042  F012         	movff	printSortTimer@min+1,?i2_printf+5
 11737  001672  C043  F013         	movff	printSortTimer@sec,?i2_printf+6
 11738  001676  C044  F014         	movff	printSortTimer@sec+1,?i2_printf+7
 11739  00167A  ECC0  F004         	call	i2_printf	;wreg free
 11740  00167E  0012               	return		;funcret
 11741  001680                     __end_of_printSortTimer:
 11742                           	opt stack 0
 11743                           pclatu	equ	0xFFB
 11744                           pclath	equ	0xFFA
 11745                           tblptru	equ	0xFF8
 11746                           tblptrh	equ	0xFF7
 11747                           tblptrl	equ	0xFF6
 11748                           tablat	equ	0xFF5
 11749                           prodh	equ	0xFF4
 11750                           prodl	equ	0xFF3
 11751                           intcon	equ	0xFF2
 11752                           intcon3	equ	0xFF0
 11753                           indf0	equ	0xFEF
 11754                           postinc0	equ	0xFEE
 11755                           fsr0h	equ	0xFEA
 11756                           fsr0l	equ	0xFE9
 11757                           wreg	equ	0xFE8
 11758                           postdec1	equ	0xFE5
 11759                           fsr1h	equ	0xFE2
 11760                           fsr1l	equ	0xFE1
 11761                           indf2	equ	0xFDF
 11762                           postinc2	equ	0xFDE
 11763                           postdec2	equ	0xFDD
 11764                           fsr2h	equ	0xFDA
 11765                           fsr2l	equ	0xFD9
 11766                           status	equ	0xFD8
 11767                           
 11768 ;; *************** function i2_printf *****************
 11769 ;; Defined at:
 11770 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 11771 ;; Parameters:    Size  Location     Type
 11772 ;;  f               2   12[COMRAM] PTR const unsigned char 
 11773 ;;		 -> STR_50(21), STR_49(11), STR_48(24), STR_35(17), 
 11774 ;;		 -> STR_34(17), STR_33(17), STR_32(17), STR_31(17), 
 11775 ;;		 -> STR_30(17), STR_29(17), STR_28(17), STR_27(17), 
 11776 ;;		 -> STR_26(17), STR_25(17), STR_24(17), STR_23(17), 
 11777 ;;		 -> STR_22(17), STR_21(17), STR_20(17), STR_19(17), 
 11778 ;;		 -> STR_18(17), STR_17(17), STR_16(17), STR_15(17), 
 11779 ;;		 -> STR_14(3), STR_13(17), STR_12(17), STR_11(17), 
 11780 ;;		 -> STR_10(17), STR_9(17), STR_8(18), STR_7(10), 
 11781 ;;		 -> STR_6(17), STR_5(7), STR_4(17), STR_3(18), 
 11782 ;;		 -> STR_2(21), STR_1(17), 
 11783 ;; Auto vars:     Size  Location     Type
 11784 ;;  printf          4    0        struct .
 11785 ;;  printf          2   39[COMRAM] int 
 11786 ;;  printf          2   35[COMRAM] unsigned int 
 11787 ;;  printf          2   33[COMRAM] unsigned int 
 11788 ;;  printf          2   31[COMRAM] PTR const unsigned char 
 11789 ;;		 -> STR_51(7), printRTC@month(4), 
 11790 ;;  printf          2   29[COMRAM] PTR void [1]
 11791 ;;		 -> ?i2_printf(2), ?_printf(2), 
 11792 ;;  printf          1   38[COMRAM] char 
 11793 ;;  printf          1   37[COMRAM] unsigned char 
 11794 ;;  printf          1   28[COMRAM] char 
 11795 ;; Return value:  Size  Location     Type
 11796 ;;                  2   12[COMRAM] int 
 11797 ;; Registers used:
 11798 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11799 ;; Tracked objects:
 11800 ;;		On entry : 0/0
 11801 ;;		On exit  : 0/0
 11802 ;;		Unchanged: 0/0
 11803 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11804 ;;      Params:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11805 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11806 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11807 ;;      Totals:        29       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11808 ;;Total ram usage:       29 bytes
 11809 ;; Hardware stack levels used:    1
 11810 ;; Hardware stack levels required when called:    2
 11811 ;; This function calls:
 11812 ;;		i2___lwdiv
 11813 ;;		i2___lwmod
 11814 ;;		i2___wmul
 11815 ;;		i2_isdigit
 11816 ;;		i2_putch
 11817 ;; This function is called by:
 11818 ;;		_change_state_to_menu_11
 11819 ;;		_change_state_to_menu_23
 11820 ;;		_change_state_to_logs_11
 11821 ;;		_change_state_to_logs_12
 11822 ;;		_change_state_to_logs_22
 11823 ;;		_change_state_to_logs_23
 11824 ;;		_change_state_to_logs_33
 11825 ;;		_change_state_to_logs_34
 11826 ;;		_printSortTimer
 11827 ;;		i2_change_state_to_menu_start
 11828 ;;		i2_change_state_to_menu_12
 11829 ;;		i2_change_state_to_menu_22
 11830 ;;		i2_printRTC
 11831 ;; This function uses a non-reentrant model
 11832 ;;
 11833                           
 11834                           	psect	text58
 11835  000980                     __ptext58:
 11836                           	opt stack 0
 11837  000980                     i2_printf:
 11838                           	opt stack 19
 11839                           
 11840                           ;doprnt.c: 466: va_list ap;
 11841                           ;doprnt.c: 499: signed char c;
 11842                           ;doprnt.c: 501: int width;
 11843                           ;doprnt.c: 506: signed char prec;
 11844                           ;doprnt.c: 508: unsigned char flag;
 11845                           ;doprnt.c: 523: union {
 11846                           ;doprnt.c: 524: unsigned long vd;
 11847                           ;doprnt.c: 525: double integ;
 11848                           ;doprnt.c: 526: } tmpval;
 11849                           ;doprnt.c: 528: unsigned int val;
 11850                           ;doprnt.c: 529: unsigned len;
 11851                           ;doprnt.c: 530: const char * cp;
 11852                           ;doprnt.c: 533: *ap = __va_start();
 11853                           
 11854                           ;incstack = 0
 11855  000980  0E0F               	movlw	low (?i2_printf+2)
 11856  000982  6E1E               	movwf	i2printf@ap,c
 11857  000984  0E00               	movlw	high (?i2_printf+2)
 11858  000986  6E1F               	movwf	i2printf@ap+1,c
 11859                           
 11860                           ;doprnt.c: 536: while(c = *f++) {
 11861  000988  D190               	goto	i2l4357
 11862  00098A                     i2l4233:
 11863                           
 11864                           ;doprnt.c: 538: if(c != '%')
 11865  00098A  0E25               	movlw	37
 11866  00098C  1827               	xorwf	i2printf@c,w,c
 11867  00098E  B4D8               	btfsc	status,2,c
 11868  000990  D004               	goto	i2l4237
 11869                           
 11870                           ;doprnt.c: 540: {
 11871                           ;doprnt.c: 541: (putch(c) );
 11872  000992  5027               	movf	i2printf@c,w,c
 11873  000994  EC87  F014         	call	i2_putch
 11874                           
 11875                           ;doprnt.c: 542: continue;
 11876  000998  D188               	goto	i2l4357
 11877  00099A                     i2l4237:
 11878                           
 11879                           ;doprnt.c: 543: }
 11880                           ;doprnt.c: 546: width = 0;
 11881  00099A  0E00               	movlw	0
 11882  00099C  6E29               	movwf	i2printf@width+1,c
 11883  00099E  0E00               	movlw	0
 11884  0009A0  6E28               	movwf	i2printf@width,c
 11885                           
 11886                           ;doprnt.c: 548: flag = 0;
 11887  0009A2  0E00               	movlw	0
 11888  0009A4  6E26               	movwf	i2printf@flag,c
 11889                           
 11890                           ;doprnt.c: 551: switch(*f) {
 11891                           
 11892                           ;doprnt.c: 550: for(;;) {
 11893  0009A6  D003               	goto	i2l4243
 11894  0009A8                     i2l4239:
 11895                           
 11896                           ;doprnt.c: 580: flag |= 0x04;
 11897  0009A8  8426               	bsf	i2printf@flag,2,c
 11898                           
 11899                           ;doprnt.c: 581: f++;
 11900  0009AA  4A0D               	infsnz	i2printf@f,f,c
 11901  0009AC  2A0E               	incf	i2printf@f+1,f,c
 11902  0009AE                     i2l4243:
 11903  0009AE  C00D  FFF6         	movff	i2printf@f,tblptrl
 11904  0009B2  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 11905  0009B6                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 11906  0009B6  6AF8               	clrf	tblptru,c
 11907  0009B8                     	endif
 11908  0009B8                     	if	0	;tblptru may be non-zero
 11909  0009B8                     	endif
 11910  0009B8  0008               	tblrd		*
 11911  0009BA  50F5               	movf	tablat,w,c
 11912                           
 11913                           ; Switch size 1, requested type "space"
 11914                           ; Number of cases is 1, Range of values is 48 to 48
 11915                           ; switch strategies available:
 11916                           ; Name         Instructions Cycles
 11917                           ; simple_byte            4     3 (average)
 11918                           ;	Chosen strategy is simple_byte
 11919  0009BC  0A30               	xorlw	48	; case 48
 11920  0009BE  B4D8               	btfsc	status,2,c
 11921  0009C0  D7F3               	goto	i2l4239
 11922                           
 11923                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 11924                           
 11925                           ;doprnt.c: 586: }
 11926                           
 11927                           ;doprnt.c: 585: break;
 11928  0009C2  C00D  FFF6         	movff	i2printf@f,tblptrl
 11929  0009C6  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 11930  0009CA                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 11931  0009CA  6AF8               	clrf	tblptru,c
 11932  0009CC                     	endif
 11933  0009CC                     	if	0	;tblptru may be non-zero
 11934  0009CC                     	endif
 11935  0009CC  0008               	tblrd		*
 11936  0009CE  50F5               	movf	tablat,w,c
 11937  0009D0  EC24  F014         	call	i2_isdigit
 11938  0009D4  A0D8               	btfss	status,0,c
 11939  0009D6  D0A4               	goto	i2l4289
 11940                           
 11941                           ;doprnt.c: 598: width = 0;
 11942  0009D8  0E00               	movlw	0
 11943  0009DA  6E29               	movwf	i2printf@width+1,c
 11944  0009DC  0E00               	movlw	0
 11945  0009DE  6E28               	movwf	i2printf@width,c
 11946  0009E0                     i2l4249:
 11947                           
 11948                           ;doprnt.c: 600: width *= 10;
 11949  0009E0  C028  F001         	movff	i2printf@width,i2___wmul@multiplier
 11950  0009E4  C029  F002         	movff	i2printf@width+1,i2___wmul@multiplier+1
 11951  0009E8  0E00               	movlw	0
 11952  0009EA  6E04               	movwf	i2___wmul@multiplicand+1,c
 11953  0009EC  0E0A               	movlw	10
 11954  0009EE  6E03               	movwf	i2___wmul@multiplicand,c
 11955  0009F0  ECDC  F013         	call	i2___wmul	;wreg free
 11956  0009F4  C001  F028         	movff	?i2___wmul,i2printf@width
 11957  0009F8  C002  F029         	movff	?i2___wmul+1,i2printf@width+1
 11958                           
 11959                           ;doprnt.c: 601: width += *f++ - '0';
 11960  0009FC  0ED0               	movlw	208
 11961  0009FE  6E19               	movwf	??i2_printf& (0+255),c
 11962  000A00  0EFF               	movlw	255
 11963  000A02  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 11964  000A04  C00D  FFF6         	movff	i2printf@f,tblptrl
 11965  000A08  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 11966  000A0C                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 11967  000A0C  6AF8               	clrf	tblptru,c
 11968  000A0E                     	endif
 11969  000A0E                     	if	0	;tblptru may be non-zero
 11970  000A0E                     	endif
 11971  000A0E  0008               	tblrd		*
 11972  000A10  50F5               	movf	tablat,w,c
 11973  000A12  6E1B               	movwf	(??i2_printf+2)& (0+255),c
 11974  000A14  6A1C               	clrf	(??i2_printf+3)& (0+255),c
 11975  000A16  5019               	movf	??i2_printf,w,c
 11976  000A18  261B               	addwf	??i2_printf+2,f,c
 11977  000A1A  501A               	movf	??i2_printf+1,w,c
 11978  000A1C  221C               	addwfc	??i2_printf+3,f,c
 11979  000A1E  501B               	movf	??i2_printf+2,w,c
 11980  000A20  2628               	addwf	i2printf@width,f,c
 11981  000A22  501C               	movf	??i2_printf+3,w,c
 11982  000A24  2229               	addwfc	i2printf@width+1,f,c
 11983  000A26  4A0D               	infsnz	i2printf@f,f,c
 11984  000A28  2A0E               	incf	i2printf@f+1,f,c
 11985                           
 11986                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 11987  000A2A  C00D  FFF6         	movff	i2printf@f,tblptrl
 11988  000A2E  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 11989  000A32                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 11990  000A32  6AF8               	clrf	tblptru,c
 11991  000A34                     	endif
 11992  000A34                     	if	0	;tblptru may be non-zero
 11993  000A34                     	endif
 11994  000A34  0008               	tblrd		*
 11995  000A36  50F5               	movf	tablat,w,c
 11996  000A38  EC24  F014         	call	i2_isdigit
 11997  000A3C  A0D8               	btfss	status,0,c
 11998  000A3E  D070               	goto	i2l4289
 11999  000A40  D7CF               	goto	i2l4249
 12000  000A42                     i2l4257:
 12001                           
 12002                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 12003  000A42  C01E  FFD9         	movff	i2printf@ap,fsr2l
 12004  000A46  C01F  FFDA         	movff	i2printf@ap+1,fsr2h
 12005  000A4A  CFDE F020          	movff	postinc2,i2printf@cp
 12006  000A4E  CFDD F021          	movff	postdec2,i2printf@cp+1
 12007  000A52  0E02               	movlw	2
 12008  000A54  261E               	addwf	i2printf@ap,f,c
 12009  000A56  0E00               	movlw	0
 12010  000A58  221F               	addwfc	i2printf@ap+1,f,c
 12011                           
 12012                           ;doprnt.c: 740: if(!cp)
 12013  000A5A  5020               	movf	i2printf@cp,w,c
 12014  000A5C  1021               	iorwf	i2printf@cp+1,w,c
 12015  000A5E  A4D8               	btfss	status,2,c
 12016  000A60  D004               	goto	i2l4265
 12017                           
 12018                           ;doprnt.c: 741: cp = "(null)";
 12019  000A62  0EBD               	movlw	low STR_51
 12020  000A64  6E20               	movwf	i2printf@cp,c
 12021  000A66  0EFF               	movlw	high STR_51
 12022  000A68  6E21               	movwf	i2printf@cp+1,c
 12023  000A6A                     i2l4265:
 12024                           
 12025                           ;doprnt.c: 745: len = 0;
 12026  000A6A  0E00               	movlw	0
 12027  000A6C  6E25               	movwf	i2printf@len+1,c
 12028  000A6E  0E00               	movlw	0
 12029  000A70  6E24               	movwf	i2printf@len,c
 12030                           
 12031                           ;doprnt.c: 746: while(cp[len])
 12032  000A72  D002               	goto	i2l4269
 12033  000A74                     i2l4267:
 12034                           
 12035                           ;doprnt.c: 747: len++;
 12036  000A74  4A24               	infsnz	i2printf@len,f,c
 12037  000A76  2A25               	incf	i2printf@len+1,f,c
 12038  000A78                     i2l4269:
 12039  000A78  5024               	movf	i2printf@len,w,c
 12040  000A7A  2420               	addwf	i2printf@cp,w,c
 12041  000A7C  6E19               	movwf	??i2_printf& (0+255),c
 12042  000A7E  5025               	movf	i2printf@len+1,w,c
 12043  000A80  2021               	addwfc	i2printf@cp+1,w,c
 12044  000A82  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 12045  000A84  C019  FFF6         	movff	??i2_printf,tblptrl
 12046  000A88  C01A  FFF7         	movff	??i2_printf+1,tblptrh
 12047  000A8C  0E00               	movlw	low (__mediumconst shr (0+16))
 12048  000A8E  6EF8               	movwf	tblptru,c
 12049  000A90  0E0F               	movlw	(high __ramtop+-1)
 12050  000A92  64F7               	cpfsgt	tblptrh,c
 12051  000A94  D003               	bra	i2u293_47
 12052  000A96  0008               	tblrd		*
 12053  000A98  50F5               	movf	tablat,w,c
 12054  000A9A  D005               	bra	i2u293_40
 12055  000A9C                     i2u293_47:
 12056  000A9C  CFF6 FFE9          	movff	tblptrl,fsr0l
 12057  000AA0  CFF7 FFEA          	movff	tblptrh,fsr0h
 12058  000AA4  50EF               	movf	indf0,w,c
 12059  000AA6                     i2u293_40:
 12060  000AA6  0900               	iorlw	0
 12061  000AA8  A4D8               	btfss	status,2,c
 12062  000AAA  D7E4               	goto	i2l4267
 12063                           
 12064                           ;doprnt.c: 757: if(width > len)
 12065  000AAC  5028               	movf	i2printf@width,w,c
 12066  000AAE  5C24               	subwf	i2printf@len,w,c
 12067  000AB0  5029               	movf	i2printf@width+1,w,c
 12068  000AB2  5825               	subwfb	i2printf@len+1,w,c
 12069  000AB4  B0D8               	btfsc	status,0,c
 12070  000AB6  D005               	goto	i2l4275
 12071                           
 12072                           ;doprnt.c: 758: width -= len;
 12073  000AB8  5024               	movf	i2printf@len,w,c
 12074  000ABA  5E28               	subwf	i2printf@width,f,c
 12075  000ABC  5025               	movf	i2printf@len+1,w,c
 12076  000ABE  5A29               	subwfb	i2printf@width+1,f,c
 12077  000AC0  D008               	goto	i2l4279
 12078  000AC2                     i2l4275:
 12079                           
 12080                           ;doprnt.c: 759: else
 12081                           ;doprnt.c: 760: width = 0;
 12082  000AC2  0E00               	movlw	0
 12083  000AC4  6E29               	movwf	i2printf@width+1,c
 12084  000AC6  0E00               	movlw	0
 12085  000AC8  6E28               	movwf	i2printf@width,c
 12086                           
 12087                           ;doprnt.c: 764: while(width--)
 12088  000ACA  D003               	goto	i2l4279
 12089  000ACC                     i2l4277:
 12090                           
 12091                           ;doprnt.c: 765: (putch(' ') );
 12092  000ACC  0E20               	movlw	32
 12093  000ACE  EC87  F014         	call	i2_putch
 12094  000AD2                     i2l4279:
 12095  000AD2  0628               	decf	i2printf@width,f,c
 12096  000AD4  A0D8               	btfss	status,0,c
 12097  000AD6  0629               	decf	i2printf@width+1,f,c
 12098  000AD8  2828               	incf	i2printf@width,w,c
 12099  000ADA  E1F8               	bnz	i2l4277
 12100  000ADC  2829               	incf	i2printf@width+1,w,c
 12101  000ADE  B4D8               	btfsc	status,2,c
 12102  000AE0  D016               	goto	i2l4285
 12103  000AE2  D7F4               	goto	i2l4277
 12104  000AE4                     i2l4281:
 12105                           
 12106                           ;doprnt.c: 768: (putch(*cp++) );
 12107  000AE4  C020  FFF6         	movff	i2printf@cp,tblptrl
 12108  000AE8  C021  FFF7         	movff	i2printf@cp+1,tblptrh
 12109  000AEC  0E00               	movlw	low (__mediumconst shr (0+16))
 12110  000AEE  6EF8               	movwf	tblptru,c
 12111  000AF0  0E0F               	movlw	(high __ramtop+-1)
 12112  000AF2  64F7               	cpfsgt	tblptrh,c
 12113  000AF4  D003               	bra	i2u297_47
 12114  000AF6  0008               	tblrd		*
 12115  000AF8  50F5               	movf	tablat,w,c
 12116  000AFA  D005               	bra	i2u297_40
 12117  000AFC                     i2u297_47:
 12118  000AFC  CFF6 FFE9          	movff	tblptrl,fsr0l
 12119  000B00  CFF7 FFEA          	movff	tblptrh,fsr0h
 12120  000B04  50EF               	movf	indf0,w,c
 12121  000B06                     i2u297_40:
 12122  000B06  EC87  F014         	call	i2_putch
 12123  000B0A  4A20               	infsnz	i2printf@cp,f,c
 12124  000B0C  2A21               	incf	i2printf@cp+1,f,c
 12125  000B0E                     i2l4285:
 12126  000B0E  0624               	decf	i2printf@len,f,c
 12127  000B10  A0D8               	btfss	status,0,c
 12128  000B12  0625               	decf	i2printf@len+1,f,c
 12129  000B14  2824               	incf	i2printf@len,w,c
 12130  000B16  E1E6               	bnz	i2l4281
 12131  000B18  2825               	incf	i2printf@len+1,w,c
 12132  000B1A  B4D8               	btfsc	status,2,c
 12133  000B1C  D0C6               	goto	i2l4357
 12134  000B1E  D7E2               	goto	i2l4281
 12135  000B20                     i2l4289:
 12136  000B20  C00D  FFF6         	movff	i2printf@f,tblptrl
 12137  000B24  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 12138  000B28  4A0D               	infsnz	i2printf@f,f,c
 12139  000B2A  2A0E               	incf	i2printf@f+1,f,c
 12140  000B2C                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 12141  000B2C  6AF8               	clrf	tblptru,c
 12142  000B2E                     	endif
 12143  000B2E                     	if	0	;tblptru may be non-zero
 12144  000B2E                     	endif
 12145  000B2E  0008               	tblrd		*
 12146  000B30  CFF5 F027          	movff	tablat,i2printf@c
 12147  000B34  5027               	movf	i2printf@c,w,c
 12148                           
 12149                           ; Switch size 1, requested type "space"
 12150                           ; Number of cases is 4, Range of values is 0 to 115
 12151                           ; switch strategies available:
 12152                           ; Name         Instructions Cycles
 12153                           ; simple_byte           13     7 (average)
 12154                           ;	Chosen strategy is simple_byte
 12155  000B36  0A00               	xorlw	0	; case 0
 12156  000B38  B4D8               	btfsc	status,2,c
 12157  000B3A  0012               	return	
 12158  000B3C  0A64               	xorlw	100	; case 100
 12159  000B3E  B4D8               	btfsc	status,2,c
 12160  000B40  D007               	goto	i2l4291
 12161  000B42  0A0D               	xorlw	13	; case 105
 12162  000B44  B4D8               	btfsc	status,2,c
 12163  000B46  D004               	goto	i2l4291
 12164  000B48  0A1A               	xorlw	26	; case 115
 12165  000B4A  B4D8               	btfsc	status,2,c
 12166  000B4C  D77A               	goto	i2l4257
 12167  000B4E  D0AD               	goto	i2l4357
 12168  000B50                     i2l4291:
 12169                           
 12170                           ;doprnt.c: 1253: {
 12171                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 12172  000B50  C01E  FFD9         	movff	i2printf@ap,fsr2l
 12173  000B54  C01F  FFDA         	movff	i2printf@ap+1,fsr2h
 12174  000B58  CFDE F022          	movff	postinc2,i2printf@val
 12175  000B5C  CFDD F023          	movff	postdec2,i2printf@val+1
 12176  000B60  0E02               	movlw	2
 12177  000B62  261E               	addwf	i2printf@ap,f,c
 12178  000B64  0E00               	movlw	0
 12179  000B66  221F               	addwfc	i2printf@ap+1,f,c
 12180                           
 12181                           ;doprnt.c: 1261: if((int)val < 0) {
 12182  000B68  AE23               	btfss	i2printf@val+1,7,c
 12183  000B6A  D006               	goto	i2l4301
 12184                           
 12185                           ;doprnt.c: 1262: flag |= 0x03;
 12186  000B6C  0E03               	movlw	3
 12187  000B6E  1226               	iorwf	i2printf@flag,f,c
 12188                           
 12189                           ;doprnt.c: 1263: val = -val;
 12190  000B70  6C22               	negf	i2printf@val,c
 12191  000B72  1E23               	comf	i2printf@val+1,f,c
 12192  000B74  B0D8               	btfsc	status,0,c
 12193  000B76  2A23               	incf	i2printf@val+1,f,c
 12194  000B78                     i2l4301:
 12195                           
 12196                           ;doprnt.c: 1264: }
 12197                           ;doprnt.c: 1266: }
 12198                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 12199  000B78  0E01               	movlw	1
 12200  000B7A  6E27               	movwf	i2printf@c,c
 12201  000B7C                     i2l4303:
 12202  000B7C  0E05               	movlw	5
 12203  000B7E  1827               	xorwf	i2printf@c,w,c
 12204  000B80  B4D8               	btfsc	status,2,c
 12205  000B82  D015               	goto	i2l4315
 12206                           
 12207                           ;doprnt.c: 1306: if(val < dpowers[c])
 12208  000B84  5027               	movf	i2printf@c,w,c
 12209  000B86  0D02               	mullw	2
 12210  000B88  0EC6               	movlw	low _dpowers
 12211  000B8A  24F3               	addwf	prodl,w,c
 12212  000B8C  6EF6               	movwf	tblptrl,c
 12213  000B8E  0EFD               	movlw	high _dpowers
 12214  000B90  20F4               	addwfc	prodh,w,c
 12215  000B92  6EF7               	movwf	tblptrh,c
 12216  000B94                     	if	1	;There are 3 active tblptr bytes
 12217  000B94  6AF8               	clrf	tblptru,c
 12218  000B96  0E00               	movlw	low (__mediumconst shr (0+16))
 12219  000B98  22F8               	addwfc	tblptru,f,c
 12220  000B9A                     	endif
 12221  000B9A  0009               	tblrd		*+
 12222  000B9C  50F5               	movf	tablat,w,c
 12223  000B9E  5C22               	subwf	i2printf@val,w,c
 12224  000BA0  0009               	tblrd		*+
 12225  000BA2  50F5               	movf	tablat,w,c
 12226  000BA4  5823               	subwfb	i2printf@val+1,w,c
 12227  000BA6  A0D8               	btfss	status,0,c
 12228  000BA8  D002               	goto	i2l4315
 12229                           
 12230                           ;doprnt.c: 1307: break;
 12231  000BAA  2A27               	incf	i2printf@c,f,c
 12232  000BAC  D7E7               	goto	i2l4303
 12233  000BAE                     i2l4315:
 12234                           
 12235                           ;doprnt.c: 1345: if(width && flag & 0x03)
 12236  000BAE  5028               	movf	i2printf@width,w,c
 12237  000BB0  1029               	iorwf	i2printf@width+1,w,c
 12238  000BB2  B4D8               	btfsc	status,2,c
 12239  000BB4  D009               	goto	i2l4321
 12240  000BB6  C026  F019         	movff	i2printf@flag,??i2_printf
 12241  000BBA  0E03               	movlw	3
 12242  000BBC  1619               	andwf	??i2_printf,f,c
 12243  000BBE  B4D8               	btfsc	status,2,c
 12244  000BC0  D003               	goto	i2l4321
 12245                           
 12246                           ;doprnt.c: 1346: width--;
 12247  000BC2  0628               	decf	i2printf@width,f,c
 12248  000BC4  A0D8               	btfss	status,0,c
 12249  000BC6  0629               	decf	i2printf@width+1,f,c
 12250  000BC8                     i2l4321:
 12251                           
 12252                           ;doprnt.c: 1381: if(width > c)
 12253  000BC8  0E80               	movlw	128
 12254  000BCA  BE27               	btfsc	i2printf@c,7,c
 12255  000BCC  0E7F               	movlw	127
 12256  000BCE  6E19               	movwf	??i2_printf& (0+255),c
 12257  000BD0  5028               	movf	i2printf@width,w,c
 12258  000BD2  5C27               	subwf	i2printf@c,w,c
 12259  000BD4  5029               	movf	i2printf@width+1,w,c
 12260  000BD6  0A80               	xorlw	128
 12261  000BD8  5819               	subwfb	??i2_printf& (0+255),w,c
 12262  000BDA  B0D8               	btfsc	status,0,c
 12263  000BDC  D007               	goto	i2l4325
 12264                           
 12265                           ;doprnt.c: 1382: width -= c;
 12266  000BDE  5027               	movf	i2printf@c,w,c
 12267  000BE0  5E28               	subwf	i2printf@width,f,c
 12268  000BE2  0E00               	movlw	0
 12269  000BE4  BE27               	btfsc	i2printf@c,7,c
 12270  000BE6  0EFF               	movlw	255
 12271  000BE8  5A29               	subwfb	i2printf@width+1,f,c
 12272  000BEA  D004               	goto	i2l4327
 12273  000BEC                     i2l4325:
 12274                           
 12275                           ;doprnt.c: 1383: else
 12276                           ;doprnt.c: 1384: width = 0;
 12277  000BEC  0E00               	movlw	0
 12278  000BEE  6E29               	movwf	i2printf@width+1,c
 12279  000BF0  0E00               	movlw	0
 12280  000BF2  6E28               	movwf	i2printf@width,c
 12281  000BF4                     i2l4327:
 12282                           
 12283                           ;doprnt.c: 1387: if(flag & 0x04) {
 12284  000BF4  A426               	btfss	i2printf@flag,2,c
 12285  000BF6  D014               	goto	i2l4339
 12286                           
 12287                           ;doprnt.c: 1392: if(flag & 0x03)
 12288  000BF8  C026  F019         	movff	i2printf@flag,??i2_printf
 12289  000BFC  0E03               	movlw	3
 12290  000BFE  1619               	andwf	??i2_printf,f,c
 12291  000C00  B4D8               	btfsc	status,2,c
 12292  000C02  D003               	goto	i2l4333
 12293                           
 12294                           ;doprnt.c: 1393: (putch('-') );
 12295  000C04  0E2D               	movlw	45
 12296  000C06  EC87  F014         	call	i2_putch
 12297  000C0A                     i2l4333:
 12298                           
 12299                           ;doprnt.c: 1415: if(width)
 12300  000C0A  5028               	movf	i2printf@width,w,c
 12301  000C0C  1029               	iorwf	i2printf@width+1,w,c
 12302  000C0E  B4D8               	btfsc	status,2,c
 12303  000C10  D01E               	goto	i2l4349
 12304                           
 12305                           ;doprnt.c: 1417: (putch('0') );
 12306                           
 12307                           ;doprnt.c: 1416: do
 12308  000C12  0E30               	movlw	48
 12309  000C14  EC87  F014         	call	i2_putch
 12310                           
 12311                           ;doprnt.c: 1418: while(--width);
 12312  000C18  0628               	decf	i2printf@width,f,c
 12313  000C1A  A0D8               	btfss	status,0,c
 12314  000C1C  0629               	decf	i2printf@width+1,f,c
 12315  000C1E  D7F5               	goto	i2l4333
 12316  000C20                     i2l4339:
 12317                           
 12318                           ;doprnt.c: 1422: {
 12319                           ;doprnt.c: 1424: if(width
 12320                           ;doprnt.c: 1428: )
 12321  000C20  5028               	movf	i2printf@width,w,c
 12322  000C22  1029               	iorwf	i2printf@width+1,w,c
 12323  000C24  B4D8               	btfsc	status,2,c
 12324  000C26  D00A               	goto	i2l4345
 12325  000C28                     i2l4341:
 12326                           
 12327                           ;doprnt.c: 1430: (putch(' ') );
 12328  000C28  0E20               	movlw	32
 12329  000C2A  EC87  F014         	call	i2_putch
 12330                           
 12331                           ;doprnt.c: 1431: while(--width);
 12332  000C2E  0628               	decf	i2printf@width,f,c
 12333  000C30  A0D8               	btfss	status,0,c
 12334  000C32  0629               	decf	i2printf@width+1,f,c
 12335  000C34  5028               	movf	i2printf@width,w,c
 12336  000C36  1029               	iorwf	i2printf@width+1,w,c
 12337  000C38  A4D8               	btfss	status,2,c
 12338  000C3A  D7F6               	goto	i2l4341
 12339  000C3C                     i2l4345:
 12340                           
 12341                           ;doprnt.c: 1438: if(flag & 0x03)
 12342  000C3C  C026  F019         	movff	i2printf@flag,??i2_printf
 12343  000C40  0E03               	movlw	3
 12344  000C42  1619               	andwf	??i2_printf,f,c
 12345  000C44  B4D8               	btfsc	status,2,c
 12346  000C46  D003               	goto	i2l4349
 12347                           
 12348                           ;doprnt.c: 1439: (putch('-') );
 12349  000C48  0E2D               	movlw	45
 12350  000C4A  EC87  F014         	call	i2_putch
 12351  000C4E                     i2l4349:
 12352                           
 12353                           ;doprnt.c: 1469: }
 12354                           ;doprnt.c: 1472: prec = c;
 12355  000C4E  C027  F01D         	movff	i2printf@c,i2printf@prec
 12356                           
 12357                           ;doprnt.c: 1474: while(prec--) {
 12358  000C52  D027               	goto	i2l4355
 12359  000C54                     i2l4351:
 12360                           
 12361                           ;doprnt.c: 1478: {
 12362                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 12363  000C54  501D               	movf	i2printf@prec,w,c
 12364  000C56  0D02               	mullw	2
 12365  000C58  0EC6               	movlw	low _dpowers
 12366  000C5A  24F3               	addwf	prodl,w,c
 12367  000C5C  6EF6               	movwf	tblptrl,c
 12368  000C5E  0EFD               	movlw	high _dpowers
 12369  000C60  20F4               	addwfc	prodh,w,c
 12370  000C62  6EF7               	movwf	tblptrh,c
 12371  000C64                     	if	1	;There are 3 active tblptr bytes
 12372  000C64  6AF8               	clrf	tblptru,c
 12373  000C66  0E00               	movlw	low (__mediumconst shr (0+16))
 12374  000C68  22F8               	addwfc	tblptru,f,c
 12375  000C6A                     	endif
 12376  000C6A  0009               	tblrd		*+
 12377  000C6C  CFF5 F008          	movff	tablat,i2___lwdiv@divisor
 12378  000C70  000A               	tblrd		*-
 12379  000C72  CFF5 F009          	movff	tablat,i2___lwdiv@divisor+1
 12380  000C76  C022  F006         	movff	i2printf@val,i2___lwdiv@dividend
 12381  000C7A  C023  F007         	movff	i2printf@val+1,i2___lwdiv@dividend+1
 12382  000C7E  EC3D  F011         	call	i2___lwdiv	;wreg free
 12383  000C82  C006  F001         	movff	?i2___lwdiv,i2___lwmod@dividend
 12384  000C86  C007  F002         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
 12385  000C8A  0E00               	movlw	0
 12386  000C8C  6E04               	movwf	i2___lwmod@divisor+1,c
 12387  000C8E  0E0A               	movlw	10
 12388  000C90  6E03               	movwf	i2___lwmod@divisor,c
 12389  000C92  ECD8  F011         	call	i2___lwmod	;wreg free
 12390  000C96  5001               	movf	?i2___lwmod,w,c
 12391  000C98  0F30               	addlw	48
 12392  000C9A  6E27               	movwf	i2printf@c,c
 12393                           
 12394                           ;doprnt.c: 1523: }
 12395                           ;doprnt.c: 1524: (putch(c) );
 12396  000C9C  5027               	movf	i2printf@c,w,c
 12397  000C9E  EC87  F014         	call	i2_putch
 12398  000CA2                     i2l4355:
 12399  000CA2  061D               	decf	i2printf@prec,f,c
 12400  000CA4  281D               	incf	i2printf@prec,w,c
 12401  000CA6  A4D8               	btfss	status,2,c
 12402  000CA8  D7D5               	goto	i2l4351
 12403  000CAA                     i2l4357:
 12404  000CAA  C00D  FFF6         	movff	i2printf@f,tblptrl
 12405  000CAE  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 12406  000CB2  4A0D               	infsnz	i2printf@f,f,c
 12407  000CB4  2A0E               	incf	i2printf@f+1,f,c
 12408  000CB6                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 12409  000CB6  6AF8               	clrf	tblptru,c
 12410  000CB8                     	endif
 12411  000CB8                     	if	0	;tblptru may be non-zero
 12412  000CB8                     	endif
 12413  000CB8  0008               	tblrd		*
 12414  000CBA  CFF5 F027          	movff	tablat,i2printf@c
 12415  000CBE  5027               	movf	i2printf@c,w,c
 12416  000CC0  B4D8               	btfsc	status,2,c
 12417  000CC2  0012               	return	
 12418  000CC4  D662               	goto	i2l4233
 12419  000CC6                     __end_ofi2_printf:
 12420                           	opt stack 0
 12421                           pclatu	equ	0xFFB
 12422                           pclath	equ	0xFFA
 12423                           tblptru	equ	0xFF8
 12424                           tblptrh	equ	0xFF7
 12425                           tblptrl	equ	0xFF6
 12426                           tablat	equ	0xFF5
 12427                           prodh	equ	0xFF4
 12428                           prodl	equ	0xFF3
 12429                           intcon	equ	0xFF2
 12430                           intcon3	equ	0xFF0
 12431                           indf0	equ	0xFEF
 12432                           postinc0	equ	0xFEE
 12433                           fsr0h	equ	0xFEA
 12434                           fsr0l	equ	0xFE9
 12435                           wreg	equ	0xFE8
 12436                           postdec1	equ	0xFE5
 12437                           fsr1h	equ	0xFE2
 12438                           fsr1l	equ	0xFE1
 12439                           indf2	equ	0xFDF
 12440                           postinc2	equ	0xFDE
 12441                           postdec2	equ	0xFDD
 12442                           fsr2h	equ	0xFDA
 12443                           fsr2l	equ	0xFD9
 12444                           status	equ	0xFD8
 12445                           
 12446 ;; *************** function i2_putch *****************
 12447 ;; Defined at:
 12448 ;;		line 18 in file "lcd.c"
 12449 ;; Parameters:    Size  Location     Type
 12450 ;;  data            1    wreg     unsigned char 
 12451 ;; Auto vars:     Size  Location     Type
 12452 ;;  data            1    2[COMRAM] unsigned char 
 12453 ;; Return value:  Size  Location     Type
 12454 ;;                  1    wreg      void 
 12455 ;; Registers used:
 12456 ;;		wreg, status,2, status,0, cstack
 12457 ;; Tracked objects:
 12458 ;;		On entry : 0/0
 12459 ;;		On exit  : 0/0
 12460 ;;		Unchanged: 0/0
 12461 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12462 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12463 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12464 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12465 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12466 ;;Total ram usage:        1 bytes
 12467 ;; Hardware stack levels used:    1
 12468 ;; Hardware stack levels required when called:    1
 12469 ;; This function calls:
 12470 ;;		i2_lcdNibble
 12471 ;; This function is called by:
 12472 ;;		i2_printf
 12473 ;; This function uses a non-reentrant model
 12474 ;;
 12475                           
 12476                           	psect	text59
 12477  00290E                     __ptext59:
 12478                           	opt stack 0
 12479  00290E                     i2_putch:
 12480                           	opt stack 19
 12481                           
 12482                           ;incstack = 0
 12483                           ;i2putch@data stored from wreg
 12484  00290E  6E03               	movwf	i2putch@data,c
 12485                           
 12486                           ;lcd.c: 19: LATDbits.LATD2 = 1;
 12487  002910  848C               	bsf	3980,2,c	;volatile
 12488                           
 12489                           ;lcd.c: 20: lcdNibble(data);
 12490  002912  5003               	movf	i2putch@data,w,c
 12491  002914  EC12  F011         	call	i2_lcdNibble
 12492  002918  0012               	return		;funcret
 12493  00291A                     __end_ofi2_putch:
 12494                           	opt stack 0
 12495                           pclatu	equ	0xFFB
 12496                           pclath	equ	0xFFA
 12497                           tblptru	equ	0xFF8
 12498                           tblptrh	equ	0xFF7
 12499                           tblptrl	equ	0xFF6
 12500                           tablat	equ	0xFF5
 12501                           prodh	equ	0xFF4
 12502                           prodl	equ	0xFF3
 12503                           intcon	equ	0xFF2
 12504                           intcon3	equ	0xFF0
 12505                           indf0	equ	0xFEF
 12506                           postinc0	equ	0xFEE
 12507                           fsr0h	equ	0xFEA
 12508                           fsr0l	equ	0xFE9
 12509                           wreg	equ	0xFE8
 12510                           postdec1	equ	0xFE5
 12511                           fsr1h	equ	0xFE2
 12512                           fsr1l	equ	0xFE1
 12513                           indf2	equ	0xFDF
 12514                           postinc2	equ	0xFDE
 12515                           postdec2	equ	0xFDD
 12516                           fsr2h	equ	0xFDA
 12517                           fsr2l	equ	0xFD9
 12518                           status	equ	0xFD8
 12519                           
 12520 ;; *************** function i2_isdigit *****************
 12521 ;; Defined at:
 12522 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 12523 ;; Parameters:    Size  Location     Type
 12524 ;;  c               1    wreg     unsigned char 
 12525 ;; Auto vars:     Size  Location     Type
 12526 ;;  c               1    2[COMRAM] unsigned char 
 12527 ;; Return value:  Size  Location     Type
 12528 ;;		None               void
 12529 ;; Registers used:
 12530 ;;		wreg, status,2, status,0
 12531 ;; Tracked objects:
 12532 ;;		On entry : 0/0
 12533 ;;		On exit  : 0/0
 12534 ;;		Unchanged: 0/0
 12535 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12536 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12537 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12538 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12539 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12540 ;;Total ram usage:        3 bytes
 12541 ;; Hardware stack levels used:    1
 12542 ;; This function calls:
 12543 ;;		Nothing
 12544 ;; This function is called by:
 12545 ;;		i2_printf
 12546 ;; This function uses a non-reentrant model
 12547 ;;
 12548                           
 12549                           	psect	text60
 12550  002848                     __ptext60:
 12551                           	opt stack 0
 12552  002848                     i2_isdigit:
 12553                           	opt stack 20
 12554                           
 12555                           ;incstack = 0
 12556                           ;i2isdigit@c stored from wreg
 12557  002848  6E03               	movwf	i2isdigit@c,c
 12558  00284A  0E00               	movlw	0
 12559  00284C  6E02               	movwf	i2_isdigit$1698,c
 12560  00284E  0E3A               	movlw	58
 12561  002850  6003               	cpfslt	i2isdigit@c,c
 12562  002852  D005               	goto	i2l3993
 12563  002854  0E2F               	movlw	47
 12564  002856  6403               	cpfsgt	i2isdigit@c,c
 12565  002858  D002               	goto	i2l3993
 12566  00285A  0E01               	movlw	1
 12567  00285C  6E02               	movwf	i2_isdigit$1698,c
 12568  00285E                     i2l3993:
 12569  00285E  C002  F001         	movff	i2_isdigit$1698,??i2_isdigit
 12570  002862  3001               	rrcf	??i2_isdigit,w,c
 12571  002864  0012               	return	
 12572  002866                     __end_ofi2_isdigit:
 12573                           	opt stack 0
 12574                           pclatu	equ	0xFFB
 12575                           pclath	equ	0xFFA
 12576                           tblptru	equ	0xFF8
 12577                           tblptrh	equ	0xFF7
 12578                           tblptrl	equ	0xFF6
 12579                           tablat	equ	0xFF5
 12580                           prodh	equ	0xFF4
 12581                           prodl	equ	0xFF3
 12582                           intcon	equ	0xFF2
 12583                           intcon3	equ	0xFF0
 12584                           indf0	equ	0xFEF
 12585                           postinc0	equ	0xFEE
 12586                           fsr0h	equ	0xFEA
 12587                           fsr0l	equ	0xFE9
 12588                           wreg	equ	0xFE8
 12589                           postdec1	equ	0xFE5
 12590                           fsr1h	equ	0xFE2
 12591                           fsr1l	equ	0xFE1
 12592                           indf2	equ	0xFDF
 12593                           postinc2	equ	0xFDE
 12594                           postdec2	equ	0xFDD
 12595                           fsr2h	equ	0xFDA
 12596                           fsr2l	equ	0xFD9
 12597                           status	equ	0xFD8
 12598                           
 12599 ;; *************** function i2___wmul *****************
 12600 ;; Defined at:
 12601 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 12602 ;; Parameters:    Size  Location     Type
 12603 ;;  multiplier      2    0[COMRAM] unsigned int 
 12604 ;;  multiplicand    2    2[COMRAM] unsigned int 
 12605 ;; Auto vars:     Size  Location     Type
 12606 ;;  __wmul          2    4[COMRAM] unsigned int 
 12607 ;; Return value:  Size  Location     Type
 12608 ;;                  2    0[COMRAM] unsigned int 
 12609 ;; Registers used:
 12610 ;;		wreg, status,2, status,0, prodl, prodh
 12611 ;; Tracked objects:
 12612 ;;		On entry : 0/0
 12613 ;;		On exit  : 0/0
 12614 ;;		Unchanged: 0/0
 12615 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12616 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12617 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12618 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12619 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12620 ;;Total ram usage:        6 bytes
 12621 ;; Hardware stack levels used:    1
 12622 ;; This function calls:
 12623 ;;		Nothing
 12624 ;; This function is called by:
 12625 ;;		_printSortTimer
 12626 ;;		i2_printf
 12627 ;; This function uses a non-reentrant model
 12628 ;;
 12629                           
 12630                           	psect	text61
 12631  0027B8                     __ptext61:
 12632                           	opt stack 0
 12633  0027B8                     i2___wmul:
 12634                           	opt stack 20
 12635                           
 12636                           ;incstack = 0
 12637  0027B8  5001               	movf	i2___wmul@multiplier,w,c
 12638  0027BA  0203               	mulwf	i2___wmul@multiplicand,c
 12639  0027BC  CFF3 F005          	movff	prodl,i2___wmul@product
 12640  0027C0  CFF4 F006          	movff	prodh,i2___wmul@product+1
 12641  0027C4  5001               	movf	i2___wmul@multiplier,w,c
 12642  0027C6  0204               	mulwf	i2___wmul@multiplicand+1,c
 12643  0027C8  50F3               	movf	prodl,w,c
 12644  0027CA  2606               	addwf	i2___wmul@product+1,f,c
 12645  0027CC  5002               	movf	i2___wmul@multiplier+1,w,c
 12646  0027CE  0203               	mulwf	i2___wmul@multiplicand,c
 12647  0027D0  50F3               	movf	prodl,w,c
 12648  0027D2  2606               	addwf	i2___wmul@product+1,f,c
 12649  0027D4  C005  F001         	movff	i2___wmul@product,?i2___wmul
 12650  0027D8  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
 12651  0027DC  0012               	return	
 12652  0027DE                     __end_ofi2___wmul:
 12653                           	opt stack 0
 12654                           pclatu	equ	0xFFB
 12655                           pclath	equ	0xFFA
 12656                           tblptru	equ	0xFF8
 12657                           tblptrh	equ	0xFF7
 12658                           tblptrl	equ	0xFF6
 12659                           tablat	equ	0xFF5
 12660                           prodh	equ	0xFF4
 12661                           prodl	equ	0xFF3
 12662                           intcon	equ	0xFF2
 12663                           intcon3	equ	0xFF0
 12664                           indf0	equ	0xFEF
 12665                           postinc0	equ	0xFEE
 12666                           fsr0h	equ	0xFEA
 12667                           fsr0l	equ	0xFE9
 12668                           wreg	equ	0xFE8
 12669                           postdec1	equ	0xFE5
 12670                           fsr1h	equ	0xFE2
 12671                           fsr1l	equ	0xFE1
 12672                           indf2	equ	0xFDF
 12673                           postinc2	equ	0xFDE
 12674                           postdec2	equ	0xFDD
 12675                           fsr2h	equ	0xFDA
 12676                           fsr2l	equ	0xFD9
 12677                           status	equ	0xFD8
 12678                           
 12679 ;; *************** function i2___lwmod *****************
 12680 ;; Defined at:
 12681 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 12682 ;; Parameters:    Size  Location     Type
 12683 ;;  dividend        2    0[COMRAM] unsigned int 
 12684 ;;  divisor         2    2[COMRAM] unsigned int 
 12685 ;; Auto vars:     Size  Location     Type
 12686 ;;  __lwmod         1    4[COMRAM] unsigned char 
 12687 ;; Return value:  Size  Location     Type
 12688 ;;                  2    0[COMRAM] unsigned int 
 12689 ;; Registers used:
 12690 ;;		wreg, status,2, status,0
 12691 ;; Tracked objects:
 12692 ;;		On entry : 0/0
 12693 ;;		On exit  : 0/0
 12694 ;;		Unchanged: 0/0
 12695 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12696 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12697 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12698 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12699 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12700 ;;Total ram usage:        5 bytes
 12701 ;; Hardware stack levels used:    1
 12702 ;; This function calls:
 12703 ;;		Nothing
 12704 ;; This function is called by:
 12705 ;;		_printSortTimer
 12706 ;;		i2_printf
 12707 ;; This function uses a non-reentrant model
 12708 ;;
 12709                           
 12710                           	psect	text62
 12711  0023B0                     __ptext62:
 12712                           	opt stack 0
 12713  0023B0                     i2___lwmod:
 12714                           	opt stack 20
 12715                           
 12716                           ;incstack = 0
 12717  0023B0  5003               	movf	i2___lwmod@divisor,w,c
 12718  0023B2  1004               	iorwf	i2___lwmod@divisor+1,w,c
 12719  0023B4  B4D8               	btfsc	status,2,c
 12720  0023B6  D018               	goto	i2l1640
 12721  0023B8  0E01               	movlw	1
 12722  0023BA  6E05               	movwf	i2___lwmod@counter,c
 12723  0023BC  D004               	goto	i2l4025
 12724  0023BE                     i2l4023:
 12725  0023BE  90D8               	bcf	status,0,c
 12726  0023C0  3603               	rlcf	i2___lwmod@divisor,f,c
 12727  0023C2  3604               	rlcf	i2___lwmod@divisor+1,f,c
 12728  0023C4  2A05               	incf	i2___lwmod@counter,f,c
 12729  0023C6                     i2l4025:
 12730  0023C6  AE04               	btfss	i2___lwmod@divisor+1,7,c
 12731  0023C8  D7FA               	goto	i2l4023
 12732  0023CA                     i2l4027:
 12733  0023CA  5003               	movf	i2___lwmod@divisor,w,c
 12734  0023CC  5C01               	subwf	i2___lwmod@dividend,w,c
 12735  0023CE  5004               	movf	i2___lwmod@divisor+1,w,c
 12736  0023D0  5802               	subwfb	i2___lwmod@dividend+1,w,c
 12737  0023D2  A0D8               	btfss	status,0,c
 12738  0023D4  D004               	goto	i2l4031
 12739  0023D6  5003               	movf	i2___lwmod@divisor,w,c
 12740  0023D8  5E01               	subwf	i2___lwmod@dividend,f,c
 12741  0023DA  5004               	movf	i2___lwmod@divisor+1,w,c
 12742  0023DC  5A02               	subwfb	i2___lwmod@dividend+1,f,c
 12743  0023DE                     i2l4031:
 12744  0023DE  90D8               	bcf	status,0,c
 12745  0023E0  3204               	rrcf	i2___lwmod@divisor+1,f,c
 12746  0023E2  3203               	rrcf	i2___lwmod@divisor,f,c
 12747  0023E4  2E05               	decfsz	i2___lwmod@counter,f,c
 12748  0023E6  D7F1               	goto	i2l4027
 12749  0023E8                     i2l1640:
 12750  0023E8  C001  F001         	movff	i2___lwmod@dividend,?i2___lwmod
 12751  0023EC  C002  F002         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
 12752  0023F0  0012               	return		;funcret
 12753  0023F2                     __end_ofi2___lwmod:
 12754                           	opt stack 0
 12755                           pclatu	equ	0xFFB
 12756                           pclath	equ	0xFFA
 12757                           tblptru	equ	0xFF8
 12758                           tblptrh	equ	0xFF7
 12759                           tblptrl	equ	0xFF6
 12760                           tablat	equ	0xFF5
 12761                           prodh	equ	0xFF4
 12762                           prodl	equ	0xFF3
 12763                           intcon	equ	0xFF2
 12764                           intcon3	equ	0xFF0
 12765                           indf0	equ	0xFEF
 12766                           postinc0	equ	0xFEE
 12767                           fsr0h	equ	0xFEA
 12768                           fsr0l	equ	0xFE9
 12769                           wreg	equ	0xFE8
 12770                           postdec1	equ	0xFE5
 12771                           fsr1h	equ	0xFE2
 12772                           fsr1l	equ	0xFE1
 12773                           indf2	equ	0xFDF
 12774                           postinc2	equ	0xFDE
 12775                           postdec2	equ	0xFDD
 12776                           fsr2h	equ	0xFDA
 12777                           fsr2l	equ	0xFD9
 12778                           status	equ	0xFD8
 12779                           
 12780 ;; *************** function i2___lwdiv *****************
 12781 ;; Defined at:
 12782 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 12783 ;; Parameters:    Size  Location     Type
 12784 ;;  dividend        2    5[COMRAM] unsigned int 
 12785 ;;  divisor         2    7[COMRAM] unsigned int 
 12786 ;; Auto vars:     Size  Location     Type
 12787 ;;  __lwdiv         2    9[COMRAM] unsigned int 
 12788 ;;  __lwdiv         1   11[COMRAM] unsigned char 
 12789 ;; Return value:  Size  Location     Type
 12790 ;;                  2    5[COMRAM] unsigned int 
 12791 ;; Registers used:
 12792 ;;		wreg, status,2, status,0
 12793 ;; Tracked objects:
 12794 ;;		On entry : 0/0
 12795 ;;		On exit  : 0/0
 12796 ;;		Unchanged: 0/0
 12797 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12798 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12799 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12800 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12801 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12802 ;;Total ram usage:        7 bytes
 12803 ;; Hardware stack levels used:    1
 12804 ;; This function calls:
 12805 ;;		Nothing
 12806 ;; This function is called by:
 12807 ;;		_printSortTimer
 12808 ;;		i2_printf
 12809 ;; This function uses a non-reentrant model
 12810 ;;
 12811                           
 12812                           	psect	text63
 12813  00227A                     __ptext63:
 12814                           	opt stack 0
 12815  00227A                     i2___lwdiv:
 12816                           	opt stack 20
 12817                           
 12818                           ;incstack = 0
 12819  00227A  0E00               	movlw	0
 12820  00227C  6E0B               	movwf	i2___lwdiv@quotient+1,c
 12821  00227E  0E00               	movlw	0
 12822  002280  6E0A               	movwf	i2___lwdiv@quotient,c
 12823  002282  5008               	movf	i2___lwdiv@divisor,w,c
 12824  002284  1009               	iorwf	i2___lwdiv@divisor+1,w,c
 12825  002286  B4D8               	btfsc	status,2,c
 12826  002288  D01C               	goto	i2l1630
 12827  00228A  0E01               	movlw	1
 12828  00228C  6E0C               	movwf	i2___lwdiv@counter,c
 12829  00228E  D004               	goto	i2l4005
 12830  002290                     i2l4003:
 12831  002290  90D8               	bcf	status,0,c
 12832  002292  3608               	rlcf	i2___lwdiv@divisor,f,c
 12833  002294  3609               	rlcf	i2___lwdiv@divisor+1,f,c
 12834  002296  2A0C               	incf	i2___lwdiv@counter,f,c
 12835  002298                     i2l4005:
 12836  002298  AE09               	btfss	i2___lwdiv@divisor+1,7,c
 12837  00229A  D7FA               	goto	i2l4003
 12838  00229C                     i2l4007:
 12839  00229C  90D8               	bcf	status,0,c
 12840  00229E  360A               	rlcf	i2___lwdiv@quotient,f,c
 12841  0022A0  360B               	rlcf	i2___lwdiv@quotient+1,f,c
 12842  0022A2  5008               	movf	i2___lwdiv@divisor,w,c
 12843  0022A4  5C06               	subwf	i2___lwdiv@dividend,w,c
 12844  0022A6  5009               	movf	i2___lwdiv@divisor+1,w,c
 12845  0022A8  5807               	subwfb	i2___lwdiv@dividend+1,w,c
 12846  0022AA  A0D8               	btfss	status,0,c
 12847  0022AC  D005               	goto	i2l4015
 12848  0022AE  5008               	movf	i2___lwdiv@divisor,w,c
 12849  0022B0  5E06               	subwf	i2___lwdiv@dividend,f,c
 12850  0022B2  5009               	movf	i2___lwdiv@divisor+1,w,c
 12851  0022B4  5A07               	subwfb	i2___lwdiv@dividend+1,f,c
 12852  0022B6  800A               	bsf	i2___lwdiv@quotient,0,c
 12853  0022B8                     i2l4015:
 12854  0022B8  90D8               	bcf	status,0,c
 12855  0022BA  3209               	rrcf	i2___lwdiv@divisor+1,f,c
 12856  0022BC  3208               	rrcf	i2___lwdiv@divisor,f,c
 12857  0022BE  2E0C               	decfsz	i2___lwdiv@counter,f,c
 12858  0022C0  D7ED               	goto	i2l4007
 12859  0022C2                     i2l1630:
 12860  0022C2  C00A  F006         	movff	i2___lwdiv@quotient,?i2___lwdiv
 12861  0022C6  C00B  F007         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
 12862  0022CA  0012               	return		;funcret
 12863  0022CC                     __end_ofi2___lwdiv:
 12864                           	opt stack 0
 12865                           pclatu	equ	0xFFB
 12866                           pclath	equ	0xFFA
 12867                           tblptru	equ	0xFF8
 12868                           tblptrh	equ	0xFF7
 12869                           tblptrl	equ	0xFF6
 12870                           tablat	equ	0xFF5
 12871                           prodh	equ	0xFF4
 12872                           prodl	equ	0xFF3
 12873                           intcon	equ	0xFF2
 12874                           intcon3	equ	0xFF0
 12875                           indf0	equ	0xFEF
 12876                           postinc0	equ	0xFEE
 12877                           fsr0h	equ	0xFEA
 12878                           fsr0l	equ	0xFE9
 12879                           wreg	equ	0xFE8
 12880                           postdec1	equ	0xFE5
 12881                           fsr1h	equ	0xFE2
 12882                           fsr1l	equ	0xFE1
 12883                           indf2	equ	0xFDF
 12884                           postinc2	equ	0xFDE
 12885                           postdec2	equ	0xFDD
 12886                           fsr2h	equ	0xFDA
 12887                           fsr2l	equ	0xFD9
 12888                           status	equ	0xFD8
 12889                           
 12890 ;; *************** function i2_lcdInst *****************
 12891 ;; Defined at:
 12892 ;;		line 13 in file "lcd.c"
 12893 ;; Parameters:    Size  Location     Type
 12894 ;;  data            1    wreg     unsigned char 
 12895 ;; Auto vars:     Size  Location     Type
 12896 ;;  data            1    2[COMRAM] unsigned char 
 12897 ;; Return value:  Size  Location     Type
 12898 ;;                  1    wreg      void 
 12899 ;; Registers used:
 12900 ;;		wreg, status,2, status,0, cstack
 12901 ;; Tracked objects:
 12902 ;;		On entry : 0/0
 12903 ;;		On exit  : 0/0
 12904 ;;		Unchanged: 0/0
 12905 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12906 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12907 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12908 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12909 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12910 ;;Total ram usage:        1 bytes
 12911 ;; Hardware stack levels used:    1
 12912 ;; Hardware stack levels required when called:    1
 12913 ;; This function calls:
 12914 ;;		i2_lcdNibble
 12915 ;; This function is called by:
 12916 ;;		_change_state_to_menu_11
 12917 ;;		_change_state_to_menu_23
 12918 ;;		_change_state_to_logs_11
 12919 ;;		_change_state_to_logs_12
 12920 ;;		_change_state_to_logs_22
 12921 ;;		_change_state_to_logs_23
 12922 ;;		_change_state_to_logs_33
 12923 ;;		_change_state_to_logs_34
 12924 ;;		_printSortTimer
 12925 ;;		i2_change_state_to_menu_start
 12926 ;;		i2_change_state_to_menu_12
 12927 ;;		i2_change_state_to_menu_22
 12928 ;;		i2_printRTC
 12929 ;; This function uses a non-reentrant model
 12930 ;;
 12931                           
 12932                           	psect	text64
 12933  00291A                     __ptext64:
 12934                           	opt stack 0
 12935  00291A                     i2_lcdInst:
 12936                           	opt stack 19
 12937                           
 12938                           ;incstack = 0
 12939                           ;i2lcdInst@data stored from wreg
 12940  00291A  6E03               	movwf	i2lcdInst@data,c
 12941                           
 12942                           ;lcd.c: 14: LATDbits.LATD2 = 0;
 12943  00291C  948C               	bcf	3980,2,c	;volatile
 12944                           
 12945                           ;lcd.c: 15: lcdNibble(data);
 12946  00291E  5003               	movf	i2lcdInst@data,w,c
 12947  002920  EC12  F011         	call	i2_lcdNibble
 12948  002924  0012               	return		;funcret
 12949  002926                     __end_ofi2_lcdInst:
 12950                           	opt stack 0
 12951                           pclatu	equ	0xFFB
 12952                           pclath	equ	0xFFA
 12953                           tblptru	equ	0xFF8
 12954                           tblptrh	equ	0xFF7
 12955                           tblptrl	equ	0xFF6
 12956                           tablat	equ	0xFF5
 12957                           prodh	equ	0xFF4
 12958                           prodl	equ	0xFF3
 12959                           intcon	equ	0xFF2
 12960                           intcon3	equ	0xFF0
 12961                           indf0	equ	0xFEF
 12962                           postinc0	equ	0xFEE
 12963                           fsr0h	equ	0xFEA
 12964                           fsr0l	equ	0xFE9
 12965                           wreg	equ	0xFE8
 12966                           postdec1	equ	0xFE5
 12967                           fsr1h	equ	0xFE2
 12968                           fsr1l	equ	0xFE1
 12969                           indf2	equ	0xFDF
 12970                           postinc2	equ	0xFDE
 12971                           postdec2	equ	0xFDD
 12972                           fsr2h	equ	0xFDA
 12973                           fsr2l	equ	0xFD9
 12974                           status	equ	0xFD8
 12975                           
 12976 ;; *************** function i2_lcdNibble *****************
 12977 ;; Defined at:
 12978 ;;		line 23 in file "lcd.c"
 12979 ;; Parameters:    Size  Location     Type
 12980 ;;  data            1    wreg     unsigned char 
 12981 ;; Auto vars:     Size  Location     Type
 12982 ;;  data            1    1[COMRAM] unsigned char 
 12983 ;;  lcdNibble       1    0[COMRAM] unsigned char 
 12984 ;; Return value:  Size  Location     Type
 12985 ;;                  1    wreg      void 
 12986 ;; Registers used:
 12987 ;;		wreg, status,2, status,0
 12988 ;; Tracked objects:
 12989 ;;		On entry : 0/0
 12990 ;;		On exit  : 0/0
 12991 ;;		Unchanged: 0/0
 12992 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12993 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12994 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12995 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12996 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12997 ;;Total ram usage:        2 bytes
 12998 ;; Hardware stack levels used:    1
 12999 ;; This function calls:
 13000 ;;		Nothing
 13001 ;; This function is called by:
 13002 ;;		i2_lcdInst
 13003 ;;		i2_putch
 13004 ;; This function uses a non-reentrant model
 13005 ;;
 13006                           
 13007                           	psect	text65
 13008  002224                     __ptext65:
 13009                           	opt stack 0
 13010  002224                     i2_lcdNibble:
 13011                           	opt stack 19
 13012                           
 13013                           ;incstack = 0
 13014                           ;i2lcdNibble@data stored from wreg
 13015  002224  6E02               	movwf	i2lcdNibble@data,c
 13016                           
 13017                           ;lcd.c: 25: char temp = data & 0xF0;
 13018  002226  5002               	movf	i2lcdNibble@data,w,c
 13019  002228  0BF0               	andlw	240
 13020  00222A  6E01               	movwf	i2lcdNibble@temp,c
 13021                           
 13022                           ;lcd.c: 26: LATD = LATD & 0x0F;
 13023  00222C  508C               	movf	3980,w,c	;volatile
 13024  00222E  0B0F               	andlw	15
 13025  002230  6E8C               	movwf	3980,c	;volatile
 13026                           
 13027                           ;lcd.c: 27: LATD = temp | LATD;
 13028  002232  5001               	movf	i2lcdNibble@temp,w,c
 13029  002234  108C               	iorwf	3980,w,c	;volatile
 13030  002236  6E8C               	movwf	3980,c	;volatile
 13031                           
 13032                           ;lcd.c: 29: LATDbits.LATD3 = 1;
 13033  002238  868C               	bsf	3980,3,c	;volatile
 13034                           
 13035                           ;lcd.c: 30: _delay((unsigned long)((25)*(32000000/4000000.0)));
 13036  00223A  0E42               	movlw	66
 13037  00223C                     i2u486_47:
 13038  00223C  2EE8               	decfsz	wreg,f,c
 13039  00223E  D7FE               	bra	i2u486_47
 13040  002240  D000               	nop2	
 13041                           
 13042                           ;lcd.c: 31: LATDbits.LATD3 = 0;
 13043  002242  968C               	bcf	3980,3,c	;volatile
 13044                           
 13045                           ;lcd.c: 32: _delay((unsigned long)((25)*(32000000/4000000.0)));
 13046  002244  0E42               	movlw	66
 13047  002246                     i2u487_47:
 13048  002246  2EE8               	decfsz	wreg,f,c
 13049  002248  D7FE               	bra	i2u487_47
 13050  00224A  D000               	nop2	
 13051                           
 13052                           ;lcd.c: 34: data = data << 4;
 13053  00224C  3802               	swapf	i2lcdNibble@data,w,c
 13054  00224E  0BF0               	andlw	240
 13055  002250  6E02               	movwf	i2lcdNibble@data,c
 13056                           
 13057                           ;lcd.c: 36: temp = data & 0xF0;
 13058  002252  5002               	movf	i2lcdNibble@data,w,c
 13059  002254  0BF0               	andlw	240
 13060  002256  6E01               	movwf	i2lcdNibble@temp,c
 13061                           
 13062                           ;lcd.c: 37: LATD = LATD & 0x0F;
 13063  002258  508C               	movf	3980,w,c	;volatile
 13064  00225A  0B0F               	andlw	15
 13065  00225C  6E8C               	movwf	3980,c	;volatile
 13066                           
 13067                           ;lcd.c: 38: LATD = temp | LATD;
 13068  00225E  5001               	movf	i2lcdNibble@temp,w,c
 13069  002260  108C               	iorwf	3980,w,c	;volatile
 13070  002262  6E8C               	movwf	3980,c	;volatile
 13071                           
 13072                           ;lcd.c: 40: LATDbits.LATD3 = 1;
 13073  002264  868C               	bsf	3980,3,c	;volatile
 13074                           
 13075                           ;lcd.c: 41: _delay((unsigned long)((25)*(32000000/4000000.0)));
 13076  002266  0E42               	movlw	66
 13077  002268                     i2u488_47:
 13078  002268  2EE8               	decfsz	wreg,f,c
 13079  00226A  D7FE               	bra	i2u488_47
 13080  00226C  D000               	nop2	
 13081                           
 13082                           ;lcd.c: 42: LATDbits.LATD3 = 0;
 13083  00226E  968C               	bcf	3980,3,c	;volatile
 13084                           
 13085                           ;lcd.c: 43: _delay((unsigned long)((25)*(32000000/4000000.0)));
 13086  002270  0E42               	movlw	66
 13087  002272                     i2u489_47:
 13088  002272  2EE8               	decfsz	wreg,f,c
 13089  002274  D7FE               	bra	i2u489_47
 13090  002276  D000               	nop2	
 13091  002278  0012               	return		;funcret
 13092  00227A                     __end_ofi2_lcdNibble:
 13093                           	opt stack 0
 13094                           pclatu	equ	0xFFB
 13095                           pclath	equ	0xFFA
 13096                           tblptru	equ	0xFF8
 13097                           tblptrh	equ	0xFF7
 13098                           tblptrl	equ	0xFF6
 13099                           tablat	equ	0xFF5
 13100                           prodh	equ	0xFF4
 13101                           prodl	equ	0xFF3
 13102                           intcon	equ	0xFF2
 13103                           intcon3	equ	0xFF0
 13104                           indf0	equ	0xFEF
 13105                           postinc0	equ	0xFEE
 13106                           fsr0h	equ	0xFEA
 13107                           fsr0l	equ	0xFE9
 13108                           wreg	equ	0xFE8
 13109                           postdec1	equ	0xFE5
 13110                           fsr1h	equ	0xFE2
 13111                           fsr1l	equ	0xFE1
 13112                           indf2	equ	0xFDF
 13113                           postinc2	equ	0xFDE
 13114                           postdec2	equ	0xFDD
 13115                           fsr2h	equ	0xFDA
 13116                           fsr2l	equ	0xFD9
 13117                           status	equ	0xFD8
 13118                           
 13119 ;; *************** function i2_getRTC *****************
 13120 ;; Defined at:
 13121 ;;		line 42 in file "RTC.c"
 13122 ;; Parameters:    Size  Location     Type
 13123 ;;		None
 13124 ;; Auto vars:     Size  Location     Type
 13125 ;;  getRTC          2    3[COMRAM] int 
 13126 ;; Return value:  Size  Location     Type
 13127 ;;                  1    wreg      void 
 13128 ;; Registers used:
 13129 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13130 ;; Tracked objects:
 13131 ;;		On entry : 0/0
 13132 ;;		On exit  : 0/0
 13133 ;;		Unchanged: 0/0
 13134 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13135 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13136 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13137 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13138 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13139 ;;Total ram usage:        2 bytes
 13140 ;; Hardware stack levels used:    1
 13141 ;; Hardware stack levels required when called:    2
 13142 ;; This function calls:
 13143 ;;		i2_I2C_Master_Read
 13144 ;;		i2_I2C_Master_Start
 13145 ;;		i2_I2C_Master_Stop
 13146 ;;		i2_I2C_Master_Write
 13147 ;; This function is called by:
 13148 ;;		_printSortTimer
 13149 ;;		i2_printRTC
 13150 ;; This function uses a non-reentrant model
 13151 ;;
 13152                           
 13153                           	psect	text66
 13154  00201A                     __ptext66:
 13155                           	opt stack 0
 13156  00201A                     i2_getRTC:
 13157                           	opt stack 18
 13158                           
 13159                           ;RTC.c: 46: I2C_Master_Start();
 13160                           
 13161                           ;incstack = 0
 13162  00201A  ECAD  F014         	call	i2_I2C_Master_Start	;wreg free
 13163                           
 13164                           ;RTC.c: 47: I2C_Master_Write(0b11010000);
 13165  00201E  0E00               	movlw	0
 13166  002020  6E03               	movwf	i2I2C_Master_Write@d+1,c
 13167  002022  0ED0               	movlw	208
 13168  002024  6E02               	movwf	i2I2C_Master_Write@d,c
 13169  002026  EC98  F014         	call	i2_I2C_Master_Write	;wreg free
 13170                           
 13171                           ;RTC.c: 48: I2C_Master_Write(0x00);
 13172  00202A  0E00               	movlw	0
 13173  00202C  6E03               	movwf	i2I2C_Master_Write@d+1,c
 13174  00202E  0E00               	movlw	0
 13175  002030  6E02               	movwf	i2I2C_Master_Write@d,c
 13176  002032  EC98  F014         	call	i2_I2C_Master_Write	;wreg free
 13177                           
 13178                           ;RTC.c: 49: I2C_Master_Stop();
 13179  002036  ECA9  F014         	call	i2_I2C_Master_Stop	;wreg free
 13180                           
 13181                           ;RTC.c: 52: I2C_Master_Start();
 13182  00203A  ECAD  F014         	call	i2_I2C_Master_Start	;wreg free
 13183                           
 13184                           ;RTC.c: 53: I2C_Master_Write(0b11010001);
 13185  00203E  0E00               	movlw	0
 13186  002040  6E03               	movwf	i2I2C_Master_Write@d+1,c
 13187  002042  0ED1               	movlw	209
 13188  002044  6E02               	movwf	i2I2C_Master_Write@d,c
 13189  002046  EC98  F014         	call	i2_I2C_Master_Write	;wreg free
 13190                           
 13191                           ;RTC.c: 54: for(int i = 0; i < 6; i++){
 13192  00204A  0E00               	movlw	0
 13193  00204C  6E05               	movwf	i2getRTC@i+1,c
 13194  00204E  0E00               	movlw	0
 13195  002050  6E04               	movwf	i2getRTC@i,c
 13196  002052                     i2l4219:
 13197  002052  BE05               	btfsc	i2getRTC@i+1,7,c
 13198  002054  D006               	goto	i2l4223
 13199  002056  5005               	movf	i2getRTC@i+1,w,c
 13200  002058  E111               	bnz	i2l4229
 13201  00205A  0E06               	movlw	6
 13202  00205C  5C04               	subwf	i2getRTC@i,w,c
 13203  00205E  B0D8               	btfsc	status,0,c
 13204  002060  D00D               	goto	i2l4229
 13205  002062                     i2l4223:
 13206                           
 13207                           ;RTC.c: 55: time[i] = I2C_Master_Read(1);
 13208  002062  0ED4               	movlw	low _time
 13209  002064  2404               	addwf	i2getRTC@i,w,c
 13210  002066  6ED9               	movwf	fsr2l,c
 13211  002068  0E00               	movlw	high _time
 13212  00206A  2005               	addwfc	i2getRTC@i+1,w,c
 13213  00206C  6EDA               	movwf	fsr2h,c
 13214  00206E  0E01               	movlw	1
 13215  002070  ECEF  F013         	call	i2_I2C_Master_Read
 13216  002074  6EDF               	movwf	indf2,c
 13217  002076  4A04               	infsnz	i2getRTC@i,f,c
 13218  002078  2A05               	incf	i2getRTC@i+1,f,c
 13219  00207A  D7EB               	goto	i2l4219
 13220  00207C                     i2l4229:
 13221                           
 13222                           ;RTC.c: 56: }
 13223                           ;RTC.c: 57: time[6] = I2C_Master_Read(0);
 13224  00207C  0E00               	movlw	0
 13225  00207E  ECEF  F013         	call	i2_I2C_Master_Read
 13226  002082  0100               	movlb	0	; () banked
 13227  002084  6FDA               	movwf	(_time+6)& (0+255),b
 13228                           
 13229                           ;RTC.c: 58: I2C_Master_Stop();
 13230  002086  ECA9  F014         	call	i2_I2C_Master_Stop	;wreg free
 13231  00208A  0012               	return		;funcret
 13232  00208C                     __end_ofi2_getRTC:
 13233                           	opt stack 0
 13234                           pclatu	equ	0xFFB
 13235                           pclath	equ	0xFFA
 13236                           tblptru	equ	0xFF8
 13237                           tblptrh	equ	0xFF7
 13238                           tblptrl	equ	0xFF6
 13239                           tablat	equ	0xFF5
 13240                           prodh	equ	0xFF4
 13241                           prodl	equ	0xFF3
 13242                           intcon	equ	0xFF2
 13243                           intcon3	equ	0xFF0
 13244                           indf0	equ	0xFEF
 13245                           postinc0	equ	0xFEE
 13246                           fsr0h	equ	0xFEA
 13247                           fsr0l	equ	0xFE9
 13248                           wreg	equ	0xFE8
 13249                           postdec1	equ	0xFE5
 13250                           fsr1h	equ	0xFE2
 13251                           fsr1l	equ	0xFE1
 13252                           indf2	equ	0xFDF
 13253                           postinc2	equ	0xFDE
 13254                           postdec2	equ	0xFDD
 13255                           fsr2h	equ	0xFDA
 13256                           fsr2l	equ	0xFD9
 13257                           status	equ	0xFD8
 13258                           
 13259 ;; *************** function i2_I2C_Master_Write *****************
 13260 ;; Defined at:
 13261 ;;		line 47 in file "I2C.c"
 13262 ;; Parameters:    Size  Location     Type
 13263 ;;  d               2    1[COMRAM] unsigned int 
 13264 ;; Auto vars:     Size  Location     Type
 13265 ;;		None
 13266 ;; Return value:  Size  Location     Type
 13267 ;;                  1    wreg      void 
 13268 ;; Registers used:
 13269 ;;		wreg, status,2, status,0, cstack
 13270 ;; Tracked objects:
 13271 ;;		On entry : 0/0
 13272 ;;		On exit  : 0/0
 13273 ;;		Unchanged: 0/0
 13274 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13275 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13276 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13277 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13278 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13279 ;;Total ram usage:        2 bytes
 13280 ;; Hardware stack levels used:    1
 13281 ;; Hardware stack levels required when called:    1
 13282 ;; This function calls:
 13283 ;;		i2_I2C_Master_Wait
 13284 ;; This function is called by:
 13285 ;;		i2_getRTC
 13286 ;; This function uses a non-reentrant model
 13287 ;;
 13288                           
 13289                           	psect	text67
 13290  002930                     __ptext67:
 13291                           	opt stack 0
 13292  002930                     i2_I2C_Master_Write:
 13293                           	opt stack 18
 13294                           
 13295                           ;I2C.c: 49: I2C_Master_Wait();
 13296                           
 13297                           ;incstack = 0
 13298  002930  EC68  F014         	call	i2_I2C_Master_Wait	;wreg free
 13299                           
 13300                           ;I2C.c: 50: SSPBUF = d;
 13301  002934  C002  FFC9         	movff	i2I2C_Master_Write@d,4041	;volatile
 13302  002938  0012               	return		;funcret
 13303  00293A                     __end_ofi2_I2C_Master_Write:
 13304                           	opt stack 0
 13305                           pclatu	equ	0xFFB
 13306                           pclath	equ	0xFFA
 13307                           tblptru	equ	0xFF8
 13308                           tblptrh	equ	0xFF7
 13309                           tblptrl	equ	0xFF6
 13310                           tablat	equ	0xFF5
 13311                           prodh	equ	0xFF4
 13312                           prodl	equ	0xFF3
 13313                           intcon	equ	0xFF2
 13314                           intcon3	equ	0xFF0
 13315                           indf0	equ	0xFEF
 13316                           postinc0	equ	0xFEE
 13317                           fsr0h	equ	0xFEA
 13318                           fsr0l	equ	0xFE9
 13319                           wreg	equ	0xFE8
 13320                           postdec1	equ	0xFE5
 13321                           fsr1h	equ	0xFE2
 13322                           fsr1l	equ	0xFE1
 13323                           indf2	equ	0xFDF
 13324                           postinc2	equ	0xFDE
 13325                           postdec2	equ	0xFDD
 13326                           fsr2h	equ	0xFDA
 13327                           fsr2l	equ	0xFD9
 13328                           status	equ	0xFD8
 13329                           
 13330 ;; *************** function i2_I2C_Master_Stop *****************
 13331 ;; Defined at:
 13332 ;;		line 41 in file "I2C.c"
 13333 ;; Parameters:    Size  Location     Type
 13334 ;;		None
 13335 ;; Auto vars:     Size  Location     Type
 13336 ;;		None
 13337 ;; Return value:  Size  Location     Type
 13338 ;;                  1    wreg      void 
 13339 ;; Registers used:
 13340 ;;		wreg, status,2, status,0, cstack
 13341 ;; Tracked objects:
 13342 ;;		On entry : 0/0
 13343 ;;		On exit  : 0/0
 13344 ;;		Unchanged: 0/0
 13345 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13346 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13347 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13348 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13349 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13350 ;;Total ram usage:        0 bytes
 13351 ;; Hardware stack levels used:    1
 13352 ;; Hardware stack levels required when called:    1
 13353 ;; This function calls:
 13354 ;;		i2_I2C_Master_Wait
 13355 ;; This function is called by:
 13356 ;;		i2_getRTC
 13357 ;; This function uses a non-reentrant model
 13358 ;;
 13359                           
 13360                           	psect	text68
 13361  002952                     __ptext68:
 13362                           	opt stack 0
 13363  002952                     i2_I2C_Master_Stop:
 13364                           	opt stack 18
 13365                           
 13366                           ;I2C.c: 43: I2C_Master_Wait();
 13367                           
 13368                           ;incstack = 0
 13369  002952  EC68  F014         	call	i2_I2C_Master_Wait	;wreg free
 13370                           
 13371                           ;I2C.c: 44: PEN = 1;
 13372  002956  84C5               	bsf	4037,2,c	;volatile
 13373  002958  0012               	return		;funcret
 13374  00295A                     __end_ofi2_I2C_Master_Stop:
 13375                           	opt stack 0
 13376                           pclatu	equ	0xFFB
 13377                           pclath	equ	0xFFA
 13378                           tblptru	equ	0xFF8
 13379                           tblptrh	equ	0xFF7
 13380                           tblptrl	equ	0xFF6
 13381                           tablat	equ	0xFF5
 13382                           prodh	equ	0xFF4
 13383                           prodl	equ	0xFF3
 13384                           intcon	equ	0xFF2
 13385                           intcon3	equ	0xFF0
 13386                           indf0	equ	0xFEF
 13387                           postinc0	equ	0xFEE
 13388                           fsr0h	equ	0xFEA
 13389                           fsr0l	equ	0xFE9
 13390                           wreg	equ	0xFE8
 13391                           postdec1	equ	0xFE5
 13392                           fsr1h	equ	0xFE2
 13393                           fsr1l	equ	0xFE1
 13394                           indf2	equ	0xFDF
 13395                           postinc2	equ	0xFDE
 13396                           postdec2	equ	0xFDD
 13397                           fsr2h	equ	0xFDA
 13398                           fsr2l	equ	0xFD9
 13399                           status	equ	0xFD8
 13400                           
 13401 ;; *************** function i2_I2C_Master_Start *****************
 13402 ;; Defined at:
 13403 ;;		line 29 in file "I2C.c"
 13404 ;; Parameters:    Size  Location     Type
 13405 ;;		None
 13406 ;; Auto vars:     Size  Location     Type
 13407 ;;		None
 13408 ;; Return value:  Size  Location     Type
 13409 ;;                  1    wreg      void 
 13410 ;; Registers used:
 13411 ;;		wreg, status,2, status,0, cstack
 13412 ;; Tracked objects:
 13413 ;;		On entry : 0/0
 13414 ;;		On exit  : 0/0
 13415 ;;		Unchanged: 0/0
 13416 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13417 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13418 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13419 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13420 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13421 ;;Total ram usage:        0 bytes
 13422 ;; Hardware stack levels used:    1
 13423 ;; Hardware stack levels required when called:    1
 13424 ;; This function calls:
 13425 ;;		i2_I2C_Master_Wait
 13426 ;; This function is called by:
 13427 ;;		i2_getRTC
 13428 ;; This function uses a non-reentrant model
 13429 ;;
 13430                           
 13431                           	psect	text69
 13432  00295A                     __ptext69:
 13433                           	opt stack 0
 13434  00295A                     i2_I2C_Master_Start:
 13435                           	opt stack 18
 13436                           
 13437                           ;I2C.c: 31: I2C_Master_Wait();
 13438                           
 13439                           ;incstack = 0
 13440  00295A  EC68  F014         	call	i2_I2C_Master_Wait	;wreg free
 13441                           
 13442                           ;I2C.c: 32: SEN = 1;
 13443  00295E  80C5               	bsf	4037,0,c	;volatile
 13444  002960  0012               	return		;funcret
 13445  002962                     __end_ofi2_I2C_Master_Start:
 13446                           	opt stack 0
 13447                           pclatu	equ	0xFFB
 13448                           pclath	equ	0xFFA
 13449                           tblptru	equ	0xFF8
 13450                           tblptrh	equ	0xFF7
 13451                           tblptrl	equ	0xFF6
 13452                           tablat	equ	0xFF5
 13453                           prodh	equ	0xFF4
 13454                           prodl	equ	0xFF3
 13455                           intcon	equ	0xFF2
 13456                           intcon3	equ	0xFF0
 13457                           indf0	equ	0xFEF
 13458                           postinc0	equ	0xFEE
 13459                           fsr0h	equ	0xFEA
 13460                           fsr0l	equ	0xFE9
 13461                           wreg	equ	0xFE8
 13462                           postdec1	equ	0xFE5
 13463                           fsr1h	equ	0xFE2
 13464                           fsr1l	equ	0xFE1
 13465                           indf2	equ	0xFDF
 13466                           postinc2	equ	0xFDE
 13467                           postdec2	equ	0xFDD
 13468                           fsr2h	equ	0xFDA
 13469                           fsr2l	equ	0xFD9
 13470                           status	equ	0xFD8
 13471                           
 13472 ;; *************** function i2_I2C_Master_Read *****************
 13473 ;; Defined at:
 13474 ;;		line 53 in file "I2C.c"
 13475 ;; Parameters:    Size  Location     Type
 13476 ;;  a               1    wreg     unsigned char 
 13477 ;; Auto vars:     Size  Location     Type
 13478 ;;  a               1    1[COMRAM] unsigned char 
 13479 ;;  I2C_Master_R    1    2[COMRAM] unsigned char 
 13480 ;; Return value:  Size  Location     Type
 13481 ;;                  1    wreg      unsigned char 
 13482 ;; Registers used:
 13483 ;;		wreg, status,2, status,0, cstack
 13484 ;; Tracked objects:
 13485 ;;		On entry : 0/0
 13486 ;;		On exit  : 0/0
 13487 ;;		Unchanged: 0/0
 13488 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13489 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13490 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13491 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13492 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13493 ;;Total ram usage:        2 bytes
 13494 ;; Hardware stack levels used:    1
 13495 ;; Hardware stack levels required when called:    1
 13496 ;; This function calls:
 13497 ;;		i2_I2C_Master_Wait
 13498 ;; This function is called by:
 13499 ;;		i2_getRTC
 13500 ;; This function uses a non-reentrant model
 13501 ;;
 13502                           
 13503                           	psect	text70
 13504  0027DE                     __ptext70:
 13505                           	opt stack 0
 13506  0027DE                     i2_I2C_Master_Read:
 13507                           	opt stack 18
 13508                           
 13509                           ;incstack = 0
 13510                           ;i2I2C_Master_Read@a stored from wreg
 13511  0027DE  6E02               	movwf	i2I2C_Master_Read@a,c
 13512                           
 13513                           ;I2C.c: 55: unsigned char temp;
 13514                           ;I2C.c: 56: I2C_Master_Wait();
 13515  0027E0  EC68  F014         	call	i2_I2C_Master_Wait	;wreg free
 13516                           
 13517                           ;I2C.c: 57: RCEN = 1;
 13518  0027E4  86C5               	bsf	4037,3,c	;volatile
 13519                           
 13520                           ;I2C.c: 58: I2C_Master_Wait();
 13521  0027E6  EC68  F014         	call	i2_I2C_Master_Wait	;wreg free
 13522                           
 13523                           ;I2C.c: 59: temp = SSPBUF;
 13524  0027EA  CFC9 F003          	movff	4041,i2I2C_Master_Read@temp	;volatile
 13525                           
 13526                           ;I2C.c: 60: I2C_Master_Wait();
 13527  0027EE  EC68  F014         	call	i2_I2C_Master_Wait	;wreg free
 13528                           
 13529                           ;I2C.c: 61: ACKDT = (a)?0:1;
 13530  0027F2  5002               	movf	i2I2C_Master_Read@a,w,c
 13531  0027F4  A4D8               	btfss	status,2,c
 13532  0027F6  D002               	goto	i2u245_40
 13533  0027F8  8AC5               	bsf	4037,5,c	;volatile
 13534  0027FA  D001               	goto	i2l3969
 13535  0027FC                     i2u245_40:
 13536  0027FC  9AC5               	bcf	4037,5,c	;volatile
 13537  0027FE                     i2l3969:
 13538                           
 13539                           ;I2C.c: 62: ACKEN = 1;
 13540  0027FE  88C5               	bsf	4037,4,c	;volatile
 13541                           
 13542                           ;I2C.c: 63: return temp;
 13543  002800  5003               	movf	i2I2C_Master_Read@temp,w,c
 13544  002802  0012               	return	
 13545  002804                     __end_ofi2_I2C_Master_Read:
 13546                           	opt stack 0
 13547                           pclatu	equ	0xFFB
 13548                           pclath	equ	0xFFA
 13549                           tblptru	equ	0xFF8
 13550                           tblptrh	equ	0xFF7
 13551                           tblptrl	equ	0xFF6
 13552                           tablat	equ	0xFF5
 13553                           prodh	equ	0xFF4
 13554                           prodl	equ	0xFF3
 13555                           intcon	equ	0xFF2
 13556                           intcon3	equ	0xFF0
 13557                           indf0	equ	0xFEF
 13558                           postinc0	equ	0xFEE
 13559                           fsr0h	equ	0xFEA
 13560                           fsr0l	equ	0xFE9
 13561                           wreg	equ	0xFE8
 13562                           postdec1	equ	0xFE5
 13563                           fsr1h	equ	0xFE2
 13564                           fsr1l	equ	0xFE1
 13565                           indf2	equ	0xFDF
 13566                           postinc2	equ	0xFDE
 13567                           postdec2	equ	0xFDD
 13568                           fsr2h	equ	0xFDA
 13569                           fsr2l	equ	0xFD9
 13570                           status	equ	0xFD8
 13571                           
 13572 ;; *************** function i2_I2C_Master_Wait *****************
 13573 ;; Defined at:
 13574 ;;		line 24 in file "I2C.c"
 13575 ;; Parameters:    Size  Location     Type
 13576 ;;		None
 13577 ;; Auto vars:     Size  Location     Type
 13578 ;;		None
 13579 ;; Return value:  Size  Location     Type
 13580 ;;                  1    wreg      void 
 13581 ;; Registers used:
 13582 ;;		wreg, status,2, status,0
 13583 ;; Tracked objects:
 13584 ;;		On entry : 0/0
 13585 ;;		On exit  : 0/0
 13586 ;;		Unchanged: 0/0
 13587 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13588 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13589 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13590 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13591 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13592 ;;Total ram usage:        1 bytes
 13593 ;; Hardware stack levels used:    1
 13594 ;; This function calls:
 13595 ;;		Nothing
 13596 ;; This function is called by:
 13597 ;;		i2_I2C_Master_Start
 13598 ;;		i2_I2C_Master_Stop
 13599 ;;		i2_I2C_Master_Write
 13600 ;;		i2_I2C_Master_Read
 13601 ;; This function uses a non-reentrant model
 13602 ;;
 13603                           
 13604                           	psect	text71
 13605  0028D0                     __ptext71:
 13606                           	opt stack 0
 13607  0028D0                     i2_I2C_Master_Wait:
 13608                           	opt stack 18
 13609  0028D0                     i2l138:
 13610  0028D0  B4C7               	btfsc	4039,2,c	;volatile
 13611  0028D2  D7FE               	goto	i2l138
 13612  0028D4  CFC5 F001          	movff	4037,??i2_I2C_Master_Wait	;volatile
 13613  0028D8  0E1F               	movlw	31
 13614  0028DA  1601               	andwf	??i2_I2C_Master_Wait,f,c
 13615  0028DC  B4D8               	btfsc	status,2,c
 13616  0028DE  0012               	return	
 13617  0028E0  D7F7               	goto	i2l138
 13618  0028E2                     __end_ofi2_I2C_Master_Wait:
 13619                           	opt stack 0
 13620                           pclatu	equ	0xFFB
 13621                           pclath	equ	0xFFA
 13622                           tblptru	equ	0xFF8
 13623                           tblptrh	equ	0xFF7
 13624                           tblptrl	equ	0xFF6
 13625                           tablat	equ	0xFF5
 13626                           prodh	equ	0xFF4
 13627                           prodl	equ	0xFF3
 13628                           intcon	equ	0xFF2
 13629                           intcon3	equ	0xFF0
 13630                           indf0	equ	0xFEF
 13631                           postinc0	equ	0xFEE
 13632                           fsr0h	equ	0xFEA
 13633                           fsr0l	equ	0xFE9
 13634                           wreg	equ	0xFE8
 13635                           postdec1	equ	0xFE5
 13636                           fsr1h	equ	0xFE2
 13637                           fsr1l	equ	0xFE1
 13638                           indf2	equ	0xFDF
 13639                           postinc2	equ	0xFDE
 13640                           postdec2	equ	0xFDD
 13641                           fsr2h	equ	0xFDA
 13642                           fsr2l	equ	0xFD9
 13643                           status	equ	0xFD8
 13644                           pclatu	equ	0xFFB
 13645                           pclath	equ	0xFFA
 13646                           tblptru	equ	0xFF8
 13647                           tblptrh	equ	0xFF7
 13648                           tblptrl	equ	0xFF6
 13649                           tablat	equ	0xFF5
 13650                           prodh	equ	0xFF4
 13651                           prodl	equ	0xFF3
 13652                           intcon	equ	0xFF2
 13653                           intcon3	equ	0xFF0
 13654                           indf0	equ	0xFEF
 13655                           postinc0	equ	0xFEE
 13656                           fsr0h	equ	0xFEA
 13657                           fsr0l	equ	0xFE9
 13658                           wreg	equ	0xFE8
 13659                           postdec1	equ	0xFE5
 13660                           fsr1h	equ	0xFE2
 13661                           fsr1l	equ	0xFE1
 13662                           indf2	equ	0xFDF
 13663                           postinc2	equ	0xFDE
 13664                           postdec2	equ	0xFDD
 13665                           fsr2h	equ	0xFDA
 13666                           fsr2l	equ	0xFD9
 13667                           status	equ	0xFD8
 13668                           
 13669                           	psect	rparam
 13670  0000                     pclatu	equ	0xFFB
 13671                           pclath	equ	0xFFA
 13672                           tblptru	equ	0xFF8
 13673                           tblptrh	equ	0xFF7
 13674                           tblptrl	equ	0xFF6
 13675                           tablat	equ	0xFF5
 13676                           prodh	equ	0xFF4
 13677                           prodl	equ	0xFF3
 13678                           intcon	equ	0xFF2
 13679                           intcon3	equ	0xFF0
 13680                           indf0	equ	0xFEF
 13681                           postinc0	equ	0xFEE
 13682                           fsr0h	equ	0xFEA
 13683                           fsr0l	equ	0xFE9
 13684                           wreg	equ	0xFE8
 13685                           postdec1	equ	0xFE5
 13686                           fsr1h	equ	0xFE2
 13687                           fsr1l	equ	0xFE1
 13688                           indf2	equ	0xFDF
 13689                           postinc2	equ	0xFDE
 13690                           postdec2	equ	0xFDD
 13691                           fsr2h	equ	0xFDA
 13692                           fsr2l	equ	0xFD9
 13693                           status	equ	0xFD8
 13694                           
 13695                           	psect	temp
 13696  00007E                     btemp:
 13697                           	opt stack 0
 13698  00007E                     	ds	1
 13699  0000                     int$flags	set	btemp
 13700                           pclatu	equ	0xFFB
 13701                           pclath	equ	0xFFA
 13702                           tblptru	equ	0xFF8
 13703                           tblptrh	equ	0xFF7
 13704                           tblptrl	equ	0xFF6
 13705                           tablat	equ	0xFF5
 13706                           prodh	equ	0xFF4
 13707                           prodl	equ	0xFF3
 13708                           intcon	equ	0xFF2
 13709                           intcon3	equ	0xFF0
 13710                           indf0	equ	0xFEF
 13711                           postinc0	equ	0xFEE
 13712                           fsr0h	equ	0xFEA
 13713                           fsr0l	equ	0xFE9
 13714                           wreg	equ	0xFE8
 13715                           postdec1	equ	0xFE5
 13716                           fsr1h	equ	0xFE2
 13717                           fsr1l	equ	0xFE1
 13718                           indf2	equ	0xFDF
 13719                           postinc2	equ	0xFDE
 13720                           postdec2	equ	0xFDD
 13721                           fsr2h	equ	0xFDA
 13722                           fsr2l	equ	0xFD9
 13723                           status	equ	0xFD8


Data Sizes:
    Strings     558
    Constant    27
    Data        12
    BSS         75
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     90     125
    BANK0           128     84     122
    BANK1           256      0      14
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    strcpy@from	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_47(CODE[4]), STR_46(CODE[4]), STR_45(CODE[4]), STR_44(CODE[4]), 
		 -> STR_43(CODE[4]), STR_42(CODE[4]), STR_41(CODE[4]), STR_40(CODE[4]), 
		 -> STR_39(CODE[4]), STR_38(CODE[4]), STR_37(CODE[4]), STR_36(CODE[4]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_51(CODE[7]), printRTC@month(BANK0[4]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 24
		 -> STR_50(CODE[21]), STR_49(CODE[11]), STR_48(CODE[24]), STR_35(CODE[17]), 
		 -> STR_34(CODE[17]), STR_33(CODE[17]), STR_32(CODE[17]), STR_31(CODE[17]), 
		 -> STR_30(CODE[17]), STR_29(CODE[17]), STR_28(CODE[17]), STR_27(CODE[17]), 
		 -> STR_26(CODE[17]), STR_25(CODE[17]), STR_24(CODE[17]), STR_23(CODE[17]), 
		 -> STR_22(CODE[17]), STR_21(CODE[17]), STR_20(CODE[17]), STR_19(CODE[17]), 
		 -> STR_18(CODE[17]), STR_17(CODE[17]), STR_16(CODE[17]), STR_15(CODE[17]), 
		 -> STR_14(CODE[3]), STR_13(CODE[17]), STR_12(CODE[17]), STR_11(CODE[17]), 
		 -> STR_10(CODE[17]), STR_9(CODE[17]), STR_8(CODE[18]), STR_7(CODE[10]), 
		 -> STR_6(CODE[17]), STR_5(CODE[7]), STR_4(CODE[17]), STR_3(CODE[18]), 
		 -> STR_2(CODE[21]), STR_1(CODE[17]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _handler in COMRAM

    _handler->_printSortTimer
    i2_change_state_to_menu_start->i2_printRTC
    i2_printRTC->i2_printf
    i2_change_state_to_menu_22->i2_printf
    i2_change_state_to_menu_12->i2_printf
    _change_state_to_menu_23->i2_printf
    _change_state_to_menu_11->i2_printf
    _change_state_to_logs_34->i2_printf
    _change_state_to_logs_33->i2_printf
    _change_state_to_logs_23->i2_printf
    _change_state_to_logs_22->i2_printf
    _change_state_to_logs_12->i2_printf
    _change_state_to_logs_11->i2_printf
    _printSortTimer->i2_printf
    i2_printf->i2___lwdiv
    i2_putch->i2_lcdNibble
    i2___lwdiv->i2___lwmod
    i2_lcdInst->i2_lcdNibble
    i2_getRTC->i2_I2C_Master_Read
    i2_getRTC->i2_I2C_Master_Write
    i2_I2C_Master_Write->i2_I2C_Master_Wait
    i2_I2C_Master_Stop->i2_I2C_Master_Wait
    i2_I2C_Master_Start->i2_I2C_Master_Wait
    i2_I2C_Master_Read->i2_I2C_Master_Wait

Critical Paths under _main in BANK0

    _main->_UI
    _sort->_Loading
    _Loading->_initSortTimer
    _initSortTimer->_getRTC
    _ID->_MAGNETISM_in
    _Distribution->_moveServoCup
    _loadRTC->_I2C_Master_Init
    _I2C_Master_Init->___lldiv
    _change_state_to_menu_start->_printRTC
    _initLCD->_lcdInst
    _UI->_printRTC
    _printRTC->_printf
    _getRTC->_I2C_Master_Read
    _getRTC->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _change_state_to_menu_22->_printf
    _change_state_to_menu_12->_printf
    _printf->___awdiv
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _lcdInst->_lcdNibble
    ___awdiv->___awmod

Critical Paths under _handler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _handler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _handler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _handler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _handler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _handler in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _handler in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _handler in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _handler in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _handler in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _handler in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _handler in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _handler in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _handler in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _handler in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _handler in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   38510
                         _PortTestA5
                                 _UI
                            _initLCD
                           _initTime
                             _initUI
                      _machineConfig
                               _sort
                        _stopSignals
 ---------------------------------------------------------------------------------
 (1) _stopSignals                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _sort                                                 0     0      0     882
                       _Distribution
                                 _ID
                            _Loading
 ---------------------------------------------------------------------------------
 (2) _Loading                                              1     1      0     788
                                             10 BANK0      1     1      0
                      _initSortTimer
                            _lcdInst
                       _moveServoCup
 ---------------------------------------------------------------------------------
 (3) _initSortTimer                                        5     5      0     631
                                              5 BANK0      5     5      0
                             _getRTC
 ---------------------------------------------------------------------------------
 (2) _ID                                                   7     7      0      72
                                              2 BANK0      7     7      0
                       _MAGNETISM_in
                     _moveServoBlock
 ---------------------------------------------------------------------------------
 (3) _moveServoBlock                                       1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _MAGNETISM_in                                         2     0      2       0
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _Distribution                                         0     0      0      22
                       _moveServoCup
 ---------------------------------------------------------------------------------
 (3) _moveServoCup                                         1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _machineConfig                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initUI                                               0     0      0   13210
         _change_state_to_menu_start
                            _loadRTC
 ---------------------------------------------------------------------------------
 (2) _loadRTC                                              3     3      0     850
                                             21 BANK0      3     3      0
                    _I2C_Master_Init
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Init                                      8     4      4     376
                                             13 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     290
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_start                           0     0      0   12360
                            _lcdInst
                           _printRTC
                             _printf
 ---------------------------------------------------------------------------------
 (1) _initTime                                             7     1      6     538
                                              0 BANK0      7     1      6
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                              3 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _UI                                                  16    16      0   23745
                                             68 BANK0     16    16      0
                            ___awdiv
                            ___awmod
            _change_state_to_menu_12
            _change_state_to_menu_22
                            _lcdInst
                           _printRTC
                             _printf
 ---------------------------------------------------------------------------------
 (3) _printRTC                                            25    25      0    7532
                                             43 BANK0     25    25      0
                             _getRTC
                            _lcdInst
                             _printf
                             _strcpy
 ---------------------------------------------------------------------------------
 (4) _strcpy                                               6     2      4    1611
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) _getRTC                                               2     2      0     519
                                              3 BANK0      2     2      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Write                                     2     0      2     406
                                              1 BANK0      2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Read                                      2     2      0      45
                                              1 BANK0      2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (6) _I2C_Master_Wait                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_22                              0     0      0    4828
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_12                              0     0      0    4828
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (3) _printf                                              33    21     12    4693
                                             14 BANK0     29    17     12
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (4) _putch                                                1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              3     3      0      68
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     593
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4     515
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     442
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) _lcdInst                                              1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     113
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4     680
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     428
                                              6 BANK0      8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (1) _PortTestA5                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _handler                                             16    16      0   73560
                                             74 COMRAM    16    16      0
                     _printSortTimer
                         _updateMenu
 ---------------------------------------------------------------------------------
 (8) _updateMenu                                           2     2      0   68752
                                             66 COMRAM     2     2      0
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
                           _dispLogs
                       _inputHandler
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
       i2_change_state_to_menu_start
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_start                         0     0      0    7546
                          i2_lcdInst
                         i2_printRTC
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) i2_printRTC                                         25    25      0    4506
                                             41 COMRAM    25    25      0
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
                           i2_strcpy
 ---------------------------------------------------------------------------------
 (11) i2_strcpy                                            6     2      4     699
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (9) _inputHandler                                         4     2      2   30400
                                             41 COMRAM     4     2      2
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_22                            0     0      0    3040
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_12                            0     0      0    3040
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_23                             0     0      0    3040
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_11                             0     0      0    3040
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_34                             0     0      0    3040
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_33                             0     0      0    3040
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_23                             0     0      0    3040
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_22                             0     0      0    3040
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_12                             0     0      0    3040
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_11                             0     0      0    3040
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) _dispLogs                                             2     0      2     406
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (8) _printSortTimer                                      33    33      0    4808
                                             41 COMRAM    33    33      0
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) i2_printf                                           33    21     12    2905
                                             12 COMRAM    29    17     12
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch
 ---------------------------------------------------------------------------------
 (11) i2_putch                                             1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (11) i2_isdigit                                           3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (11) i2___wmul                                            6     2      4     417
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (11) i2___lwmod                                           5     1      4     367
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (11) i2___lwdiv                                           7     3      4     318
                                              5 COMRAM     7     3      4
                          i2___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (11) i2_lcdInst                                           1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (12) i2_lcdNibble                                         2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (11) i2_getRTC                                            2     2      0     213
                                              3 COMRAM     2     2      0
                  i2_I2C_Master_Read
                 i2_I2C_Master_Start
                  i2_I2C_Master_Stop
                 i2_I2C_Master_Write
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Write                                  2     0      2     100
                                              1 COMRAM     2     0      2
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Stop                                   0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Start                                  0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Read                                   2     2      0      45
                                              1 COMRAM     2     2      0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (13) i2_I2C_Master_Wait                                   1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _PortTestA5
   _UI
     ___awdiv
       ___awmod (ARG)
     ___awmod
     _change_state_to_menu_12
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _change_state_to_menu_22
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _lcdInst
       _lcdNibble
     _printRTC
       _getRTC
         _I2C_Master_Read
           _I2C_Master_Wait
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _strcpy
     _printf
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
   _initLCD
     _lcdInst
       _lcdNibble
   _initTime
   _initUI
     _change_state_to_menu_start
       _lcdInst
         _lcdNibble
       _printRTC
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
         _lcdInst
           _lcdNibble
         _printf
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _lcdNibble
         _strcpy
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _loadRTC
       _I2C_Master_Init
         ___lldiv
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
   _machineConfig
   _sort
     _Distribution
       _moveServoCup
     _ID
       _MAGNETISM_in
       _moveServoBlock
     _Loading
       _initSortTimer
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
       _lcdInst
         _lcdNibble
       _moveServoCup
   _stopSignals

 _handler (ROOT)
   _printSortTimer
     i2___lwdiv
       i2___lwmod (ARG)
     i2___lwmod
     i2___wmul
     i2_getRTC
       i2_I2C_Master_Read
         i2_I2C_Master_Wait
       i2_I2C_Master_Start
         i2_I2C_Master_Wait
       i2_I2C_Master_Stop
         i2_I2C_Master_Wait
       i2_I2C_Master_Write
         i2_I2C_Master_Wait
     i2_lcdInst
       i2_lcdNibble
     i2_printf
       i2___lwdiv
         i2___lwmod (ARG)
       i2___lwmod
       i2___wmul
       i2_isdigit
       i2_putch
         i2_lcdNibble
   _updateMenu
     _change_state_to_logs_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_33
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_34
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _dispLogs
     _inputHandler
       _change_state_to_logs_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_33
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_34
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
     i2_change_state_to_menu_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_start
       i2_lcdInst
         i2_lcdNibble
       i2_printRTC
         i2_getRTC
           i2_I2C_Master_Read
             i2_I2C_Master_Wait
           i2_I2C_Master_Start
             i2_I2C_Master_Wait
           i2_I2C_Master_Stop
             i2_I2C_Master_Wait
           i2_I2C_Master_Write
             i2_I2C_Master_Wait
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
         i2_strcpy
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       E       7        5.5%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     54      7A       5       95.3%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     5A      7D       1       99.2%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     105      34        0.0%
DATA                 0      0     105       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Thu Feb 23 21:26:12 2017

                   i2_I2C_Master_Start 295A                     i2_I2C_Master_Write 2930  
                                   _ID 1B9C                                     _UI 0012  
                         ___awdiv@sign 008B                                     _up 0073  
                  ___wmul@multiplicand 0082                     i2___lwdiv@dividend 0006  
                          __CFG_BORV$3 000000                           __CFG_CP0$OFF 000000  
                         __CFG_CP1$OFF 000000                           __CFG_CP2$OFF 000000  
                         __CFG_CP3$OFF 000000                                    ?_ID 0001  
                                  ?_UI 0001                                    UI@i 00C7  
                                  l222 28BE                                    l225 28C4  
                                  l138 2896                                    l335 00E0  
                                  l689 1F7C                                    l878 0D7C  
                         __CFG_CPB$OFF 000000                                    _PEN 007E2A  
                         __CFG_CPD$OFF 000000                                    _SEN 007E28  
                  ?i2_I2C_Master_Start 0001                         ?_machineConfig 0001  
                  ?i2_I2C_Master_Write 0002                                    _log 00EB  
                         ___awmod@sign 0085                                    wreg 000FE8  
                  i2printRTC@RTC_month 003B        __end_of_change_state_to_menu_11 25C0  
      __end_of_change_state_to_menu_12 2462        __end_of_change_state_to_menu_22 242A  
      __end_of_change_state_to_menu_23 2590           _f_can_coming_to_distribution 00E3  
                       ??_Distribution 0081        __end_of_change_state_to_logs_11 26B0  
      __end_of_change_state_to_logs_12 2680        __end_of_change_state_to_logs_22 2650  
      __end_of_change_state_to_logs_23 273A        __end_of_change_state_to_logs_33 2620  
      __end_of_change_state_to_logs_34 25F0                                   ??_ID 0082  
                                 ??_UI 00C4                           __CFG_LVP$OFF 000000  
                         __CFG_WDT$OFF 000000                                   l1063 1DFE  
                                 l1055 2308                                   l1630 2010  
                                 l4111 07E6                                   l1640 21BA  
                                 l4041 0584                                   l4123 0822  
                                 l4051 05B4                                   l5011 00F8  
                                 l4141 08A0                                   l4133 087C  
                                 l4109 07E0                                   l4045 0598  
                                 l5101 0280                                   l5021 011A  
                                 l5013 00FE                                   l4135 0886  
                                 l4047 05AA                                   l4207 1ACE  
                                 l4153 08E2                                   l4129 0844  
                                 l4073 0696                                   l4065 0664  
                                 l4057 05E8                                   l4401 0E3A  
                                 l5105 0298                                   l5025 0132  
                                 l5017 0110                                   l1577 1AE0  
                                 l4163 0954                                   l4147 08BC  
                                 l4083 070E                                   l4075 06A2  
                                 l4171 1EDE                                   l4411 0ED0  
                                 l4403 0E58                                   l5211 047C  
                                 l5203 045A                                   l5131 0324  
                                 l5123 0302                                   l5051 01B8  
                                 l5043 0196                                   l4149 08C8  
                                 l4157 08F6                                   l4093 0764  
                                 l4085 071A                                   l4077 06A8  
                                 l4165 0960                                   l4181 1F14  
                                 l4405 0E76                                   l5221 0498  
                                 l5141 0340                                   l5061 01D4  
                                 l5029 0144                                   l4159 08FC  
                                 l4087 0720                                   l4175 1EF4  
                                 l4407 0E94                                   l4415 0EEE  
                                 l5207 0464                                   l5127 030C  
                                 l5047 01A0                                   l4089 0738  
                                 l4097 077C                                   l4185 246C  
                                 l4409 0EB2                                   l4417 0F4C  
                                 l5225 04B0                                   l5217 048E  
                                 l5145 0358                                   l5137 0336  
                                 l5065 01EC                                   l5057 01CA  
                                 l4513 1B16                                   l4099 07B0  
                                 l4187 2478                                   l5251 0528  
                                 l5243 0506                                   l5171 03D0  
                                 l5163 03AE                                   l5091 0264  
                                 l5083 0242                                   l4195 1A64  
                                 l4531 1DBA                                   l3901 2786  
                                 l5261 0544                                   l5181 03EC  
                                 l4197 1A74                                   l4533 1DCA  
                                 l4525 1D8A                                   l4509 1B00  
                                 l4391 0DA4                                   l4383 0CFA  
                                 l5247 0510                                   l5167 03B8  
                                 l5087 024C                                   l4199 1A7A  
                                 l4527 1D9A                                   l4519 1B8C  
                                 l3921 1FD2                                   l4393 0DC2  
                                 l5265 055C                                   l5257 053A  
                                 l5185 0404                                   l5177 03E2  
                                 l5097 0276                                   l4529 1DAA  
                                 l4537 1DDC                                   l4553 22F8  
                                 l4395 0DE0                                   l4635 1E54  
                                 l4547 22D6                                   l4901 19AA  
                                 l3917 1FC0                                   l3941 2188  
                                 l4397 0DFE                                   l4389 0D86  
                                 l5269 0568                                   l4645 1E96  
                                 l4549 22E6                                   l4911 19DA  
                                 l3919 1FCC                                   l4399 0E1C  
                                 l4639 1E6A                                   l3929 2002  
                                 l3945 21AC                                   l3937 2176  
                                 l5561 1F68                                   l4907 19C8  
                                 l4923 1A18                                   l3939 2182  
                                 l3883 2704                                   l4835 1D22  
                                 l5571 1F7E                                   l4909 19D4  
                                 l5565 1F72                                   l5557 1F5C  
                                 l4927 1A2C                                   l4919 1A0A  
                                 l4951 1C96                                   l4943 1C70  
                                 l5567 1F78                                   l5559 1F62  
                                 l4873 1C22                                   l4849 1D5A  
                                 _ADFM 007E07                                   l4963 1CDC  
                                 l4955 1CBA                                   l4947 1C84  
                                 l4939 1C60                                   l4949 1C90  
                                 l4895 1994                                   l4959 1CC8  
                                 _ADON 007E10                                   STR_1 FEBA  
                                 STR_2 FDE8                                   STR_3 FDFD  
                                 STR_4 FF86                                   STR_5 FFC4  
                                 STR_6 FEFE                                   STR_7 FFB3  
                                 STR_8 FE0F                                   STR_9 FE98  
                                 _LATA 000F89                                   _LATB 000F8A  
                                 _LATC 000F8B                                   _LATD 000F8C  
                                 _LATE 000F8D                                   u2350 2702  
                                 u3180 0D7C                                   u3420 1BD2  
                                 u3165 21F4                                   u2630 075A  
                                 u3450 1C12                                   u3428 1BD6  
                                 u2637 0750                                   u2590 06E2  
                                 u3458 1C16                                   _PEIE 007F96  
                                 u2597 06D8                                   u4607 23A6  
                                 u4617 002A                                   u4707 0314  
                                 u4627 0122                                   _RCEN 007E2B  
                                 u4717 0348                                   u4637 0152  
                                 u4807 054C                                   u4727 0372  
                                 u4647 01A8                                   u4817 211A  
                                 u4737 03C0                                   u4657 01DC  
                                 u4827 2124                                   u4747 03F4  
                                 u4667 0206                                   u4587 1D0A  
                                 u4837 2150                                   u4757 041E  
                                 u4677 0254                                   u4597 2372  
                                 u4847 215A                                   u4767 046C  
                                 u4687 0288                                   u4777 04A0  
                                 u4697 02B2                                   u4787 04CA  
                                 u4797 0518                                   _RSEN 007E29  
                          _stopSignals 2880                                   _back 005D  
                                 _main 1F24                                   _down 0065  
                                 _keys FDB5                                   _time 00D4  
                                 fsr0h 000FEA                                   fsr1h 000FE2  
                   i2___lwdiv@quotient 000A                                   indf0 000FEF  
                                 fsr2h 000FDA                                   fsr0l 000FE9  
                                 indf2 000FDF                                   fsr1l 000FE1  
                                 fsr2l 000FD9                                   _sort 2804  
                                 btemp 007E                   ??i2_I2C_Master_Start 0002  
                 ??i2_I2C_Master_Write 0004                                   prodh 000FF4  
                                 prodl 000FF3                                   start 000E  
                        __CFG_IESO$OFF 000000                        __end_ofi2_putch 291A  
                        __CFG_MCLRE$ON 000000                           ___param_bank 000000  
                           i2_printRTC 1250                            i2_lcdNibble 2224  
                      __end_of_Loading 1D80                       ?_I2C_Master_Init 008D  
                     ?_I2C_Master_Read 0001                       ?_I2C_Master_Wait 0001  
          ??i2_change_state_to_menu_12 002A            ??i2_change_state_to_menu_22 002A  
                     ?_I2C_Master_Stop 0001                                  ?_main 0001  
                                _ACKEN 007E2C                                  _ACKDT 007E2D  
                      __end_of___awdiv 1A36                                  STR_10 FEDC  
                                STR_11 FEA9                                  STR_20 FF64  
                                STR_12 FEED                                  STR_13 FECB  
                                STR_21 FE65                                  STR_30 FE32  
                                STR_22 FE76                                  STR_14 FFFB  
                                STR_15 FF97                                  STR_23 FF53  
                                STR_31 FF31                                  STR_32 FF31  
                                STR_40 FFF7                                  STR_16 FF75  
                                STR_24 FF0F                                  STR_41 FFDF  
                                STR_17 FE76                                  STR_33 FE54  
                                STR_25 FE32                                  STR_34 FE43  
                                STR_50 FDE8                                  STR_42 FFD7  
                                STR_18 FE87                                  STR_26 FE21  
                                STR_43 FFD3                                  STR_51 FFBD  
                                STR_19 FF64                                  STR_35 FF42  
                                STR_27 FF20                                  STR_28 FF20  
                                STR_44 FFE3                                  STR_36 FFDB  
                      __end_of___awmod 1CE6                                  STR_45 FFEF  
                                STR_37 FFCB                                  STR_29 FE43  
                                STR_46 FFF3                                  STR_38 FFE7  
                                STR_39 FFEB                                  STR_47 FFCF  
                                STR_48 FDD0                                  STR_49 FFA8  
                                ?_sort 0001                        __end_of___lldiv 1AF2  
                                _T0CON 000FD5                        ___awdiv@divisor 0088  
                                _T1CON 000FCD                                  _T3CON 000FB1  
                      __end_of___lwdiv 201A                        __end_of___lwmod 21C4  
                                i2l138 28D0                                  i2l387 124C  
                      ___awdiv@counter 008A                                  i2l878 12DE  
                                _TMR0H 000FD7                                  _TMR1H 000FCF  
                                _TMR0L 000FD6                                  _TMR3H 000FB3  
                                _TMR1L 000FCE                                  _TMR3L 000FB2  
                                _PORTB 000F81                                  _TRISA 000F92  
                                _TRISB 000F93                                  _TRISC 000F94  
                                _TRISD 000F95                                  _TRISE 000F96  
                        __CFG_PWRT$OFF 000000                          __CFG_WRT0$OFF 000000  
                        __CFG_WRT1$OFF 000000                          __CFG_WRT2$OFF 000000  
                        __CFG_WRT3$OFF 000000                        __end_of_lcdInst 2902  
                      __end_of_handler 1978                         __CFG_EBTR0$OFF 000000  
                       __CFG_FCMEN$OFF 000000                         __CFG_EBTR1$OFF 000000  
                       __CFG_EBTR2$OFF 000000                         __CFG_EBTR3$OFF 000000  
                        __CFG_WRTB$OFF 000000                          __CFG_WRTC$OFF 000000  
                        __CFG_WRTD$OFF 000000                        __end_of_initLCD 23B0  
                       __CFG_EBTRB$OFF 000000                             i2isdigit@c 0003  
                      __end_of_loadRTC 1E9E                                  _block 0077  
                      __end_of_dpowers FDD0                                  _first 00F8  
                                _enter 0067                        __end_of_isdigit 2790  
                                _input 0079                                  _putch 28E2  
                                pclath 000FFA                                  tablat 000FF5  
              __size_of_moveServoBlock 0050                       __end_ofi2___wmul 27DE  
                     __end_ofi2_getRTC 208C                                  status 000FD8  
                       __CFG_PBADEN$ON 000000                          i2printf@width 0028  
                     __end_ofi2_printf 0CC6                     __size_ofi2___lwdiv 0052  
                   __size_ofi2___lwmod 0042                 moveServoCup@myPosition 0080  
                     __end_ofi2_strcpy 2500                       _count_can_no_lab 005F  
                      __initialization 208C                     __size_ofi2_lcdInst 000C  
                         __end_of_main 1FA2                           __end_of_keys FDC6  
                         __end_of_sort 2826                             i2printf@ap 001E  
                           i2printf@cp 0020                     __size_ofi2_isdigit 001E  
  __size_of_change_state_to_menu_start 002C                        ??_machineConfig 0080  
                               ??_main 00D4                   __end_of_MAGNETISM_in 290E  
                               ??_sort 008B                          __activetblptr 000003  
                           i2strcpy@cp 0005                             i2strcpy@to 0001  
                    ?_I2C_Master_Start 0001                      ?_I2C_Master_Write 0081  
                   ??_I2C_Master_Start 0081                                 _ADCON0 000FC2  
                               _ADCON1 000FC1                     ??_I2C_Master_Write 0083  
                     ___awdiv@dividend 0086                        i2lcdNibble@data 0002  
                               ?_putch 0001                 __size_of_initSortTimer 00AA  
                      i2lcdNibble@temp 0001              i2_change_state_to_menu_12 2530  
            i2_change_state_to_menu_22 2500                                 _INT1IE 007F83  
                               _INT1IF 007F80                                 _CVRCON 000FB5  
                               i2l1154 1926                                 i2l1156 193C  
                               i2l4003 2290                                 i2l4005 2298  
                               i2l1630 22C2                                 i2l4015 22B8  
                               i2l4007 229C                                 i2l4031 23DE  
                               i2l4023 23BE                                 i2l1640 23E8  
                               i2l4025 23C6                                 i2l4027 23CA  
                               i2l4301 0B78                                 i2l4223 2062  
                               i2l4303 0B7C                                 i2l4321 0BC8  
                               i2l4233 098A                                 i2l4219 2052  
                               i2l4315 0BAE                                 i2l4243 09AE  
                               i2l4229 207C                                 i2l4341 0C28  
                               i2l4333 0C0A                                 i2l4325 0BEC  
                               i2l4237 099A                                 i2l4351 0C54  
                               i2l4327 0BF4                                 i2l4239 09A8  
                               i2l4345 0C3C                                 i2l4281 0AE4  
                               i2l4265 0A6A                                 i2l4257 0A42  
                               i2l4249 09E0                                 i2l4361 24D8  
                               i2l4601 1340                                 i2l5401 117E  
                               i2l5321 1046                                 i2l5313 1028  
                               i2l5305 100C                                 i2l4355 0CA2  
                               i2l4339 0C20                                 i2l4275 0AC2  
                               i2l4267 0A74                                 i2l4291 0B50  
                               i2l4363 24E0                                 i2l4611 13AE  
                               i2l4603 1356                                 i2l4349 0C4E  
                               i2l4285 0B0E                                 i2l4277 0ACC  
                               i2l4269 0A78                                 i2l4357 0CAA  
                               i2l4701 16CC                                 i2l4613 13C4  
                               i2l4605 136C                                 i2l4621 144A  
                               i2l5421 11D4                                 i2l5413 11B0  
                               i2l5405 1194                                 i2l5341 1094  
                               i2l5333 1070                                 i2l5325 1054  
                               i2l5317 1038                                 i2l5309 101A  
                               i2l4279 0AD2                                 i2l4711 16EA  
                               i2l4615 13DA                                 i2l4607 1382  
                               i2l4289 0B20                                 i2l5513 14A2  
                               i2l4801 182E                                 i2l4721 1708  
                               i2l4713 16F0                                 i2l4609 1398  
                               i2l5417 11BE                                 i2l5409 11A2  
                               i2l5361 10E2                                 i2l5353 10BE  
                               i2l5345 10A2                                 i2l5337 107E  
                               i2l5329 1062                                 i2l5281 0FC6  
                               i2l4715 16F6                                 i2l4707 16D6  
                               i2l4619 13F0                                 i2l5427 11E2  
                               i2l5509 1492                                 i2l4717 16FC  
                               i2l4725 170E                                 i2l5381 1130  
                               i2l5373 1114                                 i2l5365 10F0  
                               i2l5357 10D4                                 i2l5349 10B0  
                               i2l5293 0FF0                                 i2l5285 0FD4  
                               i2l5613 18F4                                 i2l5519 14FC  
                               i2l4751 1778                                 i2l4719 1702  
                               i2l4807 1838                                 i2l5279 0FC0  
                               i2l5529 15BE                                 i2l4761 179E  
                               i2l4745 176A                                 i2l4737 1752  
                               i2l4593 12E8                                 i2l5393 1162  
                               i2l5385 113E                                 i2l5377 1122  
                               i2l5369 10FE                                 i2l5297 0FFE  
                               i2l5289 0FE2                                 i2l4771 17C0  
                               i2l4755 1794                                 i2l4595 12FE  
                               i2l4587 127C                                 i2l4765 17B2  
                               i2l4597 1314                                 i2l5397 1170  
                               i2l5389 1154                                 i2l5637 193A  
                               i2l4767 17B6                                 i2l4599 132A  
                               i2l3969 27FE                                 i2l3993 285E  
                               i2l4793 180A                                 i2l4785 17E6  
                               i2l4697 16B8                                 i2l4689 169E  
                               i2l4779 17D8                                 i2l4699 16C8  
                               i2l4797 181C                                 i2l4789 17F8  
                               i2l5781 1200                                 i2l5597 18D4  
                               i2l5791 1742                                 i2l5783 1222  
                               i2l5785 123E                                 i2l5789 1726  
                               _OSCCON 000FD3                                 _TMR0IE 007F95  
                               _TMR0IF 007F92                              ??i2_putch 0003  
                               _TMR1IE 007CE8                                 _TMR1IF 007CF0  
                               _TMR2IE 007CE9                                 _TMR3IE 007D01  
                               _TMR0ON 007EAF                                 _TMR1ON 007E68  
                               _TMR3ON 007D88                                 _SSPADD 000FC8  
                               _TRISC3 007CA3                                 _TRISC4 007CA4  
                               _SSPBUF 000FC9                              ??_Loading 008A  
                       __CFG_XINST$OFF 000000                       __end_of_dispLogs 28BE  
                          ?i2_printRTC 0001                   __end_of_Distribution 26DE  
                               ___wmul 2498                              ??___awdiv 008A  
                       __CFG_STVREN$ON 000000                              ??___awmod 0084  
                               _getRTC 1E9E                              ??___lldiv 0088  
                            ??___lwdiv 0084                              ??___lwmod 008B  
                     ??_printSortTimer 002A                       __end_of_initTime 2848  
                               _initUI 2866                                 clear_0 20D2  
                               clear_1 20DE                                 clear_2 20EA  
                     ___awdiv@quotient 008C                        ___awmod@divisor 0082  
                           _PortTestA5 28BE                        ___awmod@counter 0084  
                            ??_lcdInst 0082                                 _printf 0576  
                            ??_handler 004B                                 _strcpy 2462  
                            ??_initLCD 0083                              ??_loadRTC 0095  
 __end_ofi2_change_state_to_menu_start 27B8  __size_ofi2_change_state_to_menu_start 0028  
         i2_change_state_to_menu_start 2790                           __pdataCOMRAM 007A  
                            ??_isdigit 0080                      __end_ofi2___lwdiv 22CC  
                     __end_of_printRTC 0F90                           __mediumconst FDB4  
                    __end_ofi2___lwmod 23F2                                 tblptrh 000FF7  
                               tblptrl 000FF6                                 tblptru 000FF8  
                    __end_ofi2_lcdInst 2926                      __end_ofi2_isdigit 2866  
                           __accesstop 0080                __end_of__initialization 20F0  
                        ?_inputHandler 002A                          ___rparam_used 000001  
              printSortTimer@start_sec 003B                     i2___lwmod@dividend 0001  
                       __pcstackCOMRAM 0001                           __pidataBANK0 293A  
                          i2printRTC@i 0041                          _initSortTimer 1AF2  
                        __end_of_putch 28F2                            i2printf@len 0024  
                          i2printf@val 0022                             __end_of_ID 1C44  
                           __end_of_UI 0576                     printSortTimer@hour 003F  
                            ?i2___wmul 0001                     __size_of_lcdNibble 0068  
                            ?i2_getRTC 0001                            i2putch@data 0003  
                printSortTimer@curTime 002D     __end_of_change_state_to_menu_start 2766  
        ?i2_change_state_to_menu_start 0001             _change_state_to_menu_start 273A  
                printSortTimer@cur_sec 003D                              ?i2_printf 000D  
                            ?i2_strcpy 0001                       _count_pop_no_tab 0061  
                  __size_ofi2_printRTC 0236                                ??_putch 0082  
                       _moveServoBlock 22CC                             __pbssBANK0 00D4  
                           __pbssBANK1 0100                           ?_stopSignals 0001  
                       ??_inputHandler 002C               ?_change_state_to_menu_11 0001  
             ?_change_state_to_menu_12 0001               ?_change_state_to_menu_22 0001  
             ?_change_state_to_menu_23 0001               ?_change_state_to_logs_11 0001  
             ?_change_state_to_logs_12 0001               ?_change_state_to_logs_22 0001  
             ?_change_state_to_logs_23 0001               ?_change_state_to_logs_33 0001  
             ?_change_state_to_logs_34 0001                      printRTC@RTC_month 00BC  
                         ?i2_lcdNibble 0001                                UI@i_640 00C8  
                              UI@i_641 00C9                         ?_initSortTimer 0001  
                              UI@i_660 00D2                                UI@i_652 00CE  
                              UI@i_644 00CA                                UI@i_661 00D3  
                              UI@i_653 00CF                                UI@i_645 00CB  
                              UI@i_656 00D0                                UI@i_648 00CC  
                              UI@i_657 00D1                                UI@i_649 00CD  
                              ?___wmul 0080                  __size_of_MAGNETISM_in 000C  
                              ?_getRTC 0001                                ?_initUI 0001  
                          ?_PortTestA5 0001                                ?_printf 008E  
            ID@top_bottom_conductivity 0083                                _UI$2056 00C5  
                              ?_strcpy 0080                             ??i2___wmul 0005  
                           ??i2_getRTC 0004                          ?_moveServoCup 0001  
                           ??i2_printf 0019                 __end_of_moveServoBlock 231C  
                           ??i2_strcpy 0005                              ?_dispLogs 0001  
                              _SSPCON1 000FC6                                _SSPCON2 000FC5  
                              _SSPSTAT 000FC7                                i2_putch 290E  
                            ?_initTime 0080                           _MAGNETISM_in 2902  
                      _f_loadingNewCan 00E9                        i2printRTC@month 003D  
                __size_of_Distribution 002E            __size_ofi2_I2C_Master_Start 0008  
                    __end_of_lcdNibble 2162                                _Loading 1CE6  
          __size_ofi2_I2C_Master_Write 000A                                __Hparam 0000  
                              __Lparam 0000     __size_ofi2_change_state_to_menu_12 0030  
   __size_ofi2_change_state_to_menu_22 0030                              ?_printRTC 0001  
                              ___awdiv 1978                                ___awmod 1C44  
                              ___lldiv 1A36                        __size_of___wmul 0036  
                              ___lwdiv 1FA2                                ___lwmod 2162  
                      __size_of_getRTC 0086                        printSortTimer@i 0049  
                            _CMCONbits 000FB4                                _canType 0078  
                      __size_of_initUI 001A                                __pcinit 208C  
                              __ramtop 1000                                _lcdInst 28F2  
                              _handler 0008                                __ptext0 1F24  
                              __ptext1 2880                                __ptext2 2804  
                              __ptext3 1CE6                                __ptext4 1AF2  
                              __ptext5 1B9C                                __ptext6 22CC  
                              __ptext7 2902                                __ptext8 26B0  
                              __ptext9 1D80                        __size_of_printf 040A  
                       ??_moveServoCup 0080                        __size_of_strcpy 0036  
                              _initLCD 236A                                _loadRTC 1E12  
                              _dpowers FDC6                                _isdigit 2766  
                     ___awmod@dividend 0080                                getRTC@i 0083  
             __size_of_I2C_Master_Init 0060               __size_of_I2C_Master_Read 002E  
             __size_of_I2C_Master_Wait 0014               __size_of_I2C_Master_Stop 0008  
                              _was_low 0075                        ?_moveServoBlock 0001  
                           ??_dispLogs 0003                           _Distribution 26B0  
                       __pintcode_body 1866                   end_of_initialization 20F0  
                           ??_initTime 0086                                int_func 1866  
                  i2___wmul@multiplier 0001                    __size_of_PortTestA5 0012  
            __size_of_I2C_Master_Start 0008              __size_of_I2C_Master_Write 000A  
                      ___lldiv@divisor 0084                        ___lldiv@counter 008C  
                      ??_initSortTimer 0085                                printf@c 00A8  
                         ??i2_printRTC 002A                                printf@f 008E  
                           ??_printRTC 00AB                       I2C_Master_Init@c 008D  
                     I2C_Master_Read@a 0081                                postdec1 000FE5  
                              postdec2 000FDD                                postinc0 000FEE  
                              postinc2 000FDE                              _PORTAbits 000F80  
                            _PORTBbits 000F81                   __end_of_inputHandler 1866  
                __end_of_machineConfig 236A                             _updateMenu 0F90  
                    i2_I2C_Master_Read 27DE                      i2_I2C_Master_Wait 28D0  
                    i2_I2C_Master_Stop 2952                      i2___lwdiv@divisor 0008  
                            i2___lwdiv 227A                              i2___lwmod 23B0  
                    i2___lwdiv@counter 000C                     ?i2_I2C_Master_Read 0001  
                   ?i2_I2C_Master_Wait 0001                     __end_ofi2_printRTC 1486  
                   ?i2_I2C_Master_Stop 0001           ??_change_state_to_menu_start 00C4  
                            i2_lcdInst 291A                             _total_time 00EF  
                          printf@width 00A9                   __size_of_stopSignals 0016  
                           ID@magnetic 0087                    ??i2_I2C_Master_Read 0002  
                            i2_isdigit 2848                    ??i2_I2C_Master_Wait 0001  
                  ??i2_I2C_Master_Stop 0002                              i2getRTC@i 0004  
                            _UIenabled 005B                         __end_of___wmul 24CE  
                       __end_of_getRTC 1F24                   __size_ofi2_lcdNibble 0056  
                        __pidataCOMRAM 2962                          i2lcdInst@data 0003  
                       __end_of_initUI 2880                       i2___wmul@product 0005  
                       __end_of_printf 0980                         _timer1highbits 006B  
                         i2printf@flag 0026                         __end_of_strcpy 2498  
            __end_ofi2_I2C_Master_Read 2804              __end_ofi2_I2C_Master_Wait 28E2  
                         i2printf@prec 001D                    start_initialization 208C  
            __end_ofi2_I2C_Master_Stop 295A                      __size_ofi2___wmul 0026  
                      _count_can_w_lab 00DB            ?_change_state_to_menu_start 0001  
                    __size_ofi2_getRTC 0072                         _timer3highbits 006F  
                            i2printf@c 0027                              i2printf@f 000D  
                i2I2C_Master_Read@temp 0003                             ?i2___lwdiv 0006  
                           ?i2___lwmod 0001                      __size_ofi2_printf 0346  
                    __size_ofi2_strcpy 0032                      ??_I2C_Master_Init 0091  
                    ??_I2C_Master_Read 0081                      ??_I2C_Master_Wait 0080  
                           ?i2_lcdInst 0001                      ??_I2C_Master_Stop 0081  
                     __CFG_OSC$INTIO67 000000                   __end_of_moveServoCup 1E12  
                           ?i2_isdigit 0001                             initTime@DD 0083  
                           initTime@MM 0084                             initTime@YY 0085  
                             ??___wmul 0084                               ??_getRTC 0083  
                          __pdataBANK0 00F2                       __CFG_LPT1OSC$OFF 000000  
                             ??_initUI 00C4                           ??_PortTestA5 0080  
               printSortTimer@timeDiff 0047       __size_of_change_state_to_menu_11 0030  
     __size_of_change_state_to_menu_12 0038       __size_of_change_state_to_menu_22 0038  
     __size_of_change_state_to_menu_23 0030                               ??_printf 009A  
     __size_of_change_state_to_logs_11 0030       __size_of_change_state_to_logs_12 0030  
     __size_of_change_state_to_logs_22 0030       __size_of_change_state_to_logs_23 002E  
     __size_of_change_state_to_logs_33 0030       __size_of_change_state_to_logs_34 0030  
                             ??_strcpy 0084                    _printSortTimer$2171 0045  
                          __pbssCOMRAM 005B                            ?_updateMenu 0001  
                        __pcstackBANK0 0080                __size_of_printSortTimer 01FA  
                    i2___lwmod@divisor 0003                      i2___lwmod@counter 0005  
                         _isdigit$1698 0081                         initSortTimer@i 0088  
                    printSortTimer@min 0041                      printSortTimer@sec 0043  
                    __size_of_dispLogs 0014                       printRTC@INT_time 00AE  
                         i2strcpy@from 0003                               ?i2_putch 0001  
                      _count_pop_w_tab 0063                     __end_of_PortTestA5 28D0  
                     _I2C_Master_Start 294A                              _f_lastCan 00E7  
                             ?_Loading 0001                    i2I2C_Master_Write@d 0002  
                     _I2C_Master_Write 2926                      __size_of_initTime 0022  
                     ___lwdiv@dividend 0080                      __CFG_CCP2MX$PORTC 000000  
                            __pintcode 0008                          __pmediumconst FDB4  
                            _lcdNibble 20FA                  __size_of_inputHandler 01E6  
                             ?___awdiv 0086                               ?___awmod 0080  
                             ?___lldiv 0080                               ?___lwdiv 0080  
                             ?___lwmod 0087                      __size_of_printRTC 02CA  
                             ?_lcdInst 0001                               ?_handler 0001  
                     ??_moveServoBlock 0080                               ?_initLCD 0001  
                             ?_loadRTC 0001                               ?_isdigit 0001  
           __size_ofi2_I2C_Master_Read 0026             __size_ofi2_I2C_Master_Wait 0012  
           __size_ofi2_I2C_Master_Stop 0008                              _firstboot 0069  
                            _cur_state 00DF                       ___lwdiv@quotient 0084  
                          ??i2___lwdiv 000A                            ??i2___lwmod 0005  
                       __size_of_putch 0010                            __size_of_ID 00A8  
                          __size_of_UI 0564             __end_ofi2_I2C_Master_Start 2962  
           __end_ofi2_I2C_Master_Write 293A                            ??i2_lcdInst 0003  
                       ___wmul@product 0084                               _LATAbits 000F89  
                             _LATCbits 000F8B                               _LATDbits 000F8C  
                         _inputHandler 1680                            ??i2_isdigit 0001  
                             i2u322_40 12DE                               i2u245_40 27FC  
                             i2u293_40 0AA6                               i2u293_47 0A9C  
                             i2u447_40 15B8                               i2u297_40 0B06  
                             i2u297_47 0AFC                               i2u485_47 16BE  
                             i2u486_47 223C                               i2u487_47 2246  
                             i2u488_47 2268                               i2u489_47 2272  
                  __size_of_updateMenu 02C0                       __CFG_WDTPS$32768 000000  
                           ?_lcdNibble 0001                    ID@side_conductivity 0085  
                           _ADCON0bits 000FC2                      ___wmul@multiplier 0080  
                            _startTime 0100                               i2___wmul 27B8  
                        lcdNibble@data 0081                               i2_getRTC 201A  
                           printf@flag 00A7                          lcdNibble@temp 0080  
                           printf@prec 009E                               i2_printf 0980  
                             i2_strcpy 24CE                    I2C_Master_Read@temp 0082  
                            copy_data0 20A0                              copy_data1 20C0  
                __size_of_moveServoCup 0092                       __size_ofi2_putch 000C  
                        _timer1lowbits 006D                            _count_total 00DD  
                             __Hrparam 0000                          _timer3lowbits 0071  
                     __size_of_Loading 009A                              initTime@h 0081  
                            initTime@m 0080                              initTime@s 0086  
                            initTime@w 0082                               __Lrparam 0000  
                   __CFG_BOREN$SBORDIS 000000                  __end_of_initSortTimer 1B9C  
                     __size_of___awdiv 00BE                       __size_of___awmod 00A2  
              _change_state_to_menu_11 2590             ?i2_change_state_to_menu_12 0001  
              _change_state_to_menu_12 242A             ?i2_change_state_to_menu_22 0001  
              _change_state_to_menu_22 23F2                _change_state_to_menu_23 2560  
                i2___wmul@multiplicand 0003                       __size_of___lldiv 00BC  
                     __size_of___lwdiv 0078                _change_state_to_logs_11 2680  
              _change_state_to_logs_12 2650                _change_state_to_logs_22 2620  
              _change_state_to_logs_23 270C                _change_state_to_logs_33 25F0  
              _change_state_to_logs_34 25C0                       __size_of___lwmod 0062  
                   i2I2C_Master_Read@a 0002                       __size_of_lcdInst 0010  
                     __size_of_handler 1970                       _timer1_20ms_high 007A  
                      _I2C_Master_Init 21C4                        _I2C_Master_Read 26DE  
                     __size_of_initLCD 0046                           _f_ID_receive 00F6  
                         _moveServoCup 1D80                       __size_of_loadRTC 008C  
                      _I2C_Master_Wait 2896                        _I2C_Master_Stop 2942  
                     __size_of_isdigit 002A                         _printSortTimer 1486  
                      ___lwdiv@divisor 0082                        ___lwdiv@counter 0086  
                             __ptext10 231C                               __ptext11 2866  
                             __ptext20 2462                               __ptext12 1E12  
                             __ptext21 1E9E                               __ptext13 21C4  
                             __ptext30 28E2                               __ptext22 2926  
                             __ptext14 1A36                               __ptext31 2766  
                             __ptext23 2942                               __ptext15 273A  
                             __ptext32 2498                               __ptext24 294A  
                             __ptext16 2826                               __ptext41 0F90  
                             __ptext33 2162                               __ptext25 26DE  
                             __ptext17 236A                               __ptext50 25C0  
                             __ptext42 2790                               __ptext34 1FA2  
                             __ptext26 2896                               __ptext18 0012  
                             __ptext51 25F0                               __ptext43 1250  
                             __ptext35 28F2                               __ptext27 23F2  
                             __ptext19 0CC6                               __ptext60 2848  
                             __ptext52 270C                               __ptext44 24CE  
                             __ptext36 20FA                               __ptext28 242A  
                             __ptext61 27B8                               __ptext53 2620  
                             __ptext45 1680                               __ptext37 1C44  
                             __ptext29 0576                               __ptext70 27DE  
                             __ptext62 23B0                               __ptext54 2650  
                             __ptext46 2500                               __ptext38 1978  
                             __ptext71 28D0                               __ptext63 227A  
                             __ptext55 2680                               __ptext47 2530  
                             __ptext39 28BE                               __ptext64 291A  
                             __ptext56 28AA                               __ptext48 2560  
                             __ptext65 2224                               __ptext57 1486  
                             __ptext49 2590                               __ptext66 201A  
                             __ptext58 0980                               __ptext67 2930  
                             __ptext59 290E                               __ptext68 2952  
                             __ptext69 295A                               _dispLogs 28AA  
                        ??_stopSignals 0080                             strcpy@from 0082  
                       i2_isdigit$1698 0002                               _initTime 2826  
                        __size_of_main 007E                          __size_of_sort 0022  
       ??i2_change_state_to_menu_start 0043                               _logstate 00ED  
               __size_of_machineConfig 004E                          ??i2_lcdNibble 0001  
                             _printRTC 0CC6                            ??_lcdNibble 0080  
                            printRTC@i 00C2                               int$flags 007E  
                   _f_can_coming_to_ID 00E1                              printf@len 00A5  
                            printf@val 00A3      __end_ofi2_change_state_to_menu_12 2560  
    __end_ofi2_change_state_to_menu_22 2530                               loadRTC@i 0096  
               __end_of_printSortTimer 1680                              putch@data 0082  
             __end_of_I2C_Master_Start 2952                            _OSCTUNEbits 000F9B  
             __end_of_I2C_Master_Write 2930                             _INTCONbits 000FF2  
                         ??_updateMenu 0043                               isdigit@c 0082  
                             intlevel2 0000                        _timer1_20ms_low 007C  
                     ___lwmod@dividend 0087                       ___lldiv@dividend 0080  
                        ?_MAGNETISM_in 0080                    __end_of_stopSignals 2896  
            ??_change_state_to_menu_11 002A              ??_change_state_to_menu_12 00AB  
            ??_change_state_to_menu_22 00AB              ??_change_state_to_menu_23 002A  
            ??_change_state_to_logs_11 002A              ??_change_state_to_logs_12 002A  
            ??_change_state_to_logs_22 002A              ??_change_state_to_logs_23 002A  
            ??_change_state_to_logs_33 002A              ??_change_state_to_logs_34 002A  
                             printf@ap 009F                               printf@cp 00A1  
                   __end_of_updateMenu 1250                __end_of_I2C_Master_Init 2224  
              __end_of_I2C_Master_Read 270C                __end_of_I2C_Master_Wait 28AA  
              __end_of_I2C_Master_Stop 294A                            lcdInst@data 0082  
                        printRTC@F3188 00F2                    __end_ofi2_lcdNibble 227A  
                      ?_printSortTimer 0001                       ___lldiv@quotient 0088  
                    I2C_Master_Write@d 0081                        ___lwmod@divisor 0089  
                    _f_can_distributed 00E5                               strcpy@cp 0084  
                             strcpy@to 0080                          _machineConfig 231C  
                      ___lwmod@counter 008B               moveServoBlock@myPosition 0080  
                        printRTC@month 00BE                          ?_Distribution 0001  
                        _machine_state 00F1                         ??_MAGNETISM_in 0082  
                        dispLogs@myLog 0001                     i2printRTC@INT_time 002D  
