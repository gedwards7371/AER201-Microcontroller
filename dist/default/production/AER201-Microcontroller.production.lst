

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Mon Apr 10 03:49:04 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	text45,global,reloc=2,class=CODE,delta=1
    60                           	psect	text46,global,reloc=2,class=CODE,delta=1
    61                           	psect	text47,global,reloc=2,class=CODE,delta=1
    62                           	psect	text48,global,reloc=2,class=CODE,delta=1
    63                           	psect	text49,global,reloc=2,class=CODE,delta=1
    64                           	psect	text50,global,reloc=2,class=CODE,delta=1
    65                           	psect	text51,global,reloc=2,class=CODE,delta=1
    66                           	psect	text52,global,reloc=2,class=CODE,delta=1
    67                           	psect	text53,global,reloc=2,class=CODE,delta=1
    68                           	psect	text54,global,reloc=2,class=CODE,delta=1
    69                           	psect	text55,global,reloc=2,class=CODE,delta=1
    70                           	psect	text56,global,reloc=2,class=CODE,delta=1
    71                           	psect	text57,global,reloc=2,class=CODE,delta=1
    72                           	psect	text58,global,reloc=2,class=CODE,delta=1
    73                           	psect	text59,global,reloc=2,class=CODE,delta=1
    74                           	psect	text60,global,reloc=2,class=CODE,delta=1
    75                           	psect	text61,global,reloc=2,class=CODE,delta=1
    76                           	psect	text62,global,reloc=2,class=CODE,delta=1
    77                           	psect	text63,global,reloc=2,class=CODE,delta=1
    78                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    79                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    80                           	psect	text65,global,reloc=2,class=CODE,delta=1
    81                           	psect	text66,global,reloc=2,class=CODE,delta=1
    82                           	psect	text67,global,reloc=2,class=CODE,delta=1
    83                           	psect	text68,global,reloc=2,class=CODE,delta=1
    84                           	psect	text69,global,reloc=2,class=CODE,delta=1
    85                           	psect	text70,global,reloc=2,class=CODE,delta=1
    86                           	psect	text71,global,reloc=2,class=CODE,delta=1
    87                           	psect	text72,global,reloc=2,class=CODE,delta=1
    88                           	psect	text73,global,reloc=2,class=CODE,delta=1
    89                           	psect	text74,global,reloc=2,class=CODE,delta=1
    90                           	psect	text75,global,reloc=2,class=CODE,delta=1
    91                           	psect	text76,global,reloc=2,class=CODE,delta=1
    92                           	psect	text77,global,reloc=2,class=CODE,delta=1
    93                           	psect	text78,global,reloc=2,class=CODE,delta=1
    94                           	psect	text79,global,reloc=2,class=CODE,delta=1
    95                           	psect	text80,global,reloc=2,class=CODE,delta=1
    96                           	psect	text81,global,reloc=2,class=CODE,delta=1
    97                           	psect	text82,global,reloc=2,class=CODE,delta=1
    98                           	psect	text83,global,reloc=2,class=CODE,delta=1
    99                           	psect	text84,global,reloc=2,class=CODE,delta=1
   100                           	psect	text85,global,reloc=2,class=CODE,delta=1
   101                           	psect	text86,global,reloc=2,class=CODE,delta=1
   102                           	psect	text87,global,reloc=2,class=CODE,delta=1
   103                           	psect	text88,global,reloc=2,class=CODE,delta=1
   104                           	psect	text89,global,reloc=2,class=CODE,delta=1
   105                           	psect	text90,global,reloc=2,class=CODE,delta=1
   106                           	psect	text91,global,reloc=2,class=CODE,delta=1
   107                           	psect	text92,global,reloc=2,class=CODE,delta=1
   108                           	psect	text93,global,reloc=2,class=CODE,delta=1
   109                           	psect	text94,global,reloc=2,class=CODE,delta=1
   110                           	psect	text95,global,reloc=2,class=CODE,delta=1
   111                           	psect	text96,global,reloc=2,class=CODE,delta=1
   112                           	psect	text97,global,reloc=2,class=CODE,delta=1
   113                           	psect	text98,global,reloc=2,class=CODE,delta=1
   114                           	psect	text99,global,reloc=2,class=CODE,delta=1
   115                           	psect	text100,global,reloc=2,class=CODE,delta=1
   116                           	psect	text101,global,reloc=2,class=CODE,delta=1
   117                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   118                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   119                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   120  0000                     
   121                           ; Version 1.40
   122                           ; Generated 01/12/2016 GMT
   123                           ; 
   124                           ; Copyright © 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
   125                           ; All rights reserved.
   126                           ; 
   127                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   128                           ; 
   129                           ; Redistribution and use in source and binary forms, with or without modification, are
   130                           ; permitted provided that the following conditions are met:
   131                           ; 
   132                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   133                           ;        conditions and the following disclaimer.
   134                           ; 
   135                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   136                           ;        of conditions and the following disclaimer in the documentation and/or other
   137                           ;        materials provided with the distribution.
   138                           ; 
   139                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   140                           ;        software without specific prior written permission.
   141                           ; 
   142                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   143                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   144                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   145                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   146                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   147                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   148                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   149                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   150                           ; 
   151                           ; 
   152                           ; Code-generator required, PIC18F4620 Definitions
   153                           ; 
   154                           ; SFR Addresses
   155  0000                     
   156                           	psect	idataBANK1
   157  005B48                     __pidataBANK1:
   158                           	opt stack 0
   159                           
   160                           ;initializer for UI@F3246
   161  005B48  4D                 	db	77
   162  005B49  4D                 	db	77
   163  005B4A  4D                 	db	77
   164  005B4B  00                 	db	0
   165                           
   166                           ;initializer for printRTC@F3236
   167  005B4C  4D                 	db	77
   168  005B4D  4D                 	db	77
   169  005B4E  4D                 	db	77
   170  005B4F  00                 	db	0
   171                           
   172                           	psect	mediumconst
   173  00FA92                     __pmediumconst:
   174                           	opt stack 0
   175  00FA92  00                 	db	0
   176  00FA93                     _keys:
   177                           	opt stack 0
   178  00FA93  31                 	db	49
   179  00FA94  32                 	db	50
   180  00FA95  33                 	db	51
   181  00FA96  41                 	db	65
   182  00FA97  34                 	db	52
   183  00FA98  35                 	db	53
   184  00FA99  36                 	db	54
   185  00FA9A  42                 	db	66
   186  00FA9B  37                 	db	55
   187  00FA9C  38                 	db	56
   188  00FA9D  39                 	db	57
   189  00FA9E  43                 	db	67
   190  00FA9F  2A                 	db	42
   191  00FAA0  30                 	db	48
   192  00FAA1  23                 	db	35
   193  00FAA2  44                 	db	68
   194  00FAA3  00                 	db	0
   195  00FAA4                     __end_of_keys:
   196                           	opt stack 0
   197  00FAA4                     _dpowers:
   198                           	opt stack 0
   199  00FAA4  0001               	dw	1
   200  00FAA6  000A               	dw	10
   201  00FAA8  0064               	dw	100
   202  00FAAA  03E8               	dw	1000
   203  00FAAC  2710               	dw	10000
   204  00FAAE                     __end_of_dpowers:
   205                           	opt stack 0
   206  0000                     _ADCON0	set	4034
   207  0000                     _ADCON0bits	set	4034
   208  0000                     _ADCON1	set	4033
   209  0000                     _ADCON2	set	4032
   210  0000                     _ADRESH	set	4036
   211  0000                     _ADRESL	set	4035
   212  0000                     _CMCONbits	set	4020
   213  0000                     _CVRCON	set	4021
   214  0000                     _EEADR	set	4009
   215  0000                     _EEADRH	set	4010
   216  0000                     _EECON1bits	set	4006
   217  0000                     _EECON2	set	4007
   218  0000                     _EEDATA	set	4008
   219  0000                     _INTCONbits	set	4082
   220  0000                     _LATA	set	3977
   221  0000                     _LATAbits	set	3977
   222  0000                     _LATB	set	3978
   223  0000                     _LATBbits	set	3978
   224  0000                     _LATC	set	3979
   225  0000                     _LATCbits	set	3979
   226  0000                     _LATD	set	3980
   227  0000                     _LATDbits	set	3980
   228  0000                     _LATE	set	3981
   229  0000                     _OSCCON	set	4051
   230  0000                     _OSCTUNEbits	set	3995
   231  0000                     _PIR2bits	set	4001
   232  0000                     _PORTAbits	set	3968
   233  0000                     _PORTB	set	3969
   234  0000                     _PORTBbits	set	3969
   235  0000                     _PR2	set	4043
   236  0000                     _SSPADD	set	4040
   237  0000                     _SSPBUF	set	4041
   238  0000                     _SSPCON1	set	4038
   239  0000                     _SSPCON2	set	4037
   240  0000                     _SSPSTAT	set	4039
   241  0000                     _T0CON	set	4053
   242  0000                     _T1CON	set	4045
   243  0000                     _T2CON	set	4042
   244  0000                     _T3CON	set	4017
   245  0000                     _TMR0H	set	4055
   246  0000                     _TMR0L	set	4054
   247  0000                     _TMR1H	set	4047
   248  0000                     _TMR1L	set	4046
   249  0000                     _TMR3H	set	4019
   250  0000                     _TMR3L	set	4018
   251  0000                     _TRISA	set	3986
   252  0000                     _TRISB	set	3987
   253  0000                     _TRISC	set	3988
   254  0000                     _TRISD	set	3989
   255  0000                     _TRISE	set	3990
   256  0000                     _ACKDT	set	32301
   257  0000                     _ACKEN	set	32300
   258  0000                     _ADIE	set	31982
   259  0000                     _INT1IE	set	32643
   260  0000                     _INT1IF	set	32640
   261  0000                     _PEIE	set	32662
   262  0000                     _PEN	set	32298
   263  0000                     _RCEN	set	32299
   264  0000                     _RSEN	set	32297
   265  0000                     _SEN	set	32296
   266  0000                     _TMR0IE	set	32661
   267  0000                     _TMR0IF	set	32658
   268  0000                     _TMR0ON	set	32431
   269  0000                     _TMR1IE	set	31976
   270  0000                     _TMR1IF	set	31984
   271  0000                     _TMR1ON	set	32360
   272  0000                     _TMR2IE	set	31977
   273  0000                     _TMR2IF	set	31985
   274  0000                     _TMR2ON	set	32338
   275  0000                     _TMR3IE	set	32001
   276  0000                     _TMR3IF	set	32009
   277  0000                     _TMR3ON	set	32136
   278  0000                     _TRISC3	set	31907
   279  0000                     _TRISC4	set	31908
   280  0000                     _nRBPU	set	32655
   281  00FAAE                     STR_21:
   282  00FAAE  25                 	db	37
   283  00FAAF  30                 	db	48	;'0'
   284  00FAB0  32                 	db	50	;'2'
   285  00FAB1  64                 	db	100	;'d'
   286  00FAB2  25                 	db	37
   287  00FAB3  73                 	db	115	;'s'
   288  00FAB4  20                 	db	32
   289  00FAB5  7C                 	db	124
   290  00FAB6  20                 	db	32
   291  00FAB7  25                 	db	37
   292  00FAB8  30                 	db	48	;'0'
   293  00FAB9  32                 	db	50	;'2'
   294  00FABA  64                 	db	100	;'d'
   295  00FABB  3A                 	db	58	;':'
   296  00FABC  25                 	db	37
   297  00FABD  30                 	db	48	;'0'
   298  00FABE  32                 	db	50	;'2'
   299  00FABF  64                 	db	100	;'d'
   300  00FAC0  3A                 	db	58	;':'
   301  00FAC1  25                 	db	37
   302  00FAC2  30                 	db	48	;'0'
   303  00FAC3  32                 	db	50	;'2'
   304  00FAC4  64                 	db	100	;'d'
   305  00FAC5  00                 	db	0
   306  00FAC6                     STR_67:
   307  00FAC6  28                 	db	40
   308  00FAC7  64                 	db	100	;'d'
   309  00FAC8  61                 	db	97	;'a'
   310  00FAC9  74                 	db	116	;'t'
   311  00FACA  61                 	db	97	;'a'
   312  00FACB  3A                 	db	58	;':'
   313  00FACC  20                 	db	32
   314  00FACD  25                 	db	37
   315  00FACE  75                 	db	117	;'u'
   316  00FACF  2C                 	db	44
   317  00FAD0  20                 	db	32
   318  00FAD1  61                 	db	97	;'a'
   319  00FAD2  64                 	db	100	;'d'
   320  00FAD3  64                 	db	100	;'d'
   321  00FAD4  72                 	db	114	;'r'
   322  00FAD5  3A                 	db	58	;':'
   323  00FAD6  20                 	db	32
   324  00FAD7  25                 	db	37
   325  00FAD8  75                 	db	117	;'u'
   326  00FAD9  29                 	db	41
   327  00FADA  00                 	db	0
   328  00FADB                     STR_64:
   329  00FADB  20                 	db	32
   330  00FADC  20                 	db	32
   331  00FADD  20                 	db	32
   332  00FADE  20                 	db	32
   333  00FADF  20                 	db	32
   334  00FAE0  20                 	db	32
   335  00FAE1  20                 	db	32
   336  00FAE2  20                 	db	32
   337  00FAE3  20                 	db	32
   338  00FAE4  20                 	db	32
   339  00FAE5  20                 	db	32
   340  00FAE6  20                 	db	32
   341  00FAE7  46                 	db	70	;'F'
   342  00FAE8  25                 	db	37
   343  00FAE9  64                 	db	100	;'d'
   344  00FAEA  4C                 	db	76	;'L'
   345  00FAEB  25                 	db	37
   346  00FAEC  64                 	db	100	;'d'
   347  00FAED  00                 	db	0
   348  00FAEE                     STR_112:
   349  00FAEE  44                 	db	68	;'D'
   350  00FAEF  20                 	db	32
   351  00FAF0  57                 	db	87	;'W'
   352  00FAF1  49                 	db	73	;'I'
   353  00FAF2  4C                 	db	76	;'L'
   354  00FAF3  4C                 	db	76	;'L'
   355  00FAF4  20                 	db	32
   356  00FAF5  52                 	db	82	;'R'
   357  00FAF6  45                 	db	69	;'E'
   358  00FAF7  54                 	db	84	;'T'
   359  00FAF8  55                 	db	85	;'U'
   360  00FAF9  52                 	db	82	;'R'
   361  00FAFA  4E                 	db	78	;'N'
   362  00FAFB  20                 	db	32
   363  00FAFC  20                 	db	32
   364  00FAFD  20                 	db	32
   365  00FAFE  20                 	db	32
   366  00FAFF  00                 	db	0
   367  00FB00                     STR_122:
   368  00FB00  4F                 	db	79	;'O'
   369  00FB01  54                 	db	84	;'T'
   370  00FB02  48                 	db	72	;'H'
   371  00FB03  45                 	db	69	;'E'
   372  00FB04  52                 	db	82	;'R'
   373  00FB05  20                 	db	32
   374  00FB06  53                 	db	83	;'S'
   375  00FB07  45                 	db	69	;'E'
   376  00FB08  54                 	db	84	;'T'
   377  00FB09  53                 	db	83	;'S'
   378  00FB0A  20                 	db	32
   379  00FB0B  52                 	db	82	;'R'
   380  00FB0C  41                 	db	65	;'A'
   381  00FB0D  35                 	db	53	;'5'
   382  00FB0E  20                 	db	32
   383  00FB0F  20                 	db	32
   384  00FB10  20                 	db	32
   385  00FB11  00                 	db	0
   386  00FB12                     STR_121:
   387  00FB12  53                 	db	83	;'S'
   388  00FB13  3A                 	db	58	;':'
   389  00FB14  20                 	db	32
   390  00FB15  44                 	db	68	;'D'
   391  00FB16  20                 	db	32
   392  00FB17  57                 	db	87	;'W'
   393  00FB18  49                 	db	73	;'I'
   394  00FB19  4C                 	db	76	;'L'
   395  00FB1A  4C                 	db	76	;'L'
   396  00FB1B  20                 	db	32
   397  00FB1C  52                 	db	82	;'R'
   398  00FB1D  45                 	db	69	;'E'
   399  00FB1E  54                 	db	84	;'T'
   400  00FB1F  55                 	db	85	;'U'
   401  00FB20  52                 	db	82	;'R'
   402  00FB21  4E                 	db	78	;'N'
   403  00FB22  20                 	db	32
   404  00FB23  00                 	db	0
   405  00FB24                     STR_124:
   406  00FB24  4F                 	db	79	;'O'
   407  00FB25  54                 	db	84	;'T'
   408  00FB26  48                 	db	72	;'H'
   409  00FB27  45                 	db	69	;'E'
   410  00FB28  52                 	db	82	;'R'
   411  00FB29  3A                 	db	58	;':'
   412  00FB2A  20                 	db	32
   413  00FB2B  43                 	db	67	;'C'
   414  00FB2C  41                 	db	65	;'A'
   415  00FB2D  4D                 	db	77	;'M'
   416  00FB2E  20                 	db	32
   417  00FB2F  54                 	db	84	;'T'
   418  00FB30  4F                 	db	79	;'O'
   419  00FB31  47                 	db	71	;'G'
   420  00FB32  47                 	db	71	;'G'
   421  00FB33  4C                 	db	76	;'L'
   422  00FB34  45                 	db	69	;'E'
   423  00FB35  00                 	db	0
   424  00FB36                     STR_130:
   425  00FB36  4F                 	db	79	;'O'
   426  00FB37  54                 	db	84	;'T'
   427  00FB38  48                 	db	72	;'H'
   428  00FB39  45                 	db	69	;'E'
   429  00FB3A  52                 	db	82	;'R'
   430  00FB3B  20                 	db	32
   431  00FB3C  53                 	db	83	;'S'
   432  00FB3D  45                 	db	69	;'E'
   433  00FB3E  54                 	db	84	;'T'
   434  00FB3F  53                 	db	83	;'S'
   435  00FB40  20                 	db	32
   436  00FB41  50                 	db	80	;'P'
   437  00FB42  55                 	db	85	;'U'
   438  00FB43  53                 	db	83	;'S'
   439  00FB44  48                 	db	72	;'H'
   440  00FB45  45                 	db	69	;'E'
   441  00FB46  52                 	db	82	;'R'
   442  00FB47  00                 	db	0
   443  00FB48                     STR_3:
   444  00FB48  2D                 	db	45
   445  00FB49  2D                 	db	45
   446  00FB4A  20                 	db	32
   447  00FB4B  4C                 	db	76	;'L'
   448  00FB4C  4F                 	db	79	;'O'
   449  00FB4D  47                 	db	71	;'G'
   450  00FB4E  20                 	db	32
   451  00FB4F  25                 	db	37
   452  00FB50  32                 	db	50	;'2'
   453  00FB51  64                 	db	100	;'d'
   454  00FB52  20                 	db	32
   455  00FB53  48                 	db	72	;'H'
   456  00FB54  45                 	db	69	;'E'
   457  00FB55  52                 	db	82	;'R'
   458  00FB56  45                 	db	69	;'E'
   459  00FB57  2D                 	db	45
   460  00FB58  2D                 	db	45
   461  00FB59  00                 	db	0
   462  00FB5A                     STR_1:
   463  00FB5A  52                 	db	82	;'R'
   464  00FB5B  45                 	db	69	;'E'
   465  00FB5C  53                 	db	83	;'S'
   466  00FB5D  55                 	db	85	;'U'
   467  00FB5E  4C                 	db	76	;'L'
   468  00FB5F  54                 	db	84	;'T'
   469  00FB60  53                 	db	83	;'S'
   470  00FB61  20                 	db	32
   471  00FB62  49                 	db	73	;'I'
   472  00FB63  4E                 	db	78	;'N'
   473  00FB64  20                 	db	32
   474  00FB65  4C                 	db	76	;'L'
   475  00FB66  4F                 	db	79	;'O'
   476  00FB67  47                 	db	71	;'G'
   477  00FB68  20                 	db	32
   478  00FB69  25                 	db	37
   479  00FB6A  64                 	db	100	;'d'
   480  00FB6B  00                 	db	0
   481  00FB6C                     STR_103:
   482  00FB6C  4D                 	db	77	;'M'
   483  00FB6D  49                 	db	73	;'I'
   484  00FB6E  44                 	db	68	;'D'
   485  00FB6F  20                 	db	32
   486  00FB70  2D                 	db	45
   487  00FB71  2D                 	db	45
   488  00FB72  20                 	db	32
   489  00FB73  32                 	db	50	;'2'
   490  00FB74  73                 	db	115	;'s'
   491  00FB75  20                 	db	32
   492  00FB76  20                 	db	32
   493  00FB77  20                 	db	32
   494  00FB78  20                 	db	32
   495  00FB79  20                 	db	32
   496  00FB7A  20                 	db	32
   497  00FB7B  20                 	db	32
   498  00FB7C  00                 	db	0
   499  00FB7D                     STR_106:
   500  00FB7D  44                 	db	68	;'D'
   501  00FB7E  52                 	db	82	;'R'
   502  00FB7F  4F                 	db	79	;'O'
   503  00FB80  50                 	db	80	;'P'
   504  00FB81  20                 	db	32
   505  00FB82  2D                 	db	45
   506  00FB83  2D                 	db	45
   507  00FB84  20                 	db	32
   508  00FB85  32                 	db	50	;'2'
   509  00FB86  73                 	db	115	;'s'
   510  00FB87  20                 	db	32
   511  00FB88  20                 	db	32
   512  00FB89  20                 	db	32
   513  00FB8A  20                 	db	32
   514  00FB8B  20                 	db	32
   515  00FB8C  20                 	db	32
   516  00FB8D  00                 	db	0
   517  00FB8E                     STR_100:
   518  00FB8E  4C                 	db	76	;'L'
   519  00FB8F  45                 	db	69	;'E'
   520  00FB90  46                 	db	70	;'F'
   521  00FB91  54                 	db	84	;'T'
   522  00FB92  20                 	db	32
   523  00FB93  2D                 	db	45
   524  00FB94  2D                 	db	45
   525  00FB95  20                 	db	32
   526  00FB96  32                 	db	50	;'2'
   527  00FB97  73                 	db	115	;'s'
   528  00FB98  20                 	db	32
   529  00FB99  20                 	db	32
   530  00FB9A  20                 	db	32
   531  00FB9B  20                 	db	32
   532  00FB9C  20                 	db	32
   533  00FB9D  20                 	db	32
   534  00FB9E  00                 	db	0
   535  00FB9F                     STR_105:
   536  00FB9F  4C                 	db	76	;'L'
   537  00FBA0  45                 	db	69	;'E'
   538  00FBA1  56                 	db	86	;'V'
   539  00FBA2  45                 	db	69	;'E'
   540  00FBA3  4C                 	db	76	;'L'
   541  00FBA4  20                 	db	32
   542  00FBA5  2D                 	db	45
   543  00FBA6  2D                 	db	45
   544  00FBA7  20                 	db	32
   545  00FBA8  32                 	db	50	;'2'
   546  00FBA9  73                 	db	115	;'s'
   547  00FBAA  20                 	db	32
   548  00FBAB  20                 	db	32
   549  00FBAC  20                 	db	32
   550  00FBAD  20                 	db	32
   551  00FBAE  20                 	db	32
   552  00FBAF  00                 	db	0
   553  00FBB0                     STR_99:
   554  00FBB0  52                 	db	82	;'R'
   555  00FBB1  49                 	db	73	;'I'
   556  00FBB2  47                 	db	71	;'G'
   557  00FBB3  48                 	db	72	;'H'
   558  00FBB4  54                 	db	84	;'T'
   559  00FBB5  20                 	db	32
   560  00FBB6  2D                 	db	45
   561  00FBB7  2D                 	db	45
   562  00FBB8  20                 	db	32
   563  00FBB9  32                 	db	50	;'2'
   564  00FBBA  73                 	db	115	;'s'
   565  00FBBB  20                 	db	32
   566  00FBBC  20                 	db	32
   567  00FBBD  20                 	db	32
   568  00FBBE  20                 	db	32
   569  00FBBF  20                 	db	32
   570  00FBC0  00                 	db	0
   571  00FBC1                     STR_98:
   572  00FBC1  4D                 	db	77	;'M'
   573  00FBC2  49                 	db	73	;'I'
   574  00FBC3  44                 	db	68	;'D'
   575  00FBC4  44                 	db	68	;'D'
   576  00FBC5  4C                 	db	76	;'L'
   577  00FBC6  45                 	db	69	;'E'
   578  00FBC7  20                 	db	32
   579  00FBC8  2D                 	db	45
   580  00FBC9  2D                 	db	45
   581  00FBCA  20                 	db	32
   582  00FBCB  32                 	db	50	;'2'
   583  00FBCC  73                 	db	115	;'s'
   584  00FBCD  20                 	db	32
   585  00FBCE  20                 	db	32
   586  00FBCF  20                 	db	32
   587  00FBD0  20                 	db	32
   588  00FBD1  00                 	db	0
   589  00FBD2                     STR_113:
   590  00FBD2  4F                 	db	79	;'O'
   591  00FBD3  54                 	db	84	;'T'
   592  00FBD4  48                 	db	72	;'H'
   593  00FBD5  45                 	db	69	;'E'
   594  00FBD6  52                 	db	82	;'R'
   595  00FBD7  20                 	db	32
   596  00FBD8  53                 	db	83	;'S'
   597  00FBD9  45                 	db	69	;'E'
   598  00FBDA  54                 	db	84	;'T'
   599  00FBDB  53                 	db	83	;'S'
   600  00FBDC  20                 	db	32
   601  00FBDD  44                 	db	68	;'D'
   602  00FBDE  43                 	db	67	;'C'
   603  00FBDF  20                 	db	32
   604  00FBE0  20                 	db	32
   605  00FBE1  20                 	db	32
   606  00FBE2  00                 	db	0
   607  00FBE3                     STR_119:
   608  00FBE3  44                 	db	68	;'D'
   609  00FBE4  20                 	db	32
   610  00FBE5  57                 	db	87	;'W'
   611  00FBE6  49                 	db	73	;'I'
   612  00FBE7  4C                 	db	76	;'L'
   613  00FBE8  4C                 	db	76	;'L'
   614  00FBE9  20                 	db	32
   615  00FBEA  52                 	db	82	;'R'
   616  00FBEB  45                 	db	69	;'E'
   617  00FBEC  54                 	db	84	;'T'
   618  00FBED  55                 	db	85	;'U'
   619  00FBEE  52                 	db	82	;'R'
   620  00FBEF  4E                 	db	78	;'N'
   621  00FBF0  20                 	db	32
   622  00FBF1  20                 	db	32
   623  00FBF2  20                 	db	32
   624  00FBF3  00                 	db	0
   625  00FBF4                     STR_116:
   626  00FBF4  35                 	db	53	;'5'
   627  00FBF5  3A                 	db	58	;':'
   628  00FBF6  48                 	db	72	;'H'
   629  00FBF7  7C                 	db	124
   630  00FBF8  36                 	db	54	;'6'
   631  00FBF9  3A                 	db	58	;':'
   632  00FBFA  4C                 	db	76	;'L'
   633  00FBFB  7C                 	db	124
   634  00FBFC  49                 	db	73	;'I'
   635  00FBFD  52                 	db	82	;'R'
   636  00FBFE  3A                 	db	58	;':'
   637  00FBFF  25                 	db	37
   638  00FC00  64                 	db	100	;'d'
   639  00FC01  20                 	db	32
   640  00FC02  20                 	db	32
   641  00FC03  20                 	db	32
   642  00FC04  00                 	db	0
   643  00FC05                     STR_114:
   644  00FC05  31                 	db	49	;'1'
   645  00FC06  3A                 	db	58	;':'
   646  00FC07  20                 	db	32
   647  00FC08  44                 	db	68	;'D'
   648  00FC09  43                 	db	67	;'C'
   649  00FC0A  20                 	db	32
   650  00FC0B  7C                 	db	124
   651  00FC0C  20                 	db	32
   652  00FC0D  41                 	db	65	;'A'
   653  00FC0E  3A                 	db	58	;':'
   654  00FC0F  20                 	db	32
   655  00FC10  41                 	db	65	;'A'
   656  00FC11  52                 	db	82	;'R'
   657  00FC12  4D                 	db	77	;'M'
   658  00FC13  20                 	db	32
   659  00FC14  20                 	db	32
   660  00FC15  00                 	db	0
   661  00FC16                     STR_101:
   662  00FC16  4D                 	db	77	;'M'
   663  00FC17  49                 	db	73	;'I'
   664  00FC18  44                 	db	68	;'D'
   665  00FC19  2D                 	db	45
   666  00FC1A  4C                 	db	76	;'L'
   667  00FC1B  45                 	db	69	;'E'
   668  00FC1C  46                 	db	70	;'F'
   669  00FC1D  54                 	db	84	;'T'
   670  00FC1E  20                 	db	32
   671  00FC1F  2D                 	db	45
   672  00FC20  2D                 	db	45
   673  00FC21  20                 	db	32
   674  00FC22  32                 	db	50	;'2'
   675  00FC23  73                 	db	115	;'s'
   676  00FC24  20                 	db	32
   677  00FC25  20                 	db	32
   678  00FC26  00                 	db	0
   679  00FC27                     STR_102:
   680  00FC27  4D                 	db	77	;'M'
   681  00FC28  49                 	db	73	;'I'
   682  00FC29  44                 	db	68	;'D'
   683  00FC2A  2D                 	db	45
   684  00FC2B  52                 	db	82	;'R'
   685  00FC2C  49                 	db	73	;'I'
   686  00FC2D  47                 	db	71	;'G'
   687  00FC2E  48                 	db	72	;'H'
   688  00FC2F  54                 	db	84	;'T'
   689  00FC30  20                 	db	32
   690  00FC31  2D                 	db	45
   691  00FC32  2D                 	db	45
   692  00FC33  20                 	db	32
   693  00FC34  32                 	db	50	;'2'
   694  00FC35  73                 	db	115	;'s'
   695  00FC36  20                 	db	32
   696  00FC37  00                 	db	0
   697  00FC38  45                 	db	69	;'E'
   698  00FC39  4C                 	db	76	;'L'
   699  00FC3A  53                 	db	83	;'S'
   700  00FC3B  45                 	db	69	;'E'
   701  00FC3C  20                 	db	32
   702  00FC3D  54                 	db	84	;'T'
   703  00FC3E  4F                 	db	79	;'O'
   704  00FC3F  47                 	db	71	;'G'
   705  00FC40  47                 	db	71	;'G'
   706  00FC41  4C                 	db	76	;'L'
   707  00FC42  45                 	db	69	;'E'
   708  00FC43  53                 	db	83	;'S'
   709  00FC44  20                 	db	32
   710  00FC45  52                 	db	82	;'R'
   711  00FC46  41                 	db	65	;'A'
   712  00FC47  35                 	db	53	;'5'
   713  00FC48  00                 	db	0
   714  00FC49                     STR_73:
   715  00FC49  41                 	db	65	;'A'
   716  00FC4A  4C                 	db	76	;'L'
   717  00FC4B  47                 	db	71	;'G'
   718  00FC4C  31                 	db	49	;'1'
   719  00FC4D  3A                 	db	58	;':'
   720  00FC4E  20                 	db	32
   721  00FC4F  39                 	db	57	;'9'
   722  00FC50  20                 	db	32
   723  00FC51  50                 	db	80	;'P'
   724  00FC52  4F                 	db	79	;'O'
   725  00FC53  50                 	db	80	;'P'
   726  00FC54  4E                 	db	78	;'N'
   727  00FC55  4F                 	db	79	;'O'
   728  00FC56  54                 	db	84	;'T'
   729  00FC57  41                 	db	65	;'A'
   730  00FC58  42                 	db	66	;'B'
   731  00FC59  00                 	db	0
   732  00FC5A                     STR_93:
   733  00FC5A  54                 	db	84	;'T'
   734  00FC5B  53                 	db	83	;'S'
   735  00FC5C  54                 	db	84	;'T'
   736  00FC5D  3A                 	db	58	;':'
   737  00FC5E  20                 	db	32
   738  00FC5F  43                 	db	67	;'C'
   739  00FC60  4F                 	db	79	;'O'
   740  00FC61  4E                 	db	78	;'N'
   741  00FC62  44                 	db	68	;'D'
   742  00FC63  20                 	db	32
   743  00FC64  53                 	db	83	;'S'
   744  00FC65  4F                 	db	79	;'O'
   745  00FC66  4C                 	db	76	;'L'
   746  00FC67  4E                 	db	78	;'N'
   747  00FC68  27                 	db	39
   748  00FC69  44                 	db	68	;'D'
   749  00FC6A  00                 	db	0
   750  00FC6B                     STR_95:
   751  00FC6B  54                 	db	84	;'T'
   752  00FC6C  53                 	db	83	;'S'
   753  00FC6D  54                 	db	84	;'T'
   754  00FC6E  3A                 	db	58	;':'
   755  00FC6F  20                 	db	32
   756  00FC70  50                 	db	80	;'P'
   757  00FC71  55                 	db	85	;'U'
   758  00FC72  53                 	db	83	;'S'
   759  00FC73  48                 	db	72	;'H'
   760  00FC74  20                 	db	32
   761  00FC75  53                 	db	83	;'S'
   762  00FC76  4F                 	db	79	;'O'
   763  00FC77  4C                 	db	76	;'L'
   764  00FC78  4E                 	db	78	;'N'
   765  00FC79  27                 	db	39
   766  00FC7A  44                 	db	68	;'D'
   767  00FC7B  00                 	db	0
   768  00FC7C                     STR_69:
   769  00FC7C  32                 	db	50	;'2'
   770  00FC7D  2E                 	db	46
   771  00FC7E  53                 	db	83	;'S'
   772  00FC7F  4E                 	db	78	;'N'
   773  00FC80  52                 	db	82	;'R'
   774  00FC81  7C                 	db	124
   775  00FC82  34                 	db	52	;'4'
   776  00FC83  2E                 	db	46
   777  00FC84  48                 	db	72	;'H'
   778  00FC85  49                 	db	73	;'I'
   779  00FC86  7C                 	db	124
   780  00FC87  35                 	db	53	;'5'
   781  00FC88  2E                 	db	46
   782  00FC89  4D                 	db	77	;'M'
   783  00FC8A  45                 	db	69	;'E'
   784  00FC8B  44                 	db	68	;'D'
   785  00FC8C  00                 	db	0
   786  00FC8D                     STR_70:
   787  00FC8D  42                 	db	66	;'B'
   788  00FC8E  2E                 	db	46
   789  00FC8F  50                 	db	80	;'P'
   790  00FC90  4C                 	db	76	;'L'
   791  00FC91  41                 	db	65	;'A'
   792  00FC92  7C                 	db	124
   793  00FC93  38                 	db	56	;'8'
   794  00FC94  2E                 	db	46
   795  00FC95  53                 	db	83	;'S'
   796  00FC96  56                 	db	86	;'V'
   797  00FC97  7C                 	db	124
   798  00FC98  39                 	db	57	;'9'
   799  00FC99  2E                 	db	46
   800  00FC9A  42                 	db	66	;'B'
   801  00FC9B  4C                 	db	76	;'L'
   802  00FC9C  4B                 	db	75	;'K'
   803  00FC9D  00                 	db	0
   804  00FC9E                     STR_128:
   805  00FC9E  45                 	db	69	;'E'
   806  00FC9F  4C                 	db	76	;'L'
   807  00FCA0  53                 	db	83	;'S'
   808  00FCA1  45                 	db	69	;'E'
   809  00FCA2  20                 	db	32
   810  00FCA3  54                 	db	84	;'T'
   811  00FCA4  4F                 	db	79	;'O'
   812  00FCA5  47                 	db	71	;'G'
   813  00FCA6  47                 	db	71	;'G'
   814  00FCA7  4C                 	db	76	;'L'
   815  00FCA8  45                 	db	69	;'E'
   816  00FCA9  53                 	db	83	;'S'
   817  00FCAA  20                 	db	32
   818  00FCAB  41                 	db	65	;'A'
   819  00FCAC  52                 	db	82	;'R'
   820  00FCAD  4D                 	db	77	;'M'
   821  00FCAE  00                 	db	0
   822  00FCAF                     STR_111:
   823  00FCAF  54                 	db	84	;'T'
   824  00FCB0  53                 	db	83	;'S'
   825  00FCB1  54                 	db	84	;'T'
   826  00FCB2  3A                 	db	58	;':'
   827  00FCB3  20                 	db	32
   828  00FCB4  42                 	db	66	;'B'
   829  00FCB5  4F                 	db	79	;'O'
   830  00FCB6  54                 	db	84	;'T'
   831  00FCB7  48                 	db	72	;'H'
   832  00FCB8  20                 	db	32
   833  00FCB9  53                 	db	83	;'S'
   834  00FCBA  45                 	db	69	;'E'
   835  00FCBB  52                 	db	82	;'R'
   836  00FCBC  56                 	db	86	;'V'
   837  00FCBD  4F                 	db	79	;'O'
   838  00FCBE  53                 	db	83	;'S'
   839  00FCBF  00                 	db	0
   840  00FCC0                     STR_41:
   841  00FCC0  4C                 	db	76	;'L'
   842  00FCC1  4F                 	db	79	;'O'
   843  00FCC2  47                 	db	71	;'G'
   844  00FCC3  20                 	db	32
   845  00FCC4  31                 	db	49	;'1'
   846  00FCC5  20                 	db	32
   847  00FCC6  20                 	db	32
   848  00FCC7  20                 	db	32
   849  00FCC8  20                 	db	32
   850  00FCC9  20                 	db	32
   851  00FCCA  20                 	db	32
   852  00FCCB  20                 	db	32
   853  00FCCC  20                 	db	32
   854  00FCCD  20                 	db	32
   855  00FCCE  20                 	db	32
   856  00FCCF  20                 	db	32
   857  00FCD0  00                 	db	0
   858  00FCD1                     STR_40:
   859  00FCD1  4C                 	db	76	;'L'
   860  00FCD2  4F                 	db	79	;'O'
   861  00FCD3  47                 	db	71	;'G'
   862  00FCD4  20                 	db	32
   863  00FCD5  32                 	db	50	;'2'
   864  00FCD6  20                 	db	32
   865  00FCD7  20                 	db	32
   866  00FCD8  20                 	db	32
   867  00FCD9  20                 	db	32
   868  00FCDA  20                 	db	32
   869  00FCDB  20                 	db	32
   870  00FCDC  20                 	db	32
   871  00FCDD  20                 	db	32
   872  00FCDE  20                 	db	32
   873  00FCDF  20                 	db	32
   874  00FCE0  20                 	db	32
   875  00FCE1  00                 	db	0
   876  00FCE2                     STR_44:
   877  00FCE2  4C                 	db	76	;'L'
   878  00FCE3  4F                 	db	79	;'O'
   879  00FCE4  47                 	db	71	;'G'
   880  00FCE5  20                 	db	32
   881  00FCE6  33                 	db	51	;'3'
   882  00FCE7  20                 	db	32
   883  00FCE8  20                 	db	32
   884  00FCE9  20                 	db	32
   885  00FCEA  20                 	db	32
   886  00FCEB  20                 	db	32
   887  00FCEC  20                 	db	32
   888  00FCED  20                 	db	32
   889  00FCEE  20                 	db	32
   890  00FCEF  20                 	db	32
   891  00FCF0  20                 	db	32
   892  00FCF1  20                 	db	32
   893  00FCF2  00                 	db	0
   894  00FCF3                     STR_48:
   895  00FCF3  4C                 	db	76	;'L'
   896  00FCF4  4F                 	db	79	;'O'
   897  00FCF5  47                 	db	71	;'G'
   898  00FCF6  20                 	db	32
   899  00FCF7  34                 	db	52	;'4'
   900  00FCF8  20                 	db	32
   901  00FCF9  20                 	db	32
   902  00FCFA  20                 	db	32
   903  00FCFB  20                 	db	32
   904  00FCFC  20                 	db	32
   905  00FCFD  20                 	db	32
   906  00FCFE  20                 	db	32
   907  00FCFF  20                 	db	32
   908  00FD00  20                 	db	32
   909  00FD01  20                 	db	32
   910  00FD02  20                 	db	32
   911  00FD03  00                 	db	0
   912  00FD04                     STR_36:
   913  00FD04  33                 	db	51	;'3'
   914  00FD05  2E                 	db	46
   915  00FD06  20                 	db	32
   916  00FD07  4C                 	db	76	;'L'
   917  00FD08  4F                 	db	79	;'O'
   918  00FD09  47                 	db	71	;'G'
   919  00FD0A  53                 	db	83	;'S'
   920  00FD0B  20                 	db	32
   921  00FD0C  20                 	db	32
   922  00FD0D  20                 	db	32
   923  00FD0E  20                 	db	32
   924  00FD0F  20                 	db	32
   925  00FD10  20                 	db	32
   926  00FD11  20                 	db	32
   927  00FD12  20                 	db	32
   928  00FD13  20                 	db	32
   929  00FD14  00                 	db	0
   930  00FD15                     STR_32:
   931  00FD15  32                 	db	50	;'2'
   932  00FD16  2E                 	db	46
   933  00FD17  20                 	db	32
   934  00FD18  53                 	db	83	;'S'
   935  00FD19  4F                 	db	79	;'O'
   936  00FD1A  52                 	db	82	;'R'
   937  00FD1B  54                 	db	84	;'T'
   938  00FD1C  20                 	db	32
   939  00FD1D  20                 	db	32
   940  00FD1E  20                 	db	32
   941  00FD1F  20                 	db	32
   942  00FD20  20                 	db	32
   943  00FD21  20                 	db	32
   944  00FD22  20                 	db	32
   945  00FD23  20                 	db	32
   946  00FD24  20                 	db	32
   947  00FD25  00                 	db	0
   948  00FD26                     STR_33:
   949  00FD26  31                 	db	49	;'1'
   950  00FD27  2E                 	db	46
   951  00FD28  20                 	db	32
   952  00FD29  44                 	db	68	;'D'
   953  00FD2A  41                 	db	65	;'A'
   954  00FD2B  54                 	db	84	;'T'
   955  00FD2C  45                 	db	69	;'E'
   956  00FD2D  2F                 	db	47
   957  00FD2E  54                 	db	84	;'T'
   958  00FD2F  49                 	db	73	;'I'
   959  00FD30  4D                 	db	77	;'M'
   960  00FD31  45                 	db	69	;'E'
   961  00FD32  20                 	db	32
   962  00FD33  20                 	db	32
   963  00FD34  20                 	db	32
   964  00FD35  20                 	db	32
   965  00FD36  00                 	db	0
   966  00FD37                     STR_24:
   967  00FD37  20                 	db	32
   968  00FD38  2D                 	db	45
   969  00FD39  2D                 	db	45
   970  00FD3A  20                 	db	32
   971  00FD3B  50                 	db	80	;'P'
   972  00FD3C  4F                 	db	79	;'O'
   973  00FD3D  50                 	db	80	;'P'
   974  00FD3E  20                 	db	32
   975  00FD3F  20                 	db	32
   976  00FD40  43                 	db	67	;'C'
   977  00FD41  41                 	db	65	;'A'
   978  00FD42  4E                 	db	78	;'N'
   979  00FD43  20                 	db	32
   980  00FD44  2D                 	db	45
   981  00FD45  2D                 	db	45
   982  00FD46  20                 	db	32
   983  00FD47  00                 	db	0
   984  00FD48                     STR_26:
   985  00FD48  20                 	db	32
   986  00FD49  2D                 	db	45
   987  00FD4A  2D                 	db	45
   988  00FD4B  20                 	db	32
   989  00FD4C  53                 	db	83	;'S'
   990  00FD4D  4F                 	db	79	;'O'
   991  00FD4E  55                 	db	85	;'U'
   992  00FD4F  50                 	db	80	;'P'
   993  00FD50  20                 	db	32
   994  00FD51  43                 	db	67	;'C'
   995  00FD52  41                 	db	65	;'A'
   996  00FD53  4E                 	db	78	;'N'
   997  00FD54  20                 	db	32
   998  00FD55  2D                 	db	45
   999  00FD56  2D                 	db	45
  1000  00FD57  20                 	db	32
  1001  00FD58  00                 	db	0
  1002  00FD59                     STR_28:
  1003  00FD59  2D                 	db	45
  1004  00FD5A  2D                 	db	45
  1005  00FD5B  20                 	db	32
  1006  00FD5C  54                 	db	84	;'T'
  1007  00FD5D  4F                 	db	79	;'O'
  1008  00FD5E  54                 	db	84	;'T'
  1009  00FD5F  41                 	db	65	;'A'
  1010  00FD60  4C                 	db	76	;'L'
  1011  00FD61  20                 	db	32
  1012  00FD62  43                 	db	67	;'C'
  1013  00FD63  41                 	db	65	;'A'
  1014  00FD64  4E                 	db	78	;'N'
  1015  00FD65  53                 	db	83	;'S'
  1016  00FD66  20                 	db	32
  1017  00FD67  2D                 	db	45
  1018  00FD68  2D                 	db	45
  1019  00FD69  00                 	db	0
  1020  00FD6A                     STR_39:
  1021  00FD6A  4C                 	db	76	;'L'
  1022  00FD6B  4F                 	db	79	;'O'
  1023  00FD6C  47                 	db	71	;'G'
  1024  00FD6D  20                 	db	32
  1025  00FD6E  31                 	db	49	;'1'
  1026  00FD6F  20                 	db	32
  1027  00FD70  20                 	db	32
  1028  00FD71  20                 	db	32
  1029  00FD72  20                 	db	32
  1030  00FD73  20                 	db	32
  1031  00FD74  20                 	db	32
  1032  00FD75  20                 	db	32
  1033  00FD76  20                 	db	32
  1034  00FD77  20                 	db	32
  1035  00FD78  20                 	db	32
  1036  00FD79  3C                 	db	60	;'<'
  1037  00FD7A  00                 	db	0
  1038  00FD7B                     STR_42:
  1039  00FD7B  4C                 	db	76	;'L'
  1040  00FD7C  4F                 	db	79	;'O'
  1041  00FD7D  47                 	db	71	;'G'
  1042  00FD7E  20                 	db	32
  1043  00FD7F  32                 	db	50	;'2'
  1044  00FD80  20                 	db	32
  1045  00FD81  20                 	db	32
  1046  00FD82  20                 	db	32
  1047  00FD83  20                 	db	32
  1048  00FD84  20                 	db	32
  1049  00FD85  20                 	db	32
  1050  00FD86  20                 	db	32
  1051  00FD87  20                 	db	32
  1052  00FD88  20                 	db	32
  1053  00FD89  20                 	db	32
  1054  00FD8A  3C                 	db	60	;'<'
  1055  00FD8B  00                 	db	0
  1056  00FD8C                     STR_46:
  1057  00FD8C  4C                 	db	76	;'L'
  1058  00FD8D  4F                 	db	79	;'O'
  1059  00FD8E  47                 	db	71	;'G'
  1060  00FD8F  20                 	db	32
  1061  00FD90  33                 	db	51	;'3'
  1062  00FD91  20                 	db	32
  1063  00FD92  20                 	db	32
  1064  00FD93  20                 	db	32
  1065  00FD94  20                 	db	32
  1066  00FD95  20                 	db	32
  1067  00FD96  20                 	db	32
  1068  00FD97  20                 	db	32
  1069  00FD98  20                 	db	32
  1070  00FD99  20                 	db	32
  1071  00FD9A  20                 	db	32
  1072  00FD9B  3C                 	db	60	;'<'
  1073  00FD9C  00                 	db	0
  1074  00FD9D                     STR_50:
  1075  00FD9D  4C                 	db	76	;'L'
  1076  00FD9E  4F                 	db	79	;'O'
  1077  00FD9F  47                 	db	71	;'G'
  1078  00FDA0  20                 	db	32
  1079  00FDA1  34                 	db	52	;'4'
  1080  00FDA2  20                 	db	32
  1081  00FDA3  20                 	db	32
  1082  00FDA4  20                 	db	32
  1083  00FDA5  20                 	db	32
  1084  00FDA6  20                 	db	32
  1085  00FDA7  20                 	db	32
  1086  00FDA8  20                 	db	32
  1087  00FDA9  20                 	db	32
  1088  00FDAA  20                 	db	32
  1089  00FDAB  20                 	db	32
  1090  00FDAC  3C                 	db	60	;'<'
  1091  00FDAD  00                 	db	0
  1092  00FDAE                     STR_38:
  1093  00FDAE  33                 	db	51	;'3'
  1094  00FDAF  2E                 	db	46
  1095  00FDB0  20                 	db	32
  1096  00FDB1  4C                 	db	76	;'L'
  1097  00FDB2  4F                 	db	79	;'O'
  1098  00FDB3  47                 	db	71	;'G'
  1099  00FDB4  53                 	db	83	;'S'
  1100  00FDB5  20                 	db	32
  1101  00FDB6  20                 	db	32
  1102  00FDB7  20                 	db	32
  1103  00FDB8  20                 	db	32
  1104  00FDB9  20                 	db	32
  1105  00FDBA  20                 	db	32
  1106  00FDBB  20                 	db	32
  1107  00FDBC  20                 	db	32
  1108  00FDBD  3C                 	db	60	;'<'
  1109  00FDBE  00                 	db	0
  1110  00FDBF                     STR_34:
  1111  00FDBF  32                 	db	50	;'2'
  1112  00FDC0  2E                 	db	46
  1113  00FDC1  20                 	db	32
  1114  00FDC2  53                 	db	83	;'S'
  1115  00FDC3  4F                 	db	79	;'O'
  1116  00FDC4  52                 	db	82	;'R'
  1117  00FDC5  54                 	db	84	;'T'
  1118  00FDC6  20                 	db	32
  1119  00FDC7  20                 	db	32
  1120  00FDC8  20                 	db	32
  1121  00FDC9  20                 	db	32
  1122  00FDCA  20                 	db	32
  1123  00FDCB  20                 	db	32
  1124  00FDCC  20                 	db	32
  1125  00FDCD  20                 	db	32
  1126  00FDCE  3C                 	db	60	;'<'
  1127  00FDCF  00                 	db	0
  1128  00FDD0                     STR_31:
  1129  00FDD0  31                 	db	49	;'1'
  1130  00FDD1  2E                 	db	46
  1131  00FDD2  20                 	db	32
  1132  00FDD3  44                 	db	68	;'D'
  1133  00FDD4  41                 	db	65	;'A'
  1134  00FDD5  54                 	db	84	;'T'
  1135  00FDD6  45                 	db	69	;'E'
  1136  00FDD7  2F                 	db	47
  1137  00FDD8  54                 	db	84	;'T'
  1138  00FDD9  49                 	db	73	;'I'
  1139  00FDDA  4D                 	db	77	;'M'
  1140  00FDDB  45                 	db	69	;'E'
  1141  00FDDC  20                 	db	32
  1142  00FDDD  20                 	db	32
  1143  00FDDE  20                 	db	32
  1144  00FDDF  3C                 	db	60	;'<'
  1145  00FDE0  00                 	db	0
  1146  00FDE1                     STR_6:
  1147  00FDE1  50                 	db	80	;'P'
  1148  00FDE2  41                 	db	65	;'A'
  1149  00FDE3  55                 	db	85	;'U'
  1150  00FDE4  53                 	db	83	;'S'
  1151  00FDE5  45                 	db	69	;'E'
  1152  00FDE6  20                 	db	32
  1153  00FDE7  3C                 	db	60	;'<'
  1154  00FDE8  20                 	db	32
  1155  00FDE9  7C                 	db	124
  1156  00FDEA  20                 	db	32
  1157  00FDEB  42                 	db	66	;'B'
  1158  00FDEC  41                 	db	65	;'A'
  1159  00FDED  43                 	db	67	;'C'
  1160  00FDEE  4B                 	db	75	;'K'
  1161  00FDEF  20                 	db	32
  1162  00FDF0  3E                 	db	62	;'>'
  1163  00FDF1  00                 	db	0
  1164  00FDF2                     STR_30:
  1165  00FDF2  50                 	db	80	;'P'
  1166  00FDF3  55                 	db	85	;'U'
  1167  00FDF4  53                 	db	83	;'S'
  1168  00FDF5  48                 	db	72	;'H'
  1169  00FDF6  20                 	db	32
  1170  00FDF7  54                 	db	84	;'T'
  1171  00FDF8  4F                 	db	79	;'O'
  1172  00FDF9  20                 	db	32
  1173  00FDFA  43                 	db	67	;'C'
  1174  00FDFB  4F                 	db	79	;'O'
  1175  00FDFC  4E                 	db	78	;'N'
  1176  00FDFD  54                 	db	84	;'T'
  1177  00FDFE  49                 	db	73	;'I'
  1178  00FDFF  4E                 	db	78	;'N'
  1179  00FE00  55                 	db	85	;'U'
  1180  00FE01  45                 	db	69	;'E'
  1181  00FE02  00                 	db	0
  1182  00FE03                     STR_27:
  1183  00FE03  4E                 	db	78	;'N'
  1184  00FE04  4C                 	db	76	;'L'
  1185  00FE05  41                 	db	65	;'A'
  1186  00FE06  42                 	db	66	;'B'
  1187  00FE07  3A                 	db	58	;':'
  1188  00FE08  20                 	db	32
  1189  00FE09  25                 	db	37
  1190  00FE0A  64                 	db	100	;'d'
  1191  00FE0B  7C                 	db	124
  1192  00FE0C  4C                 	db	76	;'L'
  1193  00FE0D  41                 	db	65	;'A'
  1194  00FE0E  42                 	db	66	;'B'
  1195  00FE0F  3A                 	db	58	;':'
  1196  00FE10  20                 	db	32
  1197  00FE11  25                 	db	37
  1198  00FE12  64                 	db	100	;'d'
  1199  00FE13  00                 	db	0
  1200  00FE14                     STR_25:
  1201  00FE14  4E                 	db	78	;'N'
  1202  00FE15  54                 	db	84	;'T'
  1203  00FE16  41                 	db	65	;'A'
  1204  00FE17  42                 	db	66	;'B'
  1205  00FE18  3A                 	db	58	;':'
  1206  00FE19  20                 	db	32
  1207  00FE1A  25                 	db	37
  1208  00FE1B  64                 	db	100	;'d'
  1209  00FE1C  7C                 	db	124
  1210  00FE1D  54                 	db	84	;'T'
  1211  00FE1E  41                 	db	65	;'A'
  1212  00FE1F  42                 	db	66	;'B'
  1213  00FE20  3A                 	db	58	;':'
  1214  00FE21  20                 	db	32
  1215  00FE22  25                 	db	37
  1216  00FE23  64                 	db	100	;'d'
  1217  00FE24  00                 	db	0
  1218  00FE25                     STR_84:
  1219  00FE25  4D                 	db	77	;'M'
  1220  00FE26  41                 	db	65	;'A'
  1221  00FE27  47                 	db	71	;'G'
  1222  00FE28  5F                 	db	95	;'_'
  1223  00FE29  73                 	db	115	;'s'
  1224  00FE2A  69                 	db	105	;'i'
  1225  00FE2B  67                 	db	103	;'g'
  1226  00FE2C  6E                 	db	110	;'n'
  1227  00FE2D  61                 	db	97	;'a'
  1228  00FE2E  6C                 	db	108	;'l'
  1229  00FE2F  3A                 	db	58	;':'
  1230  00FE30  20                 	db	32
  1231  00FE31  25                 	db	37
  1232  00FE32  64                 	db	100	;'d'
  1233  00FE33  20                 	db	32
  1234  00FE34  00                 	db	0
  1235  00FE35                     STR_104:
  1236  00FE35  54                 	db	84	;'T'
  1237  00FE36  53                 	db	83	;'S'
  1238  00FE37  54                 	db	84	;'T'
  1239  00FE38  3A                 	db	58	;':'
  1240  00FE39  20                 	db	32
  1241  00FE3A  54                 	db	84	;'T'
  1242  00FE3B  49                 	db	73	;'I'
  1243  00FE3C  4C                 	db	76	;'L'
  1244  00FE3D  54                 	db	84	;'T'
  1245  00FE3E  20                 	db	32
  1246  00FE3F  53                 	db	83	;'S'
  1247  00FE40  45                 	db	69	;'E'
  1248  00FE41  52                 	db	82	;'R'
  1249  00FE42  56                 	db	86	;'V'
  1250  00FE43  4F                 	db	79	;'O'
  1251  00FE44  00                 	db	0
  1252  00FE45                     STR_4:
  1253  00FE45  44                 	db	68	;'D'
  1254  00FE46  49                 	db	73	;'I'
  1255  00FE47  44                 	db	68	;'D'
  1256  00FE48  4E                 	db	78	;'N'
  1257  00FE49  27                 	db	39
  1258  00FE4A  54                 	db	84	;'T'
  1259  00FE4B  20                 	db	32
  1260  00FE4C  43                 	db	67	;'C'
  1261  00FE4D  4F                 	db	79	;'O'
  1262  00FE4E  4D                 	db	77	;'M'
  1263  00FE4F  50                 	db	80	;'P'
  1264  00FE50  4C                 	db	76	;'L'
  1265  00FE51  45                 	db	69	;'E'
  1266  00FE52  54                 	db	84	;'T'
  1267  00FE53  45                 	db	69	;'E'
  1268  00FE54  00                 	db	0
  1269  00FE55                     STR_123:
  1270  00FE55  44                 	db	68	;'D'
  1271  00FE56  3A                 	db	58	;':'
  1272  00FE57  52                 	db	82	;'R'
  1273  00FE58  45                 	db	69	;'E'
  1274  00FE59  54                 	db	84	;'T'
  1275  00FE5A  7C                 	db	124
  1276  00FE5B  32                 	db	50	;'2'
  1277  00FE5C  3A                 	db	58	;':'
  1278  00FE5D  43                 	db	67	;'C'
  1279  00FE5E  20                 	db	32
  1280  00FE5F  25                 	db	37
  1281  00FE60  64                 	db	100	;'d'
  1282  00FE61  20                 	db	32
  1283  00FE62  20                 	db	32
  1284  00FE63  00                 	db	0
  1285  00FE64                     STR_81:
  1286  00FE64  49                 	db	73	;'I'
  1287  00FE65  52                 	db	82	;'R'
  1288  00FE66  5F                 	db	95	;'_'
  1289  00FE67  73                 	db	115	;'s'
  1290  00FE68  69                 	db	105	;'i'
  1291  00FE69  67                 	db	103	;'g'
  1292  00FE6A  6E                 	db	110	;'n'
  1293  00FE6B  61                 	db	97	;'a'
  1294  00FE6C  6C                 	db	108	;'l'
  1295  00FE6D  3A                 	db	58	;':'
  1296  00FE6E  20                 	db	32
  1297  00FE6F  25                 	db	37
  1298  00FE70  64                 	db	100	;'d'
  1299  00FE71  20                 	db	32
  1300  00FE72  00                 	db	0
  1301  00FE73                     STR_110:
  1302  00FE73  43                 	db	67	;'C'
  1303  00FE74  41                 	db	65	;'A'
  1304  00FE75  4D                 	db	77	;'M'
  1305  00FE76  20                 	db	32
  1306  00FE77  44                 	db	68	;'D'
  1307  00FE78  57                 	db	87	;'W'
  1308  00FE79  4E                 	db	78	;'N'
  1309  00FE7A  20                 	db	32
  1310  00FE7B  7C                 	db	124
  1311  00FE7C  52                 	db	82	;'R'
  1312  00FE7D  43                 	db	67	;'C'
  1313  00FE7E  30                 	db	48	;'0'
  1314  00FE7F  3D                 	db	61	;'='
  1315  00FE80  30                 	db	48	;'0'
  1316  00FE81  00                 	db	0
  1317  00FE82                     STR_109:
  1318  00FE82  43                 	db	67	;'C'
  1319  00FE83  41                 	db	65	;'A'
  1320  00FE84  4D                 	db	77	;'M'
  1321  00FE85  20                 	db	32
  1322  00FE86  55                 	db	85	;'U'
  1323  00FE87  50                 	db	80	;'P'
  1324  00FE88  20                 	db	32
  1325  00FE89  20                 	db	32
  1326  00FE8A  7C                 	db	124
  1327  00FE8B  52                 	db	82	;'R'
  1328  00FE8C  43                 	db	67	;'C'
  1329  00FE8D  30                 	db	48	;'0'
  1330  00FE8E  3D                 	db	61	;'='
  1331  00FE8F  31                 	db	49	;'1'
  1332  00FE90  00                 	db	0
  1333  00FE91                     STR_83:
  1334  00FE91  54                 	db	84	;'T'
  1335  00FE92  53                 	db	83	;'S'
  1336  00FE93  54                 	db	84	;'T'
  1337  00FE94  3A                 	db	58	;':'
  1338  00FE95  20                 	db	32
  1339  00FE96  4D                 	db	77	;'M'
  1340  00FE97  41                 	db	65	;'A'
  1341  00FE98  47                 	db	71	;'G'
  1342  00FE99  4E                 	db	78	;'N'
  1343  00FE9A  45                 	db	69	;'E'
  1344  00FE9B  54                 	db	84	;'T'
  1345  00FE9C  49                 	db	73	;'I'
  1346  00FE9D  53                 	db	83	;'S'
  1347  00FE9E  4D                 	db	77	;'M'
  1348  00FE9F  00                 	db	0
  1349  00FEA0                     STR_108:
  1350  00FEA0  54                 	db	84	;'T'
  1351  00FEA1  53                 	db	83	;'S'
  1352  00FEA2  54                 	db	84	;'T'
  1353  00FEA3  3A                 	db	58	;':'
  1354  00FEA4  20                 	db	32
  1355  00FEA5  43                 	db	67	;'C'
  1356  00FEA6  41                 	db	65	;'A'
  1357  00FEA7  4D                 	db	77	;'M'
  1358  00FEA8  20                 	db	32
  1359  00FEA9  53                 	db	83	;'S'
  1360  00FEAA  45                 	db	69	;'E'
  1361  00FEAB  52                 	db	82	;'R'
  1362  00FEAC  56                 	db	86	;'V'
  1363  00FEAD  4F                 	db	79	;'O'
  1364  00FEAE  00                 	db	0
  1365  00FEAF                     STR_97:
  1366  00FEAF  54                 	db	84	;'T'
  1367  00FEB0  53                 	db	83	;'S'
  1368  00FEB1  54                 	db	84	;'T'
  1369  00FEB2  3A                 	db	58	;':'
  1370  00FEB3  20                 	db	32
  1371  00FEB4  50                 	db	80	;'P'
  1372  00FEB5  41                 	db	65	;'A'
  1373  00FEB6  4E                 	db	78	;'N'
  1374  00FEB7  20                 	db	32
  1375  00FEB8  53                 	db	83	;'S'
  1376  00FEB9  45                 	db	69	;'E'
  1377  00FEBA  52                 	db	82	;'R'
  1378  00FEBB  56                 	db	86	;'V'
  1379  00FEBC  4F                 	db	79	;'O'
  1380  00FEBD  00                 	db	0
  1381  00FEBE                     STR_76:
  1382  00FEBE  41                 	db	65	;'A'
  1383  00FEBF  4C                 	db	76	;'L'
  1384  00FEC0  47                 	db	71	;'G'
  1385  00FEC1  34                 	db	52	;'4'
  1386  00FEC2  3A                 	db	58	;':'
  1387  00FEC3  20                 	db	32
  1388  00FEC4  41                 	db	65	;'A'
  1389  00FEC5  4C                 	db	76	;'L'
  1390  00FEC6  4C                 	db	76	;'L'
  1391  00FEC7  20                 	db	32
  1392  00FEC8  43                 	db	67	;'C'
  1393  00FEC9  41                 	db	65	;'A'
  1394  00FECA  4E                 	db	78	;'N'
  1395  00FECB  53                 	db	83	;'S'
  1396  00FECC  00                 	db	0
  1397  00FECD                     STR_91:
  1398  00FECD  54                 	db	84	;'T'
  1399  00FECE  53                 	db	83	;'S'
  1400  00FECF  54                 	db	84	;'T'
  1401  00FED0  3A                 	db	58	;':'
  1402  00FED1  20                 	db	32
  1403  00FED2  44                 	db	68	;'D'
  1404  00FED3  43                 	db	67	;'C'
  1405  00FED4  20                 	db	32
  1406  00FED5  4D                 	db	77	;'M'
  1407  00FED6  4F                 	db	79	;'O'
  1408  00FED7  54                 	db	84	;'T'
  1409  00FED8  4F                 	db	79	;'O'
  1410  00FED9  52                 	db	82	;'R'
  1411  00FEDA  53                 	db	83	;'S'
  1412  00FEDB  00                 	db	0
  1413  00FEDC                     STR_71:
  1414  00FEDC  41                 	db	65	;'A'
  1415  00FEDD  4C                 	db	76	;'L'
  1416  00FEDE  47                 	db	71	;'G'
  1417  00FEDF  4F                 	db	79	;'O'
  1418  00FEE0  52                 	db	82	;'R'
  1419  00FEE1  49                 	db	73	;'I'
  1420  00FEE2  54                 	db	84	;'T'
  1421  00FEE3  48                 	db	72	;'H'
  1422  00FEE4  4D                 	db	77	;'M'
  1423  00FEE5  20                 	db	32
  1424  00FEE6  54                 	db	84	;'T'
  1425  00FEE7  45                 	db	69	;'E'
  1426  00FEE8  53                 	db	83	;'S'
  1427  00FEE9  54                 	db	84	;'T'
  1428  00FEEA  00                 	db	0
  1429  00FEEB                     STR_92:
  1430  00FEEB  50                 	db	80	;'P'
  1431  00FEEC  49                 	db	73	;'I'
  1432  00FEED  4E                 	db	78	;'N'
  1433  00FEEE  20                 	db	32
  1434  00FEEF  52                 	db	82	;'R'
  1435  00FEF0  41                 	db	65	;'A'
  1436  00FEF1  35                 	db	53	;'5'
  1437  00FEF2  20                 	db	32
  1438  00FEF3  48                 	db	72	;'H'
  1439  00FEF4  49                 	db	73	;'I'
  1440  00FEF5  47                 	db	71	;'G'
  1441  00FEF6  48                 	db	72	;'H'
  1442  00FEF7  2E                 	db	46
  1443  00FEF8  00                 	db	0
  1444  00FEF9                     STR_74:
  1445  00FEF9  41                 	db	65	;'A'
  1446  00FEFA  4C                 	db	76	;'L'
  1447  00FEFB  47                 	db	71	;'G'
  1448  00FEFC  32                 	db	50	;'2'
  1449  00FEFD  3A                 	db	58	;':'
  1450  00FEFE  20                 	db	32
  1451  00FEFF  31                 	db	49	;'1'
  1452  00FF00  32                 	db	50	;'2'
  1453  00FF01  20                 	db	32
  1454  00FF02  43                 	db	67	;'C'
  1455  00FF03  41                 	db	65	;'A'
  1456  00FF04  4E                 	db	78	;'N'
  1457  00FF05  53                 	db	83	;'S'
  1458  00FF06  00                 	db	0
  1459  00FF07                     STR_77:
  1460  00FF07  41                 	db	65	;'A'
  1461  00FF08  4C                 	db	76	;'L'
  1462  00FF09  47                 	db	71	;'G'
  1463  00FF0A  35                 	db	53	;'5'
  1464  00FF0B  3A                 	db	58	;':'
  1465  00FF0C  20                 	db	32
  1466  00FF0D  4E                 	db	78	;'N'
  1467  00FF0E  4F                 	db	79	;'O'
  1468  00FF0F  20                 	db	32
  1469  00FF10  43                 	db	67	;'C'
  1470  00FF11  41                 	db	65	;'A'
  1471  00FF12  4E                 	db	78	;'N'
  1472  00FF13  53                 	db	83	;'S'
  1473  00FF14  00                 	db	0
  1474  00FF15                     STR_72:
  1475  00FF15  50                 	db	80	;'P'
  1476  00FF16  55                 	db	85	;'U'
  1477  00FF17  53                 	db	83	;'S'
  1478  00FF18  48                 	db	72	;'H'
  1479  00FF19  20                 	db	32
  1480  00FF1A  54                 	db	84	;'T'
  1481  00FF1B  4F                 	db	79	;'O'
  1482  00FF1C  20                 	db	32
  1483  00FF1D  53                 	db	83	;'S'
  1484  00FF1E  54                 	db	84	;'T'
  1485  00FF1F  41                 	db	65	;'A'
  1486  00FF20  52                 	db	82	;'R'
  1487  00FF21  54                 	db	84	;'T'
  1488  00FF22  00                 	db	0
  1489  00FF23                     STR_23:
  1490  00FF23  25                 	db	37
  1491  00FF24  64                 	db	100	;'d'
  1492  00FF25  20                 	db	32
  1493  00FF26  4D                 	db	77	;'M'
  1494  00FF27  49                 	db	73	;'I'
  1495  00FF28  4E                 	db	78	;'N'
  1496  00FF29  20                 	db	32
  1497  00FF2A  25                 	db	37
  1498  00FF2B  64                 	db	100	;'d'
  1499  00FF2C  20                 	db	32
  1500  00FF2D  53                 	db	83	;'S'
  1501  00FF2E  45                 	db	69	;'E'
  1502  00FF2F  43                 	db	67	;'C'
  1503  00FF30  00                 	db	0
  1504  00FF31                     STR_2:
  1505  00FF31  54                 	db	84	;'T'
  1506  00FF32  49                 	db	73	;'I'
  1507  00FF33  4D                 	db	77	;'M'
  1508  00FF34  45                 	db	69	;'E'
  1509  00FF35  3A                 	db	58	;':'
  1510  00FF36  20                 	db	32
  1511  00FF37  25                 	db	37
  1512  00FF38  64                 	db	100	;'d'
  1513  00FF39  3A                 	db	58	;':'
  1514  00FF3A  25                 	db	37
  1515  00FF3B  30                 	db	48	;'0'
  1516  00FF3C  32                 	db	50	;'2'
  1517  00FF3D  64                 	db	100	;'d'
  1518  00FF3E  00                 	db	0
  1519  00FF3F                     STR_80:
  1520  00FF3F  54                 	db	84	;'T'
  1521  00FF40  53                 	db	83	;'S'
  1522  00FF41  54                 	db	84	;'T'
  1523  00FF42  3A                 	db	58	;':'
  1524  00FF43  20                 	db	32
  1525  00FF44  49                 	db	73	;'I'
  1526  00FF45  52                 	db	82	;'R'
  1527  00FF46  20                 	db	32
  1528  00FF47  53                 	db	83	;'S'
  1529  00FF48  4E                 	db	78	;'N'
  1530  00FF49  53                 	db	83	;'S'
  1531  00FF4A  52                 	db	82	;'R'
  1532  00FF4B  00                 	db	0
  1533  00FF4C                     STR_66:
  1534  00FF4C  54                 	db	84	;'T'
  1535  00FF4D  49                 	db	73	;'I'
  1536  00FF4E  4D                 	db	77	;'M'
  1537  00FF4F  45                 	db	69	;'E'
  1538  00FF50  20                 	db	32
  1539  00FF51  25                 	db	37
  1540  00FF52  64                 	db	100	;'d'
  1541  00FF53  3A                 	db	58	;':'
  1542  00FF54  25                 	db	37
  1543  00FF55  30                 	db	48	;'0'
  1544  00FF56  32                 	db	50	;'2'
  1545  00FF57  64                 	db	100	;'d'
  1546  00FF58  00                 	db	0
  1547  00FF59                     STR_75:
  1548  00FF59  41                 	db	65	;'A'
  1549  00FF5A  4C                 	db	76	;'L'
  1550  00FF5B  47                 	db	71	;'G'
  1551  00FF5C  33                 	db	51	;'3'
  1552  00FF5D  3A                 	db	58	;':'
  1553  00FF5E  20                 	db	32
  1554  00FF5F  31                 	db	49	;'1'
  1555  00FF60  20                 	db	32
  1556  00FF61  43                 	db	67	;'C'
  1557  00FF62  41                 	db	65	;'A'
  1558  00FF63  4E                 	db	78	;'N'
  1559  00FF64  00                 	db	0
  1560  00FF65                     STR_94:
  1561  00FF65  50                 	db	80	;'P'
  1562  00FF66  49                 	db	73	;'I'
  1563  00FF67  4E                 	db	78	;'N'
  1564  00FF68  20                 	db	32
  1565  00FF69  52                 	db	82	;'R'
  1566  00FF6A  41                 	db	65	;'A'
  1567  00FF6B  33                 	db	51	;'3'
  1568  00FF6C  2E                 	db	46
  1569  00FF6D  2E                 	db	46
  1570  00FF6E  2E                 	db	46
  1571  00FF6F  00                 	db	0
  1572  00FF70                     STR_96:
  1573  00FF70  50                 	db	80	;'P'
  1574  00FF71  49                 	db	73	;'I'
  1575  00FF72  4E                 	db	78	;'N'
  1576  00FF73  20                 	db	32
  1577  00FF74  52                 	db	82	;'R'
  1578  00FF75  41                 	db	65	;'A'
  1579  00FF76  34                 	db	52	;'4'
  1580  00FF77  2E                 	db	46
  1581  00FF78  2E                 	db	46
  1582  00FF79  2E                 	db	46
  1583  00FF7A  00                 	db	0
  1584  00FF7B                     STR_65:
  1585  00FF7B  53                 	db	83	;'S'
  1586  00FF7C  4F                 	db	79	;'O'
  1587  00FF7D  52                 	db	82	;'R'
  1588  00FF7E  54                 	db	84	;'T'
  1589  00FF7F  49                 	db	73	;'I'
  1590  00FF80  4E                 	db	78	;'N'
  1591  00FF81  47                 	db	71	;'G'
  1592  00FF82  2E                 	db	46
  1593  00FF83  2E                 	db	46
  1594  00FF84  2E                 	db	46
  1595  00FF85  00                 	db	0
  1596  00FF86                     STR_85:
  1597  00FF86  54                 	db	84	;'T'
  1598  00FF87  53                 	db	83	;'S'
  1599  00FF88  54                 	db	84	;'T'
  1600  00FF89  3A                 	db	58	;':'
  1601  00FF8A  20                 	db	32
  1602  00FF8B  43                 	db	67	;'C'
  1603  00FF8C  4F                 	db	79	;'O'
  1604  00FF8D  4E                 	db	78	;'N'
  1605  00FF8E  44                 	db	68	;'D'
  1606  00FF8F  00                 	db	0
  1607  00FF90                     STR_89:
  1608  00FF90  41                 	db	65	;'A'
  1609  00FF91  43                 	db	67	;'C'
  1610  00FF92  54                 	db	84	;'T'
  1611  00FF93  55                 	db	85	;'U'
  1612  00FF94  41                 	db	65	;'A'
  1613  00FF95  54                 	db	84	;'T'
  1614  00FF96  4F                 	db	79	;'O'
  1615  00FF97  52                 	db	82	;'R'
  1616  00FF98  53                 	db	83	;'S'
  1617  00FF99  00                 	db	0
  1618  00FF9A                     STR_22:
  1619  00FF9A  44                 	db	68	;'D'
  1620  00FF9B  55                 	db	85	;'U'
  1621  00FF9C  52                 	db	82	;'R'
  1622  00FF9D  41                 	db	65	;'A'
  1623  00FF9E  54                 	db	84	;'T'
  1624  00FF9F  49                 	db	73	;'I'
  1625  00FFA0  4F                 	db	79	;'O'
  1626  00FFA1  4E                 	db	78	;'N'
  1627  00FFA2  3A                 	db	58	;':'
  1628  00FFA3  00                 	db	0
  1629  00FFA4                     STR_87:
  1630  00FFA4  43                 	db	67	;'C'
  1631  00FFA5  4F                 	db	79	;'O'
  1632  00FFA6  4E                 	db	78	;'N'
  1633  00FFA7  44                 	db	68	;'D'
  1634  00FFA8  3A                 	db	58	;':'
  1635  00FFA9  20                 	db	32
  1636  00FFAA  25                 	db	37
  1637  00FFAB  64                 	db	100	;'d'
  1638  00FFAC  00                 	db	0
  1639  00FFAD                     STR_78:
  1640  00FFAD  53                 	db	83	;'S'
  1641  00FFAE  45                 	db	69	;'E'
  1642  00FFAF  4E                 	db	78	;'N'
  1643  00FFB0  53                 	db	83	;'S'
  1644  00FFB1  4F                 	db	79	;'O'
  1645  00FFB2  52                 	db	82	;'R'
  1646  00FFB3  53                 	db	83	;'S'
  1647  00FFB4  00                 	db	0
  1648  00FFB5                     STR_131:
  1649  00FFB5  28                 	db	40
  1650  00FFB6  6E                 	db	110	;'n'
  1651  00FFB7  75                 	db	117	;'u'
  1652  00FFB8  6C                 	db	108	;'l'
  1653  00FFB9  6C                 	db	108	;'l'
  1654  00FFBA  29                 	db	41
  1655  00FFBB  00                 	db	0
  1656  00FFBC                     STR_68:
  1657  00FFBC  46                 	db	70	;'F'
  1658  00FFBD  41                 	db	65	;'A'
  1659  00FFBE  49                 	db	73	;'I'
  1660  00FFBF  4C                 	db	76	;'L'
  1661  00FFC0  45                 	db	69	;'E'
  1662  00FFC1  44                 	db	68	;'D'
  1663  00FFC2  00                 	db	0
  1664  00FFC3                     STR_7:
  1665  00FFC3  53                 	db	83	;'S'
  1666  00FFC4  54                 	db	84	;'T'
  1667  00FFC5  41                 	db	65	;'A'
  1668  00FFC6  52                 	db	82	;'R'
  1669  00FFC7  54                 	db	84	;'T'
  1670  00FFC8  3A                 	db	58	;':'
  1671  00FFC9  00                 	db	0
  1672  00FFCA                     STR_9:
  1673  00FFCA  46                 	db	70	;'F'
  1674  00FFCB  45                 	db	69	;'E'
  1675  00FFCC  42                 	db	66	;'B'
  1676  00FFCD  00                 	db	0
  1677  00FFCE                     STR_19:
  1678  00FFCE  44                 	db	68	;'D'
  1679  00FFCF  45                 	db	69	;'E'
  1680  00FFD0  43                 	db	67	;'C'
  1681  00FFD1  00                 	db	0
  1682  00FFD2                     STR_15:
  1683  00FFD2  41                 	db	65	;'A'
  1684  00FFD3  55                 	db	85	;'U'
  1685  00FFD4  47                 	db	71	;'G'
  1686  00FFD5  00                 	db	0
  1687  00FFD6                     STR_14:
  1688  00FFD6  4A                 	db	74	;'J'
  1689  00FFD7  55                 	db	85	;'U'
  1690  00FFD8  4C                 	db	76	;'L'
  1691  00FFD9  00                 	db	0
  1692  00FFDA                     STR_8:
  1693  00FFDA  4A                 	db	74	;'J'
  1694  00FFDB  41                 	db	65	;'A'
  1695  00FFDC  4E                 	db	78	;'N'
  1696  00FFDD  00                 	db	0
  1697  00FFDE                     STR_13:
  1698  00FFDE  4A                 	db	74	;'J'
  1699  00FFDF  55                 	db	85	;'U'
  1700  00FFE0  4E                 	db	78	;'N'
  1701  00FFE1  00                 	db	0
  1702  00FFE2                     STR_16:
  1703  00FFE2  53                 	db	83	;'S'
  1704  00FFE3  45                 	db	69	;'E'
  1705  00FFE4  50                 	db	80	;'P'
  1706  00FFE5  00                 	db	0
  1707  00FFE6                     STR_10:
  1708  00FFE6  4D                 	db	77	;'M'
  1709  00FFE7  41                 	db	65	;'A'
  1710  00FFE8  52                 	db	82	;'R'
  1711  00FFE9  00                 	db	0
  1712  00FFEA                     STR_11:
  1713  00FFEA  41                 	db	65	;'A'
  1714  00FFEB  50                 	db	80	;'P'
  1715  00FFEC  52                 	db	82	;'R'
  1716  00FFED  00                 	db	0
  1717  00FFEE                     STR_20:
  1718  00FFEE  45                 	db	69	;'E'
  1719  00FFEF  52                 	db	82	;'R'
  1720  00FFF0  52                 	db	82	;'R'
  1721  00FFF1  00                 	db	0
  1722  00FFF2                     STR_17:
  1723  00FFF2  4F                 	db	79	;'O'
  1724  00FFF3  43                 	db	67	;'C'
  1725  00FFF4  54                 	db	84	;'T'
  1726  00FFF5  00                 	db	0
  1727  00FFF6                     STR_18:
  1728  00FFF6  4E                 	db	78	;'N'
  1729  00FFF7  4F                 	db	79	;'O'
  1730  00FFF8  56                 	db	86	;'V'
  1731  00FFF9  00                 	db	0
  1732  00FFFA                     STR_12:
  1733  00FFFA  4D                 	db	77	;'M'
  1734  00FFFB  41                 	db	65	;'A'
  1735  00FFFC  59                 	db	89	;'Y'
  1736  00FFFD  00                 	db	0
  1737  0000                     
  1738                           ; #config settings
  1739  00FFFE  00                 	db	0	; dummy byte at the end
  1740  0000                     
  1741                           	psect	cinit
  1742  005318                     __pcinit:
  1743                           	opt stack 0
  1744  005318                     start_initialization:
  1745                           	opt stack 0
  1746  005318                     __initialization:
  1747                           	opt stack 0
  1748                           
  1749                           ; Initialize objects allocated to BANK1 (8 bytes)
  1750                           ; load TBLPTR registers with __pidataBANK1
  1751  005318  0E48               	movlw	low __pidataBANK1
  1752  00531A  6EF6               	movwf	tblptrl,c
  1753  00531C  0E5B               	movlw	high __pidataBANK1
  1754  00531E  6EF7               	movwf	tblptrh,c
  1755  005320  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1756  005322  6EF8               	movwf	tblptru,c
  1757  005324  EE01  F049         	lfsr	0,__pdataBANK1
  1758  005328  EE10 F008          	lfsr	1,8
  1759  00532C                     copy_data0:
  1760  00532C  0009               	tblrd		*+
  1761  00532E  CFF5 FFEE          	movff	tablat,postinc0
  1762  005332  50E5               	movf	postdec1,w,c
  1763  005334  50E1               	movf	fsr1l,w,c
  1764  005336  E1FA               	bnz	copy_data0
  1765                           
  1766                           ; Clear objects allocated to BANK1 (73 bytes)
  1767  005338  EE01  F000         	lfsr	0,__pbssBANK1
  1768  00533C  0E49               	movlw	73
  1769  00533E                     clear_0:
  1770  00533E  6AEE               	clrf	postinc0,c
  1771  005340  06E8               	decf	wreg,f,c
  1772  005342  E1FD               	bnz	clear_0
  1773                           
  1774                           ; Clear objects allocated to BANK0 (38 bytes)
  1775  005344  EE00  F0DA         	lfsr	0,__pbssBANK0
  1776  005348  0E26               	movlw	38
  1777  00534A                     clear_1:
  1778  00534A  6AEE               	clrf	postinc0,c
  1779  00534C  06E8               	decf	wreg,f,c
  1780  00534E  E1FD               	bnz	clear_1
  1781                           
  1782                           ; Clear objects allocated to COMRAM (35 bytes)
  1783  005350  EE00  F05B         	lfsr	0,__pbssCOMRAM
  1784  005354  0E23               	movlw	35
  1785  005356                     clear_2:
  1786  005356  6AEE               	clrf	postinc0,c
  1787  005358  06E8               	decf	wreg,f,c
  1788  00535A  E1FD               	bnz	clear_2
  1789  00535C                     end_of_initialization:
  1790                           	opt stack 0
  1791  00535C                     __end_of__initialization:
  1792                           	opt stack 0
  1793  00535C  907E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1794  00535E  927E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1795  005360  0100               	movlb	0
  1796  005362  EF57  F023         	goto	_main	;jump to C main() function
  1797                           tblptru	equ	0xFF8
  1798                           tblptrh	equ	0xFF7
  1799                           tblptrl	equ	0xFF6
  1800                           tablat	equ	0xFF5
  1801                           postinc0	equ	0xFEE
  1802                           wreg	equ	0xFE8
  1803                           postdec1	equ	0xFE5
  1804                           fsr1l	equ	0xFE1
  1805                           
  1806                           	psect	bssCOMRAM
  1807  00005B                     __pbssCOMRAM:
  1808                           	opt stack 0
  1809  00005B                     _back:
  1810                           	opt stack 0
  1811  00005B                     	ds	2
  1812  00005D                     _down:
  1813                           	opt stack 0
  1814  00005D                     	ds	2
  1815  00005F                     _enter:
  1816                           	opt stack 0
  1817  00005F                     	ds	2
  1818  000061                     _f_panning_to_bin:
  1819                           	opt stack 0
  1820  000061                     	ds	2
  1821  000063                     _log_count_can_no_lab:
  1822                           	opt stack 0
  1823  000063                     	ds	2
  1824  000065                     _log_count_can_w_lab:
  1825                           	opt stack 0
  1826  000065                     	ds	2
  1827  000067                     _log_count_total:
  1828                           	opt stack 0
  1829  000067                     	ds	2
  1830  000069                     _most_recent_sort_time:
  1831                           	opt stack 0
  1832  000069                     	ds	2
  1833  00006B                     _pan_servo_state:
  1834                           	opt stack 0
  1835  00006B                     	ds	2
  1836  00006D                     _servo_timer_counter:
  1837                           	opt stack 0
  1838  00006D                     	ds	2
  1839  00006F                     _servo_timer_target:
  1840                           	opt stack 0
  1841  00006F                     	ds	2
  1842  000071                     _tilt_servo_state:
  1843                           	opt stack 0
  1844  000071                     	ds	2
  1845  000073                     _timer2_counter:
  1846                           	opt stack 0
  1847  000073                     	ds	2
  1848  000075                     _up:
  1849                           	opt stack 0
  1850  000075                     	ds	2
  1851  000077                     _was_low_1:
  1852                           	opt stack 0
  1853  000077                     	ds	2
  1854  000079                     _was_low_2:
  1855                           	opt stack 0
  1856  000079                     	ds	2
  1857  00007B                     _was_low_3:
  1858                           	opt stack 0
  1859  00007B                     	ds	2
  1860  00007D                     _input:
  1861                           	opt stack 0
  1862  00007D                     	ds	1
  1863                           tblptru	equ	0xFF8
  1864                           tblptrh	equ	0xFF7
  1865                           tblptrl	equ	0xFF6
  1866                           tablat	equ	0xFF5
  1867                           postinc0	equ	0xFEE
  1868                           wreg	equ	0xFE8
  1869                           postdec1	equ	0xFE5
  1870                           fsr1l	equ	0xFE1
  1871                           
  1872                           	psect	bssBANK0
  1873  0000DA                     __pbssBANK0:
  1874                           	opt stack 0
  1875  0000DA                     _sensor_outputs:
  1876                           	opt stack 0
  1877  0000DA                     	ds	4
  1878  0000DE                     _COND_signal:
  1879                           	opt stack 0
  1880  0000DE                     	ds	2
  1881  0000E0                     _IR_signal:
  1882                           	opt stack 0
  1883  0000E0                     	ds	2
  1884  0000E2                     _MAG_signal:
  1885                           	opt stack 0
  1886  0000E2                     	ds	2
  1887  0000E4                     _RTCflag:
  1888                           	opt stack 0
  1889  0000E4                     	ds	2
  1890  0000E6                     _cur_state:
  1891                           	opt stack 0
  1892  0000E6                     	ds	2
  1893  0000E8                     _f_arm_position:
  1894                           	opt stack 0
  1895  0000E8                     	ds	2
  1896  0000EA                     _f_lastCan:
  1897                           	opt stack 0
  1898  0000EA                     	ds	2
  1899  0000EC                     _f_loadingNewCan:
  1900                           	opt stack 0
  1901  0000EC                     	ds	2
  1902  0000EE                     _log:
  1903                           	opt stack 0
  1904  0000EE                     	ds	2
  1905  0000F0                     _log_completion:
  1906                           	opt stack 0
  1907  0000F0                     	ds	2
  1908  0000F2                     _log_count_pop_no_tab:
  1909                           	opt stack 0
  1910  0000F2                     	ds	2
  1911  0000F4                     _log_count_pop_w_tab:
  1912                           	opt stack 0
  1913  0000F4                     	ds	2
  1914  0000F6                     _log_total_time:
  1915                           	opt stack 0
  1916  0000F6                     	ds	2
  1917  0000F8                     _logstate:
  1918                           	opt stack 0
  1919  0000F8                     	ds	2
  1920  0000FA                     _total_time:
  1921                           	opt stack 0
  1922  0000FA                     	ds	2
  1923  0000FC                     _machine_state:
  1924                           	opt stack 0
  1925  0000FC                     	ds	1
  1926  0000FD                     _sel:
  1927                           	opt stack 0
  1928  0000FD                     	ds	1
  1929  0000FE                     _count_total:
  1930                           	opt stack 0
  1931  0000FE                     	ds	2
  1932                           tblptru	equ	0xFF8
  1933                           tblptrh	equ	0xFF7
  1934                           tblptrl	equ	0xFF6
  1935                           tablat	equ	0xFF5
  1936                           postinc0	equ	0xFEE
  1937                           wreg	equ	0xFE8
  1938                           postdec1	equ	0xFE5
  1939                           fsr1l	equ	0xFE1
  1940                           
  1941                           	psect	bssBANK1
  1942  000100                     __pbssBANK1:
  1943                           	opt stack 0
  1944  000100                     _log_startTime:
  1945                           	opt stack 0
  1946  000100                     	ds	14
  1947  00010E                     _startTime:
  1948                           	opt stack 0
  1949  00010E                     	ds	14
  1950  00011C                     _servoTimes:
  1951                           	opt stack 0
  1952  00011C                     	ds	8
  1953  000124                     _time:
  1954                           	opt stack 0
  1955  000124                     	ds	7
  1956  00012B                     _count_can_no_lab:
  1957                           	opt stack 0
  1958  00012B                     	ds	2
  1959  00012D                     _count_can_w_lab:
  1960                           	opt stack 0
  1961  00012D                     	ds	2
  1962  00012F                     _count_pop_no_tab:
  1963                           	opt stack 0
  1964  00012F                     	ds	2
  1965  000131                     _count_pop_w_tab:
  1966                           	opt stack 0
  1967  000131                     	ds	2
  1968  000133                     _cur_can:
  1969                           	opt stack 0
  1970  000133                     	ds	2
  1971  000135                     _debug:
  1972                           	opt stack 0
  1973  000135                     	ds	2
  1974  000137                     _f_ID_receive:
  1975                           	opt stack 0
  1976  000137                     	ds	2
  1977  000139                     _f_can_coming_to_ID:
  1978                           	opt stack 0
  1979  000139                     	ds	2
  1980  00013B                     _f_can_coming_to_distribution:
  1981                           	opt stack 0
  1982  00013B                     	ds	2
  1983  00013D                     _f_can_distributed:
  1984                           	opt stack 0
  1985  00013D                     	ds	2
  1986  00013F                     _f_most_recent_sort_time:
  1987                           	opt stack 0
  1988  00013F                     	ds	2
  1989  000141                     _first:
  1990                           	opt stack 0
  1991  000141                     	ds	2
  1992  000143                     _firstboot:
  1993                           	opt stack 0
  1994  000143                     	ds	2
  1995  000145                     _i:
  1996                           	opt stack 0
  1997  000145                     	ds	2
  1998  000147                     _var:
  1999                           	opt stack 0
  2000  000147                     	ds	2
  2001                           tblptru	equ	0xFF8
  2002                           tblptrh	equ	0xFF7
  2003                           tblptrl	equ	0xFF6
  2004                           tablat	equ	0xFF5
  2005                           postinc0	equ	0xFEE
  2006                           wreg	equ	0xFE8
  2007                           postdec1	equ	0xFE5
  2008                           fsr1l	equ	0xFE1
  2009                           
  2010                           	psect	dataBANK1
  2011  000149                     __pdataBANK1:
  2012                           	opt stack 0
  2013  000149                     UI@F3246:
  2014                           	opt stack 0
  2015  000149                     	ds	4
  2016  00014D                     printRTC@F3236:
  2017                           	opt stack 0
  2018  00014D                     	ds	4
  2019                           tblptru	equ	0xFF8
  2020                           tblptrh	equ	0xFF7
  2021                           tblptrl	equ	0xFF6
  2022                           tablat	equ	0xFF5
  2023                           postinc0	equ	0xFEE
  2024                           wreg	equ	0xFE8
  2025                           postdec1	equ	0xFE5
  2026                           fsr1l	equ	0xFE1
  2027                           
  2028                           	psect	cstackBANK0
  2029  000080                     __pcstackBANK0:
  2030                           	opt stack 0
  2031  000080                     ??_delay_ms:
  2032  000080                     ??_isdigit:
  2033  000080                     ??_readADC:
  2034  000080                     ??_I2C_Master_Wait:
  2035  000080                     ?___wmul:
  2036                           	opt stack 0
  2037  000080                     ?___awmod:
  2038                           	opt stack 0
  2039  000080                     ?___lwdiv:
  2040                           	opt stack 0
  2041  000080                     ?___ftpack:
  2042                           	opt stack 0
  2043  000080                     ?___lldiv:
  2044                           	opt stack 0
  2045  000080                     lcdNibble@temp:
  2046                           	opt stack 0
  2047  000080                     initTime@m:
  2048                           	opt stack 0
  2049  000080                     updateServoPosition@time_us:
  2050                           	opt stack 0
  2051  000080                     EEPROM_read@address:
  2052                           	opt stack 0
  2053  000080                     ___wmul@multiplier:
  2054                           	opt stack 0
  2055  000080                     ___awmod@dividend:
  2056                           	opt stack 0
  2057  000080                     ___lwdiv@dividend:
  2058                           	opt stack 0
  2059  000080                     strcpy@to:
  2060                           	opt stack 0
  2061  000080                     ___ftpack@arg:
  2062                           	opt stack 0
  2063  000080                     ___lldiv@dividend:
  2064                           	opt stack 0
  2065                           
  2066                           ; 4 bytes @ 0x0
  2067  000080                     	ds	1
  2068  000081                     readADC@channel:
  2069                           	opt stack 0
  2070  000081                     I2C_Master_Read@a:
  2071                           	opt stack 0
  2072  000081                     lcdNibble@data:
  2073                           	opt stack 0
  2074  000081                     initTime@h:
  2075                           	opt stack 0
  2076  000081                     delay_ms@milliseconds:
  2077                           	opt stack 0
  2078  000081                     _isdigit$2060:
  2079                           	opt stack 0
  2080  000081                     I2C_Master_Write@d:
  2081                           	opt stack 0
  2082                           
  2083                           ; 2 bytes @ 0x1
  2084  000081                     	ds	1
  2085  000082                     ??_readIR:
  2086  000082                     ??_readMAG:
  2087  000082                     ??_readCOND:
  2088  000082                     I2C_Master_Read@temp:
  2089                           	opt stack 0
  2090  000082                     lcdInst@data:
  2091                           	opt stack 0
  2092  000082                     putch@data:
  2093                           	opt stack 0
  2094  000082                     initTime@w:
  2095                           	opt stack 0
  2096  000082                     isdigit@c:
  2097                           	opt stack 0
  2098  000082                     updateServoPosition@timer:
  2099                           	opt stack 0
  2100  000082                     ___wmul@multiplicand:
  2101                           	opt stack 0
  2102  000082                     ___awmod@divisor:
  2103                           	opt stack 0
  2104  000082                     ___lwdiv@divisor:
  2105                           	opt stack 0
  2106  000082                     strcpy@from:
  2107                           	opt stack 0
  2108                           
  2109                           ; 2 bytes @ 0x2
  2110  000082                     	ds	1
  2111  000083                     ??_initLCD:
  2112  000083                     initTime@DD:
  2113                           	opt stack 0
  2114  000083                     ___ftpack@exp:
  2115                           	opt stack 0
  2116  000083                     getRTC@i:
  2117                           	opt stack 0
  2118                           
  2119                           ; 2 bytes @ 0x3
  2120  000083                     	ds	1
  2121  000084                     ??_updateServoPosition:
  2122  000084                     initTime@MM:
  2123                           	opt stack 0
  2124  000084                     ___awmod@counter:
  2125                           	opt stack 0
  2126  000084                     ___ftpack@sign:
  2127                           	opt stack 0
  2128  000084                     readIR@res:
  2129                           	opt stack 0
  2130  000084                     readMAG@res:
  2131                           	opt stack 0
  2132  000084                     readCOND@res:
  2133                           	opt stack 0
  2134  000084                     ___wmul@product:
  2135                           	opt stack 0
  2136  000084                     ___lwdiv@quotient:
  2137                           	opt stack 0
  2138  000084                     strcpy@cp:
  2139                           	opt stack 0
  2140  000084                     ___lldiv@divisor:
  2141                           	opt stack 0
  2142                           
  2143                           ; 4 bytes @ 0x4
  2144  000084                     	ds	1
  2145  000085                     ??_initSortTimer:
  2146  000085                     ??___ftpack:
  2147  000085                     initTime@YY:
  2148                           	opt stack 0
  2149  000085                     ___awmod@sign:
  2150                           	opt stack 0
  2151                           
  2152                           ; 1 bytes @ 0x5
  2153  000085                     	ds	1
  2154  000086                     ??_getIR:
  2155  000086                     ??_getMAG:
  2156  000086                     ?___awdiv:
  2157                           	opt stack 0
  2158  000086                     initTime@s:
  2159                           	opt stack 0
  2160  000086                     ___lwdiv@counter:
  2161                           	opt stack 0
  2162  000086                     updateServoPosition@my_time:
  2163                           	opt stack 0
  2164  000086                     ___awdiv@dividend:
  2165                           	opt stack 0
  2166                           
  2167                           ; 2 bytes @ 0x6
  2168  000086                     	ds	1
  2169  000087                     ?___lwmod:
  2170                           	opt stack 0
  2171  000087                     getIR@i:
  2172                           	opt stack 0
  2173  000087                     ___lwmod@dividend:
  2174                           	opt stack 0
  2175                           
  2176                           ; 2 bytes @ 0x7
  2177  000087                     	ds	1
  2178  000088                     ??_Distribution:
  2179  000088                     ??_initServos:
  2180  000088                     initSortTimer@i:
  2181                           	opt stack 0
  2182  000088                     ___awdiv@divisor:
  2183                           	opt stack 0
  2184  000088                     ___lldiv@quotient:
  2185                           	opt stack 0
  2186                           
  2187                           ; 4 bytes @ 0x8
  2188  000088                     	ds	1
  2189  000089                     ___lwmod@divisor:
  2190                           	opt stack 0
  2191                           
  2192                           ; 2 bytes @ 0x9
  2193  000089                     	ds	1
  2194  00008A                     ___awdiv@counter:
  2195                           	opt stack 0
  2196                           
  2197                           ; 1 bytes @ 0xA
  2198  00008A                     	ds	1
  2199  00008B                     ___awdiv@sign:
  2200                           	opt stack 0
  2201  00008B                     ___lwmod@counter:
  2202                           	opt stack 0
  2203                           
  2204                           ; 1 bytes @ 0xB
  2205  00008B                     	ds	1
  2206  00008C                     ___lldiv@counter:
  2207                           	opt stack 0
  2208  00008C                     ___awdiv@quotient:
  2209                           	opt stack 0
  2210                           
  2211                           ; 2 bytes @ 0xC
  2212  00008C                     	ds	1
  2213  00008D                     I2C_Master_Init@c:
  2214                           	opt stack 0
  2215                           
  2216                           ; 4 bytes @ 0xD
  2217  00008D                     	ds	1
  2218  00008E                     ?_printf:
  2219                           	opt stack 0
  2220  00008E                     ?___awtoft:
  2221                           	opt stack 0
  2222  00008E                     printf@f:
  2223                           	opt stack 0
  2224  00008E                     ___awtoft@c:
  2225                           	opt stack 0
  2226                           
  2227                           ; 2 bytes @ 0xE
  2228  00008E                     	ds	3
  2229  000091                     ??_I2C_Master_Init:
  2230  000091                     ___awtoft@sign:
  2231                           	opt stack 0
  2232                           
  2233                           ; 1 bytes @ 0x11
  2234  000091                     	ds	1
  2235  000092                     ___ftge@ff1:
  2236                           	opt stack 0
  2237                           
  2238                           ; 3 bytes @ 0x12
  2239  000092                     	ds	3
  2240  000095                     ??_loadRTC:
  2241  000095                     ___ftge@ff2:
  2242                           	opt stack 0
  2243                           
  2244                           ; 3 bytes @ 0x15
  2245  000095                     	ds	1
  2246  000096                     loadRTC@i:
  2247                           	opt stack 0
  2248                           
  2249                           ; 2 bytes @ 0x16
  2250  000096                     	ds	2
  2251  000098                     ??___ftge:
  2252                           
  2253                           ; 1 bytes @ 0x18
  2254  000098                     	ds	2
  2255  00009A                     ??_printf:
  2256                           
  2257                           ; 1 bytes @ 0x1A
  2258  00009A                     	ds	4
  2259  00009E                     printf@prec:
  2260                           	opt stack 0
  2261                           
  2262                           ; 1 bytes @ 0x1E
  2263  00009E                     	ds	1
  2264  00009F                     printf@cp:
  2265                           	opt stack 0
  2266                           
  2267                           ; 2 bytes @ 0x1F
  2268  00009F                     	ds	2
  2269  0000A1                     printf@ap:
  2270                           	opt stack 0
  2271                           
  2272                           ; 2 bytes @ 0x21
  2273  0000A1                     	ds	2
  2274  0000A3                     printf@len:
  2275                           	opt stack 0
  2276                           
  2277                           ; 2 bytes @ 0x23
  2278  0000A3                     	ds	2
  2279  0000A5                     printf@val:
  2280                           	opt stack 0
  2281                           
  2282                           ; 2 bytes @ 0x25
  2283  0000A5                     	ds	2
  2284  0000A7                     printf@flag:
  2285                           	opt stack 0
  2286                           
  2287                           ; 1 bytes @ 0x27
  2288  0000A7                     	ds	1
  2289  0000A8                     printf@c:
  2290                           	opt stack 0
  2291                           
  2292                           ; 1 bytes @ 0x28
  2293  0000A8                     	ds	1
  2294  0000A9                     printf@width:
  2295                           	opt stack 0
  2296                           
  2297                           ; 2 bytes @ 0x29
  2298  0000A9                     	ds	2
  2299  0000AB                     ??_printRTC:
  2300  0000AB                     ??_ID:
  2301  0000AB                     ??_algorithmTest:
  2302  0000AB                     ??_sensorTest:
  2303  0000AB                     ??_actuatorTest:
  2304  0000AB                     ??_arm:
  2305  0000AB                     ??_PortTestDC:
  2306  0000AB                     ??_SpeedTest:
  2307  0000AB                     ??_PortTestPusher:
  2308  0000AB                     ??_PlatformTest:
  2309  0000AB                     ??_BothServos:
  2310  0000AB                     ??_BlockerTest:
  2311  0000AB                     EEPROM_write@address:
  2312                           	opt stack 0
  2313                           
  2314                           ; 2 bytes @ 0x2B
  2315  0000AB                     	ds	1
  2316  0000AC                     arm@on:
  2317                           	opt stack 0
  2318                           
  2319                           ; 2 bytes @ 0x2C
  2320  0000AC                     	ds	1
  2321  0000AD                     _ID$1141:
  2322                           	opt stack 0
  2323  0000AD                     EEPROM_write@data:
  2324                           	opt stack 0
  2325  0000AD                     actuatorTest@i_1731:
  2326                           	opt stack 0
  2327  0000AD                     sensorTest@res:
  2328                           	opt stack 0
  2329  0000AD                     PlatformTest@res:
  2330                           	opt stack 0
  2331  0000AD                     BlockerTest@i:
  2332                           	opt stack 0
  2333                           
  2334                           ; 2 bytes @ 0x2D
  2335  0000AD                     	ds	1
  2336  0000AE                     ??_EEPROM_write:
  2337  0000AE                     actuatorTest@i_1738:
  2338                           	opt stack 0
  2339  0000AE                     ID@i:
  2340                           	opt stack 0
  2341  0000AE                     printRTC@INT_time:
  2342                           	opt stack 0
  2343                           
  2344                           ; 14 bytes @ 0x2E
  2345  0000AE                     	ds	1
  2346  0000AF                     EEPROM_write@i:
  2347                           	opt stack 0
  2348  0000AF                     actuatorTest@i_1739:
  2349                           	opt stack 0
  2350  0000AF                     PlatformTest@res_1783:
  2351                           	opt stack 0
  2352  0000AF                     BlockerTest@res:
  2353                           	opt stack 0
  2354                           
  2355                           ; 2 bytes @ 0x2F
  2356  0000AF                     	ds	1
  2357  0000B0                     EEPROM_write@i_1399:
  2358                           	opt stack 0
  2359  0000B0                     actuatorTest@i_1741:
  2360                           	opt stack 0
  2361  0000B0                     ID@i_1140:
  2362                           	opt stack 0
  2363                           
  2364                           ; 2 bytes @ 0x30
  2365  0000B0                     	ds	1
  2366  0000B1                     ??_Loading:
  2367  0000B1                     logRun@num:
  2368                           	opt stack 0
  2369  0000B1                     actuatorTest@i_1742:
  2370                           	opt stack 0
  2371  0000B1                     PlatformTest@i:
  2372                           	opt stack 0
  2373  0000B1                     BlockerTest@cam_flag:
  2374                           	opt stack 0
  2375                           
  2376                           ; 2 bytes @ 0x31
  2377  0000B1                     	ds	1
  2378  0000B2                     logRun@byte1:
  2379                           	opt stack 0
  2380  0000B2                     actuatorTest@i_1744:
  2381                           	opt stack 0
  2382  0000B2                     ID@i_1143:
  2383                           	opt stack 0
  2384                           
  2385                           ; 2 bytes @ 0x32
  2386  0000B2                     	ds	1
  2387  0000B3                     logRun@byte2:
  2388                           	opt stack 0
  2389  0000B3                     actuatorTest@i_1745:
  2390                           	opt stack 0
  2391  0000B3                     Loading@addr:
  2392                           	opt stack 0
  2393  0000B3                     PlatformTest@i_1787:
  2394                           	opt stack 0
  2395  0000B3                     BlockerTest@cond_flag:
  2396                           	opt stack 0
  2397                           
  2398                           ; 2 bytes @ 0x33
  2399  0000B3                     	ds	1
  2400  0000B4                     ID@time:
  2401                           	opt stack 0
  2402  0000B4                     logRun@byte3:
  2403                           	opt stack 0
  2404  0000B4                     actuatorTest@i_1747:
  2405                           	opt stack 0
  2406                           
  2407                           ; 1 bytes @ 0x34
  2408  0000B4                     	ds	1
  2409  0000B5                     Loading@byte1:
  2410                           	opt stack 0
  2411  0000B5                     logRun@byte_i:
  2412                           	opt stack 0
  2413  0000B5                     actuatorTest@i_1748:
  2414                           	opt stack 0
  2415  0000B5                     ID@i_1144:
  2416                           	opt stack 0
  2417  0000B5                     PlatformTest@on:
  2418                           	opt stack 0
  2419                           
  2420                           ; 2 bytes @ 0x35
  2421  0000B5                     	ds	1
  2422  0000B6                     logRun@byte11:
  2423                           	opt stack 0
  2424  0000B6                     actuatorTest@i_1750:
  2425                           	opt stack 0
  2426  0000B6                     Loading@i_1118:
  2427                           	opt stack 0
  2428                           
  2429                           ; 2 bytes @ 0x36
  2430  0000B6                     	ds	1
  2431  0000B7                     actuatorTest@i_1751:
  2432                           	opt stack 0
  2433  0000B7                     ID@res1:
  2434                           	opt stack 0
  2435  0000B7                     logRun@i:
  2436                           	opt stack 0
  2437                           
  2438                           ; 2 bytes @ 0x37
  2439  0000B7                     	ds	1
  2440  0000B8                     actuatorTest@i_1753:
  2441                           	opt stack 0
  2442  0000B8                     Loading@i_1127:
  2443                           	opt stack 0
  2444                           
  2445                           ; 2 bytes @ 0x38
  2446  0000B8                     	ds	1
  2447  0000B9                     actuatorTest@i_1754:
  2448                           	opt stack 0
  2449  0000B9                     ID@res2:
  2450                           	opt stack 0
  2451  0000B9                     logRun@addr:
  2452                           	opt stack 0
  2453                           
  2454                           ; 2 bytes @ 0x39
  2455  0000B9                     	ds	1
  2456  0000BA                     actuatorTest@i_1757:
  2457                           	opt stack 0
  2458  0000BA                     Loading@i_1129:
  2459                           	opt stack 0
  2460                           
  2461                           ; 2 bytes @ 0x3A
  2462  0000BA                     	ds	1
  2463  0000BB                     actuatorTest@i_1758:
  2464                           	opt stack 0
  2465  0000BB                     ID@n:
  2466                           	opt stack 0
  2467                           
  2468                           ; 2 bytes @ 0x3B
  2469  0000BB                     	ds	1
  2470  0000BC                     actuatorTest@i_1760:
  2471                           	opt stack 0
  2472  0000BC                     printRTC@RTC_month:
  2473                           	opt stack 0
  2474  0000BC                     Loading@i_1130:
  2475                           	opt stack 0
  2476                           
  2477                           ; 2 bytes @ 0x3C
  2478  0000BC                     	ds	1
  2479  0000BD                     actuatorTest@i_1761:
  2480                           	opt stack 0
  2481                           
  2482                           ; 1 bytes @ 0x3D
  2483  0000BD                     	ds	1
  2484  0000BE                     actuatorTest@i_1763:
  2485                           	opt stack 0
  2486  0000BE                     Loading@i_1132:
  2487                           	opt stack 0
  2488  0000BE                     printRTC@month:
  2489                           	opt stack 0
  2490                           
  2491                           ; 4 bytes @ 0x3E
  2492  0000BE                     	ds	1
  2493  0000BF                     actuatorTest@i_1764:
  2494                           	opt stack 0
  2495                           
  2496                           ; 1 bytes @ 0x3F
  2497  0000BF                     	ds	1
  2498  0000C0                     actuatorTest@i_1767:
  2499                           	opt stack 0
  2500  0000C0                     Loading@i:
  2501                           	opt stack 0
  2502                           
  2503                           ; 2 bytes @ 0x40
  2504  0000C0                     	ds	1
  2505  0000C1                     actuatorTest@i_1768:
  2506                           	opt stack 0
  2507                           
  2508                           ; 1 bytes @ 0x41
  2509  0000C1                     	ds	1
  2510  0000C2                     actuatorTest@i_1770:
  2511                           	opt stack 0
  2512  0000C2                     printRTC@i:
  2513                           	opt stack 0
  2514  0000C2                     Loading@j:
  2515                           	opt stack 0
  2516                           
  2517                           ; 2 bytes @ 0x42
  2518  0000C2                     	ds	1
  2519  0000C3                     actuatorTest@i_1771:
  2520                           	opt stack 0
  2521                           
  2522                           ; 1 bytes @ 0x43
  2523  0000C3                     	ds	1
  2524  0000C4                     ??_UI:
  2525  0000C4                     actuatorTest@i:
  2526                           	opt stack 0
  2527                           
  2528                           ; 2 bytes @ 0x44
  2529  0000C4                     	ds	2
  2530  0000C6                     ??_Test:
  2531  0000C6                     _UI$2425:
  2532                           	opt stack 0
  2533                           
  2534                           ; 2 bytes @ 0x46
  2535  0000C6                     	ds	2
  2536  0000C8                     UI@i:
  2537                           	opt stack 0
  2538                           
  2539                           ; 1 bytes @ 0x48
  2540  0000C8                     	ds	1
  2541  0000C9                     UI@i_412:
  2542                           	opt stack 0
  2543                           
  2544                           ; 1 bytes @ 0x49
  2545  0000C9                     	ds	1
  2546  0000CA                     UI@i_415:
  2547                           	opt stack 0
  2548                           
  2549                           ; 1 bytes @ 0x4A
  2550  0000CA                     	ds	1
  2551  0000CB                     UI@i_416:
  2552                           	opt stack 0
  2553                           
  2554                           ; 1 bytes @ 0x4B
  2555  0000CB                     	ds	1
  2556  0000CC                     UI@i_434:
  2557                           	opt stack 0
  2558                           
  2559                           ; 1 bytes @ 0x4C
  2560  0000CC                     	ds	1
  2561  0000CD                     UI@i_435:
  2562                           	opt stack 0
  2563                           
  2564                           ; 1 bytes @ 0x4D
  2565  0000CD                     	ds	1
  2566  0000CE                     UI@i_438:
  2567                           	opt stack 0
  2568                           
  2569                           ; 1 bytes @ 0x4E
  2570  0000CE                     	ds	1
  2571  0000CF                     UI@i_439:
  2572                           	opt stack 0
  2573                           
  2574                           ; 1 bytes @ 0x4F
  2575  0000CF                     	ds	1
  2576  0000D0                     UI@i_442:
  2577                           	opt stack 0
  2578                           
  2579                           ; 1 bytes @ 0x50
  2580  0000D0                     	ds	1
  2581  0000D1                     UI@i_443:
  2582                           	opt stack 0
  2583                           
  2584                           ; 1 bytes @ 0x51
  2585  0000D1                     	ds	1
  2586  0000D2                     UI@i_446:
  2587                           	opt stack 0
  2588                           
  2589                           ; 1 bytes @ 0x52
  2590  0000D2                     	ds	1
  2591  0000D3                     UI@i_447:
  2592                           	opt stack 0
  2593                           
  2594                           ; 1 bytes @ 0x53
  2595  0000D3                     	ds	1
  2596  0000D4                     UI@i_450:
  2597                           	opt stack 0
  2598                           
  2599                           ; 1 bytes @ 0x54
  2600  0000D4                     	ds	1
  2601  0000D5                     UI@i_451:
  2602                           	opt stack 0
  2603                           
  2604                           ; 1 bytes @ 0x55
  2605  0000D5                     	ds	1
  2606  0000D6                     UI@month:
  2607                           	opt stack 0
  2608                           
  2609                           ; 4 bytes @ 0x56
  2610  0000D6                     	ds	4
  2611  0000DA                     tblptru	equ	0xFF8
  2612                           tblptrh	equ	0xFF7
  2613                           tblptrl	equ	0xFF6
  2614                           tablat	equ	0xFF5
  2615                           postinc0	equ	0xFEE
  2616                           wreg	equ	0xFE8
  2617                           postdec1	equ	0xFE5
  2618                           fsr1l	equ	0xFE1
  2619                           
  2620                           ; 1 bytes @ 0x5A
  2621                           
  2622                           	psect	cstackCOMRAM
  2623  000001                     __pcstackCOMRAM:
  2624                           	opt stack 0
  2625  000001                     ??_updateArmState:
  2626  000001                     ??i2_I2C_Master_Wait:
  2627  000001                     ??i2_delay_ms:
  2628  000001                     ??i2_isdigit:
  2629  000001                     ?i2___wmul:
  2630                           	opt stack 0
  2631  000001                     ?i2___lwmod:
  2632                           	opt stack 0
  2633  000001                     i2lcdNibble@temp:
  2634                           	opt stack 0
  2635  000001                     i2updateServoPosition@time_us:
  2636                           	opt stack 0
  2637  000001                     i2EEPROM_read@address:
  2638                           	opt stack 0
  2639  000001                     i2___wmul@multiplier:
  2640                           	opt stack 0
  2641  000001                     i2___lwmod@dividend:
  2642                           	opt stack 0
  2643  000001                     i2strcpy@to:
  2644                           	opt stack 0
  2645                           
  2646                           ; 2 bytes @ 0x0
  2647  000001                     	ds	1
  2648  000002                     i2I2C_Master_Read@a:
  2649                           	opt stack 0
  2650  000002                     i2lcdNibble@data:
  2651                           	opt stack 0
  2652  000002                     i2delay_ms@milliseconds:
  2653                           	opt stack 0
  2654  000002                     i2_isdigit$2060:
  2655                           	opt stack 0
  2656  000002                     i2I2C_Master_Write@d:
  2657                           	opt stack 0
  2658                           
  2659                           ; 2 bytes @ 0x1
  2660  000002                     	ds	1
  2661  000003                     i2I2C_Master_Read@temp:
  2662                           	opt stack 0
  2663  000003                     i2lcdInst@data:
  2664                           	opt stack 0
  2665  000003                     i2putch@data:
  2666                           	opt stack 0
  2667  000003                     i2isdigit@c:
  2668                           	opt stack 0
  2669  000003                     i2updateServoPosition@timer:
  2670                           	opt stack 0
  2671  000003                     i2___wmul@multiplicand:
  2672                           	opt stack 0
  2673  000003                     i2___lwmod@divisor:
  2674                           	opt stack 0
  2675  000003                     i2strcpy@from:
  2676                           	opt stack 0
  2677                           
  2678                           ; 2 bytes @ 0x2
  2679  000003                     	ds	1
  2680  000004                     i2getRTC@i:
  2681                           	opt stack 0
  2682                           
  2683                           ; 2 bytes @ 0x3
  2684  000004                     	ds	1
  2685  000005                     ??i2_updateServoPosition:
  2686  000005                     i2___lwmod@counter:
  2687                           	opt stack 0
  2688  000005                     i2___wmul@product:
  2689                           	opt stack 0
  2690  000005                     i2strcpy@cp:
  2691                           	opt stack 0
  2692                           
  2693                           ; 2 bytes @ 0x4
  2694  000005                     	ds	1
  2695  000006                     ?i2___lwdiv:
  2696                           	opt stack 0
  2697  000006                     i2___lwdiv@dividend:
  2698                           	opt stack 0
  2699                           
  2700                           ; 2 bytes @ 0x5
  2701  000006                     	ds	1
  2702  000007                     retrieveLog@logNum:
  2703                           	opt stack 0
  2704  000007                     i2updateServoPosition@my_time:
  2705                           	opt stack 0
  2706                           
  2707                           ; 2 bytes @ 0x6
  2708  000007                     	ds	1
  2709  000008                     i2___lwdiv@divisor:
  2710                           	opt stack 0
  2711                           
  2712                           ; 2 bytes @ 0x7
  2713  000008                     	ds	1
  2714  000009                     ??_retrieveLog:
  2715  000009                     ??_updateServoStates:
  2716                           
  2717                           ; 1 bytes @ 0x8
  2718  000009                     	ds	1
  2719  00000A                     i2___lwdiv@quotient:
  2720                           	opt stack 0
  2721                           
  2722                           ; 2 bytes @ 0x9
  2723  00000A                     	ds	1
  2724  00000B                     retrieveLog@byte1:
  2725                           	opt stack 0
  2726                           
  2727                           ; 1 bytes @ 0xA
  2728  00000B                     	ds	1
  2729  00000C                     retrieveLog@byte2:
  2730                           	opt stack 0
  2731  00000C                     i2___lwdiv@counter:
  2732                           	opt stack 0
  2733                           
  2734                           ; 1 bytes @ 0xB
  2735  00000C                     	ds	1
  2736  00000D                     ?i2_printf:
  2737                           	opt stack 0
  2738  00000D                     retrieveLog@byte3:
  2739                           	opt stack 0
  2740  00000D                     i2printf@f:
  2741                           	opt stack 0
  2742                           
  2743                           ; 2 bytes @ 0xC
  2744  00000D                     	ds	1
  2745  00000E                     retrieveLog@i:
  2746                           	opt stack 0
  2747                           
  2748                           ; 2 bytes @ 0xD
  2749  00000E                     	ds	2
  2750  000010                     retrieveLog@addr:
  2751                           	opt stack 0
  2752                           
  2753                           ; 2 bytes @ 0xF
  2754  000010                     	ds	2
  2755  000012                     dispLogs@myLog:
  2756                           	opt stack 0
  2757                           
  2758                           ; 2 bytes @ 0x11
  2759  000012                     	ds	2
  2760  000014                     
  2761                           ; 1 bytes @ 0x13
  2762  000014                     	ds	5
  2763  000019                     ??i2_printf:
  2764                           
  2765                           ; 1 bytes @ 0x18
  2766  000019                     	ds	4
  2767  00001D                     i2printf@prec:
  2768                           	opt stack 0
  2769                           
  2770                           ; 1 bytes @ 0x1C
  2771  00001D                     	ds	1
  2772  00001E                     i2printf@cp:
  2773                           	opt stack 0
  2774                           
  2775                           ; 2 bytes @ 0x1D
  2776  00001E                     	ds	2
  2777  000020                     i2printf@ap:
  2778                           	opt stack 0
  2779                           
  2780                           ; 2 bytes @ 0x1F
  2781  000020                     	ds	2
  2782  000022                     i2printf@len:
  2783                           	opt stack 0
  2784                           
  2785                           ; 2 bytes @ 0x21
  2786  000022                     	ds	2
  2787  000024                     i2printf@val:
  2788                           	opt stack 0
  2789                           
  2790                           ; 2 bytes @ 0x23
  2791  000024                     	ds	2
  2792  000026                     i2printf@flag:
  2793                           	opt stack 0
  2794                           
  2795                           ; 1 bytes @ 0x25
  2796  000026                     	ds	1
  2797  000027                     i2printf@c:
  2798                           	opt stack 0
  2799                           
  2800                           ; 1 bytes @ 0x26
  2801  000027                     	ds	1
  2802  000028                     i2printf@width:
  2803                           	opt stack 0
  2804                           
  2805                           ; 2 bytes @ 0x27
  2806  000028                     	ds	2
  2807  00002A                     ??_printSortTimer:
  2808  00002A                     ??i2_printRTC:
  2809  00002A                     ?_inputHandler:
  2810                           	opt stack 0
  2811                           
  2812                           ; 2 bytes @ 0x29
  2813  00002A                     	ds	2
  2814  00002C                     ??_inputHandler:
  2815                           
  2816                           ; 1 bytes @ 0x2B
  2817  00002C                     	ds	1
  2818  00002D                     printSortTimer@curTime:
  2819                           	opt stack 0
  2820  00002D                     i2printRTC@INT_time:
  2821                           	opt stack 0
  2822                           
  2823                           ; 14 bytes @ 0x2C
  2824  00002D                     	ds	14
  2825  00003B                     printSortTimer@start_sec:
  2826                           	opt stack 0
  2827  00003B                     i2printRTC@RTC_month:
  2828                           	opt stack 0
  2829                           
  2830                           ; 2 bytes @ 0x3A
  2831  00003B                     	ds	2
  2832  00003D                     printSortTimer@cur_sec:
  2833                           	opt stack 0
  2834  00003D                     i2printRTC@month:
  2835                           	opt stack 0
  2836                           
  2837                           ; 4 bytes @ 0x3C
  2838  00003D                     	ds	2
  2839  00003F                     printSortTimer@min:
  2840                           	opt stack 0
  2841                           
  2842                           ; 2 bytes @ 0x3E
  2843  00003F                     	ds	2
  2844  000041                     printSortTimer@sec:
  2845                           	opt stack 0
  2846  000041                     i2printRTC@i:
  2847                           	opt stack 0
  2848                           
  2849                           ; 2 bytes @ 0x40
  2850  000041                     	ds	2
  2851  000043                     ??_updateMenu:
  2852  000043                     _printSortTimer$2557:
  2853                           	opt stack 0
  2854                           
  2855                           ; 2 bytes @ 0x42
  2856  000043                     	ds	2
  2857  000045                     printSortTimer@timeDiff:
  2858                           	opt stack 0
  2859                           
  2860                           ; 2 bytes @ 0x44
  2861  000045                     	ds	2
  2862  000047                     printSortTimer@i_1156:
  2863                           	opt stack 0
  2864                           
  2865                           ; 2 bytes @ 0x46
  2866  000047                     	ds	2
  2867  000049                     printSortTimer@i:
  2868                           	opt stack 0
  2869                           
  2870                           ; 2 bytes @ 0x48
  2871  000049                     	ds	2
  2872  00004B                     ??_handler:
  2873                           
  2874                           ; 1 bytes @ 0x4A
  2875  00004B                     	ds	16
  2876                           tblptru	equ	0xFF8
  2877                           tblptrh	equ	0xFF7
  2878                           tblptrl	equ	0xFF6
  2879                           tablat	equ	0xFF5
  2880                           postinc0	equ	0xFEE
  2881                           wreg	equ	0xFE8
  2882                           postdec1	equ	0xFE5
  2883                           fsr1l	equ	0xFE1
  2884                           
  2885 ;;
  2886 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2887 ;;
  2888 ;; *************** function _main *****************
  2889 ;; Defined at:
  2890 ;;		line 19 in file "main.c"
  2891 ;; Parameters:    Size  Location     Type
  2892 ;;		None
  2893 ;; Auto vars:     Size  Location     Type
  2894 ;;		None
  2895 ;; Return value:  Size  Location     Type
  2896 ;;                  1    wreg      void 
  2897 ;; Registers used:
  2898 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2899 ;; Tracked objects:
  2900 ;;		On entry : 0/0
  2901 ;;		On exit  : 0/0
  2902 ;;		Unchanged: 0/0
  2903 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2904 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2905 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2906 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2907 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2908 ;;Total ram usage:        0 bytes
  2909 ;; Hardware stack levels required when called:   13
  2910 ;; This function calls:
  2911 ;;		_I2C_Master_Init
  2912 ;;		_Test
  2913 ;;		_UI
  2914 ;;		_initEEPROM
  2915 ;;		_initLCD
  2916 ;;		_initTime
  2917 ;;		_initUI
  2918 ;;		_logRun
  2919 ;;		_machineConfig
  2920 ;;		_sort
  2921 ;;		_stopSignals
  2922 ;; This function is called by:
  2923 ;;		Startup code after reset
  2924 ;; This function uses a non-reentrant model
  2925 ;;
  2926                           
  2927                           	psect	text0
  2928  0046AE                     __ptext0:
  2929                           	opt stack 0
  2930  0046AE                     _main:
  2931                           	opt stack 18
  2932                           
  2933                           ;main.c: 20: machineConfig();
  2934                           
  2935                           ;incstack = 0
  2936  0046AE  EC47  F028         	call	_machineConfig	;wreg free
  2937                           
  2938                           ;main.c: 21: initLCD();
  2939  0046B2  EC25  F02A         	call	_initLCD	;wreg free
  2940                           
  2941                           ;main.c: 24: RTCflag = 0;
  2942  0046B6  0E00               	movlw	0
  2943  0046B8  0100               	movlb	0	; () banked
  2944  0046BA  6FE5               	movwf	(_RTCflag+1)& (0+255),b
  2945  0046BC  0E00               	movlw	0
  2946  0046BE  6FE4               	movwf	_RTCflag& (0+255),b
  2947                           
  2948                           ;main.c: 25: if(RTCflag){
  2949  0046C0  0100               	movlb	0	; () banked
  2950  0046C2  51E4               	movf	_RTCflag& (0+255),w,b
  2951  0046C4  0100               	movlb	0	; () banked
  2952  0046C6  11E5               	iorwf	(_RTCflag+1)& (0+255),w,b
  2953  0046C8  B4D8               	btfsc	status,2,c
  2954  0046CA  D016               	goto	l10038
  2955                           
  2956                           ; BSR set to: 0
  2957                           ;main.c: 26: initTime(0x42, 0x47, 0x17, 0x07, 0x08, 0x04, 0x17);
  2958  0046CC  0E47               	movlw	71
  2959  0046CE  0100               	movlb	0	; () banked
  2960  0046D0  6F80               	movwf	initTime@m& (0+255),b
  2961  0046D2  0E17               	movlw	23
  2962  0046D4  0100               	movlb	0	; () banked
  2963  0046D6  6F81               	movwf	initTime@h& (0+255),b
  2964  0046D8  0E07               	movlw	7
  2965  0046DA  0100               	movlb	0	; () banked
  2966  0046DC  6F82               	movwf	initTime@w& (0+255),b
  2967  0046DE  0E08               	movlw	8
  2968  0046E0  0100               	movlb	0	; () banked
  2969  0046E2  6F83               	movwf	initTime@DD& (0+255),b
  2970  0046E4  0E04               	movlw	4
  2971  0046E6  0100               	movlb	0	; () banked
  2972  0046E8  6F84               	movwf	initTime@MM& (0+255),b
  2973  0046EA  0E17               	movlw	23
  2974  0046EC  0100               	movlb	0	; () banked
  2975  0046EE  6F85               	movwf	initTime@YY& (0+255),b
  2976  0046F0  0E42               	movlw	66
  2977  0046F2  EC18  F02D         	call	_initTime
  2978                           
  2979                           ;main.c: 27: }
  2980  0046F6  D00B               	goto	l10040
  2981  0046F8                     l10038:
  2982                           
  2983                           ;main.c: 28: else{
  2984                           ;main.c: 29: I2C_Master_Init(10000);
  2985  0046F8  0E10               	movlw	16
  2986  0046FA  0100               	movlb	0	; () banked
  2987  0046FC  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  2988  0046FE  0E27               	movlw	39
  2989  004700  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  2990  004702  0E00               	movlw	0
  2991  004704  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  2992  004706  0E00               	movlw	0
  2993  004708  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  2994  00470A  ECAA  F028         	call	_I2C_Master_Init	;wreg free
  2995  00470E                     l10040:
  2996                           
  2997                           ;main.c: 30: }
  2998                           ;main.c: 32: initUI();
  2999  00470E  EC48  F02B         	call	_initUI	;wreg free
  3000                           
  3001                           ;main.c: 33: first = 1;
  3002  004712  0E00               	movlw	0
  3003  004714  0101               	movlb	1	; () banked
  3004  004716  6F42               	movwf	(_first+1)& (0+255),b
  3005  004718  0E01               	movlw	1
  3006  00471A  6F41               	movwf	_first& (0+255),b
  3007                           
  3008                           ; BSR set to: 1
  3009                           ;main.c: 34: initEEPROM();
  3010  00471C  ECA8  F02D         	call	_initEEPROM	;wreg free
  3011                           
  3012                           ;main.c: 45: switch(machine_state){
  3013                           
  3014                           ;main.c: 44: while(1){
  3015  004720  D018               	goto	l10064
  3016  004722                     l10046:
  3017                           
  3018                           ;main.c: 47: UI();
  3019  004722  EC09  F000         	call	_UI	;wreg free
  3020                           
  3021                           ;main.c: 48: break;
  3022  004726  D015               	goto	l10064
  3023  004728                     l10048:
  3024                           
  3025                           ;main.c: 50: sort();
  3026  004728  EC07  F02D         	call	_sort	;wreg free
  3027                           
  3028                           ;main.c: 51: break;
  3029  00472C  D012               	goto	l10064
  3030  00472E                     l10050:
  3031                           
  3032                           ;main.c: 53: stopSignals();
  3033  00472E  EC38  F02D         	call	_stopSignals	;wreg free
  3034                           
  3035                           ;main.c: 54: logRun();
  3036  004732  EC4D  F01F         	call	_logRun	;wreg free
  3037                           
  3038                           ;main.c: 55: first = 1;
  3039  004736  0E00               	movlw	0
  3040  004738  0101               	movlb	1	; () banked
  3041  00473A  6F42               	movwf	(_first+1)& (0+255),b
  3042  00473C  0E01               	movlw	1
  3043  00473E  6F41               	movwf	_first& (0+255),b
  3044                           
  3045                           ; BSR set to: 1
  3046                           ;main.c: 56: UI();
  3047  004740  EC09  F000         	call	_UI	;wreg free
  3048                           
  3049                           ;main.c: 57: break;
  3050  004744  D006               	goto	l10064
  3051  004746                     l10058:
  3052                           
  3053                           ;main.c: 59: Test();
  3054  004746  EC05  F021         	call	_Test	;wreg free
  3055                           
  3056                           ;main.c: 60: break;
  3057  00474A  D003               	goto	l10064
  3058  00474C                     l10060:
  3059                           
  3060                           ;main.c: 62: stopSignals();
  3061  00474C  EC38  F02D         	call	_stopSignals	;wreg free
  3062  004750                     l508:
  3063  004750  D7FF               	goto	l508
  3064  004752                     l10064:
  3065  004752  0100               	movlb	0	; () banked
  3066  004754  51FC               	movf	_machine_state& (0+255),w,b
  3067                           
  3068                           ; Switch size 1, requested type "space"
  3069                           ; Number of cases is 5, Range of values is 0 to 4
  3070                           ; switch strategies available:
  3071                           ; Name         Instructions Cycles
  3072                           ; simple_byte           16     9 (average)
  3073                           ;	Chosen strategy is simple_byte
  3074  004756  0A00               	xorlw	0	; case 0
  3075  004758  B4D8               	btfsc	status,2,c
  3076  00475A  D7E3               	goto	l10046
  3077  00475C  0A01               	xorlw	1	; case 1
  3078  00475E  B4D8               	btfsc	status,2,c
  3079  004760  D7E3               	goto	l10048
  3080  004762  0A03               	xorlw	3	; case 2
  3081  004764  B4D8               	btfsc	status,2,c
  3082  004766  D7E3               	goto	l10050
  3083  004768  0A01               	xorlw	1	; case 3
  3084  00476A  B4D8               	btfsc	status,2,c
  3085  00476C  D7EC               	goto	l10058
  3086  00476E  0A07               	xorlw	7	; case 4
  3087  004770  B4D8               	btfsc	status,2,c
  3088  004772  D7EC               	goto	l10060
  3089                           
  3090                           ; BSR set to: 0
  3091                           
  3092                           ; BSR set to: 0
  3093  004774  D7EE               	goto	l10064
  3094  004776                     __end_of_main:
  3095                           	opt stack 0
  3096                           tblptru	equ	0xFF8
  3097                           tblptrh	equ	0xFF7
  3098                           tblptrl	equ	0xFF6
  3099                           tablat	equ	0xFF5
  3100                           postinc0	equ	0xFEE
  3101                           wreg	equ	0xFE8
  3102                           postdec1	equ	0xFE5
  3103                           fsr1l	equ	0xFE1
  3104                           status	equ	0xFD8
  3105                           
  3106 ;; *************** function _sort *****************
  3107 ;; Defined at:
  3108 ;;		line 67 in file "sort.c"
  3109 ;; Parameters:    Size  Location     Type
  3110 ;;		None
  3111 ;; Auto vars:     Size  Location     Type
  3112 ;;		None
  3113 ;; Return value:  Size  Location     Type
  3114 ;;                  1    wreg      void 
  3115 ;; Registers used:
  3116 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3117 ;; Tracked objects:
  3118 ;;		On entry : 0/0
  3119 ;;		On exit  : 0/0
  3120 ;;		Unchanged: 0/0
  3121 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3122 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3123 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3124 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3125 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3126 ;;Total ram usage:        0 bytes
  3127 ;; Hardware stack levels used:    1
  3128 ;; Hardware stack levels required when called:   12
  3129 ;; This function calls:
  3130 ;;		_Distribution
  3131 ;;		_ID
  3132 ;;		_Loading
  3133 ;; This function is called by:
  3134 ;;		_main
  3135 ;; This function uses a non-reentrant model
  3136 ;;
  3137                           
  3138                           	psect	text1
  3139  005A0E                     __ptext1:
  3140                           	opt stack 0
  3141  005A0E                     _sort:
  3142                           	opt stack 18
  3143                           
  3144                           ;sort.c: 68: if(machine_state == Sorting_state){
  3145                           
  3146                           ; BSR set to: 0
  3147                           ;incstack = 0
  3148  005A0E  0100               	movlb	0	; () banked
  3149  005A10  05FC               	decf	_machine_state& (0+255),w,b
  3150  005A12  B4D8               	btfsc	status,2,c
  3151                           
  3152                           ; BSR set to: 0
  3153                           ;sort.c: 69: Loading();
  3154  005A14  ECC9  F008         	call	_Loading	;wreg free
  3155                           
  3156                           ;sort.c: 70: }
  3157                           ;sort.c: 71: if(machine_state == Sorting_state){
  3158  005A18  0100               	movlb	0	; () banked
  3159  005A1A  05FC               	decf	_machine_state& (0+255),w,b
  3160  005A1C  B4D8               	btfsc	status,2,c
  3161                           
  3162                           ; BSR set to: 0
  3163                           ;sort.c: 72: ID();
  3164  005A1E  ECD5  F00F         	call	_ID	;wreg free
  3165                           
  3166                           ;sort.c: 73: }
  3167                           ;sort.c: 74: if(machine_state == Sorting_state){
  3168  005A22  0100               	movlb	0	; () banked
  3169  005A24  05FC               	decf	_machine_state& (0+255),w,b
  3170  005A26  A4D8               	btfss	status,2,c
  3171  005A28  0012               	return	
  3172                           
  3173                           ; BSR set to: 0
  3174                           ;sort.c: 75: Distribution();
  3175  005A2A  EC7B  F022         	call	_Distribution	;wreg free
  3176  005A2E  0012               	return	
  3177  005A30                     __end_of_sort:
  3178                           	opt stack 0
  3179                           tblptru	equ	0xFF8
  3180                           tblptrh	equ	0xFF7
  3181                           tblptrl	equ	0xFF6
  3182                           tablat	equ	0xFF5
  3183                           postinc0	equ	0xFEE
  3184                           wreg	equ	0xFE8
  3185                           postdec1	equ	0xFE5
  3186                           fsr1l	equ	0xFE1
  3187                           status	equ	0xFD8
  3188                           
  3189 ;; *************** function _Loading *****************
  3190 ;; Defined at:
  3191 ;;		line 79 in file "sort.c"
  3192 ;; Parameters:    Size  Location     Type
  3193 ;;		None
  3194 ;; Auto vars:     Size  Location     Type
  3195 ;;  i               2   62[BANK0 ] int 
  3196 ;;  i               2   60[BANK0 ] int 
  3197 ;;  i               2   58[BANK0 ] int 
  3198 ;;  i               2   56[BANK0 ] int 
  3199 ;;  i               2   54[BANK0 ] int 
  3200 ;;  j               2   66[BANK0 ] int 
  3201 ;;  i               2   64[BANK0 ] int 
  3202 ;;  addr            2   51[BANK0 ] unsigned short 
  3203 ;;  byte1           1   53[BANK0 ] unsigned char 
  3204 ;; Return value:  Size  Location     Type
  3205 ;;                  1    wreg      void 
  3206 ;; Registers used:
  3207 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3208 ;; Tracked objects:
  3209 ;;		On entry : 0/0
  3210 ;;		On exit  : 0/0
  3211 ;;		Unchanged: 0/0
  3212 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3213 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3214 ;;      Locals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3215 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3216 ;;      Totals:         0      19       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3217 ;;Total ram usage:       19 bytes
  3218 ;; Hardware stack levels used:    1
  3219 ;; Hardware stack levels required when called:   11
  3220 ;; This function calls:
  3221 ;;		_EEPROM_read
  3222 ;;		_EEPROM_write
  3223 ;;		_delay_ms
  3224 ;;		_getIR
  3225 ;;		_getMAG
  3226 ;;		_initGlobalVars
  3227 ;;		_initServos
  3228 ;;		_initSortTimer
  3229 ;;		_lcdInst
  3230 ;;		_readIR
  3231 ;; This function is called by:
  3232 ;;		_sort
  3233 ;; This function uses a non-reentrant model
  3234 ;;
  3235                           
  3236                           	psect	text2
  3237  001192                     __ptext2:
  3238                           	opt stack 0
  3239  001192                     _Loading:
  3240                           	opt stack 18
  3241                           
  3242                           ;sort.c: 80: if(first){
  3243                           
  3244                           ;incstack = 0
  3245  001192  0101               	movlb	1	; () banked
  3246  001194  5141               	movf	_first& (0+255),w,b
  3247  001196  0101               	movlb	1	; () banked
  3248  001198  1142               	iorwf	(_first+1)& (0+255),w,b
  3249  00119A  B4D8               	btfsc	status,2,c
  3250  00119C  D066               	goto	l7784
  3251                           
  3252                           ; BSR set to: 1
  3253                           ;sort.c: 81: initGlobalVars();
  3254  00119E  EC1F  F024         	call	_initGlobalVars	;wreg free
  3255                           
  3256                           ;sort.c: 82: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  3257  0011A2  0E01               	movlw	1
  3258  0011A4  EC86  F02D         	call	_lcdInst
  3259  0011A8  0E68               	movlw	104
  3260  0011AA  0100               	movlb	0	; () banked
  3261  0011AC  6FB1               	movwf	??_Loading& (0+255),b
  3262  0011AE  0EE4               	movlw	228
  3263  0011B0                     u9597:
  3264  0011B0  2EE8               	decfsz	wreg,f,c
  3265  0011B2  D7FE               	bra	u9597
  3266  0011B4  2FB1               	decfsz	??_Loading& (0+255),f,b
  3267  0011B6  D7FC               	bra	u9597
  3268  0011B8  F000               	nop	
  3269                           
  3270                           ;sort.c: 83: initSortTimer();
  3271  0011BA  EC3B  F025         	call	_initSortTimer	;wreg free
  3272                           
  3273                           ;sort.c: 84: LATCbits.LATC5 = 1;
  3274  0011BE  8A8B               	bsf	3979,5,c	;volatile
  3275                           
  3276                           ;sort.c: 89: sel = EEPROM_read(0);
  3277  0011C0  0E00               	movlw	0
  3278  0011C2  0100               	movlb	0	; () banked
  3279  0011C4  6F81               	movwf	(EEPROM_read@address+1)& (0+255),b
  3280  0011C6  0E00               	movlw	0
  3281  0011C8  6F80               	movwf	EEPROM_read@address& (0+255),b
  3282  0011CA  EC54  F02D         	call	_EEPROM_read	;wreg free
  3283  0011CE  0100               	movlb	0	; () banked
  3284  0011D0  6FFD               	movwf	_sel& (0+255),b
  3285                           
  3286                           ; BSR set to: 0
  3287                           ;sort.c: 90: unsigned short addr = 1 + 11 * sel;
  3288  0011D2  0100               	movlb	0	; () banked
  3289  0011D4  51FD               	movf	_sel& (0+255),w,b
  3290  0011D6  0D0B               	mullw	11
  3291  0011D8  0E01               	movlw	1
  3292  0011DA  24F3               	addwf	prodl,w,c
  3293  0011DC  0100               	movlb	0	; () banked
  3294  0011DE  6FB3               	movwf	Loading@addr& (0+255),b
  3295  0011E0  0E00               	movlw	0
  3296  0011E2  20F4               	addwfc	prodh,w,c
  3297  0011E4  0100               	movlb	0	; () banked
  3298  0011E6  6FB4               	movwf	(Loading@addr+1)& (0+255),b
  3299                           
  3300                           ; BSR set to: 0
  3301                           ;sort.c: 91: unsigned char byte1 = 0b01111111;
  3302  0011E8  0E7F               	movlw	127
  3303  0011EA  0100               	movlb	0	; () banked
  3304  0011EC  6FB5               	movwf	Loading@byte1& (0+255),b
  3305                           
  3306                           ; BSR set to: 0
  3307                           ;sort.c: 92: EEPROM_write(addr, byte1);
  3308  0011EE  C0B3  F0AB         	movff	Loading@addr,EEPROM_write@address
  3309  0011F2  C0B4  F0AC         	movff	Loading@addr+1,EEPROM_write@address+1
  3310  0011F6  C0B5  F0AD         	movff	Loading@byte1,EEPROM_write@data
  3311  0011FA  EC07  F022         	call	_EEPROM_write	;wreg free
  3312                           
  3313                           ;sort.c: 95: LATBbits.LATB2 = 0;
  3314  0011FE  948A               	bcf	3978,2,c	;volatile
  3315                           
  3316                           ;sort.c: 97: for(int i=0; i<46; i++){
  3317  001200  0E00               	movlw	0
  3318  001202  0100               	movlb	0	; () banked
  3319  001204  6FC1               	movwf	(Loading@i+1)& (0+255),b
  3320  001206  0E00               	movlw	0
  3321  001208  6FC0               	movwf	Loading@i& (0+255),b
  3322                           
  3323                           ; BSR set to: 0
  3324  00120A  0100               	movlb	0	; () banked
  3325  00120C  BFC1               	btfsc	(Loading@i+1)& (0+255),7,b
  3326  00120E  D008               	goto	l7774
  3327  001210  0100               	movlb	0	; () banked
  3328  001212  51C1               	movf	(Loading@i+1)& (0+255),w,b
  3329  001214  E126               	bnz	l785
  3330  001216  0E2E               	movlw	46
  3331  001218  0100               	movlb	0	; () banked
  3332  00121A  5DC0               	subwf	Loading@i& (0+255),w,b
  3333  00121C  B0D8               	btfsc	status,0,c
  3334  00121E  D021               	goto	l785
  3335  001220                     l7774:
  3336                           
  3337                           ; BSR set to: 0
  3338                           ;sort.c: 98: LATBbits.LATB2 = !LATBbits.LATB2;
  3339  001220  B48A               	btfsc	3978,2,c	;volatile
  3340  001222  D004               	goto	u6310
  3341  001224  0100               	movlb	0	; () banked
  3342  001226  6BB1               	clrf	??_Loading& (0+255),b
  3343  001228  2BB1               	incf	??_Loading& (0+255),f,b
  3344  00122A  D002               	goto	u6328
  3345  00122C                     u6310:
  3346  00122C  0100               	movlb	0	; () banked
  3347  00122E  6BB1               	clrf	??_Loading& (0+255),b
  3348  001230                     u6328:
  3349  001230  0100               	movlb	0	; () banked
  3350  001232  47B1               	rlncf	??_Loading& (0+255),f,b
  3351  001234  47B1               	rlncf	??_Loading& (0+255),f,b
  3352  001236  508A               	movf	3978,w,c	;volatile
  3353  001238  0100               	movlb	0	; () banked
  3354  00123A  19B1               	xorwf	??_Loading& (0+255),w,b
  3355  00123C  0BFB               	andlw	-5
  3356  00123E  19B1               	xorwf	??_Loading& (0+255),w,b
  3357  001240  6E8A               	movwf	3978,c	;volatile
  3358                           
  3359                           ; BSR set to: 0
  3360                           ;sort.c: 99: delay_ms(45-i);
  3361  001242  0100               	movlb	0	; () banked
  3362  001244  51C0               	movf	Loading@i& (0+255),w,b
  3363  001246  0800               	sublw	0
  3364  001248  0F2D               	addlw	45
  3365  00124A  ECA7  F02C         	call	_delay_ms
  3366  00124E  0100               	movlb	0	; () banked
  3367  001250  4BC0               	infsnz	Loading@i& (0+255),f,b
  3368  001252  2BC1               	incf	(Loading@i+1)& (0+255),f,b
  3369                           
  3370                           ; BSR set to: 0
  3371  001254  0100               	movlb	0	; () banked
  3372  001256  BFC1               	btfsc	(Loading@i+1)& (0+255),7,b
  3373  001258  D7E3               	goto	l7774
  3374  00125A  0100               	movlb	0	; () banked
  3375  00125C  51C1               	movf	(Loading@i+1)& (0+255),w,b
  3376  00125E  E101               	bnz	u6330
  3377  001260  D7DA               	goto	L1
  3378  001262                     u6330:
  3379  001262                     l785:
  3380                           
  3381                           ; BSR set to: 0
  3382                           ;sort.c: 100: }
  3383                           ;sort.c: 101: LATBbits.LATB2 = 1;
  3384  001262  848A               	bsf	3978,2,c	;volatile
  3385                           
  3386                           ; BSR set to: 0
  3387                           ;sort.c: 104: initServos();
  3388  001264  ECEF  F026         	call	_initServos	;wreg free
  3389                           
  3390                           ;sort.c: 105: }
  3391  001268  0012               	return	
  3392  00126A                     l7784:
  3393                           
  3394                           ;sort.c: 106: else{
  3395                           ;sort.c: 109: if(!f_loadingNewCan){
  3396  00126A  0100               	movlb	0	; () banked
  3397  00126C  51EC               	movf	_f_loadingNewCan& (0+255),w,b
  3398  00126E  0100               	movlb	0	; () banked
  3399  001270  11ED               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  3400  001272  A4D8               	btfss	status,2,c
  3401  001274  D018               	goto	l7800
  3402                           
  3403                           ; BSR set to: 0
  3404                           ;sort.c: 111: getIR();
  3405  001276  EC67  F027         	call	_getIR	;wreg free
  3406                           
  3407                           ;sort.c: 113: if(!f_loadingNewCan){
  3408  00127A  0100               	movlb	0	; () banked
  3409  00127C  51EC               	movf	_f_loadingNewCan& (0+255),w,b
  3410  00127E  0100               	movlb	0	; () banked
  3411  001280  11ED               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  3412  001282  B4D8               	btfsc	status,2,c
  3413  001284  0012               	return	
  3414                           
  3415                           ; BSR set to: 0
  3416                           ;sort.c: 117: else{
  3417                           ;sort.c: 118: count_total++;
  3418                           
  3419                           ; BSR set to: 0
  3420                           
  3421                           ; BSR set to: 0
  3422                           ;sort.c: 115: }
  3423                           
  3424                           ; BSR set to: 0
  3425                           ;sort.c: 114: return;
  3426  001286  0100               	movlb	0	; () banked
  3427  001288  4BFE               	infsnz	_count_total& (0+255),f,b
  3428  00128A  2BFF               	incf	(_count_total+1)& (0+255),f,b
  3429                           
  3430                           ; BSR set to: 0
  3431                           ;sort.c: 119: if(count_total == 12){
  3432  00128C  0E0C               	movlw	12
  3433  00128E  0100               	movlb	0	; () banked
  3434  001290  19FE               	xorwf	_count_total& (0+255),w,b
  3435  001292  0100               	movlb	0	; () banked
  3436  001294  11FF               	iorwf	(_count_total+1)& (0+255),w,b
  3437  001296  A4D8               	btfss	status,2,c
  3438  001298  0012               	return	
  3439                           
  3440                           ; BSR set to: 0
  3441                           ;sort.c: 120: f_lastCan = 1;
  3442  00129A  0E00               	movlw	0
  3443  00129C  0100               	movlb	0	; () banked
  3444  00129E  6FEB               	movwf	(_f_lastCan+1)& (0+255),b
  3445  0012A0  0E01               	movlw	1
  3446  0012A2  6FEA               	movwf	_f_lastCan& (0+255),b
  3447                           
  3448                           ; BSR set to: 0
  3449                           ;sort.c: 121: }
  3450                           ;sort.c: 122: }
  3451                           ;sort.c: 123: }
  3452                           
  3453                           ; BSR set to: 0
  3454  0012A4  0012               	return	
  3455  0012A6                     l7800:
  3456                           
  3457                           ; BSR set to: 0
  3458                           ;sort.c: 126: else if(f_ID_receive){
  3459  0012A6  0101               	movlb	1	; () banked
  3460  0012A8  5137               	movf	_f_ID_receive& (0+255),w,b
  3461  0012AA  0101               	movlb	1	; () banked
  3462  0012AC  1138               	iorwf	(_f_ID_receive+1)& (0+255),w,b
  3463  0012AE  B4D8               	btfsc	status,2,c
  3464  0012B0  0012               	return	
  3465                           
  3466                           ; BSR set to: 1
  3467                           ;sort.c: 127: f_most_recent_sort_time = 1;
  3468  0012B2  0E00               	movlw	0
  3469  0012B4  0101               	movlb	1	; () banked
  3470  0012B6  6F40               	movwf	(_f_most_recent_sort_time+1)& (0+255),b
  3471  0012B8  0E01               	movlw	1
  3472  0012BA  6F3F               	movwf	_f_most_recent_sort_time& (0+255),b
  3473                           
  3474                           ;sort.c: 128: f_loadingNewCan = 0;
  3475  0012BC  0E00               	movlw	0
  3476  0012BE  0100               	movlb	0	; () banked
  3477  0012C0  6FED               	movwf	(_f_loadingNewCan+1)& (0+255),b
  3478  0012C2  0E00               	movlw	0
  3479  0012C4  6FEC               	movwf	_f_loadingNewCan& (0+255),b
  3480                           
  3481                           ; BSR set to: 0
  3482                           ;sort.c: 129: _delay((unsigned long)((400)*(32000000/4000.0)));
  3483  0012C6  0E11               	movlw	17
  3484  0012C8  0100               	movlb	0	; () banked
  3485  0012CA  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3486  0012CC  0E3C               	movlw	60
  3487  0012CE  0100               	movlb	0	; () banked
  3488  0012D0  6FB1               	movwf	??_Loading& (0+255),b
  3489  0012D2  0ECB               	movlw	203
  3490  0012D4                     u9607:
  3491  0012D4  2EE8               	decfsz	wreg,f,c
  3492  0012D6  D7FE               	bra	u9607
  3493  0012D8  2FB1               	decfsz	??_Loading& (0+255),f,b
  3494  0012DA  D7FC               	bra	u9607
  3495  0012DC  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3496  0012DE  D7FA               	bra	u9607
  3497                           
  3498                           ;sort.c: 130: LATBbits.LATB2 = 0;
  3499  0012E0  948A               	bcf	3978,2,c	;volatile
  3500                           
  3501                           ;sort.c: 134: f_arm_position = 1;
  3502  0012E2  0E00               	movlw	0
  3503  0012E4  0100               	movlb	0	; () banked
  3504  0012E6  6FE9               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
  3505  0012E8  0E01               	movlw	1
  3506  0012EA  6FE8               	movwf	_f_arm_position& (0+255),b	;volatile
  3507                           
  3508                           ; BSR set to: 0
  3509                           ;sort.c: 136: delay_ms(750);
  3510  0012EC  0EEE               	movlw	238
  3511  0012EE  ECA7  F02C         	call	_delay_ms
  3512                           
  3513                           ;sort.c: 137: getMAG();
  3514  0012F2  EC16  F02B         	call	_getMAG	;wreg free
  3515                           
  3516                           ;sort.c: 138: sensor_outputs[0] = MAG_signal;
  3517  0012F6  C0E2  F0DA         	movff	_MAG_signal,_sensor_outputs
  3518  0012FA  C0E3  F0DB         	movff	_MAG_signal+1,_sensor_outputs+1
  3519                           
  3520                           ;sort.c: 140: if(sensor_outputs[0]){
  3521  0012FE  0100               	movlb	0	; () banked
  3522  001300  51DA               	movf	_sensor_outputs& (0+255),w,b
  3523  001302  0100               	movlb	0	; () banked
  3524  001304  11DB               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  3525  001306  B4D8               	btfsc	status,2,c
  3526  001308  D027               	goto	l7830
  3527                           
  3528                           ; BSR set to: 0
  3529                           ;sort.c: 141: for(int i = 0; i<25; i++){
  3530  00130A  0E00               	movlw	0
  3531  00130C  0100               	movlb	0	; () banked
  3532  00130E  6FB7               	movwf	(Loading@i_1118+1)& (0+255),b
  3533  001310  0E00               	movlw	0
  3534  001312  6FB6               	movwf	Loading@i_1118& (0+255),b
  3535  001314                     l7820:
  3536                           
  3537                           ; BSR set to: 0
  3538  001314  0100               	movlb	0	; () banked
  3539  001316  BFB7               	btfsc	(Loading@i_1118+1)& (0+255),7,b
  3540  001318  D008               	goto	l795
  3541  00131A  0100               	movlb	0	; () banked
  3542  00131C  51B7               	movf	(Loading@i_1118+1)& (0+255),w,b
  3543  00131E  E143               	bnz	l7842
  3544  001320  0E19               	movlw	25
  3545  001322  0100               	movlb	0	; () banked
  3546  001324  5DB6               	subwf	Loading@i_1118& (0+255),w,b
  3547  001326  B0D8               	btfsc	status,0,c
  3548  001328  D03E               	goto	l7842
  3549  00132A                     l795:
  3550                           
  3551                           ; BSR set to: 0
  3552                           ;sort.c: 142: LATAbits.LATA4 = 1;
  3553  00132A  8889               	bsf	3977,4,c	;volatile
  3554                           
  3555                           ; BSR set to: 0
  3556                           ;sort.c: 143: _delay((unsigned long)((7500)*(32000000/4000000.0)));
  3557  00132C  0E4E               	movlw	78
  3558  00132E  0100               	movlb	0	; () banked
  3559  001330  6FB1               	movwf	??_Loading& (0+255),b
  3560  001332  0EEB               	movlw	235
  3561  001334                     u9617:
  3562  001334  2EE8               	decfsz	wreg,f,c
  3563  001336  D7FE               	bra	u9617
  3564  001338  2FB1               	decfsz	??_Loading& (0+255),f,b
  3565  00133A  D7FC               	bra	u9617
  3566                           
  3567                           ;sort.c: 144: LATAbits.LATA4 = 0;
  3568  00133C  9889               	bcf	3977,4,c	;volatile
  3569                           
  3570                           ;sort.c: 145: _delay((unsigned long)((2500)*(32000000/4000000.0)));
  3571  00133E  0E1A               	movlw	26
  3572  001340  0100               	movlb	0	; () banked
  3573  001342  6FB1               	movwf	??_Loading& (0+255),b
  3574  001344  0EF8               	movlw	248
  3575  001346                     u9627:
  3576  001346  2EE8               	decfsz	wreg,f,c
  3577  001348  D7FE               	bra	u9627
  3578  00134A  2FB1               	decfsz	??_Loading& (0+255),f,b
  3579  00134C  D7FC               	bra	u9627
  3580  00134E  F000               	nop	
  3581  001350  0100               	movlb	0	; () banked
  3582  001352  4BB6               	infsnz	Loading@i_1118& (0+255),f,b
  3583  001354  2BB7               	incf	(Loading@i_1118+1)& (0+255),f,b
  3584  001356  D7DE               	goto	l7820
  3585  001358                     l7830:
  3586                           
  3587                           ; BSR set to: 0
  3588                           ;sort.c: 148: else{
  3589                           ;sort.c: 149: for(int i = 0; i<25; i++){
  3590  001358  0E00               	movlw	0
  3591  00135A  0100               	movlb	0	; () banked
  3592  00135C  6FB9               	movwf	(Loading@i_1127+1)& (0+255),b
  3593  00135E  0E00               	movlw	0
  3594  001360  6FB8               	movwf	Loading@i_1127& (0+255),b
  3595  001362                     l7832:
  3596                           
  3597                           ; BSR set to: 0
  3598  001362  0100               	movlb	0	; () banked
  3599  001364  BFB9               	btfsc	(Loading@i_1127+1)& (0+255),7,b
  3600  001366  D008               	goto	l798
  3601  001368  0100               	movlb	0	; () banked
  3602  00136A  51B9               	movf	(Loading@i_1127+1)& (0+255),w,b
  3603  00136C  E11C               	bnz	l7842
  3604  00136E  0E19               	movlw	25
  3605  001370  0100               	movlb	0	; () banked
  3606  001372  5DB8               	subwf	Loading@i_1127& (0+255),w,b
  3607  001374  B0D8               	btfsc	status,0,c
  3608  001376  D017               	goto	l7842
  3609  001378                     l798:
  3610                           
  3611                           ; BSR set to: 0
  3612                           ;sort.c: 150: LATAbits.LATA4 = 1;
  3613  001378  8889               	bsf	3977,4,c	;volatile
  3614                           
  3615                           ; BSR set to: 0
  3616                           ;sort.c: 151: _delay((unsigned long)((5800)*(32000000/4000000.0)));
  3617  00137A  0E3D               	movlw	61
  3618  00137C  0100               	movlb	0	; () banked
  3619  00137E  6FB1               	movwf	??_Loading& (0+255),b
  3620  001380  0E41               	movlw	65
  3621  001382                     u9637:
  3622  001382  2EE8               	decfsz	wreg,f,c
  3623  001384  D7FE               	bra	u9637
  3624  001386  2FB1               	decfsz	??_Loading& (0+255),f,b
  3625  001388  D7FC               	bra	u9637
  3626                           
  3627                           ;sort.c: 152: LATAbits.LATA4 = 0;
  3628  00138A  9889               	bcf	3977,4,c	;volatile
  3629                           
  3630                           ;sort.c: 153: _delay((unsigned long)((4200)*(32000000/4000000.0)));
  3631  00138C  0E2C               	movlw	44
  3632  00138E  0100               	movlb	0	; () banked
  3633  001390  6FB1               	movwf	??_Loading& (0+255),b
  3634  001392  0EA1               	movlw	161
  3635  001394                     u9647:
  3636  001394  2EE8               	decfsz	wreg,f,c
  3637  001396  D7FE               	bra	u9647
  3638  001398  2FB1               	decfsz	??_Loading& (0+255),f,b
  3639  00139A  D7FC               	bra	u9647
  3640  00139C  D000               	nop2	
  3641  00139E  0100               	movlb	0	; () banked
  3642  0013A0  4BB8               	infsnz	Loading@i_1127& (0+255),f,b
  3643  0013A2  2BB9               	incf	(Loading@i_1127+1)& (0+255),f,b
  3644  0013A4  D7DE               	goto	l7832
  3645  0013A6                     l7842:
  3646                           
  3647                           ; BSR set to: 0
  3648                           ;sort.c: 154: }
  3649                           ;sort.c: 155: }
  3650                           ;sort.c: 157: _delay((unsigned long)((350)*(32000000/4000.0)));
  3651  0013A6  0E0F               	movlw	15
  3652  0013A8  0100               	movlb	0	; () banked
  3653  0013AA  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3654  0013AC  0E35               	movlw	53
  3655  0013AE  0100               	movlb	0	; () banked
  3656  0013B0  6FB1               	movwf	??_Loading& (0+255),b
  3657  0013B2  0E51               	movlw	81
  3658  0013B4                     u9657:
  3659  0013B4  2EE8               	decfsz	wreg,f,c
  3660  0013B6  D7FE               	bra	u9657
  3661  0013B8  2FB1               	decfsz	??_Loading& (0+255),f,b
  3662  0013BA  D7FC               	bra	u9657
  3663  0013BC  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3664  0013BE  D7FA               	bra	u9657
  3665                           
  3666                           ;sort.c: 159: readIR();
  3667  0013C0  ECB3  F029         	call	_readIR	;wreg free
  3668                           
  3669                           ;sort.c: 160: if(IR_signal==1){
  3670  0013C4  0100               	movlb	0	; () banked
  3671  0013C6  05E0               	decf	_IR_signal& (0+255),w,b
  3672  0013C8  0100               	movlb	0	; () banked
  3673  0013CA  11E1               	iorwf	(_IR_signal+1)& (0+255),w,b
  3674  0013CC  A4D8               	btfss	status,2,c
  3675  0013CE  D1D4               	goto	l7970
  3676                           
  3677                           ; BSR set to: 0
  3678                           ;sort.c: 161: _delay((unsigned long)((30)*(32000000/4000.0)));
  3679  0013D0  0E02               	movlw	2
  3680  0013D2  0100               	movlb	0	; () banked
  3681  0013D4  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3682  0013D6  0E38               	movlw	56
  3683  0013D8  0100               	movlb	0	; () banked
  3684  0013DA  6FB1               	movwf	??_Loading& (0+255),b
  3685  0013DC  0EAD               	movlw	173
  3686  0013DE                     u9667:
  3687  0013DE  2EE8               	decfsz	wreg,f,c
  3688  0013E0  D7FE               	bra	u9667
  3689  0013E2  2FB1               	decfsz	??_Loading& (0+255),f,b
  3690  0013E4  D7FC               	bra	u9667
  3691  0013E6  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3692  0013E8  D7FA               	bra	u9667
  3693                           
  3694                           ;sort.c: 162: readIR();
  3695  0013EA  ECB3  F029         	call	_readIR	;wreg free
  3696                           
  3697                           ;sort.c: 163: if(IR_signal==1){
  3698  0013EE  0100               	movlb	0	; () banked
  3699  0013F0  05E0               	decf	_IR_signal& (0+255),w,b
  3700  0013F2  0100               	movlb	0	; () banked
  3701  0013F4  11E1               	iorwf	(_IR_signal+1)& (0+255),w,b
  3702  0013F6  A4D8               	btfss	status,2,c
  3703  0013F8  D054               	goto	l7880
  3704                           
  3705                           ; BSR set to: 0
  3706                           ;sort.c: 164: if(sensor_outputs[0]){
  3707  0013FA  0100               	movlb	0	; () banked
  3708  0013FC  51DA               	movf	_sensor_outputs& (0+255),w,b
  3709  0013FE  0100               	movlb	0	; () banked
  3710  001400  11DB               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  3711  001402  B4D8               	btfsc	status,2,c
  3712  001404  D027               	goto	l7868
  3713                           
  3714                           ; BSR set to: 0
  3715                           ;sort.c: 165: for(int i = 0; i<25; i++){
  3716  001406  0E00               	movlw	0
  3717  001408  0100               	movlb	0	; () banked
  3718  00140A  6FBB               	movwf	(Loading@i_1129+1)& (0+255),b
  3719  00140C  0E00               	movlw	0
  3720  00140E  6FBA               	movwf	Loading@i_1129& (0+255),b
  3721  001410                     l7858:
  3722                           
  3723                           ; BSR set to: 0
  3724  001410  0100               	movlb	0	; () banked
  3725  001412  BFBB               	btfsc	(Loading@i_1129+1)& (0+255),7,b
  3726  001414  D008               	goto	l803
  3727  001416  0100               	movlb	0	; () banked
  3728  001418  51BB               	movf	(Loading@i_1129+1)& (0+255),w,b
  3729  00141A  E143               	bnz	l7880
  3730  00141C  0E19               	movlw	25
  3731  00141E  0100               	movlb	0	; () banked
  3732  001420  5DBA               	subwf	Loading@i_1129& (0+255),w,b
  3733  001422  B0D8               	btfsc	status,0,c
  3734  001424  D03E               	goto	l7880
  3735  001426                     l803:
  3736                           
  3737                           ; BSR set to: 0
  3738                           ;sort.c: 166: LATAbits.LATA4 = 1;
  3739  001426  8889               	bsf	3977,4,c	;volatile
  3740                           
  3741                           ; BSR set to: 0
  3742                           ;sort.c: 167: _delay((unsigned long)((7500)*(32000000/4000000.0)));
  3743  001428  0E4E               	movlw	78
  3744  00142A  0100               	movlb	0	; () banked
  3745  00142C  6FB1               	movwf	??_Loading& (0+255),b
  3746  00142E  0EEB               	movlw	235
  3747  001430                     u9677:
  3748  001430  2EE8               	decfsz	wreg,f,c
  3749  001432  D7FE               	bra	u9677
  3750  001434  2FB1               	decfsz	??_Loading& (0+255),f,b
  3751  001436  D7FC               	bra	u9677
  3752                           
  3753                           ;sort.c: 168: LATAbits.LATA4 = 0;
  3754  001438  9889               	bcf	3977,4,c	;volatile
  3755                           
  3756                           ;sort.c: 169: _delay((unsigned long)((2500)*(32000000/4000000.0)));
  3757  00143A  0E1A               	movlw	26
  3758  00143C  0100               	movlb	0	; () banked
  3759  00143E  6FB1               	movwf	??_Loading& (0+255),b
  3760  001440  0EF8               	movlw	248
  3761  001442                     u9687:
  3762  001442  2EE8               	decfsz	wreg,f,c
  3763  001444  D7FE               	bra	u9687
  3764  001446  2FB1               	decfsz	??_Loading& (0+255),f,b
  3765  001448  D7FC               	bra	u9687
  3766  00144A  F000               	nop	
  3767  00144C  0100               	movlb	0	; () banked
  3768  00144E  4BBA               	infsnz	Loading@i_1129& (0+255),f,b
  3769  001450  2BBB               	incf	(Loading@i_1129+1)& (0+255),f,b
  3770  001452  D7DE               	goto	l7858
  3771  001454                     l7868:
  3772                           
  3773                           ; BSR set to: 0
  3774                           ;sort.c: 172: else{
  3775                           ;sort.c: 173: for(int i = 0; i<25; i++){
  3776  001454  0E00               	movlw	0
  3777  001456  0100               	movlb	0	; () banked
  3778  001458  6FBD               	movwf	(Loading@i_1130+1)& (0+255),b
  3779  00145A  0E00               	movlw	0
  3780  00145C  6FBC               	movwf	Loading@i_1130& (0+255),b
  3781  00145E                     l7870:
  3782                           
  3783                           ; BSR set to: 0
  3784  00145E  0100               	movlb	0	; () banked
  3785  001460  BFBD               	btfsc	(Loading@i_1130+1)& (0+255),7,b
  3786  001462  D008               	goto	l806
  3787  001464  0100               	movlb	0	; () banked
  3788  001466  51BD               	movf	(Loading@i_1130+1)& (0+255),w,b
  3789  001468  E11C               	bnz	l7880
  3790  00146A  0E19               	movlw	25
  3791  00146C  0100               	movlb	0	; () banked
  3792  00146E  5DBC               	subwf	Loading@i_1130& (0+255),w,b
  3793  001470  B0D8               	btfsc	status,0,c
  3794  001472  D017               	goto	l7880
  3795  001474                     l806:
  3796                           
  3797                           ; BSR set to: 0
  3798                           ;sort.c: 174: LATAbits.LATA4 = 1;
  3799  001474  8889               	bsf	3977,4,c	;volatile
  3800                           
  3801                           ; BSR set to: 0
  3802                           ;sort.c: 175: _delay((unsigned long)((5800)*(32000000/4000000.0)));
  3803  001476  0E3D               	movlw	61
  3804  001478  0100               	movlb	0	; () banked
  3805  00147A  6FB1               	movwf	??_Loading& (0+255),b
  3806  00147C  0E41               	movlw	65
  3807  00147E                     u9697:
  3808  00147E  2EE8               	decfsz	wreg,f,c
  3809  001480  D7FE               	bra	u9697
  3810  001482  2FB1               	decfsz	??_Loading& (0+255),f,b
  3811  001484  D7FC               	bra	u9697
  3812                           
  3813                           ;sort.c: 176: LATAbits.LATA4 = 0;
  3814  001486  9889               	bcf	3977,4,c	;volatile
  3815                           
  3816                           ;sort.c: 177: _delay((unsigned long)((4200)*(32000000/4000000.0)));
  3817  001488  0E2C               	movlw	44
  3818  00148A  0100               	movlb	0	; () banked
  3819  00148C  6FB1               	movwf	??_Loading& (0+255),b
  3820  00148E  0EA1               	movlw	161
  3821  001490                     u9707:
  3822  001490  2EE8               	decfsz	wreg,f,c
  3823  001492  D7FE               	bra	u9707
  3824  001494  2FB1               	decfsz	??_Loading& (0+255),f,b
  3825  001496  D7FC               	bra	u9707
  3826  001498  D000               	nop2	
  3827  00149A  0100               	movlb	0	; () banked
  3828  00149C  4BBC               	infsnz	Loading@i_1130& (0+255),f,b
  3829  00149E  2BBD               	incf	(Loading@i_1130+1)& (0+255),f,b
  3830  0014A0  D7DE               	goto	l7870
  3831  0014A2                     l7880:
  3832                           
  3833                           ; BSR set to: 0
  3834                           ;sort.c: 178: }
  3835                           ;sort.c: 179: }
  3836                           ;sort.c: 180: }
  3837                           ;sort.c: 182: _delay((unsigned long)((350)*(32000000/4000.0)));
  3838  0014A2  0E0F               	movlw	15
  3839  0014A4  0100               	movlb	0	; () banked
  3840  0014A6  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3841  0014A8  0E35               	movlw	53
  3842  0014AA  0100               	movlb	0	; () banked
  3843  0014AC  6FB1               	movwf	??_Loading& (0+255),b
  3844  0014AE  0E51               	movlw	81
  3845  0014B0                     u9717:
  3846  0014B0  2EE8               	decfsz	wreg,f,c
  3847  0014B2  D7FE               	bra	u9717
  3848  0014B4  2FB1               	decfsz	??_Loading& (0+255),f,b
  3849  0014B6  D7FC               	bra	u9717
  3850  0014B8  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3851  0014BA  D7FA               	bra	u9717
  3852                           
  3853                           ;sort.c: 184: int j = 0;
  3854  0014BC  0E00               	movlw	0
  3855  0014BE  0100               	movlb	0	; () banked
  3856  0014C0  6FC3               	movwf	(Loading@j+1)& (0+255),b
  3857  0014C2  0E00               	movlw	0
  3858  0014C4  6FC2               	movwf	Loading@j& (0+255),b
  3859                           
  3860                           ;sort.c: 185: while(IR_signal == 1){
  3861  0014C6  D151               	goto	l7968
  3862  0014C8                     l7884:
  3863                           
  3864                           ; BSR set to: 0
  3865                           ;sort.c: 186: readIR();
  3866  0014C8  ECB3  F029         	call	_readIR	;wreg free
  3867                           
  3868                           ;sort.c: 187: if(j == 3 || j == 4){
  3869  0014CC  0E03               	movlw	3
  3870  0014CE  0100               	movlb	0	; () banked
  3871  0014D0  19C2               	xorwf	Loading@j& (0+255),w,b
  3872  0014D2  0100               	movlb	0	; () banked
  3873  0014D4  11C3               	iorwf	(Loading@j+1)& (0+255),w,b
  3874  0014D6  B4D8               	btfsc	status,2,c
  3875  0014D8  D007               	goto	l7890
  3876                           
  3877                           ; BSR set to: 0
  3878  0014DA  0E04               	movlw	4
  3879  0014DC  0100               	movlb	0	; () banked
  3880  0014DE  19C2               	xorwf	Loading@j& (0+255),w,b
  3881  0014E0  0100               	movlb	0	; () banked
  3882  0014E2  11C3               	iorwf	(Loading@j+1)& (0+255),w,b
  3883  0014E4  A4D8               	btfss	status,2,c
  3884  0014E6  D005               	goto	l7892
  3885  0014E8                     l7890:
  3886                           
  3887                           ; BSR set to: 0
  3888                           ;sort.c: 188: f_arm_position = 0;
  3889  0014E8  0E00               	movlw	0
  3890  0014EA  0100               	movlb	0	; () banked
  3891  0014EC  6FE9               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
  3892  0014EE  0E00               	movlw	0
  3893  0014F0  D022               	goto	L2
  3894  0014F2                     l7892:
  3895                           
  3896                           ; BSR set to: 0
  3897                           ;sort.c: 190: else if(j == 5 || j == 6){
  3898  0014F2  0E05               	movlw	5
  3899  0014F4  0100               	movlb	0	; () banked
  3900  0014F6  19C2               	xorwf	Loading@j& (0+255),w,b
  3901  0014F8  0100               	movlb	0	; () banked
  3902  0014FA  11C3               	iorwf	(Loading@j+1)& (0+255),w,b
  3903  0014FC  B4D8               	btfsc	status,2,c
  3904  0014FE  D007               	goto	l816
  3905                           
  3906                           ; BSR set to: 0
  3907  001500  0E06               	movlw	6
  3908  001502  0100               	movlb	0	; () banked
  3909  001504  19C2               	xorwf	Loading@j& (0+255),w,b
  3910  001506  0100               	movlb	0	; () banked
  3911  001508  11C3               	iorwf	(Loading@j+1)& (0+255),w,b
  3912  00150A  A4D8               	btfss	status,2,c
  3913  00150C  D002               	goto	l7896
  3914  00150E                     l816:
  3915                           
  3916                           ; BSR set to: 0
  3917                           ;sort.c: 191: LATBbits.LATB2 = 1;
  3918  00150E  848A               	bsf	3978,2,c	;volatile
  3919                           
  3920                           ;sort.c: 192: }
  3921  001510  D034               	goto	l813
  3922  001512                     l7896:
  3923                           
  3924                           ; BSR set to: 0
  3925                           ;sort.c: 193: else if(j == 7 || j == 8){
  3926  001512  0E07               	movlw	7
  3927  001514  0100               	movlb	0	; () banked
  3928  001516  19C2               	xorwf	Loading@j& (0+255),w,b
  3929  001518  0100               	movlb	0	; () banked
  3930  00151A  11C3               	iorwf	(Loading@j+1)& (0+255),w,b
  3931  00151C  B4D8               	btfsc	status,2,c
  3932  00151E  D007               	goto	l7900
  3933                           
  3934                           ; BSR set to: 0
  3935  001520  0E08               	movlw	8
  3936  001522  0100               	movlb	0	; () banked
  3937  001524  19C2               	xorwf	Loading@j& (0+255),w,b
  3938  001526  0100               	movlb	0	; () banked
  3939  001528  11C3               	iorwf	(Loading@j+1)& (0+255),w,b
  3940  00152A  A4D8               	btfss	status,2,c
  3941  00152C  D006               	goto	l818
  3942  00152E                     l7900:
  3943                           
  3944                           ; BSR set to: 0
  3945                           ;sort.c: 194: f_arm_position = 1;
  3946  00152E  0E00               	movlw	0
  3947  001530  0100               	movlb	0	; () banked
  3948  001532  6FE9               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
  3949  001534  0E01               	movlw	1
  3950  001536                     L2:
  3951  001536  6FE8               	movwf	_f_arm_position& (0+255),b	;volatile
  3952                           
  3953                           ;sort.c: 195: }
  3954  001538  D020               	goto	l813
  3955  00153A                     l818:
  3956                           
  3957                           ; BSR set to: 0
  3958                           ;sort.c: 196: else if(j % 2 == 0){
  3959  00153A  0100               	movlb	0	; () banked
  3960  00153C  B1C2               	btfsc	Loading@j& (0+255),0,b
  3961  00153E  D01D               	goto	l813
  3962                           
  3963                           ; BSR set to: 0
  3964                           ;sort.c: 197: LATBbits.LATB2 = !LATBbits.LATB2;
  3965  001540  B48A               	btfsc	3978,2,c	;volatile
  3966  001542  D004               	goto	u6570
  3967  001544  0100               	movlb	0	; () banked
  3968  001546  6BB1               	clrf	??_Loading& (0+255),b
  3969  001548  2BB1               	incf	??_Loading& (0+255),f,b
  3970  00154A  D002               	goto	u6588
  3971  00154C                     u6570:
  3972  00154C  0100               	movlb	0	; () banked
  3973  00154E  6BB1               	clrf	??_Loading& (0+255),b
  3974  001550                     u6588:
  3975  001550  0100               	movlb	0	; () banked
  3976  001552  47B1               	rlncf	??_Loading& (0+255),f,b
  3977  001554  47B1               	rlncf	??_Loading& (0+255),f,b
  3978  001556  508A               	movf	3978,w,c	;volatile
  3979  001558  0100               	movlb	0	; () banked
  3980  00155A  19B1               	xorwf	??_Loading& (0+255),w,b
  3981  00155C  0BFB               	andlw	-5
  3982  00155E  19B1               	xorwf	??_Loading& (0+255),w,b
  3983  001560  6E8A               	movwf	3978,c	;volatile
  3984                           
  3985                           ;sort.c: 198: f_arm_position = !f_arm_position;
  3986  001562  0100               	movlb	0	; () banked
  3987  001564  51E8               	movf	_f_arm_position& (0+255),w,b	;volatile
  3988  001566  0100               	movlb	0	; () banked
  3989  001568  11E9               	iorwf	(_f_arm_position+1)& (0+255),w,b	;volatile
  3990  00156A  A4D8               	btfss	status,2,c
  3991  00156C  D002               	goto	u6590
  3992  00156E  0E01               	movlw	1
  3993  001570  D001               	goto	u6600
  3994  001572                     u6590:
  3995  001572  0E00               	movlw	0
  3996  001574                     u6600:
  3997  001574  0100               	movlb	0	; () banked
  3998  001576  6FE8               	movwf	_f_arm_position& (0+255),b	;volatile
  3999  001578  6BE9               	clrf	(_f_arm_position+1)& (0+255),b	;volatile
  4000  00157A                     l813:
  4001                           
  4002                           ; BSR set to: 0
  4003                           ;sort.c: 199: }
  4004                           ;sort.c: 202: if(IR_signal==1){
  4005  00157A  0100               	movlb	0	; () banked
  4006  00157C  05E0               	decf	_IR_signal& (0+255),w,b
  4007  00157E  0100               	movlb	0	; () banked
  4008  001580  11E1               	iorwf	(_IR_signal+1)& (0+255),w,b
  4009  001582  A4D8               	btfss	status,2,c
  4010  001584  D0D6               	goto	l7956
  4011                           
  4012                           ; BSR set to: 0
  4013                           ;sort.c: 203: _delay((unsigned long)((350)*(32000000/4000.0)));
  4014  001586  0E0F               	movlw	15
  4015  001588  0100               	movlb	0	; () banked
  4016  00158A  6FB2               	movwf	(??_Loading+1)& (0+255),b
  4017  00158C  0E35               	movlw	53
  4018  00158E  0100               	movlb	0	; () banked
  4019  001590  6FB1               	movwf	??_Loading& (0+255),b
  4020  001592  0E51               	movlw	81
  4021  001594                     u9727:
  4022  001594  2EE8               	decfsz	wreg,f,c
  4023  001596  D7FE               	bra	u9727
  4024  001598  2FB1               	decfsz	??_Loading& (0+255),f,b
  4025  00159A  D7FC               	bra	u9727
  4026  00159C  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  4027  00159E  D7FA               	bra	u9727
  4028                           
  4029                           ;sort.c: 204: readIR();
  4030  0015A0  ECB3  F029         	call	_readIR	;wreg free
  4031                           
  4032                           ;sort.c: 205: if(IR_signal==1){
  4033  0015A4  0100               	movlb	0	; () banked
  4034  0015A6  05E0               	decf	_IR_signal& (0+255),w,b
  4035  0015A8  0100               	movlb	0	; () banked
  4036  0015AA  11E1               	iorwf	(_IR_signal+1)& (0+255),w,b
  4037  0015AC  A4D8               	btfss	status,2,c
  4038  0015AE  D0BD               	goto	l824
  4039                           
  4040                           ; BSR set to: 0
  4041                           ;sort.c: 206: if(sensor_outputs[0]){
  4042  0015B0  0100               	movlb	0	; () banked
  4043  0015B2  51DA               	movf	_sensor_outputs& (0+255),w,b
  4044  0015B4  0100               	movlb	0	; () banked
  4045  0015B6  11DB               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  4046  0015B8  B4D8               	btfsc	status,2,c
  4047  0015BA  D011               	goto	l7918
  4048                           
  4049                           ; BSR set to: 0
  4050                           ;sort.c: 207: LATAbits.LATA4 = 1;
  4051  0015BC  8889               	bsf	3977,4,c	;volatile
  4052                           
  4053                           ; BSR set to: 0
  4054                           ;sort.c: 208: _delay((unsigned long)((250)*(32000000/4000.0)));
  4055  0015BE  0E0B               	movlw	11
  4056  0015C0  0100               	movlb	0	; () banked
  4057  0015C2  6FB2               	movwf	(??_Loading+1)& (0+255),b
  4058  0015C4  0E26               	movlw	38
  4059  0015C6  0100               	movlb	0	; () banked
  4060  0015C8  6FB1               	movwf	??_Loading& (0+255),b
  4061  0015CA  0E5D               	movlw	93
  4062  0015CC                     u9737:
  4063  0015CC  2EE8               	decfsz	wreg,f,c
  4064  0015CE  D7FE               	bra	u9737
  4065  0015D0  2FB1               	decfsz	??_Loading& (0+255),f,b
  4066  0015D2  D7FC               	bra	u9737
  4067  0015D4  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  4068  0015D6  D7FA               	bra	u9737
  4069  0015D8  D000               	nop2	
  4070                           
  4071                           ;sort.c: 209: LATAbits.LATA4 = 0;
  4072  0015DA  9889               	bcf	3977,4,c	;volatile
  4073                           
  4074                           ;sort.c: 210: }
  4075  0015DC  D0A6               	goto	l824
  4076  0015DE                     l7918:
  4077                           
  4078                           ;sort.c: 211: else{
  4079                           ;sort.c: 212: for(int i = 0; i<25; i++){
  4080  0015DE  0E00               	movlw	0
  4081  0015E0  0100               	movlb	0	; () banked
  4082  0015E2  6FBF               	movwf	(Loading@i_1132+1)& (0+255),b
  4083  0015E4  0E00               	movlw	0
  4084  0015E6  6FBE               	movwf	Loading@i_1132& (0+255),b
  4085                           
  4086                           ; BSR set to: 0
  4087  0015E8  0100               	movlb	0	; () banked
  4088  0015EA  BFBF               	btfsc	(Loading@i_1132+1)& (0+255),7,b
  4089  0015EC  D079               	goto	l7948
  4090  0015EE  0100               	movlb	0	; () banked
  4091  0015F0  51BF               	movf	(Loading@i_1132+1)& (0+255),w,b
  4092  0015F2  E106               	bnz	u6640
  4093  0015F4  0E19               	movlw	25
  4094  0015F6  0100               	movlb	0	; () banked
  4095  0015F8  5DBE               	subwf	Loading@i_1132& (0+255),w,b
  4096  0015FA  B0D8               	btfsc	status,0,c
  4097  0015FC  D096               	goto	l824
  4098  0015FE  D070               	goto	l7948
  4099  001600                     u6640:
  4100                           
  4101                           ; BSR set to: 0
  4102  001600  D094               	goto	l824
  4103  001602                     l830:
  4104                           
  4105                           ; BSR set to: 0
  4106                           ;sort.c: 215: LATAbits.LATA4 = 1;
  4107  001602  8889               	bsf	3977,4,c	;volatile
  4108                           
  4109                           ; BSR set to: 0
  4110                           ;sort.c: 216: _delay((unsigned long)((7500)*(32000000/4000000.0)));
  4111  001604  0E4E               	movlw	78
  4112  001606  0100               	movlb	0	; () banked
  4113  001608  6FB1               	movwf	??_Loading& (0+255),b
  4114  00160A  0EEB               	movlw	235
  4115  00160C                     u9747:
  4116  00160C  2EE8               	decfsz	wreg,f,c
  4117  00160E  D7FE               	bra	u9747
  4118  001610  2FB1               	decfsz	??_Loading& (0+255),f,b
  4119  001612  D7FC               	bra	u9747
  4120                           
  4121                           ;sort.c: 217: LATAbits.LATA4 = 0;
  4122  001614  9889               	bcf	3977,4,c	;volatile
  4123                           
  4124                           ;sort.c: 218: _delay((unsigned long)((2500)*(32000000/4000000.0)));
  4125  001616  0E1A               	movlw	26
  4126  001618  0100               	movlb	0	; () banked
  4127  00161A  6FB1               	movwf	??_Loading& (0+255),b
  4128  00161C  0EF8               	movlw	248
  4129  00161E                     u9757:
  4130  00161E  2EE8               	decfsz	wreg,f,c
  4131  001620  D7FE               	bra	u9757
  4132  001622  2FB1               	decfsz	??_Loading& (0+255),f,b
  4133  001624  D7FC               	bra	u9757
  4134  001626  D05A               	goto	L6
  4135  001628                     l832:
  4136                           
  4137                           ; BSR set to: 0
  4138                           ;sort.c: 221: LATAbits.LATA4 = 1;
  4139  001628  8889               	bsf	3977,4,c	;volatile
  4140                           
  4141                           ; BSR set to: 0
  4142                           ;sort.c: 222: _delay((unsigned long)((8000)*(32000000/4000000.0)));
  4143  00162A  0E54               	movlw	84
  4144  00162C  0100               	movlb	0	; () banked
  4145  00162E  6FB1               	movwf	??_Loading& (0+255),b
  4146  001630  0E1C               	movlw	28
  4147  001632                     u9767:
  4148  001632  2EE8               	decfsz	wreg,f,c
  4149  001634  D7FE               	bra	u9767
  4150  001636  2FB1               	decfsz	??_Loading& (0+255),f,b
  4151  001638  D7FC               	bra	u9767
  4152  00163A  F000               	nop	
  4153                           
  4154                           ;sort.c: 223: LATAbits.LATA4 = 0;
  4155  00163C  9889               	bcf	3977,4,c	;volatile
  4156                           
  4157                           ;sort.c: 224: _delay((unsigned long)((2000)*(32000000/4000000.0)));
  4158  00163E  0E15               	movlw	21
  4159  001640  0100               	movlb	0	; () banked
  4160  001642  6FB1               	movwf	??_Loading& (0+255),b
  4161  001644  0EC6               	movlw	198
  4162  001646                     u9777:
  4163  001646  2EE8               	decfsz	wreg,f,c
  4164  001648  D7FE               	bra	u9777
  4165  00164A  2FB1               	decfsz	??_Loading& (0+255),f,b
  4166  00164C  D7FC               	bra	u9777
  4167  00164E  D046               	goto	L6
  4168  001650                     l833:
  4169                           
  4170                           ; BSR set to: 0
  4171                           ;sort.c: 227: LATAbits.LATA4 = 1;
  4172  001650  8889               	bsf	3977,4,c	;volatile
  4173                           
  4174                           ; BSR set to: 0
  4175                           ;sort.c: 228: _delay((unsigned long)((8500)*(32000000/4000000.0)));
  4176  001652  0E59               	movlw	89
  4177  001654  0100               	movlb	0	; () banked
  4178  001656  6FB1               	movwf	??_Loading& (0+255),b
  4179  001658  0E4E               	movlw	78
  4180  00165A                     u9787:
  4181  00165A  2EE8               	decfsz	wreg,f,c
  4182  00165C  D7FE               	bra	u9787
  4183  00165E  2FB1               	decfsz	??_Loading& (0+255),f,b
  4184  001660  D7FC               	bra	u9787
  4185  001662  F000               	nop	
  4186                           
  4187                           ;sort.c: 229: LATAbits.LATA4 = 0;
  4188  001664  9889               	bcf	3977,4,c	;volatile
  4189                           
  4190                           ;sort.c: 230: _delay((unsigned long)((1500)*(32000000/4000000.0)));
  4191  001666  0E10               	movlw	16
  4192  001668  0100               	movlb	0	; () banked
  4193  00166A  6FB1               	movwf	??_Loading& (0+255),b
  4194  00166C  0E94               	movlw	148
  4195  00166E                     u9797:
  4196  00166E  2EE8               	decfsz	wreg,f,c
  4197  001670  D7FE               	bra	u9797
  4198  001672  2FB1               	decfsz	??_Loading& (0+255),f,b
  4199  001674  D7FC               	bra	u9797
  4200  001676  D032               	goto	L6
  4201  001678                     l834:
  4202                           
  4203                           ; BSR set to: 0
  4204                           ;sort.c: 233: LATAbits.LATA4 = 1;
  4205  001678  8889               	bsf	3977,4,c	;volatile
  4206                           
  4207                           ; BSR set to: 0
  4208                           ;sort.c: 234: _delay((unsigned long)((9000)*(32000000/4000000.0)));
  4209  00167A  0E5E               	movlw	94
  4210  00167C  0100               	movlb	0	; () banked
  4211  00167E  6FB1               	movwf	??_Loading& (0+255),b
  4212  001680  0E80               	movlw	128
  4213  001682                     u9807:
  4214  001682  2EE8               	decfsz	wreg,f,c
  4215  001684  D7FE               	bra	u9807
  4216  001686  2FB1               	decfsz	??_Loading& (0+255),f,b
  4217  001688  D7FC               	bra	u9807
  4218  00168A  F000               	nop	
  4219                           
  4220                           ;sort.c: 235: LATAbits.LATA4 = 0;
  4221  00168C  9889               	bcf	3977,4,c	;volatile
  4222                           
  4223                           ;sort.c: 236: _delay((unsigned long)((1000)*(32000000/4000000.0)));
  4224  00168E  0E0B               	movlw	11
  4225  001690  0100               	movlb	0	; () banked
  4226  001692  6FB1               	movwf	??_Loading& (0+255),b
  4227  001694  0E62               	movlw	98
  4228  001696                     u9817:
  4229  001696  2EE8               	decfsz	wreg,f,c
  4230  001698  D7FE               	bra	u9817
  4231  00169A  2FB1               	decfsz	??_Loading& (0+255),f,b
  4232  00169C  D7FC               	bra	u9817
  4233  00169E  D01E               	goto	L6
  4234  0016A0                     l835:
  4235                           
  4236                           ; BSR set to: 0
  4237                           ;sort.c: 239: LATAbits.LATA4 = 1;
  4238  0016A0  8889               	bsf	3977,4,c	;volatile
  4239                           
  4240                           ; BSR set to: 0
  4241                           ;sort.c: 240: _delay((unsigned long)((9500)*(32000000/4000000.0)));
  4242  0016A2  0E63               	movlw	99
  4243  0016A4  0100               	movlb	0	; () banked
  4244  0016A6  6FB1               	movwf	??_Loading& (0+255),b
  4245  0016A8  0EB2               	movlw	178
  4246  0016AA                     u9827:
  4247  0016AA  2EE8               	decfsz	wreg,f,c
  4248  0016AC  D7FE               	bra	u9827
  4249  0016AE  2FB1               	decfsz	??_Loading& (0+255),f,b
  4250  0016B0  D7FC               	bra	u9827
  4251  0016B2  F000               	nop	
  4252                           
  4253                           ;sort.c: 241: LATAbits.LATA4 = 0;
  4254  0016B4  9889               	bcf	3977,4,c	;volatile
  4255                           
  4256                           ;sort.c: 242: _delay((unsigned long)((5000)*(32000000/4000000.0)));
  4257  0016B6  0E34               	movlw	52
  4258  0016B8  0100               	movlb	0	; () banked
  4259  0016BA  6FB1               	movwf	??_Loading& (0+255),b
  4260  0016BC  0EF1               	movlw	241
  4261  0016BE                     u9837:
  4262  0016BE  2EE8               	decfsz	wreg,f,c
  4263  0016C0  D7FE               	bra	u9837
  4264  0016C2  2FB1               	decfsz	??_Loading& (0+255),f,b
  4265  0016C4  D7FC               	bra	u9837
  4266  0016C6  D000               	nop2	
  4267                           
  4268                           ;sort.c: 243: break;
  4269  0016C8  D026               	goto	l7950
  4270  0016CA                     l836:
  4271                           
  4272                           ; BSR set to: 0
  4273                           ;sort.c: 245: LATAbits.LATA4 = 1;
  4274  0016CA  8889               	bsf	3977,4,c	;volatile
  4275                           
  4276                           ; BSR set to: 0
  4277                           ;sort.c: 246: _delay((unsigned long)((10)*(32000000/4000.0)));
  4278  0016CC  0E68               	movlw	104
  4279  0016CE  0100               	movlb	0	; () banked
  4280  0016D0  6FB1               	movwf	??_Loading& (0+255),b
  4281  0016D2  0EE4               	movlw	228
  4282  0016D4                     u9847:
  4283  0016D4  2EE8               	decfsz	wreg,f,c
  4284  0016D6  D7FE               	bra	u9847
  4285  0016D8  2FB1               	decfsz	??_Loading& (0+255),f,b
  4286  0016DA  D7FC               	bra	u9847
  4287  0016DC                     L6:
  4288  0016DC  F000               	nop	
  4289                           
  4290                           ;sort.c: 248: }
  4291                           
  4292                           ;sort.c: 247: break;
  4293  0016DE  D01B               	goto	l7950
  4294  0016E0                     l7948:
  4295  0016E0  C0C2  F0B1         	movff	Loading@j,??_Loading
  4296  0016E4  C0C3  F0B2         	movff	Loading@j+1,??_Loading+1
  4297                           
  4298                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4299                           ; Switch size 1, requested type "space"
  4300                           ; Number of cases is 1, Range of values is 0 to 0
  4301                           ; switch strategies available:
  4302                           ; Name         Instructions Cycles
  4303                           ; simple_byte            4     3 (average)
  4304                           ;	Chosen strategy is simple_byte
  4305  0016E8  0100               	movlb	0	; () banked
  4306  0016EA  51B2               	movf	(??_Loading+1)& (0+255),w,b
  4307  0016EC  0A00               	xorlw	0	; case 0
  4308  0016EE  A4D8               	btfss	status,2,c
  4309  0016F0  D7EC               	goto	l836
  4310                           
  4311                           ; BSR set to: 0
  4312                           ; Switch size 1, requested type "space"
  4313                           ; Number of cases is 5, Range of values is 0 to 4
  4314                           ; switch strategies available:
  4315                           ; Name         Instructions Cycles
  4316                           ; simple_byte           16     9 (average)
  4317                           ;	Chosen strategy is simple_byte
  4318  0016F2  0100               	movlb	0	; () banked
  4319  0016F4  51B1               	movf	??_Loading& (0+255),w,b
  4320  0016F6  0A00               	xorlw	0	; case 0
  4321  0016F8  B4D8               	btfsc	status,2,c
  4322  0016FA  D783               	goto	l830
  4323  0016FC  0A01               	xorlw	1	; case 1
  4324  0016FE  B4D8               	btfsc	status,2,c
  4325  001700  D793               	goto	l832
  4326  001702  0A03               	xorlw	3	; case 2
  4327  001704  B4D8               	btfsc	status,2,c
  4328  001706  D7A4               	goto	l833
  4329  001708  0A01               	xorlw	1	; case 3
  4330  00170A  B4D8               	btfsc	status,2,c
  4331  00170C  D7B5               	goto	l834
  4332  00170E  0A07               	xorlw	7	; case 4
  4333  001710  B4D8               	btfsc	status,2,c
  4334  001712  D7C6               	goto	l835
  4335  001714  D7DA               	goto	l836
  4336  001716                     l7950:
  4337  001716  0100               	movlb	0	; () banked
  4338  001718  4BBE               	infsnz	Loading@i_1132& (0+255),f,b
  4339  00171A  2BBF               	incf	(Loading@i_1132+1)& (0+255),f,b
  4340                           
  4341                           ; BSR set to: 0
  4342  00171C  0100               	movlb	0	; () banked
  4343  00171E  BFBF               	btfsc	(Loading@i_1132+1)& (0+255),7,b
  4344  001720  D7DF               	goto	l7948
  4345  001722  0100               	movlb	0	; () banked
  4346  001724  51BF               	movf	(Loading@i_1132+1)& (0+255),w,b
  4347  001726  E101               	bnz	l824
  4348  001728  D765               	goto	L7
  4349  00172A                     l824:
  4350                           
  4351                           ;sort.c: 249: }
  4352                           ;sort.c: 250: }
  4353                           ;sort.c: 251: }
  4354                           ;sort.c: 252: LATAbits.LATA4 = 0;
  4355  00172A  9889               	bcf	3977,4,c	;volatile
  4356                           
  4357                           ;sort.c: 253: j++;
  4358  00172C  0100               	movlb	0	; () banked
  4359  00172E  4BC2               	infsnz	Loading@j& (0+255),f,b
  4360  001730  2BC3               	incf	(Loading@j+1)& (0+255),f,b
  4361  001732                     l7956:
  4362                           
  4363                           ; BSR set to: 0
  4364                           ;sort.c: 254: }
  4365                           ;sort.c: 256: if(!IR_signal){
  4366  001732  0100               	movlb	0	; () banked
  4367  001734  51E0               	movf	_IR_signal& (0+255),w,b
  4368  001736  0100               	movlb	0	; () banked
  4369  001738  11E1               	iorwf	(_IR_signal+1)& (0+255),w,b
  4370  00173A  A4D8               	btfss	status,2,c
  4371  00173C  D016               	goto	l7968
  4372                           
  4373                           ; BSR set to: 0
  4374                           ;sort.c: 257: _delay((unsigned long)((500)*(32000000/4000.0)));
  4375  00173E  0E15               	movlw	21
  4376  001740  0100               	movlb	0	; () banked
  4377  001742  6FB2               	movwf	(??_Loading+1)& (0+255),b
  4378  001744  0E4B               	movlw	75
  4379  001746  0100               	movlb	0	; () banked
  4380  001748  6FB1               	movwf	??_Loading& (0+255),b
  4381  00174A  0EBE               	movlw	190
  4382  00174C                     u9857:
  4383  00174C  2EE8               	decfsz	wreg,f,c
  4384  00174E  D7FE               	bra	u9857
  4385  001750  2FB1               	decfsz	??_Loading& (0+255),f,b
  4386  001752  D7FC               	bra	u9857
  4387  001754  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  4388  001756  D7FA               	bra	u9857
  4389  001758  F000               	nop	
  4390                           
  4391                           ;sort.c: 258: readIR();
  4392  00175A  ECB3  F029         	call	_readIR	;wreg free
  4393                           
  4394                           ;sort.c: 259: if(IR_signal==1){
  4395  00175E  0100               	movlb	0	; () banked
  4396  001760  05E0               	decf	_IR_signal& (0+255),w,b
  4397  001762  0100               	movlb	0	; () banked
  4398  001764  11E1               	iorwf	(_IR_signal+1)& (0+255),w,b
  4399  001766  A4D8               	btfss	status,2,c
  4400  001768  D006               	goto	l840
  4401  00176A                     l7968:
  4402                           
  4403                           ; BSR set to: 0
  4404  00176A  0100               	movlb	0	; () banked
  4405  00176C  05E0               	decf	_IR_signal& (0+255),w,b
  4406  00176E  0100               	movlb	0	; () banked
  4407  001770  11E1               	iorwf	(_IR_signal+1)& (0+255),w,b
  4408  001772  B4D8               	btfsc	status,2,c
  4409  001774  D6A9               	goto	l7884
  4410  001776                     l840:
  4411                           
  4412                           ; BSR set to: 0
  4413                           ;sort.c: 264: }
  4414                           ;sort.c: 265: }
  4415                           ;sort.c: 266: }
  4416                           ;sort.c: 267: LATBbits.LATB2 = 0;
  4417  001776  948A               	bcf	3978,2,c	;volatile
  4418  001778                     l7970:
  4419                           
  4420                           ; BSR set to: 0
  4421                           ;sort.c: 268: }
  4422                           ;sort.c: 269: f_can_coming_to_ID = 1;
  4423  001778  0E00               	movlw	0
  4424  00177A  0101               	movlb	1	; () banked
  4425  00177C  6F3A               	movwf	(_f_can_coming_to_ID+1)& (0+255),b
  4426  00177E  0E01               	movlw	1
  4427  001780  6F39               	movwf	_f_can_coming_to_ID& (0+255),b
  4428                           
  4429                           ; BSR set to: 1
  4430                           
  4431                           ; BSR set to: 1
  4432  001782  0012               	return	
  4433  001784                     __end_of_Loading:
  4434                           	opt stack 0
  4435                           tblptru	equ	0xFF8
  4436                           tblptrh	equ	0xFF7
  4437                           tblptrl	equ	0xFF6
  4438                           tablat	equ	0xFF5
  4439                           prodh	equ	0xFF4
  4440                           prodl	equ	0xFF3
  4441                           postinc0	equ	0xFEE
  4442                           wreg	equ	0xFE8
  4443                           postdec1	equ	0xFE5
  4444                           fsr1l	equ	0xFE1
  4445                           status	equ	0xFD8
  4446                           
  4447 ;; *************** function _initSortTimer *****************
  4448 ;; Defined at:
  4449 ;;		line 431 in file "sort.c"
  4450 ;; Parameters:    Size  Location     Type
  4451 ;;		None
  4452 ;; Auto vars:     Size  Location     Type
  4453 ;;  i               2    8[BANK0 ] int 
  4454 ;; Return value:  Size  Location     Type
  4455 ;;                  1    wreg      void 
  4456 ;; Registers used:
  4457 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4458 ;; Tracked objects:
  4459 ;;		On entry : 0/0
  4460 ;;		On exit  : 0/0
  4461 ;;		Unchanged: 0/0
  4462 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4463 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4464 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4465 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4466 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4467 ;;Total ram usage:        5 bytes
  4468 ;; Hardware stack levels used:    1
  4469 ;; Hardware stack levels required when called:   10
  4470 ;; This function calls:
  4471 ;;		_getRTC
  4472 ;; This function is called by:
  4473 ;;		_Loading
  4474 ;; This function uses a non-reentrant model
  4475 ;;
  4476                           
  4477                           	psect	text3
  4478  004A76                     __ptext3:
  4479                           	opt stack 0
  4480  004A76                     _initSortTimer:
  4481                           	opt stack 18
  4482                           
  4483                           ;sort.c: 433: getRTC();
  4484                           
  4485                           ;incstack = 0
  4486  004A76  EC27  F026         	call	_getRTC	;wreg free
  4487                           
  4488                           ;sort.c: 434: for(int i = 0; i < 7; i++){
  4489  004A7A  0E00               	movlw	0
  4490  004A7C  0100               	movlb	0	; () banked
  4491  004A7E  6F89               	movwf	(initSortTimer@i+1)& (0+255),b
  4492  004A80  0E00               	movlw	0
  4493  004A82  6F88               	movwf	initSortTimer@i& (0+255),b
  4494  004A84                     l7276:
  4495                           
  4496                           ; BSR set to: 0
  4497  004A84  0100               	movlb	0	; () banked
  4498  004A86  BF89               	btfsc	(initSortTimer@i+1)& (0+255),7,b
  4499  004A88  D008               	goto	l7280
  4500  004A8A  0100               	movlb	0	; () banked
  4501  004A8C  5189               	movf	(initSortTimer@i+1)& (0+255),w,b
  4502  004A8E  E140               	bnz	l7286
  4503  004A90  0E07               	movlw	7
  4504  004A92  0100               	movlb	0	; () banked
  4505  004A94  5D88               	subwf	initSortTimer@i& (0+255),w,b
  4506  004A96  B0D8               	btfsc	status,0,c
  4507  004A98  D03B               	goto	l7286
  4508  004A9A                     l7280:
  4509                           
  4510                           ; BSR set to: 0
  4511                           ;sort.c: 435: startTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  4512  004A9A  0E24               	movlw	low _time
  4513  004A9C  0100               	movlb	0	; () banked
  4514  004A9E  2588               	addwf	initSortTimer@i& (0+255),w,b
  4515  004AA0  6ED9               	movwf	fsr2l,c
  4516  004AA2  0E01               	movlw	high _time
  4517  004AA4  0100               	movlb	0	; () banked
  4518  004AA6  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  4519  004AA8  6EDA               	movwf	fsr2h,c
  4520  004AAA  50DF               	movf	indf2,w,c
  4521  004AAC  0100               	movlb	0	; () banked
  4522  004AAE  6F85               	movwf	??_initSortTimer& (0+255),b
  4523  004AB0  0100               	movlb	0	; () banked
  4524  004AB2  3B85               	swapf	??_initSortTimer& (0+255),f,b
  4525  004AB4  0E0F               	movlw	15
  4526  004AB6  1785               	andwf	??_initSortTimer& (0+255),f,b
  4527  004AB8  0E0F               	movlw	15
  4528  004ABA  0100               	movlb	0	; () banked
  4529  004ABC  1785               	andwf	??_initSortTimer& (0+255),f,b
  4530  004ABE  0100               	movlb	0	; () banked
  4531  004AC0  5185               	movf	??_initSortTimer& (0+255),w,b
  4532  004AC2  0D0A               	mullw	10
  4533  004AC4  0E24               	movlw	low _time
  4534  004AC6  0100               	movlb	0	; () banked
  4535  004AC8  2588               	addwf	initSortTimer@i& (0+255),w,b
  4536  004ACA  6ED9               	movwf	fsr2l,c
  4537  004ACC  0E01               	movlw	high _time
  4538  004ACE  0100               	movlb	0	; () banked
  4539  004AD0  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  4540  004AD2  6EDA               	movwf	fsr2h,c
  4541  004AD4  50DF               	movf	indf2,w,c
  4542  004AD6  0B0F               	andlw	15
  4543  004AD8  0100               	movlb	0	; () banked
  4544  004ADA  6F86               	movwf	(??_initSortTimer+1)& (0+255),b
  4545  004ADC  6B87               	clrf	(??_initSortTimer+2)& (0+255),b
  4546  004ADE  50F3               	movf	prodl,w,c
  4547  004AE0  0100               	movlb	0	; () banked
  4548  004AE2  2786               	addwf	(??_initSortTimer+1)& (0+255),f,b
  4549  004AE4  50F4               	movf	prodh,w,c
  4550  004AE6  0100               	movlb	0	; () banked
  4551  004AE8  2387               	addwfc	(??_initSortTimer+2)& (0+255),f,b
  4552  004AEA  90D8               	bcf	status,0,c
  4553  004AEC  0100               	movlb	0	; () banked
  4554  004AEE  3588               	rlcf	initSortTimer@i& (0+255),w,b
  4555  004AF0  6ED9               	movwf	fsr2l,c
  4556  004AF2  0100               	movlb	0	; () banked
  4557  004AF4  3589               	rlcf	(initSortTimer@i+1)& (0+255),w,b
  4558  004AF6  6EDA               	movwf	fsr2h,c
  4559  004AF8  0E0E               	movlw	low _startTime
  4560  004AFA  26D9               	addwf	fsr2l,f,c
  4561  004AFC  0E01               	movlw	high _startTime
  4562  004AFE  22DA               	addwfc	fsr2h,f,c
  4563  004B00  C086  FFDE         	movff	??_initSortTimer+1,postinc2
  4564  004B04  C087  FFDD         	movff	??_initSortTimer+2,postdec2
  4565                           
  4566                           ; BSR set to: 0
  4567  004B08  0100               	movlb	0	; () banked
  4568  004B0A  4B88               	infsnz	initSortTimer@i& (0+255),f,b
  4569  004B0C  2B89               	incf	(initSortTimer@i+1)& (0+255),f,b
  4570  004B0E  D7BA               	goto	l7276
  4571  004B10                     l7286:
  4572                           
  4573                           ; BSR set to: 0
  4574                           ;sort.c: 436: }
  4575                           ;sort.c: 438: T0CON = 0b00010111;
  4576  004B10  0E17               	movlw	23
  4577  004B12  6ED5               	movwf	4053,c	;volatile
  4578                           
  4579                           ;sort.c: 447: TMR0H = 0b10000101;
  4580  004B14  0E85               	movlw	133
  4581  004B16  6ED7               	movwf	4055,c	;volatile
  4582                           
  4583                           ;sort.c: 448: TMR0L = 0b11101110;
  4584  004B18  0EEE               	movlw	238
  4585  004B1A  6ED6               	movwf	4054,c	;volatile
  4586                           
  4587                           ; BSR set to: 0
  4588                           ;sort.c: 449: TMR0ON = 1;
  4589  004B1C  8ED5               	bsf	4053,7,c	;volatile
  4590                           
  4591                           ; BSR set to: 0
  4592  004B1E  0012               	return		;funcret
  4593  004B20                     __end_of_initSortTimer:
  4594                           	opt stack 0
  4595                           tblptru	equ	0xFF8
  4596                           tblptrh	equ	0xFF7
  4597                           tblptrl	equ	0xFF6
  4598                           tablat	equ	0xFF5
  4599                           prodh	equ	0xFF4
  4600                           prodl	equ	0xFF3
  4601                           postinc0	equ	0xFEE
  4602                           wreg	equ	0xFE8
  4603                           postdec1	equ	0xFE5
  4604                           fsr1l	equ	0xFE1
  4605                           indf2	equ	0xFDF
  4606                           postinc2	equ	0xFDE
  4607                           postdec2	equ	0xFDD
  4608                           fsr2h	equ	0xFDA
  4609                           fsr2l	equ	0xFD9
  4610                           status	equ	0xFD8
  4611                           
  4612 ;; *************** function _initGlobalVars *****************
  4613 ;; Defined at:
  4614 ;;		line 399 in file "sort.c"
  4615 ;; Parameters:    Size  Location     Type
  4616 ;;		None
  4617 ;; Auto vars:     Size  Location     Type
  4618 ;;		None
  4619 ;; Return value:  Size  Location     Type
  4620 ;;                  1    wreg      void 
  4621 ;; Registers used:
  4622 ;;		wreg, status,2
  4623 ;; Tracked objects:
  4624 ;;		On entry : 0/0
  4625 ;;		On exit  : 0/0
  4626 ;;		Unchanged: 0/0
  4627 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4628 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4629 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4630 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4631 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4632 ;;Total ram usage:        0 bytes
  4633 ;; Hardware stack levels used:    1
  4634 ;; Hardware stack levels required when called:    7
  4635 ;; This function calls:
  4636 ;;		Nothing
  4637 ;; This function is called by:
  4638 ;;		_Loading
  4639 ;; This function uses a non-reentrant model
  4640 ;;
  4641                           
  4642                           	psect	text4
  4643  00483E                     __ptext4:
  4644                           	opt stack 0
  4645  00483E                     _initGlobalVars:
  4646                           	opt stack 21
  4647                           
  4648                           ;sort.c: 401: first = 0;
  4649                           
  4650                           ; BSR set to: 0
  4651                           ;incstack = 0
  4652  00483E  0E00               	movlw	0
  4653  004840  0101               	movlb	1	; () banked
  4654  004842  6F42               	movwf	(_first+1)& (0+255),b
  4655  004844  0E00               	movlw	0
  4656  004846  6F41               	movwf	_first& (0+255),b
  4657                           
  4658                           ;sort.c: 404: f_loadingNewCan = 0;
  4659  004848  0E00               	movlw	0
  4660  00484A  0100               	movlb	0	; () banked
  4661  00484C  6FED               	movwf	(_f_loadingNewCan+1)& (0+255),b
  4662  00484E  0E00               	movlw	0
  4663  004850  6FEC               	movwf	_f_loadingNewCan& (0+255),b
  4664                           
  4665                           ;sort.c: 405: f_lastCan = 0;
  4666  004852  0E00               	movlw	0
  4667  004854  0100               	movlb	0	; () banked
  4668  004856  6FEB               	movwf	(_f_lastCan+1)& (0+255),b
  4669  004858  0E00               	movlw	0
  4670  00485A  6FEA               	movwf	_f_lastCan& (0+255),b
  4671                           
  4672                           ;sort.c: 406: f_ID_receive = 1;
  4673  00485C  0E00               	movlw	0
  4674  00485E  0101               	movlb	1	; () banked
  4675  004860  6F38               	movwf	(_f_ID_receive+1)& (0+255),b
  4676  004862  0E01               	movlw	1
  4677  004864  6F37               	movwf	_f_ID_receive& (0+255),b
  4678                           
  4679                           ;sort.c: 407: f_can_coming_to_ID = 0;
  4680  004866  0E00               	movlw	0
  4681  004868  0101               	movlb	1	; () banked
  4682  00486A  6F3A               	movwf	(_f_can_coming_to_ID+1)& (0+255),b
  4683  00486C  0E00               	movlw	0
  4684  00486E  6F39               	movwf	_f_can_coming_to_ID& (0+255),b
  4685                           
  4686                           ;sort.c: 408: f_can_coming_to_distribution = 0;
  4687  004870  0E00               	movlw	0
  4688  004872  0101               	movlb	1	; () banked
  4689  004874  6F3C               	movwf	(_f_can_coming_to_distribution+1)& (0+255),b
  4690  004876  0E00               	movlw	0
  4691  004878  6F3B               	movwf	_f_can_coming_to_distribution& (0+255),b
  4692                           
  4693                           ;sort.c: 409: f_can_distributed = 1;
  4694  00487A  0E00               	movlw	0
  4695  00487C  0101               	movlb	1	; () banked
  4696  00487E  6F3E               	movwf	(_f_can_distributed+1)& (0+255),b
  4697  004880  0E01               	movlw	1
  4698  004882  6F3D               	movwf	_f_can_distributed& (0+255),b
  4699                           
  4700                           ;sort.c: 410: f_most_recent_sort_time = 0;
  4701  004884  0E00               	movlw	0
  4702  004886  0101               	movlb	1	; () banked
  4703  004888  6F40               	movwf	(_f_most_recent_sort_time+1)& (0+255),b
  4704  00488A  0E00               	movlw	0
  4705  00488C  6F3F               	movwf	_f_most_recent_sort_time& (0+255),b
  4706                           
  4707                           ;sort.c: 413: count_total = 0;
  4708  00488E  0E00               	movlw	0
  4709  004890  0100               	movlb	0	; () banked
  4710  004892  6FFF               	movwf	(_count_total+1)& (0+255),b
  4711  004894  0E00               	movlw	0
  4712  004896  6FFE               	movwf	_count_total& (0+255),b
  4713                           
  4714                           ;sort.c: 414: count_pop_no_tab = 0;
  4715  004898  0E00               	movlw	0
  4716  00489A  0101               	movlb	1	; () banked
  4717  00489C  6F30               	movwf	(_count_pop_no_tab+1)& (0+255),b
  4718  00489E  0E00               	movlw	0
  4719  0048A0  6F2F               	movwf	_count_pop_no_tab& (0+255),b
  4720                           
  4721                           ;sort.c: 415: count_pop_w_tab = 0;
  4722  0048A2  0E00               	movlw	0
  4723  0048A4  0101               	movlb	1	; () banked
  4724  0048A6  6F32               	movwf	(_count_pop_w_tab+1)& (0+255),b
  4725  0048A8  0E00               	movlw	0
  4726  0048AA  6F31               	movwf	_count_pop_w_tab& (0+255),b
  4727                           
  4728                           ;sort.c: 416: count_can_w_lab = 0;
  4729  0048AC  0E00               	movlw	0
  4730  0048AE  0101               	movlb	1	; () banked
  4731  0048B0  6F2E               	movwf	(_count_can_w_lab+1)& (0+255),b
  4732  0048B2  0E00               	movlw	0
  4733  0048B4  6F2D               	movwf	_count_can_w_lab& (0+255),b
  4734                           
  4735                           ;sort.c: 417: count_can_no_lab = 0;
  4736  0048B6  0E00               	movlw	0
  4737  0048B8  0101               	movlb	1	; () banked
  4738  0048BA  6F2C               	movwf	(_count_can_no_lab+1)& (0+255),b
  4739  0048BC  0E00               	movlw	0
  4740  0048BE  6F2B               	movwf	_count_can_no_lab& (0+255),b
  4741                           
  4742                           ;sort.c: 420: most_recent_sort_time = 999;
  4743  0048C0  0E03               	movlw	3
  4744  0048C2  6E6A               	movwf	_most_recent_sort_time+1,c
  4745  0048C4  0EE7               	movlw	231
  4746  0048C6  6E69               	movwf	_most_recent_sort_time,c
  4747                           
  4748                           ;sort.c: 423: servo_timer_counter = 0;
  4749  0048C8  0E00               	movlw	0
  4750  0048CA  6E6E               	movwf	_servo_timer_counter+1,c	;volatile
  4751  0048CC  0E00               	movlw	0
  4752  0048CE  6E6D               	movwf	_servo_timer_counter,c	;volatile
  4753                           
  4754                           ;sort.c: 424: servo_timer_target = 9999;
  4755  0048D0  0E27               	movlw	39
  4756  0048D2  6E70               	movwf	_servo_timer_target+1,c	;volatile
  4757  0048D4  0E0F               	movlw	15
  4758  0048D6  6E6F               	movwf	_servo_timer_target,c	;volatile
  4759                           
  4760                           ;sort.c: 425: timer2_counter = 0;
  4761  0048D8  0E00               	movlw	0
  4762  0048DA  6E74               	movwf	_timer2_counter+1,c	;volatile
  4763  0048DC  0E00               	movlw	0
  4764  0048DE  6E73               	movwf	_timer2_counter,c	;volatile
  4765                           
  4766                           ;sort.c: 426: f_arm_position = 0;
  4767  0048E0  0E00               	movlw	0
  4768  0048E2  0100               	movlb	0	; () banked
  4769  0048E4  6FE9               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
  4770  0048E6  0E00               	movlw	0
  4771  0048E8  6FE8               	movwf	_f_arm_position& (0+255),b	;volatile
  4772                           
  4773                           ; BSR set to: 0
  4774                           ;sort.c: 427: pan_servo_state = -1;
  4775  0048EA  686B               	setf	_pan_servo_state,c	;volatile
  4776  0048EC  686C               	setf	_pan_servo_state+1,c	;volatile
  4777                           
  4778                           ; BSR set to: 0
  4779                           ;sort.c: 428: tilt_servo_state = -1;
  4780  0048EE  6871               	setf	_tilt_servo_state,c	;volatile
  4781  0048F0  6872               	setf	_tilt_servo_state+1,c	;volatile
  4782                           
  4783                           ;sort.c: 429: f_panning_to_bin = 0;
  4784  0048F2  0E00               	movlw	0
  4785  0048F4  6E62               	movwf	_f_panning_to_bin+1,c	;volatile
  4786  0048F6  0E00               	movlw	0
  4787  0048F8  6E61               	movwf	_f_panning_to_bin,c	;volatile
  4788                           
  4789                           ; BSR set to: 0
  4790  0048FA  0012               	return		;funcret
  4791  0048FC                     __end_of_initGlobalVars:
  4792                           	opt stack 0
  4793                           tblptru	equ	0xFF8
  4794                           tblptrh	equ	0xFF7
  4795                           tblptrl	equ	0xFF6
  4796                           tablat	equ	0xFF5
  4797                           prodh	equ	0xFF4
  4798                           prodl	equ	0xFF3
  4799                           postinc0	equ	0xFEE
  4800                           wreg	equ	0xFE8
  4801                           postdec1	equ	0xFE5
  4802                           fsr1l	equ	0xFE1
  4803                           indf2	equ	0xFDF
  4804                           postinc2	equ	0xFDE
  4805                           postdec2	equ	0xFDD
  4806                           fsr2h	equ	0xFDA
  4807                           fsr2l	equ	0xFD9
  4808                           status	equ	0xFD8
  4809                           
  4810 ;; *************** function _getMAG *****************
  4811 ;; Defined at:
  4812 ;;		line 528 in file "sort.c"
  4813 ;; Parameters:    Size  Location     Type
  4814 ;;		None
  4815 ;; Auto vars:     Size  Location     Type
  4816 ;;		None
  4817 ;; Return value:  Size  Location     Type
  4818 ;;                  1    wreg      void 
  4819 ;; Registers used:
  4820 ;;		wreg, status,2, status,0, cstack
  4821 ;; Tracked objects:
  4822 ;;		On entry : 0/0
  4823 ;;		On exit  : 0/0
  4824 ;;		Unchanged: 0/0
  4825 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4826 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4827 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4828 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4829 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4830 ;;Total ram usage:        2 bytes
  4831 ;; Hardware stack levels used:    1
  4832 ;; Hardware stack levels required when called:    9
  4833 ;; This function calls:
  4834 ;;		_readMAG
  4835 ;; This function is called by:
  4836 ;;		_Loading
  4837 ;; This function uses a non-reentrant model
  4838 ;;
  4839                           
  4840                           	psect	text5
  4841  00562C                     __ptext5:
  4842                           	opt stack 0
  4843  00562C                     _getMAG:
  4844                           	opt stack 19
  4845                           
  4846                           ;sort.c: 529: readMAG();
  4847                           
  4848                           ; BSR set to: 0
  4849                           ;incstack = 0
  4850  00562C  ECFF  F029         	call	_readMAG	;wreg free
  4851                           
  4852                           ;sort.c: 531: if(MAG_signal==1){
  4853  005630  0100               	movlb	0	; () banked
  4854  005632  05E2               	decf	_MAG_signal& (0+255),w,b
  4855  005634  0100               	movlb	0	; () banked
  4856  005636  11E3               	iorwf	(_MAG_signal+1)& (0+255),w,b
  4857  005638  A4D8               	btfss	status,2,c
  4858  00563A  0012               	return	
  4859                           
  4860                           ; BSR set to: 0
  4861                           ;sort.c: 532: _delay((unsigned long)((500)*(32000000/4000.0)));
  4862  00563C  0E15               	movlw	21
  4863  00563E  0100               	movlb	0	; () banked
  4864  005640  6F87               	movwf	(??_getMAG+1)& (0+255),b
  4865  005642  0E4B               	movlw	75
  4866  005644  0100               	movlb	0	; () banked
  4867  005646  6F86               	movwf	??_getMAG& (0+255),b
  4868  005648  0EBE               	movlw	190
  4869  00564A                     u9867:
  4870  00564A  2EE8               	decfsz	wreg,f,c
  4871  00564C  D7FE               	bra	u9867
  4872  00564E  2F86               	decfsz	??_getMAG& (0+255),f,b
  4873  005650  D7FC               	bra	u9867
  4874  005652  2F87               	decfsz	(??_getMAG+1)& (0+255),f,b
  4875  005654  D7FA               	bra	u9867
  4876  005656  F000               	nop	
  4877                           
  4878                           ;sort.c: 533: readMAG();
  4879  005658  ECFF  F029         	call	_readMAG	;wreg free
  4880  00565C  0012               	return	
  4881  00565E                     __end_of_getMAG:
  4882                           	opt stack 0
  4883                           tblptru	equ	0xFF8
  4884                           tblptrh	equ	0xFF7
  4885                           tblptrl	equ	0xFF6
  4886                           tablat	equ	0xFF5
  4887                           prodh	equ	0xFF4
  4888                           prodl	equ	0xFF3
  4889                           postinc0	equ	0xFEE
  4890                           wreg	equ	0xFE8
  4891                           postdec1	equ	0xFE5
  4892                           fsr1l	equ	0xFE1
  4893                           indf2	equ	0xFDF
  4894                           postinc2	equ	0xFDE
  4895                           postdec2	equ	0xFDD
  4896                           fsr2h	equ	0xFDA
  4897                           fsr2l	equ	0xFD9
  4898                           status	equ	0xFD8
  4899                           
  4900 ;; *************** function _getIR *****************
  4901 ;; Defined at:
  4902 ;;		line 512 in file "sort.c"
  4903 ;; Parameters:    Size  Location     Type
  4904 ;;		None
  4905 ;; Auto vars:     Size  Location     Type
  4906 ;;  i               2    7[BANK0 ] int 
  4907 ;; Return value:  Size  Location     Type
  4908 ;;                  1    wreg      void 
  4909 ;; Registers used:
  4910 ;;		wreg, status,2, status,0, cstack
  4911 ;; Tracked objects:
  4912 ;;		On entry : 0/0
  4913 ;;		On exit  : 0/0
  4914 ;;		Unchanged: 0/0
  4915 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4916 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4917 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4918 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4919 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4920 ;;Total ram usage:        3 bytes
  4921 ;; Hardware stack levels used:    1
  4922 ;; Hardware stack levels required when called:    9
  4923 ;; This function calls:
  4924 ;;		_readIR
  4925 ;; This function is called by:
  4926 ;;		_Loading
  4927 ;; This function uses a non-reentrant model
  4928 ;;
  4929                           
  4930                           	psect	text6
  4931  004ECE                     __ptext6:
  4932                           	opt stack 0
  4933  004ECE                     _getIR:
  4934                           	opt stack 19
  4935                           
  4936                           ;sort.c: 513: readIR();
  4937                           
  4938                           ;incstack = 0
  4939  004ECE  ECB3  F029         	call	_readIR	;wreg free
  4940                           
  4941                           ;sort.c: 514: for(int i = 0; i < 150; i++){
  4942  004ED2  0E00               	movlw	0
  4943  004ED4  0100               	movlb	0	; () banked
  4944  004ED6  6F88               	movwf	(getIR@i+1)& (0+255),b
  4945  004ED8  0E00               	movlw	0
  4946  004EDA  6F87               	movwf	getIR@i& (0+255),b
  4947  004EDC                     l7376:
  4948                           
  4949                           ; BSR set to: 0
  4950  004EDC  0100               	movlb	0	; () banked
  4951  004EDE  BF88               	btfsc	(getIR@i+1)& (0+255),7,b
  4952  004EE0  D008               	goto	l7380
  4953  004EE2  0100               	movlb	0	; () banked
  4954  004EE4  5188               	movf	(getIR@i+1)& (0+255),w,b
  4955  004EE6  E11A               	bnz	l7392
  4956  004EE8  0E96               	movlw	150
  4957  004EEA  0100               	movlb	0	; () banked
  4958  004EEC  5D87               	subwf	getIR@i& (0+255),w,b
  4959  004EEE  B0D8               	btfsc	status,0,c
  4960  004EF0  D015               	goto	l7392
  4961  004EF2                     l7380:
  4962                           
  4963                           ; BSR set to: 0
  4964                           ;sort.c: 515: _delay((unsigned long)((500)*(32000000/4000000.0)));
  4965  004EF2  0E06               	movlw	6
  4966  004EF4  0100               	movlb	0	; () banked
  4967  004EF6  6F86               	movwf	??_getIR& (0+255),b
  4968  004EF8  0E30               	movlw	48
  4969  004EFA                     u9877:
  4970  004EFA  2EE8               	decfsz	wreg,f,c
  4971  004EFC  D7FE               	bra	u9877
  4972  004EFE  2F86               	decfsz	??_getIR& (0+255),f,b
  4973  004F00  D7FC               	bra	u9877
  4974  004F02  F000               	nop	
  4975                           
  4976                           ;sort.c: 516: readIR();
  4977  004F04  ECB3  F029         	call	_readIR	;wreg free
  4978                           
  4979                           ;sort.c: 517: if(!IR_signal){
  4980  004F08  0100               	movlb	0	; () banked
  4981  004F0A  51E0               	movf	_IR_signal& (0+255),w,b
  4982  004F0C  0100               	movlb	0	; () banked
  4983  004F0E  11E1               	iorwf	(_IR_signal+1)& (0+255),w,b
  4984  004F10  B4D8               	btfsc	status,2,c
  4985  004F12  D004               	goto	l7392
  4986                           
  4987                           ; BSR set to: 0
  4988                           
  4989                           ; BSR set to: 0
  4990                           
  4991                           ; BSR set to: 0
  4992                           ;sort.c: 518: break;
  4993  004F14  0100               	movlb	0	; () banked
  4994  004F16  4B87               	infsnz	getIR@i& (0+255),f,b
  4995  004F18  2B88               	incf	(getIR@i+1)& (0+255),f,b
  4996  004F1A  D7E0               	goto	l7376
  4997  004F1C                     l7392:
  4998                           
  4999                           ; BSR set to: 0
  5000                           ;sort.c: 519: }
  5001                           ;sort.c: 520: }
  5002                           ;sort.c: 521: if(IR_signal==1){
  5003  004F1C  0100               	movlb	0	; () banked
  5004  004F1E  05E0               	decf	_IR_signal& (0+255),w,b
  5005  004F20  0100               	movlb	0	; () banked
  5006  004F22  11E1               	iorwf	(_IR_signal+1)& (0+255),w,b
  5007  004F24  A4D8               	btfss	status,2,c
  5008  004F26  D006               	goto	l7396
  5009                           
  5010                           ; BSR set to: 0
  5011                           ;sort.c: 522: f_loadingNewCan = 1;
  5012  004F28  0E00               	movlw	0
  5013  004F2A  0100               	movlb	0	; () banked
  5014  004F2C  6FED               	movwf	(_f_loadingNewCan+1)& (0+255),b
  5015  004F2E  0E01               	movlw	1
  5016  004F30  6FEC               	movwf	_f_loadingNewCan& (0+255),b
  5017                           
  5018                           ;sort.c: 523: }
  5019  004F32  0012               	return	
  5020  004F34                     l7396:
  5021                           
  5022                           ; BSR set to: 0
  5023                           ;sort.c: 524: else{
  5024                           ;sort.c: 525: f_loadingNewCan = 0;
  5025  004F34  0E00               	movlw	0
  5026  004F36  0100               	movlb	0	; () banked
  5027  004F38  6FED               	movwf	(_f_loadingNewCan+1)& (0+255),b
  5028  004F3A  0E00               	movlw	0
  5029  004F3C  6FEC               	movwf	_f_loadingNewCan& (0+255),b
  5030  004F3E  0012               	return	
  5031  004F40                     __end_of_getIR:
  5032                           	opt stack 0
  5033                           tblptru	equ	0xFF8
  5034                           tblptrh	equ	0xFF7
  5035                           tblptrl	equ	0xFF6
  5036                           tablat	equ	0xFF5
  5037                           prodh	equ	0xFF4
  5038                           prodl	equ	0xFF3
  5039                           postinc0	equ	0xFEE
  5040                           wreg	equ	0xFE8
  5041                           postdec1	equ	0xFE5
  5042                           fsr1l	equ	0xFE1
  5043                           indf2	equ	0xFDF
  5044                           postinc2	equ	0xFDE
  5045                           postdec2	equ	0xFDD
  5046                           fsr2h	equ	0xFDA
  5047                           fsr2l	equ	0xFD9
  5048                           status	equ	0xFD8
  5049                           
  5050 ;; *************** function _readIR *****************
  5051 ;; Defined at:
  5052 ;;		line 23 in file "ADCFunctionality.c"
  5053 ;; Parameters:    Size  Location     Type
  5054 ;;		None
  5055 ;; Auto vars:     Size  Location     Type
  5056 ;;  res             2    4[BANK0 ] int 
  5057 ;; Return value:  Size  Location     Type
  5058 ;;                  1    wreg      void 
  5059 ;; Registers used:
  5060 ;;		wreg, status,2, status,0, cstack
  5061 ;; Tracked objects:
  5062 ;;		On entry : 0/0
  5063 ;;		On exit  : 0/0
  5064 ;;		Unchanged: 0/0
  5065 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5066 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5067 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5068 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5069 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5070 ;;Total ram usage:        4 bytes
  5071 ;; Hardware stack levels used:    1
  5072 ;; Hardware stack levels required when called:    8
  5073 ;; This function calls:
  5074 ;;		_readADC
  5075 ;; This function is called by:
  5076 ;;		_Loading
  5077 ;;		_getIR
  5078 ;; This function uses a non-reentrant model
  5079 ;;
  5080                           
  5081                           	psect	text7
  5082  005366                     __ptext7:
  5083                           	opt stack 0
  5084  005366                     _readIR:
  5085                           	opt stack 20
  5086                           
  5087                           ;ADCFunctionality.c: 24: readADC(0);
  5088                           
  5089                           ; BSR set to: 0
  5090                           ;incstack = 0
  5091  005366  0E00               	movlw	0
  5092  005368  EC7C  F02C         	call	_readADC
  5093                           
  5094                           ;ADCFunctionality.c: 25: int res = ADRESH<<8 | ADRESL;
  5095  00536C  50C3               	movf	4035,w,c	;volatile
  5096  00536E  CFC4 F082          	movff	4036,??_readIR	;volatile
  5097  005372  0100               	movlb	0	; () banked
  5098  005374  6B83               	clrf	(??_readIR+1)& (0+255),b
  5099  005376  C082  F083         	movff	??_readIR,??_readIR+1
  5100  00537A  0100               	movlb	0	; () banked
  5101  00537C  6B82               	clrf	??_readIR& (0+255),b
  5102  00537E  0100               	movlb	0	; () banked
  5103  005380  1182               	iorwf	??_readIR& (0+255),w,b
  5104  005382  0100               	movlb	0	; () banked
  5105  005384  6F84               	movwf	readIR@res& (0+255),b
  5106  005386  0100               	movlb	0	; () banked
  5107  005388  5183               	movf	(??_readIR+1)& (0+255),w,b
  5108  00538A  0100               	movlb	0	; () banked
  5109  00538C  6F85               	movwf	(readIR@res+1)& (0+255),b
  5110                           
  5111                           ; BSR set to: 0
  5112                           ;ADCFunctionality.c: 26: IR_signal = (res > 800) ? 1 : 0;
  5113  00538E  0100               	movlb	0	; () banked
  5114  005390  BF85               	btfsc	(readIR@res+1)& (0+255),7,b
  5115  005392  D00A               	goto	u5050
  5116  005394  0E21               	movlw	33
  5117  005396  0100               	movlb	0	; () banked
  5118  005398  5D84               	subwf	readIR@res& (0+255),w,b
  5119  00539A  0E03               	movlw	3
  5120  00539C  0100               	movlb	0	; () banked
  5121  00539E  5985               	subwfb	(readIR@res+1)& (0+255),w,b
  5122  0053A0  A0D8               	btfss	status,0,c
  5123  0053A2  D002               	goto	u5050
  5124  0053A4  0E01               	movlw	1
  5125  0053A6  D001               	goto	u5060
  5126  0053A8                     u5050:
  5127  0053A8  0E00               	movlw	0
  5128  0053AA                     u5060:
  5129  0053AA  0100               	movlb	0	; () banked
  5130  0053AC  6FE0               	movwf	_IR_signal& (0+255),b
  5131  0053AE  6BE1               	clrf	(_IR_signal+1)& (0+255),b
  5132                           
  5133                           ; BSR set to: 0
  5134  0053B0  0012               	return		;funcret
  5135  0053B2                     __end_of_readIR:
  5136                           	opt stack 0
  5137                           tblptru	equ	0xFF8
  5138                           tblptrh	equ	0xFF7
  5139                           tblptrl	equ	0xFF6
  5140                           tablat	equ	0xFF5
  5141                           prodh	equ	0xFF4
  5142                           prodl	equ	0xFF3
  5143                           postinc0	equ	0xFEE
  5144                           wreg	equ	0xFE8
  5145                           postdec1	equ	0xFE5
  5146                           fsr1l	equ	0xFE1
  5147                           indf2	equ	0xFDF
  5148                           postinc2	equ	0xFDE
  5149                           postdec2	equ	0xFDD
  5150                           fsr2h	equ	0xFDA
  5151                           fsr2l	equ	0xFD9
  5152                           status	equ	0xFD8
  5153                           
  5154 ;; *************** function _ID *****************
  5155 ;; Defined at:
  5156 ;;		line 273 in file "sort.c"
  5157 ;; Parameters:    Size  Location     Type
  5158 ;;		None
  5159 ;; Auto vars:     Size  Location     Type
  5160 ;;  i               2   53[BANK0 ] int 
  5161 ;;  i               2   50[BANK0 ] int 
  5162 ;;  i               2   48[BANK0 ] int 
  5163 ;;  i               2   46[BANK0 ] int 
  5164 ;;  n               2   59[BANK0 ] const int 
  5165 ;;  res2            2   57[BANK0 ] int 
  5166 ;;  res1            2   55[BANK0 ] int 
  5167 ;;  time            1   52[BANK0 ] const unsigned char 
  5168 ;; Return value:  Size  Location     Type
  5169 ;;                  1    wreg      void 
  5170 ;; Registers used:
  5171 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5172 ;; Tracked objects:
  5173 ;;		On entry : 0/0
  5174 ;;		On exit  : 0/0
  5175 ;;		Unchanged: 0/0
  5176 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5177 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5178 ;;      Locals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5179 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5180 ;;      Totals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5181 ;;Total ram usage:       18 bytes
  5182 ;; Hardware stack levels used:    1
  5183 ;; Hardware stack levels required when called:   10
  5184 ;; This function calls:
  5185 ;;		___awdiv
  5186 ;;		___awtoft
  5187 ;;		___ftge
  5188 ;;		_delay_ms
  5189 ;;		_lcdInst
  5190 ;;		_printf
  5191 ;;		_readCOND
  5192 ;; This function is called by:
  5193 ;;		_sort
  5194 ;; This function uses a non-reentrant model
  5195 ;;
  5196                           
  5197                           	psect	text8
  5198  001FAA                     __ptext8:
  5199                           	opt stack 0
  5200  001FAA                     _ID:
  5201                           	opt stack 19
  5202                           
  5203                           ;sort.c: 274: if(f_can_coming_to_ID){
  5204                           
  5205                           ; BSR set to: 0
  5206                           ;incstack = 0
  5207  001FAA  0101               	movlb	1	; () banked
  5208  001FAC  5139               	movf	_f_can_coming_to_ID& (0+255),w,b
  5209  001FAE  0101               	movlb	1	; () banked
  5210  001FB0  113A               	iorwf	(_f_can_coming_to_ID+1)& (0+255),w,b
  5211  001FB2  B4D8               	btfsc	status,2,c
  5212  001FB4  0012               	return	
  5213                           
  5214                           ; BSR set to: 1
  5215                           ;sort.c: 276: _delay((unsigned long)((1000)*(32000000/4000.0)));
  5216  001FB6  0E29               	movlw	41
  5217  001FB8  0100               	movlb	0	; () banked
  5218  001FBA  6FAC               	movwf	(??_ID+1)& (0+255),b
  5219  001FBC  0E96               	movlw	150
  5220  001FBE  0100               	movlb	0	; () banked
  5221  001FC0  6FAB               	movwf	??_ID& (0+255),b
  5222  001FC2  0E7F               	movlw	127
  5223  001FC4                     u9887:
  5224  001FC4  2EE8               	decfsz	wreg,f,c
  5225  001FC6  D7FE               	bra	u9887
  5226  001FC8  2FAB               	decfsz	??_ID& (0+255),f,b
  5227  001FCA  D7FC               	bra	u9887
  5228  001FCC  2FAC               	decfsz	(??_ID+1)& (0+255),f,b
  5229  001FCE  D7FA               	bra	u9887
  5230                           
  5231                           ;sort.c: 278: f_arm_position = 0;
  5232  001FD0  0E00               	movlw	0
  5233  001FD2  0100               	movlb	0	; () banked
  5234  001FD4  6FE9               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
  5235  001FD6  0E00               	movlw	0
  5236  001FD8  6FE8               	movwf	_f_arm_position& (0+255),b	;volatile
  5237                           
  5238                           ; BSR set to: 0
  5239                           ;sort.c: 280: LATAbits.LATA3 = 1;
  5240  001FDA  8689               	bsf	3977,3,c	;volatile
  5241                           
  5242                           ; BSR set to: 0
  5243                           ;sort.c: 283: const int n = 10;
  5244  001FDC  0E00               	movlw	0
  5245  001FDE  0100               	movlb	0	; () banked
  5246  001FE0  6FBC               	movwf	(ID@n+1)& (0+255),b
  5247  001FE2  0E0A               	movlw	10
  5248  001FE4  6FBB               	movwf	ID@n& (0+255),b
  5249                           
  5250                           ; BSR set to: 0
  5251                           ;sort.c: 284: const unsigned char time = (600 / n);
  5252  001FE6  0E02               	movlw	2
  5253  001FE8  0100               	movlb	0	; () banked
  5254  001FEA  6F87               	movwf	(___awdiv@dividend+1)& (0+255),b
  5255  001FEC  0E58               	movlw	88
  5256  001FEE  6F86               	movwf	___awdiv@dividend& (0+255),b
  5257  001FF0  C0BB  F088         	movff	ID@n,___awdiv@divisor
  5258  001FF4  C0BC  F089         	movff	ID@n+1,___awdiv@divisor+1
  5259  001FF8  EC7E  F024         	call	___awdiv	;wreg free
  5260  001FFC  0100               	movlb	0	; () banked
  5261  001FFE  5186               	movf	?___awdiv& (0+255),w,b
  5262  002000  0100               	movlb	0	; () banked
  5263  002002  6FB4               	movwf	ID@time& (0+255),b
  5264                           
  5265                           ; BSR set to: 0
  5266                           ;sort.c: 285: int res1 = 0;
  5267  002004  0E00               	movlw	0
  5268  002006  0100               	movlb	0	; () banked
  5269  002008  6FB8               	movwf	(ID@res1+1)& (0+255),b
  5270  00200A  0E00               	movlw	0
  5271  00200C  6FB7               	movwf	ID@res1& (0+255),b
  5272                           
  5273                           ; BSR set to: 0
  5274                           ;sort.c: 286: int res2 = 0;
  5275  00200E  0E00               	movlw	0
  5276  002010  0100               	movlb	0	; () banked
  5277  002012  6FBA               	movwf	(ID@res2+1)& (0+255),b
  5278  002014  0E00               	movlw	0
  5279  002016  6FB9               	movwf	ID@res2& (0+255),b
  5280                           
  5281                           ; BSR set to: 0
  5282                           ;sort.c: 287: for(int i = 0; i<n; i++){
  5283  002018  0E00               	movlw	0
  5284  00201A  0100               	movlb	0	; () banked
  5285  00201C  6FAF               	movwf	(ID@i+1)& (0+255),b
  5286  00201E  0E00               	movlw	0
  5287  002020  6FAE               	movwf	ID@i& (0+255),b
  5288  002022                     l7996:
  5289                           
  5290                           ; BSR set to: 0
  5291  002022  0100               	movlb	0	; () banked
  5292  002024  51BB               	movf	ID@n& (0+255),w,b
  5293  002026  0100               	movlb	0	; () banked
  5294  002028  5DAE               	subwf	ID@i& (0+255),w,b
  5295  00202A  0100               	movlb	0	; () banked
  5296  00202C  51AF               	movf	(ID@i+1)& (0+255),w,b
  5297  00202E  0A80               	xorlw	128
  5298  002030  0100               	movlb	0	; () banked
  5299  002032  6FAB               	movwf	??_ID& (0+255),b
  5300  002034  0100               	movlb	0	; () banked
  5301  002036  51BC               	movf	(ID@n+1)& (0+255),w,b
  5302  002038  0A80               	xorlw	128
  5303  00203A  0100               	movlb	0	; () banked
  5304  00203C  59AB               	subwfb	??_ID& (0+255),w,b
  5305  00203E  B0D8               	btfsc	status,0,c
  5306  002040  D012               	goto	l845
  5307                           
  5308                           ; BSR set to: 0
  5309                           ;sort.c: 288: delay_ms(time);
  5310                           
  5311                           ; BSR set to: 0
  5312                           
  5313                           ; BSR set to: 0
  5314  002042  0100               	movlb	0	; () banked
  5315  002044  51B4               	movf	ID@time& (0+255),w,b
  5316  002046  ECA7  F02C         	call	_delay_ms
  5317                           
  5318                           ;sort.c: 289: readCOND();
  5319  00204A  ECD9  F029         	call	_readCOND	;wreg free
  5320                           
  5321                           ;sort.c: 290: res1 += COND_signal;
  5322  00204E  0100               	movlb	0	; () banked
  5323  002050  51DE               	movf	_COND_signal& (0+255),w,b
  5324  002052  0100               	movlb	0	; () banked
  5325  002054  27B7               	addwf	ID@res1& (0+255),f,b
  5326  002056  0100               	movlb	0	; () banked
  5327  002058  51DF               	movf	(_COND_signal+1)& (0+255),w,b
  5328  00205A  0100               	movlb	0	; () banked
  5329  00205C  23B8               	addwfc	(ID@res1+1)& (0+255),f,b
  5330                           
  5331                           ; BSR set to: 0
  5332  00205E  0100               	movlb	0	; () banked
  5333  002060  4BAE               	infsnz	ID@i& (0+255),f,b
  5334  002062  2BAF               	incf	(ID@i+1)& (0+255),f,b
  5335  002064  D7DE               	goto	l7996
  5336  002066                     l845:
  5337                           
  5338                           ; BSR set to: 0
  5339                           ;sort.c: 291: }
  5340                           ;sort.c: 292: LATAbits.LATA3 = 0;
  5341  002066  9689               	bcf	3977,3,c	;volatile
  5342                           
  5343                           ; BSR set to: 0
  5344                           ;sort.c: 293: _delay((unsigned long)((200)*(32000000/4000.0)));
  5345  002068  0E09               	movlw	9
  5346  00206A  0100               	movlb	0	; () banked
  5347  00206C  6FAC               	movwf	(??_ID+1)& (0+255),b
  5348  00206E  0E1E               	movlw	30
  5349  002070  0100               	movlb	0	; () banked
  5350  002072  6FAB               	movwf	??_ID& (0+255),b
  5351  002074  0EE4               	movlw	228
  5352  002076                     u9897:
  5353  002076  2EE8               	decfsz	wreg,f,c
  5354  002078  D7FE               	bra	u9897
  5355  00207A  2FAB               	decfsz	??_ID& (0+255),f,b
  5356  00207C  D7FC               	bra	u9897
  5357  00207E  2FAC               	decfsz	(??_ID+1)& (0+255),f,b
  5358  002080  D7FA               	bra	u9897
  5359  002082  F000               	nop	
  5360                           
  5361                           ;sort.c: 294: LATAbits.LATA3 = 1;
  5362  002084  8689               	bsf	3977,3,c	;volatile
  5363                           
  5364                           ;sort.c: 295: for(int i = 0; i<n; i++){
  5365  002086  0E00               	movlw	0
  5366  002088  0100               	movlb	0	; () banked
  5367  00208A  6FB1               	movwf	(ID@i_1140+1)& (0+255),b
  5368  00208C  0E00               	movlw	0
  5369  00208E  6FB0               	movwf	ID@i_1140& (0+255),b
  5370  002090                     l8014:
  5371                           
  5372                           ; BSR set to: 0
  5373  002090  0100               	movlb	0	; () banked
  5374  002092  51BB               	movf	ID@n& (0+255),w,b
  5375  002094  0100               	movlb	0	; () banked
  5376  002096  5DB0               	subwf	ID@i_1140& (0+255),w,b
  5377  002098  0100               	movlb	0	; () banked
  5378  00209A  51B1               	movf	(ID@i_1140+1)& (0+255),w,b
  5379  00209C  0A80               	xorlw	128
  5380  00209E  0100               	movlb	0	; () banked
  5381  0020A0  6FAB               	movwf	??_ID& (0+255),b
  5382  0020A2  0100               	movlb	0	; () banked
  5383  0020A4  51BC               	movf	(ID@n+1)& (0+255),w,b
  5384  0020A6  0A80               	xorlw	128
  5385  0020A8  0100               	movlb	0	; () banked
  5386  0020AA  59AB               	subwfb	??_ID& (0+255),w,b
  5387  0020AC  B0D8               	btfsc	status,0,c
  5388  0020AE  D012               	goto	l8026
  5389                           
  5390                           ; BSR set to: 0
  5391                           ;sort.c: 296: delay_ms(time);
  5392                           
  5393                           ; BSR set to: 0
  5394                           
  5395                           ; BSR set to: 0
  5396  0020B0  0100               	movlb	0	; () banked
  5397  0020B2  51B4               	movf	ID@time& (0+255),w,b
  5398  0020B4  ECA7  F02C         	call	_delay_ms
  5399                           
  5400                           ;sort.c: 297: readCOND();
  5401  0020B8  ECD9  F029         	call	_readCOND	;wreg free
  5402                           
  5403                           ;sort.c: 298: res2 += COND_signal;
  5404  0020BC  0100               	movlb	0	; () banked
  5405  0020BE  51DE               	movf	_COND_signal& (0+255),w,b
  5406  0020C0  0100               	movlb	0	; () banked
  5407  0020C2  27B9               	addwf	ID@res2& (0+255),f,b
  5408  0020C4  0100               	movlb	0	; () banked
  5409  0020C6  51DF               	movf	(_COND_signal+1)& (0+255),w,b
  5410  0020C8  0100               	movlb	0	; () banked
  5411  0020CA  23BA               	addwfc	(ID@res2+1)& (0+255),f,b
  5412                           
  5413                           ; BSR set to: 0
  5414  0020CC  0100               	movlb	0	; () banked
  5415  0020CE  4BB0               	infsnz	ID@i_1140& (0+255),f,b
  5416  0020D0  2BB1               	incf	(ID@i_1140+1)& (0+255),f,b
  5417  0020D2  D7DE               	goto	l8014
  5418  0020D4                     l8026:
  5419                           
  5420                           ; BSR set to: 0
  5421                           ;sort.c: 299: }
  5422                           ;sort.c: 300: res1 = ((res1 / n) > 0.3) ? 1 : 0;
  5423  0020D4  0E9A               	movlw	154
  5424  0020D6  0100               	movlb	0	; () banked
  5425  0020D8  6F92               	movwf	___ftge@ff1& (0+255),b
  5426  0020DA  0E99               	movlw	153
  5427  0020DC  0100               	movlb	0	; () banked
  5428  0020DE  6F93               	movwf	(___ftge@ff1+1)& (0+255),b
  5429  0020E0  0E3E               	movlw	62
  5430  0020E2  0100               	movlb	0	; () banked
  5431  0020E4  6F94               	movwf	(___ftge@ff1+2)& (0+255),b
  5432  0020E6  C0BB  F088         	movff	ID@n,___awdiv@divisor
  5433  0020EA  C0BC  F089         	movff	ID@n+1,___awdiv@divisor+1
  5434  0020EE  C0B7  F086         	movff	ID@res1,___awdiv@dividend
  5435  0020F2  C0B8  F087         	movff	ID@res1+1,___awdiv@dividend+1
  5436  0020F6  EC7E  F024         	call	___awdiv	;wreg free
  5437  0020FA  C086  F08E         	movff	?___awdiv,___awtoft@c
  5438  0020FE  C087  F08F         	movff	?___awdiv+1,___awtoft@c+1
  5439  002102  EC48  F02A         	call	___awtoft	;wreg free
  5440  002106  C08E  F095         	movff	?___awtoft,___ftge@ff2
  5441  00210A  C08F  F096         	movff	?___awtoft+1,___ftge@ff2+1
  5442  00210E  C090  F097         	movff	?___awtoft+2,___ftge@ff2+2
  5443  002112  ECBB  F023         	call	___ftge	;wreg free
  5444  002116  0100               	movlb	0	; () banked
  5445  002118  B0D8               	btfsc	status,0,c
  5446  00211A  D002               	goto	u6740
  5447  00211C  0E01               	movlw	1
  5448  00211E  D001               	goto	u6750
  5449  002120                     u6740:
  5450  002120  0E00               	movlw	0
  5451  002122                     u6750:
  5452  002122  0100               	movlb	0	; () banked
  5453  002124  6FB7               	movwf	ID@res1& (0+255),b
  5454  002126  6BB8               	clrf	(ID@res1+1)& (0+255),b
  5455                           
  5456                           ;sort.c: 301: res2 = ((res2 / n) > 0.3) ? 1 : 0;
  5457  002128  0E9A               	movlw	154
  5458  00212A  0100               	movlb	0	; () banked
  5459  00212C  6F92               	movwf	___ftge@ff1& (0+255),b
  5460  00212E  0E99               	movlw	153
  5461  002130  0100               	movlb	0	; () banked
  5462  002132  6F93               	movwf	(___ftge@ff1+1)& (0+255),b
  5463  002134  0E3E               	movlw	62
  5464  002136  0100               	movlb	0	; () banked
  5465  002138  6F94               	movwf	(___ftge@ff1+2)& (0+255),b
  5466  00213A  C0BB  F088         	movff	ID@n,___awdiv@divisor
  5467  00213E  C0BC  F089         	movff	ID@n+1,___awdiv@divisor+1
  5468  002142  C0B9  F086         	movff	ID@res2,___awdiv@dividend
  5469  002146  C0BA  F087         	movff	ID@res2+1,___awdiv@dividend+1
  5470  00214A  EC7E  F024         	call	___awdiv	;wreg free
  5471  00214E  C086  F08E         	movff	?___awdiv,___awtoft@c
  5472  002152  C087  F08F         	movff	?___awdiv+1,___awtoft@c+1
  5473  002156  EC48  F02A         	call	___awtoft	;wreg free
  5474  00215A  C08E  F095         	movff	?___awtoft,___ftge@ff2
  5475  00215E  C08F  F096         	movff	?___awtoft+1,___ftge@ff2+1
  5476  002162  C090  F097         	movff	?___awtoft+2,___ftge@ff2+2
  5477  002166  ECBB  F023         	call	___ftge	;wreg free
  5478  00216A  0100               	movlb	0	; () banked
  5479  00216C  B0D8               	btfsc	status,0,c
  5480  00216E  D002               	goto	u6760
  5481  002170  0E01               	movlw	1
  5482  002172  D001               	goto	u6770
  5483  002174                     u6760:
  5484  002174  0E00               	movlw	0
  5485  002176                     u6770:
  5486  002176  0100               	movlb	0	; () banked
  5487  002178  6FB9               	movwf	ID@res2& (0+255),b
  5488  00217A  6BBA               	clrf	(ID@res2+1)& (0+255),b
  5489                           
  5490                           ; BSR set to: 0
  5491                           ;sort.c: 304: sensor_outputs[1] = (res1 || res2);
  5492  00217C  0E01               	movlw	1
  5493  00217E  0100               	movlb	0	; () banked
  5494  002180  6FAD               	movwf	_ID$1141& (0+255),b
  5495                           
  5496                           ; BSR set to: 0
  5497  002182  0100               	movlb	0	; () banked
  5498  002184  51B7               	movf	ID@res1& (0+255),w,b
  5499  002186  0100               	movlb	0	; () banked
  5500  002188  11B8               	iorwf	(ID@res1+1)& (0+255),w,b
  5501  00218A  A4D8               	btfss	status,2,c
  5502  00218C  D009               	goto	l8036
  5503                           
  5504                           ; BSR set to: 0
  5505  00218E  0100               	movlb	0	; () banked
  5506  002190  51B9               	movf	ID@res2& (0+255),w,b
  5507  002192  0100               	movlb	0	; () banked
  5508  002194  11BA               	iorwf	(ID@res2+1)& (0+255),w,b
  5509  002196  A4D8               	btfss	status,2,c
  5510  002198  D003               	goto	l8036
  5511                           
  5512                           ; BSR set to: 0
  5513  00219A  0E00               	movlw	0
  5514  00219C  0100               	movlb	0	; () banked
  5515  00219E  6FAD               	movwf	_ID$1141& (0+255),b
  5516  0021A0                     l8036:
  5517                           
  5518                           ; BSR set to: 0
  5519  0021A0  C0AD  F0DC         	movff	_ID$1141,_sensor_outputs+2
  5520  0021A4  0100               	movlb	0	; () banked
  5521  0021A6  6BDD               	clrf	(_sensor_outputs+3)& (0+255),b
  5522                           
  5523                           ; BSR set to: 0
  5524                           ;sort.c: 312: if(!sensor_outputs[0]){
  5525  0021A8  0100               	movlb	0	; () banked
  5526  0021AA  51DA               	movf	_sensor_outputs& (0+255),w,b
  5527  0021AC  0100               	movlb	0	; () banked
  5528  0021AE  11DB               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  5529  0021B0  A4D8               	btfss	status,2,c
  5530  0021B2  D016               	goto	l8050
  5531                           
  5532                           ; BSR set to: 0
  5533                           ;sort.c: 313: if(!sensor_outputs[1]){
  5534  0021B4  0100               	movlb	0	; () banked
  5535  0021B6  51DC               	movf	(_sensor_outputs+2)& (0+255),w,b
  5536  0021B8  0100               	movlb	0	; () banked
  5537  0021BA  11DD               	iorwf	(_sensor_outputs+3)& (0+255),w,b
  5538  0021BC  A4D8               	btfss	status,2,c
  5539  0021BE  D008               	goto	l8046
  5540                           
  5541                           ; BSR set to: 0
  5542                           ;sort.c: 314: count_pop_no_tab++;
  5543  0021C0  0101               	movlb	1	; () banked
  5544  0021C2  4B2F               	infsnz	_count_pop_no_tab& (0+255),f,b
  5545  0021C4  2B30               	incf	(_count_pop_no_tab+1)& (0+255),f,b
  5546                           
  5547                           ; BSR set to: 1
  5548                           ;sort.c: 315: cur_can = 0;
  5549  0021C6  0E00               	movlw	0
  5550  0021C8  0101               	movlb	1	; () banked
  5551  0021CA  6F34               	movwf	(_cur_can+1)& (0+255),b
  5552  0021CC  0E00               	movlw	0
  5553  0021CE  D007               	goto	L8
  5554  0021D0                     l8046:
  5555                           
  5556                           ;sort.c: 317: else{
  5557                           ;sort.c: 318: count_pop_w_tab++;
  5558  0021D0  0101               	movlb	1	; () banked
  5559  0021D2  4B31               	infsnz	_count_pop_w_tab& (0+255),f,b
  5560  0021D4  2B32               	incf	(_count_pop_w_tab+1)& (0+255),f,b
  5561                           
  5562                           ; BSR set to: 1
  5563                           ;sort.c: 319: cur_can = 1;
  5564  0021D6  0E00               	movlw	0
  5565  0021D8  0101               	movlb	1	; () banked
  5566  0021DA  6F34               	movwf	(_cur_can+1)& (0+255),b
  5567  0021DC  0E01               	movlw	1
  5568  0021DE                     L8:
  5569  0021DE  6F33               	movwf	_cur_can& (0+255),b
  5570  0021E0                     l8050:
  5571                           
  5572                           ;sort.c: 320: }
  5573                           ;sort.c: 321: }
  5574                           ;sort.c: 322: if(sensor_outputs[0]){
  5575  0021E0  0100               	movlb	0	; () banked
  5576  0021E2  51DA               	movf	_sensor_outputs& (0+255),w,b
  5577  0021E4  0100               	movlb	0	; () banked
  5578  0021E6  11DB               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  5579  0021E8  B4D8               	btfsc	status,2,c
  5580  0021EA  D016               	goto	l8062
  5581                           
  5582                           ; BSR set to: 0
  5583                           ;sort.c: 323: if(!sensor_outputs[1]){
  5584  0021EC  0100               	movlb	0	; () banked
  5585  0021EE  51DC               	movf	(_sensor_outputs+2)& (0+255),w,b
  5586  0021F0  0100               	movlb	0	; () banked
  5587  0021F2  11DD               	iorwf	(_sensor_outputs+3)& (0+255),w,b
  5588  0021F4  A4D8               	btfss	status,2,c
  5589  0021F6  D008               	goto	l8058
  5590                           
  5591                           ; BSR set to: 0
  5592                           ;sort.c: 324: count_can_w_lab++;
  5593  0021F8  0101               	movlb	1	; () banked
  5594  0021FA  4B2D               	infsnz	_count_can_w_lab& (0+255),f,b
  5595  0021FC  2B2E               	incf	(_count_can_w_lab+1)& (0+255),f,b
  5596                           
  5597                           ; BSR set to: 1
  5598                           ;sort.c: 325: cur_can = 2;
  5599  0021FE  0E00               	movlw	0
  5600  002200  0101               	movlb	1	; () banked
  5601  002202  6F34               	movwf	(_cur_can+1)& (0+255),b
  5602  002204  0E02               	movlw	2
  5603  002206  D007               	goto	L9
  5604  002208                     l8058:
  5605                           
  5606                           ;sort.c: 327: else{
  5607                           ;sort.c: 328: count_can_no_lab++;
  5608  002208  0101               	movlb	1	; () banked
  5609  00220A  4B2B               	infsnz	_count_can_no_lab& (0+255),f,b
  5610  00220C  2B2C               	incf	(_count_can_no_lab+1)& (0+255),f,b
  5611                           
  5612                           ; BSR set to: 1
  5613                           ;sort.c: 329: cur_can = 3;
  5614  00220E  0E00               	movlw	0
  5615  002210  0101               	movlb	1	; () banked
  5616  002212  6F34               	movwf	(_cur_can+1)& (0+255),b
  5617  002214  0E03               	movlw	3
  5618  002216                     L9:
  5619  002216  6F33               	movwf	_cur_can& (0+255),b
  5620  002218                     l8062:
  5621                           
  5622                           ;sort.c: 330: }
  5623                           ;sort.c: 331: }
  5624                           ;sort.c: 332: LATAbits.LATA3 = 0;
  5625  002218  9689               	bcf	3977,3,c	;volatile
  5626                           
  5627                           ;sort.c: 335: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
  5628  00221A  0E01               	movlw	1
  5629  00221C  EC86  F02D         	call	_lcdInst
  5630  002220  0E68               	movlw	104
  5631  002222  0100               	movlb	0	; () banked
  5632  002224  6FAB               	movwf	??_ID& (0+255),b
  5633  002226  0EE4               	movlw	228
  5634  002228                     u9907:
  5635  002228  2EE8               	decfsz	wreg,f,c
  5636  00222A  D7FE               	bra	u9907
  5637  00222C  2FAB               	decfsz	??_ID& (0+255),f,b
  5638  00222E  D7FC               	bra	u9907
  5639  002230  F000               	nop	
  5640  002232  0E80               	movlw	128
  5641  002234  EC86  F02D         	call	_lcdInst
  5642                           
  5643                           ;sort.c: 336: printf("            F%dL%d", res1, res2);
  5644  002238  0EDB               	movlw	low STR_64
  5645  00223A  0100               	movlb	0	; () banked
  5646  00223C  6F8E               	movwf	printf@f& (0+255),b
  5647  00223E  0EFA               	movlw	high STR_64
  5648  002240  0100               	movlb	0	; () banked
  5649  002242  6F8F               	movwf	(printf@f+1)& (0+255),b
  5650  002244  C0B7  F090         	movff	ID@res1,?_printf+2
  5651  002248  C0B8  F091         	movff	ID@res1+1,?_printf+3
  5652  00224C  C0B9  F092         	movff	ID@res2,?_printf+4
  5653  002250  C0BA  F093         	movff	ID@res2+1,?_printf+5
  5654  002254  ECC2  F00B         	call	_printf	;wreg free
  5655  002258                     l8072:
  5656  002258  0101               	movlb	1	; () banked
  5657  00225A  513D               	movf	_f_can_distributed& (0+255),w,b
  5658  00225C  0101               	movlb	1	; () banked
  5659  00225E  113E               	iorwf	(_f_can_distributed+1)& (0+255),w,b
  5660  002260  B4D8               	btfsc	status,2,c
  5661  002262  D7FA               	goto	l8072
  5662                           
  5663                           ; BSR set to: 1
  5664                           ;sort.c: 341: for(int i=0;i<10000;i++)
  5665                           
  5666                           ; BSR set to: 1
  5667  002264  0E00               	movlw	0
  5668  002266  0100               	movlb	0	; () banked
  5669  002268  6FB3               	movwf	(ID@i_1143+1)& (0+255),b
  5670  00226A  0E00               	movlw	0
  5671  00226C  6FB2               	movwf	ID@i_1143& (0+255),b
  5672  00226E                     l8076:
  5673                           
  5674                           ; BSR set to: 0
  5675  00226E  0100               	movlb	0	; () banked
  5676  002270  BFB3               	btfsc	(ID@i_1143+1)& (0+255),7,b
  5677  002272  D008               	goto	l859
  5678  002274  0E10               	movlw	16
  5679  002276  0100               	movlb	0	; () banked
  5680  002278  5DB2               	subwf	ID@i_1143& (0+255),w,b
  5681  00227A  0E27               	movlw	39
  5682  00227C  0100               	movlb	0	; () banked
  5683  00227E  59B3               	subwfb	(ID@i_1143+1)& (0+255),w,b
  5684  002280  B0D8               	btfsc	status,0,c
  5685  002282  D00D               	goto	l860
  5686  002284                     l859:
  5687                           
  5688                           ; BSR set to: 0
  5689                           ;sort.c: 342: {
  5690                           ;sort.c: 343: LATCbits.LATC0 = 1;
  5691  002284  808B               	bsf	3979,0,c	;volatile
  5692                           
  5693                           ; BSR set to: 0
  5694                           ;sort.c: 344: _delay((unsigned long)((10)*(32000000/4000000.0)));
  5695  002286  0E1A               	movlw	26
  5696  002288                     u9917:
  5697  002288  2EE8               	decfsz	wreg,f,c
  5698  00228A  D7FE               	bra	u9917
  5699  00228C  D000               	nop2	
  5700                           
  5701                           ;sort.c: 345: LATCbits.LATC0 = 0;
  5702  00228E  908B               	bcf	3979,0,c	;volatile
  5703                           
  5704                           ;sort.c: 346: _delay((unsigned long)((90)*(32000000/4000000.0)));
  5705  002290  0EF0               	movlw	240
  5706  002292                     u9927:
  5707  002292  2EE8               	decfsz	wreg,f,c
  5708  002294  D7FE               	bra	u9927
  5709  002296  0100               	movlb	0	; () banked
  5710  002298  4BB2               	infsnz	ID@i_1143& (0+255),f,b
  5711  00229A  2BB3               	incf	(ID@i_1143+1)& (0+255),f,b
  5712  00229C  D7E8               	goto	l8076
  5713  00229E                     l860:
  5714                           
  5715                           ; BSR set to: 0
  5716                           ;sort.c: 347: }
  5717                           ;sort.c: 349: LATCbits.LATC0 = 0;
  5718  00229E  908B               	bcf	3979,0,c	;volatile
  5719                           
  5720                           ; BSR set to: 0
  5721                           ;sort.c: 351: f_can_coming_to_distribution = 1;
  5722  0022A0  0E00               	movlw	0
  5723  0022A2  0101               	movlb	1	; () banked
  5724  0022A4  6F3C               	movwf	(_f_can_coming_to_distribution+1)& (0+255),b
  5725  0022A6  0E01               	movlw	1
  5726  0022A8  6F3B               	movwf	_f_can_coming_to_distribution& (0+255),b
  5727                           
  5728                           ; BSR set to: 1
  5729                           ;sort.c: 352: _delay((unsigned long)((750)*(32000000/4000.0)));
  5730  0022AA  0E1F               	movlw	31
  5731  0022AC  0100               	movlb	0	; () banked
  5732  0022AE  6FAC               	movwf	(??_ID+1)& (0+255),b
  5733  0022B0  0E71               	movlw	113
  5734  0022B2  0100               	movlb	0	; () banked
  5735  0022B4  6FAB               	movwf	??_ID& (0+255),b
  5736  0022B6  0E1E               	movlw	30
  5737  0022B8                     u9937:
  5738  0022B8  2EE8               	decfsz	wreg,f,c
  5739  0022BA  D7FE               	bra	u9937
  5740  0022BC  2FAB               	decfsz	??_ID& (0+255),f,b
  5741  0022BE  D7FC               	bra	u9937
  5742  0022C0  2FAC               	decfsz	(??_ID+1)& (0+255),f,b
  5743  0022C2  D7FA               	bra	u9937
  5744  0022C4  F000               	nop	
  5745                           
  5746                           ;sort.c: 353: LATCbits.LATC0 = 1;
  5747  0022C6  808B               	bsf	3979,0,c	;volatile
  5748                           
  5749                           ;sort.c: 356: if(!f_lastCan){
  5750  0022C8  0100               	movlb	0	; () banked
  5751  0022CA  51EA               	movf	_f_lastCan& (0+255),w,b
  5752  0022CC  0100               	movlb	0	; () banked
  5753  0022CE  11EB               	iorwf	(_f_lastCan+1)& (0+255),w,b
  5754  0022D0  A4D8               	btfss	status,2,c
  5755  0022D2  D032               	goto	l8108
  5756                           
  5757                           ; BSR set to: 0
  5758                           ;sort.c: 357: for(int i=0; i<46; i++){
  5759  0022D4  0E00               	movlw	0
  5760  0022D6  0100               	movlb	0	; () banked
  5761  0022D8  6FB6               	movwf	(ID@i_1144+1)& (0+255),b
  5762  0022DA  0E00               	movlw	0
  5763  0022DC  6FB5               	movwf	ID@i_1144& (0+255),b
  5764                           
  5765                           ; BSR set to: 0
  5766  0022DE  0100               	movlb	0	; () banked
  5767  0022E0  BFB6               	btfsc	(ID@i_1144+1)& (0+255),7,b
  5768  0022E2  D008               	goto	l8100
  5769  0022E4  0100               	movlb	0	; () banked
  5770  0022E6  51B6               	movf	(ID@i_1144+1)& (0+255),w,b
  5771  0022E8  E126               	bnz	l863
  5772  0022EA  0E2E               	movlw	46
  5773  0022EC  0100               	movlb	0	; () banked
  5774  0022EE  5DB5               	subwf	ID@i_1144& (0+255),w,b
  5775  0022F0  B0D8               	btfsc	status,0,c
  5776  0022F2  D021               	goto	l863
  5777  0022F4                     l8100:
  5778                           
  5779                           ; BSR set to: 0
  5780                           ;sort.c: 358: LATBbits.LATB2 = !LATBbits.LATB2;
  5781  0022F4  B48A               	btfsc	3978,2,c	;volatile
  5782  0022F6  D004               	goto	u6890
  5783  0022F8  0100               	movlb	0	; () banked
  5784  0022FA  6BAB               	clrf	??_ID& (0+255),b
  5785  0022FC  2BAB               	incf	??_ID& (0+255),f,b
  5786  0022FE  D002               	goto	u6908
  5787  002300                     u6890:
  5788  002300  0100               	movlb	0	; () banked
  5789  002302  6BAB               	clrf	??_ID& (0+255),b
  5790  002304                     u6908:
  5791  002304  0100               	movlb	0	; () banked
  5792  002306  47AB               	rlncf	??_ID& (0+255),f,b
  5793  002308  47AB               	rlncf	??_ID& (0+255),f,b
  5794  00230A  508A               	movf	3978,w,c	;volatile
  5795  00230C  0100               	movlb	0	; () banked
  5796  00230E  19AB               	xorwf	??_ID& (0+255),w,b
  5797  002310  0BFB               	andlw	-5
  5798  002312  19AB               	xorwf	??_ID& (0+255),w,b
  5799  002314  6E8A               	movwf	3978,c	;volatile
  5800                           
  5801                           ; BSR set to: 0
  5802                           ;sort.c: 359: delay_ms(45-i);
  5803  002316  0100               	movlb	0	; () banked
  5804  002318  51B5               	movf	ID@i_1144& (0+255),w,b
  5805  00231A  0800               	sublw	0
  5806  00231C  0F2D               	addlw	45
  5807  00231E  ECA7  F02C         	call	_delay_ms
  5808  002322  0100               	movlb	0	; () banked
  5809  002324  4BB5               	infsnz	ID@i_1144& (0+255),f,b
  5810  002326  2BB6               	incf	(ID@i_1144+1)& (0+255),f,b
  5811                           
  5812                           ; BSR set to: 0
  5813  002328  0100               	movlb	0	; () banked
  5814  00232A  BFB6               	btfsc	(ID@i_1144+1)& (0+255),7,b
  5815  00232C  D7E3               	goto	l8100
  5816  00232E  0100               	movlb	0	; () banked
  5817  002330  51B6               	movf	(ID@i_1144+1)& (0+255),w,b
  5818  002332  E101               	bnz	u6910
  5819  002334  D7DA               	goto	L10
  5820  002336                     u6910:
  5821  002336                     l863:
  5822                           
  5823                           ; BSR set to: 0
  5824                           ;sort.c: 360: }
  5825                           ;sort.c: 361: LATBbits.LATB2 = 1;
  5826  002336  848A               	bsf	3978,2,c	;volatile
  5827  002338                     l8108:
  5828                           
  5829                           ; BSR set to: 0
  5830                           ;sort.c: 362: }
  5831                           ;sort.c: 364: f_can_coming_to_ID = 0;
  5832  002338  0E00               	movlw	0
  5833  00233A  0101               	movlb	1	; () banked
  5834  00233C  6F3A               	movwf	(_f_can_coming_to_ID+1)& (0+255),b
  5835  00233E  0E00               	movlw	0
  5836  002340  6F39               	movwf	_f_can_coming_to_ID& (0+255),b
  5837  002342  0012               	return	
  5838  002344                     __end_of_ID:
  5839                           	opt stack 0
  5840                           tblptru	equ	0xFF8
  5841                           tblptrh	equ	0xFF7
  5842                           tblptrl	equ	0xFF6
  5843                           tablat	equ	0xFF5
  5844                           prodh	equ	0xFF4
  5845                           prodl	equ	0xFF3
  5846                           postinc0	equ	0xFEE
  5847                           wreg	equ	0xFE8
  5848                           postdec1	equ	0xFE5
  5849                           fsr1l	equ	0xFE1
  5850                           indf2	equ	0xFDF
  5851                           postinc2	equ	0xFDE
  5852                           postdec2	equ	0xFDD
  5853                           fsr2h	equ	0xFDA
  5854                           fsr2l	equ	0xFD9
  5855                           status	equ	0xFD8
  5856                           
  5857 ;; *************** function _readCOND *****************
  5858 ;; Defined at:
  5859 ;;		line 35 in file "ADCFunctionality.c"
  5860 ;; Parameters:    Size  Location     Type
  5861 ;;		None
  5862 ;; Auto vars:     Size  Location     Type
  5863 ;;  res             2    4[BANK0 ] int 
  5864 ;; Return value:  Size  Location     Type
  5865 ;;                  1    wreg      void 
  5866 ;; Registers used:
  5867 ;;		wreg, status,2, status,0, cstack
  5868 ;; Tracked objects:
  5869 ;;		On entry : 0/0
  5870 ;;		On exit  : 0/0
  5871 ;;		Unchanged: 0/0
  5872 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5873 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5874 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5875 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5876 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5877 ;;Total ram usage:        4 bytes
  5878 ;; Hardware stack levels used:    1
  5879 ;; Hardware stack levels required when called:    8
  5880 ;; This function calls:
  5881 ;;		_readADC
  5882 ;; This function is called by:
  5883 ;;		_ID
  5884 ;; This function uses a non-reentrant model
  5885 ;;
  5886                           
  5887                           	psect	text9
  5888  0053B2                     __ptext9:
  5889                           	opt stack 0
  5890  0053B2                     _readCOND:
  5891                           	opt stack 20
  5892                           
  5893                           ;ADCFunctionality.c: 36: readADC(2);
  5894                           
  5895                           ; BSR set to: 1
  5896                           ;incstack = 0
  5897  0053B2  0E02               	movlw	2
  5898  0053B4  EC7C  F02C         	call	_readADC
  5899                           
  5900                           ;ADCFunctionality.c: 37: int res = ADRESH<<8 | ADRESL;
  5901  0053B8  50C3               	movf	4035,w,c	;volatile
  5902  0053BA  CFC4 F082          	movff	4036,??_readCOND	;volatile
  5903  0053BE  0100               	movlb	0	; () banked
  5904  0053C0  6B83               	clrf	(??_readCOND+1)& (0+255),b
  5905  0053C2  C082  F083         	movff	??_readCOND,??_readCOND+1
  5906  0053C6  0100               	movlb	0	; () banked
  5907  0053C8  6B82               	clrf	??_readCOND& (0+255),b
  5908  0053CA  0100               	movlb	0	; () banked
  5909  0053CC  1182               	iorwf	??_readCOND& (0+255),w,b
  5910  0053CE  0100               	movlb	0	; () banked
  5911  0053D0  6F84               	movwf	readCOND@res& (0+255),b
  5912  0053D2  0100               	movlb	0	; () banked
  5913  0053D4  5183               	movf	(??_readCOND+1)& (0+255),w,b
  5914  0053D6  0100               	movlb	0	; () banked
  5915  0053D8  6F85               	movwf	(readCOND@res+1)& (0+255),b
  5916                           
  5917                           ; BSR set to: 0
  5918                           ;ADCFunctionality.c: 38: COND_signal = (res > 300) ? 1 : 0;
  5919  0053DA  0100               	movlb	0	; () banked
  5920  0053DC  BF85               	btfsc	(readCOND@res+1)& (0+255),7,b
  5921  0053DE  D00A               	goto	u5820
  5922  0053E0  0E2D               	movlw	45
  5923  0053E2  0100               	movlb	0	; () banked
  5924  0053E4  5D84               	subwf	readCOND@res& (0+255),w,b
  5925  0053E6  0E01               	movlw	1
  5926  0053E8  0100               	movlb	0	; () banked
  5927  0053EA  5985               	subwfb	(readCOND@res+1)& (0+255),w,b
  5928  0053EC  A0D8               	btfss	status,0,c
  5929  0053EE  D002               	goto	u5820
  5930  0053F0  0E01               	movlw	1
  5931  0053F2  D001               	goto	u5830
  5932  0053F4                     u5820:
  5933  0053F4  0E00               	movlw	0
  5934  0053F6                     u5830:
  5935  0053F6  0100               	movlb	0	; () banked
  5936  0053F8  6FDE               	movwf	_COND_signal& (0+255),b
  5937  0053FA  6BDF               	clrf	(_COND_signal+1)& (0+255),b
  5938                           
  5939                           ; BSR set to: 0
  5940  0053FC  0012               	return		;funcret
  5941  0053FE                     __end_of_readCOND:
  5942                           	opt stack 0
  5943                           tblptru	equ	0xFF8
  5944                           tblptrh	equ	0xFF7
  5945                           tblptrl	equ	0xFF6
  5946                           tablat	equ	0xFF5
  5947                           prodh	equ	0xFF4
  5948                           prodl	equ	0xFF3
  5949                           postinc0	equ	0xFEE
  5950                           wreg	equ	0xFE8
  5951                           postdec1	equ	0xFE5
  5952                           fsr1l	equ	0xFE1
  5953                           indf2	equ	0xFDF
  5954                           postinc2	equ	0xFDE
  5955                           postdec2	equ	0xFDD
  5956                           fsr2h	equ	0xFDA
  5957                           fsr2l	equ	0xFD9
  5958                           status	equ	0xFD8
  5959                           
  5960 ;; *************** function _delay_ms *****************
  5961 ;; Defined at:
  5962 ;;		line 647 in file "sort.c"
  5963 ;; Parameters:    Size  Location     Type
  5964 ;;  milliseconds    1    wreg     unsigned char 
  5965 ;; Auto vars:     Size  Location     Type
  5966 ;;  milliseconds    1    1[BANK0 ] unsigned char 
  5967 ;; Return value:  Size  Location     Type
  5968 ;;                  1    wreg      void 
  5969 ;; Registers used:
  5970 ;;		wreg, status,2, status,0, cstack
  5971 ;; Tracked objects:
  5972 ;;		On entry : 0/0
  5973 ;;		On exit  : 0/0
  5974 ;;		Unchanged: 0/0
  5975 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5976 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5977 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5978 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5979 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5980 ;;Total ram usage:        2 bytes
  5981 ;; Hardware stack levels used:    1
  5982 ;; Hardware stack levels required when called:    7
  5983 ;; This function calls:
  5984 ;;		Nothing
  5985 ;; This function is called by:
  5986 ;;		_Loading
  5987 ;;		_ID
  5988 ;; This function uses a non-reentrant model
  5989 ;;
  5990                           
  5991                           	psect	text10
  5992  00594E                     __ptext10:
  5993                           	opt stack 0
  5994  00594E                     _delay_ms:
  5995                           	opt stack 21
  5996                           
  5997                           ; BSR set to: 0
  5998                           ;incstack = 0
  5999                           ;delay_ms@milliseconds stored from wreg
  6000  00594E  0100               	movlb	0	; () banked
  6001  005950  6F81               	movwf	delay_ms@milliseconds& (0+255),b
  6002                           
  6003                           ;sort.c: 648: while(milliseconds > 0)
  6004  005952  D00B               	goto	l7348
  6005  005954                     l7344:
  6006                           
  6007                           ;sort.c: 649: {
  6008                           ;sort.c: 650: milliseconds--;
  6009  005954  0100               	movlb	0	; () banked
  6010  005956  0781               	decf	delay_ms@milliseconds& (0+255),f,b
  6011                           
  6012                           ; BSR set to: 0
  6013                           ;sort.c: 651: _delay((unsigned long)((990)*(32000000/4000000.0)));
  6014  005958  0E0B               	movlw	11
  6015  00595A  0100               	movlb	0	; () banked
  6016  00595C  6F80               	movwf	??_delay_ms& (0+255),b
  6017  00595E  0E47               	movlw	71
  6018  005960                     u9947:
  6019  005960  2EE8               	decfsz	wreg,f,c
  6020  005962  D7FE               	bra	u9947
  6021  005964  2F80               	decfsz	??_delay_ms& (0+255),f,b
  6022  005966  D7FC               	bra	u9947
  6023  005968  D000               	nop2	
  6024  00596A                     l7348:
  6025  00596A  0100               	movlb	0	; () banked
  6026  00596C  5181               	movf	delay_ms@milliseconds& (0+255),w,b
  6027  00596E  0100               	movlb	0	; () banked
  6028  005970  B4D8               	btfsc	status,2,c
  6029  005972  0012               	return	
  6030  005974  D7EF               	goto	l7344
  6031  005976                     __end_of_delay_ms:
  6032                           	opt stack 0
  6033                           tblptru	equ	0xFF8
  6034                           tblptrh	equ	0xFF7
  6035                           tblptrl	equ	0xFF6
  6036                           tablat	equ	0xFF5
  6037                           prodh	equ	0xFF4
  6038                           prodl	equ	0xFF3
  6039                           postinc0	equ	0xFEE
  6040                           wreg	equ	0xFE8
  6041                           postdec1	equ	0xFE5
  6042                           fsr1l	equ	0xFE1
  6043                           indf2	equ	0xFDF
  6044                           postinc2	equ	0xFDE
  6045                           postdec2	equ	0xFDD
  6046                           fsr2h	equ	0xFDA
  6047                           fsr2l	equ	0xFD9
  6048                           status	equ	0xFD8
  6049                           
  6050 ;; *************** function ___ftge *****************
  6051 ;; Defined at:
  6052 ;;		line 4 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftge.c"
  6053 ;; Parameters:    Size  Location     Type
  6054 ;;  ff1             3   18[BANK0 ] float 
  6055 ;;  ff2             3   21[BANK0 ] float 
  6056 ;; Auto vars:     Size  Location     Type
  6057 ;;		None
  6058 ;; Return value:  Size  Location     Type
  6059 ;;		None               void
  6060 ;; Registers used:
  6061 ;;		wreg, status,2, status,0
  6062 ;; Tracked objects:
  6063 ;;		On entry : 0/0
  6064 ;;		On exit  : 0/0
  6065 ;;		Unchanged: 0/0
  6066 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6067 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6068 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6069 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6070 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6071 ;;Total ram usage:        9 bytes
  6072 ;; Hardware stack levels used:    1
  6073 ;; Hardware stack levels required when called:    7
  6074 ;; This function calls:
  6075 ;;		Nothing
  6076 ;; This function is called by:
  6077 ;;		_ID
  6078 ;; This function uses a non-reentrant model
  6079 ;;
  6080                           
  6081                           	psect	text11
  6082  004776                     __ptext11:
  6083                           	opt stack 0
  6084  004776                     ___ftge:
  6085                           	opt stack 21
  6086                           
  6087                           ; BSR set to: 0
  6088                           ;incstack = 0
  6089  004776  0100               	movlb	0	; () banked
  6090  004778  AF94               	btfss	(___ftge@ff1+2)& (0+255),7,b
  6091  00477A  D01D               	goto	l7466
  6092                           
  6093                           ; BSR set to: 0
  6094  00477C  C092  F098         	movff	___ftge@ff1,??___ftge
  6095  004780  C093  F099         	movff	___ftge@ff1+1,??___ftge+1
  6096  004784  C094  F09A         	movff	___ftge@ff1+2,??___ftge+2
  6097  004788  0100               	movlb	0	; () banked
  6098  00478A  1F98               	comf	??___ftge& (0+255),f,b
  6099  00478C  1F99               	comf	(??___ftge+1)& (0+255),f,b
  6100  00478E  1F9A               	comf	(??___ftge+2)& (0+255),f,b
  6101  004790  2B98               	incf	??___ftge& (0+255),f,b
  6102  004792  0E00               	movlw	0
  6103  004794  2399               	addwfc	(??___ftge+1)& (0+255),f,b
  6104  004796  239A               	addwfc	(??___ftge+2)& (0+255),f,b
  6105  004798  0E00               	movlw	0
  6106  00479A  0100               	movlb	0	; () banked
  6107  00479C  2598               	addwf	??___ftge& (0+255),w,b
  6108  00479E  0100               	movlb	0	; () banked
  6109  0047A0  6F92               	movwf	___ftge@ff1& (0+255),b
  6110  0047A2  0E00               	movlw	0
  6111  0047A4  0100               	movlb	0	; () banked
  6112  0047A6  2199               	addwfc	(??___ftge+1)& (0+255),w,b
  6113  0047A8  0100               	movlb	0	; () banked
  6114  0047AA  6F93               	movwf	(___ftge@ff1+1)& (0+255),b
  6115  0047AC  0E80               	movlw	128
  6116  0047AE  0100               	movlb	0	; () banked
  6117  0047B0  219A               	addwfc	(??___ftge+2)& (0+255),w,b
  6118  0047B2  0100               	movlb	0	; () banked
  6119  0047B4  6F94               	movwf	(___ftge@ff1+2)& (0+255),b
  6120  0047B6                     l7466:
  6121                           
  6122                           ; BSR set to: 0
  6123  0047B6  0100               	movlb	0	; () banked
  6124  0047B8  AF97               	btfss	(___ftge@ff2+2)& (0+255),7,b
  6125  0047BA  D01D               	goto	l7470
  6126                           
  6127                           ; BSR set to: 0
  6128  0047BC  C095  F098         	movff	___ftge@ff2,??___ftge
  6129  0047C0  C096  F099         	movff	___ftge@ff2+1,??___ftge+1
  6130  0047C4  C097  F09A         	movff	___ftge@ff2+2,??___ftge+2
  6131  0047C8  0100               	movlb	0	; () banked
  6132  0047CA  1F98               	comf	??___ftge& (0+255),f,b
  6133  0047CC  1F99               	comf	(??___ftge+1)& (0+255),f,b
  6134  0047CE  1F9A               	comf	(??___ftge+2)& (0+255),f,b
  6135  0047D0  2B98               	incf	??___ftge& (0+255),f,b
  6136  0047D2  0E00               	movlw	0
  6137  0047D4  2399               	addwfc	(??___ftge+1)& (0+255),f,b
  6138  0047D6  239A               	addwfc	(??___ftge+2)& (0+255),f,b
  6139  0047D8  0E00               	movlw	0
  6140  0047DA  0100               	movlb	0	; () banked
  6141  0047DC  2598               	addwf	??___ftge& (0+255),w,b
  6142  0047DE  0100               	movlb	0	; () banked
  6143  0047E0  6F95               	movwf	___ftge@ff2& (0+255),b
  6144  0047E2  0E00               	movlw	0
  6145  0047E4  0100               	movlb	0	; () banked
  6146  0047E6  2199               	addwfc	(??___ftge+1)& (0+255),w,b
  6147  0047E8  0100               	movlb	0	; () banked
  6148  0047EA  6F96               	movwf	(___ftge@ff2+1)& (0+255),b
  6149  0047EC  0E80               	movlw	128
  6150  0047EE  0100               	movlb	0	; () banked
  6151  0047F0  219A               	addwfc	(??___ftge+2)& (0+255),w,b
  6152  0047F2  0100               	movlb	0	; () banked
  6153  0047F4  6F97               	movwf	(___ftge@ff2+2)& (0+255),b
  6154  0047F6                     l7470:
  6155                           
  6156                           ; BSR set to: 0
  6157  0047F6  0E00               	movlw	0
  6158  0047F8  0100               	movlb	0	; () banked
  6159  0047FA  1B92               	xorwf	___ftge@ff1& (0+255),f,b
  6160  0047FC  0E00               	movlw	0
  6161  0047FE  0100               	movlb	0	; () banked
  6162  004800  1B93               	xorwf	(___ftge@ff1+1)& (0+255),f,b
  6163  004802  0E80               	movlw	128
  6164  004804  0100               	movlb	0	; () banked
  6165  004806  1B94               	xorwf	(___ftge@ff1+2)& (0+255),f,b
  6166                           
  6167                           ; BSR set to: 0
  6168  004808  0E00               	movlw	0
  6169  00480A  0100               	movlb	0	; () banked
  6170  00480C  1B95               	xorwf	___ftge@ff2& (0+255),f,b
  6171  00480E  0E00               	movlw	0
  6172  004810  0100               	movlb	0	; () banked
  6173  004812  1B96               	xorwf	(___ftge@ff2+1)& (0+255),f,b
  6174  004814  0E80               	movlw	128
  6175  004816  0100               	movlb	0	; () banked
  6176  004818  1B97               	xorwf	(___ftge@ff2+2)& (0+255),f,b
  6177  00481A  0100               	movlb	0	; () banked
  6178  00481C  5195               	movf	___ftge@ff2& (0+255),w,b
  6179  00481E  0100               	movlb	0	; () banked
  6180  004820  5D92               	subwf	___ftge@ff1& (0+255),w,b
  6181  004822  0100               	movlb	0	; () banked
  6182  004824  5196               	movf	(___ftge@ff2+1)& (0+255),w,b
  6183  004826  0100               	movlb	0	; () banked
  6184  004828  5993               	subwfb	(___ftge@ff1+1)& (0+255),w,b
  6185  00482A  0100               	movlb	0	; () banked
  6186  00482C  5197               	movf	(___ftge@ff2+2)& (0+255),w,b
  6187  00482E  0100               	movlb	0	; () banked
  6188  004830  5994               	subwfb	(___ftge@ff1+2)& (0+255),w,b
  6189  004832  B0D8               	btfsc	status,0,c
  6190  004834  D002               	goto	l7476
  6191                           
  6192                           ; BSR set to: 0
  6193  004836  90D8               	bcf	status,0,c
  6194  004838  0012               	return	
  6195  00483A                     l7476:
  6196                           
  6197                           ; BSR set to: 0
  6198  00483A  80D8               	bsf	status,0,c
  6199                           
  6200                           ; BSR set to: 0
  6201  00483C  0012               	return	
  6202  00483E                     __end_of___ftge:
  6203                           	opt stack 0
  6204                           tblptru	equ	0xFF8
  6205                           tblptrh	equ	0xFF7
  6206                           tblptrl	equ	0xFF6
  6207                           tablat	equ	0xFF5
  6208                           prodh	equ	0xFF4
  6209                           prodl	equ	0xFF3
  6210                           postinc0	equ	0xFEE
  6211                           wreg	equ	0xFE8
  6212                           postdec1	equ	0xFE5
  6213                           fsr1l	equ	0xFE1
  6214                           indf2	equ	0xFDF
  6215                           postinc2	equ	0xFDE
  6216                           postdec2	equ	0xFDD
  6217                           fsr2h	equ	0xFDA
  6218                           fsr2l	equ	0xFD9
  6219                           status	equ	0xFD8
  6220                           
  6221 ;; *************** function ___awtoft *****************
  6222 ;; Defined at:
  6223 ;;		line 32 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awtoft.c"
  6224 ;; Parameters:    Size  Location     Type
  6225 ;;  c               2   14[BANK0 ] int 
  6226 ;; Auto vars:     Size  Location     Type
  6227 ;;  sign            1   17[BANK0 ] unsigned char 
  6228 ;; Return value:  Size  Location     Type
  6229 ;;                  3   14[BANK0 ] float 
  6230 ;; Registers used:
  6231 ;;		wreg, status,2, status,0, cstack
  6232 ;; Tracked objects:
  6233 ;;		On entry : 0/0
  6234 ;;		On exit  : 0/0
  6235 ;;		Unchanged: 0/0
  6236 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6237 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6238 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6239 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6240 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6241 ;;Total ram usage:        4 bytes
  6242 ;; Hardware stack levels used:    1
  6243 ;; Hardware stack levels required when called:    8
  6244 ;; This function calls:
  6245 ;;		___ftpack
  6246 ;; This function is called by:
  6247 ;;		_ID
  6248 ;; This function uses a non-reentrant model
  6249 ;;
  6250                           
  6251                           	psect	text12
  6252  005490                     __ptext12:
  6253                           	opt stack 0
  6254  005490                     ___awtoft:
  6255                           	opt stack 20
  6256                           
  6257                           ; BSR set to: 0
  6258                           ;incstack = 0
  6259  005490  0E00               	movlw	0
  6260  005492  0100               	movlb	0	; () banked
  6261  005494  6F91               	movwf	___awtoft@sign& (0+255),b
  6262                           
  6263                           ; BSR set to: 0
  6264  005496  0100               	movlb	0	; () banked
  6265  005498  AF8F               	btfss	(___awtoft@c+1)& (0+255),7,b
  6266  00549A  D008               	goto	l7458
  6267                           
  6268                           ; BSR set to: 0
  6269  00549C  0100               	movlb	0	; () banked
  6270  00549E  6D8E               	negf	___awtoft@c& (0+255),b
  6271  0054A0  1F8F               	comf	(___awtoft@c+1)& (0+255),f,b
  6272  0054A2  B0D8               	btfsc	status,0,c
  6273  0054A4  2B8F               	incf	(___awtoft@c+1)& (0+255),f,b
  6274                           
  6275                           ; BSR set to: 0
  6276  0054A6  0E01               	movlw	1
  6277  0054A8  0100               	movlb	0	; () banked
  6278  0054AA  6F91               	movwf	___awtoft@sign& (0+255),b
  6279  0054AC                     l7458:
  6280                           
  6281                           ; BSR set to: 0
  6282  0054AC  C08E  F080         	movff	___awtoft@c,___ftpack@arg
  6283  0054B0  C08F  F081         	movff	___awtoft@c+1,___ftpack@arg+1
  6284  0054B4  0100               	movlb	0	; () banked
  6285  0054B6  6B82               	clrf	(___ftpack@arg+2)& (0+255),b
  6286  0054B8  0E8E               	movlw	142
  6287  0054BA  0100               	movlb	0	; () banked
  6288  0054BC  6F83               	movwf	___ftpack@exp& (0+255),b
  6289  0054BE  C091  F084         	movff	___awtoft@sign,___ftpack@sign
  6290  0054C2  EC7F  F020         	call	___ftpack	;wreg free
  6291  0054C6  C080  F08E         	movff	?___ftpack,?___awtoft
  6292  0054CA  C081  F08F         	movff	?___ftpack+1,?___awtoft+1
  6293  0054CE  C082  F090         	movff	?___ftpack+2,?___awtoft+2
  6294  0054D2  0012               	return	
  6295  0054D4                     __end_of___awtoft:
  6296                           	opt stack 0
  6297                           tblptru	equ	0xFF8
  6298                           tblptrh	equ	0xFF7
  6299                           tblptrl	equ	0xFF6
  6300                           tablat	equ	0xFF5
  6301                           prodh	equ	0xFF4
  6302                           prodl	equ	0xFF3
  6303                           postinc0	equ	0xFEE
  6304                           wreg	equ	0xFE8
  6305                           postdec1	equ	0xFE5
  6306                           fsr1l	equ	0xFE1
  6307                           indf2	equ	0xFDF
  6308                           postinc2	equ	0xFDE
  6309                           postdec2	equ	0xFDD
  6310                           fsr2h	equ	0xFDA
  6311                           fsr2l	equ	0xFD9
  6312                           status	equ	0xFD8
  6313                           
  6314 ;; *************** function ___ftpack *****************
  6315 ;; Defined at:
  6316 ;;		line 62 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\float.c"
  6317 ;; Parameters:    Size  Location     Type
  6318 ;;  arg             3    0[BANK0 ] unsigned um
  6319 ;;  exp             1    3[BANK0 ] unsigned char 
  6320 ;;  sign            1    4[BANK0 ] unsigned char 
  6321 ;; Auto vars:     Size  Location     Type
  6322 ;;		None
  6323 ;; Return value:  Size  Location     Type
  6324 ;;                  3    0[BANK0 ] float 
  6325 ;; Registers used:
  6326 ;;		wreg, status,2, status,0
  6327 ;; Tracked objects:
  6328 ;;		On entry : 0/0
  6329 ;;		On exit  : 0/0
  6330 ;;		Unchanged: 0/0
  6331 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6332 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6333 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6334 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6335 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6336 ;;Total ram usage:        8 bytes
  6337 ;; Hardware stack levels used:    1
  6338 ;; Hardware stack levels required when called:    7
  6339 ;; This function calls:
  6340 ;;		Nothing
  6341 ;; This function is called by:
  6342 ;;		___awtoft
  6343 ;; This function uses a non-reentrant model
  6344 ;;
  6345                           
  6346                           	psect	text13
  6347  0040FE                     __ptext13:
  6348                           	opt stack 0
  6349  0040FE                     ___ftpack:
  6350                           	opt stack 20
  6351                           
  6352                           ;incstack = 0
  6353  0040FE  0100               	movlb	0	; () banked
  6354  004100  5183               	movf	___ftpack@exp& (0+255),w,b
  6355  004102  0100               	movlb	0	; () banked
  6356  004104  B4D8               	btfsc	status,2,c
  6357  004106  D008               	goto	l6842
  6358                           
  6359                           ; BSR set to: 0
  6360  004108  0100               	movlb	0	; () banked
  6361  00410A  5180               	movf	___ftpack@arg& (0+255),w,b
  6362  00410C  0100               	movlb	0	; () banked
  6363  00410E  1181               	iorwf	(___ftpack@arg+1)& (0+255),w,b
  6364  004110  0100               	movlb	0	; () banked
  6365  004112  1182               	iorwf	(___ftpack@arg+2)& (0+255),w,b
  6366  004114  A4D8               	btfss	status,2,c
  6367  004116  D011               	goto	l6848
  6368  004118                     l6842:
  6369                           
  6370                           ; BSR set to: 0
  6371  004118  0E00               	movlw	0
  6372  00411A  0100               	movlb	0	; () banked
  6373  00411C  6F80               	movwf	?___ftpack& (0+255),b
  6374  00411E  0E00               	movlw	0
  6375  004120  0100               	movlb	0	; () banked
  6376  004122  6F81               	movwf	(?___ftpack+1)& (0+255),b
  6377  004124  0E00               	movlw	0
  6378  004126  0100               	movlb	0	; () banked
  6379  004128  6F82               	movwf	(?___ftpack+2)& (0+255),b
  6380                           
  6381                           ; BSR set to: 0
  6382  00412A  0012               	return	
  6383  00412C                     l6846:
  6384                           
  6385                           ; BSR set to: 0
  6386  00412C  0100               	movlb	0	; () banked
  6387  00412E  2B83               	incf	___ftpack@exp& (0+255),f,b
  6388  004130  0100               	movlb	0	; () banked
  6389  004132  90D8               	bcf	status,0,c
  6390  004134  3382               	rrcf	(___ftpack@arg+2)& (0+255),f,b
  6391  004136  3381               	rrcf	(___ftpack@arg+1)& (0+255),f,b
  6392  004138  3380               	rrcf	___ftpack@arg& (0+255),f,b
  6393  00413A                     l6848:
  6394                           
  6395                           ; BSR set to: 0
  6396  00413A  0E00               	movlw	0
  6397  00413C  0100               	movlb	0	; () banked
  6398  00413E  1580               	andwf	___ftpack@arg& (0+255),w,b
  6399  004140  0100               	movlb	0	; () banked
  6400  004142  6F85               	movwf	??___ftpack& (0+255),b
  6401  004144  0E00               	movlw	0
  6402  004146  0100               	movlb	0	; () banked
  6403  004148  1581               	andwf	(___ftpack@arg+1)& (0+255),w,b
  6404  00414A  0100               	movlb	0	; () banked
  6405  00414C  6F86               	movwf	(??___ftpack+1)& (0+255),b
  6406  00414E  0EFE               	movlw	254
  6407  004150  0100               	movlb	0	; () banked
  6408  004152  1582               	andwf	(___ftpack@arg+2)& (0+255),w,b
  6409  004154  0100               	movlb	0	; () banked
  6410  004156  6F87               	movwf	(??___ftpack+2)& (0+255),b
  6411  004158  0100               	movlb	0	; () banked
  6412  00415A  5185               	movf	??___ftpack& (0+255),w,b
  6413  00415C  0100               	movlb	0	; () banked
  6414  00415E  1186               	iorwf	(??___ftpack+1)& (0+255),w,b
  6415  004160  0100               	movlb	0	; () banked
  6416  004162  1187               	iorwf	(??___ftpack+2)& (0+255),w,b
  6417  004164  B4D8               	btfsc	status,2,c
  6418  004166  D011               	goto	l6854
  6419  004168  D7E1               	goto	l6846
  6420  00416A                     l6850:
  6421                           
  6422                           ; BSR set to: 0
  6423  00416A  0100               	movlb	0	; () banked
  6424  00416C  2B83               	incf	___ftpack@exp& (0+255),f,b
  6425                           
  6426                           ; BSR set to: 0
  6427  00416E  0E01               	movlw	1
  6428  004170  0100               	movlb	0	; () banked
  6429  004172  2780               	addwf	___ftpack@arg& (0+255),f,b
  6430  004174  0E00               	movlw	0
  6431  004176  0100               	movlb	0	; () banked
  6432  004178  2381               	addwfc	(___ftpack@arg+1)& (0+255),f,b
  6433  00417A  0E00               	movlw	0
  6434  00417C  0100               	movlb	0	; () banked
  6435  00417E  2382               	addwfc	(___ftpack@arg+2)& (0+255),f,b
  6436  004180  0100               	movlb	0	; () banked
  6437  004182  90D8               	bcf	status,0,c
  6438  004184  3382               	rrcf	(___ftpack@arg+2)& (0+255),f,b
  6439  004186  3381               	rrcf	(___ftpack@arg+1)& (0+255),f,b
  6440  004188  3380               	rrcf	___ftpack@arg& (0+255),f,b
  6441  00418A                     l6854:
  6442                           
  6443                           ; BSR set to: 0
  6444  00418A  0E00               	movlw	0
  6445  00418C  0100               	movlb	0	; () banked
  6446  00418E  1580               	andwf	___ftpack@arg& (0+255),w,b
  6447  004190  0100               	movlb	0	; () banked
  6448  004192  6F85               	movwf	??___ftpack& (0+255),b
  6449  004194  0E00               	movlw	0
  6450  004196  0100               	movlb	0	; () banked
  6451  004198  1581               	andwf	(___ftpack@arg+1)& (0+255),w,b
  6452  00419A  0100               	movlb	0	; () banked
  6453  00419C  6F86               	movwf	(??___ftpack+1)& (0+255),b
  6454  00419E  0EFF               	movlw	255
  6455  0041A0  0100               	movlb	0	; () banked
  6456  0041A2  1582               	andwf	(___ftpack@arg+2)& (0+255),w,b
  6457  0041A4  0100               	movlb	0	; () banked
  6458  0041A6  6F87               	movwf	(??___ftpack+2)& (0+255),b
  6459  0041A8  0100               	movlb	0	; () banked
  6460  0041AA  5185               	movf	??___ftpack& (0+255),w,b
  6461  0041AC  0100               	movlb	0	; () banked
  6462  0041AE  1186               	iorwf	(??___ftpack+1)& (0+255),w,b
  6463  0041B0  0100               	movlb	0	; () banked
  6464  0041B2  1187               	iorwf	(??___ftpack+2)& (0+255),w,b
  6465  0041B4  B4D8               	btfsc	status,2,c
  6466  0041B6  D008               	goto	l6858
  6467  0041B8  D7D8               	goto	l6850
  6468  0041BA                     l6856:
  6469                           
  6470                           ; BSR set to: 0
  6471  0041BA  0100               	movlb	0	; () banked
  6472  0041BC  0783               	decf	___ftpack@exp& (0+255),f,b
  6473  0041BE  0100               	movlb	0	; () banked
  6474  0041C0  90D8               	bcf	status,0,c
  6475  0041C2  3780               	rlcf	___ftpack@arg& (0+255),f,b
  6476  0041C4  3781               	rlcf	(___ftpack@arg+1)& (0+255),f,b
  6477  0041C6  3782               	rlcf	(___ftpack@arg+2)& (0+255),f,b
  6478  0041C8                     l6858:
  6479                           
  6480                           ; BSR set to: 0
  6481  0041C8  0100               	movlb	0	; () banked
  6482  0041CA  BF81               	btfsc	(___ftpack@arg+1)& (0+255),7,b
  6483  0041CC  D004               	goto	l1774
  6484                           
  6485                           ; BSR set to: 0
  6486  0041CE  0E02               	movlw	2
  6487  0041D0  0100               	movlb	0	; () banked
  6488  0041D2  6183               	cpfslt	___ftpack@exp& (0+255),b
  6489  0041D4  D7F2               	goto	l6856
  6490  0041D6                     l1774:
  6491                           
  6492                           ; BSR set to: 0
  6493  0041D6  0100               	movlb	0	; () banked
  6494  0041D8  B183               	btfsc	___ftpack@exp& (0+255),0,b
  6495  0041DA  D002               	goto	l6864
  6496                           
  6497                           ; BSR set to: 0
  6498  0041DC  0100               	movlb	0	; () banked
  6499  0041DE  9F81               	bcf	(___ftpack@arg+1)& (0+255),7,b
  6500  0041E0                     l6864:
  6501                           
  6502                           ; BSR set to: 0
  6503  0041E0  0100               	movlb	0	; () banked
  6504  0041E2  90D8               	bcf	status,0,c
  6505  0041E4  3383               	rrcf	___ftpack@exp& (0+255),f,b
  6506  0041E6  0100               	movlb	0	; () banked
  6507  0041E8  5183               	movf	___ftpack@exp& (0+255),w,b
  6508  0041EA  0100               	movlb	0	; () banked
  6509  0041EC  1382               	iorwf	(___ftpack@arg+2)& (0+255),f,b
  6510                           
  6511                           ; BSR set to: 0
  6512  0041EE  0100               	movlb	0	; () banked
  6513  0041F0  5184               	movf	___ftpack@sign& (0+255),w,b
  6514  0041F2  0100               	movlb	0	; () banked
  6515  0041F4  B4D8               	btfsc	status,2,c
  6516  0041F6  D002               	goto	l6870
  6517                           
  6518                           ; BSR set to: 0
  6519  0041F8  0100               	movlb	0	; () banked
  6520  0041FA  8F82               	bsf	(___ftpack@arg+2)& (0+255),7,b
  6521  0041FC                     l6870:
  6522                           
  6523                           ; BSR set to: 0
  6524  0041FC  C080  F080         	movff	___ftpack@arg,?___ftpack
  6525  004200  C081  F081         	movff	___ftpack@arg+1,?___ftpack+1
  6526  004204  C082  F082         	movff	___ftpack@arg+2,?___ftpack+2
  6527  004208  0012               	return	
  6528  00420A                     __end_of___ftpack:
  6529                           	opt stack 0
  6530                           tblptru	equ	0xFF8
  6531                           tblptrh	equ	0xFF7
  6532                           tblptrl	equ	0xFF6
  6533                           tablat	equ	0xFF5
  6534                           prodh	equ	0xFF4
  6535                           prodl	equ	0xFF3
  6536                           postinc0	equ	0xFEE
  6537                           wreg	equ	0xFE8
  6538                           postdec1	equ	0xFE5
  6539                           fsr1l	equ	0xFE1
  6540                           indf2	equ	0xFDF
  6541                           postinc2	equ	0xFDE
  6542                           postdec2	equ	0xFDD
  6543                           fsr2h	equ	0xFDA
  6544                           fsr2l	equ	0xFD9
  6545                           status	equ	0xFD8
  6546                           
  6547 ;; *************** function _Distribution *****************
  6548 ;; Defined at:
  6549 ;;		line 367 in file "sort.c"
  6550 ;; Parameters:    Size  Location     Type
  6551 ;;		None
  6552 ;; Auto vars:     Size  Location     Type
  6553 ;;		None
  6554 ;; Return value:  Size  Location     Type
  6555 ;;                  1    wreg      void 
  6556 ;; Registers used:
  6557 ;;		wreg, status,2, status,0, cstack
  6558 ;; Tracked objects:
  6559 ;;		On entry : 0/0
  6560 ;;		On exit  : 0/0
  6561 ;;		Unchanged: 0/0
  6562 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6563 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6564 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6565 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6566 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6567 ;;Total ram usage:        2 bytes
  6568 ;; Hardware stack levels used:    1
  6569 ;; Hardware stack levels required when called:    8
  6570 ;; This function calls:
  6571 ;;		_updateServoPosition
  6572 ;; This function is called by:
  6573 ;;		_sort
  6574 ;; This function uses a non-reentrant model
  6575 ;;
  6576                           
  6577                           	psect	text14
  6578  0044F6                     __ptext14:
  6579                           	opt stack 0
  6580  0044F6                     _Distribution:
  6581                           	opt stack 21
  6582                           
  6583                           ;sort.c: 368: if(f_can_coming_to_distribution){
  6584                           
  6585                           ; BSR set to: 0
  6586                           ;incstack = 0
  6587  0044F6  0101               	movlb	1	; () banked
  6588  0044F8  513B               	movf	_f_can_coming_to_distribution& (0+255),w,b
  6589  0044FA  0101               	movlb	1	; () banked
  6590  0044FC  113C               	iorwf	(_f_can_coming_to_distribution+1)& (0+255),w,b
  6591  0044FE  B4D8               	btfsc	status,2,c
  6592  004500  0012               	return	
  6593                           
  6594                           ; BSR set to: 1
  6595                           ;sort.c: 369: f_can_distributed = 0;
  6596  004502  0E00               	movlw	0
  6597  004504  0101               	movlb	1	; () banked
  6598  004506  6F3E               	movwf	(_f_can_distributed+1)& (0+255),b
  6599  004508  0E00               	movlw	0
  6600  00450A  6F3D               	movwf	_f_can_distributed& (0+255),b
  6601                           
  6602                           ;sort.c: 376: switch(cur_can){
  6603  00450C  D034               	goto	l8124
  6604  00450E                     l8114:
  6605                           
  6606                           ;sort.c: 378: updateServoPosition(500, 1);
  6607  00450E  0E01               	movlw	1
  6608  004510  0100               	movlb	0	; () banked
  6609  004512  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  6610  004514  0EF4               	movlw	244
  6611  004516  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  6612  004518  0E00               	movlw	0
  6613  00451A  0100               	movlb	0	; () banked
  6614  00451C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  6615  00451E  0E01               	movlw	1
  6616  004520  6F82               	movwf	updateServoPosition@timer& (0+255),b
  6617  004522  EC6A  F026         	call	_updateServoPosition	;wreg free
  6618                           
  6619                           ;sort.c: 379: break;
  6620  004526  D03E               	goto	l8126
  6621  004528                     l8116:
  6622                           
  6623                           ;sort.c: 381: updateServoPosition(850, 1);
  6624  004528  0E03               	movlw	3
  6625  00452A  0100               	movlb	0	; () banked
  6626  00452C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  6627  00452E  0E52               	movlw	82
  6628  004530  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  6629  004532  0E00               	movlw	0
  6630  004534  0100               	movlb	0	; () banked
  6631  004536  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  6632  004538  0E01               	movlw	1
  6633  00453A  6F82               	movwf	updateServoPosition@timer& (0+255),b
  6634  00453C  EC6A  F026         	call	_updateServoPosition	;wreg free
  6635                           
  6636                           ;sort.c: 382: break;
  6637  004540  D031               	goto	l8126
  6638  004542                     l8118:
  6639                           
  6640                           ;sort.c: 384: updateServoPosition(1670, 1);
  6641  004542  0E06               	movlw	6
  6642  004544  0100               	movlb	0	; () banked
  6643  004546  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  6644  004548  0E86               	movlw	134
  6645  00454A  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  6646  00454C  0E00               	movlw	0
  6647  00454E  0100               	movlb	0	; () banked
  6648  004550  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  6649  004552  0E01               	movlw	1
  6650  004554  6F82               	movwf	updateServoPosition@timer& (0+255),b
  6651  004556  EC6A  F026         	call	_updateServoPosition	;wreg free
  6652                           
  6653                           ;sort.c: 385: break;
  6654  00455A  D024               	goto	l8126
  6655  00455C                     l8120:
  6656                           
  6657                           ;sort.c: 387: updateServoPosition(2400, 1);
  6658  00455C  0E09               	movlw	9
  6659  00455E  0100               	movlb	0	; () banked
  6660  004560  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  6661  004562  0E60               	movlw	96
  6662  004564  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  6663  004566  0E00               	movlw	0
  6664  004568  0100               	movlb	0	; () banked
  6665  00456A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  6666  00456C  0E01               	movlw	1
  6667  00456E  6F82               	movwf	updateServoPosition@timer& (0+255),b
  6668  004570  EC6A  F026         	call	_updateServoPosition	;wreg free
  6669                           
  6670                           ;sort.c: 391: }
  6671                           
  6672                           ;sort.c: 390: break;
  6673                           
  6674                           ;sort.c: 389: default:
  6675                           
  6676                           ;sort.c: 388: break;
  6677  004574  D017               	goto	l8126
  6678  004576                     l8124:
  6679  004576  C133  F088         	movff	_cur_can,??_Distribution
  6680  00457A  C134  F089         	movff	_cur_can+1,??_Distribution+1
  6681                           
  6682                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6683                           ; Switch size 1, requested type "space"
  6684                           ; Number of cases is 1, Range of values is 0 to 0
  6685                           ; switch strategies available:
  6686                           ; Name         Instructions Cycles
  6687                           ; simple_byte            4     3 (average)
  6688                           ;	Chosen strategy is simple_byte
  6689  00457E  0100               	movlb	0	; () banked
  6690  004580  5189               	movf	(??_Distribution+1)& (0+255),w,b
  6691  004582  0A00               	xorlw	0	; case 0
  6692  004584  A4D8               	btfss	status,2,c
  6693  004586  D00E               	goto	l8126
  6694                           
  6695                           ; BSR set to: 0
  6696                           ; Switch size 1, requested type "space"
  6697                           ; Number of cases is 4, Range of values is 0 to 3
  6698                           ; switch strategies available:
  6699                           ; Name         Instructions Cycles
  6700                           ; simple_byte           13     7 (average)
  6701                           ;	Chosen strategy is simple_byte
  6702  004588  0100               	movlb	0	; () banked
  6703  00458A  5188               	movf	??_Distribution& (0+255),w,b
  6704  00458C  0A00               	xorlw	0	; case 0
  6705  00458E  B4D8               	btfsc	status,2,c
  6706  004590  D7BE               	goto	l8114
  6707  004592  0A01               	xorlw	1	; case 1
  6708  004594  B4D8               	btfsc	status,2,c
  6709  004596  D7C8               	goto	l8116
  6710  004598  0A03               	xorlw	3	; case 2
  6711  00459A  B4D8               	btfsc	status,2,c
  6712  00459C  D7D2               	goto	l8118
  6713  00459E  0A01               	xorlw	1	; case 3
  6714  0045A0  B4D8               	btfsc	status,2,c
  6715  0045A2  D7DC               	goto	l8120
  6716  0045A4                     l8126:
  6717                           
  6718                           ;sort.c: 392: updateServoPosition(1050, 3);
  6719  0045A4  0E04               	movlw	4
  6720  0045A6  0100               	movlb	0	; () banked
  6721  0045A8  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  6722  0045AA  0E1A               	movlw	26
  6723  0045AC  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  6724  0045AE  0E00               	movlw	0
  6725  0045B0  0100               	movlb	0	; () banked
  6726  0045B2  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  6727  0045B4  0E03               	movlw	3
  6728  0045B6  6F82               	movwf	updateServoPosition@timer& (0+255),b
  6729  0045B8  EC6A  F026         	call	_updateServoPosition	;wreg free
  6730                           
  6731                           ;sort.c: 393: servo_timer_target = 750;
  6732  0045BC  0E02               	movlw	2
  6733  0045BE  6E70               	movwf	_servo_timer_target+1,c	;volatile
  6734  0045C0  0EEE               	movlw	238
  6735  0045C2  6E6F               	movwf	_servo_timer_target,c	;volatile
  6736                           
  6737                           ;sort.c: 394: f_panning_to_bin = 1;
  6738  0045C4  0E00               	movlw	0
  6739  0045C6  6E62               	movwf	_f_panning_to_bin+1,c	;volatile
  6740  0045C8  0E01               	movlw	1
  6741  0045CA  6E61               	movwf	_f_panning_to_bin,c	;volatile
  6742                           
  6743                           ;sort.c: 395: f_can_coming_to_distribution = 0;
  6744  0045CC  0E00               	movlw	0
  6745  0045CE  0101               	movlb	1	; () banked
  6746  0045D0  6F3C               	movwf	(_f_can_coming_to_distribution+1)& (0+255),b
  6747  0045D2  0E00               	movlw	0
  6748  0045D4  6F3B               	movwf	_f_can_coming_to_distribution& (0+255),b
  6749  0045D6  0012               	return	
  6750  0045D8                     __end_of_Distribution:
  6751                           	opt stack 0
  6752                           tblptru	equ	0xFF8
  6753                           tblptrh	equ	0xFF7
  6754                           tblptrl	equ	0xFF6
  6755                           tablat	equ	0xFF5
  6756                           prodh	equ	0xFF4
  6757                           prodl	equ	0xFF3
  6758                           postinc0	equ	0xFEE
  6759                           wreg	equ	0xFE8
  6760                           postdec1	equ	0xFE5
  6761                           fsr1l	equ	0xFE1
  6762                           indf2	equ	0xFDF
  6763                           postinc2	equ	0xFDE
  6764                           postdec2	equ	0xFDD
  6765                           fsr2h	equ	0xFDA
  6766                           fsr2l	equ	0xFD9
  6767                           status	equ	0xFD8
  6768                           
  6769 ;; *************** function _machineConfig *****************
  6770 ;; Defined at:
  6771 ;;		line 15 in file "MachineConfig.c"
  6772 ;; Parameters:    Size  Location     Type
  6773 ;;		None
  6774 ;; Auto vars:     Size  Location     Type
  6775 ;;		None
  6776 ;; Return value:  Size  Location     Type
  6777 ;;                  1    wreg      void 
  6778 ;; Registers used:
  6779 ;;		wreg, status,2
  6780 ;; Tracked objects:
  6781 ;;		On entry : 0/0
  6782 ;;		On exit  : 0/0
  6783 ;;		Unchanged: 0/0
  6784 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6785 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6786 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6787 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6788 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6789 ;;Total ram usage:        0 bytes
  6790 ;; Hardware stack levels used:    1
  6791 ;; Hardware stack levels required when called:    7
  6792 ;; This function calls:
  6793 ;;		Nothing
  6794 ;; This function is called by:
  6795 ;;		_main
  6796 ;; This function uses a non-reentrant model
  6797 ;;
  6798                           
  6799                           	psect	text15
  6800  00508E                     __ptext15:
  6801                           	opt stack 0
  6802  00508E                     _machineConfig:
  6803                           	opt stack 23
  6804                           
  6805                           ;MachineConfig.c: 17: OSCCON = 0xF0;
  6806                           
  6807                           ; BSR set to: 1
  6808                           ;incstack = 0
  6809  00508E  0EF0               	movlw	240
  6810  005090  6ED3               	movwf	4051,c	;volatile
  6811                           
  6812                           ;MachineConfig.c: 18: OSCTUNEbits.PLLEN = 1;
  6813  005092  8C9B               	bsf	3995,6,c	;volatile
  6814                           
  6815                           ;MachineConfig.c: 22: TRISA = 0b00000111;
  6816  005094  0E07               	movlw	7
  6817  005096  6E92               	movwf	3986,c	;volatile
  6818                           
  6819                           ;MachineConfig.c: 24: TRISB = 0b11110010;
  6820  005098  0EF2               	movlw	242
  6821  00509A  6E93               	movwf	3987,c	;volatile
  6822                           
  6823                           ;MachineConfig.c: 27: TRISC = 0x00;
  6824  00509C  0E00               	movlw	0
  6825  00509E  6E94               	movwf	3988,c	;volatile
  6826                           
  6827                           ;MachineConfig.c: 31: TRISD = 0x00;
  6828  0050A0  0E00               	movlw	0
  6829  0050A2  6E95               	movwf	3989,c	;volatile
  6830                           
  6831                           ;MachineConfig.c: 34: TRISE = 0x00;
  6832  0050A4  0E00               	movlw	0
  6833  0050A6  6E96               	movwf	3990,c	;volatile
  6834                           
  6835                           ;MachineConfig.c: 37: LATA = 0x00;
  6836  0050A8  0E00               	movlw	0
  6837  0050AA  6E89               	movwf	3977,c	;volatile
  6838                           
  6839                           ;MachineConfig.c: 38: LATB = 0x00;
  6840  0050AC  0E00               	movlw	0
  6841  0050AE  6E8A               	movwf	3978,c	;volatile
  6842                           
  6843                           ;MachineConfig.c: 39: LATC = 0x00;
  6844  0050B0  0E00               	movlw	0
  6845  0050B2  6E8B               	movwf	3979,c	;volatile
  6846                           
  6847                           ;MachineConfig.c: 40: LATD = 0x00;
  6848  0050B4  0E00               	movlw	0
  6849  0050B6  6E8C               	movwf	3980,c	;volatile
  6850                           
  6851                           ;MachineConfig.c: 41: LATE = 0x00;
  6852  0050B8  0E00               	movlw	0
  6853  0050BA  6E8D               	movwf	3981,c	;volatile
  6854                           
  6855                           ;MachineConfig.c: 43: nRBPU = 0;
  6856  0050BC  9EF1               	bcf	intcon2,7,c	;volatile
  6857                           
  6858                           ;MachineConfig.c: 46: ADCON0 = 0x00;
  6859  0050BE  0E00               	movlw	0
  6860  0050C0  6EC2               	movwf	4034,c	;volatile
  6861                           
  6862                           ;MachineConfig.c: 47: ADCON1 = 0b00001100;
  6863  0050C2  0E0C               	movlw	12
  6864  0050C4  6EC1               	movwf	4033,c	;volatile
  6865                           
  6866                           ;MachineConfig.c: 50: CVRCON = 0x00;
  6867  0050C6  0E00               	movlw	0
  6868  0050C8  6EB5               	movwf	4021,c	;volatile
  6869                           
  6870                           ;MachineConfig.c: 51: CMCONbits.CIS = 0;
  6871  0050CA  96B4               	bcf	4020,3,c	;volatile
  6872                           
  6873                           ;MachineConfig.c: 52: ADCON2 = 0b10110001;
  6874  0050CC  0EB1               	movlw	177
  6875  0050CE  6EC0               	movwf	4032,c	;volatile
  6876                           
  6877                           ;MachineConfig.c: 55: INT1IE = 1;
  6878  0050D0  86F0               	bsf	intcon3,3,c	;volatile
  6879                           
  6880                           ;MachineConfig.c: 57: TMR0IE = 1;
  6881  0050D2  8AF2               	bsf	intcon,5,c	;volatile
  6882                           
  6883                           ;MachineConfig.c: 58: TMR1IE = 1;
  6884  0050D4  809D               	bsf	3997,0,c	;volatile
  6885                           
  6886                           ;MachineConfig.c: 59: TMR2IE = 1;
  6887  0050D6  829D               	bsf	3997,1,c	;volatile
  6888                           
  6889                           ;MachineConfig.c: 60: TMR3IE = 1;
  6890  0050D8  82A0               	bsf	4000,1,c	;volatile
  6891                           
  6892                           ;MachineConfig.c: 62: T1CON = 0b10110000;
  6893  0050DA  0EB0               	movlw	176
  6894  0050DC  6ECD               	movwf	4045,c	;volatile
  6895                           
  6896                           ;MachineConfig.c: 63: T2CON = 0b01111011;
  6897  0050DE  0E7B               	movlw	123
  6898  0050E0  6ECA               	movwf	4042,c	;volatile
  6899                           
  6900                           ;MachineConfig.c: 64: PR2 = 0x22;
  6901  0050E2  0E22               	movlw	34
  6902  0050E4  6ECB               	movwf	4043,c	;volatile
  6903                           
  6904                           ;MachineConfig.c: 65: T3CON = 0b10110000;
  6905  0050E6  0EB0               	movlw	176
  6906  0050E8  6EB1               	movwf	4017,c	;volatile
  6907                           
  6908                           ;MachineConfig.c: 66: PEIE = 1;
  6909  0050EA  8CF2               	bsf	intcon,6,c	;volatile
  6910                           
  6911                           ;MachineConfig.c: 67: ADIE = 0;
  6912  0050EC  9C9D               	bcf	3997,6,c	;volatile
  6913                           
  6914                           ;MachineConfig.c: 68: (INTCONbits.GIE = 0);
  6915  0050EE  9EF2               	bcf	intcon,7,c	;volatile
  6916  0050F0  0012               	return		;funcret
  6917  0050F2                     __end_of_machineConfig:
  6918                           	opt stack 0
  6919                           tblptru	equ	0xFF8
  6920                           tblptrh	equ	0xFF7
  6921                           tblptrl	equ	0xFF6
  6922                           tablat	equ	0xFF5
  6923                           prodh	equ	0xFF4
  6924                           prodl	equ	0xFF3
  6925                           intcon	equ	0xFF2
  6926                           intcon2	equ	0xFF1
  6927                           intcon3	equ	0xFF0
  6928                           postinc0	equ	0xFEE
  6929                           wreg	equ	0xFE8
  6930                           postdec1	equ	0xFE5
  6931                           fsr1l	equ	0xFE1
  6932                           indf2	equ	0xFDF
  6933                           postinc2	equ	0xFDE
  6934                           postdec2	equ	0xFDD
  6935                           fsr2h	equ	0xFDA
  6936                           fsr2l	equ	0xFD9
  6937                           status	equ	0xFD8
  6938                           
  6939 ;; *************** function _logRun *****************
  6940 ;; Defined at:
  6941 ;;		line 88 in file "EEPROM.c"
  6942 ;; Parameters:    Size  Location     Type
  6943 ;;		None
  6944 ;; Auto vars:     Size  Location     Type
  6945 ;;  byte_i          1   53[BANK0 ] unsigned char 
  6946 ;;  i               2   55[BANK0 ] int 
  6947 ;;  num             1   49[BANK0 ] unsigned char 
  6948 ;;  addr            2   57[BANK0 ] unsigned short 
  6949 ;;  byte11          1   54[BANK0 ] unsigned char 
  6950 ;;  byte3           1   52[BANK0 ] unsigned char 
  6951 ;;  byte2           1   51[BANK0 ] unsigned char 
  6952 ;;  byte1           1   50[BANK0 ] unsigned char 
  6953 ;; Return value:  Size  Location     Type
  6954 ;;                  1    wreg      void 
  6955 ;; Registers used:
  6956 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6957 ;; Tracked objects:
  6958 ;;		On entry : 0/0
  6959 ;;		On exit  : 0/0
  6960 ;;		Unchanged: 0/0
  6961 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6962 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6963 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6964 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6965 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6966 ;;Total ram usage:       10 bytes
  6967 ;; Hardware stack levels used:    1
  6968 ;; Hardware stack levels required when called:   11
  6969 ;; This function calls:
  6970 ;;		_EEPROM_read
  6971 ;;		_EEPROM_write
  6972 ;; This function is called by:
  6973 ;;		_main
  6974 ;; This function uses a non-reentrant model
  6975 ;;
  6976                           
  6977                           	psect	text16
  6978  003E9A                     __ptext16:
  6979                           	opt stack 0
  6980  003E9A                     _logRun:
  6981                           	opt stack 19
  6982                           
  6983                           ;EEPROM.c: 101: sel = EEPROM_read(0);
  6984                           
  6985                           ;incstack = 0
  6986  003E9A  0E00               	movlw	0
  6987  003E9C  0100               	movlb	0	; () banked
  6988  003E9E  6F81               	movwf	(EEPROM_read@address+1)& (0+255),b
  6989  003EA0  0E00               	movlw	0
  6990  003EA2  6F80               	movwf	EEPROM_read@address& (0+255),b
  6991  003EA4  EC54  F02D         	call	_EEPROM_read	;wreg free
  6992  003EA8  0100               	movlb	0	; () banked
  6993  003EAA  6FFD               	movwf	_sel& (0+255),b
  6994                           
  6995                           ; BSR set to: 0
  6996                           ;EEPROM.c: 102: unsigned short addr = 1 + 11 * sel;
  6997  003EAC  0100               	movlb	0	; () banked
  6998  003EAE  51FD               	movf	_sel& (0+255),w,b
  6999  003EB0  0D0B               	mullw	11
  7000  003EB2  0E01               	movlw	1
  7001  003EB4  24F3               	addwf	prodl,w,c
  7002  003EB6  0100               	movlb	0	; () banked
  7003  003EB8  6FB9               	movwf	logRun@addr& (0+255),b
  7004  003EBA  0E00               	movlw	0
  7005  003EBC  20F4               	addwfc	prodh,w,c
  7006  003EBE  0100               	movlb	0	; () banked
  7007  003EC0  6FBA               	movwf	(logRun@addr+1)& (0+255),b
  7008                           
  7009                           ; BSR set to: 0
  7010                           ;EEPROM.c: 105: if (sel < 3){
  7011  003EC2  0E03               	movlw	3
  7012  003EC4  0100               	movlb	0	; () banked
  7013  003EC6  61FD               	cpfslt	_sel& (0+255),b
  7014  003EC8  D00E               	goto	l9766
  7015                           
  7016                           ; BSR set to: 0
  7017                           ;EEPROM.c: 106: unsigned char num = sel+1;
  7018  003ECA  0100               	movlb	0	; () banked
  7019  003ECC  29FD               	incf	_sel& (0+255),w,b
  7020  003ECE  0100               	movlb	0	; () banked
  7021  003ED0  6FB1               	movwf	logRun@num& (0+255),b
  7022                           
  7023                           ; BSR set to: 0
  7024                           ;EEPROM.c: 107: EEPROM_write(0, num);
  7025  003ED2  0E00               	movlw	0
  7026  003ED4  0100               	movlb	0	; () banked
  7027  003ED6  6FAC               	movwf	(EEPROM_write@address+1)& (0+255),b
  7028  003ED8  0E00               	movlw	0
  7029  003EDA  6FAB               	movwf	EEPROM_write@address& (0+255),b
  7030  003EDC  C0B1  F0AD         	movff	logRun@num,EEPROM_write@data
  7031  003EE0  EC07  F022         	call	_EEPROM_write	;wreg free
  7032                           
  7033                           ;EEPROM.c: 108: }
  7034  003EE4  D00A               	goto	l9768
  7035  003EE6                     l9766:
  7036                           
  7037                           ;EEPROM.c: 109: else{
  7038                           ;EEPROM.c: 110: EEPROM_write(0, 0);
  7039  003EE6  0E00               	movlw	0
  7040  003EE8  0100               	movlb	0	; () banked
  7041  003EEA  6FAC               	movwf	(EEPROM_write@address+1)& (0+255),b
  7042  003EEC  0E00               	movlw	0
  7043  003EEE  6FAB               	movwf	EEPROM_write@address& (0+255),b
  7044  003EF0  0E00               	movlw	0
  7045  003EF2  0100               	movlb	0	; () banked
  7046  003EF4  6FAD               	movwf	EEPROM_write@data& (0+255),b
  7047  003EF6  EC07  F022         	call	_EEPROM_write	;wreg free
  7048  003EFA                     l9768:
  7049                           
  7050                           ;EEPROM.c: 111: }
  7051                           ;EEPROM.c: 114: unsigned char byte1 = 0b10000000 | count_total;
  7052  003EFA  0100               	movlb	0	; () banked
  7053  003EFC  51FE               	movf	_count_total& (0+255),w,b
  7054  003EFE  0980               	iorlw	128
  7055  003F00  0100               	movlb	0	; () banked
  7056  003F02  6FB2               	movwf	logRun@byte1& (0+255),b
  7057                           
  7058                           ; BSR set to: 0
  7059                           ;EEPROM.c: 115: EEPROM_write(addr, byte1);
  7060  003F04  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  7061  003F08  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  7062  003F0C  C0B2  F0AD         	movff	logRun@byte1,EEPROM_write@data
  7063  003F10  EC07  F022         	call	_EEPROM_write	;wreg free
  7064                           
  7065                           ;EEPROM.c: 116: addr++;
  7066  003F14  0100               	movlb	0	; () banked
  7067  003F16  4BB9               	infsnz	logRun@addr& (0+255),f,b
  7068  003F18  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  7069                           
  7070                           ; BSR set to: 0
  7071                           ;EEPROM.c: 119: unsigned char byte2 = (count_pop_no_tab << 4) | count_pop_w_tab;
  7072  003F1A  0101               	movlb	1	; () banked
  7073  003F1C  392F               	swapf	_count_pop_no_tab& (0+255),w,b
  7074  003F1E  0BF0               	andlw	240
  7075  003F20  0101               	movlb	1	; () banked
  7076  003F22  1131               	iorwf	_count_pop_w_tab& (0+255),w,b
  7077  003F24  0100               	movlb	0	; () banked
  7078  003F26  6FB3               	movwf	logRun@byte2& (0+255),b
  7079                           
  7080                           ; BSR set to: 0
  7081                           ;EEPROM.c: 120: EEPROM_write(addr, byte2);
  7082  003F28  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  7083  003F2C  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  7084  003F30  C0B3  F0AD         	movff	logRun@byte2,EEPROM_write@data
  7085  003F34  EC07  F022         	call	_EEPROM_write	;wreg free
  7086                           
  7087                           ;EEPROM.c: 121: addr++;
  7088  003F38  0100               	movlb	0	; () banked
  7089  003F3A  4BB9               	infsnz	logRun@addr& (0+255),f,b
  7090  003F3C  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  7091                           
  7092                           ; BSR set to: 0
  7093                           ;EEPROM.c: 122: unsigned char byte3 = (count_can_w_lab << 4) | count_can_no_lab;
  7094  003F3E  0101               	movlb	1	; () banked
  7095  003F40  392D               	swapf	_count_can_w_lab& (0+255),w,b
  7096  003F42  0BF0               	andlw	240
  7097  003F44  0101               	movlb	1	; () banked
  7098  003F46  112B               	iorwf	_count_can_no_lab& (0+255),w,b
  7099  003F48  0100               	movlb	0	; () banked
  7100  003F4A  6FB4               	movwf	logRun@byte3& (0+255),b
  7101                           
  7102                           ; BSR set to: 0
  7103                           ;EEPROM.c: 123: EEPROM_write(addr, byte3);
  7104  003F4C  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  7105  003F50  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  7106  003F54  C0B4  F0AD         	movff	logRun@byte3,EEPROM_write@data
  7107  003F58  EC07  F022         	call	_EEPROM_write	;wreg free
  7108                           
  7109                           ;EEPROM.c: 124: addr++;
  7110  003F5C  0100               	movlb	0	; () banked
  7111  003F5E  4BB9               	infsnz	logRun@addr& (0+255),f,b
  7112  003F60  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  7113                           
  7114                           ; BSR set to: 0
  7115                           ;EEPROM.c: 127: for(int i = 0; i < 7; i++){
  7116  003F62  0E00               	movlw	0
  7117  003F64  0100               	movlb	0	; () banked
  7118  003F66  6FB8               	movwf	(logRun@i+1)& (0+255),b
  7119  003F68  0E00               	movlw	0
  7120  003F6A  6FB7               	movwf	logRun@i& (0+255),b
  7121                           
  7122                           ; BSR set to: 0
  7123  003F6C  0100               	movlb	0	; () banked
  7124  003F6E  BFB8               	btfsc	(logRun@i+1)& (0+255),7,b
  7125  003F70  D008               	goto	l9792
  7126  003F72  0100               	movlb	0	; () banked
  7127  003F74  51B8               	movf	(logRun@i+1)& (0+255),w,b
  7128  003F76  E128               	bnz	l1133
  7129  003F78  0E07               	movlw	7
  7130  003F7A  0100               	movlb	0	; () banked
  7131  003F7C  5DB7               	subwf	logRun@i& (0+255),w,b
  7132  003F7E  B0D8               	btfsc	status,0,c
  7133  003F80  D023               	goto	l1133
  7134  003F82                     l9792:
  7135                           
  7136                           ; BSR set to: 0
  7137                           ;EEPROM.c: 128: unsigned char byte_i = startTime[i];
  7138  003F82  90D8               	bcf	status,0,c
  7139  003F84  0100               	movlb	0	; () banked
  7140  003F86  35B7               	rlcf	logRun@i& (0+255),w,b
  7141  003F88  6ED9               	movwf	fsr2l,c
  7142  003F8A  0100               	movlb	0	; () banked
  7143  003F8C  35B8               	rlcf	(logRun@i+1)& (0+255),w,b
  7144  003F8E  6EDA               	movwf	fsr2h,c
  7145  003F90  0E0E               	movlw	low _startTime
  7146  003F92  26D9               	addwf	fsr2l,f,c
  7147  003F94  0E01               	movlw	high _startTime
  7148  003F96  22DA               	addwfc	fsr2h,f,c
  7149  003F98  50DF               	movf	indf2,w,c
  7150  003F9A  0100               	movlb	0	; () banked
  7151  003F9C  6FB5               	movwf	logRun@byte_i& (0+255),b
  7152                           
  7153                           ; BSR set to: 0
  7154                           ;EEPROM.c: 129: EEPROM_write(addr, byte_i);
  7155  003F9E  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  7156  003FA2  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  7157  003FA6  C0B5  F0AD         	movff	logRun@byte_i,EEPROM_write@data
  7158  003FAA  EC07  F022         	call	_EEPROM_write	;wreg free
  7159                           
  7160                           ;EEPROM.c: 130: addr++;
  7161  003FAE  0100               	movlb	0	; () banked
  7162  003FB0  4BB9               	infsnz	logRun@addr& (0+255),f,b
  7163  003FB2  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  7164                           
  7165                           ; BSR set to: 0
  7166  003FB4  0100               	movlb	0	; () banked
  7167  003FB6  4BB7               	infsnz	logRun@i& (0+255),f,b
  7168  003FB8  2BB8               	incf	(logRun@i+1)& (0+255),f,b
  7169                           
  7170                           ; BSR set to: 0
  7171  003FBA  0100               	movlb	0	; () banked
  7172  003FBC  BFB8               	btfsc	(logRun@i+1)& (0+255),7,b
  7173  003FBE  D7E1               	goto	l9792
  7174  003FC0  0100               	movlb	0	; () banked
  7175  003FC2  51B8               	movf	(logRun@i+1)& (0+255),w,b
  7176  003FC4  E101               	bnz	u9210
  7177  003FC6  D7D8               	goto	L11
  7178  003FC8                     u9210:
  7179  003FC8                     l1133:
  7180                           
  7181                           ; BSR set to: 0
  7182                           ;EEPROM.c: 131: }
  7183                           ;EEPROM.c: 134: unsigned char byte11 = total_time;
  7184  003FC8  C0FA  F0B6         	movff	_total_time,logRun@byte11
  7185                           
  7186                           ; BSR set to: 0
  7187                           ;EEPROM.c: 135: EEPROM_write(addr, byte11);
  7188  003FCC  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  7189  003FD0  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  7190  003FD4  C0B6  F0AD         	movff	logRun@byte11,EEPROM_write@data
  7191  003FD8  EC07  F022         	call	_EEPROM_write	;wreg free
  7192  003FDC  0012               	return		;funcret
  7193  003FDE                     __end_of_logRun:
  7194                           	opt stack 0
  7195                           tblptru	equ	0xFF8
  7196                           tblptrh	equ	0xFF7
  7197                           tblptrl	equ	0xFF6
  7198                           tablat	equ	0xFF5
  7199                           prodh	equ	0xFF4
  7200                           prodl	equ	0xFF3
  7201                           intcon	equ	0xFF2
  7202                           intcon2	equ	0xFF1
  7203                           intcon3	equ	0xFF0
  7204                           postinc0	equ	0xFEE
  7205                           wreg	equ	0xFE8
  7206                           postdec1	equ	0xFE5
  7207                           fsr1l	equ	0xFE1
  7208                           indf2	equ	0xFDF
  7209                           postinc2	equ	0xFDE
  7210                           postdec2	equ	0xFDD
  7211                           fsr2h	equ	0xFDA
  7212                           fsr2l	equ	0xFD9
  7213                           status	equ	0xFD8
  7214                           
  7215 ;; *************** function _EEPROM_write *****************
  7216 ;; Defined at:
  7217 ;;		line 36 in file "EEPROM.c"
  7218 ;; Parameters:    Size  Location     Type
  7219 ;;  address         2   43[BANK0 ] unsigned short 
  7220 ;;  data            1   45[BANK0 ] unsigned char 
  7221 ;; Auto vars:     Size  Location     Type
  7222 ;;  i               1   48[BANK0 ] unsigned char 
  7223 ;;  i               1   47[BANK0 ] unsigned char 
  7224 ;; Return value:  Size  Location     Type
  7225 ;;                  1    wreg      void 
  7226 ;; Registers used:
  7227 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7228 ;; Tracked objects:
  7229 ;;		On entry : 0/0
  7230 ;;		On exit  : 0/0
  7231 ;;		Unchanged: 0/0
  7232 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7233 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7234 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7235 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7236 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7237 ;;Total ram usage:        6 bytes
  7238 ;; Hardware stack levels used:    1
  7239 ;; Hardware stack levels required when called:   10
  7240 ;; This function calls:
  7241 ;;		_EEPROM_read
  7242 ;;		_lcdInst
  7243 ;;		_printf
  7244 ;; This function is called by:
  7245 ;;		_Loading
  7246 ;;		_logRun
  7247 ;; This function uses a non-reentrant model
  7248 ;;
  7249                           
  7250                           	psect	text17
  7251  00440E                     __ptext17:
  7252                           	opt stack 0
  7253  00440E                     _EEPROM_write:
  7254                           	opt stack 18
  7255                           
  7256                           ;EEPROM.c: 37: EECON1bits.WREN = 1;
  7257                           
  7258                           ;incstack = 0
  7259  00440E  84A6               	bsf	4006,2,c	;volatile
  7260                           
  7261                           ;EEPROM.c: 40: EEADRH = (unsigned char)(address >> 8);
  7262  004410  0100               	movlb	0	; () banked
  7263  004412  51AC               	movf	(EEPROM_write@address+1)& (0+255),w,b
  7264  004414  6EAA               	movwf	4010,c	;volatile
  7265                           
  7266                           ; BSR set to: 0
  7267                           ;EEPROM.c: 41: EEADR = (unsigned char)address;
  7268  004416  C0AB  FFA9         	movff	EEPROM_write@address,4009	;volatile
  7269                           
  7270                           ; BSR set to: 0
  7271                           ;EEPROM.c: 43: EEDATA = data;
  7272  00441A  C0AD  FFA8         	movff	EEPROM_write@data,4008	;volatile
  7273                           
  7274                           ; BSR set to: 0
  7275                           ;EEPROM.c: 44: EECON1bits.EEPGD = 0;
  7276  00441E  9EA6               	bcf	4006,7,c	;volatile
  7277                           
  7278                           ; BSR set to: 0
  7279                           ;EEPROM.c: 45: EECON1bits.CFGS = 0;
  7280  004420  9CA6               	bcf	4006,6,c	;volatile
  7281                           
  7282                           ; BSR set to: 0
  7283                           ;EEPROM.c: 47: (INTCONbits.GIE = 0);
  7284  004422  9EF2               	bcf	intcon,7,c	;volatile
  7285                           
  7286                           ;EEPROM.c: 49: EECON2 = 0x55;
  7287  004424  0E55               	movlw	85
  7288  004426  6EA7               	movwf	4007,c	;volatile
  7289                           
  7290                           ;EEPROM.c: 50: EECON2 = 0x0AA;
  7291  004428  0EAA               	movlw	170
  7292  00442A  6EA7               	movwf	4007,c	;volatile
  7293                           
  7294                           ; BSR set to: 0
  7295                           ;EEPROM.c: 51: EECON1bits.WR = 1;
  7296  00442C  82A6               	bsf	4006,1,c	;volatile
  7297                           
  7298                           ; BSR set to: 0
  7299                           ;EEPROM.c: 52: (INTCONbits.GIE = 1);
  7300  00442E  8EF2               	bsf	intcon,7,c	;volatile
  7301  004430                     l1111:
  7302  004430  A8A1               	btfss	4001,4,c	;volatile
  7303  004432  D7FE               	goto	l1111
  7304                           
  7305                           ;EEPROM.c: 57: PIR2bits.EEIF = 0;
  7306  004434  98A1               	bcf	4001,4,c	;volatile
  7307                           
  7308                           ;EEPROM.c: 58: EECON1bits.WREN = 0;
  7309  004436  94A6               	bcf	4006,2,c	;volatile
  7310                           
  7311                           ;EEPROM.c: 61: if(debug){
  7312  004438  0101               	movlb	1	; () banked
  7313  00443A  5135               	movf	_debug& (0+255),w,b
  7314  00443C  0101               	movlb	1	; () banked
  7315  00443E  1136               	iorwf	(_debug+1)& (0+255),w,b
  7316  004440  B4D8               	btfsc	status,2,c
  7317  004442  0012               	return	
  7318                           
  7319                           ; BSR set to: 1
  7320                           ;EEPROM.c: 62: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7321  004444  0E01               	movlw	1
  7322  004446  EC86  F02D         	call	_lcdInst
  7323  00444A  0E68               	movlw	104
  7324  00444C  0100               	movlb	0	; () banked
  7325  00444E  6FAE               	movwf	??_EEPROM_write& (0+255),b
  7326  004450  0EE4               	movlw	228
  7327  004452                     u9957:
  7328  004452  2EE8               	decfsz	wreg,f,c
  7329  004454  D7FE               	bra	u9957
  7330  004456  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  7331  004458  D7FC               	bra	u9957
  7332  00445A  F000               	nop	
  7333                           
  7334                           ;EEPROM.c: 63: lcdInst(0b10000000);;
  7335  00445C  0E80               	movlw	128
  7336  00445E  EC86  F02D         	call	_lcdInst
  7337                           
  7338                           ;EEPROM.c: 64: if(EEPROM_read(address)==data){
  7339  004462  C0AB  F080         	movff	EEPROM_write@address,EEPROM_read@address
  7340  004466  C0AC  F081         	movff	EEPROM_write@address+1,EEPROM_read@address+1
  7341  00446A  EC54  F02D         	call	_EEPROM_read	;wreg free
  7342  00446E  0100               	movlb	0	; () banked
  7343  004470  19AD               	xorwf	EEPROM_write@data& (0+255),w,b
  7344  004472  A4D8               	btfss	status,2,c
  7345  004474  D024               	goto	l7330
  7346                           
  7347                           ; BSR set to: 0
  7348                           ;EEPROM.c: 65: printf("(data: %u, addr: %u)", data, address);
  7349  004476  0EC6               	movlw	low STR_67
  7350  004478  0100               	movlb	0	; () banked
  7351  00447A  6F8E               	movwf	printf@f& (0+255),b
  7352  00447C  0EFA               	movlw	high STR_67
  7353  00447E  0100               	movlb	0	; () banked
  7354  004480  6F8F               	movwf	(printf@f+1)& (0+255),b
  7355  004482  C0AD  F090         	movff	EEPROM_write@data,?_printf+2
  7356  004486  0100               	movlb	0	; () banked
  7357  004488  6B91               	clrf	(?_printf+3)& (0+255),b
  7358  00448A  C0AB  F092         	movff	EEPROM_write@address,?_printf+4
  7359  00448E  C0AC  F093         	movff	EEPROM_write@address+1,?_printf+5
  7360  004492  ECC2  F00B         	call	_printf	;wreg free
  7361                           
  7362                           ;EEPROM.c: 66: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));}
      +                          ;
  7363  004496  0E00               	movlw	0
  7364  004498  0100               	movlb	0	; () banked
  7365  00449A  6FAF               	movwf	EEPROM_write@i& (0+255),b
  7366  00449C                     l7322:
  7367                           
  7368                           ; BSR set to: 0
  7369  00449C  0E63               	movlw	99
  7370  00449E  0100               	movlb	0	; () banked
  7371  0044A0  65AF               	cpfsgt	EEPROM_write@i& (0+255),b
  7372  0044A2  D001               	goto	l7326
  7373  0044A4  0012               	return	
  7374  0044A6                     l7326:
  7375                           
  7376                           ; BSR set to: 0
  7377  0044A6  0E68               	movlw	104
  7378  0044A8  0100               	movlb	0	; () banked
  7379  0044AA  6FAE               	movwf	??_EEPROM_write& (0+255),b
  7380  0044AC  0EE4               	movlw	228
  7381  0044AE                     u9967:
  7382  0044AE  2EE8               	decfsz	wreg,f,c
  7383  0044B0  D7FE               	bra	u9967
  7384  0044B2  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  7385  0044B4  D7FC               	bra	u9967
  7386  0044B6  F000               	nop	
  7387  0044B8  0100               	movlb	0	; () banked
  7388  0044BA  2BAF               	incf	EEPROM_write@i& (0+255),f,b
  7389  0044BC  D7EF               	goto	l7322
  7390  0044BE                     l7330:
  7391                           
  7392                           ; BSR set to: 0
  7393                           ;EEPROM.c: 68: else{ printf("FAILED"); for(char i=0;i<100;i++){_delay((unsigned long)((1
      +                          0)*(32000000/4000.0)));}; }
  7394  0044BE  0EBC               	movlw	low STR_68
  7395  0044C0  0100               	movlb	0	; () banked
  7396  0044C2  6F8E               	movwf	printf@f& (0+255),b
  7397  0044C4  0EFF               	movlw	high STR_68
  7398  0044C6  0100               	movlb	0	; () banked
  7399  0044C8  6F8F               	movwf	(printf@f+1)& (0+255),b
  7400  0044CA  ECC2  F00B         	call	_printf	;wreg free
  7401  0044CE  0E00               	movlw	0
  7402  0044D0  0100               	movlb	0	; () banked
  7403  0044D2  6FB0               	movwf	EEPROM_write@i_1399& (0+255),b
  7404  0044D4                     l7334:
  7405                           
  7406                           ; BSR set to: 0
  7407  0044D4  0E63               	movlw	99
  7408  0044D6  0100               	movlb	0	; () banked
  7409  0044D8  65B0               	cpfsgt	EEPROM_write@i_1399& (0+255),b
  7410  0044DA  D001               	goto	l7338
  7411  0044DC  0012               	return	
  7412  0044DE                     l7338:
  7413                           
  7414                           ; BSR set to: 0
  7415  0044DE  0E68               	movlw	104
  7416  0044E0  0100               	movlb	0	; () banked
  7417  0044E2  6FAE               	movwf	??_EEPROM_write& (0+255),b
  7418  0044E4  0EE4               	movlw	228
  7419  0044E6                     u9977:
  7420  0044E6  2EE8               	decfsz	wreg,f,c
  7421  0044E8  D7FE               	bra	u9977
  7422  0044EA  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  7423  0044EC  D7FC               	bra	u9977
  7424  0044EE  F000               	nop	
  7425  0044F0  0100               	movlb	0	; () banked
  7426  0044F2  2BB0               	incf	EEPROM_write@i_1399& (0+255),f,b
  7427  0044F4  D7EF               	goto	l7334
  7428  0044F6                     __end_of_EEPROM_write:
  7429                           	opt stack 0
  7430                           tblptru	equ	0xFF8
  7431                           tblptrh	equ	0xFF7
  7432                           tblptrl	equ	0xFF6
  7433                           tablat	equ	0xFF5
  7434                           prodh	equ	0xFF4
  7435                           prodl	equ	0xFF3
  7436                           intcon	equ	0xFF2
  7437                           intcon2	equ	0xFF1
  7438                           intcon3	equ	0xFF0
  7439                           postinc0	equ	0xFEE
  7440                           wreg	equ	0xFE8
  7441                           postdec1	equ	0xFE5
  7442                           fsr1l	equ	0xFE1
  7443                           indf2	equ	0xFDF
  7444                           postinc2	equ	0xFDE
  7445                           postdec2	equ	0xFDD
  7446                           fsr2h	equ	0xFDA
  7447                           fsr2l	equ	0xFD9
  7448                           status	equ	0xFD8
  7449                           
  7450 ;; *************** function _EEPROM_read *****************
  7451 ;; Defined at:
  7452 ;;		line 72 in file "EEPROM.c"
  7453 ;; Parameters:    Size  Location     Type
  7454 ;;  address         2    0[BANK0 ] unsigned short 
  7455 ;; Auto vars:     Size  Location     Type
  7456 ;;		None
  7457 ;; Return value:  Size  Location     Type
  7458 ;;                  1    wreg      unsigned char 
  7459 ;; Registers used:
  7460 ;;		wreg, status,2
  7461 ;; Tracked objects:
  7462 ;;		On entry : 0/0
  7463 ;;		On exit  : 0/0
  7464 ;;		Unchanged: 0/0
  7465 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7466 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7467 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7468 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7469 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7470 ;;Total ram usage:        2 bytes
  7471 ;; Hardware stack levels used:    1
  7472 ;; Hardware stack levels required when called:    7
  7473 ;; This function calls:
  7474 ;;		Nothing
  7475 ;; This function is called by:
  7476 ;;		_Loading
  7477 ;;		_EEPROM_write
  7478 ;;		_logRun
  7479 ;; This function uses a non-reentrant model
  7480 ;;
  7481                           
  7482                           	psect	text18
  7483  005AA8                     __ptext18:
  7484                           	opt stack 0
  7485  005AA8                     _EEPROM_read:
  7486                           	opt stack 20
  7487                           
  7488                           ;EEPROM.c: 74: EEADRH = (unsigned char)(address >> 8);
  7489                           
  7490                           ;incstack = 0
  7491  005AA8  0100               	movlb	0	; () banked
  7492  005AAA  5181               	movf	(EEPROM_read@address+1)& (0+255),w,b
  7493  005AAC  6EAA               	movwf	4010,c	;volatile
  7494                           
  7495                           ; BSR set to: 0
  7496                           ;EEPROM.c: 75: EEADR = (unsigned char)address;
  7497  005AAE  C080  FFA9         	movff	EEPROM_read@address,4009	;volatile
  7498                           
  7499                           ; BSR set to: 0
  7500                           ;EEPROM.c: 77: EECON1bits.EEPGD = 0;
  7501  005AB2  9EA6               	bcf	4006,7,c	;volatile
  7502                           
  7503                           ; BSR set to: 0
  7504                           ;EEPROM.c: 78: EECON1bits.CFGS = 0;
  7505  005AB4  9CA6               	bcf	4006,6,c	;volatile
  7506                           
  7507                           ; BSR set to: 0
  7508                           ;EEPROM.c: 79: EECON1bits.RD = 1;
  7509  005AB6  80A6               	bsf	4006,0,c	;volatile
  7510  005AB8                     l1124:
  7511  005AB8  B0A6               	btfsc	4006,0,c	;volatile
  7512  005ABA  D7FE               	goto	l1124
  7513                           
  7514                           ;EEPROM.c: 85: return EEDATA;
  7515  005ABC  50A8               	movf	4008,w,c	;volatile
  7516  005ABE  0012               	return	
  7517  005AC0                     __end_of_EEPROM_read:
  7518                           	opt stack 0
  7519                           tblptru	equ	0xFF8
  7520                           tblptrh	equ	0xFF7
  7521                           tblptrl	equ	0xFF6
  7522                           tablat	equ	0xFF5
  7523                           prodh	equ	0xFF4
  7524                           prodl	equ	0xFF3
  7525                           intcon	equ	0xFF2
  7526                           intcon2	equ	0xFF1
  7527                           intcon3	equ	0xFF0
  7528                           postinc0	equ	0xFEE
  7529                           wreg	equ	0xFE8
  7530                           postdec1	equ	0xFE5
  7531                           fsr1l	equ	0xFE1
  7532                           indf2	equ	0xFDF
  7533                           postinc2	equ	0xFDE
  7534                           postdec2	equ	0xFDD
  7535                           fsr2h	equ	0xFDA
  7536                           fsr2l	equ	0xFD9
  7537                           status	equ	0xFD8
  7538                           
  7539 ;; *************** function _initUI *****************
  7540 ;; Defined at:
  7541 ;;		line 62 in file "UI.c"
  7542 ;; Parameters:    Size  Location     Type
  7543 ;;		None
  7544 ;; Auto vars:     Size  Location     Type
  7545 ;;		None
  7546 ;; Return value:  Size  Location     Type
  7547 ;;                  1    wreg      void 
  7548 ;; Registers used:
  7549 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7550 ;; Tracked objects:
  7551 ;;		On entry : 0/0
  7552 ;;		On exit  : 0/0
  7553 ;;		Unchanged: 0/0
  7554 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7555 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7556 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7557 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7558 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7559 ;;Total ram usage:        0 bytes
  7560 ;; Hardware stack levels used:    1
  7561 ;; Hardware stack levels required when called:   12
  7562 ;; This function calls:
  7563 ;;		_change_state_to_menu_start
  7564 ;;		_loadRTC
  7565 ;; This function is called by:
  7566 ;;		_main
  7567 ;; This function uses a non-reentrant model
  7568 ;;
  7569                           
  7570                           	psect	text19
  7571  005690                     __ptext19:
  7572                           	opt stack 0
  7573  005690                     _initUI:
  7574                           	opt stack 18
  7575                           
  7576                           ;UI.c: 63: (INTCONbits.GIE = 1);
  7577                           
  7578                           ;incstack = 0
  7579  005690  8EF2               	bsf	intcon,7,c	;volatile
  7580                           
  7581                           ;UI.c: 64: machine_state = UI_state;
  7582  005692  0E00               	movlw	0
  7583  005694  0100               	movlb	0	; () banked
  7584  005696  6FFC               	movwf	_machine_state& (0+255),b
  7585                           
  7586                           ;UI.c: 65: logstate = 0;
  7587  005698  0E00               	movlw	0
  7588  00569A  0100               	movlb	0	; () banked
  7589  00569C  6FF9               	movwf	(_logstate+1)& (0+255),b
  7590  00569E  0E00               	movlw	0
  7591  0056A0  6FF8               	movwf	_logstate& (0+255),b
  7592                           
  7593                           ; BSR set to: 0
  7594                           ;UI.c: 67: if(RTCflag){
  7595  0056A2  0100               	movlb	0	; () banked
  7596  0056A4  51E4               	movf	_RTCflag& (0+255),w,b
  7597  0056A6  0100               	movlb	0	; () banked
  7598  0056A8  11E5               	iorwf	(_RTCflag+1)& (0+255),w,b
  7599  0056AA  A4D8               	btfss	status,2,c
  7600                           
  7601                           ; BSR set to: 0
  7602                           ;UI.c: 68: loadRTC();
  7603  0056AC  ECE1  F025         	call	_loadRTC	;wreg free
  7604                           
  7605                           ;UI.c: 69: }
  7606                           ;UI.c: 71: change_state_to_menu_start();
  7607  0056B0  EC66  F02C         	call	_change_state_to_menu_start	;wreg free
  7608                           
  7609                           ;UI.c: 72: firstboot = 1;
  7610  0056B4  0E00               	movlw	0
  7611  0056B6  0101               	movlb	1	; () banked
  7612  0056B8  6F44               	movwf	(_firstboot+1)& (0+255),b
  7613  0056BA  0E01               	movlw	1
  7614  0056BC  6F43               	movwf	_firstboot& (0+255),b
  7615                           
  7616                           ; BSR set to: 1
  7617  0056BE  0012               	return		;funcret
  7618  0056C0                     __end_of_initUI:
  7619                           	opt stack 0
  7620                           tblptru	equ	0xFF8
  7621                           tblptrh	equ	0xFF7
  7622                           tblptrl	equ	0xFF6
  7623                           tablat	equ	0xFF5
  7624                           prodh	equ	0xFF4
  7625                           prodl	equ	0xFF3
  7626                           intcon	equ	0xFF2
  7627                           intcon2	equ	0xFF1
  7628                           intcon3	equ	0xFF0
  7629                           postinc0	equ	0xFEE
  7630                           wreg	equ	0xFE8
  7631                           postdec1	equ	0xFE5
  7632                           fsr1l	equ	0xFE1
  7633                           indf2	equ	0xFDF
  7634                           postinc2	equ	0xFDE
  7635                           postdec2	equ	0xFDD
  7636                           fsr2h	equ	0xFDA
  7637                           fsr2l	equ	0xFD9
  7638                           status	equ	0xFD8
  7639                           
  7640 ;; *************** function _loadRTC *****************
  7641 ;; Defined at:
  7642 ;;		line 28 in file "RTC.c"
  7643 ;; Parameters:    Size  Location     Type
  7644 ;;		None
  7645 ;; Auto vars:     Size  Location     Type
  7646 ;;  i               2   22[BANK0 ] int 
  7647 ;; Return value:  Size  Location     Type
  7648 ;;                  1    wreg      void 
  7649 ;; Registers used:
  7650 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7651 ;; Tracked objects:
  7652 ;;		On entry : 0/0
  7653 ;;		On exit  : 0/0
  7654 ;;		Unchanged: 0/0
  7655 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7656 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7657 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7658 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7659 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7660 ;;Total ram usage:        3 bytes
  7661 ;; Hardware stack levels used:    1
  7662 ;; Hardware stack levels required when called:    9
  7663 ;; This function calls:
  7664 ;;		_I2C_Master_Init
  7665 ;;		_I2C_Master_Start
  7666 ;;		_I2C_Master_Stop
  7667 ;;		_I2C_Master_Write
  7668 ;; This function is called by:
  7669 ;;		_initUI
  7670 ;; This function uses a non-reentrant model
  7671 ;;
  7672                           
  7673                           	psect	text20
  7674  004BC2                     __ptext20:
  7675                           	opt stack 0
  7676  004BC2                     _loadRTC:
  7677                           	opt stack 20
  7678                           
  7679                           ;RTC.c: 30: I2C_Master_Init(10000);
  7680                           
  7681                           ; BSR set to: 1
  7682                           ;incstack = 0
  7683  004BC2  0E10               	movlw	16
  7684  004BC4  0100               	movlb	0	; () banked
  7685  004BC6  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  7686  004BC8  0E27               	movlw	39
  7687  004BCA  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  7688  004BCC  0E00               	movlw	0
  7689  004BCE  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  7690  004BD0  0E00               	movlw	0
  7691  004BD2  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  7692  004BD4  ECAA  F028         	call	_I2C_Master_Init	;wreg free
  7693                           
  7694                           ;RTC.c: 32: (INTCONbits.GIE = 0);
  7695  004BD8  9EF2               	bcf	intcon,7,c	;volatile
  7696                           
  7697                           ;RTC.c: 34: I2C_Master_Start();
  7698  004BDA  ECB0  F02D         	call	_I2C_Master_Start	;wreg free
  7699                           
  7700                           ;RTC.c: 35: I2C_Master_Write(0b11010000);
  7701  004BDE  0E00               	movlw	0
  7702  004BE0  0100               	movlb	0	; () banked
  7703  004BE2  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  7704  004BE4  0ED0               	movlw	208
  7705  004BE6  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  7706  004BE8  EC9A  F02D         	call	_I2C_Master_Write	;wreg free
  7707                           
  7708                           ;RTC.c: 36: I2C_Master_Write(0x00);
  7709  004BEC  0E00               	movlw	0
  7710  004BEE  0100               	movlb	0	; () banked
  7711  004BF0  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  7712  004BF2  0E00               	movlw	0
  7713  004BF4  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  7714  004BF6  EC9A  F02D         	call	_I2C_Master_Write	;wreg free
  7715                           
  7716                           ;RTC.c: 37: for(int i = 0; i<7; i++){
  7717  004BFA  0E00               	movlw	0
  7718  004BFC  0100               	movlb	0	; () banked
  7719  004BFE  6F97               	movwf	(loadRTC@i+1)& (0+255),b
  7720  004C00  0E00               	movlw	0
  7721  004C02  6F96               	movwf	loadRTC@i& (0+255),b
  7722  004C04                     l7558:
  7723                           
  7724                           ; BSR set to: 0
  7725  004C04  0100               	movlb	0	; () banked
  7726  004C06  BF97               	btfsc	(loadRTC@i+1)& (0+255),7,b
  7727  004C08  D008               	goto	l7562
  7728  004C0A  0100               	movlb	0	; () banked
  7729  004C0C  5197               	movf	(loadRTC@i+1)& (0+255),w,b
  7730  004C0E  E11B               	bnz	l7568
  7731  004C10  0E07               	movlw	7
  7732  004C12  0100               	movlb	0	; () banked
  7733  004C14  5D96               	subwf	loadRTC@i& (0+255),w,b
  7734  004C16  B0D8               	btfsc	status,0,c
  7735  004C18  D016               	goto	l7568
  7736  004C1A                     l7562:
  7737                           
  7738                           ; BSR set to: 0
  7739                           ;RTC.c: 38: I2C_Master_Write(time[i]);
  7740  004C1A  0E24               	movlw	low _time
  7741  004C1C  0100               	movlb	0	; () banked
  7742  004C1E  2596               	addwf	loadRTC@i& (0+255),w,b
  7743  004C20  6ED9               	movwf	fsr2l,c
  7744  004C22  0E01               	movlw	high _time
  7745  004C24  0100               	movlb	0	; () banked
  7746  004C26  2197               	addwfc	(loadRTC@i+1)& (0+255),w,b
  7747  004C28  6EDA               	movwf	fsr2h,c
  7748  004C2A  50DF               	movf	indf2,w,c
  7749  004C2C  0100               	movlb	0	; () banked
  7750  004C2E  6F95               	movwf	??_loadRTC& (0+255),b
  7751  004C30  0100               	movlb	0	; () banked
  7752  004C32  5195               	movf	??_loadRTC& (0+255),w,b
  7753  004C34  0100               	movlb	0	; () banked
  7754  004C36  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  7755  004C38  6B82               	clrf	(I2C_Master_Write@d+1)& (0+255),b
  7756  004C3A  EC9A  F02D         	call	_I2C_Master_Write	;wreg free
  7757  004C3E  0100               	movlb	0	; () banked
  7758  004C40  4B96               	infsnz	loadRTC@i& (0+255),f,b
  7759  004C42  2B97               	incf	(loadRTC@i+1)& (0+255),f,b
  7760  004C44  D7DF               	goto	l7558
  7761  004C46                     l7568:
  7762                           
  7763                           ; BSR set to: 0
  7764                           ;RTC.c: 39: }
  7765                           ;RTC.c: 40: I2C_Master_Stop();
  7766  004C46  ECAC  F02D         	call	_I2C_Master_Stop	;wreg free
  7767                           
  7768                           ;RTC.c: 41: (INTCONbits.GIE = 1);
  7769  004C4A  8EF2               	bsf	intcon,7,c	;volatile
  7770  004C4C  0012               	return		;funcret
  7771  004C4E                     __end_of_loadRTC:
  7772                           	opt stack 0
  7773                           tblptru	equ	0xFF8
  7774                           tblptrh	equ	0xFF7
  7775                           tblptrl	equ	0xFF6
  7776                           tablat	equ	0xFF5
  7777                           prodh	equ	0xFF4
  7778                           prodl	equ	0xFF3
  7779                           intcon	equ	0xFF2
  7780                           intcon2	equ	0xFF1
  7781                           intcon3	equ	0xFF0
  7782                           postinc0	equ	0xFEE
  7783                           wreg	equ	0xFE8
  7784                           postdec1	equ	0xFE5
  7785                           fsr1l	equ	0xFE1
  7786                           indf2	equ	0xFDF
  7787                           postinc2	equ	0xFDE
  7788                           postdec2	equ	0xFDD
  7789                           fsr2h	equ	0xFDA
  7790                           fsr2l	equ	0xFD9
  7791                           status	equ	0xFD8
  7792                           
  7793 ;; *************** function _I2C_Master_Init *****************
  7794 ;; Defined at:
  7795 ;;		line 15 in file "I2C.c"
  7796 ;; Parameters:    Size  Location     Type
  7797 ;;  c               4   13[BANK0 ] const unsigned long 
  7798 ;; Auto vars:     Size  Location     Type
  7799 ;;		None
  7800 ;; Return value:  Size  Location     Type
  7801 ;;                  1    wreg      void 
  7802 ;; Registers used:
  7803 ;;		wreg, status,2, status,0, cstack
  7804 ;; Tracked objects:
  7805 ;;		On entry : 0/0
  7806 ;;		On exit  : 0/0
  7807 ;;		Unchanged: 0/0
  7808 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7809 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7810 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7811 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7812 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7813 ;;Total ram usage:        8 bytes
  7814 ;; Hardware stack levels used:    1
  7815 ;; Hardware stack levels required when called:    8
  7816 ;; This function calls:
  7817 ;;		___lldiv
  7818 ;; This function is called by:
  7819 ;;		_main
  7820 ;;		_loadRTC
  7821 ;; This function uses a non-reentrant model
  7822 ;;
  7823                           
  7824                           	psect	text21
  7825  005154                     __ptext21:
  7826                           	opt stack 0
  7827  005154                     _I2C_Master_Init:
  7828                           	opt stack 20
  7829                           
  7830                           ;I2C.c: 18: SSPSTAT = 0b00000000;
  7831                           
  7832                           ;incstack = 0
  7833  005154  0E00               	movlw	0
  7834  005156  6EC7               	movwf	4039,c	;volatile
  7835                           
  7836                           ;I2C.c: 19: SSPCON1 = 0b00101000;
  7837  005158  0E28               	movlw	40
  7838  00515A  6EC6               	movwf	4038,c	;volatile
  7839                           
  7840                           ;I2C.c: 20: SSPCON2 = 0b00000000;
  7841  00515C  0E00               	movlw	0
  7842  00515E  6EC5               	movwf	4037,c	;volatile
  7843                           
  7844                           ;I2C.c: 21: SSPADD = (32000000/(4*c))-1;
  7845  005160  0E00               	movlw	0
  7846  005162  0100               	movlb	0	; () banked
  7847  005164  6F80               	movwf	___lldiv@dividend& (0+255),b
  7848  005166  0E48               	movlw	72
  7849  005168  6F81               	movwf	(___lldiv@dividend+1)& (0+255),b
  7850  00516A  0EE8               	movlw	232
  7851  00516C  6F82               	movwf	(___lldiv@dividend+2)& (0+255),b
  7852  00516E  0E01               	movlw	1
  7853  005170  6F83               	movwf	(___lldiv@dividend+3)& (0+255),b
  7854  005172  C08D  F091         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  7855  005176  C08E  F092         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  7856  00517A  C08F  F093         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  7857  00517E  C090  F094         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  7858  005182  0E02               	movlw	2
  7859  005184                     u5845:
  7860  005184  90D8               	bcf	status,0,c
  7861  005186  0100               	movlb	0	; () banked
  7862  005188  3791               	rlcf	??_I2C_Master_Init& (0+255),f,b
  7863  00518A  3792               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
  7864  00518C  3793               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
  7865  00518E  3794               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
  7866  005190  2EE8               	decfsz	wreg,f,c
  7867  005192  D7F8               	goto	u5845
  7868  005194  C091  F084         	movff	??_I2C_Master_Init,___lldiv@divisor
  7869  005198  C092  F085         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  7870  00519C  C093  F086         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  7871  0051A0  C094  F087         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  7872  0051A4  ECDD  F024         	call	___lldiv	;wreg free
  7873  0051A8  0100               	movlb	0	; () banked
  7874  0051AA  0580               	decf	?___lldiv& (0+255),w,b
  7875  0051AC  6EC8               	movwf	4040,c	;volatile
  7876                           
  7877                           ; BSR set to: 0
  7878                           ;I2C.c: 22: TRISC3 = 1;
  7879  0051AE  8694               	bsf	3988,3,c	;volatile
  7880                           
  7881                           ; BSR set to: 0
  7882                           ;I2C.c: 23: TRISC4 = 1;
  7883  0051B0  8894               	bsf	3988,4,c	;volatile
  7884                           
  7885                           ; BSR set to: 0
  7886  0051B2  0012               	return		;funcret
  7887  0051B4                     __end_of_I2C_Master_Init:
  7888                           	opt stack 0
  7889                           tblptru	equ	0xFF8
  7890                           tblptrh	equ	0xFF7
  7891                           tblptrl	equ	0xFF6
  7892                           tablat	equ	0xFF5
  7893                           prodh	equ	0xFF4
  7894                           prodl	equ	0xFF3
  7895                           intcon	equ	0xFF2
  7896                           intcon2	equ	0xFF1
  7897                           intcon3	equ	0xFF0
  7898                           postinc0	equ	0xFEE
  7899                           wreg	equ	0xFE8
  7900                           postdec1	equ	0xFE5
  7901                           fsr1l	equ	0xFE1
  7902                           indf2	equ	0xFDF
  7903                           postinc2	equ	0xFDE
  7904                           postdec2	equ	0xFDD
  7905                           fsr2h	equ	0xFDA
  7906                           fsr2l	equ	0xFD9
  7907                           status	equ	0xFD8
  7908                           
  7909 ;; *************** function ___lldiv *****************
  7910 ;; Defined at:
  7911 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  7912 ;; Parameters:    Size  Location     Type
  7913 ;;  dividend        4    0[BANK0 ] unsigned long 
  7914 ;;  divisor         4    4[BANK0 ] unsigned long 
  7915 ;; Auto vars:     Size  Location     Type
  7916 ;;  quotient        4    8[BANK0 ] unsigned long 
  7917 ;;  counter         1   12[BANK0 ] unsigned char 
  7918 ;; Return value:  Size  Location     Type
  7919 ;;                  4    0[BANK0 ] unsigned long 
  7920 ;; Registers used:
  7921 ;;		wreg, status,2, status,0
  7922 ;; Tracked objects:
  7923 ;;		On entry : 0/0
  7924 ;;		On exit  : 0/0
  7925 ;;		Unchanged: 0/0
  7926 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7927 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7928 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7929 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7930 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7931 ;;Total ram usage:       13 bytes
  7932 ;; Hardware stack levels used:    1
  7933 ;; Hardware stack levels required when called:    7
  7934 ;; This function calls:
  7935 ;;		Nothing
  7936 ;; This function is called by:
  7937 ;;		_I2C_Master_Init
  7938 ;; This function uses a non-reentrant model
  7939 ;;
  7940                           
  7941                           	psect	text22
  7942  0049BA                     __ptext22:
  7943                           	opt stack 0
  7944  0049BA                     ___lldiv:
  7945                           	opt stack 20
  7946                           
  7947                           ; BSR set to: 0
  7948                           ;incstack = 0
  7949  0049BA  0E00               	movlw	0
  7950  0049BC  0100               	movlb	0	; () banked
  7951  0049BE  6F88               	movwf	___lldiv@quotient& (0+255),b
  7952  0049C0  0E00               	movlw	0
  7953  0049C2  6F89               	movwf	(___lldiv@quotient+1)& (0+255),b
  7954  0049C4  0E00               	movlw	0
  7955  0049C6  6F8A               	movwf	(___lldiv@quotient+2)& (0+255),b
  7956  0049C8  0E00               	movlw	0
  7957  0049CA  6F8B               	movwf	(___lldiv@quotient+3)& (0+255),b
  7958                           
  7959                           ; BSR set to: 0
  7960  0049CC  0100               	movlb	0	; () banked
  7961  0049CE  5184               	movf	___lldiv@divisor& (0+255),w,b
  7962  0049D0  0100               	movlb	0	; () banked
  7963  0049D2  1185               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  7964  0049D4  0100               	movlb	0	; () banked
  7965  0049D6  1186               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  7966  0049D8  0100               	movlb	0	; () banked
  7967  0049DA  1187               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  7968  0049DC  B4D8               	btfsc	status,2,c
  7969  0049DE  D042               	goto	l1904
  7970                           
  7971                           ; BSR set to: 0
  7972  0049E0  0E01               	movlw	1
  7973  0049E2  0100               	movlb	0	; () banked
  7974  0049E4  6F8C               	movwf	___lldiv@counter& (0+255),b
  7975  0049E6  D008               	goto	l6882
  7976  0049E8                     l6880:
  7977                           
  7978                           ; BSR set to: 0
  7979  0049E8  0100               	movlb	0	; () banked
  7980  0049EA  90D8               	bcf	status,0,c
  7981  0049EC  3784               	rlcf	___lldiv@divisor& (0+255),f,b
  7982  0049EE  3785               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  7983  0049F0  3786               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  7984  0049F2  3787               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  7985  0049F4  0100               	movlb	0	; () banked
  7986  0049F6  2B8C               	incf	___lldiv@counter& (0+255),f,b
  7987  0049F8                     l6882:
  7988                           
  7989                           ; BSR set to: 0
  7990  0049F8  0100               	movlb	0	; () banked
  7991  0049FA  AF87               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  7992  0049FC  D7F5               	goto	l6880
  7993  0049FE                     l6884:
  7994                           
  7995                           ; BSR set to: 0
  7996  0049FE  0100               	movlb	0	; () banked
  7997  004A00  90D8               	bcf	status,0,c
  7998  004A02  3788               	rlcf	___lldiv@quotient& (0+255),f,b
  7999  004A04  3789               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  8000  004A06  378A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  8001  004A08  378B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  8002                           
  8003                           ; BSR set to: 0
  8004  004A0A  0100               	movlb	0	; () banked
  8005  004A0C  5184               	movf	___lldiv@divisor& (0+255),w,b
  8006  004A0E  0100               	movlb	0	; () banked
  8007  004A10  5D80               	subwf	___lldiv@dividend& (0+255),w,b
  8008  004A12  0100               	movlb	0	; () banked
  8009  004A14  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  8010  004A16  0100               	movlb	0	; () banked
  8011  004A18  5981               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  8012  004A1A  0100               	movlb	0	; () banked
  8013  004A1C  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  8014  004A1E  0100               	movlb	0	; () banked
  8015  004A20  5982               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  8016  004A22  0100               	movlb	0	; () banked
  8017  004A24  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  8018  004A26  0100               	movlb	0	; () banked
  8019  004A28  5983               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  8020  004A2A  A0D8               	btfss	status,0,c
  8021  004A2C  D012               	goto	l6892
  8022                           
  8023                           ; BSR set to: 0
  8024  004A2E  0100               	movlb	0	; () banked
  8025  004A30  5184               	movf	___lldiv@divisor& (0+255),w,b
  8026  004A32  0100               	movlb	0	; () banked
  8027  004A34  5F80               	subwf	___lldiv@dividend& (0+255),f,b
  8028  004A36  0100               	movlb	0	; () banked
  8029  004A38  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  8030  004A3A  0100               	movlb	0	; () banked
  8031  004A3C  5B81               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  8032  004A3E  0100               	movlb	0	; () banked
  8033  004A40  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  8034  004A42  0100               	movlb	0	; () banked
  8035  004A44  5B82               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  8036  004A46  0100               	movlb	0	; () banked
  8037  004A48  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  8038  004A4A  0100               	movlb	0	; () banked
  8039  004A4C  5B83               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  8040                           
  8041                           ; BSR set to: 0
  8042  004A4E  0100               	movlb	0	; () banked
  8043  004A50  8188               	bsf	___lldiv@quotient& (0+255),0,b
  8044  004A52                     l6892:
  8045                           
  8046                           ; BSR set to: 0
  8047  004A52  0100               	movlb	0	; () banked
  8048  004A54  90D8               	bcf	status,0,c
  8049  004A56  3387               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  8050  004A58  3386               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  8051  004A5A  3385               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  8052  004A5C  3384               	rrcf	___lldiv@divisor& (0+255),f,b
  8053                           
  8054                           ; BSR set to: 0
  8055  004A5E  0100               	movlb	0	; () banked
  8056  004A60  2F8C               	decfsz	___lldiv@counter& (0+255),f,b
  8057  004A62  D7CD               	goto	l6884
  8058  004A64                     l1904:
  8059                           
  8060                           ; BSR set to: 0
  8061  004A64  C088  F080         	movff	___lldiv@quotient,?___lldiv
  8062  004A68  C089  F081         	movff	___lldiv@quotient+1,?___lldiv+1
  8063  004A6C  C08A  F082         	movff	___lldiv@quotient+2,?___lldiv+2
  8064  004A70  C08B  F083         	movff	___lldiv@quotient+3,?___lldiv+3
  8065                           
  8066                           ; BSR set to: 0
  8067  004A74  0012               	return		;funcret
  8068  004A76                     __end_of___lldiv:
  8069                           	opt stack 0
  8070                           tblptru	equ	0xFF8
  8071                           tblptrh	equ	0xFF7
  8072                           tblptrl	equ	0xFF6
  8073                           tablat	equ	0xFF5
  8074                           prodh	equ	0xFF4
  8075                           prodl	equ	0xFF3
  8076                           intcon	equ	0xFF2
  8077                           intcon2	equ	0xFF1
  8078                           intcon3	equ	0xFF0
  8079                           postinc0	equ	0xFEE
  8080                           wreg	equ	0xFE8
  8081                           postdec1	equ	0xFE5
  8082                           fsr1l	equ	0xFE1
  8083                           indf2	equ	0xFDF
  8084                           postinc2	equ	0xFDE
  8085                           postdec2	equ	0xFDD
  8086                           fsr2h	equ	0xFDA
  8087                           fsr2l	equ	0xFD9
  8088                           status	equ	0xFD8
  8089                           
  8090 ;; *************** function _change_state_to_menu_start *****************
  8091 ;; Defined at:
  8092 ;;		line 477 in file "UI.c"
  8093 ;; Parameters:    Size  Location     Type
  8094 ;;		None
  8095 ;; Auto vars:     Size  Location     Type
  8096 ;;		None
  8097 ;; Return value:  Size  Location     Type
  8098 ;;                  1    wreg      void 
  8099 ;; Registers used:
  8100 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8101 ;; Tracked objects:
  8102 ;;		On entry : 0/0
  8103 ;;		On exit  : 0/0
  8104 ;;		Unchanged: 0/0
  8105 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8106 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8107 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8108 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8109 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8110 ;;Total ram usage:        0 bytes
  8111 ;; Hardware stack levels used:    1
  8112 ;; Hardware stack levels required when called:   11
  8113 ;; This function calls:
  8114 ;;		_lcdInst
  8115 ;;		_printRTC
  8116 ;;		_printf
  8117 ;; This function is called by:
  8118 ;;		_initUI
  8119 ;; This function uses a non-reentrant model
  8120 ;;
  8121                           
  8122                           	psect	text23
  8123  0058CC                     __ptext23:
  8124                           	opt stack 0
  8125  0058CC                     _change_state_to_menu_start:
  8126                           	opt stack 18
  8127                           
  8128                           ;UI.c: 478: cur_state = 0;
  8129                           
  8130                           ; BSR set to: 0
  8131                           ;incstack = 0
  8132  0058CC  0E00               	movlw	0
  8133  0058CE  0100               	movlb	0	; () banked
  8134  0058D0  6FE7               	movwf	(_cur_state+1)& (0+255),b
  8135  0058D2  0E00               	movlw	0
  8136  0058D4  6FE6               	movwf	_cur_state& (0+255),b
  8137                           
  8138                           ; BSR set to: 0
  8139                           ;UI.c: 480: lcdInst(0b10000000);;
  8140  0058D6  0E80               	movlw	128
  8141  0058D8  EC86  F02D         	call	_lcdInst
  8142                           
  8143                           ;UI.c: 481: printRTC();
  8144  0058DC  EC63  F016         	call	_printRTC	;wreg free
  8145                           
  8146                           ;UI.c: 482: lcdInst(0b11000000);;
  8147  0058E0  0EC0               	movlw	192
  8148  0058E2  EC86  F02D         	call	_lcdInst
  8149                           
  8150                           ;UI.c: 483: printf("PUSH TO CONTINUE");
  8151  0058E6  0EF2               	movlw	low STR_30
  8152  0058E8  0100               	movlb	0	; () banked
  8153  0058EA  6F8E               	movwf	printf@f& (0+255),b
  8154  0058EC  0EFD               	movlw	high STR_30
  8155  0058EE  0100               	movlb	0	; () banked
  8156  0058F0  6F8F               	movwf	(printf@f+1)& (0+255),b
  8157  0058F2  ECC2  F00B         	call	_printf	;wreg free
  8158  0058F6  0012               	return		;funcret
  8159  0058F8                     __end_of_change_state_to_menu_start:
  8160                           	opt stack 0
  8161                           tblptru	equ	0xFF8
  8162                           tblptrh	equ	0xFF7
  8163                           tblptrl	equ	0xFF6
  8164                           tablat	equ	0xFF5
  8165                           prodh	equ	0xFF4
  8166                           prodl	equ	0xFF3
  8167                           intcon	equ	0xFF2
  8168                           intcon2	equ	0xFF1
  8169                           intcon3	equ	0xFF0
  8170                           postinc0	equ	0xFEE
  8171                           wreg	equ	0xFE8
  8172                           postdec1	equ	0xFE5
  8173                           fsr1l	equ	0xFE1
  8174                           indf2	equ	0xFDF
  8175                           postinc2	equ	0xFDE
  8176                           postdec2	equ	0xFDD
  8177                           fsr2h	equ	0xFDA
  8178                           fsr2l	equ	0xFD9
  8179                           status	equ	0xFD8
  8180                           
  8181 ;; *************** function _initTime *****************
  8182 ;; Defined at:
  8183 ;;		line 17 in file "RTC.c"
  8184 ;; Parameters:    Size  Location     Type
  8185 ;;  s               1    wreg     unsigned char 
  8186 ;;  m               1    0[BANK0 ] unsigned char 
  8187 ;;  h               1    1[BANK0 ] unsigned char 
  8188 ;;  w               1    2[BANK0 ] unsigned char 
  8189 ;;  DD              1    3[BANK0 ] unsigned char 
  8190 ;;  MM              1    4[BANK0 ] unsigned char 
  8191 ;;  YY              1    5[BANK0 ] unsigned char 
  8192 ;; Auto vars:     Size  Location     Type
  8193 ;;  s               1    6[BANK0 ] unsigned char 
  8194 ;; Return value:  Size  Location     Type
  8195 ;;                  1    wreg      void 
  8196 ;; Registers used:
  8197 ;;		wreg
  8198 ;; Tracked objects:
  8199 ;;		On entry : 0/0
  8200 ;;		On exit  : 0/0
  8201 ;;		Unchanged: 0/0
  8202 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8203 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8204 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8205 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8206 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8207 ;;Total ram usage:        7 bytes
  8208 ;; Hardware stack levels used:    1
  8209 ;; Hardware stack levels required when called:    7
  8210 ;; This function calls:
  8211 ;;		Nothing
  8212 ;; This function is called by:
  8213 ;;		_main
  8214 ;; This function uses a non-reentrant model
  8215 ;;
  8216                           
  8217                           	psect	text24
  8218  005A30                     __ptext24:
  8219                           	opt stack 0
  8220  005A30                     _initTime:
  8221                           	opt stack 23
  8222                           
  8223                           ;incstack = 0
  8224                           ;initTime@s stored from wreg
  8225  005A30  0100               	movlb	0	; () banked
  8226  005A32  6F86               	movwf	initTime@s& (0+255),b
  8227                           
  8228                           ;RTC.c: 19: time[0] = s;
  8229  005A34  C086  F124         	movff	initTime@s,_time
  8230                           
  8231                           ;RTC.c: 20: time[1] = m;
  8232  005A38  C080  F125         	movff	initTime@m,_time+1
  8233                           
  8234                           ;RTC.c: 21: time[2] = h;
  8235  005A3C  C081  F126         	movff	initTime@h,_time+2
  8236                           
  8237                           ;RTC.c: 22: time[3] = w;
  8238  005A40  C082  F127         	movff	initTime@w,_time+3
  8239                           
  8240                           ;RTC.c: 23: time[4] = DD;
  8241  005A44  C083  F128         	movff	initTime@DD,_time+4
  8242                           
  8243                           ;RTC.c: 24: time[5] = MM;
  8244  005A48  C084  F129         	movff	initTime@MM,_time+5
  8245                           
  8246                           ;RTC.c: 25: time[6] = YY;
  8247  005A4C  C085  F12A         	movff	initTime@YY,_time+6
  8248  005A50  0012               	return		;funcret
  8249  005A52                     __end_of_initTime:
  8250                           	opt stack 0
  8251                           tblptru	equ	0xFF8
  8252                           tblptrh	equ	0xFF7
  8253                           tblptrl	equ	0xFF6
  8254                           tablat	equ	0xFF5
  8255                           prodh	equ	0xFF4
  8256                           prodl	equ	0xFF3
  8257                           intcon	equ	0xFF2
  8258                           intcon2	equ	0xFF1
  8259                           intcon3	equ	0xFF0
  8260                           postinc0	equ	0xFEE
  8261                           wreg	equ	0xFE8
  8262                           postdec1	equ	0xFE5
  8263                           fsr1l	equ	0xFE1
  8264                           indf2	equ	0xFDF
  8265                           postinc2	equ	0xFDE
  8266                           postdec2	equ	0xFDD
  8267                           fsr2h	equ	0xFDA
  8268                           fsr2l	equ	0xFD9
  8269                           status	equ	0xFD8
  8270                           
  8271 ;; *************** function _initLCD *****************
  8272 ;; Defined at:
  8273 ;;		line 50 in file "lcd.c"
  8274 ;; Parameters:    Size  Location     Type
  8275 ;;		None
  8276 ;; Auto vars:     Size  Location     Type
  8277 ;;		None
  8278 ;; Return value:  Size  Location     Type
  8279 ;;                  1    wreg      void 
  8280 ;; Registers used:
  8281 ;;		wreg, status,2, status,0, cstack
  8282 ;; Tracked objects:
  8283 ;;		On entry : 0/0
  8284 ;;		On exit  : 0/0
  8285 ;;		Unchanged: 0/0
  8286 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8287 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8288 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8289 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8290 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8291 ;;Total ram usage:        1 bytes
  8292 ;; Hardware stack levels used:    1
  8293 ;; Hardware stack levels required when called:    9
  8294 ;; This function calls:
  8295 ;;		_lcdInst
  8296 ;; This function is called by:
  8297 ;;		_main
  8298 ;; This function uses a non-reentrant model
  8299 ;;
  8300                           
  8301                           	psect	text25
  8302  00544A                     __ptext25:
  8303                           	opt stack 0
  8304  00544A                     _initLCD:
  8305                           	opt stack 21
  8306                           
  8307                           ;lcd.c: 51: _delay((unsigned long)((15)*(32000000/4000.0)));
  8308                           
  8309                           ;incstack = 0
  8310  00544A  0E9C               	movlw	156
  8311  00544C  0100               	movlb	0	; () banked
  8312  00544E  6F83               	movwf	??_initLCD& (0+255),b
  8313  005450  0ED7               	movlw	215
  8314  005452                     u9987:
  8315  005452  2EE8               	decfsz	wreg,f,c
  8316  005454  D7FE               	bra	u9987
  8317  005456  2F83               	decfsz	??_initLCD& (0+255),f,b
  8318  005458  D7FC               	bra	u9987
  8319                           
  8320                           ;lcd.c: 52: lcdInst(0b00110011);
  8321  00545A  0E33               	movlw	51
  8322  00545C  EC86  F02D         	call	_lcdInst
  8323                           
  8324                           ;lcd.c: 53: lcdInst(0b00110010);
  8325  005460  0E32               	movlw	50
  8326  005462  EC86  F02D         	call	_lcdInst
  8327                           
  8328                           ;lcd.c: 55: lcdInst(0b00101000);
  8329  005466  0E28               	movlw	40
  8330  005468  EC86  F02D         	call	_lcdInst
  8331                           
  8332                           ;lcd.c: 56: lcdInst(0b00001100);
  8333  00546C  0E0C               	movlw	12
  8334  00546E  EC86  F02D         	call	_lcdInst
  8335                           
  8336                           ;lcd.c: 57: lcdInst(0b00000110);
  8337  005472  0E06               	movlw	6
  8338  005474  EC86  F02D         	call	_lcdInst
  8339                           
  8340                           ;lcd.c: 58: lcdInst(0b00000001);
  8341  005478  0E01               	movlw	1
  8342  00547A  EC86  F02D         	call	_lcdInst
  8343                           
  8344                           ;lcd.c: 59: _delay((unsigned long)((15)*(32000000/4000.0)));
  8345  00547E  0E9C               	movlw	156
  8346  005480  0100               	movlb	0	; () banked
  8347  005482  6F83               	movwf	??_initLCD& (0+255),b
  8348  005484  0ED7               	movlw	215
  8349  005486                     u9997:
  8350  005486  2EE8               	decfsz	wreg,f,c
  8351  005488  D7FE               	bra	u9997
  8352  00548A  2F83               	decfsz	??_initLCD& (0+255),f,b
  8353  00548C  D7FC               	bra	u9997
  8354  00548E  0012               	return		;funcret
  8355  005490                     __end_of_initLCD:
  8356                           	opt stack 0
  8357                           tblptru	equ	0xFF8
  8358                           tblptrh	equ	0xFF7
  8359                           tblptrl	equ	0xFF6
  8360                           tablat	equ	0xFF5
  8361                           prodh	equ	0xFF4
  8362                           prodl	equ	0xFF3
  8363                           intcon	equ	0xFF2
  8364                           intcon2	equ	0xFF1
  8365                           intcon3	equ	0xFF0
  8366                           postinc0	equ	0xFEE
  8367                           wreg	equ	0xFE8
  8368                           postdec1	equ	0xFE5
  8369                           fsr1l	equ	0xFE1
  8370                           indf2	equ	0xFDF
  8371                           postinc2	equ	0xFDE
  8372                           postdec2	equ	0xFDD
  8373                           fsr2h	equ	0xFDA
  8374                           fsr2l	equ	0xFD9
  8375                           status	equ	0xFD8
  8376                           
  8377 ;; *************** function _initEEPROM *****************
  8378 ;; Defined at:
  8379 ;;		line 32 in file "EEPROM.c"
  8380 ;; Parameters:    Size  Location     Type
  8381 ;;		None
  8382 ;; Auto vars:     Size  Location     Type
  8383 ;;		None
  8384 ;; Return value:  Size  Location     Type
  8385 ;;                  1    wreg      void 
  8386 ;; Registers used:
  8387 ;;		wreg, status,2
  8388 ;; Tracked objects:
  8389 ;;		On entry : 0/0
  8390 ;;		On exit  : 0/0
  8391 ;;		Unchanged: 0/0
  8392 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8393 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8394 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8395 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8396 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8397 ;;Total ram usage:        0 bytes
  8398 ;; Hardware stack levels used:    1
  8399 ;; Hardware stack levels required when called:    7
  8400 ;; This function calls:
  8401 ;;		Nothing
  8402 ;; This function is called by:
  8403 ;;		_main
  8404 ;; This function uses a non-reentrant model
  8405 ;;
  8406                           
  8407                           	psect	text26
  8408  005B50                     __ptext26:
  8409                           	opt stack 0
  8410  005B50                     _initEEPROM:
  8411                           	opt stack 23
  8412                           
  8413                           ;EEPROM.c: 33: sel = 1;
  8414                           
  8415                           ;incstack = 0
  8416  005B50  0E01               	movlw	1
  8417  005B52  0100               	movlb	0	; () banked
  8418  005B54  6FFD               	movwf	_sel& (0+255),b
  8419                           
  8420                           ; BSR set to: 0
  8421  005B56  0012               	return		;funcret
  8422  005B58                     __end_of_initEEPROM:
  8423                           	opt stack 0
  8424                           tblptru	equ	0xFF8
  8425                           tblptrh	equ	0xFF7
  8426                           tblptrl	equ	0xFF6
  8427                           tablat	equ	0xFF5
  8428                           prodh	equ	0xFF4
  8429                           prodl	equ	0xFF3
  8430                           intcon	equ	0xFF2
  8431                           intcon2	equ	0xFF1
  8432                           intcon3	equ	0xFF0
  8433                           postinc0	equ	0xFEE
  8434                           wreg	equ	0xFE8
  8435                           postdec1	equ	0xFE5
  8436                           fsr1l	equ	0xFE1
  8437                           indf2	equ	0xFDF
  8438                           postinc2	equ	0xFDE
  8439                           postdec2	equ	0xFDD
  8440                           fsr2h	equ	0xFDA
  8441                           fsr2l	equ	0xFD9
  8442                           status	equ	0xFD8
  8443                           
  8444 ;; *************** function _UI *****************
  8445 ;; Defined at:
  8446 ;;		line 76 in file "UI.c"
  8447 ;; Parameters:    Size  Location     Type
  8448 ;;		None
  8449 ;; Auto vars:     Size  Location     Type
  8450 ;;  i               1   73[BANK0 ] unsigned char 
  8451 ;;  i               1   85[BANK0 ] unsigned char 
  8452 ;;  i               1   84[BANK0 ] unsigned char 
  8453 ;;  i               1   83[BANK0 ] unsigned char 
  8454 ;;  i               1   82[BANK0 ] unsigned char 
  8455 ;;  i               1   81[BANK0 ] unsigned char 
  8456 ;;  i               1   80[BANK0 ] unsigned char 
  8457 ;;  i               1   79[BANK0 ] unsigned char 
  8458 ;;  i               1   78[BANK0 ] unsigned char 
  8459 ;;  i               1   77[BANK0 ] unsigned char 
  8460 ;;  i               1   76[BANK0 ] unsigned char 
  8461 ;;  i               1   75[BANK0 ] unsigned char 
  8462 ;;  i               1   74[BANK0 ] unsigned char 
  8463 ;;  month           4   86[BANK0 ] unsigned char [4]
  8464 ;;  i               1   72[BANK0 ] unsigned char 
  8465 ;; Return value:  Size  Location     Type
  8466 ;;                  1    wreg      void 
  8467 ;; Registers used:
  8468 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8469 ;; Tracked objects:
  8470 ;;		On entry : 0/0
  8471 ;;		On exit  : 0/0
  8472 ;;		Unchanged: 0/0
  8473 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8474 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8475 ;;      Locals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8476 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8477 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8478 ;;Total ram usage:       22 bytes
  8479 ;; Hardware stack levels used:    1
  8480 ;; Hardware stack levels required when called:   11
  8481 ;; This function calls:
  8482 ;;		___awdiv
  8483 ;;		___awmod
  8484 ;;		_change_state_to_menu_12
  8485 ;;		_change_state_to_menu_22
  8486 ;;		_lcdInst
  8487 ;;		_printRTC
  8488 ;;		_printf
  8489 ;;		_strcpy
  8490 ;; This function is called by:
  8491 ;;		_main
  8492 ;; This function uses a non-reentrant model
  8493 ;;
  8494                           
  8495                           	psect	text27
  8496  000012                     __ptext27:
  8497                           	opt stack 0
  8498  000012                     _UI:
  8499                           	opt stack 19
  8500                           
  8501                           ;UI.c: 77: if(machine_state == DoneSorting_state){
  8502                           
  8503                           ; BSR set to: 0
  8504                           ;incstack = 0
  8505  000012  0E02               	movlw	2
  8506  000014  0100               	movlb	0	; () banked
  8507  000016  19FC               	xorwf	_machine_state& (0+255),w,b
  8508  000018  A4D8               	btfss	status,2,c
  8509  00001A  D086               	goto	l9194
  8510                           
  8511                           ; BSR set to: 0
  8512                           ;UI.c: 78: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  8513  00001C  0E01               	movlw	1
  8514  00001E  EC86  F02D         	call	_lcdInst
  8515  000022  0E68               	movlw	104
  8516  000024  0100               	movlb	0	; () banked
  8517  000026  6FC4               	movwf	??_UI& (0+255),b
  8518  000028  0EE4               	movlw	228
  8519  00002A                     u10007:
  8520  00002A  2EE8               	decfsz	wreg,f,c
  8521  00002C  D7FE               	bra	u10007
  8522  00002E  2FC4               	decfsz	??_UI& (0+255),f,b
  8523  000030  D7FC               	bra	u10007
  8524  000032  F000               	nop	
  8525                           
  8526                           ;UI.c: 79: lcdInst(0b10000000);;
  8527  000034  0E80               	movlw	128
  8528  000036  EC86  F02D         	call	_lcdInst
  8529                           
  8530                           ;UI.c: 80: printf("RESULTS IN LOG %d", sel+1);
  8531  00003A  0E5A               	movlw	low STR_1
  8532  00003C  0100               	movlb	0	; () banked
  8533  00003E  6F8E               	movwf	printf@f& (0+255),b
  8534  000040  0EFB               	movlw	high STR_1
  8535  000042  0100               	movlb	0	; () banked
  8536  000044  6F8F               	movwf	(printf@f+1)& (0+255),b
  8537  000046  0E01               	movlw	1
  8538  000048  0100               	movlb	0	; () banked
  8539  00004A  25FD               	addwf	_sel& (0+255),w,b
  8540  00004C  0100               	movlb	0	; () banked
  8541  00004E  6F90               	movwf	(?_printf+2)& (0+255),b
  8542  000050  0100               	movlb	0	; () banked
  8543  000052  6B91               	clrf	(?_printf+3)& (0+255),b
  8544  000054  0E00               	movlw	0
  8545  000056  2391               	addwfc	(?_printf+3)& (0+255),f,b
  8546  000058  ECC2  F00B         	call	_printf	;wreg free
  8547                           
  8548                           ;UI.c: 81: lcdInst(0b11000000);;
  8549  00005C  0EC0               	movlw	192
  8550  00005E  EC86  F02D         	call	_lcdInst
  8551                           
  8552                           ;UI.c: 82: printf("TIME: %d:%02d", (total_time % 3600) / 60, (total_time % 3600) % 60);
  8553  000062  0E0E               	movlw	14
  8554  000064  0100               	movlb	0	; () banked
  8555  000066  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  8556  000068  0E10               	movlw	16
  8557  00006A  6F82               	movwf	___awmod@divisor& (0+255),b
  8558  00006C  C0FA  F080         	movff	_total_time,___awmod@dividend
  8559  000070  C0FB  F081         	movff	_total_time+1,___awmod@dividend+1
  8560  000074  EC90  F025         	call	___awmod	;wreg free
  8561  000078  C080  F0C6         	movff	?___awmod,_UI$2425
  8562  00007C  C081  F0C7         	movff	?___awmod+1,_UI$2425+1
  8563                           
  8564                           ;UI.c: 82: printf("TIME: %d:%02d", (total_time % 3600) / 60, (total_time % 3600) % 60);
  8565  000080  0E31               	movlw	low STR_2
  8566  000082  0100               	movlb	0	; () banked
  8567  000084  6F8E               	movwf	printf@f& (0+255),b
  8568  000086  0EFF               	movlw	high STR_2
  8569  000088  0100               	movlb	0	; () banked
  8570  00008A  6F8F               	movwf	(printf@f+1)& (0+255),b
  8571  00008C  0E0E               	movlw	14
  8572  00008E  0100               	movlb	0	; () banked
  8573  000090  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  8574  000092  0E10               	movlw	16
  8575  000094  6F82               	movwf	___awmod@divisor& (0+255),b
  8576  000096  C0FA  F080         	movff	_total_time,___awmod@dividend
  8577  00009A  C0FB  F081         	movff	_total_time+1,___awmod@dividend+1
  8578  00009E  EC90  F025         	call	___awmod	;wreg free
  8579  0000A2  C080  F086         	movff	?___awmod,___awdiv@dividend
  8580  0000A6  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  8581  0000AA  0E00               	movlw	0
  8582  0000AC  0100               	movlb	0	; () banked
  8583  0000AE  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  8584  0000B0  0E3C               	movlw	60
  8585  0000B2  6F88               	movwf	___awdiv@divisor& (0+255),b
  8586  0000B4  EC7E  F024         	call	___awdiv	;wreg free
  8587  0000B8  C086  F090         	movff	?___awdiv,?_printf+2
  8588  0000BC  C087  F091         	movff	?___awdiv+1,?_printf+3
  8589  0000C0  C0C6  F080         	movff	_UI$2425,___awmod@dividend
  8590  0000C4  C0C7  F081         	movff	_UI$2425+1,___awmod@dividend+1
  8591  0000C8  0E00               	movlw	0
  8592  0000CA  0100               	movlb	0	; () banked
  8593  0000CC  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  8594  0000CE  0E3C               	movlw	60
  8595  0000D0  6F82               	movwf	___awmod@divisor& (0+255),b
  8596  0000D2  EC90  F025         	call	___awmod	;wreg free
  8597  0000D6  C080  F092         	movff	?___awmod,?_printf+4
  8598  0000DA  C081  F093         	movff	?___awmod+1,?_printf+5
  8599  0000DE  ECC2  F00B         	call	_printf	;wreg free
  8600  0000E2                     l185:
  8601  0000E2  B281               	btfsc	3969,1,c	;volatile
  8602  0000E4  D7FE               	goto	l185
  8603  0000E6                     l188:
  8604  0000E6  A281               	btfss	3969,1,c	;volatile
  8605  0000E8  D7FE               	goto	l188
  8606                           
  8607                           ;UI.c: 86: }
  8608                           ;UI.c: 87: if(cur_state == 12){
  8609  0000EA  0E0C               	movlw	12
  8610  0000EC  0100               	movlb	0	; () banked
  8611  0000EE  19E6               	xorwf	_cur_state& (0+255),w,b
  8612  0000F0  0100               	movlb	0	; () banked
  8613  0000F2  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
  8614  0000F4  A4D8               	btfss	status,2,c
  8615  0000F6  D003               	goto	l9188
  8616                           
  8617                           ; BSR set to: 0
  8618                           ;UI.c: 88: change_state_to_menu_12();
  8619  0000F8  ECC4  F02A         	call	_change_state_to_menu_12	;wreg free
  8620                           
  8621                           ;UI.c: 89: }
  8622  0000FC  D002               	goto	l193
  8623  0000FE                     l9188:
  8624                           
  8625                           ;UI.c: 90: else{
  8626                           ;UI.c: 91: change_state_to_menu_22();
  8627  0000FE  ECA8  F02A         	call	_change_state_to_menu_22	;wreg free
  8628  000102                     l193:
  8629  000102  B281               	btfsc	3969,1,c	;volatile
  8630  000104  D7FE               	goto	l193
  8631                           
  8632                           ;UI.c: 94: _delay((unsigned long)((100)*(32000000/4000.0)));
  8633  000106  0E05               	movlw	5
  8634  000108  0100               	movlb	0	; () banked
  8635  00010A  6FC5               	movwf	(??_UI+1)& (0+255),b
  8636  00010C  0E0F               	movlw	15
  8637  00010E  0100               	movlb	0	; () banked
  8638  000110  6FC4               	movwf	??_UI& (0+255),b
  8639  000112  0EF1               	movlw	241
  8640  000114                     u10017:
  8641  000114  2EE8               	decfsz	wreg,f,c
  8642  000116  D7FE               	bra	u10017
  8643  000118  2FC4               	decfsz	??_UI& (0+255),f,b
  8644  00011A  D7FC               	bra	u10017
  8645  00011C  2FC5               	decfsz	(??_UI+1)& (0+255),f,b
  8646  00011E  D7FA               	bra	u10017
  8647                           
  8648                           ;UI.c: 95: machine_state = UI_state;
  8649  000120  0E00               	movlw	0
  8650  000122  0100               	movlb	0	; () banked
  8651  000124  6FFC               	movwf	_machine_state& (0+255),b
  8652                           
  8653                           ;UI.c: 96: }
  8654  000126  D3D2               	goto	l9514
  8655  000128                     l9194:
  8656                           
  8657                           ; BSR set to: 0
  8658                           ;UI.c: 97: else if(cur_state == 0){
  8659  000128  0100               	movlb	0	; () banked
  8660  00012A  51E6               	movf	_cur_state& (0+255),w,b
  8661  00012C  0100               	movlb	0	; () banked
  8662  00012E  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
  8663  000130  A4D8               	btfss	status,2,c
  8664  000132  D3CC               	goto	l9514
  8665                           
  8666                           ; BSR set to: 0
  8667                           ;UI.c: 98: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
  8668  000134  0E00               	movlw	0
  8669  000136  0100               	movlb	0	; () banked
  8670  000138  6FC8               	movwf	UI@i& (0+255),b
  8671  00013A                     l9198:
  8672                           
  8673                           ; BSR set to: 0
  8674  00013A  0E63               	movlw	99
  8675  00013C  0100               	movlb	0	; () banked
  8676  00013E  65C8               	cpfsgt	UI@i& (0+255),b
  8677  000140  D001               	goto	l9202
  8678  000142  D00C               	goto	l9206
  8679  000144                     l9202:
  8680                           
  8681                           ; BSR set to: 0
  8682  000144  0E68               	movlw	104
  8683  000146  0100               	movlb	0	; () banked
  8684  000148  6FC4               	movwf	??_UI& (0+255),b
  8685  00014A  0EE4               	movlw	228
  8686  00014C                     u10027:
  8687  00014C  2EE8               	decfsz	wreg,f,c
  8688  00014E  D7FE               	bra	u10027
  8689  000150  2FC4               	decfsz	??_UI& (0+255),f,b
  8690  000152  D7FC               	bra	u10027
  8691  000154  F000               	nop	
  8692  000156  0100               	movlb	0	; () banked
  8693  000158  2BC8               	incf	UI@i& (0+255),f,b
  8694  00015A  D7EF               	goto	l9198
  8695  00015C                     l9206:
  8696                           
  8697                           ; BSR set to: 0
  8698                           ;UI.c: 99: if(cur_state == 0){
  8699  00015C  0100               	movlb	0	; () banked
  8700  00015E  51E6               	movf	_cur_state& (0+255),w,b
  8701  000160  0100               	movlb	0	; () banked
  8702  000162  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
  8703  000164  A4D8               	btfss	status,2,c
  8704  000166  D3B2               	goto	l9514
  8705                           
  8706                           ; BSR set to: 0
  8707                           ;UI.c: 100: printRTC();
  8708  000168  EC63  F016         	call	_printRTC	;wreg free
  8709                           
  8710                           ;UI.c: 101: }
  8711                           ;UI.c: 102: }
  8712                           ;UI.c: 103: while(logstate){
  8713  00016C  D3AF               	goto	l9514
  8714  00016E                     l9210:
  8715                           
  8716                           ;UI.c: 105: if(!log_completion){
  8717  00016E  0100               	movlb	0	; () banked
  8718  000170  51F0               	movf	_log_completion& (0+255),w,b
  8719  000172  0100               	movlb	0	; () banked
  8720  000174  11F1               	iorwf	(_log_completion+1)& (0+255),w,b
  8721  000176  A4D8               	btfss	status,2,c
  8722  000178  D041               	goto	l9240
  8723                           
  8724                           ; BSR set to: 0
  8725                           ;UI.c: 106: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  8726  00017A  0E01               	movlw	1
  8727  00017C  EC86  F02D         	call	_lcdInst
  8728  000180  0E68               	movlw	104
  8729  000182  0100               	movlb	0	; () banked
  8730  000184  6FC4               	movwf	??_UI& (0+255),b
  8731  000186  0EE4               	movlw	228
  8732  000188                     u10037:
  8733  000188  2EE8               	decfsz	wreg,f,c
  8734  00018A  D7FE               	bra	u10037
  8735  00018C  2FC4               	decfsz	??_UI& (0+255),f,b
  8736  00018E  D7FC               	bra	u10037
  8737  000190  F000               	nop	
  8738                           
  8739                           ;UI.c: 107: lcdInst(0b10000000);;
  8740  000192  0E80               	movlw	128
  8741  000194  EC86  F02D         	call	_lcdInst
  8742                           
  8743                           ;UI.c: 108: printf("-- LOG %2d HERE--", log);
  8744  000198  0E48               	movlw	low STR_3
  8745  00019A  0100               	movlb	0	; () banked
  8746  00019C  6F8E               	movwf	printf@f& (0+255),b
  8747  00019E  0EFB               	movlw	high STR_3
  8748  0001A0  0100               	movlb	0	; () banked
  8749  0001A2  6F8F               	movwf	(printf@f+1)& (0+255),b
  8750  0001A4  C0EE  F090         	movff	_log,?_printf+2
  8751  0001A8  C0EF  F091         	movff	_log+1,?_printf+3
  8752  0001AC  ECC2  F00B         	call	_printf	;wreg free
  8753                           
  8754                           ;UI.c: 109: lcdInst(0b11000000);;
  8755  0001B0  0EC0               	movlw	192
  8756  0001B2  EC86  F02D         	call	_lcdInst
  8757                           
  8758                           ;UI.c: 110: printf("DIDN'T COMPLETE");
  8759  0001B6  0E45               	movlw	low STR_4
  8760  0001B8  0100               	movlb	0	; () banked
  8761  0001BA  6F8E               	movwf	printf@f& (0+255),b
  8762  0001BC  0EFE               	movlw	high STR_4
  8763  0001BE  0100               	movlb	0	; () banked
  8764  0001C0  6F8F               	movwf	(printf@f+1)& (0+255),b
  8765  0001C2  ECC2  F00B         	call	_printf	;wreg free
  8766  0001C6                     l9224:
  8767  0001C6  0E00               	movlw	0
  8768  0001C8  0100               	movlb	0	; () banked
  8769  0001CA  6FC9               	movwf	UI@i_412& (0+255),b
  8770  0001CC                     l9226:
  8771                           
  8772                           ; BSR set to: 0
  8773  0001CC  0E63               	movlw	99
  8774  0001CE  0100               	movlb	0	; () banked
  8775  0001D0  65C9               	cpfsgt	UI@i_412& (0+255),b
  8776  0001D2  D001               	goto	l9230
  8777  0001D4  D00C               	goto	l9234
  8778  0001D6                     l9230:
  8779                           
  8780                           ; BSR set to: 0
  8781  0001D6  0E68               	movlw	104
  8782  0001D8  0100               	movlb	0	; () banked
  8783  0001DA  6FC4               	movwf	??_UI& (0+255),b
  8784  0001DC  0EE4               	movlw	228
  8785  0001DE                     u10047:
  8786  0001DE  2EE8               	decfsz	wreg,f,c
  8787  0001E0  D7FE               	bra	u10047
  8788  0001E2  2FC4               	decfsz	??_UI& (0+255),f,b
  8789  0001E4  D7FC               	bra	u10047
  8790  0001E6  F000               	nop	
  8791  0001E8  0100               	movlb	0	; () banked
  8792  0001EA  2BC9               	incf	UI@i_412& (0+255),f,b
  8793  0001EC  D7EF               	goto	l9226
  8794  0001EE                     l9234:
  8795                           
  8796                           ; BSR set to: 0
  8797  0001EE  0100               	movlb	0	; () banked
  8798  0001F0  51F8               	movf	_logstate& (0+255),w,b
  8799  0001F2  0100               	movlb	0	; () banked
  8800  0001F4  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  8801  0001F6  B4D8               	btfsc	status,2,c
  8802  0001F8  0012               	return	
  8803  0001FA  D7E5               	goto	l9224
  8804  0001FC                     l9240:
  8805                           
  8806                           ; BSR set to: 0
  8807                           ;UI.c: 114: else{
  8808                           ;UI.c: 115: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  8809  0001FC  0E01               	movlw	1
  8810  0001FE  EC86  F02D         	call	_lcdInst
  8811  000202  0E68               	movlw	104
  8812  000204  0100               	movlb	0	; () banked
  8813  000206  6FC4               	movwf	??_UI& (0+255),b
  8814  000208  0EE4               	movlw	228
  8815  00020A                     u10057:
  8816  00020A  2EE8               	decfsz	wreg,f,c
  8817  00020C  D7FE               	bra	u10057
  8818  00020E  2FC4               	decfsz	??_UI& (0+255),f,b
  8819  000210  D7FC               	bra	u10057
  8820  000212  F000               	nop	
  8821                           
  8822                           ;UI.c: 116: lcdInst(0b10000000);;
  8823  000214  0E80               	movlw	128
  8824  000216  EC86  F02D         	call	_lcdInst
  8825                           
  8826                           ;UI.c: 117: printf("-- LOG %2d HERE--", log);
  8827  00021A  0E48               	movlw	low STR_3
  8828  00021C  0100               	movlb	0	; () banked
  8829  00021E  6F8E               	movwf	printf@f& (0+255),b
  8830  000220  0EFB               	movlw	high STR_3
  8831  000222  0100               	movlb	0	; () banked
  8832  000224  6F8F               	movwf	(printf@f+1)& (0+255),b
  8833  000226  C0EE  F090         	movff	_log,?_printf+2
  8834  00022A  C0EF  F091         	movff	_log+1,?_printf+3
  8835  00022E  ECC2  F00B         	call	_printf	;wreg free
  8836                           
  8837                           ;UI.c: 118: lcdInst(0b11000000);;
  8838  000232  0EC0               	movlw	192
  8839  000234  EC86  F02D         	call	_lcdInst
  8840                           
  8841                           ;UI.c: 119: printf("PAUSE < | BACK >");
  8842  000238  0EE1               	movlw	low STR_6
  8843  00023A  0100               	movlb	0	; () banked
  8844  00023C  6F8E               	movwf	printf@f& (0+255),b
  8845  00023E  0EFD               	movlw	high STR_6
  8846  000240  0100               	movlb	0	; () banked
  8847  000242  6F8F               	movwf	(printf@f+1)& (0+255),b
  8848  000244  ECC2  F00B         	call	_printf	;wreg free
  8849                           
  8850                           ;UI.c: 121: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8851  000248  0E00               	movlw	0
  8852  00024A  0100               	movlb	0	; () banked
  8853  00024C  6FCA               	movwf	UI@i_415& (0+255),b
  8854  00024E                     l9254:
  8855                           
  8856                           ; BSR set to: 0
  8857  00024E  0E63               	movlw	99
  8858  000250  0100               	movlb	0	; () banked
  8859  000252  65CA               	cpfsgt	UI@i_415& (0+255),b
  8860  000254  D001               	goto	l9258
  8861  000256  D00C               	goto	l9262
  8862  000258                     l9258:
  8863                           
  8864                           ; BSR set to: 0
  8865  000258  0E68               	movlw	104
  8866  00025A  0100               	movlb	0	; () banked
  8867  00025C  6FC4               	movwf	??_UI& (0+255),b
  8868  00025E  0EE4               	movlw	228
  8869  000260                     u10067:
  8870  000260  2EE8               	decfsz	wreg,f,c
  8871  000262  D7FE               	bra	u10067
  8872  000264  2FC4               	decfsz	??_UI& (0+255),f,b
  8873  000266  D7FC               	bra	u10067
  8874  000268  F000               	nop	
  8875  00026A  0100               	movlb	0	; () banked
  8876  00026C  2BCA               	incf	UI@i_415& (0+255),f,b
  8877  00026E  D7EF               	goto	l9254
  8878  000270                     l9262:
  8879                           
  8880                           ; BSR set to: 0
  8881  000270  0100               	movlb	0	; () banked
  8882  000272  51F8               	movf	_logstate& (0+255),w,b
  8883  000274  0100               	movlb	0	; () banked
  8884  000276  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  8885  000278  B4D8               	btfsc	status,2,c
  8886  00027A  0012               	return	
  8887                           
  8888                           ; BSR set to: 0
  8889                           ;UI.c: 122: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8890                           
  8891                           ; BSR set to: 0
  8892                           
  8893                           ; BSR set to: 0
  8894  00027C  0E00               	movlw	0
  8895  00027E  0100               	movlb	0	; () banked
  8896  000280  6FCB               	movwf	UI@i_416& (0+255),b
  8897  000282                     l9268:
  8898                           
  8899                           ; BSR set to: 0
  8900  000282  0E63               	movlw	99
  8901  000284  0100               	movlb	0	; () banked
  8902  000286  65CB               	cpfsgt	UI@i_416& (0+255),b
  8903  000288  D001               	goto	l9272
  8904  00028A  D00C               	goto	l9276
  8905  00028C                     l9272:
  8906                           
  8907                           ; BSR set to: 0
  8908  00028C  0E68               	movlw	104
  8909  00028E  0100               	movlb	0	; () banked
  8910  000290  6FC4               	movwf	??_UI& (0+255),b
  8911  000292  0EE4               	movlw	228
  8912  000294                     u10077:
  8913  000294  2EE8               	decfsz	wreg,f,c
  8914  000296  D7FE               	bra	u10077
  8915  000298  2FC4               	decfsz	??_UI& (0+255),f,b
  8916  00029A  D7FC               	bra	u10077
  8917  00029C  F000               	nop	
  8918  00029E  0100               	movlb	0	; () banked
  8919  0002A0  2BCB               	incf	UI@i_416& (0+255),f,b
  8920  0002A2  D7EF               	goto	l9268
  8921  0002A4                     l9276:
  8922                           
  8923                           ; BSR set to: 0
  8924  0002A4  0100               	movlb	0	; () banked
  8925  0002A6  51F8               	movf	_logstate& (0+255),w,b
  8926  0002A8  0100               	movlb	0	; () banked
  8927  0002AA  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  8928  0002AC  B4D8               	btfsc	status,2,c
  8929  0002AE  0012               	return	
  8930                           
  8931                           ; BSR set to: 0
  8932                           ;UI.c: 124: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  8933                           
  8934                           ; BSR set to: 0
  8935                           
  8936                           ; BSR set to: 0
  8937  0002B0  0E01               	movlw	1
  8938  0002B2  EC86  F02D         	call	_lcdInst
  8939  0002B6  0E68               	movlw	104
  8940  0002B8  0100               	movlb	0	; () banked
  8941  0002BA  6FC4               	movwf	??_UI& (0+255),b
  8942  0002BC  0EE4               	movlw	228
  8943  0002BE                     u10087:
  8944  0002BE  2EE8               	decfsz	wreg,f,c
  8945  0002C0  D7FE               	bra	u10087
  8946  0002C2  2FC4               	decfsz	??_UI& (0+255),f,b
  8947  0002C4  D7FC               	bra	u10087
  8948  0002C6  F000               	nop	
  8949                           
  8950                           ;UI.c: 125: lcdInst(0b10000000);;
  8951  0002C8  0E80               	movlw	128
  8952  0002CA  EC86  F02D         	call	_lcdInst
  8953                           
  8954                           ;UI.c: 126: printf("START:");
  8955  0002CE  0EC3               	movlw	low STR_7
  8956  0002D0  0100               	movlb	0	; () banked
  8957  0002D2  6F8E               	movwf	printf@f& (0+255),b
  8958  0002D4  0EFF               	movlw	high STR_7
  8959  0002D6  0100               	movlb	0	; () banked
  8960  0002D8  6F8F               	movwf	(printf@f+1)& (0+255),b
  8961  0002DA  ECC2  F00B         	call	_printf	;wreg free
  8962                           
  8963                           ;UI.c: 127: lcdInst(0b11000000);;
  8964  0002DE  0EC0               	movlw	192
  8965  0002E0  EC86  F02D         	call	_lcdInst
  8966                           
  8967                           ;UI.c: 128: char month[] = "MMM";
  8968  0002E4  C149  F0D6         	movff	UI@F3246,UI@month
  8969  0002E8  C14A  F0D7         	movff	UI@F3246+1,UI@month+1
  8970  0002EC  C14B  F0D8         	movff	UI@F3246+2,UI@month+2
  8971  0002F0  C14C  F0D9         	movff	UI@F3246+3,UI@month+3
  8972                           
  8973                           ;UI.c: 129: switch(log_startTime[5]){
  8974  0002F4  D0C3               	goto	l9320
  8975  0002F6                     l9292:
  8976                           
  8977                           ;UI.c: 131: strcpy(month, "JAN");
  8978  0002F6  0ED6               	movlw	low UI@month
  8979  0002F8  0100               	movlb	0	; () banked
  8980  0002FA  6F80               	movwf	strcpy@to& (0+255),b
  8981  0002FC  0E00               	movlw	high UI@month
  8982  0002FE  0100               	movlb	0	; () banked
  8983  000300  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8984  000302  0EDA               	movlw	low STR_8
  8985  000304  0100               	movlb	0	; () banked
  8986  000306  6F82               	movwf	strcpy@from& (0+255),b
  8987  000308  0EFF               	movlw	high STR_8
  8988  00030A  0100               	movlb	0	; () banked
  8989  00030C  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8990  00030E  ECE0  F02A         	call	_strcpy	;wreg free
  8991                           
  8992                           ;UI.c: 132: break;
  8993  000312  D0E6               	goto	l9322
  8994  000314                     l9294:
  8995                           
  8996                           ;UI.c: 134: strcpy(month, "FEB");
  8997  000314  0ED6               	movlw	low UI@month
  8998  000316  0100               	movlb	0	; () banked
  8999  000318  6F80               	movwf	strcpy@to& (0+255),b
  9000  00031A  0E00               	movlw	high UI@month
  9001  00031C  0100               	movlb	0	; () banked
  9002  00031E  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9003  000320  0ECA               	movlw	low STR_9
  9004  000322  0100               	movlb	0	; () banked
  9005  000324  6F82               	movwf	strcpy@from& (0+255),b
  9006  000326  0EFF               	movlw	high STR_9
  9007  000328  0100               	movlb	0	; () banked
  9008  00032A  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9009  00032C  ECE0  F02A         	call	_strcpy	;wreg free
  9010                           
  9011                           ;UI.c: 135: break;
  9012  000330  D0D7               	goto	l9322
  9013  000332                     l9296:
  9014                           
  9015                           ;UI.c: 137: strcpy(month, "MAR");
  9016  000332  0ED6               	movlw	low UI@month
  9017  000334  0100               	movlb	0	; () banked
  9018  000336  6F80               	movwf	strcpy@to& (0+255),b
  9019  000338  0E00               	movlw	high UI@month
  9020  00033A  0100               	movlb	0	; () banked
  9021  00033C  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9022  00033E  0EE6               	movlw	low STR_10
  9023  000340  0100               	movlb	0	; () banked
  9024  000342  6F82               	movwf	strcpy@from& (0+255),b
  9025  000344  0EFF               	movlw	high STR_10
  9026  000346  0100               	movlb	0	; () banked
  9027  000348  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9028  00034A  ECE0  F02A         	call	_strcpy	;wreg free
  9029                           
  9030                           ;UI.c: 138: break;
  9031  00034E  D0C8               	goto	l9322
  9032  000350                     l9298:
  9033                           
  9034                           ;UI.c: 140: strcpy(month, "APR");
  9035  000350  0ED6               	movlw	low UI@month
  9036  000352  0100               	movlb	0	; () banked
  9037  000354  6F80               	movwf	strcpy@to& (0+255),b
  9038  000356  0E00               	movlw	high UI@month
  9039  000358  0100               	movlb	0	; () banked
  9040  00035A  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9041  00035C  0EEA               	movlw	low STR_11
  9042  00035E  0100               	movlb	0	; () banked
  9043  000360  6F82               	movwf	strcpy@from& (0+255),b
  9044  000362  0EFF               	movlw	high STR_11
  9045  000364  0100               	movlb	0	; () banked
  9046  000366  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9047  000368  ECE0  F02A         	call	_strcpy	;wreg free
  9048                           
  9049                           ;UI.c: 141: break;
  9050  00036C  D0B9               	goto	l9322
  9051  00036E                     l9300:
  9052                           
  9053                           ;UI.c: 143: strcpy(month, "MAY");
  9054  00036E  0ED6               	movlw	low UI@month
  9055  000370  0100               	movlb	0	; () banked
  9056  000372  6F80               	movwf	strcpy@to& (0+255),b
  9057  000374  0E00               	movlw	high UI@month
  9058  000376  0100               	movlb	0	; () banked
  9059  000378  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9060  00037A  0EFA               	movlw	low STR_12
  9061  00037C  0100               	movlb	0	; () banked
  9062  00037E  6F82               	movwf	strcpy@from& (0+255),b
  9063  000380  0EFF               	movlw	high STR_12
  9064  000382  0100               	movlb	0	; () banked
  9065  000384  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9066  000386  ECE0  F02A         	call	_strcpy	;wreg free
  9067                           
  9068                           ;UI.c: 144: break;
  9069  00038A  D0AA               	goto	l9322
  9070  00038C                     l9302:
  9071                           
  9072                           ;UI.c: 146: strcpy(month, "JUN");
  9073  00038C  0ED6               	movlw	low UI@month
  9074  00038E  0100               	movlb	0	; () banked
  9075  000390  6F80               	movwf	strcpy@to& (0+255),b
  9076  000392  0E00               	movlw	high UI@month
  9077  000394  0100               	movlb	0	; () banked
  9078  000396  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9079  000398  0EDE               	movlw	low STR_13
  9080  00039A  0100               	movlb	0	; () banked
  9081  00039C  6F82               	movwf	strcpy@from& (0+255),b
  9082  00039E  0EFF               	movlw	high STR_13
  9083  0003A0  0100               	movlb	0	; () banked
  9084  0003A2  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9085  0003A4  ECE0  F02A         	call	_strcpy	;wreg free
  9086                           
  9087                           ;UI.c: 147: break;
  9088  0003A8  D09B               	goto	l9322
  9089  0003AA                     l9304:
  9090                           
  9091                           ;UI.c: 149: strcpy(month, "JUL");
  9092  0003AA  0ED6               	movlw	low UI@month
  9093  0003AC  0100               	movlb	0	; () banked
  9094  0003AE  6F80               	movwf	strcpy@to& (0+255),b
  9095  0003B0  0E00               	movlw	high UI@month
  9096  0003B2  0100               	movlb	0	; () banked
  9097  0003B4  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9098  0003B6  0ED6               	movlw	low STR_14
  9099  0003B8  0100               	movlb	0	; () banked
  9100  0003BA  6F82               	movwf	strcpy@from& (0+255),b
  9101  0003BC  0EFF               	movlw	high STR_14
  9102  0003BE  0100               	movlb	0	; () banked
  9103  0003C0  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9104  0003C2  ECE0  F02A         	call	_strcpy	;wreg free
  9105                           
  9106                           ;UI.c: 150: break;
  9107  0003C6  D08C               	goto	l9322
  9108  0003C8                     l9306:
  9109                           
  9110                           ;UI.c: 152: strcpy(month, "AUG");
  9111  0003C8  0ED6               	movlw	low UI@month
  9112  0003CA  0100               	movlb	0	; () banked
  9113  0003CC  6F80               	movwf	strcpy@to& (0+255),b
  9114  0003CE  0E00               	movlw	high UI@month
  9115  0003D0  0100               	movlb	0	; () banked
  9116  0003D2  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9117  0003D4  0ED2               	movlw	low STR_15
  9118  0003D6  0100               	movlb	0	; () banked
  9119  0003D8  6F82               	movwf	strcpy@from& (0+255),b
  9120  0003DA  0EFF               	movlw	high STR_15
  9121  0003DC  0100               	movlb	0	; () banked
  9122  0003DE  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9123  0003E0  ECE0  F02A         	call	_strcpy	;wreg free
  9124                           
  9125                           ;UI.c: 153: break;
  9126  0003E4  D07D               	goto	l9322
  9127  0003E6                     l9308:
  9128                           
  9129                           ;UI.c: 155: strcpy(month, "SEP");
  9130  0003E6  0ED6               	movlw	low UI@month
  9131  0003E8  0100               	movlb	0	; () banked
  9132  0003EA  6F80               	movwf	strcpy@to& (0+255),b
  9133  0003EC  0E00               	movlw	high UI@month
  9134  0003EE  0100               	movlb	0	; () banked
  9135  0003F0  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9136  0003F2  0EE2               	movlw	low STR_16
  9137  0003F4  0100               	movlb	0	; () banked
  9138  0003F6  6F82               	movwf	strcpy@from& (0+255),b
  9139  0003F8  0EFF               	movlw	high STR_16
  9140  0003FA  0100               	movlb	0	; () banked
  9141  0003FC  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9142  0003FE  ECE0  F02A         	call	_strcpy	;wreg free
  9143                           
  9144                           ;UI.c: 156: break;
  9145  000402  D06E               	goto	l9322
  9146  000404                     l9310:
  9147                           
  9148                           ;UI.c: 158: strcpy(month, "OCT");
  9149  000404  0ED6               	movlw	low UI@month
  9150  000406  0100               	movlb	0	; () banked
  9151  000408  6F80               	movwf	strcpy@to& (0+255),b
  9152  00040A  0E00               	movlw	high UI@month
  9153  00040C  0100               	movlb	0	; () banked
  9154  00040E  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9155  000410  0EF2               	movlw	low STR_17
  9156  000412  0100               	movlb	0	; () banked
  9157  000414  6F82               	movwf	strcpy@from& (0+255),b
  9158  000416  0EFF               	movlw	high STR_17
  9159  000418  0100               	movlb	0	; () banked
  9160  00041A  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9161  00041C  ECE0  F02A         	call	_strcpy	;wreg free
  9162                           
  9163                           ;UI.c: 159: break;
  9164  000420  D05F               	goto	l9322
  9165  000422                     l9312:
  9166                           
  9167                           ;UI.c: 161: strcpy(month, "NOV");
  9168  000422  0ED6               	movlw	low UI@month
  9169  000424  0100               	movlb	0	; () banked
  9170  000426  6F80               	movwf	strcpy@to& (0+255),b
  9171  000428  0E00               	movlw	high UI@month
  9172  00042A  0100               	movlb	0	; () banked
  9173  00042C  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9174  00042E  0EF6               	movlw	low STR_18
  9175  000430  0100               	movlb	0	; () banked
  9176  000432  6F82               	movwf	strcpy@from& (0+255),b
  9177  000434  0EFF               	movlw	high STR_18
  9178  000436  0100               	movlb	0	; () banked
  9179  000438  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9180  00043A  ECE0  F02A         	call	_strcpy	;wreg free
  9181                           
  9182                           ;UI.c: 162: break;
  9183  00043E  D050               	goto	l9322
  9184  000440                     l9314:
  9185                           
  9186                           ;UI.c: 164: strcpy(month, "DEC");
  9187  000440  0ED6               	movlw	low UI@month
  9188  000442  0100               	movlb	0	; () banked
  9189  000444  6F80               	movwf	strcpy@to& (0+255),b
  9190  000446  0E00               	movlw	high UI@month
  9191  000448  0100               	movlb	0	; () banked
  9192  00044A  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9193  00044C  0ECE               	movlw	low STR_19
  9194  00044E  0100               	movlb	0	; () banked
  9195  000450  6F82               	movwf	strcpy@from& (0+255),b
  9196  000452  0EFF               	movlw	high STR_19
  9197  000454  0100               	movlb	0	; () banked
  9198  000456  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9199  000458  ECE0  F02A         	call	_strcpy	;wreg free
  9200                           
  9201                           ;UI.c: 165: break;
  9202  00045C  D041               	goto	l9322
  9203  00045E                     l9316:
  9204                           
  9205                           ;UI.c: 167: strcpy(month, "ERR");
  9206  00045E  0ED6               	movlw	low UI@month
  9207  000460  0100               	movlb	0	; () banked
  9208  000462  6F80               	movwf	strcpy@to& (0+255),b
  9209  000464  0E00               	movlw	high UI@month
  9210  000466  0100               	movlb	0	; () banked
  9211  000468  6F81               	movwf	(strcpy@to+1)& (0+255),b
  9212  00046A  0EEE               	movlw	low STR_20
  9213  00046C  0100               	movlb	0	; () banked
  9214  00046E  6F82               	movwf	strcpy@from& (0+255),b
  9215  000470  0EFF               	movlw	high STR_20
  9216  000472  0100               	movlb	0	; () banked
  9217  000474  6F83               	movwf	(strcpy@from+1)& (0+255),b
  9218  000476  ECE0  F02A         	call	_strcpy	;wreg free
  9219                           
  9220                           ;UI.c: 169: }
  9221                           
  9222                           ;UI.c: 168: break;
  9223  00047A  D032               	goto	l9322
  9224  00047C                     l9320:
  9225  00047C  EE21  F00A         	lfsr	2,_log_startTime+10
  9226  000480  CFDE F0C4          	movff	postinc2,??_UI
  9227  000484  CFDD F0C5          	movff	postdec2,??_UI+1
  9228                           
  9229                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9230                           ; Switch size 1, requested type "space"
  9231                           ; Number of cases is 1, Range of values is 0 to 0
  9232                           ; switch strategies available:
  9233                           ; Name         Instructions Cycles
  9234                           ; simple_byte            4     3 (average)
  9235                           ;	Chosen strategy is simple_byte
  9236  000488  0100               	movlb	0	; () banked
  9237  00048A  51C5               	movf	(??_UI+1)& (0+255),w,b
  9238  00048C  0A00               	xorlw	0	; case 0
  9239  00048E  A4D8               	btfss	status,2,c
  9240  000490  D7E6               	goto	l9316
  9241                           
  9242                           ; BSR set to: 0
  9243                           ; Switch size 1, requested type "space"
  9244                           ; Number of cases is 12, Range of values is 1 to 12
  9245                           ; switch strategies available:
  9246                           ; Name         Instructions Cycles
  9247                           ; simple_byte           37    19 (average)
  9248                           ;	Chosen strategy is simple_byte
  9249  000492  0100               	movlb	0	; () banked
  9250  000494  51C4               	movf	??_UI& (0+255),w,b
  9251  000496  0A01               	xorlw	1	; case 1
  9252  000498  B4D8               	btfsc	status,2,c
  9253  00049A  D72D               	goto	l9292
  9254  00049C  0A03               	xorlw	3	; case 2
  9255  00049E  B4D8               	btfsc	status,2,c
  9256  0004A0  D739               	goto	l9294
  9257  0004A2  0A01               	xorlw	1	; case 3
  9258  0004A4  B4D8               	btfsc	status,2,c
  9259  0004A6  D745               	goto	l9296
  9260  0004A8  0A07               	xorlw	7	; case 4
  9261  0004AA  B4D8               	btfsc	status,2,c
  9262  0004AC  D751               	goto	l9298
  9263  0004AE  0A01               	xorlw	1	; case 5
  9264  0004B0  B4D8               	btfsc	status,2,c
  9265  0004B2  D75D               	goto	l9300
  9266  0004B4  0A03               	xorlw	3	; case 6
  9267  0004B6  B4D8               	btfsc	status,2,c
  9268  0004B8  D769               	goto	l9302
  9269  0004BA  0A01               	xorlw	1	; case 7
  9270  0004BC  B4D8               	btfsc	status,2,c
  9271  0004BE  D775               	goto	l9304
  9272  0004C0  0A0F               	xorlw	15	; case 8
  9273  0004C2  B4D8               	btfsc	status,2,c
  9274  0004C4  D781               	goto	l9306
  9275  0004C6  0A01               	xorlw	1	; case 9
  9276  0004C8  B4D8               	btfsc	status,2,c
  9277  0004CA  D78D               	goto	l9308
  9278  0004CC  0A03               	xorlw	3	; case 10
  9279  0004CE  B4D8               	btfsc	status,2,c
  9280  0004D0  D799               	goto	l9310
  9281  0004D2  0A01               	xorlw	1	; case 11
  9282  0004D4  B4D8               	btfsc	status,2,c
  9283  0004D6  D7A5               	goto	l9312
  9284  0004D8  0A07               	xorlw	7	; case 12
  9285  0004DA  B4D8               	btfsc	status,2,c
  9286  0004DC  D7B1               	goto	l9314
  9287  0004DE  D7BF               	goto	l9316
  9288  0004E0                     l9322:
  9289                           
  9290                           ;UI.c: 170: printf("%02d%s | %02d:%02d:%02d", log_startTime[4],month,log_startTime[2],lo
      +                          g_startTime[1],log_startTime[0]);
  9291  0004E0  0EAE               	movlw	low STR_21
  9292  0004E2  0100               	movlb	0	; () banked
  9293  0004E4  6F8E               	movwf	printf@f& (0+255),b
  9294  0004E6  0EFA               	movlw	high STR_21
  9295  0004E8  0100               	movlb	0	; () banked
  9296  0004EA  6F8F               	movwf	(printf@f+1)& (0+255),b
  9297  0004EC  C108  F090         	movff	_log_startTime+8,?_printf+2
  9298  0004F0  C109  F091         	movff	_log_startTime+9,?_printf+3
  9299  0004F4  0ED6               	movlw	low UI@month
  9300  0004F6  0100               	movlb	0	; () banked
  9301  0004F8  6F92               	movwf	(?_printf+4)& (0+255),b
  9302  0004FA  0E00               	movlw	high UI@month
  9303  0004FC  0100               	movlb	0	; () banked
  9304  0004FE  6F93               	movwf	(?_printf+5)& (0+255),b
  9305  000500  C104  F094         	movff	_log_startTime+4,?_printf+6
  9306  000504  C105  F095         	movff	_log_startTime+5,?_printf+7
  9307  000508  C102  F096         	movff	_log_startTime+2,?_printf+8
  9308  00050C  C103  F097         	movff	_log_startTime+3,?_printf+9
  9309  000510  C100  F098         	movff	_log_startTime,?_printf+10
  9310  000514  C101  F099         	movff	_log_startTime+1,?_printf+11
  9311  000518  ECC2  F00B         	call	_printf	;wreg free
  9312                           
  9313                           ;UI.c: 172: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  9314  00051C  0E00               	movlw	0
  9315  00051E  0100               	movlb	0	; () banked
  9316  000520  6FCC               	movwf	UI@i_434& (0+255),b
  9317  000522                     l9326:
  9318                           
  9319                           ; BSR set to: 0
  9320  000522  0E63               	movlw	99
  9321  000524  0100               	movlb	0	; () banked
  9322  000526  65CC               	cpfsgt	UI@i_434& (0+255),b
  9323  000528  D001               	goto	l9330
  9324  00052A  D00C               	goto	l9334
  9325  00052C                     l9330:
  9326                           
  9327                           ; BSR set to: 0
  9328  00052C  0E68               	movlw	104
  9329  00052E  0100               	movlb	0	; () banked
  9330  000530  6FC4               	movwf	??_UI& (0+255),b
  9331  000532  0EE4               	movlw	228
  9332  000534                     u10097:
  9333  000534  2EE8               	decfsz	wreg,f,c
  9334  000536  D7FE               	bra	u10097
  9335  000538  2FC4               	decfsz	??_UI& (0+255),f,b
  9336  00053A  D7FC               	bra	u10097
  9337  00053C  F000               	nop	
  9338  00053E  0100               	movlb	0	; () banked
  9339  000540  2BCC               	incf	UI@i_434& (0+255),f,b
  9340  000542  D7EF               	goto	l9326
  9341  000544                     l9334:
  9342                           
  9343                           ; BSR set to: 0
  9344  000544  0100               	movlb	0	; () banked
  9345  000546  51F8               	movf	_logstate& (0+255),w,b
  9346  000548  0100               	movlb	0	; () banked
  9347  00054A  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  9348  00054C  B4D8               	btfsc	status,2,c
  9349  00054E  0012               	return	
  9350                           
  9351                           ; BSR set to: 0
  9352                           ;UI.c: 173: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  9353                           
  9354                           ; BSR set to: 0
  9355                           
  9356                           ; BSR set to: 0
  9357  000550  0E00               	movlw	0
  9358  000552  0100               	movlb	0	; () banked
  9359  000554  6FCD               	movwf	UI@i_435& (0+255),b
  9360  000556                     l9340:
  9361                           
  9362                           ; BSR set to: 0
  9363  000556  0E63               	movlw	99
  9364  000558  0100               	movlb	0	; () banked
  9365  00055A  65CD               	cpfsgt	UI@i_435& (0+255),b
  9366  00055C  D001               	goto	l9344
  9367  00055E  D00C               	goto	l9348
  9368  000560                     l9344:
  9369                           
  9370                           ; BSR set to: 0
  9371  000560  0E68               	movlw	104
  9372  000562  0100               	movlb	0	; () banked
  9373  000564  6FC4               	movwf	??_UI& (0+255),b
  9374  000566  0EE4               	movlw	228
  9375  000568                     u10107:
  9376  000568  2EE8               	decfsz	wreg,f,c
  9377  00056A  D7FE               	bra	u10107
  9378  00056C  2FC4               	decfsz	??_UI& (0+255),f,b
  9379  00056E  D7FC               	bra	u10107
  9380  000570  F000               	nop	
  9381  000572  0100               	movlb	0	; () banked
  9382  000574  2BCD               	incf	UI@i_435& (0+255),f,b
  9383  000576  D7EF               	goto	l9340
  9384  000578                     l9348:
  9385                           
  9386                           ; BSR set to: 0
  9387  000578  0100               	movlb	0	; () banked
  9388  00057A  51F8               	movf	_logstate& (0+255),w,b
  9389  00057C  0100               	movlb	0	; () banked
  9390  00057E  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  9391  000580  B4D8               	btfsc	status,2,c
  9392  000582  0012               	return	
  9393                           
  9394                           ; BSR set to: 0
  9395                           ;UI.c: 175: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  9396                           
  9397                           ; BSR set to: 0
  9398                           
  9399                           ; BSR set to: 0
  9400  000584  0E01               	movlw	1
  9401  000586  EC86  F02D         	call	_lcdInst
  9402  00058A  0E68               	movlw	104
  9403  00058C  0100               	movlb	0	; () banked
  9404  00058E  6FC4               	movwf	??_UI& (0+255),b
  9405  000590  0EE4               	movlw	228
  9406  000592                     u10117:
  9407  000592  2EE8               	decfsz	wreg,f,c
  9408  000594  D7FE               	bra	u10117
  9409  000596  2FC4               	decfsz	??_UI& (0+255),f,b
  9410  000598  D7FC               	bra	u10117
  9411  00059A  F000               	nop	
  9412                           
  9413                           ;UI.c: 176: lcdInst(0b10000000);;
  9414  00059C  0E80               	movlw	128
  9415  00059E  EC86  F02D         	call	_lcdInst
  9416                           
  9417                           ;UI.c: 177: printf("DURATION:");
  9418  0005A2  0E9A               	movlw	low STR_22
  9419  0005A4  0100               	movlb	0	; () banked
  9420  0005A6  6F8E               	movwf	printf@f& (0+255),b
  9421  0005A8  0EFF               	movlw	high STR_22
  9422  0005AA  0100               	movlb	0	; () banked
  9423  0005AC  6F8F               	movwf	(printf@f+1)& (0+255),b
  9424  0005AE  ECC2  F00B         	call	_printf	;wreg free
  9425                           
  9426                           ;UI.c: 178: lcdInst(0b11000000);;
  9427  0005B2  0EC0               	movlw	192
  9428  0005B4  EC86  F02D         	call	_lcdInst
  9429                           
  9430                           ;UI.c: 179: printf("%d MIN %d SEC", (log_total_time % 3600) / 60, (log_total_time % 3600
      +                          ) % 60);
  9431  0005B8  0E0E               	movlw	14
  9432  0005BA  0100               	movlb	0	; () banked
  9433  0005BC  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  9434  0005BE  0E10               	movlw	16
  9435  0005C0  6F82               	movwf	___awmod@divisor& (0+255),b
  9436  0005C2  C0F6  F080         	movff	_log_total_time,___awmod@dividend
  9437  0005C6  C0F7  F081         	movff	_log_total_time+1,___awmod@dividend+1
  9438  0005CA  EC90  F025         	call	___awmod	;wreg free
  9439  0005CE  C080  F0C6         	movff	?___awmod,_UI$2425
  9440  0005D2  C081  F0C7         	movff	?___awmod+1,_UI$2425+1
  9441                           
  9442                           ;UI.c: 179: printf("%d MIN %d SEC", (log_total_time % 3600) / 60, (log_total_time % 3600
      +                          ) % 60);
  9443  0005D6  0E23               	movlw	low STR_23
  9444  0005D8  0100               	movlb	0	; () banked
  9445  0005DA  6F8E               	movwf	printf@f& (0+255),b
  9446  0005DC  0EFF               	movlw	high STR_23
  9447  0005DE  0100               	movlb	0	; () banked
  9448  0005E0  6F8F               	movwf	(printf@f+1)& (0+255),b
  9449  0005E2  0E0E               	movlw	14
  9450  0005E4  0100               	movlb	0	; () banked
  9451  0005E6  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  9452  0005E8  0E10               	movlw	16
  9453  0005EA  6F82               	movwf	___awmod@divisor& (0+255),b
  9454  0005EC  C0F6  F080         	movff	_log_total_time,___awmod@dividend
  9455  0005F0  C0F7  F081         	movff	_log_total_time+1,___awmod@dividend+1
  9456  0005F4  EC90  F025         	call	___awmod	;wreg free
  9457  0005F8  C080  F086         	movff	?___awmod,___awdiv@dividend
  9458  0005FC  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  9459  000600  0E00               	movlw	0
  9460  000602  0100               	movlb	0	; () banked
  9461  000604  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  9462  000606  0E3C               	movlw	60
  9463  000608  6F88               	movwf	___awdiv@divisor& (0+255),b
  9464  00060A  EC7E  F024         	call	___awdiv	;wreg free
  9465  00060E  C086  F090         	movff	?___awdiv,?_printf+2
  9466  000612  C087  F091         	movff	?___awdiv+1,?_printf+3
  9467  000616  C0C6  F080         	movff	_UI$2425,___awmod@dividend
  9468  00061A  C0C7  F081         	movff	_UI$2425+1,___awmod@dividend+1
  9469  00061E  0E00               	movlw	0
  9470  000620  0100               	movlb	0	; () banked
  9471  000622  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  9472  000624  0E3C               	movlw	60
  9473  000626  6F82               	movwf	___awmod@divisor& (0+255),b
  9474  000628  EC90  F025         	call	___awmod	;wreg free
  9475  00062C  C080  F092         	movff	?___awmod,?_printf+4
  9476  000630  C081  F093         	movff	?___awmod+1,?_printf+5
  9477  000634  ECC2  F00B         	call	_printf	;wreg free
  9478                           
  9479                           ;UI.c: 181: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  9480  000638  0E00               	movlw	0
  9481  00063A  0100               	movlb	0	; () banked
  9482  00063C  6FCE               	movwf	UI@i_438& (0+255),b
  9483  00063E                     l9368:
  9484                           
  9485                           ; BSR set to: 0
  9486  00063E  0E63               	movlw	99
  9487  000640  0100               	movlb	0	; () banked
  9488  000642  65CE               	cpfsgt	UI@i_438& (0+255),b
  9489  000644  D001               	goto	l9372
  9490  000646  D00C               	goto	l9376
  9491  000648                     l9372:
  9492                           
  9493                           ; BSR set to: 0
  9494  000648  0E68               	movlw	104
  9495  00064A  0100               	movlb	0	; () banked
  9496  00064C  6FC4               	movwf	??_UI& (0+255),b
  9497  00064E  0EE4               	movlw	228
  9498  000650                     u10127:
  9499  000650  2EE8               	decfsz	wreg,f,c
  9500  000652  D7FE               	bra	u10127
  9501  000654  2FC4               	decfsz	??_UI& (0+255),f,b
  9502  000656  D7FC               	bra	u10127
  9503  000658  F000               	nop	
  9504  00065A  0100               	movlb	0	; () banked
  9505  00065C  2BCE               	incf	UI@i_438& (0+255),f,b
  9506  00065E  D7EF               	goto	l9368
  9507  000660                     l9376:
  9508                           
  9509                           ; BSR set to: 0
  9510  000660  0100               	movlb	0	; () banked
  9511  000662  51F8               	movf	_logstate& (0+255),w,b
  9512  000664  0100               	movlb	0	; () banked
  9513  000666  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  9514  000668  B4D8               	btfsc	status,2,c
  9515  00066A  0012               	return	
  9516                           
  9517                           ; BSR set to: 0
  9518                           ;UI.c: 182: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  9519                           
  9520                           ; BSR set to: 0
  9521                           
  9522                           ; BSR set to: 0
  9523  00066C  0E00               	movlw	0
  9524  00066E  0100               	movlb	0	; () banked
  9525  000670  6FCF               	movwf	UI@i_439& (0+255),b
  9526  000672                     l9382:
  9527                           
  9528                           ; BSR set to: 0
  9529  000672  0E63               	movlw	99
  9530  000674  0100               	movlb	0	; () banked
  9531  000676  65CF               	cpfsgt	UI@i_439& (0+255),b
  9532  000678  D001               	goto	l9386
  9533  00067A  D00C               	goto	l9390
  9534  00067C                     l9386:
  9535                           
  9536                           ; BSR set to: 0
  9537  00067C  0E68               	movlw	104
  9538  00067E  0100               	movlb	0	; () banked
  9539  000680  6FC4               	movwf	??_UI& (0+255),b
  9540  000682  0EE4               	movlw	228
  9541  000684                     u10137:
  9542  000684  2EE8               	decfsz	wreg,f,c
  9543  000686  D7FE               	bra	u10137
  9544  000688  2FC4               	decfsz	??_UI& (0+255),f,b
  9545  00068A  D7FC               	bra	u10137
  9546  00068C  F000               	nop	
  9547  00068E  0100               	movlb	0	; () banked
  9548  000690  2BCF               	incf	UI@i_439& (0+255),f,b
  9549  000692  D7EF               	goto	l9382
  9550  000694                     l9390:
  9551                           
  9552                           ; BSR set to: 0
  9553  000694  0100               	movlb	0	; () banked
  9554  000696  51F8               	movf	_logstate& (0+255),w,b
  9555  000698  0100               	movlb	0	; () banked
  9556  00069A  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  9557  00069C  B4D8               	btfsc	status,2,c
  9558  00069E  0012               	return	
  9559                           
  9560                           ; BSR set to: 0
  9561                           ;UI.c: 184: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  9562                           
  9563                           ; BSR set to: 0
  9564                           
  9565                           ; BSR set to: 0
  9566  0006A0  0E01               	movlw	1
  9567  0006A2  EC86  F02D         	call	_lcdInst
  9568  0006A6  0E68               	movlw	104
  9569  0006A8  0100               	movlb	0	; () banked
  9570  0006AA  6FC4               	movwf	??_UI& (0+255),b
  9571  0006AC  0EE4               	movlw	228
  9572  0006AE                     u10147:
  9573  0006AE  2EE8               	decfsz	wreg,f,c
  9574  0006B0  D7FE               	bra	u10147
  9575  0006B2  2FC4               	decfsz	??_UI& (0+255),f,b
  9576  0006B4  D7FC               	bra	u10147
  9577  0006B6  F000               	nop	
  9578                           
  9579                           ;UI.c: 185: lcdInst(0b10000000);;
  9580  0006B8  0E80               	movlw	128
  9581  0006BA  EC86  F02D         	call	_lcdInst
  9582                           
  9583                           ;UI.c: 186: printf(" -- POP  CAN -- ");
  9584  0006BE  0E37               	movlw	low STR_24
  9585  0006C0  0100               	movlb	0	; () banked
  9586  0006C2  6F8E               	movwf	printf@f& (0+255),b
  9587  0006C4  0EFD               	movlw	high STR_24
  9588  0006C6  0100               	movlb	0	; () banked
  9589  0006C8  6F8F               	movwf	(printf@f+1)& (0+255),b
  9590  0006CA  ECC2  F00B         	call	_printf	;wreg free
  9591                           
  9592                           ;UI.c: 187: lcdInst(0b11000000);;
  9593  0006CE  0EC0               	movlw	192
  9594  0006D0  EC86  F02D         	call	_lcdInst
  9595                           
  9596                           ;UI.c: 188: printf("NTAB: %d|TAB: %d", log_count_pop_no_tab, log_count_pop_w_tab);
  9597  0006D4  0E14               	movlw	low STR_25
  9598  0006D6  0100               	movlb	0	; () banked
  9599  0006D8  6F8E               	movwf	printf@f& (0+255),b
  9600  0006DA  0EFE               	movlw	high STR_25
  9601  0006DC  0100               	movlb	0	; () banked
  9602  0006DE  6F8F               	movwf	(printf@f+1)& (0+255),b
  9603  0006E0  C0F2  F090         	movff	_log_count_pop_no_tab,?_printf+2
  9604  0006E4  C0F3  F091         	movff	_log_count_pop_no_tab+1,?_printf+3
  9605  0006E8  C0F4  F092         	movff	_log_count_pop_w_tab,?_printf+4
  9606  0006EC  C0F5  F093         	movff	_log_count_pop_w_tab+1,?_printf+5
  9607  0006F0  ECC2  F00B         	call	_printf	;wreg free
  9608                           
  9609                           ;UI.c: 190: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  9610  0006F4  0E00               	movlw	0
  9611  0006F6  0100               	movlb	0	; () banked
  9612  0006F8  6FD0               	movwf	UI@i_442& (0+255),b
  9613  0006FA                     l9408:
  9614                           
  9615                           ; BSR set to: 0
  9616  0006FA  0E63               	movlw	99
  9617  0006FC  0100               	movlb	0	; () banked
  9618  0006FE  65D0               	cpfsgt	UI@i_442& (0+255),b
  9619  000700  D001               	goto	l9412
  9620  000702  D00C               	goto	l9416
  9621  000704                     l9412:
  9622                           
  9623                           ; BSR set to: 0
  9624  000704  0E68               	movlw	104
  9625  000706  0100               	movlb	0	; () banked
  9626  000708  6FC4               	movwf	??_UI& (0+255),b
  9627  00070A  0EE4               	movlw	228
  9628  00070C                     u10157:
  9629  00070C  2EE8               	decfsz	wreg,f,c
  9630  00070E  D7FE               	bra	u10157
  9631  000710  2FC4               	decfsz	??_UI& (0+255),f,b
  9632  000712  D7FC               	bra	u10157
  9633  000714  F000               	nop	
  9634  000716  0100               	movlb	0	; () banked
  9635  000718  2BD0               	incf	UI@i_442& (0+255),f,b
  9636  00071A  D7EF               	goto	l9408
  9637  00071C                     l9416:
  9638                           
  9639                           ; BSR set to: 0
  9640  00071C  0100               	movlb	0	; () banked
  9641  00071E  51F8               	movf	_logstate& (0+255),w,b
  9642  000720  0100               	movlb	0	; () banked
  9643  000722  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  9644  000724  B4D8               	btfsc	status,2,c
  9645  000726  0012               	return	
  9646                           
  9647                           ; BSR set to: 0
  9648                           ;UI.c: 191: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  9649                           
  9650                           ; BSR set to: 0
  9651                           
  9652                           ; BSR set to: 0
  9653  000728  0E00               	movlw	0
  9654  00072A  0100               	movlb	0	; () banked
  9655  00072C  6FD1               	movwf	UI@i_443& (0+255),b
  9656  00072E                     l9422:
  9657                           
  9658                           ; BSR set to: 0
  9659  00072E  0E63               	movlw	99
  9660  000730  0100               	movlb	0	; () banked
  9661  000732  65D1               	cpfsgt	UI@i_443& (0+255),b
  9662  000734  D001               	goto	l9426
  9663  000736  D00C               	goto	l9430
  9664  000738                     l9426:
  9665                           
  9666                           ; BSR set to: 0
  9667  000738  0E68               	movlw	104
  9668  00073A  0100               	movlb	0	; () banked
  9669  00073C  6FC4               	movwf	??_UI& (0+255),b
  9670  00073E  0EE4               	movlw	228
  9671  000740                     u10167:
  9672  000740  2EE8               	decfsz	wreg,f,c
  9673  000742  D7FE               	bra	u10167
  9674  000744  2FC4               	decfsz	??_UI& (0+255),f,b
  9675  000746  D7FC               	bra	u10167
  9676  000748  F000               	nop	
  9677  00074A  0100               	movlb	0	; () banked
  9678  00074C  2BD1               	incf	UI@i_443& (0+255),f,b
  9679  00074E  D7EF               	goto	l9422
  9680  000750                     l9430:
  9681                           
  9682                           ; BSR set to: 0
  9683  000750  0100               	movlb	0	; () banked
  9684  000752  51F8               	movf	_logstate& (0+255),w,b
  9685  000754  0100               	movlb	0	; () banked
  9686  000756  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  9687  000758  B4D8               	btfsc	status,2,c
  9688  00075A  0012               	return	
  9689                           
  9690                           ; BSR set to: 0
  9691                           ;UI.c: 193: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  9692                           
  9693                           ; BSR set to: 0
  9694                           
  9695                           ; BSR set to: 0
  9696  00075C  0E01               	movlw	1
  9697  00075E  EC86  F02D         	call	_lcdInst
  9698  000762  0E68               	movlw	104
  9699  000764  0100               	movlb	0	; () banked
  9700  000766  6FC4               	movwf	??_UI& (0+255),b
  9701  000768  0EE4               	movlw	228
  9702  00076A                     u10177:
  9703  00076A  2EE8               	decfsz	wreg,f,c
  9704  00076C  D7FE               	bra	u10177
  9705  00076E  2FC4               	decfsz	??_UI& (0+255),f,b
  9706  000770  D7FC               	bra	u10177
  9707  000772  F000               	nop	
  9708                           
  9709                           ;UI.c: 194: lcdInst(0b10000000);;
  9710  000774  0E80               	movlw	128
  9711  000776  EC86  F02D         	call	_lcdInst
  9712                           
  9713                           ;UI.c: 195: printf(" -- SOUP CAN -- ");
  9714  00077A  0E48               	movlw	low STR_26
  9715  00077C  0100               	movlb	0	; () banked
  9716  00077E  6F8E               	movwf	printf@f& (0+255),b
  9717  000780  0EFD               	movlw	high STR_26
  9718  000782  0100               	movlb	0	; () banked
  9719  000784  6F8F               	movwf	(printf@f+1)& (0+255),b
  9720  000786  ECC2  F00B         	call	_printf	;wreg free
  9721                           
  9722                           ;UI.c: 196: lcdInst(0b11000000);;
  9723  00078A  0EC0               	movlw	192
  9724  00078C  EC86  F02D         	call	_lcdInst
  9725                           
  9726                           ;UI.c: 197: printf("NLAB: %d|LAB: %d", log_count_can_no_lab, log_count_can_w_lab);
  9727  000790  0E03               	movlw	low STR_27
  9728  000792  0100               	movlb	0	; () banked
  9729  000794  6F8E               	movwf	printf@f& (0+255),b
  9730  000796  0EFE               	movlw	high STR_27
  9731  000798  0100               	movlb	0	; () banked
  9732  00079A  6F8F               	movwf	(printf@f+1)& (0+255),b
  9733  00079C  C063  F090         	movff	_log_count_can_no_lab,?_printf+2
  9734  0007A0  C064  F091         	movff	_log_count_can_no_lab+1,?_printf+3
  9735  0007A4  C065  F092         	movff	_log_count_can_w_lab,?_printf+4
  9736  0007A8  C066  F093         	movff	_log_count_can_w_lab+1,?_printf+5
  9737  0007AC  ECC2  F00B         	call	_printf	;wreg free
  9738                           
  9739                           ;UI.c: 199: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  9740  0007B0  0E00               	movlw	0
  9741  0007B2  0100               	movlb	0	; () banked
  9742  0007B4  6FD2               	movwf	UI@i_446& (0+255),b
  9743  0007B6                     l9448:
  9744                           
  9745                           ; BSR set to: 0
  9746  0007B6  0E63               	movlw	99
  9747  0007B8  0100               	movlb	0	; () banked
  9748  0007BA  65D2               	cpfsgt	UI@i_446& (0+255),b
  9749  0007BC  D001               	goto	l9452
  9750  0007BE  D00C               	goto	l9456
  9751  0007C0                     l9452:
  9752                           
  9753                           ; BSR set to: 0
  9754  0007C0  0E68               	movlw	104
  9755  0007C2  0100               	movlb	0	; () banked
  9756  0007C4  6FC4               	movwf	??_UI& (0+255),b
  9757  0007C6  0EE4               	movlw	228
  9758  0007C8                     u10187:
  9759  0007C8  2EE8               	decfsz	wreg,f,c
  9760  0007CA  D7FE               	bra	u10187
  9761  0007CC  2FC4               	decfsz	??_UI& (0+255),f,b
  9762  0007CE  D7FC               	bra	u10187
  9763  0007D0  F000               	nop	
  9764  0007D2  0100               	movlb	0	; () banked
  9765  0007D4  2BD2               	incf	UI@i_446& (0+255),f,b
  9766  0007D6  D7EF               	goto	l9448
  9767  0007D8                     l9456:
  9768                           
  9769                           ; BSR set to: 0
  9770  0007D8  0100               	movlb	0	; () banked
  9771  0007DA  51F8               	movf	_logstate& (0+255),w,b
  9772  0007DC  0100               	movlb	0	; () banked
  9773  0007DE  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  9774  0007E0  B4D8               	btfsc	status,2,c
  9775  0007E2  0012               	return	
  9776                           
  9777                           ; BSR set to: 0
  9778                           ;UI.c: 200: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  9779                           
  9780                           ; BSR set to: 0
  9781                           
  9782                           ; BSR set to: 0
  9783  0007E4  0E00               	movlw	0
  9784  0007E6  0100               	movlb	0	; () banked
  9785  0007E8  6FD3               	movwf	UI@i_447& (0+255),b
  9786  0007EA                     l9462:
  9787                           
  9788                           ; BSR set to: 0
  9789  0007EA  0E63               	movlw	99
  9790  0007EC  0100               	movlb	0	; () banked
  9791  0007EE  65D3               	cpfsgt	UI@i_447& (0+255),b
  9792  0007F0  D001               	goto	l9466
  9793  0007F2  D00C               	goto	l9470
  9794  0007F4                     l9466:
  9795                           
  9796                           ; BSR set to: 0
  9797  0007F4  0E68               	movlw	104
  9798  0007F6  0100               	movlb	0	; () banked
  9799  0007F8  6FC4               	movwf	??_UI& (0+255),b
  9800  0007FA  0EE4               	movlw	228
  9801  0007FC                     u10197:
  9802  0007FC  2EE8               	decfsz	wreg,f,c
  9803  0007FE  D7FE               	bra	u10197
  9804  000800  2FC4               	decfsz	??_UI& (0+255),f,b
  9805  000802  D7FC               	bra	u10197
  9806  000804  F000               	nop	
  9807  000806  0100               	movlb	0	; () banked
  9808  000808  2BD3               	incf	UI@i_447& (0+255),f,b
  9809  00080A  D7EF               	goto	l9462
  9810  00080C                     l9470:
  9811                           
  9812                           ; BSR set to: 0
  9813  00080C  0100               	movlb	0	; () banked
  9814  00080E  51F8               	movf	_logstate& (0+255),w,b
  9815  000810  0100               	movlb	0	; () banked
  9816  000812  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  9817  000814  B4D8               	btfsc	status,2,c
  9818  000816  0012               	return	
  9819                           
  9820                           ; BSR set to: 0
  9821                           ;UI.c: 202: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  9822                           
  9823                           ; BSR set to: 0
  9824                           
  9825                           ; BSR set to: 0
  9826  000818  0E01               	movlw	1
  9827  00081A  EC86  F02D         	call	_lcdInst
  9828  00081E  0E68               	movlw	104
  9829  000820  0100               	movlb	0	; () banked
  9830  000822  6FC4               	movwf	??_UI& (0+255),b
  9831  000824  0EE4               	movlw	228
  9832  000826                     u10207:
  9833  000826  2EE8               	decfsz	wreg,f,c
  9834  000828  D7FE               	bra	u10207
  9835  00082A  2FC4               	decfsz	??_UI& (0+255),f,b
  9836  00082C  D7FC               	bra	u10207
  9837  00082E  F000               	nop	
  9838                           
  9839                           ;UI.c: 203: lcdInst(0b10000000);;
  9840  000830  0E80               	movlw	128
  9841  000832  EC86  F02D         	call	_lcdInst
  9842                           
  9843                           ;UI.c: 204: printf("-- TOTAL CANS --");
  9844  000836  0E59               	movlw	low STR_28
  9845  000838  0100               	movlb	0	; () banked
  9846  00083A  6F8E               	movwf	printf@f& (0+255),b
  9847  00083C  0EFD               	movlw	high STR_28
  9848  00083E  0100               	movlb	0	; () banked
  9849  000840  6F8F               	movwf	(printf@f+1)& (0+255),b
  9850  000842  ECC2  F00B         	call	_printf	;wreg free
  9851                           
  9852                           ;UI.c: 205: lcdInst(0b11000000);;
  9853  000846  0EC0               	movlw	192
  9854  000848  EC86  F02D         	call	_lcdInst
  9855                           
  9856                           ;UI.c: 206: printf("%d", log_count_total);
  9857  00084C  0E11               	movlw	low (STR_27+14)
  9858  00084E  0100               	movlb	0	; () banked
  9859  000850  6F8E               	movwf	printf@f& (0+255),b
  9860  000852  0EFE               	movlw	high (STR_27+14)
  9861  000854  0100               	movlb	0	; () banked
  9862  000856  6F8F               	movwf	(printf@f+1)& (0+255),b
  9863  000858  C067  F090         	movff	_log_count_total,?_printf+2
  9864  00085C  C068  F091         	movff	_log_count_total+1,?_printf+3
  9865  000860  ECC2  F00B         	call	_printf	;wreg free
  9866                           
  9867                           ;UI.c: 208: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  9868  000864  0E00               	movlw	0
  9869  000866  0100               	movlb	0	; () banked
  9870  000868  6FD4               	movwf	UI@i_450& (0+255),b
  9871  00086A                     l9488:
  9872                           
  9873                           ; BSR set to: 0
  9874  00086A  0E63               	movlw	99
  9875  00086C  0100               	movlb	0	; () banked
  9876  00086E  65D4               	cpfsgt	UI@i_450& (0+255),b
  9877  000870  D001               	goto	l9492
  9878  000872  D00C               	goto	l9496
  9879  000874                     l9492:
  9880                           
  9881                           ; BSR set to: 0
  9882  000874  0E68               	movlw	104
  9883  000876  0100               	movlb	0	; () banked
  9884  000878  6FC4               	movwf	??_UI& (0+255),b
  9885  00087A  0EE4               	movlw	228
  9886  00087C                     u10217:
  9887  00087C  2EE8               	decfsz	wreg,f,c
  9888  00087E  D7FE               	bra	u10217
  9889  000880  2FC4               	decfsz	??_UI& (0+255),f,b
  9890  000882  D7FC               	bra	u10217
  9891  000884  F000               	nop	
  9892  000886  0100               	movlb	0	; () banked
  9893  000888  2BD4               	incf	UI@i_450& (0+255),f,b
  9894  00088A  D7EF               	goto	l9488
  9895  00088C                     l9496:
  9896                           
  9897                           ; BSR set to: 0
  9898  00088C  0100               	movlb	0	; () banked
  9899  00088E  51F8               	movf	_logstate& (0+255),w,b
  9900  000890  0100               	movlb	0	; () banked
  9901  000892  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  9902  000894  B4D8               	btfsc	status,2,c
  9903  000896  0012               	return	
  9904                           
  9905                           ; BSR set to: 0
  9906                           ;UI.c: 209: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  9907                           
  9908                           ; BSR set to: 0
  9909                           
  9910                           ; BSR set to: 0
  9911  000898  0E00               	movlw	0
  9912  00089A  0100               	movlb	0	; () banked
  9913  00089C  6FD5               	movwf	UI@i_451& (0+255),b
  9914  00089E                     l9502:
  9915                           
  9916                           ; BSR set to: 0
  9917  00089E  0E63               	movlw	99
  9918  0008A0  0100               	movlb	0	; () banked
  9919  0008A2  65D5               	cpfsgt	UI@i_451& (0+255),b
  9920  0008A4  D001               	goto	l9506
  9921  0008A6  D00C               	goto	l9510
  9922  0008A8                     l9506:
  9923                           
  9924                           ; BSR set to: 0
  9925  0008A8  0E68               	movlw	104
  9926  0008AA  0100               	movlb	0	; () banked
  9927  0008AC  6FC4               	movwf	??_UI& (0+255),b
  9928  0008AE  0EE4               	movlw	228
  9929  0008B0                     u10227:
  9930  0008B0  2EE8               	decfsz	wreg,f,c
  9931  0008B2  D7FE               	bra	u10227
  9932  0008B4  2FC4               	decfsz	??_UI& (0+255),f,b
  9933  0008B6  D7FC               	bra	u10227
  9934  0008B8  F000               	nop	
  9935  0008BA  0100               	movlb	0	; () banked
  9936  0008BC  2BD5               	incf	UI@i_451& (0+255),f,b
  9937  0008BE  D7EF               	goto	l9502
  9938  0008C0                     l9510:
  9939                           
  9940                           ; BSR set to: 0
  9941  0008C0  0100               	movlb	0	; () banked
  9942  0008C2  51F8               	movf	_logstate& (0+255),w,b
  9943  0008C4  0100               	movlb	0	; () banked
  9944  0008C6  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  9945  0008C8  B4D8               	btfsc	status,2,c
  9946  0008CA  0012               	return	
  9947  0008CC                     l9514:
  9948  0008CC  0100               	movlb	0	; () banked
  9949  0008CE  51F8               	movf	_logstate& (0+255),w,b
  9950  0008D0  0100               	movlb	0	; () banked
  9951  0008D2  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  9952  0008D4  B4D8               	btfsc	status,2,c
  9953  0008D6  0012               	return	
  9954  0008D8  D44A               	goto	l9210
  9955  0008DA                     __end_of_UI:
  9956                           	opt stack 0
  9957                           tblptru	equ	0xFF8
  9958                           tblptrh	equ	0xFF7
  9959                           tblptrl	equ	0xFF6
  9960                           tablat	equ	0xFF5
  9961                           prodh	equ	0xFF4
  9962                           prodl	equ	0xFF3
  9963                           intcon	equ	0xFF2
  9964                           intcon2	equ	0xFF1
  9965                           intcon3	equ	0xFF0
  9966                           postinc0	equ	0xFEE
  9967                           wreg	equ	0xFE8
  9968                           postdec1	equ	0xFE5
  9969                           fsr1l	equ	0xFE1
  9970                           indf2	equ	0xFDF
  9971                           postinc2	equ	0xFDE
  9972                           postdec2	equ	0xFDD
  9973                           fsr2h	equ	0xFDA
  9974                           fsr2l	equ	0xFD9
  9975                           status	equ	0xFD8
  9976                           
  9977 ;; *************** function _printRTC *****************
  9978 ;; Defined at:
  9979 ;;		line 63 in file "RTC.c"
  9980 ;; Parameters:    Size  Location     Type
  9981 ;;		None
  9982 ;; Auto vars:     Size  Location     Type
  9983 ;;  i               2   66[BANK0 ] int 
  9984 ;;  INT_time       14   46[BANK0 ] int [7]
  9985 ;;  month           4   62[BANK0 ] unsigned char [4]
  9986 ;;  RTC_month       2   60[BANK0 ] int 
  9987 ;; Return value:  Size  Location     Type
  9988 ;;                  1    wreg      void 
  9989 ;; Registers used:
  9990 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9991 ;; Tracked objects:
  9992 ;;		On entry : 0/0
  9993 ;;		On exit  : 0/0
  9994 ;;		Unchanged: 0/0
  9995 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9996 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9997 ;;      Locals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9998 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9999 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10000 ;;Total ram usage:       25 bytes
 10001 ;; Hardware stack levels used:    1
 10002 ;; Hardware stack levels required when called:   10
 10003 ;; This function calls:
 10004 ;;		_getRTC
 10005 ;;		_lcdInst
 10006 ;;		_printf
 10007 ;;		_strcpy
 10008 ;; This function is called by:
 10009 ;;		_UI
 10010 ;;		_change_state_to_menu_start
 10011 ;; This function uses a non-reentrant model
 10012 ;;
 10013                           
 10014                           	psect	text28
 10015  002CC6                     __ptext28:
 10016                           	opt stack 0
 10017  002CC6                     _printRTC:
 10018                           	opt stack 18
 10019                           
 10020                           ;RTC.c: 64: getRTC();
 10021                           
 10022                           ; BSR set to: 0
 10023                           ;incstack = 0
 10024  002CC6  EC27  F026         	call	_getRTC	;wreg free
 10025                           
 10026                           ;RTC.c: 65: char month[] = "MMM";
 10027  002CCA  C14D  F0BE         	movff	printRTC@F3236,printRTC@month
 10028  002CCE  C14E  F0BF         	movff	printRTC@F3236+1,printRTC@month+1
 10029  002CD2  C14F  F0C0         	movff	printRTC@F3236+2,printRTC@month+2
 10030  002CD6  C150  F0C1         	movff	printRTC@F3236+3,printRTC@month+3
 10031                           
 10032                           ;RTC.c: 66: int INT_time[7];
 10033                           ;RTC.c: 67: for(int i = 0; i < 7; i++){
 10034  002CDA  0E00               	movlw	0
 10035  002CDC  0100               	movlb	0	; () banked
 10036  002CDE  6FC3               	movwf	(printRTC@i+1)& (0+255),b
 10037  002CE0  0E00               	movlw	0
 10038  002CE2  6FC2               	movwf	printRTC@i& (0+255),b
 10039                           
 10040                           ; BSR set to: 0
 10041  002CE4  0100               	movlb	0	; () banked
 10042  002CE6  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
 10043  002CE8  D008               	goto	l7094
 10044  002CEA  0100               	movlb	0	; () banked
 10045  002CEC  51C3               	movf	(printRTC@i+1)& (0+255),w,b
 10046  002CEE  E146               	bnz	l627
 10047  002CF0  0E07               	movlw	7
 10048  002CF2  0100               	movlb	0	; () banked
 10049  002CF4  5DC2               	subwf	printRTC@i& (0+255),w,b
 10050  002CF6  B0D8               	btfsc	status,0,c
 10051  002CF8  D041               	goto	l627
 10052  002CFA                     l7094:
 10053                           
 10054                           ; BSR set to: 0
 10055                           ;RTC.c: 68: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 10056  002CFA  0E24               	movlw	low _time
 10057  002CFC  0100               	movlb	0	; () banked
 10058  002CFE  25C2               	addwf	printRTC@i& (0+255),w,b
 10059  002D00  6ED9               	movwf	fsr2l,c
 10060  002D02  0E01               	movlw	high _time
 10061  002D04  0100               	movlb	0	; () banked
 10062  002D06  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
 10063  002D08  6EDA               	movwf	fsr2h,c
 10064  002D0A  50DF               	movf	indf2,w,c
 10065  002D0C  0100               	movlb	0	; () banked
 10066  002D0E  6FAB               	movwf	??_printRTC& (0+255),b
 10067  002D10  0100               	movlb	0	; () banked
 10068  002D12  3BAB               	swapf	??_printRTC& (0+255),f,b
 10069  002D14  0E0F               	movlw	15
 10070  002D16  17AB               	andwf	??_printRTC& (0+255),f,b
 10071  002D18  0E0F               	movlw	15
 10072  002D1A  0100               	movlb	0	; () banked
 10073  002D1C  17AB               	andwf	??_printRTC& (0+255),f,b
 10074  002D1E  0100               	movlb	0	; () banked
 10075  002D20  51AB               	movf	??_printRTC& (0+255),w,b
 10076  002D22  0D0A               	mullw	10
 10077  002D24  0E24               	movlw	low _time
 10078  002D26  0100               	movlb	0	; () banked
 10079  002D28  25C2               	addwf	printRTC@i& (0+255),w,b
 10080  002D2A  6ED9               	movwf	fsr2l,c
 10081  002D2C  0E01               	movlw	high _time
 10082  002D2E  0100               	movlb	0	; () banked
 10083  002D30  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
 10084  002D32  6EDA               	movwf	fsr2h,c
 10085  002D34  50DF               	movf	indf2,w,c
 10086  002D36  0B0F               	andlw	15
 10087  002D38  0100               	movlb	0	; () banked
 10088  002D3A  6FAC               	movwf	(??_printRTC+1)& (0+255),b
 10089  002D3C  6BAD               	clrf	(??_printRTC+2)& (0+255),b
 10090  002D3E  50F3               	movf	prodl,w,c
 10091  002D40  0100               	movlb	0	; () banked
 10092  002D42  27AC               	addwf	(??_printRTC+1)& (0+255),f,b
 10093  002D44  50F4               	movf	prodh,w,c
 10094  002D46  0100               	movlb	0	; () banked
 10095  002D48  23AD               	addwfc	(??_printRTC+2)& (0+255),f,b
 10096  002D4A  90D8               	bcf	status,0,c
 10097  002D4C  0100               	movlb	0	; () banked
 10098  002D4E  35C2               	rlcf	printRTC@i& (0+255),w,b
 10099  002D50  6ED9               	movwf	fsr2l,c
 10100  002D52  0100               	movlb	0	; () banked
 10101  002D54  35C3               	rlcf	(printRTC@i+1)& (0+255),w,b
 10102  002D56  6EDA               	movwf	fsr2h,c
 10103  002D58  0EAE               	movlw	low printRTC@INT_time
 10104  002D5A  26D9               	addwf	fsr2l,f,c
 10105  002D5C  0E00               	movlw	high printRTC@INT_time
 10106  002D5E  22DA               	addwfc	fsr2h,f,c
 10107  002D60  C0AC  FFDE         	movff	??_printRTC+1,postinc2
 10108  002D64  C0AD  FFDD         	movff	??_printRTC+2,postdec2
 10109                           
 10110                           ; BSR set to: 0
 10111  002D68  0100               	movlb	0	; () banked
 10112  002D6A  4BC2               	infsnz	printRTC@i& (0+255),f,b
 10113  002D6C  2BC3               	incf	(printRTC@i+1)& (0+255),f,b
 10114                           
 10115                           ; BSR set to: 0
 10116  002D6E  0100               	movlb	0	; () banked
 10117  002D70  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
 10118  002D72  D7C3               	goto	l7094
 10119  002D74  0100               	movlb	0	; () banked
 10120  002D76  51C3               	movf	(printRTC@i+1)& (0+255),w,b
 10121  002D78  E101               	bnz	u5860
 10122  002D7A  D7BA               	goto	L12
 10123  002D7C                     u5860:
 10124  002D7C                     l627:
 10125                           
 10126                           ; BSR set to: 0
 10127                           ;RTC.c: 69: }
 10128                           ;RTC.c: 70: int RTC_month = INT_time[5];
 10129  002D7C  C0B8  F0BC         	movff	printRTC@INT_time+10,printRTC@RTC_month
 10130  002D80  C0B9  F0BD         	movff	printRTC@INT_time+11,printRTC@RTC_month+1
 10131                           
 10132                           ;RTC.c: 72: switch(RTC_month){
 10133  002D84  D0B4               	goto	l7126
 10134  002D86                     l7100:
 10135                           
 10136                           ; BSR set to: 0
 10137                           ;RTC.c: 74: strcpy(month, "JAN");
 10138  002D86  0EBE               	movlw	low printRTC@month
 10139  002D88  0100               	movlb	0	; () banked
 10140  002D8A  6F80               	movwf	strcpy@to& (0+255),b
 10141  002D8C  0E00               	movlw	high printRTC@month
 10142  002D8E  0100               	movlb	0	; () banked
 10143  002D90  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10144  002D92  0EDA               	movlw	low STR_8
 10145  002D94  0100               	movlb	0	; () banked
 10146  002D96  6F82               	movwf	strcpy@from& (0+255),b
 10147  002D98  0EFF               	movlw	high STR_8
 10148  002D9A  0100               	movlb	0	; () banked
 10149  002D9C  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10150  002D9E  ECE0  F02A         	call	_strcpy	;wreg free
 10151                           
 10152                           ;RTC.c: 75: break;
 10153  002DA2  D0D4               	goto	l7128
 10154  002DA4                     l7102:
 10155                           
 10156                           ;RTC.c: 77: strcpy(month, "FEB");
 10157  002DA4  0EBE               	movlw	low printRTC@month
 10158  002DA6  0100               	movlb	0	; () banked
 10159  002DA8  6F80               	movwf	strcpy@to& (0+255),b
 10160  002DAA  0E00               	movlw	high printRTC@month
 10161  002DAC  0100               	movlb	0	; () banked
 10162  002DAE  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10163  002DB0  0ECA               	movlw	low STR_9
 10164  002DB2  0100               	movlb	0	; () banked
 10165  002DB4  6F82               	movwf	strcpy@from& (0+255),b
 10166  002DB6  0EFF               	movlw	high STR_9
 10167  002DB8  0100               	movlb	0	; () banked
 10168  002DBA  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10169  002DBC  ECE0  F02A         	call	_strcpy	;wreg free
 10170                           
 10171                           ;RTC.c: 78: break;
 10172  002DC0  D0C5               	goto	l7128
 10173  002DC2                     l7104:
 10174                           
 10175                           ;RTC.c: 80: strcpy(month, "MAR");
 10176  002DC2  0EBE               	movlw	low printRTC@month
 10177  002DC4  0100               	movlb	0	; () banked
 10178  002DC6  6F80               	movwf	strcpy@to& (0+255),b
 10179  002DC8  0E00               	movlw	high printRTC@month
 10180  002DCA  0100               	movlb	0	; () banked
 10181  002DCC  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10182  002DCE  0EE6               	movlw	low STR_10
 10183  002DD0  0100               	movlb	0	; () banked
 10184  002DD2  6F82               	movwf	strcpy@from& (0+255),b
 10185  002DD4  0EFF               	movlw	high STR_10
 10186  002DD6  0100               	movlb	0	; () banked
 10187  002DD8  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10188  002DDA  ECE0  F02A         	call	_strcpy	;wreg free
 10189                           
 10190                           ;RTC.c: 81: break;
 10191  002DDE  D0B6               	goto	l7128
 10192  002DE0                     l7106:
 10193                           
 10194                           ;RTC.c: 83: strcpy(month, "APR");
 10195  002DE0  0EBE               	movlw	low printRTC@month
 10196  002DE2  0100               	movlb	0	; () banked
 10197  002DE4  6F80               	movwf	strcpy@to& (0+255),b
 10198  002DE6  0E00               	movlw	high printRTC@month
 10199  002DE8  0100               	movlb	0	; () banked
 10200  002DEA  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10201  002DEC  0EEA               	movlw	low STR_11
 10202  002DEE  0100               	movlb	0	; () banked
 10203  002DF0  6F82               	movwf	strcpy@from& (0+255),b
 10204  002DF2  0EFF               	movlw	high STR_11
 10205  002DF4  0100               	movlb	0	; () banked
 10206  002DF6  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10207  002DF8  ECE0  F02A         	call	_strcpy	;wreg free
 10208                           
 10209                           ;RTC.c: 84: break;
 10210  002DFC  D0A7               	goto	l7128
 10211  002DFE                     l7108:
 10212                           
 10213                           ;RTC.c: 86: strcpy(month, "MAY");
 10214  002DFE  0EBE               	movlw	low printRTC@month
 10215  002E00  0100               	movlb	0	; () banked
 10216  002E02  6F80               	movwf	strcpy@to& (0+255),b
 10217  002E04  0E00               	movlw	high printRTC@month
 10218  002E06  0100               	movlb	0	; () banked
 10219  002E08  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10220  002E0A  0EFA               	movlw	low STR_12
 10221  002E0C  0100               	movlb	0	; () banked
 10222  002E0E  6F82               	movwf	strcpy@from& (0+255),b
 10223  002E10  0EFF               	movlw	high STR_12
 10224  002E12  0100               	movlb	0	; () banked
 10225  002E14  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10226  002E16  ECE0  F02A         	call	_strcpy	;wreg free
 10227                           
 10228                           ;RTC.c: 87: break;
 10229  002E1A  D098               	goto	l7128
 10230  002E1C                     l7110:
 10231                           
 10232                           ;RTC.c: 89: strcpy(month, "JUN");
 10233  002E1C  0EBE               	movlw	low printRTC@month
 10234  002E1E  0100               	movlb	0	; () banked
 10235  002E20  6F80               	movwf	strcpy@to& (0+255),b
 10236  002E22  0E00               	movlw	high printRTC@month
 10237  002E24  0100               	movlb	0	; () banked
 10238  002E26  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10239  002E28  0EDE               	movlw	low STR_13
 10240  002E2A  0100               	movlb	0	; () banked
 10241  002E2C  6F82               	movwf	strcpy@from& (0+255),b
 10242  002E2E  0EFF               	movlw	high STR_13
 10243  002E30  0100               	movlb	0	; () banked
 10244  002E32  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10245  002E34  ECE0  F02A         	call	_strcpy	;wreg free
 10246                           
 10247                           ;RTC.c: 90: break;
 10248  002E38  D089               	goto	l7128
 10249  002E3A                     l7112:
 10250                           
 10251                           ;RTC.c: 92: strcpy(month, "JUL");
 10252  002E3A  0EBE               	movlw	low printRTC@month
 10253  002E3C  0100               	movlb	0	; () banked
 10254  002E3E  6F80               	movwf	strcpy@to& (0+255),b
 10255  002E40  0E00               	movlw	high printRTC@month
 10256  002E42  0100               	movlb	0	; () banked
 10257  002E44  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10258  002E46  0ED6               	movlw	low STR_14
 10259  002E48  0100               	movlb	0	; () banked
 10260  002E4A  6F82               	movwf	strcpy@from& (0+255),b
 10261  002E4C  0EFF               	movlw	high STR_14
 10262  002E4E  0100               	movlb	0	; () banked
 10263  002E50  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10264  002E52  ECE0  F02A         	call	_strcpy	;wreg free
 10265                           
 10266                           ;RTC.c: 93: break;
 10267  002E56  D07A               	goto	l7128
 10268  002E58                     l7114:
 10269                           
 10270                           ;RTC.c: 95: strcpy(month, "AUG");
 10271  002E58  0EBE               	movlw	low printRTC@month
 10272  002E5A  0100               	movlb	0	; () banked
 10273  002E5C  6F80               	movwf	strcpy@to& (0+255),b
 10274  002E5E  0E00               	movlw	high printRTC@month
 10275  002E60  0100               	movlb	0	; () banked
 10276  002E62  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10277  002E64  0ED2               	movlw	low STR_15
 10278  002E66  0100               	movlb	0	; () banked
 10279  002E68  6F82               	movwf	strcpy@from& (0+255),b
 10280  002E6A  0EFF               	movlw	high STR_15
 10281  002E6C  0100               	movlb	0	; () banked
 10282  002E6E  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10283  002E70  ECE0  F02A         	call	_strcpy	;wreg free
 10284                           
 10285                           ;RTC.c: 96: break;
 10286  002E74  D06B               	goto	l7128
 10287  002E76                     l7116:
 10288                           
 10289                           ;RTC.c: 98: strcpy(month, "SEP");
 10290  002E76  0EBE               	movlw	low printRTC@month
 10291  002E78  0100               	movlb	0	; () banked
 10292  002E7A  6F80               	movwf	strcpy@to& (0+255),b
 10293  002E7C  0E00               	movlw	high printRTC@month
 10294  002E7E  0100               	movlb	0	; () banked
 10295  002E80  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10296  002E82  0EE2               	movlw	low STR_16
 10297  002E84  0100               	movlb	0	; () banked
 10298  002E86  6F82               	movwf	strcpy@from& (0+255),b
 10299  002E88  0EFF               	movlw	high STR_16
 10300  002E8A  0100               	movlb	0	; () banked
 10301  002E8C  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10302  002E8E  ECE0  F02A         	call	_strcpy	;wreg free
 10303                           
 10304                           ;RTC.c: 99: break;
 10305  002E92  D05C               	goto	l7128
 10306  002E94                     l7118:
 10307                           
 10308                           ;RTC.c: 101: strcpy(month, "OCT");
 10309  002E94  0EBE               	movlw	low printRTC@month
 10310  002E96  0100               	movlb	0	; () banked
 10311  002E98  6F80               	movwf	strcpy@to& (0+255),b
 10312  002E9A  0E00               	movlw	high printRTC@month
 10313  002E9C  0100               	movlb	0	; () banked
 10314  002E9E  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10315  002EA0  0EF2               	movlw	low STR_17
 10316  002EA2  0100               	movlb	0	; () banked
 10317  002EA4  6F82               	movwf	strcpy@from& (0+255),b
 10318  002EA6  0EFF               	movlw	high STR_17
 10319  002EA8  0100               	movlb	0	; () banked
 10320  002EAA  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10321  002EAC  ECE0  F02A         	call	_strcpy	;wreg free
 10322                           
 10323                           ;RTC.c: 102: break;
 10324  002EB0  D04D               	goto	l7128
 10325  002EB2                     l7120:
 10326                           
 10327                           ;RTC.c: 104: strcpy(month, "NOV");
 10328  002EB2  0EBE               	movlw	low printRTC@month
 10329  002EB4  0100               	movlb	0	; () banked
 10330  002EB6  6F80               	movwf	strcpy@to& (0+255),b
 10331  002EB8  0E00               	movlw	high printRTC@month
 10332  002EBA  0100               	movlb	0	; () banked
 10333  002EBC  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10334  002EBE  0EF6               	movlw	low STR_18
 10335  002EC0  0100               	movlb	0	; () banked
 10336  002EC2  6F82               	movwf	strcpy@from& (0+255),b
 10337  002EC4  0EFF               	movlw	high STR_18
 10338  002EC6  0100               	movlb	0	; () banked
 10339  002EC8  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10340  002ECA  ECE0  F02A         	call	_strcpy	;wreg free
 10341                           
 10342                           ;RTC.c: 105: break;
 10343  002ECE  D03E               	goto	l7128
 10344  002ED0                     l7122:
 10345                           
 10346                           ;RTC.c: 107: strcpy(month, "DEC");
 10347  002ED0  0EBE               	movlw	low printRTC@month
 10348  002ED2  0100               	movlb	0	; () banked
 10349  002ED4  6F80               	movwf	strcpy@to& (0+255),b
 10350  002ED6  0E00               	movlw	high printRTC@month
 10351  002ED8  0100               	movlb	0	; () banked
 10352  002EDA  6F81               	movwf	(strcpy@to+1)& (0+255),b
 10353  002EDC  0ECE               	movlw	low STR_19
 10354  002EDE  0100               	movlb	0	; () banked
 10355  002EE0  6F82               	movwf	strcpy@from& (0+255),b
 10356  002EE2  0EFF               	movlw	high STR_19
 10357  002EE4  0100               	movlb	0	; () banked
 10358  002EE6  6F83               	movwf	(strcpy@from+1)& (0+255),b
 10359  002EE8  ECE0  F02A         	call	_strcpy	;wreg free
 10360                           
 10361                           ;RTC.c: 109: }
 10362                           
 10363                           ;RTC.c: 108: break;
 10364  002EEC  D02F               	goto	l7128
 10365  002EEE                     l7126:
 10366  002EEE  C0BC  F0AB         	movff	printRTC@RTC_month,??_printRTC
 10367  002EF2  C0BD  F0AC         	movff	printRTC@RTC_month+1,??_printRTC+1
 10368                           
 10369                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 10370                           ; Switch size 1, requested type "space"
 10371                           ; Number of cases is 1, Range of values is 0 to 0
 10372                           ; switch strategies available:
 10373                           ; Name         Instructions Cycles
 10374                           ; simple_byte            4     3 (average)
 10375                           ;	Chosen strategy is simple_byte
 10376  002EF6  0100               	movlb	0	; () banked
 10377  002EF8  51AC               	movf	(??_printRTC+1)& (0+255),w,b
 10378  002EFA  0A00               	xorlw	0	; case 0
 10379  002EFC  A4D8               	btfss	status,2,c
 10380  002EFE  D026               	goto	l7128
 10381                           
 10382                           ; BSR set to: 0
 10383                           ; Switch size 1, requested type "space"
 10384                           ; Number of cases is 12, Range of values is 1 to 12
 10385                           ; switch strategies available:
 10386                           ; Name         Instructions Cycles
 10387                           ; simple_byte           37    19 (average)
 10388                           ;	Chosen strategy is simple_byte
 10389  002F00  0100               	movlb	0	; () banked
 10390  002F02  51AB               	movf	??_printRTC& (0+255),w,b
 10391  002F04  0A01               	xorlw	1	; case 1
 10392  002F06  B4D8               	btfsc	status,2,c
 10393  002F08  D73E               	goto	l7100
 10394  002F0A  0A03               	xorlw	3	; case 2
 10395  002F0C  B4D8               	btfsc	status,2,c
 10396  002F0E  D74A               	goto	l7102
 10397  002F10  0A01               	xorlw	1	; case 3
 10398  002F12  B4D8               	btfsc	status,2,c
 10399  002F14  D756               	goto	l7104
 10400  002F16  0A07               	xorlw	7	; case 4
 10401  002F18  B4D8               	btfsc	status,2,c
 10402  002F1A  D762               	goto	l7106
 10403  002F1C  0A01               	xorlw	1	; case 5
 10404  002F1E  B4D8               	btfsc	status,2,c
 10405  002F20  D76E               	goto	l7108
 10406  002F22  0A03               	xorlw	3	; case 6
 10407  002F24  B4D8               	btfsc	status,2,c
 10408  002F26  D77A               	goto	l7110
 10409  002F28  0A01               	xorlw	1	; case 7
 10410  002F2A  B4D8               	btfsc	status,2,c
 10411  002F2C  D786               	goto	l7112
 10412  002F2E  0A0F               	xorlw	15	; case 8
 10413  002F30  B4D8               	btfsc	status,2,c
 10414  002F32  D792               	goto	l7114
 10415  002F34  0A01               	xorlw	1	; case 9
 10416  002F36  B4D8               	btfsc	status,2,c
 10417  002F38  D79E               	goto	l7116
 10418  002F3A  0A03               	xorlw	3	; case 10
 10419  002F3C  B4D8               	btfsc	status,2,c
 10420  002F3E  D7AA               	goto	l7118
 10421  002F40  0A01               	xorlw	1	; case 11
 10422  002F42  B4D8               	btfsc	status,2,c
 10423  002F44  D7B6               	goto	l7120
 10424  002F46  0A07               	xorlw	7	; case 12
 10425  002F48  B4D8               	btfsc	status,2,c
 10426  002F4A  D7C2               	goto	l7122
 10427  002F4C                     l7128:
 10428                           
 10429                           ;RTC.c: 110: lcdInst(0b10000000);;
 10430  002F4C  0E80               	movlw	128
 10431  002F4E  EC86  F02D         	call	_lcdInst
 10432                           
 10433                           ;RTC.c: 111: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
 10434  002F52  0EAE               	movlw	low STR_21
 10435  002F54  0100               	movlb	0	; () banked
 10436  002F56  6F8E               	movwf	printf@f& (0+255),b
 10437  002F58  0EFA               	movlw	high STR_21
 10438  002F5A  0100               	movlb	0	; () banked
 10439  002F5C  6F8F               	movwf	(printf@f+1)& (0+255),b
 10440  002F5E  C0B6  F090         	movff	printRTC@INT_time+8,?_printf+2
 10441  002F62  C0B7  F091         	movff	printRTC@INT_time+9,?_printf+3
 10442  002F66  0EBE               	movlw	low printRTC@month
 10443  002F68  0100               	movlb	0	; () banked
 10444  002F6A  6F92               	movwf	(?_printf+4)& (0+255),b
 10445  002F6C  0E00               	movlw	high printRTC@month
 10446  002F6E  0100               	movlb	0	; () banked
 10447  002F70  6F93               	movwf	(?_printf+5)& (0+255),b
 10448  002F72  C0B2  F094         	movff	printRTC@INT_time+4,?_printf+6
 10449  002F76  C0B3  F095         	movff	printRTC@INT_time+5,?_printf+7
 10450  002F7A  C0B0  F096         	movff	printRTC@INT_time+2,?_printf+8
 10451  002F7E  C0B1  F097         	movff	printRTC@INT_time+3,?_printf+9
 10452  002F82  C0AE  F098         	movff	printRTC@INT_time,?_printf+10
 10453  002F86  C0AF  F099         	movff	printRTC@INT_time+1,?_printf+11
 10454  002F8A  ECC2  F00B         	call	_printf	;wreg free
 10455  002F8E  0012               	return		;funcret
 10456  002F90                     __end_of_printRTC:
 10457                           	opt stack 0
 10458                           tblptru	equ	0xFF8
 10459                           tblptrh	equ	0xFF7
 10460                           tblptrl	equ	0xFF6
 10461                           tablat	equ	0xFF5
 10462                           prodh	equ	0xFF4
 10463                           prodl	equ	0xFF3
 10464                           intcon	equ	0xFF2
 10465                           intcon2	equ	0xFF1
 10466                           intcon3	equ	0xFF0
 10467                           postinc0	equ	0xFEE
 10468                           wreg	equ	0xFE8
 10469                           postdec1	equ	0xFE5
 10470                           fsr1l	equ	0xFE1
 10471                           indf2	equ	0xFDF
 10472                           postinc2	equ	0xFDE
 10473                           postdec2	equ	0xFDD
 10474                           fsr2h	equ	0xFDA
 10475                           fsr2l	equ	0xFD9
 10476                           status	equ	0xFD8
 10477                           
 10478 ;; *************** function _strcpy *****************
 10479 ;; Defined at:
 10480 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
 10481 ;; Parameters:    Size  Location     Type
 10482 ;;  to              2    0[BANK0 ] PTR unsigned char 
 10483 ;;		 -> printRTC@month(4), UI@month(4), 
 10484 ;;  from            2    2[BANK0 ] PTR const unsigned char 
 10485 ;;		 -> STR_62(4), STR_61(4), STR_60(4), STR_59(4), 
 10486 ;;		 -> STR_58(4), STR_57(4), STR_56(4), STR_55(4), 
 10487 ;;		 -> STR_54(4), STR_53(4), STR_52(4), STR_51(4), 
 10488 ;;		 -> STR_20(4), STR_19(4), STR_18(4), STR_17(4), 
 10489 ;;		 -> STR_16(4), STR_15(4), STR_14(4), STR_13(4), 
 10490 ;;		 -> STR_12(4), STR_11(4), STR_10(4), STR_9(4), 
 10491 ;;		 -> STR_8(4), 
 10492 ;; Auto vars:     Size  Location     Type
 10493 ;;  cp              2    4[BANK0 ] PTR unsigned char 
 10494 ;;		 -> printRTC@month(4), UI@month(4), 
 10495 ;; Return value:  Size  Location     Type
 10496 ;;                  2    0[BANK0 ] PTR unsigned char 
 10497 ;; Registers used:
 10498 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 10499 ;; Tracked objects:
 10500 ;;		On entry : 0/0
 10501 ;;		On exit  : 0/0
 10502 ;;		Unchanged: 0/0
 10503 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10504 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10505 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10506 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10507 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10508 ;;Total ram usage:        6 bytes
 10509 ;; Hardware stack levels used:    1
 10510 ;; Hardware stack levels required when called:    7
 10511 ;; This function calls:
 10512 ;;		Nothing
 10513 ;; This function is called by:
 10514 ;;		_UI
 10515 ;;		_printRTC
 10516 ;; This function uses a non-reentrant model
 10517 ;;
 10518                           
 10519                           	psect	text29
 10520  0055C0                     __ptext29:
 10521                           	opt stack 0
 10522  0055C0                     _strcpy:
 10523                           	opt stack 20
 10524                           
 10525                           ;incstack = 0
 10526  0055C0  C080  F084         	movff	strcpy@to,strcpy@cp
 10527  0055C4  C081  F085         	movff	strcpy@to+1,strcpy@cp+1
 10528  0055C8  D006               	goto	l6792
 10529  0055CA                     l6790:
 10530  0055CA  0100               	movlb	0	; () banked
 10531  0055CC  4B84               	infsnz	strcpy@cp& (0+255),f,b
 10532  0055CE  2B85               	incf	(strcpy@cp+1)& (0+255),f,b
 10533  0055D0  0100               	movlb	0	; () banked
 10534  0055D2  4B82               	infsnz	strcpy@from& (0+255),f,b
 10535  0055D4  2B83               	incf	(strcpy@from+1)& (0+255),f,b
 10536  0055D6                     l6792:
 10537  0055D6  C082  FFF6         	movff	strcpy@from,tblptrl
 10538  0055DA  C083  FFF7         	movff	strcpy@from+1,tblptrh
 10539  0055DE                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 10540  0055DE  6AF8               	clrf	tblptru,c
 10541  0055E0                     	endif
 10542  0055E0                     	if	0	;tblptru may be non-zero
 10543  0055E0                     	endif
 10544  0055E0  C084  FFD9         	movff	strcpy@cp,fsr2l
 10545  0055E4  C085  FFDA         	movff	strcpy@cp+1,fsr2h
 10546  0055E8  0008               	tblrd		*
 10547  0055EA  CFF5 FFDF          	movff	tablat,indf2
 10548  0055EE  50DF               	movf	indf2,w,c
 10549  0055F0  B4D8               	btfsc	status,2,c
 10550  0055F2  0012               	return	
 10551  0055F4  D7EA               	goto	l6790
 10552  0055F6                     __end_of_strcpy:
 10553                           	opt stack 0
 10554                           tblptru	equ	0xFF8
 10555                           tblptrh	equ	0xFF7
 10556                           tblptrl	equ	0xFF6
 10557                           tablat	equ	0xFF5
 10558                           prodh	equ	0xFF4
 10559                           prodl	equ	0xFF3
 10560                           intcon	equ	0xFF2
 10561                           intcon2	equ	0xFF1
 10562                           intcon3	equ	0xFF0
 10563                           postinc0	equ	0xFEE
 10564                           wreg	equ	0xFE8
 10565                           postdec1	equ	0xFE5
 10566                           fsr1l	equ	0xFE1
 10567                           indf2	equ	0xFDF
 10568                           postinc2	equ	0xFDE
 10569                           postdec2	equ	0xFDD
 10570                           fsr2h	equ	0xFDA
 10571                           fsr2l	equ	0xFD9
 10572                           status	equ	0xFD8
 10573                           
 10574 ;; *************** function _getRTC *****************
 10575 ;; Defined at:
 10576 ;;		line 44 in file "RTC.c"
 10577 ;; Parameters:    Size  Location     Type
 10578 ;;		None
 10579 ;; Auto vars:     Size  Location     Type
 10580 ;;  i               2    3[BANK0 ] int 
 10581 ;; Return value:  Size  Location     Type
 10582 ;;                  1    wreg      void 
 10583 ;; Registers used:
 10584 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10585 ;; Tracked objects:
 10586 ;;		On entry : 0/0
 10587 ;;		On exit  : 0/0
 10588 ;;		Unchanged: 0/0
 10589 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10590 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10591 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10592 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10593 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10594 ;;Total ram usage:        2 bytes
 10595 ;; Hardware stack levels used:    1
 10596 ;; Hardware stack levels required when called:    9
 10597 ;; This function calls:
 10598 ;;		_I2C_Master_Read
 10599 ;;		_I2C_Master_Start
 10600 ;;		_I2C_Master_Stop
 10601 ;;		_I2C_Master_Write
 10602 ;; This function is called by:
 10603 ;;		_printRTC
 10604 ;;		_initSortTimer
 10605 ;; This function uses a non-reentrant model
 10606 ;;
 10607                           
 10608                           	psect	text30
 10609  004C4E                     __ptext30:
 10610                           	opt stack 0
 10611  004C4E                     _getRTC:
 10612                           	opt stack 18
 10613                           
 10614                           ;RTC.c: 48: I2C_Master_Start();
 10615                           
 10616                           ;incstack = 0
 10617  004C4E  ECB0  F02D         	call	_I2C_Master_Start	;wreg free
 10618                           
 10619                           ;RTC.c: 49: I2C_Master_Write(0b11010000);
 10620  004C52  0E00               	movlw	0
 10621  004C54  0100               	movlb	0	; () banked
 10622  004C56  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
 10623  004C58  0ED0               	movlw	208
 10624  004C5A  6F81               	movwf	I2C_Master_Write@d& (0+255),b
 10625  004C5C  EC9A  F02D         	call	_I2C_Master_Write	;wreg free
 10626                           
 10627                           ;RTC.c: 50: I2C_Master_Write(0x00);
 10628  004C60  0E00               	movlw	0
 10629  004C62  0100               	movlb	0	; () banked
 10630  004C64  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
 10631  004C66  0E00               	movlw	0
 10632  004C68  6F81               	movwf	I2C_Master_Write@d& (0+255),b
 10633  004C6A  EC9A  F02D         	call	_I2C_Master_Write	;wreg free
 10634                           
 10635                           ;RTC.c: 51: I2C_Master_Stop();
 10636  004C6E  ECAC  F02D         	call	_I2C_Master_Stop	;wreg free
 10637                           
 10638                           ;RTC.c: 54: I2C_Master_Start();
 10639  004C72  ECB0  F02D         	call	_I2C_Master_Start	;wreg free
 10640                           
 10641                           ;RTC.c: 55: I2C_Master_Write(0b11010001);
 10642  004C76  0E00               	movlw	0
 10643  004C78  0100               	movlb	0	; () banked
 10644  004C7A  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
 10645  004C7C  0ED1               	movlw	209
 10646  004C7E  6F81               	movwf	I2C_Master_Write@d& (0+255),b
 10647  004C80  EC9A  F02D         	call	_I2C_Master_Write	;wreg free
 10648                           
 10649                           ;RTC.c: 56: for(int i = 0; i < 6; i++){
 10650  004C84  0E00               	movlw	0
 10651  004C86  0100               	movlb	0	; () banked
 10652  004C88  6F84               	movwf	(getRTC@i+1)& (0+255),b
 10653  004C8A  0E00               	movlw	0
 10654  004C8C  6F83               	movwf	getRTC@i& (0+255),b
 10655  004C8E                     l6798:
 10656                           
 10657                           ; BSR set to: 0
 10658  004C8E  0100               	movlb	0	; () banked
 10659  004C90  BF84               	btfsc	(getRTC@i+1)& (0+255),7,b
 10660  004C92  D008               	goto	l6802
 10661  004C94  0100               	movlb	0	; () banked
 10662  004C96  5184               	movf	(getRTC@i+1)& (0+255),w,b
 10663  004C98  E115               	bnz	l6808
 10664  004C9A  0E06               	movlw	6
 10665  004C9C  0100               	movlb	0	; () banked
 10666  004C9E  5D83               	subwf	getRTC@i& (0+255),w,b
 10667  004CA0  B0D8               	btfsc	status,0,c
 10668  004CA2  D010               	goto	l6808
 10669  004CA4                     l6802:
 10670                           
 10671                           ; BSR set to: 0
 10672                           ;RTC.c: 57: time[i] = I2C_Master_Read(1);
 10673  004CA4  0E24               	movlw	low _time
 10674  004CA6  0100               	movlb	0	; () banked
 10675  004CA8  2583               	addwf	getRTC@i& (0+255),w,b
 10676  004CAA  6ED9               	movwf	fsr2l,c
 10677  004CAC  0E01               	movlw	high _time
 10678  004CAE  0100               	movlb	0	; () banked
 10679  004CB0  2184               	addwfc	(getRTC@i+1)& (0+255),w,b
 10680  004CB2  6EDA               	movwf	fsr2h,c
 10681  004CB4  0E01               	movlw	1
 10682  004CB6  EC38  F02C         	call	_I2C_Master_Read
 10683  004CBA  6EDF               	movwf	indf2,c
 10684  004CBC  0100               	movlb	0	; () banked
 10685  004CBE  4B83               	infsnz	getRTC@i& (0+255),f,b
 10686  004CC0  2B84               	incf	(getRTC@i+1)& (0+255),f,b
 10687  004CC2  D7E5               	goto	l6798
 10688  004CC4                     l6808:
 10689                           
 10690                           ; BSR set to: 0
 10691                           ;RTC.c: 58: }
 10692                           ;RTC.c: 59: time[6] = I2C_Master_Read(0);
 10693  004CC4  0E00               	movlw	0
 10694  004CC6  EC38  F02C         	call	_I2C_Master_Read
 10695  004CCA  0101               	movlb	1	; () banked
 10696  004CCC  6F2A               	movwf	(_time+6)& (0+255),b
 10697                           
 10698                           ;RTC.c: 60: I2C_Master_Stop();
 10699  004CCE  ECAC  F02D         	call	_I2C_Master_Stop	;wreg free
 10700  004CD2  0012               	return		;funcret
 10701  004CD4                     __end_of_getRTC:
 10702                           	opt stack 0
 10703                           tblptru	equ	0xFF8
 10704                           tblptrh	equ	0xFF7
 10705                           tblptrl	equ	0xFF6
 10706                           tablat	equ	0xFF5
 10707                           prodh	equ	0xFF4
 10708                           prodl	equ	0xFF3
 10709                           intcon	equ	0xFF2
 10710                           intcon2	equ	0xFF1
 10711                           intcon3	equ	0xFF0
 10712                           postinc0	equ	0xFEE
 10713                           wreg	equ	0xFE8
 10714                           postdec1	equ	0xFE5
 10715                           fsr1l	equ	0xFE1
 10716                           indf2	equ	0xFDF
 10717                           postinc2	equ	0xFDE
 10718                           postdec2	equ	0xFDD
 10719                           fsr2h	equ	0xFDA
 10720                           fsr2l	equ	0xFD9
 10721                           status	equ	0xFD8
 10722                           
 10723 ;; *************** function _I2C_Master_Write *****************
 10724 ;; Defined at:
 10725 ;;		line 49 in file "I2C.c"
 10726 ;; Parameters:    Size  Location     Type
 10727 ;;  d               2    1[BANK0 ] unsigned int 
 10728 ;; Auto vars:     Size  Location     Type
 10729 ;;		None
 10730 ;; Return value:  Size  Location     Type
 10731 ;;                  1    wreg      void 
 10732 ;; Registers used:
 10733 ;;		wreg, status,2, status,0, cstack
 10734 ;; Tracked objects:
 10735 ;;		On entry : 0/0
 10736 ;;		On exit  : 0/0
 10737 ;;		Unchanged: 0/0
 10738 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10739 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10740 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10741 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10742 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10743 ;;Total ram usage:        2 bytes
 10744 ;; Hardware stack levels used:    1
 10745 ;; Hardware stack levels required when called:    8
 10746 ;; This function calls:
 10747 ;;		_I2C_Master_Wait
 10748 ;; This function is called by:
 10749 ;;		_loadRTC
 10750 ;;		_getRTC
 10751 ;; This function uses a non-reentrant model
 10752 ;;
 10753                           
 10754                           	psect	text31
 10755  005B34                     __ptext31:
 10756                           	opt stack 0
 10757  005B34                     _I2C_Master_Write:
 10758                           	opt stack 18
 10759                           
 10760                           ;I2C.c: 51: I2C_Master_Wait();
 10761                           
 10762                           ;incstack = 0
 10763  005B34  EC6B  F02D         	call	_I2C_Master_Wait	;wreg free
 10764                           
 10765                           ;I2C.c: 52: SSPBUF = d;
 10766  005B38  C081  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
 10767  005B3C  0012               	return		;funcret
 10768  005B3E                     __end_of_I2C_Master_Write:
 10769                           	opt stack 0
 10770                           tblptru	equ	0xFF8
 10771                           tblptrh	equ	0xFF7
 10772                           tblptrl	equ	0xFF6
 10773                           tablat	equ	0xFF5
 10774                           prodh	equ	0xFF4
 10775                           prodl	equ	0xFF3
 10776                           intcon	equ	0xFF2
 10777                           intcon2	equ	0xFF1
 10778                           intcon3	equ	0xFF0
 10779                           postinc0	equ	0xFEE
 10780                           wreg	equ	0xFE8
 10781                           postdec1	equ	0xFE5
 10782                           fsr1l	equ	0xFE1
 10783                           indf2	equ	0xFDF
 10784                           postinc2	equ	0xFDE
 10785                           postdec2	equ	0xFDD
 10786                           fsr2h	equ	0xFDA
 10787                           fsr2l	equ	0xFD9
 10788                           status	equ	0xFD8
 10789                           
 10790 ;; *************** function _I2C_Master_Stop *****************
 10791 ;; Defined at:
 10792 ;;		line 43 in file "I2C.c"
 10793 ;; Parameters:    Size  Location     Type
 10794 ;;		None
 10795 ;; Auto vars:     Size  Location     Type
 10796 ;;		None
 10797 ;; Return value:  Size  Location     Type
 10798 ;;                  1    wreg      void 
 10799 ;; Registers used:
 10800 ;;		wreg, status,2, status,0, cstack
 10801 ;; Tracked objects:
 10802 ;;		On entry : 0/0
 10803 ;;		On exit  : 0/0
 10804 ;;		Unchanged: 0/0
 10805 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10806 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10807 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10808 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10809 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10810 ;;Total ram usage:        0 bytes
 10811 ;; Hardware stack levels used:    1
 10812 ;; Hardware stack levels required when called:    8
 10813 ;; This function calls:
 10814 ;;		_I2C_Master_Wait
 10815 ;; This function is called by:
 10816 ;;		_loadRTC
 10817 ;;		_getRTC
 10818 ;; This function uses a non-reentrant model
 10819 ;;
 10820                           
 10821                           	psect	text32
 10822  005B58                     __ptext32:
 10823                           	opt stack 0
 10824  005B58                     _I2C_Master_Stop:
 10825                           	opt stack 18
 10826                           
 10827                           ;I2C.c: 45: I2C_Master_Wait();
 10828                           
 10829                           ;incstack = 0
 10830  005B58  EC6B  F02D         	call	_I2C_Master_Wait	;wreg free
 10831                           
 10832                           ;I2C.c: 46: PEN = 1;
 10833  005B5C  84C5               	bsf	4037,2,c	;volatile
 10834  005B5E  0012               	return		;funcret
 10835  005B60                     __end_of_I2C_Master_Stop:
 10836                           	opt stack 0
 10837                           tblptru	equ	0xFF8
 10838                           tblptrh	equ	0xFF7
 10839                           tblptrl	equ	0xFF6
 10840                           tablat	equ	0xFF5
 10841                           prodh	equ	0xFF4
 10842                           prodl	equ	0xFF3
 10843                           intcon	equ	0xFF2
 10844                           intcon2	equ	0xFF1
 10845                           intcon3	equ	0xFF0
 10846                           postinc0	equ	0xFEE
 10847                           wreg	equ	0xFE8
 10848                           postdec1	equ	0xFE5
 10849                           fsr1l	equ	0xFE1
 10850                           indf2	equ	0xFDF
 10851                           postinc2	equ	0xFDE
 10852                           postdec2	equ	0xFDD
 10853                           fsr2h	equ	0xFDA
 10854                           fsr2l	equ	0xFD9
 10855                           status	equ	0xFD8
 10856                           
 10857 ;; *************** function _I2C_Master_Start *****************
 10858 ;; Defined at:
 10859 ;;		line 31 in file "I2C.c"
 10860 ;; Parameters:    Size  Location     Type
 10861 ;;		None
 10862 ;; Auto vars:     Size  Location     Type
 10863 ;;		None
 10864 ;; Return value:  Size  Location     Type
 10865 ;;                  1    wreg      void 
 10866 ;; Registers used:
 10867 ;;		wreg, status,2, status,0, cstack
 10868 ;; Tracked objects:
 10869 ;;		On entry : 0/0
 10870 ;;		On exit  : 0/0
 10871 ;;		Unchanged: 0/0
 10872 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10873 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10874 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10875 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10876 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10877 ;;Total ram usage:        0 bytes
 10878 ;; Hardware stack levels used:    1
 10879 ;; Hardware stack levels required when called:    8
 10880 ;; This function calls:
 10881 ;;		_I2C_Master_Wait
 10882 ;; This function is called by:
 10883 ;;		_loadRTC
 10884 ;;		_getRTC
 10885 ;; This function uses a non-reentrant model
 10886 ;;
 10887                           
 10888                           	psect	text33
 10889  005B60                     __ptext33:
 10890                           	opt stack 0
 10891  005B60                     _I2C_Master_Start:
 10892                           	opt stack 18
 10893                           
 10894                           ;I2C.c: 33: I2C_Master_Wait();
 10895                           
 10896                           ;incstack = 0
 10897  005B60  EC6B  F02D         	call	_I2C_Master_Wait	;wreg free
 10898                           
 10899                           ;I2C.c: 34: SEN = 1;
 10900  005B64  80C5               	bsf	4037,0,c	;volatile
 10901  005B66  0012               	return		;funcret
 10902  005B68                     __end_of_I2C_Master_Start:
 10903                           	opt stack 0
 10904                           tblptru	equ	0xFF8
 10905                           tblptrh	equ	0xFF7
 10906                           tblptrl	equ	0xFF6
 10907                           tablat	equ	0xFF5
 10908                           prodh	equ	0xFF4
 10909                           prodl	equ	0xFF3
 10910                           intcon	equ	0xFF2
 10911                           intcon2	equ	0xFF1
 10912                           intcon3	equ	0xFF0
 10913                           postinc0	equ	0xFEE
 10914                           wreg	equ	0xFE8
 10915                           postdec1	equ	0xFE5
 10916                           fsr1l	equ	0xFE1
 10917                           indf2	equ	0xFDF
 10918                           postinc2	equ	0xFDE
 10919                           postdec2	equ	0xFDD
 10920                           fsr2h	equ	0xFDA
 10921                           fsr2l	equ	0xFD9
 10922                           status	equ	0xFD8
 10923                           
 10924 ;; *************** function _I2C_Master_Read *****************
 10925 ;; Defined at:
 10926 ;;		line 55 in file "I2C.c"
 10927 ;; Parameters:    Size  Location     Type
 10928 ;;  a               1    wreg     unsigned char 
 10929 ;; Auto vars:     Size  Location     Type
 10930 ;;  a               1    1[BANK0 ] unsigned char 
 10931 ;;  temp            1    2[BANK0 ] unsigned char 
 10932 ;; Return value:  Size  Location     Type
 10933 ;;                  1    wreg      unsigned char 
 10934 ;; Registers used:
 10935 ;;		wreg, status,2, status,0, cstack
 10936 ;; Tracked objects:
 10937 ;;		On entry : 0/0
 10938 ;;		On exit  : 0/0
 10939 ;;		Unchanged: 0/0
 10940 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10941 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10942 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10943 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10944 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10945 ;;Total ram usage:        2 bytes
 10946 ;; Hardware stack levels used:    1
 10947 ;; Hardware stack levels required when called:    8
 10948 ;; This function calls:
 10949 ;;		_I2C_Master_Wait
 10950 ;; This function is called by:
 10951 ;;		_getRTC
 10952 ;; This function uses a non-reentrant model
 10953 ;;
 10954                           
 10955                           	psect	text34
 10956  005870                     __ptext34:
 10957                           	opt stack 0
 10958  005870                     _I2C_Master_Read:
 10959                           	opt stack 18
 10960                           
 10961                           ;incstack = 0
 10962                           ;I2C_Master_Read@a stored from wreg
 10963  005870  0100               	movlb	0	; () banked
 10964  005872  6F81               	movwf	I2C_Master_Read@a& (0+255),b
 10965                           
 10966                           ;I2C.c: 57: unsigned char temp;
 10967                           ;I2C.c: 58: I2C_Master_Wait();
 10968  005874  EC6B  F02D         	call	_I2C_Master_Wait	;wreg free
 10969                           
 10970                           ;I2C.c: 59: RCEN = 1;
 10971  005878  86C5               	bsf	4037,3,c	;volatile
 10972                           
 10973                           ;I2C.c: 60: I2C_Master_Wait();
 10974  00587A  EC6B  F02D         	call	_I2C_Master_Wait	;wreg free
 10975                           
 10976                           ;I2C.c: 61: temp = SSPBUF;
 10977  00587E  CFC9 F082          	movff	4041,I2C_Master_Read@temp	;volatile
 10978                           
 10979                           ;I2C.c: 62: I2C_Master_Wait();
 10980  005882  EC6B  F02D         	call	_I2C_Master_Wait	;wreg free
 10981                           
 10982                           ;I2C.c: 63: ACKDT = (a)?0:1;
 10983  005886  0100               	movlb	0	; () banked
 10984  005888  5181               	movf	I2C_Master_Read@a& (0+255),w,b
 10985  00588A  0100               	movlb	0	; () banked
 10986  00588C  A4D8               	btfss	status,2,c
 10987  00588E  D002               	goto	u4850
 10988  005890  8AC5               	bsf	4037,5,c	;volatile
 10989  005892  D001               	goto	l6486
 10990  005894                     u4850:
 10991  005894  9AC5               	bcf	4037,5,c	;volatile
 10992  005896                     l6486:
 10993                           
 10994                           ;I2C.c: 64: ACKEN = 1;
 10995  005896  88C5               	bsf	4037,4,c	;volatile
 10996                           
 10997                           ;I2C.c: 65: return temp;
 10998  005898  0100               	movlb	0	; () banked
 10999  00589A  5182               	movf	I2C_Master_Read@temp& (0+255),w,b
 11000  00589C  0012               	return	
 11001  00589E                     __end_of_I2C_Master_Read:
 11002                           	opt stack 0
 11003                           tblptru	equ	0xFF8
 11004                           tblptrh	equ	0xFF7
 11005                           tblptrl	equ	0xFF6
 11006                           tablat	equ	0xFF5
 11007                           prodh	equ	0xFF4
 11008                           prodl	equ	0xFF3
 11009                           intcon	equ	0xFF2
 11010                           intcon2	equ	0xFF1
 11011                           intcon3	equ	0xFF0
 11012                           postinc0	equ	0xFEE
 11013                           wreg	equ	0xFE8
 11014                           postdec1	equ	0xFE5
 11015                           fsr1l	equ	0xFE1
 11016                           indf2	equ	0xFDF
 11017                           postinc2	equ	0xFDE
 11018                           postdec2	equ	0xFDD
 11019                           fsr2h	equ	0xFDA
 11020                           fsr2l	equ	0xFD9
 11021                           status	equ	0xFD8
 11022                           
 11023 ;; *************** function _I2C_Master_Wait *****************
 11024 ;; Defined at:
 11025 ;;		line 26 in file "I2C.c"
 11026 ;; Parameters:    Size  Location     Type
 11027 ;;		None
 11028 ;; Auto vars:     Size  Location     Type
 11029 ;;		None
 11030 ;; Return value:  Size  Location     Type
 11031 ;;                  1    wreg      void 
 11032 ;; Registers used:
 11033 ;;		wreg, status,2, status,0
 11034 ;; Tracked objects:
 11035 ;;		On entry : 0/0
 11036 ;;		On exit  : 0/0
 11037 ;;		Unchanged: 0/0
 11038 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11039 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11040 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11041 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11042 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11043 ;;Total ram usage:        1 bytes
 11044 ;; Hardware stack levels used:    1
 11045 ;; Hardware stack levels required when called:    7
 11046 ;; This function calls:
 11047 ;;		Nothing
 11048 ;; This function is called by:
 11049 ;;		_I2C_Master_Start
 11050 ;;		_I2C_Master_Stop
 11051 ;;		_I2C_Master_Write
 11052 ;;		_I2C_Master_Read
 11053 ;;		_I2C_Master_RepeatedStart
 11054 ;; This function uses a non-reentrant model
 11055 ;;
 11056                           
 11057                           	psect	text35
 11058  005AD6                     __ptext35:
 11059                           	opt stack 0
 11060  005AD6                     _I2C_Master_Wait:
 11061                           	opt stack 18
 11062  005AD6                     l71:
 11063  005AD6  B4C7               	btfsc	4039,2,c	;volatile
 11064  005AD8  D7FE               	goto	l71
 11065  005ADA  CFC5 F080          	movff	4037,??_I2C_Master_Wait	;volatile
 11066  005ADE  0E1F               	movlw	31
 11067  005AE0  0100               	movlb	0	; () banked
 11068  005AE2  1780               	andwf	??_I2C_Master_Wait& (0+255),f,b
 11069  005AE4  B4D8               	btfsc	status,2,c
 11070  005AE6  0012               	return	
 11071  005AE8  D7F6               	goto	l71
 11072  005AEA                     __end_of_I2C_Master_Wait:
 11073                           	opt stack 0
 11074                           tblptru	equ	0xFF8
 11075                           tblptrh	equ	0xFF7
 11076                           tblptrl	equ	0xFF6
 11077                           tablat	equ	0xFF5
 11078                           prodh	equ	0xFF4
 11079                           prodl	equ	0xFF3
 11080                           intcon	equ	0xFF2
 11081                           intcon2	equ	0xFF1
 11082                           intcon3	equ	0xFF0
 11083                           postinc0	equ	0xFEE
 11084                           wreg	equ	0xFE8
 11085                           postdec1	equ	0xFE5
 11086                           fsr1l	equ	0xFE1
 11087                           indf2	equ	0xFDF
 11088                           postinc2	equ	0xFDE
 11089                           postdec2	equ	0xFDD
 11090                           fsr2h	equ	0xFDA
 11091                           fsr2l	equ	0xFD9
 11092                           status	equ	0xFD8
 11093                           
 11094 ;; *************** function _change_state_to_menu_22 *****************
 11095 ;; Defined at:
 11096 ;;		line 501 in file "UI.c"
 11097 ;; Parameters:    Size  Location     Type
 11098 ;;		None
 11099 ;; Auto vars:     Size  Location     Type
 11100 ;;		None
 11101 ;; Return value:  Size  Location     Type
 11102 ;;                  1    wreg      void 
 11103 ;; Registers used:
 11104 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11105 ;; Tracked objects:
 11106 ;;		On entry : 0/0
 11107 ;;		On exit  : 0/0
 11108 ;;		Unchanged: 0/0
 11109 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11110 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11111 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11112 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11113 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11114 ;;Total ram usage:        0 bytes
 11115 ;; Hardware stack levels used:    1
 11116 ;; Hardware stack levels required when called:   10
 11117 ;; This function calls:
 11118 ;;		_lcdInst
 11119 ;;		_printf
 11120 ;; This function is called by:
 11121 ;;		_UI
 11122 ;; This function uses a non-reentrant model
 11123 ;;
 11124                           
 11125                           	psect	text36
 11126  005550                     __ptext36:
 11127                           	opt stack 0
 11128  005550                     _change_state_to_menu_22:
 11129                           	opt stack 19
 11130                           
 11131                           ;UI.c: 502: cur_state = 22;
 11132                           
 11133                           ; BSR set to: 0
 11134                           ;incstack = 0
 11135  005550  0E00               	movlw	0
 11136  005552  0100               	movlb	0	; () banked
 11137  005554  6FE7               	movwf	(_cur_state+1)& (0+255),b
 11138  005556  0E16               	movlw	22
 11139  005558  6FE6               	movwf	_cur_state& (0+255),b
 11140                           
 11141                           ; BSR set to: 0
 11142                           ;UI.c: 504: lcdInst(0b10000000);;
 11143  00555A  0E80               	movlw	128
 11144  00555C  EC86  F02D         	call	_lcdInst
 11145                           
 11146                           ;UI.c: 505: printf("2. SORT        <");
 11147  005560  0EBF               	movlw	low STR_34
 11148  005562  0100               	movlb	0	; () banked
 11149  005564  6F8E               	movwf	printf@f& (0+255),b
 11150  005566  0EFD               	movlw	high STR_34
 11151  005568  0100               	movlb	0	; () banked
 11152  00556A  6F8F               	movwf	(printf@f+1)& (0+255),b
 11153  00556C  ECC2  F00B         	call	_printf	;wreg free
 11154                           
 11155                           ;UI.c: 506: lcdInst(0b11000000);;
 11156  005570  0EC0               	movlw	192
 11157  005572  EC86  F02D         	call	_lcdInst
 11158                           
 11159                           ;UI.c: 507: printf("3. LOGS         ");
 11160  005576  0E04               	movlw	low STR_36
 11161  005578  0100               	movlb	0	; () banked
 11162  00557A  6F8E               	movwf	printf@f& (0+255),b
 11163  00557C  0EFD               	movlw	high STR_36
 11164  00557E  0100               	movlb	0	; () banked
 11165  005580  6F8F               	movwf	(printf@f+1)& (0+255),b
 11166  005582  ECC2  F00B         	call	_printf	;wreg free
 11167  005586  0012               	return		;funcret
 11168  005588                     __end_of_change_state_to_menu_22:
 11169                           	opt stack 0
 11170                           tblptru	equ	0xFF8
 11171                           tblptrh	equ	0xFF7
 11172                           tblptrl	equ	0xFF6
 11173                           tablat	equ	0xFF5
 11174                           prodh	equ	0xFF4
 11175                           prodl	equ	0xFF3
 11176                           intcon	equ	0xFF2
 11177                           intcon2	equ	0xFF1
 11178                           intcon3	equ	0xFF0
 11179                           postinc0	equ	0xFEE
 11180                           wreg	equ	0xFE8
 11181                           postdec1	equ	0xFE5
 11182                           fsr1l	equ	0xFE1
 11183                           indf2	equ	0xFDF
 11184                           postinc2	equ	0xFDE
 11185                           postdec2	equ	0xFDD
 11186                           fsr2h	equ	0xFDA
 11187                           fsr2l	equ	0xFD9
 11188                           status	equ	0xFD8
 11189                           
 11190 ;; *************** function _change_state_to_menu_12 *****************
 11191 ;; Defined at:
 11192 ;;		line 493 in file "UI.c"
 11193 ;; Parameters:    Size  Location     Type
 11194 ;;		None
 11195 ;; Auto vars:     Size  Location     Type
 11196 ;;		None
 11197 ;; Return value:  Size  Location     Type
 11198 ;;                  1    wreg      void 
 11199 ;; Registers used:
 11200 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11201 ;; Tracked objects:
 11202 ;;		On entry : 0/0
 11203 ;;		On exit  : 0/0
 11204 ;;		Unchanged: 0/0
 11205 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11206 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11207 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11208 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11209 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11210 ;;Total ram usage:        0 bytes
 11211 ;; Hardware stack levels used:    1
 11212 ;; Hardware stack levels required when called:   10
 11213 ;; This function calls:
 11214 ;;		_lcdInst
 11215 ;;		_printf
 11216 ;; This function is called by:
 11217 ;;		_UI
 11218 ;; This function uses a non-reentrant model
 11219 ;;
 11220                           
 11221                           	psect	text37
 11222  005588                     __ptext37:
 11223                           	opt stack 0
 11224  005588                     _change_state_to_menu_12:
 11225                           	opt stack 19
 11226                           
 11227                           ;UI.c: 494: cur_state = 12;
 11228                           
 11229                           ;incstack = 0
 11230  005588  0E00               	movlw	0
 11231  00558A  0100               	movlb	0	; () banked
 11232  00558C  6FE7               	movwf	(_cur_state+1)& (0+255),b
 11233  00558E  0E0C               	movlw	12
 11234  005590  6FE6               	movwf	_cur_state& (0+255),b
 11235                           
 11236                           ; BSR set to: 0
 11237                           ;UI.c: 496: lcdInst(0b10000000);;
 11238  005592  0E80               	movlw	128
 11239  005594  EC86  F02D         	call	_lcdInst
 11240                           
 11241                           ;UI.c: 497: printf("1. DATE/TIME    ");
 11242  005598  0E26               	movlw	low STR_33
 11243  00559A  0100               	movlb	0	; () banked
 11244  00559C  6F8E               	movwf	printf@f& (0+255),b
 11245  00559E  0EFD               	movlw	high STR_33
 11246  0055A0  0100               	movlb	0	; () banked
 11247  0055A2  6F8F               	movwf	(printf@f+1)& (0+255),b
 11248  0055A4  ECC2  F00B         	call	_printf	;wreg free
 11249                           
 11250                           ;UI.c: 498: lcdInst(0b11000000);;
 11251  0055A8  0EC0               	movlw	192
 11252  0055AA  EC86  F02D         	call	_lcdInst
 11253                           
 11254                           ;UI.c: 499: printf("2. SORT        <");
 11255  0055AE  0EBF               	movlw	low STR_34
 11256  0055B0  0100               	movlb	0	; () banked
 11257  0055B2  6F8E               	movwf	printf@f& (0+255),b
 11258  0055B4  0EFD               	movlw	high STR_34
 11259  0055B6  0100               	movlb	0	; () banked
 11260  0055B8  6F8F               	movwf	(printf@f+1)& (0+255),b
 11261  0055BA  ECC2  F00B         	call	_printf	;wreg free
 11262  0055BE  0012               	return		;funcret
 11263  0055C0                     __end_of_change_state_to_menu_12:
 11264                           	opt stack 0
 11265                           tblptru	equ	0xFF8
 11266                           tblptrh	equ	0xFF7
 11267                           tblptrl	equ	0xFF6
 11268                           tablat	equ	0xFF5
 11269                           prodh	equ	0xFF4
 11270                           prodl	equ	0xFF3
 11271                           intcon	equ	0xFF2
 11272                           intcon2	equ	0xFF1
 11273                           intcon3	equ	0xFF0
 11274                           postinc0	equ	0xFEE
 11275                           wreg	equ	0xFE8
 11276                           postdec1	equ	0xFE5
 11277                           fsr1l	equ	0xFE1
 11278                           indf2	equ	0xFDF
 11279                           postinc2	equ	0xFDE
 11280                           postdec2	equ	0xFDD
 11281                           fsr2h	equ	0xFDA
 11282                           fsr2l	equ	0xFD9
 11283                           status	equ	0xFD8
 11284                           
 11285 ;; *************** function ___awmod *****************
 11286 ;; Defined at:
 11287 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
 11288 ;; Parameters:    Size  Location     Type
 11289 ;;  dividend        2    0[BANK0 ] int 
 11290 ;;  divisor         2    2[BANK0 ] int 
 11291 ;; Auto vars:     Size  Location     Type
 11292 ;;  sign            1    5[BANK0 ] unsigned char 
 11293 ;;  counter         1    4[BANK0 ] unsigned char 
 11294 ;; Return value:  Size  Location     Type
 11295 ;;                  2    0[BANK0 ] int 
 11296 ;; Registers used:
 11297 ;;		wreg, status,2, status,0
 11298 ;; Tracked objects:
 11299 ;;		On entry : 0/0
 11300 ;;		On exit  : 0/0
 11301 ;;		Unchanged: 0/0
 11302 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11303 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11304 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11305 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11306 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11307 ;;Total ram usage:        6 bytes
 11308 ;; Hardware stack levels used:    1
 11309 ;; Hardware stack levels required when called:    7
 11310 ;; This function calls:
 11311 ;;		Nothing
 11312 ;; This function is called by:
 11313 ;;		_UI
 11314 ;; This function uses a non-reentrant model
 11315 ;;
 11316                           
 11317                           	psect	text38
 11318  004B20                     __ptext38:
 11319                           	opt stack 0
 11320  004B20                     ___awmod:
 11321                           	opt stack 22
 11322                           
 11323                           ;incstack = 0
 11324  004B20  0E00               	movlw	0
 11325  004B22  0100               	movlb	0	; () banked
 11326  004B24  6F85               	movwf	___awmod@sign& (0+255),b
 11327                           
 11328                           ; BSR set to: 0
 11329  004B26  0100               	movlb	0	; () banked
 11330  004B28  AF81               	btfss	(___awmod@dividend+1)& (0+255),7,b
 11331  004B2A  D008               	goto	l9096
 11332                           
 11333                           ; BSR set to: 0
 11334  004B2C  0100               	movlb	0	; () banked
 11335  004B2E  6D80               	negf	___awmod@dividend& (0+255),b
 11336  004B30  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
 11337  004B32  B0D8               	btfsc	status,0,c
 11338  004B34  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
 11339                           
 11340                           ; BSR set to: 0
 11341  004B36  0E01               	movlw	1
 11342  004B38  0100               	movlb	0	; () banked
 11343  004B3A  6F85               	movwf	___awmod@sign& (0+255),b
 11344  004B3C                     l9096:
 11345                           
 11346                           ; BSR set to: 0
 11347  004B3C  0100               	movlb	0	; () banked
 11348  004B3E  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
 11349  004B40  D005               	goto	l9100
 11350                           
 11351                           ; BSR set to: 0
 11352  004B42  0100               	movlb	0	; () banked
 11353  004B44  6D82               	negf	___awmod@divisor& (0+255),b
 11354  004B46  1F83               	comf	(___awmod@divisor+1)& (0+255),f,b
 11355  004B48  B0D8               	btfsc	status,0,c
 11356  004B4A  2B83               	incf	(___awmod@divisor+1)& (0+255),f,b
 11357  004B4C                     l9100:
 11358                           
 11359                           ; BSR set to: 0
 11360  004B4C  0100               	movlb	0	; () banked
 11361  004B4E  5182               	movf	___awmod@divisor& (0+255),w,b
 11362  004B50  0100               	movlb	0	; () banked
 11363  004B52  1183               	iorwf	(___awmod@divisor+1)& (0+255),w,b
 11364  004B54  B4D8               	btfsc	status,2,c
 11365  004B56  D026               	goto	l9116
 11366                           
 11367                           ; BSR set to: 0
 11368  004B58  0E01               	movlw	1
 11369  004B5A  0100               	movlb	0	; () banked
 11370  004B5C  6F84               	movwf	___awmod@counter& (0+255),b
 11371  004B5E  D006               	goto	l9106
 11372  004B60                     l9104:
 11373                           
 11374                           ; BSR set to: 0
 11375  004B60  0100               	movlb	0	; () banked
 11376  004B62  90D8               	bcf	status,0,c
 11377  004B64  3782               	rlcf	___awmod@divisor& (0+255),f,b
 11378  004B66  3783               	rlcf	(___awmod@divisor+1)& (0+255),f,b
 11379  004B68  0100               	movlb	0	; () banked
 11380  004B6A  2B84               	incf	___awmod@counter& (0+255),f,b
 11381  004B6C                     l9106:
 11382                           
 11383                           ; BSR set to: 0
 11384  004B6C  0100               	movlb	0	; () banked
 11385  004B6E  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
 11386  004B70  D7F7               	goto	l9104
 11387  004B72                     l9108:
 11388                           
 11389                           ; BSR set to: 0
 11390  004B72  0100               	movlb	0	; () banked
 11391  004B74  5182               	movf	___awmod@divisor& (0+255),w,b
 11392  004B76  0100               	movlb	0	; () banked
 11393  004B78  5D80               	subwf	___awmod@dividend& (0+255),w,b
 11394  004B7A  0100               	movlb	0	; () banked
 11395  004B7C  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
 11396  004B7E  0100               	movlb	0	; () banked
 11397  004B80  5981               	subwfb	(___awmod@dividend+1)& (0+255),w,b
 11398  004B82  A0D8               	btfss	status,0,c
 11399  004B84  D008               	goto	l9112
 11400                           
 11401                           ; BSR set to: 0
 11402  004B86  0100               	movlb	0	; () banked
 11403  004B88  5182               	movf	___awmod@divisor& (0+255),w,b
 11404  004B8A  0100               	movlb	0	; () banked
 11405  004B8C  5F80               	subwf	___awmod@dividend& (0+255),f,b
 11406  004B8E  0100               	movlb	0	; () banked
 11407  004B90  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
 11408  004B92  0100               	movlb	0	; () banked
 11409  004B94  5B81               	subwfb	(___awmod@dividend+1)& (0+255),f,b
 11410  004B96                     l9112:
 11411                           
 11412                           ; BSR set to: 0
 11413  004B96  0100               	movlb	0	; () banked
 11414  004B98  90D8               	bcf	status,0,c
 11415  004B9A  3383               	rrcf	(___awmod@divisor+1)& (0+255),f,b
 11416  004B9C  3382               	rrcf	___awmod@divisor& (0+255),f,b
 11417                           
 11418                           ; BSR set to: 0
 11419  004B9E  0100               	movlb	0	; () banked
 11420  004BA0  2F84               	decfsz	___awmod@counter& (0+255),f,b
 11421  004BA2  D7E7               	goto	l9108
 11422  004BA4                     l9116:
 11423                           
 11424                           ; BSR set to: 0
 11425  004BA4  0100               	movlb	0	; () banked
 11426  004BA6  5185               	movf	___awmod@sign& (0+255),w,b
 11427  004BA8  0100               	movlb	0	; () banked
 11428  004BAA  B4D8               	btfsc	status,2,c
 11429  004BAC  D005               	goto	l9120
 11430                           
 11431                           ; BSR set to: 0
 11432  004BAE  0100               	movlb	0	; () banked
 11433  004BB0  6D80               	negf	___awmod@dividend& (0+255),b
 11434  004BB2  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
 11435  004BB4  B0D8               	btfsc	status,0,c
 11436  004BB6  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
 11437  004BB8                     l9120:
 11438                           
 11439                           ; BSR set to: 0
 11440  004BB8  C080  F080         	movff	___awmod@dividend,?___awmod
 11441  004BBC  C081  F081         	movff	___awmod@dividend+1,?___awmod+1
 11442  004BC0  0012               	return	
 11443  004BC2                     __end_of___awmod:
 11444                           	opt stack 0
 11445                           tblptru	equ	0xFF8
 11446                           tblptrh	equ	0xFF7
 11447                           tblptrl	equ	0xFF6
 11448                           tablat	equ	0xFF5
 11449                           prodh	equ	0xFF4
 11450                           prodl	equ	0xFF3
 11451                           intcon	equ	0xFF2
 11452                           intcon2	equ	0xFF1
 11453                           intcon3	equ	0xFF0
 11454                           postinc0	equ	0xFEE
 11455                           wreg	equ	0xFE8
 11456                           postdec1	equ	0xFE5
 11457                           fsr1l	equ	0xFE1
 11458                           indf2	equ	0xFDF
 11459                           postinc2	equ	0xFDE
 11460                           postdec2	equ	0xFDD
 11461                           fsr2h	equ	0xFDA
 11462                           fsr2l	equ	0xFD9
 11463                           status	equ	0xFD8
 11464                           
 11465 ;; *************** function ___awdiv *****************
 11466 ;; Defined at:
 11467 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
 11468 ;; Parameters:    Size  Location     Type
 11469 ;;  dividend        2    6[BANK0 ] int 
 11470 ;;  divisor         2    8[BANK0 ] int 
 11471 ;; Auto vars:     Size  Location     Type
 11472 ;;  quotient        2   12[BANK0 ] int 
 11473 ;;  sign            1   11[BANK0 ] unsigned char 
 11474 ;;  counter         1   10[BANK0 ] unsigned char 
 11475 ;; Return value:  Size  Location     Type
 11476 ;;                  2    6[BANK0 ] int 
 11477 ;; Registers used:
 11478 ;;		wreg, status,2, status,0
 11479 ;; Tracked objects:
 11480 ;;		On entry : 0/0
 11481 ;;		On exit  : 0/0
 11482 ;;		Unchanged: 0/0
 11483 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11484 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11485 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11486 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11487 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11488 ;;Total ram usage:        8 bytes
 11489 ;; Hardware stack levels used:    1
 11490 ;; Hardware stack levels required when called:    7
 11491 ;; This function calls:
 11492 ;;		Nothing
 11493 ;; This function is called by:
 11494 ;;		_UI
 11495 ;;		_ID
 11496 ;; This function uses a non-reentrant model
 11497 ;;
 11498                           
 11499                           	psect	text39
 11500  0048FC                     __ptext39:
 11501                           	opt stack 0
 11502  0048FC                     ___awdiv:
 11503                           	opt stack 21
 11504                           
 11505                           ; BSR set to: 0
 11506                           ;incstack = 0
 11507  0048FC  0E00               	movlw	0
 11508  0048FE  0100               	movlb	0	; () banked
 11509  004900  6F8B               	movwf	___awdiv@sign& (0+255),b
 11510                           
 11511                           ; BSR set to: 0
 11512  004902  0100               	movlb	0	; () banked
 11513  004904  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
 11514  004906  D008               	goto	l7414
 11515                           
 11516                           ; BSR set to: 0
 11517  004908  0100               	movlb	0	; () banked
 11518  00490A  6D88               	negf	___awdiv@divisor& (0+255),b
 11519  00490C  1F89               	comf	(___awdiv@divisor+1)& (0+255),f,b
 11520  00490E  B0D8               	btfsc	status,0,c
 11521  004910  2B89               	incf	(___awdiv@divisor+1)& (0+255),f,b
 11522                           
 11523                           ; BSR set to: 0
 11524  004912  0E01               	movlw	1
 11525  004914  0100               	movlb	0	; () banked
 11526  004916  6F8B               	movwf	___awdiv@sign& (0+255),b
 11527  004918                     l7414:
 11528                           
 11529                           ; BSR set to: 0
 11530  004918  0100               	movlb	0	; () banked
 11531  00491A  AF87               	btfss	(___awdiv@dividend+1)& (0+255),7,b
 11532  00491C  D008               	goto	l7420
 11533                           
 11534                           ; BSR set to: 0
 11535  00491E  0100               	movlb	0	; () banked
 11536  004920  6D86               	negf	___awdiv@dividend& (0+255),b
 11537  004922  1F87               	comf	(___awdiv@dividend+1)& (0+255),f,b
 11538  004924  B0D8               	btfsc	status,0,c
 11539  004926  2B87               	incf	(___awdiv@dividend+1)& (0+255),f,b
 11540                           
 11541                           ; BSR set to: 0
 11542  004928  0E01               	movlw	1
 11543  00492A  0100               	movlb	0	; () banked
 11544  00492C  1B8B               	xorwf	___awdiv@sign& (0+255),f,b
 11545  00492E                     l7420:
 11546                           
 11547                           ; BSR set to: 0
 11548  00492E  0E00               	movlw	0
 11549  004930  0100               	movlb	0	; () banked
 11550  004932  6F8D               	movwf	(___awdiv@quotient+1)& (0+255),b
 11551  004934  0E00               	movlw	0
 11552  004936  6F8C               	movwf	___awdiv@quotient& (0+255),b
 11553                           
 11554                           ; BSR set to: 0
 11555  004938  0100               	movlb	0	; () banked
 11556  00493A  5188               	movf	___awdiv@divisor& (0+255),w,b
 11557  00493C  0100               	movlb	0	; () banked
 11558  00493E  1189               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
 11559  004940  B4D8               	btfsc	status,2,c
 11560  004942  D02C               	goto	l7442
 11561                           
 11562                           ; BSR set to: 0
 11563  004944  0E01               	movlw	1
 11564  004946  0100               	movlb	0	; () banked
 11565  004948  6F8A               	movwf	___awdiv@counter& (0+255),b
 11566  00494A  D006               	goto	l7428
 11567  00494C                     l7426:
 11568                           
 11569                           ; BSR set to: 0
 11570  00494C  0100               	movlb	0	; () banked
 11571  00494E  90D8               	bcf	status,0,c
 11572  004950  3788               	rlcf	___awdiv@divisor& (0+255),f,b
 11573  004952  3789               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
 11574  004954  0100               	movlb	0	; () banked
 11575  004956  2B8A               	incf	___awdiv@counter& (0+255),f,b
 11576  004958                     l7428:
 11577                           
 11578                           ; BSR set to: 0
 11579  004958  0100               	movlb	0	; () banked
 11580  00495A  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
 11581  00495C  D7F7               	goto	l7426
 11582  00495E                     l7430:
 11583                           
 11584                           ; BSR set to: 0
 11585  00495E  0100               	movlb	0	; () banked
 11586  004960  90D8               	bcf	status,0,c
 11587  004962  378C               	rlcf	___awdiv@quotient& (0+255),f,b
 11588  004964  378D               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
 11589                           
 11590                           ; BSR set to: 0
 11591  004966  0100               	movlb	0	; () banked
 11592  004968  5188               	movf	___awdiv@divisor& (0+255),w,b
 11593  00496A  0100               	movlb	0	; () banked
 11594  00496C  5D86               	subwf	___awdiv@dividend& (0+255),w,b
 11595  00496E  0100               	movlb	0	; () banked
 11596  004970  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
 11597  004972  0100               	movlb	0	; () banked
 11598  004974  5987               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
 11599  004976  A0D8               	btfss	status,0,c
 11600  004978  D00A               	goto	l7438
 11601                           
 11602                           ; BSR set to: 0
 11603  00497A  0100               	movlb	0	; () banked
 11604  00497C  5188               	movf	___awdiv@divisor& (0+255),w,b
 11605  00497E  0100               	movlb	0	; () banked
 11606  004980  5F86               	subwf	___awdiv@dividend& (0+255),f,b
 11607  004982  0100               	movlb	0	; () banked
 11608  004984  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
 11609  004986  0100               	movlb	0	; () banked
 11610  004988  5B87               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
 11611                           
 11612                           ; BSR set to: 0
 11613  00498A  0100               	movlb	0	; () banked
 11614  00498C  818C               	bsf	___awdiv@quotient& (0+255),0,b
 11615  00498E                     l7438:
 11616                           
 11617                           ; BSR set to: 0
 11618  00498E  0100               	movlb	0	; () banked
 11619  004990  90D8               	bcf	status,0,c
 11620  004992  3389               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
 11621  004994  3388               	rrcf	___awdiv@divisor& (0+255),f,b
 11622                           
 11623                           ; BSR set to: 0
 11624  004996  0100               	movlb	0	; () banked
 11625  004998  2F8A               	decfsz	___awdiv@counter& (0+255),f,b
 11626  00499A  D7E1               	goto	l7430
 11627  00499C                     l7442:
 11628                           
 11629                           ; BSR set to: 0
 11630  00499C  0100               	movlb	0	; () banked
 11631  00499E  518B               	movf	___awdiv@sign& (0+255),w,b
 11632  0049A0  0100               	movlb	0	; () banked
 11633  0049A2  B4D8               	btfsc	status,2,c
 11634  0049A4  D005               	goto	l7446
 11635                           
 11636                           ; BSR set to: 0
 11637  0049A6  0100               	movlb	0	; () banked
 11638  0049A8  6D8C               	negf	___awdiv@quotient& (0+255),b
 11639  0049AA  1F8D               	comf	(___awdiv@quotient+1)& (0+255),f,b
 11640  0049AC  B0D8               	btfsc	status,0,c
 11641  0049AE  2B8D               	incf	(___awdiv@quotient+1)& (0+255),f,b
 11642  0049B0                     l7446:
 11643                           
 11644                           ; BSR set to: 0
 11645  0049B0  C08C  F086         	movff	___awdiv@quotient,?___awdiv
 11646  0049B4  C08D  F087         	movff	___awdiv@quotient+1,?___awdiv+1
 11647  0049B8  0012               	return	
 11648  0049BA                     __end_of___awdiv:
 11649                           	opt stack 0
 11650                           tblptru	equ	0xFF8
 11651                           tblptrh	equ	0xFF7
 11652                           tblptrl	equ	0xFF6
 11653                           tablat	equ	0xFF5
 11654                           prodh	equ	0xFF4
 11655                           prodl	equ	0xFF3
 11656                           intcon	equ	0xFF2
 11657                           intcon2	equ	0xFF1
 11658                           intcon3	equ	0xFF0
 11659                           postinc0	equ	0xFEE
 11660                           wreg	equ	0xFE8
 11661                           postdec1	equ	0xFE5
 11662                           fsr1l	equ	0xFE1
 11663                           indf2	equ	0xFDF
 11664                           postinc2	equ	0xFDE
 11665                           postdec2	equ	0xFDD
 11666                           fsr2h	equ	0xFDA
 11667                           fsr2l	equ	0xFD9
 11668                           status	equ	0xFD8
 11669                           
 11670 ;; *************** function _Test *****************
 11671 ;; Defined at:
 11672 ;;		line 31 in file "Test.c"
 11673 ;; Parameters:    Size  Location     Type
 11674 ;;		None
 11675 ;; Auto vars:     Size  Location     Type
 11676 ;;		None
 11677 ;; Return value:  Size  Location     Type
 11678 ;;                  1    wreg      void 
 11679 ;; Registers used:
 11680 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11681 ;; Tracked objects:
 11682 ;;		On entry : 0/0
 11683 ;;		On exit  : 0/0
 11684 ;;		Unchanged: 0/0
 11685 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11686 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11687 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11688 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11689 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11690 ;;Total ram usage:        2 bytes
 11691 ;; Hardware stack levels used:    1
 11692 ;; Hardware stack levels required when called:   11
 11693 ;; This function calls:
 11694 ;;		_BlockerTest
 11695 ;;		_BothServos
 11696 ;;		_PlatformTest
 11697 ;;		_PortTestDC
 11698 ;;		_PortTestPusher
 11699 ;;		_SpeedTest
 11700 ;;		_actuatorTest
 11701 ;;		_algorithmTest
 11702 ;;		_arm
 11703 ;;		_lcdInst
 11704 ;;		_printf
 11705 ;;		_sensorTest
 11706 ;; This function is called by:
 11707 ;;		_main
 11708 ;; This function uses a non-reentrant model
 11709 ;;
 11710                           
 11711                           	psect	text40
 11712  00420A                     __ptext40:
 11713                           	opt stack 0
 11714  00420A                     _Test:
 11715                           	opt stack 19
 11716                           
 11717                           ;Test.c: 33: while(machine_state == Testing_state){
 11718                           
 11719                           ; BSR set to: 0
 11720                           ;incstack = 0
 11721  00420A  D07C               	goto	l9846
 11722  00420C                     l9806:
 11723                           
 11724                           ;Test.c: 34: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 11725  00420C  0E01               	movlw	1
 11726  00420E  EC86  F02D         	call	_lcdInst
 11727  004212  0E68               	movlw	104
 11728  004214  0100               	movlb	0	; () banked
 11729  004216  6FC6               	movwf	??_Test& (0+255),b
 11730  004218  0EE4               	movlw	228
 11731  00421A                     u10237:
 11732  00421A  2EE8               	decfsz	wreg,f,c
 11733  00421C  D7FE               	bra	u10237
 11734  00421E  2FC6               	decfsz	??_Test& (0+255),f,b
 11735  004220  D7FC               	bra	u10237
 11736  004222  F000               	nop	
 11737  004224  0E80               	movlw	128
 11738  004226  EC86  F02D         	call	_lcdInst
 11739                           
 11740                           ;Test.c: 35: printf("2.SNR|4.HI|5.MED");
 11741  00422A  0E7C               	movlw	low STR_69
 11742  00422C  0100               	movlb	0	; () banked
 11743  00422E  6F8E               	movwf	printf@f& (0+255),b
 11744  004230  0EFC               	movlw	high STR_69
 11745  004232  0100               	movlb	0	; () banked
 11746  004234  6F8F               	movwf	(printf@f+1)& (0+255),b
 11747  004236  ECC2  F00B         	call	_printf	;wreg free
 11748                           
 11749                           ;Test.c: 36: lcdInst(0b11000000);;
 11750  00423A  0EC0               	movlw	192
 11751  00423C  EC86  F02D         	call	_lcdInst
 11752                           
 11753                           ;Test.c: 37: printf("B.PLA|8.SV|9.BLK");
 11754  004240  0E8D               	movlw	low STR_70
 11755  004242  0100               	movlb	0	; () banked
 11756  004244  6F8E               	movwf	printf@f& (0+255),b
 11757  004246  0EFC               	movlw	high STR_70
 11758  004248  0100               	movlb	0	; () banked
 11759  00424A  6F8F               	movwf	(printf@f+1)& (0+255),b
 11760  00424C  ECC2  F00B         	call	_printf	;wreg free
 11761  004250                     l1226:
 11762  004250  A281               	btfss	3969,1,c	;volatile
 11763  004252  D7FE               	goto	l1226
 11764                           
 11765                           ;Test.c: 39: var = PORTB >> 4;
 11766  004254  CF81 F0C6          	movff	3969,??_Test	;volatile
 11767  004258  0100               	movlb	0	; () banked
 11768  00425A  3BC6               	swapf	??_Test& (0+255),f,b
 11769  00425C  0E0F               	movlw	15
 11770  00425E  17C6               	andwf	??_Test& (0+255),f,b
 11771  004260  0100               	movlb	0	; () banked
 11772  004262  51C6               	movf	??_Test& (0+255),w,b
 11773  004264  0101               	movlb	1	; () banked
 11774  004266  6F47               	movwf	_var& (0+255),b
 11775  004268  6B48               	clrf	(_var+1)& (0+255),b
 11776                           
 11777                           ; BSR set to: 1
 11778                           ;Test.c: 40: var++;
 11779  00426A  0101               	movlb	1	; () banked
 11780  00426C  4B47               	infsnz	_var& (0+255),f,b
 11781  00426E  2B48               	incf	(_var+1)& (0+255),f,b
 11782  004270                     l1229:
 11783  004270  A281               	btfss	3969,1,c	;volatile
 11784  004272  D01F               	goto	l9844
 11785  004274  D7FD               	goto	l1229
 11786  004276                     l9822:
 11787                           
 11788                           ;Test.c: 44: algorithmTest();
 11789  004276  ECEC  F022         	call	_algorithmTest	;wreg free
 11790                           
 11791                           ;Test.c: 45: break;
 11792  00427A  D044               	goto	l9846
 11793  00427C                     l9824:
 11794                           
 11795                           ;Test.c: 47: sensorTest();
 11796  00427C  ECE4  F014         	call	_sensorTest	;wreg free
 11797                           
 11798                           ;Test.c: 48: break;
 11799  004280  D041               	goto	l9846
 11800  004282                     l9826:
 11801                           
 11802                           ;Test.c: 50: actuatorTest();
 11803  004282  EC6D  F004         	call	_actuatorTest	;wreg free
 11804                           
 11805                           ;Test.c: 51: break;
 11806  004286  D03E               	goto	l9846
 11807  004288                     l9828:
 11808                           
 11809                           ;Test.c: 53: arm();
 11810  004288  EC88  F021         	call	_arm	;wreg free
 11811                           
 11812                           ;Test.c: 54: break;
 11813  00428C  D03B               	goto	l9846
 11814  00428E                     l9830:
 11815                           
 11816                           ;Test.c: 56: PortTestDC();
 11817  00428E  EC08  F029         	call	_PortTestDC	;wreg free
 11818                           
 11819                           ;Test.c: 57: break;
 11820  004292  D038               	goto	l9846
 11821  004294                     l9832:
 11822                           
 11823                           ;Test.c: 59: SpeedTest();
 11824  004294  ECAD  F026         	call	_SpeedTest	;wreg free
 11825                           
 11826                           ;Test.c: 60: break;
 11827  004298  D035               	goto	l9846
 11828  00429A                     l9834:
 11829                           
 11830                           ;Test.c: 62: PortTestPusher();
 11831  00429A  ECDA  F028         	call	_PortTestPusher	;wreg free
 11832                           
 11833                           ;Test.c: 63: break;
 11834  00429E  D032               	goto	l9846
 11835  0042A0                     l9836:
 11836                           
 11837                           ;Test.c: 65: PlatformTest();
 11838  0042A0  EC59  F013         	call	_PlatformTest	;wreg free
 11839                           
 11840                           ;Test.c: 66: break;
 11841  0042A4  D02F               	goto	l9846
 11842  0042A6                     l9838:
 11843                           
 11844                           ;Test.c: 68: BothServos();
 11845  0042A6  ECDE  F00D         	call	_BothServos	;wreg free
 11846                           
 11847                           ;Test.c: 69: break;
 11848  0042AA  D02C               	goto	l9846
 11849  0042AC                     l9840:
 11850                           
 11851                           ;Test.c: 71: BlockerTest();
 11852  0042AC  EC6A  F01E         	call	_BlockerTest	;wreg free
 11853                           
 11854                           ;Test.c: 75: }
 11855                           
 11856                           ;Test.c: 74: break;
 11857                           
 11858                           ;Test.c: 73: default:
 11859                           
 11860                           ;Test.c: 72: break;
 11861  0042B0  D029               	goto	l9846
 11862  0042B2                     l9844:
 11863  0042B2  C147  F0C6         	movff	_var,??_Test
 11864  0042B6  C148  F0C7         	movff	_var+1,??_Test+1
 11865                           
 11866                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11867                           ; Switch size 1, requested type "space"
 11868                           ; Number of cases is 1, Range of values is 0 to 0
 11869                           ; switch strategies available:
 11870                           ; Name         Instructions Cycles
 11871                           ; simple_byte            4     3 (average)
 11872                           ;	Chosen strategy is simple_byte
 11873  0042BA  0100               	movlb	0	; () banked
 11874  0042BC  51C7               	movf	(??_Test+1)& (0+255),w,b
 11875  0042BE  0A00               	xorlw	0	; case 0
 11876  0042C0  A4D8               	btfss	status,2,c
 11877  0042C2  D020               	goto	l9846
 11878                           
 11879                           ; BSR set to: 0
 11880                           ; Switch size 1, requested type "space"
 11881                           ; Number of cases is 10, Range of values is 1 to 11
 11882                           ; switch strategies available:
 11883                           ; Name         Instructions Cycles
 11884                           ; simple_byte           31    16 (average)
 11885                           ;	Chosen strategy is simple_byte
 11886  0042C4  0100               	movlb	0	; () banked
 11887  0042C6  51C6               	movf	??_Test& (0+255),w,b
 11888  0042C8  0A01               	xorlw	1	; case 1
 11889  0042CA  B4D8               	btfsc	status,2,c
 11890  0042CC  D7D4               	goto	l9822
 11891  0042CE  0A03               	xorlw	3	; case 2
 11892  0042D0  B4D8               	btfsc	status,2,c
 11893  0042D2  D7D4               	goto	l9824
 11894  0042D4  0A01               	xorlw	1	; case 3
 11895  0042D6  B4D8               	btfsc	status,2,c
 11896  0042D8  D7D4               	goto	l9826
 11897  0042DA  0A07               	xorlw	7	; case 4
 11898  0042DC  B4D8               	btfsc	status,2,c
 11899  0042DE  D7D4               	goto	l9828
 11900  0042E0  0A01               	xorlw	1	; case 5
 11901  0042E2  B4D8               	btfsc	status,2,c
 11902  0042E4  D7D4               	goto	l9830
 11903  0042E6  0A03               	xorlw	3	; case 6
 11904  0042E8  B4D8               	btfsc	status,2,c
 11905  0042EA  D7D4               	goto	l9832
 11906  0042EC  0A01               	xorlw	1	; case 7
 11907  0042EE  B4D8               	btfsc	status,2,c
 11908  0042F0  D7D4               	goto	l9834
 11909  0042F2  0A0F               	xorlw	15	; case 8
 11910  0042F4  B4D8               	btfsc	status,2,c
 11911  0042F6  D7D4               	goto	l9836
 11912  0042F8  0A02               	xorlw	2	; case 10
 11913  0042FA  B4D8               	btfsc	status,2,c
 11914  0042FC  D7D4               	goto	l9838
 11915  0042FE  0A01               	xorlw	1	; case 11
 11916  004300  B4D8               	btfsc	status,2,c
 11917  004302  D7D4               	goto	l9840
 11918  004304                     l9846:
 11919  004304  0E03               	movlw	3
 11920  004306  0100               	movlb	0	; () banked
 11921  004308  19FC               	xorwf	_machine_state& (0+255),w,b
 11922  00430A  A4D8               	btfss	status,2,c
 11923  00430C  0012               	return	
 11924  00430E  D77E               	goto	l9806
 11925  004310                     __end_of_Test:
 11926                           	opt stack 0
 11927                           tblptru	equ	0xFF8
 11928                           tblptrh	equ	0xFF7
 11929                           tblptrl	equ	0xFF6
 11930                           tablat	equ	0xFF5
 11931                           prodh	equ	0xFF4
 11932                           prodl	equ	0xFF3
 11933                           intcon	equ	0xFF2
 11934                           intcon2	equ	0xFF1
 11935                           intcon3	equ	0xFF0
 11936                           postinc0	equ	0xFEE
 11937                           wreg	equ	0xFE8
 11938                           postdec1	equ	0xFE5
 11939                           fsr1l	equ	0xFE1
 11940                           indf2	equ	0xFDF
 11941                           postinc2	equ	0xFDE
 11942                           postdec2	equ	0xFDD
 11943                           fsr2h	equ	0xFDA
 11944                           fsr2l	equ	0xFD9
 11945                           status	equ	0xFD8
 11946                           
 11947 ;; *************** function _sensorTest *****************
 11948 ;; Defined at:
 11949 ;;		line 123 in file "Test.c"
 11950 ;; Parameters:    Size  Location     Type
 11951 ;;		None
 11952 ;; Auto vars:     Size  Location     Type
 11953 ;;  res             2   45[BANK0 ] int 
 11954 ;; Return value:  Size  Location     Type
 11955 ;;                  1    wreg      void 
 11956 ;; Registers used:
 11957 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11958 ;; Tracked objects:
 11959 ;;		On entry : 0/0
 11960 ;;		On exit  : 0/0
 11961 ;;		Unchanged: 0/0
 11962 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11963 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11964 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11965 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11966 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11967 ;;Total ram usage:        4 bytes
 11968 ;; Hardware stack levels used:    1
 11969 ;; Hardware stack levels required when called:   10
 11970 ;; This function calls:
 11971 ;;		_lcdInst
 11972 ;;		_printf
 11973 ;;		_readADC
 11974 ;;		_readMAG
 11975 ;; This function is called by:
 11976 ;;		_Test
 11977 ;; This function uses a non-reentrant model
 11978 ;;
 11979                           
 11980                           	psect	text41
 11981  0029C8                     __ptext41:
 11982                           	opt stack 0
 11983  0029C8                     _sensorTest:
 11984                           	opt stack 19
 11985                           
 11986                           ;Test.c: 125: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11987                           
 11988                           ; BSR set to: 0
 11989                           ;incstack = 0
 11990  0029C8  0E01               	movlw	1
 11991  0029CA  EC86  F02D         	call	_lcdInst
 11992  0029CE  0E68               	movlw	104
 11993  0029D0  0100               	movlb	0	; () banked
 11994  0029D2  6FAB               	movwf	??_sensorTest& (0+255),b
 11995  0029D4  0EE4               	movlw	228
 11996  0029D6                     u10247:
 11997  0029D6  2EE8               	decfsz	wreg,f,c
 11998  0029D8  D7FE               	bra	u10247
 11999  0029DA  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12000  0029DC  D7FC               	bra	u10247
 12001  0029DE  F000               	nop	
 12002  0029E0  0E80               	movlw	128
 12003  0029E2  EC86  F02D         	call	_lcdInst
 12004                           
 12005                           ;Test.c: 126: printf("SENSORS");
 12006  0029E6  0EAD               	movlw	low STR_78
 12007  0029E8  0100               	movlb	0	; () banked
 12008  0029EA  6F8E               	movwf	printf@f& (0+255),b
 12009  0029EC  0EFF               	movlw	high STR_78
 12010  0029EE  0100               	movlb	0	; () banked
 12011  0029F0  6F8F               	movwf	(printf@f+1)& (0+255),b
 12012  0029F2  ECC2  F00B         	call	_printf	;wreg free
 12013                           
 12014                           ;Test.c: 127: lcdInst(0b11000000);;
 12015  0029F6  0EC0               	movlw	192
 12016  0029F8  EC86  F02D         	call	_lcdInst
 12017                           
 12018                           ;Test.c: 128: printf("PUSH TO START");
 12019  0029FC  0E15               	movlw	low STR_72
 12020  0029FE  0100               	movlb	0	; () banked
 12021  002A00  6F8E               	movwf	printf@f& (0+255),b
 12022  002A02  0EFF               	movlw	high STR_72
 12023  002A04  0100               	movlb	0	; () banked
 12024  002A06  6F8F               	movwf	(printf@f+1)& (0+255),b
 12025  002A08  ECC2  F00B         	call	_printf	;wreg free
 12026                           
 12027                           ;Test.c: 129: _delay((unsigned long)((100)*(32000000/4000.0)));
 12028  002A0C  0E05               	movlw	5
 12029  002A0E  0100               	movlb	0	; () banked
 12030  002A10  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 12031  002A12  0E0F               	movlw	15
 12032  002A14  0100               	movlb	0	; () banked
 12033  002A16  6FAB               	movwf	??_sensorTest& (0+255),b
 12034  002A18  0EF1               	movlw	241
 12035  002A1A                     u10257:
 12036  002A1A  2EE8               	decfsz	wreg,f,c
 12037  002A1C  D7FE               	bra	u10257
 12038  002A1E  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12039  002A20  D7FC               	bra	u10257
 12040  002A22  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 12041  002A24  D7FA               	bra	u10257
 12042  002A26                     l1258:
 12043  002A26  A281               	btfss	3969,1,c	;volatile
 12044  002A28  D7FE               	goto	l1258
 12045  002A2A                     l1261:
 12046  002A2A  B281               	btfsc	3969,1,c	;volatile
 12047  002A2C  D7FE               	goto	l1261
 12048                           
 12049                           ;Test.c: 132: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12050  002A2E  0E01               	movlw	1
 12051  002A30  EC86  F02D         	call	_lcdInst
 12052  002A34  0E68               	movlw	104
 12053  002A36  0100               	movlb	0	; () banked
 12054  002A38  6FAB               	movwf	??_sensorTest& (0+255),b
 12055  002A3A  0EE4               	movlw	228
 12056  002A3C                     u10267:
 12057  002A3C  2EE8               	decfsz	wreg,f,c
 12058  002A3E  D7FE               	bra	u10267
 12059  002A40  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12060  002A42  D7FC               	bra	u10267
 12061  002A44  F000               	nop	
 12062  002A46  0E80               	movlw	128
 12063  002A48  EC86  F02D         	call	_lcdInst
 12064                           
 12065                           ;Test.c: 137: printf("TST: IR SNSR");
 12066  002A4C  0E3F               	movlw	low STR_80
 12067  002A4E  0100               	movlb	0	; () banked
 12068  002A50  6F8E               	movwf	printf@f& (0+255),b
 12069  002A52  0EFF               	movlw	high STR_80
 12070  002A54  0100               	movlb	0	; () banked
 12071  002A56  6F8F               	movwf	(printf@f+1)& (0+255),b
 12072  002A58  ECC2  F00B         	call	_printf	;wreg free
 12073                           
 12074                           ;Test.c: 138: _delay((unsigned long)((100)*(32000000/4000.0)));
 12075  002A5C  0E05               	movlw	5
 12076  002A5E  0100               	movlb	0	; () banked
 12077  002A60  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 12078  002A62  0E0F               	movlw	15
 12079  002A64  0100               	movlb	0	; () banked
 12080  002A66  6FAB               	movwf	??_sensorTest& (0+255),b
 12081  002A68  0EF1               	movlw	241
 12082  002A6A                     u10277:
 12083  002A6A  2EE8               	decfsz	wreg,f,c
 12084  002A6C  D7FE               	bra	u10277
 12085  002A6E  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12086  002A70  D7FC               	bra	u10277
 12087  002A72  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 12088  002A74  D7FA               	bra	u10277
 12089                           
 12090                           ;Test.c: 139: LATCbits.LATC5 = 1;
 12091  002A76  8A8B               	bsf	3979,5,c	;volatile
 12092                           
 12093                           ;Test.c: 141: while(PORTBbits.RB1 == 0){
 12094  002A78  D05C               	goto	l8212
 12095  002A7A                     l8194:
 12096                           
 12097                           ;Test.c: 142: readADC(0);
 12098  002A7A  0E00               	movlw	0
 12099  002A7C  EC7C  F02C         	call	_readADC
 12100                           
 12101                           ;Test.c: 143: int res = ADRESH<<8 | ADRESL;
 12102  002A80  50C3               	movf	4035,w,c	;volatile
 12103  002A82  CFC4 F0AB          	movff	4036,??_sensorTest	;volatile
 12104  002A86  0100               	movlb	0	; () banked
 12105  002A88  6BAC               	clrf	(??_sensorTest+1)& (0+255),b
 12106  002A8A  C0AB  F0AC         	movff	??_sensorTest,??_sensorTest+1
 12107  002A8E  0100               	movlb	0	; () banked
 12108  002A90  6BAB               	clrf	??_sensorTest& (0+255),b
 12109  002A92  0100               	movlb	0	; () banked
 12110  002A94  11AB               	iorwf	??_sensorTest& (0+255),w,b
 12111  002A96  0100               	movlb	0	; () banked
 12112  002A98  6FAD               	movwf	sensorTest@res& (0+255),b
 12113  002A9A  0100               	movlb	0	; () banked
 12114  002A9C  51AC               	movf	(??_sensorTest+1)& (0+255),w,b
 12115  002A9E  0100               	movlb	0	; () banked
 12116  002AA0  6FAE               	movwf	(sensorTest@res+1)& (0+255),b
 12117                           
 12118                           ; BSR set to: 0
 12119                           ;Test.c: 144: IR_signal = (res > 800) ? 1 : 0;
 12120  002AA2  0100               	movlb	0	; () banked
 12121  002AA4  BFAE               	btfsc	(sensorTest@res+1)& (0+255),7,b
 12122  002AA6  D00A               	goto	u6970
 12123  002AA8  0E21               	movlw	33
 12124  002AAA  0100               	movlb	0	; () banked
 12125  002AAC  5DAD               	subwf	sensorTest@res& (0+255),w,b
 12126  002AAE  0E03               	movlw	3
 12127  002AB0  0100               	movlb	0	; () banked
 12128  002AB2  59AE               	subwfb	(sensorTest@res+1)& (0+255),w,b
 12129  002AB4  A0D8               	btfss	status,0,c
 12130  002AB6  D002               	goto	u6970
 12131  002AB8  0E01               	movlw	1
 12132  002ABA  D001               	goto	u6980
 12133  002ABC                     u6970:
 12134  002ABC  0E00               	movlw	0
 12135  002ABE                     u6980:
 12136  002ABE  0100               	movlb	0	; () banked
 12137  002AC0  6FE0               	movwf	_IR_signal& (0+255),b
 12138  002AC2  6BE1               	clrf	(_IR_signal+1)& (0+255),b
 12139                           
 12140                           ;Test.c: 146: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12141  002AC4  0E01               	movlw	1
 12142  002AC6  EC86  F02D         	call	_lcdInst
 12143  002ACA  0E68               	movlw	104
 12144  002ACC  0100               	movlb	0	; () banked
 12145  002ACE  6FAB               	movwf	??_sensorTest& (0+255),b
 12146  002AD0  0EE4               	movlw	228
 12147  002AD2                     u10287:
 12148  002AD2  2EE8               	decfsz	wreg,f,c
 12149  002AD4  D7FE               	bra	u10287
 12150  002AD6  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12151  002AD8  D7FC               	bra	u10287
 12152  002ADA  F000               	nop	
 12153  002ADC  0E80               	movlw	128
 12154  002ADE  EC86  F02D         	call	_lcdInst
 12155                           
 12156                           ;Test.c: 147: printf("IR_signal: %d ", IR_signal);
 12157  002AE2  0E64               	movlw	low STR_81
 12158  002AE4  0100               	movlb	0	; () banked
 12159  002AE6  6F8E               	movwf	printf@f& (0+255),b
 12160  002AE8  0EFE               	movlw	high STR_81
 12161  002AEA  0100               	movlb	0	; () banked
 12162  002AEC  6F8F               	movwf	(printf@f+1)& (0+255),b
 12163  002AEE  C0E0  F090         	movff	_IR_signal,?_printf+2
 12164  002AF2  C0E1  F091         	movff	_IR_signal+1,?_printf+3
 12165  002AF6  ECC2  F00B         	call	_printf	;wreg free
 12166                           
 12167                           ;Test.c: 148: lcdInst(0b11000000);;
 12168  002AFA  0EC0               	movlw	192
 12169  002AFC  EC86  F02D         	call	_lcdInst
 12170                           
 12171                           ;Test.c: 149: printf("%d", res);
 12172  002B00  0E11               	movlw	low (STR_27+14)
 12173  002B02  0100               	movlb	0	; () banked
 12174  002B04  6F8E               	movwf	printf@f& (0+255),b
 12175  002B06  0EFE               	movlw	high (STR_27+14)
 12176  002B08  0100               	movlb	0	; () banked
 12177  002B0A  6F8F               	movwf	(printf@f+1)& (0+255),b
 12178  002B0C  C0AD  F090         	movff	sensorTest@res,?_printf+2
 12179  002B10  C0AE  F091         	movff	sensorTest@res+1,?_printf+3
 12180  002B14  ECC2  F00B         	call	_printf	;wreg free
 12181                           
 12182                           ;Test.c: 150: _delay((unsigned long)((100)*(32000000/4000.0)));
 12183  002B18  0E05               	movlw	5
 12184  002B1A  0100               	movlb	0	; () banked
 12185  002B1C  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 12186  002B1E  0E0F               	movlw	15
 12187  002B20  0100               	movlb	0	; () banked
 12188  002B22  6FAB               	movwf	??_sensorTest& (0+255),b
 12189  002B24  0EF1               	movlw	241
 12190  002B26                     u10297:
 12191  002B26  2EE8               	decfsz	wreg,f,c
 12192  002B28  D7FE               	bra	u10297
 12193  002B2A  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12194  002B2C  D7FC               	bra	u10297
 12195  002B2E  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 12196  002B30  D7FA               	bra	u10297
 12197  002B32                     l8212:
 12198  002B32  A281               	btfss	3969,1,c	;volatile
 12199  002B34  D7A2               	goto	l8194
 12200                           
 12201                           ;Test.c: 151: }
 12202                           ;Test.c: 152: LATCbits.LATC5 = 0;
 12203  002B36  9A8B               	bcf	3979,5,c	;volatile
 12204                           
 12205                           ;Test.c: 160: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12206  002B38  0E01               	movlw	1
 12207  002B3A  EC86  F02D         	call	_lcdInst
 12208  002B3E  0E68               	movlw	104
 12209  002B40  0100               	movlb	0	; () banked
 12210  002B42  6FAB               	movwf	??_sensorTest& (0+255),b
 12211  002B44  0EE4               	movlw	228
 12212  002B46                     u10307:
 12213  002B46  2EE8               	decfsz	wreg,f,c
 12214  002B48  D7FE               	bra	u10307
 12215  002B4A  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12216  002B4C  D7FC               	bra	u10307
 12217  002B4E  F000               	nop	
 12218  002B50  0E80               	movlw	128
 12219  002B52  EC86  F02D         	call	_lcdInst
 12220                           
 12221                           ;Test.c: 161: printf("TST: MAGNETISM");
 12222  002B56  0E91               	movlw	low STR_83
 12223  002B58  0100               	movlb	0	; () banked
 12224  002B5A  6F8E               	movwf	printf@f& (0+255),b
 12225  002B5C  0EFE               	movlw	high STR_83
 12226  002B5E  0100               	movlb	0	; () banked
 12227  002B60  6F8F               	movwf	(printf@f+1)& (0+255),b
 12228  002B62  ECC2  F00B         	call	_printf	;wreg free
 12229                           
 12230                           ;Test.c: 162: _delay((unsigned long)((100)*(32000000/4000.0)));
 12231  002B66  0E05               	movlw	5
 12232  002B68  0100               	movlb	0	; () banked
 12233  002B6A  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 12234  002B6C  0E0F               	movlw	15
 12235  002B6E  0100               	movlb	0	; () banked
 12236  002B70  6FAB               	movwf	??_sensorTest& (0+255),b
 12237  002B72  0EF1               	movlw	241
 12238  002B74                     u10317:
 12239  002B74  2EE8               	decfsz	wreg,f,c
 12240  002B76  D7FE               	bra	u10317
 12241  002B78  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12242  002B7A  D7FC               	bra	u10317
 12243  002B7C  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 12244  002B7E  D7FA               	bra	u10317
 12245                           
 12246                           ;Test.c: 163: while(PORTBbits.RB1 == 0){
 12247  002B80  D021               	goto	l8230
 12248  002B82                     l8224:
 12249                           
 12250                           ;Test.c: 164: readMAG();
 12251  002B82  ECFF  F029         	call	_readMAG	;wreg free
 12252                           
 12253                           ;Test.c: 165: lcdInst(0b10000000);;
 12254  002B86  0E80               	movlw	128
 12255  002B88  EC86  F02D         	call	_lcdInst
 12256                           
 12257                           ;Test.c: 166: lcdInst(0b11000000);;
 12258  002B8C  0EC0               	movlw	192
 12259  002B8E  EC86  F02D         	call	_lcdInst
 12260                           
 12261                           ;Test.c: 167: printf("MAG_signal: %d ", MAG_signal);
 12262  002B92  0E25               	movlw	low STR_84
 12263  002B94  0100               	movlb	0	; () banked
 12264  002B96  6F8E               	movwf	printf@f& (0+255),b
 12265  002B98  0EFE               	movlw	high STR_84
 12266  002B9A  0100               	movlb	0	; () banked
 12267  002B9C  6F8F               	movwf	(printf@f+1)& (0+255),b
 12268  002B9E  C0E2  F090         	movff	_MAG_signal,?_printf+2
 12269  002BA2  C0E3  F091         	movff	_MAG_signal+1,?_printf+3
 12270  002BA6  ECC2  F00B         	call	_printf	;wreg free
 12271                           
 12272                           ;Test.c: 168: _delay((unsigned long)((100)*(32000000/4000.0)));
 12273  002BAA  0E05               	movlw	5
 12274  002BAC  0100               	movlb	0	; () banked
 12275  002BAE  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 12276  002BB0  0E0F               	movlw	15
 12277  002BB2  0100               	movlb	0	; () banked
 12278  002BB4  6FAB               	movwf	??_sensorTest& (0+255),b
 12279  002BB6  0EF1               	movlw	241
 12280  002BB8                     u10327:
 12281  002BB8  2EE8               	decfsz	wreg,f,c
 12282  002BBA  D7FE               	bra	u10327
 12283  002BBC  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12284  002BBE  D7FC               	bra	u10327
 12285  002BC0  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 12286  002BC2  D7FA               	bra	u10327
 12287  002BC4                     l8230:
 12288  002BC4  A281               	btfss	3969,1,c	;volatile
 12289  002BC6  D7DD               	goto	l8224
 12290                           
 12291                           ;Test.c: 169: }
 12292                           ;Test.c: 174: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12293  002BC8  0E01               	movlw	1
 12294  002BCA  EC86  F02D         	call	_lcdInst
 12295  002BCE  0E68               	movlw	104
 12296  002BD0  0100               	movlb	0	; () banked
 12297  002BD2  6FAB               	movwf	??_sensorTest& (0+255),b
 12298  002BD4  0EE4               	movlw	228
 12299  002BD6                     u10337:
 12300  002BD6  2EE8               	decfsz	wreg,f,c
 12301  002BD8  D7FE               	bra	u10337
 12302  002BDA  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12303  002BDC  D7FC               	bra	u10337
 12304  002BDE  F000               	nop	
 12305  002BE0  0E80               	movlw	128
 12306  002BE2  EC86  F02D         	call	_lcdInst
 12307                           
 12308                           ;Test.c: 175: printf("TST: COND");
 12309  002BE6  0E86               	movlw	low STR_85
 12310  002BE8  0100               	movlb	0	; () banked
 12311  002BEA  6F8E               	movwf	printf@f& (0+255),b
 12312  002BEC  0EFF               	movlw	high STR_85
 12313  002BEE  0100               	movlb	0	; () banked
 12314  002BF0  6F8F               	movwf	(printf@f+1)& (0+255),b
 12315  002BF2  ECC2  F00B         	call	_printf	;wreg free
 12316                           
 12317                           ;Test.c: 176: _delay((unsigned long)((100)*(32000000/4000.0)));
 12318  002BF6  0E05               	movlw	5
 12319  002BF8  0100               	movlb	0	; () banked
 12320  002BFA  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 12321  002BFC  0E0F               	movlw	15
 12322  002BFE  0100               	movlb	0	; () banked
 12323  002C00  6FAB               	movwf	??_sensorTest& (0+255),b
 12324  002C02  0EF1               	movlw	241
 12325  002C04                     u10347:
 12326  002C04  2EE8               	decfsz	wreg,f,c
 12327  002C06  D7FE               	bra	u10347
 12328  002C08  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12329  002C0A  D7FC               	bra	u10347
 12330  002C0C  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 12331  002C0E  D7FA               	bra	u10347
 12332  002C10                     l8242:
 12333                           
 12334                           ;Test.c: 178: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12335  002C10  0E01               	movlw	1
 12336  002C12  EC86  F02D         	call	_lcdInst
 12337  002C16  0E68               	movlw	104
 12338  002C18  0100               	movlb	0	; () banked
 12339  002C1A  6FAB               	movwf	??_sensorTest& (0+255),b
 12340  002C1C  0EE4               	movlw	228
 12341  002C1E                     u10357:
 12342  002C1E  2EE8               	decfsz	wreg,f,c
 12343  002C20  D7FE               	bra	u10357
 12344  002C22  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 12345  002C24  D7FC               	bra	u10357
 12346  002C26  F000               	nop	
 12347  002C28  0E80               	movlw	128
 12348  002C2A  EC86  F02D         	call	_lcdInst
 12349                           
 12350                           ;Test.c: 179: printf("TST: COND");
 12351  002C2E  0E86               	movlw	low STR_85
 12352  002C30  0100               	movlb	0	; () banked
 12353  002C32  6F8E               	movwf	printf@f& (0+255),b
 12354  002C34  0EFF               	movlw	high STR_85
 12355  002C36  0100               	movlb	0	; () banked
 12356  002C38  6F8F               	movwf	(printf@f+1)& (0+255),b
 12357  002C3A  ECC2  F00B         	call	_printf	;wreg free
 12358                           
 12359                           ;Test.c: 180: while(PORTBbits.RB1 == 0){
 12360  002C3E  D01B               	goto	l8254
 12361  002C40                     l8250:
 12362                           
 12363                           ;Test.c: 184: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12364  002C40  0E80               	movlw	128
 12365  002C42  EC86  F02D         	call	_lcdInst
 12366  002C46  0EC0               	movlw	192
 12367  002C48  EC86  F02D         	call	_lcdInst
 12368                           
 12369                           ;Test.c: 185: printf("COND: %d", PORTAbits.RA2);
 12370  002C4C  0EA4               	movlw	low STR_87
 12371  002C4E  0100               	movlb	0	; () banked
 12372  002C50  6F8E               	movwf	printf@f& (0+255),b
 12373  002C52  0EFF               	movlw	high STR_87
 12374  002C54  0100               	movlb	0	; () banked
 12375  002C56  6F8F               	movwf	(printf@f+1)& (0+255),b
 12376  002C58  A480               	btfss	3968,2,c	;volatile
 12377  002C5A  D004               	goto	u7010
 12378  002C5C  0100               	movlb	0	; () banked
 12379  002C5E  6BAB               	clrf	??_sensorTest& (0+255),b
 12380  002C60  2BAB               	incf	??_sensorTest& (0+255),f,b
 12381  002C62  D002               	goto	u7018
 12382  002C64                     u7010:
 12383  002C64  0100               	movlb	0	; () banked
 12384  002C66  6BAB               	clrf	??_sensorTest& (0+255),b
 12385  002C68                     u7018:
 12386  002C68  0100               	movlb	0	; () banked
 12387  002C6A  51AB               	movf	??_sensorTest& (0+255),w,b
 12388  002C6C  0100               	movlb	0	; () banked
 12389  002C6E  6F90               	movwf	(?_printf+2)& (0+255),b
 12390  002C70  6B91               	clrf	(?_printf+3)& (0+255),b
 12391  002C72  ECC2  F00B         	call	_printf	;wreg free
 12392  002C76                     l8254:
 12393  002C76  A281               	btfss	3969,1,c	;volatile
 12394  002C78  D7E3               	goto	l8250
 12395                           
 12396                           ;Test.c: 186: }
 12397                           ;Test.c: 187: if(PORTB >> 4 == 0b1111){
 12398  002C7A  3881               	swapf	3969,w,c	;volatile
 12399  002C7C  0B0F               	andlw	15
 12400  002C7E  0A0F               	xorlw	15
 12401  002C80  B4D8               	btfsc	status,2,c
 12402  002C82  0012               	return	
 12403                           
 12404                           ;Test.c: 190: else{
 12405                           ;Test.c: 191: LATAbits.LATA3 = 1;
 12406                           
 12407                           ;Test.c: 189: }
 12408                           
 12409                           ;Test.c: 188: break;
 12410  002C84  8689               	bsf	3977,3,c	;volatile
 12411                           
 12412                           ;Test.c: 192: while(PORTBbits.RB1 == 1){
 12413  002C86  D01B               	goto	l8266
 12414  002C88                     l8262:
 12415                           
 12416                           ;Test.c: 194: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12417  002C88  0E80               	movlw	128
 12418  002C8A  EC86  F02D         	call	_lcdInst
 12419  002C8E  0EC0               	movlw	192
 12420  002C90  EC86  F02D         	call	_lcdInst
 12421                           
 12422                           ;Test.c: 195: printf("COND: %d", PORTAbits.RA2);
 12423  002C94  0EA4               	movlw	low STR_87
 12424  002C96  0100               	movlb	0	; () banked
 12425  002C98  6F8E               	movwf	printf@f& (0+255),b
 12426  002C9A  0EFF               	movlw	high STR_87
 12427  002C9C  0100               	movlb	0	; () banked
 12428  002C9E  6F8F               	movwf	(printf@f+1)& (0+255),b
 12429  002CA0  A480               	btfss	3968,2,c	;volatile
 12430  002CA2  D004               	goto	u7040
 12431  002CA4  0100               	movlb	0	; () banked
 12432  002CA6  6BAB               	clrf	??_sensorTest& (0+255),b
 12433  002CA8  2BAB               	incf	??_sensorTest& (0+255),f,b
 12434  002CAA  D002               	goto	u7048
 12435  002CAC                     u7040:
 12436  002CAC  0100               	movlb	0	; () banked
 12437  002CAE  6BAB               	clrf	??_sensorTest& (0+255),b
 12438  002CB0                     u7048:
 12439  002CB0  0100               	movlb	0	; () banked
 12440  002CB2  51AB               	movf	??_sensorTest& (0+255),w,b
 12441  002CB4  0100               	movlb	0	; () banked
 12442  002CB6  6F90               	movwf	(?_printf+2)& (0+255),b
 12443  002CB8  6B91               	clrf	(?_printf+3)& (0+255),b
 12444  002CBA  ECC2  F00B         	call	_printf	;wreg free
 12445  002CBE                     l8266:
 12446  002CBE  B281               	btfsc	3969,1,c	;volatile
 12447  002CC0  D7E3               	goto	l8262
 12448                           
 12449                           ;Test.c: 196: }
 12450                           ;Test.c: 197: LATAbits.LATA3 = !1;
 12451  002CC2  9689               	bcf	3977,3,c	;volatile
 12452  002CC4  D7A5               	goto	l8242
 12453  002CC6                     __end_of_sensorTest:
 12454                           	opt stack 0
 12455                           tblptru	equ	0xFF8
 12456                           tblptrh	equ	0xFF7
 12457                           tblptrl	equ	0xFF6
 12458                           tablat	equ	0xFF5
 12459                           prodh	equ	0xFF4
 12460                           prodl	equ	0xFF3
 12461                           intcon	equ	0xFF2
 12462                           intcon2	equ	0xFF1
 12463                           intcon3	equ	0xFF0
 12464                           postinc0	equ	0xFEE
 12465                           wreg	equ	0xFE8
 12466                           postdec1	equ	0xFE5
 12467                           fsr1l	equ	0xFE1
 12468                           indf2	equ	0xFDF
 12469                           postinc2	equ	0xFDE
 12470                           postdec2	equ	0xFDD
 12471                           fsr2h	equ	0xFDA
 12472                           fsr2l	equ	0xFD9
 12473                           status	equ	0xFD8
 12474                           
 12475 ;; *************** function _readMAG *****************
 12476 ;; Defined at:
 12477 ;;		line 29 in file "ADCFunctionality.c"
 12478 ;; Parameters:    Size  Location     Type
 12479 ;;		None
 12480 ;; Auto vars:     Size  Location     Type
 12481 ;;  res             2    4[BANK0 ] int 
 12482 ;; Return value:  Size  Location     Type
 12483 ;;                  1    wreg      void 
 12484 ;; Registers used:
 12485 ;;		wreg, status,2, status,0, cstack
 12486 ;; Tracked objects:
 12487 ;;		On entry : 0/0
 12488 ;;		On exit  : 0/0
 12489 ;;		Unchanged: 0/0
 12490 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12491 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12492 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12493 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12494 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12495 ;;Total ram usage:        4 bytes
 12496 ;; Hardware stack levels used:    1
 12497 ;; Hardware stack levels required when called:    8
 12498 ;; This function calls:
 12499 ;;		_readADC
 12500 ;; This function is called by:
 12501 ;;		_getMAG
 12502 ;;		_sensorTest
 12503 ;; This function uses a non-reentrant model
 12504 ;;
 12505                           
 12506                           	psect	text42
 12507  0053FE                     __ptext42:
 12508                           	opt stack 0
 12509  0053FE                     _readMAG:
 12510                           	opt stack 19
 12511                           
 12512                           ;ADCFunctionality.c: 30: readADC(1);
 12513                           
 12514                           ;incstack = 0
 12515  0053FE  0E01               	movlw	1
 12516  005400  EC7C  F02C         	call	_readADC
 12517                           
 12518                           ;ADCFunctionality.c: 31: int res = ADRESH<<8 | ADRESL;
 12519  005404  50C3               	movf	4035,w,c	;volatile
 12520  005406  CFC4 F082          	movff	4036,??_readMAG	;volatile
 12521  00540A  0100               	movlb	0	; () banked
 12522  00540C  6B83               	clrf	(??_readMAG+1)& (0+255),b
 12523  00540E  C082  F083         	movff	??_readMAG,??_readMAG+1
 12524  005412  0100               	movlb	0	; () banked
 12525  005414  6B82               	clrf	??_readMAG& (0+255),b
 12526  005416  0100               	movlb	0	; () banked
 12527  005418  1182               	iorwf	??_readMAG& (0+255),w,b
 12528  00541A  0100               	movlb	0	; () banked
 12529  00541C  6F84               	movwf	readMAG@res& (0+255),b
 12530  00541E  0100               	movlb	0	; () banked
 12531  005420  5183               	movf	(??_readMAG+1)& (0+255),w,b
 12532  005422  0100               	movlb	0	; () banked
 12533  005424  6F85               	movwf	(readMAG@res+1)& (0+255),b
 12534                           
 12535                           ; BSR set to: 0
 12536                           ;ADCFunctionality.c: 32: MAG_signal = (res < 150) ? 1 : 0;
 12537  005426  0100               	movlb	0	; () banked
 12538  005428  BF85               	btfsc	(readMAG@res+1)& (0+255),7,b
 12539  00542A  D008               	goto	u5071
 12540  00542C  0100               	movlb	0	; () banked
 12541  00542E  5185               	movf	(readMAG@res+1)& (0+255),w,b
 12542  005430  E107               	bnz	u5070
 12543  005432  0E96               	movlw	150
 12544  005434  0100               	movlb	0	; () banked
 12545  005436  5D84               	subwf	readMAG@res& (0+255),w,b
 12546  005438  B0D8               	btfsc	status,0,c
 12547  00543A  D002               	goto	u5070
 12548  00543C                     u5071:
 12549  00543C  0E01               	movlw	1
 12550  00543E  D001               	goto	u5080
 12551  005440                     u5070:
 12552  005440  0E00               	movlw	0
 12553  005442                     u5080:
 12554  005442  0100               	movlb	0	; () banked
 12555  005444  6FE2               	movwf	_MAG_signal& (0+255),b
 12556  005446  6BE3               	clrf	(_MAG_signal+1)& (0+255),b
 12557                           
 12558                           ; BSR set to: 0
 12559  005448  0012               	return		;funcret
 12560  00544A                     __end_of_readMAG:
 12561                           	opt stack 0
 12562                           tblptru	equ	0xFF8
 12563                           tblptrh	equ	0xFF7
 12564                           tblptrl	equ	0xFF6
 12565                           tablat	equ	0xFF5
 12566                           prodh	equ	0xFF4
 12567                           prodl	equ	0xFF3
 12568                           intcon	equ	0xFF2
 12569                           intcon2	equ	0xFF1
 12570                           intcon3	equ	0xFF0
 12571                           postinc0	equ	0xFEE
 12572                           wreg	equ	0xFE8
 12573                           postdec1	equ	0xFE5
 12574                           fsr1l	equ	0xFE1
 12575                           indf2	equ	0xFDF
 12576                           postinc2	equ	0xFDE
 12577                           postdec2	equ	0xFDD
 12578                           fsr2h	equ	0xFDA
 12579                           fsr2l	equ	0xFD9
 12580                           status	equ	0xFD8
 12581                           
 12582 ;; *************** function _arm *****************
 12583 ;; Defined at:
 12584 ;;		line 639 in file "Test.c"
 12585 ;; Parameters:    Size  Location     Type
 12586 ;;		None
 12587 ;; Auto vars:     Size  Location     Type
 12588 ;;  on              2   44[BANK0 ] int 
 12589 ;; Return value:  Size  Location     Type
 12590 ;;                  1    wreg      void 
 12591 ;; Registers used:
 12592 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12593 ;; Tracked objects:
 12594 ;;		On entry : 0/0
 12595 ;;		On exit  : 0/0
 12596 ;;		Unchanged: 0/0
 12597 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12598 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12599 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12600 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12601 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12602 ;;Total ram usage:        3 bytes
 12603 ;; Hardware stack levels used:    1
 12604 ;; Hardware stack levels required when called:   10
 12605 ;; This function calls:
 12606 ;;		_lcdInst
 12607 ;;		_printf
 12608 ;;		_stopSignals
 12609 ;; This function is called by:
 12610 ;;		_Test
 12611 ;; This function uses a non-reentrant model
 12612 ;;
 12613                           
 12614                           	psect	text43
 12615  004310                     __ptext43:
 12616                           	opt stack 0
 12617  004310                     _arm:
 12618                           	opt stack 19
 12619                           
 12620                           ;Test.c: 640: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12621                           
 12622                           ; BSR set to: 0
 12623                           ;incstack = 0
 12624  004310  0E01               	movlw	1
 12625  004312  EC86  F02D         	call	_lcdInst
 12626  004316  0E68               	movlw	104
 12627  004318  0100               	movlb	0	; () banked
 12628  00431A  6FAB               	movwf	??_arm& (0+255),b
 12629  00431C  0EE4               	movlw	228
 12630  00431E                     u10367:
 12631  00431E  2EE8               	decfsz	wreg,f,c
 12632  004320  D7FE               	bra	u10367
 12633  004322  2FAB               	decfsz	??_arm& (0+255),f,b
 12634  004324  D7FC               	bra	u10367
 12635  004326  F000               	nop	
 12636  004328  0E80               	movlw	128
 12637  00432A  EC86  F02D         	call	_lcdInst
 12638                           
 12639                           ;Test.c: 641: printf("D WILL RETURN   ");
 12640  00432E  0EE3               	movlw	low STR_119
 12641  004330  0100               	movlb	0	; () banked
 12642  004332  6F8E               	movwf	printf@f& (0+255),b
 12643  004334  0EFB               	movlw	high STR_119
 12644  004336  0100               	movlb	0	; () banked
 12645  004338  6F8F               	movwf	(printf@f+1)& (0+255),b
 12646  00433A  ECC2  F00B         	call	_printf	;wreg free
 12647                           
 12648                           ;Test.c: 642: lcdInst(0b11000000);;
 12649  00433E  0EC0               	movlw	192
 12650  004340  EC86  F02D         	call	_lcdInst
 12651                           
 12652                           ;Test.c: 643: printf("ELSE TOGGLES ARM");
 12653  004344  0E9E               	movlw	low STR_128
 12654  004346  0100               	movlb	0	; () banked
 12655  004348  6F8E               	movwf	printf@f& (0+255),b
 12656  00434A  0EFC               	movlw	high STR_128
 12657  00434C  0100               	movlb	0	; () banked
 12658  00434E  6F8F               	movwf	(printf@f+1)& (0+255),b
 12659  004350  ECC2  F00B         	call	_printf	;wreg free
 12660                           
 12661                           ;Test.c: 645: (INTCONbits.GIE = 1);
 12662  004354  8EF2               	bsf	intcon,7,c	;volatile
 12663                           
 12664                           ;Test.c: 646: machine_state = Sorting_state;
 12665  004356  0E01               	movlw	1
 12666  004358  0100               	movlb	0	; () banked
 12667  00435A  6FFC               	movwf	_machine_state& (0+255),b
 12668                           
 12669                           ; BSR set to: 0
 12670                           ;Test.c: 647: f_arm_position = 2;
 12671  00435C  0E00               	movlw	0
 12672  00435E  0100               	movlb	0	; () banked
 12673  004360  6FE9               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
 12674  004362  0E02               	movlw	2
 12675  004364  6FE8               	movwf	_f_arm_position& (0+255),b	;volatile
 12676                           
 12677                           ; BSR set to: 0
 12678                           ;Test.c: 648: timer2_counter = 0;
 12679  004366  0E00               	movlw	0
 12680  004368  6E74               	movwf	_timer2_counter+1,c	;volatile
 12681  00436A  0E00               	movlw	0
 12682  00436C  6E73               	movwf	_timer2_counter,c	;volatile
 12683                           
 12684                           ; BSR set to: 0
 12685                           ;Test.c: 649: LATBbits.LATB3 = 1;
 12686  00436E  868A               	bsf	3978,3,c	;volatile
 12687                           
 12688                           ; BSR set to: 0
 12689                           ;Test.c: 650: TMR2ON = 1;
 12690  004370  84CA               	bsf	4042,2,c	;volatile
 12691                           
 12692                           ; BSR set to: 0
 12693                           ;Test.c: 651: was_low_2 = 0;
 12694  004372  0E00               	movlw	0
 12695  004374  6E7A               	movwf	_was_low_2+1,c	;volatile
 12696  004376  0E00               	movlw	0
 12697  004378  6E79               	movwf	_was_low_2,c	;volatile
 12698                           
 12699                           ; BSR set to: 0
 12700                           ;Test.c: 653: int on = 0;
 12701  00437A  0E00               	movlw	0
 12702  00437C  0100               	movlb	0	; () banked
 12703  00437E  6FAD               	movwf	(arm@on+1)& (0+255),b
 12704  004380  0E00               	movlw	0
 12705  004382  6FAC               	movwf	arm@on& (0+255),b
 12706  004384                     l8720:
 12707                           
 12708                           ;Test.c: 655: if(on){
 12709  004384  0100               	movlb	0	; () banked
 12710  004386  51AC               	movf	arm@on& (0+255),w,b
 12711  004388  0100               	movlb	0	; () banked
 12712  00438A  11AD               	iorwf	(arm@on+1)& (0+255),w,b
 12713  00438C  B4D8               	btfsc	status,2,c
 12714  00438E  D01C               	goto	l8732
 12715                           
 12716                           ; BSR set to: 0
 12717                           ;Test.c: 656: on = !on;
 12718  004390  0100               	movlb	0	; () banked
 12719  004392  51AC               	movf	arm@on& (0+255),w,b
 12720  004394  0100               	movlb	0	; () banked
 12721  004396  11AD               	iorwf	(arm@on+1)& (0+255),w,b
 12722  004398  A4D8               	btfss	status,2,c
 12723  00439A  D002               	goto	u7630
 12724  00439C  0E01               	movlw	1
 12725  00439E  D001               	goto	u7640
 12726  0043A0                     u7630:
 12727  0043A0  0E00               	movlw	0
 12728  0043A2                     u7640:
 12729  0043A2  0100               	movlb	0	; () banked
 12730  0043A4  6FAC               	movwf	arm@on& (0+255),b
 12731  0043A6  6BAD               	clrf	(arm@on+1)& (0+255),b
 12732                           
 12733                           ;Test.c: 657: while(PORTBbits.RB1 == 0){
 12734  0043A8  D005               	goto	l8726
 12735  0043AA                     l8724:
 12736                           
 12737                           ; BSR set to: 0
 12738                           ;Test.c: 658: f_arm_position = 0;
 12739  0043AA  0E00               	movlw	0
 12740  0043AC  0100               	movlb	0	; () banked
 12741  0043AE  6FE9               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
 12742  0043B0  0E00               	movlw	0
 12743  0043B2  6FE8               	movwf	_f_arm_position& (0+255),b	;volatile
 12744  0043B4                     l8726:
 12745                           
 12746                           ; BSR set to: 0
 12747  0043B4  A281               	btfss	3969,1,c	;volatile
 12748  0043B6  D7F9               	goto	l8724
 12749                           
 12750                           ; BSR set to: 0
 12751                           ;Test.c: 659: }
 12752                           ;Test.c: 660: if(PORTB >> 4 == 0b1111){
 12753                           
 12754                           ; BSR set to: 0
 12755  0043B8  3881               	swapf	3969,w,c	;volatile
 12756  0043BA  0B0F               	andlw	15
 12757  0043BC  0A0F               	xorlw	15
 12758  0043BE  B4D8               	btfsc	status,2,c
 12759  0043C0  D01F               	goto	l1453
 12760  0043C2                     l1454:
 12761  0043C2  A281               	btfss	3969,1,c	;volatile
 12762  0043C4  D7DF               	goto	l8720
 12763  0043C6  D7FD               	goto	l1454
 12764  0043C8                     l8732:
 12765                           
 12766                           ;Test.c: 665: else{
 12767                           ;Test.c: 666: on = !on;
 12768  0043C8  0100               	movlb	0	; () banked
 12769  0043CA  51AC               	movf	arm@on& (0+255),w,b
 12770  0043CC  0100               	movlb	0	; () banked
 12771  0043CE  11AD               	iorwf	(arm@on+1)& (0+255),w,b
 12772  0043D0  A4D8               	btfss	status,2,c
 12773  0043D2  D002               	goto	u7680
 12774  0043D4  0E01               	movlw	1
 12775  0043D6  D001               	goto	u7690
 12776  0043D8                     u7680:
 12777  0043D8  0E00               	movlw	0
 12778  0043DA                     u7690:
 12779  0043DA  0100               	movlb	0	; () banked
 12780  0043DC  6FAC               	movwf	arm@on& (0+255),b
 12781  0043DE  6BAD               	clrf	(arm@on+1)& (0+255),b
 12782                           
 12783                           ;Test.c: 667: while(PORTBbits.RB1 == 0){
 12784  0043E0  D005               	goto	l8736
 12785  0043E2                     l8734:
 12786                           
 12787                           ; BSR set to: 0
 12788                           ;Test.c: 668: f_arm_position = 1;
 12789  0043E2  0E00               	movlw	0
 12790  0043E4  0100               	movlb	0	; () banked
 12791  0043E6  6FE9               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
 12792  0043E8  0E01               	movlw	1
 12793  0043EA  6FE8               	movwf	_f_arm_position& (0+255),b	;volatile
 12794  0043EC                     l8736:
 12795                           
 12796                           ; BSR set to: 0
 12797  0043EC  A281               	btfss	3969,1,c	;volatile
 12798  0043EE  D7F9               	goto	l8734
 12799                           
 12800                           ; BSR set to: 0
 12801                           ;Test.c: 669: }
 12802                           ;Test.c: 670: if(PORTB >> 4 == 0b1111){
 12803                           
 12804                           ; BSR set to: 0
 12805  0043F0  3881               	swapf	3969,w,c	;volatile
 12806  0043F2  0B0F               	andlw	15
 12807  0043F4  0A0F               	xorlw	15
 12808  0043F6  B4D8               	btfsc	status,2,c
 12809  0043F8  D003               	goto	l1453
 12810  0043FA                     l1462:
 12811  0043FA  A281               	btfss	3969,1,c	;volatile
 12812  0043FC  D7C3               	goto	l8720
 12813  0043FE  D7FD               	goto	l1462
 12814  004400                     l1453:
 12815                           
 12816                           ; BSR set to: 0
 12817                           ;Test.c: 674: }
 12818                           ;Test.c: 675: }
 12819                           ;Test.c: 677: (INTCONbits.GIE = 0);
 12820  004400  9EF2               	bcf	intcon,7,c	;volatile
 12821                           
 12822                           ; BSR set to: 0
 12823                           ;Test.c: 678: stopSignals();
 12824  004402  EC38  F02D         	call	_stopSignals	;wreg free
 12825                           
 12826                           ;Test.c: 679: machine_state = Testing_state;
 12827  004406  0E03               	movlw	3
 12828  004408  0100               	movlb	0	; () banked
 12829  00440A  6FFC               	movwf	_machine_state& (0+255),b
 12830                           
 12831                           ; BSR set to: 0
 12832  00440C  0012               	return		;funcret
 12833  00440E                     __end_of_arm:
 12834                           	opt stack 0
 12835                           tblptru	equ	0xFF8
 12836                           tblptrh	equ	0xFF7
 12837                           tblptrl	equ	0xFF6
 12838                           tablat	equ	0xFF5
 12839                           prodh	equ	0xFF4
 12840                           prodl	equ	0xFF3
 12841                           intcon	equ	0xFF2
 12842                           intcon2	equ	0xFF1
 12843                           intcon3	equ	0xFF0
 12844                           postinc0	equ	0xFEE
 12845                           wreg	equ	0xFE8
 12846                           postdec1	equ	0xFE5
 12847                           fsr1l	equ	0xFE1
 12848                           indf2	equ	0xFDF
 12849                           postinc2	equ	0xFDE
 12850                           postdec2	equ	0xFDD
 12851                           fsr2h	equ	0xFDA
 12852                           fsr2l	equ	0xFD9
 12853                           status	equ	0xFD8
 12854                           
 12855 ;; *************** function _algorithmTest *****************
 12856 ;; Defined at:
 12857 ;;		line 79 in file "Test.c"
 12858 ;; Parameters:    Size  Location     Type
 12859 ;;		None
 12860 ;; Auto vars:     Size  Location     Type
 12861 ;;		None
 12862 ;; Return value:  Size  Location     Type
 12863 ;;                  1    wreg      void 
 12864 ;; Registers used:
 12865 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12866 ;; Tracked objects:
 12867 ;;		On entry : 0/0
 12868 ;;		On exit  : 0/0
 12869 ;;		Unchanged: 0/0
 12870 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12871 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12872 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12873 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12874 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12875 ;;Total ram usage:        2 bytes
 12876 ;; Hardware stack levels used:    1
 12877 ;; Hardware stack levels required when called:   10
 12878 ;; This function calls:
 12879 ;;		_lcdInst
 12880 ;;		_printf
 12881 ;; This function is called by:
 12882 ;;		_Test
 12883 ;; This function uses a non-reentrant model
 12884 ;;
 12885                           
 12886                           	psect	text44
 12887  0045D8                     __ptext44:
 12888                           	opt stack 0
 12889  0045D8                     _algorithmTest:
 12890                           	opt stack 19
 12891                           
 12892                           ;Test.c: 81: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 12893                           
 12894                           ; BSR set to: 0
 12895                           ;incstack = 0
 12896  0045D8  0E01               	movlw	1
 12897  0045DA  EC86  F02D         	call	_lcdInst
 12898  0045DE  0E68               	movlw	104
 12899  0045E0  0100               	movlb	0	; () banked
 12900  0045E2  6FAB               	movwf	??_algorithmTest& (0+255),b
 12901  0045E4  0EE4               	movlw	228
 12902  0045E6                     u10377:
 12903  0045E6  2EE8               	decfsz	wreg,f,c
 12904  0045E8  D7FE               	bra	u10377
 12905  0045EA  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 12906  0045EC  D7FC               	bra	u10377
 12907  0045EE  F000               	nop	
 12908  0045F0  0E80               	movlw	128
 12909  0045F2  EC86  F02D         	call	_lcdInst
 12910                           
 12911                           ;Test.c: 82: printf("ALGORITHM TEST");
 12912  0045F6  0EDC               	movlw	low STR_71
 12913  0045F8  0100               	movlb	0	; () banked
 12914  0045FA  6F8E               	movwf	printf@f& (0+255),b
 12915  0045FC  0EFE               	movlw	high STR_71
 12916  0045FE  0100               	movlb	0	; () banked
 12917  004600  6F8F               	movwf	(printf@f+1)& (0+255),b
 12918  004602  ECC2  F00B         	call	_printf	;wreg free
 12919                           
 12920                           ;Test.c: 83: lcdInst(0b11000000);;
 12921  004606  0EC0               	movlw	192
 12922  004608  EC86  F02D         	call	_lcdInst
 12923                           
 12924                           ;Test.c: 84: printf("PUSH TO START");
 12925  00460C  0E15               	movlw	low STR_72
 12926  00460E  0100               	movlb	0	; () banked
 12927  004610  6F8E               	movwf	printf@f& (0+255),b
 12928  004612  0EFF               	movlw	high STR_72
 12929  004614  0100               	movlb	0	; () banked
 12930  004616  6F8F               	movwf	(printf@f+1)& (0+255),b
 12931  004618  ECC2  F00B         	call	_printf	;wreg free
 12932                           
 12933                           ;Test.c: 85: _delay((unsigned long)((100)*(32000000/4000.0)));
 12934  00461C  0E05               	movlw	5
 12935  00461E  0100               	movlb	0	; () banked
 12936  004620  6FAC               	movwf	(??_algorithmTest+1)& (0+255),b
 12937  004622  0E0F               	movlw	15
 12938  004624  0100               	movlb	0	; () banked
 12939  004626  6FAB               	movwf	??_algorithmTest& (0+255),b
 12940  004628  0EF1               	movlw	241
 12941  00462A                     u10387:
 12942  00462A  2EE8               	decfsz	wreg,f,c
 12943  00462C  D7FE               	bra	u10387
 12944  00462E  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 12945  004630  D7FC               	bra	u10387
 12946  004632  2FAC               	decfsz	(??_algorithmTest+1)& (0+255),f,b
 12947  004634  D7FA               	bra	u10387
 12948  004636                     l1249:
 12949  004636  A281               	btfss	3969,1,c	;volatile
 12950  004638  D7FE               	goto	l1249
 12951  00463A                     l1252:
 12952  00463A  B281               	btfsc	3969,1,c	;volatile
 12953  00463C  D7FE               	goto	l1252
 12954                           
 12955                           ;Test.c: 88: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 12956  00463E  0E01               	movlw	1
 12957  004640  EC86  F02D         	call	_lcdInst
 12958  004644  0E68               	movlw	104
 12959  004646  0100               	movlb	0	; () banked
 12960  004648  6FAB               	movwf	??_algorithmTest& (0+255),b
 12961  00464A  0EE4               	movlw	228
 12962  00464C                     u10397:
 12963  00464C  2EE8               	decfsz	wreg,f,c
 12964  00464E  D7FE               	bra	u10397
 12965  004650  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 12966  004652  D7FC               	bra	u10397
 12967  004654  F000               	nop	
 12968  004656  0E80               	movlw	128
 12969  004658  EC86  F02D         	call	_lcdInst
 12970                           
 12971                           ;Test.c: 93: printf("ALG1: 9 POPNOTAB");
 12972  00465C  0E49               	movlw	low STR_73
 12973  00465E  0100               	movlb	0	; () banked
 12974  004660  6F8E               	movwf	printf@f& (0+255),b
 12975  004662  0EFC               	movlw	high STR_73
 12976  004664  0100               	movlb	0	; () banked
 12977  004666  6F8F               	movwf	(printf@f+1)& (0+255),b
 12978  004668  ECC2  F00B         	call	_printf	;wreg free
 12979                           
 12980                           ;Test.c: 100: printf("ALG2: 12 CANS");
 12981  00466C  0EF9               	movlw	low STR_74
 12982  00466E  0100               	movlb	0	; () banked
 12983  004670  6F8E               	movwf	printf@f& (0+255),b
 12984  004672  0EFE               	movlw	high STR_74
 12985  004674  0100               	movlb	0	; () banked
 12986  004676  6F8F               	movwf	(printf@f+1)& (0+255),b
 12987  004678  ECC2  F00B         	call	_printf	;wreg free
 12988                           
 12989                           ;Test.c: 109: printf("ALG3: 1 CAN");
 12990  00467C  0E59               	movlw	low STR_75
 12991  00467E  0100               	movlb	0	; () banked
 12992  004680  6F8E               	movwf	printf@f& (0+255),b
 12993  004682  0EFF               	movlw	high STR_75
 12994  004684  0100               	movlb	0	; () banked
 12995  004686  6F8F               	movwf	(printf@f+1)& (0+255),b
 12996  004688  ECC2  F00B         	call	_printf	;wreg free
 12997                           
 12998                           ;Test.c: 115: printf("ALG4: ALL CANS");
 12999  00468C  0EBE               	movlw	low STR_76
 13000  00468E  0100               	movlb	0	; () banked
 13001  004690  6F8E               	movwf	printf@f& (0+255),b
 13002  004692  0EFE               	movlw	high STR_76
 13003  004694  0100               	movlb	0	; () banked
 13004  004696  6F8F               	movwf	(printf@f+1)& (0+255),b
 13005  004698  ECC2  F00B         	call	_printf	;wreg free
 13006                           
 13007                           ;Test.c: 120: printf("ALG5: NO CANS");
 13008  00469C  0E07               	movlw	low STR_77
 13009  00469E  0100               	movlb	0	; () banked
 13010  0046A0  6F8E               	movwf	printf@f& (0+255),b
 13011  0046A2  0EFF               	movlw	high STR_77
 13012  0046A4  0100               	movlb	0	; () banked
 13013  0046A6  6F8F               	movwf	(printf@f+1)& (0+255),b
 13014  0046A8  ECC2  F00B         	call	_printf	;wreg free
 13015  0046AC  0012               	return		;funcret
 13016  0046AE                     __end_of_algorithmTest:
 13017                           	opt stack 0
 13018                           tblptru	equ	0xFF8
 13019                           tblptrh	equ	0xFF7
 13020                           tblptrl	equ	0xFF6
 13021                           tablat	equ	0xFF5
 13022                           prodh	equ	0xFF4
 13023                           prodl	equ	0xFF3
 13024                           intcon	equ	0xFF2
 13025                           intcon2	equ	0xFF1
 13026                           intcon3	equ	0xFF0
 13027                           postinc0	equ	0xFEE
 13028                           wreg	equ	0xFE8
 13029                           postdec1	equ	0xFE5
 13030                           fsr1l	equ	0xFE1
 13031                           indf2	equ	0xFDF
 13032                           postinc2	equ	0xFDE
 13033                           postdec2	equ	0xFDD
 13034                           fsr2h	equ	0xFDA
 13035                           fsr2l	equ	0xFD9
 13036                           status	equ	0xFD8
 13037                           
 13038 ;; *************** function _actuatorTest *****************
 13039 ;; Defined at:
 13040 ;;		line 202 in file "Test.c"
 13041 ;; Parameters:    Size  Location     Type
 13042 ;;		None
 13043 ;; Auto vars:     Size  Location     Type
 13044 ;;  i               1   45[BANK0 ] unsigned char 
 13045 ;;  i               1   67[BANK0 ] unsigned char 
 13046 ;;  i               1   66[BANK0 ] unsigned char 
 13047 ;;  i               1   65[BANK0 ] unsigned char 
 13048 ;;  i               1   64[BANK0 ] unsigned char 
 13049 ;;  i               1   63[BANK0 ] unsigned char 
 13050 ;;  i               1   62[BANK0 ] unsigned char 
 13051 ;;  i               1   61[BANK0 ] unsigned char 
 13052 ;;  i               1   60[BANK0 ] unsigned char 
 13053 ;;  i               1   59[BANK0 ] unsigned char 
 13054 ;;  i               1   58[BANK0 ] unsigned char 
 13055 ;;  i               1   57[BANK0 ] unsigned char 
 13056 ;;  i               1   56[BANK0 ] unsigned char 
 13057 ;;  i               1   55[BANK0 ] unsigned char 
 13058 ;;  i               1   54[BANK0 ] unsigned char 
 13059 ;;  i               1   53[BANK0 ] unsigned char 
 13060 ;;  i               1   52[BANK0 ] unsigned char 
 13061 ;;  i               1   51[BANK0 ] unsigned char 
 13062 ;;  i               1   50[BANK0 ] unsigned char 
 13063 ;;  i               1   49[BANK0 ] unsigned char 
 13064 ;;  i               1   48[BANK0 ] unsigned char 
 13065 ;;  i               1   47[BANK0 ] unsigned char 
 13066 ;;  i               1   46[BANK0 ] unsigned char 
 13067 ;;  i               2   68[BANK0 ] int 
 13068 ;; Return value:  Size  Location     Type
 13069 ;;                  1    wreg      void 
 13070 ;; Registers used:
 13071 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13072 ;; Tracked objects:
 13073 ;;		On entry : 0/0
 13074 ;;		On exit  : 0/0
 13075 ;;		Unchanged: 0/0
 13076 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13077 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13078 ;;      Locals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13079 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13080 ;;      Totals:         0      27       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13081 ;;Total ram usage:       27 bytes
 13082 ;; Hardware stack levels used:    1
 13083 ;; Hardware stack levels required when called:   10
 13084 ;; This function calls:
 13085 ;;		_lcdInst
 13086 ;;		_printf
 13087 ;;		_updateServoPosition
 13088 ;; This function is called by:
 13089 ;;		_Test
 13090 ;; This function uses a non-reentrant model
 13091 ;;
 13092                           
 13093                           	psect	text45
 13094  0008DA                     __ptext45:
 13095                           	opt stack 0
 13096  0008DA                     _actuatorTest:
 13097                           	opt stack 19
 13098                           
 13099                           ;Test.c: 204: int i = 0;
 13100                           
 13101                           ;incstack = 0
 13102  0008DA  0E00               	movlw	0
 13103  0008DC  0100               	movlb	0	; () banked
 13104  0008DE  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 13105  0008E0  0E00               	movlw	0
 13106  0008E2  6FC4               	movwf	actuatorTest@i& (0+255),b
 13107                           
 13108                           ; BSR set to: 0
 13109                           ;Test.c: 206: (INTCONbits.GIE = 1);
 13110  0008E4  8EF2               	bsf	intcon,7,c	;volatile
 13111                           
 13112                           ; BSR set to: 0
 13113                           ;Test.c: 207: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13114  0008E6  0E01               	movlw	1
 13115  0008E8  EC86  F02D         	call	_lcdInst
 13116  0008EC  0E68               	movlw	104
 13117  0008EE  0100               	movlb	0	; () banked
 13118  0008F0  6FAB               	movwf	??_actuatorTest& (0+255),b
 13119  0008F2  0EE4               	movlw	228
 13120  0008F4                     u10407:
 13121  0008F4  2EE8               	decfsz	wreg,f,c
 13122  0008F6  D7FE               	bra	u10407
 13123  0008F8  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13124  0008FA  D7FC               	bra	u10407
 13125  0008FC  F000               	nop	
 13126  0008FE  0E80               	movlw	128
 13127  000900  EC86  F02D         	call	_lcdInst
 13128                           
 13129                           ;Test.c: 208: printf("ACTUATORS");
 13130  000904  0E90               	movlw	low STR_89
 13131  000906  0100               	movlb	0	; () banked
 13132  000908  6F8E               	movwf	printf@f& (0+255),b
 13133  00090A  0EFF               	movlw	high STR_89
 13134  00090C  0100               	movlb	0	; () banked
 13135  00090E  6F8F               	movwf	(printf@f+1)& (0+255),b
 13136  000910  ECC2  F00B         	call	_printf	;wreg free
 13137                           
 13138                           ;Test.c: 209: lcdInst(0b11000000);;
 13139  000914  0EC0               	movlw	192
 13140  000916  EC86  F02D         	call	_lcdInst
 13141                           
 13142                           ;Test.c: 210: printf("PUSH TO START");
 13143  00091A  0E15               	movlw	low STR_72
 13144  00091C  0100               	movlb	0	; () banked
 13145  00091E  6F8E               	movwf	printf@f& (0+255),b
 13146  000920  0EFF               	movlw	high STR_72
 13147  000922  0100               	movlb	0	; () banked
 13148  000924  6F8F               	movwf	(printf@f+1)& (0+255),b
 13149  000926  ECC2  F00B         	call	_printf	;wreg free
 13150                           
 13151                           ;Test.c: 211: _delay((unsigned long)((100)*(32000000/4000.0)));
 13152  00092A  0E05               	movlw	5
 13153  00092C  0100               	movlb	0	; () banked
 13154  00092E  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 13155  000930  0E0F               	movlw	15
 13156  000932  0100               	movlb	0	; () banked
 13157  000934  6FAB               	movwf	??_actuatorTest& (0+255),b
 13158  000936  0EF1               	movlw	241
 13159  000938                     u10417:
 13160  000938  2EE8               	decfsz	wreg,f,c
 13161  00093A  D7FE               	bra	u10417
 13162  00093C  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13163  00093E  D7FC               	bra	u10417
 13164  000940  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 13165  000942  D7FA               	bra	u10417
 13166  000944                     l1284:
 13167  000944  A281               	btfss	3969,1,c	;volatile
 13168  000946  D7FE               	goto	l1284
 13169  000948                     l1287:
 13170  000948  B281               	btfsc	3969,1,c	;volatile
 13171  00094A  D7FE               	goto	l1287
 13172                           
 13173                           ;Test.c: 214: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13174  00094C  0E01               	movlw	1
 13175  00094E  EC86  F02D         	call	_lcdInst
 13176  000952  0E68               	movlw	104
 13177  000954  0100               	movlb	0	; () banked
 13178  000956  6FAB               	movwf	??_actuatorTest& (0+255),b
 13179  000958  0EE4               	movlw	228
 13180  00095A                     u10427:
 13181  00095A  2EE8               	decfsz	wreg,f,c
 13182  00095C  D7FE               	bra	u10427
 13183  00095E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13184  000960  D7FC               	bra	u10427
 13185  000962  F000               	nop	
 13186  000964  0E80               	movlw	128
 13187  000966  EC86  F02D         	call	_lcdInst
 13188                           
 13189                           ;Test.c: 219: printf("TST: DC MOTORS");
 13190  00096A  0ECD               	movlw	low STR_91
 13191  00096C  0100               	movlb	0	; () banked
 13192  00096E  6F8E               	movwf	printf@f& (0+255),b
 13193  000970  0EFE               	movlw	high STR_91
 13194  000972  0100               	movlb	0	; () banked
 13195  000974  6F8F               	movwf	(printf@f+1)& (0+255),b
 13196  000976  ECC2  F00B         	call	_printf	;wreg free
 13197                           
 13198                           ;Test.c: 220: lcdInst(0b11000000);;
 13199  00097A  0EC0               	movlw	192
 13200  00097C  EC86  F02D         	call	_lcdInst
 13201                           
 13202                           ;Test.c: 221: printf("PIN RA5 HIGH.");
 13203  000980  0EEB               	movlw	low STR_92
 13204  000982  0100               	movlb	0	; () banked
 13205  000984  6F8E               	movwf	printf@f& (0+255),b
 13206  000986  0EFE               	movlw	high STR_92
 13207  000988  0100               	movlb	0	; () banked
 13208  00098A  6F8F               	movwf	(printf@f+1)& (0+255),b
 13209  00098C  ECC2  F00B         	call	_printf	;wreg free
 13210                           
 13211                           ;Test.c: 222: LATBbits.LATB2 = 1;
 13212  000990  848A               	bsf	3978,2,c	;volatile
 13213                           
 13214                           ;Test.c: 223: for(i=0;i<5;i++){for(char i=0;i<100;i++){_delay((unsigned long)((10)*(3200
      +                          0000/4000.0)));};}
 13215  000992  0E00               	movlw	0
 13216  000994  0100               	movlb	0	; () banked
 13217  000996  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 13218  000998  0E00               	movlw	0
 13219  00099A  6FC4               	movwf	actuatorTest@i& (0+255),b
 13220                           
 13221                           ; BSR set to: 0
 13222  00099C  0100               	movlb	0	; () banked
 13223  00099E  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 13224  0009A0  D008               	goto	l8306
 13225  0009A2  0100               	movlb	0	; () banked
 13226  0009A4  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 13227  0009A6  E123               	bnz	l1291
 13228  0009A8  0E05               	movlw	5
 13229  0009AA  0100               	movlb	0	; () banked
 13230  0009AC  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 13231  0009AE  B0D8               	btfsc	status,0,c
 13232  0009B0  D01E               	goto	l1291
 13233  0009B2                     l8306:
 13234                           
 13235                           ; BSR set to: 0
 13236  0009B2  0E00               	movlw	0
 13237  0009B4  0100               	movlb	0	; () banked
 13238  0009B6  6FAD               	movwf	actuatorTest@i_1731& (0+255),b
 13239  0009B8                     l8308:
 13240                           
 13241                           ; BSR set to: 0
 13242  0009B8  0E63               	movlw	99
 13243  0009BA  0100               	movlb	0	; () banked
 13244  0009BC  65AD               	cpfsgt	actuatorTest@i_1731& (0+255),b
 13245  0009BE  D001               	goto	l8312
 13246  0009C0  D00C               	goto	l8316
 13247  0009C2                     l8312:
 13248                           
 13249                           ; BSR set to: 0
 13250  0009C2  0E68               	movlw	104
 13251  0009C4  0100               	movlb	0	; () banked
 13252  0009C6  6FAB               	movwf	??_actuatorTest& (0+255),b
 13253  0009C8  0EE4               	movlw	228
 13254  0009CA                     u10437:
 13255  0009CA  2EE8               	decfsz	wreg,f,c
 13256  0009CC  D7FE               	bra	u10437
 13257  0009CE  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13258  0009D0  D7FC               	bra	u10437
 13259  0009D2  F000               	nop	
 13260  0009D4  0100               	movlb	0	; () banked
 13261  0009D6  2BAD               	incf	actuatorTest@i_1731& (0+255),f,b
 13262  0009D8  D7EF               	goto	l8308
 13263  0009DA                     l8316:
 13264                           
 13265                           ; BSR set to: 0
 13266  0009DA  0100               	movlb	0	; () banked
 13267  0009DC  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 13268  0009DE  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 13269                           
 13270                           ; BSR set to: 0
 13271  0009E0  0100               	movlb	0	; () banked
 13272  0009E2  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 13273  0009E4  D7E6               	goto	l8306
 13274  0009E6  0100               	movlb	0	; () banked
 13275  0009E8  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 13276  0009EA  E101               	bnz	u7110
 13277  0009EC  D7DD               	goto	L13
 13278  0009EE                     u7110:
 13279  0009EE                     l1291:
 13280                           
 13281                           ; BSR set to: 0
 13282                           ;Test.c: 224: LATBbits.LATB2 = 0;
 13283  0009EE  948A               	bcf	3978,2,c	;volatile
 13284                           
 13285                           ; BSR set to: 0
 13286                           ;Test.c: 225: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13287  0009F0  0E01               	movlw	1
 13288  0009F2  EC86  F02D         	call	_lcdInst
 13289  0009F6  0E68               	movlw	104
 13290  0009F8  0100               	movlb	0	; () banked
 13291  0009FA  6FAB               	movwf	??_actuatorTest& (0+255),b
 13292  0009FC  0EE4               	movlw	228
 13293  0009FE                     u10447:
 13294  0009FE  2EE8               	decfsz	wreg,f,c
 13295  000A00  D7FE               	bra	u10447
 13296  000A02  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13297  000A04  D7FC               	bra	u10447
 13298  000A06  F000               	nop	
 13299  000A08  0E80               	movlw	128
 13300  000A0A  EC86  F02D         	call	_lcdInst
 13301                           
 13302                           ;Test.c: 231: printf("TST: COND SOLN'D");
 13303  000A0E  0E5A               	movlw	low STR_93
 13304  000A10  0100               	movlb	0	; () banked
 13305  000A12  6F8E               	movwf	printf@f& (0+255),b
 13306  000A14  0EFC               	movlw	high STR_93
 13307  000A16  0100               	movlb	0	; () banked
 13308  000A18  6F8F               	movwf	(printf@f+1)& (0+255),b
 13309  000A1A  ECC2  F00B         	call	_printf	;wreg free
 13310                           
 13311                           ;Test.c: 232: lcdInst(0b11000000);;
 13312  000A1E  0EC0               	movlw	192
 13313  000A20  EC86  F02D         	call	_lcdInst
 13314                           
 13315                           ;Test.c: 233: printf("PIN RA3...");
 13316  000A24  0E65               	movlw	low STR_94
 13317  000A26  0100               	movlb	0	; () banked
 13318  000A28  6F8E               	movwf	printf@f& (0+255),b
 13319  000A2A  0EFF               	movlw	high STR_94
 13320  000A2C  0100               	movlb	0	; () banked
 13321  000A2E  6F8F               	movwf	(printf@f+1)& (0+255),b
 13322  000A30  ECC2  F00B         	call	_printf	;wreg free
 13323                           
 13324                           ;Test.c: 234: for(i=0;i<5;i++){
 13325  000A34  0E00               	movlw	0
 13326  000A36  0100               	movlb	0	; () banked
 13327  000A38  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 13328  000A3A  0E00               	movlw	0
 13329  000A3C  6FC4               	movwf	actuatorTest@i& (0+255),b
 13330                           
 13331                           ; BSR set to: 0
 13332  000A3E  0100               	movlb	0	; () banked
 13333  000A40  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 13334  000A42  D008               	goto	l1294
 13335  000A44  0100               	movlb	0	; () banked
 13336  000A46  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 13337  000A48  E12C               	bnz	l1295
 13338  000A4A  0E05               	movlw	5
 13339  000A4C  0100               	movlb	0	; () banked
 13340  000A4E  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 13341  000A50  B0D8               	btfsc	status,0,c
 13342  000A52  D027               	goto	l1295
 13343  000A54                     l1294:
 13344                           
 13345                           ; BSR set to: 0
 13346                           ;Test.c: 235: LATAbits.LATA3 = 1;
 13347  000A54  8689               	bsf	3977,3,c	;volatile
 13348                           
 13349                           ; BSR set to: 0
 13350                           ;Test.c: 236: _delay((unsigned long)((300)*(32000000/4000.0)));
 13351  000A56  0E0D               	movlw	13
 13352  000A58  0100               	movlb	0	; () banked
 13353  000A5A  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 13354  000A5C  0E2D               	movlw	45
 13355  000A5E  0100               	movlb	0	; () banked
 13356  000A60  6FAB               	movwf	??_actuatorTest& (0+255),b
 13357  000A62  0ED7               	movlw	215
 13358  000A64                     u10457:
 13359  000A64  2EE8               	decfsz	wreg,f,c
 13360  000A66  D7FE               	bra	u10457
 13361  000A68  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13362  000A6A  D7FC               	bra	u10457
 13363  000A6C  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 13364  000A6E  D7FA               	bra	u10457
 13365  000A70  D000               	nop2	
 13366                           
 13367                           ;Test.c: 237: LATAbits.LATA3 = !1;
 13368  000A72  9689               	bcf	3977,3,c	;volatile
 13369                           
 13370                           ;Test.c: 238: _delay((unsigned long)((1000-300)*(32000000/4000.0)));
 13371  000A74  0E1D               	movlw	29
 13372  000A76  0100               	movlb	0	; () banked
 13373  000A78  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 13374  000A7A  0E69               	movlw	105
 13375  000A7C  0100               	movlb	0	; () banked
 13376  000A7E  6FAB               	movwf	??_actuatorTest& (0+255),b
 13377  000A80  0EA5               	movlw	165
 13378  000A82                     u10467:
 13379  000A82  2EE8               	decfsz	wreg,f,c
 13380  000A84  D7FE               	bra	u10467
 13381  000A86  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13382  000A88  D7FC               	bra	u10467
 13383  000A8A  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 13384  000A8C  D7FA               	bra	u10467
 13385  000A8E  0100               	movlb	0	; () banked
 13386  000A90  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 13387  000A92  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 13388  000A94  0100               	movlb	0	; () banked
 13389  000A96  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 13390  000A98  D7DD               	goto	l1294
 13391  000A9A  0100               	movlb	0	; () banked
 13392  000A9C  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 13393  000A9E  E101               	bnz	u7130
 13394  000AA0  D7D4               	goto	L14
 13395  000AA2                     u7130:
 13396  000AA2                     l1295:
 13397                           
 13398                           ; BSR set to: 0
 13399                           ;Test.c: 239: }
 13400                           ;Test.c: 240: LATAbits.LATA3 = !1;
 13401  000AA2  9689               	bcf	3977,3,c	;volatile
 13402                           
 13403                           ; BSR set to: 0
 13404                           ;Test.c: 241: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13405  000AA4  0E01               	movlw	1
 13406  000AA6  EC86  F02D         	call	_lcdInst
 13407  000AAA  0E68               	movlw	104
 13408  000AAC  0100               	movlb	0	; () banked
 13409  000AAE  6FAB               	movwf	??_actuatorTest& (0+255),b
 13410  000AB0  0EE4               	movlw	228
 13411  000AB2                     u10477:
 13412  000AB2  2EE8               	decfsz	wreg,f,c
 13413  000AB4  D7FE               	bra	u10477
 13414  000AB6  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13415  000AB8  D7FC               	bra	u10477
 13416  000ABA  F000               	nop	
 13417  000ABC  0E80               	movlw	128
 13418  000ABE  EC86  F02D         	call	_lcdInst
 13419                           
 13420                           ;Test.c: 247: printf("TST: PUSH SOLN'D");
 13421  000AC2  0E6B               	movlw	low STR_95
 13422  000AC4  0100               	movlb	0	; () banked
 13423  000AC6  6F8E               	movwf	printf@f& (0+255),b
 13424  000AC8  0EFC               	movlw	high STR_95
 13425  000ACA  0100               	movlb	0	; () banked
 13426  000ACC  6F8F               	movwf	(printf@f+1)& (0+255),b
 13427  000ACE  ECC2  F00B         	call	_printf	;wreg free
 13428                           
 13429                           ;Test.c: 248: lcdInst(0b11000000);;
 13430  000AD2  0EC0               	movlw	192
 13431  000AD4  EC86  F02D         	call	_lcdInst
 13432                           
 13433                           ;Test.c: 249: printf("PIN RA4...");
 13434  000AD8  0E70               	movlw	low STR_96
 13435  000ADA  0100               	movlb	0	; () banked
 13436  000ADC  6F8E               	movwf	printf@f& (0+255),b
 13437  000ADE  0EFF               	movlw	high STR_96
 13438  000AE0  0100               	movlb	0	; () banked
 13439  000AE2  6F8F               	movwf	(printf@f+1)& (0+255),b
 13440  000AE4  ECC2  F00B         	call	_printf	;wreg free
 13441                           
 13442                           ;Test.c: 250: for(i=0;i<5;i++){
 13443  000AE8  0E00               	movlw	0
 13444  000AEA  0100               	movlb	0	; () banked
 13445  000AEC  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 13446  000AEE  0E00               	movlw	0
 13447  000AF0  6FC4               	movwf	actuatorTest@i& (0+255),b
 13448                           
 13449                           ; BSR set to: 0
 13450  000AF2  0100               	movlb	0	; () banked
 13451  000AF4  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 13452  000AF6  D008               	goto	l1296
 13453  000AF8  0100               	movlb	0	; () banked
 13454  000AFA  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 13455  000AFC  E12C               	bnz	l1297
 13456  000AFE  0E05               	movlw	5
 13457  000B00  0100               	movlb	0	; () banked
 13458  000B02  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 13459  000B04  B0D8               	btfsc	status,0,c
 13460  000B06  D027               	goto	l1297
 13461  000B08                     l1296:
 13462                           
 13463                           ; BSR set to: 0
 13464                           ;Test.c: 251: LATAbits.LATA4 = 1;
 13465  000B08  8889               	bsf	3977,4,c	;volatile
 13466                           
 13467                           ; BSR set to: 0
 13468                           ;Test.c: 252: _delay((unsigned long)((300)*(32000000/4000.0)));
 13469  000B0A  0E0D               	movlw	13
 13470  000B0C  0100               	movlb	0	; () banked
 13471  000B0E  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 13472  000B10  0E2D               	movlw	45
 13473  000B12  0100               	movlb	0	; () banked
 13474  000B14  6FAB               	movwf	??_actuatorTest& (0+255),b
 13475  000B16  0ED7               	movlw	215
 13476  000B18                     u10487:
 13477  000B18  2EE8               	decfsz	wreg,f,c
 13478  000B1A  D7FE               	bra	u10487
 13479  000B1C  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13480  000B1E  D7FC               	bra	u10487
 13481  000B20  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 13482  000B22  D7FA               	bra	u10487
 13483  000B24  D000               	nop2	
 13484                           
 13485                           ;Test.c: 253: LATAbits.LATA4 = !1;
 13486  000B26  9889               	bcf	3977,4,c	;volatile
 13487                           
 13488                           ;Test.c: 254: _delay((unsigned long)((1000-300)*(32000000/4000.0)));
 13489  000B28  0E1D               	movlw	29
 13490  000B2A  0100               	movlb	0	; () banked
 13491  000B2C  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 13492  000B2E  0E69               	movlw	105
 13493  000B30  0100               	movlb	0	; () banked
 13494  000B32  6FAB               	movwf	??_actuatorTest& (0+255),b
 13495  000B34  0EA5               	movlw	165
 13496  000B36                     u10497:
 13497  000B36  2EE8               	decfsz	wreg,f,c
 13498  000B38  D7FE               	bra	u10497
 13499  000B3A  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13500  000B3C  D7FC               	bra	u10497
 13501  000B3E  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 13502  000B40  D7FA               	bra	u10497
 13503  000B42  0100               	movlb	0	; () banked
 13504  000B44  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 13505  000B46  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 13506  000B48  0100               	movlb	0	; () banked
 13507  000B4A  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 13508  000B4C  D7DD               	goto	l1296
 13509  000B4E  0100               	movlb	0	; () banked
 13510  000B50  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 13511  000B52  E101               	bnz	u7150
 13512  000B54  D7D4               	goto	L15
 13513  000B56                     u7150:
 13514  000B56                     l1297:
 13515                           
 13516                           ; BSR set to: 0
 13517                           ;Test.c: 255: }
 13518                           ;Test.c: 256: LATAbits.LATA4 = !1;
 13519  000B56  9889               	bcf	3977,4,c	;volatile
 13520                           
 13521                           ; BSR set to: 0
 13522                           ;Test.c: 257: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13523  000B58  0E01               	movlw	1
 13524  000B5A  EC86  F02D         	call	_lcdInst
 13525  000B5E  0E68               	movlw	104
 13526  000B60  0100               	movlb	0	; () banked
 13527  000B62  6FAB               	movwf	??_actuatorTest& (0+255),b
 13528  000B64  0EE4               	movlw	228
 13529  000B66                     u10507:
 13530  000B66  2EE8               	decfsz	wreg,f,c
 13531  000B68  D7FE               	bra	u10507
 13532  000B6A  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13533  000B6C  D7FC               	bra	u10507
 13534  000B6E  F000               	nop	
 13535  000B70  0E80               	movlw	128
 13536  000B72  EC86  F02D         	call	_lcdInst
 13537                           
 13538                           ;Test.c: 260: machine_state = Sorting_state;
 13539  000B76  0E01               	movlw	1
 13540  000B78  0100               	movlb	0	; () banked
 13541  000B7A  6FFC               	movwf	_machine_state& (0+255),b
 13542                           
 13543                           ; BSR set to: 0
 13544                           ;Test.c: 261: was_low_1 = 0;
 13545  000B7C  0E00               	movlw	0
 13546  000B7E  6E78               	movwf	_was_low_1+1,c	;volatile
 13547  000B80  0E00               	movlw	0
 13548  000B82  6E77               	movwf	_was_low_1,c	;volatile
 13549                           
 13550                           ; BSR set to: 0
 13551                           ;Test.c: 262: was_low_1 = 0;
 13552  000B84  0E00               	movlw	0
 13553  000B86  6E78               	movwf	_was_low_1+1,c	;volatile
 13554  000B88  0E00               	movlw	0
 13555  000B8A  6E77               	movwf	_was_low_1,c	;volatile
 13556                           
 13557                           ; BSR set to: 0
 13558                           ;Test.c: 269: printf("TST: PAN SERVO");
 13559  000B8C  0EAF               	movlw	low STR_97
 13560  000B8E  0100               	movlb	0	; () banked
 13561  000B90  6F8E               	movwf	printf@f& (0+255),b
 13562  000B92  0EFE               	movlw	high STR_97
 13563  000B94  0100               	movlb	0	; () banked
 13564  000B96  6F8F               	movwf	(printf@f+1)& (0+255),b
 13565  000B98  ECC2  F00B         	call	_printf	;wreg free
 13566                           
 13567                           ;Test.c: 270: lcdInst(0b11000000);;
 13568  000B9C  0EC0               	movlw	192
 13569  000B9E  EC86  F02D         	call	_lcdInst
 13570                           
 13571                           ;Test.c: 271: printf("MIDDLE -- 2s    ");
 13572  000BA2  0EC1               	movlw	low STR_98
 13573  000BA4  0100               	movlb	0	; () banked
 13574  000BA6  6F8E               	movwf	printf@f& (0+255),b
 13575  000BA8  0EFB               	movlw	high STR_98
 13576  000BAA  0100               	movlb	0	; () banked
 13577  000BAC  6F8F               	movwf	(printf@f+1)& (0+255),b
 13578  000BAE  ECC2  F00B         	call	_printf	;wreg free
 13579                           
 13580                           ;Test.c: 272: updateServoPosition(1200, 1);
 13581  000BB2  0E04               	movlw	4
 13582  000BB4  0100               	movlb	0	; () banked
 13583  000BB6  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13584  000BB8  0EB0               	movlw	176
 13585  000BBA  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13586  000BBC  0E00               	movlw	0
 13587  000BBE  0100               	movlb	0	; () banked
 13588  000BC0  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13589  000BC2  0E01               	movlw	1
 13590  000BC4  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13591  000BC6  EC6A  F026         	call	_updateServoPosition	;wreg free
 13592                           
 13593                           ;Test.c: 273: TMR1ON = 1;
 13594  000BCA  80CD               	bsf	4045,0,c	;volatile
 13595                           
 13596                           ;Test.c: 274: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 13597  000BCC  0E00               	movlw	0
 13598  000BCE  0100               	movlb	0	; () banked
 13599  000BD0  6FAE               	movwf	actuatorTest@i_1738& (0+255),b
 13600  000BD2                     l8392:
 13601                           
 13602                           ; BSR set to: 0
 13603  000BD2  0E63               	movlw	99
 13604  000BD4  0100               	movlb	0	; () banked
 13605  000BD6  65AE               	cpfsgt	actuatorTest@i_1738& (0+255),b
 13606  000BD8  D001               	goto	l8396
 13607  000BDA  D00C               	goto	l8400
 13608  000BDC                     l8396:
 13609                           
 13610                           ; BSR set to: 0
 13611  000BDC  0E68               	movlw	104
 13612  000BDE  0100               	movlb	0	; () banked
 13613  000BE0  6FAB               	movwf	??_actuatorTest& (0+255),b
 13614  000BE2  0EE4               	movlw	228
 13615  000BE4                     u10517:
 13616  000BE4  2EE8               	decfsz	wreg,f,c
 13617  000BE6  D7FE               	bra	u10517
 13618  000BE8  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13619  000BEA  D7FC               	bra	u10517
 13620  000BEC  F000               	nop	
 13621  000BEE  0100               	movlb	0	; () banked
 13622  000BF0  2BAE               	incf	actuatorTest@i_1738& (0+255),f,b
 13623  000BF2  D7EF               	goto	l8392
 13624  000BF4                     l8400:
 13625                           
 13626                           ; BSR set to: 0
 13627  000BF4  0E00               	movlw	0
 13628  000BF6  0100               	movlb	0	; () banked
 13629  000BF8  6FAF               	movwf	actuatorTest@i_1739& (0+255),b
 13630  000BFA                     l8402:
 13631                           
 13632                           ; BSR set to: 0
 13633  000BFA  0E63               	movlw	99
 13634  000BFC  0100               	movlb	0	; () banked
 13635  000BFE  65AF               	cpfsgt	actuatorTest@i_1739& (0+255),b
 13636  000C00  D001               	goto	l8406
 13637  000C02  D00C               	goto	l8410
 13638  000C04                     l8406:
 13639                           
 13640                           ; BSR set to: 0
 13641  000C04  0E68               	movlw	104
 13642  000C06  0100               	movlb	0	; () banked
 13643  000C08  6FAB               	movwf	??_actuatorTest& (0+255),b
 13644  000C0A  0EE4               	movlw	228
 13645  000C0C                     u10527:
 13646  000C0C  2EE8               	decfsz	wreg,f,c
 13647  000C0E  D7FE               	bra	u10527
 13648  000C10  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13649  000C12  D7FC               	bra	u10527
 13650  000C14  F000               	nop	
 13651  000C16  0100               	movlb	0	; () banked
 13652  000C18  2BAF               	incf	actuatorTest@i_1739& (0+255),f,b
 13653  000C1A  D7EF               	goto	l8402
 13654  000C1C                     l8410:
 13655                           
 13656                           ; BSR set to: 0
 13657                           ;Test.c: 276: lcdInst(0b10000000);;lcdInst(0b11000000);;
 13658  000C1C  0E80               	movlw	128
 13659  000C1E  EC86  F02D         	call	_lcdInst
 13660  000C22  0EC0               	movlw	192
 13661  000C24  EC86  F02D         	call	_lcdInst
 13662                           
 13663                           ;Test.c: 277: printf("RIGHT -- 2s     ");
 13664  000C28  0EB0               	movlw	low STR_99
 13665  000C2A  0100               	movlb	0	; () banked
 13666  000C2C  6F8E               	movwf	printf@f& (0+255),b
 13667  000C2E  0EFB               	movlw	high STR_99
 13668  000C30  0100               	movlb	0	; () banked
 13669  000C32  6F8F               	movwf	(printf@f+1)& (0+255),b
 13670  000C34  ECC2  F00B         	call	_printf	;wreg free
 13671                           
 13672                           ;Test.c: 278: updateServoPosition(500, 1);
 13673  000C38  0E01               	movlw	1
 13674  000C3A  0100               	movlb	0	; () banked
 13675  000C3C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13676  000C3E  0EF4               	movlw	244
 13677  000C40  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13678  000C42  0E00               	movlw	0
 13679  000C44  0100               	movlb	0	; () banked
 13680  000C46  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13681  000C48  0E01               	movlw	1
 13682  000C4A  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13683  000C4C  EC6A  F026         	call	_updateServoPosition	;wreg free
 13684                           
 13685                           ;Test.c: 279: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 13686  000C50  0E00               	movlw	0
 13687  000C52  0100               	movlb	0	; () banked
 13688  000C54  6FB0               	movwf	actuatorTest@i_1741& (0+255),b
 13689  000C56                     l8418:
 13690                           
 13691                           ; BSR set to: 0
 13692  000C56  0E63               	movlw	99
 13693  000C58  0100               	movlb	0	; () banked
 13694  000C5A  65B0               	cpfsgt	actuatorTest@i_1741& (0+255),b
 13695  000C5C  D001               	goto	l8422
 13696  000C5E  D00C               	goto	l8426
 13697  000C60                     l8422:
 13698                           
 13699                           ; BSR set to: 0
 13700  000C60  0E68               	movlw	104
 13701  000C62  0100               	movlb	0	; () banked
 13702  000C64  6FAB               	movwf	??_actuatorTest& (0+255),b
 13703  000C66  0EE4               	movlw	228
 13704  000C68                     u10537:
 13705  000C68  2EE8               	decfsz	wreg,f,c
 13706  000C6A  D7FE               	bra	u10537
 13707  000C6C  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13708  000C6E  D7FC               	bra	u10537
 13709  000C70  F000               	nop	
 13710  000C72  0100               	movlb	0	; () banked
 13711  000C74  2BB0               	incf	actuatorTest@i_1741& (0+255),f,b
 13712  000C76  D7EF               	goto	l8418
 13713  000C78                     l8426:
 13714                           
 13715                           ; BSR set to: 0
 13716  000C78  0E00               	movlw	0
 13717  000C7A  0100               	movlb	0	; () banked
 13718  000C7C  6FB1               	movwf	actuatorTest@i_1742& (0+255),b
 13719  000C7E                     l8428:
 13720                           
 13721                           ; BSR set to: 0
 13722  000C7E  0E63               	movlw	99
 13723  000C80  0100               	movlb	0	; () banked
 13724  000C82  65B1               	cpfsgt	actuatorTest@i_1742& (0+255),b
 13725  000C84  D001               	goto	l8432
 13726  000C86  D00C               	goto	l8436
 13727  000C88                     l8432:
 13728                           
 13729                           ; BSR set to: 0
 13730  000C88  0E68               	movlw	104
 13731  000C8A  0100               	movlb	0	; () banked
 13732  000C8C  6FAB               	movwf	??_actuatorTest& (0+255),b
 13733  000C8E  0EE4               	movlw	228
 13734  000C90                     u10547:
 13735  000C90  2EE8               	decfsz	wreg,f,c
 13736  000C92  D7FE               	bra	u10547
 13737  000C94  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13738  000C96  D7FC               	bra	u10547
 13739  000C98  F000               	nop	
 13740  000C9A  0100               	movlb	0	; () banked
 13741  000C9C  2BB1               	incf	actuatorTest@i_1742& (0+255),f,b
 13742  000C9E  D7EF               	goto	l8428
 13743  000CA0                     l8436:
 13744                           
 13745                           ; BSR set to: 0
 13746                           ;Test.c: 281: lcdInst(0b10000000);;lcdInst(0b11000000);;
 13747  000CA0  0E80               	movlw	128
 13748  000CA2  EC86  F02D         	call	_lcdInst
 13749  000CA6  0EC0               	movlw	192
 13750  000CA8  EC86  F02D         	call	_lcdInst
 13751                           
 13752                           ;Test.c: 282: printf("LEFT -- 2s      ");
 13753  000CAC  0E8E               	movlw	low STR_100
 13754  000CAE  0100               	movlb	0	; () banked
 13755  000CB0  6F8E               	movwf	printf@f& (0+255),b
 13756  000CB2  0EFB               	movlw	high STR_100
 13757  000CB4  0100               	movlb	0	; () banked
 13758  000CB6  6F8F               	movwf	(printf@f+1)& (0+255),b
 13759  000CB8  ECC2  F00B         	call	_printf	;wreg free
 13760                           
 13761                           ;Test.c: 283: updateServoPosition(2400, 1);
 13762  000CBC  0E09               	movlw	9
 13763  000CBE  0100               	movlb	0	; () banked
 13764  000CC0  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13765  000CC2  0E60               	movlw	96
 13766  000CC4  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13767  000CC6  0E00               	movlw	0
 13768  000CC8  0100               	movlb	0	; () banked
 13769  000CCA  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13770  000CCC  0E01               	movlw	1
 13771  000CCE  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13772  000CD0  EC6A  F026         	call	_updateServoPosition	;wreg free
 13773                           
 13774                           ;Test.c: 284: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 13775  000CD4  0E00               	movlw	0
 13776  000CD6  0100               	movlb	0	; () banked
 13777  000CD8  6FB2               	movwf	actuatorTest@i_1744& (0+255),b
 13778  000CDA                     l8444:
 13779                           
 13780                           ; BSR set to: 0
 13781  000CDA  0E63               	movlw	99
 13782  000CDC  0100               	movlb	0	; () banked
 13783  000CDE  65B2               	cpfsgt	actuatorTest@i_1744& (0+255),b
 13784  000CE0  D001               	goto	l8448
 13785  000CE2  D00C               	goto	l8452
 13786  000CE4                     l8448:
 13787                           
 13788                           ; BSR set to: 0
 13789  000CE4  0E68               	movlw	104
 13790  000CE6  0100               	movlb	0	; () banked
 13791  000CE8  6FAB               	movwf	??_actuatorTest& (0+255),b
 13792  000CEA  0EE4               	movlw	228
 13793  000CEC                     u10557:
 13794  000CEC  2EE8               	decfsz	wreg,f,c
 13795  000CEE  D7FE               	bra	u10557
 13796  000CF0  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13797  000CF2  D7FC               	bra	u10557
 13798  000CF4  F000               	nop	
 13799  000CF6  0100               	movlb	0	; () banked
 13800  000CF8  2BB2               	incf	actuatorTest@i_1744& (0+255),f,b
 13801  000CFA  D7EF               	goto	l8444
 13802  000CFC                     l8452:
 13803                           
 13804                           ; BSR set to: 0
 13805  000CFC  0E00               	movlw	0
 13806  000CFE  0100               	movlb	0	; () banked
 13807  000D00  6FB3               	movwf	actuatorTest@i_1745& (0+255),b
 13808  000D02                     l8454:
 13809                           
 13810                           ; BSR set to: 0
 13811  000D02  0E63               	movlw	99
 13812  000D04  0100               	movlb	0	; () banked
 13813  000D06  65B3               	cpfsgt	actuatorTest@i_1745& (0+255),b
 13814  000D08  D001               	goto	l8458
 13815  000D0A  D00C               	goto	l8462
 13816  000D0C                     l8458:
 13817                           
 13818                           ; BSR set to: 0
 13819  000D0C  0E68               	movlw	104
 13820  000D0E  0100               	movlb	0	; () banked
 13821  000D10  6FAB               	movwf	??_actuatorTest& (0+255),b
 13822  000D12  0EE4               	movlw	228
 13823  000D14                     u10567:
 13824  000D14  2EE8               	decfsz	wreg,f,c
 13825  000D16  D7FE               	bra	u10567
 13826  000D18  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13827  000D1A  D7FC               	bra	u10567
 13828  000D1C  F000               	nop	
 13829  000D1E  0100               	movlb	0	; () banked
 13830  000D20  2BB3               	incf	actuatorTest@i_1745& (0+255),f,b
 13831  000D22  D7EF               	goto	l8454
 13832  000D24                     l8462:
 13833                           
 13834                           ; BSR set to: 0
 13835                           ;Test.c: 286: lcdInst(0b10000000);;lcdInst(0b11000000);;
 13836  000D24  0E80               	movlw	128
 13837  000D26  EC86  F02D         	call	_lcdInst
 13838  000D2A  0EC0               	movlw	192
 13839  000D2C  EC86  F02D         	call	_lcdInst
 13840                           
 13841                           ;Test.c: 287: printf("MID-LEFT -- 2s  ");
 13842  000D30  0E16               	movlw	low STR_101
 13843  000D32  0100               	movlb	0	; () banked
 13844  000D34  6F8E               	movwf	printf@f& (0+255),b
 13845  000D36  0EFC               	movlw	high STR_101
 13846  000D38  0100               	movlb	0	; () banked
 13847  000D3A  6F8F               	movwf	(printf@f+1)& (0+255),b
 13848  000D3C  ECC2  F00B         	call	_printf	;wreg free
 13849                           
 13850                           ;Test.c: 288: updateServoPosition(1670, 1);
 13851  000D40  0E06               	movlw	6
 13852  000D42  0100               	movlb	0	; () banked
 13853  000D44  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13854  000D46  0E86               	movlw	134
 13855  000D48  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13856  000D4A  0E00               	movlw	0
 13857  000D4C  0100               	movlb	0	; () banked
 13858  000D4E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13859  000D50  0E01               	movlw	1
 13860  000D52  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13861  000D54  EC6A  F026         	call	_updateServoPosition	;wreg free
 13862                           
 13863                           ;Test.c: 289: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 13864  000D58  0E00               	movlw	0
 13865  000D5A  0100               	movlb	0	; () banked
 13866  000D5C  6FB4               	movwf	actuatorTest@i_1747& (0+255),b
 13867  000D5E                     l8470:
 13868                           
 13869                           ; BSR set to: 0
 13870  000D5E  0E63               	movlw	99
 13871  000D60  0100               	movlb	0	; () banked
 13872  000D62  65B4               	cpfsgt	actuatorTest@i_1747& (0+255),b
 13873  000D64  D001               	goto	l8474
 13874  000D66  D00C               	goto	l8478
 13875  000D68                     l8474:
 13876                           
 13877                           ; BSR set to: 0
 13878  000D68  0E68               	movlw	104
 13879  000D6A  0100               	movlb	0	; () banked
 13880  000D6C  6FAB               	movwf	??_actuatorTest& (0+255),b
 13881  000D6E  0EE4               	movlw	228
 13882  000D70                     u10577:
 13883  000D70  2EE8               	decfsz	wreg,f,c
 13884  000D72  D7FE               	bra	u10577
 13885  000D74  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13886  000D76  D7FC               	bra	u10577
 13887  000D78  F000               	nop	
 13888  000D7A  0100               	movlb	0	; () banked
 13889  000D7C  2BB4               	incf	actuatorTest@i_1747& (0+255),f,b
 13890  000D7E  D7EF               	goto	l8470
 13891  000D80                     l8478:
 13892                           
 13893                           ; BSR set to: 0
 13894  000D80  0E00               	movlw	0
 13895  000D82  0100               	movlb	0	; () banked
 13896  000D84  6FB5               	movwf	actuatorTest@i_1748& (0+255),b
 13897  000D86                     l8480:
 13898                           
 13899                           ; BSR set to: 0
 13900  000D86  0E63               	movlw	99
 13901  000D88  0100               	movlb	0	; () banked
 13902  000D8A  65B5               	cpfsgt	actuatorTest@i_1748& (0+255),b
 13903  000D8C  D001               	goto	l8484
 13904  000D8E  D00C               	goto	l8488
 13905  000D90                     l8484:
 13906                           
 13907                           ; BSR set to: 0
 13908  000D90  0E68               	movlw	104
 13909  000D92  0100               	movlb	0	; () banked
 13910  000D94  6FAB               	movwf	??_actuatorTest& (0+255),b
 13911  000D96  0EE4               	movlw	228
 13912  000D98                     u10587:
 13913  000D98  2EE8               	decfsz	wreg,f,c
 13914  000D9A  D7FE               	bra	u10587
 13915  000D9C  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13916  000D9E  D7FC               	bra	u10587
 13917  000DA0  F000               	nop	
 13918  000DA2  0100               	movlb	0	; () banked
 13919  000DA4  2BB5               	incf	actuatorTest@i_1748& (0+255),f,b
 13920  000DA6  D7EF               	goto	l8480
 13921  000DA8                     l8488:
 13922                           
 13923                           ; BSR set to: 0
 13924                           ;Test.c: 291: lcdInst(0b10000000);;lcdInst(0b11000000);;
 13925  000DA8  0E80               	movlw	128
 13926  000DAA  EC86  F02D         	call	_lcdInst
 13927  000DAE  0EC0               	movlw	192
 13928  000DB0  EC86  F02D         	call	_lcdInst
 13929                           
 13930                           ;Test.c: 292: printf("MID-RIGHT -- 2s ");
 13931  000DB4  0E27               	movlw	low STR_102
 13932  000DB6  0100               	movlb	0	; () banked
 13933  000DB8  6F8E               	movwf	printf@f& (0+255),b
 13934  000DBA  0EFC               	movlw	high STR_102
 13935  000DBC  0100               	movlb	0	; () banked
 13936  000DBE  6F8F               	movwf	(printf@f+1)& (0+255),b
 13937  000DC0  ECC2  F00B         	call	_printf	;wreg free
 13938                           
 13939                           ;Test.c: 293: updateServoPosition(850, 1);
 13940  000DC4  0E03               	movlw	3
 13941  000DC6  0100               	movlb	0	; () banked
 13942  000DC8  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13943  000DCA  0E52               	movlw	82
 13944  000DCC  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13945  000DCE  0E00               	movlw	0
 13946  000DD0  0100               	movlb	0	; () banked
 13947  000DD2  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13948  000DD4  0E01               	movlw	1
 13949  000DD6  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13950  000DD8  EC6A  F026         	call	_updateServoPosition	;wreg free
 13951                           
 13952                           ;Test.c: 294: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 13953  000DDC  0E00               	movlw	0
 13954  000DDE  0100               	movlb	0	; () banked
 13955  000DE0  6FB6               	movwf	actuatorTest@i_1750& (0+255),b
 13956  000DE2                     l8496:
 13957                           
 13958                           ; BSR set to: 0
 13959  000DE2  0E63               	movlw	99
 13960  000DE4  0100               	movlb	0	; () banked
 13961  000DE6  65B6               	cpfsgt	actuatorTest@i_1750& (0+255),b
 13962  000DE8  D001               	goto	l8500
 13963  000DEA  D00C               	goto	l8504
 13964  000DEC                     l8500:
 13965                           
 13966                           ; BSR set to: 0
 13967  000DEC  0E68               	movlw	104
 13968  000DEE  0100               	movlb	0	; () banked
 13969  000DF0  6FAB               	movwf	??_actuatorTest& (0+255),b
 13970  000DF2  0EE4               	movlw	228
 13971  000DF4                     u10597:
 13972  000DF4  2EE8               	decfsz	wreg,f,c
 13973  000DF6  D7FE               	bra	u10597
 13974  000DF8  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 13975  000DFA  D7FC               	bra	u10597
 13976  000DFC  F000               	nop	
 13977  000DFE  0100               	movlb	0	; () banked
 13978  000E00  2BB6               	incf	actuatorTest@i_1750& (0+255),f,b
 13979  000E02  D7EF               	goto	l8496
 13980  000E04                     l8504:
 13981                           
 13982                           ; BSR set to: 0
 13983  000E04  0E00               	movlw	0
 13984  000E06  0100               	movlb	0	; () banked
 13985  000E08  6FB7               	movwf	actuatorTest@i_1751& (0+255),b
 13986  000E0A                     l8506:
 13987                           
 13988                           ; BSR set to: 0
 13989  000E0A  0E63               	movlw	99
 13990  000E0C  0100               	movlb	0	; () banked
 13991  000E0E  65B7               	cpfsgt	actuatorTest@i_1751& (0+255),b
 13992  000E10  D001               	goto	l8510
 13993  000E12  D00C               	goto	l8514
 13994  000E14                     l8510:
 13995                           
 13996                           ; BSR set to: 0
 13997  000E14  0E68               	movlw	104
 13998  000E16  0100               	movlb	0	; () banked
 13999  000E18  6FAB               	movwf	??_actuatorTest& (0+255),b
 14000  000E1A  0EE4               	movlw	228
 14001  000E1C                     u10607:
 14002  000E1C  2EE8               	decfsz	wreg,f,c
 14003  000E1E  D7FE               	bra	u10607
 14004  000E20  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14005  000E22  D7FC               	bra	u10607
 14006  000E24  F000               	nop	
 14007  000E26  0100               	movlb	0	; () banked
 14008  000E28  2BB7               	incf	actuatorTest@i_1751& (0+255),f,b
 14009  000E2A  D7EF               	goto	l8506
 14010  000E2C                     l8514:
 14011                           
 14012                           ; BSR set to: 0
 14013                           ;Test.c: 296: lcdInst(0b10000000);;lcdInst(0b11000000);;
 14014  000E2C  0E80               	movlw	128
 14015  000E2E  EC86  F02D         	call	_lcdInst
 14016  000E32  0EC0               	movlw	192
 14017  000E34  EC86  F02D         	call	_lcdInst
 14018                           
 14019                           ;Test.c: 297: printf("MID -- 2s       ");
 14020  000E38  0E6C               	movlw	low STR_103
 14021  000E3A  0100               	movlb	0	; () banked
 14022  000E3C  6F8E               	movwf	printf@f& (0+255),b
 14023  000E3E  0EFB               	movlw	high STR_103
 14024  000E40  0100               	movlb	0	; () banked
 14025  000E42  6F8F               	movwf	(printf@f+1)& (0+255),b
 14026  000E44  ECC2  F00B         	call	_printf	;wreg free
 14027                           
 14028                           ;Test.c: 298: updateServoPosition(1200, 1);
 14029  000E48  0E04               	movlw	4
 14030  000E4A  0100               	movlb	0	; () banked
 14031  000E4C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14032  000E4E  0EB0               	movlw	176
 14033  000E50  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14034  000E52  0E00               	movlw	0
 14035  000E54  0100               	movlb	0	; () banked
 14036  000E56  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14037  000E58  0E01               	movlw	1
 14038  000E5A  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14039  000E5C  EC6A  F026         	call	_updateServoPosition	;wreg free
 14040                           
 14041                           ;Test.c: 299: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 14042  000E60  0E00               	movlw	0
 14043  000E62  0100               	movlb	0	; () banked
 14044  000E64  6FB8               	movwf	actuatorTest@i_1753& (0+255),b
 14045  000E66                     l8522:
 14046                           
 14047                           ; BSR set to: 0
 14048  000E66  0E63               	movlw	99
 14049  000E68  0100               	movlb	0	; () banked
 14050  000E6A  65B8               	cpfsgt	actuatorTest@i_1753& (0+255),b
 14051  000E6C  D001               	goto	l8526
 14052  000E6E  D00C               	goto	l8530
 14053  000E70                     l8526:
 14054                           
 14055                           ; BSR set to: 0
 14056  000E70  0E68               	movlw	104
 14057  000E72  0100               	movlb	0	; () banked
 14058  000E74  6FAB               	movwf	??_actuatorTest& (0+255),b
 14059  000E76  0EE4               	movlw	228
 14060  000E78                     u10617:
 14061  000E78  2EE8               	decfsz	wreg,f,c
 14062  000E7A  D7FE               	bra	u10617
 14063  000E7C  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14064  000E7E  D7FC               	bra	u10617
 14065  000E80  F000               	nop	
 14066  000E82  0100               	movlb	0	; () banked
 14067  000E84  2BB8               	incf	actuatorTest@i_1753& (0+255),f,b
 14068  000E86  D7EF               	goto	l8522
 14069  000E88                     l8530:
 14070                           
 14071                           ; BSR set to: 0
 14072  000E88  0E00               	movlw	0
 14073  000E8A  0100               	movlb	0	; () banked
 14074  000E8C  6FB9               	movwf	actuatorTest@i_1754& (0+255),b
 14075  000E8E                     l8532:
 14076                           
 14077                           ; BSR set to: 0
 14078  000E8E  0E63               	movlw	99
 14079  000E90  0100               	movlb	0	; () banked
 14080  000E92  65B9               	cpfsgt	actuatorTest@i_1754& (0+255),b
 14081  000E94  D001               	goto	l8536
 14082  000E96  D00C               	goto	l1321
 14083  000E98                     l8536:
 14084                           
 14085                           ; BSR set to: 0
 14086  000E98  0E68               	movlw	104
 14087  000E9A  0100               	movlb	0	; () banked
 14088  000E9C  6FAB               	movwf	??_actuatorTest& (0+255),b
 14089  000E9E  0EE4               	movlw	228
 14090  000EA0                     u10627:
 14091  000EA0  2EE8               	decfsz	wreg,f,c
 14092  000EA2  D7FE               	bra	u10627
 14093  000EA4  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14094  000EA6  D7FC               	bra	u10627
 14095  000EA8  F000               	nop	
 14096  000EAA  0100               	movlb	0	; () banked
 14097  000EAC  2BB9               	incf	actuatorTest@i_1754& (0+255),f,b
 14098  000EAE  D7EF               	goto	l8532
 14099  000EB0                     l1321:
 14100                           
 14101                           ; BSR set to: 0
 14102                           ;Test.c: 300: TMR1ON = 0;
 14103  000EB0  90CD               	bcf	4045,0,c	;volatile
 14104                           
 14105                           ; BSR set to: 0
 14106                           ;Test.c: 307: printf("TST: TILT SERVO");
 14107  000EB2  0E35               	movlw	low STR_104
 14108  000EB4  0100               	movlb	0	; () banked
 14109  000EB6  6F8E               	movwf	printf@f& (0+255),b
 14110  000EB8  0EFE               	movlw	high STR_104
 14111  000EBA  0100               	movlb	0	; () banked
 14112  000EBC  6F8F               	movwf	(printf@f+1)& (0+255),b
 14113  000EBE  ECC2  F00B         	call	_printf	;wreg free
 14114                           
 14115                           ;Test.c: 308: lcdInst(0b11000000);;
 14116  000EC2  0EC0               	movlw	192
 14117  000EC4  EC86  F02D         	call	_lcdInst
 14118                           
 14119                           ;Test.c: 309: printf("LEVEL -- 2s     ");
 14120  000EC8  0E9F               	movlw	low STR_105
 14121  000ECA  0100               	movlb	0	; () banked
 14122  000ECC  6F8E               	movwf	printf@f& (0+255),b
 14123  000ECE  0EFB               	movlw	high STR_105
 14124  000ED0  0100               	movlb	0	; () banked
 14125  000ED2  6F8F               	movwf	(printf@f+1)& (0+255),b
 14126  000ED4  ECC2  F00B         	call	_printf	;wreg free
 14127                           
 14128                           ;Test.c: 310: updateServoPosition(1050, 3);
 14129  000ED8  0E04               	movlw	4
 14130  000EDA  0100               	movlb	0	; () banked
 14131  000EDC  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14132  000EDE  0E1A               	movlw	26
 14133  000EE0  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14134  000EE2  0E00               	movlw	0
 14135  000EE4  0100               	movlb	0	; () banked
 14136  000EE6  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14137  000EE8  0E03               	movlw	3
 14138  000EEA  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14139  000EEC  EC6A  F026         	call	_updateServoPosition	;wreg free
 14140                           
 14141                           ;Test.c: 311: TMR3ON = 1;
 14142  000EF0  80B1               	bsf	4017,0,c	;volatile
 14143                           
 14144                           ;Test.c: 312: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 14145  000EF2  0E00               	movlw	0
 14146  000EF4  0100               	movlb	0	; () banked
 14147  000EF6  6FBA               	movwf	actuatorTest@i_1757& (0+255),b
 14148  000EF8                     l8550:
 14149                           
 14150                           ; BSR set to: 0
 14151  000EF8  0E63               	movlw	99
 14152  000EFA  0100               	movlb	0	; () banked
 14153  000EFC  65BA               	cpfsgt	actuatorTest@i_1757& (0+255),b
 14154  000EFE  D001               	goto	l8554
 14155  000F00  D00C               	goto	l8558
 14156  000F02                     l8554:
 14157                           
 14158                           ; BSR set to: 0
 14159  000F02  0E68               	movlw	104
 14160  000F04  0100               	movlb	0	; () banked
 14161  000F06  6FAB               	movwf	??_actuatorTest& (0+255),b
 14162  000F08  0EE4               	movlw	228
 14163  000F0A                     u10637:
 14164  000F0A  2EE8               	decfsz	wreg,f,c
 14165  000F0C  D7FE               	bra	u10637
 14166  000F0E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14167  000F10  D7FC               	bra	u10637
 14168  000F12  F000               	nop	
 14169  000F14  0100               	movlb	0	; () banked
 14170  000F16  2BBA               	incf	actuatorTest@i_1757& (0+255),f,b
 14171  000F18  D7EF               	goto	l8550
 14172  000F1A                     l8558:
 14173                           
 14174                           ; BSR set to: 0
 14175  000F1A  0E00               	movlw	0
 14176  000F1C  0100               	movlb	0	; () banked
 14177  000F1E  6FBB               	movwf	actuatorTest@i_1758& (0+255),b
 14178  000F20                     l8560:
 14179                           
 14180                           ; BSR set to: 0
 14181  000F20  0E63               	movlw	99
 14182  000F22  0100               	movlb	0	; () banked
 14183  000F24  65BB               	cpfsgt	actuatorTest@i_1758& (0+255),b
 14184  000F26  D001               	goto	l8564
 14185  000F28  D00C               	goto	l8568
 14186  000F2A                     l8564:
 14187                           
 14188                           ; BSR set to: 0
 14189  000F2A  0E68               	movlw	104
 14190  000F2C  0100               	movlb	0	; () banked
 14191  000F2E  6FAB               	movwf	??_actuatorTest& (0+255),b
 14192  000F30  0EE4               	movlw	228
 14193  000F32                     u10647:
 14194  000F32  2EE8               	decfsz	wreg,f,c
 14195  000F34  D7FE               	bra	u10647
 14196  000F36  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14197  000F38  D7FC               	bra	u10647
 14198  000F3A  F000               	nop	
 14199  000F3C  0100               	movlb	0	; () banked
 14200  000F3E  2BBB               	incf	actuatorTest@i_1758& (0+255),f,b
 14201  000F40  D7EF               	goto	l8560
 14202  000F42                     l8568:
 14203                           
 14204                           ; BSR set to: 0
 14205                           ;Test.c: 314: lcdInst(0b10000000);;lcdInst(0b11000000);;
 14206  000F42  0E80               	movlw	128
 14207  000F44  EC86  F02D         	call	_lcdInst
 14208  000F48  0EC0               	movlw	192
 14209  000F4A  EC86  F02D         	call	_lcdInst
 14210                           
 14211                           ;Test.c: 315: printf("DROP -- 2s      ");
 14212  000F4E  0E7D               	movlw	low STR_106
 14213  000F50  0100               	movlb	0	; () banked
 14214  000F52  6F8E               	movwf	printf@f& (0+255),b
 14215  000F54  0EFB               	movlw	high STR_106
 14216  000F56  0100               	movlb	0	; () banked
 14217  000F58  6F8F               	movwf	(printf@f+1)& (0+255),b
 14218  000F5A  ECC2  F00B         	call	_printf	;wreg free
 14219                           
 14220                           ;Test.c: 316: updateServoPosition(1260, 3);
 14221  000F5E  0E04               	movlw	4
 14222  000F60  0100               	movlb	0	; () banked
 14223  000F62  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14224  000F64  0EEC               	movlw	236
 14225  000F66  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14226  000F68  0E00               	movlw	0
 14227  000F6A  0100               	movlb	0	; () banked
 14228  000F6C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14229  000F6E  0E03               	movlw	3
 14230  000F70  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14231  000F72  EC6A  F026         	call	_updateServoPosition	;wreg free
 14232                           
 14233                           ;Test.c: 317: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 14234  000F76  0E00               	movlw	0
 14235  000F78  0100               	movlb	0	; () banked
 14236  000F7A  6FBC               	movwf	actuatorTest@i_1760& (0+255),b
 14237  000F7C                     l8576:
 14238                           
 14239                           ; BSR set to: 0
 14240  000F7C  0E63               	movlw	99
 14241  000F7E  0100               	movlb	0	; () banked
 14242  000F80  65BC               	cpfsgt	actuatorTest@i_1760& (0+255),b
 14243  000F82  D001               	goto	l8580
 14244  000F84  D00C               	goto	l8584
 14245  000F86                     l8580:
 14246                           
 14247                           ; BSR set to: 0
 14248  000F86  0E68               	movlw	104
 14249  000F88  0100               	movlb	0	; () banked
 14250  000F8A  6FAB               	movwf	??_actuatorTest& (0+255),b
 14251  000F8C  0EE4               	movlw	228
 14252  000F8E                     u10657:
 14253  000F8E  2EE8               	decfsz	wreg,f,c
 14254  000F90  D7FE               	bra	u10657
 14255  000F92  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14256  000F94  D7FC               	bra	u10657
 14257  000F96  F000               	nop	
 14258  000F98  0100               	movlb	0	; () banked
 14259  000F9A  2BBC               	incf	actuatorTest@i_1760& (0+255),f,b
 14260  000F9C  D7EF               	goto	l8576
 14261  000F9E                     l8584:
 14262                           
 14263                           ; BSR set to: 0
 14264  000F9E  0E00               	movlw	0
 14265  000FA0  0100               	movlb	0	; () banked
 14266  000FA2  6FBD               	movwf	actuatorTest@i_1761& (0+255),b
 14267  000FA4                     l8586:
 14268                           
 14269                           ; BSR set to: 0
 14270  000FA4  0E63               	movlw	99
 14271  000FA6  0100               	movlb	0	; () banked
 14272  000FA8  65BD               	cpfsgt	actuatorTest@i_1761& (0+255),b
 14273  000FAA  D001               	goto	l8590
 14274  000FAC  D00C               	goto	l8594
 14275  000FAE                     l8590:
 14276                           
 14277                           ; BSR set to: 0
 14278  000FAE  0E68               	movlw	104
 14279  000FB0  0100               	movlb	0	; () banked
 14280  000FB2  6FAB               	movwf	??_actuatorTest& (0+255),b
 14281  000FB4  0EE4               	movlw	228
 14282  000FB6                     u10667:
 14283  000FB6  2EE8               	decfsz	wreg,f,c
 14284  000FB8  D7FE               	bra	u10667
 14285  000FBA  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14286  000FBC  D7FC               	bra	u10667
 14287  000FBE  F000               	nop	
 14288  000FC0  0100               	movlb	0	; () banked
 14289  000FC2  2BBD               	incf	actuatorTest@i_1761& (0+255),f,b
 14290  000FC4  D7EF               	goto	l8586
 14291  000FC6                     l8594:
 14292                           
 14293                           ; BSR set to: 0
 14294                           ;Test.c: 319: lcdInst(0b10000000);;lcdInst(0b11000000);;
 14295  000FC6  0E80               	movlw	128
 14296  000FC8  EC86  F02D         	call	_lcdInst
 14297  000FCC  0EC0               	movlw	192
 14298  000FCE  EC86  F02D         	call	_lcdInst
 14299                           
 14300                           ;Test.c: 320: printf("LEVEL -- 2s     ");
 14301  000FD2  0E9F               	movlw	low STR_105
 14302  000FD4  0100               	movlb	0	; () banked
 14303  000FD6  6F8E               	movwf	printf@f& (0+255),b
 14304  000FD8  0EFB               	movlw	high STR_105
 14305  000FDA  0100               	movlb	0	; () banked
 14306  000FDC  6F8F               	movwf	(printf@f+1)& (0+255),b
 14307  000FDE  ECC2  F00B         	call	_printf	;wreg free
 14308                           
 14309                           ;Test.c: 321: updateServoPosition(1050, 3);
 14310  000FE2  0E04               	movlw	4
 14311  000FE4  0100               	movlb	0	; () banked
 14312  000FE6  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14313  000FE8  0E1A               	movlw	26
 14314  000FEA  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14315  000FEC  0E00               	movlw	0
 14316  000FEE  0100               	movlb	0	; () banked
 14317  000FF0  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14318  000FF2  0E03               	movlw	3
 14319  000FF4  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14320  000FF6  EC6A  F026         	call	_updateServoPosition	;wreg free
 14321                           
 14322                           ;Test.c: 322: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 14323  000FFA  0E00               	movlw	0
 14324  000FFC  0100               	movlb	0	; () banked
 14325  000FFE  6FBE               	movwf	actuatorTest@i_1763& (0+255),b
 14326  001000                     l8602:
 14327                           
 14328                           ; BSR set to: 0
 14329  001000  0E63               	movlw	99
 14330  001002  0100               	movlb	0	; () banked
 14331  001004  65BE               	cpfsgt	actuatorTest@i_1763& (0+255),b
 14332  001006  D001               	goto	l8606
 14333  001008  D00C               	goto	l8610
 14334  00100A                     l8606:
 14335                           
 14336                           ; BSR set to: 0
 14337  00100A  0E68               	movlw	104
 14338  00100C  0100               	movlb	0	; () banked
 14339  00100E  6FAB               	movwf	??_actuatorTest& (0+255),b
 14340  001010  0EE4               	movlw	228
 14341  001012                     u10677:
 14342  001012  2EE8               	decfsz	wreg,f,c
 14343  001014  D7FE               	bra	u10677
 14344  001016  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14345  001018  D7FC               	bra	u10677
 14346  00101A  F000               	nop	
 14347  00101C  0100               	movlb	0	; () banked
 14348  00101E  2BBE               	incf	actuatorTest@i_1763& (0+255),f,b
 14349  001020  D7EF               	goto	l8602
 14350  001022                     l8610:
 14351                           
 14352                           ; BSR set to: 0
 14353  001022  0E00               	movlw	0
 14354  001024  0100               	movlb	0	; () banked
 14355  001026  6FBF               	movwf	actuatorTest@i_1764& (0+255),b
 14356  001028                     l8612:
 14357                           
 14358                           ; BSR set to: 0
 14359  001028  0E63               	movlw	99
 14360  00102A  0100               	movlb	0	; () banked
 14361  00102C  65BF               	cpfsgt	actuatorTest@i_1764& (0+255),b
 14362  00102E  D001               	goto	l8616
 14363  001030  D00C               	goto	l1333
 14364  001032                     l8616:
 14365                           
 14366                           ; BSR set to: 0
 14367  001032  0E68               	movlw	104
 14368  001034  0100               	movlb	0	; () banked
 14369  001036  6FAB               	movwf	??_actuatorTest& (0+255),b
 14370  001038  0EE4               	movlw	228
 14371  00103A                     u10687:
 14372  00103A  2EE8               	decfsz	wreg,f,c
 14373  00103C  D7FE               	bra	u10687
 14374  00103E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14375  001040  D7FC               	bra	u10687
 14376  001042  F000               	nop	
 14377  001044  0100               	movlb	0	; () banked
 14378  001046  2BBF               	incf	actuatorTest@i_1764& (0+255),f,b
 14379  001048  D7EF               	goto	l8612
 14380  00104A                     l1333:
 14381                           
 14382                           ; BSR set to: 0
 14383                           ;Test.c: 323: TMR3ON = 0;
 14384  00104A  90B1               	bcf	4017,0,c	;volatile
 14385                           
 14386                           ;Test.c: 324: (INTCONbits.GIE = 0);
 14387  00104C  9EF2               	bcf	intcon,7,c	;volatile
 14388                           
 14389                           ; BSR set to: 0
 14390                           ;Test.c: 329: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 14391  00104E  0E01               	movlw	1
 14392  001050  EC86  F02D         	call	_lcdInst
 14393  001054  0E68               	movlw	104
 14394  001056  0100               	movlb	0	; () banked
 14395  001058  6FAB               	movwf	??_actuatorTest& (0+255),b
 14396  00105A  0EE4               	movlw	228
 14397  00105C                     u10697:
 14398  00105C  2EE8               	decfsz	wreg,f,c
 14399  00105E  D7FE               	bra	u10697
 14400  001060  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14401  001062  D7FC               	bra	u10697
 14402  001064  F000               	nop	
 14403  001066  0E80               	movlw	128
 14404  001068  EC86  F02D         	call	_lcdInst
 14405                           
 14406                           ;Test.c: 330: printf("TST: CAM SERVO");
 14407  00106C  0EA0               	movlw	low STR_108
 14408  00106E  0100               	movlb	0	; () banked
 14409  001070  6F8E               	movwf	printf@f& (0+255),b
 14410  001072  0EFE               	movlw	high STR_108
 14411  001074  0100               	movlb	0	; () banked
 14412  001076  6F8F               	movwf	(printf@f+1)& (0+255),b
 14413  001078  ECC2  F00B         	call	_printf	;wreg free
 14414                           
 14415                           ;Test.c: 331: lcdInst(0b11000000);;
 14416  00107C  0EC0               	movlw	192
 14417  00107E  EC86  F02D         	call	_lcdInst
 14418                           
 14419                           ;Test.c: 332: printf("CAM UP  |RC0=1");
 14420  001082  0E82               	movlw	low STR_109
 14421  001084  0100               	movlb	0	; () banked
 14422  001086  6F8E               	movwf	printf@f& (0+255),b
 14423  001088  0EFE               	movlw	high STR_109
 14424  00108A  0100               	movlb	0	; () banked
 14425  00108C  6F8F               	movwf	(printf@f+1)& (0+255),b
 14426  00108E  ECC2  F00B         	call	_printf	;wreg free
 14427                           
 14428                           ;Test.c: 333: LATCbits.LATC0 = 1;
 14429  001092  808B               	bsf	3979,0,c	;volatile
 14430                           
 14431                           ;Test.c: 334: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 14432  001094  0E00               	movlw	0
 14433  001096  0100               	movlb	0	; () banked
 14434  001098  6FC0               	movwf	actuatorTest@i_1767& (0+255),b
 14435  00109A                     l8636:
 14436                           
 14437                           ; BSR set to: 0
 14438  00109A  0E63               	movlw	99
 14439  00109C  0100               	movlb	0	; () banked
 14440  00109E  65C0               	cpfsgt	actuatorTest@i_1767& (0+255),b
 14441  0010A0  D001               	goto	l8640
 14442  0010A2  D00C               	goto	l8644
 14443  0010A4                     l8640:
 14444                           
 14445                           ; BSR set to: 0
 14446  0010A4  0E68               	movlw	104
 14447  0010A6  0100               	movlb	0	; () banked
 14448  0010A8  6FAB               	movwf	??_actuatorTest& (0+255),b
 14449  0010AA  0EE4               	movlw	228
 14450  0010AC                     u10707:
 14451  0010AC  2EE8               	decfsz	wreg,f,c
 14452  0010AE  D7FE               	bra	u10707
 14453  0010B0  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14454  0010B2  D7FC               	bra	u10707
 14455  0010B4  F000               	nop	
 14456  0010B6  0100               	movlb	0	; () banked
 14457  0010B8  2BC0               	incf	actuatorTest@i_1767& (0+255),f,b
 14458  0010BA  D7EF               	goto	l8636
 14459  0010BC                     l8644:
 14460                           
 14461                           ; BSR set to: 0
 14462  0010BC  0E00               	movlw	0
 14463  0010BE  0100               	movlb	0	; () banked
 14464  0010C0  6FC1               	movwf	actuatorTest@i_1768& (0+255),b
 14465  0010C2                     l8646:
 14466                           
 14467                           ; BSR set to: 0
 14468  0010C2  0E63               	movlw	99
 14469  0010C4  0100               	movlb	0	; () banked
 14470  0010C6  65C1               	cpfsgt	actuatorTest@i_1768& (0+255),b
 14471  0010C8  D001               	goto	l8650
 14472  0010CA  D00C               	goto	l8654
 14473  0010CC                     l8650:
 14474                           
 14475                           ; BSR set to: 0
 14476  0010CC  0E68               	movlw	104
 14477  0010CE  0100               	movlb	0	; () banked
 14478  0010D0  6FAB               	movwf	??_actuatorTest& (0+255),b
 14479  0010D2  0EE4               	movlw	228
 14480  0010D4                     u10717:
 14481  0010D4  2EE8               	decfsz	wreg,f,c
 14482  0010D6  D7FE               	bra	u10717
 14483  0010D8  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14484  0010DA  D7FC               	bra	u10717
 14485  0010DC  F000               	nop	
 14486  0010DE  0100               	movlb	0	; () banked
 14487  0010E0  2BC1               	incf	actuatorTest@i_1768& (0+255),f,b
 14488  0010E2  D7EF               	goto	l8646
 14489  0010E4                     l8654:
 14490                           
 14491                           ; BSR set to: 0
 14492                           ;Test.c: 335: lcdInst(0b10000000);;lcdInst(0b11000000);;
 14493  0010E4  0E80               	movlw	128
 14494  0010E6  EC86  F02D         	call	_lcdInst
 14495  0010EA  0EC0               	movlw	192
 14496  0010EC  EC86  F02D         	call	_lcdInst
 14497                           
 14498                           ;Test.c: 336: printf("CAM DWN |RC0=0");
 14499  0010F0  0E73               	movlw	low STR_110
 14500  0010F2  0100               	movlb	0	; () banked
 14501  0010F4  6F8E               	movwf	printf@f& (0+255),b
 14502  0010F6  0EFE               	movlw	high STR_110
 14503  0010F8  0100               	movlb	0	; () banked
 14504  0010FA  6F8F               	movwf	(printf@f+1)& (0+255),b
 14505  0010FC  ECC2  F00B         	call	_printf	;wreg free
 14506                           
 14507                           ;Test.c: 339: for(i=0;i<10000;i++)
 14508  001100  0E00               	movlw	0
 14509  001102  0100               	movlb	0	; () banked
 14510  001104  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 14511  001106  0E00               	movlw	0
 14512  001108  6FC4               	movwf	actuatorTest@i& (0+255),b
 14513  00110A                     l8660:
 14514                           
 14515                           ; BSR set to: 0
 14516  00110A  0100               	movlb	0	; () banked
 14517  00110C  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 14518  00110E  D008               	goto	l1338
 14519  001110  0E10               	movlw	16
 14520  001112  0100               	movlb	0	; () banked
 14521  001114  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 14522  001116  0E27               	movlw	39
 14523  001118  0100               	movlb	0	; () banked
 14524  00111A  59C5               	subwfb	(actuatorTest@i+1)& (0+255),w,b
 14525  00111C  B0D8               	btfsc	status,0,c
 14526  00111E  D00D               	goto	l8670
 14527  001120                     l1338:
 14528                           
 14529                           ; BSR set to: 0
 14530                           ;Test.c: 340: {
 14531                           ;Test.c: 341: LATCbits.LATC0 = 1;
 14532  001120  808B               	bsf	3979,0,c	;volatile
 14533                           
 14534                           ; BSR set to: 0
 14535                           ;Test.c: 342: _delay((unsigned long)((10)*(32000000/4000000.0)));
 14536  001122  0E1A               	movlw	26
 14537  001124                     u10727:
 14538  001124  2EE8               	decfsz	wreg,f,c
 14539  001126  D7FE               	bra	u10727
 14540  001128  D000               	nop2	
 14541                           
 14542                           ;Test.c: 343: LATCbits.LATC0 = 0;
 14543  00112A  908B               	bcf	3979,0,c	;volatile
 14544                           
 14545                           ;Test.c: 344: _delay((unsigned long)((90)*(32000000/4000000.0)));
 14546  00112C  0EF0               	movlw	240
 14547  00112E                     u10737:
 14548  00112E  2EE8               	decfsz	wreg,f,c
 14549  001130  D7FE               	bra	u10737
 14550  001132  0100               	movlb	0	; () banked
 14551  001134  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 14552  001136  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 14553  001138  D7E8               	goto	l8660
 14554  00113A                     l8670:
 14555                           
 14556                           ; BSR set to: 0
 14557                           ;Test.c: 345: }
 14558                           ;Test.c: 347: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 14559  00113A  0E00               	movlw	0
 14560  00113C  0100               	movlb	0	; () banked
 14561  00113E  6FC2               	movwf	actuatorTest@i_1770& (0+255),b
 14562  001140                     l8672:
 14563                           
 14564                           ; BSR set to: 0
 14565  001140  0E63               	movlw	99
 14566  001142  0100               	movlb	0	; () banked
 14567  001144  65C2               	cpfsgt	actuatorTest@i_1770& (0+255),b
 14568  001146  D001               	goto	l8676
 14569  001148  D00C               	goto	l8680
 14570  00114A                     l8676:
 14571                           
 14572                           ; BSR set to: 0
 14573  00114A  0E68               	movlw	104
 14574  00114C  0100               	movlb	0	; () banked
 14575  00114E  6FAB               	movwf	??_actuatorTest& (0+255),b
 14576  001150  0EE4               	movlw	228
 14577  001152                     u10747:
 14578  001152  2EE8               	decfsz	wreg,f,c
 14579  001154  D7FE               	bra	u10747
 14580  001156  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14581  001158  D7FC               	bra	u10747
 14582  00115A  F000               	nop	
 14583  00115C  0100               	movlb	0	; () banked
 14584  00115E  2BC2               	incf	actuatorTest@i_1770& (0+255),f,b
 14585  001160  D7EF               	goto	l8672
 14586  001162                     l8680:
 14587                           
 14588                           ; BSR set to: 0
 14589  001162  0E00               	movlw	0
 14590  001164  0100               	movlb	0	; () banked
 14591  001166  6FC3               	movwf	actuatorTest@i_1771& (0+255),b
 14592  001168                     l8682:
 14593                           
 14594                           ; BSR set to: 0
 14595  001168  0E63               	movlw	99
 14596  00116A  0100               	movlb	0	; () banked
 14597  00116C  65C3               	cpfsgt	actuatorTest@i_1771& (0+255),b
 14598  00116E  D001               	goto	l8686
 14599  001170  D00C               	goto	l8690
 14600  001172                     l8686:
 14601                           
 14602                           ; BSR set to: 0
 14603  001172  0E68               	movlw	104
 14604  001174  0100               	movlb	0	; () banked
 14605  001176  6FAB               	movwf	??_actuatorTest& (0+255),b
 14606  001178  0EE4               	movlw	228
 14607  00117A                     u10757:
 14608  00117A  2EE8               	decfsz	wreg,f,c
 14609  00117C  D7FE               	bra	u10757
 14610  00117E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 14611  001180  D7FC               	bra	u10757
 14612  001182  F000               	nop	
 14613  001184  0100               	movlb	0	; () banked
 14614  001186  2BC3               	incf	actuatorTest@i_1771& (0+255),f,b
 14615  001188  D7EF               	goto	l8682
 14616  00118A                     l8690:
 14617                           
 14618                           ; BSR set to: 0
 14619                           ;Test.c: 348: machine_state = Testing_state;
 14620  00118A  0E03               	movlw	3
 14621  00118C  0100               	movlb	0	; () banked
 14622  00118E  6FFC               	movwf	_machine_state& (0+255),b
 14623                           
 14624                           ; BSR set to: 0
 14625  001190  0012               	return		;funcret
 14626  001192                     __end_of_actuatorTest:
 14627                           	opt stack 0
 14628                           tblptru	equ	0xFF8
 14629                           tblptrh	equ	0xFF7
 14630                           tblptrl	equ	0xFF6
 14631                           tablat	equ	0xFF5
 14632                           prodh	equ	0xFF4
 14633                           prodl	equ	0xFF3
 14634                           intcon	equ	0xFF2
 14635                           intcon2	equ	0xFF1
 14636                           intcon3	equ	0xFF0
 14637                           postinc0	equ	0xFEE
 14638                           wreg	equ	0xFE8
 14639                           postdec1	equ	0xFE5
 14640                           fsr1l	equ	0xFE1
 14641                           indf2	equ	0xFDF
 14642                           postinc2	equ	0xFDE
 14643                           postdec2	equ	0xFDD
 14644                           fsr2h	equ	0xFDA
 14645                           fsr2l	equ	0xFD9
 14646                           status	equ	0xFD8
 14647                           
 14648 ;; *************** function _SpeedTest *****************
 14649 ;; Defined at:
 14650 ;;		line 541 in file "Test.c"
 14651 ;; Parameters:    Size  Location     Type
 14652 ;;		None
 14653 ;; Auto vars:     Size  Location     Type
 14654 ;;		None
 14655 ;; Return value:  Size  Location     Type
 14656 ;;                  1    wreg      void 
 14657 ;; Registers used:
 14658 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14659 ;; Tracked objects:
 14660 ;;		On entry : 0/0
 14661 ;;		On exit  : 0/0
 14662 ;;		Unchanged: 0/0
 14663 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14664 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14665 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14666 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14667 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14668 ;;Total ram usage:        1 bytes
 14669 ;; Hardware stack levels used:    1
 14670 ;; Hardware stack levels required when called:   10
 14671 ;; This function calls:
 14672 ;;		_lcdInst
 14673 ;;		_printf
 14674 ;; This function is called by:
 14675 ;;		_Test
 14676 ;; This function uses a non-reentrant model
 14677 ;;
 14678                           
 14679                           	psect	text46
 14680  004D5A                     __ptext46:
 14681                           	opt stack 0
 14682  004D5A                     _SpeedTest:
 14683                           	opt stack 19
 14684                           
 14685                           ;Test.c: 543: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 14686                           
 14687                           ; BSR set to: 0
 14688                           ;incstack = 0
 14689  004D5A  0E01               	movlw	1
 14690  004D5C  EC86  F02D         	call	_lcdInst
 14691  004D60  0E68               	movlw	104
 14692  004D62  0100               	movlb	0	; () banked
 14693  004D64  6FAB               	movwf	??_SpeedTest& (0+255),b
 14694  004D66  0EE4               	movlw	228
 14695  004D68                     u10767:
 14696  004D68  2EE8               	decfsz	wreg,f,c
 14697  004D6A  D7FE               	bra	u10767
 14698  004D6C  2FAB               	decfsz	??_SpeedTest& (0+255),f,b
 14699  004D6E  D7FC               	bra	u10767
 14700  004D70  F000               	nop	
 14701  004D72  0E80               	movlw	128
 14702  004D74  EC86  F02D         	call	_lcdInst
 14703                           
 14704                           ;Test.c: 544: printf("S: D WILL RETURN ");
 14705  004D78  0E12               	movlw	low STR_121
 14706  004D7A  0100               	movlb	0	; () banked
 14707  004D7C  6F8E               	movwf	printf@f& (0+255),b
 14708  004D7E  0EFB               	movlw	high STR_121
 14709  004D80  0100               	movlb	0	; () banked
 14710  004D82  6F8F               	movwf	(printf@f+1)& (0+255),b
 14711  004D84  ECC2  F00B         	call	_printf	;wreg free
 14712                           
 14713                           ;Test.c: 545: lcdInst(0b11000000);;
 14714  004D88  0EC0               	movlw	192
 14715  004D8A  EC86  F02D         	call	_lcdInst
 14716                           
 14717                           ;Test.c: 546: printf("OTHER SETS RA5   ");
 14718  004D8E  0E00               	movlw	low STR_122
 14719  004D90  0100               	movlb	0	; () banked
 14720  004D92  6F8E               	movwf	printf@f& (0+255),b
 14721  004D94  0EFB               	movlw	high STR_122
 14722  004D96  0100               	movlb	0	; () banked
 14723  004D98  6F8F               	movwf	(printf@f+1)& (0+255),b
 14724  004D9A  ECC2  F00B         	call	_printf	;wreg free
 14725  004D9E                     l1409:
 14726  004D9E  A281               	btfss	3969,1,c	;volatile
 14727  004DA0  D7FE               	goto	l1409
 14728                           
 14729                           ;Test.c: 551: }
 14730                           ;Test.c: 552: if(PORTB >> 4 == 0b1111){
 14731  004DA2  3881               	swapf	3969,w,c	;volatile
 14732  004DA4  0B0F               	andlw	15
 14733  004DA6  0A0F               	xorlw	15
 14734  004DA8  B4D8               	btfsc	status,2,c
 14735  004DAA  0012               	return	
 14736  004DAC  D014               	goto	l8786
 14737  004DAE                     l1416:
 14738                           
 14739                           ;Test.c: 557: LATBbits.LATB2 = 1;
 14740  004DAE  848A               	bsf	3978,2,c	;volatile
 14741                           
 14742                           ;Test.c: 558: _delay((unsigned long)((5)*(32000000/4000.0)));
 14743  004DB0  0E34               	movlw	52
 14744  004DB2  0100               	movlb	0	; () banked
 14745  004DB4  6FAB               	movwf	??_SpeedTest& (0+255),b
 14746  004DB6  0EF1               	movlw	241
 14747  004DB8                     u10777:
 14748  004DB8  2EE8               	decfsz	wreg,f,c
 14749  004DBA  D7FE               	bra	u10777
 14750  004DBC  2FAB               	decfsz	??_SpeedTest& (0+255),f,b
 14751  004DBE  D7FC               	bra	u10777
 14752  004DC0  D000               	nop2	
 14753                           
 14754                           ;Test.c: 559: LATBbits.LATB2 = 0;
 14755  004DC2  948A               	bcf	3978,2,c	;volatile
 14756                           
 14757                           ;Test.c: 560: _delay((unsigned long)((5)*(32000000/4000.0)));
 14758  004DC4  0E34               	movlw	52
 14759  004DC6  0100               	movlb	0	; () banked
 14760  004DC8  6FAB               	movwf	??_SpeedTest& (0+255),b
 14761  004DCA  0EF1               	movlw	241
 14762  004DCC                     u10787:
 14763  004DCC  2EE8               	decfsz	wreg,f,c
 14764  004DCE  D7FE               	bra	u10787
 14765  004DD0  2FAB               	decfsz	??_SpeedTest& (0+255),f,b
 14766  004DD2  D7FC               	bra	u10787
 14767  004DD4  D000               	nop2	
 14768  004DD6                     l8786:
 14769  004DD6  B281               	btfsc	3969,1,c	;volatile
 14770  004DD8  D7EA               	goto	l1416
 14771                           
 14772                           ;Test.c: 563: }
 14773                           ;Test.c: 564: LATBbits.LATB2 = 0;
 14774  004DDA  948A               	bcf	3978,2,c	;volatile
 14775  004DDC  D7E0               	goto	l1409
 14776  004DDE                     __end_of_SpeedTest:
 14777                           	opt stack 0
 14778                           tblptru	equ	0xFF8
 14779                           tblptrh	equ	0xFF7
 14780                           tblptrl	equ	0xFF6
 14781                           tablat	equ	0xFF5
 14782                           prodh	equ	0xFF4
 14783                           prodl	equ	0xFF3
 14784                           intcon	equ	0xFF2
 14785                           intcon2	equ	0xFF1
 14786                           intcon3	equ	0xFF0
 14787                           postinc0	equ	0xFEE
 14788                           wreg	equ	0xFE8
 14789                           postdec1	equ	0xFE5
 14790                           fsr1l	equ	0xFE1
 14791                           indf2	equ	0xFDF
 14792                           postinc2	equ	0xFDE
 14793                           postdec2	equ	0xFDD
 14794                           fsr2h	equ	0xFDA
 14795                           fsr2l	equ	0xFD9
 14796                           status	equ	0xFD8
 14797                           
 14798 ;; *************** function _PortTestPusher *****************
 14799 ;; Defined at:
 14800 ;;		line 682 in file "Test.c"
 14801 ;; Parameters:    Size  Location     Type
 14802 ;;		None
 14803 ;; Auto vars:     Size  Location     Type
 14804 ;;		None
 14805 ;; Return value:  Size  Location     Type
 14806 ;;                  1    wreg      void 
 14807 ;; Registers used:
 14808 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14809 ;; Tracked objects:
 14810 ;;		On entry : 0/0
 14811 ;;		On exit  : 0/0
 14812 ;;		Unchanged: 0/0
 14813 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14814 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14815 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14816 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14817 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14818 ;;Total ram usage:        1 bytes
 14819 ;; Hardware stack levels used:    1
 14820 ;; Hardware stack levels required when called:   10
 14821 ;; This function calls:
 14822 ;;		_lcdInst
 14823 ;;		_printf
 14824 ;; This function is called by:
 14825 ;;		_Test
 14826 ;; This function uses a non-reentrant model
 14827 ;;
 14828                           
 14829                           	psect	text47
 14830  0051B4                     __ptext47:
 14831                           	opt stack 0
 14832  0051B4                     _PortTestPusher:
 14833                           	opt stack 19
 14834                           
 14835                           ;Test.c: 683: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 14836                           
 14837                           ;incstack = 0
 14838  0051B4  0E01               	movlw	1
 14839  0051B6  EC86  F02D         	call	_lcdInst
 14840  0051BA  0E68               	movlw	104
 14841  0051BC  0100               	movlb	0	; () banked
 14842  0051BE  6FAB               	movwf	??_PortTestPusher& (0+255),b
 14843  0051C0  0EE4               	movlw	228
 14844  0051C2                     u10797:
 14845  0051C2  2EE8               	decfsz	wreg,f,c
 14846  0051C4  D7FE               	bra	u10797
 14847  0051C6  2FAB               	decfsz	??_PortTestPusher& (0+255),f,b
 14848  0051C8  D7FC               	bra	u10797
 14849  0051CA  F000               	nop	
 14850  0051CC  0E80               	movlw	128
 14851  0051CE  EC86  F02D         	call	_lcdInst
 14852                           
 14853                           ;Test.c: 684: printf("D WILL RETURN    ");
 14854  0051D2  0EEE               	movlw	low STR_112
 14855  0051D4  0100               	movlb	0	; () banked
 14856  0051D6  6F8E               	movwf	printf@f& (0+255),b
 14857  0051D8  0EFA               	movlw	high STR_112
 14858  0051DA  0100               	movlb	0	; () banked
 14859  0051DC  6F8F               	movwf	(printf@f+1)& (0+255),b
 14860  0051DE  ECC2  F00B         	call	_printf	;wreg free
 14861                           
 14862                           ;Test.c: 685: lcdInst(0b11000000);;
 14863  0051E2  0EC0               	movlw	192
 14864  0051E4  EC86  F02D         	call	_lcdInst
 14865                           
 14866                           ;Test.c: 686: printf("OTHER SETS PUSHER");
 14867  0051E8  0E36               	movlw	low STR_130
 14868  0051EA  0100               	movlb	0	; () banked
 14869  0051EC  6F8E               	movwf	printf@f& (0+255),b
 14870  0051EE  0EFB               	movlw	high STR_130
 14871  0051F0  0100               	movlb	0	; () banked
 14872  0051F2  6F8F               	movwf	(printf@f+1)& (0+255),b
 14873  0051F4  ECC2  F00B         	call	_printf	;wreg free
 14874  0051F8                     l1470:
 14875  0051F8  A281               	btfss	3969,1,c	;volatile
 14876  0051FA  D7FE               	goto	l1470
 14877                           
 14878                           ;Test.c: 691: }
 14879                           ;Test.c: 692: if(PORTB >> 4 == 0b1111){
 14880  0051FC  3881               	swapf	3969,w,c	;volatile
 14881  0051FE  0B0F               	andlw	15
 14882  005200  0A0F               	xorlw	15
 14883  005202  B4D8               	btfsc	status,2,c
 14884  005204  0012               	return	
 14885                           
 14886                           ;Test.c: 695: else{
 14887                           ;Test.c: 696: LATAbits.LATA4 = 1;
 14888                           
 14889                           ;Test.c: 694: }
 14890                           
 14891                           ;Test.c: 693: break;
 14892  005206  8889               	bsf	3977,4,c	;volatile
 14893  005208                     l1476:
 14894  005208  B281               	btfsc	3969,1,c	;volatile
 14895  00520A  D7FE               	goto	l1476
 14896                           
 14897                           ;Test.c: 699: }
 14898                           ;Test.c: 700: LATAbits.LATA4 = 0;
 14899  00520C  9889               	bcf	3977,4,c	;volatile
 14900  00520E  D7F4               	goto	l1470
 14901  005210                     __end_of_PortTestPusher:
 14902                           	opt stack 0
 14903                           tblptru	equ	0xFF8
 14904                           tblptrh	equ	0xFF7
 14905                           tblptrl	equ	0xFF6
 14906                           tablat	equ	0xFF5
 14907                           prodh	equ	0xFF4
 14908                           prodl	equ	0xFF3
 14909                           intcon	equ	0xFF2
 14910                           intcon2	equ	0xFF1
 14911                           intcon3	equ	0xFF0
 14912                           postinc0	equ	0xFEE
 14913                           wreg	equ	0xFE8
 14914                           postdec1	equ	0xFE5
 14915                           fsr1l	equ	0xFE1
 14916                           indf2	equ	0xFDF
 14917                           postinc2	equ	0xFDE
 14918                           postdec2	equ	0xFDD
 14919                           fsr2h	equ	0xFDA
 14920                           fsr2l	equ	0xFD9
 14921                           status	equ	0xFD8
 14922                           
 14923 ;; *************** function _PortTestDC *****************
 14924 ;; Defined at:
 14925 ;;		line 411 in file "Test.c"
 14926 ;; Parameters:    Size  Location     Type
 14927 ;;		None
 14928 ;; Auto vars:     Size  Location     Type
 14929 ;;		None
 14930 ;; Return value:  Size  Location     Type
 14931 ;;                  1    wreg      void 
 14932 ;; Registers used:
 14933 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14934 ;; Tracked objects:
 14935 ;;		On entry : 0/0
 14936 ;;		On exit  : 0/0
 14937 ;;		Unchanged: 0/0
 14938 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14939 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14940 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14941 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14942 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14943 ;;Total ram usage:        1 bytes
 14944 ;; Hardware stack levels used:    1
 14945 ;; Hardware stack levels required when called:   10
 14946 ;; This function calls:
 14947 ;;		_lcdInst
 14948 ;;		_printf
 14949 ;; This function is called by:
 14950 ;;		_Test
 14951 ;; This function uses a non-reentrant model
 14952 ;;
 14953                           
 14954                           	psect	text48
 14955  005210                     __ptext48:
 14956                           	opt stack 0
 14957  005210                     _PortTestDC:
 14958                           	opt stack 19
 14959                           
 14960                           ;Test.c: 412: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 14961                           
 14962                           ;incstack = 0
 14963  005210  0E01               	movlw	1
 14964  005212  EC86  F02D         	call	_lcdInst
 14965  005216  0E68               	movlw	104
 14966  005218  0100               	movlb	0	; () banked
 14967  00521A  6FAB               	movwf	??_PortTestDC& (0+255),b
 14968  00521C  0EE4               	movlw	228
 14969  00521E                     u10807:
 14970  00521E  2EE8               	decfsz	wreg,f,c
 14971  005220  D7FE               	bra	u10807
 14972  005222  2FAB               	decfsz	??_PortTestDC& (0+255),f,b
 14973  005224  D7FC               	bra	u10807
 14974  005226  F000               	nop	
 14975  005228  0E80               	movlw	128
 14976  00522A  EC86  F02D         	call	_lcdInst
 14977                           
 14978                           ;Test.c: 413: printf("D WILL RETURN    ");
 14979  00522E  0EEE               	movlw	low STR_112
 14980  005230  0100               	movlb	0	; () banked
 14981  005232  6F8E               	movwf	printf@f& (0+255),b
 14982  005234  0EFA               	movlw	high STR_112
 14983  005236  0100               	movlb	0	; () banked
 14984  005238  6F8F               	movwf	(printf@f+1)& (0+255),b
 14985  00523A  ECC2  F00B         	call	_printf	;wreg free
 14986                           
 14987                           ;Test.c: 414: lcdInst(0b11000000);;
 14988  00523E  0EC0               	movlw	192
 14989  005240  EC86  F02D         	call	_lcdInst
 14990                           
 14991                           ;Test.c: 415: printf("OTHER SETS DC   ");
 14992  005244  0ED2               	movlw	low STR_113
 14993  005246  0100               	movlb	0	; () banked
 14994  005248  6F8E               	movwf	printf@f& (0+255),b
 14995  00524A  0EFB               	movlw	high STR_113
 14996  00524C  0100               	movlb	0	; () banked
 14997  00524E  6F8F               	movwf	(printf@f+1)& (0+255),b
 14998  005250  ECC2  F00B         	call	_printf	;wreg free
 14999  005254                     l1351:
 15000  005254  A281               	btfss	3969,1,c	;volatile
 15001  005256  D7FE               	goto	l1351
 15002                           
 15003                           ;Test.c: 420: }
 15004                           ;Test.c: 421: if(PORTB >> 4 == 0b1111){
 15005  005258  3881               	swapf	3969,w,c	;volatile
 15006  00525A  0B0F               	andlw	15
 15007  00525C  0A0F               	xorlw	15
 15008  00525E  B4D8               	btfsc	status,2,c
 15009  005260  0012               	return	
 15010                           
 15011                           ;Test.c: 424: else{
 15012                           ;Test.c: 425: LATBbits.LATB2 = 1;
 15013                           
 15014                           ;Test.c: 423: }
 15015                           
 15016                           ;Test.c: 422: break;
 15017  005262  848A               	bsf	3978,2,c	;volatile
 15018  005264                     l1357:
 15019  005264  B281               	btfsc	3969,1,c	;volatile
 15020  005266  D7FE               	goto	l1357
 15021                           
 15022                           ;Test.c: 428: }
 15023                           ;Test.c: 429: LATBbits.LATB2 = 0;
 15024  005268  948A               	bcf	3978,2,c	;volatile
 15025  00526A  D7F4               	goto	l1351
 15026  00526C                     __end_of_PortTestDC:
 15027                           	opt stack 0
 15028                           tblptru	equ	0xFF8
 15029                           tblptrh	equ	0xFF7
 15030                           tblptrl	equ	0xFF6
 15031                           tablat	equ	0xFF5
 15032                           prodh	equ	0xFF4
 15033                           prodl	equ	0xFF3
 15034                           intcon	equ	0xFF2
 15035                           intcon2	equ	0xFF1
 15036                           intcon3	equ	0xFF0
 15037                           postinc0	equ	0xFEE
 15038                           wreg	equ	0xFE8
 15039                           postdec1	equ	0xFE5
 15040                           fsr1l	equ	0xFE1
 15041                           indf2	equ	0xFDF
 15042                           postinc2	equ	0xFDE
 15043                           postdec2	equ	0xFDD
 15044                           fsr2h	equ	0xFDA
 15045                           fsr2l	equ	0xFD9
 15046                           status	equ	0xFD8
 15047                           
 15048 ;; *************** function _PlatformTest *****************
 15049 ;; Defined at:
 15050 ;;		line 434 in file "Test.c"
 15051 ;; Parameters:    Size  Location     Type
 15052 ;;		None
 15053 ;; Auto vars:     Size  Location     Type
 15054 ;;  i               2   51[BANK0 ] int 
 15055 ;;  i               2   49[BANK0 ] int 
 15056 ;;  res             2   47[BANK0 ] int 
 15057 ;;  res             2   45[BANK0 ] int 
 15058 ;;  on              2   53[BANK0 ] int 
 15059 ;; Return value:  Size  Location     Type
 15060 ;;                  1    wreg      void 
 15061 ;; Registers used:
 15062 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15063 ;; Tracked objects:
 15064 ;;		On entry : 0/0
 15065 ;;		On exit  : 0/0
 15066 ;;		Unchanged: 0/0
 15067 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15068 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15069 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15070 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15071 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15072 ;;Total ram usage:       12 bytes
 15073 ;; Hardware stack levels used:    1
 15074 ;; Hardware stack levels required when called:   10
 15075 ;; This function calls:
 15076 ;;		_lcdInst
 15077 ;;		_printf
 15078 ;;		_readADC
 15079 ;;		_stopSignals
 15080 ;; This function is called by:
 15081 ;;		_Test
 15082 ;; This function uses a non-reentrant model
 15083 ;;
 15084                           
 15085                           	psect	text49
 15086  0026B2                     __ptext49:
 15087                           	opt stack 0
 15088  0026B2                     _PlatformTest:
 15089                           	opt stack 19
 15090                           
 15091                           ;Test.c: 435: LATCbits.LATC5 = 1;
 15092                           
 15093                           ;incstack = 0
 15094  0026B2  8A8B               	bsf	3979,5,c	;volatile
 15095                           
 15096                           ;Test.c: 437: machine_state = Sorting_state;
 15097  0026B4  0E01               	movlw	1
 15098  0026B6  0100               	movlb	0	; () banked
 15099  0026B8  6FFC               	movwf	_machine_state& (0+255),b
 15100                           
 15101                           ;Test.c: 438: f_arm_position = 0;
 15102  0026BA  0E00               	movlw	0
 15103  0026BC  0100               	movlb	0	; () banked
 15104  0026BE  6FE9               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
 15105  0026C0  0E00               	movlw	0
 15106  0026C2  6FE8               	movwf	_f_arm_position& (0+255),b	;volatile
 15107                           
 15108                           ;Test.c: 439: timer2_counter = 0;
 15109  0026C4  0E00               	movlw	0
 15110  0026C6  6E74               	movwf	_timer2_counter+1,c	;volatile
 15111  0026C8  0E00               	movlw	0
 15112  0026CA  6E73               	movwf	_timer2_counter,c	;volatile
 15113                           
 15114                           ; BSR set to: 0
 15115                           ;Test.c: 440: LATBbits.LATB3 = 0;
 15116  0026CC  968A               	bcf	3978,3,c	;volatile
 15117                           
 15118                           ; BSR set to: 0
 15119                           ;Test.c: 441: TMR2ON = 1;
 15120  0026CE  84CA               	bsf	4042,2,c	;volatile
 15121                           
 15122                           ;Test.c: 442: was_low_2 = 0;
 15123  0026D0  0E00               	movlw	0
 15124  0026D2  6E7A               	movwf	_was_low_2+1,c	;volatile
 15125  0026D4  0E00               	movlw	0
 15126  0026D6  6E79               	movwf	_was_low_2,c	;volatile
 15127                           
 15128                           ;Test.c: 444: int on = 1;
 15129  0026D8  0E00               	movlw	0
 15130  0026DA  0100               	movlb	0	; () banked
 15131  0026DC  6FB6               	movwf	(PlatformTest@on+1)& (0+255),b
 15132  0026DE  0E01               	movlw	1
 15133  0026E0  6FB5               	movwf	PlatformTest@on& (0+255),b
 15134                           
 15135                           ; BSR set to: 0
 15136                           ;Test.c: 445: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 15137  0026E2  0E01               	movlw	1
 15138  0026E4  EC86  F02D         	call	_lcdInst
 15139  0026E8  0E68               	movlw	104
 15140  0026EA  0100               	movlb	0	; () banked
 15141  0026EC  6FAB               	movwf	??_PlatformTest& (0+255),b
 15142  0026EE  0EE4               	movlw	228
 15143  0026F0                     u10817:
 15144  0026F0  2EE8               	decfsz	wreg,f,c
 15145  0026F2  D7FE               	bra	u10817
 15146  0026F4  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 15147  0026F6  D7FC               	bra	u10817
 15148  0026F8  F000               	nop	
 15149  0026FA  0E80               	movlw	128
 15150  0026FC  EC86  F02D         	call	_lcdInst
 15151                           
 15152                           ;Test.c: 446: printf("1: DC | A: ARM  ");
 15153  002700  0E05               	movlw	low STR_114
 15154  002702  0100               	movlb	0	; () banked
 15155  002704  6F8E               	movwf	printf@f& (0+255),b
 15156  002706  0EFC               	movlw	high STR_114
 15157  002708  0100               	movlb	0	; () banked
 15158  00270A  6F8F               	movwf	(printf@f+1)& (0+255),b
 15159  00270C  ECC2  F00B         	call	_printf	;wreg free
 15160                           
 15161                           ;Test.c: 448: while(PORTBbits.RB1 == 0){
 15162  002710  D058               	goto	l8840
 15163  002712                     l8822:
 15164                           
 15165                           ;Test.c: 449: readADC(0);
 15166  002712  0E00               	movlw	0
 15167  002714  EC7C  F02C         	call	_readADC
 15168                           
 15169                           ;Test.c: 450: int res = ADRESH<<8 | ADRESL;
 15170  002718  50C3               	movf	4035,w,c	;volatile
 15171  00271A  CFC4 F0AB          	movff	4036,??_PlatformTest	;volatile
 15172  00271E  0100               	movlb	0	; () banked
 15173  002720  6BAC               	clrf	(??_PlatformTest+1)& (0+255),b
 15174  002722  C0AB  F0AC         	movff	??_PlatformTest,??_PlatformTest+1
 15175  002726  0100               	movlb	0	; () banked
 15176  002728  6BAB               	clrf	??_PlatformTest& (0+255),b
 15177  00272A  0100               	movlb	0	; () banked
 15178  00272C  11AB               	iorwf	??_PlatformTest& (0+255),w,b
 15179  00272E  0100               	movlb	0	; () banked
 15180  002730  6FAD               	movwf	PlatformTest@res& (0+255),b
 15181  002732  0100               	movlb	0	; () banked
 15182  002734  51AC               	movf	(??_PlatformTest+1)& (0+255),w,b
 15183  002736  0100               	movlb	0	; () banked
 15184  002738  6FAE               	movwf	(PlatformTest@res+1)& (0+255),b
 15185                           
 15186                           ; BSR set to: 0
 15187                           ;Test.c: 451: IR_signal = (res > 800) ? 1 : 0;
 15188  00273A  0100               	movlb	0	; () banked
 15189  00273C  BFAE               	btfsc	(PlatformTest@res+1)& (0+255),7,b
 15190  00273E  D00A               	goto	u7820
 15191  002740  0E21               	movlw	33
 15192  002742  0100               	movlb	0	; () banked
 15193  002744  5DAD               	subwf	PlatformTest@res& (0+255),w,b
 15194  002746  0E03               	movlw	3
 15195  002748  0100               	movlb	0	; () banked
 15196  00274A  59AE               	subwfb	(PlatformTest@res+1)& (0+255),w,b
 15197  00274C  A0D8               	btfss	status,0,c
 15198  00274E  D002               	goto	u7820
 15199  002750  0E01               	movlw	1
 15200  002752  D001               	goto	u7830
 15201  002754                     u7820:
 15202  002754  0E00               	movlw	0
 15203  002756                     u7830:
 15204  002756  0100               	movlb	0	; () banked
 15205  002758  6FE0               	movwf	_IR_signal& (0+255),b
 15206  00275A  6BE1               	clrf	(_IR_signal+1)& (0+255),b
 15207                           
 15208                           ;Test.c: 453: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 15209  00275C  0E01               	movlw	1
 15210  00275E  EC86  F02D         	call	_lcdInst
 15211  002762  0E68               	movlw	104
 15212  002764  0100               	movlb	0	; () banked
 15213  002766  6FAB               	movwf	??_PlatformTest& (0+255),b
 15214  002768  0EE4               	movlw	228
 15215  00276A                     u10827:
 15216  00276A  2EE8               	decfsz	wreg,f,c
 15217  00276C  D7FE               	bra	u10827
 15218  00276E  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 15219  002770  D7FC               	bra	u10827
 15220  002772  F000               	nop	
 15221  002774  0E80               	movlw	128
 15222  002776  EC86  F02D         	call	_lcdInst
 15223                           
 15224                           ;Test.c: 454: printf("1: DC | A: ARM  ");
 15225  00277A  0E05               	movlw	low STR_114
 15226  00277C  0100               	movlb	0	; () banked
 15227  00277E  6F8E               	movwf	printf@f& (0+255),b
 15228  002780  0EFC               	movlw	high STR_114
 15229  002782  0100               	movlb	0	; () banked
 15230  002784  6F8F               	movwf	(printf@f+1)& (0+255),b
 15231  002786  ECC2  F00B         	call	_printf	;wreg free
 15232                           
 15233                           ;Test.c: 455: lcdInst(0b11000000);;
 15234  00278A  0EC0               	movlw	192
 15235  00278C  EC86  F02D         	call	_lcdInst
 15236                           
 15237                           ;Test.c: 456: printf("5:H|6:L|IR:%d   ", res);
 15238  002790  0EF4               	movlw	low STR_116
 15239  002792  0100               	movlb	0	; () banked
 15240  002794  6F8E               	movwf	printf@f& (0+255),b
 15241  002796  0EFB               	movlw	high STR_116
 15242  002798  0100               	movlb	0	; () banked
 15243  00279A  6F8F               	movwf	(printf@f+1)& (0+255),b
 15244  00279C  C0AD  F090         	movff	PlatformTest@res,?_printf+2
 15245  0027A0  C0AE  F091         	movff	PlatformTest@res+1,?_printf+3
 15246  0027A4  ECC2  F00B         	call	_printf	;wreg free
 15247                           
 15248                           ;Test.c: 457: _delay((unsigned long)((100)*(32000000/4000.0)));
 15249  0027A8  0E05               	movlw	5
 15250  0027AA  0100               	movlb	0	; () banked
 15251  0027AC  6FAC               	movwf	(??_PlatformTest+1)& (0+255),b
 15252  0027AE  0E0F               	movlw	15
 15253  0027B0  0100               	movlb	0	; () banked
 15254  0027B2  6FAB               	movwf	??_PlatformTest& (0+255),b
 15255  0027B4  0EF1               	movlw	241
 15256  0027B6                     u10837:
 15257  0027B6  2EE8               	decfsz	wreg,f,c
 15258  0027B8  D7FE               	bra	u10837
 15259  0027BA  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 15260  0027BC  D7FC               	bra	u10837
 15261  0027BE  2FAC               	decfsz	(??_PlatformTest+1)& (0+255),f,b
 15262  0027C0  D7FA               	bra	u10837
 15263  0027C2                     l8840:
 15264  0027C2  B281               	btfsc	3969,1,c	;volatile
 15265  0027C4  D059               	goto	l8860
 15266  0027C6  D7A5               	goto	l8822
 15267  0027C8                     l8842:
 15268                           
 15269                           ;Test.c: 462: readADC(0);
 15270  0027C8  0E00               	movlw	0
 15271  0027CA  EC7C  F02C         	call	_readADC
 15272                           
 15273                           ;Test.c: 463: int res = ADRESH<<8 | ADRESL;
 15274  0027CE  50C3               	movf	4035,w,c	;volatile
 15275  0027D0  CFC4 F0AB          	movff	4036,??_PlatformTest	;volatile
 15276  0027D4  0100               	movlb	0	; () banked
 15277  0027D6  6BAC               	clrf	(??_PlatformTest+1)& (0+255),b
 15278  0027D8  C0AB  F0AC         	movff	??_PlatformTest,??_PlatformTest+1
 15279  0027DC  0100               	movlb	0	; () banked
 15280  0027DE  6BAB               	clrf	??_PlatformTest& (0+255),b
 15281  0027E0  0100               	movlb	0	; () banked
 15282  0027E2  11AB               	iorwf	??_PlatformTest& (0+255),w,b
 15283  0027E4  0100               	movlb	0	; () banked
 15284  0027E6  6FAF               	movwf	PlatformTest@res_1783& (0+255),b
 15285  0027E8  0100               	movlb	0	; () banked
 15286  0027EA  51AC               	movf	(??_PlatformTest+1)& (0+255),w,b
 15287  0027EC  0100               	movlb	0	; () banked
 15288  0027EE  6FB0               	movwf	(PlatformTest@res_1783+1)& (0+255),b
 15289                           
 15290                           ; BSR set to: 0
 15291                           ;Test.c: 464: IR_signal = (res > 800) ? 1 : 0;
 15292  0027F0  0100               	movlb	0	; () banked
 15293  0027F2  BFB0               	btfsc	(PlatformTest@res_1783+1)& (0+255),7,b
 15294  0027F4  D00A               	goto	u7850
 15295  0027F6  0E21               	movlw	33
 15296  0027F8  0100               	movlb	0	; () banked
 15297  0027FA  5DAF               	subwf	PlatformTest@res_1783& (0+255),w,b
 15298  0027FC  0E03               	movlw	3
 15299  0027FE  0100               	movlb	0	; () banked
 15300  002800  59B0               	subwfb	(PlatformTest@res_1783+1)& (0+255),w,b
 15301  002802  A0D8               	btfss	status,0,c
 15302  002804  D002               	goto	u7850
 15303  002806  0E01               	movlw	1
 15304  002808  D001               	goto	u7860
 15305  00280A                     u7850:
 15306  00280A  0E00               	movlw	0
 15307  00280C                     u7860:
 15308  00280C  0100               	movlb	0	; () banked
 15309  00280E  6FE0               	movwf	_IR_signal& (0+255),b
 15310  002810  6BE1               	clrf	(_IR_signal+1)& (0+255),b
 15311                           
 15312                           ;Test.c: 466: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 15313  002812  0E01               	movlw	1
 15314  002814  EC86  F02D         	call	_lcdInst
 15315  002818  0E68               	movlw	104
 15316  00281A  0100               	movlb	0	; () banked
 15317  00281C  6FAB               	movwf	??_PlatformTest& (0+255),b
 15318  00281E  0EE4               	movlw	228
 15319  002820                     u10847:
 15320  002820  2EE8               	decfsz	wreg,f,c
 15321  002822  D7FE               	bra	u10847
 15322  002824  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 15323  002826  D7FC               	bra	u10847
 15324  002828  F000               	nop	
 15325  00282A  0E80               	movlw	128
 15326  00282C  EC86  F02D         	call	_lcdInst
 15327                           
 15328                           ;Test.c: 467: printf("1: DC | A: ARM  ");
 15329  002830  0E05               	movlw	low STR_114
 15330  002832  0100               	movlb	0	; () banked
 15331  002834  6F8E               	movwf	printf@f& (0+255),b
 15332  002836  0EFC               	movlw	high STR_114
 15333  002838  0100               	movlb	0	; () banked
 15334  00283A  6F8F               	movwf	(printf@f+1)& (0+255),b
 15335  00283C  ECC2  F00B         	call	_printf	;wreg free
 15336                           
 15337                           ;Test.c: 468: lcdInst(0b11000000);;
 15338  002840  0EC0               	movlw	192
 15339  002842  EC86  F02D         	call	_lcdInst
 15340                           
 15341                           ;Test.c: 469: printf("5:H|6:L|IR:%d   ", res);
 15342  002846  0EF4               	movlw	low STR_116
 15343  002848  0100               	movlb	0	; () banked
 15344  00284A  6F8E               	movwf	printf@f& (0+255),b
 15345  00284C  0EFB               	movlw	high STR_116
 15346  00284E  0100               	movlb	0	; () banked
 15347  002850  6F8F               	movwf	(printf@f+1)& (0+255),b
 15348  002852  C0AF  F090         	movff	PlatformTest@res_1783,?_printf+2
 15349  002856  C0B0  F091         	movff	PlatformTest@res_1783+1,?_printf+3
 15350  00285A  ECC2  F00B         	call	_printf	;wreg free
 15351                           
 15352                           ;Test.c: 470: _delay((unsigned long)((100)*(32000000/4000.0)));
 15353  00285E  0E05               	movlw	5
 15354  002860  0100               	movlb	0	; () banked
 15355  002862  6FAC               	movwf	(??_PlatformTest+1)& (0+255),b
 15356  002864  0E0F               	movlw	15
 15357  002866  0100               	movlb	0	; () banked
 15358  002868  6FAB               	movwf	??_PlatformTest& (0+255),b
 15359  00286A  0EF1               	movlw	241
 15360  00286C                     u10857:
 15361  00286C  2EE8               	decfsz	wreg,f,c
 15362  00286E  D7FE               	bra	u10857
 15363  002870  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 15364  002872  D7FC               	bra	u10857
 15365  002874  2FAC               	decfsz	(??_PlatformTest+1)& (0+255),f,b
 15366  002876  D7FA               	bra	u10857
 15367  002878                     l8860:
 15368  002878  A281               	btfss	3969,1,c	;volatile
 15369  00287A  D7A6               	goto	l8842
 15370                           
 15371                           ;Test.c: 471: }
 15372                           ;Test.c: 472: if(PORTB >> 4 == 0b1111){
 15373  00287C  3881               	swapf	3969,w,c	;volatile
 15374  00287E  0B0F               	andlw	15
 15375  002880  0A0F               	xorlw	15
 15376  002882  B4D8               	btfsc	status,2,c
 15377  002884  D09A               	goto	l1372
 15378                           
 15379                           ;Test.c: 475: else if(PORTB >> 4 == 0b0000){
 15380                           
 15381                           ;Test.c: 474: }
 15382                           
 15383                           ;Test.c: 473: break;
 15384  002886  CF81 F0AB          	movff	3969,??_PlatformTest	;volatile
 15385  00288A  0100               	movlb	0	; () banked
 15386  00288C  3BAB               	swapf	??_PlatformTest& (0+255),f,b
 15387  00288E  0E0F               	movlw	15
 15388  002890  17AB               	andwf	??_PlatformTest& (0+255),f,b
 15389  002892  A4D8               	btfss	status,2,c
 15390  002894  D012               	goto	l8872
 15391                           
 15392                           ; BSR set to: 0
 15393                           ;Test.c: 476: LATBbits.LATB2 = !LATBbits.LATB2;
 15394  002896  B48A               	btfsc	3978,2,c	;volatile
 15395  002898  D004               	goto	u7900
 15396  00289A  0100               	movlb	0	; () banked
 15397  00289C  6BAB               	clrf	??_PlatformTest& (0+255),b
 15398  00289E  2BAB               	incf	??_PlatformTest& (0+255),f,b
 15399  0028A0  D002               	goto	u7918
 15400  0028A2                     u7900:
 15401  0028A2  0100               	movlb	0	; () banked
 15402  0028A4  6BAB               	clrf	??_PlatformTest& (0+255),b
 15403  0028A6                     u7918:
 15404  0028A6  0100               	movlb	0	; () banked
 15405  0028A8  47AB               	rlncf	??_PlatformTest& (0+255),f,b
 15406  0028AA  47AB               	rlncf	??_PlatformTest& (0+255),f,b
 15407  0028AC  508A               	movf	3978,w,c	;volatile
 15408  0028AE  0100               	movlb	0	; () banked
 15409  0028B0  19AB               	xorwf	??_PlatformTest& (0+255),w,b
 15410  0028B2  0BFB               	andlw	-5
 15411  0028B4  19AB               	xorwf	??_PlatformTest& (0+255),w,b
 15412  0028B6  6E8A               	movwf	3978,c	;volatile
 15413                           
 15414                           ;Test.c: 477: }
 15415  0028B8  D07D               	goto	l1387
 15416  0028BA                     l8872:
 15417                           
 15418                           ; BSR set to: 0
 15419                           ;Test.c: 478: else if(PORTB >> 4 == 0b0011){
 15420  0028BA  3881               	swapf	3969,w,c	;volatile
 15421  0028BC  0B0F               	andlw	15
 15422  0028BE  0A03               	xorlw	3
 15423  0028C0  A4D8               	btfss	status,2,c
 15424  0028C2  D020               	goto	l8884
 15425                           
 15426                           ; BSR set to: 0
 15427                           ;Test.c: 479: if(on){
 15428  0028C4  0100               	movlb	0	; () banked
 15429  0028C6  51B5               	movf	PlatformTest@on& (0+255),w,b
 15430  0028C8  0100               	movlb	0	; () banked
 15431  0028CA  11B6               	iorwf	(PlatformTest@on+1)& (0+255),w,b
 15432  0028CC  B4D8               	btfsc	status,2,c
 15433  0028CE  D010               	goto	l8880
 15434                           
 15435                           ; BSR set to: 0
 15436                           ;Test.c: 480: f_arm_position = 1;
 15437  0028D0  0E00               	movlw	0
 15438  0028D2  0100               	movlb	0	; () banked
 15439  0028D4  6FE9               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
 15440  0028D6  0E01               	movlw	1
 15441  0028D8  D00F               	goto	L16
 15442  0028DA                     l8878:
 15443                           
 15444                           ; BSR set to: 0
 15445                           ;Test.c: 481: on = !on;
 15446  0028DA  0100               	movlb	0	; () banked
 15447  0028DC  51B5               	movf	PlatformTest@on& (0+255),w,b
 15448  0028DE  0100               	movlb	0	; () banked
 15449  0028E0  11B6               	iorwf	(PlatformTest@on+1)& (0+255),w,b
 15450  0028E2  A4D8               	btfss	status,2,c
 15451  0028E4  D00D               	goto	u7960
 15452  0028E6  D00A               	goto	u7961
 15453  0028E8                     u7950:
 15454  0028E8  0100               	movlb	0	; () banked
 15455  0028EA  6FB5               	movwf	PlatformTest@on& (0+255),b
 15456  0028EC  6BB6               	clrf	(PlatformTest@on+1)& (0+255),b
 15457                           
 15458                           ;Test.c: 482: }
 15459  0028EE  D062               	goto	l1387
 15460  0028F0                     l8880:
 15461                           
 15462                           ; BSR set to: 0
 15463                           ;Test.c: 483: else{
 15464                           ;Test.c: 484: f_arm_position = 0;
 15465  0028F0  0E00               	movlw	0
 15466  0028F2  0100               	movlb	0	; () banked
 15467  0028F4  6FE9               	movwf	(_f_arm_position+1)& (0+255),b	;volatile
 15468  0028F6  0E00               	movlw	0
 15469  0028F8                     L16:
 15470  0028F8  6FE8               	movwf	_f_arm_position& (0+255),b	;volatile
 15471  0028FA  D7EF               	goto	l8878
 15472  0028FC                     u7961:
 15473  0028FC  0E01               	movlw	1
 15474  0028FE  D7F4               	goto	u7950
 15475  002900                     u7960:
 15476  002900  0E00               	movlw	0
 15477  002902  D7F2               	goto	u7950
 15478  002904                     l8884:
 15479                           
 15480                           ; BSR set to: 0
 15481                           ;Test.c: 488: else if(PORTB >> 4 == 0b0101){
 15482  002904  3881               	swapf	3969,w,c	;volatile
 15483  002906  0B0F               	andlw	15
 15484  002908  0A05               	xorlw	5
 15485  00290A  A4D8               	btfss	status,2,c
 15486  00290C  D027               	goto	l8898
 15487                           
 15488                           ; BSR set to: 0
 15489                           ;Test.c: 490: for(int i = 0; i<30; i++){
 15490  00290E  0E00               	movlw	0
 15491  002910  0100               	movlb	0	; () banked
 15492  002912  6FB2               	movwf	(PlatformTest@i+1)& (0+255),b
 15493  002914  0E00               	movlw	0
 15494  002916  6FB1               	movwf	PlatformTest@i& (0+255),b
 15495  002918                     l8888:
 15496                           
 15497                           ; BSR set to: 0
 15498  002918  0100               	movlb	0	; () banked
 15499  00291A  BFB2               	btfsc	(PlatformTest@i+1)& (0+255),7,b
 15500  00291C  D008               	goto	l1381
 15501  00291E  0100               	movlb	0	; () banked
 15502  002920  51B2               	movf	(PlatformTest@i+1)& (0+255),w,b
 15503  002922  E148               	bnz	l1387
 15504  002924  0E1E               	movlw	30
 15505  002926  0100               	movlb	0	; () banked
 15506  002928  5DB1               	subwf	PlatformTest@i& (0+255),w,b
 15507  00292A  B0D8               	btfsc	status,0,c
 15508  00292C  D043               	goto	l1387
 15509  00292E                     l1381:
 15510                           
 15511                           ; BSR set to: 0
 15512                           ;Test.c: 491: LATAbits.LATA4 = 1;
 15513  00292E  8889               	bsf	3977,4,c	;volatile
 15514                           
 15515                           ; BSR set to: 0
 15516                           ;Test.c: 492: _delay((unsigned long)((7500)*(32000000/4000000.0)));
 15517  002930  0E4E               	movlw	78
 15518  002932  0100               	movlb	0	; () banked
 15519  002934  6FAB               	movwf	??_PlatformTest& (0+255),b
 15520  002936  0EEB               	movlw	235
 15521  002938                     u10867:
 15522  002938  2EE8               	decfsz	wreg,f,c
 15523  00293A  D7FE               	bra	u10867
 15524  00293C  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 15525  00293E  D7FC               	bra	u10867
 15526                           
 15527                           ;Test.c: 493: LATAbits.LATA4 = 0;
 15528  002940  9889               	bcf	3977,4,c	;volatile
 15529                           
 15530                           ;Test.c: 494: _delay((unsigned long)((2500)*(32000000/4000000.0)));
 15531  002942  0E1A               	movlw	26
 15532  002944  0100               	movlb	0	; () banked
 15533  002946  6FAB               	movwf	??_PlatformTest& (0+255),b
 15534  002948  0EF8               	movlw	248
 15535  00294A                     u10877:
 15536  00294A  2EE8               	decfsz	wreg,f,c
 15537  00294C  D7FE               	bra	u10877
 15538  00294E  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 15539  002950  D7FC               	bra	u10877
 15540  002952  F000               	nop	
 15541  002954  0100               	movlb	0	; () banked
 15542  002956  4BB1               	infsnz	PlatformTest@i& (0+255),f,b
 15543  002958  2BB2               	incf	(PlatformTest@i+1)& (0+255),f,b
 15544  00295A  D7DE               	goto	l8888
 15545  00295C                     l8898:
 15546                           
 15547                           ; BSR set to: 0
 15548                           ;Test.c: 497: else if (PORTB >> 4 == 0b0110){
 15549  00295C  3881               	swapf	3969,w,c	;volatile
 15550  00295E  0B0F               	andlw	15
 15551  002960  0A06               	xorlw	6
 15552  002962  A4D8               	btfss	status,2,c
 15553  002964  D027               	goto	l1387
 15554                           
 15555                           ; BSR set to: 0
 15556                           ;Test.c: 499: for(int i = 0; i<30; i++){
 15557  002966  0E00               	movlw	0
 15558  002968  0100               	movlb	0	; () banked
 15559  00296A  6FB4               	movwf	(PlatformTest@i_1787+1)& (0+255),b
 15560  00296C  0E00               	movlw	0
 15561  00296E  6FB3               	movwf	PlatformTest@i_1787& (0+255),b
 15562  002970                     l8902:
 15563                           
 15564                           ; BSR set to: 0
 15565  002970  0100               	movlb	0	; () banked
 15566  002972  BFB4               	btfsc	(PlatformTest@i_1787+1)& (0+255),7,b
 15567  002974  D008               	goto	l1385
 15568  002976  0100               	movlb	0	; () banked
 15569  002978  51B4               	movf	(PlatformTest@i_1787+1)& (0+255),w,b
 15570  00297A  E11C               	bnz	l1387
 15571  00297C  0E1E               	movlw	30
 15572  00297E  0100               	movlb	0	; () banked
 15573  002980  5DB3               	subwf	PlatformTest@i_1787& (0+255),w,b
 15574  002982  B0D8               	btfsc	status,0,c
 15575  002984  D017               	goto	l1387
 15576  002986                     l1385:
 15577                           
 15578                           ; BSR set to: 0
 15579                           ;Test.c: 500: LATAbits.LATA4 = 1;
 15580  002986  8889               	bsf	3977,4,c	;volatile
 15581                           
 15582                           ; BSR set to: 0
 15583                           ;Test.c: 501: _delay((unsigned long)((5800)*(32000000/4000000.0)));
 15584  002988  0E3D               	movlw	61
 15585  00298A  0100               	movlb	0	; () banked
 15586  00298C  6FAB               	movwf	??_PlatformTest& (0+255),b
 15587  00298E  0E41               	movlw	65
 15588  002990                     u10887:
 15589  002990  2EE8               	decfsz	wreg,f,c
 15590  002992  D7FE               	bra	u10887
 15591  002994  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 15592  002996  D7FC               	bra	u10887
 15593                           
 15594                           ;Test.c: 502: LATAbits.LATA4 = 0;
 15595  002998  9889               	bcf	3977,4,c	;volatile
 15596                           
 15597                           ;Test.c: 503: _delay((unsigned long)((4200)*(32000000/4000000.0)));
 15598  00299A  0E2C               	movlw	44
 15599  00299C  0100               	movlb	0	; () banked
 15600  00299E  6FAB               	movwf	??_PlatformTest& (0+255),b
 15601  0029A0  0EA1               	movlw	161
 15602  0029A2                     u10897:
 15603  0029A2  2EE8               	decfsz	wreg,f,c
 15604  0029A4  D7FE               	bra	u10897
 15605  0029A6  2FAB               	decfsz	??_PlatformTest& (0+255),f,b
 15606  0029A8  D7FC               	bra	u10897
 15607  0029AA  D000               	nop2	
 15608  0029AC  0100               	movlb	0	; () banked
 15609  0029AE  4BB3               	infsnz	PlatformTest@i_1787& (0+255),f,b
 15610  0029B0  2BB4               	incf	(PlatformTest@i_1787+1)& (0+255),f,b
 15611  0029B2  D7DE               	goto	l8902
 15612  0029B4                     l1387:
 15613  0029B4  A281               	btfss	3969,1,c	;volatile
 15614  0029B6  D760               	goto	l8860
 15615  0029B8  D7FD               	goto	l1387
 15616  0029BA                     l1372:
 15617                           
 15618                           ;Test.c: 508: }
 15619                           ;Test.c: 510: LATCbits.LATC5 = 0;
 15620  0029BA  9A8B               	bcf	3979,5,c	;volatile
 15621                           
 15622                           ;Test.c: 511: stopSignals();
 15623  0029BC  EC38  F02D         	call	_stopSignals	;wreg free
 15624                           
 15625                           ;Test.c: 512: machine_state = Testing_state;
 15626  0029C0  0E03               	movlw	3
 15627  0029C2  0100               	movlb	0	; () banked
 15628  0029C4  6FFC               	movwf	_machine_state& (0+255),b
 15629                           
 15630                           ; BSR set to: 0
 15631  0029C6  0012               	return		;funcret
 15632  0029C8                     __end_of_PlatformTest:
 15633                           	opt stack 0
 15634                           tblptru	equ	0xFF8
 15635                           tblptrh	equ	0xFF7
 15636                           tblptrl	equ	0xFF6
 15637                           tablat	equ	0xFF5
 15638                           prodh	equ	0xFF4
 15639                           prodl	equ	0xFF3
 15640                           intcon	equ	0xFF2
 15641                           intcon2	equ	0xFF1
 15642                           intcon3	equ	0xFF0
 15643                           postinc0	equ	0xFEE
 15644                           wreg	equ	0xFE8
 15645                           postdec1	equ	0xFE5
 15646                           fsr1l	equ	0xFE1
 15647                           indf2	equ	0xFDF
 15648                           postinc2	equ	0xFDE
 15649                           postdec2	equ	0xFDD
 15650                           fsr2h	equ	0xFDA
 15651                           fsr2l	equ	0xFD9
 15652                           status	equ	0xFD8
 15653                           
 15654 ;; *************** function _BothServos *****************
 15655 ;; Defined at:
 15656 ;;		line 351 in file "Test.c"
 15657 ;; Parameters:    Size  Location     Type
 15658 ;;		None
 15659 ;; Auto vars:     Size  Location     Type
 15660 ;;		None
 15661 ;; Return value:  Size  Location     Type
 15662 ;;                  1    wreg      void 
 15663 ;; Registers used:
 15664 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15665 ;; Tracked objects:
 15666 ;;		On entry : 0/0
 15667 ;;		On exit  : 0/0
 15668 ;;		Unchanged: 0/0
 15669 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15670 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15671 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15672 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15673 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15674 ;;Total ram usage:        2 bytes
 15675 ;; Hardware stack levels used:    1
 15676 ;; Hardware stack levels required when called:   10
 15677 ;; This function calls:
 15678 ;;		_initServos
 15679 ;;		_lcdInst
 15680 ;;		_printf
 15681 ;;		_stopSignals
 15682 ;;		_updateServoPosition
 15683 ;; This function is called by:
 15684 ;;		_Test
 15685 ;; This function uses a non-reentrant model
 15686 ;;
 15687                           
 15688                           	psect	text50
 15689  001BBC                     __ptext50:
 15690                           	opt stack 0
 15691  001BBC                     _BothServos:
 15692                           	opt stack 19
 15693                           
 15694                           ;Test.c: 352: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 15695                           
 15696                           ; BSR set to: 0
 15697                           ;incstack = 0
 15698  001BBC  0E01               	movlw	1
 15699  001BBE  EC86  F02D         	call	_lcdInst
 15700  001BC2  0E68               	movlw	104
 15701  001BC4  0100               	movlb	0	; () banked
 15702  001BC6  6FAB               	movwf	??_BothServos& (0+255),b
 15703  001BC8  0EE4               	movlw	228
 15704  001BCA                     u10907:
 15705  001BCA  2EE8               	decfsz	wreg,f,c
 15706  001BCC  D7FE               	bra	u10907
 15707  001BCE  2FAB               	decfsz	??_BothServos& (0+255),f,b
 15708  001BD0  D7FC               	bra	u10907
 15709  001BD2  F000               	nop	
 15710  001BD4  0E80               	movlw	128
 15711  001BD6  EC86  F02D         	call	_lcdInst
 15712                           
 15713                           ;Test.c: 353: printf("TST: BOTH SERVOS");
 15714  001BDA  0EAF               	movlw	low STR_111
 15715  001BDC  0100               	movlb	0	; () banked
 15716  001BDE  6F8E               	movwf	printf@f& (0+255),b
 15717  001BE0  0EFC               	movlw	high STR_111
 15718  001BE2  0100               	movlb	0	; () banked
 15719  001BE4  6F8F               	movwf	(printf@f+1)& (0+255),b
 15720  001BE6  ECC2  F00B         	call	_printf	;wreg free
 15721                           
 15722                           ;Test.c: 354: TMR1ON = 1;
 15723  001BEA  80CD               	bsf	4045,0,c	;volatile
 15724                           
 15725                           ;Test.c: 355: TMR3ON = 1;
 15726  001BEC  80B1               	bsf	4017,0,c	;volatile
 15727                           
 15728                           ;Test.c: 356: machine_state = Sorting_state;
 15729  001BEE  0E01               	movlw	1
 15730  001BF0  0100               	movlb	0	; () banked
 15731  001BF2  6FFC               	movwf	_machine_state& (0+255),b
 15732                           
 15733                           ; BSR set to: 0
 15734                           ;Test.c: 357: was_low_1 = 0;
 15735  001BF4  0E00               	movlw	0
 15736  001BF6  6E78               	movwf	_was_low_1+1,c	;volatile
 15737  001BF8  0E00               	movlw	0
 15738  001BFA  6E77               	movwf	_was_low_1,c	;volatile
 15739                           
 15740                           ; BSR set to: 0
 15741                           ;Test.c: 358: was_low_3 = 0;
 15742  001BFC  0E00               	movlw	0
 15743  001BFE  6E7C               	movwf	_was_low_3+1,c	;volatile
 15744  001C00  0E00               	movlw	0
 15745  001C02  6E7B               	movwf	_was_low_3,c	;volatile
 15746                           
 15747                           ; BSR set to: 0
 15748                           ;Test.c: 364: initServos();
 15749  001C04  ECEF  F026         	call	_initServos	;wreg free
 15750                           
 15751                           ;Test.c: 365: _delay((unsigned long)((1500)*(32000000/4000.0)));
 15752  001C08  0E3D               	movlw	61
 15753  001C0A  0100               	movlb	0	; () banked
 15754  001C0C  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 15755  001C0E  0EE1               	movlw	225
 15756  001C10  0100               	movlb	0	; () banked
 15757  001C12  6FAB               	movwf	??_BothServos& (0+255),b
 15758  001C14  0E3F               	movlw	63
 15759  001C16                     u10917:
 15760  001C16  2EE8               	decfsz	wreg,f,c
 15761  001C18  D7FE               	bra	u10917
 15762  001C1A  2FAB               	decfsz	??_BothServos& (0+255),f,b
 15763  001C1C  D7FC               	bra	u10917
 15764  001C1E  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 15765  001C20  D7FA               	bra	u10917
 15766  001C22  D000               	nop2	
 15767                           
 15768                           ;Test.c: 367: updateServoPosition(500, 1);
 15769  001C24  0E01               	movlw	1
 15770  001C26  0100               	movlb	0	; () banked
 15771  001C28  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15772  001C2A  0EF4               	movlw	244
 15773  001C2C  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15774  001C2E  0E00               	movlw	0
 15775  001C30  0100               	movlb	0	; () banked
 15776  001C32  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15777  001C34  0E01               	movlw	1
 15778  001C36  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15779  001C38  EC6A  F026         	call	_updateServoPosition	;wreg free
 15780                           
 15781                           ;Test.c: 368: updateServoPosition(1050, 3);
 15782  001C3C  0E04               	movlw	4
 15783  001C3E  0100               	movlb	0	; () banked
 15784  001C40  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15785  001C42  0E1A               	movlw	26
 15786  001C44  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15787  001C46  0E00               	movlw	0
 15788  001C48  0100               	movlb	0	; () banked
 15789  001C4A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15790  001C4C  0E03               	movlw	3
 15791  001C4E  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15792  001C50  EC6A  F026         	call	_updateServoPosition	;wreg free
 15793                           
 15794                           ;Test.c: 369: _delay((unsigned long)((750)*(32000000/4000.0)));
 15795  001C54  0E1F               	movlw	31
 15796  001C56  0100               	movlb	0	; () banked
 15797  001C58  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 15798  001C5A  0E71               	movlw	113
 15799  001C5C  0100               	movlb	0	; () banked
 15800  001C5E  6FAB               	movwf	??_BothServos& (0+255),b
 15801  001C60  0E1E               	movlw	30
 15802  001C62                     u10927:
 15803  001C62  2EE8               	decfsz	wreg,f,c
 15804  001C64  D7FE               	bra	u10927
 15805  001C66  2FAB               	decfsz	??_BothServos& (0+255),f,b
 15806  001C68  D7FC               	bra	u10927
 15807  001C6A  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 15808  001C6C  D7FA               	bra	u10927
 15809  001C6E  F000               	nop	
 15810                           
 15811                           ;Test.c: 370: updateServoPosition(1260, 3);
 15812  001C70  0E04               	movlw	4
 15813  001C72  0100               	movlb	0	; () banked
 15814  001C74  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15815  001C76  0EEC               	movlw	236
 15816  001C78  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15817  001C7A  0E00               	movlw	0
 15818  001C7C  0100               	movlb	0	; () banked
 15819  001C7E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15820  001C80  0E03               	movlw	3
 15821  001C82  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15822  001C84  EC6A  F026         	call	_updateServoPosition	;wreg free
 15823                           
 15824                           ;Test.c: 371: _delay((unsigned long)((700)*(32000000/4000.0)));
 15825  001C88  0E1D               	movlw	29
 15826  001C8A  0100               	movlb	0	; () banked
 15827  001C8C  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 15828  001C8E  0E69               	movlw	105
 15829  001C90  0100               	movlb	0	; () banked
 15830  001C92  6FAB               	movwf	??_BothServos& (0+255),b
 15831  001C94  0EA5               	movlw	165
 15832  001C96                     u10937:
 15833  001C96  2EE8               	decfsz	wreg,f,c
 15834  001C98  D7FE               	bra	u10937
 15835  001C9A  2FAB               	decfsz	??_BothServos& (0+255),f,b
 15836  001C9C  D7FC               	bra	u10937
 15837  001C9E  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 15838  001CA0  D7FA               	bra	u10937
 15839                           
 15840                           ;Test.c: 372: updateServoPosition(1050, 3);
 15841  001CA2  0E04               	movlw	4
 15842  001CA4  0100               	movlb	0	; () banked
 15843  001CA6  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15844  001CA8  0E1A               	movlw	26
 15845  001CAA  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15846  001CAC  0E00               	movlw	0
 15847  001CAE  0100               	movlb	0	; () banked
 15848  001CB0  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15849  001CB2  0E03               	movlw	3
 15850  001CB4  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15851  001CB6  EC6A  F026         	call	_updateServoPosition	;wreg free
 15852                           
 15853                           ;Test.c: 373: _delay((unsigned long)((750)*(32000000/4000.0)));
 15854  001CBA  0E1F               	movlw	31
 15855  001CBC  0100               	movlb	0	; () banked
 15856  001CBE  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 15857  001CC0  0E71               	movlw	113
 15858  001CC2  0100               	movlb	0	; () banked
 15859  001CC4  6FAB               	movwf	??_BothServos& (0+255),b
 15860  001CC6  0E1E               	movlw	30
 15861  001CC8                     u10947:
 15862  001CC8  2EE8               	decfsz	wreg,f,c
 15863  001CCA  D7FE               	bra	u10947
 15864  001CCC  2FAB               	decfsz	??_BothServos& (0+255),f,b
 15865  001CCE  D7FC               	bra	u10947
 15866  001CD0  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 15867  001CD2  D7FA               	bra	u10947
 15868  001CD4  F000               	nop	
 15869                           
 15870                           ;Test.c: 375: updateServoPosition(850, 1);
 15871  001CD6  0E03               	movlw	3
 15872  001CD8  0100               	movlb	0	; () banked
 15873  001CDA  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15874  001CDC  0E52               	movlw	82
 15875  001CDE  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15876  001CE0  0E00               	movlw	0
 15877  001CE2  0100               	movlb	0	; () banked
 15878  001CE4  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15879  001CE6  0E01               	movlw	1
 15880  001CE8  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15881  001CEA  EC6A  F026         	call	_updateServoPosition	;wreg free
 15882                           
 15883                           ;Test.c: 376: updateServoPosition(1050, 3);
 15884  001CEE  0E04               	movlw	4
 15885  001CF0  0100               	movlb	0	; () banked
 15886  001CF2  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15887  001CF4  0E1A               	movlw	26
 15888  001CF6  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15889  001CF8  0E00               	movlw	0
 15890  001CFA  0100               	movlb	0	; () banked
 15891  001CFC  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15892  001CFE  0E03               	movlw	3
 15893  001D00  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15894  001D02  EC6A  F026         	call	_updateServoPosition	;wreg free
 15895                           
 15896                           ;Test.c: 377: _delay((unsigned long)((750)*(32000000/4000.0)));
 15897  001D06  0E1F               	movlw	31
 15898  001D08  0100               	movlb	0	; () banked
 15899  001D0A  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 15900  001D0C  0E71               	movlw	113
 15901  001D0E  0100               	movlb	0	; () banked
 15902  001D10  6FAB               	movwf	??_BothServos& (0+255),b
 15903  001D12  0E1E               	movlw	30
 15904  001D14                     u10957:
 15905  001D14  2EE8               	decfsz	wreg,f,c
 15906  001D16  D7FE               	bra	u10957
 15907  001D18  2FAB               	decfsz	??_BothServos& (0+255),f,b
 15908  001D1A  D7FC               	bra	u10957
 15909  001D1C  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 15910  001D1E  D7FA               	bra	u10957
 15911  001D20  F000               	nop	
 15912                           
 15913                           ;Test.c: 378: updateServoPosition(1260, 3);
 15914  001D22  0E04               	movlw	4
 15915  001D24  0100               	movlb	0	; () banked
 15916  001D26  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15917  001D28  0EEC               	movlw	236
 15918  001D2A  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15919  001D2C  0E00               	movlw	0
 15920  001D2E  0100               	movlb	0	; () banked
 15921  001D30  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15922  001D32  0E03               	movlw	3
 15923  001D34  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15924  001D36  EC6A  F026         	call	_updateServoPosition	;wreg free
 15925                           
 15926                           ;Test.c: 379: _delay((unsigned long)((700)*(32000000/4000.0)));
 15927  001D3A  0E1D               	movlw	29
 15928  001D3C  0100               	movlb	0	; () banked
 15929  001D3E  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 15930  001D40  0E69               	movlw	105
 15931  001D42  0100               	movlb	0	; () banked
 15932  001D44  6FAB               	movwf	??_BothServos& (0+255),b
 15933  001D46  0EA5               	movlw	165
 15934  001D48                     u10967:
 15935  001D48  2EE8               	decfsz	wreg,f,c
 15936  001D4A  D7FE               	bra	u10967
 15937  001D4C  2FAB               	decfsz	??_BothServos& (0+255),f,b
 15938  001D4E  D7FC               	bra	u10967
 15939  001D50  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 15940  001D52  D7FA               	bra	u10967
 15941                           
 15942                           ;Test.c: 380: updateServoPosition(1050, 3);
 15943  001D54  0E04               	movlw	4
 15944  001D56  0100               	movlb	0	; () banked
 15945  001D58  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15946  001D5A  0E1A               	movlw	26
 15947  001D5C  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15948  001D5E  0E00               	movlw	0
 15949  001D60  0100               	movlb	0	; () banked
 15950  001D62  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15951  001D64  0E03               	movlw	3
 15952  001D66  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15953  001D68  EC6A  F026         	call	_updateServoPosition	;wreg free
 15954                           
 15955                           ;Test.c: 381: _delay((unsigned long)((750)*(32000000/4000.0)));
 15956  001D6C  0E1F               	movlw	31
 15957  001D6E  0100               	movlb	0	; () banked
 15958  001D70  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 15959  001D72  0E71               	movlw	113
 15960  001D74  0100               	movlb	0	; () banked
 15961  001D76  6FAB               	movwf	??_BothServos& (0+255),b
 15962  001D78  0E1E               	movlw	30
 15963  001D7A                     u10977:
 15964  001D7A  2EE8               	decfsz	wreg,f,c
 15965  001D7C  D7FE               	bra	u10977
 15966  001D7E  2FAB               	decfsz	??_BothServos& (0+255),f,b
 15967  001D80  D7FC               	bra	u10977
 15968  001D82  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 15969  001D84  D7FA               	bra	u10977
 15970  001D86  F000               	nop	
 15971                           
 15972                           ;Test.c: 383: updateServoPosition(500, 1);
 15973  001D88  0E01               	movlw	1
 15974  001D8A  0100               	movlb	0	; () banked
 15975  001D8C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15976  001D8E  0EF4               	movlw	244
 15977  001D90  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15978  001D92  0E00               	movlw	0
 15979  001D94  0100               	movlb	0	; () banked
 15980  001D96  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15981  001D98  0E01               	movlw	1
 15982  001D9A  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15983  001D9C  EC6A  F026         	call	_updateServoPosition	;wreg free
 15984                           
 15985                           ;Test.c: 384: updateServoPosition(1050, 3);
 15986  001DA0  0E04               	movlw	4
 15987  001DA2  0100               	movlb	0	; () banked
 15988  001DA4  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 15989  001DA6  0E1A               	movlw	26
 15990  001DA8  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 15991  001DAA  0E00               	movlw	0
 15992  001DAC  0100               	movlb	0	; () banked
 15993  001DAE  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 15994  001DB0  0E03               	movlw	3
 15995  001DB2  6F82               	movwf	updateServoPosition@timer& (0+255),b
 15996  001DB4  EC6A  F026         	call	_updateServoPosition	;wreg free
 15997                           
 15998                           ;Test.c: 385: _delay((unsigned long)((750)*(32000000/4000.0)));
 15999  001DB8  0E1F               	movlw	31
 16000  001DBA  0100               	movlb	0	; () banked
 16001  001DBC  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16002  001DBE  0E71               	movlw	113
 16003  001DC0  0100               	movlb	0	; () banked
 16004  001DC2  6FAB               	movwf	??_BothServos& (0+255),b
 16005  001DC4  0E1E               	movlw	30
 16006  001DC6                     u10987:
 16007  001DC6  2EE8               	decfsz	wreg,f,c
 16008  001DC8  D7FE               	bra	u10987
 16009  001DCA  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16010  001DCC  D7FC               	bra	u10987
 16011  001DCE  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16012  001DD0  D7FA               	bra	u10987
 16013  001DD2  F000               	nop	
 16014                           
 16015                           ;Test.c: 386: updateServoPosition(1260, 3);
 16016  001DD4  0E04               	movlw	4
 16017  001DD6  0100               	movlb	0	; () banked
 16018  001DD8  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16019  001DDA  0EEC               	movlw	236
 16020  001DDC  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16021  001DDE  0E00               	movlw	0
 16022  001DE0  0100               	movlb	0	; () banked
 16023  001DE2  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16024  001DE4  0E03               	movlw	3
 16025  001DE6  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16026  001DE8  EC6A  F026         	call	_updateServoPosition	;wreg free
 16027                           
 16028                           ;Test.c: 387: _delay((unsigned long)((700)*(32000000/4000.0)));
 16029  001DEC  0E1D               	movlw	29
 16030  001DEE  0100               	movlb	0	; () banked
 16031  001DF0  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16032  001DF2  0E69               	movlw	105
 16033  001DF4  0100               	movlb	0	; () banked
 16034  001DF6  6FAB               	movwf	??_BothServos& (0+255),b
 16035  001DF8  0EA5               	movlw	165
 16036  001DFA                     u10997:
 16037  001DFA  2EE8               	decfsz	wreg,f,c
 16038  001DFC  D7FE               	bra	u10997
 16039  001DFE  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16040  001E00  D7FC               	bra	u10997
 16041  001E02  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16042  001E04  D7FA               	bra	u10997
 16043                           
 16044                           ;Test.c: 388: updateServoPosition(1050, 3);
 16045  001E06  0E04               	movlw	4
 16046  001E08  0100               	movlb	0	; () banked
 16047  001E0A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16048  001E0C  0E1A               	movlw	26
 16049  001E0E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16050  001E10  0E00               	movlw	0
 16051  001E12  0100               	movlb	0	; () banked
 16052  001E14  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16053  001E16  0E03               	movlw	3
 16054  001E18  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16055  001E1A  EC6A  F026         	call	_updateServoPosition	;wreg free
 16056                           
 16057                           ;Test.c: 389: _delay((unsigned long)((1500)*(32000000/4000.0)));
 16058  001E1E  0E3D               	movlw	61
 16059  001E20  0100               	movlb	0	; () banked
 16060  001E22  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16061  001E24  0EE1               	movlw	225
 16062  001E26  0100               	movlb	0	; () banked
 16063  001E28  6FAB               	movwf	??_BothServos& (0+255),b
 16064  001E2A  0E3F               	movlw	63
 16065  001E2C                     u11007:
 16066  001E2C  2EE8               	decfsz	wreg,f,c
 16067  001E2E  D7FE               	bra	u11007
 16068  001E30  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16069  001E32  D7FC               	bra	u11007
 16070  001E34  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16071  001E36  D7FA               	bra	u11007
 16072  001E38  D000               	nop2	
 16073                           
 16074                           ;Test.c: 391: updateServoPosition(1670, 1);
 16075  001E3A  0E06               	movlw	6
 16076  001E3C  0100               	movlb	0	; () banked
 16077  001E3E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16078  001E40  0E86               	movlw	134
 16079  001E42  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16080  001E44  0E00               	movlw	0
 16081  001E46  0100               	movlb	0	; () banked
 16082  001E48  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16083  001E4A  0E01               	movlw	1
 16084  001E4C  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16085  001E4E  EC6A  F026         	call	_updateServoPosition	;wreg free
 16086                           
 16087                           ;Test.c: 392: updateServoPosition(1050, 3);
 16088  001E52  0E04               	movlw	4
 16089  001E54  0100               	movlb	0	; () banked
 16090  001E56  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16091  001E58  0E1A               	movlw	26
 16092  001E5A  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16093  001E5C  0E00               	movlw	0
 16094  001E5E  0100               	movlb	0	; () banked
 16095  001E60  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16096  001E62  0E03               	movlw	3
 16097  001E64  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16098  001E66  EC6A  F026         	call	_updateServoPosition	;wreg free
 16099                           
 16100                           ;Test.c: 393: _delay((unsigned long)((750)*(32000000/4000.0)));
 16101  001E6A  0E1F               	movlw	31
 16102  001E6C  0100               	movlb	0	; () banked
 16103  001E6E  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16104  001E70  0E71               	movlw	113
 16105  001E72  0100               	movlb	0	; () banked
 16106  001E74  6FAB               	movwf	??_BothServos& (0+255),b
 16107  001E76  0E1E               	movlw	30
 16108  001E78                     u11017:
 16109  001E78  2EE8               	decfsz	wreg,f,c
 16110  001E7A  D7FE               	bra	u11017
 16111  001E7C  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16112  001E7E  D7FC               	bra	u11017
 16113  001E80  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16114  001E82  D7FA               	bra	u11017
 16115  001E84  F000               	nop	
 16116                           
 16117                           ;Test.c: 394: updateServoPosition(1390, 3);
 16118  001E86  0E05               	movlw	5
 16119  001E88  0100               	movlb	0	; () banked
 16120  001E8A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16121  001E8C  0E6E               	movlw	110
 16122  001E8E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16123  001E90  0E00               	movlw	0
 16124  001E92  0100               	movlb	0	; () banked
 16125  001E94  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16126  001E96  0E03               	movlw	3
 16127  001E98  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16128  001E9A  EC6A  F026         	call	_updateServoPosition	;wreg free
 16129                           
 16130                           ;Test.c: 395: _delay((unsigned long)((700)*(32000000/4000.0)));
 16131  001E9E  0E1D               	movlw	29
 16132  001EA0  0100               	movlb	0	; () banked
 16133  001EA2  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16134  001EA4  0E69               	movlw	105
 16135  001EA6  0100               	movlb	0	; () banked
 16136  001EA8  6FAB               	movwf	??_BothServos& (0+255),b
 16137  001EAA  0EA5               	movlw	165
 16138  001EAC                     u11027:
 16139  001EAC  2EE8               	decfsz	wreg,f,c
 16140  001EAE  D7FE               	bra	u11027
 16141  001EB0  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16142  001EB2  D7FC               	bra	u11027
 16143  001EB4  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16144  001EB6  D7FA               	bra	u11027
 16145                           
 16146                           ;Test.c: 396: updateServoPosition(1050, 3);
 16147  001EB8  0E04               	movlw	4
 16148  001EBA  0100               	movlb	0	; () banked
 16149  001EBC  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16150  001EBE  0E1A               	movlw	26
 16151  001EC0  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16152  001EC2  0E00               	movlw	0
 16153  001EC4  0100               	movlb	0	; () banked
 16154  001EC6  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16155  001EC8  0E03               	movlw	3
 16156  001ECA  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16157  001ECC  EC6A  F026         	call	_updateServoPosition	;wreg free
 16158                           
 16159                           ;Test.c: 397: _delay((unsigned long)((750)*(32000000/4000.0)));
 16160  001ED0  0E1F               	movlw	31
 16161  001ED2  0100               	movlb	0	; () banked
 16162  001ED4  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16163  001ED6  0E71               	movlw	113
 16164  001ED8  0100               	movlb	0	; () banked
 16165  001EDA  6FAB               	movwf	??_BothServos& (0+255),b
 16166  001EDC  0E1E               	movlw	30
 16167  001EDE                     u11037:
 16168  001EDE  2EE8               	decfsz	wreg,f,c
 16169  001EE0  D7FE               	bra	u11037
 16170  001EE2  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16171  001EE4  D7FC               	bra	u11037
 16172  001EE6  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16173  001EE8  D7FA               	bra	u11037
 16174  001EEA  F000               	nop	
 16175                           
 16176                           ;Test.c: 399: updateServoPosition(2400, 1);
 16177  001EEC  0E09               	movlw	9
 16178  001EEE  0100               	movlb	0	; () banked
 16179  001EF0  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16180  001EF2  0E60               	movlw	96
 16181  001EF4  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16182  001EF6  0E00               	movlw	0
 16183  001EF8  0100               	movlb	0	; () banked
 16184  001EFA  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16185  001EFC  0E01               	movlw	1
 16186  001EFE  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16187  001F00  EC6A  F026         	call	_updateServoPosition	;wreg free
 16188                           
 16189                           ;Test.c: 400: updateServoPosition(1050, 3);
 16190  001F04  0E04               	movlw	4
 16191  001F06  0100               	movlb	0	; () banked
 16192  001F08  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16193  001F0A  0E1A               	movlw	26
 16194  001F0C  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16195  001F0E  0E00               	movlw	0
 16196  001F10  0100               	movlb	0	; () banked
 16197  001F12  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16198  001F14  0E03               	movlw	3
 16199  001F16  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16200  001F18  EC6A  F026         	call	_updateServoPosition	;wreg free
 16201                           
 16202                           ;Test.c: 401: _delay((unsigned long)((750)*(32000000/4000.0)));
 16203  001F1C  0E1F               	movlw	31
 16204  001F1E  0100               	movlb	0	; () banked
 16205  001F20  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16206  001F22  0E71               	movlw	113
 16207  001F24  0100               	movlb	0	; () banked
 16208  001F26  6FAB               	movwf	??_BothServos& (0+255),b
 16209  001F28  0E1E               	movlw	30
 16210  001F2A                     u11047:
 16211  001F2A  2EE8               	decfsz	wreg,f,c
 16212  001F2C  D7FE               	bra	u11047
 16213  001F2E  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16214  001F30  D7FC               	bra	u11047
 16215  001F32  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16216  001F34  D7FA               	bra	u11047
 16217  001F36  F000               	nop	
 16218                           
 16219                           ;Test.c: 402: updateServoPosition(1390, 3);
 16220  001F38  0E05               	movlw	5
 16221  001F3A  0100               	movlb	0	; () banked
 16222  001F3C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16223  001F3E  0E6E               	movlw	110
 16224  001F40  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16225  001F42  0E00               	movlw	0
 16226  001F44  0100               	movlb	0	; () banked
 16227  001F46  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16228  001F48  0E03               	movlw	3
 16229  001F4A  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16230  001F4C  EC6A  F026         	call	_updateServoPosition	;wreg free
 16231                           
 16232                           ;Test.c: 403: _delay((unsigned long)((700)*(32000000/4000.0)));
 16233  001F50  0E1D               	movlw	29
 16234  001F52  0100               	movlb	0	; () banked
 16235  001F54  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16236  001F56  0E69               	movlw	105
 16237  001F58  0100               	movlb	0	; () banked
 16238  001F5A  6FAB               	movwf	??_BothServos& (0+255),b
 16239  001F5C  0EA5               	movlw	165
 16240  001F5E                     u11057:
 16241  001F5E  2EE8               	decfsz	wreg,f,c
 16242  001F60  D7FE               	bra	u11057
 16243  001F62  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16244  001F64  D7FC               	bra	u11057
 16245  001F66  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16246  001F68  D7FA               	bra	u11057
 16247                           
 16248                           ;Test.c: 404: updateServoPosition(1050, 3);
 16249  001F6A  0E04               	movlw	4
 16250  001F6C  0100               	movlb	0	; () banked
 16251  001F6E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16252  001F70  0E1A               	movlw	26
 16253  001F72  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16254  001F74  0E00               	movlw	0
 16255  001F76  0100               	movlb	0	; () banked
 16256  001F78  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16257  001F7A  0E03               	movlw	3
 16258  001F7C  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16259  001F7E  EC6A  F026         	call	_updateServoPosition	;wreg free
 16260                           
 16261                           ;Test.c: 405: _delay((unsigned long)((750)*(32000000/4000.0)));
 16262  001F82  0E1F               	movlw	31
 16263  001F84  0100               	movlb	0	; () banked
 16264  001F86  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 16265  001F88  0E71               	movlw	113
 16266  001F8A  0100               	movlb	0	; () banked
 16267  001F8C  6FAB               	movwf	??_BothServos& (0+255),b
 16268  001F8E  0E1E               	movlw	30
 16269  001F90                     u11067:
 16270  001F90  2EE8               	decfsz	wreg,f,c
 16271  001F92  D7FE               	bra	u11067
 16272  001F94  2FAB               	decfsz	??_BothServos& (0+255),f,b
 16273  001F96  D7FC               	bra	u11067
 16274  001F98  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 16275  001F9A  D7FA               	bra	u11067
 16276  001F9C  F000               	nop	
 16277                           
 16278                           ;Test.c: 407: stopSignals();
 16279  001F9E  EC38  F02D         	call	_stopSignals	;wreg free
 16280                           
 16281                           ;Test.c: 408: machine_state = Testing_state;
 16282  001FA2  0E03               	movlw	3
 16283  001FA4  0100               	movlb	0	; () banked
 16284  001FA6  6FFC               	movwf	_machine_state& (0+255),b
 16285                           
 16286                           ; BSR set to: 0
 16287  001FA8  0012               	return		;funcret
 16288  001FAA                     __end_of_BothServos:
 16289                           	opt stack 0
 16290                           tblptru	equ	0xFF8
 16291                           tblptrh	equ	0xFF7
 16292                           tblptrl	equ	0xFF6
 16293                           tablat	equ	0xFF5
 16294                           prodh	equ	0xFF4
 16295                           prodl	equ	0xFF3
 16296                           intcon	equ	0xFF2
 16297                           intcon2	equ	0xFF1
 16298                           intcon3	equ	0xFF0
 16299                           postinc0	equ	0xFEE
 16300                           wreg	equ	0xFE8
 16301                           postdec1	equ	0xFE5
 16302                           fsr1l	equ	0xFE1
 16303                           indf2	equ	0xFDF
 16304                           postinc2	equ	0xFDE
 16305                           postdec2	equ	0xFDD
 16306                           fsr2h	equ	0xFDA
 16307                           fsr2l	equ	0xFD9
 16308                           status	equ	0xFD8
 16309                           
 16310 ;; *************** function _stopSignals *****************
 16311 ;; Defined at:
 16312 ;;		line 71 in file "main.c"
 16313 ;; Parameters:    Size  Location     Type
 16314 ;;		None
 16315 ;; Auto vars:     Size  Location     Type
 16316 ;;		None
 16317 ;; Return value:  Size  Location     Type
 16318 ;;                  1    wreg      void 
 16319 ;; Registers used:
 16320 ;;		wreg, status,2
 16321 ;; Tracked objects:
 16322 ;;		On entry : 0/0
 16323 ;;		On exit  : 0/0
 16324 ;;		Unchanged: 0/0
 16325 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16326 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16327 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16328 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16329 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16330 ;;Total ram usage:        0 bytes
 16331 ;; Hardware stack levels used:    1
 16332 ;; Hardware stack levels required when called:    7
 16333 ;; This function calls:
 16334 ;;		Nothing
 16335 ;; This function is called by:
 16336 ;;		_main
 16337 ;;		_BothServos
 16338 ;;		_PlatformTest
 16339 ;;		_arm
 16340 ;; This function uses a non-reentrant model
 16341 ;;
 16342                           
 16343                           	psect	text51
 16344  005A70                     __ptext51:
 16345                           	opt stack 0
 16346  005A70                     _stopSignals:
 16347                           	opt stack 23
 16348                           
 16349                           ;main.c: 72: LATA = 0x00;
 16350                           
 16351                           ; BSR set to: 0
 16352                           ;incstack = 0
 16353  005A70  0E00               	movlw	0
 16354  005A72  6E89               	movwf	3977,c	;volatile
 16355                           
 16356                           ;main.c: 73: LATB = 0x00;
 16357  005A74  0E00               	movlw	0
 16358  005A76  6E8A               	movwf	3978,c	;volatile
 16359                           
 16360                           ;main.c: 74: LATC = 0x00;
 16361  005A78  0E00               	movlw	0
 16362  005A7A  6E8B               	movwf	3979,c	;volatile
 16363                           
 16364                           ;main.c: 75: LATD = 0x00;
 16365  005A7C  0E00               	movlw	0
 16366  005A7E  6E8C               	movwf	3980,c	;volatile
 16367                           
 16368                           ;main.c: 76: LATE = 0x00;
 16369  005A80  0E00               	movlw	0
 16370  005A82  6E8D               	movwf	3981,c	;volatile
 16371                           
 16372                           ;main.c: 77: TMR1ON = 0;
 16373  005A84  90CD               	bcf	4045,0,c	;volatile
 16374                           
 16375                           ;main.c: 78: TMR2ON = 0;
 16376  005A86  94CA               	bcf	4042,2,c	;volatile
 16377                           
 16378                           ;main.c: 79: TMR3ON = 0;
 16379  005A88  90B1               	bcf	4017,0,c	;volatile
 16380  005A8A  0012               	return		;funcret
 16381  005A8C                     __end_of_stopSignals:
 16382                           	opt stack 0
 16383                           tblptru	equ	0xFF8
 16384                           tblptrh	equ	0xFF7
 16385                           tblptrl	equ	0xFF6
 16386                           tablat	equ	0xFF5
 16387                           prodh	equ	0xFF4
 16388                           prodl	equ	0xFF3
 16389                           intcon	equ	0xFF2
 16390                           intcon2	equ	0xFF1
 16391                           intcon3	equ	0xFF0
 16392                           postinc0	equ	0xFEE
 16393                           wreg	equ	0xFE8
 16394                           postdec1	equ	0xFE5
 16395                           fsr1l	equ	0xFE1
 16396                           indf2	equ	0xFDF
 16397                           postinc2	equ	0xFDE
 16398                           postdec2	equ	0xFDD
 16399                           fsr2h	equ	0xFDA
 16400                           fsr2l	equ	0xFD9
 16401                           status	equ	0xFD8
 16402                           
 16403 ;; *************** function _initServos *****************
 16404 ;; Defined at:
 16405 ;;		line 451 in file "sort.c"
 16406 ;; Parameters:    Size  Location     Type
 16407 ;;		None
 16408 ;; Auto vars:     Size  Location     Type
 16409 ;;		None
 16410 ;; Return value:  Size  Location     Type
 16411 ;;                  1    wreg      void 
 16412 ;; Registers used:
 16413 ;;		wreg, status,2, status,0, cstack
 16414 ;; Tracked objects:
 16415 ;;		On entry : 0/0
 16416 ;;		On exit  : 0/0
 16417 ;;		Unchanged: 0/0
 16418 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16419 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16420 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16421 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16422 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16423 ;;Total ram usage:        1 bytes
 16424 ;; Hardware stack levels used:    1
 16425 ;; Hardware stack levels required when called:    8
 16426 ;; This function calls:
 16427 ;;		_updateServoPosition
 16428 ;; This function is called by:
 16429 ;;		_Loading
 16430 ;;		_BothServos
 16431 ;; This function uses a non-reentrant model
 16432 ;;
 16433                           
 16434                           	psect	text52
 16435  004DDE                     __ptext52:
 16436                           	opt stack 0
 16437  004DDE                     _initServos:
 16438                           	opt stack 20
 16439                           
 16440                           ;sort.c: 453: updateServoPosition(1200, 1);
 16441                           
 16442                           ;incstack = 0
 16443  004DDE  0E04               	movlw	4
 16444  004DE0  0100               	movlb	0	; () banked
 16445  004DE2  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16446  004DE4  0EB0               	movlw	176
 16447  004DE6  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16448  004DE8  0E00               	movlw	0
 16449  004DEA  0100               	movlb	0	; () banked
 16450  004DEC  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16451  004DEE  0E01               	movlw	1
 16452  004DF0  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16453  004DF2  EC6A  F026         	call	_updateServoPosition	;wreg free
 16454                           
 16455                           ;sort.c: 454: updateServoPosition(1050, 3);
 16456  004DF6  0E04               	movlw	4
 16457  004DF8  0100               	movlb	0	; () banked
 16458  004DFA  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 16459  004DFC  0E1A               	movlw	26
 16460  004DFE  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 16461  004E00  0E00               	movlw	0
 16462  004E02  0100               	movlb	0	; () banked
 16463  004E04  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 16464  004E06  0E03               	movlw	3
 16465  004E08  6F82               	movwf	updateServoPosition@timer& (0+255),b
 16466  004E0A  EC6A  F026         	call	_updateServoPosition	;wreg free
 16467                           
 16468                           ;sort.c: 455: TMR1ON = 1;
 16469  004E0E  80CD               	bsf	4045,0,c	;volatile
 16470                           
 16471                           ;sort.c: 456: was_low_1 = 0;
 16472  004E10  0E00               	movlw	0
 16473  004E12  6E78               	movwf	_was_low_1+1,c	;volatile
 16474  004E14  0E00               	movlw	0
 16475  004E16  6E77               	movwf	_was_low_1,c	;volatile
 16476                           
 16477                           ;sort.c: 458: _delay((unsigned long)((5)*(32000000/4000.0)));
 16478  004E18  0E34               	movlw	52
 16479  004E1A  0100               	movlb	0	; () banked
 16480  004E1C  6F88               	movwf	??_initServos& (0+255),b
 16481  004E1E  0EF1               	movlw	241
 16482  004E20                     u11077:
 16483  004E20  2EE8               	decfsz	wreg,f,c
 16484  004E22  D7FE               	bra	u11077
 16485  004E24  2F88               	decfsz	??_initServos& (0+255),f,b
 16486  004E26  D7FC               	bra	u11077
 16487  004E28  D000               	nop2	
 16488                           
 16489                           ;sort.c: 460: TMR3ON = 1;
 16490  004E2A  80B1               	bsf	4017,0,c	;volatile
 16491                           
 16492                           ;sort.c: 461: was_low_3 = 0;
 16493  004E2C  0E00               	movlw	0
 16494  004E2E  6E7C               	movwf	_was_low_3+1,c	;volatile
 16495  004E30  0E00               	movlw	0
 16496  004E32  6E7B               	movwf	_was_low_3,c	;volatile
 16497                           
 16498                           ;sort.c: 464: _delay((unsigned long)((1)*(32000000/4000.0)));
 16499  004E34  0E0B               	movlw	11
 16500  004E36  0100               	movlb	0	; () banked
 16501  004E38  6F88               	movwf	??_initServos& (0+255),b
 16502  004E3A  0E62               	movlw	98
 16503  004E3C                     u11087:
 16504  004E3C  2EE8               	decfsz	wreg,f,c
 16505  004E3E  D7FE               	bra	u11087
 16506  004E40  2F88               	decfsz	??_initServos& (0+255),f,b
 16507  004E42  D7FC               	bra	u11087
 16508  004E44  F000               	nop	
 16509                           
 16510                           ;sort.c: 465: LATBbits.LATB3 = 0;
 16511  004E46  968A               	bcf	3978,3,c	;volatile
 16512                           
 16513                           ;sort.c: 466: TMR2ON = 1;
 16514  004E48  84CA               	bsf	4042,2,c	;volatile
 16515                           
 16516                           ;sort.c: 467: was_low_2 = 0;
 16517  004E4A  0E00               	movlw	0
 16518  004E4C  6E7A               	movwf	_was_low_2+1,c	;volatile
 16519  004E4E  0E00               	movlw	0
 16520  004E50  6E79               	movwf	_was_low_2,c	;volatile
 16521                           
 16522                           ;sort.c: 469: LATCbits.LATC0 = 1;
 16523  004E52  808B               	bsf	3979,0,c	;volatile
 16524  004E54  0012               	return		;funcret
 16525  004E56                     __end_of_initServos:
 16526                           	opt stack 0
 16527                           tblptru	equ	0xFF8
 16528                           tblptrh	equ	0xFF7
 16529                           tblptrl	equ	0xFF6
 16530                           tablat	equ	0xFF5
 16531                           prodh	equ	0xFF4
 16532                           prodl	equ	0xFF3
 16533                           intcon	equ	0xFF2
 16534                           intcon2	equ	0xFF1
 16535                           intcon3	equ	0xFF0
 16536                           postinc0	equ	0xFEE
 16537                           wreg	equ	0xFE8
 16538                           postdec1	equ	0xFE5
 16539                           fsr1l	equ	0xFE1
 16540                           indf2	equ	0xFDF
 16541                           postinc2	equ	0xFDE
 16542                           postdec2	equ	0xFDD
 16543                           fsr2h	equ	0xFDA
 16544                           fsr2l	equ	0xFD9
 16545                           status	equ	0xFD8
 16546                           
 16547 ;; *************** function _updateServoPosition *****************
 16548 ;; Defined at:
 16549 ;;		line 537 in file "sort.c"
 16550 ;; Parameters:    Size  Location     Type
 16551 ;;  time_us         2    0[BANK0 ] int 
 16552 ;;  timer           2    2[BANK0 ] int 
 16553 ;; Auto vars:     Size  Location     Type
 16554 ;;  my_time         2    6[BANK0 ] unsigned int 
 16555 ;; Return value:  Size  Location     Type
 16556 ;;                  1    wreg      void 
 16557 ;; Registers used:
 16558 ;;		wreg, status,2, status,0
 16559 ;; Tracked objects:
 16560 ;;		On entry : 0/0
 16561 ;;		On exit  : 0/0
 16562 ;;		Unchanged: 0/0
 16563 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16564 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16565 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16566 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16567 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16568 ;;Total ram usage:        8 bytes
 16569 ;; Hardware stack levels used:    1
 16570 ;; Hardware stack levels required when called:    7
 16571 ;; This function calls:
 16572 ;;		Nothing
 16573 ;; This function is called by:
 16574 ;;		_Distribution
 16575 ;;		_initServos
 16576 ;;		_actuatorTest
 16577 ;;		_BothServos
 16578 ;; This function uses a non-reentrant model
 16579 ;;
 16580                           
 16581                           	psect	text53
 16582  004CD4                     __ptext53:
 16583                           	opt stack 0
 16584  004CD4                     _updateServoPosition:
 16585                           	opt stack 20
 16586                           
 16587                           ;sort.c: 538: unsigned int my_time = 65535 - time_us;
 16588                           
 16589                           ;incstack = 0
 16590  004CD4  C080  F084         	movff	updateServoPosition@time_us,??_updateServoPosition
 16591  004CD8  C081  F085         	movff	updateServoPosition@time_us+1,??_updateServoPosition+1
 16592  004CDC  0100               	movlb	0	; () banked
 16593  004CDE  1F84               	comf	??_updateServoPosition& (0+255),f,b
 16594  004CE0  1F85               	comf	(??_updateServoPosition+1)& (0+255),f,b
 16595  004CE2  4B84               	infsnz	??_updateServoPosition& (0+255),f,b
 16596  004CE4  2B85               	incf	(??_updateServoPosition+1)& (0+255),f,b
 16597  004CE6  0EFF               	movlw	255
 16598  004CE8  0100               	movlb	0	; () banked
 16599  004CEA  2584               	addwf	??_updateServoPosition& (0+255),w,b
 16600  004CEC  0100               	movlb	0	; () banked
 16601  004CEE  6F86               	movwf	updateServoPosition@my_time& (0+255),b
 16602  004CF0  0EFF               	movlw	255
 16603  004CF2  0100               	movlb	0	; () banked
 16604  004CF4  2185               	addwfc	(??_updateServoPosition+1)& (0+255),w,b
 16605  004CF6  0100               	movlb	0	; () banked
 16606  004CF8  6F87               	movwf	(updateServoPosition@my_time+1)& (0+255),b
 16607                           
 16608                           ;sort.c: 539: switch(timer){
 16609  004CFA  D01D               	goto	l6832
 16610  004CFC                     l6826:
 16611                           
 16612                           ; BSR set to: 0
 16613                           ;sort.c: 541: servoTimes[0] = my_time >> 8;
 16614  004CFC  0100               	movlb	0	; () banked
 16615  004CFE  5187               	movf	(updateServoPosition@my_time+1)& (0+255),w,b
 16616  004D00  0101               	movlb	1	; () banked
 16617  004D02  6F1C               	movwf	_servoTimes& (0+255),b
 16618  004D04  6B1D               	clrf	(_servoTimes+1)& (0+255),b
 16619                           
 16620                           ;sort.c: 542: servoTimes[1] = my_time & 0xFF;
 16621  004D06  0100               	movlb	0	; () banked
 16622  004D08  5186               	movf	updateServoPosition@my_time& (0+255),w,b
 16623  004D0A  0101               	movlb	1	; () banked
 16624  004D0C  6F1E               	movwf	(_servoTimes+2)& (0+255),b
 16625  004D0E  6B1F               	clrf	(_servoTimes+3)& (0+255),b
 16626                           
 16627                           ; BSR set to: 1
 16628                           ;sort.c: 544: pan_servo_state = time_us;
 16629  004D10  C080  F06B         	movff	updateServoPosition@time_us,_pan_servo_state	;volatile
 16630  004D14  C081  F06C         	movff	updateServoPosition@time_us+1,_pan_servo_state+1	;volatile
 16631  004D18                     l915:
 16632                           
 16633                           ;sort.c: 546: servoTimes[2] = my_time >> 8;
 16634  004D18  0100               	movlb	0	; () banked
 16635  004D1A  5187               	movf	(updateServoPosition@my_time+1)& (0+255),w,b
 16636  004D1C  0101               	movlb	1	; () banked
 16637  004D1E  6F20               	movwf	(_servoTimes+4)& (0+255),b
 16638  004D20  6B21               	clrf	(_servoTimes+5)& (0+255),b
 16639                           
 16640                           ;sort.c: 547: servoTimes[3] = my_time & 0xFF;
 16641  004D22  0100               	movlb	0	; () banked
 16642  004D24  5186               	movf	updateServoPosition@my_time& (0+255),w,b
 16643  004D26  0101               	movlb	1	; () banked
 16644  004D28  6F22               	movwf	(_servoTimes+6)& (0+255),b
 16645  004D2A  6B23               	clrf	(_servoTimes+7)& (0+255),b
 16646                           
 16647                           ; BSR set to: 1
 16648                           ;sort.c: 549: tilt_servo_state = time_us;
 16649  004D2C  C080  F071         	movff	updateServoPosition@time_us,_tilt_servo_state	;volatile
 16650  004D30  C081  F072         	movff	updateServoPosition@time_us+1,_tilt_servo_state+1	;volatile
 16651                           
 16652                           ;sort.c: 550: }
 16653  004D34  0012               	return	
 16654  004D36                     l6832:
 16655  004D36  C082  F084         	movff	updateServoPosition@timer,??_updateServoPosition
 16656  004D3A  C083  F085         	movff	updateServoPosition@timer+1,??_updateServoPosition+1
 16657                           
 16658                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 16659                           ; Switch size 1, requested type "space"
 16660                           ; Number of cases is 1, Range of values is 0 to 0
 16661                           ; switch strategies available:
 16662                           ; Name         Instructions Cycles
 16663                           ; simple_byte            4     3 (average)
 16664                           ;	Chosen strategy is simple_byte
 16665  004D3E  0100               	movlb	0	; () banked
 16666  004D40  5185               	movf	(??_updateServoPosition+1)& (0+255),w,b
 16667  004D42  0A00               	xorlw	0	; case 0
 16668  004D44  A4D8               	btfss	status,2,c
 16669  004D46  0012               	return	
 16670                           
 16671                           ; BSR set to: 0
 16672                           ; Switch size 1, requested type "space"
 16673                           ; Number of cases is 2, Range of values is 1 to 3
 16674                           ; switch strategies available:
 16675                           ; Name         Instructions Cycles
 16676                           ; simple_byte            7     4 (average)
 16677                           ;	Chosen strategy is simple_byte
 16678  004D48  0100               	movlb	0	; () banked
 16679  004D4A  5184               	movf	??_updateServoPosition& (0+255),w,b
 16680  004D4C  0A01               	xorlw	1	; case 1
 16681  004D4E  B4D8               	btfsc	status,2,c
 16682  004D50  D7D5               	goto	l6826
 16683  004D52  0A02               	xorlw	2	; case 3
 16684  004D54  A4D8               	btfss	status,2,c
 16685  004D56  0012               	return	
 16686  004D58  D7DF               	goto	l915
 16687  004D5A                     __end_of_updateServoPosition:
 16688                           	opt stack 0
 16689                           tblptru	equ	0xFF8
 16690                           tblptrh	equ	0xFF7
 16691                           tblptrl	equ	0xFF6
 16692                           tablat	equ	0xFF5
 16693                           prodh	equ	0xFF4
 16694                           prodl	equ	0xFF3
 16695                           intcon	equ	0xFF2
 16696                           intcon2	equ	0xFF1
 16697                           intcon3	equ	0xFF0
 16698                           postinc0	equ	0xFEE
 16699                           wreg	equ	0xFE8
 16700                           postdec1	equ	0xFE5
 16701                           fsr1l	equ	0xFE1
 16702                           indf2	equ	0xFDF
 16703                           postinc2	equ	0xFDE
 16704                           postdec2	equ	0xFDD
 16705                           fsr2h	equ	0xFDA
 16706                           fsr2l	equ	0xFD9
 16707                           status	equ	0xFD8
 16708                           
 16709 ;; *************** function _BlockerTest *****************
 16710 ;; Defined at:
 16711 ;;		line 581 in file "Test.c"
 16712 ;; Parameters:    Size  Location     Type
 16713 ;;		None
 16714 ;; Auto vars:     Size  Location     Type
 16715 ;;  i               2   45[BANK0 ] int 
 16716 ;;  cond_flag       2   51[BANK0 ] int 
 16717 ;;  cam_flag        2   49[BANK0 ] int 
 16718 ;;  res             2   47[BANK0 ] int 
 16719 ;; Return value:  Size  Location     Type
 16720 ;;                  1    wreg      void 
 16721 ;; Registers used:
 16722 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16723 ;; Tracked objects:
 16724 ;;		On entry : 0/0
 16725 ;;		On exit  : 0/0
 16726 ;;		Unchanged: 0/0
 16727 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16728 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16729 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16730 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16731 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16732 ;;Total ram usage:       10 bytes
 16733 ;; Hardware stack levels used:    1
 16734 ;; Hardware stack levels required when called:   10
 16735 ;; This function calls:
 16736 ;;		_lcdInst
 16737 ;;		_printf
 16738 ;;		_readADC
 16739 ;; This function is called by:
 16740 ;;		_Test
 16741 ;; This function uses a non-reentrant model
 16742 ;;
 16743                           
 16744                           	psect	text54
 16745  003CD4                     __ptext54:
 16746                           	opt stack 0
 16747  003CD4                     _BlockerTest:
 16748                           	opt stack 19
 16749                           
 16750                           ;Test.c: 582: readADC(2);
 16751                           
 16752                           ;incstack = 0
 16753  003CD4  0E02               	movlw	2
 16754  003CD6  EC7C  F02C         	call	_readADC
 16755                           
 16756                           ;Test.c: 583: int res = ADRESH<<8 | ADRESL;
 16757  003CDA  50C3               	movf	4035,w,c	;volatile
 16758  003CDC  CFC4 F0AB          	movff	4036,??_BlockerTest	;volatile
 16759  003CE0  0100               	movlb	0	; () banked
 16760  003CE2  6BAC               	clrf	(??_BlockerTest+1)& (0+255),b
 16761  003CE4  C0AB  F0AC         	movff	??_BlockerTest,??_BlockerTest+1
 16762  003CE8  0100               	movlb	0	; () banked
 16763  003CEA  6BAB               	clrf	??_BlockerTest& (0+255),b
 16764  003CEC  0100               	movlb	0	; () banked
 16765  003CEE  11AB               	iorwf	??_BlockerTest& (0+255),w,b
 16766  003CF0  0100               	movlb	0	; () banked
 16767  003CF2  6FAF               	movwf	BlockerTest@res& (0+255),b
 16768  003CF4  0100               	movlb	0	; () banked
 16769  003CF6  51AC               	movf	(??_BlockerTest+1)& (0+255),w,b
 16770  003CF8  0100               	movlb	0	; () banked
 16771  003CFA  6FB0               	movwf	(BlockerTest@res+1)& (0+255),b
 16772                           
 16773                           ; BSR set to: 0
 16774                           ;Test.c: 585: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 16775  003CFC  0E01               	movlw	1
 16776  003CFE  EC86  F02D         	call	_lcdInst
 16777  003D02  0E68               	movlw	104
 16778  003D04  0100               	movlb	0	; () banked
 16779  003D06  6FAB               	movwf	??_BlockerTest& (0+255),b
 16780  003D08  0EE4               	movlw	228
 16781  003D0A                     u11097:
 16782  003D0A  2EE8               	decfsz	wreg,f,c
 16783  003D0C  D7FE               	bra	u11097
 16784  003D0E  2FAB               	decfsz	??_BlockerTest& (0+255),f,b
 16785  003D10  D7FC               	bra	u11097
 16786  003D12  F000               	nop	
 16787  003D14  0E80               	movlw	128
 16788  003D16  EC86  F02D         	call	_lcdInst
 16789                           
 16790                           ;Test.c: 586: printf("D:RET|2:C %d  ", res);
 16791  003D1A  0E55               	movlw	low STR_123
 16792  003D1C  0100               	movlb	0	; () banked
 16793  003D1E  6F8E               	movwf	printf@f& (0+255),b
 16794  003D20  0EFE               	movlw	high STR_123
 16795  003D22  0100               	movlb	0	; () banked
 16796  003D24  6F8F               	movwf	(printf@f+1)& (0+255),b
 16797  003D26  C0AF  F090         	movff	BlockerTest@res,?_printf+2
 16798  003D2A  C0B0  F091         	movff	BlockerTest@res+1,?_printf+3
 16799  003D2E  ECC2  F00B         	call	_printf	;wreg free
 16800                           
 16801                           ;Test.c: 587: lcdInst(0b11000000);;
 16802  003D32  0EC0               	movlw	192
 16803  003D34  EC86  F02D         	call	_lcdInst
 16804                           
 16805                           ;Test.c: 588: printf("OTHER: CAM TOGGLE");
 16806  003D38  0E24               	movlw	low STR_124
 16807  003D3A  0100               	movlb	0	; () banked
 16808  003D3C  6F8E               	movwf	printf@f& (0+255),b
 16809  003D3E  0EFB               	movlw	high STR_124
 16810  003D40  0100               	movlb	0	; () banked
 16811  003D42  6F8F               	movwf	(printf@f+1)& (0+255),b
 16812  003D44  ECC2  F00B         	call	_printf	;wreg free
 16813                           
 16814                           ;Test.c: 589: int cam_flag = 1;
 16815  003D48  0E00               	movlw	0
 16816  003D4A  0100               	movlb	0	; () banked
 16817  003D4C  6FB2               	movwf	(BlockerTest@cam_flag+1)& (0+255),b
 16818  003D4E  0E01               	movlw	1
 16819  003D50  6FB1               	movwf	BlockerTest@cam_flag& (0+255),b
 16820                           
 16821                           ; BSR set to: 0
 16822                           ;Test.c: 590: int cond_flag = 0;
 16823  003D52  0E00               	movlw	0
 16824  003D54  0100               	movlb	0	; () banked
 16825  003D56  6FB4               	movwf	(BlockerTest@cond_flag+1)& (0+255),b
 16826  003D58  0E00               	movlw	0
 16827  003D5A  6FB3               	movwf	BlockerTest@cond_flag& (0+255),b
 16828                           
 16829                           ; BSR set to: 0
 16830                           ;Test.c: 593: while(PORTBbits.RB1 == 0){
 16831                           
 16832                           ;Test.c: 592: while(1){
 16833  003D5C  D023               	goto	l9040
 16834  003D5E                     l9032:
 16835                           
 16836                           ;Test.c: 594: readADC(2);
 16837  003D5E  0E02               	movlw	2
 16838  003D60  EC7C  F02C         	call	_readADC
 16839                           
 16840                           ;Test.c: 595: res = ADRESH<<8 | ADRESL;
 16841  003D64  50C3               	movf	4035,w,c	;volatile
 16842  003D66  CFC4 F0AB          	movff	4036,??_BlockerTest	;volatile
 16843  003D6A  0100               	movlb	0	; () banked
 16844  003D6C  6BAC               	clrf	(??_BlockerTest+1)& (0+255),b
 16845  003D6E  C0AB  F0AC         	movff	??_BlockerTest,??_BlockerTest+1
 16846  003D72  0100               	movlb	0	; () banked
 16847  003D74  6BAB               	clrf	??_BlockerTest& (0+255),b
 16848  003D76  0100               	movlb	0	; () banked
 16849  003D78  11AB               	iorwf	??_BlockerTest& (0+255),w,b
 16850  003D7A  0100               	movlb	0	; () banked
 16851  003D7C  6FAF               	movwf	BlockerTest@res& (0+255),b
 16852  003D7E  0100               	movlb	0	; () banked
 16853  003D80  51AC               	movf	(??_BlockerTest+1)& (0+255),w,b
 16854  003D82  0100               	movlb	0	; () banked
 16855  003D84  6FB0               	movwf	(BlockerTest@res+1)& (0+255),b
 16856                           
 16857                           ; BSR set to: 0
 16858                           ;Test.c: 596: lcdInst(0b10000000);;
 16859  003D86  0E80               	movlw	128
 16860  003D88  EC86  F02D         	call	_lcdInst
 16861                           
 16862                           ;Test.c: 597: printf("D:RET|2:C %d  ", res);
 16863  003D8C  0E55               	movlw	low STR_123
 16864  003D8E  0100               	movlb	0	; () banked
 16865  003D90  6F8E               	movwf	printf@f& (0+255),b
 16866  003D92  0EFE               	movlw	high STR_123
 16867  003D94  0100               	movlb	0	; () banked
 16868  003D96  6F8F               	movwf	(printf@f+1)& (0+255),b
 16869  003D98  C0AF  F090         	movff	BlockerTest@res,?_printf+2
 16870  003D9C  C0B0  F091         	movff	BlockerTest@res+1,?_printf+3
 16871  003DA0  ECC2  F00B         	call	_printf	;wreg free
 16872  003DA4                     l9040:
 16873  003DA4  A281               	btfss	3969,1,c	;volatile
 16874  003DA6  D7DB               	goto	l9032
 16875                           
 16876                           ;Test.c: 598: }
 16877                           ;Test.c: 599: if(PORTB >> 4 == 0b1111){
 16878  003DA8  3881               	swapf	3969,w,c	;volatile
 16879  003DAA  0B0F               	andlw	15
 16880  003DAC  0A0F               	xorlw	15
 16881  003DAE  B4D8               	btfsc	status,2,c
 16882  003DB0  0012               	return	
 16883                           
 16884                           ;Test.c: 602: else if(PORTB >> 4 == 0b0001){
 16885                           
 16886                           ;Test.c: 601: }
 16887                           
 16888                           ;Test.c: 600: break;
 16889  003DB2  3881               	swapf	3969,w,c	;volatile
 16890  003DB4  0B0F               	andlw	15
 16891  003DB6  06E8               	decf	wreg,f,c
 16892  003DB8  A4D8               	btfss	status,2,c
 16893  003DBA  D016               	goto	l9058
 16894                           
 16895                           ;Test.c: 603: if(cond_flag){
 16896  003DBC  0100               	movlb	0	; () banked
 16897  003DBE  51B3               	movf	BlockerTest@cond_flag& (0+255),w,b
 16898  003DC0  0100               	movlb	0	; () banked
 16899  003DC2  11B4               	iorwf	(BlockerTest@cond_flag+1)& (0+255),w,b
 16900  003DC4  B4D8               	btfsc	status,2,c
 16901  003DC6  D007               	goto	l1433
 16902                           
 16903                           ; BSR set to: 0
 16904                           ;Test.c: 604: LATAbits.LATA3 = 1;
 16905  003DC8  8689               	bsf	3977,3,c	;volatile
 16906  003DCA  D006               	goto	l9056
 16907  003DCC                     u8091:
 16908  003DCC  0E01               	movlw	1
 16909  003DCE                     u8100:
 16910  003DCE  0100               	movlb	0	; () banked
 16911  003DD0  6FB3               	movwf	BlockerTest@cond_flag& (0+255),b
 16912  003DD2  6BB4               	clrf	(BlockerTest@cond_flag+1)& (0+255),b
 16913                           
 16914                           ;Test.c: 606: }
 16915  003DD4  D05F               	goto	l9086
 16916  003DD6                     l1433:
 16917                           
 16918                           ; BSR set to: 0
 16919                           ;Test.c: 607: else{
 16920                           ;Test.c: 608: LATAbits.LATA3 = 0;
 16921  003DD6  9689               	bcf	3977,3,c	;volatile
 16922  003DD8                     l9056:
 16923                           
 16924                           ; BSR set to: 0
 16925                           ;Test.c: 609: cond_flag = !cond_flag;
 16926  003DD8  0100               	movlb	0	; () banked
 16927  003DDA  51B3               	movf	BlockerTest@cond_flag& (0+255),w,b
 16928  003DDC  0100               	movlb	0	; () banked
 16929  003DDE  11B4               	iorwf	(BlockerTest@cond_flag+1)& (0+255),w,b
 16930  003DE0  B4D8               	btfsc	status,2,c
 16931  003DE2  D7F4               	goto	u8091
 16932  003DE4  0E00               	movlw	0
 16933  003DE6  D7F3               	goto	u8100
 16934  003DE8                     l9058:
 16935                           
 16936                           ;Test.c: 612: else{
 16937                           ;Test.c: 613: if(cam_flag){
 16938  003DE8  0100               	movlb	0	; () banked
 16939  003DEA  51B1               	movf	BlockerTest@cam_flag& (0+255),w,b
 16940  003DEC  0100               	movlb	0	; () banked
 16941  003DEE  11B2               	iorwf	(BlockerTest@cam_flag+1)& (0+255),w,b
 16942  003DF0  B4D8               	btfsc	status,2,c
 16943  003DF2  D007               	goto	l9064
 16944                           
 16945                           ; BSR set to: 0
 16946                           ;Test.c: 614: LATCbits.LATC0 = 1;
 16947  003DF4  808B               	bsf	3979,0,c	;volatile
 16948  003DF6  D023               	goto	l9076
 16949  003DF8                     u8141:
 16950  003DF8  0E01               	movlw	1
 16951  003DFA                     u8150:
 16952  003DFA  0100               	movlb	0	; () banked
 16953  003DFC  6FB1               	movwf	BlockerTest@cam_flag& (0+255),b
 16954  003DFE  6BB2               	clrf	(BlockerTest@cam_flag+1)& (0+255),b
 16955                           
 16956                           ;Test.c: 616: }
 16957  003E00  D049               	goto	l9086
 16958  003E02                     l9064:
 16959                           
 16960                           ; BSR set to: 0
 16961                           ;Test.c: 617: else{
 16962                           ;Test.c: 618: for(int i=0;i<5000;i++)
 16963  003E02  0E00               	movlw	0
 16964  003E04  0100               	movlb	0	; () banked
 16965  003E06  6FAE               	movwf	(BlockerTest@i+1)& (0+255),b
 16966  003E08  0E00               	movlw	0
 16967  003E0A  6FAD               	movwf	BlockerTest@i& (0+255),b
 16968  003E0C                     l9066:
 16969                           
 16970                           ; BSR set to: 0
 16971  003E0C  0100               	movlb	0	; () banked
 16972  003E0E  BFAE               	btfsc	(BlockerTest@i+1)& (0+255),7,b
 16973  003E10  D008               	goto	l1438
 16974  003E12  0E88               	movlw	136
 16975  003E14  0100               	movlb	0	; () banked
 16976  003E16  5DAD               	subwf	BlockerTest@i& (0+255),w,b
 16977  003E18  0E13               	movlw	19
 16978  003E1A  0100               	movlb	0	; () banked
 16979  003E1C  59AE               	subwfb	(BlockerTest@i+1)& (0+255),w,b
 16980  003E1E  B0D8               	btfsc	status,0,c
 16981  003E20  D00D               	goto	l1439
 16982  003E22                     l1438:
 16983                           
 16984                           ; BSR set to: 0
 16985                           ;Test.c: 619: {
 16986                           ;Test.c: 620: LATCbits.LATC0 = 1;
 16987  003E22  808B               	bsf	3979,0,c	;volatile
 16988                           
 16989                           ; BSR set to: 0
 16990                           ;Test.c: 621: _delay((unsigned long)((10)*(32000000/4000000.0)));
 16991  003E24  0E1A               	movlw	26
 16992  003E26                     u11107:
 16993  003E26  2EE8               	decfsz	wreg,f,c
 16994  003E28  D7FE               	bra	u11107
 16995  003E2A  D000               	nop2	
 16996                           
 16997                           ;Test.c: 622: LATCbits.LATC0 = 0;
 16998  003E2C  908B               	bcf	3979,0,c	;volatile
 16999                           
 17000                           ;Test.c: 623: _delay((unsigned long)((90)*(32000000/4000000.0)));
 17001  003E2E  0EF0               	movlw	240
 17002  003E30                     u11117:
 17003  003E30  2EE8               	decfsz	wreg,f,c
 17004  003E32  D7FE               	bra	u11117
 17005  003E34  0100               	movlb	0	; () banked
 17006  003E36  4BAD               	infsnz	BlockerTest@i& (0+255),f,b
 17007  003E38  2BAE               	incf	(BlockerTest@i+1)& (0+255),f,b
 17008  003E3A  D7E8               	goto	l9066
 17009  003E3C                     l1439:
 17010                           
 17011                           ; BSR set to: 0
 17012                           ;Test.c: 624: }
 17013                           ;Test.c: 625: LATCbits.LATC0 = 0;
 17014  003E3C  908B               	bcf	3979,0,c	;volatile
 17015  003E3E                     l9076:
 17016                           
 17017                           ; BSR set to: 0
 17018                           ;Test.c: 626: cam_flag = !cam_flag;
 17019  003E3E  0100               	movlb	0	; () banked
 17020  003E40  51B1               	movf	BlockerTest@cam_flag& (0+255),w,b
 17021  003E42  0100               	movlb	0	; () banked
 17022  003E44  11B2               	iorwf	(BlockerTest@cam_flag+1)& (0+255),w,b
 17023  003E46  B4D8               	btfsc	status,2,c
 17024  003E48  D7D7               	goto	u8141
 17025  003E4A  0E00               	movlw	0
 17026  003E4C  D7D6               	goto	u8150
 17027  003E4E                     l9078:
 17028                           
 17029                           ;Test.c: 631: readADC(2);
 17030  003E4E  0E02               	movlw	2
 17031  003E50  EC7C  F02C         	call	_readADC
 17032                           
 17033                           ;Test.c: 632: res = ADRESH<<8 | ADRESL;
 17034  003E54  50C3               	movf	4035,w,c	;volatile
 17035  003E56  CFC4 F0AB          	movff	4036,??_BlockerTest	;volatile
 17036  003E5A  0100               	movlb	0	; () banked
 17037  003E5C  6BAC               	clrf	(??_BlockerTest+1)& (0+255),b
 17038  003E5E  C0AB  F0AC         	movff	??_BlockerTest,??_BlockerTest+1
 17039  003E62  0100               	movlb	0	; () banked
 17040  003E64  6BAB               	clrf	??_BlockerTest& (0+255),b
 17041  003E66  0100               	movlb	0	; () banked
 17042  003E68  11AB               	iorwf	??_BlockerTest& (0+255),w,b
 17043  003E6A  0100               	movlb	0	; () banked
 17044  003E6C  6FAF               	movwf	BlockerTest@res& (0+255),b
 17045  003E6E  0100               	movlb	0	; () banked
 17046  003E70  51AC               	movf	(??_BlockerTest+1)& (0+255),w,b
 17047  003E72  0100               	movlb	0	; () banked
 17048  003E74  6FB0               	movwf	(BlockerTest@res+1)& (0+255),b
 17049                           
 17050                           ; BSR set to: 0
 17051                           ;Test.c: 633: lcdInst(0b10000000);;
 17052  003E76  0E80               	movlw	128
 17053  003E78  EC86  F02D         	call	_lcdInst
 17054                           
 17055                           ;Test.c: 634: printf("D:RET|2:C %d  ", res);
 17056  003E7C  0E55               	movlw	low STR_123
 17057  003E7E  0100               	movlb	0	; () banked
 17058  003E80  6F8E               	movwf	printf@f& (0+255),b
 17059  003E82  0EFE               	movlw	high STR_123
 17060  003E84  0100               	movlb	0	; () banked
 17061  003E86  6F8F               	movwf	(printf@f+1)& (0+255),b
 17062  003E88  C0AF  F090         	movff	BlockerTest@res,?_printf+2
 17063  003E8C  C0B0  F091         	movff	BlockerTest@res+1,?_printf+3
 17064  003E90  ECC2  F00B         	call	_printf	;wreg free
 17065  003E94                     l9086:
 17066  003E94  A281               	btfss	3969,1,c	;volatile
 17067  003E96  D786               	goto	l9040
 17068  003E98  D7DA               	goto	l9078
 17069  003E9A                     __end_of_BlockerTest:
 17070                           	opt stack 0
 17071                           tblptru	equ	0xFF8
 17072                           tblptrh	equ	0xFF7
 17073                           tblptrl	equ	0xFF6
 17074                           tablat	equ	0xFF5
 17075                           prodh	equ	0xFF4
 17076                           prodl	equ	0xFF3
 17077                           intcon	equ	0xFF2
 17078                           intcon2	equ	0xFF1
 17079                           intcon3	equ	0xFF0
 17080                           postinc0	equ	0xFEE
 17081                           wreg	equ	0xFE8
 17082                           postdec1	equ	0xFE5
 17083                           fsr1l	equ	0xFE1
 17084                           indf2	equ	0xFDF
 17085                           postinc2	equ	0xFDE
 17086                           postdec2	equ	0xFDD
 17087                           fsr2h	equ	0xFDA
 17088                           fsr2l	equ	0xFD9
 17089                           status	equ	0xFD8
 17090                           
 17091 ;; *************** function _readADC *****************
 17092 ;; Defined at:
 17093 ;;		line 15 in file "ADCFunctionality.c"
 17094 ;; Parameters:    Size  Location     Type
 17095 ;;  channel         1    wreg     unsigned char 
 17096 ;; Auto vars:     Size  Location     Type
 17097 ;;  channel         1    1[BANK0 ] unsigned char 
 17098 ;; Return value:  Size  Location     Type
 17099 ;;                  1    wreg      void 
 17100 ;; Registers used:
 17101 ;;		wreg, status,2, status,0, cstack
 17102 ;; Tracked objects:
 17103 ;;		On entry : 0/0
 17104 ;;		On exit  : 0/0
 17105 ;;		Unchanged: 0/0
 17106 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17107 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17108 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17109 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17110 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17111 ;;Total ram usage:        2 bytes
 17112 ;; Hardware stack levels used:    1
 17113 ;; Hardware stack levels required when called:    7
 17114 ;; This function calls:
 17115 ;;		Nothing
 17116 ;; This function is called by:
 17117 ;;		_readIR
 17118 ;;		_readMAG
 17119 ;;		_readCOND
 17120 ;;		_sensorTest
 17121 ;;		_PlatformTest
 17122 ;;		_BlockerTest
 17123 ;; This function uses a non-reentrant model
 17124 ;;
 17125                           
 17126                           	psect	text55
 17127  0058F8                     __ptext55:
 17128                           	opt stack 0
 17129  0058F8                     _readADC:
 17130                           	opt stack 20
 17131                           
 17132                           ;incstack = 0
 17133                           ;readADC@channel stored from wreg
 17134  0058F8  0100               	movlb	0	; () banked
 17135  0058FA  6F81               	movwf	readADC@channel& (0+255),b
 17136                           
 17137                           ;ADCFunctionality.c: 17: ADCON0 = channel << 2;
 17138  0058FC  0100               	movlb	0	; () banked
 17139  0058FE  4581               	rlncf	readADC@channel& (0+255),w,b
 17140  005900  46E8               	rlncf	wreg,f,c
 17141  005902  0BFC               	andlw	252
 17142  005904  6EC2               	movwf	4034,c	;volatile
 17143                           
 17144                           ; BSR set to: 0
 17145                           ;ADCFunctionality.c: 18: ADCON0bits.ADON = 1;
 17146  005906  80C2               	bsf	4034,0,c	;volatile
 17147                           
 17148                           ; BSR set to: 0
 17149                           ;ADCFunctionality.c: 19: ADCON0bits.GO = 1;
 17150  005908  82C2               	bsf	4034,1,c	;volatile
 17151                           
 17152                           ;ADCFunctionality.c: 20: while(ADCON0bits.GO_NOT_DONE){_delay((unsigned long)((5)*(32000
      +                          000/4000.0)));}
 17153  00590A  D009               	goto	l6464
 17154  00590C                     l6462:
 17155  00590C  0E34               	movlw	52
 17156  00590E  0100               	movlb	0	; () banked
 17157  005910  6F80               	movwf	??_readADC& (0+255),b
 17158  005912  0EF1               	movlw	241
 17159  005914                     u11127:
 17160  005914  2EE8               	decfsz	wreg,f,c
 17161  005916  D7FE               	bra	u11127
 17162  005918  2F80               	decfsz	??_readADC& (0+255),f,b
 17163  00591A  D7FC               	bra	u11127
 17164  00591C  D000               	nop2	
 17165  00591E                     l6464:
 17166  00591E  A2C2               	btfss	4034,1,c	;volatile
 17167  005920  0012               	return	
 17168  005922  D7F4               	goto	l6462
 17169  005924                     __end_of_readADC:
 17170                           	opt stack 0
 17171                           tblptru	equ	0xFF8
 17172                           tblptrh	equ	0xFF7
 17173                           tblptrl	equ	0xFF6
 17174                           tablat	equ	0xFF5
 17175                           prodh	equ	0xFF4
 17176                           prodl	equ	0xFF3
 17177                           intcon	equ	0xFF2
 17178                           intcon2	equ	0xFF1
 17179                           intcon3	equ	0xFF0
 17180                           postinc0	equ	0xFEE
 17181                           wreg	equ	0xFE8
 17182                           postdec1	equ	0xFE5
 17183                           fsr1l	equ	0xFE1
 17184                           indf2	equ	0xFDF
 17185                           postinc2	equ	0xFDE
 17186                           postdec2	equ	0xFDD
 17187                           fsr2h	equ	0xFDA
 17188                           fsr2l	equ	0xFD9
 17189                           status	equ	0xFD8
 17190                           
 17191 ;; *************** function _printf *****************
 17192 ;; Defined at:
 17193 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 17194 ;; Parameters:    Size  Location     Type
 17195 ;;  f               2   14[BANK0 ] PTR const unsigned char 
 17196 ;;		 -> STR_130(18), STR_129(18), STR_128(17), STR_127(17), 
 17197 ;;		 -> STR_126(15), STR_125(15), STR_124(18), STR_123(15), 
 17198 ;;		 -> STR_122(18), STR_121(18), STR_120(17), STR_119(17), 
 17199 ;;		 -> STR_118(17), STR_117(17), STR_116(17), STR_115(17), 
 17200 ;;		 -> STR_114(17), STR_113(17), STR_112(18), STR_111(17), 
 17201 ;;		 -> STR_110(15), STR_109(15), STR_108(15), STR_107(17), 
 17202 ;;		 -> STR_106(17), STR_105(17), STR_104(16), STR_103(17), 
 17203 ;;		 -> STR_102(17), STR_101(17), STR_100(17), STR_99(17), 
 17204 ;;		 -> STR_98(17), STR_97(15), STR_96(11), STR_95(17), 
 17205 ;;		 -> STR_94(11), STR_93(17), STR_92(14), STR_91(15), 
 17206 ;;		 -> STR_90(14), STR_89(10), STR_88(9), STR_87(9), 
 17207 ;;		 -> STR_86(10), STR_85(10), STR_84(16), STR_83(15), 
 17208 ;;		 -> STR_82(3), STR_81(15), STR_80(13), STR_79(14), 
 17209 ;;		 -> STR_78(8), STR_77(14), STR_76(15), STR_75(12), 
 17210 ;;		 -> STR_74(14), STR_73(17), STR_72(14), STR_71(15), 
 17211 ;;		 -> STR_70(17), STR_69(17), STR_68(7), STR_67(21), 
 17212 ;;		 -> STR_66(13), STR_65(11), STR_64(19), STR_63(24), 
 17213 ;;		 -> STR_50(17), STR_49(17), STR_48(17), STR_47(17), 
 17214 ;;		 -> STR_46(17), STR_45(17), STR_44(17), STR_43(17), 
 17215 ;;		 -> STR_42(17), STR_41(17), STR_40(17), STR_39(17), 
 17216 ;;		 -> STR_38(17), STR_37(17), STR_36(17), STR_35(17), 
 17217 ;;		 -> STR_34(17), STR_33(17), STR_32(17), STR_31(17), 
 17218 ;;		 -> STR_30(17), STR_29(3), STR_28(17), STR_27(17), 
 17219 ;;		 -> STR_26(17), STR_25(17), STR_24(17), STR_23(14), 
 17220 ;;		 -> STR_22(10), STR_21(24), STR_7(7), STR_6(17), 
 17221 ;;		 -> STR_5(18), STR_4(16), STR_3(18), STR_2(14), 
 17222 ;;		 -> STR_1(18), 
 17223 ;; Auto vars:     Size  Location     Type
 17224 ;;  tmpval          4    0        struct .
 17225 ;;  width           2   41[BANK0 ] int 
 17226 ;;  val             2   37[BANK0 ] unsigned int 
 17227 ;;  len             2   35[BANK0 ] unsigned int 
 17228 ;;  ap              2   33[BANK0 ] PTR void [1]
 17229 ;;		 -> ?i2_printf(2), ?_printf(2), 
 17230 ;;  cp              2   31[BANK0 ] PTR const unsigned char 
 17231 ;;		 -> STR_131(7), ID@res2(2), ID@res1(2), count_total(2), 
 17232 ;;		 -> printRTC@month(4), UI@month(4), 
 17233 ;;  c               1   40[BANK0 ] char 
 17234 ;;  flag            1   39[BANK0 ] unsigned char 
 17235 ;;  prec            1   30[BANK0 ] char 
 17236 ;; Return value:  Size  Location     Type
 17237 ;;                  2   14[BANK0 ] int 
 17238 ;; Registers used:
 17239 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17240 ;; Tracked objects:
 17241 ;;		On entry : 0/0
 17242 ;;		On exit  : 0/0
 17243 ;;		Unchanged: 0/0
 17244 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17245 ;;      Params:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17246 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17247 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17248 ;;      Totals:         0      29       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17249 ;;Total ram usage:       29 bytes
 17250 ;; Hardware stack levels used:    1
 17251 ;; Hardware stack levels required when called:    9
 17252 ;; This function calls:
 17253 ;;		___lwdiv
 17254 ;;		___lwmod
 17255 ;;		___wmul
 17256 ;;		_isdigit
 17257 ;;		_putch
 17258 ;; This function is called by:
 17259 ;;		_UI
 17260 ;;		_change_state_to_menu_start
 17261 ;;		_change_state_to_menu_12
 17262 ;;		_change_state_to_menu_22
 17263 ;;		_printRTC
 17264 ;;		_ID
 17265 ;;		_EEPROM_write
 17266 ;;		_Test
 17267 ;;		_algorithmTest
 17268 ;;		_sensorTest
 17269 ;;		_actuatorTest
 17270 ;;		_BothServos
 17271 ;;		_PortTestDC
 17272 ;;		_PlatformTest
 17273 ;;		_SpeedTest
 17274 ;;		_BlockerTest
 17275 ;;		_arm
 17276 ;;		_PortTestPusher
 17277 ;;		_ToggleTestA5
 17278 ;; This function uses a non-reentrant model
 17279 ;;
 17280                           
 17281                           	psect	text56
 17282  001784                     __ptext56:
 17283                           	opt stack 0
 17284  001784                     _printf:
 17285                           	opt stack 18
 17286                           
 17287                           ;doprnt.c: 466: va_list ap;
 17288                           ;doprnt.c: 499: signed char c;
 17289                           ;doprnt.c: 501: int width;
 17290                           ;doprnt.c: 506: signed char prec;
 17291                           ;doprnt.c: 508: unsigned char flag;
 17292                           ;doprnt.c: 523: union {
 17293                           ;doprnt.c: 524: unsigned long vd;
 17294                           ;doprnt.c: 525: double integ;
 17295                           ;doprnt.c: 526: } tmpval;
 17296                           ;doprnt.c: 528: unsigned int val;
 17297                           ;doprnt.c: 529: unsigned len;
 17298                           ;doprnt.c: 530: const char * cp;
 17299                           ;doprnt.c: 533: *ap = __va_start();
 17300                           
 17301                           ;incstack = 0
 17302  001784  0E90               	movlw	low (?_printf+2)
 17303  001786  0100               	movlb	0	; () banked
 17304  001788  6FA1               	movwf	printf@ap& (0+255),b
 17305  00178A  0E00               	movlw	high (?_printf+2)
 17306  00178C  0100               	movlb	0	; () banked
 17307  00178E  6FA2               	movwf	(printf@ap+1)& (0+255),b
 17308                           
 17309                           ;doprnt.c: 536: while(c = *f++) {
 17310  001790  D205               	goto	l6786
 17311  001792                     l6656:
 17312                           
 17313                           ; BSR set to: 0
 17314                           ;doprnt.c: 538: if(c != '%')
 17315  001792  0E25               	movlw	37
 17316  001794  0100               	movlb	0	; () banked
 17317  001796  19A8               	xorwf	printf@c& (0+255),w,b
 17318  001798  B4D8               	btfsc	status,2,c
 17319  00179A  D005               	goto	l6660
 17320                           
 17321                           ; BSR set to: 0
 17322                           ;doprnt.c: 540: {
 17323                           ;doprnt.c: 541: (putch(c) );
 17324  00179C  0100               	movlb	0	; () banked
 17325  00179E  51A8               	movf	printf@c& (0+255),w,b
 17326  0017A0  EC7E  F02D         	call	_putch
 17327                           
 17328                           ;doprnt.c: 542: continue;
 17329  0017A4  D1FB               	goto	l6786
 17330  0017A6                     l6660:
 17331                           
 17332                           ;doprnt.c: 543: }
 17333                           ;doprnt.c: 546: width = 0;
 17334  0017A6  0E00               	movlw	0
 17335  0017A8  0100               	movlb	0	; () banked
 17336  0017AA  6FAA               	movwf	(printf@width+1)& (0+255),b
 17337  0017AC  0E00               	movlw	0
 17338  0017AE  6FA9               	movwf	printf@width& (0+255),b
 17339                           
 17340                           ;doprnt.c: 548: flag = 0;
 17341  0017B0  0E00               	movlw	0
 17342  0017B2  0100               	movlb	0	; () banked
 17343  0017B4  6FA7               	movwf	printf@flag& (0+255),b
 17344                           
 17345                           ; BSR set to: 0
 17346                           ;doprnt.c: 551: switch(*f) {
 17347                           
 17348                           ;doprnt.c: 550: for(;;) {
 17349  0017B6  D005               	goto	l6666
 17350  0017B8                     l6662:
 17351                           
 17352                           ;doprnt.c: 580: flag |= 0x04;
 17353  0017B8  0100               	movlb	0	; () banked
 17354  0017BA  85A7               	bsf	printf@flag& (0+255),2,b
 17355                           
 17356                           ;doprnt.c: 581: f++;
 17357  0017BC  0100               	movlb	0	; () banked
 17358  0017BE  4B8E               	infsnz	printf@f& (0+255),f,b
 17359  0017C0  2B8F               	incf	(printf@f+1)& (0+255),f,b
 17360  0017C2                     l6666:
 17361  0017C2  C08E  FFF6         	movff	printf@f,tblptrl
 17362  0017C6  C08F  FFF7         	movff	printf@f+1,tblptrh
 17363  0017CA                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 17364  0017CA  6AF8               	clrf	tblptru,c
 17365  0017CC                     	endif
 17366  0017CC                     	if	0	;tblptru may be non-zero
 17367  0017CC                     	endif
 17368  0017CC  0008               	tblrd		*
 17369  0017CE  50F5               	movf	tablat,w,c
 17370                           
 17371                           ; Switch size 1, requested type "space"
 17372                           ; Number of cases is 1, Range of values is 48 to 48
 17373                           ; switch strategies available:
 17374                           ; Name         Instructions Cycles
 17375                           ; simple_byte            4     3 (average)
 17376                           ;	Chosen strategy is simple_byte
 17377  0017D0  0A30               	xorlw	48	; case 48
 17378  0017D2  B4D8               	btfsc	status,2,c
 17379  0017D4  D7F1               	goto	l6662
 17380                           
 17381                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 17382                           
 17383                           ;doprnt.c: 586: }
 17384                           
 17385                           ;doprnt.c: 585: break;
 17386  0017D6  C08E  FFF6         	movff	printf@f,tblptrl
 17387  0017DA  C08F  FFF7         	movff	printf@f+1,tblptrh
 17388  0017DE                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 17389  0017DE  6AF8               	clrf	tblptru,c
 17390  0017E0                     	endif
 17391  0017E0                     	if	0	;tblptru may be non-zero
 17392  0017E0                     	endif
 17393  0017E0  0008               	tblrd		*
 17394  0017E2  50F5               	movf	tablat,w,c
 17395  0017E4  EC92  F02C         	call	_isdigit
 17396  0017E8  A0D8               	btfss	status,0,c
 17397  0017EA  D0D2               	goto	l6714
 17398                           
 17399                           ;doprnt.c: 598: width = 0;
 17400  0017EC  0E00               	movlw	0
 17401  0017EE  0100               	movlb	0	; () banked
 17402  0017F0  6FAA               	movwf	(printf@width+1)& (0+255),b
 17403  0017F2  0E00               	movlw	0
 17404  0017F4  6FA9               	movwf	printf@width& (0+255),b
 17405  0017F6                     l6672:
 17406                           
 17407                           ;doprnt.c: 600: width *= 10;
 17408  0017F6  C0A9  F080         	movff	printf@width,___wmul@multiplier
 17409  0017FA  C0AA  F081         	movff	printf@width+1,___wmul@multiplier+1
 17410  0017FE  0E00               	movlw	0
 17411  001800  0100               	movlb	0	; () banked
 17412  001802  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
 17413  001804  0E0A               	movlw	10
 17414  001806  6F82               	movwf	___wmul@multiplicand& (0+255),b
 17415  001808  ECFB  F02A         	call	___wmul	;wreg free
 17416  00180C  C080  F0A9         	movff	?___wmul,printf@width
 17417  001810  C081  F0AA         	movff	?___wmul+1,printf@width+1
 17418                           
 17419                           ;doprnt.c: 601: width += *f++ - '0';
 17420  001814  0ED0               	movlw	208
 17421  001816  0100               	movlb	0	; () banked
 17422  001818  6F9A               	movwf	??_printf& (0+255),b
 17423  00181A  0EFF               	movlw	255
 17424  00181C  0100               	movlb	0	; () banked
 17425  00181E  6F9B               	movwf	(??_printf+1)& (0+255),b
 17426  001820  C08E  FFF6         	movff	printf@f,tblptrl
 17427  001824  C08F  FFF7         	movff	printf@f+1,tblptrh
 17428  001828                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 17429  001828  6AF8               	clrf	tblptru,c
 17430  00182A                     	endif
 17431  00182A                     	if	0	;tblptru may be non-zero
 17432  00182A                     	endif
 17433  00182A  0008               	tblrd		*
 17434  00182C  50F5               	movf	tablat,w,c
 17435  00182E  0100               	movlb	0	; () banked
 17436  001830  6F9C               	movwf	(??_printf+2)& (0+255),b
 17437  001832  6B9D               	clrf	(??_printf+3)& (0+255),b
 17438  001834  0100               	movlb	0	; () banked
 17439  001836  519A               	movf	??_printf& (0+255),w,b
 17440  001838  0100               	movlb	0	; () banked
 17441  00183A  279C               	addwf	(??_printf+2)& (0+255),f,b
 17442  00183C  0100               	movlb	0	; () banked
 17443  00183E  519B               	movf	(??_printf+1)& (0+255),w,b
 17444  001840  0100               	movlb	0	; () banked
 17445  001842  239D               	addwfc	(??_printf+3)& (0+255),f,b
 17446  001844  0100               	movlb	0	; () banked
 17447  001846  519C               	movf	(??_printf+2)& (0+255),w,b
 17448  001848  0100               	movlb	0	; () banked
 17449  00184A  27A9               	addwf	printf@width& (0+255),f,b
 17450  00184C  0100               	movlb	0	; () banked
 17451  00184E  519D               	movf	(??_printf+3)& (0+255),w,b
 17452  001850  0100               	movlb	0	; () banked
 17453  001852  23AA               	addwfc	(printf@width+1)& (0+255),f,b
 17454                           
 17455                           ; BSR set to: 0
 17456  001854  0100               	movlb	0	; () banked
 17457  001856  4B8E               	infsnz	printf@f& (0+255),f,b
 17458  001858  2B8F               	incf	(printf@f+1)& (0+255),f,b
 17459                           
 17460                           ; BSR set to: 0
 17461                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 17462  00185A  C08E  FFF6         	movff	printf@f,tblptrl
 17463  00185E  C08F  FFF7         	movff	printf@f+1,tblptrh
 17464  001862                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 17465  001862  6AF8               	clrf	tblptru,c
 17466  001864                     	endif
 17467  001864                     	if	0	;tblptru may be non-zero
 17468  001864                     	endif
 17469  001864  0008               	tblrd		*
 17470  001866  50F5               	movf	tablat,w,c
 17471  001868  EC92  F02C         	call	_isdigit
 17472  00186C  A0D8               	btfss	status,0,c
 17473  00186E  D090               	goto	l6714
 17474  001870  D7C2               	goto	l6672
 17475  001872                     l6680:
 17476                           
 17477                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 17478  001872  C0A1  FFD9         	movff	printf@ap,fsr2l
 17479  001876  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 17480  00187A  CFDE F09F          	movff	postinc2,printf@cp
 17481  00187E  CFDD F0A0          	movff	postdec2,printf@cp+1
 17482  001882  0E02               	movlw	2
 17483  001884  0100               	movlb	0	; () banked
 17484  001886  27A1               	addwf	printf@ap& (0+255),f,b
 17485  001888  0E00               	movlw	0
 17486  00188A  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 17487                           
 17488                           ; BSR set to: 0
 17489                           ;doprnt.c: 740: if(!cp)
 17490  00188C  0100               	movlb	0	; () banked
 17491  00188E  519F               	movf	printf@cp& (0+255),w,b
 17492  001890  0100               	movlb	0	; () banked
 17493  001892  11A0               	iorwf	(printf@cp+1)& (0+255),w,b
 17494  001894  A4D8               	btfss	status,2,c
 17495  001896  D006               	goto	l6688
 17496                           
 17497                           ; BSR set to: 0
 17498                           ;doprnt.c: 741: cp = "(null)";
 17499  001898  0EB5               	movlw	low STR_131
 17500  00189A  0100               	movlb	0	; () banked
 17501  00189C  6F9F               	movwf	printf@cp& (0+255),b
 17502  00189E  0EFF               	movlw	high STR_131
 17503  0018A0  0100               	movlb	0	; () banked
 17504  0018A2  6FA0               	movwf	(printf@cp+1)& (0+255),b
 17505  0018A4                     l6688:
 17506                           
 17507                           ; BSR set to: 0
 17508                           ;doprnt.c: 745: len = 0;
 17509  0018A4  0E00               	movlw	0
 17510  0018A6  0100               	movlb	0	; () banked
 17511  0018A8  6FA4               	movwf	(printf@len+1)& (0+255),b
 17512  0018AA  0E00               	movlw	0
 17513  0018AC  6FA3               	movwf	printf@len& (0+255),b
 17514                           
 17515                           ;doprnt.c: 746: while(cp[len])
 17516  0018AE  D003               	goto	l6692
 17517  0018B0                     l6690:
 17518                           
 17519                           ;doprnt.c: 747: len++;
 17520  0018B0  0100               	movlb	0	; () banked
 17521  0018B2  4BA3               	infsnz	printf@len& (0+255),f,b
 17522  0018B4  2BA4               	incf	(printf@len+1)& (0+255),f,b
 17523  0018B6                     l6692:
 17524                           
 17525                           ; BSR set to: 0
 17526  0018B6  0100               	movlb	0	; () banked
 17527  0018B8  51A3               	movf	printf@len& (0+255),w,b
 17528  0018BA  0100               	movlb	0	; () banked
 17529  0018BC  259F               	addwf	printf@cp& (0+255),w,b
 17530  0018BE  0100               	movlb	0	; () banked
 17531  0018C0  6F9A               	movwf	??_printf& (0+255),b
 17532  0018C2  0100               	movlb	0	; () banked
 17533  0018C4  51A4               	movf	(printf@len+1)& (0+255),w,b
 17534  0018C6  0100               	movlb	0	; () banked
 17535  0018C8  21A0               	addwfc	(printf@cp+1)& (0+255),w,b
 17536  0018CA  0100               	movlb	0	; () banked
 17537  0018CC  6F9B               	movwf	(??_printf+1)& (0+255),b
 17538  0018CE  C09A  FFF6         	movff	??_printf,tblptrl
 17539  0018D2  C09B  FFF7         	movff	??_printf+1,tblptrh
 17540  0018D6  0E00               	movlw	low (__mediumconst shr (0+16))
 17541  0018D8  6EF8               	movwf	tblptru,c
 17542  0018DA  0E0F               	movlw	(high __ramtop+-1)
 17543  0018DC  64F7               	cpfsgt	tblptrh,c
 17544  0018DE  D003               	bra	u5137
 17545  0018E0  0008               	tblrd		*
 17546  0018E2  50F5               	movf	tablat,w,c
 17547  0018E4  D005               	bra	u5130
 17548  0018E6                     u5137:
 17549  0018E6  CFF6 FFE9          	movff	tblptrl,fsr0l
 17550  0018EA  CFF7 FFEA          	movff	tblptrh,fsr0h
 17551  0018EE  50EF               	movf	indf0,w,c
 17552  0018F0                     u5130:
 17553  0018F0  0900               	iorlw	0
 17554  0018F2  A4D8               	btfss	status,2,c
 17555  0018F4  D7DD               	goto	l6690
 17556                           
 17557                           ;doprnt.c: 757: if(width > len)
 17558  0018F6  0100               	movlb	0	; () banked
 17559  0018F8  51A9               	movf	printf@width& (0+255),w,b
 17560  0018FA  0100               	movlb	0	; () banked
 17561  0018FC  5DA3               	subwf	printf@len& (0+255),w,b
 17562  0018FE  0100               	movlb	0	; () banked
 17563  001900  51AA               	movf	(printf@width+1)& (0+255),w,b
 17564  001902  0100               	movlb	0	; () banked
 17565  001904  59A4               	subwfb	(printf@len+1)& (0+255),w,b
 17566  001906  B0D8               	btfsc	status,0,c
 17567  001908  D009               	goto	l6698
 17568                           
 17569                           ; BSR set to: 0
 17570                           ;doprnt.c: 758: width -= len;
 17571  00190A  0100               	movlb	0	; () banked
 17572  00190C  51A3               	movf	printf@len& (0+255),w,b
 17573  00190E  0100               	movlb	0	; () banked
 17574  001910  5FA9               	subwf	printf@width& (0+255),f,b
 17575  001912  0100               	movlb	0	; () banked
 17576  001914  51A4               	movf	(printf@len+1)& (0+255),w,b
 17577  001916  0100               	movlb	0	; () banked
 17578  001918  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
 17579  00191A  D009               	goto	l6702
 17580  00191C                     l6698:
 17581                           
 17582                           ; BSR set to: 0
 17583                           ;doprnt.c: 759: else
 17584                           ;doprnt.c: 760: width = 0;
 17585  00191C  0E00               	movlw	0
 17586  00191E  0100               	movlb	0	; () banked
 17587  001920  6FAA               	movwf	(printf@width+1)& (0+255),b
 17588  001922  0E00               	movlw	0
 17589  001924  6FA9               	movwf	printf@width& (0+255),b
 17590                           
 17591                           ; BSR set to: 0
 17592                           ;doprnt.c: 764: while(width--)
 17593  001926  D003               	goto	l6702
 17594  001928                     l6700:
 17595                           
 17596                           ; BSR set to: 0
 17597                           ;doprnt.c: 765: (putch(' ') );
 17598  001928  0E20               	movlw	32
 17599  00192A  EC7E  F02D         	call	_putch
 17600  00192E                     l6702:
 17601  00192E  0100               	movlb	0	; () banked
 17602  001930  07A9               	decf	printf@width& (0+255),f,b
 17603  001932  A0D8               	btfss	status,0,c
 17604  001934  07AA               	decf	(printf@width+1)& (0+255),f,b
 17605  001936  0100               	movlb	0	; () banked
 17606  001938  29A9               	incf	printf@width& (0+255),w,b
 17607  00193A  E1F6               	bnz	l6700
 17608  00193C  0100               	movlb	0	; () banked
 17609  00193E  29AA               	incf	(printf@width+1)& (0+255),w,b
 17610  001940  B4D8               	btfsc	status,2,c
 17611  001942  D017               	goto	l6708
 17612  001944  D7F1               	goto	l6700
 17613  001946                     l6704:
 17614                           
 17615                           ; BSR set to: 0
 17616                           ;doprnt.c: 768: (putch(*cp++) );
 17617  001946  C09F  FFF6         	movff	printf@cp,tblptrl
 17618  00194A  C0A0  FFF7         	movff	printf@cp+1,tblptrh
 17619  00194E  0E00               	movlw	low (__mediumconst shr (0+16))
 17620  001950  6EF8               	movwf	tblptru,c
 17621  001952  0E0F               	movlw	(high __ramtop+-1)
 17622  001954  64F7               	cpfsgt	tblptrh,c
 17623  001956  D003               	bra	u5177
 17624  001958  0008               	tblrd		*
 17625  00195A  50F5               	movf	tablat,w,c
 17626  00195C  D005               	bra	u5170
 17627  00195E                     u5177:
 17628  00195E  CFF6 FFE9          	movff	tblptrl,fsr0l
 17629  001962  CFF7 FFEA          	movff	tblptrh,fsr0h
 17630  001966  50EF               	movf	indf0,w,c
 17631  001968                     u5170:
 17632  001968  EC7E  F02D         	call	_putch
 17633  00196C  0100               	movlb	0	; () banked
 17634  00196E  4B9F               	infsnz	printf@cp& (0+255),f,b
 17635  001970  2BA0               	incf	(printf@cp+1)& (0+255),f,b
 17636  001972                     l6708:
 17637                           
 17638                           ; BSR set to: 0
 17639  001972  0100               	movlb	0	; () banked
 17640  001974  07A3               	decf	printf@len& (0+255),f,b
 17641  001976  A0D8               	btfss	status,0,c
 17642  001978  07A4               	decf	(printf@len+1)& (0+255),f,b
 17643  00197A  0100               	movlb	0	; () banked
 17644  00197C  29A3               	incf	printf@len& (0+255),w,b
 17645  00197E  E1E3               	bnz	l6704
 17646  001980  0100               	movlb	0	; () banked
 17647  001982  29A4               	incf	(printf@len+1)& (0+255),w,b
 17648  001984  B4D8               	btfsc	status,2,c
 17649  001986  D10A               	goto	l6786
 17650  001988  D7DE               	goto	l6704
 17651  00198A                     l6710:
 17652                           
 17653                           ; BSR set to: 0
 17654                           ;doprnt.c: 818: flag |= 0x40;
 17655  00198A  0100               	movlb	0	; () banked
 17656  00198C  8DA7               	bsf	printf@flag& (0+255),6,b
 17657                           
 17658                           ; BSR set to: 0
 17659                           ;doprnt.c: 822: }
 17660                           
 17661                           ;doprnt.c: 819: break;
 17662  00198E  D01D               	goto	l1510
 17663  001990                     l6714:
 17664  001990  C08E  FFF6         	movff	printf@f,tblptrl
 17665  001994  C08F  FFF7         	movff	printf@f+1,tblptrh
 17666  001998  0100               	movlb	0	; () banked
 17667  00199A  4B8E               	infsnz	printf@f& (0+255),f,b
 17668  00199C  2B8F               	incf	(printf@f+1)& (0+255),f,b
 17669  00199E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 17670  00199E  6AF8               	clrf	tblptru,c
 17671  0019A0                     	endif
 17672  0019A0                     	if	0	;tblptru may be non-zero
 17673  0019A0                     	endif
 17674  0019A0  0008               	tblrd		*
 17675  0019A2  CFF5 F0A8          	movff	tablat,printf@c
 17676  0019A6  0100               	movlb	0	; () banked
 17677  0019A8  51A8               	movf	printf@c& (0+255),w,b
 17678                           
 17679                           ; Switch size 1, requested type "space"
 17680                           ; Number of cases is 5, Range of values is 0 to 117
 17681                           ; switch strategies available:
 17682                           ; Name         Instructions Cycles
 17683                           ; simple_byte           16     9 (average)
 17684                           ;	Chosen strategy is simple_byte
 17685  0019AA  0A00               	xorlw	0	; case 0
 17686  0019AC  B4D8               	btfsc	status,2,c
 17687  0019AE  0012               	return	
 17688  0019B0  0A64               	xorlw	100	; case 100
 17689  0019B2  B4D8               	btfsc	status,2,c
 17690  0019B4  D00A               	goto	l1510
 17691  0019B6  0A0D               	xorlw	13	; case 105
 17692  0019B8  B4D8               	btfsc	status,2,c
 17693  0019BA  D007               	goto	l1510
 17694  0019BC  0A1A               	xorlw	26	; case 115
 17695  0019BE  B4D8               	btfsc	status,2,c
 17696  0019C0  D758               	goto	l6680
 17697  0019C2  0A06               	xorlw	6	; case 117
 17698  0019C4  B4D8               	btfsc	status,2,c
 17699  0019C6  D7E1               	goto	l6710
 17700  0019C8  D0E9               	goto	l6786
 17701  0019CA                     l1510:
 17702                           
 17703                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
 17704  0019CA  0100               	movlb	0	; () banked
 17705  0019CC  BDA7               	btfsc	printf@flag& (0+255),6,b
 17706  0019CE  D019               	goto	l6726
 17707                           
 17708                           ; BSR set to: 0
 17709                           ;doprnt.c: 1253: {
 17710                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 17711  0019D0  C0A1  FFD9         	movff	printf@ap,fsr2l
 17712  0019D4  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 17713  0019D8  CFDE F0A5          	movff	postinc2,printf@val
 17714  0019DC  CFDD F0A6          	movff	postdec2,printf@val+1
 17715                           
 17716                           ; BSR set to: 0
 17717  0019E0  0E02               	movlw	2
 17718  0019E2  0100               	movlb	0	; () banked
 17719  0019E4  27A1               	addwf	printf@ap& (0+255),f,b
 17720  0019E6  0E00               	movlw	0
 17721  0019E8  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 17722                           
 17723                           ; BSR set to: 0
 17724                           ;doprnt.c: 1261: if((int)val < 0) {
 17725  0019EA  0100               	movlb	0	; () banked
 17726  0019EC  AFA6               	btfss	(printf@val+1)& (0+255),7,b
 17727  0019EE  D016               	goto	l6730
 17728                           
 17729                           ; BSR set to: 0
 17730                           ;doprnt.c: 1262: flag |= 0x03;
 17731  0019F0  0E03               	movlw	3
 17732  0019F2  0100               	movlb	0	; () banked
 17733  0019F4  13A7               	iorwf	printf@flag& (0+255),f,b
 17734                           
 17735                           ; BSR set to: 0
 17736                           ;doprnt.c: 1263: val = -val;
 17737  0019F6  0100               	movlb	0	; () banked
 17738  0019F8  6DA5               	negf	printf@val& (0+255),b
 17739  0019FA  1FA6               	comf	(printf@val+1)& (0+255),f,b
 17740  0019FC  B0D8               	btfsc	status,0,c
 17741  0019FE  2BA6               	incf	(printf@val+1)& (0+255),f,b
 17742                           
 17743                           ; BSR set to: 0
 17744                           ;doprnt.c: 1264: }
 17745                           ;doprnt.c: 1266: }
 17746  001A00  D00D               	goto	l6730
 17747  001A02                     l6726:
 17748                           
 17749                           ; BSR set to: 0
 17750                           ;doprnt.c: 1268: else
 17751                           ;doprnt.c: 1273: {
 17752                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 17753  001A02  C0A1  FFD9         	movff	printf@ap,fsr2l
 17754  001A06  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 17755  001A0A  CFDE F0A5          	movff	postinc2,printf@val
 17756  001A0E  CFDD F0A6          	movff	postdec2,printf@val+1
 17757                           
 17758                           ; BSR set to: 0
 17759  001A12  0E02               	movlw	2
 17760  001A14  0100               	movlb	0	; () banked
 17761  001A16  27A1               	addwf	printf@ap& (0+255),f,b
 17762  001A18  0E00               	movlw	0
 17763  001A1A  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 17764  001A1C                     l6730:
 17765                           
 17766                           ; BSR set to: 0
 17767                           ;doprnt.c: 1287: }
 17768                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 17769  001A1C  0E01               	movlw	1
 17770  001A1E  0100               	movlb	0	; () banked
 17771  001A20  6FA8               	movwf	printf@c& (0+255),b
 17772  001A22                     l6732:
 17773                           
 17774                           ; BSR set to: 0
 17775  001A22  0E05               	movlw	5
 17776  001A24  0100               	movlb	0	; () banked
 17777  001A26  19A8               	xorwf	printf@c& (0+255),w,b
 17778  001A28  B4D8               	btfsc	status,2,c
 17779  001A2A  D019               	goto	l6744
 17780                           
 17781                           ; BSR set to: 0
 17782                           ;doprnt.c: 1306: if(val < dpowers[c])
 17783                           
 17784                           ; BSR set to: 0
 17785                           
 17786                           ; BSR set to: 0
 17787  001A2C  0100               	movlb	0	; () banked
 17788  001A2E  51A8               	movf	printf@c& (0+255),w,b
 17789  001A30  0D02               	mullw	2
 17790  001A32  0EA4               	movlw	low _dpowers
 17791  001A34  24F3               	addwf	prodl,w,c
 17792  001A36  6EF6               	movwf	tblptrl,c
 17793  001A38  0EFA               	movlw	high _dpowers
 17794  001A3A  20F4               	addwfc	prodh,w,c
 17795  001A3C  6EF7               	movwf	tblptrh,c
 17796  001A3E                     	if	1	;There are 3 active tblptr bytes
 17797  001A3E  6AF8               	clrf	tblptru,c
 17798  001A40  0E00               	movlw	low (__mediumconst shr (0+16))
 17799  001A42  22F8               	addwfc	tblptru,f,c
 17800  001A44                     	endif
 17801  001A44  0009               	tblrd		*+
 17802  001A46  50F5               	movf	tablat,w,c
 17803  001A48  0100               	movlb	0	; () banked
 17804  001A4A  5DA5               	subwf	printf@val& (0+255),w,b
 17805  001A4C  0009               	tblrd		*+
 17806  001A4E  50F5               	movf	tablat,w,c
 17807  001A50  0100               	movlb	0	; () banked
 17808  001A52  59A6               	subwfb	(printf@val+1)& (0+255),w,b
 17809  001A54  A0D8               	btfss	status,0,c
 17810  001A56  D003               	goto	l6744
 17811                           
 17812                           ; BSR set to: 0
 17813                           
 17814                           ; BSR set to: 0
 17815                           
 17816                           ; BSR set to: 0
 17817                           ;doprnt.c: 1307: break;
 17818  001A58  0100               	movlb	0	; () banked
 17819  001A5A  2BA8               	incf	printf@c& (0+255),f,b
 17820  001A5C  D7E2               	goto	l6732
 17821  001A5E                     l6744:
 17822                           
 17823                           ; BSR set to: 0
 17824                           ;doprnt.c: 1345: if(width && flag & 0x03)
 17825  001A5E  0100               	movlb	0	; () banked
 17826  001A60  51A9               	movf	printf@width& (0+255),w,b
 17827  001A62  0100               	movlb	0	; () banked
 17828  001A64  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 17829  001A66  B4D8               	btfsc	status,2,c
 17830  001A68  D00B               	goto	l6750
 17831                           
 17832                           ; BSR set to: 0
 17833  001A6A  C0A7  F09A         	movff	printf@flag,??_printf
 17834  001A6E  0E03               	movlw	3
 17835  001A70  0100               	movlb	0	; () banked
 17836  001A72  179A               	andwf	??_printf& (0+255),f,b
 17837  001A74  B4D8               	btfsc	status,2,c
 17838  001A76  D004               	goto	l6750
 17839                           
 17840                           ; BSR set to: 0
 17841                           ;doprnt.c: 1346: width--;
 17842  001A78  0100               	movlb	0	; () banked
 17843  001A7A  07A9               	decf	printf@width& (0+255),f,b
 17844  001A7C  A0D8               	btfss	status,0,c
 17845  001A7E  07AA               	decf	(printf@width+1)& (0+255),f,b
 17846  001A80                     l6750:
 17847                           
 17848                           ; BSR set to: 0
 17849                           ;doprnt.c: 1381: if(width > c)
 17850  001A80  0E80               	movlw	128
 17851  001A82  0100               	movlb	0	; () banked
 17852  001A84  BFA8               	btfsc	printf@c& (0+255),7,b
 17853  001A86  0E7F               	movlw	127
 17854  001A88  0100               	movlb	0	; () banked
 17855  001A8A  6F9A               	movwf	??_printf& (0+255),b
 17856  001A8C  0100               	movlb	0	; () banked
 17857  001A8E  51A9               	movf	printf@width& (0+255),w,b
 17858  001A90  0100               	movlb	0	; () banked
 17859  001A92  5DA8               	subwf	printf@c& (0+255),w,b
 17860  001A94  0100               	movlb	0	; () banked
 17861  001A96  51AA               	movf	(printf@width+1)& (0+255),w,b
 17862  001A98  0A80               	xorlw	128
 17863  001A9A  0100               	movlb	0	; () banked
 17864  001A9C  599A               	subwfb	??_printf& (0+255),w,b
 17865  001A9E  B0D8               	btfsc	status,0,c
 17866  001AA0  D00B               	goto	l6754
 17867                           
 17868                           ; BSR set to: 0
 17869                           ;doprnt.c: 1382: width -= c;
 17870  001AA2  0100               	movlb	0	; () banked
 17871  001AA4  51A8               	movf	printf@c& (0+255),w,b
 17872  001AA6  0100               	movlb	0	; () banked
 17873  001AA8  5FA9               	subwf	printf@width& (0+255),f,b
 17874  001AAA  0E00               	movlw	0
 17875  001AAC  0100               	movlb	0	; () banked
 17876  001AAE  BFA8               	btfsc	printf@c& (0+255),7,b
 17877  001AB0  0EFF               	movlw	255
 17878  001AB2  0100               	movlb	0	; () banked
 17879  001AB4  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
 17880  001AB6  D005               	goto	l6756
 17881  001AB8                     l6754:
 17882                           
 17883                           ; BSR set to: 0
 17884                           ;doprnt.c: 1383: else
 17885                           ;doprnt.c: 1384: width = 0;
 17886  001AB8  0E00               	movlw	0
 17887  001ABA  0100               	movlb	0	; () banked
 17888  001ABC  6FAA               	movwf	(printf@width+1)& (0+255),b
 17889  001ABE  0E00               	movlw	0
 17890  001AC0  6FA9               	movwf	printf@width& (0+255),b
 17891  001AC2                     l6756:
 17892                           
 17893                           ; BSR set to: 0
 17894                           ;doprnt.c: 1387: if(flag & 0x04) {
 17895  001AC2  0100               	movlb	0	; () banked
 17896  001AC4  A5A7               	btfss	printf@flag& (0+255),2,b
 17897  001AC6  D018               	goto	l6768
 17898                           
 17899                           ; BSR set to: 0
 17900                           ;doprnt.c: 1392: if(flag & 0x03)
 17901  001AC8  C0A7  F09A         	movff	printf@flag,??_printf
 17902  001ACC  0E03               	movlw	3
 17903  001ACE  0100               	movlb	0	; () banked
 17904  001AD0  179A               	andwf	??_printf& (0+255),f,b
 17905  001AD2  B4D8               	btfsc	status,2,c
 17906  001AD4  D003               	goto	l6762
 17907                           
 17908                           ; BSR set to: 0
 17909                           ;doprnt.c: 1393: (putch('-') );
 17910  001AD6  0E2D               	movlw	45
 17911  001AD8  EC7E  F02D         	call	_putch
 17912  001ADC                     l6762:
 17913                           
 17914                           ;doprnt.c: 1415: if(width)
 17915  001ADC  0100               	movlb	0	; () banked
 17916  001ADE  51A9               	movf	printf@width& (0+255),w,b
 17917  001AE0  0100               	movlb	0	; () banked
 17918  001AE2  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 17919  001AE4  B4D8               	btfsc	status,2,c
 17920  001AE6  D025               	goto	l6778
 17921                           
 17922                           ; BSR set to: 0
 17923                           ;doprnt.c: 1417: (putch('0') );
 17924                           
 17925                           ; BSR set to: 0
 17926                           
 17927                           ;doprnt.c: 1416: do
 17928  001AE8  0E30               	movlw	48
 17929  001AEA  EC7E  F02D         	call	_putch
 17930                           
 17931                           ;doprnt.c: 1418: while(--width);
 17932  001AEE  0100               	movlb	0	; () banked
 17933  001AF0  07A9               	decf	printf@width& (0+255),f,b
 17934  001AF2  A0D8               	btfss	status,0,c
 17935  001AF4  07AA               	decf	(printf@width+1)& (0+255),f,b
 17936  001AF6  D7F2               	goto	l6762
 17937  001AF8                     l6768:
 17938                           
 17939                           ; BSR set to: 0
 17940                           ;doprnt.c: 1422: {
 17941                           ;doprnt.c: 1424: if(width
 17942                           ;doprnt.c: 1428: )
 17943  001AF8  0100               	movlb	0	; () banked
 17944  001AFA  51A9               	movf	printf@width& (0+255),w,b
 17945  001AFC  0100               	movlb	0	; () banked
 17946  001AFE  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 17947  001B00  B4D8               	btfsc	status,2,c
 17948  001B02  D00D               	goto	l6774
 17949  001B04                     l6770:
 17950                           
 17951                           ; BSR set to: 0
 17952                           ;doprnt.c: 1430: (putch(' ') );
 17953  001B04  0E20               	movlw	32
 17954  001B06  EC7E  F02D         	call	_putch
 17955                           
 17956                           ;doprnt.c: 1431: while(--width);
 17957  001B0A  0100               	movlb	0	; () banked
 17958  001B0C  07A9               	decf	printf@width& (0+255),f,b
 17959  001B0E  A0D8               	btfss	status,0,c
 17960  001B10  07AA               	decf	(printf@width+1)& (0+255),f,b
 17961  001B12  0100               	movlb	0	; () banked
 17962  001B14  51A9               	movf	printf@width& (0+255),w,b
 17963  001B16  0100               	movlb	0	; () banked
 17964  001B18  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 17965  001B1A  A4D8               	btfss	status,2,c
 17966  001B1C  D7F3               	goto	l6770
 17967  001B1E                     l6774:
 17968                           
 17969                           ; BSR set to: 0
 17970                           ;doprnt.c: 1438: if(flag & 0x03)
 17971  001B1E  C0A7  F09A         	movff	printf@flag,??_printf
 17972  001B22  0E03               	movlw	3
 17973  001B24  0100               	movlb	0	; () banked
 17974  001B26  179A               	andwf	??_printf& (0+255),f,b
 17975  001B28  B4D8               	btfsc	status,2,c
 17976  001B2A  D003               	goto	l6778
 17977                           
 17978                           ; BSR set to: 0
 17979                           ;doprnt.c: 1439: (putch('-') );
 17980  001B2C  0E2D               	movlw	45
 17981  001B2E  EC7E  F02D         	call	_putch
 17982  001B32                     l6778:
 17983                           
 17984                           ;doprnt.c: 1469: }
 17985                           ;doprnt.c: 1472: prec = c;
 17986  001B32  C0A8  F09E         	movff	printf@c,printf@prec
 17987                           
 17988                           ;doprnt.c: 1474: while(prec--) {
 17989  001B36  D02C               	goto	l6784
 17990  001B38                     l6780:
 17991                           
 17992                           ;doprnt.c: 1478: {
 17993                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 17994  001B38  0100               	movlb	0	; () banked
 17995  001B3A  519E               	movf	printf@prec& (0+255),w,b
 17996  001B3C  0D02               	mullw	2
 17997  001B3E  0EA4               	movlw	low _dpowers
 17998  001B40  24F3               	addwf	prodl,w,c
 17999  001B42  6EF6               	movwf	tblptrl,c
 18000  001B44  0EFA               	movlw	high _dpowers
 18001  001B46  20F4               	addwfc	prodh,w,c
 18002  001B48  6EF7               	movwf	tblptrh,c
 18003  001B4A                     	if	1	;There are 3 active tblptr bytes
 18004  001B4A  6AF8               	clrf	tblptru,c
 18005  001B4C  0E00               	movlw	low (__mediumconst shr (0+16))
 18006  001B4E  22F8               	addwfc	tblptru,f,c
 18007  001B50                     	endif
 18008  001B50  0009               	tblrd		*+
 18009  001B52  CFF5 F082          	movff	tablat,___lwdiv@divisor
 18010  001B56  000A               	tblrd		*-
 18011  001B58  CFF5 F083          	movff	tablat,___lwdiv@divisor+1
 18012  001B5C  C0A5  F080         	movff	printf@val,___lwdiv@dividend
 18013  001B60  C0A6  F081         	movff	printf@val+1,___lwdiv@dividend+1
 18014  001B64  EC2B  F027         	call	___lwdiv	;wreg free
 18015  001B68  C080  F087         	movff	?___lwdiv,___lwmod@dividend
 18016  001B6C  C081  F088         	movff	?___lwdiv+1,___lwmod@dividend+1
 18017  001B70  0E00               	movlw	0
 18018  001B72  0100               	movlb	0	; () banked
 18019  001B74  6F8A               	movwf	(___lwmod@divisor+1)& (0+255),b
 18020  001B76  0E0A               	movlw	10
 18021  001B78  6F89               	movwf	___lwmod@divisor& (0+255),b
 18022  001B7A  EC79  F028         	call	___lwmod	;wreg free
 18023  001B7E  0100               	movlb	0	; () banked
 18024  001B80  5187               	movf	?___lwmod& (0+255),w,b
 18025  001B82  0F30               	addlw	48
 18026  001B84  0100               	movlb	0	; () banked
 18027  001B86  6FA8               	movwf	printf@c& (0+255),b
 18028                           
 18029                           ; BSR set to: 0
 18030                           ;doprnt.c: 1523: }
 18031                           ;doprnt.c: 1524: (putch(c) );
 18032  001B88  0100               	movlb	0	; () banked
 18033  001B8A  51A8               	movf	printf@c& (0+255),w,b
 18034  001B8C  EC7E  F02D         	call	_putch
 18035  001B90                     l6784:
 18036  001B90  0100               	movlb	0	; () banked
 18037  001B92  079E               	decf	printf@prec& (0+255),f,b
 18038  001B94  0100               	movlb	0	; () banked
 18039  001B96  299E               	incf	printf@prec& (0+255),w,b
 18040  001B98  A4D8               	btfss	status,2,c
 18041  001B9A  D7CE               	goto	l6780
 18042  001B9C                     l6786:
 18043  001B9C  C08E  FFF6         	movff	printf@f,tblptrl
 18044  001BA0  C08F  FFF7         	movff	printf@f+1,tblptrh
 18045  001BA4  0100               	movlb	0	; () banked
 18046  001BA6  4B8E               	infsnz	printf@f& (0+255),f,b
 18047  001BA8  2B8F               	incf	(printf@f+1)& (0+255),f,b
 18048  001BAA                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 18049  001BAA  6AF8               	clrf	tblptru,c
 18050  001BAC                     	endif
 18051  001BAC                     	if	0	;tblptru may be non-zero
 18052  001BAC                     	endif
 18053  001BAC  0008               	tblrd		*
 18054  001BAE  CFF5 F0A8          	movff	tablat,printf@c
 18055  001BB2  0100               	movlb	0	; () banked
 18056  001BB4  51A8               	movf	printf@c& (0+255),w,b
 18057  001BB6  B4D8               	btfsc	status,2,c
 18058  001BB8  0012               	return	
 18059  001BBA  D5EB               	goto	l6656
 18060  001BBC                     __end_of_printf:
 18061                           	opt stack 0
 18062                           tblptru	equ	0xFF8
 18063                           tblptrh	equ	0xFF7
 18064                           tblptrl	equ	0xFF6
 18065                           tablat	equ	0xFF5
 18066                           prodh	equ	0xFF4
 18067                           prodl	equ	0xFF3
 18068                           intcon	equ	0xFF2
 18069                           intcon2	equ	0xFF1
 18070                           intcon3	equ	0xFF0
 18071                           indf0	equ	0xFEF
 18072                           postinc0	equ	0xFEE
 18073                           fsr0h	equ	0xFEA
 18074                           fsr0l	equ	0xFE9
 18075                           wreg	equ	0xFE8
 18076                           postdec1	equ	0xFE5
 18077                           fsr1l	equ	0xFE1
 18078                           indf2	equ	0xFDF
 18079                           postinc2	equ	0xFDE
 18080                           postdec2	equ	0xFDD
 18081                           fsr2h	equ	0xFDA
 18082                           fsr2l	equ	0xFD9
 18083                           status	equ	0xFD8
 18084                           
 18085 ;; *************** function _putch *****************
 18086 ;; Defined at:
 18087 ;;		line 20 in file "lcd.c"
 18088 ;; Parameters:    Size  Location     Type
 18089 ;;  data            1    wreg     unsigned char 
 18090 ;; Auto vars:     Size  Location     Type
 18091 ;;  data            1    2[BANK0 ] unsigned char 
 18092 ;; Return value:  Size  Location     Type
 18093 ;;                  1    wreg      void 
 18094 ;; Registers used:
 18095 ;;		wreg, status,2, status,0, cstack
 18096 ;; Tracked objects:
 18097 ;;		On entry : 0/0
 18098 ;;		On exit  : 0/0
 18099 ;;		Unchanged: 0/0
 18100 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18101 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18102 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18103 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18104 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18105 ;;Total ram usage:        1 bytes
 18106 ;; Hardware stack levels used:    1
 18107 ;; Hardware stack levels required when called:    8
 18108 ;; This function calls:
 18109 ;;		_lcdNibble
 18110 ;; This function is called by:
 18111 ;;		_printf
 18112 ;; This function uses a non-reentrant model
 18113 ;;
 18114                           
 18115                           	psect	text57
 18116  005AFC                     __ptext57:
 18117                           	opt stack 0
 18118  005AFC                     _putch:
 18119                           	opt stack 18
 18120                           
 18121                           ;incstack = 0
 18122                           ;putch@data stored from wreg
 18123  005AFC  0100               	movlb	0	; () banked
 18124  005AFE  6F82               	movwf	putch@data& (0+255),b
 18125                           
 18126                           ;lcd.c: 21: LATDbits.LATD2 = 1;
 18127  005B00  848C               	bsf	3980,2,c	;volatile
 18128                           
 18129                           ;lcd.c: 22: lcdNibble(data);
 18130  005B02  0100               	movlb	0	; () banked
 18131  005B04  5182               	movf	putch@data& (0+255),w,b
 18132  005B06  EC11  F028         	call	_lcdNibble
 18133  005B0A  0012               	return		;funcret
 18134  005B0C                     __end_of_putch:
 18135                           	opt stack 0
 18136                           tblptru	equ	0xFF8
 18137                           tblptrh	equ	0xFF7
 18138                           tblptrl	equ	0xFF6
 18139                           tablat	equ	0xFF5
 18140                           prodh	equ	0xFF4
 18141                           prodl	equ	0xFF3
 18142                           intcon	equ	0xFF2
 18143                           intcon2	equ	0xFF1
 18144                           intcon3	equ	0xFF0
 18145                           indf0	equ	0xFEF
 18146                           postinc0	equ	0xFEE
 18147                           fsr0h	equ	0xFEA
 18148                           fsr0l	equ	0xFE9
 18149                           wreg	equ	0xFE8
 18150                           postdec1	equ	0xFE5
 18151                           fsr1l	equ	0xFE1
 18152                           indf2	equ	0xFDF
 18153                           postinc2	equ	0xFDE
 18154                           postdec2	equ	0xFDD
 18155                           fsr2h	equ	0xFDA
 18156                           fsr2l	equ	0xFD9
 18157                           status	equ	0xFD8
 18158                           
 18159 ;; *************** function _isdigit *****************
 18160 ;; Defined at:
 18161 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 18162 ;; Parameters:    Size  Location     Type
 18163 ;;  c               1    wreg     unsigned char 
 18164 ;; Auto vars:     Size  Location     Type
 18165 ;;  c               1    2[BANK0 ] unsigned char 
 18166 ;; Return value:  Size  Location     Type
 18167 ;;		None               void
 18168 ;; Registers used:
 18169 ;;		wreg, status,2, status,0
 18170 ;; Tracked objects:
 18171 ;;		On entry : 0/0
 18172 ;;		On exit  : 0/0
 18173 ;;		Unchanged: 0/0
 18174 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18175 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18176 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18177 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18178 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18179 ;;Total ram usage:        3 bytes
 18180 ;; Hardware stack levels used:    1
 18181 ;; Hardware stack levels required when called:    7
 18182 ;; This function calls:
 18183 ;;		Nothing
 18184 ;; This function is called by:
 18185 ;;		_printf
 18186 ;; This function uses a non-reentrant model
 18187 ;;
 18188                           
 18189                           	psect	text58
 18190  005924                     __ptext58:
 18191                           	opt stack 0
 18192  005924                     _isdigit:
 18193                           	opt stack 19
 18194                           
 18195                           ;incstack = 0
 18196                           ;isdigit@c stored from wreg
 18197  005924  0100               	movlb	0	; () banked
 18198  005926  6F82               	movwf	isdigit@c& (0+255),b
 18199  005928  0E00               	movlw	0
 18200  00592A  0100               	movlb	0	; () banked
 18201  00592C  6F81               	movwf	_isdigit$2060& (0+255),b
 18202                           
 18203                           ; BSR set to: 0
 18204  00592E  0E3A               	movlw	58
 18205  005930  0100               	movlb	0	; () banked
 18206  005932  6182               	cpfslt	isdigit@c& (0+255),b
 18207  005934  D007               	goto	l6504
 18208                           
 18209                           ; BSR set to: 0
 18210  005936  0E2F               	movlw	47
 18211  005938  0100               	movlb	0	; () banked
 18212  00593A  6582               	cpfsgt	isdigit@c& (0+255),b
 18213  00593C  D003               	goto	l6504
 18214                           
 18215                           ; BSR set to: 0
 18216  00593E  0E01               	movlw	1
 18217  005940  0100               	movlb	0	; () banked
 18218  005942  6F81               	movwf	_isdigit$2060& (0+255),b
 18219  005944                     l6504:
 18220                           
 18221                           ; BSR set to: 0
 18222  005944  C081  F080         	movff	_isdigit$2060,??_isdigit
 18223  005948  0100               	movlb	0	; () banked
 18224  00594A  3180               	rrcf	??_isdigit& (0+255),w,b
 18225  00594C  0012               	return	
 18226  00594E                     __end_of_isdigit:
 18227                           	opt stack 0
 18228                           tblptru	equ	0xFF8
 18229                           tblptrh	equ	0xFF7
 18230                           tblptrl	equ	0xFF6
 18231                           tablat	equ	0xFF5
 18232                           prodh	equ	0xFF4
 18233                           prodl	equ	0xFF3
 18234                           intcon	equ	0xFF2
 18235                           intcon2	equ	0xFF1
 18236                           intcon3	equ	0xFF0
 18237                           indf0	equ	0xFEF
 18238                           postinc0	equ	0xFEE
 18239                           fsr0h	equ	0xFEA
 18240                           fsr0l	equ	0xFE9
 18241                           wreg	equ	0xFE8
 18242                           postdec1	equ	0xFE5
 18243                           fsr1l	equ	0xFE1
 18244                           indf2	equ	0xFDF
 18245                           postinc2	equ	0xFDE
 18246                           postdec2	equ	0xFDD
 18247                           fsr2h	equ	0xFDA
 18248                           fsr2l	equ	0xFD9
 18249                           status	equ	0xFD8
 18250                           
 18251 ;; *************** function ___wmul *****************
 18252 ;; Defined at:
 18253 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 18254 ;; Parameters:    Size  Location     Type
 18255 ;;  multiplier      2    0[BANK0 ] unsigned int 
 18256 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 18257 ;; Auto vars:     Size  Location     Type
 18258 ;;  product         2    4[BANK0 ] unsigned int 
 18259 ;; Return value:  Size  Location     Type
 18260 ;;                  2    0[BANK0 ] unsigned int 
 18261 ;; Registers used:
 18262 ;;		wreg, status,2, status,0, prodl, prodh
 18263 ;; Tracked objects:
 18264 ;;		On entry : 0/0
 18265 ;;		On exit  : 0/0
 18266 ;;		Unchanged: 0/0
 18267 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18268 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18269 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18270 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18271 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18272 ;;Total ram usage:        6 bytes
 18273 ;; Hardware stack levels used:    1
 18274 ;; Hardware stack levels required when called:    7
 18275 ;; This function calls:
 18276 ;;		Nothing
 18277 ;; This function is called by:
 18278 ;;		_printf
 18279 ;; This function uses a non-reentrant model
 18280 ;;
 18281                           
 18282                           	psect	text59
 18283  0055F6                     __ptext59:
 18284                           	opt stack 0
 18285  0055F6                     ___wmul:
 18286                           	opt stack 19
 18287                           
 18288                           ; BSR set to: 0
 18289                           ;incstack = 0
 18290  0055F6  0100               	movlb	0	; () banked
 18291  0055F8  5180               	movf	___wmul@multiplier& (0+255),w,b
 18292  0055FA  0100               	movlb	0	; () banked
 18293  0055FC  0382               	mulwf	___wmul@multiplicand& (0+255),b
 18294  0055FE  CFF3 F084          	movff	prodl,___wmul@product
 18295  005602  CFF4 F085          	movff	prodh,___wmul@product+1
 18296  005606  0100               	movlb	0	; () banked
 18297  005608  5180               	movf	___wmul@multiplier& (0+255),w,b
 18298  00560A  0100               	movlb	0	; () banked
 18299  00560C  0383               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 18300  00560E  50F3               	movf	prodl,w,c
 18301  005610  0100               	movlb	0	; () banked
 18302  005612  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 18303  005614  0100               	movlb	0	; () banked
 18304  005616  5181               	movf	(___wmul@multiplier+1)& (0+255),w,b
 18305  005618  0100               	movlb	0	; () banked
 18306  00561A  0382               	mulwf	___wmul@multiplicand& (0+255),b
 18307  00561C  50F3               	movf	prodl,w,c
 18308  00561E  0100               	movlb	0	; () banked
 18309  005620  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 18310                           
 18311                           ; BSR set to: 0
 18312  005622  C084  F080         	movff	___wmul@product,?___wmul
 18313  005626  C085  F081         	movff	___wmul@product+1,?___wmul+1
 18314  00562A  0012               	return	
 18315  00562C                     __end_of___wmul:
 18316                           	opt stack 0
 18317                           tblptru	equ	0xFF8
 18318                           tblptrh	equ	0xFF7
 18319                           tblptrl	equ	0xFF6
 18320                           tablat	equ	0xFF5
 18321                           prodh	equ	0xFF4
 18322                           prodl	equ	0xFF3
 18323                           intcon	equ	0xFF2
 18324                           intcon2	equ	0xFF1
 18325                           intcon3	equ	0xFF0
 18326                           indf0	equ	0xFEF
 18327                           postinc0	equ	0xFEE
 18328                           fsr0h	equ	0xFEA
 18329                           fsr0l	equ	0xFE9
 18330                           wreg	equ	0xFE8
 18331                           postdec1	equ	0xFE5
 18332                           fsr1l	equ	0xFE1
 18333                           indf2	equ	0xFDF
 18334                           postinc2	equ	0xFDE
 18335                           postdec2	equ	0xFDD
 18336                           fsr2h	equ	0xFDA
 18337                           fsr2l	equ	0xFD9
 18338                           status	equ	0xFD8
 18339                           
 18340 ;; *************** function ___lwmod *****************
 18341 ;; Defined at:
 18342 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 18343 ;; Parameters:    Size  Location     Type
 18344 ;;  dividend        2    7[BANK0 ] unsigned int 
 18345 ;;  divisor         2    9[BANK0 ] unsigned int 
 18346 ;; Auto vars:     Size  Location     Type
 18347 ;;  counter         1   11[BANK0 ] unsigned char 
 18348 ;; Return value:  Size  Location     Type
 18349 ;;                  2    7[BANK0 ] unsigned int 
 18350 ;; Registers used:
 18351 ;;		wreg, status,2, status,0
 18352 ;; Tracked objects:
 18353 ;;		On entry : 0/0
 18354 ;;		On exit  : 0/0
 18355 ;;		Unchanged: 0/0
 18356 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18357 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18358 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18359 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18360 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18361 ;;Total ram usage:        5 bytes
 18362 ;; Hardware stack levels used:    1
 18363 ;; Hardware stack levels required when called:    7
 18364 ;; This function calls:
 18365 ;;		Nothing
 18366 ;; This function is called by:
 18367 ;;		_printf
 18368 ;; This function uses a non-reentrant model
 18369 ;;
 18370                           
 18371                           	psect	text60
 18372  0050F2                     __ptext60:
 18373                           	opt stack 0
 18374  0050F2                     ___lwmod:
 18375                           	opt stack 19
 18376                           
 18377                           ; BSR set to: 0
 18378                           ;incstack = 0
 18379  0050F2  0100               	movlb	0	; () banked
 18380  0050F4  5189               	movf	___lwmod@divisor& (0+255),w,b
 18381  0050F6  0100               	movlb	0	; () banked
 18382  0050F8  118A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
 18383  0050FA  B4D8               	btfsc	status,2,c
 18384  0050FC  D026               	goto	l1967
 18385                           
 18386                           ; BSR set to: 0
 18387  0050FE  0E01               	movlw	1
 18388  005100  0100               	movlb	0	; () banked
 18389  005102  6F8B               	movwf	___lwmod@counter& (0+255),b
 18390  005104  D006               	goto	l6542
 18391  005106                     l6540:
 18392                           
 18393                           ; BSR set to: 0
 18394  005106  0100               	movlb	0	; () banked
 18395  005108  90D8               	bcf	status,0,c
 18396  00510A  3789               	rlcf	___lwmod@divisor& (0+255),f,b
 18397  00510C  378A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 18398  00510E  0100               	movlb	0	; () banked
 18399  005110  2B8B               	incf	___lwmod@counter& (0+255),f,b
 18400  005112                     l6542:
 18401                           
 18402                           ; BSR set to: 0
 18403  005112  0100               	movlb	0	; () banked
 18404  005114  AF8A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 18405  005116  D7F7               	goto	l6540
 18406  005118                     l6544:
 18407                           
 18408                           ; BSR set to: 0
 18409  005118  0100               	movlb	0	; () banked
 18410  00511A  5189               	movf	___lwmod@divisor& (0+255),w,b
 18411  00511C  0100               	movlb	0	; () banked
 18412  00511E  5D87               	subwf	___lwmod@dividend& (0+255),w,b
 18413  005120  0100               	movlb	0	; () banked
 18414  005122  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 18415  005124  0100               	movlb	0	; () banked
 18416  005126  5988               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 18417  005128  A0D8               	btfss	status,0,c
 18418  00512A  D008               	goto	l6548
 18419                           
 18420                           ; BSR set to: 0
 18421  00512C  0100               	movlb	0	; () banked
 18422  00512E  5189               	movf	___lwmod@divisor& (0+255),w,b
 18423  005130  0100               	movlb	0	; () banked
 18424  005132  5F87               	subwf	___lwmod@dividend& (0+255),f,b
 18425  005134  0100               	movlb	0	; () banked
 18426  005136  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 18427  005138  0100               	movlb	0	; () banked
 18428  00513A  5B88               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 18429  00513C                     l6548:
 18430                           
 18431                           ; BSR set to: 0
 18432  00513C  0100               	movlb	0	; () banked
 18433  00513E  90D8               	bcf	status,0,c
 18434  005140  338A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 18435  005142  3389               	rrcf	___lwmod@divisor& (0+255),f,b
 18436                           
 18437                           ; BSR set to: 0
 18438  005144  0100               	movlb	0	; () banked
 18439  005146  2F8B               	decfsz	___lwmod@counter& (0+255),f,b
 18440  005148  D7E7               	goto	l6544
 18441  00514A                     l1967:
 18442                           
 18443                           ; BSR set to: 0
 18444  00514A  C087  F087         	movff	___lwmod@dividend,?___lwmod
 18445  00514E  C088  F088         	movff	___lwmod@dividend+1,?___lwmod+1
 18446                           
 18447                           ; BSR set to: 0
 18448  005152  0012               	return		;funcret
 18449  005154                     __end_of___lwmod:
 18450                           	opt stack 0
 18451                           tblptru	equ	0xFF8
 18452                           tblptrh	equ	0xFF7
 18453                           tblptrl	equ	0xFF6
 18454                           tablat	equ	0xFF5
 18455                           prodh	equ	0xFF4
 18456                           prodl	equ	0xFF3
 18457                           intcon	equ	0xFF2
 18458                           intcon2	equ	0xFF1
 18459                           intcon3	equ	0xFF0
 18460                           indf0	equ	0xFEF
 18461                           postinc0	equ	0xFEE
 18462                           fsr0h	equ	0xFEA
 18463                           fsr0l	equ	0xFE9
 18464                           wreg	equ	0xFE8
 18465                           postdec1	equ	0xFE5
 18466                           fsr1l	equ	0xFE1
 18467                           indf2	equ	0xFDF
 18468                           postinc2	equ	0xFDE
 18469                           postdec2	equ	0xFDD
 18470                           fsr2h	equ	0xFDA
 18471                           fsr2l	equ	0xFD9
 18472                           status	equ	0xFD8
 18473                           
 18474 ;; *************** function ___lwdiv *****************
 18475 ;; Defined at:
 18476 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 18477 ;; Parameters:    Size  Location     Type
 18478 ;;  dividend        2    0[BANK0 ] unsigned int 
 18479 ;;  divisor         2    2[BANK0 ] unsigned int 
 18480 ;; Auto vars:     Size  Location     Type
 18481 ;;  quotient        2    4[BANK0 ] unsigned int 
 18482 ;;  counter         1    6[BANK0 ] unsigned char 
 18483 ;; Return value:  Size  Location     Type
 18484 ;;                  2    0[BANK0 ] unsigned int 
 18485 ;; Registers used:
 18486 ;;		wreg, status,2, status,0
 18487 ;; Tracked objects:
 18488 ;;		On entry : 0/0
 18489 ;;		On exit  : 0/0
 18490 ;;		Unchanged: 0/0
 18491 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18492 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18493 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18494 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18495 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18496 ;;Total ram usage:        7 bytes
 18497 ;; Hardware stack levels used:    1
 18498 ;; Hardware stack levels required when called:    7
 18499 ;; This function calls:
 18500 ;;		Nothing
 18501 ;; This function is called by:
 18502 ;;		_printf
 18503 ;; This function uses a non-reentrant model
 18504 ;;
 18505                           
 18506                           	psect	text61
 18507  004E56                     __ptext61:
 18508                           	opt stack 0
 18509  004E56                     ___lwdiv:
 18510                           	opt stack 19
 18511                           
 18512                           ; BSR set to: 0
 18513                           ;incstack = 0
 18514  004E56  0E00               	movlw	0
 18515  004E58  0100               	movlb	0	; () banked
 18516  004E5A  6F85               	movwf	(___lwdiv@quotient+1)& (0+255),b
 18517  004E5C  0E00               	movlw	0
 18518  004E5E  6F84               	movwf	___lwdiv@quotient& (0+255),b
 18519                           
 18520                           ; BSR set to: 0
 18521  004E60  0100               	movlb	0	; () banked
 18522  004E62  5182               	movf	___lwdiv@divisor& (0+255),w,b
 18523  004E64  0100               	movlb	0	; () banked
 18524  004E66  1183               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
 18525  004E68  B4D8               	btfsc	status,2,c
 18526  004E6A  D02C               	goto	l1957
 18527                           
 18528                           ; BSR set to: 0
 18529  004E6C  0E01               	movlw	1
 18530  004E6E  0100               	movlb	0	; () banked
 18531  004E70  6F86               	movwf	___lwdiv@counter& (0+255),b
 18532  004E72  D006               	goto	l6522
 18533  004E74                     l6520:
 18534                           
 18535                           ; BSR set to: 0
 18536  004E74  0100               	movlb	0	; () banked
 18537  004E76  90D8               	bcf	status,0,c
 18538  004E78  3782               	rlcf	___lwdiv@divisor& (0+255),f,b
 18539  004E7A  3783               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 18540  004E7C  0100               	movlb	0	; () banked
 18541  004E7E  2B86               	incf	___lwdiv@counter& (0+255),f,b
 18542  004E80                     l6522:
 18543                           
 18544                           ; BSR set to: 0
 18545  004E80  0100               	movlb	0	; () banked
 18546  004E82  AF83               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 18547  004E84  D7F7               	goto	l6520
 18548  004E86                     l6524:
 18549                           
 18550                           ; BSR set to: 0
 18551  004E86  0100               	movlb	0	; () banked
 18552  004E88  90D8               	bcf	status,0,c
 18553  004E8A  3784               	rlcf	___lwdiv@quotient& (0+255),f,b
 18554  004E8C  3785               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 18555                           
 18556                           ; BSR set to: 0
 18557  004E8E  0100               	movlb	0	; () banked
 18558  004E90  5182               	movf	___lwdiv@divisor& (0+255),w,b
 18559  004E92  0100               	movlb	0	; () banked
 18560  004E94  5D80               	subwf	___lwdiv@dividend& (0+255),w,b
 18561  004E96  0100               	movlb	0	; () banked
 18562  004E98  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 18563  004E9A  0100               	movlb	0	; () banked
 18564  004E9C  5981               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 18565  004E9E  A0D8               	btfss	status,0,c
 18566  004EA0  D00A               	goto	l6532
 18567                           
 18568                           ; BSR set to: 0
 18569  004EA2  0100               	movlb	0	; () banked
 18570  004EA4  5182               	movf	___lwdiv@divisor& (0+255),w,b
 18571  004EA6  0100               	movlb	0	; () banked
 18572  004EA8  5F80               	subwf	___lwdiv@dividend& (0+255),f,b
 18573  004EAA  0100               	movlb	0	; () banked
 18574  004EAC  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 18575  004EAE  0100               	movlb	0	; () banked
 18576  004EB0  5B81               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 18577                           
 18578                           ; BSR set to: 0
 18579  004EB2  0100               	movlb	0	; () banked
 18580  004EB4  8184               	bsf	___lwdiv@quotient& (0+255),0,b
 18581  004EB6                     l6532:
 18582                           
 18583                           ; BSR set to: 0
 18584  004EB6  0100               	movlb	0	; () banked
 18585  004EB8  90D8               	bcf	status,0,c
 18586  004EBA  3383               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 18587  004EBC  3382               	rrcf	___lwdiv@divisor& (0+255),f,b
 18588                           
 18589                           ; BSR set to: 0
 18590  004EBE  0100               	movlb	0	; () banked
 18591  004EC0  2F86               	decfsz	___lwdiv@counter& (0+255),f,b
 18592  004EC2  D7E1               	goto	l6524
 18593  004EC4                     l1957:
 18594                           
 18595                           ; BSR set to: 0
 18596  004EC4  C084  F080         	movff	___lwdiv@quotient,?___lwdiv
 18597  004EC8  C085  F081         	movff	___lwdiv@quotient+1,?___lwdiv+1
 18598                           
 18599                           ; BSR set to: 0
 18600  004ECC  0012               	return		;funcret
 18601  004ECE                     __end_of___lwdiv:
 18602                           	opt stack 0
 18603                           tblptru	equ	0xFF8
 18604                           tblptrh	equ	0xFF7
 18605                           tblptrl	equ	0xFF6
 18606                           tablat	equ	0xFF5
 18607                           prodh	equ	0xFF4
 18608                           prodl	equ	0xFF3
 18609                           intcon	equ	0xFF2
 18610                           intcon2	equ	0xFF1
 18611                           intcon3	equ	0xFF0
 18612                           indf0	equ	0xFEF
 18613                           postinc0	equ	0xFEE
 18614                           fsr0h	equ	0xFEA
 18615                           fsr0l	equ	0xFE9
 18616                           wreg	equ	0xFE8
 18617                           postdec1	equ	0xFE5
 18618                           fsr1l	equ	0xFE1
 18619                           indf2	equ	0xFDF
 18620                           postinc2	equ	0xFDE
 18621                           postdec2	equ	0xFDD
 18622                           fsr2h	equ	0xFDA
 18623                           fsr2l	equ	0xFD9
 18624                           status	equ	0xFD8
 18625                           
 18626 ;; *************** function _lcdInst *****************
 18627 ;; Defined at:
 18628 ;;		line 15 in file "lcd.c"
 18629 ;; Parameters:    Size  Location     Type
 18630 ;;  data            1    wreg     unsigned char 
 18631 ;; Auto vars:     Size  Location     Type
 18632 ;;  data            1    2[BANK0 ] unsigned char 
 18633 ;; Return value:  Size  Location     Type
 18634 ;;                  1    wreg      void 
 18635 ;; Registers used:
 18636 ;;		wreg, status,2, status,0, cstack
 18637 ;; Tracked objects:
 18638 ;;		On entry : 0/0
 18639 ;;		On exit  : 0/0
 18640 ;;		Unchanged: 0/0
 18641 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18642 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18643 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18644 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18645 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18646 ;;Total ram usage:        1 bytes
 18647 ;; Hardware stack levels used:    1
 18648 ;; Hardware stack levels required when called:    8
 18649 ;; This function calls:
 18650 ;;		_lcdNibble
 18651 ;; This function is called by:
 18652 ;;		_UI
 18653 ;;		_change_state_to_menu_start
 18654 ;;		_change_state_to_menu_12
 18655 ;;		_change_state_to_menu_22
 18656 ;;		_initLCD
 18657 ;;		_printRTC
 18658 ;;		_Loading
 18659 ;;		_ID
 18660 ;;		_EEPROM_write
 18661 ;;		_Test
 18662 ;;		_algorithmTest
 18663 ;;		_sensorTest
 18664 ;;		_actuatorTest
 18665 ;;		_BothServos
 18666 ;;		_PortTestDC
 18667 ;;		_PlatformTest
 18668 ;;		_SpeedTest
 18669 ;;		_BlockerTest
 18670 ;;		_arm
 18671 ;;		_PortTestPusher
 18672 ;;		_ToggleTestA5
 18673 ;; This function uses a non-reentrant model
 18674 ;;
 18675                           
 18676                           	psect	text62
 18677  005B0C                     __ptext62:
 18678                           	opt stack 0
 18679  005B0C                     _lcdInst:
 18680                           	opt stack 20
 18681                           
 18682                           ; BSR set to: 0
 18683                           ;incstack = 0
 18684                           ;lcdInst@data stored from wreg
 18685  005B0C  0100               	movlb	0	; () banked
 18686  005B0E  6F82               	movwf	lcdInst@data& (0+255),b
 18687                           
 18688                           ;lcd.c: 16: LATDbits.LATD2 = 0;
 18689  005B10  948C               	bcf	3980,2,c	;volatile
 18690                           
 18691                           ;lcd.c: 17: lcdNibble(data);
 18692  005B12  0100               	movlb	0	; () banked
 18693  005B14  5182               	movf	lcdInst@data& (0+255),w,b
 18694  005B16  EC11  F028         	call	_lcdNibble
 18695  005B1A  0012               	return		;funcret
 18696  005B1C                     __end_of_lcdInst:
 18697                           	opt stack 0
 18698                           tblptru	equ	0xFF8
 18699                           tblptrh	equ	0xFF7
 18700                           tblptrl	equ	0xFF6
 18701                           tablat	equ	0xFF5
 18702                           prodh	equ	0xFF4
 18703                           prodl	equ	0xFF3
 18704                           intcon	equ	0xFF2
 18705                           intcon2	equ	0xFF1
 18706                           intcon3	equ	0xFF0
 18707                           indf0	equ	0xFEF
 18708                           postinc0	equ	0xFEE
 18709                           fsr0h	equ	0xFEA
 18710                           fsr0l	equ	0xFE9
 18711                           wreg	equ	0xFE8
 18712                           postdec1	equ	0xFE5
 18713                           fsr1l	equ	0xFE1
 18714                           indf2	equ	0xFDF
 18715                           postinc2	equ	0xFDE
 18716                           postdec2	equ	0xFDD
 18717                           fsr2h	equ	0xFDA
 18718                           fsr2l	equ	0xFD9
 18719                           status	equ	0xFD8
 18720                           
 18721 ;; *************** function _lcdNibble *****************
 18722 ;; Defined at:
 18723 ;;		line 25 in file "lcd.c"
 18724 ;; Parameters:    Size  Location     Type
 18725 ;;  data            1    wreg     unsigned char 
 18726 ;; Auto vars:     Size  Location     Type
 18727 ;;  data            1    1[BANK0 ] unsigned char 
 18728 ;;  temp            1    0[BANK0 ] unsigned char 
 18729 ;; Return value:  Size  Location     Type
 18730 ;;                  1    wreg      void 
 18731 ;; Registers used:
 18732 ;;		wreg, status,2, status,0
 18733 ;; Tracked objects:
 18734 ;;		On entry : 0/0
 18735 ;;		On exit  : 0/0
 18736 ;;		Unchanged: 0/0
 18737 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18738 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18739 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18740 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18741 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18742 ;;Total ram usage:        2 bytes
 18743 ;; Hardware stack levels used:    1
 18744 ;; Hardware stack levels required when called:    7
 18745 ;; This function calls:
 18746 ;;		Nothing
 18747 ;; This function is called by:
 18748 ;;		_lcdInst
 18749 ;;		_putch
 18750 ;; This function uses a non-reentrant model
 18751 ;;
 18752                           
 18753                           	psect	text63
 18754  005022                     __ptext63:
 18755                           	opt stack 0
 18756  005022                     _lcdNibble:
 18757                           	opt stack 20
 18758                           
 18759                           ;incstack = 0
 18760                           ;lcdNibble@data stored from wreg
 18761  005022  0100               	movlb	0	; () banked
 18762  005024  6F81               	movwf	lcdNibble@data& (0+255),b
 18763                           
 18764                           ;lcd.c: 27: (INTCONbits.GIE = 0);
 18765  005026  9EF2               	bcf	intcon,7,c	;volatile
 18766                           
 18767                           ;lcd.c: 28: char temp = data & 0xF0;
 18768  005028  0100               	movlb	0	; () banked
 18769  00502A  5181               	movf	lcdNibble@data& (0+255),w,b
 18770  00502C  0BF0               	andlw	240
 18771  00502E  0100               	movlb	0	; () banked
 18772  005030  6F80               	movwf	lcdNibble@temp& (0+255),b
 18773                           
 18774                           ;lcd.c: 29: LATD = LATD & 0x0F;
 18775  005032  508C               	movf	3980,w,c	;volatile
 18776  005034  0B0F               	andlw	15
 18777  005036  6E8C               	movwf	3980,c	;volatile
 18778                           
 18779                           ;lcd.c: 30: LATD = temp | LATD;
 18780  005038  0100               	movlb	0	; () banked
 18781  00503A  5180               	movf	lcdNibble@temp& (0+255),w,b
 18782  00503C  108C               	iorwf	3980,w,c	;volatile
 18783  00503E  6E8C               	movwf	3980,c	;volatile
 18784                           
 18785                           ; BSR set to: 0
 18786                           ;lcd.c: 32: LATDbits.LATD3 = 1;
 18787  005040  868C               	bsf	3980,3,c	;volatile
 18788                           
 18789                           ; BSR set to: 0
 18790                           ;lcd.c: 33: _delay((unsigned long)((25)*(32000000/4000000.0)));
 18791  005042  0E42               	movlw	66
 18792  005044                     u11137:
 18793  005044  2EE8               	decfsz	wreg,f,c
 18794  005046  D7FE               	bra	u11137
 18795  005048  D000               	nop2	
 18796                           
 18797                           ;lcd.c: 34: LATDbits.LATD3 = 0;
 18798  00504A  968C               	bcf	3980,3,c	;volatile
 18799                           
 18800                           ;lcd.c: 35: _delay((unsigned long)((25)*(32000000/4000000.0)));
 18801  00504C  0E42               	movlw	66
 18802  00504E                     u11147:
 18803  00504E  2EE8               	decfsz	wreg,f,c
 18804  005050  D7FE               	bra	u11147
 18805  005052  D000               	nop2	
 18806                           
 18807                           ;lcd.c: 37: data = data << 4;
 18808  005054  0100               	movlb	0	; () banked
 18809  005056  3981               	swapf	lcdNibble@data& (0+255),w,b
 18810  005058  0BF0               	andlw	240
 18811  00505A  0100               	movlb	0	; () banked
 18812  00505C  6F81               	movwf	lcdNibble@data& (0+255),b
 18813                           
 18814                           ;lcd.c: 39: temp = data & 0xF0;
 18815  00505E  0100               	movlb	0	; () banked
 18816  005060  5181               	movf	lcdNibble@data& (0+255),w,b
 18817  005062  0BF0               	andlw	240
 18818  005064  0100               	movlb	0	; () banked
 18819  005066  6F80               	movwf	lcdNibble@temp& (0+255),b
 18820                           
 18821                           ;lcd.c: 40: LATD = LATD & 0x0F;
 18822  005068  508C               	movf	3980,w,c	;volatile
 18823  00506A  0B0F               	andlw	15
 18824  00506C  6E8C               	movwf	3980,c	;volatile
 18825                           
 18826                           ;lcd.c: 41: LATD = temp | LATD;
 18827  00506E  0100               	movlb	0	; () banked
 18828  005070  5180               	movf	lcdNibble@temp& (0+255),w,b
 18829  005072  108C               	iorwf	3980,w,c	;volatile
 18830  005074  6E8C               	movwf	3980,c	;volatile
 18831                           
 18832                           ; BSR set to: 0
 18833                           ;lcd.c: 43: LATDbits.LATD3 = 1;
 18834  005076  868C               	bsf	3980,3,c	;volatile
 18835                           
 18836                           ; BSR set to: 0
 18837                           ;lcd.c: 44: _delay((unsigned long)((25)*(32000000/4000000.0)));
 18838  005078  0E42               	movlw	66
 18839  00507A                     u11157:
 18840  00507A  2EE8               	decfsz	wreg,f,c
 18841  00507C  D7FE               	bra	u11157
 18842  00507E  D000               	nop2	
 18843                           
 18844                           ;lcd.c: 45: LATDbits.LATD3 = 0;
 18845  005080  968C               	bcf	3980,3,c	;volatile
 18846                           
 18847                           ;lcd.c: 46: _delay((unsigned long)((25)*(32000000/4000000.0)));
 18848  005082  0E42               	movlw	66
 18849  005084                     u11167:
 18850  005084  2EE8               	decfsz	wreg,f,c
 18851  005086  D7FE               	bra	u11167
 18852  005088  D000               	nop2	
 18853                           
 18854                           ;lcd.c: 47: (INTCONbits.GIE = 1);
 18855  00508A  8EF2               	bsf	intcon,7,c	;volatile
 18856  00508C  0012               	return		;funcret
 18857  00508E                     __end_of_lcdNibble:
 18858                           	opt stack 0
 18859                           tblptru	equ	0xFF8
 18860                           tblptrh	equ	0xFF7
 18861                           tblptrl	equ	0xFF6
 18862                           tablat	equ	0xFF5
 18863                           prodh	equ	0xFF4
 18864                           prodl	equ	0xFF3
 18865                           intcon	equ	0xFF2
 18866                           intcon2	equ	0xFF1
 18867                           intcon3	equ	0xFF0
 18868                           indf0	equ	0xFEF
 18869                           postinc0	equ	0xFEE
 18870                           fsr0h	equ	0xFEA
 18871                           fsr0l	equ	0xFE9
 18872                           wreg	equ	0xFE8
 18873                           postdec1	equ	0xFE5
 18874                           fsr1l	equ	0xFE1
 18875                           indf2	equ	0xFDF
 18876                           postinc2	equ	0xFDE
 18877                           postdec2	equ	0xFDD
 18878                           fsr2h	equ	0xFDA
 18879                           fsr2l	equ	0xFD9
 18880                           status	equ	0xFD8
 18881                           
 18882 ;; *************** function _handler *****************
 18883 ;; Defined at:
 18884 ;;		line 16 in file "interruptHandler.c"
 18885 ;; Parameters:    Size  Location     Type
 18886 ;;		None
 18887 ;; Auto vars:     Size  Location     Type
 18888 ;;		None
 18889 ;; Return value:  Size  Location     Type
 18890 ;;                  1    wreg      void 
 18891 ;; Registers used:
 18892 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18893 ;; Tracked objects:
 18894 ;;		On entry : 0/0
 18895 ;;		On exit  : 0/0
 18896 ;;		Unchanged: 0/0
 18897 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18898 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18899 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18900 ;;      Temps:         16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18901 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18902 ;;Total ram usage:       16 bytes
 18903 ;; Hardware stack levels used:    1
 18904 ;; Hardware stack levels required when called:    6
 18905 ;; This function calls:
 18906 ;;		_printSortTimer
 18907 ;;		_updateArmState
 18908 ;;		_updateMenu
 18909 ;;		_updateServoStates
 18910 ;;		i2_change_state_to_menu_start
 18911 ;; This function is called by:
 18912 ;;		Interrupt level 2
 18913 ;; This function uses a non-reentrant model
 18914 ;;
 18915                           
 18916                           	psect	intcode
 18917  000008                     __pintcode:
 18918                           	opt stack 0
 18919  000008                     _handler:
 18920                           	opt stack 18
 18921                           
 18922                           ;incstack = 0
 18923  000008  827E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 18924  00000A  ED97  F01B         	call	int_func,f	;refresh shadow registers
 18925                           tblptru	equ	0xFF8
 18926                           tblptrh	equ	0xFF7
 18927                           tblptrl	equ	0xFF6
 18928                           tablat	equ	0xFF5
 18929                           prodh	equ	0xFF4
 18930                           prodl	equ	0xFF3
 18931                           intcon	equ	0xFF2
 18932                           intcon2	equ	0xFF1
 18933                           intcon3	equ	0xFF0
 18934                           indf0	equ	0xFEF
 18935                           postinc0	equ	0xFEE
 18936                           fsr0h	equ	0xFEA
 18937                           fsr0l	equ	0xFE9
 18938                           wreg	equ	0xFE8
 18939                           postdec1	equ	0xFE5
 18940                           fsr1l	equ	0xFE1
 18941                           indf2	equ	0xFDF
 18942                           postinc2	equ	0xFDE
 18943                           postdec2	equ	0xFDD
 18944                           fsr2h	equ	0xFDA
 18945                           fsr2l	equ	0xFD9
 18946                           status	equ	0xFD8
 18947                           
 18948                           	psect	intcode_body
 18949  00372E                     __pintcode_body:
 18950                           	opt stack 18
 18951  00372E                     int_func:
 18952                           	opt stack 18
 18953  00372E  0006               	pop		; remove dummy address from shadow register refresh
 18954  003730  CFFA F04D          	movff	pclath,??_handler+2
 18955  003734  CFFB F04E          	movff	pclatu,??_handler+3
 18956  003738  CFE9 F04F          	movff	fsr0l,??_handler+4
 18957  00373C  CFEA F050          	movff	fsr0h,??_handler+5
 18958  003740  CFE1 F051          	movff	fsr1l,??_handler+6
 18959  003744  CFE2 F052          	movff	fsr1h,??_handler+7
 18960  003748  CFD9 F053          	movff	fsr2l,??_handler+8
 18961  00374C  CFDA F054          	movff	fsr2h,??_handler+9
 18962  003750  CFF3 F055          	movff	prodl,??_handler+10
 18963  003754  CFF4 F056          	movff	prodh,??_handler+11
 18964  003758  CFF6 F057          	movff	tblptrl,??_handler+12
 18965  00375C  CFF7 F058          	movff	tblptrh,??_handler+13
 18966  003760  CFF8 F059          	movff	tblptru,??_handler+14
 18967  003764  CFF5 F05A          	movff	tablat,??_handler+15
 18968                           
 18969                           ;interruptHandler.c: 18: if(INT1IF){
 18970  003768  A0F0               	btfss	intcon3,0,c	;volatile
 18971  00376A  D034               	goto	i2l10092
 18972                           
 18973                           ;interruptHandler.c: 19: INT1IF = 0;
 18974  00376C  90F0               	bcf	intcon3,0,c	;volatile
 18975                           
 18976                           ;interruptHandler.c: 20: input = keys[(PORTB & 0xF0) >> 4];
 18977  00376E  3881               	swapf	3969,w,c	;volatile
 18978  003770  0B0F               	andlw	15
 18979  003772  0B0F               	andlw	15
 18980  003774  6E4B               	movwf	??_handler& (0+255),c
 18981  003776  6A4C               	clrf	(??_handler+1)& (0+255),c
 18982  003778  0E93               	movlw	low _keys
 18983  00377A  244B               	addwf	??_handler,w,c
 18984  00377C  6EF6               	movwf	tblptrl,c
 18985  00377E  0EFA               	movlw	high _keys
 18986  003780  204C               	addwfc	??_handler+1,w,c
 18987  003782  6EF7               	movwf	tblptrh,c
 18988  003784                     	if	1	;There are 3 active tblptr bytes
 18989  003784  6AF8               	clrf	tblptru,c
 18990  003786  0E00               	movlw	low (__mediumconst shr (0+16))
 18991  003788  22F8               	addwfc	tblptru,f,c
 18992  00378A                     	endif
 18993  00378A  0008               	tblrd		*
 18994  00378C  CFF5 F07D          	movff	tablat,_input	;volatile
 18995                           
 18996                           ;interruptHandler.c: 21: if(input == '*'){
 18997  003790  0E2A               	movlw	42
 18998  003792  187D               	xorwf	_input,w,c	;volatile
 18999  003794  B4D8               	btfsc	status,2,c
 19000  003796  D00D               	goto	i2l10086
 19001  003798  D018               	goto	i2l10088
 19002  00379A                     i2l10076:
 19003                           
 19004                           ;interruptHandler.c: 24: machine_state = Testing_state;
 19005  00379A  0E03               	movlw	3
 19006  00379C  D007               	goto	L17
 19007  00379E                     i2l10078:
 19008                           
 19009                           ; BSR set to: 0
 19010                           ;interruptHandler.c: 27: machine_state = UI_state;
 19011  00379E  0E00               	movlw	0
 19012  0037A0  0100               	movlb	0	; () banked
 19013  0037A2  6FFC               	movwf	_machine_state& (0+255),b
 19014                           
 19015                           ; BSR set to: 0
 19016                           ;interruptHandler.c: 28: change_state_to_menu_start();
 19017  0037A4  ECBB  F02C         	call	i2_change_state_to_menu_start	;wreg free
 19018                           
 19019                           ;interruptHandler.c: 29: break;
 19020  0037A8  D015               	goto	i2l10092
 19021  0037AA                     i2l10082:
 19022                           
 19023                           ;interruptHandler.c: 31: machine_state = DoneSorting_state;
 19024  0037AA  0E02               	movlw	2
 19025  0037AC                     L17:
 19026  0037AC  0100               	movlb	0	; () banked
 19027  0037AE  6FFC               	movwf	_machine_state& (0+255),b
 19028                           
 19029                           ; BSR set to: 0
 19030                           ;interruptHandler.c: 33: }
 19031                           
 19032                           ;interruptHandler.c: 32: break;
 19033  0037B0  D011               	goto	i2l10092
 19034  0037B2                     i2l10086:
 19035  0037B2  0100               	movlb	0	; () banked
 19036  0037B4  51FC               	movf	_machine_state& (0+255),w,b
 19037                           
 19038                           ; Switch size 1, requested type "space"
 19039                           ; Number of cases is 3, Range of values is 0 to 3
 19040                           ; switch strategies available:
 19041                           ; Name         Instructions Cycles
 19042                           ; simple_byte           10     6 (average)
 19043                           ;	Chosen strategy is simple_byte
 19044  0037B6  0A00               	xorlw	0	; case 0
 19045  0037B8  B4D8               	btfsc	status,2,c
 19046  0037BA  D7EF               	goto	i2l10076
 19047  0037BC  0A01               	xorlw	1	; case 1
 19048  0037BE  B4D8               	btfsc	status,2,c
 19049  0037C0  D7F4               	goto	i2l10082
 19050  0037C2  0A02               	xorlw	2	; case 3
 19051  0037C4  B4D8               	btfsc	status,2,c
 19052  0037C6  D7EB               	goto	i2l10078
 19053                           
 19054                           ; BSR set to: 0
 19055                           ;interruptHandler.c: 34: }
 19056  0037C8  D005               	goto	i2l10092
 19057  0037CA                     i2l10088:
 19058                           
 19059                           ;interruptHandler.c: 35: else if(machine_state == UI_state){
 19060  0037CA  0100               	movlb	0	; () banked
 19061  0037CC  51FC               	movf	_machine_state& (0+255),w,b
 19062  0037CE  B4D8               	btfsc	status,2,c
 19063                           
 19064                           ; BSR set to: 0
 19065                           ;interruptHandler.c: 36: updateMenu();
 19066  0037D0  ECC8  F017         	call	_updateMenu	;wreg free
 19067  0037D4                     i2l10092:
 19068                           
 19069                           ;interruptHandler.c: 37: }
 19070                           ;interruptHandler.c: 38: }
 19071                           ;interruptHandler.c: 41: if(TMR0IF){
 19072  0037D4  A4F2               	btfss	intcon,2,c	;volatile
 19073  0037D6  D00C               	goto	i2l10106
 19074                           
 19075                           ;interruptHandler.c: 42: TMR0IF = 0;
 19076  0037D8  94F2               	bcf	intcon,2,c	;volatile
 19077                           
 19078                           ;interruptHandler.c: 43: if(machine_state == Sorting_state){
 19079  0037DA  0100               	movlb	0	; () banked
 19080  0037DC  05FC               	decf	_machine_state& (0+255),w,b
 19081  0037DE  A4D8               	btfss	status,2,c
 19082  0037E0  D007               	goto	i2l10106
 19083                           
 19084                           ; BSR set to: 0
 19085                           ;interruptHandler.c: 44: printSortTimer();
 19086  0037E2  EC28  F019         	call	_printSortTimer	;wreg free
 19087                           
 19088                           ;interruptHandler.c: 46: TMR0H = 0b10000101;
 19089  0037E6  0E85               	movlw	133
 19090  0037E8  6ED7               	movwf	4055,c	;volatile
 19091                           
 19092                           ;interruptHandler.c: 47: TMR0L = 0b11101110;
 19093  0037EA  0EEE               	movlw	238
 19094  0037EC  6ED6               	movwf	4054,c	;volatile
 19095                           
 19096                           ;interruptHandler.c: 48: TMR0ON = 1;
 19097  0037EE  8ED5               	bsf	4053,7,c	;volatile
 19098  0037F0                     i2l10106:
 19099                           
 19100                           ;interruptHandler.c: 49: }
 19101                           ;interruptHandler.c: 50: }
 19102                           ;interruptHandler.c: 53: if(TMR1IF){
 19103  0037F0  A09E               	btfss	3998,0,c	;volatile
 19104  0037F2  D02A               	goto	i2l10134
 19105                           
 19106                           ;interruptHandler.c: 54: TMR1IF = 0;
 19107  0037F4  909E               	bcf	3998,0,c	;volatile
 19108                           
 19109                           ;interruptHandler.c: 55: TMR1ON = 0;
 19110  0037F6  90CD               	bcf	4045,0,c	;volatile
 19111                           
 19112                           ;interruptHandler.c: 56: if(machine_state == Sorting_state){
 19113  0037F8  0100               	movlb	0	; () banked
 19114  0037FA  05FC               	decf	_machine_state& (0+255),w,b
 19115  0037FC  A4D8               	btfss	status,2,c
 19116  0037FE  D024               	goto	i2l10134
 19117                           
 19118                           ; BSR set to: 0
 19119                           ;interruptHandler.c: 57: if(was_low_1){
 19120  003800  5077               	movf	_was_low_1,w,c	;volatile
 19121  003802  1078               	iorwf	_was_low_1+1,w,c	;volatile
 19122  003804  B4D8               	btfsc	status,2,c
 19123  003806  D00A               	goto	i2l1034
 19124                           
 19125                           ; BSR set to: 0
 19126                           ;interruptHandler.c: 58: LATCbits.LATC1 = 1;
 19127  003808  828B               	bsf	3979,1,c	;volatile
 19128                           
 19129                           ; BSR set to: 0
 19130                           ;interruptHandler.c: 59: was_low_1 = 0;
 19131  00380A  0E00               	movlw	0
 19132  00380C  6E78               	movwf	_was_low_1+1,c	;volatile
 19133  00380E  0E00               	movlw	0
 19134  003810  6E77               	movwf	_was_low_1,c	;volatile
 19135                           
 19136                           ; BSR set to: 0
 19137                           ;interruptHandler.c: 60: TMR1H = servoTimes[0];
 19138  003812  C11C  FFCF         	movff	_servoTimes,4047	;volatile
 19139                           
 19140                           ; BSR set to: 0
 19141                           ;interruptHandler.c: 61: TMR1L = servoTimes[1];
 19142  003816  C11E  FFCE         	movff	_servoTimes+2,4046	;volatile
 19143                           
 19144                           ;interruptHandler.c: 62: }
 19145  00381A  D00F               	goto	i2l10128
 19146  00381C                     i2l1034:
 19147                           
 19148                           ; BSR set to: 0
 19149                           ;interruptHandler.c: 63: else{
 19150                           ;interruptHandler.c: 64: LATCbits.LATC1 = 0;
 19151  00381C  928B               	bcf	3979,1,c	;volatile
 19152                           
 19153                           ; BSR set to: 0
 19154                           ;interruptHandler.c: 65: was_low_1 = 1;
 19155  00381E  0E00               	movlw	0
 19156  003820  6E78               	movwf	_was_low_1+1,c	;volatile
 19157  003822  0E01               	movlw	1
 19158  003824  6E77               	movwf	_was_low_1,c	;volatile
 19159                           
 19160                           ; BSR set to: 0
 19161                           ;interruptHandler.c: 66: TMR1H = 20000 - servoTimes[0];
 19162  003826  0101               	movlb	1	; () banked
 19163  003828  511C               	movf	_servoTimes& (0+255),w,b
 19164  00382A  0800               	sublw	0
 19165  00382C  0F20               	addlw	32
 19166  00382E  6ECF               	movwf	4047,c	;volatile
 19167                           
 19168                           ; BSR set to: 1
 19169                           ;interruptHandler.c: 67: TMR1L = 20000 - servoTimes[1];
 19170  003830  0101               	movlb	1	; () banked
 19171  003832  511E               	movf	(_servoTimes+2)& (0+255),w,b
 19172  003834  0800               	sublw	0
 19173  003836  0F20               	addlw	32
 19174  003838  6ECE               	movwf	4046,c	;volatile
 19175  00383A                     i2l10128:
 19176                           
 19177                           ;interruptHandler.c: 68: }
 19178                           ;interruptHandler.c: 69: TMR1ON = 1;
 19179  00383A  80CD               	bsf	4045,0,c	;volatile
 19180                           
 19181                           ;interruptHandler.c: 70: servo_timer_counter += 10;
 19182  00383C  0E0A               	movlw	10
 19183  00383E  266D               	addwf	_servo_timer_counter,f,c	;volatile
 19184  003840  0E00               	movlw	0
 19185  003842  226E               	addwfc	_servo_timer_counter+1,f,c	;volatile
 19186                           
 19187                           ;interruptHandler.c: 72: updateServoStates();
 19188  003844  EC86  F01D         	call	_updateServoStates	;wreg free
 19189  003848                     i2l10134:
 19190                           
 19191                           ;interruptHandler.c: 73: }
 19192                           ;interruptHandler.c: 74: }
 19193                           ;interruptHandler.c: 77: if(TMR2IF){
 19194  003848  A29E               	btfss	3998,1,c	;volatile
 19195  00384A  D026               	goto	i2l10160
 19196                           
 19197                           ;interruptHandler.c: 80: TMR2IF = 0;
 19198  00384C  929E               	bcf	3998,1,c	;volatile
 19199                           
 19200                           ;interruptHandler.c: 81: TMR2ON = 0;
 19201  00384E  94CA               	bcf	4042,2,c	;volatile
 19202                           
 19203                           ;interruptHandler.c: 82: timer2_counter++;
 19204  003850  4A73               	infsnz	_timer2_counter,f,c	;volatile
 19205  003852  2A74               	incf	_timer2_counter+1,f,c	;volatile
 19206                           
 19207                           ;interruptHandler.c: 83: if(machine_state == Sorting_state){
 19208  003854  0100               	movlb	0	; () banked
 19209  003856  05FC               	decf	_machine_state& (0+255),w,b
 19210  003858  A4D8               	btfss	status,2,c
 19211  00385A  D01E               	goto	i2l10160
 19212                           
 19213                           ; BSR set to: 0
 19214                           ;interruptHandler.c: 84: if(was_low_2 && (timer2_counter == 2)){
 19215  00385C  5079               	movf	_was_low_2,w,c	;volatile
 19216  00385E  107A               	iorwf	_was_low_2+1,w,c	;volatile
 19217  003860  B4D8               	btfsc	status,2,c
 19218  003862  D00A               	goto	i2l10150
 19219                           
 19220                           ; BSR set to: 0
 19221  003864  0E02               	movlw	2
 19222  003866  1873               	xorwf	_timer2_counter,w,c	;volatile
 19223  003868  1074               	iorwf	_timer2_counter+1,w,c	;volatile
 19224  00386A  A4D8               	btfss	status,2,c
 19225  00386C  D005               	goto	i2l10150
 19226                           
 19227                           ; BSR set to: 0
 19228                           ;interruptHandler.c: 86: LATBbits.LATB3 = 1;
 19229  00386E  868A               	bsf	3978,3,c	;volatile
 19230                           
 19231                           ; BSR set to: 0
 19232                           ;interruptHandler.c: 87: was_low_2 = 0;
 19233  003870  0E00               	movlw	0
 19234  003872  6E7A               	movwf	_was_low_2+1,c	;volatile
 19235  003874  0E00               	movlw	0
 19236  003876  D008               	goto	L18
 19237  003878                     i2l10150:
 19238                           
 19239                           ; BSR set to: 0
 19240                           ;interruptHandler.c: 90: else if(!was_low_2){
 19241  003878  5079               	movf	_was_low_2,w,c	;volatile
 19242  00387A  107A               	iorwf	_was_low_2+1,w,c	;volatile
 19243  00387C  A4D8               	btfss	status,2,c
 19244  00387E  D009               	goto	i2l10156
 19245                           
 19246                           ; BSR set to: 0
 19247                           ;interruptHandler.c: 91: LATBbits.LATB3 = 0;
 19248  003880  968A               	bcf	3978,3,c	;volatile
 19249                           
 19250                           ; BSR set to: 0
 19251                           ;interruptHandler.c: 92: was_low_2 = 1;
 19252  003882  0E00               	movlw	0
 19253  003884  6E7A               	movwf	_was_low_2+1,c	;volatile
 19254  003886  0E01               	movlw	1
 19255  003888                     L18:
 19256  003888  6E79               	movwf	_was_low_2,c	;volatile
 19257                           
 19258                           ;interruptHandler.c: 93: timer2_counter = 0;
 19259  00388A  0E00               	movlw	0
 19260  00388C  6E74               	movwf	_timer2_counter+1,c	;volatile
 19261  00388E  0E00               	movlw	0
 19262  003890  6E73               	movwf	_timer2_counter,c	;volatile
 19263  003892                     i2l10156:
 19264                           
 19265                           ; BSR set to: 0
 19266                           ;interruptHandler.c: 94: }
 19267                           ;interruptHandler.c: 95: updateArmState();
 19268  003892  EC8B  F02A         	call	_updateArmState	;wreg free
 19269                           
 19270                           ;interruptHandler.c: 96: TMR2ON = 1;
 19271  003896  84CA               	bsf	4042,2,c	;volatile
 19272  003898                     i2l10160:
 19273                           
 19274                           ;interruptHandler.c: 97: }
 19275                           ;interruptHandler.c: 98: }
 19276                           ;interruptHandler.c: 101: if(TMR3IF){
 19277  003898  A2A1               	btfss	4001,1,c	;volatile
 19278  00389A  D024               	goto	i2l1045
 19279                           
 19280                           ;interruptHandler.c: 102: TMR3IF = 0;
 19281  00389C  92A1               	bcf	4001,1,c	;volatile
 19282                           
 19283                           ;interruptHandler.c: 103: TMR3ON = 0;
 19284  00389E  90B1               	bcf	4017,0,c	;volatile
 19285                           
 19286                           ;interruptHandler.c: 104: if(machine_state == Sorting_state){
 19287  0038A0  0100               	movlb	0	; () banked
 19288  0038A2  05FC               	decf	_machine_state& (0+255),w,b
 19289  0038A4  A4D8               	btfss	status,2,c
 19290  0038A6  D01E               	goto	i2l1045
 19291                           
 19292                           ; BSR set to: 0
 19293                           ;interruptHandler.c: 105: if(was_low_3){
 19294  0038A8  507B               	movf	_was_low_3,w,c	;volatile
 19295  0038AA  107C               	iorwf	_was_low_3+1,w,c	;volatile
 19296  0038AC  B4D8               	btfsc	status,2,c
 19297  0038AE  D00A               	goto	i2l1043
 19298                           
 19299                           ; BSR set to: 0
 19300                           ;interruptHandler.c: 106: LATCbits.LATC2 = 1;
 19301  0038B0  848B               	bsf	3979,2,c	;volatile
 19302                           
 19303                           ; BSR set to: 0
 19304                           ;interruptHandler.c: 107: was_low_3 = 0;
 19305  0038B2  0E00               	movlw	0
 19306  0038B4  6E7C               	movwf	_was_low_3+1,c	;volatile
 19307  0038B6  0E00               	movlw	0
 19308  0038B8  6E7B               	movwf	_was_low_3,c	;volatile
 19309                           
 19310                           ; BSR set to: 0
 19311                           ;interruptHandler.c: 108: TMR3H = servoTimes[2];
 19312  0038BA  C120  FFB3         	movff	_servoTimes+4,4019	;volatile
 19313                           
 19314                           ; BSR set to: 0
 19315                           ;interruptHandler.c: 109: TMR3L = servoTimes[3];
 19316  0038BE  C122  FFB2         	movff	_servoTimes+6,4018	;volatile
 19317                           
 19318                           ;interruptHandler.c: 110: }
 19319  0038C2  D00F               	goto	i2l10182
 19320  0038C4                     i2l1043:
 19321                           
 19322                           ; BSR set to: 0
 19323                           ;interruptHandler.c: 111: else{
 19324                           ;interruptHandler.c: 112: LATCbits.LATC2 = 0;
 19325  0038C4  948B               	bcf	3979,2,c	;volatile
 19326                           
 19327                           ; BSR set to: 0
 19328                           ;interruptHandler.c: 113: was_low_3 = 1;
 19329  0038C6  0E00               	movlw	0
 19330  0038C8  6E7C               	movwf	_was_low_3+1,c	;volatile
 19331  0038CA  0E01               	movlw	1
 19332  0038CC  6E7B               	movwf	_was_low_3,c	;volatile
 19333                           
 19334                           ; BSR set to: 0
 19335                           ;interruptHandler.c: 114: TMR3H = 20000 - servoTimes[2];
 19336  0038CE  0101               	movlb	1	; () banked
 19337  0038D0  5120               	movf	(_servoTimes+4)& (0+255),w,b
 19338  0038D2  0800               	sublw	0
 19339  0038D4  0F20               	addlw	32
 19340  0038D6  6EB3               	movwf	4019,c	;volatile
 19341                           
 19342                           ; BSR set to: 1
 19343                           ;interruptHandler.c: 115: TMR3L = 20000 - servoTimes[3];
 19344  0038D8  0101               	movlb	1	; () banked
 19345  0038DA  5122               	movf	(_servoTimes+6)& (0+255),w,b
 19346  0038DC  0800               	sublw	0
 19347  0038DE  0F20               	addlw	32
 19348  0038E0  6EB2               	movwf	4018,c	;volatile
 19349  0038E2                     i2l10182:
 19350                           
 19351                           ;interruptHandler.c: 116: }
 19352                           ;interruptHandler.c: 117: TMR3ON = 1;
 19353  0038E2  80B1               	bsf	4017,0,c	;volatile
 19354  0038E4                     i2l1045:
 19355  0038E4  C05A  FFF5         	movff	??_handler+15,tablat
 19356  0038E8  C059  FFF8         	movff	??_handler+14,tblptru
 19357  0038EC  C058  FFF7         	movff	??_handler+13,tblptrh
 19358  0038F0  C057  FFF6         	movff	??_handler+12,tblptrl
 19359  0038F4  C056  FFF4         	movff	??_handler+11,prodh
 19360  0038F8  C055  FFF3         	movff	??_handler+10,prodl
 19361  0038FC  C054  FFDA         	movff	??_handler+9,fsr2h
 19362  003900  C053  FFD9         	movff	??_handler+8,fsr2l
 19363  003904  C052  FFE2         	movff	??_handler+7,fsr1h
 19364  003908  C051  FFE1         	movff	??_handler+6,fsr1l
 19365  00390C  C050  FFEA         	movff	??_handler+5,fsr0h
 19366  003910  C04F  FFE9         	movff	??_handler+4,fsr0l
 19367  003914  C04E  FFFB         	movff	??_handler+3,pclatu
 19368  003918  C04D  FFFA         	movff	??_handler+2,pclath
 19369  00391C  927E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 19370  00391E  0011               	retfie		f
 19371  003920                     __end_of_handler:
 19372                           	opt stack 0
 19373                           pclatu	equ	0xFFB
 19374                           pclath	equ	0xFFA
 19375                           tblptru	equ	0xFF8
 19376                           tblptrh	equ	0xFF7
 19377                           tblptrl	equ	0xFF6
 19378                           tablat	equ	0xFF5
 19379                           prodh	equ	0xFF4
 19380                           prodl	equ	0xFF3
 19381                           intcon	equ	0xFF2
 19382                           intcon2	equ	0xFF1
 19383                           intcon3	equ	0xFF0
 19384                           indf0	equ	0xFEF
 19385                           postinc0	equ	0xFEE
 19386                           fsr0h	equ	0xFEA
 19387                           fsr0l	equ	0xFE9
 19388                           wreg	equ	0xFE8
 19389                           postdec1	equ	0xFE5
 19390                           fsr1h	equ	0xFE2
 19391                           fsr1l	equ	0xFE1
 19392                           indf2	equ	0xFDF
 19393                           postinc2	equ	0xFDE
 19394                           postdec2	equ	0xFDD
 19395                           fsr2h	equ	0xFDA
 19396                           fsr2l	equ	0xFD9
 19397                           status	equ	0xFD8
 19398                           
 19399 ;; *************** function _updateServoStates *****************
 19400 ;; Defined at:
 19401 ;;		line 552 in file "sort.c"
 19402 ;; Parameters:    Size  Location     Type
 19403 ;;		None
 19404 ;; Auto vars:     Size  Location     Type
 19405 ;;		None
 19406 ;; Return value:  Size  Location     Type
 19407 ;;                  1    wreg      void 
 19408 ;; Registers used:
 19409 ;;		wreg, status,2, status,0, cstack
 19410 ;; Tracked objects:
 19411 ;;		On entry : 0/0
 19412 ;;		On exit  : 0/0
 19413 ;;		Unchanged: 0/0
 19414 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19415 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19416 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19417 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19418 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19419 ;;Total ram usage:        2 bytes
 19420 ;; Hardware stack levels used:    1
 19421 ;; Hardware stack levels required when called:    1
 19422 ;; This function calls:
 19423 ;;		i2_updateServoPosition
 19424 ;; This function is called by:
 19425 ;;		_handler
 19426 ;; This function uses a non-reentrant model
 19427 ;;
 19428                           
 19429                           	psect	text65
 19430  003B0C                     __ptext65:
 19431                           	opt stack 0
 19432  003B0C                     _updateServoStates:
 19433                           	opt stack 22
 19434                           
 19435                           ;sort.c: 554: if(servo_timer_counter >= servo_timer_target){
 19436                           
 19437                           ;incstack = 0
 19438  003B0C  506F               	movf	_servo_timer_target,w,c	;volatile
 19439  003B0E  5C6D               	subwf	_servo_timer_counter,w,c	;volatile
 19440  003B10  506E               	movf	_servo_timer_counter+1,w,c	;volatile
 19441  003B12  0A80               	xorlw	128
 19442  003B14  6E09               	movwf	??_updateServoStates& (0+255),c
 19443  003B16  5070               	movf	_servo_timer_target+1,w,c	;volatile
 19444  003B18  0A80               	xorlw	128
 19445  003B1A  5809               	subwfb	??_updateServoStates& (0+255),w,c
 19446  003B1C  A0D8               	btfss	status,0,c
 19447  003B1E  0012               	return	
 19448                           
 19449                           ;sort.c: 556: if(f_panning_to_bin){
 19450  003B20  5061               	movf	_f_panning_to_bin,w,c	;volatile
 19451  003B22  1062               	iorwf	_f_panning_to_bin+1,w,c	;volatile
 19452  003B24  A4D8               	btfss	status,2,c
 19453  003B26  D036               	goto	i2l9950
 19454  003B28  D05F               	goto	i2l9954
 19455  003B2A                     i2l9924:
 19456                           
 19457                           ;sort.c: 560: updateServoPosition(1260, 3);
 19458  003B2A  0E04               	movlw	4
 19459  003B2C  6E02               	movwf	i2updateServoPosition@time_us+1,c
 19460  003B2E  0EEC               	movlw	236
 19461  003B30  6E01               	movwf	i2updateServoPosition@time_us,c
 19462  003B32  0E00               	movlw	0
 19463  003B34  6E04               	movwf	i2updateServoPosition@timer+1,c
 19464  003B36  0E03               	movlw	3
 19465  003B38  6E03               	movwf	i2updateServoPosition@timer,c
 19466  003B3A  ECD9  F027         	call	i2_updateServoPosition	;wreg free
 19467  003B3E  D025               	goto	i2l9944
 19468  003B40                     i2l9928:
 19469                           
 19470                           ;sort.c: 562: servo_timer_target = 700;
 19471  003B40  0E02               	movlw	2
 19472  003B42  6E70               	movwf	_servo_timer_target+1,c	;volatile
 19473  003B44  0EBC               	movlw	188
 19474  003B46  6E6F               	movwf	_servo_timer_target,c	;volatile
 19475                           
 19476                           ;sort.c: 563: break;
 19477  003B48  D04A               	goto	i2l9952
 19478  003B4A                     i2l9930:
 19479                           
 19480                           ;sort.c: 565: updateServoPosition(1260, 3);
 19481  003B4A  0E04               	movlw	4
 19482  003B4C  6E02               	movwf	i2updateServoPosition@time_us+1,c
 19483  003B4E  0EEC               	movlw	236
 19484  003B50  6E01               	movwf	i2updateServoPosition@time_us,c
 19485  003B52  0E00               	movlw	0
 19486  003B54  6E04               	movwf	i2updateServoPosition@timer+1,c
 19487  003B56  0E03               	movlw	3
 19488  003B58  6E03               	movwf	i2updateServoPosition@timer,c
 19489  003B5A  ECD9  F027         	call	i2_updateServoPosition	;wreg free
 19490  003B5E  D015               	goto	i2l9944
 19491  003B60                     i2l9936:
 19492                           
 19493                           ;sort.c: 571: updateServoPosition(1390, 3);
 19494  003B60  0E05               	movlw	5
 19495  003B62  6E02               	movwf	i2updateServoPosition@time_us+1,c
 19496  003B64  0E6E               	movlw	110
 19497  003B66  6E01               	movwf	i2updateServoPosition@time_us,c
 19498  003B68  0E00               	movlw	0
 19499  003B6A  6E04               	movwf	i2updateServoPosition@timer+1,c
 19500  003B6C  0E03               	movlw	3
 19501  003B6E  6E03               	movwf	i2updateServoPosition@timer,c
 19502  003B70  ECD9  F027         	call	i2_updateServoPosition	;wreg free
 19503  003B74  D00A               	goto	i2l9944
 19504  003B76                     i2l9942:
 19505                           
 19506                           ;sort.c: 576: updateServoPosition(1390, 3);
 19507  003B76  0E05               	movlw	5
 19508  003B78  6E02               	movwf	i2updateServoPosition@time_us+1,c
 19509  003B7A  0E6E               	movlw	110
 19510  003B7C  6E01               	movwf	i2updateServoPosition@time_us,c
 19511  003B7E  0E00               	movlw	0
 19512  003B80  6E04               	movwf	i2updateServoPosition@timer+1,c
 19513  003B82  0E03               	movlw	3
 19514  003B84  6E03               	movwf	i2updateServoPosition@timer,c
 19515  003B86  ECD9  F027         	call	i2_updateServoPosition	;wreg free
 19516  003B8A                     i2l9944:
 19517                           
 19518                           ;sort.c: 577: servo_timer_counter = 0;
 19519  003B8A  0E00               	movlw	0
 19520  003B8C  6E6E               	movwf	_servo_timer_counter+1,c	;volatile
 19521  003B8E  0E00               	movlw	0
 19522  003B90  6E6D               	movwf	_servo_timer_counter,c	;volatile
 19523  003B92  D7D6               	goto	i2l9928
 19524  003B94                     i2l9950:
 19525  003B94  C06B  F009         	movff	_pan_servo_state,??_updateServoStates	;volatile
 19526  003B98  C06C  F00A         	movff	_pan_servo_state+1,??_updateServoStates+1	;volatile
 19527                           
 19528                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 4 sub-sw
      +                          itches
 19529                           ; Switch size 1, requested type "space"
 19530                           ; Number of cases is 4, Range of values is 1 to 9
 19531                           ; switch strategies available:
 19532                           ; Name         Instructions Cycles
 19533                           ; simple_byte           13     7 (average)
 19534                           ;	Chosen strategy is simple_byte
 19535  003B9C  500A               	movf	??_updateServoStates+1,w,c
 19536  003B9E  0A01               	xorlw	1	; case 1
 19537  003BA0  B4D8               	btfsc	status,2,c
 19538  003BA2  D00A               	goto	i2l10630
 19539  003BA4  0A02               	xorlw	2	; case 3
 19540  003BA6  B4D8               	btfsc	status,2,c
 19541  003BA8  D00C               	goto	i2l10632
 19542  003BAA  0A05               	xorlw	5	; case 6
 19543  003BAC  B4D8               	btfsc	status,2,c
 19544  003BAE  D00E               	goto	i2l10634
 19545  003BB0  0A0F               	xorlw	15	; case 9
 19546  003BB2  B4D8               	btfsc	status,2,c
 19547  003BB4  D010               	goto	i2l10636
 19548  003BB6  D013               	goto	i2l9952
 19549  003BB8                     i2l10630:
 19550                           
 19551                           ; Switch size 1, requested type "space"
 19552                           ; Number of cases is 1, Range of values is 244 to 244
 19553                           ; switch strategies available:
 19554                           ; Name         Instructions Cycles
 19555                           ; simple_byte            4     3 (average)
 19556                           ;	Chosen strategy is simple_byte
 19557  003BB8  5009               	movf	??_updateServoStates,w,c
 19558  003BBA  0AF4               	xorlw	244	; case 244
 19559  003BBC  B4D8               	btfsc	status,2,c
 19560  003BBE  D7B5               	goto	i2l9924
 19561  003BC0  D00E               	goto	i2l9952
 19562  003BC2                     i2l10632:
 19563                           
 19564                           ; Switch size 1, requested type "space"
 19565                           ; Number of cases is 1, Range of values is 82 to 82
 19566                           ; switch strategies available:
 19567                           ; Name         Instructions Cycles
 19568                           ; simple_byte            4     3 (average)
 19569                           ;	Chosen strategy is simple_byte
 19570  003BC2  5009               	movf	??_updateServoStates,w,c
 19571  003BC4  0A52               	xorlw	82	; case 82
 19572  003BC6  B4D8               	btfsc	status,2,c
 19573  003BC8  D7C0               	goto	i2l9930
 19574  003BCA  D009               	goto	i2l9952
 19575  003BCC                     i2l10634:
 19576                           
 19577                           ; Switch size 1, requested type "space"
 19578                           ; Number of cases is 1, Range of values is 134 to 134
 19579                           ; switch strategies available:
 19580                           ; Name         Instructions Cycles
 19581                           ; simple_byte            4     3 (average)
 19582                           ;	Chosen strategy is simple_byte
 19583  003BCC  5009               	movf	??_updateServoStates,w,c
 19584  003BCE  0A86               	xorlw	134	; case 134
 19585  003BD0  B4D8               	btfsc	status,2,c
 19586  003BD2  D7C6               	goto	i2l9936
 19587  003BD4  D004               	goto	i2l9952
 19588  003BD6                     i2l10636:
 19589                           
 19590                           ; Switch size 1, requested type "space"
 19591                           ; Number of cases is 1, Range of values is 96 to 96
 19592                           ; switch strategies available:
 19593                           ; Name         Instructions Cycles
 19594                           ; simple_byte            4     3 (average)
 19595                           ;	Chosen strategy is simple_byte
 19596  003BD6  5009               	movf	??_updateServoStates,w,c
 19597  003BD8  0A60               	xorlw	96	; case 96
 19598  003BDA  B4D8               	btfsc	status,2,c
 19599  003BDC  D7CC               	goto	i2l9942
 19600  003BDE                     i2l9952:
 19601                           
 19602                           ;sort.c: 583: f_panning_to_bin = 0;
 19603  003BDE  0E00               	movlw	0
 19604  003BE0  6E62               	movwf	_f_panning_to_bin+1,c	;volatile
 19605  003BE2  0E00               	movlw	0
 19606  003BE4  6E61               	movwf	_f_panning_to_bin,c	;volatile
 19607                           
 19608                           ;sort.c: 584: }
 19609  003BE6  0012               	return	
 19610  003BE8                     i2l9954:
 19611                           
 19612                           ;sort.c: 585: else if(pan_servo_state == 1200){
 19613  003BE8  0EB0               	movlw	176
 19614  003BEA  186B               	xorwf	_pan_servo_state,w,c	;volatile
 19615  003BEC  E15A               	bnz	i2l9984
 19616  003BEE  0E04               	movlw	4
 19617  003BF0  186C               	xorwf	_pan_servo_state+1,w,c	;volatile
 19618  003BF2  A4D8               	btfss	status,2,c
 19619  003BF4  D056               	goto	i2l9984
 19620                           
 19621                           ;sort.c: 587: servo_timer_counter = 0;
 19622  003BF6  0E00               	movlw	0
 19623  003BF8  6E6E               	movwf	_servo_timer_counter+1,c	;volatile
 19624  003BFA  0E00               	movlw	0
 19625  003BFC  6E6D               	movwf	_servo_timer_counter,c	;volatile
 19626                           
 19627                           ;sort.c: 588: }
 19628  003BFE  0012               	return	
 19629  003C00                     i2l9958:
 19630                           
 19631                           ;sort.c: 593: updateServoPosition(1050, 3);
 19632  003C00  0E04               	movlw	4
 19633  003C02  6E02               	movwf	i2updateServoPosition@time_us+1,c
 19634  003C04  0E1A               	movlw	26
 19635  003C06  6E01               	movwf	i2updateServoPosition@time_us,c
 19636  003C08  0E00               	movlw	0
 19637  003C0A  6E04               	movwf	i2updateServoPosition@timer+1,c
 19638  003C0C  0E03               	movlw	3
 19639  003C0E  6E03               	movwf	i2updateServoPosition@timer,c
 19640  003C10  ECD9  F027         	call	i2_updateServoPosition	;wreg free
 19641                           
 19642                           ;sort.c: 594: servo_timer_counter = 0;
 19643  003C14  0E00               	movlw	0
 19644  003C16  6E6E               	movwf	_servo_timer_counter+1,c	;volatile
 19645  003C18  0E00               	movlw	0
 19646  003C1A  6E6D               	movwf	_servo_timer_counter,c	;volatile
 19647                           
 19648                           ;sort.c: 595: servo_timer_target = 750;
 19649  003C1C  0E02               	movlw	2
 19650  003C1E  6E70               	movwf	_servo_timer_target+1,c	;volatile
 19651  003C20  0EEE               	movlw	238
 19652  003C22  6E6F               	movwf	_servo_timer_target,c	;volatile
 19653                           
 19654                           ;sort.c: 596: break;
 19655  003C24  0012               	return	
 19656  003C26                     i2l9964:
 19657                           
 19658                           ;sort.c: 598: updateServoPosition(1050, 3);
 19659  003C26  0E04               	movlw	4
 19660  003C28  6E02               	movwf	i2updateServoPosition@time_us+1,c
 19661  003C2A  0E1A               	movlw	26
 19662  003C2C  6E01               	movwf	i2updateServoPosition@time_us,c
 19663  003C2E  0E00               	movlw	0
 19664  003C30  6E04               	movwf	i2updateServoPosition@timer+1,c
 19665  003C32  0E03               	movlw	3
 19666  003C34  6E03               	movwf	i2updateServoPosition@timer,c
 19667  003C36  ECD9  F027         	call	i2_updateServoPosition	;wreg free
 19668                           
 19669                           ;sort.c: 599: servo_timer_counter = 0;
 19670  003C3A  0E00               	movlw	0
 19671  003C3C  6E6E               	movwf	_servo_timer_counter+1,c	;volatile
 19672  003C3E  0E00               	movlw	0
 19673  003C40  6E6D               	movwf	_servo_timer_counter,c	;volatile
 19674                           
 19675                           ;sort.c: 600: servo_timer_target = 750;
 19676  003C42  0E02               	movlw	2
 19677  003C44  6E70               	movwf	_servo_timer_target+1,c	;volatile
 19678  003C46  0EEE               	movlw	238
 19679  003C48  6E6F               	movwf	_servo_timer_target,c	;volatile
 19680                           
 19681                           ;sort.c: 601: break;
 19682  003C4A  0012               	return	
 19683  003C4C                     i2l9970:
 19684                           
 19685                           ;sort.c: 604: updateServoPosition(1200, 1);
 19686  003C4C  0E04               	movlw	4
 19687  003C4E  6E02               	movwf	i2updateServoPosition@time_us+1,c
 19688  003C50  0EB0               	movlw	176
 19689  003C52  6E01               	movwf	i2updateServoPosition@time_us,c
 19690  003C54  0E00               	movlw	0
 19691  003C56  6E04               	movwf	i2updateServoPosition@timer+1,c
 19692  003C58  0E01               	movlw	1
 19693  003C5A  6E03               	movwf	i2updateServoPosition@timer,c
 19694  003C5C  ECD9  F027         	call	i2_updateServoPosition	;wreg free
 19695                           
 19696                           ;sort.c: 605: updateServoPosition(1050, 3);
 19697  003C60  0E04               	movlw	4
 19698  003C62  6E02               	movwf	i2updateServoPosition@time_us+1,c
 19699  003C64  0E1A               	movlw	26
 19700  003C66  6E01               	movwf	i2updateServoPosition@time_us,c
 19701  003C68  0E00               	movlw	0
 19702  003C6A  6E04               	movwf	i2updateServoPosition@timer+1,c
 19703  003C6C  0E03               	movlw	3
 19704  003C6E  6E03               	movwf	i2updateServoPosition@timer,c
 19705  003C70  ECD9  F027         	call	i2_updateServoPosition	;wreg free
 19706                           
 19707                           ;sort.c: 606: servo_timer_counter = 0;
 19708  003C74  0E00               	movlw	0
 19709  003C76  6E6E               	movwf	_servo_timer_counter+1,c	;volatile
 19710  003C78  0E00               	movlw	0
 19711  003C7A  6E6D               	movwf	_servo_timer_counter,c	;volatile
 19712                           
 19713                           ;sort.c: 607: servo_timer_target = 9999;
 19714  003C7C  0E27               	movlw	39
 19715  003C7E  6E70               	movwf	_servo_timer_target+1,c	;volatile
 19716  003C80  0E0F               	movlw	15
 19717  003C82  6E6F               	movwf	_servo_timer_target,c	;volatile
 19718                           
 19719                           ;sort.c: 609: f_can_distributed = 1;
 19720  003C84  0E00               	movlw	0
 19721  003C86  0101               	movlb	1	; () banked
 19722  003C88  6F3E               	movwf	(_f_can_distributed+1)& (0+255),b
 19723  003C8A  0E01               	movlw	1
 19724  003C8C  6F3D               	movwf	_f_can_distributed& (0+255),b
 19725                           
 19726                           ; BSR set to: 1
 19727                           ;sort.c: 610: if(f_lastCan == 1){
 19728  003C8E  0100               	movlb	0	; () banked
 19729  003C90  05EA               	decf	_f_lastCan& (0+255),w,b
 19730  003C92  0100               	movlb	0	; () banked
 19731  003C94  11EB               	iorwf	(_f_lastCan+1)& (0+255),w,b
 19732  003C96  A4D8               	btfss	status,2,c
 19733  003C98  0012               	return	
 19734                           
 19735                           ; BSR set to: 0
 19736                           ;sort.c: 611: machine_state = DoneSorting_state;
 19737  003C9A  0E02               	movlw	2
 19738  003C9C  0100               	movlb	0	; () banked
 19739  003C9E  6FFC               	movwf	_machine_state& (0+255),b
 19740                           
 19741                           ; BSR set to: 0
 19742                           ;sort.c: 617: }
 19743                           
 19744                           ; BSR set to: 0
 19745                           ;sort.c: 616: break;
 19746                           
 19747                           ;sort.c: 615: default:
 19748                           
 19749                           ; BSR set to: 0
 19750                           ;sort.c: 612: }
 19751                           ;sort.c: 613: break;
 19752  003CA0  0012               	return	
 19753  003CA2                     i2l9984:
 19754  003CA2  C071  F009         	movff	_tilt_servo_state,??_updateServoStates	;volatile
 19755  003CA6  C072  F00A         	movff	_tilt_servo_state+1,??_updateServoStates+1	;volatile
 19756                           
 19757                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
 19758                           ; Switch size 1, requested type "space"
 19759                           ; Number of cases is 2, Range of values is 4 to 5
 19760                           ; switch strategies available:
 19761                           ; Name         Instructions Cycles
 19762                           ; simple_byte            7     4 (average)
 19763                           ;	Chosen strategy is simple_byte
 19764  003CAA  500A               	movf	??_updateServoStates+1,w,c
 19765  003CAC  0A04               	xorlw	4	; case 4
 19766  003CAE  B4D8               	btfsc	status,2,c
 19767  003CB0  D004               	goto	i2l10638
 19768  003CB2  0A01               	xorlw	1	; case 5
 19769  003CB4  A4D8               	btfss	status,2,c
 19770  003CB6  0012               	return	
 19771  003CB8  D008               	goto	i2l10640
 19772  003CBA                     i2l10638:
 19773                           
 19774                           ; Switch size 1, requested type "space"
 19775                           ; Number of cases is 2, Range of values is 26 to 236
 19776                           ; switch strategies available:
 19777                           ; Name         Instructions Cycles
 19778                           ; simple_byte            7     4 (average)
 19779                           ;	Chosen strategy is simple_byte
 19780  003CBA  5009               	movf	??_updateServoStates,w,c
 19781  003CBC  0A1A               	xorlw	26	; case 26
 19782  003CBE  B4D8               	btfsc	status,2,c
 19783  003CC0  D7C5               	goto	i2l9970
 19784  003CC2  0AF6               	xorlw	246	; case 236
 19785  003CC4  A4D8               	btfss	status,2,c
 19786  003CC6  0012               	return	
 19787  003CC8  D79B               	goto	i2l9958
 19788  003CCA                     i2l10640:
 19789                           
 19790                           ; Switch size 1, requested type "space"
 19791                           ; Number of cases is 1, Range of values is 110 to 110
 19792                           ; switch strategies available:
 19793                           ; Name         Instructions Cycles
 19794                           ; simple_byte            4     3 (average)
 19795                           ;	Chosen strategy is simple_byte
 19796  003CCA  5009               	movf	??_updateServoStates,w,c
 19797  003CCC  0A6E               	xorlw	110	; case 110
 19798  003CCE  A4D8               	btfss	status,2,c
 19799  003CD0  0012               	return	
 19800  003CD2  D7A9               	goto	i2l9964
 19801  003CD4                     __end_of_updateServoStates:
 19802                           	opt stack 0
 19803                           pclatu	equ	0xFFB
 19804                           pclath	equ	0xFFA
 19805                           tblptru	equ	0xFF8
 19806                           tblptrh	equ	0xFF7
 19807                           tblptrl	equ	0xFF6
 19808                           tablat	equ	0xFF5
 19809                           prodh	equ	0xFF4
 19810                           prodl	equ	0xFF3
 19811                           intcon	equ	0xFF2
 19812                           intcon2	equ	0xFF1
 19813                           intcon3	equ	0xFF0
 19814                           indf0	equ	0xFEF
 19815                           postinc0	equ	0xFEE
 19816                           fsr0h	equ	0xFEA
 19817                           fsr0l	equ	0xFE9
 19818                           wreg	equ	0xFE8
 19819                           postdec1	equ	0xFE5
 19820                           fsr1h	equ	0xFE2
 19821                           fsr1l	equ	0xFE1
 19822                           indf2	equ	0xFDF
 19823                           postinc2	equ	0xFDE
 19824                           postdec2	equ	0xFDD
 19825                           fsr2h	equ	0xFDA
 19826                           fsr2l	equ	0xFD9
 19827                           status	equ	0xFD8
 19828                           
 19829 ;; *************** function i2_updateServoPosition *****************
 19830 ;; Defined at:
 19831 ;;		line 537 in file "sort.c"
 19832 ;; Parameters:    Size  Location     Type
 19833 ;;  time_us         2    0[COMRAM] int 
 19834 ;;  timer           2    2[COMRAM] int 
 19835 ;; Auto vars:     Size  Location     Type
 19836 ;;  updateServoP    2    6[COMRAM] unsigned int 
 19837 ;; Return value:  Size  Location     Type
 19838 ;;                  1    wreg      void 
 19839 ;; Registers used:
 19840 ;;		wreg, status,2, status,0
 19841 ;; Tracked objects:
 19842 ;;		On entry : 0/0
 19843 ;;		On exit  : 0/0
 19844 ;;		Unchanged: 0/0
 19845 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19846 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19847 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19848 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19849 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19850 ;;Total ram usage:        8 bytes
 19851 ;; Hardware stack levels used:    1
 19852 ;; This function calls:
 19853 ;;		Nothing
 19854 ;; This function is called by:
 19855 ;;		_updateServoStates
 19856 ;; This function uses a non-reentrant model
 19857 ;;
 19858                           
 19859                           	psect	text66
 19860  004FB2                     __ptext66:
 19861                           	opt stack 0
 19862  004FB2                     i2_updateServoPosition:
 19863                           	opt stack 22
 19864                           
 19865                           ;sort.c: 538: unsigned int my_time = 65535 - time_us;
 19866                           
 19867                           ;incstack = 0
 19868  004FB2  C001  F005         	movff	i2updateServoPosition@time_us,??i2_updateServoPosition
 19869  004FB6  C002  F006         	movff	i2updateServoPosition@time_us+1,??i2_updateServoPosition+1
 19870  004FBA  1E05               	comf	??i2_updateServoPosition,f,c
 19871  004FBC  1E06               	comf	??i2_updateServoPosition+1,f,c
 19872  004FBE  4A05               	infsnz	??i2_updateServoPosition,f,c
 19873  004FC0  2A06               	incf	??i2_updateServoPosition+1,f,c
 19874  004FC2  0EFF               	movlw	255
 19875  004FC4  2405               	addwf	??i2_updateServoPosition,w,c
 19876  004FC6  6E07               	movwf	i2updateServoPosition@my_time,c
 19877  004FC8  0EFF               	movlw	255
 19878  004FCA  2006               	addwfc	??i2_updateServoPosition+1,w,c
 19879  004FCC  6E08               	movwf	i2updateServoPosition@my_time+1,c
 19880                           
 19881                           ;sort.c: 539: switch(timer){
 19882  004FCE  D019               	goto	i2l9142
 19883  004FD0                     i2l9136:
 19884                           
 19885                           ;sort.c: 541: servoTimes[0] = my_time >> 8;
 19886  004FD0  5008               	movf	i2updateServoPosition@my_time+1,w,c
 19887  004FD2  0101               	movlb	1	; () banked
 19888  004FD4  6F1C               	movwf	_servoTimes& (0+255),b
 19889  004FD6  6B1D               	clrf	(_servoTimes+1)& (0+255),b
 19890                           
 19891                           ;sort.c: 542: servoTimes[1] = my_time & 0xFF;
 19892  004FD8  5007               	movf	i2updateServoPosition@my_time,w,c
 19893  004FDA  0101               	movlb	1	; () banked
 19894  004FDC  6F1E               	movwf	(_servoTimes+2)& (0+255),b
 19895  004FDE  6B1F               	clrf	(_servoTimes+3)& (0+255),b
 19896                           
 19897                           ; BSR set to: 1
 19898                           ;sort.c: 544: pan_servo_state = time_us;
 19899  004FE0  C001  F06B         	movff	i2updateServoPosition@time_us,_pan_servo_state	;volatile
 19900  004FE4  C002  F06C         	movff	i2updateServoPosition@time_us+1,_pan_servo_state+1	;volatile
 19901  004FE8                     i2l915:
 19902                           
 19903                           ;sort.c: 546: servoTimes[2] = my_time >> 8;
 19904  004FE8  5008               	movf	i2updateServoPosition@my_time+1,w,c
 19905  004FEA  0101               	movlb	1	; () banked
 19906  004FEC  6F20               	movwf	(_servoTimes+4)& (0+255),b
 19907  004FEE  6B21               	clrf	(_servoTimes+5)& (0+255),b
 19908                           
 19909                           ;sort.c: 547: servoTimes[3] = my_time & 0xFF;
 19910  004FF0  5007               	movf	i2updateServoPosition@my_time,w,c
 19911  004FF2  0101               	movlb	1	; () banked
 19912  004FF4  6F22               	movwf	(_servoTimes+6)& (0+255),b
 19913  004FF6  6B23               	clrf	(_servoTimes+7)& (0+255),b
 19914                           
 19915                           ; BSR set to: 1
 19916                           ;sort.c: 549: tilt_servo_state = time_us;
 19917  004FF8  C001  F071         	movff	i2updateServoPosition@time_us,_tilt_servo_state	;volatile
 19918  004FFC  C002  F072         	movff	i2updateServoPosition@time_us+1,_tilt_servo_state+1	;volatile
 19919                           
 19920                           ;sort.c: 550: }
 19921  005000  0012               	return	
 19922  005002                     i2l9142:
 19923  005002  C003  F005         	movff	i2updateServoPosition@timer,??i2_updateServoPosition
 19924  005006  C004  F006         	movff	i2updateServoPosition@timer+1,??i2_updateServoPosition+1
 19925                           
 19926                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 19927                           ; Switch size 1, requested type "space"
 19928                           ; Number of cases is 1, Range of values is 0 to 0
 19929                           ; switch strategies available:
 19930                           ; Name         Instructions Cycles
 19931                           ; simple_byte            4     3 (average)
 19932                           ;	Chosen strategy is simple_byte
 19933  00500A  5006               	movf	??i2_updateServoPosition+1,w,c
 19934  00500C  0A00               	xorlw	0	; case 0
 19935  00500E  A4D8               	btfss	status,2,c
 19936  005010  0012               	return	
 19937                           
 19938                           ; Switch size 1, requested type "space"
 19939                           ; Number of cases is 2, Range of values is 1 to 3
 19940                           ; switch strategies available:
 19941                           ; Name         Instructions Cycles
 19942                           ; simple_byte            7     4 (average)
 19943                           ;	Chosen strategy is simple_byte
 19944  005012  5005               	movf	??i2_updateServoPosition,w,c
 19945  005014  0A01               	xorlw	1	; case 1
 19946  005016  B4D8               	btfsc	status,2,c
 19947  005018  D7DB               	goto	i2l9136
 19948  00501A  0A02               	xorlw	2	; case 3
 19949  00501C  A4D8               	btfss	status,2,c
 19950  00501E  0012               	return	
 19951  005020  D7E3               	goto	i2l915
 19952  005022                     __end_ofi2_updateServoPosition:
 19953                           	opt stack 0
 19954                           pclatu	equ	0xFFB
 19955                           pclath	equ	0xFFA
 19956                           tblptru	equ	0xFF8
 19957                           tblptrh	equ	0xFF7
 19958                           tblptrl	equ	0xFF6
 19959                           tablat	equ	0xFF5
 19960                           prodh	equ	0xFF4
 19961                           prodl	equ	0xFF3
 19962                           intcon	equ	0xFF2
 19963                           intcon2	equ	0xFF1
 19964                           intcon3	equ	0xFF0
 19965                           indf0	equ	0xFEF
 19966                           postinc0	equ	0xFEE
 19967                           fsr0h	equ	0xFEA
 19968                           fsr0l	equ	0xFE9
 19969                           wreg	equ	0xFE8
 19970                           postdec1	equ	0xFE5
 19971                           fsr1h	equ	0xFE2
 19972                           fsr1l	equ	0xFE1
 19973                           indf2	equ	0xFDF
 19974                           postinc2	equ	0xFDE
 19975                           postdec2	equ	0xFDD
 19976                           fsr2h	equ	0xFDA
 19977                           fsr2l	equ	0xFD9
 19978                           status	equ	0xFD8
 19979                           
 19980 ;; *************** function _updateMenu *****************
 19981 ;; Defined at:
 19982 ;;		line 216 in file "UI.c"
 19983 ;; Parameters:    Size  Location     Type
 19984 ;;		None
 19985 ;; Auto vars:     Size  Location     Type
 19986 ;;		None
 19987 ;; Return value:  Size  Location     Type
 19988 ;;                  1    wreg      void 
 19989 ;; Registers used:
 19990 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19991 ;; Tracked objects:
 19992 ;;		On entry : 0/0
 19993 ;;		On exit  : 0/0
 19994 ;;		Unchanged: 0/0
 19995 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19996 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19997 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19998 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19999 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20000 ;;Total ram usage:        2 bytes
 20001 ;; Hardware stack levels used:    1
 20002 ;; Hardware stack levels required when called:    5
 20003 ;; This function calls:
 20004 ;;		_change_state_to_logs_11
 20005 ;;		_change_state_to_logs_12
 20006 ;;		_change_state_to_logs_22
 20007 ;;		_change_state_to_logs_23
 20008 ;;		_change_state_to_logs_33
 20009 ;;		_change_state_to_logs_34
 20010 ;;		_change_state_to_menu_11
 20011 ;;		_change_state_to_menu_23
 20012 ;;		_dispLogs
 20013 ;;		_inputHandler
 20014 ;;		i2_change_state_to_menu_12
 20015 ;;		i2_change_state_to_menu_22
 20016 ;;		i2_change_state_to_menu_start
 20017 ;; This function is called by:
 20018 ;;		_handler
 20019 ;; This function uses a non-reentrant model
 20020 ;;
 20021                           
 20022                           	psect	text67
 20023  002F90                     __ptext67:
 20024                           	opt stack 0
 20025  002F90                     _updateMenu:
 20026                           	opt stack 18
 20027                           
 20028                           ;UI.c: 217: up = 0; down = 0; enter = 0; back = 0;
 20029                           
 20030                           ;incstack = 0
 20031  002F90  0E00               	movlw	0
 20032  002F92  6E76               	movwf	_up+1,c
 20033  002F94  0E00               	movlw	0
 20034  002F96  6E75               	movwf	_up,c
 20035  002F98  0E00               	movlw	0
 20036  002F9A  6E5E               	movwf	_down+1,c
 20037  002F9C  0E00               	movlw	0
 20038  002F9E  6E5D               	movwf	_down,c
 20039  002FA0  0E00               	movlw	0
 20040  002FA2  6E60               	movwf	_enter+1,c
 20041  002FA4  0E00               	movlw	0
 20042  002FA6  6E5F               	movwf	_enter,c
 20043  002FA8  0E00               	movlw	0
 20044  002FAA  6E5C               	movwf	_back+1,c
 20045  002FAC  0E00               	movlw	0
 20046  002FAE  6E5B               	movwf	_back,c
 20047                           
 20048                           ;UI.c: 218: (INTCONbits.GIE = 0);
 20049  002FB0  9EF2               	bcf	intcon,7,c	;volatile
 20050                           
 20051                           ;UI.c: 220: if (inputHandler()
 20052                           ;UI.c: 223: ){
 20053  002FB2  EC90  F01C         	call	_inputHandler	;wreg free
 20054  002FB6  502A               	movf	?_inputHandler,w,c
 20055  002FB8  102B               	iorwf	?_inputHandler+1,w,c
 20056  002FBA  A4D8               	btfss	status,2,c
 20057  002FBC  D112               	goto	i2l9676
 20058  002FBE  D146               	goto	i2l268
 20059  002FC0                     i2l9528:
 20060                           
 20061                           ;UI.c: 227: change_state_to_menu_11();
 20062  002FC0  ECA8  F02B         	call	_change_state_to_menu_11	;wreg free
 20063                           
 20064                           ;UI.c: 228: break;
 20065  002FC4  D143               	goto	i2l268
 20066  002FC6                     i2l9530:
 20067                           
 20068                           ;UI.c: 231: if(up){
 20069  002FC6  5075               	movf	_up,w,c
 20070  002FC8  1076               	iorwf	_up+1,w,c
 20071  002FCA  B4D8               	btfsc	status,2,c
 20072  002FCC  D003               	goto	i2l9534
 20073                           
 20074                           ;UI.c: 232: change_state_to_menu_23();
 20075  002FCE  EC90  F02B         	call	_change_state_to_menu_23	;wreg free
 20076                           
 20077                           ;UI.c: 233: }
 20078  002FD2  D13C               	goto	i2l268
 20079  002FD4                     i2l9534:
 20080                           
 20081                           ;UI.c: 234: else if(down){
 20082  002FD4  505D               	movf	_down,w,c
 20083  002FD6  105E               	iorwf	_down+1,w,c
 20084  002FD8  B4D8               	btfsc	status,2,c
 20085  002FDA  D003               	goto	i2l9538
 20086                           
 20087                           ;UI.c: 235: change_state_to_menu_12();
 20088  002FDC  EC78  F02B         	call	i2_change_state_to_menu_12	;wreg free
 20089                           
 20090                           ;UI.c: 236: }
 20091  002FE0  D135               	goto	i2l268
 20092  002FE2                     i2l9538:
 20093                           
 20094                           ;UI.c: 237: else if(enter){
 20095  002FE2  505F               	movf	_enter,w,c
 20096  002FE4  1060               	iorwf	_enter+1,w,c
 20097  002FE6  B4D8               	btfsc	status,2,c
 20098  002FE8  D131               	goto	i2l268
 20099                           
 20100                           ;UI.c: 238: change_state_to_menu_start();
 20101  002FEA  ECBB  F02C         	call	i2_change_state_to_menu_start	;wreg free
 20102                           
 20103                           ;UI.c: 239: }
 20104                           ;UI.c: 240: break;
 20105  002FEE  D12E               	goto	i2l268
 20106  002FF0                     i2l9542:
 20107                           
 20108                           ;UI.c: 243: if(up){
 20109  002FF0  5075               	movf	_up,w,c
 20110  002FF2  1076               	iorwf	_up+1,w,c
 20111  002FF4  B4D8               	btfsc	status,2,c
 20112  002FF6  D003               	goto	i2l9546
 20113                           
 20114                           ;UI.c: 244: change_state_to_menu_11();
 20115  002FF8  ECA8  F02B         	call	_change_state_to_menu_11	;wreg free
 20116                           
 20117                           ;UI.c: 245: }
 20118  002FFC  D127               	goto	i2l268
 20119  002FFE                     i2l9546:
 20120                           
 20121                           ;UI.c: 246: else if(down){
 20122  002FFE  505D               	movf	_down,w,c
 20123  003000  105E               	iorwf	_down+1,w,c
 20124  003002  B4D8               	btfsc	status,2,c
 20125  003004  D011               	goto	i2l9562
 20126                           
 20127                           ;UI.c: 247: change_state_to_menu_23();
 20128  003006  EC90  F02B         	call	_change_state_to_menu_23	;wreg free
 20129                           
 20130                           ;UI.c: 248: }
 20131  00300A  D120               	goto	i2l268
 20132  00300C                     i2l9554:
 20133                           
 20134                           ;UI.c: 255: if(up){
 20135  00300C  5075               	movf	_up,w,c
 20136  00300E  1076               	iorwf	_up+1,w,c
 20137  003010  B4D8               	btfsc	status,2,c
 20138  003012  D003               	goto	i2l9558
 20139                           
 20140                           ;UI.c: 256: change_state_to_menu_11();
 20141  003014  ECA8  F02B         	call	_change_state_to_menu_11	;wreg free
 20142                           
 20143                           ;UI.c: 257: }
 20144  003018  D119               	goto	i2l268
 20145  00301A                     i2l9558:
 20146                           
 20147                           ;UI.c: 258: else if(down){
 20148  00301A  505D               	movf	_down,w,c
 20149  00301C  105E               	iorwf	_down+1,w,c
 20150  00301E  B4D8               	btfsc	status,2,c
 20151  003020  D003               	goto	i2l9562
 20152                           
 20153                           ;UI.c: 259: change_state_to_menu_23();
 20154  003022  EC90  F02B         	call	_change_state_to_menu_23	;wreg free
 20155                           
 20156                           ;UI.c: 260: }
 20157  003026  D112               	goto	i2l268
 20158  003028                     i2l9562:
 20159                           
 20160                           ;UI.c: 261: else if(enter){
 20161  003028  505F               	movf	_enter,w,c
 20162  00302A  1060               	iorwf	_enter+1,w,c
 20163  00302C  B4D8               	btfsc	status,2,c
 20164  00302E  D10E               	goto	i2l268
 20165                           
 20166                           ;UI.c: 262: machine_state = Sorting_state;
 20167  003030  0E01               	movlw	1
 20168  003032  0100               	movlb	0	; () banked
 20169  003034  6FFC               	movwf	_machine_state& (0+255),b
 20170                           
 20171                           ; BSR set to: 0
 20172                           ;UI.c: 263: }
 20173                           ;UI.c: 264: break;
 20174                           
 20175                           ; BSR set to: 0
 20176                           
 20177                           ; BSR set to: 0
 20178  003036  D10A               	goto	i2l268
 20179  003038                     i2l9566:
 20180                           
 20181                           ;UI.c: 267: if(up){
 20182  003038  5075               	movf	_up,w,c
 20183  00303A  1076               	iorwf	_up+1,w,c
 20184  00303C  B4D8               	btfsc	status,2,c
 20185  00303E  D003               	goto	i2l9570
 20186                           
 20187                           ;UI.c: 268: change_state_to_menu_22();
 20188  003040  EC60  F02B         	call	i2_change_state_to_menu_22	;wreg free
 20189                           
 20190                           ;UI.c: 269: }
 20191  003044  D103               	goto	i2l268
 20192  003046                     i2l9570:
 20193                           
 20194                           ;UI.c: 270: else if(down){
 20195  003046  505D               	movf	_down,w,c
 20196  003048  105E               	iorwf	_down+1,w,c
 20197  00304A  B4D8               	btfsc	status,2,c
 20198  00304C  D003               	goto	i2l9574
 20199                           
 20200                           ;UI.c: 271: change_state_to_menu_11();
 20201  00304E  ECA8  F02B         	call	_change_state_to_menu_11	;wreg free
 20202                           
 20203                           ;UI.c: 272: }
 20204  003052  D0FC               	goto	i2l268
 20205  003054                     i2l9574:
 20206                           
 20207                           ;UI.c: 273: else if(enter){
 20208  003054  505F               	movf	_enter,w,c
 20209  003056  1060               	iorwf	_enter+1,w,c
 20210  003058  B4D8               	btfsc	status,2,c
 20211  00305A  D0F8               	goto	i2l268
 20212                           
 20213                           ;UI.c: 274: change_state_to_logs_11();
 20214  00305C  EC20  F02C         	call	_change_state_to_logs_11	;wreg free
 20215                           
 20216                           ;UI.c: 275: }
 20217                           ;UI.c: 276: break;
 20218  003060  D0F5               	goto	i2l268
 20219  003062                     i2l9578:
 20220                           
 20221                           ;UI.c: 279: if(up){
 20222  003062  5075               	movf	_up,w,c
 20223  003064  1076               	iorwf	_up+1,w,c
 20224  003066  B4D8               	btfsc	status,2,c
 20225  003068  D003               	goto	i2l9582
 20226                           
 20227                           ;UI.c: 280: change_state_to_logs_34();
 20228  00306A  ECC0  F02B         	call	_change_state_to_logs_34	;wreg free
 20229                           
 20230                           ;UI.c: 281: }
 20231  00306E  D0EE               	goto	i2l268
 20232  003070                     i2l9582:
 20233                           
 20234                           ;UI.c: 282: else if(down){
 20235  003070  505D               	movf	_down,w,c
 20236  003072  105E               	iorwf	_down+1,w,c
 20237  003074  B4D8               	btfsc	status,2,c
 20238  003076  D003               	goto	i2l9586
 20239                           
 20240                           ;UI.c: 283: change_state_to_logs_12();
 20241  003078  EC08  F02C         	call	_change_state_to_logs_12	;wreg free
 20242                           
 20243                           ;UI.c: 284: }
 20244  00307C  D0E7               	goto	i2l268
 20245  00307E                     i2l9586:
 20246                           
 20247                           ;UI.c: 285: else if(enter){
 20248  00307E  505F               	movf	_enter,w,c
 20249  003080  1060               	iorwf	_enter+1,w,c
 20250  003082  B4D8               	btfsc	status,2,c
 20251  003084  D007               	goto	i2l9590
 20252                           
 20253                           ;UI.c: 286: dispLogs(1);
 20254  003086  0E00               	movlw	0
 20255  003088  6E13               	movwf	dispLogs@myLog+1,c
 20256  00308A  0E01               	movlw	1
 20257  00308C  6E12               	movwf	dispLogs@myLog,c
 20258  00308E  ECF5  F02C         	call	_dispLogs	;wreg free
 20259                           
 20260                           ;UI.c: 287: }
 20261  003092  D0DC               	goto	i2l268
 20262  003094                     i2l9590:
 20263                           
 20264                           ;UI.c: 288: else if(back){
 20265  003094  505B               	movf	_back,w,c
 20266  003096  105C               	iorwf	_back+1,w,c
 20267  003098  B4D8               	btfsc	status,2,c
 20268  00309A  D0D8               	goto	i2l268
 20269                           
 20270                           ;UI.c: 289: change_state_to_menu_23();
 20271  00309C  EC90  F02B         	call	_change_state_to_menu_23	;wreg free
 20272                           
 20273                           ;UI.c: 290: }
 20274                           ;UI.c: 291: break;
 20275  0030A0  D0D5               	goto	i2l268
 20276  0030A2                     i2l9594:
 20277                           
 20278                           ;UI.c: 294: if(up){
 20279  0030A2  5075               	movf	_up,w,c
 20280  0030A4  1076               	iorwf	_up+1,w,c
 20281  0030A6  B4D8               	btfsc	status,2,c
 20282  0030A8  D003               	goto	i2l9598
 20283                           
 20284                           ;UI.c: 295: change_state_to_logs_11();
 20285  0030AA  EC20  F02C         	call	_change_state_to_logs_11	;wreg free
 20286                           
 20287                           ;UI.c: 296: }
 20288  0030AE  D0CE               	goto	i2l268
 20289  0030B0                     i2l9598:
 20290                           
 20291                           ;UI.c: 297: else if(down){
 20292  0030B0  505D               	movf	_down,w,c
 20293  0030B2  105E               	iorwf	_down+1,w,c
 20294  0030B4  B4D8               	btfsc	status,2,c
 20295  0030B6  D003               	goto	i2l9602
 20296                           
 20297                           ;UI.c: 298: change_state_to_logs_23();
 20298  0030B8  EC4F  F02C         	call	_change_state_to_logs_23	;wreg free
 20299                           
 20300                           ;UI.c: 299: }
 20301  0030BC  D0C7               	goto	i2l268
 20302  0030BE                     i2l9602:
 20303                           
 20304                           ;UI.c: 300: else if(enter){
 20305  0030BE  505F               	movf	_enter,w,c
 20306  0030C0  1060               	iorwf	_enter+1,w,c
 20307  0030C2  B4D8               	btfsc	status,2,c
 20308  0030C4  D007               	goto	i2l9606
 20309                           
 20310                           ;UI.c: 301: dispLogs(2);
 20311  0030C6  0E00               	movlw	0
 20312  0030C8  6E13               	movwf	dispLogs@myLog+1,c
 20313  0030CA  0E02               	movlw	2
 20314  0030CC  6E12               	movwf	dispLogs@myLog,c
 20315  0030CE  ECF5  F02C         	call	_dispLogs	;wreg free
 20316                           
 20317                           ;UI.c: 302: }
 20318  0030D2  D0BC               	goto	i2l268
 20319  0030D4                     i2l9606:
 20320                           
 20321                           ;UI.c: 303: else if(back){
 20322  0030D4  505B               	movf	_back,w,c
 20323  0030D6  105C               	iorwf	_back+1,w,c
 20324  0030D8  B4D8               	btfsc	status,2,c
 20325  0030DA  D0B8               	goto	i2l268
 20326                           
 20327                           ;UI.c: 304: change_state_to_menu_23();
 20328  0030DC  EC90  F02B         	call	_change_state_to_menu_23	;wreg free
 20329                           
 20330                           ;UI.c: 305: }
 20331                           ;UI.c: 306: break;
 20332  0030E0  D0B5               	goto	i2l268
 20333  0030E2                     i2l9610:
 20334                           
 20335                           ;UI.c: 309: if(up){
 20336  0030E2  5075               	movf	_up,w,c
 20337  0030E4  1076               	iorwf	_up+1,w,c
 20338  0030E6  B4D8               	btfsc	status,2,c
 20339  0030E8  D003               	goto	i2l9614
 20340                           
 20341                           ;UI.c: 310: change_state_to_logs_11();
 20342  0030EA  EC20  F02C         	call	_change_state_to_logs_11	;wreg free
 20343                           
 20344                           ;UI.c: 311: }
 20345  0030EE  D0AE               	goto	i2l268
 20346  0030F0                     i2l9614:
 20347                           
 20348                           ;UI.c: 312: else if(down){
 20349  0030F0  505D               	movf	_down,w,c
 20350  0030F2  105E               	iorwf	_down+1,w,c
 20351  0030F4  B4D8               	btfsc	status,2,c
 20352  0030F6  D003               	goto	i2l9618
 20353                           
 20354                           ;UI.c: 313: change_state_to_logs_23();
 20355  0030F8  EC4F  F02C         	call	_change_state_to_logs_23	;wreg free
 20356                           
 20357                           ;UI.c: 314: }
 20358  0030FC  D0A7               	goto	i2l268
 20359  0030FE                     i2l9618:
 20360                           
 20361                           ;UI.c: 315: else if(enter){
 20362  0030FE  505F               	movf	_enter,w,c
 20363  003100  1060               	iorwf	_enter+1,w,c
 20364  003102  B4D8               	btfsc	status,2,c
 20365  003104  D007               	goto	i2l9622
 20366                           
 20367                           ;UI.c: 316: dispLogs(2);
 20368  003106  0E00               	movlw	0
 20369  003108  6E13               	movwf	dispLogs@myLog+1,c
 20370  00310A  0E02               	movlw	2
 20371  00310C  6E12               	movwf	dispLogs@myLog,c
 20372  00310E  ECF5  F02C         	call	_dispLogs	;wreg free
 20373                           
 20374                           ;UI.c: 317: }
 20375  003112  D09C               	goto	i2l268
 20376  003114                     i2l9622:
 20377                           
 20378                           ;UI.c: 318: else if(back){
 20379  003114  505B               	movf	_back,w,c
 20380  003116  105C               	iorwf	_back+1,w,c
 20381  003118  B4D8               	btfsc	status,2,c
 20382  00311A  D098               	goto	i2l268
 20383                           
 20384                           ;UI.c: 319: change_state_to_menu_23();
 20385  00311C  EC90  F02B         	call	_change_state_to_menu_23	;wreg free
 20386                           
 20387                           ;UI.c: 320: }
 20388                           ;UI.c: 321: break;
 20389  003120  D095               	goto	i2l268
 20390  003122                     i2l9626:
 20391                           
 20392                           ;UI.c: 324: if(up){
 20393  003122  5075               	movf	_up,w,c
 20394  003124  1076               	iorwf	_up+1,w,c
 20395  003126  B4D8               	btfsc	status,2,c
 20396  003128  D003               	goto	i2l9630
 20397                           
 20398                           ;UI.c: 325: change_state_to_logs_22();
 20399  00312A  ECF0  F02B         	call	_change_state_to_logs_22	;wreg free
 20400                           
 20401                           ;UI.c: 326: }
 20402  00312E  D08E               	goto	i2l268
 20403  003130                     i2l9630:
 20404                           
 20405                           ;UI.c: 327: else if(down){
 20406  003130  505D               	movf	_down,w,c
 20407  003132  105E               	iorwf	_down+1,w,c
 20408  003134  B4D8               	btfsc	status,2,c
 20409  003136  D003               	goto	i2l9634
 20410                           
 20411                           ;UI.c: 328: change_state_to_logs_34();
 20412  003138  ECC0  F02B         	call	_change_state_to_logs_34	;wreg free
 20413                           
 20414                           ;UI.c: 329: }
 20415  00313C  D087               	goto	i2l268
 20416  00313E                     i2l9634:
 20417                           
 20418                           ;UI.c: 330: else if(enter){
 20419  00313E  505F               	movf	_enter,w,c
 20420  003140  1060               	iorwf	_enter+1,w,c
 20421  003142  B4D8               	btfsc	status,2,c
 20422  003144  D007               	goto	i2l9638
 20423                           
 20424                           ;UI.c: 331: dispLogs(3);
 20425  003146  0E00               	movlw	0
 20426  003148  6E13               	movwf	dispLogs@myLog+1,c
 20427  00314A  0E03               	movlw	3
 20428  00314C  6E12               	movwf	dispLogs@myLog,c
 20429  00314E  ECF5  F02C         	call	_dispLogs	;wreg free
 20430                           
 20431                           ;UI.c: 332: }
 20432  003152  D07C               	goto	i2l268
 20433  003154                     i2l9638:
 20434                           
 20435                           ;UI.c: 333: else if(back){
 20436  003154  505B               	movf	_back,w,c
 20437  003156  105C               	iorwf	_back+1,w,c
 20438  003158  B4D8               	btfsc	status,2,c
 20439  00315A  D078               	goto	i2l268
 20440                           
 20441                           ;UI.c: 334: change_state_to_menu_23();
 20442  00315C  EC90  F02B         	call	_change_state_to_menu_23	;wreg free
 20443                           
 20444                           ;UI.c: 335: }
 20445                           ;UI.c: 336: break;
 20446  003160  D075               	goto	i2l268
 20447  003162                     i2l9642:
 20448                           
 20449                           ;UI.c: 339: if(up){
 20450  003162  5075               	movf	_up,w,c
 20451  003164  1076               	iorwf	_up+1,w,c
 20452  003166  B4D8               	btfsc	status,2,c
 20453  003168  D003               	goto	i2l9646
 20454                           
 20455                           ;UI.c: 340: change_state_to_logs_22();
 20456  00316A  ECF0  F02B         	call	_change_state_to_logs_22	;wreg free
 20457                           
 20458                           ;UI.c: 341: }
 20459  00316E  D06E               	goto	i2l268
 20460  003170                     i2l9646:
 20461                           
 20462                           ;UI.c: 342: else if(down){
 20463  003170  505D               	movf	_down,w,c
 20464  003172  105E               	iorwf	_down+1,w,c
 20465  003174  B4D8               	btfsc	status,2,c
 20466  003176  D003               	goto	i2l9650
 20467                           
 20468                           ;UI.c: 343: change_state_to_logs_34();
 20469  003178  ECC0  F02B         	call	_change_state_to_logs_34	;wreg free
 20470                           
 20471                           ;UI.c: 344: }
 20472  00317C  D067               	goto	i2l268
 20473  00317E                     i2l9650:
 20474                           
 20475                           ;UI.c: 345: else if(enter){
 20476  00317E  505F               	movf	_enter,w,c
 20477  003180  1060               	iorwf	_enter+1,w,c
 20478  003182  B4D8               	btfsc	status,2,c
 20479  003184  D007               	goto	i2l9654
 20480                           
 20481                           ;UI.c: 346: dispLogs(3);
 20482  003186  0E00               	movlw	0
 20483  003188  6E13               	movwf	dispLogs@myLog+1,c
 20484  00318A  0E03               	movlw	3
 20485  00318C  6E12               	movwf	dispLogs@myLog,c
 20486  00318E  ECF5  F02C         	call	_dispLogs	;wreg free
 20487                           
 20488                           ;UI.c: 347: }
 20489  003192  D05C               	goto	i2l268
 20490  003194                     i2l9654:
 20491                           
 20492                           ;UI.c: 348: else if(back){
 20493  003194  505B               	movf	_back,w,c
 20494  003196  105C               	iorwf	_back+1,w,c
 20495  003198  B4D8               	btfsc	status,2,c
 20496  00319A  D058               	goto	i2l268
 20497                           
 20498                           ;UI.c: 349: change_state_to_menu_23();
 20499  00319C  EC90  F02B         	call	_change_state_to_menu_23	;wreg free
 20500                           
 20501                           ;UI.c: 350: }
 20502                           ;UI.c: 351: break;
 20503  0031A0  D055               	goto	i2l268
 20504  0031A2                     i2l9658:
 20505                           
 20506                           ;UI.c: 354: if(up){
 20507  0031A2  5075               	movf	_up,w,c
 20508  0031A4  1076               	iorwf	_up+1,w,c
 20509  0031A6  B4D8               	btfsc	status,2,c
 20510  0031A8  D003               	goto	i2l9662
 20511                           
 20512                           ;UI.c: 355: change_state_to_logs_33();
 20513  0031AA  ECD8  F02B         	call	_change_state_to_logs_33	;wreg free
 20514                           
 20515                           ;UI.c: 356: }
 20516  0031AE  D04E               	goto	i2l268
 20517  0031B0                     i2l9662:
 20518                           
 20519                           ;UI.c: 357: else if(down){
 20520  0031B0  505D               	movf	_down,w,c
 20521  0031B2  105E               	iorwf	_down+1,w,c
 20522  0031B4  B4D8               	btfsc	status,2,c
 20523  0031B6  D003               	goto	i2l9666
 20524                           
 20525                           ;UI.c: 358: change_state_to_logs_11();
 20526  0031B8  EC20  F02C         	call	_change_state_to_logs_11	;wreg free
 20527                           
 20528                           ;UI.c: 359: }
 20529  0031BC  D047               	goto	i2l268
 20530  0031BE                     i2l9666:
 20531                           
 20532                           ;UI.c: 360: else if(enter){
 20533  0031BE  505F               	movf	_enter,w,c
 20534  0031C0  1060               	iorwf	_enter+1,w,c
 20535  0031C2  B4D8               	btfsc	status,2,c
 20536  0031C4  D007               	goto	i2l9670
 20537                           
 20538                           ;UI.c: 361: dispLogs(4);
 20539  0031C6  0E00               	movlw	0
 20540  0031C8  6E13               	movwf	dispLogs@myLog+1,c
 20541  0031CA  0E04               	movlw	4
 20542  0031CC  6E12               	movwf	dispLogs@myLog,c
 20543  0031CE  ECF5  F02C         	call	_dispLogs	;wreg free
 20544                           
 20545                           ;UI.c: 362: }
 20546  0031D2  D03C               	goto	i2l268
 20547  0031D4                     i2l9670:
 20548                           
 20549                           ;UI.c: 363: else if(back){
 20550  0031D4  505B               	movf	_back,w,c
 20551  0031D6  105C               	iorwf	_back+1,w,c
 20552  0031D8  B4D8               	btfsc	status,2,c
 20553  0031DA  D038               	goto	i2l268
 20554                           
 20555                           ;UI.c: 364: change_state_to_menu_23();
 20556  0031DC  EC90  F02B         	call	_change_state_to_menu_23	;wreg free
 20557                           
 20558                           ;UI.c: 370: }
 20559                           
 20560                           ;UI.c: 369: break;
 20561                           
 20562                           ;UI.c: 368: default:
 20563                           
 20564                           ;UI.c: 365: }
 20565                           ;UI.c: 366: break;
 20566  0031E0  D035               	goto	i2l268
 20567  0031E2                     i2l9676:
 20568  0031E2  C0E6  F043         	movff	_cur_state,??_updateMenu
 20569  0031E6  C0E7  F044         	movff	_cur_state+1,??_updateMenu+1
 20570                           
 20571                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 3 sub-sw
      +                          itches
 20572                           ; Switch size 1, requested type "space"
 20573                           ; Number of cases is 3, Range of values is 0 to 4
 20574                           ; switch strategies available:
 20575                           ; Name         Instructions Cycles
 20576                           ; simple_byte           10     6 (average)
 20577                           ;	Chosen strategy is simple_byte
 20578  0031EA  5044               	movf	??_updateMenu+1,w,c
 20579  0031EC  0A00               	xorlw	0	; case 0
 20580  0031EE  B4D8               	btfsc	status,2,c
 20581  0031F0  D007               	goto	i2l10644
 20582  0031F2  0A03               	xorlw	3	; case 3
 20583  0031F4  B4D8               	btfsc	status,2,c
 20584  0031F6  D015               	goto	i2l10646
 20585  0031F8  0A07               	xorlw	7	; case 4
 20586  0031FA  B4D8               	btfsc	status,2,c
 20587  0031FC  D020               	goto	i2l10648
 20588  0031FE  D026               	goto	i2l268
 20589  003200                     i2l10644:
 20590                           
 20591                           ; Switch size 1, requested type "space"
 20592                           ; Number of cases is 5, Range of values is 0 to 23
 20593                           ; switch strategies available:
 20594                           ; Name         Instructions Cycles
 20595                           ; simple_byte           16     9 (average)
 20596                           ;	Chosen strategy is simple_byte
 20597  003200  5043               	movf	??_updateMenu,w,c
 20598  003202  0A00               	xorlw	0	; case 0
 20599  003204  B4D8               	btfsc	status,2,c
 20600  003206  D6DC               	goto	i2l9528
 20601  003208  0A0B               	xorlw	11	; case 11
 20602  00320A  B4D8               	btfsc	status,2,c
 20603  00320C  D6DC               	goto	i2l9530
 20604  00320E  0A07               	xorlw	7	; case 12
 20605  003210  B4D8               	btfsc	status,2,c
 20606  003212  D6EE               	goto	i2l9542
 20607  003214  0A1A               	xorlw	26	; case 22
 20608  003216  B4D8               	btfsc	status,2,c
 20609  003218  D6F9               	goto	i2l9554
 20610  00321A  0A01               	xorlw	1	; case 23
 20611  00321C  B4D8               	btfsc	status,2,c
 20612  00321E  D70C               	goto	i2l9566
 20613  003220  D015               	goto	i2l268
 20614  003222                     i2l10646:
 20615                           
 20616                           ; Switch size 1, requested type "space"
 20617                           ; Number of cases is 4, Range of values is 243 to 255
 20618                           ; switch strategies available:
 20619                           ; Name         Instructions Cycles
 20620                           ; simple_byte           13     7 (average)
 20621                           ;	Chosen strategy is simple_byte
 20622  003222  5043               	movf	??_updateMenu,w,c
 20623  003224  0AF3               	xorlw	243	; case 243
 20624  003226  B4D8               	btfsc	status,2,c
 20625  003228  D71C               	goto	i2l9578
 20626  00322A  0A07               	xorlw	7	; case 244
 20627  00322C  B4D8               	btfsc	status,2,c
 20628  00322E  D739               	goto	i2l9594
 20629  003230  0A0A               	xorlw	10	; case 254
 20630  003232  B4D8               	btfsc	status,2,c
 20631  003234  D756               	goto	i2l9610
 20632  003236  0A01               	xorlw	1	; case 255
 20633  003238  B4D8               	btfsc	status,2,c
 20634  00323A  D773               	goto	i2l9626
 20635  00323C  D007               	goto	i2l268
 20636  00323E                     i2l10648:
 20637                           
 20638                           ; Switch size 1, requested type "space"
 20639                           ; Number of cases is 2, Range of values is 9 to 10
 20640                           ; switch strategies available:
 20641                           ; Name         Instructions Cycles
 20642                           ; simple_byte            7     4 (average)
 20643                           ;	Chosen strategy is simple_byte
 20644  00323E  5043               	movf	??_updateMenu,w,c
 20645  003240  0A09               	xorlw	9	; case 9
 20646  003242  B4D8               	btfsc	status,2,c
 20647  003244  D78E               	goto	i2l9642
 20648  003246  0A03               	xorlw	3	; case 10
 20649  003248  B4D8               	btfsc	status,2,c
 20650  00324A  D7AB               	goto	i2l9658
 20651  00324C                     i2l268:
 20652                           
 20653                           ;UI.c: 371: }
 20654                           ;UI.c: 372: (INTCONbits.GIE = 1);
 20655  00324C  8EF2               	bsf	intcon,7,c	;volatile
 20656  00324E  0012               	return		;funcret
 20657  003250                     __end_of_updateMenu:
 20658                           	opt stack 0
 20659                           pclatu	equ	0xFFB
 20660                           pclath	equ	0xFFA
 20661                           tblptru	equ	0xFF8
 20662                           tblptrh	equ	0xFF7
 20663                           tblptrl	equ	0xFF6
 20664                           tablat	equ	0xFF5
 20665                           prodh	equ	0xFF4
 20666                           prodl	equ	0xFF3
 20667                           intcon	equ	0xFF2
 20668                           intcon2	equ	0xFF1
 20669                           intcon3	equ	0xFF0
 20670                           indf0	equ	0xFEF
 20671                           postinc0	equ	0xFEE
 20672                           fsr0h	equ	0xFEA
 20673                           fsr0l	equ	0xFE9
 20674                           wreg	equ	0xFE8
 20675                           postdec1	equ	0xFE5
 20676                           fsr1h	equ	0xFE2
 20677                           fsr1l	equ	0xFE1
 20678                           indf2	equ	0xFDF
 20679                           postinc2	equ	0xFDE
 20680                           postdec2	equ	0xFDD
 20681                           fsr2h	equ	0xFDA
 20682                           fsr2l	equ	0xFD9
 20683                           status	equ	0xFD8
 20684                           
 20685 ;; *************** function i2_change_state_to_menu_start *****************
 20686 ;; Defined at:
 20687 ;;		line 477 in file "UI.c"
 20688 ;; Parameters:    Size  Location     Type
 20689 ;;		None
 20690 ;; Auto vars:     Size  Location     Type
 20691 ;;		None
 20692 ;; Return value:  Size  Location     Type
 20693 ;;                  1    wreg      void 
 20694 ;; Registers used:
 20695 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20696 ;; Tracked objects:
 20697 ;;		On entry : 0/0
 20698 ;;		On exit  : 0/0
 20699 ;;		Unchanged: 0/0
 20700 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20701 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20702 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20703 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20704 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20705 ;;Total ram usage:        0 bytes
 20706 ;; Hardware stack levels used:    1
 20707 ;; Hardware stack levels required when called:    4
 20708 ;; This function calls:
 20709 ;;		i2_lcdInst
 20710 ;;		i2_printRTC
 20711 ;;		i2_printf
 20712 ;; This function is called by:
 20713 ;;		_updateMenu
 20714 ;;		_handler
 20715 ;; This function uses a non-reentrant model
 20716 ;;
 20717                           
 20718                           	psect	text68
 20719  005976                     __ptext68:
 20720                           	opt stack 0
 20721  005976                     i2_change_state_to_menu_start:
 20722                           	opt stack 19
 20723                           
 20724                           ;UI.c: 478: cur_state = 0;
 20725                           
 20726                           ;incstack = 0
 20727  005976  0E00               	movlw	0
 20728  005978  0100               	movlb	0	; () banked
 20729  00597A  6FE7               	movwf	(_cur_state+1)& (0+255),b
 20730  00597C  0E00               	movlw	0
 20731  00597E  6FE6               	movwf	_cur_state& (0+255),b
 20732                           
 20733                           ; BSR set to: 0
 20734                           ;UI.c: 480: lcdInst(0b10000000);;
 20735  005980  0E80               	movlw	128
 20736  005982  EC94  F02D         	call	i2_lcdInst
 20737                           
 20738                           ;UI.c: 481: printRTC();
 20739  005986  EC7C  F01A         	call	i2_printRTC	;wreg free
 20740                           
 20741                           ;UI.c: 482: lcdInst(0b11000000);;
 20742  00598A  0EC0               	movlw	192
 20743  00598C  EC94  F02D         	call	i2_lcdInst
 20744                           
 20745                           ;UI.c: 483: printf("PUSH TO CONTINUE");
 20746  005990  0EF2               	movlw	low STR_30
 20747  005992  6E0D               	movwf	i2printf@f,c
 20748  005994  0EFD               	movlw	high STR_30
 20749  005996  6E0E               	movwf	i2printf@f+1,c
 20750  005998  ECA2  F011         	call	i2_printf	;wreg free
 20751  00599C  0012               	return		;funcret
 20752  00599E                     __end_ofi2_change_state_to_menu_start:
 20753                           	opt stack 0
 20754                           pclatu	equ	0xFFB
 20755                           pclath	equ	0xFFA
 20756                           tblptru	equ	0xFF8
 20757                           tblptrh	equ	0xFF7
 20758                           tblptrl	equ	0xFF6
 20759                           tablat	equ	0xFF5
 20760                           prodh	equ	0xFF4
 20761                           prodl	equ	0xFF3
 20762                           intcon	equ	0xFF2
 20763                           intcon2	equ	0xFF1
 20764                           intcon3	equ	0xFF0
 20765                           indf0	equ	0xFEF
 20766                           postinc0	equ	0xFEE
 20767                           fsr0h	equ	0xFEA
 20768                           fsr0l	equ	0xFE9
 20769                           wreg	equ	0xFE8
 20770                           postdec1	equ	0xFE5
 20771                           fsr1h	equ	0xFE2
 20772                           fsr1l	equ	0xFE1
 20773                           indf2	equ	0xFDF
 20774                           postinc2	equ	0xFDE
 20775                           postdec2	equ	0xFDD
 20776                           fsr2h	equ	0xFDA
 20777                           fsr2l	equ	0xFD9
 20778                           status	equ	0xFD8
 20779                           
 20780 ;; *************** function i2_printRTC *****************
 20781 ;; Defined at:
 20782 ;;		line 63 in file "RTC.c"
 20783 ;; Parameters:    Size  Location     Type
 20784 ;;		None
 20785 ;; Auto vars:     Size  Location     Type
 20786 ;;  printRTC       14   44[COMRAM] int [7]
 20787 ;;  printRTC        4   60[COMRAM] unsigned char [4]
 20788 ;;  printRTC        2   64[COMRAM] int 
 20789 ;;  printRTC        2   58[COMRAM] int 
 20790 ;; Return value:  Size  Location     Type
 20791 ;;                  1    wreg      void 
 20792 ;; Registers used:
 20793 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20794 ;; Tracked objects:
 20795 ;;		On entry : 0/0
 20796 ;;		On exit  : 0/0
 20797 ;;		Unchanged: 0/0
 20798 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20799 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20800 ;;      Locals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20801 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20802 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20803 ;;Total ram usage:       25 bytes
 20804 ;; Hardware stack levels used:    1
 20805 ;; Hardware stack levels required when called:    3
 20806 ;; This function calls:
 20807 ;;		i2_getRTC
 20808 ;;		i2_lcdInst
 20809 ;;		i2_printf
 20810 ;;		i2_strcpy
 20811 ;; This function is called by:
 20812 ;;		i2_change_state_to_menu_start
 20813 ;; This function uses a non-reentrant model
 20814 ;;
 20815                           
 20816                           	psect	text69
 20817  0034F8                     __ptext69:
 20818                           	opt stack 0
 20819  0034F8                     i2_printRTC:
 20820                           	opt stack 19
 20821                           
 20822                           ;RTC.c: 64: getRTC();
 20823                           
 20824                           ;incstack = 0
 20825  0034F8  ECA0  F027         	call	i2_getRTC	;wreg free
 20826                           
 20827                           ;RTC.c: 65: char month[] = "MMM";
 20828  0034FC  C14D  F03D         	movff	printRTC@F3236,i2printRTC@month
 20829  003500  C14E  F03E         	movff	printRTC@F3236+1,i2printRTC@month+1
 20830  003504  C14F  F03F         	movff	printRTC@F3236+2,i2printRTC@month+2
 20831  003508  C150  F040         	movff	printRTC@F3236+3,i2printRTC@month+3
 20832                           
 20833                           ;RTC.c: 66: int INT_time[7];
 20834                           ;RTC.c: 67: for(int i = 0; i < 7; i++){
 20835  00350C  0E00               	movlw	0
 20836  00350E  6E42               	movwf	i2printRTC@i+1,c
 20837  003510  0E00               	movlw	0
 20838  003512  6E41               	movwf	i2printRTC@i,c
 20839  003514  BE42               	btfsc	i2printRTC@i+1,7,c
 20840  003516  D006               	goto	i2l7510
 20841  003518  5042               	movf	i2printRTC@i+1,w,c
 20842  00351A  E135               	bnz	i2l627
 20843  00351C  0E07               	movlw	7
 20844  00351E  5C41               	subwf	i2printRTC@i,w,c
 20845  003520  B0D8               	btfsc	status,0,c
 20846  003522  D031               	goto	i2l627
 20847  003524                     i2l7510:
 20848                           
 20849                           ;RTC.c: 68: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 20850  003524  0E24               	movlw	low _time
 20851  003526  2441               	addwf	i2printRTC@i,w,c
 20852  003528  6ED9               	movwf	fsr2l,c
 20853  00352A  0E01               	movlw	high _time
 20854  00352C  2042               	addwfc	i2printRTC@i+1,w,c
 20855  00352E  6EDA               	movwf	fsr2h,c
 20856  003530  50DF               	movf	indf2,w,c
 20857  003532  6E2A               	movwf	??i2_printRTC& (0+255),c
 20858  003534  3A2A               	swapf	??i2_printRTC,f,c
 20859  003536  0E0F               	movlw	15
 20860  003538  162A               	andwf	??i2_printRTC,f,c
 20861  00353A  0E0F               	movlw	15
 20862  00353C  162A               	andwf	??i2_printRTC,f,c
 20863  00353E  502A               	movf	??i2_printRTC,w,c
 20864  003540  0D0A               	mullw	10
 20865  003542  0E24               	movlw	low _time
 20866  003544  2441               	addwf	i2printRTC@i,w,c
 20867  003546  6ED9               	movwf	fsr2l,c
 20868  003548  0E01               	movlw	high _time
 20869  00354A  2042               	addwfc	i2printRTC@i+1,w,c
 20870  00354C  6EDA               	movwf	fsr2h,c
 20871  00354E  50DF               	movf	indf2,w,c
 20872  003550  0B0F               	andlw	15
 20873  003552  6E2B               	movwf	(??i2_printRTC+1)& (0+255),c
 20874  003554  6A2C               	clrf	(??i2_printRTC+2)& (0+255),c
 20875  003556  50F3               	movf	prodl,w,c
 20876  003558  262B               	addwf	??i2_printRTC+1,f,c
 20877  00355A  50F4               	movf	prodh,w,c
 20878  00355C  222C               	addwfc	??i2_printRTC+2,f,c
 20879  00355E  90D8               	bcf	status,0,c
 20880  003560  3441               	rlcf	i2printRTC@i,w,c
 20881  003562  6ED9               	movwf	fsr2l,c
 20882  003564  3442               	rlcf	i2printRTC@i+1,w,c
 20883  003566  6EDA               	movwf	fsr2h,c
 20884  003568  0E2D               	movlw	low i2printRTC@INT_time
 20885  00356A  26D9               	addwf	fsr2l,f,c
 20886  00356C  0E00               	movlw	high i2printRTC@INT_time
 20887  00356E  22DA               	addwfc	fsr2h,f,c
 20888  003570  C02B  FFDE         	movff	??i2_printRTC+1,postinc2
 20889  003574  C02C  FFDD         	movff	??i2_printRTC+2,postdec2
 20890  003578  4A41               	infsnz	i2printRTC@i,f,c
 20891  00357A  2A42               	incf	i2printRTC@i+1,f,c
 20892  00357C  BE42               	btfsc	i2printRTC@i+1,7,c
 20893  00357E  D7D2               	goto	i2l7510
 20894  003580  5042               	movf	i2printRTC@i+1,w,c
 20895  003582  E101               	bnz	i2u615_40
 20896  003584  D7CB               	goto	L19
 20897  003586                     i2u615_40:
 20898  003586                     i2l627:
 20899                           
 20900                           ;RTC.c: 69: }
 20901                           ;RTC.c: 70: int RTC_month = INT_time[5];
 20902  003586  C037  F03B         	movff	i2printRTC@INT_time+10,i2printRTC@RTC_month
 20903  00358A  C038  F03C         	movff	i2printRTC@INT_time+11,i2printRTC@RTC_month+1
 20904                           
 20905                           ;RTC.c: 72: switch(RTC_month){
 20906  00358E  D084               	goto	i2l7542
 20907  003590                     i2l7516:
 20908                           
 20909                           ;RTC.c: 74: strcpy(month, "JAN");
 20910  003590  0E3D               	movlw	low i2printRTC@month
 20911  003592  6E01               	movwf	i2strcpy@to,c
 20912  003594  0E00               	movlw	high i2printRTC@month
 20913  003596  6E02               	movwf	i2strcpy@to+1,c
 20914  003598  0EDA               	movlw	low STR_8
 20915  00359A  6E03               	movwf	i2strcpy@from,c
 20916  00359C  0EFF               	movlw	high STR_8
 20917  00359E  6E04               	movwf	i2strcpy@from+1,c
 20918  0035A0  EC2F  F02B         	call	i2_strcpy	;wreg free
 20919                           
 20920                           ;RTC.c: 75: break;
 20921  0035A4  D0A6               	goto	i2l7544
 20922  0035A6                     i2l7518:
 20923                           
 20924                           ;RTC.c: 77: strcpy(month, "FEB");
 20925  0035A6  0E3D               	movlw	low i2printRTC@month
 20926  0035A8  6E01               	movwf	i2strcpy@to,c
 20927  0035AA  0E00               	movlw	high i2printRTC@month
 20928  0035AC  6E02               	movwf	i2strcpy@to+1,c
 20929  0035AE  0ECA               	movlw	low STR_9
 20930  0035B0  6E03               	movwf	i2strcpy@from,c
 20931  0035B2  0EFF               	movlw	high STR_9
 20932  0035B4  6E04               	movwf	i2strcpy@from+1,c
 20933  0035B6  EC2F  F02B         	call	i2_strcpy	;wreg free
 20934                           
 20935                           ;RTC.c: 78: break;
 20936  0035BA  D09B               	goto	i2l7544
 20937  0035BC                     i2l7520:
 20938                           
 20939                           ;RTC.c: 80: strcpy(month, "MAR");
 20940  0035BC  0E3D               	movlw	low i2printRTC@month
 20941  0035BE  6E01               	movwf	i2strcpy@to,c
 20942  0035C0  0E00               	movlw	high i2printRTC@month
 20943  0035C2  6E02               	movwf	i2strcpy@to+1,c
 20944  0035C4  0EE6               	movlw	low STR_10
 20945  0035C6  6E03               	movwf	i2strcpy@from,c
 20946  0035C8  0EFF               	movlw	high STR_10
 20947  0035CA  6E04               	movwf	i2strcpy@from+1,c
 20948  0035CC  EC2F  F02B         	call	i2_strcpy	;wreg free
 20949                           
 20950                           ;RTC.c: 81: break;
 20951  0035D0  D090               	goto	i2l7544
 20952  0035D2                     i2l7522:
 20953                           
 20954                           ;RTC.c: 83: strcpy(month, "APR");
 20955  0035D2  0E3D               	movlw	low i2printRTC@month
 20956  0035D4  6E01               	movwf	i2strcpy@to,c
 20957  0035D6  0E00               	movlw	high i2printRTC@month
 20958  0035D8  6E02               	movwf	i2strcpy@to+1,c
 20959  0035DA  0EEA               	movlw	low STR_11
 20960  0035DC  6E03               	movwf	i2strcpy@from,c
 20961  0035DE  0EFF               	movlw	high STR_11
 20962  0035E0  6E04               	movwf	i2strcpy@from+1,c
 20963  0035E2  EC2F  F02B         	call	i2_strcpy	;wreg free
 20964                           
 20965                           ;RTC.c: 84: break;
 20966  0035E6  D085               	goto	i2l7544
 20967  0035E8                     i2l7524:
 20968                           
 20969                           ;RTC.c: 86: strcpy(month, "MAY");
 20970  0035E8  0E3D               	movlw	low i2printRTC@month
 20971  0035EA  6E01               	movwf	i2strcpy@to,c
 20972  0035EC  0E00               	movlw	high i2printRTC@month
 20973  0035EE  6E02               	movwf	i2strcpy@to+1,c
 20974  0035F0  0EFA               	movlw	low STR_12
 20975  0035F2  6E03               	movwf	i2strcpy@from,c
 20976  0035F4  0EFF               	movlw	high STR_12
 20977  0035F6  6E04               	movwf	i2strcpy@from+1,c
 20978  0035F8  EC2F  F02B         	call	i2_strcpy	;wreg free
 20979                           
 20980                           ;RTC.c: 87: break;
 20981  0035FC  D07A               	goto	i2l7544
 20982  0035FE                     i2l7526:
 20983                           
 20984                           ;RTC.c: 89: strcpy(month, "JUN");
 20985  0035FE  0E3D               	movlw	low i2printRTC@month
 20986  003600  6E01               	movwf	i2strcpy@to,c
 20987  003602  0E00               	movlw	high i2printRTC@month
 20988  003604  6E02               	movwf	i2strcpy@to+1,c
 20989  003606  0EDE               	movlw	low STR_13
 20990  003608  6E03               	movwf	i2strcpy@from,c
 20991  00360A  0EFF               	movlw	high STR_13
 20992  00360C  6E04               	movwf	i2strcpy@from+1,c
 20993  00360E  EC2F  F02B         	call	i2_strcpy	;wreg free
 20994                           
 20995                           ;RTC.c: 90: break;
 20996  003612  D06F               	goto	i2l7544
 20997  003614                     i2l7528:
 20998                           
 20999                           ;RTC.c: 92: strcpy(month, "JUL");
 21000  003614  0E3D               	movlw	low i2printRTC@month
 21001  003616  6E01               	movwf	i2strcpy@to,c
 21002  003618  0E00               	movlw	high i2printRTC@month
 21003  00361A  6E02               	movwf	i2strcpy@to+1,c
 21004  00361C  0ED6               	movlw	low STR_14
 21005  00361E  6E03               	movwf	i2strcpy@from,c
 21006  003620  0EFF               	movlw	high STR_14
 21007  003622  6E04               	movwf	i2strcpy@from+1,c
 21008  003624  EC2F  F02B         	call	i2_strcpy	;wreg free
 21009                           
 21010                           ;RTC.c: 93: break;
 21011  003628  D064               	goto	i2l7544
 21012  00362A                     i2l7530:
 21013                           
 21014                           ;RTC.c: 95: strcpy(month, "AUG");
 21015  00362A  0E3D               	movlw	low i2printRTC@month
 21016  00362C  6E01               	movwf	i2strcpy@to,c
 21017  00362E  0E00               	movlw	high i2printRTC@month
 21018  003630  6E02               	movwf	i2strcpy@to+1,c
 21019  003632  0ED2               	movlw	low STR_15
 21020  003634  6E03               	movwf	i2strcpy@from,c
 21021  003636  0EFF               	movlw	high STR_15
 21022  003638  6E04               	movwf	i2strcpy@from+1,c
 21023  00363A  EC2F  F02B         	call	i2_strcpy	;wreg free
 21024                           
 21025                           ;RTC.c: 96: break;
 21026  00363E  D059               	goto	i2l7544
 21027  003640                     i2l7532:
 21028                           
 21029                           ;RTC.c: 98: strcpy(month, "SEP");
 21030  003640  0E3D               	movlw	low i2printRTC@month
 21031  003642  6E01               	movwf	i2strcpy@to,c
 21032  003644  0E00               	movlw	high i2printRTC@month
 21033  003646  6E02               	movwf	i2strcpy@to+1,c
 21034  003648  0EE2               	movlw	low STR_16
 21035  00364A  6E03               	movwf	i2strcpy@from,c
 21036  00364C  0EFF               	movlw	high STR_16
 21037  00364E  6E04               	movwf	i2strcpy@from+1,c
 21038  003650  EC2F  F02B         	call	i2_strcpy	;wreg free
 21039                           
 21040                           ;RTC.c: 99: break;
 21041  003654  D04E               	goto	i2l7544
 21042  003656                     i2l7534:
 21043                           
 21044                           ;RTC.c: 101: strcpy(month, "OCT");
 21045  003656  0E3D               	movlw	low i2printRTC@month
 21046  003658  6E01               	movwf	i2strcpy@to,c
 21047  00365A  0E00               	movlw	high i2printRTC@month
 21048  00365C  6E02               	movwf	i2strcpy@to+1,c
 21049  00365E  0EF2               	movlw	low STR_17
 21050  003660  6E03               	movwf	i2strcpy@from,c
 21051  003662  0EFF               	movlw	high STR_17
 21052  003664  6E04               	movwf	i2strcpy@from+1,c
 21053  003666  EC2F  F02B         	call	i2_strcpy	;wreg free
 21054                           
 21055                           ;RTC.c: 102: break;
 21056  00366A  D043               	goto	i2l7544
 21057  00366C                     i2l7536:
 21058                           
 21059                           ;RTC.c: 104: strcpy(month, "NOV");
 21060  00366C  0E3D               	movlw	low i2printRTC@month
 21061  00366E  6E01               	movwf	i2strcpy@to,c
 21062  003670  0E00               	movlw	high i2printRTC@month
 21063  003672  6E02               	movwf	i2strcpy@to+1,c
 21064  003674  0EF6               	movlw	low STR_18
 21065  003676  6E03               	movwf	i2strcpy@from,c
 21066  003678  0EFF               	movlw	high STR_18
 21067  00367A  6E04               	movwf	i2strcpy@from+1,c
 21068  00367C  EC2F  F02B         	call	i2_strcpy	;wreg free
 21069                           
 21070                           ;RTC.c: 105: break;
 21071  003680  D038               	goto	i2l7544
 21072  003682                     i2l7538:
 21073                           
 21074                           ;RTC.c: 107: strcpy(month, "DEC");
 21075  003682  0E3D               	movlw	low i2printRTC@month
 21076  003684  6E01               	movwf	i2strcpy@to,c
 21077  003686  0E00               	movlw	high i2printRTC@month
 21078  003688  6E02               	movwf	i2strcpy@to+1,c
 21079  00368A  0ECE               	movlw	low STR_19
 21080  00368C  6E03               	movwf	i2strcpy@from,c
 21081  00368E  0EFF               	movlw	high STR_19
 21082  003690  6E04               	movwf	i2strcpy@from+1,c
 21083  003692  EC2F  F02B         	call	i2_strcpy	;wreg free
 21084                           
 21085                           ;RTC.c: 109: }
 21086                           
 21087                           ;RTC.c: 108: break;
 21088  003696  D02D               	goto	i2l7544
 21089  003698                     i2l7542:
 21090  003698  C03B  F02A         	movff	i2printRTC@RTC_month,??i2_printRTC
 21091  00369C  C03C  F02B         	movff	i2printRTC@RTC_month+1,??i2_printRTC+1
 21092                           
 21093                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 21094                           ; Switch size 1, requested type "space"
 21095                           ; Number of cases is 1, Range of values is 0 to 0
 21096                           ; switch strategies available:
 21097                           ; Name         Instructions Cycles
 21098                           ; simple_byte            4     3 (average)
 21099                           ;	Chosen strategy is simple_byte
 21100  0036A0  502B               	movf	??i2_printRTC+1,w,c
 21101  0036A2  0A00               	xorlw	0	; case 0
 21102  0036A4  A4D8               	btfss	status,2,c
 21103  0036A6  D025               	goto	i2l7544
 21104                           
 21105                           ; Switch size 1, requested type "space"
 21106                           ; Number of cases is 12, Range of values is 1 to 12
 21107                           ; switch strategies available:
 21108                           ; Name         Instructions Cycles
 21109                           ; simple_byte           37    19 (average)
 21110                           ;	Chosen strategy is simple_byte
 21111  0036A8  502A               	movf	??i2_printRTC,w,c
 21112  0036AA  0A01               	xorlw	1	; case 1
 21113  0036AC  B4D8               	btfsc	status,2,c
 21114  0036AE  D770               	goto	i2l7516
 21115  0036B0  0A03               	xorlw	3	; case 2
 21116  0036B2  B4D8               	btfsc	status,2,c
 21117  0036B4  D778               	goto	i2l7518
 21118  0036B6  0A01               	xorlw	1	; case 3
 21119  0036B8  B4D8               	btfsc	status,2,c
 21120  0036BA  D780               	goto	i2l7520
 21121  0036BC  0A07               	xorlw	7	; case 4
 21122  0036BE  B4D8               	btfsc	status,2,c
 21123  0036C0  D788               	goto	i2l7522
 21124  0036C2  0A01               	xorlw	1	; case 5
 21125  0036C4  B4D8               	btfsc	status,2,c
 21126  0036C6  D790               	goto	i2l7524
 21127  0036C8  0A03               	xorlw	3	; case 6
 21128  0036CA  B4D8               	btfsc	status,2,c
 21129  0036CC  D798               	goto	i2l7526
 21130  0036CE  0A01               	xorlw	1	; case 7
 21131  0036D0  B4D8               	btfsc	status,2,c
 21132  0036D2  D7A0               	goto	i2l7528
 21133  0036D4  0A0F               	xorlw	15	; case 8
 21134  0036D6  B4D8               	btfsc	status,2,c
 21135  0036D8  D7A8               	goto	i2l7530
 21136  0036DA  0A01               	xorlw	1	; case 9
 21137  0036DC  B4D8               	btfsc	status,2,c
 21138  0036DE  D7B0               	goto	i2l7532
 21139  0036E0  0A03               	xorlw	3	; case 10
 21140  0036E2  B4D8               	btfsc	status,2,c
 21141  0036E4  D7B8               	goto	i2l7534
 21142  0036E6  0A01               	xorlw	1	; case 11
 21143  0036E8  B4D8               	btfsc	status,2,c
 21144  0036EA  D7C0               	goto	i2l7536
 21145  0036EC  0A07               	xorlw	7	; case 12
 21146  0036EE  B4D8               	btfsc	status,2,c
 21147  0036F0  D7C8               	goto	i2l7538
 21148  0036F2                     i2l7544:
 21149                           
 21150                           ;RTC.c: 110: lcdInst(0b10000000);;
 21151  0036F2  0E80               	movlw	128
 21152  0036F4  EC94  F02D         	call	i2_lcdInst
 21153                           
 21154                           ;RTC.c: 111: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
 21155  0036F8  0EAE               	movlw	low STR_21
 21156  0036FA  6E0D               	movwf	i2printf@f,c
 21157  0036FC  0EFA               	movlw	high STR_21
 21158  0036FE  6E0E               	movwf	i2printf@f+1,c
 21159  003700  C035  F00F         	movff	i2printRTC@INT_time+8,?i2_printf+2
 21160  003704  C036  F010         	movff	i2printRTC@INT_time+9,?i2_printf+3
 21161  003708  0E3D               	movlw	low i2printRTC@month
 21162  00370A  6E11               	movwf	?i2_printf+4,c
 21163  00370C  0E00               	movlw	high i2printRTC@month
 21164  00370E  6E12               	movwf	?i2_printf+5,c
 21165  003710  C031  F013         	movff	i2printRTC@INT_time+4,?i2_printf+6
 21166  003714  C032  F014         	movff	i2printRTC@INT_time+5,?i2_printf+7
 21167  003718  C02F  F015         	movff	i2printRTC@INT_time+2,?i2_printf+8
 21168  00371C  C030  F016         	movff	i2printRTC@INT_time+3,?i2_printf+9
 21169  003720  C02D  F017         	movff	i2printRTC@INT_time,?i2_printf+10
 21170  003724  C02E  F018         	movff	i2printRTC@INT_time+1,?i2_printf+11
 21171  003728  ECA2  F011         	call	i2_printf	;wreg free
 21172  00372C  0012               	return		;funcret
 21173  00372E                     __end_ofi2_printRTC:
 21174                           	opt stack 0
 21175                           pclatu	equ	0xFFB
 21176                           pclath	equ	0xFFA
 21177                           tblptru	equ	0xFF8
 21178                           tblptrh	equ	0xFF7
 21179                           tblptrl	equ	0xFF6
 21180                           tablat	equ	0xFF5
 21181                           prodh	equ	0xFF4
 21182                           prodl	equ	0xFF3
 21183                           intcon	equ	0xFF2
 21184                           intcon2	equ	0xFF1
 21185                           intcon3	equ	0xFF0
 21186                           indf0	equ	0xFEF
 21187                           postinc0	equ	0xFEE
 21188                           fsr0h	equ	0xFEA
 21189                           fsr0l	equ	0xFE9
 21190                           wreg	equ	0xFE8
 21191                           postdec1	equ	0xFE5
 21192                           fsr1h	equ	0xFE2
 21193                           fsr1l	equ	0xFE1
 21194                           indf2	equ	0xFDF
 21195                           postinc2	equ	0xFDE
 21196                           postdec2	equ	0xFDD
 21197                           fsr2h	equ	0xFDA
 21198                           fsr2l	equ	0xFD9
 21199                           status	equ	0xFD8
 21200                           
 21201 ;; *************** function i2_strcpy *****************
 21202 ;; Defined at:
 21203 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
 21204 ;; Parameters:    Size  Location     Type
 21205 ;;  to              2    0[COMRAM] PTR unsigned char 
 21206 ;;		 -> printRTC@month(4), UI@month(4), 
 21207 ;;  from            2    2[COMRAM] PTR const unsigned char 
 21208 ;;		 -> STR_62(4), STR_61(4), STR_60(4), STR_59(4), 
 21209 ;;		 -> STR_58(4), STR_57(4), STR_56(4), STR_55(4), 
 21210 ;;		 -> STR_54(4), STR_53(4), STR_52(4), STR_51(4), 
 21211 ;;		 -> STR_20(4), STR_19(4), STR_18(4), STR_17(4), 
 21212 ;;		 -> STR_16(4), STR_15(4), STR_14(4), STR_13(4), 
 21213 ;;		 -> STR_12(4), STR_11(4), STR_10(4), STR_9(4), 
 21214 ;;		 -> STR_8(4), 
 21215 ;; Auto vars:     Size  Location     Type
 21216 ;;  strcpy          2    4[COMRAM] PTR unsigned char 
 21217 ;;		 -> printRTC@month(4), UI@month(4), 
 21218 ;; Return value:  Size  Location     Type
 21219 ;;                  2    0[COMRAM] PTR unsigned char 
 21220 ;; Registers used:
 21221 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 21222 ;; Tracked objects:
 21223 ;;		On entry : 0/0
 21224 ;;		On exit  : 0/0
 21225 ;;		Unchanged: 0/0
 21226 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21227 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21228 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21229 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21230 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21231 ;;Total ram usage:        6 bytes
 21232 ;; Hardware stack levels used:    1
 21233 ;; This function calls:
 21234 ;;		Nothing
 21235 ;; This function is called by:
 21236 ;;		i2_printRTC
 21237 ;; This function uses a non-reentrant model
 21238 ;;
 21239                           
 21240                           	psect	text70
 21241  00565E                     __ptext70:
 21242                           	opt stack 0
 21243  00565E                     i2_strcpy:
 21244                           	opt stack 21
 21245                           
 21246                           ;incstack = 0
 21247  00565E  C001  F005         	movff	i2strcpy@to,i2strcpy@cp
 21248  005662  C002  F006         	movff	i2strcpy@to+1,i2strcpy@cp+1
 21249  005666  D004               	goto	i2l7068
 21250  005668                     i2l7066:
 21251  005668  4A05               	infsnz	i2strcpy@cp,f,c
 21252  00566A  2A06               	incf	i2strcpy@cp+1,f,c
 21253  00566C  4A03               	infsnz	i2strcpy@from,f,c
 21254  00566E  2A04               	incf	i2strcpy@from+1,f,c
 21255  005670                     i2l7068:
 21256  005670  C003  FFF6         	movff	i2strcpy@from,tblptrl
 21257  005674  C004  FFF7         	movff	i2strcpy@from+1,tblptrh
 21258  005678                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 21259  005678  6AF8               	clrf	tblptru,c
 21260  00567A                     	endif
 21261  00567A                     	if	0	;tblptru may be non-zero
 21262  00567A                     	endif
 21263  00567A  C005  FFD9         	movff	i2strcpy@cp,fsr2l
 21264  00567E  C006  FFDA         	movff	i2strcpy@cp+1,fsr2h
 21265  005682  0008               	tblrd		*
 21266  005684  CFF5 FFDF          	movff	tablat,indf2
 21267  005688  50DF               	movf	indf2,w,c
 21268  00568A  B4D8               	btfsc	status,2,c
 21269  00568C  0012               	return	
 21270  00568E  D7EC               	goto	i2l7066
 21271  005690                     __end_ofi2_strcpy:
 21272                           	opt stack 0
 21273                           pclatu	equ	0xFFB
 21274                           pclath	equ	0xFFA
 21275                           tblptru	equ	0xFF8
 21276                           tblptrh	equ	0xFF7
 21277                           tblptrl	equ	0xFF6
 21278                           tablat	equ	0xFF5
 21279                           prodh	equ	0xFF4
 21280                           prodl	equ	0xFF3
 21281                           intcon	equ	0xFF2
 21282                           intcon2	equ	0xFF1
 21283                           intcon3	equ	0xFF0
 21284                           indf0	equ	0xFEF
 21285                           postinc0	equ	0xFEE
 21286                           fsr0h	equ	0xFEA
 21287                           fsr0l	equ	0xFE9
 21288                           wreg	equ	0xFE8
 21289                           postdec1	equ	0xFE5
 21290                           fsr1h	equ	0xFE2
 21291                           fsr1l	equ	0xFE1
 21292                           indf2	equ	0xFDF
 21293                           postinc2	equ	0xFDE
 21294                           postdec2	equ	0xFDD
 21295                           fsr2h	equ	0xFDA
 21296                           fsr2l	equ	0xFD9
 21297                           status	equ	0xFD8
 21298                           
 21299 ;; *************** function _inputHandler *****************
 21300 ;; Defined at:
 21301 ;;		line 375 in file "UI.c"
 21302 ;; Parameters:    Size  Location     Type
 21303 ;;		None
 21304 ;; Auto vars:     Size  Location     Type
 21305 ;;		None
 21306 ;; Return value:  Size  Location     Type
 21307 ;;                  2   41[COMRAM] int 
 21308 ;; Registers used:
 21309 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21310 ;; Tracked objects:
 21311 ;;		On entry : 0/0
 21312 ;;		On exit  : 0/0
 21313 ;;		Unchanged: 0/0
 21314 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21315 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21316 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21317 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21318 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21319 ;;Total ram usage:        4 bytes
 21320 ;; Hardware stack levels used:    1
 21321 ;; Hardware stack levels required when called:    4
 21322 ;; This function calls:
 21323 ;;		_change_state_to_logs_11
 21324 ;;		_change_state_to_logs_12
 21325 ;;		_change_state_to_logs_22
 21326 ;;		_change_state_to_logs_23
 21327 ;;		_change_state_to_logs_33
 21328 ;;		_change_state_to_logs_34
 21329 ;;		_change_state_to_menu_11
 21330 ;;		_change_state_to_menu_23
 21331 ;;		i2_change_state_to_menu_12
 21332 ;;		i2_change_state_to_menu_22
 21333 ;; This function is called by:
 21334 ;;		_updateMenu
 21335 ;; This function uses a non-reentrant model
 21336 ;;
 21337                           
 21338                           	psect	text71
 21339  003920                     __ptext71:
 21340                           	opt stack 0
 21341  003920                     _inputHandler:
 21342                           	opt stack 18
 21343                           
 21344                           ;UI.c: 380: if(firstboot){
 21345                           
 21346                           ;incstack = 0
 21347  003920  0101               	movlb	1	; () banked
 21348  003922  5143               	movf	_firstboot& (0+255),w,b
 21349  003924  0101               	movlb	1	; () banked
 21350  003926  1144               	iorwf	(_firstboot+1)& (0+255),w,b
 21351  003928  B4D8               	btfsc	status,2,c
 21352  00392A  D00C               	goto	i2l7612
 21353                           
 21354                           ; BSR set to: 1
 21355                           ;UI.c: 381: change_state_to_menu_11();
 21356  00392C  ECA8  F02B         	call	_change_state_to_menu_11	;wreg free
 21357                           
 21358                           ;UI.c: 382: firstboot = 0;
 21359  003930  0E00               	movlw	0
 21360  003932  0101               	movlb	1	; () banked
 21361  003934  6F44               	movwf	(_firstboot+1)& (0+255),b
 21362  003936  0E00               	movlw	0
 21363  003938  6F43               	movwf	_firstboot& (0+255),b
 21364                           
 21365                           ; BSR set to: 1
 21366                           ;UI.c: 383: return 0;
 21367  00393A  0E00               	movlw	0
 21368  00393C  6E2B               	movwf	?_inputHandler+1,c
 21369  00393E  0E00               	movlw	0
 21370  003940  6E2A               	movwf	?_inputHandler,c
 21371                           
 21372                           ; BSR set to: 1
 21373  003942  0012               	return	
 21374  003944                     i2l7612:
 21375                           
 21376                           ; BSR set to: 1
 21377                           ;UI.c: 384: }
 21378                           ;UI.c: 385: if (logstate){
 21379  003944  0100               	movlb	0	; () banked
 21380  003946  51F8               	movf	_logstate& (0+255),w,b
 21381  003948  0100               	movlb	0	; () banked
 21382  00394A  11F9               	iorwf	(_logstate+1)& (0+255),w,b
 21383  00394C  B4D8               	btfsc	status,2,c
 21384  00394E  D0C7               	goto	i2l7730
 21385                           
 21386                           ; BSR set to: 0
 21387                           ;UI.c: 386: if(input == 'C' && PORTBbits.RB1 == 1){
 21388  003950  0E43               	movlw	67
 21389  003952  187D               	xorwf	_input,w,c	;volatile
 21390  003954  A4D8               	btfss	status,2,c
 21391  003956  D012               	goto	i2l7630
 21392                           
 21393                           ; BSR set to: 0
 21394  003958  B281               	btfsc	3969,1,c	;volatile
 21395  00395A  D009               	goto	i2l7622
 21396  00395C  D00F               	goto	i2l7630
 21397  00395E                     i2l7620:
 21398                           
 21399                           ;UI.c: 389: _delay((unsigned long)((10)*(32000000/4000.0)));
 21400  00395E  0E68               	movlw	104
 21401  003960  6E2C               	movwf	??_inputHandler& (0+255),c
 21402  003962  0EE4               	movlw	228
 21403  003964                     i2u1117_47:
 21404  003964  2EE8               	decfsz	wreg,f,c
 21405  003966  D7FE               	bra	i2u1117_47
 21406  003968  2E2C               	decfsz	??_inputHandler& (0+255),f,c
 21407  00396A  D7FC               	bra	i2u1117_47
 21408  00396C  D000               	nop2	
 21409  00396E                     i2l7622:
 21410  00396E  B281               	btfsc	3969,1,c	;volatile
 21411  003970  D7F6               	goto	i2l7620
 21412  003972                     i2l7624:
 21413                           
 21414                           ;UI.c: 390: }
 21415                           ;UI.c: 391: return 0;
 21416  003972  0E00               	movlw	0
 21417  003974  6E2B               	movwf	?_inputHandler+1,c
 21418  003976  0E00               	movlw	0
 21419  003978  6E2A               	movwf	?_inputHandler,c
 21420  00397A  0012               	return	
 21421  00397C                     i2l7630:
 21422                           
 21423                           ;UI.c: 393: else if (input == 'D'){
 21424  00397C  0E44               	movlw	68
 21425  00397E  187D               	xorwf	_input,w,c	;volatile
 21426  003980  A4D8               	btfss	status,2,c
 21427  003982  D7F7               	goto	i2l7624
 21428                           
 21429                           ;UI.c: 395: logstate = 0;
 21430  003984  0E00               	movlw	0
 21431  003986  0100               	movlb	0	; () banked
 21432  003988  6FF9               	movwf	(_logstate+1)& (0+255),b
 21433  00398A  0E00               	movlw	0
 21434  00398C  6FF8               	movwf	_logstate& (0+255),b
 21435                           
 21436                           ;UI.c: 396: switch(cur_state){
 21437  00398E  D012               	goto	i2l7648
 21438  003990                     i2l7634:
 21439                           
 21440                           ;UI.c: 398: change_state_to_logs_11();
 21441  003990  EC20  F02C         	call	_change_state_to_logs_11	;wreg free
 21442                           
 21443                           ;UI.c: 399: break;
 21444  003994  D7EE               	goto	i2l7624
 21445  003996                     i2l7636:
 21446                           
 21447                           ;UI.c: 401: change_state_to_logs_12();
 21448  003996  EC08  F02C         	call	_change_state_to_logs_12	;wreg free
 21449                           
 21450                           ;UI.c: 402: break;
 21451  00399A  D7EB               	goto	i2l7624
 21452  00399C                     i2l7638:
 21453                           
 21454                           ;UI.c: 404: change_state_to_logs_22();
 21455  00399C  ECF0  F02B         	call	_change_state_to_logs_22	;wreg free
 21456                           
 21457                           ;UI.c: 405: break;
 21458  0039A0  D7E8               	goto	i2l7624
 21459  0039A2                     i2l7640:
 21460                           
 21461                           ;UI.c: 407: change_state_to_logs_23();
 21462  0039A2  EC4F  F02C         	call	_change_state_to_logs_23	;wreg free
 21463                           
 21464                           ;UI.c: 408: break;
 21465  0039A6  D7E5               	goto	i2l7624
 21466  0039A8                     i2l7642:
 21467                           
 21468                           ;UI.c: 410: change_state_to_logs_33();
 21469  0039A8  ECD8  F02B         	call	_change_state_to_logs_33	;wreg free
 21470                           
 21471                           ;UI.c: 411: break;
 21472  0039AC  D7E2               	goto	i2l7624
 21473  0039AE                     i2l7644:
 21474                           
 21475                           ;UI.c: 413: change_state_to_logs_34();
 21476  0039AE  ECC0  F02B         	call	_change_state_to_logs_34	;wreg free
 21477                           
 21478                           ;UI.c: 415: }
 21479                           
 21480                           ;UI.c: 414: break;
 21481  0039B2  D7DF               	goto	i2l7624
 21482  0039B4                     i2l7648:
 21483  0039B4  C0E6  F02C         	movff	_cur_state,??_inputHandler
 21484  0039B8  C0E7  F02D         	movff	_cur_state+1,??_inputHandler+1
 21485                           
 21486                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
 21487                           ; Switch size 1, requested type "space"
 21488                           ; Number of cases is 2, Range of values is 3 to 4
 21489                           ; switch strategies available:
 21490                           ; Name         Instructions Cycles
 21491                           ; simple_byte            7     4 (average)
 21492                           ;	Chosen strategy is simple_byte
 21493  0039BC  502D               	movf	??_inputHandler+1,w,c
 21494  0039BE  0A03               	xorlw	3	; case 3
 21495  0039C0  B4D8               	btfsc	status,2,c
 21496  0039C2  D004               	goto	i2l10652
 21497  0039C4  0A07               	xorlw	7	; case 4
 21498  0039C6  B4D8               	btfsc	status,2,c
 21499  0039C8  D00F               	goto	i2l10654
 21500  0039CA  D7D3               	goto	i2l7624
 21501  0039CC                     i2l10652:
 21502                           
 21503                           ; Switch size 1, requested type "space"
 21504                           ; Number of cases is 4, Range of values is 243 to 255
 21505                           ; switch strategies available:
 21506                           ; Name         Instructions Cycles
 21507                           ; simple_byte           13     7 (average)
 21508                           ;	Chosen strategy is simple_byte
 21509  0039CC  502C               	movf	??_inputHandler,w,c
 21510  0039CE  0AF3               	xorlw	243	; case 243
 21511  0039D0  B4D8               	btfsc	status,2,c
 21512  0039D2  D7DE               	goto	i2l7634
 21513  0039D4  0A07               	xorlw	7	; case 244
 21514  0039D6  B4D8               	btfsc	status,2,c
 21515  0039D8  D7DE               	goto	i2l7636
 21516  0039DA  0A0A               	xorlw	10	; case 254
 21517  0039DC  B4D8               	btfsc	status,2,c
 21518  0039DE  D7DE               	goto	i2l7638
 21519  0039E0  0A01               	xorlw	1	; case 255
 21520  0039E2  B4D8               	btfsc	status,2,c
 21521  0039E4  D7DE               	goto	i2l7640
 21522  0039E6  D7C5               	goto	i2l7624
 21523  0039E8                     i2l10654:
 21524                           
 21525                           ; Switch size 1, requested type "space"
 21526                           ; Number of cases is 2, Range of values is 9 to 10
 21527                           ; switch strategies available:
 21528                           ; Name         Instructions Cycles
 21529                           ; simple_byte            7     4 (average)
 21530                           ;	Chosen strategy is simple_byte
 21531  0039E8  502C               	movf	??_inputHandler,w,c
 21532  0039EA  0A09               	xorlw	9	; case 9
 21533  0039EC  B4D8               	btfsc	status,2,c
 21534  0039EE  D7DC               	goto	i2l7642
 21535  0039F0  0A03               	xorlw	3	; case 10
 21536  0039F2  B4D8               	btfsc	status,2,c
 21537  0039F4  D7DC               	goto	i2l7644
 21538  0039F6  D7BD               	goto	i2l7624
 21539  0039F8                     i2l7660:
 21540                           
 21541                           ;UI.c: 425: if(cur_state == 11){
 21542  0039F8  0E0B               	movlw	11
 21543  0039FA  0100               	movlb	0	; () banked
 21544  0039FC  19E6               	xorwf	_cur_state& (0+255),w,b
 21545  0039FE  0100               	movlb	0	; () banked
 21546  003A00  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
 21547  003A02  A4D8               	btfss	status,2,c
 21548  003A04  D005               	goto	i2l7668
 21549                           
 21550                           ; BSR set to: 0
 21551                           ;UI.c: 426: return 0;
 21552  003A06  0E00               	movlw	0
 21553  003A08  6E2B               	movwf	?_inputHandler+1,c
 21554  003A0A  0E00               	movlw	0
 21555  003A0C  6E2A               	movwf	?_inputHandler,c
 21556                           
 21557                           ; BSR set to: 0
 21558  003A0E  0012               	return	
 21559  003A10                     i2l7668:
 21560                           
 21561                           ; BSR set to: 0
 21562                           ;UI.c: 428: else{
 21563                           ;UI.c: 429: change_state_to_menu_11();
 21564  003A10  ECA8  F02B         	call	_change_state_to_menu_11	;wreg free
 21565                           
 21566                           ;UI.c: 430: }
 21567                           ;UI.c: 431: return 0;
 21568  003A14  0E00               	movlw	0
 21569  003A16  6E2B               	movwf	?_inputHandler+1,c
 21570  003A18  0E00               	movlw	0
 21571  003A1A  6E2A               	movwf	?_inputHandler,c
 21572  003A1C  0012               	return	
 21573  003A1E                     i2l7674:
 21574                           
 21575                           ;UI.c: 433: if(cur_state == 22 || cur_state == 12){
 21576  003A1E  0E16               	movlw	22
 21577  003A20  0100               	movlb	0	; () banked
 21578  003A22  19E6               	xorwf	_cur_state& (0+255),w,b
 21579  003A24  0100               	movlb	0	; () banked
 21580  003A26  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
 21581  003A28  B4D8               	btfsc	status,2,c
 21582  003A2A  D007               	goto	i2l7678
 21583                           
 21584                           ; BSR set to: 0
 21585  003A2C  0E0C               	movlw	12
 21586  003A2E  0100               	movlb	0	; () banked
 21587  003A30  19E6               	xorwf	_cur_state& (0+255),w,b
 21588  003A32  0100               	movlb	0	; () banked
 21589  003A34  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
 21590  003A36  A4D8               	btfss	status,2,c
 21591  003A38  D005               	goto	i2l7684
 21592  003A3A                     i2l7678:
 21593                           
 21594                           ; BSR set to: 0
 21595                           ;UI.c: 434: return 0;
 21596  003A3A  0E00               	movlw	0
 21597  003A3C  6E2B               	movwf	?_inputHandler+1,c
 21598  003A3E  0E00               	movlw	0
 21599  003A40  6E2A               	movwf	?_inputHandler,c
 21600                           
 21601                           ; BSR set to: 0
 21602  003A42  0012               	return	
 21603  003A44                     i2l7684:
 21604                           
 21605                           ; BSR set to: 0
 21606                           ;UI.c: 436: else if(cur_state == 23){
 21607  003A44  0E17               	movlw	23
 21608  003A46  0100               	movlb	0	; () banked
 21609  003A48  19E6               	xorwf	_cur_state& (0+255),w,b
 21610  003A4A  0100               	movlb	0	; () banked
 21611  003A4C  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
 21612  003A4E  A4D8               	btfss	status,2,c
 21613  003A50  D003               	goto	i2l7688
 21614                           
 21615                           ; BSR set to: 0
 21616                           ;UI.c: 437: change_state_to_menu_22();
 21617  003A52  EC60  F02B         	call	i2_change_state_to_menu_22	;wreg free
 21618                           
 21619                           ;UI.c: 438: }
 21620  003A56  D002               	goto	i2l7690
 21621  003A58                     i2l7688:
 21622                           
 21623                           ;UI.c: 439: else{
 21624                           ;UI.c: 440: change_state_to_menu_12();
 21625  003A58  EC78  F02B         	call	i2_change_state_to_menu_12	;wreg free
 21626  003A5C                     i2l7690:
 21627                           
 21628                           ;UI.c: 441: }
 21629                           ;UI.c: 442: return 0;
 21630  003A5C  0E00               	movlw	0
 21631  003A5E  6E2B               	movwf	?_inputHandler+1,c
 21632  003A60  0E00               	movlw	0
 21633  003A62  6E2A               	movwf	?_inputHandler,c
 21634  003A64  0012               	return	
 21635  003A66                     i2l7694:
 21636                           
 21637                           ;UI.c: 444: if(cur_state == 23){
 21638  003A66  0E17               	movlw	23
 21639  003A68  0100               	movlb	0	; () banked
 21640  003A6A  19E6               	xorwf	_cur_state& (0+255),w,b
 21641  003A6C  0100               	movlb	0	; () banked
 21642  003A6E  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
 21643  003A70  A4D8               	btfss	status,2,c
 21644  003A72  D005               	goto	i2l7702
 21645                           
 21646                           ; BSR set to: 0
 21647                           ;UI.c: 445: return 0;
 21648  003A74  0E00               	movlw	0
 21649  003A76  6E2B               	movwf	?_inputHandler+1,c
 21650  003A78  0E00               	movlw	0
 21651  003A7A  6E2A               	movwf	?_inputHandler,c
 21652                           
 21653                           ; BSR set to: 0
 21654  003A7C  0012               	return	
 21655  003A7E                     i2l7702:
 21656                           
 21657                           ; BSR set to: 0
 21658                           ;UI.c: 447: else{
 21659                           ;UI.c: 448: change_state_to_menu_23();
 21660  003A7E  EC90  F02B         	call	_change_state_to_menu_23	;wreg free
 21661                           
 21662                           ;UI.c: 449: }
 21663                           ;UI.c: 450: return 0;
 21664  003A82  0E00               	movlw	0
 21665  003A84  6E2B               	movwf	?_inputHandler+1,c
 21666  003A86  0E00               	movlw	0
 21667  003A88  6E2A               	movwf	?_inputHandler,c
 21668  003A8A  0012               	return	
 21669  003A8C                     i2l7708:
 21670                           
 21671                           ;UI.c: 453: up = 1;
 21672  003A8C  0E00               	movlw	0
 21673  003A8E  6E76               	movwf	_up+1,c
 21674  003A90  0E01               	movlw	1
 21675  003A92  6E75               	movwf	_up,c
 21676                           
 21677                           ;UI.c: 454: return 1;
 21678  003A94  0E00               	movlw	0
 21679  003A96  6E2B               	movwf	?_inputHandler+1,c
 21680  003A98  0E01               	movlw	1
 21681  003A9A  6E2A               	movwf	?_inputHandler,c
 21682  003A9C  0012               	return	
 21683  003A9E                     i2l7712:
 21684                           
 21685                           ;UI.c: 456: down = 1;
 21686  003A9E  0E00               	movlw	0
 21687  003AA0  6E5E               	movwf	_down+1,c
 21688  003AA2  0E01               	movlw	1
 21689  003AA4  6E5D               	movwf	_down,c
 21690                           
 21691                           ;UI.c: 457: return 1;
 21692  003AA6  0E00               	movlw	0
 21693  003AA8  6E2B               	movwf	?_inputHandler+1,c
 21694  003AAA  0E01               	movlw	1
 21695  003AAC  6E2A               	movwf	?_inputHandler,c
 21696  003AAE  0012               	return	
 21697  003AB0                     i2l7716:
 21698                           
 21699                           ;UI.c: 459: enter = 1;
 21700  003AB0  0E00               	movlw	0
 21701  003AB2  6E60               	movwf	_enter+1,c
 21702  003AB4  0E01               	movlw	1
 21703  003AB6  6E5F               	movwf	_enter,c
 21704                           
 21705                           ;UI.c: 460: return 1;
 21706  003AB8  0E00               	movlw	0
 21707  003ABA  6E2B               	movwf	?_inputHandler+1,c
 21708  003ABC  0E01               	movlw	1
 21709  003ABE  6E2A               	movwf	?_inputHandler,c
 21710  003AC0  0012               	return	
 21711  003AC2                     i2l7720:
 21712                           
 21713                           ;UI.c: 462: back = 1;
 21714  003AC2  0E00               	movlw	0
 21715  003AC4  6E5C               	movwf	_back+1,c
 21716  003AC6  0E01               	movlw	1
 21717  003AC8  6E5B               	movwf	_back,c
 21718                           
 21719                           ;UI.c: 463: return 1;
 21720  003ACA  0E00               	movlw	0
 21721  003ACC  6E2B               	movwf	?_inputHandler+1,c
 21722  003ACE  0E01               	movlw	1
 21723  003AD0  6E2A               	movwf	?_inputHandler,c
 21724  003AD2  0012               	return	
 21725  003AD4                     i2l7724:
 21726                           
 21727                           ;UI.c: 466: return 1;
 21728  003AD4  0E00               	movlw	0
 21729  003AD6  6E2B               	movwf	?_inputHandler+1,c
 21730  003AD8  0E01               	movlw	1
 21731  003ADA  6E2A               	movwf	?_inputHandler,c
 21732                           
 21733                           ;UI.c: 467: }
 21734  003ADC  0012               	return	
 21735  003ADE                     i2l7730:
 21736  003ADE  507D               	movf	_input,w,c	;volatile
 21737                           
 21738                           ; Switch size 1, requested type "space"
 21739                           ; Number of cases is 7, Range of values is 49 to 68
 21740                           ; switch strategies available:
 21741                           ; Name         Instructions Cycles
 21742                           ; simple_byte           22    12 (average)
 21743                           ;	Chosen strategy is simple_byte
 21744  003AE0  0A31               	xorlw	49	; case 49
 21745  003AE2  B4D8               	btfsc	status,2,c
 21746  003AE4  D789               	goto	i2l7660
 21747  003AE6  0A03               	xorlw	3	; case 50
 21748  003AE8  B4D8               	btfsc	status,2,c
 21749  003AEA  D799               	goto	i2l7674
 21750  003AEC  0A01               	xorlw	1	; case 51
 21751  003AEE  B4D8               	btfsc	status,2,c
 21752  003AF0  D7BA               	goto	i2l7694
 21753  003AF2  0A72               	xorlw	114	; case 65
 21754  003AF4  B4D8               	btfsc	status,2,c
 21755  003AF6  D7CA               	goto	i2l7708
 21756  003AF8  0A03               	xorlw	3	; case 66
 21757  003AFA  B4D8               	btfsc	status,2,c
 21758  003AFC  D7D0               	goto	i2l7712
 21759  003AFE  0A01               	xorlw	1	; case 67
 21760  003B00  B4D8               	btfsc	status,2,c
 21761  003B02  D7D6               	goto	i2l7716
 21762  003B04  0A07               	xorlw	7	; case 68
 21763  003B06  B4D8               	btfsc	status,2,c
 21764  003B08  D7DC               	goto	i2l7720
 21765  003B0A  D7E4               	goto	i2l7724
 21766  003B0C                     __end_of_inputHandler:
 21767                           	opt stack 0
 21768                           pclatu	equ	0xFFB
 21769                           pclath	equ	0xFFA
 21770                           tblptru	equ	0xFF8
 21771                           tblptrh	equ	0xFF7
 21772                           tblptrl	equ	0xFF6
 21773                           tablat	equ	0xFF5
 21774                           prodh	equ	0xFF4
 21775                           prodl	equ	0xFF3
 21776                           intcon	equ	0xFF2
 21777                           intcon2	equ	0xFF1
 21778                           intcon3	equ	0xFF0
 21779                           indf0	equ	0xFEF
 21780                           postinc0	equ	0xFEE
 21781                           fsr0h	equ	0xFEA
 21782                           fsr0l	equ	0xFE9
 21783                           wreg	equ	0xFE8
 21784                           postdec1	equ	0xFE5
 21785                           fsr1h	equ	0xFE2
 21786                           fsr1l	equ	0xFE1
 21787                           indf2	equ	0xFDF
 21788                           postinc2	equ	0xFDE
 21789                           postdec2	equ	0xFDD
 21790                           fsr2h	equ	0xFDA
 21791                           fsr2l	equ	0xFD9
 21792                           status	equ	0xFD8
 21793                           
 21794 ;; *************** function i2_change_state_to_menu_22 *****************
 21795 ;; Defined at:
 21796 ;;		line 501 in file "UI.c"
 21797 ;; Parameters:    Size  Location     Type
 21798 ;;		None
 21799 ;; Auto vars:     Size  Location     Type
 21800 ;;		None
 21801 ;; Return value:  Size  Location     Type
 21802 ;;                  1    wreg      void 
 21803 ;; Registers used:
 21804 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21805 ;; Tracked objects:
 21806 ;;		On entry : 0/0
 21807 ;;		On exit  : 0/0
 21808 ;;		Unchanged: 0/0
 21809 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21810 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21811 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21812 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21813 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21814 ;;Total ram usage:        0 bytes
 21815 ;; Hardware stack levels used:    1
 21816 ;; Hardware stack levels required when called:    3
 21817 ;; This function calls:
 21818 ;;		i2_lcdInst
 21819 ;;		i2_printf
 21820 ;; This function is called by:
 21821 ;;		_updateMenu
 21822 ;;		_inputHandler
 21823 ;; This function uses a non-reentrant model
 21824 ;;
 21825                           
 21826                           	psect	text72
 21827  0056C0                     __ptext72:
 21828                           	opt stack 0
 21829  0056C0                     i2_change_state_to_menu_22:
 21830                           	opt stack 19
 21831                           
 21832                           ;UI.c: 502: cur_state = 22;
 21833                           
 21834                           ;incstack = 0
 21835  0056C0  0E00               	movlw	0
 21836  0056C2  0100               	movlb	0	; () banked
 21837  0056C4  6FE7               	movwf	(_cur_state+1)& (0+255),b
 21838  0056C6  0E16               	movlw	22
 21839  0056C8  6FE6               	movwf	_cur_state& (0+255),b
 21840                           
 21841                           ; BSR set to: 0
 21842                           ;UI.c: 504: lcdInst(0b10000000);;
 21843  0056CA  0E80               	movlw	128
 21844  0056CC  EC94  F02D         	call	i2_lcdInst
 21845                           
 21846                           ;UI.c: 505: printf("2. SORT        <");
 21847  0056D0  0EBF               	movlw	low STR_34
 21848  0056D2  6E0D               	movwf	i2printf@f,c
 21849  0056D4  0EFD               	movlw	high STR_34
 21850  0056D6  6E0E               	movwf	i2printf@f+1,c
 21851  0056D8  ECA2  F011         	call	i2_printf	;wreg free
 21852                           
 21853                           ;UI.c: 506: lcdInst(0b11000000);;
 21854  0056DC  0EC0               	movlw	192
 21855  0056DE  EC94  F02D         	call	i2_lcdInst
 21856                           
 21857                           ;UI.c: 507: printf("3. LOGS         ");
 21858  0056E2  0E04               	movlw	low STR_36
 21859  0056E4  6E0D               	movwf	i2printf@f,c
 21860  0056E6  0EFD               	movlw	high STR_36
 21861  0056E8  6E0E               	movwf	i2printf@f+1,c
 21862  0056EA  ECA2  F011         	call	i2_printf	;wreg free
 21863  0056EE  0012               	return		;funcret
 21864  0056F0                     __end_ofi2_change_state_to_menu_22:
 21865                           	opt stack 0
 21866                           pclatu	equ	0xFFB
 21867                           pclath	equ	0xFFA
 21868                           tblptru	equ	0xFF8
 21869                           tblptrh	equ	0xFF7
 21870                           tblptrl	equ	0xFF6
 21871                           tablat	equ	0xFF5
 21872                           prodh	equ	0xFF4
 21873                           prodl	equ	0xFF3
 21874                           intcon	equ	0xFF2
 21875                           intcon2	equ	0xFF1
 21876                           intcon3	equ	0xFF0
 21877                           indf0	equ	0xFEF
 21878                           postinc0	equ	0xFEE
 21879                           fsr0h	equ	0xFEA
 21880                           fsr0l	equ	0xFE9
 21881                           wreg	equ	0xFE8
 21882                           postdec1	equ	0xFE5
 21883                           fsr1h	equ	0xFE2
 21884                           fsr1l	equ	0xFE1
 21885                           indf2	equ	0xFDF
 21886                           postinc2	equ	0xFDE
 21887                           postdec2	equ	0xFDD
 21888                           fsr2h	equ	0xFDA
 21889                           fsr2l	equ	0xFD9
 21890                           status	equ	0xFD8
 21891                           
 21892 ;; *************** function i2_change_state_to_menu_12 *****************
 21893 ;; Defined at:
 21894 ;;		line 493 in file "UI.c"
 21895 ;; Parameters:    Size  Location     Type
 21896 ;;		None
 21897 ;; Auto vars:     Size  Location     Type
 21898 ;;		None
 21899 ;; Return value:  Size  Location     Type
 21900 ;;                  1    wreg      void 
 21901 ;; Registers used:
 21902 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21903 ;; Tracked objects:
 21904 ;;		On entry : 0/0
 21905 ;;		On exit  : 0/0
 21906 ;;		Unchanged: 0/0
 21907 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21908 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21909 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21910 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21911 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21912 ;;Total ram usage:        0 bytes
 21913 ;; Hardware stack levels used:    1
 21914 ;; Hardware stack levels required when called:    3
 21915 ;; This function calls:
 21916 ;;		i2_lcdInst
 21917 ;;		i2_printf
 21918 ;; This function is called by:
 21919 ;;		_updateMenu
 21920 ;;		_inputHandler
 21921 ;; This function uses a non-reentrant model
 21922 ;;
 21923                           
 21924                           	psect	text73
 21925  0056F0                     __ptext73:
 21926                           	opt stack 0
 21927  0056F0                     i2_change_state_to_menu_12:
 21928                           	opt stack 19
 21929                           
 21930                           ;UI.c: 494: cur_state = 12;
 21931                           
 21932                           ;incstack = 0
 21933  0056F0  0E00               	movlw	0
 21934  0056F2  0100               	movlb	0	; () banked
 21935  0056F4  6FE7               	movwf	(_cur_state+1)& (0+255),b
 21936  0056F6  0E0C               	movlw	12
 21937  0056F8  6FE6               	movwf	_cur_state& (0+255),b
 21938                           
 21939                           ; BSR set to: 0
 21940                           ;UI.c: 496: lcdInst(0b10000000);;
 21941  0056FA  0E80               	movlw	128
 21942  0056FC  EC94  F02D         	call	i2_lcdInst
 21943                           
 21944                           ;UI.c: 497: printf("1. DATE/TIME    ");
 21945  005700  0E26               	movlw	low STR_33
 21946  005702  6E0D               	movwf	i2printf@f,c
 21947  005704  0EFD               	movlw	high STR_33
 21948  005706  6E0E               	movwf	i2printf@f+1,c
 21949  005708  ECA2  F011         	call	i2_printf	;wreg free
 21950                           
 21951                           ;UI.c: 498: lcdInst(0b11000000);;
 21952  00570C  0EC0               	movlw	192
 21953  00570E  EC94  F02D         	call	i2_lcdInst
 21954                           
 21955                           ;UI.c: 499: printf("2. SORT        <");
 21956  005712  0EBF               	movlw	low STR_34
 21957  005714  6E0D               	movwf	i2printf@f,c
 21958  005716  0EFD               	movlw	high STR_34
 21959  005718  6E0E               	movwf	i2printf@f+1,c
 21960  00571A  ECA2  F011         	call	i2_printf	;wreg free
 21961  00571E  0012               	return		;funcret
 21962  005720                     __end_ofi2_change_state_to_menu_12:
 21963                           	opt stack 0
 21964                           pclatu	equ	0xFFB
 21965                           pclath	equ	0xFFA
 21966                           tblptru	equ	0xFF8
 21967                           tblptrh	equ	0xFF7
 21968                           tblptrl	equ	0xFF6
 21969                           tablat	equ	0xFF5
 21970                           prodh	equ	0xFF4
 21971                           prodl	equ	0xFF3
 21972                           intcon	equ	0xFF2
 21973                           intcon2	equ	0xFF1
 21974                           intcon3	equ	0xFF0
 21975                           indf0	equ	0xFEF
 21976                           postinc0	equ	0xFEE
 21977                           fsr0h	equ	0xFEA
 21978                           fsr0l	equ	0xFE9
 21979                           wreg	equ	0xFE8
 21980                           postdec1	equ	0xFE5
 21981                           fsr1h	equ	0xFE2
 21982                           fsr1l	equ	0xFE1
 21983                           indf2	equ	0xFDF
 21984                           postinc2	equ	0xFDE
 21985                           postdec2	equ	0xFDD
 21986                           fsr2h	equ	0xFDA
 21987                           fsr2l	equ	0xFD9
 21988                           status	equ	0xFD8
 21989                           
 21990 ;; *************** function _change_state_to_menu_23 *****************
 21991 ;; Defined at:
 21992 ;;		line 509 in file "UI.c"
 21993 ;; Parameters:    Size  Location     Type
 21994 ;;		None
 21995 ;; Auto vars:     Size  Location     Type
 21996 ;;		None
 21997 ;; Return value:  Size  Location     Type
 21998 ;;                  1    wreg      void 
 21999 ;; Registers used:
 22000 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22001 ;; Tracked objects:
 22002 ;;		On entry : 0/0
 22003 ;;		On exit  : 0/0
 22004 ;;		Unchanged: 0/0
 22005 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22006 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22007 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22008 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22009 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22010 ;;Total ram usage:        0 bytes
 22011 ;; Hardware stack levels used:    1
 22012 ;; Hardware stack levels required when called:    3
 22013 ;; This function calls:
 22014 ;;		i2_lcdInst
 22015 ;;		i2_printf
 22016 ;; This function is called by:
 22017 ;;		_updateMenu
 22018 ;;		_inputHandler
 22019 ;; This function uses a non-reentrant model
 22020 ;;
 22021                           
 22022                           	psect	text74
 22023  005720                     __ptext74:
 22024                           	opt stack 0
 22025  005720                     _change_state_to_menu_23:
 22026                           	opt stack 18
 22027                           
 22028                           ;UI.c: 510: cur_state = 23;
 22029                           
 22030                           ;incstack = 0
 22031  005720  0E00               	movlw	0
 22032  005722  0100               	movlb	0	; () banked
 22033  005724  6FE7               	movwf	(_cur_state+1)& (0+255),b
 22034  005726  0E17               	movlw	23
 22035  005728  6FE6               	movwf	_cur_state& (0+255),b
 22036                           
 22037                           ; BSR set to: 0
 22038                           ;UI.c: 512: lcdInst(0b10000000);;
 22039  00572A  0E80               	movlw	128
 22040  00572C  EC94  F02D         	call	i2_lcdInst
 22041                           
 22042                           ;UI.c: 513: printf("2. SORT         ");
 22043  005730  0E15               	movlw	low STR_32
 22044  005732  6E0D               	movwf	i2printf@f,c
 22045  005734  0EFD               	movlw	high STR_32
 22046  005736  6E0E               	movwf	i2printf@f+1,c
 22047  005738  ECA2  F011         	call	i2_printf	;wreg free
 22048                           
 22049                           ;UI.c: 514: lcdInst(0b11000000);;
 22050  00573C  0EC0               	movlw	192
 22051  00573E  EC94  F02D         	call	i2_lcdInst
 22052                           
 22053                           ;UI.c: 515: printf("3. LOGS        <");
 22054  005742  0EAE               	movlw	low STR_38
 22055  005744  6E0D               	movwf	i2printf@f,c
 22056  005746  0EFD               	movlw	high STR_38
 22057  005748  6E0E               	movwf	i2printf@f+1,c
 22058  00574A  ECA2  F011         	call	i2_printf	;wreg free
 22059  00574E  0012               	return		;funcret
 22060  005750                     __end_of_change_state_to_menu_23:
 22061                           	opt stack 0
 22062                           pclatu	equ	0xFFB
 22063                           pclath	equ	0xFFA
 22064                           tblptru	equ	0xFF8
 22065                           tblptrh	equ	0xFF7
 22066                           tblptrl	equ	0xFF6
 22067                           tablat	equ	0xFF5
 22068                           prodh	equ	0xFF4
 22069                           prodl	equ	0xFF3
 22070                           intcon	equ	0xFF2
 22071                           intcon2	equ	0xFF1
 22072                           intcon3	equ	0xFF0
 22073                           indf0	equ	0xFEF
 22074                           postinc0	equ	0xFEE
 22075                           fsr0h	equ	0xFEA
 22076                           fsr0l	equ	0xFE9
 22077                           wreg	equ	0xFE8
 22078                           postdec1	equ	0xFE5
 22079                           fsr1h	equ	0xFE2
 22080                           fsr1l	equ	0xFE1
 22081                           indf2	equ	0xFDF
 22082                           postinc2	equ	0xFDE
 22083                           postdec2	equ	0xFDD
 22084                           fsr2h	equ	0xFDA
 22085                           fsr2l	equ	0xFD9
 22086                           status	equ	0xFD8
 22087                           
 22088 ;; *************** function _change_state_to_menu_11 *****************
 22089 ;; Defined at:
 22090 ;;		line 485 in file "UI.c"
 22091 ;; Parameters:    Size  Location     Type
 22092 ;;		None
 22093 ;; Auto vars:     Size  Location     Type
 22094 ;;		None
 22095 ;; Return value:  Size  Location     Type
 22096 ;;                  1    wreg      void 
 22097 ;; Registers used:
 22098 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22099 ;; Tracked objects:
 22100 ;;		On entry : 0/0
 22101 ;;		On exit  : 0/0
 22102 ;;		Unchanged: 0/0
 22103 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22104 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22105 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22106 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22107 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22108 ;;Total ram usage:        0 bytes
 22109 ;; Hardware stack levels used:    1
 22110 ;; Hardware stack levels required when called:    3
 22111 ;; This function calls:
 22112 ;;		i2_lcdInst
 22113 ;;		i2_printf
 22114 ;; This function is called by:
 22115 ;;		_updateMenu
 22116 ;;		_inputHandler
 22117 ;; This function uses a non-reentrant model
 22118 ;;
 22119                           
 22120                           	psect	text75
 22121  005750                     __ptext75:
 22122                           	opt stack 0
 22123  005750                     _change_state_to_menu_11:
 22124                           	opt stack 18
 22125                           
 22126                           ;UI.c: 486: cur_state = 11;
 22127                           
 22128                           ;incstack = 0
 22129  005750  0E00               	movlw	0
 22130  005752  0100               	movlb	0	; () banked
 22131  005754  6FE7               	movwf	(_cur_state+1)& (0+255),b
 22132  005756  0E0B               	movlw	11
 22133  005758  6FE6               	movwf	_cur_state& (0+255),b
 22134                           
 22135                           ; BSR set to: 0
 22136                           ;UI.c: 488: lcdInst(0b10000000);;
 22137  00575A  0E80               	movlw	128
 22138  00575C  EC94  F02D         	call	i2_lcdInst
 22139                           
 22140                           ;UI.c: 489: printf("1. DATE/TIME   <");
 22141  005760  0ED0               	movlw	low STR_31
 22142  005762  6E0D               	movwf	i2printf@f,c
 22143  005764  0EFD               	movlw	high STR_31
 22144  005766  6E0E               	movwf	i2printf@f+1,c
 22145  005768  ECA2  F011         	call	i2_printf	;wreg free
 22146                           
 22147                           ;UI.c: 490: lcdInst(0b11000000);;
 22148  00576C  0EC0               	movlw	192
 22149  00576E  EC94  F02D         	call	i2_lcdInst
 22150                           
 22151                           ;UI.c: 491: printf("2. SORT         ");
 22152  005772  0E15               	movlw	low STR_32
 22153  005774  6E0D               	movwf	i2printf@f,c
 22154  005776  0EFD               	movlw	high STR_32
 22155  005778  6E0E               	movwf	i2printf@f+1,c
 22156  00577A  ECA2  F011         	call	i2_printf	;wreg free
 22157  00577E  0012               	return		;funcret
 22158  005780                     __end_of_change_state_to_menu_11:
 22159                           	opt stack 0
 22160                           pclatu	equ	0xFFB
 22161                           pclath	equ	0xFFA
 22162                           tblptru	equ	0xFF8
 22163                           tblptrh	equ	0xFF7
 22164                           tblptrl	equ	0xFF6
 22165                           tablat	equ	0xFF5
 22166                           prodh	equ	0xFF4
 22167                           prodl	equ	0xFF3
 22168                           intcon	equ	0xFF2
 22169                           intcon2	equ	0xFF1
 22170                           intcon3	equ	0xFF0
 22171                           indf0	equ	0xFEF
 22172                           postinc0	equ	0xFEE
 22173                           fsr0h	equ	0xFEA
 22174                           fsr0l	equ	0xFE9
 22175                           wreg	equ	0xFE8
 22176                           postdec1	equ	0xFE5
 22177                           fsr1h	equ	0xFE2
 22178                           fsr1l	equ	0xFE1
 22179                           indf2	equ	0xFDF
 22180                           postinc2	equ	0xFDE
 22181                           postdec2	equ	0xFDD
 22182                           fsr2h	equ	0xFDA
 22183                           fsr2l	equ	0xFD9
 22184                           status	equ	0xFD8
 22185                           
 22186 ;; *************** function _change_state_to_logs_34 *****************
 22187 ;; Defined at:
 22188 ;;		line 552 in file "UI.c"
 22189 ;; Parameters:    Size  Location     Type
 22190 ;;		None
 22191 ;; Auto vars:     Size  Location     Type
 22192 ;;		None
 22193 ;; Return value:  Size  Location     Type
 22194 ;;                  1    wreg      void 
 22195 ;; Registers used:
 22196 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22197 ;; Tracked objects:
 22198 ;;		On entry : 0/0
 22199 ;;		On exit  : 0/0
 22200 ;;		Unchanged: 0/0
 22201 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22202 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22203 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22204 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22205 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22206 ;;Total ram usage:        0 bytes
 22207 ;; Hardware stack levels used:    1
 22208 ;; Hardware stack levels required when called:    3
 22209 ;; This function calls:
 22210 ;;		i2_lcdInst
 22211 ;;		i2_printf
 22212 ;; This function is called by:
 22213 ;;		_updateMenu
 22214 ;;		_inputHandler
 22215 ;; This function uses a non-reentrant model
 22216 ;;
 22217                           
 22218                           	psect	text76
 22219  005780                     __ptext76:
 22220                           	opt stack 0
 22221  005780                     _change_state_to_logs_34:
 22222                           	opt stack 18
 22223                           
 22224                           ;UI.c: 553: cur_state = 1034;
 22225                           
 22226                           ;incstack = 0
 22227  005780  0E04               	movlw	4
 22228  005782  0100               	movlb	0	; () banked
 22229  005784  6FE7               	movwf	(_cur_state+1)& (0+255),b
 22230  005786  0E0A               	movlw	10
 22231  005788  6FE6               	movwf	_cur_state& (0+255),b
 22232                           
 22233                           ; BSR set to: 0
 22234                           ;UI.c: 554: lcdInst(0b10000000);;
 22235  00578A  0E80               	movlw	128
 22236  00578C  EC94  F02D         	call	i2_lcdInst
 22237                           
 22238                           ;UI.c: 555: printf("LOG 3           ");
 22239  005790  0EE2               	movlw	low STR_44
 22240  005792  6E0D               	movwf	i2printf@f,c
 22241  005794  0EFC               	movlw	high STR_44
 22242  005796  6E0E               	movwf	i2printf@f+1,c
 22243  005798  ECA2  F011         	call	i2_printf	;wreg free
 22244                           
 22245                           ;UI.c: 556: lcdInst(0b11000000);;
 22246  00579C  0EC0               	movlw	192
 22247  00579E  EC94  F02D         	call	i2_lcdInst
 22248                           
 22249                           ;UI.c: 557: printf("LOG 4          <");
 22250  0057A2  0E9D               	movlw	low STR_50
 22251  0057A4  6E0D               	movwf	i2printf@f,c
 22252  0057A6  0EFD               	movlw	high STR_50
 22253  0057A8  6E0E               	movwf	i2printf@f+1,c
 22254  0057AA  ECA2  F011         	call	i2_printf	;wreg free
 22255  0057AE  0012               	return		;funcret
 22256  0057B0                     __end_of_change_state_to_logs_34:
 22257                           	opt stack 0
 22258                           pclatu	equ	0xFFB
 22259                           pclath	equ	0xFFA
 22260                           tblptru	equ	0xFF8
 22261                           tblptrh	equ	0xFF7
 22262                           tblptrl	equ	0xFF6
 22263                           tablat	equ	0xFF5
 22264                           prodh	equ	0xFF4
 22265                           prodl	equ	0xFF3
 22266                           intcon	equ	0xFF2
 22267                           intcon2	equ	0xFF1
 22268                           intcon3	equ	0xFF0
 22269                           indf0	equ	0xFEF
 22270                           postinc0	equ	0xFEE
 22271                           fsr0h	equ	0xFEA
 22272                           fsr0l	equ	0xFE9
 22273                           wreg	equ	0xFE8
 22274                           postdec1	equ	0xFE5
 22275                           fsr1h	equ	0xFE2
 22276                           fsr1l	equ	0xFE1
 22277                           indf2	equ	0xFDF
 22278                           postinc2	equ	0xFDE
 22279                           postdec2	equ	0xFDD
 22280                           fsr2h	equ	0xFDA
 22281                           fsr2l	equ	0xFD9
 22282                           status	equ	0xFD8
 22283                           
 22284 ;; *************** function _change_state_to_logs_33 *****************
 22285 ;; Defined at:
 22286 ;;		line 545 in file "UI.c"
 22287 ;; Parameters:    Size  Location     Type
 22288 ;;		None
 22289 ;; Auto vars:     Size  Location     Type
 22290 ;;		None
 22291 ;; Return value:  Size  Location     Type
 22292 ;;                  1    wreg      void 
 22293 ;; Registers used:
 22294 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22295 ;; Tracked objects:
 22296 ;;		On entry : 0/0
 22297 ;;		On exit  : 0/0
 22298 ;;		Unchanged: 0/0
 22299 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22300 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22301 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22302 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22303 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22304 ;;Total ram usage:        0 bytes
 22305 ;; Hardware stack levels used:    1
 22306 ;; Hardware stack levels required when called:    3
 22307 ;; This function calls:
 22308 ;;		i2_lcdInst
 22309 ;;		i2_printf
 22310 ;; This function is called by:
 22311 ;;		_updateMenu
 22312 ;;		_inputHandler
 22313 ;; This function uses a non-reentrant model
 22314 ;;
 22315                           
 22316                           	psect	text77
 22317  0057B0                     __ptext77:
 22318                           	opt stack 0
 22319  0057B0                     _change_state_to_logs_33:
 22320                           	opt stack 18
 22321                           
 22322                           ;UI.c: 546: cur_state = 1033;
 22323                           
 22324                           ;incstack = 0
 22325  0057B0  0E04               	movlw	4
 22326  0057B2  0100               	movlb	0	; () banked
 22327  0057B4  6FE7               	movwf	(_cur_state+1)& (0+255),b
 22328  0057B6  0E09               	movlw	9
 22329  0057B8  6FE6               	movwf	_cur_state& (0+255),b
 22330                           
 22331                           ; BSR set to: 0
 22332                           ;UI.c: 547: lcdInst(0b10000000);;
 22333  0057BA  0E80               	movlw	128
 22334  0057BC  EC94  F02D         	call	i2_lcdInst
 22335                           
 22336                           ;UI.c: 548: printf("LOG 3          <");
 22337  0057C0  0E8C               	movlw	low STR_46
 22338  0057C2  6E0D               	movwf	i2printf@f,c
 22339  0057C4  0EFD               	movlw	high STR_46
 22340  0057C6  6E0E               	movwf	i2printf@f+1,c
 22341  0057C8  ECA2  F011         	call	i2_printf	;wreg free
 22342                           
 22343                           ;UI.c: 549: lcdInst(0b11000000);;
 22344  0057CC  0EC0               	movlw	192
 22345  0057CE  EC94  F02D         	call	i2_lcdInst
 22346                           
 22347                           ;UI.c: 550: printf("LOG 4           ");
 22348  0057D2  0EF3               	movlw	low STR_48
 22349  0057D4  6E0D               	movwf	i2printf@f,c
 22350  0057D6  0EFC               	movlw	high STR_48
 22351  0057D8  6E0E               	movwf	i2printf@f+1,c
 22352  0057DA  ECA2  F011         	call	i2_printf	;wreg free
 22353  0057DE  0012               	return		;funcret
 22354  0057E0                     __end_of_change_state_to_logs_33:
 22355                           	opt stack 0
 22356                           pclatu	equ	0xFFB
 22357                           pclath	equ	0xFFA
 22358                           tblptru	equ	0xFF8
 22359                           tblptrh	equ	0xFF7
 22360                           tblptrl	equ	0xFF6
 22361                           tablat	equ	0xFF5
 22362                           prodh	equ	0xFF4
 22363                           prodl	equ	0xFF3
 22364                           intcon	equ	0xFF2
 22365                           intcon2	equ	0xFF1
 22366                           intcon3	equ	0xFF0
 22367                           indf0	equ	0xFEF
 22368                           postinc0	equ	0xFEE
 22369                           fsr0h	equ	0xFEA
 22370                           fsr0l	equ	0xFE9
 22371                           wreg	equ	0xFE8
 22372                           postdec1	equ	0xFE5
 22373                           fsr1h	equ	0xFE2
 22374                           fsr1l	equ	0xFE1
 22375                           indf2	equ	0xFDF
 22376                           postinc2	equ	0xFDE
 22377                           postdec2	equ	0xFDD
 22378                           fsr2h	equ	0xFDA
 22379                           fsr2l	equ	0xFD9
 22380                           status	equ	0xFD8
 22381                           
 22382 ;; *************** function _change_state_to_logs_23 *****************
 22383 ;; Defined at:
 22384 ;;		line 538 in file "UI.c"
 22385 ;; Parameters:    Size  Location     Type
 22386 ;;		None
 22387 ;; Auto vars:     Size  Location     Type
 22388 ;;		None
 22389 ;; Return value:  Size  Location     Type
 22390 ;;                  1    wreg      void 
 22391 ;; Registers used:
 22392 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22393 ;; Tracked objects:
 22394 ;;		On entry : 0/0
 22395 ;;		On exit  : 0/0
 22396 ;;		Unchanged: 0/0
 22397 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22398 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22399 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22400 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22401 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22402 ;;Total ram usage:        0 bytes
 22403 ;; Hardware stack levels used:    1
 22404 ;; Hardware stack levels required when called:    3
 22405 ;; This function calls:
 22406 ;;		i2_lcdInst
 22407 ;;		i2_printf
 22408 ;; This function is called by:
 22409 ;;		_updateMenu
 22410 ;;		_inputHandler
 22411 ;; This function uses a non-reentrant model
 22412 ;;
 22413                           
 22414                           	psect	text78
 22415  00589E                     __ptext78:
 22416                           	opt stack 0
 22417  00589E                     _change_state_to_logs_23:
 22418                           	opt stack 18
 22419                           
 22420                           ;UI.c: 539: cur_state = 1023;
 22421                           
 22422                           ;incstack = 0
 22423  00589E  0E03               	movlw	3
 22424  0058A0  0100               	movlb	0	; () banked
 22425  0058A2  6FE7               	movwf	(_cur_state+1)& (0+255),b
 22426  0058A4  69E6               	setf	_cur_state& (0+255),b
 22427                           
 22428                           ; BSR set to: 0
 22429                           ;UI.c: 540: lcdInst(0b10000000);;
 22430  0058A6  0E80               	movlw	128
 22431  0058A8  EC94  F02D         	call	i2_lcdInst
 22432                           
 22433                           ;UI.c: 541: printf("LOG 2           ");
 22434  0058AC  0ED1               	movlw	low STR_40
 22435  0058AE  6E0D               	movwf	i2printf@f,c
 22436  0058B0  0EFC               	movlw	high STR_40
 22437  0058B2  6E0E               	movwf	i2printf@f+1,c
 22438  0058B4  ECA2  F011         	call	i2_printf	;wreg free
 22439                           
 22440                           ;UI.c: 542: lcdInst(0b11000000);;
 22441  0058B8  0EC0               	movlw	192
 22442  0058BA  EC94  F02D         	call	i2_lcdInst
 22443                           
 22444                           ;UI.c: 543: printf("LOG 3          <");
 22445  0058BE  0E8C               	movlw	low STR_46
 22446  0058C0  6E0D               	movwf	i2printf@f,c
 22447  0058C2  0EFD               	movlw	high STR_46
 22448  0058C4  6E0E               	movwf	i2printf@f+1,c
 22449  0058C6  ECA2  F011         	call	i2_printf	;wreg free
 22450  0058CA  0012               	return		;funcret
 22451  0058CC                     __end_of_change_state_to_logs_23:
 22452                           	opt stack 0
 22453                           pclatu	equ	0xFFB
 22454                           pclath	equ	0xFFA
 22455                           tblptru	equ	0xFF8
 22456                           tblptrh	equ	0xFF7
 22457                           tblptrl	equ	0xFF6
 22458                           tablat	equ	0xFF5
 22459                           prodh	equ	0xFF4
 22460                           prodl	equ	0xFF3
 22461                           intcon	equ	0xFF2
 22462                           intcon2	equ	0xFF1
 22463                           intcon3	equ	0xFF0
 22464                           indf0	equ	0xFEF
 22465                           postinc0	equ	0xFEE
 22466                           fsr0h	equ	0xFEA
 22467                           fsr0l	equ	0xFE9
 22468                           wreg	equ	0xFE8
 22469                           postdec1	equ	0xFE5
 22470                           fsr1h	equ	0xFE2
 22471                           fsr1l	equ	0xFE1
 22472                           indf2	equ	0xFDF
 22473                           postinc2	equ	0xFDE
 22474                           postdec2	equ	0xFDD
 22475                           fsr2h	equ	0xFDA
 22476                           fsr2l	equ	0xFD9
 22477                           status	equ	0xFD8
 22478                           
 22479 ;; *************** function _change_state_to_logs_22 *****************
 22480 ;; Defined at:
 22481 ;;		line 531 in file "UI.c"
 22482 ;; Parameters:    Size  Location     Type
 22483 ;;		None
 22484 ;; Auto vars:     Size  Location     Type
 22485 ;;		None
 22486 ;; Return value:  Size  Location     Type
 22487 ;;                  1    wreg      void 
 22488 ;; Registers used:
 22489 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22490 ;; Tracked objects:
 22491 ;;		On entry : 0/0
 22492 ;;		On exit  : 0/0
 22493 ;;		Unchanged: 0/0
 22494 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22495 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22496 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22497 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22498 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22499 ;;Total ram usage:        0 bytes
 22500 ;; Hardware stack levels used:    1
 22501 ;; Hardware stack levels required when called:    3
 22502 ;; This function calls:
 22503 ;;		i2_lcdInst
 22504 ;;		i2_printf
 22505 ;; This function is called by:
 22506 ;;		_updateMenu
 22507 ;;		_inputHandler
 22508 ;; This function uses a non-reentrant model
 22509 ;;
 22510                           
 22511                           	psect	text79
 22512  0057E0                     __ptext79:
 22513                           	opt stack 0
 22514  0057E0                     _change_state_to_logs_22:
 22515                           	opt stack 18
 22516                           
 22517                           ;UI.c: 532: cur_state = 1022;
 22518                           
 22519                           ;incstack = 0
 22520  0057E0  0E03               	movlw	3
 22521  0057E2  0100               	movlb	0	; () banked
 22522  0057E4  6FE7               	movwf	(_cur_state+1)& (0+255),b
 22523  0057E6  0EFE               	movlw	254
 22524  0057E8  6FE6               	movwf	_cur_state& (0+255),b
 22525                           
 22526                           ; BSR set to: 0
 22527                           ;UI.c: 533: lcdInst(0b10000000);;
 22528  0057EA  0E80               	movlw	128
 22529  0057EC  EC94  F02D         	call	i2_lcdInst
 22530                           
 22531                           ;UI.c: 534: printf("LOG 2          <");
 22532  0057F0  0E7B               	movlw	low STR_42
 22533  0057F2  6E0D               	movwf	i2printf@f,c
 22534  0057F4  0EFD               	movlw	high STR_42
 22535  0057F6  6E0E               	movwf	i2printf@f+1,c
 22536  0057F8  ECA2  F011         	call	i2_printf	;wreg free
 22537                           
 22538                           ;UI.c: 535: lcdInst(0b11000000);;
 22539  0057FC  0EC0               	movlw	192
 22540  0057FE  EC94  F02D         	call	i2_lcdInst
 22541                           
 22542                           ;UI.c: 536: printf("LOG 3           ");
 22543  005802  0EE2               	movlw	low STR_44
 22544  005804  6E0D               	movwf	i2printf@f,c
 22545  005806  0EFC               	movlw	high STR_44
 22546  005808  6E0E               	movwf	i2printf@f+1,c
 22547  00580A  ECA2  F011         	call	i2_printf	;wreg free
 22548  00580E  0012               	return		;funcret
 22549  005810                     __end_of_change_state_to_logs_22:
 22550                           	opt stack 0
 22551                           pclatu	equ	0xFFB
 22552                           pclath	equ	0xFFA
 22553                           tblptru	equ	0xFF8
 22554                           tblptrh	equ	0xFF7
 22555                           tblptrl	equ	0xFF6
 22556                           tablat	equ	0xFF5
 22557                           prodh	equ	0xFF4
 22558                           prodl	equ	0xFF3
 22559                           intcon	equ	0xFF2
 22560                           intcon2	equ	0xFF1
 22561                           intcon3	equ	0xFF0
 22562                           indf0	equ	0xFEF
 22563                           postinc0	equ	0xFEE
 22564                           fsr0h	equ	0xFEA
 22565                           fsr0l	equ	0xFE9
 22566                           wreg	equ	0xFE8
 22567                           postdec1	equ	0xFE5
 22568                           fsr1h	equ	0xFE2
 22569                           fsr1l	equ	0xFE1
 22570                           indf2	equ	0xFDF
 22571                           postinc2	equ	0xFDE
 22572                           postdec2	equ	0xFDD
 22573                           fsr2h	equ	0xFDA
 22574                           fsr2l	equ	0xFD9
 22575                           status	equ	0xFD8
 22576                           
 22577 ;; *************** function _change_state_to_logs_12 *****************
 22578 ;; Defined at:
 22579 ;;		line 524 in file "UI.c"
 22580 ;; Parameters:    Size  Location     Type
 22581 ;;		None
 22582 ;; Auto vars:     Size  Location     Type
 22583 ;;		None
 22584 ;; Return value:  Size  Location     Type
 22585 ;;                  1    wreg      void 
 22586 ;; Registers used:
 22587 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22588 ;; Tracked objects:
 22589 ;;		On entry : 0/0
 22590 ;;		On exit  : 0/0
 22591 ;;		Unchanged: 0/0
 22592 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22593 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22594 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22595 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22596 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22597 ;;Total ram usage:        0 bytes
 22598 ;; Hardware stack levels used:    1
 22599 ;; Hardware stack levels required when called:    3
 22600 ;; This function calls:
 22601 ;;		i2_lcdInst
 22602 ;;		i2_printf
 22603 ;; This function is called by:
 22604 ;;		_updateMenu
 22605 ;;		_inputHandler
 22606 ;; This function uses a non-reentrant model
 22607 ;;
 22608                           
 22609                           	psect	text80
 22610  005810                     __ptext80:
 22611                           	opt stack 0
 22612  005810                     _change_state_to_logs_12:
 22613                           	opt stack 18
 22614                           
 22615                           ;UI.c: 525: cur_state = 1012;
 22616                           
 22617                           ;incstack = 0
 22618  005810  0E03               	movlw	3
 22619  005812  0100               	movlb	0	; () banked
 22620  005814  6FE7               	movwf	(_cur_state+1)& (0+255),b
 22621  005816  0EF4               	movlw	244
 22622  005818  6FE6               	movwf	_cur_state& (0+255),b
 22623                           
 22624                           ; BSR set to: 0
 22625                           ;UI.c: 526: lcdInst(0b10000000);;
 22626  00581A  0E80               	movlw	128
 22627  00581C  EC94  F02D         	call	i2_lcdInst
 22628                           
 22629                           ;UI.c: 527: printf("LOG 1           ");
 22630  005820  0EC0               	movlw	low STR_41
 22631  005822  6E0D               	movwf	i2printf@f,c
 22632  005824  0EFC               	movlw	high STR_41
 22633  005826  6E0E               	movwf	i2printf@f+1,c
 22634  005828  ECA2  F011         	call	i2_printf	;wreg free
 22635                           
 22636                           ;UI.c: 528: lcdInst(0b11000000);;
 22637  00582C  0EC0               	movlw	192
 22638  00582E  EC94  F02D         	call	i2_lcdInst
 22639                           
 22640                           ;UI.c: 529: printf("LOG 2          <");
 22641  005832  0E7B               	movlw	low STR_42
 22642  005834  6E0D               	movwf	i2printf@f,c
 22643  005836  0EFD               	movlw	high STR_42
 22644  005838  6E0E               	movwf	i2printf@f+1,c
 22645  00583A  ECA2  F011         	call	i2_printf	;wreg free
 22646  00583E  0012               	return		;funcret
 22647  005840                     __end_of_change_state_to_logs_12:
 22648                           	opt stack 0
 22649                           pclatu	equ	0xFFB
 22650                           pclath	equ	0xFFA
 22651                           tblptru	equ	0xFF8
 22652                           tblptrh	equ	0xFF7
 22653                           tblptrl	equ	0xFF6
 22654                           tablat	equ	0xFF5
 22655                           prodh	equ	0xFF4
 22656                           prodl	equ	0xFF3
 22657                           intcon	equ	0xFF2
 22658                           intcon2	equ	0xFF1
 22659                           intcon3	equ	0xFF0
 22660                           indf0	equ	0xFEF
 22661                           postinc0	equ	0xFEE
 22662                           fsr0h	equ	0xFEA
 22663                           fsr0l	equ	0xFE9
 22664                           wreg	equ	0xFE8
 22665                           postdec1	equ	0xFE5
 22666                           fsr1h	equ	0xFE2
 22667                           fsr1l	equ	0xFE1
 22668                           indf2	equ	0xFDF
 22669                           postinc2	equ	0xFDE
 22670                           postdec2	equ	0xFDD
 22671                           fsr2h	equ	0xFDA
 22672                           fsr2l	equ	0xFD9
 22673                           status	equ	0xFD8
 22674                           
 22675 ;; *************** function _change_state_to_logs_11 *****************
 22676 ;; Defined at:
 22677 ;;		line 517 in file "UI.c"
 22678 ;; Parameters:    Size  Location     Type
 22679 ;;		None
 22680 ;; Auto vars:     Size  Location     Type
 22681 ;;		None
 22682 ;; Return value:  Size  Location     Type
 22683 ;;                  1    wreg      void 
 22684 ;; Registers used:
 22685 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22686 ;; Tracked objects:
 22687 ;;		On entry : 0/0
 22688 ;;		On exit  : 0/0
 22689 ;;		Unchanged: 0/0
 22690 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22691 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22692 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22693 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22694 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22695 ;;Total ram usage:        0 bytes
 22696 ;; Hardware stack levels used:    1
 22697 ;; Hardware stack levels required when called:    3
 22698 ;; This function calls:
 22699 ;;		i2_lcdInst
 22700 ;;		i2_printf
 22701 ;; This function is called by:
 22702 ;;		_updateMenu
 22703 ;;		_inputHandler
 22704 ;; This function uses a non-reentrant model
 22705 ;;
 22706                           
 22707                           	psect	text81
 22708  005840                     __ptext81:
 22709                           	opt stack 0
 22710  005840                     _change_state_to_logs_11:
 22711                           	opt stack 18
 22712                           
 22713                           ;UI.c: 518: cur_state = 1011;
 22714                           
 22715                           ;incstack = 0
 22716  005840  0E03               	movlw	3
 22717  005842  0100               	movlb	0	; () banked
 22718  005844  6FE7               	movwf	(_cur_state+1)& (0+255),b
 22719  005846  0EF3               	movlw	243
 22720  005848  6FE6               	movwf	_cur_state& (0+255),b
 22721                           
 22722                           ; BSR set to: 0
 22723                           ;UI.c: 519: lcdInst(0b10000000);;
 22724  00584A  0E80               	movlw	128
 22725  00584C  EC94  F02D         	call	i2_lcdInst
 22726                           
 22727                           ;UI.c: 520: printf("LOG 1          <");
 22728  005850  0E6A               	movlw	low STR_39
 22729  005852  6E0D               	movwf	i2printf@f,c
 22730  005854  0EFD               	movlw	high STR_39
 22731  005856  6E0E               	movwf	i2printf@f+1,c
 22732  005858  ECA2  F011         	call	i2_printf	;wreg free
 22733                           
 22734                           ;UI.c: 521: lcdInst(0b11000000);;
 22735  00585C  0EC0               	movlw	192
 22736  00585E  EC94  F02D         	call	i2_lcdInst
 22737                           
 22738                           ;UI.c: 522: printf("LOG 2           ");
 22739  005862  0ED1               	movlw	low STR_40
 22740  005864  6E0D               	movwf	i2printf@f,c
 22741  005866  0EFC               	movlw	high STR_40
 22742  005868  6E0E               	movwf	i2printf@f+1,c
 22743  00586A  ECA2  F011         	call	i2_printf	;wreg free
 22744  00586E  0012               	return		;funcret
 22745  005870                     __end_of_change_state_to_logs_11:
 22746                           	opt stack 0
 22747                           pclatu	equ	0xFFB
 22748                           pclath	equ	0xFFA
 22749                           tblptru	equ	0xFF8
 22750                           tblptrh	equ	0xFF7
 22751                           tblptrl	equ	0xFF6
 22752                           tablat	equ	0xFF5
 22753                           prodh	equ	0xFF4
 22754                           prodl	equ	0xFF3
 22755                           intcon	equ	0xFF2
 22756                           intcon2	equ	0xFF1
 22757                           intcon3	equ	0xFF0
 22758                           indf0	equ	0xFEF
 22759                           postinc0	equ	0xFEE
 22760                           fsr0h	equ	0xFEA
 22761                           fsr0l	equ	0xFE9
 22762                           wreg	equ	0xFE8
 22763                           postdec1	equ	0xFE5
 22764                           fsr1h	equ	0xFE2
 22765                           fsr1l	equ	0xFE1
 22766                           indf2	equ	0xFDF
 22767                           postinc2	equ	0xFDE
 22768                           postdec2	equ	0xFDD
 22769                           fsr2h	equ	0xFDA
 22770                           fsr2l	equ	0xFD9
 22771                           status	equ	0xFD8
 22772                           
 22773 ;; *************** function _dispLogs *****************
 22774 ;; Defined at:
 22775 ;;		line 470 in file "UI.c"
 22776 ;; Parameters:    Size  Location     Type
 22777 ;;  myLog           2   17[COMRAM] int 
 22778 ;; Auto vars:     Size  Location     Type
 22779 ;;		None
 22780 ;; Return value:  Size  Location     Type
 22781 ;;                  1    wreg      void 
 22782 ;; Registers used:
 22783 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 22784 ;; Tracked objects:
 22785 ;;		On entry : 0/0
 22786 ;;		On exit  : 0/0
 22787 ;;		Unchanged: 0/0
 22788 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22789 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22790 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22791 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22792 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22793 ;;Total ram usage:        2 bytes
 22794 ;; Hardware stack levels used:    1
 22795 ;; Hardware stack levels required when called:    2
 22796 ;; This function calls:
 22797 ;;		_retrieveLog
 22798 ;; This function is called by:
 22799 ;;		_updateMenu
 22800 ;; This function uses a non-reentrant model
 22801 ;;
 22802                           
 22803                           	psect	text82
 22804  0059EA                     __ptext82:
 22805                           	opt stack 0
 22806  0059EA                     _dispLogs:
 22807                           	opt stack 20
 22808                           
 22809                           ;UI.c: 471: logstate = 1;
 22810                           
 22811                           ;incstack = 0
 22812  0059EA  0E00               	movlw	0
 22813  0059EC  0100               	movlb	0	; () banked
 22814  0059EE  6FF9               	movwf	(_logstate+1)& (0+255),b
 22815  0059F0  0E01               	movlw	1
 22816  0059F2  6FF8               	movwf	_logstate& (0+255),b
 22817                           
 22818                           ; BSR set to: 0
 22819                           ;UI.c: 472: log = myLog;
 22820  0059F4  C012  F0EE         	movff	dispLogs@myLog,_log
 22821  0059F8  C013  F0EF         	movff	dispLogs@myLog+1,_log+1
 22822                           
 22823                           ; BSR set to: 0
 22824                           ;UI.c: 473: retrieveLog(myLog - 1);
 22825  0059FC  0EFF               	movlw	255
 22826  0059FE  2412               	addwf	dispLogs@myLog,w,c
 22827  005A00  6E07               	movwf	retrieveLog@logNum,c
 22828  005A02  0EFF               	movlw	255
 22829  005A04  2013               	addwfc	dispLogs@myLog+1,w,c
 22830  005A06  6E08               	movwf	retrieveLog@logNum+1,c
 22831  005A08  ECEF  F01F         	call	_retrieveLog	;wreg free
 22832  005A0C  0012               	return		;funcret
 22833  005A0E                     __end_of_dispLogs:
 22834                           	opt stack 0
 22835                           pclatu	equ	0xFFB
 22836                           pclath	equ	0xFFA
 22837                           tblptru	equ	0xFF8
 22838                           tblptrh	equ	0xFF7
 22839                           tblptrl	equ	0xFF6
 22840                           tablat	equ	0xFF5
 22841                           prodh	equ	0xFF4
 22842                           prodl	equ	0xFF3
 22843                           intcon	equ	0xFF2
 22844                           intcon2	equ	0xFF1
 22845                           intcon3	equ	0xFF0
 22846                           indf0	equ	0xFEF
 22847                           postinc0	equ	0xFEE
 22848                           fsr0h	equ	0xFEA
 22849                           fsr0l	equ	0xFE9
 22850                           wreg	equ	0xFE8
 22851                           postdec1	equ	0xFE5
 22852                           fsr1h	equ	0xFE2
 22853                           fsr1l	equ	0xFE1
 22854                           indf2	equ	0xFDF
 22855                           postinc2	equ	0xFDE
 22856                           postdec2	equ	0xFDD
 22857                           fsr2h	equ	0xFDA
 22858                           fsr2l	equ	0xFD9
 22859                           status	equ	0xFD8
 22860                           
 22861 ;; *************** function _retrieveLog *****************
 22862 ;; Defined at:
 22863 ;;		line 138 in file "EEPROM.c"
 22864 ;; Parameters:    Size  Location     Type
 22865 ;;  logNum          2    6[COMRAM] int 
 22866 ;; Auto vars:     Size  Location     Type
 22867 ;;  i               2   13[COMRAM] int 
 22868 ;;  addr            2   15[COMRAM] unsigned short 
 22869 ;;  byte3           1   12[COMRAM] unsigned char 
 22870 ;;  byte2           1   11[COMRAM] unsigned char 
 22871 ;;  byte1           1   10[COMRAM] unsigned char 
 22872 ;; Return value:  Size  Location     Type
 22873 ;;                  1    wreg      void 
 22874 ;; Registers used:
 22875 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 22876 ;; Tracked objects:
 22877 ;;		On entry : 0/0
 22878 ;;		On exit  : 0/0
 22879 ;;		Unchanged: 0/0
 22880 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22881 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22882 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22883 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22884 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22885 ;;Total ram usage:       11 bytes
 22886 ;; Hardware stack levels used:    1
 22887 ;; Hardware stack levels required when called:    1
 22888 ;; This function calls:
 22889 ;;		i2_EEPROM_read
 22890 ;;		i2___wmul
 22891 ;; This function is called by:
 22892 ;;		_dispLogs
 22893 ;; This function uses a non-reentrant model
 22894 ;;
 22895                           
 22896                           	psect	text83
 22897  003FDE                     __ptext83:
 22898                           	opt stack 0
 22899  003FDE                     _retrieveLog:
 22900                           	opt stack 20
 22901                           
 22902                           ;EEPROM.c: 144: unsigned short addr = 1 + logNum * 11;
 22903                           
 22904                           ;incstack = 0
 22905  003FDE  C007  F001         	movff	retrieveLog@logNum,i2___wmul@multiplier
 22906  003FE2  C008  F002         	movff	retrieveLog@logNum+1,i2___wmul@multiplier+1
 22907  003FE6  0E00               	movlw	0
 22908  003FE8  6E04               	movwf	i2___wmul@multiplicand+1,c
 22909  003FEA  0E0B               	movlw	11
 22910  003FEC  6E03               	movwf	i2___wmul@multiplicand,c
 22911  003FEE  ECCF  F02C         	call	i2___wmul	;wreg free
 22912  003FF2  0E01               	movlw	1
 22913  003FF4  2401               	addwf	?i2___wmul,w,c
 22914  003FF6  6E10               	movwf	retrieveLog@addr,c
 22915  003FF8  0E00               	movlw	0
 22916  003FFA  2002               	addwfc	?i2___wmul+1,w,c
 22917  003FFC  6E11               	movwf	retrieveLog@addr+1,c
 22918                           
 22919                           ;EEPROM.c: 147: unsigned char byte1 = EEPROM_read(addr);
 22920  003FFE  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 22921  004002  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 22922  004006  EC60  F02D         	call	i2_EEPROM_read	;wreg free
 22923  00400A  6E0B               	movwf	retrieveLog@byte1,c
 22924                           
 22925                           ;EEPROM.c: 148: log_completion = (int)(byte1 & 0b10000000);
 22926  00400C  C00B  F009         	movff	retrieveLog@byte1,??_retrieveLog
 22927  004010  0E80               	movlw	128
 22928  004012  1609               	andwf	??_retrieveLog,f,c
 22929  004014  5009               	movf	??_retrieveLog,w,c
 22930  004016  0100               	movlb	0	; () banked
 22931  004018  6FF0               	movwf	_log_completion& (0+255),b
 22932  00401A  6BF1               	clrf	(_log_completion+1)& (0+255),b
 22933                           
 22934                           ; BSR set to: 0
 22935                           ;EEPROM.c: 149: log_count_total = (int)(byte1 & 0b00001111);
 22936  00401C  C00B  F009         	movff	retrieveLog@byte1,??_retrieveLog
 22937  004020  0E0F               	movlw	15
 22938  004022  1609               	andwf	??_retrieveLog,f,c
 22939  004024  5009               	movf	??_retrieveLog,w,c
 22940  004026  6E67               	movwf	_log_count_total,c
 22941  004028  6A68               	clrf	_log_count_total+1,c
 22942                           
 22943                           ; BSR set to: 0
 22944                           ;EEPROM.c: 150: addr++;
 22945  00402A  4A10               	infsnz	retrieveLog@addr,f,c
 22946  00402C  2A11               	incf	retrieveLog@addr+1,f,c
 22947                           
 22948                           ; BSR set to: 0
 22949                           ;EEPROM.c: 153: unsigned char byte2 = EEPROM_read(addr);
 22950  00402E  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 22951  004032  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 22952  004036  EC60  F02D         	call	i2_EEPROM_read	;wreg free
 22953  00403A  6E0C               	movwf	retrieveLog@byte2,c
 22954                           
 22955                           ;EEPROM.c: 154: log_count_pop_no_tab = (int)((byte2 & 0b11110000)>> 4);
 22956  00403C  C00C  F009         	movff	retrieveLog@byte2,??_retrieveLog
 22957  004040  3A09               	swapf	??_retrieveLog,f,c
 22958  004042  0E0F               	movlw	15
 22959  004044  1609               	andwf	??_retrieveLog,f,c
 22960  004046  0E0F               	movlw	15
 22961  004048  1609               	andwf	??_retrieveLog,f,c
 22962  00404A  5009               	movf	??_retrieveLog,w,c
 22963  00404C  0100               	movlb	0	; () banked
 22964  00404E  6FF2               	movwf	_log_count_pop_no_tab& (0+255),b
 22965  004050  6BF3               	clrf	(_log_count_pop_no_tab+1)& (0+255),b
 22966                           
 22967                           ; BSR set to: 0
 22968                           ;EEPROM.c: 155: log_count_pop_w_tab = (int)(byte2 & 0b00001111);
 22969  004052  C00C  F009         	movff	retrieveLog@byte2,??_retrieveLog
 22970  004056  0E0F               	movlw	15
 22971  004058  1609               	andwf	??_retrieveLog,f,c
 22972  00405A  5009               	movf	??_retrieveLog,w,c
 22973  00405C  0100               	movlb	0	; () banked
 22974  00405E  6FF4               	movwf	_log_count_pop_w_tab& (0+255),b
 22975  004060  6BF5               	clrf	(_log_count_pop_w_tab+1)& (0+255),b
 22976                           
 22977                           ; BSR set to: 0
 22978                           ;EEPROM.c: 156: addr++;
 22979  004062  4A10               	infsnz	retrieveLog@addr,f,c
 22980  004064  2A11               	incf	retrieveLog@addr+1,f,c
 22981                           
 22982                           ; BSR set to: 0
 22983                           ;EEPROM.c: 157: unsigned char byte3 = EEPROM_read(addr);
 22984  004066  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 22985  00406A  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 22986  00406E  EC60  F02D         	call	i2_EEPROM_read	;wreg free
 22987  004072  6E0D               	movwf	retrieveLog@byte3,c
 22988                           
 22989                           ;EEPROM.c: 158: log_count_can_w_lab = (int)((byte3 & 0b11110000)>> 4);
 22990  004074  C00D  F009         	movff	retrieveLog@byte3,??_retrieveLog
 22991  004078  3A09               	swapf	??_retrieveLog,f,c
 22992  00407A  0E0F               	movlw	15
 22993  00407C  1609               	andwf	??_retrieveLog,f,c
 22994  00407E  0E0F               	movlw	15
 22995  004080  1609               	andwf	??_retrieveLog,f,c
 22996  004082  5009               	movf	??_retrieveLog,w,c
 22997  004084  6E65               	movwf	_log_count_can_w_lab,c
 22998  004086  6A66               	clrf	_log_count_can_w_lab+1,c
 22999                           
 23000                           ;EEPROM.c: 159: log_count_can_no_lab = (int)(byte3 & 0b00001111);
 23001  004088  C00D  F009         	movff	retrieveLog@byte3,??_retrieveLog
 23002  00408C  0E0F               	movlw	15
 23003  00408E  1609               	andwf	??_retrieveLog,f,c
 23004  004090  5009               	movf	??_retrieveLog,w,c
 23005  004092  6E63               	movwf	_log_count_can_no_lab,c
 23006  004094  6A64               	clrf	_log_count_can_no_lab+1,c
 23007                           
 23008                           ;EEPROM.c: 160: addr++;
 23009  004096  4A10               	infsnz	retrieveLog@addr,f,c
 23010  004098  2A11               	incf	retrieveLog@addr+1,f,c
 23011                           
 23012                           ;EEPROM.c: 163: for(int i = 0; i < 7; i++){
 23013  00409A  0E00               	movlw	0
 23014  00409C  6E0F               	movwf	retrieveLog@i+1,c
 23015  00409E  0E00               	movlw	0
 23016  0040A0  6E0E               	movwf	retrieveLog@i,c
 23017  0040A2                     i2l7244:
 23018  0040A2  BE0F               	btfsc	retrieveLog@i+1,7,c
 23019  0040A4  D006               	goto	i2l7248
 23020  0040A6  500F               	movf	retrieveLog@i+1,w,c
 23021  0040A8  E11E               	bnz	i2l7256
 23022  0040AA  0E07               	movlw	7
 23023  0040AC  5C0E               	subwf	retrieveLog@i,w,c
 23024  0040AE  B0D8               	btfsc	status,0,c
 23025  0040B0  D01A               	goto	i2l7256
 23026  0040B2                     i2l7248:
 23027                           
 23028                           ;EEPROM.c: 164: log_startTime[i] = (int)EEPROM_read(addr);
 23029  0040B2  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 23030  0040B6  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 23031  0040BA  EC60  F02D         	call	i2_EEPROM_read	;wreg free
 23032  0040BE  6E09               	movwf	??_retrieveLog& (0+255),c
 23033  0040C0  6A0A               	clrf	(??_retrieveLog+1)& (0+255),c
 23034  0040C2  90D8               	bcf	status,0,c
 23035  0040C4  340E               	rlcf	retrieveLog@i,w,c
 23036  0040C6  6ED9               	movwf	fsr2l,c
 23037  0040C8  340F               	rlcf	retrieveLog@i+1,w,c
 23038  0040CA  6EDA               	movwf	fsr2h,c
 23039  0040CC  0E00               	movlw	low _log_startTime
 23040  0040CE  26D9               	addwf	fsr2l,f,c
 23041  0040D0  0E01               	movlw	high _log_startTime
 23042  0040D2  22DA               	addwfc	fsr2h,f,c
 23043  0040D4  C009  FFDE         	movff	??_retrieveLog,postinc2
 23044  0040D8  C00A  FFDD         	movff	??_retrieveLog+1,postdec2
 23045                           
 23046                           ;EEPROM.c: 165: addr++;
 23047  0040DC  4A10               	infsnz	retrieveLog@addr,f,c
 23048  0040DE  2A11               	incf	retrieveLog@addr+1,f,c
 23049  0040E0  4A0E               	infsnz	retrieveLog@i,f,c
 23050  0040E2  2A0F               	incf	retrieveLog@i+1,f,c
 23051  0040E4  D7DE               	goto	i2l7244
 23052  0040E6                     i2l7256:
 23053                           
 23054                           ;EEPROM.c: 166: }
 23055                           ;EEPROM.c: 169: log_total_time = (int)EEPROM_read(addr);
 23056  0040E6  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 23057  0040EA  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 23058  0040EE  EC60  F02D         	call	i2_EEPROM_read	;wreg free
 23059  0040F2  6E09               	movwf	??_retrieveLog& (0+255),c
 23060  0040F4  5009               	movf	??_retrieveLog,w,c
 23061  0040F6  0100               	movlb	0	; () banked
 23062  0040F8  6FF6               	movwf	_log_total_time& (0+255),b
 23063  0040FA  6BF7               	clrf	(_log_total_time+1)& (0+255),b
 23064                           
 23065                           ; BSR set to: 0
 23066  0040FC  0012               	return		;funcret
 23067  0040FE                     __end_of_retrieveLog:
 23068                           	opt stack 0
 23069                           pclatu	equ	0xFFB
 23070                           pclath	equ	0xFFA
 23071                           tblptru	equ	0xFF8
 23072                           tblptrh	equ	0xFF7
 23073                           tblptrl	equ	0xFF6
 23074                           tablat	equ	0xFF5
 23075                           prodh	equ	0xFF4
 23076                           prodl	equ	0xFF3
 23077                           intcon	equ	0xFF2
 23078                           intcon2	equ	0xFF1
 23079                           intcon3	equ	0xFF0
 23080                           indf0	equ	0xFEF
 23081                           postinc0	equ	0xFEE
 23082                           fsr0h	equ	0xFEA
 23083                           fsr0l	equ	0xFE9
 23084                           wreg	equ	0xFE8
 23085                           postdec1	equ	0xFE5
 23086                           fsr1h	equ	0xFE2
 23087                           fsr1l	equ	0xFE1
 23088                           indf2	equ	0xFDF
 23089                           postinc2	equ	0xFDE
 23090                           postdec2	equ	0xFDD
 23091                           fsr2h	equ	0xFDA
 23092                           fsr2l	equ	0xFD9
 23093                           status	equ	0xFD8
 23094                           
 23095 ;; *************** function i2_EEPROM_read *****************
 23096 ;; Defined at:
 23097 ;;		line 72 in file "EEPROM.c"
 23098 ;; Parameters:    Size  Location     Type
 23099 ;;  address         2    0[COMRAM] unsigned short 
 23100 ;; Auto vars:     Size  Location     Type
 23101 ;;		None
 23102 ;; Return value:  Size  Location     Type
 23103 ;;                  1    wreg      unsigned char 
 23104 ;; Registers used:
 23105 ;;		wreg, status,2
 23106 ;; Tracked objects:
 23107 ;;		On entry : 0/0
 23108 ;;		On exit  : 0/0
 23109 ;;		Unchanged: 0/0
 23110 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23111 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23112 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23113 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23114 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23115 ;;Total ram usage:        2 bytes
 23116 ;; Hardware stack levels used:    1
 23117 ;; This function calls:
 23118 ;;		Nothing
 23119 ;; This function is called by:
 23120 ;;		_retrieveLog
 23121 ;; This function uses a non-reentrant model
 23122 ;;
 23123                           
 23124                           	psect	text84
 23125  005AC0                     __ptext84:
 23126                           	opt stack 0
 23127  005AC0                     i2_EEPROM_read:
 23128                           	opt stack 20
 23129                           
 23130                           ;EEPROM.c: 74: EEADRH = (unsigned char)(address >> 8);
 23131                           
 23132                           ; BSR set to: 0
 23133                           ;incstack = 0
 23134  005AC0  5002               	movf	i2EEPROM_read@address+1,w,c
 23135  005AC2  6EAA               	movwf	4010,c	;volatile
 23136                           
 23137                           ;EEPROM.c: 75: EEADR = (unsigned char)address;
 23138  005AC4  C001  FFA9         	movff	i2EEPROM_read@address,4009	;volatile
 23139                           
 23140                           ;EEPROM.c: 77: EECON1bits.EEPGD = 0;
 23141  005AC8  9EA6               	bcf	4006,7,c	;volatile
 23142                           
 23143                           ;EEPROM.c: 78: EECON1bits.CFGS = 0;
 23144  005ACA  9CA6               	bcf	4006,6,c	;volatile
 23145                           
 23146                           ;EEPROM.c: 79: EECON1bits.RD = 1;
 23147  005ACC  80A6               	bsf	4006,0,c	;volatile
 23148  005ACE                     i2l1124:
 23149  005ACE  B0A6               	btfsc	4006,0,c	;volatile
 23150  005AD0  D7FE               	goto	i2l1124
 23151                           
 23152                           ;EEPROM.c: 85: return EEDATA;
 23153  005AD2  50A8               	movf	4008,w,c	;volatile
 23154  005AD4  0012               	return	
 23155  005AD6                     __end_ofi2_EEPROM_read:
 23156                           	opt stack 0
 23157                           pclatu	equ	0xFFB
 23158                           pclath	equ	0xFFA
 23159                           tblptru	equ	0xFF8
 23160                           tblptrh	equ	0xFF7
 23161                           tblptrl	equ	0xFF6
 23162                           tablat	equ	0xFF5
 23163                           prodh	equ	0xFF4
 23164                           prodl	equ	0xFF3
 23165                           intcon	equ	0xFF2
 23166                           intcon2	equ	0xFF1
 23167                           intcon3	equ	0xFF0
 23168                           indf0	equ	0xFEF
 23169                           postinc0	equ	0xFEE
 23170                           fsr0h	equ	0xFEA
 23171                           fsr0l	equ	0xFE9
 23172                           wreg	equ	0xFE8
 23173                           postdec1	equ	0xFE5
 23174                           fsr1h	equ	0xFE2
 23175                           fsr1l	equ	0xFE1
 23176                           indf2	equ	0xFDF
 23177                           postinc2	equ	0xFDE
 23178                           postdec2	equ	0xFDD
 23179                           fsr2h	equ	0xFDA
 23180                           fsr2l	equ	0xFD9
 23181                           status	equ	0xFD8
 23182                           
 23183 ;; *************** function _updateArmState *****************
 23184 ;; Defined at:
 23185 ;;		line 621 in file "sort.c"
 23186 ;; Parameters:    Size  Location     Type
 23187 ;;		None
 23188 ;; Auto vars:     Size  Location     Type
 23189 ;;		None
 23190 ;; Return value:  Size  Location     Type
 23191 ;;                  1    wreg      void 
 23192 ;; Registers used:
 23193 ;;		wreg, status,2, status,0
 23194 ;; Tracked objects:
 23195 ;;		On entry : 0/0
 23196 ;;		On exit  : 0/0
 23197 ;;		Unchanged: 0/0
 23198 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23199 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23200 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23201 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23202 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23203 ;;Total ram usage:        2 bytes
 23204 ;; Hardware stack levels used:    1
 23205 ;; This function calls:
 23206 ;;		Nothing
 23207 ;; This function is called by:
 23208 ;;		_handler
 23209 ;; This function uses a non-reentrant model
 23210 ;;
 23211                           
 23212                           	psect	text85
 23213  005516                     __ptext85:
 23214                           	opt stack 0
 23215  005516                     _updateArmState:
 23216                           	opt stack 23
 23217                           
 23218                           ;sort.c: 628: if(!was_low_2){
 23219                           
 23220                           ;incstack = 0
 23221  005516  5079               	movf	_was_low_2,w,c	;volatile
 23222  005518  107A               	iorwf	_was_low_2+1,w,c	;volatile
 23223  00551A  B4D8               	btfsc	status,2,c
 23224  00551C  D007               	goto	i2l10020
 23225  00551E  D016               	goto	i2l942
 23226  005520                     i2l10014:
 23227                           
 23228                           ;sort.c: 633: PR2 = 0x20;
 23229  005520  0E20               	movlw	32
 23230  005522  6ECB               	movwf	4043,c	;volatile
 23231                           
 23232                           ;sort.c: 634: break;
 23233  005524  0012               	return	
 23234  005526                     i2l10016:
 23235                           
 23236                           ;sort.c: 637: PR2 = 0x40;
 23237  005526  0E40               	movlw	64
 23238  005528  6ECB               	movwf	4043,c	;volatile
 23239                           
 23240                           ;sort.c: 639: }
 23241                           
 23242                           ;sort.c: 638: break;
 23243  00552A  0012               	return	
 23244  00552C                     i2l10020:
 23245  00552C  C0E8  F001         	movff	_f_arm_position,??_updateArmState	;volatile
 23246  005530  C0E9  F002         	movff	_f_arm_position+1,??_updateArmState+1	;volatile
 23247                           
 23248                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 23249                           ; Switch size 1, requested type "space"
 23250                           ; Number of cases is 1, Range of values is 0 to 0
 23251                           ; switch strategies available:
 23252                           ; Name         Instructions Cycles
 23253                           ; simple_byte            4     3 (average)
 23254                           ;	Chosen strategy is simple_byte
 23255  005534  5002               	movf	??_updateArmState+1,w,c
 23256  005536  0A00               	xorlw	0	; case 0
 23257  005538  A4D8               	btfss	status,2,c
 23258  00553A  0012               	return	
 23259                           
 23260                           ; Switch size 1, requested type "space"
 23261                           ; Number of cases is 2, Range of values is 0 to 1
 23262                           ; switch strategies available:
 23263                           ; Name         Instructions Cycles
 23264                           ; simple_byte            7     4 (average)
 23265                           ;	Chosen strategy is simple_byte
 23266  00553C  5001               	movf	??_updateArmState,w,c
 23267  00553E  0A00               	xorlw	0	; case 0
 23268  005540  B4D8               	btfsc	status,2,c
 23269  005542  D7EE               	goto	i2l10014
 23270  005544  0A01               	xorlw	1	; case 1
 23271  005546  A4D8               	btfss	status,2,c
 23272                           
 23273                           ;sort.c: 640: }
 23274  005548  0012               	return	
 23275  00554A  D7ED               	goto	i2l10016
 23276  00554C                     i2l942:
 23277                           
 23278                           ;sort.c: 641: else{
 23279                           ;sort.c: 643: PR2 = 0xFF;
 23280  00554C  68CB               	setf	4043,c	;volatile
 23281  00554E  0012               	return	
 23282  005550                     __end_of_updateArmState:
 23283                           	opt stack 0
 23284                           pclatu	equ	0xFFB
 23285                           pclath	equ	0xFFA
 23286                           tblptru	equ	0xFF8
 23287                           tblptrh	equ	0xFF7
 23288                           tblptrl	equ	0xFF6
 23289                           tablat	equ	0xFF5
 23290                           prodh	equ	0xFF4
 23291                           prodl	equ	0xFF3
 23292                           intcon	equ	0xFF2
 23293                           intcon2	equ	0xFF1
 23294                           intcon3	equ	0xFF0
 23295                           indf0	equ	0xFEF
 23296                           postinc0	equ	0xFEE
 23297                           fsr0h	equ	0xFEA
 23298                           fsr0l	equ	0xFE9
 23299                           wreg	equ	0xFE8
 23300                           postdec1	equ	0xFE5
 23301                           fsr1h	equ	0xFE2
 23302                           fsr1l	equ	0xFE1
 23303                           indf2	equ	0xFDF
 23304                           postinc2	equ	0xFDE
 23305                           postdec2	equ	0xFDD
 23306                           fsr2h	equ	0xFDA
 23307                           fsr2l	equ	0xFD9
 23308                           status	equ	0xFD8
 23309                           
 23310 ;; *************** function _printSortTimer *****************
 23311 ;; Defined at:
 23312 ;;		line 471 in file "sort.c"
 23313 ;; Parameters:    Size  Location     Type
 23314 ;;		None
 23315 ;; Auto vars:     Size  Location     Type
 23316 ;;  i               2   70[COMRAM] int 
 23317 ;;  i               2   72[COMRAM] int 
 23318 ;;  curTime        14   44[COMRAM] int [7]
 23319 ;;  timeDiff        2   68[COMRAM] unsigned int 
 23320 ;;  sec             2   64[COMRAM] int 
 23321 ;;  min             2   62[COMRAM] int 
 23322 ;;  cur_sec         2   60[COMRAM] unsigned int 
 23323 ;;  start_sec       2   58[COMRAM] unsigned int 
 23324 ;; Return value:  Size  Location     Type
 23325 ;;                  1    wreg      void 
 23326 ;; Registers used:
 23327 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23328 ;; Tracked objects:
 23329 ;;		On entry : 0/0
 23330 ;;		On exit  : 0/0
 23331 ;;		Unchanged: 0/0
 23332 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23333 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23334 ;;      Locals:        30       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23335 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23336 ;;      Totals:        33       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23337 ;;Total ram usage:       33 bytes
 23338 ;; Hardware stack levels used:    1
 23339 ;; Hardware stack levels required when called:    3
 23340 ;; This function calls:
 23341 ;;		i2___lwdiv
 23342 ;;		i2___lwmod
 23343 ;;		i2___wmul
 23344 ;;		i2_delay_ms
 23345 ;;		i2_getRTC
 23346 ;;		i2_lcdInst
 23347 ;;		i2_printf
 23348 ;; This function is called by:
 23349 ;;		_handler
 23350 ;; This function uses a non-reentrant model
 23351 ;;
 23352                           
 23353                           	psect	text86
 23354  003250                     __ptext86:
 23355                           	opt stack 0
 23356  003250                     _printSortTimer:
 23357                           	opt stack 20
 23358                           
 23359                           ;sort.c: 472: getRTC();
 23360                           
 23361                           ;incstack = 0
 23362  003250  ECA0  F027         	call	i2_getRTC	;wreg free
 23363                           
 23364                           ;sort.c: 473: int curTime[7];
 23365                           ;sort.c: 474: for(int i = 0; i < 7; i++){
 23366  003254  0E00               	movlw	0
 23367  003256  6E4A               	movwf	printSortTimer@i+1,c
 23368  003258  0E00               	movlw	0
 23369  00325A  6E49               	movwf	printSortTimer@i,c
 23370  00325C                     i2l9856:
 23371  00325C  BE4A               	btfsc	printSortTimer@i+1,7,c
 23372  00325E  D006               	goto	i2l9860
 23373  003260  504A               	movf	printSortTimer@i+1,w,c
 23374  003262  E131               	bnz	i2l9866
 23375  003264  0E07               	movlw	7
 23376  003266  5C49               	subwf	printSortTimer@i,w,c
 23377  003268  B0D8               	btfsc	status,0,c
 23378  00326A  D02D               	goto	i2l9866
 23379  00326C                     i2l9860:
 23380                           
 23381                           ;sort.c: 475: curTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 23382  00326C  0E24               	movlw	low _time
 23383  00326E  2449               	addwf	printSortTimer@i,w,c
 23384  003270  6ED9               	movwf	fsr2l,c
 23385  003272  0E01               	movlw	high _time
 23386  003274  204A               	addwfc	printSortTimer@i+1,w,c
 23387  003276  6EDA               	movwf	fsr2h,c
 23388  003278  50DF               	movf	indf2,w,c
 23389  00327A  6E2A               	movwf	??_printSortTimer& (0+255),c
 23390  00327C  3A2A               	swapf	??_printSortTimer,f,c
 23391  00327E  0E0F               	movlw	15
 23392  003280  162A               	andwf	??_printSortTimer,f,c
 23393  003282  0E0F               	movlw	15
 23394  003284  162A               	andwf	??_printSortTimer,f,c
 23395  003286  502A               	movf	??_printSortTimer,w,c
 23396  003288  0D0A               	mullw	10
 23397  00328A  0E24               	movlw	low _time
 23398  00328C  2449               	addwf	printSortTimer@i,w,c
 23399  00328E  6ED9               	movwf	fsr2l,c
 23400  003290  0E01               	movlw	high _time
 23401  003292  204A               	addwfc	printSortTimer@i+1,w,c
 23402  003294  6EDA               	movwf	fsr2h,c
 23403  003296  50DF               	movf	indf2,w,c
 23404  003298  0B0F               	andlw	15
 23405  00329A  6E2B               	movwf	(??_printSortTimer+1)& (0+255),c
 23406  00329C  6A2C               	clrf	(??_printSortTimer+2)& (0+255),c
 23407  00329E  50F3               	movf	prodl,w,c
 23408  0032A0  262B               	addwf	??_printSortTimer+1,f,c
 23409  0032A2  50F4               	movf	prodh,w,c
 23410  0032A4  222C               	addwfc	??_printSortTimer+2,f,c
 23411  0032A6  90D8               	bcf	status,0,c
 23412  0032A8  3449               	rlcf	printSortTimer@i,w,c
 23413  0032AA  6ED9               	movwf	fsr2l,c
 23414  0032AC  344A               	rlcf	printSortTimer@i+1,w,c
 23415  0032AE  6EDA               	movwf	fsr2h,c
 23416  0032B0  0E2D               	movlw	low printSortTimer@curTime
 23417  0032B2  26D9               	addwf	fsr2l,f,c
 23418  0032B4  0E00               	movlw	high printSortTimer@curTime
 23419  0032B6  22DA               	addwfc	fsr2h,f,c
 23420  0032B8  C02B  FFDE         	movff	??_printSortTimer+1,postinc2
 23421  0032BC  C02C  FFDD         	movff	??_printSortTimer+2,postdec2
 23422  0032C0  4A49               	infsnz	printSortTimer@i,f,c
 23423  0032C2  2A4A               	incf	printSortTimer@i+1,f,c
 23424  0032C4  D7CB               	goto	i2l9856
 23425  0032C6                     i2l9866:
 23426                           
 23427                           ;sort.c: 476: }
 23428                           ;sort.c: 477: unsigned int start_sec = startTime[0] + startTime[1]*60 + startTime[2]*360
      +                          0;
 23429  0032C6  C110  F001         	movff	_startTime+2,i2___wmul@multiplier
 23430  0032CA  C111  F002         	movff	_startTime+3,i2___wmul@multiplier+1
 23431  0032CE  0E00               	movlw	0
 23432  0032D0  6E04               	movwf	i2___wmul@multiplicand+1,c
 23433  0032D2  0E3C               	movlw	60
 23434  0032D4  6E03               	movwf	i2___wmul@multiplicand,c
 23435  0032D6  ECCF  F02C         	call	i2___wmul	;wreg free
 23436  0032DA  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 23437  0032DE  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 23438  0032E2  C112  F001         	movff	_startTime+4,i2___wmul@multiplier
 23439  0032E6  C113  F002         	movff	_startTime+5,i2___wmul@multiplier+1
 23440  0032EA  0E0E               	movlw	14
 23441  0032EC  6E04               	movwf	i2___wmul@multiplicand+1,c
 23442  0032EE  0E10               	movlw	16
 23443  0032F0  6E03               	movwf	i2___wmul@multiplicand,c
 23444  0032F2  ECCF  F02C         	call	i2___wmul	;wreg free
 23445  0032F6  5001               	movf	?i2___wmul,w,c
 23446  0032F8  262A               	addwf	??_printSortTimer,f,c
 23447  0032FA  5002               	movf	?i2___wmul+1,w,c
 23448  0032FC  222B               	addwfc	??_printSortTimer+1,f,c
 23449  0032FE  0101               	movlb	1	; () banked
 23450  003300  510E               	movf	_startTime& (0+255),w,b
 23451  003302  242A               	addwf	??_printSortTimer,w,c
 23452  003304  6E3B               	movwf	printSortTimer@start_sec,c
 23453  003306  0101               	movlb	1	; () banked
 23454  003308  510F               	movf	(_startTime+1)& (0+255),w,b
 23455  00330A  202B               	addwfc	??_printSortTimer+1,w,c
 23456  00330C  6E3C               	movwf	printSortTimer@start_sec+1,c
 23457                           
 23458                           ;sort.c: 478: unsigned int cur_sec = curTime[0] + curTime[1]*60 + curTime[2]*3600;
 23459  00330E  C02F  F001         	movff	printSortTimer@curTime+2,i2___wmul@multiplier
 23460  003312  C030  F002         	movff	printSortTimer@curTime+3,i2___wmul@multiplier+1
 23461  003316  0E00               	movlw	0
 23462  003318  6E04               	movwf	i2___wmul@multiplicand+1,c
 23463  00331A  0E3C               	movlw	60
 23464  00331C  6E03               	movwf	i2___wmul@multiplicand,c
 23465  00331E  ECCF  F02C         	call	i2___wmul	;wreg free
 23466  003322  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 23467  003326  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 23468  00332A  C031  F001         	movff	printSortTimer@curTime+4,i2___wmul@multiplier
 23469  00332E  C032  F002         	movff	printSortTimer@curTime+5,i2___wmul@multiplier+1
 23470  003332  0E0E               	movlw	14
 23471  003334  6E04               	movwf	i2___wmul@multiplicand+1,c
 23472  003336  0E10               	movlw	16
 23473  003338  6E03               	movwf	i2___wmul@multiplicand,c
 23474  00333A  ECCF  F02C         	call	i2___wmul	;wreg free
 23475  00333E  5001               	movf	?i2___wmul,w,c
 23476  003340  262A               	addwf	??_printSortTimer,f,c
 23477  003342  5002               	movf	?i2___wmul+1,w,c
 23478  003344  222B               	addwfc	??_printSortTimer+1,f,c
 23479  003346  502D               	movf	printSortTimer@curTime,w,c
 23480  003348  242A               	addwf	??_printSortTimer,w,c
 23481  00334A  6E3D               	movwf	printSortTimer@cur_sec,c
 23482  00334C  502E               	movf	printSortTimer@curTime+1,w,c
 23483  00334E  202B               	addwfc	??_printSortTimer+1,w,c
 23484  003350  6E3E               	movwf	printSortTimer@cur_sec+1,c
 23485                           
 23486                           ;sort.c: 479: unsigned int timeDiff = cur_sec - start_sec;
 23487  003352  C03B  F02A         	movff	printSortTimer@start_sec,??_printSortTimer
 23488  003356  C03C  F02B         	movff	printSortTimer@start_sec+1,??_printSortTimer+1
 23489  00335A  1E2A               	comf	??_printSortTimer,f,c
 23490  00335C  1E2B               	comf	??_printSortTimer+1,f,c
 23491  00335E  4A2A               	infsnz	??_printSortTimer,f,c
 23492  003360  2A2B               	incf	??_printSortTimer+1,f,c
 23493  003362  503D               	movf	printSortTimer@cur_sec,w,c
 23494  003364  242A               	addwf	??_printSortTimer,w,c
 23495  003366  6E45               	movwf	printSortTimer@timeDiff,c
 23496  003368  503E               	movf	printSortTimer@cur_sec+1,w,c
 23497  00336A  202B               	addwfc	??_printSortTimer+1,w,c
 23498  00336C  6E46               	movwf	printSortTimer@timeDiff+1,c
 23499                           
 23500                           ;sort.c: 481: total_time = timeDiff;
 23501  00336E  C045  F0FA         	movff	printSortTimer@timeDiff,_total_time
 23502  003372  C046  F0FB         	movff	printSortTimer@timeDiff+1,_total_time+1
 23503                           
 23504                           ;sort.c: 483: if(f_most_recent_sort_time){
 23505  003376  0101               	movlb	1	; () banked
 23506  003378  513F               	movf	_f_most_recent_sort_time& (0+255),w,b
 23507  00337A  0101               	movlb	1	; () banked
 23508  00337C  1140               	iorwf	(_f_most_recent_sort_time+1)& (0+255),w,b
 23509  00337E  B4D8               	btfsc	status,2,c
 23510  003380  D009               	goto	i2l9878
 23511                           
 23512                           ; BSR set to: 1
 23513                           ;sort.c: 484: most_recent_sort_time = total_time;
 23514  003382  C0FA  F069         	movff	_total_time,_most_recent_sort_time
 23515  003386  C0FB  F06A         	movff	_total_time+1,_most_recent_sort_time+1
 23516                           
 23517                           ; BSR set to: 1
 23518                           ;sort.c: 485: f_most_recent_sort_time = 0;
 23519  00338A  0E00               	movlw	0
 23520  00338C  0101               	movlb	1	; () banked
 23521  00338E  6F40               	movwf	(_f_most_recent_sort_time+1)& (0+255),b
 23522  003390  0E00               	movlw	0
 23523  003392  6F3F               	movwf	_f_most_recent_sort_time& (0+255),b
 23524  003394                     i2l9878:
 23525                           
 23526                           ; BSR set to: 1
 23527                           ;sort.c: 486: }
 23528                           ;sort.c: 488: if(total_time - most_recent_sort_time == 20){
 23529  003394  C069  F02A         	movff	_most_recent_sort_time,??_printSortTimer
 23530  003398  C06A  F02B         	movff	_most_recent_sort_time+1,??_printSortTimer+1
 23531  00339C  1E2A               	comf	??_printSortTimer,f,c
 23532  00339E  1E2B               	comf	??_printSortTimer+1,f,c
 23533  0033A0  4A2A               	infsnz	??_printSortTimer,f,c
 23534  0033A2  2A2B               	incf	??_printSortTimer+1,f,c
 23535  0033A4  0100               	movlb	0	; () banked
 23536  0033A6  51FA               	movf	_total_time& (0+255),w,b
 23537  0033A8  262A               	addwf	??_printSortTimer,f,c
 23538  0033AA  0100               	movlb	0	; () banked
 23539  0033AC  51FB               	movf	(_total_time+1)& (0+255),w,b
 23540  0033AE  222B               	addwfc	??_printSortTimer+1,f,c
 23541  0033B0  0E14               	movlw	20
 23542  0033B2  182A               	xorwf	??_printSortTimer,w,c
 23543  0033B4  102B               	iorwf	??_printSortTimer+1,w,c
 23544  0033B6  A4D8               	btfss	status,2,c
 23545  0033B8  D033               	goto	i2l9898
 23546                           
 23547                           ; BSR set to: 0
 23548                           ;sort.c: 489: LATBbits.LATB2 = 0;
 23549  0033BA  948A               	bcf	3978,2,c	;volatile
 23550                           
 23551                           ; BSR set to: 0
 23552                           ;sort.c: 490: _delay((unsigned long)((2000)*(32000000/4000.0)));
 23553  0033BC  0E52               	movlw	82
 23554  0033BE  6E2B               	movwf	(??_printSortTimer+1)& (0+255),c
 23555  0033C0  0E2B               	movlw	43
 23556  0033C2  6E2A               	movwf	??_printSortTimer& (0+255),c
 23557  0033C4  0E00               	movlw	0
 23558  0033C6                     i2u1118_47:
 23559  0033C6  2EE8               	decfsz	wreg,f,c
 23560  0033C8  D7FE               	bra	i2u1118_47
 23561  0033CA  2E2A               	decfsz	??_printSortTimer& (0+255),f,c
 23562  0033CC  D7FC               	bra	i2u1118_47
 23563  0033CE  2E2B               	decfsz	(??_printSortTimer+1)& (0+255),f,c
 23564  0033D0  D7FA               	bra	i2u1118_47
 23565  0033D2  D000               	nop2	
 23566                           
 23567                           ;sort.c: 491: for(int i=0; i<46; i++){
 23568  0033D4  0E00               	movlw	0
 23569  0033D6  6E48               	movwf	printSortTimer@i_1156+1,c
 23570  0033D8  0E00               	movlw	0
 23571  0033DA  6E47               	movwf	printSortTimer@i_1156,c
 23572  0033DC  BE48               	btfsc	printSortTimer@i_1156+1,7,c
 23573  0033DE  D006               	goto	i2l9890
 23574  0033E0  5048               	movf	printSortTimer@i_1156+1,w,c
 23575  0033E2  E11D               	bnz	i2l894
 23576  0033E4  0E2E               	movlw	46
 23577  0033E6  5C47               	subwf	printSortTimer@i_1156,w,c
 23578  0033E8  B0D8               	btfsc	status,0,c
 23579  0033EA  D019               	goto	i2l894
 23580  0033EC                     i2l9890:
 23581                           
 23582                           ;sort.c: 492: LATBbits.LATB2 = !LATBbits.LATB2;
 23583  0033EC  B48A               	btfsc	3978,2,c	;volatile
 23584  0033EE  D003               	goto	i2u930_40
 23585  0033F0  6A2A               	clrf	??_printSortTimer& (0+255),c
 23586  0033F2  2A2A               	incf	??_printSortTimer& (0+255),f,c
 23587  0033F4  D001               	goto	i2u931_48
 23588  0033F6                     i2u930_40:
 23589  0033F6  6A2A               	clrf	??_printSortTimer& (0+255),c
 23590  0033F8                     i2u931_48:
 23591  0033F8  462A               	rlncf	??_printSortTimer,f,c
 23592  0033FA  462A               	rlncf	??_printSortTimer,f,c
 23593  0033FC  508A               	movf	3978,w,c	;volatile
 23594  0033FE  182A               	xorwf	??_printSortTimer,w,c
 23595  003400  0BFB               	andlw	-5
 23596  003402  182A               	xorwf	??_printSortTimer,w,c
 23597  003404  6E8A               	movwf	3978,c	;volatile
 23598                           
 23599                           ;sort.c: 493: delay_ms(45-i);
 23600  003406  5047               	movf	printSortTimer@i_1156,w,c
 23601  003408  0800               	sublw	0
 23602  00340A  0F2D               	addlw	45
 23603  00340C  EC46  F02D         	call	i2_delay_ms
 23604  003410  4A47               	infsnz	printSortTimer@i_1156,f,c
 23605  003412  2A48               	incf	printSortTimer@i_1156+1,f,c
 23606  003414  BE48               	btfsc	printSortTimer@i_1156+1,7,c
 23607  003416  D7EA               	goto	i2l9890
 23608  003418  5048               	movf	printSortTimer@i_1156+1,w,c
 23609  00341A  E101               	bnz	i2u932_40
 23610  00341C  D7E3               	goto	L20
 23611  00341E                     i2u932_40:
 23612  00341E                     i2l894:
 23613                           
 23614                           ;sort.c: 494: }
 23615                           ;sort.c: 495: LATBbits.LATB2 = 1;
 23616  00341E  848A               	bsf	3978,2,c	;volatile
 23617  003420                     i2l9898:
 23618                           
 23619                           ;sort.c: 496: }
 23620                           ;sort.c: 498: if((total_time - most_recent_sort_time == 42) || (total_time == 179)){
 23621  003420  C069  F02A         	movff	_most_recent_sort_time,??_printSortTimer
 23622  003424  C06A  F02B         	movff	_most_recent_sort_time+1,??_printSortTimer+1
 23623  003428  1E2A               	comf	??_printSortTimer,f,c
 23624  00342A  1E2B               	comf	??_printSortTimer+1,f,c
 23625  00342C  4A2A               	infsnz	??_printSortTimer,f,c
 23626  00342E  2A2B               	incf	??_printSortTimer+1,f,c
 23627  003430  0100               	movlb	0	; () banked
 23628  003432  51FA               	movf	_total_time& (0+255),w,b
 23629  003434  262A               	addwf	??_printSortTimer,f,c
 23630  003436  0100               	movlb	0	; () banked
 23631  003438  51FB               	movf	(_total_time+1)& (0+255),w,b
 23632  00343A  222B               	addwfc	??_printSortTimer+1,f,c
 23633  00343C  0E2A               	movlw	42
 23634  00343E  182A               	xorwf	??_printSortTimer,w,c
 23635  003440  102B               	iorwf	??_printSortTimer+1,w,c
 23636  003442  B4D8               	btfsc	status,2,c
 23637  003444  D007               	goto	i2l9902
 23638                           
 23639                           ; BSR set to: 0
 23640  003446  0EB3               	movlw	179
 23641  003448  0100               	movlb	0	; () banked
 23642  00344A  19FA               	xorwf	_total_time& (0+255),w,b
 23643  00344C  0100               	movlb	0	; () banked
 23644  00344E  11FB               	iorwf	(_total_time+1)& (0+255),w,b
 23645  003450  A4D8               	btfss	status,2,c
 23646  003452  D003               	goto	i2l9904
 23647  003454                     i2l9902:
 23648                           
 23649                           ; BSR set to: 0
 23650                           ;sort.c: 499: machine_state = DoneSorting_state;
 23651  003454  0E02               	movlw	2
 23652  003456  0100               	movlb	0	; () banked
 23653  003458  6FFC               	movwf	_machine_state& (0+255),b
 23654  00345A                     i2l9904:
 23655                           
 23656                           ; BSR set to: 0
 23657                           ;sort.c: 501: }
 23658                           ;sort.c: 503: int min = (timeDiff % 3600) / 60;
 23659  00345A  0E0E               	movlw	14
 23660  00345C  6E04               	movwf	i2___lwmod@divisor+1,c
 23661  00345E  0E10               	movlw	16
 23662  003460  6E03               	movwf	i2___lwmod@divisor,c
 23663  003462  C045  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 23664  003466  C046  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 23665  00346A  EC6A  F02A         	call	i2___lwmod	;wreg free
 23666  00346E  C001  F006         	movff	?i2___lwmod,i2___lwdiv@dividend
 23667  003472  C002  F007         	movff	?i2___lwmod+1,i2___lwdiv@dividend+1
 23668  003476  0E00               	movlw	0
 23669  003478  6E09               	movwf	i2___lwdiv@divisor+1,c
 23670  00347A  0E3C               	movlw	60
 23671  00347C  6E08               	movwf	i2___lwdiv@divisor,c
 23672  00347E  EC63  F029         	call	i2___lwdiv	;wreg free
 23673  003482  C006  F03F         	movff	?i2___lwdiv,printSortTimer@min
 23674  003486  C007  F040         	movff	?i2___lwdiv+1,printSortTimer@min+1
 23675                           
 23676                           ;sort.c: 504: int sec = (timeDiff % 3600) % 60;
 23677  00348A  0E0E               	movlw	14
 23678  00348C  6E04               	movwf	i2___lwmod@divisor+1,c
 23679  00348E  0E10               	movlw	16
 23680  003490  6E03               	movwf	i2___lwmod@divisor,c
 23681  003492  C045  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 23682  003496  C046  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 23683  00349A  EC6A  F02A         	call	i2___lwmod	;wreg free
 23684  00349E  C001  F043         	movff	?i2___lwmod,_printSortTimer$2557
 23685  0034A2  C002  F044         	movff	?i2___lwmod+1,_printSortTimer$2557+1
 23686                           
 23687                           ;sort.c: 504: int sec = (timeDiff % 3600) % 60;
 23688  0034A6  C043  F001         	movff	_printSortTimer$2557,i2___lwmod@dividend
 23689  0034AA  C044  F002         	movff	_printSortTimer$2557+1,i2___lwmod@dividend+1
 23690  0034AE  0E00               	movlw	0
 23691  0034B0  6E04               	movwf	i2___lwmod@divisor+1,c
 23692  0034B2  0E3C               	movlw	60
 23693  0034B4  6E03               	movwf	i2___lwmod@divisor,c
 23694  0034B6  EC6A  F02A         	call	i2___lwmod	;wreg free
 23695  0034BA  C001  F041         	movff	?i2___lwmod,printSortTimer@sec
 23696  0034BE  C002  F042         	movff	?i2___lwmod+1,printSortTimer@sec+1
 23697                           
 23698                           ;sort.c: 506: lcdInst(0b10000000);;
 23699  0034C2  0E80               	movlw	128
 23700  0034C4  EC94  F02D         	call	i2_lcdInst
 23701                           
 23702                           ;sort.c: 507: printf("SORTING...");
 23703  0034C8  0E7B               	movlw	low STR_65
 23704  0034CA  6E0D               	movwf	i2printf@f,c
 23705  0034CC  0EFF               	movlw	high STR_65
 23706  0034CE  6E0E               	movwf	i2printf@f+1,c
 23707  0034D0  ECA2  F011         	call	i2_printf	;wreg free
 23708                           
 23709                           ;sort.c: 508: lcdInst(0b11000000);;
 23710  0034D4  0EC0               	movlw	192
 23711  0034D6  EC94  F02D         	call	i2_lcdInst
 23712                           
 23713                           ;sort.c: 509: printf("TIME %d:%02d", min, sec);
 23714  0034DA  0E4C               	movlw	low STR_66
 23715  0034DC  6E0D               	movwf	i2printf@f,c
 23716  0034DE  0EFF               	movlw	high STR_66
 23717  0034E0  6E0E               	movwf	i2printf@f+1,c
 23718  0034E2  C03F  F00F         	movff	printSortTimer@min,?i2_printf+2
 23719  0034E6  C040  F010         	movff	printSortTimer@min+1,?i2_printf+3
 23720  0034EA  C041  F011         	movff	printSortTimer@sec,?i2_printf+4
 23721  0034EE  C042  F012         	movff	printSortTimer@sec+1,?i2_printf+5
 23722  0034F2  ECA2  F011         	call	i2_printf	;wreg free
 23723  0034F6  0012               	return		;funcret
 23724  0034F8                     __end_of_printSortTimer:
 23725                           	opt stack 0
 23726                           pclatu	equ	0xFFB
 23727                           pclath	equ	0xFFA
 23728                           tblptru	equ	0xFF8
 23729                           tblptrh	equ	0xFF7
 23730                           tblptrl	equ	0xFF6
 23731                           tablat	equ	0xFF5
 23732                           prodh	equ	0xFF4
 23733                           prodl	equ	0xFF3
 23734                           intcon	equ	0xFF2
 23735                           intcon2	equ	0xFF1
 23736                           intcon3	equ	0xFF0
 23737                           indf0	equ	0xFEF
 23738                           postinc0	equ	0xFEE
 23739                           fsr0h	equ	0xFEA
 23740                           fsr0l	equ	0xFE9
 23741                           wreg	equ	0xFE8
 23742                           postdec1	equ	0xFE5
 23743                           fsr1h	equ	0xFE2
 23744                           fsr1l	equ	0xFE1
 23745                           indf2	equ	0xFDF
 23746                           postinc2	equ	0xFDE
 23747                           postdec2	equ	0xFDD
 23748                           fsr2h	equ	0xFDA
 23749                           fsr2l	equ	0xFD9
 23750                           status	equ	0xFD8
 23751                           
 23752 ;; *************** function i2_printf *****************
 23753 ;; Defined at:
 23754 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 23755 ;; Parameters:    Size  Location     Type
 23756 ;;  f               2   12[COMRAM] PTR const unsigned char 
 23757 ;;		 -> STR_130(18), STR_129(18), STR_128(17), STR_127(17), 
 23758 ;;		 -> STR_126(15), STR_125(15), STR_124(18), STR_123(15), 
 23759 ;;		 -> STR_122(18), STR_121(18), STR_120(17), STR_119(17), 
 23760 ;;		 -> STR_118(17), STR_117(17), STR_116(17), STR_115(17), 
 23761 ;;		 -> STR_114(17), STR_113(17), STR_112(18), STR_111(17), 
 23762 ;;		 -> STR_110(15), STR_109(15), STR_108(15), STR_107(17), 
 23763 ;;		 -> STR_106(17), STR_105(17), STR_104(16), STR_103(17), 
 23764 ;;		 -> STR_102(17), STR_101(17), STR_100(17), STR_99(17), 
 23765 ;;		 -> STR_98(17), STR_97(15), STR_96(11), STR_95(17), 
 23766 ;;		 -> STR_94(11), STR_93(17), STR_92(14), STR_91(15), 
 23767 ;;		 -> STR_90(14), STR_89(10), STR_88(9), STR_87(9), 
 23768 ;;		 -> STR_86(10), STR_85(10), STR_84(16), STR_83(15), 
 23769 ;;		 -> STR_82(3), STR_81(15), STR_80(13), STR_79(14), 
 23770 ;;		 -> STR_78(8), STR_77(14), STR_76(15), STR_75(12), 
 23771 ;;		 -> STR_74(14), STR_73(17), STR_72(14), STR_71(15), 
 23772 ;;		 -> STR_70(17), STR_69(17), STR_68(7), STR_67(21), 
 23773 ;;		 -> STR_66(13), STR_65(11), STR_64(19), STR_63(24), 
 23774 ;;		 -> STR_50(17), STR_49(17), STR_48(17), STR_47(17), 
 23775 ;;		 -> STR_46(17), STR_45(17), STR_44(17), STR_43(17), 
 23776 ;;		 -> STR_42(17), STR_41(17), STR_40(17), STR_39(17), 
 23777 ;;		 -> STR_38(17), STR_37(17), STR_36(17), STR_35(17), 
 23778 ;;		 -> STR_34(17), STR_33(17), STR_32(17), STR_31(17), 
 23779 ;;		 -> STR_30(17), STR_29(3), STR_28(17), STR_27(17), 
 23780 ;;		 -> STR_26(17), STR_25(17), STR_24(17), STR_23(14), 
 23781 ;;		 -> STR_22(10), STR_21(24), STR_7(7), STR_6(17), 
 23782 ;;		 -> STR_5(18), STR_4(16), STR_3(18), STR_2(14), 
 23783 ;;		 -> STR_1(18), 
 23784 ;; Auto vars:     Size  Location     Type
 23785 ;;  printf          4    0        struct .
 23786 ;;  printf          2   39[COMRAM] int 
 23787 ;;  printf          2   35[COMRAM] unsigned int 
 23788 ;;  printf          2   33[COMRAM] unsigned int 
 23789 ;;  printf          2   31[COMRAM] PTR void [1]
 23790 ;;		 -> ?i2_printf(2), ?_printf(2), 
 23791 ;;  printf          2   29[COMRAM] PTR const unsigned char 
 23792 ;;		 -> STR_131(7), ID@res2(2), ID@res1(2), count_total(2), 
 23793 ;;		 -> printRTC@month(4), UI@month(4), 
 23794 ;;  printf          1   38[COMRAM] char 
 23795 ;;  printf          1   37[COMRAM] unsigned char 
 23796 ;;  printf          1   28[COMRAM] char 
 23797 ;; Return value:  Size  Location     Type
 23798 ;;                  2   12[COMRAM] int 
 23799 ;; Registers used:
 23800 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23801 ;; Tracked objects:
 23802 ;;		On entry : 0/0
 23803 ;;		On exit  : 0/0
 23804 ;;		Unchanged: 0/0
 23805 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23806 ;;      Params:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23807 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23808 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23809 ;;      Totals:        29       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23810 ;;Total ram usage:       29 bytes
 23811 ;; Hardware stack levels used:    1
 23812 ;; Hardware stack levels required when called:    2
 23813 ;; This function calls:
 23814 ;;		i2___lwdiv
 23815 ;;		i2___lwmod
 23816 ;;		i2___wmul
 23817 ;;		i2_isdigit
 23818 ;;		i2_putch
 23819 ;; This function is called by:
 23820 ;;		_change_state_to_menu_11
 23821 ;;		_change_state_to_menu_23
 23822 ;;		_change_state_to_logs_11
 23823 ;;		_change_state_to_logs_12
 23824 ;;		_change_state_to_logs_22
 23825 ;;		_change_state_to_logs_23
 23826 ;;		_change_state_to_logs_33
 23827 ;;		_change_state_to_logs_34
 23828 ;;		_printSortTimer
 23829 ;;		i2_change_state_to_menu_start
 23830 ;;		i2_change_state_to_menu_12
 23831 ;;		i2_change_state_to_menu_22
 23832 ;;		i2_printRTC
 23833 ;; This function uses a non-reentrant model
 23834 ;;
 23835                           
 23836                           	psect	text87
 23837  002344                     __ptext87:
 23838                           	opt stack 0
 23839  002344                     i2_printf:
 23840                           	opt stack 20
 23841                           
 23842                           ;doprnt.c: 466: va_list ap;
 23843                           ;doprnt.c: 499: signed char c;
 23844                           ;doprnt.c: 501: int width;
 23845                           ;doprnt.c: 506: signed char prec;
 23846                           ;doprnt.c: 508: unsigned char flag;
 23847                           ;doprnt.c: 523: union {
 23848                           ;doprnt.c: 524: unsigned long vd;
 23849                           ;doprnt.c: 525: double integ;
 23850                           ;doprnt.c: 526: } tmpval;
 23851                           ;doprnt.c: 528: unsigned int val;
 23852                           ;doprnt.c: 529: unsigned len;
 23853                           ;doprnt.c: 530: const char * cp;
 23854                           ;doprnt.c: 533: *ap = __va_start();
 23855                           
 23856                           ;incstack = 0
 23857  002344  0E0F               	movlw	low (?i2_printf+2)
 23858  002346  6E20               	movwf	i2printf@ap,c
 23859  002348  0E00               	movlw	high (?i2_printf+2)
 23860  00234A  6E21               	movwf	i2printf@ap+1,c
 23861                           
 23862                           ;doprnt.c: 536: while(c = *f++) {
 23863  00234C  D1A4               	goto	i2l7062
 23864  00234E                     i2l6932:
 23865                           
 23866                           ;doprnt.c: 538: if(c != '%')
 23867  00234E  0E25               	movlw	37
 23868  002350  1827               	xorwf	i2printf@c,w,c
 23869  002352  B4D8               	btfsc	status,2,c
 23870  002354  D004               	goto	i2l6936
 23871                           
 23872                           ;doprnt.c: 540: {
 23873                           ;doprnt.c: 541: (putch(c) );
 23874  002356  5027               	movf	i2printf@c,w,c
 23875  002358  EC8E  F02D         	call	i2_putch
 23876                           
 23877                           ;doprnt.c: 542: continue;
 23878  00235C  D19C               	goto	i2l7062
 23879  00235E                     i2l6936:
 23880                           
 23881                           ;doprnt.c: 543: }
 23882                           ;doprnt.c: 546: width = 0;
 23883  00235E  0E00               	movlw	0
 23884  002360  6E29               	movwf	i2printf@width+1,c
 23885  002362  0E00               	movlw	0
 23886  002364  6E28               	movwf	i2printf@width,c
 23887                           
 23888                           ;doprnt.c: 548: flag = 0;
 23889  002366  0E00               	movlw	0
 23890  002368  6E26               	movwf	i2printf@flag,c
 23891                           
 23892                           ;doprnt.c: 551: switch(*f) {
 23893                           
 23894                           ;doprnt.c: 550: for(;;) {
 23895  00236A  D003               	goto	i2l6942
 23896  00236C                     i2l6938:
 23897                           
 23898                           ;doprnt.c: 580: flag |= 0x04;
 23899  00236C  8426               	bsf	i2printf@flag,2,c
 23900                           
 23901                           ;doprnt.c: 581: f++;
 23902  00236E  4A0D               	infsnz	i2printf@f,f,c
 23903  002370  2A0E               	incf	i2printf@f+1,f,c
 23904  002372                     i2l6942:
 23905  002372  C00D  FFF6         	movff	i2printf@f,tblptrl
 23906  002376  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 23907  00237A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 23908  00237A  6AF8               	clrf	tblptru,c
 23909  00237C                     	endif
 23910  00237C                     	if	0	;tblptru may be non-zero
 23911  00237C                     	endif
 23912  00237C  0008               	tblrd		*
 23913  00237E  50F5               	movf	tablat,w,c
 23914                           
 23915                           ; Switch size 1, requested type "space"
 23916                           ; Number of cases is 1, Range of values is 48 to 48
 23917                           ; switch strategies available:
 23918                           ; Name         Instructions Cycles
 23919                           ; simple_byte            4     3 (average)
 23920                           ;	Chosen strategy is simple_byte
 23921  002380  0A30               	xorlw	48	; case 48
 23922  002382  B4D8               	btfsc	status,2,c
 23923  002384  D7F3               	goto	i2l6938
 23924                           
 23925                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 23926                           
 23927                           ;doprnt.c: 586: }
 23928                           
 23929                           ;doprnt.c: 585: break;
 23930  002386  C00D  FFF6         	movff	i2printf@f,tblptrl
 23931  00238A  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 23932  00238E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 23933  00238E  6AF8               	clrf	tblptru,c
 23934  002390                     	endif
 23935  002390                     	if	0	;tblptru may be non-zero
 23936  002390                     	endif
 23937  002390  0008               	tblrd		*
 23938  002392  50F5               	movf	tablat,w,c
 23939  002394  EC29  F02D         	call	i2_isdigit
 23940  002398  A0D8               	btfss	status,0,c
 23941  00239A  D0A6               	goto	i2l6990
 23942                           
 23943                           ;doprnt.c: 598: width = 0;
 23944  00239C  0E00               	movlw	0
 23945  00239E  6E29               	movwf	i2printf@width+1,c
 23946  0023A0  0E00               	movlw	0
 23947  0023A2  6E28               	movwf	i2printf@width,c
 23948  0023A4                     i2l6948:
 23949                           
 23950                           ;doprnt.c: 600: width *= 10;
 23951  0023A4  C028  F001         	movff	i2printf@width,i2___wmul@multiplier
 23952  0023A8  C029  F002         	movff	i2printf@width+1,i2___wmul@multiplier+1
 23953  0023AC  0E00               	movlw	0
 23954  0023AE  6E04               	movwf	i2___wmul@multiplicand+1,c
 23955  0023B0  0E0A               	movlw	10
 23956  0023B2  6E03               	movwf	i2___wmul@multiplicand,c
 23957  0023B4  ECCF  F02C         	call	i2___wmul	;wreg free
 23958  0023B8  C001  F028         	movff	?i2___wmul,i2printf@width
 23959  0023BC  C002  F029         	movff	?i2___wmul+1,i2printf@width+1
 23960                           
 23961                           ;doprnt.c: 601: width += *f++ - '0';
 23962  0023C0  0ED0               	movlw	208
 23963  0023C2  6E19               	movwf	??i2_printf& (0+255),c
 23964  0023C4  0EFF               	movlw	255
 23965  0023C6  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 23966  0023C8  C00D  FFF6         	movff	i2printf@f,tblptrl
 23967  0023CC  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 23968  0023D0                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 23969  0023D0  6AF8               	clrf	tblptru,c
 23970  0023D2                     	endif
 23971  0023D2                     	if	0	;tblptru may be non-zero
 23972  0023D2                     	endif
 23973  0023D2  0008               	tblrd		*
 23974  0023D4  50F5               	movf	tablat,w,c
 23975  0023D6  6E1B               	movwf	(??i2_printf+2)& (0+255),c
 23976  0023D8  6A1C               	clrf	(??i2_printf+3)& (0+255),c
 23977  0023DA  5019               	movf	??i2_printf,w,c
 23978  0023DC  261B               	addwf	??i2_printf+2,f,c
 23979  0023DE  501A               	movf	??i2_printf+1,w,c
 23980  0023E0  221C               	addwfc	??i2_printf+3,f,c
 23981  0023E2  501B               	movf	??i2_printf+2,w,c
 23982  0023E4  2628               	addwf	i2printf@width,f,c
 23983  0023E6  501C               	movf	??i2_printf+3,w,c
 23984  0023E8  2229               	addwfc	i2printf@width+1,f,c
 23985  0023EA  4A0D               	infsnz	i2printf@f,f,c
 23986  0023EC  2A0E               	incf	i2printf@f+1,f,c
 23987                           
 23988                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 23989  0023EE  C00D  FFF6         	movff	i2printf@f,tblptrl
 23990  0023F2  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 23991  0023F6                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 23992  0023F6  6AF8               	clrf	tblptru,c
 23993  0023F8                     	endif
 23994  0023F8                     	if	0	;tblptru may be non-zero
 23995  0023F8                     	endif
 23996  0023F8  0008               	tblrd		*
 23997  0023FA  50F5               	movf	tablat,w,c
 23998  0023FC  EC29  F02D         	call	i2_isdigit
 23999  002400  A0D8               	btfss	status,0,c
 24000  002402  D072               	goto	i2l6990
 24001  002404  D7CF               	goto	i2l6948
 24002  002406                     i2l6956:
 24003                           
 24004                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 24005  002406  C020  FFD9         	movff	i2printf@ap,fsr2l
 24006  00240A  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 24007  00240E  CFDE F01E          	movff	postinc2,i2printf@cp
 24008  002412  CFDD F01F          	movff	postdec2,i2printf@cp+1
 24009  002416  0E02               	movlw	2
 24010  002418  2620               	addwf	i2printf@ap,f,c
 24011  00241A  0E00               	movlw	0
 24012  00241C  2221               	addwfc	i2printf@ap+1,f,c
 24013                           
 24014                           ;doprnt.c: 740: if(!cp)
 24015  00241E  501E               	movf	i2printf@cp,w,c
 24016  002420  101F               	iorwf	i2printf@cp+1,w,c
 24017  002422  A4D8               	btfss	status,2,c
 24018  002424  D004               	goto	i2l6964
 24019                           
 24020                           ;doprnt.c: 741: cp = "(null)";
 24021  002426  0EB5               	movlw	low STR_131
 24022  002428  6E1E               	movwf	i2printf@cp,c
 24023  00242A  0EFF               	movlw	high STR_131
 24024  00242C  6E1F               	movwf	i2printf@cp+1,c
 24025  00242E                     i2l6964:
 24026                           
 24027                           ;doprnt.c: 745: len = 0;
 24028  00242E  0E00               	movlw	0
 24029  002430  6E23               	movwf	i2printf@len+1,c
 24030  002432  0E00               	movlw	0
 24031  002434  6E22               	movwf	i2printf@len,c
 24032                           
 24033                           ;doprnt.c: 746: while(cp[len])
 24034  002436  D002               	goto	i2l6968
 24035  002438                     i2l6966:
 24036                           
 24037                           ;doprnt.c: 747: len++;
 24038  002438  4A22               	infsnz	i2printf@len,f,c
 24039  00243A  2A23               	incf	i2printf@len+1,f,c
 24040  00243C                     i2l6968:
 24041  00243C  5022               	movf	i2printf@len,w,c
 24042  00243E  241E               	addwf	i2printf@cp,w,c
 24043  002440  6E19               	movwf	??i2_printf& (0+255),c
 24044  002442  5023               	movf	i2printf@len+1,w,c
 24045  002444  201F               	addwfc	i2printf@cp+1,w,c
 24046  002446  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 24047  002448  C019  FFF6         	movff	??i2_printf,tblptrl
 24048  00244C  C01A  FFF7         	movff	??i2_printf+1,tblptrh
 24049  002450  0E00               	movlw	low (__mediumconst shr (0+16))
 24050  002452  6EF8               	movwf	tblptru,c
 24051  002454  0E0F               	movlw	(high __ramtop+-1)
 24052  002456  64F7               	cpfsgt	tblptrh,c
 24053  002458  D003               	bra	i2u558_47
 24054  00245A  0008               	tblrd		*
 24055  00245C  50F5               	movf	tablat,w,c
 24056  00245E  D005               	bra	i2u558_40
 24057  002460                     i2u558_47:
 24058  002460  CFF6 FFE9          	movff	tblptrl,fsr0l
 24059  002464  CFF7 FFEA          	movff	tblptrh,fsr0h
 24060  002468  50EF               	movf	indf0,w,c
 24061  00246A                     i2u558_40:
 24062  00246A  0900               	iorlw	0
 24063  00246C  A4D8               	btfss	status,2,c
 24064  00246E  D7E4               	goto	i2l6966
 24065                           
 24066                           ;doprnt.c: 757: if(width > len)
 24067  002470  5028               	movf	i2printf@width,w,c
 24068  002472  5C22               	subwf	i2printf@len,w,c
 24069  002474  5029               	movf	i2printf@width+1,w,c
 24070  002476  5823               	subwfb	i2printf@len+1,w,c
 24071  002478  B0D8               	btfsc	status,0,c
 24072  00247A  D005               	goto	i2l6974
 24073                           
 24074                           ;doprnt.c: 758: width -= len;
 24075  00247C  5022               	movf	i2printf@len,w,c
 24076  00247E  5E28               	subwf	i2printf@width,f,c
 24077  002480  5023               	movf	i2printf@len+1,w,c
 24078  002482  5A29               	subwfb	i2printf@width+1,f,c
 24079  002484  D008               	goto	i2l6978
 24080  002486                     i2l6974:
 24081                           
 24082                           ;doprnt.c: 759: else
 24083                           ;doprnt.c: 760: width = 0;
 24084  002486  0E00               	movlw	0
 24085  002488  6E29               	movwf	i2printf@width+1,c
 24086  00248A  0E00               	movlw	0
 24087  00248C  6E28               	movwf	i2printf@width,c
 24088                           
 24089                           ;doprnt.c: 764: while(width--)
 24090  00248E  D003               	goto	i2l6978
 24091  002490                     i2l6976:
 24092                           
 24093                           ;doprnt.c: 765: (putch(' ') );
 24094  002490  0E20               	movlw	32
 24095  002492  EC8E  F02D         	call	i2_putch
 24096  002496                     i2l6978:
 24097  002496  0628               	decf	i2printf@width,f,c
 24098  002498  A0D8               	btfss	status,0,c
 24099  00249A  0629               	decf	i2printf@width+1,f,c
 24100  00249C  2828               	incf	i2printf@width,w,c
 24101  00249E  E1F8               	bnz	i2l6976
 24102  0024A0  2829               	incf	i2printf@width+1,w,c
 24103  0024A2  B4D8               	btfsc	status,2,c
 24104  0024A4  D016               	goto	i2l6984
 24105  0024A6  D7F4               	goto	i2l6976
 24106  0024A8                     i2l6980:
 24107                           
 24108                           ;doprnt.c: 768: (putch(*cp++) );
 24109  0024A8  C01E  FFF6         	movff	i2printf@cp,tblptrl
 24110  0024AC  C01F  FFF7         	movff	i2printf@cp+1,tblptrh
 24111  0024B0  0E00               	movlw	low (__mediumconst shr (0+16))
 24112  0024B2  6EF8               	movwf	tblptru,c
 24113  0024B4  0E0F               	movlw	(high __ramtop+-1)
 24114  0024B6  64F7               	cpfsgt	tblptrh,c
 24115  0024B8  D003               	bra	i2u562_47
 24116  0024BA  0008               	tblrd		*
 24117  0024BC  50F5               	movf	tablat,w,c
 24118  0024BE  D005               	bra	i2u562_40
 24119  0024C0                     i2u562_47:
 24120  0024C0  CFF6 FFE9          	movff	tblptrl,fsr0l
 24121  0024C4  CFF7 FFEA          	movff	tblptrh,fsr0h
 24122  0024C8  50EF               	movf	indf0,w,c
 24123  0024CA                     i2u562_40:
 24124  0024CA  EC8E  F02D         	call	i2_putch
 24125  0024CE  4A1E               	infsnz	i2printf@cp,f,c
 24126  0024D0  2A1F               	incf	i2printf@cp+1,f,c
 24127  0024D2                     i2l6984:
 24128  0024D2  0622               	decf	i2printf@len,f,c
 24129  0024D4  A0D8               	btfss	status,0,c
 24130  0024D6  0623               	decf	i2printf@len+1,f,c
 24131  0024D8  2822               	incf	i2printf@len,w,c
 24132  0024DA  E1E6               	bnz	i2l6980
 24133  0024DC  2823               	incf	i2printf@len+1,w,c
 24134  0024DE  B4D8               	btfsc	status,2,c
 24135  0024E0  D0DA               	goto	i2l7062
 24136  0024E2  D7E2               	goto	i2l6980
 24137  0024E4                     i2l6986:
 24138                           
 24139                           ;doprnt.c: 818: flag |= 0x40;
 24140  0024E4  8C26               	bsf	i2printf@flag,6,c
 24141                           
 24142                           ;doprnt.c: 822: }
 24143                           
 24144                           ;doprnt.c: 819: break;
 24145  0024E6  D01B               	goto	i2l1510
 24146  0024E8                     i2l6990:
 24147  0024E8  C00D  FFF6         	movff	i2printf@f,tblptrl
 24148  0024EC  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 24149  0024F0  4A0D               	infsnz	i2printf@f,f,c
 24150  0024F2  2A0E               	incf	i2printf@f+1,f,c
 24151  0024F4                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 24152  0024F4  6AF8               	clrf	tblptru,c
 24153  0024F6                     	endif
 24154  0024F6                     	if	0	;tblptru may be non-zero
 24155  0024F6                     	endif
 24156  0024F6  0008               	tblrd		*
 24157  0024F8  CFF5 F027          	movff	tablat,i2printf@c
 24158  0024FC  5027               	movf	i2printf@c,w,c
 24159                           
 24160                           ; Switch size 1, requested type "space"
 24161                           ; Number of cases is 5, Range of values is 0 to 117
 24162                           ; switch strategies available:
 24163                           ; Name         Instructions Cycles
 24164                           ; simple_byte           16     9 (average)
 24165                           ;	Chosen strategy is simple_byte
 24166  0024FE  0A00               	xorlw	0	; case 0
 24167  002500  B4D8               	btfsc	status,2,c
 24168  002502  0012               	return	
 24169  002504  0A64               	xorlw	100	; case 100
 24170  002506  B4D8               	btfsc	status,2,c
 24171  002508  D00A               	goto	i2l1510
 24172  00250A  0A0D               	xorlw	13	; case 105
 24173  00250C  B4D8               	btfsc	status,2,c
 24174  00250E  D007               	goto	i2l1510
 24175  002510  0A1A               	xorlw	26	; case 115
 24176  002512  B4D8               	btfsc	status,2,c
 24177  002514  D778               	goto	i2l6956
 24178  002516  0A06               	xorlw	6	; case 117
 24179  002518  B4D8               	btfsc	status,2,c
 24180  00251A  D7E4               	goto	i2l6986
 24181  00251C  D0BC               	goto	i2l7062
 24182  00251E                     i2l1510:
 24183                           
 24184                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
 24185  00251E  BC26               	btfsc	i2printf@flag,6,c
 24186  002520  D015               	goto	i2l7002
 24187                           
 24188                           ;doprnt.c: 1253: {
 24189                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 24190  002522  C020  FFD9         	movff	i2printf@ap,fsr2l
 24191  002526  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 24192  00252A  CFDE F024          	movff	postinc2,i2printf@val
 24193  00252E  CFDD F025          	movff	postdec2,i2printf@val+1
 24194  002532  0E02               	movlw	2
 24195  002534  2620               	addwf	i2printf@ap,f,c
 24196  002536  0E00               	movlw	0
 24197  002538  2221               	addwfc	i2printf@ap+1,f,c
 24198                           
 24199                           ;doprnt.c: 1261: if((int)val < 0) {
 24200  00253A  AE25               	btfss	i2printf@val+1,7,c
 24201  00253C  D013               	goto	i2l7006
 24202                           
 24203                           ;doprnt.c: 1262: flag |= 0x03;
 24204  00253E  0E03               	movlw	3
 24205  002540  1226               	iorwf	i2printf@flag,f,c
 24206                           
 24207                           ;doprnt.c: 1263: val = -val;
 24208  002542  6C24               	negf	i2printf@val,c
 24209  002544  1E25               	comf	i2printf@val+1,f,c
 24210  002546  B0D8               	btfsc	status,0,c
 24211  002548  2A25               	incf	i2printf@val+1,f,c
 24212                           
 24213                           ;doprnt.c: 1264: }
 24214                           ;doprnt.c: 1266: }
 24215  00254A  D00C               	goto	i2l7006
 24216  00254C                     i2l7002:
 24217                           
 24218                           ;doprnt.c: 1268: else
 24219                           ;doprnt.c: 1273: {
 24220                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 24221  00254C  C020  FFD9         	movff	i2printf@ap,fsr2l
 24222  002550  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 24223  002554  CFDE F024          	movff	postinc2,i2printf@val
 24224  002558  CFDD F025          	movff	postdec2,i2printf@val+1
 24225  00255C  0E02               	movlw	2
 24226  00255E  2620               	addwf	i2printf@ap,f,c
 24227  002560  0E00               	movlw	0
 24228  002562  2221               	addwfc	i2printf@ap+1,f,c
 24229  002564                     i2l7006:
 24230                           
 24231                           ;doprnt.c: 1287: }
 24232                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 24233  002564  0E01               	movlw	1
 24234  002566  6E27               	movwf	i2printf@c,c
 24235  002568                     i2l7008:
 24236  002568  0E05               	movlw	5
 24237  00256A  1827               	xorwf	i2printf@c,w,c
 24238  00256C  B4D8               	btfsc	status,2,c
 24239  00256E  D015               	goto	i2l7020
 24240                           
 24241                           ;doprnt.c: 1306: if(val < dpowers[c])
 24242  002570  5027               	movf	i2printf@c,w,c
 24243  002572  0D02               	mullw	2
 24244  002574  0EA4               	movlw	low _dpowers
 24245  002576  24F3               	addwf	prodl,w,c
 24246  002578  6EF6               	movwf	tblptrl,c
 24247  00257A  0EFA               	movlw	high _dpowers
 24248  00257C  20F4               	addwfc	prodh,w,c
 24249  00257E  6EF7               	movwf	tblptrh,c
 24250  002580                     	if	1	;There are 3 active tblptr bytes
 24251  002580  6AF8               	clrf	tblptru,c
 24252  002582  0E00               	movlw	low (__mediumconst shr (0+16))
 24253  002584  22F8               	addwfc	tblptru,f,c
 24254  002586                     	endif
 24255  002586  0009               	tblrd		*+
 24256  002588  50F5               	movf	tablat,w,c
 24257  00258A  5C24               	subwf	i2printf@val,w,c
 24258  00258C  0009               	tblrd		*+
 24259  00258E  50F5               	movf	tablat,w,c
 24260  002590  5825               	subwfb	i2printf@val+1,w,c
 24261  002592  A0D8               	btfss	status,0,c
 24262  002594  D002               	goto	i2l7020
 24263                           
 24264                           ;doprnt.c: 1307: break;
 24265  002596  2A27               	incf	i2printf@c,f,c
 24266  002598  D7E7               	goto	i2l7008
 24267  00259A                     i2l7020:
 24268                           
 24269                           ;doprnt.c: 1345: if(width && flag & 0x03)
 24270  00259A  5028               	movf	i2printf@width,w,c
 24271  00259C  1029               	iorwf	i2printf@width+1,w,c
 24272  00259E  B4D8               	btfsc	status,2,c
 24273  0025A0  D009               	goto	i2l7026
 24274  0025A2  C026  F019         	movff	i2printf@flag,??i2_printf
 24275  0025A6  0E03               	movlw	3
 24276  0025A8  1619               	andwf	??i2_printf,f,c
 24277  0025AA  B4D8               	btfsc	status,2,c
 24278  0025AC  D003               	goto	i2l7026
 24279                           
 24280                           ;doprnt.c: 1346: width--;
 24281  0025AE  0628               	decf	i2printf@width,f,c
 24282  0025B0  A0D8               	btfss	status,0,c
 24283  0025B2  0629               	decf	i2printf@width+1,f,c
 24284  0025B4                     i2l7026:
 24285                           
 24286                           ;doprnt.c: 1381: if(width > c)
 24287  0025B4  0E80               	movlw	128
 24288  0025B6  BE27               	btfsc	i2printf@c,7,c
 24289  0025B8  0E7F               	movlw	127
 24290  0025BA  6E19               	movwf	??i2_printf& (0+255),c
 24291  0025BC  5028               	movf	i2printf@width,w,c
 24292  0025BE  5C27               	subwf	i2printf@c,w,c
 24293  0025C0  5029               	movf	i2printf@width+1,w,c
 24294  0025C2  0A80               	xorlw	128
 24295  0025C4  5819               	subwfb	??i2_printf& (0+255),w,c
 24296  0025C6  B0D8               	btfsc	status,0,c
 24297  0025C8  D007               	goto	i2l7030
 24298                           
 24299                           ;doprnt.c: 1382: width -= c;
 24300  0025CA  5027               	movf	i2printf@c,w,c
 24301  0025CC  5E28               	subwf	i2printf@width,f,c
 24302  0025CE  0E00               	movlw	0
 24303  0025D0  BE27               	btfsc	i2printf@c,7,c
 24304  0025D2  0EFF               	movlw	255
 24305  0025D4  5A29               	subwfb	i2printf@width+1,f,c
 24306  0025D6  D004               	goto	i2l7032
 24307  0025D8                     i2l7030:
 24308                           
 24309                           ;doprnt.c: 1383: else
 24310                           ;doprnt.c: 1384: width = 0;
 24311  0025D8  0E00               	movlw	0
 24312  0025DA  6E29               	movwf	i2printf@width+1,c
 24313  0025DC  0E00               	movlw	0
 24314  0025DE  6E28               	movwf	i2printf@width,c
 24315  0025E0                     i2l7032:
 24316                           
 24317                           ;doprnt.c: 1387: if(flag & 0x04) {
 24318  0025E0  A426               	btfss	i2printf@flag,2,c
 24319  0025E2  D014               	goto	i2l7044
 24320                           
 24321                           ;doprnt.c: 1392: if(flag & 0x03)
 24322  0025E4  C026  F019         	movff	i2printf@flag,??i2_printf
 24323  0025E8  0E03               	movlw	3
 24324  0025EA  1619               	andwf	??i2_printf,f,c
 24325  0025EC  B4D8               	btfsc	status,2,c
 24326  0025EE  D003               	goto	i2l7038
 24327                           
 24328                           ;doprnt.c: 1393: (putch('-') );
 24329  0025F0  0E2D               	movlw	45
 24330  0025F2  EC8E  F02D         	call	i2_putch
 24331  0025F6                     i2l7038:
 24332                           
 24333                           ;doprnt.c: 1415: if(width)
 24334  0025F6  5028               	movf	i2printf@width,w,c
 24335  0025F8  1029               	iorwf	i2printf@width+1,w,c
 24336  0025FA  B4D8               	btfsc	status,2,c
 24337  0025FC  D01E               	goto	i2l7054
 24338                           
 24339                           ;doprnt.c: 1417: (putch('0') );
 24340                           
 24341                           ;doprnt.c: 1416: do
 24342  0025FE  0E30               	movlw	48
 24343  002600  EC8E  F02D         	call	i2_putch
 24344                           
 24345                           ;doprnt.c: 1418: while(--width);
 24346  002604  0628               	decf	i2printf@width,f,c
 24347  002606  A0D8               	btfss	status,0,c
 24348  002608  0629               	decf	i2printf@width+1,f,c
 24349  00260A  D7F5               	goto	i2l7038
 24350  00260C                     i2l7044:
 24351                           
 24352                           ;doprnt.c: 1422: {
 24353                           ;doprnt.c: 1424: if(width
 24354                           ;doprnt.c: 1428: )
 24355  00260C  5028               	movf	i2printf@width,w,c
 24356  00260E  1029               	iorwf	i2printf@width+1,w,c
 24357  002610  B4D8               	btfsc	status,2,c
 24358  002612  D00A               	goto	i2l7050
 24359  002614                     i2l7046:
 24360                           
 24361                           ;doprnt.c: 1430: (putch(' ') );
 24362  002614  0E20               	movlw	32
 24363  002616  EC8E  F02D         	call	i2_putch
 24364                           
 24365                           ;doprnt.c: 1431: while(--width);
 24366  00261A  0628               	decf	i2printf@width,f,c
 24367  00261C  A0D8               	btfss	status,0,c
 24368  00261E  0629               	decf	i2printf@width+1,f,c
 24369  002620  5028               	movf	i2printf@width,w,c
 24370  002622  1029               	iorwf	i2printf@width+1,w,c
 24371  002624  A4D8               	btfss	status,2,c
 24372  002626  D7F6               	goto	i2l7046
 24373  002628                     i2l7050:
 24374                           
 24375                           ;doprnt.c: 1438: if(flag & 0x03)
 24376  002628  C026  F019         	movff	i2printf@flag,??i2_printf
 24377  00262C  0E03               	movlw	3
 24378  00262E  1619               	andwf	??i2_printf,f,c
 24379  002630  B4D8               	btfsc	status,2,c
 24380  002632  D003               	goto	i2l7054
 24381                           
 24382                           ;doprnt.c: 1439: (putch('-') );
 24383  002634  0E2D               	movlw	45
 24384  002636  EC8E  F02D         	call	i2_putch
 24385  00263A                     i2l7054:
 24386                           
 24387                           ;doprnt.c: 1469: }
 24388                           ;doprnt.c: 1472: prec = c;
 24389  00263A  C027  F01D         	movff	i2printf@c,i2printf@prec
 24390                           
 24391                           ;doprnt.c: 1474: while(prec--) {
 24392  00263E  D027               	goto	i2l7060
 24393  002640                     i2l7056:
 24394                           
 24395                           ;doprnt.c: 1478: {
 24396                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 24397  002640  501D               	movf	i2printf@prec,w,c
 24398  002642  0D02               	mullw	2
 24399  002644  0EA4               	movlw	low _dpowers
 24400  002646  24F3               	addwf	prodl,w,c
 24401  002648  6EF6               	movwf	tblptrl,c
 24402  00264A  0EFA               	movlw	high _dpowers
 24403  00264C  20F4               	addwfc	prodh,w,c
 24404  00264E  6EF7               	movwf	tblptrh,c
 24405  002650                     	if	1	;There are 3 active tblptr bytes
 24406  002650  6AF8               	clrf	tblptru,c
 24407  002652  0E00               	movlw	low (__mediumconst shr (0+16))
 24408  002654  22F8               	addwfc	tblptru,f,c
 24409  002656                     	endif
 24410  002656  0009               	tblrd		*+
 24411  002658  CFF5 F008          	movff	tablat,i2___lwdiv@divisor
 24412  00265C  000A               	tblrd		*-
 24413  00265E  CFF5 F009          	movff	tablat,i2___lwdiv@divisor+1
 24414  002662  C024  F006         	movff	i2printf@val,i2___lwdiv@dividend
 24415  002666  C025  F007         	movff	i2printf@val+1,i2___lwdiv@dividend+1
 24416  00266A  EC63  F029         	call	i2___lwdiv	;wreg free
 24417  00266E  C006  F001         	movff	?i2___lwdiv,i2___lwmod@dividend
 24418  002672  C007  F002         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
 24419  002676  0E00               	movlw	0
 24420  002678  6E04               	movwf	i2___lwmod@divisor+1,c
 24421  00267A  0E0A               	movlw	10
 24422  00267C  6E03               	movwf	i2___lwmod@divisor,c
 24423  00267E  EC6A  F02A         	call	i2___lwmod	;wreg free
 24424  002682  5001               	movf	?i2___lwmod,w,c
 24425  002684  0F30               	addlw	48
 24426  002686  6E27               	movwf	i2printf@c,c
 24427                           
 24428                           ;doprnt.c: 1523: }
 24429                           ;doprnt.c: 1524: (putch(c) );
 24430  002688  5027               	movf	i2printf@c,w,c
 24431  00268A  EC8E  F02D         	call	i2_putch
 24432  00268E                     i2l7060:
 24433  00268E  061D               	decf	i2printf@prec,f,c
 24434  002690  281D               	incf	i2printf@prec,w,c
 24435  002692  A4D8               	btfss	status,2,c
 24436  002694  D7D5               	goto	i2l7056
 24437  002696                     i2l7062:
 24438  002696  C00D  FFF6         	movff	i2printf@f,tblptrl
 24439  00269A  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 24440  00269E  4A0D               	infsnz	i2printf@f,f,c
 24441  0026A0  2A0E               	incf	i2printf@f+1,f,c
 24442  0026A2                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 24443  0026A2  6AF8               	clrf	tblptru,c
 24444  0026A4                     	endif
 24445  0026A4                     	if	0	;tblptru may be non-zero
 24446  0026A4                     	endif
 24447  0026A4  0008               	tblrd		*
 24448  0026A6  CFF5 F027          	movff	tablat,i2printf@c
 24449  0026AA  5027               	movf	i2printf@c,w,c
 24450  0026AC  B4D8               	btfsc	status,2,c
 24451  0026AE  0012               	return	
 24452  0026B0  D64E               	goto	i2l6932
 24453  0026B2                     __end_ofi2_printf:
 24454                           	opt stack 0
 24455                           pclatu	equ	0xFFB
 24456                           pclath	equ	0xFFA
 24457                           tblptru	equ	0xFF8
 24458                           tblptrh	equ	0xFF7
 24459                           tblptrl	equ	0xFF6
 24460                           tablat	equ	0xFF5
 24461                           prodh	equ	0xFF4
 24462                           prodl	equ	0xFF3
 24463                           intcon	equ	0xFF2
 24464                           intcon2	equ	0xFF1
 24465                           intcon3	equ	0xFF0
 24466                           indf0	equ	0xFEF
 24467                           postinc0	equ	0xFEE
 24468                           fsr0h	equ	0xFEA
 24469                           fsr0l	equ	0xFE9
 24470                           wreg	equ	0xFE8
 24471                           postdec1	equ	0xFE5
 24472                           fsr1h	equ	0xFE2
 24473                           fsr1l	equ	0xFE1
 24474                           indf2	equ	0xFDF
 24475                           postinc2	equ	0xFDE
 24476                           postdec2	equ	0xFDD
 24477                           fsr2h	equ	0xFDA
 24478                           fsr2l	equ	0xFD9
 24479                           status	equ	0xFD8
 24480                           
 24481 ;; *************** function i2_putch *****************
 24482 ;; Defined at:
 24483 ;;		line 20 in file "lcd.c"
 24484 ;; Parameters:    Size  Location     Type
 24485 ;;  data            1    wreg     unsigned char 
 24486 ;; Auto vars:     Size  Location     Type
 24487 ;;  data            1    2[COMRAM] unsigned char 
 24488 ;; Return value:  Size  Location     Type
 24489 ;;                  1    wreg      void 
 24490 ;; Registers used:
 24491 ;;		wreg, status,2, status,0, cstack
 24492 ;; Tracked objects:
 24493 ;;		On entry : 0/0
 24494 ;;		On exit  : 0/0
 24495 ;;		Unchanged: 0/0
 24496 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24497 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24498 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24499 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24500 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24501 ;;Total ram usage:        1 bytes
 24502 ;; Hardware stack levels used:    1
 24503 ;; Hardware stack levels required when called:    1
 24504 ;; This function calls:
 24505 ;;		i2_lcdNibble
 24506 ;; This function is called by:
 24507 ;;		i2_printf
 24508 ;; This function uses a non-reentrant model
 24509 ;;
 24510                           
 24511                           	psect	text88
 24512  005B1C                     __ptext88:
 24513                           	opt stack 0
 24514  005B1C                     i2_putch:
 24515                           	opt stack 20
 24516                           
 24517                           ;incstack = 0
 24518                           ;i2putch@data stored from wreg
 24519  005B1C  6E03               	movwf	i2putch@data,c
 24520                           
 24521                           ;lcd.c: 21: LATDbits.LATD2 = 1;
 24522  005B1E  848C               	bsf	3980,2,c	;volatile
 24523                           
 24524                           ;lcd.c: 22: lcdNibble(data);
 24525  005B20  5003               	movf	i2putch@data,w,c
 24526  005B22  EC36  F029         	call	i2_lcdNibble
 24527  005B26  0012               	return		;funcret
 24528  005B28                     __end_ofi2_putch:
 24529                           	opt stack 0
 24530                           pclatu	equ	0xFFB
 24531                           pclath	equ	0xFFA
 24532                           tblptru	equ	0xFF8
 24533                           tblptrh	equ	0xFF7
 24534                           tblptrl	equ	0xFF6
 24535                           tablat	equ	0xFF5
 24536                           prodh	equ	0xFF4
 24537                           prodl	equ	0xFF3
 24538                           intcon	equ	0xFF2
 24539                           intcon2	equ	0xFF1
 24540                           intcon3	equ	0xFF0
 24541                           indf0	equ	0xFEF
 24542                           postinc0	equ	0xFEE
 24543                           fsr0h	equ	0xFEA
 24544                           fsr0l	equ	0xFE9
 24545                           wreg	equ	0xFE8
 24546                           postdec1	equ	0xFE5
 24547                           fsr1h	equ	0xFE2
 24548                           fsr1l	equ	0xFE1
 24549                           indf2	equ	0xFDF
 24550                           postinc2	equ	0xFDE
 24551                           postdec2	equ	0xFDD
 24552                           fsr2h	equ	0xFDA
 24553                           fsr2l	equ	0xFD9
 24554                           status	equ	0xFD8
 24555                           
 24556 ;; *************** function i2_isdigit *****************
 24557 ;; Defined at:
 24558 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 24559 ;; Parameters:    Size  Location     Type
 24560 ;;  c               1    wreg     unsigned char 
 24561 ;; Auto vars:     Size  Location     Type
 24562 ;;  c               1    2[COMRAM] unsigned char 
 24563 ;; Return value:  Size  Location     Type
 24564 ;;		None               void
 24565 ;; Registers used:
 24566 ;;		wreg, status,2, status,0
 24567 ;; Tracked objects:
 24568 ;;		On entry : 0/0
 24569 ;;		On exit  : 0/0
 24570 ;;		Unchanged: 0/0
 24571 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24572 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24573 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24574 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24575 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24576 ;;Total ram usage:        3 bytes
 24577 ;; Hardware stack levels used:    1
 24578 ;; This function calls:
 24579 ;;		Nothing
 24580 ;; This function is called by:
 24581 ;;		i2_printf
 24582 ;; This function uses a non-reentrant model
 24583 ;;
 24584                           
 24585                           	psect	text89
 24586  005A52                     __ptext89:
 24587                           	opt stack 0
 24588  005A52                     i2_isdigit:
 24589                           	opt stack 21
 24590                           
 24591                           ;incstack = 0
 24592                           ;i2isdigit@c stored from wreg
 24593  005A52  6E03               	movwf	i2isdigit@c,c
 24594  005A54  0E00               	movlw	0
 24595  005A56  6E02               	movwf	i2_isdigit$2060,c
 24596  005A58  0E3A               	movlw	58
 24597  005A5A  6003               	cpfslt	i2isdigit@c,c
 24598  005A5C  D005               	goto	i2l6596
 24599  005A5E  0E2F               	movlw	47
 24600  005A60  6403               	cpfsgt	i2isdigit@c,c
 24601  005A62  D002               	goto	i2l6596
 24602  005A64  0E01               	movlw	1
 24603  005A66  6E02               	movwf	i2_isdigit$2060,c
 24604  005A68                     i2l6596:
 24605  005A68  C002  F001         	movff	i2_isdigit$2060,??i2_isdigit
 24606  005A6C  3001               	rrcf	??i2_isdigit,w,c
 24607  005A6E  0012               	return	
 24608  005A70                     __end_ofi2_isdigit:
 24609                           	opt stack 0
 24610                           pclatu	equ	0xFFB
 24611                           pclath	equ	0xFFA
 24612                           tblptru	equ	0xFF8
 24613                           tblptrh	equ	0xFF7
 24614                           tblptrl	equ	0xFF6
 24615                           tablat	equ	0xFF5
 24616                           prodh	equ	0xFF4
 24617                           prodl	equ	0xFF3
 24618                           intcon	equ	0xFF2
 24619                           intcon2	equ	0xFF1
 24620                           intcon3	equ	0xFF0
 24621                           indf0	equ	0xFEF
 24622                           postinc0	equ	0xFEE
 24623                           fsr0h	equ	0xFEA
 24624                           fsr0l	equ	0xFE9
 24625                           wreg	equ	0xFE8
 24626                           postdec1	equ	0xFE5
 24627                           fsr1h	equ	0xFE2
 24628                           fsr1l	equ	0xFE1
 24629                           indf2	equ	0xFDF
 24630                           postinc2	equ	0xFDE
 24631                           postdec2	equ	0xFDD
 24632                           fsr2h	equ	0xFDA
 24633                           fsr2l	equ	0xFD9
 24634                           status	equ	0xFD8
 24635                           
 24636 ;; *************** function i2___wmul *****************
 24637 ;; Defined at:
 24638 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 24639 ;; Parameters:    Size  Location     Type
 24640 ;;  multiplier      2    0[COMRAM] unsigned int 
 24641 ;;  multiplicand    2    2[COMRAM] unsigned int 
 24642 ;; Auto vars:     Size  Location     Type
 24643 ;;  __wmul          2    4[COMRAM] unsigned int 
 24644 ;; Return value:  Size  Location     Type
 24645 ;;                  2    0[COMRAM] unsigned int 
 24646 ;; Registers used:
 24647 ;;		wreg, status,2, status,0, prodl, prodh
 24648 ;; Tracked objects:
 24649 ;;		On entry : 0/0
 24650 ;;		On exit  : 0/0
 24651 ;;		Unchanged: 0/0
 24652 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24653 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24654 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24655 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24656 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24657 ;;Total ram usage:        6 bytes
 24658 ;; Hardware stack levels used:    1
 24659 ;; This function calls:
 24660 ;;		Nothing
 24661 ;; This function is called by:
 24662 ;;		_printSortTimer
 24663 ;;		_retrieveLog
 24664 ;;		i2_printf
 24665 ;; This function uses a non-reentrant model
 24666 ;;
 24667                           
 24668                           	psect	text90
 24669  00599E                     __ptext90:
 24670                           	opt stack 0
 24671  00599E                     i2___wmul:
 24672                           	opt stack 21
 24673                           
 24674                           ;incstack = 0
 24675  00599E  5001               	movf	i2___wmul@multiplier,w,c
 24676  0059A0  0203               	mulwf	i2___wmul@multiplicand,c
 24677  0059A2  CFF3 F005          	movff	prodl,i2___wmul@product
 24678  0059A6  CFF4 F006          	movff	prodh,i2___wmul@product+1
 24679  0059AA  5001               	movf	i2___wmul@multiplier,w,c
 24680  0059AC  0204               	mulwf	i2___wmul@multiplicand+1,c
 24681  0059AE  50F3               	movf	prodl,w,c
 24682  0059B0  2606               	addwf	i2___wmul@product+1,f,c
 24683  0059B2  5002               	movf	i2___wmul@multiplier+1,w,c
 24684  0059B4  0203               	mulwf	i2___wmul@multiplicand,c
 24685  0059B6  50F3               	movf	prodl,w,c
 24686  0059B8  2606               	addwf	i2___wmul@product+1,f,c
 24687  0059BA  C005  F001         	movff	i2___wmul@product,?i2___wmul
 24688  0059BE  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
 24689  0059C2  0012               	return	
 24690  0059C4                     __end_ofi2___wmul:
 24691                           	opt stack 0
 24692                           pclatu	equ	0xFFB
 24693                           pclath	equ	0xFFA
 24694                           tblptru	equ	0xFF8
 24695                           tblptrh	equ	0xFF7
 24696                           tblptrl	equ	0xFF6
 24697                           tablat	equ	0xFF5
 24698                           prodh	equ	0xFF4
 24699                           prodl	equ	0xFF3
 24700                           intcon	equ	0xFF2
 24701                           intcon2	equ	0xFF1
 24702                           intcon3	equ	0xFF0
 24703                           indf0	equ	0xFEF
 24704                           postinc0	equ	0xFEE
 24705                           fsr0h	equ	0xFEA
 24706                           fsr0l	equ	0xFE9
 24707                           wreg	equ	0xFE8
 24708                           postdec1	equ	0xFE5
 24709                           fsr1h	equ	0xFE2
 24710                           fsr1l	equ	0xFE1
 24711                           indf2	equ	0xFDF
 24712                           postinc2	equ	0xFDE
 24713                           postdec2	equ	0xFDD
 24714                           fsr2h	equ	0xFDA
 24715                           fsr2l	equ	0xFD9
 24716                           status	equ	0xFD8
 24717                           
 24718 ;; *************** function i2___lwmod *****************
 24719 ;; Defined at:
 24720 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 24721 ;; Parameters:    Size  Location     Type
 24722 ;;  dividend        2    0[COMRAM] unsigned int 
 24723 ;;  divisor         2    2[COMRAM] unsigned int 
 24724 ;; Auto vars:     Size  Location     Type
 24725 ;;  __lwmod         1    4[COMRAM] unsigned char 
 24726 ;; Return value:  Size  Location     Type
 24727 ;;                  2    0[COMRAM] unsigned int 
 24728 ;; Registers used:
 24729 ;;		wreg, status,2, status,0
 24730 ;; Tracked objects:
 24731 ;;		On entry : 0/0
 24732 ;;		On exit  : 0/0
 24733 ;;		Unchanged: 0/0
 24734 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24735 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24736 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24737 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24738 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24739 ;;Total ram usage:        5 bytes
 24740 ;; Hardware stack levels used:    1
 24741 ;; This function calls:
 24742 ;;		Nothing
 24743 ;; This function is called by:
 24744 ;;		_printSortTimer
 24745 ;;		i2_printf
 24746 ;; This function uses a non-reentrant model
 24747 ;;
 24748                           
 24749                           	psect	text91
 24750  0054D4                     __ptext91:
 24751                           	opt stack 0
 24752  0054D4                     i2___lwmod:
 24753                           	opt stack 21
 24754                           
 24755                           ;incstack = 0
 24756  0054D4  5003               	movf	i2___lwmod@divisor,w,c
 24757  0054D6  1004               	iorwf	i2___lwmod@divisor+1,w,c
 24758  0054D8  B4D8               	btfsc	status,2,c
 24759  0054DA  D018               	goto	i2l1967
 24760  0054DC  0E01               	movlw	1
 24761  0054DE  6E05               	movwf	i2___lwmod@counter,c
 24762  0054E0  D004               	goto	i2l6628
 24763  0054E2                     i2l6626:
 24764  0054E2  90D8               	bcf	status,0,c
 24765  0054E4  3603               	rlcf	i2___lwmod@divisor,f,c
 24766  0054E6  3604               	rlcf	i2___lwmod@divisor+1,f,c
 24767  0054E8  2A05               	incf	i2___lwmod@counter,f,c
 24768  0054EA                     i2l6628:
 24769  0054EA  AE04               	btfss	i2___lwmod@divisor+1,7,c
 24770  0054EC  D7FA               	goto	i2l6626
 24771  0054EE                     i2l6630:
 24772  0054EE  5003               	movf	i2___lwmod@divisor,w,c
 24773  0054F0  5C01               	subwf	i2___lwmod@dividend,w,c
 24774  0054F2  5004               	movf	i2___lwmod@divisor+1,w,c
 24775  0054F4  5802               	subwfb	i2___lwmod@dividend+1,w,c
 24776  0054F6  A0D8               	btfss	status,0,c
 24777  0054F8  D004               	goto	i2l6634
 24778  0054FA  5003               	movf	i2___lwmod@divisor,w,c
 24779  0054FC  5E01               	subwf	i2___lwmod@dividend,f,c
 24780  0054FE  5004               	movf	i2___lwmod@divisor+1,w,c
 24781  005500  5A02               	subwfb	i2___lwmod@dividend+1,f,c
 24782  005502                     i2l6634:
 24783  005502  90D8               	bcf	status,0,c
 24784  005504  3204               	rrcf	i2___lwmod@divisor+1,f,c
 24785  005506  3203               	rrcf	i2___lwmod@divisor,f,c
 24786  005508  2E05               	decfsz	i2___lwmod@counter,f,c
 24787  00550A  D7F1               	goto	i2l6630
 24788  00550C                     i2l1967:
 24789  00550C  C001  F001         	movff	i2___lwmod@dividend,?i2___lwmod
 24790  005510  C002  F002         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
 24791  005514  0012               	return		;funcret
 24792  005516                     __end_ofi2___lwmod:
 24793                           	opt stack 0
 24794                           pclatu	equ	0xFFB
 24795                           pclath	equ	0xFFA
 24796                           tblptru	equ	0xFF8
 24797                           tblptrh	equ	0xFF7
 24798                           tblptrl	equ	0xFF6
 24799                           tablat	equ	0xFF5
 24800                           prodh	equ	0xFF4
 24801                           prodl	equ	0xFF3
 24802                           intcon	equ	0xFF2
 24803                           intcon2	equ	0xFF1
 24804                           intcon3	equ	0xFF0
 24805                           indf0	equ	0xFEF
 24806                           postinc0	equ	0xFEE
 24807                           fsr0h	equ	0xFEA
 24808                           fsr0l	equ	0xFE9
 24809                           wreg	equ	0xFE8
 24810                           postdec1	equ	0xFE5
 24811                           fsr1h	equ	0xFE2
 24812                           fsr1l	equ	0xFE1
 24813                           indf2	equ	0xFDF
 24814                           postinc2	equ	0xFDE
 24815                           postdec2	equ	0xFDD
 24816                           fsr2h	equ	0xFDA
 24817                           fsr2l	equ	0xFD9
 24818                           status	equ	0xFD8
 24819                           
 24820 ;; *************** function i2___lwdiv *****************
 24821 ;; Defined at:
 24822 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 24823 ;; Parameters:    Size  Location     Type
 24824 ;;  dividend        2    5[COMRAM] unsigned int 
 24825 ;;  divisor         2    7[COMRAM] unsigned int 
 24826 ;; Auto vars:     Size  Location     Type
 24827 ;;  __lwdiv         2    9[COMRAM] unsigned int 
 24828 ;;  __lwdiv         1   11[COMRAM] unsigned char 
 24829 ;; Return value:  Size  Location     Type
 24830 ;;                  2    5[COMRAM] unsigned int 
 24831 ;; Registers used:
 24832 ;;		wreg, status,2, status,0
 24833 ;; Tracked objects:
 24834 ;;		On entry : 0/0
 24835 ;;		On exit  : 0/0
 24836 ;;		Unchanged: 0/0
 24837 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24838 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24839 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24840 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24841 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24842 ;;Total ram usage:        7 bytes
 24843 ;; Hardware stack levels used:    1
 24844 ;; This function calls:
 24845 ;;		Nothing
 24846 ;; This function is called by:
 24847 ;;		_printSortTimer
 24848 ;;		i2_printf
 24849 ;; This function uses a non-reentrant model
 24850 ;;
 24851                           
 24852                           	psect	text92
 24853  0052C6                     __ptext92:
 24854                           	opt stack 0
 24855  0052C6                     i2___lwdiv:
 24856                           	opt stack 21
 24857                           
 24858                           ;incstack = 0
 24859  0052C6  0E00               	movlw	0
 24860  0052C8  6E0B               	movwf	i2___lwdiv@quotient+1,c
 24861  0052CA  0E00               	movlw	0
 24862  0052CC  6E0A               	movwf	i2___lwdiv@quotient,c
 24863  0052CE  5008               	movf	i2___lwdiv@divisor,w,c
 24864  0052D0  1009               	iorwf	i2___lwdiv@divisor+1,w,c
 24865  0052D2  B4D8               	btfsc	status,2,c
 24866  0052D4  D01C               	goto	i2l1957
 24867  0052D6  0E01               	movlw	1
 24868  0052D8  6E0C               	movwf	i2___lwdiv@counter,c
 24869  0052DA  D004               	goto	i2l6608
 24870  0052DC                     i2l6606:
 24871  0052DC  90D8               	bcf	status,0,c
 24872  0052DE  3608               	rlcf	i2___lwdiv@divisor,f,c
 24873  0052E0  3609               	rlcf	i2___lwdiv@divisor+1,f,c
 24874  0052E2  2A0C               	incf	i2___lwdiv@counter,f,c
 24875  0052E4                     i2l6608:
 24876  0052E4  AE09               	btfss	i2___lwdiv@divisor+1,7,c
 24877  0052E6  D7FA               	goto	i2l6606
 24878  0052E8                     i2l6610:
 24879  0052E8  90D8               	bcf	status,0,c
 24880  0052EA  360A               	rlcf	i2___lwdiv@quotient,f,c
 24881  0052EC  360B               	rlcf	i2___lwdiv@quotient+1,f,c
 24882  0052EE  5008               	movf	i2___lwdiv@divisor,w,c
 24883  0052F0  5C06               	subwf	i2___lwdiv@dividend,w,c
 24884  0052F2  5009               	movf	i2___lwdiv@divisor+1,w,c
 24885  0052F4  5807               	subwfb	i2___lwdiv@dividend+1,w,c
 24886  0052F6  A0D8               	btfss	status,0,c
 24887  0052F8  D005               	goto	i2l6618
 24888  0052FA  5008               	movf	i2___lwdiv@divisor,w,c
 24889  0052FC  5E06               	subwf	i2___lwdiv@dividend,f,c
 24890  0052FE  5009               	movf	i2___lwdiv@divisor+1,w,c
 24891  005300  5A07               	subwfb	i2___lwdiv@dividend+1,f,c
 24892  005302  800A               	bsf	i2___lwdiv@quotient,0,c
 24893  005304                     i2l6618:
 24894  005304  90D8               	bcf	status,0,c
 24895  005306  3209               	rrcf	i2___lwdiv@divisor+1,f,c
 24896  005308  3208               	rrcf	i2___lwdiv@divisor,f,c
 24897  00530A  2E0C               	decfsz	i2___lwdiv@counter,f,c
 24898  00530C  D7ED               	goto	i2l6610
 24899  00530E                     i2l1957:
 24900  00530E  C00A  F006         	movff	i2___lwdiv@quotient,?i2___lwdiv
 24901  005312  C00B  F007         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
 24902  005316  0012               	return		;funcret
 24903  005318                     __end_ofi2___lwdiv:
 24904                           	opt stack 0
 24905                           pclatu	equ	0xFFB
 24906                           pclath	equ	0xFFA
 24907                           tblptru	equ	0xFF8
 24908                           tblptrh	equ	0xFF7
 24909                           tblptrl	equ	0xFF6
 24910                           tablat	equ	0xFF5
 24911                           prodh	equ	0xFF4
 24912                           prodl	equ	0xFF3
 24913                           intcon	equ	0xFF2
 24914                           intcon2	equ	0xFF1
 24915                           intcon3	equ	0xFF0
 24916                           indf0	equ	0xFEF
 24917                           postinc0	equ	0xFEE
 24918                           fsr0h	equ	0xFEA
 24919                           fsr0l	equ	0xFE9
 24920                           wreg	equ	0xFE8
 24921                           postdec1	equ	0xFE5
 24922                           fsr1h	equ	0xFE2
 24923                           fsr1l	equ	0xFE1
 24924                           indf2	equ	0xFDF
 24925                           postinc2	equ	0xFDE
 24926                           postdec2	equ	0xFDD
 24927                           fsr2h	equ	0xFDA
 24928                           fsr2l	equ	0xFD9
 24929                           status	equ	0xFD8
 24930                           
 24931 ;; *************** function i2_lcdInst *****************
 24932 ;; Defined at:
 24933 ;;		line 15 in file "lcd.c"
 24934 ;; Parameters:    Size  Location     Type
 24935 ;;  data            1    wreg     unsigned char 
 24936 ;; Auto vars:     Size  Location     Type
 24937 ;;  data            1    2[COMRAM] unsigned char 
 24938 ;; Return value:  Size  Location     Type
 24939 ;;                  1    wreg      void 
 24940 ;; Registers used:
 24941 ;;		wreg, status,2, status,0, cstack
 24942 ;; Tracked objects:
 24943 ;;		On entry : 0/0
 24944 ;;		On exit  : 0/0
 24945 ;;		Unchanged: 0/0
 24946 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24947 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24948 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24949 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24950 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24951 ;;Total ram usage:        1 bytes
 24952 ;; Hardware stack levels used:    1
 24953 ;; Hardware stack levels required when called:    1
 24954 ;; This function calls:
 24955 ;;		i2_lcdNibble
 24956 ;; This function is called by:
 24957 ;;		_change_state_to_menu_11
 24958 ;;		_change_state_to_menu_23
 24959 ;;		_change_state_to_logs_11
 24960 ;;		_change_state_to_logs_12
 24961 ;;		_change_state_to_logs_22
 24962 ;;		_change_state_to_logs_23
 24963 ;;		_change_state_to_logs_33
 24964 ;;		_change_state_to_logs_34
 24965 ;;		_printSortTimer
 24966 ;;		i2_change_state_to_menu_start
 24967 ;;		i2_change_state_to_menu_12
 24968 ;;		i2_change_state_to_menu_22
 24969 ;;		i2_printRTC
 24970 ;; This function uses a non-reentrant model
 24971 ;;
 24972                           
 24973                           	psect	text93
 24974  005B28                     __ptext93:
 24975                           	opt stack 0
 24976  005B28                     i2_lcdInst:
 24977                           	opt stack 20
 24978                           
 24979                           ;incstack = 0
 24980                           ;i2lcdInst@data stored from wreg
 24981  005B28  6E03               	movwf	i2lcdInst@data,c
 24982                           
 24983                           ;lcd.c: 16: LATDbits.LATD2 = 0;
 24984  005B2A  948C               	bcf	3980,2,c	;volatile
 24985                           
 24986                           ;lcd.c: 17: lcdNibble(data);
 24987  005B2C  5003               	movf	i2lcdInst@data,w,c
 24988  005B2E  EC36  F029         	call	i2_lcdNibble
 24989  005B32  0012               	return		;funcret
 24990  005B34                     __end_ofi2_lcdInst:
 24991                           	opt stack 0
 24992                           pclatu	equ	0xFFB
 24993                           pclath	equ	0xFFA
 24994                           tblptru	equ	0xFF8
 24995                           tblptrh	equ	0xFF7
 24996                           tblptrl	equ	0xFF6
 24997                           tablat	equ	0xFF5
 24998                           prodh	equ	0xFF4
 24999                           prodl	equ	0xFF3
 25000                           intcon	equ	0xFF2
 25001                           intcon2	equ	0xFF1
 25002                           intcon3	equ	0xFF0
 25003                           indf0	equ	0xFEF
 25004                           postinc0	equ	0xFEE
 25005                           fsr0h	equ	0xFEA
 25006                           fsr0l	equ	0xFE9
 25007                           wreg	equ	0xFE8
 25008                           postdec1	equ	0xFE5
 25009                           fsr1h	equ	0xFE2
 25010                           fsr1l	equ	0xFE1
 25011                           indf2	equ	0xFDF
 25012                           postinc2	equ	0xFDE
 25013                           postdec2	equ	0xFDD
 25014                           fsr2h	equ	0xFDA
 25015                           fsr2l	equ	0xFD9
 25016                           status	equ	0xFD8
 25017                           
 25018 ;; *************** function i2_lcdNibble *****************
 25019 ;; Defined at:
 25020 ;;		line 25 in file "lcd.c"
 25021 ;; Parameters:    Size  Location     Type
 25022 ;;  data            1    wreg     unsigned char 
 25023 ;; Auto vars:     Size  Location     Type
 25024 ;;  data            1    1[COMRAM] unsigned char 
 25025 ;;  lcdNibble       1    0[COMRAM] unsigned char 
 25026 ;; Return value:  Size  Location     Type
 25027 ;;                  1    wreg      void 
 25028 ;; Registers used:
 25029 ;;		wreg, status,2, status,0
 25030 ;; Tracked objects:
 25031 ;;		On entry : 0/0
 25032 ;;		On exit  : 0/0
 25033 ;;		Unchanged: 0/0
 25034 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25035 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25036 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25037 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25038 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25039 ;;Total ram usage:        2 bytes
 25040 ;; Hardware stack levels used:    1
 25041 ;; This function calls:
 25042 ;;		Nothing
 25043 ;; This function is called by:
 25044 ;;		i2_lcdInst
 25045 ;;		i2_putch
 25046 ;; This function uses a non-reentrant model
 25047 ;;
 25048                           
 25049                           	psect	text94
 25050  00526C                     __ptext94:
 25051                           	opt stack 0
 25052  00526C                     i2_lcdNibble:
 25053                           	opt stack 20
 25054                           
 25055                           ;incstack = 0
 25056                           ;i2lcdNibble@data stored from wreg
 25057  00526C  6E02               	movwf	i2lcdNibble@data,c
 25058                           
 25059                           ;lcd.c: 27: (INTCONbits.GIE = 0);
 25060  00526E  9EF2               	bcf	intcon,7,c	;volatile
 25061                           
 25062                           ;lcd.c: 28: char temp = data & 0xF0;
 25063  005270  5002               	movf	i2lcdNibble@data,w,c
 25064  005272  0BF0               	andlw	240
 25065  005274  6E01               	movwf	i2lcdNibble@temp,c
 25066                           
 25067                           ;lcd.c: 29: LATD = LATD & 0x0F;
 25068  005276  508C               	movf	3980,w,c	;volatile
 25069  005278  0B0F               	andlw	15
 25070  00527A  6E8C               	movwf	3980,c	;volatile
 25071                           
 25072                           ;lcd.c: 30: LATD = temp | LATD;
 25073  00527C  5001               	movf	i2lcdNibble@temp,w,c
 25074  00527E  108C               	iorwf	3980,w,c	;volatile
 25075  005280  6E8C               	movwf	3980,c	;volatile
 25076                           
 25077                           ;lcd.c: 32: LATDbits.LATD3 = 1;
 25078  005282  868C               	bsf	3980,3,c	;volatile
 25079                           
 25080                           ;lcd.c: 33: _delay((unsigned long)((25)*(32000000/4000000.0)));
 25081  005284  0E42               	movlw	66
 25082  005286                     i2u1119_47:
 25083  005286  2EE8               	decfsz	wreg,f,c
 25084  005288  D7FE               	bra	i2u1119_47
 25085  00528A  D000               	nop2	
 25086                           
 25087                           ;lcd.c: 34: LATDbits.LATD3 = 0;
 25088  00528C  968C               	bcf	3980,3,c	;volatile
 25089                           
 25090                           ;lcd.c: 35: _delay((unsigned long)((25)*(32000000/4000000.0)));
 25091  00528E  0E42               	movlw	66
 25092  005290                     i2u1120_47:
 25093  005290  2EE8               	decfsz	wreg,f,c
 25094  005292  D7FE               	bra	i2u1120_47
 25095  005294  D000               	nop2	
 25096                           
 25097                           ;lcd.c: 37: data = data << 4;
 25098  005296  3802               	swapf	i2lcdNibble@data,w,c
 25099  005298  0BF0               	andlw	240
 25100  00529A  6E02               	movwf	i2lcdNibble@data,c
 25101                           
 25102                           ;lcd.c: 39: temp = data & 0xF0;
 25103  00529C  5002               	movf	i2lcdNibble@data,w,c
 25104  00529E  0BF0               	andlw	240
 25105  0052A0  6E01               	movwf	i2lcdNibble@temp,c
 25106                           
 25107                           ;lcd.c: 40: LATD = LATD & 0x0F;
 25108  0052A2  508C               	movf	3980,w,c	;volatile
 25109  0052A4  0B0F               	andlw	15
 25110  0052A6  6E8C               	movwf	3980,c	;volatile
 25111                           
 25112                           ;lcd.c: 41: LATD = temp | LATD;
 25113  0052A8  5001               	movf	i2lcdNibble@temp,w,c
 25114  0052AA  108C               	iorwf	3980,w,c	;volatile
 25115  0052AC  6E8C               	movwf	3980,c	;volatile
 25116                           
 25117                           ;lcd.c: 43: LATDbits.LATD3 = 1;
 25118  0052AE  868C               	bsf	3980,3,c	;volatile
 25119                           
 25120                           ;lcd.c: 44: _delay((unsigned long)((25)*(32000000/4000000.0)));
 25121  0052B0  0E42               	movlw	66
 25122  0052B2                     i2u1121_47:
 25123  0052B2  2EE8               	decfsz	wreg,f,c
 25124  0052B4  D7FE               	bra	i2u1121_47
 25125  0052B6  D000               	nop2	
 25126                           
 25127                           ;lcd.c: 45: LATDbits.LATD3 = 0;
 25128  0052B8  968C               	bcf	3980,3,c	;volatile
 25129                           
 25130                           ;lcd.c: 46: _delay((unsigned long)((25)*(32000000/4000000.0)));
 25131  0052BA  0E42               	movlw	66
 25132  0052BC                     i2u1122_47:
 25133  0052BC  2EE8               	decfsz	wreg,f,c
 25134  0052BE  D7FE               	bra	i2u1122_47
 25135  0052C0  D000               	nop2	
 25136                           
 25137                           ;lcd.c: 47: (INTCONbits.GIE = 1);
 25138  0052C2  8EF2               	bsf	intcon,7,c	;volatile
 25139  0052C4  0012               	return		;funcret
 25140  0052C6                     __end_ofi2_lcdNibble:
 25141                           	opt stack 0
 25142                           pclatu	equ	0xFFB
 25143                           pclath	equ	0xFFA
 25144                           tblptru	equ	0xFF8
 25145                           tblptrh	equ	0xFF7
 25146                           tblptrl	equ	0xFF6
 25147                           tablat	equ	0xFF5
 25148                           prodh	equ	0xFF4
 25149                           prodl	equ	0xFF3
 25150                           intcon	equ	0xFF2
 25151                           intcon2	equ	0xFF1
 25152                           intcon3	equ	0xFF0
 25153                           indf0	equ	0xFEF
 25154                           postinc0	equ	0xFEE
 25155                           fsr0h	equ	0xFEA
 25156                           fsr0l	equ	0xFE9
 25157                           wreg	equ	0xFE8
 25158                           postdec1	equ	0xFE5
 25159                           fsr1h	equ	0xFE2
 25160                           fsr1l	equ	0xFE1
 25161                           indf2	equ	0xFDF
 25162                           postinc2	equ	0xFDE
 25163                           postdec2	equ	0xFDD
 25164                           fsr2h	equ	0xFDA
 25165                           fsr2l	equ	0xFD9
 25166                           status	equ	0xFD8
 25167                           
 25168 ;; *************** function i2_getRTC *****************
 25169 ;; Defined at:
 25170 ;;		line 44 in file "RTC.c"
 25171 ;; Parameters:    Size  Location     Type
 25172 ;;		None
 25173 ;; Auto vars:     Size  Location     Type
 25174 ;;  getRTC          2    3[COMRAM] int 
 25175 ;; Return value:  Size  Location     Type
 25176 ;;                  1    wreg      void 
 25177 ;; Registers used:
 25178 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 25179 ;; Tracked objects:
 25180 ;;		On entry : 0/0
 25181 ;;		On exit  : 0/0
 25182 ;;		Unchanged: 0/0
 25183 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25184 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25185 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25186 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25187 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25188 ;;Total ram usage:        2 bytes
 25189 ;; Hardware stack levels used:    1
 25190 ;; Hardware stack levels required when called:    2
 25191 ;; This function calls:
 25192 ;;		i2_I2C_Master_Read
 25193 ;;		i2_I2C_Master_Start
 25194 ;;		i2_I2C_Master_Stop
 25195 ;;		i2_I2C_Master_Write
 25196 ;; This function is called by:
 25197 ;;		_printSortTimer
 25198 ;;		i2_printRTC
 25199 ;; This function uses a non-reentrant model
 25200 ;;
 25201                           
 25202                           	psect	text95
 25203  004F40                     __ptext95:
 25204                           	opt stack 0
 25205  004F40                     i2_getRTC:
 25206                           	opt stack 19
 25207                           
 25208                           ;RTC.c: 48: I2C_Master_Start();
 25209                           
 25210                           ;incstack = 0
 25211  004F40  ECB8  F02D         	call	i2_I2C_Master_Start	;wreg free
 25212                           
 25213                           ;RTC.c: 49: I2C_Master_Write(0b11010000);
 25214  004F44  0E00               	movlw	0
 25215  004F46  6E03               	movwf	i2I2C_Master_Write@d+1,c
 25216  004F48  0ED0               	movlw	208
 25217  004F4A  6E02               	movwf	i2I2C_Master_Write@d,c
 25218  004F4C  EC9F  F02D         	call	i2_I2C_Master_Write	;wreg free
 25219                           
 25220                           ;RTC.c: 50: I2C_Master_Write(0x00);
 25221  004F50  0E00               	movlw	0
 25222  004F52  6E03               	movwf	i2I2C_Master_Write@d+1,c
 25223  004F54  0E00               	movlw	0
 25224  004F56  6E02               	movwf	i2I2C_Master_Write@d,c
 25225  004F58  EC9F  F02D         	call	i2_I2C_Master_Write	;wreg free
 25226                           
 25227                           ;RTC.c: 51: I2C_Master_Stop();
 25228  004F5C  ECB4  F02D         	call	i2_I2C_Master_Stop	;wreg free
 25229                           
 25230                           ;RTC.c: 54: I2C_Master_Start();
 25231  004F60  ECB8  F02D         	call	i2_I2C_Master_Start	;wreg free
 25232                           
 25233                           ;RTC.c: 55: I2C_Master_Write(0b11010001);
 25234  004F64  0E00               	movlw	0
 25235  004F66  6E03               	movwf	i2I2C_Master_Write@d+1,c
 25236  004F68  0ED1               	movlw	209
 25237  004F6A  6E02               	movwf	i2I2C_Master_Write@d,c
 25238  004F6C  EC9F  F02D         	call	i2_I2C_Master_Write	;wreg free
 25239                           
 25240                           ;RTC.c: 56: for(int i = 0; i < 6; i++){
 25241  004F70  0E00               	movlw	0
 25242  004F72  6E05               	movwf	i2getRTC@i+1,c
 25243  004F74  0E00               	movlw	0
 25244  004F76  6E04               	movwf	i2getRTC@i,c
 25245  004F78                     i2l6904:
 25246  004F78  BE05               	btfsc	i2getRTC@i+1,7,c
 25247  004F7A  D006               	goto	i2l6908
 25248  004F7C  5005               	movf	i2getRTC@i+1,w,c
 25249  004F7E  E111               	bnz	i2l6914
 25250  004F80  0E06               	movlw	6
 25251  004F82  5C04               	subwf	i2getRTC@i,w,c
 25252  004F84  B0D8               	btfsc	status,0,c
 25253  004F86  D00D               	goto	i2l6914
 25254  004F88                     i2l6908:
 25255                           
 25256                           ;RTC.c: 57: time[i] = I2C_Master_Read(1);
 25257  004F88  0E24               	movlw	low _time
 25258  004F8A  2404               	addwf	i2getRTC@i,w,c
 25259  004F8C  6ED9               	movwf	fsr2l,c
 25260  004F8E  0E01               	movlw	high _time
 25261  004F90  2005               	addwfc	i2getRTC@i+1,w,c
 25262  004F92  6EDA               	movwf	fsr2h,c
 25263  004F94  0E01               	movlw	1
 25264  004F96  ECE2  F02C         	call	i2_I2C_Master_Read
 25265  004F9A  6EDF               	movwf	indf2,c
 25266  004F9C  4A04               	infsnz	i2getRTC@i,f,c
 25267  004F9E  2A05               	incf	i2getRTC@i+1,f,c
 25268  004FA0  D7EB               	goto	i2l6904
 25269  004FA2                     i2l6914:
 25270                           
 25271                           ;RTC.c: 58: }
 25272                           ;RTC.c: 59: time[6] = I2C_Master_Read(0);
 25273  004FA2  0E00               	movlw	0
 25274  004FA4  ECE2  F02C         	call	i2_I2C_Master_Read
 25275  004FA8  0101               	movlb	1	; () banked
 25276  004FAA  6F2A               	movwf	(_time+6)& (0+255),b
 25277                           
 25278                           ;RTC.c: 60: I2C_Master_Stop();
 25279  004FAC  ECB4  F02D         	call	i2_I2C_Master_Stop	;wreg free
 25280  004FB0  0012               	return		;funcret
 25281  004FB2                     __end_ofi2_getRTC:
 25282                           	opt stack 0
 25283                           pclatu	equ	0xFFB
 25284                           pclath	equ	0xFFA
 25285                           tblptru	equ	0xFF8
 25286                           tblptrh	equ	0xFF7
 25287                           tblptrl	equ	0xFF6
 25288                           tablat	equ	0xFF5
 25289                           prodh	equ	0xFF4
 25290                           prodl	equ	0xFF3
 25291                           intcon	equ	0xFF2
 25292                           intcon2	equ	0xFF1
 25293                           intcon3	equ	0xFF0
 25294                           indf0	equ	0xFEF
 25295                           postinc0	equ	0xFEE
 25296                           fsr0h	equ	0xFEA
 25297                           fsr0l	equ	0xFE9
 25298                           wreg	equ	0xFE8
 25299                           postdec1	equ	0xFE5
 25300                           fsr1h	equ	0xFE2
 25301                           fsr1l	equ	0xFE1
 25302                           indf2	equ	0xFDF
 25303                           postinc2	equ	0xFDE
 25304                           postdec2	equ	0xFDD
 25305                           fsr2h	equ	0xFDA
 25306                           fsr2l	equ	0xFD9
 25307                           status	equ	0xFD8
 25308                           
 25309 ;; *************** function i2_I2C_Master_Write *****************
 25310 ;; Defined at:
 25311 ;;		line 49 in file "I2C.c"
 25312 ;; Parameters:    Size  Location     Type
 25313 ;;  d               2    1[COMRAM] unsigned int 
 25314 ;; Auto vars:     Size  Location     Type
 25315 ;;		None
 25316 ;; Return value:  Size  Location     Type
 25317 ;;                  1    wreg      void 
 25318 ;; Registers used:
 25319 ;;		wreg, status,2, status,0, cstack
 25320 ;; Tracked objects:
 25321 ;;		On entry : 0/0
 25322 ;;		On exit  : 0/0
 25323 ;;		Unchanged: 0/0
 25324 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25325 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25326 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25327 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25328 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25329 ;;Total ram usage:        2 bytes
 25330 ;; Hardware stack levels used:    1
 25331 ;; Hardware stack levels required when called:    1
 25332 ;; This function calls:
 25333 ;;		i2_I2C_Master_Wait
 25334 ;; This function is called by:
 25335 ;;		i2_getRTC
 25336 ;; This function uses a non-reentrant model
 25337 ;;
 25338                           
 25339                           	psect	text96
 25340  005B3E                     __ptext96:
 25341                           	opt stack 0
 25342  005B3E                     i2_I2C_Master_Write:
 25343                           	opt stack 19
 25344                           
 25345                           ;I2C.c: 51: I2C_Master_Wait();
 25346                           
 25347                           ;incstack = 0
 25348  005B3E  EC75  F02D         	call	i2_I2C_Master_Wait	;wreg free
 25349                           
 25350                           ;I2C.c: 52: SSPBUF = d;
 25351  005B42  C002  FFC9         	movff	i2I2C_Master_Write@d,4041	;volatile
 25352  005B46  0012               	return		;funcret
 25353  005B48                     __end_ofi2_I2C_Master_Write:
 25354                           	opt stack 0
 25355                           pclatu	equ	0xFFB
 25356                           pclath	equ	0xFFA
 25357                           tblptru	equ	0xFF8
 25358                           tblptrh	equ	0xFF7
 25359                           tblptrl	equ	0xFF6
 25360                           tablat	equ	0xFF5
 25361                           prodh	equ	0xFF4
 25362                           prodl	equ	0xFF3
 25363                           intcon	equ	0xFF2
 25364                           intcon2	equ	0xFF1
 25365                           intcon3	equ	0xFF0
 25366                           indf0	equ	0xFEF
 25367                           postinc0	equ	0xFEE
 25368                           fsr0h	equ	0xFEA
 25369                           fsr0l	equ	0xFE9
 25370                           wreg	equ	0xFE8
 25371                           postdec1	equ	0xFE5
 25372                           fsr1h	equ	0xFE2
 25373                           fsr1l	equ	0xFE1
 25374                           indf2	equ	0xFDF
 25375                           postinc2	equ	0xFDE
 25376                           postdec2	equ	0xFDD
 25377                           fsr2h	equ	0xFDA
 25378                           fsr2l	equ	0xFD9
 25379                           status	equ	0xFD8
 25380                           
 25381 ;; *************** function i2_I2C_Master_Stop *****************
 25382 ;; Defined at:
 25383 ;;		line 43 in file "I2C.c"
 25384 ;; Parameters:    Size  Location     Type
 25385 ;;		None
 25386 ;; Auto vars:     Size  Location     Type
 25387 ;;		None
 25388 ;; Return value:  Size  Location     Type
 25389 ;;                  1    wreg      void 
 25390 ;; Registers used:
 25391 ;;		wreg, status,2, status,0, cstack
 25392 ;; Tracked objects:
 25393 ;;		On entry : 0/0
 25394 ;;		On exit  : 0/0
 25395 ;;		Unchanged: 0/0
 25396 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25397 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25398 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25399 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25400 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25401 ;;Total ram usage:        0 bytes
 25402 ;; Hardware stack levels used:    1
 25403 ;; Hardware stack levels required when called:    1
 25404 ;; This function calls:
 25405 ;;		i2_I2C_Master_Wait
 25406 ;; This function is called by:
 25407 ;;		i2_getRTC
 25408 ;; This function uses a non-reentrant model
 25409 ;;
 25410                           
 25411                           	psect	text97
 25412  005B68                     __ptext97:
 25413                           	opt stack 0
 25414  005B68                     i2_I2C_Master_Stop:
 25415                           	opt stack 19
 25416                           
 25417                           ;I2C.c: 45: I2C_Master_Wait();
 25418                           
 25419                           ;incstack = 0
 25420  005B68  EC75  F02D         	call	i2_I2C_Master_Wait	;wreg free
 25421                           
 25422                           ;I2C.c: 46: PEN = 1;
 25423  005B6C  84C5               	bsf	4037,2,c	;volatile
 25424  005B6E  0012               	return		;funcret
 25425  005B70                     __end_ofi2_I2C_Master_Stop:
 25426                           	opt stack 0
 25427                           pclatu	equ	0xFFB
 25428                           pclath	equ	0xFFA
 25429                           tblptru	equ	0xFF8
 25430                           tblptrh	equ	0xFF7
 25431                           tblptrl	equ	0xFF6
 25432                           tablat	equ	0xFF5
 25433                           prodh	equ	0xFF4
 25434                           prodl	equ	0xFF3
 25435                           intcon	equ	0xFF2
 25436                           intcon2	equ	0xFF1
 25437                           intcon3	equ	0xFF0
 25438                           indf0	equ	0xFEF
 25439                           postinc0	equ	0xFEE
 25440                           fsr0h	equ	0xFEA
 25441                           fsr0l	equ	0xFE9
 25442                           wreg	equ	0xFE8
 25443                           postdec1	equ	0xFE5
 25444                           fsr1h	equ	0xFE2
 25445                           fsr1l	equ	0xFE1
 25446                           indf2	equ	0xFDF
 25447                           postinc2	equ	0xFDE
 25448                           postdec2	equ	0xFDD
 25449                           fsr2h	equ	0xFDA
 25450                           fsr2l	equ	0xFD9
 25451                           status	equ	0xFD8
 25452                           
 25453 ;; *************** function i2_I2C_Master_Start *****************
 25454 ;; Defined at:
 25455 ;;		line 31 in file "I2C.c"
 25456 ;; Parameters:    Size  Location     Type
 25457 ;;		None
 25458 ;; Auto vars:     Size  Location     Type
 25459 ;;		None
 25460 ;; Return value:  Size  Location     Type
 25461 ;;                  1    wreg      void 
 25462 ;; Registers used:
 25463 ;;		wreg, status,2, status,0, cstack
 25464 ;; Tracked objects:
 25465 ;;		On entry : 0/0
 25466 ;;		On exit  : 0/0
 25467 ;;		Unchanged: 0/0
 25468 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25469 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25470 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25471 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25472 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25473 ;;Total ram usage:        0 bytes
 25474 ;; Hardware stack levels used:    1
 25475 ;; Hardware stack levels required when called:    1
 25476 ;; This function calls:
 25477 ;;		i2_I2C_Master_Wait
 25478 ;; This function is called by:
 25479 ;;		i2_getRTC
 25480 ;; This function uses a non-reentrant model
 25481 ;;
 25482                           
 25483                           	psect	text98
 25484  005B70                     __ptext98:
 25485                           	opt stack 0
 25486  005B70                     i2_I2C_Master_Start:
 25487                           	opt stack 19
 25488                           
 25489                           ;I2C.c: 33: I2C_Master_Wait();
 25490                           
 25491                           ;incstack = 0
 25492  005B70  EC75  F02D         	call	i2_I2C_Master_Wait	;wreg free
 25493                           
 25494                           ;I2C.c: 34: SEN = 1;
 25495  005B74  80C5               	bsf	4037,0,c	;volatile
 25496  005B76  0012               	return		;funcret
 25497  005B78                     __end_ofi2_I2C_Master_Start:
 25498                           	opt stack 0
 25499                           pclatu	equ	0xFFB
 25500                           pclath	equ	0xFFA
 25501                           tblptru	equ	0xFF8
 25502                           tblptrh	equ	0xFF7
 25503                           tblptrl	equ	0xFF6
 25504                           tablat	equ	0xFF5
 25505                           prodh	equ	0xFF4
 25506                           prodl	equ	0xFF3
 25507                           intcon	equ	0xFF2
 25508                           intcon2	equ	0xFF1
 25509                           intcon3	equ	0xFF0
 25510                           indf0	equ	0xFEF
 25511                           postinc0	equ	0xFEE
 25512                           fsr0h	equ	0xFEA
 25513                           fsr0l	equ	0xFE9
 25514                           wreg	equ	0xFE8
 25515                           postdec1	equ	0xFE5
 25516                           fsr1h	equ	0xFE2
 25517                           fsr1l	equ	0xFE1
 25518                           indf2	equ	0xFDF
 25519                           postinc2	equ	0xFDE
 25520                           postdec2	equ	0xFDD
 25521                           fsr2h	equ	0xFDA
 25522                           fsr2l	equ	0xFD9
 25523                           status	equ	0xFD8
 25524                           
 25525 ;; *************** function i2_I2C_Master_Read *****************
 25526 ;; Defined at:
 25527 ;;		line 55 in file "I2C.c"
 25528 ;; Parameters:    Size  Location     Type
 25529 ;;  a               1    wreg     unsigned char 
 25530 ;; Auto vars:     Size  Location     Type
 25531 ;;  a               1    1[COMRAM] unsigned char 
 25532 ;;  I2C_Master_R    1    2[COMRAM] unsigned char 
 25533 ;; Return value:  Size  Location     Type
 25534 ;;                  1    wreg      unsigned char 
 25535 ;; Registers used:
 25536 ;;		wreg, status,2, status,0, cstack
 25537 ;; Tracked objects:
 25538 ;;		On entry : 0/0
 25539 ;;		On exit  : 0/0
 25540 ;;		Unchanged: 0/0
 25541 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25542 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25543 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25544 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25545 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25546 ;;Total ram usage:        2 bytes
 25547 ;; Hardware stack levels used:    1
 25548 ;; Hardware stack levels required when called:    1
 25549 ;; This function calls:
 25550 ;;		i2_I2C_Master_Wait
 25551 ;; This function is called by:
 25552 ;;		i2_getRTC
 25553 ;; This function uses a non-reentrant model
 25554 ;;
 25555                           
 25556                           	psect	text99
 25557  0059C4                     __ptext99:
 25558                           	opt stack 0
 25559  0059C4                     i2_I2C_Master_Read:
 25560                           	opt stack 19
 25561                           
 25562                           ;incstack = 0
 25563                           ;i2I2C_Master_Read@a stored from wreg
 25564  0059C4  6E02               	movwf	i2I2C_Master_Read@a,c
 25565                           
 25566                           ;I2C.c: 57: unsigned char temp;
 25567                           ;I2C.c: 58: I2C_Master_Wait();
 25568  0059C6  EC75  F02D         	call	i2_I2C_Master_Wait	;wreg free
 25569                           
 25570                           ;I2C.c: 59: RCEN = 1;
 25571  0059CA  86C5               	bsf	4037,3,c	;volatile
 25572                           
 25573                           ;I2C.c: 60: I2C_Master_Wait();
 25574  0059CC  EC75  F02D         	call	i2_I2C_Master_Wait	;wreg free
 25575                           
 25576                           ;I2C.c: 61: temp = SSPBUF;
 25577  0059D0  CFC9 F003          	movff	4041,i2I2C_Master_Read@temp	;volatile
 25578                           
 25579                           ;I2C.c: 62: I2C_Master_Wait();
 25580  0059D4  EC75  F02D         	call	i2_I2C_Master_Wait	;wreg free
 25581                           
 25582                           ;I2C.c: 63: ACKDT = (a)?0:1;
 25583  0059D8  5002               	movf	i2I2C_Master_Read@a,w,c
 25584  0059DA  A4D8               	btfss	status,2,c
 25585  0059DC  D002               	goto	i2u495_40
 25586  0059DE  8AC5               	bsf	4037,5,c	;volatile
 25587  0059E0  D001               	goto	i2l6572
 25588  0059E2                     i2u495_40:
 25589  0059E2  9AC5               	bcf	4037,5,c	;volatile
 25590  0059E4                     i2l6572:
 25591                           
 25592                           ;I2C.c: 64: ACKEN = 1;
 25593  0059E4  88C5               	bsf	4037,4,c	;volatile
 25594                           
 25595                           ;I2C.c: 65: return temp;
 25596  0059E6  5003               	movf	i2I2C_Master_Read@temp,w,c
 25597  0059E8  0012               	return	
 25598  0059EA                     __end_ofi2_I2C_Master_Read:
 25599                           	opt stack 0
 25600                           pclatu	equ	0xFFB
 25601                           pclath	equ	0xFFA
 25602                           tblptru	equ	0xFF8
 25603                           tblptrh	equ	0xFF7
 25604                           tblptrl	equ	0xFF6
 25605                           tablat	equ	0xFF5
 25606                           prodh	equ	0xFF4
 25607                           prodl	equ	0xFF3
 25608                           intcon	equ	0xFF2
 25609                           intcon2	equ	0xFF1
 25610                           intcon3	equ	0xFF0
 25611                           indf0	equ	0xFEF
 25612                           postinc0	equ	0xFEE
 25613                           fsr0h	equ	0xFEA
 25614                           fsr0l	equ	0xFE9
 25615                           wreg	equ	0xFE8
 25616                           postdec1	equ	0xFE5
 25617                           fsr1h	equ	0xFE2
 25618                           fsr1l	equ	0xFE1
 25619                           indf2	equ	0xFDF
 25620                           postinc2	equ	0xFDE
 25621                           postdec2	equ	0xFDD
 25622                           fsr2h	equ	0xFDA
 25623                           fsr2l	equ	0xFD9
 25624                           status	equ	0xFD8
 25625                           
 25626 ;; *************** function i2_I2C_Master_Wait *****************
 25627 ;; Defined at:
 25628 ;;		line 26 in file "I2C.c"
 25629 ;; Parameters:    Size  Location     Type
 25630 ;;		None
 25631 ;; Auto vars:     Size  Location     Type
 25632 ;;		None
 25633 ;; Return value:  Size  Location     Type
 25634 ;;                  1    wreg      void 
 25635 ;; Registers used:
 25636 ;;		wreg, status,2, status,0
 25637 ;; Tracked objects:
 25638 ;;		On entry : 0/0
 25639 ;;		On exit  : 0/0
 25640 ;;		Unchanged: 0/0
 25641 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25642 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25643 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25644 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25645 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25646 ;;Total ram usage:        1 bytes
 25647 ;; Hardware stack levels used:    1
 25648 ;; This function calls:
 25649 ;;		Nothing
 25650 ;; This function is called by:
 25651 ;;		i2_I2C_Master_Start
 25652 ;;		i2_I2C_Master_Stop
 25653 ;;		i2_I2C_Master_Write
 25654 ;;		i2_I2C_Master_Read
 25655 ;; This function uses a non-reentrant model
 25656 ;;
 25657                           
 25658                           	psect	text100
 25659  005AEA                     __ptext100:
 25660                           	opt stack 0
 25661  005AEA                     i2_I2C_Master_Wait:
 25662                           	opt stack 19
 25663  005AEA                     i2l71:
 25664  005AEA  B4C7               	btfsc	4039,2,c	;volatile
 25665  005AEC  D7FE               	goto	i2l71
 25666  005AEE  CFC5 F001          	movff	4037,??i2_I2C_Master_Wait	;volatile
 25667  005AF2  0E1F               	movlw	31
 25668  005AF4  1601               	andwf	??i2_I2C_Master_Wait,f,c
 25669  005AF6  B4D8               	btfsc	status,2,c
 25670  005AF8  0012               	return	
 25671  005AFA  D7F7               	goto	i2l71
 25672  005AFC                     __end_ofi2_I2C_Master_Wait:
 25673                           	opt stack 0
 25674                           pclatu	equ	0xFFB
 25675                           pclath	equ	0xFFA
 25676                           tblptru	equ	0xFF8
 25677                           tblptrh	equ	0xFF7
 25678                           tblptrl	equ	0xFF6
 25679                           tablat	equ	0xFF5
 25680                           prodh	equ	0xFF4
 25681                           prodl	equ	0xFF3
 25682                           intcon	equ	0xFF2
 25683                           intcon2	equ	0xFF1
 25684                           intcon3	equ	0xFF0
 25685                           indf0	equ	0xFEF
 25686                           postinc0	equ	0xFEE
 25687                           fsr0h	equ	0xFEA
 25688                           fsr0l	equ	0xFE9
 25689                           wreg	equ	0xFE8
 25690                           postdec1	equ	0xFE5
 25691                           fsr1h	equ	0xFE2
 25692                           fsr1l	equ	0xFE1
 25693                           indf2	equ	0xFDF
 25694                           postinc2	equ	0xFDE
 25695                           postdec2	equ	0xFDD
 25696                           fsr2h	equ	0xFDA
 25697                           fsr2l	equ	0xFD9
 25698                           status	equ	0xFD8
 25699                           
 25700 ;; *************** function i2_delay_ms *****************
 25701 ;; Defined at:
 25702 ;;		line 647 in file "sort.c"
 25703 ;; Parameters:    Size  Location     Type
 25704 ;;  milliseconds    1    wreg     unsigned char 
 25705 ;; Auto vars:     Size  Location     Type
 25706 ;;  milliseconds    1    1[COMRAM] unsigned char 
 25707 ;; Return value:  Size  Location     Type
 25708 ;;                  1    wreg      void 
 25709 ;; Registers used:
 25710 ;;		wreg, status,2, status,0, cstack
 25711 ;; Tracked objects:
 25712 ;;		On entry : 0/0
 25713 ;;		On exit  : 0/0
 25714 ;;		Unchanged: 0/0
 25715 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25716 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25717 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25718 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25719 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25720 ;;Total ram usage:        2 bytes
 25721 ;; Hardware stack levels used:    1
 25722 ;; This function calls:
 25723 ;;		Nothing
 25724 ;; This function is called by:
 25725 ;;		_printSortTimer
 25726 ;; This function uses a non-reentrant model
 25727 ;;
 25728                           
 25729                           	psect	text101
 25730  005A8C                     __ptext101:
 25731                           	opt stack 0
 25732  005A8C                     i2_delay_ms:
 25733                           	opt stack 22
 25734                           
 25735                           ;incstack = 0
 25736                           ;i2delay_ms@milliseconds stored from wreg
 25737  005A8C  6E02               	movwf	i2delay_ms@milliseconds,c
 25738                           
 25739                           ;sort.c: 648: while(milliseconds > 0)
 25740  005A8E  D008               	goto	i2l9154
 25741  005A90                     i2l9150:
 25742                           
 25743                           ;sort.c: 649: {
 25744                           ;sort.c: 650: milliseconds--;
 25745  005A90  0602               	decf	i2delay_ms@milliseconds,f,c
 25746                           
 25747                           ;sort.c: 651: _delay((unsigned long)((990)*(32000000/4000000.0)));
 25748  005A92  0E0B               	movlw	11
 25749  005A94  6E01               	movwf	??i2_delay_ms& (0+255),c
 25750  005A96  0E48               	movlw	72
 25751  005A98                     i2u1123_47:
 25752  005A98  2EE8               	decfsz	wreg,f,c
 25753  005A9A  D7FE               	bra	i2u1123_47
 25754  005A9C  2E01               	decfsz	??i2_delay_ms& (0+255),f,c
 25755  005A9E  D7FC               	bra	i2u1123_47
 25756  005AA0                     i2l9154:
 25757  005AA0  5002               	movf	i2delay_ms@milliseconds,w,c
 25758  005AA2  B4D8               	btfsc	status,2,c
 25759  005AA4  0012               	return	
 25760  005AA6  D7F4               	goto	i2l9150
 25761  005AA8                     __end_ofi2_delay_ms:
 25762                           	opt stack 0
 25763                           pclatu	equ	0xFFB
 25764                           pclath	equ	0xFFA
 25765                           tblptru	equ	0xFF8
 25766                           tblptrh	equ	0xFF7
 25767                           tblptrl	equ	0xFF6
 25768                           tablat	equ	0xFF5
 25769                           prodh	equ	0xFF4
 25770                           prodl	equ	0xFF3
 25771                           intcon	equ	0xFF2
 25772                           intcon2	equ	0xFF1
 25773                           intcon3	equ	0xFF0
 25774                           indf0	equ	0xFEF
 25775                           postinc0	equ	0xFEE
 25776                           fsr0h	equ	0xFEA
 25777                           fsr0l	equ	0xFE9
 25778                           wreg	equ	0xFE8
 25779                           postdec1	equ	0xFE5
 25780                           fsr1h	equ	0xFE2
 25781                           fsr1l	equ	0xFE1
 25782                           indf2	equ	0xFDF
 25783                           postinc2	equ	0xFDE
 25784                           postdec2	equ	0xFDD
 25785                           fsr2h	equ	0xFDA
 25786                           fsr2l	equ	0xFD9
 25787                           status	equ	0xFD8
 25788                           pclatu	equ	0xFFB
 25789                           pclath	equ	0xFFA
 25790                           tblptru	equ	0xFF8
 25791                           tblptrh	equ	0xFF7
 25792                           tblptrl	equ	0xFF6
 25793                           tablat	equ	0xFF5
 25794                           prodh	equ	0xFF4
 25795                           prodl	equ	0xFF3
 25796                           intcon	equ	0xFF2
 25797                           intcon2	equ	0xFF1
 25798                           intcon3	equ	0xFF0
 25799                           indf0	equ	0xFEF
 25800                           postinc0	equ	0xFEE
 25801                           fsr0h	equ	0xFEA
 25802                           fsr0l	equ	0xFE9
 25803                           wreg	equ	0xFE8
 25804                           postdec1	equ	0xFE5
 25805                           fsr1h	equ	0xFE2
 25806                           fsr1l	equ	0xFE1
 25807                           indf2	equ	0xFDF
 25808                           postinc2	equ	0xFDE
 25809                           postdec2	equ	0xFDD
 25810                           fsr2h	equ	0xFDA
 25811                           fsr2l	equ	0xFD9
 25812                           status	equ	0xFD8
 25813                           
 25814                           	psect	rparam
 25815  0000                     pclatu	equ	0xFFB
 25816                           pclath	equ	0xFFA
 25817                           tblptru	equ	0xFF8
 25818                           tblptrh	equ	0xFF7
 25819                           tblptrl	equ	0xFF6
 25820                           tablat	equ	0xFF5
 25821                           prodh	equ	0xFF4
 25822                           prodl	equ	0xFF3
 25823                           intcon	equ	0xFF2
 25824                           intcon2	equ	0xFF1
 25825                           intcon3	equ	0xFF0
 25826                           indf0	equ	0xFEF
 25827                           postinc0	equ	0xFEE
 25828                           fsr0h	equ	0xFEA
 25829                           fsr0l	equ	0xFE9
 25830                           wreg	equ	0xFE8
 25831                           postdec1	equ	0xFE5
 25832                           fsr1h	equ	0xFE2
 25833                           fsr1l	equ	0xFE1
 25834                           indf2	equ	0xFDF
 25835                           postinc2	equ	0xFDE
 25836                           postdec2	equ	0xFDD
 25837                           fsr2h	equ	0xFDA
 25838                           fsr2l	equ	0xFD9
 25839                           status	equ	0xFD8
 25840                           
 25841                           	psect	temp
 25842  00007E                     btemp:
 25843                           	opt stack 0
 25844  00007E                     	ds	1
 25845  0000                     int$flags	set	btemp
 25846                           pclatu	equ	0xFFB
 25847                           pclath	equ	0xFFA
 25848                           tblptru	equ	0xFF8
 25849                           tblptrh	equ	0xFF7
 25850                           tblptrl	equ	0xFF6
 25851                           tablat	equ	0xFF5
 25852                           prodh	equ	0xFF4
 25853                           prodl	equ	0xFF3
 25854                           intcon	equ	0xFF2
 25855                           intcon2	equ	0xFF1
 25856                           intcon3	equ	0xFF0
 25857                           indf0	equ	0xFEF
 25858                           postinc0	equ	0xFEE
 25859                           fsr0h	equ	0xFEA
 25860                           fsr0l	equ	0xFE9
 25861                           wreg	equ	0xFE8
 25862                           postdec1	equ	0xFE5
 25863                           fsr1h	equ	0xFE2
 25864                           fsr1l	equ	0xFE1
 25865                           indf2	equ	0xFDF
 25866                           postinc2	equ	0xFDE
 25867                           postdec2	equ	0xFDD
 25868                           fsr2h	equ	0xFDA
 25869                           fsr2l	equ	0xFD9
 25870                           status	equ	0xFD8


Data Sizes:
    Strings     1360
    Constant    27
    Data        8
    BSS         146
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     90     125
    BANK0           128     90     128
    BANK1           256      0      81
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    strcpy@from	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_62(CODE[4]), STR_61(CODE[4]), STR_60(CODE[4]), STR_59(CODE[4]), 
		 -> STR_58(CODE[4]), STR_57(CODE[4]), STR_56(CODE[4]), STR_55(CODE[4]), 
		 -> STR_54(CODE[4]), STR_53(CODE[4]), STR_52(CODE[4]), STR_51(CODE[4]), 
		 -> STR_20(CODE[4]), STR_19(CODE[4]), STR_18(CODE[4]), STR_17(CODE[4]), 
		 -> STR_16(CODE[4]), STR_15(CODE[4]), STR_14(CODE[4]), STR_13(CODE[4]), 
		 -> STR_12(CODE[4]), STR_11(CODE[4]), STR_10(CODE[4]), STR_9(CODE[4]), 
		 -> STR_8(CODE[4]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_131(CODE[7]), ID@res2(BANK0[2]), ID@res1(BANK0[2]), count_total(BANK0[2]), 
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 24
		 -> STR_130(CODE[18]), STR_129(CODE[18]), STR_128(CODE[17]), STR_127(CODE[17]), 
		 -> STR_126(CODE[15]), STR_125(CODE[15]), STR_124(CODE[18]), STR_123(CODE[15]), 
		 -> STR_122(CODE[18]), STR_121(CODE[18]), STR_120(CODE[17]), STR_119(CODE[17]), 
		 -> STR_118(CODE[17]), STR_117(CODE[17]), STR_116(CODE[17]), STR_115(CODE[17]), 
		 -> STR_114(CODE[17]), STR_113(CODE[17]), STR_112(CODE[18]), STR_111(CODE[17]), 
		 -> STR_110(CODE[15]), STR_109(CODE[15]), STR_108(CODE[15]), STR_107(CODE[17]), 
		 -> STR_106(CODE[17]), STR_105(CODE[17]), STR_104(CODE[16]), STR_103(CODE[17]), 
		 -> STR_102(CODE[17]), STR_101(CODE[17]), STR_100(CODE[17]), STR_99(CODE[17]), 
		 -> STR_98(CODE[17]), STR_97(CODE[15]), STR_96(CODE[11]), STR_95(CODE[17]), 
		 -> STR_94(CODE[11]), STR_93(CODE[17]), STR_92(CODE[14]), STR_91(CODE[15]), 
		 -> STR_90(CODE[14]), STR_89(CODE[10]), STR_88(CODE[9]), STR_87(CODE[9]), 
		 -> STR_86(CODE[10]), STR_85(CODE[10]), STR_84(CODE[16]), STR_83(CODE[15]), 
		 -> STR_82(CODE[3]), STR_81(CODE[15]), STR_80(CODE[13]), STR_79(CODE[14]), 
		 -> STR_78(CODE[8]), STR_77(CODE[14]), STR_76(CODE[15]), STR_75(CODE[12]), 
		 -> STR_74(CODE[14]), STR_73(CODE[17]), STR_72(CODE[14]), STR_71(CODE[15]), 
		 -> STR_70(CODE[17]), STR_69(CODE[17]), STR_68(CODE[7]), STR_67(CODE[21]), 
		 -> STR_66(CODE[13]), STR_65(CODE[11]), STR_64(CODE[19]), STR_63(CODE[24]), 
		 -> STR_50(CODE[17]), STR_49(CODE[17]), STR_48(CODE[17]), STR_47(CODE[17]), 
		 -> STR_46(CODE[17]), STR_45(CODE[17]), STR_44(CODE[17]), STR_43(CODE[17]), 
		 -> STR_42(CODE[17]), STR_41(CODE[17]), STR_40(CODE[17]), STR_39(CODE[17]), 
		 -> STR_38(CODE[17]), STR_37(CODE[17]), STR_36(CODE[17]), STR_35(CODE[17]), 
		 -> STR_34(CODE[17]), STR_33(CODE[17]), STR_32(CODE[17]), STR_31(CODE[17]), 
		 -> STR_30(CODE[17]), STR_29(CODE[3]), STR_28(CODE[17]), STR_27(CODE[17]), 
		 -> STR_26(CODE[17]), STR_25(CODE[17]), STR_24(CODE[17]), STR_23(CODE[14]), 
		 -> STR_22(CODE[10]), STR_21(CODE[24]), STR_7(CODE[7]), STR_6(CODE[17]), 
		 -> STR_5(CODE[18]), STR_4(CODE[16]), STR_3(CODE[18]), STR_2(CODE[14]), 
		 -> STR_1(CODE[18]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _handler in COMRAM

    _handler->_printSortTimer
    _updateServoStates->i2_updateServoPosition
    i2_change_state_to_menu_start->i2_printRTC
    i2_printRTC->i2_printf
    i2_change_state_to_menu_22->i2_printf
    i2_change_state_to_menu_12->i2_printf
    _change_state_to_menu_23->i2_printf
    _change_state_to_menu_11->i2_printf
    _change_state_to_logs_34->i2_printf
    _change_state_to_logs_33->i2_printf
    _change_state_to_logs_23->i2_printf
    _change_state_to_logs_22->i2_printf
    _change_state_to_logs_12->i2_printf
    _change_state_to_logs_11->i2_printf
    _dispLogs->_retrieveLog
    _retrieveLog->i2___wmul
    _printSortTimer->i2_printf
    i2_printf->i2___lwdiv
    i2_putch->i2_lcdNibble
    i2___lwdiv->i2___lwmod
    i2_lcdInst->i2_lcdNibble
    i2_getRTC->i2_I2C_Master_Read
    i2_getRTC->i2_I2C_Master_Write
    i2_I2C_Master_Write->i2_I2C_Master_Wait
    i2_I2C_Master_Stop->i2_I2C_Master_Wait
    i2_I2C_Master_Start->i2_I2C_Master_Wait
    i2_I2C_Master_Read->i2_I2C_Master_Wait

Critical Paths under _main in BANK0

    _main->_UI
    _sort->_Loading
    _Loading->_EEPROM_write
    _initSortTimer->_getRTC
    _getMAG->_readMAG
    _getIR->_readIR
    _readIR->_readADC
    _ID->_printf
    _readCOND->_readADC
    ___ftge->___awtoft
    ___awtoft->___awdiv
    _Distribution->_updateServoPosition
    _logRun->_EEPROM_write
    _EEPROM_write->_printf
    _loadRTC->_I2C_Master_Init
    _I2C_Master_Init->___lldiv
    _change_state_to_menu_start->_printRTC
    _initLCD->_lcdInst
    _UI->_printRTC
    _printRTC->_printf
    _getRTC->_I2C_Master_Read
    _getRTC->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _change_state_to_menu_22->_printf
    _change_state_to_menu_12->_printf
    ___awdiv->___awmod
    _Test->_actuatorTest
    _sensorTest->_printf
    _readMAG->_readADC
    _arm->_printf
    _algorithmTest->_printf
    _actuatorTest->_printf
    _SpeedTest->_printf
    _PortTestPusher->_printf
    _PortTestDC->_printf
    _PlatformTest->_printf
    _BothServos->_printf
    _initServos->_updateServoPosition
    _BlockerTest->_printf
    _printf->___awdiv
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _lcdInst->_lcdNibble

Critical Paths under _handler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _handler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _handler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _handler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _handler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _handler in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _handler in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _handler in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _handler in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _handler in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _handler in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _handler in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _handler in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _handler in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _handler in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _handler in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  239497
                    _I2C_Master_Init
                               _Test
                                 _UI
                         _initEEPROM
                            _initLCD
                           _initTime
                             _initUI
                             _logRun
                      _machineConfig
                               _sort
                        _stopSignals
 ---------------------------------------------------------------------------------
 (1) _sort                                                 0     0      0   36874
                       _Distribution
                                 _ID
                            _Loading
 ---------------------------------------------------------------------------------
 (2) _Loading                                             19    19      0   18170
                                             49 BANK0     19    19      0
                        _EEPROM_read
                       _EEPROM_write
                           _delay_ms
                              _getIR
                             _getMAG
                     _initGlobalVars
                         _initServos
                      _initSortTimer
                            _lcdInst
                             _readIR
 ---------------------------------------------------------------------------------
 (3) _initSortTimer                                        5     5      0     631
                                              5 BANK0      5     5      0
                             _getRTC
 ---------------------------------------------------------------------------------
 (3) _initGlobalVars                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _getMAG                                               2     2      0      45
                                              6 BANK0      2     2      0
                            _readMAG
 ---------------------------------------------------------------------------------
 (3) _getIR                                                3     3      0      91
                                              6 BANK0      3     3      0
                             _readIR
 ---------------------------------------------------------------------------------
 (3) _readIR                                               4     4      0      45
                                              2 BANK0      4     4      0
                            _readADC
 ---------------------------------------------------------------------------------
 (2) _ID                                                  18    18      0   13311
                                             43 BANK0     18    18      0
                            ___awdiv
                           ___awtoft
                             ___ftge
                           _delay_ms
                            _lcdInst
                             _printf
                           _readCOND
 ---------------------------------------------------------------------------------
 (3) _readCOND                                             4     4      0      45
                                              2 BANK0      4     4      0
                            _readADC
 ---------------------------------------------------------------------------------
 (3) _delay_ms                                             2     2      0      23
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               9     3      6     392
                                             18 BANK0      9     3      6
                            ___awdiv (ARG)
                           ___awtoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awtoft                                             4     1      3    2172
                                             14 BANK0      4     1      3
                            ___awdiv (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    1953
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (2) _Distribution                                         2     2      0    5393
                                              8 BANK0      2     2      0
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (1) _machineConfig                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _logRun                                              10    10      0   11606
                                             49 BANK0     10    10      0
                        _EEPROM_read
                       _EEPROM_write
 ---------------------------------------------------------------------------------
 (3) _EEPROM_write                                         6     3      3   10859
                                             43 BANK0      6     3      3
                        _EEPROM_read
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (4) _EEPROM_read                                          2     0      2     426
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _initUI                                               0     0      0   23608
         _change_state_to_menu_start
                            _loadRTC
 ---------------------------------------------------------------------------------
 (2) _loadRTC                                              3     3      0     914
                                             21 BANK0      3     3      0
                    _I2C_Master_Init
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Init                                      8     4      4     440
                                             13 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     290
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_start                           0     0      0   22694
                            _lcdInst
                           _printRTC
                             _printf
 ---------------------------------------------------------------------------------
 (1) _initTime                                             7     1      6     538
                                              0 BANK0      7     1      6
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                              3 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _initEEPROM                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _UI                                                  24    24      0   47352
                                             68 BANK0     22    22      0
                            ___awdiv
                            ___awmod
            _change_state_to_menu_12
            _change_state_to_menu_22
                            _lcdInst
                           _printRTC
                             _printf
                             _strcpy
 ---------------------------------------------------------------------------------
 (3) _printRTC                                            25    25      0   13531
                                             43 BANK0     25    25      0
                             _getRTC
                            _lcdInst
                             _printf
                             _strcpy
 ---------------------------------------------------------------------------------
 (4) _strcpy                                               6     2      4    3275
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) _getRTC                                               2     2      0     519
                                              3 BANK0      2     2      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Write                                     2     0      2     406
                                              1 BANK0      2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Read                                      2     2      0      45
                                              1 BANK0      2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (6) _I2C_Master_Wait                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_22                              0     0      0    9163
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_12                              0     0      0    9163
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4    1064
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4     940
                                              6 BANK0      8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (1) _Test                                                 2     2      0  118944
                                             70 BANK0      2     2      0
                        _BlockerTest
                         _BothServos
                       _PlatformTest
                         _PortTestDC
                     _PortTestPusher
                          _SpeedTest
                       _actuatorTest
                      _algorithmTest
                                _arm
                            _lcdInst
                             _printf
                         _sensorTest
 ---------------------------------------------------------------------------------
 (2) _sensorTest                                           4     4      0    9275
                                             43 BANK0      4     4      0
                            _lcdInst
                             _printf
                            _readADC
                            _readMAG
 ---------------------------------------------------------------------------------
 (4) _readMAG                                              4     4      0      45
                                              2 BANK0      4     4      0
                            _readADC
 ---------------------------------------------------------------------------------
 (2) _arm                                                  3     3      0    9232
                                             43 BANK0      3     3      0
                            _lcdInst
                             _printf
                        _stopSignals
 ---------------------------------------------------------------------------------
 (2) _algorithmTest                                        2     2      0    9163
                                             43 BANK0      2     2      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _actuatorTest                                        27    27      0   15799
                                             43 BANK0     27    27      0
                            _lcdInst
                             _printf
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (2) _SpeedTest                                            1     1      0    9163
                                             43 BANK0      1     1      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _PortTestPusher                                       1     1      0    9163
                                             43 BANK0      1     1      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _PortTestDC                                           1     1      0    9163
                                             43 BANK0      1     1      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _PlatformTest                                        12    12      0    9436
                                             43 BANK0     12    12      0
                            _lcdInst
                             _printf
                            _readADC
                        _stopSignals
 ---------------------------------------------------------------------------------
 (2) _BothServos                                           2     2      0   19949
                                             43 BANK0      2     2      0
                         _initServos
                            _lcdInst
                             _printf
                        _stopSignals
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (1) _stopSignals                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _initServos                                           1     1      0    5393
                                              8 BANK0      1     1      0
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (4) _updateServoPosition                                  8     4      4    5393
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (2) _BlockerTest                                         10    10      0    9438
                                             43 BANK0     10    10      0
                            _lcdInst
                             _printf
                            _readADC
 ---------------------------------------------------------------------------------
 (4) _readADC                                              2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _printf                                              33    21     12    9028
                                             14 BANK0     29    17     12
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (5) _isdigit                                              3     3      0      68
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     669
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              5     1      4     515
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              7     3      4     366
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) _lcdInst                                              1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     113
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _handler                                             16    16      0   83967
                                             74 COMRAM    16    16      0
                     _printSortTimer
                     _updateArmState
                         _updateMenu
                  _updateServoStates
       i2_change_state_to_menu_start
 ---------------------------------------------------------------------------------
 (8) _updateServoStates                                    2     2      0     593
                                              8 COMRAM     2     2      0
              i2_updateServoPosition
 ---------------------------------------------------------------------------------
 (9) i2_updateServoPosition                                8     4      4     593
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (8) _updateMenu                                           2     2      0   70855
                                             66 COMRAM     2     2      0
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
                           _dispLogs
                       _inputHandler
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
       i2_change_state_to_menu_start
 ---------------------------------------------------------------------------------
 (8) i2_change_state_to_menu_start                         0     0      0    7640
                          i2_lcdInst
                         i2_printRTC
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) i2_printRTC                                          25    25      0    4553
                                             41 COMRAM    25    25      0
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
                           i2_strcpy
 ---------------------------------------------------------------------------------
 (10) i2_strcpy                                            6     2      4     699
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (9) _inputHandler                                         4     2      2   30870
                                             41 COMRAM     4     2      2
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_22                            0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_12                            0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_23                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_11                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_34                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_33                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_23                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_22                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_12                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_11                             0     0      0    3087
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) _dispLogs                                             2     0      2    1475
                                             17 COMRAM     2     0      2
                        _retrieveLog
 ---------------------------------------------------------------------------------
 (10) _retrieveLog                                        11     9      2    1047
                                              6 COMRAM    11     9      2
                      i2_EEPROM_read
                           i2___wmul
 ---------------------------------------------------------------------------------
 (11) i2_EEPROM_read                                       2     0      2     174
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (8) _updateArmState                                       2     2      0       0
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (8) _printSortTimer                                      33    33      0    4879
                                             41 COMRAM    33    33      0
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                         i2_delay_ms
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) i2_printf                                            33    21     12    2952
                                             12 COMRAM    29    17     12
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch
 ---------------------------------------------------------------------------------
 (10) i2_putch                                             1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (10) i2_isdigit                                           3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (10) i2___wmul                                            6     2      4     469
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (10) i2___lwmod                                           5     1      4     367
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (10) i2___lwdiv                                           7     3      4     266
                                              5 COMRAM     7     3      4
                          i2___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (10) i2_lcdInst                                           1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (11) i2_lcdNibble                                         2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (10) i2_getRTC                                            2     2      0     213
                                              3 COMRAM     2     2      0
                  i2_I2C_Master_Read
                 i2_I2C_Master_Start
                  i2_I2C_Master_Stop
                 i2_I2C_Master_Write
 ---------------------------------------------------------------------------------
 (11) i2_I2C_Master_Write                                  2     0      2     100
                                              1 COMRAM     2     0      2
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (11) i2_I2C_Master_Stop                                   0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (11) i2_I2C_Master_Start                                  0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (11) i2_I2C_Master_Read                                   2     2      0      45
                                              1 COMRAM     2     2      0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Wait                                   1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (9) i2_delay_ms                                           2     2      0      23
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
     ___lldiv
   _Test
     _BlockerTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _readADC
     _BothServos
       _initServos
         _updateServoPosition
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _stopSignals
       _updateServoPosition
     _PlatformTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _readADC
       _stopSignals
     _PortTestDC
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _PortTestPusher
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _SpeedTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _actuatorTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _updateServoPosition
     _algorithmTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _arm
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _stopSignals
     _lcdInst
       _lcdNibble
     _printf
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
     _sensorTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _readADC
       _readMAG
         _readADC
   _UI
     ___awdiv
       ___awmod (ARG)
     ___awmod
     _change_state_to_menu_12
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _change_state_to_menu_22
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _lcdInst
       _lcdNibble
     _printRTC
       _getRTC
         _I2C_Master_Read
           _I2C_Master_Wait
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _strcpy
     _printf
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
     _strcpy
   _initEEPROM
   _initLCD
     _lcdInst
       _lcdNibble
   _initTime
   _initUI
     _change_state_to_menu_start
       _lcdInst
         _lcdNibble
       _printRTC
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
         _lcdInst
           _lcdNibble
         _printf
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _lcdNibble
         _strcpy
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _loadRTC
       _I2C_Master_Init
         ___lldiv
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
   _logRun
     _EEPROM_read
     _EEPROM_write
       _EEPROM_read
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
   _machineConfig
   _sort
     _Distribution
       _updateServoPosition
     _ID
       ___awdiv
         ___awmod (ARG)
       ___awtoft
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftpack (ARG)
       ___ftge
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
       _delay_ms
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _readCOND
         _readADC
     _Loading
       _EEPROM_read
       _EEPROM_write
         _EEPROM_read
         _lcdInst
           _lcdNibble
         _printf
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _lcdNibble
       _delay_ms
       _getIR
         _readIR
           _readADC
       _getMAG
         _readMAG
           _readADC
       _initGlobalVars
       _initServos
         _updateServoPosition
       _initSortTimer
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
       _lcdInst
         _lcdNibble
       _readIR
         _readADC
   _stopSignals

 _handler (ROOT)
   _printSortTimer
     i2___lwdiv
       i2___lwmod (ARG)
     i2___lwmod
     i2___wmul
     i2_delay_ms
     i2_getRTC
       i2_I2C_Master_Read
         i2_I2C_Master_Wait
       i2_I2C_Master_Start
         i2_I2C_Master_Wait
       i2_I2C_Master_Stop
         i2_I2C_Master_Wait
       i2_I2C_Master_Write
         i2_I2C_Master_Wait
     i2_lcdInst
       i2_lcdNibble
     i2_printf
       i2___lwdiv
         i2___lwmod (ARG)
       i2___lwmod
       i2___wmul
       i2_isdigit
       i2_putch
         i2_lcdNibble
   _updateArmState
   _updateMenu
     _change_state_to_logs_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_33
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_34
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _dispLogs
       _retrieveLog
         i2_EEPROM_read
         i2___wmul
     _inputHandler
       _change_state_to_logs_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_33
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_34
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
     i2_change_state_to_menu_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_start
       i2_lcdInst
         i2_lcdNibble
       i2_printRTC
         i2_getRTC
           i2_I2C_Master_Read
             i2_I2C_Master_Wait
           i2_I2C_Master_Start
             i2_I2C_Master_Wait
           i2_I2C_Master_Stop
             i2_I2C_Master_Wait
           i2_I2C_Master_Write
             i2_I2C_Master_Wait
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
         i2_strcpy
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
   _updateServoStates
     i2_updateServoPosition
   i2_change_state_to_menu_start
     i2_lcdInst
       i2_lcdNibble
     i2_printRTC
       i2_getRTC
         i2_I2C_Master_Read
           i2_I2C_Master_Wait
         i2_I2C_Master_Start
           i2_I2C_Master_Wait
         i2_I2C_Master_Stop
           i2_I2C_Master_Wait
         i2_I2C_Master_Write
           i2_I2C_Master_Wait
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
       i2_strcpy
     i2_printf
       i2___lwdiv
         i2___lwmod (ARG)
       i2___lwmod
       i2___wmul
       i2_isdigit
       i2_putch
         i2_lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      51       7       31.6%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     5A      80       5      100.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     5A      7D       1       99.2%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     14E      34        0.0%
DATA                 0      0     14E       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Mon Apr 10 03:49:04 2017

                                    _i 0145                     i2_I2C_Master_Start 5B70  
                   i2_I2C_Master_Write 5B3E                                     l71 5AD6  
                                   _ID 1FAA                       _f_panning_to_bin 0061  
                          __CFG_CPD$ON 000000                                     _UI 0012  
                         ___awdiv@sign 008B                                     _up 0075  
                  ___wmul@multiplicand 0082                     i2___lwdiv@dividend 0006  
                          __CFG_BORV$3 000000                     EEPROM_read@address 0080  
                         __CFG_CP0$OFF 000000                           __CFG_CP1$OFF 000000  
                         __CFG_CP2$OFF 000000                           __CFG_CP3$OFF 000000  
               __end_of_updateArmState 5550                                    ID@i 00AE  
                                  ID@n 00BB                                    ?_ID 0001  
                                  ?_UI 0001                                    UI@i 00C8  
                                  l193 0102                                    l185 00E2  
                                  l188 00E6                                    l508 4750  
                                  l627 2D7C                                    l803 1426  
                                  l813 157A                                    l830 1602  
                                  l806 1474                                    l840 1776  
                                  l832 1628                                    l824 172A  
                                  l816 150E                                    l833 1650  
                                  l834 1678                                    l818 153A  
                                  l915 4D18                                    l835 16A0  
                                  l860 229E                                    l836 16CA  
                                  l845 2066                                    l863 2336  
                                  l785 1262                                    l859 2284  
                                  l795 132A                                    l798 1378  
                         __CFG_CPB$OFF 000000                                    _PR2 000FCB  
                                  _PEN 007E2A                                    _SEN 007E28  
                  ?i2_I2C_Master_Start 0001              __end_of_updateServoStates 3CD4  
                       ?_machineConfig 0001                    ?i2_I2C_Master_Write 0002  
                                  _arm 4310                                    _log 00EE  
                                  _sel 00FD                                    _var 0147  
                         ___awmod@sign 0085                                    wreg 000FE8  
                  i2printRTC@RTC_month 003B                    __end_of_BlockerTest 3E9A  
                  _log_count_can_w_lab 0065                             i2_delay_ms 5A8C  
      __end_of_change_state_to_menu_11 5780        __end_of_change_state_to_menu_12 55C0  
      __end_of_change_state_to_menu_22 5588        __end_of_change_state_to_menu_23 5750  
         _f_can_coming_to_distribution 013B                         ??_Distribution 0088  
      __end_of_change_state_to_logs_11 5870        __end_of_change_state_to_logs_12 5840  
      __end_of_change_state_to_logs_22 5810        __end_of_change_state_to_logs_23 58CC  
      __end_of_change_state_to_logs_33 57E0        __end_of_change_state_to_logs_34 57B0  
                                 ??_ID 00AB                                   ??_UI 00C4  
                         __CFG_LVP$OFF 000000                           __CFG_WDT$OFF 000000  
                                 l1111 4430                                   l1124 5AB8  
                                 l1133 3FC8                                   l1321 0EB0  
                                 l1226 4250                                   l1252 463A  
                                 l1333 104A                                   l1261 2A2A  
                                 l1229 4270                                   l1510 19CA  
                                 l1351 5254                                   l1416 4DAE  
                                 l1433 3DD6                                   l1409 4D9E  
                                 l1249 4636                                   l1338 1120  
                                 l1258 2A26                                   l1291 09EE  
                                 l1372 29BA                                   l1284 0944  
                                 l1381 292E                                   l1357 5264  
                                 l1453 4400                                   l1438 3E22  
                                 l1470 51F8                                   l1294 0A54  
                                 l1462 43FA                                   l1454 43C2  
                                 l1439 3E3C                                   l1295 0AA2  
                                 l1287 0948                                   l1296 0B08  
                                 l1385 2986                                   l1297 0B56  
                                 l1387 29B4                                   l1476 5208  
                                 ?_arm 0001                                   l1904 4A64  
                                 l1774 41D6                                   l7100 2D86  
                                 l1957 4EC4                                   l7110 2E1C  
                                 l7102 2DA4                                   l1967 514A  
                                 l7120 2EB2                                   l7112 2E3A  
                                 l7104 2DC2                                   l7122 2ED0  
                                 l7114 2E58                                   l7106 2DE0  
                                 l7116 2E76                                   l7108 2DFE  
                                 l8100 22F4                                   l7118 2E94  
                                 l7126 2EEE                                   l8014 2090  
                                 l6520 4E74                                   l6504 5944  
                                 l7128 2F4C                                   l8120 455C  
                                 l6522 4E80                                   l7322 449C  
                                 l7330 44BE                                   l8114 450E  
                                 l8050 21E0                                   l8026 20D4  
                                 l6532 4EB6                                   l6524 4E86  
                                 l6540 5106                                   l6700 1928  
                                 l8212 2B32                                   l7420 492E  
                                 l9100 4B4C                                   l8116 4528  
                                 l8124 4576                                   l8108 2338  
                                 l8036 21A0                                   l6542 5112  
                                 l6710 198A                                   l6702 192E  
                                 l6462 590C                                   l8230 2BC4  
                                 l7430 495E                                   l7414 4918  
                                 l7094 2CFA                                   l7334 44D4  
                                 l7326 44A6                                   l8118 4542  
                                 l8126 45A4                                   l8062 2218  
                                 l8046 21D0                                   _ADIE 007CEE  
                                 l6544 5118                                   l6704 1946  
                                 l6464 591E                                   l9032 3D5E  
                                 l9040 3DA4                                   l8400 0BF4  
                                 l8312 09C2                                   l8224 2B82  
                                 l9120 4BB8                                   l9112 4B96  
                                 l9104 4B60                                   l7344 5954  
                                 l8072 2258                                   l7280 4A9A  
                                 l6730 1A1C                                   l6714 1990  
                                 l8410 0C1C                                   l8402 0BFA  
                                 l8306 09B2                                   l8250 2C40  
                                 l8242 2C10                                   l7426 494C  
                                 l7442 499C                                   l9106 4B6C  
                                 l6802 4CA4                                   l9210 016E  
                                 l9202 0144                                   l7338 44DE  
                                 l8058 2208                                   l6548 513C  
                                 l6732 1A22                                   l6708 1972  
                                 l6660 17A6                                   l8500 0DEC  
                                 l8316 09DA                                   l8308 09B8  
                                 l7428 4958                                   l9108 4B72  
                                 l9116 4BA4                                   l9300 036E  
                                 l7348 596A                                   l8076 226E  
                                 l7380 4EF2                                   l7276 4A84  
                                 l6750 1A80                                   l6726 1A02  
                                 l6662 17B8                                   l8510 0E14  
                                 l8422 0C60                                   l8406 0C04  
                                 l8262 2C88                                   l8254 2C76  
                                 l7446 49B0                                   l7438 498E  
                                 l6486 5896                                   l9310 0404  
                                 l9302 038C                                   l9230 01D6  
                                 l9206 015C                                   l7470 47F6  
                                 l7286 4B10                                   l6744 1A5E  
                                 l6680 1872                                   l6672 17F6  
                                 l6656 1792                                   l9064 3E02  
                                 l9056 3DD8                                   l6832 4D36  
                                 l8504 0E04                                   l8432 0C88  
                                 l6808 4CC4                                   l9312 0422  
                                 l9304 03AA                                   l9320 047C  
                                 l9224 01C6                                   l9240 01FC  
                                 l7392 4F1C                                   l7376 4EDC  
                                 l7800 12A6                                   l6770 1B04  
                                 l6762 1ADC                                   l6754 1AB8  
                                 l6690 18B0                                   l6666 17C2  
                                 l9066 3E0C                                   l9058 3DE8  
                                 l6826 4CFC                                   l8610 1022  
                                 l8602 1000                                   l8530 0E88  
                                 l8522 0E66                                   l8514 0E2C  
                                 l8506 0E0A                                   l8426 0C78  
                                 l8418 0C56                                   l8266 2CBE  
                                 l8194 2A7A                                   l9330 052C  
                                 l9314 0440                                   l9306 03C8  
                                 l9322 04E0                                   l9234 01EE  
                                 l9226 01CC                                   l7562 4C1A  
                                 l6850 416A                                   l6842 4118  
                                 l7458 54AC                                   l7466 47B6  
                                 l6780 1B38                                   l6756 1AC2  
                                 l6692 18B6                                   l9076 3E3E  
                                 l8612 1028                                   l8532 0E8E  
                                 l8452 0CFC                                   l8444 0CDA  
                                 l8436 0CA0                                   l8428 0C7E  
                                 l9412 0704                                   l9340 0556  
                                 l9316 045E                                   l9308 03E6  
                                 l7476 483A                                   l7396 4F34  
                                 l7900 152E                                   l7820 1314  
                                 l6774 1B1E                                   l9078 3E4E  
                                 l9086 3E94                                   l8606 100A  
                                 l8550 0EF8                                   l8526 0E70  
                                 l8470 0D5E                                   l8462 0D24  
                                 l8454 0D02                                   l6790 55CA  
                                 l9510 08C0                                   l9502 089E  
                                 l9430 0750                                   l9422 072E  
                                 l9334 0544                                   l9326 0522  
                                 l9262 0270                                   l9254 024E  
                                 l7558 4C04                                   l6870 41FC  
                                 l6854 418A                                   l6846 412C  
                                 l7830 1358                                   l6784 1B90  
                                 l6768 1AF8                                   l6688 18A4  
                                 l8640 10A4                                   l8616 1032  
                                 l8560 0F20                                   l8536 0E98  
                                 l8480 0D86                                   l8448 0CE4  
                                 l8392 0BD2                                   l8720 4384  
                                 l9096 4B3C                                   l6792 55D6  
                                 l9416 071C                                   l9408 06FA  
                                 l9344 0560                                   l9272 028C  
                                 l6880 49E8                                   l7568 4C46  
                                 l6864 41E0                                   l6856 41BA  
                                 l6848 413A                                   l7832 1362  
                                 l6778 1B32                                   l6698 191C  
                                 l6786 1B9C                                   l8650 10CC  
                                 l8554 0F02                                   l8474 0D68  
                                 l8458 0D0C                                   l9506 08A8  
                                 l9426 0738                                   l9258 0258  
                                 l9514 08CC                                   l9194 0128  
                                 l6882 49F8                                   l6858 41C8  
                                 l7842 13A6                                   l8660 110A  
                                 l8644 10BC                                   l8636 109A  
                                 l8580 0F86                                   l8564 0F2A  
                                 l8484 0D90                                   l8396 0BDC  
                                 l8724 43AA                                   l8732 43C8  
                                 l9452 07C0                                   l9372 0648  
                                 l9348 0578                                   l9292 02F6  
                                 l9276 02A4                                   l9268 0282  
                                 l9188 00FE                                   l6892 4A52  
                                 l6884 49FE                                   l8902 2970  
                                 l8822 2712                                   l8670 113A  
                                 l8654 10E4                                   l8646 10C2  
                                 l8590 0FAE                                   l8558 0F1A  
                                 l8478 0D80                                   l8734 43E2  
                                 l8726 43B4                                   l6798 4C8E  
                                 l9470 080C                                   l9462 07EA  
                                 l9390 0694                                   l9382 0672  
                                 l9294 0314                                   l9198 013A  
                                 l7950 1716                                   l7918 15DE  
                                 l7870 145E                                   l7774 1220  
                                 l8840 27C2                                   l8680 1162  
                                 l8672 1140                                   l8584 0F9E  
                                 l8576 0F7C                                   l8568 0F42  
                                 l8496 0DE2                                   l8488 0DA8  
                                 l8736 43EC                                   l9456 07D8  
                                 l9448 07B6                                   l9376 0660  
                                 l9368 063E                                   l9296 0332  
                                 l7880 14A2                                   l7784 126A  
                                 l8842 27C8                                   l8690 118A  
                                 l8682 1168                                   l8594 0FC6  
                                 l8586 0FA4                                   l9466 07F4  
                                 l9386 067C                                   l9298 0350  
                                 l7890 14E8                                   l7858 1410  
                                 l7970 1778                                   l8860 2878  
                                 l8676 114A                                   l9492 0874  
                                 l7948 16E0                                   l7956 1732  
                                 l7892 14F2                                   l7884 14C8  
                                 l7868 1454                                   l8686 1172  
                                 l9830 428E                                   l9822 4276  
                                 l9806 420C                                   l8880 28F0  
                                 l8872 28BA                                   l9840 42AC  
                                 l9832 4294                                   l9824 427C  
                                 l9496 088C                                   l9488 086A  
                                 l7896 1512                                   l7968 176A  
                                 l8786 4DD6                                   l9834 429A  
                                 l9826 4282                                   l8884 2904  
                                 l9836 42A0                                   l9828 4288  
                                 l9844 42B2                                   l7996 2022  
                                 l8878 28DA                                   l9838 42A6  
                                 l9846 4304                                   l9766 3EE6  
                                 STR_1 FB5A                                   l8888 2918  
                                 l9792 3F82                                   l9768 3EFA  
                                 STR_2 FF31                                   STR_3 FB48  
                                 l8898 295C                                   STR_4 FE45  
                                 STR_5 FB48                                   STR_6 FDE1  
                                 STR_7 FFC3                                   STR_8 FFDA  
                                 STR_9 FFCA                ??i2_updateServoPosition 0005  
                                 _LATA 000F89                                   _LATB 000F8A  
                                 _LATC 000F8B                                   _LATD 000F8C  
                                 _LATE 000F8D                                   u5130 18F0  
                                 u5050 53A8                                   u5060 53AA  
                                 u5070 5440                                   u5071 543C  
                                 u5080 5442                                   u5137 18E6  
                                 u5170 1968                                   u7010 2C64  
                                 _PEIE 007F96                                   u7110 09EE  
                                 u6310 122C                                   u7040 2CAC  
                                 u5177 195E                                   u7130 0AA2  
                                 u7018 2C68                                   u6330 1262  
                                 u8100 3DCE                                   _RCEN 007E2B  
                                 u7150 0B56                                   u7048 2CB0  
                                 u6600 1574                                   u6328 1230  
                                 u4850 5894                                   u5820 53F4  
                                 u8141 3DF8                                   u8150 3DFA  
                                 u5830 53F6                                   i2l71 5AEA  
                                 u6640 1600                                   u9210 3FC8  
                                 u6570 154C                                   u8091 3DCC  
                                 u5860 2D7C                                   u6740 2120  
                                 u5845 5184                                   u7630 43A0  
                                 u6910 2336                                   u6750 2122  
                                 u6590 1572                                   u7640 43A2  
                                 u6760 2174                                   u6770 2176  
                                 u7900 28A2                                   u7820 2754  
                                 u6908 2304                                   u6588 1550  
                                 u7830 2756                                   u7680 43D8  
                                 u7850 280A                                   u7690 43DA  
                                 u6970 2ABC                                   u6890 2300  
                                 u7860 280C                                   u6980 2ABE  
                                 u7950 28E8                                   u7918 28A6  
                                 u9607 12D4                                   u7960 2900  
                                 u7961 28FC                                   u9617 1334  
                                 u9707 1490                                   u9627 1346  
                                 u9717 14B0                                   u9637 1382  
                                 u9807 1682                                   u9727 1594  
                                 u9647 1394                                   u9817 1696  
                                 u9737 15CC                                   u9657 13B4  
                                 u9907 2228                                   u9827 16AA  
                                 u9747 160C                                   u9667 13DE  
                                 u9917 2288                                   u9837 16BE  
                                 u9757 161E                                   u9677 1430  
                                 u9597 11B0                                   u9927 2292  
                                 u9847 16D4                                   u9767 1632  
                                 u9687 1442                                   u9937 22B8  
                                 u9857 174C                                   u9777 1646  
                                 u9697 147E                                   u9947 5960  
                                 u9867 564A                                   u9787 165A  
                                 u9957 4452                                   u9877 4EFA  
                                 u9797 166E                                   u9967 44AE  
                                 u9887 1FC4                                   u9977 44E6  
                                 u9897 2076                                   u9987 5452  
                                 _RSEN 007E29                                   u9997 5486  
                          _stopSignals 5A70                                   _Test 420A  
                                 _back 005B                                   _main 46AE  
                                 _down 005D                           ___ftpack@arg 0080  
                                 _keys FA93                           ___ftpack@exp 0083  
                                 _time 0124                                   fsr0h 000FEA  
                                 fsr1h 000FE2                     i2___lwdiv@quotient 000A  
                                 indf0 000FEF                                   fsr2h 000FDA  
                                 fsr0l 000FE9                                   indf2 000FDF  
                                 fsr1l 000FE1                                   fsr2l 000FD9  
                                 _sort 5A0E                                   btemp 007E  
                 ??i2_I2C_Master_Start 0002                   ??i2_I2C_Master_Write 0004  
                                 prodh 000FF4                                   prodl 000FF3  
                                 start 000E                          __CFG_IESO$OFF 000000  
                 _log_count_can_no_lab 0063                        __end_ofi2_putch 5B28  
                        __CFG_MCLRE$ON 000000                           ___param_bank 000000  
                           i2_printRTC 34F8                            i2_lcdNibble 526C  
                      __end_of_Loading 1784                   __end_of_actuatorTest 1192  
                                ??_arm 00AB             i2updateServoPosition@timer 0003  
                     ?_I2C_Master_Init 008D                       ?_I2C_Master_Read 0001  
                     ?_I2C_Master_Wait 0001            ??i2_change_state_to_menu_12 002A  
          ??i2_change_state_to_menu_22 002A                       ?_I2C_Master_Stop 0001  
                                ?_Test 0001                                  l10040 470E  
                                l10050 472E                                  l10060 474C  
                                l10046 4722                                  l10038 46F8  
                                l10048 4728                                  l10064 4752  
                                l10058 4746                   __end_of_EEPROM_write 44F6  
                                ?_main 0001                                  _ACKEN 007E2C  
                                _ACKDT 007E2D                        __end_of___awdiv 49BA  
                      ?_updateArmState 0001                                  _EEADR 000FA9  
                                STR_10 FFE6                                  STR_11 FFEA  
                                STR_12 FFFA                                  STR_20 FFEE  
                                STR_13 FFDE                                  STR_21 FAAE  
                                STR_14 FFD6                                  STR_22 FF9A  
                                STR_30 FDF2                                  STR_15 FFD2  
                                STR_23 FF23                                  STR_31 FDD0  
                                STR_16 FFE2                                  STR_24 FD37  
                                STR_32 FD15                                  STR_40 FCD1  
                                STR_17 FFF2                                  STR_25 FE14  
                                STR_33 FD26                                  STR_41 FCC0  
                                STR_18 FFF6                                  STR_34 FDBF  
                                STR_50 FD9D                                  STR_42 FD7B  
                                STR_26 FD48                                  STR_43 FD7B  
                                STR_35 FDBF                                  STR_51 FFDA  
                                STR_19 FFCE                                  STR_27 FE03  
                                STR_52 FFCA                                  STR_60 FFF2  
                                STR_28 FD59                                  STR_36 FD04  
                                STR_44 FCE2                        __end_of___awmod 4BC2  
                                STR_45 FCD1                                  STR_37 FD15  
                                STR_53 FFE6                                  STR_61 FFF6  
                                STR_29 FE11                                  STR_62 FFCE  
                                STR_54 FFEA                                  STR_38 FDAE  
                                STR_46 FD8C                                  STR_70 FC8D  
                                STR_47 FD8C                                  STR_55 FFFA  
                                STR_63 FAAE                                  STR_71 FEDC  
                                STR_39 FD6A                                  STR_56 FFDE  
                                STR_80 FF3F                                  STR_72 FF15  
                                STR_48 FCF3                                  STR_64 FADB  
                                STR_49 FCE2                                  STR_57 FFD6  
                                STR_65 FF7B                                  STR_81 FE64  
                                STR_73 FC49                                  STR_58 FFD2  
                                STR_90 FF15                                  STR_82 FE11  
                                STR_66 FF4C                                  STR_74 FEF9  
                                STR_59 FFE2                                  STR_75 FF59  
                                STR_91 FECD                                  STR_83 FE91  
                                STR_67 FAC6                                  STR_68 FFBC  
                                STR_92 FEEB                                  STR_76 FEBE  
                                STR_84 FE25                                  STR_85 FF86  
                                STR_77 FF07                                  STR_69 FC7C  
                                STR_93 FC5A                                  STR_86 FF86  
                                STR_78 FFAD                                  STR_94 FF65  
                                STR_79 FF15                                  STR_87 FFA4  
                                STR_95 FC6B                                  STR_88 FFA4  
                                STR_96 FF70                                  STR_89 FF90  
                                STR_97 FEAF                                  STR_98 FBC1  
                                STR_99 FBB0           i2updateServoPosition@my_time 0007  
                                ?_sort 0001                        __end_of___lldiv 4A76  
         i2updateServoPosition@time_us 0001                                  u10007 002A  
                                u10017 0114                                  u10107 0568  
                                u10027 014C                                  u10117 0592  
                                u10037 0188                                  u11007 1E2C  
                                u10207 0826                                  u10127 0650  
                                u10047 01DE                                  u11017 1E78  
                                u10217 087C                                  u10137 0684  
                                u10057 020A                                  u11107 3E26  
                                u11027 1EAC                                  u10307 2B46  
                                u10227 08B0                                  u10147 06AE  
                                u10067 0260                                  u11117 3E30  
                                u11037 1EDE                                  u10317 2B74  
                                u10237 421A                                  u10157 070C  
                                u10077 0294                                  u11127 5914  
                                u11047 1F2A                                  u10407 08F4  
                                u10327 2BB8                                  u10247 29D6  
                                u10167 0740                                  u10087 02BE  
                                _T0CON 000FD5                                  u11137 5044  
                                u11057 1F5E                                  u10417 0938  
                                u10337 2BD6                                  u10257 2A1A  
                                u10177 076A                                  u10097 0534  
                                u11147 504E                                  u11067 1F90  
                                u10507 0B66                                  u10427 095A  
                                u10347 2C04                                  u10267 2A3C  
                                u10187 07C8                        ___awdiv@divisor 0088  
                                u11157 507A                                  u11077 4E20  
                                u10517 0BE4                                  u10437 09CA  
                                u10357 2C1E                                  u10277 2A6A  
                                u10197 07FC                                  u11167 5084  
                                u11087 4E3C                                  u10607 0E1C  
                                u10527 0C0C                                  u10447 09FE  
                                u10367 431E                                  u10287 2AD2  
                                _T1CON 000FCD                                  u11097 3D0A  
                                u10617 0E78                                  u10537 0C68  
                                u10457 0A64                                  u10377 45E6  
                                u10297 2B26                                  u10707 10AC  
                                u10627 0EA0                                  u10547 0C90  
                                u10467 0A82                                  u10387 462A  
                                u10717 10D4                                  u10637 0F0A  
                                u10557 0CEC                                  u10477 0AB2  
                                u10397 464C                                  u10807 521E  
                                u10727 1124                                  u10647 0F32  
                                u10567 0D14                                  u10487 0B18  
                                _T2CON 000FCA                                  u10817 26F0  
                                u10737 112E                                  u10657 0F8E  
                                u10577 0D70                                  u10497 0B36  
                                u10907 1BCA                                  u10827 276A  
                                u10747 1152                                  u10667 0FB6  
                                u10587 0D98                                  u10917 1C16  
                                u10837 27B6                                  u10757 117A  
                                u10677 1012                                  u10597 0DF4  
                                u10927 1C62                                  u10847 2820  
                                u10767 4D68                                  u10687 103A  
                                _T3CON 000FB1                                  u10937 1C96  
                                u10857 286C                                  u10777 4DB8  
                                u10697 105C                                  u10947 1CC8  
                                u10867 2938                                  u10787 4DCC  
                                u10957 1D14                                  u10877 294A  
                                u10797 51C2                                  u10967 1D48  
                                u10887 2990                                  u10977 1D7A  
                                u10897 29A2                                  u10987 1DC6  
                                u10997 1DFA                        __end_of___lwdiv 4ECE  
                      __end_of___lwmod 5154                                  i2l268 324C  
                                i2l627 3586                                  i2l915 4FE8  
                                i2l942 554C                        ___awdiv@counter 008A  
                                i2l894 341E                                  _TMR0H 000FD7  
                                _TMR1H 000FCF                                  _TMR0L 000FD6  
                                _TMR3H 000FB3                                  _TMR1L 000FCE  
                                _TMR3L 000FB2                             _BothServos 1BBC  
                                _PORTB 000F81                                  _TRISA 000F92  
                                _TRISB 000F93                                  _TRISC 000F94  
                                _TRISD 000F95                                  _TRISE 000F96  
                        __CFG_PWRT$OFF 000000                          __CFG_WRT0$OFF 000000  
                        __CFG_WRT1$OFF 000000                          __CFG_WRT2$OFF 000000  
                        __CFG_WRT3$OFF 000000                        __end_of_lcdInst 5B1C  
                      __end_of_handler 3920                         __CFG_EBTR0$OFF 000000  
                       __CFG_FCMEN$OFF 000000                         __CFG_EBTR1$OFF 000000  
                       __CFG_EBTR2$OFF 000000                         __CFG_EBTR3$OFF 000000  
                                _nRBPU 007F8F                          __CFG_WRTB$OFF 000000  
                        __CFG_WRTC$OFF 000000                          __CFG_WRTD$OFF 000000  
                      __end_of_readADC 5924                        __end_of_initLCD 5490  
                       __CFG_EBTRB$OFF 000000                                  _debug 0135  
                           i2isdigit@c 0003                          ___awtoft@sign 0091  
                                _getIR 4ECE                        __end_of_loadRTC 4C4E  
                      __end_of_readMAG 544A                        __end_of_dpowers FAAE  
                                _first 0141                                  _enter 005F  
                                arm@on 00AC                        __end_of_isdigit 594E  
                                _input 007D                          ___ftpack@sign 0084  
                                _putch 5AFC                                  pclath 000FFA  
                                tablat 000FF5                       __end_ofi2___wmul 59C4  
                     __end_ofi2_getRTC 4FB2                    _log_count_pop_w_tab 00F4  
                                status 000FD8                            readCOND@res 0084  
                       __CFG_PBADEN$ON 000000                          i2printf@width 0028  
                     __end_ofi2_printf 26B2                     __size_ofi2___lwdiv 0052  
                   __size_ofi2___lwmod 0042                       __end_ofi2_strcpy 5690  
                          Loading@addr 00B3                       _count_can_no_lab 012B  
                 printSortTimer@i_1156 0047                   __size_of_EEPROM_read 0018  
                      __initialization 5318                           __end_of_Test 4310  
                   __size_ofi2_lcdInst 000C                           __end_of_main 4776  
                         __end_of_keys FAA4                           __end_of_sort 5A30  
                           i2printf@ap 0020                             i2printf@cp 001E  
                   __size_ofi2_isdigit 001E                            _BlockerTest 3CD4  
                               ??_Test 00C6    __size_of_change_state_to_menu_start 002C  
                      ??_machineConfig 0080                                 ??_main 00DA  
                               ??_sort 00C4                          __activetblptr 000003  
                               ID@res1 00B7                                 ID@res2 00B9  
           __size_of_updateServoStates 01C8                                 ID@time 00B4  
           updateServoPosition@my_time 0086             updateServoPosition@time_us 0080  
                           i2strcpy@cp 0005                             i2strcpy@to 0001  
                    ?_I2C_Master_Start 0001                    EEPROM_write@address 00AB  
               __size_ofi2_EEPROM_read 0016                      ?_I2C_Master_Write 0081  
                          ?i2_delay_ms 0001                                 ?_getIR 0001  
                   ??_I2C_Master_Start 0081                                 _ADCON0 000FC2  
                               _ADCON1 000FC1                     ??_I2C_Master_Write 0083  
                               _ADCON2 000FC0                                 STR_100 FB8E  
                               STR_101 FC16                                 STR_110 FE73  
                               STR_102 FC27                                 STR_111 FCAF  
                               STR_103 FB6C                                 STR_104 FE35  
                               STR_120 FC38                                 STR_112 FAEE  
                               STR_113 FBD2                                 STR_105 FB9F  
                               STR_121 FB12                                 STR_114 FC05  
                               STR_106 FB7D                                 STR_130 FB36  
                               STR_122 FB00                                 _ADRESH 000FC4  
                               STR_107 FB9F                                 STR_115 FC05  
                               STR_131 FFB5                                 STR_123 FE55  
                               STR_108 FEA0                                 STR_116 FBF4  
                               STR_124 FB24                                 _EEADRH 000FAA  
                               STR_117 FC05                                 STR_125 FE55  
                               STR_109 FE82                                 STR_118 FBF4  
                               STR_126 FE55                                 _ADRESL 000FC3  
                               STR_127 FBE3                                 STR_119 FBE3  
                               STR_128 FC9E                                 STR_129 FAEE  
                               _EEDATA 000FA8                                 _EECON2 000FA7  
                     ___awdiv@dividend 0086                        i2lcdNibble@data 0002  
                     __end_of___awtoft 54D4                                 ?_putch 0001  
                     __end_of___ftpack 420A                 __size_of_initSortTimer 00AA  
                      i2lcdNibble@temp 0001              i2_change_state_to_menu_12 56F0  
            i2_change_state_to_menu_22 56C0                                 _INT1IE 007F83  
                               _INT1IF 007F80                                 _CVRCON 000FB5  
                               i2l1034 381C                                 i2l1043 38C4  
                               i2l1124 5ACE                                 i2l1045 38E4  
                               i2l1510 251E                                 i2l7002 254C  
                               i2l7020 259A                                 i2l1957 530E  
                               i2l7030 25D8                                 i2l7006 2564  
                               i2l1967 550C                                 i2l7032 25E0  
                               i2l7008 2568                                 i2l7050 2628  
                               i2l7026 25B4                                 i2l7060 268E  
                               i2l7044 260C                                 i2l7046 2614  
                               i2l7054 263A                                 i2l7038 25F6  
                               i2l7062 2696                                 i2l7056 2640  
                               i2l6610 52E8                                 i2l7066 5668  
                               i2l7244 40A2                                 i2l7068 5670  
                               i2l6606 52DC                                 i2l6630 54EE  
                               i2l7510 3524                                 i2l6608 52E4  
                               i2l7256 40E6                                 i2l7248 40B2  
                               i2l7520 35BC                                 i2l6618 5304  
                               i2l6634 5502                                 i2l6626 54E2  
                               i2l7530 362A                                 i2l7522 35D2  
                               i2l6572 59E4                                 i2l6628 54EA  
                               i2l7620 395E                                 i2l7612 3944  
                               i2l7532 3640                                 i2l7524 35E8  
                               i2l7516 3590                                 i2l9150 5A90  
                               i2l7702 3A7E                                 i2l7622 396E  
                               i2l7630 397C                                 i2l7534 3656  
                               i2l7526 35FE                                 i2l7518 35A6  
                               i2l7542 3698                                 i2l9142 5002  
                               i2l6904 4F78                                 i2l7720 3AC2  
                               i2l7712 3A9E                                 i2l7640 39A2  
                               i2l7624 3972                                 i2l7536 366C  
                               i2l7528 3614                                 i2l7544 36F2  
                               i2l9136 4FD0                                 i2l9154 5AA0  
                               i2l6914 4FA2                                 i2l7642 39A8  
                               i2l7634 3990                                 i2l7730 3ADE  
                               i2l7538 3682                                 i2l6908 4F88  
                               i2l6596 5A68                                 i2l6932 234E  
                               i2l7724 3AD4                                 i2l7716 3AB0  
                               i2l7708 3A8C                                 i2l7660 39F8  
                               i2l7644 39AE                                 i2l7636 3996  
                               i2l6942 2372                                 i2l7638 399C  
                               i2l6936 235E                                 i2l7648 39B4  
                               i2l6938 236C                                 i2l7690 3A5C  
                               i2l7674 3A1E                                 i2l9610 30E2  
                               i2l9602 30BE                                 i2l9530 2FC6  
                               i2l6980 24A8                                 i2l6964 242E  
                               i2l6956 2406                                 i2l6948 23A4  
                               i2l7684 3A44                                 i2l7668 3A10  
                               i2l6974 2486                                 i2l6966 2438  
                               i2l6990 24E8                                 i2l7694 3A66  
                               i2l7678 3A3A                                 i2l9630 3130  
                               i2l9622 3114                                 i2l9614 30F0  
                               i2l9606 30D4                                 i2l9542 2FF0  
                               i2l9534 2FD4                                 i2l6984 24D2  
                               i2l6976 2490                                 i2l6968 243C  
                               i2l7688 3A58                                 i2l9528 2FC0  
                               i2l6986 24E4                                 i2l6978 2496  
                               i2l9650 317E                                 i2l9642 3162  
                               i2l9634 313E                                 i2l9626 3122  
                               i2l9618 30FE                                 i2l9570 3046  
                               i2l9562 3028                                 i2l9554 300C  
                               i2l9546 2FFE                                 i2l9538 2FE2  
                               i2l9902 3454                                 i2l9670 31D4  
                               i2l9662 31B0                                 i2l9654 3194  
                               i2l9646 3170                                 i2l9638 3154  
                               i2l9590 3094                                 i2l9582 3070  
                               i2l9574 3054                                 i2l9566 3038  
                               i2l9558 301A                                 i2l9904 345A  
                               i2l9666 31BE                                 i2l9658 31A2  
                               i2l9594 30A2                                 i2l9586 307E  
                               i2l9578 3062                                 i2l9930 3B4A  
                               i2l9860 326C                                 i2l9676 31E2  
                               i2l9924 3B2A                                 i2l9598 30B0  
                               i2l9942 3B76                                 i2l9950 3B94  
                               i2l9856 325C                                 i2l9944 3B8A  
                               i2l9936 3B60                                 i2l9952 3BDE  
                               i2l9928 3B40                                 i2l9890 33EC  
                               i2l9866 32C6                                 i2l9970 3C4C  
                               i2l9954 3BE8                                 i2l9964 3C26  
                               i2l9878 3394                                 i2l9958 3C00  
                               i2l9984 3CA2                                 i2l9898 3420  
              _f_most_recent_sort_time 013F                          PlatformTest@i 00B1  
                               _OSCCON 000FD3                                 _TMR0IE 007F95  
                               _TMR0IF 007F92                              ??i2_putch 0003  
                               _TMR1IE 007CE8                                 _TMR1IF 007CF0  
                               _TMR2IE 007CE9                                 _TMR2IF 007CF1  
                               _TMR3IE 007D01                                 _TMR3IF 007D09  
                               _TMR0ON 007EAF                                 _TMR1ON 007E68  
                               _TMR2ON 007E52                                 _TMR3ON 007D88  
                               _SSPADD 000FC8                                 _TRISC3 007CA3  
                               _TRISC4 007CA4                                 _SSPBUF 000FC9  
                            ??_Loading 00B1                       __end_of_delay_ms 5976  
                 delay_ms@milliseconds 0081                         __CFG_XINST$OFF 000000  
                     __end_of_dispLogs 5A0E                                 ___ftge 4776  
                          ?i2_printRTC 0001                       retrieveLog@byte1 000B  
                     retrieveLog@byte2 000C                       retrieveLog@byte3 000D  
                 __end_of_Distribution 45D8                                 ___wmul 55F6  
                            ??___awdiv 008A                         __CFG_STVREN$ON 000000  
                               _getMAG 562C                              ??___awmod 0084  
                          logRun@byte1 00B2                            logRun@byte2 00B3  
                          logRun@byte3 00B4                       __end_of_readCOND 53FE  
                               _getRTC 4C4E                              ??___lldiv 0088  
                            ??___lwdiv 0084                              ??___lwmod 008B  
                     ??_printSortTimer 002A                       __end_of_initTime 5A52  
                               _initUI 5690                                 _readIR 5366  
                               _logRun 3E9A                                 getIR@i 0087  
                               clear_0 533E                                 clear_1 534A  
                               clear_2 5356                       ___awdiv@quotient 008C  
                      ___awmod@divisor 0082                             _PortTestDC 5210  
                      ___awmod@counter 0084                              ??_lcdInst 0082  
                               _printf 1784                              ??_handler 004B  
              __size_of_initGlobalVars 00BE                           ?_retrieveLog 0007  
                               _strcpy 55C0                     __size_of_SpeedTest 0084  
                            ??_readADC 0080                              ??_initLCD 0083  
                            ??_loadRTC 0095                              ??_readMAG 0082  
 __end_ofi2_change_state_to_menu_start 599E  __size_ofi2_change_state_to_menu_start 0028  
         i2_change_state_to_menu_start 5976                            ?_BothServos 0001  
                            ??_isdigit 0080                      __end_ofi2___lwdiv 5318  
                     __end_of_printRTC 2F90                           __mediumconst FA92  
                    __end_ofi2___lwmod 5516                                 tblptrh 000FF7  
                               tblptrl 000FF6                                 tblptru 000FF8  
                 _log_count_pop_no_tab 00F2                  __end_of_algorithmTest 46AE  
                    __end_ofi2_lcdInst 5B34                      __end_ofi2_isdigit 5A70  
                           __accesstop 0080                __end_of__initialization 535C  
                        ?_inputHandler 002A                             ___ftge@ff1 0092  
                           ___ftge@ff2 0095                  _most_recent_sort_time 0069  
                        ___rparam_used 000001                          ?_PlatformTest 0001  
              printSortTimer@start_sec 003B                  __size_of_actuatorTest 08B8  
                           ___awtoft@c 008E                          i2_EEPROM_read 5AC0  
                         Loading@byte1 00B5                     i2___lwmod@dividend 0001  
                       __pcstackCOMRAM 0001                  __size_of_EEPROM_write 00E8  
                  __size_ofi2_delay_ms 001C                           __pidataBANK1 5B48  
                  BlockerTest@cam_flag 00B1                          __end_of_getIR 4F40  
                          i2printRTC@i 0041                          _initSortTimer 4A76  
          __end_of_updateServoPosition 4D5A                          __end_of_putch 5B0C  
                          i2printf@len 0022                            i2printf@val 0024  
                           __end_of_ID 2344                             __end_of_UI 08DA  
                            ?i2___wmul 0001                     __size_of_lcdNibble 006C  
                            ?i2_getRTC 0001                            i2putch@data 0003  
                printSortTimer@curTime 002D     __end_of_change_state_to_menu_start 58F8  
        ?i2_change_state_to_menu_start 0001             _change_state_to_menu_start 58CC  
                printSortTimer@cur_sec 003D                              ?i2_printf 000D  
                              ??_getIR 0086                              ?i2_strcpy 0001  
                     _count_pop_no_tab 012F                    __size_ofi2_printRTC 0236  
                              ??_putch 0082                           _actuatorTest 08DA  
              __size_of_PortTestPusher 005C                             __pbssBANK0 00DA  
                           __pbssBANK1 0100                           ?_stopSignals 0001  
                       ??_inputHandler 002C         __size_ofi2_updateServoPosition 0070  
        __end_ofi2_updateServoPosition 5022                           _EEPROM_write 440E  
                       ??_PlatformTest 00AB               ?_change_state_to_menu_11 0001  
             ?_change_state_to_menu_12 0001               ?_change_state_to_menu_22 0001  
             ?_change_state_to_menu_23 0001                                UI@F3246 0149  
                    __end_of_SpeedTest 4DDE                         ?i2_EEPROM_read 0001  
             ?_change_state_to_logs_11 0001               ?_change_state_to_logs_12 0001  
             ?_change_state_to_logs_22 0001               ?_change_state_to_logs_23 0001  
             ?_change_state_to_logs_33 0001               ?_change_state_to_logs_34 0001  
                  __size_of_BothServos 03EE                      printRTC@RTC_month 00BC  
                              ?___ftge 0092                                _ID$1141 00AD  
                         ?i2_lcdNibble 0001                                UI@i_412 00C9  
                              UI@i_415 00CA                                UI@i_416 00CB  
                              UI@i_450 00D4                                UI@i_442 00D0  
                              UI@i_434 00CC                                UI@i_451 00D5  
                              UI@i_443 00D1                                UI@i_435 00CD  
                              UI@i_446 00D2                                UI@i_438 00CE  
                              UI@i_447 00D3                                UI@i_439 00CF  
                     ??_updateArmState 0001                         ?_initSortTimer 0001  
                              ?___wmul 0080                                ?_getMAG 0001  
                              ?_getRTC 0001                                ?_initUI 0001  
                              ?_readIR 0001                                ?_logRun 0001  
             updateServoPosition@timer 0082                                UI@month 00D6  
                            ?___awtoft 008E                              ?___ftpack 0080  
                          ?_PortTestDC 0001                                ?_printf 008E  
                              _UI$2425 00C6                                ?_strcpy 0080  
                      _pan_servo_state 006B                             ??i2___wmul 0005  
                           ??i2_getRTC 0004                                i2l10020 552C  
                              i2l10014 5520                                i2l10016 5526  
                              i2l10106 37F0                                i2l10150 3878  
                              i2l10134 3848                                i2l10160 3898  
                              i2l10128 383A                                i2l10082 37AA  
                              i2l10156 3892                                i2l10076 379A  
                              i2l10092 37D4                                i2l10182 38E2  
                              i2l10078 379E                                i2l10086 37B2  
                              i2l10088 37CA                                i2l10630 3BB8  
                              i2l10640 3CCA                                i2l10632 3BC2  
                              i2l10634 3BCC                                i2l10652 39CC  
                              i2l10644 3200                                i2l10636 3BD6  
                              i2l10654 39E8                                i2l10646 3222  
                              i2l10638 3CBA                                i2l10648 323E  
                            ?_delay_ms 0001                         PlatformTest@on 00B5  
                           ??i2_printf 0019                             ??i2_strcpy 0005  
                            ?_dispLogs 0012                                _SSPCON1 000FC6  
                              _SSPCON2 000FC5                                _SSPSTAT 000FC7  
                              _RTCflag 00E4                              ?_readCOND 0001  
                           _initEEPROM 5B50                                i2_putch 5B1C  
                            ?_initTime 0080                        _f_loadingNewCan 00EC  
                      i2printRTC@month 003D                  __size_of_Distribution 00E2  
          __size_ofi2_I2C_Master_Start 0008                      __end_of_lcdNibble 508E  
                              _Loading 1192            __size_ofi2_I2C_Master_Write 000A  
                     EEPROM_write@data 00AD                                __Hparam 0000  
                              __Lparam 0000     __size_ofi2_change_state_to_menu_12 0030  
   __size_ofi2_change_state_to_menu_22 0030                              ?_printRTC 0001  
                      __size_of___ftge 00C8                                ___awdiv 48FC  
                              ___awmod 4B20                             _initServos 4DDE  
                              ___lldiv 49BA                        __size_of___wmul 0036  
                      __size_of_getMAG 0032                                ___lwdiv 4E56  
                              ___lwmod 50F2                        __size_of_getRTC 0086  
                      printSortTimer@i 0049                              _CMCONbits 000FB4  
                    retrieveLog@logNum 0007                           logRun@byte11 00B6  
                         ?_BlockerTest 0001                        __size_of_initUI 0030  
                      __size_of_readIR 004C                                __pcinit 5318  
                           ??___awtoft 0091                   i2EEPROM_read@address 0001  
                      __size_of_logRun 0144                             ??___ftpack 0085  
                         logRun@byte_i 00B5                                __ramtop 1000  
                       _initGlobalVars 483E                                _lcdInst 5B0C  
                              _handler 0008                                __ptext0 46AE  
                              __ptext1 5A0E                                __ptext2 1192  
                              __ptext3 4A76                                __ptext4 483E  
                              __ptext5 562C                                __ptext6 4ECE  
                              __ptext7 5366                                __ptext8 1FAA  
                              __ptext9 53B2                        __size_of_printf 0438  
                              _readADC 58F8                        __size_of_strcpy 0036  
                              _initLCD 544A                                _cur_can 0133  
                              _loadRTC 4BC2                                _readMAG 53FE  
                              _dpowers FAA4                     actuatorTest@i_1731 00AD  
                   actuatorTest@i_1741 00B0                     actuatorTest@i_1750 00B6  
                   actuatorTest@i_1742 00B1                     actuatorTest@i_1751 00B7  
                   actuatorTest@i_1760 00BC                     actuatorTest@i_1744 00B2  
                   actuatorTest@i_1761 00BD                     actuatorTest@i_1753 00B8  
                   actuatorTest@i_1745 00B3                     actuatorTest@i_1770 00C2  
                   actuatorTest@i_1754 00B9                     actuatorTest@i_1738 00AE  
                   actuatorTest@i_1771 00C3                     actuatorTest@i_1763 00BE  
                   actuatorTest@i_1747 00B4                     actuatorTest@i_1739 00AF  
                         __size_of_arm 00FE                     actuatorTest@i_1764 00BF  
                   actuatorTest@i_1748 00B5                     actuatorTest@i_1757 00BA  
                   actuatorTest@i_1758 00BB                     actuatorTest@i_1767 00C0  
                   actuatorTest@i_1768 00C1                                _isdigit 5924  
                     ___awmod@dividend 0080                                getRTC@i 0083  
                 __size_of_retrieveLog 0120                           ??i2_delay_ms 0001  
                           ??_delay_ms 0080               __size_of_I2C_Master_Init 0060  
             __size_of_I2C_Master_Read 002E                          _log_startTime 0100  
             __size_of_I2C_Master_Wait 0014               __size_of_I2C_Master_Stop 0008  
                           ??_dispLogs 0014                           _Distribution 44F6  
                       __pintcode_body 372E                   PlatformTest@res_1783 00AF  
                 end_of_initialization 535C                             ??_readCOND 0082  
                              logRun@i 00B7                             ??_initTime 0086  
                      ??i2_EEPROM_read 0003                                int_func 372E  
                  i2___wmul@multiplier 0001                          ??_EEPROM_read 0082  
                  __size_of_PortTestDC 005C                              i2u1120_47 5290  
                            i2u1121_47 52B2                              i2u1122_47 52BC  
                            i2u1123_47 5A98                              i2u1117_47 3964  
                            i2u1118_47 33C6                              i2u1119_47 5286  
            __size_of_I2C_Master_Start 0008              __size_of_I2C_Master_Write 000A  
                      ___lldiv@divisor 0084                        ___lldiv@counter 008C  
                      ??_initSortTimer 0085                                printf@c 00A8  
                         ??i2_printRTC 002A                                printf@f 008E  
                           ??_printRTC 00AB                       I2C_Master_Init@c 008D  
                     I2C_Master_Read@a 0081                                postdec1 000FE5  
                              postdec2 000FDD                                postinc0 000FEE  
                              postinc2 000FDE                     __end_ofi2_delay_ms 5AA8  
               __end_of_initGlobalVars 48FC                             _sensorTest 29C8  
                           _servoTimes 011C                              _PORTAbits 000F80  
                            _PORTBbits 000F81                   __end_of_inputHandler 3B0C  
                         ??_BothServos 00AB                  __end_of_machineConfig 50F2  
                 __end_of_PlatformTest 29C8                             _updateMenu 2F90  
                    i2_I2C_Master_Read 59C4                              _IR_signal 00E0  
                    i2_I2C_Master_Wait 5AEA                      i2_I2C_Master_Stop 5B68  
                    i2___lwdiv@divisor 0008                        _log_count_total 0067  
                       _PortTestPusher 51B4                              i2___lwdiv 52C6  
                            i2___lwmod 54D4                      i2___lwdiv@counter 000C  
                   ?i2_I2C_Master_Read 0001                     ?i2_I2C_Master_Wait 0001  
                   __end_ofi2_printRTC 372E                     ?i2_I2C_Master_Stop 0001  
                        actuatorTest@i 00C4           ??_change_state_to_menu_start 00C4  
                          ?_initEEPROM 0001                              i2_lcdInst 5B28  
                        Loading@i_1130 00BC                          Loading@i_1132 00BE  
                        Loading@i_1118 00B6                          Loading@i_1127 00B8  
                        Loading@i_1129 00BA                             _total_time 00FA  
                          printf@width 00A9                   __size_of_stopSignals 001C  
                  ??i2_I2C_Master_Read 0002                              i2_isdigit 5A52  
                  ??i2_I2C_Master_Wait 0001                    ??i2_I2C_Master_Stop 0002  
                            i2getRTC@i 0004                     __end_of_BothServos 1FAA  
                  __end_of_EEPROM_read 5AC0                            ?_initServos 0001  
                      ?_initGlobalVars 0001                         __end_of___ftge 483E  
                       __end_of___wmul 562C                         __end_of_getMAG 565E  
                       __end_of_getRTC 4CD4                   __size_ofi2_lcdNibble 005A  
                       _timer2_counter 0073                          EEPROM_write@i 00AF  
                        i2lcdInst@data 0003                         __end_of_initUI 56C0  
                       __end_of_readIR 53B2                         __end_of_logRun 3FDE  
                     i2___wmul@product 0005                         __end_of_printf 1BBC  
                         i2printf@flag 0026                         __end_of_strcpy 55F6  
            __end_ofi2_I2C_Master_Read 59EA              __end_ofi2_I2C_Master_Wait 5AFC  
                         i2printf@prec 001D                    start_initialization 5318  
            __end_ofi2_I2C_Master_Stop 5B70                             readMAG@res 0084  
                    __size_ofi2___wmul 0026                        _count_can_w_lab 012D  
          ?_change_state_to_menu_start 0001                      __size_ofi2_getRTC 0072  
               __end_of_PortTestPusher 5210                            __end_of_arm 440E  
                            i2printf@c 0027                              i2printf@f 000D  
                   EEPROM_write@i_1399 00B0                  i2I2C_Master_Read@temp 0003  
                 BlockerTest@cond_flag 00B3                             ?i2___lwdiv 0006  
                           ?i2___lwmod 0001                      __size_ofi2_printf 036E  
                    __size_ofi2_strcpy 0032                      ??_I2C_Master_Init 0091  
                    ??_I2C_Master_Read 0081                      ??_I2C_Master_Wait 0080  
                           ?i2_lcdInst 0001                      ??_I2C_Master_Stop 0081  
                     __CFG_OSC$INTIO67 000000                             ?i2_isdigit 0001  
                           initTime@DD 0083                             initTime@MM 0084  
                           initTime@YY 0085                        retrieveLog@addr 0010  
                           logRun@addr 00B9                               ??___ftge 0098  
                            _SpeedTest 4D5A                               ??___wmul 0084  
                             ??_getMAG 0086                               ??_getRTC 0083  
               __size_of_algorithmTest 00D6                            ?_sensorTest 0001  
                          __pdataBANK1 0149                       __CFG_LPT1OSC$OFF 000000  
                             ??_initUI 00C4                               ??_readIR 0082  
                             ??_logRun 00B1                               ID@i_1140 00B0  
                             ID@i_1143 00B2                               ID@i_1144 00B5  
                         ??_PortTestDC 00AB                 printSortTimer@timeDiff 0045  
     __size_of_change_state_to_menu_11 0030       __size_of_change_state_to_menu_12 0038  
     __size_of_change_state_to_menu_22 0038       __size_of_change_state_to_menu_23 0030  
                             ??_printf 009A       __size_of_change_state_to_logs_11 0030  
     __size_of_change_state_to_logs_12 0030       __size_of_change_state_to_logs_22 0030  
     __size_of_change_state_to_logs_23 002E       __size_of_change_state_to_logs_33 0030  
     __size_of_change_state_to_logs_34 0030                               ??_strcpy 0084  
                  __size_of_initEEPROM 0008                   __size_of_BlockerTest 01C6  
                  _printSortTimer$2557 0043                      __size_of___awtoft 0044  
                    __size_of___ftpack 010C                            __pbssCOMRAM 005B  
         __size_of_updateServoPosition 0086                            ?_updateMenu 0001  
                        __pcstackBANK0 0080                        ?_PortTestPusher 0001  
              __size_of_printSortTimer 02A8                      i2___lwmod@divisor 0003  
                    i2___lwmod@counter 0005                           _isdigit$2060 0081  
                    __size_of_delay_ms 0028                         initSortTimer@i 0088  
                    printSortTimer@min 003F                      printSortTimer@sec 0041  
                  __size_of_initServos 0078                      __size_of_dispLogs 0024  
                     printRTC@INT_time 00AE                       _tilt_servo_state 0071  
                         i2strcpy@from 0003                               ?i2_putch 0001  
                      _count_pop_w_tab 0131                      __size_of_readCOND 004C  
                          _EEPROM_read 5AA8                       _I2C_Master_Start 5B60  
                   __end_of_PortTestDC 526C                              _f_lastCan 00EA  
                             ?_Loading 0001                    i2I2C_Master_Write@d 0002  
                     _I2C_Master_Write 5B34                      __size_of_initTime 0022  
                i2_updateServoPosition 4FB2                       ___lwdiv@dividend 0080  
                    __CFG_CCP2MX$PORTC 000000                              __pintcode 0008  
                           ?_SpeedTest 0001                          __pmediumconst FA92  
                            _lcdNibble 5022                  __size_of_inputHandler 01EC  
                             ?___awdiv 0086                              __ptext100 5AEA  
                            __ptext101 5A8C                               ?___awmod 0080  
                             ?___lldiv 0080                         _sensor_outputs 00DA  
                             ?___lwdiv 0080                               ?___lwmod 0087  
                __size_of_PlatformTest 0316                      __size_of_printRTC 02CA  
                             ?_lcdInst 0001                               ?_handler 0001  
                             ?_readADC 0001                               ?_initLCD 0001  
                             ?_loadRTC 0001                               ?_readMAG 0001  
                             ?_isdigit 0001             __size_ofi2_I2C_Master_Read 0026  
           __size_ofi2_I2C_Master_Wait 0012             __size_ofi2_I2C_Master_Stop 0008  
                            _firstboot 0143                              _cur_state 00E6  
                     ___lwdiv@quotient 0084                         __size_of_getIR 0072  
                        _algorithmTest 45D8                            ??i2___lwdiv 000A  
                          _COND_signal 00DE                            ??i2___lwmod 0005  
                       __size_of_putch 0010                            __size_of_ID 039A  
                          __size_of_UI 08C8                    __size_of_sensorTest 02FE  
           __end_ofi2_I2C_Master_Start 5B78             __end_ofi2_I2C_Master_Write 5B48  
                          ??i2_lcdInst 0003                         ___wmul@product 0084  
                             _LATAbits 000F89                               _LATBbits 000F8A  
                             _LATCbits 000F8B                               _LATDbits 000F8C  
                         _inputHandler 3920                            ??i2_isdigit 0001  
                         _PlatformTest 26B2                           BlockerTest@i 00AD  
                             _PIR2bits 000FA1                               i2u615_40 3586  
                      PlatformTest@res 00AD                               i2u562_40 24CA  
                             i2u562_47 24C0                               i2u558_40 246A  
                             i2u558_47 2460                               i2u495_40 59E2  
                             i2u930_40 33F6                               i2u932_40 341E  
                             i2u931_48 33F8                    __size_of_updateMenu 02C0  
                       _log_completion 00F0                       __CFG_WDTPS$32768 000000  
                           ?_lcdNibble 0001                              _was_low_1 0077  
                            _was_low_2 0079                              _was_low_3 007B  
                        ??_retrieveLog 0009                             _ADCON0bits 000FC2  
                    ___wmul@multiplier 0080                              _startTime 010E  
                             i2___wmul 599E                          lcdNibble@data 0081  
                             i2_getRTC 4F40                             printf@flag 00A7  
                        lcdNibble@temp 0080                             printf@prec 009E  
              __size_of_updateArmState 003A                               Loading@i 00C0  
                             Loading@j 00C2                               i2_printf 2344  
                             i2_strcpy 565E                         ?_algorithmTest 0001  
                  I2C_Master_Read@temp 0082                              copy_data0 532C  
                         ??_initEEPROM 0080                              readIR@res 0084  
               ?i2_updateServoPosition 0001                       __size_ofi2_putch 000C  
                           _EECON1bits 000FA6                  __end_ofi2_EEPROM_read 5AD6  
                          _count_total 00FE                 i2delay_ms@milliseconds 0002  
                     ??_initGlobalVars 0080                               __Hrparam 0000  
                     __size_of_Loading 05F2                              initTime@h 0081  
                            initTime@m 0080                              initTime@s 0086  
                            initTime@w 0082                               __Lrparam 0000  
                   __CFG_BOREN$SBORDIS 000000                              logRun@num 00B1  
                          ??_SpeedTest 00AB                  __end_of_initSortTimer 4B20  
                         ??_initServos 0088                       __size_of___awdiv 00BE  
                     __size_of___awmod 00A2                _change_state_to_menu_11 5750  
           ?i2_change_state_to_menu_12 0001                _change_state_to_menu_12 5588  
           ?i2_change_state_to_menu_22 0001                _change_state_to_menu_22 5550  
              _change_state_to_menu_23 5720                  i2___wmul@multiplicand 0003  
                     __size_of___lldiv 00BC                       __size_of___lwdiv 0078  
              _change_state_to_logs_11 5840                _change_state_to_logs_12 5810  
              _change_state_to_logs_22 57E0                _change_state_to_logs_23 589E  
              _change_state_to_logs_33 57B0                _change_state_to_logs_34 5780  
                     __size_of___lwmod 0062                         readADC@channel 0081  
                             ___awtoft 5490                               ___ftpack 40FE  
                   i2I2C_Master_Read@a 0002                       __size_of_lcdInst 0010  
                     __size_of_handler 3918                     __end_of_initEEPROM 5B58  
                      _I2C_Master_Init 5154                       __size_of_readADC 002C  
                      _I2C_Master_Read 5870                       __size_of_initLCD 0046  
                         _f_ID_receive 0137                       __size_of_loadRTC 008C  
                     __size_of_readMAG 004C                        _I2C_Master_Wait 5AD6  
                      _I2C_Master_Stop 5B58                       __size_of_isdigit 002A  
                             _delay_ms 594E                         _printSortTimer 3250  
                      ___lwdiv@divisor 0082                        ___lwdiv@counter 0086  
                  __end_of_retrieveLog 40FE                               __ptext10 594E  
                             __ptext11 4776                               __ptext20 4BC2  
                             __ptext12 5490                               __ptext21 5154  
                             __ptext13 40FE                               __ptext30 4C4E  
                             __ptext22 49BA                               __ptext14 44F6  
                             __ptext31 5B34                               __ptext23 58CC  
                             __ptext15 508E                               __ptext40 420A  
                             __ptext32 5B58                               __ptext24 5A30  
                             __ptext16 3E9A                               __ptext41 29C8  
                             __ptext33 5B60                               __ptext25 544A  
                             __ptext17 440E                               __ptext50 1BBC  
                             __ptext42 53FE                               __ptext34 5870  
                             __ptext26 5B50                               __ptext18 5AA8  
                             __ptext51 5A70                               __ptext43 4310  
                             __ptext35 5AD6                               __ptext27 0012  
                             __ptext19 5690                               __ptext60 50F2  
                             __ptext52 4DDE                               __ptext44 45D8  
                             __ptext36 5550                               __ptext28 2CC6  
                             __ptext61 4E56                               __ptext53 4CD4  
                             __ptext45 08DA                               __ptext37 5588  
                             __ptext29 55C0                               __ptext70 565E  
                             __ptext62 5B0C                               __ptext54 3CD4  
                             __ptext46 4D5A                               __ptext38 4B20  
                             __ptext71 3920                               __ptext63 5022  
                             __ptext55 58F8                               __ptext47 51B4  
                             __ptext39 48FC                               __ptext80 5810  
                             __ptext72 56C0                               __ptext56 1784  
                             __ptext48 5210                               __ptext81 5840  
                             __ptext73 56F0                               __ptext65 3B0C  
                             __ptext57 5AFC                               __ptext49 26B2  
                             __ptext90 599E                               __ptext82 59EA  
                             __ptext74 5720                               __ptext66 4FB2  
                             __ptext58 5924                               __ptext91 54D4  
                             __ptext83 3FDE                               __ptext75 5750  
                             __ptext67 2F90                               __ptext59 55F6  
                             __ptext92 52C6                               __ptext84 5AC0  
                             __ptext76 5780                               __ptext68 5976  
                             __ptext93 5B28                               __ptext85 5516  
                             __ptext77 57B0                               __ptext69 34F8  
                             __ptext94 526C                               __ptext86 3250  
                             __ptext78 589E                               __ptext95 4F40  
                             __ptext87 2344                               __ptext79 57E0  
                             __ptext96 5B3E                               __ptext88 5B1C  
                             __ptext97 5B68                               __ptext89 5A52  
                             __ptext98 5B70                               __ptext99 59C4  
                             _dispLogs 59EA                          ?_actuatorTest 0001  
                   PlatformTest@i_1787 00B3                               _readCOND 53B2  
                        ??_stopSignals 0080                         i2_isdigit$2060 0002  
                           strcpy@from 0082                     __end_of_initServos 4E56  
                        __size_of_Test 0106                          ?_EEPROM_write 00AB  
                             _initTime 5A30                          __size_of_main 00C8  
                        __size_of_sort 0022         ??i2_change_state_to_menu_start 0043  
                             _logstate 00F8                    _updateServoPosition 4CD4  
               __size_of_machineConfig 0064                          ??i2_lcdNibble 0001  
                             _printRTC 2CC6                            ??_lcdNibble 0080  
                            printRTC@i 00C2                               int$flags 007E  
                         ??_sensorTest 00AB                         _log_total_time 00F6  
                   _f_can_coming_to_ID 0139                              printf@len 00A3  
                            printf@val 00A5      __end_ofi2_change_state_to_menu_12 5720  
    __end_ofi2_change_state_to_menu_22 56F0                       ??_PortTestPusher 00AB  
                             loadRTC@i 0096                 __end_of_printSortTimer 34F8  
                            putch@data 0082               __end_of_I2C_Master_Start 5B68  
                          _OSCTUNEbits 000F9B               __end_of_I2C_Master_Write 5B3E  
                           _INTCONbits 000FF2                   ?_updateServoPosition 0080  
                         ??_updateMenu 0043                        ??_algorithmTest 00AB  
                           _MAG_signal 00E2                               isdigit@c 0082  
                        sensorTest@res 00AD                         ??_actuatorTest 00AB  
                  _servo_timer_counter 006D                               intlevel2 0000  
                       ??_EEPROM_write 00AE                         BlockerTest@res 00AF  
                   __end_of_sensorTest 2CC6                       ___lwmod@dividend 0087  
                     ___lldiv@dividend 0080                           ?_EEPROM_read 0080  
                  __end_of_stopSignals 5A8C              ??_change_state_to_menu_11 002A  
            ??_change_state_to_menu_12 00AB              ??_change_state_to_menu_22 00AB  
            ??_change_state_to_menu_23 002A              ??_change_state_to_logs_11 002A  
            ??_change_state_to_logs_12 002A              ??_change_state_to_logs_22 002A  
            ??_change_state_to_logs_23 002A              ??_change_state_to_logs_33 002A  
            ??_change_state_to_logs_34 002A                               printf@ap 00A1  
                             printf@cp 009F                     __end_of_updateMenu 3250  
              __end_of_I2C_Master_Init 51B4                __end_of_I2C_Master_Read 589E  
              __end_of_I2C_Master_Wait 5AEA                          ??_BlockerTest 00AB  
              __end_of_I2C_Master_Stop 5B60                            lcdInst@data 0082  
                        printRTC@F3236 014D                           retrieveLog@i 000E  
                          _retrieveLog 3FDE                    __end_ofi2_lcdNibble 52C6  
                ??_updateServoPosition 0084                        ?_printSortTimer 0001  
                   _servo_timer_target 006F                       ___lldiv@quotient 0088  
                    I2C_Master_Write@d 0081                        ___lwmod@divisor 0089  
                       _updateArmState 5516                      _f_can_distributed 013D  
                             strcpy@cp 0084                               strcpy@to 0080  
                        _machineConfig 508E                        ___lwmod@counter 008B  
                    _updateServoStates 3B0C                          printRTC@month 00BE  
                        ?_Distribution 0001                     ?_updateServoStates 0001  
                        _machine_state 00FC                          dispLogs@myLog 0012  
                       _f_arm_position 00E8                    ??_updateServoStates 0009  
                   i2printRTC@INT_time 002D  
