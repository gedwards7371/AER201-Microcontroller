

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Wed Mar 01 13:24:14 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	text45,global,reloc=2,class=CODE,delta=1
    60                           	psect	text46,global,reloc=2,class=CODE,delta=1
    61                           	psect	text47,global,reloc=2,class=CODE,delta=1
    62                           	psect	text48,global,reloc=2,class=CODE,delta=1
    63                           	psect	text49,global,reloc=2,class=CODE,delta=1
    64                           	psect	text50,global,reloc=2,class=CODE,delta=1
    65                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    66                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    67                           	psect	text52,global,reloc=2,class=CODE,delta=1
    68                           	psect	text53,global,reloc=2,class=CODE,delta=1
    69                           	psect	text54,global,reloc=2,class=CODE,delta=1
    70                           	psect	text55,global,reloc=2,class=CODE,delta=1
    71                           	psect	text56,global,reloc=2,class=CODE,delta=1
    72                           	psect	text57,global,reloc=2,class=CODE,delta=1
    73                           	psect	text58,global,reloc=2,class=CODE,delta=1
    74                           	psect	text59,global,reloc=2,class=CODE,delta=1
    75                           	psect	text60,global,reloc=2,class=CODE,delta=1
    76                           	psect	text61,global,reloc=2,class=CODE,delta=1
    77                           	psect	text62,global,reloc=2,class=CODE,delta=1
    78                           	psect	text63,global,reloc=2,class=CODE,delta=1
    79                           	psect	text64,global,reloc=2,class=CODE,delta=1
    80                           	psect	text65,global,reloc=2,class=CODE,delta=1
    81                           	psect	text66,global,reloc=2,class=CODE,delta=1
    82                           	psect	text67,global,reloc=2,class=CODE,delta=1
    83                           	psect	text68,global,reloc=2,class=CODE,delta=1
    84                           	psect	text69,global,reloc=2,class=CODE,delta=1
    85                           	psect	text70,global,reloc=2,class=CODE,delta=1
    86                           	psect	text71,global,reloc=2,class=CODE,delta=1
    87                           	psect	text72,global,reloc=2,class=CODE,delta=1
    88                           	psect	text73,global,reloc=2,class=CODE,delta=1
    89                           	psect	text74,global,reloc=2,class=CODE,delta=1
    90                           	psect	text75,global,reloc=2,class=CODE,delta=1
    91                           	psect	text76,global,reloc=2,class=CODE,delta=1
    92                           	psect	text77,global,reloc=2,class=CODE,delta=1
    93                           	psect	text78,global,reloc=2,class=CODE,delta=1
    94                           	psect	text79,global,reloc=2,class=CODE,delta=1
    95                           	psect	text80,global,reloc=2,class=CODE,delta=1
    96                           	psect	text81,global,reloc=2,class=CODE,delta=1
    97                           	psect	text82,global,reloc=2,class=CODE,delta=1
    98                           	psect	text83,global,reloc=2,class=CODE,delta=1
    99                           	psect	text84,global,reloc=2,class=CODE,delta=1
   100                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   101                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   102                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   103  0000                     
   104                           ; Version 1.40
   105                           ; Generated 01/12/2016 GMT
   106                           ; 
   107                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
   108                           ; All rights reserved.
   109                           ; 
   110                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   111                           ; 
   112                           ; Redistribution and use in source and binary forms, with or without modification, are
   113                           ; permitted provided that the following conditions are met:
   114                           ; 
   115                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   116                           ;        conditions and the following disclaimer.
   117                           ; 
   118                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   119                           ;        of conditions and the following disclaimer in the documentation and/or other
   120                           ;        materials provided with the distribution.
   121                           ; 
   122                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   123                           ;        software without specific prior written permission.
   124                           ; 
   125                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   126                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   127                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   128                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   129                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   130                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   131                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   132                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   133                           ; 
   134                           ; 
   135                           ; Code-generator required, PIC18F4620 Definitions
   136                           ; 
   137                           ; SFR Addresses
   138  0000                     
   139                           	psect	idataBANK1
   140  003F60                     __pidataBANK1:
   141                           	opt stack 0
   142                           
   143                           ;initializer for UI@F3220
   144  003F60  4D                 	db	77
   145  003F61  4D                 	db	77
   146  003F62  4D                 	db	77
   147  003F63  00                 	db	0
   148                           
   149                           ;initializer for printRTC@F3211
   150  003F64  4D                 	db	77
   151  003F65  4D                 	db	77
   152  003F66  4D                 	db	77
   153  003F67  00                 	db	0
   154                           
   155                           	psect	mediumconst
   156  00FBA2                     __pmediumconst:
   157                           	opt stack 0
   158  00FBA2  00                 	db	0
   159  00FBA3                     _keys:
   160                           	opt stack 0
   161  00FBA3  31                 	db	49
   162  00FBA4  32                 	db	50
   163  00FBA5  33                 	db	51
   164  00FBA6  41                 	db	65
   165  00FBA7  34                 	db	52
   166  00FBA8  35                 	db	53
   167  00FBA9  36                 	db	54
   168  00FBAA  42                 	db	66
   169  00FBAB  37                 	db	55
   170  00FBAC  38                 	db	56
   171  00FBAD  39                 	db	57
   172  00FBAE  43                 	db	67
   173  00FBAF  2A                 	db	42
   174  00FBB0  30                 	db	48
   175  00FBB1  23                 	db	35
   176  00FBB2  44                 	db	68
   177  00FBB3  00                 	db	0
   178  00FBB4                     __end_of_keys:
   179                           	opt stack 0
   180  00FBB4                     _dpowers:
   181                           	opt stack 0
   182  00FBB4  0001               	dw	1
   183  00FBB6  000A               	dw	10
   184  00FBB8  0064               	dw	100
   185  00FBBA  03E8               	dw	1000
   186  00FBBC  2710               	dw	10000
   187  00FBBE                     __end_of_dpowers:
   188                           	opt stack 0
   189  0000                     _ADCON0	set	4034
   190  0000                     _ADCON0bits	set	4034
   191  0000                     _ADCON1	set	4033
   192  0000                     _ADCON2	set	4032
   193  0000                     _ADRESH	set	4036
   194  0000                     _ADRESL	set	4035
   195  0000                     _CMCONbits	set	4020
   196  0000                     _CVRCON	set	4021
   197  0000                     _EEADR	set	4009
   198  0000                     _EEADRH	set	4010
   199  0000                     _EECON1bits	set	4006
   200  0000                     _EECON2	set	4007
   201  0000                     _EEDATA	set	4008
   202  0000                     _INTCONbits	set	4082
   203  0000                     _LATA	set	3977
   204  0000                     _LATAbits	set	3977
   205  0000                     _LATB	set	3978
   206  0000                     _LATC	set	3979
   207  0000                     _LATCbits	set	3979
   208  0000                     _LATD	set	3980
   209  0000                     _LATDbits	set	3980
   210  0000                     _LATE	set	3981
   211  0000                     _OSCCON	set	4051
   212  0000                     _OSCTUNEbits	set	3995
   213  0000                     _PIR2bits	set	4001
   214  0000                     _PORTAbits	set	3968
   215  0000                     _PORTB	set	3969
   216  0000                     _PORTBbits	set	3969
   217  0000                     _SSPADD	set	4040
   218  0000                     _SSPBUF	set	4041
   219  0000                     _SSPCON1	set	4038
   220  0000                     _SSPCON2	set	4037
   221  0000                     _SSPSTAT	set	4039
   222  0000                     _T0CON	set	4053
   223  0000                     _T1CON	set	4045
   224  0000                     _TMR0H	set	4055
   225  0000                     _TMR0L	set	4054
   226  0000                     _TMR1H	set	4047
   227  0000                     _TMR1L	set	4046
   228  0000                     _TMR3H	set	4019
   229  0000                     _TMR3L	set	4018
   230  0000                     _TRISA	set	3986
   231  0000                     _TRISB	set	3987
   232  0000                     _TRISC	set	3988
   233  0000                     _TRISD	set	3989
   234  0000                     _TRISE	set	3990
   235  0000                     _ACKDT	set	32301
   236  0000                     _ACKEN	set	32300
   237  0000                     _ADIE	set	31982
   238  0000                     _INT1IE	set	32643
   239  0000                     _INT1IF	set	32640
   240  0000                     _PEIE	set	32662
   241  0000                     _PEN	set	32298
   242  0000                     _RCEN	set	32299
   243  0000                     _RSEN	set	32297
   244  0000                     _SEN	set	32296
   245  0000                     _TMR0IE	set	32661
   246  0000                     _TMR0IF	set	32658
   247  0000                     _TMR0ON	set	32431
   248  0000                     _TMR1IE	set	31976
   249  0000                     _TMR1IF	set	31984
   250  0000                     _TMR1ON	set	32360
   251  0000                     _TMR2IE	set	31977
   252  0000                     _TMR3IE	set	32001
   253  0000                     _TMR3IF	set	32009
   254  0000                     _TMR3ON	set	32136
   255  0000                     _TRISC3	set	31907
   256  0000                     _TRISC4	set	31908
   257  0000                     _nRBPU	set	32655
   258  00FBBE                     STR_21:
   259  00FBBE  25                 	db	37
   260  00FBBF  30                 	db	48	;'0'
   261  00FBC0  32                 	db	50	;'2'
   262  00FBC1  64                 	db	100	;'d'
   263  00FBC2  25                 	db	37
   264  00FBC3  73                 	db	115	;'s'
   265  00FBC4  20                 	db	32
   266  00FBC5  7C                 	db	124
   267  00FBC6  20                 	db	32
   268  00FBC7  25                 	db	37
   269  00FBC8  30                 	db	48	;'0'
   270  00FBC9  32                 	db	50	;'2'
   271  00FBCA  64                 	db	100	;'d'
   272  00FBCB  3A                 	db	58	;':'
   273  00FBCC  25                 	db	37
   274  00FBCD  30                 	db	48	;'0'
   275  00FBCE  32                 	db	50	;'2'
   276  00FBCF  64                 	db	100	;'d'
   277  00FBD0  3A                 	db	58	;':'
   278  00FBD1  25                 	db	37
   279  00FBD2  30                 	db	48	;'0'
   280  00FBD3  32                 	db	50	;'2'
   281  00FBD4  64                 	db	100	;'d'
   282  00FBD5  00                 	db	0
   283  00FBD6                     STR_66:
   284  00FBD6  28                 	db	40
   285  00FBD7  64                 	db	100	;'d'
   286  00FBD8  61                 	db	97	;'a'
   287  00FBD9  74                 	db	116	;'t'
   288  00FBDA  61                 	db	97	;'a'
   289  00FBDB  3A                 	db	58	;':'
   290  00FBDC  20                 	db	32
   291  00FBDD  25                 	db	37
   292  00FBDE  75                 	db	117	;'u'
   293  00FBDF  2C                 	db	44
   294  00FBE0  20                 	db	32
   295  00FBE1  61                 	db	97	;'a'
   296  00FBE2  64                 	db	100	;'d'
   297  00FBE3  64                 	db	100	;'d'
   298  00FBE4  72                 	db	114	;'r'
   299  00FBE5  3A                 	db	58	;':'
   300  00FBE6  20                 	db	32
   301  00FBE7  25                 	db	37
   302  00FBE8  75                 	db	117	;'u'
   303  00FBE9  29                 	db	41
   304  00FBEA  00                 	db	0
   305  00FBEB                     STR_27:
   306  00FBEB  4E                 	db	78	;'N'
   307  00FBEC  4F                 	db	79	;'O'
   308  00FBED  20                 	db	32
   309  00FBEE  4C                 	db	76	;'L'
   310  00FBEF  41                 	db	65	;'A'
   311  00FBF0  42                 	db	66	;'B'
   312  00FBF1  3A                 	db	58	;':'
   313  00FBF2  20                 	db	32
   314  00FBF3  25                 	db	37
   315  00FBF4  64                 	db	100	;'d'
   316  00FBF5  7C                 	db	124
   317  00FBF6  4C                 	db	76	;'L'
   318  00FBF7  41                 	db	65	;'A'
   319  00FBF8  42                 	db	66	;'B'
   320  00FBF9  3A                 	db	58	;':'
   321  00FBFA  20                 	db	32
   322  00FBFB  25                 	db	37
   323  00FBFC  64                 	db	100	;'d'
   324  00FBFD  00                 	db	0
   325  00FBFE                     STR_25:
   326  00FBFE  4E                 	db	78	;'N'
   327  00FBFF  4F                 	db	79	;'O'
   328  00FC00  20                 	db	32
   329  00FC01  54                 	db	84	;'T'
   330  00FC02  41                 	db	65	;'A'
   331  00FC03  42                 	db	66	;'B'
   332  00FC04  3A                 	db	58	;':'
   333  00FC05  20                 	db	32
   334  00FC06  25                 	db	37
   335  00FC07  64                 	db	100	;'d'
   336  00FC08  7C                 	db	124
   337  00FC09  54                 	db	84	;'T'
   338  00FC0A  41                 	db	65	;'A'
   339  00FC0B  42                 	db	66	;'B'
   340  00FC0C  3A                 	db	58	;':'
   341  00FC0D  20                 	db	32
   342  00FC0E  25                 	db	37
   343  00FC0F  64                 	db	100	;'d'
   344  00FC10  00                 	db	0
   345  00FC11                     STR_3:
   346  00FC11  2D                 	db	45
   347  00FC12  2D                 	db	45
   348  00FC13  20                 	db	32
   349  00FC14  4C                 	db	76	;'L'
   350  00FC15  4F                 	db	79	;'O'
   351  00FC16  47                 	db	71	;'G'
   352  00FC17  20                 	db	32
   353  00FC18  25                 	db	37
   354  00FC19  32                 	db	50	;'2'
   355  00FC1A  64                 	db	100	;'d'
   356  00FC1B  20                 	db	32
   357  00FC1C  48                 	db	72	;'H'
   358  00FC1D  45                 	db	69	;'E'
   359  00FC1E  52                 	db	82	;'R'
   360  00FC1F  45                 	db	69	;'E'
   361  00FC20  2D                 	db	45
   362  00FC21  2D                 	db	45
   363  00FC22  00                 	db	0
   364  00FC23                     STR_1:
   365  00FC23  52                 	db	82	;'R'
   366  00FC24  45                 	db	69	;'E'
   367  00FC25  53                 	db	83	;'S'
   368  00FC26  55                 	db	85	;'U'
   369  00FC27  4C                 	db	76	;'L'
   370  00FC28  54                 	db	84	;'T'
   371  00FC29  53                 	db	83	;'S'
   372  00FC2A  20                 	db	32
   373  00FC2B  49                 	db	73	;'I'
   374  00FC2C  4E                 	db	78	;'N'
   375  00FC2D  20                 	db	32
   376  00FC2E  4C                 	db	76	;'L'
   377  00FC2F  4F                 	db	79	;'O'
   378  00FC30  47                 	db	71	;'G'
   379  00FC31  20                 	db	32
   380  00FC32  25                 	db	37
   381  00FC33  64                 	db	100	;'d'
   382  00FC34  00                 	db	0
   383  00FC35                     STR_97:
   384  00FC35  4D                 	db	77	;'M'
   385  00FC36  49                 	db	73	;'I'
   386  00FC37  44                 	db	68	;'D'
   387  00FC38  20                 	db	32
   388  00FC39  2D                 	db	45
   389  00FC3A  2D                 	db	45
   390  00FC3B  20                 	db	32
   391  00FC3C  32                 	db	50	;'2'
   392  00FC3D  73                 	db	115	;'s'
   393  00FC3E  20                 	db	32
   394  00FC3F  20                 	db	32
   395  00FC40  20                 	db	32
   396  00FC41  20                 	db	32
   397  00FC42  20                 	db	32
   398  00FC43  20                 	db	32
   399  00FC44  20                 	db	32
   400  00FC45  00                 	db	0
   401  00FC46                     STR_100:
   402  00FC46  44                 	db	68	;'D'
   403  00FC47  52                 	db	82	;'R'
   404  00FC48  4F                 	db	79	;'O'
   405  00FC49  50                 	db	80	;'P'
   406  00FC4A  20                 	db	32
   407  00FC4B  2D                 	db	45
   408  00FC4C  2D                 	db	45
   409  00FC4D  20                 	db	32
   410  00FC4E  32                 	db	50	;'2'
   411  00FC4F  73                 	db	115	;'s'
   412  00FC50  20                 	db	32
   413  00FC51  20                 	db	32
   414  00FC52  20                 	db	32
   415  00FC53  20                 	db	32
   416  00FC54  20                 	db	32
   417  00FC55  20                 	db	32
   418  00FC56  00                 	db	0
   419  00FC57                     STR_94:
   420  00FC57  4C                 	db	76	;'L'
   421  00FC58  45                 	db	69	;'E'
   422  00FC59  46                 	db	70	;'F'
   423  00FC5A  54                 	db	84	;'T'
   424  00FC5B  20                 	db	32
   425  00FC5C  2D                 	db	45
   426  00FC5D  2D                 	db	45
   427  00FC5E  20                 	db	32
   428  00FC5F  32                 	db	50	;'2'
   429  00FC60  73                 	db	115	;'s'
   430  00FC61  20                 	db	32
   431  00FC62  20                 	db	32
   432  00FC63  20                 	db	32
   433  00FC64  20                 	db	32
   434  00FC65  20                 	db	32
   435  00FC66  20                 	db	32
   436  00FC67  00                 	db	0
   437  00FC68                     STR_99:
   438  00FC68  4C                 	db	76	;'L'
   439  00FC69  45                 	db	69	;'E'
   440  00FC6A  56                 	db	86	;'V'
   441  00FC6B  45                 	db	69	;'E'
   442  00FC6C  4C                 	db	76	;'L'
   443  00FC6D  20                 	db	32
   444  00FC6E  2D                 	db	45
   445  00FC6F  2D                 	db	45
   446  00FC70  20                 	db	32
   447  00FC71  32                 	db	50	;'2'
   448  00FC72  73                 	db	115	;'s'
   449  00FC73  20                 	db	32
   450  00FC74  20                 	db	32
   451  00FC75  20                 	db	32
   452  00FC76  20                 	db	32
   453  00FC77  20                 	db	32
   454  00FC78  00                 	db	0
   455  00FC79                     STR_93:
   456  00FC79  52                 	db	82	;'R'
   457  00FC7A  49                 	db	73	;'I'
   458  00FC7B  47                 	db	71	;'G'
   459  00FC7C  48                 	db	72	;'H'
   460  00FC7D  54                 	db	84	;'T'
   461  00FC7E  20                 	db	32
   462  00FC7F  2D                 	db	45
   463  00FC80  2D                 	db	45
   464  00FC81  20                 	db	32
   465  00FC82  32                 	db	50	;'2'
   466  00FC83  73                 	db	115	;'s'
   467  00FC84  20                 	db	32
   468  00FC85  20                 	db	32
   469  00FC86  20                 	db	32
   470  00FC87  20                 	db	32
   471  00FC88  20                 	db	32
   472  00FC89  00                 	db	0
   473  00FC8A                     STR_92:
   474  00FC8A  4D                 	db	77	;'M'
   475  00FC8B  49                 	db	73	;'I'
   476  00FC8C  44                 	db	68	;'D'
   477  00FC8D  44                 	db	68	;'D'
   478  00FC8E  4C                 	db	76	;'L'
   479  00FC8F  45                 	db	69	;'E'
   480  00FC90  20                 	db	32
   481  00FC91  2D                 	db	45
   482  00FC92  2D                 	db	45
   483  00FC93  20                 	db	32
   484  00FC94  32                 	db	50	;'2'
   485  00FC95  73                 	db	115	;'s'
   486  00FC96  20                 	db	32
   487  00FC97  20                 	db	32
   488  00FC98  20                 	db	32
   489  00FC99  20                 	db	32
   490  00FC9A  00                 	db	0
   491  00FC9B                     STR_95:
   492  00FC9B  4D                 	db	77	;'M'
   493  00FC9C  49                 	db	73	;'I'
   494  00FC9D  44                 	db	68	;'D'
   495  00FC9E  2D                 	db	45
   496  00FC9F  4C                 	db	76	;'L'
   497  00FCA0  45                 	db	69	;'E'
   498  00FCA1  46                 	db	70	;'F'
   499  00FCA2  54                 	db	84	;'T'
   500  00FCA3  20                 	db	32
   501  00FCA4  2D                 	db	45
   502  00FCA5  2D                 	db	45
   503  00FCA6  20                 	db	32
   504  00FCA7  32                 	db	50	;'2'
   505  00FCA8  73                 	db	115	;'s'
   506  00FCA9  20                 	db	32
   507  00FCAA  20                 	db	32
   508  00FCAB  00                 	db	0
   509  00FCAC                     STR_96:
   510  00FCAC  4D                 	db	77	;'M'
   511  00FCAD  49                 	db	73	;'I'
   512  00FCAE  44                 	db	68	;'D'
   513  00FCAF  2D                 	db	45
   514  00FCB0  52                 	db	82	;'R'
   515  00FCB1  49                 	db	73	;'I'
   516  00FCB2  47                 	db	71	;'G'
   517  00FCB3  48                 	db	72	;'H'
   518  00FCB4  54                 	db	84	;'T'
   519  00FCB5  20                 	db	32
   520  00FCB6  2D                 	db	45
   521  00FCB7  2D                 	db	45
   522  00FCB8  20                 	db	32
   523  00FCB9  32                 	db	50	;'2'
   524  00FCBA  73                 	db	115	;'s'
   525  00FCBB  20                 	db	32
   526  00FCBC  00                 	db	0
   527  00FCBD                     STR_72:
   528  00FCBD  41                 	db	65	;'A'
   529  00FCBE  4C                 	db	76	;'L'
   530  00FCBF  47                 	db	71	;'G'
   531  00FCC0  31                 	db	49	;'1'
   532  00FCC1  3A                 	db	58	;':'
   533  00FCC2  20                 	db	32
   534  00FCC3  39                 	db	57	;'9'
   535  00FCC4  20                 	db	32
   536  00FCC5  50                 	db	80	;'P'
   537  00FCC6  4F                 	db	79	;'O'
   538  00FCC7  50                 	db	80	;'P'
   539  00FCC8  4E                 	db	78	;'N'
   540  00FCC9  4F                 	db	79	;'O'
   541  00FCCA  54                 	db	84	;'T'
   542  00FCCB  41                 	db	65	;'A'
   543  00FCCC  42                 	db	66	;'B'
   544  00FCCD  00                 	db	0
   545  00FCCE                     STR_87:
   546  00FCCE  54                 	db	84	;'T'
   547  00FCCF  53                 	db	83	;'S'
   548  00FCD0  54                 	db	84	;'T'
   549  00FCD1  3A                 	db	58	;':'
   550  00FCD2  20                 	db	32
   551  00FCD3  43                 	db	67	;'C'
   552  00FCD4  4F                 	db	79	;'O'
   553  00FCD5  4E                 	db	78	;'N'
   554  00FCD6  44                 	db	68	;'D'
   555  00FCD7  20                 	db	32
   556  00FCD8  53                 	db	83	;'S'
   557  00FCD9  4F                 	db	79	;'O'
   558  00FCDA  4C                 	db	76	;'L'
   559  00FCDB  4E                 	db	78	;'N'
   560  00FCDC  27                 	db	39
   561  00FCDD  44                 	db	68	;'D'
   562  00FCDE  00                 	db	0
   563  00FCDF                     STR_89:
   564  00FCDF  54                 	db	84	;'T'
   565  00FCE0  53                 	db	83	;'S'
   566  00FCE1  54                 	db	84	;'T'
   567  00FCE2  3A                 	db	58	;':'
   568  00FCE3  20                 	db	32
   569  00FCE4  50                 	db	80	;'P'
   570  00FCE5  55                 	db	85	;'U'
   571  00FCE6  53                 	db	83	;'S'
   572  00FCE7  48                 	db	72	;'H'
   573  00FCE8  20                 	db	32
   574  00FCE9  53                 	db	83	;'S'
   575  00FCEA  4F                 	db	79	;'O'
   576  00FCEB  4C                 	db	76	;'L'
   577  00FCEC  4E                 	db	78	;'N'
   578  00FCED  27                 	db	39
   579  00FCEE  44                 	db	68	;'D'
   580  00FCEF  00                 	db	0
   581  00FCF0                     STR_68:
   582  00FCF0  31                 	db	49	;'1'
   583  00FCF1  2E                 	db	46
   584  00FCF2  20                 	db	32
   585  00FCF3  41                 	db	65	;'A'
   586  00FCF4  4C                 	db	76	;'L'
   587  00FCF5  47                 	db	71	;'G'
   588  00FCF6  20                 	db	32
   589  00FCF7  20                 	db	32
   590  00FCF8  32                 	db	50	;'2'
   591  00FCF9  2E                 	db	46
   592  00FCFA  20                 	db	32
   593  00FCFB  53                 	db	83	;'S'
   594  00FCFC  4E                 	db	78	;'N'
   595  00FCFD  53                 	db	83	;'S'
   596  00FCFE  52                 	db	82	;'R'
   597  00FCFF  53                 	db	83	;'S'
   598  00FD00  00                 	db	0
   599  00FD01                     STR_41:
   600  00FD01  4C                 	db	76	;'L'
   601  00FD02  4F                 	db	79	;'O'
   602  00FD03  47                 	db	71	;'G'
   603  00FD04  20                 	db	32
   604  00FD05  31                 	db	49	;'1'
   605  00FD06  20                 	db	32
   606  00FD07  20                 	db	32
   607  00FD08  20                 	db	32
   608  00FD09  20                 	db	32
   609  00FD0A  20                 	db	32
   610  00FD0B  20                 	db	32
   611  00FD0C  20                 	db	32
   612  00FD0D  20                 	db	32
   613  00FD0E  20                 	db	32
   614  00FD0F  20                 	db	32
   615  00FD10  20                 	db	32
   616  00FD11  00                 	db	0
   617  00FD12                     STR_40:
   618  00FD12  4C                 	db	76	;'L'
   619  00FD13  4F                 	db	79	;'O'
   620  00FD14  47                 	db	71	;'G'
   621  00FD15  20                 	db	32
   622  00FD16  32                 	db	50	;'2'
   623  00FD17  20                 	db	32
   624  00FD18  20                 	db	32
   625  00FD19  20                 	db	32
   626  00FD1A  20                 	db	32
   627  00FD1B  20                 	db	32
   628  00FD1C  20                 	db	32
   629  00FD1D  20                 	db	32
   630  00FD1E  20                 	db	32
   631  00FD1F  20                 	db	32
   632  00FD20  20                 	db	32
   633  00FD21  20                 	db	32
   634  00FD22  00                 	db	0
   635  00FD23                     STR_44:
   636  00FD23  4C                 	db	76	;'L'
   637  00FD24  4F                 	db	79	;'O'
   638  00FD25  47                 	db	71	;'G'
   639  00FD26  20                 	db	32
   640  00FD27  33                 	db	51	;'3'
   641  00FD28  20                 	db	32
   642  00FD29  20                 	db	32
   643  00FD2A  20                 	db	32
   644  00FD2B  20                 	db	32
   645  00FD2C  20                 	db	32
   646  00FD2D  20                 	db	32
   647  00FD2E  20                 	db	32
   648  00FD2F  20                 	db	32
   649  00FD30  20                 	db	32
   650  00FD31  20                 	db	32
   651  00FD32  20                 	db	32
   652  00FD33  00                 	db	0
   653  00FD34                     STR_48:
   654  00FD34  4C                 	db	76	;'L'
   655  00FD35  4F                 	db	79	;'O'
   656  00FD36  47                 	db	71	;'G'
   657  00FD37  20                 	db	32
   658  00FD38  34                 	db	52	;'4'
   659  00FD39  20                 	db	32
   660  00FD3A  20                 	db	32
   661  00FD3B  20                 	db	32
   662  00FD3C  20                 	db	32
   663  00FD3D  20                 	db	32
   664  00FD3E  20                 	db	32
   665  00FD3F  20                 	db	32
   666  00FD40  20                 	db	32
   667  00FD41  20                 	db	32
   668  00FD42  20                 	db	32
   669  00FD43  20                 	db	32
   670  00FD44  00                 	db	0
   671  00FD45                     STR_36:
   672  00FD45  33                 	db	51	;'3'
   673  00FD46  2E                 	db	46
   674  00FD47  20                 	db	32
   675  00FD48  4C                 	db	76	;'L'
   676  00FD49  4F                 	db	79	;'O'
   677  00FD4A  47                 	db	71	;'G'
   678  00FD4B  53                 	db	83	;'S'
   679  00FD4C  20                 	db	32
   680  00FD4D  20                 	db	32
   681  00FD4E  20                 	db	32
   682  00FD4F  20                 	db	32
   683  00FD50  20                 	db	32
   684  00FD51  20                 	db	32
   685  00FD52  20                 	db	32
   686  00FD53  20                 	db	32
   687  00FD54  20                 	db	32
   688  00FD55  00                 	db	0
   689  00FD56                     STR_32:
   690  00FD56  32                 	db	50	;'2'
   691  00FD57  2E                 	db	46
   692  00FD58  20                 	db	32
   693  00FD59  53                 	db	83	;'S'
   694  00FD5A  4F                 	db	79	;'O'
   695  00FD5B  52                 	db	82	;'R'
   696  00FD5C  54                 	db	84	;'T'
   697  00FD5D  20                 	db	32
   698  00FD5E  20                 	db	32
   699  00FD5F  20                 	db	32
   700  00FD60  20                 	db	32
   701  00FD61  20                 	db	32
   702  00FD62  20                 	db	32
   703  00FD63  20                 	db	32
   704  00FD64  20                 	db	32
   705  00FD65  20                 	db	32
   706  00FD66  00                 	db	0
   707  00FD67                     STR_33:
   708  00FD67  31                 	db	49	;'1'
   709  00FD68  2E                 	db	46
   710  00FD69  20                 	db	32
   711  00FD6A  44                 	db	68	;'D'
   712  00FD6B  41                 	db	65	;'A'
   713  00FD6C  54                 	db	84	;'T'
   714  00FD6D  45                 	db	69	;'E'
   715  00FD6E  2F                 	db	47
   716  00FD6F  54                 	db	84	;'T'
   717  00FD70  49                 	db	73	;'I'
   718  00FD71  4D                 	db	77	;'M'
   719  00FD72  45                 	db	69	;'E'
   720  00FD73  20                 	db	32
   721  00FD74  20                 	db	32
   722  00FD75  20                 	db	32
   723  00FD76  20                 	db	32
   724  00FD77  00                 	db	0
   725  00FD78                     STR_24:
   726  00FD78  20                 	db	32
   727  00FD79  2D                 	db	45
   728  00FD7A  2D                 	db	45
   729  00FD7B  20                 	db	32
   730  00FD7C  50                 	db	80	;'P'
   731  00FD7D  4F                 	db	79	;'O'
   732  00FD7E  50                 	db	80	;'P'
   733  00FD7F  20                 	db	32
   734  00FD80  20                 	db	32
   735  00FD81  43                 	db	67	;'C'
   736  00FD82  41                 	db	65	;'A'
   737  00FD83  4E                 	db	78	;'N'
   738  00FD84  20                 	db	32
   739  00FD85  2D                 	db	45
   740  00FD86  2D                 	db	45
   741  00FD87  20                 	db	32
   742  00FD88  00                 	db	0
   743  00FD89                     STR_26:
   744  00FD89  20                 	db	32
   745  00FD8A  2D                 	db	45
   746  00FD8B  2D                 	db	45
   747  00FD8C  20                 	db	32
   748  00FD8D  53                 	db	83	;'S'
   749  00FD8E  4F                 	db	79	;'O'
   750  00FD8F  55                 	db	85	;'U'
   751  00FD90  50                 	db	80	;'P'
   752  00FD91  20                 	db	32
   753  00FD92  43                 	db	67	;'C'
   754  00FD93  41                 	db	65	;'A'
   755  00FD94  4E                 	db	78	;'N'
   756  00FD95  20                 	db	32
   757  00FD96  2D                 	db	45
   758  00FD97  2D                 	db	45
   759  00FD98  20                 	db	32
   760  00FD99  00                 	db	0
   761  00FD9A                     STR_28:
   762  00FD9A  2D                 	db	45
   763  00FD9B  2D                 	db	45
   764  00FD9C  20                 	db	32
   765  00FD9D  54                 	db	84	;'T'
   766  00FD9E  4F                 	db	79	;'O'
   767  00FD9F  54                 	db	84	;'T'
   768  00FDA0  41                 	db	65	;'A'
   769  00FDA1  4C                 	db	76	;'L'
   770  00FDA2  20                 	db	32
   771  00FDA3  43                 	db	67	;'C'
   772  00FDA4  41                 	db	65	;'A'
   773  00FDA5  4E                 	db	78	;'N'
   774  00FDA6  53                 	db	83	;'S'
   775  00FDA7  20                 	db	32
   776  00FDA8  2D                 	db	45
   777  00FDA9  2D                 	db	45
   778  00FDAA  00                 	db	0
   779  00FDAB                     STR_39:
   780  00FDAB  4C                 	db	76	;'L'
   781  00FDAC  4F                 	db	79	;'O'
   782  00FDAD  47                 	db	71	;'G'
   783  00FDAE  20                 	db	32
   784  00FDAF  31                 	db	49	;'1'
   785  00FDB0  20                 	db	32
   786  00FDB1  20                 	db	32
   787  00FDB2  20                 	db	32
   788  00FDB3  20                 	db	32
   789  00FDB4  20                 	db	32
   790  00FDB5  20                 	db	32
   791  00FDB6  20                 	db	32
   792  00FDB7  20                 	db	32
   793  00FDB8  20                 	db	32
   794  00FDB9  20                 	db	32
   795  00FDBA  3C                 	db	60	;'<'
   796  00FDBB  00                 	db	0
   797  00FDBC                     STR_42:
   798  00FDBC  4C                 	db	76	;'L'
   799  00FDBD  4F                 	db	79	;'O'
   800  00FDBE  47                 	db	71	;'G'
   801  00FDBF  20                 	db	32
   802  00FDC0  32                 	db	50	;'2'
   803  00FDC1  20                 	db	32
   804  00FDC2  20                 	db	32
   805  00FDC3  20                 	db	32
   806  00FDC4  20                 	db	32
   807  00FDC5  20                 	db	32
   808  00FDC6  20                 	db	32
   809  00FDC7  20                 	db	32
   810  00FDC8  20                 	db	32
   811  00FDC9  20                 	db	32
   812  00FDCA  20                 	db	32
   813  00FDCB  3C                 	db	60	;'<'
   814  00FDCC  00                 	db	0
   815  00FDCD                     STR_46:
   816  00FDCD  4C                 	db	76	;'L'
   817  00FDCE  4F                 	db	79	;'O'
   818  00FDCF  47                 	db	71	;'G'
   819  00FDD0  20                 	db	32
   820  00FDD1  33                 	db	51	;'3'
   821  00FDD2  20                 	db	32
   822  00FDD3  20                 	db	32
   823  00FDD4  20                 	db	32
   824  00FDD5  20                 	db	32
   825  00FDD6  20                 	db	32
   826  00FDD7  20                 	db	32
   827  00FDD8  20                 	db	32
   828  00FDD9  20                 	db	32
   829  00FDDA  20                 	db	32
   830  00FDDB  20                 	db	32
   831  00FDDC  3C                 	db	60	;'<'
   832  00FDDD  00                 	db	0
   833  00FDDE                     STR_50:
   834  00FDDE  4C                 	db	76	;'L'
   835  00FDDF  4F                 	db	79	;'O'
   836  00FDE0  47                 	db	71	;'G'
   837  00FDE1  20                 	db	32
   838  00FDE2  34                 	db	52	;'4'
   839  00FDE3  20                 	db	32
   840  00FDE4  20                 	db	32
   841  00FDE5  20                 	db	32
   842  00FDE6  20                 	db	32
   843  00FDE7  20                 	db	32
   844  00FDE8  20                 	db	32
   845  00FDE9  20                 	db	32
   846  00FDEA  20                 	db	32
   847  00FDEB  20                 	db	32
   848  00FDEC  20                 	db	32
   849  00FDED  3C                 	db	60	;'<'
   850  00FDEE  00                 	db	0
   851  00FDEF                     STR_38:
   852  00FDEF  33                 	db	51	;'3'
   853  00FDF0  2E                 	db	46
   854  00FDF1  20                 	db	32
   855  00FDF2  4C                 	db	76	;'L'
   856  00FDF3  4F                 	db	79	;'O'
   857  00FDF4  47                 	db	71	;'G'
   858  00FDF5  53                 	db	83	;'S'
   859  00FDF6  20                 	db	32
   860  00FDF7  20                 	db	32
   861  00FDF8  20                 	db	32
   862  00FDF9  20                 	db	32
   863  00FDFA  20                 	db	32
   864  00FDFB  20                 	db	32
   865  00FDFC  20                 	db	32
   866  00FDFD  20                 	db	32
   867  00FDFE  3C                 	db	60	;'<'
   868  00FDFF  00                 	db	0
   869  00FE00                     STR_34:
   870  00FE00  32                 	db	50	;'2'
   871  00FE01  2E                 	db	46
   872  00FE02  20                 	db	32
   873  00FE03  53                 	db	83	;'S'
   874  00FE04  4F                 	db	79	;'O'
   875  00FE05  52                 	db	82	;'R'
   876  00FE06  54                 	db	84	;'T'
   877  00FE07  20                 	db	32
   878  00FE08  20                 	db	32
   879  00FE09  20                 	db	32
   880  00FE0A  20                 	db	32
   881  00FE0B  20                 	db	32
   882  00FE0C  20                 	db	32
   883  00FE0D  20                 	db	32
   884  00FE0E  20                 	db	32
   885  00FE0F  3C                 	db	60	;'<'
   886  00FE10  00                 	db	0
   887  00FE11                     STR_31:
   888  00FE11  31                 	db	49	;'1'
   889  00FE12  2E                 	db	46
   890  00FE13  20                 	db	32
   891  00FE14  44                 	db	68	;'D'
   892  00FE15  41                 	db	65	;'A'
   893  00FE16  54                 	db	84	;'T'
   894  00FE17  45                 	db	69	;'E'
   895  00FE18  2F                 	db	47
   896  00FE19  54                 	db	84	;'T'
   897  00FE1A  49                 	db	73	;'I'
   898  00FE1B  4D                 	db	77	;'M'
   899  00FE1C  45                 	db	69	;'E'
   900  00FE1D  20                 	db	32
   901  00FE1E  20                 	db	32
   902  00FE1F  20                 	db	32
   903  00FE20  3C                 	db	60	;'<'
   904  00FE21  00                 	db	0
   905  00FE22                     STR_6:
   906  00FE22  50                 	db	80	;'P'
   907  00FE23  41                 	db	65	;'A'
   908  00FE24  55                 	db	85	;'U'
   909  00FE25  53                 	db	83	;'S'
   910  00FE26  45                 	db	69	;'E'
   911  00FE27  20                 	db	32
   912  00FE28  3C                 	db	60	;'<'
   913  00FE29  20                 	db	32
   914  00FE2A  7C                 	db	124
   915  00FE2B  20                 	db	32
   916  00FE2C  42                 	db	66	;'B'
   917  00FE2D  41                 	db	65	;'A'
   918  00FE2E  43                 	db	67	;'C'
   919  00FE2F  4B                 	db	75	;'K'
   920  00FE30  20                 	db	32
   921  00FE31  3E                 	db	62	;'>'
   922  00FE32  00                 	db	0
   923  00FE33                     STR_30:
   924  00FE33  50                 	db	80	;'P'
   925  00FE34  55                 	db	85	;'U'
   926  00FE35  53                 	db	83	;'S'
   927  00FE36  48                 	db	72	;'H'
   928  00FE37  20                 	db	32
   929  00FE38  54                 	db	84	;'T'
   930  00FE39  4F                 	db	79	;'O'
   931  00FE3A  20                 	db	32
   932  00FE3B  43                 	db	67	;'C'
   933  00FE3C  4F                 	db	79	;'O'
   934  00FE3D  4E                 	db	78	;'N'
   935  00FE3E  54                 	db	84	;'T'
   936  00FE3F  49                 	db	73	;'I'
   937  00FE40  4E                 	db	78	;'N'
   938  00FE41  55                 	db	85	;'U'
   939  00FE42  45                 	db	69	;'E'
   940  00FE43  00                 	db	0
   941  00FE44                     STR_82:
   942  00FE44  4D                 	db	77	;'M'
   943  00FE45  41                 	db	65	;'A'
   944  00FE46  47                 	db	71	;'G'
   945  00FE47  5F                 	db	95	;'_'
   946  00FE48  73                 	db	115	;'s'
   947  00FE49  69                 	db	105	;'i'
   948  00FE4A  67                 	db	103	;'g'
   949  00FE4B  6E                 	db	110	;'n'
   950  00FE4C  61                 	db	97	;'a'
   951  00FE4D  6C                 	db	108	;'l'
   952  00FE4E  3A                 	db	58	;':'
   953  00FE4F  20                 	db	32
   954  00FE50  25                 	db	37
   955  00FE51  64                 	db	100	;'d'
   956  00FE52  20                 	db	32
   957  00FE53  00                 	db	0
   958  00FE54                     STR_98:
   959  00FE54  54                 	db	84	;'T'
   960  00FE55  53                 	db	83	;'S'
   961  00FE56  54                 	db	84	;'T'
   962  00FE57  3A                 	db	58	;':'
   963  00FE58  20                 	db	32
   964  00FE59  54                 	db	84	;'T'
   965  00FE5A  49                 	db	73	;'I'
   966  00FE5B  4C                 	db	76	;'L'
   967  00FE5C  54                 	db	84	;'T'
   968  00FE5D  20                 	db	32
   969  00FE5E  53                 	db	83	;'S'
   970  00FE5F  45                 	db	69	;'E'
   971  00FE60  52                 	db	82	;'R'
   972  00FE61  56                 	db	86	;'V'
   973  00FE62  4F                 	db	79	;'O'
   974  00FE63  00                 	db	0
   975  00FE64                     STR_4:
   976  00FE64  44                 	db	68	;'D'
   977  00FE65  49                 	db	73	;'I'
   978  00FE66  44                 	db	68	;'D'
   979  00FE67  4E                 	db	78	;'N'
   980  00FE68  27                 	db	39
   981  00FE69  54                 	db	84	;'T'
   982  00FE6A  20                 	db	32
   983  00FE6B  43                 	db	67	;'C'
   984  00FE6C  4F                 	db	79	;'O'
   985  00FE6D  4D                 	db	77	;'M'
   986  00FE6E  50                 	db	80	;'P'
   987  00FE6F  4C                 	db	76	;'L'
   988  00FE70  45                 	db	69	;'E'
   989  00FE71  54                 	db	84	;'T'
   990  00FE72  45                 	db	69	;'E'
   991  00FE73  00                 	db	0
   992  00FE74                     STR_80:
   993  00FE74  49                 	db	73	;'I'
   994  00FE75  52                 	db	82	;'R'
   995  00FE76  5F                 	db	95	;'_'
   996  00FE77  73                 	db	115	;'s'
   997  00FE78  69                 	db	105	;'i'
   998  00FE79  67                 	db	103	;'g'
   999  00FE7A  6E                 	db	110	;'n'
  1000  00FE7B  61                 	db	97	;'a'
  1001  00FE7C  6C                 	db	108	;'l'
  1002  00FE7D  3A                 	db	58	;':'
  1003  00FE7E  20                 	db	32
  1004  00FE7F  25                 	db	37
  1005  00FE80  64                 	db	100	;'d'
  1006  00FE81  20                 	db	32
  1007  00FE82  00                 	db	0
  1008  00FE83                     STR_104:
  1009  00FE83  43                 	db	67	;'C'
  1010  00FE84  41                 	db	65	;'A'
  1011  00FE85  4D                 	db	77	;'M'
  1012  00FE86  20                 	db	32
  1013  00FE87  44                 	db	68	;'D'
  1014  00FE88  57                 	db	87	;'W'
  1015  00FE89  4E                 	db	78	;'N'
  1016  00FE8A  20                 	db	32
  1017  00FE8B  7C                 	db	124
  1018  00FE8C  52                 	db	82	;'R'
  1019  00FE8D  43                 	db	67	;'C'
  1020  00FE8E  30                 	db	48	;'0'
  1021  00FE8F  3D                 	db	61	;'='
  1022  00FE90  30                 	db	48	;'0'
  1023  00FE91  00                 	db	0
  1024  00FE92                     STR_103:
  1025  00FE92  43                 	db	67	;'C'
  1026  00FE93  41                 	db	65	;'A'
  1027  00FE94  4D                 	db	77	;'M'
  1028  00FE95  20                 	db	32
  1029  00FE96  55                 	db	85	;'U'
  1030  00FE97  50                 	db	80	;'P'
  1031  00FE98  20                 	db	32
  1032  00FE99  20                 	db	32
  1033  00FE9A  7C                 	db	124
  1034  00FE9B  52                 	db	82	;'R'
  1035  00FE9C  43                 	db	67	;'C'
  1036  00FE9D  30                 	db	48	;'0'
  1037  00FE9E  3D                 	db	61	;'='
  1038  00FE9F  31                 	db	49	;'1'
  1039  00FEA0  00                 	db	0
  1040  00FEA1                     STR_81:
  1041  00FEA1  54                 	db	84	;'T'
  1042  00FEA2  53                 	db	83	;'S'
  1043  00FEA3  54                 	db	84	;'T'
  1044  00FEA4  3A                 	db	58	;':'
  1045  00FEA5  20                 	db	32
  1046  00FEA6  4D                 	db	77	;'M'
  1047  00FEA7  41                 	db	65	;'A'
  1048  00FEA8  47                 	db	71	;'G'
  1049  00FEA9  4E                 	db	78	;'N'
  1050  00FEAA  45                 	db	69	;'E'
  1051  00FEAB  54                 	db	84	;'T'
  1052  00FEAC  49                 	db	73	;'I'
  1053  00FEAD  53                 	db	83	;'S'
  1054  00FEAE  4D                 	db	77	;'M'
  1055  00FEAF  00                 	db	0
  1056  00FEB0                     STR_102:
  1057  00FEB0  54                 	db	84	;'T'
  1058  00FEB1  53                 	db	83	;'S'
  1059  00FEB2  54                 	db	84	;'T'
  1060  00FEB3  3A                 	db	58	;':'
  1061  00FEB4  20                 	db	32
  1062  00FEB5  43                 	db	67	;'C'
  1063  00FEB6  41                 	db	65	;'A'
  1064  00FEB7  4D                 	db	77	;'M'
  1065  00FEB8  20                 	db	32
  1066  00FEB9  53                 	db	83	;'S'
  1067  00FEBA  45                 	db	69	;'E'
  1068  00FEBB  52                 	db	82	;'R'
  1069  00FEBC  56                 	db	86	;'V'
  1070  00FEBD  4F                 	db	79	;'O'
  1071  00FEBE  00                 	db	0
  1072  00FEBF                     STR_91:
  1073  00FEBF  54                 	db	84	;'T'
  1074  00FEC0  53                 	db	83	;'S'
  1075  00FEC1  54                 	db	84	;'T'
  1076  00FEC2  3A                 	db	58	;':'
  1077  00FEC3  20                 	db	32
  1078  00FEC4  50                 	db	80	;'P'
  1079  00FEC5  41                 	db	65	;'A'
  1080  00FEC6  4E                 	db	78	;'N'
  1081  00FEC7  20                 	db	32
  1082  00FEC8  53                 	db	83	;'S'
  1083  00FEC9  45                 	db	69	;'E'
  1084  00FECA  52                 	db	82	;'R'
  1085  00FECB  56                 	db	86	;'V'
  1086  00FECC  4F                 	db	79	;'O'
  1087  00FECD  00                 	db	0
  1088  00FECE                     STR_75:
  1089  00FECE  41                 	db	65	;'A'
  1090  00FECF  4C                 	db	76	;'L'
  1091  00FED0  47                 	db	71	;'G'
  1092  00FED1  34                 	db	52	;'4'
  1093  00FED2  3A                 	db	58	;':'
  1094  00FED3  20                 	db	32
  1095  00FED4  41                 	db	65	;'A'
  1096  00FED5  4C                 	db	76	;'L'
  1097  00FED6  4C                 	db	76	;'L'
  1098  00FED7  20                 	db	32
  1099  00FED8  43                 	db	67	;'C'
  1100  00FED9  41                 	db	65	;'A'
  1101  00FEDA  4E                 	db	78	;'N'
  1102  00FEDB  53                 	db	83	;'S'
  1103  00FEDC  00                 	db	0
  1104  00FEDD                     STR_85:
  1105  00FEDD  54                 	db	84	;'T'
  1106  00FEDE  53                 	db	83	;'S'
  1107  00FEDF  54                 	db	84	;'T'
  1108  00FEE0  3A                 	db	58	;':'
  1109  00FEE1  20                 	db	32
  1110  00FEE2  44                 	db	68	;'D'
  1111  00FEE3  43                 	db	67	;'C'
  1112  00FEE4  20                 	db	32
  1113  00FEE5  4D                 	db	77	;'M'
  1114  00FEE6  4F                 	db	79	;'O'
  1115  00FEE7  54                 	db	84	;'T'
  1116  00FEE8  4F                 	db	79	;'O'
  1117  00FEE9  52                 	db	82	;'R'
  1118  00FEEA  53                 	db	83	;'S'
  1119  00FEEB  00                 	db	0
  1120  00FEEC                     STR_70:
  1121  00FEEC  41                 	db	65	;'A'
  1122  00FEED  4C                 	db	76	;'L'
  1123  00FEEE  47                 	db	71	;'G'
  1124  00FEEF  4F                 	db	79	;'O'
  1125  00FEF0  52                 	db	82	;'R'
  1126  00FEF1  49                 	db	73	;'I'
  1127  00FEF2  54                 	db	84	;'T'
  1128  00FEF3  48                 	db	72	;'H'
  1129  00FEF4  4D                 	db	77	;'M'
  1130  00FEF5  20                 	db	32
  1131  00FEF6  54                 	db	84	;'T'
  1132  00FEF7  45                 	db	69	;'E'
  1133  00FEF8  53                 	db	83	;'S'
  1134  00FEF9  54                 	db	84	;'T'
  1135  00FEFA  00                 	db	0
  1136  00FEFB                     STR_86:
  1137  00FEFB  50                 	db	80	;'P'
  1138  00FEFC  49                 	db	73	;'I'
  1139  00FEFD  4E                 	db	78	;'N'
  1140  00FEFE  20                 	db	32
  1141  00FEFF  52                 	db	82	;'R'
  1142  00FF00  41                 	db	65	;'A'
  1143  00FF01  35                 	db	53	;'5'
  1144  00FF02  20                 	db	32
  1145  00FF03  48                 	db	72	;'H'
  1146  00FF04  49                 	db	73	;'I'
  1147  00FF05  47                 	db	71	;'G'
  1148  00FF06  48                 	db	72	;'H'
  1149  00FF07  2E                 	db	46
  1150  00FF08  00                 	db	0
  1151  00FF09                     STR_73:
  1152  00FF09  41                 	db	65	;'A'
  1153  00FF0A  4C                 	db	76	;'L'
  1154  00FF0B  47                 	db	71	;'G'
  1155  00FF0C  32                 	db	50	;'2'
  1156  00FF0D  3A                 	db	58	;':'
  1157  00FF0E  20                 	db	32
  1158  00FF0F  31                 	db	49	;'1'
  1159  00FF10  32                 	db	50	;'2'
  1160  00FF11  20                 	db	32
  1161  00FF12  43                 	db	67	;'C'
  1162  00FF13  41                 	db	65	;'A'
  1163  00FF14  4E                 	db	78	;'N'
  1164  00FF15  53                 	db	83	;'S'
  1165  00FF16  00                 	db	0
  1166  00FF17                     STR_76:
  1167  00FF17  41                 	db	65	;'A'
  1168  00FF18  4C                 	db	76	;'L'
  1169  00FF19  47                 	db	71	;'G'
  1170  00FF1A  35                 	db	53	;'5'
  1171  00FF1B  3A                 	db	58	;':'
  1172  00FF1C  20                 	db	32
  1173  00FF1D  4E                 	db	78	;'N'
  1174  00FF1E  4F                 	db	79	;'O'
  1175  00FF1F  20                 	db	32
  1176  00FF20  43                 	db	67	;'C'
  1177  00FF21  41                 	db	65	;'A'
  1178  00FF22  4E                 	db	78	;'N'
  1179  00FF23  53                 	db	83	;'S'
  1180  00FF24  00                 	db	0
  1181  00FF25                     STR_71:
  1182  00FF25  50                 	db	80	;'P'
  1183  00FF26  55                 	db	85	;'U'
  1184  00FF27  53                 	db	83	;'S'
  1185  00FF28  48                 	db	72	;'H'
  1186  00FF29  20                 	db	32
  1187  00FF2A  54                 	db	84	;'T'
  1188  00FF2B  4F                 	db	79	;'O'
  1189  00FF2C  20                 	db	32
  1190  00FF2D  53                 	db	83	;'S'
  1191  00FF2E  54                 	db	84	;'T'
  1192  00FF2F  41                 	db	65	;'A'
  1193  00FF30  52                 	db	82	;'R'
  1194  00FF31  54                 	db	84	;'T'
  1195  00FF32  00                 	db	0
  1196  00FF33                     STR_23:
  1197  00FF33  25                 	db	37
  1198  00FF34  64                 	db	100	;'d'
  1199  00FF35  20                 	db	32
  1200  00FF36  4D                 	db	77	;'M'
  1201  00FF37  49                 	db	73	;'I'
  1202  00FF38  4E                 	db	78	;'N'
  1203  00FF39  20                 	db	32
  1204  00FF3A  25                 	db	37
  1205  00FF3B  64                 	db	100	;'d'
  1206  00FF3C  20                 	db	32
  1207  00FF3D  53                 	db	83	;'S'
  1208  00FF3E  45                 	db	69	;'E'
  1209  00FF3F  43                 	db	67	;'C'
  1210  00FF40  00                 	db	0
  1211  00FF41                     STR_2:
  1212  00FF41  54                 	db	84	;'T'
  1213  00FF42  49                 	db	73	;'I'
  1214  00FF43  4D                 	db	77	;'M'
  1215  00FF44  45                 	db	69	;'E'
  1216  00FF45  3A                 	db	58	;':'
  1217  00FF46  20                 	db	32
  1218  00FF47  25                 	db	37
  1219  00FF48  64                 	db	100	;'d'
  1220  00FF49  3A                 	db	58	;':'
  1221  00FF4A  25                 	db	37
  1222  00FF4B  30                 	db	48	;'0'
  1223  00FF4C  32                 	db	50	;'2'
  1224  00FF4D  64                 	db	100	;'d'
  1225  00FF4E  00                 	db	0
  1226  00FF4F                     STR_79:
  1227  00FF4F  54                 	db	84	;'T'
  1228  00FF50  53                 	db	83	;'S'
  1229  00FF51  54                 	db	84	;'T'
  1230  00FF52  3A                 	db	58	;':'
  1231  00FF53  20                 	db	32
  1232  00FF54  49                 	db	73	;'I'
  1233  00FF55  52                 	db	82	;'R'
  1234  00FF56  20                 	db	32
  1235  00FF57  53                 	db	83	;'S'
  1236  00FF58  4E                 	db	78	;'N'
  1237  00FF59  53                 	db	83	;'S'
  1238  00FF5A  52                 	db	82	;'R'
  1239  00FF5B  00                 	db	0
  1240  00FF5C                     STR_69:
  1241  00FF5C  33                 	db	51	;'3'
  1242  00FF5D  2E                 	db	46
  1243  00FF5E  20                 	db	32
  1244  00FF5F  41                 	db	65	;'A'
  1245  00FF60  43                 	db	67	;'C'
  1246  00FF61  54                 	db	84	;'T'
  1247  00FF62  55                 	db	85	;'U'
  1248  00FF63  41                 	db	65	;'A'
  1249  00FF64  54                 	db	84	;'T'
  1250  00FF65  4F                 	db	79	;'O'
  1251  00FF66  52                 	db	82	;'R'
  1252  00FF67  53                 	db	83	;'S'
  1253  00FF68  00                 	db	0
  1254  00FF69                     STR_65:
  1255  00FF69  54                 	db	84	;'T'
  1256  00FF6A  49                 	db	73	;'I'
  1257  00FF6B  4D                 	db	77	;'M'
  1258  00FF6C  45                 	db	69	;'E'
  1259  00FF6D  20                 	db	32
  1260  00FF6E  25                 	db	37
  1261  00FF6F  64                 	db	100	;'d'
  1262  00FF70  3A                 	db	58	;':'
  1263  00FF71  25                 	db	37
  1264  00FF72  30                 	db	48	;'0'
  1265  00FF73  32                 	db	50	;'2'
  1266  00FF74  64                 	db	100	;'d'
  1267  00FF75  00                 	db	0
  1268  00FF76                     STR_74:
  1269  00FF76  41                 	db	65	;'A'
  1270  00FF77  4C                 	db	76	;'L'
  1271  00FF78  47                 	db	71	;'G'
  1272  00FF79  33                 	db	51	;'3'
  1273  00FF7A  3A                 	db	58	;':'
  1274  00FF7B  20                 	db	32
  1275  00FF7C  31                 	db	49	;'1'
  1276  00FF7D  20                 	db	32
  1277  00FF7E  43                 	db	67	;'C'
  1278  00FF7F  41                 	db	65	;'A'
  1279  00FF80  4E                 	db	78	;'N'
  1280  00FF81  00                 	db	0
  1281  00FF82                     STR_88:
  1282  00FF82  50                 	db	80	;'P'
  1283  00FF83  49                 	db	73	;'I'
  1284  00FF84  4E                 	db	78	;'N'
  1285  00FF85  20                 	db	32
  1286  00FF86  52                 	db	82	;'R'
  1287  00FF87  41                 	db	65	;'A'
  1288  00FF88  33                 	db	51	;'3'
  1289  00FF89  2E                 	db	46
  1290  00FF8A  2E                 	db	46
  1291  00FF8B  2E                 	db	46
  1292  00FF8C  00                 	db	0
  1293  00FF8D                     STR_90:
  1294  00FF8D  50                 	db	80	;'P'
  1295  00FF8E  49                 	db	73	;'I'
  1296  00FF8F  4E                 	db	78	;'N'
  1297  00FF90  20                 	db	32
  1298  00FF91  52                 	db	82	;'R'
  1299  00FF92  41                 	db	65	;'A'
  1300  00FF93  34                 	db	52	;'4'
  1301  00FF94  2E                 	db	46
  1302  00FF95  2E                 	db	46
  1303  00FF96  2E                 	db	46
  1304  00FF97  00                 	db	0
  1305  00FF98                     STR_64:
  1306  00FF98  53                 	db	83	;'S'
  1307  00FF99  4F                 	db	79	;'O'
  1308  00FF9A  52                 	db	82	;'R'
  1309  00FF9B  54                 	db	84	;'T'
  1310  00FF9C  49                 	db	73	;'I'
  1311  00FF9D  4E                 	db	78	;'N'
  1312  00FF9E  47                 	db	71	;'G'
  1313  00FF9F  2E                 	db	46
  1314  00FFA0  2E                 	db	46
  1315  00FFA1  2E                 	db	46
  1316  00FFA2  00                 	db	0
  1317  00FFA3                     STR_22:
  1318  00FFA3  44                 	db	68	;'D'
  1319  00FFA4  55                 	db	85	;'U'
  1320  00FFA5  52                 	db	82	;'R'
  1321  00FFA6  41                 	db	65	;'A'
  1322  00FFA7  54                 	db	84	;'T'
  1323  00FFA8  49                 	db	73	;'I'
  1324  00FFA9  4F                 	db	79	;'O'
  1325  00FFAA  4E                 	db	78	;'N'
  1326  00FFAB  3A                 	db	58	;':'
  1327  00FFAC  00                 	db	0
  1328  00FFAD                     STR_77:
  1329  00FFAD  53                 	db	83	;'S'
  1330  00FFAE  45                 	db	69	;'E'
  1331  00FFAF  4E                 	db	78	;'N'
  1332  00FFB0  53                 	db	83	;'S'
  1333  00FFB1  4F                 	db	79	;'O'
  1334  00FFB2  52                 	db	82	;'R'
  1335  00FFB3  53                 	db	83	;'S'
  1336  00FFB4  00                 	db	0
  1337  00FFB5                     STR_105:
  1338  00FFB5  28                 	db	40
  1339  00FFB6  6E                 	db	110	;'n'
  1340  00FFB7  75                 	db	117	;'u'
  1341  00FFB8  6C                 	db	108	;'l'
  1342  00FFB9  6C                 	db	108	;'l'
  1343  00FFBA  29                 	db	41
  1344  00FFBB  00                 	db	0
  1345  00FFBC                     STR_67:
  1346  00FFBC  46                 	db	70	;'F'
  1347  00FFBD  41                 	db	65	;'A'
  1348  00FFBE  49                 	db	73	;'I'
  1349  00FFBF  4C                 	db	76	;'L'
  1350  00FFC0  45                 	db	69	;'E'
  1351  00FFC1  44                 	db	68	;'D'
  1352  00FFC2  00                 	db	0
  1353  00FFC3                     STR_7:
  1354  00FFC3  53                 	db	83	;'S'
  1355  00FFC4  54                 	db	84	;'T'
  1356  00FFC5  41                 	db	65	;'A'
  1357  00FFC6  52                 	db	82	;'R'
  1358  00FFC7  54                 	db	84	;'T'
  1359  00FFC8  3A                 	db	58	;':'
  1360  00FFC9  00                 	db	0
  1361  00FFCA                     STR_9:
  1362  00FFCA  46                 	db	70	;'F'
  1363  00FFCB  45                 	db	69	;'E'
  1364  00FFCC  42                 	db	66	;'B'
  1365  00FFCD  00                 	db	0
  1366  00FFCE                     STR_19:
  1367  00FFCE  44                 	db	68	;'D'
  1368  00FFCF  45                 	db	69	;'E'
  1369  00FFD0  43                 	db	67	;'C'
  1370  00FFD1  00                 	db	0
  1371  00FFD2                     STR_15:
  1372  00FFD2  41                 	db	65	;'A'
  1373  00FFD3  55                 	db	85	;'U'
  1374  00FFD4  47                 	db	71	;'G'
  1375  00FFD5  00                 	db	0
  1376  00FFD6                     STR_14:
  1377  00FFD6  4A                 	db	74	;'J'
  1378  00FFD7  55                 	db	85	;'U'
  1379  00FFD8  4C                 	db	76	;'L'
  1380  00FFD9  00                 	db	0
  1381  00FFDA                     STR_8:
  1382  00FFDA  4A                 	db	74	;'J'
  1383  00FFDB  41                 	db	65	;'A'
  1384  00FFDC  4E                 	db	78	;'N'
  1385  00FFDD  00                 	db	0
  1386  00FFDE                     STR_13:
  1387  00FFDE  4A                 	db	74	;'J'
  1388  00FFDF  55                 	db	85	;'U'
  1389  00FFE0  4E                 	db	78	;'N'
  1390  00FFE1  00                 	db	0
  1391  00FFE2                     STR_16:
  1392  00FFE2  53                 	db	83	;'S'
  1393  00FFE3  45                 	db	69	;'E'
  1394  00FFE4  50                 	db	80	;'P'
  1395  00FFE5  00                 	db	0
  1396  00FFE6                     STR_10:
  1397  00FFE6  4D                 	db	77	;'M'
  1398  00FFE7  41                 	db	65	;'A'
  1399  00FFE8  52                 	db	82	;'R'
  1400  00FFE9  00                 	db	0
  1401  00FFEA                     STR_11:
  1402  00FFEA  41                 	db	65	;'A'
  1403  00FFEB  50                 	db	80	;'P'
  1404  00FFEC  52                 	db	82	;'R'
  1405  00FFED  00                 	db	0
  1406  00FFEE                     STR_20:
  1407  00FFEE  45                 	db	69	;'E'
  1408  00FFEF  52                 	db	82	;'R'
  1409  00FFF0  52                 	db	82	;'R'
  1410  00FFF1  00                 	db	0
  1411  00FFF2                     STR_17:
  1412  00FFF2  4F                 	db	79	;'O'
  1413  00FFF3  43                 	db	67	;'C'
  1414  00FFF4  54                 	db	84	;'T'
  1415  00FFF5  00                 	db	0
  1416  00FFF6                     STR_18:
  1417  00FFF6  4E                 	db	78	;'N'
  1418  00FFF7  4F                 	db	79	;'O'
  1419  00FFF8  56                 	db	86	;'V'
  1420  00FFF9  00                 	db	0
  1421  00FFFA                     STR_12:
  1422  00FFFA  4D                 	db	77	;'M'
  1423  00FFFB  41                 	db	65	;'A'
  1424  00FFFC  59                 	db	89	;'Y'
  1425  00FFFD  00                 	db	0
  1426  0000                     
  1427                           ; #config settings
  1428  00FFFE  00                 	db	0	; dummy byte at the end
  1429  0000                     
  1430                           	psect	cinit
  1431  003822                     __pcinit:
  1432                           	opt stack 0
  1433  003822                     start_initialization:
  1434                           	opt stack 0
  1435  003822                     __initialization:
  1436                           	opt stack 0
  1437                           
  1438                           ; Initialize objects allocated to BANK1 (8 bytes)
  1439                           ; load TBLPTR registers with __pidataBANK1
  1440  003822  0E60               	movlw	low __pidataBANK1
  1441  003824  6EF6               	movwf	tblptrl,c
  1442  003826  0E3F               	movlw	high __pidataBANK1
  1443  003828  6EF7               	movwf	tblptrh,c
  1444  00382A  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1445  00382C  6EF8               	movwf	tblptru,c
  1446  00382E  EE01  F02D         	lfsr	0,__pdataBANK1
  1447  003832  EE10 F008          	lfsr	1,8
  1448  003836                     copy_data0:
  1449  003836  0009               	tblrd		*+
  1450  003838  CFF5 FFEE          	movff	tablat,postinc0
  1451  00383C  50E5               	movf	postdec1,w,c
  1452  00383E  50E1               	movf	fsr1l,w,c
  1453  003840  E1FA               	bnz	copy_data0
  1454                           
  1455                           ; Clear objects allocated to BANK1 (45 bytes)
  1456  003842  EE01  F000         	lfsr	0,__pbssBANK1
  1457  003846  0E2D               	movlw	45
  1458  003848                     clear_0:
  1459  003848  6AEE               	clrf	postinc0,c
  1460  00384A  06E8               	decf	wreg,f,c
  1461  00384C  E1FD               	bnz	clear_0
  1462                           
  1463                           ; Clear objects allocated to BANK0 (38 bytes)
  1464  00384E  EE00  F0DA         	lfsr	0,__pbssBANK0
  1465  003852  0E26               	movlw	38
  1466  003854                     clear_1:
  1467  003854  6AEE               	clrf	postinc0,c
  1468  003856  06E8               	decf	wreg,f,c
  1469  003858  E1FD               	bnz	clear_1
  1470                           
  1471                           ; Clear objects allocated to COMRAM (35 bytes)
  1472  00385A  EE00  F05B         	lfsr	0,__pbssCOMRAM
  1473  00385E  0E23               	movlw	35
  1474  003860                     clear_2:
  1475  003860  6AEE               	clrf	postinc0,c
  1476  003862  06E8               	decf	wreg,f,c
  1477  003864  E1FD               	bnz	clear_2
  1478  003866                     end_of_initialization:
  1479                           	opt stack 0
  1480  003866                     __end_of__initialization:
  1481                           	opt stack 0
  1482  003866  907E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1483  003868  927E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1484  00386A  0100               	movlb	0
  1485  00386C  EF13  F019         	goto	_main	;jump to C main() function
  1486                           tblptru	equ	0xFF8
  1487                           tblptrh	equ	0xFF7
  1488                           tblptrl	equ	0xFF6
  1489                           tablat	equ	0xFF5
  1490                           postinc0	equ	0xFEE
  1491                           wreg	equ	0xFE8
  1492                           postdec1	equ	0xFE5
  1493                           fsr1l	equ	0xFE1
  1494                           
  1495                           	psect	bssCOMRAM
  1496  00005B                     __pbssCOMRAM:
  1497                           	opt stack 0
  1498  00005B                     _back:
  1499                           	opt stack 0
  1500  00005B                     	ds	2
  1501  00005D                     _count_can_no_lab:
  1502                           	opt stack 0
  1503  00005D                     	ds	2
  1504  00005F                     _count_can_w_lab:
  1505                           	opt stack 0
  1506  00005F                     	ds	2
  1507  000061                     _count_pop_no_tab:
  1508                           	opt stack 0
  1509  000061                     	ds	2
  1510  000063                     _count_pop_w_tab:
  1511                           	opt stack 0
  1512  000063                     	ds	2
  1513  000065                     _cur_can:
  1514                           	opt stack 0
  1515  000065                     	ds	2
  1516  000067                     _down:
  1517                           	opt stack 0
  1518  000067                     	ds	2
  1519  000069                     _enter:
  1520                           	opt stack 0
  1521  000069                     	ds	2
  1522  00006B                     _f_ID_receive:
  1523                           	opt stack 0
  1524  00006B                     	ds	2
  1525  00006D                     _f_can_coming_to_ID:
  1526                           	opt stack 0
  1527  00006D                     	ds	2
  1528  00006F                     _f_can_coming_to_distribution:
  1529                           	opt stack 0
  1530  00006F                     	ds	2
  1531  000071                     _f_lastCan:
  1532                           	opt stack 0
  1533  000071                     	ds	2
  1534  000073                     _firstboot:
  1535                           	opt stack 0
  1536  000073                     	ds	2
  1537  000075                     _up:
  1538                           	opt stack 0
  1539  000075                     	ds	2
  1540  000077                     _var:
  1541                           	opt stack 0
  1542  000077                     	ds	2
  1543  000079                     _was_low_1:
  1544                           	opt stack 0
  1545  000079                     	ds	2
  1546  00007B                     _was_low_3:
  1547                           	opt stack 0
  1548  00007B                     	ds	2
  1549  00007D                     _input:
  1550                           	opt stack 0
  1551  00007D                     	ds	1
  1552                           tblptru	equ	0xFF8
  1553                           tblptrh	equ	0xFF7
  1554                           tblptrl	equ	0xFF6
  1555                           tablat	equ	0xFF5
  1556                           postinc0	equ	0xFEE
  1557                           wreg	equ	0xFE8
  1558                           postdec1	equ	0xFE5
  1559                           fsr1l	equ	0xFE1
  1560                           
  1561                           	psect	bssBANK0
  1562  0000DA                     __pbssBANK0:
  1563                           	opt stack 0
  1564  0000DA                     _IR_signal:
  1565                           	opt stack 0
  1566  0000DA                     	ds	2
  1567  0000DC                     _MAG_signal:
  1568                           	opt stack 0
  1569  0000DC                     	ds	2
  1570  0000DE                     _cur_state:
  1571                           	opt stack 0
  1572  0000DE                     	ds	2
  1573  0000E0                     _debug:
  1574                           	opt stack 0
  1575  0000E0                     	ds	2
  1576  0000E2                     _f_loadingNewCan:
  1577                           	opt stack 0
  1578  0000E2                     	ds	2
  1579  0000E4                     _first:
  1580                           	opt stack 0
  1581  0000E4                     	ds	2
  1582  0000E6                     _i:
  1583                           	opt stack 0
  1584  0000E6                     	ds	2
  1585  0000E8                     _log:
  1586                           	opt stack 0
  1587  0000E8                     	ds	2
  1588  0000EA                     _log_completion:
  1589                           	opt stack 0
  1590  0000EA                     	ds	2
  1591  0000EC                     _log_count_can_no_lab:
  1592                           	opt stack 0
  1593  0000EC                     	ds	2
  1594  0000EE                     _log_count_can_w_lab:
  1595                           	opt stack 0
  1596  0000EE                     	ds	2
  1597  0000F0                     _log_count_pop_no_tab:
  1598                           	opt stack 0
  1599  0000F0                     	ds	2
  1600  0000F2                     _log_count_pop_w_tab:
  1601                           	opt stack 0
  1602  0000F2                     	ds	2
  1603  0000F4                     _log_count_total:
  1604                           	opt stack 0
  1605  0000F4                     	ds	2
  1606  0000F6                     _log_total_time:
  1607                           	opt stack 0
  1608  0000F6                     	ds	2
  1609  0000F8                     _logstate:
  1610                           	opt stack 0
  1611  0000F8                     	ds	2
  1612  0000FA                     _total_time:
  1613                           	opt stack 0
  1614  0000FA                     	ds	2
  1615  0000FC                     _machine_state:
  1616                           	opt stack 0
  1617  0000FC                     	ds	1
  1618  0000FD                     _sel:
  1619                           	opt stack 0
  1620  0000FD                     	ds	1
  1621  0000FE                     _count_total:
  1622                           	opt stack 0
  1623  0000FE                     	ds	2
  1624                           tblptru	equ	0xFF8
  1625                           tblptrh	equ	0xFF7
  1626                           tblptrl	equ	0xFF6
  1627                           tablat	equ	0xFF5
  1628                           postinc0	equ	0xFEE
  1629                           wreg	equ	0xFE8
  1630                           postdec1	equ	0xFE5
  1631                           fsr1l	equ	0xFE1
  1632                           
  1633                           	psect	bssBANK1
  1634  000100                     __pbssBANK1:
  1635                           	opt stack 0
  1636  000100                     _log_startTime:
  1637                           	opt stack 0
  1638  000100                     	ds	14
  1639  00010E                     _startTime:
  1640                           	opt stack 0
  1641  00010E                     	ds	14
  1642  00011C                     _servoTimes:
  1643                           	opt stack 0
  1644  00011C                     	ds	8
  1645  000124                     _time:
  1646                           	opt stack 0
  1647  000124                     	ds	7
  1648  00012B                     _f_can_distributed:
  1649                           	opt stack 0
  1650  00012B                     	ds	2
  1651                           tblptru	equ	0xFF8
  1652                           tblptrh	equ	0xFF7
  1653                           tblptrl	equ	0xFF6
  1654                           tablat	equ	0xFF5
  1655                           postinc0	equ	0xFEE
  1656                           wreg	equ	0xFE8
  1657                           postdec1	equ	0xFE5
  1658                           fsr1l	equ	0xFE1
  1659                           
  1660                           	psect	dataBANK1
  1661  00012D                     __pdataBANK1:
  1662                           	opt stack 0
  1663  00012D                     UI@F3220:
  1664                           	opt stack 0
  1665  00012D                     	ds	4
  1666  000131                     printRTC@F3211:
  1667                           	opt stack 0
  1668  000131                     	ds	4
  1669                           tblptru	equ	0xFF8
  1670                           tblptrh	equ	0xFF7
  1671                           tblptrl	equ	0xFF6
  1672                           tablat	equ	0xFF5
  1673                           postinc0	equ	0xFEE
  1674                           wreg	equ	0xFE8
  1675                           postdec1	equ	0xFE5
  1676                           fsr1l	equ	0xFE1
  1677                           
  1678                           	psect	cstackBANK0
  1679  000080                     __pcstackBANK0:
  1680                           	opt stack 0
  1681  000080                     ??_isdigit:
  1682  000080                     ??_readADC:
  1683  000080                     ??_I2C_Master_Wait:
  1684  000080                     ?___wmul:
  1685                           	opt stack 0
  1686  000080                     ?___awmod:
  1687                           	opt stack 0
  1688  000080                     ?___lwdiv:
  1689                           	opt stack 0
  1690  000080                     ?___lldiv:
  1691                           	opt stack 0
  1692  000080                     lcdNibble@temp:
  1693                           	opt stack 0
  1694  000080                     initTime@m:
  1695                           	opt stack 0
  1696  000080                     updateServoPosition@time_us:
  1697                           	opt stack 0
  1698  000080                     EEPROM_read@address:
  1699                           	opt stack 0
  1700  000080                     ___wmul@multiplier:
  1701                           	opt stack 0
  1702  000080                     ___awmod@dividend:
  1703                           	opt stack 0
  1704  000080                     ___lwdiv@dividend:
  1705                           	opt stack 0
  1706  000080                     strcpy@to:
  1707                           	opt stack 0
  1708  000080                     ___lldiv@dividend:
  1709                           	opt stack 0
  1710                           
  1711                           ; 4 bytes @ 0x0
  1712  000080                     	ds	1
  1713  000081                     readADC@channel:
  1714                           	opt stack 0
  1715  000081                     I2C_Master_Read@a:
  1716                           	opt stack 0
  1717  000081                     lcdNibble@data:
  1718                           	opt stack 0
  1719  000081                     initTime@h:
  1720                           	opt stack 0
  1721  000081                     _isdigit$1792:
  1722                           	opt stack 0
  1723  000081                     I2C_Master_Write@d:
  1724                           	opt stack 0
  1725                           
  1726                           ; 2 bytes @ 0x1
  1727  000081                     	ds	1
  1728  000082                     ??_readIR:
  1729  000082                     ??_readMAG:
  1730  000082                     I2C_Master_Read@temp:
  1731                           	opt stack 0
  1732  000082                     lcdInst@data:
  1733                           	opt stack 0
  1734  000082                     putch@data:
  1735                           	opt stack 0
  1736  000082                     initTime@w:
  1737                           	opt stack 0
  1738  000082                     isdigit@c:
  1739                           	opt stack 0
  1740  000082                     updateServoPosition@timer:
  1741                           	opt stack 0
  1742  000082                     ___wmul@multiplicand:
  1743                           	opt stack 0
  1744  000082                     ___awmod@divisor:
  1745                           	opt stack 0
  1746  000082                     ___lwdiv@divisor:
  1747                           	opt stack 0
  1748  000082                     strcpy@from:
  1749                           	opt stack 0
  1750                           
  1751                           ; 2 bytes @ 0x2
  1752  000082                     	ds	1
  1753  000083                     ??_initLCD:
  1754  000083                     initTime@DD:
  1755                           	opt stack 0
  1756  000083                     getRTC@i:
  1757                           	opt stack 0
  1758                           
  1759                           ; 2 bytes @ 0x3
  1760  000083                     	ds	1
  1761  000084                     ??_updateServoPosition:
  1762  000084                     initTime@MM:
  1763                           	opt stack 0
  1764  000084                     ___awmod@counter:
  1765                           	opt stack 0
  1766  000084                     readIR@res:
  1767                           	opt stack 0
  1768  000084                     readMAG@res:
  1769                           	opt stack 0
  1770  000084                     ___wmul@product:
  1771                           	opt stack 0
  1772  000084                     ___lwdiv@quotient:
  1773                           	opt stack 0
  1774  000084                     strcpy@cp:
  1775                           	opt stack 0
  1776  000084                     ___lldiv@divisor:
  1777                           	opt stack 0
  1778                           
  1779                           ; 4 bytes @ 0x4
  1780  000084                     	ds	1
  1781  000085                     ??_initSortTimer:
  1782  000085                     initTime@YY:
  1783                           	opt stack 0
  1784  000085                     ___awmod@sign:
  1785                           	opt stack 0
  1786                           
  1787                           ; 1 bytes @ 0x5
  1788  000085                     	ds	1
  1789  000086                     ??_ID:
  1790  000086                     ??_getIR:
  1791  000086                     ?___awdiv:
  1792                           	opt stack 0
  1793  000086                     initTime@s:
  1794                           	opt stack 0
  1795  000086                     ___lwdiv@counter:
  1796                           	opt stack 0
  1797  000086                     updateServoPosition@my_time:
  1798                           	opt stack 0
  1799  000086                     ___awdiv@dividend:
  1800                           	opt stack 0
  1801                           
  1802                           ; 2 bytes @ 0x6
  1803  000086                     	ds	1
  1804  000087                     ?___lwmod:
  1805                           	opt stack 0
  1806  000087                     ___lwmod@dividend:
  1807                           	opt stack 0
  1808                           
  1809                           ; 2 bytes @ 0x7
  1810  000087                     	ds	1
  1811  000088                     ??_Distribution:
  1812  000088                     ??_initServos:
  1813  000088                     initSortTimer@i:
  1814                           	opt stack 0
  1815  000088                     ___awdiv@divisor:
  1816                           	opt stack 0
  1817  000088                     ___lldiv@quotient:
  1818                           	opt stack 0
  1819  000088                     ID@sensor_outputs:
  1820                           	opt stack 0
  1821                           
  1822                           ; 6 bytes @ 0x8
  1823  000088                     	ds	1
  1824  000089                     ___lwmod@divisor:
  1825                           	opt stack 0
  1826                           
  1827                           ; 2 bytes @ 0x9
  1828  000089                     	ds	1
  1829  00008A                     ___awdiv@counter:
  1830                           	opt stack 0
  1831                           
  1832                           ; 1 bytes @ 0xA
  1833  00008A                     	ds	1
  1834  00008B                     ___awdiv@sign:
  1835                           	opt stack 0
  1836  00008B                     ___lwmod@counter:
  1837                           	opt stack 0
  1838                           
  1839                           ; 1 bytes @ 0xB
  1840  00008B                     	ds	1
  1841  00008C                     ___lldiv@counter:
  1842                           	opt stack 0
  1843  00008C                     ___awdiv@quotient:
  1844                           	opt stack 0
  1845                           
  1846                           ; 2 bytes @ 0xC
  1847  00008C                     	ds	1
  1848  00008D                     I2C_Master_Init@c:
  1849                           	opt stack 0
  1850                           
  1851                           ; 4 bytes @ 0xD
  1852  00008D                     	ds	1
  1853  00008E                     ?_printf:
  1854                           	opt stack 0
  1855  00008E                     printf@f:
  1856                           	opt stack 0
  1857                           
  1858                           ; 2 bytes @ 0xE
  1859  00008E                     	ds	3
  1860  000091                     ??_I2C_Master_Init:
  1861                           
  1862                           ; 1 bytes @ 0x11
  1863  000091                     	ds	4
  1864  000095                     ??_loadRTC:
  1865                           
  1866                           ; 1 bytes @ 0x15
  1867  000095                     	ds	1
  1868  000096                     loadRTC@i:
  1869                           	opt stack 0
  1870                           
  1871                           ; 2 bytes @ 0x16
  1872  000096                     	ds	4
  1873  00009A                     ??_printf:
  1874                           
  1875                           ; 1 bytes @ 0x1A
  1876  00009A                     	ds	4
  1877  00009E                     printf@prec:
  1878                           	opt stack 0
  1879                           
  1880                           ; 1 bytes @ 0x1E
  1881  00009E                     	ds	1
  1882  00009F                     printf@cp:
  1883                           	opt stack 0
  1884                           
  1885                           ; 2 bytes @ 0x1F
  1886  00009F                     	ds	2
  1887  0000A1                     printf@ap:
  1888                           	opt stack 0
  1889                           
  1890                           ; 2 bytes @ 0x21
  1891  0000A1                     	ds	2
  1892  0000A3                     printf@len:
  1893                           	opt stack 0
  1894                           
  1895                           ; 2 bytes @ 0x23
  1896  0000A3                     	ds	2
  1897  0000A5                     printf@val:
  1898                           	opt stack 0
  1899                           
  1900                           ; 2 bytes @ 0x25
  1901  0000A5                     	ds	2
  1902  0000A7                     printf@flag:
  1903                           	opt stack 0
  1904                           
  1905                           ; 1 bytes @ 0x27
  1906  0000A7                     	ds	1
  1907  0000A8                     printf@c:
  1908                           	opt stack 0
  1909                           
  1910                           ; 1 bytes @ 0x28
  1911  0000A8                     	ds	1
  1912  0000A9                     printf@width:
  1913                           	opt stack 0
  1914                           
  1915                           ; 2 bytes @ 0x29
  1916  0000A9                     	ds	2
  1917  0000AB                     ??_printRTC:
  1918  0000AB                     ??_algorithmTest:
  1919  0000AB                     ??_sensorTest:
  1920  0000AB                     ??_actuatorTest:
  1921  0000AB                     EEPROM_write@address:
  1922                           	opt stack 0
  1923                           
  1924                           ; 2 bytes @ 0x2B
  1925  0000AB                     	ds	2
  1926  0000AD                     EEPROM_write@data:
  1927                           	opt stack 0
  1928  0000AD                     actuatorTest@i:
  1929                           	opt stack 0
  1930                           
  1931                           ; 1 bytes @ 0x2D
  1932  0000AD                     	ds	1
  1933  0000AE                     ??_EEPROM_write:
  1934  0000AE                     actuatorTest@i_1509:
  1935                           	opt stack 0
  1936  0000AE                     printRTC@INT_time:
  1937                           	opt stack 0
  1938                           
  1939                           ; 14 bytes @ 0x2E
  1940  0000AE                     	ds	1
  1941  0000AF                     EEPROM_write@i:
  1942                           	opt stack 0
  1943  0000AF                     actuatorTest@i_1510:
  1944                           	opt stack 0
  1945                           
  1946                           ; 1 bytes @ 0x2F
  1947  0000AF                     	ds	1
  1948  0000B0                     EEPROM_write@i_1310:
  1949                           	opt stack 0
  1950  0000B0                     actuatorTest@i_1512:
  1951                           	opt stack 0
  1952                           
  1953                           ; 1 bytes @ 0x30
  1954  0000B0                     	ds	1
  1955  0000B1                     ??_Loading:
  1956  0000B1                     logRun@num:
  1957                           	opt stack 0
  1958  0000B1                     actuatorTest@i_1513:
  1959                           	opt stack 0
  1960                           
  1961                           ; 1 bytes @ 0x31
  1962  0000B1                     	ds	1
  1963  0000B2                     logRun@byte1:
  1964                           	opt stack 0
  1965  0000B2                     actuatorTest@i_1515:
  1966                           	opt stack 0
  1967                           
  1968                           ; 1 bytes @ 0x32
  1969  0000B2                     	ds	1
  1970  0000B3                     logRun@byte2:
  1971                           	opt stack 0
  1972  0000B3                     actuatorTest@i_1516:
  1973                           	opt stack 0
  1974  0000B3                     Loading@addr:
  1975                           	opt stack 0
  1976                           
  1977                           ; 2 bytes @ 0x33
  1978  0000B3                     	ds	1
  1979  0000B4                     logRun@byte3:
  1980                           	opt stack 0
  1981  0000B4                     actuatorTest@i_1518:
  1982                           	opt stack 0
  1983                           
  1984                           ; 1 bytes @ 0x34
  1985  0000B4                     	ds	1
  1986  0000B5                     Loading@byte1:
  1987                           	opt stack 0
  1988  0000B5                     logRun@byte_i:
  1989                           	opt stack 0
  1990  0000B5                     actuatorTest@i_1519:
  1991                           	opt stack 0
  1992                           
  1993                           ; 1 bytes @ 0x35
  1994  0000B5                     	ds	1
  1995  0000B6                     logRun@byte11:
  1996                           	opt stack 0
  1997  0000B6                     actuatorTest@i_1521:
  1998                           	opt stack 0
  1999                           
  2000                           ; 1 bytes @ 0x36
  2001  0000B6                     	ds	1
  2002  0000B7                     actuatorTest@i_1522:
  2003                           	opt stack 0
  2004  0000B7                     logRun@i:
  2005                           	opt stack 0
  2006                           
  2007                           ; 2 bytes @ 0x37
  2008  0000B7                     	ds	1
  2009  0000B8                     actuatorTest@i_1524:
  2010                           	opt stack 0
  2011                           
  2012                           ; 1 bytes @ 0x38
  2013  0000B8                     	ds	1
  2014  0000B9                     actuatorTest@i_1525:
  2015                           	opt stack 0
  2016  0000B9                     logRun@addr:
  2017                           	opt stack 0
  2018                           
  2019                           ; 2 bytes @ 0x39
  2020  0000B9                     	ds	1
  2021  0000BA                     actuatorTest@i_1528:
  2022                           	opt stack 0
  2023                           
  2024                           ; 1 bytes @ 0x3A
  2025  0000BA                     	ds	1
  2026  0000BB                     actuatorTest@i_1529:
  2027                           	opt stack 0
  2028                           
  2029                           ; 1 bytes @ 0x3B
  2030  0000BB                     	ds	1
  2031  0000BC                     actuatorTest@i_1531:
  2032                           	opt stack 0
  2033  0000BC                     printRTC@RTC_month:
  2034                           	opt stack 0
  2035                           
  2036                           ; 2 bytes @ 0x3C
  2037  0000BC                     	ds	1
  2038  0000BD                     actuatorTest@i_1532:
  2039                           	opt stack 0
  2040                           
  2041                           ; 1 bytes @ 0x3D
  2042  0000BD                     	ds	1
  2043  0000BE                     actuatorTest@i_1534:
  2044                           	opt stack 0
  2045  0000BE                     printRTC@month:
  2046                           	opt stack 0
  2047                           
  2048                           ; 4 bytes @ 0x3E
  2049  0000BE                     	ds	1
  2050  0000BF                     actuatorTest@i_1535:
  2051                           	opt stack 0
  2052                           
  2053                           ; 1 bytes @ 0x3F
  2054  0000BF                     	ds	1
  2055  0000C0                     actuatorTest@i_1538:
  2056                           	opt stack 0
  2057                           
  2058                           ; 1 bytes @ 0x40
  2059  0000C0                     	ds	1
  2060  0000C1                     actuatorTest@i_1539:
  2061                           	opt stack 0
  2062                           
  2063                           ; 1 bytes @ 0x41
  2064  0000C1                     	ds	1
  2065  0000C2                     actuatorTest@i_1541:
  2066                           	opt stack 0
  2067  0000C2                     printRTC@i:
  2068                           	opt stack 0
  2069                           
  2070                           ; 2 bytes @ 0x42
  2071  0000C2                     	ds	1
  2072  0000C3                     actuatorTest@i_1542:
  2073                           	opt stack 0
  2074                           
  2075                           ; 1 bytes @ 0x43
  2076  0000C3                     	ds	1
  2077  0000C4                     ??_Test:
  2078  0000C4                     ??_UI:
  2079                           
  2080                           ; 1 bytes @ 0x44
  2081  0000C4                     	ds	2
  2082  0000C6                     _UI$2145:
  2083                           	opt stack 0
  2084                           
  2085                           ; 2 bytes @ 0x46
  2086  0000C6                     	ds	2
  2087  0000C8                     UI@i:
  2088                           	opt stack 0
  2089                           
  2090                           ; 1 bytes @ 0x48
  2091  0000C8                     	ds	1
  2092  0000C9                     UI@i_408:
  2093                           	opt stack 0
  2094                           
  2095                           ; 1 bytes @ 0x49
  2096  0000C9                     	ds	1
  2097  0000CA                     UI@i_411:
  2098                           	opt stack 0
  2099                           
  2100                           ; 1 bytes @ 0x4A
  2101  0000CA                     	ds	1
  2102  0000CB                     UI@i_412:
  2103                           	opt stack 0
  2104                           
  2105                           ; 1 bytes @ 0x4B
  2106  0000CB                     	ds	1
  2107  0000CC                     UI@i_430:
  2108                           	opt stack 0
  2109                           
  2110                           ; 1 bytes @ 0x4C
  2111  0000CC                     	ds	1
  2112  0000CD                     UI@i_431:
  2113                           	opt stack 0
  2114                           
  2115                           ; 1 bytes @ 0x4D
  2116  0000CD                     	ds	1
  2117  0000CE                     UI@i_434:
  2118                           	opt stack 0
  2119                           
  2120                           ; 1 bytes @ 0x4E
  2121  0000CE                     	ds	1
  2122  0000CF                     UI@i_435:
  2123                           	opt stack 0
  2124                           
  2125                           ; 1 bytes @ 0x4F
  2126  0000CF                     	ds	1
  2127  0000D0                     UI@i_438:
  2128                           	opt stack 0
  2129                           
  2130                           ; 1 bytes @ 0x50
  2131  0000D0                     	ds	1
  2132  0000D1                     UI@i_439:
  2133                           	opt stack 0
  2134                           
  2135                           ; 1 bytes @ 0x51
  2136  0000D1                     	ds	1
  2137  0000D2                     UI@i_442:
  2138                           	opt stack 0
  2139                           
  2140                           ; 1 bytes @ 0x52
  2141  0000D2                     	ds	1
  2142  0000D3                     UI@i_443:
  2143                           	opt stack 0
  2144                           
  2145                           ; 1 bytes @ 0x53
  2146  0000D3                     	ds	1
  2147  0000D4                     UI@i_446:
  2148                           	opt stack 0
  2149                           
  2150                           ; 1 bytes @ 0x54
  2151  0000D4                     	ds	1
  2152  0000D5                     UI@i_447:
  2153                           	opt stack 0
  2154                           
  2155                           ; 1 bytes @ 0x55
  2156  0000D5                     	ds	1
  2157  0000D6                     UI@month:
  2158                           	opt stack 0
  2159                           
  2160                           ; 4 bytes @ 0x56
  2161  0000D6                     	ds	4
  2162  0000DA                     tblptru	equ	0xFF8
  2163                           tblptrh	equ	0xFF7
  2164                           tblptrl	equ	0xFF6
  2165                           tablat	equ	0xFF5
  2166                           postinc0	equ	0xFEE
  2167                           wreg	equ	0xFE8
  2168                           postdec1	equ	0xFE5
  2169                           fsr1l	equ	0xFE1
  2170                           
  2171                           ; 1 bytes @ 0x5A
  2172                           
  2173                           	psect	cstackCOMRAM
  2174  000001                     __pcstackCOMRAM:
  2175                           	opt stack 0
  2176  000001                     ??i2_I2C_Master_Wait:
  2177  000001                     ??i2_isdigit:
  2178  000001                     ?i2___wmul:
  2179                           	opt stack 0
  2180  000001                     ?i2___lwmod:
  2181                           	opt stack 0
  2182  000001                     i2lcdNibble@temp:
  2183                           	opt stack 0
  2184  000001                     i2EEPROM_read@address:
  2185                           	opt stack 0
  2186  000001                     i2___wmul@multiplier:
  2187                           	opt stack 0
  2188  000001                     i2___lwmod@dividend:
  2189                           	opt stack 0
  2190  000001                     i2strcpy@to:
  2191                           	opt stack 0
  2192                           
  2193                           ; 2 bytes @ 0x0
  2194  000001                     	ds	1
  2195  000002                     i2I2C_Master_Read@a:
  2196                           	opt stack 0
  2197  000002                     i2lcdNibble@data:
  2198                           	opt stack 0
  2199  000002                     i2_isdigit$1792:
  2200                           	opt stack 0
  2201  000002                     i2I2C_Master_Write@d:
  2202                           	opt stack 0
  2203                           
  2204                           ; 2 bytes @ 0x1
  2205  000002                     	ds	1
  2206  000003                     i2I2C_Master_Read@temp:
  2207                           	opt stack 0
  2208  000003                     i2lcdInst@data:
  2209                           	opt stack 0
  2210  000003                     i2putch@data:
  2211                           	opt stack 0
  2212  000003                     i2isdigit@c:
  2213                           	opt stack 0
  2214  000003                     i2___wmul@multiplicand:
  2215                           	opt stack 0
  2216  000003                     i2___lwmod@divisor:
  2217                           	opt stack 0
  2218  000003                     i2strcpy@from:
  2219                           	opt stack 0
  2220                           
  2221                           ; 2 bytes @ 0x2
  2222  000003                     	ds	1
  2223  000004                     i2getRTC@i:
  2224                           	opt stack 0
  2225                           
  2226                           ; 2 bytes @ 0x3
  2227  000004                     	ds	1
  2228  000005                     i2___lwmod@counter:
  2229                           	opt stack 0
  2230  000005                     i2___wmul@product:
  2231                           	opt stack 0
  2232  000005                     i2strcpy@cp:
  2233                           	opt stack 0
  2234                           
  2235                           ; 2 bytes @ 0x4
  2236  000005                     	ds	1
  2237  000006                     ?i2___lwdiv:
  2238                           	opt stack 0
  2239  000006                     i2___lwdiv@dividend:
  2240                           	opt stack 0
  2241                           
  2242                           ; 2 bytes @ 0x5
  2243  000006                     	ds	1
  2244  000007                     retrieveLog@logNum:
  2245                           	opt stack 0
  2246                           
  2247                           ; 2 bytes @ 0x6
  2248  000007                     	ds	1
  2249  000008                     i2___lwdiv@divisor:
  2250                           	opt stack 0
  2251                           
  2252                           ; 2 bytes @ 0x7
  2253  000008                     	ds	1
  2254  000009                     ??_retrieveLog:
  2255                           
  2256                           ; 1 bytes @ 0x8
  2257  000009                     	ds	1
  2258  00000A                     i2___lwdiv@quotient:
  2259                           	opt stack 0
  2260                           
  2261                           ; 2 bytes @ 0x9
  2262  00000A                     	ds	1
  2263  00000B                     retrieveLog@byte1:
  2264                           	opt stack 0
  2265                           
  2266                           ; 1 bytes @ 0xA
  2267  00000B                     	ds	1
  2268  00000C                     retrieveLog@byte2:
  2269                           	opt stack 0
  2270  00000C                     i2___lwdiv@counter:
  2271                           	opt stack 0
  2272                           
  2273                           ; 1 bytes @ 0xB
  2274  00000C                     	ds	1
  2275  00000D                     ?i2_printf:
  2276                           	opt stack 0
  2277  00000D                     retrieveLog@byte3:
  2278                           	opt stack 0
  2279  00000D                     i2printf@f:
  2280                           	opt stack 0
  2281                           
  2282                           ; 2 bytes @ 0xC
  2283  00000D                     	ds	1
  2284  00000E                     retrieveLog@i:
  2285                           	opt stack 0
  2286                           
  2287                           ; 2 bytes @ 0xD
  2288  00000E                     	ds	2
  2289  000010                     retrieveLog@addr:
  2290                           	opt stack 0
  2291                           
  2292                           ; 2 bytes @ 0xF
  2293  000010                     	ds	2
  2294  000012                     dispLogs@myLog:
  2295                           	opt stack 0
  2296                           
  2297                           ; 2 bytes @ 0x11
  2298  000012                     	ds	2
  2299  000014                     
  2300                           ; 1 bytes @ 0x13
  2301  000014                     	ds	5
  2302  000019                     ??i2_printf:
  2303                           
  2304                           ; 1 bytes @ 0x18
  2305  000019                     	ds	4
  2306  00001D                     i2printf@prec:
  2307                           	opt stack 0
  2308                           
  2309                           ; 1 bytes @ 0x1C
  2310  00001D                     	ds	1
  2311  00001E                     i2printf@cp:
  2312                           	opt stack 0
  2313                           
  2314                           ; 2 bytes @ 0x1D
  2315  00001E                     	ds	2
  2316  000020                     i2printf@ap:
  2317                           	opt stack 0
  2318                           
  2319                           ; 2 bytes @ 0x1F
  2320  000020                     	ds	2
  2321  000022                     i2printf@len:
  2322                           	opt stack 0
  2323                           
  2324                           ; 2 bytes @ 0x21
  2325  000022                     	ds	2
  2326  000024                     i2printf@val:
  2327                           	opt stack 0
  2328                           
  2329                           ; 2 bytes @ 0x23
  2330  000024                     	ds	2
  2331  000026                     i2printf@flag:
  2332                           	opt stack 0
  2333                           
  2334                           ; 1 bytes @ 0x25
  2335  000026                     	ds	1
  2336  000027                     i2printf@c:
  2337                           	opt stack 0
  2338                           
  2339                           ; 1 bytes @ 0x26
  2340  000027                     	ds	1
  2341  000028                     i2printf@width:
  2342                           	opt stack 0
  2343                           
  2344                           ; 2 bytes @ 0x27
  2345  000028                     	ds	2
  2346  00002A                     ??_printSortTimer:
  2347  00002A                     ??i2_printRTC:
  2348  00002A                     ?_inputHandler:
  2349                           	opt stack 0
  2350                           
  2351                           ; 2 bytes @ 0x29
  2352  00002A                     	ds	2
  2353  00002C                     ??_inputHandler:
  2354                           
  2355                           ; 1 bytes @ 0x2B
  2356  00002C                     	ds	1
  2357  00002D                     printSortTimer@hour:
  2358                           	opt stack 0
  2359  00002D                     i2printRTC@INT_time:
  2360                           	opt stack 0
  2361                           
  2362                           ; 14 bytes @ 0x2C
  2363  00002D                     	ds	2
  2364  00002F                     printSortTimer@curTime:
  2365                           	opt stack 0
  2366                           
  2367                           ; 14 bytes @ 0x2E
  2368  00002F                     	ds	12
  2369  00003B                     i2printRTC@RTC_month:
  2370                           	opt stack 0
  2371                           
  2372                           ; 2 bytes @ 0x3A
  2373  00003B                     	ds	2
  2374  00003D                     printSortTimer@start_sec:
  2375                           	opt stack 0
  2376  00003D                     i2printRTC@month:
  2377                           	opt stack 0
  2378                           
  2379                           ; 4 bytes @ 0x3C
  2380  00003D                     	ds	2
  2381  00003F                     printSortTimer@cur_sec:
  2382                           	opt stack 0
  2383                           
  2384                           ; 2 bytes @ 0x3E
  2385  00003F                     	ds	2
  2386  000041                     printSortTimer@min:
  2387                           	opt stack 0
  2388  000041                     i2printRTC@i:
  2389                           	opt stack 0
  2390                           
  2391                           ; 2 bytes @ 0x40
  2392  000041                     	ds	2
  2393  000043                     ??_updateMenu:
  2394  000043                     printSortTimer@sec:
  2395                           	opt stack 0
  2396                           
  2397                           ; 2 bytes @ 0x42
  2398  000043                     	ds	2
  2399  000045                     _printSortTimer$2265:
  2400                           	opt stack 0
  2401                           
  2402                           ; 2 bytes @ 0x44
  2403  000045                     	ds	2
  2404  000047                     printSortTimer@timeDiff:
  2405                           	opt stack 0
  2406                           
  2407                           ; 2 bytes @ 0x46
  2408  000047                     	ds	2
  2409  000049                     printSortTimer@i:
  2410                           	opt stack 0
  2411                           
  2412                           ; 2 bytes @ 0x48
  2413  000049                     	ds	2
  2414  00004B                     ??_handler:
  2415                           
  2416                           ; 1 bytes @ 0x4A
  2417  00004B                     	ds	16
  2418                           tblptru	equ	0xFF8
  2419                           tblptrh	equ	0xFF7
  2420                           tblptrl	equ	0xFF6
  2421                           tablat	equ	0xFF5
  2422                           postinc0	equ	0xFEE
  2423                           wreg	equ	0xFE8
  2424                           postdec1	equ	0xFE5
  2425                           fsr1l	equ	0xFE1
  2426                           
  2427 ;;
  2428 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2429 ;;
  2430 ;; *************** function _main *****************
  2431 ;; Defined at:
  2432 ;;		line 17 in file "main.c"
  2433 ;; Parameters:    Size  Location     Type
  2434 ;;		None
  2435 ;; Auto vars:     Size  Location     Type
  2436 ;;		None
  2437 ;; Return value:  Size  Location     Type
  2438 ;;                  1    wreg      void 
  2439 ;; Registers used:
  2440 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2441 ;; Tracked objects:
  2442 ;;		On entry : 0/0
  2443 ;;		On exit  : 0/0
  2444 ;;		Unchanged: 0/0
  2445 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2446 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2447 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2448 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2449 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2450 ;;Total ram usage:        0 bytes
  2451 ;; Hardware stack levels required when called:   13
  2452 ;; This function calls:
  2453 ;;		_Test
  2454 ;;		_UI
  2455 ;;		_initLCD
  2456 ;;		_initTime
  2457 ;;		_initUI
  2458 ;;		_logRun
  2459 ;;		_machineConfig
  2460 ;;		_sort
  2461 ;;		_stopSignals
  2462 ;; This function is called by:
  2463 ;;		Startup code after reset
  2464 ;; This function uses a non-reentrant model
  2465 ;;
  2466                           
  2467                           	psect	text0
  2468  003226                     __ptext0:
  2469                           	opt stack 0
  2470  003226                     _main:
  2471                           	opt stack 18
  2472                           
  2473                           ;main.c: 18: machineConfig();
  2474                           
  2475                           ;incstack = 0
  2476  003226  EC91  F01B         	call	_machineConfig	;wreg free
  2477                           
  2478                           ;main.c: 19: initLCD();
  2479  00322A  ECAB  F01C         	call	_initLCD	;wreg free
  2480                           
  2481                           ;main.c: 20: initTime(0x42, 0x20, 0x13, 0x04, 0x01, 0x03, 0x17);
  2482  00322E  0E20               	movlw	32
  2483  003230  0100               	movlb	0	; () banked
  2484  003232  6F80               	movwf	initTime@m& (0+255),b
  2485  003234  0E13               	movlw	19
  2486  003236  0100               	movlb	0	; () banked
  2487  003238  6F81               	movwf	initTime@h& (0+255),b
  2488  00323A  0E04               	movlw	4
  2489  00323C  0100               	movlb	0	; () banked
  2490  00323E  6F82               	movwf	initTime@w& (0+255),b
  2491  003240  0E01               	movlw	1
  2492  003242  0100               	movlb	0	; () banked
  2493  003244  6F83               	movwf	initTime@DD& (0+255),b
  2494  003246  0E03               	movlw	3
  2495  003248  0100               	movlb	0	; () banked
  2496  00324A  6F84               	movwf	initTime@MM& (0+255),b
  2497  00324C  0E17               	movlw	23
  2498  00324E  0100               	movlb	0	; () banked
  2499  003250  6F85               	movwf	initTime@YY& (0+255),b
  2500  003252  0E42               	movlw	66
  2501  003254  EC2C  F01F         	call	_initTime
  2502                           
  2503                           ;main.c: 21: initUI();
  2504  003258  ECF7  F01E         	call	_initUI	;wreg free
  2505                           
  2506                           ;main.c: 22: first = 1;
  2507  00325C  0E00               	movlw	0
  2508  00325E  0100               	movlb	0	; () banked
  2509  003260  6FE5               	movwf	(_first+1)& (0+255),b
  2510  003262  0E01               	movlw	1
  2511  003264  6FE4               	movwf	_first& (0+255),b
  2512                           
  2513                           ; BSR set to: 0
  2514                           ;main.c: 24: machine_state = Testing_state;
  2515  003266  0E03               	movlw	3
  2516  003268  0100               	movlb	0	; () banked
  2517  00326A  6FFC               	movwf	_machine_state& (0+255),b
  2518                           
  2519                           ; BSR set to: 0
  2520                           ;main.c: 28: switch(machine_state){
  2521                           
  2522                           ;main.c: 27: while(1){
  2523  00326C  D018               	goto	l7335
  2524  00326E                     l7317:
  2525                           
  2526                           ; BSR set to: 0
  2527                           ;main.c: 30: UI();
  2528  00326E  EC09  F000         	call	_UI	;wreg free
  2529                           
  2530                           ;main.c: 31: break;
  2531  003272  D015               	goto	l7335
  2532  003274                     l7319:
  2533                           
  2534                           ;main.c: 33: sort();
  2535  003274  EC1B  F01F         	call	_sort	;wreg free
  2536                           
  2537                           ;main.c: 34: break;
  2538  003278  D012               	goto	l7335
  2539  00327A                     l7321:
  2540                           
  2541                           ;main.c: 36: stopSignals();
  2542  00327A  EC58  F01F         	call	_stopSignals	;wreg free
  2543                           
  2544                           ;main.c: 37: logRun();
  2545  00327E  ECA7  F013         	call	_logRun	;wreg free
  2546                           
  2547                           ;main.c: 38: first = 1;
  2548  003282  0E00               	movlw	0
  2549  003284  0100               	movlb	0	; () banked
  2550  003286  6FE5               	movwf	(_first+1)& (0+255),b
  2551  003288  0E01               	movlw	1
  2552  00328A  6FE4               	movwf	_first& (0+255),b
  2553                           
  2554                           ; BSR set to: 0
  2555                           ;main.c: 39: UI();
  2556  00328C  EC09  F000         	call	_UI	;wreg free
  2557                           
  2558                           ;main.c: 40: break;
  2559  003290  D006               	goto	l7335
  2560  003292                     l7329:
  2561                           
  2562                           ;main.c: 42: Test();
  2563  003292  EC4E  F017         	call	_Test	;wreg free
  2564                           
  2565                           ;main.c: 43: break;
  2566  003296  D003               	goto	l7335
  2567  003298                     l7331:
  2568                           
  2569                           ;main.c: 45: stopSignals();
  2570  003298  EC58  F01F         	call	_stopSignals	;wreg free
  2571  00329C                     l478:
  2572  00329C  D7FF               	goto	l478
  2573  00329E                     l7335:
  2574  00329E  0100               	movlb	0	; () banked
  2575  0032A0  51FC               	movf	_machine_state& (0+255),w,b
  2576                           
  2577                           ; Switch size 1, requested type "space"
  2578                           ; Number of cases is 5, Range of values is 0 to 4
  2579                           ; switch strategies available:
  2580                           ; Name         Instructions Cycles
  2581                           ; simple_byte           16     9 (average)
  2582                           ;	Chosen strategy is simple_byte
  2583  0032A2  0A00               	xorlw	0	; case 0
  2584  0032A4  B4D8               	btfsc	status,2,c
  2585  0032A6  D7E3               	goto	l7317
  2586  0032A8  0A01               	xorlw	1	; case 1
  2587  0032AA  B4D8               	btfsc	status,2,c
  2588  0032AC  D7E3               	goto	l7319
  2589  0032AE  0A03               	xorlw	3	; case 2
  2590  0032B0  B4D8               	btfsc	status,2,c
  2591  0032B2  D7E3               	goto	l7321
  2592  0032B4  0A01               	xorlw	1	; case 3
  2593  0032B6  B4D8               	btfsc	status,2,c
  2594  0032B8  D7EC               	goto	l7329
  2595  0032BA  0A07               	xorlw	7	; case 4
  2596  0032BC  B4D8               	btfsc	status,2,c
  2597  0032BE  D7EC               	goto	l7331
  2598                           
  2599                           ; BSR set to: 0
  2600                           
  2601                           ; BSR set to: 0
  2602  0032C0  D7EE               	goto	l7335
  2603  0032C2                     __end_of_main:
  2604                           	opt stack 0
  2605                           tblptru	equ	0xFF8
  2606                           tblptrh	equ	0xFF7
  2607                           tblptrl	equ	0xFF6
  2608                           tablat	equ	0xFF5
  2609                           postinc0	equ	0xFEE
  2610                           wreg	equ	0xFE8
  2611                           postdec1	equ	0xFE5
  2612                           fsr1l	equ	0xFE1
  2613                           status	equ	0xFD8
  2614                           
  2615 ;; *************** function _stopSignals *****************
  2616 ;; Defined at:
  2617 ;;		line 54 in file "main.c"
  2618 ;; Parameters:    Size  Location     Type
  2619 ;;		None
  2620 ;; Auto vars:     Size  Location     Type
  2621 ;;		None
  2622 ;; Return value:  Size  Location     Type
  2623 ;;                  1    wreg      void 
  2624 ;; Registers used:
  2625 ;;		wreg, status,2
  2626 ;; Tracked objects:
  2627 ;;		On entry : 0/0
  2628 ;;		On exit  : 0/0
  2629 ;;		Unchanged: 0/0
  2630 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2631 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2632 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2633 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2634 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2635 ;;Total ram usage:        0 bytes
  2636 ;; Hardware stack levels used:    1
  2637 ;; Hardware stack levels required when called:    7
  2638 ;; This function calls:
  2639 ;;		Nothing
  2640 ;; This function is called by:
  2641 ;;		_main
  2642 ;; This function uses a non-reentrant model
  2643 ;;
  2644                           
  2645                           	psect	text1
  2646  003EB0                     __ptext1:
  2647                           	opt stack 0
  2648  003EB0                     _stopSignals:
  2649                           	opt stack 23
  2650                           
  2651                           ;main.c: 55: LATA = 0x00;
  2652                           
  2653                           ; BSR set to: 0
  2654                           ;incstack = 0
  2655  003EB0  0E00               	movlw	0
  2656  003EB2  6E89               	movwf	3977,c	;volatile
  2657                           
  2658                           ;main.c: 56: LATB = 0x00;
  2659  003EB4  0E00               	movlw	0
  2660  003EB6  6E8A               	movwf	3978,c	;volatile
  2661                           
  2662                           ;main.c: 57: LATC = 0x00;
  2663  003EB8  0E00               	movlw	0
  2664  003EBA  6E8B               	movwf	3979,c	;volatile
  2665                           
  2666                           ;main.c: 58: LATD = 0x00;
  2667  003EBC  0E00               	movlw	0
  2668  003EBE  6E8C               	movwf	3980,c	;volatile
  2669                           
  2670                           ;main.c: 59: LATE = 0x00;
  2671  003EC0  0E00               	movlw	0
  2672  003EC2  6E8D               	movwf	3981,c	;volatile
  2673  003EC4  0012               	return		;funcret
  2674  003EC6                     __end_of_stopSignals:
  2675                           	opt stack 0
  2676                           tblptru	equ	0xFF8
  2677                           tblptrh	equ	0xFF7
  2678                           tblptrl	equ	0xFF6
  2679                           tablat	equ	0xFF5
  2680                           postinc0	equ	0xFEE
  2681                           wreg	equ	0xFE8
  2682                           postdec1	equ	0xFE5
  2683                           fsr1l	equ	0xFE1
  2684                           status	equ	0xFD8
  2685                           
  2686 ;; *************** function _sort *****************
  2687 ;; Defined at:
  2688 ;;		line 55 in file "sort.c"
  2689 ;; Parameters:    Size  Location     Type
  2690 ;;		None
  2691 ;; Auto vars:     Size  Location     Type
  2692 ;;		None
  2693 ;; Return value:  Size  Location     Type
  2694 ;;                  1    wreg      void 
  2695 ;; Registers used:
  2696 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2697 ;; Tracked objects:
  2698 ;;		On entry : 0/0
  2699 ;;		On exit  : 0/0
  2700 ;;		Unchanged: 0/0
  2701 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2702 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2703 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2704 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2705 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2706 ;;Total ram usage:        0 bytes
  2707 ;; Hardware stack levels used:    1
  2708 ;; Hardware stack levels required when called:   12
  2709 ;; This function calls:
  2710 ;;		_Distribution
  2711 ;;		_ID
  2712 ;;		_Loading
  2713 ;; This function is called by:
  2714 ;;		_main
  2715 ;; This function uses a non-reentrant model
  2716 ;;
  2717                           
  2718                           	psect	text2
  2719  003E36                     __ptext2:
  2720                           	opt stack 0
  2721  003E36                     _sort:
  2722                           	opt stack 18
  2723                           
  2724                           ;sort.c: 56: if(machine_state == Sorting_state){
  2725                           
  2726                           ;incstack = 0
  2727  003E36  0100               	movlb	0	; () banked
  2728  003E38  05FC               	decf	_machine_state& (0+255),w,b
  2729  003E3A  B4D8               	btfsc	status,2,c
  2730                           
  2731                           ; BSR set to: 0
  2732                           ;sort.c: 57: Loading();
  2733  003E3C  EC70  F016         	call	_Loading	;wreg free
  2734                           
  2735                           ;sort.c: 58: }
  2736                           ;sort.c: 59: if(machine_state == Sorting_state){
  2737  003E40  0100               	movlb	0	; () banked
  2738  003E42  05FC               	decf	_machine_state& (0+255),w,b
  2739  003E44  B4D8               	btfsc	status,2,c
  2740                           
  2741                           ; BSR set to: 0
  2742                           ;sort.c: 60: ID();
  2743  003E46  ECDF  F014         	call	_ID	;wreg free
  2744                           
  2745                           ;sort.c: 61: }
  2746                           ;sort.c: 62: if(machine_state == Sorting_state){
  2747  003E4A  0100               	movlb	0	; () banked
  2748  003E4C  05FC               	decf	_machine_state& (0+255),w,b
  2749  003E4E  A4D8               	btfss	status,2,c
  2750  003E50  0012               	return	
  2751                           
  2752                           ; BSR set to: 0
  2753                           ;sort.c: 63: Distribution();
  2754  003E52  EC45  F014         	call	_Distribution	;wreg free
  2755  003E56  0012               	return	
  2756  003E58                     __end_of_sort:
  2757                           	opt stack 0
  2758                           tblptru	equ	0xFF8
  2759                           tblptrh	equ	0xFF7
  2760                           tblptrl	equ	0xFF6
  2761                           tablat	equ	0xFF5
  2762                           postinc0	equ	0xFEE
  2763                           wreg	equ	0xFE8
  2764                           postdec1	equ	0xFE5
  2765                           fsr1l	equ	0xFE1
  2766                           status	equ	0xFD8
  2767                           
  2768 ;; *************** function _Loading *****************
  2769 ;; Defined at:
  2770 ;;		line 67 in file "sort.c"
  2771 ;; Parameters:    Size  Location     Type
  2772 ;;		None
  2773 ;; Auto vars:     Size  Location     Type
  2774 ;;  addr            2   51[BANK0 ] unsigned short 
  2775 ;;  byte1           1   53[BANK0 ] unsigned char 
  2776 ;; Return value:  Size  Location     Type
  2777 ;;                  1    wreg      void 
  2778 ;; Registers used:
  2779 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2780 ;; Tracked objects:
  2781 ;;		On entry : 0/0
  2782 ;;		On exit  : 0/0
  2783 ;;		Unchanged: 0/0
  2784 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2785 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2786 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2787 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2788 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2789 ;;Total ram usage:        5 bytes
  2790 ;; Hardware stack levels used:    1
  2791 ;; Hardware stack levels required when called:   11
  2792 ;; This function calls:
  2793 ;;		_EEPROM_read
  2794 ;;		_EEPROM_write
  2795 ;;		_getIR
  2796 ;;		_initGlobalVars
  2797 ;;		_initServos
  2798 ;;		_initSortTimer
  2799 ;;		_lcdInst
  2800 ;; This function is called by:
  2801 ;;		_sort
  2802 ;; This function uses a non-reentrant model
  2803 ;;
  2804                           
  2805                           	psect	text3
  2806  002CE0                     __ptext3:
  2807                           	opt stack 0
  2808  002CE0                     _Loading:
  2809                           	opt stack 18
  2810                           
  2811                           ;sort.c: 68: if(first){
  2812                           
  2813                           ;incstack = 0
  2814  002CE0  0100               	movlb	0	; () banked
  2815  002CE2  51E4               	movf	_first& (0+255),w,b
  2816  002CE4  0100               	movlb	0	; () banked
  2817  002CE6  11E5               	iorwf	(_first+1)& (0+255),w,b
  2818  002CE8  B4D8               	btfsc	status,2,c
  2819  002CEA  D033               	goto	l5895
  2820                           
  2821                           ; BSR set to: 0
  2822                           ;sort.c: 69: initGlobalVars();
  2823  002CEC  EC9A  F01A         	call	_initGlobalVars	;wreg free
  2824                           
  2825                           ;sort.c: 70: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  2826  002CF0  0E01               	movlw	1
  2827  002CF2  EC92  F01F         	call	_lcdInst
  2828  002CF6  0E68               	movlw	104
  2829  002CF8  0100               	movlb	0	; () banked
  2830  002CFA  6FB1               	movwf	??_Loading& (0+255),b
  2831  002CFC  0EE4               	movlw	228
  2832  002CFE                     u6417:
  2833  002CFE  2EE8               	decfsz	wreg,f,c
  2834  002D00  D7FE               	bra	u6417
  2835  002D02  2FB1               	decfsz	??_Loading& (0+255),f,b
  2836  002D04  D7FC               	bra	u6417
  2837  002D06  F000               	nop	
  2838                           
  2839                           ;sort.c: 71: initSortTimer();
  2840  002D08  EC6D  F018         	call	_initSortTimer	;wreg free
  2841                           
  2842                           ;sort.c: 76: sel = EEPROM_read(0);
  2843  002D0C  0E00               	movlw	0
  2844  002D0E  0100               	movlb	0	; () banked
  2845  002D10  6F81               	movwf	(EEPROM_read@address+1)& (0+255),b
  2846  002D12  0E00               	movlw	0
  2847  002D14  6F80               	movwf	EEPROM_read@address& (0+255),b
  2848  002D16  EC4C  F01F         	call	_EEPROM_read	;wreg free
  2849  002D1A  0100               	movlb	0	; () banked
  2850  002D1C  6FFD               	movwf	_sel& (0+255),b
  2851                           
  2852                           ; BSR set to: 0
  2853                           ;sort.c: 77: unsigned short addr = 1 + 11 * sel;
  2854  002D1E  0100               	movlb	0	; () banked
  2855  002D20  51FD               	movf	_sel& (0+255),w,b
  2856  002D22  0D0B               	mullw	11
  2857  002D24  0E01               	movlw	1
  2858  002D26  24F3               	addwf	prodl,w,c
  2859  002D28  0100               	movlb	0	; () banked
  2860  002D2A  6FB3               	movwf	Loading@addr& (0+255),b
  2861  002D2C  0E00               	movlw	0
  2862  002D2E  20F4               	addwfc	prodh,w,c
  2863  002D30  0100               	movlb	0	; () banked
  2864  002D32  6FB4               	movwf	(Loading@addr+1)& (0+255),b
  2865                           
  2866                           ; BSR set to: 0
  2867                           ;sort.c: 78: unsigned char byte1 = 0b01111111;
  2868  002D34  0E7F               	movlw	127
  2869  002D36  0100               	movlb	0	; () banked
  2870  002D38  6FB5               	movwf	Loading@byte1& (0+255),b
  2871                           
  2872                           ; BSR set to: 0
  2873                           ;sort.c: 79: EEPROM_write(addr, byte1);
  2874  002D3A  C0B3  F0AB         	movff	Loading@addr,EEPROM_write@address
  2875  002D3E  C0B4  F0AC         	movff	Loading@addr+1,EEPROM_write@address+1
  2876  002D42  C0B5  F0AD         	movff	Loading@byte1,EEPROM_write@data
  2877  002D46  ECFC  F015         	call	_EEPROM_write	;wreg free
  2878                           
  2879                           ;sort.c: 82: LATAbits.LATA5 = 1;
  2880  002D4A  8A89               	bsf	3977,5,c	;volatile
  2881                           
  2882                           ;sort.c: 85: initServos();
  2883  002D4C  EC64  F01B         	call	_initServos	;wreg free
  2884                           
  2885                           ;sort.c: 86: }
  2886  002D50  0012               	return	
  2887  002D52                     l5895:
  2888                           
  2889                           ;sort.c: 87: else{
  2890                           ;sort.c: 90: if(!f_loadingNewCan){
  2891  002D52  0100               	movlb	0	; () banked
  2892  002D54  51E2               	movf	_f_loadingNewCan& (0+255),w,b
  2893  002D56  0100               	movlb	0	; () banked
  2894  002D58  11E3               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  2895  002D5A  A4D8               	btfss	status,2,c
  2896  002D5C  D017               	goto	l5911
  2897                           
  2898                           ; BSR set to: 0
  2899                           ;sort.c: 92: getIR();
  2900  002D5E  EC38  F01C         	call	_getIR	;wreg free
  2901                           
  2902                           ;sort.c: 94: if(!f_loadingNewCan){
  2903  002D62  0100               	movlb	0	; () banked
  2904  002D64  51E2               	movf	_f_loadingNewCan& (0+255),w,b
  2905  002D66  0100               	movlb	0	; () banked
  2906  002D68  11E3               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  2907  002D6A  B4D8               	btfsc	status,2,c
  2908  002D6C  0012               	return	
  2909                           
  2910                           ; BSR set to: 0
  2911                           ;sort.c: 98: else{
  2912                           ;sort.c: 99: count_total++;
  2913                           
  2914                           ; BSR set to: 0
  2915                           
  2916                           ; BSR set to: 0
  2917                           ;sort.c: 96: }
  2918                           
  2919                           ; BSR set to: 0
  2920                           ;sort.c: 95: return;
  2921  002D6E  0100               	movlb	0	; () banked
  2922  002D70  4BFE               	infsnz	_count_total& (0+255),f,b
  2923  002D72  2BFF               	incf	(_count_total+1)& (0+255),f,b
  2924                           
  2925                           ; BSR set to: 0
  2926                           ;sort.c: 100: if(count_total == 12){
  2927  002D74  0E0C               	movlw	12
  2928  002D76  0100               	movlb	0	; () banked
  2929  002D78  19FE               	xorwf	_count_total& (0+255),w,b
  2930  002D7A  0100               	movlb	0	; () banked
  2931  002D7C  11FF               	iorwf	(_count_total+1)& (0+255),w,b
  2932  002D7E  A4D8               	btfss	status,2,c
  2933  002D80  0012               	return	
  2934                           
  2935                           ; BSR set to: 0
  2936                           ;sort.c: 101: f_lastCan = 1;
  2937  002D82  0E00               	movlw	0
  2938  002D84  6E72               	movwf	_f_lastCan+1,c
  2939  002D86  0E01               	movlw	1
  2940  002D88  6E71               	movwf	_f_lastCan,c
  2941                           
  2942                           ; BSR set to: 0
  2943                           ;sort.c: 102: }
  2944                           ;sort.c: 103: }
  2945                           ;sort.c: 104: }
  2946                           
  2947                           ; BSR set to: 0
  2948  002D8A  0012               	return	
  2949  002D8C                     l5911:
  2950                           
  2951                           ; BSR set to: 0
  2952                           ;sort.c: 107: else if(f_ID_receive){
  2953  002D8C  506B               	movf	_f_ID_receive,w,c
  2954  002D8E  106C               	iorwf	_f_ID_receive+1,w,c
  2955  002D90  B4D8               	btfsc	status,2,c
  2956  002D92  0012               	return	
  2957                           
  2958                           ; BSR set to: 0
  2959                           ;sort.c: 108: f_loadingNewCan = 0;
  2960  002D94  0E00               	movlw	0
  2961  002D96  0100               	movlb	0	; () banked
  2962  002D98  6FE3               	movwf	(_f_loadingNewCan+1)& (0+255),b
  2963  002D9A  0E00               	movlw	0
  2964  002D9C  6FE2               	movwf	_f_loadingNewCan& (0+255),b
  2965                           
  2966                           ; BSR set to: 0
  2967                           ;sort.c: 109: LATAbits.LATA4 = 1;
  2968  002D9E  8889               	bsf	3977,4,c	;volatile
  2969                           
  2970                           ;sort.c: 110: f_can_coming_to_ID = 1;
  2971  002DA0  0E00               	movlw	0
  2972  002DA2  6E6E               	movwf	_f_can_coming_to_ID+1,c
  2973  002DA4  0E01               	movlw	1
  2974  002DA6  6E6D               	movwf	_f_can_coming_to_ID,c
  2975                           
  2976                           ; BSR set to: 0
  2977                           ;sort.c: 111: _delay((unsigned long)((100)*(32000000/4000.0)));
  2978  002DA8  0E05               	movlw	5
  2979  002DAA  0100               	movlb	0	; () banked
  2980  002DAC  6FB2               	movwf	(??_Loading+1)& (0+255),b
  2981  002DAE  0E0F               	movlw	15
  2982  002DB0  0100               	movlb	0	; () banked
  2983  002DB2  6FB1               	movwf	??_Loading& (0+255),b
  2984  002DB4  0EF1               	movlw	241
  2985  002DB6                     u6427:
  2986  002DB6  2EE8               	decfsz	wreg,f,c
  2987  002DB8  D7FE               	bra	u6427
  2988  002DBA  2FB1               	decfsz	??_Loading& (0+255),f,b
  2989  002DBC  D7FC               	bra	u6427
  2990  002DBE  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  2991  002DC0  D7FA               	bra	u6427
  2992                           
  2993                           ;sort.c: 112: LATAbits.LATA4 = 0;
  2994  002DC2  9889               	bcf	3977,4,c	;volatile
  2995  002DC4  0012               	return	
  2996  002DC6                     __end_of_Loading:
  2997                           	opt stack 0
  2998                           tblptru	equ	0xFF8
  2999                           tblptrh	equ	0xFF7
  3000                           tblptrl	equ	0xFF6
  3001                           tablat	equ	0xFF5
  3002                           prodh	equ	0xFF4
  3003                           prodl	equ	0xFF3
  3004                           postinc0	equ	0xFEE
  3005                           wreg	equ	0xFE8
  3006                           postdec1	equ	0xFE5
  3007                           fsr1l	equ	0xFE1
  3008                           status	equ	0xFD8
  3009                           
  3010 ;; *************** function _initSortTimer *****************
  3011 ;; Defined at:
  3012 ;;		line 225 in file "sort.c"
  3013 ;; Parameters:    Size  Location     Type
  3014 ;;		None
  3015 ;; Auto vars:     Size  Location     Type
  3016 ;;  i               2    8[BANK0 ] int 
  3017 ;; Return value:  Size  Location     Type
  3018 ;;                  1    wreg      void 
  3019 ;; Registers used:
  3020 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3021 ;; Tracked objects:
  3022 ;;		On entry : 0/0
  3023 ;;		On exit  : 0/0
  3024 ;;		Unchanged: 0/0
  3025 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3026 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3027 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3028 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3029 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3030 ;;Total ram usage:        5 bytes
  3031 ;; Hardware stack levels used:    1
  3032 ;; Hardware stack levels required when called:   10
  3033 ;; This function calls:
  3034 ;;		_getRTC
  3035 ;; This function is called by:
  3036 ;;		_Loading
  3037 ;; This function uses a non-reentrant model
  3038 ;;
  3039                           
  3040                           	psect	text4
  3041  0030DA                     __ptext4:
  3042                           	opt stack 0
  3043  0030DA                     _initSortTimer:
  3044                           	opt stack 18
  3045                           
  3046                           ;sort.c: 227: getRTC();
  3047                           
  3048                           ;incstack = 0
  3049  0030DA  ECA7  F019         	call	_getRTC	;wreg free
  3050                           
  3051                           ;sort.c: 228: for(int i = 0; i < 7; i++){
  3052  0030DE  0E00               	movlw	0
  3053  0030E0  0100               	movlb	0	; () banked
  3054  0030E2  6F89               	movwf	(initSortTimer@i+1)& (0+255),b
  3055  0030E4  0E00               	movlw	0
  3056  0030E6  6F88               	movwf	initSortTimer@i& (0+255),b
  3057  0030E8                     l5515:
  3058                           
  3059                           ; BSR set to: 0
  3060  0030E8  0100               	movlb	0	; () banked
  3061  0030EA  BF89               	btfsc	(initSortTimer@i+1)& (0+255),7,b
  3062  0030EC  D008               	goto	l5519
  3063  0030EE  0100               	movlb	0	; () banked
  3064  0030F0  5189               	movf	(initSortTimer@i+1)& (0+255),w,b
  3065  0030F2  E140               	bnz	l5525
  3066  0030F4  0E07               	movlw	7
  3067  0030F6  0100               	movlb	0	; () banked
  3068  0030F8  5D88               	subwf	initSortTimer@i& (0+255),w,b
  3069  0030FA  B0D8               	btfsc	status,0,c
  3070  0030FC  D03B               	goto	l5525
  3071  0030FE                     l5519:
  3072                           
  3073                           ; BSR set to: 0
  3074                           ;sort.c: 229: startTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  3075  0030FE  0E24               	movlw	low _time
  3076  003100  0100               	movlb	0	; () banked
  3077  003102  2588               	addwf	initSortTimer@i& (0+255),w,b
  3078  003104  6ED9               	movwf	fsr2l,c
  3079  003106  0E01               	movlw	high _time
  3080  003108  0100               	movlb	0	; () banked
  3081  00310A  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  3082  00310C  6EDA               	movwf	fsr2h,c
  3083  00310E  50DF               	movf	indf2,w,c
  3084  003110  0100               	movlb	0	; () banked
  3085  003112  6F85               	movwf	??_initSortTimer& (0+255),b
  3086  003114  0100               	movlb	0	; () banked
  3087  003116  3B85               	swapf	??_initSortTimer& (0+255),f,b
  3088  003118  0E0F               	movlw	15
  3089  00311A  1785               	andwf	??_initSortTimer& (0+255),f,b
  3090  00311C  0E0F               	movlw	15
  3091  00311E  0100               	movlb	0	; () banked
  3092  003120  1785               	andwf	??_initSortTimer& (0+255),f,b
  3093  003122  0100               	movlb	0	; () banked
  3094  003124  5185               	movf	??_initSortTimer& (0+255),w,b
  3095  003126  0D0A               	mullw	10
  3096  003128  0E24               	movlw	low _time
  3097  00312A  0100               	movlb	0	; () banked
  3098  00312C  2588               	addwf	initSortTimer@i& (0+255),w,b
  3099  00312E  6ED9               	movwf	fsr2l,c
  3100  003130  0E01               	movlw	high _time
  3101  003132  0100               	movlb	0	; () banked
  3102  003134  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  3103  003136  6EDA               	movwf	fsr2h,c
  3104  003138  50DF               	movf	indf2,w,c
  3105  00313A  0B0F               	andlw	15
  3106  00313C  0100               	movlb	0	; () banked
  3107  00313E  6F86               	movwf	(??_initSortTimer+1)& (0+255),b
  3108  003140  6B87               	clrf	(??_initSortTimer+2)& (0+255),b
  3109  003142  50F3               	movf	prodl,w,c
  3110  003144  0100               	movlb	0	; () banked
  3111  003146  2786               	addwf	(??_initSortTimer+1)& (0+255),f,b
  3112  003148  50F4               	movf	prodh,w,c
  3113  00314A  0100               	movlb	0	; () banked
  3114  00314C  2387               	addwfc	(??_initSortTimer+2)& (0+255),f,b
  3115  00314E  90D8               	bcf	status,0,c
  3116  003150  0100               	movlb	0	; () banked
  3117  003152  3588               	rlcf	initSortTimer@i& (0+255),w,b
  3118  003154  6ED9               	movwf	fsr2l,c
  3119  003156  0100               	movlb	0	; () banked
  3120  003158  3589               	rlcf	(initSortTimer@i+1)& (0+255),w,b
  3121  00315A  6EDA               	movwf	fsr2h,c
  3122  00315C  0E0E               	movlw	low _startTime
  3123  00315E  26D9               	addwf	fsr2l,f,c
  3124  003160  0E01               	movlw	high _startTime
  3125  003162  22DA               	addwfc	fsr2h,f,c
  3126  003164  C086  FFDE         	movff	??_initSortTimer+1,postinc2
  3127  003168  C087  FFDD         	movff	??_initSortTimer+2,postdec2
  3128                           
  3129                           ; BSR set to: 0
  3130  00316C  0100               	movlb	0	; () banked
  3131  00316E  4B88               	infsnz	initSortTimer@i& (0+255),f,b
  3132  003170  2B89               	incf	(initSortTimer@i+1)& (0+255),f,b
  3133  003172  D7BA               	goto	l5515
  3134  003174                     l5525:
  3135                           
  3136                           ; BSR set to: 0
  3137                           ;sort.c: 230: }
  3138                           ;sort.c: 232: T0CON = 0b00010111;
  3139  003174  0E17               	movlw	23
  3140  003176  6ED5               	movwf	4053,c	;volatile
  3141                           
  3142                           ;sort.c: 241: TMR0H = 0b10000101;
  3143  003178  0E85               	movlw	133
  3144  00317A  6ED7               	movwf	4055,c	;volatile
  3145                           
  3146                           ;sort.c: 242: TMR0L = 0b11101110;
  3147  00317C  0EEE               	movlw	238
  3148  00317E  6ED6               	movwf	4054,c	;volatile
  3149                           
  3150                           ; BSR set to: 0
  3151                           ;sort.c: 243: TMR0ON = 1;
  3152  003180  8ED5               	bsf	4053,7,c	;volatile
  3153                           
  3154                           ; BSR set to: 0
  3155  003182  0012               	return		;funcret
  3156  003184                     __end_of_initSortTimer:
  3157                           	opt stack 0
  3158                           tblptru	equ	0xFF8
  3159                           tblptrh	equ	0xFF7
  3160                           tblptrl	equ	0xFF6
  3161                           tablat	equ	0xFF5
  3162                           prodh	equ	0xFF4
  3163                           prodl	equ	0xFF3
  3164                           postinc0	equ	0xFEE
  3165                           wreg	equ	0xFE8
  3166                           postdec1	equ	0xFE5
  3167                           fsr1l	equ	0xFE1
  3168                           indf2	equ	0xFDF
  3169                           postinc2	equ	0xFDE
  3170                           postdec2	equ	0xFDD
  3171                           fsr2h	equ	0xFDA
  3172                           fsr2l	equ	0xFD9
  3173                           status	equ	0xFD8
  3174                           
  3175 ;; *************** function _initServos *****************
  3176 ;; Defined at:
  3177 ;;		line 245 in file "sort.c"
  3178 ;; Parameters:    Size  Location     Type
  3179 ;;		None
  3180 ;; Auto vars:     Size  Location     Type
  3181 ;;		None
  3182 ;; Return value:  Size  Location     Type
  3183 ;;                  1    wreg      void 
  3184 ;; Registers used:
  3185 ;;		wreg, status,2, status,0, cstack
  3186 ;; Tracked objects:
  3187 ;;		On entry : 0/0
  3188 ;;		On exit  : 0/0
  3189 ;;		Unchanged: 0/0
  3190 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3191 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3192 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3193 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3194 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3195 ;;Total ram usage:        1 bytes
  3196 ;; Hardware stack levels used:    1
  3197 ;; Hardware stack levels required when called:    8
  3198 ;; This function calls:
  3199 ;;		_updateServoPosition
  3200 ;; This function is called by:
  3201 ;;		_Loading
  3202 ;; This function uses a non-reentrant model
  3203 ;;
  3204                           
  3205                           	psect	text5
  3206  0036C8                     __ptext5:
  3207                           	opt stack 0
  3208  0036C8                     _initServos:
  3209                           	opt stack 20
  3210                           
  3211                           ;sort.c: 246: updateServoPosition(1500, 1);
  3212                           
  3213                           ; BSR set to: 0
  3214                           ;incstack = 0
  3215  0036C8  0E05               	movlw	5
  3216  0036CA  0100               	movlb	0	; () banked
  3217  0036CC  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  3218  0036CE  0EDC               	movlw	220
  3219  0036D0  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  3220  0036D2  0E00               	movlw	0
  3221  0036D4  0100               	movlb	0	; () banked
  3222  0036D6  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  3223  0036D8  0E01               	movlw	1
  3224  0036DA  6F82               	movwf	updateServoPosition@timer& (0+255),b
  3225  0036DC  EC26  F01A         	call	_updateServoPosition	;wreg free
  3226                           
  3227                           ;sort.c: 247: updateServoPosition(1000, 3);
  3228  0036E0  0E03               	movlw	3
  3229  0036E2  0100               	movlb	0	; () banked
  3230  0036E4  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  3231  0036E6  0EE8               	movlw	232
  3232  0036E8  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  3233  0036EA  0E00               	movlw	0
  3234  0036EC  0100               	movlb	0	; () banked
  3235  0036EE  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  3236  0036F0  0E03               	movlw	3
  3237  0036F2  6F82               	movwf	updateServoPosition@timer& (0+255),b
  3238  0036F4  EC26  F01A         	call	_updateServoPosition	;wreg free
  3239                           
  3240                           ;sort.c: 248: TMR1ON = 1;
  3241  0036F8  80CD               	bsf	4045,0,c	;volatile
  3242                           
  3243                           ;sort.c: 249: was_low_1 = 0;
  3244  0036FA  0E00               	movlw	0
  3245  0036FC  6E7A               	movwf	_was_low_1+1,c	;volatile
  3246  0036FE  0E00               	movlw	0
  3247  003700  6E79               	movwf	_was_low_1,c	;volatile
  3248                           
  3249                           ;sort.c: 250: _delay((unsigned long)((5)*(32000000/4000.0)));
  3250  003702  0E34               	movlw	52
  3251  003704  0100               	movlb	0	; () banked
  3252  003706  6F88               	movwf	??_initServos& (0+255),b
  3253  003708  0EF1               	movlw	241
  3254  00370A                     u6437:
  3255  00370A  2EE8               	decfsz	wreg,f,c
  3256  00370C  D7FE               	bra	u6437
  3257  00370E  2F88               	decfsz	??_initServos& (0+255),f,b
  3258  003710  D7FC               	bra	u6437
  3259  003712  D000               	nop2	
  3260                           
  3261                           ;sort.c: 251: TMR3ON = 1;
  3262  003714  80B1               	bsf	4017,0,c	;volatile
  3263                           
  3264                           ;sort.c: 252: was_low_3 = 0;
  3265  003716  0E00               	movlw	0
  3266  003718  6E7C               	movwf	_was_low_3+1,c	;volatile
  3267  00371A  0E00               	movlw	0
  3268  00371C  6E7B               	movwf	_was_low_3,c	;volatile
  3269                           
  3270                           ;sort.c: 253: LATCbits.LATC0 = 0;
  3271  00371E  908B               	bcf	3979,0,c	;volatile
  3272  003720  0012               	return		;funcret
  3273  003722                     __end_of_initServos:
  3274                           	opt stack 0
  3275                           tblptru	equ	0xFF8
  3276                           tblptrh	equ	0xFF7
  3277                           tblptrl	equ	0xFF6
  3278                           tablat	equ	0xFF5
  3279                           prodh	equ	0xFF4
  3280                           prodl	equ	0xFF3
  3281                           postinc0	equ	0xFEE
  3282                           wreg	equ	0xFE8
  3283                           postdec1	equ	0xFE5
  3284                           fsr1l	equ	0xFE1
  3285                           indf2	equ	0xFDF
  3286                           postinc2	equ	0xFDE
  3287                           postdec2	equ	0xFDD
  3288                           fsr2h	equ	0xFDA
  3289                           fsr2l	equ	0xFD9
  3290                           status	equ	0xFD8
  3291                           
  3292 ;; *************** function _initGlobalVars *****************
  3293 ;; Defined at:
  3294 ;;		line 206 in file "sort.c"
  3295 ;; Parameters:    Size  Location     Type
  3296 ;;		None
  3297 ;; Auto vars:     Size  Location     Type
  3298 ;;		None
  3299 ;; Return value:  Size  Location     Type
  3300 ;;                  1    wreg      void 
  3301 ;; Registers used:
  3302 ;;		wreg, status,2
  3303 ;; Tracked objects:
  3304 ;;		On entry : 0/0
  3305 ;;		On exit  : 0/0
  3306 ;;		Unchanged: 0/0
  3307 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3308 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3309 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3310 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3311 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3312 ;;Total ram usage:        0 bytes
  3313 ;; Hardware stack levels used:    1
  3314 ;; Hardware stack levels required when called:    7
  3315 ;; This function calls:
  3316 ;;		Nothing
  3317 ;; This function is called by:
  3318 ;;		_Loading
  3319 ;; This function uses a non-reentrant model
  3320 ;;
  3321                           
  3322                           	psect	text6
  3323  003534                     __ptext6:
  3324                           	opt stack 0
  3325  003534                     _initGlobalVars:
  3326                           	opt stack 21
  3327                           
  3328                           ;sort.c: 208: first = 0;
  3329                           
  3330                           ;incstack = 0
  3331  003534  0E00               	movlw	0
  3332  003536  0100               	movlb	0	; () banked
  3333  003538  6FE5               	movwf	(_first+1)& (0+255),b
  3334  00353A  0E00               	movlw	0
  3335  00353C  6FE4               	movwf	_first& (0+255),b
  3336                           
  3337                           ;sort.c: 211: f_loadingNewCan = 0;
  3338  00353E  0E00               	movlw	0
  3339  003540  0100               	movlb	0	; () banked
  3340  003542  6FE3               	movwf	(_f_loadingNewCan+1)& (0+255),b
  3341  003544  0E00               	movlw	0
  3342  003546  6FE2               	movwf	_f_loadingNewCan& (0+255),b
  3343                           
  3344                           ;sort.c: 212: f_lastCan = 0;
  3345  003548  0E00               	movlw	0
  3346  00354A  6E72               	movwf	_f_lastCan+1,c
  3347  00354C  0E00               	movlw	0
  3348  00354E  6E71               	movwf	_f_lastCan,c
  3349                           
  3350                           ;sort.c: 213: f_ID_receive = 1;
  3351  003550  0E00               	movlw	0
  3352  003552  6E6C               	movwf	_f_ID_receive+1,c
  3353  003554  0E01               	movlw	1
  3354  003556  6E6B               	movwf	_f_ID_receive,c
  3355                           
  3356                           ;sort.c: 214: f_can_coming_to_ID = 0;
  3357  003558  0E00               	movlw	0
  3358  00355A  6E6E               	movwf	_f_can_coming_to_ID+1,c
  3359  00355C  0E00               	movlw	0
  3360  00355E  6E6D               	movwf	_f_can_coming_to_ID,c
  3361                           
  3362                           ;sort.c: 215: f_can_coming_to_distribution = 0;
  3363  003560  0E00               	movlw	0
  3364  003562  6E70               	movwf	_f_can_coming_to_distribution+1,c
  3365  003564  0E00               	movlw	0
  3366  003566  6E6F               	movwf	_f_can_coming_to_distribution,c
  3367                           
  3368                           ;sort.c: 216: f_can_distributed = 0;
  3369  003568  0E00               	movlw	0
  3370  00356A  0101               	movlb	1	; () banked
  3371  00356C  6F2C               	movwf	(_f_can_distributed+1)& (0+255),b
  3372  00356E  0E00               	movlw	0
  3373  003570  6F2B               	movwf	_f_can_distributed& (0+255),b
  3374                           
  3375                           ;sort.c: 219: count_total = 0;
  3376  003572  0E00               	movlw	0
  3377  003574  0100               	movlb	0	; () banked
  3378  003576  6FFF               	movwf	(_count_total+1)& (0+255),b
  3379  003578  0E00               	movlw	0
  3380  00357A  6FFE               	movwf	_count_total& (0+255),b
  3381                           
  3382                           ;sort.c: 220: count_pop_no_tab = 0;
  3383  00357C  0E00               	movlw	0
  3384  00357E  6E62               	movwf	_count_pop_no_tab+1,c
  3385  003580  0E00               	movlw	0
  3386  003582  6E61               	movwf	_count_pop_no_tab,c
  3387                           
  3388                           ;sort.c: 221: count_pop_w_tab = 0;
  3389  003584  0E00               	movlw	0
  3390  003586  6E64               	movwf	_count_pop_w_tab+1,c
  3391  003588  0E00               	movlw	0
  3392  00358A  6E63               	movwf	_count_pop_w_tab,c
  3393                           
  3394                           ;sort.c: 222: count_can_w_lab = 0;
  3395  00358C  0E00               	movlw	0
  3396  00358E  6E60               	movwf	_count_can_w_lab+1,c
  3397  003590  0E00               	movlw	0
  3398  003592  6E5F               	movwf	_count_can_w_lab,c
  3399                           
  3400                           ;sort.c: 223: count_can_no_lab = 0;
  3401  003594  0E00               	movlw	0
  3402  003596  6E5E               	movwf	_count_can_no_lab+1,c
  3403  003598  0E00               	movlw	0
  3404  00359A  6E5D               	movwf	_count_can_no_lab,c
  3405                           
  3406                           ; BSR set to: 0
  3407  00359C  0012               	return		;funcret
  3408  00359E                     __end_of_initGlobalVars:
  3409                           	opt stack 0
  3410                           tblptru	equ	0xFF8
  3411                           tblptrh	equ	0xFF7
  3412                           tblptrl	equ	0xFF6
  3413                           tablat	equ	0xFF5
  3414                           prodh	equ	0xFF4
  3415                           prodl	equ	0xFF3
  3416                           postinc0	equ	0xFEE
  3417                           wreg	equ	0xFE8
  3418                           postdec1	equ	0xFE5
  3419                           fsr1l	equ	0xFE1
  3420                           indf2	equ	0xFDF
  3421                           postinc2	equ	0xFDE
  3422                           postdec2	equ	0xFDD
  3423                           fsr2h	equ	0xFDA
  3424                           fsr2l	equ	0xFD9
  3425                           status	equ	0xFD8
  3426                           
  3427 ;; *************** function _getIR *****************
  3428 ;; Defined at:
  3429 ;;		line 282 in file "sort.c"
  3430 ;; Parameters:    Size  Location     Type
  3431 ;;		None
  3432 ;; Auto vars:     Size  Location     Type
  3433 ;;		None
  3434 ;; Return value:  Size  Location     Type
  3435 ;;                  1    wreg      void 
  3436 ;; Registers used:
  3437 ;;		wreg, status,2, status,0, cstack
  3438 ;; Tracked objects:
  3439 ;;		On entry : 0/0
  3440 ;;		On exit  : 0/0
  3441 ;;		Unchanged: 0/0
  3442 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3443 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3444 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3445 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3446 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3447 ;;Total ram usage:        2 bytes
  3448 ;; Hardware stack levels used:    1
  3449 ;; Hardware stack levels required when called:    9
  3450 ;; This function calls:
  3451 ;;		_readIR
  3452 ;; This function is called by:
  3453 ;;		_Loading
  3454 ;; This function uses a non-reentrant model
  3455 ;;
  3456                           
  3457                           	psect	text7
  3458  003870                     __ptext7:
  3459                           	opt stack 0
  3460  003870                     _getIR:
  3461                           	opt stack 19
  3462                           
  3463                           ;sort.c: 283: readIR();
  3464                           
  3465                           ; BSR set to: 0
  3466                           ;incstack = 0
  3467  003870  EC85  F01C         	call	_readIR	;wreg free
  3468                           
  3469                           ;sort.c: 284: if(IR_signal==1){
  3470  003874  0100               	movlb	0	; () banked
  3471  003876  05DA               	decf	_IR_signal& (0+255),w,b
  3472  003878  0100               	movlb	0	; () banked
  3473  00387A  11DB               	iorwf	(_IR_signal+1)& (0+255),w,b
  3474  00387C  A4D8               	btfss	status,2,c
  3475  00387E  0012               	return	
  3476                           
  3477                           ; BSR set to: 0
  3478                           ;sort.c: 285: _delay((unsigned long)((100)*(32000000/4000.0)));
  3479  003880  0E05               	movlw	5
  3480  003882  0100               	movlb	0	; () banked
  3481  003884  6F87               	movwf	(??_getIR+1)& (0+255),b
  3482  003886  0E0F               	movlw	15
  3483  003888  0100               	movlb	0	; () banked
  3484  00388A  6F86               	movwf	??_getIR& (0+255),b
  3485  00388C  0EF1               	movlw	241
  3486  00388E                     u6447:
  3487  00388E  2EE8               	decfsz	wreg,f,c
  3488  003890  D7FE               	bra	u6447
  3489  003892  2F86               	decfsz	??_getIR& (0+255),f,b
  3490  003894  D7FC               	bra	u6447
  3491  003896  2F87               	decfsz	(??_getIR+1)& (0+255),f,b
  3492  003898  D7FA               	bra	u6447
  3493                           
  3494                           ;sort.c: 286: if(IR_signal==1){
  3495  00389A  0100               	movlb	0	; () banked
  3496  00389C  05DA               	decf	_IR_signal& (0+255),w,b
  3497  00389E  0100               	movlb	0	; () banked
  3498  0038A0  11DB               	iorwf	(_IR_signal+1)& (0+255),w,b
  3499  0038A2  A4D8               	btfss	status,2,c
  3500  0038A4  D006               	goto	l5605
  3501                           
  3502                           ; BSR set to: 0
  3503                           ;sort.c: 287: f_loadingNewCan = 1;
  3504  0038A6  0E00               	movlw	0
  3505  0038A8  0100               	movlb	0	; () banked
  3506  0038AA  6FE3               	movwf	(_f_loadingNewCan+1)& (0+255),b
  3507  0038AC  0E01               	movlw	1
  3508  0038AE  6FE2               	movwf	_f_loadingNewCan& (0+255),b
  3509                           
  3510                           ;sort.c: 288: }
  3511  0038B0  0012               	return	
  3512  0038B2                     l5605:
  3513                           
  3514                           ; BSR set to: 0
  3515                           ;sort.c: 289: else{
  3516                           ;sort.c: 290: f_loadingNewCan = 0;
  3517  0038B2  0E00               	movlw	0
  3518  0038B4  0100               	movlb	0	; () banked
  3519  0038B6  6FE3               	movwf	(_f_loadingNewCan+1)& (0+255),b
  3520  0038B8  0E00               	movlw	0
  3521  0038BA  6FE2               	movwf	_f_loadingNewCan& (0+255),b
  3522                           
  3523                           ; BSR set to: 0
  3524  0038BC  0012               	return	
  3525  0038BE                     __end_of_getIR:
  3526                           	opt stack 0
  3527                           tblptru	equ	0xFF8
  3528                           tblptrh	equ	0xFF7
  3529                           tblptrl	equ	0xFF6
  3530                           tablat	equ	0xFF5
  3531                           prodh	equ	0xFF4
  3532                           prodl	equ	0xFF3
  3533                           postinc0	equ	0xFEE
  3534                           wreg	equ	0xFE8
  3535                           postdec1	equ	0xFE5
  3536                           fsr1l	equ	0xFE1
  3537                           indf2	equ	0xFDF
  3538                           postinc2	equ	0xFDE
  3539                           postdec2	equ	0xFDD
  3540                           fsr2h	equ	0xFDA
  3541                           fsr2l	equ	0xFD9
  3542                           status	equ	0xFD8
  3543                           
  3544 ;; *************** function _ID *****************
  3545 ;; Defined at:
  3546 ;;		line 116 in file "sort.c"
  3547 ;; Parameters:    Size  Location     Type
  3548 ;;		None
  3549 ;; Auto vars:     Size  Location     Type
  3550 ;;  sensor_outpu    6    8[BANK0 ] int [3]
  3551 ;; Return value:  Size  Location     Type
  3552 ;;                  1    wreg      void 
  3553 ;; Registers used:
  3554 ;;		wreg, status,2, status,0, cstack
  3555 ;; Tracked objects:
  3556 ;;		On entry : 0/0
  3557 ;;		On exit  : 0/0
  3558 ;;		Unchanged: 0/0
  3559 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3560 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3561 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3562 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3563 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3564 ;;Total ram usage:        8 bytes
  3565 ;; Hardware stack levels used:    1
  3566 ;; Hardware stack levels required when called:    9
  3567 ;; This function calls:
  3568 ;;		_readMAG
  3569 ;; This function is called by:
  3570 ;;		_sort
  3571 ;; This function uses a non-reentrant model
  3572 ;;
  3573                           
  3574                           	psect	text8
  3575  0029BE                     __ptext8:
  3576                           	opt stack 0
  3577  0029BE                     _ID:
  3578                           	opt stack 20
  3579                           
  3580                           ;sort.c: 117: if(f_can_coming_to_ID){
  3581                           
  3582                           ; BSR set to: 0
  3583                           ;incstack = 0
  3584  0029BE  506D               	movf	_f_can_coming_to_ID,w,c
  3585  0029C0  106E               	iorwf	_f_can_coming_to_ID+1,w,c
  3586  0029C2  B4D8               	btfsc	status,2,c
  3587  0029C4  0012               	return	
  3588                           
  3589                           ;sort.c: 119: _delay((unsigned long)((500)*(32000000/4000.0)));
  3590  0029C6  0E15               	movlw	21
  3591  0029C8  0100               	movlb	0	; () banked
  3592  0029CA  6F87               	movwf	(??_ID+1)& (0+255),b
  3593  0029CC  0E4B               	movlw	75
  3594  0029CE  0100               	movlb	0	; () banked
  3595  0029D0  6F86               	movwf	??_ID& (0+255),b
  3596  0029D2  0EBE               	movlw	190
  3597  0029D4                     u6457:
  3598  0029D4  2EE8               	decfsz	wreg,f,c
  3599  0029D6  D7FE               	bra	u6457
  3600  0029D8  2F86               	decfsz	??_ID& (0+255),f,b
  3601  0029DA  D7FC               	bra	u6457
  3602  0029DC  2F87               	decfsz	(??_ID+1)& (0+255),f,b
  3603  0029DE  D7FA               	bra	u6457
  3604  0029E0  F000               	nop	
  3605                           
  3606                           ;sort.c: 124: int sensor_outputs[3];
  3607                           ;sort.c: 128: sensor_outputs[0] = PORTAbits.RA2;
  3608  0029E2  A480               	btfss	3968,2,c	;volatile
  3609  0029E4  D004               	goto	u4520
  3610  0029E6  0100               	movlb	0	; () banked
  3611  0029E8  6B86               	clrf	??_ID& (0+255),b
  3612  0029EA  2B86               	incf	??_ID& (0+255),f,b
  3613  0029EC  D002               	goto	u4528
  3614  0029EE                     u4520:
  3615  0029EE  0100               	movlb	0	; () banked
  3616  0029F0  6B86               	clrf	??_ID& (0+255),b
  3617  0029F2                     u4528:
  3618  0029F2  0100               	movlb	0	; () banked
  3619  0029F4  5186               	movf	??_ID& (0+255),w,b
  3620  0029F6  0100               	movlb	0	; () banked
  3621  0029F8  6F88               	movwf	ID@sensor_outputs& (0+255),b
  3622  0029FA  6B89               	clrf	(ID@sensor_outputs+1)& (0+255),b
  3623                           
  3624                           ; BSR set to: 0
  3625                           ;sort.c: 130: if(!sensor_outputs[0]){
  3626  0029FC  0100               	movlb	0	; () banked
  3627  0029FE  5188               	movf	ID@sensor_outputs& (0+255),w,b
  3628  002A00  0100               	movlb	0	; () banked
  3629  002A02  1189               	iorwf	(ID@sensor_outputs+1)& (0+255),w,b
  3630  002A04  A4D8               	btfss	status,2,c
  3631  002A06  D028               	goto	l5943
  3632                           
  3633                           ; BSR set to: 0
  3634                           ;sort.c: 131: readMAG();
  3635  002A08  EC5F  F01C         	call	_readMAG	;wreg free
  3636                           
  3637                           ;sort.c: 132: sensor_outputs[1] = MAG_signal;
  3638  002A0C  C0DC  F08A         	movff	_MAG_signal,ID@sensor_outputs+2
  3639  002A10  C0DD  F08B         	movff	_MAG_signal+1,ID@sensor_outputs+3
  3640                           
  3641                           ;sort.c: 133: if(!sensor_outputs[1]){
  3642  002A14  0100               	movlb	0	; () banked
  3643  002A16  518A               	movf	(ID@sensor_outputs+2)& (0+255),w,b
  3644  002A18  0100               	movlb	0	; () banked
  3645  002A1A  118B               	iorwf	(ID@sensor_outputs+3)& (0+255),w,b
  3646  002A1C  A4D8               	btfss	status,2,c
  3647  002A1E  D01C               	goto	l5943
  3648                           
  3649                           ; BSR set to: 0
  3650                           ;sort.c: 134: LATAbits.LATA3 = 1;
  3651  002A20  8689               	bsf	3977,3,c	;volatile
  3652                           
  3653                           ; BSR set to: 0
  3654                           ;sort.c: 136: _delay((unsigned long)((100)*(32000000/4000.0)));
  3655  002A22  0E05               	movlw	5
  3656  002A24  0100               	movlb	0	; () banked
  3657  002A26  6F87               	movwf	(??_ID+1)& (0+255),b
  3658  002A28  0E0F               	movlw	15
  3659  002A2A  0100               	movlb	0	; () banked
  3660  002A2C  6F86               	movwf	??_ID& (0+255),b
  3661  002A2E  0EF1               	movlw	241
  3662  002A30                     u6467:
  3663  002A30  2EE8               	decfsz	wreg,f,c
  3664  002A32  D7FE               	bra	u6467
  3665  002A34  2F86               	decfsz	??_ID& (0+255),f,b
  3666  002A36  D7FC               	bra	u6467
  3667  002A38  2F87               	decfsz	(??_ID+1)& (0+255),f,b
  3668  002A3A  D7FA               	bra	u6467
  3669                           
  3670                           ;sort.c: 137: sensor_outputs[2] = PORTAbits.RA2;
  3671  002A3C  A480               	btfss	3968,2,c	;volatile
  3672  002A3E  D004               	goto	u4550
  3673  002A40  0100               	movlb	0	; () banked
  3674  002A42  6B86               	clrf	??_ID& (0+255),b
  3675  002A44  2B86               	incf	??_ID& (0+255),f,b
  3676  002A46  D002               	goto	u4558
  3677  002A48                     u4550:
  3678  002A48  0100               	movlb	0	; () banked
  3679  002A4A  6B86               	clrf	??_ID& (0+255),b
  3680  002A4C                     u4558:
  3681  002A4C  0100               	movlb	0	; () banked
  3682  002A4E  5186               	movf	??_ID& (0+255),w,b
  3683  002A50  0100               	movlb	0	; () banked
  3684  002A52  6F8C               	movwf	(ID@sensor_outputs+4)& (0+255),b
  3685  002A54  6B8D               	clrf	(ID@sensor_outputs+5)& (0+255),b
  3686                           
  3687                           ; BSR set to: 0
  3688                           ;sort.c: 138: LATAbits.LATA3 = 0;
  3689  002A56  9689               	bcf	3977,3,c	;volatile
  3690  002A58                     l5943:
  3691                           
  3692                           ; BSR set to: 0
  3693                           ;sort.c: 139: }
  3694                           ;sort.c: 140: }
  3695                           ;sort.c: 143: if(!sensor_outputs[0]){
  3696  002A58  0100               	movlb	0	; () banked
  3697  002A5A  5188               	movf	ID@sensor_outputs& (0+255),w,b
  3698  002A5C  0100               	movlb	0	; () banked
  3699  002A5E  1189               	iorwf	(ID@sensor_outputs+1)& (0+255),w,b
  3700  002A60  A4D8               	btfss	status,2,c
  3701  002A62  D01E               	goto	l5961
  3702                           
  3703                           ; BSR set to: 0
  3704                           ;sort.c: 144: if(!sensor_outputs[1]){
  3705  002A64  0100               	movlb	0	; () banked
  3706  002A66  518A               	movf	(ID@sensor_outputs+2)& (0+255),w,b
  3707  002A68  0100               	movlb	0	; () banked
  3708  002A6A  118B               	iorwf	(ID@sensor_outputs+3)& (0+255),w,b
  3709  002A6C  A4D8               	btfss	status,2,c
  3710  002A6E  D012               	goto	l5957
  3711                           
  3712                           ; BSR set to: 0
  3713                           ;sort.c: 145: if(!sensor_outputs[2]){
  3714  002A70  0100               	movlb	0	; () banked
  3715  002A72  518C               	movf	(ID@sensor_outputs+4)& (0+255),w,b
  3716  002A74  0100               	movlb	0	; () banked
  3717  002A76  118D               	iorwf	(ID@sensor_outputs+5)& (0+255),w,b
  3718  002A78  A4D8               	btfss	status,2,c
  3719  002A7A  D006               	goto	l5953
  3720                           
  3721                           ; BSR set to: 0
  3722                           ;sort.c: 146: count_pop_no_tab++;
  3723  002A7C  4A61               	infsnz	_count_pop_no_tab,f,c
  3724  002A7E  2A62               	incf	_count_pop_no_tab+1,f,c
  3725                           
  3726                           ; BSR set to: 0
  3727                           ;sort.c: 147: cur_can = 0;
  3728  002A80  0E00               	movlw	0
  3729  002A82  6E66               	movwf	_cur_can+1,c
  3730  002A84  0E00               	movlw	0
  3731  002A86  D011               	goto	L3
  3732  002A88                     l5953:
  3733                           
  3734                           ; BSR set to: 0
  3735                           ;sort.c: 149: else{
  3736                           ;sort.c: 150: count_pop_w_tab++;
  3737  002A88  4A63               	infsnz	_count_pop_w_tab,f,c
  3738  002A8A  2A64               	incf	_count_pop_w_tab+1,f,c
  3739                           
  3740                           ; BSR set to: 0
  3741                           ;sort.c: 151: cur_can = 1;
  3742  002A8C  0E00               	movlw	0
  3743  002A8E  6E66               	movwf	_cur_can+1,c
  3744  002A90  0E01               	movlw	1
  3745  002A92  D00B               	goto	L3
  3746  002A94                     l5957:
  3747                           
  3748                           ; BSR set to: 0
  3749                           ;sort.c: 154: else{
  3750                           ;sort.c: 155: count_can_w_lab++;
  3751  002A94  4A5F               	infsnz	_count_can_w_lab,f,c
  3752  002A96  2A60               	incf	_count_can_w_lab+1,f,c
  3753                           
  3754                           ; BSR set to: 0
  3755                           ;sort.c: 156: cur_can = 2;
  3756  002A98  0E00               	movlw	0
  3757  002A9A  6E66               	movwf	_cur_can+1,c
  3758  002A9C  0E02               	movlw	2
  3759  002A9E  D005               	goto	L3
  3760  002AA0                     l5961:
  3761                           
  3762                           ; BSR set to: 0
  3763                           ;sort.c: 159: else{
  3764                           ;sort.c: 160: count_can_no_lab++;
  3765  002AA0  4A5D               	infsnz	_count_can_no_lab,f,c
  3766  002AA2  2A5E               	incf	_count_can_no_lab+1,f,c
  3767                           
  3768                           ; BSR set to: 0
  3769                           ;sort.c: 161: cur_can = 3;
  3770  002AA4  0E00               	movlw	0
  3771  002AA6  6E66               	movwf	_cur_can+1,c
  3772  002AA8  0E03               	movlw	3
  3773  002AAA                     L3:
  3774  002AAA  6E65               	movwf	_cur_can,c
  3775                           
  3776                           ; BSR set to: 0
  3777                           ;sort.c: 162: }
  3778                           ;sort.c: 164: LATCbits.LATC0 = 1;
  3779                           
  3780                           ; BSR set to: 0
  3781  002AAC  808B               	bsf	3979,0,c	;volatile
  3782                           
  3783                           ; BSR set to: 0
  3784                           ;sort.c: 165: f_can_coming_to_distribution = 1;
  3785  002AAE  0E00               	movlw	0
  3786  002AB0  6E70               	movwf	_f_can_coming_to_distribution+1,c
  3787  002AB2  0E01               	movlw	1
  3788  002AB4  6E6F               	movwf	_f_can_coming_to_distribution,c
  3789                           
  3790                           ; BSR set to: 0
  3791                           ;sort.c: 166: _delay((unsigned long)((500)*(32000000/4000.0)));
  3792  002AB6  0E15               	movlw	21
  3793  002AB8  0100               	movlb	0	; () banked
  3794  002ABA  6F87               	movwf	(??_ID+1)& (0+255),b
  3795  002ABC  0E4B               	movlw	75
  3796  002ABE  0100               	movlb	0	; () banked
  3797  002AC0  6F86               	movwf	??_ID& (0+255),b
  3798  002AC2  0EBE               	movlw	190
  3799  002AC4                     u6477:
  3800  002AC4  2EE8               	decfsz	wreg,f,c
  3801  002AC6  D7FE               	bra	u6477
  3802  002AC8  2F86               	decfsz	??_ID& (0+255),f,b
  3803  002ACA  D7FC               	bra	u6477
  3804  002ACC  2F87               	decfsz	(??_ID+1)& (0+255),f,b
  3805  002ACE  D7FA               	bra	u6477
  3806  002AD0  F000               	nop	
  3807                           
  3808                           ;sort.c: 167: LATCbits.LATC0 = 0;
  3809  002AD2  908B               	bcf	3979,0,c	;volatile
  3810                           
  3811                           ;sort.c: 169: f_can_coming_to_ID = 0;
  3812  002AD4  0E00               	movlw	0
  3813  002AD6  6E6E               	movwf	_f_can_coming_to_ID+1,c
  3814  002AD8  0E00               	movlw	0
  3815  002ADA  6E6D               	movwf	_f_can_coming_to_ID,c
  3816  002ADC  0012               	return	
  3817  002ADE                     __end_of_ID:
  3818                           	opt stack 0
  3819                           tblptru	equ	0xFF8
  3820                           tblptrh	equ	0xFF7
  3821                           tblptrl	equ	0xFF6
  3822                           tablat	equ	0xFF5
  3823                           prodh	equ	0xFF4
  3824                           prodl	equ	0xFF3
  3825                           postinc0	equ	0xFEE
  3826                           wreg	equ	0xFE8
  3827                           postdec1	equ	0xFE5
  3828                           fsr1l	equ	0xFE1
  3829                           indf2	equ	0xFDF
  3830                           postinc2	equ	0xFDE
  3831                           postdec2	equ	0xFDD
  3832                           fsr2h	equ	0xFDA
  3833                           fsr2l	equ	0xFD9
  3834                           status	equ	0xFD8
  3835                           
  3836 ;; *************** function _Distribution *****************
  3837 ;; Defined at:
  3838 ;;		line 172 in file "sort.c"
  3839 ;; Parameters:    Size  Location     Type
  3840 ;;		None
  3841 ;; Auto vars:     Size  Location     Type
  3842 ;;		None
  3843 ;; Return value:  Size  Location     Type
  3844 ;;                  1    wreg      void 
  3845 ;; Registers used:
  3846 ;;		wreg, status,2, status,0, cstack
  3847 ;; Tracked objects:
  3848 ;;		On entry : 0/0
  3849 ;;		On exit  : 0/0
  3850 ;;		Unchanged: 0/0
  3851 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3852 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3853 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3854 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3855 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3856 ;;Total ram usage:        2 bytes
  3857 ;; Hardware stack levels used:    1
  3858 ;; Hardware stack levels required when called:    8
  3859 ;; This function calls:
  3860 ;;		_updateServoPosition
  3861 ;; This function is called by:
  3862 ;;		_sort
  3863 ;; This function uses a non-reentrant model
  3864 ;;
  3865                           
  3866                           	psect	text9
  3867  00288A                     __ptext9:
  3868                           	opt stack 0
  3869  00288A                     _Distribution:
  3870                           	opt stack 21
  3871                           
  3872                           ;sort.c: 173: if(f_can_coming_to_distribution){
  3873                           
  3874                           ;incstack = 0
  3875  00288A  506F               	movf	_f_can_coming_to_distribution,w,c
  3876  00288C  1070               	iorwf	_f_can_coming_to_distribution+1,w,c
  3877  00288E  B4D8               	btfsc	status,2,c
  3878  002890  0012               	return	
  3879  002892  D034               	goto	l5989
  3880  002894                     l5979:
  3881                           
  3882                           ;sort.c: 178: updateServoPosition(1000, 1);
  3883  002894  0E03               	movlw	3
  3884  002896  0100               	movlb	0	; () banked
  3885  002898  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  3886  00289A  0EE8               	movlw	232
  3887  00289C  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  3888  00289E  0E00               	movlw	0
  3889  0028A0  0100               	movlb	0	; () banked
  3890  0028A2  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  3891  0028A4  0E01               	movlw	1
  3892  0028A6  6F82               	movwf	updateServoPosition@timer& (0+255),b
  3893  0028A8  EC26  F01A         	call	_updateServoPosition	;wreg free
  3894                           
  3895                           ;sort.c: 179: break;
  3896  0028AC  D03E               	goto	l5991
  3897  0028AE                     l5981:
  3898                           
  3899                           ;sort.c: 181: updateServoPosition(1333, 1);
  3900  0028AE  0E05               	movlw	5
  3901  0028B0  0100               	movlb	0	; () banked
  3902  0028B2  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  3903  0028B4  0E35               	movlw	53
  3904  0028B6  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  3905  0028B8  0E00               	movlw	0
  3906  0028BA  0100               	movlb	0	; () banked
  3907  0028BC  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  3908  0028BE  0E01               	movlw	1
  3909  0028C0  6F82               	movwf	updateServoPosition@timer& (0+255),b
  3910  0028C2  EC26  F01A         	call	_updateServoPosition	;wreg free
  3911                           
  3912                           ;sort.c: 182: break;
  3913  0028C6  D031               	goto	l5991
  3914  0028C8                     l5983:
  3915                           
  3916                           ;sort.c: 184: updateServoPosition(1666, 1);
  3917  0028C8  0E06               	movlw	6
  3918  0028CA  0100               	movlb	0	; () banked
  3919  0028CC  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  3920  0028CE  0E82               	movlw	130
  3921  0028D0  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  3922  0028D2  0E00               	movlw	0
  3923  0028D4  0100               	movlb	0	; () banked
  3924  0028D6  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  3925  0028D8  0E01               	movlw	1
  3926  0028DA  6F82               	movwf	updateServoPosition@timer& (0+255),b
  3927  0028DC  EC26  F01A         	call	_updateServoPosition	;wreg free
  3928                           
  3929                           ;sort.c: 185: break;
  3930  0028E0  D024               	goto	l5991
  3931  0028E2                     l5985:
  3932                           
  3933                           ;sort.c: 187: updateServoPosition(2000, 1);
  3934  0028E2  0E07               	movlw	7
  3935  0028E4  0100               	movlb	0	; () banked
  3936  0028E6  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  3937  0028E8  0ED0               	movlw	208
  3938  0028EA  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  3939  0028EC  0E00               	movlw	0
  3940  0028EE  0100               	movlb	0	; () banked
  3941  0028F0  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  3942  0028F2  0E01               	movlw	1
  3943  0028F4  6F82               	movwf	updateServoPosition@timer& (0+255),b
  3944  0028F6  EC26  F01A         	call	_updateServoPosition	;wreg free
  3945                           
  3946                           ;sort.c: 191: }
  3947                           
  3948                           ;sort.c: 190: break;
  3949                           
  3950                           ;sort.c: 189: default:
  3951                           
  3952                           ;sort.c: 188: break;
  3953  0028FA  D017               	goto	l5991
  3954  0028FC                     l5989:
  3955  0028FC  C065  F088         	movff	_cur_can,??_Distribution
  3956  002900  C066  F089         	movff	_cur_can+1,??_Distribution+1
  3957                           
  3958                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3959                           ; Switch size 1, requested type "space"
  3960                           ; Number of cases is 1, Range of values is 0 to 0
  3961                           ; switch strategies available:
  3962                           ; Name         Instructions Cycles
  3963                           ; simple_byte            4     3 (average)
  3964                           ;	Chosen strategy is simple_byte
  3965  002904  0100               	movlb	0	; () banked
  3966  002906  5189               	movf	(??_Distribution+1)& (0+255),w,b
  3967  002908  0A00               	xorlw	0	; case 0
  3968  00290A  A4D8               	btfss	status,2,c
  3969  00290C  D00E               	goto	l5991
  3970                           
  3971                           ; BSR set to: 0
  3972                           ; Switch size 1, requested type "space"
  3973                           ; Number of cases is 4, Range of values is 0 to 3
  3974                           ; switch strategies available:
  3975                           ; Name         Instructions Cycles
  3976                           ; simple_byte           13     7 (average)
  3977                           ;	Chosen strategy is simple_byte
  3978  00290E  0100               	movlb	0	; () banked
  3979  002910  5188               	movf	??_Distribution& (0+255),w,b
  3980  002912  0A00               	xorlw	0	; case 0
  3981  002914  B4D8               	btfsc	status,2,c
  3982  002916  D7BE               	goto	l5979
  3983  002918  0A01               	xorlw	1	; case 1
  3984  00291A  B4D8               	btfsc	status,2,c
  3985  00291C  D7C8               	goto	l5981
  3986  00291E  0A03               	xorlw	3	; case 2
  3987  002920  B4D8               	btfsc	status,2,c
  3988  002922  D7D2               	goto	l5983
  3989  002924  0A01               	xorlw	1	; case 3
  3990  002926  B4D8               	btfsc	status,2,c
  3991  002928  D7DC               	goto	l5985
  3992  00292A                     l5991:
  3993                           
  3994                           ;sort.c: 192: _delay((unsigned long)((500)*(32000000/4000.0)));
  3995  00292A  0E15               	movlw	21
  3996  00292C  0100               	movlb	0	; () banked
  3997  00292E  6F89               	movwf	(??_Distribution+1)& (0+255),b
  3998  002930  0E4B               	movlw	75
  3999  002932  0100               	movlb	0	; () banked
  4000  002934  6F88               	movwf	??_Distribution& (0+255),b
  4001  002936  0EBE               	movlw	190
  4002  002938                     u6487:
  4003  002938  2EE8               	decfsz	wreg,f,c
  4004  00293A  D7FE               	bra	u6487
  4005  00293C  2F88               	decfsz	??_Distribution& (0+255),f,b
  4006  00293E  D7FC               	bra	u6487
  4007  002940  2F89               	decfsz	(??_Distribution+1)& (0+255),f,b
  4008  002942  D7FA               	bra	u6487
  4009  002944  F000               	nop	
  4010                           
  4011                           ;sort.c: 195: updateServoPosition(1500, 3);
  4012  002946  0E05               	movlw	5
  4013  002948  0100               	movlb	0	; () banked
  4014  00294A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4015  00294C  0EDC               	movlw	220
  4016  00294E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4017  002950  0E00               	movlw	0
  4018  002952  0100               	movlb	0	; () banked
  4019  002954  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4020  002956  0E03               	movlw	3
  4021  002958  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4022  00295A  EC26  F01A         	call	_updateServoPosition	;wreg free
  4023                           
  4024                           ;sort.c: 196: _delay((unsigned long)((500)*(32000000/4000.0)));
  4025  00295E  0E15               	movlw	21
  4026  002960  0100               	movlb	0	; () banked
  4027  002962  6F89               	movwf	(??_Distribution+1)& (0+255),b
  4028  002964  0E4B               	movlw	75
  4029  002966  0100               	movlb	0	; () banked
  4030  002968  6F88               	movwf	??_Distribution& (0+255),b
  4031  00296A  0EBE               	movlw	190
  4032  00296C                     u6497:
  4033  00296C  2EE8               	decfsz	wreg,f,c
  4034  00296E  D7FE               	bra	u6497
  4035  002970  2F88               	decfsz	??_Distribution& (0+255),f,b
  4036  002972  D7FC               	bra	u6497
  4037  002974  2F89               	decfsz	(??_Distribution+1)& (0+255),f,b
  4038  002976  D7FA               	bra	u6497
  4039  002978  F000               	nop	
  4040                           
  4041                           ;sort.c: 199: updateServoPosition(1500, 1);
  4042  00297A  0E05               	movlw	5
  4043  00297C  0100               	movlb	0	; () banked
  4044  00297E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4045  002980  0EDC               	movlw	220
  4046  002982  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4047  002984  0E00               	movlw	0
  4048  002986  0100               	movlb	0	; () banked
  4049  002988  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4050  00298A  0E01               	movlw	1
  4051  00298C  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4052  00298E  EC26  F01A         	call	_updateServoPosition	;wreg free
  4053                           
  4054                           ;sort.c: 200: updateServoPosition(1000, 3);
  4055  002992  0E03               	movlw	3
  4056  002994  0100               	movlb	0	; () banked
  4057  002996  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4058  002998  0EE8               	movlw	232
  4059  00299A  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4060  00299C  0E00               	movlw	0
  4061  00299E  0100               	movlb	0	; () banked
  4062  0029A0  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4063  0029A2  0E03               	movlw	3
  4064  0029A4  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4065  0029A6  EC26  F01A         	call	_updateServoPosition	;wreg free
  4066                           
  4067                           ;sort.c: 201: f_can_coming_to_distribution = 0;
  4068  0029AA  0E00               	movlw	0
  4069  0029AC  6E70               	movwf	_f_can_coming_to_distribution+1,c
  4070  0029AE  0E00               	movlw	0
  4071  0029B0  6E6F               	movwf	_f_can_coming_to_distribution,c
  4072                           
  4073                           ;sort.c: 202: f_can_distributed = 1;
  4074  0029B2  0E00               	movlw	0
  4075  0029B4  0101               	movlb	1	; () banked
  4076  0029B6  6F2C               	movwf	(_f_can_distributed+1)& (0+255),b
  4077  0029B8  0E01               	movlw	1
  4078  0029BA  6F2B               	movwf	_f_can_distributed& (0+255),b
  4079  0029BC  0012               	return	
  4080  0029BE                     __end_of_Distribution:
  4081                           	opt stack 0
  4082                           tblptru	equ	0xFF8
  4083                           tblptrh	equ	0xFF7
  4084                           tblptrl	equ	0xFF6
  4085                           tablat	equ	0xFF5
  4086                           prodh	equ	0xFF4
  4087                           prodl	equ	0xFF3
  4088                           postinc0	equ	0xFEE
  4089                           wreg	equ	0xFE8
  4090                           postdec1	equ	0xFE5
  4091                           fsr1l	equ	0xFE1
  4092                           indf2	equ	0xFDF
  4093                           postinc2	equ	0xFDE
  4094                           postdec2	equ	0xFDD
  4095                           fsr2h	equ	0xFDA
  4096                           fsr2l	equ	0xFD9
  4097                           status	equ	0xFD8
  4098                           
  4099 ;; *************** function _machineConfig *****************
  4100 ;; Defined at:
  4101 ;;		line 15 in file "MachineConfig.c"
  4102 ;; Parameters:    Size  Location     Type
  4103 ;;		None
  4104 ;; Auto vars:     Size  Location     Type
  4105 ;;		None
  4106 ;; Return value:  Size  Location     Type
  4107 ;;                  1    wreg      void 
  4108 ;; Registers used:
  4109 ;;		wreg, status,2
  4110 ;; Tracked objects:
  4111 ;;		On entry : 0/0
  4112 ;;		On exit  : 0/0
  4113 ;;		Unchanged: 0/0
  4114 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4115 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4116 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4117 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4118 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4119 ;;Total ram usage:        0 bytes
  4120 ;; Hardware stack levels used:    1
  4121 ;; Hardware stack levels required when called:    7
  4122 ;; This function calls:
  4123 ;;		Nothing
  4124 ;; This function is called by:
  4125 ;;		_main
  4126 ;; This function uses a non-reentrant model
  4127 ;;
  4128                           
  4129                           	psect	text10
  4130  003722                     __ptext10:
  4131                           	opt stack 0
  4132  003722                     _machineConfig:
  4133                           	opt stack 23
  4134                           
  4135                           ;MachineConfig.c: 17: OSCCON = 0xF0;
  4136                           
  4137                           ;incstack = 0
  4138  003722  0EF0               	movlw	240
  4139  003724  6ED3               	movwf	4051,c	;volatile
  4140                           
  4141                           ;MachineConfig.c: 18: OSCTUNEbits.PLLEN = 1;
  4142  003726  8C9B               	bsf	3995,6,c	;volatile
  4143                           
  4144                           ;MachineConfig.c: 22: TRISA = 0b01000111;
  4145  003728  0E47               	movlw	71
  4146  00372A  6E92               	movwf	3986,c	;volatile
  4147                           
  4148                           ;MachineConfig.c: 24: TRISB = 0b11110010;
  4149  00372C  0EF2               	movlw	242
  4150  00372E  6E93               	movwf	3987,c	;volatile
  4151                           
  4152                           ;MachineConfig.c: 27: TRISC = 0x00;
  4153  003730  0E00               	movlw	0
  4154  003732  6E94               	movwf	3988,c	;volatile
  4155                           
  4156                           ;MachineConfig.c: 31: TRISD = 0x00;
  4157  003734  0E00               	movlw	0
  4158  003736  6E95               	movwf	3989,c	;volatile
  4159                           
  4160                           ;MachineConfig.c: 34: TRISE = 0x00;
  4161  003738  0E00               	movlw	0
  4162  00373A  6E96               	movwf	3990,c	;volatile
  4163                           
  4164                           ;MachineConfig.c: 37: LATA = 0x00;
  4165  00373C  0E00               	movlw	0
  4166  00373E  6E89               	movwf	3977,c	;volatile
  4167                           
  4168                           ;MachineConfig.c: 38: LATB = 0x00;
  4169  003740  0E00               	movlw	0
  4170  003742  6E8A               	movwf	3978,c	;volatile
  4171                           
  4172                           ;MachineConfig.c: 39: LATC = 0x00;
  4173  003744  0E00               	movlw	0
  4174  003746  6E8B               	movwf	3979,c	;volatile
  4175                           
  4176                           ;MachineConfig.c: 40: LATD = 0x00;
  4177  003748  0E00               	movlw	0
  4178  00374A  6E8C               	movwf	3980,c	;volatile
  4179                           
  4180                           ;MachineConfig.c: 41: LATE = 0x00;
  4181  00374C  0E00               	movlw	0
  4182  00374E  6E8D               	movwf	3981,c	;volatile
  4183                           
  4184                           ;MachineConfig.c: 43: nRBPU = 0;
  4185  003750  9EF1               	bcf	intcon2,7,c	;volatile
  4186                           
  4187                           ;MachineConfig.c: 46: ADCON0 = 0x00;
  4188  003752  0E00               	movlw	0
  4189  003754  6EC2               	movwf	4034,c	;volatile
  4190                           
  4191                           ;MachineConfig.c: 47: ADCON1 = 0b00001101;
  4192  003756  0E0D               	movlw	13
  4193  003758  6EC1               	movwf	4033,c	;volatile
  4194                           
  4195                           ;MachineConfig.c: 50: CVRCON = 0x00;
  4196  00375A  0E00               	movlw	0
  4197  00375C  6EB5               	movwf	4021,c	;volatile
  4198                           
  4199                           ;MachineConfig.c: 51: CMCONbits.CIS = 0;
  4200  00375E  96B4               	bcf	4020,3,c	;volatile
  4201                           
  4202                           ;MachineConfig.c: 52: ADCON2 = 0b10110001;
  4203  003760  0EB1               	movlw	177
  4204  003762  6EC0               	movwf	4032,c	;volatile
  4205                           
  4206                           ;MachineConfig.c: 55: INT1IE = 1;
  4207  003764  86F0               	bsf	intcon3,3,c	;volatile
  4208                           
  4209                           ;MachineConfig.c: 57: TMR0IE = 1;
  4210  003766  8AF2               	bsf	intcon,5,c	;volatile
  4211                           
  4212                           ;MachineConfig.c: 58: TMR1IE = 1;
  4213  003768  809D               	bsf	3997,0,c	;volatile
  4214                           
  4215                           ;MachineConfig.c: 59: T1CON = 0b10110000;
  4216  00376A  0EB0               	movlw	176
  4217  00376C  6ECD               	movwf	4045,c	;volatile
  4218                           
  4219                           ;MachineConfig.c: 60: TMR2IE = 1;
  4220  00376E  829D               	bsf	3997,1,c	;volatile
  4221                           
  4222                           ;MachineConfig.c: 61: TMR3IE = 1;
  4223  003770  82A0               	bsf	4000,1,c	;volatile
  4224                           
  4225                           ;MachineConfig.c: 62: PEIE = 1;
  4226  003772  8CF2               	bsf	intcon,6,c	;volatile
  4227                           
  4228                           ;MachineConfig.c: 63: ADIE = 0;
  4229  003774  9C9D               	bcf	3997,6,c	;volatile
  4230                           
  4231                           ;MachineConfig.c: 64: (INTCONbits.GIE = 0);
  4232  003776  9EF2               	bcf	intcon,7,c	;volatile
  4233  003778  0012               	return		;funcret
  4234  00377A                     __end_of_machineConfig:
  4235                           	opt stack 0
  4236                           tblptru	equ	0xFF8
  4237                           tblptrh	equ	0xFF7
  4238                           tblptrl	equ	0xFF6
  4239                           tablat	equ	0xFF5
  4240                           prodh	equ	0xFF4
  4241                           prodl	equ	0xFF3
  4242                           intcon	equ	0xFF2
  4243                           intcon2	equ	0xFF1
  4244                           intcon3	equ	0xFF0
  4245                           postinc0	equ	0xFEE
  4246                           wreg	equ	0xFE8
  4247                           postdec1	equ	0xFE5
  4248                           fsr1l	equ	0xFE1
  4249                           indf2	equ	0xFDF
  4250                           postinc2	equ	0xFDE
  4251                           postdec2	equ	0xFDD
  4252                           fsr2h	equ	0xFDA
  4253                           fsr2l	equ	0xFD9
  4254                           status	equ	0xFD8
  4255                           
  4256 ;; *************** function _logRun *****************
  4257 ;; Defined at:
  4258 ;;		line 84 in file "EEPROM.c"
  4259 ;; Parameters:    Size  Location     Type
  4260 ;;		None
  4261 ;; Auto vars:     Size  Location     Type
  4262 ;;  byte_i          1   53[BANK0 ] unsigned char 
  4263 ;;  i               2   55[BANK0 ] int 
  4264 ;;  num             1   49[BANK0 ] unsigned char 
  4265 ;;  addr            2   57[BANK0 ] unsigned short 
  4266 ;;  byte11          1   54[BANK0 ] unsigned char 
  4267 ;;  byte3           1   52[BANK0 ] unsigned char 
  4268 ;;  byte2           1   51[BANK0 ] unsigned char 
  4269 ;;  byte1           1   50[BANK0 ] unsigned char 
  4270 ;; Return value:  Size  Location     Type
  4271 ;;                  1    wreg      void 
  4272 ;; Registers used:
  4273 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4274 ;; Tracked objects:
  4275 ;;		On entry : 0/0
  4276 ;;		On exit  : 0/0
  4277 ;;		Unchanged: 0/0
  4278 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4279 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4280 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4281 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4282 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4283 ;;Total ram usage:       10 bytes
  4284 ;; Hardware stack levels used:    1
  4285 ;; Hardware stack levels required when called:   11
  4286 ;; This function calls:
  4287 ;;		_EEPROM_read
  4288 ;;		_EEPROM_write
  4289 ;; This function is called by:
  4290 ;;		_main
  4291 ;; This function uses a non-reentrant model
  4292 ;;
  4293                           
  4294                           	psect	text11
  4295  00274E                     __ptext11:
  4296                           	opt stack 0
  4297  00274E                     _logRun:
  4298                           	opt stack 19
  4299                           
  4300                           ;EEPROM.c: 97: sel = EEPROM_read(0);
  4301                           
  4302                           ;incstack = 0
  4303  00274E  0E00               	movlw	0
  4304  002750  0100               	movlb	0	; () banked
  4305  002752  6F81               	movwf	(EEPROM_read@address+1)& (0+255),b
  4306  002754  0E00               	movlw	0
  4307  002756  6F80               	movwf	EEPROM_read@address& (0+255),b
  4308  002758  EC4C  F01F         	call	_EEPROM_read	;wreg free
  4309  00275C  0100               	movlb	0	; () banked
  4310  00275E  6FFD               	movwf	_sel& (0+255),b
  4311                           
  4312                           ; BSR set to: 0
  4313                           ;EEPROM.c: 98: unsigned short addr = 1 + 11 * sel;
  4314  002760  0100               	movlb	0	; () banked
  4315  002762  51FD               	movf	_sel& (0+255),w,b
  4316  002764  0D0B               	mullw	11
  4317  002766  0E01               	movlw	1
  4318  002768  24F3               	addwf	prodl,w,c
  4319  00276A  0100               	movlb	0	; () banked
  4320  00276C  6FB9               	movwf	logRun@addr& (0+255),b
  4321  00276E  0E00               	movlw	0
  4322  002770  20F4               	addwfc	prodh,w,c
  4323  002772  0100               	movlb	0	; () banked
  4324  002774  6FBA               	movwf	(logRun@addr+1)& (0+255),b
  4325                           
  4326                           ; BSR set to: 0
  4327                           ;EEPROM.c: 101: if (sel < 3){
  4328  002776  0E03               	movlw	3
  4329  002778  0100               	movlb	0	; () banked
  4330  00277A  61FD               	cpfslt	_sel& (0+255),b
  4331  00277C  D00E               	goto	l7191
  4332                           
  4333                           ; BSR set to: 0
  4334                           ;EEPROM.c: 102: unsigned char num = sel+1;
  4335  00277E  0100               	movlb	0	; () banked
  4336  002780  29FD               	incf	_sel& (0+255),w,b
  4337  002782  0100               	movlb	0	; () banked
  4338  002784  6FB1               	movwf	logRun@num& (0+255),b
  4339                           
  4340                           ; BSR set to: 0
  4341                           ;EEPROM.c: 103: EEPROM_write(0, num);
  4342  002786  0E00               	movlw	0
  4343  002788  0100               	movlb	0	; () banked
  4344  00278A  6FAC               	movwf	(EEPROM_write@address+1)& (0+255),b
  4345  00278C  0E00               	movlw	0
  4346  00278E  6FAB               	movwf	EEPROM_write@address& (0+255),b
  4347  002790  C0B1  F0AD         	movff	logRun@num,EEPROM_write@data
  4348  002794  ECFC  F015         	call	_EEPROM_write	;wreg free
  4349                           
  4350                           ;EEPROM.c: 104: }
  4351  002798  D00A               	goto	l7193
  4352  00279A                     l7191:
  4353                           
  4354                           ;EEPROM.c: 105: else{
  4355                           ;EEPROM.c: 106: EEPROM_write(0, 0);
  4356  00279A  0E00               	movlw	0
  4357  00279C  0100               	movlb	0	; () banked
  4358  00279E  6FAC               	movwf	(EEPROM_write@address+1)& (0+255),b
  4359  0027A0  0E00               	movlw	0
  4360  0027A2  6FAB               	movwf	EEPROM_write@address& (0+255),b
  4361  0027A4  0E00               	movlw	0
  4362  0027A6  0100               	movlb	0	; () banked
  4363  0027A8  6FAD               	movwf	EEPROM_write@data& (0+255),b
  4364  0027AA  ECFC  F015         	call	_EEPROM_write	;wreg free
  4365  0027AE                     l7193:
  4366                           
  4367                           ;EEPROM.c: 107: }
  4368                           ;EEPROM.c: 110: unsigned char byte1 = 0b10000000 | count_total;
  4369  0027AE  0100               	movlb	0	; () banked
  4370  0027B0  51FE               	movf	_count_total& (0+255),w,b
  4371  0027B2  0980               	iorlw	128
  4372  0027B4  0100               	movlb	0	; () banked
  4373  0027B6  6FB2               	movwf	logRun@byte1& (0+255),b
  4374                           
  4375                           ; BSR set to: 0
  4376                           ;EEPROM.c: 111: EEPROM_write(addr, byte1);
  4377  0027B8  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  4378  0027BC  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  4379  0027C0  C0B2  F0AD         	movff	logRun@byte1,EEPROM_write@data
  4380  0027C4  ECFC  F015         	call	_EEPROM_write	;wreg free
  4381                           
  4382                           ;EEPROM.c: 112: addr++;
  4383  0027C8  0100               	movlb	0	; () banked
  4384  0027CA  4BB9               	infsnz	logRun@addr& (0+255),f,b
  4385  0027CC  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  4386                           
  4387                           ; BSR set to: 0
  4388                           ;EEPROM.c: 115: unsigned char byte2 = (count_pop_no_tab << 4) | count_pop_w_tab;
  4389  0027CE  3861               	swapf	_count_pop_no_tab,w,c
  4390  0027D0  0BF0               	andlw	240
  4391  0027D2  1063               	iorwf	_count_pop_w_tab,w,c
  4392  0027D4  0100               	movlb	0	; () banked
  4393  0027D6  6FB3               	movwf	logRun@byte2& (0+255),b
  4394                           
  4395                           ; BSR set to: 0
  4396                           ;EEPROM.c: 116: EEPROM_write(addr, byte2);
  4397  0027D8  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  4398  0027DC  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  4399  0027E0  C0B3  F0AD         	movff	logRun@byte2,EEPROM_write@data
  4400  0027E4  ECFC  F015         	call	_EEPROM_write	;wreg free
  4401                           
  4402                           ;EEPROM.c: 117: addr++;
  4403  0027E8  0100               	movlb	0	; () banked
  4404  0027EA  4BB9               	infsnz	logRun@addr& (0+255),f,b
  4405  0027EC  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  4406                           
  4407                           ; BSR set to: 0
  4408                           ;EEPROM.c: 118: unsigned char byte3 = (count_can_w_lab << 4) | count_can_no_lab;
  4409  0027EE  385F               	swapf	_count_can_w_lab,w,c
  4410  0027F0  0BF0               	andlw	240
  4411  0027F2  105D               	iorwf	_count_can_no_lab,w,c
  4412  0027F4  0100               	movlb	0	; () banked
  4413  0027F6  6FB4               	movwf	logRun@byte3& (0+255),b
  4414                           
  4415                           ; BSR set to: 0
  4416                           ;EEPROM.c: 119: EEPROM_write(addr, byte3);
  4417  0027F8  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  4418  0027FC  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  4419  002800  C0B4  F0AD         	movff	logRun@byte3,EEPROM_write@data
  4420  002804  ECFC  F015         	call	_EEPROM_write	;wreg free
  4421                           
  4422                           ;EEPROM.c: 120: addr++;
  4423  002808  0100               	movlb	0	; () banked
  4424  00280A  4BB9               	infsnz	logRun@addr& (0+255),f,b
  4425  00280C  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  4426                           
  4427                           ; BSR set to: 0
  4428                           ;EEPROM.c: 123: for(int i = 0; i < 7; i++){
  4429  00280E  0E00               	movlw	0
  4430  002810  0100               	movlb	0	; () banked
  4431  002812  6FB8               	movwf	(logRun@i+1)& (0+255),b
  4432  002814  0E00               	movlw	0
  4433  002816  6FB7               	movwf	logRun@i& (0+255),b
  4434                           
  4435                           ; BSR set to: 0
  4436  002818  0100               	movlb	0	; () banked
  4437  00281A  BFB8               	btfsc	(logRun@i+1)& (0+255),7,b
  4438  00281C  D008               	goto	l7217
  4439  00281E  0100               	movlb	0	; () banked
  4440  002820  51B8               	movf	(logRun@i+1)& (0+255),w,b
  4441  002822  E128               	bnz	l920
  4442  002824  0E07               	movlw	7
  4443  002826  0100               	movlb	0	; () banked
  4444  002828  5DB7               	subwf	logRun@i& (0+255),w,b
  4445  00282A  B0D8               	btfsc	status,0,c
  4446  00282C  D023               	goto	l920
  4447  00282E                     l7217:
  4448                           
  4449                           ; BSR set to: 0
  4450                           ;EEPROM.c: 124: unsigned char byte_i = startTime[i];
  4451  00282E  90D8               	bcf	status,0,c
  4452  002830  0100               	movlb	0	; () banked
  4453  002832  35B7               	rlcf	logRun@i& (0+255),w,b
  4454  002834  6ED9               	movwf	fsr2l,c
  4455  002836  0100               	movlb	0	; () banked
  4456  002838  35B8               	rlcf	(logRun@i+1)& (0+255),w,b
  4457  00283A  6EDA               	movwf	fsr2h,c
  4458  00283C  0E0E               	movlw	low _startTime
  4459  00283E  26D9               	addwf	fsr2l,f,c
  4460  002840  0E01               	movlw	high _startTime
  4461  002842  22DA               	addwfc	fsr2h,f,c
  4462  002844  50DF               	movf	indf2,w,c
  4463  002846  0100               	movlb	0	; () banked
  4464  002848  6FB5               	movwf	logRun@byte_i& (0+255),b
  4465                           
  4466                           ; BSR set to: 0
  4467                           ;EEPROM.c: 125: EEPROM_write(addr, byte_i);
  4468  00284A  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  4469  00284E  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  4470  002852  C0B5  F0AD         	movff	logRun@byte_i,EEPROM_write@data
  4471  002856  ECFC  F015         	call	_EEPROM_write	;wreg free
  4472                           
  4473                           ;EEPROM.c: 126: addr++;
  4474  00285A  0100               	movlb	0	; () banked
  4475  00285C  4BB9               	infsnz	logRun@addr& (0+255),f,b
  4476  00285E  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  4477                           
  4478                           ; BSR set to: 0
  4479  002860  0100               	movlb	0	; () banked
  4480  002862  4BB7               	infsnz	logRun@i& (0+255),f,b
  4481  002864  2BB8               	incf	(logRun@i+1)& (0+255),f,b
  4482                           
  4483                           ; BSR set to: 0
  4484  002866  0100               	movlb	0	; () banked
  4485  002868  BFB8               	btfsc	(logRun@i+1)& (0+255),7,b
  4486  00286A  D7E1               	goto	l7217
  4487  00286C  0100               	movlb	0	; () banked
  4488  00286E  51B8               	movf	(logRun@i+1)& (0+255),w,b
  4489  002870  E101               	bnz	u6250
  4490  002872  D7D8               	goto	L4
  4491  002874                     u6250:
  4492  002874                     l920:
  4493                           
  4494                           ; BSR set to: 0
  4495                           ;EEPROM.c: 127: }
  4496                           ;EEPROM.c: 130: unsigned char byte11 = total_time;
  4497  002874  C0FA  F0B6         	movff	_total_time,logRun@byte11
  4498                           
  4499                           ; BSR set to: 0
  4500                           ;EEPROM.c: 131: EEPROM_write(addr, byte11);
  4501  002878  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  4502  00287C  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  4503  002880  C0B6  F0AD         	movff	logRun@byte11,EEPROM_write@data
  4504  002884  ECFC  F015         	call	_EEPROM_write	;wreg free
  4505  002888  0012               	return		;funcret
  4506  00288A                     __end_of_logRun:
  4507                           	opt stack 0
  4508                           tblptru	equ	0xFF8
  4509                           tblptrh	equ	0xFF7
  4510                           tblptrl	equ	0xFF6
  4511                           tablat	equ	0xFF5
  4512                           prodh	equ	0xFF4
  4513                           prodl	equ	0xFF3
  4514                           intcon	equ	0xFF2
  4515                           intcon2	equ	0xFF1
  4516                           intcon3	equ	0xFF0
  4517                           postinc0	equ	0xFEE
  4518                           wreg	equ	0xFE8
  4519                           postdec1	equ	0xFE5
  4520                           fsr1l	equ	0xFE1
  4521                           indf2	equ	0xFDF
  4522                           postinc2	equ	0xFDE
  4523                           postdec2	equ	0xFDD
  4524                           fsr2h	equ	0xFDA
  4525                           fsr2l	equ	0xFD9
  4526                           status	equ	0xFD8
  4527                           
  4528 ;; *************** function _EEPROM_write *****************
  4529 ;; Defined at:
  4530 ;;		line 32 in file "EEPROM.c"
  4531 ;; Parameters:    Size  Location     Type
  4532 ;;  address         2   43[BANK0 ] unsigned short 
  4533 ;;  data            1   45[BANK0 ] unsigned char 
  4534 ;; Auto vars:     Size  Location     Type
  4535 ;;  i               1   48[BANK0 ] unsigned char 
  4536 ;;  i               1   47[BANK0 ] unsigned char 
  4537 ;; Return value:  Size  Location     Type
  4538 ;;                  1    wreg      void 
  4539 ;; Registers used:
  4540 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4541 ;; Tracked objects:
  4542 ;;		On entry : 0/0
  4543 ;;		On exit  : 0/0
  4544 ;;		Unchanged: 0/0
  4545 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4546 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4547 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4548 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4549 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4550 ;;Total ram usage:        6 bytes
  4551 ;; Hardware stack levels used:    1
  4552 ;; Hardware stack levels required when called:   10
  4553 ;; This function calls:
  4554 ;;		_EEPROM_read
  4555 ;;		_lcdInst
  4556 ;;		_printf
  4557 ;; This function is called by:
  4558 ;;		_Loading
  4559 ;;		_logRun
  4560 ;; This function uses a non-reentrant model
  4561 ;;
  4562                           
  4563                           	psect	text12
  4564  002BF8                     __ptext12:
  4565                           	opt stack 0
  4566  002BF8                     _EEPROM_write:
  4567                           	opt stack 18
  4568                           
  4569                           ;EEPROM.c: 33: EECON1bits.WREN = 1;
  4570                           
  4571                           ;incstack = 0
  4572  002BF8  84A6               	bsf	4006,2,c	;volatile
  4573                           
  4574                           ;EEPROM.c: 36: EEADRH = (unsigned char)(address >> 8);
  4575  002BFA  0100               	movlb	0	; () banked
  4576  002BFC  51AC               	movf	(EEPROM_write@address+1)& (0+255),w,b
  4577  002BFE  6EAA               	movwf	4010,c	;volatile
  4578                           
  4579                           ; BSR set to: 0
  4580                           ;EEPROM.c: 37: EEADR = (unsigned char)address;
  4581  002C00  C0AB  FFA9         	movff	EEPROM_write@address,4009	;volatile
  4582                           
  4583                           ; BSR set to: 0
  4584                           ;EEPROM.c: 39: EEDATA = data;
  4585  002C04  C0AD  FFA8         	movff	EEPROM_write@data,4008	;volatile
  4586                           
  4587                           ; BSR set to: 0
  4588                           ;EEPROM.c: 40: EECON1bits.EEPGD = 0;
  4589  002C08  9EA6               	bcf	4006,7,c	;volatile
  4590                           
  4591                           ; BSR set to: 0
  4592                           ;EEPROM.c: 41: EECON1bits.CFGS = 0;
  4593  002C0A  9CA6               	bcf	4006,6,c	;volatile
  4594                           
  4595                           ; BSR set to: 0
  4596                           ;EEPROM.c: 43: (INTCONbits.GIE = 0);
  4597  002C0C  9EF2               	bcf	intcon,7,c	;volatile
  4598                           
  4599                           ;EEPROM.c: 45: EECON2 = 0x55;
  4600  002C0E  0E55               	movlw	85
  4601  002C10  6EA7               	movwf	4007,c	;volatile
  4602                           
  4603                           ;EEPROM.c: 46: EECON2 = 0x0AA;
  4604  002C12  0EAA               	movlw	170
  4605  002C14  6EA7               	movwf	4007,c	;volatile
  4606                           
  4607                           ; BSR set to: 0
  4608                           ;EEPROM.c: 47: EECON1bits.WR = 1;
  4609  002C16  82A6               	bsf	4006,1,c	;volatile
  4610                           
  4611                           ; BSR set to: 0
  4612                           ;EEPROM.c: 48: (INTCONbits.GIE = 1);
  4613  002C18  8EF2               	bsf	intcon,7,c	;volatile
  4614  002C1A                     l898:
  4615  002C1A  A8A1               	btfss	4001,4,c	;volatile
  4616  002C1C  D7FE               	goto	l898
  4617                           
  4618                           ;EEPROM.c: 53: PIR2bits.EEIF = 0;
  4619  002C1E  98A1               	bcf	4001,4,c	;volatile
  4620                           
  4621                           ;EEPROM.c: 54: EECON1bits.WREN = 0;
  4622  002C20  94A6               	bcf	4006,2,c	;volatile
  4623                           
  4624                           ;EEPROM.c: 57: if(debug){
  4625  002C22  0100               	movlb	0	; () banked
  4626  002C24  51E0               	movf	_debug& (0+255),w,b
  4627  002C26  0100               	movlb	0	; () banked
  4628  002C28  11E1               	iorwf	(_debug+1)& (0+255),w,b
  4629  002C2A  B4D8               	btfsc	status,2,c
  4630  002C2C  0012               	return	
  4631                           
  4632                           ; BSR set to: 0
  4633                           ;EEPROM.c: 58: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  4634  002C2E  0E01               	movlw	1
  4635  002C30  EC92  F01F         	call	_lcdInst
  4636  002C34  0E68               	movlw	104
  4637  002C36  0100               	movlb	0	; () banked
  4638  002C38  6FAE               	movwf	??_EEPROM_write& (0+255),b
  4639  002C3A  0EE4               	movlw	228
  4640  002C3C                     u6507:
  4641  002C3C  2EE8               	decfsz	wreg,f,c
  4642  002C3E  D7FE               	bra	u6507
  4643  002C40  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  4644  002C42  D7FC               	bra	u6507
  4645  002C44  F000               	nop	
  4646                           
  4647                           ;EEPROM.c: 59: lcdInst(0b10000000);;
  4648  002C46  0E80               	movlw	128
  4649  002C48  EC92  F01F         	call	_lcdInst
  4650                           
  4651                           ;EEPROM.c: 60: if(EEPROM_read(address)==data){
  4652  002C4C  C0AB  F080         	movff	EEPROM_write@address,EEPROM_read@address
  4653  002C50  C0AC  F081         	movff	EEPROM_write@address+1,EEPROM_read@address+1
  4654  002C54  EC4C  F01F         	call	_EEPROM_read	;wreg free
  4655  002C58  0100               	movlb	0	; () banked
  4656  002C5A  19AD               	xorwf	EEPROM_write@data& (0+255),w,b
  4657  002C5C  A4D8               	btfss	status,2,c
  4658  002C5E  D024               	goto	l5569
  4659                           
  4660                           ; BSR set to: 0
  4661                           ;EEPROM.c: 61: printf("(data: %u, addr: %u)", data, address);
  4662  002C60  0ED6               	movlw	low STR_66
  4663  002C62  0100               	movlb	0	; () banked
  4664  002C64  6F8E               	movwf	printf@f& (0+255),b
  4665  002C66  0EFB               	movlw	high STR_66
  4666  002C68  0100               	movlb	0	; () banked
  4667  002C6A  6F8F               	movwf	(printf@f+1)& (0+255),b
  4668  002C6C  C0AD  F090         	movff	EEPROM_write@data,?_printf+2
  4669  002C70  0100               	movlb	0	; () banked
  4670  002C72  6B91               	clrf	(?_printf+3)& (0+255),b
  4671  002C74  C0AB  F092         	movff	EEPROM_write@address,?_printf+4
  4672  002C78  C0AC  F093         	movff	EEPROM_write@address+1,?_printf+5
  4673  002C7C  EC93  F008         	call	_printf	;wreg free
  4674                           
  4675                           ;EEPROM.c: 62: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));}
      +                          ;
  4676  002C80  0E00               	movlw	0
  4677  002C82  0100               	movlb	0	; () banked
  4678  002C84  6FAF               	movwf	EEPROM_write@i& (0+255),b
  4679  002C86                     l5561:
  4680                           
  4681                           ; BSR set to: 0
  4682  002C86  0E63               	movlw	99
  4683  002C88  0100               	movlb	0	; () banked
  4684  002C8A  65AF               	cpfsgt	EEPROM_write@i& (0+255),b
  4685  002C8C  D001               	goto	l5565
  4686  002C8E  0012               	return	
  4687  002C90                     l5565:
  4688                           
  4689                           ; BSR set to: 0
  4690  002C90  0E68               	movlw	104
  4691  002C92  0100               	movlb	0	; () banked
  4692  002C94  6FAE               	movwf	??_EEPROM_write& (0+255),b
  4693  002C96  0EE4               	movlw	228
  4694  002C98                     u6517:
  4695  002C98  2EE8               	decfsz	wreg,f,c
  4696  002C9A  D7FE               	bra	u6517
  4697  002C9C  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  4698  002C9E  D7FC               	bra	u6517
  4699  002CA0  F000               	nop	
  4700  002CA2  0100               	movlb	0	; () banked
  4701  002CA4  2BAF               	incf	EEPROM_write@i& (0+255),f,b
  4702  002CA6  D7EF               	goto	l5561
  4703  002CA8                     l5569:
  4704                           
  4705                           ; BSR set to: 0
  4706                           ;EEPROM.c: 64: else{ printf("FAILED"); for(char i=0;i<100;i++){_delay((unsigned long)((1
      +                          0)*(32000000/4000.0)));}; }
  4707  002CA8  0EBC               	movlw	low STR_67
  4708  002CAA  0100               	movlb	0	; () banked
  4709  002CAC  6F8E               	movwf	printf@f& (0+255),b
  4710  002CAE  0EFF               	movlw	high STR_67
  4711  002CB0  0100               	movlb	0	; () banked
  4712  002CB2  6F8F               	movwf	(printf@f+1)& (0+255),b
  4713  002CB4  EC93  F008         	call	_printf	;wreg free
  4714  002CB8  0E00               	movlw	0
  4715  002CBA  0100               	movlb	0	; () banked
  4716  002CBC  6FB0               	movwf	EEPROM_write@i_1310& (0+255),b
  4717  002CBE                     l5573:
  4718                           
  4719                           ; BSR set to: 0
  4720  002CBE  0E63               	movlw	99
  4721  002CC0  0100               	movlb	0	; () banked
  4722  002CC2  65B0               	cpfsgt	EEPROM_write@i_1310& (0+255),b
  4723  002CC4  D001               	goto	l5577
  4724  002CC6  0012               	return	
  4725  002CC8                     l5577:
  4726                           
  4727                           ; BSR set to: 0
  4728  002CC8  0E68               	movlw	104
  4729  002CCA  0100               	movlb	0	; () banked
  4730  002CCC  6FAE               	movwf	??_EEPROM_write& (0+255),b
  4731  002CCE  0EE4               	movlw	228
  4732  002CD0                     u6527:
  4733  002CD0  2EE8               	decfsz	wreg,f,c
  4734  002CD2  D7FE               	bra	u6527
  4735  002CD4  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  4736  002CD6  D7FC               	bra	u6527
  4737  002CD8  F000               	nop	
  4738  002CDA  0100               	movlb	0	; () banked
  4739  002CDC  2BB0               	incf	EEPROM_write@i_1310& (0+255),f,b
  4740  002CDE  D7EF               	goto	l5573
  4741  002CE0                     __end_of_EEPROM_write:
  4742                           	opt stack 0
  4743                           tblptru	equ	0xFF8
  4744                           tblptrh	equ	0xFF7
  4745                           tblptrl	equ	0xFF6
  4746                           tablat	equ	0xFF5
  4747                           prodh	equ	0xFF4
  4748                           prodl	equ	0xFF3
  4749                           intcon	equ	0xFF2
  4750                           intcon2	equ	0xFF1
  4751                           intcon3	equ	0xFF0
  4752                           postinc0	equ	0xFEE
  4753                           wreg	equ	0xFE8
  4754                           postdec1	equ	0xFE5
  4755                           fsr1l	equ	0xFE1
  4756                           indf2	equ	0xFDF
  4757                           postinc2	equ	0xFDE
  4758                           postdec2	equ	0xFDD
  4759                           fsr2h	equ	0xFDA
  4760                           fsr2l	equ	0xFD9
  4761                           status	equ	0xFD8
  4762                           
  4763 ;; *************** function _EEPROM_read *****************
  4764 ;; Defined at:
  4765 ;;		line 68 in file "EEPROM.c"
  4766 ;; Parameters:    Size  Location     Type
  4767 ;;  address         2    0[BANK0 ] unsigned short 
  4768 ;; Auto vars:     Size  Location     Type
  4769 ;;		None
  4770 ;; Return value:  Size  Location     Type
  4771 ;;                  1    wreg      unsigned char 
  4772 ;; Registers used:
  4773 ;;		wreg, status,2
  4774 ;; Tracked objects:
  4775 ;;		On entry : 0/0
  4776 ;;		On exit  : 0/0
  4777 ;;		Unchanged: 0/0
  4778 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4779 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4780 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4781 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4782 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4783 ;;Total ram usage:        2 bytes
  4784 ;; Hardware stack levels used:    1
  4785 ;; Hardware stack levels required when called:    7
  4786 ;; This function calls:
  4787 ;;		Nothing
  4788 ;; This function is called by:
  4789 ;;		_Loading
  4790 ;;		_EEPROM_write
  4791 ;;		_logRun
  4792 ;; This function uses a non-reentrant model
  4793 ;;
  4794                           
  4795                           	psect	text13
  4796  003E98                     __ptext13:
  4797                           	opt stack 0
  4798  003E98                     _EEPROM_read:
  4799                           	opt stack 20
  4800                           
  4801                           ;EEPROM.c: 70: EEADRH = (unsigned char)(address >> 8);
  4802                           
  4803                           ; BSR set to: 0
  4804                           ;incstack = 0
  4805  003E98  0100               	movlb	0	; () banked
  4806  003E9A  5181               	movf	(EEPROM_read@address+1)& (0+255),w,b
  4807  003E9C  6EAA               	movwf	4010,c	;volatile
  4808                           
  4809                           ; BSR set to: 0
  4810                           ;EEPROM.c: 71: EEADR = (unsigned char)address;
  4811  003E9E  C080  FFA9         	movff	EEPROM_read@address,4009	;volatile
  4812                           
  4813                           ; BSR set to: 0
  4814                           ;EEPROM.c: 73: EECON1bits.EEPGD = 0;
  4815  003EA2  9EA6               	bcf	4006,7,c	;volatile
  4816                           
  4817                           ; BSR set to: 0
  4818                           ;EEPROM.c: 74: EECON1bits.CFGS = 0;
  4819  003EA4  9CA6               	bcf	4006,6,c	;volatile
  4820                           
  4821                           ; BSR set to: 0
  4822                           ;EEPROM.c: 75: EECON1bits.RD = 1;
  4823  003EA6  80A6               	bsf	4006,0,c	;volatile
  4824  003EA8                     l911:
  4825  003EA8  B0A6               	btfsc	4006,0,c	;volatile
  4826  003EAA  D7FE               	goto	l911
  4827                           
  4828                           ;EEPROM.c: 81: return EEDATA;
  4829  003EAC  50A8               	movf	4008,w,c	;volatile
  4830  003EAE  0012               	return	
  4831  003EB0                     __end_of_EEPROM_read:
  4832                           	opt stack 0
  4833                           tblptru	equ	0xFF8
  4834                           tblptrh	equ	0xFF7
  4835                           tblptrl	equ	0xFF6
  4836                           tablat	equ	0xFF5
  4837                           prodh	equ	0xFF4
  4838                           prodl	equ	0xFF3
  4839                           intcon	equ	0xFF2
  4840                           intcon2	equ	0xFF1
  4841                           intcon3	equ	0xFF0
  4842                           postinc0	equ	0xFEE
  4843                           wreg	equ	0xFE8
  4844                           postdec1	equ	0xFE5
  4845                           fsr1l	equ	0xFE1
  4846                           indf2	equ	0xFDF
  4847                           postinc2	equ	0xFDE
  4848                           postdec2	equ	0xFDD
  4849                           fsr2h	equ	0xFDA
  4850                           fsr2l	equ	0xFD9
  4851                           status	equ	0xFD8
  4852                           
  4853 ;; *************** function _initUI *****************
  4854 ;; Defined at:
  4855 ;;		line 62 in file "UI.c"
  4856 ;; Parameters:    Size  Location     Type
  4857 ;;		None
  4858 ;; Auto vars:     Size  Location     Type
  4859 ;;		None
  4860 ;; Return value:  Size  Location     Type
  4861 ;;                  1    wreg      void 
  4862 ;; Registers used:
  4863 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4864 ;; Tracked objects:
  4865 ;;		On entry : 0/0
  4866 ;;		On exit  : 0/0
  4867 ;;		Unchanged: 0/0
  4868 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4869 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4870 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4871 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4872 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4873 ;;Total ram usage:        0 bytes
  4874 ;; Hardware stack levels used:    1
  4875 ;; Hardware stack levels required when called:   12
  4876 ;; This function calls:
  4877 ;;		_change_state_to_menu_start
  4878 ;;		_loadRTC
  4879 ;; This function is called by:
  4880 ;;		_main
  4881 ;; This function uses a non-reentrant model
  4882 ;;
  4883                           
  4884                           	psect	text14
  4885  003DEE                     __ptext14:
  4886                           	opt stack 0
  4887  003DEE                     _initUI:
  4888                           	opt stack 18
  4889                           
  4890                           ;UI.c: 63: (INTCONbits.GIE = 1);
  4891                           
  4892                           ;incstack = 0
  4893  003DEE  8EF2               	bsf	intcon,7,c	;volatile
  4894                           
  4895                           ;UI.c: 64: machine_state = UI_state;
  4896  003DF0  0E00               	movlw	0
  4897  003DF2  0100               	movlb	0	; () banked
  4898  003DF4  6FFC               	movwf	_machine_state& (0+255),b
  4899                           
  4900                           ;UI.c: 65: logstate = 0;
  4901  003DF6  0E00               	movlw	0
  4902  003DF8  0100               	movlb	0	; () banked
  4903  003DFA  6FF9               	movwf	(_logstate+1)& (0+255),b
  4904  003DFC  0E00               	movlw	0
  4905  003DFE  6FF8               	movwf	_logstate& (0+255),b
  4906                           
  4907                           ; BSR set to: 0
  4908                           ;UI.c: 67: loadRTC();
  4909  003E00  EC61  F019         	call	_loadRTC	;wreg free
  4910                           
  4911                           ;UI.c: 69: change_state_to_menu_start();
  4912  003E04  EC7C  F01E         	call	_change_state_to_menu_start	;wreg free
  4913                           
  4914                           ;UI.c: 70: firstboot = 1;
  4915  003E08  0E00               	movlw	0
  4916  003E0A  6E74               	movwf	_firstboot+1,c
  4917  003E0C  0E01               	movlw	1
  4918  003E0E  6E73               	movwf	_firstboot,c
  4919  003E10  0012               	return		;funcret
  4920  003E12                     __end_of_initUI:
  4921                           	opt stack 0
  4922                           tblptru	equ	0xFF8
  4923                           tblptrh	equ	0xFF7
  4924                           tblptrl	equ	0xFF6
  4925                           tablat	equ	0xFF5
  4926                           prodh	equ	0xFF4
  4927                           prodl	equ	0xFF3
  4928                           intcon	equ	0xFF2
  4929                           intcon2	equ	0xFF1
  4930                           intcon3	equ	0xFF0
  4931                           postinc0	equ	0xFEE
  4932                           wreg	equ	0xFE8
  4933                           postdec1	equ	0xFE5
  4934                           fsr1l	equ	0xFE1
  4935                           indf2	equ	0xFDF
  4936                           postinc2	equ	0xFDE
  4937                           postdec2	equ	0xFDD
  4938                           fsr2h	equ	0xFDA
  4939                           fsr2l	equ	0xFD9
  4940                           status	equ	0xFD8
  4941                           
  4942 ;; *************** function _loadRTC *****************
  4943 ;; Defined at:
  4944 ;;		line 28 in file "RTC.c"
  4945 ;; Parameters:    Size  Location     Type
  4946 ;;		None
  4947 ;; Auto vars:     Size  Location     Type
  4948 ;;  i               2   22[BANK0 ] int 
  4949 ;; Return value:  Size  Location     Type
  4950 ;;                  1    wreg      void 
  4951 ;; Registers used:
  4952 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4953 ;; Tracked objects:
  4954 ;;		On entry : 0/0
  4955 ;;		On exit  : 0/0
  4956 ;;		Unchanged: 0/0
  4957 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4958 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4959 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4960 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4961 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4962 ;;Total ram usage:        3 bytes
  4963 ;; Hardware stack levels used:    1
  4964 ;; Hardware stack levels required when called:    9
  4965 ;; This function calls:
  4966 ;;		_I2C_Master_Init
  4967 ;;		_I2C_Master_Start
  4968 ;;		_I2C_Master_Stop
  4969 ;;		_I2C_Master_Write
  4970 ;; This function is called by:
  4971 ;;		_initUI
  4972 ;; This function uses a non-reentrant model
  4973 ;;
  4974                           
  4975                           	psect	text15
  4976  0032C2                     __ptext15:
  4977                           	opt stack 0
  4978  0032C2                     _loadRTC:
  4979                           	opt stack 20
  4980                           
  4981                           ;RTC.c: 30: I2C_Master_Init(10000);
  4982                           
  4983                           ;incstack = 0
  4984  0032C2  0E10               	movlw	16
  4985  0032C4  0100               	movlb	0	; () banked
  4986  0032C6  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  4987  0032C8  0E27               	movlw	39
  4988  0032CA  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  4989  0032CC  0E00               	movlw	0
  4990  0032CE  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  4991  0032D0  0E00               	movlw	0
  4992  0032D2  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  4993  0032D4  EC34  F01B         	call	_I2C_Master_Init	;wreg free
  4994                           
  4995                           ;RTC.c: 32: (INTCONbits.GIE = 0);
  4996  0032D8  9EF2               	bcf	intcon,7,c	;volatile
  4997                           
  4998                           ;RTC.c: 34: I2C_Master_Start();
  4999  0032DA  ECB8  F01F         	call	_I2C_Master_Start	;wreg free
  5000                           
  5001                           ;RTC.c: 35: I2C_Master_Write(0b11010000);
  5002  0032DE  0E00               	movlw	0
  5003  0032E0  0100               	movlb	0	; () banked
  5004  0032E2  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5005  0032E4  0ED0               	movlw	208
  5006  0032E6  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  5007  0032E8  ECA6  F01F         	call	_I2C_Master_Write	;wreg free
  5008                           
  5009                           ;RTC.c: 36: I2C_Master_Write(0x00);
  5010  0032EC  0E00               	movlw	0
  5011  0032EE  0100               	movlb	0	; () banked
  5012  0032F0  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5013  0032F2  0E00               	movlw	0
  5014  0032F4  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  5015  0032F6  ECA6  F01F         	call	_I2C_Master_Write	;wreg free
  5016                           
  5017                           ;RTC.c: 37: for(int i = 0; i<7; i++){
  5018  0032FA  0E00               	movlw	0
  5019  0032FC  0100               	movlb	0	; () banked
  5020  0032FE  6F97               	movwf	(loadRTC@i+1)& (0+255),b
  5021  003300  0E00               	movlw	0
  5022  003302  6F96               	movwf	loadRTC@i& (0+255),b
  5023  003304                     l5685:
  5024                           
  5025                           ; BSR set to: 0
  5026  003304  0100               	movlb	0	; () banked
  5027  003306  BF97               	btfsc	(loadRTC@i+1)& (0+255),7,b
  5028  003308  D008               	goto	l5689
  5029  00330A  0100               	movlb	0	; () banked
  5030  00330C  5197               	movf	(loadRTC@i+1)& (0+255),w,b
  5031  00330E  E11B               	bnz	l5695
  5032  003310  0E07               	movlw	7
  5033  003312  0100               	movlb	0	; () banked
  5034  003314  5D96               	subwf	loadRTC@i& (0+255),w,b
  5035  003316  B0D8               	btfsc	status,0,c
  5036  003318  D016               	goto	l5695
  5037  00331A                     l5689:
  5038                           
  5039                           ; BSR set to: 0
  5040                           ;RTC.c: 38: I2C_Master_Write(time[i]);
  5041  00331A  0E24               	movlw	low _time
  5042  00331C  0100               	movlb	0	; () banked
  5043  00331E  2596               	addwf	loadRTC@i& (0+255),w,b
  5044  003320  6ED9               	movwf	fsr2l,c
  5045  003322  0E01               	movlw	high _time
  5046  003324  0100               	movlb	0	; () banked
  5047  003326  2197               	addwfc	(loadRTC@i+1)& (0+255),w,b
  5048  003328  6EDA               	movwf	fsr2h,c
  5049  00332A  50DF               	movf	indf2,w,c
  5050  00332C  0100               	movlb	0	; () banked
  5051  00332E  6F95               	movwf	??_loadRTC& (0+255),b
  5052  003330  0100               	movlb	0	; () banked
  5053  003332  5195               	movf	??_loadRTC& (0+255),w,b
  5054  003334  0100               	movlb	0	; () banked
  5055  003336  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  5056  003338  6B82               	clrf	(I2C_Master_Write@d+1)& (0+255),b
  5057  00333A  ECA6  F01F         	call	_I2C_Master_Write	;wreg free
  5058  00333E  0100               	movlb	0	; () banked
  5059  003340  4B96               	infsnz	loadRTC@i& (0+255),f,b
  5060  003342  2B97               	incf	(loadRTC@i+1)& (0+255),f,b
  5061  003344  D7DF               	goto	l5685
  5062  003346                     l5695:
  5063                           
  5064                           ; BSR set to: 0
  5065                           ;RTC.c: 39: }
  5066                           ;RTC.c: 40: I2C_Master_Stop();
  5067  003346  ECB4  F01F         	call	_I2C_Master_Stop	;wreg free
  5068                           
  5069                           ;RTC.c: 41: (INTCONbits.GIE = 1);
  5070  00334A  8EF2               	bsf	intcon,7,c	;volatile
  5071  00334C  0012               	return		;funcret
  5072  00334E                     __end_of_loadRTC:
  5073                           	opt stack 0
  5074                           tblptru	equ	0xFF8
  5075                           tblptrh	equ	0xFF7
  5076                           tblptrl	equ	0xFF6
  5077                           tablat	equ	0xFF5
  5078                           prodh	equ	0xFF4
  5079                           prodl	equ	0xFF3
  5080                           intcon	equ	0xFF2
  5081                           intcon2	equ	0xFF1
  5082                           intcon3	equ	0xFF0
  5083                           postinc0	equ	0xFEE
  5084                           wreg	equ	0xFE8
  5085                           postdec1	equ	0xFE5
  5086                           fsr1l	equ	0xFE1
  5087                           indf2	equ	0xFDF
  5088                           postinc2	equ	0xFDE
  5089                           postdec2	equ	0xFDD
  5090                           fsr2h	equ	0xFDA
  5091                           fsr2l	equ	0xFD9
  5092                           status	equ	0xFD8
  5093                           
  5094 ;; *************** function _I2C_Master_Init *****************
  5095 ;; Defined at:
  5096 ;;		line 15 in file "I2C.c"
  5097 ;; Parameters:    Size  Location     Type
  5098 ;;  c               4   13[BANK0 ] const unsigned long 
  5099 ;; Auto vars:     Size  Location     Type
  5100 ;;		None
  5101 ;; Return value:  Size  Location     Type
  5102 ;;                  1    wreg      void 
  5103 ;; Registers used:
  5104 ;;		wreg, status,2, status,0, cstack
  5105 ;; Tracked objects:
  5106 ;;		On entry : 0/0
  5107 ;;		On exit  : 0/0
  5108 ;;		Unchanged: 0/0
  5109 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5110 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5111 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5112 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5113 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5114 ;;Total ram usage:        8 bytes
  5115 ;; Hardware stack levels used:    1
  5116 ;; Hardware stack levels required when called:    8
  5117 ;; This function calls:
  5118 ;;		___lldiv
  5119 ;; This function is called by:
  5120 ;;		_loadRTC
  5121 ;; This function uses a non-reentrant model
  5122 ;;
  5123                           
  5124                           	psect	text16
  5125  003668                     __ptext16:
  5126                           	opt stack 0
  5127  003668                     _I2C_Master_Init:
  5128                           	opt stack 20
  5129                           
  5130                           ;I2C.c: 18: SSPSTAT = 0b00000000;
  5131                           
  5132                           ;incstack = 0
  5133  003668  0E00               	movlw	0
  5134  00366A  6EC7               	movwf	4039,c	;volatile
  5135                           
  5136                           ;I2C.c: 19: SSPCON1 = 0b00101000;
  5137  00366C  0E28               	movlw	40
  5138  00366E  6EC6               	movwf	4038,c	;volatile
  5139                           
  5140                           ;I2C.c: 20: SSPCON2 = 0b00000000;
  5141  003670  0E00               	movlw	0
  5142  003672  6EC5               	movwf	4037,c	;volatile
  5143                           
  5144                           ;I2C.c: 21: SSPADD = (32000000/(4*c))-1;
  5145  003674  0E00               	movlw	0
  5146  003676  0100               	movlb	0	; () banked
  5147  003678  6F80               	movwf	___lldiv@dividend& (0+255),b
  5148  00367A  0E48               	movlw	72
  5149  00367C  6F81               	movwf	(___lldiv@dividend+1)& (0+255),b
  5150  00367E  0EE8               	movlw	232
  5151  003680  6F82               	movwf	(___lldiv@dividend+2)& (0+255),b
  5152  003682  0E01               	movlw	1
  5153  003684  6F83               	movwf	(___lldiv@dividend+3)& (0+255),b
  5154  003686  C08D  F091         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  5155  00368A  C08E  F092         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  5156  00368E  C08F  F093         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  5157  003692  C090  F094         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  5158  003696  0E02               	movlw	2
  5159  003698                     u4155:
  5160  003698  90D8               	bcf	status,0,c
  5161  00369A  0100               	movlb	0	; () banked
  5162  00369C  3791               	rlcf	??_I2C_Master_Init& (0+255),f,b
  5163  00369E  3792               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
  5164  0036A0  3793               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
  5165  0036A2  3794               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
  5166  0036A4  2EE8               	decfsz	wreg,f,c
  5167  0036A6  D7F8               	goto	u4155
  5168  0036A8  C091  F084         	movff	??_I2C_Master_Init,___lldiv@divisor
  5169  0036AC  C092  F085         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  5170  0036B0  C093  F086         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  5171  0036B4  C094  F087         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  5172  0036B8  EC0F  F018         	call	___lldiv	;wreg free
  5173  0036BC  0100               	movlb	0	; () banked
  5174  0036BE  0580               	decf	?___lldiv& (0+255),w,b
  5175  0036C0  6EC8               	movwf	4040,c	;volatile
  5176                           
  5177                           ; BSR set to: 0
  5178                           ;I2C.c: 22: TRISC3 = 1;
  5179  0036C2  8694               	bsf	3988,3,c	;volatile
  5180                           
  5181                           ; BSR set to: 0
  5182                           ;I2C.c: 23: TRISC4 = 1;
  5183  0036C4  8894               	bsf	3988,4,c	;volatile
  5184                           
  5185                           ; BSR set to: 0
  5186  0036C6  0012               	return		;funcret
  5187  0036C8                     __end_of_I2C_Master_Init:
  5188                           	opt stack 0
  5189                           tblptru	equ	0xFF8
  5190                           tblptrh	equ	0xFF7
  5191                           tblptrl	equ	0xFF6
  5192                           tablat	equ	0xFF5
  5193                           prodh	equ	0xFF4
  5194                           prodl	equ	0xFF3
  5195                           intcon	equ	0xFF2
  5196                           intcon2	equ	0xFF1
  5197                           intcon3	equ	0xFF0
  5198                           postinc0	equ	0xFEE
  5199                           wreg	equ	0xFE8
  5200                           postdec1	equ	0xFE5
  5201                           fsr1l	equ	0xFE1
  5202                           indf2	equ	0xFDF
  5203                           postinc2	equ	0xFDE
  5204                           postdec2	equ	0xFDD
  5205                           fsr2h	equ	0xFDA
  5206                           fsr2l	equ	0xFD9
  5207                           status	equ	0xFD8
  5208                           
  5209 ;; *************** function ___lldiv *****************
  5210 ;; Defined at:
  5211 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  5212 ;; Parameters:    Size  Location     Type
  5213 ;;  dividend        4    0[BANK0 ] unsigned long 
  5214 ;;  divisor         4    4[BANK0 ] unsigned long 
  5215 ;; Auto vars:     Size  Location     Type
  5216 ;;  quotient        4    8[BANK0 ] unsigned long 
  5217 ;;  counter         1   12[BANK0 ] unsigned char 
  5218 ;; Return value:  Size  Location     Type
  5219 ;;                  4    0[BANK0 ] unsigned long 
  5220 ;; Registers used:
  5221 ;;		wreg, status,2, status,0
  5222 ;; Tracked objects:
  5223 ;;		On entry : 0/0
  5224 ;;		On exit  : 0/0
  5225 ;;		Unchanged: 0/0
  5226 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5227 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5228 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5229 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5230 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5231 ;;Total ram usage:       13 bytes
  5232 ;; Hardware stack levels used:    1
  5233 ;; Hardware stack levels required when called:    7
  5234 ;; This function calls:
  5235 ;;		Nothing
  5236 ;; This function is called by:
  5237 ;;		_I2C_Master_Init
  5238 ;; This function uses a non-reentrant model
  5239 ;;
  5240                           
  5241                           	psect	text17
  5242  00301E                     __ptext17:
  5243                           	opt stack 0
  5244  00301E                     ___lldiv:
  5245                           	opt stack 20
  5246                           
  5247                           ; BSR set to: 0
  5248                           ;incstack = 0
  5249  00301E  0E00               	movlw	0
  5250  003020  0100               	movlb	0	; () banked
  5251  003022  6F88               	movwf	___lldiv@quotient& (0+255),b
  5252  003024  0E00               	movlw	0
  5253  003026  6F89               	movwf	(___lldiv@quotient+1)& (0+255),b
  5254  003028  0E00               	movlw	0
  5255  00302A  6F8A               	movwf	(___lldiv@quotient+2)& (0+255),b
  5256  00302C  0E00               	movlw	0
  5257  00302E  6F8B               	movwf	(___lldiv@quotient+3)& (0+255),b
  5258                           
  5259                           ; BSR set to: 0
  5260  003030  0100               	movlb	0	; () banked
  5261  003032  5184               	movf	___lldiv@divisor& (0+255),w,b
  5262  003034  0100               	movlb	0	; () banked
  5263  003036  1185               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  5264  003038  0100               	movlb	0	; () banked
  5265  00303A  1186               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  5266  00303C  0100               	movlb	0	; () banked
  5267  00303E  1187               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  5268  003040  B4D8               	btfsc	status,2,c
  5269  003042  D042               	goto	l1519
  5270                           
  5271                           ; BSR set to: 0
  5272  003044  0E01               	movlw	1
  5273  003046  0100               	movlb	0	; () banked
  5274  003048  6F8C               	movwf	___lldiv@counter& (0+255),b
  5275  00304A  D008               	goto	l5133
  5276  00304C                     l5131:
  5277                           
  5278                           ; BSR set to: 0
  5279  00304C  0100               	movlb	0	; () banked
  5280  00304E  90D8               	bcf	status,0,c
  5281  003050  3784               	rlcf	___lldiv@divisor& (0+255),f,b
  5282  003052  3785               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  5283  003054  3786               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  5284  003056  3787               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  5285  003058  0100               	movlb	0	; () banked
  5286  00305A  2B8C               	incf	___lldiv@counter& (0+255),f,b
  5287  00305C                     l5133:
  5288                           
  5289                           ; BSR set to: 0
  5290  00305C  0100               	movlb	0	; () banked
  5291  00305E  AF87               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  5292  003060  D7F5               	goto	l5131
  5293  003062                     l5135:
  5294                           
  5295                           ; BSR set to: 0
  5296  003062  0100               	movlb	0	; () banked
  5297  003064  90D8               	bcf	status,0,c
  5298  003066  3788               	rlcf	___lldiv@quotient& (0+255),f,b
  5299  003068  3789               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  5300  00306A  378A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  5301  00306C  378B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  5302                           
  5303                           ; BSR set to: 0
  5304  00306E  0100               	movlb	0	; () banked
  5305  003070  5184               	movf	___lldiv@divisor& (0+255),w,b
  5306  003072  0100               	movlb	0	; () banked
  5307  003074  5D80               	subwf	___lldiv@dividend& (0+255),w,b
  5308  003076  0100               	movlb	0	; () banked
  5309  003078  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  5310  00307A  0100               	movlb	0	; () banked
  5311  00307C  5981               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  5312  00307E  0100               	movlb	0	; () banked
  5313  003080  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  5314  003082  0100               	movlb	0	; () banked
  5315  003084  5982               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  5316  003086  0100               	movlb	0	; () banked
  5317  003088  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  5318  00308A  0100               	movlb	0	; () banked
  5319  00308C  5983               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  5320  00308E  A0D8               	btfss	status,0,c
  5321  003090  D012               	goto	l5143
  5322                           
  5323                           ; BSR set to: 0
  5324  003092  0100               	movlb	0	; () banked
  5325  003094  5184               	movf	___lldiv@divisor& (0+255),w,b
  5326  003096  0100               	movlb	0	; () banked
  5327  003098  5F80               	subwf	___lldiv@dividend& (0+255),f,b
  5328  00309A  0100               	movlb	0	; () banked
  5329  00309C  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  5330  00309E  0100               	movlb	0	; () banked
  5331  0030A0  5B81               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  5332  0030A2  0100               	movlb	0	; () banked
  5333  0030A4  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  5334  0030A6  0100               	movlb	0	; () banked
  5335  0030A8  5B82               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  5336  0030AA  0100               	movlb	0	; () banked
  5337  0030AC  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  5338  0030AE  0100               	movlb	0	; () banked
  5339  0030B0  5B83               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  5340                           
  5341                           ; BSR set to: 0
  5342  0030B2  0100               	movlb	0	; () banked
  5343  0030B4  8188               	bsf	___lldiv@quotient& (0+255),0,b
  5344  0030B6                     l5143:
  5345                           
  5346                           ; BSR set to: 0
  5347  0030B6  0100               	movlb	0	; () banked
  5348  0030B8  90D8               	bcf	status,0,c
  5349  0030BA  3387               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  5350  0030BC  3386               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  5351  0030BE  3385               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  5352  0030C0  3384               	rrcf	___lldiv@divisor& (0+255),f,b
  5353                           
  5354                           ; BSR set to: 0
  5355  0030C2  0100               	movlb	0	; () banked
  5356  0030C4  2F8C               	decfsz	___lldiv@counter& (0+255),f,b
  5357  0030C6  D7CD               	goto	l5135
  5358  0030C8                     l1519:
  5359                           
  5360                           ; BSR set to: 0
  5361  0030C8  C088  F080         	movff	___lldiv@quotient,?___lldiv
  5362  0030CC  C089  F081         	movff	___lldiv@quotient+1,?___lldiv+1
  5363  0030D0  C08A  F082         	movff	___lldiv@quotient+2,?___lldiv+2
  5364  0030D4  C08B  F083         	movff	___lldiv@quotient+3,?___lldiv+3
  5365                           
  5366                           ; BSR set to: 0
  5367  0030D8  0012               	return		;funcret
  5368  0030DA                     __end_of___lldiv:
  5369                           	opt stack 0
  5370                           tblptru	equ	0xFF8
  5371                           tblptrh	equ	0xFF7
  5372                           tblptrl	equ	0xFF6
  5373                           tablat	equ	0xFF5
  5374                           prodh	equ	0xFF4
  5375                           prodl	equ	0xFF3
  5376                           intcon	equ	0xFF2
  5377                           intcon2	equ	0xFF1
  5378                           intcon3	equ	0xFF0
  5379                           postinc0	equ	0xFEE
  5380                           wreg	equ	0xFE8
  5381                           postdec1	equ	0xFE5
  5382                           fsr1l	equ	0xFE1
  5383                           indf2	equ	0xFDF
  5384                           postinc2	equ	0xFDE
  5385                           postdec2	equ	0xFDD
  5386                           fsr2h	equ	0xFDA
  5387                           fsr2l	equ	0xFD9
  5388                           status	equ	0xFD8
  5389                           
  5390 ;; *************** function _change_state_to_menu_start *****************
  5391 ;; Defined at:
  5392 ;;		line 472 in file "UI.c"
  5393 ;; Parameters:    Size  Location     Type
  5394 ;;		None
  5395 ;; Auto vars:     Size  Location     Type
  5396 ;;		None
  5397 ;; Return value:  Size  Location     Type
  5398 ;;                  1    wreg      void 
  5399 ;; Registers used:
  5400 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5401 ;; Tracked objects:
  5402 ;;		On entry : 0/0
  5403 ;;		On exit  : 0/0
  5404 ;;		Unchanged: 0/0
  5405 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5406 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5407 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5408 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5409 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5410 ;;Total ram usage:        0 bytes
  5411 ;; Hardware stack levels used:    1
  5412 ;; Hardware stack levels required when called:   11
  5413 ;; This function calls:
  5414 ;;		_lcdInst
  5415 ;;		_printRTC
  5416 ;;		_printf
  5417 ;; This function is called by:
  5418 ;;		_initUI
  5419 ;; This function uses a non-reentrant model
  5420 ;;
  5421                           
  5422                           	psect	text18
  5423  003CF8                     __ptext18:
  5424                           	opt stack 0
  5425  003CF8                     _change_state_to_menu_start:
  5426                           	opt stack 18
  5427                           
  5428                           ;UI.c: 473: cur_state = 0;
  5429                           
  5430                           ; BSR set to: 0
  5431                           ;incstack = 0
  5432  003CF8  0E00               	movlw	0
  5433  003CFA  0100               	movlb	0	; () banked
  5434  003CFC  6FDF               	movwf	(_cur_state+1)& (0+255),b
  5435  003CFE  0E00               	movlw	0
  5436  003D00  6FDE               	movwf	_cur_state& (0+255),b
  5437                           
  5438                           ; BSR set to: 0
  5439                           ;UI.c: 475: lcdInst(0b10000000);;
  5440  003D02  0E80               	movlw	128
  5441  003D04  EC92  F01F         	call	_lcdInst
  5442                           
  5443                           ;UI.c: 476: printRTC();
  5444  003D08  EC66  F00C         	call	_printRTC	;wreg free
  5445                           
  5446                           ;UI.c: 477: lcdInst(0b11000000);;
  5447  003D0C  0EC0               	movlw	192
  5448  003D0E  EC92  F01F         	call	_lcdInst
  5449                           
  5450                           ;UI.c: 478: printf("PUSH TO CONTINUE");
  5451  003D12  0E33               	movlw	low STR_30
  5452  003D14  0100               	movlb	0	; () banked
  5453  003D16  6F8E               	movwf	printf@f& (0+255),b
  5454  003D18  0EFE               	movlw	high STR_30
  5455  003D1A  0100               	movlb	0	; () banked
  5456  003D1C  6F8F               	movwf	(printf@f+1)& (0+255),b
  5457  003D1E  EC93  F008         	call	_printf	;wreg free
  5458  003D22  0012               	return		;funcret
  5459  003D24                     __end_of_change_state_to_menu_start:
  5460                           	opt stack 0
  5461                           tblptru	equ	0xFF8
  5462                           tblptrh	equ	0xFF7
  5463                           tblptrl	equ	0xFF6
  5464                           tablat	equ	0xFF5
  5465                           prodh	equ	0xFF4
  5466                           prodl	equ	0xFF3
  5467                           intcon	equ	0xFF2
  5468                           intcon2	equ	0xFF1
  5469                           intcon3	equ	0xFF0
  5470                           postinc0	equ	0xFEE
  5471                           wreg	equ	0xFE8
  5472                           postdec1	equ	0xFE5
  5473                           fsr1l	equ	0xFE1
  5474                           indf2	equ	0xFDF
  5475                           postinc2	equ	0xFDE
  5476                           postdec2	equ	0xFDD
  5477                           fsr2h	equ	0xFDA
  5478                           fsr2l	equ	0xFD9
  5479                           status	equ	0xFD8
  5480                           
  5481 ;; *************** function _initTime *****************
  5482 ;; Defined at:
  5483 ;;		line 17 in file "RTC.c"
  5484 ;; Parameters:    Size  Location     Type
  5485 ;;  s               1    wreg     unsigned char 
  5486 ;;  m               1    0[BANK0 ] unsigned char 
  5487 ;;  h               1    1[BANK0 ] unsigned char 
  5488 ;;  w               1    2[BANK0 ] unsigned char 
  5489 ;;  DD              1    3[BANK0 ] unsigned char 
  5490 ;;  MM              1    4[BANK0 ] unsigned char 
  5491 ;;  YY              1    5[BANK0 ] unsigned char 
  5492 ;; Auto vars:     Size  Location     Type
  5493 ;;  s               1    6[BANK0 ] unsigned char 
  5494 ;; Return value:  Size  Location     Type
  5495 ;;                  1    wreg      void 
  5496 ;; Registers used:
  5497 ;;		wreg
  5498 ;; Tracked objects:
  5499 ;;		On entry : 0/0
  5500 ;;		On exit  : 0/0
  5501 ;;		Unchanged: 0/0
  5502 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5503 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5504 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5505 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5506 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5507 ;;Total ram usage:        7 bytes
  5508 ;; Hardware stack levels used:    1
  5509 ;; Hardware stack levels required when called:    7
  5510 ;; This function calls:
  5511 ;;		Nothing
  5512 ;; This function is called by:
  5513 ;;		_main
  5514 ;; This function uses a non-reentrant model
  5515 ;;
  5516                           
  5517                           	psect	text19
  5518  003E58                     __ptext19:
  5519                           	opt stack 0
  5520  003E58                     _initTime:
  5521                           	opt stack 23
  5522                           
  5523                           ;incstack = 0
  5524                           ;initTime@s stored from wreg
  5525  003E58  0100               	movlb	0	; () banked
  5526  003E5A  6F86               	movwf	initTime@s& (0+255),b
  5527                           
  5528                           ;RTC.c: 19: time[0] = s;
  5529  003E5C  C086  F124         	movff	initTime@s,_time
  5530                           
  5531                           ;RTC.c: 20: time[1] = m;
  5532  003E60  C080  F125         	movff	initTime@m,_time+1
  5533                           
  5534                           ;RTC.c: 21: time[2] = h;
  5535  003E64  C081  F126         	movff	initTime@h,_time+2
  5536                           
  5537                           ;RTC.c: 22: time[3] = w;
  5538  003E68  C082  F127         	movff	initTime@w,_time+3
  5539                           
  5540                           ;RTC.c: 23: time[4] = DD;
  5541  003E6C  C083  F128         	movff	initTime@DD,_time+4
  5542                           
  5543                           ;RTC.c: 24: time[5] = MM;
  5544  003E70  C084  F129         	movff	initTime@MM,_time+5
  5545                           
  5546                           ;RTC.c: 25: time[6] = YY;
  5547  003E74  C085  F12A         	movff	initTime@YY,_time+6
  5548  003E78  0012               	return		;funcret
  5549  003E7A                     __end_of_initTime:
  5550                           	opt stack 0
  5551                           tblptru	equ	0xFF8
  5552                           tblptrh	equ	0xFF7
  5553                           tblptrl	equ	0xFF6
  5554                           tablat	equ	0xFF5
  5555                           prodh	equ	0xFF4
  5556                           prodl	equ	0xFF3
  5557                           intcon	equ	0xFF2
  5558                           intcon2	equ	0xFF1
  5559                           intcon3	equ	0xFF0
  5560                           postinc0	equ	0xFEE
  5561                           wreg	equ	0xFE8
  5562                           postdec1	equ	0xFE5
  5563                           fsr1l	equ	0xFE1
  5564                           indf2	equ	0xFDF
  5565                           postinc2	equ	0xFDE
  5566                           postdec2	equ	0xFDD
  5567                           fsr2h	equ	0xFDA
  5568                           fsr2l	equ	0xFD9
  5569                           status	equ	0xFD8
  5570                           
  5571 ;; *************** function _initLCD *****************
  5572 ;; Defined at:
  5573 ;;		line 48 in file "lcd.c"
  5574 ;; Parameters:    Size  Location     Type
  5575 ;;		None
  5576 ;; Auto vars:     Size  Location     Type
  5577 ;;		None
  5578 ;; Return value:  Size  Location     Type
  5579 ;;                  1    wreg      void 
  5580 ;; Registers used:
  5581 ;;		wreg, status,2, status,0, cstack
  5582 ;; Tracked objects:
  5583 ;;		On entry : 0/0
  5584 ;;		On exit  : 0/0
  5585 ;;		Unchanged: 0/0
  5586 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5587 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5588 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5589 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5590 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5591 ;;Total ram usage:        1 bytes
  5592 ;; Hardware stack levels used:    1
  5593 ;; Hardware stack levels required when called:    9
  5594 ;; This function calls:
  5595 ;;		_lcdInst
  5596 ;; This function is called by:
  5597 ;;		_main
  5598 ;; This function uses a non-reentrant model
  5599 ;;
  5600                           
  5601                           	psect	text20
  5602  003956                     __ptext20:
  5603                           	opt stack 0
  5604  003956                     _initLCD:
  5605                           	opt stack 21
  5606                           
  5607                           ;lcd.c: 49: _delay((unsigned long)((15)*(32000000/4000.0)));
  5608                           
  5609                           ;incstack = 0
  5610  003956  0E9C               	movlw	156
  5611  003958  0100               	movlb	0	; () banked
  5612  00395A  6F83               	movwf	??_initLCD& (0+255),b
  5613  00395C  0ED7               	movlw	215
  5614  00395E                     u6537:
  5615  00395E  2EE8               	decfsz	wreg,f,c
  5616  003960  D7FE               	bra	u6537
  5617  003962  2F83               	decfsz	??_initLCD& (0+255),f,b
  5618  003964  D7FC               	bra	u6537
  5619                           
  5620                           ;lcd.c: 50: lcdInst(0b00110011);
  5621  003966  0E33               	movlw	51
  5622  003968  EC92  F01F         	call	_lcdInst
  5623                           
  5624                           ;lcd.c: 51: lcdInst(0b00110010);
  5625  00396C  0E32               	movlw	50
  5626  00396E  EC92  F01F         	call	_lcdInst
  5627                           
  5628                           ;lcd.c: 53: lcdInst(0b00101000);
  5629  003972  0E28               	movlw	40
  5630  003974  EC92  F01F         	call	_lcdInst
  5631                           
  5632                           ;lcd.c: 54: lcdInst(0b00001100);
  5633  003978  0E0C               	movlw	12
  5634  00397A  EC92  F01F         	call	_lcdInst
  5635                           
  5636                           ;lcd.c: 55: lcdInst(0b00000110);
  5637  00397E  0E06               	movlw	6
  5638  003980  EC92  F01F         	call	_lcdInst
  5639                           
  5640                           ;lcd.c: 56: lcdInst(0b00000001);
  5641  003984  0E01               	movlw	1
  5642  003986  EC92  F01F         	call	_lcdInst
  5643                           
  5644                           ;lcd.c: 57: _delay((unsigned long)((15)*(32000000/4000.0)));
  5645  00398A  0E9C               	movlw	156
  5646  00398C  0100               	movlb	0	; () banked
  5647  00398E  6F83               	movwf	??_initLCD& (0+255),b
  5648  003990  0ED7               	movlw	215
  5649  003992                     u6547:
  5650  003992  2EE8               	decfsz	wreg,f,c
  5651  003994  D7FE               	bra	u6547
  5652  003996  2F83               	decfsz	??_initLCD& (0+255),f,b
  5653  003998  D7FC               	bra	u6547
  5654  00399A  0012               	return		;funcret
  5655  00399C                     __end_of_initLCD:
  5656                           	opt stack 0
  5657                           tblptru	equ	0xFF8
  5658                           tblptrh	equ	0xFF7
  5659                           tblptrl	equ	0xFF6
  5660                           tablat	equ	0xFF5
  5661                           prodh	equ	0xFF4
  5662                           prodl	equ	0xFF3
  5663                           intcon	equ	0xFF2
  5664                           intcon2	equ	0xFF1
  5665                           intcon3	equ	0xFF0
  5666                           postinc0	equ	0xFEE
  5667                           wreg	equ	0xFE8
  5668                           postdec1	equ	0xFE5
  5669                           fsr1l	equ	0xFE1
  5670                           indf2	equ	0xFDF
  5671                           postinc2	equ	0xFDE
  5672                           postdec2	equ	0xFDD
  5673                           fsr2h	equ	0xFDA
  5674                           fsr2l	equ	0xFD9
  5675                           status	equ	0xFD8
  5676                           
  5677 ;; *************** function _UI *****************
  5678 ;; Defined at:
  5679 ;;		line 74 in file "UI.c"
  5680 ;; Parameters:    Size  Location     Type
  5681 ;;		None
  5682 ;; Auto vars:     Size  Location     Type
  5683 ;;  i               1   73[BANK0 ] unsigned char 
  5684 ;;  i               1   85[BANK0 ] unsigned char 
  5685 ;;  i               1   84[BANK0 ] unsigned char 
  5686 ;;  i               1   83[BANK0 ] unsigned char 
  5687 ;;  i               1   82[BANK0 ] unsigned char 
  5688 ;;  i               1   81[BANK0 ] unsigned char 
  5689 ;;  i               1   80[BANK0 ] unsigned char 
  5690 ;;  i               1   79[BANK0 ] unsigned char 
  5691 ;;  i               1   78[BANK0 ] unsigned char 
  5692 ;;  i               1   77[BANK0 ] unsigned char 
  5693 ;;  i               1   76[BANK0 ] unsigned char 
  5694 ;;  i               1   75[BANK0 ] unsigned char 
  5695 ;;  i               1   74[BANK0 ] unsigned char 
  5696 ;;  month           4   86[BANK0 ] unsigned char [4]
  5697 ;;  i               1   72[BANK0 ] unsigned char 
  5698 ;; Return value:  Size  Location     Type
  5699 ;;                  1    wreg      void 
  5700 ;; Registers used:
  5701 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5702 ;; Tracked objects:
  5703 ;;		On entry : 0/0
  5704 ;;		On exit  : 0/0
  5705 ;;		Unchanged: 0/0
  5706 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5707 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5708 ;;      Locals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5709 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5710 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5711 ;;Total ram usage:       22 bytes
  5712 ;; Hardware stack levels used:    1
  5713 ;; Hardware stack levels required when called:   11
  5714 ;; This function calls:
  5715 ;;		___awdiv
  5716 ;;		___awmod
  5717 ;;		_change_state_to_menu_12
  5718 ;;		_change_state_to_menu_22
  5719 ;;		_lcdInst
  5720 ;;		_printRTC
  5721 ;;		_printf
  5722 ;;		_strcpy
  5723 ;; This function is called by:
  5724 ;;		_main
  5725 ;; This function uses a non-reentrant model
  5726 ;;
  5727                           
  5728                           	psect	text21
  5729  000012                     __ptext21:
  5730                           	opt stack 0
  5731  000012                     _UI:
  5732                           	opt stack 19
  5733                           
  5734                           ;UI.c: 75: if(machine_state == DoneSorting_state){
  5735                           
  5736                           ;incstack = 0
  5737  000012  0E02               	movlw	2
  5738  000014  0100               	movlb	0	; () banked
  5739  000016  19FC               	xorwf	_machine_state& (0+255),w,b
  5740  000018  A4D8               	btfss	status,2,c
  5741  00001A  D075               	goto	l6619
  5742                           
  5743                           ; BSR set to: 0
  5744                           ;UI.c: 76: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  5745  00001C  0E01               	movlw	1
  5746  00001E  EC92  F01F         	call	_lcdInst
  5747  000022  0E68               	movlw	104
  5748  000024  0100               	movlb	0	; () banked
  5749  000026  6FC4               	movwf	??_UI& (0+255),b
  5750  000028  0EE4               	movlw	228
  5751  00002A                     u6557:
  5752  00002A  2EE8               	decfsz	wreg,f,c
  5753  00002C  D7FE               	bra	u6557
  5754  00002E  2FC4               	decfsz	??_UI& (0+255),f,b
  5755  000030  D7FC               	bra	u6557
  5756  000032  F000               	nop	
  5757                           
  5758                           ;UI.c: 77: lcdInst(0b10000000);;
  5759  000034  0E80               	movlw	128
  5760  000036  EC92  F01F         	call	_lcdInst
  5761                           
  5762                           ;UI.c: 78: printf("RESULTS IN LOG %d", sel+1);
  5763  00003A  0E23               	movlw	low STR_1
  5764  00003C  0100               	movlb	0	; () banked
  5765  00003E  6F8E               	movwf	printf@f& (0+255),b
  5766  000040  0EFC               	movlw	high STR_1
  5767  000042  0100               	movlb	0	; () banked
  5768  000044  6F8F               	movwf	(printf@f+1)& (0+255),b
  5769  000046  0E01               	movlw	1
  5770  000048  0100               	movlb	0	; () banked
  5771  00004A  25FD               	addwf	_sel& (0+255),w,b
  5772  00004C  0100               	movlb	0	; () banked
  5773  00004E  6F90               	movwf	(?_printf+2)& (0+255),b
  5774  000050  0100               	movlb	0	; () banked
  5775  000052  6B91               	clrf	(?_printf+3)& (0+255),b
  5776  000054  0E00               	movlw	0
  5777  000056  2391               	addwfc	(?_printf+3)& (0+255),f,b
  5778  000058  EC93  F008         	call	_printf	;wreg free
  5779                           
  5780                           ;UI.c: 79: lcdInst(0b11000000);;
  5781  00005C  0EC0               	movlw	192
  5782  00005E  EC92  F01F         	call	_lcdInst
  5783                           
  5784                           ;UI.c: 80: printf("TIME: %d:%02d", (total_time % 3600) / 60, (total_time % 3600) % 60);
  5785  000062  0E0E               	movlw	14
  5786  000064  0100               	movlb	0	; () banked
  5787  000066  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  5788  000068  0E10               	movlw	16
  5789  00006A  6F82               	movwf	___awmod@divisor& (0+255),b
  5790  00006C  C0FA  F080         	movff	_total_time,___awmod@dividend
  5791  000070  C0FB  F081         	movff	_total_time+1,___awmod@dividend+1
  5792  000074  ECC2  F018         	call	___awmod	;wreg free
  5793  000078  C080  F0C6         	movff	?___awmod,_UI$2145
  5794  00007C  C081  F0C7         	movff	?___awmod+1,_UI$2145+1
  5795                           
  5796                           ;UI.c: 80: printf("TIME: %d:%02d", (total_time % 3600) / 60, (total_time % 3600) % 60);
  5797  000080  0E41               	movlw	low STR_2
  5798  000082  0100               	movlb	0	; () banked
  5799  000084  6F8E               	movwf	printf@f& (0+255),b
  5800  000086  0EFF               	movlw	high STR_2
  5801  000088  0100               	movlb	0	; () banked
  5802  00008A  6F8F               	movwf	(printf@f+1)& (0+255),b
  5803  00008C  0E0E               	movlw	14
  5804  00008E  0100               	movlb	0	; () banked
  5805  000090  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  5806  000092  0E10               	movlw	16
  5807  000094  6F82               	movwf	___awmod@divisor& (0+255),b
  5808  000096  C0FA  F080         	movff	_total_time,___awmod@dividend
  5809  00009A  C0FB  F081         	movff	_total_time+1,___awmod@dividend+1
  5810  00009E  ECC2  F018         	call	___awmod	;wreg free
  5811  0000A2  C080  F086         	movff	?___awmod,___awdiv@dividend
  5812  0000A6  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  5813  0000AA  0E00               	movlw	0
  5814  0000AC  0100               	movlb	0	; () banked
  5815  0000AE  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  5816  0000B0  0E3C               	movlw	60
  5817  0000B2  6F88               	movwf	___awdiv@divisor& (0+255),b
  5818  0000B4  ECB0  F017         	call	___awdiv	;wreg free
  5819  0000B8  C086  F090         	movff	?___awdiv,?_printf+2
  5820  0000BC  C087  F091         	movff	?___awdiv+1,?_printf+3
  5821  0000C0  C0C6  F080         	movff	_UI$2145,___awmod@dividend
  5822  0000C4  C0C7  F081         	movff	_UI$2145+1,___awmod@dividend+1
  5823  0000C8  0E00               	movlw	0
  5824  0000CA  0100               	movlb	0	; () banked
  5825  0000CC  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  5826  0000CE  0E3C               	movlw	60
  5827  0000D0  6F82               	movwf	___awmod@divisor& (0+255),b
  5828  0000D2  ECC2  F018         	call	___awmod	;wreg free
  5829  0000D6  C080  F092         	movff	?___awmod,?_printf+4
  5830  0000DA  C081  F093         	movff	?___awmod+1,?_printf+5
  5831  0000DE  EC93  F008         	call	_printf	;wreg free
  5832                           
  5833                           ;UI.c: 81: machine_state = UI_state;
  5834  0000E2  0E00               	movlw	0
  5835  0000E4  0100               	movlb	0	; () banked
  5836  0000E6  6FFC               	movwf	_machine_state& (0+255),b
  5837  0000E8                     l177:
  5838  0000E8  A281               	btfss	3969,1,c	;volatile
  5839  0000EA  D7FE               	goto	l177
  5840                           
  5841                           ;UI.c: 84: }
  5842                           ;UI.c: 85: if(cur_state==12){
  5843  0000EC  0E0C               	movlw	12
  5844  0000EE  0100               	movlb	0	; () banked
  5845  0000F0  19DE               	xorwf	_cur_state& (0+255),w,b
  5846  0000F2  0100               	movlb	0	; () banked
  5847  0000F4  11DF               	iorwf	(_cur_state+1)& (0+255),w,b
  5848  0000F6  A4D8               	btfss	status,2,c
  5849  0000F8  D003               	goto	l6617
  5850                           
  5851                           ; BSR set to: 0
  5852                           ;UI.c: 86: change_state_to_menu_12();
  5853  0000FA  EC0B  F01D         	call	_change_state_to_menu_12	;wreg free
  5854                           
  5855                           ;UI.c: 87: }
  5856  0000FE  D3D5               	goto	l6939
  5857  000100                     l6617:
  5858                           
  5859                           ;UI.c: 88: else{
  5860                           ;UI.c: 89: change_state_to_menu_22();
  5861  000100  ECEF  F01C         	call	_change_state_to_menu_22	;wreg free
  5862                           
  5863                           ;UI.c: 90: }
  5864                           ;UI.c: 91: }
  5865  000104  D3D2               	goto	l6939
  5866  000106                     l6619:
  5867                           
  5868                           ;UI.c: 92: else if(cur_state == 0){
  5869  000106  0100               	movlb	0	; () banked
  5870  000108  51DE               	movf	_cur_state& (0+255),w,b
  5871  00010A  0100               	movlb	0	; () banked
  5872  00010C  11DF               	iorwf	(_cur_state+1)& (0+255),w,b
  5873  00010E  A4D8               	btfss	status,2,c
  5874  000110  D3CC               	goto	l6939
  5875                           
  5876                           ; BSR set to: 0
  5877                           ;UI.c: 93: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
  5878  000112  0E00               	movlw	0
  5879  000114  0100               	movlb	0	; () banked
  5880  000116  6FC8               	movwf	UI@i& (0+255),b
  5881  000118                     l6623:
  5882                           
  5883                           ; BSR set to: 0
  5884  000118  0E63               	movlw	99
  5885  00011A  0100               	movlb	0	; () banked
  5886  00011C  65C8               	cpfsgt	UI@i& (0+255),b
  5887  00011E  D001               	goto	l6627
  5888  000120  D00C               	goto	l6631
  5889  000122                     l6627:
  5890                           
  5891                           ; BSR set to: 0
  5892  000122  0E68               	movlw	104
  5893  000124  0100               	movlb	0	; () banked
  5894  000126  6FC4               	movwf	??_UI& (0+255),b
  5895  000128  0EE4               	movlw	228
  5896  00012A                     u6567:
  5897  00012A  2EE8               	decfsz	wreg,f,c
  5898  00012C  D7FE               	bra	u6567
  5899  00012E  2FC4               	decfsz	??_UI& (0+255),f,b
  5900  000130  D7FC               	bra	u6567
  5901  000132  F000               	nop	
  5902  000134  0100               	movlb	0	; () banked
  5903  000136  2BC8               	incf	UI@i& (0+255),f,b
  5904  000138  D7EF               	goto	l6623
  5905  00013A                     l6631:
  5906                           
  5907                           ; BSR set to: 0
  5908                           ;UI.c: 94: if(cur_state == 0){
  5909  00013A  0100               	movlb	0	; () banked
  5910  00013C  51DE               	movf	_cur_state& (0+255),w,b
  5911  00013E  0100               	movlb	0	; () banked
  5912  000140  11DF               	iorwf	(_cur_state+1)& (0+255),w,b
  5913  000142  A4D8               	btfss	status,2,c
  5914  000144  D3B2               	goto	l6939
  5915                           
  5916                           ; BSR set to: 0
  5917                           ;UI.c: 95: printRTC();
  5918  000146  EC66  F00C         	call	_printRTC	;wreg free
  5919                           
  5920                           ;UI.c: 96: }
  5921                           ;UI.c: 97: }
  5922                           ;UI.c: 98: while(logstate){
  5923  00014A  D3AF               	goto	l6939
  5924  00014C                     l6635:
  5925                           
  5926                           ;UI.c: 100: if(!log_completion){
  5927  00014C  0100               	movlb	0	; () banked
  5928  00014E  51EA               	movf	_log_completion& (0+255),w,b
  5929  000150  0100               	movlb	0	; () banked
  5930  000152  11EB               	iorwf	(_log_completion+1)& (0+255),w,b
  5931  000154  A4D8               	btfss	status,2,c
  5932  000156  D041               	goto	l6665
  5933                           
  5934                           ; BSR set to: 0
  5935                           ;UI.c: 101: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  5936  000158  0E01               	movlw	1
  5937  00015A  EC92  F01F         	call	_lcdInst
  5938  00015E  0E68               	movlw	104
  5939  000160  0100               	movlb	0	; () banked
  5940  000162  6FC4               	movwf	??_UI& (0+255),b
  5941  000164  0EE4               	movlw	228
  5942  000166                     u6577:
  5943  000166  2EE8               	decfsz	wreg,f,c
  5944  000168  D7FE               	bra	u6577
  5945  00016A  2FC4               	decfsz	??_UI& (0+255),f,b
  5946  00016C  D7FC               	bra	u6577
  5947  00016E  F000               	nop	
  5948                           
  5949                           ;UI.c: 102: lcdInst(0b10000000);;
  5950  000170  0E80               	movlw	128
  5951  000172  EC92  F01F         	call	_lcdInst
  5952                           
  5953                           ;UI.c: 103: printf("-- LOG %2d HERE--", log);
  5954  000176  0E11               	movlw	low STR_3
  5955  000178  0100               	movlb	0	; () banked
  5956  00017A  6F8E               	movwf	printf@f& (0+255),b
  5957  00017C  0EFC               	movlw	high STR_3
  5958  00017E  0100               	movlb	0	; () banked
  5959  000180  6F8F               	movwf	(printf@f+1)& (0+255),b
  5960  000182  C0E8  F090         	movff	_log,?_printf+2
  5961  000186  C0E9  F091         	movff	_log+1,?_printf+3
  5962  00018A  EC93  F008         	call	_printf	;wreg free
  5963                           
  5964                           ;UI.c: 104: lcdInst(0b11000000);;
  5965  00018E  0EC0               	movlw	192
  5966  000190  EC92  F01F         	call	_lcdInst
  5967                           
  5968                           ;UI.c: 105: printf("DIDN'T COMPLETE");
  5969  000194  0E64               	movlw	low STR_4
  5970  000196  0100               	movlb	0	; () banked
  5971  000198  6F8E               	movwf	printf@f& (0+255),b
  5972  00019A  0EFE               	movlw	high STR_4
  5973  00019C  0100               	movlb	0	; () banked
  5974  00019E  6F8F               	movwf	(printf@f+1)& (0+255),b
  5975  0001A0  EC93  F008         	call	_printf	;wreg free
  5976  0001A4                     l6649:
  5977  0001A4  0E00               	movlw	0
  5978  0001A6  0100               	movlb	0	; () banked
  5979  0001A8  6FC9               	movwf	UI@i_408& (0+255),b
  5980  0001AA                     l6651:
  5981                           
  5982                           ; BSR set to: 0
  5983  0001AA  0E63               	movlw	99
  5984  0001AC  0100               	movlb	0	; () banked
  5985  0001AE  65C9               	cpfsgt	UI@i_408& (0+255),b
  5986  0001B0  D001               	goto	l6655
  5987  0001B2  D00C               	goto	l6659
  5988  0001B4                     l6655:
  5989                           
  5990                           ; BSR set to: 0
  5991  0001B4  0E68               	movlw	104
  5992  0001B6  0100               	movlb	0	; () banked
  5993  0001B8  6FC4               	movwf	??_UI& (0+255),b
  5994  0001BA  0EE4               	movlw	228
  5995  0001BC                     u6587:
  5996  0001BC  2EE8               	decfsz	wreg,f,c
  5997  0001BE  D7FE               	bra	u6587
  5998  0001C0  2FC4               	decfsz	??_UI& (0+255),f,b
  5999  0001C2  D7FC               	bra	u6587
  6000  0001C4  F000               	nop	
  6001  0001C6  0100               	movlb	0	; () banked
  6002  0001C8  2BC9               	incf	UI@i_408& (0+255),f,b
  6003  0001CA  D7EF               	goto	l6651
  6004  0001CC                     l6659:
  6005                           
  6006                           ; BSR set to: 0
  6007  0001CC  0100               	movlb	0	; () banked
  6008  0001CE  51F8               	movf	_logstate& (0+255),w,b
  6009  0001D0  0100               	movlb	0	; () banked
  6010  0001D2  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  6011  0001D4  B4D8               	btfsc	status,2,c
  6012  0001D6  0012               	return	
  6013  0001D8  D7E5               	goto	l6649
  6014  0001DA                     l6665:
  6015                           
  6016                           ; BSR set to: 0
  6017                           ;UI.c: 109: else{
  6018                           ;UI.c: 110: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  6019  0001DA  0E01               	movlw	1
  6020  0001DC  EC92  F01F         	call	_lcdInst
  6021  0001E0  0E68               	movlw	104
  6022  0001E2  0100               	movlb	0	; () banked
  6023  0001E4  6FC4               	movwf	??_UI& (0+255),b
  6024  0001E6  0EE4               	movlw	228
  6025  0001E8                     u6597:
  6026  0001E8  2EE8               	decfsz	wreg,f,c
  6027  0001EA  D7FE               	bra	u6597
  6028  0001EC  2FC4               	decfsz	??_UI& (0+255),f,b
  6029  0001EE  D7FC               	bra	u6597
  6030  0001F0  F000               	nop	
  6031                           
  6032                           ;UI.c: 111: lcdInst(0b10000000);;
  6033  0001F2  0E80               	movlw	128
  6034  0001F4  EC92  F01F         	call	_lcdInst
  6035                           
  6036                           ;UI.c: 112: printf("-- LOG %2d HERE--", log);
  6037  0001F8  0E11               	movlw	low STR_3
  6038  0001FA  0100               	movlb	0	; () banked
  6039  0001FC  6F8E               	movwf	printf@f& (0+255),b
  6040  0001FE  0EFC               	movlw	high STR_3
  6041  000200  0100               	movlb	0	; () banked
  6042  000202  6F8F               	movwf	(printf@f+1)& (0+255),b
  6043  000204  C0E8  F090         	movff	_log,?_printf+2
  6044  000208  C0E9  F091         	movff	_log+1,?_printf+3
  6045  00020C  EC93  F008         	call	_printf	;wreg free
  6046                           
  6047                           ;UI.c: 113: lcdInst(0b11000000);;
  6048  000210  0EC0               	movlw	192
  6049  000212  EC92  F01F         	call	_lcdInst
  6050                           
  6051                           ;UI.c: 114: printf("PAUSE < | BACK >");
  6052  000216  0E22               	movlw	low STR_6
  6053  000218  0100               	movlb	0	; () banked
  6054  00021A  6F8E               	movwf	printf@f& (0+255),b
  6055  00021C  0EFE               	movlw	high STR_6
  6056  00021E  0100               	movlb	0	; () banked
  6057  000220  6F8F               	movwf	(printf@f+1)& (0+255),b
  6058  000222  EC93  F008         	call	_printf	;wreg free
  6059                           
  6060                           ;UI.c: 116: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  6061  000226  0E00               	movlw	0
  6062  000228  0100               	movlb	0	; () banked
  6063  00022A  6FCA               	movwf	UI@i_411& (0+255),b
  6064  00022C                     l6679:
  6065                           
  6066                           ; BSR set to: 0
  6067  00022C  0E63               	movlw	99
  6068  00022E  0100               	movlb	0	; () banked
  6069  000230  65CA               	cpfsgt	UI@i_411& (0+255),b
  6070  000232  D001               	goto	l6683
  6071  000234  D00C               	goto	l6687
  6072  000236                     l6683:
  6073                           
  6074                           ; BSR set to: 0
  6075  000236  0E68               	movlw	104
  6076  000238  0100               	movlb	0	; () banked
  6077  00023A  6FC4               	movwf	??_UI& (0+255),b
  6078  00023C  0EE4               	movlw	228
  6079  00023E                     u6607:
  6080  00023E  2EE8               	decfsz	wreg,f,c
  6081  000240  D7FE               	bra	u6607
  6082  000242  2FC4               	decfsz	??_UI& (0+255),f,b
  6083  000244  D7FC               	bra	u6607
  6084  000246  F000               	nop	
  6085  000248  0100               	movlb	0	; () banked
  6086  00024A  2BCA               	incf	UI@i_411& (0+255),f,b
  6087  00024C  D7EF               	goto	l6679
  6088  00024E                     l6687:
  6089                           
  6090                           ; BSR set to: 0
  6091  00024E  0100               	movlb	0	; () banked
  6092  000250  51F8               	movf	_logstate& (0+255),w,b
  6093  000252  0100               	movlb	0	; () banked
  6094  000254  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  6095  000256  B4D8               	btfsc	status,2,c
  6096  000258  0012               	return	
  6097                           
  6098                           ; BSR set to: 0
  6099                           ;UI.c: 117: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  6100                           
  6101                           ; BSR set to: 0
  6102                           
  6103                           ; BSR set to: 0
  6104  00025A  0E00               	movlw	0
  6105  00025C  0100               	movlb	0	; () banked
  6106  00025E  6FCB               	movwf	UI@i_412& (0+255),b
  6107  000260                     l6693:
  6108                           
  6109                           ; BSR set to: 0
  6110  000260  0E63               	movlw	99
  6111  000262  0100               	movlb	0	; () banked
  6112  000264  65CB               	cpfsgt	UI@i_412& (0+255),b
  6113  000266  D001               	goto	l6697
  6114  000268  D00C               	goto	l6701
  6115  00026A                     l6697:
  6116                           
  6117                           ; BSR set to: 0
  6118  00026A  0E68               	movlw	104
  6119  00026C  0100               	movlb	0	; () banked
  6120  00026E  6FC4               	movwf	??_UI& (0+255),b
  6121  000270  0EE4               	movlw	228
  6122  000272                     u6617:
  6123  000272  2EE8               	decfsz	wreg,f,c
  6124  000274  D7FE               	bra	u6617
  6125  000276  2FC4               	decfsz	??_UI& (0+255),f,b
  6126  000278  D7FC               	bra	u6617
  6127  00027A  F000               	nop	
  6128  00027C  0100               	movlb	0	; () banked
  6129  00027E  2BCB               	incf	UI@i_412& (0+255),f,b
  6130  000280  D7EF               	goto	l6693
  6131  000282                     l6701:
  6132                           
  6133                           ; BSR set to: 0
  6134  000282  0100               	movlb	0	; () banked
  6135  000284  51F8               	movf	_logstate& (0+255),w,b
  6136  000286  0100               	movlb	0	; () banked
  6137  000288  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  6138  00028A  B4D8               	btfsc	status,2,c
  6139  00028C  0012               	return	
  6140                           
  6141                           ; BSR set to: 0
  6142                           ;UI.c: 119: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  6143                           
  6144                           ; BSR set to: 0
  6145                           
  6146                           ; BSR set to: 0
  6147  00028E  0E01               	movlw	1
  6148  000290  EC92  F01F         	call	_lcdInst
  6149  000294  0E68               	movlw	104
  6150  000296  0100               	movlb	0	; () banked
  6151  000298  6FC4               	movwf	??_UI& (0+255),b
  6152  00029A  0EE4               	movlw	228
  6153  00029C                     u6627:
  6154  00029C  2EE8               	decfsz	wreg,f,c
  6155  00029E  D7FE               	bra	u6627
  6156  0002A0  2FC4               	decfsz	??_UI& (0+255),f,b
  6157  0002A2  D7FC               	bra	u6627
  6158  0002A4  F000               	nop	
  6159                           
  6160                           ;UI.c: 120: lcdInst(0b10000000);;
  6161  0002A6  0E80               	movlw	128
  6162  0002A8  EC92  F01F         	call	_lcdInst
  6163                           
  6164                           ;UI.c: 121: printf("START:");
  6165  0002AC  0EC3               	movlw	low STR_7
  6166  0002AE  0100               	movlb	0	; () banked
  6167  0002B0  6F8E               	movwf	printf@f& (0+255),b
  6168  0002B2  0EFF               	movlw	high STR_7
  6169  0002B4  0100               	movlb	0	; () banked
  6170  0002B6  6F8F               	movwf	(printf@f+1)& (0+255),b
  6171  0002B8  EC93  F008         	call	_printf	;wreg free
  6172                           
  6173                           ;UI.c: 122: lcdInst(0b11000000);;
  6174  0002BC  0EC0               	movlw	192
  6175  0002BE  EC92  F01F         	call	_lcdInst
  6176                           
  6177                           ;UI.c: 123: char month[] = "MMM";
  6178  0002C2  C12D  F0D6         	movff	UI@F3220,UI@month
  6179  0002C6  C12E  F0D7         	movff	UI@F3220+1,UI@month+1
  6180  0002CA  C12F  F0D8         	movff	UI@F3220+2,UI@month+2
  6181  0002CE  C130  F0D9         	movff	UI@F3220+3,UI@month+3
  6182                           
  6183                           ;UI.c: 124: switch(log_startTime[5]){
  6184  0002D2  D0C3               	goto	l6745
  6185  0002D4                     l6717:
  6186                           
  6187                           ;UI.c: 126: strcpy(month, "JAN");
  6188  0002D4  0ED6               	movlw	low UI@month
  6189  0002D6  0100               	movlb	0	; () banked
  6190  0002D8  6F80               	movwf	strcpy@to& (0+255),b
  6191  0002DA  0E00               	movlw	high UI@month
  6192  0002DC  0100               	movlb	0	; () banked
  6193  0002DE  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6194  0002E0  0EDA               	movlw	low STR_8
  6195  0002E2  0100               	movlb	0	; () banked
  6196  0002E4  6F82               	movwf	strcpy@from& (0+255),b
  6197  0002E6  0EFF               	movlw	high STR_8
  6198  0002E8  0100               	movlb	0	; () banked
  6199  0002EA  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6200  0002EC  EC27  F01D         	call	_strcpy	;wreg free
  6201                           
  6202                           ;UI.c: 127: break;
  6203  0002F0  D0E6               	goto	l6747
  6204  0002F2                     l6719:
  6205                           
  6206                           ;UI.c: 129: strcpy(month, "FEB");
  6207  0002F2  0ED6               	movlw	low UI@month
  6208  0002F4  0100               	movlb	0	; () banked
  6209  0002F6  6F80               	movwf	strcpy@to& (0+255),b
  6210  0002F8  0E00               	movlw	high UI@month
  6211  0002FA  0100               	movlb	0	; () banked
  6212  0002FC  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6213  0002FE  0ECA               	movlw	low STR_9
  6214  000300  0100               	movlb	0	; () banked
  6215  000302  6F82               	movwf	strcpy@from& (0+255),b
  6216  000304  0EFF               	movlw	high STR_9
  6217  000306  0100               	movlb	0	; () banked
  6218  000308  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6219  00030A  EC27  F01D         	call	_strcpy	;wreg free
  6220                           
  6221                           ;UI.c: 130: break;
  6222  00030E  D0D7               	goto	l6747
  6223  000310                     l6721:
  6224                           
  6225                           ;UI.c: 132: strcpy(month, "MAR");
  6226  000310  0ED6               	movlw	low UI@month
  6227  000312  0100               	movlb	0	; () banked
  6228  000314  6F80               	movwf	strcpy@to& (0+255),b
  6229  000316  0E00               	movlw	high UI@month
  6230  000318  0100               	movlb	0	; () banked
  6231  00031A  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6232  00031C  0EE6               	movlw	low STR_10
  6233  00031E  0100               	movlb	0	; () banked
  6234  000320  6F82               	movwf	strcpy@from& (0+255),b
  6235  000322  0EFF               	movlw	high STR_10
  6236  000324  0100               	movlb	0	; () banked
  6237  000326  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6238  000328  EC27  F01D         	call	_strcpy	;wreg free
  6239                           
  6240                           ;UI.c: 133: break;
  6241  00032C  D0C8               	goto	l6747
  6242  00032E                     l6723:
  6243                           
  6244                           ;UI.c: 135: strcpy(month, "APR");
  6245  00032E  0ED6               	movlw	low UI@month
  6246  000330  0100               	movlb	0	; () banked
  6247  000332  6F80               	movwf	strcpy@to& (0+255),b
  6248  000334  0E00               	movlw	high UI@month
  6249  000336  0100               	movlb	0	; () banked
  6250  000338  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6251  00033A  0EEA               	movlw	low STR_11
  6252  00033C  0100               	movlb	0	; () banked
  6253  00033E  6F82               	movwf	strcpy@from& (0+255),b
  6254  000340  0EFF               	movlw	high STR_11
  6255  000342  0100               	movlb	0	; () banked
  6256  000344  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6257  000346  EC27  F01D         	call	_strcpy	;wreg free
  6258                           
  6259                           ;UI.c: 136: break;
  6260  00034A  D0B9               	goto	l6747
  6261  00034C                     l6725:
  6262                           
  6263                           ;UI.c: 138: strcpy(month, "MAY");
  6264  00034C  0ED6               	movlw	low UI@month
  6265  00034E  0100               	movlb	0	; () banked
  6266  000350  6F80               	movwf	strcpy@to& (0+255),b
  6267  000352  0E00               	movlw	high UI@month
  6268  000354  0100               	movlb	0	; () banked
  6269  000356  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6270  000358  0EFA               	movlw	low STR_12
  6271  00035A  0100               	movlb	0	; () banked
  6272  00035C  6F82               	movwf	strcpy@from& (0+255),b
  6273  00035E  0EFF               	movlw	high STR_12
  6274  000360  0100               	movlb	0	; () banked
  6275  000362  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6276  000364  EC27  F01D         	call	_strcpy	;wreg free
  6277                           
  6278                           ;UI.c: 139: break;
  6279  000368  D0AA               	goto	l6747
  6280  00036A                     l6727:
  6281                           
  6282                           ;UI.c: 141: strcpy(month, "JUN");
  6283  00036A  0ED6               	movlw	low UI@month
  6284  00036C  0100               	movlb	0	; () banked
  6285  00036E  6F80               	movwf	strcpy@to& (0+255),b
  6286  000370  0E00               	movlw	high UI@month
  6287  000372  0100               	movlb	0	; () banked
  6288  000374  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6289  000376  0EDE               	movlw	low STR_13
  6290  000378  0100               	movlb	0	; () banked
  6291  00037A  6F82               	movwf	strcpy@from& (0+255),b
  6292  00037C  0EFF               	movlw	high STR_13
  6293  00037E  0100               	movlb	0	; () banked
  6294  000380  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6295  000382  EC27  F01D         	call	_strcpy	;wreg free
  6296                           
  6297                           ;UI.c: 142: break;
  6298  000386  D09B               	goto	l6747
  6299  000388                     l6729:
  6300                           
  6301                           ;UI.c: 144: strcpy(month, "JUL");
  6302  000388  0ED6               	movlw	low UI@month
  6303  00038A  0100               	movlb	0	; () banked
  6304  00038C  6F80               	movwf	strcpy@to& (0+255),b
  6305  00038E  0E00               	movlw	high UI@month
  6306  000390  0100               	movlb	0	; () banked
  6307  000392  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6308  000394  0ED6               	movlw	low STR_14
  6309  000396  0100               	movlb	0	; () banked
  6310  000398  6F82               	movwf	strcpy@from& (0+255),b
  6311  00039A  0EFF               	movlw	high STR_14
  6312  00039C  0100               	movlb	0	; () banked
  6313  00039E  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6314  0003A0  EC27  F01D         	call	_strcpy	;wreg free
  6315                           
  6316                           ;UI.c: 145: break;
  6317  0003A4  D08C               	goto	l6747
  6318  0003A6                     l6731:
  6319                           
  6320                           ;UI.c: 147: strcpy(month, "AUG");
  6321  0003A6  0ED6               	movlw	low UI@month
  6322  0003A8  0100               	movlb	0	; () banked
  6323  0003AA  6F80               	movwf	strcpy@to& (0+255),b
  6324  0003AC  0E00               	movlw	high UI@month
  6325  0003AE  0100               	movlb	0	; () banked
  6326  0003B0  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6327  0003B2  0ED2               	movlw	low STR_15
  6328  0003B4  0100               	movlb	0	; () banked
  6329  0003B6  6F82               	movwf	strcpy@from& (0+255),b
  6330  0003B8  0EFF               	movlw	high STR_15
  6331  0003BA  0100               	movlb	0	; () banked
  6332  0003BC  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6333  0003BE  EC27  F01D         	call	_strcpy	;wreg free
  6334                           
  6335                           ;UI.c: 148: break;
  6336  0003C2  D07D               	goto	l6747
  6337  0003C4                     l6733:
  6338                           
  6339                           ;UI.c: 150: strcpy(month, "SEP");
  6340  0003C4  0ED6               	movlw	low UI@month
  6341  0003C6  0100               	movlb	0	; () banked
  6342  0003C8  6F80               	movwf	strcpy@to& (0+255),b
  6343  0003CA  0E00               	movlw	high UI@month
  6344  0003CC  0100               	movlb	0	; () banked
  6345  0003CE  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6346  0003D0  0EE2               	movlw	low STR_16
  6347  0003D2  0100               	movlb	0	; () banked
  6348  0003D4  6F82               	movwf	strcpy@from& (0+255),b
  6349  0003D6  0EFF               	movlw	high STR_16
  6350  0003D8  0100               	movlb	0	; () banked
  6351  0003DA  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6352  0003DC  EC27  F01D         	call	_strcpy	;wreg free
  6353                           
  6354                           ;UI.c: 151: break;
  6355  0003E0  D06E               	goto	l6747
  6356  0003E2                     l6735:
  6357                           
  6358                           ;UI.c: 153: strcpy(month, "OCT");
  6359  0003E2  0ED6               	movlw	low UI@month
  6360  0003E4  0100               	movlb	0	; () banked
  6361  0003E6  6F80               	movwf	strcpy@to& (0+255),b
  6362  0003E8  0E00               	movlw	high UI@month
  6363  0003EA  0100               	movlb	0	; () banked
  6364  0003EC  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6365  0003EE  0EF2               	movlw	low STR_17
  6366  0003F0  0100               	movlb	0	; () banked
  6367  0003F2  6F82               	movwf	strcpy@from& (0+255),b
  6368  0003F4  0EFF               	movlw	high STR_17
  6369  0003F6  0100               	movlb	0	; () banked
  6370  0003F8  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6371  0003FA  EC27  F01D         	call	_strcpy	;wreg free
  6372                           
  6373                           ;UI.c: 154: break;
  6374  0003FE  D05F               	goto	l6747
  6375  000400                     l6737:
  6376                           
  6377                           ;UI.c: 156: strcpy(month, "NOV");
  6378  000400  0ED6               	movlw	low UI@month
  6379  000402  0100               	movlb	0	; () banked
  6380  000404  6F80               	movwf	strcpy@to& (0+255),b
  6381  000406  0E00               	movlw	high UI@month
  6382  000408  0100               	movlb	0	; () banked
  6383  00040A  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6384  00040C  0EF6               	movlw	low STR_18
  6385  00040E  0100               	movlb	0	; () banked
  6386  000410  6F82               	movwf	strcpy@from& (0+255),b
  6387  000412  0EFF               	movlw	high STR_18
  6388  000414  0100               	movlb	0	; () banked
  6389  000416  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6390  000418  EC27  F01D         	call	_strcpy	;wreg free
  6391                           
  6392                           ;UI.c: 157: break;
  6393  00041C  D050               	goto	l6747
  6394  00041E                     l6739:
  6395                           
  6396                           ;UI.c: 159: strcpy(month, "DEC");
  6397  00041E  0ED6               	movlw	low UI@month
  6398  000420  0100               	movlb	0	; () banked
  6399  000422  6F80               	movwf	strcpy@to& (0+255),b
  6400  000424  0E00               	movlw	high UI@month
  6401  000426  0100               	movlb	0	; () banked
  6402  000428  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6403  00042A  0ECE               	movlw	low STR_19
  6404  00042C  0100               	movlb	0	; () banked
  6405  00042E  6F82               	movwf	strcpy@from& (0+255),b
  6406  000430  0EFF               	movlw	high STR_19
  6407  000432  0100               	movlb	0	; () banked
  6408  000434  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6409  000436  EC27  F01D         	call	_strcpy	;wreg free
  6410                           
  6411                           ;UI.c: 160: break;
  6412  00043A  D041               	goto	l6747
  6413  00043C                     l6741:
  6414                           
  6415                           ;UI.c: 162: strcpy(month, "ERR");
  6416  00043C  0ED6               	movlw	low UI@month
  6417  00043E  0100               	movlb	0	; () banked
  6418  000440  6F80               	movwf	strcpy@to& (0+255),b
  6419  000442  0E00               	movlw	high UI@month
  6420  000444  0100               	movlb	0	; () banked
  6421  000446  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6422  000448  0EEE               	movlw	low STR_20
  6423  00044A  0100               	movlb	0	; () banked
  6424  00044C  6F82               	movwf	strcpy@from& (0+255),b
  6425  00044E  0EFF               	movlw	high STR_20
  6426  000450  0100               	movlb	0	; () banked
  6427  000452  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6428  000454  EC27  F01D         	call	_strcpy	;wreg free
  6429                           
  6430                           ;UI.c: 164: }
  6431                           
  6432                           ;UI.c: 163: break;
  6433  000458  D032               	goto	l6747
  6434  00045A                     l6745:
  6435  00045A  EE21  F00A         	lfsr	2,_log_startTime+10
  6436  00045E  CFDE F0C4          	movff	postinc2,??_UI
  6437  000462  CFDD F0C5          	movff	postdec2,??_UI+1
  6438                           
  6439                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6440                           ; Switch size 1, requested type "space"
  6441                           ; Number of cases is 1, Range of values is 0 to 0
  6442                           ; switch strategies available:
  6443                           ; Name         Instructions Cycles
  6444                           ; simple_byte            4     3 (average)
  6445                           ;	Chosen strategy is simple_byte
  6446  000466  0100               	movlb	0	; () banked
  6447  000468  51C5               	movf	(??_UI+1)& (0+255),w,b
  6448  00046A  0A00               	xorlw	0	; case 0
  6449  00046C  A4D8               	btfss	status,2,c
  6450  00046E  D7E6               	goto	l6741
  6451                           
  6452                           ; BSR set to: 0
  6453                           ; Switch size 1, requested type "space"
  6454                           ; Number of cases is 12, Range of values is 1 to 12
  6455                           ; switch strategies available:
  6456                           ; Name         Instructions Cycles
  6457                           ; simple_byte           37    19 (average)
  6458                           ;	Chosen strategy is simple_byte
  6459  000470  0100               	movlb	0	; () banked
  6460  000472  51C4               	movf	??_UI& (0+255),w,b
  6461  000474  0A01               	xorlw	1	; case 1
  6462  000476  B4D8               	btfsc	status,2,c
  6463  000478  D72D               	goto	l6717
  6464  00047A  0A03               	xorlw	3	; case 2
  6465  00047C  B4D8               	btfsc	status,2,c
  6466  00047E  D739               	goto	l6719
  6467  000480  0A01               	xorlw	1	; case 3
  6468  000482  B4D8               	btfsc	status,2,c
  6469  000484  D745               	goto	l6721
  6470  000486  0A07               	xorlw	7	; case 4
  6471  000488  B4D8               	btfsc	status,2,c
  6472  00048A  D751               	goto	l6723
  6473  00048C  0A01               	xorlw	1	; case 5
  6474  00048E  B4D8               	btfsc	status,2,c
  6475  000490  D75D               	goto	l6725
  6476  000492  0A03               	xorlw	3	; case 6
  6477  000494  B4D8               	btfsc	status,2,c
  6478  000496  D769               	goto	l6727
  6479  000498  0A01               	xorlw	1	; case 7
  6480  00049A  B4D8               	btfsc	status,2,c
  6481  00049C  D775               	goto	l6729
  6482  00049E  0A0F               	xorlw	15	; case 8
  6483  0004A0  B4D8               	btfsc	status,2,c
  6484  0004A2  D781               	goto	l6731
  6485  0004A4  0A01               	xorlw	1	; case 9
  6486  0004A6  B4D8               	btfsc	status,2,c
  6487  0004A8  D78D               	goto	l6733
  6488  0004AA  0A03               	xorlw	3	; case 10
  6489  0004AC  B4D8               	btfsc	status,2,c
  6490  0004AE  D799               	goto	l6735
  6491  0004B0  0A01               	xorlw	1	; case 11
  6492  0004B2  B4D8               	btfsc	status,2,c
  6493  0004B4  D7A5               	goto	l6737
  6494  0004B6  0A07               	xorlw	7	; case 12
  6495  0004B8  B4D8               	btfsc	status,2,c
  6496  0004BA  D7B1               	goto	l6739
  6497  0004BC  D7BF               	goto	l6741
  6498  0004BE                     l6747:
  6499                           
  6500                           ;UI.c: 165: printf("%02d%s | %02d:%02d:%02d", log_startTime[4],month,log_startTime[2],lo
      +                          g_startTime[1],log_startTime[0]);
  6501  0004BE  0EBE               	movlw	low STR_21
  6502  0004C0  0100               	movlb	0	; () banked
  6503  0004C2  6F8E               	movwf	printf@f& (0+255),b
  6504  0004C4  0EFB               	movlw	high STR_21
  6505  0004C6  0100               	movlb	0	; () banked
  6506  0004C8  6F8F               	movwf	(printf@f+1)& (0+255),b
  6507  0004CA  C108  F090         	movff	_log_startTime+8,?_printf+2
  6508  0004CE  C109  F091         	movff	_log_startTime+9,?_printf+3
  6509  0004D2  0ED6               	movlw	low UI@month
  6510  0004D4  0100               	movlb	0	; () banked
  6511  0004D6  6F92               	movwf	(?_printf+4)& (0+255),b
  6512  0004D8  0E00               	movlw	high UI@month
  6513  0004DA  0100               	movlb	0	; () banked
  6514  0004DC  6F93               	movwf	(?_printf+5)& (0+255),b
  6515  0004DE  C104  F094         	movff	_log_startTime+4,?_printf+6
  6516  0004E2  C105  F095         	movff	_log_startTime+5,?_printf+7
  6517  0004E6  C102  F096         	movff	_log_startTime+2,?_printf+8
  6518  0004EA  C103  F097         	movff	_log_startTime+3,?_printf+9
  6519  0004EE  C100  F098         	movff	_log_startTime,?_printf+10
  6520  0004F2  C101  F099         	movff	_log_startTime+1,?_printf+11
  6521  0004F6  EC93  F008         	call	_printf	;wreg free
  6522                           
  6523                           ;UI.c: 167: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  6524  0004FA  0E00               	movlw	0
  6525  0004FC  0100               	movlb	0	; () banked
  6526  0004FE  6FCC               	movwf	UI@i_430& (0+255),b
  6527  000500                     l6751:
  6528                           
  6529                           ; BSR set to: 0
  6530  000500  0E63               	movlw	99
  6531  000502  0100               	movlb	0	; () banked
  6532  000504  65CC               	cpfsgt	UI@i_430& (0+255),b
  6533  000506  D001               	goto	l6755
  6534  000508  D00C               	goto	l6759
  6535  00050A                     l6755:
  6536                           
  6537                           ; BSR set to: 0
  6538  00050A  0E68               	movlw	104
  6539  00050C  0100               	movlb	0	; () banked
  6540  00050E  6FC4               	movwf	??_UI& (0+255),b
  6541  000510  0EE4               	movlw	228
  6542  000512                     u6637:
  6543  000512  2EE8               	decfsz	wreg,f,c
  6544  000514  D7FE               	bra	u6637
  6545  000516  2FC4               	decfsz	??_UI& (0+255),f,b
  6546  000518  D7FC               	bra	u6637
  6547  00051A  F000               	nop	
  6548  00051C  0100               	movlb	0	; () banked
  6549  00051E  2BCC               	incf	UI@i_430& (0+255),f,b
  6550  000520  D7EF               	goto	l6751
  6551  000522                     l6759:
  6552                           
  6553                           ; BSR set to: 0
  6554  000522  0100               	movlb	0	; () banked
  6555  000524  51F8               	movf	_logstate& (0+255),w,b
  6556  000526  0100               	movlb	0	; () banked
  6557  000528  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  6558  00052A  B4D8               	btfsc	status,2,c
  6559  00052C  0012               	return	
  6560                           
  6561                           ; BSR set to: 0
  6562                           ;UI.c: 168: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  6563                           
  6564                           ; BSR set to: 0
  6565                           
  6566                           ; BSR set to: 0
  6567  00052E  0E00               	movlw	0
  6568  000530  0100               	movlb	0	; () banked
  6569  000532  6FCD               	movwf	UI@i_431& (0+255),b
  6570  000534                     l6765:
  6571                           
  6572                           ; BSR set to: 0
  6573  000534  0E63               	movlw	99
  6574  000536  0100               	movlb	0	; () banked
  6575  000538  65CD               	cpfsgt	UI@i_431& (0+255),b
  6576  00053A  D001               	goto	l6769
  6577  00053C  D00C               	goto	l6773
  6578  00053E                     l6769:
  6579                           
  6580                           ; BSR set to: 0
  6581  00053E  0E68               	movlw	104
  6582  000540  0100               	movlb	0	; () banked
  6583  000542  6FC4               	movwf	??_UI& (0+255),b
  6584  000544  0EE4               	movlw	228
  6585  000546                     u6647:
  6586  000546  2EE8               	decfsz	wreg,f,c
  6587  000548  D7FE               	bra	u6647
  6588  00054A  2FC4               	decfsz	??_UI& (0+255),f,b
  6589  00054C  D7FC               	bra	u6647
  6590  00054E  F000               	nop	
  6591  000550  0100               	movlb	0	; () banked
  6592  000552  2BCD               	incf	UI@i_431& (0+255),f,b
  6593  000554  D7EF               	goto	l6765
  6594  000556                     l6773:
  6595                           
  6596                           ; BSR set to: 0
  6597  000556  0100               	movlb	0	; () banked
  6598  000558  51F8               	movf	_logstate& (0+255),w,b
  6599  00055A  0100               	movlb	0	; () banked
  6600  00055C  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  6601  00055E  B4D8               	btfsc	status,2,c
  6602  000560  0012               	return	
  6603                           
  6604                           ; BSR set to: 0
  6605                           ;UI.c: 170: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  6606                           
  6607                           ; BSR set to: 0
  6608                           
  6609                           ; BSR set to: 0
  6610  000562  0E01               	movlw	1
  6611  000564  EC92  F01F         	call	_lcdInst
  6612  000568  0E68               	movlw	104
  6613  00056A  0100               	movlb	0	; () banked
  6614  00056C  6FC4               	movwf	??_UI& (0+255),b
  6615  00056E  0EE4               	movlw	228
  6616  000570                     u6657:
  6617  000570  2EE8               	decfsz	wreg,f,c
  6618  000572  D7FE               	bra	u6657
  6619  000574  2FC4               	decfsz	??_UI& (0+255),f,b
  6620  000576  D7FC               	bra	u6657
  6621  000578  F000               	nop	
  6622                           
  6623                           ;UI.c: 171: lcdInst(0b10000000);;
  6624  00057A  0E80               	movlw	128
  6625  00057C  EC92  F01F         	call	_lcdInst
  6626                           
  6627                           ;UI.c: 172: printf("DURATION:");
  6628  000580  0EA3               	movlw	low STR_22
  6629  000582  0100               	movlb	0	; () banked
  6630  000584  6F8E               	movwf	printf@f& (0+255),b
  6631  000586  0EFF               	movlw	high STR_22
  6632  000588  0100               	movlb	0	; () banked
  6633  00058A  6F8F               	movwf	(printf@f+1)& (0+255),b
  6634  00058C  EC93  F008         	call	_printf	;wreg free
  6635                           
  6636                           ;UI.c: 173: lcdInst(0b11000000);;
  6637  000590  0EC0               	movlw	192
  6638  000592  EC92  F01F         	call	_lcdInst
  6639                           
  6640                           ;UI.c: 174: printf("%d MIN %d SEC", (log_total_time % 3600) / 60, (log_total_time % 3600
      +                          ) % 60);
  6641  000596  0E0E               	movlw	14
  6642  000598  0100               	movlb	0	; () banked
  6643  00059A  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  6644  00059C  0E10               	movlw	16
  6645  00059E  6F82               	movwf	___awmod@divisor& (0+255),b
  6646  0005A0  C0F6  F080         	movff	_log_total_time,___awmod@dividend
  6647  0005A4  C0F7  F081         	movff	_log_total_time+1,___awmod@dividend+1
  6648  0005A8  ECC2  F018         	call	___awmod	;wreg free
  6649  0005AC  C080  F0C6         	movff	?___awmod,_UI$2145
  6650  0005B0  C081  F0C7         	movff	?___awmod+1,_UI$2145+1
  6651                           
  6652                           ;UI.c: 174: printf("%d MIN %d SEC", (log_total_time % 3600) / 60, (log_total_time % 3600
      +                          ) % 60);
  6653  0005B4  0E33               	movlw	low STR_23
  6654  0005B6  0100               	movlb	0	; () banked
  6655  0005B8  6F8E               	movwf	printf@f& (0+255),b
  6656  0005BA  0EFF               	movlw	high STR_23
  6657  0005BC  0100               	movlb	0	; () banked
  6658  0005BE  6F8F               	movwf	(printf@f+1)& (0+255),b
  6659  0005C0  0E0E               	movlw	14
  6660  0005C2  0100               	movlb	0	; () banked
  6661  0005C4  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  6662  0005C6  0E10               	movlw	16
  6663  0005C8  6F82               	movwf	___awmod@divisor& (0+255),b
  6664  0005CA  C0F6  F080         	movff	_log_total_time,___awmod@dividend
  6665  0005CE  C0F7  F081         	movff	_log_total_time+1,___awmod@dividend+1
  6666  0005D2  ECC2  F018         	call	___awmod	;wreg free
  6667  0005D6  C080  F086         	movff	?___awmod,___awdiv@dividend
  6668  0005DA  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  6669  0005DE  0E00               	movlw	0
  6670  0005E0  0100               	movlb	0	; () banked
  6671  0005E2  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  6672  0005E4  0E3C               	movlw	60
  6673  0005E6  6F88               	movwf	___awdiv@divisor& (0+255),b
  6674  0005E8  ECB0  F017         	call	___awdiv	;wreg free
  6675  0005EC  C086  F090         	movff	?___awdiv,?_printf+2
  6676  0005F0  C087  F091         	movff	?___awdiv+1,?_printf+3
  6677  0005F4  C0C6  F080         	movff	_UI$2145,___awmod@dividend
  6678  0005F8  C0C7  F081         	movff	_UI$2145+1,___awmod@dividend+1
  6679  0005FC  0E00               	movlw	0
  6680  0005FE  0100               	movlb	0	; () banked
  6681  000600  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  6682  000602  0E3C               	movlw	60
  6683  000604  6F82               	movwf	___awmod@divisor& (0+255),b
  6684  000606  ECC2  F018         	call	___awmod	;wreg free
  6685  00060A  C080  F092         	movff	?___awmod,?_printf+4
  6686  00060E  C081  F093         	movff	?___awmod+1,?_printf+5
  6687  000612  EC93  F008         	call	_printf	;wreg free
  6688                           
  6689                           ;UI.c: 176: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  6690  000616  0E00               	movlw	0
  6691  000618  0100               	movlb	0	; () banked
  6692  00061A  6FCE               	movwf	UI@i_434& (0+255),b
  6693  00061C                     l6793:
  6694                           
  6695                           ; BSR set to: 0
  6696  00061C  0E63               	movlw	99
  6697  00061E  0100               	movlb	0	; () banked
  6698  000620  65CE               	cpfsgt	UI@i_434& (0+255),b
  6699  000622  D001               	goto	l6797
  6700  000624  D00C               	goto	l6801
  6701  000626                     l6797:
  6702                           
  6703                           ; BSR set to: 0
  6704  000626  0E68               	movlw	104
  6705  000628  0100               	movlb	0	; () banked
  6706  00062A  6FC4               	movwf	??_UI& (0+255),b
  6707  00062C  0EE4               	movlw	228
  6708  00062E                     u6667:
  6709  00062E  2EE8               	decfsz	wreg,f,c
  6710  000630  D7FE               	bra	u6667
  6711  000632  2FC4               	decfsz	??_UI& (0+255),f,b
  6712  000634  D7FC               	bra	u6667
  6713  000636  F000               	nop	
  6714  000638  0100               	movlb	0	; () banked
  6715  00063A  2BCE               	incf	UI@i_434& (0+255),f,b
  6716  00063C  D7EF               	goto	l6793
  6717  00063E                     l6801:
  6718                           
  6719                           ; BSR set to: 0
  6720  00063E  0100               	movlb	0	; () banked
  6721  000640  51F8               	movf	_logstate& (0+255),w,b
  6722  000642  0100               	movlb	0	; () banked
  6723  000644  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  6724  000646  B4D8               	btfsc	status,2,c
  6725  000648  0012               	return	
  6726                           
  6727                           ; BSR set to: 0
  6728                           ;UI.c: 177: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  6729                           
  6730                           ; BSR set to: 0
  6731                           
  6732                           ; BSR set to: 0
  6733  00064A  0E00               	movlw	0
  6734  00064C  0100               	movlb	0	; () banked
  6735  00064E  6FCF               	movwf	UI@i_435& (0+255),b
  6736  000650                     l6807:
  6737                           
  6738                           ; BSR set to: 0
  6739  000650  0E63               	movlw	99
  6740  000652  0100               	movlb	0	; () banked
  6741  000654  65CF               	cpfsgt	UI@i_435& (0+255),b
  6742  000656  D001               	goto	l6811
  6743  000658  D00C               	goto	l6815
  6744  00065A                     l6811:
  6745                           
  6746                           ; BSR set to: 0
  6747  00065A  0E68               	movlw	104
  6748  00065C  0100               	movlb	0	; () banked
  6749  00065E  6FC4               	movwf	??_UI& (0+255),b
  6750  000660  0EE4               	movlw	228
  6751  000662                     u6677:
  6752  000662  2EE8               	decfsz	wreg,f,c
  6753  000664  D7FE               	bra	u6677
  6754  000666  2FC4               	decfsz	??_UI& (0+255),f,b
  6755  000668  D7FC               	bra	u6677
  6756  00066A  F000               	nop	
  6757  00066C  0100               	movlb	0	; () banked
  6758  00066E  2BCF               	incf	UI@i_435& (0+255),f,b
  6759  000670  D7EF               	goto	l6807
  6760  000672                     l6815:
  6761                           
  6762                           ; BSR set to: 0
  6763  000672  0100               	movlb	0	; () banked
  6764  000674  51F8               	movf	_logstate& (0+255),w,b
  6765  000676  0100               	movlb	0	; () banked
  6766  000678  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  6767  00067A  B4D8               	btfsc	status,2,c
  6768  00067C  0012               	return	
  6769                           
  6770                           ; BSR set to: 0
  6771                           ;UI.c: 179: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  6772                           
  6773                           ; BSR set to: 0
  6774                           
  6775                           ; BSR set to: 0
  6776  00067E  0E01               	movlw	1
  6777  000680  EC92  F01F         	call	_lcdInst
  6778  000684  0E68               	movlw	104
  6779  000686  0100               	movlb	0	; () banked
  6780  000688  6FC4               	movwf	??_UI& (0+255),b
  6781  00068A  0EE4               	movlw	228
  6782  00068C                     u6687:
  6783  00068C  2EE8               	decfsz	wreg,f,c
  6784  00068E  D7FE               	bra	u6687
  6785  000690  2FC4               	decfsz	??_UI& (0+255),f,b
  6786  000692  D7FC               	bra	u6687
  6787  000694  F000               	nop	
  6788                           
  6789                           ;UI.c: 180: lcdInst(0b10000000);;
  6790  000696  0E80               	movlw	128
  6791  000698  EC92  F01F         	call	_lcdInst
  6792                           
  6793                           ;UI.c: 181: printf(" -- POP  CAN -- ");
  6794  00069C  0E78               	movlw	low STR_24
  6795  00069E  0100               	movlb	0	; () banked
  6796  0006A0  6F8E               	movwf	printf@f& (0+255),b
  6797  0006A2  0EFD               	movlw	high STR_24
  6798  0006A4  0100               	movlb	0	; () banked
  6799  0006A6  6F8F               	movwf	(printf@f+1)& (0+255),b
  6800  0006A8  EC93  F008         	call	_printf	;wreg free
  6801                           
  6802                           ;UI.c: 182: lcdInst(0b11000000);;
  6803  0006AC  0EC0               	movlw	192
  6804  0006AE  EC92  F01F         	call	_lcdInst
  6805                           
  6806                           ;UI.c: 183: printf("NO TAB: %d|TAB: %d", log_count_pop_no_tab, log_count_pop_w_tab);
  6807  0006B2  0EFE               	movlw	low STR_25
  6808  0006B4  0100               	movlb	0	; () banked
  6809  0006B6  6F8E               	movwf	printf@f& (0+255),b
  6810  0006B8  0EFB               	movlw	high STR_25
  6811  0006BA  0100               	movlb	0	; () banked
  6812  0006BC  6F8F               	movwf	(printf@f+1)& (0+255),b
  6813  0006BE  C0F0  F090         	movff	_log_count_pop_no_tab,?_printf+2
  6814  0006C2  C0F1  F091         	movff	_log_count_pop_no_tab+1,?_printf+3
  6815  0006C6  C0F2  F092         	movff	_log_count_pop_w_tab,?_printf+4
  6816  0006CA  C0F3  F093         	movff	_log_count_pop_w_tab+1,?_printf+5
  6817  0006CE  EC93  F008         	call	_printf	;wreg free
  6818                           
  6819                           ;UI.c: 185: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  6820  0006D2  0E00               	movlw	0
  6821  0006D4  0100               	movlb	0	; () banked
  6822  0006D6  6FD0               	movwf	UI@i_438& (0+255),b
  6823  0006D8                     l6833:
  6824                           
  6825                           ; BSR set to: 0
  6826  0006D8  0E63               	movlw	99
  6827  0006DA  0100               	movlb	0	; () banked
  6828  0006DC  65D0               	cpfsgt	UI@i_438& (0+255),b
  6829  0006DE  D001               	goto	l6837
  6830  0006E0  D00C               	goto	l6841
  6831  0006E2                     l6837:
  6832                           
  6833                           ; BSR set to: 0
  6834  0006E2  0E68               	movlw	104
  6835  0006E4  0100               	movlb	0	; () banked
  6836  0006E6  6FC4               	movwf	??_UI& (0+255),b
  6837  0006E8  0EE4               	movlw	228
  6838  0006EA                     u6697:
  6839  0006EA  2EE8               	decfsz	wreg,f,c
  6840  0006EC  D7FE               	bra	u6697
  6841  0006EE  2FC4               	decfsz	??_UI& (0+255),f,b
  6842  0006F0  D7FC               	bra	u6697
  6843  0006F2  F000               	nop	
  6844  0006F4  0100               	movlb	0	; () banked
  6845  0006F6  2BD0               	incf	UI@i_438& (0+255),f,b
  6846  0006F8  D7EF               	goto	l6833
  6847  0006FA                     l6841:
  6848                           
  6849                           ; BSR set to: 0
  6850  0006FA  0100               	movlb	0	; () banked
  6851  0006FC  51F8               	movf	_logstate& (0+255),w,b
  6852  0006FE  0100               	movlb	0	; () banked
  6853  000700  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  6854  000702  B4D8               	btfsc	status,2,c
  6855  000704  0012               	return	
  6856                           
  6857                           ; BSR set to: 0
  6858                           ;UI.c: 186: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  6859                           
  6860                           ; BSR set to: 0
  6861                           
  6862                           ; BSR set to: 0
  6863  000706  0E00               	movlw	0
  6864  000708  0100               	movlb	0	; () banked
  6865  00070A  6FD1               	movwf	UI@i_439& (0+255),b
  6866  00070C                     l6847:
  6867                           
  6868                           ; BSR set to: 0
  6869  00070C  0E63               	movlw	99
  6870  00070E  0100               	movlb	0	; () banked
  6871  000710  65D1               	cpfsgt	UI@i_439& (0+255),b
  6872  000712  D001               	goto	l6851
  6873  000714  D00C               	goto	l6855
  6874  000716                     l6851:
  6875                           
  6876                           ; BSR set to: 0
  6877  000716  0E68               	movlw	104
  6878  000718  0100               	movlb	0	; () banked
  6879  00071A  6FC4               	movwf	??_UI& (0+255),b
  6880  00071C  0EE4               	movlw	228
  6881  00071E                     u6707:
  6882  00071E  2EE8               	decfsz	wreg,f,c
  6883  000720  D7FE               	bra	u6707
  6884  000722  2FC4               	decfsz	??_UI& (0+255),f,b
  6885  000724  D7FC               	bra	u6707
  6886  000726  F000               	nop	
  6887  000728  0100               	movlb	0	; () banked
  6888  00072A  2BD1               	incf	UI@i_439& (0+255),f,b
  6889  00072C  D7EF               	goto	l6847
  6890  00072E                     l6855:
  6891                           
  6892                           ; BSR set to: 0
  6893  00072E  0100               	movlb	0	; () banked
  6894  000730  51F8               	movf	_logstate& (0+255),w,b
  6895  000732  0100               	movlb	0	; () banked
  6896  000734  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  6897  000736  B4D8               	btfsc	status,2,c
  6898  000738  0012               	return	
  6899                           
  6900                           ; BSR set to: 0
  6901                           ;UI.c: 188: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  6902                           
  6903                           ; BSR set to: 0
  6904                           
  6905                           ; BSR set to: 0
  6906  00073A  0E01               	movlw	1
  6907  00073C  EC92  F01F         	call	_lcdInst
  6908  000740  0E68               	movlw	104
  6909  000742  0100               	movlb	0	; () banked
  6910  000744  6FC4               	movwf	??_UI& (0+255),b
  6911  000746  0EE4               	movlw	228
  6912  000748                     u6717:
  6913  000748  2EE8               	decfsz	wreg,f,c
  6914  00074A  D7FE               	bra	u6717
  6915  00074C  2FC4               	decfsz	??_UI& (0+255),f,b
  6916  00074E  D7FC               	bra	u6717
  6917  000750  F000               	nop	
  6918                           
  6919                           ;UI.c: 189: lcdInst(0b10000000);;
  6920  000752  0E80               	movlw	128
  6921  000754  EC92  F01F         	call	_lcdInst
  6922                           
  6923                           ;UI.c: 190: printf(" -- SOUP CAN -- ");
  6924  000758  0E89               	movlw	low STR_26
  6925  00075A  0100               	movlb	0	; () banked
  6926  00075C  6F8E               	movwf	printf@f& (0+255),b
  6927  00075E  0EFD               	movlw	high STR_26
  6928  000760  0100               	movlb	0	; () banked
  6929  000762  6F8F               	movwf	(printf@f+1)& (0+255),b
  6930  000764  EC93  F008         	call	_printf	;wreg free
  6931                           
  6932                           ;UI.c: 191: lcdInst(0b11000000);;
  6933  000768  0EC0               	movlw	192
  6934  00076A  EC92  F01F         	call	_lcdInst
  6935                           
  6936                           ;UI.c: 192: printf("NO LAB: %d|LAB: %d", log_count_can_no_lab, log_count_can_w_lab);
  6937  00076E  0EEB               	movlw	low STR_27
  6938  000770  0100               	movlb	0	; () banked
  6939  000772  6F8E               	movwf	printf@f& (0+255),b
  6940  000774  0EFB               	movlw	high STR_27
  6941  000776  0100               	movlb	0	; () banked
  6942  000778  6F8F               	movwf	(printf@f+1)& (0+255),b
  6943  00077A  C0EC  F090         	movff	_log_count_can_no_lab,?_printf+2
  6944  00077E  C0ED  F091         	movff	_log_count_can_no_lab+1,?_printf+3
  6945  000782  C0EE  F092         	movff	_log_count_can_w_lab,?_printf+4
  6946  000786  C0EF  F093         	movff	_log_count_can_w_lab+1,?_printf+5
  6947  00078A  EC93  F008         	call	_printf	;wreg free
  6948                           
  6949                           ;UI.c: 194: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  6950  00078E  0E00               	movlw	0
  6951  000790  0100               	movlb	0	; () banked
  6952  000792  6FD2               	movwf	UI@i_442& (0+255),b
  6953  000794                     l6873:
  6954                           
  6955                           ; BSR set to: 0
  6956  000794  0E63               	movlw	99
  6957  000796  0100               	movlb	0	; () banked
  6958  000798  65D2               	cpfsgt	UI@i_442& (0+255),b
  6959  00079A  D001               	goto	l6877
  6960  00079C  D00C               	goto	l6881
  6961  00079E                     l6877:
  6962                           
  6963                           ; BSR set to: 0
  6964  00079E  0E68               	movlw	104
  6965  0007A0  0100               	movlb	0	; () banked
  6966  0007A2  6FC4               	movwf	??_UI& (0+255),b
  6967  0007A4  0EE4               	movlw	228
  6968  0007A6                     u6727:
  6969  0007A6  2EE8               	decfsz	wreg,f,c
  6970  0007A8  D7FE               	bra	u6727
  6971  0007AA  2FC4               	decfsz	??_UI& (0+255),f,b
  6972  0007AC  D7FC               	bra	u6727
  6973  0007AE  F000               	nop	
  6974  0007B0  0100               	movlb	0	; () banked
  6975  0007B2  2BD2               	incf	UI@i_442& (0+255),f,b
  6976  0007B4  D7EF               	goto	l6873
  6977  0007B6                     l6881:
  6978                           
  6979                           ; BSR set to: 0
  6980  0007B6  0100               	movlb	0	; () banked
  6981  0007B8  51F8               	movf	_logstate& (0+255),w,b
  6982  0007BA  0100               	movlb	0	; () banked
  6983  0007BC  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  6984  0007BE  B4D8               	btfsc	status,2,c
  6985  0007C0  0012               	return	
  6986                           
  6987                           ; BSR set to: 0
  6988                           ;UI.c: 195: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  6989                           
  6990                           ; BSR set to: 0
  6991                           
  6992                           ; BSR set to: 0
  6993  0007C2  0E00               	movlw	0
  6994  0007C4  0100               	movlb	0	; () banked
  6995  0007C6  6FD3               	movwf	UI@i_443& (0+255),b
  6996  0007C8                     l6887:
  6997                           
  6998                           ; BSR set to: 0
  6999  0007C8  0E63               	movlw	99
  7000  0007CA  0100               	movlb	0	; () banked
  7001  0007CC  65D3               	cpfsgt	UI@i_443& (0+255),b
  7002  0007CE  D001               	goto	l6891
  7003  0007D0  D00C               	goto	l6895
  7004  0007D2                     l6891:
  7005                           
  7006                           ; BSR set to: 0
  7007  0007D2  0E68               	movlw	104
  7008  0007D4  0100               	movlb	0	; () banked
  7009  0007D6  6FC4               	movwf	??_UI& (0+255),b
  7010  0007D8  0EE4               	movlw	228
  7011  0007DA                     u6737:
  7012  0007DA  2EE8               	decfsz	wreg,f,c
  7013  0007DC  D7FE               	bra	u6737
  7014  0007DE  2FC4               	decfsz	??_UI& (0+255),f,b
  7015  0007E0  D7FC               	bra	u6737
  7016  0007E2  F000               	nop	
  7017  0007E4  0100               	movlb	0	; () banked
  7018  0007E6  2BD3               	incf	UI@i_443& (0+255),f,b
  7019  0007E8  D7EF               	goto	l6887
  7020  0007EA                     l6895:
  7021                           
  7022                           ; BSR set to: 0
  7023  0007EA  0100               	movlb	0	; () banked
  7024  0007EC  51F8               	movf	_logstate& (0+255),w,b
  7025  0007EE  0100               	movlb	0	; () banked
  7026  0007F0  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  7027  0007F2  B4D8               	btfsc	status,2,c
  7028  0007F4  0012               	return	
  7029                           
  7030                           ; BSR set to: 0
  7031                           ;UI.c: 197: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7032                           
  7033                           ; BSR set to: 0
  7034                           
  7035                           ; BSR set to: 0
  7036  0007F6  0E01               	movlw	1
  7037  0007F8  EC92  F01F         	call	_lcdInst
  7038  0007FC  0E68               	movlw	104
  7039  0007FE  0100               	movlb	0	; () banked
  7040  000800  6FC4               	movwf	??_UI& (0+255),b
  7041  000802  0EE4               	movlw	228
  7042  000804                     u6747:
  7043  000804  2EE8               	decfsz	wreg,f,c
  7044  000806  D7FE               	bra	u6747
  7045  000808  2FC4               	decfsz	??_UI& (0+255),f,b
  7046  00080A  D7FC               	bra	u6747
  7047  00080C  F000               	nop	
  7048                           
  7049                           ;UI.c: 198: lcdInst(0b10000000);;
  7050  00080E  0E80               	movlw	128
  7051  000810  EC92  F01F         	call	_lcdInst
  7052                           
  7053                           ;UI.c: 199: printf("-- TOTAL CANS --");
  7054  000814  0E9A               	movlw	low STR_28
  7055  000816  0100               	movlb	0	; () banked
  7056  000818  6F8E               	movwf	printf@f& (0+255),b
  7057  00081A  0EFD               	movlw	high STR_28
  7058  00081C  0100               	movlb	0	; () banked
  7059  00081E  6F8F               	movwf	(printf@f+1)& (0+255),b
  7060  000820  EC93  F008         	call	_printf	;wreg free
  7061                           
  7062                           ;UI.c: 200: lcdInst(0b11000000);;
  7063  000824  0EC0               	movlw	192
  7064  000826  EC92  F01F         	call	_lcdInst
  7065                           
  7066                           ;UI.c: 201: printf("%d", log_count_total);
  7067  00082A  0EFB               	movlw	low (STR_27+16)
  7068  00082C  0100               	movlb	0	; () banked
  7069  00082E  6F8E               	movwf	printf@f& (0+255),b
  7070  000830  0EFB               	movlw	high (STR_27+16)
  7071  000832  0100               	movlb	0	; () banked
  7072  000834  6F8F               	movwf	(printf@f+1)& (0+255),b
  7073  000836  C0F4  F090         	movff	_log_count_total,?_printf+2
  7074  00083A  C0F5  F091         	movff	_log_count_total+1,?_printf+3
  7075  00083E  EC93  F008         	call	_printf	;wreg free
  7076                           
  7077                           ;UI.c: 203: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7078  000842  0E00               	movlw	0
  7079  000844  0100               	movlb	0	; () banked
  7080  000846  6FD4               	movwf	UI@i_446& (0+255),b
  7081  000848                     l6913:
  7082                           
  7083                           ; BSR set to: 0
  7084  000848  0E63               	movlw	99
  7085  00084A  0100               	movlb	0	; () banked
  7086  00084C  65D4               	cpfsgt	UI@i_446& (0+255),b
  7087  00084E  D001               	goto	l6917
  7088  000850  D00C               	goto	l6921
  7089  000852                     l6917:
  7090                           
  7091                           ; BSR set to: 0
  7092  000852  0E68               	movlw	104
  7093  000854  0100               	movlb	0	; () banked
  7094  000856  6FC4               	movwf	??_UI& (0+255),b
  7095  000858  0EE4               	movlw	228
  7096  00085A                     u6757:
  7097  00085A  2EE8               	decfsz	wreg,f,c
  7098  00085C  D7FE               	bra	u6757
  7099  00085E  2FC4               	decfsz	??_UI& (0+255),f,b
  7100  000860  D7FC               	bra	u6757
  7101  000862  F000               	nop	
  7102  000864  0100               	movlb	0	; () banked
  7103  000866  2BD4               	incf	UI@i_446& (0+255),f,b
  7104  000868  D7EF               	goto	l6913
  7105  00086A                     l6921:
  7106                           
  7107                           ; BSR set to: 0
  7108  00086A  0100               	movlb	0	; () banked
  7109  00086C  51F8               	movf	_logstate& (0+255),w,b
  7110  00086E  0100               	movlb	0	; () banked
  7111  000870  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  7112  000872  B4D8               	btfsc	status,2,c
  7113  000874  0012               	return	
  7114                           
  7115                           ; BSR set to: 0
  7116                           ;UI.c: 204: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7117                           
  7118                           ; BSR set to: 0
  7119                           
  7120                           ; BSR set to: 0
  7121  000876  0E00               	movlw	0
  7122  000878  0100               	movlb	0	; () banked
  7123  00087A  6FD5               	movwf	UI@i_447& (0+255),b
  7124  00087C                     l6927:
  7125                           
  7126                           ; BSR set to: 0
  7127  00087C  0E63               	movlw	99
  7128  00087E  0100               	movlb	0	; () banked
  7129  000880  65D5               	cpfsgt	UI@i_447& (0+255),b
  7130  000882  D001               	goto	l6931
  7131  000884  D00C               	goto	l6935
  7132  000886                     l6931:
  7133                           
  7134                           ; BSR set to: 0
  7135  000886  0E68               	movlw	104
  7136  000888  0100               	movlb	0	; () banked
  7137  00088A  6FC4               	movwf	??_UI& (0+255),b
  7138  00088C  0EE4               	movlw	228
  7139  00088E                     u6767:
  7140  00088E  2EE8               	decfsz	wreg,f,c
  7141  000890  D7FE               	bra	u6767
  7142  000892  2FC4               	decfsz	??_UI& (0+255),f,b
  7143  000894  D7FC               	bra	u6767
  7144  000896  F000               	nop	
  7145  000898  0100               	movlb	0	; () banked
  7146  00089A  2BD5               	incf	UI@i_447& (0+255),f,b
  7147  00089C  D7EF               	goto	l6927
  7148  00089E                     l6935:
  7149                           
  7150                           ; BSR set to: 0
  7151  00089E  0100               	movlb	0	; () banked
  7152  0008A0  51F8               	movf	_logstate& (0+255),w,b
  7153  0008A2  0100               	movlb	0	; () banked
  7154  0008A4  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  7155  0008A6  B4D8               	btfsc	status,2,c
  7156  0008A8  0012               	return	
  7157  0008AA                     l6939:
  7158  0008AA  0100               	movlb	0	; () banked
  7159  0008AC  51F8               	movf	_logstate& (0+255),w,b
  7160  0008AE  0100               	movlb	0	; () banked
  7161  0008B0  11F9               	iorwf	(_logstate+1)& (0+255),w,b
  7162  0008B2  B4D8               	btfsc	status,2,c
  7163  0008B4  0012               	return	
  7164  0008B6  D44A               	goto	l6635
  7165  0008B8                     __end_of_UI:
  7166                           	opt stack 0
  7167                           tblptru	equ	0xFF8
  7168                           tblptrh	equ	0xFF7
  7169                           tblptrl	equ	0xFF6
  7170                           tablat	equ	0xFF5
  7171                           prodh	equ	0xFF4
  7172                           prodl	equ	0xFF3
  7173                           intcon	equ	0xFF2
  7174                           intcon2	equ	0xFF1
  7175                           intcon3	equ	0xFF0
  7176                           postinc0	equ	0xFEE
  7177                           wreg	equ	0xFE8
  7178                           postdec1	equ	0xFE5
  7179                           fsr1l	equ	0xFE1
  7180                           indf2	equ	0xFDF
  7181                           postinc2	equ	0xFDE
  7182                           postdec2	equ	0xFDD
  7183                           fsr2h	equ	0xFDA
  7184                           fsr2l	equ	0xFD9
  7185                           status	equ	0xFD8
  7186                           
  7187 ;; *************** function _printRTC *****************
  7188 ;; Defined at:
  7189 ;;		line 63 in file "RTC.c"
  7190 ;; Parameters:    Size  Location     Type
  7191 ;;		None
  7192 ;; Auto vars:     Size  Location     Type
  7193 ;;  i               2   66[BANK0 ] int 
  7194 ;;  INT_time       14   46[BANK0 ] int [7]
  7195 ;;  month           4   62[BANK0 ] unsigned char [4]
  7196 ;;  RTC_month       2   60[BANK0 ] int 
  7197 ;; Return value:  Size  Location     Type
  7198 ;;                  1    wreg      void 
  7199 ;; Registers used:
  7200 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7201 ;; Tracked objects:
  7202 ;;		On entry : 0/0
  7203 ;;		On exit  : 0/0
  7204 ;;		Unchanged: 0/0
  7205 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7206 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7207 ;;      Locals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7208 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7209 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7210 ;;Total ram usage:       25 bytes
  7211 ;; Hardware stack levels used:    1
  7212 ;; Hardware stack levels required when called:   10
  7213 ;; This function calls:
  7214 ;;		_getRTC
  7215 ;;		_lcdInst
  7216 ;;		_printf
  7217 ;;		_strcpy
  7218 ;; This function is called by:
  7219 ;;		_UI
  7220 ;;		_change_state_to_menu_start
  7221 ;; This function uses a non-reentrant model
  7222 ;;
  7223                           
  7224                           	psect	text22
  7225  0018CC                     __ptext22:
  7226                           	opt stack 0
  7227  0018CC                     _printRTC:
  7228                           	opt stack 18
  7229                           
  7230                           ;RTC.c: 64: getRTC();
  7231                           
  7232                           ; BSR set to: 0
  7233                           ;incstack = 0
  7234  0018CC  ECA7  F019         	call	_getRTC	;wreg free
  7235                           
  7236                           ;RTC.c: 65: char month[] = "MMM";
  7237  0018D0  C131  F0BE         	movff	printRTC@F3211,printRTC@month
  7238  0018D4  C132  F0BF         	movff	printRTC@F3211+1,printRTC@month+1
  7239  0018D8  C133  F0C0         	movff	printRTC@F3211+2,printRTC@month+2
  7240  0018DC  C134  F0C1         	movff	printRTC@F3211+3,printRTC@month+3
  7241                           
  7242                           ;RTC.c: 66: int INT_time[7];
  7243                           ;RTC.c: 67: for(int i = 0; i < 7; i++){
  7244  0018E0  0E00               	movlw	0
  7245  0018E2  0100               	movlb	0	; () banked
  7246  0018E4  6FC3               	movwf	(printRTC@i+1)& (0+255),b
  7247  0018E6  0E00               	movlw	0
  7248  0018E8  6FC2               	movwf	printRTC@i& (0+255),b
  7249                           
  7250                           ; BSR set to: 0
  7251  0018EA  0100               	movlb	0	; () banked
  7252  0018EC  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
  7253  0018EE  D008               	goto	l5345
  7254  0018F0  0100               	movlb	0	; () banked
  7255  0018F2  51C3               	movf	(printRTC@i+1)& (0+255),w,b
  7256  0018F4  E146               	bnz	l591
  7257  0018F6  0E07               	movlw	7
  7258  0018F8  0100               	movlb	0	; () banked
  7259  0018FA  5DC2               	subwf	printRTC@i& (0+255),w,b
  7260  0018FC  B0D8               	btfsc	status,0,c
  7261  0018FE  D041               	goto	l591
  7262  001900                     l5345:
  7263                           
  7264                           ; BSR set to: 0
  7265                           ;RTC.c: 68: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  7266  001900  0E24               	movlw	low _time
  7267  001902  0100               	movlb	0	; () banked
  7268  001904  25C2               	addwf	printRTC@i& (0+255),w,b
  7269  001906  6ED9               	movwf	fsr2l,c
  7270  001908  0E01               	movlw	high _time
  7271  00190A  0100               	movlb	0	; () banked
  7272  00190C  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
  7273  00190E  6EDA               	movwf	fsr2h,c
  7274  001910  50DF               	movf	indf2,w,c
  7275  001912  0100               	movlb	0	; () banked
  7276  001914  6FAB               	movwf	??_printRTC& (0+255),b
  7277  001916  0100               	movlb	0	; () banked
  7278  001918  3BAB               	swapf	??_printRTC& (0+255),f,b
  7279  00191A  0E0F               	movlw	15
  7280  00191C  17AB               	andwf	??_printRTC& (0+255),f,b
  7281  00191E  0E0F               	movlw	15
  7282  001920  0100               	movlb	0	; () banked
  7283  001922  17AB               	andwf	??_printRTC& (0+255),f,b
  7284  001924  0100               	movlb	0	; () banked
  7285  001926  51AB               	movf	??_printRTC& (0+255),w,b
  7286  001928  0D0A               	mullw	10
  7287  00192A  0E24               	movlw	low _time
  7288  00192C  0100               	movlb	0	; () banked
  7289  00192E  25C2               	addwf	printRTC@i& (0+255),w,b
  7290  001930  6ED9               	movwf	fsr2l,c
  7291  001932  0E01               	movlw	high _time
  7292  001934  0100               	movlb	0	; () banked
  7293  001936  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
  7294  001938  6EDA               	movwf	fsr2h,c
  7295  00193A  50DF               	movf	indf2,w,c
  7296  00193C  0B0F               	andlw	15
  7297  00193E  0100               	movlb	0	; () banked
  7298  001940  6FAC               	movwf	(??_printRTC+1)& (0+255),b
  7299  001942  6BAD               	clrf	(??_printRTC+2)& (0+255),b
  7300  001944  50F3               	movf	prodl,w,c
  7301  001946  0100               	movlb	0	; () banked
  7302  001948  27AC               	addwf	(??_printRTC+1)& (0+255),f,b
  7303  00194A  50F4               	movf	prodh,w,c
  7304  00194C  0100               	movlb	0	; () banked
  7305  00194E  23AD               	addwfc	(??_printRTC+2)& (0+255),f,b
  7306  001950  90D8               	bcf	status,0,c
  7307  001952  0100               	movlb	0	; () banked
  7308  001954  35C2               	rlcf	printRTC@i& (0+255),w,b
  7309  001956  6ED9               	movwf	fsr2l,c
  7310  001958  0100               	movlb	0	; () banked
  7311  00195A  35C3               	rlcf	(printRTC@i+1)& (0+255),w,b
  7312  00195C  6EDA               	movwf	fsr2h,c
  7313  00195E  0EAE               	movlw	low printRTC@INT_time
  7314  001960  26D9               	addwf	fsr2l,f,c
  7315  001962  0E00               	movlw	high printRTC@INT_time
  7316  001964  22DA               	addwfc	fsr2h,f,c
  7317  001966  C0AC  FFDE         	movff	??_printRTC+1,postinc2
  7318  00196A  C0AD  FFDD         	movff	??_printRTC+2,postdec2
  7319                           
  7320                           ; BSR set to: 0
  7321  00196E  0100               	movlb	0	; () banked
  7322  001970  4BC2               	infsnz	printRTC@i& (0+255),f,b
  7323  001972  2BC3               	incf	(printRTC@i+1)& (0+255),f,b
  7324                           
  7325                           ; BSR set to: 0
  7326  001974  0100               	movlb	0	; () banked
  7327  001976  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
  7328  001978  D7C3               	goto	l5345
  7329  00197A  0100               	movlb	0	; () banked
  7330  00197C  51C3               	movf	(printRTC@i+1)& (0+255),w,b
  7331  00197E  E101               	bnz	u4170
  7332  001980  D7BA               	goto	L5
  7333  001982                     u4170:
  7334  001982                     l591:
  7335                           
  7336                           ; BSR set to: 0
  7337                           ;RTC.c: 69: }
  7338                           ;RTC.c: 70: int RTC_month = INT_time[5];
  7339  001982  C0B8  F0BC         	movff	printRTC@INT_time+10,printRTC@RTC_month
  7340  001986  C0B9  F0BD         	movff	printRTC@INT_time+11,printRTC@RTC_month+1
  7341                           
  7342                           ;RTC.c: 71: switch(RTC_month){
  7343  00198A  D0B4               	goto	l5377
  7344  00198C                     l5351:
  7345                           
  7346                           ; BSR set to: 0
  7347                           ;RTC.c: 73: strcpy(month, "JAN");
  7348  00198C  0EBE               	movlw	low printRTC@month
  7349  00198E  0100               	movlb	0	; () banked
  7350  001990  6F80               	movwf	strcpy@to& (0+255),b
  7351  001992  0E00               	movlw	high printRTC@month
  7352  001994  0100               	movlb	0	; () banked
  7353  001996  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7354  001998  0EDA               	movlw	low STR_8
  7355  00199A  0100               	movlb	0	; () banked
  7356  00199C  6F82               	movwf	strcpy@from& (0+255),b
  7357  00199E  0EFF               	movlw	high STR_8
  7358  0019A0  0100               	movlb	0	; () banked
  7359  0019A2  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7360  0019A4  EC27  F01D         	call	_strcpy	;wreg free
  7361                           
  7362                           ;RTC.c: 74: break;
  7363  0019A8  D0D4               	goto	l5379
  7364  0019AA                     l5353:
  7365                           
  7366                           ;RTC.c: 76: strcpy(month, "FEB");
  7367  0019AA  0EBE               	movlw	low printRTC@month
  7368  0019AC  0100               	movlb	0	; () banked
  7369  0019AE  6F80               	movwf	strcpy@to& (0+255),b
  7370  0019B0  0E00               	movlw	high printRTC@month
  7371  0019B2  0100               	movlb	0	; () banked
  7372  0019B4  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7373  0019B6  0ECA               	movlw	low STR_9
  7374  0019B8  0100               	movlb	0	; () banked
  7375  0019BA  6F82               	movwf	strcpy@from& (0+255),b
  7376  0019BC  0EFF               	movlw	high STR_9
  7377  0019BE  0100               	movlb	0	; () banked
  7378  0019C0  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7379  0019C2  EC27  F01D         	call	_strcpy	;wreg free
  7380                           
  7381                           ;RTC.c: 77: break;
  7382  0019C6  D0C5               	goto	l5379
  7383  0019C8                     l5355:
  7384                           
  7385                           ;RTC.c: 79: strcpy(month, "MAR");
  7386  0019C8  0EBE               	movlw	low printRTC@month
  7387  0019CA  0100               	movlb	0	; () banked
  7388  0019CC  6F80               	movwf	strcpy@to& (0+255),b
  7389  0019CE  0E00               	movlw	high printRTC@month
  7390  0019D0  0100               	movlb	0	; () banked
  7391  0019D2  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7392  0019D4  0EE6               	movlw	low STR_10
  7393  0019D6  0100               	movlb	0	; () banked
  7394  0019D8  6F82               	movwf	strcpy@from& (0+255),b
  7395  0019DA  0EFF               	movlw	high STR_10
  7396  0019DC  0100               	movlb	0	; () banked
  7397  0019DE  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7398  0019E0  EC27  F01D         	call	_strcpy	;wreg free
  7399                           
  7400                           ;RTC.c: 80: break;
  7401  0019E4  D0B6               	goto	l5379
  7402  0019E6                     l5357:
  7403                           
  7404                           ;RTC.c: 82: strcpy(month, "APR");
  7405  0019E6  0EBE               	movlw	low printRTC@month
  7406  0019E8  0100               	movlb	0	; () banked
  7407  0019EA  6F80               	movwf	strcpy@to& (0+255),b
  7408  0019EC  0E00               	movlw	high printRTC@month
  7409  0019EE  0100               	movlb	0	; () banked
  7410  0019F0  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7411  0019F2  0EEA               	movlw	low STR_11
  7412  0019F4  0100               	movlb	0	; () banked
  7413  0019F6  6F82               	movwf	strcpy@from& (0+255),b
  7414  0019F8  0EFF               	movlw	high STR_11
  7415  0019FA  0100               	movlb	0	; () banked
  7416  0019FC  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7417  0019FE  EC27  F01D         	call	_strcpy	;wreg free
  7418                           
  7419                           ;RTC.c: 83: break;
  7420  001A02  D0A7               	goto	l5379
  7421  001A04                     l5359:
  7422                           
  7423                           ;RTC.c: 85: strcpy(month, "MAY");
  7424  001A04  0EBE               	movlw	low printRTC@month
  7425  001A06  0100               	movlb	0	; () banked
  7426  001A08  6F80               	movwf	strcpy@to& (0+255),b
  7427  001A0A  0E00               	movlw	high printRTC@month
  7428  001A0C  0100               	movlb	0	; () banked
  7429  001A0E  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7430  001A10  0EFA               	movlw	low STR_12
  7431  001A12  0100               	movlb	0	; () banked
  7432  001A14  6F82               	movwf	strcpy@from& (0+255),b
  7433  001A16  0EFF               	movlw	high STR_12
  7434  001A18  0100               	movlb	0	; () banked
  7435  001A1A  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7436  001A1C  EC27  F01D         	call	_strcpy	;wreg free
  7437                           
  7438                           ;RTC.c: 86: break;
  7439  001A20  D098               	goto	l5379
  7440  001A22                     l5361:
  7441                           
  7442                           ;RTC.c: 88: strcpy(month, "JUN");
  7443  001A22  0EBE               	movlw	low printRTC@month
  7444  001A24  0100               	movlb	0	; () banked
  7445  001A26  6F80               	movwf	strcpy@to& (0+255),b
  7446  001A28  0E00               	movlw	high printRTC@month
  7447  001A2A  0100               	movlb	0	; () banked
  7448  001A2C  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7449  001A2E  0EDE               	movlw	low STR_13
  7450  001A30  0100               	movlb	0	; () banked
  7451  001A32  6F82               	movwf	strcpy@from& (0+255),b
  7452  001A34  0EFF               	movlw	high STR_13
  7453  001A36  0100               	movlb	0	; () banked
  7454  001A38  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7455  001A3A  EC27  F01D         	call	_strcpy	;wreg free
  7456                           
  7457                           ;RTC.c: 89: break;
  7458  001A3E  D089               	goto	l5379
  7459  001A40                     l5363:
  7460                           
  7461                           ;RTC.c: 91: strcpy(month, "JUL");
  7462  001A40  0EBE               	movlw	low printRTC@month
  7463  001A42  0100               	movlb	0	; () banked
  7464  001A44  6F80               	movwf	strcpy@to& (0+255),b
  7465  001A46  0E00               	movlw	high printRTC@month
  7466  001A48  0100               	movlb	0	; () banked
  7467  001A4A  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7468  001A4C  0ED6               	movlw	low STR_14
  7469  001A4E  0100               	movlb	0	; () banked
  7470  001A50  6F82               	movwf	strcpy@from& (0+255),b
  7471  001A52  0EFF               	movlw	high STR_14
  7472  001A54  0100               	movlb	0	; () banked
  7473  001A56  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7474  001A58  EC27  F01D         	call	_strcpy	;wreg free
  7475                           
  7476                           ;RTC.c: 92: break;
  7477  001A5C  D07A               	goto	l5379
  7478  001A5E                     l5365:
  7479                           
  7480                           ;RTC.c: 94: strcpy(month, "AUG");
  7481  001A5E  0EBE               	movlw	low printRTC@month
  7482  001A60  0100               	movlb	0	; () banked
  7483  001A62  6F80               	movwf	strcpy@to& (0+255),b
  7484  001A64  0E00               	movlw	high printRTC@month
  7485  001A66  0100               	movlb	0	; () banked
  7486  001A68  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7487  001A6A  0ED2               	movlw	low STR_15
  7488  001A6C  0100               	movlb	0	; () banked
  7489  001A6E  6F82               	movwf	strcpy@from& (0+255),b
  7490  001A70  0EFF               	movlw	high STR_15
  7491  001A72  0100               	movlb	0	; () banked
  7492  001A74  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7493  001A76  EC27  F01D         	call	_strcpy	;wreg free
  7494                           
  7495                           ;RTC.c: 95: break;
  7496  001A7A  D06B               	goto	l5379
  7497  001A7C                     l5367:
  7498                           
  7499                           ;RTC.c: 97: strcpy(month, "SEP");
  7500  001A7C  0EBE               	movlw	low printRTC@month
  7501  001A7E  0100               	movlb	0	; () banked
  7502  001A80  6F80               	movwf	strcpy@to& (0+255),b
  7503  001A82  0E00               	movlw	high printRTC@month
  7504  001A84  0100               	movlb	0	; () banked
  7505  001A86  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7506  001A88  0EE2               	movlw	low STR_16
  7507  001A8A  0100               	movlb	0	; () banked
  7508  001A8C  6F82               	movwf	strcpy@from& (0+255),b
  7509  001A8E  0EFF               	movlw	high STR_16
  7510  001A90  0100               	movlb	0	; () banked
  7511  001A92  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7512  001A94  EC27  F01D         	call	_strcpy	;wreg free
  7513                           
  7514                           ;RTC.c: 98: break;
  7515  001A98  D05C               	goto	l5379
  7516  001A9A                     l5369:
  7517                           
  7518                           ;RTC.c: 100: strcpy(month, "OCT");
  7519  001A9A  0EBE               	movlw	low printRTC@month
  7520  001A9C  0100               	movlb	0	; () banked
  7521  001A9E  6F80               	movwf	strcpy@to& (0+255),b
  7522  001AA0  0E00               	movlw	high printRTC@month
  7523  001AA2  0100               	movlb	0	; () banked
  7524  001AA4  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7525  001AA6  0EF2               	movlw	low STR_17
  7526  001AA8  0100               	movlb	0	; () banked
  7527  001AAA  6F82               	movwf	strcpy@from& (0+255),b
  7528  001AAC  0EFF               	movlw	high STR_17
  7529  001AAE  0100               	movlb	0	; () banked
  7530  001AB0  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7531  001AB2  EC27  F01D         	call	_strcpy	;wreg free
  7532                           
  7533                           ;RTC.c: 101: break;
  7534  001AB6  D04D               	goto	l5379
  7535  001AB8                     l5371:
  7536                           
  7537                           ;RTC.c: 103: strcpy(month, "NOV");
  7538  001AB8  0EBE               	movlw	low printRTC@month
  7539  001ABA  0100               	movlb	0	; () banked
  7540  001ABC  6F80               	movwf	strcpy@to& (0+255),b
  7541  001ABE  0E00               	movlw	high printRTC@month
  7542  001AC0  0100               	movlb	0	; () banked
  7543  001AC2  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7544  001AC4  0EF6               	movlw	low STR_18
  7545  001AC6  0100               	movlb	0	; () banked
  7546  001AC8  6F82               	movwf	strcpy@from& (0+255),b
  7547  001ACA  0EFF               	movlw	high STR_18
  7548  001ACC  0100               	movlb	0	; () banked
  7549  001ACE  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7550  001AD0  EC27  F01D         	call	_strcpy	;wreg free
  7551                           
  7552                           ;RTC.c: 104: break;
  7553  001AD4  D03E               	goto	l5379
  7554  001AD6                     l5373:
  7555                           
  7556                           ;RTC.c: 106: strcpy(month, "DEC");
  7557  001AD6  0EBE               	movlw	low printRTC@month
  7558  001AD8  0100               	movlb	0	; () banked
  7559  001ADA  6F80               	movwf	strcpy@to& (0+255),b
  7560  001ADC  0E00               	movlw	high printRTC@month
  7561  001ADE  0100               	movlb	0	; () banked
  7562  001AE0  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7563  001AE2  0ECE               	movlw	low STR_19
  7564  001AE4  0100               	movlb	0	; () banked
  7565  001AE6  6F82               	movwf	strcpy@from& (0+255),b
  7566  001AE8  0EFF               	movlw	high STR_19
  7567  001AEA  0100               	movlb	0	; () banked
  7568  001AEC  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7569  001AEE  EC27  F01D         	call	_strcpy	;wreg free
  7570                           
  7571                           ;RTC.c: 108: }
  7572                           
  7573                           ;RTC.c: 107: break;
  7574  001AF2  D02F               	goto	l5379
  7575  001AF4                     l5377:
  7576  001AF4  C0BC  F0AB         	movff	printRTC@RTC_month,??_printRTC
  7577  001AF8  C0BD  F0AC         	movff	printRTC@RTC_month+1,??_printRTC+1
  7578                           
  7579                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7580                           ; Switch size 1, requested type "space"
  7581                           ; Number of cases is 1, Range of values is 0 to 0
  7582                           ; switch strategies available:
  7583                           ; Name         Instructions Cycles
  7584                           ; simple_byte            4     3 (average)
  7585                           ;	Chosen strategy is simple_byte
  7586  001AFC  0100               	movlb	0	; () banked
  7587  001AFE  51AC               	movf	(??_printRTC+1)& (0+255),w,b
  7588  001B00  0A00               	xorlw	0	; case 0
  7589  001B02  A4D8               	btfss	status,2,c
  7590  001B04  D026               	goto	l5379
  7591                           
  7592                           ; BSR set to: 0
  7593                           ; Switch size 1, requested type "space"
  7594                           ; Number of cases is 12, Range of values is 1 to 12
  7595                           ; switch strategies available:
  7596                           ; Name         Instructions Cycles
  7597                           ; simple_byte           37    19 (average)
  7598                           ;	Chosen strategy is simple_byte
  7599  001B06  0100               	movlb	0	; () banked
  7600  001B08  51AB               	movf	??_printRTC& (0+255),w,b
  7601  001B0A  0A01               	xorlw	1	; case 1
  7602  001B0C  B4D8               	btfsc	status,2,c
  7603  001B0E  D73E               	goto	l5351
  7604  001B10  0A03               	xorlw	3	; case 2
  7605  001B12  B4D8               	btfsc	status,2,c
  7606  001B14  D74A               	goto	l5353
  7607  001B16  0A01               	xorlw	1	; case 3
  7608  001B18  B4D8               	btfsc	status,2,c
  7609  001B1A  D756               	goto	l5355
  7610  001B1C  0A07               	xorlw	7	; case 4
  7611  001B1E  B4D8               	btfsc	status,2,c
  7612  001B20  D762               	goto	l5357
  7613  001B22  0A01               	xorlw	1	; case 5
  7614  001B24  B4D8               	btfsc	status,2,c
  7615  001B26  D76E               	goto	l5359
  7616  001B28  0A03               	xorlw	3	; case 6
  7617  001B2A  B4D8               	btfsc	status,2,c
  7618  001B2C  D77A               	goto	l5361
  7619  001B2E  0A01               	xorlw	1	; case 7
  7620  001B30  B4D8               	btfsc	status,2,c
  7621  001B32  D786               	goto	l5363
  7622  001B34  0A0F               	xorlw	15	; case 8
  7623  001B36  B4D8               	btfsc	status,2,c
  7624  001B38  D792               	goto	l5365
  7625  001B3A  0A01               	xorlw	1	; case 9
  7626  001B3C  B4D8               	btfsc	status,2,c
  7627  001B3E  D79E               	goto	l5367
  7628  001B40  0A03               	xorlw	3	; case 10
  7629  001B42  B4D8               	btfsc	status,2,c
  7630  001B44  D7AA               	goto	l5369
  7631  001B46  0A01               	xorlw	1	; case 11
  7632  001B48  B4D8               	btfsc	status,2,c
  7633  001B4A  D7B6               	goto	l5371
  7634  001B4C  0A07               	xorlw	7	; case 12
  7635  001B4E  B4D8               	btfsc	status,2,c
  7636  001B50  D7C2               	goto	l5373
  7637  001B52                     l5379:
  7638                           
  7639                           ;RTC.c: 109: lcdInst(0b10000000);;
  7640  001B52  0E80               	movlw	128
  7641  001B54  EC92  F01F         	call	_lcdInst
  7642                           
  7643                           ;RTC.c: 110: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
  7644  001B58  0EBE               	movlw	low STR_21
  7645  001B5A  0100               	movlb	0	; () banked
  7646  001B5C  6F8E               	movwf	printf@f& (0+255),b
  7647  001B5E  0EFB               	movlw	high STR_21
  7648  001B60  0100               	movlb	0	; () banked
  7649  001B62  6F8F               	movwf	(printf@f+1)& (0+255),b
  7650  001B64  C0B6  F090         	movff	printRTC@INT_time+8,?_printf+2
  7651  001B68  C0B7  F091         	movff	printRTC@INT_time+9,?_printf+3
  7652  001B6C  0EBE               	movlw	low printRTC@month
  7653  001B6E  0100               	movlb	0	; () banked
  7654  001B70  6F92               	movwf	(?_printf+4)& (0+255),b
  7655  001B72  0E00               	movlw	high printRTC@month
  7656  001B74  0100               	movlb	0	; () banked
  7657  001B76  6F93               	movwf	(?_printf+5)& (0+255),b
  7658  001B78  C0B2  F094         	movff	printRTC@INT_time+4,?_printf+6
  7659  001B7C  C0B3  F095         	movff	printRTC@INT_time+5,?_printf+7
  7660  001B80  C0B0  F096         	movff	printRTC@INT_time+2,?_printf+8
  7661  001B84  C0B1  F097         	movff	printRTC@INT_time+3,?_printf+9
  7662  001B88  C0AE  F098         	movff	printRTC@INT_time,?_printf+10
  7663  001B8C  C0AF  F099         	movff	printRTC@INT_time+1,?_printf+11
  7664  001B90  EC93  F008         	call	_printf	;wreg free
  7665  001B94  0012               	return		;funcret
  7666  001B96                     __end_of_printRTC:
  7667                           	opt stack 0
  7668                           tblptru	equ	0xFF8
  7669                           tblptrh	equ	0xFF7
  7670                           tblptrl	equ	0xFF6
  7671                           tablat	equ	0xFF5
  7672                           prodh	equ	0xFF4
  7673                           prodl	equ	0xFF3
  7674                           intcon	equ	0xFF2
  7675                           intcon2	equ	0xFF1
  7676                           intcon3	equ	0xFF0
  7677                           postinc0	equ	0xFEE
  7678                           wreg	equ	0xFE8
  7679                           postdec1	equ	0xFE5
  7680                           fsr1l	equ	0xFE1
  7681                           indf2	equ	0xFDF
  7682                           postinc2	equ	0xFDE
  7683                           postdec2	equ	0xFDD
  7684                           fsr2h	equ	0xFDA
  7685                           fsr2l	equ	0xFD9
  7686                           status	equ	0xFD8
  7687                           
  7688 ;; *************** function _strcpy *****************
  7689 ;; Defined at:
  7690 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
  7691 ;; Parameters:    Size  Location     Type
  7692 ;;  to              2    0[BANK0 ] PTR unsigned char 
  7693 ;;		 -> printRTC@month(4), UI@month(4), 
  7694 ;;  from            2    2[BANK0 ] PTR const unsigned char 
  7695 ;;		 -> STR_62(4), STR_61(4), STR_60(4), STR_59(4), 
  7696 ;;		 -> STR_58(4), STR_57(4), STR_56(4), STR_55(4), 
  7697 ;;		 -> STR_54(4), STR_53(4), STR_52(4), STR_51(4), 
  7698 ;;		 -> STR_20(4), STR_19(4), STR_18(4), STR_17(4), 
  7699 ;;		 -> STR_16(4), STR_15(4), STR_14(4), STR_13(4), 
  7700 ;;		 -> STR_12(4), STR_11(4), STR_10(4), STR_9(4), 
  7701 ;;		 -> STR_8(4), 
  7702 ;; Auto vars:     Size  Location     Type
  7703 ;;  cp              2    4[BANK0 ] PTR unsigned char 
  7704 ;;		 -> printRTC@month(4), UI@month(4), 
  7705 ;; Return value:  Size  Location     Type
  7706 ;;                  2    0[BANK0 ] PTR unsigned char 
  7707 ;; Registers used:
  7708 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  7709 ;; Tracked objects:
  7710 ;;		On entry : 0/0
  7711 ;;		On exit  : 0/0
  7712 ;;		Unchanged: 0/0
  7713 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7714 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7715 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7716 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7717 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7718 ;;Total ram usage:        6 bytes
  7719 ;; Hardware stack levels used:    1
  7720 ;; Hardware stack levels required when called:    7
  7721 ;; This function calls:
  7722 ;;		Nothing
  7723 ;; This function is called by:
  7724 ;;		_UI
  7725 ;;		_printRTC
  7726 ;; This function uses a non-reentrant model
  7727 ;;
  7728                           
  7729                           	psect	text23
  7730  003A4E                     __ptext23:
  7731                           	opt stack 0
  7732  003A4E                     _strcpy:
  7733                           	opt stack 20
  7734                           
  7735                           ;incstack = 0
  7736  003A4E  C080  F084         	movff	strcpy@to,strcpy@cp
  7737  003A52  C081  F085         	movff	strcpy@to+1,strcpy@cp+1
  7738  003A56  D006               	goto	l5083
  7739  003A58                     l5081:
  7740  003A58  0100               	movlb	0	; () banked
  7741  003A5A  4B84               	infsnz	strcpy@cp& (0+255),f,b
  7742  003A5C  2B85               	incf	(strcpy@cp+1)& (0+255),f,b
  7743  003A5E  0100               	movlb	0	; () banked
  7744  003A60  4B82               	infsnz	strcpy@from& (0+255),f,b
  7745  003A62  2B83               	incf	(strcpy@from+1)& (0+255),f,b
  7746  003A64                     l5083:
  7747  003A64  C082  FFF6         	movff	strcpy@from,tblptrl
  7748  003A68  C083  FFF7         	movff	strcpy@from+1,tblptrh
  7749  003A6C                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  7750  003A6C  6AF8               	clrf	tblptru,c
  7751  003A6E                     	endif
  7752  003A6E                     	if	0	;tblptru may be non-zero
  7753  003A6E                     	endif
  7754  003A6E  C084  FFD9         	movff	strcpy@cp,fsr2l
  7755  003A72  C085  FFDA         	movff	strcpy@cp+1,fsr2h
  7756  003A76  0008               	tblrd		*
  7757  003A78  CFF5 FFDF          	movff	tablat,indf2
  7758  003A7C  50DF               	movf	indf2,w,c
  7759  003A7E  B4D8               	btfsc	status,2,c
  7760  003A80  0012               	return	
  7761  003A82  D7EA               	goto	l5081
  7762  003A84                     __end_of_strcpy:
  7763                           	opt stack 0
  7764                           tblptru	equ	0xFF8
  7765                           tblptrh	equ	0xFF7
  7766                           tblptrl	equ	0xFF6
  7767                           tablat	equ	0xFF5
  7768                           prodh	equ	0xFF4
  7769                           prodl	equ	0xFF3
  7770                           intcon	equ	0xFF2
  7771                           intcon2	equ	0xFF1
  7772                           intcon3	equ	0xFF0
  7773                           postinc0	equ	0xFEE
  7774                           wreg	equ	0xFE8
  7775                           postdec1	equ	0xFE5
  7776                           fsr1l	equ	0xFE1
  7777                           indf2	equ	0xFDF
  7778                           postinc2	equ	0xFDE
  7779                           postdec2	equ	0xFDD
  7780                           fsr2h	equ	0xFDA
  7781                           fsr2l	equ	0xFD9
  7782                           status	equ	0xFD8
  7783                           
  7784 ;; *************** function _getRTC *****************
  7785 ;; Defined at:
  7786 ;;		line 44 in file "RTC.c"
  7787 ;; Parameters:    Size  Location     Type
  7788 ;;		None
  7789 ;; Auto vars:     Size  Location     Type
  7790 ;;  i               2    3[BANK0 ] int 
  7791 ;; Return value:  Size  Location     Type
  7792 ;;                  1    wreg      void 
  7793 ;; Registers used:
  7794 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7795 ;; Tracked objects:
  7796 ;;		On entry : 0/0
  7797 ;;		On exit  : 0/0
  7798 ;;		Unchanged: 0/0
  7799 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7800 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7801 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7802 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7803 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7804 ;;Total ram usage:        2 bytes
  7805 ;; Hardware stack levels used:    1
  7806 ;; Hardware stack levels required when called:    9
  7807 ;; This function calls:
  7808 ;;		_I2C_Master_Read
  7809 ;;		_I2C_Master_Start
  7810 ;;		_I2C_Master_Stop
  7811 ;;		_I2C_Master_Write
  7812 ;; This function is called by:
  7813 ;;		_printRTC
  7814 ;;		_initSortTimer
  7815 ;; This function uses a non-reentrant model
  7816 ;;
  7817                           
  7818                           	psect	text24
  7819  00334E                     __ptext24:
  7820                           	opt stack 0
  7821  00334E                     _getRTC:
  7822                           	opt stack 18
  7823                           
  7824                           ;RTC.c: 48: I2C_Master_Start();
  7825                           
  7826                           ;incstack = 0
  7827  00334E  ECB8  F01F         	call	_I2C_Master_Start	;wreg free
  7828                           
  7829                           ;RTC.c: 49: I2C_Master_Write(0b11010000);
  7830  003352  0E00               	movlw	0
  7831  003354  0100               	movlb	0	; () banked
  7832  003356  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  7833  003358  0ED0               	movlw	208
  7834  00335A  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  7835  00335C  ECA6  F01F         	call	_I2C_Master_Write	;wreg free
  7836                           
  7837                           ;RTC.c: 50: I2C_Master_Write(0x00);
  7838  003360  0E00               	movlw	0
  7839  003362  0100               	movlb	0	; () banked
  7840  003364  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  7841  003366  0E00               	movlw	0
  7842  003368  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  7843  00336A  ECA6  F01F         	call	_I2C_Master_Write	;wreg free
  7844                           
  7845                           ;RTC.c: 51: I2C_Master_Stop();
  7846  00336E  ECB4  F01F         	call	_I2C_Master_Stop	;wreg free
  7847                           
  7848                           ;RTC.c: 54: I2C_Master_Start();
  7849  003372  ECB8  F01F         	call	_I2C_Master_Start	;wreg free
  7850                           
  7851                           ;RTC.c: 55: I2C_Master_Write(0b11010001);
  7852  003376  0E00               	movlw	0
  7853  003378  0100               	movlb	0	; () banked
  7854  00337A  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  7855  00337C  0ED1               	movlw	209
  7856  00337E  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  7857  003380  ECA6  F01F         	call	_I2C_Master_Write	;wreg free
  7858                           
  7859                           ;RTC.c: 56: for(int i = 0; i < 6; i++){
  7860  003384  0E00               	movlw	0
  7861  003386  0100               	movlb	0	; () banked
  7862  003388  6F84               	movwf	(getRTC@i+1)& (0+255),b
  7863  00338A  0E00               	movlw	0
  7864  00338C  6F83               	movwf	getRTC@i& (0+255),b
  7865  00338E                     l5089:
  7866                           
  7867                           ; BSR set to: 0
  7868  00338E  0100               	movlb	0	; () banked
  7869  003390  BF84               	btfsc	(getRTC@i+1)& (0+255),7,b
  7870  003392  D008               	goto	l5093
  7871  003394  0100               	movlb	0	; () banked
  7872  003396  5184               	movf	(getRTC@i+1)& (0+255),w,b
  7873  003398  E115               	bnz	l5099
  7874  00339A  0E06               	movlw	6
  7875  00339C  0100               	movlb	0	; () banked
  7876  00339E  5D83               	subwf	getRTC@i& (0+255),w,b
  7877  0033A0  B0D8               	btfsc	status,0,c
  7878  0033A2  D010               	goto	l5099
  7879  0033A4                     l5093:
  7880                           
  7881                           ; BSR set to: 0
  7882                           ;RTC.c: 57: time[i] = I2C_Master_Read(1);
  7883  0033A4  0E24               	movlw	low _time
  7884  0033A6  0100               	movlb	0	; () banked
  7885  0033A8  2583               	addwf	getRTC@i& (0+255),w,b
  7886  0033AA  6ED9               	movwf	fsr2l,c
  7887  0033AC  0E01               	movlw	high _time
  7888  0033AE  0100               	movlb	0	; () banked
  7889  0033B0  2184               	addwfc	(getRTC@i+1)& (0+255),w,b
  7890  0033B2  6EDA               	movwf	fsr2h,c
  7891  0033B4  0E01               	movlw	1
  7892  0033B6  EC4E  F01E         	call	_I2C_Master_Read
  7893  0033BA  6EDF               	movwf	indf2,c
  7894  0033BC  0100               	movlb	0	; () banked
  7895  0033BE  4B83               	infsnz	getRTC@i& (0+255),f,b
  7896  0033C0  2B84               	incf	(getRTC@i+1)& (0+255),f,b
  7897  0033C2  D7E5               	goto	l5089
  7898  0033C4                     l5099:
  7899                           
  7900                           ; BSR set to: 0
  7901                           ;RTC.c: 58: }
  7902                           ;RTC.c: 59: time[6] = I2C_Master_Read(0);
  7903  0033C4  0E00               	movlw	0
  7904  0033C6  EC4E  F01E         	call	_I2C_Master_Read
  7905  0033CA  0101               	movlb	1	; () banked
  7906  0033CC  6F2A               	movwf	(_time+6)& (0+255),b
  7907                           
  7908                           ;RTC.c: 60: I2C_Master_Stop();
  7909  0033CE  ECB4  F01F         	call	_I2C_Master_Stop	;wreg free
  7910  0033D2  0012               	return		;funcret
  7911  0033D4                     __end_of_getRTC:
  7912                           	opt stack 0
  7913                           tblptru	equ	0xFF8
  7914                           tblptrh	equ	0xFF7
  7915                           tblptrl	equ	0xFF6
  7916                           tablat	equ	0xFF5
  7917                           prodh	equ	0xFF4
  7918                           prodl	equ	0xFF3
  7919                           intcon	equ	0xFF2
  7920                           intcon2	equ	0xFF1
  7921                           intcon3	equ	0xFF0
  7922                           postinc0	equ	0xFEE
  7923                           wreg	equ	0xFE8
  7924                           postdec1	equ	0xFE5
  7925                           fsr1l	equ	0xFE1
  7926                           indf2	equ	0xFDF
  7927                           postinc2	equ	0xFDE
  7928                           postdec2	equ	0xFDD
  7929                           fsr2h	equ	0xFDA
  7930                           fsr2l	equ	0xFD9
  7931                           status	equ	0xFD8
  7932                           
  7933 ;; *************** function _I2C_Master_Write *****************
  7934 ;; Defined at:
  7935 ;;		line 49 in file "I2C.c"
  7936 ;; Parameters:    Size  Location     Type
  7937 ;;  d               2    1[BANK0 ] unsigned int 
  7938 ;; Auto vars:     Size  Location     Type
  7939 ;;		None
  7940 ;; Return value:  Size  Location     Type
  7941 ;;                  1    wreg      void 
  7942 ;; Registers used:
  7943 ;;		wreg, status,2, status,0, cstack
  7944 ;; Tracked objects:
  7945 ;;		On entry : 0/0
  7946 ;;		On exit  : 0/0
  7947 ;;		Unchanged: 0/0
  7948 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7949 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7950 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7951 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7952 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7953 ;;Total ram usage:        2 bytes
  7954 ;; Hardware stack levels used:    1
  7955 ;; Hardware stack levels required when called:    8
  7956 ;; This function calls:
  7957 ;;		_I2C_Master_Wait
  7958 ;; This function is called by:
  7959 ;;		_loadRTC
  7960 ;;		_getRTC
  7961 ;; This function uses a non-reentrant model
  7962 ;;
  7963                           
  7964                           	psect	text25
  7965  003F4C                     __ptext25:
  7966                           	opt stack 0
  7967  003F4C                     _I2C_Master_Write:
  7968                           	opt stack 18
  7969                           
  7970                           ;I2C.c: 51: I2C_Master_Wait();
  7971                           
  7972                           ;incstack = 0
  7973  003F4C  EC6E  F01F         	call	_I2C_Master_Wait	;wreg free
  7974                           
  7975                           ;I2C.c: 52: SSPBUF = d;
  7976  003F50  C081  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  7977  003F54  0012               	return		;funcret
  7978  003F56                     __end_of_I2C_Master_Write:
  7979                           	opt stack 0
  7980                           tblptru	equ	0xFF8
  7981                           tblptrh	equ	0xFF7
  7982                           tblptrl	equ	0xFF6
  7983                           tablat	equ	0xFF5
  7984                           prodh	equ	0xFF4
  7985                           prodl	equ	0xFF3
  7986                           intcon	equ	0xFF2
  7987                           intcon2	equ	0xFF1
  7988                           intcon3	equ	0xFF0
  7989                           postinc0	equ	0xFEE
  7990                           wreg	equ	0xFE8
  7991                           postdec1	equ	0xFE5
  7992                           fsr1l	equ	0xFE1
  7993                           indf2	equ	0xFDF
  7994                           postinc2	equ	0xFDE
  7995                           postdec2	equ	0xFDD
  7996                           fsr2h	equ	0xFDA
  7997                           fsr2l	equ	0xFD9
  7998                           status	equ	0xFD8
  7999                           
  8000 ;; *************** function _I2C_Master_Stop *****************
  8001 ;; Defined at:
  8002 ;;		line 43 in file "I2C.c"
  8003 ;; Parameters:    Size  Location     Type
  8004 ;;		None
  8005 ;; Auto vars:     Size  Location     Type
  8006 ;;		None
  8007 ;; Return value:  Size  Location     Type
  8008 ;;                  1    wreg      void 
  8009 ;; Registers used:
  8010 ;;		wreg, status,2, status,0, cstack
  8011 ;; Tracked objects:
  8012 ;;		On entry : 0/0
  8013 ;;		On exit  : 0/0
  8014 ;;		Unchanged: 0/0
  8015 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8016 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8017 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8018 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8019 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8020 ;;Total ram usage:        0 bytes
  8021 ;; Hardware stack levels used:    1
  8022 ;; Hardware stack levels required when called:    8
  8023 ;; This function calls:
  8024 ;;		_I2C_Master_Wait
  8025 ;; This function is called by:
  8026 ;;		_loadRTC
  8027 ;;		_getRTC
  8028 ;; This function uses a non-reentrant model
  8029 ;;
  8030                           
  8031                           	psect	text26
  8032  003F68                     __ptext26:
  8033                           	opt stack 0
  8034  003F68                     _I2C_Master_Stop:
  8035                           	opt stack 18
  8036                           
  8037                           ;I2C.c: 45: I2C_Master_Wait();
  8038                           
  8039                           ;incstack = 0
  8040  003F68  EC6E  F01F         	call	_I2C_Master_Wait	;wreg free
  8041                           
  8042                           ;I2C.c: 46: PEN = 1;
  8043  003F6C  84C5               	bsf	4037,2,c	;volatile
  8044  003F6E  0012               	return		;funcret
  8045  003F70                     __end_of_I2C_Master_Stop:
  8046                           	opt stack 0
  8047                           tblptru	equ	0xFF8
  8048                           tblptrh	equ	0xFF7
  8049                           tblptrl	equ	0xFF6
  8050                           tablat	equ	0xFF5
  8051                           prodh	equ	0xFF4
  8052                           prodl	equ	0xFF3
  8053                           intcon	equ	0xFF2
  8054                           intcon2	equ	0xFF1
  8055                           intcon3	equ	0xFF0
  8056                           postinc0	equ	0xFEE
  8057                           wreg	equ	0xFE8
  8058                           postdec1	equ	0xFE5
  8059                           fsr1l	equ	0xFE1
  8060                           indf2	equ	0xFDF
  8061                           postinc2	equ	0xFDE
  8062                           postdec2	equ	0xFDD
  8063                           fsr2h	equ	0xFDA
  8064                           fsr2l	equ	0xFD9
  8065                           status	equ	0xFD8
  8066                           
  8067 ;; *************** function _I2C_Master_Start *****************
  8068 ;; Defined at:
  8069 ;;		line 31 in file "I2C.c"
  8070 ;; Parameters:    Size  Location     Type
  8071 ;;		None
  8072 ;; Auto vars:     Size  Location     Type
  8073 ;;		None
  8074 ;; Return value:  Size  Location     Type
  8075 ;;                  1    wreg      void 
  8076 ;; Registers used:
  8077 ;;		wreg, status,2, status,0, cstack
  8078 ;; Tracked objects:
  8079 ;;		On entry : 0/0
  8080 ;;		On exit  : 0/0
  8081 ;;		Unchanged: 0/0
  8082 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8083 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8084 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8085 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8086 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8087 ;;Total ram usage:        0 bytes
  8088 ;; Hardware stack levels used:    1
  8089 ;; Hardware stack levels required when called:    8
  8090 ;; This function calls:
  8091 ;;		_I2C_Master_Wait
  8092 ;; This function is called by:
  8093 ;;		_loadRTC
  8094 ;;		_getRTC
  8095 ;; This function uses a non-reentrant model
  8096 ;;
  8097                           
  8098                           	psect	text27
  8099  003F70                     __ptext27:
  8100                           	opt stack 0
  8101  003F70                     _I2C_Master_Start:
  8102                           	opt stack 18
  8103                           
  8104                           ;I2C.c: 33: I2C_Master_Wait();
  8105                           
  8106                           ;incstack = 0
  8107  003F70  EC6E  F01F         	call	_I2C_Master_Wait	;wreg free
  8108                           
  8109                           ;I2C.c: 34: SEN = 1;
  8110  003F74  80C5               	bsf	4037,0,c	;volatile
  8111  003F76  0012               	return		;funcret
  8112  003F78                     __end_of_I2C_Master_Start:
  8113                           	opt stack 0
  8114                           tblptru	equ	0xFF8
  8115                           tblptrh	equ	0xFF7
  8116                           tblptrl	equ	0xFF6
  8117                           tablat	equ	0xFF5
  8118                           prodh	equ	0xFF4
  8119                           prodl	equ	0xFF3
  8120                           intcon	equ	0xFF2
  8121                           intcon2	equ	0xFF1
  8122                           intcon3	equ	0xFF0
  8123                           postinc0	equ	0xFEE
  8124                           wreg	equ	0xFE8
  8125                           postdec1	equ	0xFE5
  8126                           fsr1l	equ	0xFE1
  8127                           indf2	equ	0xFDF
  8128                           postinc2	equ	0xFDE
  8129                           postdec2	equ	0xFDD
  8130                           fsr2h	equ	0xFDA
  8131                           fsr2l	equ	0xFD9
  8132                           status	equ	0xFD8
  8133                           
  8134 ;; *************** function _I2C_Master_Read *****************
  8135 ;; Defined at:
  8136 ;;		line 55 in file "I2C.c"
  8137 ;; Parameters:    Size  Location     Type
  8138 ;;  a               1    wreg     unsigned char 
  8139 ;; Auto vars:     Size  Location     Type
  8140 ;;  a               1    1[BANK0 ] unsigned char 
  8141 ;;  temp            1    2[BANK0 ] unsigned char 
  8142 ;; Return value:  Size  Location     Type
  8143 ;;                  1    wreg      unsigned char 
  8144 ;; Registers used:
  8145 ;;		wreg, status,2, status,0, cstack
  8146 ;; Tracked objects:
  8147 ;;		On entry : 0/0
  8148 ;;		On exit  : 0/0
  8149 ;;		Unchanged: 0/0
  8150 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8151 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8152 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8153 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8154 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8155 ;;Total ram usage:        2 bytes
  8156 ;; Hardware stack levels used:    1
  8157 ;; Hardware stack levels required when called:    8
  8158 ;; This function calls:
  8159 ;;		_I2C_Master_Wait
  8160 ;; This function is called by:
  8161 ;;		_getRTC
  8162 ;; This function uses a non-reentrant model
  8163 ;;
  8164                           
  8165                           	psect	text28
  8166  003C9C                     __ptext28:
  8167                           	opt stack 0
  8168  003C9C                     _I2C_Master_Read:
  8169                           	opt stack 18
  8170                           
  8171                           ;incstack = 0
  8172                           ;I2C_Master_Read@a stored from wreg
  8173  003C9C  0100               	movlb	0	; () banked
  8174  003C9E  6F81               	movwf	I2C_Master_Read@a& (0+255),b
  8175                           
  8176                           ;I2C.c: 57: unsigned char temp;
  8177                           ;I2C.c: 58: I2C_Master_Wait();
  8178  003CA0  EC6E  F01F         	call	_I2C_Master_Wait	;wreg free
  8179                           
  8180                           ;I2C.c: 59: RCEN = 1;
  8181  003CA4  86C5               	bsf	4037,3,c	;volatile
  8182                           
  8183                           ;I2C.c: 60: I2C_Master_Wait();
  8184  003CA6  EC6E  F01F         	call	_I2C_Master_Wait	;wreg free
  8185                           
  8186                           ;I2C.c: 61: temp = SSPBUF;
  8187  003CAA  CFC9 F082          	movff	4041,I2C_Master_Read@temp	;volatile
  8188                           
  8189                           ;I2C.c: 62: I2C_Master_Wait();
  8190  003CAE  EC6E  F01F         	call	_I2C_Master_Wait	;wreg free
  8191                           
  8192                           ;I2C.c: 63: ACKDT = (a)?0:1;
  8193  003CB2  0100               	movlb	0	; () banked
  8194  003CB4  5181               	movf	I2C_Master_Read@a& (0+255),w,b
  8195  003CB6  0100               	movlb	0	; () banked
  8196  003CB8  A4D8               	btfss	status,2,c
  8197  003CBA  D002               	goto	u3260
  8198  003CBC  8AC5               	bsf	4037,5,c	;volatile
  8199  003CBE  D001               	goto	l4783
  8200  003CC0                     u3260:
  8201  003CC0  9AC5               	bcf	4037,5,c	;volatile
  8202  003CC2                     l4783:
  8203                           
  8204                           ;I2C.c: 64: ACKEN = 1;
  8205  003CC2  88C5               	bsf	4037,4,c	;volatile
  8206                           
  8207                           ;I2C.c: 65: return temp;
  8208  003CC4  0100               	movlb	0	; () banked
  8209  003CC6  5182               	movf	I2C_Master_Read@temp& (0+255),w,b
  8210  003CC8  0012               	return	
  8211  003CCA                     __end_of_I2C_Master_Read:
  8212                           	opt stack 0
  8213                           tblptru	equ	0xFF8
  8214                           tblptrh	equ	0xFF7
  8215                           tblptrl	equ	0xFF6
  8216                           tablat	equ	0xFF5
  8217                           prodh	equ	0xFF4
  8218                           prodl	equ	0xFF3
  8219                           intcon	equ	0xFF2
  8220                           intcon2	equ	0xFF1
  8221                           intcon3	equ	0xFF0
  8222                           postinc0	equ	0xFEE
  8223                           wreg	equ	0xFE8
  8224                           postdec1	equ	0xFE5
  8225                           fsr1l	equ	0xFE1
  8226                           indf2	equ	0xFDF
  8227                           postinc2	equ	0xFDE
  8228                           postdec2	equ	0xFDD
  8229                           fsr2h	equ	0xFDA
  8230                           fsr2l	equ	0xFD9
  8231                           status	equ	0xFD8
  8232                           
  8233 ;; *************** function _I2C_Master_Wait *****************
  8234 ;; Defined at:
  8235 ;;		line 26 in file "I2C.c"
  8236 ;; Parameters:    Size  Location     Type
  8237 ;;		None
  8238 ;; Auto vars:     Size  Location     Type
  8239 ;;		None
  8240 ;; Return value:  Size  Location     Type
  8241 ;;                  1    wreg      void 
  8242 ;; Registers used:
  8243 ;;		wreg, status,2, status,0
  8244 ;; Tracked objects:
  8245 ;;		On entry : 0/0
  8246 ;;		On exit  : 0/0
  8247 ;;		Unchanged: 0/0
  8248 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8249 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8250 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8251 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8252 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8253 ;;Total ram usage:        1 bytes
  8254 ;; Hardware stack levels used:    1
  8255 ;; Hardware stack levels required when called:    7
  8256 ;; This function calls:
  8257 ;;		Nothing
  8258 ;; This function is called by:
  8259 ;;		_I2C_Master_Start
  8260 ;;		_I2C_Master_Stop
  8261 ;;		_I2C_Master_Write
  8262 ;;		_I2C_Master_Read
  8263 ;;		_I2C_Master_RepeatedStart
  8264 ;; This function uses a non-reentrant model
  8265 ;;
  8266                           
  8267                           	psect	text29
  8268  003EDC                     __ptext29:
  8269                           	opt stack 0
  8270  003EDC                     _I2C_Master_Wait:
  8271                           	opt stack 18
  8272  003EDC                     l66:
  8273  003EDC  B4C7               	btfsc	4039,2,c	;volatile
  8274  003EDE  D7FE               	goto	l66
  8275  003EE0  CFC5 F080          	movff	4037,??_I2C_Master_Wait	;volatile
  8276  003EE4  0E1F               	movlw	31
  8277  003EE6  0100               	movlb	0	; () banked
  8278  003EE8  1780               	andwf	??_I2C_Master_Wait& (0+255),f,b
  8279  003EEA  B4D8               	btfsc	status,2,c
  8280  003EEC  0012               	return	
  8281  003EEE  D7F6               	goto	l66
  8282  003EF0                     __end_of_I2C_Master_Wait:
  8283                           	opt stack 0
  8284                           tblptru	equ	0xFF8
  8285                           tblptrh	equ	0xFF7
  8286                           tblptrl	equ	0xFF6
  8287                           tablat	equ	0xFF5
  8288                           prodh	equ	0xFF4
  8289                           prodl	equ	0xFF3
  8290                           intcon	equ	0xFF2
  8291                           intcon2	equ	0xFF1
  8292                           intcon3	equ	0xFF0
  8293                           postinc0	equ	0xFEE
  8294                           wreg	equ	0xFE8
  8295                           postdec1	equ	0xFE5
  8296                           fsr1l	equ	0xFE1
  8297                           indf2	equ	0xFDF
  8298                           postinc2	equ	0xFDE
  8299                           postdec2	equ	0xFDD
  8300                           fsr2h	equ	0xFDA
  8301                           fsr2l	equ	0xFD9
  8302                           status	equ	0xFD8
  8303                           
  8304 ;; *************** function _change_state_to_menu_22 *****************
  8305 ;; Defined at:
  8306 ;;		line 496 in file "UI.c"
  8307 ;; Parameters:    Size  Location     Type
  8308 ;;		None
  8309 ;; Auto vars:     Size  Location     Type
  8310 ;;		None
  8311 ;; Return value:  Size  Location     Type
  8312 ;;                  1    wreg      void 
  8313 ;; Registers used:
  8314 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8315 ;; Tracked objects:
  8316 ;;		On entry : 0/0
  8317 ;;		On exit  : 0/0
  8318 ;;		Unchanged: 0/0
  8319 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8320 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8321 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8322 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8323 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8324 ;;Total ram usage:        0 bytes
  8325 ;; Hardware stack levels used:    1
  8326 ;; Hardware stack levels required when called:   10
  8327 ;; This function calls:
  8328 ;;		_lcdInst
  8329 ;;		_printf
  8330 ;; This function is called by:
  8331 ;;		_UI
  8332 ;; This function uses a non-reentrant model
  8333 ;;
  8334                           
  8335                           	psect	text30
  8336  0039DE                     __ptext30:
  8337                           	opt stack 0
  8338  0039DE                     _change_state_to_menu_22:
  8339                           	opt stack 19
  8340                           
  8341                           ;UI.c: 497: cur_state = 22;
  8342                           
  8343                           ; BSR set to: 0
  8344                           ;incstack = 0
  8345  0039DE  0E00               	movlw	0
  8346  0039E0  0100               	movlb	0	; () banked
  8347  0039E2  6FDF               	movwf	(_cur_state+1)& (0+255),b
  8348  0039E4  0E16               	movlw	22
  8349  0039E6  6FDE               	movwf	_cur_state& (0+255),b
  8350                           
  8351                           ; BSR set to: 0
  8352                           ;UI.c: 499: lcdInst(0b10000000);;
  8353  0039E8  0E80               	movlw	128
  8354  0039EA  EC92  F01F         	call	_lcdInst
  8355                           
  8356                           ;UI.c: 500: printf("2. SORT        <");
  8357  0039EE  0E00               	movlw	low STR_34
  8358  0039F0  0100               	movlb	0	; () banked
  8359  0039F2  6F8E               	movwf	printf@f& (0+255),b
  8360  0039F4  0EFE               	movlw	high STR_34
  8361  0039F6  0100               	movlb	0	; () banked
  8362  0039F8  6F8F               	movwf	(printf@f+1)& (0+255),b
  8363  0039FA  EC93  F008         	call	_printf	;wreg free
  8364                           
  8365                           ;UI.c: 501: lcdInst(0b11000000);;
  8366  0039FE  0EC0               	movlw	192
  8367  003A00  EC92  F01F         	call	_lcdInst
  8368                           
  8369                           ;UI.c: 502: printf("3. LOGS         ");
  8370  003A04  0E45               	movlw	low STR_36
  8371  003A06  0100               	movlb	0	; () banked
  8372  003A08  6F8E               	movwf	printf@f& (0+255),b
  8373  003A0A  0EFD               	movlw	high STR_36
  8374  003A0C  0100               	movlb	0	; () banked
  8375  003A0E  6F8F               	movwf	(printf@f+1)& (0+255),b
  8376  003A10  EC93  F008         	call	_printf	;wreg free
  8377  003A14  0012               	return		;funcret
  8378  003A16                     __end_of_change_state_to_menu_22:
  8379                           	opt stack 0
  8380                           tblptru	equ	0xFF8
  8381                           tblptrh	equ	0xFF7
  8382                           tblptrl	equ	0xFF6
  8383                           tablat	equ	0xFF5
  8384                           prodh	equ	0xFF4
  8385                           prodl	equ	0xFF3
  8386                           intcon	equ	0xFF2
  8387                           intcon2	equ	0xFF1
  8388                           intcon3	equ	0xFF0
  8389                           postinc0	equ	0xFEE
  8390                           wreg	equ	0xFE8
  8391                           postdec1	equ	0xFE5
  8392                           fsr1l	equ	0xFE1
  8393                           indf2	equ	0xFDF
  8394                           postinc2	equ	0xFDE
  8395                           postdec2	equ	0xFDD
  8396                           fsr2h	equ	0xFDA
  8397                           fsr2l	equ	0xFD9
  8398                           status	equ	0xFD8
  8399                           
  8400 ;; *************** function _change_state_to_menu_12 *****************
  8401 ;; Defined at:
  8402 ;;		line 488 in file "UI.c"
  8403 ;; Parameters:    Size  Location     Type
  8404 ;;		None
  8405 ;; Auto vars:     Size  Location     Type
  8406 ;;		None
  8407 ;; Return value:  Size  Location     Type
  8408 ;;                  1    wreg      void 
  8409 ;; Registers used:
  8410 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8411 ;; Tracked objects:
  8412 ;;		On entry : 0/0
  8413 ;;		On exit  : 0/0
  8414 ;;		Unchanged: 0/0
  8415 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8416 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8417 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8418 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8419 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8420 ;;Total ram usage:        0 bytes
  8421 ;; Hardware stack levels used:    1
  8422 ;; Hardware stack levels required when called:   10
  8423 ;; This function calls:
  8424 ;;		_lcdInst
  8425 ;;		_printf
  8426 ;; This function is called by:
  8427 ;;		_UI
  8428 ;; This function uses a non-reentrant model
  8429 ;;
  8430                           
  8431                           	psect	text31
  8432  003A16                     __ptext31:
  8433                           	opt stack 0
  8434  003A16                     _change_state_to_menu_12:
  8435                           	opt stack 19
  8436                           
  8437                           ;UI.c: 489: cur_state = 12;
  8438                           
  8439                           ;incstack = 0
  8440  003A16  0E00               	movlw	0
  8441  003A18  0100               	movlb	0	; () banked
  8442  003A1A  6FDF               	movwf	(_cur_state+1)& (0+255),b
  8443  003A1C  0E0C               	movlw	12
  8444  003A1E  6FDE               	movwf	_cur_state& (0+255),b
  8445                           
  8446                           ; BSR set to: 0
  8447                           ;UI.c: 491: lcdInst(0b10000000);;
  8448  003A20  0E80               	movlw	128
  8449  003A22  EC92  F01F         	call	_lcdInst
  8450                           
  8451                           ;UI.c: 492: printf("1. DATE/TIME    ");
  8452  003A26  0E67               	movlw	low STR_33
  8453  003A28  0100               	movlb	0	; () banked
  8454  003A2A  6F8E               	movwf	printf@f& (0+255),b
  8455  003A2C  0EFD               	movlw	high STR_33
  8456  003A2E  0100               	movlb	0	; () banked
  8457  003A30  6F8F               	movwf	(printf@f+1)& (0+255),b
  8458  003A32  EC93  F008         	call	_printf	;wreg free
  8459                           
  8460                           ;UI.c: 493: lcdInst(0b11000000);;
  8461  003A36  0EC0               	movlw	192
  8462  003A38  EC92  F01F         	call	_lcdInst
  8463                           
  8464                           ;UI.c: 494: printf("2. SORT        <");
  8465  003A3C  0E00               	movlw	low STR_34
  8466  003A3E  0100               	movlb	0	; () banked
  8467  003A40  6F8E               	movwf	printf@f& (0+255),b
  8468  003A42  0EFE               	movlw	high STR_34
  8469  003A44  0100               	movlb	0	; () banked
  8470  003A46  6F8F               	movwf	(printf@f+1)& (0+255),b
  8471  003A48  EC93  F008         	call	_printf	;wreg free
  8472  003A4C  0012               	return		;funcret
  8473  003A4E                     __end_of_change_state_to_menu_12:
  8474                           	opt stack 0
  8475                           tblptru	equ	0xFF8
  8476                           tblptrh	equ	0xFF7
  8477                           tblptrl	equ	0xFF6
  8478                           tablat	equ	0xFF5
  8479                           prodh	equ	0xFF4
  8480                           prodl	equ	0xFF3
  8481                           intcon	equ	0xFF2
  8482                           intcon2	equ	0xFF1
  8483                           intcon3	equ	0xFF0
  8484                           postinc0	equ	0xFEE
  8485                           wreg	equ	0xFE8
  8486                           postdec1	equ	0xFE5
  8487                           fsr1l	equ	0xFE1
  8488                           indf2	equ	0xFDF
  8489                           postinc2	equ	0xFDE
  8490                           postdec2	equ	0xFDD
  8491                           fsr2h	equ	0xFDA
  8492                           fsr2l	equ	0xFD9
  8493                           status	equ	0xFD8
  8494                           
  8495 ;; *************** function ___awmod *****************
  8496 ;; Defined at:
  8497 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
  8498 ;; Parameters:    Size  Location     Type
  8499 ;;  dividend        2    0[BANK0 ] int 
  8500 ;;  divisor         2    2[BANK0 ] int 
  8501 ;; Auto vars:     Size  Location     Type
  8502 ;;  sign            1    5[BANK0 ] unsigned char 
  8503 ;;  counter         1    4[BANK0 ] unsigned char 
  8504 ;; Return value:  Size  Location     Type
  8505 ;;                  2    0[BANK0 ] int 
  8506 ;; Registers used:
  8507 ;;		wreg, status,2, status,0
  8508 ;; Tracked objects:
  8509 ;;		On entry : 0/0
  8510 ;;		On exit  : 0/0
  8511 ;;		Unchanged: 0/0
  8512 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8513 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8514 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8515 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8516 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8517 ;;Total ram usage:        6 bytes
  8518 ;; Hardware stack levels used:    1
  8519 ;; Hardware stack levels required when called:    7
  8520 ;; This function calls:
  8521 ;;		Nothing
  8522 ;; This function is called by:
  8523 ;;		_UI
  8524 ;; This function uses a non-reentrant model
  8525 ;;
  8526                           
  8527                           	psect	text32
  8528  003184                     __ptext32:
  8529                           	opt stack 0
  8530  003184                     ___awmod:
  8531                           	opt stack 22
  8532                           
  8533                           ;incstack = 0
  8534  003184  0E00               	movlw	0
  8535  003186  0100               	movlb	0	; () banked
  8536  003188  6F85               	movwf	___awmod@sign& (0+255),b
  8537                           
  8538                           ; BSR set to: 0
  8539  00318A  0100               	movlb	0	; () banked
  8540  00318C  AF81               	btfss	(___awmod@dividend+1)& (0+255),7,b
  8541  00318E  D008               	goto	l6547
  8542                           
  8543                           ; BSR set to: 0
  8544  003190  0100               	movlb	0	; () banked
  8545  003192  6D80               	negf	___awmod@dividend& (0+255),b
  8546  003194  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
  8547  003196  B0D8               	btfsc	status,0,c
  8548  003198  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
  8549                           
  8550                           ; BSR set to: 0
  8551  00319A  0E01               	movlw	1
  8552  00319C  0100               	movlb	0	; () banked
  8553  00319E  6F85               	movwf	___awmod@sign& (0+255),b
  8554  0031A0                     l6547:
  8555                           
  8556                           ; BSR set to: 0
  8557  0031A0  0100               	movlb	0	; () banked
  8558  0031A2  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
  8559  0031A4  D005               	goto	l6551
  8560                           
  8561                           ; BSR set to: 0
  8562  0031A6  0100               	movlb	0	; () banked
  8563  0031A8  6D82               	negf	___awmod@divisor& (0+255),b
  8564  0031AA  1F83               	comf	(___awmod@divisor+1)& (0+255),f,b
  8565  0031AC  B0D8               	btfsc	status,0,c
  8566  0031AE  2B83               	incf	(___awmod@divisor+1)& (0+255),f,b
  8567  0031B0                     l6551:
  8568                           
  8569                           ; BSR set to: 0
  8570  0031B0  0100               	movlb	0	; () banked
  8571  0031B2  5182               	movf	___awmod@divisor& (0+255),w,b
  8572  0031B4  0100               	movlb	0	; () banked
  8573  0031B6  1183               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  8574  0031B8  B4D8               	btfsc	status,2,c
  8575  0031BA  D026               	goto	l6567
  8576                           
  8577                           ; BSR set to: 0
  8578  0031BC  0E01               	movlw	1
  8579  0031BE  0100               	movlb	0	; () banked
  8580  0031C0  6F84               	movwf	___awmod@counter& (0+255),b
  8581  0031C2  D006               	goto	l6557
  8582  0031C4                     l6555:
  8583                           
  8584                           ; BSR set to: 0
  8585  0031C4  0100               	movlb	0	; () banked
  8586  0031C6  90D8               	bcf	status,0,c
  8587  0031C8  3782               	rlcf	___awmod@divisor& (0+255),f,b
  8588  0031CA  3783               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  8589  0031CC  0100               	movlb	0	; () banked
  8590  0031CE  2B84               	incf	___awmod@counter& (0+255),f,b
  8591  0031D0                     l6557:
  8592                           
  8593                           ; BSR set to: 0
  8594  0031D0  0100               	movlb	0	; () banked
  8595  0031D2  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
  8596  0031D4  D7F7               	goto	l6555
  8597  0031D6                     l6559:
  8598                           
  8599                           ; BSR set to: 0
  8600  0031D6  0100               	movlb	0	; () banked
  8601  0031D8  5182               	movf	___awmod@divisor& (0+255),w,b
  8602  0031DA  0100               	movlb	0	; () banked
  8603  0031DC  5D80               	subwf	___awmod@dividend& (0+255),w,b
  8604  0031DE  0100               	movlb	0	; () banked
  8605  0031E0  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
  8606  0031E2  0100               	movlb	0	; () banked
  8607  0031E4  5981               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  8608  0031E6  A0D8               	btfss	status,0,c
  8609  0031E8  D008               	goto	l6563
  8610                           
  8611                           ; BSR set to: 0
  8612  0031EA  0100               	movlb	0	; () banked
  8613  0031EC  5182               	movf	___awmod@divisor& (0+255),w,b
  8614  0031EE  0100               	movlb	0	; () banked
  8615  0031F0  5F80               	subwf	___awmod@dividend& (0+255),f,b
  8616  0031F2  0100               	movlb	0	; () banked
  8617  0031F4  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
  8618  0031F6  0100               	movlb	0	; () banked
  8619  0031F8  5B81               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  8620  0031FA                     l6563:
  8621                           
  8622                           ; BSR set to: 0
  8623  0031FA  0100               	movlb	0	; () banked
  8624  0031FC  90D8               	bcf	status,0,c
  8625  0031FE  3383               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  8626  003200  3382               	rrcf	___awmod@divisor& (0+255),f,b
  8627                           
  8628                           ; BSR set to: 0
  8629  003202  0100               	movlb	0	; () banked
  8630  003204  2F84               	decfsz	___awmod@counter& (0+255),f,b
  8631  003206  D7E7               	goto	l6559
  8632  003208                     l6567:
  8633                           
  8634                           ; BSR set to: 0
  8635  003208  0100               	movlb	0	; () banked
  8636  00320A  5185               	movf	___awmod@sign& (0+255),w,b
  8637  00320C  0100               	movlb	0	; () banked
  8638  00320E  B4D8               	btfsc	status,2,c
  8639  003210  D005               	goto	l6571
  8640                           
  8641                           ; BSR set to: 0
  8642  003212  0100               	movlb	0	; () banked
  8643  003214  6D80               	negf	___awmod@dividend& (0+255),b
  8644  003216  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
  8645  003218  B0D8               	btfsc	status,0,c
  8646  00321A  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
  8647  00321C                     l6571:
  8648                           
  8649                           ; BSR set to: 0
  8650  00321C  C080  F080         	movff	___awmod@dividend,?___awmod
  8651  003220  C081  F081         	movff	___awmod@dividend+1,?___awmod+1
  8652  003224  0012               	return	
  8653  003226                     __end_of___awmod:
  8654                           	opt stack 0
  8655                           tblptru	equ	0xFF8
  8656                           tblptrh	equ	0xFF7
  8657                           tblptrl	equ	0xFF6
  8658                           tablat	equ	0xFF5
  8659                           prodh	equ	0xFF4
  8660                           prodl	equ	0xFF3
  8661                           intcon	equ	0xFF2
  8662                           intcon2	equ	0xFF1
  8663                           intcon3	equ	0xFF0
  8664                           postinc0	equ	0xFEE
  8665                           wreg	equ	0xFE8
  8666                           postdec1	equ	0xFE5
  8667                           fsr1l	equ	0xFE1
  8668                           indf2	equ	0xFDF
  8669                           postinc2	equ	0xFDE
  8670                           postdec2	equ	0xFDD
  8671                           fsr2h	equ	0xFDA
  8672                           fsr2l	equ	0xFD9
  8673                           status	equ	0xFD8
  8674                           
  8675 ;; *************** function ___awdiv *****************
  8676 ;; Defined at:
  8677 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
  8678 ;; Parameters:    Size  Location     Type
  8679 ;;  dividend        2    6[BANK0 ] int 
  8680 ;;  divisor         2    8[BANK0 ] int 
  8681 ;; Auto vars:     Size  Location     Type
  8682 ;;  quotient        2   12[BANK0 ] int 
  8683 ;;  sign            1   11[BANK0 ] unsigned char 
  8684 ;;  counter         1   10[BANK0 ] unsigned char 
  8685 ;; Return value:  Size  Location     Type
  8686 ;;                  2    6[BANK0 ] int 
  8687 ;; Registers used:
  8688 ;;		wreg, status,2, status,0
  8689 ;; Tracked objects:
  8690 ;;		On entry : 0/0
  8691 ;;		On exit  : 0/0
  8692 ;;		Unchanged: 0/0
  8693 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8694 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8695 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8696 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8697 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8698 ;;Total ram usage:        8 bytes
  8699 ;; Hardware stack levels used:    1
  8700 ;; Hardware stack levels required when called:    7
  8701 ;; This function calls:
  8702 ;;		Nothing
  8703 ;; This function is called by:
  8704 ;;		_UI
  8705 ;; This function uses a non-reentrant model
  8706 ;;
  8707                           
  8708                           	psect	text33
  8709  002F60                     __ptext33:
  8710                           	opt stack 0
  8711  002F60                     ___awdiv:
  8712                           	opt stack 22
  8713                           
  8714                           ; BSR set to: 0
  8715                           ;incstack = 0
  8716  002F60  0E00               	movlw	0
  8717  002F62  0100               	movlb	0	; () banked
  8718  002F64  6F8B               	movwf	___awdiv@sign& (0+255),b
  8719                           
  8720                           ; BSR set to: 0
  8721  002F66  0100               	movlb	0	; () banked
  8722  002F68  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  8723  002F6A  D008               	goto	l6503
  8724                           
  8725                           ; BSR set to: 0
  8726  002F6C  0100               	movlb	0	; () banked
  8727  002F6E  6D88               	negf	___awdiv@divisor& (0+255),b
  8728  002F70  1F89               	comf	(___awdiv@divisor+1)& (0+255),f,b
  8729  002F72  B0D8               	btfsc	status,0,c
  8730  002F74  2B89               	incf	(___awdiv@divisor+1)& (0+255),f,b
  8731                           
  8732                           ; BSR set to: 0
  8733  002F76  0E01               	movlw	1
  8734  002F78  0100               	movlb	0	; () banked
  8735  002F7A  6F8B               	movwf	___awdiv@sign& (0+255),b
  8736  002F7C                     l6503:
  8737                           
  8738                           ; BSR set to: 0
  8739  002F7C  0100               	movlb	0	; () banked
  8740  002F7E  AF87               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  8741  002F80  D008               	goto	l6509
  8742                           
  8743                           ; BSR set to: 0
  8744  002F82  0100               	movlb	0	; () banked
  8745  002F84  6D86               	negf	___awdiv@dividend& (0+255),b
  8746  002F86  1F87               	comf	(___awdiv@dividend+1)& (0+255),f,b
  8747  002F88  B0D8               	btfsc	status,0,c
  8748  002F8A  2B87               	incf	(___awdiv@dividend+1)& (0+255),f,b
  8749                           
  8750                           ; BSR set to: 0
  8751  002F8C  0E01               	movlw	1
  8752  002F8E  0100               	movlb	0	; () banked
  8753  002F90  1B8B               	xorwf	___awdiv@sign& (0+255),f,b
  8754  002F92                     l6509:
  8755                           
  8756                           ; BSR set to: 0
  8757  002F92  0E00               	movlw	0
  8758  002F94  0100               	movlb	0	; () banked
  8759  002F96  6F8D               	movwf	(___awdiv@quotient+1)& (0+255),b
  8760  002F98  0E00               	movlw	0
  8761  002F9A  6F8C               	movwf	___awdiv@quotient& (0+255),b
  8762                           
  8763                           ; BSR set to: 0
  8764  002F9C  0100               	movlb	0	; () banked
  8765  002F9E  5188               	movf	___awdiv@divisor& (0+255),w,b
  8766  002FA0  0100               	movlb	0	; () banked
  8767  002FA2  1189               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  8768  002FA4  B4D8               	btfsc	status,2,c
  8769  002FA6  D02C               	goto	l6531
  8770                           
  8771                           ; BSR set to: 0
  8772  002FA8  0E01               	movlw	1
  8773  002FAA  0100               	movlb	0	; () banked
  8774  002FAC  6F8A               	movwf	___awdiv@counter& (0+255),b
  8775  002FAE  D006               	goto	l6517
  8776  002FB0                     l6515:
  8777                           
  8778                           ; BSR set to: 0
  8779  002FB0  0100               	movlb	0	; () banked
  8780  002FB2  90D8               	bcf	status,0,c
  8781  002FB4  3788               	rlcf	___awdiv@divisor& (0+255),f,b
  8782  002FB6  3789               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  8783  002FB8  0100               	movlb	0	; () banked
  8784  002FBA  2B8A               	incf	___awdiv@counter& (0+255),f,b
  8785  002FBC                     l6517:
  8786                           
  8787                           ; BSR set to: 0
  8788  002FBC  0100               	movlb	0	; () banked
  8789  002FBE  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  8790  002FC0  D7F7               	goto	l6515
  8791  002FC2                     l6519:
  8792                           
  8793                           ; BSR set to: 0
  8794  002FC2  0100               	movlb	0	; () banked
  8795  002FC4  90D8               	bcf	status,0,c
  8796  002FC6  378C               	rlcf	___awdiv@quotient& (0+255),f,b
  8797  002FC8  378D               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  8798                           
  8799                           ; BSR set to: 0
  8800  002FCA  0100               	movlb	0	; () banked
  8801  002FCC  5188               	movf	___awdiv@divisor& (0+255),w,b
  8802  002FCE  0100               	movlb	0	; () banked
  8803  002FD0  5D86               	subwf	___awdiv@dividend& (0+255),w,b
  8804  002FD2  0100               	movlb	0	; () banked
  8805  002FD4  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
  8806  002FD6  0100               	movlb	0	; () banked
  8807  002FD8  5987               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  8808  002FDA  A0D8               	btfss	status,0,c
  8809  002FDC  D00A               	goto	l6527
  8810                           
  8811                           ; BSR set to: 0
  8812  002FDE  0100               	movlb	0	; () banked
  8813  002FE0  5188               	movf	___awdiv@divisor& (0+255),w,b
  8814  002FE2  0100               	movlb	0	; () banked
  8815  002FE4  5F86               	subwf	___awdiv@dividend& (0+255),f,b
  8816  002FE6  0100               	movlb	0	; () banked
  8817  002FE8  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
  8818  002FEA  0100               	movlb	0	; () banked
  8819  002FEC  5B87               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  8820                           
  8821                           ; BSR set to: 0
  8822  002FEE  0100               	movlb	0	; () banked
  8823  002FF0  818C               	bsf	___awdiv@quotient& (0+255),0,b
  8824  002FF2                     l6527:
  8825                           
  8826                           ; BSR set to: 0
  8827  002FF2  0100               	movlb	0	; () banked
  8828  002FF4  90D8               	bcf	status,0,c
  8829  002FF6  3389               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  8830  002FF8  3388               	rrcf	___awdiv@divisor& (0+255),f,b
  8831                           
  8832                           ; BSR set to: 0
  8833  002FFA  0100               	movlb	0	; () banked
  8834  002FFC  2F8A               	decfsz	___awdiv@counter& (0+255),f,b
  8835  002FFE  D7E1               	goto	l6519
  8836  003000                     l6531:
  8837                           
  8838                           ; BSR set to: 0
  8839  003000  0100               	movlb	0	; () banked
  8840  003002  518B               	movf	___awdiv@sign& (0+255),w,b
  8841  003004  0100               	movlb	0	; () banked
  8842  003006  B4D8               	btfsc	status,2,c
  8843  003008  D005               	goto	l6535
  8844                           
  8845                           ; BSR set to: 0
  8846  00300A  0100               	movlb	0	; () banked
  8847  00300C  6D8C               	negf	___awdiv@quotient& (0+255),b
  8848  00300E  1F8D               	comf	(___awdiv@quotient+1)& (0+255),f,b
  8849  003010  B0D8               	btfsc	status,0,c
  8850  003012  2B8D               	incf	(___awdiv@quotient+1)& (0+255),f,b
  8851  003014                     l6535:
  8852                           
  8853                           ; BSR set to: 0
  8854  003014  C08C  F086         	movff	___awdiv@quotient,?___awdiv
  8855  003018  C08D  F087         	movff	___awdiv@quotient+1,?___awdiv+1
  8856  00301C  0012               	return	
  8857  00301E                     __end_of___awdiv:
  8858                           	opt stack 0
  8859                           tblptru	equ	0xFF8
  8860                           tblptrh	equ	0xFF7
  8861                           tblptrl	equ	0xFF6
  8862                           tablat	equ	0xFF5
  8863                           prodh	equ	0xFF4
  8864                           prodl	equ	0xFF3
  8865                           intcon	equ	0xFF2
  8866                           intcon2	equ	0xFF1
  8867                           intcon3	equ	0xFF0
  8868                           postinc0	equ	0xFEE
  8869                           wreg	equ	0xFE8
  8870                           postdec1	equ	0xFE5
  8871                           fsr1l	equ	0xFE1
  8872                           indf2	equ	0xFDF
  8873                           postinc2	equ	0xFDE
  8874                           postdec2	equ	0xFDD
  8875                           fsr2h	equ	0xFDA
  8876                           fsr2l	equ	0xFD9
  8877                           status	equ	0xFD8
  8878                           
  8879 ;; *************** function _Test *****************
  8880 ;; Defined at:
  8881 ;;		line 23 in file "Test.c"
  8882 ;; Parameters:    Size  Location     Type
  8883 ;;		None
  8884 ;; Auto vars:     Size  Location     Type
  8885 ;;		None
  8886 ;; Return value:  Size  Location     Type
  8887 ;;                  2  451[None  ] int 
  8888 ;; Registers used:
  8889 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8890 ;; Tracked objects:
  8891 ;;		On entry : 0/0
  8892 ;;		On exit  : 0/0
  8893 ;;		Unchanged: 0/0
  8894 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8895 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8896 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8897 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8898 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8899 ;;Total ram usage:        2 bytes
  8900 ;; Hardware stack levels used:    1
  8901 ;; Hardware stack levels required when called:   11
  8902 ;; This function calls:
  8903 ;;		_PortTestA5
  8904 ;;		_actuatorTest
  8905 ;;		_algorithmTest
  8906 ;;		_lcdInst
  8907 ;;		_printf
  8908 ;;		_sensorTest
  8909 ;; This function is called by:
  8910 ;;		_main
  8911 ;; This function uses a non-reentrant model
  8912 ;;
  8913                           
  8914                           	psect	text34
  8915  002E9C                     __ptext34:
  8916                           	opt stack 0
  8917  002E9C                     _Test:
  8918                           	opt stack 19
  8919  002E9C                     
  8920                           ;Test.c: 26: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
  8921  002E9C  0E01               	movlw	1
  8922  002E9E  EC92  F01F         	call	_lcdInst
  8923  002EA2  0E68               	movlw	104
  8924  002EA4  0100               	movlb	0	; () banked
  8925  002EA6  6FC4               	movwf	??_Test& (0+255),b
  8926  002EA8  0EE4               	movlw	228
  8927  002EAA                     u6777:
  8928  002EAA  2EE8               	decfsz	wreg,f,c
  8929  002EAC  D7FE               	bra	u6777
  8930  002EAE  2FC4               	decfsz	??_Test& (0+255),f,b
  8931  002EB0  D7FC               	bra	u6777
  8932  002EB2  F000               	nop	
  8933  002EB4  0E80               	movlw	128
  8934  002EB6  EC92  F01F         	call	_lcdInst
  8935                           
  8936                           ;Test.c: 27: printf("1. ALG  2. SNSRS");
  8937  002EBA  0EF0               	movlw	low STR_68
  8938  002EBC  0100               	movlb	0	; () banked
  8939  002EBE  6F8E               	movwf	printf@f& (0+255),b
  8940  002EC0  0EFC               	movlw	high STR_68
  8941  002EC2  0100               	movlb	0	; () banked
  8942  002EC4  6F8F               	movwf	(printf@f+1)& (0+255),b
  8943  002EC6  EC93  F008         	call	_printf	;wreg free
  8944                           
  8945                           ;Test.c: 28: lcdInst(0b11000000);;
  8946  002ECA  0EC0               	movlw	192
  8947  002ECC  EC92  F01F         	call	_lcdInst
  8948                           
  8949                           ;Test.c: 29: printf("3. ACTUATORS");
  8950  002ED0  0E5C               	movlw	low STR_69
  8951  002ED2  0100               	movlb	0	; () banked
  8952  002ED4  6F8E               	movwf	printf@f& (0+255),b
  8953  002ED6  0EFF               	movlw	high STR_69
  8954  002ED8  0100               	movlb	0	; () banked
  8955  002EDA  6F8F               	movwf	(printf@f+1)& (0+255),b
  8956  002EDC  EC93  F008         	call	_printf	;wreg free
  8957                           
  8958                           ;Test.c: 30: _delay((unsigned long)((100)*(32000000/4000.0)));
  8959  002EE0  0E05               	movlw	5
  8960  002EE2  0100               	movlb	0	; () banked
  8961  002EE4  6FC5               	movwf	(??_Test+1)& (0+255),b
  8962  002EE6  0E0F               	movlw	15
  8963  002EE8  0100               	movlb	0	; () banked
  8964  002EEA  6FC4               	movwf	??_Test& (0+255),b
  8965  002EEC  0EF1               	movlw	241
  8966  002EEE                     u6787:
  8967  002EEE  2EE8               	decfsz	wreg,f,c
  8968  002EF0  D7FE               	bra	u6787
  8969  002EF2  2FC4               	decfsz	??_Test& (0+255),f,b
  8970  002EF4  D7FC               	bra	u6787
  8971  002EF6  2FC5               	decfsz	(??_Test+1)& (0+255),f,b
  8972  002EF8  D7FA               	bra	u6787
  8973  002EFA                     l980:
  8974  002EFA  A281               	btfss	3969,1,c	;volatile
  8975  002EFC  D7FE               	goto	l980
  8976                           
  8977                           ;Test.c: 32: var = PORTB >> 4;
  8978  002EFE  CF81 F0C4          	movff	3969,??_Test	;volatile
  8979  002F02  0100               	movlb	0	; () banked
  8980  002F04  3BC4               	swapf	??_Test& (0+255),f,b
  8981  002F06  0E0F               	movlw	15
  8982  002F08  17C4               	andwf	??_Test& (0+255),f,b
  8983  002F0A  0100               	movlb	0	; () banked
  8984  002F0C  51C4               	movf	??_Test& (0+255),w,b
  8985  002F0E  6E77               	movwf	_var,c
  8986  002F10  6A78               	clrf	_var+1,c
  8987  002F12                     l983:
  8988  002F12  A281               	btfss	3969,1,c	;volatile
  8989  002F14  D00D               	goto	l7255
  8990  002F16  D7FD               	goto	l983
  8991  002F18                     l7245:
  8992                           
  8993                           ;Test.c: 36: algorithmTest();
  8994  002F18  ECE3  F016         	call	_algorithmTest	;wreg free
  8995                           
  8996                           ;Test.c: 37: break;
  8997  002F1C  D7BF               	goto	l7229
  8998  002F1E                     l7247:
  8999                           
  9000                           ;Test.c: 39: sensorTest();
  9001  002F1E  EC32  F012         	call	_sensorTest	;wreg free
  9002                           
  9003                           ;Test.c: 40: break;
  9004  002F22  D7BC               	goto	l7229
  9005  002F24                     l7249:
  9006                           
  9007                           ;Test.c: 42: actuatorTest();
  9008  002F24  EC5C  F004         	call	_actuatorTest	;wreg free
  9009                           
  9010                           ;Test.c: 43: break;
  9011  002F28  D7B9               	goto	l7229
  9012  002F2A                     l7251:
  9013                           
  9014                           ;Test.c: 45: PortTestA5();
  9015  002F2A  EC78  F01F         	call	_PortTestA5	;wreg free
  9016                           
  9017                           ;Test.c: 49: }
  9018                           
  9019                           ;Test.c: 48: break;
  9020                           
  9021                           ;Test.c: 47: default:
  9022                           
  9023                           ;Test.c: 46: break;
  9024  002F2E  D7B6               	goto	l7229
  9025  002F30                     l7255:
  9026  002F30  C077  F0C4         	movff	_var,??_Test
  9027  002F34  C078  F0C5         	movff	_var+1,??_Test+1
  9028                           
  9029                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9030                           ; Switch size 1, requested type "space"
  9031                           ; Number of cases is 1, Range of values is 0 to 0
  9032                           ; switch strategies available:
  9033                           ; Name         Instructions Cycles
  9034                           ; simple_byte            4     3 (average)
  9035                           ;	Chosen strategy is simple_byte
  9036  002F38  0100               	movlb	0	; () banked
  9037  002F3A  51C5               	movf	(??_Test+1)& (0+255),w,b
  9038  002F3C  0A00               	xorlw	0	; case 0
  9039  002F3E  A4D8               	btfss	status,2,c
  9040  002F40  D7AD               	goto	l7229
  9041                           
  9042                           ; BSR set to: 0
  9043                           ; Switch size 1, requested type "space"
  9044                           ; Number of cases is 4, Range of values is 0 to 3
  9045                           ; switch strategies available:
  9046                           ; Name         Instructions Cycles
  9047                           ; simple_byte           13     7 (average)
  9048                           ;	Chosen strategy is simple_byte
  9049  002F42  0100               	movlb	0	; () banked
  9050  002F44  51C4               	movf	??_Test& (0+255),w,b
  9051  002F46  0A00               	xorlw	0	; case 0
  9052  002F48  B4D8               	btfsc	status,2,c
  9053  002F4A  D7E6               	goto	l7245
  9054  002F4C  0A01               	xorlw	1	; case 1
  9055  002F4E  B4D8               	btfsc	status,2,c
  9056  002F50  D7E6               	goto	l7247
  9057  002F52  0A03               	xorlw	3	; case 2
  9058  002F54  B4D8               	btfsc	status,2,c
  9059  002F56  D7E6               	goto	l7249
  9060  002F58  0A01               	xorlw	1	; case 3
  9061  002F5A  B4D8               	btfsc	status,2,c
  9062  002F5C  D7E6               	goto	l7251
  9063                           
  9064                           ; BSR set to: 0
  9065                           
  9066                           ; BSR set to: 0
  9067  002F5E  D79E               	goto	l7229
  9068  002F60                     __end_of_Test:
  9069                           	opt stack 0
  9070                           tblptru	equ	0xFF8
  9071                           tblptrh	equ	0xFF7
  9072                           tblptrl	equ	0xFF6
  9073                           tablat	equ	0xFF5
  9074                           prodh	equ	0xFF4
  9075                           prodl	equ	0xFF3
  9076                           intcon	equ	0xFF2
  9077                           intcon2	equ	0xFF1
  9078                           intcon3	equ	0xFF0
  9079                           postinc0	equ	0xFEE
  9080                           wreg	equ	0xFE8
  9081                           postdec1	equ	0xFE5
  9082                           fsr1l	equ	0xFE1
  9083                           indf2	equ	0xFDF
  9084                           postinc2	equ	0xFDE
  9085                           postdec2	equ	0xFDD
  9086                           fsr2h	equ	0xFDA
  9087                           fsr2l	equ	0xFD9
  9088                           status	equ	0xFD8
  9089                           
  9090 ;; *************** function _sensorTest *****************
  9091 ;; Defined at:
  9092 ;;		line 97 in file "Test.c"
  9093 ;; Parameters:    Size  Location     Type
  9094 ;;		None
  9095 ;; Auto vars:     Size  Location     Type
  9096 ;;		None
  9097 ;; Return value:  Size  Location     Type
  9098 ;;                  1    wreg      void 
  9099 ;; Registers used:
  9100 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9101 ;; Tracked objects:
  9102 ;;		On entry : 0/0
  9103 ;;		On exit  : 0/0
  9104 ;;		Unchanged: 0/0
  9105 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9106 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9107 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9108 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9109 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9110 ;;Total ram usage:        2 bytes
  9111 ;; Hardware stack levels used:    1
  9112 ;; Hardware stack levels required when called:   10
  9113 ;; This function calls:
  9114 ;;		_lcdInst
  9115 ;;		_printf
  9116 ;;		_readIR
  9117 ;;		_readMAG
  9118 ;; This function is called by:
  9119 ;;		_Test
  9120 ;; This function uses a non-reentrant model
  9121 ;;
  9122                           
  9123                           	psect	text35
  9124  002464                     __ptext35:
  9125                           	opt stack 0
  9126  002464                     _sensorTest:
  9127                           	opt stack 19
  9128                           
  9129                           ;Test.c: 99: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
  9130                           
  9131                           ; BSR set to: 0
  9132                           ;incstack = 0
  9133  002464  0E01               	movlw	1
  9134  002466  EC92  F01F         	call	_lcdInst
  9135  00246A  0E68               	movlw	104
  9136  00246C  0100               	movlb	0	; () banked
  9137  00246E  6FAB               	movwf	??_sensorTest& (0+255),b
  9138  002470  0EE4               	movlw	228
  9139  002472                     u6797:
  9140  002472  2EE8               	decfsz	wreg,f,c
  9141  002474  D7FE               	bra	u6797
  9142  002476  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9143  002478  D7FC               	bra	u6797
  9144  00247A  F000               	nop	
  9145  00247C  0E80               	movlw	128
  9146  00247E  EC92  F01F         	call	_lcdInst
  9147                           
  9148                           ;Test.c: 100: printf("SENSORS");
  9149  002482  0EAD               	movlw	low STR_77
  9150  002484  0100               	movlb	0	; () banked
  9151  002486  6F8E               	movwf	printf@f& (0+255),b
  9152  002488  0EFF               	movlw	high STR_77
  9153  00248A  0100               	movlb	0	; () banked
  9154  00248C  6F8F               	movwf	(printf@f+1)& (0+255),b
  9155  00248E  EC93  F008         	call	_printf	;wreg free
  9156                           
  9157                           ;Test.c: 101: lcdInst(0b11000000);;
  9158  002492  0EC0               	movlw	192
  9159  002494  EC92  F01F         	call	_lcdInst
  9160                           
  9161                           ;Test.c: 102: printf("PUSH TO START");
  9162  002498  0E25               	movlw	low STR_71
  9163  00249A  0100               	movlb	0	; () banked
  9164  00249C  6F8E               	movwf	printf@f& (0+255),b
  9165  00249E  0EFF               	movlw	high STR_71
  9166  0024A0  0100               	movlb	0	; () banked
  9167  0024A2  6F8F               	movwf	(printf@f+1)& (0+255),b
  9168  0024A4  EC93  F008         	call	_printf	;wreg free
  9169                           
  9170                           ;Test.c: 103: _delay((unsigned long)((100)*(32000000/4000.0)));
  9171  0024A8  0E05               	movlw	5
  9172  0024AA  0100               	movlb	0	; () banked
  9173  0024AC  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
  9174  0024AE  0E0F               	movlw	15
  9175  0024B0  0100               	movlb	0	; () banked
  9176  0024B2  6FAB               	movwf	??_sensorTest& (0+255),b
  9177  0024B4  0EF1               	movlw	241
  9178  0024B6                     u6807:
  9179  0024B6  2EE8               	decfsz	wreg,f,c
  9180  0024B8  D7FE               	bra	u6807
  9181  0024BA  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9182  0024BC  D7FC               	bra	u6807
  9183  0024BE  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
  9184  0024C0  D7FA               	bra	u6807
  9185  0024C2                     l1007:
  9186  0024C2  A281               	btfss	3969,1,c	;volatile
  9187  0024C4  D7FE               	goto	l1007
  9188  0024C6                     l1010:
  9189  0024C6  B281               	btfsc	3969,1,c	;volatile
  9190  0024C8  D7FE               	goto	l1010
  9191                           
  9192                           ;Test.c: 106: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
  9193  0024CA  0E01               	movlw	1
  9194  0024CC  EC92  F01F         	call	_lcdInst
  9195  0024D0  0E68               	movlw	104
  9196  0024D2  0100               	movlb	0	; () banked
  9197  0024D4  6FAB               	movwf	??_sensorTest& (0+255),b
  9198  0024D6  0EE4               	movlw	228
  9199  0024D8                     u6817:
  9200  0024D8  2EE8               	decfsz	wreg,f,c
  9201  0024DA  D7FE               	bra	u6817
  9202  0024DC  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9203  0024DE  D7FC               	bra	u6817
  9204  0024E0  F000               	nop	
  9205  0024E2  0E80               	movlw	128
  9206  0024E4  EC92  F01F         	call	_lcdInst
  9207                           
  9208                           ;Test.c: 111: printf("TST: IR SNSR");
  9209  0024E8  0E4F               	movlw	low STR_79
  9210  0024EA  0100               	movlb	0	; () banked
  9211  0024EC  6F8E               	movwf	printf@f& (0+255),b
  9212  0024EE  0EFF               	movlw	high STR_79
  9213  0024F0  0100               	movlb	0	; () banked
  9214  0024F2  6F8F               	movwf	(printf@f+1)& (0+255),b
  9215  0024F4  EC93  F008         	call	_printf	;wreg free
  9216                           
  9217                           ;Test.c: 112: _delay((unsigned long)((100)*(32000000/4000.0)));
  9218  0024F8  0E05               	movlw	5
  9219  0024FA  0100               	movlb	0	; () banked
  9220  0024FC  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
  9221  0024FE  0E0F               	movlw	15
  9222  002500  0100               	movlb	0	; () banked
  9223  002502  6FAB               	movwf	??_sensorTest& (0+255),b
  9224  002504  0EF1               	movlw	241
  9225  002506                     u6827:
  9226  002506  2EE8               	decfsz	wreg,f,c
  9227  002508  D7FE               	bra	u6827
  9228  00250A  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9229  00250C  D7FC               	bra	u6827
  9230  00250E  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
  9231  002510  D7FA               	bra	u6827
  9232                           
  9233                           ;Test.c: 113: while(PORTBbits.RB1 == 0){
  9234  002512  D021               	goto	l6065
  9235  002514                     l6059:
  9236                           
  9237                           ;Test.c: 114: readIR();
  9238  002514  EC85  F01C         	call	_readIR	;wreg free
  9239                           
  9240                           ;Test.c: 115: lcdInst(0b10000000);;
  9241  002518  0E80               	movlw	128
  9242  00251A  EC92  F01F         	call	_lcdInst
  9243                           
  9244                           ;Test.c: 116: lcdInst(0b11000000);;
  9245  00251E  0EC0               	movlw	192
  9246  002520  EC92  F01F         	call	_lcdInst
  9247                           
  9248                           ;Test.c: 117: printf("IR_signal: %d ", IR_signal);
  9249  002524  0E74               	movlw	low STR_80
  9250  002526  0100               	movlb	0	; () banked
  9251  002528  6F8E               	movwf	printf@f& (0+255),b
  9252  00252A  0EFE               	movlw	high STR_80
  9253  00252C  0100               	movlb	0	; () banked
  9254  00252E  6F8F               	movwf	(printf@f+1)& (0+255),b
  9255  002530  C0DA  F090         	movff	_IR_signal,?_printf+2
  9256  002534  C0DB  F091         	movff	_IR_signal+1,?_printf+3
  9257  002538  EC93  F008         	call	_printf	;wreg free
  9258                           
  9259                           ;Test.c: 118: _delay((unsigned long)((100)*(32000000/4000.0)));
  9260  00253C  0E05               	movlw	5
  9261  00253E  0100               	movlb	0	; () banked
  9262  002540  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
  9263  002542  0E0F               	movlw	15
  9264  002544  0100               	movlb	0	; () banked
  9265  002546  6FAB               	movwf	??_sensorTest& (0+255),b
  9266  002548  0EF1               	movlw	241
  9267  00254A                     u6837:
  9268  00254A  2EE8               	decfsz	wreg,f,c
  9269  00254C  D7FE               	bra	u6837
  9270  00254E  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9271  002550  D7FC               	bra	u6837
  9272  002552  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
  9273  002554  D7FA               	bra	u6837
  9274  002556                     l6065:
  9275  002556  A281               	btfss	3969,1,c	;volatile
  9276  002558  D7DD               	goto	l6059
  9277                           
  9278                           ;Test.c: 119: }
  9279                           ;Test.c: 120: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
  9280  00255A  0E01               	movlw	1
  9281  00255C  EC92  F01F         	call	_lcdInst
  9282  002560  0E68               	movlw	104
  9283  002562  0100               	movlb	0	; () banked
  9284  002564  6FAB               	movwf	??_sensorTest& (0+255),b
  9285  002566  0EE4               	movlw	228
  9286  002568                     u6847:
  9287  002568  2EE8               	decfsz	wreg,f,c
  9288  00256A  D7FE               	bra	u6847
  9289  00256C  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9290  00256E  D7FC               	bra	u6847
  9291  002570  F000               	nop	
  9292  002572  0E80               	movlw	128
  9293  002574  EC92  F01F         	call	_lcdInst
  9294  002578                     l1016:
  9295  002578  B281               	btfsc	3969,1,c	;volatile
  9296  00257A  D7FE               	goto	l1016
  9297                           
  9298                           ;Test.c: 128: printf("TST: MAGNETISM");
  9299  00257C  0EA1               	movlw	low STR_81
  9300  00257E  0100               	movlb	0	; () banked
  9301  002580  6F8E               	movwf	printf@f& (0+255),b
  9302  002582  0EFE               	movlw	high STR_81
  9303  002584  0100               	movlb	0	; () banked
  9304  002586  6F8F               	movwf	(printf@f+1)& (0+255),b
  9305  002588  EC93  F008         	call	_printf	;wreg free
  9306                           
  9307                           ;Test.c: 129: _delay((unsigned long)((100)*(32000000/4000.0)));
  9308  00258C  0E05               	movlw	5
  9309  00258E  0100               	movlb	0	; () banked
  9310  002590  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
  9311  002592  0E0F               	movlw	15
  9312  002594  0100               	movlb	0	; () banked
  9313  002596  6FAB               	movwf	??_sensorTest& (0+255),b
  9314  002598  0EF1               	movlw	241
  9315  00259A                     u6857:
  9316  00259A  2EE8               	decfsz	wreg,f,c
  9317  00259C  D7FE               	bra	u6857
  9318  00259E  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9319  0025A0  D7FC               	bra	u6857
  9320  0025A2  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
  9321  0025A4  D7FA               	bra	u6857
  9322                           
  9323                           ;Test.c: 130: while(PORTBbits.RB1 == 0){
  9324  0025A6  D021               	goto	l6083
  9325  0025A8                     l6077:
  9326                           
  9327                           ;Test.c: 131: readMAG();
  9328  0025A8  EC5F  F01C         	call	_readMAG	;wreg free
  9329                           
  9330                           ;Test.c: 132: lcdInst(0b10000000);;
  9331  0025AC  0E80               	movlw	128
  9332  0025AE  EC92  F01F         	call	_lcdInst
  9333                           
  9334                           ;Test.c: 133: lcdInst(0b11000000);;
  9335  0025B2  0EC0               	movlw	192
  9336  0025B4  EC92  F01F         	call	_lcdInst
  9337                           
  9338                           ;Test.c: 134: printf("MAG_signal: %d ", MAG_signal);
  9339  0025B8  0E44               	movlw	low STR_82
  9340  0025BA  0100               	movlb	0	; () banked
  9341  0025BC  6F8E               	movwf	printf@f& (0+255),b
  9342  0025BE  0EFE               	movlw	high STR_82
  9343  0025C0  0100               	movlb	0	; () banked
  9344  0025C2  6F8F               	movwf	(printf@f+1)& (0+255),b
  9345  0025C4  C0DC  F090         	movff	_MAG_signal,?_printf+2
  9346  0025C8  C0DD  F091         	movff	_MAG_signal+1,?_printf+3
  9347  0025CC  EC93  F008         	call	_printf	;wreg free
  9348                           
  9349                           ;Test.c: 135: _delay((unsigned long)((100)*(32000000/4000.0)));
  9350  0025D0  0E05               	movlw	5
  9351  0025D2  0100               	movlb	0	; () banked
  9352  0025D4  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
  9353  0025D6  0E0F               	movlw	15
  9354  0025D8  0100               	movlb	0	; () banked
  9355  0025DA  6FAB               	movwf	??_sensorTest& (0+255),b
  9356  0025DC  0EF1               	movlw	241
  9357  0025DE                     u6867:
  9358  0025DE  2EE8               	decfsz	wreg,f,c
  9359  0025E0  D7FE               	bra	u6867
  9360  0025E2  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9361  0025E4  D7FC               	bra	u6867
  9362  0025E6  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
  9363  0025E8  D7FA               	bra	u6867
  9364  0025EA                     l6083:
  9365  0025EA  B281               	btfsc	3969,1,c	;volatile
  9366  0025EC  0012               	return	
  9367  0025EE  D7DC               	goto	l6077
  9368  0025F0                     __end_of_sensorTest:
  9369                           	opt stack 0
  9370                           tblptru	equ	0xFF8
  9371                           tblptrh	equ	0xFF7
  9372                           tblptrl	equ	0xFF6
  9373                           tablat	equ	0xFF5
  9374                           prodh	equ	0xFF4
  9375                           prodl	equ	0xFF3
  9376                           intcon	equ	0xFF2
  9377                           intcon2	equ	0xFF1
  9378                           intcon3	equ	0xFF0
  9379                           postinc0	equ	0xFEE
  9380                           wreg	equ	0xFE8
  9381                           postdec1	equ	0xFE5
  9382                           fsr1l	equ	0xFE1
  9383                           indf2	equ	0xFDF
  9384                           postinc2	equ	0xFDE
  9385                           postdec2	equ	0xFDD
  9386                           fsr2h	equ	0xFDA
  9387                           fsr2l	equ	0xFD9
  9388                           status	equ	0xFD8
  9389                           
  9390 ;; *************** function _readMAG *****************
  9391 ;; Defined at:
  9392 ;;		line 29 in file "ADCFunctionality.c"
  9393 ;; Parameters:    Size  Location     Type
  9394 ;;		None
  9395 ;; Auto vars:     Size  Location     Type
  9396 ;;  res             2    4[BANK0 ] int 
  9397 ;; Return value:  Size  Location     Type
  9398 ;;                  1    wreg      void 
  9399 ;; Registers used:
  9400 ;;		wreg, status,2, status,0, cstack
  9401 ;; Tracked objects:
  9402 ;;		On entry : 0/0
  9403 ;;		On exit  : 0/0
  9404 ;;		Unchanged: 0/0
  9405 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9406 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9407 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9408 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9409 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9410 ;;Total ram usage:        4 bytes
  9411 ;; Hardware stack levels used:    1
  9412 ;; Hardware stack levels required when called:    8
  9413 ;; This function calls:
  9414 ;;		_readADC
  9415 ;; This function is called by:
  9416 ;;		_ID
  9417 ;;		_sensorTest
  9418 ;; This function uses a non-reentrant model
  9419 ;;
  9420                           
  9421                           	psect	text36
  9422  0038BE                     __ptext36:
  9423                           	opt stack 0
  9424  0038BE                     _readMAG:
  9425                           	opt stack 20
  9426                           
  9427                           ;ADCFunctionality.c: 30: readADC(1);
  9428                           
  9429                           ;incstack = 0
  9430  0038BE  0E01               	movlw	1
  9431  0038C0  EC92  F01E         	call	_readADC
  9432                           
  9433                           ;ADCFunctionality.c: 31: int res = ADRESH<<8 | ADRESL;
  9434  0038C4  50C3               	movf	4035,w,c	;volatile
  9435  0038C6  CFC4 F082          	movff	4036,??_readMAG	;volatile
  9436  0038CA  0100               	movlb	0	; () banked
  9437  0038CC  6B83               	clrf	(??_readMAG+1)& (0+255),b
  9438  0038CE  C082  F083         	movff	??_readMAG,??_readMAG+1
  9439  0038D2  0100               	movlb	0	; () banked
  9440  0038D4  6B82               	clrf	??_readMAG& (0+255),b
  9441  0038D6  0100               	movlb	0	; () banked
  9442  0038D8  1182               	iorwf	??_readMAG& (0+255),w,b
  9443  0038DA  0100               	movlb	0	; () banked
  9444  0038DC  6F84               	movwf	readMAG@res& (0+255),b
  9445  0038DE  0100               	movlb	0	; () banked
  9446  0038E0  5183               	movf	(??_readMAG+1)& (0+255),w,b
  9447  0038E2  0100               	movlb	0	; () banked
  9448  0038E4  6F85               	movwf	(readMAG@res+1)& (0+255),b
  9449                           
  9450                           ; BSR set to: 0
  9451                           ;ADCFunctionality.c: 32: MAG_signal = (res < 150) ? 1 : 0;
  9452  0038E6  0100               	movlb	0	; () banked
  9453  0038E8  BF85               	btfsc	(readMAG@res+1)& (0+255),7,b
  9454  0038EA  D008               	goto	u4131
  9455  0038EC  0100               	movlb	0	; () banked
  9456  0038EE  5185               	movf	(readMAG@res+1)& (0+255),w,b
  9457  0038F0  E107               	bnz	u4130
  9458  0038F2  0E96               	movlw	150
  9459  0038F4  0100               	movlb	0	; () banked
  9460  0038F6  5D84               	subwf	readMAG@res& (0+255),w,b
  9461  0038F8  B0D8               	btfsc	status,0,c
  9462  0038FA  D002               	goto	u4130
  9463  0038FC                     u4131:
  9464  0038FC  0E01               	movlw	1
  9465  0038FE  D001               	goto	u4140
  9466  003900                     u4130:
  9467  003900  0E00               	movlw	0
  9468  003902                     u4140:
  9469  003902  0100               	movlb	0	; () banked
  9470  003904  6FDC               	movwf	_MAG_signal& (0+255),b
  9471  003906  6BDD               	clrf	(_MAG_signal+1)& (0+255),b
  9472                           
  9473                           ; BSR set to: 0
  9474  003908  0012               	return		;funcret
  9475  00390A                     __end_of_readMAG:
  9476                           	opt stack 0
  9477                           tblptru	equ	0xFF8
  9478                           tblptrh	equ	0xFF7
  9479                           tblptrl	equ	0xFF6
  9480                           tablat	equ	0xFF5
  9481                           prodh	equ	0xFF4
  9482                           prodl	equ	0xFF3
  9483                           intcon	equ	0xFF2
  9484                           intcon2	equ	0xFF1
  9485                           intcon3	equ	0xFF0
  9486                           postinc0	equ	0xFEE
  9487                           wreg	equ	0xFE8
  9488                           postdec1	equ	0xFE5
  9489                           fsr1l	equ	0xFE1
  9490                           indf2	equ	0xFDF
  9491                           postinc2	equ	0xFDE
  9492                           postdec2	equ	0xFDD
  9493                           fsr2h	equ	0xFDA
  9494                           fsr2l	equ	0xFD9
  9495                           status	equ	0xFD8
  9496                           
  9497 ;; *************** function _readIR *****************
  9498 ;; Defined at:
  9499 ;;		line 23 in file "ADCFunctionality.c"
  9500 ;; Parameters:    Size  Location     Type
  9501 ;;		None
  9502 ;; Auto vars:     Size  Location     Type
  9503 ;;  res             2    4[BANK0 ] int 
  9504 ;; Return value:  Size  Location     Type
  9505 ;;                  1    wreg      void 
  9506 ;; Registers used:
  9507 ;;		wreg, status,2, status,0, cstack
  9508 ;; Tracked objects:
  9509 ;;		On entry : 0/0
  9510 ;;		On exit  : 0/0
  9511 ;;		Unchanged: 0/0
  9512 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9513 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9514 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9515 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9516 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9517 ;;Total ram usage:        4 bytes
  9518 ;; Hardware stack levels used:    1
  9519 ;; Hardware stack levels required when called:    8
  9520 ;; This function calls:
  9521 ;;		_readADC
  9522 ;; This function is called by:
  9523 ;;		_getIR
  9524 ;;		_sensorTest
  9525 ;; This function uses a non-reentrant model
  9526 ;;
  9527                           
  9528                           	psect	text37
  9529  00390A                     __ptext37:
  9530                           	opt stack 0
  9531  00390A                     _readIR:
  9532                           	opt stack 19
  9533                           
  9534                           ;ADCFunctionality.c: 24: readADC(0);
  9535                           
  9536                           ; BSR set to: 0
  9537                           ;incstack = 0
  9538  00390A  0E00               	movlw	0
  9539  00390C  EC92  F01E         	call	_readADC
  9540                           
  9541                           ;ADCFunctionality.c: 25: int res = ADRESH<<8 | ADRESL;
  9542  003910  50C3               	movf	4035,w,c	;volatile
  9543  003912  CFC4 F082          	movff	4036,??_readIR	;volatile
  9544  003916  0100               	movlb	0	; () banked
  9545  003918  6B83               	clrf	(??_readIR+1)& (0+255),b
  9546  00391A  C082  F083         	movff	??_readIR,??_readIR+1
  9547  00391E  0100               	movlb	0	; () banked
  9548  003920  6B82               	clrf	??_readIR& (0+255),b
  9549  003922  0100               	movlb	0	; () banked
  9550  003924  1182               	iorwf	??_readIR& (0+255),w,b
  9551  003926  0100               	movlb	0	; () banked
  9552  003928  6F84               	movwf	readIR@res& (0+255),b
  9553  00392A  0100               	movlb	0	; () banked
  9554  00392C  5183               	movf	(??_readIR+1)& (0+255),w,b
  9555  00392E  0100               	movlb	0	; () banked
  9556  003930  6F85               	movwf	(readIR@res+1)& (0+255),b
  9557                           
  9558                           ; BSR set to: 0
  9559                           ;ADCFunctionality.c: 26: IR_signal = (res < 150) ? 1 : 0;
  9560  003932  0100               	movlb	0	; () banked
  9561  003934  BF85               	btfsc	(readIR@res+1)& (0+255),7,b
  9562  003936  D008               	goto	u3461
  9563  003938  0100               	movlb	0	; () banked
  9564  00393A  5185               	movf	(readIR@res+1)& (0+255),w,b
  9565  00393C  E107               	bnz	u3460
  9566  00393E  0E96               	movlw	150
  9567  003940  0100               	movlb	0	; () banked
  9568  003942  5D84               	subwf	readIR@res& (0+255),w,b
  9569  003944  B0D8               	btfsc	status,0,c
  9570  003946  D002               	goto	u3460
  9571  003948                     u3461:
  9572  003948  0E01               	movlw	1
  9573  00394A  D001               	goto	u3470
  9574  00394C                     u3460:
  9575  00394C  0E00               	movlw	0
  9576  00394E                     u3470:
  9577  00394E  0100               	movlb	0	; () banked
  9578  003950  6FDA               	movwf	_IR_signal& (0+255),b
  9579  003952  6BDB               	clrf	(_IR_signal+1)& (0+255),b
  9580                           
  9581                           ; BSR set to: 0
  9582  003954  0012               	return		;funcret
  9583  003956                     __end_of_readIR:
  9584                           	opt stack 0
  9585                           tblptru	equ	0xFF8
  9586                           tblptrh	equ	0xFF7
  9587                           tblptrl	equ	0xFF6
  9588                           tablat	equ	0xFF5
  9589                           prodh	equ	0xFF4
  9590                           prodl	equ	0xFF3
  9591                           intcon	equ	0xFF2
  9592                           intcon2	equ	0xFF1
  9593                           intcon3	equ	0xFF0
  9594                           postinc0	equ	0xFEE
  9595                           wreg	equ	0xFE8
  9596                           postdec1	equ	0xFE5
  9597                           fsr1l	equ	0xFE1
  9598                           indf2	equ	0xFDF
  9599                           postinc2	equ	0xFDE
  9600                           postdec2	equ	0xFDD
  9601                           fsr2h	equ	0xFDA
  9602                           fsr2l	equ	0xFD9
  9603                           status	equ	0xFD8
  9604                           
  9605 ;; *************** function _readADC *****************
  9606 ;; Defined at:
  9607 ;;		line 15 in file "ADCFunctionality.c"
  9608 ;; Parameters:    Size  Location     Type
  9609 ;;  channel         1    wreg     unsigned char 
  9610 ;; Auto vars:     Size  Location     Type
  9611 ;;  channel         1    1[BANK0 ] unsigned char 
  9612 ;; Return value:  Size  Location     Type
  9613 ;;                  1    wreg      void 
  9614 ;; Registers used:
  9615 ;;		wreg, status,2, status,0, cstack
  9616 ;; Tracked objects:
  9617 ;;		On entry : 0/0
  9618 ;;		On exit  : 0/0
  9619 ;;		Unchanged: 0/0
  9620 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9621 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9622 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9623 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9624 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9625 ;;Total ram usage:        2 bytes
  9626 ;; Hardware stack levels used:    1
  9627 ;; Hardware stack levels required when called:    7
  9628 ;; This function calls:
  9629 ;;		Nothing
  9630 ;; This function is called by:
  9631 ;;		_readIR
  9632 ;;		_readMAG
  9633 ;; This function uses a non-reentrant model
  9634 ;;
  9635                           
  9636                           	psect	text38
  9637  003D24                     __ptext38:
  9638                           	opt stack 0
  9639  003D24                     _readADC:
  9640                           	opt stack 19
  9641                           
  9642                           ; BSR set to: 0
  9643                           ;incstack = 0
  9644                           ;readADC@channel stored from wreg
  9645  003D24  0100               	movlb	0	; () banked
  9646  003D26  6F81               	movwf	readADC@channel& (0+255),b
  9647                           
  9648                           ;ADCFunctionality.c: 17: ADCON0 = channel << 2;
  9649  003D28  0100               	movlb	0	; () banked
  9650  003D2A  4581               	rlncf	readADC@channel& (0+255),w,b
  9651  003D2C  46E8               	rlncf	wreg,f,c
  9652  003D2E  0BFC               	andlw	252
  9653  003D30  6EC2               	movwf	4034,c	;volatile
  9654                           
  9655                           ; BSR set to: 0
  9656                           ;ADCFunctionality.c: 18: ADCON0bits.ADON = 1;
  9657  003D32  80C2               	bsf	4034,0,c	;volatile
  9658                           
  9659                           ; BSR set to: 0
  9660                           ;ADCFunctionality.c: 19: ADCON0bits.GO = 1;
  9661  003D34  82C2               	bsf	4034,1,c	;volatile
  9662                           
  9663                           ;ADCFunctionality.c: 20: while(ADCON0bits.GO_NOT_DONE){_delay((unsigned long)((5)*(32000
      +                          000/4000.0)));}
  9664  003D36  D009               	goto	l4761
  9665  003D38                     l4759:
  9666  003D38  0E34               	movlw	52
  9667  003D3A  0100               	movlb	0	; () banked
  9668  003D3C  6F80               	movwf	??_readADC& (0+255),b
  9669  003D3E  0EF1               	movlw	241
  9670  003D40                     u6877:
  9671  003D40  2EE8               	decfsz	wreg,f,c
  9672  003D42  D7FE               	bra	u6877
  9673  003D44  2F80               	decfsz	??_readADC& (0+255),f,b
  9674  003D46  D7FC               	bra	u6877
  9675  003D48  D000               	nop2	
  9676  003D4A                     l4761:
  9677  003D4A  A2C2               	btfss	4034,1,c	;volatile
  9678  003D4C  0012               	return	
  9679  003D4E  D7F4               	goto	l4759
  9680  003D50                     __end_of_readADC:
  9681                           	opt stack 0
  9682                           tblptru	equ	0xFF8
  9683                           tblptrh	equ	0xFF7
  9684                           tblptrl	equ	0xFF6
  9685                           tablat	equ	0xFF5
  9686                           prodh	equ	0xFF4
  9687                           prodl	equ	0xFF3
  9688                           intcon	equ	0xFF2
  9689                           intcon2	equ	0xFF1
  9690                           intcon3	equ	0xFF0
  9691                           postinc0	equ	0xFEE
  9692                           wreg	equ	0xFE8
  9693                           postdec1	equ	0xFE5
  9694                           fsr1l	equ	0xFE1
  9695                           indf2	equ	0xFDF
  9696                           postinc2	equ	0xFDE
  9697                           postdec2	equ	0xFDD
  9698                           fsr2h	equ	0xFDA
  9699                           fsr2l	equ	0xFD9
  9700                           status	equ	0xFD8
  9701                           
  9702 ;; *************** function _algorithmTest *****************
  9703 ;; Defined at:
  9704 ;;		line 53 in file "Test.c"
  9705 ;; Parameters:    Size  Location     Type
  9706 ;;		None
  9707 ;; Auto vars:     Size  Location     Type
  9708 ;;		None
  9709 ;; Return value:  Size  Location     Type
  9710 ;;                  1    wreg      void 
  9711 ;; Registers used:
  9712 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9713 ;; Tracked objects:
  9714 ;;		On entry : 0/0
  9715 ;;		On exit  : 0/0
  9716 ;;		Unchanged: 0/0
  9717 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9718 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9719 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9720 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9721 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9722 ;;Total ram usage:        2 bytes
  9723 ;; Hardware stack levels used:    1
  9724 ;; Hardware stack levels required when called:   10
  9725 ;; This function calls:
  9726 ;;		_lcdInst
  9727 ;;		_printf
  9728 ;; This function is called by:
  9729 ;;		_Test
  9730 ;; This function uses a non-reentrant model
  9731 ;;
  9732                           
  9733                           	psect	text39
  9734  002DC6                     __ptext39:
  9735                           	opt stack 0
  9736  002DC6                     _algorithmTest:
  9737                           	opt stack 19
  9738                           
  9739                           ;Test.c: 55: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
  9740                           
  9741                           ;incstack = 0
  9742  002DC6  0E01               	movlw	1
  9743  002DC8  EC92  F01F         	call	_lcdInst
  9744  002DCC  0E68               	movlw	104
  9745  002DCE  0100               	movlb	0	; () banked
  9746  002DD0  6FAB               	movwf	??_algorithmTest& (0+255),b
  9747  002DD2  0EE4               	movlw	228
  9748  002DD4                     u6887:
  9749  002DD4  2EE8               	decfsz	wreg,f,c
  9750  002DD6  D7FE               	bra	u6887
  9751  002DD8  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
  9752  002DDA  D7FC               	bra	u6887
  9753  002DDC  F000               	nop	
  9754  002DDE  0E80               	movlw	128
  9755  002DE0  EC92  F01F         	call	_lcdInst
  9756                           
  9757                           ;Test.c: 56: printf("ALGORITHM TEST");
  9758  002DE4  0EEC               	movlw	low STR_70
  9759  002DE6  0100               	movlb	0	; () banked
  9760  002DE8  6F8E               	movwf	printf@f& (0+255),b
  9761  002DEA  0EFE               	movlw	high STR_70
  9762  002DEC  0100               	movlb	0	; () banked
  9763  002DEE  6F8F               	movwf	(printf@f+1)& (0+255),b
  9764  002DF0  EC93  F008         	call	_printf	;wreg free
  9765                           
  9766                           ;Test.c: 57: lcdInst(0b11000000);;
  9767  002DF4  0EC0               	movlw	192
  9768  002DF6  EC92  F01F         	call	_lcdInst
  9769                           
  9770                           ;Test.c: 58: printf("PUSH TO START");
  9771  002DFA  0E25               	movlw	low STR_71
  9772  002DFC  0100               	movlb	0	; () banked
  9773  002DFE  6F8E               	movwf	printf@f& (0+255),b
  9774  002E00  0EFF               	movlw	high STR_71
  9775  002E02  0100               	movlb	0	; () banked
  9776  002E04  6F8F               	movwf	(printf@f+1)& (0+255),b
  9777  002E06  EC93  F008         	call	_printf	;wreg free
  9778                           
  9779                           ;Test.c: 59: _delay((unsigned long)((100)*(32000000/4000.0)));
  9780  002E0A  0E05               	movlw	5
  9781  002E0C  0100               	movlb	0	; () banked
  9782  002E0E  6FAC               	movwf	(??_algorithmTest+1)& (0+255),b
  9783  002E10  0E0F               	movlw	15
  9784  002E12  0100               	movlb	0	; () banked
  9785  002E14  6FAB               	movwf	??_algorithmTest& (0+255),b
  9786  002E16  0EF1               	movlw	241
  9787  002E18                     u6897:
  9788  002E18  2EE8               	decfsz	wreg,f,c
  9789  002E1A  D7FE               	bra	u6897
  9790  002E1C  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
  9791  002E1E  D7FC               	bra	u6897
  9792  002E20  2FAC               	decfsz	(??_algorithmTest+1)& (0+255),f,b
  9793  002E22  D7FA               	bra	u6897
  9794  002E24                     l998:
  9795  002E24  A281               	btfss	3969,1,c	;volatile
  9796  002E26  D7FE               	goto	l998
  9797  002E28                     l1001:
  9798  002E28  B281               	btfsc	3969,1,c	;volatile
  9799  002E2A  D7FE               	goto	l1001
  9800                           
  9801                           ;Test.c: 62: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
  9802  002E2C  0E01               	movlw	1
  9803  002E2E  EC92  F01F         	call	_lcdInst
  9804  002E32  0E68               	movlw	104
  9805  002E34  0100               	movlb	0	; () banked
  9806  002E36  6FAB               	movwf	??_algorithmTest& (0+255),b
  9807  002E38  0EE4               	movlw	228
  9808  002E3A                     u6907:
  9809  002E3A  2EE8               	decfsz	wreg,f,c
  9810  002E3C  D7FE               	bra	u6907
  9811  002E3E  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
  9812  002E40  D7FC               	bra	u6907
  9813  002E42  F000               	nop	
  9814  002E44  0E80               	movlw	128
  9815  002E46  EC92  F01F         	call	_lcdInst
  9816                           
  9817                           ;Test.c: 67: printf("ALG1: 9 POPNOTAB");
  9818  002E4A  0EBD               	movlw	low STR_72
  9819  002E4C  0100               	movlb	0	; () banked
  9820  002E4E  6F8E               	movwf	printf@f& (0+255),b
  9821  002E50  0EFC               	movlw	high STR_72
  9822  002E52  0100               	movlb	0	; () banked
  9823  002E54  6F8F               	movwf	(printf@f+1)& (0+255),b
  9824  002E56  EC93  F008         	call	_printf	;wreg free
  9825                           
  9826                           ;Test.c: 74: printf("ALG2: 12 CANS");
  9827  002E5A  0E09               	movlw	low STR_73
  9828  002E5C  0100               	movlb	0	; () banked
  9829  002E5E  6F8E               	movwf	printf@f& (0+255),b
  9830  002E60  0EFF               	movlw	high STR_73
  9831  002E62  0100               	movlb	0	; () banked
  9832  002E64  6F8F               	movwf	(printf@f+1)& (0+255),b
  9833  002E66  EC93  F008         	call	_printf	;wreg free
  9834                           
  9835                           ;Test.c: 83: printf("ALG3: 1 CAN");
  9836  002E6A  0E76               	movlw	low STR_74
  9837  002E6C  0100               	movlb	0	; () banked
  9838  002E6E  6F8E               	movwf	printf@f& (0+255),b
  9839  002E70  0EFF               	movlw	high STR_74
  9840  002E72  0100               	movlb	0	; () banked
  9841  002E74  6F8F               	movwf	(printf@f+1)& (0+255),b
  9842  002E76  EC93  F008         	call	_printf	;wreg free
  9843                           
  9844                           ;Test.c: 89: printf("ALG4: ALL CANS");
  9845  002E7A  0ECE               	movlw	low STR_75
  9846  002E7C  0100               	movlb	0	; () banked
  9847  002E7E  6F8E               	movwf	printf@f& (0+255),b
  9848  002E80  0EFE               	movlw	high STR_75
  9849  002E82  0100               	movlb	0	; () banked
  9850  002E84  6F8F               	movwf	(printf@f+1)& (0+255),b
  9851  002E86  EC93  F008         	call	_printf	;wreg free
  9852                           
  9853                           ;Test.c: 94: printf("ALG5: NO CANS");
  9854  002E8A  0E17               	movlw	low STR_76
  9855  002E8C  0100               	movlb	0	; () banked
  9856  002E8E  6F8E               	movwf	printf@f& (0+255),b
  9857  002E90  0EFF               	movlw	high STR_76
  9858  002E92  0100               	movlb	0	; () banked
  9859  002E94  6F8F               	movwf	(printf@f+1)& (0+255),b
  9860  002E96  EC93  F008         	call	_printf	;wreg free
  9861  002E9A  0012               	return		;funcret
  9862  002E9C                     __end_of_algorithmTest:
  9863                           	opt stack 0
  9864                           tblptru	equ	0xFF8
  9865                           tblptrh	equ	0xFF7
  9866                           tblptrl	equ	0xFF6
  9867                           tablat	equ	0xFF5
  9868                           prodh	equ	0xFF4
  9869                           prodl	equ	0xFF3
  9870                           intcon	equ	0xFF2
  9871                           intcon2	equ	0xFF1
  9872                           intcon3	equ	0xFF0
  9873                           postinc0	equ	0xFEE
  9874                           wreg	equ	0xFE8
  9875                           postdec1	equ	0xFE5
  9876                           fsr1l	equ	0xFE1
  9877                           indf2	equ	0xFDF
  9878                           postinc2	equ	0xFDE
  9879                           postdec2	equ	0xFDD
  9880                           fsr2h	equ	0xFDA
  9881                           fsr2l	equ	0xFD9
  9882                           status	equ	0xFD8
  9883                           
  9884 ;; *************** function _actuatorTest *****************
  9885 ;; Defined at:
  9886 ;;		line 139 in file "Test.c"
  9887 ;; Parameters:    Size  Location     Type
  9888 ;;		None
  9889 ;; Auto vars:     Size  Location     Type
  9890 ;;  i               1   45[BANK0 ] unsigned char 
  9891 ;;  i               1   67[BANK0 ] unsigned char 
  9892 ;;  i               1   66[BANK0 ] unsigned char 
  9893 ;;  i               1   65[BANK0 ] unsigned char 
  9894 ;;  i               1   64[BANK0 ] unsigned char 
  9895 ;;  i               1   63[BANK0 ] unsigned char 
  9896 ;;  i               1   62[BANK0 ] unsigned char 
  9897 ;;  i               1   61[BANK0 ] unsigned char 
  9898 ;;  i               1   60[BANK0 ] unsigned char 
  9899 ;;  i               1   59[BANK0 ] unsigned char 
  9900 ;;  i               1   58[BANK0 ] unsigned char 
  9901 ;;  i               1   57[BANK0 ] unsigned char 
  9902 ;;  i               1   56[BANK0 ] unsigned char 
  9903 ;;  i               1   55[BANK0 ] unsigned char 
  9904 ;;  i               1   54[BANK0 ] unsigned char 
  9905 ;;  i               1   53[BANK0 ] unsigned char 
  9906 ;;  i               1   52[BANK0 ] unsigned char 
  9907 ;;  i               1   51[BANK0 ] unsigned char 
  9908 ;;  i               1   50[BANK0 ] unsigned char 
  9909 ;;  i               1   49[BANK0 ] unsigned char 
  9910 ;;  i               1   48[BANK0 ] unsigned char 
  9911 ;;  i               1   47[BANK0 ] unsigned char 
  9912 ;;  i               1   46[BANK0 ] unsigned char 
  9913 ;; Return value:  Size  Location     Type
  9914 ;;                  1    wreg      void 
  9915 ;; Registers used:
  9916 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9917 ;; Tracked objects:
  9918 ;;		On entry : 0/0
  9919 ;;		On exit  : 0/0
  9920 ;;		Unchanged: 0/0
  9921 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9922 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9923 ;;      Locals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9924 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9925 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9926 ;;Total ram usage:       25 bytes
  9927 ;; Hardware stack levels used:    1
  9928 ;; Hardware stack levels required when called:   10
  9929 ;; This function calls:
  9930 ;;		_lcdInst
  9931 ;;		_printf
  9932 ;;		_updateServoPosition
  9933 ;; This function is called by:
  9934 ;;		_Test
  9935 ;; This function uses a non-reentrant model
  9936 ;;
  9937                           
  9938                           	psect	text40
  9939  0008B8                     __ptext40:
  9940                           	opt stack 0
  9941  0008B8                     _actuatorTest:
  9942                           	opt stack 19
  9943                           
  9944                           ;Test.c: 141: (INTCONbits.GIE = 1);
  9945                           
  9946                           ;incstack = 0
  9947  0008B8  8EF2               	bsf	intcon,7,c	;volatile
  9948                           
  9949                           ;Test.c: 142: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
  9950  0008BA  0E01               	movlw	1
  9951  0008BC  EC92  F01F         	call	_lcdInst
  9952  0008C0  0E68               	movlw	104
  9953  0008C2  0100               	movlb	0	; () banked
  9954  0008C4  6FAB               	movwf	??_actuatorTest& (0+255),b
  9955  0008C6  0EE4               	movlw	228
  9956  0008C8                     u6917:
  9957  0008C8  2EE8               	decfsz	wreg,f,c
  9958  0008CA  D7FE               	bra	u6917
  9959  0008CC  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
  9960  0008CE  D7FC               	bra	u6917
  9961  0008D0  F000               	nop	
  9962  0008D2  0E80               	movlw	128
  9963  0008D4  EC92  F01F         	call	_lcdInst
  9964                           
  9965                           ;Test.c: 143: printf("ACTUATORS");
  9966  0008D8  0E5F               	movlw	low (STR_69+3)
  9967  0008DA  0100               	movlb	0	; () banked
  9968  0008DC  6F8E               	movwf	printf@f& (0+255),b
  9969  0008DE  0EFF               	movlw	high (STR_69+3)
  9970  0008E0  0100               	movlb	0	; () banked
  9971  0008E2  6F8F               	movwf	(printf@f+1)& (0+255),b
  9972  0008E4  EC93  F008         	call	_printf	;wreg free
  9973                           
  9974                           ;Test.c: 144: lcdInst(0b11000000);;
  9975  0008E8  0EC0               	movlw	192
  9976  0008EA  EC92  F01F         	call	_lcdInst
  9977                           
  9978                           ;Test.c: 145: printf("PUSH TO START");
  9979  0008EE  0E25               	movlw	low STR_71
  9980  0008F0  0100               	movlb	0	; () banked
  9981  0008F2  6F8E               	movwf	printf@f& (0+255),b
  9982  0008F4  0EFF               	movlw	high STR_71
  9983  0008F6  0100               	movlb	0	; () banked
  9984  0008F8  6F8F               	movwf	(printf@f+1)& (0+255),b
  9985  0008FA  EC93  F008         	call	_printf	;wreg free
  9986                           
  9987                           ;Test.c: 146: _delay((unsigned long)((100)*(32000000/4000.0)));
  9988  0008FE  0E05               	movlw	5
  9989  000900  0100               	movlb	0	; () banked
  9990  000902  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
  9991  000904  0E0F               	movlw	15
  9992  000906  0100               	movlb	0	; () banked
  9993  000908  6FAB               	movwf	??_actuatorTest& (0+255),b
  9994  00090A  0EF1               	movlw	241
  9995  00090C                     u6927:
  9996  00090C  2EE8               	decfsz	wreg,f,c
  9997  00090E  D7FE               	bra	u6927
  9998  000910  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
  9999  000912  D7FC               	bra	u6927
 10000  000914  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 10001  000916  D7FA               	bra	u6927
 10002  000918                     l1025:
 10003  000918  A281               	btfss	3969,1,c	;volatile
 10004  00091A  D7FE               	goto	l1025
 10005  00091C                     l1028:
 10006  00091C  B281               	btfsc	3969,1,c	;volatile
 10007  00091E  D7FE               	goto	l1028
 10008                           
 10009                           ;Test.c: 149: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10010  000920  0E01               	movlw	1
 10011  000922  EC92  F01F         	call	_lcdInst
 10012  000926  0E68               	movlw	104
 10013  000928  0100               	movlb	0	; () banked
 10014  00092A  6FAB               	movwf	??_actuatorTest& (0+255),b
 10015  00092C  0EE4               	movlw	228
 10016  00092E                     u6937:
 10017  00092E  2EE8               	decfsz	wreg,f,c
 10018  000930  D7FE               	bra	u6937
 10019  000932  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10020  000934  D7FC               	bra	u6937
 10021  000936  F000               	nop	
 10022  000938  0E80               	movlw	128
 10023  00093A  EC92  F01F         	call	_lcdInst
 10024                           
 10025                           ;Test.c: 154: printf("TST: DC MOTORS");
 10026  00093E  0EDD               	movlw	low STR_85
 10027  000940  0100               	movlb	0	; () banked
 10028  000942  6F8E               	movwf	printf@f& (0+255),b
 10029  000944  0EFE               	movlw	high STR_85
 10030  000946  0100               	movlb	0	; () banked
 10031  000948  6F8F               	movwf	(printf@f+1)& (0+255),b
 10032  00094A  EC93  F008         	call	_printf	;wreg free
 10033                           
 10034                           ;Test.c: 155: lcdInst(0b11000000);;
 10035  00094E  0EC0               	movlw	192
 10036  000950  EC92  F01F         	call	_lcdInst
 10037                           
 10038                           ;Test.c: 156: printf("PIN RA5 HIGH.");
 10039  000954  0EFB               	movlw	low STR_86
 10040  000956  0100               	movlb	0	; () banked
 10041  000958  6F8E               	movwf	printf@f& (0+255),b
 10042  00095A  0EFE               	movlw	high STR_86
 10043  00095C  0100               	movlb	0	; () banked
 10044  00095E  6F8F               	movwf	(printf@f+1)& (0+255),b
 10045  000960  EC93  F008         	call	_printf	;wreg free
 10046                           
 10047                           ;Test.c: 157: LATAbits.LATA5 = 1;
 10048  000964  8A89               	bsf	3977,5,c	;volatile
 10049                           
 10050                           ;Test.c: 158: for(i=0;i<5;i++){for(char i=0;i<100;i++){_delay((unsigned long)((10)*(3200
      +                          0000/4000.0)));};}
 10051  000966  0E00               	movlw	0
 10052  000968  0100               	movlb	0	; () banked
 10053  00096A  6FE7               	movwf	(_i+1)& (0+255),b
 10054  00096C  0E00               	movlw	0
 10055  00096E  6FE6               	movwf	_i& (0+255),b
 10056                           
 10057                           ; BSR set to: 0
 10058  000970  0100               	movlb	0	; () banked
 10059  000972  BFE7               	btfsc	(_i+1)& (0+255),7,b
 10060  000974  D008               	goto	l6121
 10061  000976  0100               	movlb	0	; () banked
 10062  000978  51E7               	movf	(_i+1)& (0+255),w,b
 10063  00097A  E123               	bnz	l1032
 10064  00097C  0E05               	movlw	5
 10065  00097E  0100               	movlb	0	; () banked
 10066  000980  5DE6               	subwf	_i& (0+255),w,b
 10067  000982  B0D8               	btfsc	status,0,c
 10068  000984  D01E               	goto	l1032
 10069  000986                     l6121:
 10070                           
 10071                           ; BSR set to: 0
 10072  000986  0E00               	movlw	0
 10073  000988  0100               	movlb	0	; () banked
 10074  00098A  6FAD               	movwf	actuatorTest@i& (0+255),b
 10075  00098C                     l6123:
 10076                           
 10077                           ; BSR set to: 0
 10078  00098C  0E63               	movlw	99
 10079  00098E  0100               	movlb	0	; () banked
 10080  000990  65AD               	cpfsgt	actuatorTest@i& (0+255),b
 10081  000992  D001               	goto	l6127
 10082  000994  D00C               	goto	l6131
 10083  000996                     l6127:
 10084                           
 10085                           ; BSR set to: 0
 10086  000996  0E68               	movlw	104
 10087  000998  0100               	movlb	0	; () banked
 10088  00099A  6FAB               	movwf	??_actuatorTest& (0+255),b
 10089  00099C  0EE4               	movlw	228
 10090  00099E                     u6947:
 10091  00099E  2EE8               	decfsz	wreg,f,c
 10092  0009A0  D7FE               	bra	u6947
 10093  0009A2  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10094  0009A4  D7FC               	bra	u6947
 10095  0009A6  F000               	nop	
 10096  0009A8  0100               	movlb	0	; () banked
 10097  0009AA  2BAD               	incf	actuatorTest@i& (0+255),f,b
 10098  0009AC  D7EF               	goto	l6123
 10099  0009AE                     l6131:
 10100                           
 10101                           ; BSR set to: 0
 10102  0009AE  0100               	movlb	0	; () banked
 10103  0009B0  4BE6               	infsnz	_i& (0+255),f,b
 10104  0009B2  2BE7               	incf	(_i+1)& (0+255),f,b
 10105                           
 10106                           ; BSR set to: 0
 10107  0009B4  0100               	movlb	0	; () banked
 10108  0009B6  BFE7               	btfsc	(_i+1)& (0+255),7,b
 10109  0009B8  D7E6               	goto	l6121
 10110  0009BA  0100               	movlb	0	; () banked
 10111  0009BC  51E7               	movf	(_i+1)& (0+255),w,b
 10112  0009BE  E101               	bnz	u4720
 10113  0009C0  D7DD               	goto	L6
 10114  0009C2                     u4720:
 10115  0009C2                     l1032:
 10116                           
 10117                           ; BSR set to: 0
 10118                           ;Test.c: 159: LATAbits.LATA5 = 0;
 10119  0009C2  9A89               	bcf	3977,5,c	;volatile
 10120                           
 10121                           ; BSR set to: 0
 10122                           ;Test.c: 160: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10123  0009C4  0E01               	movlw	1
 10124  0009C6  EC92  F01F         	call	_lcdInst
 10125  0009CA  0E68               	movlw	104
 10126  0009CC  0100               	movlb	0	; () banked
 10127  0009CE  6FAB               	movwf	??_actuatorTest& (0+255),b
 10128  0009D0  0EE4               	movlw	228
 10129  0009D2                     u6957:
 10130  0009D2  2EE8               	decfsz	wreg,f,c
 10131  0009D4  D7FE               	bra	u6957
 10132  0009D6  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10133  0009D8  D7FC               	bra	u6957
 10134  0009DA  F000               	nop	
 10135  0009DC  0E80               	movlw	128
 10136  0009DE  EC92  F01F         	call	_lcdInst
 10137                           
 10138                           ;Test.c: 166: printf("TST: COND SOLN'D");
 10139  0009E2  0ECE               	movlw	low STR_87
 10140  0009E4  0100               	movlb	0	; () banked
 10141  0009E6  6F8E               	movwf	printf@f& (0+255),b
 10142  0009E8  0EFC               	movlw	high STR_87
 10143  0009EA  0100               	movlb	0	; () banked
 10144  0009EC  6F8F               	movwf	(printf@f+1)& (0+255),b
 10145  0009EE  EC93  F008         	call	_printf	;wreg free
 10146                           
 10147                           ;Test.c: 167: lcdInst(0b11000000);;
 10148  0009F2  0EC0               	movlw	192
 10149  0009F4  EC92  F01F         	call	_lcdInst
 10150                           
 10151                           ;Test.c: 168: printf("PIN RA3...");
 10152  0009F8  0E82               	movlw	low STR_88
 10153  0009FA  0100               	movlb	0	; () banked
 10154  0009FC  6F8E               	movwf	printf@f& (0+255),b
 10155  0009FE  0EFF               	movlw	high STR_88
 10156  000A00  0100               	movlb	0	; () banked
 10157  000A02  6F8F               	movwf	(printf@f+1)& (0+255),b
 10158  000A04  EC93  F008         	call	_printf	;wreg free
 10159                           
 10160                           ;Test.c: 169: for(i=0;i<5;i++){
 10161  000A08  0E00               	movlw	0
 10162  000A0A  0100               	movlb	0	; () banked
 10163  000A0C  6FE7               	movwf	(_i+1)& (0+255),b
 10164  000A0E  0E00               	movlw	0
 10165  000A10  6FE6               	movwf	_i& (0+255),b
 10166                           
 10167                           ; BSR set to: 0
 10168  000A12  0100               	movlb	0	; () banked
 10169  000A14  BFE7               	btfsc	(_i+1)& (0+255),7,b
 10170  000A16  D008               	goto	l1035
 10171  000A18  0100               	movlb	0	; () banked
 10172  000A1A  51E7               	movf	(_i+1)& (0+255),w,b
 10173  000A1C  E12C               	bnz	l1036
 10174  000A1E  0E05               	movlw	5
 10175  000A20  0100               	movlb	0	; () banked
 10176  000A22  5DE6               	subwf	_i& (0+255),w,b
 10177  000A24  B0D8               	btfsc	status,0,c
 10178  000A26  D027               	goto	l1036
 10179  000A28                     l1035:
 10180                           
 10181                           ; BSR set to: 0
 10182                           ;Test.c: 170: LATAbits.LATA3 = 1;
 10183  000A28  8689               	bsf	3977,3,c	;volatile
 10184                           
 10185                           ; BSR set to: 0
 10186                           ;Test.c: 171: _delay((unsigned long)((100)*(32000000/4000.0)));
 10187  000A2A  0E05               	movlw	5
 10188  000A2C  0100               	movlb	0	; () banked
 10189  000A2E  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 10190  000A30  0E0F               	movlw	15
 10191  000A32  0100               	movlb	0	; () banked
 10192  000A34  6FAB               	movwf	??_actuatorTest& (0+255),b
 10193  000A36  0EF1               	movlw	241
 10194  000A38                     u6967:
 10195  000A38  2EE8               	decfsz	wreg,f,c
 10196  000A3A  D7FE               	bra	u6967
 10197  000A3C  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10198  000A3E  D7FC               	bra	u6967
 10199  000A40  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 10200  000A42  D7FA               	bra	u6967
 10201                           
 10202                           ;Test.c: 172: LATAbits.LATA3 = ~1;
 10203  000A44  9689               	bcf	3977,3,c	;volatile
 10204                           
 10205                           ;Test.c: 173: _delay((unsigned long)((1000-100)*(32000000/4000.0)));
 10206  000A46  0E25               	movlw	37
 10207  000A48  0100               	movlb	0	; () banked
 10208  000A4A  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 10209  000A4C  0E87               	movlw	135
 10210  000A4E  0100               	movlb	0	; () banked
 10211  000A50  6FAB               	movwf	??_actuatorTest& (0+255),b
 10212  000A52  0E8B               	movlw	139
 10213  000A54                     u6977:
 10214  000A54  2EE8               	decfsz	wreg,f,c
 10215  000A56  D7FE               	bra	u6977
 10216  000A58  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10217  000A5A  D7FC               	bra	u6977
 10218  000A5C  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 10219  000A5E  D7FA               	bra	u6977
 10220  000A60  D000               	nop2	
 10221  000A62  0100               	movlb	0	; () banked
 10222  000A64  4BE6               	infsnz	_i& (0+255),f,b
 10223  000A66  2BE7               	incf	(_i+1)& (0+255),f,b
 10224  000A68  0100               	movlb	0	; () banked
 10225  000A6A  BFE7               	btfsc	(_i+1)& (0+255),7,b
 10226  000A6C  D7DD               	goto	l1035
 10227  000A6E  0100               	movlb	0	; () banked
 10228  000A70  51E7               	movf	(_i+1)& (0+255),w,b
 10229  000A72  E101               	bnz	u4740
 10230  000A74  D7D4               	goto	L7
 10231  000A76                     u4740:
 10232  000A76                     l1036:
 10233                           
 10234                           ; BSR set to: 0
 10235                           ;Test.c: 174: }
 10236                           ;Test.c: 175: LATAbits.LATA3 = ~1;
 10237  000A76  9689               	bcf	3977,3,c	;volatile
 10238                           
 10239                           ; BSR set to: 0
 10240                           ;Test.c: 176: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10241  000A78  0E01               	movlw	1
 10242  000A7A  EC92  F01F         	call	_lcdInst
 10243  000A7E  0E68               	movlw	104
 10244  000A80  0100               	movlb	0	; () banked
 10245  000A82  6FAB               	movwf	??_actuatorTest& (0+255),b
 10246  000A84  0EE4               	movlw	228
 10247  000A86                     u6987:
 10248  000A86  2EE8               	decfsz	wreg,f,c
 10249  000A88  D7FE               	bra	u6987
 10250  000A8A  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10251  000A8C  D7FC               	bra	u6987
 10252  000A8E  F000               	nop	
 10253  000A90  0E80               	movlw	128
 10254  000A92  EC92  F01F         	call	_lcdInst
 10255                           
 10256                           ;Test.c: 182: printf("TST: PUSH SOLN'D");
 10257  000A96  0EDF               	movlw	low STR_89
 10258  000A98  0100               	movlb	0	; () banked
 10259  000A9A  6F8E               	movwf	printf@f& (0+255),b
 10260  000A9C  0EFC               	movlw	high STR_89
 10261  000A9E  0100               	movlb	0	; () banked
 10262  000AA0  6F8F               	movwf	(printf@f+1)& (0+255),b
 10263  000AA2  EC93  F008         	call	_printf	;wreg free
 10264                           
 10265                           ;Test.c: 183: lcdInst(0b11000000);;
 10266  000AA6  0EC0               	movlw	192
 10267  000AA8  EC92  F01F         	call	_lcdInst
 10268                           
 10269                           ;Test.c: 184: printf("PIN RA4...");
 10270  000AAC  0E8D               	movlw	low STR_90
 10271  000AAE  0100               	movlb	0	; () banked
 10272  000AB0  6F8E               	movwf	printf@f& (0+255),b
 10273  000AB2  0EFF               	movlw	high STR_90
 10274  000AB4  0100               	movlb	0	; () banked
 10275  000AB6  6F8F               	movwf	(printf@f+1)& (0+255),b
 10276  000AB8  EC93  F008         	call	_printf	;wreg free
 10277                           
 10278                           ;Test.c: 185: for(i=0;i<5;i++){
 10279  000ABC  0E00               	movlw	0
 10280  000ABE  0100               	movlb	0	; () banked
 10281  000AC0  6FE7               	movwf	(_i+1)& (0+255),b
 10282  000AC2  0E00               	movlw	0
 10283  000AC4  6FE6               	movwf	_i& (0+255),b
 10284                           
 10285                           ; BSR set to: 0
 10286  000AC6  0100               	movlb	0	; () banked
 10287  000AC8  BFE7               	btfsc	(_i+1)& (0+255),7,b
 10288  000ACA  D008               	goto	l1037
 10289  000ACC  0100               	movlb	0	; () banked
 10290  000ACE  51E7               	movf	(_i+1)& (0+255),w,b
 10291  000AD0  E12C               	bnz	l1038
 10292  000AD2  0E05               	movlw	5
 10293  000AD4  0100               	movlb	0	; () banked
 10294  000AD6  5DE6               	subwf	_i& (0+255),w,b
 10295  000AD8  B0D8               	btfsc	status,0,c
 10296  000ADA  D027               	goto	l1038
 10297  000ADC                     l1037:
 10298                           
 10299                           ; BSR set to: 0
 10300                           ;Test.c: 186: LATAbits.LATA4 = 1;
 10301  000ADC  8889               	bsf	3977,4,c	;volatile
 10302                           
 10303                           ; BSR set to: 0
 10304                           ;Test.c: 187: _delay((unsigned long)((100)*(32000000/4000.0)));
 10305  000ADE  0E05               	movlw	5
 10306  000AE0  0100               	movlb	0	; () banked
 10307  000AE2  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 10308  000AE4  0E0F               	movlw	15
 10309  000AE6  0100               	movlb	0	; () banked
 10310  000AE8  6FAB               	movwf	??_actuatorTest& (0+255),b
 10311  000AEA  0EF1               	movlw	241
 10312  000AEC                     u6997:
 10313  000AEC  2EE8               	decfsz	wreg,f,c
 10314  000AEE  D7FE               	bra	u6997
 10315  000AF0  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10316  000AF2  D7FC               	bra	u6997
 10317  000AF4  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 10318  000AF6  D7FA               	bra	u6997
 10319                           
 10320                           ;Test.c: 188: LATAbits.LATA4 = ~1;
 10321  000AF8  9889               	bcf	3977,4,c	;volatile
 10322                           
 10323                           ;Test.c: 189: _delay((unsigned long)((1000-100)*(32000000/4000.0)));
 10324  000AFA  0E25               	movlw	37
 10325  000AFC  0100               	movlb	0	; () banked
 10326  000AFE  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 10327  000B00  0E87               	movlw	135
 10328  000B02  0100               	movlb	0	; () banked
 10329  000B04  6FAB               	movwf	??_actuatorTest& (0+255),b
 10330  000B06  0E8B               	movlw	139
 10331  000B08                     u7007:
 10332  000B08  2EE8               	decfsz	wreg,f,c
 10333  000B0A  D7FE               	bra	u7007
 10334  000B0C  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10335  000B0E  D7FC               	bra	u7007
 10336  000B10  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 10337  000B12  D7FA               	bra	u7007
 10338  000B14  D000               	nop2	
 10339  000B16  0100               	movlb	0	; () banked
 10340  000B18  4BE6               	infsnz	_i& (0+255),f,b
 10341  000B1A  2BE7               	incf	(_i+1)& (0+255),f,b
 10342  000B1C  0100               	movlb	0	; () banked
 10343  000B1E  BFE7               	btfsc	(_i+1)& (0+255),7,b
 10344  000B20  D7DD               	goto	l1037
 10345  000B22  0100               	movlb	0	; () banked
 10346  000B24  51E7               	movf	(_i+1)& (0+255),w,b
 10347  000B26  E101               	bnz	u4760
 10348  000B28  D7D4               	goto	L8
 10349  000B2A                     u4760:
 10350  000B2A                     l1038:
 10351                           
 10352                           ; BSR set to: 0
 10353                           ;Test.c: 190: }
 10354                           ;Test.c: 191: LATAbits.LATA4 = ~1;
 10355  000B2A  9889               	bcf	3977,4,c	;volatile
 10356                           
 10357                           ; BSR set to: 0
 10358                           ;Test.c: 192: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10359  000B2C  0E01               	movlw	1
 10360  000B2E  EC92  F01F         	call	_lcdInst
 10361  000B32  0E68               	movlw	104
 10362  000B34  0100               	movlb	0	; () banked
 10363  000B36  6FAB               	movwf	??_actuatorTest& (0+255),b
 10364  000B38  0EE4               	movlw	228
 10365  000B3A                     u7017:
 10366  000B3A  2EE8               	decfsz	wreg,f,c
 10367  000B3C  D7FE               	bra	u7017
 10368  000B3E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10369  000B40  D7FC               	bra	u7017
 10370  000B42  F000               	nop	
 10371  000B44  0E80               	movlw	128
 10372  000B46  EC92  F01F         	call	_lcdInst
 10373                           
 10374                           ;Test.c: 195: machine_state = Sorting_state;
 10375  000B4A  0E01               	movlw	1
 10376  000B4C  0100               	movlb	0	; () banked
 10377  000B4E  6FFC               	movwf	_machine_state& (0+255),b
 10378                           
 10379                           ; BSR set to: 0
 10380                           ;Test.c: 196: was_low_1 = 0;
 10381  000B50  0E00               	movlw	0
 10382  000B52  6E7A               	movwf	_was_low_1+1,c	;volatile
 10383  000B54  0E00               	movlw	0
 10384  000B56  6E79               	movwf	_was_low_1,c	;volatile
 10385                           
 10386                           ; BSR set to: 0
 10387                           ;Test.c: 197: was_low_1 = 0;
 10388  000B58  0E00               	movlw	0
 10389  000B5A  6E7A               	movwf	_was_low_1+1,c	;volatile
 10390  000B5C  0E00               	movlw	0
 10391  000B5E  6E79               	movwf	_was_low_1,c	;volatile
 10392                           
 10393                           ; BSR set to: 0
 10394                           ;Test.c: 204: printf("TST: PAN SERVO");
 10395  000B60  0EBF               	movlw	low STR_91
 10396  000B62  0100               	movlb	0	; () banked
 10397  000B64  6F8E               	movwf	printf@f& (0+255),b
 10398  000B66  0EFE               	movlw	high STR_91
 10399  000B68  0100               	movlb	0	; () banked
 10400  000B6A  6F8F               	movwf	(printf@f+1)& (0+255),b
 10401  000B6C  EC93  F008         	call	_printf	;wreg free
 10402                           
 10403                           ;Test.c: 205: lcdInst(0b11000000);;
 10404  000B70  0EC0               	movlw	192
 10405  000B72  EC92  F01F         	call	_lcdInst
 10406                           
 10407                           ;Test.c: 206: printf("MIDDLE -- 2s    ");
 10408  000B76  0E8A               	movlw	low STR_92
 10409  000B78  0100               	movlb	0	; () banked
 10410  000B7A  6F8E               	movwf	printf@f& (0+255),b
 10411  000B7C  0EFC               	movlw	high STR_92
 10412  000B7E  0100               	movlb	0	; () banked
 10413  000B80  6F8F               	movwf	(printf@f+1)& (0+255),b
 10414  000B82  EC93  F008         	call	_printf	;wreg free
 10415                           
 10416                           ;Test.c: 207: updateServoPosition(1500, 1);
 10417  000B86  0E05               	movlw	5
 10418  000B88  0100               	movlb	0	; () banked
 10419  000B8A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 10420  000B8C  0EDC               	movlw	220
 10421  000B8E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 10422  000B90  0E00               	movlw	0
 10423  000B92  0100               	movlb	0	; () banked
 10424  000B94  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 10425  000B96  0E01               	movlw	1
 10426  000B98  6F82               	movwf	updateServoPosition@timer& (0+255),b
 10427  000B9A  EC26  F01A         	call	_updateServoPosition	;wreg free
 10428                           
 10429                           ;Test.c: 208: TMR1ON = 1;
 10430  000B9E  80CD               	bsf	4045,0,c	;volatile
 10431                           
 10432                           ;Test.c: 209: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 10433  000BA0  0E00               	movlw	0
 10434  000BA2  0100               	movlb	0	; () banked
 10435  000BA4  6FAE               	movwf	actuatorTest@i_1509& (0+255),b
 10436  000BA6                     l6207:
 10437                           
 10438                           ; BSR set to: 0
 10439  000BA6  0E63               	movlw	99
 10440  000BA8  0100               	movlb	0	; () banked
 10441  000BAA  65AE               	cpfsgt	actuatorTest@i_1509& (0+255),b
 10442  000BAC  D001               	goto	l6211
 10443  000BAE  D00C               	goto	l6215
 10444  000BB0                     l6211:
 10445                           
 10446                           ; BSR set to: 0
 10447  000BB0  0E68               	movlw	104
 10448  000BB2  0100               	movlb	0	; () banked
 10449  000BB4  6FAB               	movwf	??_actuatorTest& (0+255),b
 10450  000BB6  0EE4               	movlw	228
 10451  000BB8                     u7027:
 10452  000BB8  2EE8               	decfsz	wreg,f,c
 10453  000BBA  D7FE               	bra	u7027
 10454  000BBC  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10455  000BBE  D7FC               	bra	u7027
 10456  000BC0  F000               	nop	
 10457  000BC2  0100               	movlb	0	; () banked
 10458  000BC4  2BAE               	incf	actuatorTest@i_1509& (0+255),f,b
 10459  000BC6  D7EF               	goto	l6207
 10460  000BC8                     l6215:
 10461                           
 10462                           ; BSR set to: 0
 10463  000BC8  0E00               	movlw	0
 10464  000BCA  0100               	movlb	0	; () banked
 10465  000BCC  6FAF               	movwf	actuatorTest@i_1510& (0+255),b
 10466  000BCE                     l6217:
 10467                           
 10468                           ; BSR set to: 0
 10469  000BCE  0E63               	movlw	99
 10470  000BD0  0100               	movlb	0	; () banked
 10471  000BD2  65AF               	cpfsgt	actuatorTest@i_1510& (0+255),b
 10472  000BD4  D001               	goto	l6221
 10473  000BD6  D00C               	goto	l6225
 10474  000BD8                     l6221:
 10475                           
 10476                           ; BSR set to: 0
 10477  000BD8  0E68               	movlw	104
 10478  000BDA  0100               	movlb	0	; () banked
 10479  000BDC  6FAB               	movwf	??_actuatorTest& (0+255),b
 10480  000BDE  0EE4               	movlw	228
 10481  000BE0                     u7037:
 10482  000BE0  2EE8               	decfsz	wreg,f,c
 10483  000BE2  D7FE               	bra	u7037
 10484  000BE4  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10485  000BE6  D7FC               	bra	u7037
 10486  000BE8  F000               	nop	
 10487  000BEA  0100               	movlb	0	; () banked
 10488  000BEC  2BAF               	incf	actuatorTest@i_1510& (0+255),f,b
 10489  000BEE  D7EF               	goto	l6217
 10490  000BF0                     l6225:
 10491                           
 10492                           ; BSR set to: 0
 10493                           ;Test.c: 211: lcdInst(0b10000000);;lcdInst(0b11000000);;
 10494  000BF0  0E80               	movlw	128
 10495  000BF2  EC92  F01F         	call	_lcdInst
 10496  000BF6  0EC0               	movlw	192
 10497  000BF8  EC92  F01F         	call	_lcdInst
 10498                           
 10499                           ;Test.c: 212: printf("RIGHT -- 2s     ");
 10500  000BFC  0E79               	movlw	low STR_93
 10501  000BFE  0100               	movlb	0	; () banked
 10502  000C00  6F8E               	movwf	printf@f& (0+255),b
 10503  000C02  0EFC               	movlw	high STR_93
 10504  000C04  0100               	movlb	0	; () banked
 10505  000C06  6F8F               	movwf	(printf@f+1)& (0+255),b
 10506  000C08  EC93  F008         	call	_printf	;wreg free
 10507                           
 10508                           ;Test.c: 213: updateServoPosition(1000, 1);
 10509  000C0C  0E03               	movlw	3
 10510  000C0E  0100               	movlb	0	; () banked
 10511  000C10  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 10512  000C12  0EE8               	movlw	232
 10513  000C14  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 10514  000C16  0E00               	movlw	0
 10515  000C18  0100               	movlb	0	; () banked
 10516  000C1A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 10517  000C1C  0E01               	movlw	1
 10518  000C1E  6F82               	movwf	updateServoPosition@timer& (0+255),b
 10519  000C20  EC26  F01A         	call	_updateServoPosition	;wreg free
 10520                           
 10521                           ;Test.c: 214: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 10522  000C24  0E00               	movlw	0
 10523  000C26  0100               	movlb	0	; () banked
 10524  000C28  6FB0               	movwf	actuatorTest@i_1512& (0+255),b
 10525  000C2A                     l6233:
 10526                           
 10527                           ; BSR set to: 0
 10528  000C2A  0E63               	movlw	99
 10529  000C2C  0100               	movlb	0	; () banked
 10530  000C2E  65B0               	cpfsgt	actuatorTest@i_1512& (0+255),b
 10531  000C30  D001               	goto	l6237
 10532  000C32  D00C               	goto	l6241
 10533  000C34                     l6237:
 10534                           
 10535                           ; BSR set to: 0
 10536  000C34  0E68               	movlw	104
 10537  000C36  0100               	movlb	0	; () banked
 10538  000C38  6FAB               	movwf	??_actuatorTest& (0+255),b
 10539  000C3A  0EE4               	movlw	228
 10540  000C3C                     u7047:
 10541  000C3C  2EE8               	decfsz	wreg,f,c
 10542  000C3E  D7FE               	bra	u7047
 10543  000C40  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10544  000C42  D7FC               	bra	u7047
 10545  000C44  F000               	nop	
 10546  000C46  0100               	movlb	0	; () banked
 10547  000C48  2BB0               	incf	actuatorTest@i_1512& (0+255),f,b
 10548  000C4A  D7EF               	goto	l6233
 10549  000C4C                     l6241:
 10550                           
 10551                           ; BSR set to: 0
 10552  000C4C  0E00               	movlw	0
 10553  000C4E  0100               	movlb	0	; () banked
 10554  000C50  6FB1               	movwf	actuatorTest@i_1513& (0+255),b
 10555  000C52                     l6243:
 10556                           
 10557                           ; BSR set to: 0
 10558  000C52  0E63               	movlw	99
 10559  000C54  0100               	movlb	0	; () banked
 10560  000C56  65B1               	cpfsgt	actuatorTest@i_1513& (0+255),b
 10561  000C58  D001               	goto	l6247
 10562  000C5A  D00C               	goto	l6251
 10563  000C5C                     l6247:
 10564                           
 10565                           ; BSR set to: 0
 10566  000C5C  0E68               	movlw	104
 10567  000C5E  0100               	movlb	0	; () banked
 10568  000C60  6FAB               	movwf	??_actuatorTest& (0+255),b
 10569  000C62  0EE4               	movlw	228
 10570  000C64                     u7057:
 10571  000C64  2EE8               	decfsz	wreg,f,c
 10572  000C66  D7FE               	bra	u7057
 10573  000C68  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10574  000C6A  D7FC               	bra	u7057
 10575  000C6C  F000               	nop	
 10576  000C6E  0100               	movlb	0	; () banked
 10577  000C70  2BB1               	incf	actuatorTest@i_1513& (0+255),f,b
 10578  000C72  D7EF               	goto	l6243
 10579  000C74                     l6251:
 10580                           
 10581                           ; BSR set to: 0
 10582                           ;Test.c: 216: lcdInst(0b10000000);;lcdInst(0b11000000);;
 10583  000C74  0E80               	movlw	128
 10584  000C76  EC92  F01F         	call	_lcdInst
 10585  000C7A  0EC0               	movlw	192
 10586  000C7C  EC92  F01F         	call	_lcdInst
 10587                           
 10588                           ;Test.c: 217: printf("LEFT -- 2s      ");
 10589  000C80  0E57               	movlw	low STR_94
 10590  000C82  0100               	movlb	0	; () banked
 10591  000C84  6F8E               	movwf	printf@f& (0+255),b
 10592  000C86  0EFC               	movlw	high STR_94
 10593  000C88  0100               	movlb	0	; () banked
 10594  000C8A  6F8F               	movwf	(printf@f+1)& (0+255),b
 10595  000C8C  EC93  F008         	call	_printf	;wreg free
 10596                           
 10597                           ;Test.c: 218: updateServoPosition(2000, 1);
 10598  000C90  0E07               	movlw	7
 10599  000C92  0100               	movlb	0	; () banked
 10600  000C94  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 10601  000C96  0ED0               	movlw	208
 10602  000C98  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 10603  000C9A  0E00               	movlw	0
 10604  000C9C  0100               	movlb	0	; () banked
 10605  000C9E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 10606  000CA0  0E01               	movlw	1
 10607  000CA2  6F82               	movwf	updateServoPosition@timer& (0+255),b
 10608  000CA4  EC26  F01A         	call	_updateServoPosition	;wreg free
 10609                           
 10610                           ;Test.c: 219: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 10611  000CA8  0E00               	movlw	0
 10612  000CAA  0100               	movlb	0	; () banked
 10613  000CAC  6FB2               	movwf	actuatorTest@i_1515& (0+255),b
 10614  000CAE                     l6259:
 10615                           
 10616                           ; BSR set to: 0
 10617  000CAE  0E63               	movlw	99
 10618  000CB0  0100               	movlb	0	; () banked
 10619  000CB2  65B2               	cpfsgt	actuatorTest@i_1515& (0+255),b
 10620  000CB4  D001               	goto	l6263
 10621  000CB6  D00C               	goto	l6267
 10622  000CB8                     l6263:
 10623                           
 10624                           ; BSR set to: 0
 10625  000CB8  0E68               	movlw	104
 10626  000CBA  0100               	movlb	0	; () banked
 10627  000CBC  6FAB               	movwf	??_actuatorTest& (0+255),b
 10628  000CBE  0EE4               	movlw	228
 10629  000CC0                     u7067:
 10630  000CC0  2EE8               	decfsz	wreg,f,c
 10631  000CC2  D7FE               	bra	u7067
 10632  000CC4  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10633  000CC6  D7FC               	bra	u7067
 10634  000CC8  F000               	nop	
 10635  000CCA  0100               	movlb	0	; () banked
 10636  000CCC  2BB2               	incf	actuatorTest@i_1515& (0+255),f,b
 10637  000CCE  D7EF               	goto	l6259
 10638  000CD0                     l6267:
 10639                           
 10640                           ; BSR set to: 0
 10641  000CD0  0E00               	movlw	0
 10642  000CD2  0100               	movlb	0	; () banked
 10643  000CD4  6FB3               	movwf	actuatorTest@i_1516& (0+255),b
 10644  000CD6                     l6269:
 10645                           
 10646                           ; BSR set to: 0
 10647  000CD6  0E63               	movlw	99
 10648  000CD8  0100               	movlb	0	; () banked
 10649  000CDA  65B3               	cpfsgt	actuatorTest@i_1516& (0+255),b
 10650  000CDC  D001               	goto	l6273
 10651  000CDE  D00C               	goto	l6277
 10652  000CE0                     l6273:
 10653                           
 10654                           ; BSR set to: 0
 10655  000CE0  0E68               	movlw	104
 10656  000CE2  0100               	movlb	0	; () banked
 10657  000CE4  6FAB               	movwf	??_actuatorTest& (0+255),b
 10658  000CE6  0EE4               	movlw	228
 10659  000CE8                     u7077:
 10660  000CE8  2EE8               	decfsz	wreg,f,c
 10661  000CEA  D7FE               	bra	u7077
 10662  000CEC  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10663  000CEE  D7FC               	bra	u7077
 10664  000CF0  F000               	nop	
 10665  000CF2  0100               	movlb	0	; () banked
 10666  000CF4  2BB3               	incf	actuatorTest@i_1516& (0+255),f,b
 10667  000CF6  D7EF               	goto	l6269
 10668  000CF8                     l6277:
 10669                           
 10670                           ; BSR set to: 0
 10671                           ;Test.c: 221: lcdInst(0b10000000);;lcdInst(0b11000000);;
 10672  000CF8  0E80               	movlw	128
 10673  000CFA  EC92  F01F         	call	_lcdInst
 10674  000CFE  0EC0               	movlw	192
 10675  000D00  EC92  F01F         	call	_lcdInst
 10676                           
 10677                           ;Test.c: 222: printf("MID-LEFT -- 2s  ");
 10678  000D04  0E9B               	movlw	low STR_95
 10679  000D06  0100               	movlb	0	; () banked
 10680  000D08  6F8E               	movwf	printf@f& (0+255),b
 10681  000D0A  0EFC               	movlw	high STR_95
 10682  000D0C  0100               	movlb	0	; () banked
 10683  000D0E  6F8F               	movwf	(printf@f+1)& (0+255),b
 10684  000D10  EC93  F008         	call	_printf	;wreg free
 10685                           
 10686                           ;Test.c: 223: updateServoPosition(1666, 1);
 10687  000D14  0E06               	movlw	6
 10688  000D16  0100               	movlb	0	; () banked
 10689  000D18  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 10690  000D1A  0E82               	movlw	130
 10691  000D1C  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 10692  000D1E  0E00               	movlw	0
 10693  000D20  0100               	movlb	0	; () banked
 10694  000D22  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 10695  000D24  0E01               	movlw	1
 10696  000D26  6F82               	movwf	updateServoPosition@timer& (0+255),b
 10697  000D28  EC26  F01A         	call	_updateServoPosition	;wreg free
 10698                           
 10699                           ;Test.c: 224: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 10700  000D2C  0E00               	movlw	0
 10701  000D2E  0100               	movlb	0	; () banked
 10702  000D30  6FB4               	movwf	actuatorTest@i_1518& (0+255),b
 10703  000D32                     l6285:
 10704                           
 10705                           ; BSR set to: 0
 10706  000D32  0E63               	movlw	99
 10707  000D34  0100               	movlb	0	; () banked
 10708  000D36  65B4               	cpfsgt	actuatorTest@i_1518& (0+255),b
 10709  000D38  D001               	goto	l6289
 10710  000D3A  D00C               	goto	l6293
 10711  000D3C                     l6289:
 10712                           
 10713                           ; BSR set to: 0
 10714  000D3C  0E68               	movlw	104
 10715  000D3E  0100               	movlb	0	; () banked
 10716  000D40  6FAB               	movwf	??_actuatorTest& (0+255),b
 10717  000D42  0EE4               	movlw	228
 10718  000D44                     u7087:
 10719  000D44  2EE8               	decfsz	wreg,f,c
 10720  000D46  D7FE               	bra	u7087
 10721  000D48  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10722  000D4A  D7FC               	bra	u7087
 10723  000D4C  F000               	nop	
 10724  000D4E  0100               	movlb	0	; () banked
 10725  000D50  2BB4               	incf	actuatorTest@i_1518& (0+255),f,b
 10726  000D52  D7EF               	goto	l6285
 10727  000D54                     l6293:
 10728                           
 10729                           ; BSR set to: 0
 10730  000D54  0E00               	movlw	0
 10731  000D56  0100               	movlb	0	; () banked
 10732  000D58  6FB5               	movwf	actuatorTest@i_1519& (0+255),b
 10733  000D5A                     l6295:
 10734                           
 10735                           ; BSR set to: 0
 10736  000D5A  0E63               	movlw	99
 10737  000D5C  0100               	movlb	0	; () banked
 10738  000D5E  65B5               	cpfsgt	actuatorTest@i_1519& (0+255),b
 10739  000D60  D001               	goto	l6299
 10740  000D62  D00C               	goto	l6303
 10741  000D64                     l6299:
 10742                           
 10743                           ; BSR set to: 0
 10744  000D64  0E68               	movlw	104
 10745  000D66  0100               	movlb	0	; () banked
 10746  000D68  6FAB               	movwf	??_actuatorTest& (0+255),b
 10747  000D6A  0EE4               	movlw	228
 10748  000D6C                     u7097:
 10749  000D6C  2EE8               	decfsz	wreg,f,c
 10750  000D6E  D7FE               	bra	u7097
 10751  000D70  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10752  000D72  D7FC               	bra	u7097
 10753  000D74  F000               	nop	
 10754  000D76  0100               	movlb	0	; () banked
 10755  000D78  2BB5               	incf	actuatorTest@i_1519& (0+255),f,b
 10756  000D7A  D7EF               	goto	l6295
 10757  000D7C                     l6303:
 10758                           
 10759                           ; BSR set to: 0
 10760                           ;Test.c: 226: lcdInst(0b10000000);;lcdInst(0b11000000);;
 10761  000D7C  0E80               	movlw	128
 10762  000D7E  EC92  F01F         	call	_lcdInst
 10763  000D82  0EC0               	movlw	192
 10764  000D84  EC92  F01F         	call	_lcdInst
 10765                           
 10766                           ;Test.c: 227: printf("MID-RIGHT -- 2s ");
 10767  000D88  0EAC               	movlw	low STR_96
 10768  000D8A  0100               	movlb	0	; () banked
 10769  000D8C  6F8E               	movwf	printf@f& (0+255),b
 10770  000D8E  0EFC               	movlw	high STR_96
 10771  000D90  0100               	movlb	0	; () banked
 10772  000D92  6F8F               	movwf	(printf@f+1)& (0+255),b
 10773  000D94  EC93  F008         	call	_printf	;wreg free
 10774                           
 10775                           ;Test.c: 228: updateServoPosition(1333, 1);
 10776  000D98  0E05               	movlw	5
 10777  000D9A  0100               	movlb	0	; () banked
 10778  000D9C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 10779  000D9E  0E35               	movlw	53
 10780  000DA0  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 10781  000DA2  0E00               	movlw	0
 10782  000DA4  0100               	movlb	0	; () banked
 10783  000DA6  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 10784  000DA8  0E01               	movlw	1
 10785  000DAA  6F82               	movwf	updateServoPosition@timer& (0+255),b
 10786  000DAC  EC26  F01A         	call	_updateServoPosition	;wreg free
 10787                           
 10788                           ;Test.c: 229: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 10789  000DB0  0E00               	movlw	0
 10790  000DB2  0100               	movlb	0	; () banked
 10791  000DB4  6FB6               	movwf	actuatorTest@i_1521& (0+255),b
 10792  000DB6                     l6311:
 10793                           
 10794                           ; BSR set to: 0
 10795  000DB6  0E63               	movlw	99
 10796  000DB8  0100               	movlb	0	; () banked
 10797  000DBA  65B6               	cpfsgt	actuatorTest@i_1521& (0+255),b
 10798  000DBC  D001               	goto	l6315
 10799  000DBE  D00C               	goto	l6319
 10800  000DC0                     l6315:
 10801                           
 10802                           ; BSR set to: 0
 10803  000DC0  0E68               	movlw	104
 10804  000DC2  0100               	movlb	0	; () banked
 10805  000DC4  6FAB               	movwf	??_actuatorTest& (0+255),b
 10806  000DC6  0EE4               	movlw	228
 10807  000DC8                     u7107:
 10808  000DC8  2EE8               	decfsz	wreg,f,c
 10809  000DCA  D7FE               	bra	u7107
 10810  000DCC  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10811  000DCE  D7FC               	bra	u7107
 10812  000DD0  F000               	nop	
 10813  000DD2  0100               	movlb	0	; () banked
 10814  000DD4  2BB6               	incf	actuatorTest@i_1521& (0+255),f,b
 10815  000DD6  D7EF               	goto	l6311
 10816  000DD8                     l6319:
 10817                           
 10818                           ; BSR set to: 0
 10819  000DD8  0E00               	movlw	0
 10820  000DDA  0100               	movlb	0	; () banked
 10821  000DDC  6FB7               	movwf	actuatorTest@i_1522& (0+255),b
 10822  000DDE                     l6321:
 10823                           
 10824                           ; BSR set to: 0
 10825  000DDE  0E63               	movlw	99
 10826  000DE0  0100               	movlb	0	; () banked
 10827  000DE2  65B7               	cpfsgt	actuatorTest@i_1522& (0+255),b
 10828  000DE4  D001               	goto	l6325
 10829  000DE6  D00C               	goto	l6329
 10830  000DE8                     l6325:
 10831                           
 10832                           ; BSR set to: 0
 10833  000DE8  0E68               	movlw	104
 10834  000DEA  0100               	movlb	0	; () banked
 10835  000DEC  6FAB               	movwf	??_actuatorTest& (0+255),b
 10836  000DEE  0EE4               	movlw	228
 10837  000DF0                     u7117:
 10838  000DF0  2EE8               	decfsz	wreg,f,c
 10839  000DF2  D7FE               	bra	u7117
 10840  000DF4  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10841  000DF6  D7FC               	bra	u7117
 10842  000DF8  F000               	nop	
 10843  000DFA  0100               	movlb	0	; () banked
 10844  000DFC  2BB7               	incf	actuatorTest@i_1522& (0+255),f,b
 10845  000DFE  D7EF               	goto	l6321
 10846  000E00                     l6329:
 10847                           
 10848                           ; BSR set to: 0
 10849                           ;Test.c: 231: lcdInst(0b10000000);;lcdInst(0b11000000);;
 10850  000E00  0E80               	movlw	128
 10851  000E02  EC92  F01F         	call	_lcdInst
 10852  000E06  0EC0               	movlw	192
 10853  000E08  EC92  F01F         	call	_lcdInst
 10854                           
 10855                           ;Test.c: 232: printf("MID -- 2s       ");
 10856  000E0C  0E35               	movlw	low STR_97
 10857  000E0E  0100               	movlb	0	; () banked
 10858  000E10  6F8E               	movwf	printf@f& (0+255),b
 10859  000E12  0EFC               	movlw	high STR_97
 10860  000E14  0100               	movlb	0	; () banked
 10861  000E16  6F8F               	movwf	(printf@f+1)& (0+255),b
 10862  000E18  EC93  F008         	call	_printf	;wreg free
 10863                           
 10864                           ;Test.c: 233: updateServoPosition(1500, 1);
 10865  000E1C  0E05               	movlw	5
 10866  000E1E  0100               	movlb	0	; () banked
 10867  000E20  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 10868  000E22  0EDC               	movlw	220
 10869  000E24  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 10870  000E26  0E00               	movlw	0
 10871  000E28  0100               	movlb	0	; () banked
 10872  000E2A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 10873  000E2C  0E01               	movlw	1
 10874  000E2E  6F82               	movwf	updateServoPosition@timer& (0+255),b
 10875  000E30  EC26  F01A         	call	_updateServoPosition	;wreg free
 10876                           
 10877                           ;Test.c: 234: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 10878  000E34  0E00               	movlw	0
 10879  000E36  0100               	movlb	0	; () banked
 10880  000E38  6FB8               	movwf	actuatorTest@i_1524& (0+255),b
 10881  000E3A                     l6337:
 10882                           
 10883                           ; BSR set to: 0
 10884  000E3A  0E63               	movlw	99
 10885  000E3C  0100               	movlb	0	; () banked
 10886  000E3E  65B8               	cpfsgt	actuatorTest@i_1524& (0+255),b
 10887  000E40  D001               	goto	l6341
 10888  000E42  D00C               	goto	l6345
 10889  000E44                     l6341:
 10890                           
 10891                           ; BSR set to: 0
 10892  000E44  0E68               	movlw	104
 10893  000E46  0100               	movlb	0	; () banked
 10894  000E48  6FAB               	movwf	??_actuatorTest& (0+255),b
 10895  000E4A  0EE4               	movlw	228
 10896  000E4C                     u7127:
 10897  000E4C  2EE8               	decfsz	wreg,f,c
 10898  000E4E  D7FE               	bra	u7127
 10899  000E50  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10900  000E52  D7FC               	bra	u7127
 10901  000E54  F000               	nop	
 10902  000E56  0100               	movlb	0	; () banked
 10903  000E58  2BB8               	incf	actuatorTest@i_1524& (0+255),f,b
 10904  000E5A  D7EF               	goto	l6337
 10905  000E5C                     l6345:
 10906                           
 10907                           ; BSR set to: 0
 10908  000E5C  0E00               	movlw	0
 10909  000E5E  0100               	movlb	0	; () banked
 10910  000E60  6FB9               	movwf	actuatorTest@i_1525& (0+255),b
 10911  000E62                     l6347:
 10912                           
 10913                           ; BSR set to: 0
 10914  000E62  0E63               	movlw	99
 10915  000E64  0100               	movlb	0	; () banked
 10916  000E66  65B9               	cpfsgt	actuatorTest@i_1525& (0+255),b
 10917  000E68  D001               	goto	l6351
 10918  000E6A  D00C               	goto	l1062
 10919  000E6C                     l6351:
 10920                           
 10921                           ; BSR set to: 0
 10922  000E6C  0E68               	movlw	104
 10923  000E6E  0100               	movlb	0	; () banked
 10924  000E70  6FAB               	movwf	??_actuatorTest& (0+255),b
 10925  000E72  0EE4               	movlw	228
 10926  000E74                     u7137:
 10927  000E74  2EE8               	decfsz	wreg,f,c
 10928  000E76  D7FE               	bra	u7137
 10929  000E78  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10930  000E7A  D7FC               	bra	u7137
 10931  000E7C  F000               	nop	
 10932  000E7E  0100               	movlb	0	; () banked
 10933  000E80  2BB9               	incf	actuatorTest@i_1525& (0+255),f,b
 10934  000E82  D7EF               	goto	l6347
 10935  000E84                     l1062:
 10936                           
 10937                           ; BSR set to: 0
 10938                           ;Test.c: 235: TMR1ON = 0;
 10939  000E84  90CD               	bcf	4045,0,c	;volatile
 10940                           
 10941                           ; BSR set to: 0
 10942                           ;Test.c: 242: printf("TST: TILT SERVO");
 10943  000E86  0E54               	movlw	low STR_98
 10944  000E88  0100               	movlb	0	; () banked
 10945  000E8A  6F8E               	movwf	printf@f& (0+255),b
 10946  000E8C  0EFE               	movlw	high STR_98
 10947  000E8E  0100               	movlb	0	; () banked
 10948  000E90  6F8F               	movwf	(printf@f+1)& (0+255),b
 10949  000E92  EC93  F008         	call	_printf	;wreg free
 10950                           
 10951                           ;Test.c: 243: lcdInst(0b11000000);;
 10952  000E96  0EC0               	movlw	192
 10953  000E98  EC92  F01F         	call	_lcdInst
 10954                           
 10955                           ;Test.c: 244: printf("LEVEL -- 2s     ");
 10956  000E9C  0E68               	movlw	low STR_99
 10957  000E9E  0100               	movlb	0	; () banked
 10958  000EA0  6F8E               	movwf	printf@f& (0+255),b
 10959  000EA2  0EFC               	movlw	high STR_99
 10960  000EA4  0100               	movlb	0	; () banked
 10961  000EA6  6F8F               	movwf	(printf@f+1)& (0+255),b
 10962  000EA8  EC93  F008         	call	_printf	;wreg free
 10963                           
 10964                           ;Test.c: 245: updateServoPosition(1000, 3);
 10965  000EAC  0E03               	movlw	3
 10966  000EAE  0100               	movlb	0	; () banked
 10967  000EB0  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 10968  000EB2  0EE8               	movlw	232
 10969  000EB4  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 10970  000EB6  0E00               	movlw	0
 10971  000EB8  0100               	movlb	0	; () banked
 10972  000EBA  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 10973  000EBC  0E03               	movlw	3
 10974  000EBE  6F82               	movwf	updateServoPosition@timer& (0+255),b
 10975  000EC0  EC26  F01A         	call	_updateServoPosition	;wreg free
 10976                           
 10977                           ;Test.c: 246: TMR3ON = 1;
 10978  000EC4  80B1               	bsf	4017,0,c	;volatile
 10979                           
 10980                           ;Test.c: 247: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 10981  000EC6  0E00               	movlw	0
 10982  000EC8  0100               	movlb	0	; () banked
 10983  000ECA  6FBA               	movwf	actuatorTest@i_1528& (0+255),b
 10984  000ECC                     l6365:
 10985                           
 10986                           ; BSR set to: 0
 10987  000ECC  0E63               	movlw	99
 10988  000ECE  0100               	movlb	0	; () banked
 10989  000ED0  65BA               	cpfsgt	actuatorTest@i_1528& (0+255),b
 10990  000ED2  D001               	goto	l6369
 10991  000ED4  D00C               	goto	l6373
 10992  000ED6                     l6369:
 10993                           
 10994                           ; BSR set to: 0
 10995  000ED6  0E68               	movlw	104
 10996  000ED8  0100               	movlb	0	; () banked
 10997  000EDA  6FAB               	movwf	??_actuatorTest& (0+255),b
 10998  000EDC  0EE4               	movlw	228
 10999  000EDE                     u7147:
 11000  000EDE  2EE8               	decfsz	wreg,f,c
 11001  000EE0  D7FE               	bra	u7147
 11002  000EE2  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11003  000EE4  D7FC               	bra	u7147
 11004  000EE6  F000               	nop	
 11005  000EE8  0100               	movlb	0	; () banked
 11006  000EEA  2BBA               	incf	actuatorTest@i_1528& (0+255),f,b
 11007  000EEC  D7EF               	goto	l6365
 11008  000EEE                     l6373:
 11009                           
 11010                           ; BSR set to: 0
 11011  000EEE  0E00               	movlw	0
 11012  000EF0  0100               	movlb	0	; () banked
 11013  000EF2  6FBB               	movwf	actuatorTest@i_1529& (0+255),b
 11014  000EF4                     l6375:
 11015                           
 11016                           ; BSR set to: 0
 11017  000EF4  0E63               	movlw	99
 11018  000EF6  0100               	movlb	0	; () banked
 11019  000EF8  65BB               	cpfsgt	actuatorTest@i_1529& (0+255),b
 11020  000EFA  D001               	goto	l6379
 11021  000EFC  D00C               	goto	l6383
 11022  000EFE                     l6379:
 11023                           
 11024                           ; BSR set to: 0
 11025  000EFE  0E68               	movlw	104
 11026  000F00  0100               	movlb	0	; () banked
 11027  000F02  6FAB               	movwf	??_actuatorTest& (0+255),b
 11028  000F04  0EE4               	movlw	228
 11029  000F06                     u7157:
 11030  000F06  2EE8               	decfsz	wreg,f,c
 11031  000F08  D7FE               	bra	u7157
 11032  000F0A  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11033  000F0C  D7FC               	bra	u7157
 11034  000F0E  F000               	nop	
 11035  000F10  0100               	movlb	0	; () banked
 11036  000F12  2BBB               	incf	actuatorTest@i_1529& (0+255),f,b
 11037  000F14  D7EF               	goto	l6375
 11038  000F16                     l6383:
 11039                           
 11040                           ; BSR set to: 0
 11041                           ;Test.c: 249: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11042  000F16  0E80               	movlw	128
 11043  000F18  EC92  F01F         	call	_lcdInst
 11044  000F1C  0EC0               	movlw	192
 11045  000F1E  EC92  F01F         	call	_lcdInst
 11046                           
 11047                           ;Test.c: 250: printf("DROP -- 2s      ");
 11048  000F22  0E46               	movlw	low STR_100
 11049  000F24  0100               	movlb	0	; () banked
 11050  000F26  6F8E               	movwf	printf@f& (0+255),b
 11051  000F28  0EFC               	movlw	high STR_100
 11052  000F2A  0100               	movlb	0	; () banked
 11053  000F2C  6F8F               	movwf	(printf@f+1)& (0+255),b
 11054  000F2E  EC93  F008         	call	_printf	;wreg free
 11055                           
 11056                           ;Test.c: 251: updateServoPosition(1500, 3);
 11057  000F32  0E05               	movlw	5
 11058  000F34  0100               	movlb	0	; () banked
 11059  000F36  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11060  000F38  0EDC               	movlw	220
 11061  000F3A  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11062  000F3C  0E00               	movlw	0
 11063  000F3E  0100               	movlb	0	; () banked
 11064  000F40  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11065  000F42  0E03               	movlw	3
 11066  000F44  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11067  000F46  EC26  F01A         	call	_updateServoPosition	;wreg free
 11068                           
 11069                           ;Test.c: 252: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11070  000F4A  0E00               	movlw	0
 11071  000F4C  0100               	movlb	0	; () banked
 11072  000F4E  6FBC               	movwf	actuatorTest@i_1531& (0+255),b
 11073  000F50                     l6391:
 11074                           
 11075                           ; BSR set to: 0
 11076  000F50  0E63               	movlw	99
 11077  000F52  0100               	movlb	0	; () banked
 11078  000F54  65BC               	cpfsgt	actuatorTest@i_1531& (0+255),b
 11079  000F56  D001               	goto	l6395
 11080  000F58  D00C               	goto	l6399
 11081  000F5A                     l6395:
 11082                           
 11083                           ; BSR set to: 0
 11084  000F5A  0E68               	movlw	104
 11085  000F5C  0100               	movlb	0	; () banked
 11086  000F5E  6FAB               	movwf	??_actuatorTest& (0+255),b
 11087  000F60  0EE4               	movlw	228
 11088  000F62                     u7167:
 11089  000F62  2EE8               	decfsz	wreg,f,c
 11090  000F64  D7FE               	bra	u7167
 11091  000F66  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11092  000F68  D7FC               	bra	u7167
 11093  000F6A  F000               	nop	
 11094  000F6C  0100               	movlb	0	; () banked
 11095  000F6E  2BBC               	incf	actuatorTest@i_1531& (0+255),f,b
 11096  000F70  D7EF               	goto	l6391
 11097  000F72                     l6399:
 11098                           
 11099                           ; BSR set to: 0
 11100  000F72  0E00               	movlw	0
 11101  000F74  0100               	movlb	0	; () banked
 11102  000F76  6FBD               	movwf	actuatorTest@i_1532& (0+255),b
 11103  000F78                     l6401:
 11104                           
 11105                           ; BSR set to: 0
 11106  000F78  0E63               	movlw	99
 11107  000F7A  0100               	movlb	0	; () banked
 11108  000F7C  65BD               	cpfsgt	actuatorTest@i_1532& (0+255),b
 11109  000F7E  D001               	goto	l6405
 11110  000F80  D00C               	goto	l6409
 11111  000F82                     l6405:
 11112                           
 11113                           ; BSR set to: 0
 11114  000F82  0E68               	movlw	104
 11115  000F84  0100               	movlb	0	; () banked
 11116  000F86  6FAB               	movwf	??_actuatorTest& (0+255),b
 11117  000F88  0EE4               	movlw	228
 11118  000F8A                     u7177:
 11119  000F8A  2EE8               	decfsz	wreg,f,c
 11120  000F8C  D7FE               	bra	u7177
 11121  000F8E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11122  000F90  D7FC               	bra	u7177
 11123  000F92  F000               	nop	
 11124  000F94  0100               	movlb	0	; () banked
 11125  000F96  2BBD               	incf	actuatorTest@i_1532& (0+255),f,b
 11126  000F98  D7EF               	goto	l6401
 11127  000F9A                     l6409:
 11128                           
 11129                           ; BSR set to: 0
 11130                           ;Test.c: 254: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11131  000F9A  0E80               	movlw	128
 11132  000F9C  EC92  F01F         	call	_lcdInst
 11133  000FA0  0EC0               	movlw	192
 11134  000FA2  EC92  F01F         	call	_lcdInst
 11135                           
 11136                           ;Test.c: 255: printf("LEVEL -- 2s     ");
 11137  000FA6  0E68               	movlw	low STR_99
 11138  000FA8  0100               	movlb	0	; () banked
 11139  000FAA  6F8E               	movwf	printf@f& (0+255),b
 11140  000FAC  0EFC               	movlw	high STR_99
 11141  000FAE  0100               	movlb	0	; () banked
 11142  000FB0  6F8F               	movwf	(printf@f+1)& (0+255),b
 11143  000FB2  EC93  F008         	call	_printf	;wreg free
 11144                           
 11145                           ;Test.c: 256: updateServoPosition(1000, 3);
 11146  000FB6  0E03               	movlw	3
 11147  000FB8  0100               	movlb	0	; () banked
 11148  000FBA  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11149  000FBC  0EE8               	movlw	232
 11150  000FBE  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11151  000FC0  0E00               	movlw	0
 11152  000FC2  0100               	movlb	0	; () banked
 11153  000FC4  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11154  000FC6  0E03               	movlw	3
 11155  000FC8  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11156  000FCA  EC26  F01A         	call	_updateServoPosition	;wreg free
 11157                           
 11158                           ;Test.c: 257: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11159  000FCE  0E00               	movlw	0
 11160  000FD0  0100               	movlb	0	; () banked
 11161  000FD2  6FBE               	movwf	actuatorTest@i_1534& (0+255),b
 11162  000FD4                     l6417:
 11163                           
 11164                           ; BSR set to: 0
 11165  000FD4  0E63               	movlw	99
 11166  000FD6  0100               	movlb	0	; () banked
 11167  000FD8  65BE               	cpfsgt	actuatorTest@i_1534& (0+255),b
 11168  000FDA  D001               	goto	l6421
 11169  000FDC  D00C               	goto	l6425
 11170  000FDE                     l6421:
 11171                           
 11172                           ; BSR set to: 0
 11173  000FDE  0E68               	movlw	104
 11174  000FE0  0100               	movlb	0	; () banked
 11175  000FE2  6FAB               	movwf	??_actuatorTest& (0+255),b
 11176  000FE4  0EE4               	movlw	228
 11177  000FE6                     u7187:
 11178  000FE6  2EE8               	decfsz	wreg,f,c
 11179  000FE8  D7FE               	bra	u7187
 11180  000FEA  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11181  000FEC  D7FC               	bra	u7187
 11182  000FEE  F000               	nop	
 11183  000FF0  0100               	movlb	0	; () banked
 11184  000FF2  2BBE               	incf	actuatorTest@i_1534& (0+255),f,b
 11185  000FF4  D7EF               	goto	l6417
 11186  000FF6                     l6425:
 11187                           
 11188                           ; BSR set to: 0
 11189  000FF6  0E00               	movlw	0
 11190  000FF8  0100               	movlb	0	; () banked
 11191  000FFA  6FBF               	movwf	actuatorTest@i_1535& (0+255),b
 11192  000FFC                     l6427:
 11193                           
 11194                           ; BSR set to: 0
 11195  000FFC  0E63               	movlw	99
 11196  000FFE  0100               	movlb	0	; () banked
 11197  001000  65BF               	cpfsgt	actuatorTest@i_1535& (0+255),b
 11198  001002  D001               	goto	l6431
 11199  001004  D00C               	goto	l1074
 11200  001006                     l6431:
 11201                           
 11202                           ; BSR set to: 0
 11203  001006  0E68               	movlw	104
 11204  001008  0100               	movlb	0	; () banked
 11205  00100A  6FAB               	movwf	??_actuatorTest& (0+255),b
 11206  00100C  0EE4               	movlw	228
 11207  00100E                     u7197:
 11208  00100E  2EE8               	decfsz	wreg,f,c
 11209  001010  D7FE               	bra	u7197
 11210  001012  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11211  001014  D7FC               	bra	u7197
 11212  001016  F000               	nop	
 11213  001018  0100               	movlb	0	; () banked
 11214  00101A  2BBF               	incf	actuatorTest@i_1535& (0+255),f,b
 11215  00101C  D7EF               	goto	l6427
 11216  00101E                     l1074:
 11217                           
 11218                           ; BSR set to: 0
 11219                           ;Test.c: 259: TMR3ON = 0;
 11220  00101E  90B1               	bcf	4017,0,c	;volatile
 11221                           
 11222                           ;Test.c: 260: (INTCONbits.GIE = 0);
 11223  001020  9EF2               	bcf	intcon,7,c	;volatile
 11224                           
 11225                           ; BSR set to: 0
 11226                           ;Test.c: 265: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11227  001022  0E01               	movlw	1
 11228  001024  EC92  F01F         	call	_lcdInst
 11229  001028  0E68               	movlw	104
 11230  00102A  0100               	movlb	0	; () banked
 11231  00102C  6FAB               	movwf	??_actuatorTest& (0+255),b
 11232  00102E  0EE4               	movlw	228
 11233  001030                     u7207:
 11234  001030  2EE8               	decfsz	wreg,f,c
 11235  001032  D7FE               	bra	u7207
 11236  001034  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11237  001036  D7FC               	bra	u7207
 11238  001038  F000               	nop	
 11239  00103A  0E80               	movlw	128
 11240  00103C  EC92  F01F         	call	_lcdInst
 11241                           
 11242                           ;Test.c: 266: printf("TST: CAM SERVO");
 11243  001040  0EB0               	movlw	low STR_102
 11244  001042  0100               	movlb	0	; () banked
 11245  001044  6F8E               	movwf	printf@f& (0+255),b
 11246  001046  0EFE               	movlw	high STR_102
 11247  001048  0100               	movlb	0	; () banked
 11248  00104A  6F8F               	movwf	(printf@f+1)& (0+255),b
 11249  00104C  EC93  F008         	call	_printf	;wreg free
 11250                           
 11251                           ;Test.c: 267: lcdInst(0b11000000);;
 11252  001050  0EC0               	movlw	192
 11253  001052  EC92  F01F         	call	_lcdInst
 11254                           
 11255                           ;Test.c: 268: printf("CAM UP  |RC0=1");
 11256  001056  0E92               	movlw	low STR_103
 11257  001058  0100               	movlb	0	; () banked
 11258  00105A  6F8E               	movwf	printf@f& (0+255),b
 11259  00105C  0EFE               	movlw	high STR_103
 11260  00105E  0100               	movlb	0	; () banked
 11261  001060  6F8F               	movwf	(printf@f+1)& (0+255),b
 11262  001062  EC93  F008         	call	_printf	;wreg free
 11263                           
 11264                           ;Test.c: 269: LATCbits.LATC0 = 0;
 11265  001066  908B               	bcf	3979,0,c	;volatile
 11266                           
 11267                           ;Test.c: 270: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11268  001068  0E00               	movlw	0
 11269  00106A  0100               	movlb	0	; () banked
 11270  00106C  6FC0               	movwf	actuatorTest@i_1538& (0+255),b
 11271  00106E                     l6451:
 11272                           
 11273                           ; BSR set to: 0
 11274  00106E  0E63               	movlw	99
 11275  001070  0100               	movlb	0	; () banked
 11276  001072  65C0               	cpfsgt	actuatorTest@i_1538& (0+255),b
 11277  001074  D001               	goto	l6455
 11278  001076  D00C               	goto	l6459
 11279  001078                     l6455:
 11280                           
 11281                           ; BSR set to: 0
 11282  001078  0E68               	movlw	104
 11283  00107A  0100               	movlb	0	; () banked
 11284  00107C  6FAB               	movwf	??_actuatorTest& (0+255),b
 11285  00107E  0EE4               	movlw	228
 11286  001080                     u7217:
 11287  001080  2EE8               	decfsz	wreg,f,c
 11288  001082  D7FE               	bra	u7217
 11289  001084  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11290  001086  D7FC               	bra	u7217
 11291  001088  F000               	nop	
 11292  00108A  0100               	movlb	0	; () banked
 11293  00108C  2BC0               	incf	actuatorTest@i_1538& (0+255),f,b
 11294  00108E  D7EF               	goto	l6451
 11295  001090                     l6459:
 11296                           
 11297                           ; BSR set to: 0
 11298  001090  0E00               	movlw	0
 11299  001092  0100               	movlb	0	; () banked
 11300  001094  6FC1               	movwf	actuatorTest@i_1539& (0+255),b
 11301  001096                     l6461:
 11302                           
 11303                           ; BSR set to: 0
 11304  001096  0E63               	movlw	99
 11305  001098  0100               	movlb	0	; () banked
 11306  00109A  65C1               	cpfsgt	actuatorTest@i_1539& (0+255),b
 11307  00109C  D001               	goto	l6465
 11308  00109E  D00C               	goto	l6469
 11309  0010A0                     l6465:
 11310                           
 11311                           ; BSR set to: 0
 11312  0010A0  0E68               	movlw	104
 11313  0010A2  0100               	movlb	0	; () banked
 11314  0010A4  6FAB               	movwf	??_actuatorTest& (0+255),b
 11315  0010A6  0EE4               	movlw	228
 11316  0010A8                     u7227:
 11317  0010A8  2EE8               	decfsz	wreg,f,c
 11318  0010AA  D7FE               	bra	u7227
 11319  0010AC  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11320  0010AE  D7FC               	bra	u7227
 11321  0010B0  F000               	nop	
 11322  0010B2  0100               	movlb	0	; () banked
 11323  0010B4  2BC1               	incf	actuatorTest@i_1539& (0+255),f,b
 11324  0010B6  D7EF               	goto	l6461
 11325  0010B8                     l6469:
 11326                           
 11327                           ; BSR set to: 0
 11328                           ;Test.c: 271: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11329  0010B8  0E80               	movlw	128
 11330  0010BA  EC92  F01F         	call	_lcdInst
 11331  0010BE  0EC0               	movlw	192
 11332  0010C0  EC92  F01F         	call	_lcdInst
 11333                           
 11334                           ;Test.c: 272: LATCbits.LATC0 = 1;
 11335  0010C4  808B               	bsf	3979,0,c	;volatile
 11336                           
 11337                           ;Test.c: 273: printf("CAM DWN |RC0=0");
 11338  0010C6  0E83               	movlw	low STR_104
 11339  0010C8  0100               	movlb	0	; () banked
 11340  0010CA  6F8E               	movwf	printf@f& (0+255),b
 11341  0010CC  0EFE               	movlw	high STR_104
 11342  0010CE  0100               	movlb	0	; () banked
 11343  0010D0  6F8F               	movwf	(printf@f+1)& (0+255),b
 11344  0010D2  EC93  F008         	call	_printf	;wreg free
 11345                           
 11346                           ;Test.c: 274: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11347  0010D6  0E00               	movlw	0
 11348  0010D8  0100               	movlb	0	; () banked
 11349  0010DA  6FC2               	movwf	actuatorTest@i_1541& (0+255),b
 11350  0010DC                     l6477:
 11351                           
 11352                           ; BSR set to: 0
 11353  0010DC  0E63               	movlw	99
 11354  0010DE  0100               	movlb	0	; () banked
 11355  0010E0  65C2               	cpfsgt	actuatorTest@i_1541& (0+255),b
 11356  0010E2  D001               	goto	l6481
 11357  0010E4  D00C               	goto	l6485
 11358  0010E6                     l6481:
 11359                           
 11360                           ; BSR set to: 0
 11361  0010E6  0E68               	movlw	104
 11362  0010E8  0100               	movlb	0	; () banked
 11363  0010EA  6FAB               	movwf	??_actuatorTest& (0+255),b
 11364  0010EC  0EE4               	movlw	228
 11365  0010EE                     u7237:
 11366  0010EE  2EE8               	decfsz	wreg,f,c
 11367  0010F0  D7FE               	bra	u7237
 11368  0010F2  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11369  0010F4  D7FC               	bra	u7237
 11370  0010F6  F000               	nop	
 11371  0010F8  0100               	movlb	0	; () banked
 11372  0010FA  2BC2               	incf	actuatorTest@i_1541& (0+255),f,b
 11373  0010FC  D7EF               	goto	l6477
 11374  0010FE                     l6485:
 11375                           
 11376                           ; BSR set to: 0
 11377  0010FE  0E00               	movlw	0
 11378  001100  0100               	movlb	0	; () banked
 11379  001102  6FC3               	movwf	actuatorTest@i_1542& (0+255),b
 11380  001104                     l6487:
 11381                           
 11382                           ; BSR set to: 0
 11383  001104  0E63               	movlw	99
 11384  001106  0100               	movlb	0	; () banked
 11385  001108  65C3               	cpfsgt	actuatorTest@i_1542& (0+255),b
 11386  00110A  D001               	goto	l6491
 11387  00110C  0012               	return	
 11388  00110E                     l6491:
 11389                           
 11390                           ; BSR set to: 0
 11391  00110E  0E68               	movlw	104
 11392  001110  0100               	movlb	0	; () banked
 11393  001112  6FAB               	movwf	??_actuatorTest& (0+255),b
 11394  001114  0EE4               	movlw	228
 11395  001116                     u7247:
 11396  001116  2EE8               	decfsz	wreg,f,c
 11397  001118  D7FE               	bra	u7247
 11398  00111A  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11399  00111C  D7FC               	bra	u7247
 11400  00111E  F000               	nop	
 11401  001120  0100               	movlb	0	; () banked
 11402  001122  2BC3               	incf	actuatorTest@i_1542& (0+255),f,b
 11403  001124  D7EF               	goto	l6487
 11404  001126                     __end_of_actuatorTest:
 11405                           	opt stack 0
 11406                           tblptru	equ	0xFF8
 11407                           tblptrh	equ	0xFF7
 11408                           tblptrl	equ	0xFF6
 11409                           tablat	equ	0xFF5
 11410                           prodh	equ	0xFF4
 11411                           prodl	equ	0xFF3
 11412                           intcon	equ	0xFF2
 11413                           intcon2	equ	0xFF1
 11414                           intcon3	equ	0xFF0
 11415                           postinc0	equ	0xFEE
 11416                           wreg	equ	0xFE8
 11417                           postdec1	equ	0xFE5
 11418                           fsr1l	equ	0xFE1
 11419                           indf2	equ	0xFDF
 11420                           postinc2	equ	0xFDE
 11421                           postdec2	equ	0xFDD
 11422                           fsr2h	equ	0xFDA
 11423                           fsr2l	equ	0xFD9
 11424                           status	equ	0xFD8
 11425                           
 11426 ;; *************** function _updateServoPosition *****************
 11427 ;; Defined at:
 11428 ;;		line 295 in file "sort.c"
 11429 ;; Parameters:    Size  Location     Type
 11430 ;;  time_us         2    0[BANK0 ] int 
 11431 ;;  timer           2    2[BANK0 ] int 
 11432 ;; Auto vars:     Size  Location     Type
 11433 ;;  my_time         2    6[BANK0 ] unsigned int 
 11434 ;; Return value:  Size  Location     Type
 11435 ;;                  1    wreg      void 
 11436 ;; Registers used:
 11437 ;;		wreg, status,2, status,0
 11438 ;; Tracked objects:
 11439 ;;		On entry : 0/0
 11440 ;;		On exit  : 0/0
 11441 ;;		Unchanged: 0/0
 11442 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11443 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11444 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11445 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11446 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11447 ;;Total ram usage:        8 bytes
 11448 ;; Hardware stack levels used:    1
 11449 ;; Hardware stack levels required when called:    7
 11450 ;; This function calls:
 11451 ;;		Nothing
 11452 ;; This function is called by:
 11453 ;;		_Distribution
 11454 ;;		_initServos
 11455 ;;		_actuatorTest
 11456 ;; This function uses a non-reentrant model
 11457 ;;
 11458                           
 11459                           	psect	text41
 11460  00344C                     __ptext41:
 11461                           	opt stack 0
 11462  00344C                     _updateServoPosition:
 11463                           	opt stack 20
 11464                           
 11465                           ;sort.c: 296: unsigned int my_time = 65535 - time_us;
 11466                           
 11467                           ; BSR set to: 0
 11468                           ;incstack = 0
 11469  00344C  C080  F084         	movff	updateServoPosition@time_us,??_updateServoPosition
 11470  003450  C081  F085         	movff	updateServoPosition@time_us+1,??_updateServoPosition+1
 11471  003454  0100               	movlb	0	; () banked
 11472  003456  1F84               	comf	??_updateServoPosition& (0+255),f,b
 11473  003458  1F85               	comf	(??_updateServoPosition+1)& (0+255),f,b
 11474  00345A  4B84               	infsnz	??_updateServoPosition& (0+255),f,b
 11475  00345C  2B85               	incf	(??_updateServoPosition+1)& (0+255),f,b
 11476  00345E  0EFF               	movlw	255
 11477  003460  0100               	movlb	0	; () banked
 11478  003462  2584               	addwf	??_updateServoPosition& (0+255),w,b
 11479  003464  0100               	movlb	0	; () banked
 11480  003466  6F86               	movwf	updateServoPosition@my_time& (0+255),b
 11481  003468  0EFF               	movlw	255
 11482  00346A  0100               	movlb	0	; () banked
 11483  00346C  2185               	addwfc	(??_updateServoPosition+1)& (0+255),w,b
 11484  00346E  0100               	movlb	0	; () banked
 11485  003470  6F87               	movwf	(updateServoPosition@my_time+1)& (0+255),b
 11486                           
 11487                           ;sort.c: 297: switch(timer){
 11488  003472  D015               	goto	l5119
 11489  003474                     l5117:
 11490                           
 11491                           ; BSR set to: 0
 11492                           ;sort.c: 299: servoTimes[0] = my_time >> 8;
 11493  003474  0100               	movlb	0	; () banked
 11494  003476  5187               	movf	(updateServoPosition@my_time+1)& (0+255),w,b
 11495  003478  0101               	movlb	1	; () banked
 11496  00347A  6F1C               	movwf	_servoTimes& (0+255),b
 11497  00347C  6B1D               	clrf	(_servoTimes+1)& (0+255),b
 11498                           
 11499                           ;sort.c: 300: servoTimes[1] = my_time & 0xFF;
 11500  00347E  0100               	movlb	0	; () banked
 11501  003480  5186               	movf	updateServoPosition@my_time& (0+255),w,b
 11502  003482  0101               	movlb	1	; () banked
 11503  003484  6F1E               	movwf	(_servoTimes+2)& (0+255),b
 11504  003486  6B1F               	clrf	(_servoTimes+3)& (0+255),b
 11505  003488                     l772:
 11506                           
 11507                           ;sort.c: 302: servoTimes[2] = my_time >> 8;
 11508  003488  0100               	movlb	0	; () banked
 11509  00348A  5187               	movf	(updateServoPosition@my_time+1)& (0+255),w,b
 11510  00348C  0101               	movlb	1	; () banked
 11511  00348E  6F20               	movwf	(_servoTimes+4)& (0+255),b
 11512  003490  6B21               	clrf	(_servoTimes+5)& (0+255),b
 11513                           
 11514                           ;sort.c: 303: servoTimes[3] = my_time & 0xFF;
 11515  003492  0100               	movlb	0	; () banked
 11516  003494  5186               	movf	updateServoPosition@my_time& (0+255),w,b
 11517  003496  0101               	movlb	1	; () banked
 11518  003498  6F22               	movwf	(_servoTimes+6)& (0+255),b
 11519  00349A  6B23               	clrf	(_servoTimes+7)& (0+255),b
 11520                           
 11521                           ;sort.c: 304: }
 11522  00349C  0012               	return	
 11523  00349E                     l5119:
 11524  00349E  C082  F084         	movff	updateServoPosition@timer,??_updateServoPosition
 11525  0034A2  C083  F085         	movff	updateServoPosition@timer+1,??_updateServoPosition+1
 11526                           
 11527                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11528                           ; Switch size 1, requested type "space"
 11529                           ; Number of cases is 1, Range of values is 0 to 0
 11530                           ; switch strategies available:
 11531                           ; Name         Instructions Cycles
 11532                           ; simple_byte            4     3 (average)
 11533                           ;	Chosen strategy is simple_byte
 11534  0034A6  0100               	movlb	0	; () banked
 11535  0034A8  5185               	movf	(??_updateServoPosition+1)& (0+255),w,b
 11536  0034AA  0A00               	xorlw	0	; case 0
 11537  0034AC  A4D8               	btfss	status,2,c
 11538  0034AE  0012               	return	
 11539                           
 11540                           ; BSR set to: 0
 11541                           ; Switch size 1, requested type "space"
 11542                           ; Number of cases is 2, Range of values is 1 to 3
 11543                           ; switch strategies available:
 11544                           ; Name         Instructions Cycles
 11545                           ; simple_byte            7     4 (average)
 11546                           ;	Chosen strategy is simple_byte
 11547  0034B0  0100               	movlb	0	; () banked
 11548  0034B2  5184               	movf	??_updateServoPosition& (0+255),w,b
 11549  0034B4  0A01               	xorlw	1	; case 1
 11550  0034B6  B4D8               	btfsc	status,2,c
 11551  0034B8  D7DD               	goto	l5117
 11552  0034BA  0A02               	xorlw	2	; case 3
 11553  0034BC  A4D8               	btfss	status,2,c
 11554  0034BE  0012               	return	
 11555  0034C0  D7E3               	goto	l772
 11556  0034C2                     __end_of_updateServoPosition:
 11557                           	opt stack 0
 11558                           tblptru	equ	0xFF8
 11559                           tblptrh	equ	0xFF7
 11560                           tblptrl	equ	0xFF6
 11561                           tablat	equ	0xFF5
 11562                           prodh	equ	0xFF4
 11563                           prodl	equ	0xFF3
 11564                           intcon	equ	0xFF2
 11565                           intcon2	equ	0xFF1
 11566                           intcon3	equ	0xFF0
 11567                           postinc0	equ	0xFEE
 11568                           wreg	equ	0xFE8
 11569                           postdec1	equ	0xFE5
 11570                           fsr1l	equ	0xFE1
 11571                           indf2	equ	0xFDF
 11572                           postinc2	equ	0xFDE
 11573                           postdec2	equ	0xFDD
 11574                           fsr2h	equ	0xFDA
 11575                           fsr2l	equ	0xFD9
 11576                           status	equ	0xFD8
 11577                           
 11578 ;; *************** function _printf *****************
 11579 ;; Defined at:
 11580 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 11581 ;; Parameters:    Size  Location     Type
 11582 ;;  f               2   14[BANK0 ] PTR const unsigned char 
 11583 ;;		 -> STR_104(15), STR_103(15), STR_102(15), STR_101(17), 
 11584 ;;		 -> STR_100(17), STR_99(17), STR_98(16), STR_97(17), 
 11585 ;;		 -> STR_96(17), STR_95(17), STR_94(17), STR_93(17), 
 11586 ;;		 -> STR_92(17), STR_91(15), STR_90(11), STR_89(17), 
 11587 ;;		 -> STR_88(11), STR_87(17), STR_86(14), STR_85(15), 
 11588 ;;		 -> STR_84(14), STR_83(10), STR_82(16), STR_81(15), 
 11589 ;;		 -> STR_80(15), STR_79(13), STR_78(14), STR_77(8), 
 11590 ;;		 -> STR_76(14), STR_75(15), STR_74(12), STR_73(14), 
 11591 ;;		 -> STR_72(17), STR_71(14), STR_70(15), STR_69(13), 
 11592 ;;		 -> STR_68(17), STR_67(7), STR_66(21), STR_65(13), 
 11593 ;;		 -> STR_64(11), STR_63(24), STR_50(17), STR_49(17), 
 11594 ;;		 -> STR_48(17), STR_47(17), STR_46(17), STR_45(17), 
 11595 ;;		 -> STR_44(17), STR_43(17), STR_42(17), STR_41(17), 
 11596 ;;		 -> STR_40(17), STR_39(17), STR_38(17), STR_37(17), 
 11597 ;;		 -> STR_36(17), STR_35(17), STR_34(17), STR_33(17), 
 11598 ;;		 -> STR_32(17), STR_31(17), STR_30(17), STR_29(3), 
 11599 ;;		 -> STR_28(17), STR_27(19), STR_26(17), STR_25(19), 
 11600 ;;		 -> STR_24(17), STR_23(14), STR_22(10), STR_21(24), 
 11601 ;;		 -> STR_7(7), STR_6(17), STR_5(18), STR_4(16), 
 11602 ;;		 -> STR_3(18), STR_2(14), STR_1(18), 
 11603 ;; Auto vars:     Size  Location     Type
 11604 ;;  tmpval          4    0        struct .
 11605 ;;  width           2   41[BANK0 ] int 
 11606 ;;  val             2   37[BANK0 ] unsigned int 
 11607 ;;  len             2   35[BANK0 ] unsigned int 
 11608 ;;  ap              2   33[BANK0 ] PTR void [1]
 11609 ;;		 -> ?i2_printf(2), ?_printf(2), 
 11610 ;;  cp              2   31[BANK0 ] PTR const unsigned char 
 11611 ;;		 -> STR_105(7), count_total(2), printRTC@month(4), UI@month(4), 
 11612 ;;  c               1   40[BANK0 ] char 
 11613 ;;  flag            1   39[BANK0 ] unsigned char 
 11614 ;;  prec            1   30[BANK0 ] char 
 11615 ;; Return value:  Size  Location     Type
 11616 ;;                  2   14[BANK0 ] int 
 11617 ;; Registers used:
 11618 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11619 ;; Tracked objects:
 11620 ;;		On entry : 0/0
 11621 ;;		On exit  : 0/0
 11622 ;;		Unchanged: 0/0
 11623 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11624 ;;      Params:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11625 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11626 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11627 ;;      Totals:         0      29       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11628 ;;Total ram usage:       29 bytes
 11629 ;; Hardware stack levels used:    1
 11630 ;; Hardware stack levels required when called:    9
 11631 ;; This function calls:
 11632 ;;		___lwdiv
 11633 ;;		___lwmod
 11634 ;;		___wmul
 11635 ;;		_isdigit
 11636 ;;		_putch
 11637 ;; This function is called by:
 11638 ;;		_UI
 11639 ;;		_change_state_to_menu_start
 11640 ;;		_change_state_to_menu_12
 11641 ;;		_change_state_to_menu_22
 11642 ;;		_printRTC
 11643 ;;		_EEPROM_write
 11644 ;;		_Test
 11645 ;;		_algorithmTest
 11646 ;;		_sensorTest
 11647 ;;		_actuatorTest
 11648 ;; This function uses a non-reentrant model
 11649 ;;
 11650                           
 11651                           	psect	text42
 11652  001126                     __ptext42:
 11653                           	opt stack 0
 11654  001126                     _printf:
 11655                           	opt stack 18
 11656                           
 11657                           ;doprnt.c: 466: va_list ap;
 11658                           ;doprnt.c: 499: signed char c;
 11659                           ;doprnt.c: 501: int width;
 11660                           ;doprnt.c: 506: signed char prec;
 11661                           ;doprnt.c: 508: unsigned char flag;
 11662                           ;doprnt.c: 523: union {
 11663                           ;doprnt.c: 524: unsigned long vd;
 11664                           ;doprnt.c: 525: double integ;
 11665                           ;doprnt.c: 526: } tmpval;
 11666                           ;doprnt.c: 528: unsigned int val;
 11667                           ;doprnt.c: 529: unsigned len;
 11668                           ;doprnt.c: 530: const char * cp;
 11669                           ;doprnt.c: 533: *ap = __va_start();
 11670                           
 11671                           ;incstack = 0
 11672  001126  0E90               	movlw	low (?_printf+2)
 11673  001128  0100               	movlb	0	; () banked
 11674  00112A  6FA1               	movwf	printf@ap& (0+255),b
 11675  00112C  0E00               	movlw	high (?_printf+2)
 11676  00112E  0100               	movlb	0	; () banked
 11677  001130  6FA2               	movwf	(printf@ap+1)& (0+255),b
 11678                           
 11679                           ;doprnt.c: 536: while(c = *f++) {
 11680  001132  D205               	goto	l5077
 11681  001134                     l4947:
 11682                           
 11683                           ; BSR set to: 0
 11684                           ;doprnt.c: 538: if(c != '%')
 11685  001134  0E25               	movlw	37
 11686  001136  0100               	movlb	0	; () banked
 11687  001138  19A8               	xorwf	printf@c& (0+255),w,b
 11688  00113A  B4D8               	btfsc	status,2,c
 11689  00113C  D005               	goto	l4951
 11690                           
 11691                           ; BSR set to: 0
 11692                           ;doprnt.c: 540: {
 11693                           ;doprnt.c: 541: (putch(c) );
 11694  00113E  0100               	movlb	0	; () banked
 11695  001140  51A8               	movf	printf@c& (0+255),w,b
 11696  001142  EC8A  F01F         	call	_putch
 11697                           
 11698                           ;doprnt.c: 542: continue;
 11699  001146  D1FB               	goto	l5077
 11700  001148                     l4951:
 11701                           
 11702                           ;doprnt.c: 543: }
 11703                           ;doprnt.c: 546: width = 0;
 11704  001148  0E00               	movlw	0
 11705  00114A  0100               	movlb	0	; () banked
 11706  00114C  6FAA               	movwf	(printf@width+1)& (0+255),b
 11707  00114E  0E00               	movlw	0
 11708  001150  6FA9               	movwf	printf@width& (0+255),b
 11709                           
 11710                           ;doprnt.c: 548: flag = 0;
 11711  001152  0E00               	movlw	0
 11712  001154  0100               	movlb	0	; () banked
 11713  001156  6FA7               	movwf	printf@flag& (0+255),b
 11714                           
 11715                           ; BSR set to: 0
 11716                           ;doprnt.c: 551: switch(*f) {
 11717                           
 11718                           ;doprnt.c: 550: for(;;) {
 11719  001158  D005               	goto	l4957
 11720  00115A                     l4953:
 11721                           
 11722                           ;doprnt.c: 580: flag |= 0x04;
 11723  00115A  0100               	movlb	0	; () banked
 11724  00115C  85A7               	bsf	printf@flag& (0+255),2,b
 11725                           
 11726                           ;doprnt.c: 581: f++;
 11727  00115E  0100               	movlb	0	; () banked
 11728  001160  4B8E               	infsnz	printf@f& (0+255),f,b
 11729  001162  2B8F               	incf	(printf@f+1)& (0+255),f,b
 11730  001164                     l4957:
 11731  001164  C08E  FFF6         	movff	printf@f,tblptrl
 11732  001168  C08F  FFF7         	movff	printf@f+1,tblptrh
 11733  00116C                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 11734  00116C  6AF8               	clrf	tblptru,c
 11735  00116E                     	endif
 11736  00116E                     	if	0	;tblptru may be non-zero
 11737  00116E                     	endif
 11738  00116E  0008               	tblrd		*
 11739  001170  50F5               	movf	tablat,w,c
 11740                           
 11741                           ; Switch size 1, requested type "space"
 11742                           ; Number of cases is 1, Range of values is 48 to 48
 11743                           ; switch strategies available:
 11744                           ; Name         Instructions Cycles
 11745                           ; simple_byte            4     3 (average)
 11746                           ;	Chosen strategy is simple_byte
 11747  001172  0A30               	xorlw	48	; case 48
 11748  001174  B4D8               	btfsc	status,2,c
 11749  001176  D7F1               	goto	l4953
 11750                           
 11751                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 11752                           
 11753                           ;doprnt.c: 586: }
 11754                           
 11755                           ;doprnt.c: 585: break;
 11756  001178  C08E  FFF6         	movff	printf@f,tblptrl
 11757  00117C  C08F  FFF7         	movff	printf@f+1,tblptrh
 11758  001180                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 11759  001180  6AF8               	clrf	tblptru,c
 11760  001182                     	endif
 11761  001182                     	if	0	;tblptru may be non-zero
 11762  001182                     	endif
 11763  001182  0008               	tblrd		*
 11764  001184  50F5               	movf	tablat,w,c
 11765  001186  ECA8  F01E         	call	_isdigit
 11766  00118A  A0D8               	btfss	status,0,c
 11767  00118C  D0D2               	goto	l5005
 11768                           
 11769                           ;doprnt.c: 598: width = 0;
 11770  00118E  0E00               	movlw	0
 11771  001190  0100               	movlb	0	; () banked
 11772  001192  6FAA               	movwf	(printf@width+1)& (0+255),b
 11773  001194  0E00               	movlw	0
 11774  001196  6FA9               	movwf	printf@width& (0+255),b
 11775  001198                     l4963:
 11776                           
 11777                           ;doprnt.c: 600: width *= 10;
 11778  001198  C0A9  F080         	movff	printf@width,___wmul@multiplier
 11779  00119C  C0AA  F081         	movff	printf@width+1,___wmul@multiplier+1
 11780  0011A0  0E00               	movlw	0
 11781  0011A2  0100               	movlb	0	; () banked
 11782  0011A4  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
 11783  0011A6  0E0A               	movlw	10
 11784  0011A8  6F82               	movwf	___wmul@multiplicand& (0+255),b
 11785  0011AA  EC42  F01D         	call	___wmul	;wreg free
 11786  0011AE  C080  F0A9         	movff	?___wmul,printf@width
 11787  0011B2  C081  F0AA         	movff	?___wmul+1,printf@width+1
 11788                           
 11789                           ;doprnt.c: 601: width += *f++ - '0';
 11790  0011B6  0ED0               	movlw	208
 11791  0011B8  0100               	movlb	0	; () banked
 11792  0011BA  6F9A               	movwf	??_printf& (0+255),b
 11793  0011BC  0EFF               	movlw	255
 11794  0011BE  0100               	movlb	0	; () banked
 11795  0011C0  6F9B               	movwf	(??_printf+1)& (0+255),b
 11796  0011C2  C08E  FFF6         	movff	printf@f,tblptrl
 11797  0011C6  C08F  FFF7         	movff	printf@f+1,tblptrh
 11798  0011CA                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 11799  0011CA  6AF8               	clrf	tblptru,c
 11800  0011CC                     	endif
 11801  0011CC                     	if	0	;tblptru may be non-zero
 11802  0011CC                     	endif
 11803  0011CC  0008               	tblrd		*
 11804  0011CE  50F5               	movf	tablat,w,c
 11805  0011D0  0100               	movlb	0	; () banked
 11806  0011D2  6F9C               	movwf	(??_printf+2)& (0+255),b
 11807  0011D4  6B9D               	clrf	(??_printf+3)& (0+255),b
 11808  0011D6  0100               	movlb	0	; () banked
 11809  0011D8  519A               	movf	??_printf& (0+255),w,b
 11810  0011DA  0100               	movlb	0	; () banked
 11811  0011DC  279C               	addwf	(??_printf+2)& (0+255),f,b
 11812  0011DE  0100               	movlb	0	; () banked
 11813  0011E0  519B               	movf	(??_printf+1)& (0+255),w,b
 11814  0011E2  0100               	movlb	0	; () banked
 11815  0011E4  239D               	addwfc	(??_printf+3)& (0+255),f,b
 11816  0011E6  0100               	movlb	0	; () banked
 11817  0011E8  519C               	movf	(??_printf+2)& (0+255),w,b
 11818  0011EA  0100               	movlb	0	; () banked
 11819  0011EC  27A9               	addwf	printf@width& (0+255),f,b
 11820  0011EE  0100               	movlb	0	; () banked
 11821  0011F0  519D               	movf	(??_printf+3)& (0+255),w,b
 11822  0011F2  0100               	movlb	0	; () banked
 11823  0011F4  23AA               	addwfc	(printf@width+1)& (0+255),f,b
 11824                           
 11825                           ; BSR set to: 0
 11826  0011F6  0100               	movlb	0	; () banked
 11827  0011F8  4B8E               	infsnz	printf@f& (0+255),f,b
 11828  0011FA  2B8F               	incf	(printf@f+1)& (0+255),f,b
 11829                           
 11830                           ; BSR set to: 0
 11831                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 11832  0011FC  C08E  FFF6         	movff	printf@f,tblptrl
 11833  001200  C08F  FFF7         	movff	printf@f+1,tblptrh
 11834  001204                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 11835  001204  6AF8               	clrf	tblptru,c
 11836  001206                     	endif
 11837  001206                     	if	0	;tblptru may be non-zero
 11838  001206                     	endif
 11839  001206  0008               	tblrd		*
 11840  001208  50F5               	movf	tablat,w,c
 11841  00120A  ECA8  F01E         	call	_isdigit
 11842  00120E  A0D8               	btfss	status,0,c
 11843  001210  D090               	goto	l5005
 11844  001212  D7C2               	goto	l4963
 11845  001214                     l4971:
 11846                           
 11847                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 11848  001214  C0A1  FFD9         	movff	printf@ap,fsr2l
 11849  001218  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 11850  00121C  CFDE F09F          	movff	postinc2,printf@cp
 11851  001220  CFDD F0A0          	movff	postdec2,printf@cp+1
 11852  001224  0E02               	movlw	2
 11853  001226  0100               	movlb	0	; () banked
 11854  001228  27A1               	addwf	printf@ap& (0+255),f,b
 11855  00122A  0E00               	movlw	0
 11856  00122C  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 11857                           
 11858                           ; BSR set to: 0
 11859                           ;doprnt.c: 740: if(!cp)
 11860  00122E  0100               	movlb	0	; () banked
 11861  001230  519F               	movf	printf@cp& (0+255),w,b
 11862  001232  0100               	movlb	0	; () banked
 11863  001234  11A0               	iorwf	(printf@cp+1)& (0+255),w,b
 11864  001236  A4D8               	btfss	status,2,c
 11865  001238  D006               	goto	l4979
 11866                           
 11867                           ; BSR set to: 0
 11868                           ;doprnt.c: 741: cp = "(null)";
 11869  00123A  0EB5               	movlw	low STR_105
 11870  00123C  0100               	movlb	0	; () banked
 11871  00123E  6F9F               	movwf	printf@cp& (0+255),b
 11872  001240  0EFF               	movlw	high STR_105
 11873  001242  0100               	movlb	0	; () banked
 11874  001244  6FA0               	movwf	(printf@cp+1)& (0+255),b
 11875  001246                     l4979:
 11876                           
 11877                           ; BSR set to: 0
 11878                           ;doprnt.c: 745: len = 0;
 11879  001246  0E00               	movlw	0
 11880  001248  0100               	movlb	0	; () banked
 11881  00124A  6FA4               	movwf	(printf@len+1)& (0+255),b
 11882  00124C  0E00               	movlw	0
 11883  00124E  6FA3               	movwf	printf@len& (0+255),b
 11884                           
 11885                           ;doprnt.c: 746: while(cp[len])
 11886  001250  D003               	goto	l4983
 11887  001252                     l4981:
 11888                           
 11889                           ;doprnt.c: 747: len++;
 11890  001252  0100               	movlb	0	; () banked
 11891  001254  4BA3               	infsnz	printf@len& (0+255),f,b
 11892  001256  2BA4               	incf	(printf@len+1)& (0+255),f,b
 11893  001258                     l4983:
 11894                           
 11895                           ; BSR set to: 0
 11896  001258  0100               	movlb	0	; () banked
 11897  00125A  51A3               	movf	printf@len& (0+255),w,b
 11898  00125C  0100               	movlb	0	; () banked
 11899  00125E  259F               	addwf	printf@cp& (0+255),w,b
 11900  001260  0100               	movlb	0	; () banked
 11901  001262  6F9A               	movwf	??_printf& (0+255),b
 11902  001264  0100               	movlb	0	; () banked
 11903  001266  51A4               	movf	(printf@len+1)& (0+255),w,b
 11904  001268  0100               	movlb	0	; () banked
 11905  00126A  21A0               	addwfc	(printf@cp+1)& (0+255),w,b
 11906  00126C  0100               	movlb	0	; () banked
 11907  00126E  6F9B               	movwf	(??_printf+1)& (0+255),b
 11908  001270  C09A  FFF6         	movff	??_printf,tblptrl
 11909  001274  C09B  FFF7         	movff	??_printf+1,tblptrh
 11910  001278  0E00               	movlw	low (__mediumconst shr (0+16))
 11911  00127A  6EF8               	movwf	tblptru,c
 11912  00127C  0E0F               	movlw	(high __ramtop+-1)
 11913  00127E  64F7               	cpfsgt	tblptrh,c
 11914  001280  D003               	bra	u3527
 11915  001282  0008               	tblrd		*
 11916  001284  50F5               	movf	tablat,w,c
 11917  001286  D005               	bra	u3520
 11918  001288                     u3527:
 11919  001288  CFF6 FFE9          	movff	tblptrl,fsr0l
 11920  00128C  CFF7 FFEA          	movff	tblptrh,fsr0h
 11921  001290  50EF               	movf	indf0,w,c
 11922  001292                     u3520:
 11923  001292  0900               	iorlw	0
 11924  001294  A4D8               	btfss	status,2,c
 11925  001296  D7DD               	goto	l4981
 11926                           
 11927                           ;doprnt.c: 757: if(width > len)
 11928  001298  0100               	movlb	0	; () banked
 11929  00129A  51A9               	movf	printf@width& (0+255),w,b
 11930  00129C  0100               	movlb	0	; () banked
 11931  00129E  5DA3               	subwf	printf@len& (0+255),w,b
 11932  0012A0  0100               	movlb	0	; () banked
 11933  0012A2  51AA               	movf	(printf@width+1)& (0+255),w,b
 11934  0012A4  0100               	movlb	0	; () banked
 11935  0012A6  59A4               	subwfb	(printf@len+1)& (0+255),w,b
 11936  0012A8  B0D8               	btfsc	status,0,c
 11937  0012AA  D009               	goto	l4989
 11938                           
 11939                           ; BSR set to: 0
 11940                           ;doprnt.c: 758: width -= len;
 11941  0012AC  0100               	movlb	0	; () banked
 11942  0012AE  51A3               	movf	printf@len& (0+255),w,b
 11943  0012B0  0100               	movlb	0	; () banked
 11944  0012B2  5FA9               	subwf	printf@width& (0+255),f,b
 11945  0012B4  0100               	movlb	0	; () banked
 11946  0012B6  51A4               	movf	(printf@len+1)& (0+255),w,b
 11947  0012B8  0100               	movlb	0	; () banked
 11948  0012BA  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
 11949  0012BC  D009               	goto	l4993
 11950  0012BE                     l4989:
 11951                           
 11952                           ; BSR set to: 0
 11953                           ;doprnt.c: 759: else
 11954                           ;doprnt.c: 760: width = 0;
 11955  0012BE  0E00               	movlw	0
 11956  0012C0  0100               	movlb	0	; () banked
 11957  0012C2  6FAA               	movwf	(printf@width+1)& (0+255),b
 11958  0012C4  0E00               	movlw	0
 11959  0012C6  6FA9               	movwf	printf@width& (0+255),b
 11960                           
 11961                           ; BSR set to: 0
 11962                           ;doprnt.c: 764: while(width--)
 11963  0012C8  D003               	goto	l4993
 11964  0012CA                     l4991:
 11965                           
 11966                           ; BSR set to: 0
 11967                           ;doprnt.c: 765: (putch(' ') );
 11968  0012CA  0E20               	movlw	32
 11969  0012CC  EC8A  F01F         	call	_putch
 11970  0012D0                     l4993:
 11971  0012D0  0100               	movlb	0	; () banked
 11972  0012D2  07A9               	decf	printf@width& (0+255),f,b
 11973  0012D4  A0D8               	btfss	status,0,c
 11974  0012D6  07AA               	decf	(printf@width+1)& (0+255),f,b
 11975  0012D8  0100               	movlb	0	; () banked
 11976  0012DA  29A9               	incf	printf@width& (0+255),w,b
 11977  0012DC  E1F6               	bnz	l4991
 11978  0012DE  0100               	movlb	0	; () banked
 11979  0012E0  29AA               	incf	(printf@width+1)& (0+255),w,b
 11980  0012E2  B4D8               	btfsc	status,2,c
 11981  0012E4  D017               	goto	l4999
 11982  0012E6  D7F1               	goto	l4991
 11983  0012E8                     l4995:
 11984                           
 11985                           ; BSR set to: 0
 11986                           ;doprnt.c: 768: (putch(*cp++) );
 11987  0012E8  C09F  FFF6         	movff	printf@cp,tblptrl
 11988  0012EC  C0A0  FFF7         	movff	printf@cp+1,tblptrh
 11989  0012F0  0E00               	movlw	low (__mediumconst shr (0+16))
 11990  0012F2  6EF8               	movwf	tblptru,c
 11991  0012F4  0E0F               	movlw	(high __ramtop+-1)
 11992  0012F6  64F7               	cpfsgt	tblptrh,c
 11993  0012F8  D003               	bra	u3567
 11994  0012FA  0008               	tblrd		*
 11995  0012FC  50F5               	movf	tablat,w,c
 11996  0012FE  D005               	bra	u3560
 11997  001300                     u3567:
 11998  001300  CFF6 FFE9          	movff	tblptrl,fsr0l
 11999  001304  CFF7 FFEA          	movff	tblptrh,fsr0h
 12000  001308  50EF               	movf	indf0,w,c
 12001  00130A                     u3560:
 12002  00130A  EC8A  F01F         	call	_putch
 12003  00130E  0100               	movlb	0	; () banked
 12004  001310  4B9F               	infsnz	printf@cp& (0+255),f,b
 12005  001312  2BA0               	incf	(printf@cp+1)& (0+255),f,b
 12006  001314                     l4999:
 12007                           
 12008                           ; BSR set to: 0
 12009  001314  0100               	movlb	0	; () banked
 12010  001316  07A3               	decf	printf@len& (0+255),f,b
 12011  001318  A0D8               	btfss	status,0,c
 12012  00131A  07A4               	decf	(printf@len+1)& (0+255),f,b
 12013  00131C  0100               	movlb	0	; () banked
 12014  00131E  29A3               	incf	printf@len& (0+255),w,b
 12015  001320  E1E3               	bnz	l4995
 12016  001322  0100               	movlb	0	; () banked
 12017  001324  29A4               	incf	(printf@len+1)& (0+255),w,b
 12018  001326  B4D8               	btfsc	status,2,c
 12019  001328  D10A               	goto	l5077
 12020  00132A  D7DE               	goto	l4995
 12021  00132C                     l5001:
 12022                           
 12023                           ; BSR set to: 0
 12024                           ;doprnt.c: 818: flag |= 0x40;
 12025  00132C  0100               	movlb	0	; () banked
 12026  00132E  8DA7               	bsf	printf@flag& (0+255),6,b
 12027                           
 12028                           ; BSR set to: 0
 12029                           ;doprnt.c: 822: }
 12030                           
 12031                           ;doprnt.c: 819: break;
 12032  001330  D01D               	goto	l1125
 12033  001332                     l5005:
 12034  001332  C08E  FFF6         	movff	printf@f,tblptrl
 12035  001336  C08F  FFF7         	movff	printf@f+1,tblptrh
 12036  00133A  0100               	movlb	0	; () banked
 12037  00133C  4B8E               	infsnz	printf@f& (0+255),f,b
 12038  00133E  2B8F               	incf	(printf@f+1)& (0+255),f,b
 12039  001340                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 12040  001340  6AF8               	clrf	tblptru,c
 12041  001342                     	endif
 12042  001342                     	if	0	;tblptru may be non-zero
 12043  001342                     	endif
 12044  001342  0008               	tblrd		*
 12045  001344  CFF5 F0A8          	movff	tablat,printf@c
 12046  001348  0100               	movlb	0	; () banked
 12047  00134A  51A8               	movf	printf@c& (0+255),w,b
 12048                           
 12049                           ; Switch size 1, requested type "space"
 12050                           ; Number of cases is 5, Range of values is 0 to 117
 12051                           ; switch strategies available:
 12052                           ; Name         Instructions Cycles
 12053                           ; simple_byte           16     9 (average)
 12054                           ;	Chosen strategy is simple_byte
 12055  00134C  0A00               	xorlw	0	; case 0
 12056  00134E  B4D8               	btfsc	status,2,c
 12057  001350  0012               	return	
 12058  001352  0A64               	xorlw	100	; case 100
 12059  001354  B4D8               	btfsc	status,2,c
 12060  001356  D00A               	goto	l1125
 12061  001358  0A0D               	xorlw	13	; case 105
 12062  00135A  B4D8               	btfsc	status,2,c
 12063  00135C  D007               	goto	l1125
 12064  00135E  0A1A               	xorlw	26	; case 115
 12065  001360  B4D8               	btfsc	status,2,c
 12066  001362  D758               	goto	l4971
 12067  001364  0A06               	xorlw	6	; case 117
 12068  001366  B4D8               	btfsc	status,2,c
 12069  001368  D7E1               	goto	l5001
 12070  00136A  D0E9               	goto	l5077
 12071  00136C                     l1125:
 12072                           
 12073                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
 12074  00136C  0100               	movlb	0	; () banked
 12075  00136E  BDA7               	btfsc	printf@flag& (0+255),6,b
 12076  001370  D019               	goto	l5017
 12077                           
 12078                           ; BSR set to: 0
 12079                           ;doprnt.c: 1253: {
 12080                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 12081  001372  C0A1  FFD9         	movff	printf@ap,fsr2l
 12082  001376  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 12083  00137A  CFDE F0A5          	movff	postinc2,printf@val
 12084  00137E  CFDD F0A6          	movff	postdec2,printf@val+1
 12085                           
 12086                           ; BSR set to: 0
 12087  001382  0E02               	movlw	2
 12088  001384  0100               	movlb	0	; () banked
 12089  001386  27A1               	addwf	printf@ap& (0+255),f,b
 12090  001388  0E00               	movlw	0
 12091  00138A  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 12092                           
 12093                           ; BSR set to: 0
 12094                           ;doprnt.c: 1261: if((int)val < 0) {
 12095  00138C  0100               	movlb	0	; () banked
 12096  00138E  AFA6               	btfss	(printf@val+1)& (0+255),7,b
 12097  001390  D016               	goto	l5021
 12098                           
 12099                           ; BSR set to: 0
 12100                           ;doprnt.c: 1262: flag |= 0x03;
 12101  001392  0E03               	movlw	3
 12102  001394  0100               	movlb	0	; () banked
 12103  001396  13A7               	iorwf	printf@flag& (0+255),f,b
 12104                           
 12105                           ; BSR set to: 0
 12106                           ;doprnt.c: 1263: val = -val;
 12107  001398  0100               	movlb	0	; () banked
 12108  00139A  6DA5               	negf	printf@val& (0+255),b
 12109  00139C  1FA6               	comf	(printf@val+1)& (0+255),f,b
 12110  00139E  B0D8               	btfsc	status,0,c
 12111  0013A0  2BA6               	incf	(printf@val+1)& (0+255),f,b
 12112                           
 12113                           ; BSR set to: 0
 12114                           ;doprnt.c: 1264: }
 12115                           ;doprnt.c: 1266: }
 12116  0013A2  D00D               	goto	l5021
 12117  0013A4                     l5017:
 12118                           
 12119                           ; BSR set to: 0
 12120                           ;doprnt.c: 1268: else
 12121                           ;doprnt.c: 1273: {
 12122                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 12123  0013A4  C0A1  FFD9         	movff	printf@ap,fsr2l
 12124  0013A8  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 12125  0013AC  CFDE F0A5          	movff	postinc2,printf@val
 12126  0013B0  CFDD F0A6          	movff	postdec2,printf@val+1
 12127                           
 12128                           ; BSR set to: 0
 12129  0013B4  0E02               	movlw	2
 12130  0013B6  0100               	movlb	0	; () banked
 12131  0013B8  27A1               	addwf	printf@ap& (0+255),f,b
 12132  0013BA  0E00               	movlw	0
 12133  0013BC  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 12134  0013BE                     l5021:
 12135                           
 12136                           ; BSR set to: 0
 12137                           ;doprnt.c: 1287: }
 12138                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 12139  0013BE  0E01               	movlw	1
 12140  0013C0  0100               	movlb	0	; () banked
 12141  0013C2  6FA8               	movwf	printf@c& (0+255),b
 12142  0013C4                     l5023:
 12143                           
 12144                           ; BSR set to: 0
 12145  0013C4  0E05               	movlw	5
 12146  0013C6  0100               	movlb	0	; () banked
 12147  0013C8  19A8               	xorwf	printf@c& (0+255),w,b
 12148  0013CA  B4D8               	btfsc	status,2,c
 12149  0013CC  D019               	goto	l5035
 12150                           
 12151                           ; BSR set to: 0
 12152                           ;doprnt.c: 1306: if(val < dpowers[c])
 12153                           
 12154                           ; BSR set to: 0
 12155                           
 12156                           ; BSR set to: 0
 12157  0013CE  0100               	movlb	0	; () banked
 12158  0013D0  51A8               	movf	printf@c& (0+255),w,b
 12159  0013D2  0D02               	mullw	2
 12160  0013D4  0EB4               	movlw	low _dpowers
 12161  0013D6  24F3               	addwf	prodl,w,c
 12162  0013D8  6EF6               	movwf	tblptrl,c
 12163  0013DA  0EFB               	movlw	high _dpowers
 12164  0013DC  20F4               	addwfc	prodh,w,c
 12165  0013DE  6EF7               	movwf	tblptrh,c
 12166  0013E0                     	if	1	;There are 3 active tblptr bytes
 12167  0013E0  6AF8               	clrf	tblptru,c
 12168  0013E2  0E00               	movlw	low (__mediumconst shr (0+16))
 12169  0013E4  22F8               	addwfc	tblptru,f,c
 12170  0013E6                     	endif
 12171  0013E6  0009               	tblrd		*+
 12172  0013E8  50F5               	movf	tablat,w,c
 12173  0013EA  0100               	movlb	0	; () banked
 12174  0013EC  5DA5               	subwf	printf@val& (0+255),w,b
 12175  0013EE  0009               	tblrd		*+
 12176  0013F0  50F5               	movf	tablat,w,c
 12177  0013F2  0100               	movlb	0	; () banked
 12178  0013F4  59A6               	subwfb	(printf@val+1)& (0+255),w,b
 12179  0013F6  A0D8               	btfss	status,0,c
 12180  0013F8  D003               	goto	l5035
 12181                           
 12182                           ; BSR set to: 0
 12183                           
 12184                           ; BSR set to: 0
 12185                           
 12186                           ; BSR set to: 0
 12187                           ;doprnt.c: 1307: break;
 12188  0013FA  0100               	movlb	0	; () banked
 12189  0013FC  2BA8               	incf	printf@c& (0+255),f,b
 12190  0013FE  D7E2               	goto	l5023
 12191  001400                     l5035:
 12192                           
 12193                           ; BSR set to: 0
 12194                           ;doprnt.c: 1345: if(width && flag & 0x03)
 12195  001400  0100               	movlb	0	; () banked
 12196  001402  51A9               	movf	printf@width& (0+255),w,b
 12197  001404  0100               	movlb	0	; () banked
 12198  001406  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 12199  001408  B4D8               	btfsc	status,2,c
 12200  00140A  D00B               	goto	l5041
 12201                           
 12202                           ; BSR set to: 0
 12203  00140C  C0A7  F09A         	movff	printf@flag,??_printf
 12204  001410  0E03               	movlw	3
 12205  001412  0100               	movlb	0	; () banked
 12206  001414  179A               	andwf	??_printf& (0+255),f,b
 12207  001416  B4D8               	btfsc	status,2,c
 12208  001418  D004               	goto	l5041
 12209                           
 12210                           ; BSR set to: 0
 12211                           ;doprnt.c: 1346: width--;
 12212  00141A  0100               	movlb	0	; () banked
 12213  00141C  07A9               	decf	printf@width& (0+255),f,b
 12214  00141E  A0D8               	btfss	status,0,c
 12215  001420  07AA               	decf	(printf@width+1)& (0+255),f,b
 12216  001422                     l5041:
 12217                           
 12218                           ; BSR set to: 0
 12219                           ;doprnt.c: 1381: if(width > c)
 12220  001422  0E80               	movlw	128
 12221  001424  0100               	movlb	0	; () banked
 12222  001426  BFA8               	btfsc	printf@c& (0+255),7,b
 12223  001428  0E7F               	movlw	127
 12224  00142A  0100               	movlb	0	; () banked
 12225  00142C  6F9A               	movwf	??_printf& (0+255),b
 12226  00142E  0100               	movlb	0	; () banked
 12227  001430  51A9               	movf	printf@width& (0+255),w,b
 12228  001432  0100               	movlb	0	; () banked
 12229  001434  5DA8               	subwf	printf@c& (0+255),w,b
 12230  001436  0100               	movlb	0	; () banked
 12231  001438  51AA               	movf	(printf@width+1)& (0+255),w,b
 12232  00143A  0A80               	xorlw	128
 12233  00143C  0100               	movlb	0	; () banked
 12234  00143E  599A               	subwfb	??_printf& (0+255),w,b
 12235  001440  B0D8               	btfsc	status,0,c
 12236  001442  D00B               	goto	l5045
 12237                           
 12238                           ; BSR set to: 0
 12239                           ;doprnt.c: 1382: width -= c;
 12240  001444  0100               	movlb	0	; () banked
 12241  001446  51A8               	movf	printf@c& (0+255),w,b
 12242  001448  0100               	movlb	0	; () banked
 12243  00144A  5FA9               	subwf	printf@width& (0+255),f,b
 12244  00144C  0E00               	movlw	0
 12245  00144E  0100               	movlb	0	; () banked
 12246  001450  BFA8               	btfsc	printf@c& (0+255),7,b
 12247  001452  0EFF               	movlw	255
 12248  001454  0100               	movlb	0	; () banked
 12249  001456  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
 12250  001458  D005               	goto	l5047
 12251  00145A                     l5045:
 12252                           
 12253                           ; BSR set to: 0
 12254                           ;doprnt.c: 1383: else
 12255                           ;doprnt.c: 1384: width = 0;
 12256  00145A  0E00               	movlw	0
 12257  00145C  0100               	movlb	0	; () banked
 12258  00145E  6FAA               	movwf	(printf@width+1)& (0+255),b
 12259  001460  0E00               	movlw	0
 12260  001462  6FA9               	movwf	printf@width& (0+255),b
 12261  001464                     l5047:
 12262                           
 12263                           ; BSR set to: 0
 12264                           ;doprnt.c: 1387: if(flag & 0x04) {
 12265  001464  0100               	movlb	0	; () banked
 12266  001466  A5A7               	btfss	printf@flag& (0+255),2,b
 12267  001468  D018               	goto	l5059
 12268                           
 12269                           ; BSR set to: 0
 12270                           ;doprnt.c: 1392: if(flag & 0x03)
 12271  00146A  C0A7  F09A         	movff	printf@flag,??_printf
 12272  00146E  0E03               	movlw	3
 12273  001470  0100               	movlb	0	; () banked
 12274  001472  179A               	andwf	??_printf& (0+255),f,b
 12275  001474  B4D8               	btfsc	status,2,c
 12276  001476  D003               	goto	l5053
 12277                           
 12278                           ; BSR set to: 0
 12279                           ;doprnt.c: 1393: (putch('-') );
 12280  001478  0E2D               	movlw	45
 12281  00147A  EC8A  F01F         	call	_putch
 12282  00147E                     l5053:
 12283                           
 12284                           ;doprnt.c: 1415: if(width)
 12285  00147E  0100               	movlb	0	; () banked
 12286  001480  51A9               	movf	printf@width& (0+255),w,b
 12287  001482  0100               	movlb	0	; () banked
 12288  001484  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 12289  001486  B4D8               	btfsc	status,2,c
 12290  001488  D025               	goto	l5069
 12291                           
 12292                           ; BSR set to: 0
 12293                           ;doprnt.c: 1417: (putch('0') );
 12294                           
 12295                           ; BSR set to: 0
 12296                           
 12297                           ;doprnt.c: 1416: do
 12298  00148A  0E30               	movlw	48
 12299  00148C  EC8A  F01F         	call	_putch
 12300                           
 12301                           ;doprnt.c: 1418: while(--width);
 12302  001490  0100               	movlb	0	; () banked
 12303  001492  07A9               	decf	printf@width& (0+255),f,b
 12304  001494  A0D8               	btfss	status,0,c
 12305  001496  07AA               	decf	(printf@width+1)& (0+255),f,b
 12306  001498  D7F2               	goto	l5053
 12307  00149A                     l5059:
 12308                           
 12309                           ; BSR set to: 0
 12310                           ;doprnt.c: 1422: {
 12311                           ;doprnt.c: 1424: if(width
 12312                           ;doprnt.c: 1428: )
 12313  00149A  0100               	movlb	0	; () banked
 12314  00149C  51A9               	movf	printf@width& (0+255),w,b
 12315  00149E  0100               	movlb	0	; () banked
 12316  0014A0  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 12317  0014A2  B4D8               	btfsc	status,2,c
 12318  0014A4  D00D               	goto	l5065
 12319  0014A6                     l5061:
 12320                           
 12321                           ; BSR set to: 0
 12322                           ;doprnt.c: 1430: (putch(' ') );
 12323  0014A6  0E20               	movlw	32
 12324  0014A8  EC8A  F01F         	call	_putch
 12325                           
 12326                           ;doprnt.c: 1431: while(--width);
 12327  0014AC  0100               	movlb	0	; () banked
 12328  0014AE  07A9               	decf	printf@width& (0+255),f,b
 12329  0014B0  A0D8               	btfss	status,0,c
 12330  0014B2  07AA               	decf	(printf@width+1)& (0+255),f,b
 12331  0014B4  0100               	movlb	0	; () banked
 12332  0014B6  51A9               	movf	printf@width& (0+255),w,b
 12333  0014B8  0100               	movlb	0	; () banked
 12334  0014BA  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 12335  0014BC  A4D8               	btfss	status,2,c
 12336  0014BE  D7F3               	goto	l5061
 12337  0014C0                     l5065:
 12338                           
 12339                           ; BSR set to: 0
 12340                           ;doprnt.c: 1438: if(flag & 0x03)
 12341  0014C0  C0A7  F09A         	movff	printf@flag,??_printf
 12342  0014C4  0E03               	movlw	3
 12343  0014C6  0100               	movlb	0	; () banked
 12344  0014C8  179A               	andwf	??_printf& (0+255),f,b
 12345  0014CA  B4D8               	btfsc	status,2,c
 12346  0014CC  D003               	goto	l5069
 12347                           
 12348                           ; BSR set to: 0
 12349                           ;doprnt.c: 1439: (putch('-') );
 12350  0014CE  0E2D               	movlw	45
 12351  0014D0  EC8A  F01F         	call	_putch
 12352  0014D4                     l5069:
 12353                           
 12354                           ;doprnt.c: 1469: }
 12355                           ;doprnt.c: 1472: prec = c;
 12356  0014D4  C0A8  F09E         	movff	printf@c,printf@prec
 12357                           
 12358                           ;doprnt.c: 1474: while(prec--) {
 12359  0014D8  D02C               	goto	l5075
 12360  0014DA                     l5071:
 12361                           
 12362                           ;doprnt.c: 1478: {
 12363                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 12364  0014DA  0100               	movlb	0	; () banked
 12365  0014DC  519E               	movf	printf@prec& (0+255),w,b
 12366  0014DE  0D02               	mullw	2
 12367  0014E0  0EB4               	movlw	low _dpowers
 12368  0014E2  24F3               	addwf	prodl,w,c
 12369  0014E4  6EF6               	movwf	tblptrl,c
 12370  0014E6  0EFB               	movlw	high _dpowers
 12371  0014E8  20F4               	addwfc	prodh,w,c
 12372  0014EA  6EF7               	movwf	tblptrh,c
 12373  0014EC                     	if	1	;There are 3 active tblptr bytes
 12374  0014EC  6AF8               	clrf	tblptru,c
 12375  0014EE  0E00               	movlw	low (__mediumconst shr (0+16))
 12376  0014F0  22F8               	addwfc	tblptru,f,c
 12377  0014F2                     	endif
 12378  0014F2  0009               	tblrd		*+
 12379  0014F4  CFF5 F082          	movff	tablat,___lwdiv@divisor
 12380  0014F8  000A               	tblrd		*-
 12381  0014FA  CFF5 F083          	movff	tablat,___lwdiv@divisor+1
 12382  0014FE  C0A5  F080         	movff	printf@val,___lwdiv@dividend
 12383  001502  C0A6  F081         	movff	printf@val+1,___lwdiv@dividend+1
 12384  001506  ECEA  F019         	call	___lwdiv	;wreg free
 12385  00150A  C080  F087         	movff	?___lwdiv,___lwmod@dividend
 12386  00150E  C081  F088         	movff	?___lwdiv+1,___lwmod@dividend+1
 12387  001512  0E00               	movlw	0
 12388  001514  0100               	movlb	0	; () banked
 12389  001516  6F8A               	movwf	(___lwmod@divisor+1)& (0+255),b
 12390  001518  0E0A               	movlw	10
 12391  00151A  6F89               	movwf	___lwmod@divisor& (0+255),b
 12392  00151C  EC03  F01B         	call	___lwmod	;wreg free
 12393  001520  0100               	movlb	0	; () banked
 12394  001522  5187               	movf	?___lwmod& (0+255),w,b
 12395  001524  0F30               	addlw	48
 12396  001526  0100               	movlb	0	; () banked
 12397  001528  6FA8               	movwf	printf@c& (0+255),b
 12398                           
 12399                           ; BSR set to: 0
 12400                           ;doprnt.c: 1523: }
 12401                           ;doprnt.c: 1524: (putch(c) );
 12402  00152A  0100               	movlb	0	; () banked
 12403  00152C  51A8               	movf	printf@c& (0+255),w,b
 12404  00152E  EC8A  F01F         	call	_putch
 12405  001532                     l5075:
 12406  001532  0100               	movlb	0	; () banked
 12407  001534  079E               	decf	printf@prec& (0+255),f,b
 12408  001536  0100               	movlb	0	; () banked
 12409  001538  299E               	incf	printf@prec& (0+255),w,b
 12410  00153A  A4D8               	btfss	status,2,c
 12411  00153C  D7CE               	goto	l5071
 12412  00153E                     l5077:
 12413  00153E  C08E  FFF6         	movff	printf@f,tblptrl
 12414  001542  C08F  FFF7         	movff	printf@f+1,tblptrh
 12415  001546  0100               	movlb	0	; () banked
 12416  001548  4B8E               	infsnz	printf@f& (0+255),f,b
 12417  00154A  2B8F               	incf	(printf@f+1)& (0+255),f,b
 12418  00154C                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 12419  00154C  6AF8               	clrf	tblptru,c
 12420  00154E                     	endif
 12421  00154E                     	if	0	;tblptru may be non-zero
 12422  00154E                     	endif
 12423  00154E  0008               	tblrd		*
 12424  001550  CFF5 F0A8          	movff	tablat,printf@c
 12425  001554  0100               	movlb	0	; () banked
 12426  001556  51A8               	movf	printf@c& (0+255),w,b
 12427  001558  B4D8               	btfsc	status,2,c
 12428  00155A  0012               	return	
 12429  00155C  D5EB               	goto	l4947
 12430  00155E                     __end_of_printf:
 12431                           	opt stack 0
 12432                           tblptru	equ	0xFF8
 12433                           tblptrh	equ	0xFF7
 12434                           tblptrl	equ	0xFF6
 12435                           tablat	equ	0xFF5
 12436                           prodh	equ	0xFF4
 12437                           prodl	equ	0xFF3
 12438                           intcon	equ	0xFF2
 12439                           intcon2	equ	0xFF1
 12440                           intcon3	equ	0xFF0
 12441                           indf0	equ	0xFEF
 12442                           postinc0	equ	0xFEE
 12443                           fsr0h	equ	0xFEA
 12444                           fsr0l	equ	0xFE9
 12445                           wreg	equ	0xFE8
 12446                           postdec1	equ	0xFE5
 12447                           fsr1l	equ	0xFE1
 12448                           indf2	equ	0xFDF
 12449                           postinc2	equ	0xFDE
 12450                           postdec2	equ	0xFDD
 12451                           fsr2h	equ	0xFDA
 12452                           fsr2l	equ	0xFD9
 12453                           status	equ	0xFD8
 12454                           
 12455 ;; *************** function _putch *****************
 12456 ;; Defined at:
 12457 ;;		line 20 in file "lcd.c"
 12458 ;; Parameters:    Size  Location     Type
 12459 ;;  data            1    wreg     unsigned char 
 12460 ;; Auto vars:     Size  Location     Type
 12461 ;;  data            1    2[BANK0 ] unsigned char 
 12462 ;; Return value:  Size  Location     Type
 12463 ;;                  1    wreg      void 
 12464 ;; Registers used:
 12465 ;;		wreg, status,2, status,0, cstack
 12466 ;; Tracked objects:
 12467 ;;		On entry : 0/0
 12468 ;;		On exit  : 0/0
 12469 ;;		Unchanged: 0/0
 12470 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12471 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12472 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12473 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12474 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12475 ;;Total ram usage:        1 bytes
 12476 ;; Hardware stack levels used:    1
 12477 ;; Hardware stack levels required when called:    8
 12478 ;; This function calls:
 12479 ;;		_lcdNibble
 12480 ;; This function is called by:
 12481 ;;		_printf
 12482 ;; This function uses a non-reentrant model
 12483 ;;
 12484                           
 12485                           	psect	text43
 12486  003F14                     __ptext43:
 12487                           	opt stack 0
 12488  003F14                     _putch:
 12489                           	opt stack 18
 12490                           
 12491                           ;incstack = 0
 12492                           ;putch@data stored from wreg
 12493  003F14  0100               	movlb	0	; () banked
 12494  003F16  6F82               	movwf	putch@data& (0+255),b
 12495                           
 12496                           ;lcd.c: 21: LATDbits.LATD2 = 1;
 12497  003F18  848C               	bsf	3980,2,c	;volatile
 12498                           
 12499                           ;lcd.c: 22: lcdNibble(data);
 12500  003F1A  0100               	movlb	0	; () banked
 12501  003F1C  5182               	movf	putch@data& (0+255),w,b
 12502  003F1E  ECCF  F01A         	call	_lcdNibble
 12503  003F22  0012               	return		;funcret
 12504  003F24                     __end_of_putch:
 12505                           	opt stack 0
 12506                           tblptru	equ	0xFF8
 12507                           tblptrh	equ	0xFF7
 12508                           tblptrl	equ	0xFF6
 12509                           tablat	equ	0xFF5
 12510                           prodh	equ	0xFF4
 12511                           prodl	equ	0xFF3
 12512                           intcon	equ	0xFF2
 12513                           intcon2	equ	0xFF1
 12514                           intcon3	equ	0xFF0
 12515                           indf0	equ	0xFEF
 12516                           postinc0	equ	0xFEE
 12517                           fsr0h	equ	0xFEA
 12518                           fsr0l	equ	0xFE9
 12519                           wreg	equ	0xFE8
 12520                           postdec1	equ	0xFE5
 12521                           fsr1l	equ	0xFE1
 12522                           indf2	equ	0xFDF
 12523                           postinc2	equ	0xFDE
 12524                           postdec2	equ	0xFDD
 12525                           fsr2h	equ	0xFDA
 12526                           fsr2l	equ	0xFD9
 12527                           status	equ	0xFD8
 12528                           
 12529 ;; *************** function _isdigit *****************
 12530 ;; Defined at:
 12531 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 12532 ;; Parameters:    Size  Location     Type
 12533 ;;  c               1    wreg     unsigned char 
 12534 ;; Auto vars:     Size  Location     Type
 12535 ;;  c               1    2[BANK0 ] unsigned char 
 12536 ;; Return value:  Size  Location     Type
 12537 ;;		None               void
 12538 ;; Registers used:
 12539 ;;		wreg, status,2, status,0
 12540 ;; Tracked objects:
 12541 ;;		On entry : 0/0
 12542 ;;		On exit  : 0/0
 12543 ;;		Unchanged: 0/0
 12544 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12545 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12546 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12547 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12548 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12549 ;;Total ram usage:        3 bytes
 12550 ;; Hardware stack levels used:    1
 12551 ;; Hardware stack levels required when called:    7
 12552 ;; This function calls:
 12553 ;;		Nothing
 12554 ;; This function is called by:
 12555 ;;		_printf
 12556 ;; This function uses a non-reentrant model
 12557 ;;
 12558                           
 12559                           	psect	text44
 12560  003D50                     __ptext44:
 12561                           	opt stack 0
 12562  003D50                     _isdigit:
 12563                           	opt stack 19
 12564                           
 12565                           ;incstack = 0
 12566                           ;isdigit@c stored from wreg
 12567  003D50  0100               	movlb	0	; () banked
 12568  003D52  6F82               	movwf	isdigit@c& (0+255),b
 12569  003D54  0E00               	movlw	0
 12570  003D56  0100               	movlb	0	; () banked
 12571  003D58  6F81               	movwf	_isdigit$1792& (0+255),b
 12572                           
 12573                           ; BSR set to: 0
 12574  003D5A  0E3A               	movlw	58
 12575  003D5C  0100               	movlb	0	; () banked
 12576  003D5E  6182               	cpfslt	isdigit@c& (0+255),b
 12577  003D60  D007               	goto	l4801
 12578                           
 12579                           ; BSR set to: 0
 12580  003D62  0E2F               	movlw	47
 12581  003D64  0100               	movlb	0	; () banked
 12582  003D66  6582               	cpfsgt	isdigit@c& (0+255),b
 12583  003D68  D003               	goto	l4801
 12584                           
 12585                           ; BSR set to: 0
 12586  003D6A  0E01               	movlw	1
 12587  003D6C  0100               	movlb	0	; () banked
 12588  003D6E  6F81               	movwf	_isdigit$1792& (0+255),b
 12589  003D70                     l4801:
 12590                           
 12591                           ; BSR set to: 0
 12592  003D70  C081  F080         	movff	_isdigit$1792,??_isdigit
 12593  003D74  0100               	movlb	0	; () banked
 12594  003D76  3180               	rrcf	??_isdigit& (0+255),w,b
 12595  003D78  0012               	return	
 12596  003D7A                     __end_of_isdigit:
 12597                           	opt stack 0
 12598                           tblptru	equ	0xFF8
 12599                           tblptrh	equ	0xFF7
 12600                           tblptrl	equ	0xFF6
 12601                           tablat	equ	0xFF5
 12602                           prodh	equ	0xFF4
 12603                           prodl	equ	0xFF3
 12604                           intcon	equ	0xFF2
 12605                           intcon2	equ	0xFF1
 12606                           intcon3	equ	0xFF0
 12607                           indf0	equ	0xFEF
 12608                           postinc0	equ	0xFEE
 12609                           fsr0h	equ	0xFEA
 12610                           fsr0l	equ	0xFE9
 12611                           wreg	equ	0xFE8
 12612                           postdec1	equ	0xFE5
 12613                           fsr1l	equ	0xFE1
 12614                           indf2	equ	0xFDF
 12615                           postinc2	equ	0xFDE
 12616                           postdec2	equ	0xFDD
 12617                           fsr2h	equ	0xFDA
 12618                           fsr2l	equ	0xFD9
 12619                           status	equ	0xFD8
 12620                           
 12621 ;; *************** function ___wmul *****************
 12622 ;; Defined at:
 12623 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 12624 ;; Parameters:    Size  Location     Type
 12625 ;;  multiplier      2    0[BANK0 ] unsigned int 
 12626 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 12627 ;; Auto vars:     Size  Location     Type
 12628 ;;  product         2    4[BANK0 ] unsigned int 
 12629 ;; Return value:  Size  Location     Type
 12630 ;;                  2    0[BANK0 ] unsigned int 
 12631 ;; Registers used:
 12632 ;;		wreg, status,2, status,0, prodl, prodh
 12633 ;; Tracked objects:
 12634 ;;		On entry : 0/0
 12635 ;;		On exit  : 0/0
 12636 ;;		Unchanged: 0/0
 12637 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12638 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12639 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12640 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12641 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12642 ;;Total ram usage:        6 bytes
 12643 ;; Hardware stack levels used:    1
 12644 ;; Hardware stack levels required when called:    7
 12645 ;; This function calls:
 12646 ;;		Nothing
 12647 ;; This function is called by:
 12648 ;;		_printf
 12649 ;; This function uses a non-reentrant model
 12650 ;;
 12651                           
 12652                           	psect	text45
 12653  003A84                     __ptext45:
 12654                           	opt stack 0
 12655  003A84                     ___wmul:
 12656                           	opt stack 19
 12657                           
 12658                           ; BSR set to: 0
 12659                           ;incstack = 0
 12660  003A84  0100               	movlb	0	; () banked
 12661  003A86  5180               	movf	___wmul@multiplier& (0+255),w,b
 12662  003A88  0100               	movlb	0	; () banked
 12663  003A8A  0382               	mulwf	___wmul@multiplicand& (0+255),b
 12664  003A8C  CFF3 F084          	movff	prodl,___wmul@product
 12665  003A90  CFF4 F085          	movff	prodh,___wmul@product+1
 12666  003A94  0100               	movlb	0	; () banked
 12667  003A96  5180               	movf	___wmul@multiplier& (0+255),w,b
 12668  003A98  0100               	movlb	0	; () banked
 12669  003A9A  0383               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 12670  003A9C  50F3               	movf	prodl,w,c
 12671  003A9E  0100               	movlb	0	; () banked
 12672  003AA0  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 12673  003AA2  0100               	movlb	0	; () banked
 12674  003AA4  5181               	movf	(___wmul@multiplier+1)& (0+255),w,b
 12675  003AA6  0100               	movlb	0	; () banked
 12676  003AA8  0382               	mulwf	___wmul@multiplicand& (0+255),b
 12677  003AAA  50F3               	movf	prodl,w,c
 12678  003AAC  0100               	movlb	0	; () banked
 12679  003AAE  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 12680                           
 12681                           ; BSR set to: 0
 12682  003AB0  C084  F080         	movff	___wmul@product,?___wmul
 12683  003AB4  C085  F081         	movff	___wmul@product+1,?___wmul+1
 12684  003AB8  0012               	return	
 12685  003ABA                     __end_of___wmul:
 12686                           	opt stack 0
 12687                           tblptru	equ	0xFF8
 12688                           tblptrh	equ	0xFF7
 12689                           tblptrl	equ	0xFF6
 12690                           tablat	equ	0xFF5
 12691                           prodh	equ	0xFF4
 12692                           prodl	equ	0xFF3
 12693                           intcon	equ	0xFF2
 12694                           intcon2	equ	0xFF1
 12695                           intcon3	equ	0xFF0
 12696                           indf0	equ	0xFEF
 12697                           postinc0	equ	0xFEE
 12698                           fsr0h	equ	0xFEA
 12699                           fsr0l	equ	0xFE9
 12700                           wreg	equ	0xFE8
 12701                           postdec1	equ	0xFE5
 12702                           fsr1l	equ	0xFE1
 12703                           indf2	equ	0xFDF
 12704                           postinc2	equ	0xFDE
 12705                           postdec2	equ	0xFDD
 12706                           fsr2h	equ	0xFDA
 12707                           fsr2l	equ	0xFD9
 12708                           status	equ	0xFD8
 12709                           
 12710 ;; *************** function ___lwmod *****************
 12711 ;; Defined at:
 12712 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 12713 ;; Parameters:    Size  Location     Type
 12714 ;;  dividend        2    7[BANK0 ] unsigned int 
 12715 ;;  divisor         2    9[BANK0 ] unsigned int 
 12716 ;; Auto vars:     Size  Location     Type
 12717 ;;  counter         1   11[BANK0 ] unsigned char 
 12718 ;; Return value:  Size  Location     Type
 12719 ;;                  2    7[BANK0 ] unsigned int 
 12720 ;; Registers used:
 12721 ;;		wreg, status,2, status,0
 12722 ;; Tracked objects:
 12723 ;;		On entry : 0/0
 12724 ;;		On exit  : 0/0
 12725 ;;		Unchanged: 0/0
 12726 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12727 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12728 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12729 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12730 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12731 ;;Total ram usage:        5 bytes
 12732 ;; Hardware stack levels used:    1
 12733 ;; Hardware stack levels required when called:    7
 12734 ;; This function calls:
 12735 ;;		Nothing
 12736 ;; This function is called by:
 12737 ;;		_printf
 12738 ;; This function uses a non-reentrant model
 12739 ;;
 12740                           
 12741                           	psect	text46
 12742  003606                     __ptext46:
 12743                           	opt stack 0
 12744  003606                     ___lwmod:
 12745                           	opt stack 19
 12746                           
 12747                           ; BSR set to: 0
 12748                           ;incstack = 0
 12749  003606  0100               	movlb	0	; () banked
 12750  003608  5189               	movf	___lwmod@divisor& (0+255),w,b
 12751  00360A  0100               	movlb	0	; () banked
 12752  00360C  118A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
 12753  00360E  B4D8               	btfsc	status,2,c
 12754  003610  D026               	goto	l1582
 12755                           
 12756                           ; BSR set to: 0
 12757  003612  0E01               	movlw	1
 12758  003614  0100               	movlb	0	; () banked
 12759  003616  6F8B               	movwf	___lwmod@counter& (0+255),b
 12760  003618  D006               	goto	l4839
 12761  00361A                     l4837:
 12762                           
 12763                           ; BSR set to: 0
 12764  00361A  0100               	movlb	0	; () banked
 12765  00361C  90D8               	bcf	status,0,c
 12766  00361E  3789               	rlcf	___lwmod@divisor& (0+255),f,b
 12767  003620  378A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 12768  003622  0100               	movlb	0	; () banked
 12769  003624  2B8B               	incf	___lwmod@counter& (0+255),f,b
 12770  003626                     l4839:
 12771                           
 12772                           ; BSR set to: 0
 12773  003626  0100               	movlb	0	; () banked
 12774  003628  AF8A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 12775  00362A  D7F7               	goto	l4837
 12776  00362C                     l4841:
 12777                           
 12778                           ; BSR set to: 0
 12779  00362C  0100               	movlb	0	; () banked
 12780  00362E  5189               	movf	___lwmod@divisor& (0+255),w,b
 12781  003630  0100               	movlb	0	; () banked
 12782  003632  5D87               	subwf	___lwmod@dividend& (0+255),w,b
 12783  003634  0100               	movlb	0	; () banked
 12784  003636  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 12785  003638  0100               	movlb	0	; () banked
 12786  00363A  5988               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 12787  00363C  A0D8               	btfss	status,0,c
 12788  00363E  D008               	goto	l4845
 12789                           
 12790                           ; BSR set to: 0
 12791  003640  0100               	movlb	0	; () banked
 12792  003642  5189               	movf	___lwmod@divisor& (0+255),w,b
 12793  003644  0100               	movlb	0	; () banked
 12794  003646  5F87               	subwf	___lwmod@dividend& (0+255),f,b
 12795  003648  0100               	movlb	0	; () banked
 12796  00364A  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 12797  00364C  0100               	movlb	0	; () banked
 12798  00364E  5B88               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 12799  003650                     l4845:
 12800                           
 12801                           ; BSR set to: 0
 12802  003650  0100               	movlb	0	; () banked
 12803  003652  90D8               	bcf	status,0,c
 12804  003654  338A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 12805  003656  3389               	rrcf	___lwmod@divisor& (0+255),f,b
 12806                           
 12807                           ; BSR set to: 0
 12808  003658  0100               	movlb	0	; () banked
 12809  00365A  2F8B               	decfsz	___lwmod@counter& (0+255),f,b
 12810  00365C  D7E7               	goto	l4841
 12811  00365E                     l1582:
 12812                           
 12813                           ; BSR set to: 0
 12814  00365E  C087  F087         	movff	___lwmod@dividend,?___lwmod
 12815  003662  C088  F088         	movff	___lwmod@dividend+1,?___lwmod+1
 12816                           
 12817                           ; BSR set to: 0
 12818  003666  0012               	return		;funcret
 12819  003668                     __end_of___lwmod:
 12820                           	opt stack 0
 12821                           tblptru	equ	0xFF8
 12822                           tblptrh	equ	0xFF7
 12823                           tblptrl	equ	0xFF6
 12824                           tablat	equ	0xFF5
 12825                           prodh	equ	0xFF4
 12826                           prodl	equ	0xFF3
 12827                           intcon	equ	0xFF2
 12828                           intcon2	equ	0xFF1
 12829                           intcon3	equ	0xFF0
 12830                           indf0	equ	0xFEF
 12831                           postinc0	equ	0xFEE
 12832                           fsr0h	equ	0xFEA
 12833                           fsr0l	equ	0xFE9
 12834                           wreg	equ	0xFE8
 12835                           postdec1	equ	0xFE5
 12836                           fsr1l	equ	0xFE1
 12837                           indf2	equ	0xFDF
 12838                           postinc2	equ	0xFDE
 12839                           postdec2	equ	0xFDD
 12840                           fsr2h	equ	0xFDA
 12841                           fsr2l	equ	0xFD9
 12842                           status	equ	0xFD8
 12843                           
 12844 ;; *************** function ___lwdiv *****************
 12845 ;; Defined at:
 12846 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 12847 ;; Parameters:    Size  Location     Type
 12848 ;;  dividend        2    0[BANK0 ] unsigned int 
 12849 ;;  divisor         2    2[BANK0 ] unsigned int 
 12850 ;; Auto vars:     Size  Location     Type
 12851 ;;  quotient        2    4[BANK0 ] unsigned int 
 12852 ;;  counter         1    6[BANK0 ] unsigned char 
 12853 ;; Return value:  Size  Location     Type
 12854 ;;                  2    0[BANK0 ] unsigned int 
 12855 ;; Registers used:
 12856 ;;		wreg, status,2, status,0
 12857 ;; Tracked objects:
 12858 ;;		On entry : 0/0
 12859 ;;		On exit  : 0/0
 12860 ;;		Unchanged: 0/0
 12861 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12862 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12863 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12864 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12865 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12866 ;;Total ram usage:        7 bytes
 12867 ;; Hardware stack levels used:    1
 12868 ;; Hardware stack levels required when called:    7
 12869 ;; This function calls:
 12870 ;;		Nothing
 12871 ;; This function is called by:
 12872 ;;		_printf
 12873 ;; This function uses a non-reentrant model
 12874 ;;
 12875                           
 12876                           	psect	text47
 12877  0033D4                     __ptext47:
 12878                           	opt stack 0
 12879  0033D4                     ___lwdiv:
 12880                           	opt stack 19
 12881                           
 12882                           ; BSR set to: 0
 12883                           ;incstack = 0
 12884  0033D4  0E00               	movlw	0
 12885  0033D6  0100               	movlb	0	; () banked
 12886  0033D8  6F85               	movwf	(___lwdiv@quotient+1)& (0+255),b
 12887  0033DA  0E00               	movlw	0
 12888  0033DC  6F84               	movwf	___lwdiv@quotient& (0+255),b
 12889                           
 12890                           ; BSR set to: 0
 12891  0033DE  0100               	movlb	0	; () banked
 12892  0033E0  5182               	movf	___lwdiv@divisor& (0+255),w,b
 12893  0033E2  0100               	movlb	0	; () banked
 12894  0033E4  1183               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
 12895  0033E6  B4D8               	btfsc	status,2,c
 12896  0033E8  D02C               	goto	l1572
 12897                           
 12898                           ; BSR set to: 0
 12899  0033EA  0E01               	movlw	1
 12900  0033EC  0100               	movlb	0	; () banked
 12901  0033EE  6F86               	movwf	___lwdiv@counter& (0+255),b
 12902  0033F0  D006               	goto	l4819
 12903  0033F2                     l4817:
 12904                           
 12905                           ; BSR set to: 0
 12906  0033F2  0100               	movlb	0	; () banked
 12907  0033F4  90D8               	bcf	status,0,c
 12908  0033F6  3782               	rlcf	___lwdiv@divisor& (0+255),f,b
 12909  0033F8  3783               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 12910  0033FA  0100               	movlb	0	; () banked
 12911  0033FC  2B86               	incf	___lwdiv@counter& (0+255),f,b
 12912  0033FE                     l4819:
 12913                           
 12914                           ; BSR set to: 0
 12915  0033FE  0100               	movlb	0	; () banked
 12916  003400  AF83               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 12917  003402  D7F7               	goto	l4817
 12918  003404                     l4821:
 12919                           
 12920                           ; BSR set to: 0
 12921  003404  0100               	movlb	0	; () banked
 12922  003406  90D8               	bcf	status,0,c
 12923  003408  3784               	rlcf	___lwdiv@quotient& (0+255),f,b
 12924  00340A  3785               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 12925                           
 12926                           ; BSR set to: 0
 12927  00340C  0100               	movlb	0	; () banked
 12928  00340E  5182               	movf	___lwdiv@divisor& (0+255),w,b
 12929  003410  0100               	movlb	0	; () banked
 12930  003412  5D80               	subwf	___lwdiv@dividend& (0+255),w,b
 12931  003414  0100               	movlb	0	; () banked
 12932  003416  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 12933  003418  0100               	movlb	0	; () banked
 12934  00341A  5981               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 12935  00341C  A0D8               	btfss	status,0,c
 12936  00341E  D00A               	goto	l4829
 12937                           
 12938                           ; BSR set to: 0
 12939  003420  0100               	movlb	0	; () banked
 12940  003422  5182               	movf	___lwdiv@divisor& (0+255),w,b
 12941  003424  0100               	movlb	0	; () banked
 12942  003426  5F80               	subwf	___lwdiv@dividend& (0+255),f,b
 12943  003428  0100               	movlb	0	; () banked
 12944  00342A  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 12945  00342C  0100               	movlb	0	; () banked
 12946  00342E  5B81               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 12947                           
 12948                           ; BSR set to: 0
 12949  003430  0100               	movlb	0	; () banked
 12950  003432  8184               	bsf	___lwdiv@quotient& (0+255),0,b
 12951  003434                     l4829:
 12952                           
 12953                           ; BSR set to: 0
 12954  003434  0100               	movlb	0	; () banked
 12955  003436  90D8               	bcf	status,0,c
 12956  003438  3383               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 12957  00343A  3382               	rrcf	___lwdiv@divisor& (0+255),f,b
 12958                           
 12959                           ; BSR set to: 0
 12960  00343C  0100               	movlb	0	; () banked
 12961  00343E  2F86               	decfsz	___lwdiv@counter& (0+255),f,b
 12962  003440  D7E1               	goto	l4821
 12963  003442                     l1572:
 12964                           
 12965                           ; BSR set to: 0
 12966  003442  C084  F080         	movff	___lwdiv@quotient,?___lwdiv
 12967  003446  C085  F081         	movff	___lwdiv@quotient+1,?___lwdiv+1
 12968                           
 12969                           ; BSR set to: 0
 12970  00344A  0012               	return		;funcret
 12971  00344C                     __end_of___lwdiv:
 12972                           	opt stack 0
 12973                           tblptru	equ	0xFF8
 12974                           tblptrh	equ	0xFF7
 12975                           tblptrl	equ	0xFF6
 12976                           tablat	equ	0xFF5
 12977                           prodh	equ	0xFF4
 12978                           prodl	equ	0xFF3
 12979                           intcon	equ	0xFF2
 12980                           intcon2	equ	0xFF1
 12981                           intcon3	equ	0xFF0
 12982                           indf0	equ	0xFEF
 12983                           postinc0	equ	0xFEE
 12984                           fsr0h	equ	0xFEA
 12985                           fsr0l	equ	0xFE9
 12986                           wreg	equ	0xFE8
 12987                           postdec1	equ	0xFE5
 12988                           fsr1l	equ	0xFE1
 12989                           indf2	equ	0xFDF
 12990                           postinc2	equ	0xFDE
 12991                           postdec2	equ	0xFDD
 12992                           fsr2h	equ	0xFDA
 12993                           fsr2l	equ	0xFD9
 12994                           status	equ	0xFD8
 12995                           
 12996 ;; *************** function _lcdInst *****************
 12997 ;; Defined at:
 12998 ;;		line 15 in file "lcd.c"
 12999 ;; Parameters:    Size  Location     Type
 13000 ;;  data            1    wreg     unsigned char 
 13001 ;; Auto vars:     Size  Location     Type
 13002 ;;  data            1    2[BANK0 ] unsigned char 
 13003 ;; Return value:  Size  Location     Type
 13004 ;;                  1    wreg      void 
 13005 ;; Registers used:
 13006 ;;		wreg, status,2, status,0, cstack
 13007 ;; Tracked objects:
 13008 ;;		On entry : 0/0
 13009 ;;		On exit  : 0/0
 13010 ;;		Unchanged: 0/0
 13011 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13012 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13013 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13014 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13015 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13016 ;;Total ram usage:        1 bytes
 13017 ;; Hardware stack levels used:    1
 13018 ;; Hardware stack levels required when called:    8
 13019 ;; This function calls:
 13020 ;;		_lcdNibble
 13021 ;; This function is called by:
 13022 ;;		_UI
 13023 ;;		_change_state_to_menu_start
 13024 ;;		_change_state_to_menu_12
 13025 ;;		_change_state_to_menu_22
 13026 ;;		_initLCD
 13027 ;;		_printRTC
 13028 ;;		_Loading
 13029 ;;		_EEPROM_write
 13030 ;;		_Test
 13031 ;;		_algorithmTest
 13032 ;;		_sensorTest
 13033 ;;		_actuatorTest
 13034 ;; This function uses a non-reentrant model
 13035 ;;
 13036                           
 13037                           	psect	text48
 13038  003F24                     __ptext48:
 13039                           	opt stack 0
 13040  003F24                     _lcdInst:
 13041                           	opt stack 20
 13042                           
 13043                           ; BSR set to: 0
 13044                           ;incstack = 0
 13045                           ;lcdInst@data stored from wreg
 13046  003F24  0100               	movlb	0	; () banked
 13047  003F26  6F82               	movwf	lcdInst@data& (0+255),b
 13048                           
 13049                           ;lcd.c: 16: LATDbits.LATD2 = 0;
 13050  003F28  948C               	bcf	3980,2,c	;volatile
 13051                           
 13052                           ;lcd.c: 17: lcdNibble(data);
 13053  003F2A  0100               	movlb	0	; () banked
 13054  003F2C  5182               	movf	lcdInst@data& (0+255),w,b
 13055  003F2E  ECCF  F01A         	call	_lcdNibble
 13056  003F32  0012               	return		;funcret
 13057  003F34                     __end_of_lcdInst:
 13058                           	opt stack 0
 13059                           tblptru	equ	0xFF8
 13060                           tblptrh	equ	0xFF7
 13061                           tblptrl	equ	0xFF6
 13062                           tablat	equ	0xFF5
 13063                           prodh	equ	0xFF4
 13064                           prodl	equ	0xFF3
 13065                           intcon	equ	0xFF2
 13066                           intcon2	equ	0xFF1
 13067                           intcon3	equ	0xFF0
 13068                           indf0	equ	0xFEF
 13069                           postinc0	equ	0xFEE
 13070                           fsr0h	equ	0xFEA
 13071                           fsr0l	equ	0xFE9
 13072                           wreg	equ	0xFE8
 13073                           postdec1	equ	0xFE5
 13074                           fsr1l	equ	0xFE1
 13075                           indf2	equ	0xFDF
 13076                           postinc2	equ	0xFDE
 13077                           postdec2	equ	0xFDD
 13078                           fsr2h	equ	0xFDA
 13079                           fsr2l	equ	0xFD9
 13080                           status	equ	0xFD8
 13081                           
 13082 ;; *************** function _lcdNibble *****************
 13083 ;; Defined at:
 13084 ;;		line 25 in file "lcd.c"
 13085 ;; Parameters:    Size  Location     Type
 13086 ;;  data            1    wreg     unsigned char 
 13087 ;; Auto vars:     Size  Location     Type
 13088 ;;  data            1    1[BANK0 ] unsigned char 
 13089 ;;  temp            1    0[BANK0 ] unsigned char 
 13090 ;; Return value:  Size  Location     Type
 13091 ;;                  1    wreg      void 
 13092 ;; Registers used:
 13093 ;;		wreg, status,2, status,0
 13094 ;; Tracked objects:
 13095 ;;		On entry : 0/0
 13096 ;;		On exit  : 0/0
 13097 ;;		Unchanged: 0/0
 13098 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13099 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13100 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13101 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13102 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13103 ;;Total ram usage:        2 bytes
 13104 ;; Hardware stack levels used:    1
 13105 ;; Hardware stack levels required when called:    7
 13106 ;; This function calls:
 13107 ;;		Nothing
 13108 ;; This function is called by:
 13109 ;;		_lcdInst
 13110 ;;		_putch
 13111 ;; This function uses a non-reentrant model
 13112 ;;
 13113                           
 13114                           	psect	text49
 13115  00359E                     __ptext49:
 13116                           	opt stack 0
 13117  00359E                     _lcdNibble:
 13118                           	opt stack 20
 13119                           
 13120                           ;incstack = 0
 13121                           ;lcdNibble@data stored from wreg
 13122  00359E  0100               	movlb	0	; () banked
 13123  0035A0  6F81               	movwf	lcdNibble@data& (0+255),b
 13124                           
 13125                           ;lcd.c: 27: char temp = data & 0xF0;
 13126  0035A2  0100               	movlb	0	; () banked
 13127  0035A4  5181               	movf	lcdNibble@data& (0+255),w,b
 13128  0035A6  0BF0               	andlw	240
 13129  0035A8  0100               	movlb	0	; () banked
 13130  0035AA  6F80               	movwf	lcdNibble@temp& (0+255),b
 13131                           
 13132                           ;lcd.c: 28: LATD = LATD & 0x0F;
 13133  0035AC  508C               	movf	3980,w,c	;volatile
 13134  0035AE  0B0F               	andlw	15
 13135  0035B0  6E8C               	movwf	3980,c	;volatile
 13136                           
 13137                           ;lcd.c: 29: LATD = temp | LATD;
 13138  0035B2  0100               	movlb	0	; () banked
 13139  0035B4  5180               	movf	lcdNibble@temp& (0+255),w,b
 13140  0035B6  108C               	iorwf	3980,w,c	;volatile
 13141  0035B8  6E8C               	movwf	3980,c	;volatile
 13142                           
 13143                           ; BSR set to: 0
 13144                           ;lcd.c: 31: LATDbits.LATD3 = 1;
 13145  0035BA  868C               	bsf	3980,3,c	;volatile
 13146                           
 13147                           ; BSR set to: 0
 13148                           ;lcd.c: 32: _delay((unsigned long)((25)*(32000000/4000000.0)));
 13149  0035BC  0E42               	movlw	66
 13150  0035BE                     u7257:
 13151  0035BE  2EE8               	decfsz	wreg,f,c
 13152  0035C0  D7FE               	bra	u7257
 13153  0035C2  D000               	nop2	
 13154                           
 13155                           ;lcd.c: 33: LATDbits.LATD3 = 0;
 13156  0035C4  968C               	bcf	3980,3,c	;volatile
 13157                           
 13158                           ;lcd.c: 34: _delay((unsigned long)((25)*(32000000/4000000.0)));
 13159  0035C6  0E42               	movlw	66
 13160  0035C8                     u7267:
 13161  0035C8  2EE8               	decfsz	wreg,f,c
 13162  0035CA  D7FE               	bra	u7267
 13163  0035CC  D000               	nop2	
 13164                           
 13165                           ;lcd.c: 36: data = data << 4;
 13166  0035CE  0100               	movlb	0	; () banked
 13167  0035D0  3981               	swapf	lcdNibble@data& (0+255),w,b
 13168  0035D2  0BF0               	andlw	240
 13169  0035D4  0100               	movlb	0	; () banked
 13170  0035D6  6F81               	movwf	lcdNibble@data& (0+255),b
 13171                           
 13172                           ;lcd.c: 38: temp = data & 0xF0;
 13173  0035D8  0100               	movlb	0	; () banked
 13174  0035DA  5181               	movf	lcdNibble@data& (0+255),w,b
 13175  0035DC  0BF0               	andlw	240
 13176  0035DE  0100               	movlb	0	; () banked
 13177  0035E0  6F80               	movwf	lcdNibble@temp& (0+255),b
 13178                           
 13179                           ;lcd.c: 39: LATD = LATD & 0x0F;
 13180  0035E2  508C               	movf	3980,w,c	;volatile
 13181  0035E4  0B0F               	andlw	15
 13182  0035E6  6E8C               	movwf	3980,c	;volatile
 13183                           
 13184                           ;lcd.c: 40: LATD = temp | LATD;
 13185  0035E8  0100               	movlb	0	; () banked
 13186  0035EA  5180               	movf	lcdNibble@temp& (0+255),w,b
 13187  0035EC  108C               	iorwf	3980,w,c	;volatile
 13188  0035EE  6E8C               	movwf	3980,c	;volatile
 13189                           
 13190                           ; BSR set to: 0
 13191                           ;lcd.c: 42: LATDbits.LATD3 = 1;
 13192  0035F0  868C               	bsf	3980,3,c	;volatile
 13193                           
 13194                           ; BSR set to: 0
 13195                           ;lcd.c: 43: _delay((unsigned long)((25)*(32000000/4000000.0)));
 13196  0035F2  0E42               	movlw	66
 13197  0035F4                     u7277:
 13198  0035F4  2EE8               	decfsz	wreg,f,c
 13199  0035F6  D7FE               	bra	u7277
 13200  0035F8  D000               	nop2	
 13201                           
 13202                           ;lcd.c: 44: LATDbits.LATD3 = 0;
 13203  0035FA  968C               	bcf	3980,3,c	;volatile
 13204                           
 13205                           ;lcd.c: 45: _delay((unsigned long)((25)*(32000000/4000000.0)));
 13206  0035FC  0E42               	movlw	66
 13207  0035FE                     u7287:
 13208  0035FE  2EE8               	decfsz	wreg,f,c
 13209  003600  D7FE               	bra	u7287
 13210  003602  D000               	nop2	
 13211  003604  0012               	return		;funcret
 13212  003606                     __end_of_lcdNibble:
 13213                           	opt stack 0
 13214                           tblptru	equ	0xFF8
 13215                           tblptrh	equ	0xFF7
 13216                           tblptrl	equ	0xFF6
 13217                           tablat	equ	0xFF5
 13218                           prodh	equ	0xFF4
 13219                           prodl	equ	0xFF3
 13220                           intcon	equ	0xFF2
 13221                           intcon2	equ	0xFF1
 13222                           intcon3	equ	0xFF0
 13223                           indf0	equ	0xFEF
 13224                           postinc0	equ	0xFEE
 13225                           fsr0h	equ	0xFEA
 13226                           fsr0l	equ	0xFE9
 13227                           wreg	equ	0xFE8
 13228                           postdec1	equ	0xFE5
 13229                           fsr1l	equ	0xFE1
 13230                           indf2	equ	0xFDF
 13231                           postinc2	equ	0xFDE
 13232                           postdec2	equ	0xFDD
 13233                           fsr2h	equ	0xFDA
 13234                           fsr2l	equ	0xFD9
 13235                           status	equ	0xFD8
 13236                           
 13237 ;; *************** function _PortTestA5 *****************
 13238 ;; Defined at:
 13239 ;;		line 277 in file "Test.c"
 13240 ;; Parameters:    Size  Location     Type
 13241 ;;		None
 13242 ;; Auto vars:     Size  Location     Type
 13243 ;;		None
 13244 ;; Return value:  Size  Location     Type
 13245 ;;                  1    wreg      void 
 13246 ;; Registers used:
 13247 ;;		None
 13248 ;; Tracked objects:
 13249 ;;		On entry : 0/0
 13250 ;;		On exit  : 0/0
 13251 ;;		Unchanged: 0/0
 13252 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13253 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13254 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13255 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13256 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13257 ;;Total ram usage:        0 bytes
 13258 ;; Hardware stack levels used:    1
 13259 ;; Hardware stack levels required when called:    7
 13260 ;; This function calls:
 13261 ;;		Nothing
 13262 ;; This function is called by:
 13263 ;;		_Test
 13264 ;; This function uses a non-reentrant model
 13265 ;;
 13266                           
 13267                           	psect	text50
 13268  003EF0                     __ptext50:
 13269                           	opt stack 0
 13270  003EF0                     _PortTestA5:
 13271                           	opt stack 22
 13272  003EF0                     l1087:
 13273  003EF0  A281               	btfss	3969,1,c	;volatile
 13274  003EF2  D7FE               	goto	l1087
 13275                           
 13276                           ;Test.c: 283: }
 13277                           ;Test.c: 284: LATAbits.LATA5 = 1;
 13278  003EF4  8A89               	bsf	3977,5,c	;volatile
 13279  003EF6                     l1090:
 13280  003EF6  B281               	btfsc	3969,1,c	;volatile
 13281  003EF8  D7FE               	goto	l1090
 13282                           
 13283                           ;Test.c: 287: }
 13284                           ;Test.c: 288: __nop();
 13285  003EFA  F000               	nop	
 13286                           
 13287                           ;Test.c: 289: __nop();
 13288  003EFC  F000               	nop	
 13289                           
 13290                           ;Test.c: 290: LATAbits.LATA5 = 0;
 13291  003EFE  9A89               	bcf	3977,5,c	;volatile
 13292  003F00  D7F7               	goto	l1087
 13293  003F02                     __end_of_PortTestA5:
 13294                           	opt stack 0
 13295                           tblptru	equ	0xFF8
 13296                           tblptrh	equ	0xFF7
 13297                           tblptrl	equ	0xFF6
 13298                           tablat	equ	0xFF5
 13299                           prodh	equ	0xFF4
 13300                           prodl	equ	0xFF3
 13301                           intcon	equ	0xFF2
 13302                           intcon2	equ	0xFF1
 13303                           intcon3	equ	0xFF0
 13304                           indf0	equ	0xFEF
 13305                           postinc0	equ	0xFEE
 13306                           fsr0h	equ	0xFEA
 13307                           fsr0l	equ	0xFE9
 13308                           wreg	equ	0xFE8
 13309                           postdec1	equ	0xFE5
 13310                           fsr1l	equ	0xFE1
 13311                           indf2	equ	0xFDF
 13312                           postinc2	equ	0xFDE
 13313                           postdec2	equ	0xFDD
 13314                           fsr2h	equ	0xFDA
 13315                           fsr2l	equ	0xFD9
 13316                           status	equ	0xFD8
 13317                           
 13318 ;; *************** function _handler *****************
 13319 ;; Defined at:
 13320 ;;		line 16 in file "interruptHandler.c"
 13321 ;; Parameters:    Size  Location     Type
 13322 ;;		None
 13323 ;; Auto vars:     Size  Location     Type
 13324 ;;		None
 13325 ;; Return value:  Size  Location     Type
 13326 ;;                  1    wreg      void 
 13327 ;; Registers used:
 13328 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13329 ;; Tracked objects:
 13330 ;;		On entry : 0/0
 13331 ;;		On exit  : 0/0
 13332 ;;		Unchanged: 0/0
 13333 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13334 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13335 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13336 ;;      Temps:         16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13337 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13338 ;;Total ram usage:       16 bytes
 13339 ;; Hardware stack levels used:    1
 13340 ;; Hardware stack levels required when called:    6
 13341 ;; This function calls:
 13342 ;;		_printSortTimer
 13343 ;;		_updateMenu
 13344 ;; This function is called by:
 13345 ;;		Interrupt level 2
 13346 ;; This function uses a non-reentrant model
 13347 ;;
 13348                           
 13349                           	psect	intcode
 13350  000008                     __pintcode:
 13351                           	opt stack 0
 13352  000008                     _handler:
 13353                           	opt stack 18
 13354                           
 13355                           ;incstack = 0
 13356  000008  827E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 13357  00000A  EDF8  F012         	call	int_func,f	;refresh shadow registers
 13358                           tblptru	equ	0xFF8
 13359                           tblptrh	equ	0xFF7
 13360                           tblptrl	equ	0xFF6
 13361                           tablat	equ	0xFF5
 13362                           prodh	equ	0xFF4
 13363                           prodl	equ	0xFF3
 13364                           intcon	equ	0xFF2
 13365                           intcon2	equ	0xFF1
 13366                           intcon3	equ	0xFF0
 13367                           indf0	equ	0xFEF
 13368                           postinc0	equ	0xFEE
 13369                           fsr0h	equ	0xFEA
 13370                           fsr0l	equ	0xFE9
 13371                           wreg	equ	0xFE8
 13372                           postdec1	equ	0xFE5
 13373                           fsr1l	equ	0xFE1
 13374                           indf2	equ	0xFDF
 13375                           postinc2	equ	0xFDE
 13376                           postdec2	equ	0xFDD
 13377                           fsr2h	equ	0xFDA
 13378                           fsr2l	equ	0xFD9
 13379                           status	equ	0xFD8
 13380                           
 13381                           	psect	intcode_body
 13382  0025F0                     __pintcode_body:
 13383                           	opt stack 18
 13384  0025F0                     int_func:
 13385                           	opt stack 18
 13386  0025F0  0006               	pop		; remove dummy address from shadow register refresh
 13387  0025F2  CFFA F04D          	movff	pclath,??_handler+2
 13388  0025F6  CFFB F04E          	movff	pclatu,??_handler+3
 13389  0025FA  CFE9 F04F          	movff	fsr0l,??_handler+4
 13390  0025FE  CFEA F050          	movff	fsr0h,??_handler+5
 13391  002602  CFE1 F051          	movff	fsr1l,??_handler+6
 13392  002606  CFE2 F052          	movff	fsr1h,??_handler+7
 13393  00260A  CFD9 F053          	movff	fsr2l,??_handler+8
 13394  00260E  CFDA F054          	movff	fsr2h,??_handler+9
 13395  002612  CFF3 F055          	movff	prodl,??_handler+10
 13396  002616  CFF4 F056          	movff	prodh,??_handler+11
 13397  00261A  CFF6 F057          	movff	tblptrl,??_handler+12
 13398  00261E  CFF7 F058          	movff	tblptrh,??_handler+13
 13399  002622  CFF8 F059          	movff	tblptru,??_handler+14
 13400  002626  CFF5 F05A          	movff	tablat,??_handler+15
 13401                           
 13402                           ;interruptHandler.c: 18: if(INT1IF){
 13403  00262A  A0F0               	btfss	intcon3,0,c	;volatile
 13404  00262C  D018               	goto	i2l7347
 13405                           
 13406                           ;interruptHandler.c: 19: INT1IF = 0;
 13407  00262E  90F0               	bcf	intcon3,0,c	;volatile
 13408                           
 13409                           ;interruptHandler.c: 20: if(machine_state == UI_state) {
 13410  002630  0100               	movlb	0	; () banked
 13411  002632  51FC               	movf	_machine_state& (0+255),w,b
 13412  002634  A4D8               	btfss	status,2,c
 13413  002636  D013               	goto	i2l7347
 13414                           
 13415                           ; BSR set to: 0
 13416                           ;interruptHandler.c: 21: input = keys[(PORTB & 0xF0) >> 4];
 13417  002638  3881               	swapf	3969,w,c	;volatile
 13418  00263A  0B0F               	andlw	15
 13419  00263C  0B0F               	andlw	15
 13420  00263E  6E4B               	movwf	??_handler& (0+255),c
 13421  002640  6A4C               	clrf	(??_handler+1)& (0+255),c
 13422  002642  0EA3               	movlw	low _keys
 13423  002644  244B               	addwf	??_handler,w,c
 13424  002646  6EF6               	movwf	tblptrl,c
 13425  002648  0EFB               	movlw	high _keys
 13426  00264A  204C               	addwfc	??_handler+1,w,c
 13427  00264C  6EF7               	movwf	tblptrh,c
 13428  00264E                     	if	1	;There are 3 active tblptr bytes
 13429  00264E  6AF8               	clrf	tblptru,c
 13430  002650  0E00               	movlw	low (__mediumconst shr (0+16))
 13431  002652  22F8               	addwfc	tblptru,f,c
 13432  002654                     	endif
 13433  002654  0008               	tblrd		*
 13434  002656  CFF5 F07D          	movff	tablat,_input	;volatile
 13435                           
 13436                           ; BSR set to: 0
 13437                           ;interruptHandler.c: 22: updateMenu();
 13438  00265A  ECCB  F00D         	call	_updateMenu	;wreg free
 13439  00265E                     i2l7347:
 13440                           
 13441                           ;interruptHandler.c: 23: }
 13442                           ;interruptHandler.c: 24: }
 13443                           ;interruptHandler.c: 27: if(TMR0IF){
 13444  00265E  A4F2               	btfss	intcon,2,c	;volatile
 13445  002660  D00C               	goto	i2l7361
 13446                           
 13447                           ;interruptHandler.c: 28: TMR0IF = 0;
 13448  002662  94F2               	bcf	intcon,2,c	;volatile
 13449                           
 13450                           ;interruptHandler.c: 29: if(machine_state == Sorting_state){
 13451  002664  0100               	movlb	0	; () banked
 13452  002666  05FC               	decf	_machine_state& (0+255),w,b
 13453  002668  A4D8               	btfss	status,2,c
 13454  00266A  D007               	goto	i2l7361
 13455                           
 13456                           ; BSR set to: 0
 13457                           ;interruptHandler.c: 30: printSortTimer();
 13458  00266C  EC46  F010         	call	_printSortTimer	;wreg free
 13459                           
 13460                           ;interruptHandler.c: 32: TMR0H = 0b10000101;
 13461  002670  0E85               	movlw	133
 13462  002672  6ED7               	movwf	4055,c	;volatile
 13463                           
 13464                           ;interruptHandler.c: 33: TMR0L = 0b11101110;
 13465  002674  0EEE               	movlw	238
 13466  002676  6ED6               	movwf	4054,c	;volatile
 13467                           
 13468                           ;interruptHandler.c: 34: TMR0ON = 1;
 13469  002678  8ED5               	bsf	4053,7,c	;volatile
 13470  00267A                     i2l7361:
 13471                           
 13472                           ;interruptHandler.c: 35: }
 13473                           ;interruptHandler.c: 36: }
 13474                           ;interruptHandler.c: 39: if(TMR1IF){
 13475  00267A  A09E               	btfss	3998,0,c	;volatile
 13476  00267C  D024               	goto	i2l7385
 13477                           
 13478                           ;interruptHandler.c: 40: TMR1IF = 0;
 13479  00267E  909E               	bcf	3998,0,c	;volatile
 13480                           
 13481                           ;interruptHandler.c: 41: TMR1ON = 0;
 13482  002680  90CD               	bcf	4045,0,c	;volatile
 13483                           
 13484                           ;interruptHandler.c: 42: if(machine_state == Sorting_state){
 13485  002682  0100               	movlb	0	; () banked
 13486  002684  05FC               	decf	_machine_state& (0+255),w,b
 13487  002686  A4D8               	btfss	status,2,c
 13488  002688  D01E               	goto	i2l7385
 13489                           
 13490                           ; BSR set to: 0
 13491                           ;interruptHandler.c: 43: if(was_low_1){
 13492  00268A  5079               	movf	_was_low_1,w,c	;volatile
 13493  00268C  107A               	iorwf	_was_low_1+1,w,c	;volatile
 13494  00268E  B4D8               	btfsc	status,2,c
 13495  002690  D00A               	goto	i2l829
 13496                           
 13497                           ; BSR set to: 0
 13498                           ;interruptHandler.c: 44: LATCbits.LATC1 = 1;
 13499  002692  828B               	bsf	3979,1,c	;volatile
 13500                           
 13501                           ; BSR set to: 0
 13502                           ;interruptHandler.c: 45: was_low_1 = 0;
 13503  002694  0E00               	movlw	0
 13504  002696  6E7A               	movwf	_was_low_1+1,c	;volatile
 13505  002698  0E00               	movlw	0
 13506  00269A  6E79               	movwf	_was_low_1,c	;volatile
 13507                           
 13508                           ; BSR set to: 0
 13509                           ;interruptHandler.c: 46: TMR1H = servoTimes[0];
 13510  00269C  C11C  FFCF         	movff	_servoTimes,4047	;volatile
 13511                           
 13512                           ; BSR set to: 0
 13513                           ;interruptHandler.c: 47: TMR1L = servoTimes[1];
 13514  0026A0  C11E  FFCE         	movff	_servoTimes+2,4046	;volatile
 13515                           
 13516                           ;interruptHandler.c: 48: }
 13517  0026A4  D00F               	goto	i2l7383
 13518  0026A6                     i2l829:
 13519                           
 13520                           ; BSR set to: 0
 13521                           ;interruptHandler.c: 49: else{
 13522                           ;interruptHandler.c: 50: LATCbits.LATC1 = 0;
 13523  0026A6  928B               	bcf	3979,1,c	;volatile
 13524                           
 13525                           ; BSR set to: 0
 13526                           ;interruptHandler.c: 51: was_low_1 = 1;
 13527  0026A8  0E00               	movlw	0
 13528  0026AA  6E7A               	movwf	_was_low_1+1,c	;volatile
 13529  0026AC  0E01               	movlw	1
 13530  0026AE  6E79               	movwf	_was_low_1,c	;volatile
 13531                           
 13532                           ; BSR set to: 0
 13533                           ;interruptHandler.c: 52: TMR1H = 20000 - servoTimes[0];
 13534  0026B0  0101               	movlb	1	; () banked
 13535  0026B2  511C               	movf	_servoTimes& (0+255),w,b
 13536  0026B4  0800               	sublw	0
 13537  0026B6  0F20               	addlw	32
 13538  0026B8  6ECF               	movwf	4047,c	;volatile
 13539                           
 13540                           ; BSR set to: 1
 13541                           ;interruptHandler.c: 53: TMR1L = 20000 - servoTimes[1];
 13542  0026BA  0101               	movlb	1	; () banked
 13543  0026BC  511E               	movf	(_servoTimes+2)& (0+255),w,b
 13544  0026BE  0800               	sublw	0
 13545  0026C0  0F20               	addlw	32
 13546  0026C2  6ECE               	movwf	4046,c	;volatile
 13547  0026C4                     i2l7383:
 13548                           
 13549                           ;interruptHandler.c: 54: }
 13550                           ;interruptHandler.c: 55: TMR1ON = 1;
 13551  0026C4  80CD               	bsf	4045,0,c	;volatile
 13552  0026C6                     i2l7385:
 13553                           
 13554                           ;interruptHandler.c: 56: }
 13555                           ;interruptHandler.c: 57: }
 13556                           ;interruptHandler.c: 59: if(TMR3IF){
 13557  0026C6  A2A1               	btfss	4001,1,c	;volatile
 13558  0026C8  D024               	goto	i2l835
 13559                           
 13560                           ;interruptHandler.c: 60: TMR3IF = 0;
 13561  0026CA  92A1               	bcf	4001,1,c	;volatile
 13562                           
 13563                           ;interruptHandler.c: 61: TMR3ON = 0;
 13564  0026CC  90B1               	bcf	4017,0,c	;volatile
 13565                           
 13566                           ;interruptHandler.c: 62: if(machine_state == Sorting_state){
 13567  0026CE  0100               	movlb	0	; () banked
 13568  0026D0  05FC               	decf	_machine_state& (0+255),w,b
 13569  0026D2  A4D8               	btfss	status,2,c
 13570  0026D4  D01E               	goto	i2l835
 13571                           
 13572                           ; BSR set to: 0
 13573                           ;interruptHandler.c: 63: if(was_low_3){
 13574  0026D6  507B               	movf	_was_low_3,w,c	;volatile
 13575  0026D8  107C               	iorwf	_was_low_3+1,w,c	;volatile
 13576  0026DA  B4D8               	btfsc	status,2,c
 13577  0026DC  D00A               	goto	i2l833
 13578                           
 13579                           ; BSR set to: 0
 13580                           ;interruptHandler.c: 64: LATCbits.LATC2 = 1;
 13581  0026DE  848B               	bsf	3979,2,c	;volatile
 13582                           
 13583                           ; BSR set to: 0
 13584                           ;interruptHandler.c: 65: was_low_3 = 0;
 13585  0026E0  0E00               	movlw	0
 13586  0026E2  6E7C               	movwf	_was_low_3+1,c	;volatile
 13587  0026E4  0E00               	movlw	0
 13588  0026E6  6E7B               	movwf	_was_low_3,c	;volatile
 13589                           
 13590                           ; BSR set to: 0
 13591                           ;interruptHandler.c: 66: TMR3H = servoTimes[2];
 13592  0026E8  C120  FFB3         	movff	_servoTimes+4,4019	;volatile
 13593                           
 13594                           ; BSR set to: 0
 13595                           ;interruptHandler.c: 67: TMR3L = servoTimes[3];
 13596  0026EC  C122  FFB2         	movff	_servoTimes+6,4018	;volatile
 13597                           
 13598                           ;interruptHandler.c: 68: }
 13599  0026F0  D00F               	goto	i2l7407
 13600  0026F2                     i2l833:
 13601                           
 13602                           ; BSR set to: 0
 13603                           ;interruptHandler.c: 69: else{
 13604                           ;interruptHandler.c: 70: LATCbits.LATC2 = 0;
 13605  0026F2  948B               	bcf	3979,2,c	;volatile
 13606                           
 13607                           ; BSR set to: 0
 13608                           ;interruptHandler.c: 71: was_low_3 = 1;
 13609  0026F4  0E00               	movlw	0
 13610  0026F6  6E7C               	movwf	_was_low_3+1,c	;volatile
 13611  0026F8  0E01               	movlw	1
 13612  0026FA  6E7B               	movwf	_was_low_3,c	;volatile
 13613                           
 13614                           ; BSR set to: 0
 13615                           ;interruptHandler.c: 72: TMR3H = 20000 - servoTimes[2];
 13616  0026FC  0101               	movlb	1	; () banked
 13617  0026FE  5120               	movf	(_servoTimes+4)& (0+255),w,b
 13618  002700  0800               	sublw	0
 13619  002702  0F20               	addlw	32
 13620  002704  6EB3               	movwf	4019,c	;volatile
 13621                           
 13622                           ; BSR set to: 1
 13623                           ;interruptHandler.c: 73: TMR3L = 20000 - servoTimes[3];
 13624  002706  0101               	movlb	1	; () banked
 13625  002708  5122               	movf	(_servoTimes+6)& (0+255),w,b
 13626  00270A  0800               	sublw	0
 13627  00270C  0F20               	addlw	32
 13628  00270E  6EB2               	movwf	4018,c	;volatile
 13629  002710                     i2l7407:
 13630                           
 13631                           ;interruptHandler.c: 74: }
 13632                           ;interruptHandler.c: 75: TMR3ON = 1;
 13633  002710  80B1               	bsf	4017,0,c	;volatile
 13634  002712                     i2l835:
 13635  002712  C05A  FFF5         	movff	??_handler+15,tablat
 13636  002716  C059  FFF8         	movff	??_handler+14,tblptru
 13637  00271A  C058  FFF7         	movff	??_handler+13,tblptrh
 13638  00271E  C057  FFF6         	movff	??_handler+12,tblptrl
 13639  002722  C056  FFF4         	movff	??_handler+11,prodh
 13640  002726  C055  FFF3         	movff	??_handler+10,prodl
 13641  00272A  C054  FFDA         	movff	??_handler+9,fsr2h
 13642  00272E  C053  FFD9         	movff	??_handler+8,fsr2l
 13643  002732  C052  FFE2         	movff	??_handler+7,fsr1h
 13644  002736  C051  FFE1         	movff	??_handler+6,fsr1l
 13645  00273A  C050  FFEA         	movff	??_handler+5,fsr0h
 13646  00273E  C04F  FFE9         	movff	??_handler+4,fsr0l
 13647  002742  C04E  FFFB         	movff	??_handler+3,pclatu
 13648  002746  C04D  FFFA         	movff	??_handler+2,pclath
 13649  00274A  927E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 13650  00274C  0011               	retfie		f
 13651  00274E                     __end_of_handler:
 13652                           	opt stack 0
 13653                           pclatu	equ	0xFFB
 13654                           pclath	equ	0xFFA
 13655                           tblptru	equ	0xFF8
 13656                           tblptrh	equ	0xFF7
 13657                           tblptrl	equ	0xFF6
 13658                           tablat	equ	0xFF5
 13659                           prodh	equ	0xFF4
 13660                           prodl	equ	0xFF3
 13661                           intcon	equ	0xFF2
 13662                           intcon2	equ	0xFF1
 13663                           intcon3	equ	0xFF0
 13664                           indf0	equ	0xFEF
 13665                           postinc0	equ	0xFEE
 13666                           fsr0h	equ	0xFEA
 13667                           fsr0l	equ	0xFE9
 13668                           wreg	equ	0xFE8
 13669                           postdec1	equ	0xFE5
 13670                           fsr1h	equ	0xFE2
 13671                           fsr1l	equ	0xFE1
 13672                           indf2	equ	0xFDF
 13673                           postinc2	equ	0xFDE
 13674                           postdec2	equ	0xFDD
 13675                           fsr2h	equ	0xFDA
 13676                           fsr2l	equ	0xFD9
 13677                           status	equ	0xFD8
 13678                           
 13679 ;; *************** function _updateMenu *****************
 13680 ;; Defined at:
 13681 ;;		line 211 in file "UI.c"
 13682 ;; Parameters:    Size  Location     Type
 13683 ;;		None
 13684 ;; Auto vars:     Size  Location     Type
 13685 ;;		None
 13686 ;; Return value:  Size  Location     Type
 13687 ;;                  1    wreg      void 
 13688 ;; Registers used:
 13689 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13690 ;; Tracked objects:
 13691 ;;		On entry : 0/0
 13692 ;;		On exit  : 0/0
 13693 ;;		Unchanged: 0/0
 13694 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13695 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13696 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13697 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13698 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13699 ;;Total ram usage:        2 bytes
 13700 ;; Hardware stack levels used:    1
 13701 ;; Hardware stack levels required when called:    5
 13702 ;; This function calls:
 13703 ;;		_change_state_to_logs_11
 13704 ;;		_change_state_to_logs_12
 13705 ;;		_change_state_to_logs_22
 13706 ;;		_change_state_to_logs_23
 13707 ;;		_change_state_to_logs_33
 13708 ;;		_change_state_to_logs_34
 13709 ;;		_change_state_to_menu_11
 13710 ;;		_change_state_to_menu_23
 13711 ;;		_dispLogs
 13712 ;;		_inputHandler
 13713 ;;		i2_change_state_to_menu_12
 13714 ;;		i2_change_state_to_menu_22
 13715 ;;		i2_change_state_to_menu_start
 13716 ;; This function is called by:
 13717 ;;		_handler
 13718 ;; This function uses a non-reentrant model
 13719 ;;
 13720                           
 13721                           	psect	text52
 13722  001B96                     __ptext52:
 13723                           	opt stack 0
 13724  001B96                     _updateMenu:
 13725                           	opt stack 18
 13726                           
 13727                           ;UI.c: 212: up = 0; down = 0; enter = 0; back = 0;
 13728                           
 13729                           ;incstack = 0
 13730  001B96  0E00               	movlw	0
 13731  001B98  6E76               	movwf	_up+1,c
 13732  001B9A  0E00               	movlw	0
 13733  001B9C  6E75               	movwf	_up,c
 13734  001B9E  0E00               	movlw	0
 13735  001BA0  6E68               	movwf	_down+1,c
 13736  001BA2  0E00               	movlw	0
 13737  001BA4  6E67               	movwf	_down,c
 13738  001BA6  0E00               	movlw	0
 13739  001BA8  6E6A               	movwf	_enter+1,c
 13740  001BAA  0E00               	movlw	0
 13741  001BAC  6E69               	movwf	_enter,c
 13742  001BAE  0E00               	movlw	0
 13743  001BB0  6E5C               	movwf	_back+1,c
 13744  001BB2  0E00               	movlw	0
 13745  001BB4  6E5B               	movwf	_back,c
 13746                           
 13747                           ;UI.c: 213: (INTCONbits.GIE = 0);
 13748  001BB6  9EF2               	bcf	intcon,7,c	;volatile
 13749                           
 13750                           ;UI.c: 215: if (inputHandler()
 13751                           ;UI.c: 218: ){
 13752  001BB8  EC3F  F011         	call	_inputHandler	;wreg free
 13753  001BBC  502A               	movf	?_inputHandler,w,c
 13754  001BBE  102B               	iorwf	?_inputHandler+1,w,c
 13755  001BC0  A4D8               	btfss	status,2,c
 13756  001BC2  D112               	goto	i2l7101
 13757  001BC4  D146               	goto	i2l254
 13758  001BC6                     i2l6953:
 13759                           
 13760                           ;UI.c: 222: change_state_to_menu_11();
 13761  001BC6  ECBE  F01D         	call	_change_state_to_menu_11	;wreg free
 13762                           
 13763                           ;UI.c: 223: break;
 13764  001BCA  D143               	goto	i2l254
 13765  001BCC                     i2l6955:
 13766                           
 13767                           ;UI.c: 226: if(up){
 13768  001BCC  5075               	movf	_up,w,c
 13769  001BCE  1076               	iorwf	_up+1,w,c
 13770  001BD0  B4D8               	btfsc	status,2,c
 13771  001BD2  D003               	goto	i2l6959
 13772                           
 13773                           ;UI.c: 227: change_state_to_menu_23();
 13774  001BD4  ECA6  F01D         	call	_change_state_to_menu_23	;wreg free
 13775                           
 13776                           ;UI.c: 228: }
 13777  001BD8  D13C               	goto	i2l254
 13778  001BDA                     i2l6959:
 13779                           
 13780                           ;UI.c: 229: else if(down){
 13781  001BDA  5067               	movf	_down,w,c
 13782  001BDC  1068               	iorwf	_down+1,w,c
 13783  001BDE  B4D8               	btfsc	status,2,c
 13784  001BE0  D003               	goto	i2l6963
 13785                           
 13786                           ;UI.c: 230: change_state_to_menu_12();
 13787  001BE2  EC8E  F01D         	call	i2_change_state_to_menu_12	;wreg free
 13788                           
 13789                           ;UI.c: 231: }
 13790  001BE6  D135               	goto	i2l254
 13791  001BE8                     i2l6963:
 13792                           
 13793                           ;UI.c: 232: else if(enter){
 13794  001BE8  5069               	movf	_enter,w,c
 13795  001BEA  106A               	iorwf	_enter+1,w,c
 13796  001BEC  B4D8               	btfsc	status,2,c
 13797  001BEE  D131               	goto	i2l254
 13798                           
 13799                           ;UI.c: 233: change_state_to_menu_start();
 13800  001BF0  ECBD  F01E         	call	i2_change_state_to_menu_start	;wreg free
 13801                           
 13802                           ;UI.c: 234: }
 13803                           ;UI.c: 235: break;
 13804  001BF4  D12E               	goto	i2l254
 13805  001BF6                     i2l6967:
 13806                           
 13807                           ;UI.c: 238: if(up){
 13808  001BF6  5075               	movf	_up,w,c
 13809  001BF8  1076               	iorwf	_up+1,w,c
 13810  001BFA  B4D8               	btfsc	status,2,c
 13811  001BFC  D003               	goto	i2l6971
 13812                           
 13813                           ;UI.c: 239: change_state_to_menu_11();
 13814  001BFE  ECBE  F01D         	call	_change_state_to_menu_11	;wreg free
 13815                           
 13816                           ;UI.c: 240: }
 13817  001C02  D127               	goto	i2l254
 13818  001C04                     i2l6971:
 13819                           
 13820                           ;UI.c: 241: else if(down){
 13821  001C04  5067               	movf	_down,w,c
 13822  001C06  1068               	iorwf	_down+1,w,c
 13823  001C08  B4D8               	btfsc	status,2,c
 13824  001C0A  D011               	goto	i2l6987
 13825                           
 13826                           ;UI.c: 242: change_state_to_menu_23();
 13827  001C0C  ECA6  F01D         	call	_change_state_to_menu_23	;wreg free
 13828                           
 13829                           ;UI.c: 243: }
 13830  001C10  D120               	goto	i2l254
 13831  001C12                     i2l6979:
 13832                           
 13833                           ;UI.c: 250: if(up){
 13834  001C12  5075               	movf	_up,w,c
 13835  001C14  1076               	iorwf	_up+1,w,c
 13836  001C16  B4D8               	btfsc	status,2,c
 13837  001C18  D003               	goto	i2l6983
 13838                           
 13839                           ;UI.c: 251: change_state_to_menu_11();
 13840  001C1A  ECBE  F01D         	call	_change_state_to_menu_11	;wreg free
 13841                           
 13842                           ;UI.c: 252: }
 13843  001C1E  D119               	goto	i2l254
 13844  001C20                     i2l6983:
 13845                           
 13846                           ;UI.c: 253: else if(down){
 13847  001C20  5067               	movf	_down,w,c
 13848  001C22  1068               	iorwf	_down+1,w,c
 13849  001C24  B4D8               	btfsc	status,2,c
 13850  001C26  D003               	goto	i2l6987
 13851                           
 13852                           ;UI.c: 254: change_state_to_menu_23();
 13853  001C28  ECA6  F01D         	call	_change_state_to_menu_23	;wreg free
 13854                           
 13855                           ;UI.c: 255: }
 13856  001C2C  D112               	goto	i2l254
 13857  001C2E                     i2l6987:
 13858                           
 13859                           ;UI.c: 256: else if(enter){
 13860  001C2E  5069               	movf	_enter,w,c
 13861  001C30  106A               	iorwf	_enter+1,w,c
 13862  001C32  B4D8               	btfsc	status,2,c
 13863  001C34  D10E               	goto	i2l254
 13864                           
 13865                           ;UI.c: 257: machine_state = Sorting_state;
 13866  001C36  0E01               	movlw	1
 13867  001C38  0100               	movlb	0	; () banked
 13868  001C3A  6FFC               	movwf	_machine_state& (0+255),b
 13869                           
 13870                           ; BSR set to: 0
 13871                           ;UI.c: 258: }
 13872                           ;UI.c: 259: break;
 13873                           
 13874                           ; BSR set to: 0
 13875                           
 13876                           ; BSR set to: 0
 13877  001C3C  D10A               	goto	i2l254
 13878  001C3E                     i2l6991:
 13879                           
 13880                           ;UI.c: 262: if(up){
 13881  001C3E  5075               	movf	_up,w,c
 13882  001C40  1076               	iorwf	_up+1,w,c
 13883  001C42  B4D8               	btfsc	status,2,c
 13884  001C44  D003               	goto	i2l6995
 13885                           
 13886                           ;UI.c: 263: change_state_to_menu_22();
 13887  001C46  EC76  F01D         	call	i2_change_state_to_menu_22	;wreg free
 13888                           
 13889                           ;UI.c: 264: }
 13890  001C4A  D103               	goto	i2l254
 13891  001C4C                     i2l6995:
 13892                           
 13893                           ;UI.c: 265: else if(down){
 13894  001C4C  5067               	movf	_down,w,c
 13895  001C4E  1068               	iorwf	_down+1,w,c
 13896  001C50  B4D8               	btfsc	status,2,c
 13897  001C52  D003               	goto	i2l6999
 13898                           
 13899                           ;UI.c: 266: change_state_to_menu_11();
 13900  001C54  ECBE  F01D         	call	_change_state_to_menu_11	;wreg free
 13901                           
 13902                           ;UI.c: 267: }
 13903  001C58  D0FC               	goto	i2l254
 13904  001C5A                     i2l6999:
 13905                           
 13906                           ;UI.c: 268: else if(enter){
 13907  001C5A  5069               	movf	_enter,w,c
 13908  001C5C  106A               	iorwf	_enter+1,w,c
 13909  001C5E  B4D8               	btfsc	status,2,c
 13910  001C60  D0F8               	goto	i2l254
 13911                           
 13912                           ;UI.c: 269: change_state_to_logs_11();
 13913  001C62  EC36  F01E         	call	_change_state_to_logs_11	;wreg free
 13914                           
 13915                           ;UI.c: 270: }
 13916                           ;UI.c: 271: break;
 13917  001C66  D0F5               	goto	i2l254
 13918  001C68                     i2l7003:
 13919                           
 13920                           ;UI.c: 274: if(up){
 13921  001C68  5075               	movf	_up,w,c
 13922  001C6A  1076               	iorwf	_up+1,w,c
 13923  001C6C  B4D8               	btfsc	status,2,c
 13924  001C6E  D003               	goto	i2l7007
 13925                           
 13926                           ;UI.c: 275: change_state_to_logs_34();
 13927  001C70  ECD6  F01D         	call	_change_state_to_logs_34	;wreg free
 13928                           
 13929                           ;UI.c: 276: }
 13930  001C74  D0EE               	goto	i2l254
 13931  001C76                     i2l7007:
 13932                           
 13933                           ;UI.c: 277: else if(down){
 13934  001C76  5067               	movf	_down,w,c
 13935  001C78  1068               	iorwf	_down+1,w,c
 13936  001C7A  B4D8               	btfsc	status,2,c
 13937  001C7C  D003               	goto	i2l7011
 13938                           
 13939                           ;UI.c: 278: change_state_to_logs_12();
 13940  001C7E  EC1E  F01E         	call	_change_state_to_logs_12	;wreg free
 13941                           
 13942                           ;UI.c: 279: }
 13943  001C82  D0E7               	goto	i2l254
 13944  001C84                     i2l7011:
 13945                           
 13946                           ;UI.c: 280: else if(enter){
 13947  001C84  5069               	movf	_enter,w,c
 13948  001C86  106A               	iorwf	_enter+1,w,c
 13949  001C88  B4D8               	btfsc	status,2,c
 13950  001C8A  D007               	goto	i2l7015
 13951                           
 13952                           ;UI.c: 281: dispLogs(1);
 13953  001C8C  0E00               	movlw	0
 13954  001C8E  6E13               	movwf	dispLogs@myLog+1,c
 13955  001C90  0E01               	movlw	1
 13956  001C92  6E12               	movwf	dispLogs@myLog,c
 13957  001C94  EC09  F01F         	call	_dispLogs	;wreg free
 13958                           
 13959                           ;UI.c: 282: }
 13960  001C98  D0DC               	goto	i2l254
 13961  001C9A                     i2l7015:
 13962                           
 13963                           ;UI.c: 283: else if(back){
 13964  001C9A  505B               	movf	_back,w,c
 13965  001C9C  105C               	iorwf	_back+1,w,c
 13966  001C9E  B4D8               	btfsc	status,2,c
 13967  001CA0  D0D8               	goto	i2l254
 13968                           
 13969                           ;UI.c: 284: change_state_to_menu_23();
 13970  001CA2  ECA6  F01D         	call	_change_state_to_menu_23	;wreg free
 13971                           
 13972                           ;UI.c: 285: }
 13973                           ;UI.c: 286: break;
 13974  001CA6  D0D5               	goto	i2l254
 13975  001CA8                     i2l7019:
 13976                           
 13977                           ;UI.c: 289: if(up){
 13978  001CA8  5075               	movf	_up,w,c
 13979  001CAA  1076               	iorwf	_up+1,w,c
 13980  001CAC  B4D8               	btfsc	status,2,c
 13981  001CAE  D003               	goto	i2l7023
 13982                           
 13983                           ;UI.c: 290: change_state_to_logs_11();
 13984  001CB0  EC36  F01E         	call	_change_state_to_logs_11	;wreg free
 13985                           
 13986                           ;UI.c: 291: }
 13987  001CB4  D0CE               	goto	i2l254
 13988  001CB6                     i2l7023:
 13989                           
 13990                           ;UI.c: 292: else if(down){
 13991  001CB6  5067               	movf	_down,w,c
 13992  001CB8  1068               	iorwf	_down+1,w,c
 13993  001CBA  B4D8               	btfsc	status,2,c
 13994  001CBC  D003               	goto	i2l7027
 13995                           
 13996                           ;UI.c: 293: change_state_to_logs_23();
 13997  001CBE  EC65  F01E         	call	_change_state_to_logs_23	;wreg free
 13998                           
 13999                           ;UI.c: 294: }
 14000  001CC2  D0C7               	goto	i2l254
 14001  001CC4                     i2l7027:
 14002                           
 14003                           ;UI.c: 295: else if(enter){
 14004  001CC4  5069               	movf	_enter,w,c
 14005  001CC6  106A               	iorwf	_enter+1,w,c
 14006  001CC8  B4D8               	btfsc	status,2,c
 14007  001CCA  D007               	goto	i2l7031
 14008                           
 14009                           ;UI.c: 296: dispLogs(2);
 14010  001CCC  0E00               	movlw	0
 14011  001CCE  6E13               	movwf	dispLogs@myLog+1,c
 14012  001CD0  0E02               	movlw	2
 14013  001CD2  6E12               	movwf	dispLogs@myLog,c
 14014  001CD4  EC09  F01F         	call	_dispLogs	;wreg free
 14015                           
 14016                           ;UI.c: 297: }
 14017  001CD8  D0BC               	goto	i2l254
 14018  001CDA                     i2l7031:
 14019                           
 14020                           ;UI.c: 298: else if(back){
 14021  001CDA  505B               	movf	_back,w,c
 14022  001CDC  105C               	iorwf	_back+1,w,c
 14023  001CDE  B4D8               	btfsc	status,2,c
 14024  001CE0  D0B8               	goto	i2l254
 14025                           
 14026                           ;UI.c: 299: change_state_to_menu_23();
 14027  001CE2  ECA6  F01D         	call	_change_state_to_menu_23	;wreg free
 14028                           
 14029                           ;UI.c: 300: }
 14030                           ;UI.c: 301: break;
 14031  001CE6  D0B5               	goto	i2l254
 14032  001CE8                     i2l7035:
 14033                           
 14034                           ;UI.c: 304: if(up){
 14035  001CE8  5075               	movf	_up,w,c
 14036  001CEA  1076               	iorwf	_up+1,w,c
 14037  001CEC  B4D8               	btfsc	status,2,c
 14038  001CEE  D003               	goto	i2l7039
 14039                           
 14040                           ;UI.c: 305: change_state_to_logs_11();
 14041  001CF0  EC36  F01E         	call	_change_state_to_logs_11	;wreg free
 14042                           
 14043                           ;UI.c: 306: }
 14044  001CF4  D0AE               	goto	i2l254
 14045  001CF6                     i2l7039:
 14046                           
 14047                           ;UI.c: 307: else if(down){
 14048  001CF6  5067               	movf	_down,w,c
 14049  001CF8  1068               	iorwf	_down+1,w,c
 14050  001CFA  B4D8               	btfsc	status,2,c
 14051  001CFC  D003               	goto	i2l7043
 14052                           
 14053                           ;UI.c: 308: change_state_to_logs_23();
 14054  001CFE  EC65  F01E         	call	_change_state_to_logs_23	;wreg free
 14055                           
 14056                           ;UI.c: 309: }
 14057  001D02  D0A7               	goto	i2l254
 14058  001D04                     i2l7043:
 14059                           
 14060                           ;UI.c: 310: else if(enter){
 14061  001D04  5069               	movf	_enter,w,c
 14062  001D06  106A               	iorwf	_enter+1,w,c
 14063  001D08  B4D8               	btfsc	status,2,c
 14064  001D0A  D007               	goto	i2l7047
 14065                           
 14066                           ;UI.c: 311: dispLogs(2);
 14067  001D0C  0E00               	movlw	0
 14068  001D0E  6E13               	movwf	dispLogs@myLog+1,c
 14069  001D10  0E02               	movlw	2
 14070  001D12  6E12               	movwf	dispLogs@myLog,c
 14071  001D14  EC09  F01F         	call	_dispLogs	;wreg free
 14072                           
 14073                           ;UI.c: 312: }
 14074  001D18  D09C               	goto	i2l254
 14075  001D1A                     i2l7047:
 14076                           
 14077                           ;UI.c: 313: else if(back){
 14078  001D1A  505B               	movf	_back,w,c
 14079  001D1C  105C               	iorwf	_back+1,w,c
 14080  001D1E  B4D8               	btfsc	status,2,c
 14081  001D20  D098               	goto	i2l254
 14082                           
 14083                           ;UI.c: 314: change_state_to_menu_23();
 14084  001D22  ECA6  F01D         	call	_change_state_to_menu_23	;wreg free
 14085                           
 14086                           ;UI.c: 315: }
 14087                           ;UI.c: 316: break;
 14088  001D26  D095               	goto	i2l254
 14089  001D28                     i2l7051:
 14090                           
 14091                           ;UI.c: 319: if(up){
 14092  001D28  5075               	movf	_up,w,c
 14093  001D2A  1076               	iorwf	_up+1,w,c
 14094  001D2C  B4D8               	btfsc	status,2,c
 14095  001D2E  D003               	goto	i2l7055
 14096                           
 14097                           ;UI.c: 320: change_state_to_logs_22();
 14098  001D30  EC06  F01E         	call	_change_state_to_logs_22	;wreg free
 14099                           
 14100                           ;UI.c: 321: }
 14101  001D34  D08E               	goto	i2l254
 14102  001D36                     i2l7055:
 14103                           
 14104                           ;UI.c: 322: else if(down){
 14105  001D36  5067               	movf	_down,w,c
 14106  001D38  1068               	iorwf	_down+1,w,c
 14107  001D3A  B4D8               	btfsc	status,2,c
 14108  001D3C  D003               	goto	i2l7059
 14109                           
 14110                           ;UI.c: 323: change_state_to_logs_34();
 14111  001D3E  ECD6  F01D         	call	_change_state_to_logs_34	;wreg free
 14112                           
 14113                           ;UI.c: 324: }
 14114  001D42  D087               	goto	i2l254
 14115  001D44                     i2l7059:
 14116                           
 14117                           ;UI.c: 325: else if(enter){
 14118  001D44  5069               	movf	_enter,w,c
 14119  001D46  106A               	iorwf	_enter+1,w,c
 14120  001D48  B4D8               	btfsc	status,2,c
 14121  001D4A  D007               	goto	i2l7063
 14122                           
 14123                           ;UI.c: 326: dispLogs(3);
 14124  001D4C  0E00               	movlw	0
 14125  001D4E  6E13               	movwf	dispLogs@myLog+1,c
 14126  001D50  0E03               	movlw	3
 14127  001D52  6E12               	movwf	dispLogs@myLog,c
 14128  001D54  EC09  F01F         	call	_dispLogs	;wreg free
 14129                           
 14130                           ;UI.c: 327: }
 14131  001D58  D07C               	goto	i2l254
 14132  001D5A                     i2l7063:
 14133                           
 14134                           ;UI.c: 328: else if(back){
 14135  001D5A  505B               	movf	_back,w,c
 14136  001D5C  105C               	iorwf	_back+1,w,c
 14137  001D5E  B4D8               	btfsc	status,2,c
 14138  001D60  D078               	goto	i2l254
 14139                           
 14140                           ;UI.c: 329: change_state_to_menu_23();
 14141  001D62  ECA6  F01D         	call	_change_state_to_menu_23	;wreg free
 14142                           
 14143                           ;UI.c: 330: }
 14144                           ;UI.c: 331: break;
 14145  001D66  D075               	goto	i2l254
 14146  001D68                     i2l7067:
 14147                           
 14148                           ;UI.c: 334: if(up){
 14149  001D68  5075               	movf	_up,w,c
 14150  001D6A  1076               	iorwf	_up+1,w,c
 14151  001D6C  B4D8               	btfsc	status,2,c
 14152  001D6E  D003               	goto	i2l7071
 14153                           
 14154                           ;UI.c: 335: change_state_to_logs_22();
 14155  001D70  EC06  F01E         	call	_change_state_to_logs_22	;wreg free
 14156                           
 14157                           ;UI.c: 336: }
 14158  001D74  D06E               	goto	i2l254
 14159  001D76                     i2l7071:
 14160                           
 14161                           ;UI.c: 337: else if(down){
 14162  001D76  5067               	movf	_down,w,c
 14163  001D78  1068               	iorwf	_down+1,w,c
 14164  001D7A  B4D8               	btfsc	status,2,c
 14165  001D7C  D003               	goto	i2l7075
 14166                           
 14167                           ;UI.c: 338: change_state_to_logs_34();
 14168  001D7E  ECD6  F01D         	call	_change_state_to_logs_34	;wreg free
 14169                           
 14170                           ;UI.c: 339: }
 14171  001D82  D067               	goto	i2l254
 14172  001D84                     i2l7075:
 14173                           
 14174                           ;UI.c: 340: else if(enter){
 14175  001D84  5069               	movf	_enter,w,c
 14176  001D86  106A               	iorwf	_enter+1,w,c
 14177  001D88  B4D8               	btfsc	status,2,c
 14178  001D8A  D007               	goto	i2l7079
 14179                           
 14180                           ;UI.c: 341: dispLogs(3);
 14181  001D8C  0E00               	movlw	0
 14182  001D8E  6E13               	movwf	dispLogs@myLog+1,c
 14183  001D90  0E03               	movlw	3
 14184  001D92  6E12               	movwf	dispLogs@myLog,c
 14185  001D94  EC09  F01F         	call	_dispLogs	;wreg free
 14186                           
 14187                           ;UI.c: 342: }
 14188  001D98  D05C               	goto	i2l254
 14189  001D9A                     i2l7079:
 14190                           
 14191                           ;UI.c: 343: else if(back){
 14192  001D9A  505B               	movf	_back,w,c
 14193  001D9C  105C               	iorwf	_back+1,w,c
 14194  001D9E  B4D8               	btfsc	status,2,c
 14195  001DA0  D058               	goto	i2l254
 14196                           
 14197                           ;UI.c: 344: change_state_to_menu_23();
 14198  001DA2  ECA6  F01D         	call	_change_state_to_menu_23	;wreg free
 14199                           
 14200                           ;UI.c: 345: }
 14201                           ;UI.c: 346: break;
 14202  001DA6  D055               	goto	i2l254
 14203  001DA8                     i2l7083:
 14204                           
 14205                           ;UI.c: 349: if(up){
 14206  001DA8  5075               	movf	_up,w,c
 14207  001DAA  1076               	iorwf	_up+1,w,c
 14208  001DAC  B4D8               	btfsc	status,2,c
 14209  001DAE  D003               	goto	i2l7087
 14210                           
 14211                           ;UI.c: 350: change_state_to_logs_33();
 14212  001DB0  ECEE  F01D         	call	_change_state_to_logs_33	;wreg free
 14213                           
 14214                           ;UI.c: 351: }
 14215  001DB4  D04E               	goto	i2l254
 14216  001DB6                     i2l7087:
 14217                           
 14218                           ;UI.c: 352: else if(down){
 14219  001DB6  5067               	movf	_down,w,c
 14220  001DB8  1068               	iorwf	_down+1,w,c
 14221  001DBA  B4D8               	btfsc	status,2,c
 14222  001DBC  D003               	goto	i2l7091
 14223                           
 14224                           ;UI.c: 353: change_state_to_logs_11();
 14225  001DBE  EC36  F01E         	call	_change_state_to_logs_11	;wreg free
 14226                           
 14227                           ;UI.c: 354: }
 14228  001DC2  D047               	goto	i2l254
 14229  001DC4                     i2l7091:
 14230                           
 14231                           ;UI.c: 355: else if(enter){
 14232  001DC4  5069               	movf	_enter,w,c
 14233  001DC6  106A               	iorwf	_enter+1,w,c
 14234  001DC8  B4D8               	btfsc	status,2,c
 14235  001DCA  D007               	goto	i2l7095
 14236                           
 14237                           ;UI.c: 356: dispLogs(4);
 14238  001DCC  0E00               	movlw	0
 14239  001DCE  6E13               	movwf	dispLogs@myLog+1,c
 14240  001DD0  0E04               	movlw	4
 14241  001DD2  6E12               	movwf	dispLogs@myLog,c
 14242  001DD4  EC09  F01F         	call	_dispLogs	;wreg free
 14243                           
 14244                           ;UI.c: 357: }
 14245  001DD8  D03C               	goto	i2l254
 14246  001DDA                     i2l7095:
 14247                           
 14248                           ;UI.c: 358: else if(back){
 14249  001DDA  505B               	movf	_back,w,c
 14250  001DDC  105C               	iorwf	_back+1,w,c
 14251  001DDE  B4D8               	btfsc	status,2,c
 14252  001DE0  D038               	goto	i2l254
 14253                           
 14254                           ;UI.c: 359: change_state_to_menu_23();
 14255  001DE2  ECA6  F01D         	call	_change_state_to_menu_23	;wreg free
 14256                           
 14257                           ;UI.c: 365: }
 14258                           
 14259                           ;UI.c: 364: break;
 14260                           
 14261                           ;UI.c: 363: default:
 14262                           
 14263                           ;UI.c: 360: }
 14264                           ;UI.c: 361: break;
 14265  001DE6  D035               	goto	i2l254
 14266  001DE8                     i2l7101:
 14267  001DE8  C0DE  F043         	movff	_cur_state,??_updateMenu
 14268  001DEC  C0DF  F044         	movff	_cur_state+1,??_updateMenu+1
 14269                           
 14270                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 3 sub-sw
      +                          itches
 14271                           ; Switch size 1, requested type "space"
 14272                           ; Number of cases is 3, Range of values is 0 to 4
 14273                           ; switch strategies available:
 14274                           ; Name         Instructions Cycles
 14275                           ; simple_byte           10     6 (average)
 14276                           ;	Chosen strategy is simple_byte
 14277  001DF0  5044               	movf	??_updateMenu+1,w,c
 14278  001DF2  0A00               	xorlw	0	; case 0
 14279  001DF4  B4D8               	btfsc	status,2,c
 14280  001DF6  D007               	goto	i2l7639
 14281  001DF8  0A03               	xorlw	3	; case 3
 14282  001DFA  B4D8               	btfsc	status,2,c
 14283  001DFC  D015               	goto	i2l7641
 14284  001DFE  0A07               	xorlw	7	; case 4
 14285  001E00  B4D8               	btfsc	status,2,c
 14286  001E02  D020               	goto	i2l7643
 14287  001E04  D026               	goto	i2l254
 14288  001E06                     i2l7639:
 14289                           
 14290                           ; Switch size 1, requested type "space"
 14291                           ; Number of cases is 5, Range of values is 0 to 23
 14292                           ; switch strategies available:
 14293                           ; Name         Instructions Cycles
 14294                           ; simple_byte           16     9 (average)
 14295                           ;	Chosen strategy is simple_byte
 14296  001E06  5043               	movf	??_updateMenu,w,c
 14297  001E08  0A00               	xorlw	0	; case 0
 14298  001E0A  B4D8               	btfsc	status,2,c
 14299  001E0C  D6DC               	goto	i2l6953
 14300  001E0E  0A0B               	xorlw	11	; case 11
 14301  001E10  B4D8               	btfsc	status,2,c
 14302  001E12  D6DC               	goto	i2l6955
 14303  001E14  0A07               	xorlw	7	; case 12
 14304  001E16  B4D8               	btfsc	status,2,c
 14305  001E18  D6EE               	goto	i2l6967
 14306  001E1A  0A1A               	xorlw	26	; case 22
 14307  001E1C  B4D8               	btfsc	status,2,c
 14308  001E1E  D6F9               	goto	i2l6979
 14309  001E20  0A01               	xorlw	1	; case 23
 14310  001E22  B4D8               	btfsc	status,2,c
 14311  001E24  D70C               	goto	i2l6991
 14312  001E26  D015               	goto	i2l254
 14313  001E28                     i2l7641:
 14314                           
 14315                           ; Switch size 1, requested type "space"
 14316                           ; Number of cases is 4, Range of values is 243 to 255
 14317                           ; switch strategies available:
 14318                           ; Name         Instructions Cycles
 14319                           ; simple_byte           13     7 (average)
 14320                           ;	Chosen strategy is simple_byte
 14321  001E28  5043               	movf	??_updateMenu,w,c
 14322  001E2A  0AF3               	xorlw	243	; case 243
 14323  001E2C  B4D8               	btfsc	status,2,c
 14324  001E2E  D71C               	goto	i2l7003
 14325  001E30  0A07               	xorlw	7	; case 244
 14326  001E32  B4D8               	btfsc	status,2,c
 14327  001E34  D739               	goto	i2l7019
 14328  001E36  0A0A               	xorlw	10	; case 254
 14329  001E38  B4D8               	btfsc	status,2,c
 14330  001E3A  D756               	goto	i2l7035
 14331  001E3C  0A01               	xorlw	1	; case 255
 14332  001E3E  B4D8               	btfsc	status,2,c
 14333  001E40  D773               	goto	i2l7051
 14334  001E42  D007               	goto	i2l254
 14335  001E44                     i2l7643:
 14336                           
 14337                           ; Switch size 1, requested type "space"
 14338                           ; Number of cases is 2, Range of values is 9 to 10
 14339                           ; switch strategies available:
 14340                           ; Name         Instructions Cycles
 14341                           ; simple_byte            7     4 (average)
 14342                           ;	Chosen strategy is simple_byte
 14343  001E44  5043               	movf	??_updateMenu,w,c
 14344  001E46  0A09               	xorlw	9	; case 9
 14345  001E48  B4D8               	btfsc	status,2,c
 14346  001E4A  D78E               	goto	i2l7067
 14347  001E4C  0A03               	xorlw	3	; case 10
 14348  001E4E  B4D8               	btfsc	status,2,c
 14349  001E50  D7AB               	goto	i2l7083
 14350  001E52                     i2l254:
 14351                           
 14352                           ;UI.c: 366: }
 14353                           ;UI.c: 367: (INTCONbits.GIE = 1);
 14354  001E52  8EF2               	bsf	intcon,7,c	;volatile
 14355  001E54  0012               	return		;funcret
 14356  001E56                     __end_of_updateMenu:
 14357                           	opt stack 0
 14358                           pclatu	equ	0xFFB
 14359                           pclath	equ	0xFFA
 14360                           tblptru	equ	0xFF8
 14361                           tblptrh	equ	0xFF7
 14362                           tblptrl	equ	0xFF6
 14363                           tablat	equ	0xFF5
 14364                           prodh	equ	0xFF4
 14365                           prodl	equ	0xFF3
 14366                           intcon	equ	0xFF2
 14367                           intcon2	equ	0xFF1
 14368                           intcon3	equ	0xFF0
 14369                           indf0	equ	0xFEF
 14370                           postinc0	equ	0xFEE
 14371                           fsr0h	equ	0xFEA
 14372                           fsr0l	equ	0xFE9
 14373                           wreg	equ	0xFE8
 14374                           postdec1	equ	0xFE5
 14375                           fsr1h	equ	0xFE2
 14376                           fsr1l	equ	0xFE1
 14377                           indf2	equ	0xFDF
 14378                           postinc2	equ	0xFDE
 14379                           postdec2	equ	0xFDD
 14380                           fsr2h	equ	0xFDA
 14381                           fsr2l	equ	0xFD9
 14382                           status	equ	0xFD8
 14383                           
 14384 ;; *************** function i2_change_state_to_menu_start *****************
 14385 ;; Defined at:
 14386 ;;		line 472 in file "UI.c"
 14387 ;; Parameters:    Size  Location     Type
 14388 ;;		None
 14389 ;; Auto vars:     Size  Location     Type
 14390 ;;		None
 14391 ;; Return value:  Size  Location     Type
 14392 ;;                  1    wreg      void 
 14393 ;; Registers used:
 14394 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14395 ;; Tracked objects:
 14396 ;;		On entry : 0/0
 14397 ;;		On exit  : 0/0
 14398 ;;		Unchanged: 0/0
 14399 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14400 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14401 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14402 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14403 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14404 ;;Total ram usage:        0 bytes
 14405 ;; Hardware stack levels used:    1
 14406 ;; Hardware stack levels required when called:    4
 14407 ;; This function calls:
 14408 ;;		i2_lcdInst
 14409 ;;		i2_printRTC
 14410 ;;		i2_printf
 14411 ;; This function is called by:
 14412 ;;		_updateMenu
 14413 ;; This function uses a non-reentrant model
 14414 ;;
 14415                           
 14416                           	psect	text53
 14417  003D7A                     __ptext53:
 14418                           	opt stack 0
 14419  003D7A                     i2_change_state_to_menu_start:
 14420                           	opt stack 18
 14421                           
 14422                           ;UI.c: 473: cur_state = 0;
 14423                           
 14424                           ;incstack = 0
 14425  003D7A  0E00               	movlw	0
 14426  003D7C  0100               	movlb	0	; () banked
 14427  003D7E  6FDF               	movwf	(_cur_state+1)& (0+255),b
 14428  003D80  0E00               	movlw	0
 14429  003D82  6FDE               	movwf	_cur_state& (0+255),b
 14430                           
 14431                           ; BSR set to: 0
 14432                           ;UI.c: 475: lcdInst(0b10000000);;
 14433  003D84  0E80               	movlw	128
 14434  003D86  ECA0  F01F         	call	i2_lcdInst
 14435                           
 14436                           ;UI.c: 476: printRTC();
 14437  003D8A  EC2B  F00F         	call	i2_printRTC	;wreg free
 14438                           
 14439                           ;UI.c: 477: lcdInst(0b11000000);;
 14440  003D8E  0EC0               	movlw	192
 14441  003D90  ECA0  F01F         	call	i2_lcdInst
 14442                           
 14443                           ;UI.c: 478: printf("PUSH TO CONTINUE");
 14444  003D94  0E33               	movlw	low STR_30
 14445  003D96  6E0D               	movwf	i2printf@f,c
 14446  003D98  0EFE               	movlw	high STR_30
 14447  003D9A  6E0E               	movwf	i2printf@f+1,c
 14448  003D9C  ECAF  F00A         	call	i2_printf	;wreg free
 14449  003DA0  0012               	return		;funcret
 14450  003DA2                     __end_ofi2_change_state_to_menu_start:
 14451                           	opt stack 0
 14452                           pclatu	equ	0xFFB
 14453                           pclath	equ	0xFFA
 14454                           tblptru	equ	0xFF8
 14455                           tblptrh	equ	0xFF7
 14456                           tblptrl	equ	0xFF6
 14457                           tablat	equ	0xFF5
 14458                           prodh	equ	0xFF4
 14459                           prodl	equ	0xFF3
 14460                           intcon	equ	0xFF2
 14461                           intcon2	equ	0xFF1
 14462                           intcon3	equ	0xFF0
 14463                           indf0	equ	0xFEF
 14464                           postinc0	equ	0xFEE
 14465                           fsr0h	equ	0xFEA
 14466                           fsr0l	equ	0xFE9
 14467                           wreg	equ	0xFE8
 14468                           postdec1	equ	0xFE5
 14469                           fsr1h	equ	0xFE2
 14470                           fsr1l	equ	0xFE1
 14471                           indf2	equ	0xFDF
 14472                           postinc2	equ	0xFDE
 14473                           postdec2	equ	0xFDD
 14474                           fsr2h	equ	0xFDA
 14475                           fsr2l	equ	0xFD9
 14476                           status	equ	0xFD8
 14477                           
 14478 ;; *************** function i2_printRTC *****************
 14479 ;; Defined at:
 14480 ;;		line 63 in file "RTC.c"
 14481 ;; Parameters:    Size  Location     Type
 14482 ;;		None
 14483 ;; Auto vars:     Size  Location     Type
 14484 ;;  printRTC       14   44[COMRAM] int [7]
 14485 ;;  printRTC        4   60[COMRAM] unsigned char [4]
 14486 ;;  printRTC        2   64[COMRAM] int 
 14487 ;;  printRTC        2   58[COMRAM] int 
 14488 ;; Return value:  Size  Location     Type
 14489 ;;                  1    wreg      void 
 14490 ;; Registers used:
 14491 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14492 ;; Tracked objects:
 14493 ;;		On entry : 0/0
 14494 ;;		On exit  : 0/0
 14495 ;;		Unchanged: 0/0
 14496 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14497 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14498 ;;      Locals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14499 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14500 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14501 ;;Total ram usage:       25 bytes
 14502 ;; Hardware stack levels used:    1
 14503 ;; Hardware stack levels required when called:    3
 14504 ;; This function calls:
 14505 ;;		i2_getRTC
 14506 ;;		i2_lcdInst
 14507 ;;		i2_printf
 14508 ;;		i2_strcpy
 14509 ;; This function is called by:
 14510 ;;		i2_change_state_to_menu_start
 14511 ;; This function uses a non-reentrant model
 14512 ;;
 14513                           
 14514                           	psect	text54
 14515  001E56                     __ptext54:
 14516                           	opt stack 0
 14517  001E56                     i2_printRTC:
 14518                           	opt stack 18
 14519                           
 14520                           ;RTC.c: 64: getRTC();
 14521                           
 14522                           ;incstack = 0
 14523  001E56  EC61  F01A         	call	i2_getRTC	;wreg free
 14524                           
 14525                           ;RTC.c: 65: char month[] = "MMM";
 14526  001E5A  C131  F03D         	movff	printRTC@F3211,i2printRTC@month
 14527  001E5E  C132  F03E         	movff	printRTC@F3211+1,i2printRTC@month+1
 14528  001E62  C133  F03F         	movff	printRTC@F3211+2,i2printRTC@month+2
 14529  001E66  C134  F040         	movff	printRTC@F3211+3,i2printRTC@month+3
 14530                           
 14531                           ;RTC.c: 66: int INT_time[7];
 14532                           ;RTC.c: 67: for(int i = 0; i < 7; i++){
 14533  001E6A  0E00               	movlw	0
 14534  001E6C  6E42               	movwf	i2printRTC@i+1,c
 14535  001E6E  0E00               	movlw	0
 14536  001E70  6E41               	movwf	i2printRTC@i,c
 14537  001E72  BE42               	btfsc	i2printRTC@i+1,7,c
 14538  001E74  D006               	goto	i2l5637
 14539  001E76  5042               	movf	i2printRTC@i+1,w,c
 14540  001E78  E135               	bnz	i2l591
 14541  001E7A  0E07               	movlw	7
 14542  001E7C  5C41               	subwf	i2printRTC@i,w,c
 14543  001E7E  B0D8               	btfsc	status,0,c
 14544  001E80  D031               	goto	i2l591
 14545  001E82                     i2l5637:
 14546                           
 14547                           ;RTC.c: 68: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 14548  001E82  0E24               	movlw	low _time
 14549  001E84  2441               	addwf	i2printRTC@i,w,c
 14550  001E86  6ED9               	movwf	fsr2l,c
 14551  001E88  0E01               	movlw	high _time
 14552  001E8A  2042               	addwfc	i2printRTC@i+1,w,c
 14553  001E8C  6EDA               	movwf	fsr2h,c
 14554  001E8E  50DF               	movf	indf2,w,c
 14555  001E90  6E2A               	movwf	??i2_printRTC& (0+255),c
 14556  001E92  3A2A               	swapf	??i2_printRTC,f,c
 14557  001E94  0E0F               	movlw	15
 14558  001E96  162A               	andwf	??i2_printRTC,f,c
 14559  001E98  0E0F               	movlw	15
 14560  001E9A  162A               	andwf	??i2_printRTC,f,c
 14561  001E9C  502A               	movf	??i2_printRTC,w,c
 14562  001E9E  0D0A               	mullw	10
 14563  001EA0  0E24               	movlw	low _time
 14564  001EA2  2441               	addwf	i2printRTC@i,w,c
 14565  001EA4  6ED9               	movwf	fsr2l,c
 14566  001EA6  0E01               	movlw	high _time
 14567  001EA8  2042               	addwfc	i2printRTC@i+1,w,c
 14568  001EAA  6EDA               	movwf	fsr2h,c
 14569  001EAC  50DF               	movf	indf2,w,c
 14570  001EAE  0B0F               	andlw	15
 14571  001EB0  6E2B               	movwf	(??i2_printRTC+1)& (0+255),c
 14572  001EB2  6A2C               	clrf	(??i2_printRTC+2)& (0+255),c
 14573  001EB4  50F3               	movf	prodl,w,c
 14574  001EB6  262B               	addwf	??i2_printRTC+1,f,c
 14575  001EB8  50F4               	movf	prodh,w,c
 14576  001EBA  222C               	addwfc	??i2_printRTC+2,f,c
 14577  001EBC  90D8               	bcf	status,0,c
 14578  001EBE  3441               	rlcf	i2printRTC@i,w,c
 14579  001EC0  6ED9               	movwf	fsr2l,c
 14580  001EC2  3442               	rlcf	i2printRTC@i+1,w,c
 14581  001EC4  6EDA               	movwf	fsr2h,c
 14582  001EC6  0E2D               	movlw	low i2printRTC@INT_time
 14583  001EC8  26D9               	addwf	fsr2l,f,c
 14584  001ECA  0E00               	movlw	high i2printRTC@INT_time
 14585  001ECC  22DA               	addwfc	fsr2h,f,c
 14586  001ECE  C02B  FFDE         	movff	??i2_printRTC+1,postinc2
 14587  001ED2  C02C  FFDD         	movff	??i2_printRTC+2,postdec2
 14588  001ED6  4A41               	infsnz	i2printRTC@i,f,c
 14589  001ED8  2A42               	incf	i2printRTC@i+1,f,c
 14590  001EDA  BE42               	btfsc	i2printRTC@i+1,7,c
 14591  001EDC  D7D2               	goto	i2l5637
 14592  001EDE  5042               	movf	i2printRTC@i+1,w,c
 14593  001EE0  E101               	bnz	i2u432_40
 14594  001EE2  D7CB               	goto	L9
 14595  001EE4                     i2u432_40:
 14596  001EE4                     i2l591:
 14597                           
 14598                           ;RTC.c: 69: }
 14599                           ;RTC.c: 70: int RTC_month = INT_time[5];
 14600  001EE4  C037  F03B         	movff	i2printRTC@INT_time+10,i2printRTC@RTC_month
 14601  001EE8  C038  F03C         	movff	i2printRTC@INT_time+11,i2printRTC@RTC_month+1
 14602                           
 14603                           ;RTC.c: 71: switch(RTC_month){
 14604  001EEC  D084               	goto	i2l5669
 14605  001EEE                     i2l5643:
 14606                           
 14607                           ;RTC.c: 73: strcpy(month, "JAN");
 14608  001EEE  0E3D               	movlw	low i2printRTC@month
 14609  001EF0  6E01               	movwf	i2strcpy@to,c
 14610  001EF2  0E00               	movlw	high i2printRTC@month
 14611  001EF4  6E02               	movwf	i2strcpy@to+1,c
 14612  001EF6  0EDA               	movlw	low STR_8
 14613  001EF8  6E03               	movwf	i2strcpy@from,c
 14614  001EFA  0EFF               	movlw	high STR_8
 14615  001EFC  6E04               	movwf	i2strcpy@from+1,c
 14616  001EFE  EC5D  F01D         	call	i2_strcpy	;wreg free
 14617                           
 14618                           ;RTC.c: 74: break;
 14619  001F02  D0A6               	goto	i2l5671
 14620  001F04                     i2l5645:
 14621                           
 14622                           ;RTC.c: 76: strcpy(month, "FEB");
 14623  001F04  0E3D               	movlw	low i2printRTC@month
 14624  001F06  6E01               	movwf	i2strcpy@to,c
 14625  001F08  0E00               	movlw	high i2printRTC@month
 14626  001F0A  6E02               	movwf	i2strcpy@to+1,c
 14627  001F0C  0ECA               	movlw	low STR_9
 14628  001F0E  6E03               	movwf	i2strcpy@from,c
 14629  001F10  0EFF               	movlw	high STR_9
 14630  001F12  6E04               	movwf	i2strcpy@from+1,c
 14631  001F14  EC5D  F01D         	call	i2_strcpy	;wreg free
 14632                           
 14633                           ;RTC.c: 77: break;
 14634  001F18  D09B               	goto	i2l5671
 14635  001F1A                     i2l5647:
 14636                           
 14637                           ;RTC.c: 79: strcpy(month, "MAR");
 14638  001F1A  0E3D               	movlw	low i2printRTC@month
 14639  001F1C  6E01               	movwf	i2strcpy@to,c
 14640  001F1E  0E00               	movlw	high i2printRTC@month
 14641  001F20  6E02               	movwf	i2strcpy@to+1,c
 14642  001F22  0EE6               	movlw	low STR_10
 14643  001F24  6E03               	movwf	i2strcpy@from,c
 14644  001F26  0EFF               	movlw	high STR_10
 14645  001F28  6E04               	movwf	i2strcpy@from+1,c
 14646  001F2A  EC5D  F01D         	call	i2_strcpy	;wreg free
 14647                           
 14648                           ;RTC.c: 80: break;
 14649  001F2E  D090               	goto	i2l5671
 14650  001F30                     i2l5649:
 14651                           
 14652                           ;RTC.c: 82: strcpy(month, "APR");
 14653  001F30  0E3D               	movlw	low i2printRTC@month
 14654  001F32  6E01               	movwf	i2strcpy@to,c
 14655  001F34  0E00               	movlw	high i2printRTC@month
 14656  001F36  6E02               	movwf	i2strcpy@to+1,c
 14657  001F38  0EEA               	movlw	low STR_11
 14658  001F3A  6E03               	movwf	i2strcpy@from,c
 14659  001F3C  0EFF               	movlw	high STR_11
 14660  001F3E  6E04               	movwf	i2strcpy@from+1,c
 14661  001F40  EC5D  F01D         	call	i2_strcpy	;wreg free
 14662                           
 14663                           ;RTC.c: 83: break;
 14664  001F44  D085               	goto	i2l5671
 14665  001F46                     i2l5651:
 14666                           
 14667                           ;RTC.c: 85: strcpy(month, "MAY");
 14668  001F46  0E3D               	movlw	low i2printRTC@month
 14669  001F48  6E01               	movwf	i2strcpy@to,c
 14670  001F4A  0E00               	movlw	high i2printRTC@month
 14671  001F4C  6E02               	movwf	i2strcpy@to+1,c
 14672  001F4E  0EFA               	movlw	low STR_12
 14673  001F50  6E03               	movwf	i2strcpy@from,c
 14674  001F52  0EFF               	movlw	high STR_12
 14675  001F54  6E04               	movwf	i2strcpy@from+1,c
 14676  001F56  EC5D  F01D         	call	i2_strcpy	;wreg free
 14677                           
 14678                           ;RTC.c: 86: break;
 14679  001F5A  D07A               	goto	i2l5671
 14680  001F5C                     i2l5653:
 14681                           
 14682                           ;RTC.c: 88: strcpy(month, "JUN");
 14683  001F5C  0E3D               	movlw	low i2printRTC@month
 14684  001F5E  6E01               	movwf	i2strcpy@to,c
 14685  001F60  0E00               	movlw	high i2printRTC@month
 14686  001F62  6E02               	movwf	i2strcpy@to+1,c
 14687  001F64  0EDE               	movlw	low STR_13
 14688  001F66  6E03               	movwf	i2strcpy@from,c
 14689  001F68  0EFF               	movlw	high STR_13
 14690  001F6A  6E04               	movwf	i2strcpy@from+1,c
 14691  001F6C  EC5D  F01D         	call	i2_strcpy	;wreg free
 14692                           
 14693                           ;RTC.c: 89: break;
 14694  001F70  D06F               	goto	i2l5671
 14695  001F72                     i2l5655:
 14696                           
 14697                           ;RTC.c: 91: strcpy(month, "JUL");
 14698  001F72  0E3D               	movlw	low i2printRTC@month
 14699  001F74  6E01               	movwf	i2strcpy@to,c
 14700  001F76  0E00               	movlw	high i2printRTC@month
 14701  001F78  6E02               	movwf	i2strcpy@to+1,c
 14702  001F7A  0ED6               	movlw	low STR_14
 14703  001F7C  6E03               	movwf	i2strcpy@from,c
 14704  001F7E  0EFF               	movlw	high STR_14
 14705  001F80  6E04               	movwf	i2strcpy@from+1,c
 14706  001F82  EC5D  F01D         	call	i2_strcpy	;wreg free
 14707                           
 14708                           ;RTC.c: 92: break;
 14709  001F86  D064               	goto	i2l5671
 14710  001F88                     i2l5657:
 14711                           
 14712                           ;RTC.c: 94: strcpy(month, "AUG");
 14713  001F88  0E3D               	movlw	low i2printRTC@month
 14714  001F8A  6E01               	movwf	i2strcpy@to,c
 14715  001F8C  0E00               	movlw	high i2printRTC@month
 14716  001F8E  6E02               	movwf	i2strcpy@to+1,c
 14717  001F90  0ED2               	movlw	low STR_15
 14718  001F92  6E03               	movwf	i2strcpy@from,c
 14719  001F94  0EFF               	movlw	high STR_15
 14720  001F96  6E04               	movwf	i2strcpy@from+1,c
 14721  001F98  EC5D  F01D         	call	i2_strcpy	;wreg free
 14722                           
 14723                           ;RTC.c: 95: break;
 14724  001F9C  D059               	goto	i2l5671
 14725  001F9E                     i2l5659:
 14726                           
 14727                           ;RTC.c: 97: strcpy(month, "SEP");
 14728  001F9E  0E3D               	movlw	low i2printRTC@month
 14729  001FA0  6E01               	movwf	i2strcpy@to,c
 14730  001FA2  0E00               	movlw	high i2printRTC@month
 14731  001FA4  6E02               	movwf	i2strcpy@to+1,c
 14732  001FA6  0EE2               	movlw	low STR_16
 14733  001FA8  6E03               	movwf	i2strcpy@from,c
 14734  001FAA  0EFF               	movlw	high STR_16
 14735  001FAC  6E04               	movwf	i2strcpy@from+1,c
 14736  001FAE  EC5D  F01D         	call	i2_strcpy	;wreg free
 14737                           
 14738                           ;RTC.c: 98: break;
 14739  001FB2  D04E               	goto	i2l5671
 14740  001FB4                     i2l5661:
 14741                           
 14742                           ;RTC.c: 100: strcpy(month, "OCT");
 14743  001FB4  0E3D               	movlw	low i2printRTC@month
 14744  001FB6  6E01               	movwf	i2strcpy@to,c
 14745  001FB8  0E00               	movlw	high i2printRTC@month
 14746  001FBA  6E02               	movwf	i2strcpy@to+1,c
 14747  001FBC  0EF2               	movlw	low STR_17
 14748  001FBE  6E03               	movwf	i2strcpy@from,c
 14749  001FC0  0EFF               	movlw	high STR_17
 14750  001FC2  6E04               	movwf	i2strcpy@from+1,c
 14751  001FC4  EC5D  F01D         	call	i2_strcpy	;wreg free
 14752                           
 14753                           ;RTC.c: 101: break;
 14754  001FC8  D043               	goto	i2l5671
 14755  001FCA                     i2l5663:
 14756                           
 14757                           ;RTC.c: 103: strcpy(month, "NOV");
 14758  001FCA  0E3D               	movlw	low i2printRTC@month
 14759  001FCC  6E01               	movwf	i2strcpy@to,c
 14760  001FCE  0E00               	movlw	high i2printRTC@month
 14761  001FD0  6E02               	movwf	i2strcpy@to+1,c
 14762  001FD2  0EF6               	movlw	low STR_18
 14763  001FD4  6E03               	movwf	i2strcpy@from,c
 14764  001FD6  0EFF               	movlw	high STR_18
 14765  001FD8  6E04               	movwf	i2strcpy@from+1,c
 14766  001FDA  EC5D  F01D         	call	i2_strcpy	;wreg free
 14767                           
 14768                           ;RTC.c: 104: break;
 14769  001FDE  D038               	goto	i2l5671
 14770  001FE0                     i2l5665:
 14771                           
 14772                           ;RTC.c: 106: strcpy(month, "DEC");
 14773  001FE0  0E3D               	movlw	low i2printRTC@month
 14774  001FE2  6E01               	movwf	i2strcpy@to,c
 14775  001FE4  0E00               	movlw	high i2printRTC@month
 14776  001FE6  6E02               	movwf	i2strcpy@to+1,c
 14777  001FE8  0ECE               	movlw	low STR_19
 14778  001FEA  6E03               	movwf	i2strcpy@from,c
 14779  001FEC  0EFF               	movlw	high STR_19
 14780  001FEE  6E04               	movwf	i2strcpy@from+1,c
 14781  001FF0  EC5D  F01D         	call	i2_strcpy	;wreg free
 14782                           
 14783                           ;RTC.c: 108: }
 14784                           
 14785                           ;RTC.c: 107: break;
 14786  001FF4  D02D               	goto	i2l5671
 14787  001FF6                     i2l5669:
 14788  001FF6  C03B  F02A         	movff	i2printRTC@RTC_month,??i2_printRTC
 14789  001FFA  C03C  F02B         	movff	i2printRTC@RTC_month+1,??i2_printRTC+1
 14790                           
 14791                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 14792                           ; Switch size 1, requested type "space"
 14793                           ; Number of cases is 1, Range of values is 0 to 0
 14794                           ; switch strategies available:
 14795                           ; Name         Instructions Cycles
 14796                           ; simple_byte            4     3 (average)
 14797                           ;	Chosen strategy is simple_byte
 14798  001FFE  502B               	movf	??i2_printRTC+1,w,c
 14799  002000  0A00               	xorlw	0	; case 0
 14800  002002  A4D8               	btfss	status,2,c
 14801  002004  D025               	goto	i2l5671
 14802                           
 14803                           ; Switch size 1, requested type "space"
 14804                           ; Number of cases is 12, Range of values is 1 to 12
 14805                           ; switch strategies available:
 14806                           ; Name         Instructions Cycles
 14807                           ; simple_byte           37    19 (average)
 14808                           ;	Chosen strategy is simple_byte
 14809  002006  502A               	movf	??i2_printRTC,w,c
 14810  002008  0A01               	xorlw	1	; case 1
 14811  00200A  B4D8               	btfsc	status,2,c
 14812  00200C  D770               	goto	i2l5643
 14813  00200E  0A03               	xorlw	3	; case 2
 14814  002010  B4D8               	btfsc	status,2,c
 14815  002012  D778               	goto	i2l5645
 14816  002014  0A01               	xorlw	1	; case 3
 14817  002016  B4D8               	btfsc	status,2,c
 14818  002018  D780               	goto	i2l5647
 14819  00201A  0A07               	xorlw	7	; case 4
 14820  00201C  B4D8               	btfsc	status,2,c
 14821  00201E  D788               	goto	i2l5649
 14822  002020  0A01               	xorlw	1	; case 5
 14823  002022  B4D8               	btfsc	status,2,c
 14824  002024  D790               	goto	i2l5651
 14825  002026  0A03               	xorlw	3	; case 6
 14826  002028  B4D8               	btfsc	status,2,c
 14827  00202A  D798               	goto	i2l5653
 14828  00202C  0A01               	xorlw	1	; case 7
 14829  00202E  B4D8               	btfsc	status,2,c
 14830  002030  D7A0               	goto	i2l5655
 14831  002032  0A0F               	xorlw	15	; case 8
 14832  002034  B4D8               	btfsc	status,2,c
 14833  002036  D7A8               	goto	i2l5657
 14834  002038  0A01               	xorlw	1	; case 9
 14835  00203A  B4D8               	btfsc	status,2,c
 14836  00203C  D7B0               	goto	i2l5659
 14837  00203E  0A03               	xorlw	3	; case 10
 14838  002040  B4D8               	btfsc	status,2,c
 14839  002042  D7B8               	goto	i2l5661
 14840  002044  0A01               	xorlw	1	; case 11
 14841  002046  B4D8               	btfsc	status,2,c
 14842  002048  D7C0               	goto	i2l5663
 14843  00204A  0A07               	xorlw	7	; case 12
 14844  00204C  B4D8               	btfsc	status,2,c
 14845  00204E  D7C8               	goto	i2l5665
 14846  002050                     i2l5671:
 14847                           
 14848                           ;RTC.c: 109: lcdInst(0b10000000);;
 14849  002050  0E80               	movlw	128
 14850  002052  ECA0  F01F         	call	i2_lcdInst
 14851                           
 14852                           ;RTC.c: 110: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
 14853  002056  0EBE               	movlw	low STR_21
 14854  002058  6E0D               	movwf	i2printf@f,c
 14855  00205A  0EFB               	movlw	high STR_21
 14856  00205C  6E0E               	movwf	i2printf@f+1,c
 14857  00205E  C035  F00F         	movff	i2printRTC@INT_time+8,?i2_printf+2
 14858  002062  C036  F010         	movff	i2printRTC@INT_time+9,?i2_printf+3
 14859  002066  0E3D               	movlw	low i2printRTC@month
 14860  002068  6E11               	movwf	?i2_printf+4,c
 14861  00206A  0E00               	movlw	high i2printRTC@month
 14862  00206C  6E12               	movwf	?i2_printf+5,c
 14863  00206E  C031  F013         	movff	i2printRTC@INT_time+4,?i2_printf+6
 14864  002072  C032  F014         	movff	i2printRTC@INT_time+5,?i2_printf+7
 14865  002076  C02F  F015         	movff	i2printRTC@INT_time+2,?i2_printf+8
 14866  00207A  C030  F016         	movff	i2printRTC@INT_time+3,?i2_printf+9
 14867  00207E  C02D  F017         	movff	i2printRTC@INT_time,?i2_printf+10
 14868  002082  C02E  F018         	movff	i2printRTC@INT_time+1,?i2_printf+11
 14869  002086  ECAF  F00A         	call	i2_printf	;wreg free
 14870  00208A  0012               	return		;funcret
 14871  00208C                     __end_ofi2_printRTC:
 14872                           	opt stack 0
 14873                           pclatu	equ	0xFFB
 14874                           pclath	equ	0xFFA
 14875                           tblptru	equ	0xFF8
 14876                           tblptrh	equ	0xFF7
 14877                           tblptrl	equ	0xFF6
 14878                           tablat	equ	0xFF5
 14879                           prodh	equ	0xFF4
 14880                           prodl	equ	0xFF3
 14881                           intcon	equ	0xFF2
 14882                           intcon2	equ	0xFF1
 14883                           intcon3	equ	0xFF0
 14884                           indf0	equ	0xFEF
 14885                           postinc0	equ	0xFEE
 14886                           fsr0h	equ	0xFEA
 14887                           fsr0l	equ	0xFE9
 14888                           wreg	equ	0xFE8
 14889                           postdec1	equ	0xFE5
 14890                           fsr1h	equ	0xFE2
 14891                           fsr1l	equ	0xFE1
 14892                           indf2	equ	0xFDF
 14893                           postinc2	equ	0xFDE
 14894                           postdec2	equ	0xFDD
 14895                           fsr2h	equ	0xFDA
 14896                           fsr2l	equ	0xFD9
 14897                           status	equ	0xFD8
 14898                           
 14899 ;; *************** function i2_strcpy *****************
 14900 ;; Defined at:
 14901 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
 14902 ;; Parameters:    Size  Location     Type
 14903 ;;  to              2    0[COMRAM] PTR unsigned char 
 14904 ;;		 -> printRTC@month(4), UI@month(4), 
 14905 ;;  from            2    2[COMRAM] PTR const unsigned char 
 14906 ;;		 -> STR_62(4), STR_61(4), STR_60(4), STR_59(4), 
 14907 ;;		 -> STR_58(4), STR_57(4), STR_56(4), STR_55(4), 
 14908 ;;		 -> STR_54(4), STR_53(4), STR_52(4), STR_51(4), 
 14909 ;;		 -> STR_20(4), STR_19(4), STR_18(4), STR_17(4), 
 14910 ;;		 -> STR_16(4), STR_15(4), STR_14(4), STR_13(4), 
 14911 ;;		 -> STR_12(4), STR_11(4), STR_10(4), STR_9(4), 
 14912 ;;		 -> STR_8(4), 
 14913 ;; Auto vars:     Size  Location     Type
 14914 ;;  strcpy          2    4[COMRAM] PTR unsigned char 
 14915 ;;		 -> printRTC@month(4), UI@month(4), 
 14916 ;; Return value:  Size  Location     Type
 14917 ;;                  2    0[COMRAM] PTR unsigned char 
 14918 ;; Registers used:
 14919 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 14920 ;; Tracked objects:
 14921 ;;		On entry : 0/0
 14922 ;;		On exit  : 0/0
 14923 ;;		Unchanged: 0/0
 14924 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14925 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14926 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14927 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14928 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14929 ;;Total ram usage:        6 bytes
 14930 ;; Hardware stack levels used:    1
 14931 ;; This function calls:
 14932 ;;		Nothing
 14933 ;; This function is called by:
 14934 ;;		i2_printRTC
 14935 ;; This function uses a non-reentrant model
 14936 ;;
 14937                           
 14938                           	psect	text55
 14939  003ABA                     __ptext55:
 14940                           	opt stack 0
 14941  003ABA                     i2_strcpy:
 14942                           	opt stack 20
 14943                           
 14944                           ;incstack = 0
 14945  003ABA  C001  F005         	movff	i2strcpy@to,i2strcpy@cp
 14946  003ABE  C002  F006         	movff	i2strcpy@to+1,i2strcpy@cp+1
 14947  003AC2  D004               	goto	i2l5319
 14948  003AC4                     i2l5317:
 14949  003AC4  4A05               	infsnz	i2strcpy@cp,f,c
 14950  003AC6  2A06               	incf	i2strcpy@cp+1,f,c
 14951  003AC8  4A03               	infsnz	i2strcpy@from,f,c
 14952  003ACA  2A04               	incf	i2strcpy@from+1,f,c
 14953  003ACC                     i2l5319:
 14954  003ACC  C003  FFF6         	movff	i2strcpy@from,tblptrl
 14955  003AD0  C004  FFF7         	movff	i2strcpy@from+1,tblptrh
 14956  003AD4                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 14957  003AD4  6AF8               	clrf	tblptru,c
 14958  003AD6                     	endif
 14959  003AD6                     	if	0	;tblptru may be non-zero
 14960  003AD6                     	endif
 14961  003AD6  C005  FFD9         	movff	i2strcpy@cp,fsr2l
 14962  003ADA  C006  FFDA         	movff	i2strcpy@cp+1,fsr2h
 14963  003ADE  0008               	tblrd		*
 14964  003AE0  CFF5 FFDF          	movff	tablat,indf2
 14965  003AE4  50DF               	movf	indf2,w,c
 14966  003AE6  B4D8               	btfsc	status,2,c
 14967  003AE8  0012               	return	
 14968  003AEA  D7EC               	goto	i2l5317
 14969  003AEC                     __end_ofi2_strcpy:
 14970                           	opt stack 0
 14971                           pclatu	equ	0xFFB
 14972                           pclath	equ	0xFFA
 14973                           tblptru	equ	0xFF8
 14974                           tblptrh	equ	0xFF7
 14975                           tblptrl	equ	0xFF6
 14976                           tablat	equ	0xFF5
 14977                           prodh	equ	0xFF4
 14978                           prodl	equ	0xFF3
 14979                           intcon	equ	0xFF2
 14980                           intcon2	equ	0xFF1
 14981                           intcon3	equ	0xFF0
 14982                           indf0	equ	0xFEF
 14983                           postinc0	equ	0xFEE
 14984                           fsr0h	equ	0xFEA
 14985                           fsr0l	equ	0xFE9
 14986                           wreg	equ	0xFE8
 14987                           postdec1	equ	0xFE5
 14988                           fsr1h	equ	0xFE2
 14989                           fsr1l	equ	0xFE1
 14990                           indf2	equ	0xFDF
 14991                           postinc2	equ	0xFDE
 14992                           postdec2	equ	0xFDD
 14993                           fsr2h	equ	0xFDA
 14994                           fsr2l	equ	0xFD9
 14995                           status	equ	0xFD8
 14996                           
 14997 ;; *************** function _inputHandler *****************
 14998 ;; Defined at:
 14999 ;;		line 370 in file "UI.c"
 15000 ;; Parameters:    Size  Location     Type
 15001 ;;		None
 15002 ;; Auto vars:     Size  Location     Type
 15003 ;;		None
 15004 ;; Return value:  Size  Location     Type
 15005 ;;                  2   41[COMRAM] int 
 15006 ;; Registers used:
 15007 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15008 ;; Tracked objects:
 15009 ;;		On entry : 0/0
 15010 ;;		On exit  : 0/0
 15011 ;;		Unchanged: 0/0
 15012 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15013 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15014 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15015 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15016 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15017 ;;Total ram usage:        4 bytes
 15018 ;; Hardware stack levels used:    1
 15019 ;; Hardware stack levels required when called:    4
 15020 ;; This function calls:
 15021 ;;		_change_state_to_logs_11
 15022 ;;		_change_state_to_logs_12
 15023 ;;		_change_state_to_logs_22
 15024 ;;		_change_state_to_logs_23
 15025 ;;		_change_state_to_logs_33
 15026 ;;		_change_state_to_logs_34
 15027 ;;		_change_state_to_menu_11
 15028 ;;		_change_state_to_menu_23
 15029 ;;		i2_change_state_to_menu_12
 15030 ;;		i2_change_state_to_menu_22
 15031 ;; This function is called by:
 15032 ;;		_updateMenu
 15033 ;; This function uses a non-reentrant model
 15034 ;;
 15035                           
 15036                           	psect	text56
 15037  00227E                     __ptext56:
 15038                           	opt stack 0
 15039  00227E                     _inputHandler:
 15040                           	opt stack 18
 15041                           
 15042                           ;UI.c: 375: if(firstboot){
 15043                           
 15044                           ;incstack = 0
 15045  00227E  5073               	movf	_firstboot,w,c
 15046  002280  1074               	iorwf	_firstboot+1,w,c
 15047  002282  B4D8               	btfsc	status,2,c
 15048  002284  D00B               	goto	i2l5739
 15049                           
 15050                           ;UI.c: 376: change_state_to_menu_11();
 15051  002286  ECBE  F01D         	call	_change_state_to_menu_11	;wreg free
 15052                           
 15053                           ;UI.c: 377: firstboot = 0;
 15054  00228A  0E00               	movlw	0
 15055  00228C  6E74               	movwf	_firstboot+1,c
 15056  00228E  0E00               	movlw	0
 15057  002290  6E73               	movwf	_firstboot,c
 15058                           
 15059                           ;UI.c: 378: return 0;
 15060  002292  0E00               	movlw	0
 15061  002294  6E2B               	movwf	?_inputHandler+1,c
 15062  002296  0E00               	movlw	0
 15063  002298  6E2A               	movwf	?_inputHandler,c
 15064  00229A  0012               	return	
 15065  00229C                     i2l5739:
 15066                           
 15067                           ;UI.c: 379: }
 15068                           ;UI.c: 380: if (logstate){
 15069  00229C  0100               	movlb	0	; () banked
 15070  00229E  51F8               	movf	_logstate& (0+255),w,b
 15071  0022A0  0100               	movlb	0	; () banked
 15072  0022A2  11F9               	iorwf	(_logstate+1)& (0+255),w,b
 15073  0022A4  B4D8               	btfsc	status,2,c
 15074  0022A6  D0C7               	goto	i2l5857
 15075                           
 15076                           ; BSR set to: 0
 15077                           ;UI.c: 381: if(input == 'C' && PORTBbits.RB1 == 1){
 15078  0022A8  0E43               	movlw	67
 15079  0022AA  187D               	xorwf	_input,w,c	;volatile
 15080  0022AC  A4D8               	btfss	status,2,c
 15081  0022AE  D012               	goto	i2l5757
 15082                           
 15083                           ; BSR set to: 0
 15084  0022B0  B281               	btfsc	3969,1,c	;volatile
 15085  0022B2  D009               	goto	i2l5749
 15086  0022B4  D00F               	goto	i2l5757
 15087  0022B6                     i2l5747:
 15088                           
 15089                           ;UI.c: 384: _delay((unsigned long)((10)*(32000000/4000.0)));
 15090  0022B6  0E68               	movlw	104
 15091  0022B8  6E2C               	movwf	??_inputHandler& (0+255),c
 15092  0022BA  0EE4               	movlw	228
 15093  0022BC                     i2u729_47:
 15094  0022BC  2EE8               	decfsz	wreg,f,c
 15095  0022BE  D7FE               	bra	i2u729_47
 15096  0022C0  2E2C               	decfsz	??_inputHandler& (0+255),f,c
 15097  0022C2  D7FC               	bra	i2u729_47
 15098  0022C4  D000               	nop2	
 15099  0022C6                     i2l5749:
 15100  0022C6  B281               	btfsc	3969,1,c	;volatile
 15101  0022C8  D7F6               	goto	i2l5747
 15102  0022CA                     i2l5751:
 15103                           
 15104                           ;UI.c: 385: }
 15105                           ;UI.c: 386: return 0;
 15106  0022CA  0E00               	movlw	0
 15107  0022CC  6E2B               	movwf	?_inputHandler+1,c
 15108  0022CE  0E00               	movlw	0
 15109  0022D0  6E2A               	movwf	?_inputHandler,c
 15110  0022D2  0012               	return	
 15111  0022D4                     i2l5757:
 15112                           
 15113                           ;UI.c: 388: else if (input == 'D'){
 15114  0022D4  0E44               	movlw	68
 15115  0022D6  187D               	xorwf	_input,w,c	;volatile
 15116  0022D8  A4D8               	btfss	status,2,c
 15117  0022DA  D7F7               	goto	i2l5751
 15118                           
 15119                           ;UI.c: 390: logstate = 0;
 15120  0022DC  0E00               	movlw	0
 15121  0022DE  0100               	movlb	0	; () banked
 15122  0022E0  6FF9               	movwf	(_logstate+1)& (0+255),b
 15123  0022E2  0E00               	movlw	0
 15124  0022E4  6FF8               	movwf	_logstate& (0+255),b
 15125                           
 15126                           ;UI.c: 391: switch(cur_state){
 15127  0022E6  D012               	goto	i2l5775
 15128  0022E8                     i2l5761:
 15129                           
 15130                           ;UI.c: 393: change_state_to_logs_11();
 15131  0022E8  EC36  F01E         	call	_change_state_to_logs_11	;wreg free
 15132                           
 15133                           ;UI.c: 394: break;
 15134  0022EC  D7EE               	goto	i2l5751
 15135  0022EE                     i2l5763:
 15136                           
 15137                           ;UI.c: 396: change_state_to_logs_12();
 15138  0022EE  EC1E  F01E         	call	_change_state_to_logs_12	;wreg free
 15139                           
 15140                           ;UI.c: 397: break;
 15141  0022F2  D7EB               	goto	i2l5751
 15142  0022F4                     i2l5765:
 15143                           
 15144                           ;UI.c: 399: change_state_to_logs_22();
 15145  0022F4  EC06  F01E         	call	_change_state_to_logs_22	;wreg free
 15146                           
 15147                           ;UI.c: 400: break;
 15148  0022F8  D7E8               	goto	i2l5751
 15149  0022FA                     i2l5767:
 15150                           
 15151                           ;UI.c: 402: change_state_to_logs_23();
 15152  0022FA  EC65  F01E         	call	_change_state_to_logs_23	;wreg free
 15153                           
 15154                           ;UI.c: 403: break;
 15155  0022FE  D7E5               	goto	i2l5751
 15156  002300                     i2l5769:
 15157                           
 15158                           ;UI.c: 405: change_state_to_logs_33();
 15159  002300  ECEE  F01D         	call	_change_state_to_logs_33	;wreg free
 15160                           
 15161                           ;UI.c: 406: break;
 15162  002304  D7E2               	goto	i2l5751
 15163  002306                     i2l5771:
 15164                           
 15165                           ;UI.c: 408: change_state_to_logs_34();
 15166  002306  ECD6  F01D         	call	_change_state_to_logs_34	;wreg free
 15167                           
 15168                           ;UI.c: 410: }
 15169                           
 15170                           ;UI.c: 409: break;
 15171  00230A  D7DF               	goto	i2l5751
 15172  00230C                     i2l5775:
 15173  00230C  C0DE  F02C         	movff	_cur_state,??_inputHandler
 15174  002310  C0DF  F02D         	movff	_cur_state+1,??_inputHandler+1
 15175                           
 15176                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
 15177                           ; Switch size 1, requested type "space"
 15178                           ; Number of cases is 2, Range of values is 3 to 4
 15179                           ; switch strategies available:
 15180                           ; Name         Instructions Cycles
 15181                           ; simple_byte            7     4 (average)
 15182                           ;	Chosen strategy is simple_byte
 15183  002314  502D               	movf	??_inputHandler+1,w,c
 15184  002316  0A03               	xorlw	3	; case 3
 15185  002318  B4D8               	btfsc	status,2,c
 15186  00231A  D004               	goto	i2l7647
 15187  00231C  0A07               	xorlw	7	; case 4
 15188  00231E  B4D8               	btfsc	status,2,c
 15189  002320  D00F               	goto	i2l7649
 15190  002322  D7D3               	goto	i2l5751
 15191  002324                     i2l7647:
 15192                           
 15193                           ; Switch size 1, requested type "space"
 15194                           ; Number of cases is 4, Range of values is 243 to 255
 15195                           ; switch strategies available:
 15196                           ; Name         Instructions Cycles
 15197                           ; simple_byte           13     7 (average)
 15198                           ;	Chosen strategy is simple_byte
 15199  002324  502C               	movf	??_inputHandler,w,c
 15200  002326  0AF3               	xorlw	243	; case 243
 15201  002328  B4D8               	btfsc	status,2,c
 15202  00232A  D7DE               	goto	i2l5761
 15203  00232C  0A07               	xorlw	7	; case 244
 15204  00232E  B4D8               	btfsc	status,2,c
 15205  002330  D7DE               	goto	i2l5763
 15206  002332  0A0A               	xorlw	10	; case 254
 15207  002334  B4D8               	btfsc	status,2,c
 15208  002336  D7DE               	goto	i2l5765
 15209  002338  0A01               	xorlw	1	; case 255
 15210  00233A  B4D8               	btfsc	status,2,c
 15211  00233C  D7DE               	goto	i2l5767
 15212  00233E  D7C5               	goto	i2l5751
 15213  002340                     i2l7649:
 15214                           
 15215                           ; Switch size 1, requested type "space"
 15216                           ; Number of cases is 2, Range of values is 9 to 10
 15217                           ; switch strategies available:
 15218                           ; Name         Instructions Cycles
 15219                           ; simple_byte            7     4 (average)
 15220                           ;	Chosen strategy is simple_byte
 15221  002340  502C               	movf	??_inputHandler,w,c
 15222  002342  0A09               	xorlw	9	; case 9
 15223  002344  B4D8               	btfsc	status,2,c
 15224  002346  D7DC               	goto	i2l5769
 15225  002348  0A03               	xorlw	3	; case 10
 15226  00234A  B4D8               	btfsc	status,2,c
 15227  00234C  D7DC               	goto	i2l5771
 15228  00234E  D7BD               	goto	i2l5751
 15229  002350                     i2l5787:
 15230                           
 15231                           ;UI.c: 420: if(cur_state == 11){
 15232  002350  0E0B               	movlw	11
 15233  002352  0100               	movlb	0	; () banked
 15234  002354  19DE               	xorwf	_cur_state& (0+255),w,b
 15235  002356  0100               	movlb	0	; () banked
 15236  002358  11DF               	iorwf	(_cur_state+1)& (0+255),w,b
 15237  00235A  A4D8               	btfss	status,2,c
 15238  00235C  D005               	goto	i2l5795
 15239                           
 15240                           ; BSR set to: 0
 15241                           ;UI.c: 421: return 0;
 15242  00235E  0E00               	movlw	0
 15243  002360  6E2B               	movwf	?_inputHandler+1,c
 15244  002362  0E00               	movlw	0
 15245  002364  6E2A               	movwf	?_inputHandler,c
 15246                           
 15247                           ; BSR set to: 0
 15248  002366  0012               	return	
 15249  002368                     i2l5795:
 15250                           
 15251                           ; BSR set to: 0
 15252                           ;UI.c: 423: else{
 15253                           ;UI.c: 424: change_state_to_menu_11();
 15254  002368  ECBE  F01D         	call	_change_state_to_menu_11	;wreg free
 15255                           
 15256                           ;UI.c: 425: }
 15257                           ;UI.c: 426: return 0;
 15258  00236C  0E00               	movlw	0
 15259  00236E  6E2B               	movwf	?_inputHandler+1,c
 15260  002370  0E00               	movlw	0
 15261  002372  6E2A               	movwf	?_inputHandler,c
 15262  002374  0012               	return	
 15263  002376                     i2l5801:
 15264                           
 15265                           ;UI.c: 428: if(cur_state == 22 | cur_state == 12){
 15266  002376  0E16               	movlw	22
 15267  002378  0100               	movlb	0	; () banked
 15268  00237A  19DE               	xorwf	_cur_state& (0+255),w,b
 15269  00237C  0100               	movlb	0	; () banked
 15270  00237E  11DF               	iorwf	(_cur_state+1)& (0+255),w,b
 15271  002380  B4D8               	btfsc	status,2,c
 15272  002382  D007               	goto	i2l5805
 15273                           
 15274                           ; BSR set to: 0
 15275  002384  0E0C               	movlw	12
 15276  002386  0100               	movlb	0	; () banked
 15277  002388  19DE               	xorwf	_cur_state& (0+255),w,b
 15278  00238A  0100               	movlb	0	; () banked
 15279  00238C  11DF               	iorwf	(_cur_state+1)& (0+255),w,b
 15280  00238E  A4D8               	btfss	status,2,c
 15281  002390  D005               	goto	i2l5811
 15282  002392                     i2l5805:
 15283                           
 15284                           ; BSR set to: 0
 15285                           ;UI.c: 429: return 0;
 15286  002392  0E00               	movlw	0
 15287  002394  6E2B               	movwf	?_inputHandler+1,c
 15288  002396  0E00               	movlw	0
 15289  002398  6E2A               	movwf	?_inputHandler,c
 15290                           
 15291                           ; BSR set to: 0
 15292  00239A  0012               	return	
 15293  00239C                     i2l5811:
 15294                           
 15295                           ; BSR set to: 0
 15296                           ;UI.c: 431: else if(cur_state == 23){
 15297  00239C  0E17               	movlw	23
 15298  00239E  0100               	movlb	0	; () banked
 15299  0023A0  19DE               	xorwf	_cur_state& (0+255),w,b
 15300  0023A2  0100               	movlb	0	; () banked
 15301  0023A4  11DF               	iorwf	(_cur_state+1)& (0+255),w,b
 15302  0023A6  A4D8               	btfss	status,2,c
 15303  0023A8  D003               	goto	i2l5815
 15304                           
 15305                           ; BSR set to: 0
 15306                           ;UI.c: 432: change_state_to_menu_22();
 15307  0023AA  EC76  F01D         	call	i2_change_state_to_menu_22	;wreg free
 15308                           
 15309                           ;UI.c: 433: }
 15310  0023AE  D002               	goto	i2l5817
 15311  0023B0                     i2l5815:
 15312                           
 15313                           ;UI.c: 434: else{
 15314                           ;UI.c: 435: change_state_to_menu_12();
 15315  0023B0  EC8E  F01D         	call	i2_change_state_to_menu_12	;wreg free
 15316  0023B4                     i2l5817:
 15317                           
 15318                           ;UI.c: 436: }
 15319                           ;UI.c: 437: return 0;
 15320  0023B4  0E00               	movlw	0
 15321  0023B6  6E2B               	movwf	?_inputHandler+1,c
 15322  0023B8  0E00               	movlw	0
 15323  0023BA  6E2A               	movwf	?_inputHandler,c
 15324  0023BC  0012               	return	
 15325  0023BE                     i2l5821:
 15326                           
 15327                           ;UI.c: 439: if(cur_state == 23){
 15328  0023BE  0E17               	movlw	23
 15329  0023C0  0100               	movlb	0	; () banked
 15330  0023C2  19DE               	xorwf	_cur_state& (0+255),w,b
 15331  0023C4  0100               	movlb	0	; () banked
 15332  0023C6  11DF               	iorwf	(_cur_state+1)& (0+255),w,b
 15333  0023C8  A4D8               	btfss	status,2,c
 15334  0023CA  D005               	goto	i2l5829
 15335                           
 15336                           ; BSR set to: 0
 15337                           ;UI.c: 440: return 0;
 15338  0023CC  0E00               	movlw	0
 15339  0023CE  6E2B               	movwf	?_inputHandler+1,c
 15340  0023D0  0E00               	movlw	0
 15341  0023D2  6E2A               	movwf	?_inputHandler,c
 15342                           
 15343                           ; BSR set to: 0
 15344  0023D4  0012               	return	
 15345  0023D6                     i2l5829:
 15346                           
 15347                           ; BSR set to: 0
 15348                           ;UI.c: 442: else{
 15349                           ;UI.c: 443: change_state_to_menu_23();
 15350  0023D6  ECA6  F01D         	call	_change_state_to_menu_23	;wreg free
 15351                           
 15352                           ;UI.c: 444: }
 15353                           ;UI.c: 445: return 0;
 15354  0023DA  0E00               	movlw	0
 15355  0023DC  6E2B               	movwf	?_inputHandler+1,c
 15356  0023DE  0E00               	movlw	0
 15357  0023E0  6E2A               	movwf	?_inputHandler,c
 15358  0023E2  0012               	return	
 15359  0023E4                     i2l5835:
 15360                           
 15361                           ;UI.c: 448: up = 1;
 15362  0023E4  0E00               	movlw	0
 15363  0023E6  6E76               	movwf	_up+1,c
 15364  0023E8  0E01               	movlw	1
 15365  0023EA  6E75               	movwf	_up,c
 15366                           
 15367                           ;UI.c: 449: return 1;
 15368  0023EC  0E00               	movlw	0
 15369  0023EE  6E2B               	movwf	?_inputHandler+1,c
 15370  0023F0  0E01               	movlw	1
 15371  0023F2  6E2A               	movwf	?_inputHandler,c
 15372  0023F4  0012               	return	
 15373  0023F6                     i2l5839:
 15374                           
 15375                           ;UI.c: 451: down = 1;
 15376  0023F6  0E00               	movlw	0
 15377  0023F8  6E68               	movwf	_down+1,c
 15378  0023FA  0E01               	movlw	1
 15379  0023FC  6E67               	movwf	_down,c
 15380                           
 15381                           ;UI.c: 452: return 1;
 15382  0023FE  0E00               	movlw	0
 15383  002400  6E2B               	movwf	?_inputHandler+1,c
 15384  002402  0E01               	movlw	1
 15385  002404  6E2A               	movwf	?_inputHandler,c
 15386  002406  0012               	return	
 15387  002408                     i2l5843:
 15388                           
 15389                           ;UI.c: 454: enter = 1;
 15390  002408  0E00               	movlw	0
 15391  00240A  6E6A               	movwf	_enter+1,c
 15392  00240C  0E01               	movlw	1
 15393  00240E  6E69               	movwf	_enter,c
 15394                           
 15395                           ;UI.c: 455: return 1;
 15396  002410  0E00               	movlw	0
 15397  002412  6E2B               	movwf	?_inputHandler+1,c
 15398  002414  0E01               	movlw	1
 15399  002416  6E2A               	movwf	?_inputHandler,c
 15400  002418  0012               	return	
 15401  00241A                     i2l5847:
 15402                           
 15403                           ;UI.c: 457: back = 1;
 15404  00241A  0E00               	movlw	0
 15405  00241C  6E5C               	movwf	_back+1,c
 15406  00241E  0E01               	movlw	1
 15407  002420  6E5B               	movwf	_back,c
 15408                           
 15409                           ;UI.c: 458: return 1;
 15410  002422  0E00               	movlw	0
 15411  002424  6E2B               	movwf	?_inputHandler+1,c
 15412  002426  0E01               	movlw	1
 15413  002428  6E2A               	movwf	?_inputHandler,c
 15414  00242A  0012               	return	
 15415  00242C                     i2l5851:
 15416                           
 15417                           ;UI.c: 461: return 1;
 15418  00242C  0E00               	movlw	0
 15419  00242E  6E2B               	movwf	?_inputHandler+1,c
 15420  002430  0E01               	movlw	1
 15421  002432  6E2A               	movwf	?_inputHandler,c
 15422                           
 15423                           ;UI.c: 462: }
 15424  002434  0012               	return	
 15425  002436                     i2l5857:
 15426  002436  507D               	movf	_input,w,c	;volatile
 15427                           
 15428                           ; Switch size 1, requested type "space"
 15429                           ; Number of cases is 7, Range of values is 49 to 68
 15430                           ; switch strategies available:
 15431                           ; Name         Instructions Cycles
 15432                           ; simple_byte           22    12 (average)
 15433                           ;	Chosen strategy is simple_byte
 15434  002438  0A31               	xorlw	49	; case 49
 15435  00243A  B4D8               	btfsc	status,2,c
 15436  00243C  D789               	goto	i2l5787
 15437  00243E  0A03               	xorlw	3	; case 50
 15438  002440  B4D8               	btfsc	status,2,c
 15439  002442  D799               	goto	i2l5801
 15440  002444  0A01               	xorlw	1	; case 51
 15441  002446  B4D8               	btfsc	status,2,c
 15442  002448  D7BA               	goto	i2l5821
 15443  00244A  0A72               	xorlw	114	; case 65
 15444  00244C  B4D8               	btfsc	status,2,c
 15445  00244E  D7CA               	goto	i2l5835
 15446  002450  0A03               	xorlw	3	; case 66
 15447  002452  B4D8               	btfsc	status,2,c
 15448  002454  D7D0               	goto	i2l5839
 15449  002456  0A01               	xorlw	1	; case 67
 15450  002458  B4D8               	btfsc	status,2,c
 15451  00245A  D7D6               	goto	i2l5843
 15452  00245C  0A07               	xorlw	7	; case 68
 15453  00245E  B4D8               	btfsc	status,2,c
 15454  002460  D7DC               	goto	i2l5847
 15455  002462  D7E4               	goto	i2l5851
 15456  002464                     __end_of_inputHandler:
 15457                           	opt stack 0
 15458                           pclatu	equ	0xFFB
 15459                           pclath	equ	0xFFA
 15460                           tblptru	equ	0xFF8
 15461                           tblptrh	equ	0xFF7
 15462                           tblptrl	equ	0xFF6
 15463                           tablat	equ	0xFF5
 15464                           prodh	equ	0xFF4
 15465                           prodl	equ	0xFF3
 15466                           intcon	equ	0xFF2
 15467                           intcon2	equ	0xFF1
 15468                           intcon3	equ	0xFF0
 15469                           indf0	equ	0xFEF
 15470                           postinc0	equ	0xFEE
 15471                           fsr0h	equ	0xFEA
 15472                           fsr0l	equ	0xFE9
 15473                           wreg	equ	0xFE8
 15474                           postdec1	equ	0xFE5
 15475                           fsr1h	equ	0xFE2
 15476                           fsr1l	equ	0xFE1
 15477                           indf2	equ	0xFDF
 15478                           postinc2	equ	0xFDE
 15479                           postdec2	equ	0xFDD
 15480                           fsr2h	equ	0xFDA
 15481                           fsr2l	equ	0xFD9
 15482                           status	equ	0xFD8
 15483                           
 15484 ;; *************** function i2_change_state_to_menu_22 *****************
 15485 ;; Defined at:
 15486 ;;		line 496 in file "UI.c"
 15487 ;; Parameters:    Size  Location     Type
 15488 ;;		None
 15489 ;; Auto vars:     Size  Location     Type
 15490 ;;		None
 15491 ;; Return value:  Size  Location     Type
 15492 ;;                  1    wreg      void 
 15493 ;; Registers used:
 15494 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15495 ;; Tracked objects:
 15496 ;;		On entry : 0/0
 15497 ;;		On exit  : 0/0
 15498 ;;		Unchanged: 0/0
 15499 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15500 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15501 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15502 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15503 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15504 ;;Total ram usage:        0 bytes
 15505 ;; Hardware stack levels used:    1
 15506 ;; Hardware stack levels required when called:    3
 15507 ;; This function calls:
 15508 ;;		i2_lcdInst
 15509 ;;		i2_printf
 15510 ;; This function is called by:
 15511 ;;		_updateMenu
 15512 ;;		_inputHandler
 15513 ;; This function uses a non-reentrant model
 15514 ;;
 15515                           
 15516                           	psect	text57
 15517  003AEC                     __ptext57:
 15518                           	opt stack 0
 15519  003AEC                     i2_change_state_to_menu_22:
 15520                           	opt stack 19
 15521                           
 15522                           ;UI.c: 497: cur_state = 22;
 15523                           
 15524                           ;incstack = 0
 15525  003AEC  0E00               	movlw	0
 15526  003AEE  0100               	movlb	0	; () banked
 15527  003AF0  6FDF               	movwf	(_cur_state+1)& (0+255),b
 15528  003AF2  0E16               	movlw	22
 15529  003AF4  6FDE               	movwf	_cur_state& (0+255),b
 15530                           
 15531                           ; BSR set to: 0
 15532                           ;UI.c: 499: lcdInst(0b10000000);;
 15533  003AF6  0E80               	movlw	128
 15534  003AF8  ECA0  F01F         	call	i2_lcdInst
 15535                           
 15536                           ;UI.c: 500: printf("2. SORT        <");
 15537  003AFC  0E00               	movlw	low STR_34
 15538  003AFE  6E0D               	movwf	i2printf@f,c
 15539  003B00  0EFE               	movlw	high STR_34
 15540  003B02  6E0E               	movwf	i2printf@f+1,c
 15541  003B04  ECAF  F00A         	call	i2_printf	;wreg free
 15542                           
 15543                           ;UI.c: 501: lcdInst(0b11000000);;
 15544  003B08  0EC0               	movlw	192
 15545  003B0A  ECA0  F01F         	call	i2_lcdInst
 15546                           
 15547                           ;UI.c: 502: printf("3. LOGS         ");
 15548  003B0E  0E45               	movlw	low STR_36
 15549  003B10  6E0D               	movwf	i2printf@f,c
 15550  003B12  0EFD               	movlw	high STR_36
 15551  003B14  6E0E               	movwf	i2printf@f+1,c
 15552  003B16  ECAF  F00A         	call	i2_printf	;wreg free
 15553  003B1A  0012               	return		;funcret
 15554  003B1C                     __end_ofi2_change_state_to_menu_22:
 15555                           	opt stack 0
 15556                           pclatu	equ	0xFFB
 15557                           pclath	equ	0xFFA
 15558                           tblptru	equ	0xFF8
 15559                           tblptrh	equ	0xFF7
 15560                           tblptrl	equ	0xFF6
 15561                           tablat	equ	0xFF5
 15562                           prodh	equ	0xFF4
 15563                           prodl	equ	0xFF3
 15564                           intcon	equ	0xFF2
 15565                           intcon2	equ	0xFF1
 15566                           intcon3	equ	0xFF0
 15567                           indf0	equ	0xFEF
 15568                           postinc0	equ	0xFEE
 15569                           fsr0h	equ	0xFEA
 15570                           fsr0l	equ	0xFE9
 15571                           wreg	equ	0xFE8
 15572                           postdec1	equ	0xFE5
 15573                           fsr1h	equ	0xFE2
 15574                           fsr1l	equ	0xFE1
 15575                           indf2	equ	0xFDF
 15576                           postinc2	equ	0xFDE
 15577                           postdec2	equ	0xFDD
 15578                           fsr2h	equ	0xFDA
 15579                           fsr2l	equ	0xFD9
 15580                           status	equ	0xFD8
 15581                           
 15582 ;; *************** function i2_change_state_to_menu_12 *****************
 15583 ;; Defined at:
 15584 ;;		line 488 in file "UI.c"
 15585 ;; Parameters:    Size  Location     Type
 15586 ;;		None
 15587 ;; Auto vars:     Size  Location     Type
 15588 ;;		None
 15589 ;; Return value:  Size  Location     Type
 15590 ;;                  1    wreg      void 
 15591 ;; Registers used:
 15592 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15593 ;; Tracked objects:
 15594 ;;		On entry : 0/0
 15595 ;;		On exit  : 0/0
 15596 ;;		Unchanged: 0/0
 15597 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15598 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15599 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15600 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15601 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15602 ;;Total ram usage:        0 bytes
 15603 ;; Hardware stack levels used:    1
 15604 ;; Hardware stack levels required when called:    3
 15605 ;; This function calls:
 15606 ;;		i2_lcdInst
 15607 ;;		i2_printf
 15608 ;; This function is called by:
 15609 ;;		_updateMenu
 15610 ;;		_inputHandler
 15611 ;; This function uses a non-reentrant model
 15612 ;;
 15613                           
 15614                           	psect	text58
 15615  003B1C                     __ptext58:
 15616                           	opt stack 0
 15617  003B1C                     i2_change_state_to_menu_12:
 15618                           	opt stack 19
 15619                           
 15620                           ;UI.c: 489: cur_state = 12;
 15621                           
 15622                           ;incstack = 0
 15623  003B1C  0E00               	movlw	0
 15624  003B1E  0100               	movlb	0	; () banked
 15625  003B20  6FDF               	movwf	(_cur_state+1)& (0+255),b
 15626  003B22  0E0C               	movlw	12
 15627  003B24  6FDE               	movwf	_cur_state& (0+255),b
 15628                           
 15629                           ; BSR set to: 0
 15630                           ;UI.c: 491: lcdInst(0b10000000);;
 15631  003B26  0E80               	movlw	128
 15632  003B28  ECA0  F01F         	call	i2_lcdInst
 15633                           
 15634                           ;UI.c: 492: printf("1. DATE/TIME    ");
 15635  003B2C  0E67               	movlw	low STR_33
 15636  003B2E  6E0D               	movwf	i2printf@f,c
 15637  003B30  0EFD               	movlw	high STR_33
 15638  003B32  6E0E               	movwf	i2printf@f+1,c
 15639  003B34  ECAF  F00A         	call	i2_printf	;wreg free
 15640                           
 15641                           ;UI.c: 493: lcdInst(0b11000000);;
 15642  003B38  0EC0               	movlw	192
 15643  003B3A  ECA0  F01F         	call	i2_lcdInst
 15644                           
 15645                           ;UI.c: 494: printf("2. SORT        <");
 15646  003B3E  0E00               	movlw	low STR_34
 15647  003B40  6E0D               	movwf	i2printf@f,c
 15648  003B42  0EFE               	movlw	high STR_34
 15649  003B44  6E0E               	movwf	i2printf@f+1,c
 15650  003B46  ECAF  F00A         	call	i2_printf	;wreg free
 15651  003B4A  0012               	return		;funcret
 15652  003B4C                     __end_ofi2_change_state_to_menu_12:
 15653                           	opt stack 0
 15654                           pclatu	equ	0xFFB
 15655                           pclath	equ	0xFFA
 15656                           tblptru	equ	0xFF8
 15657                           tblptrh	equ	0xFF7
 15658                           tblptrl	equ	0xFF6
 15659                           tablat	equ	0xFF5
 15660                           prodh	equ	0xFF4
 15661                           prodl	equ	0xFF3
 15662                           intcon	equ	0xFF2
 15663                           intcon2	equ	0xFF1
 15664                           intcon3	equ	0xFF0
 15665                           indf0	equ	0xFEF
 15666                           postinc0	equ	0xFEE
 15667                           fsr0h	equ	0xFEA
 15668                           fsr0l	equ	0xFE9
 15669                           wreg	equ	0xFE8
 15670                           postdec1	equ	0xFE5
 15671                           fsr1h	equ	0xFE2
 15672                           fsr1l	equ	0xFE1
 15673                           indf2	equ	0xFDF
 15674                           postinc2	equ	0xFDE
 15675                           postdec2	equ	0xFDD
 15676                           fsr2h	equ	0xFDA
 15677                           fsr2l	equ	0xFD9
 15678                           status	equ	0xFD8
 15679                           
 15680 ;; *************** function _change_state_to_menu_23 *****************
 15681 ;; Defined at:
 15682 ;;		line 504 in file "UI.c"
 15683 ;; Parameters:    Size  Location     Type
 15684 ;;		None
 15685 ;; Auto vars:     Size  Location     Type
 15686 ;;		None
 15687 ;; Return value:  Size  Location     Type
 15688 ;;                  1    wreg      void 
 15689 ;; Registers used:
 15690 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15691 ;; Tracked objects:
 15692 ;;		On entry : 0/0
 15693 ;;		On exit  : 0/0
 15694 ;;		Unchanged: 0/0
 15695 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15696 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15697 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15698 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15699 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15700 ;;Total ram usage:        0 bytes
 15701 ;; Hardware stack levels used:    1
 15702 ;; Hardware stack levels required when called:    3
 15703 ;; This function calls:
 15704 ;;		i2_lcdInst
 15705 ;;		i2_printf
 15706 ;; This function is called by:
 15707 ;;		_updateMenu
 15708 ;;		_inputHandler
 15709 ;; This function uses a non-reentrant model
 15710 ;;
 15711                           
 15712                           	psect	text59
 15713  003B4C                     __ptext59:
 15714                           	opt stack 0
 15715  003B4C                     _change_state_to_menu_23:
 15716                           	opt stack 18
 15717                           
 15718                           ;UI.c: 505: cur_state = 23;
 15719                           
 15720                           ;incstack = 0
 15721  003B4C  0E00               	movlw	0
 15722  003B4E  0100               	movlb	0	; () banked
 15723  003B50  6FDF               	movwf	(_cur_state+1)& (0+255),b
 15724  003B52  0E17               	movlw	23
 15725  003B54  6FDE               	movwf	_cur_state& (0+255),b
 15726                           
 15727                           ; BSR set to: 0
 15728                           ;UI.c: 507: lcdInst(0b10000000);;
 15729  003B56  0E80               	movlw	128
 15730  003B58  ECA0  F01F         	call	i2_lcdInst
 15731                           
 15732                           ;UI.c: 508: printf("2. SORT         ");
 15733  003B5C  0E56               	movlw	low STR_32
 15734  003B5E  6E0D               	movwf	i2printf@f,c
 15735  003B60  0EFD               	movlw	high STR_32
 15736  003B62  6E0E               	movwf	i2printf@f+1,c
 15737  003B64  ECAF  F00A         	call	i2_printf	;wreg free
 15738                           
 15739                           ;UI.c: 509: lcdInst(0b11000000);;
 15740  003B68  0EC0               	movlw	192
 15741  003B6A  ECA0  F01F         	call	i2_lcdInst
 15742                           
 15743                           ;UI.c: 510: printf("3. LOGS        <");
 15744  003B6E  0EEF               	movlw	low STR_38
 15745  003B70  6E0D               	movwf	i2printf@f,c
 15746  003B72  0EFD               	movlw	high STR_38
 15747  003B74  6E0E               	movwf	i2printf@f+1,c
 15748  003B76  ECAF  F00A         	call	i2_printf	;wreg free
 15749  003B7A  0012               	return		;funcret
 15750  003B7C                     __end_of_change_state_to_menu_23:
 15751                           	opt stack 0
 15752                           pclatu	equ	0xFFB
 15753                           pclath	equ	0xFFA
 15754                           tblptru	equ	0xFF8
 15755                           tblptrh	equ	0xFF7
 15756                           tblptrl	equ	0xFF6
 15757                           tablat	equ	0xFF5
 15758                           prodh	equ	0xFF4
 15759                           prodl	equ	0xFF3
 15760                           intcon	equ	0xFF2
 15761                           intcon2	equ	0xFF1
 15762                           intcon3	equ	0xFF0
 15763                           indf0	equ	0xFEF
 15764                           postinc0	equ	0xFEE
 15765                           fsr0h	equ	0xFEA
 15766                           fsr0l	equ	0xFE9
 15767                           wreg	equ	0xFE8
 15768                           postdec1	equ	0xFE5
 15769                           fsr1h	equ	0xFE2
 15770                           fsr1l	equ	0xFE1
 15771                           indf2	equ	0xFDF
 15772                           postinc2	equ	0xFDE
 15773                           postdec2	equ	0xFDD
 15774                           fsr2h	equ	0xFDA
 15775                           fsr2l	equ	0xFD9
 15776                           status	equ	0xFD8
 15777                           
 15778 ;; *************** function _change_state_to_menu_11 *****************
 15779 ;; Defined at:
 15780 ;;		line 480 in file "UI.c"
 15781 ;; Parameters:    Size  Location     Type
 15782 ;;		None
 15783 ;; Auto vars:     Size  Location     Type
 15784 ;;		None
 15785 ;; Return value:  Size  Location     Type
 15786 ;;                  1    wreg      void 
 15787 ;; Registers used:
 15788 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15789 ;; Tracked objects:
 15790 ;;		On entry : 0/0
 15791 ;;		On exit  : 0/0
 15792 ;;		Unchanged: 0/0
 15793 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15794 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15795 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15796 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15797 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15798 ;;Total ram usage:        0 bytes
 15799 ;; Hardware stack levels used:    1
 15800 ;; Hardware stack levels required when called:    3
 15801 ;; This function calls:
 15802 ;;		i2_lcdInst
 15803 ;;		i2_printf
 15804 ;; This function is called by:
 15805 ;;		_updateMenu
 15806 ;;		_inputHandler
 15807 ;; This function uses a non-reentrant model
 15808 ;;
 15809                           
 15810                           	psect	text60
 15811  003B7C                     __ptext60:
 15812                           	opt stack 0
 15813  003B7C                     _change_state_to_menu_11:
 15814                           	opt stack 18
 15815                           
 15816                           ;UI.c: 481: cur_state = 11;
 15817                           
 15818                           ;incstack = 0
 15819  003B7C  0E00               	movlw	0
 15820  003B7E  0100               	movlb	0	; () banked
 15821  003B80  6FDF               	movwf	(_cur_state+1)& (0+255),b
 15822  003B82  0E0B               	movlw	11
 15823  003B84  6FDE               	movwf	_cur_state& (0+255),b
 15824                           
 15825                           ; BSR set to: 0
 15826                           ;UI.c: 483: lcdInst(0b10000000);;
 15827  003B86  0E80               	movlw	128
 15828  003B88  ECA0  F01F         	call	i2_lcdInst
 15829                           
 15830                           ;UI.c: 484: printf("1. DATE/TIME   <");
 15831  003B8C  0E11               	movlw	low STR_31
 15832  003B8E  6E0D               	movwf	i2printf@f,c
 15833  003B90  0EFE               	movlw	high STR_31
 15834  003B92  6E0E               	movwf	i2printf@f+1,c
 15835  003B94  ECAF  F00A         	call	i2_printf	;wreg free
 15836                           
 15837                           ;UI.c: 485: lcdInst(0b11000000);;
 15838  003B98  0EC0               	movlw	192
 15839  003B9A  ECA0  F01F         	call	i2_lcdInst
 15840                           
 15841                           ;UI.c: 486: printf("2. SORT         ");
 15842  003B9E  0E56               	movlw	low STR_32
 15843  003BA0  6E0D               	movwf	i2printf@f,c
 15844  003BA2  0EFD               	movlw	high STR_32
 15845  003BA4  6E0E               	movwf	i2printf@f+1,c
 15846  003BA6  ECAF  F00A         	call	i2_printf	;wreg free
 15847  003BAA  0012               	return		;funcret
 15848  003BAC                     __end_of_change_state_to_menu_11:
 15849                           	opt stack 0
 15850                           pclatu	equ	0xFFB
 15851                           pclath	equ	0xFFA
 15852                           tblptru	equ	0xFF8
 15853                           tblptrh	equ	0xFF7
 15854                           tblptrl	equ	0xFF6
 15855                           tablat	equ	0xFF5
 15856                           prodh	equ	0xFF4
 15857                           prodl	equ	0xFF3
 15858                           intcon	equ	0xFF2
 15859                           intcon2	equ	0xFF1
 15860                           intcon3	equ	0xFF0
 15861                           indf0	equ	0xFEF
 15862                           postinc0	equ	0xFEE
 15863                           fsr0h	equ	0xFEA
 15864                           fsr0l	equ	0xFE9
 15865                           wreg	equ	0xFE8
 15866                           postdec1	equ	0xFE5
 15867                           fsr1h	equ	0xFE2
 15868                           fsr1l	equ	0xFE1
 15869                           indf2	equ	0xFDF
 15870                           postinc2	equ	0xFDE
 15871                           postdec2	equ	0xFDD
 15872                           fsr2h	equ	0xFDA
 15873                           fsr2l	equ	0xFD9
 15874                           status	equ	0xFD8
 15875                           
 15876 ;; *************** function _change_state_to_logs_34 *****************
 15877 ;; Defined at:
 15878 ;;		line 547 in file "UI.c"
 15879 ;; Parameters:    Size  Location     Type
 15880 ;;		None
 15881 ;; Auto vars:     Size  Location     Type
 15882 ;;		None
 15883 ;; Return value:  Size  Location     Type
 15884 ;;                  1    wreg      void 
 15885 ;; Registers used:
 15886 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15887 ;; Tracked objects:
 15888 ;;		On entry : 0/0
 15889 ;;		On exit  : 0/0
 15890 ;;		Unchanged: 0/0
 15891 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15892 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15893 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15894 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15895 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15896 ;;Total ram usage:        0 bytes
 15897 ;; Hardware stack levels used:    1
 15898 ;; Hardware stack levels required when called:    3
 15899 ;; This function calls:
 15900 ;;		i2_lcdInst
 15901 ;;		i2_printf
 15902 ;; This function is called by:
 15903 ;;		_updateMenu
 15904 ;;		_inputHandler
 15905 ;; This function uses a non-reentrant model
 15906 ;;
 15907                           
 15908                           	psect	text61
 15909  003BAC                     __ptext61:
 15910                           	opt stack 0
 15911  003BAC                     _change_state_to_logs_34:
 15912                           	opt stack 18
 15913                           
 15914                           ;UI.c: 548: cur_state = 1034;
 15915                           
 15916                           ;incstack = 0
 15917  003BAC  0E04               	movlw	4
 15918  003BAE  0100               	movlb	0	; () banked
 15919  003BB0  6FDF               	movwf	(_cur_state+1)& (0+255),b
 15920  003BB2  0E0A               	movlw	10
 15921  003BB4  6FDE               	movwf	_cur_state& (0+255),b
 15922                           
 15923                           ; BSR set to: 0
 15924                           ;UI.c: 549: lcdInst(0b10000000);;
 15925  003BB6  0E80               	movlw	128
 15926  003BB8  ECA0  F01F         	call	i2_lcdInst
 15927                           
 15928                           ;UI.c: 550: printf("LOG 3           ");
 15929  003BBC  0E23               	movlw	low STR_44
 15930  003BBE  6E0D               	movwf	i2printf@f,c
 15931  003BC0  0EFD               	movlw	high STR_44
 15932  003BC2  6E0E               	movwf	i2printf@f+1,c
 15933  003BC4  ECAF  F00A         	call	i2_printf	;wreg free
 15934                           
 15935                           ;UI.c: 551: lcdInst(0b11000000);;
 15936  003BC8  0EC0               	movlw	192
 15937  003BCA  ECA0  F01F         	call	i2_lcdInst
 15938                           
 15939                           ;UI.c: 552: printf("LOG 4          <");
 15940  003BCE  0EDE               	movlw	low STR_50
 15941  003BD0  6E0D               	movwf	i2printf@f,c
 15942  003BD2  0EFD               	movlw	high STR_50
 15943  003BD4  6E0E               	movwf	i2printf@f+1,c
 15944  003BD6  ECAF  F00A         	call	i2_printf	;wreg free
 15945  003BDA  0012               	return		;funcret
 15946  003BDC                     __end_of_change_state_to_logs_34:
 15947                           	opt stack 0
 15948                           pclatu	equ	0xFFB
 15949                           pclath	equ	0xFFA
 15950                           tblptru	equ	0xFF8
 15951                           tblptrh	equ	0xFF7
 15952                           tblptrl	equ	0xFF6
 15953                           tablat	equ	0xFF5
 15954                           prodh	equ	0xFF4
 15955                           prodl	equ	0xFF3
 15956                           intcon	equ	0xFF2
 15957                           intcon2	equ	0xFF1
 15958                           intcon3	equ	0xFF0
 15959                           indf0	equ	0xFEF
 15960                           postinc0	equ	0xFEE
 15961                           fsr0h	equ	0xFEA
 15962                           fsr0l	equ	0xFE9
 15963                           wreg	equ	0xFE8
 15964                           postdec1	equ	0xFE5
 15965                           fsr1h	equ	0xFE2
 15966                           fsr1l	equ	0xFE1
 15967                           indf2	equ	0xFDF
 15968                           postinc2	equ	0xFDE
 15969                           postdec2	equ	0xFDD
 15970                           fsr2h	equ	0xFDA
 15971                           fsr2l	equ	0xFD9
 15972                           status	equ	0xFD8
 15973                           
 15974 ;; *************** function _change_state_to_logs_33 *****************
 15975 ;; Defined at:
 15976 ;;		line 540 in file "UI.c"
 15977 ;; Parameters:    Size  Location     Type
 15978 ;;		None
 15979 ;; Auto vars:     Size  Location     Type
 15980 ;;		None
 15981 ;; Return value:  Size  Location     Type
 15982 ;;                  1    wreg      void 
 15983 ;; Registers used:
 15984 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15985 ;; Tracked objects:
 15986 ;;		On entry : 0/0
 15987 ;;		On exit  : 0/0
 15988 ;;		Unchanged: 0/0
 15989 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15990 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15991 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15992 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15993 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15994 ;;Total ram usage:        0 bytes
 15995 ;; Hardware stack levels used:    1
 15996 ;; Hardware stack levels required when called:    3
 15997 ;; This function calls:
 15998 ;;		i2_lcdInst
 15999 ;;		i2_printf
 16000 ;; This function is called by:
 16001 ;;		_updateMenu
 16002 ;;		_inputHandler
 16003 ;; This function uses a non-reentrant model
 16004 ;;
 16005                           
 16006                           	psect	text62
 16007  003BDC                     __ptext62:
 16008                           	opt stack 0
 16009  003BDC                     _change_state_to_logs_33:
 16010                           	opt stack 18
 16011                           
 16012                           ;UI.c: 541: cur_state = 1033;
 16013                           
 16014                           ;incstack = 0
 16015  003BDC  0E04               	movlw	4
 16016  003BDE  0100               	movlb	0	; () banked
 16017  003BE0  6FDF               	movwf	(_cur_state+1)& (0+255),b
 16018  003BE2  0E09               	movlw	9
 16019  003BE4  6FDE               	movwf	_cur_state& (0+255),b
 16020                           
 16021                           ; BSR set to: 0
 16022                           ;UI.c: 542: lcdInst(0b10000000);;
 16023  003BE6  0E80               	movlw	128
 16024  003BE8  ECA0  F01F         	call	i2_lcdInst
 16025                           
 16026                           ;UI.c: 543: printf("LOG 3          <");
 16027  003BEC  0ECD               	movlw	low STR_46
 16028  003BEE  6E0D               	movwf	i2printf@f,c
 16029  003BF0  0EFD               	movlw	high STR_46
 16030  003BF2  6E0E               	movwf	i2printf@f+1,c
 16031  003BF4  ECAF  F00A         	call	i2_printf	;wreg free
 16032                           
 16033                           ;UI.c: 544: lcdInst(0b11000000);;
 16034  003BF8  0EC0               	movlw	192
 16035  003BFA  ECA0  F01F         	call	i2_lcdInst
 16036                           
 16037                           ;UI.c: 545: printf("LOG 4           ");
 16038  003BFE  0E34               	movlw	low STR_48
 16039  003C00  6E0D               	movwf	i2printf@f,c
 16040  003C02  0EFD               	movlw	high STR_48
 16041  003C04  6E0E               	movwf	i2printf@f+1,c
 16042  003C06  ECAF  F00A         	call	i2_printf	;wreg free
 16043  003C0A  0012               	return		;funcret
 16044  003C0C                     __end_of_change_state_to_logs_33:
 16045                           	opt stack 0
 16046                           pclatu	equ	0xFFB
 16047                           pclath	equ	0xFFA
 16048                           tblptru	equ	0xFF8
 16049                           tblptrh	equ	0xFF7
 16050                           tblptrl	equ	0xFF6
 16051                           tablat	equ	0xFF5
 16052                           prodh	equ	0xFF4
 16053                           prodl	equ	0xFF3
 16054                           intcon	equ	0xFF2
 16055                           intcon2	equ	0xFF1
 16056                           intcon3	equ	0xFF0
 16057                           indf0	equ	0xFEF
 16058                           postinc0	equ	0xFEE
 16059                           fsr0h	equ	0xFEA
 16060                           fsr0l	equ	0xFE9
 16061                           wreg	equ	0xFE8
 16062                           postdec1	equ	0xFE5
 16063                           fsr1h	equ	0xFE2
 16064                           fsr1l	equ	0xFE1
 16065                           indf2	equ	0xFDF
 16066                           postinc2	equ	0xFDE
 16067                           postdec2	equ	0xFDD
 16068                           fsr2h	equ	0xFDA
 16069                           fsr2l	equ	0xFD9
 16070                           status	equ	0xFD8
 16071                           
 16072 ;; *************** function _change_state_to_logs_23 *****************
 16073 ;; Defined at:
 16074 ;;		line 533 in file "UI.c"
 16075 ;; Parameters:    Size  Location     Type
 16076 ;;		None
 16077 ;; Auto vars:     Size  Location     Type
 16078 ;;		None
 16079 ;; Return value:  Size  Location     Type
 16080 ;;                  1    wreg      void 
 16081 ;; Registers used:
 16082 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16083 ;; Tracked objects:
 16084 ;;		On entry : 0/0
 16085 ;;		On exit  : 0/0
 16086 ;;		Unchanged: 0/0
 16087 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16088 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16089 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16090 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16091 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16092 ;;Total ram usage:        0 bytes
 16093 ;; Hardware stack levels used:    1
 16094 ;; Hardware stack levels required when called:    3
 16095 ;; This function calls:
 16096 ;;		i2_lcdInst
 16097 ;;		i2_printf
 16098 ;; This function is called by:
 16099 ;;		_updateMenu
 16100 ;;		_inputHandler
 16101 ;; This function uses a non-reentrant model
 16102 ;;
 16103                           
 16104                           	psect	text63
 16105  003CCA                     __ptext63:
 16106                           	opt stack 0
 16107  003CCA                     _change_state_to_logs_23:
 16108                           	opt stack 18
 16109                           
 16110                           ;UI.c: 534: cur_state = 1023;
 16111                           
 16112                           ;incstack = 0
 16113  003CCA  0E03               	movlw	3
 16114  003CCC  0100               	movlb	0	; () banked
 16115  003CCE  6FDF               	movwf	(_cur_state+1)& (0+255),b
 16116  003CD0  69DE               	setf	_cur_state& (0+255),b
 16117                           
 16118                           ; BSR set to: 0
 16119                           ;UI.c: 535: lcdInst(0b10000000);;
 16120  003CD2  0E80               	movlw	128
 16121  003CD4  ECA0  F01F         	call	i2_lcdInst
 16122                           
 16123                           ;UI.c: 536: printf("LOG 2           ");
 16124  003CD8  0E12               	movlw	low STR_40
 16125  003CDA  6E0D               	movwf	i2printf@f,c
 16126  003CDC  0EFD               	movlw	high STR_40
 16127  003CDE  6E0E               	movwf	i2printf@f+1,c
 16128  003CE0  ECAF  F00A         	call	i2_printf	;wreg free
 16129                           
 16130                           ;UI.c: 537: lcdInst(0b11000000);;
 16131  003CE4  0EC0               	movlw	192
 16132  003CE6  ECA0  F01F         	call	i2_lcdInst
 16133                           
 16134                           ;UI.c: 538: printf("LOG 3          <");
 16135  003CEA  0ECD               	movlw	low STR_46
 16136  003CEC  6E0D               	movwf	i2printf@f,c
 16137  003CEE  0EFD               	movlw	high STR_46
 16138  003CF0  6E0E               	movwf	i2printf@f+1,c
 16139  003CF2  ECAF  F00A         	call	i2_printf	;wreg free
 16140  003CF6  0012               	return		;funcret
 16141  003CF8                     __end_of_change_state_to_logs_23:
 16142                           	opt stack 0
 16143                           pclatu	equ	0xFFB
 16144                           pclath	equ	0xFFA
 16145                           tblptru	equ	0xFF8
 16146                           tblptrh	equ	0xFF7
 16147                           tblptrl	equ	0xFF6
 16148                           tablat	equ	0xFF5
 16149                           prodh	equ	0xFF4
 16150                           prodl	equ	0xFF3
 16151                           intcon	equ	0xFF2
 16152                           intcon2	equ	0xFF1
 16153                           intcon3	equ	0xFF0
 16154                           indf0	equ	0xFEF
 16155                           postinc0	equ	0xFEE
 16156                           fsr0h	equ	0xFEA
 16157                           fsr0l	equ	0xFE9
 16158                           wreg	equ	0xFE8
 16159                           postdec1	equ	0xFE5
 16160                           fsr1h	equ	0xFE2
 16161                           fsr1l	equ	0xFE1
 16162                           indf2	equ	0xFDF
 16163                           postinc2	equ	0xFDE
 16164                           postdec2	equ	0xFDD
 16165                           fsr2h	equ	0xFDA
 16166                           fsr2l	equ	0xFD9
 16167                           status	equ	0xFD8
 16168                           
 16169 ;; *************** function _change_state_to_logs_22 *****************
 16170 ;; Defined at:
 16171 ;;		line 526 in file "UI.c"
 16172 ;; Parameters:    Size  Location     Type
 16173 ;;		None
 16174 ;; Auto vars:     Size  Location     Type
 16175 ;;		None
 16176 ;; Return value:  Size  Location     Type
 16177 ;;                  1    wreg      void 
 16178 ;; Registers used:
 16179 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16180 ;; Tracked objects:
 16181 ;;		On entry : 0/0
 16182 ;;		On exit  : 0/0
 16183 ;;		Unchanged: 0/0
 16184 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16185 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16186 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16187 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16188 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16189 ;;Total ram usage:        0 bytes
 16190 ;; Hardware stack levels used:    1
 16191 ;; Hardware stack levels required when called:    3
 16192 ;; This function calls:
 16193 ;;		i2_lcdInst
 16194 ;;		i2_printf
 16195 ;; This function is called by:
 16196 ;;		_updateMenu
 16197 ;;		_inputHandler
 16198 ;; This function uses a non-reentrant model
 16199 ;;
 16200                           
 16201                           	psect	text64
 16202  003C0C                     __ptext64:
 16203                           	opt stack 0
 16204  003C0C                     _change_state_to_logs_22:
 16205                           	opt stack 18
 16206                           
 16207                           ;UI.c: 527: cur_state = 1022;
 16208                           
 16209                           ;incstack = 0
 16210  003C0C  0E03               	movlw	3
 16211  003C0E  0100               	movlb	0	; () banked
 16212  003C10  6FDF               	movwf	(_cur_state+1)& (0+255),b
 16213  003C12  0EFE               	movlw	254
 16214  003C14  6FDE               	movwf	_cur_state& (0+255),b
 16215                           
 16216                           ; BSR set to: 0
 16217                           ;UI.c: 528: lcdInst(0b10000000);;
 16218  003C16  0E80               	movlw	128
 16219  003C18  ECA0  F01F         	call	i2_lcdInst
 16220                           
 16221                           ;UI.c: 529: printf("LOG 2          <");
 16222  003C1C  0EBC               	movlw	low STR_42
 16223  003C1E  6E0D               	movwf	i2printf@f,c
 16224  003C20  0EFD               	movlw	high STR_42
 16225  003C22  6E0E               	movwf	i2printf@f+1,c
 16226  003C24  ECAF  F00A         	call	i2_printf	;wreg free
 16227                           
 16228                           ;UI.c: 530: lcdInst(0b11000000);;
 16229  003C28  0EC0               	movlw	192
 16230  003C2A  ECA0  F01F         	call	i2_lcdInst
 16231                           
 16232                           ;UI.c: 531: printf("LOG 3           ");
 16233  003C2E  0E23               	movlw	low STR_44
 16234  003C30  6E0D               	movwf	i2printf@f,c
 16235  003C32  0EFD               	movlw	high STR_44
 16236  003C34  6E0E               	movwf	i2printf@f+1,c
 16237  003C36  ECAF  F00A         	call	i2_printf	;wreg free
 16238  003C3A  0012               	return		;funcret
 16239  003C3C                     __end_of_change_state_to_logs_22:
 16240                           	opt stack 0
 16241                           pclatu	equ	0xFFB
 16242                           pclath	equ	0xFFA
 16243                           tblptru	equ	0xFF8
 16244                           tblptrh	equ	0xFF7
 16245                           tblptrl	equ	0xFF6
 16246                           tablat	equ	0xFF5
 16247                           prodh	equ	0xFF4
 16248                           prodl	equ	0xFF3
 16249                           intcon	equ	0xFF2
 16250                           intcon2	equ	0xFF1
 16251                           intcon3	equ	0xFF0
 16252                           indf0	equ	0xFEF
 16253                           postinc0	equ	0xFEE
 16254                           fsr0h	equ	0xFEA
 16255                           fsr0l	equ	0xFE9
 16256                           wreg	equ	0xFE8
 16257                           postdec1	equ	0xFE5
 16258                           fsr1h	equ	0xFE2
 16259                           fsr1l	equ	0xFE1
 16260                           indf2	equ	0xFDF
 16261                           postinc2	equ	0xFDE
 16262                           postdec2	equ	0xFDD
 16263                           fsr2h	equ	0xFDA
 16264                           fsr2l	equ	0xFD9
 16265                           status	equ	0xFD8
 16266                           
 16267 ;; *************** function _change_state_to_logs_12 *****************
 16268 ;; Defined at:
 16269 ;;		line 519 in file "UI.c"
 16270 ;; Parameters:    Size  Location     Type
 16271 ;;		None
 16272 ;; Auto vars:     Size  Location     Type
 16273 ;;		None
 16274 ;; Return value:  Size  Location     Type
 16275 ;;                  1    wreg      void 
 16276 ;; Registers used:
 16277 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16278 ;; Tracked objects:
 16279 ;;		On entry : 0/0
 16280 ;;		On exit  : 0/0
 16281 ;;		Unchanged: 0/0
 16282 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16283 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16284 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16285 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16286 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16287 ;;Total ram usage:        0 bytes
 16288 ;; Hardware stack levels used:    1
 16289 ;; Hardware stack levels required when called:    3
 16290 ;; This function calls:
 16291 ;;		i2_lcdInst
 16292 ;;		i2_printf
 16293 ;; This function is called by:
 16294 ;;		_updateMenu
 16295 ;;		_inputHandler
 16296 ;; This function uses a non-reentrant model
 16297 ;;
 16298                           
 16299                           	psect	text65
 16300  003C3C                     __ptext65:
 16301                           	opt stack 0
 16302  003C3C                     _change_state_to_logs_12:
 16303                           	opt stack 18
 16304                           
 16305                           ;UI.c: 520: cur_state = 1012;
 16306                           
 16307                           ;incstack = 0
 16308  003C3C  0E03               	movlw	3
 16309  003C3E  0100               	movlb	0	; () banked
 16310  003C40  6FDF               	movwf	(_cur_state+1)& (0+255),b
 16311  003C42  0EF4               	movlw	244
 16312  003C44  6FDE               	movwf	_cur_state& (0+255),b
 16313                           
 16314                           ; BSR set to: 0
 16315                           ;UI.c: 521: lcdInst(0b10000000);;
 16316  003C46  0E80               	movlw	128
 16317  003C48  ECA0  F01F         	call	i2_lcdInst
 16318                           
 16319                           ;UI.c: 522: printf("LOG 1           ");
 16320  003C4C  0E01               	movlw	low STR_41
 16321  003C4E  6E0D               	movwf	i2printf@f,c
 16322  003C50  0EFD               	movlw	high STR_41
 16323  003C52  6E0E               	movwf	i2printf@f+1,c
 16324  003C54  ECAF  F00A         	call	i2_printf	;wreg free
 16325                           
 16326                           ;UI.c: 523: lcdInst(0b11000000);;
 16327  003C58  0EC0               	movlw	192
 16328  003C5A  ECA0  F01F         	call	i2_lcdInst
 16329                           
 16330                           ;UI.c: 524: printf("LOG 2          <");
 16331  003C5E  0EBC               	movlw	low STR_42
 16332  003C60  6E0D               	movwf	i2printf@f,c
 16333  003C62  0EFD               	movlw	high STR_42
 16334  003C64  6E0E               	movwf	i2printf@f+1,c
 16335  003C66  ECAF  F00A         	call	i2_printf	;wreg free
 16336  003C6A  0012               	return		;funcret
 16337  003C6C                     __end_of_change_state_to_logs_12:
 16338                           	opt stack 0
 16339                           pclatu	equ	0xFFB
 16340                           pclath	equ	0xFFA
 16341                           tblptru	equ	0xFF8
 16342                           tblptrh	equ	0xFF7
 16343                           tblptrl	equ	0xFF6
 16344                           tablat	equ	0xFF5
 16345                           prodh	equ	0xFF4
 16346                           prodl	equ	0xFF3
 16347                           intcon	equ	0xFF2
 16348                           intcon2	equ	0xFF1
 16349                           intcon3	equ	0xFF0
 16350                           indf0	equ	0xFEF
 16351                           postinc0	equ	0xFEE
 16352                           fsr0h	equ	0xFEA
 16353                           fsr0l	equ	0xFE9
 16354                           wreg	equ	0xFE8
 16355                           postdec1	equ	0xFE5
 16356                           fsr1h	equ	0xFE2
 16357                           fsr1l	equ	0xFE1
 16358                           indf2	equ	0xFDF
 16359                           postinc2	equ	0xFDE
 16360                           postdec2	equ	0xFDD
 16361                           fsr2h	equ	0xFDA
 16362                           fsr2l	equ	0xFD9
 16363                           status	equ	0xFD8
 16364                           
 16365 ;; *************** function _change_state_to_logs_11 *****************
 16366 ;; Defined at:
 16367 ;;		line 512 in file "UI.c"
 16368 ;; Parameters:    Size  Location     Type
 16369 ;;		None
 16370 ;; Auto vars:     Size  Location     Type
 16371 ;;		None
 16372 ;; Return value:  Size  Location     Type
 16373 ;;                  1    wreg      void 
 16374 ;; Registers used:
 16375 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16376 ;; Tracked objects:
 16377 ;;		On entry : 0/0
 16378 ;;		On exit  : 0/0
 16379 ;;		Unchanged: 0/0
 16380 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16381 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16382 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16383 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16384 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16385 ;;Total ram usage:        0 bytes
 16386 ;; Hardware stack levels used:    1
 16387 ;; Hardware stack levels required when called:    3
 16388 ;; This function calls:
 16389 ;;		i2_lcdInst
 16390 ;;		i2_printf
 16391 ;; This function is called by:
 16392 ;;		_updateMenu
 16393 ;;		_inputHandler
 16394 ;; This function uses a non-reentrant model
 16395 ;;
 16396                           
 16397                           	psect	text66
 16398  003C6C                     __ptext66:
 16399                           	opt stack 0
 16400  003C6C                     _change_state_to_logs_11:
 16401                           	opt stack 18
 16402                           
 16403                           ;UI.c: 513: cur_state = 1011;
 16404                           
 16405                           ;incstack = 0
 16406  003C6C  0E03               	movlw	3
 16407  003C6E  0100               	movlb	0	; () banked
 16408  003C70  6FDF               	movwf	(_cur_state+1)& (0+255),b
 16409  003C72  0EF3               	movlw	243
 16410  003C74  6FDE               	movwf	_cur_state& (0+255),b
 16411                           
 16412                           ; BSR set to: 0
 16413                           ;UI.c: 514: lcdInst(0b10000000);;
 16414  003C76  0E80               	movlw	128
 16415  003C78  ECA0  F01F         	call	i2_lcdInst
 16416                           
 16417                           ;UI.c: 515: printf("LOG 1          <");
 16418  003C7C  0EAB               	movlw	low STR_39
 16419  003C7E  6E0D               	movwf	i2printf@f,c
 16420  003C80  0EFD               	movlw	high STR_39
 16421  003C82  6E0E               	movwf	i2printf@f+1,c
 16422  003C84  ECAF  F00A         	call	i2_printf	;wreg free
 16423                           
 16424                           ;UI.c: 516: lcdInst(0b11000000);;
 16425  003C88  0EC0               	movlw	192
 16426  003C8A  ECA0  F01F         	call	i2_lcdInst
 16427                           
 16428                           ;UI.c: 517: printf("LOG 2           ");
 16429  003C8E  0E12               	movlw	low STR_40
 16430  003C90  6E0D               	movwf	i2printf@f,c
 16431  003C92  0EFD               	movlw	high STR_40
 16432  003C94  6E0E               	movwf	i2printf@f+1,c
 16433  003C96  ECAF  F00A         	call	i2_printf	;wreg free
 16434  003C9A  0012               	return		;funcret
 16435  003C9C                     __end_of_change_state_to_logs_11:
 16436                           	opt stack 0
 16437                           pclatu	equ	0xFFB
 16438                           pclath	equ	0xFFA
 16439                           tblptru	equ	0xFF8
 16440                           tblptrh	equ	0xFF7
 16441                           tblptrl	equ	0xFF6
 16442                           tablat	equ	0xFF5
 16443                           prodh	equ	0xFF4
 16444                           prodl	equ	0xFF3
 16445                           intcon	equ	0xFF2
 16446                           intcon2	equ	0xFF1
 16447                           intcon3	equ	0xFF0
 16448                           indf0	equ	0xFEF
 16449                           postinc0	equ	0xFEE
 16450                           fsr0h	equ	0xFEA
 16451                           fsr0l	equ	0xFE9
 16452                           wreg	equ	0xFE8
 16453                           postdec1	equ	0xFE5
 16454                           fsr1h	equ	0xFE2
 16455                           fsr1l	equ	0xFE1
 16456                           indf2	equ	0xFDF
 16457                           postinc2	equ	0xFDE
 16458                           postdec2	equ	0xFDD
 16459                           fsr2h	equ	0xFDA
 16460                           fsr2l	equ	0xFD9
 16461                           status	equ	0xFD8
 16462                           
 16463 ;; *************** function _dispLogs *****************
 16464 ;; Defined at:
 16465 ;;		line 465 in file "UI.c"
 16466 ;; Parameters:    Size  Location     Type
 16467 ;;  myLog           2   17[COMRAM] int 
 16468 ;; Auto vars:     Size  Location     Type
 16469 ;;		None
 16470 ;; Return value:  Size  Location     Type
 16471 ;;                  1    wreg      void 
 16472 ;; Registers used:
 16473 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 16474 ;; Tracked objects:
 16475 ;;		On entry : 0/0
 16476 ;;		On exit  : 0/0
 16477 ;;		Unchanged: 0/0
 16478 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16479 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16480 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16481 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16482 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16483 ;;Total ram usage:        2 bytes
 16484 ;; Hardware stack levels used:    1
 16485 ;; Hardware stack levels required when called:    2
 16486 ;; This function calls:
 16487 ;;		_retrieveLog
 16488 ;; This function is called by:
 16489 ;;		_updateMenu
 16490 ;; This function uses a non-reentrant model
 16491 ;;
 16492                           
 16493                           	psect	text67
 16494  003E12                     __ptext67:
 16495                           	opt stack 0
 16496  003E12                     _dispLogs:
 16497                           	opt stack 20
 16498                           
 16499                           ;UI.c: 466: logstate = 1;
 16500                           
 16501                           ;incstack = 0
 16502  003E12  0E00               	movlw	0
 16503  003E14  0100               	movlb	0	; () banked
 16504  003E16  6FF9               	movwf	(_logstate+1)& (0+255),b
 16505  003E18  0E01               	movlw	1
 16506  003E1A  6FF8               	movwf	_logstate& (0+255),b
 16507                           
 16508                           ; BSR set to: 0
 16509                           ;UI.c: 467: log = myLog;
 16510  003E1C  C012  F0E8         	movff	dispLogs@myLog,_log
 16511  003E20  C013  F0E9         	movff	dispLogs@myLog+1,_log+1
 16512                           
 16513                           ; BSR set to: 0
 16514                           ;UI.c: 468: retrieveLog(myLog - 1);
 16515  003E24  0EFF               	movlw	255
 16516  003E26  2412               	addwf	dispLogs@myLog,w,c
 16517  003E28  6E07               	movwf	retrieveLog@logNum,c
 16518  003E2A  0EFF               	movlw	255
 16519  003E2C  2013               	addwfc	dispLogs@myLog+1,w,c
 16520  003E2E  6E08               	movwf	retrieveLog@logNum+1,c
 16521  003E30  EC6F  F015         	call	_retrieveLog	;wreg free
 16522  003E34  0012               	return		;funcret
 16523  003E36                     __end_of_dispLogs:
 16524                           	opt stack 0
 16525                           pclatu	equ	0xFFB
 16526                           pclath	equ	0xFFA
 16527                           tblptru	equ	0xFF8
 16528                           tblptrh	equ	0xFF7
 16529                           tblptrl	equ	0xFF6
 16530                           tablat	equ	0xFF5
 16531                           prodh	equ	0xFF4
 16532                           prodl	equ	0xFF3
 16533                           intcon	equ	0xFF2
 16534                           intcon2	equ	0xFF1
 16535                           intcon3	equ	0xFF0
 16536                           indf0	equ	0xFEF
 16537                           postinc0	equ	0xFEE
 16538                           fsr0h	equ	0xFEA
 16539                           fsr0l	equ	0xFE9
 16540                           wreg	equ	0xFE8
 16541                           postdec1	equ	0xFE5
 16542                           fsr1h	equ	0xFE2
 16543                           fsr1l	equ	0xFE1
 16544                           indf2	equ	0xFDF
 16545                           postinc2	equ	0xFDE
 16546                           postdec2	equ	0xFDD
 16547                           fsr2h	equ	0xFDA
 16548                           fsr2l	equ	0xFD9
 16549                           status	equ	0xFD8
 16550                           
 16551 ;; *************** function _retrieveLog *****************
 16552 ;; Defined at:
 16553 ;;		line 134 in file "EEPROM.c"
 16554 ;; Parameters:    Size  Location     Type
 16555 ;;  logNum          2    6[COMRAM] int 
 16556 ;; Auto vars:     Size  Location     Type
 16557 ;;  i               2   13[COMRAM] int 
 16558 ;;  addr            2   15[COMRAM] unsigned short 
 16559 ;;  byte3           1   12[COMRAM] unsigned char 
 16560 ;;  byte2           1   11[COMRAM] unsigned char 
 16561 ;;  byte1           1   10[COMRAM] unsigned char 
 16562 ;; Return value:  Size  Location     Type
 16563 ;;                  1    wreg      void 
 16564 ;; Registers used:
 16565 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 16566 ;; Tracked objects:
 16567 ;;		On entry : 0/0
 16568 ;;		On exit  : 0/0
 16569 ;;		Unchanged: 0/0
 16570 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16571 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16572 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16573 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16574 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16575 ;;Total ram usage:       11 bytes
 16576 ;; Hardware stack levels used:    1
 16577 ;; Hardware stack levels required when called:    1
 16578 ;; This function calls:
 16579 ;;		i2_EEPROM_read
 16580 ;;		i2___wmul
 16581 ;; This function is called by:
 16582 ;;		_dispLogs
 16583 ;; This function uses a non-reentrant model
 16584 ;;
 16585                           
 16586                           	psect	text68
 16587  002ADE                     __ptext68:
 16588                           	opt stack 0
 16589  002ADE                     _retrieveLog:
 16590                           	opt stack 20
 16591                           
 16592                           ;EEPROM.c: 140: unsigned short addr = 1 + logNum * 11;
 16593                           
 16594                           ;incstack = 0
 16595  002ADE  C007  F001         	movff	retrieveLog@logNum,i2___wmul@multiplier
 16596  002AE2  C008  F002         	movff	retrieveLog@logNum+1,i2___wmul@multiplier+1
 16597  002AE6  0E00               	movlw	0
 16598  002AE8  6E04               	movwf	i2___wmul@multiplicand+1,c
 16599  002AEA  0E0B               	movlw	11
 16600  002AEC  6E03               	movwf	i2___wmul@multiplicand,c
 16601  002AEE  ECD1  F01E         	call	i2___wmul	;wreg free
 16602  002AF2  0E01               	movlw	1
 16603  002AF4  2401               	addwf	?i2___wmul,w,c
 16604  002AF6  6E10               	movwf	retrieveLog@addr,c
 16605  002AF8  0E00               	movlw	0
 16606  002AFA  2002               	addwfc	?i2___wmul+1,w,c
 16607  002AFC  6E11               	movwf	retrieveLog@addr+1,c
 16608                           
 16609                           ;EEPROM.c: 143: unsigned char byte1 = EEPROM_read(addr);
 16610  002AFE  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 16611  002B02  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 16612  002B06  EC63  F01F         	call	i2_EEPROM_read	;wreg free
 16613  002B0A  6E0B               	movwf	retrieveLog@byte1,c
 16614                           
 16615                           ;EEPROM.c: 144: log_completion = (int)(byte1 & 0b10000000);
 16616  002B0C  C00B  F009         	movff	retrieveLog@byte1,??_retrieveLog
 16617  002B10  0E80               	movlw	128
 16618  002B12  1609               	andwf	??_retrieveLog,f,c
 16619  002B14  5009               	movf	??_retrieveLog,w,c
 16620  002B16  0100               	movlb	0	; () banked
 16621  002B18  6FEA               	movwf	_log_completion& (0+255),b
 16622  002B1A  6BEB               	clrf	(_log_completion+1)& (0+255),b
 16623                           
 16624                           ; BSR set to: 0
 16625                           ;EEPROM.c: 145: log_count_total = (int)(byte1 & 0b00001111);
 16626  002B1C  C00B  F009         	movff	retrieveLog@byte1,??_retrieveLog
 16627  002B20  0E0F               	movlw	15
 16628  002B22  1609               	andwf	??_retrieveLog,f,c
 16629  002B24  5009               	movf	??_retrieveLog,w,c
 16630  002B26  0100               	movlb	0	; () banked
 16631  002B28  6FF4               	movwf	_log_count_total& (0+255),b
 16632  002B2A  6BF5               	clrf	(_log_count_total+1)& (0+255),b
 16633                           
 16634                           ; BSR set to: 0
 16635                           ;EEPROM.c: 146: addr++;
 16636  002B2C  4A10               	infsnz	retrieveLog@addr,f,c
 16637  002B2E  2A11               	incf	retrieveLog@addr+1,f,c
 16638                           
 16639                           ; BSR set to: 0
 16640                           ;EEPROM.c: 149: unsigned char byte2 = EEPROM_read(addr);
 16641  002B30  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 16642  002B34  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 16643  002B38  EC63  F01F         	call	i2_EEPROM_read	;wreg free
 16644  002B3C  6E0C               	movwf	retrieveLog@byte2,c
 16645                           
 16646                           ;EEPROM.c: 150: log_count_pop_no_tab = (int)(byte2 & 0b11110000);
 16647  002B3E  C00C  F009         	movff	retrieveLog@byte2,??_retrieveLog
 16648  002B42  0EF0               	movlw	240
 16649  002B44  1609               	andwf	??_retrieveLog,f,c
 16650  002B46  5009               	movf	??_retrieveLog,w,c
 16651  002B48  0100               	movlb	0	; () banked
 16652  002B4A  6FF0               	movwf	_log_count_pop_no_tab& (0+255),b
 16653  002B4C  6BF1               	clrf	(_log_count_pop_no_tab+1)& (0+255),b
 16654                           
 16655                           ; BSR set to: 0
 16656                           ;EEPROM.c: 151: log_count_pop_w_tab = (int)(byte2 & 0b00001111);
 16657  002B4E  C00C  F009         	movff	retrieveLog@byte2,??_retrieveLog
 16658  002B52  0E0F               	movlw	15
 16659  002B54  1609               	andwf	??_retrieveLog,f,c
 16660  002B56  5009               	movf	??_retrieveLog,w,c
 16661  002B58  0100               	movlb	0	; () banked
 16662  002B5A  6FF2               	movwf	_log_count_pop_w_tab& (0+255),b
 16663  002B5C  6BF3               	clrf	(_log_count_pop_w_tab+1)& (0+255),b
 16664                           
 16665                           ; BSR set to: 0
 16666                           ;EEPROM.c: 152: addr++;
 16667  002B5E  4A10               	infsnz	retrieveLog@addr,f,c
 16668  002B60  2A11               	incf	retrieveLog@addr+1,f,c
 16669                           
 16670                           ; BSR set to: 0
 16671                           ;EEPROM.c: 153: unsigned char byte3 = EEPROM_read(addr);
 16672  002B62  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 16673  002B66  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 16674  002B6A  EC63  F01F         	call	i2_EEPROM_read	;wreg free
 16675  002B6E  6E0D               	movwf	retrieveLog@byte3,c
 16676                           
 16677                           ;EEPROM.c: 154: log_count_can_w_lab = (int)(byte3 & 0b11110000);
 16678  002B70  C00D  F009         	movff	retrieveLog@byte3,??_retrieveLog
 16679  002B74  0EF0               	movlw	240
 16680  002B76  1609               	andwf	??_retrieveLog,f,c
 16681  002B78  5009               	movf	??_retrieveLog,w,c
 16682  002B7A  0100               	movlb	0	; () banked
 16683  002B7C  6FEE               	movwf	_log_count_can_w_lab& (0+255),b
 16684  002B7E  6BEF               	clrf	(_log_count_can_w_lab+1)& (0+255),b
 16685                           
 16686                           ; BSR set to: 0
 16687                           ;EEPROM.c: 155: log_count_can_no_lab = (int)(byte3 & 0b00001111);
 16688  002B80  C00D  F009         	movff	retrieveLog@byte3,??_retrieveLog
 16689  002B84  0E0F               	movlw	15
 16690  002B86  1609               	andwf	??_retrieveLog,f,c
 16691  002B88  5009               	movf	??_retrieveLog,w,c
 16692  002B8A  0100               	movlb	0	; () banked
 16693  002B8C  6FEC               	movwf	_log_count_can_no_lab& (0+255),b
 16694  002B8E  6BED               	clrf	(_log_count_can_no_lab+1)& (0+255),b
 16695                           
 16696                           ; BSR set to: 0
 16697                           ;EEPROM.c: 156: addr++;
 16698  002B90  4A10               	infsnz	retrieveLog@addr,f,c
 16699  002B92  2A11               	incf	retrieveLog@addr+1,f,c
 16700                           
 16701                           ; BSR set to: 0
 16702                           ;EEPROM.c: 159: for(int i = 0; i < 7; i++){
 16703  002B94  0E00               	movlw	0
 16704  002B96  6E0F               	movwf	retrieveLog@i+1,c
 16705  002B98  0E00               	movlw	0
 16706  002B9A  6E0E               	movwf	retrieveLog@i,c
 16707  002B9C                     i2l5495:
 16708                           
 16709                           ; BSR set to: 0
 16710  002B9C  BE0F               	btfsc	retrieveLog@i+1,7,c
 16711  002B9E  D006               	goto	i2l5499
 16712  002BA0  500F               	movf	retrieveLog@i+1,w,c
 16713  002BA2  E11E               	bnz	i2l5507
 16714  002BA4  0E07               	movlw	7
 16715  002BA6  5C0E               	subwf	retrieveLog@i,w,c
 16716  002BA8  B0D8               	btfsc	status,0,c
 16717  002BAA  D01A               	goto	i2l5507
 16718  002BAC                     i2l5499:
 16719                           
 16720                           ;EEPROM.c: 160: log_startTime[i] = (int)EEPROM_read(addr);
 16721  002BAC  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 16722  002BB0  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 16723  002BB4  EC63  F01F         	call	i2_EEPROM_read	;wreg free
 16724  002BB8  6E09               	movwf	??_retrieveLog& (0+255),c
 16725  002BBA  6A0A               	clrf	(??_retrieveLog+1)& (0+255),c
 16726  002BBC  90D8               	bcf	status,0,c
 16727  002BBE  340E               	rlcf	retrieveLog@i,w,c
 16728  002BC0  6ED9               	movwf	fsr2l,c
 16729  002BC2  340F               	rlcf	retrieveLog@i+1,w,c
 16730  002BC4  6EDA               	movwf	fsr2h,c
 16731  002BC6  0E00               	movlw	low _log_startTime
 16732  002BC8  26D9               	addwf	fsr2l,f,c
 16733  002BCA  0E01               	movlw	high _log_startTime
 16734  002BCC  22DA               	addwfc	fsr2h,f,c
 16735  002BCE  C009  FFDE         	movff	??_retrieveLog,postinc2
 16736  002BD2  C00A  FFDD         	movff	??_retrieveLog+1,postdec2
 16737                           
 16738                           ;EEPROM.c: 161: addr++;
 16739  002BD6  4A10               	infsnz	retrieveLog@addr,f,c
 16740  002BD8  2A11               	incf	retrieveLog@addr+1,f,c
 16741  002BDA  4A0E               	infsnz	retrieveLog@i,f,c
 16742  002BDC  2A0F               	incf	retrieveLog@i+1,f,c
 16743  002BDE  D7DE               	goto	i2l5495
 16744  002BE0                     i2l5507:
 16745                           
 16746                           ;EEPROM.c: 162: }
 16747                           ;EEPROM.c: 165: log_total_time = (int)EEPROM_read(addr);
 16748  002BE0  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 16749  002BE4  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 16750  002BE8  EC63  F01F         	call	i2_EEPROM_read	;wreg free
 16751  002BEC  6E09               	movwf	??_retrieveLog& (0+255),c
 16752  002BEE  5009               	movf	??_retrieveLog,w,c
 16753  002BF0  0100               	movlb	0	; () banked
 16754  002BF2  6FF6               	movwf	_log_total_time& (0+255),b
 16755  002BF4  6BF7               	clrf	(_log_total_time+1)& (0+255),b
 16756                           
 16757                           ; BSR set to: 0
 16758  002BF6  0012               	return		;funcret
 16759  002BF8                     __end_of_retrieveLog:
 16760                           	opt stack 0
 16761                           pclatu	equ	0xFFB
 16762                           pclath	equ	0xFFA
 16763                           tblptru	equ	0xFF8
 16764                           tblptrh	equ	0xFF7
 16765                           tblptrl	equ	0xFF6
 16766                           tablat	equ	0xFF5
 16767                           prodh	equ	0xFF4
 16768                           prodl	equ	0xFF3
 16769                           intcon	equ	0xFF2
 16770                           intcon2	equ	0xFF1
 16771                           intcon3	equ	0xFF0
 16772                           indf0	equ	0xFEF
 16773                           postinc0	equ	0xFEE
 16774                           fsr0h	equ	0xFEA
 16775                           fsr0l	equ	0xFE9
 16776                           wreg	equ	0xFE8
 16777                           postdec1	equ	0xFE5
 16778                           fsr1h	equ	0xFE2
 16779                           fsr1l	equ	0xFE1
 16780                           indf2	equ	0xFDF
 16781                           postinc2	equ	0xFDE
 16782                           postdec2	equ	0xFDD
 16783                           fsr2h	equ	0xFDA
 16784                           fsr2l	equ	0xFD9
 16785                           status	equ	0xFD8
 16786                           
 16787 ;; *************** function i2_EEPROM_read *****************
 16788 ;; Defined at:
 16789 ;;		line 68 in file "EEPROM.c"
 16790 ;; Parameters:    Size  Location     Type
 16791 ;;  address         2    0[COMRAM] unsigned short 
 16792 ;; Auto vars:     Size  Location     Type
 16793 ;;		None
 16794 ;; Return value:  Size  Location     Type
 16795 ;;                  1    wreg      unsigned char 
 16796 ;; Registers used:
 16797 ;;		wreg, status,2
 16798 ;; Tracked objects:
 16799 ;;		On entry : 0/0
 16800 ;;		On exit  : 0/0
 16801 ;;		Unchanged: 0/0
 16802 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16803 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16804 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16805 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16806 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16807 ;;Total ram usage:        2 bytes
 16808 ;; Hardware stack levels used:    1
 16809 ;; This function calls:
 16810 ;;		Nothing
 16811 ;; This function is called by:
 16812 ;;		_retrieveLog
 16813 ;; This function uses a non-reentrant model
 16814 ;;
 16815                           
 16816                           	psect	text69
 16817  003EC6                     __ptext69:
 16818                           	opt stack 0
 16819  003EC6                     i2_EEPROM_read:
 16820                           	opt stack 20
 16821                           
 16822                           ;EEPROM.c: 70: EEADRH = (unsigned char)(address >> 8);
 16823                           
 16824                           ; BSR set to: 0
 16825                           ;incstack = 0
 16826  003EC6  5002               	movf	i2EEPROM_read@address+1,w,c
 16827  003EC8  6EAA               	movwf	4010,c	;volatile
 16828                           
 16829                           ;EEPROM.c: 71: EEADR = (unsigned char)address;
 16830  003ECA  C001  FFA9         	movff	i2EEPROM_read@address,4009	;volatile
 16831                           
 16832                           ;EEPROM.c: 73: EECON1bits.EEPGD = 0;
 16833  003ECE  9EA6               	bcf	4006,7,c	;volatile
 16834                           
 16835                           ;EEPROM.c: 74: EECON1bits.CFGS = 0;
 16836  003ED0  9CA6               	bcf	4006,6,c	;volatile
 16837                           
 16838                           ;EEPROM.c: 75: EECON1bits.RD = 1;
 16839  003ED2  80A6               	bsf	4006,0,c	;volatile
 16840  003ED4                     i2l911:
 16841  003ED4  B0A6               	btfsc	4006,0,c	;volatile
 16842  003ED6  D7FE               	goto	i2l911
 16843                           
 16844                           ;EEPROM.c: 81: return EEDATA;
 16845  003ED8  50A8               	movf	4008,w,c	;volatile
 16846  003EDA  0012               	return	
 16847  003EDC                     __end_ofi2_EEPROM_read:
 16848                           	opt stack 0
 16849                           pclatu	equ	0xFFB
 16850                           pclath	equ	0xFFA
 16851                           tblptru	equ	0xFF8
 16852                           tblptrh	equ	0xFF7
 16853                           tblptrl	equ	0xFF6
 16854                           tablat	equ	0xFF5
 16855                           prodh	equ	0xFF4
 16856                           prodl	equ	0xFF3
 16857                           intcon	equ	0xFF2
 16858                           intcon2	equ	0xFF1
 16859                           intcon3	equ	0xFF0
 16860                           indf0	equ	0xFEF
 16861                           postinc0	equ	0xFEE
 16862                           fsr0h	equ	0xFEA
 16863                           fsr0l	equ	0xFE9
 16864                           wreg	equ	0xFE8
 16865                           postdec1	equ	0xFE5
 16866                           fsr1h	equ	0xFE2
 16867                           fsr1l	equ	0xFE1
 16868                           indf2	equ	0xFDF
 16869                           postinc2	equ	0xFDE
 16870                           postdec2	equ	0xFDD
 16871                           fsr2h	equ	0xFDA
 16872                           fsr2l	equ	0xFD9
 16873                           status	equ	0xFD8
 16874                           
 16875 ;; *************** function _printSortTimer *****************
 16876 ;; Defined at:
 16877 ;;		line 255 in file "sort.c"
 16878 ;; Parameters:    Size  Location     Type
 16879 ;;		None
 16880 ;; Auto vars:     Size  Location     Type
 16881 ;;  i               2   72[COMRAM] int 
 16882 ;;  curTime        14   46[COMRAM] int [7]
 16883 ;;  timeDiff        2   70[COMRAM] unsigned int 
 16884 ;;  sec             2   66[COMRAM] int 
 16885 ;;  min             2   64[COMRAM] int 
 16886 ;;  cur_sec         2   62[COMRAM] unsigned int 
 16887 ;;  start_sec       2   60[COMRAM] unsigned int 
 16888 ;;  hour            2   44[COMRAM] int 
 16889 ;; Return value:  Size  Location     Type
 16890 ;;                  1    wreg      void 
 16891 ;; Registers used:
 16892 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16893 ;; Tracked objects:
 16894 ;;		On entry : 0/0
 16895 ;;		On exit  : 0/0
 16896 ;;		Unchanged: 0/0
 16897 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16898 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16899 ;;      Locals:        30       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16900 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16901 ;;      Totals:        33       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16902 ;;Total ram usage:       33 bytes
 16903 ;; Hardware stack levels used:    1
 16904 ;; Hardware stack levels required when called:    3
 16905 ;; This function calls:
 16906 ;;		i2___lwdiv
 16907 ;;		i2___lwmod
 16908 ;;		i2___wmul
 16909 ;;		i2_getRTC
 16910 ;;		i2_lcdInst
 16911 ;;		i2_printf
 16912 ;; This function is called by:
 16913 ;;		_handler
 16914 ;; This function uses a non-reentrant model
 16915 ;;
 16916                           
 16917                           	psect	text70
 16918  00208C                     __ptext70:
 16919                           	opt stack 0
 16920  00208C                     _printSortTimer:
 16921                           	opt stack 20
 16922                           
 16923                           ;sort.c: 256: getRTC();
 16924                           
 16925                           ;incstack = 0
 16926  00208C  EC61  F01A         	call	i2_getRTC	;wreg free
 16927                           
 16928                           ;sort.c: 257: int curTime[7];
 16929                           ;sort.c: 258: for(int i = 0; i < 7; i++){
 16930  002090  0E00               	movlw	0
 16931  002092  6E4A               	movwf	printSortTimer@i+1,c
 16932  002094  0E00               	movlw	0
 16933  002096  6E49               	movwf	printSortTimer@i,c
 16934  002098                     i2l7265:
 16935  002098  BE4A               	btfsc	printSortTimer@i+1,7,c
 16936  00209A  D006               	goto	i2l7269
 16937  00209C  504A               	movf	printSortTimer@i+1,w,c
 16938  00209E  E131               	bnz	i2l7275
 16939  0020A0  0E07               	movlw	7
 16940  0020A2  5C49               	subwf	printSortTimer@i,w,c
 16941  0020A4  B0D8               	btfsc	status,0,c
 16942  0020A6  D02D               	goto	i2l7275
 16943  0020A8                     i2l7269:
 16944                           
 16945                           ;sort.c: 259: curTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 16946  0020A8  0E24               	movlw	low _time
 16947  0020AA  2449               	addwf	printSortTimer@i,w,c
 16948  0020AC  6ED9               	movwf	fsr2l,c
 16949  0020AE  0E01               	movlw	high _time
 16950  0020B0  204A               	addwfc	printSortTimer@i+1,w,c
 16951  0020B2  6EDA               	movwf	fsr2h,c
 16952  0020B4  50DF               	movf	indf2,w,c
 16953  0020B6  6E2A               	movwf	??_printSortTimer& (0+255),c
 16954  0020B8  3A2A               	swapf	??_printSortTimer,f,c
 16955  0020BA  0E0F               	movlw	15
 16956  0020BC  162A               	andwf	??_printSortTimer,f,c
 16957  0020BE  0E0F               	movlw	15
 16958  0020C0  162A               	andwf	??_printSortTimer,f,c
 16959  0020C2  502A               	movf	??_printSortTimer,w,c
 16960  0020C4  0D0A               	mullw	10
 16961  0020C6  0E24               	movlw	low _time
 16962  0020C8  2449               	addwf	printSortTimer@i,w,c
 16963  0020CA  6ED9               	movwf	fsr2l,c
 16964  0020CC  0E01               	movlw	high _time
 16965  0020CE  204A               	addwfc	printSortTimer@i+1,w,c
 16966  0020D0  6EDA               	movwf	fsr2h,c
 16967  0020D2  50DF               	movf	indf2,w,c
 16968  0020D4  0B0F               	andlw	15
 16969  0020D6  6E2B               	movwf	(??_printSortTimer+1)& (0+255),c
 16970  0020D8  6A2C               	clrf	(??_printSortTimer+2)& (0+255),c
 16971  0020DA  50F3               	movf	prodl,w,c
 16972  0020DC  262B               	addwf	??_printSortTimer+1,f,c
 16973  0020DE  50F4               	movf	prodh,w,c
 16974  0020E0  222C               	addwfc	??_printSortTimer+2,f,c
 16975  0020E2  90D8               	bcf	status,0,c
 16976  0020E4  3449               	rlcf	printSortTimer@i,w,c
 16977  0020E6  6ED9               	movwf	fsr2l,c
 16978  0020E8  344A               	rlcf	printSortTimer@i+1,w,c
 16979  0020EA  6EDA               	movwf	fsr2h,c
 16980  0020EC  0E2F               	movlw	low printSortTimer@curTime
 16981  0020EE  26D9               	addwf	fsr2l,f,c
 16982  0020F0  0E00               	movlw	high printSortTimer@curTime
 16983  0020F2  22DA               	addwfc	fsr2h,f,c
 16984  0020F4  C02B  FFDE         	movff	??_printSortTimer+1,postinc2
 16985  0020F8  C02C  FFDD         	movff	??_printSortTimer+2,postdec2
 16986  0020FC  4A49               	infsnz	printSortTimer@i,f,c
 16987  0020FE  2A4A               	incf	printSortTimer@i+1,f,c
 16988  002100  D7CB               	goto	i2l7265
 16989  002102                     i2l7275:
 16990                           
 16991                           ;sort.c: 260: }
 16992                           ;sort.c: 261: unsigned int start_sec = startTime[0] + startTime[1]*60 + startTime[2]*360
      +                          0;
 16993  002102  C110  F001         	movff	_startTime+2,i2___wmul@multiplier
 16994  002106  C111  F002         	movff	_startTime+3,i2___wmul@multiplier+1
 16995  00210A  0E00               	movlw	0
 16996  00210C  6E04               	movwf	i2___wmul@multiplicand+1,c
 16997  00210E  0E3C               	movlw	60
 16998  002110  6E03               	movwf	i2___wmul@multiplicand,c
 16999  002112  ECD1  F01E         	call	i2___wmul	;wreg free
 17000  002116  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 17001  00211A  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 17002  00211E  C112  F001         	movff	_startTime+4,i2___wmul@multiplier
 17003  002122  C113  F002         	movff	_startTime+5,i2___wmul@multiplier+1
 17004  002126  0E0E               	movlw	14
 17005  002128  6E04               	movwf	i2___wmul@multiplicand+1,c
 17006  00212A  0E10               	movlw	16
 17007  00212C  6E03               	movwf	i2___wmul@multiplicand,c
 17008  00212E  ECD1  F01E         	call	i2___wmul	;wreg free
 17009  002132  5001               	movf	?i2___wmul,w,c
 17010  002134  262A               	addwf	??_printSortTimer,f,c
 17011  002136  5002               	movf	?i2___wmul+1,w,c
 17012  002138  222B               	addwfc	??_printSortTimer+1,f,c
 17013  00213A  0101               	movlb	1	; () banked
 17014  00213C  510E               	movf	_startTime& (0+255),w,b
 17015  00213E  242A               	addwf	??_printSortTimer,w,c
 17016  002140  6E3D               	movwf	printSortTimer@start_sec,c
 17017  002142  0101               	movlb	1	; () banked
 17018  002144  510F               	movf	(_startTime+1)& (0+255),w,b
 17019  002146  202B               	addwfc	??_printSortTimer+1,w,c
 17020  002148  6E3E               	movwf	printSortTimer@start_sec+1,c
 17021                           
 17022                           ;sort.c: 262: unsigned int cur_sec = curTime[0] + curTime[1]*60 + curTime[2]*3600;
 17023  00214A  C031  F001         	movff	printSortTimer@curTime+2,i2___wmul@multiplier
 17024  00214E  C032  F002         	movff	printSortTimer@curTime+3,i2___wmul@multiplier+1
 17025  002152  0E00               	movlw	0
 17026  002154  6E04               	movwf	i2___wmul@multiplicand+1,c
 17027  002156  0E3C               	movlw	60
 17028  002158  6E03               	movwf	i2___wmul@multiplicand,c
 17029  00215A  ECD1  F01E         	call	i2___wmul	;wreg free
 17030  00215E  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 17031  002162  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 17032  002166  C033  F001         	movff	printSortTimer@curTime+4,i2___wmul@multiplier
 17033  00216A  C034  F002         	movff	printSortTimer@curTime+5,i2___wmul@multiplier+1
 17034  00216E  0E0E               	movlw	14
 17035  002170  6E04               	movwf	i2___wmul@multiplicand+1,c
 17036  002172  0E10               	movlw	16
 17037  002174  6E03               	movwf	i2___wmul@multiplicand,c
 17038  002176  ECD1  F01E         	call	i2___wmul	;wreg free
 17039  00217A  5001               	movf	?i2___wmul,w,c
 17040  00217C  262A               	addwf	??_printSortTimer,f,c
 17041  00217E  5002               	movf	?i2___wmul+1,w,c
 17042  002180  222B               	addwfc	??_printSortTimer+1,f,c
 17043  002182  502F               	movf	printSortTimer@curTime,w,c
 17044  002184  242A               	addwf	??_printSortTimer,w,c
 17045  002186  6E3F               	movwf	printSortTimer@cur_sec,c
 17046  002188  5030               	movf	printSortTimer@curTime+1,w,c
 17047  00218A  202B               	addwfc	??_printSortTimer+1,w,c
 17048  00218C  6E40               	movwf	printSortTimer@cur_sec+1,c
 17049                           
 17050                           ;sort.c: 263: unsigned int timeDiff = cur_sec - start_sec;
 17051  00218E  C03D  F02A         	movff	printSortTimer@start_sec,??_printSortTimer
 17052  002192  C03E  F02B         	movff	printSortTimer@start_sec+1,??_printSortTimer+1
 17053  002196  1E2A               	comf	??_printSortTimer,f,c
 17054  002198  1E2B               	comf	??_printSortTimer+1,f,c
 17055  00219A  4A2A               	infsnz	??_printSortTimer,f,c
 17056  00219C  2A2B               	incf	??_printSortTimer+1,f,c
 17057  00219E  503F               	movf	printSortTimer@cur_sec,w,c
 17058  0021A0  242A               	addwf	??_printSortTimer,w,c
 17059  0021A2  6E47               	movwf	printSortTimer@timeDiff,c
 17060  0021A4  5040               	movf	printSortTimer@cur_sec+1,w,c
 17061  0021A6  202B               	addwfc	??_printSortTimer+1,w,c
 17062  0021A8  6E48               	movwf	printSortTimer@timeDiff+1,c
 17063                           
 17064                           ;sort.c: 265: total_time = timeDiff;
 17065  0021AA  C047  F0FA         	movff	printSortTimer@timeDiff,_total_time
 17066  0021AE  C048  F0FB         	movff	printSortTimer@timeDiff+1,_total_time+1
 17067                           
 17068                           ;sort.c: 267: if(timeDiff >= 10){
 17069  0021B2  5048               	movf	printSortTimer@timeDiff+1,w,c
 17070  0021B4  E104               	bnz	i2u630_40
 17071  0021B6  0E0A               	movlw	10
 17072  0021B8  5C47               	subwf	printSortTimer@timeDiff,w,c
 17073  0021BA  A0D8               	btfss	status,0,c
 17074  0021BC  D003               	goto	i2l7285
 17075  0021BE                     i2u630_40:
 17076                           
 17077                           ;sort.c: 268: machine_state = DoneSorting_state;
 17078  0021BE  0E02               	movlw	2
 17079  0021C0  0100               	movlb	0	; () banked
 17080  0021C2  6FFC               	movwf	_machine_state& (0+255),b
 17081  0021C4                     i2l7285:
 17082                           
 17083                           ;sort.c: 270: }
 17084                           ;sort.c: 272: int hour = timeDiff / 3600;
 17085  0021C4  C047  F006         	movff	printSortTimer@timeDiff,i2___lwdiv@dividend
 17086  0021C8  C048  F007         	movff	printSortTimer@timeDiff+1,i2___lwdiv@dividend+1
 17087  0021CC  0E0E               	movlw	14
 17088  0021CE  6E09               	movwf	i2___lwdiv@divisor+1,c
 17089  0021D0  0E10               	movlw	16
 17090  0021D2  6E08               	movwf	i2___lwdiv@divisor,c
 17091  0021D4  ECE8  F01B         	call	i2___lwdiv	;wreg free
 17092  0021D8  C006  F02D         	movff	?i2___lwdiv,printSortTimer@hour
 17093  0021DC  C007  F02E         	movff	?i2___lwdiv+1,printSortTimer@hour+1
 17094                           
 17095                           ;sort.c: 273: int min = (timeDiff % 3600) / 60;
 17096  0021E0  0E0E               	movlw	14
 17097  0021E2  6E04               	movwf	i2___lwmod@divisor+1,c
 17098  0021E4  0E10               	movlw	16
 17099  0021E6  6E03               	movwf	i2___lwmod@divisor,c
 17100  0021E8  C047  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 17101  0021EC  C048  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 17102  0021F0  ECCE  F01C         	call	i2___lwmod	;wreg free
 17103  0021F4  C001  F006         	movff	?i2___lwmod,i2___lwdiv@dividend
 17104  0021F8  C002  F007         	movff	?i2___lwmod+1,i2___lwdiv@dividend+1
 17105  0021FC  0E00               	movlw	0
 17106  0021FE  6E09               	movwf	i2___lwdiv@divisor+1,c
 17107  002200  0E3C               	movlw	60
 17108  002202  6E08               	movwf	i2___lwdiv@divisor,c
 17109  002204  ECE8  F01B         	call	i2___lwdiv	;wreg free
 17110  002208  C006  F041         	movff	?i2___lwdiv,printSortTimer@min
 17111  00220C  C007  F042         	movff	?i2___lwdiv+1,printSortTimer@min+1
 17112                           
 17113                           ;sort.c: 274: int sec = (timeDiff % 3600) % 60;
 17114  002210  0E0E               	movlw	14
 17115  002212  6E04               	movwf	i2___lwmod@divisor+1,c
 17116  002214  0E10               	movlw	16
 17117  002216  6E03               	movwf	i2___lwmod@divisor,c
 17118  002218  C047  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 17119  00221C  C048  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 17120  002220  ECCE  F01C         	call	i2___lwmod	;wreg free
 17121  002224  C001  F045         	movff	?i2___lwmod,_printSortTimer$2265
 17122  002228  C002  F046         	movff	?i2___lwmod+1,_printSortTimer$2265+1
 17123                           
 17124                           ;sort.c: 274: int sec = (timeDiff % 3600) % 60;
 17125  00222C  C045  F001         	movff	_printSortTimer$2265,i2___lwmod@dividend
 17126  002230  C046  F002         	movff	_printSortTimer$2265+1,i2___lwmod@dividend+1
 17127  002234  0E00               	movlw	0
 17128  002236  6E04               	movwf	i2___lwmod@divisor+1,c
 17129  002238  0E3C               	movlw	60
 17130  00223A  6E03               	movwf	i2___lwmod@divisor,c
 17131  00223C  ECCE  F01C         	call	i2___lwmod	;wreg free
 17132  002240  C001  F043         	movff	?i2___lwmod,printSortTimer@sec
 17133  002244  C002  F044         	movff	?i2___lwmod+1,printSortTimer@sec+1
 17134                           
 17135                           ;sort.c: 276: lcdInst(0b10000000);;
 17136  002248  0E80               	movlw	128
 17137  00224A  ECA0  F01F         	call	i2_lcdInst
 17138                           
 17139                           ;sort.c: 277: printf("SORTING...");
 17140  00224E  0E98               	movlw	low STR_64
 17141  002250  6E0D               	movwf	i2printf@f,c
 17142  002252  0EFF               	movlw	high STR_64
 17143  002254  6E0E               	movwf	i2printf@f+1,c
 17144  002256  ECAF  F00A         	call	i2_printf	;wreg free
 17145                           
 17146                           ;sort.c: 278: lcdInst(0b11000000);;
 17147  00225A  0EC0               	movlw	192
 17148  00225C  ECA0  F01F         	call	i2_lcdInst
 17149                           
 17150                           ;sort.c: 279: printf("TIME %d:%02d", min, sec);
 17151  002260  0E69               	movlw	low STR_65
 17152  002262  6E0D               	movwf	i2printf@f,c
 17153  002264  0EFF               	movlw	high STR_65
 17154  002266  6E0E               	movwf	i2printf@f+1,c
 17155  002268  C041  F00F         	movff	printSortTimer@min,?i2_printf+2
 17156  00226C  C042  F010         	movff	printSortTimer@min+1,?i2_printf+3
 17157  002270  C043  F011         	movff	printSortTimer@sec,?i2_printf+4
 17158  002274  C044  F012         	movff	printSortTimer@sec+1,?i2_printf+5
 17159  002278  ECAF  F00A         	call	i2_printf	;wreg free
 17160  00227C  0012               	return		;funcret
 17161  00227E                     __end_of_printSortTimer:
 17162                           	opt stack 0
 17163                           pclatu	equ	0xFFB
 17164                           pclath	equ	0xFFA
 17165                           tblptru	equ	0xFF8
 17166                           tblptrh	equ	0xFF7
 17167                           tblptrl	equ	0xFF6
 17168                           tablat	equ	0xFF5
 17169                           prodh	equ	0xFF4
 17170                           prodl	equ	0xFF3
 17171                           intcon	equ	0xFF2
 17172                           intcon2	equ	0xFF1
 17173                           intcon3	equ	0xFF0
 17174                           indf0	equ	0xFEF
 17175                           postinc0	equ	0xFEE
 17176                           fsr0h	equ	0xFEA
 17177                           fsr0l	equ	0xFE9
 17178                           wreg	equ	0xFE8
 17179                           postdec1	equ	0xFE5
 17180                           fsr1h	equ	0xFE2
 17181                           fsr1l	equ	0xFE1
 17182                           indf2	equ	0xFDF
 17183                           postinc2	equ	0xFDE
 17184                           postdec2	equ	0xFDD
 17185                           fsr2h	equ	0xFDA
 17186                           fsr2l	equ	0xFD9
 17187                           status	equ	0xFD8
 17188                           
 17189 ;; *************** function i2_printf *****************
 17190 ;; Defined at:
 17191 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 17192 ;; Parameters:    Size  Location     Type
 17193 ;;  f               2   12[COMRAM] PTR const unsigned char 
 17194 ;;		 -> STR_104(15), STR_103(15), STR_102(15), STR_101(17), 
 17195 ;;		 -> STR_100(17), STR_99(17), STR_98(16), STR_97(17), 
 17196 ;;		 -> STR_96(17), STR_95(17), STR_94(17), STR_93(17), 
 17197 ;;		 -> STR_92(17), STR_91(15), STR_90(11), STR_89(17), 
 17198 ;;		 -> STR_88(11), STR_87(17), STR_86(14), STR_85(15), 
 17199 ;;		 -> STR_84(14), STR_83(10), STR_82(16), STR_81(15), 
 17200 ;;		 -> STR_80(15), STR_79(13), STR_78(14), STR_77(8), 
 17201 ;;		 -> STR_76(14), STR_75(15), STR_74(12), STR_73(14), 
 17202 ;;		 -> STR_72(17), STR_71(14), STR_70(15), STR_69(13), 
 17203 ;;		 -> STR_68(17), STR_67(7), STR_66(21), STR_65(13), 
 17204 ;;		 -> STR_64(11), STR_63(24), STR_50(17), STR_49(17), 
 17205 ;;		 -> STR_48(17), STR_47(17), STR_46(17), STR_45(17), 
 17206 ;;		 -> STR_44(17), STR_43(17), STR_42(17), STR_41(17), 
 17207 ;;		 -> STR_40(17), STR_39(17), STR_38(17), STR_37(17), 
 17208 ;;		 -> STR_36(17), STR_35(17), STR_34(17), STR_33(17), 
 17209 ;;		 -> STR_32(17), STR_31(17), STR_30(17), STR_29(3), 
 17210 ;;		 -> STR_28(17), STR_27(19), STR_26(17), STR_25(19), 
 17211 ;;		 -> STR_24(17), STR_23(14), STR_22(10), STR_21(24), 
 17212 ;;		 -> STR_7(7), STR_6(17), STR_5(18), STR_4(16), 
 17213 ;;		 -> STR_3(18), STR_2(14), STR_1(18), 
 17214 ;; Auto vars:     Size  Location     Type
 17215 ;;  printf          4    0        struct .
 17216 ;;  printf          2   39[COMRAM] int 
 17217 ;;  printf          2   35[COMRAM] unsigned int 
 17218 ;;  printf          2   33[COMRAM] unsigned int 
 17219 ;;  printf          2   31[COMRAM] PTR void [1]
 17220 ;;		 -> ?i2_printf(2), ?_printf(2), 
 17221 ;;  printf          2   29[COMRAM] PTR const unsigned char 
 17222 ;;		 -> STR_105(7), count_total(2), printRTC@month(4), UI@month(4), 
 17223 ;;  printf          1   38[COMRAM] char 
 17224 ;;  printf          1   37[COMRAM] unsigned char 
 17225 ;;  printf          1   28[COMRAM] char 
 17226 ;; Return value:  Size  Location     Type
 17227 ;;                  2   12[COMRAM] int 
 17228 ;; Registers used:
 17229 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17230 ;; Tracked objects:
 17231 ;;		On entry : 0/0
 17232 ;;		On exit  : 0/0
 17233 ;;		Unchanged: 0/0
 17234 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17235 ;;      Params:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17236 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17237 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17238 ;;      Totals:        29       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17239 ;;Total ram usage:       29 bytes
 17240 ;; Hardware stack levels used:    1
 17241 ;; Hardware stack levels required when called:    2
 17242 ;; This function calls:
 17243 ;;		i2___lwdiv
 17244 ;;		i2___lwmod
 17245 ;;		i2___wmul
 17246 ;;		i2_isdigit
 17247 ;;		i2_putch
 17248 ;; This function is called by:
 17249 ;;		_change_state_to_menu_11
 17250 ;;		_change_state_to_menu_23
 17251 ;;		_change_state_to_logs_11
 17252 ;;		_change_state_to_logs_12
 17253 ;;		_change_state_to_logs_22
 17254 ;;		_change_state_to_logs_23
 17255 ;;		_change_state_to_logs_33
 17256 ;;		_change_state_to_logs_34
 17257 ;;		_printSortTimer
 17258 ;;		i2_change_state_to_menu_start
 17259 ;;		i2_change_state_to_menu_12
 17260 ;;		i2_change_state_to_menu_22
 17261 ;;		i2_printRTC
 17262 ;; This function uses a non-reentrant model
 17263 ;;
 17264                           
 17265                           	psect	text71
 17266  00155E                     __ptext71:
 17267                           	opt stack 0
 17268  00155E                     i2_printf:
 17269                           	opt stack 19
 17270                           
 17271                           ;doprnt.c: 466: va_list ap;
 17272                           ;doprnt.c: 499: signed char c;
 17273                           ;doprnt.c: 501: int width;
 17274                           ;doprnt.c: 506: signed char prec;
 17275                           ;doprnt.c: 508: unsigned char flag;
 17276                           ;doprnt.c: 523: union {
 17277                           ;doprnt.c: 524: unsigned long vd;
 17278                           ;doprnt.c: 525: double integ;
 17279                           ;doprnt.c: 526: } tmpval;
 17280                           ;doprnt.c: 528: unsigned int val;
 17281                           ;doprnt.c: 529: unsigned len;
 17282                           ;doprnt.c: 530: const char * cp;
 17283                           ;doprnt.c: 533: *ap = __va_start();
 17284                           
 17285                           ;incstack = 0
 17286  00155E  0E0F               	movlw	low (?i2_printf+2)
 17287  001560  6E20               	movwf	i2printf@ap,c
 17288  001562  0E00               	movlw	high (?i2_printf+2)
 17289  001564  6E21               	movwf	i2printf@ap+1,c
 17290                           
 17291                           ;doprnt.c: 536: while(c = *f++) {
 17292  001566  D1A4               	goto	i2l5313
 17293  001568                     i2l5183:
 17294                           
 17295                           ;doprnt.c: 538: if(c != '%')
 17296  001568  0E25               	movlw	37
 17297  00156A  1827               	xorwf	i2printf@c,w,c
 17298  00156C  B4D8               	btfsc	status,2,c
 17299  00156E  D004               	goto	i2l5187
 17300                           
 17301                           ;doprnt.c: 540: {
 17302                           ;doprnt.c: 541: (putch(c) );
 17303  001570  5027               	movf	i2printf@c,w,c
 17304  001572  EC9A  F01F         	call	i2_putch
 17305                           
 17306                           ;doprnt.c: 542: continue;
 17307  001576  D19C               	goto	i2l5313
 17308  001578                     i2l5187:
 17309                           
 17310                           ;doprnt.c: 543: }
 17311                           ;doprnt.c: 546: width = 0;
 17312  001578  0E00               	movlw	0
 17313  00157A  6E29               	movwf	i2printf@width+1,c
 17314  00157C  0E00               	movlw	0
 17315  00157E  6E28               	movwf	i2printf@width,c
 17316                           
 17317                           ;doprnt.c: 548: flag = 0;
 17318  001580  0E00               	movlw	0
 17319  001582  6E26               	movwf	i2printf@flag,c
 17320                           
 17321                           ;doprnt.c: 551: switch(*f) {
 17322                           
 17323                           ;doprnt.c: 550: for(;;) {
 17324  001584  D003               	goto	i2l5193
 17325  001586                     i2l5189:
 17326                           
 17327                           ;doprnt.c: 580: flag |= 0x04;
 17328  001586  8426               	bsf	i2printf@flag,2,c
 17329                           
 17330                           ;doprnt.c: 581: f++;
 17331  001588  4A0D               	infsnz	i2printf@f,f,c
 17332  00158A  2A0E               	incf	i2printf@f+1,f,c
 17333  00158C                     i2l5193:
 17334  00158C  C00D  FFF6         	movff	i2printf@f,tblptrl
 17335  001590  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 17336  001594                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 17337  001594  6AF8               	clrf	tblptru,c
 17338  001596                     	endif
 17339  001596                     	if	0	;tblptru may be non-zero
 17340  001596                     	endif
 17341  001596  0008               	tblrd		*
 17342  001598  50F5               	movf	tablat,w,c
 17343                           
 17344                           ; Switch size 1, requested type "space"
 17345                           ; Number of cases is 1, Range of values is 48 to 48
 17346                           ; switch strategies available:
 17347                           ; Name         Instructions Cycles
 17348                           ; simple_byte            4     3 (average)
 17349                           ;	Chosen strategy is simple_byte
 17350  00159A  0A30               	xorlw	48	; case 48
 17351  00159C  B4D8               	btfsc	status,2,c
 17352  00159E  D7F3               	goto	i2l5189
 17353                           
 17354                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 17355                           
 17356                           ;doprnt.c: 586: }
 17357                           
 17358                           ;doprnt.c: 585: break;
 17359  0015A0  C00D  FFF6         	movff	i2printf@f,tblptrl
 17360  0015A4  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 17361  0015A8                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 17362  0015A8  6AF8               	clrf	tblptru,c
 17363  0015AA                     	endif
 17364  0015AA                     	if	0	;tblptru may be non-zero
 17365  0015AA                     	endif
 17366  0015AA  0008               	tblrd		*
 17367  0015AC  50F5               	movf	tablat,w,c
 17368  0015AE  EC3D  F01F         	call	i2_isdigit
 17369  0015B2  A0D8               	btfss	status,0,c
 17370  0015B4  D0A6               	goto	i2l5241
 17371                           
 17372                           ;doprnt.c: 598: width = 0;
 17373  0015B6  0E00               	movlw	0
 17374  0015B8  6E29               	movwf	i2printf@width+1,c
 17375  0015BA  0E00               	movlw	0
 17376  0015BC  6E28               	movwf	i2printf@width,c
 17377  0015BE                     i2l5199:
 17378                           
 17379                           ;doprnt.c: 600: width *= 10;
 17380  0015BE  C028  F001         	movff	i2printf@width,i2___wmul@multiplier
 17381  0015C2  C029  F002         	movff	i2printf@width+1,i2___wmul@multiplier+1
 17382  0015C6  0E00               	movlw	0
 17383  0015C8  6E04               	movwf	i2___wmul@multiplicand+1,c
 17384  0015CA  0E0A               	movlw	10
 17385  0015CC  6E03               	movwf	i2___wmul@multiplicand,c
 17386  0015CE  ECD1  F01E         	call	i2___wmul	;wreg free
 17387  0015D2  C001  F028         	movff	?i2___wmul,i2printf@width
 17388  0015D6  C002  F029         	movff	?i2___wmul+1,i2printf@width+1
 17389                           
 17390                           ;doprnt.c: 601: width += *f++ - '0';
 17391  0015DA  0ED0               	movlw	208
 17392  0015DC  6E19               	movwf	??i2_printf& (0+255),c
 17393  0015DE  0EFF               	movlw	255
 17394  0015E0  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 17395  0015E2  C00D  FFF6         	movff	i2printf@f,tblptrl
 17396  0015E6  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 17397  0015EA                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 17398  0015EA  6AF8               	clrf	tblptru,c
 17399  0015EC                     	endif
 17400  0015EC                     	if	0	;tblptru may be non-zero
 17401  0015EC                     	endif
 17402  0015EC  0008               	tblrd		*
 17403  0015EE  50F5               	movf	tablat,w,c
 17404  0015F0  6E1B               	movwf	(??i2_printf+2)& (0+255),c
 17405  0015F2  6A1C               	clrf	(??i2_printf+3)& (0+255),c
 17406  0015F4  5019               	movf	??i2_printf,w,c
 17407  0015F6  261B               	addwf	??i2_printf+2,f,c
 17408  0015F8  501A               	movf	??i2_printf+1,w,c
 17409  0015FA  221C               	addwfc	??i2_printf+3,f,c
 17410  0015FC  501B               	movf	??i2_printf+2,w,c
 17411  0015FE  2628               	addwf	i2printf@width,f,c
 17412  001600  501C               	movf	??i2_printf+3,w,c
 17413  001602  2229               	addwfc	i2printf@width+1,f,c
 17414  001604  4A0D               	infsnz	i2printf@f,f,c
 17415  001606  2A0E               	incf	i2printf@f+1,f,c
 17416                           
 17417                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 17418  001608  C00D  FFF6         	movff	i2printf@f,tblptrl
 17419  00160C  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 17420  001610                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 17421  001610  6AF8               	clrf	tblptru,c
 17422  001612                     	endif
 17423  001612                     	if	0	;tblptru may be non-zero
 17424  001612                     	endif
 17425  001612  0008               	tblrd		*
 17426  001614  50F5               	movf	tablat,w,c
 17427  001616  EC3D  F01F         	call	i2_isdigit
 17428  00161A  A0D8               	btfss	status,0,c
 17429  00161C  D072               	goto	i2l5241
 17430  00161E  D7CF               	goto	i2l5199
 17431  001620                     i2l5207:
 17432                           
 17433                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 17434  001620  C020  FFD9         	movff	i2printf@ap,fsr2l
 17435  001624  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 17436  001628  CFDE F01E          	movff	postinc2,i2printf@cp
 17437  00162C  CFDD F01F          	movff	postdec2,i2printf@cp+1
 17438  001630  0E02               	movlw	2
 17439  001632  2620               	addwf	i2printf@ap,f,c
 17440  001634  0E00               	movlw	0
 17441  001636  2221               	addwfc	i2printf@ap+1,f,c
 17442                           
 17443                           ;doprnt.c: 740: if(!cp)
 17444  001638  501E               	movf	i2printf@cp,w,c
 17445  00163A  101F               	iorwf	i2printf@cp+1,w,c
 17446  00163C  A4D8               	btfss	status,2,c
 17447  00163E  D004               	goto	i2l5215
 17448                           
 17449                           ;doprnt.c: 741: cp = "(null)";
 17450  001640  0EB5               	movlw	low STR_105
 17451  001642  6E1E               	movwf	i2printf@cp,c
 17452  001644  0EFF               	movlw	high STR_105
 17453  001646  6E1F               	movwf	i2printf@cp+1,c
 17454  001648                     i2l5215:
 17455                           
 17456                           ;doprnt.c: 745: len = 0;
 17457  001648  0E00               	movlw	0
 17458  00164A  6E23               	movwf	i2printf@len+1,c
 17459  00164C  0E00               	movlw	0
 17460  00164E  6E22               	movwf	i2printf@len,c
 17461                           
 17462                           ;doprnt.c: 746: while(cp[len])
 17463  001650  D002               	goto	i2l5219
 17464  001652                     i2l5217:
 17465                           
 17466                           ;doprnt.c: 747: len++;
 17467  001652  4A22               	infsnz	i2printf@len,f,c
 17468  001654  2A23               	incf	i2printf@len+1,f,c
 17469  001656                     i2l5219:
 17470  001656  5022               	movf	i2printf@len,w,c
 17471  001658  241E               	addwf	i2printf@cp,w,c
 17472  00165A  6E19               	movwf	??i2_printf& (0+255),c
 17473  00165C  5023               	movf	i2printf@len+1,w,c
 17474  00165E  201F               	addwfc	i2printf@cp+1,w,c
 17475  001660  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 17476  001662  C019  FFF6         	movff	??i2_printf,tblptrl
 17477  001666  C01A  FFF7         	movff	??i2_printf+1,tblptrh
 17478  00166A  0E00               	movlw	low (__mediumconst shr (0+16))
 17479  00166C  6EF8               	movwf	tblptru,c
 17480  00166E  0E0F               	movlw	(high __ramtop+-1)
 17481  001670  64F7               	cpfsgt	tblptrh,c
 17482  001672  D003               	bra	i2u389_47
 17483  001674  0008               	tblrd		*
 17484  001676  50F5               	movf	tablat,w,c
 17485  001678  D005               	bra	i2u389_40
 17486  00167A                     i2u389_47:
 17487  00167A  CFF6 FFE9          	movff	tblptrl,fsr0l
 17488  00167E  CFF7 FFEA          	movff	tblptrh,fsr0h
 17489  001682  50EF               	movf	indf0,w,c
 17490  001684                     i2u389_40:
 17491  001684  0900               	iorlw	0
 17492  001686  A4D8               	btfss	status,2,c
 17493  001688  D7E4               	goto	i2l5217
 17494                           
 17495                           ;doprnt.c: 757: if(width > len)
 17496  00168A  5028               	movf	i2printf@width,w,c
 17497  00168C  5C22               	subwf	i2printf@len,w,c
 17498  00168E  5029               	movf	i2printf@width+1,w,c
 17499  001690  5823               	subwfb	i2printf@len+1,w,c
 17500  001692  B0D8               	btfsc	status,0,c
 17501  001694  D005               	goto	i2l5225
 17502                           
 17503                           ;doprnt.c: 758: width -= len;
 17504  001696  5022               	movf	i2printf@len,w,c
 17505  001698  5E28               	subwf	i2printf@width,f,c
 17506  00169A  5023               	movf	i2printf@len+1,w,c
 17507  00169C  5A29               	subwfb	i2printf@width+1,f,c
 17508  00169E  D008               	goto	i2l5229
 17509  0016A0                     i2l5225:
 17510                           
 17511                           ;doprnt.c: 759: else
 17512                           ;doprnt.c: 760: width = 0;
 17513  0016A0  0E00               	movlw	0
 17514  0016A2  6E29               	movwf	i2printf@width+1,c
 17515  0016A4  0E00               	movlw	0
 17516  0016A6  6E28               	movwf	i2printf@width,c
 17517                           
 17518                           ;doprnt.c: 764: while(width--)
 17519  0016A8  D003               	goto	i2l5229
 17520  0016AA                     i2l5227:
 17521                           
 17522                           ;doprnt.c: 765: (putch(' ') );
 17523  0016AA  0E20               	movlw	32
 17524  0016AC  EC9A  F01F         	call	i2_putch
 17525  0016B0                     i2l5229:
 17526  0016B0  0628               	decf	i2printf@width,f,c
 17527  0016B2  A0D8               	btfss	status,0,c
 17528  0016B4  0629               	decf	i2printf@width+1,f,c
 17529  0016B6  2828               	incf	i2printf@width,w,c
 17530  0016B8  E1F8               	bnz	i2l5227
 17531  0016BA  2829               	incf	i2printf@width+1,w,c
 17532  0016BC  B4D8               	btfsc	status,2,c
 17533  0016BE  D016               	goto	i2l5235
 17534  0016C0  D7F4               	goto	i2l5227
 17535  0016C2                     i2l5231:
 17536                           
 17537                           ;doprnt.c: 768: (putch(*cp++) );
 17538  0016C2  C01E  FFF6         	movff	i2printf@cp,tblptrl
 17539  0016C6  C01F  FFF7         	movff	i2printf@cp+1,tblptrh
 17540  0016CA  0E00               	movlw	low (__mediumconst shr (0+16))
 17541  0016CC  6EF8               	movwf	tblptru,c
 17542  0016CE  0E0F               	movlw	(high __ramtop+-1)
 17543  0016D0  64F7               	cpfsgt	tblptrh,c
 17544  0016D2  D003               	bra	i2u393_47
 17545  0016D4  0008               	tblrd		*
 17546  0016D6  50F5               	movf	tablat,w,c
 17547  0016D8  D005               	bra	i2u393_40
 17548  0016DA                     i2u393_47:
 17549  0016DA  CFF6 FFE9          	movff	tblptrl,fsr0l
 17550  0016DE  CFF7 FFEA          	movff	tblptrh,fsr0h
 17551  0016E2  50EF               	movf	indf0,w,c
 17552  0016E4                     i2u393_40:
 17553  0016E4  EC9A  F01F         	call	i2_putch
 17554  0016E8  4A1E               	infsnz	i2printf@cp,f,c
 17555  0016EA  2A1F               	incf	i2printf@cp+1,f,c
 17556  0016EC                     i2l5235:
 17557  0016EC  0622               	decf	i2printf@len,f,c
 17558  0016EE  A0D8               	btfss	status,0,c
 17559  0016F0  0623               	decf	i2printf@len+1,f,c
 17560  0016F2  2822               	incf	i2printf@len,w,c
 17561  0016F4  E1E6               	bnz	i2l5231
 17562  0016F6  2823               	incf	i2printf@len+1,w,c
 17563  0016F8  B4D8               	btfsc	status,2,c
 17564  0016FA  D0DA               	goto	i2l5313
 17565  0016FC  D7E2               	goto	i2l5231
 17566  0016FE                     i2l5237:
 17567                           
 17568                           ;doprnt.c: 818: flag |= 0x40;
 17569  0016FE  8C26               	bsf	i2printf@flag,6,c
 17570                           
 17571                           ;doprnt.c: 822: }
 17572                           
 17573                           ;doprnt.c: 819: break;
 17574  001700  D01B               	goto	i2l1125
 17575  001702                     i2l5241:
 17576  001702  C00D  FFF6         	movff	i2printf@f,tblptrl
 17577  001706  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 17578  00170A  4A0D               	infsnz	i2printf@f,f,c
 17579  00170C  2A0E               	incf	i2printf@f+1,f,c
 17580  00170E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 17581  00170E  6AF8               	clrf	tblptru,c
 17582  001710                     	endif
 17583  001710                     	if	0	;tblptru may be non-zero
 17584  001710                     	endif
 17585  001710  0008               	tblrd		*
 17586  001712  CFF5 F027          	movff	tablat,i2printf@c
 17587  001716  5027               	movf	i2printf@c,w,c
 17588                           
 17589                           ; Switch size 1, requested type "space"
 17590                           ; Number of cases is 5, Range of values is 0 to 117
 17591                           ; switch strategies available:
 17592                           ; Name         Instructions Cycles
 17593                           ; simple_byte           16     9 (average)
 17594                           ;	Chosen strategy is simple_byte
 17595  001718  0A00               	xorlw	0	; case 0
 17596  00171A  B4D8               	btfsc	status,2,c
 17597  00171C  0012               	return	
 17598  00171E  0A64               	xorlw	100	; case 100
 17599  001720  B4D8               	btfsc	status,2,c
 17600  001722  D00A               	goto	i2l1125
 17601  001724  0A0D               	xorlw	13	; case 105
 17602  001726  B4D8               	btfsc	status,2,c
 17603  001728  D007               	goto	i2l1125
 17604  00172A  0A1A               	xorlw	26	; case 115
 17605  00172C  B4D8               	btfsc	status,2,c
 17606  00172E  D778               	goto	i2l5207
 17607  001730  0A06               	xorlw	6	; case 117
 17608  001732  B4D8               	btfsc	status,2,c
 17609  001734  D7E4               	goto	i2l5237
 17610  001736  D0BC               	goto	i2l5313
 17611  001738                     i2l1125:
 17612                           
 17613                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
 17614  001738  BC26               	btfsc	i2printf@flag,6,c
 17615  00173A  D015               	goto	i2l5253
 17616                           
 17617                           ;doprnt.c: 1253: {
 17618                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 17619  00173C  C020  FFD9         	movff	i2printf@ap,fsr2l
 17620  001740  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 17621  001744  CFDE F024          	movff	postinc2,i2printf@val
 17622  001748  CFDD F025          	movff	postdec2,i2printf@val+1
 17623  00174C  0E02               	movlw	2
 17624  00174E  2620               	addwf	i2printf@ap,f,c
 17625  001750  0E00               	movlw	0
 17626  001752  2221               	addwfc	i2printf@ap+1,f,c
 17627                           
 17628                           ;doprnt.c: 1261: if((int)val < 0) {
 17629  001754  AE25               	btfss	i2printf@val+1,7,c
 17630  001756  D013               	goto	i2l5257
 17631                           
 17632                           ;doprnt.c: 1262: flag |= 0x03;
 17633  001758  0E03               	movlw	3
 17634  00175A  1226               	iorwf	i2printf@flag,f,c
 17635                           
 17636                           ;doprnt.c: 1263: val = -val;
 17637  00175C  6C24               	negf	i2printf@val,c
 17638  00175E  1E25               	comf	i2printf@val+1,f,c
 17639  001760  B0D8               	btfsc	status,0,c
 17640  001762  2A25               	incf	i2printf@val+1,f,c
 17641                           
 17642                           ;doprnt.c: 1264: }
 17643                           ;doprnt.c: 1266: }
 17644  001764  D00C               	goto	i2l5257
 17645  001766                     i2l5253:
 17646                           
 17647                           ;doprnt.c: 1268: else
 17648                           ;doprnt.c: 1273: {
 17649                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 17650  001766  C020  FFD9         	movff	i2printf@ap,fsr2l
 17651  00176A  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 17652  00176E  CFDE F024          	movff	postinc2,i2printf@val
 17653  001772  CFDD F025          	movff	postdec2,i2printf@val+1
 17654  001776  0E02               	movlw	2
 17655  001778  2620               	addwf	i2printf@ap,f,c
 17656  00177A  0E00               	movlw	0
 17657  00177C  2221               	addwfc	i2printf@ap+1,f,c
 17658  00177E                     i2l5257:
 17659                           
 17660                           ;doprnt.c: 1287: }
 17661                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 17662  00177E  0E01               	movlw	1
 17663  001780  6E27               	movwf	i2printf@c,c
 17664  001782                     i2l5259:
 17665  001782  0E05               	movlw	5
 17666  001784  1827               	xorwf	i2printf@c,w,c
 17667  001786  B4D8               	btfsc	status,2,c
 17668  001788  D015               	goto	i2l5271
 17669                           
 17670                           ;doprnt.c: 1306: if(val < dpowers[c])
 17671  00178A  5027               	movf	i2printf@c,w,c
 17672  00178C  0D02               	mullw	2
 17673  00178E  0EB4               	movlw	low _dpowers
 17674  001790  24F3               	addwf	prodl,w,c
 17675  001792  6EF6               	movwf	tblptrl,c
 17676  001794  0EFB               	movlw	high _dpowers
 17677  001796  20F4               	addwfc	prodh,w,c
 17678  001798  6EF7               	movwf	tblptrh,c
 17679  00179A                     	if	1	;There are 3 active tblptr bytes
 17680  00179A  6AF8               	clrf	tblptru,c
 17681  00179C  0E00               	movlw	low (__mediumconst shr (0+16))
 17682  00179E  22F8               	addwfc	tblptru,f,c
 17683  0017A0                     	endif
 17684  0017A0  0009               	tblrd		*+
 17685  0017A2  50F5               	movf	tablat,w,c
 17686  0017A4  5C24               	subwf	i2printf@val,w,c
 17687  0017A6  0009               	tblrd		*+
 17688  0017A8  50F5               	movf	tablat,w,c
 17689  0017AA  5825               	subwfb	i2printf@val+1,w,c
 17690  0017AC  A0D8               	btfss	status,0,c
 17691  0017AE  D002               	goto	i2l5271
 17692                           
 17693                           ;doprnt.c: 1307: break;
 17694  0017B0  2A27               	incf	i2printf@c,f,c
 17695  0017B2  D7E7               	goto	i2l5259
 17696  0017B4                     i2l5271:
 17697                           
 17698                           ;doprnt.c: 1345: if(width && flag & 0x03)
 17699  0017B4  5028               	movf	i2printf@width,w,c
 17700  0017B6  1029               	iorwf	i2printf@width+1,w,c
 17701  0017B8  B4D8               	btfsc	status,2,c
 17702  0017BA  D009               	goto	i2l5277
 17703  0017BC  C026  F019         	movff	i2printf@flag,??i2_printf
 17704  0017C0  0E03               	movlw	3
 17705  0017C2  1619               	andwf	??i2_printf,f,c
 17706  0017C4  B4D8               	btfsc	status,2,c
 17707  0017C6  D003               	goto	i2l5277
 17708                           
 17709                           ;doprnt.c: 1346: width--;
 17710  0017C8  0628               	decf	i2printf@width,f,c
 17711  0017CA  A0D8               	btfss	status,0,c
 17712  0017CC  0629               	decf	i2printf@width+1,f,c
 17713  0017CE                     i2l5277:
 17714                           
 17715                           ;doprnt.c: 1381: if(width > c)
 17716  0017CE  0E80               	movlw	128
 17717  0017D0  BE27               	btfsc	i2printf@c,7,c
 17718  0017D2  0E7F               	movlw	127
 17719  0017D4  6E19               	movwf	??i2_printf& (0+255),c
 17720  0017D6  5028               	movf	i2printf@width,w,c
 17721  0017D8  5C27               	subwf	i2printf@c,w,c
 17722  0017DA  5029               	movf	i2printf@width+1,w,c
 17723  0017DC  0A80               	xorlw	128
 17724  0017DE  5819               	subwfb	??i2_printf& (0+255),w,c
 17725  0017E0  B0D8               	btfsc	status,0,c
 17726  0017E2  D007               	goto	i2l5281
 17727                           
 17728                           ;doprnt.c: 1382: width -= c;
 17729  0017E4  5027               	movf	i2printf@c,w,c
 17730  0017E6  5E28               	subwf	i2printf@width,f,c
 17731  0017E8  0E00               	movlw	0
 17732  0017EA  BE27               	btfsc	i2printf@c,7,c
 17733  0017EC  0EFF               	movlw	255
 17734  0017EE  5A29               	subwfb	i2printf@width+1,f,c
 17735  0017F0  D004               	goto	i2l5283
 17736  0017F2                     i2l5281:
 17737                           
 17738                           ;doprnt.c: 1383: else
 17739                           ;doprnt.c: 1384: width = 0;
 17740  0017F2  0E00               	movlw	0
 17741  0017F4  6E29               	movwf	i2printf@width+1,c
 17742  0017F6  0E00               	movlw	0
 17743  0017F8  6E28               	movwf	i2printf@width,c
 17744  0017FA                     i2l5283:
 17745                           
 17746                           ;doprnt.c: 1387: if(flag & 0x04) {
 17747  0017FA  A426               	btfss	i2printf@flag,2,c
 17748  0017FC  D014               	goto	i2l5295
 17749                           
 17750                           ;doprnt.c: 1392: if(flag & 0x03)
 17751  0017FE  C026  F019         	movff	i2printf@flag,??i2_printf
 17752  001802  0E03               	movlw	3
 17753  001804  1619               	andwf	??i2_printf,f,c
 17754  001806  B4D8               	btfsc	status,2,c
 17755  001808  D003               	goto	i2l5289
 17756                           
 17757                           ;doprnt.c: 1393: (putch('-') );
 17758  00180A  0E2D               	movlw	45
 17759  00180C  EC9A  F01F         	call	i2_putch
 17760  001810                     i2l5289:
 17761                           
 17762                           ;doprnt.c: 1415: if(width)
 17763  001810  5028               	movf	i2printf@width,w,c
 17764  001812  1029               	iorwf	i2printf@width+1,w,c
 17765  001814  B4D8               	btfsc	status,2,c
 17766  001816  D01E               	goto	i2l5305
 17767                           
 17768                           ;doprnt.c: 1417: (putch('0') );
 17769                           
 17770                           ;doprnt.c: 1416: do
 17771  001818  0E30               	movlw	48
 17772  00181A  EC9A  F01F         	call	i2_putch
 17773                           
 17774                           ;doprnt.c: 1418: while(--width);
 17775  00181E  0628               	decf	i2printf@width,f,c
 17776  001820  A0D8               	btfss	status,0,c
 17777  001822  0629               	decf	i2printf@width+1,f,c
 17778  001824  D7F5               	goto	i2l5289
 17779  001826                     i2l5295:
 17780                           
 17781                           ;doprnt.c: 1422: {
 17782                           ;doprnt.c: 1424: if(width
 17783                           ;doprnt.c: 1428: )
 17784  001826  5028               	movf	i2printf@width,w,c
 17785  001828  1029               	iorwf	i2printf@width+1,w,c
 17786  00182A  B4D8               	btfsc	status,2,c
 17787  00182C  D00A               	goto	i2l5301
 17788  00182E                     i2l5297:
 17789                           
 17790                           ;doprnt.c: 1430: (putch(' ') );
 17791  00182E  0E20               	movlw	32
 17792  001830  EC9A  F01F         	call	i2_putch
 17793                           
 17794                           ;doprnt.c: 1431: while(--width);
 17795  001834  0628               	decf	i2printf@width,f,c
 17796  001836  A0D8               	btfss	status,0,c
 17797  001838  0629               	decf	i2printf@width+1,f,c
 17798  00183A  5028               	movf	i2printf@width,w,c
 17799  00183C  1029               	iorwf	i2printf@width+1,w,c
 17800  00183E  A4D8               	btfss	status,2,c
 17801  001840  D7F6               	goto	i2l5297
 17802  001842                     i2l5301:
 17803                           
 17804                           ;doprnt.c: 1438: if(flag & 0x03)
 17805  001842  C026  F019         	movff	i2printf@flag,??i2_printf
 17806  001846  0E03               	movlw	3
 17807  001848  1619               	andwf	??i2_printf,f,c
 17808  00184A  B4D8               	btfsc	status,2,c
 17809  00184C  D003               	goto	i2l5305
 17810                           
 17811                           ;doprnt.c: 1439: (putch('-') );
 17812  00184E  0E2D               	movlw	45
 17813  001850  EC9A  F01F         	call	i2_putch
 17814  001854                     i2l5305:
 17815                           
 17816                           ;doprnt.c: 1469: }
 17817                           ;doprnt.c: 1472: prec = c;
 17818  001854  C027  F01D         	movff	i2printf@c,i2printf@prec
 17819                           
 17820                           ;doprnt.c: 1474: while(prec--) {
 17821  001858  D027               	goto	i2l5311
 17822  00185A                     i2l5307:
 17823                           
 17824                           ;doprnt.c: 1478: {
 17825                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 17826  00185A  501D               	movf	i2printf@prec,w,c
 17827  00185C  0D02               	mullw	2
 17828  00185E  0EB4               	movlw	low _dpowers
 17829  001860  24F3               	addwf	prodl,w,c
 17830  001862  6EF6               	movwf	tblptrl,c
 17831  001864  0EFB               	movlw	high _dpowers
 17832  001866  20F4               	addwfc	prodh,w,c
 17833  001868  6EF7               	movwf	tblptrh,c
 17834  00186A                     	if	1	;There are 3 active tblptr bytes
 17835  00186A  6AF8               	clrf	tblptru,c
 17836  00186C  0E00               	movlw	low (__mediumconst shr (0+16))
 17837  00186E  22F8               	addwfc	tblptru,f,c
 17838  001870                     	endif
 17839  001870  0009               	tblrd		*+
 17840  001872  CFF5 F008          	movff	tablat,i2___lwdiv@divisor
 17841  001876  000A               	tblrd		*-
 17842  001878  CFF5 F009          	movff	tablat,i2___lwdiv@divisor+1
 17843  00187C  C024  F006         	movff	i2printf@val,i2___lwdiv@dividend
 17844  001880  C025  F007         	movff	i2printf@val+1,i2___lwdiv@dividend+1
 17845  001884  ECE8  F01B         	call	i2___lwdiv	;wreg free
 17846  001888  C006  F001         	movff	?i2___lwdiv,i2___lwmod@dividend
 17847  00188C  C007  F002         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
 17848  001890  0E00               	movlw	0
 17849  001892  6E04               	movwf	i2___lwmod@divisor+1,c
 17850  001894  0E0A               	movlw	10
 17851  001896  6E03               	movwf	i2___lwmod@divisor,c
 17852  001898  ECCE  F01C         	call	i2___lwmod	;wreg free
 17853  00189C  5001               	movf	?i2___lwmod,w,c
 17854  00189E  0F30               	addlw	48
 17855  0018A0  6E27               	movwf	i2printf@c,c
 17856                           
 17857                           ;doprnt.c: 1523: }
 17858                           ;doprnt.c: 1524: (putch(c) );
 17859  0018A2  5027               	movf	i2printf@c,w,c
 17860  0018A4  EC9A  F01F         	call	i2_putch
 17861  0018A8                     i2l5311:
 17862  0018A8  061D               	decf	i2printf@prec,f,c
 17863  0018AA  281D               	incf	i2printf@prec,w,c
 17864  0018AC  A4D8               	btfss	status,2,c
 17865  0018AE  D7D5               	goto	i2l5307
 17866  0018B0                     i2l5313:
 17867  0018B0  C00D  FFF6         	movff	i2printf@f,tblptrl
 17868  0018B4  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 17869  0018B8  4A0D               	infsnz	i2printf@f,f,c
 17870  0018BA  2A0E               	incf	i2printf@f+1,f,c
 17871  0018BC                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 17872  0018BC  6AF8               	clrf	tblptru,c
 17873  0018BE                     	endif
 17874  0018BE                     	if	0	;tblptru may be non-zero
 17875  0018BE                     	endif
 17876  0018BE  0008               	tblrd		*
 17877  0018C0  CFF5 F027          	movff	tablat,i2printf@c
 17878  0018C4  5027               	movf	i2printf@c,w,c
 17879  0018C6  B4D8               	btfsc	status,2,c
 17880  0018C8  0012               	return	
 17881  0018CA  D64E               	goto	i2l5183
 17882  0018CC                     __end_ofi2_printf:
 17883                           	opt stack 0
 17884                           pclatu	equ	0xFFB
 17885                           pclath	equ	0xFFA
 17886                           tblptru	equ	0xFF8
 17887                           tblptrh	equ	0xFF7
 17888                           tblptrl	equ	0xFF6
 17889                           tablat	equ	0xFF5
 17890                           prodh	equ	0xFF4
 17891                           prodl	equ	0xFF3
 17892                           intcon	equ	0xFF2
 17893                           intcon2	equ	0xFF1
 17894                           intcon3	equ	0xFF0
 17895                           indf0	equ	0xFEF
 17896                           postinc0	equ	0xFEE
 17897                           fsr0h	equ	0xFEA
 17898                           fsr0l	equ	0xFE9
 17899                           wreg	equ	0xFE8
 17900                           postdec1	equ	0xFE5
 17901                           fsr1h	equ	0xFE2
 17902                           fsr1l	equ	0xFE1
 17903                           indf2	equ	0xFDF
 17904                           postinc2	equ	0xFDE
 17905                           postdec2	equ	0xFDD
 17906                           fsr2h	equ	0xFDA
 17907                           fsr2l	equ	0xFD9
 17908                           status	equ	0xFD8
 17909                           
 17910 ;; *************** function i2_putch *****************
 17911 ;; Defined at:
 17912 ;;		line 20 in file "lcd.c"
 17913 ;; Parameters:    Size  Location     Type
 17914 ;;  data            1    wreg     unsigned char 
 17915 ;; Auto vars:     Size  Location     Type
 17916 ;;  data            1    2[COMRAM] unsigned char 
 17917 ;; Return value:  Size  Location     Type
 17918 ;;                  1    wreg      void 
 17919 ;; Registers used:
 17920 ;;		wreg, status,2, status,0, cstack
 17921 ;; Tracked objects:
 17922 ;;		On entry : 0/0
 17923 ;;		On exit  : 0/0
 17924 ;;		Unchanged: 0/0
 17925 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17926 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17927 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17928 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17929 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17930 ;;Total ram usage:        1 bytes
 17931 ;; Hardware stack levels used:    1
 17932 ;; Hardware stack levels required when called:    1
 17933 ;; This function calls:
 17934 ;;		i2_lcdNibble
 17935 ;; This function is called by:
 17936 ;;		i2_printf
 17937 ;; This function uses a non-reentrant model
 17938 ;;
 17939                           
 17940                           	psect	text72
 17941  003F34                     __ptext72:
 17942                           	opt stack 0
 17943  003F34                     i2_putch:
 17944                           	opt stack 19
 17945                           
 17946                           ;incstack = 0
 17947                           ;i2putch@data stored from wreg
 17948  003F34  6E03               	movwf	i2putch@data,c
 17949                           
 17950                           ;lcd.c: 21: LATDbits.LATD2 = 1;
 17951  003F36  848C               	bsf	3980,2,c	;volatile
 17952                           
 17953                           ;lcd.c: 22: lcdNibble(data);
 17954  003F38  5003               	movf	i2putch@data,w,c
 17955  003F3A  ECBD  F01B         	call	i2_lcdNibble
 17956  003F3E  0012               	return		;funcret
 17957  003F40                     __end_ofi2_putch:
 17958                           	opt stack 0
 17959                           pclatu	equ	0xFFB
 17960                           pclath	equ	0xFFA
 17961                           tblptru	equ	0xFF8
 17962                           tblptrh	equ	0xFF7
 17963                           tblptrl	equ	0xFF6
 17964                           tablat	equ	0xFF5
 17965                           prodh	equ	0xFF4
 17966                           prodl	equ	0xFF3
 17967                           intcon	equ	0xFF2
 17968                           intcon2	equ	0xFF1
 17969                           intcon3	equ	0xFF0
 17970                           indf0	equ	0xFEF
 17971                           postinc0	equ	0xFEE
 17972                           fsr0h	equ	0xFEA
 17973                           fsr0l	equ	0xFE9
 17974                           wreg	equ	0xFE8
 17975                           postdec1	equ	0xFE5
 17976                           fsr1h	equ	0xFE2
 17977                           fsr1l	equ	0xFE1
 17978                           indf2	equ	0xFDF
 17979                           postinc2	equ	0xFDE
 17980                           postdec2	equ	0xFDD
 17981                           fsr2h	equ	0xFDA
 17982                           fsr2l	equ	0xFD9
 17983                           status	equ	0xFD8
 17984                           
 17985 ;; *************** function i2_isdigit *****************
 17986 ;; Defined at:
 17987 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 17988 ;; Parameters:    Size  Location     Type
 17989 ;;  c               1    wreg     unsigned char 
 17990 ;; Auto vars:     Size  Location     Type
 17991 ;;  c               1    2[COMRAM] unsigned char 
 17992 ;; Return value:  Size  Location     Type
 17993 ;;		None               void
 17994 ;; Registers used:
 17995 ;;		wreg, status,2, status,0
 17996 ;; Tracked objects:
 17997 ;;		On entry : 0/0
 17998 ;;		On exit  : 0/0
 17999 ;;		Unchanged: 0/0
 18000 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18001 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18002 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18003 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18004 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18005 ;;Total ram usage:        3 bytes
 18006 ;; Hardware stack levels used:    1
 18007 ;; This function calls:
 18008 ;;		Nothing
 18009 ;; This function is called by:
 18010 ;;		i2_printf
 18011 ;; This function uses a non-reentrant model
 18012 ;;
 18013                           
 18014                           	psect	text73
 18015  003E7A                     __ptext73:
 18016                           	opt stack 0
 18017  003E7A                     i2_isdigit:
 18018                           	opt stack 20
 18019                           
 18020                           ;incstack = 0
 18021                           ;i2isdigit@c stored from wreg
 18022  003E7A  6E03               	movwf	i2isdigit@c,c
 18023  003E7C  0E00               	movlw	0
 18024  003E7E  6E02               	movwf	i2_isdigit$1792,c
 18025  003E80  0E3A               	movlw	58
 18026  003E82  6003               	cpfslt	i2isdigit@c,c
 18027  003E84  D005               	goto	i2l4893
 18028  003E86  0E2F               	movlw	47
 18029  003E88  6403               	cpfsgt	i2isdigit@c,c
 18030  003E8A  D002               	goto	i2l4893
 18031  003E8C  0E01               	movlw	1
 18032  003E8E  6E02               	movwf	i2_isdigit$1792,c
 18033  003E90                     i2l4893:
 18034  003E90  C002  F001         	movff	i2_isdigit$1792,??i2_isdigit
 18035  003E94  3001               	rrcf	??i2_isdigit,w,c
 18036  003E96  0012               	return	
 18037  003E98                     __end_ofi2_isdigit:
 18038                           	opt stack 0
 18039                           pclatu	equ	0xFFB
 18040                           pclath	equ	0xFFA
 18041                           tblptru	equ	0xFF8
 18042                           tblptrh	equ	0xFF7
 18043                           tblptrl	equ	0xFF6
 18044                           tablat	equ	0xFF5
 18045                           prodh	equ	0xFF4
 18046                           prodl	equ	0xFF3
 18047                           intcon	equ	0xFF2
 18048                           intcon2	equ	0xFF1
 18049                           intcon3	equ	0xFF0
 18050                           indf0	equ	0xFEF
 18051                           postinc0	equ	0xFEE
 18052                           fsr0h	equ	0xFEA
 18053                           fsr0l	equ	0xFE9
 18054                           wreg	equ	0xFE8
 18055                           postdec1	equ	0xFE5
 18056                           fsr1h	equ	0xFE2
 18057                           fsr1l	equ	0xFE1
 18058                           indf2	equ	0xFDF
 18059                           postinc2	equ	0xFDE
 18060                           postdec2	equ	0xFDD
 18061                           fsr2h	equ	0xFDA
 18062                           fsr2l	equ	0xFD9
 18063                           status	equ	0xFD8
 18064                           
 18065 ;; *************** function i2___wmul *****************
 18066 ;; Defined at:
 18067 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 18068 ;; Parameters:    Size  Location     Type
 18069 ;;  multiplier      2    0[COMRAM] unsigned int 
 18070 ;;  multiplicand    2    2[COMRAM] unsigned int 
 18071 ;; Auto vars:     Size  Location     Type
 18072 ;;  __wmul          2    4[COMRAM] unsigned int 
 18073 ;; Return value:  Size  Location     Type
 18074 ;;                  2    0[COMRAM] unsigned int 
 18075 ;; Registers used:
 18076 ;;		wreg, status,2, status,0, prodl, prodh
 18077 ;; Tracked objects:
 18078 ;;		On entry : 0/0
 18079 ;;		On exit  : 0/0
 18080 ;;		Unchanged: 0/0
 18081 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18082 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18083 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18084 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18085 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18086 ;;Total ram usage:        6 bytes
 18087 ;; Hardware stack levels used:    1
 18088 ;; This function calls:
 18089 ;;		Nothing
 18090 ;; This function is called by:
 18091 ;;		_printSortTimer
 18092 ;;		_retrieveLog
 18093 ;;		i2_printf
 18094 ;; This function uses a non-reentrant model
 18095 ;;
 18096                           
 18097                           	psect	text74
 18098  003DA2                     __ptext74:
 18099                           	opt stack 0
 18100  003DA2                     i2___wmul:
 18101                           	opt stack 20
 18102                           
 18103                           ;incstack = 0
 18104  003DA2  5001               	movf	i2___wmul@multiplier,w,c
 18105  003DA4  0203               	mulwf	i2___wmul@multiplicand,c
 18106  003DA6  CFF3 F005          	movff	prodl,i2___wmul@product
 18107  003DAA  CFF4 F006          	movff	prodh,i2___wmul@product+1
 18108  003DAE  5001               	movf	i2___wmul@multiplier,w,c
 18109  003DB0  0204               	mulwf	i2___wmul@multiplicand+1,c
 18110  003DB2  50F3               	movf	prodl,w,c
 18111  003DB4  2606               	addwf	i2___wmul@product+1,f,c
 18112  003DB6  5002               	movf	i2___wmul@multiplier+1,w,c
 18113  003DB8  0203               	mulwf	i2___wmul@multiplicand,c
 18114  003DBA  50F3               	movf	prodl,w,c
 18115  003DBC  2606               	addwf	i2___wmul@product+1,f,c
 18116  003DBE  C005  F001         	movff	i2___wmul@product,?i2___wmul
 18117  003DC2  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
 18118  003DC6  0012               	return	
 18119  003DC8                     __end_ofi2___wmul:
 18120                           	opt stack 0
 18121                           pclatu	equ	0xFFB
 18122                           pclath	equ	0xFFA
 18123                           tblptru	equ	0xFF8
 18124                           tblptrh	equ	0xFF7
 18125                           tblptrl	equ	0xFF6
 18126                           tablat	equ	0xFF5
 18127                           prodh	equ	0xFF4
 18128                           prodl	equ	0xFF3
 18129                           intcon	equ	0xFF2
 18130                           intcon2	equ	0xFF1
 18131                           intcon3	equ	0xFF0
 18132                           indf0	equ	0xFEF
 18133                           postinc0	equ	0xFEE
 18134                           fsr0h	equ	0xFEA
 18135                           fsr0l	equ	0xFE9
 18136                           wreg	equ	0xFE8
 18137                           postdec1	equ	0xFE5
 18138                           fsr1h	equ	0xFE2
 18139                           fsr1l	equ	0xFE1
 18140                           indf2	equ	0xFDF
 18141                           postinc2	equ	0xFDE
 18142                           postdec2	equ	0xFDD
 18143                           fsr2h	equ	0xFDA
 18144                           fsr2l	equ	0xFD9
 18145                           status	equ	0xFD8
 18146                           
 18147 ;; *************** function i2___lwmod *****************
 18148 ;; Defined at:
 18149 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 18150 ;; Parameters:    Size  Location     Type
 18151 ;;  dividend        2    0[COMRAM] unsigned int 
 18152 ;;  divisor         2    2[COMRAM] unsigned int 
 18153 ;; Auto vars:     Size  Location     Type
 18154 ;;  __lwmod         1    4[COMRAM] unsigned char 
 18155 ;; Return value:  Size  Location     Type
 18156 ;;                  2    0[COMRAM] unsigned int 
 18157 ;; Registers used:
 18158 ;;		wreg, status,2, status,0
 18159 ;; Tracked objects:
 18160 ;;		On entry : 0/0
 18161 ;;		On exit  : 0/0
 18162 ;;		Unchanged: 0/0
 18163 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18164 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18165 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18166 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18167 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18168 ;;Total ram usage:        5 bytes
 18169 ;; Hardware stack levels used:    1
 18170 ;; This function calls:
 18171 ;;		Nothing
 18172 ;; This function is called by:
 18173 ;;		_printSortTimer
 18174 ;;		i2_printf
 18175 ;; This function uses a non-reentrant model
 18176 ;;
 18177                           
 18178                           	psect	text75
 18179  00399C                     __ptext75:
 18180                           	opt stack 0
 18181  00399C                     i2___lwmod:
 18182                           	opt stack 20
 18183                           
 18184                           ;incstack = 0
 18185  00399C  5003               	movf	i2___lwmod@divisor,w,c
 18186  00399E  1004               	iorwf	i2___lwmod@divisor+1,w,c
 18187  0039A0  B4D8               	btfsc	status,2,c
 18188  0039A2  D018               	goto	i2l1582
 18189  0039A4  0E01               	movlw	1
 18190  0039A6  6E05               	movwf	i2___lwmod@counter,c
 18191  0039A8  D004               	goto	i2l4925
 18192  0039AA                     i2l4923:
 18193  0039AA  90D8               	bcf	status,0,c
 18194  0039AC  3603               	rlcf	i2___lwmod@divisor,f,c
 18195  0039AE  3604               	rlcf	i2___lwmod@divisor+1,f,c
 18196  0039B0  2A05               	incf	i2___lwmod@counter,f,c
 18197  0039B2                     i2l4925:
 18198  0039B2  AE04               	btfss	i2___lwmod@divisor+1,7,c
 18199  0039B4  D7FA               	goto	i2l4923
 18200  0039B6                     i2l4927:
 18201  0039B6  5003               	movf	i2___lwmod@divisor,w,c
 18202  0039B8  5C01               	subwf	i2___lwmod@dividend,w,c
 18203  0039BA  5004               	movf	i2___lwmod@divisor+1,w,c
 18204  0039BC  5802               	subwfb	i2___lwmod@dividend+1,w,c
 18205  0039BE  A0D8               	btfss	status,0,c
 18206  0039C0  D004               	goto	i2l4931
 18207  0039C2  5003               	movf	i2___lwmod@divisor,w,c
 18208  0039C4  5E01               	subwf	i2___lwmod@dividend,f,c
 18209  0039C6  5004               	movf	i2___lwmod@divisor+1,w,c
 18210  0039C8  5A02               	subwfb	i2___lwmod@dividend+1,f,c
 18211  0039CA                     i2l4931:
 18212  0039CA  90D8               	bcf	status,0,c
 18213  0039CC  3204               	rrcf	i2___lwmod@divisor+1,f,c
 18214  0039CE  3203               	rrcf	i2___lwmod@divisor,f,c
 18215  0039D0  2E05               	decfsz	i2___lwmod@counter,f,c
 18216  0039D2  D7F1               	goto	i2l4927
 18217  0039D4                     i2l1582:
 18218  0039D4  C001  F001         	movff	i2___lwmod@dividend,?i2___lwmod
 18219  0039D8  C002  F002         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
 18220  0039DC  0012               	return		;funcret
 18221  0039DE                     __end_ofi2___lwmod:
 18222                           	opt stack 0
 18223                           pclatu	equ	0xFFB
 18224                           pclath	equ	0xFFA
 18225                           tblptru	equ	0xFF8
 18226                           tblptrh	equ	0xFF7
 18227                           tblptrl	equ	0xFF6
 18228                           tablat	equ	0xFF5
 18229                           prodh	equ	0xFF4
 18230                           prodl	equ	0xFF3
 18231                           intcon	equ	0xFF2
 18232                           intcon2	equ	0xFF1
 18233                           intcon3	equ	0xFF0
 18234                           indf0	equ	0xFEF
 18235                           postinc0	equ	0xFEE
 18236                           fsr0h	equ	0xFEA
 18237                           fsr0l	equ	0xFE9
 18238                           wreg	equ	0xFE8
 18239                           postdec1	equ	0xFE5
 18240                           fsr1h	equ	0xFE2
 18241                           fsr1l	equ	0xFE1
 18242                           indf2	equ	0xFDF
 18243                           postinc2	equ	0xFDE
 18244                           postdec2	equ	0xFDD
 18245                           fsr2h	equ	0xFDA
 18246                           fsr2l	equ	0xFD9
 18247                           status	equ	0xFD8
 18248                           
 18249 ;; *************** function i2___lwdiv *****************
 18250 ;; Defined at:
 18251 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 18252 ;; Parameters:    Size  Location     Type
 18253 ;;  dividend        2    5[COMRAM] unsigned int 
 18254 ;;  divisor         2    7[COMRAM] unsigned int 
 18255 ;; Auto vars:     Size  Location     Type
 18256 ;;  __lwdiv         2    9[COMRAM] unsigned int 
 18257 ;;  __lwdiv         1   11[COMRAM] unsigned char 
 18258 ;; Return value:  Size  Location     Type
 18259 ;;                  2    5[COMRAM] unsigned int 
 18260 ;; Registers used:
 18261 ;;		wreg, status,2, status,0
 18262 ;; Tracked objects:
 18263 ;;		On entry : 0/0
 18264 ;;		On exit  : 0/0
 18265 ;;		Unchanged: 0/0
 18266 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18267 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18268 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18269 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18270 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18271 ;;Total ram usage:        7 bytes
 18272 ;; Hardware stack levels used:    1
 18273 ;; This function calls:
 18274 ;;		Nothing
 18275 ;; This function is called by:
 18276 ;;		_printSortTimer
 18277 ;;		i2_printf
 18278 ;; This function uses a non-reentrant model
 18279 ;;
 18280                           
 18281                           	psect	text76
 18282  0037D0                     __ptext76:
 18283                           	opt stack 0
 18284  0037D0                     i2___lwdiv:
 18285                           	opt stack 20
 18286                           
 18287                           ;incstack = 0
 18288  0037D0  0E00               	movlw	0
 18289  0037D2  6E0B               	movwf	i2___lwdiv@quotient+1,c
 18290  0037D4  0E00               	movlw	0
 18291  0037D6  6E0A               	movwf	i2___lwdiv@quotient,c
 18292  0037D8  5008               	movf	i2___lwdiv@divisor,w,c
 18293  0037DA  1009               	iorwf	i2___lwdiv@divisor+1,w,c
 18294  0037DC  B4D8               	btfsc	status,2,c
 18295  0037DE  D01C               	goto	i2l1572
 18296  0037E0  0E01               	movlw	1
 18297  0037E2  6E0C               	movwf	i2___lwdiv@counter,c
 18298  0037E4  D004               	goto	i2l4905
 18299  0037E6                     i2l4903:
 18300  0037E6  90D8               	bcf	status,0,c
 18301  0037E8  3608               	rlcf	i2___lwdiv@divisor,f,c
 18302  0037EA  3609               	rlcf	i2___lwdiv@divisor+1,f,c
 18303  0037EC  2A0C               	incf	i2___lwdiv@counter,f,c
 18304  0037EE                     i2l4905:
 18305  0037EE  AE09               	btfss	i2___lwdiv@divisor+1,7,c
 18306  0037F0  D7FA               	goto	i2l4903
 18307  0037F2                     i2l4907:
 18308  0037F2  90D8               	bcf	status,0,c
 18309  0037F4  360A               	rlcf	i2___lwdiv@quotient,f,c
 18310  0037F6  360B               	rlcf	i2___lwdiv@quotient+1,f,c
 18311  0037F8  5008               	movf	i2___lwdiv@divisor,w,c
 18312  0037FA  5C06               	subwf	i2___lwdiv@dividend,w,c
 18313  0037FC  5009               	movf	i2___lwdiv@divisor+1,w,c
 18314  0037FE  5807               	subwfb	i2___lwdiv@dividend+1,w,c
 18315  003800  A0D8               	btfss	status,0,c
 18316  003802  D005               	goto	i2l4915
 18317  003804  5008               	movf	i2___lwdiv@divisor,w,c
 18318  003806  5E06               	subwf	i2___lwdiv@dividend,f,c
 18319  003808  5009               	movf	i2___lwdiv@divisor+1,w,c
 18320  00380A  5A07               	subwfb	i2___lwdiv@dividend+1,f,c
 18321  00380C  800A               	bsf	i2___lwdiv@quotient,0,c
 18322  00380E                     i2l4915:
 18323  00380E  90D8               	bcf	status,0,c
 18324  003810  3209               	rrcf	i2___lwdiv@divisor+1,f,c
 18325  003812  3208               	rrcf	i2___lwdiv@divisor,f,c
 18326  003814  2E0C               	decfsz	i2___lwdiv@counter,f,c
 18327  003816  D7ED               	goto	i2l4907
 18328  003818                     i2l1572:
 18329  003818  C00A  F006         	movff	i2___lwdiv@quotient,?i2___lwdiv
 18330  00381C  C00B  F007         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
 18331  003820  0012               	return		;funcret
 18332  003822                     __end_ofi2___lwdiv:
 18333                           	opt stack 0
 18334                           pclatu	equ	0xFFB
 18335                           pclath	equ	0xFFA
 18336                           tblptru	equ	0xFF8
 18337                           tblptrh	equ	0xFF7
 18338                           tblptrl	equ	0xFF6
 18339                           tablat	equ	0xFF5
 18340                           prodh	equ	0xFF4
 18341                           prodl	equ	0xFF3
 18342                           intcon	equ	0xFF2
 18343                           intcon2	equ	0xFF1
 18344                           intcon3	equ	0xFF0
 18345                           indf0	equ	0xFEF
 18346                           postinc0	equ	0xFEE
 18347                           fsr0h	equ	0xFEA
 18348                           fsr0l	equ	0xFE9
 18349                           wreg	equ	0xFE8
 18350                           postdec1	equ	0xFE5
 18351                           fsr1h	equ	0xFE2
 18352                           fsr1l	equ	0xFE1
 18353                           indf2	equ	0xFDF
 18354                           postinc2	equ	0xFDE
 18355                           postdec2	equ	0xFDD
 18356                           fsr2h	equ	0xFDA
 18357                           fsr2l	equ	0xFD9
 18358                           status	equ	0xFD8
 18359                           
 18360 ;; *************** function i2_lcdInst *****************
 18361 ;; Defined at:
 18362 ;;		line 15 in file "lcd.c"
 18363 ;; Parameters:    Size  Location     Type
 18364 ;;  data            1    wreg     unsigned char 
 18365 ;; Auto vars:     Size  Location     Type
 18366 ;;  data            1    2[COMRAM] unsigned char 
 18367 ;; Return value:  Size  Location     Type
 18368 ;;                  1    wreg      void 
 18369 ;; Registers used:
 18370 ;;		wreg, status,2, status,0, cstack
 18371 ;; Tracked objects:
 18372 ;;		On entry : 0/0
 18373 ;;		On exit  : 0/0
 18374 ;;		Unchanged: 0/0
 18375 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18376 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18377 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18378 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18379 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18380 ;;Total ram usage:        1 bytes
 18381 ;; Hardware stack levels used:    1
 18382 ;; Hardware stack levels required when called:    1
 18383 ;; This function calls:
 18384 ;;		i2_lcdNibble
 18385 ;; This function is called by:
 18386 ;;		_change_state_to_menu_11
 18387 ;;		_change_state_to_menu_23
 18388 ;;		_change_state_to_logs_11
 18389 ;;		_change_state_to_logs_12
 18390 ;;		_change_state_to_logs_22
 18391 ;;		_change_state_to_logs_23
 18392 ;;		_change_state_to_logs_33
 18393 ;;		_change_state_to_logs_34
 18394 ;;		_printSortTimer
 18395 ;;		i2_change_state_to_menu_start
 18396 ;;		i2_change_state_to_menu_12
 18397 ;;		i2_change_state_to_menu_22
 18398 ;;		i2_printRTC
 18399 ;; This function uses a non-reentrant model
 18400 ;;
 18401                           
 18402                           	psect	text77
 18403  003F40                     __ptext77:
 18404                           	opt stack 0
 18405  003F40                     i2_lcdInst:
 18406                           	opt stack 19
 18407                           
 18408                           ;incstack = 0
 18409                           ;i2lcdInst@data stored from wreg
 18410  003F40  6E03               	movwf	i2lcdInst@data,c
 18411                           
 18412                           ;lcd.c: 16: LATDbits.LATD2 = 0;
 18413  003F42  948C               	bcf	3980,2,c	;volatile
 18414                           
 18415                           ;lcd.c: 17: lcdNibble(data);
 18416  003F44  5003               	movf	i2lcdInst@data,w,c
 18417  003F46  ECBD  F01B         	call	i2_lcdNibble
 18418  003F4A  0012               	return		;funcret
 18419  003F4C                     __end_ofi2_lcdInst:
 18420                           	opt stack 0
 18421                           pclatu	equ	0xFFB
 18422                           pclath	equ	0xFFA
 18423                           tblptru	equ	0xFF8
 18424                           tblptrh	equ	0xFF7
 18425                           tblptrl	equ	0xFF6
 18426                           tablat	equ	0xFF5
 18427                           prodh	equ	0xFF4
 18428                           prodl	equ	0xFF3
 18429                           intcon	equ	0xFF2
 18430                           intcon2	equ	0xFF1
 18431                           intcon3	equ	0xFF0
 18432                           indf0	equ	0xFEF
 18433                           postinc0	equ	0xFEE
 18434                           fsr0h	equ	0xFEA
 18435                           fsr0l	equ	0xFE9
 18436                           wreg	equ	0xFE8
 18437                           postdec1	equ	0xFE5
 18438                           fsr1h	equ	0xFE2
 18439                           fsr1l	equ	0xFE1
 18440                           indf2	equ	0xFDF
 18441                           postinc2	equ	0xFDE
 18442                           postdec2	equ	0xFDD
 18443                           fsr2h	equ	0xFDA
 18444                           fsr2l	equ	0xFD9
 18445                           status	equ	0xFD8
 18446                           
 18447 ;; *************** function i2_lcdNibble *****************
 18448 ;; Defined at:
 18449 ;;		line 25 in file "lcd.c"
 18450 ;; Parameters:    Size  Location     Type
 18451 ;;  data            1    wreg     unsigned char 
 18452 ;; Auto vars:     Size  Location     Type
 18453 ;;  data            1    1[COMRAM] unsigned char 
 18454 ;;  lcdNibble       1    0[COMRAM] unsigned char 
 18455 ;; Return value:  Size  Location     Type
 18456 ;;                  1    wreg      void 
 18457 ;; Registers used:
 18458 ;;		wreg, status,2, status,0
 18459 ;; Tracked objects:
 18460 ;;		On entry : 0/0
 18461 ;;		On exit  : 0/0
 18462 ;;		Unchanged: 0/0
 18463 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18464 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18465 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18466 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18467 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18468 ;;Total ram usage:        2 bytes
 18469 ;; Hardware stack levels used:    1
 18470 ;; This function calls:
 18471 ;;		Nothing
 18472 ;; This function is called by:
 18473 ;;		i2_lcdInst
 18474 ;;		i2_putch
 18475 ;; This function uses a non-reentrant model
 18476 ;;
 18477                           
 18478                           	psect	text78
 18479  00377A                     __ptext78:
 18480                           	opt stack 0
 18481  00377A                     i2_lcdNibble:
 18482                           	opt stack 19
 18483                           
 18484                           ;incstack = 0
 18485                           ;i2lcdNibble@data stored from wreg
 18486  00377A  6E02               	movwf	i2lcdNibble@data,c
 18487                           
 18488                           ;lcd.c: 27: char temp = data & 0xF0;
 18489  00377C  5002               	movf	i2lcdNibble@data,w,c
 18490  00377E  0BF0               	andlw	240
 18491  003780  6E01               	movwf	i2lcdNibble@temp,c
 18492                           
 18493                           ;lcd.c: 28: LATD = LATD & 0x0F;
 18494  003782  508C               	movf	3980,w,c	;volatile
 18495  003784  0B0F               	andlw	15
 18496  003786  6E8C               	movwf	3980,c	;volatile
 18497                           
 18498                           ;lcd.c: 29: LATD = temp | LATD;
 18499  003788  5001               	movf	i2lcdNibble@temp,w,c
 18500  00378A  108C               	iorwf	3980,w,c	;volatile
 18501  00378C  6E8C               	movwf	3980,c	;volatile
 18502                           
 18503                           ;lcd.c: 31: LATDbits.LATD3 = 1;
 18504  00378E  868C               	bsf	3980,3,c	;volatile
 18505                           
 18506                           ;lcd.c: 32: _delay((unsigned long)((25)*(32000000/4000000.0)));
 18507  003790  0E42               	movlw	66
 18508  003792                     i2u730_47:
 18509  003792  2EE8               	decfsz	wreg,f,c
 18510  003794  D7FE               	bra	i2u730_47
 18511  003796  D000               	nop2	
 18512                           
 18513                           ;lcd.c: 33: LATDbits.LATD3 = 0;
 18514  003798  968C               	bcf	3980,3,c	;volatile
 18515                           
 18516                           ;lcd.c: 34: _delay((unsigned long)((25)*(32000000/4000000.0)));
 18517  00379A  0E42               	movlw	66
 18518  00379C                     i2u731_47:
 18519  00379C  2EE8               	decfsz	wreg,f,c
 18520  00379E  D7FE               	bra	i2u731_47
 18521  0037A0  D000               	nop2	
 18522                           
 18523                           ;lcd.c: 36: data = data << 4;
 18524  0037A2  3802               	swapf	i2lcdNibble@data,w,c
 18525  0037A4  0BF0               	andlw	240
 18526  0037A6  6E02               	movwf	i2lcdNibble@data,c
 18527                           
 18528                           ;lcd.c: 38: temp = data & 0xF0;
 18529  0037A8  5002               	movf	i2lcdNibble@data,w,c
 18530  0037AA  0BF0               	andlw	240
 18531  0037AC  6E01               	movwf	i2lcdNibble@temp,c
 18532                           
 18533                           ;lcd.c: 39: LATD = LATD & 0x0F;
 18534  0037AE  508C               	movf	3980,w,c	;volatile
 18535  0037B0  0B0F               	andlw	15
 18536  0037B2  6E8C               	movwf	3980,c	;volatile
 18537                           
 18538                           ;lcd.c: 40: LATD = temp | LATD;
 18539  0037B4  5001               	movf	i2lcdNibble@temp,w,c
 18540  0037B6  108C               	iorwf	3980,w,c	;volatile
 18541  0037B8  6E8C               	movwf	3980,c	;volatile
 18542                           
 18543                           ;lcd.c: 42: LATDbits.LATD3 = 1;
 18544  0037BA  868C               	bsf	3980,3,c	;volatile
 18545                           
 18546                           ;lcd.c: 43: _delay((unsigned long)((25)*(32000000/4000000.0)));
 18547  0037BC  0E42               	movlw	66
 18548  0037BE                     i2u732_47:
 18549  0037BE  2EE8               	decfsz	wreg,f,c
 18550  0037C0  D7FE               	bra	i2u732_47
 18551  0037C2  D000               	nop2	
 18552                           
 18553                           ;lcd.c: 44: LATDbits.LATD3 = 0;
 18554  0037C4  968C               	bcf	3980,3,c	;volatile
 18555                           
 18556                           ;lcd.c: 45: _delay((unsigned long)((25)*(32000000/4000000.0)));
 18557  0037C6  0E42               	movlw	66
 18558  0037C8                     i2u733_47:
 18559  0037C8  2EE8               	decfsz	wreg,f,c
 18560  0037CA  D7FE               	bra	i2u733_47
 18561  0037CC  D000               	nop2	
 18562  0037CE  0012               	return		;funcret
 18563  0037D0                     __end_ofi2_lcdNibble:
 18564                           	opt stack 0
 18565                           pclatu	equ	0xFFB
 18566                           pclath	equ	0xFFA
 18567                           tblptru	equ	0xFF8
 18568                           tblptrh	equ	0xFF7
 18569                           tblptrl	equ	0xFF6
 18570                           tablat	equ	0xFF5
 18571                           prodh	equ	0xFF4
 18572                           prodl	equ	0xFF3
 18573                           intcon	equ	0xFF2
 18574                           intcon2	equ	0xFF1
 18575                           intcon3	equ	0xFF0
 18576                           indf0	equ	0xFEF
 18577                           postinc0	equ	0xFEE
 18578                           fsr0h	equ	0xFEA
 18579                           fsr0l	equ	0xFE9
 18580                           wreg	equ	0xFE8
 18581                           postdec1	equ	0xFE5
 18582                           fsr1h	equ	0xFE2
 18583                           fsr1l	equ	0xFE1
 18584                           indf2	equ	0xFDF
 18585                           postinc2	equ	0xFDE
 18586                           postdec2	equ	0xFDD
 18587                           fsr2h	equ	0xFDA
 18588                           fsr2l	equ	0xFD9
 18589                           status	equ	0xFD8
 18590                           
 18591 ;; *************** function i2_getRTC *****************
 18592 ;; Defined at:
 18593 ;;		line 44 in file "RTC.c"
 18594 ;; Parameters:    Size  Location     Type
 18595 ;;		None
 18596 ;; Auto vars:     Size  Location     Type
 18597 ;;  getRTC          2    3[COMRAM] int 
 18598 ;; Return value:  Size  Location     Type
 18599 ;;                  1    wreg      void 
 18600 ;; Registers used:
 18601 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 18602 ;; Tracked objects:
 18603 ;;		On entry : 0/0
 18604 ;;		On exit  : 0/0
 18605 ;;		Unchanged: 0/0
 18606 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18607 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18608 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18609 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18610 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18611 ;;Total ram usage:        2 bytes
 18612 ;; Hardware stack levels used:    1
 18613 ;; Hardware stack levels required when called:    2
 18614 ;; This function calls:
 18615 ;;		i2_I2C_Master_Read
 18616 ;;		i2_I2C_Master_Start
 18617 ;;		i2_I2C_Master_Stop
 18618 ;;		i2_I2C_Master_Write
 18619 ;; This function is called by:
 18620 ;;		_printSortTimer
 18621 ;;		i2_printRTC
 18622 ;; This function uses a non-reentrant model
 18623 ;;
 18624                           
 18625                           	psect	text79
 18626  0034C2                     __ptext79:
 18627                           	opt stack 0
 18628  0034C2                     i2_getRTC:
 18629                           	opt stack 18
 18630                           
 18631                           ;RTC.c: 48: I2C_Master_Start();
 18632                           
 18633                           ;incstack = 0
 18634  0034C2  ECC0  F01F         	call	i2_I2C_Master_Start	;wreg free
 18635                           
 18636                           ;RTC.c: 49: I2C_Master_Write(0b11010000);
 18637  0034C6  0E00               	movlw	0
 18638  0034C8  6E03               	movwf	i2I2C_Master_Write@d+1,c
 18639  0034CA  0ED0               	movlw	208
 18640  0034CC  6E02               	movwf	i2I2C_Master_Write@d,c
 18641  0034CE  ECAB  F01F         	call	i2_I2C_Master_Write	;wreg free
 18642                           
 18643                           ;RTC.c: 50: I2C_Master_Write(0x00);
 18644  0034D2  0E00               	movlw	0
 18645  0034D4  6E03               	movwf	i2I2C_Master_Write@d+1,c
 18646  0034D6  0E00               	movlw	0
 18647  0034D8  6E02               	movwf	i2I2C_Master_Write@d,c
 18648  0034DA  ECAB  F01F         	call	i2_I2C_Master_Write	;wreg free
 18649                           
 18650                           ;RTC.c: 51: I2C_Master_Stop();
 18651  0034DE  ECBC  F01F         	call	i2_I2C_Master_Stop	;wreg free
 18652                           
 18653                           ;RTC.c: 54: I2C_Master_Start();
 18654  0034E2  ECC0  F01F         	call	i2_I2C_Master_Start	;wreg free
 18655                           
 18656                           ;RTC.c: 55: I2C_Master_Write(0b11010001);
 18657  0034E6  0E00               	movlw	0
 18658  0034E8  6E03               	movwf	i2I2C_Master_Write@d+1,c
 18659  0034EA  0ED1               	movlw	209
 18660  0034EC  6E02               	movwf	i2I2C_Master_Write@d,c
 18661  0034EE  ECAB  F01F         	call	i2_I2C_Master_Write	;wreg free
 18662                           
 18663                           ;RTC.c: 56: for(int i = 0; i < 6; i++){
 18664  0034F2  0E00               	movlw	0
 18665  0034F4  6E05               	movwf	i2getRTC@i+1,c
 18666  0034F6  0E00               	movlw	0
 18667  0034F8  6E04               	movwf	i2getRTC@i,c
 18668  0034FA                     i2l5155:
 18669  0034FA  BE05               	btfsc	i2getRTC@i+1,7,c
 18670  0034FC  D006               	goto	i2l5159
 18671  0034FE  5005               	movf	i2getRTC@i+1,w,c
 18672  003500  E111               	bnz	i2l5165
 18673  003502  0E06               	movlw	6
 18674  003504  5C04               	subwf	i2getRTC@i,w,c
 18675  003506  B0D8               	btfsc	status,0,c
 18676  003508  D00D               	goto	i2l5165
 18677  00350A                     i2l5159:
 18678                           
 18679                           ;RTC.c: 57: time[i] = I2C_Master_Read(1);
 18680  00350A  0E24               	movlw	low _time
 18681  00350C  2404               	addwf	i2getRTC@i,w,c
 18682  00350E  6ED9               	movwf	fsr2l,c
 18683  003510  0E01               	movlw	high _time
 18684  003512  2005               	addwfc	i2getRTC@i+1,w,c
 18685  003514  6EDA               	movwf	fsr2h,c
 18686  003516  0E01               	movlw	1
 18687  003518  ECE4  F01E         	call	i2_I2C_Master_Read
 18688  00351C  6EDF               	movwf	indf2,c
 18689  00351E  4A04               	infsnz	i2getRTC@i,f,c
 18690  003520  2A05               	incf	i2getRTC@i+1,f,c
 18691  003522  D7EB               	goto	i2l5155
 18692  003524                     i2l5165:
 18693                           
 18694                           ;RTC.c: 58: }
 18695                           ;RTC.c: 59: time[6] = I2C_Master_Read(0);
 18696  003524  0E00               	movlw	0
 18697  003526  ECE4  F01E         	call	i2_I2C_Master_Read
 18698  00352A  0101               	movlb	1	; () banked
 18699  00352C  6F2A               	movwf	(_time+6)& (0+255),b
 18700                           
 18701                           ;RTC.c: 60: I2C_Master_Stop();
 18702  00352E  ECBC  F01F         	call	i2_I2C_Master_Stop	;wreg free
 18703  003532  0012               	return		;funcret
 18704  003534                     __end_ofi2_getRTC:
 18705                           	opt stack 0
 18706                           pclatu	equ	0xFFB
 18707                           pclath	equ	0xFFA
 18708                           tblptru	equ	0xFF8
 18709                           tblptrh	equ	0xFF7
 18710                           tblptrl	equ	0xFF6
 18711                           tablat	equ	0xFF5
 18712                           prodh	equ	0xFF4
 18713                           prodl	equ	0xFF3
 18714                           intcon	equ	0xFF2
 18715                           intcon2	equ	0xFF1
 18716                           intcon3	equ	0xFF0
 18717                           indf0	equ	0xFEF
 18718                           postinc0	equ	0xFEE
 18719                           fsr0h	equ	0xFEA
 18720                           fsr0l	equ	0xFE9
 18721                           wreg	equ	0xFE8
 18722                           postdec1	equ	0xFE5
 18723                           fsr1h	equ	0xFE2
 18724                           fsr1l	equ	0xFE1
 18725                           indf2	equ	0xFDF
 18726                           postinc2	equ	0xFDE
 18727                           postdec2	equ	0xFDD
 18728                           fsr2h	equ	0xFDA
 18729                           fsr2l	equ	0xFD9
 18730                           status	equ	0xFD8
 18731                           
 18732 ;; *************** function i2_I2C_Master_Write *****************
 18733 ;; Defined at:
 18734 ;;		line 49 in file "I2C.c"
 18735 ;; Parameters:    Size  Location     Type
 18736 ;;  d               2    1[COMRAM] unsigned int 
 18737 ;; Auto vars:     Size  Location     Type
 18738 ;;		None
 18739 ;; Return value:  Size  Location     Type
 18740 ;;                  1    wreg      void 
 18741 ;; Registers used:
 18742 ;;		wreg, status,2, status,0, cstack
 18743 ;; Tracked objects:
 18744 ;;		On entry : 0/0
 18745 ;;		On exit  : 0/0
 18746 ;;		Unchanged: 0/0
 18747 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18748 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18749 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18750 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18751 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18752 ;;Total ram usage:        2 bytes
 18753 ;; Hardware stack levels used:    1
 18754 ;; Hardware stack levels required when called:    1
 18755 ;; This function calls:
 18756 ;;		i2_I2C_Master_Wait
 18757 ;; This function is called by:
 18758 ;;		i2_getRTC
 18759 ;; This function uses a non-reentrant model
 18760 ;;
 18761                           
 18762                           	psect	text80
 18763  003F56                     __ptext80:
 18764                           	opt stack 0
 18765  003F56                     i2_I2C_Master_Write:
 18766                           	opt stack 18
 18767                           
 18768                           ;I2C.c: 51: I2C_Master_Wait();
 18769                           
 18770                           ;incstack = 0
 18771  003F56  EC81  F01F         	call	i2_I2C_Master_Wait	;wreg free
 18772                           
 18773                           ;I2C.c: 52: SSPBUF = d;
 18774  003F5A  C002  FFC9         	movff	i2I2C_Master_Write@d,4041	;volatile
 18775  003F5E  0012               	return		;funcret
 18776  003F60                     __end_ofi2_I2C_Master_Write:
 18777                           	opt stack 0
 18778                           pclatu	equ	0xFFB
 18779                           pclath	equ	0xFFA
 18780                           tblptru	equ	0xFF8
 18781                           tblptrh	equ	0xFF7
 18782                           tblptrl	equ	0xFF6
 18783                           tablat	equ	0xFF5
 18784                           prodh	equ	0xFF4
 18785                           prodl	equ	0xFF3
 18786                           intcon	equ	0xFF2
 18787                           intcon2	equ	0xFF1
 18788                           intcon3	equ	0xFF0
 18789                           indf0	equ	0xFEF
 18790                           postinc0	equ	0xFEE
 18791                           fsr0h	equ	0xFEA
 18792                           fsr0l	equ	0xFE9
 18793                           wreg	equ	0xFE8
 18794                           postdec1	equ	0xFE5
 18795                           fsr1h	equ	0xFE2
 18796                           fsr1l	equ	0xFE1
 18797                           indf2	equ	0xFDF
 18798                           postinc2	equ	0xFDE
 18799                           postdec2	equ	0xFDD
 18800                           fsr2h	equ	0xFDA
 18801                           fsr2l	equ	0xFD9
 18802                           status	equ	0xFD8
 18803                           
 18804 ;; *************** function i2_I2C_Master_Stop *****************
 18805 ;; Defined at:
 18806 ;;		line 43 in file "I2C.c"
 18807 ;; Parameters:    Size  Location     Type
 18808 ;;		None
 18809 ;; Auto vars:     Size  Location     Type
 18810 ;;		None
 18811 ;; Return value:  Size  Location     Type
 18812 ;;                  1    wreg      void 
 18813 ;; Registers used:
 18814 ;;		wreg, status,2, status,0, cstack
 18815 ;; Tracked objects:
 18816 ;;		On entry : 0/0
 18817 ;;		On exit  : 0/0
 18818 ;;		Unchanged: 0/0
 18819 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18820 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18821 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18822 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18823 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18824 ;;Total ram usage:        0 bytes
 18825 ;; Hardware stack levels used:    1
 18826 ;; Hardware stack levels required when called:    1
 18827 ;; This function calls:
 18828 ;;		i2_I2C_Master_Wait
 18829 ;; This function is called by:
 18830 ;;		i2_getRTC
 18831 ;; This function uses a non-reentrant model
 18832 ;;
 18833                           
 18834                           	psect	text81
 18835  003F78                     __ptext81:
 18836                           	opt stack 0
 18837  003F78                     i2_I2C_Master_Stop:
 18838                           	opt stack 18
 18839                           
 18840                           ;I2C.c: 45: I2C_Master_Wait();
 18841                           
 18842                           ;incstack = 0
 18843  003F78  EC81  F01F         	call	i2_I2C_Master_Wait	;wreg free
 18844                           
 18845                           ;I2C.c: 46: PEN = 1;
 18846  003F7C  84C5               	bsf	4037,2,c	;volatile
 18847  003F7E  0012               	return		;funcret
 18848  003F80                     __end_ofi2_I2C_Master_Stop:
 18849                           	opt stack 0
 18850                           pclatu	equ	0xFFB
 18851                           pclath	equ	0xFFA
 18852                           tblptru	equ	0xFF8
 18853                           tblptrh	equ	0xFF7
 18854                           tblptrl	equ	0xFF6
 18855                           tablat	equ	0xFF5
 18856                           prodh	equ	0xFF4
 18857                           prodl	equ	0xFF3
 18858                           intcon	equ	0xFF2
 18859                           intcon2	equ	0xFF1
 18860                           intcon3	equ	0xFF0
 18861                           indf0	equ	0xFEF
 18862                           postinc0	equ	0xFEE
 18863                           fsr0h	equ	0xFEA
 18864                           fsr0l	equ	0xFE9
 18865                           wreg	equ	0xFE8
 18866                           postdec1	equ	0xFE5
 18867                           fsr1h	equ	0xFE2
 18868                           fsr1l	equ	0xFE1
 18869                           indf2	equ	0xFDF
 18870                           postinc2	equ	0xFDE
 18871                           postdec2	equ	0xFDD
 18872                           fsr2h	equ	0xFDA
 18873                           fsr2l	equ	0xFD9
 18874                           status	equ	0xFD8
 18875                           
 18876 ;; *************** function i2_I2C_Master_Start *****************
 18877 ;; Defined at:
 18878 ;;		line 31 in file "I2C.c"
 18879 ;; Parameters:    Size  Location     Type
 18880 ;;		None
 18881 ;; Auto vars:     Size  Location     Type
 18882 ;;		None
 18883 ;; Return value:  Size  Location     Type
 18884 ;;                  1    wreg      void 
 18885 ;; Registers used:
 18886 ;;		wreg, status,2, status,0, cstack
 18887 ;; Tracked objects:
 18888 ;;		On entry : 0/0
 18889 ;;		On exit  : 0/0
 18890 ;;		Unchanged: 0/0
 18891 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18892 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18893 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18894 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18895 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18896 ;;Total ram usage:        0 bytes
 18897 ;; Hardware stack levels used:    1
 18898 ;; Hardware stack levels required when called:    1
 18899 ;; This function calls:
 18900 ;;		i2_I2C_Master_Wait
 18901 ;; This function is called by:
 18902 ;;		i2_getRTC
 18903 ;; This function uses a non-reentrant model
 18904 ;;
 18905                           
 18906                           	psect	text82
 18907  003F80                     __ptext82:
 18908                           	opt stack 0
 18909  003F80                     i2_I2C_Master_Start:
 18910                           	opt stack 18
 18911                           
 18912                           ;I2C.c: 33: I2C_Master_Wait();
 18913                           
 18914                           ;incstack = 0
 18915  003F80  EC81  F01F         	call	i2_I2C_Master_Wait	;wreg free
 18916                           
 18917                           ;I2C.c: 34: SEN = 1;
 18918  003F84  80C5               	bsf	4037,0,c	;volatile
 18919  003F86  0012               	return		;funcret
 18920  003F88                     __end_ofi2_I2C_Master_Start:
 18921                           	opt stack 0
 18922                           pclatu	equ	0xFFB
 18923                           pclath	equ	0xFFA
 18924                           tblptru	equ	0xFF8
 18925                           tblptrh	equ	0xFF7
 18926                           tblptrl	equ	0xFF6
 18927                           tablat	equ	0xFF5
 18928                           prodh	equ	0xFF4
 18929                           prodl	equ	0xFF3
 18930                           intcon	equ	0xFF2
 18931                           intcon2	equ	0xFF1
 18932                           intcon3	equ	0xFF0
 18933                           indf0	equ	0xFEF
 18934                           postinc0	equ	0xFEE
 18935                           fsr0h	equ	0xFEA
 18936                           fsr0l	equ	0xFE9
 18937                           wreg	equ	0xFE8
 18938                           postdec1	equ	0xFE5
 18939                           fsr1h	equ	0xFE2
 18940                           fsr1l	equ	0xFE1
 18941                           indf2	equ	0xFDF
 18942                           postinc2	equ	0xFDE
 18943                           postdec2	equ	0xFDD
 18944                           fsr2h	equ	0xFDA
 18945                           fsr2l	equ	0xFD9
 18946                           status	equ	0xFD8
 18947                           
 18948 ;; *************** function i2_I2C_Master_Read *****************
 18949 ;; Defined at:
 18950 ;;		line 55 in file "I2C.c"
 18951 ;; Parameters:    Size  Location     Type
 18952 ;;  a               1    wreg     unsigned char 
 18953 ;; Auto vars:     Size  Location     Type
 18954 ;;  a               1    1[COMRAM] unsigned char 
 18955 ;;  I2C_Master_R    1    2[COMRAM] unsigned char 
 18956 ;; Return value:  Size  Location     Type
 18957 ;;                  1    wreg      unsigned char 
 18958 ;; Registers used:
 18959 ;;		wreg, status,2, status,0, cstack
 18960 ;; Tracked objects:
 18961 ;;		On entry : 0/0
 18962 ;;		On exit  : 0/0
 18963 ;;		Unchanged: 0/0
 18964 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18965 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18966 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18967 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18968 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18969 ;;Total ram usage:        2 bytes
 18970 ;; Hardware stack levels used:    1
 18971 ;; Hardware stack levels required when called:    1
 18972 ;; This function calls:
 18973 ;;		i2_I2C_Master_Wait
 18974 ;; This function is called by:
 18975 ;;		i2_getRTC
 18976 ;; This function uses a non-reentrant model
 18977 ;;
 18978                           
 18979                           	psect	text83
 18980  003DC8                     __ptext83:
 18981                           	opt stack 0
 18982  003DC8                     i2_I2C_Master_Read:
 18983                           	opt stack 18
 18984                           
 18985                           ;incstack = 0
 18986                           ;i2I2C_Master_Read@a stored from wreg
 18987  003DC8  6E02               	movwf	i2I2C_Master_Read@a,c
 18988                           
 18989                           ;I2C.c: 57: unsigned char temp;
 18990                           ;I2C.c: 58: I2C_Master_Wait();
 18991  003DCA  EC81  F01F         	call	i2_I2C_Master_Wait	;wreg free
 18992                           
 18993                           ;I2C.c: 59: RCEN = 1;
 18994  003DCE  86C5               	bsf	4037,3,c	;volatile
 18995                           
 18996                           ;I2C.c: 60: I2C_Master_Wait();
 18997  003DD0  EC81  F01F         	call	i2_I2C_Master_Wait	;wreg free
 18998                           
 18999                           ;I2C.c: 61: temp = SSPBUF;
 19000  003DD4  CFC9 F003          	movff	4041,i2I2C_Master_Read@temp	;volatile
 19001                           
 19002                           ;I2C.c: 62: I2C_Master_Wait();
 19003  003DD8  EC81  F01F         	call	i2_I2C_Master_Wait	;wreg free
 19004                           
 19005                           ;I2C.c: 63: ACKDT = (a)?0:1;
 19006  003DDC  5002               	movf	i2I2C_Master_Read@a,w,c
 19007  003DDE  A4D8               	btfss	status,2,c
 19008  003DE0  D002               	goto	i2u336_40
 19009  003DE2  8AC5               	bsf	4037,5,c	;volatile
 19010  003DE4  D001               	goto	i2l4869
 19011  003DE6                     i2u336_40:
 19012  003DE6  9AC5               	bcf	4037,5,c	;volatile
 19013  003DE8                     i2l4869:
 19014                           
 19015                           ;I2C.c: 64: ACKEN = 1;
 19016  003DE8  88C5               	bsf	4037,4,c	;volatile
 19017                           
 19018                           ;I2C.c: 65: return temp;
 19019  003DEA  5003               	movf	i2I2C_Master_Read@temp,w,c
 19020  003DEC  0012               	return	
 19021  003DEE                     __end_ofi2_I2C_Master_Read:
 19022                           	opt stack 0
 19023                           pclatu	equ	0xFFB
 19024                           pclath	equ	0xFFA
 19025                           tblptru	equ	0xFF8
 19026                           tblptrh	equ	0xFF7
 19027                           tblptrl	equ	0xFF6
 19028                           tablat	equ	0xFF5
 19029                           prodh	equ	0xFF4
 19030                           prodl	equ	0xFF3
 19031                           intcon	equ	0xFF2
 19032                           intcon2	equ	0xFF1
 19033                           intcon3	equ	0xFF0
 19034                           indf0	equ	0xFEF
 19035                           postinc0	equ	0xFEE
 19036                           fsr0h	equ	0xFEA
 19037                           fsr0l	equ	0xFE9
 19038                           wreg	equ	0xFE8
 19039                           postdec1	equ	0xFE5
 19040                           fsr1h	equ	0xFE2
 19041                           fsr1l	equ	0xFE1
 19042                           indf2	equ	0xFDF
 19043                           postinc2	equ	0xFDE
 19044                           postdec2	equ	0xFDD
 19045                           fsr2h	equ	0xFDA
 19046                           fsr2l	equ	0xFD9
 19047                           status	equ	0xFD8
 19048                           
 19049 ;; *************** function i2_I2C_Master_Wait *****************
 19050 ;; Defined at:
 19051 ;;		line 26 in file "I2C.c"
 19052 ;; Parameters:    Size  Location     Type
 19053 ;;		None
 19054 ;; Auto vars:     Size  Location     Type
 19055 ;;		None
 19056 ;; Return value:  Size  Location     Type
 19057 ;;                  1    wreg      void 
 19058 ;; Registers used:
 19059 ;;		wreg, status,2, status,0
 19060 ;; Tracked objects:
 19061 ;;		On entry : 0/0
 19062 ;;		On exit  : 0/0
 19063 ;;		Unchanged: 0/0
 19064 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19065 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19066 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19067 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19068 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19069 ;;Total ram usage:        1 bytes
 19070 ;; Hardware stack levels used:    1
 19071 ;; This function calls:
 19072 ;;		Nothing
 19073 ;; This function is called by:
 19074 ;;		i2_I2C_Master_Start
 19075 ;;		i2_I2C_Master_Stop
 19076 ;;		i2_I2C_Master_Write
 19077 ;;		i2_I2C_Master_Read
 19078 ;; This function uses a non-reentrant model
 19079 ;;
 19080                           
 19081                           	psect	text84
 19082  003F02                     __ptext84:
 19083                           	opt stack 0
 19084  003F02                     i2_I2C_Master_Wait:
 19085                           	opt stack 18
 19086  003F02                     i2l66:
 19087  003F02  B4C7               	btfsc	4039,2,c	;volatile
 19088  003F04  D7FE               	goto	i2l66
 19089  003F06  CFC5 F001          	movff	4037,??i2_I2C_Master_Wait	;volatile
 19090  003F0A  0E1F               	movlw	31
 19091  003F0C  1601               	andwf	??i2_I2C_Master_Wait,f,c
 19092  003F0E  B4D8               	btfsc	status,2,c
 19093  003F10  0012               	return	
 19094  003F12  D7F7               	goto	i2l66
 19095  003F14                     __end_ofi2_I2C_Master_Wait:
 19096                           	opt stack 0
 19097                           pclatu	equ	0xFFB
 19098                           pclath	equ	0xFFA
 19099                           tblptru	equ	0xFF8
 19100                           tblptrh	equ	0xFF7
 19101                           tblptrl	equ	0xFF6
 19102                           tablat	equ	0xFF5
 19103                           prodh	equ	0xFF4
 19104                           prodl	equ	0xFF3
 19105                           intcon	equ	0xFF2
 19106                           intcon2	equ	0xFF1
 19107                           intcon3	equ	0xFF0
 19108                           indf0	equ	0xFEF
 19109                           postinc0	equ	0xFEE
 19110                           fsr0h	equ	0xFEA
 19111                           fsr0l	equ	0xFE9
 19112                           wreg	equ	0xFE8
 19113                           postdec1	equ	0xFE5
 19114                           fsr1h	equ	0xFE2
 19115                           fsr1l	equ	0xFE1
 19116                           indf2	equ	0xFDF
 19117                           postinc2	equ	0xFDE
 19118                           postdec2	equ	0xFDD
 19119                           fsr2h	equ	0xFDA
 19120                           fsr2l	equ	0xFD9
 19121                           status	equ	0xFD8
 19122                           pclatu	equ	0xFFB
 19123                           pclath	equ	0xFFA
 19124                           tblptru	equ	0xFF8
 19125                           tblptrh	equ	0xFF7
 19126                           tblptrl	equ	0xFF6
 19127                           tablat	equ	0xFF5
 19128                           prodh	equ	0xFF4
 19129                           prodl	equ	0xFF3
 19130                           intcon	equ	0xFF2
 19131                           intcon2	equ	0xFF1
 19132                           intcon3	equ	0xFF0
 19133                           indf0	equ	0xFEF
 19134                           postinc0	equ	0xFEE
 19135                           fsr0h	equ	0xFEA
 19136                           fsr0l	equ	0xFE9
 19137                           wreg	equ	0xFE8
 19138                           postdec1	equ	0xFE5
 19139                           fsr1h	equ	0xFE2
 19140                           fsr1l	equ	0xFE1
 19141                           indf2	equ	0xFDF
 19142                           postinc2	equ	0xFDE
 19143                           postdec2	equ	0xFDD
 19144                           fsr2h	equ	0xFDA
 19145                           fsr2l	equ	0xFD9
 19146                           status	equ	0xFD8
 19147                           
 19148                           	psect	rparam
 19149  0000                     pclatu	equ	0xFFB
 19150                           pclath	equ	0xFFA
 19151                           tblptru	equ	0xFF8
 19152                           tblptrh	equ	0xFF7
 19153                           tblptrl	equ	0xFF6
 19154                           tablat	equ	0xFF5
 19155                           prodh	equ	0xFF4
 19156                           prodl	equ	0xFF3
 19157                           intcon	equ	0xFF2
 19158                           intcon2	equ	0xFF1
 19159                           intcon3	equ	0xFF0
 19160                           indf0	equ	0xFEF
 19161                           postinc0	equ	0xFEE
 19162                           fsr0h	equ	0xFEA
 19163                           fsr0l	equ	0xFE9
 19164                           wreg	equ	0xFE8
 19165                           postdec1	equ	0xFE5
 19166                           fsr1h	equ	0xFE2
 19167                           fsr1l	equ	0xFE1
 19168                           indf2	equ	0xFDF
 19169                           postinc2	equ	0xFDE
 19170                           postdec2	equ	0xFDD
 19171                           fsr2h	equ	0xFDA
 19172                           fsr2l	equ	0xFD9
 19173                           status	equ	0xFD8
 19174                           
 19175                           	psect	temp
 19176  00007E                     btemp:
 19177                           	opt stack 0
 19178  00007E                     	ds	1
 19179  0000                     int$flags	set	btemp
 19180                           pclatu	equ	0xFFB
 19181                           pclath	equ	0xFFA
 19182                           tblptru	equ	0xFF8
 19183                           tblptrh	equ	0xFF7
 19184                           tblptrl	equ	0xFF6
 19185                           tablat	equ	0xFF5
 19186                           prodh	equ	0xFF4
 19187                           prodl	equ	0xFF3
 19188                           intcon	equ	0xFF2
 19189                           intcon2	equ	0xFF1
 19190                           intcon3	equ	0xFF0
 19191                           indf0	equ	0xFEF
 19192                           postinc0	equ	0xFEE
 19193                           fsr0h	equ	0xFEA
 19194                           fsr0l	equ	0xFE9
 19195                           wreg	equ	0xFE8
 19196                           postdec1	equ	0xFE5
 19197                           fsr1h	equ	0xFE2
 19198                           fsr1l	equ	0xFE1
 19199                           indf2	equ	0xFDF
 19200                           postinc2	equ	0xFDE
 19201                           postdec2	equ	0xFDD
 19202                           fsr2h	equ	0xFDA
 19203                           fsr2l	equ	0xFD9
 19204                           status	equ	0xFD8


Data Sizes:
    Strings     1088
    Constant    27
    Data        8
    BSS         118
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     90     125
    BANK0           128     90     128
    BANK1           256      0      53
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    strcpy@from	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_62(CODE[4]), STR_61(CODE[4]), STR_60(CODE[4]), STR_59(CODE[4]), 
		 -> STR_58(CODE[4]), STR_57(CODE[4]), STR_56(CODE[4]), STR_55(CODE[4]), 
		 -> STR_54(CODE[4]), STR_53(CODE[4]), STR_52(CODE[4]), STR_51(CODE[4]), 
		 -> STR_20(CODE[4]), STR_19(CODE[4]), STR_18(CODE[4]), STR_17(CODE[4]), 
		 -> STR_16(CODE[4]), STR_15(CODE[4]), STR_14(CODE[4]), STR_13(CODE[4]), 
		 -> STR_12(CODE[4]), STR_11(CODE[4]), STR_10(CODE[4]), STR_9(CODE[4]), 
		 -> STR_8(CODE[4]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_105(CODE[7]), count_total(BANK0[2]), printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 24
		 -> STR_104(CODE[15]), STR_103(CODE[15]), STR_102(CODE[15]), STR_101(CODE[17]), 
		 -> STR_100(CODE[17]), STR_99(CODE[17]), STR_98(CODE[16]), STR_97(CODE[17]), 
		 -> STR_96(CODE[17]), STR_95(CODE[17]), STR_94(CODE[17]), STR_93(CODE[17]), 
		 -> STR_92(CODE[17]), STR_91(CODE[15]), STR_90(CODE[11]), STR_89(CODE[17]), 
		 -> STR_88(CODE[11]), STR_87(CODE[17]), STR_86(CODE[14]), STR_85(CODE[15]), 
		 -> STR_84(CODE[14]), STR_83(CODE[10]), STR_82(CODE[16]), STR_81(CODE[15]), 
		 -> STR_80(CODE[15]), STR_79(CODE[13]), STR_78(CODE[14]), STR_77(CODE[8]), 
		 -> STR_76(CODE[14]), STR_75(CODE[15]), STR_74(CODE[12]), STR_73(CODE[14]), 
		 -> STR_72(CODE[17]), STR_71(CODE[14]), STR_70(CODE[15]), STR_69(CODE[13]), 
		 -> STR_68(CODE[17]), STR_67(CODE[7]), STR_66(CODE[21]), STR_65(CODE[13]), 
		 -> STR_64(CODE[11]), STR_63(CODE[24]), STR_50(CODE[17]), STR_49(CODE[17]), 
		 -> STR_48(CODE[17]), STR_47(CODE[17]), STR_46(CODE[17]), STR_45(CODE[17]), 
		 -> STR_44(CODE[17]), STR_43(CODE[17]), STR_42(CODE[17]), STR_41(CODE[17]), 
		 -> STR_40(CODE[17]), STR_39(CODE[17]), STR_38(CODE[17]), STR_37(CODE[17]), 
		 -> STR_36(CODE[17]), STR_35(CODE[17]), STR_34(CODE[17]), STR_33(CODE[17]), 
		 -> STR_32(CODE[17]), STR_31(CODE[17]), STR_30(CODE[17]), STR_29(CODE[3]), 
		 -> STR_28(CODE[17]), STR_27(CODE[19]), STR_26(CODE[17]), STR_25(CODE[19]), 
		 -> STR_24(CODE[17]), STR_23(CODE[14]), STR_22(CODE[10]), STR_21(CODE[24]), 
		 -> STR_7(CODE[7]), STR_6(CODE[17]), STR_5(CODE[18]), STR_4(CODE[16]), 
		 -> STR_3(CODE[18]), STR_2(CODE[14]), STR_1(CODE[18]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _handler in COMRAM

    _handler->_printSortTimer
    i2_change_state_to_menu_start->i2_printRTC
    i2_printRTC->i2_printf
    i2_change_state_to_menu_22->i2_printf
    i2_change_state_to_menu_12->i2_printf
    _change_state_to_menu_23->i2_printf
    _change_state_to_menu_11->i2_printf
    _change_state_to_logs_34->i2_printf
    _change_state_to_logs_33->i2_printf
    _change_state_to_logs_23->i2_printf
    _change_state_to_logs_22->i2_printf
    _change_state_to_logs_12->i2_printf
    _change_state_to_logs_11->i2_printf
    _dispLogs->_retrieveLog
    _retrieveLog->i2___wmul
    _printSortTimer->i2_printf
    i2_printf->i2___lwdiv
    i2_putch->i2_lcdNibble
    i2___lwdiv->i2___lwmod
    i2_lcdInst->i2_lcdNibble
    i2_getRTC->i2_I2C_Master_Read
    i2_getRTC->i2_I2C_Master_Write
    i2_I2C_Master_Write->i2_I2C_Master_Wait
    i2_I2C_Master_Stop->i2_I2C_Master_Wait
    i2_I2C_Master_Start->i2_I2C_Master_Wait
    i2_I2C_Master_Read->i2_I2C_Master_Wait

Critical Paths under _main in BANK0

    _main->_UI
    _sort->_Loading
    _Loading->_EEPROM_write
    _initSortTimer->_getRTC
    _initServos->_updateServoPosition
    _getIR->_readIR
    _ID->_readMAG
    _Distribution->_updateServoPosition
    _logRun->_EEPROM_write
    _EEPROM_write->_printf
    _loadRTC->_I2C_Master_Init
    _I2C_Master_Init->___lldiv
    _change_state_to_menu_start->_printRTC
    _initLCD->_lcdInst
    _UI->_printRTC
    _printRTC->_printf
    _getRTC->_I2C_Master_Read
    _getRTC->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _change_state_to_menu_22->_printf
    _change_state_to_menu_12->_printf
    ___awdiv->___awmod
    _Test->_actuatorTest
    _sensorTest->_printf
    _readMAG->_readADC
    _readIR->_readADC
    _algorithmTest->_printf
    _actuatorTest->_printf
    _printf->___awdiv
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _lcdInst->_lcdNibble

Critical Paths under _handler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _handler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _handler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _handler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _handler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _handler in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _handler in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _handler in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _handler in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _handler in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _handler in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _handler in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _handler in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _handler in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _handler in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _handler in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  121195
                               _Test
                                 _UI
                            _initLCD
                           _initTime
                             _initUI
                             _logRun
                      _machineConfig
                               _sort
                        _stopSignals
 ---------------------------------------------------------------------------------
 (1) _stopSignals                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _sort                                                 0     0      0   15635
                       _Distribution
                                 _ID
                            _Loading
 ---------------------------------------------------------------------------------
 (2) _Loading                                              5     5      0   12991
                                             49 BANK0      5     5      0
                        _EEPROM_read
                       _EEPROM_write
                              _getIR
                     _initGlobalVars
                         _initServos
                      _initSortTimer
                            _lcdInst
 ---------------------------------------------------------------------------------
 (3) _initSortTimer                                        5     5      0     631
                                              5 BANK0      5     5      0
                             _getRTC
 ---------------------------------------------------------------------------------
 (3) _initServos                                           1     1      0    2437
                                              8 BANK0      1     1      0
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (3) _initGlobalVars                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _getIR                                                2     2      0      45
                                              6 BANK0      2     2      0
                             _readIR
 ---------------------------------------------------------------------------------
 (2) _ID                                                   8     8      0     207
                                              6 BANK0      8     8      0
                            _readMAG
 ---------------------------------------------------------------------------------
 (2) _Distribution                                         2     2      0    2437
                                              8 BANK0      2     2      0
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (1) _machineConfig                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _logRun                                              10    10      0   10018
                                             49 BANK0     10    10      0
                        _EEPROM_read
                       _EEPROM_write
 ---------------------------------------------------------------------------------
 (3) _EEPROM_write                                         6     3      3    9271
                                             43 BANK0      6     3      3
                        _EEPROM_read
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (4) _EEPROM_read                                          2     0      2     426
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _initUI                                               0     0      0   20368
         _change_state_to_menu_start
                            _loadRTC
 ---------------------------------------------------------------------------------
 (2) _loadRTC                                              3     3      0     850
                                             21 BANK0      3     3      0
                    _I2C_Master_Init
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Init                                      8     4      4     376
                                             13 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     290
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_start                           0     0      0   19518
                            _lcdInst
                           _printRTC
                             _printf
 ---------------------------------------------------------------------------------
 (1) _initTime                                             7     1      6     538
                                              0 BANK0      7     1      6
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                              3 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _UI                                                  24    24      0   40616
                                             68 BANK0     22    22      0
                            ___awdiv
                            ___awmod
            _change_state_to_menu_12
            _change_state_to_menu_22
                            _lcdInst
                           _printRTC
                             _printf
                             _strcpy
 ---------------------------------------------------------------------------------
 (3) _printRTC                                            25    25      0   11943
                                             43 BANK0     25    25      0
                             _getRTC
                            _lcdInst
                             _printf
                             _strcpy
 ---------------------------------------------------------------------------------
 (4) _strcpy                                               6     2      4    3275
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) _getRTC                                               2     2      0     519
                                              3 BANK0      2     2      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Write                                     2     0      2     406
                                              1 BANK0      2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Read                                      2     2      0      45
                                              1 BANK0      2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (6) _I2C_Master_Wait                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_22                              0     0      0    7575
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_12                              0     0      0    7575
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4    1064
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     556
                                              6 BANK0      8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (1) _Test                                                 2     2      0   33885
                                             68 BANK0      2     2      0
                         _PortTestA5
                       _actuatorTest
                      _algorithmTest
                            _lcdInst
                             _printf
                         _sensorTest
 ---------------------------------------------------------------------------------
 (2) _sensorTest                                           2     2      0    7665
                                             43 BANK0      2     2      0
                            _lcdInst
                             _printf
                             _readIR
                            _readMAG
 ---------------------------------------------------------------------------------
 (3) _readMAG                                              4     4      0      45
                                              2 BANK0      4     4      0
                            _readADC
 ---------------------------------------------------------------------------------
 (4) _readIR                                               4     4      0      45
                                              2 BANK0      4     4      0
                            _readADC
 ---------------------------------------------------------------------------------
 (5) _readADC                                              2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _algorithmTest                                        2     2      0    7575
                                             43 BANK0      2     2      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _actuatorTest                                        25    25      0   11070
                                             43 BANK0     25    25      0
                            _lcdInst
                             _printf
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (4) _updateServoPosition                                  8     4      4    2437
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (4) _printf                                              33    21     12    7440
                                             14 BANK0     29    17     12
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (5) _isdigit                                              3     3      0      68
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     669
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              5     1      4     515
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              7     3      4     442
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) _lcdInst                                              1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     113
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _PortTestA5                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _handler                                             16    16      0   76936
                                             74 COMRAM    16    16      0
                     _printSortTimer
                         _updateMenu
 ---------------------------------------------------------------------------------
 (8) _updateMenu                                           2     2      0   71999
                                             66 COMRAM     2     2      0
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
                           _dispLogs
                       _inputHandler
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
       i2_change_state_to_menu_start
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_start                         0     0      0    7744
                          i2_lcdInst
                         i2_printRTC
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) i2_printRTC                                         25    25      0    4605
                                             41 COMRAM    25    25      0
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
                           i2_strcpy
 ---------------------------------------------------------------------------------
 (11) i2_strcpy                                            6     2      4     699
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (9) _inputHandler                                         4     2      2   31390
                                             41 COMRAM     4     2      2
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_22                            0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_12                            0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_23                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_11                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_34                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_33                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_23                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_22                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_12                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_11                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) _dispLogs                                             2     0      2    1475
                                             17 COMRAM     2     0      2
                        _retrieveLog
 ---------------------------------------------------------------------------------
 (10) _retrieveLog                                        11     9      2    1047
                                              6 COMRAM    11     9      2
                      i2_EEPROM_read
                           i2___wmul
 ---------------------------------------------------------------------------------
 (11) i2_EEPROM_read                                       2     0      2     174
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (8) _printSortTimer                                      33    33      0    4937
                                             41 COMRAM    33    33      0
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) i2_printf                                           33    21     12    3004
                                             12 COMRAM    29    17     12
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch
 ---------------------------------------------------------------------------------
 (11) i2_putch                                             1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (11) i2_isdigit                                           3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (11) i2___wmul                                            6     2      4     469
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (11) i2___lwmod                                           5     1      4     367
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (11) i2___lwdiv                                           7     3      4     318
                                              5 COMRAM     7     3      4
                          i2___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (11) i2_lcdInst                                           1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (12) i2_lcdNibble                                         2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (11) i2_getRTC                                            2     2      0     213
                                              3 COMRAM     2     2      0
                  i2_I2C_Master_Read
                 i2_I2C_Master_Start
                  i2_I2C_Master_Stop
                 i2_I2C_Master_Write
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Write                                  2     0      2     100
                                              1 COMRAM     2     0      2
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Stop                                   0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Start                                  0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Read                                   2     2      0      45
                                              1 COMRAM     2     2      0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (13) i2_I2C_Master_Wait                                   1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Test
     _PortTestA5
     _actuatorTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _updateServoPosition
     _algorithmTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _lcdInst
       _lcdNibble
     _printf
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
     _sensorTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _readIR
         _readADC
       _readMAG
         _readADC
   _UI
     ___awdiv
       ___awmod (ARG)
     ___awmod
     _change_state_to_menu_12
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _change_state_to_menu_22
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _lcdInst
       _lcdNibble
     _printRTC
       _getRTC
         _I2C_Master_Read
           _I2C_Master_Wait
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _strcpy
     _printf
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
     _strcpy
   _initLCD
     _lcdInst
       _lcdNibble
   _initTime
   _initUI
     _change_state_to_menu_start
       _lcdInst
         _lcdNibble
       _printRTC
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
         _lcdInst
           _lcdNibble
         _printf
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _lcdNibble
         _strcpy
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _loadRTC
       _I2C_Master_Init
         ___lldiv
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
   _logRun
     _EEPROM_read
     _EEPROM_write
       _EEPROM_read
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
   _machineConfig
   _sort
     _Distribution
       _updateServoPosition
     _ID
       _readMAG
         _readADC
     _Loading
       _EEPROM_read
       _EEPROM_write
         _EEPROM_read
         _lcdInst
           _lcdNibble
         _printf
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _lcdNibble
       _getIR
         _readIR
           _readADC
       _initGlobalVars
       _initServos
         _updateServoPosition
       _initSortTimer
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
       _lcdInst
         _lcdNibble
   _stopSignals

 _handler (ROOT)
   _printSortTimer
     i2___lwdiv
       i2___lwmod (ARG)
     i2___lwmod
     i2___wmul
     i2_getRTC
       i2_I2C_Master_Read
         i2_I2C_Master_Wait
       i2_I2C_Master_Start
         i2_I2C_Master_Wait
       i2_I2C_Master_Stop
         i2_I2C_Master_Wait
       i2_I2C_Master_Write
         i2_I2C_Master_Wait
     i2_lcdInst
       i2_lcdNibble
     i2_printf
       i2___lwdiv
         i2___lwmod (ARG)
       i2___lwmod
       i2___wmul
       i2_isdigit
       i2_putch
         i2_lcdNibble
   _updateMenu
     _change_state_to_logs_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_33
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_34
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _dispLogs
       _retrieveLog
         i2_EEPROM_read
         i2___wmul
     _inputHandler
       _change_state_to_logs_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_33
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_34
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
     i2_change_state_to_menu_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_start
       i2_lcdInst
         i2_lcdNibble
       i2_printRTC
         i2_getRTC
           i2_I2C_Master_Read
             i2_I2C_Master_Wait
           i2_I2C_Master_Start
             i2_I2C_Master_Wait
           i2_I2C_Master_Stop
             i2_I2C_Master_Wait
           i2_I2C_Master_Write
             i2_I2C_Master_Wait
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
         i2_strcpy
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      35       7       20.7%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     5A      80       5      100.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     5A      7D       1       99.2%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     132      34        0.0%
DATA                 0      0     132       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Wed Mar 01 13:24:14 2017

                                    _i 00E6                     i2_I2C_Master_Start 3F80  
                   i2_I2C_Master_Write 3F56                                     l66 3EDC  
                                   _ID 29BE                                     _UI 0012  
                         ___awdiv@sign 008B                                     _up 0075  
                  ___wmul@multiplicand 0082                     i2___lwdiv@dividend 0006  
                          __CFG_BORV$3 000000                     EEPROM_read@address 0080  
                         __CFG_CP0$OFF 000000                           __CFG_CP1$OFF 000000  
                         __CFG_CP2$OFF 000000                           __CFG_CP3$OFF 000000  
                                  ?_ID 0001                                    ?_UI 0001  
                                  UI@i 00C8                                    l177 00E8  
                                  l478 329C                                    l591 1982  
                                  l911 3EA8                                    l920 2874  
                                  l772 3488                                    l980 2EFA  
                                  l983 2F12                                    l898 2C1A  
                                  l998 2E24                           __CFG_CPB$OFF 000000  
                                  _PEN 007E2A                           __CFG_CPD$OFF 000000  
                                  _SEN 007E28                    ?i2_I2C_Master_Start 0001  
                       ?_machineConfig 0001                    ?i2_I2C_Master_Write 0002  
                                  _log 00E8                                    _sel 00FD  
                                  _var 0077                           ___awmod@sign 0085  
                                  wreg 000FE8                    i2printRTC@RTC_month 003B  
                  _log_count_can_w_lab 00EE        __end_of_change_state_to_menu_11 3BAC  
      __end_of_change_state_to_menu_12 3A4E        __end_of_change_state_to_menu_22 3A16  
      __end_of_change_state_to_menu_23 3B7C           _f_can_coming_to_distribution 006F  
                       ??_Distribution 0088        __end_of_change_state_to_logs_11 3C9C  
      __end_of_change_state_to_logs_12 3C6C        __end_of_change_state_to_logs_22 3C3C  
      __end_of_change_state_to_logs_23 3CF8        __end_of_change_state_to_logs_33 3C0C  
      __end_of_change_state_to_logs_34 3BDC                                   ??_ID 0086  
                                 ??_UI 00C4                           __CFG_LVP$OFF 000000  
                         __CFG_WDT$OFF 000000                                   l1001 2E28  
                                 l1010 24C6                                   l1007 24C2  
                                 l1032 09C2                                   l1016 2578  
                                 l1025 0918                                   l1035 0A28  
                                 l1036 0A76                                   l1028 091C  
                                 l1125 136C                                   l1037 0ADC  
                                 l1062 0E84                                   l1038 0B2A  
                                 l1090 3EF6                                   l1074 101E  
                                 l1087 3EF0                                   l1519 30C8  
                                 l5001 132C                                   l1572 3442  
                                 l5021 13BE                                   l5005 1332  
                                 l1582 365E                                   l5023 13C4  
                                 l5041 1422                                   l5017 13A4  
                                 l5035 1400                                   l5131 304C  
                                 l5061 14A6                                   l5053 147E  
                                 l5045 145A                                   l5117 3474  
                                 l5133 305C                                   l5071 14DA  
                                 l5047 1464                                   l5119 349E  
                                 l5143 30B6                                   l5135 3062  
                                 l5065 14C0                                   l6121 0986  
                                 l5081 3A58                                   l5075 1532  
                                 l5059 149A                                   l6211 0BB0  
                                 l6131 09AE                                   l6123 098C  
                                 l5083 3A64                                   l5069 14D4  
                                 l5077 153E                                   l6221 0BD8  
                                 l5093 33A4                                   l6311 0DB6  
                                 l6303 0D7C                                   l6215 0BC8  
                                 l6207 0BA6                                   l6127 0996  
                                 l5351 198C                                   l4801 3D70  
                                 l6401 0F78                                   l6321 0DDE  
                                 l6241 0C4C                                   l6233 0C2A  
                                 l6225 0BF0                                   l6217 0BCE  
                                 l6065 2556                                   l5089 338E  
                                 l5361 1A22                                   l5353 19AA  
                                 l5345 1900                                   l6315 0DC0  
                                 l6251 0C74                                   l6243 0C52  
                                 l6083 25EA                                   l6059 2514  
                                 l5099 33C4                                   l5371 1AB8  
                                 l5363 1A40                                   l5355 19C8  
                                 l5515 30E8                                   l4821 3404  
                                 l6421 0FDE                                   l6405 0F82  
                                 l6341 0E44                                   l6325 0DE8  
                                 l6237 0C34                                   l6077 25A8  
                                 l5373 1AD6                                   l5365 1A5E  
                                 l5357 19E6                                   l5605 38B2  
                                 l5525 3174                                   l6431 1006  
                                 l6351 0E6C                                   l6319 0DD8  
                                 l6263 0CB8                                   l6247 0C5C  
                                 l6503 2F7C                                   l5367 1A7C  
                                 l5359 1A04                                   l5519 30FE  
                                 l4817 33F2                                   l4841 362C  
                                 l6425 0FF6                                   l6417 0FD4  
                                 l6409 0F9A                                   l6345 0E5C  
                                 l6337 0E3A                                   l6329 0E00  
                                 l6273 0CE0                                   l4761 3D4A  
                                 l5369 1A9A                                   l5377 1AF4  
                                 l5561 2C86                                   l7217 282E  
                                 l7321 327A                                   l4819 33FE  
                                 l6451 106E                                   l6427 0FFC  
                                 l6347 0E62                                   l6267 0CD0  
                                 l6259 0CAE                                   l7251 2F2A  
                                 l6515 2FB0                                   l6531 3000  
                                 l5379 1B52                                   l7331 3298  
                                 l4829 3434                                   l4845 3650  
                                 l4837 361A                                   l6461 1096  
                                 l6373 0EEE                                   l6365 0ECC  
                                 l6293 0D54                                   l6285 0D32  
                                 l6277 0CF8                                   l6269 0CD6  
                                 l7245 2F18                                   l7229 2E9C  
                                 l6517 2FBC                                   l6509 2F92  
                                 l6701 0282                                   l5573 2CBE  
                                 l5565 2C90                                   l7317 326E  
                                 l4839 3626                                   l4951 1148  
                                 l6455 1078                                   l6391 0F50  
                                 l6383 0F16                                   l6375 0EF4  
                                 l6295 0D5A                                   l4759 3D38  
                                 l7247 2F1E                                   l7255 2F30  
                                 l6535 3014                                   l6527 2FF2  
                                 l6519 2FC2                                   l6551 31B0  
                                 l4783 3CC2                                   l6631 013A  
                                 l6623 0118                                   l7191 279A  
                                 l5911 2D8C                                   l7319 3274  
                                 l7335 329E                                   _ADIE 007CEE  
                                 l4953 115A                                   l6481 10E6  
                                 l6465 10A0                                   l6369 0ED6  
                                 l6289 0D3C                                   l7249 2F24  
                                 l6801 063E                                   l6721 0310  
                                 l6617 0100                                   l5577 2CC8  
                                 l5569 2CA8                                   l7193 27AE  
                                 l7329 3292                                   l4971 1214  
                                 l4963 1198                                   l4947 1134  
                                 l6491 110E                                   l6459 1090  
                                 l6395 0F5A                                   l6379 0EFE  
                                 l6299 0D64                                   l6571 321C  
                                 l6563 31FA                                   l6555 31C4  
                                 l6547 31A0                                   l6811 065A  
                                 l6731 03A6                                   l6723 032E  
                                 l6651 01AA                                   l6635 014C  
                                 l6627 0122                                   l6619 0106  
                                 l4981 1252                                   l4957 1164  
                                 l6485 10FE                                   l6477 10DC  
                                 l6469 10B8                                   l6557 31D0  
                                 l6741 043C                                   l6733 03C4  
                                 l6725 034C                                   l6717 02D4  
                                 l5685 3304                                   l4991 12CA  
                                 l4983 1258                                   l6487 1104  
                                 l6399 0F72                                   l6559 31D6  
                                 l6567 3208                                   l6815 0672  
                                 l6807 0650                                   l6751 0500  
                                 l6735 03E2                                   l6727 036A  
                                 l6719 02F2                                   l6655 01B4  
                                 l5695 3346                                   l5943 2A58  
                                 l4993 12D0                                   l6921 086A  
                                 l6913 0848                                   l6841 06FA  
                                 l6833 06D8                                   l6737 0400  
                                 l6729 0388                                   l6745 045A  
                                 l6649 01A4                                   l6665 01DA  
                                 l5689 331A                                   l5953 2A88  
                                 l5961 2AA0                                   l4995 12E8  
                                 l4979 1246                                   l6931 0886  
                                 l6851 0716                                   l6755 050A  
                                 l6739 041E                                   l6747 04BE  
                                 l6683 0236                                   l6659 01CC  
                                 l4989 12BE                                   l6917 0852  
                                 l6837 06E2                                   l6773 0556  
                                 l6765 0534                                   l6693 0260  
                                 l5981 28AE                                   l5957 2A94  
                                 l4999 1314                                   l6935 089E  
                                 l6927 087C                                   l6855 072E  
                                 l6847 070C                                   l6759 0522  
                                 l6687 024E                                   l6679 022C  
                                 l5983 28C8                                   l5991 292A  
                                 l5895 2D52                                   l6881 07B6  
                                 l6873 0794                                   l6793 061C  
                                 l6769 053E                                   l6697 026A  
                                 l5985 28E2                                   l6891 07D2  
                                 l6939 08AA                                   l5979 2894  
                                 l6877 079E                                   l6797 0626  
                                 l5989 28FC                                   l6895 07EA  
                                 l6887 07C8                                   STR_1 FC23  
                                 STR_2 FF41                                   STR_3 FC11  
                                 STR_4 FE64                                   STR_5 FC11  
                                 STR_6 FE22                                   STR_7 FFC3  
                                 STR_8 FFDA                                   STR_9 FFCA  
                                 _LATA 000F89                                   _LATB 000F8A  
                                 _LATC 000F8B                                   _LATD 000F8C  
                                 _LATE 000F8D                                   u4130 3900  
                                 u4131 38FC                                   u4140 3902  
                                 u3260 3CC0                                   u3520 1292  
                                 u4170 1982                                   u4155 3698  
                                 u3460 394C                                   u3461 3948  
                                 u3470 394E                                   u3527 1288  
                                 u3560 130A                                   u4520 29EE  
                                 _PEIE 007F96                                   u4550 2A48  
                                 u3567 1300                                   u7007 0B08  
                                 u4720 09C2                                   u4528 29F2  
                                 u7017 0B3A                                   u6250 2874  
                                 u7107 0DC8                                   u7027 0BB8  
                                 u4740 0A76                                   _RCEN 007E2B  
                                 u7117 0DF0                                   u7037 0BE0  
                                 u4558 2A4C                                   u7207 1030  
                                 u7127 0E4C                                   u7047 0C3C  
                                 u4760 0B2A                                   u7217 1080  
                                 u7137 0E74                                   u7057 0C64  
                                 u6417 2CFE                                   u7227 10A8  
                                 u7147 0EDE                                   u7067 0CC0  
                                 u6507 2C3C                                   u6427 2DB6  
                                 u7237 10EE                                   u7157 0F06  
                                 u7077 0CE8                                   u6517 2C98  
                                 u6437 370A                                   u7247 1116  
                                 u7167 0F62                                   u7087 0D44  
                                 u6607 023E                                   u6527 2CD0  
                                 u6447 388E                                   u7257 35BE  
                                 u7177 0F8A                                   u7097 0D6C  
                                 u6617 0272                                   u6537 395E  
                                 u6457 29D4                                   i2l66 3F02  
                                 u7267 35C8                                   u7187 0FE6  
                                 u6707 071E                                   u6627 029C  
                                 u6547 3992                                   u6467 2A30  
                                 u7277 35F4                                   u7197 100E  
                                 u6717 0748                                   u6637 0512  
                                 u6557 002A                                   u6477 2AC4  
                                 u7287 35FE                                   u6807 24B6  
                                 u6727 07A6                                   u6647 0546  
                                 u6567 012A                                   u6487 2938  
                                 u6817 24D8                                   u6737 07DA  
                                 u6657 0570                                   u6577 0166  
                                 u6497 296C                                   u6907 2E3A  
                                 u6827 2506                                   u6747 0804  
                                 u6667 062E                                   u6587 01BC  
                                 u6917 08C8                                   u6837 254A  
                                 u6757 085A                                   u6677 0662  
                                 u6597 01E8                                   u6927 090C  
                                 u6847 2568                                   u6767 088E  
                                 u6687 068C                                   u6937 092E  
                                 u6857 259A                                   u6777 2EAA  
                                 u6697 06EA                                   u6947 099E  
                                 u6867 25DE                                   u6787 2EEE  
                                 u6957 09D2                                   u6877 3D40  
                                 u6797 2472                                   u6967 0A38  
                                 u6887 2DD4                                   u6977 0A54  
                                 u6897 2E18                                   u6987 0A86  
                                 u6997 0AEC                                   _RSEN 007E29  
                          _stopSignals 3EB0                                   _Test 2E9C  
                                 _back 005B                                   _main 3226  
                                 _down 0067                                   _keys FBA3  
                                 _time 0124                                   fsr0h 000FEA  
                                 fsr1h 000FE2                     i2___lwdiv@quotient 000A  
                                 indf0 000FEF                                   fsr2h 000FDA  
                                 fsr0l 000FE9                                   indf2 000FDF  
                                 fsr1l 000FE1                                   fsr2l 000FD9  
                                 _sort 3E36                                   btemp 007E  
                 ??i2_I2C_Master_Start 0002                   ??i2_I2C_Master_Write 0004  
                                 prodh 000FF4                                   prodl 000FF3  
                                 start 000E                          __CFG_IESO$OFF 000000  
                 _log_count_can_no_lab 00EC                        __end_ofi2_putch 3F40  
                        __CFG_MCLRE$ON 000000                           ___param_bank 000000  
                           i2_printRTC 1E56                            i2_lcdNibble 377A  
                      __end_of_Loading 2DC6                   __end_of_actuatorTest 1126  
                     ?_I2C_Master_Init 008D                       ?_I2C_Master_Read 0001  
                     ?_I2C_Master_Wait 0001            ??i2_change_state_to_menu_12 002A  
          ??i2_change_state_to_menu_22 002A                       ?_I2C_Master_Stop 0001  
                                ?_Test 0001                   __end_of_EEPROM_write 2CE0  
                                ?_main 0001                                  _ACKEN 007E2C  
                                _ACKDT 007E2D                        __end_of___awdiv 301E  
                                _EEADR 000FA9                                  STR_10 FFE6  
                                STR_11 FFEA                                  STR_12 FFFA  
                                STR_20 FFEE                                  STR_13 FFDE  
                                STR_21 FBBE                                  STR_14 FFD6  
                                STR_22 FFA3                                  STR_30 FE33  
                                STR_15 FFD2                                  STR_23 FF33  
                                STR_31 FE11                                  STR_16 FFE2  
                                STR_24 FD78                                  STR_32 FD56  
                                STR_40 FD12                                  STR_17 FFF2  
                                STR_33 FD67                                  STR_41 FD01  
                                STR_25 FBFE                                  STR_18 FFF6  
                                STR_34 FE00                                  STR_50 FDDE  
                                STR_42 FDBC                                  STR_26 FD89  
                                STR_43 FDBC                                  STR_35 FE00  
                                STR_51 FFDA                                  STR_19 FFCE  
                                STR_27 FBEB                                  STR_52 FFCA  
                                STR_60 FFF2                                  STR_28 FD9A  
                                STR_36 FD45                                  STR_44 FD23  
                      __end_of___awmod 3226                                  STR_45 FD12  
                                STR_37 FD56                                  STR_53 FFE6  
                                STR_61 FFF6                                  STR_29 FBFB  
                                STR_62 FFCE                                  STR_54 FFEA  
                                STR_70 FEEC                                  STR_38 FDEF  
                                STR_46 FDCD                                  STR_47 FDCD  
                                STR_55 FFFA                                  STR_63 FBBE  
                                STR_71 FF25                                  STR_39 FDAB  
                                STR_56 FFDE                                  STR_64 FF98  
                                STR_80 FE74                                  STR_48 FD34  
                                STR_72 FCBD                                  STR_49 FD23  
                                STR_57 FFD6                                  STR_65 FF69  
                                STR_73 FF09                                  STR_81 FEA1  
                                STR_58 FFD2                                  STR_90 FF8D  
                                STR_74 FF76                                  STR_82 FE44  
                                STR_66 FBD6                                  STR_59 FFE2  
                                STR_83 FF5F                                  STR_67 FFBC  
                                STR_75 FECE                                  STR_91 FEBF  
                                STR_84 FF25                                  STR_76 FF17  
                                STR_68 FCF0                                  STR_92 FC8A  
                                STR_77 FFAD                                  STR_69 FF5C  
                                STR_85 FEDD                                  STR_93 FC79  
                                STR_78 FF25                                  STR_86 FEFB  
                                STR_94 FC57                                  STR_79 FF4F  
                                STR_87 FCCE                                  STR_95 FC9B  
                                STR_88 FF82                                  STR_96 FCAC  
                                STR_89 FCDF                                  STR_97 FC35  
                                STR_98 FE54                                  STR_99 FC68  
                                ?_sort 0001                        __end_of___lldiv 30DA  
                                _T0CON 000FD5                        ___awdiv@divisor 0088  
                                _T1CON 000FCD                        __end_of___lwdiv 344C  
                      __end_of___lwmod 3668                                  i2l254 1E52  
                                i2l911 3ED4                                  i2l591 1EE4  
                                i2l833 26F2                                  i2l835 2712  
                                i2l829 26A6                        ___awdiv@counter 008A  
                                _TMR0H 000FD7                                  _TMR1H 000FCF  
                                _TMR0L 000FD6                                  _TMR3H 000FB3  
                                _TMR1L 000FCE                                  _TMR3L 000FB2  
                                _PORTB 000F81                                  _TRISA 000F92  
                                _TRISB 000F93                                  _TRISC 000F94  
                                _TRISD 000F95                                  _TRISE 000F96  
                        __CFG_PWRT$OFF 000000                          __CFG_WRT0$OFF 000000  
                        __CFG_WRT1$OFF 000000                          __CFG_WRT2$OFF 000000  
                        __CFG_WRT3$OFF 000000                        __end_of_lcdInst 3F34  
                      __end_of_handler 274E                         __CFG_EBTR0$OFF 000000  
                       __CFG_FCMEN$OFF 000000                         __CFG_EBTR1$OFF 000000  
                       __CFG_EBTR2$OFF 000000                         __CFG_EBTR3$OFF 000000  
                                _nRBPU 007F8F                          __CFG_WRTB$OFF 000000  
                        __CFG_WRTC$OFF 000000                          __CFG_WRTD$OFF 000000  
                      __end_of_readADC 3D50                        __end_of_initLCD 399C  
                       __CFG_EBTRB$OFF 000000                                  _debug 00E0  
                           i2isdigit@c 0003                                  _getIR 3870  
                      __end_of_loadRTC 334E                        __end_of_readMAG 390A  
                      __end_of_dpowers FBBE                                  _first 00E4  
                                _enter 0069                        __end_of_isdigit 3D7A  
                                _input 007D                                  _putch 3F14  
                                pclath 000FFA                                  tablat 000FF5  
                     __end_ofi2___wmul 3DC8                       __end_ofi2_getRTC 3534  
                  _log_count_pop_w_tab 00F2                                  status 000FD8  
                       __CFG_PBADEN$ON 000000                          i2printf@width 0028  
                     __end_ofi2_printf 18CC                     __size_ofi2___lwdiv 0052  
                   __size_ofi2___lwmod 0042                       __end_ofi2_strcpy 3AEC  
                          Loading@addr 00B3                       _count_can_no_lab 005D  
                 __size_of_EEPROM_read 0018                        __initialization 3822  
                         __end_of_Test 2F60                     __size_ofi2_lcdInst 000C  
                         __end_of_main 32C2                           __end_of_keys FBB4  
                         __end_of_sort 3E58                             i2printf@ap 0020  
                           i2printf@cp 001E                     __size_ofi2_isdigit 001E  
                               ??_Test 00C4    __size_of_change_state_to_menu_start 002C  
                      ??_machineConfig 0080                                 ??_main 00DA  
                               ??_sort 00B6                          __activetblptr 000003  
           updateServoPosition@my_time 0086             updateServoPosition@time_us 0080  
                           i2strcpy@cp 0005                             i2strcpy@to 0001  
                    ?_I2C_Master_Start 0001                    EEPROM_write@address 00AB  
               __size_ofi2_EEPROM_read 0016                      ?_I2C_Master_Write 0081  
                               ?_getIR 0001                     ??_I2C_Master_Start 0081  
                               _ADCON0 000FC2                                 _ADCON1 000FC1  
                   ??_I2C_Master_Write 0083                                 _ADCON2 000FC0  
                               STR_100 FC46                                 STR_101 FC68  
                               STR_102 FEB0                                 STR_103 FE92  
                               STR_104 FE83                                 STR_105 FFB5  
                               _ADRESH 000FC4                                 _EEADRH 000FAA  
                               _ADRESL 000FC3                                 _EEDATA 000FA8  
                               _EECON2 000FA7                       ___awdiv@dividend 0086  
                      i2lcdNibble@data 0002                                 ?_putch 0001  
               __size_of_initSortTimer 00AA                        i2lcdNibble@temp 0001  
            i2_change_state_to_menu_12 3B1C              i2_change_state_to_menu_22 3AEC  
                               _INT1IE 007F83                                 _INT1IF 007F80  
                               _CVRCON 000FB5                                 i2l1125 1738  
                               i2l1572 3818                                 i2l1582 39D4  
                               i2l5301 1842                                 i2l5311 18A8  
                               i2l5231 16C2                                 i2l5215 1648  
                               i2l5207 1620                                 i2l5305 1854  
                               i2l5225 16A0                                 i2l5217 1652  
                               i2l5241 1702                                 i2l5313 18B0  
                               i2l5155 34FA                                 i2l5307 185A  
                               i2l5235 16EC                                 i2l5227 16AA  
                               i2l5219 1656                                 i2l7011 1C84  
                               i2l7003 1C68                                 i2l5165 3524  
                               i2l5253 1766                                 i2l5237 16FE  
                               i2l5229 16B0                                 i2l5317 3AC4  
                               i2l7101 1DE8                                 i2l5159 350A  
                               i2l5271 17B4                                 i2l5183 1568  
                               i2l5319 3ACC                                 i2l7031 1CDA  
                               i2l7023 1CB6                                 i2l7015 1C9A  
                               i2l7007 1C76                                 i2l5281 17F2  
                               i2l5257 177E                                 i2l5193 158C  
                               i2l5283 17FA                                 i2l5259 1782  
                               i2l5187 1578                                 i2l5507 2BE0  
                               i2l7051 1D28                                 i2l7043 1D04  
                               i2l7035 1CE8                                 i2l7027 1CC4  
                               i2l7019 1CA8                                 i2l5277 17CE  
                               i2l5189 1586                                 i2l4903 37E6  
                               i2l5295 1826                                 i2l5199 15BE  
                               i2l7071 1D76                                 i2l7063 1D5A  
                               i2l7055 1D36                                 i2l7047 1D1A  
                               i2l7039 1CF6                                 i2l4905 37EE  
                               i2l5297 182E                                 i2l5289 1810  
                               i2l5801 2376                                 i2l4915 380E  
                               i2l4907 37F2                                 i2l4931 39CA  
                               i2l4923 39AA                                 i2l5811 239C  
                               i2l5651 1F46                                 i2l5643 1EEE  
                               i2l7091 1DC4                                 i2l7083 1DA8  
                               i2l7075 1D84                                 i2l7067 1D68  
                               i2l7059 1D44                                 i2l4925 39B2  
                               i2l5821 23BE                                 i2l5805 2392  
                               i2l5661 1FB4                                 i2l5653 1F5C  
                               i2l5645 1F04                                 i2l5637 1E82  
                               i2l4927 39B6                                 i2l5495 2B9C  
                               i2l5815 23B0                                 i2l5751 22CA  
                               i2l5663 1FCA                                 i2l5655 1F72  
                               i2l5647 1F1A                                 i2l5671 2050  
                               i2l7095 1DDA                                 i2l7087 1DB6  
                               i2l7079 1D9A                                 i2l7407 2710  
                               i2l7265 2098                                 i2l5817 23B4  
                               i2l5761 22E8                                 i2l5665 1FE0  
                               i2l5657 1F88                                 i2l5649 1F30  
                               i2l7361 267A                                 i2l7275 2102  
                               i2l5499 2BAC                                 i2l5851 242C  
                               i2l5843 2408                                 i2l5835 23E4  
                               i2l5771 2306                                 i2l5763 22EE  
                               i2l5747 22B6                                 i2l5739 229C  
                               i2l5659 1F9E                                 i2l7347 265E  
                               i2l4869 3DE8                                 i2l4893 3E90  
                               i2l7285 21C4                                 i2l7269 20A8  
                               i2l5829 23D6                                 i2l5765 22F4  
                               i2l5749 22C6                                 i2l5757 22D4  
                               i2l5669 1FF6                                 i2l5847 241A  
                               i2l5839 23F6                                 i2l5767 22FA  
                               i2l5775 230C                                 i2l7383 26C4  
                               i2l5769 2300                                 i2l5857 2436  
                               i2l7641 1E28                                 i2l7385 26C6  
                               i2l5795 2368                                 i2l5787 2350  
                               i2l7643 1E44                                 i2l7647 2324  
                               i2l7639 1E06                                 i2l7649 2340  
                               i2l6953 1BC6                                 i2l6971 1C04  
                               i2l6963 1BE8                                 i2l6955 1BCC  
                               i2l6991 1C3E                                 i2l6983 1C20  
                               i2l6967 1BF6                                 i2l6959 1BDA  
                               i2l6995 1C4C                                 i2l6987 1C2E  
                               i2l6979 1C12                                 i2l6999 1C5A  
                               _OSCCON 000FD3                                 _TMR0IE 007F95  
                               _TMR0IF 007F92                              ??i2_putch 0003  
                               _TMR1IE 007CE8                                 _TMR1IF 007CF0  
                               _TMR2IE 007CE9                                 _TMR3IE 007D01  
                               _TMR3IF 007D09                                 _TMR0ON 007EAF  
                               _TMR1ON 007E68                                 _TMR3ON 007D88  
                               _SSPADD 000FC8                                 _TRISC3 007CA3  
                               _TRISC4 007CA4                                 _SSPBUF 000FC9  
                            ??_Loading 00B1                         __CFG_XINST$OFF 000000  
                     ID@sensor_outputs 0088                       __end_of_dispLogs 3E36  
                          ?i2_printRTC 0001                       retrieveLog@byte1 000B  
                     retrieveLog@byte2 000C                       retrieveLog@byte3 000D  
                 __end_of_Distribution 29BE                                 ___wmul 3A84  
                            ??___awdiv 008A                         __CFG_STVREN$ON 000000  
                            ??___awmod 0084                            logRun@byte1 00B2  
                          logRun@byte2 00B3                            logRun@byte3 00B4  
                               _getRTC 334E                              ??___lldiv 0088  
                            ??___lwdiv 0084                              ??___lwmod 008B  
                     ??_printSortTimer 002A                       __end_of_initTime 3E7A  
                               _initUI 3DEE                                 _readIR 390A  
                               _logRun 274E                                 clear_0 3848  
                               clear_1 3854                                 clear_2 3860  
                     ___awdiv@quotient 008C                        ___awmod@divisor 0082  
                           _PortTestA5 3EF0                        ___awmod@counter 0084  
                            ??_lcdInst 0082                                 _printf 1126  
                            ??_handler 004B                __size_of_initGlobalVars 006A  
                         ?_retrieveLog 0007                                 _strcpy 3A4E  
                            ??_readADC 0080                              ??_initLCD 0083  
                            ??_loadRTC 0095                              ??_readMAG 0082  
 __end_ofi2_change_state_to_menu_start 3DA2  __size_ofi2_change_state_to_menu_start 0028  
         i2_change_state_to_menu_start 3D7A                              ??_isdigit 0080  
                    __end_ofi2___lwdiv 3822                       __end_of_printRTC 1B96  
                         __mediumconst FBA2                      __end_ofi2___lwmod 39DE  
                               tblptrh 000FF7                                 tblptrl 000FF6  
                               tblptru 000FF8                   _log_count_pop_no_tab 00F0  
                __end_of_algorithmTest 2E9C                      __end_ofi2_lcdInst 3F4C  
                    __end_ofi2_isdigit 3E98                             __accesstop 0080  
              __end_of__initialization 3866                          ?_inputHandler 002A  
                        ___rparam_used 000001                printSortTimer@start_sec 003D  
                __size_of_actuatorTest 086E                          i2_EEPROM_read 3EC6  
                         Loading@byte1 00B5                     i2___lwmod@dividend 0001  
                       __pcstackCOMRAM 0001                  __size_of_EEPROM_write 00E8  
                         __pidataBANK1 3F60                          __end_of_getIR 38BE  
                          i2printRTC@i 0041                          _initSortTimer 30DA  
          __end_of_updateServoPosition 34C2                          __end_of_putch 3F24  
                          i2printf@len 0022                            i2printf@val 0024  
                           __end_of_ID 2ADE                             __end_of_UI 08B8  
                   printSortTimer@hour 002D                              ?i2___wmul 0001  
                   __size_of_lcdNibble 0068                              ?i2_getRTC 0001  
                          i2putch@data 0003                  printSortTimer@curTime 002F  
   __end_of_change_state_to_menu_start 3D24          ?i2_change_state_to_menu_start 0001  
           _change_state_to_menu_start 3CF8                  printSortTimer@cur_sec 003F  
                            ?i2_printf 000D                                ??_getIR 0086  
                            ?i2_strcpy 0001                       _count_pop_no_tab 0061  
                  __size_ofi2_printRTC 0236                                ??_putch 0082  
                         _actuatorTest 08B8                             __pbssBANK0 00DA  
                           __pbssBANK1 0100                           ?_stopSignals 0001  
                       ??_inputHandler 002C                           _EEPROM_write 2BF8  
                              UI@F3220 012D               ?_change_state_to_menu_11 0001  
             ?_change_state_to_menu_12 0001               ?_change_state_to_menu_22 0001  
             ?_change_state_to_menu_23 0001                         ?i2_EEPROM_read 0001  
             ?_change_state_to_logs_11 0001               ?_change_state_to_logs_12 0001  
             ?_change_state_to_logs_22 0001               ?_change_state_to_logs_23 0001  
             ?_change_state_to_logs_33 0001               ?_change_state_to_logs_34 0001  
                    printRTC@RTC_month 00BC                           ?i2_lcdNibble 0001  
                              UI@i_411 00CA                                UI@i_412 00CB  
                              UI@i_430 00CC                                UI@i_431 00CD  
                              UI@i_408 00C9                                UI@i_442 00D2  
                              UI@i_434 00CE                                UI@i_443 00D3  
                              UI@i_435 00CF                                UI@i_446 00D4  
                              UI@i_438 00D0                                UI@i_447 00D5  
                              UI@i_439 00D1                         ?_initSortTimer 0001  
                              ?___wmul 0080                                ?_getRTC 0001  
                              ?_initUI 0001                                ?_readIR 0001  
                              ?_logRun 0001               updateServoPosition@timer 0082  
                              UI@month 00D6                            ?_PortTestA5 0001  
                              ?_printf 008E                                _UI$2145 00C6  
                              ?_strcpy 0080                             ??i2___wmul 0005  
                           ??i2_getRTC 0004                             ??i2_printf 0019  
                           ??i2_strcpy 0005                              ?_dispLogs 0012  
                              _SSPCON1 000FC6                                _SSPCON2 000FC5  
                              _SSPSTAT 000FC7                                i2_putch 3F34  
                            ?_initTime 0080                        _f_loadingNewCan 00E2  
                      i2printRTC@month 003D                  __size_of_Distribution 0134  
          __size_ofi2_I2C_Master_Start 0008                      __end_of_lcdNibble 3606  
                              _Loading 2CE0            __size_ofi2_I2C_Master_Write 000A  
                     EEPROM_write@data 00AD                                __Hparam 0000  
                              __Lparam 0000     __size_ofi2_change_state_to_menu_12 0030  
   __size_ofi2_change_state_to_menu_22 0030                              ?_printRTC 0001  
                              ___awdiv 2F60                                ___awmod 3184  
                           _initServos 36C8                                ___lldiv 301E  
                      __size_of___wmul 0036                                ___lwdiv 33D4  
                              ___lwmod 3606                        __size_of_getRTC 0086  
                      printSortTimer@i 0049                              _CMCONbits 000FB4  
                    retrieveLog@logNum 0007                           logRun@byte11 00B6  
                      __size_of_initUI 0024                        __size_of_readIR 004C  
                              __pcinit 3822                   i2EEPROM_read@address 0001  
                      __size_of_logRun 013C                           logRun@byte_i 00B5  
                              __ramtop 1000                         _initGlobalVars 3534  
                              _lcdInst 3F24                                _handler 0008  
                              __ptext0 3226                                __ptext1 3EB0  
                              __ptext2 3E36                                __ptext3 2CE0  
                              __ptext4 30DA                                __ptext5 36C8  
                              __ptext6 3534                                __ptext7 3870  
                              __ptext8 29BE                                __ptext9 288A  
                      __size_of_printf 0438                                _readADC 3D24  
                      __size_of_strcpy 0036                                _initLCD 3956  
                              _cur_can 0065                                _loadRTC 32C2  
                              _readMAG 38BE                                _dpowers FBB4  
                   actuatorTest@i_1510 00AF                     actuatorTest@i_1512 00B0  
                   actuatorTest@i_1521 00B6                     actuatorTest@i_1513 00B1  
                   actuatorTest@i_1522 00B7                     actuatorTest@i_1531 00BC  
                   actuatorTest@i_1515 00B2                     actuatorTest@i_1532 00BD  
                   actuatorTest@i_1524 00B8                     actuatorTest@i_1516 00B3  
                   actuatorTest@i_1541 00C2                     actuatorTest@i_1525 00B9  
                   actuatorTest@i_1509 00AE                     actuatorTest@i_1542 00C3  
                   actuatorTest@i_1534 00BE                     actuatorTest@i_1518 00B4  
                   actuatorTest@i_1535 00BF                     actuatorTest@i_1519 00B5  
                   actuatorTest@i_1528 00BA                     actuatorTest@i_1529 00BB  
                   actuatorTest@i_1538 00C0                     actuatorTest@i_1539 00C1  
                              _isdigit 3D50                       ___awmod@dividend 0080  
                              getRTC@i 0083                   __size_of_retrieveLog 011A  
             __size_of_I2C_Master_Init 0060               __size_of_I2C_Master_Read 002E  
                        _log_startTime 0100               __size_of_I2C_Master_Wait 0014  
             __size_of_I2C_Master_Stop 0008                             ??_dispLogs 0014  
                         _Distribution 288A                         __pintcode_body 25F0  
                 end_of_initialization 3866                                logRun@i 00B7  
                           ??_initTime 0086                        ??i2_EEPROM_read 0003  
                              int_func 25F0                    i2___wmul@multiplier 0001  
                        ??_EEPROM_read 0082                    __size_of_PortTestA5 0012  
            __size_of_I2C_Master_Start 0008              __size_of_I2C_Master_Write 000A  
                      ___lldiv@divisor 0084                        ___lldiv@counter 008C  
                      ??_initSortTimer 0085                                printf@c 00A8  
                         ??i2_printRTC 002A                                printf@f 008E  
                           ??_printRTC 00AB                       I2C_Master_Init@c 008D  
                     I2C_Master_Read@a 0081                                postdec1 000FE5  
                              postdec2 000FDD                                postinc0 000FEE  
                              postinc2 000FDE                 __end_of_initGlobalVars 359E  
                           _sensorTest 2464                             _servoTimes 011C  
                            _PORTAbits 000F80                              _PORTBbits 000F81  
                 __end_of_inputHandler 2464                  __end_of_machineConfig 377A  
                           _updateMenu 1B96                      i2_I2C_Master_Read 3DC8  
                            _IR_signal 00DA                      i2_I2C_Master_Wait 3F02  
                    i2_I2C_Master_Stop 3F78                      i2___lwdiv@divisor 0008  
                      _log_count_total 00F4                              i2___lwdiv 37D0  
                            i2___lwmod 399C                      i2___lwdiv@counter 000C  
                   ?i2_I2C_Master_Read 0001                     ?i2_I2C_Master_Wait 0001  
                   __end_ofi2_printRTC 208C                     ?i2_I2C_Master_Stop 0001  
                        actuatorTest@i 00AD           ??_change_state_to_menu_start 00C4  
                            i2_lcdInst 3F40                             _total_time 00FA  
                          printf@width 00A9                   __size_of_stopSignals 0016  
                  ??i2_I2C_Master_Read 0002                              i2_isdigit 3E7A  
                  ??i2_I2C_Master_Wait 0001                    ??i2_I2C_Master_Stop 0002  
                            i2getRTC@i 0004                    __end_of_EEPROM_read 3EB0  
                          ?_initServos 0001                        ?_initGlobalVars 0001  
                       __end_of___wmul 3ABA                         __end_of_getRTC 33D4  
                 __size_ofi2_lcdNibble 0056                          EEPROM_write@i 00AF  
                        i2lcdInst@data 0003                         __end_of_initUI 3E12  
                       __end_of_readIR 3956                         __end_of_logRun 288A  
                     i2___wmul@product 0005                         __end_of_printf 155E  
                         i2printf@flag 0026                         __end_of_strcpy 3A84  
            __end_ofi2_I2C_Master_Read 3DEE              __end_ofi2_I2C_Master_Wait 3F14  
                         i2printf@prec 001D                    start_initialization 3822  
            __end_ofi2_I2C_Master_Stop 3F80                             readMAG@res 0084  
                    __size_ofi2___wmul 0026                        _count_can_w_lab 005F  
          ?_change_state_to_menu_start 0001                      __size_ofi2_getRTC 0072  
                            i2printf@c 0027                              i2printf@f 000D  
                   EEPROM_write@i_1310 00B0                  i2I2C_Master_Read@temp 0003  
                           ?i2___lwdiv 0006                             ?i2___lwmod 0001  
                    __size_ofi2_printf 036E                      __size_ofi2_strcpy 0032  
                    ??_I2C_Master_Init 0091                      ??_I2C_Master_Read 0081  
                    ??_I2C_Master_Wait 0080                             ?i2_lcdInst 0001  
                    ??_I2C_Master_Stop 0081                       __CFG_OSC$INTIO67 000000  
                           ?i2_isdigit 0001                             initTime@DD 0083  
                           initTime@MM 0084                             initTime@YY 0085  
                      retrieveLog@addr 0010                             logRun@addr 00B9  
                             ??___wmul 0084                               ??_getRTC 0083  
               __size_of_algorithmTest 00D6                            ?_sensorTest 0001  
                          __pdataBANK1 012D                       __CFG_LPT1OSC$OFF 000000  
                             ??_initUI 00C4                               ??_readIR 0082  
                             ??_logRun 00B1                           ??_PortTestA5 0080  
               printSortTimer@timeDiff 0047       __size_of_change_state_to_menu_11 0030  
     __size_of_change_state_to_menu_12 0038       __size_of_change_state_to_menu_22 0038  
     __size_of_change_state_to_menu_23 0030                               ??_printf 009A  
     __size_of_change_state_to_logs_11 0030       __size_of_change_state_to_logs_12 0030  
     __size_of_change_state_to_logs_22 0030       __size_of_change_state_to_logs_23 002E  
     __size_of_change_state_to_logs_33 0030       __size_of_change_state_to_logs_34 0030  
                             ??_strcpy 0084                    _printSortTimer$2265 0045  
                          __pbssCOMRAM 005B           __size_of_updateServoPosition 0076  
                          ?_updateMenu 0001                          __pcstackBANK0 0080  
              __size_of_printSortTimer 01F2                      i2___lwmod@divisor 0003  
                    i2___lwmod@counter 0005                           _isdigit$1792 0081  
                       initSortTimer@i 0088                      printSortTimer@min 0041  
                    printSortTimer@sec 0043                    __size_of_initServos 005A  
                    __size_of_dispLogs 0024                       printRTC@INT_time 00AE  
                         i2strcpy@from 0003                               ?i2_putch 0001  
                      _count_pop_w_tab 0063                            _EEPROM_read 3E98  
                   __end_of_PortTestA5 3F02                       _I2C_Master_Start 3F70  
                            _f_lastCan 0071                               ?_Loading 0001  
                  i2I2C_Master_Write@d 0002                       _I2C_Master_Write 3F4C  
                    __size_of_initTime 0022                       ___lwdiv@dividend 0080  
                    __CFG_CCP2MX$PORTC 000000                              __pintcode 0008  
                        __pmediumconst FBA2                              _lcdNibble 359E  
                __size_of_inputHandler 01E6                               ?___awdiv 0086  
                             ?___awmod 0080                               ?___lldiv 0080  
                             ?___lwdiv 0080                               ?___lwmod 0087  
                    __size_of_printRTC 02CA                               ?_lcdInst 0001  
                             ?_handler 0001                               ?_readADC 0001  
                             ?_initLCD 0001                               ?_loadRTC 0001  
                             ?_readMAG 0001                               ?_isdigit 0001  
           __size_ofi2_I2C_Master_Read 0026             __size_ofi2_I2C_Master_Wait 0012  
           __size_ofi2_I2C_Master_Stop 0008                              _firstboot 0073  
                            _cur_state 00DE                       ___lwdiv@quotient 0084  
                       __size_of_getIR 004E                          _algorithmTest 2DC6  
                          ??i2___lwdiv 000A                            ??i2___lwmod 0005  
                       __size_of_putch 0010                            __size_of_ID 0120  
                          __size_of_UI 08A6                    __size_of_sensorTest 018C  
           __end_ofi2_I2C_Master_Start 3F88             __end_ofi2_I2C_Master_Write 3F60  
                          ??i2_lcdInst 0003                         ___wmul@product 0084  
                             _LATAbits 000F89                               _LATCbits 000F8B  
                             _LATDbits 000F8C                           _inputHandler 227E  
                          ??i2_isdigit 0001                               i2u336_40 3DE6  
                             i2u432_40 1EE4                               _PIR2bits 000FA1  
                             i2u630_40 21BE                               i2u393_40 16E4  
                             i2u393_47 16DA                               i2u730_47 3792  
                             i2u731_47 379C                               i2u732_47 37BE  
                             i2u389_40 1684                               i2u733_47 37C8  
                             i2u389_47 167A                               i2u729_47 22BC  
                  __size_of_updateMenu 02C0                         _log_completion 00EA  
                     __CFG_WDTPS$32768 000000                             ?_lcdNibble 0001  
                            _was_low_1 0079                              _was_low_3 007B  
                        ??_retrieveLog 0009                             _ADCON0bits 000FC2  
                    ___wmul@multiplier 0080                              _startTime 010E  
                             i2___wmul 3DA2                          lcdNibble@data 0081  
                             i2_getRTC 34C2                             printf@flag 00A7  
                        lcdNibble@temp 0080                             printf@prec 009E  
                             i2_printf 155E                               i2_strcpy 3ABA  
                       ?_algorithmTest 0001                    I2C_Master_Read@temp 0082  
                            copy_data0 3836                              readIR@res 0084  
                     __size_ofi2_putch 000C                             _EECON1bits 000FA6  
                __end_ofi2_EEPROM_read 3EDC                            _count_total 00FE  
                     ??_initGlobalVars 0080                               __Hrparam 0000  
                     __size_of_Loading 00E6                              initTime@h 0081  
                            initTime@m 0080                              initTime@s 0086  
                            initTime@w 0082                               __Lrparam 0000  
                   __CFG_BOREN$SBORDIS 000000                              logRun@num 00B1  
                __end_of_initSortTimer 3184                           ??_initServos 0088  
                     __size_of___awdiv 00BE                       __size_of___awmod 00A2  
              _change_state_to_menu_11 3B7C             ?i2_change_state_to_menu_12 0001  
              _change_state_to_menu_12 3A16             ?i2_change_state_to_menu_22 0001  
              _change_state_to_menu_22 39DE                _change_state_to_menu_23 3B4C  
                i2___wmul@multiplicand 0003                       __size_of___lldiv 00BC  
                     __size_of___lwdiv 0078                _change_state_to_logs_11 3C6C  
              _change_state_to_logs_12 3C3C                _change_state_to_logs_22 3C0C  
              _change_state_to_logs_23 3CCA                _change_state_to_logs_33 3BDC  
              _change_state_to_logs_34 3BAC                       __size_of___lwmod 0062  
                       readADC@channel 0081                     i2I2C_Master_Read@a 0002  
                     __size_of_lcdInst 0010                       __size_of_handler 2746  
                      _I2C_Master_Init 3668                       __size_of_readADC 002C  
                      _I2C_Master_Read 3C9C                       __size_of_initLCD 0046  
                         _f_ID_receive 006B                       __size_of_loadRTC 008C  
                     __size_of_readMAG 004C                        _I2C_Master_Wait 3EDC  
                      _I2C_Master_Stop 3F68                       __size_of_isdigit 002A  
                       _printSortTimer 208C                        ___lwdiv@divisor 0082  
                      ___lwdiv@counter 0086                    __end_of_retrieveLog 2BF8  
                             __ptext10 3722                               __ptext11 274E  
                             __ptext20 3956                               __ptext12 2BF8  
                             __ptext21 0012                               __ptext13 3E98  
                             __ptext30 39DE                               __ptext22 18CC  
                             __ptext14 3DEE                               __ptext31 3A16  
                             __ptext23 3A4E                               __ptext15 32C2  
                             __ptext40 08B8                               __ptext32 3184  
                             __ptext24 334E                               __ptext16 3668  
                             __ptext41 344C                               __ptext33 2F60  
                             __ptext25 3F4C                               __ptext17 301E  
                             __ptext50 3EF0                               __ptext42 1126  
                             __ptext34 2E9C                               __ptext26 3F68  
                             __ptext18 3CF8                               __ptext43 3F14  
                             __ptext35 2464                               __ptext27 3F70  
                             __ptext19 3E58                               __ptext60 3B7C  
                             __ptext52 1B96                               __ptext44 3D50  
                             __ptext36 38BE                               __ptext28 3C9C  
                             __ptext61 3BAC                               __ptext53 3D7A  
                             __ptext45 3A84                               __ptext37 390A  
                             __ptext29 3EDC                               __ptext70 208C  
                             __ptext62 3BDC                               __ptext54 1E56  
                             __ptext46 3606                               __ptext38 3D24  
                             __ptext71 155E                               __ptext63 3CCA  
                             __ptext55 3ABA                               __ptext47 33D4  
                             __ptext39 2DC6                               __ptext80 3F56  
                             __ptext72 3F34                               __ptext64 3C0C  
                             __ptext56 227E                               __ptext48 3F24  
                             __ptext81 3F78                               __ptext73 3E7A  
                             __ptext65 3C3C                               __ptext57 3AEC  
                             __ptext49 359E                               __ptext82 3F80  
                             __ptext74 3DA2                               __ptext66 3C6C  
                             __ptext58 3B1C                               __ptext83 3DC8  
                             __ptext75 399C                               __ptext67 3E12  
                             __ptext59 3B4C                               __ptext84 3F02  
                             __ptext76 37D0                               __ptext68 2ADE  
                             __ptext77 3F40                               __ptext69 3EC6  
                             __ptext78 377A                               __ptext79 34C2  
                             _dispLogs 3E12                          ?_actuatorTest 0001  
                        ??_stopSignals 0080                             strcpy@from 0082  
                       i2_isdigit$1792 0002                     __end_of_initServos 3722  
                        __size_of_Test 00C4                          ?_EEPROM_write 00AB  
                             _initTime 3E58                          __size_of_main 009C  
                        __size_of_sort 0022         ??i2_change_state_to_menu_start 0043  
                             _logstate 00F8                    _updateServoPosition 344C  
               __size_of_machineConfig 0058                          ??i2_lcdNibble 0001  
                             _printRTC 18CC                            ??_lcdNibble 0080  
                            printRTC@i 00C2                               int$flags 007E  
                         ??_sensorTest 00AB                         _log_total_time 00F6  
                   _f_can_coming_to_ID 006D                              printf@len 00A3  
                            printf@val 00A5      __end_ofi2_change_state_to_menu_12 3B4C  
    __end_ofi2_change_state_to_menu_22 3B1C                               loadRTC@i 0096  
               __end_of_printSortTimer 227E                              putch@data 0082  
             __end_of_I2C_Master_Start 3F78                            _OSCTUNEbits 000F9B  
             __end_of_I2C_Master_Write 3F56                             _INTCONbits 000FF2  
                 ?_updateServoPosition 0080                           ??_updateMenu 0043  
                      ??_algorithmTest 00AB                             _MAG_signal 00DC  
                             isdigit@c 0082                         ??_actuatorTest 00AB  
                             intlevel2 0000                         ??_EEPROM_write 00AE  
                   __end_of_sensorTest 25F0                       ___lwmod@dividend 0087  
                     ___lldiv@dividend 0080                           ?_EEPROM_read 0080  
                  __end_of_stopSignals 3EC6              ??_change_state_to_menu_11 002A  
            ??_change_state_to_menu_12 00AB              ??_change_state_to_menu_22 00AB  
            ??_change_state_to_menu_23 002A              ??_change_state_to_logs_11 002A  
            ??_change_state_to_logs_12 002A              ??_change_state_to_logs_22 002A  
            ??_change_state_to_logs_23 002A              ??_change_state_to_logs_33 002A  
            ??_change_state_to_logs_34 002A                               printf@ap 00A1  
                             printf@cp 009F                     __end_of_updateMenu 1E56  
              __end_of_I2C_Master_Init 36C8                __end_of_I2C_Master_Read 3CCA  
              __end_of_I2C_Master_Wait 3EF0                __end_of_I2C_Master_Stop 3F70  
                        printRTC@F3211 0131                            lcdInst@data 0082  
                         retrieveLog@i 000E                            _retrieveLog 2ADE  
                  __end_ofi2_lcdNibble 37D0                  ??_updateServoPosition 0084  
                      ?_printSortTimer 0001                       ___lldiv@quotient 0088  
                    I2C_Master_Write@d 0081                        ___lwmod@divisor 0089  
                    _f_can_distributed 012B                               strcpy@cp 0084  
                             strcpy@to 0080                          _machineConfig 3722  
                      ___lwmod@counter 008B                          printRTC@month 00BE  
                        ?_Distribution 0001                          _machine_state 00FC  
                        dispLogs@myLog 0012                     i2printRTC@INT_time 002D  
