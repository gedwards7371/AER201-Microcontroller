

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Sat Mar 25 12:01:48 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	text45,global,reloc=2,class=CODE,delta=1
    60                           	psect	text46,global,reloc=2,class=CODE,delta=1
    61                           	psect	text47,global,reloc=2,class=CODE,delta=1
    62                           	psect	text48,global,reloc=2,class=CODE,delta=1
    63                           	psect	text49,global,reloc=2,class=CODE,delta=1
    64                           	psect	text50,global,reloc=2,class=CODE,delta=1
    65                           	psect	text51,global,reloc=2,class=CODE,delta=1
    66                           	psect	text52,global,reloc=2,class=CODE,delta=1
    67                           	psect	text53,global,reloc=2,class=CODE,delta=1
    68                           	psect	text54,global,reloc=2,class=CODE,delta=1
    69                           	psect	text55,global,reloc=2,class=CODE,delta=1
    70                           	psect	text56,global,reloc=2,class=CODE,delta=1
    71                           	psect	text57,global,reloc=2,class=CODE,delta=1
    72                           	psect	text58,global,reloc=2,class=CODE,delta=1
    73                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    74                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    75                           	psect	text60,global,reloc=2,class=CODE,delta=1
    76                           	psect	text61,global,reloc=2,class=CODE,delta=1
    77                           	psect	text62,global,reloc=2,class=CODE,delta=1
    78                           	psect	text63,global,reloc=2,class=CODE,delta=1
    79                           	psect	text64,global,reloc=2,class=CODE,delta=1
    80                           	psect	text65,global,reloc=2,class=CODE,delta=1
    81                           	psect	text66,global,reloc=2,class=CODE,delta=1
    82                           	psect	text67,global,reloc=2,class=CODE,delta=1
    83                           	psect	text68,global,reloc=2,class=CODE,delta=1
    84                           	psect	text69,global,reloc=2,class=CODE,delta=1
    85                           	psect	text70,global,reloc=2,class=CODE,delta=1
    86                           	psect	text71,global,reloc=2,class=CODE,delta=1
    87                           	psect	text72,global,reloc=2,class=CODE,delta=1
    88                           	psect	text73,global,reloc=2,class=CODE,delta=1
    89                           	psect	text74,global,reloc=2,class=CODE,delta=1
    90                           	psect	text75,global,reloc=2,class=CODE,delta=1
    91                           	psect	text76,global,reloc=2,class=CODE,delta=1
    92                           	psect	text77,global,reloc=2,class=CODE,delta=1
    93                           	psect	text78,global,reloc=2,class=CODE,delta=1
    94                           	psect	text79,global,reloc=2,class=CODE,delta=1
    95                           	psect	text80,global,reloc=2,class=CODE,delta=1
    96                           	psect	text81,global,reloc=2,class=CODE,delta=1
    97                           	psect	text82,global,reloc=2,class=CODE,delta=1
    98                           	psect	text83,global,reloc=2,class=CODE,delta=1
    99                           	psect	text84,global,reloc=2,class=CODE,delta=1
   100                           	psect	text85,global,reloc=2,class=CODE,delta=1
   101                           	psect	text86,global,reloc=2,class=CODE,delta=1
   102                           	psect	text87,global,reloc=2,class=CODE,delta=1
   103                           	psect	text88,global,reloc=2,class=CODE,delta=1
   104                           	psect	text89,global,reloc=2,class=CODE,delta=1
   105                           	psect	text90,global,reloc=2,class=CODE,delta=1
   106                           	psect	text91,global,reloc=2,class=CODE,delta=1
   107                           	psect	text92,global,reloc=2,class=CODE,delta=1
   108                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   109                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   110                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   111  0000                     
   112                           ; Version 1.40
   113                           ; Generated 01/12/2016 GMT
   114                           ; 
   115                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
   116                           ; All rights reserved.
   117                           ; 
   118                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   119                           ; 
   120                           ; Redistribution and use in source and binary forms, with or without modification, are
   121                           ; permitted provided that the following conditions are met:
   122                           ; 
   123                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   124                           ;        conditions and the following disclaimer.
   125                           ; 
   126                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   127                           ;        of conditions and the following disclaimer in the documentation and/or other
   128                           ;        materials provided with the distribution.
   129                           ; 
   130                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   131                           ;        software without specific prior written permission.
   132                           ; 
   133                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   134                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   135                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   136                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   137                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   138                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   139                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   140                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   141                           ; 
   142                           ; 
   143                           ; Code-generator required, PIC18F4620 Definitions
   144                           ; 
   145                           ; SFR Addresses
   146  0000                     
   147                           	psect	idataBANK1
   148  0049F4                     __pidataBANK1:
   149                           	opt stack 0
   150                           
   151                           ;initializer for UI@F3225
   152  0049F4  4D                 	db	77
   153  0049F5  4D                 	db	77
   154  0049F6  4D                 	db	77
   155  0049F7  00                 	db	0
   156                           
   157                           ;initializer for printRTC@F3216
   158  0049F8  4D                 	db	77
   159  0049F9  4D                 	db	77
   160  0049FA  4D                 	db	77
   161  0049FB  00                 	db	0
   162                           
   163                           	psect	mediumconst
   164  00FB00                     __pmediumconst:
   165                           	opt stack 0
   166  00FB00  00                 	db	0
   167  00FB01                     _keys:
   168                           	opt stack 0
   169  00FB01  31                 	db	49
   170  00FB02  32                 	db	50
   171  00FB03  33                 	db	51
   172  00FB04  41                 	db	65
   173  00FB05  34                 	db	52
   174  00FB06  35                 	db	53
   175  00FB07  36                 	db	54
   176  00FB08  42                 	db	66
   177  00FB09  37                 	db	55
   178  00FB0A  38                 	db	56
   179  00FB0B  39                 	db	57
   180  00FB0C  43                 	db	67
   181  00FB0D  2A                 	db	42
   182  00FB0E  30                 	db	48
   183  00FB0F  23                 	db	35
   184  00FB10  44                 	db	68
   185  00FB11  00                 	db	0
   186  00FB12                     __end_of_keys:
   187                           	opt stack 0
   188  00FB12                     _dpowers:
   189                           	opt stack 0
   190  00FB12  0001               	dw	1
   191  00FB14  000A               	dw	10
   192  00FB16  0064               	dw	100
   193  00FB18  03E8               	dw	1000
   194  00FB1A  2710               	dw	10000
   195  00FB1C                     __end_of_dpowers:
   196                           	opt stack 0
   197  0000                     _ADCON0	set	4034
   198  0000                     _ADCON0bits	set	4034
   199  0000                     _ADCON1	set	4033
   200  0000                     _ADCON2	set	4032
   201  0000                     _ADRESH	set	4036
   202  0000                     _ADRESL	set	4035
   203  0000                     _CMCONbits	set	4020
   204  0000                     _CVRCON	set	4021
   205  0000                     _EEADR	set	4009
   206  0000                     _EEADRH	set	4010
   207  0000                     _EECON1bits	set	4006
   208  0000                     _EECON2	set	4007
   209  0000                     _EEDATA	set	4008
   210  0000                     _INTCONbits	set	4082
   211  0000                     _LATA	set	3977
   212  0000                     _LATAbits	set	3977
   213  0000                     _LATB	set	3978
   214  0000                     _LATC	set	3979
   215  0000                     _LATCbits	set	3979
   216  0000                     _LATD	set	3980
   217  0000                     _LATDbits	set	3980
   218  0000                     _LATE	set	3981
   219  0000                     _LATEbits	set	3981
   220  0000                     _OSCCON	set	4051
   221  0000                     _OSCTUNEbits	set	3995
   222  0000                     _PIR2bits	set	4001
   223  0000                     _PORTAbits	set	3968
   224  0000                     _PORTB	set	3969
   225  0000                     _PORTBbits	set	3969
   226  0000                     _SSPADD	set	4040
   227  0000                     _SSPBUF	set	4041
   228  0000                     _SSPCON1	set	4038
   229  0000                     _SSPCON2	set	4037
   230  0000                     _SSPSTAT	set	4039
   231  0000                     _T0CON	set	4053
   232  0000                     _T1CON	set	4045
   233  0000                     _T3CON	set	4017
   234  0000                     _TMR0H	set	4055
   235  0000                     _TMR0L	set	4054
   236  0000                     _TMR1H	set	4047
   237  0000                     _TMR1L	set	4046
   238  0000                     _TMR3H	set	4019
   239  0000                     _TMR3L	set	4018
   240  0000                     _TRISA	set	3986
   241  0000                     _TRISB	set	3987
   242  0000                     _TRISC	set	3988
   243  0000                     _TRISD	set	3989
   244  0000                     _TRISE	set	3990
   245  0000                     _ACKDT	set	32301
   246  0000                     _ACKEN	set	32300
   247  0000                     _ADIE	set	31982
   248  0000                     _INT1IE	set	32643
   249  0000                     _INT1IF	set	32640
   250  0000                     _PEIE	set	32662
   251  0000                     _PEN	set	32298
   252  0000                     _RCEN	set	32299
   253  0000                     _RSEN	set	32297
   254  0000                     _SEN	set	32296
   255  0000                     _TMR0IE	set	32661
   256  0000                     _TMR0IF	set	32658
   257  0000                     _TMR0ON	set	32431
   258  0000                     _TMR1IE	set	31976
   259  0000                     _TMR1IF	set	31984
   260  0000                     _TMR1ON	set	32360
   261  0000                     _TMR2IE	set	31977
   262  0000                     _TMR3IE	set	32001
   263  0000                     _TMR3IF	set	32009
   264  0000                     _TMR3ON	set	32136
   265  0000                     _TRISC3	set	31907
   266  0000                     _TRISC4	set	31908
   267  0000                     _nRBPU	set	32655
   268  00FB1C                     STR_21:
   269  00FB1C  25                 	db	37
   270  00FB1D  30                 	db	48	;'0'
   271  00FB1E  32                 	db	50	;'2'
   272  00FB1F  64                 	db	100	;'d'
   273  00FB20  25                 	db	37
   274  00FB21  73                 	db	115	;'s'
   275  00FB22  20                 	db	32
   276  00FB23  7C                 	db	124
   277  00FB24  20                 	db	32
   278  00FB25  25                 	db	37
   279  00FB26  30                 	db	48	;'0'
   280  00FB27  32                 	db	50	;'2'
   281  00FB28  64                 	db	100	;'d'
   282  00FB29  3A                 	db	58	;':'
   283  00FB2A  25                 	db	37
   284  00FB2B  30                 	db	48	;'0'
   285  00FB2C  32                 	db	50	;'2'
   286  00FB2D  64                 	db	100	;'d'
   287  00FB2E  3A                 	db	58	;':'
   288  00FB2F  25                 	db	37
   289  00FB30  30                 	db	48	;'0'
   290  00FB31  32                 	db	50	;'2'
   291  00FB32  64                 	db	100	;'d'
   292  00FB33  00                 	db	0
   293  00FB34                     STR_66:
   294  00FB34  28                 	db	40
   295  00FB35  64                 	db	100	;'d'
   296  00FB36  61                 	db	97	;'a'
   297  00FB37  74                 	db	116	;'t'
   298  00FB38  61                 	db	97	;'a'
   299  00FB39  3A                 	db	58	;':'
   300  00FB3A  20                 	db	32
   301  00FB3B  25                 	db	37
   302  00FB3C  75                 	db	117	;'u'
   303  00FB3D  2C                 	db	44
   304  00FB3E  20                 	db	32
   305  00FB3F  61                 	db	97	;'a'
   306  00FB40  64                 	db	100	;'d'
   307  00FB41  64                 	db	100	;'d'
   308  00FB42  72                 	db	114	;'r'
   309  00FB43  3A                 	db	58	;':'
   310  00FB44  20                 	db	32
   311  00FB45  25                 	db	37
   312  00FB46  75                 	db	117	;'u'
   313  00FB47  29                 	db	41
   314  00FB48  00                 	db	0
   315  00FB49                     STR_111:
   316  00FB49  44                 	db	68	;'D'
   317  00FB4A  20                 	db	32
   318  00FB4B  57                 	db	87	;'W'
   319  00FB4C  49                 	db	73	;'I'
   320  00FB4D  4C                 	db	76	;'L'
   321  00FB4E  4C                 	db	76	;'L'
   322  00FB4F  20                 	db	32
   323  00FB50  52                 	db	82	;'R'
   324  00FB51  45                 	db	69	;'E'
   325  00FB52  54                 	db	84	;'T'
   326  00FB53  55                 	db	85	;'U'
   327  00FB54  52                 	db	82	;'R'
   328  00FB55  4E                 	db	78	;'N'
   329  00FB56  20                 	db	32
   330  00FB57  20                 	db	32
   331  00FB58  20                 	db	32
   332  00FB59  20                 	db	32
   333  00FB5A  00                 	db	0
   334  00FB5B                     STR_112:
   335  00FB5B  4F                 	db	79	;'O'
   336  00FB5C  54                 	db	84	;'T'
   337  00FB5D  48                 	db	72	;'H'
   338  00FB5E  45                 	db	69	;'E'
   339  00FB5F  52                 	db	82	;'R'
   340  00FB60  20                 	db	32
   341  00FB61  53                 	db	83	;'S'
   342  00FB62  45                 	db	69	;'E'
   343  00FB63  54                 	db	84	;'T'
   344  00FB64  53                 	db	83	;'S'
   345  00FB65  20                 	db	32
   346  00FB66  52                 	db	82	;'R'
   347  00FB67  41                 	db	65	;'A'
   348  00FB68  35                 	db	53	;'5'
   349  00FB69  20                 	db	32
   350  00FB6A  20                 	db	32
   351  00FB6B  20                 	db	32
   352  00FB6C  00                 	db	0
   353  00FB6D                     STR_116:
   354  00FB6D  53                 	db	83	;'S'
   355  00FB6E  3A                 	db	58	;':'
   356  00FB6F  20                 	db	32
   357  00FB70  44                 	db	68	;'D'
   358  00FB71  20                 	db	32
   359  00FB72  57                 	db	87	;'W'
   360  00FB73  49                 	db	73	;'I'
   361  00FB74  4C                 	db	76	;'L'
   362  00FB75  4C                 	db	76	;'L'
   363  00FB76  20                 	db	32
   364  00FB77  52                 	db	82	;'R'
   365  00FB78  45                 	db	69	;'E'
   366  00FB79  54                 	db	84	;'T'
   367  00FB7A  55                 	db	85	;'U'
   368  00FB7B  52                 	db	82	;'R'
   369  00FB7C  4E                 	db	78	;'N'
   370  00FB7D  20                 	db	32
   371  00FB7E  00                 	db	0
   372  00FB7F                     STR_119:
   373  00FB7F  4F                 	db	79	;'O'
   374  00FB80  54                 	db	84	;'T'
   375  00FB81  48                 	db	72	;'H'
   376  00FB82  45                 	db	69	;'E'
   377  00FB83  52                 	db	82	;'R'
   378  00FB84  20                 	db	32
   379  00FB85  54                 	db	84	;'T'
   380  00FB86  4F                 	db	79	;'O'
   381  00FB87  47                 	db	71	;'G'
   382  00FB88  47                 	db	71	;'G'
   383  00FB89  4C                 	db	76	;'L'
   384  00FB8A  45                 	db	69	;'E'
   385  00FB8B  53                 	db	83	;'S'
   386  00FB8C  20                 	db	32
   387  00FB8D  43                 	db	67	;'C'
   388  00FB8E  41                 	db	65	;'A'
   389  00FB8F  4D                 	db	77	;'M'
   390  00FB90  00                 	db	0
   391  00FB91                     STR_3:
   392  00FB91  2D                 	db	45
   393  00FB92  2D                 	db	45
   394  00FB93  20                 	db	32
   395  00FB94  4C                 	db	76	;'L'
   396  00FB95  4F                 	db	79	;'O'
   397  00FB96  47                 	db	71	;'G'
   398  00FB97  20                 	db	32
   399  00FB98  25                 	db	37
   400  00FB99  32                 	db	50	;'2'
   401  00FB9A  64                 	db	100	;'d'
   402  00FB9B  20                 	db	32
   403  00FB9C  48                 	db	72	;'H'
   404  00FB9D  45                 	db	69	;'E'
   405  00FB9E  52                 	db	82	;'R'
   406  00FB9F  45                 	db	69	;'E'
   407  00FBA0  2D                 	db	45
   408  00FBA1  2D                 	db	45
   409  00FBA2  00                 	db	0
   410  00FBA3                     STR_1:
   411  00FBA3  52                 	db	82	;'R'
   412  00FBA4  45                 	db	69	;'E'
   413  00FBA5  53                 	db	83	;'S'
   414  00FBA6  55                 	db	85	;'U'
   415  00FBA7  4C                 	db	76	;'L'
   416  00FBA8  54                 	db	84	;'T'
   417  00FBA9  53                 	db	83	;'S'
   418  00FBAA  20                 	db	32
   419  00FBAB  49                 	db	73	;'I'
   420  00FBAC  4E                 	db	78	;'N'
   421  00FBAD  20                 	db	32
   422  00FBAE  4C                 	db	76	;'L'
   423  00FBAF  4F                 	db	79	;'O'
   424  00FBB0  47                 	db	71	;'G'
   425  00FBB1  20                 	db	32
   426  00FBB2  25                 	db	37
   427  00FBB3  64                 	db	100	;'d'
   428  00FBB4  00                 	db	0
   429  00FBB5                     STR_102:
   430  00FBB5  4D                 	db	77	;'M'
   431  00FBB6  49                 	db	73	;'I'
   432  00FBB7  44                 	db	68	;'D'
   433  00FBB8  20                 	db	32
   434  00FBB9  2D                 	db	45
   435  00FBBA  2D                 	db	45
   436  00FBBB  20                 	db	32
   437  00FBBC  32                 	db	50	;'2'
   438  00FBBD  73                 	db	115	;'s'
   439  00FBBE  20                 	db	32
   440  00FBBF  20                 	db	32
   441  00FBC0  20                 	db	32
   442  00FBC1  20                 	db	32
   443  00FBC2  20                 	db	32
   444  00FBC3  20                 	db	32
   445  00FBC4  20                 	db	32
   446  00FBC5  00                 	db	0
   447  00FBC6                     STR_105:
   448  00FBC6  44                 	db	68	;'D'
   449  00FBC7  52                 	db	82	;'R'
   450  00FBC8  4F                 	db	79	;'O'
   451  00FBC9  50                 	db	80	;'P'
   452  00FBCA  20                 	db	32
   453  00FBCB  2D                 	db	45
   454  00FBCC  2D                 	db	45
   455  00FBCD  20                 	db	32
   456  00FBCE  32                 	db	50	;'2'
   457  00FBCF  73                 	db	115	;'s'
   458  00FBD0  20                 	db	32
   459  00FBD1  20                 	db	32
   460  00FBD2  20                 	db	32
   461  00FBD3  20                 	db	32
   462  00FBD4  20                 	db	32
   463  00FBD5  20                 	db	32
   464  00FBD6  00                 	db	0
   465  00FBD7                     STR_99:
   466  00FBD7  4C                 	db	76	;'L'
   467  00FBD8  45                 	db	69	;'E'
   468  00FBD9  46                 	db	70	;'F'
   469  00FBDA  54                 	db	84	;'T'
   470  00FBDB  20                 	db	32
   471  00FBDC  2D                 	db	45
   472  00FBDD  2D                 	db	45
   473  00FBDE  20                 	db	32
   474  00FBDF  32                 	db	50	;'2'
   475  00FBE0  73                 	db	115	;'s'
   476  00FBE1  20                 	db	32
   477  00FBE2  20                 	db	32
   478  00FBE3  20                 	db	32
   479  00FBE4  20                 	db	32
   480  00FBE5  20                 	db	32
   481  00FBE6  20                 	db	32
   482  00FBE7  00                 	db	0
   483  00FBE8                     STR_104:
   484  00FBE8  4C                 	db	76	;'L'
   485  00FBE9  45                 	db	69	;'E'
   486  00FBEA  56                 	db	86	;'V'
   487  00FBEB  45                 	db	69	;'E'
   488  00FBEC  4C                 	db	76	;'L'
   489  00FBED  20                 	db	32
   490  00FBEE  2D                 	db	45
   491  00FBEF  2D                 	db	45
   492  00FBF0  20                 	db	32
   493  00FBF1  32                 	db	50	;'2'
   494  00FBF2  73                 	db	115	;'s'
   495  00FBF3  20                 	db	32
   496  00FBF4  20                 	db	32
   497  00FBF5  20                 	db	32
   498  00FBF6  20                 	db	32
   499  00FBF7  20                 	db	32
   500  00FBF8  00                 	db	0
   501  00FBF9                     STR_98:
   502  00FBF9  52                 	db	82	;'R'
   503  00FBFA  49                 	db	73	;'I'
   504  00FBFB  47                 	db	71	;'G'
   505  00FBFC  48                 	db	72	;'H'
   506  00FBFD  54                 	db	84	;'T'
   507  00FBFE  20                 	db	32
   508  00FBFF  2D                 	db	45
   509  00FC00  2D                 	db	45
   510  00FC01  20                 	db	32
   511  00FC02  32                 	db	50	;'2'
   512  00FC03  73                 	db	115	;'s'
   513  00FC04  20                 	db	32
   514  00FC05  20                 	db	32
   515  00FC06  20                 	db	32
   516  00FC07  20                 	db	32
   517  00FC08  20                 	db	32
   518  00FC09  00                 	db	0
   519  00FC0A                     STR_97:
   520  00FC0A  4D                 	db	77	;'M'
   521  00FC0B  49                 	db	73	;'I'
   522  00FC0C  44                 	db	68	;'D'
   523  00FC0D  44                 	db	68	;'D'
   524  00FC0E  4C                 	db	76	;'L'
   525  00FC0F  45                 	db	69	;'E'
   526  00FC10  20                 	db	32
   527  00FC11  2D                 	db	45
   528  00FC12  2D                 	db	45
   529  00FC13  20                 	db	32
   530  00FC14  32                 	db	50	;'2'
   531  00FC15  73                 	db	115	;'s'
   532  00FC16  20                 	db	32
   533  00FC17  20                 	db	32
   534  00FC18  20                 	db	32
   535  00FC19  20                 	db	32
   536  00FC1A  00                 	db	0
   537  00FC1B  44                 	db	68	;'D'
   538  00FC1C  20                 	db	32
   539  00FC1D  57                 	db	87	;'W'
   540  00FC1E  49                 	db	73	;'I'
   541  00FC1F  4C                 	db	76	;'L'
   542  00FC20  4C                 	db	76	;'L'
   543  00FC21  20                 	db	32
   544  00FC22  52                 	db	82	;'R'
   545  00FC23  45                 	db	69	;'E'
   546  00FC24  54                 	db	84	;'T'
   547  00FC25  55                 	db	85	;'U'
   548  00FC26  52                 	db	82	;'R'
   549  00FC27  4E                 	db	78	;'N'
   550  00FC28  20                 	db	32
   551  00FC29  20                 	db	32
   552  00FC2A  20                 	db	32
   553  00FC2B  00                 	db	0
   554  00FC2C                     STR_100:
   555  00FC2C  4D                 	db	77	;'M'
   556  00FC2D  49                 	db	73	;'I'
   557  00FC2E  44                 	db	68	;'D'
   558  00FC2F  2D                 	db	45
   559  00FC30  4C                 	db	76	;'L'
   560  00FC31  45                 	db	69	;'E'
   561  00FC32  46                 	db	70	;'F'
   562  00FC33  54                 	db	84	;'T'
   563  00FC34  20                 	db	32
   564  00FC35  2D                 	db	45
   565  00FC36  2D                 	db	45
   566  00FC37  20                 	db	32
   567  00FC38  32                 	db	50	;'2'
   568  00FC39  73                 	db	115	;'s'
   569  00FC3A  20                 	db	32
   570  00FC3B  20                 	db	32
   571  00FC3C  00                 	db	0
   572  00FC3D                     STR_101:
   573  00FC3D  4D                 	db	77	;'M'
   574  00FC3E  49                 	db	73	;'I'
   575  00FC3F  44                 	db	68	;'D'
   576  00FC40  2D                 	db	45
   577  00FC41  52                 	db	82	;'R'
   578  00FC42  49                 	db	73	;'I'
   579  00FC43  47                 	db	71	;'G'
   580  00FC44  48                 	db	72	;'H'
   581  00FC45  54                 	db	84	;'T'
   582  00FC46  20                 	db	32
   583  00FC47  2D                 	db	45
   584  00FC48  2D                 	db	45
   585  00FC49  20                 	db	32
   586  00FC4A  32                 	db	50	;'2'
   587  00FC4B  73                 	db	115	;'s'
   588  00FC4C  20                 	db	32
   589  00FC4D  00                 	db	0
   590  00FC4E  45                 	db	69	;'E'
   591  00FC4F  4C                 	db	76	;'L'
   592  00FC50  53                 	db	83	;'S'
   593  00FC51  45                 	db	69	;'E'
   594  00FC52  20                 	db	32
   595  00FC53  54                 	db	84	;'T'
   596  00FC54  4F                 	db	79	;'O'
   597  00FC55  47                 	db	71	;'G'
   598  00FC56  47                 	db	71	;'G'
   599  00FC57  4C                 	db	76	;'L'
   600  00FC58  45                 	db	69	;'E'
   601  00FC59  53                 	db	83	;'S'
   602  00FC5A  20                 	db	32
   603  00FC5B  52                 	db	82	;'R'
   604  00FC5C  41                 	db	65	;'A'
   605  00FC5D  35                 	db	53	;'5'
   606  00FC5E  00                 	db	0
   607  00FC5F                     STR_72:
   608  00FC5F  41                 	db	65	;'A'
   609  00FC60  4C                 	db	76	;'L'
   610  00FC61  47                 	db	71	;'G'
   611  00FC62  31                 	db	49	;'1'
   612  00FC63  3A                 	db	58	;':'
   613  00FC64  20                 	db	32
   614  00FC65  39                 	db	57	;'9'
   615  00FC66  20                 	db	32
   616  00FC67  50                 	db	80	;'P'
   617  00FC68  4F                 	db	79	;'O'
   618  00FC69  50                 	db	80	;'P'
   619  00FC6A  4E                 	db	78	;'N'
   620  00FC6B  4F                 	db	79	;'O'
   621  00FC6C  54                 	db	84	;'T'
   622  00FC6D  41                 	db	65	;'A'
   623  00FC6E  42                 	db	66	;'B'
   624  00FC6F  00                 	db	0
   625  00FC70                     STR_68:
   626  00FC70  31                 	db	49	;'1'
   627  00FC71  2E                 	db	46
   628  00FC72  41                 	db	65	;'A'
   629  00FC73  4C                 	db	76	;'L'
   630  00FC74  47                 	db	71	;'G'
   631  00FC75  7C                 	db	124
   632  00FC76  32                 	db	50	;'2'
   633  00FC77  2E                 	db	46
   634  00FC78  53                 	db	83	;'S'
   635  00FC79  4E                 	db	78	;'N'
   636  00FC7A  52                 	db	82	;'R'
   637  00FC7B  7C                 	db	124
   638  00FC7C  33                 	db	51	;'3'
   639  00FC7D  2E                 	db	46
   640  00FC7E  41                 	db	65	;'A'
   641  00FC7F  43                 	db	67	;'C'
   642  00FC80  00                 	db	0
   643  00FC81                     STR_92:
   644  00FC81  54                 	db	84	;'T'
   645  00FC82  53                 	db	83	;'S'
   646  00FC83  54                 	db	84	;'T'
   647  00FC84  3A                 	db	58	;':'
   648  00FC85  20                 	db	32
   649  00FC86  43                 	db	67	;'C'
   650  00FC87  4F                 	db	79	;'O'
   651  00FC88  4E                 	db	78	;'N'
   652  00FC89  44                 	db	68	;'D'
   653  00FC8A  20                 	db	32
   654  00FC8B  53                 	db	83	;'S'
   655  00FC8C  4F                 	db	79	;'O'
   656  00FC8D  4C                 	db	76	;'L'
   657  00FC8E  4E                 	db	78	;'N'
   658  00FC8F  27                 	db	39
   659  00FC90  44                 	db	68	;'D'
   660  00FC91  00                 	db	0
   661  00FC92                     STR_94:
   662  00FC92  54                 	db	84	;'T'
   663  00FC93  53                 	db	83	;'S'
   664  00FC94  54                 	db	84	;'T'
   665  00FC95  3A                 	db	58	;':'
   666  00FC96  20                 	db	32
   667  00FC97  50                 	db	80	;'P'
   668  00FC98  55                 	db	85	;'U'
   669  00FC99  53                 	db	83	;'S'
   670  00FC9A  48                 	db	72	;'H'
   671  00FC9B  20                 	db	32
   672  00FC9C  53                 	db	83	;'S'
   673  00FC9D  4F                 	db	79	;'O'
   674  00FC9E  4C                 	db	76	;'L'
   675  00FC9F  4E                 	db	78	;'N'
   676  00FCA0  27                 	db	39
   677  00FCA1  44                 	db	68	;'D'
   678  00FCA2  00                 	db	0
   679  00FCA3                     STR_69:
   680  00FCA3  34                 	db	52	;'4'
   681  00FCA4  2E                 	db	46
   682  00FCA5  48                 	db	72	;'H'
   683  00FCA6  49                 	db	73	;'I'
   684  00FCA7  7C                 	db	124
   685  00FCA8  35                 	db	53	;'5'
   686  00FCA9  2E                 	db	46
   687  00FCAA  54                 	db	84	;'T'
   688  00FCAB  4F                 	db	79	;'O'
   689  00FCAC  47                 	db	71	;'G'
   690  00FCAD  7C                 	db	124
   691  00FCAE  36                 	db	54	;'6'
   692  00FCAF  2E                 	db	46
   693  00FCB0  45                 	db	69	;'E'
   694  00FCB1  45                 	db	69	;'E'
   695  00FCB2  50                 	db	80	;'P'
   696  00FCB3  00                 	db	0
   697  00FCB4                     STR_110:
   698  00FCB4  54                 	db	84	;'T'
   699  00FCB5  53                 	db	83	;'S'
   700  00FCB6  54                 	db	84	;'T'
   701  00FCB7  3A                 	db	58	;':'
   702  00FCB8  20                 	db	32
   703  00FCB9  42                 	db	66	;'B'
   704  00FCBA  4F                 	db	79	;'O'
   705  00FCBB  54                 	db	84	;'T'
   706  00FCBC  48                 	db	72	;'H'
   707  00FCBD  20                 	db	32
   708  00FCBE  53                 	db	83	;'S'
   709  00FCBF  45                 	db	69	;'E'
   710  00FCC0  52                 	db	82	;'R'
   711  00FCC1  56                 	db	86	;'V'
   712  00FCC2  4F                 	db	79	;'O'
   713  00FCC3  53                 	db	83	;'S'
   714  00FCC4  00                 	db	0
   715  00FCC5                     STR_41:
   716  00FCC5  4C                 	db	76	;'L'
   717  00FCC6  4F                 	db	79	;'O'
   718  00FCC7  47                 	db	71	;'G'
   719  00FCC8  20                 	db	32
   720  00FCC9  31                 	db	49	;'1'
   721  00FCCA  20                 	db	32
   722  00FCCB  20                 	db	32
   723  00FCCC  20                 	db	32
   724  00FCCD  20                 	db	32
   725  00FCCE  20                 	db	32
   726  00FCCF  20                 	db	32
   727  00FCD0  20                 	db	32
   728  00FCD1  20                 	db	32
   729  00FCD2  20                 	db	32
   730  00FCD3  20                 	db	32
   731  00FCD4  20                 	db	32
   732  00FCD5  00                 	db	0
   733  00FCD6                     STR_40:
   734  00FCD6  4C                 	db	76	;'L'
   735  00FCD7  4F                 	db	79	;'O'
   736  00FCD8  47                 	db	71	;'G'
   737  00FCD9  20                 	db	32
   738  00FCDA  32                 	db	50	;'2'
   739  00FCDB  20                 	db	32
   740  00FCDC  20                 	db	32
   741  00FCDD  20                 	db	32
   742  00FCDE  20                 	db	32
   743  00FCDF  20                 	db	32
   744  00FCE0  20                 	db	32
   745  00FCE1  20                 	db	32
   746  00FCE2  20                 	db	32
   747  00FCE3  20                 	db	32
   748  00FCE4  20                 	db	32
   749  00FCE5  20                 	db	32
   750  00FCE6  00                 	db	0
   751  00FCE7                     STR_44:
   752  00FCE7  4C                 	db	76	;'L'
   753  00FCE8  4F                 	db	79	;'O'
   754  00FCE9  47                 	db	71	;'G'
   755  00FCEA  20                 	db	32
   756  00FCEB  33                 	db	51	;'3'
   757  00FCEC  20                 	db	32
   758  00FCED  20                 	db	32
   759  00FCEE  20                 	db	32
   760  00FCEF  20                 	db	32
   761  00FCF0  20                 	db	32
   762  00FCF1  20                 	db	32
   763  00FCF2  20                 	db	32
   764  00FCF3  20                 	db	32
   765  00FCF4  20                 	db	32
   766  00FCF5  20                 	db	32
   767  00FCF6  20                 	db	32
   768  00FCF7  00                 	db	0
   769  00FCF8                     STR_48:
   770  00FCF8  4C                 	db	76	;'L'
   771  00FCF9  4F                 	db	79	;'O'
   772  00FCFA  47                 	db	71	;'G'
   773  00FCFB  20                 	db	32
   774  00FCFC  34                 	db	52	;'4'
   775  00FCFD  20                 	db	32
   776  00FCFE  20                 	db	32
   777  00FCFF  20                 	db	32
   778  00FD00  20                 	db	32
   779  00FD01  20                 	db	32
   780  00FD02  20                 	db	32
   781  00FD03  20                 	db	32
   782  00FD04  20                 	db	32
   783  00FD05  20                 	db	32
   784  00FD06  20                 	db	32
   785  00FD07  20                 	db	32
   786  00FD08  00                 	db	0
   787  00FD09                     STR_36:
   788  00FD09  33                 	db	51	;'3'
   789  00FD0A  2E                 	db	46
   790  00FD0B  20                 	db	32
   791  00FD0C  4C                 	db	76	;'L'
   792  00FD0D  4F                 	db	79	;'O'
   793  00FD0E  47                 	db	71	;'G'
   794  00FD0F  53                 	db	83	;'S'
   795  00FD10  20                 	db	32
   796  00FD11  20                 	db	32
   797  00FD12  20                 	db	32
   798  00FD13  20                 	db	32
   799  00FD14  20                 	db	32
   800  00FD15  20                 	db	32
   801  00FD16  20                 	db	32
   802  00FD17  20                 	db	32
   803  00FD18  20                 	db	32
   804  00FD19  00                 	db	0
   805  00FD1A                     STR_32:
   806  00FD1A  32                 	db	50	;'2'
   807  00FD1B  2E                 	db	46
   808  00FD1C  20                 	db	32
   809  00FD1D  53                 	db	83	;'S'
   810  00FD1E  4F                 	db	79	;'O'
   811  00FD1F  52                 	db	82	;'R'
   812  00FD20  54                 	db	84	;'T'
   813  00FD21  20                 	db	32
   814  00FD22  20                 	db	32
   815  00FD23  20                 	db	32
   816  00FD24  20                 	db	32
   817  00FD25  20                 	db	32
   818  00FD26  20                 	db	32
   819  00FD27  20                 	db	32
   820  00FD28  20                 	db	32
   821  00FD29  20                 	db	32
   822  00FD2A  00                 	db	0
   823  00FD2B                     STR_33:
   824  00FD2B  31                 	db	49	;'1'
   825  00FD2C  2E                 	db	46
   826  00FD2D  20                 	db	32
   827  00FD2E  44                 	db	68	;'D'
   828  00FD2F  41                 	db	65	;'A'
   829  00FD30  54                 	db	84	;'T'
   830  00FD31  45                 	db	69	;'E'
   831  00FD32  2F                 	db	47
   832  00FD33  54                 	db	84	;'T'
   833  00FD34  49                 	db	73	;'I'
   834  00FD35  4D                 	db	77	;'M'
   835  00FD36  45                 	db	69	;'E'
   836  00FD37  20                 	db	32
   837  00FD38  20                 	db	32
   838  00FD39  20                 	db	32
   839  00FD3A  20                 	db	32
   840  00FD3B  00                 	db	0
   841  00FD3C                     STR_24:
   842  00FD3C  20                 	db	32
   843  00FD3D  2D                 	db	45
   844  00FD3E  2D                 	db	45
   845  00FD3F  20                 	db	32
   846  00FD40  50                 	db	80	;'P'
   847  00FD41  4F                 	db	79	;'O'
   848  00FD42  50                 	db	80	;'P'
   849  00FD43  20                 	db	32
   850  00FD44  20                 	db	32
   851  00FD45  43                 	db	67	;'C'
   852  00FD46  41                 	db	65	;'A'
   853  00FD47  4E                 	db	78	;'N'
   854  00FD48  20                 	db	32
   855  00FD49  2D                 	db	45
   856  00FD4A  2D                 	db	45
   857  00FD4B  20                 	db	32
   858  00FD4C  00                 	db	0
   859  00FD4D                     STR_26:
   860  00FD4D  20                 	db	32
   861  00FD4E  2D                 	db	45
   862  00FD4F  2D                 	db	45
   863  00FD50  20                 	db	32
   864  00FD51  53                 	db	83	;'S'
   865  00FD52  4F                 	db	79	;'O'
   866  00FD53  55                 	db	85	;'U'
   867  00FD54  50                 	db	80	;'P'
   868  00FD55  20                 	db	32
   869  00FD56  43                 	db	67	;'C'
   870  00FD57  41                 	db	65	;'A'
   871  00FD58  4E                 	db	78	;'N'
   872  00FD59  20                 	db	32
   873  00FD5A  2D                 	db	45
   874  00FD5B  2D                 	db	45
   875  00FD5C  20                 	db	32
   876  00FD5D  00                 	db	0
   877  00FD5E                     STR_28:
   878  00FD5E  2D                 	db	45
   879  00FD5F  2D                 	db	45
   880  00FD60  20                 	db	32
   881  00FD61  54                 	db	84	;'T'
   882  00FD62  4F                 	db	79	;'O'
   883  00FD63  54                 	db	84	;'T'
   884  00FD64  41                 	db	65	;'A'
   885  00FD65  4C                 	db	76	;'L'
   886  00FD66  20                 	db	32
   887  00FD67  43                 	db	67	;'C'
   888  00FD68  41                 	db	65	;'A'
   889  00FD69  4E                 	db	78	;'N'
   890  00FD6A  53                 	db	83	;'S'
   891  00FD6B  20                 	db	32
   892  00FD6C  2D                 	db	45
   893  00FD6D  2D                 	db	45
   894  00FD6E  00                 	db	0
   895  00FD6F                     STR_39:
   896  00FD6F  4C                 	db	76	;'L'
   897  00FD70  4F                 	db	79	;'O'
   898  00FD71  47                 	db	71	;'G'
   899  00FD72  20                 	db	32
   900  00FD73  31                 	db	49	;'1'
   901  00FD74  20                 	db	32
   902  00FD75  20                 	db	32
   903  00FD76  20                 	db	32
   904  00FD77  20                 	db	32
   905  00FD78  20                 	db	32
   906  00FD79  20                 	db	32
   907  00FD7A  20                 	db	32
   908  00FD7B  20                 	db	32
   909  00FD7C  20                 	db	32
   910  00FD7D  20                 	db	32
   911  00FD7E  3C                 	db	60	;'<'
   912  00FD7F  00                 	db	0
   913  00FD80                     STR_42:
   914  00FD80  4C                 	db	76	;'L'
   915  00FD81  4F                 	db	79	;'O'
   916  00FD82  47                 	db	71	;'G'
   917  00FD83  20                 	db	32
   918  00FD84  32                 	db	50	;'2'
   919  00FD85  20                 	db	32
   920  00FD86  20                 	db	32
   921  00FD87  20                 	db	32
   922  00FD88  20                 	db	32
   923  00FD89  20                 	db	32
   924  00FD8A  20                 	db	32
   925  00FD8B  20                 	db	32
   926  00FD8C  20                 	db	32
   927  00FD8D  20                 	db	32
   928  00FD8E  20                 	db	32
   929  00FD8F  3C                 	db	60	;'<'
   930  00FD90  00                 	db	0
   931  00FD91                     STR_46:
   932  00FD91  4C                 	db	76	;'L'
   933  00FD92  4F                 	db	79	;'O'
   934  00FD93  47                 	db	71	;'G'
   935  00FD94  20                 	db	32
   936  00FD95  33                 	db	51	;'3'
   937  00FD96  20                 	db	32
   938  00FD97  20                 	db	32
   939  00FD98  20                 	db	32
   940  00FD99  20                 	db	32
   941  00FD9A  20                 	db	32
   942  00FD9B  20                 	db	32
   943  00FD9C  20                 	db	32
   944  00FD9D  20                 	db	32
   945  00FD9E  20                 	db	32
   946  00FD9F  20                 	db	32
   947  00FDA0  3C                 	db	60	;'<'
   948  00FDA1  00                 	db	0
   949  00FDA2                     STR_50:
   950  00FDA2  4C                 	db	76	;'L'
   951  00FDA3  4F                 	db	79	;'O'
   952  00FDA4  47                 	db	71	;'G'
   953  00FDA5  20                 	db	32
   954  00FDA6  34                 	db	52	;'4'
   955  00FDA7  20                 	db	32
   956  00FDA8  20                 	db	32
   957  00FDA9  20                 	db	32
   958  00FDAA  20                 	db	32
   959  00FDAB  20                 	db	32
   960  00FDAC  20                 	db	32
   961  00FDAD  20                 	db	32
   962  00FDAE  20                 	db	32
   963  00FDAF  20                 	db	32
   964  00FDB0  20                 	db	32
   965  00FDB1  3C                 	db	60	;'<'
   966  00FDB2  00                 	db	0
   967  00FDB3                     STR_38:
   968  00FDB3  33                 	db	51	;'3'
   969  00FDB4  2E                 	db	46
   970  00FDB5  20                 	db	32
   971  00FDB6  4C                 	db	76	;'L'
   972  00FDB7  4F                 	db	79	;'O'
   973  00FDB8  47                 	db	71	;'G'
   974  00FDB9  53                 	db	83	;'S'
   975  00FDBA  20                 	db	32
   976  00FDBB  20                 	db	32
   977  00FDBC  20                 	db	32
   978  00FDBD  20                 	db	32
   979  00FDBE  20                 	db	32
   980  00FDBF  20                 	db	32
   981  00FDC0  20                 	db	32
   982  00FDC1  20                 	db	32
   983  00FDC2  3C                 	db	60	;'<'
   984  00FDC3  00                 	db	0
   985  00FDC4                     STR_34:
   986  00FDC4  32                 	db	50	;'2'
   987  00FDC5  2E                 	db	46
   988  00FDC6  20                 	db	32
   989  00FDC7  53                 	db	83	;'S'
   990  00FDC8  4F                 	db	79	;'O'
   991  00FDC9  52                 	db	82	;'R'
   992  00FDCA  54                 	db	84	;'T'
   993  00FDCB  20                 	db	32
   994  00FDCC  20                 	db	32
   995  00FDCD  20                 	db	32
   996  00FDCE  20                 	db	32
   997  00FDCF  20                 	db	32
   998  00FDD0  20                 	db	32
   999  00FDD1  20                 	db	32
  1000  00FDD2  20                 	db	32
  1001  00FDD3  3C                 	db	60	;'<'
  1002  00FDD4  00                 	db	0
  1003  00FDD5                     STR_31:
  1004  00FDD5  31                 	db	49	;'1'
  1005  00FDD6  2E                 	db	46
  1006  00FDD7  20                 	db	32
  1007  00FDD8  44                 	db	68	;'D'
  1008  00FDD9  41                 	db	65	;'A'
  1009  00FDDA  54                 	db	84	;'T'
  1010  00FDDB  45                 	db	69	;'E'
  1011  00FDDC  2F                 	db	47
  1012  00FDDD  54                 	db	84	;'T'
  1013  00FDDE  49                 	db	73	;'I'
  1014  00FDDF  4D                 	db	77	;'M'
  1015  00FDE0  45                 	db	69	;'E'
  1016  00FDE1  20                 	db	32
  1017  00FDE2  20                 	db	32
  1018  00FDE3  20                 	db	32
  1019  00FDE4  3C                 	db	60	;'<'
  1020  00FDE5  00                 	db	0
  1021  00FDE6                     STR_6:
  1022  00FDE6  50                 	db	80	;'P'
  1023  00FDE7  41                 	db	65	;'A'
  1024  00FDE8  55                 	db	85	;'U'
  1025  00FDE9  53                 	db	83	;'S'
  1026  00FDEA  45                 	db	69	;'E'
  1027  00FDEB  20                 	db	32
  1028  00FDEC  3C                 	db	60	;'<'
  1029  00FDED  20                 	db	32
  1030  00FDEE  7C                 	db	124
  1031  00FDEF  20                 	db	32
  1032  00FDF0  42                 	db	66	;'B'
  1033  00FDF1  41                 	db	65	;'A'
  1034  00FDF2  43                 	db	67	;'C'
  1035  00FDF3  4B                 	db	75	;'K'
  1036  00FDF4  20                 	db	32
  1037  00FDF5  3E                 	db	62	;'>'
  1038  00FDF6  00                 	db	0
  1039  00FDF7                     STR_30:
  1040  00FDF7  50                 	db	80	;'P'
  1041  00FDF8  55                 	db	85	;'U'
  1042  00FDF9  53                 	db	83	;'S'
  1043  00FDFA  48                 	db	72	;'H'
  1044  00FDFB  20                 	db	32
  1045  00FDFC  54                 	db	84	;'T'
  1046  00FDFD  4F                 	db	79	;'O'
  1047  00FDFE  20                 	db	32
  1048  00FDFF  43                 	db	67	;'C'
  1049  00FE00  4F                 	db	79	;'O'
  1050  00FE01  4E                 	db	78	;'N'
  1051  00FE02  54                 	db	84	;'T'
  1052  00FE03  49                 	db	73	;'I'
  1053  00FE04  4E                 	db	78	;'N'
  1054  00FE05  55                 	db	85	;'U'
  1055  00FE06  45                 	db	69	;'E'
  1056  00FE07  00                 	db	0
  1057  00FE08                     STR_27:
  1058  00FE08  4E                 	db	78	;'N'
  1059  00FE09  4C                 	db	76	;'L'
  1060  00FE0A  41                 	db	65	;'A'
  1061  00FE0B  42                 	db	66	;'B'
  1062  00FE0C  3A                 	db	58	;':'
  1063  00FE0D  20                 	db	32
  1064  00FE0E  25                 	db	37
  1065  00FE0F  64                 	db	100	;'d'
  1066  00FE10  7C                 	db	124
  1067  00FE11  4C                 	db	76	;'L'
  1068  00FE12  41                 	db	65	;'A'
  1069  00FE13  42                 	db	66	;'B'
  1070  00FE14  3A                 	db	58	;':'
  1071  00FE15  20                 	db	32
  1072  00FE16  25                 	db	37
  1073  00FE17  64                 	db	100	;'d'
  1074  00FE18  00                 	db	0
  1075  00FE19                     STR_25:
  1076  00FE19  4E                 	db	78	;'N'
  1077  00FE1A  54                 	db	84	;'T'
  1078  00FE1B  41                 	db	65	;'A'
  1079  00FE1C  42                 	db	66	;'B'
  1080  00FE1D  3A                 	db	58	;':'
  1081  00FE1E  20                 	db	32
  1082  00FE1F  25                 	db	37
  1083  00FE20  64                 	db	100	;'d'
  1084  00FE21  7C                 	db	124
  1085  00FE22  54                 	db	84	;'T'
  1086  00FE23  41                 	db	65	;'A'
  1087  00FE24  42                 	db	66	;'B'
  1088  00FE25  3A                 	db	58	;':'
  1089  00FE26  20                 	db	32
  1090  00FE27  25                 	db	37
  1091  00FE28  64                 	db	100	;'d'
  1092  00FE29  00                 	db	0
  1093  00FE2A                     STR_83:
  1094  00FE2A  4D                 	db	77	;'M'
  1095  00FE2B  41                 	db	65	;'A'
  1096  00FE2C  47                 	db	71	;'G'
  1097  00FE2D  5F                 	db	95	;'_'
  1098  00FE2E  73                 	db	115	;'s'
  1099  00FE2F  69                 	db	105	;'i'
  1100  00FE30  67                 	db	103	;'g'
  1101  00FE31  6E                 	db	110	;'n'
  1102  00FE32  61                 	db	97	;'a'
  1103  00FE33  6C                 	db	108	;'l'
  1104  00FE34  3A                 	db	58	;':'
  1105  00FE35  20                 	db	32
  1106  00FE36  25                 	db	37
  1107  00FE37  64                 	db	100	;'d'
  1108  00FE38  20                 	db	32
  1109  00FE39  00                 	db	0
  1110  00FE3A                     STR_103:
  1111  00FE3A  54                 	db	84	;'T'
  1112  00FE3B  53                 	db	83	;'S'
  1113  00FE3C  54                 	db	84	;'T'
  1114  00FE3D  3A                 	db	58	;':'
  1115  00FE3E  20                 	db	32
  1116  00FE3F  54                 	db	84	;'T'
  1117  00FE40  49                 	db	73	;'I'
  1118  00FE41  4C                 	db	76	;'L'
  1119  00FE42  54                 	db	84	;'T'
  1120  00FE43  20                 	db	32
  1121  00FE44  53                 	db	83	;'S'
  1122  00FE45  45                 	db	69	;'E'
  1123  00FE46  52                 	db	82	;'R'
  1124  00FE47  56                 	db	86	;'V'
  1125  00FE48  4F                 	db	79	;'O'
  1126  00FE49  00                 	db	0
  1127  00FE4A                     STR_4:
  1128  00FE4A  44                 	db	68	;'D'
  1129  00FE4B  49                 	db	73	;'I'
  1130  00FE4C  44                 	db	68	;'D'
  1131  00FE4D  4E                 	db	78	;'N'
  1132  00FE4E  27                 	db	39
  1133  00FE4F  54                 	db	84	;'T'
  1134  00FE50  20                 	db	32
  1135  00FE51  43                 	db	67	;'C'
  1136  00FE52  4F                 	db	79	;'O'
  1137  00FE53  4D                 	db	77	;'M'
  1138  00FE54  50                 	db	80	;'P'
  1139  00FE55  4C                 	db	76	;'L'
  1140  00FE56  45                 	db	69	;'E'
  1141  00FE57  54                 	db	84	;'T'
  1142  00FE58  45                 	db	69	;'E'
  1143  00FE59  00                 	db	0
  1144  00FE5A                     STR_80:
  1145  00FE5A  49                 	db	73	;'I'
  1146  00FE5B  52                 	db	82	;'R'
  1147  00FE5C  5F                 	db	95	;'_'
  1148  00FE5D  73                 	db	115	;'s'
  1149  00FE5E  69                 	db	105	;'i'
  1150  00FE5F  67                 	db	103	;'g'
  1151  00FE60  6E                 	db	110	;'n'
  1152  00FE61  61                 	db	97	;'a'
  1153  00FE62  6C                 	db	108	;'l'
  1154  00FE63  3A                 	db	58	;':'
  1155  00FE64  20                 	db	32
  1156  00FE65  25                 	db	37
  1157  00FE66  64                 	db	100	;'d'
  1158  00FE67  20                 	db	32
  1159  00FE68  00                 	db	0
  1160  00FE69                     STR_109:
  1161  00FE69  43                 	db	67	;'C'
  1162  00FE6A  41                 	db	65	;'A'
  1163  00FE6B  4D                 	db	77	;'M'
  1164  00FE6C  20                 	db	32
  1165  00FE6D  44                 	db	68	;'D'
  1166  00FE6E  57                 	db	87	;'W'
  1167  00FE6F  4E                 	db	78	;'N'
  1168  00FE70  20                 	db	32
  1169  00FE71  7C                 	db	124
  1170  00FE72  52                 	db	82	;'R'
  1171  00FE73  43                 	db	67	;'C'
  1172  00FE74  30                 	db	48	;'0'
  1173  00FE75  3D                 	db	61	;'='
  1174  00FE76  30                 	db	48	;'0'
  1175  00FE77  00                 	db	0
  1176  00FE78                     STR_108:
  1177  00FE78  43                 	db	67	;'C'
  1178  00FE79  41                 	db	65	;'A'
  1179  00FE7A  4D                 	db	77	;'M'
  1180  00FE7B  20                 	db	32
  1181  00FE7C  55                 	db	85	;'U'
  1182  00FE7D  50                 	db	80	;'P'
  1183  00FE7E  20                 	db	32
  1184  00FE7F  20                 	db	32
  1185  00FE80  7C                 	db	124
  1186  00FE81  52                 	db	82	;'R'
  1187  00FE82  43                 	db	67	;'C'
  1188  00FE83  30                 	db	48	;'0'
  1189  00FE84  3D                 	db	61	;'='
  1190  00FE85  31                 	db	49	;'1'
  1191  00FE86  00                 	db	0
  1192  00FE87                     STR_82:
  1193  00FE87  54                 	db	84	;'T'
  1194  00FE88  53                 	db	83	;'S'
  1195  00FE89  54                 	db	84	;'T'
  1196  00FE8A  3A                 	db	58	;':'
  1197  00FE8B  20                 	db	32
  1198  00FE8C  4D                 	db	77	;'M'
  1199  00FE8D  41                 	db	65	;'A'
  1200  00FE8E  47                 	db	71	;'G'
  1201  00FE8F  4E                 	db	78	;'N'
  1202  00FE90  45                 	db	69	;'E'
  1203  00FE91  54                 	db	84	;'T'
  1204  00FE92  49                 	db	73	;'I'
  1205  00FE93  53                 	db	83	;'S'
  1206  00FE94  4D                 	db	77	;'M'
  1207  00FE95  00                 	db	0
  1208  00FE96                     STR_107:
  1209  00FE96  54                 	db	84	;'T'
  1210  00FE97  53                 	db	83	;'S'
  1211  00FE98  54                 	db	84	;'T'
  1212  00FE99  3A                 	db	58	;':'
  1213  00FE9A  20                 	db	32
  1214  00FE9B  43                 	db	67	;'C'
  1215  00FE9C  41                 	db	65	;'A'
  1216  00FE9D  4D                 	db	77	;'M'
  1217  00FE9E  20                 	db	32
  1218  00FE9F  53                 	db	83	;'S'
  1219  00FEA0  45                 	db	69	;'E'
  1220  00FEA1  52                 	db	82	;'R'
  1221  00FEA2  56                 	db	86	;'V'
  1222  00FEA3  4F                 	db	79	;'O'
  1223  00FEA4  00                 	db	0
  1224  00FEA5                     STR_96:
  1225  00FEA5  54                 	db	84	;'T'
  1226  00FEA6  53                 	db	83	;'S'
  1227  00FEA7  54                 	db	84	;'T'
  1228  00FEA8  3A                 	db	58	;':'
  1229  00FEA9  20                 	db	32
  1230  00FEAA  50                 	db	80	;'P'
  1231  00FEAB  41                 	db	65	;'A'
  1232  00FEAC  4E                 	db	78	;'N'
  1233  00FEAD  20                 	db	32
  1234  00FEAE  53                 	db	83	;'S'
  1235  00FEAF  45                 	db	69	;'E'
  1236  00FEB0  52                 	db	82	;'R'
  1237  00FEB1  56                 	db	86	;'V'
  1238  00FEB2  4F                 	db	79	;'O'
  1239  00FEB3  00                 	db	0
  1240  00FEB4                     STR_75:
  1241  00FEB4  41                 	db	65	;'A'
  1242  00FEB5  4C                 	db	76	;'L'
  1243  00FEB6  47                 	db	71	;'G'
  1244  00FEB7  34                 	db	52	;'4'
  1245  00FEB8  3A                 	db	58	;':'
  1246  00FEB9  20                 	db	32
  1247  00FEBA  41                 	db	65	;'A'
  1248  00FEBB  4C                 	db	76	;'L'
  1249  00FEBC  4C                 	db	76	;'L'
  1250  00FEBD  20                 	db	32
  1251  00FEBE  43                 	db	67	;'C'
  1252  00FEBF  41                 	db	65	;'A'
  1253  00FEC0  4E                 	db	78	;'N'
  1254  00FEC1  53                 	db	83	;'S'
  1255  00FEC2  00                 	db	0
  1256  00FEC3                     STR_90:
  1257  00FEC3  54                 	db	84	;'T'
  1258  00FEC4  53                 	db	83	;'S'
  1259  00FEC5  54                 	db	84	;'T'
  1260  00FEC6  3A                 	db	58	;':'
  1261  00FEC7  20                 	db	32
  1262  00FEC8  44                 	db	68	;'D'
  1263  00FEC9  43                 	db	67	;'C'
  1264  00FECA  20                 	db	32
  1265  00FECB  4D                 	db	77	;'M'
  1266  00FECC  4F                 	db	79	;'O'
  1267  00FECD  54                 	db	84	;'T'
  1268  00FECE  4F                 	db	79	;'O'
  1269  00FECF  52                 	db	82	;'R'
  1270  00FED0  53                 	db	83	;'S'
  1271  00FED1  00                 	db	0
  1272  00FED2                     STR_70:
  1273  00FED2  41                 	db	65	;'A'
  1274  00FED3  4C                 	db	76	;'L'
  1275  00FED4  47                 	db	71	;'G'
  1276  00FED5  4F                 	db	79	;'O'
  1277  00FED6  52                 	db	82	;'R'
  1278  00FED7  49                 	db	73	;'I'
  1279  00FED8  54                 	db	84	;'T'
  1280  00FED9  48                 	db	72	;'H'
  1281  00FEDA  4D                 	db	77	;'M'
  1282  00FEDB  20                 	db	32
  1283  00FEDC  54                 	db	84	;'T'
  1284  00FEDD  45                 	db	69	;'E'
  1285  00FEDE  53                 	db	83	;'S'
  1286  00FEDF  54                 	db	84	;'T'
  1287  00FEE0  00                 	db	0
  1288  00FEE1                     STR_91:
  1289  00FEE1  50                 	db	80	;'P'
  1290  00FEE2  49                 	db	73	;'I'
  1291  00FEE3  4E                 	db	78	;'N'
  1292  00FEE4  20                 	db	32
  1293  00FEE5  52                 	db	82	;'R'
  1294  00FEE6  41                 	db	65	;'A'
  1295  00FEE7  35                 	db	53	;'5'
  1296  00FEE8  20                 	db	32
  1297  00FEE9  48                 	db	72	;'H'
  1298  00FEEA  49                 	db	73	;'I'
  1299  00FEEB  47                 	db	71	;'G'
  1300  00FEEC  48                 	db	72	;'H'
  1301  00FEED  2E                 	db	46
  1302  00FEEE  00                 	db	0
  1303  00FEEF                     STR_73:
  1304  00FEEF  41                 	db	65	;'A'
  1305  00FEF0  4C                 	db	76	;'L'
  1306  00FEF1  47                 	db	71	;'G'
  1307  00FEF2  32                 	db	50	;'2'
  1308  00FEF3  3A                 	db	58	;':'
  1309  00FEF4  20                 	db	32
  1310  00FEF5  31                 	db	49	;'1'
  1311  00FEF6  32                 	db	50	;'2'
  1312  00FEF7  20                 	db	32
  1313  00FEF8  43                 	db	67	;'C'
  1314  00FEF9  41                 	db	65	;'A'
  1315  00FEFA  4E                 	db	78	;'N'
  1316  00FEFB  53                 	db	83	;'S'
  1317  00FEFC  00                 	db	0
  1318  00FEFD                     STR_76:
  1319  00FEFD  41                 	db	65	;'A'
  1320  00FEFE  4C                 	db	76	;'L'
  1321  00FEFF  47                 	db	71	;'G'
  1322  00FF00  35                 	db	53	;'5'
  1323  00FF01  3A                 	db	58	;':'
  1324  00FF02  20                 	db	32
  1325  00FF03  4E                 	db	78	;'N'
  1326  00FF04  4F                 	db	79	;'O'
  1327  00FF05  20                 	db	32
  1328  00FF06  43                 	db	67	;'C'
  1329  00FF07  41                 	db	65	;'A'
  1330  00FF08  4E                 	db	78	;'N'
  1331  00FF09  53                 	db	83	;'S'
  1332  00FF0A  00                 	db	0
  1333  00FF0B                     STR_71:
  1334  00FF0B  50                 	db	80	;'P'
  1335  00FF0C  55                 	db	85	;'U'
  1336  00FF0D  53                 	db	83	;'S'
  1337  00FF0E  48                 	db	72	;'H'
  1338  00FF0F  20                 	db	32
  1339  00FF10  54                 	db	84	;'T'
  1340  00FF11  4F                 	db	79	;'O'
  1341  00FF12  20                 	db	32
  1342  00FF13  53                 	db	83	;'S'
  1343  00FF14  54                 	db	84	;'T'
  1344  00FF15  41                 	db	65	;'A'
  1345  00FF16  52                 	db	82	;'R'
  1346  00FF17  54                 	db	84	;'T'
  1347  00FF18  00                 	db	0
  1348  00FF19                     STR_23:
  1349  00FF19  25                 	db	37
  1350  00FF1A  64                 	db	100	;'d'
  1351  00FF1B  20                 	db	32
  1352  00FF1C  4D                 	db	77	;'M'
  1353  00FF1D  49                 	db	73	;'I'
  1354  00FF1E  4E                 	db	78	;'N'
  1355  00FF1F  20                 	db	32
  1356  00FF20  25                 	db	37
  1357  00FF21  64                 	db	100	;'d'
  1358  00FF22  20                 	db	32
  1359  00FF23  53                 	db	83	;'S'
  1360  00FF24  45                 	db	69	;'E'
  1361  00FF25  43                 	db	67	;'C'
  1362  00FF26  00                 	db	0
  1363  00FF27                     STR_2:
  1364  00FF27  54                 	db	84	;'T'
  1365  00FF28  49                 	db	73	;'I'
  1366  00FF29  4D                 	db	77	;'M'
  1367  00FF2A  45                 	db	69	;'E'
  1368  00FF2B  3A                 	db	58	;':'
  1369  00FF2C  20                 	db	32
  1370  00FF2D  25                 	db	37
  1371  00FF2E  64                 	db	100	;'d'
  1372  00FF2F  3A                 	db	58	;':'
  1373  00FF30  25                 	db	37
  1374  00FF31  30                 	db	48	;'0'
  1375  00FF32  32                 	db	50	;'2'
  1376  00FF33  64                 	db	100	;'d'
  1377  00FF34  00                 	db	0
  1378  00FF35                     STR_79:
  1379  00FF35  54                 	db	84	;'T'
  1380  00FF36  53                 	db	83	;'S'
  1381  00FF37  54                 	db	84	;'T'
  1382  00FF38  3A                 	db	58	;':'
  1383  00FF39  20                 	db	32
  1384  00FF3A  49                 	db	73	;'I'
  1385  00FF3B  52                 	db	82	;'R'
  1386  00FF3C  20                 	db	32
  1387  00FF3D  53                 	db	83	;'S'
  1388  00FF3E  4E                 	db	78	;'N'
  1389  00FF3F  53                 	db	83	;'S'
  1390  00FF40  52                 	db	82	;'R'
  1391  00FF41  00                 	db	0
  1392  00FF42                     STR_65:
  1393  00FF42  54                 	db	84	;'T'
  1394  00FF43  49                 	db	73	;'I'
  1395  00FF44  4D                 	db	77	;'M'
  1396  00FF45  45                 	db	69	;'E'
  1397  00FF46  20                 	db	32
  1398  00FF47  25                 	db	37
  1399  00FF48  64                 	db	100	;'d'
  1400  00FF49  3A                 	db	58	;':'
  1401  00FF4A  25                 	db	37
  1402  00FF4B  30                 	db	48	;'0'
  1403  00FF4C  32                 	db	50	;'2'
  1404  00FF4D  64                 	db	100	;'d'
  1405  00FF4E  00                 	db	0
  1406  00FF4F                     STR_74:
  1407  00FF4F  41                 	db	65	;'A'
  1408  00FF50  4C                 	db	76	;'L'
  1409  00FF51  47                 	db	71	;'G'
  1410  00FF52  33                 	db	51	;'3'
  1411  00FF53  3A                 	db	58	;':'
  1412  00FF54  20                 	db	32
  1413  00FF55  31                 	db	49	;'1'
  1414  00FF56  20                 	db	32
  1415  00FF57  43                 	db	67	;'C'
  1416  00FF58  41                 	db	65	;'A'
  1417  00FF59  4E                 	db	78	;'N'
  1418  00FF5A  00                 	db	0
  1419  00FF5B                     STR_93:
  1420  00FF5B  50                 	db	80	;'P'
  1421  00FF5C  49                 	db	73	;'I'
  1422  00FF5D  4E                 	db	78	;'N'
  1423  00FF5E  20                 	db	32
  1424  00FF5F  52                 	db	82	;'R'
  1425  00FF60  41                 	db	65	;'A'
  1426  00FF61  33                 	db	51	;'3'
  1427  00FF62  2E                 	db	46
  1428  00FF63  2E                 	db	46
  1429  00FF64  2E                 	db	46
  1430  00FF65  00                 	db	0
  1431  00FF66                     STR_95:
  1432  00FF66  50                 	db	80	;'P'
  1433  00FF67  49                 	db	73	;'I'
  1434  00FF68  4E                 	db	78	;'N'
  1435  00FF69  20                 	db	32
  1436  00FF6A  52                 	db	82	;'R'
  1437  00FF6B  41                 	db	65	;'A'
  1438  00FF6C  34                 	db	52	;'4'
  1439  00FF6D  2E                 	db	46
  1440  00FF6E  2E                 	db	46
  1441  00FF6F  2E                 	db	46
  1442  00FF70  00                 	db	0
  1443  00FF71                     STR_113:
  1444  00FF71  50                 	db	80	;'P'
  1445  00FF72  55                 	db	85	;'U'
  1446  00FF73  53                 	db	83	;'S'
  1447  00FF74  48                 	db	72	;'H'
  1448  00FF75  45                 	db	69	;'E'
  1449  00FF76  52                 	db	82	;'R'
  1450  00FF77  20                 	db	32
  1451  00FF78  54                 	db	84	;'T'
  1452  00FF79  53                 	db	83	;'S'
  1453  00FF7A  54                 	db	84	;'T'
  1454  00FF7B  00                 	db	0
  1455  00FF7C                     STR_64:
  1456  00FF7C  53                 	db	83	;'S'
  1457  00FF7D  4F                 	db	79	;'O'
  1458  00FF7E  52                 	db	82	;'R'
  1459  00FF7F  54                 	db	84	;'T'
  1460  00FF80  49                 	db	73	;'I'
  1461  00FF81  4E                 	db	78	;'N'
  1462  00FF82  47                 	db	71	;'G'
  1463  00FF83  2E                 	db	46
  1464  00FF84  2E                 	db	46
  1465  00FF85  2E                 	db	46
  1466  00FF86  00                 	db	0
  1467  00FF87                     STR_84:
  1468  00FF87  54                 	db	84	;'T'
  1469  00FF88  53                 	db	83	;'S'
  1470  00FF89  54                 	db	84	;'T'
  1471  00FF8A  3A                 	db	58	;':'
  1472  00FF8B  20                 	db	32
  1473  00FF8C  43                 	db	67	;'C'
  1474  00FF8D  4F                 	db	79	;'O'
  1475  00FF8E  4E                 	db	78	;'N'
  1476  00FF8F  44                 	db	68	;'D'
  1477  00FF90  00                 	db	0
  1478  00FF91                     STR_88:
  1479  00FF91  41                 	db	65	;'A'
  1480  00FF92  43                 	db	67	;'C'
  1481  00FF93  54                 	db	84	;'T'
  1482  00FF94  55                 	db	85	;'U'
  1483  00FF95  41                 	db	65	;'A'
  1484  00FF96  54                 	db	84	;'T'
  1485  00FF97  4F                 	db	79	;'O'
  1486  00FF98  52                 	db	82	;'R'
  1487  00FF99  53                 	db	83	;'S'
  1488  00FF9A  00                 	db	0
  1489  00FF9B                     STR_22:
  1490  00FF9B  44                 	db	68	;'D'
  1491  00FF9C  55                 	db	85	;'U'
  1492  00FF9D  52                 	db	82	;'R'
  1493  00FF9E  41                 	db	65	;'A'
  1494  00FF9F  54                 	db	84	;'T'
  1495  00FFA0  49                 	db	73	;'I'
  1496  00FFA1  4F                 	db	79	;'O'
  1497  00FFA2  4E                 	db	78	;'N'
  1498  00FFA3  3A                 	db	58	;':'
  1499  00FFA4  00                 	db	0
  1500  00FFA5                     STR_86:
  1501  00FFA5  43                 	db	67	;'C'
  1502  00FFA6  4F                 	db	79	;'O'
  1503  00FFA7  4E                 	db	78	;'N'
  1504  00FFA8  44                 	db	68	;'D'
  1505  00FFA9  3A                 	db	58	;':'
  1506  00FFAA  20                 	db	32
  1507  00FFAB  25                 	db	37
  1508  00FFAC  64                 	db	100	;'d'
  1509  00FFAD  00                 	db	0
  1510  00FFAE                     STR_77:
  1511  00FFAE  53                 	db	83	;'S'
  1512  00FFAF  45                 	db	69	;'E'
  1513  00FFB0  4E                 	db	78	;'N'
  1514  00FFB1  53                 	db	83	;'S'
  1515  00FFB2  4F                 	db	79	;'O'
  1516  00FFB3  52                 	db	82	;'R'
  1517  00FFB4  53                 	db	83	;'S'
  1518  00FFB5  00                 	db	0
  1519  00FFB6                     STR_120:
  1520  00FFB6  28                 	db	40
  1521  00FFB7  6E                 	db	110	;'n'
  1522  00FFB8  75                 	db	117	;'u'
  1523  00FFB9  6C                 	db	108	;'l'
  1524  00FFBA  6C                 	db	108	;'l'
  1525  00FFBB  29                 	db	41
  1526  00FFBC  00                 	db	0
  1527  00FFBD                     STR_67:
  1528  00FFBD  46                 	db	70	;'F'
  1529  00FFBE  41                 	db	65	;'A'
  1530  00FFBF  49                 	db	73	;'I'
  1531  00FFC0  4C                 	db	76	;'L'
  1532  00FFC1  45                 	db	69	;'E'
  1533  00FFC2  44                 	db	68	;'D'
  1534  00FFC3  00                 	db	0
  1535  00FFC4                     STR_7:
  1536  00FFC4  53                 	db	83	;'S'
  1537  00FFC5  54                 	db	84	;'T'
  1538  00FFC6  41                 	db	65	;'A'
  1539  00FFC7  52                 	db	82	;'R'
  1540  00FFC8  54                 	db	84	;'T'
  1541  00FFC9  3A                 	db	58	;':'
  1542  00FFCA  00                 	db	0
  1543  00FFCB                     STR_9:
  1544  00FFCB  46                 	db	70	;'F'
  1545  00FFCC  45                 	db	69	;'E'
  1546  00FFCD  42                 	db	66	;'B'
  1547  00FFCE  00                 	db	0
  1548  00FFCF                     STR_19:
  1549  00FFCF  44                 	db	68	;'D'
  1550  00FFD0  45                 	db	69	;'E'
  1551  00FFD1  43                 	db	67	;'C'
  1552  00FFD2  00                 	db	0
  1553  00FFD3                     STR_15:
  1554  00FFD3  41                 	db	65	;'A'
  1555  00FFD4  55                 	db	85	;'U'
  1556  00FFD5  47                 	db	71	;'G'
  1557  00FFD6  00                 	db	0
  1558  00FFD7                     STR_14:
  1559  00FFD7  4A                 	db	74	;'J'
  1560  00FFD8  55                 	db	85	;'U'
  1561  00FFD9  4C                 	db	76	;'L'
  1562  00FFDA  00                 	db	0
  1563  00FFDB                     STR_8:
  1564  00FFDB  4A                 	db	74	;'J'
  1565  00FFDC  41                 	db	65	;'A'
  1566  00FFDD  4E                 	db	78	;'N'
  1567  00FFDE  00                 	db	0
  1568  00FFDF                     STR_13:
  1569  00FFDF  4A                 	db	74	;'J'
  1570  00FFE0  55                 	db	85	;'U'
  1571  00FFE1  4E                 	db	78	;'N'
  1572  00FFE2  00                 	db	0
  1573  00FFE3                     STR_16:
  1574  00FFE3  53                 	db	83	;'S'
  1575  00FFE4  45                 	db	69	;'E'
  1576  00FFE5  50                 	db	80	;'P'
  1577  00FFE6  00                 	db	0
  1578  00FFE7                     STR_10:
  1579  00FFE7  4D                 	db	77	;'M'
  1580  00FFE8  41                 	db	65	;'A'
  1581  00FFE9  52                 	db	82	;'R'
  1582  00FFEA  00                 	db	0
  1583  00FFEB                     STR_11:
  1584  00FFEB  41                 	db	65	;'A'
  1585  00FFEC  50                 	db	80	;'P'
  1586  00FFED  52                 	db	82	;'R'
  1587  00FFEE  00                 	db	0
  1588  00FFEF                     STR_20:
  1589  00FFEF  45                 	db	69	;'E'
  1590  00FFF0  52                 	db	82	;'R'
  1591  00FFF1  52                 	db	82	;'R'
  1592  00FFF2  00                 	db	0
  1593  00FFF3                     STR_17:
  1594  00FFF3  4F                 	db	79	;'O'
  1595  00FFF4  43                 	db	67	;'C'
  1596  00FFF5  54                 	db	84	;'T'
  1597  00FFF6  00                 	db	0
  1598  00FFF7                     STR_18:
  1599  00FFF7  4E                 	db	78	;'N'
  1600  00FFF8  4F                 	db	79	;'O'
  1601  00FFF9  56                 	db	86	;'V'
  1602  00FFFA  00                 	db	0
  1603  00FFFB                     STR_12:
  1604  00FFFB  4D                 	db	77	;'M'
  1605  00FFFC  41                 	db	65	;'A'
  1606  00FFFD  59                 	db	89	;'Y'
  1607  00FFFE  00                 	db	0
  1608  0000                     
  1609                           ; #config settings
  1610  00FFFF  00                 	db	0	; dummy byte at the end
  1611  0000                     
  1612                           	psect	cinit
  1613  0042B2                     __pcinit:
  1614                           	opt stack 0
  1615  0042B2                     start_initialization:
  1616                           	opt stack 0
  1617  0042B2                     __initialization:
  1618                           	opt stack 0
  1619                           
  1620                           ; Initialize objects allocated to BANK1 (8 bytes)
  1621                           ; load TBLPTR registers with __pidataBANK1
  1622  0042B2  0EF4               	movlw	low __pidataBANK1
  1623  0042B4  6EF6               	movwf	tblptrl,c
  1624  0042B6  0E49               	movlw	high __pidataBANK1
  1625  0042B8  6EF7               	movwf	tblptrh,c
  1626  0042BA  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1627  0042BC  6EF8               	movwf	tblptru,c
  1628  0042BE  EE01  F02F         	lfsr	0,__pdataBANK1
  1629  0042C2  EE10 F008          	lfsr	1,8
  1630  0042C6                     copy_data0:
  1631  0042C6  0009               	tblrd		*+
  1632  0042C8  CFF5 FFEE          	movff	tablat,postinc0
  1633  0042CC  50E5               	movf	postdec1,w,c
  1634  0042CE  50E1               	movf	fsr1l,w,c
  1635  0042D0  E1FA               	bnz	copy_data0
  1636                           
  1637                           ; Clear objects allocated to BANK1 (47 bytes)
  1638  0042D2  EE01  F000         	lfsr	0,__pbssBANK1
  1639  0042D6  0E2F               	movlw	47
  1640  0042D8                     clear_0:
  1641  0042D8  6AEE               	clrf	postinc0,c
  1642  0042DA  06E8               	decf	wreg,f,c
  1643  0042DC  E1FD               	bnz	clear_0
  1644                           
  1645                           ; Clear objects allocated to BANK0 (38 bytes)
  1646  0042DE  EE00  F0DA         	lfsr	0,__pbssBANK0
  1647  0042E2  0E26               	movlw	38
  1648  0042E4                     clear_1:
  1649  0042E4  6AEE               	clrf	postinc0,c
  1650  0042E6  06E8               	decf	wreg,f,c
  1651  0042E8  E1FD               	bnz	clear_1
  1652                           
  1653                           ; Clear objects allocated to COMRAM (35 bytes)
  1654  0042EA  EE00  F05B         	lfsr	0,__pbssCOMRAM
  1655  0042EE  0E23               	movlw	35
  1656  0042F0                     clear_2:
  1657  0042F0  6AEE               	clrf	postinc0,c
  1658  0042F2  06E8               	decf	wreg,f,c
  1659  0042F4  E1FD               	bnz	clear_2
  1660  0042F6                     end_of_initialization:
  1661                           	opt stack 0
  1662  0042F6                     __end_of__initialization:
  1663                           	opt stack 0
  1664  0042F6  907E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1665  0042F8  927E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1666  0042FA  0100               	movlb	0
  1667  0042FC  EF09  F01C         	goto	_main	;jump to C main() function
  1668                           tblptru	equ	0xFF8
  1669                           tblptrh	equ	0xFF7
  1670                           tblptrl	equ	0xFF6
  1671                           tablat	equ	0xFF5
  1672                           postinc0	equ	0xFEE
  1673                           wreg	equ	0xFE8
  1674                           postdec1	equ	0xFE5
  1675                           fsr1l	equ	0xFE1
  1676                           
  1677                           	psect	bssCOMRAM
  1678  00005B                     __pbssCOMRAM:
  1679                           	opt stack 0
  1680  00005B                     _back:
  1681                           	opt stack 0
  1682  00005B                     	ds	2
  1683  00005D                     _count_can_no_lab:
  1684                           	opt stack 0
  1685  00005D                     	ds	2
  1686  00005F                     _count_can_w_lab:
  1687                           	opt stack 0
  1688  00005F                     	ds	2
  1689  000061                     _count_pop_no_tab:
  1690                           	opt stack 0
  1691  000061                     	ds	2
  1692  000063                     _count_pop_w_tab:
  1693                           	opt stack 0
  1694  000063                     	ds	2
  1695  000065                     _debug:
  1696                           	opt stack 0
  1697  000065                     	ds	2
  1698  000067                     _down:
  1699                           	opt stack 0
  1700  000067                     	ds	2
  1701  000069                     _enter:
  1702                           	opt stack 0
  1703  000069                     	ds	2
  1704  00006B                     _f_ID_receive:
  1705                           	opt stack 0
  1706  00006B                     	ds	2
  1707  00006D                     _f_can_coming_to_ID:
  1708                           	opt stack 0
  1709  00006D                     	ds	2
  1710  00006F                     _f_can_coming_to_distribution:
  1711                           	opt stack 0
  1712  00006F                     	ds	2
  1713  000071                     _f_lastCan:
  1714                           	opt stack 0
  1715  000071                     	ds	2
  1716  000073                     _first:
  1717                           	opt stack 0
  1718  000073                     	ds	2
  1719  000075                     _firstboot:
  1720                           	opt stack 0
  1721  000075                     	ds	2
  1722  000077                     _up:
  1723                           	opt stack 0
  1724  000077                     	ds	2
  1725  000079                     _was_low_1:
  1726                           	opt stack 0
  1727  000079                     	ds	2
  1728  00007B                     _was_low_3:
  1729                           	opt stack 0
  1730  00007B                     	ds	2
  1731  00007D                     _input:
  1732                           	opt stack 0
  1733  00007D                     	ds	1
  1734                           tblptru	equ	0xFF8
  1735                           tblptrh	equ	0xFF7
  1736                           tblptrl	equ	0xFF6
  1737                           tablat	equ	0xFF5
  1738                           postinc0	equ	0xFEE
  1739                           wreg	equ	0xFE8
  1740                           postdec1	equ	0xFE5
  1741                           fsr1l	equ	0xFE1
  1742                           
  1743                           	psect	bssBANK0
  1744  0000DA                     __pbssBANK0:
  1745                           	opt stack 0
  1746  0000DA                     _IR_signal:
  1747                           	opt stack 0
  1748  0000DA                     	ds	2
  1749  0000DC                     _MAG_signal:
  1750                           	opt stack 0
  1751  0000DC                     	ds	2
  1752  0000DE                     _RTCflag:
  1753                           	opt stack 0
  1754  0000DE                     	ds	2
  1755  0000E0                     _cur_can:
  1756                           	opt stack 0
  1757  0000E0                     	ds	2
  1758  0000E2                     _cur_state:
  1759                           	opt stack 0
  1760  0000E2                     	ds	2
  1761  0000E4                     _f_loadingNewCan:
  1762                           	opt stack 0
  1763  0000E4                     	ds	2
  1764  0000E6                     _log:
  1765                           	opt stack 0
  1766  0000E6                     	ds	2
  1767  0000E8                     _log_completion:
  1768                           	opt stack 0
  1769  0000E8                     	ds	2
  1770  0000EA                     _log_count_can_no_lab:
  1771                           	opt stack 0
  1772  0000EA                     	ds	2
  1773  0000EC                     _log_count_can_w_lab:
  1774                           	opt stack 0
  1775  0000EC                     	ds	2
  1776  0000EE                     _log_count_pop_no_tab:
  1777                           	opt stack 0
  1778  0000EE                     	ds	2
  1779  0000F0                     _log_count_pop_w_tab:
  1780                           	opt stack 0
  1781  0000F0                     	ds	2
  1782  0000F2                     _log_count_total:
  1783                           	opt stack 0
  1784  0000F2                     	ds	2
  1785  0000F4                     _log_total_time:
  1786                           	opt stack 0
  1787  0000F4                     	ds	2
  1788  0000F6                     _logstate:
  1789                           	opt stack 0
  1790  0000F6                     	ds	2
  1791  0000F8                     _total_time:
  1792                           	opt stack 0
  1793  0000F8                     	ds	2
  1794  0000FA                     _var:
  1795                           	opt stack 0
  1796  0000FA                     	ds	2
  1797  0000FC                     _machine_state:
  1798                           	opt stack 0
  1799  0000FC                     	ds	1
  1800  0000FD                     _sel:
  1801                           	opt stack 0
  1802  0000FD                     	ds	1
  1803  0000FE                     _count_total:
  1804                           	opt stack 0
  1805  0000FE                     	ds	2
  1806                           tblptru	equ	0xFF8
  1807                           tblptrh	equ	0xFF7
  1808                           tblptrl	equ	0xFF6
  1809                           tablat	equ	0xFF5
  1810                           postinc0	equ	0xFEE
  1811                           wreg	equ	0xFE8
  1812                           postdec1	equ	0xFE5
  1813                           fsr1l	equ	0xFE1
  1814                           
  1815                           	psect	bssBANK1
  1816  000100                     __pbssBANK1:
  1817                           	opt stack 0
  1818  000100                     _log_startTime:
  1819                           	opt stack 0
  1820  000100                     	ds	14
  1821  00010E                     _startTime:
  1822                           	opt stack 0
  1823  00010E                     	ds	14
  1824  00011C                     _servoTimes:
  1825                           	opt stack 0
  1826  00011C                     	ds	8
  1827  000124                     _time:
  1828                           	opt stack 0
  1829  000124                     	ds	7
  1830  00012B                     _f_can_distributed:
  1831                           	opt stack 0
  1832  00012B                     	ds	2
  1833  00012D                     _i:
  1834                           	opt stack 0
  1835  00012D                     	ds	2
  1836                           tblptru	equ	0xFF8
  1837                           tblptrh	equ	0xFF7
  1838                           tblptrl	equ	0xFF6
  1839                           tablat	equ	0xFF5
  1840                           postinc0	equ	0xFEE
  1841                           wreg	equ	0xFE8
  1842                           postdec1	equ	0xFE5
  1843                           fsr1l	equ	0xFE1
  1844                           
  1845                           	psect	dataBANK1
  1846  00012F                     __pdataBANK1:
  1847                           	opt stack 0
  1848  00012F                     UI@F3225:
  1849                           	opt stack 0
  1850  00012F                     	ds	4
  1851  000133                     printRTC@F3216:
  1852                           	opt stack 0
  1853  000133                     	ds	4
  1854                           tblptru	equ	0xFF8
  1855                           tblptrh	equ	0xFF7
  1856                           tblptrl	equ	0xFF6
  1857                           tablat	equ	0xFF5
  1858                           postinc0	equ	0xFEE
  1859                           wreg	equ	0xFE8
  1860                           postdec1	equ	0xFE5
  1861                           fsr1l	equ	0xFE1
  1862                           
  1863                           	psect	cstackBANK0
  1864  000080                     __pcstackBANK0:
  1865                           	opt stack 0
  1866  000080                     ??_delay_ms:
  1867  000080                     ??_PortTests:
  1868  000080                     ??_isdigit:
  1869  000080                     ??_readADC:
  1870  000080                     ??_I2C_Master_Wait:
  1871  000080                     ?___wmul:
  1872                           	opt stack 0
  1873  000080                     ?___awmod:
  1874                           	opt stack 0
  1875  000080                     ?___lwdiv:
  1876                           	opt stack 0
  1877  000080                     ?___lldiv:
  1878                           	opt stack 0
  1879  000080                     lcdNibble@temp:
  1880                           	opt stack 0
  1881  000080                     initTime@m:
  1882                           	opt stack 0
  1883  000080                     updateServoPosition@time_us:
  1884                           	opt stack 0
  1885  000080                     EEPROM_read@address:
  1886                           	opt stack 0
  1887  000080                     ___wmul@multiplier:
  1888                           	opt stack 0
  1889  000080                     ___awmod@dividend:
  1890                           	opt stack 0
  1891  000080                     ___lwdiv@dividend:
  1892                           	opt stack 0
  1893  000080                     strcpy@to:
  1894                           	opt stack 0
  1895  000080                     ___lldiv@dividend:
  1896                           	opt stack 0
  1897                           
  1898                           ; 4 bytes @ 0x0
  1899  000080                     	ds	1
  1900  000081                     readADC@channel:
  1901                           	opt stack 0
  1902  000081                     I2C_Master_Read@a:
  1903                           	opt stack 0
  1904  000081                     lcdNibble@data:
  1905                           	opt stack 0
  1906  000081                     initTime@h:
  1907                           	opt stack 0
  1908  000081                     delay_ms@milliseconds:
  1909                           	opt stack 0
  1910  000081                     _isdigit$1958:
  1911                           	opt stack 0
  1912  000081                     I2C_Master_Write@d:
  1913                           	opt stack 0
  1914                           
  1915                           ; 2 bytes @ 0x1
  1916  000081                     	ds	1
  1917  000082                     ??_readIR:
  1918  000082                     ??_readMAG:
  1919  000082                     I2C_Master_Read@temp:
  1920                           	opt stack 0
  1921  000082                     lcdInst@data:
  1922                           	opt stack 0
  1923  000082                     putch@data:
  1924                           	opt stack 0
  1925  000082                     initTime@w:
  1926                           	opt stack 0
  1927  000082                     isdigit@c:
  1928                           	opt stack 0
  1929  000082                     updateServoPosition@timer:
  1930                           	opt stack 0
  1931  000082                     ___wmul@multiplicand:
  1932                           	opt stack 0
  1933  000082                     ___awmod@divisor:
  1934                           	opt stack 0
  1935  000082                     ___lwdiv@divisor:
  1936                           	opt stack 0
  1937  000082                     strcpy@from:
  1938                           	opt stack 0
  1939                           
  1940                           ; 2 bytes @ 0x2
  1941  000082                     	ds	1
  1942  000083                     ??_initLCD:
  1943  000083                     initTime@DD:
  1944                           	opt stack 0
  1945  000083                     getRTC@i:
  1946                           	opt stack 0
  1947                           
  1948                           ; 2 bytes @ 0x3
  1949  000083                     	ds	1
  1950  000084                     ??_updateServoPosition:
  1951  000084                     initTime@MM:
  1952                           	opt stack 0
  1953  000084                     ___awmod@counter:
  1954                           	opt stack 0
  1955  000084                     readIR@res:
  1956                           	opt stack 0
  1957  000084                     readMAG@res:
  1958                           	opt stack 0
  1959  000084                     ___wmul@product:
  1960                           	opt stack 0
  1961  000084                     ___lwdiv@quotient:
  1962                           	opt stack 0
  1963  000084                     strcpy@cp:
  1964                           	opt stack 0
  1965  000084                     ___lldiv@divisor:
  1966                           	opt stack 0
  1967                           
  1968                           ; 4 bytes @ 0x4
  1969  000084                     	ds	1
  1970  000085                     ??_initSortTimer:
  1971  000085                     initTime@YY:
  1972                           	opt stack 0
  1973  000085                     ___awmod@sign:
  1974                           	opt stack 0
  1975                           
  1976                           ; 1 bytes @ 0x5
  1977  000085                     	ds	1
  1978  000086                     ??_getIR:
  1979  000086                     ??_getMAG:
  1980  000086                     ?___awdiv:
  1981                           	opt stack 0
  1982  000086                     initTime@s:
  1983                           	opt stack 0
  1984  000086                     ___lwdiv@counter:
  1985                           	opt stack 0
  1986  000086                     updateServoPosition@my_time:
  1987                           	opt stack 0
  1988  000086                     ___awdiv@dividend:
  1989                           	opt stack 0
  1990                           
  1991                           ; 2 bytes @ 0x6
  1992  000086                     	ds	1
  1993  000087                     ?___lwmod:
  1994                           	opt stack 0
  1995  000087                     ___lwmod@dividend:
  1996                           	opt stack 0
  1997                           
  1998                           ; 2 bytes @ 0x7
  1999  000087                     	ds	1
  2000  000088                     ??_ID:
  2001  000088                     ??_Distribution:
  2002  000088                     ??_initServos:
  2003  000088                     initSortTimer@i:
  2004                           	opt stack 0
  2005  000088                     ___awdiv@divisor:
  2006                           	opt stack 0
  2007  000088                     ___lldiv@quotient:
  2008                           	opt stack 0
  2009                           
  2010                           ; 4 bytes @ 0x8
  2011  000088                     	ds	1
  2012  000089                     ___lwmod@divisor:
  2013                           	opt stack 0
  2014                           
  2015                           ; 2 bytes @ 0x9
  2016  000089                     	ds	1
  2017  00008A                     ___awdiv@counter:
  2018                           	opt stack 0
  2019  00008A                     ID@i:
  2020                           	opt stack 0
  2021                           
  2022                           ; 2 bytes @ 0xA
  2023  00008A                     	ds	1
  2024  00008B                     ___awdiv@sign:
  2025                           	opt stack 0
  2026  00008B                     ___lwmod@counter:
  2027                           	opt stack 0
  2028                           
  2029                           ; 1 bytes @ 0xB
  2030  00008B                     	ds	1
  2031  00008C                     ___lldiv@counter:
  2032                           	opt stack 0
  2033  00008C                     ___awdiv@quotient:
  2034                           	opt stack 0
  2035  00008C                     ID@sensor_outputs:
  2036                           	opt stack 0
  2037                           
  2038                           ; 4 bytes @ 0xC
  2039  00008C                     	ds	1
  2040  00008D                     I2C_Master_Init@c:
  2041                           	opt stack 0
  2042                           
  2043                           ; 4 bytes @ 0xD
  2044  00008D                     	ds	1
  2045  00008E                     ?_printf:
  2046                           	opt stack 0
  2047  00008E                     printf@f:
  2048                           	opt stack 0
  2049                           
  2050                           ; 2 bytes @ 0xE
  2051  00008E                     	ds	3
  2052  000091                     ??_I2C_Master_Init:
  2053                           
  2054                           ; 1 bytes @ 0x11
  2055  000091                     	ds	4
  2056  000095                     ??_loadRTC:
  2057                           
  2058                           ; 1 bytes @ 0x15
  2059  000095                     	ds	1
  2060  000096                     loadRTC@i:
  2061                           	opt stack 0
  2062                           
  2063                           ; 2 bytes @ 0x16
  2064  000096                     	ds	4
  2065  00009A                     ??_printf:
  2066                           
  2067                           ; 1 bytes @ 0x1A
  2068  00009A                     	ds	4
  2069  00009E                     printf@prec:
  2070                           	opt stack 0
  2071                           
  2072                           ; 1 bytes @ 0x1E
  2073  00009E                     	ds	1
  2074  00009F                     printf@cp:
  2075                           	opt stack 0
  2076                           
  2077                           ; 2 bytes @ 0x1F
  2078  00009F                     	ds	2
  2079  0000A1                     printf@ap:
  2080                           	opt stack 0
  2081                           
  2082                           ; 2 bytes @ 0x21
  2083  0000A1                     	ds	2
  2084  0000A3                     printf@len:
  2085                           	opt stack 0
  2086                           
  2087                           ; 2 bytes @ 0x23
  2088  0000A3                     	ds	2
  2089  0000A5                     printf@val:
  2090                           	opt stack 0
  2091                           
  2092                           ; 2 bytes @ 0x25
  2093  0000A5                     	ds	2
  2094  0000A7                     printf@flag:
  2095                           	opt stack 0
  2096                           
  2097                           ; 1 bytes @ 0x27
  2098  0000A7                     	ds	1
  2099  0000A8                     printf@c:
  2100                           	opt stack 0
  2101                           
  2102                           ; 1 bytes @ 0x28
  2103  0000A8                     	ds	1
  2104  0000A9                     printf@width:
  2105                           	opt stack 0
  2106                           
  2107                           ; 2 bytes @ 0x29
  2108  0000A9                     	ds	2
  2109  0000AB                     ??_printRTC:
  2110  0000AB                     ??_algorithmTest:
  2111  0000AB                     ??_sensorTest:
  2112  0000AB                     ??_actuatorTest:
  2113  0000AB                     ??_PortTestA5:
  2114  0000AB                     ??_SpeedTest:
  2115  0000AB                     ??_PusherTest:
  2116  0000AB                     ??_BothServos:
  2117  0000AB                     ??_BlockerTest:
  2118  0000AB                     EEPROM_write@address:
  2119                           	opt stack 0
  2120                           
  2121                           ; 2 bytes @ 0x2B
  2122  0000AB                     	ds	1
  2123  0000AC                     PusherTest@i:
  2124                           	opt stack 0
  2125  0000AC                     BlockerTest@i:
  2126                           	opt stack 0
  2127                           
  2128                           ; 2 bytes @ 0x2C
  2129  0000AC                     	ds	1
  2130  0000AD                     EEPROM_write@data:
  2131                           	opt stack 0
  2132  0000AD                     actuatorTest@i_1643:
  2133                           	opt stack 0
  2134  0000AD                     sensorTest@res:
  2135                           	opt stack 0
  2136                           
  2137                           ; 2 bytes @ 0x2D
  2138  0000AD                     	ds	1
  2139  0000AE                     ??_EEPROM_write:
  2140  0000AE                     actuatorTest@i_1650:
  2141                           	opt stack 0
  2142  0000AE                     PusherTest@i_1696:
  2143                           	opt stack 0
  2144  0000AE                     BlockerTest@flag:
  2145                           	opt stack 0
  2146  0000AE                     printRTC@INT_time:
  2147                           	opt stack 0
  2148                           
  2149                           ; 14 bytes @ 0x2E
  2150  0000AE                     	ds	1
  2151  0000AF                     EEPROM_write@i:
  2152                           	opt stack 0
  2153  0000AF                     actuatorTest@i_1651:
  2154                           	opt stack 0
  2155                           
  2156                           ; 1 bytes @ 0x2F
  2157  0000AF                     	ds	1
  2158  0000B0                     EEPROM_write@i_1329:
  2159                           	opt stack 0
  2160  0000B0                     actuatorTest@i_1653:
  2161                           	opt stack 0
  2162                           
  2163                           ; 1 bytes @ 0x30
  2164  0000B0                     	ds	1
  2165  0000B1                     ??_Loading:
  2166  0000B1                     logRun@num:
  2167                           	opt stack 0
  2168  0000B1                     actuatorTest@i_1654:
  2169                           	opt stack 0
  2170                           
  2171                           ; 1 bytes @ 0x31
  2172  0000B1                     	ds	1
  2173  0000B2                     logRun@byte1:
  2174                           	opt stack 0
  2175  0000B2                     actuatorTest@i_1656:
  2176                           	opt stack 0
  2177                           
  2178                           ; 1 bytes @ 0x32
  2179  0000B2                     	ds	1
  2180  0000B3                     logRun@byte2:
  2181                           	opt stack 0
  2182  0000B3                     actuatorTest@i_1657:
  2183                           	opt stack 0
  2184  0000B3                     Loading@addr:
  2185                           	opt stack 0
  2186                           
  2187                           ; 2 bytes @ 0x33
  2188  0000B3                     	ds	1
  2189  0000B4                     logRun@byte3:
  2190                           	opt stack 0
  2191  0000B4                     actuatorTest@i_1659:
  2192                           	opt stack 0
  2193                           
  2194                           ; 1 bytes @ 0x34
  2195  0000B4                     	ds	1
  2196  0000B5                     Loading@byte1:
  2197                           	opt stack 0
  2198  0000B5                     logRun@byte_i:
  2199                           	opt stack 0
  2200  0000B5                     actuatorTest@i_1660:
  2201                           	opt stack 0
  2202                           
  2203                           ; 1 bytes @ 0x35
  2204  0000B5                     	ds	1
  2205  0000B6                     logRun@byte11:
  2206                           	opt stack 0
  2207  0000B6                     actuatorTest@i_1662:
  2208                           	opt stack 0
  2209  0000B6                     Loading@i_1098:
  2210                           	opt stack 0
  2211                           
  2212                           ; 2 bytes @ 0x36
  2213  0000B6                     	ds	1
  2214  0000B7                     actuatorTest@i_1663:
  2215                           	opt stack 0
  2216  0000B7                     logRun@i:
  2217                           	opt stack 0
  2218                           
  2219                           ; 2 bytes @ 0x37
  2220  0000B7                     	ds	1
  2221  0000B8                     actuatorTest@i_1665:
  2222                           	opt stack 0
  2223  0000B8                     Loading@i:
  2224                           	opt stack 0
  2225                           
  2226                           ; 2 bytes @ 0x38
  2227  0000B8                     	ds	1
  2228  0000B9                     actuatorTest@i_1666:
  2229                           	opt stack 0
  2230  0000B9                     logRun@addr:
  2231                           	opt stack 0
  2232                           
  2233                           ; 2 bytes @ 0x39
  2234  0000B9                     	ds	1
  2235  0000BA                     actuatorTest@i_1669:
  2236                           	opt stack 0
  2237                           
  2238                           ; 1 bytes @ 0x3A
  2239  0000BA                     	ds	1
  2240  0000BB                     actuatorTest@i_1670:
  2241                           	opt stack 0
  2242                           
  2243                           ; 1 bytes @ 0x3B
  2244  0000BB                     	ds	1
  2245  0000BC                     actuatorTest@i_1672:
  2246                           	opt stack 0
  2247  0000BC                     printRTC@RTC_month:
  2248                           	opt stack 0
  2249                           
  2250                           ; 2 bytes @ 0x3C
  2251  0000BC                     	ds	1
  2252  0000BD                     actuatorTest@i_1673:
  2253                           	opt stack 0
  2254                           
  2255                           ; 1 bytes @ 0x3D
  2256  0000BD                     	ds	1
  2257  0000BE                     actuatorTest@i_1675:
  2258                           	opt stack 0
  2259  0000BE                     printRTC@month:
  2260                           	opt stack 0
  2261                           
  2262                           ; 4 bytes @ 0x3E
  2263  0000BE                     	ds	1
  2264  0000BF                     actuatorTest@i_1676:
  2265                           	opt stack 0
  2266                           
  2267                           ; 1 bytes @ 0x3F
  2268  0000BF                     	ds	1
  2269  0000C0                     actuatorTest@i_1679:
  2270                           	opt stack 0
  2271                           
  2272                           ; 1 bytes @ 0x40
  2273  0000C0                     	ds	1
  2274  0000C1                     actuatorTest@i_1680:
  2275                           	opt stack 0
  2276                           
  2277                           ; 1 bytes @ 0x41
  2278  0000C1                     	ds	1
  2279  0000C2                     actuatorTest@i_1682:
  2280                           	opt stack 0
  2281  0000C2                     printRTC@i:
  2282                           	opt stack 0
  2283                           
  2284                           ; 2 bytes @ 0x42
  2285  0000C2                     	ds	1
  2286  0000C3                     actuatorTest@i_1683:
  2287                           	opt stack 0
  2288                           
  2289                           ; 1 bytes @ 0x43
  2290  0000C3                     	ds	1
  2291  0000C4                     ??_UI:
  2292  0000C4                     actuatorTest@i:
  2293                           	opt stack 0
  2294                           
  2295                           ; 2 bytes @ 0x44
  2296  0000C4                     	ds	2
  2297  0000C6                     ??_Test:
  2298  0000C6                     _UI$2314:
  2299                           	opt stack 0
  2300                           
  2301                           ; 2 bytes @ 0x46
  2302  0000C6                     	ds	2
  2303  0000C8                     UI@i:
  2304                           	opt stack 0
  2305                           
  2306                           ; 1 bytes @ 0x48
  2307  0000C8                     	ds	1
  2308  0000C9                     UI@i_409:
  2309                           	opt stack 0
  2310                           
  2311                           ; 1 bytes @ 0x49
  2312  0000C9                     	ds	1
  2313  0000CA                     UI@i_412:
  2314                           	opt stack 0
  2315                           
  2316                           ; 1 bytes @ 0x4A
  2317  0000CA                     	ds	1
  2318  0000CB                     UI@i_413:
  2319                           	opt stack 0
  2320                           
  2321                           ; 1 bytes @ 0x4B
  2322  0000CB                     	ds	1
  2323  0000CC                     UI@i_431:
  2324                           	opt stack 0
  2325                           
  2326                           ; 1 bytes @ 0x4C
  2327  0000CC                     	ds	1
  2328  0000CD                     UI@i_432:
  2329                           	opt stack 0
  2330                           
  2331                           ; 1 bytes @ 0x4D
  2332  0000CD                     	ds	1
  2333  0000CE                     UI@i_435:
  2334                           	opt stack 0
  2335                           
  2336                           ; 1 bytes @ 0x4E
  2337  0000CE                     	ds	1
  2338  0000CF                     UI@i_436:
  2339                           	opt stack 0
  2340                           
  2341                           ; 1 bytes @ 0x4F
  2342  0000CF                     	ds	1
  2343  0000D0                     UI@i_439:
  2344                           	opt stack 0
  2345                           
  2346                           ; 1 bytes @ 0x50
  2347  0000D0                     	ds	1
  2348  0000D1                     UI@i_440:
  2349                           	opt stack 0
  2350                           
  2351                           ; 1 bytes @ 0x51
  2352  0000D1                     	ds	1
  2353  0000D2                     UI@i_443:
  2354                           	opt stack 0
  2355                           
  2356                           ; 1 bytes @ 0x52
  2357  0000D2                     	ds	1
  2358  0000D3                     UI@i_444:
  2359                           	opt stack 0
  2360                           
  2361                           ; 1 bytes @ 0x53
  2362  0000D3                     	ds	1
  2363  0000D4                     UI@i_447:
  2364                           	opt stack 0
  2365                           
  2366                           ; 1 bytes @ 0x54
  2367  0000D4                     	ds	1
  2368  0000D5                     UI@i_448:
  2369                           	opt stack 0
  2370                           
  2371                           ; 1 bytes @ 0x55
  2372  0000D5                     	ds	1
  2373  0000D6                     UI@month:
  2374                           	opt stack 0
  2375                           
  2376                           ; 4 bytes @ 0x56
  2377  0000D6                     	ds	4
  2378  0000DA                     tblptru	equ	0xFF8
  2379                           tblptrh	equ	0xFF7
  2380                           tblptrl	equ	0xFF6
  2381                           tablat	equ	0xFF5
  2382                           postinc0	equ	0xFEE
  2383                           wreg	equ	0xFE8
  2384                           postdec1	equ	0xFE5
  2385                           fsr1l	equ	0xFE1
  2386                           
  2387                           ; 1 bytes @ 0x5A
  2388                           
  2389                           	psect	cstackCOMRAM
  2390  000001                     __pcstackCOMRAM:
  2391                           	opt stack 0
  2392  000001                     ??i2_I2C_Master_Wait:
  2393  000001                     ??i2_isdigit:
  2394  000001                     ?i2___wmul:
  2395                           	opt stack 0
  2396  000001                     ?i2___lwmod:
  2397                           	opt stack 0
  2398  000001                     i2lcdNibble@temp:
  2399                           	opt stack 0
  2400  000001                     i2EEPROM_read@address:
  2401                           	opt stack 0
  2402  000001                     i2___wmul@multiplier:
  2403                           	opt stack 0
  2404  000001                     i2___lwmod@dividend:
  2405                           	opt stack 0
  2406  000001                     i2strcpy@to:
  2407                           	opt stack 0
  2408                           
  2409                           ; 2 bytes @ 0x0
  2410  000001                     	ds	1
  2411  000002                     i2I2C_Master_Read@a:
  2412                           	opt stack 0
  2413  000002                     i2lcdNibble@data:
  2414                           	opt stack 0
  2415  000002                     i2_isdigit$1958:
  2416                           	opt stack 0
  2417  000002                     i2I2C_Master_Write@d:
  2418                           	opt stack 0
  2419                           
  2420                           ; 2 bytes @ 0x1
  2421  000002                     	ds	1
  2422  000003                     i2I2C_Master_Read@temp:
  2423                           	opt stack 0
  2424  000003                     i2lcdInst@data:
  2425                           	opt stack 0
  2426  000003                     i2putch@data:
  2427                           	opt stack 0
  2428  000003                     i2isdigit@c:
  2429                           	opt stack 0
  2430  000003                     i2___wmul@multiplicand:
  2431                           	opt stack 0
  2432  000003                     i2___lwmod@divisor:
  2433                           	opt stack 0
  2434  000003                     i2strcpy@from:
  2435                           	opt stack 0
  2436                           
  2437                           ; 2 bytes @ 0x2
  2438  000003                     	ds	1
  2439  000004                     i2getRTC@i:
  2440                           	opt stack 0
  2441                           
  2442                           ; 2 bytes @ 0x3
  2443  000004                     	ds	1
  2444  000005                     i2___lwmod@counter:
  2445                           	opt stack 0
  2446  000005                     i2___wmul@product:
  2447                           	opt stack 0
  2448  000005                     i2strcpy@cp:
  2449                           	opt stack 0
  2450                           
  2451                           ; 2 bytes @ 0x4
  2452  000005                     	ds	1
  2453  000006                     ?i2___lwdiv:
  2454                           	opt stack 0
  2455  000006                     i2___lwdiv@dividend:
  2456                           	opt stack 0
  2457                           
  2458                           ; 2 bytes @ 0x5
  2459  000006                     	ds	1
  2460  000007                     retrieveLog@logNum:
  2461                           	opt stack 0
  2462                           
  2463                           ; 2 bytes @ 0x6
  2464  000007                     	ds	1
  2465  000008                     i2___lwdiv@divisor:
  2466                           	opt stack 0
  2467                           
  2468                           ; 2 bytes @ 0x7
  2469  000008                     	ds	1
  2470  000009                     ??_retrieveLog:
  2471                           
  2472                           ; 1 bytes @ 0x8
  2473  000009                     	ds	1
  2474  00000A                     i2___lwdiv@quotient:
  2475                           	opt stack 0
  2476                           
  2477                           ; 2 bytes @ 0x9
  2478  00000A                     	ds	1
  2479  00000B                     retrieveLog@byte1:
  2480                           	opt stack 0
  2481                           
  2482                           ; 1 bytes @ 0xA
  2483  00000B                     	ds	1
  2484  00000C                     retrieveLog@byte2:
  2485                           	opt stack 0
  2486  00000C                     i2___lwdiv@counter:
  2487                           	opt stack 0
  2488                           
  2489                           ; 1 bytes @ 0xB
  2490  00000C                     	ds	1
  2491  00000D                     ?i2_printf:
  2492                           	opt stack 0
  2493  00000D                     retrieveLog@byte3:
  2494                           	opt stack 0
  2495  00000D                     i2printf@f:
  2496                           	opt stack 0
  2497                           
  2498                           ; 2 bytes @ 0xC
  2499  00000D                     	ds	1
  2500  00000E                     retrieveLog@i:
  2501                           	opt stack 0
  2502                           
  2503                           ; 2 bytes @ 0xD
  2504  00000E                     	ds	2
  2505  000010                     retrieveLog@addr:
  2506                           	opt stack 0
  2507                           
  2508                           ; 2 bytes @ 0xF
  2509  000010                     	ds	2
  2510  000012                     dispLogs@myLog:
  2511                           	opt stack 0
  2512                           
  2513                           ; 2 bytes @ 0x11
  2514  000012                     	ds	2
  2515  000014                     
  2516                           ; 1 bytes @ 0x13
  2517  000014                     	ds	5
  2518  000019                     ??i2_printf:
  2519                           
  2520                           ; 1 bytes @ 0x18
  2521  000019                     	ds	4
  2522  00001D                     i2printf@prec:
  2523                           	opt stack 0
  2524                           
  2525                           ; 1 bytes @ 0x1C
  2526  00001D                     	ds	1
  2527  00001E                     i2printf@cp:
  2528                           	opt stack 0
  2529                           
  2530                           ; 2 bytes @ 0x1D
  2531  00001E                     	ds	2
  2532  000020                     i2printf@ap:
  2533                           	opt stack 0
  2534                           
  2535                           ; 2 bytes @ 0x1F
  2536  000020                     	ds	2
  2537  000022                     i2printf@len:
  2538                           	opt stack 0
  2539                           
  2540                           ; 2 bytes @ 0x21
  2541  000022                     	ds	2
  2542  000024                     i2printf@val:
  2543                           	opt stack 0
  2544                           
  2545                           ; 2 bytes @ 0x23
  2546  000024                     	ds	2
  2547  000026                     i2printf@flag:
  2548                           	opt stack 0
  2549                           
  2550                           ; 1 bytes @ 0x25
  2551  000026                     	ds	1
  2552  000027                     i2printf@c:
  2553                           	opt stack 0
  2554                           
  2555                           ; 1 bytes @ 0x26
  2556  000027                     	ds	1
  2557  000028                     i2printf@width:
  2558                           	opt stack 0
  2559                           
  2560                           ; 2 bytes @ 0x27
  2561  000028                     	ds	2
  2562  00002A                     ??_printSortTimer:
  2563  00002A                     ??i2_printRTC:
  2564  00002A                     ?_inputHandler:
  2565                           	opt stack 0
  2566                           
  2567                           ; 2 bytes @ 0x29
  2568  00002A                     	ds	2
  2569  00002C                     ??_inputHandler:
  2570                           
  2571                           ; 1 bytes @ 0x2B
  2572  00002C                     	ds	1
  2573  00002D                     printSortTimer@hour:
  2574                           	opt stack 0
  2575  00002D                     i2printRTC@INT_time:
  2576                           	opt stack 0
  2577                           
  2578                           ; 14 bytes @ 0x2C
  2579  00002D                     	ds	2
  2580  00002F                     printSortTimer@curTime:
  2581                           	opt stack 0
  2582                           
  2583                           ; 14 bytes @ 0x2E
  2584  00002F                     	ds	12
  2585  00003B                     i2printRTC@RTC_month:
  2586                           	opt stack 0
  2587                           
  2588                           ; 2 bytes @ 0x3A
  2589  00003B                     	ds	2
  2590  00003D                     printSortTimer@start_sec:
  2591                           	opt stack 0
  2592  00003D                     i2printRTC@month:
  2593                           	opt stack 0
  2594                           
  2595                           ; 4 bytes @ 0x3C
  2596  00003D                     	ds	2
  2597  00003F                     printSortTimer@cur_sec:
  2598                           	opt stack 0
  2599                           
  2600                           ; 2 bytes @ 0x3E
  2601  00003F                     	ds	2
  2602  000041                     printSortTimer@min:
  2603                           	opt stack 0
  2604  000041                     i2printRTC@i:
  2605                           	opt stack 0
  2606                           
  2607                           ; 2 bytes @ 0x40
  2608  000041                     	ds	2
  2609  000043                     ??_updateMenu:
  2610  000043                     printSortTimer@sec:
  2611                           	opt stack 0
  2612                           
  2613                           ; 2 bytes @ 0x42
  2614  000043                     	ds	2
  2615  000045                     _printSortTimer$2434:
  2616                           	opt stack 0
  2617                           
  2618                           ; 2 bytes @ 0x44
  2619  000045                     	ds	2
  2620  000047                     printSortTimer@timeDiff:
  2621                           	opt stack 0
  2622                           
  2623                           ; 2 bytes @ 0x46
  2624  000047                     	ds	2
  2625  000049                     printSortTimer@i:
  2626                           	opt stack 0
  2627                           
  2628                           ; 2 bytes @ 0x48
  2629  000049                     	ds	2
  2630  00004B                     ??_handler:
  2631                           
  2632                           ; 1 bytes @ 0x4A
  2633  00004B                     	ds	16
  2634                           tblptru	equ	0xFF8
  2635                           tblptrh	equ	0xFF7
  2636                           tblptrl	equ	0xFF6
  2637                           tablat	equ	0xFF5
  2638                           postinc0	equ	0xFEE
  2639                           wreg	equ	0xFE8
  2640                           postdec1	equ	0xFE5
  2641                           fsr1l	equ	0xFE1
  2642                           
  2643 ;;
  2644 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2645 ;;
  2646 ;; *************** function _main *****************
  2647 ;; Defined at:
  2648 ;;		line 19 in file "main.c"
  2649 ;; Parameters:    Size  Location     Type
  2650 ;;		None
  2651 ;; Auto vars:     Size  Location     Type
  2652 ;;		None
  2653 ;; Return value:  Size  Location     Type
  2654 ;;                  1    wreg      void 
  2655 ;; Registers used:
  2656 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2657 ;; Tracked objects:
  2658 ;;		On entry : 0/0
  2659 ;;		On exit  : 0/0
  2660 ;;		Unchanged: 0/0
  2661 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2662 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2663 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2664 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2665 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2666 ;;Total ram usage:        0 bytes
  2667 ;; Hardware stack levels required when called:   13
  2668 ;; This function calls:
  2669 ;;		_I2C_Master_Init
  2670 ;;		_Test
  2671 ;;		_UI
  2672 ;;		_initLCD
  2673 ;;		_initTime
  2674 ;;		_initUI
  2675 ;;		_logRun
  2676 ;;		_machineConfig
  2677 ;;		_sort
  2678 ;;		_stopSignals
  2679 ;; This function is called by:
  2680 ;;		Startup code after reset
  2681 ;; This function uses a non-reentrant model
  2682 ;;
  2683                           
  2684                           	psect	text0
  2685  003812                     __ptext0:
  2686                           	opt stack 0
  2687  003812                     _main:
  2688                           	opt stack 18
  2689                           
  2690                           ;main.c: 20: machineConfig();
  2691                           
  2692                           ;incstack = 0
  2693  003812  EC52  F020         	call	_machineConfig	;wreg free
  2694                           
  2695                           ;main.c: 21: initLCD();
  2696  003816  ECCC  F021         	call	_initLCD	;wreg free
  2697                           
  2698                           ;main.c: 24: RTCflag = 0;
  2699  00381A  0E00               	movlw	0
  2700  00381C  0100               	movlb	0	; () banked
  2701  00381E  6FDF               	movwf	(_RTCflag+1)& (0+255),b
  2702  003820  0E00               	movlw	0
  2703  003822  6FDE               	movwf	_RTCflag& (0+255),b
  2704                           
  2705                           ;main.c: 25: if(RTCflag){
  2706  003824  0100               	movlb	0	; () banked
  2707  003826  51DE               	movf	_RTCflag& (0+255),w,b
  2708  003828  0100               	movlb	0	; () banked
  2709  00382A  11DF               	iorwf	(_RTCflag+1)& (0+255),w,b
  2710  00382C  B4D8               	btfsc	status,2,c
  2711  00382E  D016               	goto	l8336
  2712                           
  2713                           ; BSR set to: 0
  2714                           ;main.c: 26: initTime(0x42, 0x20, 0x15, 0x04, 0x15, 0x03, 0x17);
  2715  003830  0E20               	movlw	32
  2716  003832  0100               	movlb	0	; () banked
  2717  003834  6F80               	movwf	initTime@m& (0+255),b
  2718  003836  0E15               	movlw	21
  2719  003838  0100               	movlb	0	; () banked
  2720  00383A  6F81               	movwf	initTime@h& (0+255),b
  2721  00383C  0E04               	movlw	4
  2722  00383E  0100               	movlb	0	; () banked
  2723  003840  6F82               	movwf	initTime@w& (0+255),b
  2724  003842  0E15               	movlw	21
  2725  003844  0100               	movlb	0	; () banked
  2726  003846  6F83               	movwf	initTime@DD& (0+255),b
  2727  003848  0E03               	movlw	3
  2728  00384A  0100               	movlb	0	; () banked
  2729  00384C  6F84               	movwf	initTime@MM& (0+255),b
  2730  00384E  0E17               	movlw	23
  2731  003850  0100               	movlb	0	; () banked
  2732  003852  6F85               	movwf	initTime@YY& (0+255),b
  2733  003854  0E42               	movlw	66
  2734  003856  EC7F  F024         	call	_initTime
  2735                           
  2736                           ;main.c: 27: }
  2737  00385A  D00B               	goto	l8338
  2738  00385C                     l8336:
  2739                           
  2740                           ;main.c: 28: else{
  2741                           ;main.c: 29: I2C_Master_Init(10000);
  2742  00385C  0E10               	movlw	16
  2743  00385E  0100               	movlb	0	; () banked
  2744  003860  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  2745  003862  0E27               	movlw	39
  2746  003864  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  2747  003866  0E00               	movlw	0
  2748  003868  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  2749  00386A  0E00               	movlw	0
  2750  00386C  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  2751  00386E  EC22  F020         	call	_I2C_Master_Init	;wreg free
  2752  003872                     l8338:
  2753                           
  2754                           ;main.c: 30: }
  2755                           ;main.c: 32: initUI();
  2756  003872  EC88  F023         	call	_initUI	;wreg free
  2757                           
  2758                           ;main.c: 33: first = 1;
  2759  003876  0E00               	movlw	0
  2760  003878  6E74               	movwf	_first+1,c
  2761  00387A  0E01               	movlw	1
  2762  00387C  6E73               	movwf	_first,c
  2763                           
  2764                           ;main.c: 44: switch(machine_state){
  2765                           
  2766                           ;main.c: 43: while(1){
  2767  00387E  D017               	goto	l8360
  2768  003880                     l8342:
  2769                           
  2770                           ;main.c: 46: UI();
  2771  003880  EC65  F004         	call	_UI	;wreg free
  2772                           
  2773                           ;main.c: 47: break;
  2774  003884  D014               	goto	l8360
  2775  003886                     l8344:
  2776                           
  2777                           ;main.c: 49: sort();
  2778  003886  EC6E  F024         	call	_sort	;wreg free
  2779                           
  2780                           ;main.c: 50: break;
  2781  00388A  D011               	goto	l8360
  2782  00388C                     l8346:
  2783                           
  2784                           ;main.c: 52: stopSignals();
  2785  00388C  ECAB  F024         	call	_stopSignals	;wreg free
  2786                           
  2787                           ;main.c: 53: logRun();
  2788  003890  EC17  F018         	call	_logRun	;wreg free
  2789                           
  2790                           ;main.c: 54: first = 1;
  2791  003894  0E00               	movlw	0
  2792  003896  6E74               	movwf	_first+1,c
  2793  003898  0E01               	movlw	1
  2794  00389A  6E73               	movwf	_first,c
  2795                           
  2796                           ;main.c: 55: UI();
  2797  00389C  EC65  F004         	call	_UI	;wreg free
  2798                           
  2799                           ;main.c: 56: break;
  2800  0038A0  D006               	goto	l8360
  2801  0038A2                     l8354:
  2802                           
  2803                           ;main.c: 58: Test();
  2804  0038A2  ECD9  F019         	call	_Test	;wreg free
  2805                           
  2806                           ;main.c: 59: break;
  2807  0038A6  D003               	goto	l8360
  2808  0038A8                     l8356:
  2809                           
  2810                           ;main.c: 61: stopSignals();
  2811  0038A8  ECAB  F024         	call	_stopSignals	;wreg free
  2812  0038AC                     l487:
  2813  0038AC  D7FF               	goto	l487
  2814  0038AE                     l8360:
  2815  0038AE  0100               	movlb	0	; () banked
  2816  0038B0  51FC               	movf	_machine_state& (0+255),w,b
  2817                           
  2818                           ; Switch size 1, requested type "space"
  2819                           ; Number of cases is 5, Range of values is 0 to 4
  2820                           ; switch strategies available:
  2821                           ; Name         Instructions Cycles
  2822                           ; simple_byte           16     9 (average)
  2823                           ;	Chosen strategy is simple_byte
  2824  0038B2  0A00               	xorlw	0	; case 0
  2825  0038B4  B4D8               	btfsc	status,2,c
  2826  0038B6  D7E4               	goto	l8342
  2827  0038B8  0A01               	xorlw	1	; case 1
  2828  0038BA  B4D8               	btfsc	status,2,c
  2829  0038BC  D7E4               	goto	l8344
  2830  0038BE  0A03               	xorlw	3	; case 2
  2831  0038C0  B4D8               	btfsc	status,2,c
  2832  0038C2  D7E4               	goto	l8346
  2833  0038C4  0A01               	xorlw	1	; case 3
  2834  0038C6  B4D8               	btfsc	status,2,c
  2835  0038C8  D7EC               	goto	l8354
  2836  0038CA  0A07               	xorlw	7	; case 4
  2837  0038CC  B4D8               	btfsc	status,2,c
  2838  0038CE  D7EC               	goto	l8356
  2839                           
  2840                           ; BSR set to: 0
  2841                           
  2842                           ; BSR set to: 0
  2843  0038D0  D7EE               	goto	l8360
  2844  0038D2                     __end_of_main:
  2845                           	opt stack 0
  2846                           tblptru	equ	0xFF8
  2847                           tblptrh	equ	0xFF7
  2848                           tblptrl	equ	0xFF6
  2849                           tablat	equ	0xFF5
  2850                           postinc0	equ	0xFEE
  2851                           wreg	equ	0xFE8
  2852                           postdec1	equ	0xFE5
  2853                           fsr1l	equ	0xFE1
  2854                           status	equ	0xFD8
  2855                           
  2856 ;; *************** function _stopSignals *****************
  2857 ;; Defined at:
  2858 ;;		line 70 in file "main.c"
  2859 ;; Parameters:    Size  Location     Type
  2860 ;;		None
  2861 ;; Auto vars:     Size  Location     Type
  2862 ;;		None
  2863 ;; Return value:  Size  Location     Type
  2864 ;;                  1    wreg      void 
  2865 ;; Registers used:
  2866 ;;		wreg, status,2
  2867 ;; Tracked objects:
  2868 ;;		On entry : 0/0
  2869 ;;		On exit  : 0/0
  2870 ;;		Unchanged: 0/0
  2871 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2872 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2873 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2874 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2875 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2876 ;;Total ram usage:        0 bytes
  2877 ;; Hardware stack levels used:    1
  2878 ;; Hardware stack levels required when called:    7
  2879 ;; This function calls:
  2880 ;;		Nothing
  2881 ;; This function is called by:
  2882 ;;		_main
  2883 ;; This function uses a non-reentrant model
  2884 ;;
  2885                           
  2886                           	psect	text1
  2887  004956                     __ptext1:
  2888                           	opt stack 0
  2889  004956                     _stopSignals:
  2890                           	opt stack 23
  2891                           
  2892                           ;main.c: 71: LATA = 0x00;
  2893                           
  2894                           ; BSR set to: 0
  2895                           ;incstack = 0
  2896  004956  0E00               	movlw	0
  2897  004958  6E89               	movwf	3977,c	;volatile
  2898                           
  2899                           ;main.c: 72: LATB = 0x00;
  2900  00495A  0E00               	movlw	0
  2901  00495C  6E8A               	movwf	3978,c	;volatile
  2902                           
  2903                           ;main.c: 73: LATC = 0x00;
  2904  00495E  0E00               	movlw	0
  2905  004960  6E8B               	movwf	3979,c	;volatile
  2906                           
  2907                           ;main.c: 74: LATD = 0x00;
  2908  004962  0E00               	movlw	0
  2909  004964  6E8C               	movwf	3980,c	;volatile
  2910                           
  2911                           ;main.c: 75: LATE = 0x00;
  2912  004966  0E00               	movlw	0
  2913  004968  6E8D               	movwf	3981,c	;volatile
  2914  00496A  0012               	return		;funcret
  2915  00496C                     __end_of_stopSignals:
  2916                           	opt stack 0
  2917                           tblptru	equ	0xFF8
  2918                           tblptrh	equ	0xFF7
  2919                           tblptrl	equ	0xFF6
  2920                           tablat	equ	0xFF5
  2921                           postinc0	equ	0xFEE
  2922                           wreg	equ	0xFE8
  2923                           postdec1	equ	0xFE5
  2924                           fsr1l	equ	0xFE1
  2925                           status	equ	0xFD8
  2926                           
  2927 ;; *************** function _sort *****************
  2928 ;; Defined at:
  2929 ;;		line 55 in file "sort.c"
  2930 ;; Parameters:    Size  Location     Type
  2931 ;;		None
  2932 ;; Auto vars:     Size  Location     Type
  2933 ;;		None
  2934 ;; Return value:  Size  Location     Type
  2935 ;;                  1    wreg      void 
  2936 ;; Registers used:
  2937 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2938 ;; Tracked objects:
  2939 ;;		On entry : 0/0
  2940 ;;		On exit  : 0/0
  2941 ;;		Unchanged: 0/0
  2942 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2943 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2944 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2945 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2946 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2947 ;;Total ram usage:        0 bytes
  2948 ;; Hardware stack levels used:    1
  2949 ;; Hardware stack levels required when called:   12
  2950 ;; This function calls:
  2951 ;;		_Distribution
  2952 ;;		_ID
  2953 ;;		_Loading
  2954 ;; This function is called by:
  2955 ;;		_main
  2956 ;; This function uses a non-reentrant model
  2957 ;;
  2958                           
  2959                           	psect	text2
  2960  0048DC                     __ptext2:
  2961                           	opt stack 0
  2962  0048DC                     _sort:
  2963                           	opt stack 18
  2964                           
  2965                           ;sort.c: 56: if(machine_state == Sorting_state){
  2966                           
  2967                           ;incstack = 0
  2968  0048DC  0100               	movlb	0	; () banked
  2969  0048DE  05FC               	decf	_machine_state& (0+255),w,b
  2970  0048E0  B4D8               	btfsc	status,2,c
  2971                           
  2972                           ; BSR set to: 0
  2973                           ;sort.c: 57: Loading();
  2974  0048E2  EC92  F016         	call	_Loading	;wreg free
  2975                           
  2976                           ;sort.c: 58: }
  2977                           ;sort.c: 59: if(machine_state == Sorting_state){
  2978  0048E6  0100               	movlb	0	; () banked
  2979  0048E8  05FC               	decf	_machine_state& (0+255),w,b
  2980  0048EA  B4D8               	btfsc	status,2,c
  2981                           
  2982                           ; BSR set to: 0
  2983                           ;sort.c: 60: ID();
  2984  0048EC  EC48  F019         	call	_ID	;wreg free
  2985                           
  2986                           ;sort.c: 61: }
  2987                           ;sort.c: 62: if(machine_state == Sorting_state){
  2988  0048F0  0100               	movlb	0	; () banked
  2989  0048F2  05FC               	decf	_machine_state& (0+255),w,b
  2990  0048F4  A4D8               	btfss	status,2,c
  2991  0048F6  0012               	return	
  2992                           
  2993                           ; BSR set to: 0
  2994                           ;sort.c: 63: Distribution();
  2995  0048F8  ECAC  F013         	call	_Distribution	;wreg free
  2996  0048FC  0012               	return	
  2997  0048FE                     __end_of_sort:
  2998                           	opt stack 0
  2999                           tblptru	equ	0xFF8
  3000                           tblptrh	equ	0xFF7
  3001                           tblptrl	equ	0xFF6
  3002                           tablat	equ	0xFF5
  3003                           postinc0	equ	0xFEE
  3004                           wreg	equ	0xFE8
  3005                           postdec1	equ	0xFE5
  3006                           fsr1l	equ	0xFE1
  3007                           status	equ	0xFD8
  3008                           
  3009 ;; *************** function _Loading *****************
  3010 ;; Defined at:
  3011 ;;		line 67 in file "sort.c"
  3012 ;; Parameters:    Size  Location     Type
  3013 ;;		None
  3014 ;; Auto vars:     Size  Location     Type
  3015 ;;  i               2   54[BANK0 ] int 
  3016 ;;  i               2   56[BANK0 ] int 
  3017 ;;  addr            2   51[BANK0 ] unsigned short 
  3018 ;;  byte1           1   53[BANK0 ] unsigned char 
  3019 ;; Return value:  Size  Location     Type
  3020 ;;                  1    wreg      void 
  3021 ;; Registers used:
  3022 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3023 ;; Tracked objects:
  3024 ;;		On entry : 0/0
  3025 ;;		On exit  : 0/0
  3026 ;;		Unchanged: 0/0
  3027 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3028 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3029 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3030 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3031 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3032 ;;Total ram usage:        9 bytes
  3033 ;; Hardware stack levels used:    1
  3034 ;; Hardware stack levels required when called:   11
  3035 ;; This function calls:
  3036 ;;		_EEPROM_read
  3037 ;;		_EEPROM_write
  3038 ;;		_delay_ms
  3039 ;;		_getIR
  3040 ;;		_initGlobalVars
  3041 ;;		_initServos
  3042 ;;		_initSortTimer
  3043 ;;		_lcdInst
  3044 ;; This function is called by:
  3045 ;;		_sort
  3046 ;; This function uses a non-reentrant model
  3047 ;;
  3048                           
  3049                           	psect	text3
  3050  002D24                     __ptext3:
  3051                           	opt stack 0
  3052  002D24                     _Loading:
  3053                           	opt stack 18
  3054                           
  3055                           ;sort.c: 68: if(first){
  3056                           
  3057                           ;incstack = 0
  3058  002D24  5073               	movf	_first,w,c
  3059  002D26  1074               	iorwf	_first+1,w,c
  3060  002D28  B4D8               	btfsc	status,2,c
  3061  002D2A  D074               	goto	l6574
  3062                           
  3063                           ;sort.c: 69: initGlobalVars();
  3064  002D2C  EC89  F01F         	call	_initGlobalVars	;wreg free
  3065                           
  3066                           ;sort.c: 70: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  3067  002D30  0E01               	movlw	1
  3068  002D32  ECDC  F024         	call	_lcdInst
  3069  002D36  0E68               	movlw	104
  3070  002D38  0100               	movlb	0	; () banked
  3071  002D3A  6FB1               	movwf	??_Loading& (0+255),b
  3072  002D3C  0EE4               	movlw	228
  3073  002D3E                     u7357:
  3074  002D3E  2EE8               	decfsz	wreg,f,c
  3075  002D40  D7FE               	bra	u7357
  3076  002D42  2FB1               	decfsz	??_Loading& (0+255),f,b
  3077  002D44  D7FC               	bra	u7357
  3078  002D46  F000               	nop	
  3079                           
  3080                           ;sort.c: 71: initSortTimer();
  3081  002D48  EC26  F01D         	call	_initSortTimer	;wreg free
  3082                           
  3083                           ;sort.c: 72: LATCbits.LATC5 = 1;
  3084  002D4C  8A8B               	bsf	3979,5,c	;volatile
  3085                           
  3086                           ;sort.c: 77: sel = EEPROM_read(0);
  3087  002D4E  0E00               	movlw	0
  3088  002D50  0100               	movlb	0	; () banked
  3089  002D52  6F81               	movwf	(EEPROM_read@address+1)& (0+255),b
  3090  002D54  0E00               	movlw	0
  3091  002D56  6F80               	movwf	EEPROM_read@address& (0+255),b
  3092  002D58  EC9F  F024         	call	_EEPROM_read	;wreg free
  3093  002D5C  0100               	movlb	0	; () banked
  3094  002D5E  6FFD               	movwf	_sel& (0+255),b
  3095                           
  3096                           ; BSR set to: 0
  3097                           ;sort.c: 78: unsigned short addr = 1 + 11 * sel;
  3098  002D60  0100               	movlb	0	; () banked
  3099  002D62  51FD               	movf	_sel& (0+255),w,b
  3100  002D64  0D0B               	mullw	11
  3101  002D66  0E01               	movlw	1
  3102  002D68  24F3               	addwf	prodl,w,c
  3103  002D6A  0100               	movlb	0	; () banked
  3104  002D6C  6FB3               	movwf	Loading@addr& (0+255),b
  3105  002D6E  0E00               	movlw	0
  3106  002D70  20F4               	addwfc	prodh,w,c
  3107  002D72  0100               	movlb	0	; () banked
  3108  002D74  6FB4               	movwf	(Loading@addr+1)& (0+255),b
  3109                           
  3110                           ; BSR set to: 0
  3111                           ;sort.c: 79: unsigned char byte1 = 0b01111111;
  3112  002D76  0E7F               	movlw	127
  3113  002D78  0100               	movlb	0	; () banked
  3114  002D7A  6FB5               	movwf	Loading@byte1& (0+255),b
  3115                           
  3116                           ; BSR set to: 0
  3117                           ;sort.c: 80: EEPROM_write(addr, byte1);
  3118  002D7C  C0B3  F0AB         	movff	Loading@addr,EEPROM_write@address
  3119  002D80  C0B4  F0AC         	movff	Loading@addr+1,EEPROM_write@address+1
  3120  002D84  C0B5  F0AD         	movff	Loading@byte1,EEPROM_write@data
  3121  002D88  EC63  F01A         	call	_EEPROM_write	;wreg free
  3122                           
  3123                           ;sort.c: 83: LATAbits.LATA5 = 0;
  3124  002D8C  9A89               	bcf	3977,5,c	;volatile
  3125                           
  3126                           ;sort.c: 85: for(int i=0; i<46; i++){
  3127  002D8E  0E00               	movlw	0
  3128  002D90  0100               	movlb	0	; () banked
  3129  002D92  6FB9               	movwf	(Loading@i+1)& (0+255),b
  3130  002D94  0E00               	movlw	0
  3131  002D96  6FB8               	movwf	Loading@i& (0+255),b
  3132                           
  3133                           ; BSR set to: 0
  3134  002D98  0100               	movlb	0	; () banked
  3135  002D9A  BFB9               	btfsc	(Loading@i+1)& (0+255),7,b
  3136  002D9C  D008               	goto	l6562
  3137  002D9E  0100               	movlb	0	; () banked
  3138  002DA0  51B9               	movf	(Loading@i+1)& (0+255),w,b
  3139  002DA2  E126               	bnz	l730
  3140  002DA4  0E2E               	movlw	46
  3141  002DA6  0100               	movlb	0	; () banked
  3142  002DA8  5DB8               	subwf	Loading@i& (0+255),w,b
  3143  002DAA  B0D8               	btfsc	status,0,c
  3144  002DAC  D021               	goto	l730
  3145  002DAE                     l6562:
  3146                           
  3147                           ; BSR set to: 0
  3148                           ;sort.c: 86: LATAbits.LATA5 = !LATAbits.LATA5;
  3149  002DAE  BA89               	btfsc	3977,5,c	;volatile
  3150  002DB0  D004               	goto	u4970
  3151  002DB2  0100               	movlb	0	; () banked
  3152  002DB4  6BB1               	clrf	??_Loading& (0+255),b
  3153  002DB6  2BB1               	incf	??_Loading& (0+255),f,b
  3154  002DB8  D002               	goto	u4988
  3155  002DBA                     u4970:
  3156  002DBA  0100               	movlb	0	; () banked
  3157  002DBC  6BB1               	clrf	??_Loading& (0+255),b
  3158  002DBE                     u4988:
  3159  002DBE  0100               	movlb	0	; () banked
  3160  002DC0  3BB1               	swapf	??_Loading& (0+255),f,b
  3161  002DC2  47B1               	rlncf	??_Loading& (0+255),f,b
  3162  002DC4  5089               	movf	3977,w,c	;volatile
  3163  002DC6  0100               	movlb	0	; () banked
  3164  002DC8  19B1               	xorwf	??_Loading& (0+255),w,b
  3165  002DCA  0BDF               	andlw	-33
  3166  002DCC  19B1               	xorwf	??_Loading& (0+255),w,b
  3167  002DCE  6E89               	movwf	3977,c	;volatile
  3168                           
  3169                           ; BSR set to: 0
  3170                           ;sort.c: 87: delay_ms(45-i);
  3171  002DD0  0100               	movlb	0	; () banked
  3172  002DD2  51B8               	movf	Loading@i& (0+255),w,b
  3173  002DD4  0800               	sublw	0
  3174  002DD6  0F2D               	addlw	45
  3175  002DD8  EC0E  F024         	call	_delay_ms
  3176  002DDC  0100               	movlb	0	; () banked
  3177  002DDE  4BB8               	infsnz	Loading@i& (0+255),f,b
  3178  002DE0  2BB9               	incf	(Loading@i+1)& (0+255),f,b
  3179                           
  3180                           ; BSR set to: 0
  3181  002DE2  0100               	movlb	0	; () banked
  3182  002DE4  BFB9               	btfsc	(Loading@i+1)& (0+255),7,b
  3183  002DE6  D7E3               	goto	l6562
  3184  002DE8  0100               	movlb	0	; () banked
  3185  002DEA  51B9               	movf	(Loading@i+1)& (0+255),w,b
  3186  002DEC  E101               	bnz	u4990
  3187  002DEE  D7DA               	goto	L1
  3188  002DF0                     u4990:
  3189  002DF0                     l730:
  3190                           
  3191                           ; BSR set to: 0
  3192                           ;sort.c: 88: }
  3193                           ;sort.c: 89: LATAbits.LATA5 = 1;
  3194  002DF0  8A89               	bsf	3977,5,c	;volatile
  3195                           
  3196                           ; BSR set to: 0
  3197                           ;sort.c: 92: initServos();
  3198  002DF2  ECAE  F020         	call	_initServos	;wreg free
  3199                           
  3200                           ;sort.c: 93: _delay((unsigned long)((5000)*(32000000/4000.0)));
  3201  002DF6  0ECB               	movlw	203
  3202  002DF8  0100               	movlb	0	; () banked
  3203  002DFA  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3204  002DFC  0EEC               	movlw	236
  3205  002DFE  0100               	movlb	0	; () banked
  3206  002E00  6FB1               	movwf	??_Loading& (0+255),b
  3207  002E02  0E84               	movlw	132
  3208  002E04                     u7367:
  3209  002E04  2EE8               	decfsz	wreg,f,c
  3210  002E06  D7FE               	bra	u7367
  3211  002E08  2FB1               	decfsz	??_Loading& (0+255),f,b
  3212  002E0A  D7FC               	bra	u7367
  3213  002E0C  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3214  002E0E  D7FA               	bra	u7367
  3215  002E10  F000               	nop	
  3216                           
  3217                           ;sort.c: 94: }
  3218  002E12  0012               	return	
  3219  002E14                     l6574:
  3220                           
  3221                           ;sort.c: 95: else{
  3222                           ;sort.c: 98: if(!f_loadingNewCan){
  3223  002E14  0100               	movlb	0	; () banked
  3224  002E16  51E4               	movf	_f_loadingNewCan& (0+255),w,b
  3225  002E18  0100               	movlb	0	; () banked
  3226  002E1A  11E5               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  3227  002E1C  A4D8               	btfss	status,2,c
  3228  002E1E  D017               	goto	l6590
  3229                           
  3230                           ; BSR set to: 0
  3231                           ;sort.c: 100: getIR();
  3232  002E20  EC06  F021         	call	_getIR	;wreg free
  3233                           
  3234                           ;sort.c: 102: if(!f_loadingNewCan){
  3235  002E24  0100               	movlb	0	; () banked
  3236  002E26  51E4               	movf	_f_loadingNewCan& (0+255),w,b
  3237  002E28  0100               	movlb	0	; () banked
  3238  002E2A  11E5               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  3239  002E2C  B4D8               	btfsc	status,2,c
  3240  002E2E  0012               	return	
  3241                           
  3242                           ; BSR set to: 0
  3243                           ;sort.c: 106: else{
  3244                           ;sort.c: 107: count_total++;
  3245                           
  3246                           ; BSR set to: 0
  3247                           
  3248                           ; BSR set to: 0
  3249                           ;sort.c: 104: }
  3250                           
  3251                           ; BSR set to: 0
  3252                           ;sort.c: 103: return;
  3253  002E30  0100               	movlb	0	; () banked
  3254  002E32  4BFE               	infsnz	_count_total& (0+255),f,b
  3255  002E34  2BFF               	incf	(_count_total+1)& (0+255),f,b
  3256                           
  3257                           ; BSR set to: 0
  3258                           ;sort.c: 108: if(count_total == 12){
  3259  002E36  0E0C               	movlw	12
  3260  002E38  0100               	movlb	0	; () banked
  3261  002E3A  19FE               	xorwf	_count_total& (0+255),w,b
  3262  002E3C  0100               	movlb	0	; () banked
  3263  002E3E  11FF               	iorwf	(_count_total+1)& (0+255),w,b
  3264  002E40  A4D8               	btfss	status,2,c
  3265  002E42  0012               	return	
  3266                           
  3267                           ; BSR set to: 0
  3268                           ;sort.c: 109: f_lastCan = 1;
  3269  002E44  0E00               	movlw	0
  3270  002E46  6E72               	movwf	_f_lastCan+1,c
  3271  002E48  0E01               	movlw	1
  3272  002E4A  6E71               	movwf	_f_lastCan,c
  3273                           
  3274                           ; BSR set to: 0
  3275                           ;sort.c: 110: }
  3276                           ;sort.c: 111: }
  3277                           ;sort.c: 112: }
  3278                           
  3279                           ; BSR set to: 0
  3280  002E4C  0012               	return	
  3281  002E4E                     l6590:
  3282                           
  3283                           ; BSR set to: 0
  3284                           ;sort.c: 115: else if(f_ID_receive){
  3285  002E4E  506B               	movf	_f_ID_receive,w,c
  3286  002E50  106C               	iorwf	_f_ID_receive+1,w,c
  3287  002E52  B4D8               	btfsc	status,2,c
  3288  002E54  0012               	return	
  3289                           
  3290                           ; BSR set to: 0
  3291                           ;sort.c: 116: f_loadingNewCan = 0;
  3292  002E56  0E00               	movlw	0
  3293  002E58  0100               	movlb	0	; () banked
  3294  002E5A  6FE5               	movwf	(_f_loadingNewCan+1)& (0+255),b
  3295  002E5C  0E00               	movlw	0
  3296  002E5E  6FE4               	movwf	_f_loadingNewCan& (0+255),b
  3297                           
  3298                           ; BSR set to: 0
  3299                           ;sort.c: 117: _delay((unsigned long)((1500)*(32000000/4000.0)));
  3300  002E60  0E3D               	movlw	61
  3301  002E62  0100               	movlb	0	; () banked
  3302  002E64  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3303  002E66  0EE1               	movlw	225
  3304  002E68  0100               	movlb	0	; () banked
  3305  002E6A  6FB1               	movwf	??_Loading& (0+255),b
  3306  002E6C  0E3F               	movlw	63
  3307  002E6E                     u7377:
  3308  002E6E  2EE8               	decfsz	wreg,f,c
  3309  002E70  D7FE               	bra	u7377
  3310  002E72  2FB1               	decfsz	??_Loading& (0+255),f,b
  3311  002E74  D7FC               	bra	u7377
  3312  002E76  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3313  002E78  D7FA               	bra	u7377
  3314  002E7A  D000               	nop2	
  3315                           
  3316                           ;sort.c: 119: for(int i = 0; i<3000; i++){
  3317  002E7C  0E00               	movlw	0
  3318  002E7E  0100               	movlb	0	; () banked
  3319  002E80  6FB7               	movwf	(Loading@i_1098+1)& (0+255),b
  3320  002E82  0E00               	movlw	0
  3321  002E84  6FB6               	movwf	Loading@i_1098& (0+255),b
  3322  002E86                     l6598:
  3323                           
  3324                           ; BSR set to: 0
  3325  002E86  0100               	movlb	0	; () banked
  3326  002E88  BFB7               	btfsc	(Loading@i_1098+1)& (0+255),7,b
  3327  002E8A  D008               	goto	l739
  3328  002E8C  0EB8               	movlw	184
  3329  002E8E  0100               	movlb	0	; () banked
  3330  002E90  5DB6               	subwf	Loading@i_1098& (0+255),w,b
  3331  002E92  0E0B               	movlw	11
  3332  002E94  0100               	movlb	0	; () banked
  3333  002E96  59B7               	subwfb	(Loading@i_1098+1)& (0+255),w,b
  3334  002E98  B0D8               	btfsc	status,0,c
  3335  002E9A  D00D               	goto	l6608
  3336  002E9C                     l739:
  3337                           
  3338                           ; BSR set to: 0
  3339                           ;sort.c: 120: LATAbits.LATA4 = 1;
  3340  002E9C  8889               	bsf	3977,4,c	;volatile
  3341                           
  3342                           ; BSR set to: 0
  3343                           ;sort.c: 121: _delay((unsigned long)((70)*(32000000/4000000.0)));
  3344  002E9E  0EBA               	movlw	186
  3345  002EA0                     u7387:
  3346  002EA0  2EE8               	decfsz	wreg,f,c
  3347  002EA2  D7FE               	bra	u7387
  3348  002EA4  D000               	nop2	
  3349                           
  3350                           ;sort.c: 122: LATAbits.LATA4 = 0;
  3351  002EA6  9889               	bcf	3977,4,c	;volatile
  3352                           
  3353                           ;sort.c: 123: _delay((unsigned long)((30)*(32000000/4000000.0)));
  3354  002EA8  0E50               	movlw	80
  3355  002EAA                     u7397:
  3356  002EAA  2EE8               	decfsz	wreg,f,c
  3357  002EAC  D7FE               	bra	u7397
  3358  002EAE  0100               	movlb	0	; () banked
  3359  002EB0  4BB6               	infsnz	Loading@i_1098& (0+255),f,b
  3360  002EB2  2BB7               	incf	(Loading@i_1098+1)& (0+255),f,b
  3361  002EB4  D7E8               	goto	l6598
  3362  002EB6                     l6608:
  3363                           
  3364                           ; BSR set to: 0
  3365                           ;sort.c: 124: }
  3366                           ;sort.c: 126: f_can_coming_to_ID = 1;
  3367  002EB6  0E00               	movlw	0
  3368  002EB8  6E6E               	movwf	_f_can_coming_to_ID+1,c
  3369  002EBA  0E01               	movlw	1
  3370  002EBC  6E6D               	movwf	_f_can_coming_to_ID,c
  3371                           
  3372                           ; BSR set to: 0
  3373                           
  3374                           ; BSR set to: 0
  3375  002EBE  0012               	return	
  3376  002EC0                     __end_of_Loading:
  3377                           	opt stack 0
  3378                           tblptru	equ	0xFF8
  3379                           tblptrh	equ	0xFF7
  3380                           tblptrl	equ	0xFF6
  3381                           tablat	equ	0xFF5
  3382                           prodh	equ	0xFF4
  3383                           prodl	equ	0xFF3
  3384                           postinc0	equ	0xFEE
  3385                           wreg	equ	0xFE8
  3386                           postdec1	equ	0xFE5
  3387                           fsr1l	equ	0xFE1
  3388                           status	equ	0xFD8
  3389                           
  3390 ;; *************** function _initSortTimer *****************
  3391 ;; Defined at:
  3392 ;;		line 280 in file "sort.c"
  3393 ;; Parameters:    Size  Location     Type
  3394 ;;		None
  3395 ;; Auto vars:     Size  Location     Type
  3396 ;;  i               2    8[BANK0 ] int 
  3397 ;; Return value:  Size  Location     Type
  3398 ;;                  1    wreg      void 
  3399 ;; Registers used:
  3400 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3401 ;; Tracked objects:
  3402 ;;		On entry : 0/0
  3403 ;;		On exit  : 0/0
  3404 ;;		Unchanged: 0/0
  3405 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3406 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3407 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3408 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3409 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3410 ;;Total ram usage:        5 bytes
  3411 ;; Hardware stack levels used:    1
  3412 ;; Hardware stack levels required when called:   10
  3413 ;; This function calls:
  3414 ;;		_getRTC
  3415 ;; This function is called by:
  3416 ;;		_Loading
  3417 ;; This function uses a non-reentrant model
  3418 ;;
  3419                           
  3420                           	psect	text4
  3421  003A4C                     __ptext4:
  3422                           	opt stack 0
  3423  003A4C                     _initSortTimer:
  3424                           	opt stack 18
  3425                           
  3426                           ;sort.c: 282: getRTC();
  3427                           
  3428                           ;incstack = 0
  3429  003A4C  EC12  F01E         	call	_getRTC	;wreg free
  3430                           
  3431                           ;sort.c: 283: for(int i = 0; i < 7; i++){
  3432  003A50  0E00               	movlw	0
  3433  003A52  0100               	movlb	0	; () banked
  3434  003A54  6F89               	movwf	(initSortTimer@i+1)& (0+255),b
  3435  003A56  0E00               	movlw	0
  3436  003A58  6F88               	movwf	initSortTimer@i& (0+255),b
  3437  003A5A                     l6158:
  3438                           
  3439                           ; BSR set to: 0
  3440  003A5A  0100               	movlb	0	; () banked
  3441  003A5C  BF89               	btfsc	(initSortTimer@i+1)& (0+255),7,b
  3442  003A5E  D008               	goto	l6162
  3443  003A60  0100               	movlb	0	; () banked
  3444  003A62  5189               	movf	(initSortTimer@i+1)& (0+255),w,b
  3445  003A64  E140               	bnz	l6168
  3446  003A66  0E07               	movlw	7
  3447  003A68  0100               	movlb	0	; () banked
  3448  003A6A  5D88               	subwf	initSortTimer@i& (0+255),w,b
  3449  003A6C  B0D8               	btfsc	status,0,c
  3450  003A6E  D03B               	goto	l6168
  3451  003A70                     l6162:
  3452                           
  3453                           ; BSR set to: 0
  3454                           ;sort.c: 284: startTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  3455  003A70  0E24               	movlw	low _time
  3456  003A72  0100               	movlb	0	; () banked
  3457  003A74  2588               	addwf	initSortTimer@i& (0+255),w,b
  3458  003A76  6ED9               	movwf	fsr2l,c
  3459  003A78  0E01               	movlw	high _time
  3460  003A7A  0100               	movlb	0	; () banked
  3461  003A7C  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  3462  003A7E  6EDA               	movwf	fsr2h,c
  3463  003A80  50DF               	movf	indf2,w,c
  3464  003A82  0100               	movlb	0	; () banked
  3465  003A84  6F85               	movwf	??_initSortTimer& (0+255),b
  3466  003A86  0100               	movlb	0	; () banked
  3467  003A88  3B85               	swapf	??_initSortTimer& (0+255),f,b
  3468  003A8A  0E0F               	movlw	15
  3469  003A8C  1785               	andwf	??_initSortTimer& (0+255),f,b
  3470  003A8E  0E0F               	movlw	15
  3471  003A90  0100               	movlb	0	; () banked
  3472  003A92  1785               	andwf	??_initSortTimer& (0+255),f,b
  3473  003A94  0100               	movlb	0	; () banked
  3474  003A96  5185               	movf	??_initSortTimer& (0+255),w,b
  3475  003A98  0D0A               	mullw	10
  3476  003A9A  0E24               	movlw	low _time
  3477  003A9C  0100               	movlb	0	; () banked
  3478  003A9E  2588               	addwf	initSortTimer@i& (0+255),w,b
  3479  003AA0  6ED9               	movwf	fsr2l,c
  3480  003AA2  0E01               	movlw	high _time
  3481  003AA4  0100               	movlb	0	; () banked
  3482  003AA6  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  3483  003AA8  6EDA               	movwf	fsr2h,c
  3484  003AAA  50DF               	movf	indf2,w,c
  3485  003AAC  0B0F               	andlw	15
  3486  003AAE  0100               	movlb	0	; () banked
  3487  003AB0  6F86               	movwf	(??_initSortTimer+1)& (0+255),b
  3488  003AB2  6B87               	clrf	(??_initSortTimer+2)& (0+255),b
  3489  003AB4  50F3               	movf	prodl,w,c
  3490  003AB6  0100               	movlb	0	; () banked
  3491  003AB8  2786               	addwf	(??_initSortTimer+1)& (0+255),f,b
  3492  003ABA  50F4               	movf	prodh,w,c
  3493  003ABC  0100               	movlb	0	; () banked
  3494  003ABE  2387               	addwfc	(??_initSortTimer+2)& (0+255),f,b
  3495  003AC0  90D8               	bcf	status,0,c
  3496  003AC2  0100               	movlb	0	; () banked
  3497  003AC4  3588               	rlcf	initSortTimer@i& (0+255),w,b
  3498  003AC6  6ED9               	movwf	fsr2l,c
  3499  003AC8  0100               	movlb	0	; () banked
  3500  003ACA  3589               	rlcf	(initSortTimer@i+1)& (0+255),w,b
  3501  003ACC  6EDA               	movwf	fsr2h,c
  3502  003ACE  0E0E               	movlw	low _startTime
  3503  003AD0  26D9               	addwf	fsr2l,f,c
  3504  003AD2  0E01               	movlw	high _startTime
  3505  003AD4  22DA               	addwfc	fsr2h,f,c
  3506  003AD6  C086  FFDE         	movff	??_initSortTimer+1,postinc2
  3507  003ADA  C087  FFDD         	movff	??_initSortTimer+2,postdec2
  3508                           
  3509                           ; BSR set to: 0
  3510  003ADE  0100               	movlb	0	; () banked
  3511  003AE0  4B88               	infsnz	initSortTimer@i& (0+255),f,b
  3512  003AE2  2B89               	incf	(initSortTimer@i+1)& (0+255),f,b
  3513  003AE4  D7BA               	goto	l6158
  3514  003AE6                     l6168:
  3515                           
  3516                           ; BSR set to: 0
  3517                           ;sort.c: 285: }
  3518                           ;sort.c: 287: T0CON = 0b00010111;
  3519  003AE6  0E17               	movlw	23
  3520  003AE8  6ED5               	movwf	4053,c	;volatile
  3521                           
  3522                           ;sort.c: 296: TMR0H = 0b10000101;
  3523  003AEA  0E85               	movlw	133
  3524  003AEC  6ED7               	movwf	4055,c	;volatile
  3525                           
  3526                           ;sort.c: 297: TMR0L = 0b11101110;
  3527  003AEE  0EEE               	movlw	238
  3528  003AF0  6ED6               	movwf	4054,c	;volatile
  3529                           
  3530                           ; BSR set to: 0
  3531                           ;sort.c: 298: TMR0ON = 1;
  3532  003AF2  8ED5               	bsf	4053,7,c	;volatile
  3533                           
  3534                           ; BSR set to: 0
  3535  003AF4  0012               	return		;funcret
  3536  003AF6                     __end_of_initSortTimer:
  3537                           	opt stack 0
  3538                           tblptru	equ	0xFF8
  3539                           tblptrh	equ	0xFF7
  3540                           tblptrl	equ	0xFF6
  3541                           tablat	equ	0xFF5
  3542                           prodh	equ	0xFF4
  3543                           prodl	equ	0xFF3
  3544                           postinc0	equ	0xFEE
  3545                           wreg	equ	0xFE8
  3546                           postdec1	equ	0xFE5
  3547                           fsr1l	equ	0xFE1
  3548                           indf2	equ	0xFDF
  3549                           postinc2	equ	0xFDE
  3550                           postdec2	equ	0xFDD
  3551                           fsr2h	equ	0xFDA
  3552                           fsr2l	equ	0xFD9
  3553                           status	equ	0xFD8
  3554                           
  3555 ;; *************** function _initGlobalVars *****************
  3556 ;; Defined at:
  3557 ;;		line 261 in file "sort.c"
  3558 ;; Parameters:    Size  Location     Type
  3559 ;;		None
  3560 ;; Auto vars:     Size  Location     Type
  3561 ;;		None
  3562 ;; Return value:  Size  Location     Type
  3563 ;;                  1    wreg      void 
  3564 ;; Registers used:
  3565 ;;		wreg, status,2
  3566 ;; Tracked objects:
  3567 ;;		On entry : 0/0
  3568 ;;		On exit  : 0/0
  3569 ;;		Unchanged: 0/0
  3570 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3571 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3572 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3573 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3574 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3575 ;;Total ram usage:        0 bytes
  3576 ;; Hardware stack levels used:    1
  3577 ;; Hardware stack levels required when called:    7
  3578 ;; This function calls:
  3579 ;;		Nothing
  3580 ;; This function is called by:
  3581 ;;		_Loading
  3582 ;; This function uses a non-reentrant model
  3583 ;;
  3584                           
  3585                           	psect	text5
  3586  003F12                     __ptext5:
  3587                           	opt stack 0
  3588  003F12                     _initGlobalVars:
  3589                           	opt stack 21
  3590                           
  3591                           ;sort.c: 263: first = 0;
  3592                           
  3593                           ; BSR set to: 0
  3594                           ;incstack = 0
  3595  003F12  0E00               	movlw	0
  3596  003F14  6E74               	movwf	_first+1,c
  3597  003F16  0E00               	movlw	0
  3598  003F18  6E73               	movwf	_first,c
  3599                           
  3600                           ;sort.c: 266: f_loadingNewCan = 0;
  3601  003F1A  0E00               	movlw	0
  3602  003F1C  0100               	movlb	0	; () banked
  3603  003F1E  6FE5               	movwf	(_f_loadingNewCan+1)& (0+255),b
  3604  003F20  0E00               	movlw	0
  3605  003F22  6FE4               	movwf	_f_loadingNewCan& (0+255),b
  3606                           
  3607                           ;sort.c: 267: f_lastCan = 0;
  3608  003F24  0E00               	movlw	0
  3609  003F26  6E72               	movwf	_f_lastCan+1,c
  3610  003F28  0E00               	movlw	0
  3611  003F2A  6E71               	movwf	_f_lastCan,c
  3612                           
  3613                           ;sort.c: 268: f_ID_receive = 1;
  3614  003F2C  0E00               	movlw	0
  3615  003F2E  6E6C               	movwf	_f_ID_receive+1,c
  3616  003F30  0E01               	movlw	1
  3617  003F32  6E6B               	movwf	_f_ID_receive,c
  3618                           
  3619                           ;sort.c: 269: f_can_coming_to_ID = 0;
  3620  003F34  0E00               	movlw	0
  3621  003F36  6E6E               	movwf	_f_can_coming_to_ID+1,c
  3622  003F38  0E00               	movlw	0
  3623  003F3A  6E6D               	movwf	_f_can_coming_to_ID,c
  3624                           
  3625                           ;sort.c: 270: f_can_coming_to_distribution = 0;
  3626  003F3C  0E00               	movlw	0
  3627  003F3E  6E70               	movwf	_f_can_coming_to_distribution+1,c
  3628  003F40  0E00               	movlw	0
  3629  003F42  6E6F               	movwf	_f_can_coming_to_distribution,c
  3630                           
  3631                           ;sort.c: 271: f_can_distributed = 0;
  3632  003F44  0E00               	movlw	0
  3633  003F46  0101               	movlb	1	; () banked
  3634  003F48  6F2C               	movwf	(_f_can_distributed+1)& (0+255),b
  3635  003F4A  0E00               	movlw	0
  3636  003F4C  6F2B               	movwf	_f_can_distributed& (0+255),b
  3637                           
  3638                           ;sort.c: 274: count_total = 0;
  3639  003F4E  0E00               	movlw	0
  3640  003F50  0100               	movlb	0	; () banked
  3641  003F52  6FFF               	movwf	(_count_total+1)& (0+255),b
  3642  003F54  0E00               	movlw	0
  3643  003F56  6FFE               	movwf	_count_total& (0+255),b
  3644                           
  3645                           ;sort.c: 275: count_pop_no_tab = 0;
  3646  003F58  0E00               	movlw	0
  3647  003F5A  6E62               	movwf	_count_pop_no_tab+1,c
  3648  003F5C  0E00               	movlw	0
  3649  003F5E  6E61               	movwf	_count_pop_no_tab,c
  3650                           
  3651                           ;sort.c: 276: count_pop_w_tab = 0;
  3652  003F60  0E00               	movlw	0
  3653  003F62  6E64               	movwf	_count_pop_w_tab+1,c
  3654  003F64  0E00               	movlw	0
  3655  003F66  6E63               	movwf	_count_pop_w_tab,c
  3656                           
  3657                           ;sort.c: 277: count_can_w_lab = 0;
  3658  003F68  0E00               	movlw	0
  3659  003F6A  6E60               	movwf	_count_can_w_lab+1,c
  3660  003F6C  0E00               	movlw	0
  3661  003F6E  6E5F               	movwf	_count_can_w_lab,c
  3662                           
  3663                           ;sort.c: 278: count_can_no_lab = 0;
  3664  003F70  0E00               	movlw	0
  3665  003F72  6E5E               	movwf	_count_can_no_lab+1,c
  3666  003F74  0E00               	movlw	0
  3667  003F76  6E5D               	movwf	_count_can_no_lab,c
  3668                           
  3669                           ; BSR set to: 0
  3670  003F78  0012               	return		;funcret
  3671  003F7A                     __end_of_initGlobalVars:
  3672                           	opt stack 0
  3673                           tblptru	equ	0xFF8
  3674                           tblptrh	equ	0xFF7
  3675                           tblptrl	equ	0xFF6
  3676                           tablat	equ	0xFF5
  3677                           prodh	equ	0xFF4
  3678                           prodl	equ	0xFF3
  3679                           postinc0	equ	0xFEE
  3680                           wreg	equ	0xFE8
  3681                           postdec1	equ	0xFE5
  3682                           fsr1l	equ	0xFE1
  3683                           indf2	equ	0xFDF
  3684                           postinc2	equ	0xFDE
  3685                           postdec2	equ	0xFDD
  3686                           fsr2h	equ	0xFDA
  3687                           fsr2l	equ	0xFD9
  3688                           status	equ	0xFD8
  3689                           
  3690 ;; *************** function _getIR *****************
  3691 ;; Defined at:
  3692 ;;		line 338 in file "sort.c"
  3693 ;; Parameters:    Size  Location     Type
  3694 ;;		None
  3695 ;; Auto vars:     Size  Location     Type
  3696 ;;		None
  3697 ;; Return value:  Size  Location     Type
  3698 ;;                  1    wreg      void 
  3699 ;; Registers used:
  3700 ;;		wreg, status,2, status,0, cstack
  3701 ;; Tracked objects:
  3702 ;;		On entry : 0/0
  3703 ;;		On exit  : 0/0
  3704 ;;		Unchanged: 0/0
  3705 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3706 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3707 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3708 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3709 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3710 ;;Total ram usage:        2 bytes
  3711 ;; Hardware stack levels used:    1
  3712 ;; Hardware stack levels required when called:    9
  3713 ;; This function calls:
  3714 ;;		_readIR
  3715 ;; This function is called by:
  3716 ;;		_Loading
  3717 ;; This function uses a non-reentrant model
  3718 ;;
  3719                           
  3720                           	psect	text6
  3721  00420C                     __ptext6:
  3722                           	opt stack 0
  3723  00420C                     _getIR:
  3724                           	opt stack 19
  3725                           
  3726                           ;sort.c: 339: readIR();
  3727                           
  3728                           ; BSR set to: 0
  3729                           ;incstack = 0
  3730  00420C  EC80  F021         	call	_readIR	;wreg free
  3731                           
  3732                           ;sort.c: 341: if(IR_signal==1){
  3733  004210  0100               	movlb	0	; () banked
  3734  004212  05DA               	decf	_IR_signal& (0+255),w,b
  3735  004214  0100               	movlb	0	; () banked
  3736  004216  11DB               	iorwf	(_IR_signal+1)& (0+255),w,b
  3737  004218  A4D8               	btfss	status,2,c
  3738  00421A  0012               	return	
  3739                           
  3740                           ; BSR set to: 0
  3741                           ;sort.c: 342: _delay((unsigned long)((500)*(32000000/4000.0)));
  3742  00421C  0E15               	movlw	21
  3743  00421E  0100               	movlb	0	; () banked
  3744  004220  6F87               	movwf	(??_getIR+1)& (0+255),b
  3745  004222  0E4B               	movlw	75
  3746  004224  0100               	movlb	0	; () banked
  3747  004226  6F86               	movwf	??_getIR& (0+255),b
  3748  004228  0EBE               	movlw	190
  3749  00422A                     u7407:
  3750  00422A  2EE8               	decfsz	wreg,f,c
  3751  00422C  D7FE               	bra	u7407
  3752  00422E  2F86               	decfsz	??_getIR& (0+255),f,b
  3753  004230  D7FC               	bra	u7407
  3754  004232  2F87               	decfsz	(??_getIR+1)& (0+255),f,b
  3755  004234  D7FA               	bra	u7407
  3756  004236  F000               	nop	
  3757                           
  3758                           ;sort.c: 343: readIR();
  3759  004238  EC80  F021         	call	_readIR	;wreg free
  3760                           
  3761                           ;sort.c: 344: if(IR_signal==1){
  3762  00423C  0100               	movlb	0	; () banked
  3763  00423E  05DA               	decf	_IR_signal& (0+255),w,b
  3764  004240  0100               	movlb	0	; () banked
  3765  004242  11DB               	iorwf	(_IR_signal+1)& (0+255),w,b
  3766  004244  A4D8               	btfss	status,2,c
  3767  004246  D006               	goto	l6258
  3768                           
  3769                           ; BSR set to: 0
  3770                           ;sort.c: 345: f_loadingNewCan = 1;
  3771  004248  0E00               	movlw	0
  3772  00424A  0100               	movlb	0	; () banked
  3773  00424C  6FE5               	movwf	(_f_loadingNewCan+1)& (0+255),b
  3774  00424E  0E01               	movlw	1
  3775  004250  6FE4               	movwf	_f_loadingNewCan& (0+255),b
  3776                           
  3777                           ;sort.c: 346: }
  3778  004252  0012               	return	
  3779  004254                     l6258:
  3780                           
  3781                           ; BSR set to: 0
  3782                           ;sort.c: 347: else{
  3783                           ;sort.c: 348: f_loadingNewCan = 0;
  3784  004254  0E00               	movlw	0
  3785  004256  0100               	movlb	0	; () banked
  3786  004258  6FE5               	movwf	(_f_loadingNewCan+1)& (0+255),b
  3787  00425A  0E00               	movlw	0
  3788  00425C  6FE4               	movwf	_f_loadingNewCan& (0+255),b
  3789                           
  3790                           ; BSR set to: 0
  3791  00425E  0012               	return	
  3792  004260                     __end_of_getIR:
  3793                           	opt stack 0
  3794                           tblptru	equ	0xFF8
  3795                           tblptrh	equ	0xFF7
  3796                           tblptrl	equ	0xFF6
  3797                           tablat	equ	0xFF5
  3798                           prodh	equ	0xFF4
  3799                           prodl	equ	0xFF3
  3800                           postinc0	equ	0xFEE
  3801                           wreg	equ	0xFE8
  3802                           postdec1	equ	0xFE5
  3803                           fsr1l	equ	0xFE1
  3804                           indf2	equ	0xFDF
  3805                           postinc2	equ	0xFDE
  3806                           postdec2	equ	0xFDD
  3807                           fsr2h	equ	0xFDA
  3808                           fsr2l	equ	0xFD9
  3809                           status	equ	0xFD8
  3810                           
  3811 ;; *************** function _readIR *****************
  3812 ;; Defined at:
  3813 ;;		line 23 in file "ADCFunctionality.c"
  3814 ;; Parameters:    Size  Location     Type
  3815 ;;		None
  3816 ;; Auto vars:     Size  Location     Type
  3817 ;;  res             2    4[BANK0 ] int 
  3818 ;; Return value:  Size  Location     Type
  3819 ;;                  1    wreg      void 
  3820 ;; Registers used:
  3821 ;;		wreg, status,2, status,0, cstack
  3822 ;; Tracked objects:
  3823 ;;		On entry : 0/0
  3824 ;;		On exit  : 0/0
  3825 ;;		Unchanged: 0/0
  3826 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3827 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3828 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3829 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3830 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3831 ;;Total ram usage:        4 bytes
  3832 ;; Hardware stack levels used:    1
  3833 ;; Hardware stack levels required when called:    8
  3834 ;; This function calls:
  3835 ;;		_readADC
  3836 ;; This function is called by:
  3837 ;;		_getIR
  3838 ;; This function uses a non-reentrant model
  3839 ;;
  3840                           
  3841                           	psect	text7
  3842  004300                     __ptext7:
  3843                           	opt stack 0
  3844  004300                     _readIR:
  3845                           	opt stack 19
  3846                           
  3847                           ;ADCFunctionality.c: 24: readADC(0);
  3848                           
  3849                           ; BSR set to: 0
  3850                           ;incstack = 0
  3851  004300  0E00               	movlw	0
  3852  004302  ECE3  F023         	call	_readADC
  3853                           
  3854                           ;ADCFunctionality.c: 25: int res = ADRESH<<8 | ADRESL;
  3855  004306  50C3               	movf	4035,w,c	;volatile
  3856  004308  CFC4 F082          	movff	4036,??_readIR	;volatile
  3857  00430C  0100               	movlb	0	; () banked
  3858  00430E  6B83               	clrf	(??_readIR+1)& (0+255),b
  3859  004310  C082  F083         	movff	??_readIR,??_readIR+1
  3860  004314  0100               	movlb	0	; () banked
  3861  004316  6B82               	clrf	??_readIR& (0+255),b
  3862  004318  0100               	movlb	0	; () banked
  3863  00431A  1182               	iorwf	??_readIR& (0+255),w,b
  3864  00431C  0100               	movlb	0	; () banked
  3865  00431E  6F84               	movwf	readIR@res& (0+255),b
  3866  004320  0100               	movlb	0	; () banked
  3867  004322  5183               	movf	(??_readIR+1)& (0+255),w,b
  3868  004324  0100               	movlb	0	; () banked
  3869  004326  6F85               	movwf	(readIR@res+1)& (0+255),b
  3870                           
  3871                           ; BSR set to: 0
  3872                           ;ADCFunctionality.c: 26: IR_signal = (res > 1000) ? 1 : 0;
  3873  004328  0100               	movlb	0	; () banked
  3874  00432A  BF85               	btfsc	(readIR@res+1)& (0+255),7,b
  3875  00432C  D00A               	goto	u3930
  3876  00432E  0EE9               	movlw	233
  3877  004330  0100               	movlb	0	; () banked
  3878  004332  5D84               	subwf	readIR@res& (0+255),w,b
  3879  004334  0E03               	movlw	3
  3880  004336  0100               	movlb	0	; () banked
  3881  004338  5985               	subwfb	(readIR@res+1)& (0+255),w,b
  3882  00433A  A0D8               	btfss	status,0,c
  3883  00433C  D002               	goto	u3930
  3884  00433E  0E01               	movlw	1
  3885  004340  D001               	goto	u3940
  3886  004342                     u3930:
  3887  004342  0E00               	movlw	0
  3888  004344                     u3940:
  3889  004344  0100               	movlb	0	; () banked
  3890  004346  6FDA               	movwf	_IR_signal& (0+255),b
  3891  004348  6BDB               	clrf	(_IR_signal+1)& (0+255),b
  3892                           
  3893                           ; BSR set to: 0
  3894  00434A  0012               	return		;funcret
  3895  00434C                     __end_of_readIR:
  3896                           	opt stack 0
  3897                           tblptru	equ	0xFF8
  3898                           tblptrh	equ	0xFF7
  3899                           tblptrl	equ	0xFF6
  3900                           tablat	equ	0xFF5
  3901                           prodh	equ	0xFF4
  3902                           prodl	equ	0xFF3
  3903                           postinc0	equ	0xFEE
  3904                           wreg	equ	0xFE8
  3905                           postdec1	equ	0xFE5
  3906                           fsr1l	equ	0xFE1
  3907                           indf2	equ	0xFDF
  3908                           postinc2	equ	0xFDE
  3909                           postdec2	equ	0xFDD
  3910                           fsr2h	equ	0xFDA
  3911                           fsr2l	equ	0xFD9
  3912                           status	equ	0xFD8
  3913                           
  3914 ;; *************** function _delay_ms *****************
  3915 ;; Defined at:
  3916 ;;		line 373 in file "sort.c"
  3917 ;; Parameters:    Size  Location     Type
  3918 ;;  milliseconds    1    wreg     unsigned char 
  3919 ;; Auto vars:     Size  Location     Type
  3920 ;;  milliseconds    1    1[BANK0 ] unsigned char 
  3921 ;; Return value:  Size  Location     Type
  3922 ;;                  1    wreg      void 
  3923 ;; Registers used:
  3924 ;;		wreg, status,2, status,0, cstack
  3925 ;; Tracked objects:
  3926 ;;		On entry : 0/0
  3927 ;;		On exit  : 0/0
  3928 ;;		Unchanged: 0/0
  3929 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3930 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3931 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3932 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3933 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3934 ;;Total ram usage:        2 bytes
  3935 ;; Hardware stack levels used:    1
  3936 ;; Hardware stack levels required when called:    7
  3937 ;; This function calls:
  3938 ;;		Nothing
  3939 ;; This function is called by:
  3940 ;;		_Loading
  3941 ;; This function uses a non-reentrant model
  3942 ;;
  3943                           
  3944                           	psect	text8
  3945  00481C                     __ptext8:
  3946                           	opt stack 0
  3947  00481C                     _delay_ms:
  3948                           	opt stack 21
  3949                           
  3950                           ; BSR set to: 0
  3951                           ;incstack = 0
  3952                           ;delay_ms@milliseconds stored from wreg
  3953  00481C  0100               	movlb	0	; () banked
  3954  00481E  6F81               	movwf	delay_ms@milliseconds& (0+255),b
  3955                           
  3956                           ;sort.c: 374: while(milliseconds > 0)
  3957  004820  D00B               	goto	l6230
  3958  004822                     l6226:
  3959                           
  3960                           ;sort.c: 375: {
  3961                           ;sort.c: 376: milliseconds--;
  3962  004822  0100               	movlb	0	; () banked
  3963  004824  0781               	decf	delay_ms@milliseconds& (0+255),f,b
  3964                           
  3965                           ; BSR set to: 0
  3966                           ;sort.c: 377: _delay((unsigned long)((990)*(32000000/4000000.0)));
  3967  004826  0E0B               	movlw	11
  3968  004828  0100               	movlb	0	; () banked
  3969  00482A  6F80               	movwf	??_delay_ms& (0+255),b
  3970  00482C  0E47               	movlw	71
  3971  00482E                     u7417:
  3972  00482E  2EE8               	decfsz	wreg,f,c
  3973  004830  D7FE               	bra	u7417
  3974  004832  2F80               	decfsz	??_delay_ms& (0+255),f,b
  3975  004834  D7FC               	bra	u7417
  3976  004836  D000               	nop2	
  3977  004838                     l6230:
  3978  004838  0100               	movlb	0	; () banked
  3979  00483A  5181               	movf	delay_ms@milliseconds& (0+255),w,b
  3980  00483C  0100               	movlb	0	; () banked
  3981  00483E  B4D8               	btfsc	status,2,c
  3982  004840  0012               	return	
  3983  004842  D7EF               	goto	l6226
  3984  004844                     __end_of_delay_ms:
  3985                           	opt stack 0
  3986                           tblptru	equ	0xFF8
  3987                           tblptrh	equ	0xFF7
  3988                           tblptrl	equ	0xFF6
  3989                           tablat	equ	0xFF5
  3990                           prodh	equ	0xFF4
  3991                           prodl	equ	0xFF3
  3992                           postinc0	equ	0xFEE
  3993                           wreg	equ	0xFE8
  3994                           postdec1	equ	0xFE5
  3995                           fsr1l	equ	0xFE1
  3996                           indf2	equ	0xFDF
  3997                           postinc2	equ	0xFDE
  3998                           postdec2	equ	0xFDD
  3999                           fsr2h	equ	0xFDA
  4000                           fsr2l	equ	0xFD9
  4001                           status	equ	0xFD8
  4002                           
  4003 ;; *************** function _ID *****************
  4004 ;; Defined at:
  4005 ;;		line 130 in file "sort.c"
  4006 ;; Parameters:    Size  Location     Type
  4007 ;;		None
  4008 ;; Auto vars:     Size  Location     Type
  4009 ;;  i               2   10[BANK0 ] int 
  4010 ;;  sensor_outpu    4   12[BANK0 ] int [2]
  4011 ;; Return value:  Size  Location     Type
  4012 ;;                  1    wreg      void 
  4013 ;; Registers used:
  4014 ;;		wreg, status,2, status,0, cstack
  4015 ;; Tracked objects:
  4016 ;;		On entry : 0/0
  4017 ;;		On exit  : 0/0
  4018 ;;		Unchanged: 0/0
  4019 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4020 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4021 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4022 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4023 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4024 ;;Total ram usage:        8 bytes
  4025 ;; Hardware stack levels used:    1
  4026 ;; Hardware stack levels required when called:   10
  4027 ;; This function calls:
  4028 ;;		_getMAG
  4029 ;; This function is called by:
  4030 ;;		_sort
  4031 ;; This function uses a non-reentrant model
  4032 ;;
  4033                           
  4034                           	psect	text9
  4035  003290                     __ptext9:
  4036                           	opt stack 0
  4037  003290                     _ID:
  4038                           	opt stack 19
  4039                           
  4040                           ;sort.c: 131: if(f_can_coming_to_ID){
  4041                           
  4042                           ; BSR set to: 0
  4043                           ;incstack = 0
  4044  003290  506D               	movf	_f_can_coming_to_ID,w,c
  4045  003292  106E               	iorwf	_f_can_coming_to_ID+1,w,c
  4046  003294  B4D8               	btfsc	status,2,c
  4047  003296  0012               	return	
  4048                           
  4049                           ;sort.c: 133: _delay((unsigned long)((1500)*(32000000/4000.0)));
  4050  003298  0E3D               	movlw	61
  4051  00329A  0100               	movlb	0	; () banked
  4052  00329C  6F89               	movwf	(??_ID+1)& (0+255),b
  4053  00329E  0EE1               	movlw	225
  4054  0032A0  0100               	movlb	0	; () banked
  4055  0032A2  6F88               	movwf	??_ID& (0+255),b
  4056  0032A4  0E3F               	movlw	63
  4057  0032A6                     u7427:
  4058  0032A6  2EE8               	decfsz	wreg,f,c
  4059  0032A8  D7FE               	bra	u7427
  4060  0032AA  2F88               	decfsz	??_ID& (0+255),f,b
  4061  0032AC  D7FC               	bra	u7427
  4062  0032AE  2F89               	decfsz	(??_ID+1)& (0+255),f,b
  4063  0032B0  D7FA               	bra	u7427
  4064  0032B2  D000               	nop2	
  4065                           
  4066                           ;sort.c: 138: int sensor_outputs[2];
  4067                           ;sort.c: 141: getMAG();
  4068  0032B4  EC7E  F022         	call	_getMAG	;wreg free
  4069                           
  4070                           ;sort.c: 142: sensor_outputs[0] = MAG_signal;
  4071  0032B8  C0DC  F08C         	movff	_MAG_signal,ID@sensor_outputs
  4072  0032BC  C0DD  F08D         	movff	_MAG_signal+1,ID@sensor_outputs+1
  4073                           
  4074                           ;sort.c: 144: LATAbits.LATA3 = 1;
  4075  0032C0  8689               	bsf	3977,3,c	;volatile
  4076                           
  4077                           ;sort.c: 146: sensor_outputs[1] = PORTAbits.RA2;
  4078  0032C2  A480               	btfss	3968,2,c	;volatile
  4079  0032C4  D004               	goto	u5070
  4080  0032C6  0100               	movlb	0	; () banked
  4081  0032C8  6B88               	clrf	??_ID& (0+255),b
  4082  0032CA  2B88               	incf	??_ID& (0+255),f,b
  4083  0032CC  D002               	goto	u5078
  4084  0032CE                     u5070:
  4085  0032CE  0100               	movlb	0	; () banked
  4086  0032D0  6B88               	clrf	??_ID& (0+255),b
  4087  0032D2                     u5078:
  4088  0032D2  0100               	movlb	0	; () banked
  4089  0032D4  5188               	movf	??_ID& (0+255),w,b
  4090  0032D6  0100               	movlb	0	; () banked
  4091  0032D8  6F8E               	movwf	(ID@sensor_outputs+2)& (0+255),b
  4092  0032DA  6B8F               	clrf	(ID@sensor_outputs+3)& (0+255),b
  4093                           
  4094                           ; BSR set to: 0
  4095                           ;sort.c: 154: if(!sensor_outputs[0]){
  4096  0032DC  0100               	movlb	0	; () banked
  4097  0032DE  518C               	movf	ID@sensor_outputs& (0+255),w,b
  4098  0032E0  0100               	movlb	0	; () banked
  4099  0032E2  118D               	iorwf	(ID@sensor_outputs+1)& (0+255),w,b
  4100  0032E4  A4D8               	btfss	status,2,c
  4101  0032E6  D014               	goto	l6634
  4102                           
  4103                           ; BSR set to: 0
  4104                           ;sort.c: 155: if(!sensor_outputs[1]){
  4105  0032E8  0100               	movlb	0	; () banked
  4106  0032EA  518E               	movf	(ID@sensor_outputs+2)& (0+255),w,b
  4107  0032EC  0100               	movlb	0	; () banked
  4108  0032EE  118F               	iorwf	(ID@sensor_outputs+3)& (0+255),w,b
  4109  0032F0  A4D8               	btfss	status,2,c
  4110  0032F2  D007               	goto	l6630
  4111                           
  4112                           ; BSR set to: 0
  4113                           ;sort.c: 156: count_pop_no_tab++;
  4114  0032F4  4A61               	infsnz	_count_pop_no_tab,f,c
  4115  0032F6  2A62               	incf	_count_pop_no_tab+1,f,c
  4116                           
  4117                           ; BSR set to: 0
  4118                           ;sort.c: 157: cur_can = 0;
  4119  0032F8  0E00               	movlw	0
  4120  0032FA  0100               	movlb	0	; () banked
  4121  0032FC  6FE1               	movwf	(_cur_can+1)& (0+255),b
  4122  0032FE  0E00               	movlw	0
  4123  003300  D006               	goto	L2
  4124  003302                     l6630:
  4125                           
  4126                           ; BSR set to: 0
  4127                           ;sort.c: 159: else{
  4128                           ;sort.c: 160: count_pop_w_tab++;
  4129  003302  4A63               	infsnz	_count_pop_w_tab,f,c
  4130  003304  2A64               	incf	_count_pop_w_tab+1,f,c
  4131                           
  4132                           ; BSR set to: 0
  4133                           ;sort.c: 161: cur_can = 1;
  4134  003306  0E00               	movlw	0
  4135  003308  0100               	movlb	0	; () banked
  4136  00330A  6FE1               	movwf	(_cur_can+1)& (0+255),b
  4137  00330C  0E01               	movlw	1
  4138  00330E                     L2:
  4139  00330E  6FE0               	movwf	_cur_can& (0+255),b
  4140  003310                     l6634:
  4141                           
  4142                           ; BSR set to: 0
  4143                           ;sort.c: 162: }
  4144                           ;sort.c: 163: }
  4145                           ;sort.c: 164: if(sensor_outputs[0]){
  4146  003310  0100               	movlb	0	; () banked
  4147  003312  518C               	movf	ID@sensor_outputs& (0+255),w,b
  4148  003314  0100               	movlb	0	; () banked
  4149  003316  118D               	iorwf	(ID@sensor_outputs+1)& (0+255),w,b
  4150  003318  B4D8               	btfsc	status,2,c
  4151  00331A  D014               	goto	l6646
  4152                           
  4153                           ; BSR set to: 0
  4154                           ;sort.c: 165: if(!sensor_outputs[1]){
  4155  00331C  0100               	movlb	0	; () banked
  4156  00331E  518E               	movf	(ID@sensor_outputs+2)& (0+255),w,b
  4157  003320  0100               	movlb	0	; () banked
  4158  003322  118F               	iorwf	(ID@sensor_outputs+3)& (0+255),w,b
  4159  003324  A4D8               	btfss	status,2,c
  4160  003326  D007               	goto	l6642
  4161                           
  4162                           ; BSR set to: 0
  4163                           ;sort.c: 166: count_can_w_lab++;
  4164  003328  4A5F               	infsnz	_count_can_w_lab,f,c
  4165  00332A  2A60               	incf	_count_can_w_lab+1,f,c
  4166                           
  4167                           ; BSR set to: 0
  4168                           ;sort.c: 167: cur_can = 2;
  4169  00332C  0E00               	movlw	0
  4170  00332E  0100               	movlb	0	; () banked
  4171  003330  6FE1               	movwf	(_cur_can+1)& (0+255),b
  4172  003332  0E02               	movlw	2
  4173  003334  D006               	goto	L3
  4174  003336                     l6642:
  4175                           
  4176                           ; BSR set to: 0
  4177                           ;sort.c: 169: else{
  4178                           ;sort.c: 170: count_can_no_lab++;
  4179  003336  4A5D               	infsnz	_count_can_no_lab,f,c
  4180  003338  2A5E               	incf	_count_can_no_lab+1,f,c
  4181                           
  4182                           ; BSR set to: 0
  4183                           ;sort.c: 171: cur_can = 3;
  4184  00333A  0E00               	movlw	0
  4185  00333C  0100               	movlb	0	; () banked
  4186  00333E  6FE1               	movwf	(_cur_can+1)& (0+255),b
  4187  003340  0E03               	movlw	3
  4188  003342                     L3:
  4189  003342  6FE0               	movwf	_cur_can& (0+255),b
  4190  003344                     l6646:
  4191                           
  4192                           ; BSR set to: 0
  4193                           ;sort.c: 172: }
  4194                           ;sort.c: 173: }
  4195                           ;sort.c: 177: for(int i=0;i<10000;i++)
  4196  003344  0E00               	movlw	0
  4197  003346  0100               	movlb	0	; () banked
  4198  003348  6F8B               	movwf	(ID@i+1)& (0+255),b
  4199  00334A  0E00               	movlw	0
  4200  00334C  6F8A               	movwf	ID@i& (0+255),b
  4201  00334E                     l6648:
  4202                           
  4203                           ; BSR set to: 0
  4204  00334E  0100               	movlb	0	; () banked
  4205  003350  BF8B               	btfsc	(ID@i+1)& (0+255),7,b
  4206  003352  D008               	goto	l750
  4207  003354  0E10               	movlw	16
  4208  003356  0100               	movlb	0	; () banked
  4209  003358  5D8A               	subwf	ID@i& (0+255),w,b
  4210  00335A  0E27               	movlw	39
  4211  00335C  0100               	movlb	0	; () banked
  4212  00335E  598B               	subwfb	(ID@i+1)& (0+255),w,b
  4213  003360  B0D8               	btfsc	status,0,c
  4214  003362  D00D               	goto	l751
  4215  003364                     l750:
  4216                           
  4217                           ; BSR set to: 0
  4218                           ;sort.c: 178: {
  4219                           ;sort.c: 179: LATCbits.LATC0 = 1;
  4220  003364  808B               	bsf	3979,0,c	;volatile
  4221                           
  4222                           ; BSR set to: 0
  4223                           ;sort.c: 180: _delay((unsigned long)((10)*(32000000/4000000.0)));
  4224  003366  0E1A               	movlw	26
  4225  003368                     u7437:
  4226  003368  2EE8               	decfsz	wreg,f,c
  4227  00336A  D7FE               	bra	u7437
  4228  00336C  D000               	nop2	
  4229                           
  4230                           ;sort.c: 181: LATCbits.LATC0 = 0;
  4231  00336E  908B               	bcf	3979,0,c	;volatile
  4232                           
  4233                           ;sort.c: 182: _delay((unsigned long)((90)*(32000000/4000000.0)));
  4234  003370  0EF0               	movlw	240
  4235  003372                     u7447:
  4236  003372  2EE8               	decfsz	wreg,f,c
  4237  003374  D7FE               	bra	u7447
  4238  003376  0100               	movlb	0	; () banked
  4239  003378  4B8A               	infsnz	ID@i& (0+255),f,b
  4240  00337A  2B8B               	incf	(ID@i+1)& (0+255),f,b
  4241  00337C  D7E8               	goto	l6648
  4242  00337E                     l751:
  4243                           
  4244                           ; BSR set to: 0
  4245                           ;sort.c: 183: }
  4246                           ;sort.c: 184: LATCbits.LATC0 = 0;
  4247  00337E  908B               	bcf	3979,0,c	;volatile
  4248                           
  4249                           ;sort.c: 186: LATAbits.LATA3 = 0;
  4250  003380  9689               	bcf	3977,3,c	;volatile
  4251                           
  4252                           ; BSR set to: 0
  4253                           ;sort.c: 190: f_can_coming_to_distribution = 1;
  4254  003382  0E00               	movlw	0
  4255  003384  6E70               	movwf	_f_can_coming_to_distribution+1,c
  4256  003386  0E01               	movlw	1
  4257  003388  6E6F               	movwf	_f_can_coming_to_distribution,c
  4258                           
  4259                           ; BSR set to: 0
  4260                           ;sort.c: 191: _delay((unsigned long)((1500)*(32000000/4000.0)));
  4261  00338A  0E3D               	movlw	61
  4262  00338C  0100               	movlb	0	; () banked
  4263  00338E  6F89               	movwf	(??_ID+1)& (0+255),b
  4264  003390  0EE1               	movlw	225
  4265  003392  0100               	movlb	0	; () banked
  4266  003394  6F88               	movwf	??_ID& (0+255),b
  4267  003396  0E3F               	movlw	63
  4268  003398                     u7457:
  4269  003398  2EE8               	decfsz	wreg,f,c
  4270  00339A  D7FE               	bra	u7457
  4271  00339C  2F88               	decfsz	??_ID& (0+255),f,b
  4272  00339E  D7FC               	bra	u7457
  4273  0033A0  2F89               	decfsz	(??_ID+1)& (0+255),f,b
  4274  0033A2  D7FA               	bra	u7457
  4275  0033A4  D000               	nop2	
  4276                           
  4277                           ;sort.c: 192: LATCbits.LATC0 = 1;
  4278  0033A6  808B               	bsf	3979,0,c	;volatile
  4279                           
  4280                           ;sort.c: 194: f_can_coming_to_ID = 0;
  4281  0033A8  0E00               	movlw	0
  4282  0033AA  6E6E               	movwf	_f_can_coming_to_ID+1,c
  4283  0033AC  0E00               	movlw	0
  4284  0033AE  6E6D               	movwf	_f_can_coming_to_ID,c
  4285  0033B0  0012               	return	
  4286  0033B2                     __end_of_ID:
  4287                           	opt stack 0
  4288                           tblptru	equ	0xFF8
  4289                           tblptrh	equ	0xFF7
  4290                           tblptrl	equ	0xFF6
  4291                           tablat	equ	0xFF5
  4292                           prodh	equ	0xFF4
  4293                           prodl	equ	0xFF3
  4294                           postinc0	equ	0xFEE
  4295                           wreg	equ	0xFE8
  4296                           postdec1	equ	0xFE5
  4297                           fsr1l	equ	0xFE1
  4298                           indf2	equ	0xFDF
  4299                           postinc2	equ	0xFDE
  4300                           postdec2	equ	0xFDD
  4301                           fsr2h	equ	0xFDA
  4302                           fsr2l	equ	0xFD9
  4303                           status	equ	0xFD8
  4304                           
  4305 ;; *************** function _getMAG *****************
  4306 ;; Defined at:
  4307 ;;		line 352 in file "sort.c"
  4308 ;; Parameters:    Size  Location     Type
  4309 ;;		None
  4310 ;; Auto vars:     Size  Location     Type
  4311 ;;		None
  4312 ;; Return value:  Size  Location     Type
  4313 ;;                  1    wreg      void 
  4314 ;; Registers used:
  4315 ;;		wreg, status,2, status,0, cstack
  4316 ;; Tracked objects:
  4317 ;;		On entry : 0/0
  4318 ;;		On exit  : 0/0
  4319 ;;		Unchanged: 0/0
  4320 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4321 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4322 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4323 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4324 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4325 ;;Total ram usage:        2 bytes
  4326 ;; Hardware stack levels used:    1
  4327 ;; Hardware stack levels required when called:    9
  4328 ;; This function calls:
  4329 ;;		_readMAG
  4330 ;; This function is called by:
  4331 ;;		_ID
  4332 ;; This function uses a non-reentrant model
  4333 ;;
  4334                           
  4335                           	psect	text10
  4336  0044FC                     __ptext10:
  4337                           	opt stack 0
  4338  0044FC                     _getMAG:
  4339                           	opt stack 19
  4340                           
  4341                           ;sort.c: 353: readMAG();
  4342                           
  4343                           ;incstack = 0
  4344  0044FC  ECA6  F021         	call	_readMAG	;wreg free
  4345                           
  4346                           ;sort.c: 355: if(MAG_signal==1){
  4347  004500  0100               	movlb	0	; () banked
  4348  004502  05DC               	decf	_MAG_signal& (0+255),w,b
  4349  004504  0100               	movlb	0	; () banked
  4350  004506  11DD               	iorwf	(_MAG_signal+1)& (0+255),w,b
  4351  004508  A4D8               	btfss	status,2,c
  4352  00450A  0012               	return	
  4353                           
  4354                           ; BSR set to: 0
  4355                           ;sort.c: 356: _delay((unsigned long)((500)*(32000000/4000.0)));
  4356  00450C  0E15               	movlw	21
  4357  00450E  0100               	movlb	0	; () banked
  4358  004510  6F87               	movwf	(??_getMAG+1)& (0+255),b
  4359  004512  0E4B               	movlw	75
  4360  004514  0100               	movlb	0	; () banked
  4361  004516  6F86               	movwf	??_getMAG& (0+255),b
  4362  004518  0EBE               	movlw	190
  4363  00451A                     u7467:
  4364  00451A  2EE8               	decfsz	wreg,f,c
  4365  00451C  D7FE               	bra	u7467
  4366  00451E  2F86               	decfsz	??_getMAG& (0+255),f,b
  4367  004520  D7FC               	bra	u7467
  4368  004522  2F87               	decfsz	(??_getMAG+1)& (0+255),f,b
  4369  004524  D7FA               	bra	u7467
  4370  004526  F000               	nop	
  4371                           
  4372                           ;sort.c: 357: readMAG();
  4373  004528  ECA6  F021         	call	_readMAG	;wreg free
  4374  00452C  0012               	return	
  4375  00452E                     __end_of_getMAG:
  4376                           	opt stack 0
  4377                           tblptru	equ	0xFF8
  4378                           tblptrh	equ	0xFF7
  4379                           tblptrl	equ	0xFF6
  4380                           tablat	equ	0xFF5
  4381                           prodh	equ	0xFF4
  4382                           prodl	equ	0xFF3
  4383                           postinc0	equ	0xFEE
  4384                           wreg	equ	0xFE8
  4385                           postdec1	equ	0xFE5
  4386                           fsr1l	equ	0xFE1
  4387                           indf2	equ	0xFDF
  4388                           postinc2	equ	0xFDE
  4389                           postdec2	equ	0xFDD
  4390                           fsr2h	equ	0xFDA
  4391                           fsr2l	equ	0xFD9
  4392                           status	equ	0xFD8
  4393                           
  4394 ;; *************** function _Distribution *****************
  4395 ;; Defined at:
  4396 ;;		line 197 in file "sort.c"
  4397 ;; Parameters:    Size  Location     Type
  4398 ;;		None
  4399 ;; Auto vars:     Size  Location     Type
  4400 ;;		None
  4401 ;; Return value:  Size  Location     Type
  4402 ;;                  1    wreg      void 
  4403 ;; Registers used:
  4404 ;;		wreg, status,2, status,0, cstack
  4405 ;; Tracked objects:
  4406 ;;		On entry : 0/0
  4407 ;;		On exit  : 0/0
  4408 ;;		Unchanged: 0/0
  4409 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4410 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4411 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4412 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4413 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4414 ;;Total ram usage:        2 bytes
  4415 ;; Hardware stack levels used:    1
  4416 ;; Hardware stack levels required when called:    8
  4417 ;; This function calls:
  4418 ;;		_updateServoPosition
  4419 ;; This function is called by:
  4420 ;;		_sort
  4421 ;; This function uses a non-reentrant model
  4422 ;;
  4423                           
  4424                           	psect	text11
  4425  002758                     __ptext11:
  4426                           	opt stack 0
  4427  002758                     _Distribution:
  4428                           	opt stack 21
  4429                           
  4430                           ;sort.c: 198: if(f_can_coming_to_distribution){
  4431                           
  4432                           ;incstack = 0
  4433  002758  506F               	movf	_f_can_coming_to_distribution,w,c
  4434  00275A  1070               	iorwf	_f_can_coming_to_distribution+1,w,c
  4435  00275C  B4D8               	btfsc	status,2,c
  4436  00275E  0012               	return	
  4437  002760  D034               	goto	l6680
  4438  002762                     l6670:
  4439                           
  4440                           ;sort.c: 208: updateServoPosition(500, 1);
  4441  002762  0E01               	movlw	1
  4442  002764  0100               	movlb	0	; () banked
  4443  002766  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4444  002768  0EF4               	movlw	244
  4445  00276A  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4446  00276C  0E00               	movlw	0
  4447  00276E  0100               	movlb	0	; () banked
  4448  002770  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4449  002772  0E01               	movlw	1
  4450  002774  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4451  002776  EC15  F01F         	call	_updateServoPosition	;wreg free
  4452                           
  4453                           ;sort.c: 209: break;
  4454  00277A  D03E               	goto	l6682
  4455  00277C                     l6672:
  4456                           
  4457                           ;sort.c: 211: updateServoPosition(850, 1);
  4458  00277C  0E03               	movlw	3
  4459  00277E  0100               	movlb	0	; () banked
  4460  002780  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4461  002782  0E52               	movlw	82
  4462  002784  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4463  002786  0E00               	movlw	0
  4464  002788  0100               	movlb	0	; () banked
  4465  00278A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4466  00278C  0E01               	movlw	1
  4467  00278E  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4468  002790  EC15  F01F         	call	_updateServoPosition	;wreg free
  4469                           
  4470                           ;sort.c: 212: break;
  4471  002794  D031               	goto	l6682
  4472  002796                     l6674:
  4473                           
  4474                           ;sort.c: 214: updateServoPosition(1670, 1);
  4475  002796  0E06               	movlw	6
  4476  002798  0100               	movlb	0	; () banked
  4477  00279A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4478  00279C  0E86               	movlw	134
  4479  00279E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4480  0027A0  0E00               	movlw	0
  4481  0027A2  0100               	movlb	0	; () banked
  4482  0027A4  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4483  0027A6  0E01               	movlw	1
  4484  0027A8  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4485  0027AA  EC15  F01F         	call	_updateServoPosition	;wreg free
  4486                           
  4487                           ;sort.c: 215: break;
  4488  0027AE  D024               	goto	l6682
  4489  0027B0                     l6676:
  4490                           
  4491                           ;sort.c: 217: updateServoPosition(2100, 1);
  4492  0027B0  0E08               	movlw	8
  4493  0027B2  0100               	movlb	0	; () banked
  4494  0027B4  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4495  0027B6  0E34               	movlw	52
  4496  0027B8  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4497  0027BA  0E00               	movlw	0
  4498  0027BC  0100               	movlb	0	; () banked
  4499  0027BE  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4500  0027C0  0E01               	movlw	1
  4501  0027C2  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4502  0027C4  EC15  F01F         	call	_updateServoPosition	;wreg free
  4503                           
  4504                           ;sort.c: 221: }
  4505                           
  4506                           ;sort.c: 220: break;
  4507                           
  4508                           ;sort.c: 219: default:
  4509                           
  4510                           ;sort.c: 218: break;
  4511  0027C8  D017               	goto	l6682
  4512  0027CA                     l6680:
  4513  0027CA  C0E0  F088         	movff	_cur_can,??_Distribution
  4514  0027CE  C0E1  F089         	movff	_cur_can+1,??_Distribution+1
  4515                           
  4516                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4517                           ; Switch size 1, requested type "space"
  4518                           ; Number of cases is 1, Range of values is 0 to 0
  4519                           ; switch strategies available:
  4520                           ; Name         Instructions Cycles
  4521                           ; simple_byte            4     3 (average)
  4522                           ;	Chosen strategy is simple_byte
  4523  0027D2  0100               	movlb	0	; () banked
  4524  0027D4  5189               	movf	(??_Distribution+1)& (0+255),w,b
  4525  0027D6  0A00               	xorlw	0	; case 0
  4526  0027D8  A4D8               	btfss	status,2,c
  4527  0027DA  D00E               	goto	l6682
  4528                           
  4529                           ; BSR set to: 0
  4530                           ; Switch size 1, requested type "space"
  4531                           ; Number of cases is 4, Range of values is 0 to 3
  4532                           ; switch strategies available:
  4533                           ; Name         Instructions Cycles
  4534                           ; simple_byte           13     7 (average)
  4535                           ;	Chosen strategy is simple_byte
  4536  0027DC  0100               	movlb	0	; () banked
  4537  0027DE  5188               	movf	??_Distribution& (0+255),w,b
  4538  0027E0  0A00               	xorlw	0	; case 0
  4539  0027E2  B4D8               	btfsc	status,2,c
  4540  0027E4  D7BE               	goto	l6670
  4541  0027E6  0A01               	xorlw	1	; case 1
  4542  0027E8  B4D8               	btfsc	status,2,c
  4543  0027EA  D7C8               	goto	l6672
  4544  0027EC  0A03               	xorlw	3	; case 2
  4545  0027EE  B4D8               	btfsc	status,2,c
  4546  0027F0  D7D2               	goto	l6674
  4547  0027F2  0A01               	xorlw	1	; case 3
  4548  0027F4  B4D8               	btfsc	status,2,c
  4549  0027F6  D7DC               	goto	l6676
  4550  0027F8                     l6682:
  4551                           
  4552                           ;sort.c: 222: updateServoPosition(1150, 3);
  4553  0027F8  0E04               	movlw	4
  4554  0027FA  0100               	movlb	0	; () banked
  4555  0027FC  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4556  0027FE  0E7E               	movlw	126
  4557  002800  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4558  002802  0E00               	movlw	0
  4559  002804  0100               	movlb	0	; () banked
  4560  002806  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4561  002808  0E03               	movlw	3
  4562  00280A  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4563  00280C  EC15  F01F         	call	_updateServoPosition	;wreg free
  4564                           
  4565                           ;sort.c: 223: _delay((unsigned long)((750)*(32000000/4000.0)));
  4566  002810  0E1F               	movlw	31
  4567  002812  0100               	movlb	0	; () banked
  4568  002814  6F89               	movwf	(??_Distribution+1)& (0+255),b
  4569  002816  0E71               	movlw	113
  4570  002818  0100               	movlb	0	; () banked
  4571  00281A  6F88               	movwf	??_Distribution& (0+255),b
  4572  00281C  0E1E               	movlw	30
  4573  00281E                     u7477:
  4574  00281E  2EE8               	decfsz	wreg,f,c
  4575  002820  D7FE               	bra	u7477
  4576  002822  2F88               	decfsz	??_Distribution& (0+255),f,b
  4577  002824  D7FC               	bra	u7477
  4578  002826  2F89               	decfsz	(??_Distribution+1)& (0+255),f,b
  4579  002828  D7FA               	bra	u7477
  4580  00282A  F000               	nop	
  4581                           
  4582                           ;sort.c: 231: switch(cur_can){
  4583  00282C  D034               	goto	l6696
  4584  00282E                     l6686:
  4585                           
  4586                           ;sort.c: 233: updateServoPosition(1200, 3);
  4587  00282E  0E04               	movlw	4
  4588  002830  0100               	movlb	0	; () banked
  4589  002832  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4590  002834  0EB0               	movlw	176
  4591  002836  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4592  002838  0E00               	movlw	0
  4593  00283A  0100               	movlb	0	; () banked
  4594  00283C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4595  00283E  0E03               	movlw	3
  4596  002840  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4597  002842  EC15  F01F         	call	_updateServoPosition	;wreg free
  4598                           
  4599                           ;sort.c: 234: break;
  4600  002846  D03E               	goto	l6698
  4601  002848                     l6688:
  4602                           
  4603                           ;sort.c: 236: updateServoPosition(1200, 3);
  4604  002848  0E04               	movlw	4
  4605  00284A  0100               	movlb	0	; () banked
  4606  00284C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4607  00284E  0EB0               	movlw	176
  4608  002850  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4609  002852  0E00               	movlw	0
  4610  002854  0100               	movlb	0	; () banked
  4611  002856  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4612  002858  0E03               	movlw	3
  4613  00285A  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4614  00285C  EC15  F01F         	call	_updateServoPosition	;wreg free
  4615                           
  4616                           ;sort.c: 237: break;
  4617  002860  D031               	goto	l6698
  4618  002862                     l6690:
  4619                           
  4620                           ;sort.c: 239: updateServoPosition(1300, 3);
  4621  002862  0E05               	movlw	5
  4622  002864  0100               	movlb	0	; () banked
  4623  002866  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4624  002868  0E14               	movlw	20
  4625  00286A  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4626  00286C  0E00               	movlw	0
  4627  00286E  0100               	movlb	0	; () banked
  4628  002870  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4629  002872  0E03               	movlw	3
  4630  002874  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4631  002876  EC15  F01F         	call	_updateServoPosition	;wreg free
  4632                           
  4633                           ;sort.c: 240: break;
  4634  00287A  D024               	goto	l6698
  4635  00287C                     l6692:
  4636                           
  4637                           ;sort.c: 242: updateServoPosition(1300, 3);
  4638  00287C  0E05               	movlw	5
  4639  00287E  0100               	movlb	0	; () banked
  4640  002880  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4641  002882  0E14               	movlw	20
  4642  002884  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4643  002886  0E00               	movlw	0
  4644  002888  0100               	movlb	0	; () banked
  4645  00288A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4646  00288C  0E03               	movlw	3
  4647  00288E  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4648  002890  EC15  F01F         	call	_updateServoPosition	;wreg free
  4649                           
  4650                           ;sort.c: 246: }
  4651                           
  4652                           ;sort.c: 245: break;
  4653                           
  4654                           ;sort.c: 244: default:
  4655                           
  4656                           ;sort.c: 243: break;
  4657  002894  D017               	goto	l6698
  4658  002896                     l6696:
  4659  002896  C0E0  F088         	movff	_cur_can,??_Distribution
  4660  00289A  C0E1  F089         	movff	_cur_can+1,??_Distribution+1
  4661                           
  4662                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4663                           ; Switch size 1, requested type "space"
  4664                           ; Number of cases is 1, Range of values is 0 to 0
  4665                           ; switch strategies available:
  4666                           ; Name         Instructions Cycles
  4667                           ; simple_byte            4     3 (average)
  4668                           ;	Chosen strategy is simple_byte
  4669  00289E  0100               	movlb	0	; () banked
  4670  0028A0  5189               	movf	(??_Distribution+1)& (0+255),w,b
  4671  0028A2  0A00               	xorlw	0	; case 0
  4672  0028A4  A4D8               	btfss	status,2,c
  4673  0028A6  D00E               	goto	l6698
  4674                           
  4675                           ; BSR set to: 0
  4676                           ; Switch size 1, requested type "space"
  4677                           ; Number of cases is 4, Range of values is 0 to 3
  4678                           ; switch strategies available:
  4679                           ; Name         Instructions Cycles
  4680                           ; simple_byte           13     7 (average)
  4681                           ;	Chosen strategy is simple_byte
  4682  0028A8  0100               	movlb	0	; () banked
  4683  0028AA  5188               	movf	??_Distribution& (0+255),w,b
  4684  0028AC  0A00               	xorlw	0	; case 0
  4685  0028AE  B4D8               	btfsc	status,2,c
  4686  0028B0  D7BE               	goto	l6686
  4687  0028B2  0A01               	xorlw	1	; case 1
  4688  0028B4  B4D8               	btfsc	status,2,c
  4689  0028B6  D7C8               	goto	l6688
  4690  0028B8  0A03               	xorlw	3	; case 2
  4691  0028BA  B4D8               	btfsc	status,2,c
  4692  0028BC  D7D2               	goto	l6690
  4693  0028BE  0A01               	xorlw	1	; case 3
  4694  0028C0  B4D8               	btfsc	status,2,c
  4695  0028C2  D7DC               	goto	l6692
  4696  0028C4                     l6698:
  4697                           
  4698                           ;sort.c: 247: _delay((unsigned long)((2500)*(32000000/4000.0)));
  4699  0028C4  0E66               	movlw	102
  4700  0028C6  0100               	movlb	0	; () banked
  4701  0028C8  6F89               	movwf	(??_Distribution+1)& (0+255),b
  4702  0028CA  0E76               	movlw	118
  4703  0028CC  0100               	movlb	0	; () banked
  4704  0028CE  6F88               	movwf	??_Distribution& (0+255),b
  4705  0028D0  0EC1               	movlw	193
  4706  0028D2                     u7487:
  4707  0028D2  2EE8               	decfsz	wreg,f,c
  4708  0028D4  D7FE               	bra	u7487
  4709  0028D6  2F88               	decfsz	??_Distribution& (0+255),f,b
  4710  0028D8  D7FC               	bra	u7487
  4711  0028DA  2F89               	decfsz	(??_Distribution+1)& (0+255),f,b
  4712  0028DC  D7FA               	bra	u7487
  4713                           
  4714                           ;sort.c: 250: updateServoPosition(1150, 3);
  4715  0028DE  0E04               	movlw	4
  4716  0028E0  0100               	movlb	0	; () banked
  4717  0028E2  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4718  0028E4  0E7E               	movlw	126
  4719  0028E6  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4720  0028E8  0E00               	movlw	0
  4721  0028EA  0100               	movlb	0	; () banked
  4722  0028EC  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4723  0028EE  0E03               	movlw	3
  4724  0028F0  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4725  0028F2  EC15  F01F         	call	_updateServoPosition	;wreg free
  4726                           
  4727                           ;sort.c: 251: _delay((unsigned long)((750)*(32000000/4000.0)));
  4728  0028F6  0E1F               	movlw	31
  4729  0028F8  0100               	movlb	0	; () banked
  4730  0028FA  6F89               	movwf	(??_Distribution+1)& (0+255),b
  4731  0028FC  0E71               	movlw	113
  4732  0028FE  0100               	movlb	0	; () banked
  4733  002900  6F88               	movwf	??_Distribution& (0+255),b
  4734  002902  0E1E               	movlw	30
  4735  002904                     u7497:
  4736  002904  2EE8               	decfsz	wreg,f,c
  4737  002906  D7FE               	bra	u7497
  4738  002908  2F88               	decfsz	??_Distribution& (0+255),f,b
  4739  00290A  D7FC               	bra	u7497
  4740  00290C  2F89               	decfsz	(??_Distribution+1)& (0+255),f,b
  4741  00290E  D7FA               	bra	u7497
  4742  002910  F000               	nop	
  4743                           
  4744                           ;sort.c: 252: updateServoPosition(1200, 1);
  4745  002912  0E04               	movlw	4
  4746  002914  0100               	movlb	0	; () banked
  4747  002916  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4748  002918  0EB0               	movlw	176
  4749  00291A  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4750  00291C  0E00               	movlw	0
  4751  00291E  0100               	movlb	0	; () banked
  4752  002920  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4753  002922  0E01               	movlw	1
  4754  002924  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4755  002926  EC15  F01F         	call	_updateServoPosition	;wreg free
  4756                           
  4757                           ;sort.c: 253: f_can_coming_to_distribution = 0;
  4758  00292A  0E00               	movlw	0
  4759  00292C  6E70               	movwf	_f_can_coming_to_distribution+1,c
  4760  00292E  0E00               	movlw	0
  4761  002930  6E6F               	movwf	_f_can_coming_to_distribution,c
  4762                           
  4763                           ;sort.c: 254: f_can_distributed = 1;
  4764  002932  0E00               	movlw	0
  4765  002934  0101               	movlb	1	; () banked
  4766  002936  6F2C               	movwf	(_f_can_distributed+1)& (0+255),b
  4767  002938  0E01               	movlw	1
  4768  00293A  6F2B               	movwf	_f_can_distributed& (0+255),b
  4769                           
  4770                           ; BSR set to: 1
  4771                           ;sort.c: 255: if(f_lastCan == 1){
  4772  00293C  0471               	decf	_f_lastCan,w,c
  4773  00293E  1072               	iorwf	_f_lastCan+1,w,c
  4774  002940  A4D8               	btfss	status,2,c
  4775  002942  0012               	return	
  4776                           
  4777                           ; BSR set to: 1
  4778                           ;sort.c: 256: machine_state = DoneSorting_state;
  4779  002944  0E02               	movlw	2
  4780  002946  0100               	movlb	0	; () banked
  4781  002948  6FFC               	movwf	_machine_state& (0+255),b
  4782                           
  4783                           ; BSR set to: 0
  4784  00294A  0012               	return	
  4785  00294C                     __end_of_Distribution:
  4786                           	opt stack 0
  4787                           tblptru	equ	0xFF8
  4788                           tblptrh	equ	0xFF7
  4789                           tblptrl	equ	0xFF6
  4790                           tablat	equ	0xFF5
  4791                           prodh	equ	0xFF4
  4792                           prodl	equ	0xFF3
  4793                           postinc0	equ	0xFEE
  4794                           wreg	equ	0xFE8
  4795                           postdec1	equ	0xFE5
  4796                           fsr1l	equ	0xFE1
  4797                           indf2	equ	0xFDF
  4798                           postinc2	equ	0xFDE
  4799                           postdec2	equ	0xFDD
  4800                           fsr2h	equ	0xFDA
  4801                           fsr2l	equ	0xFD9
  4802                           status	equ	0xFD8
  4803                           
  4804 ;; *************** function _machineConfig *****************
  4805 ;; Defined at:
  4806 ;;		line 15 in file "MachineConfig.c"
  4807 ;; Parameters:    Size  Location     Type
  4808 ;;		None
  4809 ;; Auto vars:     Size  Location     Type
  4810 ;;		None
  4811 ;; Return value:  Size  Location     Type
  4812 ;;                  1    wreg      void 
  4813 ;; Registers used:
  4814 ;;		wreg, status,2
  4815 ;; Tracked objects:
  4816 ;;		On entry : 0/0
  4817 ;;		On exit  : 0/0
  4818 ;;		Unchanged: 0/0
  4819 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4820 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4821 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4822 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4823 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4824 ;;Total ram usage:        0 bytes
  4825 ;; Hardware stack levels used:    1
  4826 ;; Hardware stack levels required when called:    7
  4827 ;; This function calls:
  4828 ;;		Nothing
  4829 ;; This function is called by:
  4830 ;;		_main
  4831 ;; This function uses a non-reentrant model
  4832 ;;
  4833                           
  4834                           	psect	text12
  4835  0040A4                     __ptext12:
  4836                           	opt stack 0
  4837  0040A4                     _machineConfig:
  4838                           	opt stack 23
  4839                           
  4840                           ;MachineConfig.c: 17: OSCCON = 0xF0;
  4841                           
  4842                           ;incstack = 0
  4843  0040A4  0EF0               	movlw	240
  4844  0040A6  6ED3               	movwf	4051,c	;volatile
  4845                           
  4846                           ;MachineConfig.c: 18: OSCTUNEbits.PLLEN = 1;
  4847  0040A8  8C9B               	bsf	3995,6,c	;volatile
  4848                           
  4849                           ;MachineConfig.c: 22: TRISA = 0b00000111;
  4850  0040AA  0E07               	movlw	7
  4851  0040AC  6E92               	movwf	3986,c	;volatile
  4852                           
  4853                           ;MachineConfig.c: 24: TRISB = 0b11110010;
  4854  0040AE  0EF2               	movlw	242
  4855  0040B0  6E93               	movwf	3987,c	;volatile
  4856                           
  4857                           ;MachineConfig.c: 27: TRISC = 0x00;
  4858  0040B2  0E00               	movlw	0
  4859  0040B4  6E94               	movwf	3988,c	;volatile
  4860                           
  4861                           ;MachineConfig.c: 31: TRISD = 0x00;
  4862  0040B6  0E00               	movlw	0
  4863  0040B8  6E95               	movwf	3989,c	;volatile
  4864                           
  4865                           ;MachineConfig.c: 34: TRISE = 0x00;
  4866  0040BA  0E00               	movlw	0
  4867  0040BC  6E96               	movwf	3990,c	;volatile
  4868                           
  4869                           ;MachineConfig.c: 37: LATA = 0x00;
  4870  0040BE  0E00               	movlw	0
  4871  0040C0  6E89               	movwf	3977,c	;volatile
  4872                           
  4873                           ;MachineConfig.c: 38: LATB = 0x00;
  4874  0040C2  0E00               	movlw	0
  4875  0040C4  6E8A               	movwf	3978,c	;volatile
  4876                           
  4877                           ;MachineConfig.c: 39: LATC = 0x00;
  4878  0040C6  0E00               	movlw	0
  4879  0040C8  6E8B               	movwf	3979,c	;volatile
  4880                           
  4881                           ;MachineConfig.c: 40: LATD = 0x00;
  4882  0040CA  0E00               	movlw	0
  4883  0040CC  6E8C               	movwf	3980,c	;volatile
  4884                           
  4885                           ;MachineConfig.c: 41: LATE = 0x00;
  4886  0040CE  0E00               	movlw	0
  4887  0040D0  6E8D               	movwf	3981,c	;volatile
  4888                           
  4889                           ;MachineConfig.c: 43: nRBPU = 0;
  4890  0040D2  9EF1               	bcf	intcon2,7,c	;volatile
  4891                           
  4892                           ;MachineConfig.c: 46: ADCON0 = 0x00;
  4893  0040D4  0E00               	movlw	0
  4894  0040D6  6EC2               	movwf	4034,c	;volatile
  4895                           
  4896                           ;MachineConfig.c: 47: ADCON1 = 0b00001101;
  4897  0040D8  0E0D               	movlw	13
  4898  0040DA  6EC1               	movwf	4033,c	;volatile
  4899                           
  4900                           ;MachineConfig.c: 50: CVRCON = 0x00;
  4901  0040DC  0E00               	movlw	0
  4902  0040DE  6EB5               	movwf	4021,c	;volatile
  4903                           
  4904                           ;MachineConfig.c: 51: CMCONbits.CIS = 0;
  4905  0040E0  96B4               	bcf	4020,3,c	;volatile
  4906                           
  4907                           ;MachineConfig.c: 52: ADCON2 = 0b10110001;
  4908  0040E2  0EB1               	movlw	177
  4909  0040E4  6EC0               	movwf	4032,c	;volatile
  4910                           
  4911                           ;MachineConfig.c: 55: INT1IE = 1;
  4912  0040E6  86F0               	bsf	intcon3,3,c	;volatile
  4913                           
  4914                           ;MachineConfig.c: 57: TMR0IE = 1;
  4915  0040E8  8AF2               	bsf	intcon,5,c	;volatile
  4916                           
  4917                           ;MachineConfig.c: 58: TMR1IE = 1;
  4918  0040EA  809D               	bsf	3997,0,c	;volatile
  4919                           
  4920                           ;MachineConfig.c: 59: T1CON = 0b10110000;
  4921  0040EC  0EB0               	movlw	176
  4922  0040EE  6ECD               	movwf	4045,c	;volatile
  4923                           
  4924                           ;MachineConfig.c: 60: T3CON = 0b10110000;
  4925  0040F0  0EB0               	movlw	176
  4926  0040F2  6EB1               	movwf	4017,c	;volatile
  4927                           
  4928                           ;MachineConfig.c: 61: TMR2IE = 1;
  4929  0040F4  829D               	bsf	3997,1,c	;volatile
  4930                           
  4931                           ;MachineConfig.c: 62: TMR3IE = 1;
  4932  0040F6  82A0               	bsf	4000,1,c	;volatile
  4933                           
  4934                           ;MachineConfig.c: 63: PEIE = 1;
  4935  0040F8  8CF2               	bsf	intcon,6,c	;volatile
  4936                           
  4937                           ;MachineConfig.c: 64: ADIE = 0;
  4938  0040FA  9C9D               	bcf	3997,6,c	;volatile
  4939                           
  4940                           ;MachineConfig.c: 65: (INTCONbits.GIE = 0);
  4941  0040FC  9EF2               	bcf	intcon,7,c	;volatile
  4942  0040FE  0012               	return		;funcret
  4943  004100                     __end_of_machineConfig:
  4944                           	opt stack 0
  4945                           tblptru	equ	0xFF8
  4946                           tblptrh	equ	0xFF7
  4947                           tblptrl	equ	0xFF6
  4948                           tablat	equ	0xFF5
  4949                           prodh	equ	0xFF4
  4950                           prodl	equ	0xFF3
  4951                           intcon	equ	0xFF2
  4952                           intcon2	equ	0xFF1
  4953                           intcon3	equ	0xFF0
  4954                           postinc0	equ	0xFEE
  4955                           wreg	equ	0xFE8
  4956                           postdec1	equ	0xFE5
  4957                           fsr1l	equ	0xFE1
  4958                           indf2	equ	0xFDF
  4959                           postinc2	equ	0xFDE
  4960                           postdec2	equ	0xFDD
  4961                           fsr2h	equ	0xFDA
  4962                           fsr2l	equ	0xFD9
  4963                           status	equ	0xFD8
  4964                           
  4965 ;; *************** function _logRun *****************
  4966 ;; Defined at:
  4967 ;;		line 84 in file "EEPROM.c"
  4968 ;; Parameters:    Size  Location     Type
  4969 ;;		None
  4970 ;; Auto vars:     Size  Location     Type
  4971 ;;  byte_i          1   53[BANK0 ] unsigned char 
  4972 ;;  i               2   55[BANK0 ] int 
  4973 ;;  num             1   49[BANK0 ] unsigned char 
  4974 ;;  addr            2   57[BANK0 ] unsigned short 
  4975 ;;  byte11          1   54[BANK0 ] unsigned char 
  4976 ;;  byte3           1   52[BANK0 ] unsigned char 
  4977 ;;  byte2           1   51[BANK0 ] unsigned char 
  4978 ;;  byte1           1   50[BANK0 ] unsigned char 
  4979 ;; Return value:  Size  Location     Type
  4980 ;;                  1    wreg      void 
  4981 ;; Registers used:
  4982 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4983 ;; Tracked objects:
  4984 ;;		On entry : 0/0
  4985 ;;		On exit  : 0/0
  4986 ;;		Unchanged: 0/0
  4987 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4988 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4989 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4990 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4991 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4992 ;;Total ram usage:       10 bytes
  4993 ;; Hardware stack levels used:    1
  4994 ;; Hardware stack levels required when called:   11
  4995 ;; This function calls:
  4996 ;;		_EEPROM_read
  4997 ;;		_EEPROM_write
  4998 ;; This function is called by:
  4999 ;;		_main
  5000 ;; This function uses a non-reentrant model
  5001 ;;
  5002                           
  5003                           	psect	text13
  5004  00302E                     __ptext13:
  5005                           	opt stack 0
  5006  00302E                     _logRun:
  5007                           	opt stack 19
  5008                           
  5009                           ;EEPROM.c: 97: sel = EEPROM_read(0);
  5010                           
  5011                           ;incstack = 0
  5012  00302E  0E00               	movlw	0
  5013  003030  0100               	movlb	0	; () banked
  5014  003032  6F81               	movwf	(EEPROM_read@address+1)& (0+255),b
  5015  003034  0E00               	movlw	0
  5016  003036  6F80               	movwf	EEPROM_read@address& (0+255),b
  5017  003038  EC9F  F024         	call	_EEPROM_read	;wreg free
  5018  00303C  0100               	movlb	0	; () banked
  5019  00303E  6FFD               	movwf	_sel& (0+255),b
  5020                           
  5021                           ; BSR set to: 0
  5022                           ;EEPROM.c: 98: unsigned short addr = 1 + 11 * sel;
  5023  003040  0100               	movlb	0	; () banked
  5024  003042  51FD               	movf	_sel& (0+255),w,b
  5025  003044  0D0B               	mullw	11
  5026  003046  0E01               	movlw	1
  5027  003048  24F3               	addwf	prodl,w,c
  5028  00304A  0100               	movlb	0	; () banked
  5029  00304C  6FB9               	movwf	logRun@addr& (0+255),b
  5030  00304E  0E00               	movlw	0
  5031  003050  20F4               	addwfc	prodh,w,c
  5032  003052  0100               	movlb	0	; () banked
  5033  003054  6FBA               	movwf	(logRun@addr+1)& (0+255),b
  5034                           
  5035                           ; BSR set to: 0
  5036                           ;EEPROM.c: 101: if (sel < 3){
  5037  003056  0E03               	movlw	3
  5038  003058  0100               	movlb	0	; () banked
  5039  00305A  61FD               	cpfslt	_sel& (0+255),b
  5040  00305C  D00E               	goto	l8200
  5041                           
  5042                           ; BSR set to: 0
  5043                           ;EEPROM.c: 102: unsigned char num = sel+1;
  5044  00305E  0100               	movlb	0	; () banked
  5045  003060  29FD               	incf	_sel& (0+255),w,b
  5046  003062  0100               	movlb	0	; () banked
  5047  003064  6FB1               	movwf	logRun@num& (0+255),b
  5048                           
  5049                           ; BSR set to: 0
  5050                           ;EEPROM.c: 103: EEPROM_write(0, num);
  5051  003066  0E00               	movlw	0
  5052  003068  0100               	movlb	0	; () banked
  5053  00306A  6FAC               	movwf	(EEPROM_write@address+1)& (0+255),b
  5054  00306C  0E00               	movlw	0
  5055  00306E  6FAB               	movwf	EEPROM_write@address& (0+255),b
  5056  003070  C0B1  F0AD         	movff	logRun@num,EEPROM_write@data
  5057  003074  EC63  F01A         	call	_EEPROM_write	;wreg free
  5058                           
  5059                           ;EEPROM.c: 104: }
  5060  003078  D00A               	goto	l8202
  5061  00307A                     l8200:
  5062                           
  5063                           ;EEPROM.c: 105: else{
  5064                           ;EEPROM.c: 106: EEPROM_write(0, 0);
  5065  00307A  0E00               	movlw	0
  5066  00307C  0100               	movlb	0	; () banked
  5067  00307E  6FAC               	movwf	(EEPROM_write@address+1)& (0+255),b
  5068  003080  0E00               	movlw	0
  5069  003082  6FAB               	movwf	EEPROM_write@address& (0+255),b
  5070  003084  0E00               	movlw	0
  5071  003086  0100               	movlb	0	; () banked
  5072  003088  6FAD               	movwf	EEPROM_write@data& (0+255),b
  5073  00308A  EC63  F01A         	call	_EEPROM_write	;wreg free
  5074  00308E                     l8202:
  5075                           
  5076                           ;EEPROM.c: 107: }
  5077                           ;EEPROM.c: 110: unsigned char byte1 = 0b10000000 | count_total;
  5078  00308E  0100               	movlb	0	; () banked
  5079  003090  51FE               	movf	_count_total& (0+255),w,b
  5080  003092  0980               	iorlw	128
  5081  003094  0100               	movlb	0	; () banked
  5082  003096  6FB2               	movwf	logRun@byte1& (0+255),b
  5083                           
  5084                           ; BSR set to: 0
  5085                           ;EEPROM.c: 111: EEPROM_write(addr, byte1);
  5086  003098  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  5087  00309C  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  5088  0030A0  C0B2  F0AD         	movff	logRun@byte1,EEPROM_write@data
  5089  0030A4  EC63  F01A         	call	_EEPROM_write	;wreg free
  5090                           
  5091                           ;EEPROM.c: 112: addr++;
  5092  0030A8  0100               	movlb	0	; () banked
  5093  0030AA  4BB9               	infsnz	logRun@addr& (0+255),f,b
  5094  0030AC  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  5095                           
  5096                           ; BSR set to: 0
  5097                           ;EEPROM.c: 115: unsigned char byte2 = (count_pop_no_tab << 4) | count_pop_w_tab;
  5098  0030AE  3861               	swapf	_count_pop_no_tab,w,c
  5099  0030B0  0BF0               	andlw	240
  5100  0030B2  1063               	iorwf	_count_pop_w_tab,w,c
  5101  0030B4  0100               	movlb	0	; () banked
  5102  0030B6  6FB3               	movwf	logRun@byte2& (0+255),b
  5103                           
  5104                           ; BSR set to: 0
  5105                           ;EEPROM.c: 116: EEPROM_write(addr, byte2);
  5106  0030B8  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  5107  0030BC  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  5108  0030C0  C0B3  F0AD         	movff	logRun@byte2,EEPROM_write@data
  5109  0030C4  EC63  F01A         	call	_EEPROM_write	;wreg free
  5110                           
  5111                           ;EEPROM.c: 117: addr++;
  5112  0030C8  0100               	movlb	0	; () banked
  5113  0030CA  4BB9               	infsnz	logRun@addr& (0+255),f,b
  5114  0030CC  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  5115                           
  5116                           ; BSR set to: 0
  5117                           ;EEPROM.c: 118: unsigned char byte3 = (count_can_w_lab << 4) | count_can_no_lab;
  5118  0030CE  385F               	swapf	_count_can_w_lab,w,c
  5119  0030D0  0BF0               	andlw	240
  5120  0030D2  105D               	iorwf	_count_can_no_lab,w,c
  5121  0030D4  0100               	movlb	0	; () banked
  5122  0030D6  6FB4               	movwf	logRun@byte3& (0+255),b
  5123                           
  5124                           ; BSR set to: 0
  5125                           ;EEPROM.c: 119: EEPROM_write(addr, byte3);
  5126  0030D8  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  5127  0030DC  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  5128  0030E0  C0B4  F0AD         	movff	logRun@byte3,EEPROM_write@data
  5129  0030E4  EC63  F01A         	call	_EEPROM_write	;wreg free
  5130                           
  5131                           ;EEPROM.c: 120: addr++;
  5132  0030E8  0100               	movlb	0	; () banked
  5133  0030EA  4BB9               	infsnz	logRun@addr& (0+255),f,b
  5134  0030EC  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  5135                           
  5136                           ; BSR set to: 0
  5137                           ;EEPROM.c: 123: for(int i = 0; i < 7; i++){
  5138  0030EE  0E00               	movlw	0
  5139  0030F0  0100               	movlb	0	; () banked
  5140  0030F2  6FB8               	movwf	(logRun@i+1)& (0+255),b
  5141  0030F4  0E00               	movlw	0
  5142  0030F6  6FB7               	movwf	logRun@i& (0+255),b
  5143                           
  5144                           ; BSR set to: 0
  5145  0030F8  0100               	movlb	0	; () banked
  5146  0030FA  BFB8               	btfsc	(logRun@i+1)& (0+255),7,b
  5147  0030FC  D008               	goto	l8226
  5148  0030FE  0100               	movlb	0	; () banked
  5149  003100  51B8               	movf	(logRun@i+1)& (0+255),w,b
  5150  003102  E128               	bnz	l959
  5151  003104  0E07               	movlw	7
  5152  003106  0100               	movlb	0	; () banked
  5153  003108  5DB7               	subwf	logRun@i& (0+255),w,b
  5154  00310A  B0D8               	btfsc	status,0,c
  5155  00310C  D023               	goto	l959
  5156  00310E                     l8226:
  5157                           
  5158                           ; BSR set to: 0
  5159                           ;EEPROM.c: 124: unsigned char byte_i = startTime[i];
  5160  00310E  90D8               	bcf	status,0,c
  5161  003110  0100               	movlb	0	; () banked
  5162  003112  35B7               	rlcf	logRun@i& (0+255),w,b
  5163  003114  6ED9               	movwf	fsr2l,c
  5164  003116  0100               	movlb	0	; () banked
  5165  003118  35B8               	rlcf	(logRun@i+1)& (0+255),w,b
  5166  00311A  6EDA               	movwf	fsr2h,c
  5167  00311C  0E0E               	movlw	low _startTime
  5168  00311E  26D9               	addwf	fsr2l,f,c
  5169  003120  0E01               	movlw	high _startTime
  5170  003122  22DA               	addwfc	fsr2h,f,c
  5171  003124  50DF               	movf	indf2,w,c
  5172  003126  0100               	movlb	0	; () banked
  5173  003128  6FB5               	movwf	logRun@byte_i& (0+255),b
  5174                           
  5175                           ; BSR set to: 0
  5176                           ;EEPROM.c: 125: EEPROM_write(addr, byte_i);
  5177  00312A  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  5178  00312E  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  5179  003132  C0B5  F0AD         	movff	logRun@byte_i,EEPROM_write@data
  5180  003136  EC63  F01A         	call	_EEPROM_write	;wreg free
  5181                           
  5182                           ;EEPROM.c: 126: addr++;
  5183  00313A  0100               	movlb	0	; () banked
  5184  00313C  4BB9               	infsnz	logRun@addr& (0+255),f,b
  5185  00313E  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  5186                           
  5187                           ; BSR set to: 0
  5188  003140  0100               	movlb	0	; () banked
  5189  003142  4BB7               	infsnz	logRun@i& (0+255),f,b
  5190  003144  2BB8               	incf	(logRun@i+1)& (0+255),f,b
  5191                           
  5192                           ; BSR set to: 0
  5193  003146  0100               	movlb	0	; () banked
  5194  003148  BFB8               	btfsc	(logRun@i+1)& (0+255),7,b
  5195  00314A  D7E1               	goto	l8226
  5196  00314C  0100               	movlb	0	; () banked
  5197  00314E  51B8               	movf	(logRun@i+1)& (0+255),w,b
  5198  003150  E101               	bnz	u7150
  5199  003152  D7D8               	goto	L4
  5200  003154                     u7150:
  5201  003154                     l959:
  5202                           
  5203                           ; BSR set to: 0
  5204                           ;EEPROM.c: 127: }
  5205                           ;EEPROM.c: 130: unsigned char byte11 = total_time;
  5206  003154  C0F8  F0B6         	movff	_total_time,logRun@byte11
  5207                           
  5208                           ; BSR set to: 0
  5209                           ;EEPROM.c: 131: EEPROM_write(addr, byte11);
  5210  003158  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  5211  00315C  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  5212  003160  C0B6  F0AD         	movff	logRun@byte11,EEPROM_write@data
  5213  003164  EC63  F01A         	call	_EEPROM_write	;wreg free
  5214  003168  0012               	return		;funcret
  5215  00316A                     __end_of_logRun:
  5216                           	opt stack 0
  5217                           tblptru	equ	0xFF8
  5218                           tblptrh	equ	0xFF7
  5219                           tblptrl	equ	0xFF6
  5220                           tablat	equ	0xFF5
  5221                           prodh	equ	0xFF4
  5222                           prodl	equ	0xFF3
  5223                           intcon	equ	0xFF2
  5224                           intcon2	equ	0xFF1
  5225                           intcon3	equ	0xFF0
  5226                           postinc0	equ	0xFEE
  5227                           wreg	equ	0xFE8
  5228                           postdec1	equ	0xFE5
  5229                           fsr1l	equ	0xFE1
  5230                           indf2	equ	0xFDF
  5231                           postinc2	equ	0xFDE
  5232                           postdec2	equ	0xFDD
  5233                           fsr2h	equ	0xFDA
  5234                           fsr2l	equ	0xFD9
  5235                           status	equ	0xFD8
  5236                           
  5237 ;; *************** function _EEPROM_write *****************
  5238 ;; Defined at:
  5239 ;;		line 32 in file "EEPROM.c"
  5240 ;; Parameters:    Size  Location     Type
  5241 ;;  address         2   43[BANK0 ] unsigned short 
  5242 ;;  data            1   45[BANK0 ] unsigned char 
  5243 ;; Auto vars:     Size  Location     Type
  5244 ;;  i               1   48[BANK0 ] unsigned char 
  5245 ;;  i               1   47[BANK0 ] unsigned char 
  5246 ;; Return value:  Size  Location     Type
  5247 ;;                  1    wreg      void 
  5248 ;; Registers used:
  5249 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5250 ;; Tracked objects:
  5251 ;;		On entry : 0/0
  5252 ;;		On exit  : 0/0
  5253 ;;		Unchanged: 0/0
  5254 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5255 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5256 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5257 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5258 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5259 ;;Total ram usage:        6 bytes
  5260 ;; Hardware stack levels used:    1
  5261 ;; Hardware stack levels required when called:   10
  5262 ;; This function calls:
  5263 ;;		_EEPROM_read
  5264 ;;		_lcdInst
  5265 ;;		_printf
  5266 ;; This function is called by:
  5267 ;;		_Loading
  5268 ;;		_logRun
  5269 ;; This function uses a non-reentrant model
  5270 ;;
  5271                           
  5272                           	psect	text14
  5273  0034C6                     __ptext14:
  5274                           	opt stack 0
  5275  0034C6                     _EEPROM_write:
  5276                           	opt stack 18
  5277                           
  5278                           ;EEPROM.c: 33: EECON1bits.WREN = 1;
  5279                           
  5280                           ;incstack = 0
  5281  0034C6  84A6               	bsf	4006,2,c	;volatile
  5282                           
  5283                           ;EEPROM.c: 36: EEADRH = (unsigned char)(address >> 8);
  5284  0034C8  0100               	movlb	0	; () banked
  5285  0034CA  51AC               	movf	(EEPROM_write@address+1)& (0+255),w,b
  5286  0034CC  6EAA               	movwf	4010,c	;volatile
  5287                           
  5288                           ; BSR set to: 0
  5289                           ;EEPROM.c: 37: EEADR = (unsigned char)address;
  5290  0034CE  C0AB  FFA9         	movff	EEPROM_write@address,4009	;volatile
  5291                           
  5292                           ; BSR set to: 0
  5293                           ;EEPROM.c: 39: EEDATA = data;
  5294  0034D2  C0AD  FFA8         	movff	EEPROM_write@data,4008	;volatile
  5295                           
  5296                           ; BSR set to: 0
  5297                           ;EEPROM.c: 40: EECON1bits.EEPGD = 0;
  5298  0034D6  9EA6               	bcf	4006,7,c	;volatile
  5299                           
  5300                           ; BSR set to: 0
  5301                           ;EEPROM.c: 41: EECON1bits.CFGS = 0;
  5302  0034D8  9CA6               	bcf	4006,6,c	;volatile
  5303                           
  5304                           ; BSR set to: 0
  5305                           ;EEPROM.c: 43: (INTCONbits.GIE = 0);
  5306  0034DA  9EF2               	bcf	intcon,7,c	;volatile
  5307                           
  5308                           ;EEPROM.c: 45: EECON2 = 0x55;
  5309  0034DC  0E55               	movlw	85
  5310  0034DE  6EA7               	movwf	4007,c	;volatile
  5311                           
  5312                           ;EEPROM.c: 46: EECON2 = 0x0AA;
  5313  0034E0  0EAA               	movlw	170
  5314  0034E2  6EA7               	movwf	4007,c	;volatile
  5315                           
  5316                           ; BSR set to: 0
  5317                           ;EEPROM.c: 47: EECON1bits.WR = 1;
  5318  0034E4  82A6               	bsf	4006,1,c	;volatile
  5319                           
  5320                           ; BSR set to: 0
  5321                           ;EEPROM.c: 48: (INTCONbits.GIE = 1);
  5322  0034E6  8EF2               	bsf	intcon,7,c	;volatile
  5323  0034E8                     l937:
  5324  0034E8  A8A1               	btfss	4001,4,c	;volatile
  5325  0034EA  D7FE               	goto	l937
  5326                           
  5327                           ;EEPROM.c: 53: PIR2bits.EEIF = 0;
  5328  0034EC  98A1               	bcf	4001,4,c	;volatile
  5329                           
  5330                           ;EEPROM.c: 54: EECON1bits.WREN = 0;
  5331  0034EE  94A6               	bcf	4006,2,c	;volatile
  5332                           
  5333                           ;EEPROM.c: 57: if(debug){
  5334  0034F0  5065               	movf	_debug,w,c
  5335  0034F2  1066               	iorwf	_debug+1,w,c
  5336  0034F4  B4D8               	btfsc	status,2,c
  5337  0034F6  0012               	return	
  5338                           
  5339                           ;EEPROM.c: 58: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  5340  0034F8  0E01               	movlw	1
  5341  0034FA  ECDC  F024         	call	_lcdInst
  5342  0034FE  0E68               	movlw	104
  5343  003500  0100               	movlb	0	; () banked
  5344  003502  6FAE               	movwf	??_EEPROM_write& (0+255),b
  5345  003504  0EE4               	movlw	228
  5346  003506                     u7507:
  5347  003506  2EE8               	decfsz	wreg,f,c
  5348  003508  D7FE               	bra	u7507
  5349  00350A  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  5350  00350C  D7FC               	bra	u7507
  5351  00350E  F000               	nop	
  5352                           
  5353                           ;EEPROM.c: 59: lcdInst(0b10000000);;
  5354  003510  0E80               	movlw	128
  5355  003512  ECDC  F024         	call	_lcdInst
  5356                           
  5357                           ;EEPROM.c: 60: if(EEPROM_read(address)==data){
  5358  003516  C0AB  F080         	movff	EEPROM_write@address,EEPROM_read@address
  5359  00351A  C0AC  F081         	movff	EEPROM_write@address+1,EEPROM_read@address+1
  5360  00351E  EC9F  F024         	call	_EEPROM_read	;wreg free
  5361  003522  0100               	movlb	0	; () banked
  5362  003524  19AD               	xorwf	EEPROM_write@data& (0+255),w,b
  5363  003526  A4D8               	btfss	status,2,c
  5364  003528  D024               	goto	l6212
  5365                           
  5366                           ; BSR set to: 0
  5367                           ;EEPROM.c: 61: printf("(data: %u, addr: %u)", data, address);
  5368  00352A  0E34               	movlw	low STR_66
  5369  00352C  0100               	movlb	0	; () banked
  5370  00352E  6F8E               	movwf	printf@f& (0+255),b
  5371  003530  0EFB               	movlw	high STR_66
  5372  003532  0100               	movlb	0	; () banked
  5373  003534  6F8F               	movwf	(printf@f+1)& (0+255),b
  5374  003536  C0AD  F090         	movff	EEPROM_write@data,?_printf+2
  5375  00353A  0100               	movlb	0	; () banked
  5376  00353C  6B91               	clrf	(?_printf+3)& (0+255),b
  5377  00353E  C0AB  F092         	movff	EEPROM_write@address,?_printf+4
  5378  003542  C0AC  F093         	movff	EEPROM_write@address+1,?_printf+5
  5379  003546  ECB8  F008         	call	_printf	;wreg free
  5380                           
  5381                           ;EEPROM.c: 62: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));}
      +                          ;
  5382  00354A  0E00               	movlw	0
  5383  00354C  0100               	movlb	0	; () banked
  5384  00354E  6FAF               	movwf	EEPROM_write@i& (0+255),b
  5385  003550                     l6204:
  5386                           
  5387                           ; BSR set to: 0
  5388  003550  0E63               	movlw	99
  5389  003552  0100               	movlb	0	; () banked
  5390  003554  65AF               	cpfsgt	EEPROM_write@i& (0+255),b
  5391  003556  D001               	goto	l6208
  5392  003558  0012               	return	
  5393  00355A                     l6208:
  5394                           
  5395                           ; BSR set to: 0
  5396  00355A  0E68               	movlw	104
  5397  00355C  0100               	movlb	0	; () banked
  5398  00355E  6FAE               	movwf	??_EEPROM_write& (0+255),b
  5399  003560  0EE4               	movlw	228
  5400  003562                     u7517:
  5401  003562  2EE8               	decfsz	wreg,f,c
  5402  003564  D7FE               	bra	u7517
  5403  003566  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  5404  003568  D7FC               	bra	u7517
  5405  00356A  F000               	nop	
  5406  00356C  0100               	movlb	0	; () banked
  5407  00356E  2BAF               	incf	EEPROM_write@i& (0+255),f,b
  5408  003570  D7EF               	goto	l6204
  5409  003572                     l6212:
  5410                           
  5411                           ; BSR set to: 0
  5412                           ;EEPROM.c: 64: else{ printf("FAILED"); for(char i=0;i<100;i++){_delay((unsigned long)((1
      +                          0)*(32000000/4000.0)));}; }
  5413  003572  0EBD               	movlw	low STR_67
  5414  003574  0100               	movlb	0	; () banked
  5415  003576  6F8E               	movwf	printf@f& (0+255),b
  5416  003578  0EFF               	movlw	high STR_67
  5417  00357A  0100               	movlb	0	; () banked
  5418  00357C  6F8F               	movwf	(printf@f+1)& (0+255),b
  5419  00357E  ECB8  F008         	call	_printf	;wreg free
  5420  003582  0E00               	movlw	0
  5421  003584  0100               	movlb	0	; () banked
  5422  003586  6FB0               	movwf	EEPROM_write@i_1329& (0+255),b
  5423  003588                     l6216:
  5424                           
  5425                           ; BSR set to: 0
  5426  003588  0E63               	movlw	99
  5427  00358A  0100               	movlb	0	; () banked
  5428  00358C  65B0               	cpfsgt	EEPROM_write@i_1329& (0+255),b
  5429  00358E  D001               	goto	l6220
  5430  003590  0012               	return	
  5431  003592                     l6220:
  5432                           
  5433                           ; BSR set to: 0
  5434  003592  0E68               	movlw	104
  5435  003594  0100               	movlb	0	; () banked
  5436  003596  6FAE               	movwf	??_EEPROM_write& (0+255),b
  5437  003598  0EE4               	movlw	228
  5438  00359A                     u7527:
  5439  00359A  2EE8               	decfsz	wreg,f,c
  5440  00359C  D7FE               	bra	u7527
  5441  00359E  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  5442  0035A0  D7FC               	bra	u7527
  5443  0035A2  F000               	nop	
  5444  0035A4  0100               	movlb	0	; () banked
  5445  0035A6  2BB0               	incf	EEPROM_write@i_1329& (0+255),f,b
  5446  0035A8  D7EF               	goto	l6216
  5447  0035AA                     __end_of_EEPROM_write:
  5448                           	opt stack 0
  5449                           tblptru	equ	0xFF8
  5450                           tblptrh	equ	0xFF7
  5451                           tblptrl	equ	0xFF6
  5452                           tablat	equ	0xFF5
  5453                           prodh	equ	0xFF4
  5454                           prodl	equ	0xFF3
  5455                           intcon	equ	0xFF2
  5456                           intcon2	equ	0xFF1
  5457                           intcon3	equ	0xFF0
  5458                           postinc0	equ	0xFEE
  5459                           wreg	equ	0xFE8
  5460                           postdec1	equ	0xFE5
  5461                           fsr1l	equ	0xFE1
  5462                           indf2	equ	0xFDF
  5463                           postinc2	equ	0xFDE
  5464                           postdec2	equ	0xFDD
  5465                           fsr2h	equ	0xFDA
  5466                           fsr2l	equ	0xFD9
  5467                           status	equ	0xFD8
  5468                           
  5469 ;; *************** function _EEPROM_read *****************
  5470 ;; Defined at:
  5471 ;;		line 68 in file "EEPROM.c"
  5472 ;; Parameters:    Size  Location     Type
  5473 ;;  address         2    0[BANK0 ] unsigned short 
  5474 ;; Auto vars:     Size  Location     Type
  5475 ;;		None
  5476 ;; Return value:  Size  Location     Type
  5477 ;;                  1    wreg      unsigned char 
  5478 ;; Registers used:
  5479 ;;		wreg, status,2
  5480 ;; Tracked objects:
  5481 ;;		On entry : 0/0
  5482 ;;		On exit  : 0/0
  5483 ;;		Unchanged: 0/0
  5484 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5485 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5486 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5487 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5488 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5489 ;;Total ram usage:        2 bytes
  5490 ;; Hardware stack levels used:    1
  5491 ;; Hardware stack levels required when called:    7
  5492 ;; This function calls:
  5493 ;;		Nothing
  5494 ;; This function is called by:
  5495 ;;		_Loading
  5496 ;;		_EEPROM_write
  5497 ;;		_logRun
  5498 ;; This function uses a non-reentrant model
  5499 ;;
  5500                           
  5501                           	psect	text15
  5502  00493E                     __ptext15:
  5503                           	opt stack 0
  5504  00493E                     _EEPROM_read:
  5505                           	opt stack 20
  5506                           
  5507                           ;EEPROM.c: 70: EEADRH = (unsigned char)(address >> 8);
  5508                           
  5509                           ;incstack = 0
  5510  00493E  0100               	movlb	0	; () banked
  5511  004940  5181               	movf	(EEPROM_read@address+1)& (0+255),w,b
  5512  004942  6EAA               	movwf	4010,c	;volatile
  5513                           
  5514                           ; BSR set to: 0
  5515                           ;EEPROM.c: 71: EEADR = (unsigned char)address;
  5516  004944  C080  FFA9         	movff	EEPROM_read@address,4009	;volatile
  5517                           
  5518                           ; BSR set to: 0
  5519                           ;EEPROM.c: 73: EECON1bits.EEPGD = 0;
  5520  004948  9EA6               	bcf	4006,7,c	;volatile
  5521                           
  5522                           ; BSR set to: 0
  5523                           ;EEPROM.c: 74: EECON1bits.CFGS = 0;
  5524  00494A  9CA6               	bcf	4006,6,c	;volatile
  5525                           
  5526                           ; BSR set to: 0
  5527                           ;EEPROM.c: 75: EECON1bits.RD = 1;
  5528  00494C  80A6               	bsf	4006,0,c	;volatile
  5529  00494E                     l950:
  5530  00494E  B0A6               	btfsc	4006,0,c	;volatile
  5531  004950  D7FE               	goto	l950
  5532                           
  5533                           ;EEPROM.c: 81: return EEDATA;
  5534  004952  50A8               	movf	4008,w,c	;volatile
  5535  004954  0012               	return	
  5536  004956                     __end_of_EEPROM_read:
  5537                           	opt stack 0
  5538                           tblptru	equ	0xFF8
  5539                           tblptrh	equ	0xFF7
  5540                           tblptrl	equ	0xFF6
  5541                           tablat	equ	0xFF5
  5542                           prodh	equ	0xFF4
  5543                           prodl	equ	0xFF3
  5544                           intcon	equ	0xFF2
  5545                           intcon2	equ	0xFF1
  5546                           intcon3	equ	0xFF0
  5547                           postinc0	equ	0xFEE
  5548                           wreg	equ	0xFE8
  5549                           postdec1	equ	0xFE5
  5550                           fsr1l	equ	0xFE1
  5551                           indf2	equ	0xFDF
  5552                           postinc2	equ	0xFDE
  5553                           postdec2	equ	0xFDD
  5554                           fsr2h	equ	0xFDA
  5555                           fsr2l	equ	0xFD9
  5556                           status	equ	0xFD8
  5557                           
  5558 ;; *************** function _initUI *****************
  5559 ;; Defined at:
  5560 ;;		line 62 in file "UI.c"
  5561 ;; Parameters:    Size  Location     Type
  5562 ;;		None
  5563 ;; Auto vars:     Size  Location     Type
  5564 ;;		None
  5565 ;; Return value:  Size  Location     Type
  5566 ;;                  1    wreg      void 
  5567 ;; Registers used:
  5568 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5569 ;; Tracked objects:
  5570 ;;		On entry : 0/0
  5571 ;;		On exit  : 0/0
  5572 ;;		Unchanged: 0/0
  5573 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5574 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5575 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5576 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5577 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5578 ;;Total ram usage:        0 bytes
  5579 ;; Hardware stack levels used:    1
  5580 ;; Hardware stack levels required when called:   12
  5581 ;; This function calls:
  5582 ;;		_change_state_to_menu_start
  5583 ;;		_loadRTC
  5584 ;; This function is called by:
  5585 ;;		_main
  5586 ;; This function uses a non-reentrant model
  5587 ;;
  5588                           
  5589                           	psect	text16
  5590  004710                     __ptext16:
  5591                           	opt stack 0
  5592  004710                     _initUI:
  5593                           	opt stack 18
  5594                           
  5595                           ;UI.c: 63: (INTCONbits.GIE = 1);
  5596                           
  5597                           ;incstack = 0
  5598  004710  8EF2               	bsf	intcon,7,c	;volatile
  5599                           
  5600                           ;UI.c: 64: machine_state = UI_state;
  5601  004712  0E00               	movlw	0
  5602  004714  0100               	movlb	0	; () banked
  5603  004716  6FFC               	movwf	_machine_state& (0+255),b
  5604                           
  5605                           ;UI.c: 65: logstate = 0;
  5606  004718  0E00               	movlw	0
  5607  00471A  0100               	movlb	0	; () banked
  5608  00471C  6FF7               	movwf	(_logstate+1)& (0+255),b
  5609  00471E  0E00               	movlw	0
  5610  004720  6FF6               	movwf	_logstate& (0+255),b
  5611                           
  5612                           ; BSR set to: 0
  5613                           ;UI.c: 67: if(RTCflag){
  5614  004722  0100               	movlb	0	; () banked
  5615  004724  51DE               	movf	_RTCflag& (0+255),w,b
  5616  004726  0100               	movlb	0	; () banked
  5617  004728  11DF               	iorwf	(_RTCflag+1)& (0+255),w,b
  5618  00472A  A4D8               	btfss	status,2,c
  5619                           
  5620                           ; BSR set to: 0
  5621                           ;UI.c: 68: loadRTC();
  5622  00472C  ECCC  F01D         	call	_loadRTC	;wreg free
  5623                           
  5624                           ;UI.c: 69: }
  5625                           ;UI.c: 71: change_state_to_menu_start();
  5626  004730  ECCD  F023         	call	_change_state_to_menu_start	;wreg free
  5627                           
  5628                           ;UI.c: 72: firstboot = 1;
  5629  004734  0E00               	movlw	0
  5630  004736  6E76               	movwf	_firstboot+1,c
  5631  004738  0E01               	movlw	1
  5632  00473A  6E75               	movwf	_firstboot,c
  5633  00473C  0012               	return		;funcret
  5634  00473E                     __end_of_initUI:
  5635                           	opt stack 0
  5636                           tblptru	equ	0xFF8
  5637                           tblptrh	equ	0xFF7
  5638                           tblptrl	equ	0xFF6
  5639                           tablat	equ	0xFF5
  5640                           prodh	equ	0xFF4
  5641                           prodl	equ	0xFF3
  5642                           intcon	equ	0xFF2
  5643                           intcon2	equ	0xFF1
  5644                           intcon3	equ	0xFF0
  5645                           postinc0	equ	0xFEE
  5646                           wreg	equ	0xFE8
  5647                           postdec1	equ	0xFE5
  5648                           fsr1l	equ	0xFE1
  5649                           indf2	equ	0xFDF
  5650                           postinc2	equ	0xFDE
  5651                           postdec2	equ	0xFDD
  5652                           fsr2h	equ	0xFDA
  5653                           fsr2l	equ	0xFD9
  5654                           status	equ	0xFD8
  5655                           
  5656 ;; *************** function _loadRTC *****************
  5657 ;; Defined at:
  5658 ;;		line 28 in file "RTC.c"
  5659 ;; Parameters:    Size  Location     Type
  5660 ;;		None
  5661 ;; Auto vars:     Size  Location     Type
  5662 ;;  i               2   22[BANK0 ] int 
  5663 ;; Return value:  Size  Location     Type
  5664 ;;                  1    wreg      void 
  5665 ;; Registers used:
  5666 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5667 ;; Tracked objects:
  5668 ;;		On entry : 0/0
  5669 ;;		On exit  : 0/0
  5670 ;;		Unchanged: 0/0
  5671 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5672 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5673 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5674 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5675 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5676 ;;Total ram usage:        3 bytes
  5677 ;; Hardware stack levels used:    1
  5678 ;; Hardware stack levels required when called:    9
  5679 ;; This function calls:
  5680 ;;		_I2C_Master_Init
  5681 ;;		_I2C_Master_Start
  5682 ;;		_I2C_Master_Stop
  5683 ;;		_I2C_Master_Write
  5684 ;; This function is called by:
  5685 ;;		_initUI
  5686 ;; This function uses a non-reentrant model
  5687 ;;
  5688                           
  5689                           	psect	text17
  5690  003B98                     __ptext17:
  5691                           	opt stack 0
  5692  003B98                     _loadRTC:
  5693                           	opt stack 20
  5694                           
  5695                           ;RTC.c: 30: I2C_Master_Init(10000);
  5696                           
  5697                           ;incstack = 0
  5698  003B98  0E10               	movlw	16
  5699  003B9A  0100               	movlb	0	; () banked
  5700  003B9C  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  5701  003B9E  0E27               	movlw	39
  5702  003BA0  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  5703  003BA2  0E00               	movlw	0
  5704  003BA4  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  5705  003BA6  0E00               	movlw	0
  5706  003BA8  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  5707  003BAA  EC22  F020         	call	_I2C_Master_Init	;wreg free
  5708                           
  5709                           ;RTC.c: 32: (INTCONbits.GIE = 0);
  5710  003BAE  9EF2               	bcf	intcon,7,c	;volatile
  5711                           
  5712                           ;RTC.c: 34: I2C_Master_Start();
  5713  003BB0  EC02  F025         	call	_I2C_Master_Start	;wreg free
  5714                           
  5715                           ;RTC.c: 35: I2C_Master_Write(0b11010000);
  5716  003BB4  0E00               	movlw	0
  5717  003BB6  0100               	movlb	0	; () banked
  5718  003BB8  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5719  003BBA  0ED0               	movlw	208
  5720  003BBC  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  5721  003BBE  ECF0  F024         	call	_I2C_Master_Write	;wreg free
  5722                           
  5723                           ;RTC.c: 36: I2C_Master_Write(0x00);
  5724  003BC2  0E00               	movlw	0
  5725  003BC4  0100               	movlb	0	; () banked
  5726  003BC6  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5727  003BC8  0E00               	movlw	0
  5728  003BCA  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  5729  003BCC  ECF0  F024         	call	_I2C_Master_Write	;wreg free
  5730                           
  5731                           ;RTC.c: 37: for(int i = 0; i<7; i++){
  5732  003BD0  0E00               	movlw	0
  5733  003BD2  0100               	movlb	0	; () banked
  5734  003BD4  6F97               	movwf	(loadRTC@i+1)& (0+255),b
  5735  003BD6  0E00               	movlw	0
  5736  003BD8  6F96               	movwf	loadRTC@i& (0+255),b
  5737  003BDA                     l6346:
  5738                           
  5739                           ; BSR set to: 0
  5740  003BDA  0100               	movlb	0	; () banked
  5741  003BDC  BF97               	btfsc	(loadRTC@i+1)& (0+255),7,b
  5742  003BDE  D008               	goto	l6350
  5743  003BE0  0100               	movlb	0	; () banked
  5744  003BE2  5197               	movf	(loadRTC@i+1)& (0+255),w,b
  5745  003BE4  E11B               	bnz	l6356
  5746  003BE6  0E07               	movlw	7
  5747  003BE8  0100               	movlb	0	; () banked
  5748  003BEA  5D96               	subwf	loadRTC@i& (0+255),w,b
  5749  003BEC  B0D8               	btfsc	status,0,c
  5750  003BEE  D016               	goto	l6356
  5751  003BF0                     l6350:
  5752                           
  5753                           ; BSR set to: 0
  5754                           ;RTC.c: 38: I2C_Master_Write(time[i]);
  5755  003BF0  0E24               	movlw	low _time
  5756  003BF2  0100               	movlb	0	; () banked
  5757  003BF4  2596               	addwf	loadRTC@i& (0+255),w,b
  5758  003BF6  6ED9               	movwf	fsr2l,c
  5759  003BF8  0E01               	movlw	high _time
  5760  003BFA  0100               	movlb	0	; () banked
  5761  003BFC  2197               	addwfc	(loadRTC@i+1)& (0+255),w,b
  5762  003BFE  6EDA               	movwf	fsr2h,c
  5763  003C00  50DF               	movf	indf2,w,c
  5764  003C02  0100               	movlb	0	; () banked
  5765  003C04  6F95               	movwf	??_loadRTC& (0+255),b
  5766  003C06  0100               	movlb	0	; () banked
  5767  003C08  5195               	movf	??_loadRTC& (0+255),w,b
  5768  003C0A  0100               	movlb	0	; () banked
  5769  003C0C  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  5770  003C0E  6B82               	clrf	(I2C_Master_Write@d+1)& (0+255),b
  5771  003C10  ECF0  F024         	call	_I2C_Master_Write	;wreg free
  5772  003C14  0100               	movlb	0	; () banked
  5773  003C16  4B96               	infsnz	loadRTC@i& (0+255),f,b
  5774  003C18  2B97               	incf	(loadRTC@i+1)& (0+255),f,b
  5775  003C1A  D7DF               	goto	l6346
  5776  003C1C                     l6356:
  5777                           
  5778                           ; BSR set to: 0
  5779                           ;RTC.c: 39: }
  5780                           ;RTC.c: 40: I2C_Master_Stop();
  5781  003C1C  ECFE  F024         	call	_I2C_Master_Stop	;wreg free
  5782                           
  5783                           ;RTC.c: 41: (INTCONbits.GIE = 1);
  5784  003C20  8EF2               	bsf	intcon,7,c	;volatile
  5785  003C22  0012               	return		;funcret
  5786  003C24                     __end_of_loadRTC:
  5787                           	opt stack 0
  5788                           tblptru	equ	0xFF8
  5789                           tblptrh	equ	0xFF7
  5790                           tblptrl	equ	0xFF6
  5791                           tablat	equ	0xFF5
  5792                           prodh	equ	0xFF4
  5793                           prodl	equ	0xFF3
  5794                           intcon	equ	0xFF2
  5795                           intcon2	equ	0xFF1
  5796                           intcon3	equ	0xFF0
  5797                           postinc0	equ	0xFEE
  5798                           wreg	equ	0xFE8
  5799                           postdec1	equ	0xFE5
  5800                           fsr1l	equ	0xFE1
  5801                           indf2	equ	0xFDF
  5802                           postinc2	equ	0xFDE
  5803                           postdec2	equ	0xFDD
  5804                           fsr2h	equ	0xFDA
  5805                           fsr2l	equ	0xFD9
  5806                           status	equ	0xFD8
  5807                           
  5808 ;; *************** function _I2C_Master_Init *****************
  5809 ;; Defined at:
  5810 ;;		line 15 in file "I2C.c"
  5811 ;; Parameters:    Size  Location     Type
  5812 ;;  c               4   13[BANK0 ] const unsigned long 
  5813 ;; Auto vars:     Size  Location     Type
  5814 ;;		None
  5815 ;; Return value:  Size  Location     Type
  5816 ;;                  1    wreg      void 
  5817 ;; Registers used:
  5818 ;;		wreg, status,2, status,0, cstack
  5819 ;; Tracked objects:
  5820 ;;		On entry : 0/0
  5821 ;;		On exit  : 0/0
  5822 ;;		Unchanged: 0/0
  5823 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5824 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5825 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5826 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5827 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5828 ;;Total ram usage:        8 bytes
  5829 ;; Hardware stack levels used:    1
  5830 ;; Hardware stack levels required when called:    8
  5831 ;; This function calls:
  5832 ;;		___lldiv
  5833 ;; This function is called by:
  5834 ;;		_main
  5835 ;;		_loadRTC
  5836 ;; This function uses a non-reentrant model
  5837 ;;
  5838                           
  5839                           	psect	text18
  5840  004044                     __ptext18:
  5841                           	opt stack 0
  5842  004044                     _I2C_Master_Init:
  5843                           	opt stack 20
  5844                           
  5845                           ;I2C.c: 18: SSPSTAT = 0b00000000;
  5846                           
  5847                           ;incstack = 0
  5848  004044  0E00               	movlw	0
  5849  004046  6EC7               	movwf	4039,c	;volatile
  5850                           
  5851                           ;I2C.c: 19: SSPCON1 = 0b00101000;
  5852  004048  0E28               	movlw	40
  5853  00404A  6EC6               	movwf	4038,c	;volatile
  5854                           
  5855                           ;I2C.c: 20: SSPCON2 = 0b00000000;
  5856  00404C  0E00               	movlw	0
  5857  00404E  6EC5               	movwf	4037,c	;volatile
  5858                           
  5859                           ;I2C.c: 21: SSPADD = (32000000/(4*c))-1;
  5860  004050  0E00               	movlw	0
  5861  004052  0100               	movlb	0	; () banked
  5862  004054  6F80               	movwf	___lldiv@dividend& (0+255),b
  5863  004056  0E48               	movlw	72
  5864  004058  6F81               	movwf	(___lldiv@dividend+1)& (0+255),b
  5865  00405A  0EE8               	movlw	232
  5866  00405C  6F82               	movwf	(___lldiv@dividend+2)& (0+255),b
  5867  00405E  0E01               	movlw	1
  5868  004060  6F83               	movwf	(___lldiv@dividend+3)& (0+255),b
  5869  004062  C08D  F091         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  5870  004066  C08E  F092         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  5871  00406A  C08F  F093         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  5872  00406E  C090  F094         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  5873  004072  0E02               	movlw	2
  5874  004074                     u4625:
  5875  004074  90D8               	bcf	status,0,c
  5876  004076  0100               	movlb	0	; () banked
  5877  004078  3791               	rlcf	??_I2C_Master_Init& (0+255),f,b
  5878  00407A  3792               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
  5879  00407C  3793               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
  5880  00407E  3794               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
  5881  004080  2EE8               	decfsz	wreg,f,c
  5882  004082  D7F8               	goto	u4625
  5883  004084  C091  F084         	movff	??_I2C_Master_Init,___lldiv@divisor
  5884  004088  C092  F085         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  5885  00408C  C093  F086         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  5886  004090  C094  F087         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  5887  004094  ECC8  F01C         	call	___lldiv	;wreg free
  5888  004098  0100               	movlb	0	; () banked
  5889  00409A  0580               	decf	?___lldiv& (0+255),w,b
  5890  00409C  6EC8               	movwf	4040,c	;volatile
  5891                           
  5892                           ; BSR set to: 0
  5893                           ;I2C.c: 22: TRISC3 = 1;
  5894  00409E  8694               	bsf	3988,3,c	;volatile
  5895                           
  5896                           ; BSR set to: 0
  5897                           ;I2C.c: 23: TRISC4 = 1;
  5898  0040A0  8894               	bsf	3988,4,c	;volatile
  5899                           
  5900                           ; BSR set to: 0
  5901  0040A2  0012               	return		;funcret
  5902  0040A4                     __end_of_I2C_Master_Init:
  5903                           	opt stack 0
  5904                           tblptru	equ	0xFF8
  5905                           tblptrh	equ	0xFF7
  5906                           tblptrl	equ	0xFF6
  5907                           tablat	equ	0xFF5
  5908                           prodh	equ	0xFF4
  5909                           prodl	equ	0xFF3
  5910                           intcon	equ	0xFF2
  5911                           intcon2	equ	0xFF1
  5912                           intcon3	equ	0xFF0
  5913                           postinc0	equ	0xFEE
  5914                           wreg	equ	0xFE8
  5915                           postdec1	equ	0xFE5
  5916                           fsr1l	equ	0xFE1
  5917                           indf2	equ	0xFDF
  5918                           postinc2	equ	0xFDE
  5919                           postdec2	equ	0xFDD
  5920                           fsr2h	equ	0xFDA
  5921                           fsr2l	equ	0xFD9
  5922                           status	equ	0xFD8
  5923                           
  5924 ;; *************** function ___lldiv *****************
  5925 ;; Defined at:
  5926 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  5927 ;; Parameters:    Size  Location     Type
  5928 ;;  dividend        4    0[BANK0 ] unsigned long 
  5929 ;;  divisor         4    4[BANK0 ] unsigned long 
  5930 ;; Auto vars:     Size  Location     Type
  5931 ;;  quotient        4    8[BANK0 ] unsigned long 
  5932 ;;  counter         1   12[BANK0 ] unsigned char 
  5933 ;; Return value:  Size  Location     Type
  5934 ;;                  4    0[BANK0 ] unsigned long 
  5935 ;; Registers used:
  5936 ;;		wreg, status,2, status,0
  5937 ;; Tracked objects:
  5938 ;;		On entry : 0/0
  5939 ;;		On exit  : 0/0
  5940 ;;		Unchanged: 0/0
  5941 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5942 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5943 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5944 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5945 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5946 ;;Total ram usage:       13 bytes
  5947 ;; Hardware stack levels used:    1
  5948 ;; Hardware stack levels required when called:    7
  5949 ;; This function calls:
  5950 ;;		Nothing
  5951 ;; This function is called by:
  5952 ;;		_I2C_Master_Init
  5953 ;; This function uses a non-reentrant model
  5954 ;;
  5955                           
  5956                           	psect	text19
  5957  003990                     __ptext19:
  5958                           	opt stack 0
  5959  003990                     ___lldiv:
  5960                           	opt stack 20
  5961                           
  5962                           ; BSR set to: 0
  5963                           ;incstack = 0
  5964  003990  0E00               	movlw	0
  5965  003992  0100               	movlb	0	; () banked
  5966  003994  6F88               	movwf	___lldiv@quotient& (0+255),b
  5967  003996  0E00               	movlw	0
  5968  003998  6F89               	movwf	(___lldiv@quotient+1)& (0+255),b
  5969  00399A  0E00               	movlw	0
  5970  00399C  6F8A               	movwf	(___lldiv@quotient+2)& (0+255),b
  5971  00399E  0E00               	movlw	0
  5972  0039A0  6F8B               	movwf	(___lldiv@quotient+3)& (0+255),b
  5973                           
  5974                           ; BSR set to: 0
  5975  0039A2  0100               	movlb	0	; () banked
  5976  0039A4  5184               	movf	___lldiv@divisor& (0+255),w,b
  5977  0039A6  0100               	movlb	0	; () banked
  5978  0039A8  1185               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  5979  0039AA  0100               	movlb	0	; () banked
  5980  0039AC  1186               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  5981  0039AE  0100               	movlb	0	; () banked
  5982  0039B0  1187               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  5983  0039B2  B4D8               	btfsc	status,2,c
  5984  0039B4  D042               	goto	l1702
  5985                           
  5986                           ; BSR set to: 0
  5987  0039B6  0E01               	movlw	1
  5988  0039B8  0100               	movlb	0	; () banked
  5989  0039BA  6F8C               	movwf	___lldiv@counter& (0+255),b
  5990  0039BC  D008               	goto	l5782
  5991  0039BE                     l5780:
  5992                           
  5993                           ; BSR set to: 0
  5994  0039BE  0100               	movlb	0	; () banked
  5995  0039C0  90D8               	bcf	status,0,c
  5996  0039C2  3784               	rlcf	___lldiv@divisor& (0+255),f,b
  5997  0039C4  3785               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  5998  0039C6  3786               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  5999  0039C8  3787               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  6000  0039CA  0100               	movlb	0	; () banked
  6001  0039CC  2B8C               	incf	___lldiv@counter& (0+255),f,b
  6002  0039CE                     l5782:
  6003                           
  6004                           ; BSR set to: 0
  6005  0039CE  0100               	movlb	0	; () banked
  6006  0039D0  AF87               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  6007  0039D2  D7F5               	goto	l5780
  6008  0039D4                     l5784:
  6009                           
  6010                           ; BSR set to: 0
  6011  0039D4  0100               	movlb	0	; () banked
  6012  0039D6  90D8               	bcf	status,0,c
  6013  0039D8  3788               	rlcf	___lldiv@quotient& (0+255),f,b
  6014  0039DA  3789               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  6015  0039DC  378A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  6016  0039DE  378B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  6017                           
  6018                           ; BSR set to: 0
  6019  0039E0  0100               	movlb	0	; () banked
  6020  0039E2  5184               	movf	___lldiv@divisor& (0+255),w,b
  6021  0039E4  0100               	movlb	0	; () banked
  6022  0039E6  5D80               	subwf	___lldiv@dividend& (0+255),w,b
  6023  0039E8  0100               	movlb	0	; () banked
  6024  0039EA  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  6025  0039EC  0100               	movlb	0	; () banked
  6026  0039EE  5981               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  6027  0039F0  0100               	movlb	0	; () banked
  6028  0039F2  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  6029  0039F4  0100               	movlb	0	; () banked
  6030  0039F6  5982               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  6031  0039F8  0100               	movlb	0	; () banked
  6032  0039FA  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  6033  0039FC  0100               	movlb	0	; () banked
  6034  0039FE  5983               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  6035  003A00  A0D8               	btfss	status,0,c
  6036  003A02  D012               	goto	l5792
  6037                           
  6038                           ; BSR set to: 0
  6039  003A04  0100               	movlb	0	; () banked
  6040  003A06  5184               	movf	___lldiv@divisor& (0+255),w,b
  6041  003A08  0100               	movlb	0	; () banked
  6042  003A0A  5F80               	subwf	___lldiv@dividend& (0+255),f,b
  6043  003A0C  0100               	movlb	0	; () banked
  6044  003A0E  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  6045  003A10  0100               	movlb	0	; () banked
  6046  003A12  5B81               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  6047  003A14  0100               	movlb	0	; () banked
  6048  003A16  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  6049  003A18  0100               	movlb	0	; () banked
  6050  003A1A  5B82               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  6051  003A1C  0100               	movlb	0	; () banked
  6052  003A1E  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  6053  003A20  0100               	movlb	0	; () banked
  6054  003A22  5B83               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  6055                           
  6056                           ; BSR set to: 0
  6057  003A24  0100               	movlb	0	; () banked
  6058  003A26  8188               	bsf	___lldiv@quotient& (0+255),0,b
  6059  003A28                     l5792:
  6060                           
  6061                           ; BSR set to: 0
  6062  003A28  0100               	movlb	0	; () banked
  6063  003A2A  90D8               	bcf	status,0,c
  6064  003A2C  3387               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  6065  003A2E  3386               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  6066  003A30  3385               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  6067  003A32  3384               	rrcf	___lldiv@divisor& (0+255),f,b
  6068                           
  6069                           ; BSR set to: 0
  6070  003A34  0100               	movlb	0	; () banked
  6071  003A36  2F8C               	decfsz	___lldiv@counter& (0+255),f,b
  6072  003A38  D7CD               	goto	l5784
  6073  003A3A                     l1702:
  6074                           
  6075                           ; BSR set to: 0
  6076  003A3A  C088  F080         	movff	___lldiv@quotient,?___lldiv
  6077  003A3E  C089  F081         	movff	___lldiv@quotient+1,?___lldiv+1
  6078  003A42  C08A  F082         	movff	___lldiv@quotient+2,?___lldiv+2
  6079  003A46  C08B  F083         	movff	___lldiv@quotient+3,?___lldiv+3
  6080                           
  6081                           ; BSR set to: 0
  6082  003A4A  0012               	return		;funcret
  6083  003A4C                     __end_of___lldiv:
  6084                           	opt stack 0
  6085                           tblptru	equ	0xFF8
  6086                           tblptrh	equ	0xFF7
  6087                           tblptrl	equ	0xFF6
  6088                           tablat	equ	0xFF5
  6089                           prodh	equ	0xFF4
  6090                           prodl	equ	0xFF3
  6091                           intcon	equ	0xFF2
  6092                           intcon2	equ	0xFF1
  6093                           intcon3	equ	0xFF0
  6094                           postinc0	equ	0xFEE
  6095                           wreg	equ	0xFE8
  6096                           postdec1	equ	0xFE5
  6097                           fsr1l	equ	0xFE1
  6098                           indf2	equ	0xFDF
  6099                           postinc2	equ	0xFDE
  6100                           postdec2	equ	0xFDD
  6101                           fsr2h	equ	0xFDA
  6102                           fsr2l	equ	0xFD9
  6103                           status	equ	0xFD8
  6104                           
  6105 ;; *************** function _change_state_to_menu_start *****************
  6106 ;; Defined at:
  6107 ;;		line 474 in file "UI.c"
  6108 ;; Parameters:    Size  Location     Type
  6109 ;;		None
  6110 ;; Auto vars:     Size  Location     Type
  6111 ;;		None
  6112 ;; Return value:  Size  Location     Type
  6113 ;;                  1    wreg      void 
  6114 ;; Registers used:
  6115 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6116 ;; Tracked objects:
  6117 ;;		On entry : 0/0
  6118 ;;		On exit  : 0/0
  6119 ;;		Unchanged: 0/0
  6120 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6121 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6122 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6123 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6124 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6125 ;;Total ram usage:        0 bytes
  6126 ;; Hardware stack levels used:    1
  6127 ;; Hardware stack levels required when called:   11
  6128 ;; This function calls:
  6129 ;;		_lcdInst
  6130 ;;		_printRTC
  6131 ;;		_printf
  6132 ;; This function is called by:
  6133 ;;		_initUI
  6134 ;; This function uses a non-reentrant model
  6135 ;;
  6136                           
  6137                           	psect	text20
  6138  00479A                     __ptext20:
  6139                           	opt stack 0
  6140  00479A                     _change_state_to_menu_start:
  6141                           	opt stack 18
  6142                           
  6143                           ;UI.c: 475: cur_state = 0;
  6144                           
  6145                           ; BSR set to: 0
  6146                           ;incstack = 0
  6147  00479A  0E00               	movlw	0
  6148  00479C  0100               	movlb	0	; () banked
  6149  00479E  6FE3               	movwf	(_cur_state+1)& (0+255),b
  6150  0047A0  0E00               	movlw	0
  6151  0047A2  6FE2               	movwf	_cur_state& (0+255),b
  6152                           
  6153                           ; BSR set to: 0
  6154                           ;UI.c: 477: lcdInst(0b10000000);;
  6155  0047A4  0E80               	movlw	128
  6156  0047A6  ECDC  F024         	call	_lcdInst
  6157                           
  6158                           ;UI.c: 478: printRTC();
  6159  0047AA  ECCC  F00F         	call	_printRTC	;wreg free
  6160                           
  6161                           ;UI.c: 479: lcdInst(0b11000000);;
  6162  0047AE  0EC0               	movlw	192
  6163  0047B0  ECDC  F024         	call	_lcdInst
  6164                           
  6165                           ;UI.c: 480: printf("PUSH TO CONTINUE");
  6166  0047B4  0EF7               	movlw	low STR_30
  6167  0047B6  0100               	movlb	0	; () banked
  6168  0047B8  6F8E               	movwf	printf@f& (0+255),b
  6169  0047BA  0EFD               	movlw	high STR_30
  6170  0047BC  0100               	movlb	0	; () banked
  6171  0047BE  6F8F               	movwf	(printf@f+1)& (0+255),b
  6172  0047C0  ECB8  F008         	call	_printf	;wreg free
  6173  0047C4  0012               	return		;funcret
  6174  0047C6                     __end_of_change_state_to_menu_start:
  6175                           	opt stack 0
  6176                           tblptru	equ	0xFF8
  6177                           tblptrh	equ	0xFF7
  6178                           tblptrl	equ	0xFF6
  6179                           tablat	equ	0xFF5
  6180                           prodh	equ	0xFF4
  6181                           prodl	equ	0xFF3
  6182                           intcon	equ	0xFF2
  6183                           intcon2	equ	0xFF1
  6184                           intcon3	equ	0xFF0
  6185                           postinc0	equ	0xFEE
  6186                           wreg	equ	0xFE8
  6187                           postdec1	equ	0xFE5
  6188                           fsr1l	equ	0xFE1
  6189                           indf2	equ	0xFDF
  6190                           postinc2	equ	0xFDE
  6191                           postdec2	equ	0xFDD
  6192                           fsr2h	equ	0xFDA
  6193                           fsr2l	equ	0xFD9
  6194                           status	equ	0xFD8
  6195                           
  6196 ;; *************** function _initTime *****************
  6197 ;; Defined at:
  6198 ;;		line 17 in file "RTC.c"
  6199 ;; Parameters:    Size  Location     Type
  6200 ;;  s               1    wreg     unsigned char 
  6201 ;;  m               1    0[BANK0 ] unsigned char 
  6202 ;;  h               1    1[BANK0 ] unsigned char 
  6203 ;;  w               1    2[BANK0 ] unsigned char 
  6204 ;;  DD              1    3[BANK0 ] unsigned char 
  6205 ;;  MM              1    4[BANK0 ] unsigned char 
  6206 ;;  YY              1    5[BANK0 ] unsigned char 
  6207 ;; Auto vars:     Size  Location     Type
  6208 ;;  s               1    6[BANK0 ] unsigned char 
  6209 ;; Return value:  Size  Location     Type
  6210 ;;                  1    wreg      void 
  6211 ;; Registers used:
  6212 ;;		wreg
  6213 ;; Tracked objects:
  6214 ;;		On entry : 0/0
  6215 ;;		On exit  : 0/0
  6216 ;;		Unchanged: 0/0
  6217 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6218 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6219 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6220 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6221 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6222 ;;Total ram usage:        7 bytes
  6223 ;; Hardware stack levels used:    1
  6224 ;; Hardware stack levels required when called:    7
  6225 ;; This function calls:
  6226 ;;		Nothing
  6227 ;; This function is called by:
  6228 ;;		_main
  6229 ;; This function uses a non-reentrant model
  6230 ;;
  6231                           
  6232                           	psect	text21
  6233  0048FE                     __ptext21:
  6234                           	opt stack 0
  6235  0048FE                     _initTime:
  6236                           	opt stack 23
  6237                           
  6238                           ;incstack = 0
  6239                           ;initTime@s stored from wreg
  6240  0048FE  0100               	movlb	0	; () banked
  6241  004900  6F86               	movwf	initTime@s& (0+255),b
  6242                           
  6243                           ;RTC.c: 19: time[0] = s;
  6244  004902  C086  F124         	movff	initTime@s,_time
  6245                           
  6246                           ;RTC.c: 20: time[1] = m;
  6247  004906  C080  F125         	movff	initTime@m,_time+1
  6248                           
  6249                           ;RTC.c: 21: time[2] = h;
  6250  00490A  C081  F126         	movff	initTime@h,_time+2
  6251                           
  6252                           ;RTC.c: 22: time[3] = w;
  6253  00490E  C082  F127         	movff	initTime@w,_time+3
  6254                           
  6255                           ;RTC.c: 23: time[4] = DD;
  6256  004912  C083  F128         	movff	initTime@DD,_time+4
  6257                           
  6258                           ;RTC.c: 24: time[5] = MM;
  6259  004916  C084  F129         	movff	initTime@MM,_time+5
  6260                           
  6261                           ;RTC.c: 25: time[6] = YY;
  6262  00491A  C085  F12A         	movff	initTime@YY,_time+6
  6263  00491E  0012               	return		;funcret
  6264  004920                     __end_of_initTime:
  6265                           	opt stack 0
  6266                           tblptru	equ	0xFF8
  6267                           tblptrh	equ	0xFF7
  6268                           tblptrl	equ	0xFF6
  6269                           tablat	equ	0xFF5
  6270                           prodh	equ	0xFF4
  6271                           prodl	equ	0xFF3
  6272                           intcon	equ	0xFF2
  6273                           intcon2	equ	0xFF1
  6274                           intcon3	equ	0xFF0
  6275                           postinc0	equ	0xFEE
  6276                           wreg	equ	0xFE8
  6277                           postdec1	equ	0xFE5
  6278                           fsr1l	equ	0xFE1
  6279                           indf2	equ	0xFDF
  6280                           postinc2	equ	0xFDE
  6281                           postdec2	equ	0xFDD
  6282                           fsr2h	equ	0xFDA
  6283                           fsr2l	equ	0xFD9
  6284                           status	equ	0xFD8
  6285                           
  6286 ;; *************** function _initLCD *****************
  6287 ;; Defined at:
  6288 ;;		line 48 in file "lcd.c"
  6289 ;; Parameters:    Size  Location     Type
  6290 ;;		None
  6291 ;; Auto vars:     Size  Location     Type
  6292 ;;		None
  6293 ;; Return value:  Size  Location     Type
  6294 ;;                  1    wreg      void 
  6295 ;; Registers used:
  6296 ;;		wreg, status,2, status,0, cstack
  6297 ;; Tracked objects:
  6298 ;;		On entry : 0/0
  6299 ;;		On exit  : 0/0
  6300 ;;		Unchanged: 0/0
  6301 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6302 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6303 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6304 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6305 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6306 ;;Total ram usage:        1 bytes
  6307 ;; Hardware stack levels used:    1
  6308 ;; Hardware stack levels required when called:    9
  6309 ;; This function calls:
  6310 ;;		_lcdInst
  6311 ;; This function is called by:
  6312 ;;		_main
  6313 ;; This function uses a non-reentrant model
  6314 ;;
  6315                           
  6316                           	psect	text22
  6317  004398                     __ptext22:
  6318                           	opt stack 0
  6319  004398                     _initLCD:
  6320                           	opt stack 21
  6321                           
  6322                           ;lcd.c: 49: _delay((unsigned long)((15)*(32000000/4000.0)));
  6323                           
  6324                           ;incstack = 0
  6325  004398  0E9C               	movlw	156
  6326  00439A  0100               	movlb	0	; () banked
  6327  00439C  6F83               	movwf	??_initLCD& (0+255),b
  6328  00439E  0ED7               	movlw	215
  6329  0043A0                     u7537:
  6330  0043A0  2EE8               	decfsz	wreg,f,c
  6331  0043A2  D7FE               	bra	u7537
  6332  0043A4  2F83               	decfsz	??_initLCD& (0+255),f,b
  6333  0043A6  D7FC               	bra	u7537
  6334                           
  6335                           ;lcd.c: 50: lcdInst(0b00110011);
  6336  0043A8  0E33               	movlw	51
  6337  0043AA  ECDC  F024         	call	_lcdInst
  6338                           
  6339                           ;lcd.c: 51: lcdInst(0b00110010);
  6340  0043AE  0E32               	movlw	50
  6341  0043B0  ECDC  F024         	call	_lcdInst
  6342                           
  6343                           ;lcd.c: 53: lcdInst(0b00101000);
  6344  0043B4  0E28               	movlw	40
  6345  0043B6  ECDC  F024         	call	_lcdInst
  6346                           
  6347                           ;lcd.c: 54: lcdInst(0b00001100);
  6348  0043BA  0E0C               	movlw	12
  6349  0043BC  ECDC  F024         	call	_lcdInst
  6350                           
  6351                           ;lcd.c: 55: lcdInst(0b00000110);
  6352  0043C0  0E06               	movlw	6
  6353  0043C2  ECDC  F024         	call	_lcdInst
  6354                           
  6355                           ;lcd.c: 56: lcdInst(0b00000001);
  6356  0043C6  0E01               	movlw	1
  6357  0043C8  ECDC  F024         	call	_lcdInst
  6358                           
  6359                           ;lcd.c: 57: _delay((unsigned long)((15)*(32000000/4000.0)));
  6360  0043CC  0E9C               	movlw	156
  6361  0043CE  0100               	movlb	0	; () banked
  6362  0043D0  6F83               	movwf	??_initLCD& (0+255),b
  6363  0043D2  0ED7               	movlw	215
  6364  0043D4                     u7547:
  6365  0043D4  2EE8               	decfsz	wreg,f,c
  6366  0043D6  D7FE               	bra	u7547
  6367  0043D8  2F83               	decfsz	??_initLCD& (0+255),f,b
  6368  0043DA  D7FC               	bra	u7547
  6369  0043DC  0012               	return		;funcret
  6370  0043DE                     __end_of_initLCD:
  6371                           	opt stack 0
  6372                           tblptru	equ	0xFF8
  6373                           tblptrh	equ	0xFF7
  6374                           tblptrl	equ	0xFF6
  6375                           tablat	equ	0xFF5
  6376                           prodh	equ	0xFF4
  6377                           prodl	equ	0xFF3
  6378                           intcon	equ	0xFF2
  6379                           intcon2	equ	0xFF1
  6380                           intcon3	equ	0xFF0
  6381                           postinc0	equ	0xFEE
  6382                           wreg	equ	0xFE8
  6383                           postdec1	equ	0xFE5
  6384                           fsr1l	equ	0xFE1
  6385                           indf2	equ	0xFDF
  6386                           postinc2	equ	0xFDE
  6387                           postdec2	equ	0xFDD
  6388                           fsr2h	equ	0xFDA
  6389                           fsr2l	equ	0xFD9
  6390                           status	equ	0xFD8
  6391                           
  6392 ;; *************** function _UI *****************
  6393 ;; Defined at:
  6394 ;;		line 76 in file "UI.c"
  6395 ;; Parameters:    Size  Location     Type
  6396 ;;		None
  6397 ;; Auto vars:     Size  Location     Type
  6398 ;;  i               1   73[BANK0 ] unsigned char 
  6399 ;;  i               1   85[BANK0 ] unsigned char 
  6400 ;;  i               1   84[BANK0 ] unsigned char 
  6401 ;;  i               1   83[BANK0 ] unsigned char 
  6402 ;;  i               1   82[BANK0 ] unsigned char 
  6403 ;;  i               1   81[BANK0 ] unsigned char 
  6404 ;;  i               1   80[BANK0 ] unsigned char 
  6405 ;;  i               1   79[BANK0 ] unsigned char 
  6406 ;;  i               1   78[BANK0 ] unsigned char 
  6407 ;;  i               1   77[BANK0 ] unsigned char 
  6408 ;;  i               1   76[BANK0 ] unsigned char 
  6409 ;;  i               1   75[BANK0 ] unsigned char 
  6410 ;;  i               1   74[BANK0 ] unsigned char 
  6411 ;;  month           4   86[BANK0 ] unsigned char [4]
  6412 ;;  i               1   72[BANK0 ] unsigned char 
  6413 ;; Return value:  Size  Location     Type
  6414 ;;                  1    wreg      void 
  6415 ;; Registers used:
  6416 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6417 ;; Tracked objects:
  6418 ;;		On entry : 0/0
  6419 ;;		On exit  : 0/0
  6420 ;;		Unchanged: 0/0
  6421 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6422 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6423 ;;      Locals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6424 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6425 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6426 ;;Total ram usage:       22 bytes
  6427 ;; Hardware stack levels used:    1
  6428 ;; Hardware stack levels required when called:   11
  6429 ;; This function calls:
  6430 ;;		___awdiv
  6431 ;;		___awmod
  6432 ;;		_change_state_to_menu_12
  6433 ;;		_change_state_to_menu_22
  6434 ;;		_lcdInst
  6435 ;;		_printRTC
  6436 ;;		_printf
  6437 ;;		_strcpy
  6438 ;; This function is called by:
  6439 ;;		_main
  6440 ;; This function uses a non-reentrant model
  6441 ;;
  6442                           
  6443                           	psect	text23
  6444  0008CA                     __ptext23:
  6445                           	opt stack 0
  6446  0008CA                     _UI:
  6447                           	opt stack 19
  6448                           
  6449                           ;UI.c: 77: if(machine_state == DoneSorting_state){
  6450                           
  6451                           ;incstack = 0
  6452  0008CA  0E02               	movlw	2
  6453  0008CC  0100               	movlb	0	; () banked
  6454  0008CE  19FC               	xorwf	_machine_state& (0+255),w,b
  6455  0008D0  A4D8               	btfss	status,2,c
  6456  0008D2  D075               	goto	l7628
  6457                           
  6458                           ; BSR set to: 0
  6459                           ;UI.c: 78: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  6460  0008D4  0E01               	movlw	1
  6461  0008D6  ECDC  F024         	call	_lcdInst
  6462  0008DA  0E68               	movlw	104
  6463  0008DC  0100               	movlb	0	; () banked
  6464  0008DE  6FC4               	movwf	??_UI& (0+255),b
  6465  0008E0  0EE4               	movlw	228
  6466  0008E2                     u7557:
  6467  0008E2  2EE8               	decfsz	wreg,f,c
  6468  0008E4  D7FE               	bra	u7557
  6469  0008E6  2FC4               	decfsz	??_UI& (0+255),f,b
  6470  0008E8  D7FC               	bra	u7557
  6471  0008EA  F000               	nop	
  6472                           
  6473                           ;UI.c: 79: lcdInst(0b10000000);;
  6474  0008EC  0E80               	movlw	128
  6475  0008EE  ECDC  F024         	call	_lcdInst
  6476                           
  6477                           ;UI.c: 80: printf("RESULTS IN LOG %d", sel+1);
  6478  0008F2  0EA3               	movlw	low STR_1
  6479  0008F4  0100               	movlb	0	; () banked
  6480  0008F6  6F8E               	movwf	printf@f& (0+255),b
  6481  0008F8  0EFB               	movlw	high STR_1
  6482  0008FA  0100               	movlb	0	; () banked
  6483  0008FC  6F8F               	movwf	(printf@f+1)& (0+255),b
  6484  0008FE  0E01               	movlw	1
  6485  000900  0100               	movlb	0	; () banked
  6486  000902  25FD               	addwf	_sel& (0+255),w,b
  6487  000904  0100               	movlb	0	; () banked
  6488  000906  6F90               	movwf	(?_printf+2)& (0+255),b
  6489  000908  0100               	movlb	0	; () banked
  6490  00090A  6B91               	clrf	(?_printf+3)& (0+255),b
  6491  00090C  0E00               	movlw	0
  6492  00090E  2391               	addwfc	(?_printf+3)& (0+255),f,b
  6493  000910  ECB8  F008         	call	_printf	;wreg free
  6494                           
  6495                           ;UI.c: 81: lcdInst(0b11000000);;
  6496  000914  0EC0               	movlw	192
  6497  000916  ECDC  F024         	call	_lcdInst
  6498                           
  6499                           ;UI.c: 82: printf("TIME: %d:%02d", (total_time % 3600) / 60, (total_time % 3600) % 60);
  6500  00091A  0E0E               	movlw	14
  6501  00091C  0100               	movlb	0	; () banked
  6502  00091E  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  6503  000920  0E10               	movlw	16
  6504  000922  6F82               	movwf	___awmod@divisor& (0+255),b
  6505  000924  C0F8  F080         	movff	_total_time,___awmod@dividend
  6506  000928  C0F9  F081         	movff	_total_time+1,___awmod@dividend+1
  6507  00092C  EC7B  F01D         	call	___awmod	;wreg free
  6508  000930  C080  F0C6         	movff	?___awmod,_UI$2314
  6509  000934  C081  F0C7         	movff	?___awmod+1,_UI$2314+1
  6510                           
  6511                           ;UI.c: 82: printf("TIME: %d:%02d", (total_time % 3600) / 60, (total_time % 3600) % 60);
  6512  000938  0E27               	movlw	low STR_2
  6513  00093A  0100               	movlb	0	; () banked
  6514  00093C  6F8E               	movwf	printf@f& (0+255),b
  6515  00093E  0EFF               	movlw	high STR_2
  6516  000940  0100               	movlb	0	; () banked
  6517  000942  6F8F               	movwf	(printf@f+1)& (0+255),b
  6518  000944  0E0E               	movlw	14
  6519  000946  0100               	movlb	0	; () banked
  6520  000948  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  6521  00094A  0E10               	movlw	16
  6522  00094C  6F82               	movwf	___awmod@divisor& (0+255),b
  6523  00094E  C0F8  F080         	movff	_total_time,___awmod@dividend
  6524  000952  C0F9  F081         	movff	_total_time+1,___awmod@dividend+1
  6525  000956  EC7B  F01D         	call	___awmod	;wreg free
  6526  00095A  C080  F086         	movff	?___awmod,___awdiv@dividend
  6527  00095E  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  6528  000962  0E00               	movlw	0
  6529  000964  0100               	movlb	0	; () banked
  6530  000966  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  6531  000968  0E3C               	movlw	60
  6532  00096A  6F88               	movwf	___awdiv@divisor& (0+255),b
  6533  00096C  EC69  F01C         	call	___awdiv	;wreg free
  6534  000970  C086  F090         	movff	?___awdiv,?_printf+2
  6535  000974  C087  F091         	movff	?___awdiv+1,?_printf+3
  6536  000978  C0C6  F080         	movff	_UI$2314,___awmod@dividend
  6537  00097C  C0C7  F081         	movff	_UI$2314+1,___awmod@dividend+1
  6538  000980  0E00               	movlw	0
  6539  000982  0100               	movlb	0	; () banked
  6540  000984  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  6541  000986  0E3C               	movlw	60
  6542  000988  6F82               	movwf	___awmod@divisor& (0+255),b
  6543  00098A  EC7B  F01D         	call	___awmod	;wreg free
  6544  00098E  C080  F092         	movff	?___awmod,?_printf+4
  6545  000992  C081  F093         	movff	?___awmod+1,?_printf+5
  6546  000996  ECB8  F008         	call	_printf	;wreg free
  6547                           
  6548                           ;UI.c: 83: machine_state = UI_state;
  6549  00099A  0E00               	movlw	0
  6550  00099C  0100               	movlb	0	; () banked
  6551  00099E  6FFC               	movwf	_machine_state& (0+255),b
  6552  0009A0                     l180:
  6553  0009A0  A281               	btfss	3969,1,c	;volatile
  6554  0009A2  D7FE               	goto	l180
  6555                           
  6556                           ;UI.c: 86: }
  6557                           ;UI.c: 87: if(cur_state==12){
  6558  0009A4  0E0C               	movlw	12
  6559  0009A6  0100               	movlb	0	; () banked
  6560  0009A8  19E2               	xorwf	_cur_state& (0+255),w,b
  6561  0009AA  0100               	movlb	0	; () banked
  6562  0009AC  11E3               	iorwf	(_cur_state+1)& (0+255),w,b
  6563  0009AE  A4D8               	btfss	status,2,c
  6564  0009B0  D003               	goto	l7626
  6565                           
  6566                           ; BSR set to: 0
  6567                           ;UI.c: 88: change_state_to_menu_12();
  6568  0009B2  EC2C  F022         	call	_change_state_to_menu_12	;wreg free
  6569                           
  6570                           ;UI.c: 89: }
  6571  0009B6  D3D5               	goto	l7948
  6572  0009B8                     l7626:
  6573                           
  6574                           ;UI.c: 90: else{
  6575                           ;UI.c: 91: change_state_to_menu_22();
  6576  0009B8  EC10  F022         	call	_change_state_to_menu_22	;wreg free
  6577                           
  6578                           ;UI.c: 92: }
  6579                           ;UI.c: 93: }
  6580  0009BC  D3D2               	goto	l7948
  6581  0009BE                     l7628:
  6582                           
  6583                           ;UI.c: 94: else if(cur_state == 0){
  6584  0009BE  0100               	movlb	0	; () banked
  6585  0009C0  51E2               	movf	_cur_state& (0+255),w,b
  6586  0009C2  0100               	movlb	0	; () banked
  6587  0009C4  11E3               	iorwf	(_cur_state+1)& (0+255),w,b
  6588  0009C6  A4D8               	btfss	status,2,c
  6589  0009C8  D3CC               	goto	l7948
  6590                           
  6591                           ; BSR set to: 0
  6592                           ;UI.c: 95: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
  6593  0009CA  0E00               	movlw	0
  6594  0009CC  0100               	movlb	0	; () banked
  6595  0009CE  6FC8               	movwf	UI@i& (0+255),b
  6596  0009D0                     l7632:
  6597                           
  6598                           ; BSR set to: 0
  6599  0009D0  0E63               	movlw	99
  6600  0009D2  0100               	movlb	0	; () banked
  6601  0009D4  65C8               	cpfsgt	UI@i& (0+255),b
  6602  0009D6  D001               	goto	l7636
  6603  0009D8  D00C               	goto	l7640
  6604  0009DA                     l7636:
  6605                           
  6606                           ; BSR set to: 0
  6607  0009DA  0E68               	movlw	104
  6608  0009DC  0100               	movlb	0	; () banked
  6609  0009DE  6FC4               	movwf	??_UI& (0+255),b
  6610  0009E0  0EE4               	movlw	228
  6611  0009E2                     u7567:
  6612  0009E2  2EE8               	decfsz	wreg,f,c
  6613  0009E4  D7FE               	bra	u7567
  6614  0009E6  2FC4               	decfsz	??_UI& (0+255),f,b
  6615  0009E8  D7FC               	bra	u7567
  6616  0009EA  F000               	nop	
  6617  0009EC  0100               	movlb	0	; () banked
  6618  0009EE  2BC8               	incf	UI@i& (0+255),f,b
  6619  0009F0  D7EF               	goto	l7632
  6620  0009F2                     l7640:
  6621                           
  6622                           ; BSR set to: 0
  6623                           ;UI.c: 96: if(cur_state == 0){
  6624  0009F2  0100               	movlb	0	; () banked
  6625  0009F4  51E2               	movf	_cur_state& (0+255),w,b
  6626  0009F6  0100               	movlb	0	; () banked
  6627  0009F8  11E3               	iorwf	(_cur_state+1)& (0+255),w,b
  6628  0009FA  A4D8               	btfss	status,2,c
  6629  0009FC  D3B2               	goto	l7948
  6630                           
  6631                           ; BSR set to: 0
  6632                           ;UI.c: 97: printRTC();
  6633  0009FE  ECCC  F00F         	call	_printRTC	;wreg free
  6634                           
  6635                           ;UI.c: 98: }
  6636                           ;UI.c: 99: }
  6637                           ;UI.c: 100: while(logstate){
  6638  000A02  D3AF               	goto	l7948
  6639  000A04                     l7644:
  6640                           
  6641                           ;UI.c: 102: if(!log_completion){
  6642  000A04  0100               	movlb	0	; () banked
  6643  000A06  51E8               	movf	_log_completion& (0+255),w,b
  6644  000A08  0100               	movlb	0	; () banked
  6645  000A0A  11E9               	iorwf	(_log_completion+1)& (0+255),w,b
  6646  000A0C  A4D8               	btfss	status,2,c
  6647  000A0E  D041               	goto	l7674
  6648                           
  6649                           ; BSR set to: 0
  6650                           ;UI.c: 103: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  6651  000A10  0E01               	movlw	1
  6652  000A12  ECDC  F024         	call	_lcdInst
  6653  000A16  0E68               	movlw	104
  6654  000A18  0100               	movlb	0	; () banked
  6655  000A1A  6FC4               	movwf	??_UI& (0+255),b
  6656  000A1C  0EE4               	movlw	228
  6657  000A1E                     u7577:
  6658  000A1E  2EE8               	decfsz	wreg,f,c
  6659  000A20  D7FE               	bra	u7577
  6660  000A22  2FC4               	decfsz	??_UI& (0+255),f,b
  6661  000A24  D7FC               	bra	u7577
  6662  000A26  F000               	nop	
  6663                           
  6664                           ;UI.c: 104: lcdInst(0b10000000);;
  6665  000A28  0E80               	movlw	128
  6666  000A2A  ECDC  F024         	call	_lcdInst
  6667                           
  6668                           ;UI.c: 105: printf("-- LOG %2d HERE--", log);
  6669  000A2E  0E91               	movlw	low STR_3
  6670  000A30  0100               	movlb	0	; () banked
  6671  000A32  6F8E               	movwf	printf@f& (0+255),b
  6672  000A34  0EFB               	movlw	high STR_3
  6673  000A36  0100               	movlb	0	; () banked
  6674  000A38  6F8F               	movwf	(printf@f+1)& (0+255),b
  6675  000A3A  C0E6  F090         	movff	_log,?_printf+2
  6676  000A3E  C0E7  F091         	movff	_log+1,?_printf+3
  6677  000A42  ECB8  F008         	call	_printf	;wreg free
  6678                           
  6679                           ;UI.c: 106: lcdInst(0b11000000);;
  6680  000A46  0EC0               	movlw	192
  6681  000A48  ECDC  F024         	call	_lcdInst
  6682                           
  6683                           ;UI.c: 107: printf("DIDN'T COMPLETE");
  6684  000A4C  0E4A               	movlw	low STR_4
  6685  000A4E  0100               	movlb	0	; () banked
  6686  000A50  6F8E               	movwf	printf@f& (0+255),b
  6687  000A52  0EFE               	movlw	high STR_4
  6688  000A54  0100               	movlb	0	; () banked
  6689  000A56  6F8F               	movwf	(printf@f+1)& (0+255),b
  6690  000A58  ECB8  F008         	call	_printf	;wreg free
  6691  000A5C                     l7658:
  6692  000A5C  0E00               	movlw	0
  6693  000A5E  0100               	movlb	0	; () banked
  6694  000A60  6FC9               	movwf	UI@i_409& (0+255),b
  6695  000A62                     l7660:
  6696                           
  6697                           ; BSR set to: 0
  6698  000A62  0E63               	movlw	99
  6699  000A64  0100               	movlb	0	; () banked
  6700  000A66  65C9               	cpfsgt	UI@i_409& (0+255),b
  6701  000A68  D001               	goto	l7664
  6702  000A6A  D00C               	goto	l7668
  6703  000A6C                     l7664:
  6704                           
  6705                           ; BSR set to: 0
  6706  000A6C  0E68               	movlw	104
  6707  000A6E  0100               	movlb	0	; () banked
  6708  000A70  6FC4               	movwf	??_UI& (0+255),b
  6709  000A72  0EE4               	movlw	228
  6710  000A74                     u7587:
  6711  000A74  2EE8               	decfsz	wreg,f,c
  6712  000A76  D7FE               	bra	u7587
  6713  000A78  2FC4               	decfsz	??_UI& (0+255),f,b
  6714  000A7A  D7FC               	bra	u7587
  6715  000A7C  F000               	nop	
  6716  000A7E  0100               	movlb	0	; () banked
  6717  000A80  2BC9               	incf	UI@i_409& (0+255),f,b
  6718  000A82  D7EF               	goto	l7660
  6719  000A84                     l7668:
  6720                           
  6721                           ; BSR set to: 0
  6722  000A84  0100               	movlb	0	; () banked
  6723  000A86  51F6               	movf	_logstate& (0+255),w,b
  6724  000A88  0100               	movlb	0	; () banked
  6725  000A8A  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  6726  000A8C  B4D8               	btfsc	status,2,c
  6727  000A8E  0012               	return	
  6728  000A90  D7E5               	goto	l7658
  6729  000A92                     l7674:
  6730                           
  6731                           ; BSR set to: 0
  6732                           ;UI.c: 111: else{
  6733                           ;UI.c: 112: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  6734  000A92  0E01               	movlw	1
  6735  000A94  ECDC  F024         	call	_lcdInst
  6736  000A98  0E68               	movlw	104
  6737  000A9A  0100               	movlb	0	; () banked
  6738  000A9C  6FC4               	movwf	??_UI& (0+255),b
  6739  000A9E  0EE4               	movlw	228
  6740  000AA0                     u7597:
  6741  000AA0  2EE8               	decfsz	wreg,f,c
  6742  000AA2  D7FE               	bra	u7597
  6743  000AA4  2FC4               	decfsz	??_UI& (0+255),f,b
  6744  000AA6  D7FC               	bra	u7597
  6745  000AA8  F000               	nop	
  6746                           
  6747                           ;UI.c: 113: lcdInst(0b10000000);;
  6748  000AAA  0E80               	movlw	128
  6749  000AAC  ECDC  F024         	call	_lcdInst
  6750                           
  6751                           ;UI.c: 114: printf("-- LOG %2d HERE--", log);
  6752  000AB0  0E91               	movlw	low STR_3
  6753  000AB2  0100               	movlb	0	; () banked
  6754  000AB4  6F8E               	movwf	printf@f& (0+255),b
  6755  000AB6  0EFB               	movlw	high STR_3
  6756  000AB8  0100               	movlb	0	; () banked
  6757  000ABA  6F8F               	movwf	(printf@f+1)& (0+255),b
  6758  000ABC  C0E6  F090         	movff	_log,?_printf+2
  6759  000AC0  C0E7  F091         	movff	_log+1,?_printf+3
  6760  000AC4  ECB8  F008         	call	_printf	;wreg free
  6761                           
  6762                           ;UI.c: 115: lcdInst(0b11000000);;
  6763  000AC8  0EC0               	movlw	192
  6764  000ACA  ECDC  F024         	call	_lcdInst
  6765                           
  6766                           ;UI.c: 116: printf("PAUSE < | BACK >");
  6767  000ACE  0EE6               	movlw	low STR_6
  6768  000AD0  0100               	movlb	0	; () banked
  6769  000AD2  6F8E               	movwf	printf@f& (0+255),b
  6770  000AD4  0EFD               	movlw	high STR_6
  6771  000AD6  0100               	movlb	0	; () banked
  6772  000AD8  6F8F               	movwf	(printf@f+1)& (0+255),b
  6773  000ADA  ECB8  F008         	call	_printf	;wreg free
  6774                           
  6775                           ;UI.c: 118: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  6776  000ADE  0E00               	movlw	0
  6777  000AE0  0100               	movlb	0	; () banked
  6778  000AE2  6FCA               	movwf	UI@i_412& (0+255),b
  6779  000AE4                     l7688:
  6780                           
  6781                           ; BSR set to: 0
  6782  000AE4  0E63               	movlw	99
  6783  000AE6  0100               	movlb	0	; () banked
  6784  000AE8  65CA               	cpfsgt	UI@i_412& (0+255),b
  6785  000AEA  D001               	goto	l7692
  6786  000AEC  D00C               	goto	l7696
  6787  000AEE                     l7692:
  6788                           
  6789                           ; BSR set to: 0
  6790  000AEE  0E68               	movlw	104
  6791  000AF0  0100               	movlb	0	; () banked
  6792  000AF2  6FC4               	movwf	??_UI& (0+255),b
  6793  000AF4  0EE4               	movlw	228
  6794  000AF6                     u7607:
  6795  000AF6  2EE8               	decfsz	wreg,f,c
  6796  000AF8  D7FE               	bra	u7607
  6797  000AFA  2FC4               	decfsz	??_UI& (0+255),f,b
  6798  000AFC  D7FC               	bra	u7607
  6799  000AFE  F000               	nop	
  6800  000B00  0100               	movlb	0	; () banked
  6801  000B02  2BCA               	incf	UI@i_412& (0+255),f,b
  6802  000B04  D7EF               	goto	l7688
  6803  000B06                     l7696:
  6804                           
  6805                           ; BSR set to: 0
  6806  000B06  0100               	movlb	0	; () banked
  6807  000B08  51F6               	movf	_logstate& (0+255),w,b
  6808  000B0A  0100               	movlb	0	; () banked
  6809  000B0C  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  6810  000B0E  B4D8               	btfsc	status,2,c
  6811  000B10  0012               	return	
  6812                           
  6813                           ; BSR set to: 0
  6814                           ;UI.c: 119: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  6815                           
  6816                           ; BSR set to: 0
  6817                           
  6818                           ; BSR set to: 0
  6819  000B12  0E00               	movlw	0
  6820  000B14  0100               	movlb	0	; () banked
  6821  000B16  6FCB               	movwf	UI@i_413& (0+255),b
  6822  000B18                     l7702:
  6823                           
  6824                           ; BSR set to: 0
  6825  000B18  0E63               	movlw	99
  6826  000B1A  0100               	movlb	0	; () banked
  6827  000B1C  65CB               	cpfsgt	UI@i_413& (0+255),b
  6828  000B1E  D001               	goto	l7706
  6829  000B20  D00C               	goto	l7710
  6830  000B22                     l7706:
  6831                           
  6832                           ; BSR set to: 0
  6833  000B22  0E68               	movlw	104
  6834  000B24  0100               	movlb	0	; () banked
  6835  000B26  6FC4               	movwf	??_UI& (0+255),b
  6836  000B28  0EE4               	movlw	228
  6837  000B2A                     u7617:
  6838  000B2A  2EE8               	decfsz	wreg,f,c
  6839  000B2C  D7FE               	bra	u7617
  6840  000B2E  2FC4               	decfsz	??_UI& (0+255),f,b
  6841  000B30  D7FC               	bra	u7617
  6842  000B32  F000               	nop	
  6843  000B34  0100               	movlb	0	; () banked
  6844  000B36  2BCB               	incf	UI@i_413& (0+255),f,b
  6845  000B38  D7EF               	goto	l7702
  6846  000B3A                     l7710:
  6847                           
  6848                           ; BSR set to: 0
  6849  000B3A  0100               	movlb	0	; () banked
  6850  000B3C  51F6               	movf	_logstate& (0+255),w,b
  6851  000B3E  0100               	movlb	0	; () banked
  6852  000B40  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  6853  000B42  B4D8               	btfsc	status,2,c
  6854  000B44  0012               	return	
  6855                           
  6856                           ; BSR set to: 0
  6857                           ;UI.c: 121: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  6858                           
  6859                           ; BSR set to: 0
  6860                           
  6861                           ; BSR set to: 0
  6862  000B46  0E01               	movlw	1
  6863  000B48  ECDC  F024         	call	_lcdInst
  6864  000B4C  0E68               	movlw	104
  6865  000B4E  0100               	movlb	0	; () banked
  6866  000B50  6FC4               	movwf	??_UI& (0+255),b
  6867  000B52  0EE4               	movlw	228
  6868  000B54                     u7627:
  6869  000B54  2EE8               	decfsz	wreg,f,c
  6870  000B56  D7FE               	bra	u7627
  6871  000B58  2FC4               	decfsz	??_UI& (0+255),f,b
  6872  000B5A  D7FC               	bra	u7627
  6873  000B5C  F000               	nop	
  6874                           
  6875                           ;UI.c: 122: lcdInst(0b10000000);;
  6876  000B5E  0E80               	movlw	128
  6877  000B60  ECDC  F024         	call	_lcdInst
  6878                           
  6879                           ;UI.c: 123: printf("START:");
  6880  000B64  0EC4               	movlw	low STR_7
  6881  000B66  0100               	movlb	0	; () banked
  6882  000B68  6F8E               	movwf	printf@f& (0+255),b
  6883  000B6A  0EFF               	movlw	high STR_7
  6884  000B6C  0100               	movlb	0	; () banked
  6885  000B6E  6F8F               	movwf	(printf@f+1)& (0+255),b
  6886  000B70  ECB8  F008         	call	_printf	;wreg free
  6887                           
  6888                           ;UI.c: 124: lcdInst(0b11000000);;
  6889  000B74  0EC0               	movlw	192
  6890  000B76  ECDC  F024         	call	_lcdInst
  6891                           
  6892                           ;UI.c: 125: char month[] = "MMM";
  6893  000B7A  C12F  F0D6         	movff	UI@F3225,UI@month
  6894  000B7E  C130  F0D7         	movff	UI@F3225+1,UI@month+1
  6895  000B82  C131  F0D8         	movff	UI@F3225+2,UI@month+2
  6896  000B86  C132  F0D9         	movff	UI@F3225+3,UI@month+3
  6897                           
  6898                           ;UI.c: 126: switch(log_startTime[5]){
  6899  000B8A  D0C3               	goto	l7754
  6900  000B8C                     l7726:
  6901                           
  6902                           ;UI.c: 128: strcpy(month, "JAN");
  6903  000B8C  0ED6               	movlw	low UI@month
  6904  000B8E  0100               	movlb	0	; () banked
  6905  000B90  6F80               	movwf	strcpy@to& (0+255),b
  6906  000B92  0E00               	movlw	high UI@month
  6907  000B94  0100               	movlb	0	; () banked
  6908  000B96  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6909  000B98  0EDB               	movlw	low STR_8
  6910  000B9A  0100               	movlb	0	; () banked
  6911  000B9C  6F82               	movwf	strcpy@from& (0+255),b
  6912  000B9E  0EFF               	movlw	high STR_8
  6913  000BA0  0100               	movlb	0	; () banked
  6914  000BA2  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6915  000BA4  EC48  F022         	call	_strcpy	;wreg free
  6916                           
  6917                           ;UI.c: 129: break;
  6918  000BA8  D0E6               	goto	l7756
  6919  000BAA                     l7728:
  6920                           
  6921                           ;UI.c: 131: strcpy(month, "FEB");
  6922  000BAA  0ED6               	movlw	low UI@month
  6923  000BAC  0100               	movlb	0	; () banked
  6924  000BAE  6F80               	movwf	strcpy@to& (0+255),b
  6925  000BB0  0E00               	movlw	high UI@month
  6926  000BB2  0100               	movlb	0	; () banked
  6927  000BB4  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6928  000BB6  0ECB               	movlw	low STR_9
  6929  000BB8  0100               	movlb	0	; () banked
  6930  000BBA  6F82               	movwf	strcpy@from& (0+255),b
  6931  000BBC  0EFF               	movlw	high STR_9
  6932  000BBE  0100               	movlb	0	; () banked
  6933  000BC0  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6934  000BC2  EC48  F022         	call	_strcpy	;wreg free
  6935                           
  6936                           ;UI.c: 132: break;
  6937  000BC6  D0D7               	goto	l7756
  6938  000BC8                     l7730:
  6939                           
  6940                           ;UI.c: 134: strcpy(month, "MAR");
  6941  000BC8  0ED6               	movlw	low UI@month
  6942  000BCA  0100               	movlb	0	; () banked
  6943  000BCC  6F80               	movwf	strcpy@to& (0+255),b
  6944  000BCE  0E00               	movlw	high UI@month
  6945  000BD0  0100               	movlb	0	; () banked
  6946  000BD2  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6947  000BD4  0EE7               	movlw	low STR_10
  6948  000BD6  0100               	movlb	0	; () banked
  6949  000BD8  6F82               	movwf	strcpy@from& (0+255),b
  6950  000BDA  0EFF               	movlw	high STR_10
  6951  000BDC  0100               	movlb	0	; () banked
  6952  000BDE  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6953  000BE0  EC48  F022         	call	_strcpy	;wreg free
  6954                           
  6955                           ;UI.c: 135: break;
  6956  000BE4  D0C8               	goto	l7756
  6957  000BE6                     l7732:
  6958                           
  6959                           ;UI.c: 137: strcpy(month, "APR");
  6960  000BE6  0ED6               	movlw	low UI@month
  6961  000BE8  0100               	movlb	0	; () banked
  6962  000BEA  6F80               	movwf	strcpy@to& (0+255),b
  6963  000BEC  0E00               	movlw	high UI@month
  6964  000BEE  0100               	movlb	0	; () banked
  6965  000BF0  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6966  000BF2  0EEB               	movlw	low STR_11
  6967  000BF4  0100               	movlb	0	; () banked
  6968  000BF6  6F82               	movwf	strcpy@from& (0+255),b
  6969  000BF8  0EFF               	movlw	high STR_11
  6970  000BFA  0100               	movlb	0	; () banked
  6971  000BFC  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6972  000BFE  EC48  F022         	call	_strcpy	;wreg free
  6973                           
  6974                           ;UI.c: 138: break;
  6975  000C02  D0B9               	goto	l7756
  6976  000C04                     l7734:
  6977                           
  6978                           ;UI.c: 140: strcpy(month, "MAY");
  6979  000C04  0ED6               	movlw	low UI@month
  6980  000C06  0100               	movlb	0	; () banked
  6981  000C08  6F80               	movwf	strcpy@to& (0+255),b
  6982  000C0A  0E00               	movlw	high UI@month
  6983  000C0C  0100               	movlb	0	; () banked
  6984  000C0E  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6985  000C10  0EFB               	movlw	low STR_12
  6986  000C12  0100               	movlb	0	; () banked
  6987  000C14  6F82               	movwf	strcpy@from& (0+255),b
  6988  000C16  0EFF               	movlw	high STR_12
  6989  000C18  0100               	movlb	0	; () banked
  6990  000C1A  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6991  000C1C  EC48  F022         	call	_strcpy	;wreg free
  6992                           
  6993                           ;UI.c: 141: break;
  6994  000C20  D0AA               	goto	l7756
  6995  000C22                     l7736:
  6996                           
  6997                           ;UI.c: 143: strcpy(month, "JUN");
  6998  000C22  0ED6               	movlw	low UI@month
  6999  000C24  0100               	movlb	0	; () banked
  7000  000C26  6F80               	movwf	strcpy@to& (0+255),b
  7001  000C28  0E00               	movlw	high UI@month
  7002  000C2A  0100               	movlb	0	; () banked
  7003  000C2C  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7004  000C2E  0EDF               	movlw	low STR_13
  7005  000C30  0100               	movlb	0	; () banked
  7006  000C32  6F82               	movwf	strcpy@from& (0+255),b
  7007  000C34  0EFF               	movlw	high STR_13
  7008  000C36  0100               	movlb	0	; () banked
  7009  000C38  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7010  000C3A  EC48  F022         	call	_strcpy	;wreg free
  7011                           
  7012                           ;UI.c: 144: break;
  7013  000C3E  D09B               	goto	l7756
  7014  000C40                     l7738:
  7015                           
  7016                           ;UI.c: 146: strcpy(month, "JUL");
  7017  000C40  0ED6               	movlw	low UI@month
  7018  000C42  0100               	movlb	0	; () banked
  7019  000C44  6F80               	movwf	strcpy@to& (0+255),b
  7020  000C46  0E00               	movlw	high UI@month
  7021  000C48  0100               	movlb	0	; () banked
  7022  000C4A  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7023  000C4C  0ED7               	movlw	low STR_14
  7024  000C4E  0100               	movlb	0	; () banked
  7025  000C50  6F82               	movwf	strcpy@from& (0+255),b
  7026  000C52  0EFF               	movlw	high STR_14
  7027  000C54  0100               	movlb	0	; () banked
  7028  000C56  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7029  000C58  EC48  F022         	call	_strcpy	;wreg free
  7030                           
  7031                           ;UI.c: 147: break;
  7032  000C5C  D08C               	goto	l7756
  7033  000C5E                     l7740:
  7034                           
  7035                           ;UI.c: 149: strcpy(month, "AUG");
  7036  000C5E  0ED6               	movlw	low UI@month
  7037  000C60  0100               	movlb	0	; () banked
  7038  000C62  6F80               	movwf	strcpy@to& (0+255),b
  7039  000C64  0E00               	movlw	high UI@month
  7040  000C66  0100               	movlb	0	; () banked
  7041  000C68  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7042  000C6A  0ED3               	movlw	low STR_15
  7043  000C6C  0100               	movlb	0	; () banked
  7044  000C6E  6F82               	movwf	strcpy@from& (0+255),b
  7045  000C70  0EFF               	movlw	high STR_15
  7046  000C72  0100               	movlb	0	; () banked
  7047  000C74  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7048  000C76  EC48  F022         	call	_strcpy	;wreg free
  7049                           
  7050                           ;UI.c: 150: break;
  7051  000C7A  D07D               	goto	l7756
  7052  000C7C                     l7742:
  7053                           
  7054                           ;UI.c: 152: strcpy(month, "SEP");
  7055  000C7C  0ED6               	movlw	low UI@month
  7056  000C7E  0100               	movlb	0	; () banked
  7057  000C80  6F80               	movwf	strcpy@to& (0+255),b
  7058  000C82  0E00               	movlw	high UI@month
  7059  000C84  0100               	movlb	0	; () banked
  7060  000C86  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7061  000C88  0EE3               	movlw	low STR_16
  7062  000C8A  0100               	movlb	0	; () banked
  7063  000C8C  6F82               	movwf	strcpy@from& (0+255),b
  7064  000C8E  0EFF               	movlw	high STR_16
  7065  000C90  0100               	movlb	0	; () banked
  7066  000C92  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7067  000C94  EC48  F022         	call	_strcpy	;wreg free
  7068                           
  7069                           ;UI.c: 153: break;
  7070  000C98  D06E               	goto	l7756
  7071  000C9A                     l7744:
  7072                           
  7073                           ;UI.c: 155: strcpy(month, "OCT");
  7074  000C9A  0ED6               	movlw	low UI@month
  7075  000C9C  0100               	movlb	0	; () banked
  7076  000C9E  6F80               	movwf	strcpy@to& (0+255),b
  7077  000CA0  0E00               	movlw	high UI@month
  7078  000CA2  0100               	movlb	0	; () banked
  7079  000CA4  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7080  000CA6  0EF3               	movlw	low STR_17
  7081  000CA8  0100               	movlb	0	; () banked
  7082  000CAA  6F82               	movwf	strcpy@from& (0+255),b
  7083  000CAC  0EFF               	movlw	high STR_17
  7084  000CAE  0100               	movlb	0	; () banked
  7085  000CB0  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7086  000CB2  EC48  F022         	call	_strcpy	;wreg free
  7087                           
  7088                           ;UI.c: 156: break;
  7089  000CB6  D05F               	goto	l7756
  7090  000CB8                     l7746:
  7091                           
  7092                           ;UI.c: 158: strcpy(month, "NOV");
  7093  000CB8  0ED6               	movlw	low UI@month
  7094  000CBA  0100               	movlb	0	; () banked
  7095  000CBC  6F80               	movwf	strcpy@to& (0+255),b
  7096  000CBE  0E00               	movlw	high UI@month
  7097  000CC0  0100               	movlb	0	; () banked
  7098  000CC2  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7099  000CC4  0EF7               	movlw	low STR_18
  7100  000CC6  0100               	movlb	0	; () banked
  7101  000CC8  6F82               	movwf	strcpy@from& (0+255),b
  7102  000CCA  0EFF               	movlw	high STR_18
  7103  000CCC  0100               	movlb	0	; () banked
  7104  000CCE  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7105  000CD0  EC48  F022         	call	_strcpy	;wreg free
  7106                           
  7107                           ;UI.c: 159: break;
  7108  000CD4  D050               	goto	l7756
  7109  000CD6                     l7748:
  7110                           
  7111                           ;UI.c: 161: strcpy(month, "DEC");
  7112  000CD6  0ED6               	movlw	low UI@month
  7113  000CD8  0100               	movlb	0	; () banked
  7114  000CDA  6F80               	movwf	strcpy@to& (0+255),b
  7115  000CDC  0E00               	movlw	high UI@month
  7116  000CDE  0100               	movlb	0	; () banked
  7117  000CE0  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7118  000CE2  0ECF               	movlw	low STR_19
  7119  000CE4  0100               	movlb	0	; () banked
  7120  000CE6  6F82               	movwf	strcpy@from& (0+255),b
  7121  000CE8  0EFF               	movlw	high STR_19
  7122  000CEA  0100               	movlb	0	; () banked
  7123  000CEC  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7124  000CEE  EC48  F022         	call	_strcpy	;wreg free
  7125                           
  7126                           ;UI.c: 162: break;
  7127  000CF2  D041               	goto	l7756
  7128  000CF4                     l7750:
  7129                           
  7130                           ;UI.c: 164: strcpy(month, "ERR");
  7131  000CF4  0ED6               	movlw	low UI@month
  7132  000CF6  0100               	movlb	0	; () banked
  7133  000CF8  6F80               	movwf	strcpy@to& (0+255),b
  7134  000CFA  0E00               	movlw	high UI@month
  7135  000CFC  0100               	movlb	0	; () banked
  7136  000CFE  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7137  000D00  0EEF               	movlw	low STR_20
  7138  000D02  0100               	movlb	0	; () banked
  7139  000D04  6F82               	movwf	strcpy@from& (0+255),b
  7140  000D06  0EFF               	movlw	high STR_20
  7141  000D08  0100               	movlb	0	; () banked
  7142  000D0A  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7143  000D0C  EC48  F022         	call	_strcpy	;wreg free
  7144                           
  7145                           ;UI.c: 166: }
  7146                           
  7147                           ;UI.c: 165: break;
  7148  000D10  D032               	goto	l7756
  7149  000D12                     l7754:
  7150  000D12  EE21  F00A         	lfsr	2,_log_startTime+10
  7151  000D16  CFDE F0C4          	movff	postinc2,??_UI
  7152  000D1A  CFDD F0C5          	movff	postdec2,??_UI+1
  7153                           
  7154                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7155                           ; Switch size 1, requested type "space"
  7156                           ; Number of cases is 1, Range of values is 0 to 0
  7157                           ; switch strategies available:
  7158                           ; Name         Instructions Cycles
  7159                           ; simple_byte            4     3 (average)
  7160                           ;	Chosen strategy is simple_byte
  7161  000D1E  0100               	movlb	0	; () banked
  7162  000D20  51C5               	movf	(??_UI+1)& (0+255),w,b
  7163  000D22  0A00               	xorlw	0	; case 0
  7164  000D24  A4D8               	btfss	status,2,c
  7165  000D26  D7E6               	goto	l7750
  7166                           
  7167                           ; BSR set to: 0
  7168                           ; Switch size 1, requested type "space"
  7169                           ; Number of cases is 12, Range of values is 1 to 12
  7170                           ; switch strategies available:
  7171                           ; Name         Instructions Cycles
  7172                           ; simple_byte           37    19 (average)
  7173                           ;	Chosen strategy is simple_byte
  7174  000D28  0100               	movlb	0	; () banked
  7175  000D2A  51C4               	movf	??_UI& (0+255),w,b
  7176  000D2C  0A01               	xorlw	1	; case 1
  7177  000D2E  B4D8               	btfsc	status,2,c
  7178  000D30  D72D               	goto	l7726
  7179  000D32  0A03               	xorlw	3	; case 2
  7180  000D34  B4D8               	btfsc	status,2,c
  7181  000D36  D739               	goto	l7728
  7182  000D38  0A01               	xorlw	1	; case 3
  7183  000D3A  B4D8               	btfsc	status,2,c
  7184  000D3C  D745               	goto	l7730
  7185  000D3E  0A07               	xorlw	7	; case 4
  7186  000D40  B4D8               	btfsc	status,2,c
  7187  000D42  D751               	goto	l7732
  7188  000D44  0A01               	xorlw	1	; case 5
  7189  000D46  B4D8               	btfsc	status,2,c
  7190  000D48  D75D               	goto	l7734
  7191  000D4A  0A03               	xorlw	3	; case 6
  7192  000D4C  B4D8               	btfsc	status,2,c
  7193  000D4E  D769               	goto	l7736
  7194  000D50  0A01               	xorlw	1	; case 7
  7195  000D52  B4D8               	btfsc	status,2,c
  7196  000D54  D775               	goto	l7738
  7197  000D56  0A0F               	xorlw	15	; case 8
  7198  000D58  B4D8               	btfsc	status,2,c
  7199  000D5A  D781               	goto	l7740
  7200  000D5C  0A01               	xorlw	1	; case 9
  7201  000D5E  B4D8               	btfsc	status,2,c
  7202  000D60  D78D               	goto	l7742
  7203  000D62  0A03               	xorlw	3	; case 10
  7204  000D64  B4D8               	btfsc	status,2,c
  7205  000D66  D799               	goto	l7744
  7206  000D68  0A01               	xorlw	1	; case 11
  7207  000D6A  B4D8               	btfsc	status,2,c
  7208  000D6C  D7A5               	goto	l7746
  7209  000D6E  0A07               	xorlw	7	; case 12
  7210  000D70  B4D8               	btfsc	status,2,c
  7211  000D72  D7B1               	goto	l7748
  7212  000D74  D7BF               	goto	l7750
  7213  000D76                     l7756:
  7214                           
  7215                           ;UI.c: 167: printf("%02d%s | %02d:%02d:%02d", log_startTime[4],month,log_startTime[2],lo
      +                          g_startTime[1],log_startTime[0]);
  7216  000D76  0E1C               	movlw	low STR_21
  7217  000D78  0100               	movlb	0	; () banked
  7218  000D7A  6F8E               	movwf	printf@f& (0+255),b
  7219  000D7C  0EFB               	movlw	high STR_21
  7220  000D7E  0100               	movlb	0	; () banked
  7221  000D80  6F8F               	movwf	(printf@f+1)& (0+255),b
  7222  000D82  C108  F090         	movff	_log_startTime+8,?_printf+2
  7223  000D86  C109  F091         	movff	_log_startTime+9,?_printf+3
  7224  000D8A  0ED6               	movlw	low UI@month
  7225  000D8C  0100               	movlb	0	; () banked
  7226  000D8E  6F92               	movwf	(?_printf+4)& (0+255),b
  7227  000D90  0E00               	movlw	high UI@month
  7228  000D92  0100               	movlb	0	; () banked
  7229  000D94  6F93               	movwf	(?_printf+5)& (0+255),b
  7230  000D96  C104  F094         	movff	_log_startTime+4,?_printf+6
  7231  000D9A  C105  F095         	movff	_log_startTime+5,?_printf+7
  7232  000D9E  C102  F096         	movff	_log_startTime+2,?_printf+8
  7233  000DA2  C103  F097         	movff	_log_startTime+3,?_printf+9
  7234  000DA6  C100  F098         	movff	_log_startTime,?_printf+10
  7235  000DAA  C101  F099         	movff	_log_startTime+1,?_printf+11
  7236  000DAE  ECB8  F008         	call	_printf	;wreg free
  7237                           
  7238                           ;UI.c: 169: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7239  000DB2  0E00               	movlw	0
  7240  000DB4  0100               	movlb	0	; () banked
  7241  000DB6  6FCC               	movwf	UI@i_431& (0+255),b
  7242  000DB8                     l7760:
  7243                           
  7244                           ; BSR set to: 0
  7245  000DB8  0E63               	movlw	99
  7246  000DBA  0100               	movlb	0	; () banked
  7247  000DBC  65CC               	cpfsgt	UI@i_431& (0+255),b
  7248  000DBE  D001               	goto	l7764
  7249  000DC0  D00C               	goto	l7768
  7250  000DC2                     l7764:
  7251                           
  7252                           ; BSR set to: 0
  7253  000DC2  0E68               	movlw	104
  7254  000DC4  0100               	movlb	0	; () banked
  7255  000DC6  6FC4               	movwf	??_UI& (0+255),b
  7256  000DC8  0EE4               	movlw	228
  7257  000DCA                     u7637:
  7258  000DCA  2EE8               	decfsz	wreg,f,c
  7259  000DCC  D7FE               	bra	u7637
  7260  000DCE  2FC4               	decfsz	??_UI& (0+255),f,b
  7261  000DD0  D7FC               	bra	u7637
  7262  000DD2  F000               	nop	
  7263  000DD4  0100               	movlb	0	; () banked
  7264  000DD6  2BCC               	incf	UI@i_431& (0+255),f,b
  7265  000DD8  D7EF               	goto	l7760
  7266  000DDA                     l7768:
  7267                           
  7268                           ; BSR set to: 0
  7269  000DDA  0100               	movlb	0	; () banked
  7270  000DDC  51F6               	movf	_logstate& (0+255),w,b
  7271  000DDE  0100               	movlb	0	; () banked
  7272  000DE0  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7273  000DE2  B4D8               	btfsc	status,2,c
  7274  000DE4  0012               	return	
  7275                           
  7276                           ; BSR set to: 0
  7277                           ;UI.c: 170: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7278                           
  7279                           ; BSR set to: 0
  7280                           
  7281                           ; BSR set to: 0
  7282  000DE6  0E00               	movlw	0
  7283  000DE8  0100               	movlb	0	; () banked
  7284  000DEA  6FCD               	movwf	UI@i_432& (0+255),b
  7285  000DEC                     l7774:
  7286                           
  7287                           ; BSR set to: 0
  7288  000DEC  0E63               	movlw	99
  7289  000DEE  0100               	movlb	0	; () banked
  7290  000DF0  65CD               	cpfsgt	UI@i_432& (0+255),b
  7291  000DF2  D001               	goto	l7778
  7292  000DF4  D00C               	goto	l7782
  7293  000DF6                     l7778:
  7294                           
  7295                           ; BSR set to: 0
  7296  000DF6  0E68               	movlw	104
  7297  000DF8  0100               	movlb	0	; () banked
  7298  000DFA  6FC4               	movwf	??_UI& (0+255),b
  7299  000DFC  0EE4               	movlw	228
  7300  000DFE                     u7647:
  7301  000DFE  2EE8               	decfsz	wreg,f,c
  7302  000E00  D7FE               	bra	u7647
  7303  000E02  2FC4               	decfsz	??_UI& (0+255),f,b
  7304  000E04  D7FC               	bra	u7647
  7305  000E06  F000               	nop	
  7306  000E08  0100               	movlb	0	; () banked
  7307  000E0A  2BCD               	incf	UI@i_432& (0+255),f,b
  7308  000E0C  D7EF               	goto	l7774
  7309  000E0E                     l7782:
  7310                           
  7311                           ; BSR set to: 0
  7312  000E0E  0100               	movlb	0	; () banked
  7313  000E10  51F6               	movf	_logstate& (0+255),w,b
  7314  000E12  0100               	movlb	0	; () banked
  7315  000E14  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7316  000E16  B4D8               	btfsc	status,2,c
  7317  000E18  0012               	return	
  7318                           
  7319                           ; BSR set to: 0
  7320                           ;UI.c: 172: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7321                           
  7322                           ; BSR set to: 0
  7323                           
  7324                           ; BSR set to: 0
  7325  000E1A  0E01               	movlw	1
  7326  000E1C  ECDC  F024         	call	_lcdInst
  7327  000E20  0E68               	movlw	104
  7328  000E22  0100               	movlb	0	; () banked
  7329  000E24  6FC4               	movwf	??_UI& (0+255),b
  7330  000E26  0EE4               	movlw	228
  7331  000E28                     u7657:
  7332  000E28  2EE8               	decfsz	wreg,f,c
  7333  000E2A  D7FE               	bra	u7657
  7334  000E2C  2FC4               	decfsz	??_UI& (0+255),f,b
  7335  000E2E  D7FC               	bra	u7657
  7336  000E30  F000               	nop	
  7337                           
  7338                           ;UI.c: 173: lcdInst(0b10000000);;
  7339  000E32  0E80               	movlw	128
  7340  000E34  ECDC  F024         	call	_lcdInst
  7341                           
  7342                           ;UI.c: 174: printf("DURATION:");
  7343  000E38  0E9B               	movlw	low STR_22
  7344  000E3A  0100               	movlb	0	; () banked
  7345  000E3C  6F8E               	movwf	printf@f& (0+255),b
  7346  000E3E  0EFF               	movlw	high STR_22
  7347  000E40  0100               	movlb	0	; () banked
  7348  000E42  6F8F               	movwf	(printf@f+1)& (0+255),b
  7349  000E44  ECB8  F008         	call	_printf	;wreg free
  7350                           
  7351                           ;UI.c: 175: lcdInst(0b11000000);;
  7352  000E48  0EC0               	movlw	192
  7353  000E4A  ECDC  F024         	call	_lcdInst
  7354                           
  7355                           ;UI.c: 176: printf("%d MIN %d SEC", (log_total_time % 3600) / 60, (log_total_time % 3600
      +                          ) % 60);
  7356  000E4E  0E0E               	movlw	14
  7357  000E50  0100               	movlb	0	; () banked
  7358  000E52  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7359  000E54  0E10               	movlw	16
  7360  000E56  6F82               	movwf	___awmod@divisor& (0+255),b
  7361  000E58  C0F4  F080         	movff	_log_total_time,___awmod@dividend
  7362  000E5C  C0F5  F081         	movff	_log_total_time+1,___awmod@dividend+1
  7363  000E60  EC7B  F01D         	call	___awmod	;wreg free
  7364  000E64  C080  F0C6         	movff	?___awmod,_UI$2314
  7365  000E68  C081  F0C7         	movff	?___awmod+1,_UI$2314+1
  7366                           
  7367                           ;UI.c: 176: printf("%d MIN %d SEC", (log_total_time % 3600) / 60, (log_total_time % 3600
      +                          ) % 60);
  7368  000E6C  0E19               	movlw	low STR_23
  7369  000E6E  0100               	movlb	0	; () banked
  7370  000E70  6F8E               	movwf	printf@f& (0+255),b
  7371  000E72  0EFF               	movlw	high STR_23
  7372  000E74  0100               	movlb	0	; () banked
  7373  000E76  6F8F               	movwf	(printf@f+1)& (0+255),b
  7374  000E78  0E0E               	movlw	14
  7375  000E7A  0100               	movlb	0	; () banked
  7376  000E7C  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7377  000E7E  0E10               	movlw	16
  7378  000E80  6F82               	movwf	___awmod@divisor& (0+255),b
  7379  000E82  C0F4  F080         	movff	_log_total_time,___awmod@dividend
  7380  000E86  C0F5  F081         	movff	_log_total_time+1,___awmod@dividend+1
  7381  000E8A  EC7B  F01D         	call	___awmod	;wreg free
  7382  000E8E  C080  F086         	movff	?___awmod,___awdiv@dividend
  7383  000E92  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  7384  000E96  0E00               	movlw	0
  7385  000E98  0100               	movlb	0	; () banked
  7386  000E9A  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  7387  000E9C  0E3C               	movlw	60
  7388  000E9E  6F88               	movwf	___awdiv@divisor& (0+255),b
  7389  000EA0  EC69  F01C         	call	___awdiv	;wreg free
  7390  000EA4  C086  F090         	movff	?___awdiv,?_printf+2
  7391  000EA8  C087  F091         	movff	?___awdiv+1,?_printf+3
  7392  000EAC  C0C6  F080         	movff	_UI$2314,___awmod@dividend
  7393  000EB0  C0C7  F081         	movff	_UI$2314+1,___awmod@dividend+1
  7394  000EB4  0E00               	movlw	0
  7395  000EB6  0100               	movlb	0	; () banked
  7396  000EB8  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7397  000EBA  0E3C               	movlw	60
  7398  000EBC  6F82               	movwf	___awmod@divisor& (0+255),b
  7399  000EBE  EC7B  F01D         	call	___awmod	;wreg free
  7400  000EC2  C080  F092         	movff	?___awmod,?_printf+4
  7401  000EC6  C081  F093         	movff	?___awmod+1,?_printf+5
  7402  000ECA  ECB8  F008         	call	_printf	;wreg free
  7403                           
  7404                           ;UI.c: 178: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7405  000ECE  0E00               	movlw	0
  7406  000ED0  0100               	movlb	0	; () banked
  7407  000ED2  6FCE               	movwf	UI@i_435& (0+255),b
  7408  000ED4                     l7802:
  7409                           
  7410                           ; BSR set to: 0
  7411  000ED4  0E63               	movlw	99
  7412  000ED6  0100               	movlb	0	; () banked
  7413  000ED8  65CE               	cpfsgt	UI@i_435& (0+255),b
  7414  000EDA  D001               	goto	l7806
  7415  000EDC  D00C               	goto	l7810
  7416  000EDE                     l7806:
  7417                           
  7418                           ; BSR set to: 0
  7419  000EDE  0E68               	movlw	104
  7420  000EE0  0100               	movlb	0	; () banked
  7421  000EE2  6FC4               	movwf	??_UI& (0+255),b
  7422  000EE4  0EE4               	movlw	228
  7423  000EE6                     u7667:
  7424  000EE6  2EE8               	decfsz	wreg,f,c
  7425  000EE8  D7FE               	bra	u7667
  7426  000EEA  2FC4               	decfsz	??_UI& (0+255),f,b
  7427  000EEC  D7FC               	bra	u7667
  7428  000EEE  F000               	nop	
  7429  000EF0  0100               	movlb	0	; () banked
  7430  000EF2  2BCE               	incf	UI@i_435& (0+255),f,b
  7431  000EF4  D7EF               	goto	l7802
  7432  000EF6                     l7810:
  7433                           
  7434                           ; BSR set to: 0
  7435  000EF6  0100               	movlb	0	; () banked
  7436  000EF8  51F6               	movf	_logstate& (0+255),w,b
  7437  000EFA  0100               	movlb	0	; () banked
  7438  000EFC  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7439  000EFE  B4D8               	btfsc	status,2,c
  7440  000F00  0012               	return	
  7441                           
  7442                           ; BSR set to: 0
  7443                           ;UI.c: 179: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7444                           
  7445                           ; BSR set to: 0
  7446                           
  7447                           ; BSR set to: 0
  7448  000F02  0E00               	movlw	0
  7449  000F04  0100               	movlb	0	; () banked
  7450  000F06  6FCF               	movwf	UI@i_436& (0+255),b
  7451  000F08                     l7816:
  7452                           
  7453                           ; BSR set to: 0
  7454  000F08  0E63               	movlw	99
  7455  000F0A  0100               	movlb	0	; () banked
  7456  000F0C  65CF               	cpfsgt	UI@i_436& (0+255),b
  7457  000F0E  D001               	goto	l7820
  7458  000F10  D00C               	goto	l7824
  7459  000F12                     l7820:
  7460                           
  7461                           ; BSR set to: 0
  7462  000F12  0E68               	movlw	104
  7463  000F14  0100               	movlb	0	; () banked
  7464  000F16  6FC4               	movwf	??_UI& (0+255),b
  7465  000F18  0EE4               	movlw	228
  7466  000F1A                     u7677:
  7467  000F1A  2EE8               	decfsz	wreg,f,c
  7468  000F1C  D7FE               	bra	u7677
  7469  000F1E  2FC4               	decfsz	??_UI& (0+255),f,b
  7470  000F20  D7FC               	bra	u7677
  7471  000F22  F000               	nop	
  7472  000F24  0100               	movlb	0	; () banked
  7473  000F26  2BCF               	incf	UI@i_436& (0+255),f,b
  7474  000F28  D7EF               	goto	l7816
  7475  000F2A                     l7824:
  7476                           
  7477                           ; BSR set to: 0
  7478  000F2A  0100               	movlb	0	; () banked
  7479  000F2C  51F6               	movf	_logstate& (0+255),w,b
  7480  000F2E  0100               	movlb	0	; () banked
  7481  000F30  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7482  000F32  B4D8               	btfsc	status,2,c
  7483  000F34  0012               	return	
  7484                           
  7485                           ; BSR set to: 0
  7486                           ;UI.c: 181: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7487                           
  7488                           ; BSR set to: 0
  7489                           
  7490                           ; BSR set to: 0
  7491  000F36  0E01               	movlw	1
  7492  000F38  ECDC  F024         	call	_lcdInst
  7493  000F3C  0E68               	movlw	104
  7494  000F3E  0100               	movlb	0	; () banked
  7495  000F40  6FC4               	movwf	??_UI& (0+255),b
  7496  000F42  0EE4               	movlw	228
  7497  000F44                     u7687:
  7498  000F44  2EE8               	decfsz	wreg,f,c
  7499  000F46  D7FE               	bra	u7687
  7500  000F48  2FC4               	decfsz	??_UI& (0+255),f,b
  7501  000F4A  D7FC               	bra	u7687
  7502  000F4C  F000               	nop	
  7503                           
  7504                           ;UI.c: 182: lcdInst(0b10000000);;
  7505  000F4E  0E80               	movlw	128
  7506  000F50  ECDC  F024         	call	_lcdInst
  7507                           
  7508                           ;UI.c: 183: printf(" -- POP  CAN -- ");
  7509  000F54  0E3C               	movlw	low STR_24
  7510  000F56  0100               	movlb	0	; () banked
  7511  000F58  6F8E               	movwf	printf@f& (0+255),b
  7512  000F5A  0EFD               	movlw	high STR_24
  7513  000F5C  0100               	movlb	0	; () banked
  7514  000F5E  6F8F               	movwf	(printf@f+1)& (0+255),b
  7515  000F60  ECB8  F008         	call	_printf	;wreg free
  7516                           
  7517                           ;UI.c: 184: lcdInst(0b11000000);;
  7518  000F64  0EC0               	movlw	192
  7519  000F66  ECDC  F024         	call	_lcdInst
  7520                           
  7521                           ;UI.c: 185: printf("NTAB: %d|TAB: %d", log_count_pop_no_tab, log_count_pop_w_tab);
  7522  000F6A  0E19               	movlw	low STR_25
  7523  000F6C  0100               	movlb	0	; () banked
  7524  000F6E  6F8E               	movwf	printf@f& (0+255),b
  7525  000F70  0EFE               	movlw	high STR_25
  7526  000F72  0100               	movlb	0	; () banked
  7527  000F74  6F8F               	movwf	(printf@f+1)& (0+255),b
  7528  000F76  C0EE  F090         	movff	_log_count_pop_no_tab,?_printf+2
  7529  000F7A  C0EF  F091         	movff	_log_count_pop_no_tab+1,?_printf+3
  7530  000F7E  C0F0  F092         	movff	_log_count_pop_w_tab,?_printf+4
  7531  000F82  C0F1  F093         	movff	_log_count_pop_w_tab+1,?_printf+5
  7532  000F86  ECB8  F008         	call	_printf	;wreg free
  7533                           
  7534                           ;UI.c: 187: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7535  000F8A  0E00               	movlw	0
  7536  000F8C  0100               	movlb	0	; () banked
  7537  000F8E  6FD0               	movwf	UI@i_439& (0+255),b
  7538  000F90                     l7842:
  7539                           
  7540                           ; BSR set to: 0
  7541  000F90  0E63               	movlw	99
  7542  000F92  0100               	movlb	0	; () banked
  7543  000F94  65D0               	cpfsgt	UI@i_439& (0+255),b
  7544  000F96  D001               	goto	l7846
  7545  000F98  D00C               	goto	l7850
  7546  000F9A                     l7846:
  7547                           
  7548                           ; BSR set to: 0
  7549  000F9A  0E68               	movlw	104
  7550  000F9C  0100               	movlb	0	; () banked
  7551  000F9E  6FC4               	movwf	??_UI& (0+255),b
  7552  000FA0  0EE4               	movlw	228
  7553  000FA2                     u7697:
  7554  000FA2  2EE8               	decfsz	wreg,f,c
  7555  000FA4  D7FE               	bra	u7697
  7556  000FA6  2FC4               	decfsz	??_UI& (0+255),f,b
  7557  000FA8  D7FC               	bra	u7697
  7558  000FAA  F000               	nop	
  7559  000FAC  0100               	movlb	0	; () banked
  7560  000FAE  2BD0               	incf	UI@i_439& (0+255),f,b
  7561  000FB0  D7EF               	goto	l7842
  7562  000FB2                     l7850:
  7563                           
  7564                           ; BSR set to: 0
  7565  000FB2  0100               	movlb	0	; () banked
  7566  000FB4  51F6               	movf	_logstate& (0+255),w,b
  7567  000FB6  0100               	movlb	0	; () banked
  7568  000FB8  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7569  000FBA  B4D8               	btfsc	status,2,c
  7570  000FBC  0012               	return	
  7571                           
  7572                           ; BSR set to: 0
  7573                           ;UI.c: 188: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7574                           
  7575                           ; BSR set to: 0
  7576                           
  7577                           ; BSR set to: 0
  7578  000FBE  0E00               	movlw	0
  7579  000FC0  0100               	movlb	0	; () banked
  7580  000FC2  6FD1               	movwf	UI@i_440& (0+255),b
  7581  000FC4                     l7856:
  7582                           
  7583                           ; BSR set to: 0
  7584  000FC4  0E63               	movlw	99
  7585  000FC6  0100               	movlb	0	; () banked
  7586  000FC8  65D1               	cpfsgt	UI@i_440& (0+255),b
  7587  000FCA  D001               	goto	l7860
  7588  000FCC  D00C               	goto	l7864
  7589  000FCE                     l7860:
  7590                           
  7591                           ; BSR set to: 0
  7592  000FCE  0E68               	movlw	104
  7593  000FD0  0100               	movlb	0	; () banked
  7594  000FD2  6FC4               	movwf	??_UI& (0+255),b
  7595  000FD4  0EE4               	movlw	228
  7596  000FD6                     u7707:
  7597  000FD6  2EE8               	decfsz	wreg,f,c
  7598  000FD8  D7FE               	bra	u7707
  7599  000FDA  2FC4               	decfsz	??_UI& (0+255),f,b
  7600  000FDC  D7FC               	bra	u7707
  7601  000FDE  F000               	nop	
  7602  000FE0  0100               	movlb	0	; () banked
  7603  000FE2  2BD1               	incf	UI@i_440& (0+255),f,b
  7604  000FE4  D7EF               	goto	l7856
  7605  000FE6                     l7864:
  7606                           
  7607                           ; BSR set to: 0
  7608  000FE6  0100               	movlb	0	; () banked
  7609  000FE8  51F6               	movf	_logstate& (0+255),w,b
  7610  000FEA  0100               	movlb	0	; () banked
  7611  000FEC  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7612  000FEE  B4D8               	btfsc	status,2,c
  7613  000FF0  0012               	return	
  7614                           
  7615                           ; BSR set to: 0
  7616                           ;UI.c: 190: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7617                           
  7618                           ; BSR set to: 0
  7619                           
  7620                           ; BSR set to: 0
  7621  000FF2  0E01               	movlw	1
  7622  000FF4  ECDC  F024         	call	_lcdInst
  7623  000FF8  0E68               	movlw	104
  7624  000FFA  0100               	movlb	0	; () banked
  7625  000FFC  6FC4               	movwf	??_UI& (0+255),b
  7626  000FFE  0EE4               	movlw	228
  7627  001000                     u7717:
  7628  001000  2EE8               	decfsz	wreg,f,c
  7629  001002  D7FE               	bra	u7717
  7630  001004  2FC4               	decfsz	??_UI& (0+255),f,b
  7631  001006  D7FC               	bra	u7717
  7632  001008  F000               	nop	
  7633                           
  7634                           ;UI.c: 191: lcdInst(0b10000000);;
  7635  00100A  0E80               	movlw	128
  7636  00100C  ECDC  F024         	call	_lcdInst
  7637                           
  7638                           ;UI.c: 192: printf(" -- SOUP CAN -- ");
  7639  001010  0E4D               	movlw	low STR_26
  7640  001012  0100               	movlb	0	; () banked
  7641  001014  6F8E               	movwf	printf@f& (0+255),b
  7642  001016  0EFD               	movlw	high STR_26
  7643  001018  0100               	movlb	0	; () banked
  7644  00101A  6F8F               	movwf	(printf@f+1)& (0+255),b
  7645  00101C  ECB8  F008         	call	_printf	;wreg free
  7646                           
  7647                           ;UI.c: 193: lcdInst(0b11000000);;
  7648  001020  0EC0               	movlw	192
  7649  001022  ECDC  F024         	call	_lcdInst
  7650                           
  7651                           ;UI.c: 194: printf("NLAB: %d|LAB: %d", log_count_can_no_lab, log_count_can_w_lab);
  7652  001026  0E08               	movlw	low STR_27
  7653  001028  0100               	movlb	0	; () banked
  7654  00102A  6F8E               	movwf	printf@f& (0+255),b
  7655  00102C  0EFE               	movlw	high STR_27
  7656  00102E  0100               	movlb	0	; () banked
  7657  001030  6F8F               	movwf	(printf@f+1)& (0+255),b
  7658  001032  C0EA  F090         	movff	_log_count_can_no_lab,?_printf+2
  7659  001036  C0EB  F091         	movff	_log_count_can_no_lab+1,?_printf+3
  7660  00103A  C0EC  F092         	movff	_log_count_can_w_lab,?_printf+4
  7661  00103E  C0ED  F093         	movff	_log_count_can_w_lab+1,?_printf+5
  7662  001042  ECB8  F008         	call	_printf	;wreg free
  7663                           
  7664                           ;UI.c: 196: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7665  001046  0E00               	movlw	0
  7666  001048  0100               	movlb	0	; () banked
  7667  00104A  6FD2               	movwf	UI@i_443& (0+255),b
  7668  00104C                     l7882:
  7669                           
  7670                           ; BSR set to: 0
  7671  00104C  0E63               	movlw	99
  7672  00104E  0100               	movlb	0	; () banked
  7673  001050  65D2               	cpfsgt	UI@i_443& (0+255),b
  7674  001052  D001               	goto	l7886
  7675  001054  D00C               	goto	l7890
  7676  001056                     l7886:
  7677                           
  7678                           ; BSR set to: 0
  7679  001056  0E68               	movlw	104
  7680  001058  0100               	movlb	0	; () banked
  7681  00105A  6FC4               	movwf	??_UI& (0+255),b
  7682  00105C  0EE4               	movlw	228
  7683  00105E                     u7727:
  7684  00105E  2EE8               	decfsz	wreg,f,c
  7685  001060  D7FE               	bra	u7727
  7686  001062  2FC4               	decfsz	??_UI& (0+255),f,b
  7687  001064  D7FC               	bra	u7727
  7688  001066  F000               	nop	
  7689  001068  0100               	movlb	0	; () banked
  7690  00106A  2BD2               	incf	UI@i_443& (0+255),f,b
  7691  00106C  D7EF               	goto	l7882
  7692  00106E                     l7890:
  7693                           
  7694                           ; BSR set to: 0
  7695  00106E  0100               	movlb	0	; () banked
  7696  001070  51F6               	movf	_logstate& (0+255),w,b
  7697  001072  0100               	movlb	0	; () banked
  7698  001074  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7699  001076  B4D8               	btfsc	status,2,c
  7700  001078  0012               	return	
  7701                           
  7702                           ; BSR set to: 0
  7703                           ;UI.c: 197: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7704                           
  7705                           ; BSR set to: 0
  7706                           
  7707                           ; BSR set to: 0
  7708  00107A  0E00               	movlw	0
  7709  00107C  0100               	movlb	0	; () banked
  7710  00107E  6FD3               	movwf	UI@i_444& (0+255),b
  7711  001080                     l7896:
  7712                           
  7713                           ; BSR set to: 0
  7714  001080  0E63               	movlw	99
  7715  001082  0100               	movlb	0	; () banked
  7716  001084  65D3               	cpfsgt	UI@i_444& (0+255),b
  7717  001086  D001               	goto	l7900
  7718  001088  D00C               	goto	l7904
  7719  00108A                     l7900:
  7720                           
  7721                           ; BSR set to: 0
  7722  00108A  0E68               	movlw	104
  7723  00108C  0100               	movlb	0	; () banked
  7724  00108E  6FC4               	movwf	??_UI& (0+255),b
  7725  001090  0EE4               	movlw	228
  7726  001092                     u7737:
  7727  001092  2EE8               	decfsz	wreg,f,c
  7728  001094  D7FE               	bra	u7737
  7729  001096  2FC4               	decfsz	??_UI& (0+255),f,b
  7730  001098  D7FC               	bra	u7737
  7731  00109A  F000               	nop	
  7732  00109C  0100               	movlb	0	; () banked
  7733  00109E  2BD3               	incf	UI@i_444& (0+255),f,b
  7734  0010A0  D7EF               	goto	l7896
  7735  0010A2                     l7904:
  7736                           
  7737                           ; BSR set to: 0
  7738  0010A2  0100               	movlb	0	; () banked
  7739  0010A4  51F6               	movf	_logstate& (0+255),w,b
  7740  0010A6  0100               	movlb	0	; () banked
  7741  0010A8  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7742  0010AA  B4D8               	btfsc	status,2,c
  7743  0010AC  0012               	return	
  7744                           
  7745                           ; BSR set to: 0
  7746                           ;UI.c: 199: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7747                           
  7748                           ; BSR set to: 0
  7749                           
  7750                           ; BSR set to: 0
  7751  0010AE  0E01               	movlw	1
  7752  0010B0  ECDC  F024         	call	_lcdInst
  7753  0010B4  0E68               	movlw	104
  7754  0010B6  0100               	movlb	0	; () banked
  7755  0010B8  6FC4               	movwf	??_UI& (0+255),b
  7756  0010BA  0EE4               	movlw	228
  7757  0010BC                     u7747:
  7758  0010BC  2EE8               	decfsz	wreg,f,c
  7759  0010BE  D7FE               	bra	u7747
  7760  0010C0  2FC4               	decfsz	??_UI& (0+255),f,b
  7761  0010C2  D7FC               	bra	u7747
  7762  0010C4  F000               	nop	
  7763                           
  7764                           ;UI.c: 200: lcdInst(0b10000000);;
  7765  0010C6  0E80               	movlw	128
  7766  0010C8  ECDC  F024         	call	_lcdInst
  7767                           
  7768                           ;UI.c: 201: printf("-- TOTAL CANS --");
  7769  0010CC  0E5E               	movlw	low STR_28
  7770  0010CE  0100               	movlb	0	; () banked
  7771  0010D0  6F8E               	movwf	printf@f& (0+255),b
  7772  0010D2  0EFD               	movlw	high STR_28
  7773  0010D4  0100               	movlb	0	; () banked
  7774  0010D6  6F8F               	movwf	(printf@f+1)& (0+255),b
  7775  0010D8  ECB8  F008         	call	_printf	;wreg free
  7776                           
  7777                           ;UI.c: 202: lcdInst(0b11000000);;
  7778  0010DC  0EC0               	movlw	192
  7779  0010DE  ECDC  F024         	call	_lcdInst
  7780                           
  7781                           ;UI.c: 203: printf("%d", log_count_total);
  7782  0010E2  0E16               	movlw	low (STR_27+14)
  7783  0010E4  0100               	movlb	0	; () banked
  7784  0010E6  6F8E               	movwf	printf@f& (0+255),b
  7785  0010E8  0EFE               	movlw	high (STR_27+14)
  7786  0010EA  0100               	movlb	0	; () banked
  7787  0010EC  6F8F               	movwf	(printf@f+1)& (0+255),b
  7788  0010EE  C0F2  F090         	movff	_log_count_total,?_printf+2
  7789  0010F2  C0F3  F091         	movff	_log_count_total+1,?_printf+3
  7790  0010F6  ECB8  F008         	call	_printf	;wreg free
  7791                           
  7792                           ;UI.c: 205: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7793  0010FA  0E00               	movlw	0
  7794  0010FC  0100               	movlb	0	; () banked
  7795  0010FE  6FD4               	movwf	UI@i_447& (0+255),b
  7796  001100                     l7922:
  7797                           
  7798                           ; BSR set to: 0
  7799  001100  0E63               	movlw	99
  7800  001102  0100               	movlb	0	; () banked
  7801  001104  65D4               	cpfsgt	UI@i_447& (0+255),b
  7802  001106  D001               	goto	l7926
  7803  001108  D00C               	goto	l7930
  7804  00110A                     l7926:
  7805                           
  7806                           ; BSR set to: 0
  7807  00110A  0E68               	movlw	104
  7808  00110C  0100               	movlb	0	; () banked
  7809  00110E  6FC4               	movwf	??_UI& (0+255),b
  7810  001110  0EE4               	movlw	228
  7811  001112                     u7757:
  7812  001112  2EE8               	decfsz	wreg,f,c
  7813  001114  D7FE               	bra	u7757
  7814  001116  2FC4               	decfsz	??_UI& (0+255),f,b
  7815  001118  D7FC               	bra	u7757
  7816  00111A  F000               	nop	
  7817  00111C  0100               	movlb	0	; () banked
  7818  00111E  2BD4               	incf	UI@i_447& (0+255),f,b
  7819  001120  D7EF               	goto	l7922
  7820  001122                     l7930:
  7821                           
  7822                           ; BSR set to: 0
  7823  001122  0100               	movlb	0	; () banked
  7824  001124  51F6               	movf	_logstate& (0+255),w,b
  7825  001126  0100               	movlb	0	; () banked
  7826  001128  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7827  00112A  B4D8               	btfsc	status,2,c
  7828  00112C  0012               	return	
  7829                           
  7830                           ; BSR set to: 0
  7831                           ;UI.c: 206: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7832                           
  7833                           ; BSR set to: 0
  7834                           
  7835                           ; BSR set to: 0
  7836  00112E  0E00               	movlw	0
  7837  001130  0100               	movlb	0	; () banked
  7838  001132  6FD5               	movwf	UI@i_448& (0+255),b
  7839  001134                     l7936:
  7840                           
  7841                           ; BSR set to: 0
  7842  001134  0E63               	movlw	99
  7843  001136  0100               	movlb	0	; () banked
  7844  001138  65D5               	cpfsgt	UI@i_448& (0+255),b
  7845  00113A  D001               	goto	l7940
  7846  00113C  D00C               	goto	l7944
  7847  00113E                     l7940:
  7848                           
  7849                           ; BSR set to: 0
  7850  00113E  0E68               	movlw	104
  7851  001140  0100               	movlb	0	; () banked
  7852  001142  6FC4               	movwf	??_UI& (0+255),b
  7853  001144  0EE4               	movlw	228
  7854  001146                     u7767:
  7855  001146  2EE8               	decfsz	wreg,f,c
  7856  001148  D7FE               	bra	u7767
  7857  00114A  2FC4               	decfsz	??_UI& (0+255),f,b
  7858  00114C  D7FC               	bra	u7767
  7859  00114E  F000               	nop	
  7860  001150  0100               	movlb	0	; () banked
  7861  001152  2BD5               	incf	UI@i_448& (0+255),f,b
  7862  001154  D7EF               	goto	l7936
  7863  001156                     l7944:
  7864                           
  7865                           ; BSR set to: 0
  7866  001156  0100               	movlb	0	; () banked
  7867  001158  51F6               	movf	_logstate& (0+255),w,b
  7868  00115A  0100               	movlb	0	; () banked
  7869  00115C  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7870  00115E  B4D8               	btfsc	status,2,c
  7871  001160  0012               	return	
  7872  001162                     l7948:
  7873  001162  0100               	movlb	0	; () banked
  7874  001164  51F6               	movf	_logstate& (0+255),w,b
  7875  001166  0100               	movlb	0	; () banked
  7876  001168  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7877  00116A  B4D8               	btfsc	status,2,c
  7878  00116C  0012               	return	
  7879  00116E  D44A               	goto	l7644
  7880  001170                     __end_of_UI:
  7881                           	opt stack 0
  7882                           tblptru	equ	0xFF8
  7883                           tblptrh	equ	0xFF7
  7884                           tblptrl	equ	0xFF6
  7885                           tablat	equ	0xFF5
  7886                           prodh	equ	0xFF4
  7887                           prodl	equ	0xFF3
  7888                           intcon	equ	0xFF2
  7889                           intcon2	equ	0xFF1
  7890                           intcon3	equ	0xFF0
  7891                           postinc0	equ	0xFEE
  7892                           wreg	equ	0xFE8
  7893                           postdec1	equ	0xFE5
  7894                           fsr1l	equ	0xFE1
  7895                           indf2	equ	0xFDF
  7896                           postinc2	equ	0xFDE
  7897                           postdec2	equ	0xFDD
  7898                           fsr2h	equ	0xFDA
  7899                           fsr2l	equ	0xFD9
  7900                           status	equ	0xFD8
  7901                           
  7902 ;; *************** function _printRTC *****************
  7903 ;; Defined at:
  7904 ;;		line 63 in file "RTC.c"
  7905 ;; Parameters:    Size  Location     Type
  7906 ;;		None
  7907 ;; Auto vars:     Size  Location     Type
  7908 ;;  i               2   66[BANK0 ] int 
  7909 ;;  INT_time       14   46[BANK0 ] int [7]
  7910 ;;  month           4   62[BANK0 ] unsigned char [4]
  7911 ;;  RTC_month       2   60[BANK0 ] int 
  7912 ;; Return value:  Size  Location     Type
  7913 ;;                  1    wreg      void 
  7914 ;; Registers used:
  7915 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7916 ;; Tracked objects:
  7917 ;;		On entry : 0/0
  7918 ;;		On exit  : 0/0
  7919 ;;		Unchanged: 0/0
  7920 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7921 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7922 ;;      Locals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7923 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7924 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7925 ;;Total ram usage:       25 bytes
  7926 ;; Hardware stack levels used:    1
  7927 ;; Hardware stack levels required when called:   10
  7928 ;; This function calls:
  7929 ;;		_getRTC
  7930 ;;		_lcdInst
  7931 ;;		_printf
  7932 ;;		_strcpy
  7933 ;; This function is called by:
  7934 ;;		_UI
  7935 ;;		_change_state_to_menu_start
  7936 ;; This function uses a non-reentrant model
  7937 ;;
  7938                           
  7939                           	psect	text24
  7940  001F98                     __ptext24:
  7941                           	opt stack 0
  7942  001F98                     _printRTC:
  7943                           	opt stack 18
  7944                           
  7945                           ;RTC.c: 64: getRTC();
  7946                           
  7947                           ; BSR set to: 0
  7948                           ;incstack = 0
  7949  001F98  EC12  F01E         	call	_getRTC	;wreg free
  7950                           
  7951                           ;RTC.c: 65: char month[] = "MMM";
  7952  001F9C  C133  F0BE         	movff	printRTC@F3216,printRTC@month
  7953  001FA0  C134  F0BF         	movff	printRTC@F3216+1,printRTC@month+1
  7954  001FA4  C135  F0C0         	movff	printRTC@F3216+2,printRTC@month+2
  7955  001FA8  C136  F0C1         	movff	printRTC@F3216+3,printRTC@month+3
  7956                           
  7957                           ;RTC.c: 66: int INT_time[7];
  7958                           ;RTC.c: 67: for(int i = 0; i < 7; i++){
  7959  001FAC  0E00               	movlw	0
  7960  001FAE  0100               	movlb	0	; () banked
  7961  001FB0  6FC3               	movwf	(printRTC@i+1)& (0+255),b
  7962  001FB2  0E00               	movlw	0
  7963  001FB4  6FC2               	movwf	printRTC@i& (0+255),b
  7964                           
  7965                           ; BSR set to: 0
  7966  001FB6  0100               	movlb	0	; () banked
  7967  001FB8  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
  7968  001FBA  D008               	goto	l5988
  7969  001FBC  0100               	movlb	0	; () banked
  7970  001FBE  51C3               	movf	(printRTC@i+1)& (0+255),w,b
  7971  001FC0  E146               	bnz	l602
  7972  001FC2  0E07               	movlw	7
  7973  001FC4  0100               	movlb	0	; () banked
  7974  001FC6  5DC2               	subwf	printRTC@i& (0+255),w,b
  7975  001FC8  B0D8               	btfsc	status,0,c
  7976  001FCA  D041               	goto	l602
  7977  001FCC                     l5988:
  7978                           
  7979                           ; BSR set to: 0
  7980                           ;RTC.c: 68: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  7981  001FCC  0E24               	movlw	low _time
  7982  001FCE  0100               	movlb	0	; () banked
  7983  001FD0  25C2               	addwf	printRTC@i& (0+255),w,b
  7984  001FD2  6ED9               	movwf	fsr2l,c
  7985  001FD4  0E01               	movlw	high _time
  7986  001FD6  0100               	movlb	0	; () banked
  7987  001FD8  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
  7988  001FDA  6EDA               	movwf	fsr2h,c
  7989  001FDC  50DF               	movf	indf2,w,c
  7990  001FDE  0100               	movlb	0	; () banked
  7991  001FE0  6FAB               	movwf	??_printRTC& (0+255),b
  7992  001FE2  0100               	movlb	0	; () banked
  7993  001FE4  3BAB               	swapf	??_printRTC& (0+255),f,b
  7994  001FE6  0E0F               	movlw	15
  7995  001FE8  17AB               	andwf	??_printRTC& (0+255),f,b
  7996  001FEA  0E0F               	movlw	15
  7997  001FEC  0100               	movlb	0	; () banked
  7998  001FEE  17AB               	andwf	??_printRTC& (0+255),f,b
  7999  001FF0  0100               	movlb	0	; () banked
  8000  001FF2  51AB               	movf	??_printRTC& (0+255),w,b
  8001  001FF4  0D0A               	mullw	10
  8002  001FF6  0E24               	movlw	low _time
  8003  001FF8  0100               	movlb	0	; () banked
  8004  001FFA  25C2               	addwf	printRTC@i& (0+255),w,b
  8005  001FFC  6ED9               	movwf	fsr2l,c
  8006  001FFE  0E01               	movlw	high _time
  8007  002000  0100               	movlb	0	; () banked
  8008  002002  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
  8009  002004  6EDA               	movwf	fsr2h,c
  8010  002006  50DF               	movf	indf2,w,c
  8011  002008  0B0F               	andlw	15
  8012  00200A  0100               	movlb	0	; () banked
  8013  00200C  6FAC               	movwf	(??_printRTC+1)& (0+255),b
  8014  00200E  6BAD               	clrf	(??_printRTC+2)& (0+255),b
  8015  002010  50F3               	movf	prodl,w,c
  8016  002012  0100               	movlb	0	; () banked
  8017  002014  27AC               	addwf	(??_printRTC+1)& (0+255),f,b
  8018  002016  50F4               	movf	prodh,w,c
  8019  002018  0100               	movlb	0	; () banked
  8020  00201A  23AD               	addwfc	(??_printRTC+2)& (0+255),f,b
  8021  00201C  90D8               	bcf	status,0,c
  8022  00201E  0100               	movlb	0	; () banked
  8023  002020  35C2               	rlcf	printRTC@i& (0+255),w,b
  8024  002022  6ED9               	movwf	fsr2l,c
  8025  002024  0100               	movlb	0	; () banked
  8026  002026  35C3               	rlcf	(printRTC@i+1)& (0+255),w,b
  8027  002028  6EDA               	movwf	fsr2h,c
  8028  00202A  0EAE               	movlw	low printRTC@INT_time
  8029  00202C  26D9               	addwf	fsr2l,f,c
  8030  00202E  0E00               	movlw	high printRTC@INT_time
  8031  002030  22DA               	addwfc	fsr2h,f,c
  8032  002032  C0AC  FFDE         	movff	??_printRTC+1,postinc2
  8033  002036  C0AD  FFDD         	movff	??_printRTC+2,postdec2
  8034                           
  8035                           ; BSR set to: 0
  8036  00203A  0100               	movlb	0	; () banked
  8037  00203C  4BC2               	infsnz	printRTC@i& (0+255),f,b
  8038  00203E  2BC3               	incf	(printRTC@i+1)& (0+255),f,b
  8039                           
  8040                           ; BSR set to: 0
  8041  002040  0100               	movlb	0	; () banked
  8042  002042  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
  8043  002044  D7C3               	goto	l5988
  8044  002046  0100               	movlb	0	; () banked
  8045  002048  51C3               	movf	(printRTC@i+1)& (0+255),w,b
  8046  00204A  E101               	bnz	u4640
  8047  00204C  D7BA               	goto	L5
  8048  00204E                     u4640:
  8049  00204E                     l602:
  8050                           
  8051                           ; BSR set to: 0
  8052                           ;RTC.c: 69: }
  8053                           ;RTC.c: 70: int RTC_month = INT_time[5];
  8054  00204E  C0B8  F0BC         	movff	printRTC@INT_time+10,printRTC@RTC_month
  8055  002052  C0B9  F0BD         	movff	printRTC@INT_time+11,printRTC@RTC_month+1
  8056                           
  8057                           ;RTC.c: 71: switch(RTC_month){
  8058  002056  D0B4               	goto	l6020
  8059  002058                     l5994:
  8060                           
  8061                           ; BSR set to: 0
  8062                           ;RTC.c: 73: strcpy(month, "JAN");
  8063  002058  0EBE               	movlw	low printRTC@month
  8064  00205A  0100               	movlb	0	; () banked
  8065  00205C  6F80               	movwf	strcpy@to& (0+255),b
  8066  00205E  0E00               	movlw	high printRTC@month
  8067  002060  0100               	movlb	0	; () banked
  8068  002062  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8069  002064  0EDB               	movlw	low STR_8
  8070  002066  0100               	movlb	0	; () banked
  8071  002068  6F82               	movwf	strcpy@from& (0+255),b
  8072  00206A  0EFF               	movlw	high STR_8
  8073  00206C  0100               	movlb	0	; () banked
  8074  00206E  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8075  002070  EC48  F022         	call	_strcpy	;wreg free
  8076                           
  8077                           ;RTC.c: 74: break;
  8078  002074  D0D4               	goto	l6022
  8079  002076                     l5996:
  8080                           
  8081                           ;RTC.c: 76: strcpy(month, "FEB");
  8082  002076  0EBE               	movlw	low printRTC@month
  8083  002078  0100               	movlb	0	; () banked
  8084  00207A  6F80               	movwf	strcpy@to& (0+255),b
  8085  00207C  0E00               	movlw	high printRTC@month
  8086  00207E  0100               	movlb	0	; () banked
  8087  002080  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8088  002082  0ECB               	movlw	low STR_9
  8089  002084  0100               	movlb	0	; () banked
  8090  002086  6F82               	movwf	strcpy@from& (0+255),b
  8091  002088  0EFF               	movlw	high STR_9
  8092  00208A  0100               	movlb	0	; () banked
  8093  00208C  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8094  00208E  EC48  F022         	call	_strcpy	;wreg free
  8095                           
  8096                           ;RTC.c: 77: break;
  8097  002092  D0C5               	goto	l6022
  8098  002094                     l5998:
  8099                           
  8100                           ;RTC.c: 79: strcpy(month, "MAR");
  8101  002094  0EBE               	movlw	low printRTC@month
  8102  002096  0100               	movlb	0	; () banked
  8103  002098  6F80               	movwf	strcpy@to& (0+255),b
  8104  00209A  0E00               	movlw	high printRTC@month
  8105  00209C  0100               	movlb	0	; () banked
  8106  00209E  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8107  0020A0  0EE7               	movlw	low STR_10
  8108  0020A2  0100               	movlb	0	; () banked
  8109  0020A4  6F82               	movwf	strcpy@from& (0+255),b
  8110  0020A6  0EFF               	movlw	high STR_10
  8111  0020A8  0100               	movlb	0	; () banked
  8112  0020AA  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8113  0020AC  EC48  F022         	call	_strcpy	;wreg free
  8114                           
  8115                           ;RTC.c: 80: break;
  8116  0020B0  D0B6               	goto	l6022
  8117  0020B2                     l6000:
  8118                           
  8119                           ;RTC.c: 82: strcpy(month, "APR");
  8120  0020B2  0EBE               	movlw	low printRTC@month
  8121  0020B4  0100               	movlb	0	; () banked
  8122  0020B6  6F80               	movwf	strcpy@to& (0+255),b
  8123  0020B8  0E00               	movlw	high printRTC@month
  8124  0020BA  0100               	movlb	0	; () banked
  8125  0020BC  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8126  0020BE  0EEB               	movlw	low STR_11
  8127  0020C0  0100               	movlb	0	; () banked
  8128  0020C2  6F82               	movwf	strcpy@from& (0+255),b
  8129  0020C4  0EFF               	movlw	high STR_11
  8130  0020C6  0100               	movlb	0	; () banked
  8131  0020C8  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8132  0020CA  EC48  F022         	call	_strcpy	;wreg free
  8133                           
  8134                           ;RTC.c: 83: break;
  8135  0020CE  D0A7               	goto	l6022
  8136  0020D0                     l6002:
  8137                           
  8138                           ;RTC.c: 85: strcpy(month, "MAY");
  8139  0020D0  0EBE               	movlw	low printRTC@month
  8140  0020D2  0100               	movlb	0	; () banked
  8141  0020D4  6F80               	movwf	strcpy@to& (0+255),b
  8142  0020D6  0E00               	movlw	high printRTC@month
  8143  0020D8  0100               	movlb	0	; () banked
  8144  0020DA  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8145  0020DC  0EFB               	movlw	low STR_12
  8146  0020DE  0100               	movlb	0	; () banked
  8147  0020E0  6F82               	movwf	strcpy@from& (0+255),b
  8148  0020E2  0EFF               	movlw	high STR_12
  8149  0020E4  0100               	movlb	0	; () banked
  8150  0020E6  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8151  0020E8  EC48  F022         	call	_strcpy	;wreg free
  8152                           
  8153                           ;RTC.c: 86: break;
  8154  0020EC  D098               	goto	l6022
  8155  0020EE                     l6004:
  8156                           
  8157                           ;RTC.c: 88: strcpy(month, "JUN");
  8158  0020EE  0EBE               	movlw	low printRTC@month
  8159  0020F0  0100               	movlb	0	; () banked
  8160  0020F2  6F80               	movwf	strcpy@to& (0+255),b
  8161  0020F4  0E00               	movlw	high printRTC@month
  8162  0020F6  0100               	movlb	0	; () banked
  8163  0020F8  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8164  0020FA  0EDF               	movlw	low STR_13
  8165  0020FC  0100               	movlb	0	; () banked
  8166  0020FE  6F82               	movwf	strcpy@from& (0+255),b
  8167  002100  0EFF               	movlw	high STR_13
  8168  002102  0100               	movlb	0	; () banked
  8169  002104  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8170  002106  EC48  F022         	call	_strcpy	;wreg free
  8171                           
  8172                           ;RTC.c: 89: break;
  8173  00210A  D089               	goto	l6022
  8174  00210C                     l6006:
  8175                           
  8176                           ;RTC.c: 91: strcpy(month, "JUL");
  8177  00210C  0EBE               	movlw	low printRTC@month
  8178  00210E  0100               	movlb	0	; () banked
  8179  002110  6F80               	movwf	strcpy@to& (0+255),b
  8180  002112  0E00               	movlw	high printRTC@month
  8181  002114  0100               	movlb	0	; () banked
  8182  002116  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8183  002118  0ED7               	movlw	low STR_14
  8184  00211A  0100               	movlb	0	; () banked
  8185  00211C  6F82               	movwf	strcpy@from& (0+255),b
  8186  00211E  0EFF               	movlw	high STR_14
  8187  002120  0100               	movlb	0	; () banked
  8188  002122  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8189  002124  EC48  F022         	call	_strcpy	;wreg free
  8190                           
  8191                           ;RTC.c: 92: break;
  8192  002128  D07A               	goto	l6022
  8193  00212A                     l6008:
  8194                           
  8195                           ;RTC.c: 94: strcpy(month, "AUG");
  8196  00212A  0EBE               	movlw	low printRTC@month
  8197  00212C  0100               	movlb	0	; () banked
  8198  00212E  6F80               	movwf	strcpy@to& (0+255),b
  8199  002130  0E00               	movlw	high printRTC@month
  8200  002132  0100               	movlb	0	; () banked
  8201  002134  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8202  002136  0ED3               	movlw	low STR_15
  8203  002138  0100               	movlb	0	; () banked
  8204  00213A  6F82               	movwf	strcpy@from& (0+255),b
  8205  00213C  0EFF               	movlw	high STR_15
  8206  00213E  0100               	movlb	0	; () banked
  8207  002140  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8208  002142  EC48  F022         	call	_strcpy	;wreg free
  8209                           
  8210                           ;RTC.c: 95: break;
  8211  002146  D06B               	goto	l6022
  8212  002148                     l6010:
  8213                           
  8214                           ;RTC.c: 97: strcpy(month, "SEP");
  8215  002148  0EBE               	movlw	low printRTC@month
  8216  00214A  0100               	movlb	0	; () banked
  8217  00214C  6F80               	movwf	strcpy@to& (0+255),b
  8218  00214E  0E00               	movlw	high printRTC@month
  8219  002150  0100               	movlb	0	; () banked
  8220  002152  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8221  002154  0EE3               	movlw	low STR_16
  8222  002156  0100               	movlb	0	; () banked
  8223  002158  6F82               	movwf	strcpy@from& (0+255),b
  8224  00215A  0EFF               	movlw	high STR_16
  8225  00215C  0100               	movlb	0	; () banked
  8226  00215E  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8227  002160  EC48  F022         	call	_strcpy	;wreg free
  8228                           
  8229                           ;RTC.c: 98: break;
  8230  002164  D05C               	goto	l6022
  8231  002166                     l6012:
  8232                           
  8233                           ;RTC.c: 100: strcpy(month, "OCT");
  8234  002166  0EBE               	movlw	low printRTC@month
  8235  002168  0100               	movlb	0	; () banked
  8236  00216A  6F80               	movwf	strcpy@to& (0+255),b
  8237  00216C  0E00               	movlw	high printRTC@month
  8238  00216E  0100               	movlb	0	; () banked
  8239  002170  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8240  002172  0EF3               	movlw	low STR_17
  8241  002174  0100               	movlb	0	; () banked
  8242  002176  6F82               	movwf	strcpy@from& (0+255),b
  8243  002178  0EFF               	movlw	high STR_17
  8244  00217A  0100               	movlb	0	; () banked
  8245  00217C  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8246  00217E  EC48  F022         	call	_strcpy	;wreg free
  8247                           
  8248                           ;RTC.c: 101: break;
  8249  002182  D04D               	goto	l6022
  8250  002184                     l6014:
  8251                           
  8252                           ;RTC.c: 103: strcpy(month, "NOV");
  8253  002184  0EBE               	movlw	low printRTC@month
  8254  002186  0100               	movlb	0	; () banked
  8255  002188  6F80               	movwf	strcpy@to& (0+255),b
  8256  00218A  0E00               	movlw	high printRTC@month
  8257  00218C  0100               	movlb	0	; () banked
  8258  00218E  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8259  002190  0EF7               	movlw	low STR_18
  8260  002192  0100               	movlb	0	; () banked
  8261  002194  6F82               	movwf	strcpy@from& (0+255),b
  8262  002196  0EFF               	movlw	high STR_18
  8263  002198  0100               	movlb	0	; () banked
  8264  00219A  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8265  00219C  EC48  F022         	call	_strcpy	;wreg free
  8266                           
  8267                           ;RTC.c: 104: break;
  8268  0021A0  D03E               	goto	l6022
  8269  0021A2                     l6016:
  8270                           
  8271                           ;RTC.c: 106: strcpy(month, "DEC");
  8272  0021A2  0EBE               	movlw	low printRTC@month
  8273  0021A4  0100               	movlb	0	; () banked
  8274  0021A6  6F80               	movwf	strcpy@to& (0+255),b
  8275  0021A8  0E00               	movlw	high printRTC@month
  8276  0021AA  0100               	movlb	0	; () banked
  8277  0021AC  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8278  0021AE  0ECF               	movlw	low STR_19
  8279  0021B0  0100               	movlb	0	; () banked
  8280  0021B2  6F82               	movwf	strcpy@from& (0+255),b
  8281  0021B4  0EFF               	movlw	high STR_19
  8282  0021B6  0100               	movlb	0	; () banked
  8283  0021B8  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8284  0021BA  EC48  F022         	call	_strcpy	;wreg free
  8285                           
  8286                           ;RTC.c: 108: }
  8287                           
  8288                           ;RTC.c: 107: break;
  8289  0021BE  D02F               	goto	l6022
  8290  0021C0                     l6020:
  8291  0021C0  C0BC  F0AB         	movff	printRTC@RTC_month,??_printRTC
  8292  0021C4  C0BD  F0AC         	movff	printRTC@RTC_month+1,??_printRTC+1
  8293                           
  8294                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8295                           ; Switch size 1, requested type "space"
  8296                           ; Number of cases is 1, Range of values is 0 to 0
  8297                           ; switch strategies available:
  8298                           ; Name         Instructions Cycles
  8299                           ; simple_byte            4     3 (average)
  8300                           ;	Chosen strategy is simple_byte
  8301  0021C8  0100               	movlb	0	; () banked
  8302  0021CA  51AC               	movf	(??_printRTC+1)& (0+255),w,b
  8303  0021CC  0A00               	xorlw	0	; case 0
  8304  0021CE  A4D8               	btfss	status,2,c
  8305  0021D0  D026               	goto	l6022
  8306                           
  8307                           ; BSR set to: 0
  8308                           ; Switch size 1, requested type "space"
  8309                           ; Number of cases is 12, Range of values is 1 to 12
  8310                           ; switch strategies available:
  8311                           ; Name         Instructions Cycles
  8312                           ; simple_byte           37    19 (average)
  8313                           ;	Chosen strategy is simple_byte
  8314  0021D2  0100               	movlb	0	; () banked
  8315  0021D4  51AB               	movf	??_printRTC& (0+255),w,b
  8316  0021D6  0A01               	xorlw	1	; case 1
  8317  0021D8  B4D8               	btfsc	status,2,c
  8318  0021DA  D73E               	goto	l5994
  8319  0021DC  0A03               	xorlw	3	; case 2
  8320  0021DE  B4D8               	btfsc	status,2,c
  8321  0021E0  D74A               	goto	l5996
  8322  0021E2  0A01               	xorlw	1	; case 3
  8323  0021E4  B4D8               	btfsc	status,2,c
  8324  0021E6  D756               	goto	l5998
  8325  0021E8  0A07               	xorlw	7	; case 4
  8326  0021EA  B4D8               	btfsc	status,2,c
  8327  0021EC  D762               	goto	l6000
  8328  0021EE  0A01               	xorlw	1	; case 5
  8329  0021F0  B4D8               	btfsc	status,2,c
  8330  0021F2  D76E               	goto	l6002
  8331  0021F4  0A03               	xorlw	3	; case 6
  8332  0021F6  B4D8               	btfsc	status,2,c
  8333  0021F8  D77A               	goto	l6004
  8334  0021FA  0A01               	xorlw	1	; case 7
  8335  0021FC  B4D8               	btfsc	status,2,c
  8336  0021FE  D786               	goto	l6006
  8337  002200  0A0F               	xorlw	15	; case 8
  8338  002202  B4D8               	btfsc	status,2,c
  8339  002204  D792               	goto	l6008
  8340  002206  0A01               	xorlw	1	; case 9
  8341  002208  B4D8               	btfsc	status,2,c
  8342  00220A  D79E               	goto	l6010
  8343  00220C  0A03               	xorlw	3	; case 10
  8344  00220E  B4D8               	btfsc	status,2,c
  8345  002210  D7AA               	goto	l6012
  8346  002212  0A01               	xorlw	1	; case 11
  8347  002214  B4D8               	btfsc	status,2,c
  8348  002216  D7B6               	goto	l6014
  8349  002218  0A07               	xorlw	7	; case 12
  8350  00221A  B4D8               	btfsc	status,2,c
  8351  00221C  D7C2               	goto	l6016
  8352  00221E                     l6022:
  8353                           
  8354                           ;RTC.c: 109: lcdInst(0b10000000);;
  8355  00221E  0E80               	movlw	128
  8356  002220  ECDC  F024         	call	_lcdInst
  8357                           
  8358                           ;RTC.c: 110: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
  8359  002224  0E1C               	movlw	low STR_21
  8360  002226  0100               	movlb	0	; () banked
  8361  002228  6F8E               	movwf	printf@f& (0+255),b
  8362  00222A  0EFB               	movlw	high STR_21
  8363  00222C  0100               	movlb	0	; () banked
  8364  00222E  6F8F               	movwf	(printf@f+1)& (0+255),b
  8365  002230  C0B6  F090         	movff	printRTC@INT_time+8,?_printf+2
  8366  002234  C0B7  F091         	movff	printRTC@INT_time+9,?_printf+3
  8367  002238  0EBE               	movlw	low printRTC@month
  8368  00223A  0100               	movlb	0	; () banked
  8369  00223C  6F92               	movwf	(?_printf+4)& (0+255),b
  8370  00223E  0E00               	movlw	high printRTC@month
  8371  002240  0100               	movlb	0	; () banked
  8372  002242  6F93               	movwf	(?_printf+5)& (0+255),b
  8373  002244  C0B2  F094         	movff	printRTC@INT_time+4,?_printf+6
  8374  002248  C0B3  F095         	movff	printRTC@INT_time+5,?_printf+7
  8375  00224C  C0B0  F096         	movff	printRTC@INT_time+2,?_printf+8
  8376  002250  C0B1  F097         	movff	printRTC@INT_time+3,?_printf+9
  8377  002254  C0AE  F098         	movff	printRTC@INT_time,?_printf+10
  8378  002258  C0AF  F099         	movff	printRTC@INT_time+1,?_printf+11
  8379  00225C  ECB8  F008         	call	_printf	;wreg free
  8380  002260  0012               	return		;funcret
  8381  002262                     __end_of_printRTC:
  8382                           	opt stack 0
  8383                           tblptru	equ	0xFF8
  8384                           tblptrh	equ	0xFF7
  8385                           tblptrl	equ	0xFF6
  8386                           tablat	equ	0xFF5
  8387                           prodh	equ	0xFF4
  8388                           prodl	equ	0xFF3
  8389                           intcon	equ	0xFF2
  8390                           intcon2	equ	0xFF1
  8391                           intcon3	equ	0xFF0
  8392                           postinc0	equ	0xFEE
  8393                           wreg	equ	0xFE8
  8394                           postdec1	equ	0xFE5
  8395                           fsr1l	equ	0xFE1
  8396                           indf2	equ	0xFDF
  8397                           postinc2	equ	0xFDE
  8398                           postdec2	equ	0xFDD
  8399                           fsr2h	equ	0xFDA
  8400                           fsr2l	equ	0xFD9
  8401                           status	equ	0xFD8
  8402                           
  8403 ;; *************** function _strcpy *****************
  8404 ;; Defined at:
  8405 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
  8406 ;; Parameters:    Size  Location     Type
  8407 ;;  to              2    0[BANK0 ] PTR unsigned char 
  8408 ;;		 -> printRTC@month(4), UI@month(4), 
  8409 ;;  from            2    2[BANK0 ] PTR const unsigned char 
  8410 ;;		 -> STR_62(4), STR_61(4), STR_60(4), STR_59(4), 
  8411 ;;		 -> STR_58(4), STR_57(4), STR_56(4), STR_55(4), 
  8412 ;;		 -> STR_54(4), STR_53(4), STR_52(4), STR_51(4), 
  8413 ;;		 -> STR_20(4), STR_19(4), STR_18(4), STR_17(4), 
  8414 ;;		 -> STR_16(4), STR_15(4), STR_14(4), STR_13(4), 
  8415 ;;		 -> STR_12(4), STR_11(4), STR_10(4), STR_9(4), 
  8416 ;;		 -> STR_8(4), 
  8417 ;; Auto vars:     Size  Location     Type
  8418 ;;  cp              2    4[BANK0 ] PTR unsigned char 
  8419 ;;		 -> printRTC@month(4), UI@month(4), 
  8420 ;; Return value:  Size  Location     Type
  8421 ;;                  2    0[BANK0 ] PTR unsigned char 
  8422 ;; Registers used:
  8423 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  8424 ;; Tracked objects:
  8425 ;;		On entry : 0/0
  8426 ;;		On exit  : 0/0
  8427 ;;		Unchanged: 0/0
  8428 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8429 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8430 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8431 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8432 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8433 ;;Total ram usage:        6 bytes
  8434 ;; Hardware stack levels used:    1
  8435 ;; Hardware stack levels required when called:    7
  8436 ;; This function calls:
  8437 ;;		Nothing
  8438 ;; This function is called by:
  8439 ;;		_UI
  8440 ;;		_printRTC
  8441 ;; This function uses a non-reentrant model
  8442 ;;
  8443                           
  8444                           	psect	text25
  8445  004490                     __ptext25:
  8446                           	opt stack 0
  8447  004490                     _strcpy:
  8448                           	opt stack 20
  8449                           
  8450                           ;incstack = 0
  8451  004490  C080  F084         	movff	strcpy@to,strcpy@cp
  8452  004494  C081  F085         	movff	strcpy@to+1,strcpy@cp+1
  8453  004498  D006               	goto	l5732
  8454  00449A                     l5730:
  8455  00449A  0100               	movlb	0	; () banked
  8456  00449C  4B84               	infsnz	strcpy@cp& (0+255),f,b
  8457  00449E  2B85               	incf	(strcpy@cp+1)& (0+255),f,b
  8458  0044A0  0100               	movlb	0	; () banked
  8459  0044A2  4B82               	infsnz	strcpy@from& (0+255),f,b
  8460  0044A4  2B83               	incf	(strcpy@from+1)& (0+255),f,b
  8461  0044A6                     l5732:
  8462  0044A6  C082  FFF6         	movff	strcpy@from,tblptrl
  8463  0044AA  C083  FFF7         	movff	strcpy@from+1,tblptrh
  8464  0044AE                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  8465  0044AE  6AF8               	clrf	tblptru,c
  8466  0044B0                     	endif
  8467  0044B0                     	if	0	;tblptru may be non-zero
  8468  0044B0                     	endif
  8469  0044B0  C084  FFD9         	movff	strcpy@cp,fsr2l
  8470  0044B4  C085  FFDA         	movff	strcpy@cp+1,fsr2h
  8471  0044B8  0008               	tblrd		*
  8472  0044BA  CFF5 FFDF          	movff	tablat,indf2
  8473  0044BE  50DF               	movf	indf2,w,c
  8474  0044C0  B4D8               	btfsc	status,2,c
  8475  0044C2  0012               	return	
  8476  0044C4  D7EA               	goto	l5730
  8477  0044C6                     __end_of_strcpy:
  8478                           	opt stack 0
  8479                           tblptru	equ	0xFF8
  8480                           tblptrh	equ	0xFF7
  8481                           tblptrl	equ	0xFF6
  8482                           tablat	equ	0xFF5
  8483                           prodh	equ	0xFF4
  8484                           prodl	equ	0xFF3
  8485                           intcon	equ	0xFF2
  8486                           intcon2	equ	0xFF1
  8487                           intcon3	equ	0xFF0
  8488                           postinc0	equ	0xFEE
  8489                           wreg	equ	0xFE8
  8490                           postdec1	equ	0xFE5
  8491                           fsr1l	equ	0xFE1
  8492                           indf2	equ	0xFDF
  8493                           postinc2	equ	0xFDE
  8494                           postdec2	equ	0xFDD
  8495                           fsr2h	equ	0xFDA
  8496                           fsr2l	equ	0xFD9
  8497                           status	equ	0xFD8
  8498                           
  8499 ;; *************** function _getRTC *****************
  8500 ;; Defined at:
  8501 ;;		line 44 in file "RTC.c"
  8502 ;; Parameters:    Size  Location     Type
  8503 ;;		None
  8504 ;; Auto vars:     Size  Location     Type
  8505 ;;  i               2    3[BANK0 ] int 
  8506 ;; Return value:  Size  Location     Type
  8507 ;;                  1    wreg      void 
  8508 ;; Registers used:
  8509 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8510 ;; Tracked objects:
  8511 ;;		On entry : 0/0
  8512 ;;		On exit  : 0/0
  8513 ;;		Unchanged: 0/0
  8514 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8515 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8516 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8517 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8518 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8519 ;;Total ram usage:        2 bytes
  8520 ;; Hardware stack levels used:    1
  8521 ;; Hardware stack levels required when called:    9
  8522 ;; This function calls:
  8523 ;;		_I2C_Master_Read
  8524 ;;		_I2C_Master_Start
  8525 ;;		_I2C_Master_Stop
  8526 ;;		_I2C_Master_Write
  8527 ;; This function is called by:
  8528 ;;		_printRTC
  8529 ;;		_initSortTimer
  8530 ;; This function uses a non-reentrant model
  8531 ;;
  8532                           
  8533                           	psect	text26
  8534  003C24                     __ptext26:
  8535                           	opt stack 0
  8536  003C24                     _getRTC:
  8537                           	opt stack 18
  8538                           
  8539                           ;RTC.c: 48: I2C_Master_Start();
  8540                           
  8541                           ;incstack = 0
  8542  003C24  EC02  F025         	call	_I2C_Master_Start	;wreg free
  8543                           
  8544                           ;RTC.c: 49: I2C_Master_Write(0b11010000);
  8545  003C28  0E00               	movlw	0
  8546  003C2A  0100               	movlb	0	; () banked
  8547  003C2C  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  8548  003C2E  0ED0               	movlw	208
  8549  003C30  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  8550  003C32  ECF0  F024         	call	_I2C_Master_Write	;wreg free
  8551                           
  8552                           ;RTC.c: 50: I2C_Master_Write(0x00);
  8553  003C36  0E00               	movlw	0
  8554  003C38  0100               	movlb	0	; () banked
  8555  003C3A  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  8556  003C3C  0E00               	movlw	0
  8557  003C3E  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  8558  003C40  ECF0  F024         	call	_I2C_Master_Write	;wreg free
  8559                           
  8560                           ;RTC.c: 51: I2C_Master_Stop();
  8561  003C44  ECFE  F024         	call	_I2C_Master_Stop	;wreg free
  8562                           
  8563                           ;RTC.c: 54: I2C_Master_Start();
  8564  003C48  EC02  F025         	call	_I2C_Master_Start	;wreg free
  8565                           
  8566                           ;RTC.c: 55: I2C_Master_Write(0b11010001);
  8567  003C4C  0E00               	movlw	0
  8568  003C4E  0100               	movlb	0	; () banked
  8569  003C50  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  8570  003C52  0ED1               	movlw	209
  8571  003C54  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  8572  003C56  ECF0  F024         	call	_I2C_Master_Write	;wreg free
  8573                           
  8574                           ;RTC.c: 56: for(int i = 0; i < 6; i++){
  8575  003C5A  0E00               	movlw	0
  8576  003C5C  0100               	movlb	0	; () banked
  8577  003C5E  6F84               	movwf	(getRTC@i+1)& (0+255),b
  8578  003C60  0E00               	movlw	0
  8579  003C62  6F83               	movwf	getRTC@i& (0+255),b
  8580  003C64                     l5738:
  8581                           
  8582                           ; BSR set to: 0
  8583  003C64  0100               	movlb	0	; () banked
  8584  003C66  BF84               	btfsc	(getRTC@i+1)& (0+255),7,b
  8585  003C68  D008               	goto	l5742
  8586  003C6A  0100               	movlb	0	; () banked
  8587  003C6C  5184               	movf	(getRTC@i+1)& (0+255),w,b
  8588  003C6E  E115               	bnz	l5748
  8589  003C70  0E06               	movlw	6
  8590  003C72  0100               	movlb	0	; () banked
  8591  003C74  5D83               	subwf	getRTC@i& (0+255),w,b
  8592  003C76  B0D8               	btfsc	status,0,c
  8593  003C78  D010               	goto	l5748
  8594  003C7A                     l5742:
  8595                           
  8596                           ; BSR set to: 0
  8597                           ;RTC.c: 57: time[i] = I2C_Master_Read(1);
  8598  003C7A  0E24               	movlw	low _time
  8599  003C7C  0100               	movlb	0	; () banked
  8600  003C7E  2583               	addwf	getRTC@i& (0+255),w,b
  8601  003C80  6ED9               	movwf	fsr2l,c
  8602  003C82  0E01               	movlw	high _time
  8603  003C84  0100               	movlb	0	; () banked
  8604  003C86  2184               	addwfc	(getRTC@i+1)& (0+255),w,b
  8605  003C88  6EDA               	movwf	fsr2h,c
  8606  003C8A  0E01               	movlw	1
  8607  003C8C  EC9F  F023         	call	_I2C_Master_Read
  8608  003C90  6EDF               	movwf	indf2,c
  8609  003C92  0100               	movlb	0	; () banked
  8610  003C94  4B83               	infsnz	getRTC@i& (0+255),f,b
  8611  003C96  2B84               	incf	(getRTC@i+1)& (0+255),f,b
  8612  003C98  D7E5               	goto	l5738
  8613  003C9A                     l5748:
  8614                           
  8615                           ; BSR set to: 0
  8616                           ;RTC.c: 58: }
  8617                           ;RTC.c: 59: time[6] = I2C_Master_Read(0);
  8618  003C9A  0E00               	movlw	0
  8619  003C9C  EC9F  F023         	call	_I2C_Master_Read
  8620  003CA0  0101               	movlb	1	; () banked
  8621  003CA2  6F2A               	movwf	(_time+6)& (0+255),b
  8622                           
  8623                           ;RTC.c: 60: I2C_Master_Stop();
  8624  003CA4  ECFE  F024         	call	_I2C_Master_Stop	;wreg free
  8625  003CA8  0012               	return		;funcret
  8626  003CAA                     __end_of_getRTC:
  8627                           	opt stack 0
  8628                           tblptru	equ	0xFF8
  8629                           tblptrh	equ	0xFF7
  8630                           tblptrl	equ	0xFF6
  8631                           tablat	equ	0xFF5
  8632                           prodh	equ	0xFF4
  8633                           prodl	equ	0xFF3
  8634                           intcon	equ	0xFF2
  8635                           intcon2	equ	0xFF1
  8636                           intcon3	equ	0xFF0
  8637                           postinc0	equ	0xFEE
  8638                           wreg	equ	0xFE8
  8639                           postdec1	equ	0xFE5
  8640                           fsr1l	equ	0xFE1
  8641                           indf2	equ	0xFDF
  8642                           postinc2	equ	0xFDE
  8643                           postdec2	equ	0xFDD
  8644                           fsr2h	equ	0xFDA
  8645                           fsr2l	equ	0xFD9
  8646                           status	equ	0xFD8
  8647                           
  8648 ;; *************** function _I2C_Master_Write *****************
  8649 ;; Defined at:
  8650 ;;		line 49 in file "I2C.c"
  8651 ;; Parameters:    Size  Location     Type
  8652 ;;  d               2    1[BANK0 ] unsigned int 
  8653 ;; Auto vars:     Size  Location     Type
  8654 ;;		None
  8655 ;; Return value:  Size  Location     Type
  8656 ;;                  1    wreg      void 
  8657 ;; Registers used:
  8658 ;;		wreg, status,2, status,0, cstack
  8659 ;; Tracked objects:
  8660 ;;		On entry : 0/0
  8661 ;;		On exit  : 0/0
  8662 ;;		Unchanged: 0/0
  8663 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8664 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8665 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8666 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8667 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8668 ;;Total ram usage:        2 bytes
  8669 ;; Hardware stack levels used:    1
  8670 ;; Hardware stack levels required when called:    8
  8671 ;; This function calls:
  8672 ;;		_I2C_Master_Wait
  8673 ;; This function is called by:
  8674 ;;		_loadRTC
  8675 ;;		_getRTC
  8676 ;; This function uses a non-reentrant model
  8677 ;;
  8678                           
  8679                           	psect	text27
  8680  0049E0                     __ptext27:
  8681                           	opt stack 0
  8682  0049E0                     _I2C_Master_Write:
  8683                           	opt stack 18
  8684                           
  8685                           ;I2C.c: 51: I2C_Master_Wait();
  8686                           
  8687                           ;incstack = 0
  8688  0049E0  ECC1  F024         	call	_I2C_Master_Wait	;wreg free
  8689                           
  8690                           ;I2C.c: 52: SSPBUF = d;
  8691  0049E4  C081  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  8692  0049E8  0012               	return		;funcret
  8693  0049EA                     __end_of_I2C_Master_Write:
  8694                           	opt stack 0
  8695                           tblptru	equ	0xFF8
  8696                           tblptrh	equ	0xFF7
  8697                           tblptrl	equ	0xFF6
  8698                           tablat	equ	0xFF5
  8699                           prodh	equ	0xFF4
  8700                           prodl	equ	0xFF3
  8701                           intcon	equ	0xFF2
  8702                           intcon2	equ	0xFF1
  8703                           intcon3	equ	0xFF0
  8704                           postinc0	equ	0xFEE
  8705                           wreg	equ	0xFE8
  8706                           postdec1	equ	0xFE5
  8707                           fsr1l	equ	0xFE1
  8708                           indf2	equ	0xFDF
  8709                           postinc2	equ	0xFDE
  8710                           postdec2	equ	0xFDD
  8711                           fsr2h	equ	0xFDA
  8712                           fsr2l	equ	0xFD9
  8713                           status	equ	0xFD8
  8714                           
  8715 ;; *************** function _I2C_Master_Stop *****************
  8716 ;; Defined at:
  8717 ;;		line 43 in file "I2C.c"
  8718 ;; Parameters:    Size  Location     Type
  8719 ;;		None
  8720 ;; Auto vars:     Size  Location     Type
  8721 ;;		None
  8722 ;; Return value:  Size  Location     Type
  8723 ;;                  1    wreg      void 
  8724 ;; Registers used:
  8725 ;;		wreg, status,2, status,0, cstack
  8726 ;; Tracked objects:
  8727 ;;		On entry : 0/0
  8728 ;;		On exit  : 0/0
  8729 ;;		Unchanged: 0/0
  8730 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8731 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8732 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8733 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8734 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8735 ;;Total ram usage:        0 bytes
  8736 ;; Hardware stack levels used:    1
  8737 ;; Hardware stack levels required when called:    8
  8738 ;; This function calls:
  8739 ;;		_I2C_Master_Wait
  8740 ;; This function is called by:
  8741 ;;		_loadRTC
  8742 ;;		_getRTC
  8743 ;; This function uses a non-reentrant model
  8744 ;;
  8745                           
  8746                           	psect	text28
  8747  0049FC                     __ptext28:
  8748                           	opt stack 0
  8749  0049FC                     _I2C_Master_Stop:
  8750                           	opt stack 18
  8751                           
  8752                           ;I2C.c: 45: I2C_Master_Wait();
  8753                           
  8754                           ;incstack = 0
  8755  0049FC  ECC1  F024         	call	_I2C_Master_Wait	;wreg free
  8756                           
  8757                           ;I2C.c: 46: PEN = 1;
  8758  004A00  84C5               	bsf	4037,2,c	;volatile
  8759  004A02  0012               	return		;funcret
  8760  004A04                     __end_of_I2C_Master_Stop:
  8761                           	opt stack 0
  8762                           tblptru	equ	0xFF8
  8763                           tblptrh	equ	0xFF7
  8764                           tblptrl	equ	0xFF6
  8765                           tablat	equ	0xFF5
  8766                           prodh	equ	0xFF4
  8767                           prodl	equ	0xFF3
  8768                           intcon	equ	0xFF2
  8769                           intcon2	equ	0xFF1
  8770                           intcon3	equ	0xFF0
  8771                           postinc0	equ	0xFEE
  8772                           wreg	equ	0xFE8
  8773                           postdec1	equ	0xFE5
  8774                           fsr1l	equ	0xFE1
  8775                           indf2	equ	0xFDF
  8776                           postinc2	equ	0xFDE
  8777                           postdec2	equ	0xFDD
  8778                           fsr2h	equ	0xFDA
  8779                           fsr2l	equ	0xFD9
  8780                           status	equ	0xFD8
  8781                           
  8782 ;; *************** function _I2C_Master_Start *****************
  8783 ;; Defined at:
  8784 ;;		line 31 in file "I2C.c"
  8785 ;; Parameters:    Size  Location     Type
  8786 ;;		None
  8787 ;; Auto vars:     Size  Location     Type
  8788 ;;		None
  8789 ;; Return value:  Size  Location     Type
  8790 ;;                  1    wreg      void 
  8791 ;; Registers used:
  8792 ;;		wreg, status,2, status,0, cstack
  8793 ;; Tracked objects:
  8794 ;;		On entry : 0/0
  8795 ;;		On exit  : 0/0
  8796 ;;		Unchanged: 0/0
  8797 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8798 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8799 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8800 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8801 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8802 ;;Total ram usage:        0 bytes
  8803 ;; Hardware stack levels used:    1
  8804 ;; Hardware stack levels required when called:    8
  8805 ;; This function calls:
  8806 ;;		_I2C_Master_Wait
  8807 ;; This function is called by:
  8808 ;;		_loadRTC
  8809 ;;		_getRTC
  8810 ;; This function uses a non-reentrant model
  8811 ;;
  8812                           
  8813                           	psect	text29
  8814  004A04                     __ptext29:
  8815                           	opt stack 0
  8816  004A04                     _I2C_Master_Start:
  8817                           	opt stack 18
  8818                           
  8819                           ;I2C.c: 33: I2C_Master_Wait();
  8820                           
  8821                           ;incstack = 0
  8822  004A04  ECC1  F024         	call	_I2C_Master_Wait	;wreg free
  8823                           
  8824                           ;I2C.c: 34: SEN = 1;
  8825  004A08  80C5               	bsf	4037,0,c	;volatile
  8826  004A0A  0012               	return		;funcret
  8827  004A0C                     __end_of_I2C_Master_Start:
  8828                           	opt stack 0
  8829                           tblptru	equ	0xFF8
  8830                           tblptrh	equ	0xFF7
  8831                           tblptrl	equ	0xFF6
  8832                           tablat	equ	0xFF5
  8833                           prodh	equ	0xFF4
  8834                           prodl	equ	0xFF3
  8835                           intcon	equ	0xFF2
  8836                           intcon2	equ	0xFF1
  8837                           intcon3	equ	0xFF0
  8838                           postinc0	equ	0xFEE
  8839                           wreg	equ	0xFE8
  8840                           postdec1	equ	0xFE5
  8841                           fsr1l	equ	0xFE1
  8842                           indf2	equ	0xFDF
  8843                           postinc2	equ	0xFDE
  8844                           postdec2	equ	0xFDD
  8845                           fsr2h	equ	0xFDA
  8846                           fsr2l	equ	0xFD9
  8847                           status	equ	0xFD8
  8848                           
  8849 ;; *************** function _I2C_Master_Read *****************
  8850 ;; Defined at:
  8851 ;;		line 55 in file "I2C.c"
  8852 ;; Parameters:    Size  Location     Type
  8853 ;;  a               1    wreg     unsigned char 
  8854 ;; Auto vars:     Size  Location     Type
  8855 ;;  a               1    1[BANK0 ] unsigned char 
  8856 ;;  temp            1    2[BANK0 ] unsigned char 
  8857 ;; Return value:  Size  Location     Type
  8858 ;;                  1    wreg      unsigned char 
  8859 ;; Registers used:
  8860 ;;		wreg, status,2, status,0, cstack
  8861 ;; Tracked objects:
  8862 ;;		On entry : 0/0
  8863 ;;		On exit  : 0/0
  8864 ;;		Unchanged: 0/0
  8865 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8866 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8867 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8868 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8869 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8870 ;;Total ram usage:        2 bytes
  8871 ;; Hardware stack levels used:    1
  8872 ;; Hardware stack levels required when called:    8
  8873 ;; This function calls:
  8874 ;;		_I2C_Master_Wait
  8875 ;; This function is called by:
  8876 ;;		_getRTC
  8877 ;; This function uses a non-reentrant model
  8878 ;;
  8879                           
  8880                           	psect	text30
  8881  00473E                     __ptext30:
  8882                           	opt stack 0
  8883  00473E                     _I2C_Master_Read:
  8884                           	opt stack 18
  8885                           
  8886                           ;incstack = 0
  8887                           ;I2C_Master_Read@a stored from wreg
  8888  00473E  0100               	movlb	0	; () banked
  8889  004740  6F81               	movwf	I2C_Master_Read@a& (0+255),b
  8890                           
  8891                           ;I2C.c: 57: unsigned char temp;
  8892                           ;I2C.c: 58: I2C_Master_Wait();
  8893  004742  ECC1  F024         	call	_I2C_Master_Wait	;wreg free
  8894                           
  8895                           ;I2C.c: 59: RCEN = 1;
  8896  004746  86C5               	bsf	4037,3,c	;volatile
  8897                           
  8898                           ;I2C.c: 60: I2C_Master_Wait();
  8899  004748  ECC1  F024         	call	_I2C_Master_Wait	;wreg free
  8900                           
  8901                           ;I2C.c: 61: temp = SSPBUF;
  8902  00474C  CFC9 F082          	movff	4041,I2C_Master_Read@temp	;volatile
  8903                           
  8904                           ;I2C.c: 62: I2C_Master_Wait();
  8905  004750  ECC1  F024         	call	_I2C_Master_Wait	;wreg free
  8906                           
  8907                           ;I2C.c: 63: ACKDT = (a)?0:1;
  8908  004754  0100               	movlb	0	; () banked
  8909  004756  5181               	movf	I2C_Master_Read@a& (0+255),w,b
  8910  004758  0100               	movlb	0	; () banked
  8911  00475A  A4D8               	btfss	status,2,c
  8912  00475C  D002               	goto	u3730
  8913  00475E  8AC5               	bsf	4037,5,c	;volatile
  8914  004760  D001               	goto	l5426
  8915  004762                     u3730:
  8916  004762  9AC5               	bcf	4037,5,c	;volatile
  8917  004764                     l5426:
  8918                           
  8919                           ;I2C.c: 64: ACKEN = 1;
  8920  004764  88C5               	bsf	4037,4,c	;volatile
  8921                           
  8922                           ;I2C.c: 65: return temp;
  8923  004766  0100               	movlb	0	; () banked
  8924  004768  5182               	movf	I2C_Master_Read@temp& (0+255),w,b
  8925  00476A  0012               	return	
  8926  00476C                     __end_of_I2C_Master_Read:
  8927                           	opt stack 0
  8928                           tblptru	equ	0xFF8
  8929                           tblptrh	equ	0xFF7
  8930                           tblptrl	equ	0xFF6
  8931                           tablat	equ	0xFF5
  8932                           prodh	equ	0xFF4
  8933                           prodl	equ	0xFF3
  8934                           intcon	equ	0xFF2
  8935                           intcon2	equ	0xFF1
  8936                           intcon3	equ	0xFF0
  8937                           postinc0	equ	0xFEE
  8938                           wreg	equ	0xFE8
  8939                           postdec1	equ	0xFE5
  8940                           fsr1l	equ	0xFE1
  8941                           indf2	equ	0xFDF
  8942                           postinc2	equ	0xFDE
  8943                           postdec2	equ	0xFDD
  8944                           fsr2h	equ	0xFDA
  8945                           fsr2l	equ	0xFD9
  8946                           status	equ	0xFD8
  8947                           
  8948 ;; *************** function _I2C_Master_Wait *****************
  8949 ;; Defined at:
  8950 ;;		line 26 in file "I2C.c"
  8951 ;; Parameters:    Size  Location     Type
  8952 ;;		None
  8953 ;; Auto vars:     Size  Location     Type
  8954 ;;		None
  8955 ;; Return value:  Size  Location     Type
  8956 ;;                  1    wreg      void 
  8957 ;; Registers used:
  8958 ;;		wreg, status,2, status,0
  8959 ;; Tracked objects:
  8960 ;;		On entry : 0/0
  8961 ;;		On exit  : 0/0
  8962 ;;		Unchanged: 0/0
  8963 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8964 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8965 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8966 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8967 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8968 ;;Total ram usage:        1 bytes
  8969 ;; Hardware stack levels used:    1
  8970 ;; Hardware stack levels required when called:    7
  8971 ;; This function calls:
  8972 ;;		Nothing
  8973 ;; This function is called by:
  8974 ;;		_I2C_Master_Start
  8975 ;;		_I2C_Master_Stop
  8976 ;;		_I2C_Master_Write
  8977 ;;		_I2C_Master_Read
  8978 ;;		_I2C_Master_RepeatedStart
  8979 ;; This function uses a non-reentrant model
  8980 ;;
  8981                           
  8982                           	psect	text31
  8983  004982                     __ptext31:
  8984                           	opt stack 0
  8985  004982                     _I2C_Master_Wait:
  8986                           	opt stack 18
  8987  004982                     l66:
  8988  004982  B4C7               	btfsc	4039,2,c	;volatile
  8989  004984  D7FE               	goto	l66
  8990  004986  CFC5 F080          	movff	4037,??_I2C_Master_Wait	;volatile
  8991  00498A  0E1F               	movlw	31
  8992  00498C  0100               	movlb	0	; () banked
  8993  00498E  1780               	andwf	??_I2C_Master_Wait& (0+255),f,b
  8994  004990  B4D8               	btfsc	status,2,c
  8995  004992  0012               	return	
  8996  004994  D7F6               	goto	l66
  8997  004996                     __end_of_I2C_Master_Wait:
  8998                           	opt stack 0
  8999                           tblptru	equ	0xFF8
  9000                           tblptrh	equ	0xFF7
  9001                           tblptrl	equ	0xFF6
  9002                           tablat	equ	0xFF5
  9003                           prodh	equ	0xFF4
  9004                           prodl	equ	0xFF3
  9005                           intcon	equ	0xFF2
  9006                           intcon2	equ	0xFF1
  9007                           intcon3	equ	0xFF0
  9008                           postinc0	equ	0xFEE
  9009                           wreg	equ	0xFE8
  9010                           postdec1	equ	0xFE5
  9011                           fsr1l	equ	0xFE1
  9012                           indf2	equ	0xFDF
  9013                           postinc2	equ	0xFDE
  9014                           postdec2	equ	0xFDD
  9015                           fsr2h	equ	0xFDA
  9016                           fsr2l	equ	0xFD9
  9017                           status	equ	0xFD8
  9018                           
  9019 ;; *************** function _change_state_to_menu_22 *****************
  9020 ;; Defined at:
  9021 ;;		line 498 in file "UI.c"
  9022 ;; Parameters:    Size  Location     Type
  9023 ;;		None
  9024 ;; Auto vars:     Size  Location     Type
  9025 ;;		None
  9026 ;; Return value:  Size  Location     Type
  9027 ;;                  1    wreg      void 
  9028 ;; Registers used:
  9029 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9030 ;; Tracked objects:
  9031 ;;		On entry : 0/0
  9032 ;;		On exit  : 0/0
  9033 ;;		Unchanged: 0/0
  9034 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9035 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9036 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9037 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9038 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9039 ;;Total ram usage:        0 bytes
  9040 ;; Hardware stack levels used:    1
  9041 ;; Hardware stack levels required when called:   10
  9042 ;; This function calls:
  9043 ;;		_lcdInst
  9044 ;;		_printf
  9045 ;; This function is called by:
  9046 ;;		_UI
  9047 ;; This function uses a non-reentrant model
  9048 ;;
  9049                           
  9050                           	psect	text32
  9051  004420                     __ptext32:
  9052                           	opt stack 0
  9053  004420                     _change_state_to_menu_22:
  9054                           	opt stack 19
  9055                           
  9056                           ;UI.c: 499: cur_state = 22;
  9057                           
  9058                           ; BSR set to: 0
  9059                           ;incstack = 0
  9060  004420  0E00               	movlw	0
  9061  004422  0100               	movlb	0	; () banked
  9062  004424  6FE3               	movwf	(_cur_state+1)& (0+255),b
  9063  004426  0E16               	movlw	22
  9064  004428  6FE2               	movwf	_cur_state& (0+255),b
  9065                           
  9066                           ; BSR set to: 0
  9067                           ;UI.c: 501: lcdInst(0b10000000);;
  9068  00442A  0E80               	movlw	128
  9069  00442C  ECDC  F024         	call	_lcdInst
  9070                           
  9071                           ;UI.c: 502: printf("2. SORT        <");
  9072  004430  0EC4               	movlw	low STR_34
  9073  004432  0100               	movlb	0	; () banked
  9074  004434  6F8E               	movwf	printf@f& (0+255),b
  9075  004436  0EFD               	movlw	high STR_34
  9076  004438  0100               	movlb	0	; () banked
  9077  00443A  6F8F               	movwf	(printf@f+1)& (0+255),b
  9078  00443C  ECB8  F008         	call	_printf	;wreg free
  9079                           
  9080                           ;UI.c: 503: lcdInst(0b11000000);;
  9081  004440  0EC0               	movlw	192
  9082  004442  ECDC  F024         	call	_lcdInst
  9083                           
  9084                           ;UI.c: 504: printf("3. LOGS         ");
  9085  004446  0E09               	movlw	low STR_36
  9086  004448  0100               	movlb	0	; () banked
  9087  00444A  6F8E               	movwf	printf@f& (0+255),b
  9088  00444C  0EFD               	movlw	high STR_36
  9089  00444E  0100               	movlb	0	; () banked
  9090  004450  6F8F               	movwf	(printf@f+1)& (0+255),b
  9091  004452  ECB8  F008         	call	_printf	;wreg free
  9092  004456  0012               	return		;funcret
  9093  004458                     __end_of_change_state_to_menu_22:
  9094                           	opt stack 0
  9095                           tblptru	equ	0xFF8
  9096                           tblptrh	equ	0xFF7
  9097                           tblptrl	equ	0xFF6
  9098                           tablat	equ	0xFF5
  9099                           prodh	equ	0xFF4
  9100                           prodl	equ	0xFF3
  9101                           intcon	equ	0xFF2
  9102                           intcon2	equ	0xFF1
  9103                           intcon3	equ	0xFF0
  9104                           postinc0	equ	0xFEE
  9105                           wreg	equ	0xFE8
  9106                           postdec1	equ	0xFE5
  9107                           fsr1l	equ	0xFE1
  9108                           indf2	equ	0xFDF
  9109                           postinc2	equ	0xFDE
  9110                           postdec2	equ	0xFDD
  9111                           fsr2h	equ	0xFDA
  9112                           fsr2l	equ	0xFD9
  9113                           status	equ	0xFD8
  9114                           
  9115 ;; *************** function _change_state_to_menu_12 *****************
  9116 ;; Defined at:
  9117 ;;		line 490 in file "UI.c"
  9118 ;; Parameters:    Size  Location     Type
  9119 ;;		None
  9120 ;; Auto vars:     Size  Location     Type
  9121 ;;		None
  9122 ;; Return value:  Size  Location     Type
  9123 ;;                  1    wreg      void 
  9124 ;; Registers used:
  9125 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9126 ;; Tracked objects:
  9127 ;;		On entry : 0/0
  9128 ;;		On exit  : 0/0
  9129 ;;		Unchanged: 0/0
  9130 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9131 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9132 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9133 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9134 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9135 ;;Total ram usage:        0 bytes
  9136 ;; Hardware stack levels used:    1
  9137 ;; Hardware stack levels required when called:   10
  9138 ;; This function calls:
  9139 ;;		_lcdInst
  9140 ;;		_printf
  9141 ;; This function is called by:
  9142 ;;		_UI
  9143 ;; This function uses a non-reentrant model
  9144 ;;
  9145                           
  9146                           	psect	text33
  9147  004458                     __ptext33:
  9148                           	opt stack 0
  9149  004458                     _change_state_to_menu_12:
  9150                           	opt stack 19
  9151                           
  9152                           ;UI.c: 491: cur_state = 12;
  9153                           
  9154                           ;incstack = 0
  9155  004458  0E00               	movlw	0
  9156  00445A  0100               	movlb	0	; () banked
  9157  00445C  6FE3               	movwf	(_cur_state+1)& (0+255),b
  9158  00445E  0E0C               	movlw	12
  9159  004460  6FE2               	movwf	_cur_state& (0+255),b
  9160                           
  9161                           ; BSR set to: 0
  9162                           ;UI.c: 493: lcdInst(0b10000000);;
  9163  004462  0E80               	movlw	128
  9164  004464  ECDC  F024         	call	_lcdInst
  9165                           
  9166                           ;UI.c: 494: printf("1. DATE/TIME    ");
  9167  004468  0E2B               	movlw	low STR_33
  9168  00446A  0100               	movlb	0	; () banked
  9169  00446C  6F8E               	movwf	printf@f& (0+255),b
  9170  00446E  0EFD               	movlw	high STR_33
  9171  004470  0100               	movlb	0	; () banked
  9172  004472  6F8F               	movwf	(printf@f+1)& (0+255),b
  9173  004474  ECB8  F008         	call	_printf	;wreg free
  9174                           
  9175                           ;UI.c: 495: lcdInst(0b11000000);;
  9176  004478  0EC0               	movlw	192
  9177  00447A  ECDC  F024         	call	_lcdInst
  9178                           
  9179                           ;UI.c: 496: printf("2. SORT        <");
  9180  00447E  0EC4               	movlw	low STR_34
  9181  004480  0100               	movlb	0	; () banked
  9182  004482  6F8E               	movwf	printf@f& (0+255),b
  9183  004484  0EFD               	movlw	high STR_34
  9184  004486  0100               	movlb	0	; () banked
  9185  004488  6F8F               	movwf	(printf@f+1)& (0+255),b
  9186  00448A  ECB8  F008         	call	_printf	;wreg free
  9187  00448E  0012               	return		;funcret
  9188  004490                     __end_of_change_state_to_menu_12:
  9189                           	opt stack 0
  9190                           tblptru	equ	0xFF8
  9191                           tblptrh	equ	0xFF7
  9192                           tblptrl	equ	0xFF6
  9193                           tablat	equ	0xFF5
  9194                           prodh	equ	0xFF4
  9195                           prodl	equ	0xFF3
  9196                           intcon	equ	0xFF2
  9197                           intcon2	equ	0xFF1
  9198                           intcon3	equ	0xFF0
  9199                           postinc0	equ	0xFEE
  9200                           wreg	equ	0xFE8
  9201                           postdec1	equ	0xFE5
  9202                           fsr1l	equ	0xFE1
  9203                           indf2	equ	0xFDF
  9204                           postinc2	equ	0xFDE
  9205                           postdec2	equ	0xFDD
  9206                           fsr2h	equ	0xFDA
  9207                           fsr2l	equ	0xFD9
  9208                           status	equ	0xFD8
  9209                           
  9210 ;; *************** function ___awmod *****************
  9211 ;; Defined at:
  9212 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
  9213 ;; Parameters:    Size  Location     Type
  9214 ;;  dividend        2    0[BANK0 ] int 
  9215 ;;  divisor         2    2[BANK0 ] int 
  9216 ;; Auto vars:     Size  Location     Type
  9217 ;;  sign            1    5[BANK0 ] unsigned char 
  9218 ;;  counter         1    4[BANK0 ] unsigned char 
  9219 ;; Return value:  Size  Location     Type
  9220 ;;                  2    0[BANK0 ] int 
  9221 ;; Registers used:
  9222 ;;		wreg, status,2, status,0
  9223 ;; Tracked objects:
  9224 ;;		On entry : 0/0
  9225 ;;		On exit  : 0/0
  9226 ;;		Unchanged: 0/0
  9227 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9228 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9229 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9230 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9231 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9232 ;;Total ram usage:        6 bytes
  9233 ;; Hardware stack levels used:    1
  9234 ;; Hardware stack levels required when called:    7
  9235 ;; This function calls:
  9236 ;;		Nothing
  9237 ;; This function is called by:
  9238 ;;		_UI
  9239 ;; This function uses a non-reentrant model
  9240 ;;
  9241                           
  9242                           	psect	text34
  9243  003AF6                     __ptext34:
  9244                           	opt stack 0
  9245  003AF6                     ___awmod:
  9246                           	opt stack 22
  9247                           
  9248                           ;incstack = 0
  9249  003AF6  0E00               	movlw	0
  9250  003AF8  0100               	movlb	0	; () banked
  9251  003AFA  6F85               	movwf	___awmod@sign& (0+255),b
  9252                           
  9253                           ; BSR set to: 0
  9254  003AFC  0100               	movlb	0	; () banked
  9255  003AFE  AF81               	btfss	(___awmod@dividend+1)& (0+255),7,b
  9256  003B00  D008               	goto	l7554
  9257                           
  9258                           ; BSR set to: 0
  9259  003B02  0100               	movlb	0	; () banked
  9260  003B04  6D80               	negf	___awmod@dividend& (0+255),b
  9261  003B06  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
  9262  003B08  B0D8               	btfsc	status,0,c
  9263  003B0A  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
  9264                           
  9265                           ; BSR set to: 0
  9266  003B0C  0E01               	movlw	1
  9267  003B0E  0100               	movlb	0	; () banked
  9268  003B10  6F85               	movwf	___awmod@sign& (0+255),b
  9269  003B12                     l7554:
  9270                           
  9271                           ; BSR set to: 0
  9272  003B12  0100               	movlb	0	; () banked
  9273  003B14  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
  9274  003B16  D005               	goto	l7558
  9275                           
  9276                           ; BSR set to: 0
  9277  003B18  0100               	movlb	0	; () banked
  9278  003B1A  6D82               	negf	___awmod@divisor& (0+255),b
  9279  003B1C  1F83               	comf	(___awmod@divisor+1)& (0+255),f,b
  9280  003B1E  B0D8               	btfsc	status,0,c
  9281  003B20  2B83               	incf	(___awmod@divisor+1)& (0+255),f,b
  9282  003B22                     l7558:
  9283                           
  9284                           ; BSR set to: 0
  9285  003B22  0100               	movlb	0	; () banked
  9286  003B24  5182               	movf	___awmod@divisor& (0+255),w,b
  9287  003B26  0100               	movlb	0	; () banked
  9288  003B28  1183               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  9289  003B2A  B4D8               	btfsc	status,2,c
  9290  003B2C  D026               	goto	l7574
  9291                           
  9292                           ; BSR set to: 0
  9293  003B2E  0E01               	movlw	1
  9294  003B30  0100               	movlb	0	; () banked
  9295  003B32  6F84               	movwf	___awmod@counter& (0+255),b
  9296  003B34  D006               	goto	l7564
  9297  003B36                     l7562:
  9298                           
  9299                           ; BSR set to: 0
  9300  003B36  0100               	movlb	0	; () banked
  9301  003B38  90D8               	bcf	status,0,c
  9302  003B3A  3782               	rlcf	___awmod@divisor& (0+255),f,b
  9303  003B3C  3783               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  9304  003B3E  0100               	movlb	0	; () banked
  9305  003B40  2B84               	incf	___awmod@counter& (0+255),f,b
  9306  003B42                     l7564:
  9307                           
  9308                           ; BSR set to: 0
  9309  003B42  0100               	movlb	0	; () banked
  9310  003B44  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
  9311  003B46  D7F7               	goto	l7562
  9312  003B48                     l7566:
  9313                           
  9314                           ; BSR set to: 0
  9315  003B48  0100               	movlb	0	; () banked
  9316  003B4A  5182               	movf	___awmod@divisor& (0+255),w,b
  9317  003B4C  0100               	movlb	0	; () banked
  9318  003B4E  5D80               	subwf	___awmod@dividend& (0+255),w,b
  9319  003B50  0100               	movlb	0	; () banked
  9320  003B52  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
  9321  003B54  0100               	movlb	0	; () banked
  9322  003B56  5981               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  9323  003B58  A0D8               	btfss	status,0,c
  9324  003B5A  D008               	goto	l7570
  9325                           
  9326                           ; BSR set to: 0
  9327  003B5C  0100               	movlb	0	; () banked
  9328  003B5E  5182               	movf	___awmod@divisor& (0+255),w,b
  9329  003B60  0100               	movlb	0	; () banked
  9330  003B62  5F80               	subwf	___awmod@dividend& (0+255),f,b
  9331  003B64  0100               	movlb	0	; () banked
  9332  003B66  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
  9333  003B68  0100               	movlb	0	; () banked
  9334  003B6A  5B81               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  9335  003B6C                     l7570:
  9336                           
  9337                           ; BSR set to: 0
  9338  003B6C  0100               	movlb	0	; () banked
  9339  003B6E  90D8               	bcf	status,0,c
  9340  003B70  3383               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  9341  003B72  3382               	rrcf	___awmod@divisor& (0+255),f,b
  9342                           
  9343                           ; BSR set to: 0
  9344  003B74  0100               	movlb	0	; () banked
  9345  003B76  2F84               	decfsz	___awmod@counter& (0+255),f,b
  9346  003B78  D7E7               	goto	l7566
  9347  003B7A                     l7574:
  9348                           
  9349                           ; BSR set to: 0
  9350  003B7A  0100               	movlb	0	; () banked
  9351  003B7C  5185               	movf	___awmod@sign& (0+255),w,b
  9352  003B7E  0100               	movlb	0	; () banked
  9353  003B80  B4D8               	btfsc	status,2,c
  9354  003B82  D005               	goto	l7578
  9355                           
  9356                           ; BSR set to: 0
  9357  003B84  0100               	movlb	0	; () banked
  9358  003B86  6D80               	negf	___awmod@dividend& (0+255),b
  9359  003B88  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
  9360  003B8A  B0D8               	btfsc	status,0,c
  9361  003B8C  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
  9362  003B8E                     l7578:
  9363                           
  9364                           ; BSR set to: 0
  9365  003B8E  C080  F080         	movff	___awmod@dividend,?___awmod
  9366  003B92  C081  F081         	movff	___awmod@dividend+1,?___awmod+1
  9367  003B96  0012               	return	
  9368  003B98                     __end_of___awmod:
  9369                           	opt stack 0
  9370                           tblptru	equ	0xFF8
  9371                           tblptrh	equ	0xFF7
  9372                           tblptrl	equ	0xFF6
  9373                           tablat	equ	0xFF5
  9374                           prodh	equ	0xFF4
  9375                           prodl	equ	0xFF3
  9376                           intcon	equ	0xFF2
  9377                           intcon2	equ	0xFF1
  9378                           intcon3	equ	0xFF0
  9379                           postinc0	equ	0xFEE
  9380                           wreg	equ	0xFE8
  9381                           postdec1	equ	0xFE5
  9382                           fsr1l	equ	0xFE1
  9383                           indf2	equ	0xFDF
  9384                           postinc2	equ	0xFDE
  9385                           postdec2	equ	0xFDD
  9386                           fsr2h	equ	0xFDA
  9387                           fsr2l	equ	0xFD9
  9388                           status	equ	0xFD8
  9389                           
  9390 ;; *************** function ___awdiv *****************
  9391 ;; Defined at:
  9392 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
  9393 ;; Parameters:    Size  Location     Type
  9394 ;;  dividend        2    6[BANK0 ] int 
  9395 ;;  divisor         2    8[BANK0 ] int 
  9396 ;; Auto vars:     Size  Location     Type
  9397 ;;  quotient        2   12[BANK0 ] int 
  9398 ;;  sign            1   11[BANK0 ] unsigned char 
  9399 ;;  counter         1   10[BANK0 ] unsigned char 
  9400 ;; Return value:  Size  Location     Type
  9401 ;;                  2    6[BANK0 ] int 
  9402 ;; Registers used:
  9403 ;;		wreg, status,2, status,0
  9404 ;; Tracked objects:
  9405 ;;		On entry : 0/0
  9406 ;;		On exit  : 0/0
  9407 ;;		Unchanged: 0/0
  9408 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9409 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9410 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9411 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9412 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9413 ;;Total ram usage:        8 bytes
  9414 ;; Hardware stack levels used:    1
  9415 ;; Hardware stack levels required when called:    7
  9416 ;; This function calls:
  9417 ;;		Nothing
  9418 ;; This function is called by:
  9419 ;;		_UI
  9420 ;; This function uses a non-reentrant model
  9421 ;;
  9422                           
  9423                           	psect	text35
  9424  0038D2                     __ptext35:
  9425                           	opt stack 0
  9426  0038D2                     ___awdiv:
  9427                           	opt stack 22
  9428                           
  9429                           ; BSR set to: 0
  9430                           ;incstack = 0
  9431  0038D2  0E00               	movlw	0
  9432  0038D4  0100               	movlb	0	; () banked
  9433  0038D6  6F8B               	movwf	___awdiv@sign& (0+255),b
  9434                           
  9435                           ; BSR set to: 0
  9436  0038D8  0100               	movlb	0	; () banked
  9437  0038DA  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  9438  0038DC  D008               	goto	l7510
  9439                           
  9440                           ; BSR set to: 0
  9441  0038DE  0100               	movlb	0	; () banked
  9442  0038E0  6D88               	negf	___awdiv@divisor& (0+255),b
  9443  0038E2  1F89               	comf	(___awdiv@divisor+1)& (0+255),f,b
  9444  0038E4  B0D8               	btfsc	status,0,c
  9445  0038E6  2B89               	incf	(___awdiv@divisor+1)& (0+255),f,b
  9446                           
  9447                           ; BSR set to: 0
  9448  0038E8  0E01               	movlw	1
  9449  0038EA  0100               	movlb	0	; () banked
  9450  0038EC  6F8B               	movwf	___awdiv@sign& (0+255),b
  9451  0038EE                     l7510:
  9452                           
  9453                           ; BSR set to: 0
  9454  0038EE  0100               	movlb	0	; () banked
  9455  0038F0  AF87               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  9456  0038F2  D008               	goto	l7516
  9457                           
  9458                           ; BSR set to: 0
  9459  0038F4  0100               	movlb	0	; () banked
  9460  0038F6  6D86               	negf	___awdiv@dividend& (0+255),b
  9461  0038F8  1F87               	comf	(___awdiv@dividend+1)& (0+255),f,b
  9462  0038FA  B0D8               	btfsc	status,0,c
  9463  0038FC  2B87               	incf	(___awdiv@dividend+1)& (0+255),f,b
  9464                           
  9465                           ; BSR set to: 0
  9466  0038FE  0E01               	movlw	1
  9467  003900  0100               	movlb	0	; () banked
  9468  003902  1B8B               	xorwf	___awdiv@sign& (0+255),f,b
  9469  003904                     l7516:
  9470                           
  9471                           ; BSR set to: 0
  9472  003904  0E00               	movlw	0
  9473  003906  0100               	movlb	0	; () banked
  9474  003908  6F8D               	movwf	(___awdiv@quotient+1)& (0+255),b
  9475  00390A  0E00               	movlw	0
  9476  00390C  6F8C               	movwf	___awdiv@quotient& (0+255),b
  9477                           
  9478                           ; BSR set to: 0
  9479  00390E  0100               	movlb	0	; () banked
  9480  003910  5188               	movf	___awdiv@divisor& (0+255),w,b
  9481  003912  0100               	movlb	0	; () banked
  9482  003914  1189               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  9483  003916  B4D8               	btfsc	status,2,c
  9484  003918  D02C               	goto	l7538
  9485                           
  9486                           ; BSR set to: 0
  9487  00391A  0E01               	movlw	1
  9488  00391C  0100               	movlb	0	; () banked
  9489  00391E  6F8A               	movwf	___awdiv@counter& (0+255),b
  9490  003920  D006               	goto	l7524
  9491  003922                     l7522:
  9492                           
  9493                           ; BSR set to: 0
  9494  003922  0100               	movlb	0	; () banked
  9495  003924  90D8               	bcf	status,0,c
  9496  003926  3788               	rlcf	___awdiv@divisor& (0+255),f,b
  9497  003928  3789               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  9498  00392A  0100               	movlb	0	; () banked
  9499  00392C  2B8A               	incf	___awdiv@counter& (0+255),f,b
  9500  00392E                     l7524:
  9501                           
  9502                           ; BSR set to: 0
  9503  00392E  0100               	movlb	0	; () banked
  9504  003930  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  9505  003932  D7F7               	goto	l7522
  9506  003934                     l7526:
  9507                           
  9508                           ; BSR set to: 0
  9509  003934  0100               	movlb	0	; () banked
  9510  003936  90D8               	bcf	status,0,c
  9511  003938  378C               	rlcf	___awdiv@quotient& (0+255),f,b
  9512  00393A  378D               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  9513                           
  9514                           ; BSR set to: 0
  9515  00393C  0100               	movlb	0	; () banked
  9516  00393E  5188               	movf	___awdiv@divisor& (0+255),w,b
  9517  003940  0100               	movlb	0	; () banked
  9518  003942  5D86               	subwf	___awdiv@dividend& (0+255),w,b
  9519  003944  0100               	movlb	0	; () banked
  9520  003946  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
  9521  003948  0100               	movlb	0	; () banked
  9522  00394A  5987               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  9523  00394C  A0D8               	btfss	status,0,c
  9524  00394E  D00A               	goto	l7534
  9525                           
  9526                           ; BSR set to: 0
  9527  003950  0100               	movlb	0	; () banked
  9528  003952  5188               	movf	___awdiv@divisor& (0+255),w,b
  9529  003954  0100               	movlb	0	; () banked
  9530  003956  5F86               	subwf	___awdiv@dividend& (0+255),f,b
  9531  003958  0100               	movlb	0	; () banked
  9532  00395A  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
  9533  00395C  0100               	movlb	0	; () banked
  9534  00395E  5B87               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  9535                           
  9536                           ; BSR set to: 0
  9537  003960  0100               	movlb	0	; () banked
  9538  003962  818C               	bsf	___awdiv@quotient& (0+255),0,b
  9539  003964                     l7534:
  9540                           
  9541                           ; BSR set to: 0
  9542  003964  0100               	movlb	0	; () banked
  9543  003966  90D8               	bcf	status,0,c
  9544  003968  3389               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  9545  00396A  3388               	rrcf	___awdiv@divisor& (0+255),f,b
  9546                           
  9547                           ; BSR set to: 0
  9548  00396C  0100               	movlb	0	; () banked
  9549  00396E  2F8A               	decfsz	___awdiv@counter& (0+255),f,b
  9550  003970  D7E1               	goto	l7526
  9551  003972                     l7538:
  9552                           
  9553                           ; BSR set to: 0
  9554  003972  0100               	movlb	0	; () banked
  9555  003974  518B               	movf	___awdiv@sign& (0+255),w,b
  9556  003976  0100               	movlb	0	; () banked
  9557  003978  B4D8               	btfsc	status,2,c
  9558  00397A  D005               	goto	l7542
  9559                           
  9560                           ; BSR set to: 0
  9561  00397C  0100               	movlb	0	; () banked
  9562  00397E  6D8C               	negf	___awdiv@quotient& (0+255),b
  9563  003980  1F8D               	comf	(___awdiv@quotient+1)& (0+255),f,b
  9564  003982  B0D8               	btfsc	status,0,c
  9565  003984  2B8D               	incf	(___awdiv@quotient+1)& (0+255),f,b
  9566  003986                     l7542:
  9567                           
  9568                           ; BSR set to: 0
  9569  003986  C08C  F086         	movff	___awdiv@quotient,?___awdiv
  9570  00398A  C08D  F087         	movff	___awdiv@quotient+1,?___awdiv+1
  9571  00398E  0012               	return	
  9572  003990                     __end_of___awdiv:
  9573                           	opt stack 0
  9574                           tblptru	equ	0xFF8
  9575                           tblptrh	equ	0xFF7
  9576                           tblptrl	equ	0xFF6
  9577                           tablat	equ	0xFF5
  9578                           prodh	equ	0xFF4
  9579                           prodl	equ	0xFF3
  9580                           intcon	equ	0xFF2
  9581                           intcon2	equ	0xFF1
  9582                           intcon3	equ	0xFF0
  9583                           postinc0	equ	0xFEE
  9584                           wreg	equ	0xFE8
  9585                           postdec1	equ	0xFE5
  9586                           fsr1l	equ	0xFE1
  9587                           indf2	equ	0xFDF
  9588                           postinc2	equ	0xFDE
  9589                           postdec2	equ	0xFDD
  9590                           fsr2h	equ	0xFDA
  9591                           fsr2l	equ	0xFD9
  9592                           status	equ	0xFD8
  9593                           
  9594 ;; *************** function _Test *****************
  9595 ;; Defined at:
  9596 ;;		line 30 in file "Test.c"
  9597 ;; Parameters:    Size  Location     Type
  9598 ;;		None
  9599 ;; Auto vars:     Size  Location     Type
  9600 ;;		None
  9601 ;; Return value:  Size  Location     Type
  9602 ;;                  1    wreg      void 
  9603 ;; Registers used:
  9604 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9605 ;; Tracked objects:
  9606 ;;		On entry : 0/0
  9607 ;;		On exit  : 0/0
  9608 ;;		Unchanged: 0/0
  9609 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9610 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9611 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9612 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9613 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9614 ;;Total ram usage:        2 bytes
  9615 ;; Hardware stack levels used:    1
  9616 ;; Hardware stack levels required when called:   11
  9617 ;; This function calls:
  9618 ;;		_BlockerTest
  9619 ;;		_BothServos
  9620 ;;		_EEPROMTest
  9621 ;;		_PortTestA5
  9622 ;;		_PortTests
  9623 ;;		_PusherTest
  9624 ;;		_SpeedTest
  9625 ;;		_actuatorTest
  9626 ;;		_algorithmTest
  9627 ;;		_lcdInst
  9628 ;;		_printf
  9629 ;;		_sensorTest
  9630 ;; This function is called by:
  9631 ;;		_main
  9632 ;; This function uses a non-reentrant model
  9633 ;;
  9634                           
  9635                           	psect	text36
  9636  0033B2                     __ptext36:
  9637                           	opt stack 0
  9638  0033B2                     _Test:
  9639                           	opt stack 19
  9640  0033B2                     
  9641                           ;Test.c: 33: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
  9642  0033B2  0E01               	movlw	1
  9643  0033B4  ECDC  F024         	call	_lcdInst
  9644  0033B8  0E68               	movlw	104
  9645  0033BA  0100               	movlb	0	; () banked
  9646  0033BC  6FC6               	movwf	??_Test& (0+255),b
  9647  0033BE  0EE4               	movlw	228
  9648  0033C0                     u7777:
  9649  0033C0  2EE8               	decfsz	wreg,f,c
  9650  0033C2  D7FE               	bra	u7777
  9651  0033C4  2FC6               	decfsz	??_Test& (0+255),f,b
  9652  0033C6  D7FC               	bra	u7777
  9653  0033C8  F000               	nop	
  9654  0033CA  0E80               	movlw	128
  9655  0033CC  ECDC  F024         	call	_lcdInst
  9656                           
  9657                           ;Test.c: 34: printf("1.ALG|2.SNR|3.AC");
  9658  0033D0  0E70               	movlw	low STR_68
  9659  0033D2  0100               	movlb	0	; () banked
  9660  0033D4  6F8E               	movwf	printf@f& (0+255),b
  9661  0033D6  0EFC               	movlw	high STR_68
  9662  0033D8  0100               	movlb	0	; () banked
  9663  0033DA  6F8F               	movwf	(printf@f+1)& (0+255),b
  9664  0033DC  ECB8  F008         	call	_printf	;wreg free
  9665                           
  9666                           ;Test.c: 35: lcdInst(0b11000000);;
  9667  0033E0  0EC0               	movlw	192
  9668  0033E2  ECDC  F024         	call	_lcdInst
  9669                           
  9670                           ;Test.c: 36: printf("4.HI|5.TOG|6.EEP");
  9671  0033E6  0EA3               	movlw	low STR_69
  9672  0033E8  0100               	movlb	0	; () banked
  9673  0033EA  6F8E               	movwf	printf@f& (0+255),b
  9674  0033EC  0EFC               	movlw	high STR_69
  9675  0033EE  0100               	movlb	0	; () banked
  9676  0033F0  6F8F               	movwf	(printf@f+1)& (0+255),b
  9677  0033F2  ECB8  F008         	call	_printf	;wreg free
  9678                           
  9679                           ;Test.c: 37: _delay((unsigned long)((100)*(32000000/4000.0)));
  9680  0033F6  0E05               	movlw	5
  9681  0033F8  0100               	movlb	0	; () banked
  9682  0033FA  6FC7               	movwf	(??_Test+1)& (0+255),b
  9683  0033FC  0E0F               	movlw	15
  9684  0033FE  0100               	movlb	0	; () banked
  9685  003400  6FC6               	movwf	??_Test& (0+255),b
  9686  003402  0EF1               	movlw	241
  9687  003404                     u7787:
  9688  003404  2EE8               	decfsz	wreg,f,c
  9689  003406  D7FE               	bra	u7787
  9690  003408  2FC6               	decfsz	??_Test& (0+255),f,b
  9691  00340A  D7FC               	bra	u7787
  9692  00340C  2FC7               	decfsz	(??_Test+1)& (0+255),f,b
  9693  00340E  D7FA               	bra	u7787
  9694  003410                     l1051:
  9695  003410  A281               	btfss	3969,1,c	;volatile
  9696  003412  D7FE               	goto	l1051
  9697                           
  9698                           ;Test.c: 39: var = PORTB >> 4;
  9699  003414  CF81 F0C6          	movff	3969,??_Test	;volatile
  9700  003418  0100               	movlb	0	; () banked
  9701  00341A  3BC6               	swapf	??_Test& (0+255),f,b
  9702  00341C  0E0F               	movlw	15
  9703  00341E  17C6               	andwf	??_Test& (0+255),f,b
  9704  003420  0100               	movlb	0	; () banked
  9705  003422  51C6               	movf	??_Test& (0+255),w,b
  9706  003424  0100               	movlb	0	; () banked
  9707  003426  6FFA               	movwf	_var& (0+255),b
  9708  003428  6BFB               	clrf	(_var+1)& (0+255),b
  9709                           
  9710                           ; BSR set to: 0
  9711                           ;Test.c: 40: var++;
  9712  00342A  0100               	movlb	0	; () banked
  9713  00342C  4BFA               	infsnz	_var& (0+255),f,b
  9714  00342E  2BFB               	incf	(_var+1)& (0+255),f,b
  9715  003430                     l1054:
  9716  003430  A281               	btfss	3969,1,c	;volatile
  9717  003432  D01F               	goto	l8278
  9718  003434  D7FD               	goto	l1054
  9719  003436                     l8256:
  9720                           
  9721                           ;Test.c: 44: algorithmTest();
  9722  003436  ECD5  F01A         	call	_algorithmTest	;wreg free
  9723                           
  9724                           ;Test.c: 45: break;
  9725  00343A  D7BB               	goto	l8238
  9726  00343C                     l8258:
  9727                           
  9728                           ;Test.c: 47: sensorTest();
  9729  00343C  EC4D  F00E         	call	_sensorTest	;wreg free
  9730                           
  9731                           ;Test.c: 48: break;
  9732  003440  D7B8               	goto	l8238
  9733  003442                     l8260:
  9734                           
  9735                           ;Test.c: 50: actuatorTest();
  9736  003442  EC09  F000         	call	_actuatorTest	;wreg free
  9737                           
  9738                           ;Test.c: 51: break;
  9739  003446  D7B5               	goto	l8238
  9740  003448                     l8262:
  9741                           
  9742                           ;Test.c: 53: PortTestA5();
  9743  003448  EC80  F020         	call	_PortTestA5	;wreg free
  9744                           
  9745                           ;Test.c: 54: break;
  9746  00344C  D7B2               	goto	l8238
  9747  00344E                     l8264:
  9748                           
  9749                           ;Test.c: 57: SpeedTest();
  9750  00344E  EC55  F01E         	call	_SpeedTest	;wreg free
  9751                           
  9752                           ;Test.c: 58: break;
  9753  003452  D7AF               	goto	l8238
  9754  003454                     l8266:
  9755                           
  9756                           ;Test.c: 60: EEPROMTest();
  9757  003454  EC0E  F025         	call	_EEPROMTest	;wreg free
  9758                           
  9759                           ;Test.c: 61: break;
  9760  003458  D7AC               	goto	l8238
  9761  00345A                     l8268:
  9762                           
  9763                           ;Test.c: 63: PusherTest();
  9764  00345A  EC40  F01B         	call	_PusherTest	;wreg free
  9765                           
  9766                           ;Test.c: 64: break;
  9767  00345E  D7A9               	goto	l8238
  9768  003460                     l8270:
  9769                           
  9770                           ;Test.c: 66: PortTests();
  9771  003460  EC97  F01E         	call	_PortTests	;wreg free
  9772                           
  9773                           ;Test.c: 67: break;
  9774  003464  D7A6               	goto	l8238
  9775  003466                     l8272:
  9776                           
  9777                           ;Test.c: 69: BothServos();
  9778  003466  ECD4  F00A         	call	_BothServos	;wreg free
  9779                           
  9780                           ;Test.c: 70: break;
  9781  00346A  D7A3               	goto	l8238
  9782  00346C                     l8274:
  9783                           
  9784                           ;Test.c: 72: BlockerTest();
  9785  00346C  ECA5  F01B         	call	_BlockerTest	;wreg free
  9786                           
  9787                           ;Test.c: 76: }
  9788                           
  9789                           ;Test.c: 75: break;
  9790                           
  9791                           ;Test.c: 74: default:
  9792                           
  9793                           ;Test.c: 73: break;
  9794  003470  D7A0               	goto	l8238
  9795  003472                     l8278:
  9796  003472  C0FA  F0C6         	movff	_var,??_Test
  9797  003476  C0FB  F0C7         	movff	_var+1,??_Test+1
  9798                           
  9799                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9800                           ; Switch size 1, requested type "space"
  9801                           ; Number of cases is 1, Range of values is 0 to 0
  9802                           ; switch strategies available:
  9803                           ; Name         Instructions Cycles
  9804                           ; simple_byte            4     3 (average)
  9805                           ;	Chosen strategy is simple_byte
  9806  00347A  0100               	movlb	0	; () banked
  9807  00347C  51C7               	movf	(??_Test+1)& (0+255),w,b
  9808  00347E  0A00               	xorlw	0	; case 0
  9809  003480  A4D8               	btfss	status,2,c
  9810  003482  D797               	goto	l8238
  9811                           
  9812                           ; BSR set to: 0
  9813                           ; Switch size 1, requested type "space"
  9814                           ; Number of cases is 10, Range of values is 1 to 11
  9815                           ; switch strategies available:
  9816                           ; Name         Instructions Cycles
  9817                           ; simple_byte           31    16 (average)
  9818                           ;	Chosen strategy is simple_byte
  9819  003484  0100               	movlb	0	; () banked
  9820  003486  51C6               	movf	??_Test& (0+255),w,b
  9821  003488  0A01               	xorlw	1	; case 1
  9822  00348A  B4D8               	btfsc	status,2,c
  9823  00348C  D7D4               	goto	l8256
  9824  00348E  0A03               	xorlw	3	; case 2
  9825  003490  B4D8               	btfsc	status,2,c
  9826  003492  D7D4               	goto	l8258
  9827  003494  0A01               	xorlw	1	; case 3
  9828  003496  B4D8               	btfsc	status,2,c
  9829  003498  D7D4               	goto	l8260
  9830  00349A  0A06               	xorlw	6	; case 5
  9831  00349C  B4D8               	btfsc	status,2,c
  9832  00349E  D7D4               	goto	l8262
  9833  0034A0  0A03               	xorlw	3	; case 6
  9834  0034A2  B4D8               	btfsc	status,2,c
  9835  0034A4  D7D4               	goto	l8264
  9836  0034A6  0A01               	xorlw	1	; case 7
  9837  0034A8  B4D8               	btfsc	status,2,c
  9838  0034AA  D7D4               	goto	l8266
  9839  0034AC  0A0F               	xorlw	15	; case 8
  9840  0034AE  B4D8               	btfsc	status,2,c
  9841  0034B0  D7D4               	goto	l8268
  9842  0034B2  0A01               	xorlw	1	; case 9
  9843  0034B4  B4D8               	btfsc	status,2,c
  9844  0034B6  D7D4               	goto	l8270
  9845  0034B8  0A03               	xorlw	3	; case 10
  9846  0034BA  B4D8               	btfsc	status,2,c
  9847  0034BC  D7D4               	goto	l8272
  9848  0034BE  0A01               	xorlw	1	; case 11
  9849  0034C0  B4D8               	btfsc	status,2,c
  9850  0034C2  D7D4               	goto	l8274
  9851                           
  9852                           ; BSR set to: 0
  9853                           
  9854                           ; BSR set to: 0
  9855  0034C4  D776               	goto	l8238
  9856  0034C6                     __end_of_Test:
  9857                           	opt stack 0
  9858                           tblptru	equ	0xFF8
  9859                           tblptrh	equ	0xFF7
  9860                           tblptrl	equ	0xFF6
  9861                           tablat	equ	0xFF5
  9862                           prodh	equ	0xFF4
  9863                           prodl	equ	0xFF3
  9864                           intcon	equ	0xFF2
  9865                           intcon2	equ	0xFF1
  9866                           intcon3	equ	0xFF0
  9867                           postinc0	equ	0xFEE
  9868                           wreg	equ	0xFE8
  9869                           postdec1	equ	0xFE5
  9870                           fsr1l	equ	0xFE1
  9871                           indf2	equ	0xFDF
  9872                           postinc2	equ	0xFDE
  9873                           postdec2	equ	0xFDD
  9874                           fsr2h	equ	0xFDA
  9875                           fsr2l	equ	0xFD9
  9876                           status	equ	0xFD8
  9877                           
  9878 ;; *************** function _sensorTest *****************
  9879 ;; Defined at:
  9880 ;;		line 124 in file "Test.c"
  9881 ;; Parameters:    Size  Location     Type
  9882 ;;		None
  9883 ;; Auto vars:     Size  Location     Type
  9884 ;;  res             2   45[BANK0 ] int 
  9885 ;; Return value:  Size  Location     Type
  9886 ;;                  1    wreg      void 
  9887 ;; Registers used:
  9888 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9889 ;; Tracked objects:
  9890 ;;		On entry : 0/0
  9891 ;;		On exit  : 0/0
  9892 ;;		Unchanged: 0/0
  9893 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9894 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9895 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9896 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9897 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9898 ;;Total ram usage:        4 bytes
  9899 ;; Hardware stack levels used:    1
  9900 ;; Hardware stack levels required when called:   10
  9901 ;; This function calls:
  9902 ;;		_lcdInst
  9903 ;;		_printf
  9904 ;;		_readADC
  9905 ;;		_readMAG
  9906 ;; This function is called by:
  9907 ;;		_Test
  9908 ;; This function uses a non-reentrant model
  9909 ;;
  9910                           
  9911                           	psect	text37
  9912  001C9A                     __ptext37:
  9913                           	opt stack 0
  9914  001C9A                     _sensorTest:
  9915                           	opt stack 19
  9916                           
  9917                           ;Test.c: 126: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
  9918                           
  9919                           ; BSR set to: 0
  9920                           ;incstack = 0
  9921  001C9A  0E01               	movlw	1
  9922  001C9C  ECDC  F024         	call	_lcdInst
  9923  001CA0  0E68               	movlw	104
  9924  001CA2  0100               	movlb	0	; () banked
  9925  001CA4  6FAB               	movwf	??_sensorTest& (0+255),b
  9926  001CA6  0EE4               	movlw	228
  9927  001CA8                     u7797:
  9928  001CA8  2EE8               	decfsz	wreg,f,c
  9929  001CAA  D7FE               	bra	u7797
  9930  001CAC  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9931  001CAE  D7FC               	bra	u7797
  9932  001CB0  F000               	nop	
  9933  001CB2  0E80               	movlw	128
  9934  001CB4  ECDC  F024         	call	_lcdInst
  9935                           
  9936                           ;Test.c: 127: printf("SENSORS");
  9937  001CB8  0EAE               	movlw	low STR_77
  9938  001CBA  0100               	movlb	0	; () banked
  9939  001CBC  6F8E               	movwf	printf@f& (0+255),b
  9940  001CBE  0EFF               	movlw	high STR_77
  9941  001CC0  0100               	movlb	0	; () banked
  9942  001CC2  6F8F               	movwf	(printf@f+1)& (0+255),b
  9943  001CC4  ECB8  F008         	call	_printf	;wreg free
  9944                           
  9945                           ;Test.c: 128: lcdInst(0b11000000);;
  9946  001CC8  0EC0               	movlw	192
  9947  001CCA  ECDC  F024         	call	_lcdInst
  9948                           
  9949                           ;Test.c: 129: printf("PUSH TO START");
  9950  001CCE  0E0B               	movlw	low STR_71
  9951  001CD0  0100               	movlb	0	; () banked
  9952  001CD2  6F8E               	movwf	printf@f& (0+255),b
  9953  001CD4  0EFF               	movlw	high STR_71
  9954  001CD6  0100               	movlb	0	; () banked
  9955  001CD8  6F8F               	movwf	(printf@f+1)& (0+255),b
  9956  001CDA  ECB8  F008         	call	_printf	;wreg free
  9957                           
  9958                           ;Test.c: 130: _delay((unsigned long)((100)*(32000000/4000.0)));
  9959  001CDE  0E05               	movlw	5
  9960  001CE0  0100               	movlb	0	; () banked
  9961  001CE2  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
  9962  001CE4  0E0F               	movlw	15
  9963  001CE6  0100               	movlb	0	; () banked
  9964  001CE8  6FAB               	movwf	??_sensorTest& (0+255),b
  9965  001CEA  0EF1               	movlw	241
  9966  001CEC                     u7807:
  9967  001CEC  2EE8               	decfsz	wreg,f,c
  9968  001CEE  D7FE               	bra	u7807
  9969  001CF0  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9970  001CF2  D7FC               	bra	u7807
  9971  001CF4  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
  9972  001CF6  D7FA               	bra	u7807
  9973  001CF8                     l1084:
  9974  001CF8  A281               	btfss	3969,1,c	;volatile
  9975  001CFA  D7FE               	goto	l1084
  9976  001CFC                     l1087:
  9977  001CFC  B281               	btfsc	3969,1,c	;volatile
  9978  001CFE  D7FE               	goto	l1087
  9979                           
  9980                           ;Test.c: 133: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
  9981  001D00  0E01               	movlw	1
  9982  001D02  ECDC  F024         	call	_lcdInst
  9983  001D06  0E68               	movlw	104
  9984  001D08  0100               	movlb	0	; () banked
  9985  001D0A  6FAB               	movwf	??_sensorTest& (0+255),b
  9986  001D0C  0EE4               	movlw	228
  9987  001D0E                     u7817:
  9988  001D0E  2EE8               	decfsz	wreg,f,c
  9989  001D10  D7FE               	bra	u7817
  9990  001D12  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9991  001D14  D7FC               	bra	u7817
  9992  001D16  F000               	nop	
  9993  001D18  0E80               	movlw	128
  9994  001D1A  ECDC  F024         	call	_lcdInst
  9995                           
  9996                           ;Test.c: 138: printf("TST: IR SNSR");
  9997  001D1E  0E35               	movlw	low STR_79
  9998  001D20  0100               	movlb	0	; () banked
  9999  001D22  6F8E               	movwf	printf@f& (0+255),b
 10000  001D24  0EFF               	movlw	high STR_79
 10001  001D26  0100               	movlb	0	; () banked
 10002  001D28  6F8F               	movwf	(printf@f+1)& (0+255),b
 10003  001D2A  ECB8  F008         	call	_printf	;wreg free
 10004                           
 10005                           ;Test.c: 139: _delay((unsigned long)((100)*(32000000/4000.0)));
 10006  001D2E  0E05               	movlw	5
 10007  001D30  0100               	movlb	0	; () banked
 10008  001D32  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 10009  001D34  0E0F               	movlw	15
 10010  001D36  0100               	movlb	0	; () banked
 10011  001D38  6FAB               	movwf	??_sensorTest& (0+255),b
 10012  001D3A  0EF1               	movlw	241
 10013  001D3C                     u7827:
 10014  001D3C  2EE8               	decfsz	wreg,f,c
 10015  001D3E  D7FE               	bra	u7827
 10016  001D40  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10017  001D42  D7FC               	bra	u7827
 10018  001D44  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 10019  001D46  D7FA               	bra	u7827
 10020                           
 10021                           ;Test.c: 140: LATCbits.LATC5 = 1;
 10022  001D48  8A8B               	bsf	3979,5,c	;volatile
 10023                           
 10024                           ;Test.c: 141: while(PORTBbits.RB1 == 0){
 10025  001D4A  D05C               	goto	l6794
 10026  001D4C                     l6776:
 10027                           
 10028                           ;Test.c: 142: readADC(0);
 10029  001D4C  0E00               	movlw	0
 10030  001D4E  ECE3  F023         	call	_readADC
 10031                           
 10032                           ;Test.c: 143: int res = ADRESH<<8 | ADRESL;
 10033  001D52  50C3               	movf	4035,w,c	;volatile
 10034  001D54  CFC4 F0AB          	movff	4036,??_sensorTest	;volatile
 10035  001D58  0100               	movlb	0	; () banked
 10036  001D5A  6BAC               	clrf	(??_sensorTest+1)& (0+255),b
 10037  001D5C  C0AB  F0AC         	movff	??_sensorTest,??_sensorTest+1
 10038  001D60  0100               	movlb	0	; () banked
 10039  001D62  6BAB               	clrf	??_sensorTest& (0+255),b
 10040  001D64  0100               	movlb	0	; () banked
 10041  001D66  11AB               	iorwf	??_sensorTest& (0+255),w,b
 10042  001D68  0100               	movlb	0	; () banked
 10043  001D6A  6FAD               	movwf	sensorTest@res& (0+255),b
 10044  001D6C  0100               	movlb	0	; () banked
 10045  001D6E  51AC               	movf	(??_sensorTest+1)& (0+255),w,b
 10046  001D70  0100               	movlb	0	; () banked
 10047  001D72  6FAE               	movwf	(sensorTest@res+1)& (0+255),b
 10048                           
 10049                           ; BSR set to: 0
 10050                           ;Test.c: 144: IR_signal = (res > 1000) ? 1 : 0;
 10051  001D74  0100               	movlb	0	; () banked
 10052  001D76  BFAE               	btfsc	(sensorTest@res+1)& (0+255),7,b
 10053  001D78  D00A               	goto	u5200
 10054  001D7A  0EE9               	movlw	233
 10055  001D7C  0100               	movlb	0	; () banked
 10056  001D7E  5DAD               	subwf	sensorTest@res& (0+255),w,b
 10057  001D80  0E03               	movlw	3
 10058  001D82  0100               	movlb	0	; () banked
 10059  001D84  59AE               	subwfb	(sensorTest@res+1)& (0+255),w,b
 10060  001D86  A0D8               	btfss	status,0,c
 10061  001D88  D002               	goto	u5200
 10062  001D8A  0E01               	movlw	1
 10063  001D8C  D001               	goto	u5210
 10064  001D8E                     u5200:
 10065  001D8E  0E00               	movlw	0
 10066  001D90                     u5210:
 10067  001D90  0100               	movlb	0	; () banked
 10068  001D92  6FDA               	movwf	_IR_signal& (0+255),b
 10069  001D94  6BDB               	clrf	(_IR_signal+1)& (0+255),b
 10070                           
 10071                           ;Test.c: 146: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10072  001D96  0E01               	movlw	1
 10073  001D98  ECDC  F024         	call	_lcdInst
 10074  001D9C  0E68               	movlw	104
 10075  001D9E  0100               	movlb	0	; () banked
 10076  001DA0  6FAB               	movwf	??_sensorTest& (0+255),b
 10077  001DA2  0EE4               	movlw	228
 10078  001DA4                     u7837:
 10079  001DA4  2EE8               	decfsz	wreg,f,c
 10080  001DA6  D7FE               	bra	u7837
 10081  001DA8  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10082  001DAA  D7FC               	bra	u7837
 10083  001DAC  F000               	nop	
 10084  001DAE  0E80               	movlw	128
 10085  001DB0  ECDC  F024         	call	_lcdInst
 10086                           
 10087                           ;Test.c: 147: printf("IR_signal: %d ", IR_signal);
 10088  001DB4  0E5A               	movlw	low STR_80
 10089  001DB6  0100               	movlb	0	; () banked
 10090  001DB8  6F8E               	movwf	printf@f& (0+255),b
 10091  001DBA  0EFE               	movlw	high STR_80
 10092  001DBC  0100               	movlb	0	; () banked
 10093  001DBE  6F8F               	movwf	(printf@f+1)& (0+255),b
 10094  001DC0  C0DA  F090         	movff	_IR_signal,?_printf+2
 10095  001DC4  C0DB  F091         	movff	_IR_signal+1,?_printf+3
 10096  001DC8  ECB8  F008         	call	_printf	;wreg free
 10097                           
 10098                           ;Test.c: 148: lcdInst(0b11000000);;
 10099  001DCC  0EC0               	movlw	192
 10100  001DCE  ECDC  F024         	call	_lcdInst
 10101                           
 10102                           ;Test.c: 149: printf("%d", res);
 10103  001DD2  0E16               	movlw	low (STR_27+14)
 10104  001DD4  0100               	movlb	0	; () banked
 10105  001DD6  6F8E               	movwf	printf@f& (0+255),b
 10106  001DD8  0EFE               	movlw	high (STR_27+14)
 10107  001DDA  0100               	movlb	0	; () banked
 10108  001DDC  6F8F               	movwf	(printf@f+1)& (0+255),b
 10109  001DDE  C0AD  F090         	movff	sensorTest@res,?_printf+2
 10110  001DE2  C0AE  F091         	movff	sensorTest@res+1,?_printf+3
 10111  001DE6  ECB8  F008         	call	_printf	;wreg free
 10112                           
 10113                           ;Test.c: 150: _delay((unsigned long)((100)*(32000000/4000.0)));
 10114  001DEA  0E05               	movlw	5
 10115  001DEC  0100               	movlb	0	; () banked
 10116  001DEE  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 10117  001DF0  0E0F               	movlw	15
 10118  001DF2  0100               	movlb	0	; () banked
 10119  001DF4  6FAB               	movwf	??_sensorTest& (0+255),b
 10120  001DF6  0EF1               	movlw	241
 10121  001DF8                     u7847:
 10122  001DF8  2EE8               	decfsz	wreg,f,c
 10123  001DFA  D7FE               	bra	u7847
 10124  001DFC  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10125  001DFE  D7FC               	bra	u7847
 10126  001E00  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 10127  001E02  D7FA               	bra	u7847
 10128  001E04                     l6794:
 10129  001E04  A281               	btfss	3969,1,c	;volatile
 10130  001E06  D7A2               	goto	l6776
 10131                           
 10132                           ;Test.c: 151: }
 10133                           ;Test.c: 152: LATCbits.LATC5 = 0;
 10134  001E08  9A8B               	bcf	3979,5,c	;volatile
 10135                           
 10136                           ;Test.c: 159: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10137  001E0A  0E01               	movlw	1
 10138  001E0C  ECDC  F024         	call	_lcdInst
 10139  001E10  0E68               	movlw	104
 10140  001E12  0100               	movlb	0	; () banked
 10141  001E14  6FAB               	movwf	??_sensorTest& (0+255),b
 10142  001E16  0EE4               	movlw	228
 10143  001E18                     u7857:
 10144  001E18  2EE8               	decfsz	wreg,f,c
 10145  001E1A  D7FE               	bra	u7857
 10146  001E1C  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10147  001E1E  D7FC               	bra	u7857
 10148  001E20  F000               	nop	
 10149  001E22  0E80               	movlw	128
 10150  001E24  ECDC  F024         	call	_lcdInst
 10151                           
 10152                           ;Test.c: 160: printf("TST: MAGNETISM");
 10153  001E28  0E87               	movlw	low STR_82
 10154  001E2A  0100               	movlb	0	; () banked
 10155  001E2C  6F8E               	movwf	printf@f& (0+255),b
 10156  001E2E  0EFE               	movlw	high STR_82
 10157  001E30  0100               	movlb	0	; () banked
 10158  001E32  6F8F               	movwf	(printf@f+1)& (0+255),b
 10159  001E34  ECB8  F008         	call	_printf	;wreg free
 10160                           
 10161                           ;Test.c: 161: _delay((unsigned long)((100)*(32000000/4000.0)));
 10162  001E38  0E05               	movlw	5
 10163  001E3A  0100               	movlb	0	; () banked
 10164  001E3C  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 10165  001E3E  0E0F               	movlw	15
 10166  001E40  0100               	movlb	0	; () banked
 10167  001E42  6FAB               	movwf	??_sensorTest& (0+255),b
 10168  001E44  0EF1               	movlw	241
 10169  001E46                     u7867:
 10170  001E46  2EE8               	decfsz	wreg,f,c
 10171  001E48  D7FE               	bra	u7867
 10172  001E4A  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10173  001E4C  D7FC               	bra	u7867
 10174  001E4E  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 10175  001E50  D7FA               	bra	u7867
 10176                           
 10177                           ;Test.c: 162: while(PORTBbits.RB1 == 0){
 10178  001E52  D021               	goto	l6812
 10179  001E54                     l6806:
 10180                           
 10181                           ;Test.c: 163: readMAG();
 10182  001E54  ECA6  F021         	call	_readMAG	;wreg free
 10183                           
 10184                           ;Test.c: 164: lcdInst(0b10000000);;
 10185  001E58  0E80               	movlw	128
 10186  001E5A  ECDC  F024         	call	_lcdInst
 10187                           
 10188                           ;Test.c: 165: lcdInst(0b11000000);;
 10189  001E5E  0EC0               	movlw	192
 10190  001E60  ECDC  F024         	call	_lcdInst
 10191                           
 10192                           ;Test.c: 166: printf("MAG_signal: %d ", MAG_signal);
 10193  001E64  0E2A               	movlw	low STR_83
 10194  001E66  0100               	movlb	0	; () banked
 10195  001E68  6F8E               	movwf	printf@f& (0+255),b
 10196  001E6A  0EFE               	movlw	high STR_83
 10197  001E6C  0100               	movlb	0	; () banked
 10198  001E6E  6F8F               	movwf	(printf@f+1)& (0+255),b
 10199  001E70  C0DC  F090         	movff	_MAG_signal,?_printf+2
 10200  001E74  C0DD  F091         	movff	_MAG_signal+1,?_printf+3
 10201  001E78  ECB8  F008         	call	_printf	;wreg free
 10202                           
 10203                           ;Test.c: 167: _delay((unsigned long)((100)*(32000000/4000.0)));
 10204  001E7C  0E05               	movlw	5
 10205  001E7E  0100               	movlb	0	; () banked
 10206  001E80  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 10207  001E82  0E0F               	movlw	15
 10208  001E84  0100               	movlb	0	; () banked
 10209  001E86  6FAB               	movwf	??_sensorTest& (0+255),b
 10210  001E88  0EF1               	movlw	241
 10211  001E8A                     u7877:
 10212  001E8A  2EE8               	decfsz	wreg,f,c
 10213  001E8C  D7FE               	bra	u7877
 10214  001E8E  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10215  001E90  D7FC               	bra	u7877
 10216  001E92  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 10217  001E94  D7FA               	bra	u7877
 10218  001E96                     l6812:
 10219  001E96  A281               	btfss	3969,1,c	;volatile
 10220  001E98  D7DD               	goto	l6806
 10221                           
 10222                           ;Test.c: 168: }
 10223                           ;Test.c: 173: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10224  001E9A  0E01               	movlw	1
 10225  001E9C  ECDC  F024         	call	_lcdInst
 10226  001EA0  0E68               	movlw	104
 10227  001EA2  0100               	movlb	0	; () banked
 10228  001EA4  6FAB               	movwf	??_sensorTest& (0+255),b
 10229  001EA6  0EE4               	movlw	228
 10230  001EA8                     u7887:
 10231  001EA8  2EE8               	decfsz	wreg,f,c
 10232  001EAA  D7FE               	bra	u7887
 10233  001EAC  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10234  001EAE  D7FC               	bra	u7887
 10235  001EB0  F000               	nop	
 10236  001EB2  0E80               	movlw	128
 10237  001EB4  ECDC  F024         	call	_lcdInst
 10238                           
 10239                           ;Test.c: 174: printf("TST: COND");
 10240  001EB8  0E87               	movlw	low STR_84
 10241  001EBA  0100               	movlb	0	; () banked
 10242  001EBC  6F8E               	movwf	printf@f& (0+255),b
 10243  001EBE  0EFF               	movlw	high STR_84
 10244  001EC0  0100               	movlb	0	; () banked
 10245  001EC2  6F8F               	movwf	(printf@f+1)& (0+255),b
 10246  001EC4  ECB8  F008         	call	_printf	;wreg free
 10247                           
 10248                           ;Test.c: 175: _delay((unsigned long)((100)*(32000000/4000.0)));
 10249  001EC8  0E05               	movlw	5
 10250  001ECA  0100               	movlb	0	; () banked
 10251  001ECC  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 10252  001ECE  0E0F               	movlw	15
 10253  001ED0  0100               	movlb	0	; () banked
 10254  001ED2  6FAB               	movwf	??_sensorTest& (0+255),b
 10255  001ED4  0EF1               	movlw	241
 10256  001ED6                     u7897:
 10257  001ED6  2EE8               	decfsz	wreg,f,c
 10258  001ED8  D7FE               	bra	u7897
 10259  001EDA  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10260  001EDC  D7FC               	bra	u7897
 10261  001EDE  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 10262  001EE0  D7FA               	bra	u7897
 10263  001EE2                     l6824:
 10264                           
 10265                           ;Test.c: 177: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10266  001EE2  0E01               	movlw	1
 10267  001EE4  ECDC  F024         	call	_lcdInst
 10268  001EE8  0E68               	movlw	104
 10269  001EEA  0100               	movlb	0	; () banked
 10270  001EEC  6FAB               	movwf	??_sensorTest& (0+255),b
 10271  001EEE  0EE4               	movlw	228
 10272  001EF0                     u7907:
 10273  001EF0  2EE8               	decfsz	wreg,f,c
 10274  001EF2  D7FE               	bra	u7907
 10275  001EF4  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10276  001EF6  D7FC               	bra	u7907
 10277  001EF8  F000               	nop	
 10278  001EFA  0E80               	movlw	128
 10279  001EFC  ECDC  F024         	call	_lcdInst
 10280                           
 10281                           ;Test.c: 178: printf("TST: COND");
 10282  001F00  0E87               	movlw	low STR_84
 10283  001F02  0100               	movlb	0	; () banked
 10284  001F04  6F8E               	movwf	printf@f& (0+255),b
 10285  001F06  0EFF               	movlw	high STR_84
 10286  001F08  0100               	movlb	0	; () banked
 10287  001F0A  6F8F               	movwf	(printf@f+1)& (0+255),b
 10288  001F0C  ECB8  F008         	call	_printf	;wreg free
 10289                           
 10290                           ;Test.c: 179: while(PORTBbits.RB1 == 0){
 10291  001F10  D01B               	goto	l6836
 10292  001F12                     l6832:
 10293                           
 10294                           ;Test.c: 183: lcdInst(0b10000000);;lcdInst(0b11000000);;
 10295  001F12  0E80               	movlw	128
 10296  001F14  ECDC  F024         	call	_lcdInst
 10297  001F18  0EC0               	movlw	192
 10298  001F1A  ECDC  F024         	call	_lcdInst
 10299                           
 10300                           ;Test.c: 184: printf("COND: %d", PORTAbits.RA2);
 10301  001F1E  0EA5               	movlw	low STR_86
 10302  001F20  0100               	movlb	0	; () banked
 10303  001F22  6F8E               	movwf	printf@f& (0+255),b
 10304  001F24  0EFF               	movlw	high STR_86
 10305  001F26  0100               	movlb	0	; () banked
 10306  001F28  6F8F               	movwf	(printf@f+1)& (0+255),b
 10307  001F2A  A480               	btfss	3968,2,c	;volatile
 10308  001F2C  D004               	goto	u5240
 10309  001F2E  0100               	movlb	0	; () banked
 10310  001F30  6BAB               	clrf	??_sensorTest& (0+255),b
 10311  001F32  2BAB               	incf	??_sensorTest& (0+255),f,b
 10312  001F34  D002               	goto	u5248
 10313  001F36                     u5240:
 10314  001F36  0100               	movlb	0	; () banked
 10315  001F38  6BAB               	clrf	??_sensorTest& (0+255),b
 10316  001F3A                     u5248:
 10317  001F3A  0100               	movlb	0	; () banked
 10318  001F3C  51AB               	movf	??_sensorTest& (0+255),w,b
 10319  001F3E  0100               	movlb	0	; () banked
 10320  001F40  6F90               	movwf	(?_printf+2)& (0+255),b
 10321  001F42  6B91               	clrf	(?_printf+3)& (0+255),b
 10322  001F44  ECB8  F008         	call	_printf	;wreg free
 10323  001F48                     l6836:
 10324  001F48  A281               	btfss	3969,1,c	;volatile
 10325  001F4A  D7E3               	goto	l6832
 10326                           
 10327                           ;Test.c: 185: }
 10328                           ;Test.c: 186: if(PORTB >> 4 == 0b1111){
 10329  001F4C  3881               	swapf	3969,w,c	;volatile
 10330  001F4E  0B0F               	andlw	15
 10331  001F50  0A0F               	xorlw	15
 10332  001F52  B4D8               	btfsc	status,2,c
 10333  001F54  0012               	return	
 10334                           
 10335                           ;Test.c: 189: else{
 10336                           ;Test.c: 190: LATAbits.LATA3 = 1;
 10337                           
 10338                           ;Test.c: 188: }
 10339                           
 10340                           ;Test.c: 187: break;
 10341  001F56  8689               	bsf	3977,3,c	;volatile
 10342                           
 10343                           ;Test.c: 191: while(PORTBbits.RB1 == 1){
 10344  001F58  D01B               	goto	l6848
 10345  001F5A                     l6844:
 10346                           
 10347                           ;Test.c: 193: lcdInst(0b10000000);;lcdInst(0b11000000);;
 10348  001F5A  0E80               	movlw	128
 10349  001F5C  ECDC  F024         	call	_lcdInst
 10350  001F60  0EC0               	movlw	192
 10351  001F62  ECDC  F024         	call	_lcdInst
 10352                           
 10353                           ;Test.c: 194: printf("COND: %d", PORTAbits.RA2);
 10354  001F66  0EA5               	movlw	low STR_86
 10355  001F68  0100               	movlb	0	; () banked
 10356  001F6A  6F8E               	movwf	printf@f& (0+255),b
 10357  001F6C  0EFF               	movlw	high STR_86
 10358  001F6E  0100               	movlb	0	; () banked
 10359  001F70  6F8F               	movwf	(printf@f+1)& (0+255),b
 10360  001F72  A480               	btfss	3968,2,c	;volatile
 10361  001F74  D004               	goto	u5270
 10362  001F76  0100               	movlb	0	; () banked
 10363  001F78  6BAB               	clrf	??_sensorTest& (0+255),b
 10364  001F7A  2BAB               	incf	??_sensorTest& (0+255),f,b
 10365  001F7C  D002               	goto	u5278
 10366  001F7E                     u5270:
 10367  001F7E  0100               	movlb	0	; () banked
 10368  001F80  6BAB               	clrf	??_sensorTest& (0+255),b
 10369  001F82                     u5278:
 10370  001F82  0100               	movlb	0	; () banked
 10371  001F84  51AB               	movf	??_sensorTest& (0+255),w,b
 10372  001F86  0100               	movlb	0	; () banked
 10373  001F88  6F90               	movwf	(?_printf+2)& (0+255),b
 10374  001F8A  6B91               	clrf	(?_printf+3)& (0+255),b
 10375  001F8C  ECB8  F008         	call	_printf	;wreg free
 10376  001F90                     l6848:
 10377  001F90  B281               	btfsc	3969,1,c	;volatile
 10378  001F92  D7E3               	goto	l6844
 10379                           
 10380                           ;Test.c: 195: }
 10381                           ;Test.c: 196: LATAbits.LATA3 = ~1;
 10382  001F94  9689               	bcf	3977,3,c	;volatile
 10383  001F96  D7A5               	goto	l6824
 10384  001F98                     __end_of_sensorTest:
 10385                           	opt stack 0
 10386                           tblptru	equ	0xFF8
 10387                           tblptrh	equ	0xFF7
 10388                           tblptrl	equ	0xFF6
 10389                           tablat	equ	0xFF5
 10390                           prodh	equ	0xFF4
 10391                           prodl	equ	0xFF3
 10392                           intcon	equ	0xFF2
 10393                           intcon2	equ	0xFF1
 10394                           intcon3	equ	0xFF0
 10395                           postinc0	equ	0xFEE
 10396                           wreg	equ	0xFE8
 10397                           postdec1	equ	0xFE5
 10398                           fsr1l	equ	0xFE1
 10399                           indf2	equ	0xFDF
 10400                           postinc2	equ	0xFDE
 10401                           postdec2	equ	0xFDD
 10402                           fsr2h	equ	0xFDA
 10403                           fsr2l	equ	0xFD9
 10404                           status	equ	0xFD8
 10405                           
 10406 ;; *************** function _readMAG *****************
 10407 ;; Defined at:
 10408 ;;		line 29 in file "ADCFunctionality.c"
 10409 ;; Parameters:    Size  Location     Type
 10410 ;;		None
 10411 ;; Auto vars:     Size  Location     Type
 10412 ;;  res             2    4[BANK0 ] int 
 10413 ;; Return value:  Size  Location     Type
 10414 ;;                  1    wreg      void 
 10415 ;; Registers used:
 10416 ;;		wreg, status,2, status,0, cstack
 10417 ;; Tracked objects:
 10418 ;;		On entry : 0/0
 10419 ;;		On exit  : 0/0
 10420 ;;		Unchanged: 0/0
 10421 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10422 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10423 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10424 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10425 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10426 ;;Total ram usage:        4 bytes
 10427 ;; Hardware stack levels used:    1
 10428 ;; Hardware stack levels required when called:    8
 10429 ;; This function calls:
 10430 ;;		_readADC
 10431 ;; This function is called by:
 10432 ;;		_getMAG
 10433 ;;		_sensorTest
 10434 ;; This function uses a non-reentrant model
 10435 ;;
 10436                           
 10437                           	psect	text38
 10438  00434C                     __ptext38:
 10439                           	opt stack 0
 10440  00434C                     _readMAG:
 10441                           	opt stack 19
 10442                           
 10443                           ;ADCFunctionality.c: 30: readADC(1);
 10444                           
 10445                           ;incstack = 0
 10446  00434C  0E01               	movlw	1
 10447  00434E  ECE3  F023         	call	_readADC
 10448                           
 10449                           ;ADCFunctionality.c: 31: int res = ADRESH<<8 | ADRESL;
 10450  004352  50C3               	movf	4035,w,c	;volatile
 10451  004354  CFC4 F082          	movff	4036,??_readMAG	;volatile
 10452  004358  0100               	movlb	0	; () banked
 10453  00435A  6B83               	clrf	(??_readMAG+1)& (0+255),b
 10454  00435C  C082  F083         	movff	??_readMAG,??_readMAG+1
 10455  004360  0100               	movlb	0	; () banked
 10456  004362  6B82               	clrf	??_readMAG& (0+255),b
 10457  004364  0100               	movlb	0	; () banked
 10458  004366  1182               	iorwf	??_readMAG& (0+255),w,b
 10459  004368  0100               	movlb	0	; () banked
 10460  00436A  6F84               	movwf	readMAG@res& (0+255),b
 10461  00436C  0100               	movlb	0	; () banked
 10462  00436E  5183               	movf	(??_readMAG+1)& (0+255),w,b
 10463  004370  0100               	movlb	0	; () banked
 10464  004372  6F85               	movwf	(readMAG@res+1)& (0+255),b
 10465                           
 10466                           ; BSR set to: 0
 10467                           ;ADCFunctionality.c: 32: MAG_signal = (res < 150) ? 1 : 0;
 10468  004374  0100               	movlb	0	; () banked
 10469  004376  BF85               	btfsc	(readMAG@res+1)& (0+255),7,b
 10470  004378  D008               	goto	u3951
 10471  00437A  0100               	movlb	0	; () banked
 10472  00437C  5185               	movf	(readMAG@res+1)& (0+255),w,b
 10473  00437E  E107               	bnz	u3950
 10474  004380  0E96               	movlw	150
 10475  004382  0100               	movlb	0	; () banked
 10476  004384  5D84               	subwf	readMAG@res& (0+255),w,b
 10477  004386  B0D8               	btfsc	status,0,c
 10478  004388  D002               	goto	u3950
 10479  00438A                     u3951:
 10480  00438A  0E01               	movlw	1
 10481  00438C  D001               	goto	u3960
 10482  00438E                     u3950:
 10483  00438E  0E00               	movlw	0
 10484  004390                     u3960:
 10485  004390  0100               	movlb	0	; () banked
 10486  004392  6FDC               	movwf	_MAG_signal& (0+255),b
 10487  004394  6BDD               	clrf	(_MAG_signal+1)& (0+255),b
 10488                           
 10489                           ; BSR set to: 0
 10490  004396  0012               	return		;funcret
 10491  004398                     __end_of_readMAG:
 10492                           	opt stack 0
 10493                           tblptru	equ	0xFF8
 10494                           tblptrh	equ	0xFF7
 10495                           tblptrl	equ	0xFF6
 10496                           tablat	equ	0xFF5
 10497                           prodh	equ	0xFF4
 10498                           prodl	equ	0xFF3
 10499                           intcon	equ	0xFF2
 10500                           intcon2	equ	0xFF1
 10501                           intcon3	equ	0xFF0
 10502                           postinc0	equ	0xFEE
 10503                           wreg	equ	0xFE8
 10504                           postdec1	equ	0xFE5
 10505                           fsr1l	equ	0xFE1
 10506                           indf2	equ	0xFDF
 10507                           postinc2	equ	0xFDE
 10508                           postdec2	equ	0xFDD
 10509                           fsr2h	equ	0xFDA
 10510                           fsr2l	equ	0xFD9
 10511                           status	equ	0xFD8
 10512                           
 10513 ;; *************** function _readADC *****************
 10514 ;; Defined at:
 10515 ;;		line 15 in file "ADCFunctionality.c"
 10516 ;; Parameters:    Size  Location     Type
 10517 ;;  channel         1    wreg     unsigned char 
 10518 ;; Auto vars:     Size  Location     Type
 10519 ;;  channel         1    1[BANK0 ] unsigned char 
 10520 ;; Return value:  Size  Location     Type
 10521 ;;                  1    wreg      void 
 10522 ;; Registers used:
 10523 ;;		wreg, status,2, status,0, cstack
 10524 ;; Tracked objects:
 10525 ;;		On entry : 0/0
 10526 ;;		On exit  : 0/0
 10527 ;;		Unchanged: 0/0
 10528 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10529 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10530 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10531 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10532 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10533 ;;Total ram usage:        2 bytes
 10534 ;; Hardware stack levels used:    1
 10535 ;; Hardware stack levels required when called:    7
 10536 ;; This function calls:
 10537 ;;		Nothing
 10538 ;; This function is called by:
 10539 ;;		_readIR
 10540 ;;		_readMAG
 10541 ;;		_sensorTest
 10542 ;; This function uses a non-reentrant model
 10543 ;;
 10544                           
 10545                           	psect	text39
 10546  0047C6                     __ptext39:
 10547                           	opt stack 0
 10548  0047C6                     _readADC:
 10549                           	opt stack 19
 10550                           
 10551                           ; BSR set to: 0
 10552                           ;incstack = 0
 10553                           ;readADC@channel stored from wreg
 10554  0047C6  0100               	movlb	0	; () banked
 10555  0047C8  6F81               	movwf	readADC@channel& (0+255),b
 10556                           
 10557                           ;ADCFunctionality.c: 17: ADCON0 = channel << 2;
 10558  0047CA  0100               	movlb	0	; () banked
 10559  0047CC  4581               	rlncf	readADC@channel& (0+255),w,b
 10560  0047CE  46E8               	rlncf	wreg,f,c
 10561  0047D0  0BFC               	andlw	252
 10562  0047D2  6EC2               	movwf	4034,c	;volatile
 10563                           
 10564                           ; BSR set to: 0
 10565                           ;ADCFunctionality.c: 18: ADCON0bits.ADON = 1;
 10566  0047D4  80C2               	bsf	4034,0,c	;volatile
 10567                           
 10568                           ; BSR set to: 0
 10569                           ;ADCFunctionality.c: 19: ADCON0bits.GO = 1;
 10570  0047D6  82C2               	bsf	4034,1,c	;volatile
 10571                           
 10572                           ;ADCFunctionality.c: 20: while(ADCON0bits.GO_NOT_DONE){_delay((unsigned long)((5)*(32000
      +                          000/4000.0)));}
 10573  0047D8  D009               	goto	l5404
 10574  0047DA                     l5402:
 10575  0047DA  0E34               	movlw	52
 10576  0047DC  0100               	movlb	0	; () banked
 10577  0047DE  6F80               	movwf	??_readADC& (0+255),b
 10578  0047E0  0EF1               	movlw	241
 10579  0047E2                     u7917:
 10580  0047E2  2EE8               	decfsz	wreg,f,c
 10581  0047E4  D7FE               	bra	u7917
 10582  0047E6  2F80               	decfsz	??_readADC& (0+255),f,b
 10583  0047E8  D7FC               	bra	u7917
 10584  0047EA  D000               	nop2	
 10585  0047EC                     l5404:
 10586  0047EC  A2C2               	btfss	4034,1,c	;volatile
 10587  0047EE  0012               	return	
 10588  0047F0  D7F4               	goto	l5402
 10589  0047F2                     __end_of_readADC:
 10590                           	opt stack 0
 10591                           tblptru	equ	0xFF8
 10592                           tblptrh	equ	0xFF7
 10593                           tblptrl	equ	0xFF6
 10594                           tablat	equ	0xFF5
 10595                           prodh	equ	0xFF4
 10596                           prodl	equ	0xFF3
 10597                           intcon	equ	0xFF2
 10598                           intcon2	equ	0xFF1
 10599                           intcon3	equ	0xFF0
 10600                           postinc0	equ	0xFEE
 10601                           wreg	equ	0xFE8
 10602                           postdec1	equ	0xFE5
 10603                           fsr1l	equ	0xFE1
 10604                           indf2	equ	0xFDF
 10605                           postinc2	equ	0xFDE
 10606                           postdec2	equ	0xFDD
 10607                           fsr2h	equ	0xFDA
 10608                           fsr2l	equ	0xFD9
 10609                           status	equ	0xFD8
 10610                           
 10611 ;; *************** function _algorithmTest *****************
 10612 ;; Defined at:
 10613 ;;		line 80 in file "Test.c"
 10614 ;; Parameters:    Size  Location     Type
 10615 ;;		None
 10616 ;; Auto vars:     Size  Location     Type
 10617 ;;		None
 10618 ;; Return value:  Size  Location     Type
 10619 ;;                  1    wreg      void 
 10620 ;; Registers used:
 10621 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10622 ;; Tracked objects:
 10623 ;;		On entry : 0/0
 10624 ;;		On exit  : 0/0
 10625 ;;		Unchanged: 0/0
 10626 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10627 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10628 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10629 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10630 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10631 ;;Total ram usage:        2 bytes
 10632 ;; Hardware stack levels used:    1
 10633 ;; Hardware stack levels required when called:   10
 10634 ;; This function calls:
 10635 ;;		_lcdInst
 10636 ;;		_printf
 10637 ;; This function is called by:
 10638 ;;		_Test
 10639 ;; This function uses a non-reentrant model
 10640 ;;
 10641                           
 10642                           	psect	text40
 10643  0035AA                     __ptext40:
 10644                           	opt stack 0
 10645  0035AA                     _algorithmTest:
 10646                           	opt stack 19
 10647                           
 10648                           ;Test.c: 82: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 10649                           
 10650                           ;incstack = 0
 10651  0035AA  0E01               	movlw	1
 10652  0035AC  ECDC  F024         	call	_lcdInst
 10653  0035B0  0E68               	movlw	104
 10654  0035B2  0100               	movlb	0	; () banked
 10655  0035B4  6FAB               	movwf	??_algorithmTest& (0+255),b
 10656  0035B6  0EE4               	movlw	228
 10657  0035B8                     u7927:
 10658  0035B8  2EE8               	decfsz	wreg,f,c
 10659  0035BA  D7FE               	bra	u7927
 10660  0035BC  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 10661  0035BE  D7FC               	bra	u7927
 10662  0035C0  F000               	nop	
 10663  0035C2  0E80               	movlw	128
 10664  0035C4  ECDC  F024         	call	_lcdInst
 10665                           
 10666                           ;Test.c: 83: printf("ALGORITHM TEST");
 10667  0035C8  0ED2               	movlw	low STR_70
 10668  0035CA  0100               	movlb	0	; () banked
 10669  0035CC  6F8E               	movwf	printf@f& (0+255),b
 10670  0035CE  0EFE               	movlw	high STR_70
 10671  0035D0  0100               	movlb	0	; () banked
 10672  0035D2  6F8F               	movwf	(printf@f+1)& (0+255),b
 10673  0035D4  ECB8  F008         	call	_printf	;wreg free
 10674                           
 10675                           ;Test.c: 84: lcdInst(0b11000000);;
 10676  0035D8  0EC0               	movlw	192
 10677  0035DA  ECDC  F024         	call	_lcdInst
 10678                           
 10679                           ;Test.c: 85: printf("PUSH TO START");
 10680  0035DE  0E0B               	movlw	low STR_71
 10681  0035E0  0100               	movlb	0	; () banked
 10682  0035E2  6F8E               	movwf	printf@f& (0+255),b
 10683  0035E4  0EFF               	movlw	high STR_71
 10684  0035E6  0100               	movlb	0	; () banked
 10685  0035E8  6F8F               	movwf	(printf@f+1)& (0+255),b
 10686  0035EA  ECB8  F008         	call	_printf	;wreg free
 10687                           
 10688                           ;Test.c: 86: _delay((unsigned long)((100)*(32000000/4000.0)));
 10689  0035EE  0E05               	movlw	5
 10690  0035F0  0100               	movlb	0	; () banked
 10691  0035F2  6FAC               	movwf	(??_algorithmTest+1)& (0+255),b
 10692  0035F4  0E0F               	movlw	15
 10693  0035F6  0100               	movlb	0	; () banked
 10694  0035F8  6FAB               	movwf	??_algorithmTest& (0+255),b
 10695  0035FA  0EF1               	movlw	241
 10696  0035FC                     u7937:
 10697  0035FC  2EE8               	decfsz	wreg,f,c
 10698  0035FE  D7FE               	bra	u7937
 10699  003600  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 10700  003602  D7FC               	bra	u7937
 10701  003604  2FAC               	decfsz	(??_algorithmTest+1)& (0+255),f,b
 10702  003606  D7FA               	bra	u7937
 10703  003608                     l1075:
 10704  003608  A281               	btfss	3969,1,c	;volatile
 10705  00360A  D7FE               	goto	l1075
 10706  00360C                     l1078:
 10707  00360C  B281               	btfsc	3969,1,c	;volatile
 10708  00360E  D7FE               	goto	l1078
 10709                           
 10710                           ;Test.c: 89: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 10711  003610  0E01               	movlw	1
 10712  003612  ECDC  F024         	call	_lcdInst
 10713  003616  0E68               	movlw	104
 10714  003618  0100               	movlb	0	; () banked
 10715  00361A  6FAB               	movwf	??_algorithmTest& (0+255),b
 10716  00361C  0EE4               	movlw	228
 10717  00361E                     u7947:
 10718  00361E  2EE8               	decfsz	wreg,f,c
 10719  003620  D7FE               	bra	u7947
 10720  003622  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 10721  003624  D7FC               	bra	u7947
 10722  003626  F000               	nop	
 10723  003628  0E80               	movlw	128
 10724  00362A  ECDC  F024         	call	_lcdInst
 10725                           
 10726                           ;Test.c: 94: printf("ALG1: 9 POPNOTAB");
 10727  00362E  0E5F               	movlw	low STR_72
 10728  003630  0100               	movlb	0	; () banked
 10729  003632  6F8E               	movwf	printf@f& (0+255),b
 10730  003634  0EFC               	movlw	high STR_72
 10731  003636  0100               	movlb	0	; () banked
 10732  003638  6F8F               	movwf	(printf@f+1)& (0+255),b
 10733  00363A  ECB8  F008         	call	_printf	;wreg free
 10734                           
 10735                           ;Test.c: 101: printf("ALG2: 12 CANS");
 10736  00363E  0EEF               	movlw	low STR_73
 10737  003640  0100               	movlb	0	; () banked
 10738  003642  6F8E               	movwf	printf@f& (0+255),b
 10739  003644  0EFE               	movlw	high STR_73
 10740  003646  0100               	movlb	0	; () banked
 10741  003648  6F8F               	movwf	(printf@f+1)& (0+255),b
 10742  00364A  ECB8  F008         	call	_printf	;wreg free
 10743                           
 10744                           ;Test.c: 110: printf("ALG3: 1 CAN");
 10745  00364E  0E4F               	movlw	low STR_74
 10746  003650  0100               	movlb	0	; () banked
 10747  003652  6F8E               	movwf	printf@f& (0+255),b
 10748  003654  0EFF               	movlw	high STR_74
 10749  003656  0100               	movlb	0	; () banked
 10750  003658  6F8F               	movwf	(printf@f+1)& (0+255),b
 10751  00365A  ECB8  F008         	call	_printf	;wreg free
 10752                           
 10753                           ;Test.c: 116: printf("ALG4: ALL CANS");
 10754  00365E  0EB4               	movlw	low STR_75
 10755  003660  0100               	movlb	0	; () banked
 10756  003662  6F8E               	movwf	printf@f& (0+255),b
 10757  003664  0EFE               	movlw	high STR_75
 10758  003666  0100               	movlb	0	; () banked
 10759  003668  6F8F               	movwf	(printf@f+1)& (0+255),b
 10760  00366A  ECB8  F008         	call	_printf	;wreg free
 10761                           
 10762                           ;Test.c: 121: printf("ALG5: NO CANS");
 10763  00366E  0EFD               	movlw	low STR_76
 10764  003670  0100               	movlb	0	; () banked
 10765  003672  6F8E               	movwf	printf@f& (0+255),b
 10766  003674  0EFE               	movlw	high STR_76
 10767  003676  0100               	movlb	0	; () banked
 10768  003678  6F8F               	movwf	(printf@f+1)& (0+255),b
 10769  00367A  ECB8  F008         	call	_printf	;wreg free
 10770  00367E  0012               	return		;funcret
 10771  003680                     __end_of_algorithmTest:
 10772                           	opt stack 0
 10773                           tblptru	equ	0xFF8
 10774                           tblptrh	equ	0xFF7
 10775                           tblptrl	equ	0xFF6
 10776                           tablat	equ	0xFF5
 10777                           prodh	equ	0xFF4
 10778                           prodl	equ	0xFF3
 10779                           intcon	equ	0xFF2
 10780                           intcon2	equ	0xFF1
 10781                           intcon3	equ	0xFF0
 10782                           postinc0	equ	0xFEE
 10783                           wreg	equ	0xFE8
 10784                           postdec1	equ	0xFE5
 10785                           fsr1l	equ	0xFE1
 10786                           indf2	equ	0xFDF
 10787                           postinc2	equ	0xFDE
 10788                           postdec2	equ	0xFDD
 10789                           fsr2h	equ	0xFDA
 10790                           fsr2l	equ	0xFD9
 10791                           status	equ	0xFD8
 10792                           
 10793 ;; *************** function _actuatorTest *****************
 10794 ;; Defined at:
 10795 ;;		line 201 in file "Test.c"
 10796 ;; Parameters:    Size  Location     Type
 10797 ;;		None
 10798 ;; Auto vars:     Size  Location     Type
 10799 ;;  i               1   45[BANK0 ] unsigned char 
 10800 ;;  i               1   67[BANK0 ] unsigned char 
 10801 ;;  i               1   66[BANK0 ] unsigned char 
 10802 ;;  i               1   65[BANK0 ] unsigned char 
 10803 ;;  i               1   64[BANK0 ] unsigned char 
 10804 ;;  i               1   63[BANK0 ] unsigned char 
 10805 ;;  i               1   62[BANK0 ] unsigned char 
 10806 ;;  i               1   61[BANK0 ] unsigned char 
 10807 ;;  i               1   60[BANK0 ] unsigned char 
 10808 ;;  i               1   59[BANK0 ] unsigned char 
 10809 ;;  i               1   58[BANK0 ] unsigned char 
 10810 ;;  i               1   57[BANK0 ] unsigned char 
 10811 ;;  i               1   56[BANK0 ] unsigned char 
 10812 ;;  i               1   55[BANK0 ] unsigned char 
 10813 ;;  i               1   54[BANK0 ] unsigned char 
 10814 ;;  i               1   53[BANK0 ] unsigned char 
 10815 ;;  i               1   52[BANK0 ] unsigned char 
 10816 ;;  i               1   51[BANK0 ] unsigned char 
 10817 ;;  i               1   50[BANK0 ] unsigned char 
 10818 ;;  i               1   49[BANK0 ] unsigned char 
 10819 ;;  i               1   48[BANK0 ] unsigned char 
 10820 ;;  i               1   47[BANK0 ] unsigned char 
 10821 ;;  i               1   46[BANK0 ] unsigned char 
 10822 ;;  i               2   68[BANK0 ] int 
 10823 ;; Return value:  Size  Location     Type
 10824 ;;                  1    wreg      void 
 10825 ;; Registers used:
 10826 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10827 ;; Tracked objects:
 10828 ;;		On entry : 0/0
 10829 ;;		On exit  : 0/0
 10830 ;;		Unchanged: 0/0
 10831 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10832 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10833 ;;      Locals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10834 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10835 ;;      Totals:         0      27       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10836 ;;Total ram usage:       27 bytes
 10837 ;; Hardware stack levels used:    1
 10838 ;; Hardware stack levels required when called:   10
 10839 ;; This function calls:
 10840 ;;		_lcdInst
 10841 ;;		_printf
 10842 ;;		_updateServoPosition
 10843 ;; This function is called by:
 10844 ;;		_Test
 10845 ;; This function uses a non-reentrant model
 10846 ;;
 10847                           
 10848                           	psect	text41
 10849  000012                     __ptext41:
 10850                           	opt stack 0
 10851  000012                     _actuatorTest:
 10852                           	opt stack 19
 10853                           
 10854                           ;Test.c: 203: int i = 0;
 10855                           
 10856                           ;incstack = 0
 10857  000012  0E00               	movlw	0
 10858  000014  0100               	movlb	0	; () banked
 10859  000016  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 10860  000018  0E00               	movlw	0
 10861  00001A  6FC4               	movwf	actuatorTest@i& (0+255),b
 10862                           
 10863                           ; BSR set to: 0
 10864                           ;Test.c: 205: (INTCONbits.GIE = 1);
 10865  00001C  8EF2               	bsf	intcon,7,c	;volatile
 10866                           
 10867                           ; BSR set to: 0
 10868                           ;Test.c: 206: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10869  00001E  0E01               	movlw	1
 10870  000020  ECDC  F024         	call	_lcdInst
 10871  000024  0E68               	movlw	104
 10872  000026  0100               	movlb	0	; () banked
 10873  000028  6FAB               	movwf	??_actuatorTest& (0+255),b
 10874  00002A  0EE4               	movlw	228
 10875  00002C                     u7957:
 10876  00002C  2EE8               	decfsz	wreg,f,c
 10877  00002E  D7FE               	bra	u7957
 10878  000030  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10879  000032  D7FC               	bra	u7957
 10880  000034  F000               	nop	
 10881  000036  0E80               	movlw	128
 10882  000038  ECDC  F024         	call	_lcdInst
 10883                           
 10884                           ;Test.c: 207: printf("ACTUATORS");
 10885  00003C  0E91               	movlw	low STR_88
 10886  00003E  0100               	movlb	0	; () banked
 10887  000040  6F8E               	movwf	printf@f& (0+255),b
 10888  000042  0EFF               	movlw	high STR_88
 10889  000044  0100               	movlb	0	; () banked
 10890  000046  6F8F               	movwf	(printf@f+1)& (0+255),b
 10891  000048  ECB8  F008         	call	_printf	;wreg free
 10892                           
 10893                           ;Test.c: 208: lcdInst(0b11000000);;
 10894  00004C  0EC0               	movlw	192
 10895  00004E  ECDC  F024         	call	_lcdInst
 10896                           
 10897                           ;Test.c: 209: printf("PUSH TO START");
 10898  000052  0E0B               	movlw	low STR_71
 10899  000054  0100               	movlb	0	; () banked
 10900  000056  6F8E               	movwf	printf@f& (0+255),b
 10901  000058  0EFF               	movlw	high STR_71
 10902  00005A  0100               	movlb	0	; () banked
 10903  00005C  6F8F               	movwf	(printf@f+1)& (0+255),b
 10904  00005E  ECB8  F008         	call	_printf	;wreg free
 10905                           
 10906                           ;Test.c: 210: _delay((unsigned long)((100)*(32000000/4000.0)));
 10907  000062  0E05               	movlw	5
 10908  000064  0100               	movlb	0	; () banked
 10909  000066  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 10910  000068  0E0F               	movlw	15
 10911  00006A  0100               	movlb	0	; () banked
 10912  00006C  6FAB               	movwf	??_actuatorTest& (0+255),b
 10913  00006E  0EF1               	movlw	241
 10914  000070                     u7967:
 10915  000070  2EE8               	decfsz	wreg,f,c
 10916  000072  D7FE               	bra	u7967
 10917  000074  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10918  000076  D7FC               	bra	u7967
 10919  000078  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 10920  00007A  D7FA               	bra	u7967
 10921  00007C                     l1110:
 10922  00007C  A281               	btfss	3969,1,c	;volatile
 10923  00007E  D7FE               	goto	l1110
 10924  000080                     l1113:
 10925  000080  B281               	btfsc	3969,1,c	;volatile
 10926  000082  D7FE               	goto	l1113
 10927                           
 10928                           ;Test.c: 213: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10929  000084  0E01               	movlw	1
 10930  000086  ECDC  F024         	call	_lcdInst
 10931  00008A  0E68               	movlw	104
 10932  00008C  0100               	movlb	0	; () banked
 10933  00008E  6FAB               	movwf	??_actuatorTest& (0+255),b
 10934  000090  0EE4               	movlw	228
 10935  000092                     u7977:
 10936  000092  2EE8               	decfsz	wreg,f,c
 10937  000094  D7FE               	bra	u7977
 10938  000096  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10939  000098  D7FC               	bra	u7977
 10940  00009A  F000               	nop	
 10941  00009C  0E80               	movlw	128
 10942  00009E  ECDC  F024         	call	_lcdInst
 10943                           
 10944                           ;Test.c: 218: printf("TST: DC MOTORS");
 10945  0000A2  0EC3               	movlw	low STR_90
 10946  0000A4  0100               	movlb	0	; () banked
 10947  0000A6  6F8E               	movwf	printf@f& (0+255),b
 10948  0000A8  0EFE               	movlw	high STR_90
 10949  0000AA  0100               	movlb	0	; () banked
 10950  0000AC  6F8F               	movwf	(printf@f+1)& (0+255),b
 10951  0000AE  ECB8  F008         	call	_printf	;wreg free
 10952                           
 10953                           ;Test.c: 219: lcdInst(0b11000000);;
 10954  0000B2  0EC0               	movlw	192
 10955  0000B4  ECDC  F024         	call	_lcdInst
 10956                           
 10957                           ;Test.c: 220: printf("PIN RA5 HIGH.");
 10958  0000B8  0EE1               	movlw	low STR_91
 10959  0000BA  0100               	movlb	0	; () banked
 10960  0000BC  6F8E               	movwf	printf@f& (0+255),b
 10961  0000BE  0EFE               	movlw	high STR_91
 10962  0000C0  0100               	movlb	0	; () banked
 10963  0000C2  6F8F               	movwf	(printf@f+1)& (0+255),b
 10964  0000C4  ECB8  F008         	call	_printf	;wreg free
 10965                           
 10966                           ;Test.c: 221: LATAbits.LATA5 = 1;
 10967  0000C8  8A89               	bsf	3977,5,c	;volatile
 10968                           
 10969                           ;Test.c: 222: for(i=0;i<5;i++){for(char i=0;i<100;i++){_delay((unsigned long)((10)*(3200
      +                          0000/4000.0)));};}
 10970  0000CA  0E00               	movlw	0
 10971  0000CC  0100               	movlb	0	; () banked
 10972  0000CE  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 10973  0000D0  0E00               	movlw	0
 10974  0000D2  6FC4               	movwf	actuatorTest@i& (0+255),b
 10975                           
 10976                           ; BSR set to: 0
 10977  0000D4  0100               	movlb	0	; () banked
 10978  0000D6  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 10979  0000D8  D008               	goto	l6888
 10980  0000DA  0100               	movlb	0	; () banked
 10981  0000DC  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 10982  0000DE  E123               	bnz	l1117
 10983  0000E0  0E05               	movlw	5
 10984  0000E2  0100               	movlb	0	; () banked
 10985  0000E4  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 10986  0000E6  B0D8               	btfsc	status,0,c
 10987  0000E8  D01E               	goto	l1117
 10988  0000EA                     l6888:
 10989                           
 10990                           ; BSR set to: 0
 10991  0000EA  0E00               	movlw	0
 10992  0000EC  0100               	movlb	0	; () banked
 10993  0000EE  6FAD               	movwf	actuatorTest@i_1643& (0+255),b
 10994  0000F0                     l6890:
 10995                           
 10996                           ; BSR set to: 0
 10997  0000F0  0E63               	movlw	99
 10998  0000F2  0100               	movlb	0	; () banked
 10999  0000F4  65AD               	cpfsgt	actuatorTest@i_1643& (0+255),b
 11000  0000F6  D001               	goto	l6894
 11001  0000F8  D00C               	goto	l6898
 11002  0000FA                     l6894:
 11003                           
 11004                           ; BSR set to: 0
 11005  0000FA  0E68               	movlw	104
 11006  0000FC  0100               	movlb	0	; () banked
 11007  0000FE  6FAB               	movwf	??_actuatorTest& (0+255),b
 11008  000100  0EE4               	movlw	228
 11009  000102                     u7987:
 11010  000102  2EE8               	decfsz	wreg,f,c
 11011  000104  D7FE               	bra	u7987
 11012  000106  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11013  000108  D7FC               	bra	u7987
 11014  00010A  F000               	nop	
 11015  00010C  0100               	movlb	0	; () banked
 11016  00010E  2BAD               	incf	actuatorTest@i_1643& (0+255),f,b
 11017  000110  D7EF               	goto	l6890
 11018  000112                     l6898:
 11019                           
 11020                           ; BSR set to: 0
 11021  000112  0100               	movlb	0	; () banked
 11022  000114  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 11023  000116  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 11024                           
 11025                           ; BSR set to: 0
 11026  000118  0100               	movlb	0	; () banked
 11027  00011A  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 11028  00011C  D7E6               	goto	l6888
 11029  00011E  0100               	movlb	0	; () banked
 11030  000120  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 11031  000122  E101               	bnz	u5340
 11032  000124  D7DD               	goto	L6
 11033  000126                     u5340:
 11034  000126                     l1117:
 11035                           
 11036                           ; BSR set to: 0
 11037                           ;Test.c: 223: LATAbits.LATA5 = 0;
 11038  000126  9A89               	bcf	3977,5,c	;volatile
 11039                           
 11040                           ; BSR set to: 0
 11041                           ;Test.c: 224: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11042  000128  0E01               	movlw	1
 11043  00012A  ECDC  F024         	call	_lcdInst
 11044  00012E  0E68               	movlw	104
 11045  000130  0100               	movlb	0	; () banked
 11046  000132  6FAB               	movwf	??_actuatorTest& (0+255),b
 11047  000134  0EE4               	movlw	228
 11048  000136                     u7997:
 11049  000136  2EE8               	decfsz	wreg,f,c
 11050  000138  D7FE               	bra	u7997
 11051  00013A  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11052  00013C  D7FC               	bra	u7997
 11053  00013E  F000               	nop	
 11054  000140  0E80               	movlw	128
 11055  000142  ECDC  F024         	call	_lcdInst
 11056                           
 11057                           ;Test.c: 230: printf("TST: COND SOLN'D");
 11058  000146  0E81               	movlw	low STR_92
 11059  000148  0100               	movlb	0	; () banked
 11060  00014A  6F8E               	movwf	printf@f& (0+255),b
 11061  00014C  0EFC               	movlw	high STR_92
 11062  00014E  0100               	movlb	0	; () banked
 11063  000150  6F8F               	movwf	(printf@f+1)& (0+255),b
 11064  000152  ECB8  F008         	call	_printf	;wreg free
 11065                           
 11066                           ;Test.c: 231: lcdInst(0b11000000);;
 11067  000156  0EC0               	movlw	192
 11068  000158  ECDC  F024         	call	_lcdInst
 11069                           
 11070                           ;Test.c: 232: printf("PIN RA3...");
 11071  00015C  0E5B               	movlw	low STR_93
 11072  00015E  0100               	movlb	0	; () banked
 11073  000160  6F8E               	movwf	printf@f& (0+255),b
 11074  000162  0EFF               	movlw	high STR_93
 11075  000164  0100               	movlb	0	; () banked
 11076  000166  6F8F               	movwf	(printf@f+1)& (0+255),b
 11077  000168  ECB8  F008         	call	_printf	;wreg free
 11078                           
 11079                           ;Test.c: 233: for(i=0;i<5;i++){
 11080  00016C  0E00               	movlw	0
 11081  00016E  0100               	movlb	0	; () banked
 11082  000170  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 11083  000172  0E00               	movlw	0
 11084  000174  6FC4               	movwf	actuatorTest@i& (0+255),b
 11085                           
 11086                           ; BSR set to: 0
 11087  000176  0100               	movlb	0	; () banked
 11088  000178  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 11089  00017A  D008               	goto	l1120
 11090  00017C  0100               	movlb	0	; () banked
 11091  00017E  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 11092  000180  E12C               	bnz	l1121
 11093  000182  0E05               	movlw	5
 11094  000184  0100               	movlb	0	; () banked
 11095  000186  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 11096  000188  B0D8               	btfsc	status,0,c
 11097  00018A  D027               	goto	l1121
 11098  00018C                     l1120:
 11099                           
 11100                           ; BSR set to: 0
 11101                           ;Test.c: 234: LATAbits.LATA3 = 1;
 11102  00018C  8689               	bsf	3977,3,c	;volatile
 11103                           
 11104                           ; BSR set to: 0
 11105                           ;Test.c: 235: _delay((unsigned long)((300)*(32000000/4000.0)));
 11106  00018E  0E0D               	movlw	13
 11107  000190  0100               	movlb	0	; () banked
 11108  000192  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 11109  000194  0E2D               	movlw	45
 11110  000196  0100               	movlb	0	; () banked
 11111  000198  6FAB               	movwf	??_actuatorTest& (0+255),b
 11112  00019A  0ED7               	movlw	215
 11113  00019C                     u8007:
 11114  00019C  2EE8               	decfsz	wreg,f,c
 11115  00019E  D7FE               	bra	u8007
 11116  0001A0  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11117  0001A2  D7FC               	bra	u8007
 11118  0001A4  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 11119  0001A6  D7FA               	bra	u8007
 11120  0001A8  D000               	nop2	
 11121                           
 11122                           ;Test.c: 236: LATAbits.LATA3 = ~1;
 11123  0001AA  9689               	bcf	3977,3,c	;volatile
 11124                           
 11125                           ;Test.c: 237: _delay((unsigned long)((1000-300)*(32000000/4000.0)));
 11126  0001AC  0E1D               	movlw	29
 11127  0001AE  0100               	movlb	0	; () banked
 11128  0001B0  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 11129  0001B2  0E69               	movlw	105
 11130  0001B4  0100               	movlb	0	; () banked
 11131  0001B6  6FAB               	movwf	??_actuatorTest& (0+255),b
 11132  0001B8  0EA5               	movlw	165
 11133  0001BA                     u8017:
 11134  0001BA  2EE8               	decfsz	wreg,f,c
 11135  0001BC  D7FE               	bra	u8017
 11136  0001BE  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11137  0001C0  D7FC               	bra	u8017
 11138  0001C2  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 11139  0001C4  D7FA               	bra	u8017
 11140  0001C6  0100               	movlb	0	; () banked
 11141  0001C8  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 11142  0001CA  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 11143  0001CC  0100               	movlb	0	; () banked
 11144  0001CE  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 11145  0001D0  D7DD               	goto	l1120
 11146  0001D2  0100               	movlb	0	; () banked
 11147  0001D4  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 11148  0001D6  E101               	bnz	u5360
 11149  0001D8  D7D4               	goto	L7
 11150  0001DA                     u5360:
 11151  0001DA                     l1121:
 11152                           
 11153                           ; BSR set to: 0
 11154                           ;Test.c: 238: }
 11155                           ;Test.c: 239: LATAbits.LATA3 = ~1;
 11156  0001DA  9689               	bcf	3977,3,c	;volatile
 11157                           
 11158                           ; BSR set to: 0
 11159                           ;Test.c: 240: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11160  0001DC  0E01               	movlw	1
 11161  0001DE  ECDC  F024         	call	_lcdInst
 11162  0001E2  0E68               	movlw	104
 11163  0001E4  0100               	movlb	0	; () banked
 11164  0001E6  6FAB               	movwf	??_actuatorTest& (0+255),b
 11165  0001E8  0EE4               	movlw	228
 11166  0001EA                     u8027:
 11167  0001EA  2EE8               	decfsz	wreg,f,c
 11168  0001EC  D7FE               	bra	u8027
 11169  0001EE  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11170  0001F0  D7FC               	bra	u8027
 11171  0001F2  F000               	nop	
 11172  0001F4  0E80               	movlw	128
 11173  0001F6  ECDC  F024         	call	_lcdInst
 11174                           
 11175                           ;Test.c: 246: printf("TST: PUSH SOLN'D");
 11176  0001FA  0E92               	movlw	low STR_94
 11177  0001FC  0100               	movlb	0	; () banked
 11178  0001FE  6F8E               	movwf	printf@f& (0+255),b
 11179  000200  0EFC               	movlw	high STR_94
 11180  000202  0100               	movlb	0	; () banked
 11181  000204  6F8F               	movwf	(printf@f+1)& (0+255),b
 11182  000206  ECB8  F008         	call	_printf	;wreg free
 11183                           
 11184                           ;Test.c: 247: lcdInst(0b11000000);;
 11185  00020A  0EC0               	movlw	192
 11186  00020C  ECDC  F024         	call	_lcdInst
 11187                           
 11188                           ;Test.c: 248: printf("PIN RA4...");
 11189  000210  0E66               	movlw	low STR_95
 11190  000212  0100               	movlb	0	; () banked
 11191  000214  6F8E               	movwf	printf@f& (0+255),b
 11192  000216  0EFF               	movlw	high STR_95
 11193  000218  0100               	movlb	0	; () banked
 11194  00021A  6F8F               	movwf	(printf@f+1)& (0+255),b
 11195  00021C  ECB8  F008         	call	_printf	;wreg free
 11196                           
 11197                           ;Test.c: 249: for(i=0;i<5;i++){
 11198  000220  0E00               	movlw	0
 11199  000222  0100               	movlb	0	; () banked
 11200  000224  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 11201  000226  0E00               	movlw	0
 11202  000228  6FC4               	movwf	actuatorTest@i& (0+255),b
 11203                           
 11204                           ; BSR set to: 0
 11205  00022A  0100               	movlb	0	; () banked
 11206  00022C  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 11207  00022E  D008               	goto	l1122
 11208  000230  0100               	movlb	0	; () banked
 11209  000232  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 11210  000234  E12C               	bnz	l1123
 11211  000236  0E05               	movlw	5
 11212  000238  0100               	movlb	0	; () banked
 11213  00023A  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 11214  00023C  B0D8               	btfsc	status,0,c
 11215  00023E  D027               	goto	l1123
 11216  000240                     l1122:
 11217                           
 11218                           ; BSR set to: 0
 11219                           ;Test.c: 250: LATAbits.LATA4 = 1;
 11220  000240  8889               	bsf	3977,4,c	;volatile
 11221                           
 11222                           ; BSR set to: 0
 11223                           ;Test.c: 251: _delay((unsigned long)((300)*(32000000/4000.0)));
 11224  000242  0E0D               	movlw	13
 11225  000244  0100               	movlb	0	; () banked
 11226  000246  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 11227  000248  0E2D               	movlw	45
 11228  00024A  0100               	movlb	0	; () banked
 11229  00024C  6FAB               	movwf	??_actuatorTest& (0+255),b
 11230  00024E  0ED7               	movlw	215
 11231  000250                     u8037:
 11232  000250  2EE8               	decfsz	wreg,f,c
 11233  000252  D7FE               	bra	u8037
 11234  000254  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11235  000256  D7FC               	bra	u8037
 11236  000258  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 11237  00025A  D7FA               	bra	u8037
 11238  00025C  D000               	nop2	
 11239                           
 11240                           ;Test.c: 252: LATAbits.LATA4 = ~1;
 11241  00025E  9889               	bcf	3977,4,c	;volatile
 11242                           
 11243                           ;Test.c: 253: _delay((unsigned long)((1000-300)*(32000000/4000.0)));
 11244  000260  0E1D               	movlw	29
 11245  000262  0100               	movlb	0	; () banked
 11246  000264  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 11247  000266  0E69               	movlw	105
 11248  000268  0100               	movlb	0	; () banked
 11249  00026A  6FAB               	movwf	??_actuatorTest& (0+255),b
 11250  00026C  0EA5               	movlw	165
 11251  00026E                     u8047:
 11252  00026E  2EE8               	decfsz	wreg,f,c
 11253  000270  D7FE               	bra	u8047
 11254  000272  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11255  000274  D7FC               	bra	u8047
 11256  000276  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 11257  000278  D7FA               	bra	u8047
 11258  00027A  0100               	movlb	0	; () banked
 11259  00027C  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 11260  00027E  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 11261  000280  0100               	movlb	0	; () banked
 11262  000282  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 11263  000284  D7DD               	goto	l1122
 11264  000286  0100               	movlb	0	; () banked
 11265  000288  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 11266  00028A  E101               	bnz	u5380
 11267  00028C  D7D4               	goto	L8
 11268  00028E                     u5380:
 11269  00028E                     l1123:
 11270                           
 11271                           ; BSR set to: 0
 11272                           ;Test.c: 254: }
 11273                           ;Test.c: 255: LATAbits.LATA4 = ~1;
 11274  00028E  9889               	bcf	3977,4,c	;volatile
 11275                           
 11276                           ; BSR set to: 0
 11277                           ;Test.c: 256: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11278  000290  0E01               	movlw	1
 11279  000292  ECDC  F024         	call	_lcdInst
 11280  000296  0E68               	movlw	104
 11281  000298  0100               	movlb	0	; () banked
 11282  00029A  6FAB               	movwf	??_actuatorTest& (0+255),b
 11283  00029C  0EE4               	movlw	228
 11284  00029E                     u8057:
 11285  00029E  2EE8               	decfsz	wreg,f,c
 11286  0002A0  D7FE               	bra	u8057
 11287  0002A2  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11288  0002A4  D7FC               	bra	u8057
 11289  0002A6  F000               	nop	
 11290  0002A8  0E80               	movlw	128
 11291  0002AA  ECDC  F024         	call	_lcdInst
 11292                           
 11293                           ;Test.c: 259: machine_state = Sorting_state;
 11294  0002AE  0E01               	movlw	1
 11295  0002B0  0100               	movlb	0	; () banked
 11296  0002B2  6FFC               	movwf	_machine_state& (0+255),b
 11297                           
 11298                           ; BSR set to: 0
 11299                           ;Test.c: 260: was_low_1 = 0;
 11300  0002B4  0E00               	movlw	0
 11301  0002B6  6E7A               	movwf	_was_low_1+1,c	;volatile
 11302  0002B8  0E00               	movlw	0
 11303  0002BA  6E79               	movwf	_was_low_1,c	;volatile
 11304                           
 11305                           ; BSR set to: 0
 11306                           ;Test.c: 261: was_low_1 = 0;
 11307  0002BC  0E00               	movlw	0
 11308  0002BE  6E7A               	movwf	_was_low_1+1,c	;volatile
 11309  0002C0  0E00               	movlw	0
 11310  0002C2  6E79               	movwf	_was_low_1,c	;volatile
 11311                           
 11312                           ; BSR set to: 0
 11313                           ;Test.c: 268: printf("TST: PAN SERVO");
 11314  0002C4  0EA5               	movlw	low STR_96
 11315  0002C6  0100               	movlb	0	; () banked
 11316  0002C8  6F8E               	movwf	printf@f& (0+255),b
 11317  0002CA  0EFE               	movlw	high STR_96
 11318  0002CC  0100               	movlb	0	; () banked
 11319  0002CE  6F8F               	movwf	(printf@f+1)& (0+255),b
 11320  0002D0  ECB8  F008         	call	_printf	;wreg free
 11321                           
 11322                           ;Test.c: 269: lcdInst(0b11000000);;
 11323  0002D4  0EC0               	movlw	192
 11324  0002D6  ECDC  F024         	call	_lcdInst
 11325                           
 11326                           ;Test.c: 270: printf("MIDDLE -- 2s    ");
 11327  0002DA  0E0A               	movlw	low STR_97
 11328  0002DC  0100               	movlb	0	; () banked
 11329  0002DE  6F8E               	movwf	printf@f& (0+255),b
 11330  0002E0  0EFC               	movlw	high STR_97
 11331  0002E2  0100               	movlb	0	; () banked
 11332  0002E4  6F8F               	movwf	(printf@f+1)& (0+255),b
 11333  0002E6  ECB8  F008         	call	_printf	;wreg free
 11334                           
 11335                           ;Test.c: 271: updateServoPosition(1200, 1);
 11336  0002EA  0E04               	movlw	4
 11337  0002EC  0100               	movlb	0	; () banked
 11338  0002EE  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11339  0002F0  0EB0               	movlw	176
 11340  0002F2  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11341  0002F4  0E00               	movlw	0
 11342  0002F6  0100               	movlb	0	; () banked
 11343  0002F8  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11344  0002FA  0E01               	movlw	1
 11345  0002FC  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11346  0002FE  EC15  F01F         	call	_updateServoPosition	;wreg free
 11347                           
 11348                           ;Test.c: 272: TMR1ON = 1;
 11349  000302  80CD               	bsf	4045,0,c	;volatile
 11350                           
 11351                           ;Test.c: 273: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11352  000304  0E00               	movlw	0
 11353  000306  0100               	movlb	0	; () banked
 11354  000308  6FAE               	movwf	actuatorTest@i_1650& (0+255),b
 11355  00030A                     l6974:
 11356                           
 11357                           ; BSR set to: 0
 11358  00030A  0E63               	movlw	99
 11359  00030C  0100               	movlb	0	; () banked
 11360  00030E  65AE               	cpfsgt	actuatorTest@i_1650& (0+255),b
 11361  000310  D001               	goto	l6978
 11362  000312  D00C               	goto	l6982
 11363  000314                     l6978:
 11364                           
 11365                           ; BSR set to: 0
 11366  000314  0E68               	movlw	104
 11367  000316  0100               	movlb	0	; () banked
 11368  000318  6FAB               	movwf	??_actuatorTest& (0+255),b
 11369  00031A  0EE4               	movlw	228
 11370  00031C                     u8067:
 11371  00031C  2EE8               	decfsz	wreg,f,c
 11372  00031E  D7FE               	bra	u8067
 11373  000320  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11374  000322  D7FC               	bra	u8067
 11375  000324  F000               	nop	
 11376  000326  0100               	movlb	0	; () banked
 11377  000328  2BAE               	incf	actuatorTest@i_1650& (0+255),f,b
 11378  00032A  D7EF               	goto	l6974
 11379  00032C                     l6982:
 11380                           
 11381                           ; BSR set to: 0
 11382  00032C  0E00               	movlw	0
 11383  00032E  0100               	movlb	0	; () banked
 11384  000330  6FAF               	movwf	actuatorTest@i_1651& (0+255),b
 11385  000332                     l6984:
 11386                           
 11387                           ; BSR set to: 0
 11388  000332  0E63               	movlw	99
 11389  000334  0100               	movlb	0	; () banked
 11390  000336  65AF               	cpfsgt	actuatorTest@i_1651& (0+255),b
 11391  000338  D001               	goto	l6988
 11392  00033A  D00C               	goto	l6992
 11393  00033C                     l6988:
 11394                           
 11395                           ; BSR set to: 0
 11396  00033C  0E68               	movlw	104
 11397  00033E  0100               	movlb	0	; () banked
 11398  000340  6FAB               	movwf	??_actuatorTest& (0+255),b
 11399  000342  0EE4               	movlw	228
 11400  000344                     u8077:
 11401  000344  2EE8               	decfsz	wreg,f,c
 11402  000346  D7FE               	bra	u8077
 11403  000348  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11404  00034A  D7FC               	bra	u8077
 11405  00034C  F000               	nop	
 11406  00034E  0100               	movlb	0	; () banked
 11407  000350  2BAF               	incf	actuatorTest@i_1651& (0+255),f,b
 11408  000352  D7EF               	goto	l6984
 11409  000354                     l6992:
 11410                           
 11411                           ; BSR set to: 0
 11412                           ;Test.c: 275: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11413  000354  0E80               	movlw	128
 11414  000356  ECDC  F024         	call	_lcdInst
 11415  00035A  0EC0               	movlw	192
 11416  00035C  ECDC  F024         	call	_lcdInst
 11417                           
 11418                           ;Test.c: 276: printf("RIGHT -- 2s     ");
 11419  000360  0EF9               	movlw	low STR_98
 11420  000362  0100               	movlb	0	; () banked
 11421  000364  6F8E               	movwf	printf@f& (0+255),b
 11422  000366  0EFB               	movlw	high STR_98
 11423  000368  0100               	movlb	0	; () banked
 11424  00036A  6F8F               	movwf	(printf@f+1)& (0+255),b
 11425  00036C  ECB8  F008         	call	_printf	;wreg free
 11426                           
 11427                           ;Test.c: 277: updateServoPosition(500, 1);
 11428  000370  0E01               	movlw	1
 11429  000372  0100               	movlb	0	; () banked
 11430  000374  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11431  000376  0EF4               	movlw	244
 11432  000378  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11433  00037A  0E00               	movlw	0
 11434  00037C  0100               	movlb	0	; () banked
 11435  00037E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11436  000380  0E01               	movlw	1
 11437  000382  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11438  000384  EC15  F01F         	call	_updateServoPosition	;wreg free
 11439                           
 11440                           ;Test.c: 278: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11441  000388  0E00               	movlw	0
 11442  00038A  0100               	movlb	0	; () banked
 11443  00038C  6FB0               	movwf	actuatorTest@i_1653& (0+255),b
 11444  00038E                     l7000:
 11445                           
 11446                           ; BSR set to: 0
 11447  00038E  0E63               	movlw	99
 11448  000390  0100               	movlb	0	; () banked
 11449  000392  65B0               	cpfsgt	actuatorTest@i_1653& (0+255),b
 11450  000394  D001               	goto	l7004
 11451  000396  D00C               	goto	l7008
 11452  000398                     l7004:
 11453                           
 11454                           ; BSR set to: 0
 11455  000398  0E68               	movlw	104
 11456  00039A  0100               	movlb	0	; () banked
 11457  00039C  6FAB               	movwf	??_actuatorTest& (0+255),b
 11458  00039E  0EE4               	movlw	228
 11459  0003A0                     u8087:
 11460  0003A0  2EE8               	decfsz	wreg,f,c
 11461  0003A2  D7FE               	bra	u8087
 11462  0003A4  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11463  0003A6  D7FC               	bra	u8087
 11464  0003A8  F000               	nop	
 11465  0003AA  0100               	movlb	0	; () banked
 11466  0003AC  2BB0               	incf	actuatorTest@i_1653& (0+255),f,b
 11467  0003AE  D7EF               	goto	l7000
 11468  0003B0                     l7008:
 11469                           
 11470                           ; BSR set to: 0
 11471  0003B0  0E00               	movlw	0
 11472  0003B2  0100               	movlb	0	; () banked
 11473  0003B4  6FB1               	movwf	actuatorTest@i_1654& (0+255),b
 11474  0003B6                     l7010:
 11475                           
 11476                           ; BSR set to: 0
 11477  0003B6  0E63               	movlw	99
 11478  0003B8  0100               	movlb	0	; () banked
 11479  0003BA  65B1               	cpfsgt	actuatorTest@i_1654& (0+255),b
 11480  0003BC  D001               	goto	l7014
 11481  0003BE  D00C               	goto	l7018
 11482  0003C0                     l7014:
 11483                           
 11484                           ; BSR set to: 0
 11485  0003C0  0E68               	movlw	104
 11486  0003C2  0100               	movlb	0	; () banked
 11487  0003C4  6FAB               	movwf	??_actuatorTest& (0+255),b
 11488  0003C6  0EE4               	movlw	228
 11489  0003C8                     u8097:
 11490  0003C8  2EE8               	decfsz	wreg,f,c
 11491  0003CA  D7FE               	bra	u8097
 11492  0003CC  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11493  0003CE  D7FC               	bra	u8097
 11494  0003D0  F000               	nop	
 11495  0003D2  0100               	movlb	0	; () banked
 11496  0003D4  2BB1               	incf	actuatorTest@i_1654& (0+255),f,b
 11497  0003D6  D7EF               	goto	l7010
 11498  0003D8                     l7018:
 11499                           
 11500                           ; BSR set to: 0
 11501                           ;Test.c: 280: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11502  0003D8  0E80               	movlw	128
 11503  0003DA  ECDC  F024         	call	_lcdInst
 11504  0003DE  0EC0               	movlw	192
 11505  0003E0  ECDC  F024         	call	_lcdInst
 11506                           
 11507                           ;Test.c: 281: printf("LEFT -- 2s      ");
 11508  0003E4  0ED7               	movlw	low STR_99
 11509  0003E6  0100               	movlb	0	; () banked
 11510  0003E8  6F8E               	movwf	printf@f& (0+255),b
 11511  0003EA  0EFB               	movlw	high STR_99
 11512  0003EC  0100               	movlb	0	; () banked
 11513  0003EE  6F8F               	movwf	(printf@f+1)& (0+255),b
 11514  0003F0  ECB8  F008         	call	_printf	;wreg free
 11515                           
 11516                           ;Test.c: 282: updateServoPosition(2100, 1);
 11517  0003F4  0E08               	movlw	8
 11518  0003F6  0100               	movlb	0	; () banked
 11519  0003F8  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11520  0003FA  0E34               	movlw	52
 11521  0003FC  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11522  0003FE  0E00               	movlw	0
 11523  000400  0100               	movlb	0	; () banked
 11524  000402  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11525  000404  0E01               	movlw	1
 11526  000406  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11527  000408  EC15  F01F         	call	_updateServoPosition	;wreg free
 11528                           
 11529                           ;Test.c: 283: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11530  00040C  0E00               	movlw	0
 11531  00040E  0100               	movlb	0	; () banked
 11532  000410  6FB2               	movwf	actuatorTest@i_1656& (0+255),b
 11533  000412                     l7026:
 11534                           
 11535                           ; BSR set to: 0
 11536  000412  0E63               	movlw	99
 11537  000414  0100               	movlb	0	; () banked
 11538  000416  65B2               	cpfsgt	actuatorTest@i_1656& (0+255),b
 11539  000418  D001               	goto	l7030
 11540  00041A  D00C               	goto	l7034
 11541  00041C                     l7030:
 11542                           
 11543                           ; BSR set to: 0
 11544  00041C  0E68               	movlw	104
 11545  00041E  0100               	movlb	0	; () banked
 11546  000420  6FAB               	movwf	??_actuatorTest& (0+255),b
 11547  000422  0EE4               	movlw	228
 11548  000424                     u8107:
 11549  000424  2EE8               	decfsz	wreg,f,c
 11550  000426  D7FE               	bra	u8107
 11551  000428  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11552  00042A  D7FC               	bra	u8107
 11553  00042C  F000               	nop	
 11554  00042E  0100               	movlb	0	; () banked
 11555  000430  2BB2               	incf	actuatorTest@i_1656& (0+255),f,b
 11556  000432  D7EF               	goto	l7026
 11557  000434                     l7034:
 11558                           
 11559                           ; BSR set to: 0
 11560  000434  0E00               	movlw	0
 11561  000436  0100               	movlb	0	; () banked
 11562  000438  6FB3               	movwf	actuatorTest@i_1657& (0+255),b
 11563  00043A                     l7036:
 11564                           
 11565                           ; BSR set to: 0
 11566  00043A  0E63               	movlw	99
 11567  00043C  0100               	movlb	0	; () banked
 11568  00043E  65B3               	cpfsgt	actuatorTest@i_1657& (0+255),b
 11569  000440  D001               	goto	l7040
 11570  000442  D00C               	goto	l7044
 11571  000444                     l7040:
 11572                           
 11573                           ; BSR set to: 0
 11574  000444  0E68               	movlw	104
 11575  000446  0100               	movlb	0	; () banked
 11576  000448  6FAB               	movwf	??_actuatorTest& (0+255),b
 11577  00044A  0EE4               	movlw	228
 11578  00044C                     u8117:
 11579  00044C  2EE8               	decfsz	wreg,f,c
 11580  00044E  D7FE               	bra	u8117
 11581  000450  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11582  000452  D7FC               	bra	u8117
 11583  000454  F000               	nop	
 11584  000456  0100               	movlb	0	; () banked
 11585  000458  2BB3               	incf	actuatorTest@i_1657& (0+255),f,b
 11586  00045A  D7EF               	goto	l7036
 11587  00045C                     l7044:
 11588                           
 11589                           ; BSR set to: 0
 11590                           ;Test.c: 285: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11591  00045C  0E80               	movlw	128
 11592  00045E  ECDC  F024         	call	_lcdInst
 11593  000462  0EC0               	movlw	192
 11594  000464  ECDC  F024         	call	_lcdInst
 11595                           
 11596                           ;Test.c: 286: printf("MID-LEFT -- 2s  ");
 11597  000468  0E2C               	movlw	low STR_100
 11598  00046A  0100               	movlb	0	; () banked
 11599  00046C  6F8E               	movwf	printf@f& (0+255),b
 11600  00046E  0EFC               	movlw	high STR_100
 11601  000470  0100               	movlb	0	; () banked
 11602  000472  6F8F               	movwf	(printf@f+1)& (0+255),b
 11603  000474  ECB8  F008         	call	_printf	;wreg free
 11604                           
 11605                           ;Test.c: 287: updateServoPosition(1670, 1);
 11606  000478  0E06               	movlw	6
 11607  00047A  0100               	movlb	0	; () banked
 11608  00047C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11609  00047E  0E86               	movlw	134
 11610  000480  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11611  000482  0E00               	movlw	0
 11612  000484  0100               	movlb	0	; () banked
 11613  000486  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11614  000488  0E01               	movlw	1
 11615  00048A  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11616  00048C  EC15  F01F         	call	_updateServoPosition	;wreg free
 11617                           
 11618                           ;Test.c: 288: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11619  000490  0E00               	movlw	0
 11620  000492  0100               	movlb	0	; () banked
 11621  000494  6FB4               	movwf	actuatorTest@i_1659& (0+255),b
 11622  000496                     l7052:
 11623                           
 11624                           ; BSR set to: 0
 11625  000496  0E63               	movlw	99
 11626  000498  0100               	movlb	0	; () banked
 11627  00049A  65B4               	cpfsgt	actuatorTest@i_1659& (0+255),b
 11628  00049C  D001               	goto	l7056
 11629  00049E  D00C               	goto	l7060
 11630  0004A0                     l7056:
 11631                           
 11632                           ; BSR set to: 0
 11633  0004A0  0E68               	movlw	104
 11634  0004A2  0100               	movlb	0	; () banked
 11635  0004A4  6FAB               	movwf	??_actuatorTest& (0+255),b
 11636  0004A6  0EE4               	movlw	228
 11637  0004A8                     u8127:
 11638  0004A8  2EE8               	decfsz	wreg,f,c
 11639  0004AA  D7FE               	bra	u8127
 11640  0004AC  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11641  0004AE  D7FC               	bra	u8127
 11642  0004B0  F000               	nop	
 11643  0004B2  0100               	movlb	0	; () banked
 11644  0004B4  2BB4               	incf	actuatorTest@i_1659& (0+255),f,b
 11645  0004B6  D7EF               	goto	l7052
 11646  0004B8                     l7060:
 11647                           
 11648                           ; BSR set to: 0
 11649  0004B8  0E00               	movlw	0
 11650  0004BA  0100               	movlb	0	; () banked
 11651  0004BC  6FB5               	movwf	actuatorTest@i_1660& (0+255),b
 11652  0004BE                     l7062:
 11653                           
 11654                           ; BSR set to: 0
 11655  0004BE  0E63               	movlw	99
 11656  0004C0  0100               	movlb	0	; () banked
 11657  0004C2  65B5               	cpfsgt	actuatorTest@i_1660& (0+255),b
 11658  0004C4  D001               	goto	l7066
 11659  0004C6  D00C               	goto	l7070
 11660  0004C8                     l7066:
 11661                           
 11662                           ; BSR set to: 0
 11663  0004C8  0E68               	movlw	104
 11664  0004CA  0100               	movlb	0	; () banked
 11665  0004CC  6FAB               	movwf	??_actuatorTest& (0+255),b
 11666  0004CE  0EE4               	movlw	228
 11667  0004D0                     u8137:
 11668  0004D0  2EE8               	decfsz	wreg,f,c
 11669  0004D2  D7FE               	bra	u8137
 11670  0004D4  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11671  0004D6  D7FC               	bra	u8137
 11672  0004D8  F000               	nop	
 11673  0004DA  0100               	movlb	0	; () banked
 11674  0004DC  2BB5               	incf	actuatorTest@i_1660& (0+255),f,b
 11675  0004DE  D7EF               	goto	l7062
 11676  0004E0                     l7070:
 11677                           
 11678                           ; BSR set to: 0
 11679                           ;Test.c: 290: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11680  0004E0  0E80               	movlw	128
 11681  0004E2  ECDC  F024         	call	_lcdInst
 11682  0004E6  0EC0               	movlw	192
 11683  0004E8  ECDC  F024         	call	_lcdInst
 11684                           
 11685                           ;Test.c: 291: printf("MID-RIGHT -- 2s ");
 11686  0004EC  0E3D               	movlw	low STR_101
 11687  0004EE  0100               	movlb	0	; () banked
 11688  0004F0  6F8E               	movwf	printf@f& (0+255),b
 11689  0004F2  0EFC               	movlw	high STR_101
 11690  0004F4  0100               	movlb	0	; () banked
 11691  0004F6  6F8F               	movwf	(printf@f+1)& (0+255),b
 11692  0004F8  ECB8  F008         	call	_printf	;wreg free
 11693                           
 11694                           ;Test.c: 292: updateServoPosition(850, 1);
 11695  0004FC  0E03               	movlw	3
 11696  0004FE  0100               	movlb	0	; () banked
 11697  000500  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11698  000502  0E52               	movlw	82
 11699  000504  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11700  000506  0E00               	movlw	0
 11701  000508  0100               	movlb	0	; () banked
 11702  00050A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11703  00050C  0E01               	movlw	1
 11704  00050E  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11705  000510  EC15  F01F         	call	_updateServoPosition	;wreg free
 11706                           
 11707                           ;Test.c: 293: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11708  000514  0E00               	movlw	0
 11709  000516  0100               	movlb	0	; () banked
 11710  000518  6FB6               	movwf	actuatorTest@i_1662& (0+255),b
 11711  00051A                     l7078:
 11712                           
 11713                           ; BSR set to: 0
 11714  00051A  0E63               	movlw	99
 11715  00051C  0100               	movlb	0	; () banked
 11716  00051E  65B6               	cpfsgt	actuatorTest@i_1662& (0+255),b
 11717  000520  D001               	goto	l7082
 11718  000522  D00C               	goto	l7086
 11719  000524                     l7082:
 11720                           
 11721                           ; BSR set to: 0
 11722  000524  0E68               	movlw	104
 11723  000526  0100               	movlb	0	; () banked
 11724  000528  6FAB               	movwf	??_actuatorTest& (0+255),b
 11725  00052A  0EE4               	movlw	228
 11726  00052C                     u8147:
 11727  00052C  2EE8               	decfsz	wreg,f,c
 11728  00052E  D7FE               	bra	u8147
 11729  000530  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11730  000532  D7FC               	bra	u8147
 11731  000534  F000               	nop	
 11732  000536  0100               	movlb	0	; () banked
 11733  000538  2BB6               	incf	actuatorTest@i_1662& (0+255),f,b
 11734  00053A  D7EF               	goto	l7078
 11735  00053C                     l7086:
 11736                           
 11737                           ; BSR set to: 0
 11738  00053C  0E00               	movlw	0
 11739  00053E  0100               	movlb	0	; () banked
 11740  000540  6FB7               	movwf	actuatorTest@i_1663& (0+255),b
 11741  000542                     l7088:
 11742                           
 11743                           ; BSR set to: 0
 11744  000542  0E63               	movlw	99
 11745  000544  0100               	movlb	0	; () banked
 11746  000546  65B7               	cpfsgt	actuatorTest@i_1663& (0+255),b
 11747  000548  D001               	goto	l7092
 11748  00054A  D00C               	goto	l7096
 11749  00054C                     l7092:
 11750                           
 11751                           ; BSR set to: 0
 11752  00054C  0E68               	movlw	104
 11753  00054E  0100               	movlb	0	; () banked
 11754  000550  6FAB               	movwf	??_actuatorTest& (0+255),b
 11755  000552  0EE4               	movlw	228
 11756  000554                     u8157:
 11757  000554  2EE8               	decfsz	wreg,f,c
 11758  000556  D7FE               	bra	u8157
 11759  000558  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11760  00055A  D7FC               	bra	u8157
 11761  00055C  F000               	nop	
 11762  00055E  0100               	movlb	0	; () banked
 11763  000560  2BB7               	incf	actuatorTest@i_1663& (0+255),f,b
 11764  000562  D7EF               	goto	l7088
 11765  000564                     l7096:
 11766                           
 11767                           ; BSR set to: 0
 11768                           ;Test.c: 295: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11769  000564  0E80               	movlw	128
 11770  000566  ECDC  F024         	call	_lcdInst
 11771  00056A  0EC0               	movlw	192
 11772  00056C  ECDC  F024         	call	_lcdInst
 11773                           
 11774                           ;Test.c: 296: printf("MID -- 2s       ");
 11775  000570  0EB5               	movlw	low STR_102
 11776  000572  0100               	movlb	0	; () banked
 11777  000574  6F8E               	movwf	printf@f& (0+255),b
 11778  000576  0EFB               	movlw	high STR_102
 11779  000578  0100               	movlb	0	; () banked
 11780  00057A  6F8F               	movwf	(printf@f+1)& (0+255),b
 11781  00057C  ECB8  F008         	call	_printf	;wreg free
 11782                           
 11783                           ;Test.c: 297: updateServoPosition(1200, 1);
 11784  000580  0E04               	movlw	4
 11785  000582  0100               	movlb	0	; () banked
 11786  000584  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11787  000586  0EB0               	movlw	176
 11788  000588  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11789  00058A  0E00               	movlw	0
 11790  00058C  0100               	movlb	0	; () banked
 11791  00058E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11792  000590  0E01               	movlw	1
 11793  000592  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11794  000594  EC15  F01F         	call	_updateServoPosition	;wreg free
 11795                           
 11796                           ;Test.c: 298: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11797  000598  0E00               	movlw	0
 11798  00059A  0100               	movlb	0	; () banked
 11799  00059C  6FB8               	movwf	actuatorTest@i_1665& (0+255),b
 11800  00059E                     l7104:
 11801                           
 11802                           ; BSR set to: 0
 11803  00059E  0E63               	movlw	99
 11804  0005A0  0100               	movlb	0	; () banked
 11805  0005A2  65B8               	cpfsgt	actuatorTest@i_1665& (0+255),b
 11806  0005A4  D001               	goto	l7108
 11807  0005A6  D00C               	goto	l7112
 11808  0005A8                     l7108:
 11809                           
 11810                           ; BSR set to: 0
 11811  0005A8  0E68               	movlw	104
 11812  0005AA  0100               	movlb	0	; () banked
 11813  0005AC  6FAB               	movwf	??_actuatorTest& (0+255),b
 11814  0005AE  0EE4               	movlw	228
 11815  0005B0                     u8167:
 11816  0005B0  2EE8               	decfsz	wreg,f,c
 11817  0005B2  D7FE               	bra	u8167
 11818  0005B4  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11819  0005B6  D7FC               	bra	u8167
 11820  0005B8  F000               	nop	
 11821  0005BA  0100               	movlb	0	; () banked
 11822  0005BC  2BB8               	incf	actuatorTest@i_1665& (0+255),f,b
 11823  0005BE  D7EF               	goto	l7104
 11824  0005C0                     l7112:
 11825                           
 11826                           ; BSR set to: 0
 11827  0005C0  0E00               	movlw	0
 11828  0005C2  0100               	movlb	0	; () banked
 11829  0005C4  6FB9               	movwf	actuatorTest@i_1666& (0+255),b
 11830  0005C6                     l7114:
 11831                           
 11832                           ; BSR set to: 0
 11833  0005C6  0E63               	movlw	99
 11834  0005C8  0100               	movlb	0	; () banked
 11835  0005CA  65B9               	cpfsgt	actuatorTest@i_1666& (0+255),b
 11836  0005CC  D001               	goto	l7118
 11837  0005CE  D00C               	goto	l1147
 11838  0005D0                     l7118:
 11839                           
 11840                           ; BSR set to: 0
 11841  0005D0  0E68               	movlw	104
 11842  0005D2  0100               	movlb	0	; () banked
 11843  0005D4  6FAB               	movwf	??_actuatorTest& (0+255),b
 11844  0005D6  0EE4               	movlw	228
 11845  0005D8                     u8177:
 11846  0005D8  2EE8               	decfsz	wreg,f,c
 11847  0005DA  D7FE               	bra	u8177
 11848  0005DC  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11849  0005DE  D7FC               	bra	u8177
 11850  0005E0  F000               	nop	
 11851  0005E2  0100               	movlb	0	; () banked
 11852  0005E4  2BB9               	incf	actuatorTest@i_1666& (0+255),f,b
 11853  0005E6  D7EF               	goto	l7114
 11854  0005E8                     l1147:
 11855                           
 11856                           ; BSR set to: 0
 11857                           ;Test.c: 299: TMR1ON = 0;
 11858  0005E8  90CD               	bcf	4045,0,c	;volatile
 11859                           
 11860                           ; BSR set to: 0
 11861                           ;Test.c: 306: printf("TST: TILT SERVO");
 11862  0005EA  0E3A               	movlw	low STR_103
 11863  0005EC  0100               	movlb	0	; () banked
 11864  0005EE  6F8E               	movwf	printf@f& (0+255),b
 11865  0005F0  0EFE               	movlw	high STR_103
 11866  0005F2  0100               	movlb	0	; () banked
 11867  0005F4  6F8F               	movwf	(printf@f+1)& (0+255),b
 11868  0005F6  ECB8  F008         	call	_printf	;wreg free
 11869                           
 11870                           ;Test.c: 307: lcdInst(0b11000000);;
 11871  0005FA  0EC0               	movlw	192
 11872  0005FC  ECDC  F024         	call	_lcdInst
 11873                           
 11874                           ;Test.c: 308: printf("LEVEL -- 2s     ");
 11875  000600  0EE8               	movlw	low STR_104
 11876  000602  0100               	movlb	0	; () banked
 11877  000604  6F8E               	movwf	printf@f& (0+255),b
 11878  000606  0EFB               	movlw	high STR_104
 11879  000608  0100               	movlb	0	; () banked
 11880  00060A  6F8F               	movwf	(printf@f+1)& (0+255),b
 11881  00060C  ECB8  F008         	call	_printf	;wreg free
 11882                           
 11883                           ;Test.c: 309: updateServoPosition(1150, 3);
 11884  000610  0E04               	movlw	4
 11885  000612  0100               	movlb	0	; () banked
 11886  000614  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11887  000616  0E7E               	movlw	126
 11888  000618  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11889  00061A  0E00               	movlw	0
 11890  00061C  0100               	movlb	0	; () banked
 11891  00061E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11892  000620  0E03               	movlw	3
 11893  000622  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11894  000624  EC15  F01F         	call	_updateServoPosition	;wreg free
 11895                           
 11896                           ;Test.c: 310: TMR3ON = 1;
 11897  000628  80B1               	bsf	4017,0,c	;volatile
 11898                           
 11899                           ;Test.c: 311: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11900  00062A  0E00               	movlw	0
 11901  00062C  0100               	movlb	0	; () banked
 11902  00062E  6FBA               	movwf	actuatorTest@i_1669& (0+255),b
 11903  000630                     l7132:
 11904                           
 11905                           ; BSR set to: 0
 11906  000630  0E63               	movlw	99
 11907  000632  0100               	movlb	0	; () banked
 11908  000634  65BA               	cpfsgt	actuatorTest@i_1669& (0+255),b
 11909  000636  D001               	goto	l7136
 11910  000638  D00C               	goto	l7140
 11911  00063A                     l7136:
 11912                           
 11913                           ; BSR set to: 0
 11914  00063A  0E68               	movlw	104
 11915  00063C  0100               	movlb	0	; () banked
 11916  00063E  6FAB               	movwf	??_actuatorTest& (0+255),b
 11917  000640  0EE4               	movlw	228
 11918  000642                     u8187:
 11919  000642  2EE8               	decfsz	wreg,f,c
 11920  000644  D7FE               	bra	u8187
 11921  000646  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11922  000648  D7FC               	bra	u8187
 11923  00064A  F000               	nop	
 11924  00064C  0100               	movlb	0	; () banked
 11925  00064E  2BBA               	incf	actuatorTest@i_1669& (0+255),f,b
 11926  000650  D7EF               	goto	l7132
 11927  000652                     l7140:
 11928                           
 11929                           ; BSR set to: 0
 11930  000652  0E00               	movlw	0
 11931  000654  0100               	movlb	0	; () banked
 11932  000656  6FBB               	movwf	actuatorTest@i_1670& (0+255),b
 11933  000658                     l7142:
 11934                           
 11935                           ; BSR set to: 0
 11936  000658  0E63               	movlw	99
 11937  00065A  0100               	movlb	0	; () banked
 11938  00065C  65BB               	cpfsgt	actuatorTest@i_1670& (0+255),b
 11939  00065E  D001               	goto	l7146
 11940  000660  D00C               	goto	l7150
 11941  000662                     l7146:
 11942                           
 11943                           ; BSR set to: 0
 11944  000662  0E68               	movlw	104
 11945  000664  0100               	movlb	0	; () banked
 11946  000666  6FAB               	movwf	??_actuatorTest& (0+255),b
 11947  000668  0EE4               	movlw	228
 11948  00066A                     u8197:
 11949  00066A  2EE8               	decfsz	wreg,f,c
 11950  00066C  D7FE               	bra	u8197
 11951  00066E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11952  000670  D7FC               	bra	u8197
 11953  000672  F000               	nop	
 11954  000674  0100               	movlb	0	; () banked
 11955  000676  2BBB               	incf	actuatorTest@i_1670& (0+255),f,b
 11956  000678  D7EF               	goto	l7142
 11957  00067A                     l7150:
 11958                           
 11959                           ; BSR set to: 0
 11960                           ;Test.c: 313: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11961  00067A  0E80               	movlw	128
 11962  00067C  ECDC  F024         	call	_lcdInst
 11963  000680  0EC0               	movlw	192
 11964  000682  ECDC  F024         	call	_lcdInst
 11965                           
 11966                           ;Test.c: 314: printf("DROP -- 2s      ");
 11967  000686  0EC6               	movlw	low STR_105
 11968  000688  0100               	movlb	0	; () banked
 11969  00068A  6F8E               	movwf	printf@f& (0+255),b
 11970  00068C  0EFB               	movlw	high STR_105
 11971  00068E  0100               	movlb	0	; () banked
 11972  000690  6F8F               	movwf	(printf@f+1)& (0+255),b
 11973  000692  ECB8  F008         	call	_printf	;wreg free
 11974                           
 11975                           ;Test.c: 315: updateServoPosition(1200, 3);
 11976  000696  0E04               	movlw	4
 11977  000698  0100               	movlb	0	; () banked
 11978  00069A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11979  00069C  0EB0               	movlw	176
 11980  00069E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11981  0006A0  0E00               	movlw	0
 11982  0006A2  0100               	movlb	0	; () banked
 11983  0006A4  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11984  0006A6  0E03               	movlw	3
 11985  0006A8  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11986  0006AA  EC15  F01F         	call	_updateServoPosition	;wreg free
 11987                           
 11988                           ;Test.c: 316: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11989  0006AE  0E00               	movlw	0
 11990  0006B0  0100               	movlb	0	; () banked
 11991  0006B2  6FBC               	movwf	actuatorTest@i_1672& (0+255),b
 11992  0006B4                     l7158:
 11993                           
 11994                           ; BSR set to: 0
 11995  0006B4  0E63               	movlw	99
 11996  0006B6  0100               	movlb	0	; () banked
 11997  0006B8  65BC               	cpfsgt	actuatorTest@i_1672& (0+255),b
 11998  0006BA  D001               	goto	l7162
 11999  0006BC  D00C               	goto	l7166
 12000  0006BE                     l7162:
 12001                           
 12002                           ; BSR set to: 0
 12003  0006BE  0E68               	movlw	104
 12004  0006C0  0100               	movlb	0	; () banked
 12005  0006C2  6FAB               	movwf	??_actuatorTest& (0+255),b
 12006  0006C4  0EE4               	movlw	228
 12007  0006C6                     u8207:
 12008  0006C6  2EE8               	decfsz	wreg,f,c
 12009  0006C8  D7FE               	bra	u8207
 12010  0006CA  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12011  0006CC  D7FC               	bra	u8207
 12012  0006CE  F000               	nop	
 12013  0006D0  0100               	movlb	0	; () banked
 12014  0006D2  2BBC               	incf	actuatorTest@i_1672& (0+255),f,b
 12015  0006D4  D7EF               	goto	l7158
 12016  0006D6                     l7166:
 12017                           
 12018                           ; BSR set to: 0
 12019  0006D6  0E00               	movlw	0
 12020  0006D8  0100               	movlb	0	; () banked
 12021  0006DA  6FBD               	movwf	actuatorTest@i_1673& (0+255),b
 12022  0006DC                     l7168:
 12023                           
 12024                           ; BSR set to: 0
 12025  0006DC  0E63               	movlw	99
 12026  0006DE  0100               	movlb	0	; () banked
 12027  0006E0  65BD               	cpfsgt	actuatorTest@i_1673& (0+255),b
 12028  0006E2  D001               	goto	l7172
 12029  0006E4  D00C               	goto	l7176
 12030  0006E6                     l7172:
 12031                           
 12032                           ; BSR set to: 0
 12033  0006E6  0E68               	movlw	104
 12034  0006E8  0100               	movlb	0	; () banked
 12035  0006EA  6FAB               	movwf	??_actuatorTest& (0+255),b
 12036  0006EC  0EE4               	movlw	228
 12037  0006EE                     u8217:
 12038  0006EE  2EE8               	decfsz	wreg,f,c
 12039  0006F0  D7FE               	bra	u8217
 12040  0006F2  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12041  0006F4  D7FC               	bra	u8217
 12042  0006F6  F000               	nop	
 12043  0006F8  0100               	movlb	0	; () banked
 12044  0006FA  2BBD               	incf	actuatorTest@i_1673& (0+255),f,b
 12045  0006FC  D7EF               	goto	l7168
 12046  0006FE                     l7176:
 12047                           
 12048                           ; BSR set to: 0
 12049                           ;Test.c: 318: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12050  0006FE  0E80               	movlw	128
 12051  000700  ECDC  F024         	call	_lcdInst
 12052  000704  0EC0               	movlw	192
 12053  000706  ECDC  F024         	call	_lcdInst
 12054                           
 12055                           ;Test.c: 319: printf("LEVEL -- 2s     ");
 12056  00070A  0EE8               	movlw	low STR_104
 12057  00070C  0100               	movlb	0	; () banked
 12058  00070E  6F8E               	movwf	printf@f& (0+255),b
 12059  000710  0EFB               	movlw	high STR_104
 12060  000712  0100               	movlb	0	; () banked
 12061  000714  6F8F               	movwf	(printf@f+1)& (0+255),b
 12062  000716  ECB8  F008         	call	_printf	;wreg free
 12063                           
 12064                           ;Test.c: 320: updateServoPosition(1150, 3);
 12065  00071A  0E04               	movlw	4
 12066  00071C  0100               	movlb	0	; () banked
 12067  00071E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12068  000720  0E7E               	movlw	126
 12069  000722  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12070  000724  0E00               	movlw	0
 12071  000726  0100               	movlb	0	; () banked
 12072  000728  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12073  00072A  0E03               	movlw	3
 12074  00072C  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12075  00072E  EC15  F01F         	call	_updateServoPosition	;wreg free
 12076                           
 12077                           ;Test.c: 321: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12078  000732  0E00               	movlw	0
 12079  000734  0100               	movlb	0	; () banked
 12080  000736  6FBE               	movwf	actuatorTest@i_1675& (0+255),b
 12081  000738                     l7184:
 12082                           
 12083                           ; BSR set to: 0
 12084  000738  0E63               	movlw	99
 12085  00073A  0100               	movlb	0	; () banked
 12086  00073C  65BE               	cpfsgt	actuatorTest@i_1675& (0+255),b
 12087  00073E  D001               	goto	l7188
 12088  000740  D00C               	goto	l7192
 12089  000742                     l7188:
 12090                           
 12091                           ; BSR set to: 0
 12092  000742  0E68               	movlw	104
 12093  000744  0100               	movlb	0	; () banked
 12094  000746  6FAB               	movwf	??_actuatorTest& (0+255),b
 12095  000748  0EE4               	movlw	228
 12096  00074A                     u8227:
 12097  00074A  2EE8               	decfsz	wreg,f,c
 12098  00074C  D7FE               	bra	u8227
 12099  00074E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12100  000750  D7FC               	bra	u8227
 12101  000752  F000               	nop	
 12102  000754  0100               	movlb	0	; () banked
 12103  000756  2BBE               	incf	actuatorTest@i_1675& (0+255),f,b
 12104  000758  D7EF               	goto	l7184
 12105  00075A                     l7192:
 12106                           
 12107                           ; BSR set to: 0
 12108  00075A  0E00               	movlw	0
 12109  00075C  0100               	movlb	0	; () banked
 12110  00075E  6FBF               	movwf	actuatorTest@i_1676& (0+255),b
 12111  000760                     l7194:
 12112                           
 12113                           ; BSR set to: 0
 12114  000760  0E63               	movlw	99
 12115  000762  0100               	movlb	0	; () banked
 12116  000764  65BF               	cpfsgt	actuatorTest@i_1676& (0+255),b
 12117  000766  D001               	goto	l7198
 12118  000768  D00C               	goto	l1159
 12119  00076A                     l7198:
 12120                           
 12121                           ; BSR set to: 0
 12122  00076A  0E68               	movlw	104
 12123  00076C  0100               	movlb	0	; () banked
 12124  00076E  6FAB               	movwf	??_actuatorTest& (0+255),b
 12125  000770  0EE4               	movlw	228
 12126  000772                     u8237:
 12127  000772  2EE8               	decfsz	wreg,f,c
 12128  000774  D7FE               	bra	u8237
 12129  000776  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12130  000778  D7FC               	bra	u8237
 12131  00077A  F000               	nop	
 12132  00077C  0100               	movlb	0	; () banked
 12133  00077E  2BBF               	incf	actuatorTest@i_1676& (0+255),f,b
 12134  000780  D7EF               	goto	l7194
 12135  000782                     l1159:
 12136                           
 12137                           ; BSR set to: 0
 12138                           ;Test.c: 322: TMR3ON = 0;
 12139  000782  90B1               	bcf	4017,0,c	;volatile
 12140                           
 12141                           ;Test.c: 323: (INTCONbits.GIE = 0);
 12142  000784  9EF2               	bcf	intcon,7,c	;volatile
 12143                           
 12144                           ; BSR set to: 0
 12145                           ;Test.c: 328: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12146  000786  0E01               	movlw	1
 12147  000788  ECDC  F024         	call	_lcdInst
 12148  00078C  0E68               	movlw	104
 12149  00078E  0100               	movlb	0	; () banked
 12150  000790  6FAB               	movwf	??_actuatorTest& (0+255),b
 12151  000792  0EE4               	movlw	228
 12152  000794                     u8247:
 12153  000794  2EE8               	decfsz	wreg,f,c
 12154  000796  D7FE               	bra	u8247
 12155  000798  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12156  00079A  D7FC               	bra	u8247
 12157  00079C  F000               	nop	
 12158  00079E  0E80               	movlw	128
 12159  0007A0  ECDC  F024         	call	_lcdInst
 12160                           
 12161                           ;Test.c: 329: printf("TST: CAM SERVO");
 12162  0007A4  0E96               	movlw	low STR_107
 12163  0007A6  0100               	movlb	0	; () banked
 12164  0007A8  6F8E               	movwf	printf@f& (0+255),b
 12165  0007AA  0EFE               	movlw	high STR_107
 12166  0007AC  0100               	movlb	0	; () banked
 12167  0007AE  6F8F               	movwf	(printf@f+1)& (0+255),b
 12168  0007B0  ECB8  F008         	call	_printf	;wreg free
 12169                           
 12170                           ;Test.c: 330: lcdInst(0b11000000);;
 12171  0007B4  0EC0               	movlw	192
 12172  0007B6  ECDC  F024         	call	_lcdInst
 12173                           
 12174                           ;Test.c: 331: printf("CAM UP  |RC0=1");
 12175  0007BA  0E78               	movlw	low STR_108
 12176  0007BC  0100               	movlb	0	; () banked
 12177  0007BE  6F8E               	movwf	printf@f& (0+255),b
 12178  0007C0  0EFE               	movlw	high STR_108
 12179  0007C2  0100               	movlb	0	; () banked
 12180  0007C4  6F8F               	movwf	(printf@f+1)& (0+255),b
 12181  0007C6  ECB8  F008         	call	_printf	;wreg free
 12182                           
 12183                           ;Test.c: 332: LATCbits.LATC0 = 1;
 12184  0007CA  808B               	bsf	3979,0,c	;volatile
 12185                           
 12186                           ;Test.c: 333: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12187  0007CC  0E00               	movlw	0
 12188  0007CE  0100               	movlb	0	; () banked
 12189  0007D0  6FC0               	movwf	actuatorTest@i_1679& (0+255),b
 12190  0007D2                     l7218:
 12191                           
 12192                           ; BSR set to: 0
 12193  0007D2  0E63               	movlw	99
 12194  0007D4  0100               	movlb	0	; () banked
 12195  0007D6  65C0               	cpfsgt	actuatorTest@i_1679& (0+255),b
 12196  0007D8  D001               	goto	l7222
 12197  0007DA  D00C               	goto	l7226
 12198  0007DC                     l7222:
 12199                           
 12200                           ; BSR set to: 0
 12201  0007DC  0E68               	movlw	104
 12202  0007DE  0100               	movlb	0	; () banked
 12203  0007E0  6FAB               	movwf	??_actuatorTest& (0+255),b
 12204  0007E2  0EE4               	movlw	228
 12205  0007E4                     u8257:
 12206  0007E4  2EE8               	decfsz	wreg,f,c
 12207  0007E6  D7FE               	bra	u8257
 12208  0007E8  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12209  0007EA  D7FC               	bra	u8257
 12210  0007EC  F000               	nop	
 12211  0007EE  0100               	movlb	0	; () banked
 12212  0007F0  2BC0               	incf	actuatorTest@i_1679& (0+255),f,b
 12213  0007F2  D7EF               	goto	l7218
 12214  0007F4                     l7226:
 12215                           
 12216                           ; BSR set to: 0
 12217  0007F4  0E00               	movlw	0
 12218  0007F6  0100               	movlb	0	; () banked
 12219  0007F8  6FC1               	movwf	actuatorTest@i_1680& (0+255),b
 12220  0007FA                     l7228:
 12221                           
 12222                           ; BSR set to: 0
 12223  0007FA  0E63               	movlw	99
 12224  0007FC  0100               	movlb	0	; () banked
 12225  0007FE  65C1               	cpfsgt	actuatorTest@i_1680& (0+255),b
 12226  000800  D001               	goto	l7232
 12227  000802  D00C               	goto	l7236
 12228  000804                     l7232:
 12229                           
 12230                           ; BSR set to: 0
 12231  000804  0E68               	movlw	104
 12232  000806  0100               	movlb	0	; () banked
 12233  000808  6FAB               	movwf	??_actuatorTest& (0+255),b
 12234  00080A  0EE4               	movlw	228
 12235  00080C                     u8267:
 12236  00080C  2EE8               	decfsz	wreg,f,c
 12237  00080E  D7FE               	bra	u8267
 12238  000810  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12239  000812  D7FC               	bra	u8267
 12240  000814  F000               	nop	
 12241  000816  0100               	movlb	0	; () banked
 12242  000818  2BC1               	incf	actuatorTest@i_1680& (0+255),f,b
 12243  00081A  D7EF               	goto	l7228
 12244  00081C                     l7236:
 12245                           
 12246                           ; BSR set to: 0
 12247                           ;Test.c: 334: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12248  00081C  0E80               	movlw	128
 12249  00081E  ECDC  F024         	call	_lcdInst
 12250  000822  0EC0               	movlw	192
 12251  000824  ECDC  F024         	call	_lcdInst
 12252                           
 12253                           ;Test.c: 335: printf("CAM DWN |RC0=0");
 12254  000828  0E69               	movlw	low STR_109
 12255  00082A  0100               	movlb	0	; () banked
 12256  00082C  6F8E               	movwf	printf@f& (0+255),b
 12257  00082E  0EFE               	movlw	high STR_109
 12258  000830  0100               	movlb	0	; () banked
 12259  000832  6F8F               	movwf	(printf@f+1)& (0+255),b
 12260  000834  ECB8  F008         	call	_printf	;wreg free
 12261                           
 12262                           ;Test.c: 338: for(i=0;i<10000;i++)
 12263  000838  0E00               	movlw	0
 12264  00083A  0100               	movlb	0	; () banked
 12265  00083C  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 12266  00083E  0E00               	movlw	0
 12267  000840  6FC4               	movwf	actuatorTest@i& (0+255),b
 12268  000842                     l7242:
 12269                           
 12270                           ; BSR set to: 0
 12271  000842  0100               	movlb	0	; () banked
 12272  000844  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 12273  000846  D008               	goto	l1164
 12274  000848  0E10               	movlw	16
 12275  00084A  0100               	movlb	0	; () banked
 12276  00084C  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 12277  00084E  0E27               	movlw	39
 12278  000850  0100               	movlb	0	; () banked
 12279  000852  59C5               	subwfb	(actuatorTest@i+1)& (0+255),w,b
 12280  000854  B0D8               	btfsc	status,0,c
 12281  000856  D00D               	goto	l7252
 12282  000858                     l1164:
 12283                           
 12284                           ; BSR set to: 0
 12285                           ;Test.c: 339: {
 12286                           ;Test.c: 340: LATCbits.LATC0 = 1;
 12287  000858  808B               	bsf	3979,0,c	;volatile
 12288                           
 12289                           ; BSR set to: 0
 12290                           ;Test.c: 341: _delay((unsigned long)((10)*(32000000/4000000.0)));
 12291  00085A  0E1A               	movlw	26
 12292  00085C                     u8277:
 12293  00085C  2EE8               	decfsz	wreg,f,c
 12294  00085E  D7FE               	bra	u8277
 12295  000860  D000               	nop2	
 12296                           
 12297                           ;Test.c: 342: LATCbits.LATC0 = 0;
 12298  000862  908B               	bcf	3979,0,c	;volatile
 12299                           
 12300                           ;Test.c: 343: _delay((unsigned long)((90)*(32000000/4000000.0)));
 12301  000864  0EF0               	movlw	240
 12302  000866                     u8287:
 12303  000866  2EE8               	decfsz	wreg,f,c
 12304  000868  D7FE               	bra	u8287
 12305  00086A  0100               	movlb	0	; () banked
 12306  00086C  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 12307  00086E  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 12308  000870  D7E8               	goto	l7242
 12309  000872                     l7252:
 12310                           
 12311                           ; BSR set to: 0
 12312                           ;Test.c: 344: }
 12313                           ;Test.c: 346: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12314  000872  0E00               	movlw	0
 12315  000874  0100               	movlb	0	; () banked
 12316  000876  6FC2               	movwf	actuatorTest@i_1682& (0+255),b
 12317  000878                     l7254:
 12318                           
 12319                           ; BSR set to: 0
 12320  000878  0E63               	movlw	99
 12321  00087A  0100               	movlb	0	; () banked
 12322  00087C  65C2               	cpfsgt	actuatorTest@i_1682& (0+255),b
 12323  00087E  D001               	goto	l7258
 12324  000880  D00C               	goto	l7262
 12325  000882                     l7258:
 12326                           
 12327                           ; BSR set to: 0
 12328  000882  0E68               	movlw	104
 12329  000884  0100               	movlb	0	; () banked
 12330  000886  6FAB               	movwf	??_actuatorTest& (0+255),b
 12331  000888  0EE4               	movlw	228
 12332  00088A                     u8297:
 12333  00088A  2EE8               	decfsz	wreg,f,c
 12334  00088C  D7FE               	bra	u8297
 12335  00088E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12336  000890  D7FC               	bra	u8297
 12337  000892  F000               	nop	
 12338  000894  0100               	movlb	0	; () banked
 12339  000896  2BC2               	incf	actuatorTest@i_1682& (0+255),f,b
 12340  000898  D7EF               	goto	l7254
 12341  00089A                     l7262:
 12342                           
 12343                           ; BSR set to: 0
 12344  00089A  0E00               	movlw	0
 12345  00089C  0100               	movlb	0	; () banked
 12346  00089E  6FC3               	movwf	actuatorTest@i_1683& (0+255),b
 12347  0008A0                     l7264:
 12348                           
 12349                           ; BSR set to: 0
 12350  0008A0  0E63               	movlw	99
 12351  0008A2  0100               	movlb	0	; () banked
 12352  0008A4  65C3               	cpfsgt	actuatorTest@i_1683& (0+255),b
 12353  0008A6  D001               	goto	l7268
 12354  0008A8  D00C               	goto	l7272
 12355  0008AA                     l7268:
 12356                           
 12357                           ; BSR set to: 0
 12358  0008AA  0E68               	movlw	104
 12359  0008AC  0100               	movlb	0	; () banked
 12360  0008AE  6FAB               	movwf	??_actuatorTest& (0+255),b
 12361  0008B0  0EE4               	movlw	228
 12362  0008B2                     u8307:
 12363  0008B2  2EE8               	decfsz	wreg,f,c
 12364  0008B4  D7FE               	bra	u8307
 12365  0008B6  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12366  0008B8  D7FC               	bra	u8307
 12367  0008BA  F000               	nop	
 12368  0008BC  0100               	movlb	0	; () banked
 12369  0008BE  2BC3               	incf	actuatorTest@i_1683& (0+255),f,b
 12370  0008C0  D7EF               	goto	l7264
 12371  0008C2                     l7272:
 12372                           
 12373                           ; BSR set to: 0
 12374                           ;Test.c: 347: machine_state = Testing_state;
 12375  0008C2  0E03               	movlw	3
 12376  0008C4  0100               	movlb	0	; () banked
 12377  0008C6  6FFC               	movwf	_machine_state& (0+255),b
 12378                           
 12379                           ; BSR set to: 0
 12380  0008C8  0012               	return		;funcret
 12381  0008CA                     __end_of_actuatorTest:
 12382                           	opt stack 0
 12383                           tblptru	equ	0xFF8
 12384                           tblptrh	equ	0xFF7
 12385                           tblptrl	equ	0xFF6
 12386                           tablat	equ	0xFF5
 12387                           prodh	equ	0xFF4
 12388                           prodl	equ	0xFF3
 12389                           intcon	equ	0xFF2
 12390                           intcon2	equ	0xFF1
 12391                           intcon3	equ	0xFF0
 12392                           postinc0	equ	0xFEE
 12393                           wreg	equ	0xFE8
 12394                           postdec1	equ	0xFE5
 12395                           fsr1l	equ	0xFE1
 12396                           indf2	equ	0xFDF
 12397                           postinc2	equ	0xFDE
 12398                           postdec2	equ	0xFDD
 12399                           fsr2h	equ	0xFDA
 12400                           fsr2l	equ	0xFD9
 12401                           status	equ	0xFD8
 12402                           
 12403 ;; *************** function _SpeedTest *****************
 12404 ;; Defined at:
 12405 ;;		line 526 in file "Test.c"
 12406 ;; Parameters:    Size  Location     Type
 12407 ;;		None
 12408 ;; Auto vars:     Size  Location     Type
 12409 ;;		None
 12410 ;; Return value:  Size  Location     Type
 12411 ;;                  1    wreg      void 
 12412 ;; Registers used:
 12413 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12414 ;; Tracked objects:
 12415 ;;		On entry : 0/0
 12416 ;;		On exit  : 0/0
 12417 ;;		Unchanged: 0/0
 12418 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12419 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12420 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12421 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12422 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12423 ;;Total ram usage:        1 bytes
 12424 ;; Hardware stack levels used:    1
 12425 ;; Hardware stack levels required when called:   10
 12426 ;; This function calls:
 12427 ;;		_lcdInst
 12428 ;;		_printf
 12429 ;; This function is called by:
 12430 ;;		_Test
 12431 ;; This function uses a non-reentrant model
 12432 ;;
 12433                           
 12434                           	psect	text42
 12435  003CAA                     __ptext42:
 12436                           	opt stack 0
 12437  003CAA                     _SpeedTest:
 12438                           	opt stack 19
 12439                           
 12440                           ;Test.c: 528: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12441                           
 12442                           ; BSR set to: 0
 12443                           ;incstack = 0
 12444  003CAA  0E01               	movlw	1
 12445  003CAC  ECDC  F024         	call	_lcdInst
 12446  003CB0  0E68               	movlw	104
 12447  003CB2  0100               	movlb	0	; () banked
 12448  003CB4  6FAB               	movwf	??_SpeedTest& (0+255),b
 12449  003CB6  0EE4               	movlw	228
 12450  003CB8                     u8317:
 12451  003CB8  2EE8               	decfsz	wreg,f,c
 12452  003CBA  D7FE               	bra	u8317
 12453  003CBC  2FAB               	decfsz	??_SpeedTest& (0+255),f,b
 12454  003CBE  D7FC               	bra	u8317
 12455  003CC0  F000               	nop	
 12456  003CC2  0E80               	movlw	128
 12457  003CC4  ECDC  F024         	call	_lcdInst
 12458                           
 12459                           ;Test.c: 529: printf("S: D WILL RETURN ");
 12460  003CC8  0E6D               	movlw	low STR_116
 12461  003CCA  0100               	movlb	0	; () banked
 12462  003CCC  6F8E               	movwf	printf@f& (0+255),b
 12463  003CCE  0EFB               	movlw	high STR_116
 12464  003CD0  0100               	movlb	0	; () banked
 12465  003CD2  6F8F               	movwf	(printf@f+1)& (0+255),b
 12466  003CD4  ECB8  F008         	call	_printf	;wreg free
 12467                           
 12468                           ;Test.c: 530: lcdInst(0b11000000);;
 12469  003CD8  0EC0               	movlw	192
 12470  003CDA  ECDC  F024         	call	_lcdInst
 12471                           
 12472                           ;Test.c: 531: printf("OTHER SETS RA5   ");
 12473  003CDE  0E5B               	movlw	low STR_112
 12474  003CE0  0100               	movlb	0	; () banked
 12475  003CE2  6F8E               	movwf	printf@f& (0+255),b
 12476  003CE4  0EFB               	movlw	high STR_112
 12477  003CE6  0100               	movlb	0	; () banked
 12478  003CE8  6F8F               	movwf	(printf@f+1)& (0+255),b
 12479  003CEA  ECB8  F008         	call	_printf	;wreg free
 12480  003CEE                     l1247:
 12481  003CEE  A281               	btfss	3969,1,c	;volatile
 12482  003CF0  D7FE               	goto	l1247
 12483                           
 12484                           ;Test.c: 536: }
 12485                           ;Test.c: 537: if(PORTB >> 4 == 0b1111){
 12486  003CF2  3881               	swapf	3969,w,c	;volatile
 12487  003CF4  0B0F               	andlw	15
 12488  003CF6  0A0F               	xorlw	15
 12489  003CF8  B4D8               	btfsc	status,2,c
 12490  003CFA  0012               	return	
 12491  003CFC  D014               	goto	l7314
 12492  003CFE                     l1254:
 12493                           
 12494                           ;Test.c: 542: LATAbits.LATA5 = 1;
 12495  003CFE  8A89               	bsf	3977,5,c	;volatile
 12496                           
 12497                           ;Test.c: 543: _delay((unsigned long)((5)*(32000000/4000.0)));
 12498  003D00  0E34               	movlw	52
 12499  003D02  0100               	movlb	0	; () banked
 12500  003D04  6FAB               	movwf	??_SpeedTest& (0+255),b
 12501  003D06  0EF1               	movlw	241
 12502  003D08                     u8327:
 12503  003D08  2EE8               	decfsz	wreg,f,c
 12504  003D0A  D7FE               	bra	u8327
 12505  003D0C  2FAB               	decfsz	??_SpeedTest& (0+255),f,b
 12506  003D0E  D7FC               	bra	u8327
 12507  003D10  D000               	nop2	
 12508                           
 12509                           ;Test.c: 544: LATAbits.LATA5 = 0;
 12510  003D12  9A89               	bcf	3977,5,c	;volatile
 12511                           
 12512                           ;Test.c: 545: _delay((unsigned long)((5)*(32000000/4000.0)));
 12513  003D14  0E34               	movlw	52
 12514  003D16  0100               	movlb	0	; () banked
 12515  003D18  6FAB               	movwf	??_SpeedTest& (0+255),b
 12516  003D1A  0EF1               	movlw	241
 12517  003D1C                     u8337:
 12518  003D1C  2EE8               	decfsz	wreg,f,c
 12519  003D1E  D7FE               	bra	u8337
 12520  003D20  2FAB               	decfsz	??_SpeedTest& (0+255),f,b
 12521  003D22  D7FC               	bra	u8337
 12522  003D24  D000               	nop2	
 12523  003D26                     l7314:
 12524  003D26  B281               	btfsc	3969,1,c	;volatile
 12525  003D28  D7EA               	goto	l1254
 12526                           
 12527                           ;Test.c: 548: }
 12528                           ;Test.c: 549: LATAbits.LATA5 = 0;
 12529  003D2A  9A89               	bcf	3977,5,c	;volatile
 12530  003D2C  D7E0               	goto	l1247
 12531  003D2E                     __end_of_SpeedTest:
 12532                           	opt stack 0
 12533                           tblptru	equ	0xFF8
 12534                           tblptrh	equ	0xFF7
 12535                           tblptrl	equ	0xFF6
 12536                           tablat	equ	0xFF5
 12537                           prodh	equ	0xFF4
 12538                           prodl	equ	0xFF3
 12539                           intcon	equ	0xFF2
 12540                           intcon2	equ	0xFF1
 12541                           intcon3	equ	0xFF0
 12542                           postinc0	equ	0xFEE
 12543                           wreg	equ	0xFE8
 12544                           postdec1	equ	0xFE5
 12545                           fsr1l	equ	0xFE1
 12546                           indf2	equ	0xFDF
 12547                           postinc2	equ	0xFDE
 12548                           postdec2	equ	0xFDD
 12549                           fsr2h	equ	0xFDA
 12550                           fsr2l	equ	0xFD9
 12551                           status	equ	0xFD8
 12552                           
 12553 ;; *************** function _PusherTest *****************
 12554 ;; Defined at:
 12555 ;;		line 465 in file "Test.c"
 12556 ;; Parameters:    Size  Location     Type
 12557 ;;		None
 12558 ;; Auto vars:     Size  Location     Type
 12559 ;;  i               2   46[BANK0 ] int 
 12560 ;;  i               2   44[BANK0 ] int 
 12561 ;; Return value:  Size  Location     Type
 12562 ;;                  1    wreg      void 
 12563 ;; Registers used:
 12564 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12565 ;; Tracked objects:
 12566 ;;		On entry : 0/0
 12567 ;;		On exit  : 0/0
 12568 ;;		Unchanged: 0/0
 12569 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12570 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12571 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12572 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12573 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12574 ;;Total ram usage:        5 bytes
 12575 ;; Hardware stack levels used:    1
 12576 ;; Hardware stack levels required when called:   10
 12577 ;; This function calls:
 12578 ;;		_lcdInst
 12579 ;;		_printf
 12580 ;; This function is called by:
 12581 ;;		_Test
 12582 ;; This function uses a non-reentrant model
 12583 ;;
 12584                           
 12585                           	psect	text43
 12586  003680                     __ptext43:
 12587                           	opt stack 0
 12588  003680                     _PusherTest:
 12589                           	opt stack 19
 12590                           
 12591                           ;Test.c: 466: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12592                           
 12593                           ;incstack = 0
 12594  003680  0E01               	movlw	1
 12595  003682  ECDC  F024         	call	_lcdInst
 12596  003686  0E68               	movlw	104
 12597  003688  0100               	movlb	0	; () banked
 12598  00368A  6FAB               	movwf	??_PusherTest& (0+255),b
 12599  00368C  0EE4               	movlw	228
 12600  00368E                     u8347:
 12601  00368E  2EE8               	decfsz	wreg,f,c
 12602  003690  D7FE               	bra	u8347
 12603  003692  2FAB               	decfsz	??_PusherTest& (0+255),f,b
 12604  003694  D7FC               	bra	u8347
 12605  003696  F000               	nop	
 12606  003698  0E80               	movlw	128
 12607  00369A  ECDC  F024         	call	_lcdInst
 12608                           
 12609                           ;Test.c: 467: printf("PUSHER TST");
 12610  00369E  0E71               	movlw	low STR_113
 12611  0036A0  0100               	movlb	0	; () banked
 12612  0036A2  6F8E               	movwf	printf@f& (0+255),b
 12613  0036A4  0EFF               	movlw	high STR_113
 12614  0036A6  0100               	movlb	0	; () banked
 12615  0036A8  6F8F               	movwf	(printf@f+1)& (0+255),b
 12616  0036AA  ECB8  F008         	call	_printf	;wreg free
 12617  0036AE                     l1212:
 12618  0036AE  A281               	btfss	3969,1,c	;volatile
 12619  0036B0  D7FE               	goto	l1212
 12620                           
 12621                           ;Test.c: 473: }
 12622                           ;Test.c: 474: if(PORTB >> 4 == 0b1111){
 12623  0036B2  3881               	swapf	3969,w,c	;volatile
 12624  0036B4  0B0F               	andlw	15
 12625  0036B6  0A0F               	xorlw	15
 12626  0036B8  B4D8               	btfsc	status,2,c
 12627  0036BA  0012               	return	
 12628                           
 12629                           ;Test.c: 479: else if(PORTB >> 4 == 0b0101){
 12630                           
 12631                           ;Test.c: 476: }
 12632                           
 12633                           ;Test.c: 475: break;
 12634  0036BC  3881               	swapf	3969,w,c	;volatile
 12635  0036BE  0B0F               	andlw	15
 12636  0036C0  0A05               	xorlw	5
 12637  0036C2  A4D8               	btfss	status,2,c
 12638  0036C4  D01D               	goto	l7344
 12639                           
 12640                           ;Test.c: 480: for(int i = 0; i<3000; i++){
 12641  0036C6  0E00               	movlw	0
 12642  0036C8  0100               	movlb	0	; () banked
 12643  0036CA  6FAD               	movwf	(PusherTest@i+1)& (0+255),b
 12644  0036CC  0E00               	movlw	0
 12645  0036CE  6FAC               	movwf	PusherTest@i& (0+255),b
 12646  0036D0                     l7334:
 12647                           
 12648                           ; BSR set to: 0
 12649  0036D0  0100               	movlb	0	; () banked
 12650  0036D2  BFAD               	btfsc	(PusherTest@i+1)& (0+255),7,b
 12651  0036D4  D008               	goto	l1219
 12652  0036D6  0EB8               	movlw	184
 12653  0036D8  0100               	movlb	0	; () banked
 12654  0036DA  5DAC               	subwf	PusherTest@i& (0+255),w,b
 12655  0036DC  0E0B               	movlw	11
 12656  0036DE  0100               	movlb	0	; () banked
 12657  0036E0  59AD               	subwfb	(PusherTest@i+1)& (0+255),w,b
 12658  0036E2  B0D8               	btfsc	status,0,c
 12659  0036E4  D02F               	goto	l1225
 12660  0036E6                     l1219:
 12661                           
 12662                           ; BSR set to: 0
 12663                           ;Test.c: 481: LATAbits.LATA4 = 1;
 12664  0036E6  8889               	bsf	3977,4,c	;volatile
 12665                           
 12666                           ; BSR set to: 0
 12667                           ;Test.c: 482: _delay((unsigned long)((75)*(32000000/4000000.0)));
 12668  0036E8  0EC8               	movlw	200
 12669  0036EA                     u8357:
 12670  0036EA  2EE8               	decfsz	wreg,f,c
 12671  0036EC  D7FE               	bra	u8357
 12672                           
 12673                           ;Test.c: 483: LATAbits.LATA4 = 0;
 12674  0036EE  9889               	bcf	3977,4,c	;volatile
 12675                           
 12676                           ;Test.c: 484: _delay((unsigned long)((25)*(32000000/4000000.0)));
 12677  0036F0  0E42               	movlw	66
 12678  0036F2                     u8367:
 12679  0036F2  2EE8               	decfsz	wreg,f,c
 12680  0036F4  D7FE               	bra	u8367
 12681  0036F6  D000               	nop2	
 12682  0036F8  0100               	movlb	0	; () banked
 12683  0036FA  4BAC               	infsnz	PusherTest@i& (0+255),f,b
 12684  0036FC  2BAD               	incf	(PusherTest@i+1)& (0+255),f,b
 12685  0036FE  D7E8               	goto	l7334
 12686  003700                     l7344:
 12687                           
 12688                           ;Test.c: 487: else if (PORTB >> 4 == 0b110){
 12689  003700  3881               	swapf	3969,w,c	;volatile
 12690  003702  0B0F               	andlw	15
 12691  003704  0A06               	xorlw	6
 12692  003706  A4D8               	btfss	status,2,c
 12693  003708  D01D               	goto	l1225
 12694                           
 12695                           ;Test.c: 488: for(int i = 0; i<3000; i++){
 12696  00370A  0E00               	movlw	0
 12697  00370C  0100               	movlb	0	; () banked
 12698  00370E  6FAF               	movwf	(PusherTest@i_1696+1)& (0+255),b
 12699  003710  0E00               	movlw	0
 12700  003712  6FAE               	movwf	PusherTest@i_1696& (0+255),b
 12701  003714                     l7348:
 12702                           
 12703                           ; BSR set to: 0
 12704  003714  0100               	movlb	0	; () banked
 12705  003716  BFAF               	btfsc	(PusherTest@i_1696+1)& (0+255),7,b
 12706  003718  D008               	goto	l1223
 12707  00371A  0EB8               	movlw	184
 12708  00371C  0100               	movlb	0	; () banked
 12709  00371E  5DAE               	subwf	PusherTest@i_1696& (0+255),w,b
 12710  003720  0E0B               	movlw	11
 12711  003722  0100               	movlb	0	; () banked
 12712  003724  59AF               	subwfb	(PusherTest@i_1696+1)& (0+255),w,b
 12713  003726  B0D8               	btfsc	status,0,c
 12714  003728  D00D               	goto	l1225
 12715  00372A                     l1223:
 12716                           
 12717                           ; BSR set to: 0
 12718                           ;Test.c: 489: LATAbits.LATA4 = 1;
 12719  00372A  8889               	bsf	3977,4,c	;volatile
 12720                           
 12721                           ; BSR set to: 0
 12722                           ;Test.c: 490: _delay((unsigned long)((58)*(32000000/4000000.0)));
 12723  00372C  0E9A               	movlw	154
 12724  00372E                     u8377:
 12725  00372E  2EE8               	decfsz	wreg,f,c
 12726  003730  D7FE               	bra	u8377
 12727  003732  D000               	nop2	
 12728                           
 12729                           ;Test.c: 491: LATAbits.LATA4 = 0;
 12730  003734  9889               	bcf	3977,4,c	;volatile
 12731                           
 12732                           ;Test.c: 492: _delay((unsigned long)((42)*(32000000/4000000.0)));
 12733  003736  0E70               	movlw	112
 12734  003738                     u8387:
 12735  003738  2EE8               	decfsz	wreg,f,c
 12736  00373A  D7FE               	bra	u8387
 12737  00373C  0100               	movlb	0	; () banked
 12738  00373E  4BAE               	infsnz	PusherTest@i_1696& (0+255),f,b
 12739  003740  2BAF               	incf	(PusherTest@i_1696+1)& (0+255),f,b
 12740  003742  D7E8               	goto	l7348
 12741  003744                     l1225:
 12742  003744  A281               	btfss	3969,1,c	;volatile
 12743  003746  D7B3               	goto	l1212
 12744  003748  D7FD               	goto	l1225
 12745  00374A                     __end_of_PusherTest:
 12746                           	opt stack 0
 12747                           tblptru	equ	0xFF8
 12748                           tblptrh	equ	0xFF7
 12749                           tblptrl	equ	0xFF6
 12750                           tablat	equ	0xFF5
 12751                           prodh	equ	0xFF4
 12752                           prodl	equ	0xFF3
 12753                           intcon	equ	0xFF2
 12754                           intcon2	equ	0xFF1
 12755                           intcon3	equ	0xFF0
 12756                           postinc0	equ	0xFEE
 12757                           wreg	equ	0xFE8
 12758                           postdec1	equ	0xFE5
 12759                           fsr1l	equ	0xFE1
 12760                           indf2	equ	0xFDF
 12761                           postinc2	equ	0xFDE
 12762                           postdec2	equ	0xFDD
 12763                           fsr2h	equ	0xFDA
 12764                           fsr2l	equ	0xFD9
 12765                           status	equ	0xFD8
 12766                           
 12767 ;; *************** function _PortTests *****************
 12768 ;; Defined at:
 12769 ;;		line 407 in file "Test.c"
 12770 ;; Parameters:    Size  Location     Type
 12771 ;;		None
 12772 ;; Auto vars:     Size  Location     Type
 12773 ;;		None
 12774 ;; Return value:  Size  Location     Type
 12775 ;;                  1    wreg      void 
 12776 ;; Registers used:
 12777 ;;		wreg, status,2, status,0
 12778 ;; Tracked objects:
 12779 ;;		On entry : 0/0
 12780 ;;		On exit  : 0/0
 12781 ;;		Unchanged: 0/0
 12782 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12783 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12784 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12785 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12786 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12787 ;;Total ram usage:        2 bytes
 12788 ;; Hardware stack levels used:    1
 12789 ;; Hardware stack levels required when called:    7
 12790 ;; This function calls:
 12791 ;;		Nothing
 12792 ;; This function is called by:
 12793 ;;		_Test
 12794 ;; This function uses a non-reentrant model
 12795 ;;
 12796                           
 12797                           	psect	text44
 12798  003D2E                     __ptext44:
 12799                           	opt stack 0
 12800  003D2E                     _PortTests:
 12801                           	opt stack 22
 12802  003D2E                     l1177:
 12803  003D2E  A281               	btfss	3969,1,c	;volatile
 12804  003D30  D7FE               	goto	l1177
 12805                           
 12806                           ;Test.c: 411: var = PORTB >> 4;
 12807  003D32  CF81 F080          	movff	3969,??_PortTests	;volatile
 12808  003D36  0100               	movlb	0	; () banked
 12809  003D38  3B80               	swapf	??_PortTests& (0+255),f,b
 12810  003D3A  0E0F               	movlw	15
 12811  003D3C  1780               	andwf	??_PortTests& (0+255),f,b
 12812  003D3E  0100               	movlb	0	; () banked
 12813  003D40  5180               	movf	??_PortTests& (0+255),w,b
 12814  003D42  0100               	movlb	0	; () banked
 12815  003D44  6FFA               	movwf	_var& (0+255),b
 12816  003D46  6BFB               	clrf	(_var+1)& (0+255),b
 12817                           
 12818                           ;Test.c: 412: switch(var){
 12819  003D48  D00C               	goto	l7362
 12820  003D4A                     l1181:
 12821                           
 12822                           ; BSR set to: 0
 12823                           ;Test.c: 414: LATEbits.LATE0 = 1;
 12824  003D4A  808D               	bsf	3981,0,c	;volatile
 12825                           
 12826                           ;Test.c: 415: break;
 12827  003D4C  D027               	goto	l1189
 12828  003D4E                     l1183:
 12829                           
 12830                           ; BSR set to: 0
 12831                           ;Test.c: 417: LATEbits.LATE1 = 1;
 12832  003D4E  828D               	bsf	3981,1,c	;volatile
 12833                           
 12834                           ;Test.c: 418: break;
 12835  003D50  D025               	goto	l1189
 12836  003D52                     l1184:
 12837                           
 12838                           ; BSR set to: 0
 12839                           ;Test.c: 420: LATDbits.LATD0 = 1;
 12840  003D52  808C               	bsf	3980,0,c	;volatile
 12841                           
 12842                           ;Test.c: 421: break;
 12843  003D54  D023               	goto	l1189
 12844  003D56                     l1185:
 12845                           
 12846                           ; BSR set to: 0
 12847                           ;Test.c: 423: LATAbits.LATA3 = 1;
 12848  003D56  8689               	bsf	3977,3,c	;volatile
 12849                           
 12850                           ;Test.c: 424: break;
 12851  003D58  D021               	goto	l1189
 12852  003D5A                     l1186:
 12853                           
 12854                           ; BSR set to: 0
 12855                           ;Test.c: 426: LATAbits.LATA4 = 1;
 12856  003D5A  8889               	bsf	3977,4,c	;volatile
 12857                           
 12858                           ;Test.c: 427: break;
 12859  003D5C  D01F               	goto	l1189
 12860  003D5E                     l1187:
 12861                           
 12862                           ; BSR set to: 0
 12863                           ;Test.c: 429: LATAbits.LATA5 = 1;
 12864  003D5E  8A89               	bsf	3977,5,c	;volatile
 12865                           
 12866                           ; BSR set to: 0
 12867                           ;Test.c: 433: }
 12868                           
 12869                           ; BSR set to: 0
 12870                           ;Test.c: 432: break;
 12871                           
 12872                           ;Test.c: 431: default:
 12873                           
 12874                           ;Test.c: 430: break;
 12875  003D60  D01D               	goto	l1189
 12876  003D62                     l7362:
 12877                           
 12878                           ; BSR set to: 0
 12879  003D62  C0FA  F080         	movff	_var,??_PortTests
 12880  003D66  C0FB  F081         	movff	_var+1,??_PortTests+1
 12881                           
 12882                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 12883                           ; Switch size 1, requested type "space"
 12884                           ; Number of cases is 1, Range of values is 0 to 0
 12885                           ; switch strategies available:
 12886                           ; Name         Instructions Cycles
 12887                           ; simple_byte            4     3 (average)
 12888                           ;	Chosen strategy is simple_byte
 12889  003D6A  0100               	movlb	0	; () banked
 12890  003D6C  5181               	movf	(??_PortTests+1)& (0+255),w,b
 12891  003D6E  0A00               	xorlw	0	; case 0
 12892  003D70  A4D8               	btfss	status,2,c
 12893  003D72  D014               	goto	l1189
 12894                           
 12895                           ; BSR set to: 0
 12896                           ; Switch size 1, requested type "space"
 12897                           ; Number of cases is 6, Range of values is 0 to 5
 12898                           ; switch strategies available:
 12899                           ; Name         Instructions Cycles
 12900                           ; simple_byte           19    10 (average)
 12901                           ;	Chosen strategy is simple_byte
 12902  003D74  0100               	movlb	0	; () banked
 12903  003D76  5180               	movf	??_PortTests& (0+255),w,b
 12904  003D78  0A00               	xorlw	0	; case 0
 12905  003D7A  B4D8               	btfsc	status,2,c
 12906  003D7C  D7E6               	goto	l1181
 12907  003D7E  0A01               	xorlw	1	; case 1
 12908  003D80  B4D8               	btfsc	status,2,c
 12909  003D82  D7E5               	goto	l1183
 12910  003D84  0A03               	xorlw	3	; case 2
 12911  003D86  B4D8               	btfsc	status,2,c
 12912  003D88  D7E4               	goto	l1184
 12913  003D8A  0A01               	xorlw	1	; case 3
 12914  003D8C  B4D8               	btfsc	status,2,c
 12915  003D8E  D7E3               	goto	l1185
 12916  003D90  0A07               	xorlw	7	; case 4
 12917  003D92  B4D8               	btfsc	status,2,c
 12918  003D94  D7E2               	goto	l1186
 12919  003D96  0A01               	xorlw	1	; case 5
 12920  003D98  B4D8               	btfsc	status,2,c
 12921  003D9A  D7E1               	goto	l1187
 12922  003D9C                     l1189:
 12923  003D9C  B281               	btfsc	3969,1,c	;volatile
 12924  003D9E  D7FE               	goto	l1189
 12925                           
 12926                           ;Test.c: 435: __nop();
 12927  003DA0  F000               	nop	
 12928                           
 12929                           ;Test.c: 436: __nop();
 12930  003DA2  F000               	nop	
 12931                           
 12932                           ;Test.c: 437: LATA = 0x00;
 12933  003DA4  0E00               	movlw	0
 12934  003DA6  6E89               	movwf	3977,c	;volatile
 12935                           
 12936                           ;Test.c: 438: LATE = 0x00;
 12937  003DA8  0E00               	movlw	0
 12938  003DAA  6E8D               	movwf	3981,c	;volatile
 12939                           
 12940                           ;Test.c: 439: LATD = 0x00; }
 12941  003DAC  0E00               	movlw	0
 12942  003DAE  6E8C               	movwf	3980,c	;volatile
 12943  003DB0  D7BE               	goto	l1177
 12944  003DB2                     __end_of_PortTests:
 12945                           	opt stack 0
 12946                           tblptru	equ	0xFF8
 12947                           tblptrh	equ	0xFF7
 12948                           tblptrl	equ	0xFF6
 12949                           tablat	equ	0xFF5
 12950                           prodh	equ	0xFF4
 12951                           prodl	equ	0xFF3
 12952                           intcon	equ	0xFF2
 12953                           intcon2	equ	0xFF1
 12954                           intcon3	equ	0xFF0
 12955                           postinc0	equ	0xFEE
 12956                           wreg	equ	0xFE8
 12957                           postdec1	equ	0xFE5
 12958                           fsr1l	equ	0xFE1
 12959                           indf2	equ	0xFDF
 12960                           postinc2	equ	0xFDE
 12961                           postdec2	equ	0xFDD
 12962                           fsr2h	equ	0xFDA
 12963                           fsr2l	equ	0xFD9
 12964                           status	equ	0xFD8
 12965                           
 12966 ;; *************** function _PortTestA5 *****************
 12967 ;; Defined at:
 12968 ;;		line 442 in file "Test.c"
 12969 ;; Parameters:    Size  Location     Type
 12970 ;;		None
 12971 ;; Auto vars:     Size  Location     Type
 12972 ;;		None
 12973 ;; Return value:  Size  Location     Type
 12974 ;;                  1    wreg      void 
 12975 ;; Registers used:
 12976 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12977 ;; Tracked objects:
 12978 ;;		On entry : 0/0
 12979 ;;		On exit  : 0/0
 12980 ;;		Unchanged: 0/0
 12981 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12982 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12983 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12984 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12985 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12986 ;;Total ram usage:        1 bytes
 12987 ;; Hardware stack levels used:    1
 12988 ;; Hardware stack levels required when called:   10
 12989 ;; This function calls:
 12990 ;;		_lcdInst
 12991 ;;		_printf
 12992 ;; This function is called by:
 12993 ;;		_Test
 12994 ;; This function uses a non-reentrant model
 12995 ;;
 12996                           
 12997                           	psect	text45
 12998  004100                     __ptext45:
 12999                           	opt stack 0
 13000  004100                     _PortTestA5:
 13001                           	opt stack 19
 13002                           
 13003                           ;Test.c: 443: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13004                           
 13005                           ;incstack = 0
 13006  004100  0E01               	movlw	1
 13007  004102  ECDC  F024         	call	_lcdInst
 13008  004106  0E68               	movlw	104
 13009  004108  0100               	movlb	0	; () banked
 13010  00410A  6FAB               	movwf	??_PortTestA5& (0+255),b
 13011  00410C  0EE4               	movlw	228
 13012  00410E                     u8397:
 13013  00410E  2EE8               	decfsz	wreg,f,c
 13014  004110  D7FE               	bra	u8397
 13015  004112  2FAB               	decfsz	??_PortTestA5& (0+255),f,b
 13016  004114  D7FC               	bra	u8397
 13017  004116  F000               	nop	
 13018  004118  0E80               	movlw	128
 13019  00411A  ECDC  F024         	call	_lcdInst
 13020                           
 13021                           ;Test.c: 444: printf("D WILL RETURN    ");
 13022  00411E  0E49               	movlw	low STR_111
 13023  004120  0100               	movlb	0	; () banked
 13024  004122  6F8E               	movwf	printf@f& (0+255),b
 13025  004124  0EFB               	movlw	high STR_111
 13026  004126  0100               	movlb	0	; () banked
 13027  004128  6F8F               	movwf	(printf@f+1)& (0+255),b
 13028  00412A  ECB8  F008         	call	_printf	;wreg free
 13029                           
 13030                           ;Test.c: 445: lcdInst(0b11000000);;
 13031  00412E  0EC0               	movlw	192
 13032  004130  ECDC  F024         	call	_lcdInst
 13033                           
 13034                           ;Test.c: 446: printf("OTHER SETS RA5   ");
 13035  004134  0E5B               	movlw	low STR_112
 13036  004136  0100               	movlb	0	; () banked
 13037  004138  6F8E               	movwf	printf@f& (0+255),b
 13038  00413A  0EFB               	movlw	high STR_112
 13039  00413C  0100               	movlb	0	; () banked
 13040  00413E  6F8F               	movwf	(printf@f+1)& (0+255),b
 13041  004140  ECB8  F008         	call	_printf	;wreg free
 13042  004144                     l1198:
 13043  004144  A281               	btfss	3969,1,c	;volatile
 13044  004146  D7FE               	goto	l1198
 13045                           
 13046                           ;Test.c: 451: }
 13047                           ;Test.c: 452: if(PORTB >> 4 == 0b1111){
 13048  004148  3881               	swapf	3969,w,c	;volatile
 13049  00414A  0B0F               	andlw	15
 13050  00414C  0A0F               	xorlw	15
 13051  00414E  B4D8               	btfsc	status,2,c
 13052  004150  0012               	return	
 13053                           
 13054                           ;Test.c: 455: else{
 13055                           ;Test.c: 456: LATAbits.LATA5 = 1;
 13056                           
 13057                           ;Test.c: 454: }
 13058                           
 13059                           ;Test.c: 453: break;
 13060  004152  8A89               	bsf	3977,5,c	;volatile
 13061  004154                     l1204:
 13062  004154  B281               	btfsc	3969,1,c	;volatile
 13063  004156  D7FE               	goto	l1204
 13064                           
 13065                           ;Test.c: 459: }
 13066                           ;Test.c: 460: LATAbits.LATA5 = 0;
 13067  004158  9A89               	bcf	3977,5,c	;volatile
 13068  00415A  D7F4               	goto	l1198
 13069  00415C                     __end_of_PortTestA5:
 13070                           	opt stack 0
 13071                           tblptru	equ	0xFF8
 13072                           tblptrh	equ	0xFF7
 13073                           tblptrl	equ	0xFF6
 13074                           tablat	equ	0xFF5
 13075                           prodh	equ	0xFF4
 13076                           prodl	equ	0xFF3
 13077                           intcon	equ	0xFF2
 13078                           intcon2	equ	0xFF1
 13079                           intcon3	equ	0xFF0
 13080                           postinc0	equ	0xFEE
 13081                           wreg	equ	0xFE8
 13082                           postdec1	equ	0xFE5
 13083                           fsr1l	equ	0xFE1
 13084                           indf2	equ	0xFDF
 13085                           postinc2	equ	0xFDE
 13086                           postdec2	equ	0xFDD
 13087                           fsr2h	equ	0xFDA
 13088                           fsr2l	equ	0xFD9
 13089                           status	equ	0xFD8
 13090                           
 13091 ;; *************** function _EEPROMTest *****************
 13092 ;; Defined at:
 13093 ;;		line 554 in file "Test.c"
 13094 ;; Parameters:    Size  Location     Type
 13095 ;;		None
 13096 ;; Auto vars:     Size  Location     Type
 13097 ;;		None
 13098 ;; Return value:  Size  Location     Type
 13099 ;;                  1    wreg      void 
 13100 ;; Registers used:
 13101 ;;		None
 13102 ;; Tracked objects:
 13103 ;;		On entry : 0/0
 13104 ;;		On exit  : 0/0
 13105 ;;		Unchanged: 0/0
 13106 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13107 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13108 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13109 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13110 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13111 ;;Total ram usage:        0 bytes
 13112 ;; Hardware stack levels used:    1
 13113 ;; Hardware stack levels required when called:    7
 13114 ;; This function calls:
 13115 ;;		Nothing
 13116 ;; This function is called by:
 13117 ;;		_Test
 13118 ;; This function uses a non-reentrant model
 13119 ;;
 13120                           
 13121                           	psect	text46
 13122  004A1C                     __ptext46:
 13123                           	opt stack 0
 13124  004A1C                     _EEPROMTest:
 13125                           	opt stack 22
 13126                           
 13127                           ;incstack = 0
 13128  004A1C  0012               	return		;funcret
 13129  004A1E                     __end_of_EEPROMTest:
 13130                           	opt stack 0
 13131                           tblptru	equ	0xFF8
 13132                           tblptrh	equ	0xFF7
 13133                           tblptrl	equ	0xFF6
 13134                           tablat	equ	0xFF5
 13135                           prodh	equ	0xFF4
 13136                           prodl	equ	0xFF3
 13137                           intcon	equ	0xFF2
 13138                           intcon2	equ	0xFF1
 13139                           intcon3	equ	0xFF0
 13140                           postinc0	equ	0xFEE
 13141                           wreg	equ	0xFE8
 13142                           postdec1	equ	0xFE5
 13143                           fsr1l	equ	0xFE1
 13144                           indf2	equ	0xFDF
 13145                           postinc2	equ	0xFDE
 13146                           postdec2	equ	0xFDD
 13147                           fsr2h	equ	0xFDA
 13148                           fsr2l	equ	0xFD9
 13149                           status	equ	0xFD8
 13150                           
 13151 ;; *************** function _BothServos *****************
 13152 ;; Defined at:
 13153 ;;		line 350 in file "Test.c"
 13154 ;; Parameters:    Size  Location     Type
 13155 ;;		None
 13156 ;; Auto vars:     Size  Location     Type
 13157 ;;		None
 13158 ;; Return value:  Size  Location     Type
 13159 ;;                  1    wreg      void 
 13160 ;; Registers used:
 13161 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13162 ;; Tracked objects:
 13163 ;;		On entry : 0/0
 13164 ;;		On exit  : 0/0
 13165 ;;		Unchanged: 0/0
 13166 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13167 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13168 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13169 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13170 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13171 ;;Total ram usage:        2 bytes
 13172 ;; Hardware stack levels used:    1
 13173 ;; Hardware stack levels required when called:   10
 13174 ;; This function calls:
 13175 ;;		_initServos
 13176 ;;		_lcdInst
 13177 ;;		_printf
 13178 ;;		_updateServoPosition
 13179 ;; This function is called by:
 13180 ;;		_Test
 13181 ;; This function uses a non-reentrant model
 13182 ;;
 13183                           
 13184                           	psect	text47
 13185  0015A8                     __ptext47:
 13186                           	opt stack 0
 13187  0015A8                     _BothServos:
 13188                           	opt stack 19
 13189                           
 13190                           ;Test.c: 351: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13191                           
 13192                           ;incstack = 0
 13193  0015A8  0E01               	movlw	1
 13194  0015AA  ECDC  F024         	call	_lcdInst
 13195  0015AE  0E68               	movlw	104
 13196  0015B0  0100               	movlb	0	; () banked
 13197  0015B2  6FAB               	movwf	??_BothServos& (0+255),b
 13198  0015B4  0EE4               	movlw	228
 13199  0015B6                     u8407:
 13200  0015B6  2EE8               	decfsz	wreg,f,c
 13201  0015B8  D7FE               	bra	u8407
 13202  0015BA  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13203  0015BC  D7FC               	bra	u8407
 13204  0015BE  F000               	nop	
 13205  0015C0  0E80               	movlw	128
 13206  0015C2  ECDC  F024         	call	_lcdInst
 13207                           
 13208                           ;Test.c: 352: printf("TST: BOTH SERVOS");
 13209  0015C6  0EB4               	movlw	low STR_110
 13210  0015C8  0100               	movlb	0	; () banked
 13211  0015CA  6F8E               	movwf	printf@f& (0+255),b
 13212  0015CC  0EFC               	movlw	high STR_110
 13213  0015CE  0100               	movlb	0	; () banked
 13214  0015D0  6F8F               	movwf	(printf@f+1)& (0+255),b
 13215  0015D2  ECB8  F008         	call	_printf	;wreg free
 13216                           
 13217                           ;Test.c: 353: TMR1ON = 1;
 13218  0015D6  80CD               	bsf	4045,0,c	;volatile
 13219                           
 13220                           ;Test.c: 354: TMR3ON = 1;
 13221  0015D8  80B1               	bsf	4017,0,c	;volatile
 13222                           
 13223                           ;Test.c: 355: machine_state = Sorting_state;
 13224  0015DA  0E01               	movlw	1
 13225  0015DC  0100               	movlb	0	; () banked
 13226  0015DE  6FFC               	movwf	_machine_state& (0+255),b
 13227                           
 13228                           ; BSR set to: 0
 13229                           ;Test.c: 356: was_low_1 = 0;
 13230  0015E0  0E00               	movlw	0
 13231  0015E2  6E7A               	movwf	_was_low_1+1,c	;volatile
 13232  0015E4  0E00               	movlw	0
 13233  0015E6  6E79               	movwf	_was_low_1,c	;volatile
 13234                           
 13235                           ; BSR set to: 0
 13236                           ;Test.c: 357: was_low_3 = 0;
 13237  0015E8  0E00               	movlw	0
 13238  0015EA  6E7C               	movwf	_was_low_3+1,c	;volatile
 13239  0015EC  0E00               	movlw	0
 13240  0015EE  6E7B               	movwf	_was_low_3,c	;volatile
 13241                           
 13242                           ; BSR set to: 0
 13243                           ;Test.c: 363: initServos();
 13244  0015F0  ECAE  F020         	call	_initServos	;wreg free
 13245                           
 13246                           ;Test.c: 364: _delay((unsigned long)((1500)*(32000000/4000.0)));
 13247  0015F4  0E3D               	movlw	61
 13248  0015F6  0100               	movlb	0	; () banked
 13249  0015F8  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13250  0015FA  0EE1               	movlw	225
 13251  0015FC  0100               	movlb	0	; () banked
 13252  0015FE  6FAB               	movwf	??_BothServos& (0+255),b
 13253  001600  0E3F               	movlw	63
 13254  001602                     u8417:
 13255  001602  2EE8               	decfsz	wreg,f,c
 13256  001604  D7FE               	bra	u8417
 13257  001606  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13258  001608  D7FC               	bra	u8417
 13259  00160A  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13260  00160C  D7FA               	bra	u8417
 13261  00160E  D000               	nop2	
 13262                           
 13263                           ;Test.c: 366: updateServoPosition(500, 1);
 13264  001610  0E01               	movlw	1
 13265  001612  0100               	movlb	0	; () banked
 13266  001614  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13267  001616  0EF4               	movlw	244
 13268  001618  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13269  00161A  0E00               	movlw	0
 13270  00161C  0100               	movlb	0	; () banked
 13271  00161E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13272  001620  0E01               	movlw	1
 13273  001622  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13274  001624  EC15  F01F         	call	_updateServoPosition	;wreg free
 13275                           
 13276                           ;Test.c: 367: updateServoPosition(1150, 3);
 13277  001628  0E04               	movlw	4
 13278  00162A  0100               	movlb	0	; () banked
 13279  00162C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13280  00162E  0E7E               	movlw	126
 13281  001630  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13282  001632  0E00               	movlw	0
 13283  001634  0100               	movlb	0	; () banked
 13284  001636  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13285  001638  0E03               	movlw	3
 13286  00163A  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13287  00163C  EC15  F01F         	call	_updateServoPosition	;wreg free
 13288                           
 13289                           ;Test.c: 368: _delay((unsigned long)((750)*(32000000/4000.0)));
 13290  001640  0E1F               	movlw	31
 13291  001642  0100               	movlb	0	; () banked
 13292  001644  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13293  001646  0E71               	movlw	113
 13294  001648  0100               	movlb	0	; () banked
 13295  00164A  6FAB               	movwf	??_BothServos& (0+255),b
 13296  00164C  0E1E               	movlw	30
 13297  00164E                     u8427:
 13298  00164E  2EE8               	decfsz	wreg,f,c
 13299  001650  D7FE               	bra	u8427
 13300  001652  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13301  001654  D7FC               	bra	u8427
 13302  001656  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13303  001658  D7FA               	bra	u8427
 13304  00165A  F000               	nop	
 13305                           
 13306                           ;Test.c: 369: updateServoPosition(1200, 3);
 13307  00165C  0E04               	movlw	4
 13308  00165E  0100               	movlb	0	; () banked
 13309  001660  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13310  001662  0EB0               	movlw	176
 13311  001664  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13312  001666  0E00               	movlw	0
 13313  001668  0100               	movlb	0	; () banked
 13314  00166A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13315  00166C  0E03               	movlw	3
 13316  00166E  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13317  001670  EC15  F01F         	call	_updateServoPosition	;wreg free
 13318                           
 13319                           ;Test.c: 370: _delay((unsigned long)((2500)*(32000000/4000.0)));
 13320  001674  0E66               	movlw	102
 13321  001676  0100               	movlb	0	; () banked
 13322  001678  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13323  00167A  0E76               	movlw	118
 13324  00167C  0100               	movlb	0	; () banked
 13325  00167E  6FAB               	movwf	??_BothServos& (0+255),b
 13326  001680  0EC1               	movlw	193
 13327  001682                     u8437:
 13328  001682  2EE8               	decfsz	wreg,f,c
 13329  001684  D7FE               	bra	u8437
 13330  001686  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13331  001688  D7FC               	bra	u8437
 13332  00168A  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13333  00168C  D7FA               	bra	u8437
 13334                           
 13335                           ;Test.c: 371: updateServoPosition(1150, 3);
 13336  00168E  0E04               	movlw	4
 13337  001690  0100               	movlb	0	; () banked
 13338  001692  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13339  001694  0E7E               	movlw	126
 13340  001696  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13341  001698  0E00               	movlw	0
 13342  00169A  0100               	movlb	0	; () banked
 13343  00169C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13344  00169E  0E03               	movlw	3
 13345  0016A0  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13346  0016A2  EC15  F01F         	call	_updateServoPosition	;wreg free
 13347                           
 13348                           ;Test.c: 372: _delay((unsigned long)((750)*(32000000/4000.0)));
 13349  0016A6  0E1F               	movlw	31
 13350  0016A8  0100               	movlb	0	; () banked
 13351  0016AA  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13352  0016AC  0E71               	movlw	113
 13353  0016AE  0100               	movlb	0	; () banked
 13354  0016B0  6FAB               	movwf	??_BothServos& (0+255),b
 13355  0016B2  0E1E               	movlw	30
 13356  0016B4                     u8447:
 13357  0016B4  2EE8               	decfsz	wreg,f,c
 13358  0016B6  D7FE               	bra	u8447
 13359  0016B8  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13360  0016BA  D7FC               	bra	u8447
 13361  0016BC  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13362  0016BE  D7FA               	bra	u8447
 13363  0016C0  F000               	nop	
 13364                           
 13365                           ;Test.c: 374: updateServoPosition(850, 1);
 13366  0016C2  0E03               	movlw	3
 13367  0016C4  0100               	movlb	0	; () banked
 13368  0016C6  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13369  0016C8  0E52               	movlw	82
 13370  0016CA  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13371  0016CC  0E00               	movlw	0
 13372  0016CE  0100               	movlb	0	; () banked
 13373  0016D0  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13374  0016D2  0E01               	movlw	1
 13375  0016D4  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13376  0016D6  EC15  F01F         	call	_updateServoPosition	;wreg free
 13377                           
 13378                           ;Test.c: 375: updateServoPosition(1150, 3);
 13379  0016DA  0E04               	movlw	4
 13380  0016DC  0100               	movlb	0	; () banked
 13381  0016DE  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13382  0016E0  0E7E               	movlw	126
 13383  0016E2  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13384  0016E4  0E00               	movlw	0
 13385  0016E6  0100               	movlb	0	; () banked
 13386  0016E8  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13387  0016EA  0E03               	movlw	3
 13388  0016EC  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13389  0016EE  EC15  F01F         	call	_updateServoPosition	;wreg free
 13390                           
 13391                           ;Test.c: 376: _delay((unsigned long)((750)*(32000000/4000.0)));
 13392  0016F2  0E1F               	movlw	31
 13393  0016F4  0100               	movlb	0	; () banked
 13394  0016F6  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13395  0016F8  0E71               	movlw	113
 13396  0016FA  0100               	movlb	0	; () banked
 13397  0016FC  6FAB               	movwf	??_BothServos& (0+255),b
 13398  0016FE  0E1E               	movlw	30
 13399  001700                     u8457:
 13400  001700  2EE8               	decfsz	wreg,f,c
 13401  001702  D7FE               	bra	u8457
 13402  001704  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13403  001706  D7FC               	bra	u8457
 13404  001708  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13405  00170A  D7FA               	bra	u8457
 13406  00170C  F000               	nop	
 13407                           
 13408                           ;Test.c: 377: updateServoPosition(1200, 3);
 13409  00170E  0E04               	movlw	4
 13410  001710  0100               	movlb	0	; () banked
 13411  001712  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13412  001714  0EB0               	movlw	176
 13413  001716  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13414  001718  0E00               	movlw	0
 13415  00171A  0100               	movlb	0	; () banked
 13416  00171C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13417  00171E  0E03               	movlw	3
 13418  001720  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13419  001722  EC15  F01F         	call	_updateServoPosition	;wreg free
 13420                           
 13421                           ;Test.c: 378: _delay((unsigned long)((2500)*(32000000/4000.0)));
 13422  001726  0E66               	movlw	102
 13423  001728  0100               	movlb	0	; () banked
 13424  00172A  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13425  00172C  0E76               	movlw	118
 13426  00172E  0100               	movlb	0	; () banked
 13427  001730  6FAB               	movwf	??_BothServos& (0+255),b
 13428  001732  0EC1               	movlw	193
 13429  001734                     u8467:
 13430  001734  2EE8               	decfsz	wreg,f,c
 13431  001736  D7FE               	bra	u8467
 13432  001738  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13433  00173A  D7FC               	bra	u8467
 13434  00173C  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13435  00173E  D7FA               	bra	u8467
 13436                           
 13437                           ;Test.c: 379: updateServoPosition(1150, 3);
 13438  001740  0E04               	movlw	4
 13439  001742  0100               	movlb	0	; () banked
 13440  001744  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13441  001746  0E7E               	movlw	126
 13442  001748  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13443  00174A  0E00               	movlw	0
 13444  00174C  0100               	movlb	0	; () banked
 13445  00174E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13446  001750  0E03               	movlw	3
 13447  001752  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13448  001754  EC15  F01F         	call	_updateServoPosition	;wreg free
 13449                           
 13450                           ;Test.c: 380: _delay((unsigned long)((750)*(32000000/4000.0)));
 13451  001758  0E1F               	movlw	31
 13452  00175A  0100               	movlb	0	; () banked
 13453  00175C  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13454  00175E  0E71               	movlw	113
 13455  001760  0100               	movlb	0	; () banked
 13456  001762  6FAB               	movwf	??_BothServos& (0+255),b
 13457  001764  0E1E               	movlw	30
 13458  001766                     u8477:
 13459  001766  2EE8               	decfsz	wreg,f,c
 13460  001768  D7FE               	bra	u8477
 13461  00176A  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13462  00176C  D7FC               	bra	u8477
 13463  00176E  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13464  001770  D7FA               	bra	u8477
 13465  001772  F000               	nop	
 13466                           
 13467                           ;Test.c: 382: updateServoPosition(1200, 1);
 13468  001774  0E04               	movlw	4
 13469  001776  0100               	movlb	0	; () banked
 13470  001778  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13471  00177A  0EB0               	movlw	176
 13472  00177C  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13473  00177E  0E00               	movlw	0
 13474  001780  0100               	movlb	0	; () banked
 13475  001782  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13476  001784  0E01               	movlw	1
 13477  001786  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13478  001788  EC15  F01F         	call	_updateServoPosition	;wreg free
 13479                           
 13480                           ;Test.c: 383: updateServoPosition(1150, 3);
 13481  00178C  0E04               	movlw	4
 13482  00178E  0100               	movlb	0	; () banked
 13483  001790  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13484  001792  0E7E               	movlw	126
 13485  001794  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13486  001796  0E00               	movlw	0
 13487  001798  0100               	movlb	0	; () banked
 13488  00179A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13489  00179C  0E03               	movlw	3
 13490  00179E  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13491  0017A0  EC15  F01F         	call	_updateServoPosition	;wreg free
 13492                           
 13493                           ;Test.c: 384: _delay((unsigned long)((1500)*(32000000/4000.0)));
 13494  0017A4  0E3D               	movlw	61
 13495  0017A6  0100               	movlb	0	; () banked
 13496  0017A8  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13497  0017AA  0EE1               	movlw	225
 13498  0017AC  0100               	movlb	0	; () banked
 13499  0017AE  6FAB               	movwf	??_BothServos& (0+255),b
 13500  0017B0  0E3F               	movlw	63
 13501  0017B2                     u8487:
 13502  0017B2  2EE8               	decfsz	wreg,f,c
 13503  0017B4  D7FE               	bra	u8487
 13504  0017B6  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13505  0017B8  D7FC               	bra	u8487
 13506  0017BA  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13507  0017BC  D7FA               	bra	u8487
 13508  0017BE  D000               	nop2	
 13509                           
 13510                           ;Test.c: 386: updateServoPosition(1670, 1);
 13511  0017C0  0E06               	movlw	6
 13512  0017C2  0100               	movlb	0	; () banked
 13513  0017C4  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13514  0017C6  0E86               	movlw	134
 13515  0017C8  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13516  0017CA  0E00               	movlw	0
 13517  0017CC  0100               	movlb	0	; () banked
 13518  0017CE  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13519  0017D0  0E01               	movlw	1
 13520  0017D2  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13521  0017D4  EC15  F01F         	call	_updateServoPosition	;wreg free
 13522                           
 13523                           ;Test.c: 387: updateServoPosition(1150, 3);
 13524  0017D8  0E04               	movlw	4
 13525  0017DA  0100               	movlb	0	; () banked
 13526  0017DC  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13527  0017DE  0E7E               	movlw	126
 13528  0017E0  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13529  0017E2  0E00               	movlw	0
 13530  0017E4  0100               	movlb	0	; () banked
 13531  0017E6  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13532  0017E8  0E03               	movlw	3
 13533  0017EA  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13534  0017EC  EC15  F01F         	call	_updateServoPosition	;wreg free
 13535                           
 13536                           ;Test.c: 388: _delay((unsigned long)((750)*(32000000/4000.0)));
 13537  0017F0  0E1F               	movlw	31
 13538  0017F2  0100               	movlb	0	; () banked
 13539  0017F4  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13540  0017F6  0E71               	movlw	113
 13541  0017F8  0100               	movlb	0	; () banked
 13542  0017FA  6FAB               	movwf	??_BothServos& (0+255),b
 13543  0017FC  0E1E               	movlw	30
 13544  0017FE                     u8497:
 13545  0017FE  2EE8               	decfsz	wreg,f,c
 13546  001800  D7FE               	bra	u8497
 13547  001802  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13548  001804  D7FC               	bra	u8497
 13549  001806  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13550  001808  D7FA               	bra	u8497
 13551  00180A  F000               	nop	
 13552                           
 13553                           ;Test.c: 389: updateServoPosition(1300, 3);
 13554  00180C  0E05               	movlw	5
 13555  00180E  0100               	movlb	0	; () banked
 13556  001810  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13557  001812  0E14               	movlw	20
 13558  001814  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13559  001816  0E00               	movlw	0
 13560  001818  0100               	movlb	0	; () banked
 13561  00181A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13562  00181C  0E03               	movlw	3
 13563  00181E  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13564  001820  EC15  F01F         	call	_updateServoPosition	;wreg free
 13565                           
 13566                           ;Test.c: 390: _delay((unsigned long)((2500)*(32000000/4000.0)));
 13567  001824  0E66               	movlw	102
 13568  001826  0100               	movlb	0	; () banked
 13569  001828  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13570  00182A  0E76               	movlw	118
 13571  00182C  0100               	movlb	0	; () banked
 13572  00182E  6FAB               	movwf	??_BothServos& (0+255),b
 13573  001830  0EC1               	movlw	193
 13574  001832                     u8507:
 13575  001832  2EE8               	decfsz	wreg,f,c
 13576  001834  D7FE               	bra	u8507
 13577  001836  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13578  001838  D7FC               	bra	u8507
 13579  00183A  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13580  00183C  D7FA               	bra	u8507
 13581                           
 13582                           ;Test.c: 391: updateServoPosition(1150, 3);
 13583  00183E  0E04               	movlw	4
 13584  001840  0100               	movlb	0	; () banked
 13585  001842  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13586  001844  0E7E               	movlw	126
 13587  001846  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13588  001848  0E00               	movlw	0
 13589  00184A  0100               	movlb	0	; () banked
 13590  00184C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13591  00184E  0E03               	movlw	3
 13592  001850  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13593  001852  EC15  F01F         	call	_updateServoPosition	;wreg free
 13594                           
 13595                           ;Test.c: 392: _delay((unsigned long)((750)*(32000000/4000.0)));
 13596  001856  0E1F               	movlw	31
 13597  001858  0100               	movlb	0	; () banked
 13598  00185A  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13599  00185C  0E71               	movlw	113
 13600  00185E  0100               	movlb	0	; () banked
 13601  001860  6FAB               	movwf	??_BothServos& (0+255),b
 13602  001862  0E1E               	movlw	30
 13603  001864                     u8517:
 13604  001864  2EE8               	decfsz	wreg,f,c
 13605  001866  D7FE               	bra	u8517
 13606  001868  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13607  00186A  D7FC               	bra	u8517
 13608  00186C  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13609  00186E  D7FA               	bra	u8517
 13610  001870  F000               	nop	
 13611                           
 13612                           ;Test.c: 394: updateServoPosition(2100, 1);
 13613  001872  0E08               	movlw	8
 13614  001874  0100               	movlb	0	; () banked
 13615  001876  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13616  001878  0E34               	movlw	52
 13617  00187A  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13618  00187C  0E00               	movlw	0
 13619  00187E  0100               	movlb	0	; () banked
 13620  001880  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13621  001882  0E01               	movlw	1
 13622  001884  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13623  001886  EC15  F01F         	call	_updateServoPosition	;wreg free
 13624                           
 13625                           ;Test.c: 395: updateServoPosition(1150, 3);
 13626  00188A  0E04               	movlw	4
 13627  00188C  0100               	movlb	0	; () banked
 13628  00188E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13629  001890  0E7E               	movlw	126
 13630  001892  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13631  001894  0E00               	movlw	0
 13632  001896  0100               	movlb	0	; () banked
 13633  001898  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13634  00189A  0E03               	movlw	3
 13635  00189C  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13636  00189E  EC15  F01F         	call	_updateServoPosition	;wreg free
 13637                           
 13638                           ;Test.c: 396: _delay((unsigned long)((750)*(32000000/4000.0)));
 13639  0018A2  0E1F               	movlw	31
 13640  0018A4  0100               	movlb	0	; () banked
 13641  0018A6  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13642  0018A8  0E71               	movlw	113
 13643  0018AA  0100               	movlb	0	; () banked
 13644  0018AC  6FAB               	movwf	??_BothServos& (0+255),b
 13645  0018AE  0E1E               	movlw	30
 13646  0018B0                     u8527:
 13647  0018B0  2EE8               	decfsz	wreg,f,c
 13648  0018B2  D7FE               	bra	u8527
 13649  0018B4  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13650  0018B6  D7FC               	bra	u8527
 13651  0018B8  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13652  0018BA  D7FA               	bra	u8527
 13653  0018BC  F000               	nop	
 13654                           
 13655                           ;Test.c: 397: updateServoPosition(1300, 3);
 13656  0018BE  0E05               	movlw	5
 13657  0018C0  0100               	movlb	0	; () banked
 13658  0018C2  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13659  0018C4  0E14               	movlw	20
 13660  0018C6  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13661  0018C8  0E00               	movlw	0
 13662  0018CA  0100               	movlb	0	; () banked
 13663  0018CC  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13664  0018CE  0E03               	movlw	3
 13665  0018D0  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13666  0018D2  EC15  F01F         	call	_updateServoPosition	;wreg free
 13667                           
 13668                           ;Test.c: 398: _delay((unsigned long)((2500)*(32000000/4000.0)));
 13669  0018D6  0E66               	movlw	102
 13670  0018D8  0100               	movlb	0	; () banked
 13671  0018DA  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13672  0018DC  0E76               	movlw	118
 13673  0018DE  0100               	movlb	0	; () banked
 13674  0018E0  6FAB               	movwf	??_BothServos& (0+255),b
 13675  0018E2  0EC1               	movlw	193
 13676  0018E4                     u8537:
 13677  0018E4  2EE8               	decfsz	wreg,f,c
 13678  0018E6  D7FE               	bra	u8537
 13679  0018E8  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13680  0018EA  D7FC               	bra	u8537
 13681  0018EC  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13682  0018EE  D7FA               	bra	u8537
 13683                           
 13684                           ;Test.c: 399: updateServoPosition(1150, 3);
 13685  0018F0  0E04               	movlw	4
 13686  0018F2  0100               	movlb	0	; () banked
 13687  0018F4  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13688  0018F6  0E7E               	movlw	126
 13689  0018F8  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13690  0018FA  0E00               	movlw	0
 13691  0018FC  0100               	movlb	0	; () banked
 13692  0018FE  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13693  001900  0E03               	movlw	3
 13694  001902  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13695  001904  EC15  F01F         	call	_updateServoPosition	;wreg free
 13696                           
 13697                           ;Test.c: 400: _delay((unsigned long)((750)*(32000000/4000.0)));
 13698  001908  0E1F               	movlw	31
 13699  00190A  0100               	movlb	0	; () banked
 13700  00190C  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13701  00190E  0E71               	movlw	113
 13702  001910  0100               	movlb	0	; () banked
 13703  001912  6FAB               	movwf	??_BothServos& (0+255),b
 13704  001914  0E1E               	movlw	30
 13705  001916                     u8547:
 13706  001916  2EE8               	decfsz	wreg,f,c
 13707  001918  D7FE               	bra	u8547
 13708  00191A  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13709  00191C  D7FC               	bra	u8547
 13710  00191E  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13711  001920  D7FA               	bra	u8547
 13712  001922  F000               	nop	
 13713                           
 13714                           ;Test.c: 402: TMR1ON = 0;
 13715  001924  90CD               	bcf	4045,0,c	;volatile
 13716                           
 13717                           ;Test.c: 403: TMR3ON = 0;
 13718  001926  90B1               	bcf	4017,0,c	;volatile
 13719                           
 13720                           ;Test.c: 404: (INTCONbits.GIE = 0);
 13721  001928  9EF2               	bcf	intcon,7,c	;volatile
 13722  00192A  0012               	return		;funcret
 13723  00192C                     __end_of_BothServos:
 13724                           	opt stack 0
 13725                           tblptru	equ	0xFF8
 13726                           tblptrh	equ	0xFF7
 13727                           tblptrl	equ	0xFF6
 13728                           tablat	equ	0xFF5
 13729                           prodh	equ	0xFF4
 13730                           prodl	equ	0xFF3
 13731                           intcon	equ	0xFF2
 13732                           intcon2	equ	0xFF1
 13733                           intcon3	equ	0xFF0
 13734                           postinc0	equ	0xFEE
 13735                           wreg	equ	0xFE8
 13736                           postdec1	equ	0xFE5
 13737                           fsr1l	equ	0xFE1
 13738                           indf2	equ	0xFDF
 13739                           postinc2	equ	0xFDE
 13740                           postdec2	equ	0xFDD
 13741                           fsr2h	equ	0xFDA
 13742                           fsr2l	equ	0xFD9
 13743                           status	equ	0xFD8
 13744                           
 13745 ;; *************** function _initServos *****************
 13746 ;; Defined at:
 13747 ;;		line 300 in file "sort.c"
 13748 ;; Parameters:    Size  Location     Type
 13749 ;;		None
 13750 ;; Auto vars:     Size  Location     Type
 13751 ;;		None
 13752 ;; Return value:  Size  Location     Type
 13753 ;;                  1    wreg      void 
 13754 ;; Registers used:
 13755 ;;		wreg, status,2, status,0, cstack
 13756 ;; Tracked objects:
 13757 ;;		On entry : 0/0
 13758 ;;		On exit  : 0/0
 13759 ;;		Unchanged: 0/0
 13760 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13761 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13762 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13763 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13764 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13765 ;;Total ram usage:        1 bytes
 13766 ;; Hardware stack levels used:    1
 13767 ;; Hardware stack levels required when called:    8
 13768 ;; This function calls:
 13769 ;;		_updateServoPosition
 13770 ;; This function is called by:
 13771 ;;		_Loading
 13772 ;;		_BothServos
 13773 ;; This function uses a non-reentrant model
 13774 ;;
 13775                           
 13776                           	psect	text48
 13777  00415C                     __ptext48:
 13778                           	opt stack 0
 13779  00415C                     _initServos:
 13780                           	opt stack 20
 13781                           
 13782                           ;sort.c: 301: updateServoPosition(1200, 1);
 13783                           
 13784                           ;incstack = 0
 13785  00415C  0E04               	movlw	4
 13786  00415E  0100               	movlb	0	; () banked
 13787  004160  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13788  004162  0EB0               	movlw	176
 13789  004164  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13790  004166  0E00               	movlw	0
 13791  004168  0100               	movlb	0	; () banked
 13792  00416A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13793  00416C  0E01               	movlw	1
 13794  00416E  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13795  004170  EC15  F01F         	call	_updateServoPosition	;wreg free
 13796                           
 13797                           ;sort.c: 302: updateServoPosition(1150, 3);
 13798  004174  0E04               	movlw	4
 13799  004176  0100               	movlb	0	; () banked
 13800  004178  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13801  00417A  0E7E               	movlw	126
 13802  00417C  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13803  00417E  0E00               	movlw	0
 13804  004180  0100               	movlb	0	; () banked
 13805  004182  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13806  004184  0E03               	movlw	3
 13807  004186  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13808  004188  EC15  F01F         	call	_updateServoPosition	;wreg free
 13809                           
 13810                           ;sort.c: 303: TMR1ON = 1;
 13811  00418C  80CD               	bsf	4045,0,c	;volatile
 13812                           
 13813                           ;sort.c: 304: was_low_1 = 0;
 13814  00418E  0E00               	movlw	0
 13815  004190  6E7A               	movwf	_was_low_1+1,c	;volatile
 13816  004192  0E00               	movlw	0
 13817  004194  6E79               	movwf	_was_low_1,c	;volatile
 13818                           
 13819                           ;sort.c: 305: _delay((unsigned long)((5)*(32000000/4000.0)));
 13820  004196  0E34               	movlw	52
 13821  004198  0100               	movlb	0	; () banked
 13822  00419A  6F88               	movwf	??_initServos& (0+255),b
 13823  00419C  0EF1               	movlw	241
 13824  00419E                     u8557:
 13825  00419E  2EE8               	decfsz	wreg,f,c
 13826  0041A0  D7FE               	bra	u8557
 13827  0041A2  2F88               	decfsz	??_initServos& (0+255),f,b
 13828  0041A4  D7FC               	bra	u8557
 13829  0041A6  D000               	nop2	
 13830                           
 13831                           ;sort.c: 306: TMR3ON = 1;
 13832  0041A8  80B1               	bsf	4017,0,c	;volatile
 13833                           
 13834                           ;sort.c: 307: was_low_3 = 0;
 13835  0041AA  0E00               	movlw	0
 13836  0041AC  6E7C               	movwf	_was_low_3+1,c	;volatile
 13837  0041AE  0E00               	movlw	0
 13838  0041B0  6E7B               	movwf	_was_low_3,c	;volatile
 13839                           
 13840                           ;sort.c: 309: LATCbits.LATC0 = 1;
 13841  0041B2  808B               	bsf	3979,0,c	;volatile
 13842  0041B4  0012               	return		;funcret
 13843  0041B6                     __end_of_initServos:
 13844                           	opt stack 0
 13845                           tblptru	equ	0xFF8
 13846                           tblptrh	equ	0xFF7
 13847                           tblptrl	equ	0xFF6
 13848                           tablat	equ	0xFF5
 13849                           prodh	equ	0xFF4
 13850                           prodl	equ	0xFF3
 13851                           intcon	equ	0xFF2
 13852                           intcon2	equ	0xFF1
 13853                           intcon3	equ	0xFF0
 13854                           postinc0	equ	0xFEE
 13855                           wreg	equ	0xFE8
 13856                           postdec1	equ	0xFE5
 13857                           fsr1l	equ	0xFE1
 13858                           indf2	equ	0xFDF
 13859                           postinc2	equ	0xFDE
 13860                           postdec2	equ	0xFDD
 13861                           fsr2h	equ	0xFDA
 13862                           fsr2l	equ	0xFD9
 13863                           status	equ	0xFD8
 13864                           
 13865 ;; *************** function _updateServoPosition *****************
 13866 ;; Defined at:
 13867 ;;		line 361 in file "sort.c"
 13868 ;; Parameters:    Size  Location     Type
 13869 ;;  time_us         2    0[BANK0 ] int 
 13870 ;;  timer           2    2[BANK0 ] int 
 13871 ;; Auto vars:     Size  Location     Type
 13872 ;;  my_time         2    6[BANK0 ] unsigned int 
 13873 ;; Return value:  Size  Location     Type
 13874 ;;                  1    wreg      void 
 13875 ;; Registers used:
 13876 ;;		wreg, status,2, status,0
 13877 ;; Tracked objects:
 13878 ;;		On entry : 0/0
 13879 ;;		On exit  : 0/0
 13880 ;;		Unchanged: 0/0
 13881 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13882 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13883 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13884 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13885 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13886 ;;Total ram usage:        8 bytes
 13887 ;; Hardware stack levels used:    1
 13888 ;; Hardware stack levels required when called:    7
 13889 ;; This function calls:
 13890 ;;		Nothing
 13891 ;; This function is called by:
 13892 ;;		_Distribution
 13893 ;;		_initServos
 13894 ;;		_actuatorTest
 13895 ;;		_BothServos
 13896 ;; This function uses a non-reentrant model
 13897 ;;
 13898                           
 13899                           	psect	text49
 13900  003E2A                     __ptext49:
 13901                           	opt stack 0
 13902  003E2A                     _updateServoPosition:
 13903                           	opt stack 20
 13904                           
 13905                           ;sort.c: 362: unsigned int my_time = 65535 - time_us;
 13906                           
 13907                           ;incstack = 0
 13908  003E2A  C080  F084         	movff	updateServoPosition@time_us,??_updateServoPosition
 13909  003E2E  C081  F085         	movff	updateServoPosition@time_us+1,??_updateServoPosition+1
 13910  003E32  0100               	movlb	0	; () banked
 13911  003E34  1F84               	comf	??_updateServoPosition& (0+255),f,b
 13912  003E36  1F85               	comf	(??_updateServoPosition+1)& (0+255),f,b
 13913  003E38  4B84               	infsnz	??_updateServoPosition& (0+255),f,b
 13914  003E3A  2B85               	incf	(??_updateServoPosition+1)& (0+255),f,b
 13915  003E3C  0EFF               	movlw	255
 13916  003E3E  0100               	movlb	0	; () banked
 13917  003E40  2584               	addwf	??_updateServoPosition& (0+255),w,b
 13918  003E42  0100               	movlb	0	; () banked
 13919  003E44  6F86               	movwf	updateServoPosition@my_time& (0+255),b
 13920  003E46  0EFF               	movlw	255
 13921  003E48  0100               	movlb	0	; () banked
 13922  003E4A  2185               	addwfc	(??_updateServoPosition+1)& (0+255),w,b
 13923  003E4C  0100               	movlb	0	; () banked
 13924  003E4E  6F87               	movwf	(updateServoPosition@my_time+1)& (0+255),b
 13925                           
 13926                           ;sort.c: 363: switch(timer){
 13927  003E50  D015               	goto	l5768
 13928  003E52                     l5766:
 13929                           
 13930                           ; BSR set to: 0
 13931                           ;sort.c: 365: servoTimes[0] = my_time >> 8;
 13932  003E52  0100               	movlb	0	; () banked
 13933  003E54  5187               	movf	(updateServoPosition@my_time+1)& (0+255),w,b
 13934  003E56  0101               	movlb	1	; () banked
 13935  003E58  6F1C               	movwf	_servoTimes& (0+255),b
 13936  003E5A  6B1D               	clrf	(_servoTimes+1)& (0+255),b
 13937                           
 13938                           ;sort.c: 366: servoTimes[1] = my_time & 0xFF;
 13939  003E5C  0100               	movlb	0	; () banked
 13940  003E5E  5186               	movf	updateServoPosition@my_time& (0+255),w,b
 13941  003E60  0101               	movlb	1	; () banked
 13942  003E62  6F1E               	movwf	(_servoTimes+2)& (0+255),b
 13943  003E64  6B1F               	clrf	(_servoTimes+3)& (0+255),b
 13944  003E66                     l803:
 13945                           
 13946                           ;sort.c: 368: servoTimes[2] = my_time >> 8;
 13947  003E66  0100               	movlb	0	; () banked
 13948  003E68  5187               	movf	(updateServoPosition@my_time+1)& (0+255),w,b
 13949  003E6A  0101               	movlb	1	; () banked
 13950  003E6C  6F20               	movwf	(_servoTimes+4)& (0+255),b
 13951  003E6E  6B21               	clrf	(_servoTimes+5)& (0+255),b
 13952                           
 13953                           ;sort.c: 369: servoTimes[3] = my_time & 0xFF;
 13954  003E70  0100               	movlb	0	; () banked
 13955  003E72  5186               	movf	updateServoPosition@my_time& (0+255),w,b
 13956  003E74  0101               	movlb	1	; () banked
 13957  003E76  6F22               	movwf	(_servoTimes+6)& (0+255),b
 13958  003E78  6B23               	clrf	(_servoTimes+7)& (0+255),b
 13959                           
 13960                           ;sort.c: 370: }
 13961  003E7A  0012               	return	
 13962  003E7C                     l5768:
 13963  003E7C  C082  F084         	movff	updateServoPosition@timer,??_updateServoPosition
 13964  003E80  C083  F085         	movff	updateServoPosition@timer+1,??_updateServoPosition+1
 13965                           
 13966                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 13967                           ; Switch size 1, requested type "space"
 13968                           ; Number of cases is 1, Range of values is 0 to 0
 13969                           ; switch strategies available:
 13970                           ; Name         Instructions Cycles
 13971                           ; simple_byte            4     3 (average)
 13972                           ;	Chosen strategy is simple_byte
 13973  003E84  0100               	movlb	0	; () banked
 13974  003E86  5185               	movf	(??_updateServoPosition+1)& (0+255),w,b
 13975  003E88  0A00               	xorlw	0	; case 0
 13976  003E8A  A4D8               	btfss	status,2,c
 13977  003E8C  0012               	return	
 13978                           
 13979                           ; BSR set to: 0
 13980                           ; Switch size 1, requested type "space"
 13981                           ; Number of cases is 2, Range of values is 1 to 3
 13982                           ; switch strategies available:
 13983                           ; Name         Instructions Cycles
 13984                           ; simple_byte            7     4 (average)
 13985                           ;	Chosen strategy is simple_byte
 13986  003E8E  0100               	movlb	0	; () banked
 13987  003E90  5184               	movf	??_updateServoPosition& (0+255),w,b
 13988  003E92  0A01               	xorlw	1	; case 1
 13989  003E94  B4D8               	btfsc	status,2,c
 13990  003E96  D7DD               	goto	l5766
 13991  003E98  0A02               	xorlw	2	; case 3
 13992  003E9A  A4D8               	btfss	status,2,c
 13993  003E9C  0012               	return	
 13994  003E9E  D7E3               	goto	l803
 13995  003EA0                     __end_of_updateServoPosition:
 13996                           	opt stack 0
 13997                           tblptru	equ	0xFF8
 13998                           tblptrh	equ	0xFF7
 13999                           tblptrl	equ	0xFF6
 14000                           tablat	equ	0xFF5
 14001                           prodh	equ	0xFF4
 14002                           prodl	equ	0xFF3
 14003                           intcon	equ	0xFF2
 14004                           intcon2	equ	0xFF1
 14005                           intcon3	equ	0xFF0
 14006                           postinc0	equ	0xFEE
 14007                           wreg	equ	0xFE8
 14008                           postdec1	equ	0xFE5
 14009                           fsr1l	equ	0xFE1
 14010                           indf2	equ	0xFDF
 14011                           postinc2	equ	0xFDE
 14012                           postdec2	equ	0xFDD
 14013                           fsr2h	equ	0xFDA
 14014                           fsr2l	equ	0xFD9
 14015                           status	equ	0xFD8
 14016                           
 14017 ;; *************** function _BlockerTest *****************
 14018 ;; Defined at:
 14019 ;;		line 566 in file "Test.c"
 14020 ;; Parameters:    Size  Location     Type
 14021 ;;		None
 14022 ;; Auto vars:     Size  Location     Type
 14023 ;;  i               2   44[BANK0 ] int 
 14024 ;;  flag            2   46[BANK0 ] int 
 14025 ;; Return value:  Size  Location     Type
 14026 ;;                  1    wreg      void 
 14027 ;; Registers used:
 14028 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14029 ;; Tracked objects:
 14030 ;;		On entry : 0/0
 14031 ;;		On exit  : 0/0
 14032 ;;		Unchanged: 0/0
 14033 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14034 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14035 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14036 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14037 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14038 ;;Total ram usage:        5 bytes
 14039 ;; Hardware stack levels used:    1
 14040 ;; Hardware stack levels required when called:   10
 14041 ;; This function calls:
 14042 ;;		_lcdInst
 14043 ;;		_printf
 14044 ;; This function is called by:
 14045 ;;		_Test
 14046 ;; This function uses a non-reentrant model
 14047 ;;
 14048                           
 14049                           	psect	text50
 14050  00374A                     __ptext50:
 14051                           	opt stack 0
 14052  00374A                     _BlockerTest:
 14053                           	opt stack 19
 14054                           
 14055                           ;Test.c: 567: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 14056                           
 14057                           ;incstack = 0
 14058  00374A  0E01               	movlw	1
 14059  00374C  ECDC  F024         	call	_lcdInst
 14060  003750  0E68               	movlw	104
 14061  003752  0100               	movlb	0	; () banked
 14062  003754  6FAB               	movwf	??_BlockerTest& (0+255),b
 14063  003756  0EE4               	movlw	228
 14064  003758                     u8567:
 14065  003758  2EE8               	decfsz	wreg,f,c
 14066  00375A  D7FE               	bra	u8567
 14067  00375C  2FAB               	decfsz	??_BlockerTest& (0+255),f,b
 14068  00375E  D7FC               	bra	u8567
 14069  003760  F000               	nop	
 14070  003762  0E80               	movlw	128
 14071  003764  ECDC  F024         	call	_lcdInst
 14072                           
 14073                           ;Test.c: 568: printf("D WILL RETURN    ");
 14074  003768  0E49               	movlw	low STR_111
 14075  00376A  0100               	movlb	0	; () banked
 14076  00376C  6F8E               	movwf	printf@f& (0+255),b
 14077  00376E  0EFB               	movlw	high STR_111
 14078  003770  0100               	movlb	0	; () banked
 14079  003772  6F8F               	movwf	(printf@f+1)& (0+255),b
 14080  003774  ECB8  F008         	call	_printf	;wreg free
 14081                           
 14082                           ;Test.c: 569: lcdInst(0b11000000);;
 14083  003778  0EC0               	movlw	192
 14084  00377A  ECDC  F024         	call	_lcdInst
 14085                           
 14086                           ;Test.c: 570: printf("OTHER TOGGLES CAM");
 14087  00377E  0E7F               	movlw	low STR_119
 14088  003780  0100               	movlb	0	; () banked
 14089  003782  6F8E               	movwf	printf@f& (0+255),b
 14090  003784  0EFB               	movlw	high STR_119
 14091  003786  0100               	movlb	0	; () banked
 14092  003788  6F8F               	movwf	(printf@f+1)& (0+255),b
 14093  00378A  ECB8  F008         	call	_printf	;wreg free
 14094                           
 14095                           ;Test.c: 571: int flag = 1;
 14096  00378E  0E00               	movlw	0
 14097  003790  0100               	movlb	0	; () banked
 14098  003792  6FAF               	movwf	(BlockerTest@flag+1)& (0+255),b
 14099  003794  0E01               	movlw	1
 14100  003796  6FAE               	movwf	BlockerTest@flag& (0+255),b
 14101  003798                     l1264:
 14102  003798  A281               	btfss	3969,1,c	;volatile
 14103  00379A  D7FE               	goto	l1264
 14104                           
 14105                           ;Test.c: 574: if(PORTB >> 4 == 0b1111){
 14106  00379C  3881               	swapf	3969,w,c	;volatile
 14107  00379E  0B0F               	andlw	15
 14108  0037A0  0A0F               	xorlw	15
 14109  0037A2  B4D8               	btfsc	status,2,c
 14110  0037A4  0012               	return	
 14111                           
 14112                           ;Test.c: 577: else{
 14113                           ;Test.c: 578: if(flag){
 14114                           
 14115                           ;Test.c: 576: }
 14116                           
 14117                           ;Test.c: 575: break;
 14118  0037A6  0100               	movlb	0	; () banked
 14119  0037A8  51AE               	movf	BlockerTest@flag& (0+255),w,b
 14120  0037AA  0100               	movlb	0	; () banked
 14121  0037AC  11AF               	iorwf	(BlockerTest@flag+1)& (0+255),w,b
 14122  0037AE  B4D8               	btfsc	status,2,c
 14123  0037B0  D007               	goto	l7488
 14124                           
 14125                           ; BSR set to: 0
 14126                           ;Test.c: 579: LATCbits.LATC0 = 1;
 14127  0037B2  808B               	bsf	3979,0,c	;volatile
 14128  0037B4  D023               	goto	l7500
 14129  0037B6                     u6051:
 14130  0037B6  0E01               	movlw	1
 14131  0037B8                     u6060:
 14132  0037B8  0100               	movlb	0	; () banked
 14133  0037BA  6FAE               	movwf	BlockerTest@flag& (0+255),b
 14134  0037BC  6BAF               	clrf	(BlockerTest@flag+1)& (0+255),b
 14135                           
 14136                           ;Test.c: 581: }
 14137  0037BE  D026               	goto	l1274
 14138  0037C0                     l7488:
 14139                           
 14140                           ; BSR set to: 0
 14141                           ;Test.c: 582: else{
 14142                           ;Test.c: 583: for(int i=0;i<5000;i++)
 14143  0037C0  0E00               	movlw	0
 14144  0037C2  0100               	movlb	0	; () banked
 14145  0037C4  6FAD               	movwf	(BlockerTest@i+1)& (0+255),b
 14146  0037C6  0E00               	movlw	0
 14147  0037C8  6FAC               	movwf	BlockerTest@i& (0+255),b
 14148  0037CA                     l7490:
 14149                           
 14150                           ; BSR set to: 0
 14151  0037CA  0100               	movlb	0	; () banked
 14152  0037CC  BFAD               	btfsc	(BlockerTest@i+1)& (0+255),7,b
 14153  0037CE  D008               	goto	l1272
 14154  0037D0  0E88               	movlw	136
 14155  0037D2  0100               	movlb	0	; () banked
 14156  0037D4  5DAC               	subwf	BlockerTest@i& (0+255),w,b
 14157  0037D6  0E13               	movlw	19
 14158  0037D8  0100               	movlb	0	; () banked
 14159  0037DA  59AD               	subwfb	(BlockerTest@i+1)& (0+255),w,b
 14160  0037DC  B0D8               	btfsc	status,0,c
 14161  0037DE  D00D               	goto	l1273
 14162  0037E0                     l1272:
 14163                           
 14164                           ; BSR set to: 0
 14165                           ;Test.c: 584: {
 14166                           ;Test.c: 585: LATCbits.LATC0 = 1;
 14167  0037E0  808B               	bsf	3979,0,c	;volatile
 14168                           
 14169                           ; BSR set to: 0
 14170                           ;Test.c: 586: _delay((unsigned long)((10)*(32000000/4000000.0)));
 14171  0037E2  0E1A               	movlw	26
 14172  0037E4                     u8577:
 14173  0037E4  2EE8               	decfsz	wreg,f,c
 14174  0037E6  D7FE               	bra	u8577
 14175  0037E8  D000               	nop2	
 14176                           
 14177                           ;Test.c: 587: LATCbits.LATC0 = 0;
 14178  0037EA  908B               	bcf	3979,0,c	;volatile
 14179                           
 14180                           ;Test.c: 588: _delay((unsigned long)((90)*(32000000/4000000.0)));
 14181  0037EC  0EF0               	movlw	240
 14182  0037EE                     u8587:
 14183  0037EE  2EE8               	decfsz	wreg,f,c
 14184  0037F0  D7FE               	bra	u8587
 14185  0037F2  0100               	movlb	0	; () banked
 14186  0037F4  4BAC               	infsnz	BlockerTest@i& (0+255),f,b
 14187  0037F6  2BAD               	incf	(BlockerTest@i+1)& (0+255),f,b
 14188  0037F8  D7E8               	goto	l7490
 14189  0037FA                     l1273:
 14190                           
 14191                           ; BSR set to: 0
 14192                           ;Test.c: 589: }
 14193                           ;Test.c: 590: LATCbits.LATC0 = 0;
 14194  0037FA  908B               	bcf	3979,0,c	;volatile
 14195  0037FC                     l7500:
 14196                           
 14197                           ; BSR set to: 0
 14198                           ;Test.c: 591: flag = !flag;
 14199  0037FC  0100               	movlb	0	; () banked
 14200  0037FE  51AE               	movf	BlockerTest@flag& (0+255),w,b
 14201  003800  0100               	movlb	0	; () banked
 14202  003802  11AF               	iorwf	(BlockerTest@flag+1)& (0+255),w,b
 14203  003804  B4D8               	btfsc	status,2,c
 14204  003806  D7D7               	goto	u6051
 14205  003808  0E00               	movlw	0
 14206  00380A  D7D6               	goto	u6060
 14207  00380C                     l1274:
 14208  00380C  A281               	btfss	3969,1,c	;volatile
 14209  00380E  D7C4               	goto	l1264
 14210  003810  D7FD               	goto	l1274
 14211  003812                     __end_of_BlockerTest:
 14212                           	opt stack 0
 14213                           tblptru	equ	0xFF8
 14214                           tblptrh	equ	0xFF7
 14215                           tblptrl	equ	0xFF6
 14216                           tablat	equ	0xFF5
 14217                           prodh	equ	0xFF4
 14218                           prodl	equ	0xFF3
 14219                           intcon	equ	0xFF2
 14220                           intcon2	equ	0xFF1
 14221                           intcon3	equ	0xFF0
 14222                           postinc0	equ	0xFEE
 14223                           wreg	equ	0xFE8
 14224                           postdec1	equ	0xFE5
 14225                           fsr1l	equ	0xFE1
 14226                           indf2	equ	0xFDF
 14227                           postinc2	equ	0xFDE
 14228                           postdec2	equ	0xFDD
 14229                           fsr2h	equ	0xFDA
 14230                           fsr2l	equ	0xFD9
 14231                           status	equ	0xFD8
 14232                           
 14233 ;; *************** function _printf *****************
 14234 ;; Defined at:
 14235 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 14236 ;; Parameters:    Size  Location     Type
 14237 ;;  f               2   14[BANK0 ] PTR const unsigned char 
 14238 ;;		 -> STR_119(18), STR_118(18), STR_117(18), STR_116(18), 
 14239 ;;		 -> STR_115(17), STR_114(17), STR_113(11), STR_112(18), 
 14240 ;;		 -> STR_111(18), STR_110(17), STR_109(15), STR_108(15), 
 14241 ;;		 -> STR_107(15), STR_106(17), STR_105(17), STR_104(17), 
 14242 ;;		 -> STR_103(16), STR_102(17), STR_101(17), STR_100(17), 
 14243 ;;		 -> STR_99(17), STR_98(17), STR_97(17), STR_96(15), 
 14244 ;;		 -> STR_95(11), STR_94(17), STR_93(11), STR_92(17), 
 14245 ;;		 -> STR_91(14), STR_90(15), STR_89(14), STR_88(10), 
 14246 ;;		 -> STR_87(9), STR_86(9), STR_85(10), STR_84(10), 
 14247 ;;		 -> STR_83(16), STR_82(15), STR_81(3), STR_80(15), 
 14248 ;;		 -> STR_79(13), STR_78(14), STR_77(8), STR_76(14), 
 14249 ;;		 -> STR_75(15), STR_74(12), STR_73(14), STR_72(17), 
 14250 ;;		 -> STR_71(14), STR_70(15), STR_69(17), STR_68(17), 
 14251 ;;		 -> STR_67(7), STR_66(21), STR_65(13), STR_64(11), 
 14252 ;;		 -> STR_63(24), STR_50(17), STR_49(17), STR_48(17), 
 14253 ;;		 -> STR_47(17), STR_46(17), STR_45(17), STR_44(17), 
 14254 ;;		 -> STR_43(17), STR_42(17), STR_41(17), STR_40(17), 
 14255 ;;		 -> STR_39(17), STR_38(17), STR_37(17), STR_36(17), 
 14256 ;;		 -> STR_35(17), STR_34(17), STR_33(17), STR_32(17), 
 14257 ;;		 -> STR_31(17), STR_30(17), STR_29(3), STR_28(17), 
 14258 ;;		 -> STR_27(17), STR_26(17), STR_25(17), STR_24(17), 
 14259 ;;		 -> STR_23(14), STR_22(10), STR_21(24), STR_7(7), 
 14260 ;;		 -> STR_6(17), STR_5(18), STR_4(16), STR_3(18), 
 14261 ;;		 -> STR_2(14), STR_1(18), 
 14262 ;; Auto vars:     Size  Location     Type
 14263 ;;  tmpval          4    0        struct .
 14264 ;;  width           2   41[BANK0 ] int 
 14265 ;;  val             2   37[BANK0 ] unsigned int 
 14266 ;;  len             2   35[BANK0 ] unsigned int 
 14267 ;;  ap              2   33[BANK0 ] PTR void [1]
 14268 ;;		 -> ?i2_printf(2), ?_printf(2), 
 14269 ;;  cp              2   31[BANK0 ] PTR const unsigned char 
 14270 ;;		 -> STR_120(7), count_total(2), printRTC@month(4), UI@month(4), 
 14271 ;;  c               1   40[BANK0 ] char 
 14272 ;;  flag            1   39[BANK0 ] unsigned char 
 14273 ;;  prec            1   30[BANK0 ] char 
 14274 ;; Return value:  Size  Location     Type
 14275 ;;                  2   14[BANK0 ] int 
 14276 ;; Registers used:
 14277 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14278 ;; Tracked objects:
 14279 ;;		On entry : 0/0
 14280 ;;		On exit  : 0/0
 14281 ;;		Unchanged: 0/0
 14282 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14283 ;;      Params:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14284 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14285 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14286 ;;      Totals:         0      29       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14287 ;;Total ram usage:       29 bytes
 14288 ;; Hardware stack levels used:    1
 14289 ;; Hardware stack levels required when called:    9
 14290 ;; This function calls:
 14291 ;;		___lwdiv
 14292 ;;		___lwmod
 14293 ;;		___wmul
 14294 ;;		_isdigit
 14295 ;;		_putch
 14296 ;; This function is called by:
 14297 ;;		_UI
 14298 ;;		_change_state_to_menu_start
 14299 ;;		_change_state_to_menu_12
 14300 ;;		_change_state_to_menu_22
 14301 ;;		_printRTC
 14302 ;;		_EEPROM_write
 14303 ;;		_Test
 14304 ;;		_algorithmTest
 14305 ;;		_sensorTest
 14306 ;;		_actuatorTest
 14307 ;;		_BothServos
 14308 ;;		_PortTestA5
 14309 ;;		_PusherTest
 14310 ;;		_SpeedTest
 14311 ;;		_BlockerTest
 14312 ;;		_ToggleTestA5
 14313 ;; This function uses a non-reentrant model
 14314 ;;
 14315                           
 14316                           	psect	text51
 14317  001170                     __ptext51:
 14318                           	opt stack 0
 14319  001170                     _printf:
 14320                           	opt stack 18
 14321                           
 14322                           ;doprnt.c: 466: va_list ap;
 14323                           ;doprnt.c: 499: signed char c;
 14324                           ;doprnt.c: 501: int width;
 14325                           ;doprnt.c: 506: signed char prec;
 14326                           ;doprnt.c: 508: unsigned char flag;
 14327                           ;doprnt.c: 523: union {
 14328                           ;doprnt.c: 524: unsigned long vd;
 14329                           ;doprnt.c: 525: double integ;
 14330                           ;doprnt.c: 526: } tmpval;
 14331                           ;doprnt.c: 528: unsigned int val;
 14332                           ;doprnt.c: 529: unsigned len;
 14333                           ;doprnt.c: 530: const char * cp;
 14334                           ;doprnt.c: 533: *ap = __va_start();
 14335                           
 14336                           ;incstack = 0
 14337  001170  0E90               	movlw	low (?_printf+2)
 14338  001172  0100               	movlb	0	; () banked
 14339  001174  6FA1               	movwf	printf@ap& (0+255),b
 14340  001176  0E00               	movlw	high (?_printf+2)
 14341  001178  0100               	movlb	0	; () banked
 14342  00117A  6FA2               	movwf	(printf@ap+1)& (0+255),b
 14343                           
 14344                           ;doprnt.c: 536: while(c = *f++) {
 14345  00117C  D205               	goto	l5726
 14346  00117E                     l5596:
 14347                           
 14348                           ; BSR set to: 0
 14349                           ;doprnt.c: 538: if(c != '%')
 14350  00117E  0E25               	movlw	37
 14351  001180  0100               	movlb	0	; () banked
 14352  001182  19A8               	xorwf	printf@c& (0+255),w,b
 14353  001184  B4D8               	btfsc	status,2,c
 14354  001186  D005               	goto	l5600
 14355                           
 14356                           ; BSR set to: 0
 14357                           ;doprnt.c: 540: {
 14358                           ;doprnt.c: 541: (putch(c) );
 14359  001188  0100               	movlb	0	; () banked
 14360  00118A  51A8               	movf	printf@c& (0+255),w,b
 14361  00118C  ECD4  F024         	call	_putch
 14362                           
 14363                           ;doprnt.c: 542: continue;
 14364  001190  D1FB               	goto	l5726
 14365  001192                     l5600:
 14366                           
 14367                           ;doprnt.c: 543: }
 14368                           ;doprnt.c: 546: width = 0;
 14369  001192  0E00               	movlw	0
 14370  001194  0100               	movlb	0	; () banked
 14371  001196  6FAA               	movwf	(printf@width+1)& (0+255),b
 14372  001198  0E00               	movlw	0
 14373  00119A  6FA9               	movwf	printf@width& (0+255),b
 14374                           
 14375                           ;doprnt.c: 548: flag = 0;
 14376  00119C  0E00               	movlw	0
 14377  00119E  0100               	movlb	0	; () banked
 14378  0011A0  6FA7               	movwf	printf@flag& (0+255),b
 14379                           
 14380                           ; BSR set to: 0
 14381                           ;doprnt.c: 551: switch(*f) {
 14382                           
 14383                           ;doprnt.c: 550: for(;;) {
 14384  0011A2  D005               	goto	l5606
 14385  0011A4                     l5602:
 14386                           
 14387                           ;doprnt.c: 580: flag |= 0x04;
 14388  0011A4  0100               	movlb	0	; () banked
 14389  0011A6  85A7               	bsf	printf@flag& (0+255),2,b
 14390                           
 14391                           ;doprnt.c: 581: f++;
 14392  0011A8  0100               	movlb	0	; () banked
 14393  0011AA  4B8E               	infsnz	printf@f& (0+255),f,b
 14394  0011AC  2B8F               	incf	(printf@f+1)& (0+255),f,b
 14395  0011AE                     l5606:
 14396  0011AE  C08E  FFF6         	movff	printf@f,tblptrl
 14397  0011B2  C08F  FFF7         	movff	printf@f+1,tblptrh
 14398  0011B6                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 14399  0011B6  6AF8               	clrf	tblptru,c
 14400  0011B8                     	endif
 14401  0011B8                     	if	0	;tblptru may be non-zero
 14402  0011B8                     	endif
 14403  0011B8  0008               	tblrd		*
 14404  0011BA  50F5               	movf	tablat,w,c
 14405                           
 14406                           ; Switch size 1, requested type "space"
 14407                           ; Number of cases is 1, Range of values is 48 to 48
 14408                           ; switch strategies available:
 14409                           ; Name         Instructions Cycles
 14410                           ; simple_byte            4     3 (average)
 14411                           ;	Chosen strategy is simple_byte
 14412  0011BC  0A30               	xorlw	48	; case 48
 14413  0011BE  B4D8               	btfsc	status,2,c
 14414  0011C0  D7F1               	goto	l5602
 14415                           
 14416                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 14417                           
 14418                           ;doprnt.c: 586: }
 14419                           
 14420                           ;doprnt.c: 585: break;
 14421  0011C2  C08E  FFF6         	movff	printf@f,tblptrl
 14422  0011C6  C08F  FFF7         	movff	printf@f+1,tblptrh
 14423  0011CA                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 14424  0011CA  6AF8               	clrf	tblptru,c
 14425  0011CC                     	endif
 14426  0011CC                     	if	0	;tblptru may be non-zero
 14427  0011CC                     	endif
 14428  0011CC  0008               	tblrd		*
 14429  0011CE  50F5               	movf	tablat,w,c
 14430  0011D0  ECF9  F023         	call	_isdigit
 14431  0011D4  A0D8               	btfss	status,0,c
 14432  0011D6  D0D2               	goto	l5654
 14433                           
 14434                           ;doprnt.c: 598: width = 0;
 14435  0011D8  0E00               	movlw	0
 14436  0011DA  0100               	movlb	0	; () banked
 14437  0011DC  6FAA               	movwf	(printf@width+1)& (0+255),b
 14438  0011DE  0E00               	movlw	0
 14439  0011E0  6FA9               	movwf	printf@width& (0+255),b
 14440  0011E2                     l5612:
 14441                           
 14442                           ;doprnt.c: 600: width *= 10;
 14443  0011E2  C0A9  F080         	movff	printf@width,___wmul@multiplier
 14444  0011E6  C0AA  F081         	movff	printf@width+1,___wmul@multiplier+1
 14445  0011EA  0E00               	movlw	0
 14446  0011EC  0100               	movlb	0	; () banked
 14447  0011EE  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
 14448  0011F0  0E0A               	movlw	10
 14449  0011F2  6F82               	movwf	___wmul@multiplicand& (0+255),b
 14450  0011F4  EC63  F022         	call	___wmul	;wreg free
 14451  0011F8  C080  F0A9         	movff	?___wmul,printf@width
 14452  0011FC  C081  F0AA         	movff	?___wmul+1,printf@width+1
 14453                           
 14454                           ;doprnt.c: 601: width += *f++ - '0';
 14455  001200  0ED0               	movlw	208
 14456  001202  0100               	movlb	0	; () banked
 14457  001204  6F9A               	movwf	??_printf& (0+255),b
 14458  001206  0EFF               	movlw	255
 14459  001208  0100               	movlb	0	; () banked
 14460  00120A  6F9B               	movwf	(??_printf+1)& (0+255),b
 14461  00120C  C08E  FFF6         	movff	printf@f,tblptrl
 14462  001210  C08F  FFF7         	movff	printf@f+1,tblptrh
 14463  001214                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 14464  001214  6AF8               	clrf	tblptru,c
 14465  001216                     	endif
 14466  001216                     	if	0	;tblptru may be non-zero
 14467  001216                     	endif
 14468  001216  0008               	tblrd		*
 14469  001218  50F5               	movf	tablat,w,c
 14470  00121A  0100               	movlb	0	; () banked
 14471  00121C  6F9C               	movwf	(??_printf+2)& (0+255),b
 14472  00121E  6B9D               	clrf	(??_printf+3)& (0+255),b
 14473  001220  0100               	movlb	0	; () banked
 14474  001222  519A               	movf	??_printf& (0+255),w,b
 14475  001224  0100               	movlb	0	; () banked
 14476  001226  279C               	addwf	(??_printf+2)& (0+255),f,b
 14477  001228  0100               	movlb	0	; () banked
 14478  00122A  519B               	movf	(??_printf+1)& (0+255),w,b
 14479  00122C  0100               	movlb	0	; () banked
 14480  00122E  239D               	addwfc	(??_printf+3)& (0+255),f,b
 14481  001230  0100               	movlb	0	; () banked
 14482  001232  519C               	movf	(??_printf+2)& (0+255),w,b
 14483  001234  0100               	movlb	0	; () banked
 14484  001236  27A9               	addwf	printf@width& (0+255),f,b
 14485  001238  0100               	movlb	0	; () banked
 14486  00123A  519D               	movf	(??_printf+3)& (0+255),w,b
 14487  00123C  0100               	movlb	0	; () banked
 14488  00123E  23AA               	addwfc	(printf@width+1)& (0+255),f,b
 14489                           
 14490                           ; BSR set to: 0
 14491  001240  0100               	movlb	0	; () banked
 14492  001242  4B8E               	infsnz	printf@f& (0+255),f,b
 14493  001244  2B8F               	incf	(printf@f+1)& (0+255),f,b
 14494                           
 14495                           ; BSR set to: 0
 14496                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 14497  001246  C08E  FFF6         	movff	printf@f,tblptrl
 14498  00124A  C08F  FFF7         	movff	printf@f+1,tblptrh
 14499  00124E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 14500  00124E  6AF8               	clrf	tblptru,c
 14501  001250                     	endif
 14502  001250                     	if	0	;tblptru may be non-zero
 14503  001250                     	endif
 14504  001250  0008               	tblrd		*
 14505  001252  50F5               	movf	tablat,w,c
 14506  001254  ECF9  F023         	call	_isdigit
 14507  001258  A0D8               	btfss	status,0,c
 14508  00125A  D090               	goto	l5654
 14509  00125C  D7C2               	goto	l5612
 14510  00125E                     l5620:
 14511                           
 14512                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 14513  00125E  C0A1  FFD9         	movff	printf@ap,fsr2l
 14514  001262  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 14515  001266  CFDE F09F          	movff	postinc2,printf@cp
 14516  00126A  CFDD F0A0          	movff	postdec2,printf@cp+1
 14517  00126E  0E02               	movlw	2
 14518  001270  0100               	movlb	0	; () banked
 14519  001272  27A1               	addwf	printf@ap& (0+255),f,b
 14520  001274  0E00               	movlw	0
 14521  001276  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 14522                           
 14523                           ; BSR set to: 0
 14524                           ;doprnt.c: 740: if(!cp)
 14525  001278  0100               	movlb	0	; () banked
 14526  00127A  519F               	movf	printf@cp& (0+255),w,b
 14527  00127C  0100               	movlb	0	; () banked
 14528  00127E  11A0               	iorwf	(printf@cp+1)& (0+255),w,b
 14529  001280  A4D8               	btfss	status,2,c
 14530  001282  D006               	goto	l5628
 14531                           
 14532                           ; BSR set to: 0
 14533                           ;doprnt.c: 741: cp = "(null)";
 14534  001284  0EB6               	movlw	low STR_120
 14535  001286  0100               	movlb	0	; () banked
 14536  001288  6F9F               	movwf	printf@cp& (0+255),b
 14537  00128A  0EFF               	movlw	high STR_120
 14538  00128C  0100               	movlb	0	; () banked
 14539  00128E  6FA0               	movwf	(printf@cp+1)& (0+255),b
 14540  001290                     l5628:
 14541                           
 14542                           ; BSR set to: 0
 14543                           ;doprnt.c: 745: len = 0;
 14544  001290  0E00               	movlw	0
 14545  001292  0100               	movlb	0	; () banked
 14546  001294  6FA4               	movwf	(printf@len+1)& (0+255),b
 14547  001296  0E00               	movlw	0
 14548  001298  6FA3               	movwf	printf@len& (0+255),b
 14549                           
 14550                           ;doprnt.c: 746: while(cp[len])
 14551  00129A  D003               	goto	l5632
 14552  00129C                     l5630:
 14553                           
 14554                           ;doprnt.c: 747: len++;
 14555  00129C  0100               	movlb	0	; () banked
 14556  00129E  4BA3               	infsnz	printf@len& (0+255),f,b
 14557  0012A0  2BA4               	incf	(printf@len+1)& (0+255),f,b
 14558  0012A2                     l5632:
 14559                           
 14560                           ; BSR set to: 0
 14561  0012A2  0100               	movlb	0	; () banked
 14562  0012A4  51A3               	movf	printf@len& (0+255),w,b
 14563  0012A6  0100               	movlb	0	; () banked
 14564  0012A8  259F               	addwf	printf@cp& (0+255),w,b
 14565  0012AA  0100               	movlb	0	; () banked
 14566  0012AC  6F9A               	movwf	??_printf& (0+255),b
 14567  0012AE  0100               	movlb	0	; () banked
 14568  0012B0  51A4               	movf	(printf@len+1)& (0+255),w,b
 14569  0012B2  0100               	movlb	0	; () banked
 14570  0012B4  21A0               	addwfc	(printf@cp+1)& (0+255),w,b
 14571  0012B6  0100               	movlb	0	; () banked
 14572  0012B8  6F9B               	movwf	(??_printf+1)& (0+255),b
 14573  0012BA  C09A  FFF6         	movff	??_printf,tblptrl
 14574  0012BE  C09B  FFF7         	movff	??_printf+1,tblptrh
 14575  0012C2  0E00               	movlw	low (__mediumconst shr (0+16))
 14576  0012C4  6EF8               	movwf	tblptru,c
 14577  0012C6  0E0F               	movlw	(high __ramtop+-1)
 14578  0012C8  64F7               	cpfsgt	tblptrh,c
 14579  0012CA  D003               	bra	u4017
 14580  0012CC  0008               	tblrd		*
 14581  0012CE  50F5               	movf	tablat,w,c
 14582  0012D0  D005               	bra	u4010
 14583  0012D2                     u4017:
 14584  0012D2  CFF6 FFE9          	movff	tblptrl,fsr0l
 14585  0012D6  CFF7 FFEA          	movff	tblptrh,fsr0h
 14586  0012DA  50EF               	movf	indf0,w,c
 14587  0012DC                     u4010:
 14588  0012DC  0900               	iorlw	0
 14589  0012DE  A4D8               	btfss	status,2,c
 14590  0012E0  D7DD               	goto	l5630
 14591                           
 14592                           ;doprnt.c: 757: if(width > len)
 14593  0012E2  0100               	movlb	0	; () banked
 14594  0012E4  51A9               	movf	printf@width& (0+255),w,b
 14595  0012E6  0100               	movlb	0	; () banked
 14596  0012E8  5DA3               	subwf	printf@len& (0+255),w,b
 14597  0012EA  0100               	movlb	0	; () banked
 14598  0012EC  51AA               	movf	(printf@width+1)& (0+255),w,b
 14599  0012EE  0100               	movlb	0	; () banked
 14600  0012F0  59A4               	subwfb	(printf@len+1)& (0+255),w,b
 14601  0012F2  B0D8               	btfsc	status,0,c
 14602  0012F4  D009               	goto	l5638
 14603                           
 14604                           ; BSR set to: 0
 14605                           ;doprnt.c: 758: width -= len;
 14606  0012F6  0100               	movlb	0	; () banked
 14607  0012F8  51A3               	movf	printf@len& (0+255),w,b
 14608  0012FA  0100               	movlb	0	; () banked
 14609  0012FC  5FA9               	subwf	printf@width& (0+255),f,b
 14610  0012FE  0100               	movlb	0	; () banked
 14611  001300  51A4               	movf	(printf@len+1)& (0+255),w,b
 14612  001302  0100               	movlb	0	; () banked
 14613  001304  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
 14614  001306  D009               	goto	l5642
 14615  001308                     l5638:
 14616                           
 14617                           ; BSR set to: 0
 14618                           ;doprnt.c: 759: else
 14619                           ;doprnt.c: 760: width = 0;
 14620  001308  0E00               	movlw	0
 14621  00130A  0100               	movlb	0	; () banked
 14622  00130C  6FAA               	movwf	(printf@width+1)& (0+255),b
 14623  00130E  0E00               	movlw	0
 14624  001310  6FA9               	movwf	printf@width& (0+255),b
 14625                           
 14626                           ; BSR set to: 0
 14627                           ;doprnt.c: 764: while(width--)
 14628  001312  D003               	goto	l5642
 14629  001314                     l5640:
 14630                           
 14631                           ; BSR set to: 0
 14632                           ;doprnt.c: 765: (putch(' ') );
 14633  001314  0E20               	movlw	32
 14634  001316  ECD4  F024         	call	_putch
 14635  00131A                     l5642:
 14636  00131A  0100               	movlb	0	; () banked
 14637  00131C  07A9               	decf	printf@width& (0+255),f,b
 14638  00131E  A0D8               	btfss	status,0,c
 14639  001320  07AA               	decf	(printf@width+1)& (0+255),f,b
 14640  001322  0100               	movlb	0	; () banked
 14641  001324  29A9               	incf	printf@width& (0+255),w,b
 14642  001326  E1F6               	bnz	l5640
 14643  001328  0100               	movlb	0	; () banked
 14644  00132A  29AA               	incf	(printf@width+1)& (0+255),w,b
 14645  00132C  B4D8               	btfsc	status,2,c
 14646  00132E  D017               	goto	l5648
 14647  001330  D7F1               	goto	l5640
 14648  001332                     l5644:
 14649                           
 14650                           ; BSR set to: 0
 14651                           ;doprnt.c: 768: (putch(*cp++) );
 14652  001332  C09F  FFF6         	movff	printf@cp,tblptrl
 14653  001336  C0A0  FFF7         	movff	printf@cp+1,tblptrh
 14654  00133A  0E00               	movlw	low (__mediumconst shr (0+16))
 14655  00133C  6EF8               	movwf	tblptru,c
 14656  00133E  0E0F               	movlw	(high __ramtop+-1)
 14657  001340  64F7               	cpfsgt	tblptrh,c
 14658  001342  D003               	bra	u4057
 14659  001344  0008               	tblrd		*
 14660  001346  50F5               	movf	tablat,w,c
 14661  001348  D005               	bra	u4050
 14662  00134A                     u4057:
 14663  00134A  CFF6 FFE9          	movff	tblptrl,fsr0l
 14664  00134E  CFF7 FFEA          	movff	tblptrh,fsr0h
 14665  001352  50EF               	movf	indf0,w,c
 14666  001354                     u4050:
 14667  001354  ECD4  F024         	call	_putch
 14668  001358  0100               	movlb	0	; () banked
 14669  00135A  4B9F               	infsnz	printf@cp& (0+255),f,b
 14670  00135C  2BA0               	incf	(printf@cp+1)& (0+255),f,b
 14671  00135E                     l5648:
 14672                           
 14673                           ; BSR set to: 0
 14674  00135E  0100               	movlb	0	; () banked
 14675  001360  07A3               	decf	printf@len& (0+255),f,b
 14676  001362  A0D8               	btfss	status,0,c
 14677  001364  07A4               	decf	(printf@len+1)& (0+255),f,b
 14678  001366  0100               	movlb	0	; () banked
 14679  001368  29A3               	incf	printf@len& (0+255),w,b
 14680  00136A  E1E3               	bnz	l5644
 14681  00136C  0100               	movlb	0	; () banked
 14682  00136E  29A4               	incf	(printf@len+1)& (0+255),w,b
 14683  001370  B4D8               	btfsc	status,2,c
 14684  001372  D10A               	goto	l5726
 14685  001374  D7DE               	goto	l5644
 14686  001376                     l5650:
 14687                           
 14688                           ; BSR set to: 0
 14689                           ;doprnt.c: 818: flag |= 0x40;
 14690  001376  0100               	movlb	0	; () banked
 14691  001378  8DA7               	bsf	printf@flag& (0+255),6,b
 14692                           
 14693                           ; BSR set to: 0
 14694                           ;doprnt.c: 822: }
 14695                           
 14696                           ;doprnt.c: 819: break;
 14697  00137A  D01D               	goto	l1308
 14698  00137C                     l5654:
 14699  00137C  C08E  FFF6         	movff	printf@f,tblptrl
 14700  001380  C08F  FFF7         	movff	printf@f+1,tblptrh
 14701  001384  0100               	movlb	0	; () banked
 14702  001386  4B8E               	infsnz	printf@f& (0+255),f,b
 14703  001388  2B8F               	incf	(printf@f+1)& (0+255),f,b
 14704  00138A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 14705  00138A  6AF8               	clrf	tblptru,c
 14706  00138C                     	endif
 14707  00138C                     	if	0	;tblptru may be non-zero
 14708  00138C                     	endif
 14709  00138C  0008               	tblrd		*
 14710  00138E  CFF5 F0A8          	movff	tablat,printf@c
 14711  001392  0100               	movlb	0	; () banked
 14712  001394  51A8               	movf	printf@c& (0+255),w,b
 14713                           
 14714                           ; Switch size 1, requested type "space"
 14715                           ; Number of cases is 5, Range of values is 0 to 117
 14716                           ; switch strategies available:
 14717                           ; Name         Instructions Cycles
 14718                           ; simple_byte           16     9 (average)
 14719                           ;	Chosen strategy is simple_byte
 14720  001396  0A00               	xorlw	0	; case 0
 14721  001398  B4D8               	btfsc	status,2,c
 14722  00139A  0012               	return	
 14723  00139C  0A64               	xorlw	100	; case 100
 14724  00139E  B4D8               	btfsc	status,2,c
 14725  0013A0  D00A               	goto	l1308
 14726  0013A2  0A0D               	xorlw	13	; case 105
 14727  0013A4  B4D8               	btfsc	status,2,c
 14728  0013A6  D007               	goto	l1308
 14729  0013A8  0A1A               	xorlw	26	; case 115
 14730  0013AA  B4D8               	btfsc	status,2,c
 14731  0013AC  D758               	goto	l5620
 14732  0013AE  0A06               	xorlw	6	; case 117
 14733  0013B0  B4D8               	btfsc	status,2,c
 14734  0013B2  D7E1               	goto	l5650
 14735  0013B4  D0E9               	goto	l5726
 14736  0013B6                     l1308:
 14737                           
 14738                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
 14739  0013B6  0100               	movlb	0	; () banked
 14740  0013B8  BDA7               	btfsc	printf@flag& (0+255),6,b
 14741  0013BA  D019               	goto	l5666
 14742                           
 14743                           ; BSR set to: 0
 14744                           ;doprnt.c: 1253: {
 14745                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 14746  0013BC  C0A1  FFD9         	movff	printf@ap,fsr2l
 14747  0013C0  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 14748  0013C4  CFDE F0A5          	movff	postinc2,printf@val
 14749  0013C8  CFDD F0A6          	movff	postdec2,printf@val+1
 14750                           
 14751                           ; BSR set to: 0
 14752  0013CC  0E02               	movlw	2
 14753  0013CE  0100               	movlb	0	; () banked
 14754  0013D0  27A1               	addwf	printf@ap& (0+255),f,b
 14755  0013D2  0E00               	movlw	0
 14756  0013D4  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 14757                           
 14758                           ; BSR set to: 0
 14759                           ;doprnt.c: 1261: if((int)val < 0) {
 14760  0013D6  0100               	movlb	0	; () banked
 14761  0013D8  AFA6               	btfss	(printf@val+1)& (0+255),7,b
 14762  0013DA  D016               	goto	l5670
 14763                           
 14764                           ; BSR set to: 0
 14765                           ;doprnt.c: 1262: flag |= 0x03;
 14766  0013DC  0E03               	movlw	3
 14767  0013DE  0100               	movlb	0	; () banked
 14768  0013E0  13A7               	iorwf	printf@flag& (0+255),f,b
 14769                           
 14770                           ; BSR set to: 0
 14771                           ;doprnt.c: 1263: val = -val;
 14772  0013E2  0100               	movlb	0	; () banked
 14773  0013E4  6DA5               	negf	printf@val& (0+255),b
 14774  0013E6  1FA6               	comf	(printf@val+1)& (0+255),f,b
 14775  0013E8  B0D8               	btfsc	status,0,c
 14776  0013EA  2BA6               	incf	(printf@val+1)& (0+255),f,b
 14777                           
 14778                           ; BSR set to: 0
 14779                           ;doprnt.c: 1264: }
 14780                           ;doprnt.c: 1266: }
 14781  0013EC  D00D               	goto	l5670
 14782  0013EE                     l5666:
 14783                           
 14784                           ; BSR set to: 0
 14785                           ;doprnt.c: 1268: else
 14786                           ;doprnt.c: 1273: {
 14787                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 14788  0013EE  C0A1  FFD9         	movff	printf@ap,fsr2l
 14789  0013F2  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 14790  0013F6  CFDE F0A5          	movff	postinc2,printf@val
 14791  0013FA  CFDD F0A6          	movff	postdec2,printf@val+1
 14792                           
 14793                           ; BSR set to: 0
 14794  0013FE  0E02               	movlw	2
 14795  001400  0100               	movlb	0	; () banked
 14796  001402  27A1               	addwf	printf@ap& (0+255),f,b
 14797  001404  0E00               	movlw	0
 14798  001406  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 14799  001408                     l5670:
 14800                           
 14801                           ; BSR set to: 0
 14802                           ;doprnt.c: 1287: }
 14803                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 14804  001408  0E01               	movlw	1
 14805  00140A  0100               	movlb	0	; () banked
 14806  00140C  6FA8               	movwf	printf@c& (0+255),b
 14807  00140E                     l5672:
 14808                           
 14809                           ; BSR set to: 0
 14810  00140E  0E05               	movlw	5
 14811  001410  0100               	movlb	0	; () banked
 14812  001412  19A8               	xorwf	printf@c& (0+255),w,b
 14813  001414  B4D8               	btfsc	status,2,c
 14814  001416  D019               	goto	l5684
 14815                           
 14816                           ; BSR set to: 0
 14817                           ;doprnt.c: 1306: if(val < dpowers[c])
 14818                           
 14819                           ; BSR set to: 0
 14820                           
 14821                           ; BSR set to: 0
 14822  001418  0100               	movlb	0	; () banked
 14823  00141A  51A8               	movf	printf@c& (0+255),w,b
 14824  00141C  0D02               	mullw	2
 14825  00141E  0E12               	movlw	low _dpowers
 14826  001420  24F3               	addwf	prodl,w,c
 14827  001422  6EF6               	movwf	tblptrl,c
 14828  001424  0EFB               	movlw	high _dpowers
 14829  001426  20F4               	addwfc	prodh,w,c
 14830  001428  6EF7               	movwf	tblptrh,c
 14831  00142A                     	if	1	;There are 3 active tblptr bytes
 14832  00142A  6AF8               	clrf	tblptru,c
 14833  00142C  0E00               	movlw	low (__mediumconst shr (0+16))
 14834  00142E  22F8               	addwfc	tblptru,f,c
 14835  001430                     	endif
 14836  001430  0009               	tblrd		*+
 14837  001432  50F5               	movf	tablat,w,c
 14838  001434  0100               	movlb	0	; () banked
 14839  001436  5DA5               	subwf	printf@val& (0+255),w,b
 14840  001438  0009               	tblrd		*+
 14841  00143A  50F5               	movf	tablat,w,c
 14842  00143C  0100               	movlb	0	; () banked
 14843  00143E  59A6               	subwfb	(printf@val+1)& (0+255),w,b
 14844  001440  A0D8               	btfss	status,0,c
 14845  001442  D003               	goto	l5684
 14846                           
 14847                           ; BSR set to: 0
 14848                           
 14849                           ; BSR set to: 0
 14850                           
 14851                           ; BSR set to: 0
 14852                           ;doprnt.c: 1307: break;
 14853  001444  0100               	movlb	0	; () banked
 14854  001446  2BA8               	incf	printf@c& (0+255),f,b
 14855  001448  D7E2               	goto	l5672
 14856  00144A                     l5684:
 14857                           
 14858                           ; BSR set to: 0
 14859                           ;doprnt.c: 1345: if(width && flag & 0x03)
 14860  00144A  0100               	movlb	0	; () banked
 14861  00144C  51A9               	movf	printf@width& (0+255),w,b
 14862  00144E  0100               	movlb	0	; () banked
 14863  001450  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 14864  001452  B4D8               	btfsc	status,2,c
 14865  001454  D00B               	goto	l5690
 14866                           
 14867                           ; BSR set to: 0
 14868  001456  C0A7  F09A         	movff	printf@flag,??_printf
 14869  00145A  0E03               	movlw	3
 14870  00145C  0100               	movlb	0	; () banked
 14871  00145E  179A               	andwf	??_printf& (0+255),f,b
 14872  001460  B4D8               	btfsc	status,2,c
 14873  001462  D004               	goto	l5690
 14874                           
 14875                           ; BSR set to: 0
 14876                           ;doprnt.c: 1346: width--;
 14877  001464  0100               	movlb	0	; () banked
 14878  001466  07A9               	decf	printf@width& (0+255),f,b
 14879  001468  A0D8               	btfss	status,0,c
 14880  00146A  07AA               	decf	(printf@width+1)& (0+255),f,b
 14881  00146C                     l5690:
 14882                           
 14883                           ; BSR set to: 0
 14884                           ;doprnt.c: 1381: if(width > c)
 14885  00146C  0E80               	movlw	128
 14886  00146E  0100               	movlb	0	; () banked
 14887  001470  BFA8               	btfsc	printf@c& (0+255),7,b
 14888  001472  0E7F               	movlw	127
 14889  001474  0100               	movlb	0	; () banked
 14890  001476  6F9A               	movwf	??_printf& (0+255),b
 14891  001478  0100               	movlb	0	; () banked
 14892  00147A  51A9               	movf	printf@width& (0+255),w,b
 14893  00147C  0100               	movlb	0	; () banked
 14894  00147E  5DA8               	subwf	printf@c& (0+255),w,b
 14895  001480  0100               	movlb	0	; () banked
 14896  001482  51AA               	movf	(printf@width+1)& (0+255),w,b
 14897  001484  0A80               	xorlw	128
 14898  001486  0100               	movlb	0	; () banked
 14899  001488  599A               	subwfb	??_printf& (0+255),w,b
 14900  00148A  B0D8               	btfsc	status,0,c
 14901  00148C  D00B               	goto	l5694
 14902                           
 14903                           ; BSR set to: 0
 14904                           ;doprnt.c: 1382: width -= c;
 14905  00148E  0100               	movlb	0	; () banked
 14906  001490  51A8               	movf	printf@c& (0+255),w,b
 14907  001492  0100               	movlb	0	; () banked
 14908  001494  5FA9               	subwf	printf@width& (0+255),f,b
 14909  001496  0E00               	movlw	0
 14910  001498  0100               	movlb	0	; () banked
 14911  00149A  BFA8               	btfsc	printf@c& (0+255),7,b
 14912  00149C  0EFF               	movlw	255
 14913  00149E  0100               	movlb	0	; () banked
 14914  0014A0  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
 14915  0014A2  D005               	goto	l5696
 14916  0014A4                     l5694:
 14917                           
 14918                           ; BSR set to: 0
 14919                           ;doprnt.c: 1383: else
 14920                           ;doprnt.c: 1384: width = 0;
 14921  0014A4  0E00               	movlw	0
 14922  0014A6  0100               	movlb	0	; () banked
 14923  0014A8  6FAA               	movwf	(printf@width+1)& (0+255),b
 14924  0014AA  0E00               	movlw	0
 14925  0014AC  6FA9               	movwf	printf@width& (0+255),b
 14926  0014AE                     l5696:
 14927                           
 14928                           ; BSR set to: 0
 14929                           ;doprnt.c: 1387: if(flag & 0x04) {
 14930  0014AE  0100               	movlb	0	; () banked
 14931  0014B0  A5A7               	btfss	printf@flag& (0+255),2,b
 14932  0014B2  D018               	goto	l5708
 14933                           
 14934                           ; BSR set to: 0
 14935                           ;doprnt.c: 1392: if(flag & 0x03)
 14936  0014B4  C0A7  F09A         	movff	printf@flag,??_printf
 14937  0014B8  0E03               	movlw	3
 14938  0014BA  0100               	movlb	0	; () banked
 14939  0014BC  179A               	andwf	??_printf& (0+255),f,b
 14940  0014BE  B4D8               	btfsc	status,2,c
 14941  0014C0  D003               	goto	l5702
 14942                           
 14943                           ; BSR set to: 0
 14944                           ;doprnt.c: 1393: (putch('-') );
 14945  0014C2  0E2D               	movlw	45
 14946  0014C4  ECD4  F024         	call	_putch
 14947  0014C8                     l5702:
 14948                           
 14949                           ;doprnt.c: 1415: if(width)
 14950  0014C8  0100               	movlb	0	; () banked
 14951  0014CA  51A9               	movf	printf@width& (0+255),w,b
 14952  0014CC  0100               	movlb	0	; () banked
 14953  0014CE  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 14954  0014D0  B4D8               	btfsc	status,2,c
 14955  0014D2  D025               	goto	l5718
 14956                           
 14957                           ; BSR set to: 0
 14958                           ;doprnt.c: 1417: (putch('0') );
 14959                           
 14960                           ; BSR set to: 0
 14961                           
 14962                           ;doprnt.c: 1416: do
 14963  0014D4  0E30               	movlw	48
 14964  0014D6  ECD4  F024         	call	_putch
 14965                           
 14966                           ;doprnt.c: 1418: while(--width);
 14967  0014DA  0100               	movlb	0	; () banked
 14968  0014DC  07A9               	decf	printf@width& (0+255),f,b
 14969  0014DE  A0D8               	btfss	status,0,c
 14970  0014E0  07AA               	decf	(printf@width+1)& (0+255),f,b
 14971  0014E2  D7F2               	goto	l5702
 14972  0014E4                     l5708:
 14973                           
 14974                           ; BSR set to: 0
 14975                           ;doprnt.c: 1422: {
 14976                           ;doprnt.c: 1424: if(width
 14977                           ;doprnt.c: 1428: )
 14978  0014E4  0100               	movlb	0	; () banked
 14979  0014E6  51A9               	movf	printf@width& (0+255),w,b
 14980  0014E8  0100               	movlb	0	; () banked
 14981  0014EA  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 14982  0014EC  B4D8               	btfsc	status,2,c
 14983  0014EE  D00D               	goto	l5714
 14984  0014F0                     l5710:
 14985                           
 14986                           ; BSR set to: 0
 14987                           ;doprnt.c: 1430: (putch(' ') );
 14988  0014F0  0E20               	movlw	32
 14989  0014F2  ECD4  F024         	call	_putch
 14990                           
 14991                           ;doprnt.c: 1431: while(--width);
 14992  0014F6  0100               	movlb	0	; () banked
 14993  0014F8  07A9               	decf	printf@width& (0+255),f,b
 14994  0014FA  A0D8               	btfss	status,0,c
 14995  0014FC  07AA               	decf	(printf@width+1)& (0+255),f,b
 14996  0014FE  0100               	movlb	0	; () banked
 14997  001500  51A9               	movf	printf@width& (0+255),w,b
 14998  001502  0100               	movlb	0	; () banked
 14999  001504  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 15000  001506  A4D8               	btfss	status,2,c
 15001  001508  D7F3               	goto	l5710
 15002  00150A                     l5714:
 15003                           
 15004                           ; BSR set to: 0
 15005                           ;doprnt.c: 1438: if(flag & 0x03)
 15006  00150A  C0A7  F09A         	movff	printf@flag,??_printf
 15007  00150E  0E03               	movlw	3
 15008  001510  0100               	movlb	0	; () banked
 15009  001512  179A               	andwf	??_printf& (0+255),f,b
 15010  001514  B4D8               	btfsc	status,2,c
 15011  001516  D003               	goto	l5718
 15012                           
 15013                           ; BSR set to: 0
 15014                           ;doprnt.c: 1439: (putch('-') );
 15015  001518  0E2D               	movlw	45
 15016  00151A  ECD4  F024         	call	_putch
 15017  00151E                     l5718:
 15018                           
 15019                           ;doprnt.c: 1469: }
 15020                           ;doprnt.c: 1472: prec = c;
 15021  00151E  C0A8  F09E         	movff	printf@c,printf@prec
 15022                           
 15023                           ;doprnt.c: 1474: while(prec--) {
 15024  001522  D02C               	goto	l5724
 15025  001524                     l5720:
 15026                           
 15027                           ;doprnt.c: 1478: {
 15028                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 15029  001524  0100               	movlb	0	; () banked
 15030  001526  519E               	movf	printf@prec& (0+255),w,b
 15031  001528  0D02               	mullw	2
 15032  00152A  0E12               	movlw	low _dpowers
 15033  00152C  24F3               	addwf	prodl,w,c
 15034  00152E  6EF6               	movwf	tblptrl,c
 15035  001530  0EFB               	movlw	high _dpowers
 15036  001532  20F4               	addwfc	prodh,w,c
 15037  001534  6EF7               	movwf	tblptrh,c
 15038  001536                     	if	1	;There are 3 active tblptr bytes
 15039  001536  6AF8               	clrf	tblptru,c
 15040  001538  0E00               	movlw	low (__mediumconst shr (0+16))
 15041  00153A  22F8               	addwfc	tblptru,f,c
 15042  00153C                     	endif
 15043  00153C  0009               	tblrd		*+
 15044  00153E  CFF5 F082          	movff	tablat,___lwdiv@divisor
 15045  001542  000A               	tblrd		*-
 15046  001544  CFF5 F083          	movff	tablat,___lwdiv@divisor+1
 15047  001548  C0A5  F080         	movff	printf@val,___lwdiv@dividend
 15048  00154C  C0A6  F081         	movff	printf@val+1,___lwdiv@dividend+1
 15049  001550  ECD9  F01E         	call	___lwdiv	;wreg free
 15050  001554  C080  F087         	movff	?___lwdiv,___lwmod@dividend
 15051  001558  C081  F088         	movff	?___lwdiv+1,___lwmod@dividend+1
 15052  00155C  0E00               	movlw	0
 15053  00155E  0100               	movlb	0	; () banked
 15054  001560  6F8A               	movwf	(___lwmod@divisor+1)& (0+255),b
 15055  001562  0E0A               	movlw	10
 15056  001564  6F89               	movwf	___lwmod@divisor& (0+255),b
 15057  001566  ECF1  F01F         	call	___lwmod	;wreg free
 15058  00156A  0100               	movlb	0	; () banked
 15059  00156C  5187               	movf	?___lwmod& (0+255),w,b
 15060  00156E  0F30               	addlw	48
 15061  001570  0100               	movlb	0	; () banked
 15062  001572  6FA8               	movwf	printf@c& (0+255),b
 15063                           
 15064                           ; BSR set to: 0
 15065                           ;doprnt.c: 1523: }
 15066                           ;doprnt.c: 1524: (putch(c) );
 15067  001574  0100               	movlb	0	; () banked
 15068  001576  51A8               	movf	printf@c& (0+255),w,b
 15069  001578  ECD4  F024         	call	_putch
 15070  00157C                     l5724:
 15071  00157C  0100               	movlb	0	; () banked
 15072  00157E  079E               	decf	printf@prec& (0+255),f,b
 15073  001580  0100               	movlb	0	; () banked
 15074  001582  299E               	incf	printf@prec& (0+255),w,b
 15075  001584  A4D8               	btfss	status,2,c
 15076  001586  D7CE               	goto	l5720
 15077  001588                     l5726:
 15078  001588  C08E  FFF6         	movff	printf@f,tblptrl
 15079  00158C  C08F  FFF7         	movff	printf@f+1,tblptrh
 15080  001590  0100               	movlb	0	; () banked
 15081  001592  4B8E               	infsnz	printf@f& (0+255),f,b
 15082  001594  2B8F               	incf	(printf@f+1)& (0+255),f,b
 15083  001596                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 15084  001596  6AF8               	clrf	tblptru,c
 15085  001598                     	endif
 15086  001598                     	if	0	;tblptru may be non-zero
 15087  001598                     	endif
 15088  001598  0008               	tblrd		*
 15089  00159A  CFF5 F0A8          	movff	tablat,printf@c
 15090  00159E  0100               	movlb	0	; () banked
 15091  0015A0  51A8               	movf	printf@c& (0+255),w,b
 15092  0015A2  B4D8               	btfsc	status,2,c
 15093  0015A4  0012               	return	
 15094  0015A6  D5EB               	goto	l5596
 15095  0015A8                     __end_of_printf:
 15096                           	opt stack 0
 15097                           tblptru	equ	0xFF8
 15098                           tblptrh	equ	0xFF7
 15099                           tblptrl	equ	0xFF6
 15100                           tablat	equ	0xFF5
 15101                           prodh	equ	0xFF4
 15102                           prodl	equ	0xFF3
 15103                           intcon	equ	0xFF2
 15104                           intcon2	equ	0xFF1
 15105                           intcon3	equ	0xFF0
 15106                           indf0	equ	0xFEF
 15107                           postinc0	equ	0xFEE
 15108                           fsr0h	equ	0xFEA
 15109                           fsr0l	equ	0xFE9
 15110                           wreg	equ	0xFE8
 15111                           postdec1	equ	0xFE5
 15112                           fsr1l	equ	0xFE1
 15113                           indf2	equ	0xFDF
 15114                           postinc2	equ	0xFDE
 15115                           postdec2	equ	0xFDD
 15116                           fsr2h	equ	0xFDA
 15117                           fsr2l	equ	0xFD9
 15118                           status	equ	0xFD8
 15119                           
 15120 ;; *************** function _putch *****************
 15121 ;; Defined at:
 15122 ;;		line 20 in file "lcd.c"
 15123 ;; Parameters:    Size  Location     Type
 15124 ;;  data            1    wreg     unsigned char 
 15125 ;; Auto vars:     Size  Location     Type
 15126 ;;  data            1    2[BANK0 ] unsigned char 
 15127 ;; Return value:  Size  Location     Type
 15128 ;;                  1    wreg      void 
 15129 ;; Registers used:
 15130 ;;		wreg, status,2, status,0, cstack
 15131 ;; Tracked objects:
 15132 ;;		On entry : 0/0
 15133 ;;		On exit  : 0/0
 15134 ;;		Unchanged: 0/0
 15135 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15136 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15137 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15138 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15139 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15140 ;;Total ram usage:        1 bytes
 15141 ;; Hardware stack levels used:    1
 15142 ;; Hardware stack levels required when called:    8
 15143 ;; This function calls:
 15144 ;;		_lcdNibble
 15145 ;; This function is called by:
 15146 ;;		_printf
 15147 ;; This function uses a non-reentrant model
 15148 ;;
 15149                           
 15150                           	psect	text52
 15151  0049A8                     __ptext52:
 15152                           	opt stack 0
 15153  0049A8                     _putch:
 15154                           	opt stack 18
 15155                           
 15156                           ;incstack = 0
 15157                           ;putch@data stored from wreg
 15158  0049A8  0100               	movlb	0	; () banked
 15159  0049AA  6F82               	movwf	putch@data& (0+255),b
 15160                           
 15161                           ;lcd.c: 21: LATDbits.LATD2 = 1;
 15162  0049AC  848C               	bsf	3980,2,c	;volatile
 15163                           
 15164                           ;lcd.c: 22: lcdNibble(data);
 15165  0049AE  0100               	movlb	0	; () banked
 15166  0049B0  5182               	movf	putch@data& (0+255),w,b
 15167  0049B2  ECBD  F01F         	call	_lcdNibble
 15168  0049B6  0012               	return		;funcret
 15169  0049B8                     __end_of_putch:
 15170                           	opt stack 0
 15171                           tblptru	equ	0xFF8
 15172                           tblptrh	equ	0xFF7
 15173                           tblptrl	equ	0xFF6
 15174                           tablat	equ	0xFF5
 15175                           prodh	equ	0xFF4
 15176                           prodl	equ	0xFF3
 15177                           intcon	equ	0xFF2
 15178                           intcon2	equ	0xFF1
 15179                           intcon3	equ	0xFF0
 15180                           indf0	equ	0xFEF
 15181                           postinc0	equ	0xFEE
 15182                           fsr0h	equ	0xFEA
 15183                           fsr0l	equ	0xFE9
 15184                           wreg	equ	0xFE8
 15185                           postdec1	equ	0xFE5
 15186                           fsr1l	equ	0xFE1
 15187                           indf2	equ	0xFDF
 15188                           postinc2	equ	0xFDE
 15189                           postdec2	equ	0xFDD
 15190                           fsr2h	equ	0xFDA
 15191                           fsr2l	equ	0xFD9
 15192                           status	equ	0xFD8
 15193                           
 15194 ;; *************** function _isdigit *****************
 15195 ;; Defined at:
 15196 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 15197 ;; Parameters:    Size  Location     Type
 15198 ;;  c               1    wreg     unsigned char 
 15199 ;; Auto vars:     Size  Location     Type
 15200 ;;  c               1    2[BANK0 ] unsigned char 
 15201 ;; Return value:  Size  Location     Type
 15202 ;;		None               void
 15203 ;; Registers used:
 15204 ;;		wreg, status,2, status,0
 15205 ;; Tracked objects:
 15206 ;;		On entry : 0/0
 15207 ;;		On exit  : 0/0
 15208 ;;		Unchanged: 0/0
 15209 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15210 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15211 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15212 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15213 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15214 ;;Total ram usage:        3 bytes
 15215 ;; Hardware stack levels used:    1
 15216 ;; Hardware stack levels required when called:    7
 15217 ;; This function calls:
 15218 ;;		Nothing
 15219 ;; This function is called by:
 15220 ;;		_printf
 15221 ;; This function uses a non-reentrant model
 15222 ;;
 15223                           
 15224                           	psect	text53
 15225  0047F2                     __ptext53:
 15226                           	opt stack 0
 15227  0047F2                     _isdigit:
 15228                           	opt stack 19
 15229                           
 15230                           ;incstack = 0
 15231                           ;isdigit@c stored from wreg
 15232  0047F2  0100               	movlb	0	; () banked
 15233  0047F4  6F82               	movwf	isdigit@c& (0+255),b
 15234  0047F6  0E00               	movlw	0
 15235  0047F8  0100               	movlb	0	; () banked
 15236  0047FA  6F81               	movwf	_isdigit$1958& (0+255),b
 15237                           
 15238                           ; BSR set to: 0
 15239  0047FC  0E3A               	movlw	58
 15240  0047FE  0100               	movlb	0	; () banked
 15241  004800  6182               	cpfslt	isdigit@c& (0+255),b
 15242  004802  D007               	goto	l5444
 15243                           
 15244                           ; BSR set to: 0
 15245  004804  0E2F               	movlw	47
 15246  004806  0100               	movlb	0	; () banked
 15247  004808  6582               	cpfsgt	isdigit@c& (0+255),b
 15248  00480A  D003               	goto	l5444
 15249                           
 15250                           ; BSR set to: 0
 15251  00480C  0E01               	movlw	1
 15252  00480E  0100               	movlb	0	; () banked
 15253  004810  6F81               	movwf	_isdigit$1958& (0+255),b
 15254  004812                     l5444:
 15255                           
 15256                           ; BSR set to: 0
 15257  004812  C081  F080         	movff	_isdigit$1958,??_isdigit
 15258  004816  0100               	movlb	0	; () banked
 15259  004818  3180               	rrcf	??_isdigit& (0+255),w,b
 15260  00481A  0012               	return	
 15261  00481C                     __end_of_isdigit:
 15262                           	opt stack 0
 15263                           tblptru	equ	0xFF8
 15264                           tblptrh	equ	0xFF7
 15265                           tblptrl	equ	0xFF6
 15266                           tablat	equ	0xFF5
 15267                           prodh	equ	0xFF4
 15268                           prodl	equ	0xFF3
 15269                           intcon	equ	0xFF2
 15270                           intcon2	equ	0xFF1
 15271                           intcon3	equ	0xFF0
 15272                           indf0	equ	0xFEF
 15273                           postinc0	equ	0xFEE
 15274                           fsr0h	equ	0xFEA
 15275                           fsr0l	equ	0xFE9
 15276                           wreg	equ	0xFE8
 15277                           postdec1	equ	0xFE5
 15278                           fsr1l	equ	0xFE1
 15279                           indf2	equ	0xFDF
 15280                           postinc2	equ	0xFDE
 15281                           postdec2	equ	0xFDD
 15282                           fsr2h	equ	0xFDA
 15283                           fsr2l	equ	0xFD9
 15284                           status	equ	0xFD8
 15285                           
 15286 ;; *************** function ___wmul *****************
 15287 ;; Defined at:
 15288 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 15289 ;; Parameters:    Size  Location     Type
 15290 ;;  multiplier      2    0[BANK0 ] unsigned int 
 15291 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 15292 ;; Auto vars:     Size  Location     Type
 15293 ;;  product         2    4[BANK0 ] unsigned int 
 15294 ;; Return value:  Size  Location     Type
 15295 ;;                  2    0[BANK0 ] unsigned int 
 15296 ;; Registers used:
 15297 ;;		wreg, status,2, status,0, prodl, prodh
 15298 ;; Tracked objects:
 15299 ;;		On entry : 0/0
 15300 ;;		On exit  : 0/0
 15301 ;;		Unchanged: 0/0
 15302 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15303 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15304 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15305 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15306 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15307 ;;Total ram usage:        6 bytes
 15308 ;; Hardware stack levels used:    1
 15309 ;; Hardware stack levels required when called:    7
 15310 ;; This function calls:
 15311 ;;		Nothing
 15312 ;; This function is called by:
 15313 ;;		_printf
 15314 ;; This function uses a non-reentrant model
 15315 ;;
 15316                           
 15317                           	psect	text54
 15318  0044C6                     __ptext54:
 15319                           	opt stack 0
 15320  0044C6                     ___wmul:
 15321                           	opt stack 19
 15322                           
 15323                           ; BSR set to: 0
 15324                           ;incstack = 0
 15325  0044C6  0100               	movlb	0	; () banked
 15326  0044C8  5180               	movf	___wmul@multiplier& (0+255),w,b
 15327  0044CA  0100               	movlb	0	; () banked
 15328  0044CC  0382               	mulwf	___wmul@multiplicand& (0+255),b
 15329  0044CE  CFF3 F084          	movff	prodl,___wmul@product
 15330  0044D2  CFF4 F085          	movff	prodh,___wmul@product+1
 15331  0044D6  0100               	movlb	0	; () banked
 15332  0044D8  5180               	movf	___wmul@multiplier& (0+255),w,b
 15333  0044DA  0100               	movlb	0	; () banked
 15334  0044DC  0383               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 15335  0044DE  50F3               	movf	prodl,w,c
 15336  0044E0  0100               	movlb	0	; () banked
 15337  0044E2  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 15338  0044E4  0100               	movlb	0	; () banked
 15339  0044E6  5181               	movf	(___wmul@multiplier+1)& (0+255),w,b
 15340  0044E8  0100               	movlb	0	; () banked
 15341  0044EA  0382               	mulwf	___wmul@multiplicand& (0+255),b
 15342  0044EC  50F3               	movf	prodl,w,c
 15343  0044EE  0100               	movlb	0	; () banked
 15344  0044F0  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 15345                           
 15346                           ; BSR set to: 0
 15347  0044F2  C084  F080         	movff	___wmul@product,?___wmul
 15348  0044F6  C085  F081         	movff	___wmul@product+1,?___wmul+1
 15349  0044FA  0012               	return	
 15350  0044FC                     __end_of___wmul:
 15351                           	opt stack 0
 15352                           tblptru	equ	0xFF8
 15353                           tblptrh	equ	0xFF7
 15354                           tblptrl	equ	0xFF6
 15355                           tablat	equ	0xFF5
 15356                           prodh	equ	0xFF4
 15357                           prodl	equ	0xFF3
 15358                           intcon	equ	0xFF2
 15359                           intcon2	equ	0xFF1
 15360                           intcon3	equ	0xFF0
 15361                           indf0	equ	0xFEF
 15362                           postinc0	equ	0xFEE
 15363                           fsr0h	equ	0xFEA
 15364                           fsr0l	equ	0xFE9
 15365                           wreg	equ	0xFE8
 15366                           postdec1	equ	0xFE5
 15367                           fsr1l	equ	0xFE1
 15368                           indf2	equ	0xFDF
 15369                           postinc2	equ	0xFDE
 15370                           postdec2	equ	0xFDD
 15371                           fsr2h	equ	0xFDA
 15372                           fsr2l	equ	0xFD9
 15373                           status	equ	0xFD8
 15374                           
 15375 ;; *************** function ___lwmod *****************
 15376 ;; Defined at:
 15377 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 15378 ;; Parameters:    Size  Location     Type
 15379 ;;  dividend        2    7[BANK0 ] unsigned int 
 15380 ;;  divisor         2    9[BANK0 ] unsigned int 
 15381 ;; Auto vars:     Size  Location     Type
 15382 ;;  counter         1   11[BANK0 ] unsigned char 
 15383 ;; Return value:  Size  Location     Type
 15384 ;;                  2    7[BANK0 ] unsigned int 
 15385 ;; Registers used:
 15386 ;;		wreg, status,2, status,0
 15387 ;; Tracked objects:
 15388 ;;		On entry : 0/0
 15389 ;;		On exit  : 0/0
 15390 ;;		Unchanged: 0/0
 15391 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15392 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15393 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15394 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15395 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15396 ;;Total ram usage:        5 bytes
 15397 ;; Hardware stack levels used:    1
 15398 ;; Hardware stack levels required when called:    7
 15399 ;; This function calls:
 15400 ;;		Nothing
 15401 ;; This function is called by:
 15402 ;;		_printf
 15403 ;; This function uses a non-reentrant model
 15404 ;;
 15405                           
 15406                           	psect	text55
 15407  003FE2                     __ptext55:
 15408                           	opt stack 0
 15409  003FE2                     ___lwmod:
 15410                           	opt stack 19
 15411                           
 15412                           ; BSR set to: 0
 15413                           ;incstack = 0
 15414  003FE2  0100               	movlb	0	; () banked
 15415  003FE4  5189               	movf	___lwmod@divisor& (0+255),w,b
 15416  003FE6  0100               	movlb	0	; () banked
 15417  003FE8  118A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
 15418  003FEA  B4D8               	btfsc	status,2,c
 15419  003FEC  D026               	goto	l1765
 15420                           
 15421                           ; BSR set to: 0
 15422  003FEE  0E01               	movlw	1
 15423  003FF0  0100               	movlb	0	; () banked
 15424  003FF2  6F8B               	movwf	___lwmod@counter& (0+255),b
 15425  003FF4  D006               	goto	l5482
 15426  003FF6                     l5480:
 15427                           
 15428                           ; BSR set to: 0
 15429  003FF6  0100               	movlb	0	; () banked
 15430  003FF8  90D8               	bcf	status,0,c
 15431  003FFA  3789               	rlcf	___lwmod@divisor& (0+255),f,b
 15432  003FFC  378A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 15433  003FFE  0100               	movlb	0	; () banked
 15434  004000  2B8B               	incf	___lwmod@counter& (0+255),f,b
 15435  004002                     l5482:
 15436                           
 15437                           ; BSR set to: 0
 15438  004002  0100               	movlb	0	; () banked
 15439  004004  AF8A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 15440  004006  D7F7               	goto	l5480
 15441  004008                     l5484:
 15442                           
 15443                           ; BSR set to: 0
 15444  004008  0100               	movlb	0	; () banked
 15445  00400A  5189               	movf	___lwmod@divisor& (0+255),w,b
 15446  00400C  0100               	movlb	0	; () banked
 15447  00400E  5D87               	subwf	___lwmod@dividend& (0+255),w,b
 15448  004010  0100               	movlb	0	; () banked
 15449  004012  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 15450  004014  0100               	movlb	0	; () banked
 15451  004016  5988               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 15452  004018  A0D8               	btfss	status,0,c
 15453  00401A  D008               	goto	l5488
 15454                           
 15455                           ; BSR set to: 0
 15456  00401C  0100               	movlb	0	; () banked
 15457  00401E  5189               	movf	___lwmod@divisor& (0+255),w,b
 15458  004020  0100               	movlb	0	; () banked
 15459  004022  5F87               	subwf	___lwmod@dividend& (0+255),f,b
 15460  004024  0100               	movlb	0	; () banked
 15461  004026  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 15462  004028  0100               	movlb	0	; () banked
 15463  00402A  5B88               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 15464  00402C                     l5488:
 15465                           
 15466                           ; BSR set to: 0
 15467  00402C  0100               	movlb	0	; () banked
 15468  00402E  90D8               	bcf	status,0,c
 15469  004030  338A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 15470  004032  3389               	rrcf	___lwmod@divisor& (0+255),f,b
 15471                           
 15472                           ; BSR set to: 0
 15473  004034  0100               	movlb	0	; () banked
 15474  004036  2F8B               	decfsz	___lwmod@counter& (0+255),f,b
 15475  004038  D7E7               	goto	l5484
 15476  00403A                     l1765:
 15477                           
 15478                           ; BSR set to: 0
 15479  00403A  C087  F087         	movff	___lwmod@dividend,?___lwmod
 15480  00403E  C088  F088         	movff	___lwmod@dividend+1,?___lwmod+1
 15481                           
 15482                           ; BSR set to: 0
 15483  004042  0012               	return		;funcret
 15484  004044                     __end_of___lwmod:
 15485                           	opt stack 0
 15486                           tblptru	equ	0xFF8
 15487                           tblptrh	equ	0xFF7
 15488                           tblptrl	equ	0xFF6
 15489                           tablat	equ	0xFF5
 15490                           prodh	equ	0xFF4
 15491                           prodl	equ	0xFF3
 15492                           intcon	equ	0xFF2
 15493                           intcon2	equ	0xFF1
 15494                           intcon3	equ	0xFF0
 15495                           indf0	equ	0xFEF
 15496                           postinc0	equ	0xFEE
 15497                           fsr0h	equ	0xFEA
 15498                           fsr0l	equ	0xFE9
 15499                           wreg	equ	0xFE8
 15500                           postdec1	equ	0xFE5
 15501                           fsr1l	equ	0xFE1
 15502                           indf2	equ	0xFDF
 15503                           postinc2	equ	0xFDE
 15504                           postdec2	equ	0xFDD
 15505                           fsr2h	equ	0xFDA
 15506                           fsr2l	equ	0xFD9
 15507                           status	equ	0xFD8
 15508                           
 15509 ;; *************** function ___lwdiv *****************
 15510 ;; Defined at:
 15511 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 15512 ;; Parameters:    Size  Location     Type
 15513 ;;  dividend        2    0[BANK0 ] unsigned int 
 15514 ;;  divisor         2    2[BANK0 ] unsigned int 
 15515 ;; Auto vars:     Size  Location     Type
 15516 ;;  quotient        2    4[BANK0 ] unsigned int 
 15517 ;;  counter         1    6[BANK0 ] unsigned char 
 15518 ;; Return value:  Size  Location     Type
 15519 ;;                  2    0[BANK0 ] unsigned int 
 15520 ;; Registers used:
 15521 ;;		wreg, status,2, status,0
 15522 ;; Tracked objects:
 15523 ;;		On entry : 0/0
 15524 ;;		On exit  : 0/0
 15525 ;;		Unchanged: 0/0
 15526 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15527 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15528 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15529 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15530 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15531 ;;Total ram usage:        7 bytes
 15532 ;; Hardware stack levels used:    1
 15533 ;; Hardware stack levels required when called:    7
 15534 ;; This function calls:
 15535 ;;		Nothing
 15536 ;; This function is called by:
 15537 ;;		_printf
 15538 ;; This function uses a non-reentrant model
 15539 ;;
 15540                           
 15541                           	psect	text56
 15542  003DB2                     __ptext56:
 15543                           	opt stack 0
 15544  003DB2                     ___lwdiv:
 15545                           	opt stack 19
 15546                           
 15547                           ; BSR set to: 0
 15548                           ;incstack = 0
 15549  003DB2  0E00               	movlw	0
 15550  003DB4  0100               	movlb	0	; () banked
 15551  003DB6  6F85               	movwf	(___lwdiv@quotient+1)& (0+255),b
 15552  003DB8  0E00               	movlw	0
 15553  003DBA  6F84               	movwf	___lwdiv@quotient& (0+255),b
 15554                           
 15555                           ; BSR set to: 0
 15556  003DBC  0100               	movlb	0	; () banked
 15557  003DBE  5182               	movf	___lwdiv@divisor& (0+255),w,b
 15558  003DC0  0100               	movlb	0	; () banked
 15559  003DC2  1183               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
 15560  003DC4  B4D8               	btfsc	status,2,c
 15561  003DC6  D02C               	goto	l1755
 15562                           
 15563                           ; BSR set to: 0
 15564  003DC8  0E01               	movlw	1
 15565  003DCA  0100               	movlb	0	; () banked
 15566  003DCC  6F86               	movwf	___lwdiv@counter& (0+255),b
 15567  003DCE  D006               	goto	l5462
 15568  003DD0                     l5460:
 15569                           
 15570                           ; BSR set to: 0
 15571  003DD0  0100               	movlb	0	; () banked
 15572  003DD2  90D8               	bcf	status,0,c
 15573  003DD4  3782               	rlcf	___lwdiv@divisor& (0+255),f,b
 15574  003DD6  3783               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 15575  003DD8  0100               	movlb	0	; () banked
 15576  003DDA  2B86               	incf	___lwdiv@counter& (0+255),f,b
 15577  003DDC                     l5462:
 15578                           
 15579                           ; BSR set to: 0
 15580  003DDC  0100               	movlb	0	; () banked
 15581  003DDE  AF83               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 15582  003DE0  D7F7               	goto	l5460
 15583  003DE2                     l5464:
 15584                           
 15585                           ; BSR set to: 0
 15586  003DE2  0100               	movlb	0	; () banked
 15587  003DE4  90D8               	bcf	status,0,c
 15588  003DE6  3784               	rlcf	___lwdiv@quotient& (0+255),f,b
 15589  003DE8  3785               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 15590                           
 15591                           ; BSR set to: 0
 15592  003DEA  0100               	movlb	0	; () banked
 15593  003DEC  5182               	movf	___lwdiv@divisor& (0+255),w,b
 15594  003DEE  0100               	movlb	0	; () banked
 15595  003DF0  5D80               	subwf	___lwdiv@dividend& (0+255),w,b
 15596  003DF2  0100               	movlb	0	; () banked
 15597  003DF4  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 15598  003DF6  0100               	movlb	0	; () banked
 15599  003DF8  5981               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 15600  003DFA  A0D8               	btfss	status,0,c
 15601  003DFC  D00A               	goto	l5472
 15602                           
 15603                           ; BSR set to: 0
 15604  003DFE  0100               	movlb	0	; () banked
 15605  003E00  5182               	movf	___lwdiv@divisor& (0+255),w,b
 15606  003E02  0100               	movlb	0	; () banked
 15607  003E04  5F80               	subwf	___lwdiv@dividend& (0+255),f,b
 15608  003E06  0100               	movlb	0	; () banked
 15609  003E08  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 15610  003E0A  0100               	movlb	0	; () banked
 15611  003E0C  5B81               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 15612                           
 15613                           ; BSR set to: 0
 15614  003E0E  0100               	movlb	0	; () banked
 15615  003E10  8184               	bsf	___lwdiv@quotient& (0+255),0,b
 15616  003E12                     l5472:
 15617                           
 15618                           ; BSR set to: 0
 15619  003E12  0100               	movlb	0	; () banked
 15620  003E14  90D8               	bcf	status,0,c
 15621  003E16  3383               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 15622  003E18  3382               	rrcf	___lwdiv@divisor& (0+255),f,b
 15623                           
 15624                           ; BSR set to: 0
 15625  003E1A  0100               	movlb	0	; () banked
 15626  003E1C  2F86               	decfsz	___lwdiv@counter& (0+255),f,b
 15627  003E1E  D7E1               	goto	l5464
 15628  003E20                     l1755:
 15629                           
 15630                           ; BSR set to: 0
 15631  003E20  C084  F080         	movff	___lwdiv@quotient,?___lwdiv
 15632  003E24  C085  F081         	movff	___lwdiv@quotient+1,?___lwdiv+1
 15633                           
 15634                           ; BSR set to: 0
 15635  003E28  0012               	return		;funcret
 15636  003E2A                     __end_of___lwdiv:
 15637                           	opt stack 0
 15638                           tblptru	equ	0xFF8
 15639                           tblptrh	equ	0xFF7
 15640                           tblptrl	equ	0xFF6
 15641                           tablat	equ	0xFF5
 15642                           prodh	equ	0xFF4
 15643                           prodl	equ	0xFF3
 15644                           intcon	equ	0xFF2
 15645                           intcon2	equ	0xFF1
 15646                           intcon3	equ	0xFF0
 15647                           indf0	equ	0xFEF
 15648                           postinc0	equ	0xFEE
 15649                           fsr0h	equ	0xFEA
 15650                           fsr0l	equ	0xFE9
 15651                           wreg	equ	0xFE8
 15652                           postdec1	equ	0xFE5
 15653                           fsr1l	equ	0xFE1
 15654                           indf2	equ	0xFDF
 15655                           postinc2	equ	0xFDE
 15656                           postdec2	equ	0xFDD
 15657                           fsr2h	equ	0xFDA
 15658                           fsr2l	equ	0xFD9
 15659                           status	equ	0xFD8
 15660                           
 15661 ;; *************** function _lcdInst *****************
 15662 ;; Defined at:
 15663 ;;		line 15 in file "lcd.c"
 15664 ;; Parameters:    Size  Location     Type
 15665 ;;  data            1    wreg     unsigned char 
 15666 ;; Auto vars:     Size  Location     Type
 15667 ;;  data            1    2[BANK0 ] unsigned char 
 15668 ;; Return value:  Size  Location     Type
 15669 ;;                  1    wreg      void 
 15670 ;; Registers used:
 15671 ;;		wreg, status,2, status,0, cstack
 15672 ;; Tracked objects:
 15673 ;;		On entry : 0/0
 15674 ;;		On exit  : 0/0
 15675 ;;		Unchanged: 0/0
 15676 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15677 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15678 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15679 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15680 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15681 ;;Total ram usage:        1 bytes
 15682 ;; Hardware stack levels used:    1
 15683 ;; Hardware stack levels required when called:    8
 15684 ;; This function calls:
 15685 ;;		_lcdNibble
 15686 ;; This function is called by:
 15687 ;;		_UI
 15688 ;;		_change_state_to_menu_start
 15689 ;;		_change_state_to_menu_12
 15690 ;;		_change_state_to_menu_22
 15691 ;;		_initLCD
 15692 ;;		_printRTC
 15693 ;;		_Loading
 15694 ;;		_EEPROM_write
 15695 ;;		_Test
 15696 ;;		_algorithmTest
 15697 ;;		_sensorTest
 15698 ;;		_actuatorTest
 15699 ;;		_BothServos
 15700 ;;		_PortTestA5
 15701 ;;		_PusherTest
 15702 ;;		_SpeedTest
 15703 ;;		_BlockerTest
 15704 ;;		_ToggleTestA5
 15705 ;; This function uses a non-reentrant model
 15706 ;;
 15707                           
 15708                           	psect	text57
 15709  0049B8                     __ptext57:
 15710                           	opt stack 0
 15711  0049B8                     _lcdInst:
 15712                           	opt stack 20
 15713                           
 15714                           ; BSR set to: 0
 15715                           ;incstack = 0
 15716                           ;lcdInst@data stored from wreg
 15717  0049B8  0100               	movlb	0	; () banked
 15718  0049BA  6F82               	movwf	lcdInst@data& (0+255),b
 15719                           
 15720                           ;lcd.c: 16: LATDbits.LATD2 = 0;
 15721  0049BC  948C               	bcf	3980,2,c	;volatile
 15722                           
 15723                           ;lcd.c: 17: lcdNibble(data);
 15724  0049BE  0100               	movlb	0	; () banked
 15725  0049C0  5182               	movf	lcdInst@data& (0+255),w,b
 15726  0049C2  ECBD  F01F         	call	_lcdNibble
 15727  0049C6  0012               	return		;funcret
 15728  0049C8                     __end_of_lcdInst:
 15729                           	opt stack 0
 15730                           tblptru	equ	0xFF8
 15731                           tblptrh	equ	0xFF7
 15732                           tblptrl	equ	0xFF6
 15733                           tablat	equ	0xFF5
 15734                           prodh	equ	0xFF4
 15735                           prodl	equ	0xFF3
 15736                           intcon	equ	0xFF2
 15737                           intcon2	equ	0xFF1
 15738                           intcon3	equ	0xFF0
 15739                           indf0	equ	0xFEF
 15740                           postinc0	equ	0xFEE
 15741                           fsr0h	equ	0xFEA
 15742                           fsr0l	equ	0xFE9
 15743                           wreg	equ	0xFE8
 15744                           postdec1	equ	0xFE5
 15745                           fsr1l	equ	0xFE1
 15746                           indf2	equ	0xFDF
 15747                           postinc2	equ	0xFDE
 15748                           postdec2	equ	0xFDD
 15749                           fsr2h	equ	0xFDA
 15750                           fsr2l	equ	0xFD9
 15751                           status	equ	0xFD8
 15752                           
 15753 ;; *************** function _lcdNibble *****************
 15754 ;; Defined at:
 15755 ;;		line 25 in file "lcd.c"
 15756 ;; Parameters:    Size  Location     Type
 15757 ;;  data            1    wreg     unsigned char 
 15758 ;; Auto vars:     Size  Location     Type
 15759 ;;  data            1    1[BANK0 ] unsigned char 
 15760 ;;  temp            1    0[BANK0 ] unsigned char 
 15761 ;; Return value:  Size  Location     Type
 15762 ;;                  1    wreg      void 
 15763 ;; Registers used:
 15764 ;;		wreg, status,2, status,0
 15765 ;; Tracked objects:
 15766 ;;		On entry : 0/0
 15767 ;;		On exit  : 0/0
 15768 ;;		Unchanged: 0/0
 15769 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15770 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15771 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15772 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15773 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15774 ;;Total ram usage:        2 bytes
 15775 ;; Hardware stack levels used:    1
 15776 ;; Hardware stack levels required when called:    7
 15777 ;; This function calls:
 15778 ;;		Nothing
 15779 ;; This function is called by:
 15780 ;;		_lcdInst
 15781 ;;		_putch
 15782 ;; This function uses a non-reentrant model
 15783 ;;
 15784                           
 15785                           	psect	text58
 15786  003F7A                     __ptext58:
 15787                           	opt stack 0
 15788  003F7A                     _lcdNibble:
 15789                           	opt stack 20
 15790                           
 15791                           ;incstack = 0
 15792                           ;lcdNibble@data stored from wreg
 15793  003F7A  0100               	movlb	0	; () banked
 15794  003F7C  6F81               	movwf	lcdNibble@data& (0+255),b
 15795                           
 15796                           ;lcd.c: 27: char temp = data & 0xF0;
 15797  003F7E  0100               	movlb	0	; () banked
 15798  003F80  5181               	movf	lcdNibble@data& (0+255),w,b
 15799  003F82  0BF0               	andlw	240
 15800  003F84  0100               	movlb	0	; () banked
 15801  003F86  6F80               	movwf	lcdNibble@temp& (0+255),b
 15802                           
 15803                           ;lcd.c: 28: LATD = LATD & 0x0F;
 15804  003F88  508C               	movf	3980,w,c	;volatile
 15805  003F8A  0B0F               	andlw	15
 15806  003F8C  6E8C               	movwf	3980,c	;volatile
 15807                           
 15808                           ;lcd.c: 29: LATD = temp | LATD;
 15809  003F8E  0100               	movlb	0	; () banked
 15810  003F90  5180               	movf	lcdNibble@temp& (0+255),w,b
 15811  003F92  108C               	iorwf	3980,w,c	;volatile
 15812  003F94  6E8C               	movwf	3980,c	;volatile
 15813                           
 15814                           ; BSR set to: 0
 15815                           ;lcd.c: 31: LATDbits.LATD3 = 1;
 15816  003F96  868C               	bsf	3980,3,c	;volatile
 15817                           
 15818                           ; BSR set to: 0
 15819                           ;lcd.c: 32: _delay((unsigned long)((25)*(32000000/4000000.0)));
 15820  003F98  0E42               	movlw	66
 15821  003F9A                     u8597:
 15822  003F9A  2EE8               	decfsz	wreg,f,c
 15823  003F9C  D7FE               	bra	u8597
 15824  003F9E  D000               	nop2	
 15825                           
 15826                           ;lcd.c: 33: LATDbits.LATD3 = 0;
 15827  003FA0  968C               	bcf	3980,3,c	;volatile
 15828                           
 15829                           ;lcd.c: 34: _delay((unsigned long)((25)*(32000000/4000000.0)));
 15830  003FA2  0E42               	movlw	66
 15831  003FA4                     u8607:
 15832  003FA4  2EE8               	decfsz	wreg,f,c
 15833  003FA6  D7FE               	bra	u8607
 15834  003FA8  D000               	nop2	
 15835                           
 15836                           ;lcd.c: 36: data = data << 4;
 15837  003FAA  0100               	movlb	0	; () banked
 15838  003FAC  3981               	swapf	lcdNibble@data& (0+255),w,b
 15839  003FAE  0BF0               	andlw	240
 15840  003FB0  0100               	movlb	0	; () banked
 15841  003FB2  6F81               	movwf	lcdNibble@data& (0+255),b
 15842                           
 15843                           ;lcd.c: 38: temp = data & 0xF0;
 15844  003FB4  0100               	movlb	0	; () banked
 15845  003FB6  5181               	movf	lcdNibble@data& (0+255),w,b
 15846  003FB8  0BF0               	andlw	240
 15847  003FBA  0100               	movlb	0	; () banked
 15848  003FBC  6F80               	movwf	lcdNibble@temp& (0+255),b
 15849                           
 15850                           ;lcd.c: 39: LATD = LATD & 0x0F;
 15851  003FBE  508C               	movf	3980,w,c	;volatile
 15852  003FC0  0B0F               	andlw	15
 15853  003FC2  6E8C               	movwf	3980,c	;volatile
 15854                           
 15855                           ;lcd.c: 40: LATD = temp | LATD;
 15856  003FC4  0100               	movlb	0	; () banked
 15857  003FC6  5180               	movf	lcdNibble@temp& (0+255),w,b
 15858  003FC8  108C               	iorwf	3980,w,c	;volatile
 15859  003FCA  6E8C               	movwf	3980,c	;volatile
 15860                           
 15861                           ; BSR set to: 0
 15862                           ;lcd.c: 42: LATDbits.LATD3 = 1;
 15863  003FCC  868C               	bsf	3980,3,c	;volatile
 15864                           
 15865                           ; BSR set to: 0
 15866                           ;lcd.c: 43: _delay((unsigned long)((25)*(32000000/4000000.0)));
 15867  003FCE  0E42               	movlw	66
 15868  003FD0                     u8617:
 15869  003FD0  2EE8               	decfsz	wreg,f,c
 15870  003FD2  D7FE               	bra	u8617
 15871  003FD4  D000               	nop2	
 15872                           
 15873                           ;lcd.c: 44: LATDbits.LATD3 = 0;
 15874  003FD6  968C               	bcf	3980,3,c	;volatile
 15875                           
 15876                           ;lcd.c: 45: _delay((unsigned long)((25)*(32000000/4000000.0)));
 15877  003FD8  0E42               	movlw	66
 15878  003FDA                     u8627:
 15879  003FDA  2EE8               	decfsz	wreg,f,c
 15880  003FDC  D7FE               	bra	u8627
 15881  003FDE  D000               	nop2	
 15882  003FE0  0012               	return		;funcret
 15883  003FE2                     __end_of_lcdNibble:
 15884                           	opt stack 0
 15885                           tblptru	equ	0xFF8
 15886                           tblptrh	equ	0xFF7
 15887                           tblptrl	equ	0xFF6
 15888                           tablat	equ	0xFF5
 15889                           prodh	equ	0xFF4
 15890                           prodl	equ	0xFF3
 15891                           intcon	equ	0xFF2
 15892                           intcon2	equ	0xFF1
 15893                           intcon3	equ	0xFF0
 15894                           indf0	equ	0xFEF
 15895                           postinc0	equ	0xFEE
 15896                           fsr0h	equ	0xFEA
 15897                           fsr0l	equ	0xFE9
 15898                           wreg	equ	0xFE8
 15899                           postdec1	equ	0xFE5
 15900                           fsr1l	equ	0xFE1
 15901                           indf2	equ	0xFDF
 15902                           postinc2	equ	0xFDE
 15903                           postdec2	equ	0xFDD
 15904                           fsr2h	equ	0xFDA
 15905                           fsr2l	equ	0xFD9
 15906                           status	equ	0xFD8
 15907                           
 15908 ;; *************** function _handler *****************
 15909 ;; Defined at:
 15910 ;;		line 16 in file "interruptHandler.c"
 15911 ;; Parameters:    Size  Location     Type
 15912 ;;		None
 15913 ;; Auto vars:     Size  Location     Type
 15914 ;;		None
 15915 ;; Return value:  Size  Location     Type
 15916 ;;                  1    wreg      void 
 15917 ;; Registers used:
 15918 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15919 ;; Tracked objects:
 15920 ;;		On entry : 0/0
 15921 ;;		On exit  : 0/0
 15922 ;;		Unchanged: 0/0
 15923 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15924 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15925 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15926 ;;      Temps:         16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15927 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15928 ;;Total ram usage:       16 bytes
 15929 ;; Hardware stack levels used:    1
 15930 ;; Hardware stack levels required when called:    6
 15931 ;; This function calls:
 15932 ;;		_printSortTimer
 15933 ;;		_updateMenu
 15934 ;; This function is called by:
 15935 ;;		Interrupt level 2
 15936 ;; This function uses a non-reentrant model
 15937 ;;
 15938                           
 15939                           	psect	intcode
 15940  000008                     __pintcode:
 15941                           	opt stack 0
 15942  000008                     _handler:
 15943                           	opt stack 18
 15944                           
 15945                           ;incstack = 0
 15946  000008  827E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 15947  00000A  ED60  F017         	call	int_func,f	;refresh shadow registers
 15948                           tblptru	equ	0xFF8
 15949                           tblptrh	equ	0xFF7
 15950                           tblptrl	equ	0xFF6
 15951                           tablat	equ	0xFF5
 15952                           prodh	equ	0xFF4
 15953                           prodl	equ	0xFF3
 15954                           intcon	equ	0xFF2
 15955                           intcon2	equ	0xFF1
 15956                           intcon3	equ	0xFF0
 15957                           indf0	equ	0xFEF
 15958                           postinc0	equ	0xFEE
 15959                           fsr0h	equ	0xFEA
 15960                           fsr0l	equ	0xFE9
 15961                           wreg	equ	0xFE8
 15962                           postdec1	equ	0xFE5
 15963                           fsr1l	equ	0xFE1
 15964                           indf2	equ	0xFDF
 15965                           postinc2	equ	0xFDE
 15966                           postdec2	equ	0xFDD
 15967                           fsr2h	equ	0xFDA
 15968                           fsr2l	equ	0xFD9
 15969                           status	equ	0xFD8
 15970                           
 15971                           	psect	intcode_body
 15972  002EC0                     __pintcode_body:
 15973                           	opt stack 18
 15974  002EC0                     int_func:
 15975                           	opt stack 18
 15976  002EC0  0006               	pop		; remove dummy address from shadow register refresh
 15977  002EC2  CFFA F04D          	movff	pclath,??_handler+2
 15978  002EC6  CFFB F04E          	movff	pclatu,??_handler+3
 15979  002ECA  CFE9 F04F          	movff	fsr0l,??_handler+4
 15980  002ECE  CFEA F050          	movff	fsr0h,??_handler+5
 15981  002ED2  CFE1 F051          	movff	fsr1l,??_handler+6
 15982  002ED6  CFE2 F052          	movff	fsr1h,??_handler+7
 15983  002EDA  CFD9 F053          	movff	fsr2l,??_handler+8
 15984  002EDE  CFDA F054          	movff	fsr2h,??_handler+9
 15985  002EE2  CFF3 F055          	movff	prodl,??_handler+10
 15986  002EE6  CFF4 F056          	movff	prodh,??_handler+11
 15987  002EEA  CFF6 F057          	movff	tblptrl,??_handler+12
 15988  002EEE  CFF7 F058          	movff	tblptrh,??_handler+13
 15989  002EF2  CFF8 F059          	movff	tblptru,??_handler+14
 15990  002EF6  CFF5 F05A          	movff	tablat,??_handler+15
 15991                           
 15992                           ;interruptHandler.c: 18: if(INT1IF){
 15993  002EFA  A0F0               	btfss	intcon3,0,c	;volatile
 15994  002EFC  D020               	goto	i2l8376
 15995                           
 15996                           ;interruptHandler.c: 19: INT1IF = 0;
 15997  002EFE  90F0               	bcf	intcon3,0,c	;volatile
 15998                           
 15999                           ;interruptHandler.c: 20: if(machine_state == UI_state) {
 16000  002F00  0100               	movlb	0	; () banked
 16001  002F02  51FC               	movf	_machine_state& (0+255),w,b
 16002  002F04  A4D8               	btfss	status,2,c
 16003  002F06  D01B               	goto	i2l8376
 16004                           
 16005                           ; BSR set to: 0
 16006                           ;interruptHandler.c: 21: input = keys[(PORTB & 0xF0) >> 4];
 16007  002F08  3881               	swapf	3969,w,c	;volatile
 16008  002F0A  0B0F               	andlw	15
 16009  002F0C  0B0F               	andlw	15
 16010  002F0E  6E4B               	movwf	??_handler& (0+255),c
 16011  002F10  6A4C               	clrf	(??_handler+1)& (0+255),c
 16012  002F12  0E01               	movlw	low _keys
 16013  002F14  244B               	addwf	??_handler,w,c
 16014  002F16  6EF6               	movwf	tblptrl,c
 16015  002F18  0EFB               	movlw	high _keys
 16016  002F1A  204C               	addwfc	??_handler+1,w,c
 16017  002F1C  6EF7               	movwf	tblptrh,c
 16018  002F1E                     	if	1	;There are 3 active tblptr bytes
 16019  002F1E  6AF8               	clrf	tblptru,c
 16020  002F20  0E00               	movlw	low (__mediumconst shr (0+16))
 16021  002F22  22F8               	addwfc	tblptru,f,c
 16022  002F24                     	endif
 16023  002F24  0008               	tblrd		*
 16024  002F26  CFF5 F07D          	movff	tablat,_input	;volatile
 16025                           
 16026                           ; BSR set to: 0
 16027                           ;interruptHandler.c: 23: if(input == '*'){
 16028  002F2A  0E2A               	movlw	42
 16029  002F2C  187D               	xorwf	_input,w,c	;volatile
 16030  002F2E  A4D8               	btfss	status,2,c
 16031  002F30  D004               	goto	i2l8374
 16032                           
 16033                           ; BSR set to: 0
 16034                           ;interruptHandler.c: 24: machine_state = Testing_state;
 16035  002F32  0E03               	movlw	3
 16036  002F34  0100               	movlb	0	; () banked
 16037  002F36  6FFC               	movwf	_machine_state& (0+255),b
 16038                           
 16039                           ;interruptHandler.c: 25: }
 16040  002F38  D002               	goto	i2l8376
 16041  002F3A                     i2l8374:
 16042                           
 16043                           ; BSR set to: 0
 16044                           ;interruptHandler.c: 26: else{
 16045                           ;interruptHandler.c: 27: updateMenu();
 16046  002F3A  EC31  F011         	call	_updateMenu	;wreg free
 16047  002F3E                     i2l8376:
 16048                           
 16049                           ;interruptHandler.c: 28: }
 16050                           ;interruptHandler.c: 29: }
 16051                           ;interruptHandler.c: 30: }
 16052                           ;interruptHandler.c: 33: if(TMR0IF){
 16053  002F3E  A4F2               	btfss	intcon,2,c	;volatile
 16054  002F40  D00C               	goto	i2l8390
 16055                           
 16056                           ;interruptHandler.c: 34: TMR0IF = 0;
 16057  002F42  94F2               	bcf	intcon,2,c	;volatile
 16058                           
 16059                           ;interruptHandler.c: 35: if(machine_state == Sorting_state){
 16060  002F44  0100               	movlb	0	; () banked
 16061  002F46  05FC               	decf	_machine_state& (0+255),w,b
 16062  002F48  A4D8               	btfss	status,2,c
 16063  002F4A  D007               	goto	i2l8390
 16064                           
 16065                           ; BSR set to: 0
 16066                           ;interruptHandler.c: 36: printSortTimer();
 16067  002F4C  ECA6  F014         	call	_printSortTimer	;wreg free
 16068                           
 16069                           ;interruptHandler.c: 38: TMR0H = 0b10000101;
 16070  002F50  0E85               	movlw	133
 16071  002F52  6ED7               	movwf	4055,c	;volatile
 16072                           
 16073                           ;interruptHandler.c: 39: TMR0L = 0b11101110;
 16074  002F54  0EEE               	movlw	238
 16075  002F56  6ED6               	movwf	4054,c	;volatile
 16076                           
 16077                           ;interruptHandler.c: 40: TMR0ON = 1;
 16078  002F58  8ED5               	bsf	4053,7,c	;volatile
 16079  002F5A                     i2l8390:
 16080                           
 16081                           ;interruptHandler.c: 41: }
 16082                           ;interruptHandler.c: 42: }
 16083                           ;interruptHandler.c: 45: if(TMR1IF){
 16084  002F5A  A09E               	btfss	3998,0,c	;volatile
 16085  002F5C  D024               	goto	i2l8414
 16086                           
 16087                           ;interruptHandler.c: 46: TMR1IF = 0;
 16088  002F5E  909E               	bcf	3998,0,c	;volatile
 16089                           
 16090                           ;interruptHandler.c: 47: TMR1ON = 0;
 16091  002F60  90CD               	bcf	4045,0,c	;volatile
 16092                           
 16093                           ;interruptHandler.c: 48: if(machine_state == Sorting_state){
 16094  002F62  0100               	movlb	0	; () banked
 16095  002F64  05FC               	decf	_machine_state& (0+255),w,b
 16096  002F66  A4D8               	btfss	status,2,c
 16097  002F68  D01E               	goto	i2l8414
 16098                           
 16099                           ; BSR set to: 0
 16100                           ;interruptHandler.c: 49: if(was_low_1){
 16101  002F6A  5079               	movf	_was_low_1,w,c	;volatile
 16102  002F6C  107A               	iorwf	_was_low_1+1,w,c	;volatile
 16103  002F6E  B4D8               	btfsc	status,2,c
 16104  002F70  D00A               	goto	i2l868
 16105                           
 16106                           ; BSR set to: 0
 16107                           ;interruptHandler.c: 50: LATCbits.LATC1 = 1;
 16108  002F72  828B               	bsf	3979,1,c	;volatile
 16109                           
 16110                           ; BSR set to: 0
 16111                           ;interruptHandler.c: 51: was_low_1 = 0;
 16112  002F74  0E00               	movlw	0
 16113  002F76  6E7A               	movwf	_was_low_1+1,c	;volatile
 16114  002F78  0E00               	movlw	0
 16115  002F7A  6E79               	movwf	_was_low_1,c	;volatile
 16116                           
 16117                           ; BSR set to: 0
 16118                           ;interruptHandler.c: 52: TMR1H = servoTimes[0];
 16119  002F7C  C11C  FFCF         	movff	_servoTimes,4047	;volatile
 16120                           
 16121                           ; BSR set to: 0
 16122                           ;interruptHandler.c: 53: TMR1L = servoTimes[1];
 16123  002F80  C11E  FFCE         	movff	_servoTimes+2,4046	;volatile
 16124                           
 16125                           ;interruptHandler.c: 54: }
 16126  002F84  D00F               	goto	i2l8412
 16127  002F86                     i2l868:
 16128                           
 16129                           ; BSR set to: 0
 16130                           ;interruptHandler.c: 55: else{
 16131                           ;interruptHandler.c: 56: LATCbits.LATC1 = 0;
 16132  002F86  928B               	bcf	3979,1,c	;volatile
 16133                           
 16134                           ; BSR set to: 0
 16135                           ;interruptHandler.c: 57: was_low_1 = 1;
 16136  002F88  0E00               	movlw	0
 16137  002F8A  6E7A               	movwf	_was_low_1+1,c	;volatile
 16138  002F8C  0E01               	movlw	1
 16139  002F8E  6E79               	movwf	_was_low_1,c	;volatile
 16140                           
 16141                           ; BSR set to: 0
 16142                           ;interruptHandler.c: 58: TMR1H = 20000 - servoTimes[0];
 16143  002F90  0101               	movlb	1	; () banked
 16144  002F92  511C               	movf	_servoTimes& (0+255),w,b
 16145  002F94  0800               	sublw	0
 16146  002F96  0F20               	addlw	32
 16147  002F98  6ECF               	movwf	4047,c	;volatile
 16148                           
 16149                           ; BSR set to: 1
 16150                           ;interruptHandler.c: 59: TMR1L = 20000 - servoTimes[1];
 16151  002F9A  0101               	movlb	1	; () banked
 16152  002F9C  511E               	movf	(_servoTimes+2)& (0+255),w,b
 16153  002F9E  0800               	sublw	0
 16154  002FA0  0F20               	addlw	32
 16155  002FA2  6ECE               	movwf	4046,c	;volatile
 16156  002FA4                     i2l8412:
 16157                           
 16158                           ;interruptHandler.c: 60: }
 16159                           ;interruptHandler.c: 61: TMR1ON = 1;
 16160  002FA4  80CD               	bsf	4045,0,c	;volatile
 16161  002FA6                     i2l8414:
 16162                           
 16163                           ;interruptHandler.c: 62: }
 16164                           ;interruptHandler.c: 63: }
 16165                           ;interruptHandler.c: 65: if(TMR3IF){
 16166  002FA6  A2A1               	btfss	4001,1,c	;volatile
 16167  002FA8  D024               	goto	i2l874
 16168                           
 16169                           ;interruptHandler.c: 66: TMR3IF = 0;
 16170  002FAA  92A1               	bcf	4001,1,c	;volatile
 16171                           
 16172                           ;interruptHandler.c: 67: TMR3ON = 0;
 16173  002FAC  90B1               	bcf	4017,0,c	;volatile
 16174                           
 16175                           ;interruptHandler.c: 68: if(machine_state == Sorting_state){
 16176  002FAE  0100               	movlb	0	; () banked
 16177  002FB0  05FC               	decf	_machine_state& (0+255),w,b
 16178  002FB2  A4D8               	btfss	status,2,c
 16179  002FB4  D01E               	goto	i2l874
 16180                           
 16181                           ; BSR set to: 0
 16182                           ;interruptHandler.c: 69: if(was_low_3){
 16183  002FB6  507B               	movf	_was_low_3,w,c	;volatile
 16184  002FB8  107C               	iorwf	_was_low_3+1,w,c	;volatile
 16185  002FBA  B4D8               	btfsc	status,2,c
 16186  002FBC  D00A               	goto	i2l872
 16187                           
 16188                           ; BSR set to: 0
 16189                           ;interruptHandler.c: 70: LATCbits.LATC2 = 1;
 16190  002FBE  848B               	bsf	3979,2,c	;volatile
 16191                           
 16192                           ; BSR set to: 0
 16193                           ;interruptHandler.c: 71: was_low_3 = 0;
 16194  002FC0  0E00               	movlw	0
 16195  002FC2  6E7C               	movwf	_was_low_3+1,c	;volatile
 16196  002FC4  0E00               	movlw	0
 16197  002FC6  6E7B               	movwf	_was_low_3,c	;volatile
 16198                           
 16199                           ; BSR set to: 0
 16200                           ;interruptHandler.c: 72: TMR3H = servoTimes[2];
 16201  002FC8  C120  FFB3         	movff	_servoTimes+4,4019	;volatile
 16202                           
 16203                           ; BSR set to: 0
 16204                           ;interruptHandler.c: 73: TMR3L = servoTimes[3];
 16205  002FCC  C122  FFB2         	movff	_servoTimes+6,4018	;volatile
 16206                           
 16207                           ;interruptHandler.c: 74: }
 16208  002FD0  D00F               	goto	i2l8436
 16209  002FD2                     i2l872:
 16210                           
 16211                           ; BSR set to: 0
 16212                           ;interruptHandler.c: 75: else{
 16213                           ;interruptHandler.c: 76: LATCbits.LATC2 = 0;
 16214  002FD2  948B               	bcf	3979,2,c	;volatile
 16215                           
 16216                           ; BSR set to: 0
 16217                           ;interruptHandler.c: 77: was_low_3 = 1;
 16218  002FD4  0E00               	movlw	0
 16219  002FD6  6E7C               	movwf	_was_low_3+1,c	;volatile
 16220  002FD8  0E01               	movlw	1
 16221  002FDA  6E7B               	movwf	_was_low_3,c	;volatile
 16222                           
 16223                           ; BSR set to: 0
 16224                           ;interruptHandler.c: 78: TMR3H = 20000 - servoTimes[2];
 16225  002FDC  0101               	movlb	1	; () banked
 16226  002FDE  5120               	movf	(_servoTimes+4)& (0+255),w,b
 16227  002FE0  0800               	sublw	0
 16228  002FE2  0F20               	addlw	32
 16229  002FE4  6EB3               	movwf	4019,c	;volatile
 16230                           
 16231                           ; BSR set to: 1
 16232                           ;interruptHandler.c: 79: TMR3L = 20000 - servoTimes[3];
 16233  002FE6  0101               	movlb	1	; () banked
 16234  002FE8  5122               	movf	(_servoTimes+6)& (0+255),w,b
 16235  002FEA  0800               	sublw	0
 16236  002FEC  0F20               	addlw	32
 16237  002FEE  6EB2               	movwf	4018,c	;volatile
 16238  002FF0                     i2l8436:
 16239                           
 16240                           ;interruptHandler.c: 80: }
 16241                           ;interruptHandler.c: 81: TMR3ON = 1;
 16242  002FF0  80B1               	bsf	4017,0,c	;volatile
 16243  002FF2                     i2l874:
 16244  002FF2  C05A  FFF5         	movff	??_handler+15,tablat
 16245  002FF6  C059  FFF8         	movff	??_handler+14,tblptru
 16246  002FFA  C058  FFF7         	movff	??_handler+13,tblptrh
 16247  002FFE  C057  FFF6         	movff	??_handler+12,tblptrl
 16248  003002  C056  FFF4         	movff	??_handler+11,prodh
 16249  003006  C055  FFF3         	movff	??_handler+10,prodl
 16250  00300A  C054  FFDA         	movff	??_handler+9,fsr2h
 16251  00300E  C053  FFD9         	movff	??_handler+8,fsr2l
 16252  003012  C052  FFE2         	movff	??_handler+7,fsr1h
 16253  003016  C051  FFE1         	movff	??_handler+6,fsr1l
 16254  00301A  C050  FFEA         	movff	??_handler+5,fsr0h
 16255  00301E  C04F  FFE9         	movff	??_handler+4,fsr0l
 16256  003022  C04E  FFFB         	movff	??_handler+3,pclatu
 16257  003026  C04D  FFFA         	movff	??_handler+2,pclath
 16258  00302A  927E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 16259  00302C  0011               	retfie		f
 16260  00302E                     __end_of_handler:
 16261                           	opt stack 0
 16262                           pclatu	equ	0xFFB
 16263                           pclath	equ	0xFFA
 16264                           tblptru	equ	0xFF8
 16265                           tblptrh	equ	0xFF7
 16266                           tblptrl	equ	0xFF6
 16267                           tablat	equ	0xFF5
 16268                           prodh	equ	0xFF4
 16269                           prodl	equ	0xFF3
 16270                           intcon	equ	0xFF2
 16271                           intcon2	equ	0xFF1
 16272                           intcon3	equ	0xFF0
 16273                           indf0	equ	0xFEF
 16274                           postinc0	equ	0xFEE
 16275                           fsr0h	equ	0xFEA
 16276                           fsr0l	equ	0xFE9
 16277                           wreg	equ	0xFE8
 16278                           postdec1	equ	0xFE5
 16279                           fsr1h	equ	0xFE2
 16280                           fsr1l	equ	0xFE1
 16281                           indf2	equ	0xFDF
 16282                           postinc2	equ	0xFDE
 16283                           postdec2	equ	0xFDD
 16284                           fsr2h	equ	0xFDA
 16285                           fsr2l	equ	0xFD9
 16286                           status	equ	0xFD8
 16287                           
 16288 ;; *************** function _updateMenu *****************
 16289 ;; Defined at:
 16290 ;;		line 213 in file "UI.c"
 16291 ;; Parameters:    Size  Location     Type
 16292 ;;		None
 16293 ;; Auto vars:     Size  Location     Type
 16294 ;;		None
 16295 ;; Return value:  Size  Location     Type
 16296 ;;                  1    wreg      void 
 16297 ;; Registers used:
 16298 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16299 ;; Tracked objects:
 16300 ;;		On entry : 0/0
 16301 ;;		On exit  : 0/0
 16302 ;;		Unchanged: 0/0
 16303 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16304 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16305 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16306 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16307 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16308 ;;Total ram usage:        2 bytes
 16309 ;; Hardware stack levels used:    1
 16310 ;; Hardware stack levels required when called:    5
 16311 ;; This function calls:
 16312 ;;		_change_state_to_logs_11
 16313 ;;		_change_state_to_logs_12
 16314 ;;		_change_state_to_logs_22
 16315 ;;		_change_state_to_logs_23
 16316 ;;		_change_state_to_logs_33
 16317 ;;		_change_state_to_logs_34
 16318 ;;		_change_state_to_menu_11
 16319 ;;		_change_state_to_menu_23
 16320 ;;		_dispLogs
 16321 ;;		_inputHandler
 16322 ;;		i2_change_state_to_menu_12
 16323 ;;		i2_change_state_to_menu_22
 16324 ;;		i2_change_state_to_menu_start
 16325 ;; This function is called by:
 16326 ;;		_handler
 16327 ;; This function uses a non-reentrant model
 16328 ;;
 16329                           
 16330                           	psect	text60
 16331  002262                     __ptext60:
 16332                           	opt stack 0
 16333  002262                     _updateMenu:
 16334                           	opt stack 18
 16335                           
 16336                           ;UI.c: 214: up = 0; down = 0; enter = 0; back = 0;
 16337                           
 16338                           ;incstack = 0
 16339  002262  0E00               	movlw	0
 16340  002264  6E78               	movwf	_up+1,c
 16341  002266  0E00               	movlw	0
 16342  002268  6E77               	movwf	_up,c
 16343  00226A  0E00               	movlw	0
 16344  00226C  6E68               	movwf	_down+1,c
 16345  00226E  0E00               	movlw	0
 16346  002270  6E67               	movwf	_down,c
 16347  002272  0E00               	movlw	0
 16348  002274  6E6A               	movwf	_enter+1,c
 16349  002276  0E00               	movlw	0
 16350  002278  6E69               	movwf	_enter,c
 16351  00227A  0E00               	movlw	0
 16352  00227C  6E5C               	movwf	_back+1,c
 16353  00227E  0E00               	movlw	0
 16354  002280  6E5B               	movwf	_back,c
 16355                           
 16356                           ;UI.c: 215: (INTCONbits.GIE = 0);
 16357  002282  9EF2               	bcf	intcon,7,c	;volatile
 16358                           
 16359                           ;UI.c: 217: if (inputHandler()
 16360                           ;UI.c: 220: ){
 16361  002284  EC9F  F015         	call	_inputHandler	;wreg free
 16362  002288  502A               	movf	?_inputHandler,w,c
 16363  00228A  102B               	iorwf	?_inputHandler+1,w,c
 16364  00228C  A4D8               	btfss	status,2,c
 16365  00228E  D112               	goto	i2l8110
 16366  002290  D146               	goto	i2l257
 16367  002292                     i2l7962:
 16368                           
 16369                           ;UI.c: 224: change_state_to_menu_11();
 16370  002292  ECF8  F022         	call	_change_state_to_menu_11	;wreg free
 16371                           
 16372                           ;UI.c: 225: break;
 16373  002296  D143               	goto	i2l257
 16374  002298                     i2l7964:
 16375                           
 16376                           ;UI.c: 228: if(up){
 16377  002298  5077               	movf	_up,w,c
 16378  00229A  1078               	iorwf	_up+1,w,c
 16379  00229C  B4D8               	btfsc	status,2,c
 16380  00229E  D003               	goto	i2l7968
 16381                           
 16382                           ;UI.c: 229: change_state_to_menu_23();
 16383  0022A0  ECE0  F022         	call	_change_state_to_menu_23	;wreg free
 16384                           
 16385                           ;UI.c: 230: }
 16386  0022A4  D13C               	goto	i2l257
 16387  0022A6                     i2l7968:
 16388                           
 16389                           ;UI.c: 231: else if(down){
 16390  0022A6  5067               	movf	_down,w,c
 16391  0022A8  1068               	iorwf	_down+1,w,c
 16392  0022AA  B4D8               	btfsc	status,2,c
 16393  0022AC  D003               	goto	i2l7972
 16394                           
 16395                           ;UI.c: 232: change_state_to_menu_12();
 16396  0022AE  ECC8  F022         	call	i2_change_state_to_menu_12	;wreg free
 16397                           
 16398                           ;UI.c: 233: }
 16399  0022B2  D135               	goto	i2l257
 16400  0022B4                     i2l7972:
 16401                           
 16402                           ;UI.c: 234: else if(enter){
 16403  0022B4  5069               	movf	_enter,w,c
 16404  0022B6  106A               	iorwf	_enter+1,w,c
 16405  0022B8  B4D8               	btfsc	status,2,c
 16406  0022BA  D131               	goto	i2l257
 16407                           
 16408                           ;UI.c: 235: change_state_to_menu_start();
 16409  0022BC  EC22  F024         	call	i2_change_state_to_menu_start	;wreg free
 16410                           
 16411                           ;UI.c: 236: }
 16412                           ;UI.c: 237: break;
 16413  0022C0  D12E               	goto	i2l257
 16414  0022C2                     i2l7976:
 16415                           
 16416                           ;UI.c: 240: if(up){
 16417  0022C2  5077               	movf	_up,w,c
 16418  0022C4  1078               	iorwf	_up+1,w,c
 16419  0022C6  B4D8               	btfsc	status,2,c
 16420  0022C8  D003               	goto	i2l7980
 16421                           
 16422                           ;UI.c: 241: change_state_to_menu_11();
 16423  0022CA  ECF8  F022         	call	_change_state_to_menu_11	;wreg free
 16424                           
 16425                           ;UI.c: 242: }
 16426  0022CE  D127               	goto	i2l257
 16427  0022D0                     i2l7980:
 16428                           
 16429                           ;UI.c: 243: else if(down){
 16430  0022D0  5067               	movf	_down,w,c
 16431  0022D2  1068               	iorwf	_down+1,w,c
 16432  0022D4  B4D8               	btfsc	status,2,c
 16433  0022D6  D011               	goto	i2l7996
 16434                           
 16435                           ;UI.c: 244: change_state_to_menu_23();
 16436  0022D8  ECE0  F022         	call	_change_state_to_menu_23	;wreg free
 16437                           
 16438                           ;UI.c: 245: }
 16439  0022DC  D120               	goto	i2l257
 16440  0022DE                     i2l7988:
 16441                           
 16442                           ;UI.c: 252: if(up){
 16443  0022DE  5077               	movf	_up,w,c
 16444  0022E0  1078               	iorwf	_up+1,w,c
 16445  0022E2  B4D8               	btfsc	status,2,c
 16446  0022E4  D003               	goto	i2l7992
 16447                           
 16448                           ;UI.c: 253: change_state_to_menu_11();
 16449  0022E6  ECF8  F022         	call	_change_state_to_menu_11	;wreg free
 16450                           
 16451                           ;UI.c: 254: }
 16452  0022EA  D119               	goto	i2l257
 16453  0022EC                     i2l7992:
 16454                           
 16455                           ;UI.c: 255: else if(down){
 16456  0022EC  5067               	movf	_down,w,c
 16457  0022EE  1068               	iorwf	_down+1,w,c
 16458  0022F0  B4D8               	btfsc	status,2,c
 16459  0022F2  D003               	goto	i2l7996
 16460                           
 16461                           ;UI.c: 256: change_state_to_menu_23();
 16462  0022F4  ECE0  F022         	call	_change_state_to_menu_23	;wreg free
 16463                           
 16464                           ;UI.c: 257: }
 16465  0022F8  D112               	goto	i2l257
 16466  0022FA                     i2l7996:
 16467                           
 16468                           ;UI.c: 258: else if(enter){
 16469  0022FA  5069               	movf	_enter,w,c
 16470  0022FC  106A               	iorwf	_enter+1,w,c
 16471  0022FE  B4D8               	btfsc	status,2,c
 16472  002300  D10E               	goto	i2l257
 16473                           
 16474                           ;UI.c: 259: machine_state = Sorting_state;
 16475  002302  0E01               	movlw	1
 16476  002304  0100               	movlb	0	; () banked
 16477  002306  6FFC               	movwf	_machine_state& (0+255),b
 16478                           
 16479                           ; BSR set to: 0
 16480                           ;UI.c: 260: }
 16481                           ;UI.c: 261: break;
 16482                           
 16483                           ; BSR set to: 0
 16484                           
 16485                           ; BSR set to: 0
 16486  002308  D10A               	goto	i2l257
 16487  00230A                     i2l8000:
 16488                           
 16489                           ;UI.c: 264: if(up){
 16490  00230A  5077               	movf	_up,w,c
 16491  00230C  1078               	iorwf	_up+1,w,c
 16492  00230E  B4D8               	btfsc	status,2,c
 16493  002310  D003               	goto	i2l8004
 16494                           
 16495                           ;UI.c: 265: change_state_to_menu_22();
 16496  002312  ECB0  F022         	call	i2_change_state_to_menu_22	;wreg free
 16497                           
 16498                           ;UI.c: 266: }
 16499  002316  D103               	goto	i2l257
 16500  002318                     i2l8004:
 16501                           
 16502                           ;UI.c: 267: else if(down){
 16503  002318  5067               	movf	_down,w,c
 16504  00231A  1068               	iorwf	_down+1,w,c
 16505  00231C  B4D8               	btfsc	status,2,c
 16506  00231E  D003               	goto	i2l8008
 16507                           
 16508                           ;UI.c: 268: change_state_to_menu_11();
 16509  002320  ECF8  F022         	call	_change_state_to_menu_11	;wreg free
 16510                           
 16511                           ;UI.c: 269: }
 16512  002324  D0FC               	goto	i2l257
 16513  002326                     i2l8008:
 16514                           
 16515                           ;UI.c: 270: else if(enter){
 16516  002326  5069               	movf	_enter,w,c
 16517  002328  106A               	iorwf	_enter+1,w,c
 16518  00232A  B4D8               	btfsc	status,2,c
 16519  00232C  D0F8               	goto	i2l257
 16520                           
 16521                           ;UI.c: 271: change_state_to_logs_11();
 16522  00232E  EC70  F023         	call	_change_state_to_logs_11	;wreg free
 16523                           
 16524                           ;UI.c: 272: }
 16525                           ;UI.c: 273: break;
 16526  002332  D0F5               	goto	i2l257
 16527  002334                     i2l8012:
 16528                           
 16529                           ;UI.c: 276: if(up){
 16530  002334  5077               	movf	_up,w,c
 16531  002336  1078               	iorwf	_up+1,w,c
 16532  002338  B4D8               	btfsc	status,2,c
 16533  00233A  D003               	goto	i2l8016
 16534                           
 16535                           ;UI.c: 277: change_state_to_logs_34();
 16536  00233C  EC10  F023         	call	_change_state_to_logs_34	;wreg free
 16537                           
 16538                           ;UI.c: 278: }
 16539  002340  D0EE               	goto	i2l257
 16540  002342                     i2l8016:
 16541                           
 16542                           ;UI.c: 279: else if(down){
 16543  002342  5067               	movf	_down,w,c
 16544  002344  1068               	iorwf	_down+1,w,c
 16545  002346  B4D8               	btfsc	status,2,c
 16546  002348  D003               	goto	i2l8020
 16547                           
 16548                           ;UI.c: 280: change_state_to_logs_12();
 16549  00234A  EC58  F023         	call	_change_state_to_logs_12	;wreg free
 16550                           
 16551                           ;UI.c: 281: }
 16552  00234E  D0E7               	goto	i2l257
 16553  002350                     i2l8020:
 16554                           
 16555                           ;UI.c: 282: else if(enter){
 16556  002350  5069               	movf	_enter,w,c
 16557  002352  106A               	iorwf	_enter+1,w,c
 16558  002354  B4D8               	btfsc	status,2,c
 16559  002356  D007               	goto	i2l8024
 16560                           
 16561                           ;UI.c: 283: dispLogs(1);
 16562  002358  0E00               	movlw	0
 16563  00235A  6E13               	movwf	dispLogs@myLog+1,c
 16564  00235C  0E01               	movlw	1
 16565  00235E  6E12               	movwf	dispLogs@myLog,c
 16566  002360  EC5C  F024         	call	_dispLogs	;wreg free
 16567                           
 16568                           ;UI.c: 284: }
 16569  002364  D0DC               	goto	i2l257
 16570  002366                     i2l8024:
 16571                           
 16572                           ;UI.c: 285: else if(back){
 16573  002366  505B               	movf	_back,w,c
 16574  002368  105C               	iorwf	_back+1,w,c
 16575  00236A  B4D8               	btfsc	status,2,c
 16576  00236C  D0D8               	goto	i2l257
 16577                           
 16578                           ;UI.c: 286: change_state_to_menu_23();
 16579  00236E  ECE0  F022         	call	_change_state_to_menu_23	;wreg free
 16580                           
 16581                           ;UI.c: 287: }
 16582                           ;UI.c: 288: break;
 16583  002372  D0D5               	goto	i2l257
 16584  002374                     i2l8028:
 16585                           
 16586                           ;UI.c: 291: if(up){
 16587  002374  5077               	movf	_up,w,c
 16588  002376  1078               	iorwf	_up+1,w,c
 16589  002378  B4D8               	btfsc	status,2,c
 16590  00237A  D003               	goto	i2l8032
 16591                           
 16592                           ;UI.c: 292: change_state_to_logs_11();
 16593  00237C  EC70  F023         	call	_change_state_to_logs_11	;wreg free
 16594                           
 16595                           ;UI.c: 293: }
 16596  002380  D0CE               	goto	i2l257
 16597  002382                     i2l8032:
 16598                           
 16599                           ;UI.c: 294: else if(down){
 16600  002382  5067               	movf	_down,w,c
 16601  002384  1068               	iorwf	_down+1,w,c
 16602  002386  B4D8               	btfsc	status,2,c
 16603  002388  D003               	goto	i2l8036
 16604                           
 16605                           ;UI.c: 295: change_state_to_logs_23();
 16606  00238A  ECB6  F023         	call	_change_state_to_logs_23	;wreg free
 16607                           
 16608                           ;UI.c: 296: }
 16609  00238E  D0C7               	goto	i2l257
 16610  002390                     i2l8036:
 16611                           
 16612                           ;UI.c: 297: else if(enter){
 16613  002390  5069               	movf	_enter,w,c
 16614  002392  106A               	iorwf	_enter+1,w,c
 16615  002394  B4D8               	btfsc	status,2,c
 16616  002396  D007               	goto	i2l8040
 16617                           
 16618                           ;UI.c: 298: dispLogs(2);
 16619  002398  0E00               	movlw	0
 16620  00239A  6E13               	movwf	dispLogs@myLog+1,c
 16621  00239C  0E02               	movlw	2
 16622  00239E  6E12               	movwf	dispLogs@myLog,c
 16623  0023A0  EC5C  F024         	call	_dispLogs	;wreg free
 16624                           
 16625                           ;UI.c: 299: }
 16626  0023A4  D0BC               	goto	i2l257
 16627  0023A6                     i2l8040:
 16628                           
 16629                           ;UI.c: 300: else if(back){
 16630  0023A6  505B               	movf	_back,w,c
 16631  0023A8  105C               	iorwf	_back+1,w,c
 16632  0023AA  B4D8               	btfsc	status,2,c
 16633  0023AC  D0B8               	goto	i2l257
 16634                           
 16635                           ;UI.c: 301: change_state_to_menu_23();
 16636  0023AE  ECE0  F022         	call	_change_state_to_menu_23	;wreg free
 16637                           
 16638                           ;UI.c: 302: }
 16639                           ;UI.c: 303: break;
 16640  0023B2  D0B5               	goto	i2l257
 16641  0023B4                     i2l8044:
 16642                           
 16643                           ;UI.c: 306: if(up){
 16644  0023B4  5077               	movf	_up,w,c
 16645  0023B6  1078               	iorwf	_up+1,w,c
 16646  0023B8  B4D8               	btfsc	status,2,c
 16647  0023BA  D003               	goto	i2l8048
 16648                           
 16649                           ;UI.c: 307: change_state_to_logs_11();
 16650  0023BC  EC70  F023         	call	_change_state_to_logs_11	;wreg free
 16651                           
 16652                           ;UI.c: 308: }
 16653  0023C0  D0AE               	goto	i2l257
 16654  0023C2                     i2l8048:
 16655                           
 16656                           ;UI.c: 309: else if(down){
 16657  0023C2  5067               	movf	_down,w,c
 16658  0023C4  1068               	iorwf	_down+1,w,c
 16659  0023C6  B4D8               	btfsc	status,2,c
 16660  0023C8  D003               	goto	i2l8052
 16661                           
 16662                           ;UI.c: 310: change_state_to_logs_23();
 16663  0023CA  ECB6  F023         	call	_change_state_to_logs_23	;wreg free
 16664                           
 16665                           ;UI.c: 311: }
 16666  0023CE  D0A7               	goto	i2l257
 16667  0023D0                     i2l8052:
 16668                           
 16669                           ;UI.c: 312: else if(enter){
 16670  0023D0  5069               	movf	_enter,w,c
 16671  0023D2  106A               	iorwf	_enter+1,w,c
 16672  0023D4  B4D8               	btfsc	status,2,c
 16673  0023D6  D007               	goto	i2l8056
 16674                           
 16675                           ;UI.c: 313: dispLogs(2);
 16676  0023D8  0E00               	movlw	0
 16677  0023DA  6E13               	movwf	dispLogs@myLog+1,c
 16678  0023DC  0E02               	movlw	2
 16679  0023DE  6E12               	movwf	dispLogs@myLog,c
 16680  0023E0  EC5C  F024         	call	_dispLogs	;wreg free
 16681                           
 16682                           ;UI.c: 314: }
 16683  0023E4  D09C               	goto	i2l257
 16684  0023E6                     i2l8056:
 16685                           
 16686                           ;UI.c: 315: else if(back){
 16687  0023E6  505B               	movf	_back,w,c
 16688  0023E8  105C               	iorwf	_back+1,w,c
 16689  0023EA  B4D8               	btfsc	status,2,c
 16690  0023EC  D098               	goto	i2l257
 16691                           
 16692                           ;UI.c: 316: change_state_to_menu_23();
 16693  0023EE  ECE0  F022         	call	_change_state_to_menu_23	;wreg free
 16694                           
 16695                           ;UI.c: 317: }
 16696                           ;UI.c: 318: break;
 16697  0023F2  D095               	goto	i2l257
 16698  0023F4                     i2l8060:
 16699                           
 16700                           ;UI.c: 321: if(up){
 16701  0023F4  5077               	movf	_up,w,c
 16702  0023F6  1078               	iorwf	_up+1,w,c
 16703  0023F8  B4D8               	btfsc	status,2,c
 16704  0023FA  D003               	goto	i2l8064
 16705                           
 16706                           ;UI.c: 322: change_state_to_logs_22();
 16707  0023FC  EC40  F023         	call	_change_state_to_logs_22	;wreg free
 16708                           
 16709                           ;UI.c: 323: }
 16710  002400  D08E               	goto	i2l257
 16711  002402                     i2l8064:
 16712                           
 16713                           ;UI.c: 324: else if(down){
 16714  002402  5067               	movf	_down,w,c
 16715  002404  1068               	iorwf	_down+1,w,c
 16716  002406  B4D8               	btfsc	status,2,c
 16717  002408  D003               	goto	i2l8068
 16718                           
 16719                           ;UI.c: 325: change_state_to_logs_34();
 16720  00240A  EC10  F023         	call	_change_state_to_logs_34	;wreg free
 16721                           
 16722                           ;UI.c: 326: }
 16723  00240E  D087               	goto	i2l257
 16724  002410                     i2l8068:
 16725                           
 16726                           ;UI.c: 327: else if(enter){
 16727  002410  5069               	movf	_enter,w,c
 16728  002412  106A               	iorwf	_enter+1,w,c
 16729  002414  B4D8               	btfsc	status,2,c
 16730  002416  D007               	goto	i2l8072
 16731                           
 16732                           ;UI.c: 328: dispLogs(3);
 16733  002418  0E00               	movlw	0
 16734  00241A  6E13               	movwf	dispLogs@myLog+1,c
 16735  00241C  0E03               	movlw	3
 16736  00241E  6E12               	movwf	dispLogs@myLog,c
 16737  002420  EC5C  F024         	call	_dispLogs	;wreg free
 16738                           
 16739                           ;UI.c: 329: }
 16740  002424  D07C               	goto	i2l257
 16741  002426                     i2l8072:
 16742                           
 16743                           ;UI.c: 330: else if(back){
 16744  002426  505B               	movf	_back,w,c
 16745  002428  105C               	iorwf	_back+1,w,c
 16746  00242A  B4D8               	btfsc	status,2,c
 16747  00242C  D078               	goto	i2l257
 16748                           
 16749                           ;UI.c: 331: change_state_to_menu_23();
 16750  00242E  ECE0  F022         	call	_change_state_to_menu_23	;wreg free
 16751                           
 16752                           ;UI.c: 332: }
 16753                           ;UI.c: 333: break;
 16754  002432  D075               	goto	i2l257
 16755  002434                     i2l8076:
 16756                           
 16757                           ;UI.c: 336: if(up){
 16758  002434  5077               	movf	_up,w,c
 16759  002436  1078               	iorwf	_up+1,w,c
 16760  002438  B4D8               	btfsc	status,2,c
 16761  00243A  D003               	goto	i2l8080
 16762                           
 16763                           ;UI.c: 337: change_state_to_logs_22();
 16764  00243C  EC40  F023         	call	_change_state_to_logs_22	;wreg free
 16765                           
 16766                           ;UI.c: 338: }
 16767  002440  D06E               	goto	i2l257
 16768  002442                     i2l8080:
 16769                           
 16770                           ;UI.c: 339: else if(down){
 16771  002442  5067               	movf	_down,w,c
 16772  002444  1068               	iorwf	_down+1,w,c
 16773  002446  B4D8               	btfsc	status,2,c
 16774  002448  D003               	goto	i2l8084
 16775                           
 16776                           ;UI.c: 340: change_state_to_logs_34();
 16777  00244A  EC10  F023         	call	_change_state_to_logs_34	;wreg free
 16778                           
 16779                           ;UI.c: 341: }
 16780  00244E  D067               	goto	i2l257
 16781  002450                     i2l8084:
 16782                           
 16783                           ;UI.c: 342: else if(enter){
 16784  002450  5069               	movf	_enter,w,c
 16785  002452  106A               	iorwf	_enter+1,w,c
 16786  002454  B4D8               	btfsc	status,2,c
 16787  002456  D007               	goto	i2l8088
 16788                           
 16789                           ;UI.c: 343: dispLogs(3);
 16790  002458  0E00               	movlw	0
 16791  00245A  6E13               	movwf	dispLogs@myLog+1,c
 16792  00245C  0E03               	movlw	3
 16793  00245E  6E12               	movwf	dispLogs@myLog,c
 16794  002460  EC5C  F024         	call	_dispLogs	;wreg free
 16795                           
 16796                           ;UI.c: 344: }
 16797  002464  D05C               	goto	i2l257
 16798  002466                     i2l8088:
 16799                           
 16800                           ;UI.c: 345: else if(back){
 16801  002466  505B               	movf	_back,w,c
 16802  002468  105C               	iorwf	_back+1,w,c
 16803  00246A  B4D8               	btfsc	status,2,c
 16804  00246C  D058               	goto	i2l257
 16805                           
 16806                           ;UI.c: 346: change_state_to_menu_23();
 16807  00246E  ECE0  F022         	call	_change_state_to_menu_23	;wreg free
 16808                           
 16809                           ;UI.c: 347: }
 16810                           ;UI.c: 348: break;
 16811  002472  D055               	goto	i2l257
 16812  002474                     i2l8092:
 16813                           
 16814                           ;UI.c: 351: if(up){
 16815  002474  5077               	movf	_up,w,c
 16816  002476  1078               	iorwf	_up+1,w,c
 16817  002478  B4D8               	btfsc	status,2,c
 16818  00247A  D003               	goto	i2l8096
 16819                           
 16820                           ;UI.c: 352: change_state_to_logs_33();
 16821  00247C  EC28  F023         	call	_change_state_to_logs_33	;wreg free
 16822                           
 16823                           ;UI.c: 353: }
 16824  002480  D04E               	goto	i2l257
 16825  002482                     i2l8096:
 16826                           
 16827                           ;UI.c: 354: else if(down){
 16828  002482  5067               	movf	_down,w,c
 16829  002484  1068               	iorwf	_down+1,w,c
 16830  002486  B4D8               	btfsc	status,2,c
 16831  002488  D003               	goto	i2l8100
 16832                           
 16833                           ;UI.c: 355: change_state_to_logs_11();
 16834  00248A  EC70  F023         	call	_change_state_to_logs_11	;wreg free
 16835                           
 16836                           ;UI.c: 356: }
 16837  00248E  D047               	goto	i2l257
 16838  002490                     i2l8100:
 16839                           
 16840                           ;UI.c: 357: else if(enter){
 16841  002490  5069               	movf	_enter,w,c
 16842  002492  106A               	iorwf	_enter+1,w,c
 16843  002494  B4D8               	btfsc	status,2,c
 16844  002496  D007               	goto	i2l8104
 16845                           
 16846                           ;UI.c: 358: dispLogs(4);
 16847  002498  0E00               	movlw	0
 16848  00249A  6E13               	movwf	dispLogs@myLog+1,c
 16849  00249C  0E04               	movlw	4
 16850  00249E  6E12               	movwf	dispLogs@myLog,c
 16851  0024A0  EC5C  F024         	call	_dispLogs	;wreg free
 16852                           
 16853                           ;UI.c: 359: }
 16854  0024A4  D03C               	goto	i2l257
 16855  0024A6                     i2l8104:
 16856                           
 16857                           ;UI.c: 360: else if(back){
 16858  0024A6  505B               	movf	_back,w,c
 16859  0024A8  105C               	iorwf	_back+1,w,c
 16860  0024AA  B4D8               	btfsc	status,2,c
 16861  0024AC  D038               	goto	i2l257
 16862                           
 16863                           ;UI.c: 361: change_state_to_menu_23();
 16864  0024AE  ECE0  F022         	call	_change_state_to_menu_23	;wreg free
 16865                           
 16866                           ;UI.c: 367: }
 16867                           
 16868                           ;UI.c: 366: break;
 16869                           
 16870                           ;UI.c: 365: default:
 16871                           
 16872                           ;UI.c: 362: }
 16873                           ;UI.c: 363: break;
 16874  0024B2  D035               	goto	i2l257
 16875  0024B4                     i2l8110:
 16876  0024B4  C0E2  F043         	movff	_cur_state,??_updateMenu
 16877  0024B8  C0E3  F044         	movff	_cur_state+1,??_updateMenu+1
 16878                           
 16879                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 3 sub-sw
      +                          itches
 16880                           ; Switch size 1, requested type "space"
 16881                           ; Number of cases is 3, Range of values is 0 to 4
 16882                           ; switch strategies available:
 16883                           ; Name         Instructions Cycles
 16884                           ; simple_byte           10     6 (average)
 16885                           ;	Chosen strategy is simple_byte
 16886  0024BC  5044               	movf	??_updateMenu+1,w,c
 16887  0024BE  0A00               	xorlw	0	; case 0
 16888  0024C0  B4D8               	btfsc	status,2,c
 16889  0024C2  D007               	goto	i2l8746
 16890  0024C4  0A03               	xorlw	3	; case 3
 16891  0024C6  B4D8               	btfsc	status,2,c
 16892  0024C8  D015               	goto	i2l8748
 16893  0024CA  0A07               	xorlw	7	; case 4
 16894  0024CC  B4D8               	btfsc	status,2,c
 16895  0024CE  D020               	goto	i2l8750
 16896  0024D0  D026               	goto	i2l257
 16897  0024D2                     i2l8746:
 16898                           
 16899                           ; Switch size 1, requested type "space"
 16900                           ; Number of cases is 5, Range of values is 0 to 23
 16901                           ; switch strategies available:
 16902                           ; Name         Instructions Cycles
 16903                           ; simple_byte           16     9 (average)
 16904                           ;	Chosen strategy is simple_byte
 16905  0024D2  5043               	movf	??_updateMenu,w,c
 16906  0024D4  0A00               	xorlw	0	; case 0
 16907  0024D6  B4D8               	btfsc	status,2,c
 16908  0024D8  D6DC               	goto	i2l7962
 16909  0024DA  0A0B               	xorlw	11	; case 11
 16910  0024DC  B4D8               	btfsc	status,2,c
 16911  0024DE  D6DC               	goto	i2l7964
 16912  0024E0  0A07               	xorlw	7	; case 12
 16913  0024E2  B4D8               	btfsc	status,2,c
 16914  0024E4  D6EE               	goto	i2l7976
 16915  0024E6  0A1A               	xorlw	26	; case 22
 16916  0024E8  B4D8               	btfsc	status,2,c
 16917  0024EA  D6F9               	goto	i2l7988
 16918  0024EC  0A01               	xorlw	1	; case 23
 16919  0024EE  B4D8               	btfsc	status,2,c
 16920  0024F0  D70C               	goto	i2l8000
 16921  0024F2  D015               	goto	i2l257
 16922  0024F4                     i2l8748:
 16923                           
 16924                           ; Switch size 1, requested type "space"
 16925                           ; Number of cases is 4, Range of values is 243 to 255
 16926                           ; switch strategies available:
 16927                           ; Name         Instructions Cycles
 16928                           ; simple_byte           13     7 (average)
 16929                           ;	Chosen strategy is simple_byte
 16930  0024F4  5043               	movf	??_updateMenu,w,c
 16931  0024F6  0AF3               	xorlw	243	; case 243
 16932  0024F8  B4D8               	btfsc	status,2,c
 16933  0024FA  D71C               	goto	i2l8012
 16934  0024FC  0A07               	xorlw	7	; case 244
 16935  0024FE  B4D8               	btfsc	status,2,c
 16936  002500  D739               	goto	i2l8028
 16937  002502  0A0A               	xorlw	10	; case 254
 16938  002504  B4D8               	btfsc	status,2,c
 16939  002506  D756               	goto	i2l8044
 16940  002508  0A01               	xorlw	1	; case 255
 16941  00250A  B4D8               	btfsc	status,2,c
 16942  00250C  D773               	goto	i2l8060
 16943  00250E  D007               	goto	i2l257
 16944  002510                     i2l8750:
 16945                           
 16946                           ; Switch size 1, requested type "space"
 16947                           ; Number of cases is 2, Range of values is 9 to 10
 16948                           ; switch strategies available:
 16949                           ; Name         Instructions Cycles
 16950                           ; simple_byte            7     4 (average)
 16951                           ;	Chosen strategy is simple_byte
 16952  002510  5043               	movf	??_updateMenu,w,c
 16953  002512  0A09               	xorlw	9	; case 9
 16954  002514  B4D8               	btfsc	status,2,c
 16955  002516  D78E               	goto	i2l8076
 16956  002518  0A03               	xorlw	3	; case 10
 16957  00251A  B4D8               	btfsc	status,2,c
 16958  00251C  D7AB               	goto	i2l8092
 16959  00251E                     i2l257:
 16960                           
 16961                           ;UI.c: 368: }
 16962                           ;UI.c: 369: (INTCONbits.GIE = 1);
 16963  00251E  8EF2               	bsf	intcon,7,c	;volatile
 16964  002520  0012               	return		;funcret
 16965  002522                     __end_of_updateMenu:
 16966                           	opt stack 0
 16967                           pclatu	equ	0xFFB
 16968                           pclath	equ	0xFFA
 16969                           tblptru	equ	0xFF8
 16970                           tblptrh	equ	0xFF7
 16971                           tblptrl	equ	0xFF6
 16972                           tablat	equ	0xFF5
 16973                           prodh	equ	0xFF4
 16974                           prodl	equ	0xFF3
 16975                           intcon	equ	0xFF2
 16976                           intcon2	equ	0xFF1
 16977                           intcon3	equ	0xFF0
 16978                           indf0	equ	0xFEF
 16979                           postinc0	equ	0xFEE
 16980                           fsr0h	equ	0xFEA
 16981                           fsr0l	equ	0xFE9
 16982                           wreg	equ	0xFE8
 16983                           postdec1	equ	0xFE5
 16984                           fsr1h	equ	0xFE2
 16985                           fsr1l	equ	0xFE1
 16986                           indf2	equ	0xFDF
 16987                           postinc2	equ	0xFDE
 16988                           postdec2	equ	0xFDD
 16989                           fsr2h	equ	0xFDA
 16990                           fsr2l	equ	0xFD9
 16991                           status	equ	0xFD8
 16992                           
 16993 ;; *************** function i2_change_state_to_menu_start *****************
 16994 ;; Defined at:
 16995 ;;		line 474 in file "UI.c"
 16996 ;; Parameters:    Size  Location     Type
 16997 ;;		None
 16998 ;; Auto vars:     Size  Location     Type
 16999 ;;		None
 17000 ;; Return value:  Size  Location     Type
 17001 ;;                  1    wreg      void 
 17002 ;; Registers used:
 17003 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17004 ;; Tracked objects:
 17005 ;;		On entry : 0/0
 17006 ;;		On exit  : 0/0
 17007 ;;		Unchanged: 0/0
 17008 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17009 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17010 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17011 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17012 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17013 ;;Total ram usage:        0 bytes
 17014 ;; Hardware stack levels used:    1
 17015 ;; Hardware stack levels required when called:    4
 17016 ;; This function calls:
 17017 ;;		i2_lcdInst
 17018 ;;		i2_printRTC
 17019 ;;		i2_printf
 17020 ;; This function is called by:
 17021 ;;		_updateMenu
 17022 ;; This function uses a non-reentrant model
 17023 ;;
 17024                           
 17025                           	psect	text61
 17026  004844                     __ptext61:
 17027                           	opt stack 0
 17028  004844                     i2_change_state_to_menu_start:
 17029                           	opt stack 18
 17030                           
 17031                           ;UI.c: 475: cur_state = 0;
 17032                           
 17033                           ;incstack = 0
 17034  004844  0E00               	movlw	0
 17035  004846  0100               	movlb	0	; () banked
 17036  004848  6FE3               	movwf	(_cur_state+1)& (0+255),b
 17037  00484A  0E00               	movlw	0
 17038  00484C  6FE2               	movwf	_cur_state& (0+255),b
 17039                           
 17040                           ; BSR set to: 0
 17041                           ;UI.c: 477: lcdInst(0b10000000);;
 17042  00484E  0E80               	movlw	128
 17043  004850  ECEA  F024         	call	i2_lcdInst
 17044                           
 17045                           ;UI.c: 478: printRTC();
 17046  004854  EC91  F012         	call	i2_printRTC	;wreg free
 17047                           
 17048                           ;UI.c: 479: lcdInst(0b11000000);;
 17049  004858  0EC0               	movlw	192
 17050  00485A  ECEA  F024         	call	i2_lcdInst
 17051                           
 17052                           ;UI.c: 480: printf("PUSH TO CONTINUE");
 17053  00485E  0EF7               	movlw	low STR_30
 17054  004860  6E0D               	movwf	i2printf@f,c
 17055  004862  0EFD               	movlw	high STR_30
 17056  004864  6E0E               	movwf	i2printf@f+1,c
 17057  004866  EC96  F00C         	call	i2_printf	;wreg free
 17058  00486A  0012               	return		;funcret
 17059  00486C                     __end_ofi2_change_state_to_menu_start:
 17060                           	opt stack 0
 17061                           pclatu	equ	0xFFB
 17062                           pclath	equ	0xFFA
 17063                           tblptru	equ	0xFF8
 17064                           tblptrh	equ	0xFF7
 17065                           tblptrl	equ	0xFF6
 17066                           tablat	equ	0xFF5
 17067                           prodh	equ	0xFF4
 17068                           prodl	equ	0xFF3
 17069                           intcon	equ	0xFF2
 17070                           intcon2	equ	0xFF1
 17071                           intcon3	equ	0xFF0
 17072                           indf0	equ	0xFEF
 17073                           postinc0	equ	0xFEE
 17074                           fsr0h	equ	0xFEA
 17075                           fsr0l	equ	0xFE9
 17076                           wreg	equ	0xFE8
 17077                           postdec1	equ	0xFE5
 17078                           fsr1h	equ	0xFE2
 17079                           fsr1l	equ	0xFE1
 17080                           indf2	equ	0xFDF
 17081                           postinc2	equ	0xFDE
 17082                           postdec2	equ	0xFDD
 17083                           fsr2h	equ	0xFDA
 17084                           fsr2l	equ	0xFD9
 17085                           status	equ	0xFD8
 17086                           
 17087 ;; *************** function i2_printRTC *****************
 17088 ;; Defined at:
 17089 ;;		line 63 in file "RTC.c"
 17090 ;; Parameters:    Size  Location     Type
 17091 ;;		None
 17092 ;; Auto vars:     Size  Location     Type
 17093 ;;  printRTC       14   44[COMRAM] int [7]
 17094 ;;  printRTC        4   60[COMRAM] unsigned char [4]
 17095 ;;  printRTC        2   64[COMRAM] int 
 17096 ;;  printRTC        2   58[COMRAM] int 
 17097 ;; Return value:  Size  Location     Type
 17098 ;;                  1    wreg      void 
 17099 ;; Registers used:
 17100 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17101 ;; Tracked objects:
 17102 ;;		On entry : 0/0
 17103 ;;		On exit  : 0/0
 17104 ;;		Unchanged: 0/0
 17105 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17106 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17107 ;;      Locals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17108 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17109 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17110 ;;Total ram usage:       25 bytes
 17111 ;; Hardware stack levels used:    1
 17112 ;; Hardware stack levels required when called:    3
 17113 ;; This function calls:
 17114 ;;		i2_getRTC
 17115 ;;		i2_lcdInst
 17116 ;;		i2_printf
 17117 ;;		i2_strcpy
 17118 ;; This function is called by:
 17119 ;;		i2_change_state_to_menu_start
 17120 ;; This function uses a non-reentrant model
 17121 ;;
 17122                           
 17123                           	psect	text62
 17124  002522                     __ptext62:
 17125                           	opt stack 0
 17126  002522                     i2_printRTC:
 17127                           	opt stack 18
 17128                           
 17129                           ;RTC.c: 64: getRTC();
 17130                           
 17131                           ;incstack = 0
 17132  002522  EC50  F01F         	call	i2_getRTC	;wreg free
 17133                           
 17134                           ;RTC.c: 65: char month[] = "MMM";
 17135  002526  C133  F03D         	movff	printRTC@F3216,i2printRTC@month
 17136  00252A  C134  F03E         	movff	printRTC@F3216+1,i2printRTC@month+1
 17137  00252E  C135  F03F         	movff	printRTC@F3216+2,i2printRTC@month+2
 17138  002532  C136  F040         	movff	printRTC@F3216+3,i2printRTC@month+3
 17139                           
 17140                           ;RTC.c: 66: int INT_time[7];
 17141                           ;RTC.c: 67: for(int i = 0; i < 7; i++){
 17142  002536  0E00               	movlw	0
 17143  002538  6E42               	movwf	i2printRTC@i+1,c
 17144  00253A  0E00               	movlw	0
 17145  00253C  6E41               	movwf	i2printRTC@i,c
 17146  00253E  BE42               	btfsc	i2printRTC@i+1,7,c
 17147  002540  D006               	goto	i2l6298
 17148  002542  5042               	movf	i2printRTC@i+1,w,c
 17149  002544  E135               	bnz	i2l602
 17150  002546  0E07               	movlw	7
 17151  002548  5C41               	subwf	i2printRTC@i,w,c
 17152  00254A  B0D8               	btfsc	status,0,c
 17153  00254C  D031               	goto	i2l602
 17154  00254E                     i2l6298:
 17155                           
 17156                           ;RTC.c: 68: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 17157  00254E  0E24               	movlw	low _time
 17158  002550  2441               	addwf	i2printRTC@i,w,c
 17159  002552  6ED9               	movwf	fsr2l,c
 17160  002554  0E01               	movlw	high _time
 17161  002556  2042               	addwfc	i2printRTC@i+1,w,c
 17162  002558  6EDA               	movwf	fsr2h,c
 17163  00255A  50DF               	movf	indf2,w,c
 17164  00255C  6E2A               	movwf	??i2_printRTC& (0+255),c
 17165  00255E  3A2A               	swapf	??i2_printRTC,f,c
 17166  002560  0E0F               	movlw	15
 17167  002562  162A               	andwf	??i2_printRTC,f,c
 17168  002564  0E0F               	movlw	15
 17169  002566  162A               	andwf	??i2_printRTC,f,c
 17170  002568  502A               	movf	??i2_printRTC,w,c
 17171  00256A  0D0A               	mullw	10
 17172  00256C  0E24               	movlw	low _time
 17173  00256E  2441               	addwf	i2printRTC@i,w,c
 17174  002570  6ED9               	movwf	fsr2l,c
 17175  002572  0E01               	movlw	high _time
 17176  002574  2042               	addwfc	i2printRTC@i+1,w,c
 17177  002576  6EDA               	movwf	fsr2h,c
 17178  002578  50DF               	movf	indf2,w,c
 17179  00257A  0B0F               	andlw	15
 17180  00257C  6E2B               	movwf	(??i2_printRTC+1)& (0+255),c
 17181  00257E  6A2C               	clrf	(??i2_printRTC+2)& (0+255),c
 17182  002580  50F3               	movf	prodl,w,c
 17183  002582  262B               	addwf	??i2_printRTC+1,f,c
 17184  002584  50F4               	movf	prodh,w,c
 17185  002586  222C               	addwfc	??i2_printRTC+2,f,c
 17186  002588  90D8               	bcf	status,0,c
 17187  00258A  3441               	rlcf	i2printRTC@i,w,c
 17188  00258C  6ED9               	movwf	fsr2l,c
 17189  00258E  3442               	rlcf	i2printRTC@i+1,w,c
 17190  002590  6EDA               	movwf	fsr2h,c
 17191  002592  0E2D               	movlw	low i2printRTC@INT_time
 17192  002594  26D9               	addwf	fsr2l,f,c
 17193  002596  0E00               	movlw	high i2printRTC@INT_time
 17194  002598  22DA               	addwfc	fsr2h,f,c
 17195  00259A  C02B  FFDE         	movff	??i2_printRTC+1,postinc2
 17196  00259E  C02C  FFDD         	movff	??i2_printRTC+2,postdec2
 17197  0025A2  4A41               	infsnz	i2printRTC@i,f,c
 17198  0025A4  2A42               	incf	i2printRTC@i+1,f,c
 17199  0025A6  BE42               	btfsc	i2printRTC@i+1,7,c
 17200  0025A8  D7D2               	goto	i2l6298
 17201  0025AA  5042               	movf	i2printRTC@i+1,w,c
 17202  0025AC  E101               	bnz	i2u481_40
 17203  0025AE  D7CB               	goto	L9
 17204  0025B0                     i2u481_40:
 17205  0025B0                     i2l602:
 17206                           
 17207                           ;RTC.c: 69: }
 17208                           ;RTC.c: 70: int RTC_month = INT_time[5];
 17209  0025B0  C037  F03B         	movff	i2printRTC@INT_time+10,i2printRTC@RTC_month
 17210  0025B4  C038  F03C         	movff	i2printRTC@INT_time+11,i2printRTC@RTC_month+1
 17211                           
 17212                           ;RTC.c: 71: switch(RTC_month){
 17213  0025B8  D084               	goto	i2l6330
 17214  0025BA                     i2l6304:
 17215                           
 17216                           ;RTC.c: 73: strcpy(month, "JAN");
 17217  0025BA  0E3D               	movlw	low i2printRTC@month
 17218  0025BC  6E01               	movwf	i2strcpy@to,c
 17219  0025BE  0E00               	movlw	high i2printRTC@month
 17220  0025C0  6E02               	movwf	i2strcpy@to+1,c
 17221  0025C2  0EDB               	movlw	low STR_8
 17222  0025C4  6E03               	movwf	i2strcpy@from,c
 17223  0025C6  0EFF               	movlw	high STR_8
 17224  0025C8  6E04               	movwf	i2strcpy@from+1,c
 17225  0025CA  EC97  F022         	call	i2_strcpy	;wreg free
 17226                           
 17227                           ;RTC.c: 74: break;
 17228  0025CE  D0A6               	goto	i2l6332
 17229  0025D0                     i2l6306:
 17230                           
 17231                           ;RTC.c: 76: strcpy(month, "FEB");
 17232  0025D0  0E3D               	movlw	low i2printRTC@month
 17233  0025D2  6E01               	movwf	i2strcpy@to,c
 17234  0025D4  0E00               	movlw	high i2printRTC@month
 17235  0025D6  6E02               	movwf	i2strcpy@to+1,c
 17236  0025D8  0ECB               	movlw	low STR_9
 17237  0025DA  6E03               	movwf	i2strcpy@from,c
 17238  0025DC  0EFF               	movlw	high STR_9
 17239  0025DE  6E04               	movwf	i2strcpy@from+1,c
 17240  0025E0  EC97  F022         	call	i2_strcpy	;wreg free
 17241                           
 17242                           ;RTC.c: 77: break;
 17243  0025E4  D09B               	goto	i2l6332
 17244  0025E6                     i2l6308:
 17245                           
 17246                           ;RTC.c: 79: strcpy(month, "MAR");
 17247  0025E6  0E3D               	movlw	low i2printRTC@month
 17248  0025E8  6E01               	movwf	i2strcpy@to,c
 17249  0025EA  0E00               	movlw	high i2printRTC@month
 17250  0025EC  6E02               	movwf	i2strcpy@to+1,c
 17251  0025EE  0EE7               	movlw	low STR_10
 17252  0025F0  6E03               	movwf	i2strcpy@from,c
 17253  0025F2  0EFF               	movlw	high STR_10
 17254  0025F4  6E04               	movwf	i2strcpy@from+1,c
 17255  0025F6  EC97  F022         	call	i2_strcpy	;wreg free
 17256                           
 17257                           ;RTC.c: 80: break;
 17258  0025FA  D090               	goto	i2l6332
 17259  0025FC                     i2l6310:
 17260                           
 17261                           ;RTC.c: 82: strcpy(month, "APR");
 17262  0025FC  0E3D               	movlw	low i2printRTC@month
 17263  0025FE  6E01               	movwf	i2strcpy@to,c
 17264  002600  0E00               	movlw	high i2printRTC@month
 17265  002602  6E02               	movwf	i2strcpy@to+1,c
 17266  002604  0EEB               	movlw	low STR_11
 17267  002606  6E03               	movwf	i2strcpy@from,c
 17268  002608  0EFF               	movlw	high STR_11
 17269  00260A  6E04               	movwf	i2strcpy@from+1,c
 17270  00260C  EC97  F022         	call	i2_strcpy	;wreg free
 17271                           
 17272                           ;RTC.c: 83: break;
 17273  002610  D085               	goto	i2l6332
 17274  002612                     i2l6312:
 17275                           
 17276                           ;RTC.c: 85: strcpy(month, "MAY");
 17277  002612  0E3D               	movlw	low i2printRTC@month
 17278  002614  6E01               	movwf	i2strcpy@to,c
 17279  002616  0E00               	movlw	high i2printRTC@month
 17280  002618  6E02               	movwf	i2strcpy@to+1,c
 17281  00261A  0EFB               	movlw	low STR_12
 17282  00261C  6E03               	movwf	i2strcpy@from,c
 17283  00261E  0EFF               	movlw	high STR_12
 17284  002620  6E04               	movwf	i2strcpy@from+1,c
 17285  002622  EC97  F022         	call	i2_strcpy	;wreg free
 17286                           
 17287                           ;RTC.c: 86: break;
 17288  002626  D07A               	goto	i2l6332
 17289  002628                     i2l6314:
 17290                           
 17291                           ;RTC.c: 88: strcpy(month, "JUN");
 17292  002628  0E3D               	movlw	low i2printRTC@month
 17293  00262A  6E01               	movwf	i2strcpy@to,c
 17294  00262C  0E00               	movlw	high i2printRTC@month
 17295  00262E  6E02               	movwf	i2strcpy@to+1,c
 17296  002630  0EDF               	movlw	low STR_13
 17297  002632  6E03               	movwf	i2strcpy@from,c
 17298  002634  0EFF               	movlw	high STR_13
 17299  002636  6E04               	movwf	i2strcpy@from+1,c
 17300  002638  EC97  F022         	call	i2_strcpy	;wreg free
 17301                           
 17302                           ;RTC.c: 89: break;
 17303  00263C  D06F               	goto	i2l6332
 17304  00263E                     i2l6316:
 17305                           
 17306                           ;RTC.c: 91: strcpy(month, "JUL");
 17307  00263E  0E3D               	movlw	low i2printRTC@month
 17308  002640  6E01               	movwf	i2strcpy@to,c
 17309  002642  0E00               	movlw	high i2printRTC@month
 17310  002644  6E02               	movwf	i2strcpy@to+1,c
 17311  002646  0ED7               	movlw	low STR_14
 17312  002648  6E03               	movwf	i2strcpy@from,c
 17313  00264A  0EFF               	movlw	high STR_14
 17314  00264C  6E04               	movwf	i2strcpy@from+1,c
 17315  00264E  EC97  F022         	call	i2_strcpy	;wreg free
 17316                           
 17317                           ;RTC.c: 92: break;
 17318  002652  D064               	goto	i2l6332
 17319  002654                     i2l6318:
 17320                           
 17321                           ;RTC.c: 94: strcpy(month, "AUG");
 17322  002654  0E3D               	movlw	low i2printRTC@month
 17323  002656  6E01               	movwf	i2strcpy@to,c
 17324  002658  0E00               	movlw	high i2printRTC@month
 17325  00265A  6E02               	movwf	i2strcpy@to+1,c
 17326  00265C  0ED3               	movlw	low STR_15
 17327  00265E  6E03               	movwf	i2strcpy@from,c
 17328  002660  0EFF               	movlw	high STR_15
 17329  002662  6E04               	movwf	i2strcpy@from+1,c
 17330  002664  EC97  F022         	call	i2_strcpy	;wreg free
 17331                           
 17332                           ;RTC.c: 95: break;
 17333  002668  D059               	goto	i2l6332
 17334  00266A                     i2l6320:
 17335                           
 17336                           ;RTC.c: 97: strcpy(month, "SEP");
 17337  00266A  0E3D               	movlw	low i2printRTC@month
 17338  00266C  6E01               	movwf	i2strcpy@to,c
 17339  00266E  0E00               	movlw	high i2printRTC@month
 17340  002670  6E02               	movwf	i2strcpy@to+1,c
 17341  002672  0EE3               	movlw	low STR_16
 17342  002674  6E03               	movwf	i2strcpy@from,c
 17343  002676  0EFF               	movlw	high STR_16
 17344  002678  6E04               	movwf	i2strcpy@from+1,c
 17345  00267A  EC97  F022         	call	i2_strcpy	;wreg free
 17346                           
 17347                           ;RTC.c: 98: break;
 17348  00267E  D04E               	goto	i2l6332
 17349  002680                     i2l6322:
 17350                           
 17351                           ;RTC.c: 100: strcpy(month, "OCT");
 17352  002680  0E3D               	movlw	low i2printRTC@month
 17353  002682  6E01               	movwf	i2strcpy@to,c
 17354  002684  0E00               	movlw	high i2printRTC@month
 17355  002686  6E02               	movwf	i2strcpy@to+1,c
 17356  002688  0EF3               	movlw	low STR_17
 17357  00268A  6E03               	movwf	i2strcpy@from,c
 17358  00268C  0EFF               	movlw	high STR_17
 17359  00268E  6E04               	movwf	i2strcpy@from+1,c
 17360  002690  EC97  F022         	call	i2_strcpy	;wreg free
 17361                           
 17362                           ;RTC.c: 101: break;
 17363  002694  D043               	goto	i2l6332
 17364  002696                     i2l6324:
 17365                           
 17366                           ;RTC.c: 103: strcpy(month, "NOV");
 17367  002696  0E3D               	movlw	low i2printRTC@month
 17368  002698  6E01               	movwf	i2strcpy@to,c
 17369  00269A  0E00               	movlw	high i2printRTC@month
 17370  00269C  6E02               	movwf	i2strcpy@to+1,c
 17371  00269E  0EF7               	movlw	low STR_18
 17372  0026A0  6E03               	movwf	i2strcpy@from,c
 17373  0026A2  0EFF               	movlw	high STR_18
 17374  0026A4  6E04               	movwf	i2strcpy@from+1,c
 17375  0026A6  EC97  F022         	call	i2_strcpy	;wreg free
 17376                           
 17377                           ;RTC.c: 104: break;
 17378  0026AA  D038               	goto	i2l6332
 17379  0026AC                     i2l6326:
 17380                           
 17381                           ;RTC.c: 106: strcpy(month, "DEC");
 17382  0026AC  0E3D               	movlw	low i2printRTC@month
 17383  0026AE  6E01               	movwf	i2strcpy@to,c
 17384  0026B0  0E00               	movlw	high i2printRTC@month
 17385  0026B2  6E02               	movwf	i2strcpy@to+1,c
 17386  0026B4  0ECF               	movlw	low STR_19
 17387  0026B6  6E03               	movwf	i2strcpy@from,c
 17388  0026B8  0EFF               	movlw	high STR_19
 17389  0026BA  6E04               	movwf	i2strcpy@from+1,c
 17390  0026BC  EC97  F022         	call	i2_strcpy	;wreg free
 17391                           
 17392                           ;RTC.c: 108: }
 17393                           
 17394                           ;RTC.c: 107: break;
 17395  0026C0  D02D               	goto	i2l6332
 17396  0026C2                     i2l6330:
 17397  0026C2  C03B  F02A         	movff	i2printRTC@RTC_month,??i2_printRTC
 17398  0026C6  C03C  F02B         	movff	i2printRTC@RTC_month+1,??i2_printRTC+1
 17399                           
 17400                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 17401                           ; Switch size 1, requested type "space"
 17402                           ; Number of cases is 1, Range of values is 0 to 0
 17403                           ; switch strategies available:
 17404                           ; Name         Instructions Cycles
 17405                           ; simple_byte            4     3 (average)
 17406                           ;	Chosen strategy is simple_byte
 17407  0026CA  502B               	movf	??i2_printRTC+1,w,c
 17408  0026CC  0A00               	xorlw	0	; case 0
 17409  0026CE  A4D8               	btfss	status,2,c
 17410  0026D0  D025               	goto	i2l6332
 17411                           
 17412                           ; Switch size 1, requested type "space"
 17413                           ; Number of cases is 12, Range of values is 1 to 12
 17414                           ; switch strategies available:
 17415                           ; Name         Instructions Cycles
 17416                           ; simple_byte           37    19 (average)
 17417                           ;	Chosen strategy is simple_byte
 17418  0026D2  502A               	movf	??i2_printRTC,w,c
 17419  0026D4  0A01               	xorlw	1	; case 1
 17420  0026D6  B4D8               	btfsc	status,2,c
 17421  0026D8  D770               	goto	i2l6304
 17422  0026DA  0A03               	xorlw	3	; case 2
 17423  0026DC  B4D8               	btfsc	status,2,c
 17424  0026DE  D778               	goto	i2l6306
 17425  0026E0  0A01               	xorlw	1	; case 3
 17426  0026E2  B4D8               	btfsc	status,2,c
 17427  0026E4  D780               	goto	i2l6308
 17428  0026E6  0A07               	xorlw	7	; case 4
 17429  0026E8  B4D8               	btfsc	status,2,c
 17430  0026EA  D788               	goto	i2l6310
 17431  0026EC  0A01               	xorlw	1	; case 5
 17432  0026EE  B4D8               	btfsc	status,2,c
 17433  0026F0  D790               	goto	i2l6312
 17434  0026F2  0A03               	xorlw	3	; case 6
 17435  0026F4  B4D8               	btfsc	status,2,c
 17436  0026F6  D798               	goto	i2l6314
 17437  0026F8  0A01               	xorlw	1	; case 7
 17438  0026FA  B4D8               	btfsc	status,2,c
 17439  0026FC  D7A0               	goto	i2l6316
 17440  0026FE  0A0F               	xorlw	15	; case 8
 17441  002700  B4D8               	btfsc	status,2,c
 17442  002702  D7A8               	goto	i2l6318
 17443  002704  0A01               	xorlw	1	; case 9
 17444  002706  B4D8               	btfsc	status,2,c
 17445  002708  D7B0               	goto	i2l6320
 17446  00270A  0A03               	xorlw	3	; case 10
 17447  00270C  B4D8               	btfsc	status,2,c
 17448  00270E  D7B8               	goto	i2l6322
 17449  002710  0A01               	xorlw	1	; case 11
 17450  002712  B4D8               	btfsc	status,2,c
 17451  002714  D7C0               	goto	i2l6324
 17452  002716  0A07               	xorlw	7	; case 12
 17453  002718  B4D8               	btfsc	status,2,c
 17454  00271A  D7C8               	goto	i2l6326
 17455  00271C                     i2l6332:
 17456                           
 17457                           ;RTC.c: 109: lcdInst(0b10000000);;
 17458  00271C  0E80               	movlw	128
 17459  00271E  ECEA  F024         	call	i2_lcdInst
 17460                           
 17461                           ;RTC.c: 110: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
 17462  002722  0E1C               	movlw	low STR_21
 17463  002724  6E0D               	movwf	i2printf@f,c
 17464  002726  0EFB               	movlw	high STR_21
 17465  002728  6E0E               	movwf	i2printf@f+1,c
 17466  00272A  C035  F00F         	movff	i2printRTC@INT_time+8,?i2_printf+2
 17467  00272E  C036  F010         	movff	i2printRTC@INT_time+9,?i2_printf+3
 17468  002732  0E3D               	movlw	low i2printRTC@month
 17469  002734  6E11               	movwf	?i2_printf+4,c
 17470  002736  0E00               	movlw	high i2printRTC@month
 17471  002738  6E12               	movwf	?i2_printf+5,c
 17472  00273A  C031  F013         	movff	i2printRTC@INT_time+4,?i2_printf+6
 17473  00273E  C032  F014         	movff	i2printRTC@INT_time+5,?i2_printf+7
 17474  002742  C02F  F015         	movff	i2printRTC@INT_time+2,?i2_printf+8
 17475  002746  C030  F016         	movff	i2printRTC@INT_time+3,?i2_printf+9
 17476  00274A  C02D  F017         	movff	i2printRTC@INT_time,?i2_printf+10
 17477  00274E  C02E  F018         	movff	i2printRTC@INT_time+1,?i2_printf+11
 17478  002752  EC96  F00C         	call	i2_printf	;wreg free
 17479  002756  0012               	return		;funcret
 17480  002758                     __end_ofi2_printRTC:
 17481                           	opt stack 0
 17482                           pclatu	equ	0xFFB
 17483                           pclath	equ	0xFFA
 17484                           tblptru	equ	0xFF8
 17485                           tblptrh	equ	0xFF7
 17486                           tblptrl	equ	0xFF6
 17487                           tablat	equ	0xFF5
 17488                           prodh	equ	0xFF4
 17489                           prodl	equ	0xFF3
 17490                           intcon	equ	0xFF2
 17491                           intcon2	equ	0xFF1
 17492                           intcon3	equ	0xFF0
 17493                           indf0	equ	0xFEF
 17494                           postinc0	equ	0xFEE
 17495                           fsr0h	equ	0xFEA
 17496                           fsr0l	equ	0xFE9
 17497                           wreg	equ	0xFE8
 17498                           postdec1	equ	0xFE5
 17499                           fsr1h	equ	0xFE2
 17500                           fsr1l	equ	0xFE1
 17501                           indf2	equ	0xFDF
 17502                           postinc2	equ	0xFDE
 17503                           postdec2	equ	0xFDD
 17504                           fsr2h	equ	0xFDA
 17505                           fsr2l	equ	0xFD9
 17506                           status	equ	0xFD8
 17507                           
 17508 ;; *************** function i2_strcpy *****************
 17509 ;; Defined at:
 17510 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
 17511 ;; Parameters:    Size  Location     Type
 17512 ;;  to              2    0[COMRAM] PTR unsigned char 
 17513 ;;		 -> printRTC@month(4), UI@month(4), 
 17514 ;;  from            2    2[COMRAM] PTR const unsigned char 
 17515 ;;		 -> STR_62(4), STR_61(4), STR_60(4), STR_59(4), 
 17516 ;;		 -> STR_58(4), STR_57(4), STR_56(4), STR_55(4), 
 17517 ;;		 -> STR_54(4), STR_53(4), STR_52(4), STR_51(4), 
 17518 ;;		 -> STR_20(4), STR_19(4), STR_18(4), STR_17(4), 
 17519 ;;		 -> STR_16(4), STR_15(4), STR_14(4), STR_13(4), 
 17520 ;;		 -> STR_12(4), STR_11(4), STR_10(4), STR_9(4), 
 17521 ;;		 -> STR_8(4), 
 17522 ;; Auto vars:     Size  Location     Type
 17523 ;;  strcpy          2    4[COMRAM] PTR unsigned char 
 17524 ;;		 -> printRTC@month(4), UI@month(4), 
 17525 ;; Return value:  Size  Location     Type
 17526 ;;                  2    0[COMRAM] PTR unsigned char 
 17527 ;; Registers used:
 17528 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 17529 ;; Tracked objects:
 17530 ;;		On entry : 0/0
 17531 ;;		On exit  : 0/0
 17532 ;;		Unchanged: 0/0
 17533 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17534 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17535 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17536 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17537 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17538 ;;Total ram usage:        6 bytes
 17539 ;; Hardware stack levels used:    1
 17540 ;; This function calls:
 17541 ;;		Nothing
 17542 ;; This function is called by:
 17543 ;;		i2_printRTC
 17544 ;; This function uses a non-reentrant model
 17545 ;;
 17546                           
 17547                           	psect	text63
 17548  00452E                     __ptext63:
 17549                           	opt stack 0
 17550  00452E                     i2_strcpy:
 17551                           	opt stack 20
 17552                           
 17553                           ;incstack = 0
 17554  00452E  C001  F005         	movff	i2strcpy@to,i2strcpy@cp
 17555  004532  C002  F006         	movff	i2strcpy@to+1,i2strcpy@cp+1
 17556  004536  D004               	goto	i2l5968
 17557  004538                     i2l5966:
 17558  004538  4A05               	infsnz	i2strcpy@cp,f,c
 17559  00453A  2A06               	incf	i2strcpy@cp+1,f,c
 17560  00453C  4A03               	infsnz	i2strcpy@from,f,c
 17561  00453E  2A04               	incf	i2strcpy@from+1,f,c
 17562  004540                     i2l5968:
 17563  004540  C003  FFF6         	movff	i2strcpy@from,tblptrl
 17564  004544  C004  FFF7         	movff	i2strcpy@from+1,tblptrh
 17565  004548                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 17566  004548  6AF8               	clrf	tblptru,c
 17567  00454A                     	endif
 17568  00454A                     	if	0	;tblptru may be non-zero
 17569  00454A                     	endif
 17570  00454A  C005  FFD9         	movff	i2strcpy@cp,fsr2l
 17571  00454E  C006  FFDA         	movff	i2strcpy@cp+1,fsr2h
 17572  004552  0008               	tblrd		*
 17573  004554  CFF5 FFDF          	movff	tablat,indf2
 17574  004558  50DF               	movf	indf2,w,c
 17575  00455A  B4D8               	btfsc	status,2,c
 17576  00455C  0012               	return	
 17577  00455E  D7EC               	goto	i2l5966
 17578  004560                     __end_ofi2_strcpy:
 17579                           	opt stack 0
 17580                           pclatu	equ	0xFFB
 17581                           pclath	equ	0xFFA
 17582                           tblptru	equ	0xFF8
 17583                           tblptrh	equ	0xFF7
 17584                           tblptrl	equ	0xFF6
 17585                           tablat	equ	0xFF5
 17586                           prodh	equ	0xFF4
 17587                           prodl	equ	0xFF3
 17588                           intcon	equ	0xFF2
 17589                           intcon2	equ	0xFF1
 17590                           intcon3	equ	0xFF0
 17591                           indf0	equ	0xFEF
 17592                           postinc0	equ	0xFEE
 17593                           fsr0h	equ	0xFEA
 17594                           fsr0l	equ	0xFE9
 17595                           wreg	equ	0xFE8
 17596                           postdec1	equ	0xFE5
 17597                           fsr1h	equ	0xFE2
 17598                           fsr1l	equ	0xFE1
 17599                           indf2	equ	0xFDF
 17600                           postinc2	equ	0xFDE
 17601                           postdec2	equ	0xFDD
 17602                           fsr2h	equ	0xFDA
 17603                           fsr2l	equ	0xFD9
 17604                           status	equ	0xFD8
 17605                           
 17606 ;; *************** function _inputHandler *****************
 17607 ;; Defined at:
 17608 ;;		line 372 in file "UI.c"
 17609 ;; Parameters:    Size  Location     Type
 17610 ;;		None
 17611 ;; Auto vars:     Size  Location     Type
 17612 ;;		None
 17613 ;; Return value:  Size  Location     Type
 17614 ;;                  2   41[COMRAM] int 
 17615 ;; Registers used:
 17616 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17617 ;; Tracked objects:
 17618 ;;		On entry : 0/0
 17619 ;;		On exit  : 0/0
 17620 ;;		Unchanged: 0/0
 17621 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17622 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17623 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17624 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17625 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17626 ;;Total ram usage:        4 bytes
 17627 ;; Hardware stack levels used:    1
 17628 ;; Hardware stack levels required when called:    4
 17629 ;; This function calls:
 17630 ;;		_change_state_to_logs_11
 17631 ;;		_change_state_to_logs_12
 17632 ;;		_change_state_to_logs_22
 17633 ;;		_change_state_to_logs_23
 17634 ;;		_change_state_to_logs_33
 17635 ;;		_change_state_to_logs_34
 17636 ;;		_change_state_to_menu_11
 17637 ;;		_change_state_to_menu_23
 17638 ;;		i2_change_state_to_menu_12
 17639 ;;		i2_change_state_to_menu_22
 17640 ;; This function is called by:
 17641 ;;		_updateMenu
 17642 ;; This function uses a non-reentrant model
 17643 ;;
 17644                           
 17645                           	psect	text64
 17646  002B3E                     __ptext64:
 17647                           	opt stack 0
 17648  002B3E                     _inputHandler:
 17649                           	opt stack 18
 17650                           
 17651                           ;UI.c: 377: if(firstboot){
 17652                           
 17653                           ;incstack = 0
 17654  002B3E  5075               	movf	_firstboot,w,c
 17655  002B40  1076               	iorwf	_firstboot+1,w,c
 17656  002B42  B4D8               	btfsc	status,2,c
 17657  002B44  D00B               	goto	i2l6400
 17658                           
 17659                           ;UI.c: 378: change_state_to_menu_11();
 17660  002B46  ECF8  F022         	call	_change_state_to_menu_11	;wreg free
 17661                           
 17662                           ;UI.c: 379: firstboot = 0;
 17663  002B4A  0E00               	movlw	0
 17664  002B4C  6E76               	movwf	_firstboot+1,c
 17665  002B4E  0E00               	movlw	0
 17666  002B50  6E75               	movwf	_firstboot,c
 17667                           
 17668                           ;UI.c: 380: return 0;
 17669  002B52  0E00               	movlw	0
 17670  002B54  6E2B               	movwf	?_inputHandler+1,c
 17671  002B56  0E00               	movlw	0
 17672  002B58  6E2A               	movwf	?_inputHandler,c
 17673  002B5A  0012               	return	
 17674  002B5C                     i2l6400:
 17675                           
 17676                           ;UI.c: 381: }
 17677                           ;UI.c: 382: if (logstate){
 17678  002B5C  0100               	movlb	0	; () banked
 17679  002B5E  51F6               	movf	_logstate& (0+255),w,b
 17680  002B60  0100               	movlb	0	; () banked
 17681  002B62  11F7               	iorwf	(_logstate+1)& (0+255),w,b
 17682  002B64  B4D8               	btfsc	status,2,c
 17683  002B66  D0C7               	goto	i2l6518
 17684                           
 17685                           ; BSR set to: 0
 17686                           ;UI.c: 383: if(input == 'C' && PORTBbits.RB1 == 1){
 17687  002B68  0E43               	movlw	67
 17688  002B6A  187D               	xorwf	_input,w,c	;volatile
 17689  002B6C  A4D8               	btfss	status,2,c
 17690  002B6E  D012               	goto	i2l6418
 17691                           
 17692                           ; BSR set to: 0
 17693  002B70  B281               	btfsc	3969,1,c	;volatile
 17694  002B72  D009               	goto	i2l6410
 17695  002B74  D00F               	goto	i2l6418
 17696  002B76                     i2l6408:
 17697                           
 17698                           ;UI.c: 386: _delay((unsigned long)((10)*(32000000/4000.0)));
 17699  002B76  0E68               	movlw	104
 17700  002B78  6E2C               	movwf	??_inputHandler& (0+255),c
 17701  002B7A  0EE4               	movlw	228
 17702  002B7C                     i2u863_47:
 17703  002B7C  2EE8               	decfsz	wreg,f,c
 17704  002B7E  D7FE               	bra	i2u863_47
 17705  002B80  2E2C               	decfsz	??_inputHandler& (0+255),f,c
 17706  002B82  D7FC               	bra	i2u863_47
 17707  002B84  D000               	nop2	
 17708  002B86                     i2l6410:
 17709  002B86  B281               	btfsc	3969,1,c	;volatile
 17710  002B88  D7F6               	goto	i2l6408
 17711  002B8A                     i2l6412:
 17712                           
 17713                           ;UI.c: 387: }
 17714                           ;UI.c: 388: return 0;
 17715  002B8A  0E00               	movlw	0
 17716  002B8C  6E2B               	movwf	?_inputHandler+1,c
 17717  002B8E  0E00               	movlw	0
 17718  002B90  6E2A               	movwf	?_inputHandler,c
 17719  002B92  0012               	return	
 17720  002B94                     i2l6418:
 17721                           
 17722                           ;UI.c: 390: else if (input == 'D'){
 17723  002B94  0E44               	movlw	68
 17724  002B96  187D               	xorwf	_input,w,c	;volatile
 17725  002B98  A4D8               	btfss	status,2,c
 17726  002B9A  D7F7               	goto	i2l6412
 17727                           
 17728                           ;UI.c: 392: logstate = 0;
 17729  002B9C  0E00               	movlw	0
 17730  002B9E  0100               	movlb	0	; () banked
 17731  002BA0  6FF7               	movwf	(_logstate+1)& (0+255),b
 17732  002BA2  0E00               	movlw	0
 17733  002BA4  6FF6               	movwf	_logstate& (0+255),b
 17734                           
 17735                           ;UI.c: 393: switch(cur_state){
 17736  002BA6  D012               	goto	i2l6436
 17737  002BA8                     i2l6422:
 17738                           
 17739                           ;UI.c: 395: change_state_to_logs_11();
 17740  002BA8  EC70  F023         	call	_change_state_to_logs_11	;wreg free
 17741                           
 17742                           ;UI.c: 396: break;
 17743  002BAC  D7EE               	goto	i2l6412
 17744  002BAE                     i2l6424:
 17745                           
 17746                           ;UI.c: 398: change_state_to_logs_12();
 17747  002BAE  EC58  F023         	call	_change_state_to_logs_12	;wreg free
 17748                           
 17749                           ;UI.c: 399: break;
 17750  002BB2  D7EB               	goto	i2l6412
 17751  002BB4                     i2l6426:
 17752                           
 17753                           ;UI.c: 401: change_state_to_logs_22();
 17754  002BB4  EC40  F023         	call	_change_state_to_logs_22	;wreg free
 17755                           
 17756                           ;UI.c: 402: break;
 17757  002BB8  D7E8               	goto	i2l6412
 17758  002BBA                     i2l6428:
 17759                           
 17760                           ;UI.c: 404: change_state_to_logs_23();
 17761  002BBA  ECB6  F023         	call	_change_state_to_logs_23	;wreg free
 17762                           
 17763                           ;UI.c: 405: break;
 17764  002BBE  D7E5               	goto	i2l6412
 17765  002BC0                     i2l6430:
 17766                           
 17767                           ;UI.c: 407: change_state_to_logs_33();
 17768  002BC0  EC28  F023         	call	_change_state_to_logs_33	;wreg free
 17769                           
 17770                           ;UI.c: 408: break;
 17771  002BC4  D7E2               	goto	i2l6412
 17772  002BC6                     i2l6432:
 17773                           
 17774                           ;UI.c: 410: change_state_to_logs_34();
 17775  002BC6  EC10  F023         	call	_change_state_to_logs_34	;wreg free
 17776                           
 17777                           ;UI.c: 412: }
 17778                           
 17779                           ;UI.c: 411: break;
 17780  002BCA  D7DF               	goto	i2l6412
 17781  002BCC                     i2l6436:
 17782  002BCC  C0E2  F02C         	movff	_cur_state,??_inputHandler
 17783  002BD0  C0E3  F02D         	movff	_cur_state+1,??_inputHandler+1
 17784                           
 17785                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
 17786                           ; Switch size 1, requested type "space"
 17787                           ; Number of cases is 2, Range of values is 3 to 4
 17788                           ; switch strategies available:
 17789                           ; Name         Instructions Cycles
 17790                           ; simple_byte            7     4 (average)
 17791                           ;	Chosen strategy is simple_byte
 17792  002BD4  502D               	movf	??_inputHandler+1,w,c
 17793  002BD6  0A03               	xorlw	3	; case 3
 17794  002BD8  B4D8               	btfsc	status,2,c
 17795  002BDA  D004               	goto	i2l8754
 17796  002BDC  0A07               	xorlw	7	; case 4
 17797  002BDE  B4D8               	btfsc	status,2,c
 17798  002BE0  D00F               	goto	i2l8756
 17799  002BE2  D7D3               	goto	i2l6412
 17800  002BE4                     i2l8754:
 17801                           
 17802                           ; Switch size 1, requested type "space"
 17803                           ; Number of cases is 4, Range of values is 243 to 255
 17804                           ; switch strategies available:
 17805                           ; Name         Instructions Cycles
 17806                           ; simple_byte           13     7 (average)
 17807                           ;	Chosen strategy is simple_byte
 17808  002BE4  502C               	movf	??_inputHandler,w,c
 17809  002BE6  0AF3               	xorlw	243	; case 243
 17810  002BE8  B4D8               	btfsc	status,2,c
 17811  002BEA  D7DE               	goto	i2l6422
 17812  002BEC  0A07               	xorlw	7	; case 244
 17813  002BEE  B4D8               	btfsc	status,2,c
 17814  002BF0  D7DE               	goto	i2l6424
 17815  002BF2  0A0A               	xorlw	10	; case 254
 17816  002BF4  B4D8               	btfsc	status,2,c
 17817  002BF6  D7DE               	goto	i2l6426
 17818  002BF8  0A01               	xorlw	1	; case 255
 17819  002BFA  B4D8               	btfsc	status,2,c
 17820  002BFC  D7DE               	goto	i2l6428
 17821  002BFE  D7C5               	goto	i2l6412
 17822  002C00                     i2l8756:
 17823                           
 17824                           ; Switch size 1, requested type "space"
 17825                           ; Number of cases is 2, Range of values is 9 to 10
 17826                           ; switch strategies available:
 17827                           ; Name         Instructions Cycles
 17828                           ; simple_byte            7     4 (average)
 17829                           ;	Chosen strategy is simple_byte
 17830  002C00  502C               	movf	??_inputHandler,w,c
 17831  002C02  0A09               	xorlw	9	; case 9
 17832  002C04  B4D8               	btfsc	status,2,c
 17833  002C06  D7DC               	goto	i2l6430
 17834  002C08  0A03               	xorlw	3	; case 10
 17835  002C0A  B4D8               	btfsc	status,2,c
 17836  002C0C  D7DC               	goto	i2l6432
 17837  002C0E  D7BD               	goto	i2l6412
 17838  002C10                     i2l6448:
 17839                           
 17840                           ;UI.c: 422: if(cur_state == 11){
 17841  002C10  0E0B               	movlw	11
 17842  002C12  0100               	movlb	0	; () banked
 17843  002C14  19E2               	xorwf	_cur_state& (0+255),w,b
 17844  002C16  0100               	movlb	0	; () banked
 17845  002C18  11E3               	iorwf	(_cur_state+1)& (0+255),w,b
 17846  002C1A  A4D8               	btfss	status,2,c
 17847  002C1C  D005               	goto	i2l6456
 17848                           
 17849                           ; BSR set to: 0
 17850                           ;UI.c: 423: return 0;
 17851  002C1E  0E00               	movlw	0
 17852  002C20  6E2B               	movwf	?_inputHandler+1,c
 17853  002C22  0E00               	movlw	0
 17854  002C24  6E2A               	movwf	?_inputHandler,c
 17855                           
 17856                           ; BSR set to: 0
 17857  002C26  0012               	return	
 17858  002C28                     i2l6456:
 17859                           
 17860                           ; BSR set to: 0
 17861                           ;UI.c: 425: else{
 17862                           ;UI.c: 426: change_state_to_menu_11();
 17863  002C28  ECF8  F022         	call	_change_state_to_menu_11	;wreg free
 17864                           
 17865                           ;UI.c: 427: }
 17866                           ;UI.c: 428: return 0;
 17867  002C2C  0E00               	movlw	0
 17868  002C2E  6E2B               	movwf	?_inputHandler+1,c
 17869  002C30  0E00               	movlw	0
 17870  002C32  6E2A               	movwf	?_inputHandler,c
 17871  002C34  0012               	return	
 17872  002C36                     i2l6462:
 17873                           
 17874                           ;UI.c: 430: if(cur_state == 22 | cur_state == 12){
 17875  002C36  0E16               	movlw	22
 17876  002C38  0100               	movlb	0	; () banked
 17877  002C3A  19E2               	xorwf	_cur_state& (0+255),w,b
 17878  002C3C  0100               	movlb	0	; () banked
 17879  002C3E  11E3               	iorwf	(_cur_state+1)& (0+255),w,b
 17880  002C40  B4D8               	btfsc	status,2,c
 17881  002C42  D007               	goto	i2l6466
 17882                           
 17883                           ; BSR set to: 0
 17884  002C44  0E0C               	movlw	12
 17885  002C46  0100               	movlb	0	; () banked
 17886  002C48  19E2               	xorwf	_cur_state& (0+255),w,b
 17887  002C4A  0100               	movlb	0	; () banked
 17888  002C4C  11E3               	iorwf	(_cur_state+1)& (0+255),w,b
 17889  002C4E  A4D8               	btfss	status,2,c
 17890  002C50  D005               	goto	i2l6472
 17891  002C52                     i2l6466:
 17892                           
 17893                           ; BSR set to: 0
 17894                           ;UI.c: 431: return 0;
 17895  002C52  0E00               	movlw	0
 17896  002C54  6E2B               	movwf	?_inputHandler+1,c
 17897  002C56  0E00               	movlw	0
 17898  002C58  6E2A               	movwf	?_inputHandler,c
 17899                           
 17900                           ; BSR set to: 0
 17901  002C5A  0012               	return	
 17902  002C5C                     i2l6472:
 17903                           
 17904                           ; BSR set to: 0
 17905                           ;UI.c: 433: else if(cur_state == 23){
 17906  002C5C  0E17               	movlw	23
 17907  002C5E  0100               	movlb	0	; () banked
 17908  002C60  19E2               	xorwf	_cur_state& (0+255),w,b
 17909  002C62  0100               	movlb	0	; () banked
 17910  002C64  11E3               	iorwf	(_cur_state+1)& (0+255),w,b
 17911  002C66  A4D8               	btfss	status,2,c
 17912  002C68  D003               	goto	i2l6476
 17913                           
 17914                           ; BSR set to: 0
 17915                           ;UI.c: 434: change_state_to_menu_22();
 17916  002C6A  ECB0  F022         	call	i2_change_state_to_menu_22	;wreg free
 17917                           
 17918                           ;UI.c: 435: }
 17919  002C6E  D002               	goto	i2l6478
 17920  002C70                     i2l6476:
 17921                           
 17922                           ;UI.c: 436: else{
 17923                           ;UI.c: 437: change_state_to_menu_12();
 17924  002C70  ECC8  F022         	call	i2_change_state_to_menu_12	;wreg free
 17925  002C74                     i2l6478:
 17926                           
 17927                           ;UI.c: 438: }
 17928                           ;UI.c: 439: return 0;
 17929  002C74  0E00               	movlw	0
 17930  002C76  6E2B               	movwf	?_inputHandler+1,c
 17931  002C78  0E00               	movlw	0
 17932  002C7A  6E2A               	movwf	?_inputHandler,c
 17933  002C7C  0012               	return	
 17934  002C7E                     i2l6482:
 17935                           
 17936                           ;UI.c: 441: if(cur_state == 23){
 17937  002C7E  0E17               	movlw	23
 17938  002C80  0100               	movlb	0	; () banked
 17939  002C82  19E2               	xorwf	_cur_state& (0+255),w,b
 17940  002C84  0100               	movlb	0	; () banked
 17941  002C86  11E3               	iorwf	(_cur_state+1)& (0+255),w,b
 17942  002C88  A4D8               	btfss	status,2,c
 17943  002C8A  D005               	goto	i2l6490
 17944                           
 17945                           ; BSR set to: 0
 17946                           ;UI.c: 442: return 0;
 17947  002C8C  0E00               	movlw	0
 17948  002C8E  6E2B               	movwf	?_inputHandler+1,c
 17949  002C90  0E00               	movlw	0
 17950  002C92  6E2A               	movwf	?_inputHandler,c
 17951                           
 17952                           ; BSR set to: 0
 17953  002C94  0012               	return	
 17954  002C96                     i2l6490:
 17955                           
 17956                           ; BSR set to: 0
 17957                           ;UI.c: 444: else{
 17958                           ;UI.c: 445: change_state_to_menu_23();
 17959  002C96  ECE0  F022         	call	_change_state_to_menu_23	;wreg free
 17960                           
 17961                           ;UI.c: 446: }
 17962                           ;UI.c: 447: return 0;
 17963  002C9A  0E00               	movlw	0
 17964  002C9C  6E2B               	movwf	?_inputHandler+1,c
 17965  002C9E  0E00               	movlw	0
 17966  002CA0  6E2A               	movwf	?_inputHandler,c
 17967  002CA2  0012               	return	
 17968  002CA4                     i2l6496:
 17969                           
 17970                           ;UI.c: 450: up = 1;
 17971  002CA4  0E00               	movlw	0
 17972  002CA6  6E78               	movwf	_up+1,c
 17973  002CA8  0E01               	movlw	1
 17974  002CAA  6E77               	movwf	_up,c
 17975                           
 17976                           ;UI.c: 451: return 1;
 17977  002CAC  0E00               	movlw	0
 17978  002CAE  6E2B               	movwf	?_inputHandler+1,c
 17979  002CB0  0E01               	movlw	1
 17980  002CB2  6E2A               	movwf	?_inputHandler,c
 17981  002CB4  0012               	return	
 17982  002CB6                     i2l6500:
 17983                           
 17984                           ;UI.c: 453: down = 1;
 17985  002CB6  0E00               	movlw	0
 17986  002CB8  6E68               	movwf	_down+1,c
 17987  002CBA  0E01               	movlw	1
 17988  002CBC  6E67               	movwf	_down,c
 17989                           
 17990                           ;UI.c: 454: return 1;
 17991  002CBE  0E00               	movlw	0
 17992  002CC0  6E2B               	movwf	?_inputHandler+1,c
 17993  002CC2  0E01               	movlw	1
 17994  002CC4  6E2A               	movwf	?_inputHandler,c
 17995  002CC6  0012               	return	
 17996  002CC8                     i2l6504:
 17997                           
 17998                           ;UI.c: 456: enter = 1;
 17999  002CC8  0E00               	movlw	0
 18000  002CCA  6E6A               	movwf	_enter+1,c
 18001  002CCC  0E01               	movlw	1
 18002  002CCE  6E69               	movwf	_enter,c
 18003                           
 18004                           ;UI.c: 457: return 1;
 18005  002CD0  0E00               	movlw	0
 18006  002CD2  6E2B               	movwf	?_inputHandler+1,c
 18007  002CD4  0E01               	movlw	1
 18008  002CD6  6E2A               	movwf	?_inputHandler,c
 18009  002CD8  0012               	return	
 18010  002CDA                     i2l6508:
 18011                           
 18012                           ;UI.c: 459: back = 1;
 18013  002CDA  0E00               	movlw	0
 18014  002CDC  6E5C               	movwf	_back+1,c
 18015  002CDE  0E01               	movlw	1
 18016  002CE0  6E5B               	movwf	_back,c
 18017                           
 18018                           ;UI.c: 460: return 1;
 18019  002CE2  0E00               	movlw	0
 18020  002CE4  6E2B               	movwf	?_inputHandler+1,c
 18021  002CE6  0E01               	movlw	1
 18022  002CE8  6E2A               	movwf	?_inputHandler,c
 18023  002CEA  0012               	return	
 18024  002CEC                     i2l6512:
 18025                           
 18026                           ;UI.c: 463: return 1;
 18027  002CEC  0E00               	movlw	0
 18028  002CEE  6E2B               	movwf	?_inputHandler+1,c
 18029  002CF0  0E01               	movlw	1
 18030  002CF2  6E2A               	movwf	?_inputHandler,c
 18031                           
 18032                           ;UI.c: 464: }
 18033  002CF4  0012               	return	
 18034  002CF6                     i2l6518:
 18035  002CF6  507D               	movf	_input,w,c	;volatile
 18036                           
 18037                           ; Switch size 1, requested type "space"
 18038                           ; Number of cases is 7, Range of values is 49 to 68
 18039                           ; switch strategies available:
 18040                           ; Name         Instructions Cycles
 18041                           ; simple_byte           22    12 (average)
 18042                           ;	Chosen strategy is simple_byte
 18043  002CF8  0A31               	xorlw	49	; case 49
 18044  002CFA  B4D8               	btfsc	status,2,c
 18045  002CFC  D789               	goto	i2l6448
 18046  002CFE  0A03               	xorlw	3	; case 50
 18047  002D00  B4D8               	btfsc	status,2,c
 18048  002D02  D799               	goto	i2l6462
 18049  002D04  0A01               	xorlw	1	; case 51
 18050  002D06  B4D8               	btfsc	status,2,c
 18051  002D08  D7BA               	goto	i2l6482
 18052  002D0A  0A72               	xorlw	114	; case 65
 18053  002D0C  B4D8               	btfsc	status,2,c
 18054  002D0E  D7CA               	goto	i2l6496
 18055  002D10  0A03               	xorlw	3	; case 66
 18056  002D12  B4D8               	btfsc	status,2,c
 18057  002D14  D7D0               	goto	i2l6500
 18058  002D16  0A01               	xorlw	1	; case 67
 18059  002D18  B4D8               	btfsc	status,2,c
 18060  002D1A  D7D6               	goto	i2l6504
 18061  002D1C  0A07               	xorlw	7	; case 68
 18062  002D1E  B4D8               	btfsc	status,2,c
 18063  002D20  D7DC               	goto	i2l6508
 18064  002D22  D7E4               	goto	i2l6512
 18065  002D24                     __end_of_inputHandler:
 18066                           	opt stack 0
 18067                           pclatu	equ	0xFFB
 18068                           pclath	equ	0xFFA
 18069                           tblptru	equ	0xFF8
 18070                           tblptrh	equ	0xFF7
 18071                           tblptrl	equ	0xFF6
 18072                           tablat	equ	0xFF5
 18073                           prodh	equ	0xFF4
 18074                           prodl	equ	0xFF3
 18075                           intcon	equ	0xFF2
 18076                           intcon2	equ	0xFF1
 18077                           intcon3	equ	0xFF0
 18078                           indf0	equ	0xFEF
 18079                           postinc0	equ	0xFEE
 18080                           fsr0h	equ	0xFEA
 18081                           fsr0l	equ	0xFE9
 18082                           wreg	equ	0xFE8
 18083                           postdec1	equ	0xFE5
 18084                           fsr1h	equ	0xFE2
 18085                           fsr1l	equ	0xFE1
 18086                           indf2	equ	0xFDF
 18087                           postinc2	equ	0xFDE
 18088                           postdec2	equ	0xFDD
 18089                           fsr2h	equ	0xFDA
 18090                           fsr2l	equ	0xFD9
 18091                           status	equ	0xFD8
 18092                           
 18093 ;; *************** function i2_change_state_to_menu_22 *****************
 18094 ;; Defined at:
 18095 ;;		line 498 in file "UI.c"
 18096 ;; Parameters:    Size  Location     Type
 18097 ;;		None
 18098 ;; Auto vars:     Size  Location     Type
 18099 ;;		None
 18100 ;; Return value:  Size  Location     Type
 18101 ;;                  1    wreg      void 
 18102 ;; Registers used:
 18103 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18104 ;; Tracked objects:
 18105 ;;		On entry : 0/0
 18106 ;;		On exit  : 0/0
 18107 ;;		Unchanged: 0/0
 18108 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18109 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18110 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18111 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18112 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18113 ;;Total ram usage:        0 bytes
 18114 ;; Hardware stack levels used:    1
 18115 ;; Hardware stack levels required when called:    3
 18116 ;; This function calls:
 18117 ;;		i2_lcdInst
 18118 ;;		i2_printf
 18119 ;; This function is called by:
 18120 ;;		_updateMenu
 18121 ;;		_inputHandler
 18122 ;; This function uses a non-reentrant model
 18123 ;;
 18124                           
 18125                           	psect	text65
 18126  004560                     __ptext65:
 18127                           	opt stack 0
 18128  004560                     i2_change_state_to_menu_22:
 18129                           	opt stack 19
 18130                           
 18131                           ;UI.c: 499: cur_state = 22;
 18132                           
 18133                           ;incstack = 0
 18134  004560  0E00               	movlw	0
 18135  004562  0100               	movlb	0	; () banked
 18136  004564  6FE3               	movwf	(_cur_state+1)& (0+255),b
 18137  004566  0E16               	movlw	22
 18138  004568  6FE2               	movwf	_cur_state& (0+255),b
 18139                           
 18140                           ; BSR set to: 0
 18141                           ;UI.c: 501: lcdInst(0b10000000);;
 18142  00456A  0E80               	movlw	128
 18143  00456C  ECEA  F024         	call	i2_lcdInst
 18144                           
 18145                           ;UI.c: 502: printf("2. SORT        <");
 18146  004570  0EC4               	movlw	low STR_34
 18147  004572  6E0D               	movwf	i2printf@f,c
 18148  004574  0EFD               	movlw	high STR_34
 18149  004576  6E0E               	movwf	i2printf@f+1,c
 18150  004578  EC96  F00C         	call	i2_printf	;wreg free
 18151                           
 18152                           ;UI.c: 503: lcdInst(0b11000000);;
 18153  00457C  0EC0               	movlw	192
 18154  00457E  ECEA  F024         	call	i2_lcdInst
 18155                           
 18156                           ;UI.c: 504: printf("3. LOGS         ");
 18157  004582  0E09               	movlw	low STR_36
 18158  004584  6E0D               	movwf	i2printf@f,c
 18159  004586  0EFD               	movlw	high STR_36
 18160  004588  6E0E               	movwf	i2printf@f+1,c
 18161  00458A  EC96  F00C         	call	i2_printf	;wreg free
 18162  00458E  0012               	return		;funcret
 18163  004590                     __end_ofi2_change_state_to_menu_22:
 18164                           	opt stack 0
 18165                           pclatu	equ	0xFFB
 18166                           pclath	equ	0xFFA
 18167                           tblptru	equ	0xFF8
 18168                           tblptrh	equ	0xFF7
 18169                           tblptrl	equ	0xFF6
 18170                           tablat	equ	0xFF5
 18171                           prodh	equ	0xFF4
 18172                           prodl	equ	0xFF3
 18173                           intcon	equ	0xFF2
 18174                           intcon2	equ	0xFF1
 18175                           intcon3	equ	0xFF0
 18176                           indf0	equ	0xFEF
 18177                           postinc0	equ	0xFEE
 18178                           fsr0h	equ	0xFEA
 18179                           fsr0l	equ	0xFE9
 18180                           wreg	equ	0xFE8
 18181                           postdec1	equ	0xFE5
 18182                           fsr1h	equ	0xFE2
 18183                           fsr1l	equ	0xFE1
 18184                           indf2	equ	0xFDF
 18185                           postinc2	equ	0xFDE
 18186                           postdec2	equ	0xFDD
 18187                           fsr2h	equ	0xFDA
 18188                           fsr2l	equ	0xFD9
 18189                           status	equ	0xFD8
 18190                           
 18191 ;; *************** function i2_change_state_to_menu_12 *****************
 18192 ;; Defined at:
 18193 ;;		line 490 in file "UI.c"
 18194 ;; Parameters:    Size  Location     Type
 18195 ;;		None
 18196 ;; Auto vars:     Size  Location     Type
 18197 ;;		None
 18198 ;; Return value:  Size  Location     Type
 18199 ;;                  1    wreg      void 
 18200 ;; Registers used:
 18201 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18202 ;; Tracked objects:
 18203 ;;		On entry : 0/0
 18204 ;;		On exit  : 0/0
 18205 ;;		Unchanged: 0/0
 18206 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18207 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18208 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18209 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18210 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18211 ;;Total ram usage:        0 bytes
 18212 ;; Hardware stack levels used:    1
 18213 ;; Hardware stack levels required when called:    3
 18214 ;; This function calls:
 18215 ;;		i2_lcdInst
 18216 ;;		i2_printf
 18217 ;; This function is called by:
 18218 ;;		_updateMenu
 18219 ;;		_inputHandler
 18220 ;; This function uses a non-reentrant model
 18221 ;;
 18222                           
 18223                           	psect	text66
 18224  004590                     __ptext66:
 18225                           	opt stack 0
 18226  004590                     i2_change_state_to_menu_12:
 18227                           	opt stack 19
 18228                           
 18229                           ;UI.c: 491: cur_state = 12;
 18230                           
 18231                           ;incstack = 0
 18232  004590  0E00               	movlw	0
 18233  004592  0100               	movlb	0	; () banked
 18234  004594  6FE3               	movwf	(_cur_state+1)& (0+255),b
 18235  004596  0E0C               	movlw	12
 18236  004598  6FE2               	movwf	_cur_state& (0+255),b
 18237                           
 18238                           ; BSR set to: 0
 18239                           ;UI.c: 493: lcdInst(0b10000000);;
 18240  00459A  0E80               	movlw	128
 18241  00459C  ECEA  F024         	call	i2_lcdInst
 18242                           
 18243                           ;UI.c: 494: printf("1. DATE/TIME    ");
 18244  0045A0  0E2B               	movlw	low STR_33
 18245  0045A2  6E0D               	movwf	i2printf@f,c
 18246  0045A4  0EFD               	movlw	high STR_33
 18247  0045A6  6E0E               	movwf	i2printf@f+1,c
 18248  0045A8  EC96  F00C         	call	i2_printf	;wreg free
 18249                           
 18250                           ;UI.c: 495: lcdInst(0b11000000);;
 18251  0045AC  0EC0               	movlw	192
 18252  0045AE  ECEA  F024         	call	i2_lcdInst
 18253                           
 18254                           ;UI.c: 496: printf("2. SORT        <");
 18255  0045B2  0EC4               	movlw	low STR_34
 18256  0045B4  6E0D               	movwf	i2printf@f,c
 18257  0045B6  0EFD               	movlw	high STR_34
 18258  0045B8  6E0E               	movwf	i2printf@f+1,c
 18259  0045BA  EC96  F00C         	call	i2_printf	;wreg free
 18260  0045BE  0012               	return		;funcret
 18261  0045C0                     __end_ofi2_change_state_to_menu_12:
 18262                           	opt stack 0
 18263                           pclatu	equ	0xFFB
 18264                           pclath	equ	0xFFA
 18265                           tblptru	equ	0xFF8
 18266                           tblptrh	equ	0xFF7
 18267                           tblptrl	equ	0xFF6
 18268                           tablat	equ	0xFF5
 18269                           prodh	equ	0xFF4
 18270                           prodl	equ	0xFF3
 18271                           intcon	equ	0xFF2
 18272                           intcon2	equ	0xFF1
 18273                           intcon3	equ	0xFF0
 18274                           indf0	equ	0xFEF
 18275                           postinc0	equ	0xFEE
 18276                           fsr0h	equ	0xFEA
 18277                           fsr0l	equ	0xFE9
 18278                           wreg	equ	0xFE8
 18279                           postdec1	equ	0xFE5
 18280                           fsr1h	equ	0xFE2
 18281                           fsr1l	equ	0xFE1
 18282                           indf2	equ	0xFDF
 18283                           postinc2	equ	0xFDE
 18284                           postdec2	equ	0xFDD
 18285                           fsr2h	equ	0xFDA
 18286                           fsr2l	equ	0xFD9
 18287                           status	equ	0xFD8
 18288                           
 18289 ;; *************** function _change_state_to_menu_23 *****************
 18290 ;; Defined at:
 18291 ;;		line 506 in file "UI.c"
 18292 ;; Parameters:    Size  Location     Type
 18293 ;;		None
 18294 ;; Auto vars:     Size  Location     Type
 18295 ;;		None
 18296 ;; Return value:  Size  Location     Type
 18297 ;;                  1    wreg      void 
 18298 ;; Registers used:
 18299 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18300 ;; Tracked objects:
 18301 ;;		On entry : 0/0
 18302 ;;		On exit  : 0/0
 18303 ;;		Unchanged: 0/0
 18304 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18305 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18306 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18307 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18308 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18309 ;;Total ram usage:        0 bytes
 18310 ;; Hardware stack levels used:    1
 18311 ;; Hardware stack levels required when called:    3
 18312 ;; This function calls:
 18313 ;;		i2_lcdInst
 18314 ;;		i2_printf
 18315 ;; This function is called by:
 18316 ;;		_updateMenu
 18317 ;;		_inputHandler
 18318 ;; This function uses a non-reentrant model
 18319 ;;
 18320                           
 18321                           	psect	text67
 18322  0045C0                     __ptext67:
 18323                           	opt stack 0
 18324  0045C0                     _change_state_to_menu_23:
 18325                           	opt stack 18
 18326                           
 18327                           ;UI.c: 507: cur_state = 23;
 18328                           
 18329                           ;incstack = 0
 18330  0045C0  0E00               	movlw	0
 18331  0045C2  0100               	movlb	0	; () banked
 18332  0045C4  6FE3               	movwf	(_cur_state+1)& (0+255),b
 18333  0045C6  0E17               	movlw	23
 18334  0045C8  6FE2               	movwf	_cur_state& (0+255),b
 18335                           
 18336                           ; BSR set to: 0
 18337                           ;UI.c: 509: lcdInst(0b10000000);;
 18338  0045CA  0E80               	movlw	128
 18339  0045CC  ECEA  F024         	call	i2_lcdInst
 18340                           
 18341                           ;UI.c: 510: printf("2. SORT         ");
 18342  0045D0  0E1A               	movlw	low STR_32
 18343  0045D2  6E0D               	movwf	i2printf@f,c
 18344  0045D4  0EFD               	movlw	high STR_32
 18345  0045D6  6E0E               	movwf	i2printf@f+1,c
 18346  0045D8  EC96  F00C         	call	i2_printf	;wreg free
 18347                           
 18348                           ;UI.c: 511: lcdInst(0b11000000);;
 18349  0045DC  0EC0               	movlw	192
 18350  0045DE  ECEA  F024         	call	i2_lcdInst
 18351                           
 18352                           ;UI.c: 512: printf("3. LOGS        <");
 18353  0045E2  0EB3               	movlw	low STR_38
 18354  0045E4  6E0D               	movwf	i2printf@f,c
 18355  0045E6  0EFD               	movlw	high STR_38
 18356  0045E8  6E0E               	movwf	i2printf@f+1,c
 18357  0045EA  EC96  F00C         	call	i2_printf	;wreg free
 18358  0045EE  0012               	return		;funcret
 18359  0045F0                     __end_of_change_state_to_menu_23:
 18360                           	opt stack 0
 18361                           pclatu	equ	0xFFB
 18362                           pclath	equ	0xFFA
 18363                           tblptru	equ	0xFF8
 18364                           tblptrh	equ	0xFF7
 18365                           tblptrl	equ	0xFF6
 18366                           tablat	equ	0xFF5
 18367                           prodh	equ	0xFF4
 18368                           prodl	equ	0xFF3
 18369                           intcon	equ	0xFF2
 18370                           intcon2	equ	0xFF1
 18371                           intcon3	equ	0xFF0
 18372                           indf0	equ	0xFEF
 18373                           postinc0	equ	0xFEE
 18374                           fsr0h	equ	0xFEA
 18375                           fsr0l	equ	0xFE9
 18376                           wreg	equ	0xFE8
 18377                           postdec1	equ	0xFE5
 18378                           fsr1h	equ	0xFE2
 18379                           fsr1l	equ	0xFE1
 18380                           indf2	equ	0xFDF
 18381                           postinc2	equ	0xFDE
 18382                           postdec2	equ	0xFDD
 18383                           fsr2h	equ	0xFDA
 18384                           fsr2l	equ	0xFD9
 18385                           status	equ	0xFD8
 18386                           
 18387 ;; *************** function _change_state_to_menu_11 *****************
 18388 ;; Defined at:
 18389 ;;		line 482 in file "UI.c"
 18390 ;; Parameters:    Size  Location     Type
 18391 ;;		None
 18392 ;; Auto vars:     Size  Location     Type
 18393 ;;		None
 18394 ;; Return value:  Size  Location     Type
 18395 ;;                  1    wreg      void 
 18396 ;; Registers used:
 18397 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18398 ;; Tracked objects:
 18399 ;;		On entry : 0/0
 18400 ;;		On exit  : 0/0
 18401 ;;		Unchanged: 0/0
 18402 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18403 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18404 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18405 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18406 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18407 ;;Total ram usage:        0 bytes
 18408 ;; Hardware stack levels used:    1
 18409 ;; Hardware stack levels required when called:    3
 18410 ;; This function calls:
 18411 ;;		i2_lcdInst
 18412 ;;		i2_printf
 18413 ;; This function is called by:
 18414 ;;		_updateMenu
 18415 ;;		_inputHandler
 18416 ;; This function uses a non-reentrant model
 18417 ;;
 18418                           
 18419                           	psect	text68
 18420  0045F0                     __ptext68:
 18421                           	opt stack 0
 18422  0045F0                     _change_state_to_menu_11:
 18423                           	opt stack 18
 18424                           
 18425                           ;UI.c: 483: cur_state = 11;
 18426                           
 18427                           ;incstack = 0
 18428  0045F0  0E00               	movlw	0
 18429  0045F2  0100               	movlb	0	; () banked
 18430  0045F4  6FE3               	movwf	(_cur_state+1)& (0+255),b
 18431  0045F6  0E0B               	movlw	11
 18432  0045F8  6FE2               	movwf	_cur_state& (0+255),b
 18433                           
 18434                           ; BSR set to: 0
 18435                           ;UI.c: 485: lcdInst(0b10000000);;
 18436  0045FA  0E80               	movlw	128
 18437  0045FC  ECEA  F024         	call	i2_lcdInst
 18438                           
 18439                           ;UI.c: 486: printf("1. DATE/TIME   <");
 18440  004600  0ED5               	movlw	low STR_31
 18441  004602  6E0D               	movwf	i2printf@f,c
 18442  004604  0EFD               	movlw	high STR_31
 18443  004606  6E0E               	movwf	i2printf@f+1,c
 18444  004608  EC96  F00C         	call	i2_printf	;wreg free
 18445                           
 18446                           ;UI.c: 487: lcdInst(0b11000000);;
 18447  00460C  0EC0               	movlw	192
 18448  00460E  ECEA  F024         	call	i2_lcdInst
 18449                           
 18450                           ;UI.c: 488: printf("2. SORT         ");
 18451  004612  0E1A               	movlw	low STR_32
 18452  004614  6E0D               	movwf	i2printf@f,c
 18453  004616  0EFD               	movlw	high STR_32
 18454  004618  6E0E               	movwf	i2printf@f+1,c
 18455  00461A  EC96  F00C         	call	i2_printf	;wreg free
 18456  00461E  0012               	return		;funcret
 18457  004620                     __end_of_change_state_to_menu_11:
 18458                           	opt stack 0
 18459                           pclatu	equ	0xFFB
 18460                           pclath	equ	0xFFA
 18461                           tblptru	equ	0xFF8
 18462                           tblptrh	equ	0xFF7
 18463                           tblptrl	equ	0xFF6
 18464                           tablat	equ	0xFF5
 18465                           prodh	equ	0xFF4
 18466                           prodl	equ	0xFF3
 18467                           intcon	equ	0xFF2
 18468                           intcon2	equ	0xFF1
 18469                           intcon3	equ	0xFF0
 18470                           indf0	equ	0xFEF
 18471                           postinc0	equ	0xFEE
 18472                           fsr0h	equ	0xFEA
 18473                           fsr0l	equ	0xFE9
 18474                           wreg	equ	0xFE8
 18475                           postdec1	equ	0xFE5
 18476                           fsr1h	equ	0xFE2
 18477                           fsr1l	equ	0xFE1
 18478                           indf2	equ	0xFDF
 18479                           postinc2	equ	0xFDE
 18480                           postdec2	equ	0xFDD
 18481                           fsr2h	equ	0xFDA
 18482                           fsr2l	equ	0xFD9
 18483                           status	equ	0xFD8
 18484                           
 18485 ;; *************** function _change_state_to_logs_34 *****************
 18486 ;; Defined at:
 18487 ;;		line 549 in file "UI.c"
 18488 ;; Parameters:    Size  Location     Type
 18489 ;;		None
 18490 ;; Auto vars:     Size  Location     Type
 18491 ;;		None
 18492 ;; Return value:  Size  Location     Type
 18493 ;;                  1    wreg      void 
 18494 ;; Registers used:
 18495 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18496 ;; Tracked objects:
 18497 ;;		On entry : 0/0
 18498 ;;		On exit  : 0/0
 18499 ;;		Unchanged: 0/0
 18500 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18501 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18502 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18503 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18504 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18505 ;;Total ram usage:        0 bytes
 18506 ;; Hardware stack levels used:    1
 18507 ;; Hardware stack levels required when called:    3
 18508 ;; This function calls:
 18509 ;;		i2_lcdInst
 18510 ;;		i2_printf
 18511 ;; This function is called by:
 18512 ;;		_updateMenu
 18513 ;;		_inputHandler
 18514 ;; This function uses a non-reentrant model
 18515 ;;
 18516                           
 18517                           	psect	text69
 18518  004620                     __ptext69:
 18519                           	opt stack 0
 18520  004620                     _change_state_to_logs_34:
 18521                           	opt stack 18
 18522                           
 18523                           ;UI.c: 550: cur_state = 1034;
 18524                           
 18525                           ;incstack = 0
 18526  004620  0E04               	movlw	4
 18527  004622  0100               	movlb	0	; () banked
 18528  004624  6FE3               	movwf	(_cur_state+1)& (0+255),b
 18529  004626  0E0A               	movlw	10
 18530  004628  6FE2               	movwf	_cur_state& (0+255),b
 18531                           
 18532                           ; BSR set to: 0
 18533                           ;UI.c: 551: lcdInst(0b10000000);;
 18534  00462A  0E80               	movlw	128
 18535  00462C  ECEA  F024         	call	i2_lcdInst
 18536                           
 18537                           ;UI.c: 552: printf("LOG 3           ");
 18538  004630  0EE7               	movlw	low STR_44
 18539  004632  6E0D               	movwf	i2printf@f,c
 18540  004634  0EFC               	movlw	high STR_44
 18541  004636  6E0E               	movwf	i2printf@f+1,c
 18542  004638  EC96  F00C         	call	i2_printf	;wreg free
 18543                           
 18544                           ;UI.c: 553: lcdInst(0b11000000);;
 18545  00463C  0EC0               	movlw	192
 18546  00463E  ECEA  F024         	call	i2_lcdInst
 18547                           
 18548                           ;UI.c: 554: printf("LOG 4          <");
 18549  004642  0EA2               	movlw	low STR_50
 18550  004644  6E0D               	movwf	i2printf@f,c
 18551  004646  0EFD               	movlw	high STR_50
 18552  004648  6E0E               	movwf	i2printf@f+1,c
 18553  00464A  EC96  F00C         	call	i2_printf	;wreg free
 18554  00464E  0012               	return		;funcret
 18555  004650                     __end_of_change_state_to_logs_34:
 18556                           	opt stack 0
 18557                           pclatu	equ	0xFFB
 18558                           pclath	equ	0xFFA
 18559                           tblptru	equ	0xFF8
 18560                           tblptrh	equ	0xFF7
 18561                           tblptrl	equ	0xFF6
 18562                           tablat	equ	0xFF5
 18563                           prodh	equ	0xFF4
 18564                           prodl	equ	0xFF3
 18565                           intcon	equ	0xFF2
 18566                           intcon2	equ	0xFF1
 18567                           intcon3	equ	0xFF0
 18568                           indf0	equ	0xFEF
 18569                           postinc0	equ	0xFEE
 18570                           fsr0h	equ	0xFEA
 18571                           fsr0l	equ	0xFE9
 18572                           wreg	equ	0xFE8
 18573                           postdec1	equ	0xFE5
 18574                           fsr1h	equ	0xFE2
 18575                           fsr1l	equ	0xFE1
 18576                           indf2	equ	0xFDF
 18577                           postinc2	equ	0xFDE
 18578                           postdec2	equ	0xFDD
 18579                           fsr2h	equ	0xFDA
 18580                           fsr2l	equ	0xFD9
 18581                           status	equ	0xFD8
 18582                           
 18583 ;; *************** function _change_state_to_logs_33 *****************
 18584 ;; Defined at:
 18585 ;;		line 542 in file "UI.c"
 18586 ;; Parameters:    Size  Location     Type
 18587 ;;		None
 18588 ;; Auto vars:     Size  Location     Type
 18589 ;;		None
 18590 ;; Return value:  Size  Location     Type
 18591 ;;                  1    wreg      void 
 18592 ;; Registers used:
 18593 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18594 ;; Tracked objects:
 18595 ;;		On entry : 0/0
 18596 ;;		On exit  : 0/0
 18597 ;;		Unchanged: 0/0
 18598 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18599 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18600 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18601 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18602 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18603 ;;Total ram usage:        0 bytes
 18604 ;; Hardware stack levels used:    1
 18605 ;; Hardware stack levels required when called:    3
 18606 ;; This function calls:
 18607 ;;		i2_lcdInst
 18608 ;;		i2_printf
 18609 ;; This function is called by:
 18610 ;;		_updateMenu
 18611 ;;		_inputHandler
 18612 ;; This function uses a non-reentrant model
 18613 ;;
 18614                           
 18615                           	psect	text70
 18616  004650                     __ptext70:
 18617                           	opt stack 0
 18618  004650                     _change_state_to_logs_33:
 18619                           	opt stack 18
 18620                           
 18621                           ;UI.c: 543: cur_state = 1033;
 18622                           
 18623                           ;incstack = 0
 18624  004650  0E04               	movlw	4
 18625  004652  0100               	movlb	0	; () banked
 18626  004654  6FE3               	movwf	(_cur_state+1)& (0+255),b
 18627  004656  0E09               	movlw	9
 18628  004658  6FE2               	movwf	_cur_state& (0+255),b
 18629                           
 18630                           ; BSR set to: 0
 18631                           ;UI.c: 544: lcdInst(0b10000000);;
 18632  00465A  0E80               	movlw	128
 18633  00465C  ECEA  F024         	call	i2_lcdInst
 18634                           
 18635                           ;UI.c: 545: printf("LOG 3          <");
 18636  004660  0E91               	movlw	low STR_46
 18637  004662  6E0D               	movwf	i2printf@f,c
 18638  004664  0EFD               	movlw	high STR_46
 18639  004666  6E0E               	movwf	i2printf@f+1,c
 18640  004668  EC96  F00C         	call	i2_printf	;wreg free
 18641                           
 18642                           ;UI.c: 546: lcdInst(0b11000000);;
 18643  00466C  0EC0               	movlw	192
 18644  00466E  ECEA  F024         	call	i2_lcdInst
 18645                           
 18646                           ;UI.c: 547: printf("LOG 4           ");
 18647  004672  0EF8               	movlw	low STR_48
 18648  004674  6E0D               	movwf	i2printf@f,c
 18649  004676  0EFC               	movlw	high STR_48
 18650  004678  6E0E               	movwf	i2printf@f+1,c
 18651  00467A  EC96  F00C         	call	i2_printf	;wreg free
 18652  00467E  0012               	return		;funcret
 18653  004680                     __end_of_change_state_to_logs_33:
 18654                           	opt stack 0
 18655                           pclatu	equ	0xFFB
 18656                           pclath	equ	0xFFA
 18657                           tblptru	equ	0xFF8
 18658                           tblptrh	equ	0xFF7
 18659                           tblptrl	equ	0xFF6
 18660                           tablat	equ	0xFF5
 18661                           prodh	equ	0xFF4
 18662                           prodl	equ	0xFF3
 18663                           intcon	equ	0xFF2
 18664                           intcon2	equ	0xFF1
 18665                           intcon3	equ	0xFF0
 18666                           indf0	equ	0xFEF
 18667                           postinc0	equ	0xFEE
 18668                           fsr0h	equ	0xFEA
 18669                           fsr0l	equ	0xFE9
 18670                           wreg	equ	0xFE8
 18671                           postdec1	equ	0xFE5
 18672                           fsr1h	equ	0xFE2
 18673                           fsr1l	equ	0xFE1
 18674                           indf2	equ	0xFDF
 18675                           postinc2	equ	0xFDE
 18676                           postdec2	equ	0xFDD
 18677                           fsr2h	equ	0xFDA
 18678                           fsr2l	equ	0xFD9
 18679                           status	equ	0xFD8
 18680                           
 18681 ;; *************** function _change_state_to_logs_23 *****************
 18682 ;; Defined at:
 18683 ;;		line 535 in file "UI.c"
 18684 ;; Parameters:    Size  Location     Type
 18685 ;;		None
 18686 ;; Auto vars:     Size  Location     Type
 18687 ;;		None
 18688 ;; Return value:  Size  Location     Type
 18689 ;;                  1    wreg      void 
 18690 ;; Registers used:
 18691 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18692 ;; Tracked objects:
 18693 ;;		On entry : 0/0
 18694 ;;		On exit  : 0/0
 18695 ;;		Unchanged: 0/0
 18696 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18697 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18698 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18699 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18700 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18701 ;;Total ram usage:        0 bytes
 18702 ;; Hardware stack levels used:    1
 18703 ;; Hardware stack levels required when called:    3
 18704 ;; This function calls:
 18705 ;;		i2_lcdInst
 18706 ;;		i2_printf
 18707 ;; This function is called by:
 18708 ;;		_updateMenu
 18709 ;;		_inputHandler
 18710 ;; This function uses a non-reentrant model
 18711 ;;
 18712                           
 18713                           	psect	text71
 18714  00476C                     __ptext71:
 18715                           	opt stack 0
 18716  00476C                     _change_state_to_logs_23:
 18717                           	opt stack 18
 18718                           
 18719                           ;UI.c: 536: cur_state = 1023;
 18720                           
 18721                           ;incstack = 0
 18722  00476C  0E03               	movlw	3
 18723  00476E  0100               	movlb	0	; () banked
 18724  004770  6FE3               	movwf	(_cur_state+1)& (0+255),b
 18725  004772  69E2               	setf	_cur_state& (0+255),b
 18726                           
 18727                           ; BSR set to: 0
 18728                           ;UI.c: 537: lcdInst(0b10000000);;
 18729  004774  0E80               	movlw	128
 18730  004776  ECEA  F024         	call	i2_lcdInst
 18731                           
 18732                           ;UI.c: 538: printf("LOG 2           ");
 18733  00477A  0ED6               	movlw	low STR_40
 18734  00477C  6E0D               	movwf	i2printf@f,c
 18735  00477E  0EFC               	movlw	high STR_40
 18736  004780  6E0E               	movwf	i2printf@f+1,c
 18737  004782  EC96  F00C         	call	i2_printf	;wreg free
 18738                           
 18739                           ;UI.c: 539: lcdInst(0b11000000);;
 18740  004786  0EC0               	movlw	192
 18741  004788  ECEA  F024         	call	i2_lcdInst
 18742                           
 18743                           ;UI.c: 540: printf("LOG 3          <");
 18744  00478C  0E91               	movlw	low STR_46
 18745  00478E  6E0D               	movwf	i2printf@f,c
 18746  004790  0EFD               	movlw	high STR_46
 18747  004792  6E0E               	movwf	i2printf@f+1,c
 18748  004794  EC96  F00C         	call	i2_printf	;wreg free
 18749  004798  0012               	return		;funcret
 18750  00479A                     __end_of_change_state_to_logs_23:
 18751                           	opt stack 0
 18752                           pclatu	equ	0xFFB
 18753                           pclath	equ	0xFFA
 18754                           tblptru	equ	0xFF8
 18755                           tblptrh	equ	0xFF7
 18756                           tblptrl	equ	0xFF6
 18757                           tablat	equ	0xFF5
 18758                           prodh	equ	0xFF4
 18759                           prodl	equ	0xFF3
 18760                           intcon	equ	0xFF2
 18761                           intcon2	equ	0xFF1
 18762                           intcon3	equ	0xFF0
 18763                           indf0	equ	0xFEF
 18764                           postinc0	equ	0xFEE
 18765                           fsr0h	equ	0xFEA
 18766                           fsr0l	equ	0xFE9
 18767                           wreg	equ	0xFE8
 18768                           postdec1	equ	0xFE5
 18769                           fsr1h	equ	0xFE2
 18770                           fsr1l	equ	0xFE1
 18771                           indf2	equ	0xFDF
 18772                           postinc2	equ	0xFDE
 18773                           postdec2	equ	0xFDD
 18774                           fsr2h	equ	0xFDA
 18775                           fsr2l	equ	0xFD9
 18776                           status	equ	0xFD8
 18777                           
 18778 ;; *************** function _change_state_to_logs_22 *****************
 18779 ;; Defined at:
 18780 ;;		line 528 in file "UI.c"
 18781 ;; Parameters:    Size  Location     Type
 18782 ;;		None
 18783 ;; Auto vars:     Size  Location     Type
 18784 ;;		None
 18785 ;; Return value:  Size  Location     Type
 18786 ;;                  1    wreg      void 
 18787 ;; Registers used:
 18788 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18789 ;; Tracked objects:
 18790 ;;		On entry : 0/0
 18791 ;;		On exit  : 0/0
 18792 ;;		Unchanged: 0/0
 18793 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18794 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18795 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18796 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18797 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18798 ;;Total ram usage:        0 bytes
 18799 ;; Hardware stack levels used:    1
 18800 ;; Hardware stack levels required when called:    3
 18801 ;; This function calls:
 18802 ;;		i2_lcdInst
 18803 ;;		i2_printf
 18804 ;; This function is called by:
 18805 ;;		_updateMenu
 18806 ;;		_inputHandler
 18807 ;; This function uses a non-reentrant model
 18808 ;;
 18809                           
 18810                           	psect	text72
 18811  004680                     __ptext72:
 18812                           	opt stack 0
 18813  004680                     _change_state_to_logs_22:
 18814                           	opt stack 18
 18815                           
 18816                           ;UI.c: 529: cur_state = 1022;
 18817                           
 18818                           ;incstack = 0
 18819  004680  0E03               	movlw	3
 18820  004682  0100               	movlb	0	; () banked
 18821  004684  6FE3               	movwf	(_cur_state+1)& (0+255),b
 18822  004686  0EFE               	movlw	254
 18823  004688  6FE2               	movwf	_cur_state& (0+255),b
 18824                           
 18825                           ; BSR set to: 0
 18826                           ;UI.c: 530: lcdInst(0b10000000);;
 18827  00468A  0E80               	movlw	128
 18828  00468C  ECEA  F024         	call	i2_lcdInst
 18829                           
 18830                           ;UI.c: 531: printf("LOG 2          <");
 18831  004690  0E80               	movlw	low STR_42
 18832  004692  6E0D               	movwf	i2printf@f,c
 18833  004694  0EFD               	movlw	high STR_42
 18834  004696  6E0E               	movwf	i2printf@f+1,c
 18835  004698  EC96  F00C         	call	i2_printf	;wreg free
 18836                           
 18837                           ;UI.c: 532: lcdInst(0b11000000);;
 18838  00469C  0EC0               	movlw	192
 18839  00469E  ECEA  F024         	call	i2_lcdInst
 18840                           
 18841                           ;UI.c: 533: printf("LOG 3           ");
 18842  0046A2  0EE7               	movlw	low STR_44
 18843  0046A4  6E0D               	movwf	i2printf@f,c
 18844  0046A6  0EFC               	movlw	high STR_44
 18845  0046A8  6E0E               	movwf	i2printf@f+1,c
 18846  0046AA  EC96  F00C         	call	i2_printf	;wreg free
 18847  0046AE  0012               	return		;funcret
 18848  0046B0                     __end_of_change_state_to_logs_22:
 18849                           	opt stack 0
 18850                           pclatu	equ	0xFFB
 18851                           pclath	equ	0xFFA
 18852                           tblptru	equ	0xFF8
 18853                           tblptrh	equ	0xFF7
 18854                           tblptrl	equ	0xFF6
 18855                           tablat	equ	0xFF5
 18856                           prodh	equ	0xFF4
 18857                           prodl	equ	0xFF3
 18858                           intcon	equ	0xFF2
 18859                           intcon2	equ	0xFF1
 18860                           intcon3	equ	0xFF0
 18861                           indf0	equ	0xFEF
 18862                           postinc0	equ	0xFEE
 18863                           fsr0h	equ	0xFEA
 18864                           fsr0l	equ	0xFE9
 18865                           wreg	equ	0xFE8
 18866                           postdec1	equ	0xFE5
 18867                           fsr1h	equ	0xFE2
 18868                           fsr1l	equ	0xFE1
 18869                           indf2	equ	0xFDF
 18870                           postinc2	equ	0xFDE
 18871                           postdec2	equ	0xFDD
 18872                           fsr2h	equ	0xFDA
 18873                           fsr2l	equ	0xFD9
 18874                           status	equ	0xFD8
 18875                           
 18876 ;; *************** function _change_state_to_logs_12 *****************
 18877 ;; Defined at:
 18878 ;;		line 521 in file "UI.c"
 18879 ;; Parameters:    Size  Location     Type
 18880 ;;		None
 18881 ;; Auto vars:     Size  Location     Type
 18882 ;;		None
 18883 ;; Return value:  Size  Location     Type
 18884 ;;                  1    wreg      void 
 18885 ;; Registers used:
 18886 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18887 ;; Tracked objects:
 18888 ;;		On entry : 0/0
 18889 ;;		On exit  : 0/0
 18890 ;;		Unchanged: 0/0
 18891 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18892 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18893 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18894 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18895 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18896 ;;Total ram usage:        0 bytes
 18897 ;; Hardware stack levels used:    1
 18898 ;; Hardware stack levels required when called:    3
 18899 ;; This function calls:
 18900 ;;		i2_lcdInst
 18901 ;;		i2_printf
 18902 ;; This function is called by:
 18903 ;;		_updateMenu
 18904 ;;		_inputHandler
 18905 ;; This function uses a non-reentrant model
 18906 ;;
 18907                           
 18908                           	psect	text73
 18909  0046B0                     __ptext73:
 18910                           	opt stack 0
 18911  0046B0                     _change_state_to_logs_12:
 18912                           	opt stack 18
 18913                           
 18914                           ;UI.c: 522: cur_state = 1012;
 18915                           
 18916                           ;incstack = 0
 18917  0046B0  0E03               	movlw	3
 18918  0046B2  0100               	movlb	0	; () banked
 18919  0046B4  6FE3               	movwf	(_cur_state+1)& (0+255),b
 18920  0046B6  0EF4               	movlw	244
 18921  0046B8  6FE2               	movwf	_cur_state& (0+255),b
 18922                           
 18923                           ; BSR set to: 0
 18924                           ;UI.c: 523: lcdInst(0b10000000);;
 18925  0046BA  0E80               	movlw	128
 18926  0046BC  ECEA  F024         	call	i2_lcdInst
 18927                           
 18928                           ;UI.c: 524: printf("LOG 1           ");
 18929  0046C0  0EC5               	movlw	low STR_41
 18930  0046C2  6E0D               	movwf	i2printf@f,c
 18931  0046C4  0EFC               	movlw	high STR_41
 18932  0046C6  6E0E               	movwf	i2printf@f+1,c
 18933  0046C8  EC96  F00C         	call	i2_printf	;wreg free
 18934                           
 18935                           ;UI.c: 525: lcdInst(0b11000000);;
 18936  0046CC  0EC0               	movlw	192
 18937  0046CE  ECEA  F024         	call	i2_lcdInst
 18938                           
 18939                           ;UI.c: 526: printf("LOG 2          <");
 18940  0046D2  0E80               	movlw	low STR_42
 18941  0046D4  6E0D               	movwf	i2printf@f,c
 18942  0046D6  0EFD               	movlw	high STR_42
 18943  0046D8  6E0E               	movwf	i2printf@f+1,c
 18944  0046DA  EC96  F00C         	call	i2_printf	;wreg free
 18945  0046DE  0012               	return		;funcret
 18946  0046E0                     __end_of_change_state_to_logs_12:
 18947                           	opt stack 0
 18948                           pclatu	equ	0xFFB
 18949                           pclath	equ	0xFFA
 18950                           tblptru	equ	0xFF8
 18951                           tblptrh	equ	0xFF7
 18952                           tblptrl	equ	0xFF6
 18953                           tablat	equ	0xFF5
 18954                           prodh	equ	0xFF4
 18955                           prodl	equ	0xFF3
 18956                           intcon	equ	0xFF2
 18957                           intcon2	equ	0xFF1
 18958                           intcon3	equ	0xFF0
 18959                           indf0	equ	0xFEF
 18960                           postinc0	equ	0xFEE
 18961                           fsr0h	equ	0xFEA
 18962                           fsr0l	equ	0xFE9
 18963                           wreg	equ	0xFE8
 18964                           postdec1	equ	0xFE5
 18965                           fsr1h	equ	0xFE2
 18966                           fsr1l	equ	0xFE1
 18967                           indf2	equ	0xFDF
 18968                           postinc2	equ	0xFDE
 18969                           postdec2	equ	0xFDD
 18970                           fsr2h	equ	0xFDA
 18971                           fsr2l	equ	0xFD9
 18972                           status	equ	0xFD8
 18973                           
 18974 ;; *************** function _change_state_to_logs_11 *****************
 18975 ;; Defined at:
 18976 ;;		line 514 in file "UI.c"
 18977 ;; Parameters:    Size  Location     Type
 18978 ;;		None
 18979 ;; Auto vars:     Size  Location     Type
 18980 ;;		None
 18981 ;; Return value:  Size  Location     Type
 18982 ;;                  1    wreg      void 
 18983 ;; Registers used:
 18984 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18985 ;; Tracked objects:
 18986 ;;		On entry : 0/0
 18987 ;;		On exit  : 0/0
 18988 ;;		Unchanged: 0/0
 18989 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18990 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18991 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18992 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18993 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18994 ;;Total ram usage:        0 bytes
 18995 ;; Hardware stack levels used:    1
 18996 ;; Hardware stack levels required when called:    3
 18997 ;; This function calls:
 18998 ;;		i2_lcdInst
 18999 ;;		i2_printf
 19000 ;; This function is called by:
 19001 ;;		_updateMenu
 19002 ;;		_inputHandler
 19003 ;; This function uses a non-reentrant model
 19004 ;;
 19005                           
 19006                           	psect	text74
 19007  0046E0                     __ptext74:
 19008                           	opt stack 0
 19009  0046E0                     _change_state_to_logs_11:
 19010                           	opt stack 18
 19011                           
 19012                           ;UI.c: 515: cur_state = 1011;
 19013                           
 19014                           ;incstack = 0
 19015  0046E0  0E03               	movlw	3
 19016  0046E2  0100               	movlb	0	; () banked
 19017  0046E4  6FE3               	movwf	(_cur_state+1)& (0+255),b
 19018  0046E6  0EF3               	movlw	243
 19019  0046E8  6FE2               	movwf	_cur_state& (0+255),b
 19020                           
 19021                           ; BSR set to: 0
 19022                           ;UI.c: 516: lcdInst(0b10000000);;
 19023  0046EA  0E80               	movlw	128
 19024  0046EC  ECEA  F024         	call	i2_lcdInst
 19025                           
 19026                           ;UI.c: 517: printf("LOG 1          <");
 19027  0046F0  0E6F               	movlw	low STR_39
 19028  0046F2  6E0D               	movwf	i2printf@f,c
 19029  0046F4  0EFD               	movlw	high STR_39
 19030  0046F6  6E0E               	movwf	i2printf@f+1,c
 19031  0046F8  EC96  F00C         	call	i2_printf	;wreg free
 19032                           
 19033                           ;UI.c: 518: lcdInst(0b11000000);;
 19034  0046FC  0EC0               	movlw	192
 19035  0046FE  ECEA  F024         	call	i2_lcdInst
 19036                           
 19037                           ;UI.c: 519: printf("LOG 2           ");
 19038  004702  0ED6               	movlw	low STR_40
 19039  004704  6E0D               	movwf	i2printf@f,c
 19040  004706  0EFC               	movlw	high STR_40
 19041  004708  6E0E               	movwf	i2printf@f+1,c
 19042  00470A  EC96  F00C         	call	i2_printf	;wreg free
 19043  00470E  0012               	return		;funcret
 19044  004710                     __end_of_change_state_to_logs_11:
 19045                           	opt stack 0
 19046                           pclatu	equ	0xFFB
 19047                           pclath	equ	0xFFA
 19048                           tblptru	equ	0xFF8
 19049                           tblptrh	equ	0xFF7
 19050                           tblptrl	equ	0xFF6
 19051                           tablat	equ	0xFF5
 19052                           prodh	equ	0xFF4
 19053                           prodl	equ	0xFF3
 19054                           intcon	equ	0xFF2
 19055                           intcon2	equ	0xFF1
 19056                           intcon3	equ	0xFF0
 19057                           indf0	equ	0xFEF
 19058                           postinc0	equ	0xFEE
 19059                           fsr0h	equ	0xFEA
 19060                           fsr0l	equ	0xFE9
 19061                           wreg	equ	0xFE8
 19062                           postdec1	equ	0xFE5
 19063                           fsr1h	equ	0xFE2
 19064                           fsr1l	equ	0xFE1
 19065                           indf2	equ	0xFDF
 19066                           postinc2	equ	0xFDE
 19067                           postdec2	equ	0xFDD
 19068                           fsr2h	equ	0xFDA
 19069                           fsr2l	equ	0xFD9
 19070                           status	equ	0xFD8
 19071                           
 19072 ;; *************** function _dispLogs *****************
 19073 ;; Defined at:
 19074 ;;		line 467 in file "UI.c"
 19075 ;; Parameters:    Size  Location     Type
 19076 ;;  myLog           2   17[COMRAM] int 
 19077 ;; Auto vars:     Size  Location     Type
 19078 ;;		None
 19079 ;; Return value:  Size  Location     Type
 19080 ;;                  1    wreg      void 
 19081 ;; Registers used:
 19082 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 19083 ;; Tracked objects:
 19084 ;;		On entry : 0/0
 19085 ;;		On exit  : 0/0
 19086 ;;		Unchanged: 0/0
 19087 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19088 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19089 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19090 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19091 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19092 ;;Total ram usage:        2 bytes
 19093 ;; Hardware stack levels used:    1
 19094 ;; Hardware stack levels required when called:    2
 19095 ;; This function calls:
 19096 ;;		_retrieveLog
 19097 ;; This function is called by:
 19098 ;;		_updateMenu
 19099 ;; This function uses a non-reentrant model
 19100 ;;
 19101                           
 19102                           	psect	text75
 19103  0048B8                     __ptext75:
 19104                           	opt stack 0
 19105  0048B8                     _dispLogs:
 19106                           	opt stack 20
 19107                           
 19108                           ;UI.c: 468: logstate = 1;
 19109                           
 19110                           ;incstack = 0
 19111  0048B8  0E00               	movlw	0
 19112  0048BA  0100               	movlb	0	; () banked
 19113  0048BC  6FF7               	movwf	(_logstate+1)& (0+255),b
 19114  0048BE  0E01               	movlw	1
 19115  0048C0  6FF6               	movwf	_logstate& (0+255),b
 19116                           
 19117                           ; BSR set to: 0
 19118                           ;UI.c: 469: log = myLog;
 19119  0048C2  C012  F0E6         	movff	dispLogs@myLog,_log
 19120  0048C6  C013  F0E7         	movff	dispLogs@myLog+1,_log+1
 19121                           
 19122                           ; BSR set to: 0
 19123                           ;UI.c: 470: retrieveLog(myLog - 1);
 19124  0048CA  0EFF               	movlw	255
 19125  0048CC  2412               	addwf	dispLogs@myLog,w,c
 19126  0048CE  6E07               	movwf	retrieveLog@logNum,c
 19127  0048D0  0EFF               	movlw	255
 19128  0048D2  2013               	addwfc	dispLogs@myLog+1,w,c
 19129  0048D4  6E08               	movwf	retrieveLog@logNum+1,c
 19130  0048D6  ECB5  F018         	call	_retrieveLog	;wreg free
 19131  0048DA  0012               	return		;funcret
 19132  0048DC                     __end_of_dispLogs:
 19133                           	opt stack 0
 19134                           pclatu	equ	0xFFB
 19135                           pclath	equ	0xFFA
 19136                           tblptru	equ	0xFF8
 19137                           tblptrh	equ	0xFF7
 19138                           tblptrl	equ	0xFF6
 19139                           tablat	equ	0xFF5
 19140                           prodh	equ	0xFF4
 19141                           prodl	equ	0xFF3
 19142                           intcon	equ	0xFF2
 19143                           intcon2	equ	0xFF1
 19144                           intcon3	equ	0xFF0
 19145                           indf0	equ	0xFEF
 19146                           postinc0	equ	0xFEE
 19147                           fsr0h	equ	0xFEA
 19148                           fsr0l	equ	0xFE9
 19149                           wreg	equ	0xFE8
 19150                           postdec1	equ	0xFE5
 19151                           fsr1h	equ	0xFE2
 19152                           fsr1l	equ	0xFE1
 19153                           indf2	equ	0xFDF
 19154                           postinc2	equ	0xFDE
 19155                           postdec2	equ	0xFDD
 19156                           fsr2h	equ	0xFDA
 19157                           fsr2l	equ	0xFD9
 19158                           status	equ	0xFD8
 19159                           
 19160 ;; *************** function _retrieveLog *****************
 19161 ;; Defined at:
 19162 ;;		line 134 in file "EEPROM.c"
 19163 ;; Parameters:    Size  Location     Type
 19164 ;;  logNum          2    6[COMRAM] int 
 19165 ;; Auto vars:     Size  Location     Type
 19166 ;;  i               2   13[COMRAM] int 
 19167 ;;  addr            2   15[COMRAM] unsigned short 
 19168 ;;  byte3           1   12[COMRAM] unsigned char 
 19169 ;;  byte2           1   11[COMRAM] unsigned char 
 19170 ;;  byte1           1   10[COMRAM] unsigned char 
 19171 ;; Return value:  Size  Location     Type
 19172 ;;                  1    wreg      void 
 19173 ;; Registers used:
 19174 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 19175 ;; Tracked objects:
 19176 ;;		On entry : 0/0
 19177 ;;		On exit  : 0/0
 19178 ;;		Unchanged: 0/0
 19179 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19180 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19181 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19182 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19183 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19184 ;;Total ram usage:       11 bytes
 19185 ;; Hardware stack levels used:    1
 19186 ;; Hardware stack levels required when called:    1
 19187 ;; This function calls:
 19188 ;;		i2_EEPROM_read
 19189 ;;		i2___wmul
 19190 ;; This function is called by:
 19191 ;;		_dispLogs
 19192 ;; This function uses a non-reentrant model
 19193 ;;
 19194                           
 19195                           	psect	text76
 19196  00316A                     __ptext76:
 19197                           	opt stack 0
 19198  00316A                     _retrieveLog:
 19199                           	opt stack 20
 19200                           
 19201                           ;EEPROM.c: 140: unsigned short addr = 1 + logNum * 11;
 19202                           
 19203                           ;incstack = 0
 19204  00316A  C007  F001         	movff	retrieveLog@logNum,i2___wmul@multiplier
 19205  00316E  C008  F002         	movff	retrieveLog@logNum+1,i2___wmul@multiplier+1
 19206  003172  0E00               	movlw	0
 19207  003174  6E04               	movwf	i2___wmul@multiplicand+1,c
 19208  003176  0E0B               	movlw	11
 19209  003178  6E03               	movwf	i2___wmul@multiplicand,c
 19210  00317A  EC36  F024         	call	i2___wmul	;wreg free
 19211  00317E  0E01               	movlw	1
 19212  003180  2401               	addwf	?i2___wmul,w,c
 19213  003182  6E10               	movwf	retrieveLog@addr,c
 19214  003184  0E00               	movlw	0
 19215  003186  2002               	addwfc	?i2___wmul+1,w,c
 19216  003188  6E11               	movwf	retrieveLog@addr+1,c
 19217                           
 19218                           ;EEPROM.c: 143: unsigned char byte1 = EEPROM_read(addr);
 19219  00318A  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 19220  00318E  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 19221  003192  ECB6  F024         	call	i2_EEPROM_read	;wreg free
 19222  003196  6E0B               	movwf	retrieveLog@byte1,c
 19223                           
 19224                           ;EEPROM.c: 144: log_completion = (int)(byte1 & 0b10000000);
 19225  003198  C00B  F009         	movff	retrieveLog@byte1,??_retrieveLog
 19226  00319C  0E80               	movlw	128
 19227  00319E  1609               	andwf	??_retrieveLog,f,c
 19228  0031A0  5009               	movf	??_retrieveLog,w,c
 19229  0031A2  0100               	movlb	0	; () banked
 19230  0031A4  6FE8               	movwf	_log_completion& (0+255),b
 19231  0031A6  6BE9               	clrf	(_log_completion+1)& (0+255),b
 19232                           
 19233                           ; BSR set to: 0
 19234                           ;EEPROM.c: 145: log_count_total = (int)(byte1 & 0b00001111);
 19235  0031A8  C00B  F009         	movff	retrieveLog@byte1,??_retrieveLog
 19236  0031AC  0E0F               	movlw	15
 19237  0031AE  1609               	andwf	??_retrieveLog,f,c
 19238  0031B0  5009               	movf	??_retrieveLog,w,c
 19239  0031B2  0100               	movlb	0	; () banked
 19240  0031B4  6FF2               	movwf	_log_count_total& (0+255),b
 19241  0031B6  6BF3               	clrf	(_log_count_total+1)& (0+255),b
 19242                           
 19243                           ; BSR set to: 0
 19244                           ;EEPROM.c: 146: addr++;
 19245  0031B8  4A10               	infsnz	retrieveLog@addr,f,c
 19246  0031BA  2A11               	incf	retrieveLog@addr+1,f,c
 19247                           
 19248                           ; BSR set to: 0
 19249                           ;EEPROM.c: 149: unsigned char byte2 = EEPROM_read(addr);
 19250  0031BC  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 19251  0031C0  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 19252  0031C4  ECB6  F024         	call	i2_EEPROM_read	;wreg free
 19253  0031C8  6E0C               	movwf	retrieveLog@byte2,c
 19254                           
 19255                           ;EEPROM.c: 150: log_count_pop_no_tab = (int)((byte2 & 0b11110000)>> 4);
 19256  0031CA  C00C  F009         	movff	retrieveLog@byte2,??_retrieveLog
 19257  0031CE  3A09               	swapf	??_retrieveLog,f,c
 19258  0031D0  0E0F               	movlw	15
 19259  0031D2  1609               	andwf	??_retrieveLog,f,c
 19260  0031D4  0E0F               	movlw	15
 19261  0031D6  1609               	andwf	??_retrieveLog,f,c
 19262  0031D8  5009               	movf	??_retrieveLog,w,c
 19263  0031DA  0100               	movlb	0	; () banked
 19264  0031DC  6FEE               	movwf	_log_count_pop_no_tab& (0+255),b
 19265  0031DE  6BEF               	clrf	(_log_count_pop_no_tab+1)& (0+255),b
 19266                           
 19267                           ; BSR set to: 0
 19268                           ;EEPROM.c: 151: log_count_pop_w_tab = (int)(byte2 & 0b00001111);
 19269  0031E0  C00C  F009         	movff	retrieveLog@byte2,??_retrieveLog
 19270  0031E4  0E0F               	movlw	15
 19271  0031E6  1609               	andwf	??_retrieveLog,f,c
 19272  0031E8  5009               	movf	??_retrieveLog,w,c
 19273  0031EA  0100               	movlb	0	; () banked
 19274  0031EC  6FF0               	movwf	_log_count_pop_w_tab& (0+255),b
 19275  0031EE  6BF1               	clrf	(_log_count_pop_w_tab+1)& (0+255),b
 19276                           
 19277                           ; BSR set to: 0
 19278                           ;EEPROM.c: 152: addr++;
 19279  0031F0  4A10               	infsnz	retrieveLog@addr,f,c
 19280  0031F2  2A11               	incf	retrieveLog@addr+1,f,c
 19281                           
 19282                           ; BSR set to: 0
 19283                           ;EEPROM.c: 153: unsigned char byte3 = EEPROM_read(addr);
 19284  0031F4  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 19285  0031F8  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 19286  0031FC  ECB6  F024         	call	i2_EEPROM_read	;wreg free
 19287  003200  6E0D               	movwf	retrieveLog@byte3,c
 19288                           
 19289                           ;EEPROM.c: 154: log_count_can_w_lab = (int)((byte3 & 0b11110000)>> 4);
 19290  003202  C00D  F009         	movff	retrieveLog@byte3,??_retrieveLog
 19291  003206  3A09               	swapf	??_retrieveLog,f,c
 19292  003208  0E0F               	movlw	15
 19293  00320A  1609               	andwf	??_retrieveLog,f,c
 19294  00320C  0E0F               	movlw	15
 19295  00320E  1609               	andwf	??_retrieveLog,f,c
 19296  003210  5009               	movf	??_retrieveLog,w,c
 19297  003212  0100               	movlb	0	; () banked
 19298  003214  6FEC               	movwf	_log_count_can_w_lab& (0+255),b
 19299  003216  6BED               	clrf	(_log_count_can_w_lab+1)& (0+255),b
 19300                           
 19301                           ; BSR set to: 0
 19302                           ;EEPROM.c: 155: log_count_can_no_lab = (int)(byte3 & 0b00001111);
 19303  003218  C00D  F009         	movff	retrieveLog@byte3,??_retrieveLog
 19304  00321C  0E0F               	movlw	15
 19305  00321E  1609               	andwf	??_retrieveLog,f,c
 19306  003220  5009               	movf	??_retrieveLog,w,c
 19307  003222  0100               	movlb	0	; () banked
 19308  003224  6FEA               	movwf	_log_count_can_no_lab& (0+255),b
 19309  003226  6BEB               	clrf	(_log_count_can_no_lab+1)& (0+255),b
 19310                           
 19311                           ; BSR set to: 0
 19312                           ;EEPROM.c: 156: addr++;
 19313  003228  4A10               	infsnz	retrieveLog@addr,f,c
 19314  00322A  2A11               	incf	retrieveLog@addr+1,f,c
 19315                           
 19316                           ; BSR set to: 0
 19317                           ;EEPROM.c: 159: for(int i = 0; i < 7; i++){
 19318  00322C  0E00               	movlw	0
 19319  00322E  6E0F               	movwf	retrieveLog@i+1,c
 19320  003230  0E00               	movlw	0
 19321  003232  6E0E               	movwf	retrieveLog@i,c
 19322  003234                     i2l6138:
 19323                           
 19324                           ; BSR set to: 0
 19325  003234  BE0F               	btfsc	retrieveLog@i+1,7,c
 19326  003236  D006               	goto	i2l6142
 19327  003238  500F               	movf	retrieveLog@i+1,w,c
 19328  00323A  E11E               	bnz	i2l6150
 19329  00323C  0E07               	movlw	7
 19330  00323E  5C0E               	subwf	retrieveLog@i,w,c
 19331  003240  B0D8               	btfsc	status,0,c
 19332  003242  D01A               	goto	i2l6150
 19333  003244                     i2l6142:
 19334                           
 19335                           ;EEPROM.c: 160: log_startTime[i] = (int)EEPROM_read(addr);
 19336  003244  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 19337  003248  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 19338  00324C  ECB6  F024         	call	i2_EEPROM_read	;wreg free
 19339  003250  6E09               	movwf	??_retrieveLog& (0+255),c
 19340  003252  6A0A               	clrf	(??_retrieveLog+1)& (0+255),c
 19341  003254  90D8               	bcf	status,0,c
 19342  003256  340E               	rlcf	retrieveLog@i,w,c
 19343  003258  6ED9               	movwf	fsr2l,c
 19344  00325A  340F               	rlcf	retrieveLog@i+1,w,c
 19345  00325C  6EDA               	movwf	fsr2h,c
 19346  00325E  0E00               	movlw	low _log_startTime
 19347  003260  26D9               	addwf	fsr2l,f,c
 19348  003262  0E01               	movlw	high _log_startTime
 19349  003264  22DA               	addwfc	fsr2h,f,c
 19350  003266  C009  FFDE         	movff	??_retrieveLog,postinc2
 19351  00326A  C00A  FFDD         	movff	??_retrieveLog+1,postdec2
 19352                           
 19353                           ;EEPROM.c: 161: addr++;
 19354  00326E  4A10               	infsnz	retrieveLog@addr,f,c
 19355  003270  2A11               	incf	retrieveLog@addr+1,f,c
 19356  003272  4A0E               	infsnz	retrieveLog@i,f,c
 19357  003274  2A0F               	incf	retrieveLog@i+1,f,c
 19358  003276  D7DE               	goto	i2l6138
 19359  003278                     i2l6150:
 19360                           
 19361                           ;EEPROM.c: 162: }
 19362                           ;EEPROM.c: 165: log_total_time = (int)EEPROM_read(addr);
 19363  003278  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 19364  00327C  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 19365  003280  ECB6  F024         	call	i2_EEPROM_read	;wreg free
 19366  003284  6E09               	movwf	??_retrieveLog& (0+255),c
 19367  003286  5009               	movf	??_retrieveLog,w,c
 19368  003288  0100               	movlb	0	; () banked
 19369  00328A  6FF4               	movwf	_log_total_time& (0+255),b
 19370  00328C  6BF5               	clrf	(_log_total_time+1)& (0+255),b
 19371                           
 19372                           ; BSR set to: 0
 19373  00328E  0012               	return		;funcret
 19374  003290                     __end_of_retrieveLog:
 19375                           	opt stack 0
 19376                           pclatu	equ	0xFFB
 19377                           pclath	equ	0xFFA
 19378                           tblptru	equ	0xFF8
 19379                           tblptrh	equ	0xFF7
 19380                           tblptrl	equ	0xFF6
 19381                           tablat	equ	0xFF5
 19382                           prodh	equ	0xFF4
 19383                           prodl	equ	0xFF3
 19384                           intcon	equ	0xFF2
 19385                           intcon2	equ	0xFF1
 19386                           intcon3	equ	0xFF0
 19387                           indf0	equ	0xFEF
 19388                           postinc0	equ	0xFEE
 19389                           fsr0h	equ	0xFEA
 19390                           fsr0l	equ	0xFE9
 19391                           wreg	equ	0xFE8
 19392                           postdec1	equ	0xFE5
 19393                           fsr1h	equ	0xFE2
 19394                           fsr1l	equ	0xFE1
 19395                           indf2	equ	0xFDF
 19396                           postinc2	equ	0xFDE
 19397                           postdec2	equ	0xFDD
 19398                           fsr2h	equ	0xFDA
 19399                           fsr2l	equ	0xFD9
 19400                           status	equ	0xFD8
 19401                           
 19402 ;; *************** function i2_EEPROM_read *****************
 19403 ;; Defined at:
 19404 ;;		line 68 in file "EEPROM.c"
 19405 ;; Parameters:    Size  Location     Type
 19406 ;;  address         2    0[COMRAM] unsigned short 
 19407 ;; Auto vars:     Size  Location     Type
 19408 ;;		None
 19409 ;; Return value:  Size  Location     Type
 19410 ;;                  1    wreg      unsigned char 
 19411 ;; Registers used:
 19412 ;;		wreg, status,2
 19413 ;; Tracked objects:
 19414 ;;		On entry : 0/0
 19415 ;;		On exit  : 0/0
 19416 ;;		Unchanged: 0/0
 19417 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19418 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19419 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19420 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19421 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19422 ;;Total ram usage:        2 bytes
 19423 ;; Hardware stack levels used:    1
 19424 ;; This function calls:
 19425 ;;		Nothing
 19426 ;; This function is called by:
 19427 ;;		_retrieveLog
 19428 ;; This function uses a non-reentrant model
 19429 ;;
 19430                           
 19431                           	psect	text77
 19432  00496C                     __ptext77:
 19433                           	opt stack 0
 19434  00496C                     i2_EEPROM_read:
 19435                           	opt stack 20
 19436                           
 19437                           ;EEPROM.c: 70: EEADRH = (unsigned char)(address >> 8);
 19438                           
 19439                           ; BSR set to: 0
 19440                           ;incstack = 0
 19441  00496C  5002               	movf	i2EEPROM_read@address+1,w,c
 19442  00496E  6EAA               	movwf	4010,c	;volatile
 19443                           
 19444                           ;EEPROM.c: 71: EEADR = (unsigned char)address;
 19445  004970  C001  FFA9         	movff	i2EEPROM_read@address,4009	;volatile
 19446                           
 19447                           ;EEPROM.c: 73: EECON1bits.EEPGD = 0;
 19448  004974  9EA6               	bcf	4006,7,c	;volatile
 19449                           
 19450                           ;EEPROM.c: 74: EECON1bits.CFGS = 0;
 19451  004976  9CA6               	bcf	4006,6,c	;volatile
 19452                           
 19453                           ;EEPROM.c: 75: EECON1bits.RD = 1;
 19454  004978  80A6               	bsf	4006,0,c	;volatile
 19455  00497A                     i2l950:
 19456  00497A  B0A6               	btfsc	4006,0,c	;volatile
 19457  00497C  D7FE               	goto	i2l950
 19458                           
 19459                           ;EEPROM.c: 81: return EEDATA;
 19460  00497E  50A8               	movf	4008,w,c	;volatile
 19461  004980  0012               	return	
 19462  004982                     __end_ofi2_EEPROM_read:
 19463                           	opt stack 0
 19464                           pclatu	equ	0xFFB
 19465                           pclath	equ	0xFFA
 19466                           tblptru	equ	0xFF8
 19467                           tblptrh	equ	0xFF7
 19468                           tblptrl	equ	0xFF6
 19469                           tablat	equ	0xFF5
 19470                           prodh	equ	0xFF4
 19471                           prodl	equ	0xFF3
 19472                           intcon	equ	0xFF2
 19473                           intcon2	equ	0xFF1
 19474                           intcon3	equ	0xFF0
 19475                           indf0	equ	0xFEF
 19476                           postinc0	equ	0xFEE
 19477                           fsr0h	equ	0xFEA
 19478                           fsr0l	equ	0xFE9
 19479                           wreg	equ	0xFE8
 19480                           postdec1	equ	0xFE5
 19481                           fsr1h	equ	0xFE2
 19482                           fsr1l	equ	0xFE1
 19483                           indf2	equ	0xFDF
 19484                           postinc2	equ	0xFDE
 19485                           postdec2	equ	0xFDD
 19486                           fsr2h	equ	0xFDA
 19487                           fsr2l	equ	0xFD9
 19488                           status	equ	0xFD8
 19489                           
 19490 ;; *************** function _printSortTimer *****************
 19491 ;; Defined at:
 19492 ;;		line 311 in file "sort.c"
 19493 ;; Parameters:    Size  Location     Type
 19494 ;;		None
 19495 ;; Auto vars:     Size  Location     Type
 19496 ;;  i               2   72[COMRAM] int 
 19497 ;;  curTime        14   46[COMRAM] int [7]
 19498 ;;  timeDiff        2   70[COMRAM] unsigned int 
 19499 ;;  sec             2   66[COMRAM] int 
 19500 ;;  min             2   64[COMRAM] int 
 19501 ;;  cur_sec         2   62[COMRAM] unsigned int 
 19502 ;;  start_sec       2   60[COMRAM] unsigned int 
 19503 ;;  hour            2   44[COMRAM] int 
 19504 ;; Return value:  Size  Location     Type
 19505 ;;                  1    wreg      void 
 19506 ;; Registers used:
 19507 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19508 ;; Tracked objects:
 19509 ;;		On entry : 0/0
 19510 ;;		On exit  : 0/0
 19511 ;;		Unchanged: 0/0
 19512 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19513 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19514 ;;      Locals:        30       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19515 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19516 ;;      Totals:        33       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19517 ;;Total ram usage:       33 bytes
 19518 ;; Hardware stack levels used:    1
 19519 ;; Hardware stack levels required when called:    3
 19520 ;; This function calls:
 19521 ;;		i2___lwdiv
 19522 ;;		i2___lwmod
 19523 ;;		i2___wmul
 19524 ;;		i2_getRTC
 19525 ;;		i2_lcdInst
 19526 ;;		i2_printf
 19527 ;; This function is called by:
 19528 ;;		_handler
 19529 ;; This function uses a non-reentrant model
 19530 ;;
 19531                           
 19532                           	psect	text78
 19533  00294C                     __ptext78:
 19534                           	opt stack 0
 19535  00294C                     _printSortTimer:
 19536                           	opt stack 20
 19537                           
 19538                           ;sort.c: 312: getRTC();
 19539                           
 19540                           ;incstack = 0
 19541  00294C  EC50  F01F         	call	i2_getRTC	;wreg free
 19542                           
 19543                           ;sort.c: 313: int curTime[7];
 19544                           ;sort.c: 314: for(int i = 0; i < 7; i++){
 19545  002950  0E00               	movlw	0
 19546  002952  6E4A               	movwf	printSortTimer@i+1,c
 19547  002954  0E00               	movlw	0
 19548  002956  6E49               	movwf	printSortTimer@i,c
 19549  002958                     i2l8288:
 19550  002958  BE4A               	btfsc	printSortTimer@i+1,7,c
 19551  00295A  D006               	goto	i2l8292
 19552  00295C  504A               	movf	printSortTimer@i+1,w,c
 19553  00295E  E131               	bnz	i2l8298
 19554  002960  0E07               	movlw	7
 19555  002962  5C49               	subwf	printSortTimer@i,w,c
 19556  002964  B0D8               	btfsc	status,0,c
 19557  002966  D02D               	goto	i2l8298
 19558  002968                     i2l8292:
 19559                           
 19560                           ;sort.c: 315: curTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 19561  002968  0E24               	movlw	low _time
 19562  00296A  2449               	addwf	printSortTimer@i,w,c
 19563  00296C  6ED9               	movwf	fsr2l,c
 19564  00296E  0E01               	movlw	high _time
 19565  002970  204A               	addwfc	printSortTimer@i+1,w,c
 19566  002972  6EDA               	movwf	fsr2h,c
 19567  002974  50DF               	movf	indf2,w,c
 19568  002976  6E2A               	movwf	??_printSortTimer& (0+255),c
 19569  002978  3A2A               	swapf	??_printSortTimer,f,c
 19570  00297A  0E0F               	movlw	15
 19571  00297C  162A               	andwf	??_printSortTimer,f,c
 19572  00297E  0E0F               	movlw	15
 19573  002980  162A               	andwf	??_printSortTimer,f,c
 19574  002982  502A               	movf	??_printSortTimer,w,c
 19575  002984  0D0A               	mullw	10
 19576  002986  0E24               	movlw	low _time
 19577  002988  2449               	addwf	printSortTimer@i,w,c
 19578  00298A  6ED9               	movwf	fsr2l,c
 19579  00298C  0E01               	movlw	high _time
 19580  00298E  204A               	addwfc	printSortTimer@i+1,w,c
 19581  002990  6EDA               	movwf	fsr2h,c
 19582  002992  50DF               	movf	indf2,w,c
 19583  002994  0B0F               	andlw	15
 19584  002996  6E2B               	movwf	(??_printSortTimer+1)& (0+255),c
 19585  002998  6A2C               	clrf	(??_printSortTimer+2)& (0+255),c
 19586  00299A  50F3               	movf	prodl,w,c
 19587  00299C  262B               	addwf	??_printSortTimer+1,f,c
 19588  00299E  50F4               	movf	prodh,w,c
 19589  0029A0  222C               	addwfc	??_printSortTimer+2,f,c
 19590  0029A2  90D8               	bcf	status,0,c
 19591  0029A4  3449               	rlcf	printSortTimer@i,w,c
 19592  0029A6  6ED9               	movwf	fsr2l,c
 19593  0029A8  344A               	rlcf	printSortTimer@i+1,w,c
 19594  0029AA  6EDA               	movwf	fsr2h,c
 19595  0029AC  0E2F               	movlw	low printSortTimer@curTime
 19596  0029AE  26D9               	addwf	fsr2l,f,c
 19597  0029B0  0E00               	movlw	high printSortTimer@curTime
 19598  0029B2  22DA               	addwfc	fsr2h,f,c
 19599  0029B4  C02B  FFDE         	movff	??_printSortTimer+1,postinc2
 19600  0029B8  C02C  FFDD         	movff	??_printSortTimer+2,postdec2
 19601  0029BC  4A49               	infsnz	printSortTimer@i,f,c
 19602  0029BE  2A4A               	incf	printSortTimer@i+1,f,c
 19603  0029C0  D7CB               	goto	i2l8288
 19604  0029C2                     i2l8298:
 19605                           
 19606                           ;sort.c: 316: }
 19607                           ;sort.c: 317: unsigned int start_sec = startTime[0] + startTime[1]*60 + startTime[2]*360
      +                          0;
 19608  0029C2  C110  F001         	movff	_startTime+2,i2___wmul@multiplier
 19609  0029C6  C111  F002         	movff	_startTime+3,i2___wmul@multiplier+1
 19610  0029CA  0E00               	movlw	0
 19611  0029CC  6E04               	movwf	i2___wmul@multiplicand+1,c
 19612  0029CE  0E3C               	movlw	60
 19613  0029D0  6E03               	movwf	i2___wmul@multiplicand,c
 19614  0029D2  EC36  F024         	call	i2___wmul	;wreg free
 19615  0029D6  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 19616  0029DA  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 19617  0029DE  C112  F001         	movff	_startTime+4,i2___wmul@multiplier
 19618  0029E2  C113  F002         	movff	_startTime+5,i2___wmul@multiplier+1
 19619  0029E6  0E0E               	movlw	14
 19620  0029E8  6E04               	movwf	i2___wmul@multiplicand+1,c
 19621  0029EA  0E10               	movlw	16
 19622  0029EC  6E03               	movwf	i2___wmul@multiplicand,c
 19623  0029EE  EC36  F024         	call	i2___wmul	;wreg free
 19624  0029F2  5001               	movf	?i2___wmul,w,c
 19625  0029F4  262A               	addwf	??_printSortTimer,f,c
 19626  0029F6  5002               	movf	?i2___wmul+1,w,c
 19627  0029F8  222B               	addwfc	??_printSortTimer+1,f,c
 19628  0029FA  0101               	movlb	1	; () banked
 19629  0029FC  510E               	movf	_startTime& (0+255),w,b
 19630  0029FE  242A               	addwf	??_printSortTimer,w,c
 19631  002A00  6E3D               	movwf	printSortTimer@start_sec,c
 19632  002A02  0101               	movlb	1	; () banked
 19633  002A04  510F               	movf	(_startTime+1)& (0+255),w,b
 19634  002A06  202B               	addwfc	??_printSortTimer+1,w,c
 19635  002A08  6E3E               	movwf	printSortTimer@start_sec+1,c
 19636                           
 19637                           ;sort.c: 318: unsigned int cur_sec = curTime[0] + curTime[1]*60 + curTime[2]*3600;
 19638  002A0A  C031  F001         	movff	printSortTimer@curTime+2,i2___wmul@multiplier
 19639  002A0E  C032  F002         	movff	printSortTimer@curTime+3,i2___wmul@multiplier+1
 19640  002A12  0E00               	movlw	0
 19641  002A14  6E04               	movwf	i2___wmul@multiplicand+1,c
 19642  002A16  0E3C               	movlw	60
 19643  002A18  6E03               	movwf	i2___wmul@multiplicand,c
 19644  002A1A  EC36  F024         	call	i2___wmul	;wreg free
 19645  002A1E  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 19646  002A22  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 19647  002A26  C033  F001         	movff	printSortTimer@curTime+4,i2___wmul@multiplier
 19648  002A2A  C034  F002         	movff	printSortTimer@curTime+5,i2___wmul@multiplier+1
 19649  002A2E  0E0E               	movlw	14
 19650  002A30  6E04               	movwf	i2___wmul@multiplicand+1,c
 19651  002A32  0E10               	movlw	16
 19652  002A34  6E03               	movwf	i2___wmul@multiplicand,c
 19653  002A36  EC36  F024         	call	i2___wmul	;wreg free
 19654  002A3A  5001               	movf	?i2___wmul,w,c
 19655  002A3C  262A               	addwf	??_printSortTimer,f,c
 19656  002A3E  5002               	movf	?i2___wmul+1,w,c
 19657  002A40  222B               	addwfc	??_printSortTimer+1,f,c
 19658  002A42  502F               	movf	printSortTimer@curTime,w,c
 19659  002A44  242A               	addwf	??_printSortTimer,w,c
 19660  002A46  6E3F               	movwf	printSortTimer@cur_sec,c
 19661  002A48  5030               	movf	printSortTimer@curTime+1,w,c
 19662  002A4A  202B               	addwfc	??_printSortTimer+1,w,c
 19663  002A4C  6E40               	movwf	printSortTimer@cur_sec+1,c
 19664                           
 19665                           ;sort.c: 319: unsigned int timeDiff = cur_sec - start_sec;
 19666  002A4E  C03D  F02A         	movff	printSortTimer@start_sec,??_printSortTimer
 19667  002A52  C03E  F02B         	movff	printSortTimer@start_sec+1,??_printSortTimer+1
 19668  002A56  1E2A               	comf	??_printSortTimer,f,c
 19669  002A58  1E2B               	comf	??_printSortTimer+1,f,c
 19670  002A5A  4A2A               	infsnz	??_printSortTimer,f,c
 19671  002A5C  2A2B               	incf	??_printSortTimer+1,f,c
 19672  002A5E  503F               	movf	printSortTimer@cur_sec,w,c
 19673  002A60  242A               	addwf	??_printSortTimer,w,c
 19674  002A62  6E47               	movwf	printSortTimer@timeDiff,c
 19675  002A64  5040               	movf	printSortTimer@cur_sec+1,w,c
 19676  002A66  202B               	addwfc	??_printSortTimer+1,w,c
 19677  002A68  6E48               	movwf	printSortTimer@timeDiff+1,c
 19678                           
 19679                           ;sort.c: 321: total_time = timeDiff;
 19680  002A6A  C047  F0F8         	movff	printSortTimer@timeDiff,_total_time
 19681  002A6E  C048  F0F9         	movff	printSortTimer@timeDiff+1,_total_time+1
 19682                           
 19683                           ;sort.c: 323: if(timeDiff >= 179){
 19684  002A72  5048               	movf	printSortTimer@timeDiff+1,w,c
 19685  002A74  E104               	bnz	i2u720_40
 19686  002A76  0EB3               	movlw	179
 19687  002A78  5C47               	subwf	printSortTimer@timeDiff,w,c
 19688  002A7A  A0D8               	btfss	status,0,c
 19689  002A7C  D003               	goto	i2l8308
 19690  002A7E                     i2u720_40:
 19691                           
 19692                           ;sort.c: 324: machine_state = DoneSorting_state;
 19693  002A7E  0E02               	movlw	2
 19694  002A80  0100               	movlb	0	; () banked
 19695  002A82  6FFC               	movwf	_machine_state& (0+255),b
 19696  002A84                     i2l8308:
 19697                           
 19698                           ;sort.c: 326: }
 19699                           ;sort.c: 328: int hour = timeDiff / 3600;
 19700  002A84  C047  F006         	movff	printSortTimer@timeDiff,i2___lwdiv@dividend
 19701  002A88  C048  F007         	movff	printSortTimer@timeDiff+1,i2___lwdiv@dividend+1
 19702  002A8C  0E0E               	movlw	14
 19703  002A8E  6E09               	movwf	i2___lwdiv@divisor+1,c
 19704  002A90  0E10               	movlw	16
 19705  002A92  6E08               	movwf	i2___lwdiv@divisor,c
 19706  002A94  EC30  F021         	call	i2___lwdiv	;wreg free
 19707  002A98  C006  F02D         	movff	?i2___lwdiv,printSortTimer@hour
 19708  002A9C  C007  F02E         	movff	?i2___lwdiv+1,printSortTimer@hour+1
 19709                           
 19710                           ;sort.c: 329: int min = (timeDiff % 3600) / 60;
 19711  002AA0  0E0E               	movlw	14
 19712  002AA2  6E04               	movwf	i2___lwmod@divisor+1,c
 19713  002AA4  0E10               	movlw	16
 19714  002AA6  6E03               	movwf	i2___lwmod@divisor,c
 19715  002AA8  C047  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 19716  002AAC  C048  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 19717  002AB0  ECEF  F021         	call	i2___lwmod	;wreg free
 19718  002AB4  C001  F006         	movff	?i2___lwmod,i2___lwdiv@dividend
 19719  002AB8  C002  F007         	movff	?i2___lwmod+1,i2___lwdiv@dividend+1
 19720  002ABC  0E00               	movlw	0
 19721  002ABE  6E09               	movwf	i2___lwdiv@divisor+1,c
 19722  002AC0  0E3C               	movlw	60
 19723  002AC2  6E08               	movwf	i2___lwdiv@divisor,c
 19724  002AC4  EC30  F021         	call	i2___lwdiv	;wreg free
 19725  002AC8  C006  F041         	movff	?i2___lwdiv,printSortTimer@min
 19726  002ACC  C007  F042         	movff	?i2___lwdiv+1,printSortTimer@min+1
 19727                           
 19728                           ;sort.c: 330: int sec = (timeDiff % 3600) % 60;
 19729  002AD0  0E0E               	movlw	14
 19730  002AD2  6E04               	movwf	i2___lwmod@divisor+1,c
 19731  002AD4  0E10               	movlw	16
 19732  002AD6  6E03               	movwf	i2___lwmod@divisor,c
 19733  002AD8  C047  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 19734  002ADC  C048  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 19735  002AE0  ECEF  F021         	call	i2___lwmod	;wreg free
 19736  002AE4  C001  F045         	movff	?i2___lwmod,_printSortTimer$2434
 19737  002AE8  C002  F046         	movff	?i2___lwmod+1,_printSortTimer$2434+1
 19738                           
 19739                           ;sort.c: 330: int sec = (timeDiff % 3600) % 60;
 19740  002AEC  C045  F001         	movff	_printSortTimer$2434,i2___lwmod@dividend
 19741  002AF0  C046  F002         	movff	_printSortTimer$2434+1,i2___lwmod@dividend+1
 19742  002AF4  0E00               	movlw	0
 19743  002AF6  6E04               	movwf	i2___lwmod@divisor+1,c
 19744  002AF8  0E3C               	movlw	60
 19745  002AFA  6E03               	movwf	i2___lwmod@divisor,c
 19746  002AFC  ECEF  F021         	call	i2___lwmod	;wreg free
 19747  002B00  C001  F043         	movff	?i2___lwmod,printSortTimer@sec
 19748  002B04  C002  F044         	movff	?i2___lwmod+1,printSortTimer@sec+1
 19749                           
 19750                           ;sort.c: 332: lcdInst(0b10000000);;
 19751  002B08  0E80               	movlw	128
 19752  002B0A  ECEA  F024         	call	i2_lcdInst
 19753                           
 19754                           ;sort.c: 333: printf("SORTING...");
 19755  002B0E  0E7C               	movlw	low STR_64
 19756  002B10  6E0D               	movwf	i2printf@f,c
 19757  002B12  0EFF               	movlw	high STR_64
 19758  002B14  6E0E               	movwf	i2printf@f+1,c
 19759  002B16  EC96  F00C         	call	i2_printf	;wreg free
 19760                           
 19761                           ;sort.c: 334: lcdInst(0b11000000);;
 19762  002B1A  0EC0               	movlw	192
 19763  002B1C  ECEA  F024         	call	i2_lcdInst
 19764                           
 19765                           ;sort.c: 335: printf("TIME %d:%02d", min, sec);
 19766  002B20  0E42               	movlw	low STR_65
 19767  002B22  6E0D               	movwf	i2printf@f,c
 19768  002B24  0EFF               	movlw	high STR_65
 19769  002B26  6E0E               	movwf	i2printf@f+1,c
 19770  002B28  C041  F00F         	movff	printSortTimer@min,?i2_printf+2
 19771  002B2C  C042  F010         	movff	printSortTimer@min+1,?i2_printf+3
 19772  002B30  C043  F011         	movff	printSortTimer@sec,?i2_printf+4
 19773  002B34  C044  F012         	movff	printSortTimer@sec+1,?i2_printf+5
 19774  002B38  EC96  F00C         	call	i2_printf	;wreg free
 19775  002B3C  0012               	return		;funcret
 19776  002B3E                     __end_of_printSortTimer:
 19777                           	opt stack 0
 19778                           pclatu	equ	0xFFB
 19779                           pclath	equ	0xFFA
 19780                           tblptru	equ	0xFF8
 19781                           tblptrh	equ	0xFF7
 19782                           tblptrl	equ	0xFF6
 19783                           tablat	equ	0xFF5
 19784                           prodh	equ	0xFF4
 19785                           prodl	equ	0xFF3
 19786                           intcon	equ	0xFF2
 19787                           intcon2	equ	0xFF1
 19788                           intcon3	equ	0xFF0
 19789                           indf0	equ	0xFEF
 19790                           postinc0	equ	0xFEE
 19791                           fsr0h	equ	0xFEA
 19792                           fsr0l	equ	0xFE9
 19793                           wreg	equ	0xFE8
 19794                           postdec1	equ	0xFE5
 19795                           fsr1h	equ	0xFE2
 19796                           fsr1l	equ	0xFE1
 19797                           indf2	equ	0xFDF
 19798                           postinc2	equ	0xFDE
 19799                           postdec2	equ	0xFDD
 19800                           fsr2h	equ	0xFDA
 19801                           fsr2l	equ	0xFD9
 19802                           status	equ	0xFD8
 19803                           
 19804 ;; *************** function i2_printf *****************
 19805 ;; Defined at:
 19806 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 19807 ;; Parameters:    Size  Location     Type
 19808 ;;  f               2   12[COMRAM] PTR const unsigned char 
 19809 ;;		 -> STR_119(18), STR_118(18), STR_117(18), STR_116(18), 
 19810 ;;		 -> STR_115(17), STR_114(17), STR_113(11), STR_112(18), 
 19811 ;;		 -> STR_111(18), STR_110(17), STR_109(15), STR_108(15), 
 19812 ;;		 -> STR_107(15), STR_106(17), STR_105(17), STR_104(17), 
 19813 ;;		 -> STR_103(16), STR_102(17), STR_101(17), STR_100(17), 
 19814 ;;		 -> STR_99(17), STR_98(17), STR_97(17), STR_96(15), 
 19815 ;;		 -> STR_95(11), STR_94(17), STR_93(11), STR_92(17), 
 19816 ;;		 -> STR_91(14), STR_90(15), STR_89(14), STR_88(10), 
 19817 ;;		 -> STR_87(9), STR_86(9), STR_85(10), STR_84(10), 
 19818 ;;		 -> STR_83(16), STR_82(15), STR_81(3), STR_80(15), 
 19819 ;;		 -> STR_79(13), STR_78(14), STR_77(8), STR_76(14), 
 19820 ;;		 -> STR_75(15), STR_74(12), STR_73(14), STR_72(17), 
 19821 ;;		 -> STR_71(14), STR_70(15), STR_69(17), STR_68(17), 
 19822 ;;		 -> STR_67(7), STR_66(21), STR_65(13), STR_64(11), 
 19823 ;;		 -> STR_63(24), STR_50(17), STR_49(17), STR_48(17), 
 19824 ;;		 -> STR_47(17), STR_46(17), STR_45(17), STR_44(17), 
 19825 ;;		 -> STR_43(17), STR_42(17), STR_41(17), STR_40(17), 
 19826 ;;		 -> STR_39(17), STR_38(17), STR_37(17), STR_36(17), 
 19827 ;;		 -> STR_35(17), STR_34(17), STR_33(17), STR_32(17), 
 19828 ;;		 -> STR_31(17), STR_30(17), STR_29(3), STR_28(17), 
 19829 ;;		 -> STR_27(17), STR_26(17), STR_25(17), STR_24(17), 
 19830 ;;		 -> STR_23(14), STR_22(10), STR_21(24), STR_7(7), 
 19831 ;;		 -> STR_6(17), STR_5(18), STR_4(16), STR_3(18), 
 19832 ;;		 -> STR_2(14), STR_1(18), 
 19833 ;; Auto vars:     Size  Location     Type
 19834 ;;  printf          4    0        struct .
 19835 ;;  printf          2   39[COMRAM] int 
 19836 ;;  printf          2   35[COMRAM] unsigned int 
 19837 ;;  printf          2   33[COMRAM] unsigned int 
 19838 ;;  printf          2   31[COMRAM] PTR void [1]
 19839 ;;		 -> ?i2_printf(2), ?_printf(2), 
 19840 ;;  printf          2   29[COMRAM] PTR const unsigned char 
 19841 ;;		 -> STR_120(7), count_total(2), printRTC@month(4), UI@month(4), 
 19842 ;;  printf          1   38[COMRAM] char 
 19843 ;;  printf          1   37[COMRAM] unsigned char 
 19844 ;;  printf          1   28[COMRAM] char 
 19845 ;; Return value:  Size  Location     Type
 19846 ;;                  2   12[COMRAM] int 
 19847 ;; Registers used:
 19848 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19849 ;; Tracked objects:
 19850 ;;		On entry : 0/0
 19851 ;;		On exit  : 0/0
 19852 ;;		Unchanged: 0/0
 19853 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19854 ;;      Params:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19855 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19856 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19857 ;;      Totals:        29       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19858 ;;Total ram usage:       29 bytes
 19859 ;; Hardware stack levels used:    1
 19860 ;; Hardware stack levels required when called:    2
 19861 ;; This function calls:
 19862 ;;		i2___lwdiv
 19863 ;;		i2___lwmod
 19864 ;;		i2___wmul
 19865 ;;		i2_isdigit
 19866 ;;		i2_putch
 19867 ;; This function is called by:
 19868 ;;		_change_state_to_menu_11
 19869 ;;		_change_state_to_menu_23
 19870 ;;		_change_state_to_logs_11
 19871 ;;		_change_state_to_logs_12
 19872 ;;		_change_state_to_logs_22
 19873 ;;		_change_state_to_logs_23
 19874 ;;		_change_state_to_logs_33
 19875 ;;		_change_state_to_logs_34
 19876 ;;		_printSortTimer
 19877 ;;		i2_change_state_to_menu_start
 19878 ;;		i2_change_state_to_menu_12
 19879 ;;		i2_change_state_to_menu_22
 19880 ;;		i2_printRTC
 19881 ;; This function uses a non-reentrant model
 19882 ;;
 19883                           
 19884                           	psect	text79
 19885  00192C                     __ptext79:
 19886                           	opt stack 0
 19887  00192C                     i2_printf:
 19888                           	opt stack 19
 19889                           
 19890                           ;doprnt.c: 466: va_list ap;
 19891                           ;doprnt.c: 499: signed char c;
 19892                           ;doprnt.c: 501: int width;
 19893                           ;doprnt.c: 506: signed char prec;
 19894                           ;doprnt.c: 508: unsigned char flag;
 19895                           ;doprnt.c: 523: union {
 19896                           ;doprnt.c: 524: unsigned long vd;
 19897                           ;doprnt.c: 525: double integ;
 19898                           ;doprnt.c: 526: } tmpval;
 19899                           ;doprnt.c: 528: unsigned int val;
 19900                           ;doprnt.c: 529: unsigned len;
 19901                           ;doprnt.c: 530: const char * cp;
 19902                           ;doprnt.c: 533: *ap = __va_start();
 19903                           
 19904                           ;incstack = 0
 19905  00192C  0E0F               	movlw	low (?i2_printf+2)
 19906  00192E  6E20               	movwf	i2printf@ap,c
 19907  001930  0E00               	movlw	high (?i2_printf+2)
 19908  001932  6E21               	movwf	i2printf@ap+1,c
 19909                           
 19910                           ;doprnt.c: 536: while(c = *f++) {
 19911  001934  D1A4               	goto	i2l5962
 19912  001936                     i2l5832:
 19913                           
 19914                           ;doprnt.c: 538: if(c != '%')
 19915  001936  0E25               	movlw	37
 19916  001938  1827               	xorwf	i2printf@c,w,c
 19917  00193A  B4D8               	btfsc	status,2,c
 19918  00193C  D004               	goto	i2l5836
 19919                           
 19920                           ;doprnt.c: 540: {
 19921                           ;doprnt.c: 541: (putch(c) );
 19922  00193E  5027               	movf	i2printf@c,w,c
 19923  001940  ECE4  F024         	call	i2_putch
 19924                           
 19925                           ;doprnt.c: 542: continue;
 19926  001944  D19C               	goto	i2l5962
 19927  001946                     i2l5836:
 19928                           
 19929                           ;doprnt.c: 543: }
 19930                           ;doprnt.c: 546: width = 0;
 19931  001946  0E00               	movlw	0
 19932  001948  6E29               	movwf	i2printf@width+1,c
 19933  00194A  0E00               	movlw	0
 19934  00194C  6E28               	movwf	i2printf@width,c
 19935                           
 19936                           ;doprnt.c: 548: flag = 0;
 19937  00194E  0E00               	movlw	0
 19938  001950  6E26               	movwf	i2printf@flag,c
 19939                           
 19940                           ;doprnt.c: 551: switch(*f) {
 19941                           
 19942                           ;doprnt.c: 550: for(;;) {
 19943  001952  D003               	goto	i2l5842
 19944  001954                     i2l5838:
 19945                           
 19946                           ;doprnt.c: 580: flag |= 0x04;
 19947  001954  8426               	bsf	i2printf@flag,2,c
 19948                           
 19949                           ;doprnt.c: 581: f++;
 19950  001956  4A0D               	infsnz	i2printf@f,f,c
 19951  001958  2A0E               	incf	i2printf@f+1,f,c
 19952  00195A                     i2l5842:
 19953  00195A  C00D  FFF6         	movff	i2printf@f,tblptrl
 19954  00195E  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 19955  001962                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 19956  001962  6AF8               	clrf	tblptru,c
 19957  001964                     	endif
 19958  001964                     	if	0	;tblptru may be non-zero
 19959  001964                     	endif
 19960  001964  0008               	tblrd		*
 19961  001966  50F5               	movf	tablat,w,c
 19962                           
 19963                           ; Switch size 1, requested type "space"
 19964                           ; Number of cases is 1, Range of values is 48 to 48
 19965                           ; switch strategies available:
 19966                           ; Name         Instructions Cycles
 19967                           ; simple_byte            4     3 (average)
 19968                           ;	Chosen strategy is simple_byte
 19969  001968  0A30               	xorlw	48	; case 48
 19970  00196A  B4D8               	btfsc	status,2,c
 19971  00196C  D7F3               	goto	i2l5838
 19972                           
 19973                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 19974                           
 19975                           ;doprnt.c: 586: }
 19976                           
 19977                           ;doprnt.c: 585: break;
 19978  00196E  C00D  FFF6         	movff	i2printf@f,tblptrl
 19979  001972  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 19980  001976                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 19981  001976  6AF8               	clrf	tblptru,c
 19982  001978                     	endif
 19983  001978                     	if	0	;tblptru may be non-zero
 19984  001978                     	endif
 19985  001978  0008               	tblrd		*
 19986  00197A  50F5               	movf	tablat,w,c
 19987  00197C  EC90  F024         	call	i2_isdigit
 19988  001980  A0D8               	btfss	status,0,c
 19989  001982  D0A6               	goto	i2l5890
 19990                           
 19991                           ;doprnt.c: 598: width = 0;
 19992  001984  0E00               	movlw	0
 19993  001986  6E29               	movwf	i2printf@width+1,c
 19994  001988  0E00               	movlw	0
 19995  00198A  6E28               	movwf	i2printf@width,c
 19996  00198C                     i2l5848:
 19997                           
 19998                           ;doprnt.c: 600: width *= 10;
 19999  00198C  C028  F001         	movff	i2printf@width,i2___wmul@multiplier
 20000  001990  C029  F002         	movff	i2printf@width+1,i2___wmul@multiplier+1
 20001  001994  0E00               	movlw	0
 20002  001996  6E04               	movwf	i2___wmul@multiplicand+1,c
 20003  001998  0E0A               	movlw	10
 20004  00199A  6E03               	movwf	i2___wmul@multiplicand,c
 20005  00199C  EC36  F024         	call	i2___wmul	;wreg free
 20006  0019A0  C001  F028         	movff	?i2___wmul,i2printf@width
 20007  0019A4  C002  F029         	movff	?i2___wmul+1,i2printf@width+1
 20008                           
 20009                           ;doprnt.c: 601: width += *f++ - '0';
 20010  0019A8  0ED0               	movlw	208
 20011  0019AA  6E19               	movwf	??i2_printf& (0+255),c
 20012  0019AC  0EFF               	movlw	255
 20013  0019AE  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 20014  0019B0  C00D  FFF6         	movff	i2printf@f,tblptrl
 20015  0019B4  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 20016  0019B8                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 20017  0019B8  6AF8               	clrf	tblptru,c
 20018  0019BA                     	endif
 20019  0019BA                     	if	0	;tblptru may be non-zero
 20020  0019BA                     	endif
 20021  0019BA  0008               	tblrd		*
 20022  0019BC  50F5               	movf	tablat,w,c
 20023  0019BE  6E1B               	movwf	(??i2_printf+2)& (0+255),c
 20024  0019C0  6A1C               	clrf	(??i2_printf+3)& (0+255),c
 20025  0019C2  5019               	movf	??i2_printf,w,c
 20026  0019C4  261B               	addwf	??i2_printf+2,f,c
 20027  0019C6  501A               	movf	??i2_printf+1,w,c
 20028  0019C8  221C               	addwfc	??i2_printf+3,f,c
 20029  0019CA  501B               	movf	??i2_printf+2,w,c
 20030  0019CC  2628               	addwf	i2printf@width,f,c
 20031  0019CE  501C               	movf	??i2_printf+3,w,c
 20032  0019D0  2229               	addwfc	i2printf@width+1,f,c
 20033  0019D2  4A0D               	infsnz	i2printf@f,f,c
 20034  0019D4  2A0E               	incf	i2printf@f+1,f,c
 20035                           
 20036                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 20037  0019D6  C00D  FFF6         	movff	i2printf@f,tblptrl
 20038  0019DA  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 20039  0019DE                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 20040  0019DE  6AF8               	clrf	tblptru,c
 20041  0019E0                     	endif
 20042  0019E0                     	if	0	;tblptru may be non-zero
 20043  0019E0                     	endif
 20044  0019E0  0008               	tblrd		*
 20045  0019E2  50F5               	movf	tablat,w,c
 20046  0019E4  EC90  F024         	call	i2_isdigit
 20047  0019E8  A0D8               	btfss	status,0,c
 20048  0019EA  D072               	goto	i2l5890
 20049  0019EC  D7CF               	goto	i2l5848
 20050  0019EE                     i2l5856:
 20051                           
 20052                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 20053  0019EE  C020  FFD9         	movff	i2printf@ap,fsr2l
 20054  0019F2  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 20055  0019F6  CFDE F01E          	movff	postinc2,i2printf@cp
 20056  0019FA  CFDD F01F          	movff	postdec2,i2printf@cp+1
 20057  0019FE  0E02               	movlw	2
 20058  001A00  2620               	addwf	i2printf@ap,f,c
 20059  001A02  0E00               	movlw	0
 20060  001A04  2221               	addwfc	i2printf@ap+1,f,c
 20061                           
 20062                           ;doprnt.c: 740: if(!cp)
 20063  001A06  501E               	movf	i2printf@cp,w,c
 20064  001A08  101F               	iorwf	i2printf@cp+1,w,c
 20065  001A0A  A4D8               	btfss	status,2,c
 20066  001A0C  D004               	goto	i2l5864
 20067                           
 20068                           ;doprnt.c: 741: cp = "(null)";
 20069  001A0E  0EB6               	movlw	low STR_120
 20070  001A10  6E1E               	movwf	i2printf@cp,c
 20071  001A12  0EFF               	movlw	high STR_120
 20072  001A14  6E1F               	movwf	i2printf@cp+1,c
 20073  001A16                     i2l5864:
 20074                           
 20075                           ;doprnt.c: 745: len = 0;
 20076  001A16  0E00               	movlw	0
 20077  001A18  6E23               	movwf	i2printf@len+1,c
 20078  001A1A  0E00               	movlw	0
 20079  001A1C  6E22               	movwf	i2printf@len,c
 20080                           
 20081                           ;doprnt.c: 746: while(cp[len])
 20082  001A1E  D002               	goto	i2l5868
 20083  001A20                     i2l5866:
 20084                           
 20085                           ;doprnt.c: 747: len++;
 20086  001A20  4A22               	infsnz	i2printf@len,f,c
 20087  001A22  2A23               	incf	i2printf@len+1,f,c
 20088  001A24                     i2l5868:
 20089  001A24  5022               	movf	i2printf@len,w,c
 20090  001A26  241E               	addwf	i2printf@cp,w,c
 20091  001A28  6E19               	movwf	??i2_printf& (0+255),c
 20092  001A2A  5023               	movf	i2printf@len+1,w,c
 20093  001A2C  201F               	addwfc	i2printf@cp+1,w,c
 20094  001A2E  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 20095  001A30  C019  FFF6         	movff	??i2_printf,tblptrl
 20096  001A34  C01A  FFF7         	movff	??i2_printf+1,tblptrh
 20097  001A38  0E00               	movlw	low (__mediumconst shr (0+16))
 20098  001A3A  6EF8               	movwf	tblptru,c
 20099  001A3C  0E0F               	movlw	(high __ramtop+-1)
 20100  001A3E  64F7               	cpfsgt	tblptrh,c
 20101  001A40  D003               	bra	i2u438_47
 20102  001A42  0008               	tblrd		*
 20103  001A44  50F5               	movf	tablat,w,c
 20104  001A46  D005               	bra	i2u438_40
 20105  001A48                     i2u438_47:
 20106  001A48  CFF6 FFE9          	movff	tblptrl,fsr0l
 20107  001A4C  CFF7 FFEA          	movff	tblptrh,fsr0h
 20108  001A50  50EF               	movf	indf0,w,c
 20109  001A52                     i2u438_40:
 20110  001A52  0900               	iorlw	0
 20111  001A54  A4D8               	btfss	status,2,c
 20112  001A56  D7E4               	goto	i2l5866
 20113                           
 20114                           ;doprnt.c: 757: if(width > len)
 20115  001A58  5028               	movf	i2printf@width,w,c
 20116  001A5A  5C22               	subwf	i2printf@len,w,c
 20117  001A5C  5029               	movf	i2printf@width+1,w,c
 20118  001A5E  5823               	subwfb	i2printf@len+1,w,c
 20119  001A60  B0D8               	btfsc	status,0,c
 20120  001A62  D005               	goto	i2l5874
 20121                           
 20122                           ;doprnt.c: 758: width -= len;
 20123  001A64  5022               	movf	i2printf@len,w,c
 20124  001A66  5E28               	subwf	i2printf@width,f,c
 20125  001A68  5023               	movf	i2printf@len+1,w,c
 20126  001A6A  5A29               	subwfb	i2printf@width+1,f,c
 20127  001A6C  D008               	goto	i2l5878
 20128  001A6E                     i2l5874:
 20129                           
 20130                           ;doprnt.c: 759: else
 20131                           ;doprnt.c: 760: width = 0;
 20132  001A6E  0E00               	movlw	0
 20133  001A70  6E29               	movwf	i2printf@width+1,c
 20134  001A72  0E00               	movlw	0
 20135  001A74  6E28               	movwf	i2printf@width,c
 20136                           
 20137                           ;doprnt.c: 764: while(width--)
 20138  001A76  D003               	goto	i2l5878
 20139  001A78                     i2l5876:
 20140                           
 20141                           ;doprnt.c: 765: (putch(' ') );
 20142  001A78  0E20               	movlw	32
 20143  001A7A  ECE4  F024         	call	i2_putch
 20144  001A7E                     i2l5878:
 20145  001A7E  0628               	decf	i2printf@width,f,c
 20146  001A80  A0D8               	btfss	status,0,c
 20147  001A82  0629               	decf	i2printf@width+1,f,c
 20148  001A84  2828               	incf	i2printf@width,w,c
 20149  001A86  E1F8               	bnz	i2l5876
 20150  001A88  2829               	incf	i2printf@width+1,w,c
 20151  001A8A  B4D8               	btfsc	status,2,c
 20152  001A8C  D016               	goto	i2l5884
 20153  001A8E  D7F4               	goto	i2l5876
 20154  001A90                     i2l5880:
 20155                           
 20156                           ;doprnt.c: 768: (putch(*cp++) );
 20157  001A90  C01E  FFF6         	movff	i2printf@cp,tblptrl
 20158  001A94  C01F  FFF7         	movff	i2printf@cp+1,tblptrh
 20159  001A98  0E00               	movlw	low (__mediumconst shr (0+16))
 20160  001A9A  6EF8               	movwf	tblptru,c
 20161  001A9C  0E0F               	movlw	(high __ramtop+-1)
 20162  001A9E  64F7               	cpfsgt	tblptrh,c
 20163  001AA0  D003               	bra	i2u442_47
 20164  001AA2  0008               	tblrd		*
 20165  001AA4  50F5               	movf	tablat,w,c
 20166  001AA6  D005               	bra	i2u442_40
 20167  001AA8                     i2u442_47:
 20168  001AA8  CFF6 FFE9          	movff	tblptrl,fsr0l
 20169  001AAC  CFF7 FFEA          	movff	tblptrh,fsr0h
 20170  001AB0  50EF               	movf	indf0,w,c
 20171  001AB2                     i2u442_40:
 20172  001AB2  ECE4  F024         	call	i2_putch
 20173  001AB6  4A1E               	infsnz	i2printf@cp,f,c
 20174  001AB8  2A1F               	incf	i2printf@cp+1,f,c
 20175  001ABA                     i2l5884:
 20176  001ABA  0622               	decf	i2printf@len,f,c
 20177  001ABC  A0D8               	btfss	status,0,c
 20178  001ABE  0623               	decf	i2printf@len+1,f,c
 20179  001AC0  2822               	incf	i2printf@len,w,c
 20180  001AC2  E1E6               	bnz	i2l5880
 20181  001AC4  2823               	incf	i2printf@len+1,w,c
 20182  001AC6  B4D8               	btfsc	status,2,c
 20183  001AC8  D0DA               	goto	i2l5962
 20184  001ACA  D7E2               	goto	i2l5880
 20185  001ACC                     i2l5886:
 20186                           
 20187                           ;doprnt.c: 818: flag |= 0x40;
 20188  001ACC  8C26               	bsf	i2printf@flag,6,c
 20189                           
 20190                           ;doprnt.c: 822: }
 20191                           
 20192                           ;doprnt.c: 819: break;
 20193  001ACE  D01B               	goto	i2l1308
 20194  001AD0                     i2l5890:
 20195  001AD0  C00D  FFF6         	movff	i2printf@f,tblptrl
 20196  001AD4  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 20197  001AD8  4A0D               	infsnz	i2printf@f,f,c
 20198  001ADA  2A0E               	incf	i2printf@f+1,f,c
 20199  001ADC                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 20200  001ADC  6AF8               	clrf	tblptru,c
 20201  001ADE                     	endif
 20202  001ADE                     	if	0	;tblptru may be non-zero
 20203  001ADE                     	endif
 20204  001ADE  0008               	tblrd		*
 20205  001AE0  CFF5 F027          	movff	tablat,i2printf@c
 20206  001AE4  5027               	movf	i2printf@c,w,c
 20207                           
 20208                           ; Switch size 1, requested type "space"
 20209                           ; Number of cases is 5, Range of values is 0 to 117
 20210                           ; switch strategies available:
 20211                           ; Name         Instructions Cycles
 20212                           ; simple_byte           16     9 (average)
 20213                           ;	Chosen strategy is simple_byte
 20214  001AE6  0A00               	xorlw	0	; case 0
 20215  001AE8  B4D8               	btfsc	status,2,c
 20216  001AEA  0012               	return	
 20217  001AEC  0A64               	xorlw	100	; case 100
 20218  001AEE  B4D8               	btfsc	status,2,c
 20219  001AF0  D00A               	goto	i2l1308
 20220  001AF2  0A0D               	xorlw	13	; case 105
 20221  001AF4  B4D8               	btfsc	status,2,c
 20222  001AF6  D007               	goto	i2l1308
 20223  001AF8  0A1A               	xorlw	26	; case 115
 20224  001AFA  B4D8               	btfsc	status,2,c
 20225  001AFC  D778               	goto	i2l5856
 20226  001AFE  0A06               	xorlw	6	; case 117
 20227  001B00  B4D8               	btfsc	status,2,c
 20228  001B02  D7E4               	goto	i2l5886
 20229  001B04  D0BC               	goto	i2l5962
 20230  001B06                     i2l1308:
 20231                           
 20232                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
 20233  001B06  BC26               	btfsc	i2printf@flag,6,c
 20234  001B08  D015               	goto	i2l5902
 20235                           
 20236                           ;doprnt.c: 1253: {
 20237                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 20238  001B0A  C020  FFD9         	movff	i2printf@ap,fsr2l
 20239  001B0E  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 20240  001B12  CFDE F024          	movff	postinc2,i2printf@val
 20241  001B16  CFDD F025          	movff	postdec2,i2printf@val+1
 20242  001B1A  0E02               	movlw	2
 20243  001B1C  2620               	addwf	i2printf@ap,f,c
 20244  001B1E  0E00               	movlw	0
 20245  001B20  2221               	addwfc	i2printf@ap+1,f,c
 20246                           
 20247                           ;doprnt.c: 1261: if((int)val < 0) {
 20248  001B22  AE25               	btfss	i2printf@val+1,7,c
 20249  001B24  D013               	goto	i2l5906
 20250                           
 20251                           ;doprnt.c: 1262: flag |= 0x03;
 20252  001B26  0E03               	movlw	3
 20253  001B28  1226               	iorwf	i2printf@flag,f,c
 20254                           
 20255                           ;doprnt.c: 1263: val = -val;
 20256  001B2A  6C24               	negf	i2printf@val,c
 20257  001B2C  1E25               	comf	i2printf@val+1,f,c
 20258  001B2E  B0D8               	btfsc	status,0,c
 20259  001B30  2A25               	incf	i2printf@val+1,f,c
 20260                           
 20261                           ;doprnt.c: 1264: }
 20262                           ;doprnt.c: 1266: }
 20263  001B32  D00C               	goto	i2l5906
 20264  001B34                     i2l5902:
 20265                           
 20266                           ;doprnt.c: 1268: else
 20267                           ;doprnt.c: 1273: {
 20268                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 20269  001B34  C020  FFD9         	movff	i2printf@ap,fsr2l
 20270  001B38  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 20271  001B3C  CFDE F024          	movff	postinc2,i2printf@val
 20272  001B40  CFDD F025          	movff	postdec2,i2printf@val+1
 20273  001B44  0E02               	movlw	2
 20274  001B46  2620               	addwf	i2printf@ap,f,c
 20275  001B48  0E00               	movlw	0
 20276  001B4A  2221               	addwfc	i2printf@ap+1,f,c
 20277  001B4C                     i2l5906:
 20278                           
 20279                           ;doprnt.c: 1287: }
 20280                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 20281  001B4C  0E01               	movlw	1
 20282  001B4E  6E27               	movwf	i2printf@c,c
 20283  001B50                     i2l5908:
 20284  001B50  0E05               	movlw	5
 20285  001B52  1827               	xorwf	i2printf@c,w,c
 20286  001B54  B4D8               	btfsc	status,2,c
 20287  001B56  D015               	goto	i2l5920
 20288                           
 20289                           ;doprnt.c: 1306: if(val < dpowers[c])
 20290  001B58  5027               	movf	i2printf@c,w,c
 20291  001B5A  0D02               	mullw	2
 20292  001B5C  0E12               	movlw	low _dpowers
 20293  001B5E  24F3               	addwf	prodl,w,c
 20294  001B60  6EF6               	movwf	tblptrl,c
 20295  001B62  0EFB               	movlw	high _dpowers
 20296  001B64  20F4               	addwfc	prodh,w,c
 20297  001B66  6EF7               	movwf	tblptrh,c
 20298  001B68                     	if	1	;There are 3 active tblptr bytes
 20299  001B68  6AF8               	clrf	tblptru,c
 20300  001B6A  0E00               	movlw	low (__mediumconst shr (0+16))
 20301  001B6C  22F8               	addwfc	tblptru,f,c
 20302  001B6E                     	endif
 20303  001B6E  0009               	tblrd		*+
 20304  001B70  50F5               	movf	tablat,w,c
 20305  001B72  5C24               	subwf	i2printf@val,w,c
 20306  001B74  0009               	tblrd		*+
 20307  001B76  50F5               	movf	tablat,w,c
 20308  001B78  5825               	subwfb	i2printf@val+1,w,c
 20309  001B7A  A0D8               	btfss	status,0,c
 20310  001B7C  D002               	goto	i2l5920
 20311                           
 20312                           ;doprnt.c: 1307: break;
 20313  001B7E  2A27               	incf	i2printf@c,f,c
 20314  001B80  D7E7               	goto	i2l5908
 20315  001B82                     i2l5920:
 20316                           
 20317                           ;doprnt.c: 1345: if(width && flag & 0x03)
 20318  001B82  5028               	movf	i2printf@width,w,c
 20319  001B84  1029               	iorwf	i2printf@width+1,w,c
 20320  001B86  B4D8               	btfsc	status,2,c
 20321  001B88  D009               	goto	i2l5926
 20322  001B8A  C026  F019         	movff	i2printf@flag,??i2_printf
 20323  001B8E  0E03               	movlw	3
 20324  001B90  1619               	andwf	??i2_printf,f,c
 20325  001B92  B4D8               	btfsc	status,2,c
 20326  001B94  D003               	goto	i2l5926
 20327                           
 20328                           ;doprnt.c: 1346: width--;
 20329  001B96  0628               	decf	i2printf@width,f,c
 20330  001B98  A0D8               	btfss	status,0,c
 20331  001B9A  0629               	decf	i2printf@width+1,f,c
 20332  001B9C                     i2l5926:
 20333                           
 20334                           ;doprnt.c: 1381: if(width > c)
 20335  001B9C  0E80               	movlw	128
 20336  001B9E  BE27               	btfsc	i2printf@c,7,c
 20337  001BA0  0E7F               	movlw	127
 20338  001BA2  6E19               	movwf	??i2_printf& (0+255),c
 20339  001BA4  5028               	movf	i2printf@width,w,c
 20340  001BA6  5C27               	subwf	i2printf@c,w,c
 20341  001BA8  5029               	movf	i2printf@width+1,w,c
 20342  001BAA  0A80               	xorlw	128
 20343  001BAC  5819               	subwfb	??i2_printf& (0+255),w,c
 20344  001BAE  B0D8               	btfsc	status,0,c
 20345  001BB0  D007               	goto	i2l5930
 20346                           
 20347                           ;doprnt.c: 1382: width -= c;
 20348  001BB2  5027               	movf	i2printf@c,w,c
 20349  001BB4  5E28               	subwf	i2printf@width,f,c
 20350  001BB6  0E00               	movlw	0
 20351  001BB8  BE27               	btfsc	i2printf@c,7,c
 20352  001BBA  0EFF               	movlw	255
 20353  001BBC  5A29               	subwfb	i2printf@width+1,f,c
 20354  001BBE  D004               	goto	i2l5932
 20355  001BC0                     i2l5930:
 20356                           
 20357                           ;doprnt.c: 1383: else
 20358                           ;doprnt.c: 1384: width = 0;
 20359  001BC0  0E00               	movlw	0
 20360  001BC2  6E29               	movwf	i2printf@width+1,c
 20361  001BC4  0E00               	movlw	0
 20362  001BC6  6E28               	movwf	i2printf@width,c
 20363  001BC8                     i2l5932:
 20364                           
 20365                           ;doprnt.c: 1387: if(flag & 0x04) {
 20366  001BC8  A426               	btfss	i2printf@flag,2,c
 20367  001BCA  D014               	goto	i2l5944
 20368                           
 20369                           ;doprnt.c: 1392: if(flag & 0x03)
 20370  001BCC  C026  F019         	movff	i2printf@flag,??i2_printf
 20371  001BD0  0E03               	movlw	3
 20372  001BD2  1619               	andwf	??i2_printf,f,c
 20373  001BD4  B4D8               	btfsc	status,2,c
 20374  001BD6  D003               	goto	i2l5938
 20375                           
 20376                           ;doprnt.c: 1393: (putch('-') );
 20377  001BD8  0E2D               	movlw	45
 20378  001BDA  ECE4  F024         	call	i2_putch
 20379  001BDE                     i2l5938:
 20380                           
 20381                           ;doprnt.c: 1415: if(width)
 20382  001BDE  5028               	movf	i2printf@width,w,c
 20383  001BE0  1029               	iorwf	i2printf@width+1,w,c
 20384  001BE2  B4D8               	btfsc	status,2,c
 20385  001BE4  D01E               	goto	i2l5954
 20386                           
 20387                           ;doprnt.c: 1417: (putch('0') );
 20388                           
 20389                           ;doprnt.c: 1416: do
 20390  001BE6  0E30               	movlw	48
 20391  001BE8  ECE4  F024         	call	i2_putch
 20392                           
 20393                           ;doprnt.c: 1418: while(--width);
 20394  001BEC  0628               	decf	i2printf@width,f,c
 20395  001BEE  A0D8               	btfss	status,0,c
 20396  001BF0  0629               	decf	i2printf@width+1,f,c
 20397  001BF2  D7F5               	goto	i2l5938
 20398  001BF4                     i2l5944:
 20399                           
 20400                           ;doprnt.c: 1422: {
 20401                           ;doprnt.c: 1424: if(width
 20402                           ;doprnt.c: 1428: )
 20403  001BF4  5028               	movf	i2printf@width,w,c
 20404  001BF6  1029               	iorwf	i2printf@width+1,w,c
 20405  001BF8  B4D8               	btfsc	status,2,c
 20406  001BFA  D00A               	goto	i2l5950
 20407  001BFC                     i2l5946:
 20408                           
 20409                           ;doprnt.c: 1430: (putch(' ') );
 20410  001BFC  0E20               	movlw	32
 20411  001BFE  ECE4  F024         	call	i2_putch
 20412                           
 20413                           ;doprnt.c: 1431: while(--width);
 20414  001C02  0628               	decf	i2printf@width,f,c
 20415  001C04  A0D8               	btfss	status,0,c
 20416  001C06  0629               	decf	i2printf@width+1,f,c
 20417  001C08  5028               	movf	i2printf@width,w,c
 20418  001C0A  1029               	iorwf	i2printf@width+1,w,c
 20419  001C0C  A4D8               	btfss	status,2,c
 20420  001C0E  D7F6               	goto	i2l5946
 20421  001C10                     i2l5950:
 20422                           
 20423                           ;doprnt.c: 1438: if(flag & 0x03)
 20424  001C10  C026  F019         	movff	i2printf@flag,??i2_printf
 20425  001C14  0E03               	movlw	3
 20426  001C16  1619               	andwf	??i2_printf,f,c
 20427  001C18  B4D8               	btfsc	status,2,c
 20428  001C1A  D003               	goto	i2l5954
 20429                           
 20430                           ;doprnt.c: 1439: (putch('-') );
 20431  001C1C  0E2D               	movlw	45
 20432  001C1E  ECE4  F024         	call	i2_putch
 20433  001C22                     i2l5954:
 20434                           
 20435                           ;doprnt.c: 1469: }
 20436                           ;doprnt.c: 1472: prec = c;
 20437  001C22  C027  F01D         	movff	i2printf@c,i2printf@prec
 20438                           
 20439                           ;doprnt.c: 1474: while(prec--) {
 20440  001C26  D027               	goto	i2l5960
 20441  001C28                     i2l5956:
 20442                           
 20443                           ;doprnt.c: 1478: {
 20444                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 20445  001C28  501D               	movf	i2printf@prec,w,c
 20446  001C2A  0D02               	mullw	2
 20447  001C2C  0E12               	movlw	low _dpowers
 20448  001C2E  24F3               	addwf	prodl,w,c
 20449  001C30  6EF6               	movwf	tblptrl,c
 20450  001C32  0EFB               	movlw	high _dpowers
 20451  001C34  20F4               	addwfc	prodh,w,c
 20452  001C36  6EF7               	movwf	tblptrh,c
 20453  001C38                     	if	1	;There are 3 active tblptr bytes
 20454  001C38  6AF8               	clrf	tblptru,c
 20455  001C3A  0E00               	movlw	low (__mediumconst shr (0+16))
 20456  001C3C  22F8               	addwfc	tblptru,f,c
 20457  001C3E                     	endif
 20458  001C3E  0009               	tblrd		*+
 20459  001C40  CFF5 F008          	movff	tablat,i2___lwdiv@divisor
 20460  001C44  000A               	tblrd		*-
 20461  001C46  CFF5 F009          	movff	tablat,i2___lwdiv@divisor+1
 20462  001C4A  C024  F006         	movff	i2printf@val,i2___lwdiv@dividend
 20463  001C4E  C025  F007         	movff	i2printf@val+1,i2___lwdiv@dividend+1
 20464  001C52  EC30  F021         	call	i2___lwdiv	;wreg free
 20465  001C56  C006  F001         	movff	?i2___lwdiv,i2___lwmod@dividend
 20466  001C5A  C007  F002         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
 20467  001C5E  0E00               	movlw	0
 20468  001C60  6E04               	movwf	i2___lwmod@divisor+1,c
 20469  001C62  0E0A               	movlw	10
 20470  001C64  6E03               	movwf	i2___lwmod@divisor,c
 20471  001C66  ECEF  F021         	call	i2___lwmod	;wreg free
 20472  001C6A  5001               	movf	?i2___lwmod,w,c
 20473  001C6C  0F30               	addlw	48
 20474  001C6E  6E27               	movwf	i2printf@c,c
 20475                           
 20476                           ;doprnt.c: 1523: }
 20477                           ;doprnt.c: 1524: (putch(c) );
 20478  001C70  5027               	movf	i2printf@c,w,c
 20479  001C72  ECE4  F024         	call	i2_putch
 20480  001C76                     i2l5960:
 20481  001C76  061D               	decf	i2printf@prec,f,c
 20482  001C78  281D               	incf	i2printf@prec,w,c
 20483  001C7A  A4D8               	btfss	status,2,c
 20484  001C7C  D7D5               	goto	i2l5956
 20485  001C7E                     i2l5962:
 20486  001C7E  C00D  FFF6         	movff	i2printf@f,tblptrl
 20487  001C82  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 20488  001C86  4A0D               	infsnz	i2printf@f,f,c
 20489  001C88  2A0E               	incf	i2printf@f+1,f,c
 20490  001C8A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 20491  001C8A  6AF8               	clrf	tblptru,c
 20492  001C8C                     	endif
 20493  001C8C                     	if	0	;tblptru may be non-zero
 20494  001C8C                     	endif
 20495  001C8C  0008               	tblrd		*
 20496  001C8E  CFF5 F027          	movff	tablat,i2printf@c
 20497  001C92  5027               	movf	i2printf@c,w,c
 20498  001C94  B4D8               	btfsc	status,2,c
 20499  001C96  0012               	return	
 20500  001C98  D64E               	goto	i2l5832
 20501  001C9A                     __end_ofi2_printf:
 20502                           	opt stack 0
 20503                           pclatu	equ	0xFFB
 20504                           pclath	equ	0xFFA
 20505                           tblptru	equ	0xFF8
 20506                           tblptrh	equ	0xFF7
 20507                           tblptrl	equ	0xFF6
 20508                           tablat	equ	0xFF5
 20509                           prodh	equ	0xFF4
 20510                           prodl	equ	0xFF3
 20511                           intcon	equ	0xFF2
 20512                           intcon2	equ	0xFF1
 20513                           intcon3	equ	0xFF0
 20514                           indf0	equ	0xFEF
 20515                           postinc0	equ	0xFEE
 20516                           fsr0h	equ	0xFEA
 20517                           fsr0l	equ	0xFE9
 20518                           wreg	equ	0xFE8
 20519                           postdec1	equ	0xFE5
 20520                           fsr1h	equ	0xFE2
 20521                           fsr1l	equ	0xFE1
 20522                           indf2	equ	0xFDF
 20523                           postinc2	equ	0xFDE
 20524                           postdec2	equ	0xFDD
 20525                           fsr2h	equ	0xFDA
 20526                           fsr2l	equ	0xFD9
 20527                           status	equ	0xFD8
 20528                           
 20529 ;; *************** function i2_putch *****************
 20530 ;; Defined at:
 20531 ;;		line 20 in file "lcd.c"
 20532 ;; Parameters:    Size  Location     Type
 20533 ;;  data            1    wreg     unsigned char 
 20534 ;; Auto vars:     Size  Location     Type
 20535 ;;  data            1    2[COMRAM] unsigned char 
 20536 ;; Return value:  Size  Location     Type
 20537 ;;                  1    wreg      void 
 20538 ;; Registers used:
 20539 ;;		wreg, status,2, status,0, cstack
 20540 ;; Tracked objects:
 20541 ;;		On entry : 0/0
 20542 ;;		On exit  : 0/0
 20543 ;;		Unchanged: 0/0
 20544 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20545 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20546 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20547 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20548 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20549 ;;Total ram usage:        1 bytes
 20550 ;; Hardware stack levels used:    1
 20551 ;; Hardware stack levels required when called:    1
 20552 ;; This function calls:
 20553 ;;		i2_lcdNibble
 20554 ;; This function is called by:
 20555 ;;		i2_printf
 20556 ;; This function uses a non-reentrant model
 20557 ;;
 20558                           
 20559                           	psect	text80
 20560  0049C8                     __ptext80:
 20561                           	opt stack 0
 20562  0049C8                     i2_putch:
 20563                           	opt stack 19
 20564                           
 20565                           ;incstack = 0
 20566                           ;i2putch@data stored from wreg
 20567  0049C8  6E03               	movwf	i2putch@data,c
 20568                           
 20569                           ;lcd.c: 21: LATDbits.LATD2 = 1;
 20570  0049CA  848C               	bsf	3980,2,c	;volatile
 20571                           
 20572                           ;lcd.c: 22: lcdNibble(data);
 20573  0049CC  5003               	movf	i2putch@data,w,c
 20574  0049CE  ECDB  F020         	call	i2_lcdNibble
 20575  0049D2  0012               	return		;funcret
 20576  0049D4                     __end_ofi2_putch:
 20577                           	opt stack 0
 20578                           pclatu	equ	0xFFB
 20579                           pclath	equ	0xFFA
 20580                           tblptru	equ	0xFF8
 20581                           tblptrh	equ	0xFF7
 20582                           tblptrl	equ	0xFF6
 20583                           tablat	equ	0xFF5
 20584                           prodh	equ	0xFF4
 20585                           prodl	equ	0xFF3
 20586                           intcon	equ	0xFF2
 20587                           intcon2	equ	0xFF1
 20588                           intcon3	equ	0xFF0
 20589                           indf0	equ	0xFEF
 20590                           postinc0	equ	0xFEE
 20591                           fsr0h	equ	0xFEA
 20592                           fsr0l	equ	0xFE9
 20593                           wreg	equ	0xFE8
 20594                           postdec1	equ	0xFE5
 20595                           fsr1h	equ	0xFE2
 20596                           fsr1l	equ	0xFE1
 20597                           indf2	equ	0xFDF
 20598                           postinc2	equ	0xFDE
 20599                           postdec2	equ	0xFDD
 20600                           fsr2h	equ	0xFDA
 20601                           fsr2l	equ	0xFD9
 20602                           status	equ	0xFD8
 20603                           
 20604 ;; *************** function i2_isdigit *****************
 20605 ;; Defined at:
 20606 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 20607 ;; Parameters:    Size  Location     Type
 20608 ;;  c               1    wreg     unsigned char 
 20609 ;; Auto vars:     Size  Location     Type
 20610 ;;  c               1    2[COMRAM] unsigned char 
 20611 ;; Return value:  Size  Location     Type
 20612 ;;		None               void
 20613 ;; Registers used:
 20614 ;;		wreg, status,2, status,0
 20615 ;; Tracked objects:
 20616 ;;		On entry : 0/0
 20617 ;;		On exit  : 0/0
 20618 ;;		Unchanged: 0/0
 20619 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20620 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20621 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20622 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20623 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20624 ;;Total ram usage:        3 bytes
 20625 ;; Hardware stack levels used:    1
 20626 ;; This function calls:
 20627 ;;		Nothing
 20628 ;; This function is called by:
 20629 ;;		i2_printf
 20630 ;; This function uses a non-reentrant model
 20631 ;;
 20632                           
 20633                           	psect	text81
 20634  004920                     __ptext81:
 20635                           	opt stack 0
 20636  004920                     i2_isdigit:
 20637                           	opt stack 20
 20638                           
 20639                           ;incstack = 0
 20640                           ;i2isdigit@c stored from wreg
 20641  004920  6E03               	movwf	i2isdigit@c,c
 20642  004922  0E00               	movlw	0
 20643  004924  6E02               	movwf	i2_isdigit$1958,c
 20644  004926  0E3A               	movlw	58
 20645  004928  6003               	cpfslt	i2isdigit@c,c
 20646  00492A  D005               	goto	i2l5536
 20647  00492C  0E2F               	movlw	47
 20648  00492E  6403               	cpfsgt	i2isdigit@c,c
 20649  004930  D002               	goto	i2l5536
 20650  004932  0E01               	movlw	1
 20651  004934  6E02               	movwf	i2_isdigit$1958,c
 20652  004936                     i2l5536:
 20653  004936  C002  F001         	movff	i2_isdigit$1958,??i2_isdigit
 20654  00493A  3001               	rrcf	??i2_isdigit,w,c
 20655  00493C  0012               	return	
 20656  00493E                     __end_ofi2_isdigit:
 20657                           	opt stack 0
 20658                           pclatu	equ	0xFFB
 20659                           pclath	equ	0xFFA
 20660                           tblptru	equ	0xFF8
 20661                           tblptrh	equ	0xFF7
 20662                           tblptrl	equ	0xFF6
 20663                           tablat	equ	0xFF5
 20664                           prodh	equ	0xFF4
 20665                           prodl	equ	0xFF3
 20666                           intcon	equ	0xFF2
 20667                           intcon2	equ	0xFF1
 20668                           intcon3	equ	0xFF0
 20669                           indf0	equ	0xFEF
 20670                           postinc0	equ	0xFEE
 20671                           fsr0h	equ	0xFEA
 20672                           fsr0l	equ	0xFE9
 20673                           wreg	equ	0xFE8
 20674                           postdec1	equ	0xFE5
 20675                           fsr1h	equ	0xFE2
 20676                           fsr1l	equ	0xFE1
 20677                           indf2	equ	0xFDF
 20678                           postinc2	equ	0xFDE
 20679                           postdec2	equ	0xFDD
 20680                           fsr2h	equ	0xFDA
 20681                           fsr2l	equ	0xFD9
 20682                           status	equ	0xFD8
 20683                           
 20684 ;; *************** function i2___wmul *****************
 20685 ;; Defined at:
 20686 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 20687 ;; Parameters:    Size  Location     Type
 20688 ;;  multiplier      2    0[COMRAM] unsigned int 
 20689 ;;  multiplicand    2    2[COMRAM] unsigned int 
 20690 ;; Auto vars:     Size  Location     Type
 20691 ;;  __wmul          2    4[COMRAM] unsigned int 
 20692 ;; Return value:  Size  Location     Type
 20693 ;;                  2    0[COMRAM] unsigned int 
 20694 ;; Registers used:
 20695 ;;		wreg, status,2, status,0, prodl, prodh
 20696 ;; Tracked objects:
 20697 ;;		On entry : 0/0
 20698 ;;		On exit  : 0/0
 20699 ;;		Unchanged: 0/0
 20700 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20701 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20702 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20703 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20704 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20705 ;;Total ram usage:        6 bytes
 20706 ;; Hardware stack levels used:    1
 20707 ;; This function calls:
 20708 ;;		Nothing
 20709 ;; This function is called by:
 20710 ;;		_printSortTimer
 20711 ;;		_retrieveLog
 20712 ;;		i2_printf
 20713 ;; This function uses a non-reentrant model
 20714 ;;
 20715                           
 20716                           	psect	text82
 20717  00486C                     __ptext82:
 20718                           	opt stack 0
 20719  00486C                     i2___wmul:
 20720                           	opt stack 20
 20721                           
 20722                           ;incstack = 0
 20723  00486C  5001               	movf	i2___wmul@multiplier,w,c
 20724  00486E  0203               	mulwf	i2___wmul@multiplicand,c
 20725  004870  CFF3 F005          	movff	prodl,i2___wmul@product
 20726  004874  CFF4 F006          	movff	prodh,i2___wmul@product+1
 20727  004878  5001               	movf	i2___wmul@multiplier,w,c
 20728  00487A  0204               	mulwf	i2___wmul@multiplicand+1,c
 20729  00487C  50F3               	movf	prodl,w,c
 20730  00487E  2606               	addwf	i2___wmul@product+1,f,c
 20731  004880  5002               	movf	i2___wmul@multiplier+1,w,c
 20732  004882  0203               	mulwf	i2___wmul@multiplicand,c
 20733  004884  50F3               	movf	prodl,w,c
 20734  004886  2606               	addwf	i2___wmul@product+1,f,c
 20735  004888  C005  F001         	movff	i2___wmul@product,?i2___wmul
 20736  00488C  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
 20737  004890  0012               	return	
 20738  004892                     __end_ofi2___wmul:
 20739                           	opt stack 0
 20740                           pclatu	equ	0xFFB
 20741                           pclath	equ	0xFFA
 20742                           tblptru	equ	0xFF8
 20743                           tblptrh	equ	0xFF7
 20744                           tblptrl	equ	0xFF6
 20745                           tablat	equ	0xFF5
 20746                           prodh	equ	0xFF4
 20747                           prodl	equ	0xFF3
 20748                           intcon	equ	0xFF2
 20749                           intcon2	equ	0xFF1
 20750                           intcon3	equ	0xFF0
 20751                           indf0	equ	0xFEF
 20752                           postinc0	equ	0xFEE
 20753                           fsr0h	equ	0xFEA
 20754                           fsr0l	equ	0xFE9
 20755                           wreg	equ	0xFE8
 20756                           postdec1	equ	0xFE5
 20757                           fsr1h	equ	0xFE2
 20758                           fsr1l	equ	0xFE1
 20759                           indf2	equ	0xFDF
 20760                           postinc2	equ	0xFDE
 20761                           postdec2	equ	0xFDD
 20762                           fsr2h	equ	0xFDA
 20763                           fsr2l	equ	0xFD9
 20764                           status	equ	0xFD8
 20765                           
 20766 ;; *************** function i2___lwmod *****************
 20767 ;; Defined at:
 20768 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 20769 ;; Parameters:    Size  Location     Type
 20770 ;;  dividend        2    0[COMRAM] unsigned int 
 20771 ;;  divisor         2    2[COMRAM] unsigned int 
 20772 ;; Auto vars:     Size  Location     Type
 20773 ;;  __lwmod         1    4[COMRAM] unsigned char 
 20774 ;; Return value:  Size  Location     Type
 20775 ;;                  2    0[COMRAM] unsigned int 
 20776 ;; Registers used:
 20777 ;;		wreg, status,2, status,0
 20778 ;; Tracked objects:
 20779 ;;		On entry : 0/0
 20780 ;;		On exit  : 0/0
 20781 ;;		Unchanged: 0/0
 20782 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20783 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20784 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20785 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20786 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20787 ;;Total ram usage:        5 bytes
 20788 ;; Hardware stack levels used:    1
 20789 ;; This function calls:
 20790 ;;		Nothing
 20791 ;; This function is called by:
 20792 ;;		_printSortTimer
 20793 ;;		i2_printf
 20794 ;; This function uses a non-reentrant model
 20795 ;;
 20796                           
 20797                           	psect	text83
 20798  0043DE                     __ptext83:
 20799                           	opt stack 0
 20800  0043DE                     i2___lwmod:
 20801                           	opt stack 20
 20802                           
 20803                           ;incstack = 0
 20804  0043DE  5003               	movf	i2___lwmod@divisor,w,c
 20805  0043E0  1004               	iorwf	i2___lwmod@divisor+1,w,c
 20806  0043E2  B4D8               	btfsc	status,2,c
 20807  0043E4  D018               	goto	i2l1765
 20808  0043E6  0E01               	movlw	1
 20809  0043E8  6E05               	movwf	i2___lwmod@counter,c
 20810  0043EA  D004               	goto	i2l5568
 20811  0043EC                     i2l5566:
 20812  0043EC  90D8               	bcf	status,0,c
 20813  0043EE  3603               	rlcf	i2___lwmod@divisor,f,c
 20814  0043F0  3604               	rlcf	i2___lwmod@divisor+1,f,c
 20815  0043F2  2A05               	incf	i2___lwmod@counter,f,c
 20816  0043F4                     i2l5568:
 20817  0043F4  AE04               	btfss	i2___lwmod@divisor+1,7,c
 20818  0043F6  D7FA               	goto	i2l5566
 20819  0043F8                     i2l5570:
 20820  0043F8  5003               	movf	i2___lwmod@divisor,w,c
 20821  0043FA  5C01               	subwf	i2___lwmod@dividend,w,c
 20822  0043FC  5004               	movf	i2___lwmod@divisor+1,w,c
 20823  0043FE  5802               	subwfb	i2___lwmod@dividend+1,w,c
 20824  004400  A0D8               	btfss	status,0,c
 20825  004402  D004               	goto	i2l5574
 20826  004404  5003               	movf	i2___lwmod@divisor,w,c
 20827  004406  5E01               	subwf	i2___lwmod@dividend,f,c
 20828  004408  5004               	movf	i2___lwmod@divisor+1,w,c
 20829  00440A  5A02               	subwfb	i2___lwmod@dividend+1,f,c
 20830  00440C                     i2l5574:
 20831  00440C  90D8               	bcf	status,0,c
 20832  00440E  3204               	rrcf	i2___lwmod@divisor+1,f,c
 20833  004410  3203               	rrcf	i2___lwmod@divisor,f,c
 20834  004412  2E05               	decfsz	i2___lwmod@counter,f,c
 20835  004414  D7F1               	goto	i2l5570
 20836  004416                     i2l1765:
 20837  004416  C001  F001         	movff	i2___lwmod@dividend,?i2___lwmod
 20838  00441A  C002  F002         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
 20839  00441E  0012               	return		;funcret
 20840  004420                     __end_ofi2___lwmod:
 20841                           	opt stack 0
 20842                           pclatu	equ	0xFFB
 20843                           pclath	equ	0xFFA
 20844                           tblptru	equ	0xFF8
 20845                           tblptrh	equ	0xFF7
 20846                           tblptrl	equ	0xFF6
 20847                           tablat	equ	0xFF5
 20848                           prodh	equ	0xFF4
 20849                           prodl	equ	0xFF3
 20850                           intcon	equ	0xFF2
 20851                           intcon2	equ	0xFF1
 20852                           intcon3	equ	0xFF0
 20853                           indf0	equ	0xFEF
 20854                           postinc0	equ	0xFEE
 20855                           fsr0h	equ	0xFEA
 20856                           fsr0l	equ	0xFE9
 20857                           wreg	equ	0xFE8
 20858                           postdec1	equ	0xFE5
 20859                           fsr1h	equ	0xFE2
 20860                           fsr1l	equ	0xFE1
 20861                           indf2	equ	0xFDF
 20862                           postinc2	equ	0xFDE
 20863                           postdec2	equ	0xFDD
 20864                           fsr2h	equ	0xFDA
 20865                           fsr2l	equ	0xFD9
 20866                           status	equ	0xFD8
 20867                           
 20868 ;; *************** function i2___lwdiv *****************
 20869 ;; Defined at:
 20870 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 20871 ;; Parameters:    Size  Location     Type
 20872 ;;  dividend        2    5[COMRAM] unsigned int 
 20873 ;;  divisor         2    7[COMRAM] unsigned int 
 20874 ;; Auto vars:     Size  Location     Type
 20875 ;;  __lwdiv         2    9[COMRAM] unsigned int 
 20876 ;;  __lwdiv         1   11[COMRAM] unsigned char 
 20877 ;; Return value:  Size  Location     Type
 20878 ;;                  2    5[COMRAM] unsigned int 
 20879 ;; Registers used:
 20880 ;;		wreg, status,2, status,0
 20881 ;; Tracked objects:
 20882 ;;		On entry : 0/0
 20883 ;;		On exit  : 0/0
 20884 ;;		Unchanged: 0/0
 20885 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20886 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20887 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20888 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20889 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20890 ;;Total ram usage:        7 bytes
 20891 ;; Hardware stack levels used:    1
 20892 ;; This function calls:
 20893 ;;		Nothing
 20894 ;; This function is called by:
 20895 ;;		_printSortTimer
 20896 ;;		i2_printf
 20897 ;; This function uses a non-reentrant model
 20898 ;;
 20899                           
 20900                           	psect	text84
 20901  004260                     __ptext84:
 20902                           	opt stack 0
 20903  004260                     i2___lwdiv:
 20904                           	opt stack 20
 20905                           
 20906                           ;incstack = 0
 20907  004260  0E00               	movlw	0
 20908  004262  6E0B               	movwf	i2___lwdiv@quotient+1,c
 20909  004264  0E00               	movlw	0
 20910  004266  6E0A               	movwf	i2___lwdiv@quotient,c
 20911  004268  5008               	movf	i2___lwdiv@divisor,w,c
 20912  00426A  1009               	iorwf	i2___lwdiv@divisor+1,w,c
 20913  00426C  B4D8               	btfsc	status,2,c
 20914  00426E  D01C               	goto	i2l1755
 20915  004270  0E01               	movlw	1
 20916  004272  6E0C               	movwf	i2___lwdiv@counter,c
 20917  004274  D004               	goto	i2l5548
 20918  004276                     i2l5546:
 20919  004276  90D8               	bcf	status,0,c
 20920  004278  3608               	rlcf	i2___lwdiv@divisor,f,c
 20921  00427A  3609               	rlcf	i2___lwdiv@divisor+1,f,c
 20922  00427C  2A0C               	incf	i2___lwdiv@counter,f,c
 20923  00427E                     i2l5548:
 20924  00427E  AE09               	btfss	i2___lwdiv@divisor+1,7,c
 20925  004280  D7FA               	goto	i2l5546
 20926  004282                     i2l5550:
 20927  004282  90D8               	bcf	status,0,c
 20928  004284  360A               	rlcf	i2___lwdiv@quotient,f,c
 20929  004286  360B               	rlcf	i2___lwdiv@quotient+1,f,c
 20930  004288  5008               	movf	i2___lwdiv@divisor,w,c
 20931  00428A  5C06               	subwf	i2___lwdiv@dividend,w,c
 20932  00428C  5009               	movf	i2___lwdiv@divisor+1,w,c
 20933  00428E  5807               	subwfb	i2___lwdiv@dividend+1,w,c
 20934  004290  A0D8               	btfss	status,0,c
 20935  004292  D005               	goto	i2l5558
 20936  004294  5008               	movf	i2___lwdiv@divisor,w,c
 20937  004296  5E06               	subwf	i2___lwdiv@dividend,f,c
 20938  004298  5009               	movf	i2___lwdiv@divisor+1,w,c
 20939  00429A  5A07               	subwfb	i2___lwdiv@dividend+1,f,c
 20940  00429C  800A               	bsf	i2___lwdiv@quotient,0,c
 20941  00429E                     i2l5558:
 20942  00429E  90D8               	bcf	status,0,c
 20943  0042A0  3209               	rrcf	i2___lwdiv@divisor+1,f,c
 20944  0042A2  3208               	rrcf	i2___lwdiv@divisor,f,c
 20945  0042A4  2E0C               	decfsz	i2___lwdiv@counter,f,c
 20946  0042A6  D7ED               	goto	i2l5550
 20947  0042A8                     i2l1755:
 20948  0042A8  C00A  F006         	movff	i2___lwdiv@quotient,?i2___lwdiv
 20949  0042AC  C00B  F007         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
 20950  0042B0  0012               	return		;funcret
 20951  0042B2                     __end_ofi2___lwdiv:
 20952                           	opt stack 0
 20953                           pclatu	equ	0xFFB
 20954                           pclath	equ	0xFFA
 20955                           tblptru	equ	0xFF8
 20956                           tblptrh	equ	0xFF7
 20957                           tblptrl	equ	0xFF6
 20958                           tablat	equ	0xFF5
 20959                           prodh	equ	0xFF4
 20960                           prodl	equ	0xFF3
 20961                           intcon	equ	0xFF2
 20962                           intcon2	equ	0xFF1
 20963                           intcon3	equ	0xFF0
 20964                           indf0	equ	0xFEF
 20965                           postinc0	equ	0xFEE
 20966                           fsr0h	equ	0xFEA
 20967                           fsr0l	equ	0xFE9
 20968                           wreg	equ	0xFE8
 20969                           postdec1	equ	0xFE5
 20970                           fsr1h	equ	0xFE2
 20971                           fsr1l	equ	0xFE1
 20972                           indf2	equ	0xFDF
 20973                           postinc2	equ	0xFDE
 20974                           postdec2	equ	0xFDD
 20975                           fsr2h	equ	0xFDA
 20976                           fsr2l	equ	0xFD9
 20977                           status	equ	0xFD8
 20978                           
 20979 ;; *************** function i2_lcdInst *****************
 20980 ;; Defined at:
 20981 ;;		line 15 in file "lcd.c"
 20982 ;; Parameters:    Size  Location     Type
 20983 ;;  data            1    wreg     unsigned char 
 20984 ;; Auto vars:     Size  Location     Type
 20985 ;;  data            1    2[COMRAM] unsigned char 
 20986 ;; Return value:  Size  Location     Type
 20987 ;;                  1    wreg      void 
 20988 ;; Registers used:
 20989 ;;		wreg, status,2, status,0, cstack
 20990 ;; Tracked objects:
 20991 ;;		On entry : 0/0
 20992 ;;		On exit  : 0/0
 20993 ;;		Unchanged: 0/0
 20994 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20995 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20996 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20997 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20998 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20999 ;;Total ram usage:        1 bytes
 21000 ;; Hardware stack levels used:    1
 21001 ;; Hardware stack levels required when called:    1
 21002 ;; This function calls:
 21003 ;;		i2_lcdNibble
 21004 ;; This function is called by:
 21005 ;;		_change_state_to_menu_11
 21006 ;;		_change_state_to_menu_23
 21007 ;;		_change_state_to_logs_11
 21008 ;;		_change_state_to_logs_12
 21009 ;;		_change_state_to_logs_22
 21010 ;;		_change_state_to_logs_23
 21011 ;;		_change_state_to_logs_33
 21012 ;;		_change_state_to_logs_34
 21013 ;;		_printSortTimer
 21014 ;;		i2_change_state_to_menu_start
 21015 ;;		i2_change_state_to_menu_12
 21016 ;;		i2_change_state_to_menu_22
 21017 ;;		i2_printRTC
 21018 ;; This function uses a non-reentrant model
 21019 ;;
 21020                           
 21021                           	psect	text85
 21022  0049D4                     __ptext85:
 21023                           	opt stack 0
 21024  0049D4                     i2_lcdInst:
 21025                           	opt stack 19
 21026                           
 21027                           ;incstack = 0
 21028                           ;i2lcdInst@data stored from wreg
 21029  0049D4  6E03               	movwf	i2lcdInst@data,c
 21030                           
 21031                           ;lcd.c: 16: LATDbits.LATD2 = 0;
 21032  0049D6  948C               	bcf	3980,2,c	;volatile
 21033                           
 21034                           ;lcd.c: 17: lcdNibble(data);
 21035  0049D8  5003               	movf	i2lcdInst@data,w,c
 21036  0049DA  ECDB  F020         	call	i2_lcdNibble
 21037  0049DE  0012               	return		;funcret
 21038  0049E0                     __end_ofi2_lcdInst:
 21039                           	opt stack 0
 21040                           pclatu	equ	0xFFB
 21041                           pclath	equ	0xFFA
 21042                           tblptru	equ	0xFF8
 21043                           tblptrh	equ	0xFF7
 21044                           tblptrl	equ	0xFF6
 21045                           tablat	equ	0xFF5
 21046                           prodh	equ	0xFF4
 21047                           prodl	equ	0xFF3
 21048                           intcon	equ	0xFF2
 21049                           intcon2	equ	0xFF1
 21050                           intcon3	equ	0xFF0
 21051                           indf0	equ	0xFEF
 21052                           postinc0	equ	0xFEE
 21053                           fsr0h	equ	0xFEA
 21054                           fsr0l	equ	0xFE9
 21055                           wreg	equ	0xFE8
 21056                           postdec1	equ	0xFE5
 21057                           fsr1h	equ	0xFE2
 21058                           fsr1l	equ	0xFE1
 21059                           indf2	equ	0xFDF
 21060                           postinc2	equ	0xFDE
 21061                           postdec2	equ	0xFDD
 21062                           fsr2h	equ	0xFDA
 21063                           fsr2l	equ	0xFD9
 21064                           status	equ	0xFD8
 21065                           
 21066 ;; *************** function i2_lcdNibble *****************
 21067 ;; Defined at:
 21068 ;;		line 25 in file "lcd.c"
 21069 ;; Parameters:    Size  Location     Type
 21070 ;;  data            1    wreg     unsigned char 
 21071 ;; Auto vars:     Size  Location     Type
 21072 ;;  data            1    1[COMRAM] unsigned char 
 21073 ;;  lcdNibble       1    0[COMRAM] unsigned char 
 21074 ;; Return value:  Size  Location     Type
 21075 ;;                  1    wreg      void 
 21076 ;; Registers used:
 21077 ;;		wreg, status,2, status,0
 21078 ;; Tracked objects:
 21079 ;;		On entry : 0/0
 21080 ;;		On exit  : 0/0
 21081 ;;		Unchanged: 0/0
 21082 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21083 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21084 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21085 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21086 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21087 ;;Total ram usage:        2 bytes
 21088 ;; Hardware stack levels used:    1
 21089 ;; This function calls:
 21090 ;;		Nothing
 21091 ;; This function is called by:
 21092 ;;		i2_lcdInst
 21093 ;;		i2_putch
 21094 ;; This function uses a non-reentrant model
 21095 ;;
 21096                           
 21097                           	psect	text86
 21098  0041B6                     __ptext86:
 21099                           	opt stack 0
 21100  0041B6                     i2_lcdNibble:
 21101                           	opt stack 19
 21102                           
 21103                           ;incstack = 0
 21104                           ;i2lcdNibble@data stored from wreg
 21105  0041B6  6E02               	movwf	i2lcdNibble@data,c
 21106                           
 21107                           ;lcd.c: 27: char temp = data & 0xF0;
 21108  0041B8  5002               	movf	i2lcdNibble@data,w,c
 21109  0041BA  0BF0               	andlw	240
 21110  0041BC  6E01               	movwf	i2lcdNibble@temp,c
 21111                           
 21112                           ;lcd.c: 28: LATD = LATD & 0x0F;
 21113  0041BE  508C               	movf	3980,w,c	;volatile
 21114  0041C0  0B0F               	andlw	15
 21115  0041C2  6E8C               	movwf	3980,c	;volatile
 21116                           
 21117                           ;lcd.c: 29: LATD = temp | LATD;
 21118  0041C4  5001               	movf	i2lcdNibble@temp,w,c
 21119  0041C6  108C               	iorwf	3980,w,c	;volatile
 21120  0041C8  6E8C               	movwf	3980,c	;volatile
 21121                           
 21122                           ;lcd.c: 31: LATDbits.LATD3 = 1;
 21123  0041CA  868C               	bsf	3980,3,c	;volatile
 21124                           
 21125                           ;lcd.c: 32: _delay((unsigned long)((25)*(32000000/4000000.0)));
 21126  0041CC  0E42               	movlw	66
 21127  0041CE                     i2u864_47:
 21128  0041CE  2EE8               	decfsz	wreg,f,c
 21129  0041D0  D7FE               	bra	i2u864_47
 21130  0041D2  D000               	nop2	
 21131                           
 21132                           ;lcd.c: 33: LATDbits.LATD3 = 0;
 21133  0041D4  968C               	bcf	3980,3,c	;volatile
 21134                           
 21135                           ;lcd.c: 34: _delay((unsigned long)((25)*(32000000/4000000.0)));
 21136  0041D6  0E42               	movlw	66
 21137  0041D8                     i2u865_47:
 21138  0041D8  2EE8               	decfsz	wreg,f,c
 21139  0041DA  D7FE               	bra	i2u865_47
 21140  0041DC  D000               	nop2	
 21141                           
 21142                           ;lcd.c: 36: data = data << 4;
 21143  0041DE  3802               	swapf	i2lcdNibble@data,w,c
 21144  0041E0  0BF0               	andlw	240
 21145  0041E2  6E02               	movwf	i2lcdNibble@data,c
 21146                           
 21147                           ;lcd.c: 38: temp = data & 0xF0;
 21148  0041E4  5002               	movf	i2lcdNibble@data,w,c
 21149  0041E6  0BF0               	andlw	240
 21150  0041E8  6E01               	movwf	i2lcdNibble@temp,c
 21151                           
 21152                           ;lcd.c: 39: LATD = LATD & 0x0F;
 21153  0041EA  508C               	movf	3980,w,c	;volatile
 21154  0041EC  0B0F               	andlw	15
 21155  0041EE  6E8C               	movwf	3980,c	;volatile
 21156                           
 21157                           ;lcd.c: 40: LATD = temp | LATD;
 21158  0041F0  5001               	movf	i2lcdNibble@temp,w,c
 21159  0041F2  108C               	iorwf	3980,w,c	;volatile
 21160  0041F4  6E8C               	movwf	3980,c	;volatile
 21161                           
 21162                           ;lcd.c: 42: LATDbits.LATD3 = 1;
 21163  0041F6  868C               	bsf	3980,3,c	;volatile
 21164                           
 21165                           ;lcd.c: 43: _delay((unsigned long)((25)*(32000000/4000000.0)));
 21166  0041F8  0E42               	movlw	66
 21167  0041FA                     i2u866_47:
 21168  0041FA  2EE8               	decfsz	wreg,f,c
 21169  0041FC  D7FE               	bra	i2u866_47
 21170  0041FE  D000               	nop2	
 21171                           
 21172                           ;lcd.c: 44: LATDbits.LATD3 = 0;
 21173  004200  968C               	bcf	3980,3,c	;volatile
 21174                           
 21175                           ;lcd.c: 45: _delay((unsigned long)((25)*(32000000/4000000.0)));
 21176  004202  0E42               	movlw	66
 21177  004204                     i2u867_47:
 21178  004204  2EE8               	decfsz	wreg,f,c
 21179  004206  D7FE               	bra	i2u867_47
 21180  004208  D000               	nop2	
 21181  00420A  0012               	return		;funcret
 21182  00420C                     __end_ofi2_lcdNibble:
 21183                           	opt stack 0
 21184                           pclatu	equ	0xFFB
 21185                           pclath	equ	0xFFA
 21186                           tblptru	equ	0xFF8
 21187                           tblptrh	equ	0xFF7
 21188                           tblptrl	equ	0xFF6
 21189                           tablat	equ	0xFF5
 21190                           prodh	equ	0xFF4
 21191                           prodl	equ	0xFF3
 21192                           intcon	equ	0xFF2
 21193                           intcon2	equ	0xFF1
 21194                           intcon3	equ	0xFF0
 21195                           indf0	equ	0xFEF
 21196                           postinc0	equ	0xFEE
 21197                           fsr0h	equ	0xFEA
 21198                           fsr0l	equ	0xFE9
 21199                           wreg	equ	0xFE8
 21200                           postdec1	equ	0xFE5
 21201                           fsr1h	equ	0xFE2
 21202                           fsr1l	equ	0xFE1
 21203                           indf2	equ	0xFDF
 21204                           postinc2	equ	0xFDE
 21205                           postdec2	equ	0xFDD
 21206                           fsr2h	equ	0xFDA
 21207                           fsr2l	equ	0xFD9
 21208                           status	equ	0xFD8
 21209                           
 21210 ;; *************** function i2_getRTC *****************
 21211 ;; Defined at:
 21212 ;;		line 44 in file "RTC.c"
 21213 ;; Parameters:    Size  Location     Type
 21214 ;;		None
 21215 ;; Auto vars:     Size  Location     Type
 21216 ;;  getRTC          2    3[COMRAM] int 
 21217 ;; Return value:  Size  Location     Type
 21218 ;;                  1    wreg      void 
 21219 ;; Registers used:
 21220 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 21221 ;; Tracked objects:
 21222 ;;		On entry : 0/0
 21223 ;;		On exit  : 0/0
 21224 ;;		Unchanged: 0/0
 21225 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21226 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21227 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21228 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21229 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21230 ;;Total ram usage:        2 bytes
 21231 ;; Hardware stack levels used:    1
 21232 ;; Hardware stack levels required when called:    2
 21233 ;; This function calls:
 21234 ;;		i2_I2C_Master_Read
 21235 ;;		i2_I2C_Master_Start
 21236 ;;		i2_I2C_Master_Stop
 21237 ;;		i2_I2C_Master_Write
 21238 ;; This function is called by:
 21239 ;;		_printSortTimer
 21240 ;;		i2_printRTC
 21241 ;; This function uses a non-reentrant model
 21242 ;;
 21243                           
 21244                           	psect	text87
 21245  003EA0                     __ptext87:
 21246                           	opt stack 0
 21247  003EA0                     i2_getRTC:
 21248                           	opt stack 18
 21249                           
 21250                           ;RTC.c: 48: I2C_Master_Start();
 21251                           
 21252                           ;incstack = 0
 21253  003EA0  EC0A  F025         	call	i2_I2C_Master_Start	;wreg free
 21254                           
 21255                           ;RTC.c: 49: I2C_Master_Write(0b11010000);
 21256  003EA4  0E00               	movlw	0
 21257  003EA6  6E03               	movwf	i2I2C_Master_Write@d+1,c
 21258  003EA8  0ED0               	movlw	208
 21259  003EAA  6E02               	movwf	i2I2C_Master_Write@d,c
 21260  003EAC  ECF5  F024         	call	i2_I2C_Master_Write	;wreg free
 21261                           
 21262                           ;RTC.c: 50: I2C_Master_Write(0x00);
 21263  003EB0  0E00               	movlw	0
 21264  003EB2  6E03               	movwf	i2I2C_Master_Write@d+1,c
 21265  003EB4  0E00               	movlw	0
 21266  003EB6  6E02               	movwf	i2I2C_Master_Write@d,c
 21267  003EB8  ECF5  F024         	call	i2_I2C_Master_Write	;wreg free
 21268                           
 21269                           ;RTC.c: 51: I2C_Master_Stop();
 21270  003EBC  EC06  F025         	call	i2_I2C_Master_Stop	;wreg free
 21271                           
 21272                           ;RTC.c: 54: I2C_Master_Start();
 21273  003EC0  EC0A  F025         	call	i2_I2C_Master_Start	;wreg free
 21274                           
 21275                           ;RTC.c: 55: I2C_Master_Write(0b11010001);
 21276  003EC4  0E00               	movlw	0
 21277  003EC6  6E03               	movwf	i2I2C_Master_Write@d+1,c
 21278  003EC8  0ED1               	movlw	209
 21279  003ECA  6E02               	movwf	i2I2C_Master_Write@d,c
 21280  003ECC  ECF5  F024         	call	i2_I2C_Master_Write	;wreg free
 21281                           
 21282                           ;RTC.c: 56: for(int i = 0; i < 6; i++){
 21283  003ED0  0E00               	movlw	0
 21284  003ED2  6E05               	movwf	i2getRTC@i+1,c
 21285  003ED4  0E00               	movlw	0
 21286  003ED6  6E04               	movwf	i2getRTC@i,c
 21287  003ED8                     i2l5804:
 21288  003ED8  BE05               	btfsc	i2getRTC@i+1,7,c
 21289  003EDA  D006               	goto	i2l5808
 21290  003EDC  5005               	movf	i2getRTC@i+1,w,c
 21291  003EDE  E111               	bnz	i2l5814
 21292  003EE0  0E06               	movlw	6
 21293  003EE2  5C04               	subwf	i2getRTC@i,w,c
 21294  003EE4  B0D8               	btfsc	status,0,c
 21295  003EE6  D00D               	goto	i2l5814
 21296  003EE8                     i2l5808:
 21297                           
 21298                           ;RTC.c: 57: time[i] = I2C_Master_Read(1);
 21299  003EE8  0E24               	movlw	low _time
 21300  003EEA  2404               	addwf	i2getRTC@i,w,c
 21301  003EEC  6ED9               	movwf	fsr2l,c
 21302  003EEE  0E01               	movlw	high _time
 21303  003EF0  2005               	addwfc	i2getRTC@i+1,w,c
 21304  003EF2  6EDA               	movwf	fsr2h,c
 21305  003EF4  0E01               	movlw	1
 21306  003EF6  EC49  F024         	call	i2_I2C_Master_Read
 21307  003EFA  6EDF               	movwf	indf2,c
 21308  003EFC  4A04               	infsnz	i2getRTC@i,f,c
 21309  003EFE  2A05               	incf	i2getRTC@i+1,f,c
 21310  003F00  D7EB               	goto	i2l5804
 21311  003F02                     i2l5814:
 21312                           
 21313                           ;RTC.c: 58: }
 21314                           ;RTC.c: 59: time[6] = I2C_Master_Read(0);
 21315  003F02  0E00               	movlw	0
 21316  003F04  EC49  F024         	call	i2_I2C_Master_Read
 21317  003F08  0101               	movlb	1	; () banked
 21318  003F0A  6F2A               	movwf	(_time+6)& (0+255),b
 21319                           
 21320                           ;RTC.c: 60: I2C_Master_Stop();
 21321  003F0C  EC06  F025         	call	i2_I2C_Master_Stop	;wreg free
 21322  003F10  0012               	return		;funcret
 21323  003F12                     __end_ofi2_getRTC:
 21324                           	opt stack 0
 21325                           pclatu	equ	0xFFB
 21326                           pclath	equ	0xFFA
 21327                           tblptru	equ	0xFF8
 21328                           tblptrh	equ	0xFF7
 21329                           tblptrl	equ	0xFF6
 21330                           tablat	equ	0xFF5
 21331                           prodh	equ	0xFF4
 21332                           prodl	equ	0xFF3
 21333                           intcon	equ	0xFF2
 21334                           intcon2	equ	0xFF1
 21335                           intcon3	equ	0xFF0
 21336                           indf0	equ	0xFEF
 21337                           postinc0	equ	0xFEE
 21338                           fsr0h	equ	0xFEA
 21339                           fsr0l	equ	0xFE9
 21340                           wreg	equ	0xFE8
 21341                           postdec1	equ	0xFE5
 21342                           fsr1h	equ	0xFE2
 21343                           fsr1l	equ	0xFE1
 21344                           indf2	equ	0xFDF
 21345                           postinc2	equ	0xFDE
 21346                           postdec2	equ	0xFDD
 21347                           fsr2h	equ	0xFDA
 21348                           fsr2l	equ	0xFD9
 21349                           status	equ	0xFD8
 21350                           
 21351 ;; *************** function i2_I2C_Master_Write *****************
 21352 ;; Defined at:
 21353 ;;		line 49 in file "I2C.c"
 21354 ;; Parameters:    Size  Location     Type
 21355 ;;  d               2    1[COMRAM] unsigned int 
 21356 ;; Auto vars:     Size  Location     Type
 21357 ;;		None
 21358 ;; Return value:  Size  Location     Type
 21359 ;;                  1    wreg      void 
 21360 ;; Registers used:
 21361 ;;		wreg, status,2, status,0, cstack
 21362 ;; Tracked objects:
 21363 ;;		On entry : 0/0
 21364 ;;		On exit  : 0/0
 21365 ;;		Unchanged: 0/0
 21366 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21367 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21368 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21369 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21370 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21371 ;;Total ram usage:        2 bytes
 21372 ;; Hardware stack levels used:    1
 21373 ;; Hardware stack levels required when called:    1
 21374 ;; This function calls:
 21375 ;;		i2_I2C_Master_Wait
 21376 ;; This function is called by:
 21377 ;;		i2_getRTC
 21378 ;; This function uses a non-reentrant model
 21379 ;;
 21380                           
 21381                           	psect	text88
 21382  0049EA                     __ptext88:
 21383                           	opt stack 0
 21384  0049EA                     i2_I2C_Master_Write:
 21385                           	opt stack 18
 21386                           
 21387                           ;I2C.c: 51: I2C_Master_Wait();
 21388                           
 21389                           ;incstack = 0
 21390  0049EA  ECCB  F024         	call	i2_I2C_Master_Wait	;wreg free
 21391                           
 21392                           ;I2C.c: 52: SSPBUF = d;
 21393  0049EE  C002  FFC9         	movff	i2I2C_Master_Write@d,4041	;volatile
 21394  0049F2  0012               	return		;funcret
 21395  0049F4                     __end_ofi2_I2C_Master_Write:
 21396                           	opt stack 0
 21397                           pclatu	equ	0xFFB
 21398                           pclath	equ	0xFFA
 21399                           tblptru	equ	0xFF8
 21400                           tblptrh	equ	0xFF7
 21401                           tblptrl	equ	0xFF6
 21402                           tablat	equ	0xFF5
 21403                           prodh	equ	0xFF4
 21404                           prodl	equ	0xFF3
 21405                           intcon	equ	0xFF2
 21406                           intcon2	equ	0xFF1
 21407                           intcon3	equ	0xFF0
 21408                           indf0	equ	0xFEF
 21409                           postinc0	equ	0xFEE
 21410                           fsr0h	equ	0xFEA
 21411                           fsr0l	equ	0xFE9
 21412                           wreg	equ	0xFE8
 21413                           postdec1	equ	0xFE5
 21414                           fsr1h	equ	0xFE2
 21415                           fsr1l	equ	0xFE1
 21416                           indf2	equ	0xFDF
 21417                           postinc2	equ	0xFDE
 21418                           postdec2	equ	0xFDD
 21419                           fsr2h	equ	0xFDA
 21420                           fsr2l	equ	0xFD9
 21421                           status	equ	0xFD8
 21422                           
 21423 ;; *************** function i2_I2C_Master_Stop *****************
 21424 ;; Defined at:
 21425 ;;		line 43 in file "I2C.c"
 21426 ;; Parameters:    Size  Location     Type
 21427 ;;		None
 21428 ;; Auto vars:     Size  Location     Type
 21429 ;;		None
 21430 ;; Return value:  Size  Location     Type
 21431 ;;                  1    wreg      void 
 21432 ;; Registers used:
 21433 ;;		wreg, status,2, status,0, cstack
 21434 ;; Tracked objects:
 21435 ;;		On entry : 0/0
 21436 ;;		On exit  : 0/0
 21437 ;;		Unchanged: 0/0
 21438 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21439 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21440 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21441 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21442 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21443 ;;Total ram usage:        0 bytes
 21444 ;; Hardware stack levels used:    1
 21445 ;; Hardware stack levels required when called:    1
 21446 ;; This function calls:
 21447 ;;		i2_I2C_Master_Wait
 21448 ;; This function is called by:
 21449 ;;		i2_getRTC
 21450 ;; This function uses a non-reentrant model
 21451 ;;
 21452                           
 21453                           	psect	text89
 21454  004A0C                     __ptext89:
 21455                           	opt stack 0
 21456  004A0C                     i2_I2C_Master_Stop:
 21457                           	opt stack 18
 21458                           
 21459                           ;I2C.c: 45: I2C_Master_Wait();
 21460                           
 21461                           ;incstack = 0
 21462  004A0C  ECCB  F024         	call	i2_I2C_Master_Wait	;wreg free
 21463                           
 21464                           ;I2C.c: 46: PEN = 1;
 21465  004A10  84C5               	bsf	4037,2,c	;volatile
 21466  004A12  0012               	return		;funcret
 21467  004A14                     __end_ofi2_I2C_Master_Stop:
 21468                           	opt stack 0
 21469                           pclatu	equ	0xFFB
 21470                           pclath	equ	0xFFA
 21471                           tblptru	equ	0xFF8
 21472                           tblptrh	equ	0xFF7
 21473                           tblptrl	equ	0xFF6
 21474                           tablat	equ	0xFF5
 21475                           prodh	equ	0xFF4
 21476                           prodl	equ	0xFF3
 21477                           intcon	equ	0xFF2
 21478                           intcon2	equ	0xFF1
 21479                           intcon3	equ	0xFF0
 21480                           indf0	equ	0xFEF
 21481                           postinc0	equ	0xFEE
 21482                           fsr0h	equ	0xFEA
 21483                           fsr0l	equ	0xFE9
 21484                           wreg	equ	0xFE8
 21485                           postdec1	equ	0xFE5
 21486                           fsr1h	equ	0xFE2
 21487                           fsr1l	equ	0xFE1
 21488                           indf2	equ	0xFDF
 21489                           postinc2	equ	0xFDE
 21490                           postdec2	equ	0xFDD
 21491                           fsr2h	equ	0xFDA
 21492                           fsr2l	equ	0xFD9
 21493                           status	equ	0xFD8
 21494                           
 21495 ;; *************** function i2_I2C_Master_Start *****************
 21496 ;; Defined at:
 21497 ;;		line 31 in file "I2C.c"
 21498 ;; Parameters:    Size  Location     Type
 21499 ;;		None
 21500 ;; Auto vars:     Size  Location     Type
 21501 ;;		None
 21502 ;; Return value:  Size  Location     Type
 21503 ;;                  1    wreg      void 
 21504 ;; Registers used:
 21505 ;;		wreg, status,2, status,0, cstack
 21506 ;; Tracked objects:
 21507 ;;		On entry : 0/0
 21508 ;;		On exit  : 0/0
 21509 ;;		Unchanged: 0/0
 21510 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21511 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21512 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21513 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21514 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21515 ;;Total ram usage:        0 bytes
 21516 ;; Hardware stack levels used:    1
 21517 ;; Hardware stack levels required when called:    1
 21518 ;; This function calls:
 21519 ;;		i2_I2C_Master_Wait
 21520 ;; This function is called by:
 21521 ;;		i2_getRTC
 21522 ;; This function uses a non-reentrant model
 21523 ;;
 21524                           
 21525                           	psect	text90
 21526  004A14                     __ptext90:
 21527                           	opt stack 0
 21528  004A14                     i2_I2C_Master_Start:
 21529                           	opt stack 18
 21530                           
 21531                           ;I2C.c: 33: I2C_Master_Wait();
 21532                           
 21533                           ;incstack = 0
 21534  004A14  ECCB  F024         	call	i2_I2C_Master_Wait	;wreg free
 21535                           
 21536                           ;I2C.c: 34: SEN = 1;
 21537  004A18  80C5               	bsf	4037,0,c	;volatile
 21538  004A1A  0012               	return		;funcret
 21539  004A1C                     __end_ofi2_I2C_Master_Start:
 21540                           	opt stack 0
 21541                           pclatu	equ	0xFFB
 21542                           pclath	equ	0xFFA
 21543                           tblptru	equ	0xFF8
 21544                           tblptrh	equ	0xFF7
 21545                           tblptrl	equ	0xFF6
 21546                           tablat	equ	0xFF5
 21547                           prodh	equ	0xFF4
 21548                           prodl	equ	0xFF3
 21549                           intcon	equ	0xFF2
 21550                           intcon2	equ	0xFF1
 21551                           intcon3	equ	0xFF0
 21552                           indf0	equ	0xFEF
 21553                           postinc0	equ	0xFEE
 21554                           fsr0h	equ	0xFEA
 21555                           fsr0l	equ	0xFE9
 21556                           wreg	equ	0xFE8
 21557                           postdec1	equ	0xFE5
 21558                           fsr1h	equ	0xFE2
 21559                           fsr1l	equ	0xFE1
 21560                           indf2	equ	0xFDF
 21561                           postinc2	equ	0xFDE
 21562                           postdec2	equ	0xFDD
 21563                           fsr2h	equ	0xFDA
 21564                           fsr2l	equ	0xFD9
 21565                           status	equ	0xFD8
 21566                           
 21567 ;; *************** function i2_I2C_Master_Read *****************
 21568 ;; Defined at:
 21569 ;;		line 55 in file "I2C.c"
 21570 ;; Parameters:    Size  Location     Type
 21571 ;;  a               1    wreg     unsigned char 
 21572 ;; Auto vars:     Size  Location     Type
 21573 ;;  a               1    1[COMRAM] unsigned char 
 21574 ;;  I2C_Master_R    1    2[COMRAM] unsigned char 
 21575 ;; Return value:  Size  Location     Type
 21576 ;;                  1    wreg      unsigned char 
 21577 ;; Registers used:
 21578 ;;		wreg, status,2, status,0, cstack
 21579 ;; Tracked objects:
 21580 ;;		On entry : 0/0
 21581 ;;		On exit  : 0/0
 21582 ;;		Unchanged: 0/0
 21583 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21584 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21585 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21586 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21587 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21588 ;;Total ram usage:        2 bytes
 21589 ;; Hardware stack levels used:    1
 21590 ;; Hardware stack levels required when called:    1
 21591 ;; This function calls:
 21592 ;;		i2_I2C_Master_Wait
 21593 ;; This function is called by:
 21594 ;;		i2_getRTC
 21595 ;; This function uses a non-reentrant model
 21596 ;;
 21597                           
 21598                           	psect	text91
 21599  004892                     __ptext91:
 21600                           	opt stack 0
 21601  004892                     i2_I2C_Master_Read:
 21602                           	opt stack 18
 21603                           
 21604                           ;incstack = 0
 21605                           ;i2I2C_Master_Read@a stored from wreg
 21606  004892  6E02               	movwf	i2I2C_Master_Read@a,c
 21607                           
 21608                           ;I2C.c: 57: unsigned char temp;
 21609                           ;I2C.c: 58: I2C_Master_Wait();
 21610  004894  ECCB  F024         	call	i2_I2C_Master_Wait	;wreg free
 21611                           
 21612                           ;I2C.c: 59: RCEN = 1;
 21613  004898  86C5               	bsf	4037,3,c	;volatile
 21614                           
 21615                           ;I2C.c: 60: I2C_Master_Wait();
 21616  00489A  ECCB  F024         	call	i2_I2C_Master_Wait	;wreg free
 21617                           
 21618                           ;I2C.c: 61: temp = SSPBUF;
 21619  00489E  CFC9 F003          	movff	4041,i2I2C_Master_Read@temp	;volatile
 21620                           
 21621                           ;I2C.c: 62: I2C_Master_Wait();
 21622  0048A2  ECCB  F024         	call	i2_I2C_Master_Wait	;wreg free
 21623                           
 21624                           ;I2C.c: 63: ACKDT = (a)?0:1;
 21625  0048A6  5002               	movf	i2I2C_Master_Read@a,w,c
 21626  0048A8  A4D8               	btfss	status,2,c
 21627  0048AA  D002               	goto	i2u383_40
 21628  0048AC  8AC5               	bsf	4037,5,c	;volatile
 21629  0048AE  D001               	goto	i2l5512
 21630  0048B0                     i2u383_40:
 21631  0048B0  9AC5               	bcf	4037,5,c	;volatile
 21632  0048B2                     i2l5512:
 21633                           
 21634                           ;I2C.c: 64: ACKEN = 1;
 21635  0048B2  88C5               	bsf	4037,4,c	;volatile
 21636                           
 21637                           ;I2C.c: 65: return temp;
 21638  0048B4  5003               	movf	i2I2C_Master_Read@temp,w,c
 21639  0048B6  0012               	return	
 21640  0048B8                     __end_ofi2_I2C_Master_Read:
 21641                           	opt stack 0
 21642                           pclatu	equ	0xFFB
 21643                           pclath	equ	0xFFA
 21644                           tblptru	equ	0xFF8
 21645                           tblptrh	equ	0xFF7
 21646                           tblptrl	equ	0xFF6
 21647                           tablat	equ	0xFF5
 21648                           prodh	equ	0xFF4
 21649                           prodl	equ	0xFF3
 21650                           intcon	equ	0xFF2
 21651                           intcon2	equ	0xFF1
 21652                           intcon3	equ	0xFF0
 21653                           indf0	equ	0xFEF
 21654                           postinc0	equ	0xFEE
 21655                           fsr0h	equ	0xFEA
 21656                           fsr0l	equ	0xFE9
 21657                           wreg	equ	0xFE8
 21658                           postdec1	equ	0xFE5
 21659                           fsr1h	equ	0xFE2
 21660                           fsr1l	equ	0xFE1
 21661                           indf2	equ	0xFDF
 21662                           postinc2	equ	0xFDE
 21663                           postdec2	equ	0xFDD
 21664                           fsr2h	equ	0xFDA
 21665                           fsr2l	equ	0xFD9
 21666                           status	equ	0xFD8
 21667                           
 21668 ;; *************** function i2_I2C_Master_Wait *****************
 21669 ;; Defined at:
 21670 ;;		line 26 in file "I2C.c"
 21671 ;; Parameters:    Size  Location     Type
 21672 ;;		None
 21673 ;; Auto vars:     Size  Location     Type
 21674 ;;		None
 21675 ;; Return value:  Size  Location     Type
 21676 ;;                  1    wreg      void 
 21677 ;; Registers used:
 21678 ;;		wreg, status,2, status,0
 21679 ;; Tracked objects:
 21680 ;;		On entry : 0/0
 21681 ;;		On exit  : 0/0
 21682 ;;		Unchanged: 0/0
 21683 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21684 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21685 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21686 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21687 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21688 ;;Total ram usage:        1 bytes
 21689 ;; Hardware stack levels used:    1
 21690 ;; This function calls:
 21691 ;;		Nothing
 21692 ;; This function is called by:
 21693 ;;		i2_I2C_Master_Start
 21694 ;;		i2_I2C_Master_Stop
 21695 ;;		i2_I2C_Master_Write
 21696 ;;		i2_I2C_Master_Read
 21697 ;; This function uses a non-reentrant model
 21698 ;;
 21699                           
 21700                           	psect	text92
 21701  004996                     __ptext92:
 21702                           	opt stack 0
 21703  004996                     i2_I2C_Master_Wait:
 21704                           	opt stack 18
 21705  004996                     i2l66:
 21706  004996  B4C7               	btfsc	4039,2,c	;volatile
 21707  004998  D7FE               	goto	i2l66
 21708  00499A  CFC5 F001          	movff	4037,??i2_I2C_Master_Wait	;volatile
 21709  00499E  0E1F               	movlw	31
 21710  0049A0  1601               	andwf	??i2_I2C_Master_Wait,f,c
 21711  0049A2  B4D8               	btfsc	status,2,c
 21712  0049A4  0012               	return	
 21713  0049A6  D7F7               	goto	i2l66
 21714  0049A8                     __end_ofi2_I2C_Master_Wait:
 21715                           	opt stack 0
 21716                           pclatu	equ	0xFFB
 21717                           pclath	equ	0xFFA
 21718                           tblptru	equ	0xFF8
 21719                           tblptrh	equ	0xFF7
 21720                           tblptrl	equ	0xFF6
 21721                           tablat	equ	0xFF5
 21722                           prodh	equ	0xFF4
 21723                           prodl	equ	0xFF3
 21724                           intcon	equ	0xFF2
 21725                           intcon2	equ	0xFF1
 21726                           intcon3	equ	0xFF0
 21727                           indf0	equ	0xFEF
 21728                           postinc0	equ	0xFEE
 21729                           fsr0h	equ	0xFEA
 21730                           fsr0l	equ	0xFE9
 21731                           wreg	equ	0xFE8
 21732                           postdec1	equ	0xFE5
 21733                           fsr1h	equ	0xFE2
 21734                           fsr1l	equ	0xFE1
 21735                           indf2	equ	0xFDF
 21736                           postinc2	equ	0xFDE
 21737                           postdec2	equ	0xFDD
 21738                           fsr2h	equ	0xFDA
 21739                           fsr2l	equ	0xFD9
 21740                           status	equ	0xFD8
 21741                           pclatu	equ	0xFFB
 21742                           pclath	equ	0xFFA
 21743                           tblptru	equ	0xFF8
 21744                           tblptrh	equ	0xFF7
 21745                           tblptrl	equ	0xFF6
 21746                           tablat	equ	0xFF5
 21747                           prodh	equ	0xFF4
 21748                           prodl	equ	0xFF3
 21749                           intcon	equ	0xFF2
 21750                           intcon2	equ	0xFF1
 21751                           intcon3	equ	0xFF0
 21752                           indf0	equ	0xFEF
 21753                           postinc0	equ	0xFEE
 21754                           fsr0h	equ	0xFEA
 21755                           fsr0l	equ	0xFE9
 21756                           wreg	equ	0xFE8
 21757                           postdec1	equ	0xFE5
 21758                           fsr1h	equ	0xFE2
 21759                           fsr1l	equ	0xFE1
 21760                           indf2	equ	0xFDF
 21761                           postinc2	equ	0xFDE
 21762                           postdec2	equ	0xFDD
 21763                           fsr2h	equ	0xFDA
 21764                           fsr2l	equ	0xFD9
 21765                           status	equ	0xFD8
 21766                           
 21767                           	psect	rparam
 21768  0000                     pclatu	equ	0xFFB
 21769                           pclath	equ	0xFFA
 21770                           tblptru	equ	0xFF8
 21771                           tblptrh	equ	0xFF7
 21772                           tblptrl	equ	0xFF6
 21773                           tablat	equ	0xFF5
 21774                           prodh	equ	0xFF4
 21775                           prodl	equ	0xFF3
 21776                           intcon	equ	0xFF2
 21777                           intcon2	equ	0xFF1
 21778                           intcon3	equ	0xFF0
 21779                           indf0	equ	0xFEF
 21780                           postinc0	equ	0xFEE
 21781                           fsr0h	equ	0xFEA
 21782                           fsr0l	equ	0xFE9
 21783                           wreg	equ	0xFE8
 21784                           postdec1	equ	0xFE5
 21785                           fsr1h	equ	0xFE2
 21786                           fsr1l	equ	0xFE1
 21787                           indf2	equ	0xFDF
 21788                           postinc2	equ	0xFDE
 21789                           postdec2	equ	0xFDD
 21790                           fsr2h	equ	0xFDA
 21791                           fsr2l	equ	0xFD9
 21792                           status	equ	0xFD8
 21793                           
 21794                           	psect	temp
 21795  00007E                     btemp:
 21796                           	opt stack 0
 21797  00007E                     	ds	1
 21798  0000                     int$flags	set	btemp
 21799                           pclatu	equ	0xFFB
 21800                           pclath	equ	0xFFA
 21801                           tblptru	equ	0xFF8
 21802                           tblptrh	equ	0xFF7
 21803                           tblptrl	equ	0xFF6
 21804                           tablat	equ	0xFF5
 21805                           prodh	equ	0xFF4
 21806                           prodl	equ	0xFF3
 21807                           intcon	equ	0xFF2
 21808                           intcon2	equ	0xFF1
 21809                           intcon3	equ	0xFF0
 21810                           indf0	equ	0xFEF
 21811                           postinc0	equ	0xFEE
 21812                           fsr0h	equ	0xFEA
 21813                           fsr0l	equ	0xFE9
 21814                           wreg	equ	0xFE8
 21815                           postdec1	equ	0xFE5
 21816                           fsr1h	equ	0xFE2
 21817                           fsr1l	equ	0xFE1
 21818                           indf2	equ	0xFDF
 21819                           postinc2	equ	0xFDE
 21820                           postdec2	equ	0xFDD
 21821                           fsr2h	equ	0xFDA
 21822                           fsr2l	equ	0xFD9
 21823                           status	equ	0xFD8


Data Sizes:
    Strings     1251
    Constant    27
    Data        8
    BSS         120
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     90     125
    BANK0           128     90     128
    BANK1           256      0      55
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    strcpy@from	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_62(CODE[4]), STR_61(CODE[4]), STR_60(CODE[4]), STR_59(CODE[4]), 
		 -> STR_58(CODE[4]), STR_57(CODE[4]), STR_56(CODE[4]), STR_55(CODE[4]), 
		 -> STR_54(CODE[4]), STR_53(CODE[4]), STR_52(CODE[4]), STR_51(CODE[4]), 
		 -> STR_20(CODE[4]), STR_19(CODE[4]), STR_18(CODE[4]), STR_17(CODE[4]), 
		 -> STR_16(CODE[4]), STR_15(CODE[4]), STR_14(CODE[4]), STR_13(CODE[4]), 
		 -> STR_12(CODE[4]), STR_11(CODE[4]), STR_10(CODE[4]), STR_9(CODE[4]), 
		 -> STR_8(CODE[4]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_120(CODE[7]), count_total(BANK0[2]), printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 24
		 -> STR_119(CODE[18]), STR_118(CODE[18]), STR_117(CODE[18]), STR_116(CODE[18]), 
		 -> STR_115(CODE[17]), STR_114(CODE[17]), STR_113(CODE[11]), STR_112(CODE[18]), 
		 -> STR_111(CODE[18]), STR_110(CODE[17]), STR_109(CODE[15]), STR_108(CODE[15]), 
		 -> STR_107(CODE[15]), STR_106(CODE[17]), STR_105(CODE[17]), STR_104(CODE[17]), 
		 -> STR_103(CODE[16]), STR_102(CODE[17]), STR_101(CODE[17]), STR_100(CODE[17]), 
		 -> STR_99(CODE[17]), STR_98(CODE[17]), STR_97(CODE[17]), STR_96(CODE[15]), 
		 -> STR_95(CODE[11]), STR_94(CODE[17]), STR_93(CODE[11]), STR_92(CODE[17]), 
		 -> STR_91(CODE[14]), STR_90(CODE[15]), STR_89(CODE[14]), STR_88(CODE[10]), 
		 -> STR_87(CODE[9]), STR_86(CODE[9]), STR_85(CODE[10]), STR_84(CODE[10]), 
		 -> STR_83(CODE[16]), STR_82(CODE[15]), STR_81(CODE[3]), STR_80(CODE[15]), 
		 -> STR_79(CODE[13]), STR_78(CODE[14]), STR_77(CODE[8]), STR_76(CODE[14]), 
		 -> STR_75(CODE[15]), STR_74(CODE[12]), STR_73(CODE[14]), STR_72(CODE[17]), 
		 -> STR_71(CODE[14]), STR_70(CODE[15]), STR_69(CODE[17]), STR_68(CODE[17]), 
		 -> STR_67(CODE[7]), STR_66(CODE[21]), STR_65(CODE[13]), STR_64(CODE[11]), 
		 -> STR_63(CODE[24]), STR_50(CODE[17]), STR_49(CODE[17]), STR_48(CODE[17]), 
		 -> STR_47(CODE[17]), STR_46(CODE[17]), STR_45(CODE[17]), STR_44(CODE[17]), 
		 -> STR_43(CODE[17]), STR_42(CODE[17]), STR_41(CODE[17]), STR_40(CODE[17]), 
		 -> STR_39(CODE[17]), STR_38(CODE[17]), STR_37(CODE[17]), STR_36(CODE[17]), 
		 -> STR_35(CODE[17]), STR_34(CODE[17]), STR_33(CODE[17]), STR_32(CODE[17]), 
		 -> STR_31(CODE[17]), STR_30(CODE[17]), STR_29(CODE[3]), STR_28(CODE[17]), 
		 -> STR_27(CODE[17]), STR_26(CODE[17]), STR_25(CODE[17]), STR_24(CODE[17]), 
		 -> STR_23(CODE[14]), STR_22(CODE[10]), STR_21(CODE[24]), STR_7(CODE[7]), 
		 -> STR_6(CODE[17]), STR_5(CODE[18]), STR_4(CODE[16]), STR_3(CODE[18]), 
		 -> STR_2(CODE[14]), STR_1(CODE[18]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _handler in COMRAM

    _handler->_printSortTimer
    i2_change_state_to_menu_start->i2_printRTC
    i2_printRTC->i2_printf
    i2_change_state_to_menu_22->i2_printf
    i2_change_state_to_menu_12->i2_printf
    _change_state_to_menu_23->i2_printf
    _change_state_to_menu_11->i2_printf
    _change_state_to_logs_34->i2_printf
    _change_state_to_logs_33->i2_printf
    _change_state_to_logs_23->i2_printf
    _change_state_to_logs_22->i2_printf
    _change_state_to_logs_12->i2_printf
    _change_state_to_logs_11->i2_printf
    _dispLogs->_retrieveLog
    _retrieveLog->i2___wmul
    _printSortTimer->i2_printf
    i2_printf->i2___lwdiv
    i2_putch->i2_lcdNibble
    i2___lwdiv->i2___lwmod
    i2_lcdInst->i2_lcdNibble
    i2_getRTC->i2_I2C_Master_Read
    i2_getRTC->i2_I2C_Master_Write
    i2_I2C_Master_Write->i2_I2C_Master_Wait
    i2_I2C_Master_Stop->i2_I2C_Master_Wait
    i2_I2C_Master_Start->i2_I2C_Master_Wait
    i2_I2C_Master_Read->i2_I2C_Master_Wait

Critical Paths under _main in BANK0

    _main->_UI
    _sort->_Loading
    _Loading->_EEPROM_write
    _initSortTimer->_getRTC
    _getIR->_readIR
    _readIR->_readADC
    _ID->_getMAG
    _getMAG->_readMAG
    _Distribution->_updateServoPosition
    _logRun->_EEPROM_write
    _EEPROM_write->_printf
    _loadRTC->_I2C_Master_Init
    _I2C_Master_Init->___lldiv
    _change_state_to_menu_start->_printRTC
    _initLCD->_lcdInst
    _UI->_printRTC
    _printRTC->_printf
    _getRTC->_I2C_Master_Read
    _getRTC->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _change_state_to_menu_22->_printf
    _change_state_to_menu_12->_printf
    ___awdiv->___awmod
    _Test->_actuatorTest
    _sensorTest->_printf
    _readMAG->_readADC
    _algorithmTest->_printf
    _actuatorTest->_printf
    _SpeedTest->_printf
    _PusherTest->_printf
    _PortTestA5->_printf
    _BothServos->_printf
    _initServos->_updateServoPosition
    _BlockerTest->_printf
    _printf->___awdiv
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _lcdInst->_lcdNibble

Critical Paths under _handler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _handler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _handler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _handler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _handler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _handler in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _handler in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _handler in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _handler in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _handler in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _handler in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _handler in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _handler in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _handler in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _handler in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _handler in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  195398
                    _I2C_Master_Init
                               _Test
                                 _UI
                            _initLCD
                           _initTime
                             _initUI
                             _logRun
                      _machineConfig
                               _sort
                        _stopSignals
 ---------------------------------------------------------------------------------
 (1) _stopSignals                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _sort                                                 0     0      0   22363
                       _Distribution
                                 _ID
                            _Loading
 ---------------------------------------------------------------------------------
 (2) _Loading                                              9     9      0   16904
                                             49 BANK0      9     9      0
                        _EEPROM_read
                       _EEPROM_write
                           _delay_ms
                              _getIR
                     _initGlobalVars
                         _initServos
                      _initSortTimer
                            _lcdInst
 ---------------------------------------------------------------------------------
 (3) _initSortTimer                                        5     5      0     631
                                              5 BANK0      5     5      0
                             _getRTC
 ---------------------------------------------------------------------------------
 (3) _initGlobalVars                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _getIR                                                2     2      0      45
                                              6 BANK0      2     2      0
                             _readIR
 ---------------------------------------------------------------------------------
 (4) _readIR                                               4     4      0      45
                                              2 BANK0      4     4      0
                            _readADC
 ---------------------------------------------------------------------------------
 (3) _delay_ms                                             2     2      0      23
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _ID                                                   8     8      0     206
                                              8 BANK0      8     8      0
                             _getMAG
 ---------------------------------------------------------------------------------
 (3) _getMAG                                               2     2      0      45
                                              6 BANK0      2     2      0
                            _readMAG
 ---------------------------------------------------------------------------------
 (2) _Distribution                                         2     2      0    5253
                                              8 BANK0      2     2      0
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (1) _machineConfig                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _logRun                                              10    10      0   10978
                                             49 BANK0     10    10      0
                        _EEPROM_read
                       _EEPROM_write
 ---------------------------------------------------------------------------------
 (3) _EEPROM_write                                         6     3      3   10231
                                             43 BANK0      6     3      3
                        _EEPROM_read
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (4) _EEPROM_read                                          2     0      2     426
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _initUI                                               0     0      0   22352
         _change_state_to_menu_start
                            _loadRTC
 ---------------------------------------------------------------------------------
 (2) _loadRTC                                              3     3      0     914
                                             21 BANK0      3     3      0
                    _I2C_Master_Init
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Init                                      8     4      4     440
                                             13 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     290
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_start                           0     0      0   21438
                            _lcdInst
                           _printRTC
                             _printf
 ---------------------------------------------------------------------------------
 (1) _initTime                                             7     1      6     538
                                              0 BANK0      7     1      6
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                              3 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _UI                                                  24    24      0   44456
                                             68 BANK0     22    22      0
                            ___awdiv
                            ___awmod
            _change_state_to_menu_12
            _change_state_to_menu_22
                            _lcdInst
                           _printRTC
                             _printf
                             _strcpy
 ---------------------------------------------------------------------------------
 (3) _printRTC                                            25    25      0   12903
                                             43 BANK0     25    25      0
                             _getRTC
                            _lcdInst
                             _printf
                             _strcpy
 ---------------------------------------------------------------------------------
 (4) _strcpy                                               6     2      4    3275
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) _getRTC                                               2     2      0     519
                                              3 BANK0      2     2      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Write                                     2     0      2     406
                                              1 BANK0      2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Read                                      2     2      0      45
                                              1 BANK0      2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (6) _I2C_Master_Wait                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_22                              0     0      0    8535
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_12                              0     0      0    8535
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4    1064
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     556
                                              6 BANK0      8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (1) _Test                                                 2     2      0   94136
                                             70 BANK0      2     2      0
                        _BlockerTest
                         _BothServos
                         _EEPROMTest
                         _PortTestA5
                          _PortTests
                         _PusherTest
                          _SpeedTest
                       _actuatorTest
                      _algorithmTest
                            _lcdInst
                             _printf
                         _sensorTest
 ---------------------------------------------------------------------------------
 (2) _sensorTest                                           4     4      0    8647
                                             43 BANK0      4     4      0
                            _lcdInst
                             _printf
                            _readADC
                            _readMAG
 ---------------------------------------------------------------------------------
 (4) _readMAG                                              4     4      0      45
                                              2 BANK0      4     4      0
                            _readADC
 ---------------------------------------------------------------------------------
 (5) _readADC                                              2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _algorithmTest                                        2     2      0    8535
                                             43 BANK0      2     2      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _actuatorTest                                        27    27      0   15031
                                             43 BANK0     27    27      0
                            _lcdInst
                             _printf
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (2) _SpeedTest                                            1     1      0    8535
                                             43 BANK0      1     1      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _PusherTest                                           5     5      0    8627
                                             43 BANK0      5     5      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _PortTests                                            2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _PortTestA5                                           1     1      0    8535
                                             43 BANK0      1     1      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _EEPROMTest                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _BothServos                                           2     2      0   19041
                                             43 BANK0      2     2      0
                         _initServos
                            _lcdInst
                             _printf
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (3) _initServos                                           1     1      0    5253
                                              8 BANK0      1     1      0
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (4) _updateServoPosition                                  8     4      4    5253
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (2) _BlockerTest                                          5     5      0    8650
                                             43 BANK0      5     5      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (4) _printf                                              33    21     12    8400
                                             14 BANK0     29    17     12
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (5) _isdigit                                              3     3      0      68
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     669
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              5     1      4     515
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              7     3      4     442
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) _lcdInst                                              1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     113
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _handler                                             16    16      0   76936
                                             74 COMRAM    16    16      0
                     _printSortTimer
                         _updateMenu
 ---------------------------------------------------------------------------------
 (8) _updateMenu                                           2     2      0   71999
                                             66 COMRAM     2     2      0
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
                           _dispLogs
                       _inputHandler
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
       i2_change_state_to_menu_start
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_start                         0     0      0    7744
                          i2_lcdInst
                         i2_printRTC
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) i2_printRTC                                         25    25      0    4605
                                             41 COMRAM    25    25      0
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
                           i2_strcpy
 ---------------------------------------------------------------------------------
 (11) i2_strcpy                                            6     2      4     699
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (9) _inputHandler                                         4     2      2   31390
                                             41 COMRAM     4     2      2
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_22                            0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_12                            0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_23                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_11                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_34                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_33                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_23                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_22                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_12                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_11                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) _dispLogs                                             2     0      2    1475
                                             17 COMRAM     2     0      2
                        _retrieveLog
 ---------------------------------------------------------------------------------
 (10) _retrieveLog                                        11     9      2    1047
                                              6 COMRAM    11     9      2
                      i2_EEPROM_read
                           i2___wmul
 ---------------------------------------------------------------------------------
 (11) i2_EEPROM_read                                       2     0      2     174
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (8) _printSortTimer                                      33    33      0    4937
                                             41 COMRAM    33    33      0
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) i2_printf                                           33    21     12    3004
                                             12 COMRAM    29    17     12
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch
 ---------------------------------------------------------------------------------
 (11) i2_putch                                             1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (11) i2_isdigit                                           3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (11) i2___wmul                                            6     2      4     469
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (11) i2___lwmod                                           5     1      4     367
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (11) i2___lwdiv                                           7     3      4     318
                                              5 COMRAM     7     3      4
                          i2___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (11) i2_lcdInst                                           1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (12) i2_lcdNibble                                         2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (11) i2_getRTC                                            2     2      0     213
                                              3 COMRAM     2     2      0
                  i2_I2C_Master_Read
                 i2_I2C_Master_Start
                  i2_I2C_Master_Stop
                 i2_I2C_Master_Write
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Write                                  2     0      2     100
                                              1 COMRAM     2     0      2
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Stop                                   0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Start                                  0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Read                                   2     2      0      45
                                              1 COMRAM     2     2      0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (13) i2_I2C_Master_Wait                                   1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
     ___lldiv
   _Test
     _BlockerTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _BothServos
       _initServos
         _updateServoPosition
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _updateServoPosition
     _EEPROMTest
     _PortTestA5
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _PortTests
     _PusherTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _SpeedTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _actuatorTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _updateServoPosition
     _algorithmTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _lcdInst
       _lcdNibble
     _printf
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
     _sensorTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _readADC
       _readMAG
         _readADC
   _UI
     ___awdiv
       ___awmod (ARG)
     ___awmod
     _change_state_to_menu_12
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _change_state_to_menu_22
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _lcdInst
       _lcdNibble
     _printRTC
       _getRTC
         _I2C_Master_Read
           _I2C_Master_Wait
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _strcpy
     _printf
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
     _strcpy
   _initLCD
     _lcdInst
       _lcdNibble
   _initTime
   _initUI
     _change_state_to_menu_start
       _lcdInst
         _lcdNibble
       _printRTC
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
         _lcdInst
           _lcdNibble
         _printf
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _lcdNibble
         _strcpy
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _loadRTC
       _I2C_Master_Init
         ___lldiv
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
   _logRun
     _EEPROM_read
     _EEPROM_write
       _EEPROM_read
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
   _machineConfig
   _sort
     _Distribution
       _updateServoPosition
     _ID
       _getMAG
         _readMAG
           _readADC
     _Loading
       _EEPROM_read
       _EEPROM_write
         _EEPROM_read
         _lcdInst
           _lcdNibble
         _printf
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _lcdNibble
       _delay_ms
       _getIR
         _readIR
           _readADC
       _initGlobalVars
       _initServos
         _updateServoPosition
       _initSortTimer
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
       _lcdInst
         _lcdNibble
   _stopSignals

 _handler (ROOT)
   _printSortTimer
     i2___lwdiv
       i2___lwmod (ARG)
     i2___lwmod
     i2___wmul
     i2_getRTC
       i2_I2C_Master_Read
         i2_I2C_Master_Wait
       i2_I2C_Master_Start
         i2_I2C_Master_Wait
       i2_I2C_Master_Stop
         i2_I2C_Master_Wait
       i2_I2C_Master_Write
         i2_I2C_Master_Wait
     i2_lcdInst
       i2_lcdNibble
     i2_printf
       i2___lwdiv
         i2___lwmod (ARG)
       i2___lwmod
       i2___wmul
       i2_isdigit
       i2_putch
         i2_lcdNibble
   _updateMenu
     _change_state_to_logs_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_33
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_34
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _dispLogs
       _retrieveLog
         i2_EEPROM_read
         i2___wmul
     _inputHandler
       _change_state_to_logs_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_33
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_34
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
     i2_change_state_to_menu_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_start
       i2_lcdInst
         i2_lcdNibble
       i2_printRTC
         i2_getRTC
           i2_I2C_Master_Read
             i2_I2C_Master_Wait
           i2_I2C_Master_Start
             i2_I2C_Master_Wait
           i2_I2C_Master_Stop
             i2_I2C_Master_Wait
           i2_I2C_Master_Write
             i2_I2C_Master_Wait
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
         i2_strcpy
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      37       7       21.5%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     5A      80       5      100.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     5A      7D       1       99.2%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     134      34        0.0%
DATA                 0      0     134       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Sat Mar 25 12:01:48 2017

                                    _i 012D                     i2_I2C_Master_Start 4A14  
                   i2_I2C_Master_Write 49EA                                     l66 4982  
                                   _ID 3290                            __CFG_CPD$ON 000000  
                                   _UI 08CA                           ___awdiv@sign 008B  
                                   _up 0077                    ___wmul@multiplicand 0082  
                   i2___lwdiv@dividend 0006                            __CFG_BORV$3 000000  
                   EEPROM_read@address 0080                           __CFG_CP0$OFF 000000  
                         __CFG_CP1$OFF 000000                           __CFG_CP2$OFF 000000  
                         __CFG_CP3$OFF 000000                                    ID@i 008A  
                                  ?_ID 0001                                    ?_UI 0001  
                                  UI@i 00C8                                    l180 09A0  
                                  l602 204E                                    l730 2DF0  
                                  l803 3E66                                    l750 3364  
                                  l751 337E                                    l487 38AC  
                                  l739 2E9C                                    l950 494E  
                                  l937 34E8                                    l959 3154  
                         __CFG_CPB$OFF 000000                                    _PEN 007E2A  
                                  _SEN 007E28                    ?i2_I2C_Master_Start 0001  
                       ?_machineConfig 0001                    ?i2_I2C_Master_Write 0002  
                                  _log 00E6                                    _sel 00FD  
                                  _var 00FA                           ___awmod@sign 0085  
                                  wreg 000FE8                    i2printRTC@RTC_month 003B  
                  __end_of_BlockerTest 3812                    _log_count_can_w_lab 00EC  
      __end_of_change_state_to_menu_11 4620        __end_of_change_state_to_menu_12 4490  
      __end_of_change_state_to_menu_22 4458        __end_of_change_state_to_menu_23 45F0  
         _f_can_coming_to_distribution 006F                         ??_Distribution 0088  
      __end_of_change_state_to_logs_11 4710        __end_of_change_state_to_logs_12 46E0  
      __end_of_change_state_to_logs_22 46B0        __end_of_change_state_to_logs_23 479A  
      __end_of_change_state_to_logs_33 4680        __end_of_change_state_to_logs_34 4650  
                                 ??_ID 0088                                   ??_UI 00C4  
                         __CFG_LVP$OFF 000000                           __CFG_WDT$OFF 000000  
                                 l1110 007C                                   l1120 018C  
                                 l1121 01DA                                   l1113 0080  
                                 l1122 0240                                   l1123 028E  
                                 l1051 3410                                   l1204 4154  
                                 l1212 36AE                                   l1117 0126  
                                 l1054 3430                                   l1223 372A  
                                 l1225 3744                                   l1219 36E6  
                                 l1147 05E8                                   l1075 3608  
                                 l1308 13B6                                   l1164 0858  
                                 l1084 1CF8                                   l1181 3D4A  
                                 l1254 3CFE                                   l1078 360C  
                                 l1183 3D4E                                   l1247 3CEE  
                                 l1159 0782                                   l1087 1CFC  
                                 l1272 37E0                                   l1264 3798  
                                 l1184 3D52                                   l1273 37FA  
                                 l1185 3D56                                   l1177 3D2E  
                                 l1274 380C                                   l1186 3D5A  
                                 l1187 3D5E                                   l1189 3D9C  
                                 l1198 4144                                   l1702 3A3A  
                                 l6000 20B2                                   l6010 2148  
                                 l6002 20D0                                   l1755 3E20  
                                 l6012 2166                                   l6004 20EE  
                                 l6020 21C0                                   l1765 403A  
                                 l6014 2184                                   l6006 210C  
                                 l6022 221E                                   l7000 038E  
                                 l6016 21A2                                   l6008 212A  
                                 l7010 03B6                                   l5402 47DA  
                                 l7004 0398                                   l5404 47EC  
                                 l6220 3592                                   l6204 3550  
                                 l6212 3572                                   l7030 041C  
                                 l7014 03C0                                   l6230 4838  
                                 l5600 1192                                   l7112 05C0  
                                 l7104 059E                                   l7040 0444  
                                 l7008 03B0                                   l6216 3588  
                                 l6208 355A                                   l5602 11A4  
                                 l7114 05C6                                   l7034 0434  
                                 l7026 0412                                   l7018 03D8  
                                 l5426 4764                                   l6226 4822  
                                 l6162 3A70                                   l5460 3DD0  
                                 l5444 4812                                   l5620 125E  
                                 l5612 11E2                                   l7140 0652  
                                 l7132 0630                                   l7108 05A8  
                                 l7060 04B8                                   l7052 0496  
                                 l7044 045C                                   l7036 043A  
                                 l5462 3DDC                                   l5710 14F0  
                                 l5702 14C8                                   l5630 129C  
                                 l5606 11AE                                   l7222 07DC  
                                 l7150 067A                                   l7142 0658  
                                 l7118 05D0                                   l7070 04E0  
                                 l7062 04BE                                   l6350 3BF0  
                                 l6158 3A5A                                   l5472 3E12  
                                 l5464 3DE2                                   l5480 3FF6  
                                 l5720 1524                                   l5640 1314  
                                 l5632 12A2                                   l7232 0804  
                                 l7136 063A                                   l7056 04A0  
                                 l8200 307A                                   l6168 3AE6  
                                 l5482 4002                                   l5714 150A  
                                 l5650 1376                                   l5642 131A  
                                 l7314 3D26                                   l7242 0842  
                                 l7226 07F4                                   l7218 07D2  
                                 l7162 06BE                                   l7146 0662  
                                 l7082 0524                                   l7066 04C8  
                                 l5730 449A                                   l6346 3BDA  
                                 l8202 308E                                   l6258 4254  
                                 l5484 4008                                   l5724 157C  
                                 l5708 14E4                                   l5644 1332  
                                 l5628 1290                                   l7500 37FC  
                                 l7252 0872                                   l7236 081C  
                                 l7228 07FA                                   l7172 06E6  
                                 l7092 054C                                   l5732 44A6  
                                 l6356 3C1C                                   l5718 151E  
                                 l5670 1408                                   l5638 1308  
                                 l5654 137C                                   l5726 1588  
                                 l7334 36D0                                   l7262 089A  
                                 l7254 0878                                   l7166 06D6  
                                 l7158 06B4                                   l7086 053C  
                                 l7078 051A                                   l7510 38EE  
                                 l5742 3C7A                                   l6630 3302  
                                 _ADIE 007CEE                                   l5488 402C  
                                 l5672 140E                                   l5648 135E  
                                 l7344 3700                                   l7272 08C2  
                                 l7264 08A0                                   l7192 075A  
                                 l7184 0738                                   l7176 06FE  
                                 l7168 06DC                                   l7096 0564  
                                 l7088 0542                                   l6608 2EB6  
                                 l5690 146C                                   l5666 13EE  
                                 l7362 3D62                                   l7258 0882  
                                 l7194 0760                                   l7522 3922  
                                 l5738 3C64                                   l8226 310E  
                                 l6642 3336                                   l6634 3310  
                                 l6562 2DAE                                   l5684 144A  
                                 l5596 117E                                   l7348 3714  
                                 l7268 08AA                                   l7188 0742  
                                 l6812 1E96                                   l8260 3442  
                                 l7524 392E                                   l7516 3904  
                                 l5748 3C9A                                   l5780 39BE  
                                 l5694 14A4                                   l5766 3E52  
                                 l7198 076A                                   l6806 1E54  
                                 l8270 3460                                   l8262 3448  
                                 l8238 33B2                                   l7542 3986  
                                 l7534 3964                                   l7526 3934  
                                 l7710 0B3A                                   l7702 0B18  
                                 l5782 39CE                                   l6670 2762  
                                 l6646 3344                                   l6590 2E4E  
                                 l6574 2E14                                   l8342 3880  
                                 l5696 14AE                                   l5768 3E7C  
                                 l6832 1F12                                   l6824 1EE2  
                                 l8272 3466                                   l8264 344E  
                                 l8256 3436                                   l7640 09F2  
                                 l7632 09D0                                   l5792 3A28  
                                 l5784 39D4                                   l6672 277C  
                                 l6680 27CA                                   l6648 334E  
                                 l8344 3886                                   l8360 38AE  
                                 l8336 385C                                   l7490 37CA  
                                 l8274 346C                                   l8266 3454  
                                 l8258 343C                                   l7538 3972  
                                 l7570 3B6C                                   l7562 3B36  
                                 l7554 3B12                                   l7810 0EF6  
                                 l7802 0ED4                                   l7730 0BC8  
                                 l7706 0B22                                   l7626 09B8  
                                 l6690 2862                                   l6674 2796  
                                 l6682 27F8                                   l8354 38A2  
                                 l8346 388C                                   l8338 3872  
                                 l6844 1F5A                                   l6836 1F48  
                                 l8268 345A                                   l7564 3B42  
                                 l7900 108A                                   l7820 0F12  
                                 l7740 0C5E                                   l7732 0BE6  
                                 l7660 0A62                                   l7644 0A04  
                                 l7636 09DA                                   l7628 09BE  
                                 l6692 287C                                   l6676 27B0  
                                 l8356 38A8                                   l8278 3472  
                                 l7566 3B48                                   l7574 3B7A  
                                 l7558 3B22                                   l7806 0EDE  
                                 l7750 0CF4                                   l7742 0C7C  
                                 l7734 0C04                                   l7726 0B8C  
                                 l6686 282E                                   l6598 2E86  
                                 l7488 37C0                                   l6848 1F90  
                                 l6776 1D4C                                   l7904 10A2  
                                 l7824 0F2A                                   l7816 0F08  
                                 l7760 0DB8                                   l7744 0C9A  
                                 l7736 0C22                                   l7728 0BAA  
                                 l7664 0A6C                                   l6688 2848  
                                 l6696 2896                                   l6890 00F0  
                                 l6794 1E04                                   l7578 3B8E  
                                 l5994 2058                                   l7930 1122  
                                 l7922 1100                                   l7850 0FB2  
                                 l7842 0F90                                   l7746 0CB8  
                                 l7738 0C40                                   l7754 0D12  
                                 l7658 0A5C                                   l7674 0A92  
                                 l6698 28C4                                   l5996 2076  
                                 l5988 1FCC                                   l7940 113E  
                                 l7860 0FCE                                   l7764 0DC2  
                                 l7748 0CD6                                   l7756 0D76  
                                 l7692 0AEE                                   l7668 0A84  
                                 l6982 032C                                   l6974 030A  
                                 l6894 00FA                                   l5998 2094  
                                 l7926 110A                                   l7846 0F9A  
                                 l7782 0E0E                                   l7774 0DEC  
                                 l6992 0354                                   l6984 0332  
                                 l6888 00EA                                   l7944 1156  
                                 l7936 1134                                   l7864 0FE6  
                                 l7856 0FC4                                   l7768 0DDA  
                                 l7696 0B06                                   l7688 0AE4  
                                 l6978 0314                                   l6898 0112  
                                 l7890 106E                                   l7882 104C  
                                 l7778 0DF6                                   l6988 033C  
                                 l7948 1162                                   l7886 1056  
                                 l7896 1080                                   STR_1 FBA3  
                                 STR_2 FF27                                   STR_3 FB91  
                                 STR_4 FE4A                                   STR_5 FB91  
                                 STR_6 FDE6                                   STR_7 FFC4  
                                 STR_8 FFDB                                   STR_9 FFCB  
                                 _LATA 000F89                                   _LATB 000F8A  
                                 _LATC 000F8B                                   _LATD 000F8C  
                                 _LATE 000F8D                                   u4010 12DC  
                                 u4017 12D2                                   u4050 1354  
                                 u5200 1D8E                                   u4057 134A  
                                 u5210 1D90                                   u5070 32CE  
                                 u5240 1F36                                   u3730 4762  
                                 u6051 37B6                                   _PEIE 007F96  
                                 u6060 37B8                                   u5340 0126  
                                 u5270 1F7E                                   u5078 32D2  
                                 u5360 01DA                                   u5248 1F3A  
                                 u4640 204E                                   u4625 4074  
                                 u3930 4342                                   u5380 028E  
                                 u3940 4344                                   _RCEN 007E2B  
                                 u3950 438E                                   u5278 1F82  
                                 u7150 3154                                   u8007 019C  
                                 u3951 438A                                   u3960 4390  
                                 u8017 01BA                                   u8107 0424  
                                 u8027 01EA                                   u8117 044C  
                                 u8037 0250                                   u8207 06C6  
                                 u8127 04A8                                   u8047 026E  
                                 u7407 422A                                   u8217 06EE  
                                 u8137 04D0                                   u8057 029E  
                                 u7417 482E                                   i2l66 4996  
                                 u4970 2DBA                                   u8307 08B2  
                                 u8227 074A                                   u8147 052C  
                                 u8067 031C                                   u7507 3506  
                                 u7427 32A6                                   u8317 3CB8  
                                 u8237 0772                                   u8157 0554  
                                 u8077 0344                                   u7517 3562  
                                 u7437 3368                                   u7357 2D3E  
                                 u4990 2DF0                                   u8407 15B6  
                                 u8327 3D08                                   u8247 0794  
                                 u8167 05B0                                   u8087 03A0  
                                 u7607 0AF6                                   u7527 359A  
                                 u7447 3372                                   u7367 2E04  
                                 u8417 1602                                   u8337 3D1C  
                                 u8257 07E4                                   u8177 05D8  
                                 u8097 03C8                                   u7617 0B2A  
                                 u7537 43A0                                   u7457 3398  
                                 u7377 2E6E                                   u8507 1832  
                                 u8427 164E                                   u8347 368E  
                                 u8267 080C                                   u8187 0642  
                                 u7707 0FD6                                   u7627 0B54  
                                 u7547 43D4                                   u7467 451A  
                                 u7387 2EA0                                   u4988 2DBE  
                                 u8517 1864                                   u8437 1682  
                                 u8357 36EA                                   u8277 085C  
                                 u8197 066A                                   u7717 1000  
                                 u7637 0DCA                                   u7557 08E2  
                                 u7477 281E                                   u7397 2EAA  
                                 u8607 3FA4                                   u8527 18B0  
                                 u8447 16B4                                   u8367 36F2  
                                 u8287 0866                                   u7807 1CEC  
                                 u7727 105E                                   u7647 0DFE  
                                 u7567 09E2                                   u7487 28D2  
                                 u8617 3FD0                                   u8537 18E4  
                                 u8457 1700                                   u8377 372E  
                                 u8297 088A                                   u7817 1D0E  
                                 u7737 1092                                   u7657 0E28  
                                 u7577 0A1E                                   u7497 2904  
                                 u8627 3FDA                                   u8547 1916  
                                 u8467 1734                                   u8387 3738  
                                 u7907 1EF0                                   u7827 1D3C  
                                 u7747 10BC                                   u7667 0EE6  
                                 u7587 0A74                                   u8557 419E  
                                 u8477 1766                                   u8397 410E  
                                 u7917 47E2                                   u7837 1DA4  
                                 u7757 1112                                   u7677 0F1A  
                                 u7597 0AA0                                   u8567 3758  
                                 u8487 17B2                                   u7927 35B8  
                                 u7847 1DF8                                   u7767 1146  
                                 u7687 0F44                                   u8577 37E4  
                                 u8497 17FE                                   u7937 35FC  
                                 u7857 1E18                                   u7777 33C0  
                                 u7697 0FA2                                   u8587 37EE  
                                 u7947 361E                                   u7867 1E46  
                                 u7787 3404                                   u8597 3F9A  
                                 u7957 002C                                   u7877 1E8A  
                                 u7797 1CA8                                   u7967 0070  
                                 u7887 1EA8                                   u7977 0092  
                                 u7897 1ED6                                   u7987 0102  
                                 u7997 0136                                   _RSEN 007E29  
                          _stopSignals 4956                                   _Test 33B2  
                                 _back 005B                                   _main 3812  
                                 _down 0067                                   _keys FB01  
                                 _time 0124                                   fsr0h 000FEA  
                                 fsr1h 000FE2                     i2___lwdiv@quotient 000A  
                                 indf0 000FEF                                   fsr2h 000FDA  
                                 fsr0l 000FE9                                   indf2 000FDF  
                                 fsr1l 000FE1                                   fsr2l 000FD9  
                                 _sort 48DC                                   btemp 007E  
                 ??i2_I2C_Master_Start 0002                   ??i2_I2C_Master_Write 0004  
                                 prodh 000FF4                                   prodl 000FF3  
                                 start 000E                          __CFG_IESO$OFF 000000  
                 _log_count_can_no_lab 00EA                        __end_ofi2_putch 49D4  
                  __size_of_EEPROMTest 0002                          __CFG_MCLRE$ON 000000  
                         ___param_bank 000000                             i2_printRTC 2522  
                          i2_lcdNibble 41B6                        __end_of_Loading 2EC0  
                 __end_of_actuatorTest 08CA                       ?_I2C_Master_Init 008D  
                     ?_I2C_Master_Read 0001                       ?_I2C_Master_Wait 0001  
          ??i2_change_state_to_menu_12 002A            ??i2_change_state_to_menu_22 002A  
                     ?_I2C_Master_Stop 0001                                  ?_Test 0001  
                 __end_of_EEPROM_write 35AA                                  ?_main 0001  
                                _ACKEN 007E2C                                  _ACKDT 007E2D  
                      __end_of___awdiv 3990                                  _EEADR 000FA9  
                                STR_10 FFE7                                  STR_11 FFEB  
                                STR_12 FFFB                                  STR_20 FFEF  
                                STR_13 FFDF                                  STR_21 FB1C  
                                STR_14 FFD7                                  STR_22 FF9B  
                                STR_30 FDF7                                  STR_15 FFD3  
                                STR_23 FF19                                  STR_31 FDD5  
                                STR_16 FFE3                                  STR_24 FD3C  
                                STR_32 FD1A                                  STR_40 FCD6  
                                STR_17 FFF3                                  STR_25 FE19  
                                STR_33 FD2B                                  STR_41 FCC5  
                                STR_18 FFF7                                  STR_34 FDC4  
                                STR_50 FDA2                                  STR_42 FD80  
                                STR_26 FD4D                                  STR_43 FD80  
                                STR_35 FDC4                                  STR_51 FFDB  
                                STR_19 FFCF                                  STR_27 FE08  
                                STR_52 FFCB                                  STR_60 FFF3  
                                STR_28 FD5E                                  STR_36 FD09  
                                STR_44 FCE7                        __end_of___awmod 3B98  
                                STR_45 FCD6                                  STR_37 FD1A  
                                STR_53 FFE7                                  STR_61 FFF7  
                                STR_29 FE16                                  STR_62 FFCF  
                                STR_54 FFEB                                  STR_70 FED2  
                                STR_38 FDB3                                  STR_46 FD91  
                                STR_47 FD91                                  STR_55 FFFB  
                                STR_63 FB1C                                  STR_71 FF0B  
                                STR_39 FD6F                                  STR_56 FFDF  
                                STR_64 FF7C                                  STR_80 FE5A  
                                STR_48 FCF8                                  STR_72 FC5F  
                                STR_49 FCE7                                  STR_57 FFD7  
                                STR_81 FE16                                  STR_65 FF42  
                                STR_73 FEEF                                  STR_58 FFD3  
                                STR_74 FF4F                                  STR_90 FEC3  
                                STR_82 FE87                                  STR_66 FB34  
                                STR_59 FFE3                                  STR_67 FFBD  
                                STR_91 FEE1                                  STR_75 FEB4  
                                STR_83 FE2A                                  STR_84 FF87  
                                STR_76 FEFD                                  STR_92 FC81  
                                STR_68 FC70                                  STR_85 FF87  
                                STR_77 FFAE                                  STR_93 FF5B  
                                STR_69 FCA3                                  STR_78 FF0B  
                                STR_86 FFA5                                  STR_94 FC92  
                                STR_87 FFA5                                  STR_95 FF66  
                                STR_79 FF35                                  STR_88 FF91  
                                STR_96 FEA5                                  STR_89 FF0B  
                                STR_97 FC0A                                  STR_98 FBF9  
                                STR_99 FBD7                                  ?_sort 0001  
                      __end_of___lldiv 3A4C                                  _T0CON 000FD5  
                      ___awdiv@divisor 0088                                  _T1CON 000FCD  
                                _T3CON 000FB1                        __end_of___lwdiv 3E2A  
                      __end_of___lwmod 4044                                  i2l257 251E  
                                i2l602 25B0                                  i2l950 497A  
                                i2l872 2FD2                                  i2l874 2FF2  
                                i2l868 2F86                        ___awdiv@counter 008A  
                                _TMR0H 000FD7                                  _TMR1H 000FCF  
                                _TMR0L 000FD6                                  _TMR3H 000FB3  
                                _TMR1L 000FCE                                  _TMR3L 000FB2  
                           _BothServos 15A8                                  _PORTB 000F81  
                                _TRISA 000F92                                  _TRISB 000F93  
                                _TRISC 000F94                                  _TRISD 000F95  
                                _TRISE 000F96                          __CFG_PWRT$OFF 000000  
                        __CFG_WRT0$OFF 000000                          __CFG_WRT1$OFF 000000  
                        __CFG_WRT2$OFF 000000                          __CFG_WRT3$OFF 000000  
                      __end_of_lcdInst 49C8                        __end_of_handler 302E  
                       __CFG_EBTR0$OFF 000000                         __CFG_FCMEN$OFF 000000  
                       __CFG_EBTR1$OFF 000000                         __CFG_EBTR2$OFF 000000  
                       __CFG_EBTR3$OFF 000000                                  _nRBPU 007F8F  
                        __CFG_WRTB$OFF 000000                          __CFG_WRTC$OFF 000000  
                        __CFG_WRTD$OFF 000000                        __end_of_readADC 47F2  
                      __end_of_initLCD 43DE                         __CFG_EBTRB$OFF 000000  
                                _debug 0065                             i2isdigit@c 0003  
                                _getIR 420C                        __end_of_loadRTC 3C24  
                      __end_of_readMAG 4398                        __end_of_dpowers FB1C  
                                _first 0073                                  _enter 0069  
                      __end_of_isdigit 481C                                  _input 007D  
                                _putch 49A8                                  pclath 000FFA  
                                tablat 000FF5                       __end_ofi2___wmul 4892  
                     __end_ofi2_getRTC 3F12                    _log_count_pop_w_tab 00F0  
                                status 000FD8                         __CFG_PBADEN$ON 000000  
                        i2printf@width 0028                       __end_ofi2_printf 1C9A  
                   __size_ofi2___lwdiv 0052                     __size_ofi2___lwmod 0042  
                     __end_ofi2_strcpy 4560                            Loading@addr 00B3  
                     _count_can_no_lab 005D                   __size_of_EEPROM_read 0018  
                      __initialization 42B2                           __end_of_Test 34C6  
                   __size_ofi2_lcdInst 000C                           __end_of_main 38D2  
                         __end_of_keys FB12                           __end_of_sort 48FE  
                           i2printf@ap 0020                             i2printf@cp 001E  
                   __size_ofi2_isdigit 001E                       PusherTest@i_1696 00AE  
                          _BlockerTest 374A                                 ??_Test 00C6  
  __size_of_change_state_to_menu_start 002C                        ??_machineConfig 0080  
                               ??_main 00DA                                 ??_sort 00BA  
                        __activetblptr 000003             updateServoPosition@my_time 0086  
           updateServoPosition@time_us 0080                             i2strcpy@cp 0005  
                           i2strcpy@to 0001                      ?_I2C_Master_Start 0001  
                  EEPROM_write@address 00AB                 __size_ofi2_EEPROM_read 0016  
                    ?_I2C_Master_Write 0081                                 ?_getIR 0001  
                   ??_I2C_Master_Start 0081                                 _ADCON0 000FC2  
                               _ADCON1 000FC1                     ??_I2C_Master_Write 0083  
                               _ADCON2 000FC0                                 STR_100 FC2C  
                               STR_101 FC3D                                 STR_110 FCB4  
                               STR_102 FBB5                                 STR_103 FE3A  
                               STR_111 FB49                                 STR_120 FFB6  
                               STR_104 FBE8                                 STR_112 FB5B  
                               STR_113 FF71                                 STR_105 FBC6  
                               STR_106 FBE8                                 STR_114 FC1B  
                               _ADRESH 000FC4                                 STR_107 FE96  
                               STR_115 FC4E                                 STR_108 FE78  
                               STR_116 FB6D                                 _EEADRH 000FAA  
                               STR_117 FB5B                                 STR_109 FE69  
                               STR_118 FB49                                 _ADRESL 000FC3  
                               STR_119 FB7F                                 _EEDATA 000FA8  
                               _EECON2 000FA7                       ___awdiv@dividend 0086  
                      i2lcdNibble@data 0002                                 ?_putch 0001  
               __size_of_initSortTimer 00AA                        i2lcdNibble@temp 0001  
            i2_change_state_to_menu_12 4590              i2_change_state_to_menu_22 4560  
                               _INT1IE 007F83                                 _INT1IF 007F80  
                               _CVRCON 000FB5                                 i2l1308 1B06  
                               i2l1755 42A8                                 i2l1765 4416  
                               i2l6150 3278                                 i2l6142 3244  
                               i2l6310 25FC                                 i2l5512 48B2  
                               i2l6400 2B5C                                 i2l6320 266A  
                               i2l6312 2612                                 i2l6304 25BA  
                               i2l8000 230A                                 i2l6138 3234  
                               i2l6410 2B86                                 i2l6322 2680  
                               i2l6314 2628                                 i2l6306 25D0  
                               i2l6330 26C2                                 i2l6500 2CB6  
                               i2l6412 2B8A                                 i2l6324 2696  
                               i2l6316 263E                                 i2l6308 25E6  
                               i2l6332 271C                                 i2l8100 2490  
                               i2l8020 2350                                 i2l8012 2334  
                               i2l8004 2318                                 i2l5550 4282  
                               i2l6430 2BC0                                 i2l6422 2BA8  
                               i2l6326 26AC                                 i2l6318 2654  
                               i2l8110 24B4                                 i2l5536 4936  
                               i2l6512 2CEC                                 i2l6504 2CC8  
                               i2l6432 2BC6                                 i2l6424 2BAE  
                               i2l6408 2B76                                 i2l8104 24A6  
                               i2l8040 23A6                                 i2l8032 2382  
                               i2l8024 2366                                 i2l8016 2342  
                               i2l8008 2326                                 i2l5546 4276  
                               i2l5570 43F8                                 i2l6426 2BB4  
                               i2l6418 2B94                                 i2l5804 3ED8  
                               i2l5548 427E                                 i2l6508 2CDA  
                               i2l6428 2BBA                                 i2l6436 2BCC  
                               i2l8060 23F4                                 i2l8052 23D0  
                               i2l8044 23B4                                 i2l8036 2390  
                               i2l8028 2374                                 i2l5814 3F02  
                               i2l5558 429E                                 i2l5574 440C  
                               i2l5566 43EC                                 i2l5902 1B34  
                               i2l6462 2C36                                 i2l6518 2CF6  
                               i2l5808 3EE8                                 i2l5568 43F4  
                               i2l5920 1B82                                 i2l5832 1936  
                               i2l6472 2C5C                                 i2l6456 2C28  
                               i2l6448 2C10                                 i2l8080 2442  
                               i2l8072 2426                                 i2l8064 2402  
                               i2l8056 23E6                                 i2l8048 23C2  
                               i2l5930 1BC0                                 i2l5906 1B4C  
                               i2l5842 195A                                 i2l6490 2C96  
                               i2l6482 2C7E                                 i2l6466 2C52  
                               i2l6298 254E                                 i2l5932 1BC8  
                               i2l5908 1B50                                 i2l5836 1946  
                               i2l8308 2A84                                 i2l6476 2C70  
                               i2l8092 2474                                 i2l8084 2450  
                               i2l8076 2434                                 i2l8068 2410  
                               i2l8412 2FA4                                 i2l5950 1C10  
                               i2l5926 1B9C                                 i2l5838 1954  
                               i2l6478 2C74                                 i2l8414 2FA6  
                               i2l5960 1C76                                 i2l5944 1BF4  
                               i2l5880 1A90                                 i2l5864 1A16  
                               i2l5856 19EE                                 i2l5848 198C  
                               i2l6496 2CA4                                 i2l8096 2482  
                               i2l8088 2466                                 i2l5946 1BFC  
                               i2l5954 1C22                                 i2l5938 1BDE  
                               i2l5874 1A6E                                 i2l5866 1A20  
                               i2l5890 1AD0                                 i2l5962 1C7E  
                               i2l5956 1C28                                 i2l5884 1ABA  
                               i2l5876 1A78                                 i2l5868 1A24  
                               i2l8292 2968                                 i2l8436 2FF0  
                               i2l5886 1ACC                                 i2l5878 1A7E  
                               i2l5966 4538                                 i2l8390 2F5A  
                               i2l8374 2F3A                                 i2l8288 2958  
                               i2l5968 4540                                 i2l8376 2F3E  
                               i2l8298 29C2                                 i2l8750 2510  
                               i2l8754 2BE4                                 i2l8746 24D2  
                               i2l7962 2292                                 i2l8756 2C00  
                               i2l8748 24F4                                 i2l7980 22D0  
                               i2l7972 22B4                                 i2l7964 2298  
                               i2l7992 22EC                                 i2l7976 22C2  
                               i2l7968 22A6                                 i2l7996 22FA  
                               i2l7988 22DE                                 _OSCCON 000FD3  
                               _TMR0IE 007F95                                 _TMR0IF 007F92  
                            ??i2_putch 0003                                 _TMR1IE 007CE8  
                               _TMR1IF 007CF0                                 _TMR2IE 007CE9  
                               _TMR3IE 007D01                                 _TMR3IF 007D09  
                               _TMR0ON 007EAF                                 _TMR1ON 007E68  
                               _TMR3ON 007D88                                 _SSPADD 000FC8  
                               _TRISC3 007CA3                                 _TRISC4 007CA4  
                               _SSPBUF 000FC9                              ??_Loading 00B1  
                     __end_of_delay_ms 4844                   delay_ms@milliseconds 0081  
                       __CFG_XINST$OFF 000000                       ID@sensor_outputs 008C  
                     __end_of_dispLogs 48DC                            ?i2_printRTC 0001  
                     retrieveLog@byte1 000B                       retrieveLog@byte2 000C  
                     retrieveLog@byte3 000D                   __end_of_Distribution 294C  
                               ___wmul 44C6                              ??___awdiv 008A  
                       __CFG_STVREN$ON 000000                                 _getMAG 44FC  
                            ??___awmod 0084                            logRun@byte1 00B2  
                          logRun@byte2 00B3                            logRun@byte3 00B4  
                               _getRTC 3C24                              ??___lldiv 0088  
                            ??___lwdiv 0084                              ??___lwmod 008B  
                     ??_printSortTimer 002A                       __end_of_initTime 4920  
                               _initUI 4710                                 _readIR 4300  
                               _logRun 302E                                 clear_0 42D8  
                               clear_1 42E4                                 clear_2 42F0  
                     ___awdiv@quotient 008C                        ___awmod@divisor 0082  
                           _PortTestA5 4100                        ___awmod@counter 0084  
                            ??_lcdInst 0082                                 _printf 1170  
                            ??_handler 004B                __size_of_initGlobalVars 0068  
                         ?_retrieveLog 0007                                 _strcpy 4490  
                   __size_of_SpeedTest 0084                              ??_readADC 0080  
                            ??_initLCD 0083                              ??_loadRTC 0095  
                            ??_readMAG 0082   __end_ofi2_change_state_to_menu_start 486C  
__size_ofi2_change_state_to_menu_start 0028           i2_change_state_to_menu_start 4844  
                          ?_BothServos 0001                           ??_EEPROMTest 0080  
                            ??_isdigit 0080                     __size_of_PortTests 0084  
                    __end_ofi2___lwdiv 42B2                       __end_of_printRTC 2262  
                         __mediumconst FB00                      __end_ofi2___lwmod 4420  
                               tblptrh 000FF7                                 tblptrl 000FF6  
                               tblptru 000FF8                   _log_count_pop_no_tab 00EE  
                __end_of_algorithmTest 3680                      __end_ofi2_lcdInst 49E0  
                           _PusherTest 3680                      __end_ofi2_isdigit 493E  
                           __accesstop 0080                __end_of__initialization 42F6  
                        ?_inputHandler 002A                          ___rparam_used 000001  
              printSortTimer@start_sec 003D                  __size_of_actuatorTest 08B8  
                        i2_EEPROM_read 496C                           Loading@byte1 00B5  
                   i2___lwmod@dividend 0001                     __end_of_EEPROMTest 4A1E  
                       __pcstackCOMRAM 0001                  __size_of_EEPROM_write 00E4  
                         __pidataBANK1 49F4                          __end_of_getIR 4260  
                          i2printRTC@i 0041                          _initSortTimer 3A4C  
          __end_of_updateServoPosition 3EA0                          __end_of_putch 49B8  
                          i2printf@len 0022                            i2printf@val 0024  
                           __end_of_ID 33B2                             __end_of_UI 1170  
                   printSortTimer@hour 002D                              ?i2___wmul 0001  
                   __size_of_lcdNibble 0068                              ?i2_getRTC 0001  
                          i2putch@data 0003                  printSortTimer@curTime 002F  
   __end_of_change_state_to_menu_start 47C6          ?i2_change_state_to_menu_start 0001  
           _change_state_to_menu_start 479A                  printSortTimer@cur_sec 003F  
                            ?i2_printf 000D                                ??_getIR 0086  
                            ?i2_strcpy 0001                       _count_pop_no_tab 0061  
                  __size_ofi2_printRTC 0236                                ??_putch 0082  
                         _actuatorTest 0012                             __pbssBANK0 00DA  
                           __pbssBANK1 0100                           ?_stopSignals 0001  
                       ??_inputHandler 002C                           _EEPROM_write 34C6  
             ?_change_state_to_menu_11 0001               ?_change_state_to_menu_12 0001  
                              UI@F3225 012F               ?_change_state_to_menu_22 0001  
             ?_change_state_to_menu_23 0001                      __end_of_SpeedTest 3D2E  
                       ?i2_EEPROM_read 0001               ?_change_state_to_logs_11 0001  
             ?_change_state_to_logs_12 0001               ?_change_state_to_logs_22 0001  
             ?_change_state_to_logs_23 0001               ?_change_state_to_logs_33 0001  
             ?_change_state_to_logs_34 0001                    __size_of_BothServos 0384  
                    __end_of_PortTests 3DB2                      printRTC@RTC_month 00BC  
                         ?i2_lcdNibble 0001                                UI@i_412 00CA  
                              UI@i_413 00CB                                UI@i_431 00CC  
                              UI@i_440 00D1                                UI@i_432 00CD  
                              UI@i_409 00C9                                UI@i_443 00D2  
                              UI@i_435 00CE                                UI@i_444 00D3  
                              UI@i_436 00CF                                UI@i_447 00D4  
                              UI@i_439 00D0                                UI@i_448 00D5  
                       ?_initSortTimer 0001                                ?___wmul 0080  
                              ?_getMAG 0001                                ?_getRTC 0001  
                              ?_initUI 0001                                ?_readIR 0001  
                              ?_logRun 0001               updateServoPosition@timer 0082  
                              UI@month 00D6                            ?_PortTestA5 0001  
                              ?_printf 008E                                _UI$2314 00C6  
                              ?_strcpy 0080                             ??i2___wmul 0005  
                           ??i2_getRTC 0004                              ?_delay_ms 0001  
                           ??i2_printf 0019                             ??i2_strcpy 0005  
                            ?_dispLogs 0012                                _SSPCON1 000FC6  
                              _SSPCON2 000FC5                            ?_PusherTest 0001  
                              _SSPSTAT 000FC7                                _RTCflag 00DE  
                              i2_putch 49C8                              ?_initTime 0080  
                      _f_loadingNewCan 00E4                        i2printRTC@month 003D  
                __size_of_Distribution 01F4            __size_ofi2_I2C_Master_Start 0008  
                    __end_of_lcdNibble 3FE2                                _Loading 2D24  
          __size_ofi2_I2C_Master_Write 000A                       EEPROM_write@data 00AD  
                              __Hparam 0000                                __Lparam 0000  
   __size_ofi2_change_state_to_menu_12 0030     __size_ofi2_change_state_to_menu_22 0030  
                            ?_printRTC 0001                                ___awdiv 38D2  
                              ___awmod 3AF6                             _initServos 415C  
                              ___lldiv 3990                        __size_of___wmul 0036  
                      __size_of_getMAG 0032                                ___lwdiv 3DB2  
                              ___lwmod 3FE2                        __size_of_getRTC 0086  
                      printSortTimer@i 0049                              _CMCONbits 000FB4  
                    retrieveLog@logNum 0007                           logRun@byte11 00B6  
                         ?_BlockerTest 0001                        __size_of_initUI 002E  
                      __size_of_readIR 004C                                __pcinit 42B2  
                 i2EEPROM_read@address 0001                        __size_of_logRun 013C  
                         logRun@byte_i 00B5                                __ramtop 1000  
                       _initGlobalVars 3F12                                _lcdInst 49B8  
                              _handler 0008                                __ptext0 3812  
                              __ptext1 4956                                __ptext2 48DC  
                              __ptext3 2D24                                __ptext4 3A4C  
                              __ptext5 3F12                                __ptext6 420C  
                              __ptext7 4300                                __ptext8 481C  
                              __ptext9 3290                        __size_of_printf 0438  
                              _readADC 47C6                        __size_of_strcpy 0036  
                              _initLCD 4398                                _cur_can 00E0  
                              _loadRTC 3B98                                _readMAG 434C  
                              _dpowers FB12                     actuatorTest@i_1650 00AE  
                   actuatorTest@i_1651 00AF                     actuatorTest@i_1643 00AD  
                   actuatorTest@i_1660 00B5                     actuatorTest@i_1653 00B0  
                   actuatorTest@i_1670 00BB                     actuatorTest@i_1662 00B6  
                   actuatorTest@i_1654 00B1                     actuatorTest@i_1663 00B7  
                   actuatorTest@i_1680 00C1                     actuatorTest@i_1672 00BC  
                   actuatorTest@i_1656 00B2                     actuatorTest@i_1673 00BD  
                   actuatorTest@i_1665 00B8                     actuatorTest@i_1657 00B3  
                   actuatorTest@i_1682 00C2                     actuatorTest@i_1666 00B9  
                   actuatorTest@i_1683 00C3                     actuatorTest@i_1675 00BE  
                   actuatorTest@i_1659 00B4                     actuatorTest@i_1676 00BF  
                   actuatorTest@i_1669 00BA                     actuatorTest@i_1679 00C0  
                              _isdigit 47F2                       ___awmod@dividend 0080  
                              getRTC@i 0083                   __size_of_retrieveLog 0126  
                           ??_delay_ms 0080               __size_of_I2C_Master_Init 0060  
             __size_of_I2C_Master_Read 002E                          _log_startTime 0100  
             __size_of_I2C_Master_Wait 0014               __size_of_I2C_Master_Stop 0008  
                           ??_dispLogs 0014                           _Distribution 2758  
                       __pintcode_body 2EC0                   end_of_initialization 42F6  
                              logRun@i 00B7                             ??_initTime 0086  
                      ??i2_EEPROM_read 0003                                int_func 2EC0  
                  i2___wmul@multiplier 0001                          ??_EEPROM_read 0082  
                  __size_of_PortTestA5 005C              __size_of_I2C_Master_Start 0008  
            __size_of_I2C_Master_Write 000A                        ___lldiv@divisor 0084  
                      ___lldiv@counter 008C                        ??_initSortTimer 0085  
                              printf@c 00A8                           ??i2_printRTC 002A  
                              printf@f 008E                             ??_printRTC 00AB  
                     I2C_Master_Init@c 008D                       I2C_Master_Read@a 0081  
                              postdec1 000FE5                                postdec2 000FDD  
                              postinc0 000FEE                                postinc2 000FDE  
               __end_of_initGlobalVars 3F7A                             _sensorTest 1C9A  
                  __size_of_PusherTest 00CA                             _servoTimes 011C  
                            _PORTAbits 000F80                              _PORTBbits 000F81  
                 __end_of_inputHandler 2D24                           ??_BothServos 00AB  
                __end_of_machineConfig 4100                             _updateMenu 2262  
                    i2_I2C_Master_Read 4892                              _IR_signal 00DA  
                    i2_I2C_Master_Wait 4996                      i2_I2C_Master_Stop 4A0C  
                    i2___lwdiv@divisor 0008                        _log_count_total 00F2  
                            i2___lwdiv 4260                              i2___lwmod 43DE  
                    i2___lwdiv@counter 000C                     ?i2_I2C_Master_Read 0001  
                   ?i2_I2C_Master_Wait 0001                     __end_ofi2_printRTC 2758  
                   ?i2_I2C_Master_Stop 0001                          actuatorTest@i 00C4  
         ??_change_state_to_menu_start 00C4                              i2_lcdInst 49D4  
                        Loading@i_1098 00B6                             _total_time 00F8  
                          printf@width 00A9                   __size_of_stopSignals 0016  
                  ??i2_I2C_Master_Read 0002                              i2_isdigit 4920  
                  ??i2_I2C_Master_Wait 0001                    ??i2_I2C_Master_Stop 0002  
                            i2getRTC@i 0004                     __end_of_BothServos 192C  
                          PusherTest@i 00AC                    __end_of_EEPROM_read 4956  
                          ?_initServos 0001                        ?_initGlobalVars 0001  
                       __end_of___wmul 44FC                         __end_of_getMAG 452E  
                       __end_of_getRTC 3CAA                   __size_ofi2_lcdNibble 0056  
                        EEPROM_write@i 00AF                          i2lcdInst@data 0003  
                       __end_of_initUI 473E                         __end_of_readIR 434C  
                       __end_of_logRun 316A                       i2___wmul@product 0005  
                       __end_of_printf 15A8                           i2printf@flag 0026  
                       __end_of_strcpy 44C6              __end_ofi2_I2C_Master_Read 48B8  
            __end_ofi2_I2C_Master_Wait 49A8                           i2printf@prec 001D  
                  start_initialization 42B2              __end_ofi2_I2C_Master_Stop 4A14  
                           readMAG@res 0084                      __size_ofi2___wmul 0026  
                      _count_can_w_lab 005F            ?_change_state_to_menu_start 0001  
                    __size_ofi2_getRTC 0072                              i2printf@c 0027  
                            i2printf@f 000D                     EEPROM_write@i_1329 00B0  
                i2I2C_Master_Read@temp 0003                             ?i2___lwdiv 0006  
                           ?i2___lwmod 0001                      __size_ofi2_printf 036E  
                    __size_ofi2_strcpy 0032                      ??_I2C_Master_Init 0091  
                    ??_I2C_Master_Read 0081                      ??_I2C_Master_Wait 0080  
                           ?i2_lcdInst 0001                      ??_I2C_Master_Stop 0081  
                     __CFG_OSC$INTIO67 000000                             ?i2_isdigit 0001  
                           initTime@DD 0083                             initTime@MM 0084  
                           initTime@YY 0085                        retrieveLog@addr 0010  
                           logRun@addr 00B9                              _SpeedTest 3CAA  
                             ??___wmul 0084                               ??_getMAG 0086  
                             ??_getRTC 0083                 __size_of_algorithmTest 00D6  
                            _PortTests 3D2E                            ?_sensorTest 0001  
                          __pdataBANK1 012F                       __CFG_LPT1OSC$OFF 000000  
                             ??_initUI 00C4                               ??_readIR 0082  
                             ??_logRun 00B1                           ??_PortTestA5 00AB  
               printSortTimer@timeDiff 0047       __size_of_change_state_to_menu_11 0030  
     __size_of_change_state_to_menu_12 0038       __size_of_change_state_to_menu_22 0038  
     __size_of_change_state_to_menu_23 0030                               ??_printf 009A  
     __size_of_change_state_to_logs_11 0030       __size_of_change_state_to_logs_12 0030  
     __size_of_change_state_to_logs_22 0030       __size_of_change_state_to_logs_23 002E  
     __size_of_change_state_to_logs_33 0030       __size_of_change_state_to_logs_34 0030  
                             ??_strcpy 0084                    _printSortTimer$2434 0045  
                 __size_of_BlockerTest 00C8                            __pbssCOMRAM 005B  
         __size_of_updateServoPosition 0076                            ?_updateMenu 0001  
                        __pcstackBANK0 0080                __size_of_printSortTimer 01F2  
                    i2___lwmod@divisor 0003                      i2___lwmod@counter 0005  
                         _isdigit$1958 0081                           ??_PusherTest 00AB  
                    __size_of_delay_ms 0028                         initSortTimer@i 0088  
                    printSortTimer@min 0041                      printSortTimer@sec 0043  
                  __size_of_initServos 005A                      __size_of_dispLogs 0024  
                     printRTC@INT_time 00AE                           i2strcpy@from 0003  
                             ?i2_putch 0001                        _count_pop_w_tab 0063  
                          _EEPROM_read 493E                     __end_of_PortTestA5 415C  
                     _I2C_Master_Start 4A04                              _f_lastCan 0071  
                             ?_Loading 0001                    i2I2C_Master_Write@d 0002  
                     _I2C_Master_Write 49E0                      __size_of_initTime 0022  
                     ___lwdiv@dividend 0080                      __CFG_CCP2MX$PORTC 000000  
                            __pintcode 0008                             ?_SpeedTest 0001  
                        __pmediumconst FB00                              _lcdNibble 3F7A  
                __size_of_inputHandler 01E6                               ?___awdiv 0086  
                             ?___awmod 0080                               ?___lldiv 0080  
                             ?___lwdiv 0080                             ?_PortTests 0001  
                             ?___lwmod 0087                      __size_of_printRTC 02CA  
                   __end_of_PusherTest 374A                               ?_lcdInst 0001  
                             ?_handler 0001                               ?_readADC 0001  
                             ?_initLCD 0001                               ?_loadRTC 0001  
                             ?_readMAG 0001                               ?_isdigit 0001  
           __size_ofi2_I2C_Master_Read 0026             __size_ofi2_I2C_Master_Wait 0012  
           __size_ofi2_I2C_Master_Stop 0008                              _firstboot 0075  
                            _cur_state 00E2                       ___lwdiv@quotient 0084  
                       __size_of_getIR 0054                          _algorithmTest 35AA  
                          ??i2___lwdiv 000A                            ??i2___lwmod 0005  
                       __size_of_putch 0010                            __size_of_ID 0122  
                          __size_of_UI 08A6                    __size_of_sensorTest 02FE  
           __end_ofi2_I2C_Master_Start 4A1C             __end_ofi2_I2C_Master_Write 49F4  
                          ??i2_lcdInst 0003                         ___wmul@product 0084  
                             _LATAbits 000F89                               _LATCbits 000F8B  
                             _LATDbits 000F8C                               _LATEbits 000F8D  
                         _inputHandler 2B3E                            ??i2_isdigit 0001  
                         BlockerTest@i 00AC                               i2u442_40 1AB2  
                             i2u442_47 1AA8                               _PIR2bits 000FA1  
                             i2u438_40 1A52                               i2u438_47 1A48  
                             i2u383_40 48B0                               i2u720_40 2A7E  
                             i2u481_40 25B0                               i2u863_47 2B7C  
                             i2u864_47 41CE                               i2u865_47 41D8  
                             i2u866_47 41FA                               i2u867_47 4204  
                  __size_of_updateMenu 02C0                         _log_completion 00E8  
                     __CFG_WDTPS$32768 000000                             ?_lcdNibble 0001  
                            _was_low_1 0079                              _was_low_3 007B  
                        ??_retrieveLog 0009                             _ADCON0bits 000FC2  
                    ___wmul@multiplier 0080                              _startTime 010E  
                             i2___wmul 486C                          lcdNibble@data 0081  
                             i2_getRTC 3EA0                             printf@flag 00A7  
                        lcdNibble@temp 0080                             printf@prec 009E  
                             Loading@i 00B8                               i2_printf 192C  
                             i2_strcpy 452E                         ?_algorithmTest 0001  
                  I2C_Master_Read@temp 0082                              copy_data0 42C6  
                            readIR@res 0084                       __size_ofi2_putch 000C  
                           _EECON1bits 000FA6                  __end_ofi2_EEPROM_read 4982  
                          _count_total 00FE                       ??_initGlobalVars 0080  
                             __Hrparam 0000                       __size_of_Loading 019C  
                            initTime@h 0081                              initTime@m 0080  
                            initTime@s 0086                              initTime@w 0082  
                             __Lrparam 0000                     __CFG_BOREN$SBORDIS 000000  
                            logRun@num 00B1                            ??_SpeedTest 00AB  
                __end_of_initSortTimer 3AF6                           ??_initServos 0088  
                          ??_PortTests 0080                       __size_of___awdiv 00BE  
                     __size_of___awmod 00A2                _change_state_to_menu_11 45F0  
           ?i2_change_state_to_menu_12 0001                _change_state_to_menu_12 4458  
           ?i2_change_state_to_menu_22 0001                _change_state_to_menu_22 4420  
              _change_state_to_menu_23 45C0                  i2___wmul@multiplicand 0003  
                     __size_of___lldiv 00BC                       __size_of___lwdiv 0078  
              _change_state_to_logs_11 46E0                _change_state_to_logs_12 46B0  
              _change_state_to_logs_22 4680                _change_state_to_logs_23 476C  
              _change_state_to_logs_33 4650                _change_state_to_logs_34 4620  
                     __size_of___lwmod 0062                         readADC@channel 0081  
                   i2I2C_Master_Read@a 0002                       __size_of_lcdInst 0010  
                     __size_of_handler 3026                             _EEPROMTest 4A1C  
                      _I2C_Master_Init 4044                       __size_of_readADC 002C  
                      _I2C_Master_Read 473E                       __size_of_initLCD 0046  
                         _f_ID_receive 006B                       __size_of_loadRTC 008C  
                     __size_of_readMAG 004C                        _I2C_Master_Wait 4982  
                      _I2C_Master_Stop 49FC                        BlockerTest@flag 00AE  
                     __size_of_isdigit 002A                               _delay_ms 481C  
                       _printSortTimer 294C                        ___lwdiv@divisor 0082  
                      ___lwdiv@counter 0086                    __end_of_retrieveLog 3290  
                             __ptext10 44FC                               __ptext11 2758  
                             __ptext20 479A                               __ptext12 40A4  
                             __ptext21 48FE                               __ptext13 302E  
                             __ptext30 473E                               __ptext22 4398  
                             __ptext14 34C6                               __ptext31 4982  
                             __ptext23 08CA                               __ptext15 493E  
                             __ptext40 35AA                               __ptext32 4420  
                             __ptext24 1F98                               __ptext16 4710  
                             __ptext41 0012                               __ptext33 4458  
                             __ptext25 4490                               __ptext17 3B98  
                             __ptext50 374A                               __ptext42 3CAA  
                             __ptext34 3AF6                               __ptext26 3C24  
                             __ptext18 4044                               __ptext51 1170  
                             __ptext43 3680                               __ptext35 38D2  
                             __ptext27 49E0                               __ptext19 3990  
                             __ptext60 2262                               __ptext52 49A8  
                             __ptext44 3D2E                               __ptext36 33B2  
                             __ptext28 49FC                               __ptext61 4844  
                             __ptext53 47F2                               __ptext45 4100  
                             __ptext37 1C9A                               __ptext29 4A04  
                             __ptext70 4650                               __ptext62 2522  
                             __ptext54 44C6                               __ptext46 4A1C  
                             __ptext38 434C                               __ptext71 476C  
                             __ptext63 452E                               __ptext55 3FE2  
                             __ptext47 15A8                               __ptext39 47C6  
                             __ptext80 49C8                               __ptext72 4680  
                             __ptext64 2B3E                               __ptext56 3DB2  
                             __ptext48 415C                               __ptext81 4920  
                             __ptext73 46B0                               __ptext65 4560  
                             __ptext57 49B8                               __ptext49 3E2A  
                             __ptext90 4A14                               __ptext82 486C  
                             __ptext74 46E0                               __ptext66 4590  
                             __ptext58 3F7A                               __ptext91 4892  
                             __ptext83 43DE                               __ptext75 48B8  
                             __ptext67 45C0                               __ptext92 4996  
                             __ptext84 4260                               __ptext76 316A  
                             __ptext68 45F0                               __ptext85 49D4  
                             __ptext77 496C                               __ptext69 4620  
                             __ptext86 41B6                               __ptext78 294C  
                             __ptext87 3EA0                               __ptext79 192C  
                             __ptext88 49EA                               __ptext89 4A0C  
                             _dispLogs 48B8                          ?_actuatorTest 0001  
                        ??_stopSignals 0080                             strcpy@from 0082  
                       i2_isdigit$1958 0002                     __end_of_initServos 41B6  
                        __size_of_Test 0114                          ?_EEPROM_write 00AB  
                             _initTime 48FE                          __size_of_main 00C0  
                        __size_of_sort 0022         ??i2_change_state_to_menu_start 0043  
                             _logstate 00F6                    _updateServoPosition 3E2A  
               __size_of_machineConfig 005C                          ??i2_lcdNibble 0001  
                             _printRTC 1F98                            ??_lcdNibble 0080  
                            printRTC@i 00C2                               int$flags 007E  
                         ??_sensorTest 00AB                         _log_total_time 00F4  
                   _f_can_coming_to_ID 006D                              printf@len 00A3  
                            printf@val 00A5      __end_ofi2_change_state_to_menu_12 45C0  
    __end_ofi2_change_state_to_menu_22 4590                               loadRTC@i 0096  
               __end_of_printSortTimer 2B3E                              putch@data 0082  
             __end_of_I2C_Master_Start 4A0C                            _OSCTUNEbits 000F9B  
             __end_of_I2C_Master_Write 49EA                             _INTCONbits 000FF2  
                 ?_updateServoPosition 0080                           ??_updateMenu 0043  
                      ??_algorithmTest 00AB                             _MAG_signal 00DC  
                             isdigit@c 0082                          sensorTest@res 00AD  
                       ??_actuatorTest 00AB                               intlevel2 0000  
                       ??_EEPROM_write 00AE                     __end_of_sensorTest 1F98  
                     ___lwmod@dividend 0087                       ___lldiv@dividend 0080  
                         ?_EEPROM_read 0080                    __end_of_stopSignals 496C  
            ??_change_state_to_menu_11 002A              ??_change_state_to_menu_12 00AB  
            ??_change_state_to_menu_22 00AB              ??_change_state_to_menu_23 002A  
            ??_change_state_to_logs_11 002A              ??_change_state_to_logs_12 002A  
            ??_change_state_to_logs_22 002A              ??_change_state_to_logs_23 002A  
            ??_change_state_to_logs_33 002A              ??_change_state_to_logs_34 002A  
                             printf@ap 00A1                               printf@cp 009F  
                   __end_of_updateMenu 2522                __end_of_I2C_Master_Init 40A4  
              __end_of_I2C_Master_Read 476C                __end_of_I2C_Master_Wait 4996  
                        ??_BlockerTest 00AB                __end_of_I2C_Master_Stop 4A04  
                          lcdInst@data 0082                          printRTC@F3216 0133  
                         retrieveLog@i 000E                            _retrieveLog 316A  
                  __end_ofi2_lcdNibble 420C                  ??_updateServoPosition 0084  
                      ?_printSortTimer 0001                       ___lldiv@quotient 0088  
                    I2C_Master_Write@d 0081                            ?_EEPROMTest 0001  
                      ___lwmod@divisor 0089                      _f_can_distributed 012B  
                             strcpy@cp 0084                               strcpy@to 0080  
                        _machineConfig 40A4                        ___lwmod@counter 008B  
                        printRTC@month 00BE                          ?_Distribution 0001  
                        _machine_state 00FC                          dispLogs@myLog 0012  
                   i2printRTC@INT_time 002D  
