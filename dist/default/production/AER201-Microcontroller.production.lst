

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Wed Mar 29 00:09:16 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	text45,global,reloc=2,class=CODE,delta=1
    60                           	psect	text46,global,reloc=2,class=CODE,delta=1
    61                           	psect	text47,global,reloc=2,class=CODE,delta=1
    62                           	psect	text48,global,reloc=2,class=CODE,delta=1
    63                           	psect	text49,global,reloc=2,class=CODE,delta=1
    64                           	psect	text50,global,reloc=2,class=CODE,delta=1
    65                           	psect	text51,global,reloc=2,class=CODE,delta=1
    66                           	psect	text52,global,reloc=2,class=CODE,delta=1
    67                           	psect	text53,global,reloc=2,class=CODE,delta=1
    68                           	psect	text54,global,reloc=2,class=CODE,delta=1
    69                           	psect	text55,global,reloc=2,class=CODE,delta=1
    70                           	psect	text56,global,reloc=2,class=CODE,delta=1
    71                           	psect	text57,global,reloc=2,class=CODE,delta=1
    72                           	psect	text58,global,reloc=2,class=CODE,delta=1
    73                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    74                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    75                           	psect	text60,global,reloc=2,class=CODE,delta=1
    76                           	psect	text61,global,reloc=2,class=CODE,delta=1
    77                           	psect	text62,global,reloc=2,class=CODE,delta=1
    78                           	psect	text63,global,reloc=2,class=CODE,delta=1
    79                           	psect	text64,global,reloc=2,class=CODE,delta=1
    80                           	psect	text65,global,reloc=2,class=CODE,delta=1
    81                           	psect	text66,global,reloc=2,class=CODE,delta=1
    82                           	psect	text67,global,reloc=2,class=CODE,delta=1
    83                           	psect	text68,global,reloc=2,class=CODE,delta=1
    84                           	psect	text69,global,reloc=2,class=CODE,delta=1
    85                           	psect	text70,global,reloc=2,class=CODE,delta=1
    86                           	psect	text71,global,reloc=2,class=CODE,delta=1
    87                           	psect	text72,global,reloc=2,class=CODE,delta=1
    88                           	psect	text73,global,reloc=2,class=CODE,delta=1
    89                           	psect	text74,global,reloc=2,class=CODE,delta=1
    90                           	psect	text75,global,reloc=2,class=CODE,delta=1
    91                           	psect	text76,global,reloc=2,class=CODE,delta=1
    92                           	psect	text77,global,reloc=2,class=CODE,delta=1
    93                           	psect	text78,global,reloc=2,class=CODE,delta=1
    94                           	psect	text79,global,reloc=2,class=CODE,delta=1
    95                           	psect	text80,global,reloc=2,class=CODE,delta=1
    96                           	psect	text81,global,reloc=2,class=CODE,delta=1
    97                           	psect	text82,global,reloc=2,class=CODE,delta=1
    98                           	psect	text83,global,reloc=2,class=CODE,delta=1
    99                           	psect	text84,global,reloc=2,class=CODE,delta=1
   100                           	psect	text85,global,reloc=2,class=CODE,delta=1
   101                           	psect	text86,global,reloc=2,class=CODE,delta=1
   102                           	psect	text87,global,reloc=2,class=CODE,delta=1
   103                           	psect	text88,global,reloc=2,class=CODE,delta=1
   104                           	psect	text89,global,reloc=2,class=CODE,delta=1
   105                           	psect	text90,global,reloc=2,class=CODE,delta=1
   106                           	psect	text91,global,reloc=2,class=CODE,delta=1
   107                           	psect	text92,global,reloc=2,class=CODE,delta=1
   108                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   109                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   110                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   111  0000                     
   112                           ; Version 1.40
   113                           ; Generated 01/12/2016 GMT
   114                           ; 
   115                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
   116                           ; All rights reserved.
   117                           ; 
   118                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   119                           ; 
   120                           ; Redistribution and use in source and binary forms, with or without modification, are
   121                           ; permitted provided that the following conditions are met:
   122                           ; 
   123                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   124                           ;        conditions and the following disclaimer.
   125                           ; 
   126                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   127                           ;        of conditions and the following disclaimer in the documentation and/or other
   128                           ;        materials provided with the distribution.
   129                           ; 
   130                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   131                           ;        software without specific prior written permission.
   132                           ; 
   133                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   134                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   135                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   136                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   137                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   138                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   139                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   140                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   141                           ; 
   142                           ; 
   143                           ; Code-generator required, PIC18F4620 Definitions
   144                           ; 
   145                           ; SFR Addresses
   146  0000                     
   147                           	psect	idataBANK1
   148  004B6C                     __pidataBANK1:
   149                           	opt stack 0
   150                           
   151                           ;initializer for UI@F3226
   152  004B6C  4D                 	db	77
   153  004B6D  4D                 	db	77
   154  004B6E  4D                 	db	77
   155  004B6F  00                 	db	0
   156                           
   157                           ;initializer for printRTC@F3217
   158  004B70  4D                 	db	77
   159  004B71  4D                 	db	77
   160  004B72  4D                 	db	77
   161  004B73  00                 	db	0
   162                           
   163                           	psect	mediumconst
   164  00FB00                     __pmediumconst:
   165                           	opt stack 0
   166  00FB00  00                 	db	0
   167  00FB01                     _keys:
   168                           	opt stack 0
   169  00FB01  31                 	db	49
   170  00FB02  32                 	db	50
   171  00FB03  33                 	db	51
   172  00FB04  41                 	db	65
   173  00FB05  34                 	db	52
   174  00FB06  35                 	db	53
   175  00FB07  36                 	db	54
   176  00FB08  42                 	db	66
   177  00FB09  37                 	db	55
   178  00FB0A  38                 	db	56
   179  00FB0B  39                 	db	57
   180  00FB0C  43                 	db	67
   181  00FB0D  2A                 	db	42
   182  00FB0E  30                 	db	48
   183  00FB0F  23                 	db	35
   184  00FB10  44                 	db	68
   185  00FB11  00                 	db	0
   186  00FB12                     __end_of_keys:
   187                           	opt stack 0
   188  00FB12                     _dpowers:
   189                           	opt stack 0
   190  00FB12  0001               	dw	1
   191  00FB14  000A               	dw	10
   192  00FB16  0064               	dw	100
   193  00FB18  03E8               	dw	1000
   194  00FB1A  2710               	dw	10000
   195  00FB1C                     __end_of_dpowers:
   196                           	opt stack 0
   197  0000                     _ADCON0	set	4034
   198  0000                     _ADCON0bits	set	4034
   199  0000                     _ADCON1	set	4033
   200  0000                     _ADCON2	set	4032
   201  0000                     _ADRESH	set	4036
   202  0000                     _ADRESL	set	4035
   203  0000                     _CMCONbits	set	4020
   204  0000                     _CVRCON	set	4021
   205  0000                     _EEADR	set	4009
   206  0000                     _EEADRH	set	4010
   207  0000                     _EECON1bits	set	4006
   208  0000                     _EECON2	set	4007
   209  0000                     _EEDATA	set	4008
   210  0000                     _INTCONbits	set	4082
   211  0000                     _LATA	set	3977
   212  0000                     _LATAbits	set	3977
   213  0000                     _LATB	set	3978
   214  0000                     _LATC	set	3979
   215  0000                     _LATCbits	set	3979
   216  0000                     _LATD	set	3980
   217  0000                     _LATDbits	set	3980
   218  0000                     _LATE	set	3981
   219  0000                     _LATEbits	set	3981
   220  0000                     _OSCCON	set	4051
   221  0000                     _OSCTUNEbits	set	3995
   222  0000                     _PIR2bits	set	4001
   223  0000                     _PORTAbits	set	3968
   224  0000                     _PORTB	set	3969
   225  0000                     _PORTBbits	set	3969
   226  0000                     _SSPADD	set	4040
   227  0000                     _SSPBUF	set	4041
   228  0000                     _SSPCON1	set	4038
   229  0000                     _SSPCON2	set	4037
   230  0000                     _SSPSTAT	set	4039
   231  0000                     _T0CON	set	4053
   232  0000                     _T1CON	set	4045
   233  0000                     _T3CON	set	4017
   234  0000                     _TMR0H	set	4055
   235  0000                     _TMR0L	set	4054
   236  0000                     _TMR1H	set	4047
   237  0000                     _TMR1L	set	4046
   238  0000                     _TMR3H	set	4019
   239  0000                     _TMR3L	set	4018
   240  0000                     _TRISA	set	3986
   241  0000                     _TRISB	set	3987
   242  0000                     _TRISC	set	3988
   243  0000                     _TRISD	set	3989
   244  0000                     _TRISE	set	3990
   245  0000                     _ACKDT	set	32301
   246  0000                     _ACKEN	set	32300
   247  0000                     _ADIE	set	31982
   248  0000                     _INT1IE	set	32643
   249  0000                     _INT1IF	set	32640
   250  0000                     _PEIE	set	32662
   251  0000                     _PEN	set	32298
   252  0000                     _RCEN	set	32299
   253  0000                     _RSEN	set	32297
   254  0000                     _SEN	set	32296
   255  0000                     _TMR0IE	set	32661
   256  0000                     _TMR0IF	set	32658
   257  0000                     _TMR0ON	set	32431
   258  0000                     _TMR1IE	set	31976
   259  0000                     _TMR1IF	set	31984
   260  0000                     _TMR1ON	set	32360
   261  0000                     _TMR2IE	set	31977
   262  0000                     _TMR3IE	set	32001
   263  0000                     _TMR3IF	set	32009
   264  0000                     _TMR3ON	set	32136
   265  0000                     _TRISC3	set	31907
   266  0000                     _TRISC4	set	31908
   267  0000                     _nRBPU	set	32655
   268  00FB1C                     STR_21:
   269  00FB1C  25                 	db	37
   270  00FB1D  30                 	db	48	;'0'
   271  00FB1E  32                 	db	50	;'2'
   272  00FB1F  64                 	db	100	;'d'
   273  00FB20  25                 	db	37
   274  00FB21  73                 	db	115	;'s'
   275  00FB22  20                 	db	32
   276  00FB23  7C                 	db	124
   277  00FB24  20                 	db	32
   278  00FB25  25                 	db	37
   279  00FB26  30                 	db	48	;'0'
   280  00FB27  32                 	db	50	;'2'
   281  00FB28  64                 	db	100	;'d'
   282  00FB29  3A                 	db	58	;':'
   283  00FB2A  25                 	db	37
   284  00FB2B  30                 	db	48	;'0'
   285  00FB2C  32                 	db	50	;'2'
   286  00FB2D  64                 	db	100	;'d'
   287  00FB2E  3A                 	db	58	;':'
   288  00FB2F  25                 	db	37
   289  00FB30  30                 	db	48	;'0'
   290  00FB31  32                 	db	50	;'2'
   291  00FB32  64                 	db	100	;'d'
   292  00FB33  00                 	db	0
   293  00FB34                     STR_66:
   294  00FB34  28                 	db	40
   295  00FB35  64                 	db	100	;'d'
   296  00FB36  61                 	db	97	;'a'
   297  00FB37  74                 	db	116	;'t'
   298  00FB38  61                 	db	97	;'a'
   299  00FB39  3A                 	db	58	;':'
   300  00FB3A  20                 	db	32
   301  00FB3B  25                 	db	37
   302  00FB3C  75                 	db	117	;'u'
   303  00FB3D  2C                 	db	44
   304  00FB3E  20                 	db	32
   305  00FB3F  61                 	db	97	;'a'
   306  00FB40  64                 	db	100	;'d'
   307  00FB41  64                 	db	100	;'d'
   308  00FB42  72                 	db	114	;'r'
   309  00FB43  3A                 	db	58	;':'
   310  00FB44  20                 	db	32
   311  00FB45  25                 	db	37
   312  00FB46  75                 	db	117	;'u'
   313  00FB47  29                 	db	41
   314  00FB48  00                 	db	0
   315  00FB49                     STR_111:
   316  00FB49  44                 	db	68	;'D'
   317  00FB4A  20                 	db	32
   318  00FB4B  57                 	db	87	;'W'
   319  00FB4C  49                 	db	73	;'I'
   320  00FB4D  4C                 	db	76	;'L'
   321  00FB4E  4C                 	db	76	;'L'
   322  00FB4F  20                 	db	32
   323  00FB50  52                 	db	82	;'R'
   324  00FB51  45                 	db	69	;'E'
   325  00FB52  54                 	db	84	;'T'
   326  00FB53  55                 	db	85	;'U'
   327  00FB54  52                 	db	82	;'R'
   328  00FB55  4E                 	db	78	;'N'
   329  00FB56  20                 	db	32
   330  00FB57  20                 	db	32
   331  00FB58  20                 	db	32
   332  00FB59  20                 	db	32
   333  00FB5A  00                 	db	0
   334  00FB5B                     STR_112:
   335  00FB5B  4F                 	db	79	;'O'
   336  00FB5C  54                 	db	84	;'T'
   337  00FB5D  48                 	db	72	;'H'
   338  00FB5E  45                 	db	69	;'E'
   339  00FB5F  52                 	db	82	;'R'
   340  00FB60  20                 	db	32
   341  00FB61  53                 	db	83	;'S'
   342  00FB62  45                 	db	69	;'E'
   343  00FB63  54                 	db	84	;'T'
   344  00FB64  53                 	db	83	;'S'
   345  00FB65  20                 	db	32
   346  00FB66  52                 	db	82	;'R'
   347  00FB67  41                 	db	65	;'A'
   348  00FB68  35                 	db	53	;'5'
   349  00FB69  20                 	db	32
   350  00FB6A  20                 	db	32
   351  00FB6B  20                 	db	32
   352  00FB6C  00                 	db	0
   353  00FB6D                     STR_116:
   354  00FB6D  53                 	db	83	;'S'
   355  00FB6E  3A                 	db	58	;':'
   356  00FB6F  20                 	db	32
   357  00FB70  44                 	db	68	;'D'
   358  00FB71  20                 	db	32
   359  00FB72  57                 	db	87	;'W'
   360  00FB73  49                 	db	73	;'I'
   361  00FB74  4C                 	db	76	;'L'
   362  00FB75  4C                 	db	76	;'L'
   363  00FB76  20                 	db	32
   364  00FB77  52                 	db	82	;'R'
   365  00FB78  45                 	db	69	;'E'
   366  00FB79  54                 	db	84	;'T'
   367  00FB7A  55                 	db	85	;'U'
   368  00FB7B  52                 	db	82	;'R'
   369  00FB7C  4E                 	db	78	;'N'
   370  00FB7D  20                 	db	32
   371  00FB7E  00                 	db	0
   372  00FB7F                     STR_119:
   373  00FB7F  4F                 	db	79	;'O'
   374  00FB80  54                 	db	84	;'T'
   375  00FB81  48                 	db	72	;'H'
   376  00FB82  45                 	db	69	;'E'
   377  00FB83  52                 	db	82	;'R'
   378  00FB84  20                 	db	32
   379  00FB85  54                 	db	84	;'T'
   380  00FB86  4F                 	db	79	;'O'
   381  00FB87  47                 	db	71	;'G'
   382  00FB88  47                 	db	71	;'G'
   383  00FB89  4C                 	db	76	;'L'
   384  00FB8A  45                 	db	69	;'E'
   385  00FB8B  53                 	db	83	;'S'
   386  00FB8C  20                 	db	32
   387  00FB8D  43                 	db	67	;'C'
   388  00FB8E  41                 	db	65	;'A'
   389  00FB8F  4D                 	db	77	;'M'
   390  00FB90  00                 	db	0
   391  00FB91                     STR_3:
   392  00FB91  2D                 	db	45
   393  00FB92  2D                 	db	45
   394  00FB93  20                 	db	32
   395  00FB94  4C                 	db	76	;'L'
   396  00FB95  4F                 	db	79	;'O'
   397  00FB96  47                 	db	71	;'G'
   398  00FB97  20                 	db	32
   399  00FB98  25                 	db	37
   400  00FB99  32                 	db	50	;'2'
   401  00FB9A  64                 	db	100	;'d'
   402  00FB9B  20                 	db	32
   403  00FB9C  48                 	db	72	;'H'
   404  00FB9D  45                 	db	69	;'E'
   405  00FB9E  52                 	db	82	;'R'
   406  00FB9F  45                 	db	69	;'E'
   407  00FBA0  2D                 	db	45
   408  00FBA1  2D                 	db	45
   409  00FBA2  00                 	db	0
   410  00FBA3                     STR_1:
   411  00FBA3  52                 	db	82	;'R'
   412  00FBA4  45                 	db	69	;'E'
   413  00FBA5  53                 	db	83	;'S'
   414  00FBA6  55                 	db	85	;'U'
   415  00FBA7  4C                 	db	76	;'L'
   416  00FBA8  54                 	db	84	;'T'
   417  00FBA9  53                 	db	83	;'S'
   418  00FBAA  20                 	db	32
   419  00FBAB  49                 	db	73	;'I'
   420  00FBAC  4E                 	db	78	;'N'
   421  00FBAD  20                 	db	32
   422  00FBAE  4C                 	db	76	;'L'
   423  00FBAF  4F                 	db	79	;'O'
   424  00FBB0  47                 	db	71	;'G'
   425  00FBB1  20                 	db	32
   426  00FBB2  25                 	db	37
   427  00FBB3  64                 	db	100	;'d'
   428  00FBB4  00                 	db	0
   429  00FBB5                     STR_102:
   430  00FBB5  4D                 	db	77	;'M'
   431  00FBB6  49                 	db	73	;'I'
   432  00FBB7  44                 	db	68	;'D'
   433  00FBB8  20                 	db	32
   434  00FBB9  2D                 	db	45
   435  00FBBA  2D                 	db	45
   436  00FBBB  20                 	db	32
   437  00FBBC  32                 	db	50	;'2'
   438  00FBBD  73                 	db	115	;'s'
   439  00FBBE  20                 	db	32
   440  00FBBF  20                 	db	32
   441  00FBC0  20                 	db	32
   442  00FBC1  20                 	db	32
   443  00FBC2  20                 	db	32
   444  00FBC3  20                 	db	32
   445  00FBC4  20                 	db	32
   446  00FBC5  00                 	db	0
   447  00FBC6                     STR_105:
   448  00FBC6  44                 	db	68	;'D'
   449  00FBC7  52                 	db	82	;'R'
   450  00FBC8  4F                 	db	79	;'O'
   451  00FBC9  50                 	db	80	;'P'
   452  00FBCA  20                 	db	32
   453  00FBCB  2D                 	db	45
   454  00FBCC  2D                 	db	45
   455  00FBCD  20                 	db	32
   456  00FBCE  32                 	db	50	;'2'
   457  00FBCF  73                 	db	115	;'s'
   458  00FBD0  20                 	db	32
   459  00FBD1  20                 	db	32
   460  00FBD2  20                 	db	32
   461  00FBD3  20                 	db	32
   462  00FBD4  20                 	db	32
   463  00FBD5  20                 	db	32
   464  00FBD6  00                 	db	0
   465  00FBD7                     STR_99:
   466  00FBD7  4C                 	db	76	;'L'
   467  00FBD8  45                 	db	69	;'E'
   468  00FBD9  46                 	db	70	;'F'
   469  00FBDA  54                 	db	84	;'T'
   470  00FBDB  20                 	db	32
   471  00FBDC  2D                 	db	45
   472  00FBDD  2D                 	db	45
   473  00FBDE  20                 	db	32
   474  00FBDF  32                 	db	50	;'2'
   475  00FBE0  73                 	db	115	;'s'
   476  00FBE1  20                 	db	32
   477  00FBE2  20                 	db	32
   478  00FBE3  20                 	db	32
   479  00FBE4  20                 	db	32
   480  00FBE5  20                 	db	32
   481  00FBE6  20                 	db	32
   482  00FBE7  00                 	db	0
   483  00FBE8                     STR_104:
   484  00FBE8  4C                 	db	76	;'L'
   485  00FBE9  45                 	db	69	;'E'
   486  00FBEA  56                 	db	86	;'V'
   487  00FBEB  45                 	db	69	;'E'
   488  00FBEC  4C                 	db	76	;'L'
   489  00FBED  20                 	db	32
   490  00FBEE  2D                 	db	45
   491  00FBEF  2D                 	db	45
   492  00FBF0  20                 	db	32
   493  00FBF1  32                 	db	50	;'2'
   494  00FBF2  73                 	db	115	;'s'
   495  00FBF3  20                 	db	32
   496  00FBF4  20                 	db	32
   497  00FBF5  20                 	db	32
   498  00FBF6  20                 	db	32
   499  00FBF7  20                 	db	32
   500  00FBF8  00                 	db	0
   501  00FBF9                     STR_98:
   502  00FBF9  52                 	db	82	;'R'
   503  00FBFA  49                 	db	73	;'I'
   504  00FBFB  47                 	db	71	;'G'
   505  00FBFC  48                 	db	72	;'H'
   506  00FBFD  54                 	db	84	;'T'
   507  00FBFE  20                 	db	32
   508  00FBFF  2D                 	db	45
   509  00FC00  2D                 	db	45
   510  00FC01  20                 	db	32
   511  00FC02  32                 	db	50	;'2'
   512  00FC03  73                 	db	115	;'s'
   513  00FC04  20                 	db	32
   514  00FC05  20                 	db	32
   515  00FC06  20                 	db	32
   516  00FC07  20                 	db	32
   517  00FC08  20                 	db	32
   518  00FC09  00                 	db	0
   519  00FC0A                     STR_97:
   520  00FC0A  4D                 	db	77	;'M'
   521  00FC0B  49                 	db	73	;'I'
   522  00FC0C  44                 	db	68	;'D'
   523  00FC0D  44                 	db	68	;'D'
   524  00FC0E  4C                 	db	76	;'L'
   525  00FC0F  45                 	db	69	;'E'
   526  00FC10  20                 	db	32
   527  00FC11  2D                 	db	45
   528  00FC12  2D                 	db	45
   529  00FC13  20                 	db	32
   530  00FC14  32                 	db	50	;'2'
   531  00FC15  73                 	db	115	;'s'
   532  00FC16  20                 	db	32
   533  00FC17  20                 	db	32
   534  00FC18  20                 	db	32
   535  00FC19  20                 	db	32
   536  00FC1A  00                 	db	0
   537  00FC1B  44                 	db	68	;'D'
   538  00FC1C  20                 	db	32
   539  00FC1D  57                 	db	87	;'W'
   540  00FC1E  49                 	db	73	;'I'
   541  00FC1F  4C                 	db	76	;'L'
   542  00FC20  4C                 	db	76	;'L'
   543  00FC21  20                 	db	32
   544  00FC22  52                 	db	82	;'R'
   545  00FC23  45                 	db	69	;'E'
   546  00FC24  54                 	db	84	;'T'
   547  00FC25  55                 	db	85	;'U'
   548  00FC26  52                 	db	82	;'R'
   549  00FC27  4E                 	db	78	;'N'
   550  00FC28  20                 	db	32
   551  00FC29  20                 	db	32
   552  00FC2A  20                 	db	32
   553  00FC2B  00                 	db	0
   554  00FC2C                     STR_100:
   555  00FC2C  4D                 	db	77	;'M'
   556  00FC2D  49                 	db	73	;'I'
   557  00FC2E  44                 	db	68	;'D'
   558  00FC2F  2D                 	db	45
   559  00FC30  4C                 	db	76	;'L'
   560  00FC31  45                 	db	69	;'E'
   561  00FC32  46                 	db	70	;'F'
   562  00FC33  54                 	db	84	;'T'
   563  00FC34  20                 	db	32
   564  00FC35  2D                 	db	45
   565  00FC36  2D                 	db	45
   566  00FC37  20                 	db	32
   567  00FC38  32                 	db	50	;'2'
   568  00FC39  73                 	db	115	;'s'
   569  00FC3A  20                 	db	32
   570  00FC3B  20                 	db	32
   571  00FC3C  00                 	db	0
   572  00FC3D                     STR_101:
   573  00FC3D  4D                 	db	77	;'M'
   574  00FC3E  49                 	db	73	;'I'
   575  00FC3F  44                 	db	68	;'D'
   576  00FC40  2D                 	db	45
   577  00FC41  52                 	db	82	;'R'
   578  00FC42  49                 	db	73	;'I'
   579  00FC43  47                 	db	71	;'G'
   580  00FC44  48                 	db	72	;'H'
   581  00FC45  54                 	db	84	;'T'
   582  00FC46  20                 	db	32
   583  00FC47  2D                 	db	45
   584  00FC48  2D                 	db	45
   585  00FC49  20                 	db	32
   586  00FC4A  32                 	db	50	;'2'
   587  00FC4B  73                 	db	115	;'s'
   588  00FC4C  20                 	db	32
   589  00FC4D  00                 	db	0
   590  00FC4E  45                 	db	69	;'E'
   591  00FC4F  4C                 	db	76	;'L'
   592  00FC50  53                 	db	83	;'S'
   593  00FC51  45                 	db	69	;'E'
   594  00FC52  20                 	db	32
   595  00FC53  54                 	db	84	;'T'
   596  00FC54  4F                 	db	79	;'O'
   597  00FC55  47                 	db	71	;'G'
   598  00FC56  47                 	db	71	;'G'
   599  00FC57  4C                 	db	76	;'L'
   600  00FC58  45                 	db	69	;'E'
   601  00FC59  53                 	db	83	;'S'
   602  00FC5A  20                 	db	32
   603  00FC5B  52                 	db	82	;'R'
   604  00FC5C  41                 	db	65	;'A'
   605  00FC5D  35                 	db	53	;'5'
   606  00FC5E  00                 	db	0
   607  00FC5F                     STR_72:
   608  00FC5F  41                 	db	65	;'A'
   609  00FC60  4C                 	db	76	;'L'
   610  00FC61  47                 	db	71	;'G'
   611  00FC62  31                 	db	49	;'1'
   612  00FC63  3A                 	db	58	;':'
   613  00FC64  20                 	db	32
   614  00FC65  39                 	db	57	;'9'
   615  00FC66  20                 	db	32
   616  00FC67  50                 	db	80	;'P'
   617  00FC68  4F                 	db	79	;'O'
   618  00FC69  50                 	db	80	;'P'
   619  00FC6A  4E                 	db	78	;'N'
   620  00FC6B  4F                 	db	79	;'O'
   621  00FC6C  54                 	db	84	;'T'
   622  00FC6D  41                 	db	65	;'A'
   623  00FC6E  42                 	db	66	;'B'
   624  00FC6F  00                 	db	0
   625  00FC70                     STR_68:
   626  00FC70  31                 	db	49	;'1'
   627  00FC71  2E                 	db	46
   628  00FC72  41                 	db	65	;'A'
   629  00FC73  4C                 	db	76	;'L'
   630  00FC74  47                 	db	71	;'G'
   631  00FC75  7C                 	db	124
   632  00FC76  32                 	db	50	;'2'
   633  00FC77  2E                 	db	46
   634  00FC78  53                 	db	83	;'S'
   635  00FC79  4E                 	db	78	;'N'
   636  00FC7A  52                 	db	82	;'R'
   637  00FC7B  7C                 	db	124
   638  00FC7C  33                 	db	51	;'3'
   639  00FC7D  2E                 	db	46
   640  00FC7E  41                 	db	65	;'A'
   641  00FC7F  43                 	db	67	;'C'
   642  00FC80  00                 	db	0
   643  00FC81                     STR_92:
   644  00FC81  54                 	db	84	;'T'
   645  00FC82  53                 	db	83	;'S'
   646  00FC83  54                 	db	84	;'T'
   647  00FC84  3A                 	db	58	;':'
   648  00FC85  20                 	db	32
   649  00FC86  43                 	db	67	;'C'
   650  00FC87  4F                 	db	79	;'O'
   651  00FC88  4E                 	db	78	;'N'
   652  00FC89  44                 	db	68	;'D'
   653  00FC8A  20                 	db	32
   654  00FC8B  53                 	db	83	;'S'
   655  00FC8C  4F                 	db	79	;'O'
   656  00FC8D  4C                 	db	76	;'L'
   657  00FC8E  4E                 	db	78	;'N'
   658  00FC8F  27                 	db	39
   659  00FC90  44                 	db	68	;'D'
   660  00FC91  00                 	db	0
   661  00FC92                     STR_94:
   662  00FC92  54                 	db	84	;'T'
   663  00FC93  53                 	db	83	;'S'
   664  00FC94  54                 	db	84	;'T'
   665  00FC95  3A                 	db	58	;':'
   666  00FC96  20                 	db	32
   667  00FC97  50                 	db	80	;'P'
   668  00FC98  55                 	db	85	;'U'
   669  00FC99  53                 	db	83	;'S'
   670  00FC9A  48                 	db	72	;'H'
   671  00FC9B  20                 	db	32
   672  00FC9C  53                 	db	83	;'S'
   673  00FC9D  4F                 	db	79	;'O'
   674  00FC9E  4C                 	db	76	;'L'
   675  00FC9F  4E                 	db	78	;'N'
   676  00FCA0  27                 	db	39
   677  00FCA1  44                 	db	68	;'D'
   678  00FCA2  00                 	db	0
   679  00FCA3                     STR_69:
   680  00FCA3  34                 	db	52	;'4'
   681  00FCA4  2E                 	db	46
   682  00FCA5  48                 	db	72	;'H'
   683  00FCA6  49                 	db	73	;'I'
   684  00FCA7  7C                 	db	124
   685  00FCA8  35                 	db	53	;'5'
   686  00FCA9  2E                 	db	46
   687  00FCAA  54                 	db	84	;'T'
   688  00FCAB  4F                 	db	79	;'O'
   689  00FCAC  47                 	db	71	;'G'
   690  00FCAD  7C                 	db	124
   691  00FCAE  36                 	db	54	;'6'
   692  00FCAF  2E                 	db	46
   693  00FCB0  45                 	db	69	;'E'
   694  00FCB1  45                 	db	69	;'E'
   695  00FCB2  50                 	db	80	;'P'
   696  00FCB3  00                 	db	0
   697  00FCB4                     STR_110:
   698  00FCB4  54                 	db	84	;'T'
   699  00FCB5  53                 	db	83	;'S'
   700  00FCB6  54                 	db	84	;'T'
   701  00FCB7  3A                 	db	58	;':'
   702  00FCB8  20                 	db	32
   703  00FCB9  42                 	db	66	;'B'
   704  00FCBA  4F                 	db	79	;'O'
   705  00FCBB  54                 	db	84	;'T'
   706  00FCBC  48                 	db	72	;'H'
   707  00FCBD  20                 	db	32
   708  00FCBE  53                 	db	83	;'S'
   709  00FCBF  45                 	db	69	;'E'
   710  00FCC0  52                 	db	82	;'R'
   711  00FCC1  56                 	db	86	;'V'
   712  00FCC2  4F                 	db	79	;'O'
   713  00FCC3  53                 	db	83	;'S'
   714  00FCC4  00                 	db	0
   715  00FCC5                     STR_41:
   716  00FCC5  4C                 	db	76	;'L'
   717  00FCC6  4F                 	db	79	;'O'
   718  00FCC7  47                 	db	71	;'G'
   719  00FCC8  20                 	db	32
   720  00FCC9  31                 	db	49	;'1'
   721  00FCCA  20                 	db	32
   722  00FCCB  20                 	db	32
   723  00FCCC  20                 	db	32
   724  00FCCD  20                 	db	32
   725  00FCCE  20                 	db	32
   726  00FCCF  20                 	db	32
   727  00FCD0  20                 	db	32
   728  00FCD1  20                 	db	32
   729  00FCD2  20                 	db	32
   730  00FCD3  20                 	db	32
   731  00FCD4  20                 	db	32
   732  00FCD5  00                 	db	0
   733  00FCD6                     STR_40:
   734  00FCD6  4C                 	db	76	;'L'
   735  00FCD7  4F                 	db	79	;'O'
   736  00FCD8  47                 	db	71	;'G'
   737  00FCD9  20                 	db	32
   738  00FCDA  32                 	db	50	;'2'
   739  00FCDB  20                 	db	32
   740  00FCDC  20                 	db	32
   741  00FCDD  20                 	db	32
   742  00FCDE  20                 	db	32
   743  00FCDF  20                 	db	32
   744  00FCE0  20                 	db	32
   745  00FCE1  20                 	db	32
   746  00FCE2  20                 	db	32
   747  00FCE3  20                 	db	32
   748  00FCE4  20                 	db	32
   749  00FCE5  20                 	db	32
   750  00FCE6  00                 	db	0
   751  00FCE7                     STR_44:
   752  00FCE7  4C                 	db	76	;'L'
   753  00FCE8  4F                 	db	79	;'O'
   754  00FCE9  47                 	db	71	;'G'
   755  00FCEA  20                 	db	32
   756  00FCEB  33                 	db	51	;'3'
   757  00FCEC  20                 	db	32
   758  00FCED  20                 	db	32
   759  00FCEE  20                 	db	32
   760  00FCEF  20                 	db	32
   761  00FCF0  20                 	db	32
   762  00FCF1  20                 	db	32
   763  00FCF2  20                 	db	32
   764  00FCF3  20                 	db	32
   765  00FCF4  20                 	db	32
   766  00FCF5  20                 	db	32
   767  00FCF6  20                 	db	32
   768  00FCF7  00                 	db	0
   769  00FCF8                     STR_48:
   770  00FCF8  4C                 	db	76	;'L'
   771  00FCF9  4F                 	db	79	;'O'
   772  00FCFA  47                 	db	71	;'G'
   773  00FCFB  20                 	db	32
   774  00FCFC  34                 	db	52	;'4'
   775  00FCFD  20                 	db	32
   776  00FCFE  20                 	db	32
   777  00FCFF  20                 	db	32
   778  00FD00  20                 	db	32
   779  00FD01  20                 	db	32
   780  00FD02  20                 	db	32
   781  00FD03  20                 	db	32
   782  00FD04  20                 	db	32
   783  00FD05  20                 	db	32
   784  00FD06  20                 	db	32
   785  00FD07  20                 	db	32
   786  00FD08  00                 	db	0
   787  00FD09                     STR_36:
   788  00FD09  33                 	db	51	;'3'
   789  00FD0A  2E                 	db	46
   790  00FD0B  20                 	db	32
   791  00FD0C  4C                 	db	76	;'L'
   792  00FD0D  4F                 	db	79	;'O'
   793  00FD0E  47                 	db	71	;'G'
   794  00FD0F  53                 	db	83	;'S'
   795  00FD10  20                 	db	32
   796  00FD11  20                 	db	32
   797  00FD12  20                 	db	32
   798  00FD13  20                 	db	32
   799  00FD14  20                 	db	32
   800  00FD15  20                 	db	32
   801  00FD16  20                 	db	32
   802  00FD17  20                 	db	32
   803  00FD18  20                 	db	32
   804  00FD19  00                 	db	0
   805  00FD1A                     STR_32:
   806  00FD1A  32                 	db	50	;'2'
   807  00FD1B  2E                 	db	46
   808  00FD1C  20                 	db	32
   809  00FD1D  53                 	db	83	;'S'
   810  00FD1E  4F                 	db	79	;'O'
   811  00FD1F  52                 	db	82	;'R'
   812  00FD20  54                 	db	84	;'T'
   813  00FD21  20                 	db	32
   814  00FD22  20                 	db	32
   815  00FD23  20                 	db	32
   816  00FD24  20                 	db	32
   817  00FD25  20                 	db	32
   818  00FD26  20                 	db	32
   819  00FD27  20                 	db	32
   820  00FD28  20                 	db	32
   821  00FD29  20                 	db	32
   822  00FD2A  00                 	db	0
   823  00FD2B                     STR_33:
   824  00FD2B  31                 	db	49	;'1'
   825  00FD2C  2E                 	db	46
   826  00FD2D  20                 	db	32
   827  00FD2E  44                 	db	68	;'D'
   828  00FD2F  41                 	db	65	;'A'
   829  00FD30  54                 	db	84	;'T'
   830  00FD31  45                 	db	69	;'E'
   831  00FD32  2F                 	db	47
   832  00FD33  54                 	db	84	;'T'
   833  00FD34  49                 	db	73	;'I'
   834  00FD35  4D                 	db	77	;'M'
   835  00FD36  45                 	db	69	;'E'
   836  00FD37  20                 	db	32
   837  00FD38  20                 	db	32
   838  00FD39  20                 	db	32
   839  00FD3A  20                 	db	32
   840  00FD3B  00                 	db	0
   841  00FD3C                     STR_24:
   842  00FD3C  20                 	db	32
   843  00FD3D  2D                 	db	45
   844  00FD3E  2D                 	db	45
   845  00FD3F  20                 	db	32
   846  00FD40  50                 	db	80	;'P'
   847  00FD41  4F                 	db	79	;'O'
   848  00FD42  50                 	db	80	;'P'
   849  00FD43  20                 	db	32
   850  00FD44  20                 	db	32
   851  00FD45  43                 	db	67	;'C'
   852  00FD46  41                 	db	65	;'A'
   853  00FD47  4E                 	db	78	;'N'
   854  00FD48  20                 	db	32
   855  00FD49  2D                 	db	45
   856  00FD4A  2D                 	db	45
   857  00FD4B  20                 	db	32
   858  00FD4C  00                 	db	0
   859  00FD4D                     STR_26:
   860  00FD4D  20                 	db	32
   861  00FD4E  2D                 	db	45
   862  00FD4F  2D                 	db	45
   863  00FD50  20                 	db	32
   864  00FD51  53                 	db	83	;'S'
   865  00FD52  4F                 	db	79	;'O'
   866  00FD53  55                 	db	85	;'U'
   867  00FD54  50                 	db	80	;'P'
   868  00FD55  20                 	db	32
   869  00FD56  43                 	db	67	;'C'
   870  00FD57  41                 	db	65	;'A'
   871  00FD58  4E                 	db	78	;'N'
   872  00FD59  20                 	db	32
   873  00FD5A  2D                 	db	45
   874  00FD5B  2D                 	db	45
   875  00FD5C  20                 	db	32
   876  00FD5D  00                 	db	0
   877  00FD5E                     STR_28:
   878  00FD5E  2D                 	db	45
   879  00FD5F  2D                 	db	45
   880  00FD60  20                 	db	32
   881  00FD61  54                 	db	84	;'T'
   882  00FD62  4F                 	db	79	;'O'
   883  00FD63  54                 	db	84	;'T'
   884  00FD64  41                 	db	65	;'A'
   885  00FD65  4C                 	db	76	;'L'
   886  00FD66  20                 	db	32
   887  00FD67  43                 	db	67	;'C'
   888  00FD68  41                 	db	65	;'A'
   889  00FD69  4E                 	db	78	;'N'
   890  00FD6A  53                 	db	83	;'S'
   891  00FD6B  20                 	db	32
   892  00FD6C  2D                 	db	45
   893  00FD6D  2D                 	db	45
   894  00FD6E  00                 	db	0
   895  00FD6F                     STR_39:
   896  00FD6F  4C                 	db	76	;'L'
   897  00FD70  4F                 	db	79	;'O'
   898  00FD71  47                 	db	71	;'G'
   899  00FD72  20                 	db	32
   900  00FD73  31                 	db	49	;'1'
   901  00FD74  20                 	db	32
   902  00FD75  20                 	db	32
   903  00FD76  20                 	db	32
   904  00FD77  20                 	db	32
   905  00FD78  20                 	db	32
   906  00FD79  20                 	db	32
   907  00FD7A  20                 	db	32
   908  00FD7B  20                 	db	32
   909  00FD7C  20                 	db	32
   910  00FD7D  20                 	db	32
   911  00FD7E  3C                 	db	60	;'<'
   912  00FD7F  00                 	db	0
   913  00FD80                     STR_42:
   914  00FD80  4C                 	db	76	;'L'
   915  00FD81  4F                 	db	79	;'O'
   916  00FD82  47                 	db	71	;'G'
   917  00FD83  20                 	db	32
   918  00FD84  32                 	db	50	;'2'
   919  00FD85  20                 	db	32
   920  00FD86  20                 	db	32
   921  00FD87  20                 	db	32
   922  00FD88  20                 	db	32
   923  00FD89  20                 	db	32
   924  00FD8A  20                 	db	32
   925  00FD8B  20                 	db	32
   926  00FD8C  20                 	db	32
   927  00FD8D  20                 	db	32
   928  00FD8E  20                 	db	32
   929  00FD8F  3C                 	db	60	;'<'
   930  00FD90  00                 	db	0
   931  00FD91                     STR_46:
   932  00FD91  4C                 	db	76	;'L'
   933  00FD92  4F                 	db	79	;'O'
   934  00FD93  47                 	db	71	;'G'
   935  00FD94  20                 	db	32
   936  00FD95  33                 	db	51	;'3'
   937  00FD96  20                 	db	32
   938  00FD97  20                 	db	32
   939  00FD98  20                 	db	32
   940  00FD99  20                 	db	32
   941  00FD9A  20                 	db	32
   942  00FD9B  20                 	db	32
   943  00FD9C  20                 	db	32
   944  00FD9D  20                 	db	32
   945  00FD9E  20                 	db	32
   946  00FD9F  20                 	db	32
   947  00FDA0  3C                 	db	60	;'<'
   948  00FDA1  00                 	db	0
   949  00FDA2                     STR_50:
   950  00FDA2  4C                 	db	76	;'L'
   951  00FDA3  4F                 	db	79	;'O'
   952  00FDA4  47                 	db	71	;'G'
   953  00FDA5  20                 	db	32
   954  00FDA6  34                 	db	52	;'4'
   955  00FDA7  20                 	db	32
   956  00FDA8  20                 	db	32
   957  00FDA9  20                 	db	32
   958  00FDAA  20                 	db	32
   959  00FDAB  20                 	db	32
   960  00FDAC  20                 	db	32
   961  00FDAD  20                 	db	32
   962  00FDAE  20                 	db	32
   963  00FDAF  20                 	db	32
   964  00FDB0  20                 	db	32
   965  00FDB1  3C                 	db	60	;'<'
   966  00FDB2  00                 	db	0
   967  00FDB3                     STR_38:
   968  00FDB3  33                 	db	51	;'3'
   969  00FDB4  2E                 	db	46
   970  00FDB5  20                 	db	32
   971  00FDB6  4C                 	db	76	;'L'
   972  00FDB7  4F                 	db	79	;'O'
   973  00FDB8  47                 	db	71	;'G'
   974  00FDB9  53                 	db	83	;'S'
   975  00FDBA  20                 	db	32
   976  00FDBB  20                 	db	32
   977  00FDBC  20                 	db	32
   978  00FDBD  20                 	db	32
   979  00FDBE  20                 	db	32
   980  00FDBF  20                 	db	32
   981  00FDC0  20                 	db	32
   982  00FDC1  20                 	db	32
   983  00FDC2  3C                 	db	60	;'<'
   984  00FDC3  00                 	db	0
   985  00FDC4                     STR_34:
   986  00FDC4  32                 	db	50	;'2'
   987  00FDC5  2E                 	db	46
   988  00FDC6  20                 	db	32
   989  00FDC7  53                 	db	83	;'S'
   990  00FDC8  4F                 	db	79	;'O'
   991  00FDC9  52                 	db	82	;'R'
   992  00FDCA  54                 	db	84	;'T'
   993  00FDCB  20                 	db	32
   994  00FDCC  20                 	db	32
   995  00FDCD  20                 	db	32
   996  00FDCE  20                 	db	32
   997  00FDCF  20                 	db	32
   998  00FDD0  20                 	db	32
   999  00FDD1  20                 	db	32
  1000  00FDD2  20                 	db	32
  1001  00FDD3  3C                 	db	60	;'<'
  1002  00FDD4  00                 	db	0
  1003  00FDD5                     STR_31:
  1004  00FDD5  31                 	db	49	;'1'
  1005  00FDD6  2E                 	db	46
  1006  00FDD7  20                 	db	32
  1007  00FDD8  44                 	db	68	;'D'
  1008  00FDD9  41                 	db	65	;'A'
  1009  00FDDA  54                 	db	84	;'T'
  1010  00FDDB  45                 	db	69	;'E'
  1011  00FDDC  2F                 	db	47
  1012  00FDDD  54                 	db	84	;'T'
  1013  00FDDE  49                 	db	73	;'I'
  1014  00FDDF  4D                 	db	77	;'M'
  1015  00FDE0  45                 	db	69	;'E'
  1016  00FDE1  20                 	db	32
  1017  00FDE2  20                 	db	32
  1018  00FDE3  20                 	db	32
  1019  00FDE4  3C                 	db	60	;'<'
  1020  00FDE5  00                 	db	0
  1021  00FDE6                     STR_6:
  1022  00FDE6  50                 	db	80	;'P'
  1023  00FDE7  41                 	db	65	;'A'
  1024  00FDE8  55                 	db	85	;'U'
  1025  00FDE9  53                 	db	83	;'S'
  1026  00FDEA  45                 	db	69	;'E'
  1027  00FDEB  20                 	db	32
  1028  00FDEC  3C                 	db	60	;'<'
  1029  00FDED  20                 	db	32
  1030  00FDEE  7C                 	db	124
  1031  00FDEF  20                 	db	32
  1032  00FDF0  42                 	db	66	;'B'
  1033  00FDF1  41                 	db	65	;'A'
  1034  00FDF2  43                 	db	67	;'C'
  1035  00FDF3  4B                 	db	75	;'K'
  1036  00FDF4  20                 	db	32
  1037  00FDF5  3E                 	db	62	;'>'
  1038  00FDF6  00                 	db	0
  1039  00FDF7                     STR_30:
  1040  00FDF7  50                 	db	80	;'P'
  1041  00FDF8  55                 	db	85	;'U'
  1042  00FDF9  53                 	db	83	;'S'
  1043  00FDFA  48                 	db	72	;'H'
  1044  00FDFB  20                 	db	32
  1045  00FDFC  54                 	db	84	;'T'
  1046  00FDFD  4F                 	db	79	;'O'
  1047  00FDFE  20                 	db	32
  1048  00FDFF  43                 	db	67	;'C'
  1049  00FE00  4F                 	db	79	;'O'
  1050  00FE01  4E                 	db	78	;'N'
  1051  00FE02  54                 	db	84	;'T'
  1052  00FE03  49                 	db	73	;'I'
  1053  00FE04  4E                 	db	78	;'N'
  1054  00FE05  55                 	db	85	;'U'
  1055  00FE06  45                 	db	69	;'E'
  1056  00FE07  00                 	db	0
  1057  00FE08                     STR_27:
  1058  00FE08  4E                 	db	78	;'N'
  1059  00FE09  4C                 	db	76	;'L'
  1060  00FE0A  41                 	db	65	;'A'
  1061  00FE0B  42                 	db	66	;'B'
  1062  00FE0C  3A                 	db	58	;':'
  1063  00FE0D  20                 	db	32
  1064  00FE0E  25                 	db	37
  1065  00FE0F  64                 	db	100	;'d'
  1066  00FE10  7C                 	db	124
  1067  00FE11  4C                 	db	76	;'L'
  1068  00FE12  41                 	db	65	;'A'
  1069  00FE13  42                 	db	66	;'B'
  1070  00FE14  3A                 	db	58	;':'
  1071  00FE15  20                 	db	32
  1072  00FE16  25                 	db	37
  1073  00FE17  64                 	db	100	;'d'
  1074  00FE18  00                 	db	0
  1075  00FE19                     STR_25:
  1076  00FE19  4E                 	db	78	;'N'
  1077  00FE1A  54                 	db	84	;'T'
  1078  00FE1B  41                 	db	65	;'A'
  1079  00FE1C  42                 	db	66	;'B'
  1080  00FE1D  3A                 	db	58	;':'
  1081  00FE1E  20                 	db	32
  1082  00FE1F  25                 	db	37
  1083  00FE20  64                 	db	100	;'d'
  1084  00FE21  7C                 	db	124
  1085  00FE22  54                 	db	84	;'T'
  1086  00FE23  41                 	db	65	;'A'
  1087  00FE24  42                 	db	66	;'B'
  1088  00FE25  3A                 	db	58	;':'
  1089  00FE26  20                 	db	32
  1090  00FE27  25                 	db	37
  1091  00FE28  64                 	db	100	;'d'
  1092  00FE29  00                 	db	0
  1093  00FE2A                     STR_83:
  1094  00FE2A  4D                 	db	77	;'M'
  1095  00FE2B  41                 	db	65	;'A'
  1096  00FE2C  47                 	db	71	;'G'
  1097  00FE2D  5F                 	db	95	;'_'
  1098  00FE2E  73                 	db	115	;'s'
  1099  00FE2F  69                 	db	105	;'i'
  1100  00FE30  67                 	db	103	;'g'
  1101  00FE31  6E                 	db	110	;'n'
  1102  00FE32  61                 	db	97	;'a'
  1103  00FE33  6C                 	db	108	;'l'
  1104  00FE34  3A                 	db	58	;':'
  1105  00FE35  20                 	db	32
  1106  00FE36  25                 	db	37
  1107  00FE37  64                 	db	100	;'d'
  1108  00FE38  20                 	db	32
  1109  00FE39  00                 	db	0
  1110  00FE3A                     STR_103:
  1111  00FE3A  54                 	db	84	;'T'
  1112  00FE3B  53                 	db	83	;'S'
  1113  00FE3C  54                 	db	84	;'T'
  1114  00FE3D  3A                 	db	58	;':'
  1115  00FE3E  20                 	db	32
  1116  00FE3F  54                 	db	84	;'T'
  1117  00FE40  49                 	db	73	;'I'
  1118  00FE41  4C                 	db	76	;'L'
  1119  00FE42  54                 	db	84	;'T'
  1120  00FE43  20                 	db	32
  1121  00FE44  53                 	db	83	;'S'
  1122  00FE45  45                 	db	69	;'E'
  1123  00FE46  52                 	db	82	;'R'
  1124  00FE47  56                 	db	86	;'V'
  1125  00FE48  4F                 	db	79	;'O'
  1126  00FE49  00                 	db	0
  1127  00FE4A                     STR_4:
  1128  00FE4A  44                 	db	68	;'D'
  1129  00FE4B  49                 	db	73	;'I'
  1130  00FE4C  44                 	db	68	;'D'
  1131  00FE4D  4E                 	db	78	;'N'
  1132  00FE4E  27                 	db	39
  1133  00FE4F  54                 	db	84	;'T'
  1134  00FE50  20                 	db	32
  1135  00FE51  43                 	db	67	;'C'
  1136  00FE52  4F                 	db	79	;'O'
  1137  00FE53  4D                 	db	77	;'M'
  1138  00FE54  50                 	db	80	;'P'
  1139  00FE55  4C                 	db	76	;'L'
  1140  00FE56  45                 	db	69	;'E'
  1141  00FE57  54                 	db	84	;'T'
  1142  00FE58  45                 	db	69	;'E'
  1143  00FE59  00                 	db	0
  1144  00FE5A                     STR_80:
  1145  00FE5A  49                 	db	73	;'I'
  1146  00FE5B  52                 	db	82	;'R'
  1147  00FE5C  5F                 	db	95	;'_'
  1148  00FE5D  73                 	db	115	;'s'
  1149  00FE5E  69                 	db	105	;'i'
  1150  00FE5F  67                 	db	103	;'g'
  1151  00FE60  6E                 	db	110	;'n'
  1152  00FE61  61                 	db	97	;'a'
  1153  00FE62  6C                 	db	108	;'l'
  1154  00FE63  3A                 	db	58	;':'
  1155  00FE64  20                 	db	32
  1156  00FE65  25                 	db	37
  1157  00FE66  64                 	db	100	;'d'
  1158  00FE67  20                 	db	32
  1159  00FE68  00                 	db	0
  1160  00FE69                     STR_109:
  1161  00FE69  43                 	db	67	;'C'
  1162  00FE6A  41                 	db	65	;'A'
  1163  00FE6B  4D                 	db	77	;'M'
  1164  00FE6C  20                 	db	32
  1165  00FE6D  44                 	db	68	;'D'
  1166  00FE6E  57                 	db	87	;'W'
  1167  00FE6F  4E                 	db	78	;'N'
  1168  00FE70  20                 	db	32
  1169  00FE71  7C                 	db	124
  1170  00FE72  52                 	db	82	;'R'
  1171  00FE73  43                 	db	67	;'C'
  1172  00FE74  30                 	db	48	;'0'
  1173  00FE75  3D                 	db	61	;'='
  1174  00FE76  30                 	db	48	;'0'
  1175  00FE77  00                 	db	0
  1176  00FE78                     STR_108:
  1177  00FE78  43                 	db	67	;'C'
  1178  00FE79  41                 	db	65	;'A'
  1179  00FE7A  4D                 	db	77	;'M'
  1180  00FE7B  20                 	db	32
  1181  00FE7C  55                 	db	85	;'U'
  1182  00FE7D  50                 	db	80	;'P'
  1183  00FE7E  20                 	db	32
  1184  00FE7F  20                 	db	32
  1185  00FE80  7C                 	db	124
  1186  00FE81  52                 	db	82	;'R'
  1187  00FE82  43                 	db	67	;'C'
  1188  00FE83  30                 	db	48	;'0'
  1189  00FE84  3D                 	db	61	;'='
  1190  00FE85  31                 	db	49	;'1'
  1191  00FE86  00                 	db	0
  1192  00FE87                     STR_82:
  1193  00FE87  54                 	db	84	;'T'
  1194  00FE88  53                 	db	83	;'S'
  1195  00FE89  54                 	db	84	;'T'
  1196  00FE8A  3A                 	db	58	;':'
  1197  00FE8B  20                 	db	32
  1198  00FE8C  4D                 	db	77	;'M'
  1199  00FE8D  41                 	db	65	;'A'
  1200  00FE8E  47                 	db	71	;'G'
  1201  00FE8F  4E                 	db	78	;'N'
  1202  00FE90  45                 	db	69	;'E'
  1203  00FE91  54                 	db	84	;'T'
  1204  00FE92  49                 	db	73	;'I'
  1205  00FE93  53                 	db	83	;'S'
  1206  00FE94  4D                 	db	77	;'M'
  1207  00FE95  00                 	db	0
  1208  00FE96                     STR_107:
  1209  00FE96  54                 	db	84	;'T'
  1210  00FE97  53                 	db	83	;'S'
  1211  00FE98  54                 	db	84	;'T'
  1212  00FE99  3A                 	db	58	;':'
  1213  00FE9A  20                 	db	32
  1214  00FE9B  43                 	db	67	;'C'
  1215  00FE9C  41                 	db	65	;'A'
  1216  00FE9D  4D                 	db	77	;'M'
  1217  00FE9E  20                 	db	32
  1218  00FE9F  53                 	db	83	;'S'
  1219  00FEA0  45                 	db	69	;'E'
  1220  00FEA1  52                 	db	82	;'R'
  1221  00FEA2  56                 	db	86	;'V'
  1222  00FEA3  4F                 	db	79	;'O'
  1223  00FEA4  00                 	db	0
  1224  00FEA5                     STR_96:
  1225  00FEA5  54                 	db	84	;'T'
  1226  00FEA6  53                 	db	83	;'S'
  1227  00FEA7  54                 	db	84	;'T'
  1228  00FEA8  3A                 	db	58	;':'
  1229  00FEA9  20                 	db	32
  1230  00FEAA  50                 	db	80	;'P'
  1231  00FEAB  41                 	db	65	;'A'
  1232  00FEAC  4E                 	db	78	;'N'
  1233  00FEAD  20                 	db	32
  1234  00FEAE  53                 	db	83	;'S'
  1235  00FEAF  45                 	db	69	;'E'
  1236  00FEB0  52                 	db	82	;'R'
  1237  00FEB1  56                 	db	86	;'V'
  1238  00FEB2  4F                 	db	79	;'O'
  1239  00FEB3  00                 	db	0
  1240  00FEB4                     STR_75:
  1241  00FEB4  41                 	db	65	;'A'
  1242  00FEB5  4C                 	db	76	;'L'
  1243  00FEB6  47                 	db	71	;'G'
  1244  00FEB7  34                 	db	52	;'4'
  1245  00FEB8  3A                 	db	58	;':'
  1246  00FEB9  20                 	db	32
  1247  00FEBA  41                 	db	65	;'A'
  1248  00FEBB  4C                 	db	76	;'L'
  1249  00FEBC  4C                 	db	76	;'L'
  1250  00FEBD  20                 	db	32
  1251  00FEBE  43                 	db	67	;'C'
  1252  00FEBF  41                 	db	65	;'A'
  1253  00FEC0  4E                 	db	78	;'N'
  1254  00FEC1  53                 	db	83	;'S'
  1255  00FEC2  00                 	db	0
  1256  00FEC3                     STR_90:
  1257  00FEC3  54                 	db	84	;'T'
  1258  00FEC4  53                 	db	83	;'S'
  1259  00FEC5  54                 	db	84	;'T'
  1260  00FEC6  3A                 	db	58	;':'
  1261  00FEC7  20                 	db	32
  1262  00FEC8  44                 	db	68	;'D'
  1263  00FEC9  43                 	db	67	;'C'
  1264  00FECA  20                 	db	32
  1265  00FECB  4D                 	db	77	;'M'
  1266  00FECC  4F                 	db	79	;'O'
  1267  00FECD  54                 	db	84	;'T'
  1268  00FECE  4F                 	db	79	;'O'
  1269  00FECF  52                 	db	82	;'R'
  1270  00FED0  53                 	db	83	;'S'
  1271  00FED1  00                 	db	0
  1272  00FED2                     STR_70:
  1273  00FED2  41                 	db	65	;'A'
  1274  00FED3  4C                 	db	76	;'L'
  1275  00FED4  47                 	db	71	;'G'
  1276  00FED5  4F                 	db	79	;'O'
  1277  00FED6  52                 	db	82	;'R'
  1278  00FED7  49                 	db	73	;'I'
  1279  00FED8  54                 	db	84	;'T'
  1280  00FED9  48                 	db	72	;'H'
  1281  00FEDA  4D                 	db	77	;'M'
  1282  00FEDB  20                 	db	32
  1283  00FEDC  54                 	db	84	;'T'
  1284  00FEDD  45                 	db	69	;'E'
  1285  00FEDE  53                 	db	83	;'S'
  1286  00FEDF  54                 	db	84	;'T'
  1287  00FEE0  00                 	db	0
  1288  00FEE1                     STR_91:
  1289  00FEE1  50                 	db	80	;'P'
  1290  00FEE2  49                 	db	73	;'I'
  1291  00FEE3  4E                 	db	78	;'N'
  1292  00FEE4  20                 	db	32
  1293  00FEE5  52                 	db	82	;'R'
  1294  00FEE6  41                 	db	65	;'A'
  1295  00FEE7  35                 	db	53	;'5'
  1296  00FEE8  20                 	db	32
  1297  00FEE9  48                 	db	72	;'H'
  1298  00FEEA  49                 	db	73	;'I'
  1299  00FEEB  47                 	db	71	;'G'
  1300  00FEEC  48                 	db	72	;'H'
  1301  00FEED  2E                 	db	46
  1302  00FEEE  00                 	db	0
  1303  00FEEF                     STR_73:
  1304  00FEEF  41                 	db	65	;'A'
  1305  00FEF0  4C                 	db	76	;'L'
  1306  00FEF1  47                 	db	71	;'G'
  1307  00FEF2  32                 	db	50	;'2'
  1308  00FEF3  3A                 	db	58	;':'
  1309  00FEF4  20                 	db	32
  1310  00FEF5  31                 	db	49	;'1'
  1311  00FEF6  32                 	db	50	;'2'
  1312  00FEF7  20                 	db	32
  1313  00FEF8  43                 	db	67	;'C'
  1314  00FEF9  41                 	db	65	;'A'
  1315  00FEFA  4E                 	db	78	;'N'
  1316  00FEFB  53                 	db	83	;'S'
  1317  00FEFC  00                 	db	0
  1318  00FEFD                     STR_76:
  1319  00FEFD  41                 	db	65	;'A'
  1320  00FEFE  4C                 	db	76	;'L'
  1321  00FEFF  47                 	db	71	;'G'
  1322  00FF00  35                 	db	53	;'5'
  1323  00FF01  3A                 	db	58	;':'
  1324  00FF02  20                 	db	32
  1325  00FF03  4E                 	db	78	;'N'
  1326  00FF04  4F                 	db	79	;'O'
  1327  00FF05  20                 	db	32
  1328  00FF06  43                 	db	67	;'C'
  1329  00FF07  41                 	db	65	;'A'
  1330  00FF08  4E                 	db	78	;'N'
  1331  00FF09  53                 	db	83	;'S'
  1332  00FF0A  00                 	db	0
  1333  00FF0B                     STR_71:
  1334  00FF0B  50                 	db	80	;'P'
  1335  00FF0C  55                 	db	85	;'U'
  1336  00FF0D  53                 	db	83	;'S'
  1337  00FF0E  48                 	db	72	;'H'
  1338  00FF0F  20                 	db	32
  1339  00FF10  54                 	db	84	;'T'
  1340  00FF11  4F                 	db	79	;'O'
  1341  00FF12  20                 	db	32
  1342  00FF13  53                 	db	83	;'S'
  1343  00FF14  54                 	db	84	;'T'
  1344  00FF15  41                 	db	65	;'A'
  1345  00FF16  52                 	db	82	;'R'
  1346  00FF17  54                 	db	84	;'T'
  1347  00FF18  00                 	db	0
  1348  00FF19                     STR_23:
  1349  00FF19  25                 	db	37
  1350  00FF1A  64                 	db	100	;'d'
  1351  00FF1B  20                 	db	32
  1352  00FF1C  4D                 	db	77	;'M'
  1353  00FF1D  49                 	db	73	;'I'
  1354  00FF1E  4E                 	db	78	;'N'
  1355  00FF1F  20                 	db	32
  1356  00FF20  25                 	db	37
  1357  00FF21  64                 	db	100	;'d'
  1358  00FF22  20                 	db	32
  1359  00FF23  53                 	db	83	;'S'
  1360  00FF24  45                 	db	69	;'E'
  1361  00FF25  43                 	db	67	;'C'
  1362  00FF26  00                 	db	0
  1363  00FF27                     STR_2:
  1364  00FF27  54                 	db	84	;'T'
  1365  00FF28  49                 	db	73	;'I'
  1366  00FF29  4D                 	db	77	;'M'
  1367  00FF2A  45                 	db	69	;'E'
  1368  00FF2B  3A                 	db	58	;':'
  1369  00FF2C  20                 	db	32
  1370  00FF2D  25                 	db	37
  1371  00FF2E  64                 	db	100	;'d'
  1372  00FF2F  3A                 	db	58	;':'
  1373  00FF30  25                 	db	37
  1374  00FF31  30                 	db	48	;'0'
  1375  00FF32  32                 	db	50	;'2'
  1376  00FF33  64                 	db	100	;'d'
  1377  00FF34  00                 	db	0
  1378  00FF35                     STR_79:
  1379  00FF35  54                 	db	84	;'T'
  1380  00FF36  53                 	db	83	;'S'
  1381  00FF37  54                 	db	84	;'T'
  1382  00FF38  3A                 	db	58	;':'
  1383  00FF39  20                 	db	32
  1384  00FF3A  49                 	db	73	;'I'
  1385  00FF3B  52                 	db	82	;'R'
  1386  00FF3C  20                 	db	32
  1387  00FF3D  53                 	db	83	;'S'
  1388  00FF3E  4E                 	db	78	;'N'
  1389  00FF3F  53                 	db	83	;'S'
  1390  00FF40  52                 	db	82	;'R'
  1391  00FF41  00                 	db	0
  1392  00FF42                     STR_65:
  1393  00FF42  54                 	db	84	;'T'
  1394  00FF43  49                 	db	73	;'I'
  1395  00FF44  4D                 	db	77	;'M'
  1396  00FF45  45                 	db	69	;'E'
  1397  00FF46  20                 	db	32
  1398  00FF47  25                 	db	37
  1399  00FF48  64                 	db	100	;'d'
  1400  00FF49  3A                 	db	58	;':'
  1401  00FF4A  25                 	db	37
  1402  00FF4B  30                 	db	48	;'0'
  1403  00FF4C  32                 	db	50	;'2'
  1404  00FF4D  64                 	db	100	;'d'
  1405  00FF4E  00                 	db	0
  1406  00FF4F                     STR_74:
  1407  00FF4F  41                 	db	65	;'A'
  1408  00FF50  4C                 	db	76	;'L'
  1409  00FF51  47                 	db	71	;'G'
  1410  00FF52  33                 	db	51	;'3'
  1411  00FF53  3A                 	db	58	;':'
  1412  00FF54  20                 	db	32
  1413  00FF55  31                 	db	49	;'1'
  1414  00FF56  20                 	db	32
  1415  00FF57  43                 	db	67	;'C'
  1416  00FF58  41                 	db	65	;'A'
  1417  00FF59  4E                 	db	78	;'N'
  1418  00FF5A  00                 	db	0
  1419  00FF5B                     STR_93:
  1420  00FF5B  50                 	db	80	;'P'
  1421  00FF5C  49                 	db	73	;'I'
  1422  00FF5D  4E                 	db	78	;'N'
  1423  00FF5E  20                 	db	32
  1424  00FF5F  52                 	db	82	;'R'
  1425  00FF60  41                 	db	65	;'A'
  1426  00FF61  33                 	db	51	;'3'
  1427  00FF62  2E                 	db	46
  1428  00FF63  2E                 	db	46
  1429  00FF64  2E                 	db	46
  1430  00FF65  00                 	db	0
  1431  00FF66                     STR_95:
  1432  00FF66  50                 	db	80	;'P'
  1433  00FF67  49                 	db	73	;'I'
  1434  00FF68  4E                 	db	78	;'N'
  1435  00FF69  20                 	db	32
  1436  00FF6A  52                 	db	82	;'R'
  1437  00FF6B  41                 	db	65	;'A'
  1438  00FF6C  34                 	db	52	;'4'
  1439  00FF6D  2E                 	db	46
  1440  00FF6E  2E                 	db	46
  1441  00FF6F  2E                 	db	46
  1442  00FF70  00                 	db	0
  1443  00FF71                     STR_113:
  1444  00FF71  50                 	db	80	;'P'
  1445  00FF72  55                 	db	85	;'U'
  1446  00FF73  53                 	db	83	;'S'
  1447  00FF74  48                 	db	72	;'H'
  1448  00FF75  45                 	db	69	;'E'
  1449  00FF76  52                 	db	82	;'R'
  1450  00FF77  20                 	db	32
  1451  00FF78  54                 	db	84	;'T'
  1452  00FF79  53                 	db	83	;'S'
  1453  00FF7A  54                 	db	84	;'T'
  1454  00FF7B  00                 	db	0
  1455  00FF7C                     STR_64:
  1456  00FF7C  53                 	db	83	;'S'
  1457  00FF7D  4F                 	db	79	;'O'
  1458  00FF7E  52                 	db	82	;'R'
  1459  00FF7F  54                 	db	84	;'T'
  1460  00FF80  49                 	db	73	;'I'
  1461  00FF81  4E                 	db	78	;'N'
  1462  00FF82  47                 	db	71	;'G'
  1463  00FF83  2E                 	db	46
  1464  00FF84  2E                 	db	46
  1465  00FF85  2E                 	db	46
  1466  00FF86  00                 	db	0
  1467  00FF87                     STR_84:
  1468  00FF87  54                 	db	84	;'T'
  1469  00FF88  53                 	db	83	;'S'
  1470  00FF89  54                 	db	84	;'T'
  1471  00FF8A  3A                 	db	58	;':'
  1472  00FF8B  20                 	db	32
  1473  00FF8C  43                 	db	67	;'C'
  1474  00FF8D  4F                 	db	79	;'O'
  1475  00FF8E  4E                 	db	78	;'N'
  1476  00FF8F  44                 	db	68	;'D'
  1477  00FF90  00                 	db	0
  1478  00FF91                     STR_88:
  1479  00FF91  41                 	db	65	;'A'
  1480  00FF92  43                 	db	67	;'C'
  1481  00FF93  54                 	db	84	;'T'
  1482  00FF94  55                 	db	85	;'U'
  1483  00FF95  41                 	db	65	;'A'
  1484  00FF96  54                 	db	84	;'T'
  1485  00FF97  4F                 	db	79	;'O'
  1486  00FF98  52                 	db	82	;'R'
  1487  00FF99  53                 	db	83	;'S'
  1488  00FF9A  00                 	db	0
  1489  00FF9B                     STR_22:
  1490  00FF9B  44                 	db	68	;'D'
  1491  00FF9C  55                 	db	85	;'U'
  1492  00FF9D  52                 	db	82	;'R'
  1493  00FF9E  41                 	db	65	;'A'
  1494  00FF9F  54                 	db	84	;'T'
  1495  00FFA0  49                 	db	73	;'I'
  1496  00FFA1  4F                 	db	79	;'O'
  1497  00FFA2  4E                 	db	78	;'N'
  1498  00FFA3  3A                 	db	58	;':'
  1499  00FFA4  00                 	db	0
  1500  00FFA5                     STR_86:
  1501  00FFA5  43                 	db	67	;'C'
  1502  00FFA6  4F                 	db	79	;'O'
  1503  00FFA7  4E                 	db	78	;'N'
  1504  00FFA8  44                 	db	68	;'D'
  1505  00FFA9  3A                 	db	58	;':'
  1506  00FFAA  20                 	db	32
  1507  00FFAB  25                 	db	37
  1508  00FFAC  64                 	db	100	;'d'
  1509  00FFAD  00                 	db	0
  1510  00FFAE                     STR_77:
  1511  00FFAE  53                 	db	83	;'S'
  1512  00FFAF  45                 	db	69	;'E'
  1513  00FFB0  4E                 	db	78	;'N'
  1514  00FFB1  53                 	db	83	;'S'
  1515  00FFB2  4F                 	db	79	;'O'
  1516  00FFB3  52                 	db	82	;'R'
  1517  00FFB4  53                 	db	83	;'S'
  1518  00FFB5  00                 	db	0
  1519  00FFB6                     STR_120:
  1520  00FFB6  28                 	db	40
  1521  00FFB7  6E                 	db	110	;'n'
  1522  00FFB8  75                 	db	117	;'u'
  1523  00FFB9  6C                 	db	108	;'l'
  1524  00FFBA  6C                 	db	108	;'l'
  1525  00FFBB  29                 	db	41
  1526  00FFBC  00                 	db	0
  1527  00FFBD                     STR_67:
  1528  00FFBD  46                 	db	70	;'F'
  1529  00FFBE  41                 	db	65	;'A'
  1530  00FFBF  49                 	db	73	;'I'
  1531  00FFC0  4C                 	db	76	;'L'
  1532  00FFC1  45                 	db	69	;'E'
  1533  00FFC2  44                 	db	68	;'D'
  1534  00FFC3  00                 	db	0
  1535  00FFC4                     STR_7:
  1536  00FFC4  53                 	db	83	;'S'
  1537  00FFC5  54                 	db	84	;'T'
  1538  00FFC6  41                 	db	65	;'A'
  1539  00FFC7  52                 	db	82	;'R'
  1540  00FFC8  54                 	db	84	;'T'
  1541  00FFC9  3A                 	db	58	;':'
  1542  00FFCA  00                 	db	0
  1543  00FFCB                     STR_9:
  1544  00FFCB  46                 	db	70	;'F'
  1545  00FFCC  45                 	db	69	;'E'
  1546  00FFCD  42                 	db	66	;'B'
  1547  00FFCE  00                 	db	0
  1548  00FFCF                     STR_19:
  1549  00FFCF  44                 	db	68	;'D'
  1550  00FFD0  45                 	db	69	;'E'
  1551  00FFD1  43                 	db	67	;'C'
  1552  00FFD2  00                 	db	0
  1553  00FFD3                     STR_15:
  1554  00FFD3  41                 	db	65	;'A'
  1555  00FFD4  55                 	db	85	;'U'
  1556  00FFD5  47                 	db	71	;'G'
  1557  00FFD6  00                 	db	0
  1558  00FFD7                     STR_14:
  1559  00FFD7  4A                 	db	74	;'J'
  1560  00FFD8  55                 	db	85	;'U'
  1561  00FFD9  4C                 	db	76	;'L'
  1562  00FFDA  00                 	db	0
  1563  00FFDB                     STR_8:
  1564  00FFDB  4A                 	db	74	;'J'
  1565  00FFDC  41                 	db	65	;'A'
  1566  00FFDD  4E                 	db	78	;'N'
  1567  00FFDE  00                 	db	0
  1568  00FFDF                     STR_13:
  1569  00FFDF  4A                 	db	74	;'J'
  1570  00FFE0  55                 	db	85	;'U'
  1571  00FFE1  4E                 	db	78	;'N'
  1572  00FFE2  00                 	db	0
  1573  00FFE3                     STR_16:
  1574  00FFE3  53                 	db	83	;'S'
  1575  00FFE4  45                 	db	69	;'E'
  1576  00FFE5  50                 	db	80	;'P'
  1577  00FFE6  00                 	db	0
  1578  00FFE7                     STR_10:
  1579  00FFE7  4D                 	db	77	;'M'
  1580  00FFE8  41                 	db	65	;'A'
  1581  00FFE9  52                 	db	82	;'R'
  1582  00FFEA  00                 	db	0
  1583  00FFEB                     STR_11:
  1584  00FFEB  41                 	db	65	;'A'
  1585  00FFEC  50                 	db	80	;'P'
  1586  00FFED  52                 	db	82	;'R'
  1587  00FFEE  00                 	db	0
  1588  00FFEF                     STR_20:
  1589  00FFEF  45                 	db	69	;'E'
  1590  00FFF0  52                 	db	82	;'R'
  1591  00FFF1  52                 	db	82	;'R'
  1592  00FFF2  00                 	db	0
  1593  00FFF3                     STR_17:
  1594  00FFF3  4F                 	db	79	;'O'
  1595  00FFF4  43                 	db	67	;'C'
  1596  00FFF5  54                 	db	84	;'T'
  1597  00FFF6  00                 	db	0
  1598  00FFF7                     STR_18:
  1599  00FFF7  4E                 	db	78	;'N'
  1600  00FFF8  4F                 	db	79	;'O'
  1601  00FFF9  56                 	db	86	;'V'
  1602  00FFFA  00                 	db	0
  1603  00FFFB                     STR_12:
  1604  00FFFB  4D                 	db	77	;'M'
  1605  00FFFC  41                 	db	65	;'A'
  1606  00FFFD  59                 	db	89	;'Y'
  1607  00FFFE  00                 	db	0
  1608  0000                     
  1609                           ; #config settings
  1610  00FFFF  00                 	db	0	; dummy byte at the end
  1611  0000                     
  1612                           	psect	cinit
  1613  00442A                     __pcinit:
  1614                           	opt stack 0
  1615  00442A                     start_initialization:
  1616                           	opt stack 0
  1617  00442A                     __initialization:
  1618                           	opt stack 0
  1619                           
  1620                           ; Initialize objects allocated to BANK1 (8 bytes)
  1621                           ; load TBLPTR registers with __pidataBANK1
  1622  00442A  0E6C               	movlw	low __pidataBANK1
  1623  00442C  6EF6               	movwf	tblptrl,c
  1624  00442E  0E4B               	movlw	high __pidataBANK1
  1625  004430  6EF7               	movwf	tblptrh,c
  1626  004432  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1627  004434  6EF8               	movwf	tblptru,c
  1628  004436  EE01  F033         	lfsr	0,__pdataBANK1
  1629  00443A  EE10 F008          	lfsr	1,8
  1630  00443E                     copy_data0:
  1631  00443E  0009               	tblrd		*+
  1632  004440  CFF5 FFEE          	movff	tablat,postinc0
  1633  004444  50E5               	movf	postdec1,w,c
  1634  004446  50E1               	movf	fsr1l,w,c
  1635  004448  E1FA               	bnz	copy_data0
  1636                           
  1637                           ; Clear objects allocated to BANK1 (51 bytes)
  1638  00444A  EE01  F000         	lfsr	0,__pbssBANK1
  1639  00444E  0E33               	movlw	51
  1640  004450                     clear_0:
  1641  004450  6AEE               	clrf	postinc0,c
  1642  004452  06E8               	decf	wreg,f,c
  1643  004454  E1FD               	bnz	clear_0
  1644                           
  1645                           ; Clear objects allocated to BANK0 (38 bytes)
  1646  004456  EE00  F0DA         	lfsr	0,__pbssBANK0
  1647  00445A  0E26               	movlw	38
  1648  00445C                     clear_1:
  1649  00445C  6AEE               	clrf	postinc0,c
  1650  00445E  06E8               	decf	wreg,f,c
  1651  004460  E1FD               	bnz	clear_1
  1652                           
  1653                           ; Clear objects allocated to COMRAM (35 bytes)
  1654  004462  EE00  F05B         	lfsr	0,__pbssCOMRAM
  1655  004466  0E23               	movlw	35
  1656  004468                     clear_2:
  1657  004468  6AEE               	clrf	postinc0,c
  1658  00446A  06E8               	decf	wreg,f,c
  1659  00446C  E1FD               	bnz	clear_2
  1660  00446E                     end_of_initialization:
  1661                           	opt stack 0
  1662  00446E                     __end_of__initialization:
  1663                           	opt stack 0
  1664  00446E  907E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1665  004470  927E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1666  004472  0100               	movlb	0
  1667  004474  EFB3  F01C         	goto	_main	;jump to C main() function
  1668                           tblptru	equ	0xFF8
  1669                           tblptrh	equ	0xFF7
  1670                           tblptrl	equ	0xFF6
  1671                           tablat	equ	0xFF5
  1672                           postinc0	equ	0xFEE
  1673                           wreg	equ	0xFE8
  1674                           postdec1	equ	0xFE5
  1675                           fsr1l	equ	0xFE1
  1676                           
  1677                           	psect	bssCOMRAM
  1678  00005B                     __pbssCOMRAM:
  1679                           	opt stack 0
  1680  00005B                     _back:
  1681                           	opt stack 0
  1682  00005B                     	ds	2
  1683  00005D                     _count_pop_no_tab:
  1684                           	opt stack 0
  1685  00005D                     	ds	2
  1686  00005F                     _count_pop_w_tab:
  1687                           	opt stack 0
  1688  00005F                     	ds	2
  1689  000061                     _debug:
  1690                           	opt stack 0
  1691  000061                     	ds	2
  1692  000063                     _down:
  1693                           	opt stack 0
  1694  000063                     	ds	2
  1695  000065                     _enter:
  1696                           	opt stack 0
  1697  000065                     	ds	2
  1698  000067                     _f_ID_receive:
  1699                           	opt stack 0
  1700  000067                     	ds	2
  1701  000069                     _f_can_coming_to_ID:
  1702                           	opt stack 0
  1703  000069                     	ds	2
  1704  00006B                     _f_can_coming_to_distribution:
  1705                           	opt stack 0
  1706  00006B                     	ds	2
  1707  00006D                     _first:
  1708                           	opt stack 0
  1709  00006D                     	ds	2
  1710  00006F                     _firstboot:
  1711                           	opt stack 0
  1712  00006F                     	ds	2
  1713  000071                     _log_count_can_no_lab:
  1714                           	opt stack 0
  1715  000071                     	ds	2
  1716  000073                     _log_count_can_w_lab:
  1717                           	opt stack 0
  1718  000073                     	ds	2
  1719  000075                     _log_count_total:
  1720                           	opt stack 0
  1721  000075                     	ds	2
  1722  000077                     _up:
  1723                           	opt stack 0
  1724  000077                     	ds	2
  1725  000079                     _was_low_1:
  1726                           	opt stack 0
  1727  000079                     	ds	2
  1728  00007B                     _was_low_3:
  1729                           	opt stack 0
  1730  00007B                     	ds	2
  1731  00007D                     _input:
  1732                           	opt stack 0
  1733  00007D                     	ds	1
  1734                           tblptru	equ	0xFF8
  1735                           tblptrh	equ	0xFF7
  1736                           tblptrl	equ	0xFF6
  1737                           tablat	equ	0xFF5
  1738                           postinc0	equ	0xFEE
  1739                           wreg	equ	0xFE8
  1740                           postdec1	equ	0xFE5
  1741                           fsr1l	equ	0xFE1
  1742                           
  1743                           	psect	bssBANK0
  1744  0000DA                     __pbssBANK0:
  1745                           	opt stack 0
  1746  0000DA                     _sensor_outputs:
  1747                           	opt stack 0
  1748  0000DA                     	ds	4
  1749  0000DE                     _IR_signal:
  1750                           	opt stack 0
  1751  0000DE                     	ds	2
  1752  0000E0                     _MAG_signal:
  1753                           	opt stack 0
  1754  0000E0                     	ds	2
  1755  0000E2                     _RTCflag:
  1756                           	opt stack 0
  1757  0000E2                     	ds	2
  1758  0000E4                     _cur_can:
  1759                           	opt stack 0
  1760  0000E4                     	ds	2
  1761  0000E6                     _cur_state:
  1762                           	opt stack 0
  1763  0000E6                     	ds	2
  1764  0000E8                     _f_lastCan:
  1765                           	opt stack 0
  1766  0000E8                     	ds	2
  1767  0000EA                     _f_loadingNewCan:
  1768                           	opt stack 0
  1769  0000EA                     	ds	2
  1770  0000EC                     _log:
  1771                           	opt stack 0
  1772  0000EC                     	ds	2
  1773  0000EE                     _log_completion:
  1774                           	opt stack 0
  1775  0000EE                     	ds	2
  1776  0000F0                     _log_count_pop_no_tab:
  1777                           	opt stack 0
  1778  0000F0                     	ds	2
  1779  0000F2                     _log_count_pop_w_tab:
  1780                           	opt stack 0
  1781  0000F2                     	ds	2
  1782  0000F4                     _log_total_time:
  1783                           	opt stack 0
  1784  0000F4                     	ds	2
  1785  0000F6                     _logstate:
  1786                           	opt stack 0
  1787  0000F6                     	ds	2
  1788  0000F8                     _total_time:
  1789                           	opt stack 0
  1790  0000F8                     	ds	2
  1791  0000FA                     _var:
  1792                           	opt stack 0
  1793  0000FA                     	ds	2
  1794  0000FC                     _machine_state:
  1795                           	opt stack 0
  1796  0000FC                     	ds	1
  1797  0000FD                     _sel:
  1798                           	opt stack 0
  1799  0000FD                     	ds	1
  1800  0000FE                     _count_total:
  1801                           	opt stack 0
  1802  0000FE                     	ds	2
  1803                           tblptru	equ	0xFF8
  1804                           tblptrh	equ	0xFF7
  1805                           tblptrl	equ	0xFF6
  1806                           tablat	equ	0xFF5
  1807                           postinc0	equ	0xFEE
  1808                           wreg	equ	0xFE8
  1809                           postdec1	equ	0xFE5
  1810                           fsr1l	equ	0xFE1
  1811                           
  1812                           	psect	bssBANK1
  1813  000100                     __pbssBANK1:
  1814                           	opt stack 0
  1815  000100                     _log_startTime:
  1816                           	opt stack 0
  1817  000100                     	ds	14
  1818  00010E                     _startTime:
  1819                           	opt stack 0
  1820  00010E                     	ds	14
  1821  00011C                     _servoTimes:
  1822                           	opt stack 0
  1823  00011C                     	ds	8
  1824  000124                     _time:
  1825                           	opt stack 0
  1826  000124                     	ds	7
  1827  00012B                     _count_can_no_lab:
  1828                           	opt stack 0
  1829  00012B                     	ds	2
  1830  00012D                     _count_can_w_lab:
  1831                           	opt stack 0
  1832  00012D                     	ds	2
  1833  00012F                     _f_can_distributed:
  1834                           	opt stack 0
  1835  00012F                     	ds	2
  1836  000131                     _i:
  1837                           	opt stack 0
  1838  000131                     	ds	2
  1839                           tblptru	equ	0xFF8
  1840                           tblptrh	equ	0xFF7
  1841                           tblptrl	equ	0xFF6
  1842                           tablat	equ	0xFF5
  1843                           postinc0	equ	0xFEE
  1844                           wreg	equ	0xFE8
  1845                           postdec1	equ	0xFE5
  1846                           fsr1l	equ	0xFE1
  1847                           
  1848                           	psect	dataBANK1
  1849  000133                     __pdataBANK1:
  1850                           	opt stack 0
  1851  000133                     UI@F3226:
  1852                           	opt stack 0
  1853  000133                     	ds	4
  1854  000137                     printRTC@F3217:
  1855                           	opt stack 0
  1856  000137                     	ds	4
  1857                           tblptru	equ	0xFF8
  1858                           tblptrh	equ	0xFF7
  1859                           tblptrl	equ	0xFF6
  1860                           tablat	equ	0xFF5
  1861                           postinc0	equ	0xFEE
  1862                           wreg	equ	0xFE8
  1863                           postdec1	equ	0xFE5
  1864                           fsr1l	equ	0xFE1
  1865                           
  1866                           	psect	cstackBANK0
  1867  000080                     __pcstackBANK0:
  1868                           	opt stack 0
  1869  000080                     ??_delay_ms:
  1870  000080                     ??_PortTests:
  1871  000080                     ??_isdigit:
  1872  000080                     ??_readADC:
  1873  000080                     ??_I2C_Master_Wait:
  1874  000080                     ?___wmul:
  1875                           	opt stack 0
  1876  000080                     ?___awmod:
  1877                           	opt stack 0
  1878  000080                     ?___lwdiv:
  1879                           	opt stack 0
  1880  000080                     ?___lldiv:
  1881                           	opt stack 0
  1882  000080                     lcdNibble@temp:
  1883                           	opt stack 0
  1884  000080                     initTime@m:
  1885                           	opt stack 0
  1886  000080                     updateServoPosition@time_us:
  1887                           	opt stack 0
  1888  000080                     EEPROM_read@address:
  1889                           	opt stack 0
  1890  000080                     ___wmul@multiplier:
  1891                           	opt stack 0
  1892  000080                     ___awmod@dividend:
  1893                           	opt stack 0
  1894  000080                     ___lwdiv@dividend:
  1895                           	opt stack 0
  1896  000080                     strcpy@to:
  1897                           	opt stack 0
  1898  000080                     ___lldiv@dividend:
  1899                           	opt stack 0
  1900                           
  1901                           ; 4 bytes @ 0x0
  1902  000080                     	ds	1
  1903  000081                     readADC@channel:
  1904                           	opt stack 0
  1905  000081                     I2C_Master_Read@a:
  1906                           	opt stack 0
  1907  000081                     lcdNibble@data:
  1908                           	opt stack 0
  1909  000081                     initTime@h:
  1910                           	opt stack 0
  1911  000081                     delay_ms@milliseconds:
  1912                           	opt stack 0
  1913  000081                     _isdigit$1961:
  1914                           	opt stack 0
  1915  000081                     I2C_Master_Write@d:
  1916                           	opt stack 0
  1917                           
  1918                           ; 2 bytes @ 0x1
  1919  000081                     	ds	1
  1920  000082                     ??_ID:
  1921  000082                     ??_readIR:
  1922  000082                     ??_readMAG:
  1923  000082                     I2C_Master_Read@temp:
  1924                           	opt stack 0
  1925  000082                     lcdInst@data:
  1926                           	opt stack 0
  1927  000082                     putch@data:
  1928                           	opt stack 0
  1929  000082                     initTime@w:
  1930                           	opt stack 0
  1931  000082                     isdigit@c:
  1932                           	opt stack 0
  1933  000082                     updateServoPosition@timer:
  1934                           	opt stack 0
  1935  000082                     ___wmul@multiplicand:
  1936                           	opt stack 0
  1937  000082                     ___awmod@divisor:
  1938                           	opt stack 0
  1939  000082                     ___lwdiv@divisor:
  1940                           	opt stack 0
  1941  000082                     strcpy@from:
  1942                           	opt stack 0
  1943                           
  1944                           ; 2 bytes @ 0x2
  1945  000082                     	ds	1
  1946  000083                     ??_initLCD:
  1947  000083                     initTime@DD:
  1948                           	opt stack 0
  1949  000083                     getRTC@i:
  1950                           	opt stack 0
  1951                           
  1952                           ; 2 bytes @ 0x3
  1953  000083                     	ds	1
  1954  000084                     ??_updateServoPosition:
  1955  000084                     initTime@MM:
  1956                           	opt stack 0
  1957  000084                     ___awmod@counter:
  1958                           	opt stack 0
  1959  000084                     readIR@res:
  1960                           	opt stack 0
  1961  000084                     readMAG@res:
  1962                           	opt stack 0
  1963  000084                     ID@i:
  1964                           	opt stack 0
  1965  000084                     ___wmul@product:
  1966                           	opt stack 0
  1967  000084                     ___lwdiv@quotient:
  1968                           	opt stack 0
  1969  000084                     strcpy@cp:
  1970                           	opt stack 0
  1971  000084                     ___lldiv@divisor:
  1972                           	opt stack 0
  1973                           
  1974                           ; 4 bytes @ 0x4
  1975  000084                     	ds	1
  1976  000085                     ??_initSortTimer:
  1977  000085                     initTime@YY:
  1978                           	opt stack 0
  1979  000085                     ___awmod@sign:
  1980                           	opt stack 0
  1981                           
  1982                           ; 1 bytes @ 0x5
  1983  000085                     	ds	1
  1984  000086                     ??_getIR:
  1985  000086                     ??_getMAG:
  1986  000086                     ?___awdiv:
  1987                           	opt stack 0
  1988  000086                     initTime@s:
  1989                           	opt stack 0
  1990  000086                     ___lwdiv@counter:
  1991                           	opt stack 0
  1992  000086                     ID@i_1112:
  1993                           	opt stack 0
  1994  000086                     updateServoPosition@my_time:
  1995                           	opt stack 0
  1996  000086                     ___awdiv@dividend:
  1997                           	opt stack 0
  1998                           
  1999                           ; 2 bytes @ 0x6
  2000  000086                     	ds	1
  2001  000087                     ?___lwmod:
  2002                           	opt stack 0
  2003  000087                     getIR@i:
  2004                           	opt stack 0
  2005  000087                     ___lwmod@dividend:
  2006                           	opt stack 0
  2007                           
  2008                           ; 2 bytes @ 0x7
  2009  000087                     	ds	1
  2010  000088                     ??_Distribution:
  2011  000088                     ??_initServos:
  2012  000088                     initSortTimer@i:
  2013                           	opt stack 0
  2014  000088                     ___awdiv@divisor:
  2015                           	opt stack 0
  2016  000088                     ___lldiv@quotient:
  2017                           	opt stack 0
  2018                           
  2019                           ; 4 bytes @ 0x8
  2020  000088                     	ds	1
  2021  000089                     ___lwmod@divisor:
  2022                           	opt stack 0
  2023                           
  2024                           ; 2 bytes @ 0x9
  2025  000089                     	ds	1
  2026  00008A                     ___awdiv@counter:
  2027                           	opt stack 0
  2028                           
  2029                           ; 1 bytes @ 0xA
  2030  00008A                     	ds	1
  2031  00008B                     ___awdiv@sign:
  2032                           	opt stack 0
  2033  00008B                     ___lwmod@counter:
  2034                           	opt stack 0
  2035                           
  2036                           ; 1 bytes @ 0xB
  2037  00008B                     	ds	1
  2038  00008C                     ___lldiv@counter:
  2039                           	opt stack 0
  2040  00008C                     ___awdiv@quotient:
  2041                           	opt stack 0
  2042                           
  2043                           ; 2 bytes @ 0xC
  2044  00008C                     	ds	1
  2045  00008D                     I2C_Master_Init@c:
  2046                           	opt stack 0
  2047                           
  2048                           ; 4 bytes @ 0xD
  2049  00008D                     	ds	1
  2050  00008E                     ?_printf:
  2051                           	opt stack 0
  2052  00008E                     printf@f:
  2053                           	opt stack 0
  2054                           
  2055                           ; 2 bytes @ 0xE
  2056  00008E                     	ds	3
  2057  000091                     ??_I2C_Master_Init:
  2058                           
  2059                           ; 1 bytes @ 0x11
  2060  000091                     	ds	4
  2061  000095                     ??_loadRTC:
  2062                           
  2063                           ; 1 bytes @ 0x15
  2064  000095                     	ds	1
  2065  000096                     loadRTC@i:
  2066                           	opt stack 0
  2067                           
  2068                           ; 2 bytes @ 0x16
  2069  000096                     	ds	4
  2070  00009A                     ??_printf:
  2071                           
  2072                           ; 1 bytes @ 0x1A
  2073  00009A                     	ds	4
  2074  00009E                     printf@prec:
  2075                           	opt stack 0
  2076                           
  2077                           ; 1 bytes @ 0x1E
  2078  00009E                     	ds	1
  2079  00009F                     printf@cp:
  2080                           	opt stack 0
  2081                           
  2082                           ; 2 bytes @ 0x1F
  2083  00009F                     	ds	2
  2084  0000A1                     printf@ap:
  2085                           	opt stack 0
  2086                           
  2087                           ; 2 bytes @ 0x21
  2088  0000A1                     	ds	2
  2089  0000A3                     printf@len:
  2090                           	opt stack 0
  2091                           
  2092                           ; 2 bytes @ 0x23
  2093  0000A3                     	ds	2
  2094  0000A5                     printf@val:
  2095                           	opt stack 0
  2096                           
  2097                           ; 2 bytes @ 0x25
  2098  0000A5                     	ds	2
  2099  0000A7                     printf@flag:
  2100                           	opt stack 0
  2101                           
  2102                           ; 1 bytes @ 0x27
  2103  0000A7                     	ds	1
  2104  0000A8                     printf@c:
  2105                           	opt stack 0
  2106                           
  2107                           ; 1 bytes @ 0x28
  2108  0000A8                     	ds	1
  2109  0000A9                     printf@width:
  2110                           	opt stack 0
  2111                           
  2112                           ; 2 bytes @ 0x29
  2113  0000A9                     	ds	2
  2114  0000AB                     ??_printRTC:
  2115  0000AB                     ??_algorithmTest:
  2116  0000AB                     ??_sensorTest:
  2117  0000AB                     ??_actuatorTest:
  2118  0000AB                     ??_PortTestA5:
  2119  0000AB                     ??_SpeedTest:
  2120  0000AB                     ??_PusherTest:
  2121  0000AB                     ??_BothServos:
  2122  0000AB                     ??_BlockerTest:
  2123  0000AB                     EEPROM_write@address:
  2124                           	opt stack 0
  2125                           
  2126                           ; 2 bytes @ 0x2B
  2127  0000AB                     	ds	1
  2128  0000AC                     PusherTest@i:
  2129                           	opt stack 0
  2130  0000AC                     BlockerTest@i:
  2131                           	opt stack 0
  2132                           
  2133                           ; 2 bytes @ 0x2C
  2134  0000AC                     	ds	1
  2135  0000AD                     EEPROM_write@data:
  2136                           	opt stack 0
  2137  0000AD                     actuatorTest@i_1646:
  2138                           	opt stack 0
  2139  0000AD                     sensorTest@res:
  2140                           	opt stack 0
  2141                           
  2142                           ; 2 bytes @ 0x2D
  2143  0000AD                     	ds	1
  2144  0000AE                     ??_EEPROM_write:
  2145  0000AE                     actuatorTest@i_1653:
  2146                           	opt stack 0
  2147  0000AE                     PusherTest@i_1699:
  2148                           	opt stack 0
  2149  0000AE                     BlockerTest@flag:
  2150                           	opt stack 0
  2151  0000AE                     printRTC@INT_time:
  2152                           	opt stack 0
  2153                           
  2154                           ; 14 bytes @ 0x2E
  2155  0000AE                     	ds	1
  2156  0000AF                     EEPROM_write@i:
  2157                           	opt stack 0
  2158  0000AF                     actuatorTest@i_1654:
  2159                           	opt stack 0
  2160                           
  2161                           ; 1 bytes @ 0x2F
  2162  0000AF                     	ds	1
  2163  0000B0                     EEPROM_write@i_1332:
  2164                           	opt stack 0
  2165  0000B0                     actuatorTest@i_1656:
  2166                           	opt stack 0
  2167                           
  2168                           ; 1 bytes @ 0x30
  2169  0000B0                     	ds	1
  2170  0000B1                     ??_Loading:
  2171  0000B1                     logRun@num:
  2172                           	opt stack 0
  2173  0000B1                     actuatorTest@i_1657:
  2174                           	opt stack 0
  2175                           
  2176                           ; 1 bytes @ 0x31
  2177  0000B1                     	ds	1
  2178  0000B2                     logRun@byte1:
  2179                           	opt stack 0
  2180  0000B2                     actuatorTest@i_1659:
  2181                           	opt stack 0
  2182                           
  2183                           ; 1 bytes @ 0x32
  2184  0000B2                     	ds	1
  2185  0000B3                     logRun@byte2:
  2186                           	opt stack 0
  2187  0000B3                     actuatorTest@i_1660:
  2188                           	opt stack 0
  2189  0000B3                     Loading@addr:
  2190                           	opt stack 0
  2191                           
  2192                           ; 2 bytes @ 0x33
  2193  0000B3                     	ds	1
  2194  0000B4                     logRun@byte3:
  2195                           	opt stack 0
  2196  0000B4                     actuatorTest@i_1662:
  2197                           	opt stack 0
  2198                           
  2199                           ; 1 bytes @ 0x34
  2200  0000B4                     	ds	1
  2201  0000B5                     Loading@byte1:
  2202                           	opt stack 0
  2203  0000B5                     logRun@byte_i:
  2204                           	opt stack 0
  2205  0000B5                     actuatorTest@i_1663:
  2206                           	opt stack 0
  2207                           
  2208                           ; 1 bytes @ 0x35
  2209  0000B5                     	ds	1
  2210  0000B6                     logRun@byte11:
  2211                           	opt stack 0
  2212  0000B6                     actuatorTest@i_1665:
  2213                           	opt stack 0
  2214  0000B6                     Loading@i_1099:
  2215                           	opt stack 0
  2216                           
  2217                           ; 2 bytes @ 0x36
  2218  0000B6                     	ds	1
  2219  0000B7                     actuatorTest@i_1666:
  2220                           	opt stack 0
  2221  0000B7                     logRun@i:
  2222                           	opt stack 0
  2223                           
  2224                           ; 2 bytes @ 0x37
  2225  0000B7                     	ds	1
  2226  0000B8                     actuatorTest@i_1668:
  2227                           	opt stack 0
  2228  0000B8                     Loading@i_1100:
  2229                           	opt stack 0
  2230                           
  2231                           ; 2 bytes @ 0x38
  2232  0000B8                     	ds	1
  2233  0000B9                     actuatorTest@i_1669:
  2234                           	opt stack 0
  2235  0000B9                     logRun@addr:
  2236                           	opt stack 0
  2237                           
  2238                           ; 2 bytes @ 0x39
  2239  0000B9                     	ds	1
  2240  0000BA                     actuatorTest@i_1672:
  2241                           	opt stack 0
  2242  0000BA                     Loading@i:
  2243                           	opt stack 0
  2244                           
  2245                           ; 2 bytes @ 0x3A
  2246  0000BA                     	ds	1
  2247  0000BB                     actuatorTest@i_1673:
  2248                           	opt stack 0
  2249                           
  2250                           ; 1 bytes @ 0x3B
  2251  0000BB                     	ds	1
  2252  0000BC                     actuatorTest@i_1675:
  2253                           	opt stack 0
  2254  0000BC                     printRTC@RTC_month:
  2255                           	opt stack 0
  2256                           
  2257                           ; 2 bytes @ 0x3C
  2258  0000BC                     	ds	1
  2259  0000BD                     actuatorTest@i_1676:
  2260                           	opt stack 0
  2261                           
  2262                           ; 1 bytes @ 0x3D
  2263  0000BD                     	ds	1
  2264  0000BE                     actuatorTest@i_1678:
  2265                           	opt stack 0
  2266  0000BE                     printRTC@month:
  2267                           	opt stack 0
  2268                           
  2269                           ; 4 bytes @ 0x3E
  2270  0000BE                     	ds	1
  2271  0000BF                     actuatorTest@i_1679:
  2272                           	opt stack 0
  2273                           
  2274                           ; 1 bytes @ 0x3F
  2275  0000BF                     	ds	1
  2276  0000C0                     actuatorTest@i_1682:
  2277                           	opt stack 0
  2278                           
  2279                           ; 1 bytes @ 0x40
  2280  0000C0                     	ds	1
  2281  0000C1                     actuatorTest@i_1683:
  2282                           	opt stack 0
  2283                           
  2284                           ; 1 bytes @ 0x41
  2285  0000C1                     	ds	1
  2286  0000C2                     actuatorTest@i_1685:
  2287                           	opt stack 0
  2288  0000C2                     printRTC@i:
  2289                           	opt stack 0
  2290                           
  2291                           ; 2 bytes @ 0x42
  2292  0000C2                     	ds	1
  2293  0000C3                     actuatorTest@i_1686:
  2294                           	opt stack 0
  2295                           
  2296                           ; 1 bytes @ 0x43
  2297  0000C3                     	ds	1
  2298  0000C4                     ??_UI:
  2299  0000C4                     actuatorTest@i:
  2300                           	opt stack 0
  2301                           
  2302                           ; 2 bytes @ 0x44
  2303  0000C4                     	ds	2
  2304  0000C6                     ??_Test:
  2305  0000C6                     _UI$2317:
  2306                           	opt stack 0
  2307                           
  2308                           ; 2 bytes @ 0x46
  2309  0000C6                     	ds	2
  2310  0000C8                     UI@i:
  2311                           	opt stack 0
  2312                           
  2313                           ; 1 bytes @ 0x48
  2314  0000C8                     	ds	1
  2315  0000C9                     UI@i_409:
  2316                           	opt stack 0
  2317                           
  2318                           ; 1 bytes @ 0x49
  2319  0000C9                     	ds	1
  2320  0000CA                     UI@i_412:
  2321                           	opt stack 0
  2322                           
  2323                           ; 1 bytes @ 0x4A
  2324  0000CA                     	ds	1
  2325  0000CB                     UI@i_413:
  2326                           	opt stack 0
  2327                           
  2328                           ; 1 bytes @ 0x4B
  2329  0000CB                     	ds	1
  2330  0000CC                     UI@i_431:
  2331                           	opt stack 0
  2332                           
  2333                           ; 1 bytes @ 0x4C
  2334  0000CC                     	ds	1
  2335  0000CD                     UI@i_432:
  2336                           	opt stack 0
  2337                           
  2338                           ; 1 bytes @ 0x4D
  2339  0000CD                     	ds	1
  2340  0000CE                     UI@i_435:
  2341                           	opt stack 0
  2342                           
  2343                           ; 1 bytes @ 0x4E
  2344  0000CE                     	ds	1
  2345  0000CF                     UI@i_436:
  2346                           	opt stack 0
  2347                           
  2348                           ; 1 bytes @ 0x4F
  2349  0000CF                     	ds	1
  2350  0000D0                     UI@i_439:
  2351                           	opt stack 0
  2352                           
  2353                           ; 1 bytes @ 0x50
  2354  0000D0                     	ds	1
  2355  0000D1                     UI@i_440:
  2356                           	opt stack 0
  2357                           
  2358                           ; 1 bytes @ 0x51
  2359  0000D1                     	ds	1
  2360  0000D2                     UI@i_443:
  2361                           	opt stack 0
  2362                           
  2363                           ; 1 bytes @ 0x52
  2364  0000D2                     	ds	1
  2365  0000D3                     UI@i_444:
  2366                           	opt stack 0
  2367                           
  2368                           ; 1 bytes @ 0x53
  2369  0000D3                     	ds	1
  2370  0000D4                     UI@i_447:
  2371                           	opt stack 0
  2372                           
  2373                           ; 1 bytes @ 0x54
  2374  0000D4                     	ds	1
  2375  0000D5                     UI@i_448:
  2376                           	opt stack 0
  2377                           
  2378                           ; 1 bytes @ 0x55
  2379  0000D5                     	ds	1
  2380  0000D6                     UI@month:
  2381                           	opt stack 0
  2382                           
  2383                           ; 4 bytes @ 0x56
  2384  0000D6                     	ds	4
  2385  0000DA                     tblptru	equ	0xFF8
  2386                           tblptrh	equ	0xFF7
  2387                           tblptrl	equ	0xFF6
  2388                           tablat	equ	0xFF5
  2389                           postinc0	equ	0xFEE
  2390                           wreg	equ	0xFE8
  2391                           postdec1	equ	0xFE5
  2392                           fsr1l	equ	0xFE1
  2393                           
  2394                           ; 1 bytes @ 0x5A
  2395                           
  2396                           	psect	cstackCOMRAM
  2397  000001                     __pcstackCOMRAM:
  2398                           	opt stack 0
  2399  000001                     ??i2_I2C_Master_Wait:
  2400  000001                     ??i2_isdigit:
  2401  000001                     ?i2___wmul:
  2402                           	opt stack 0
  2403  000001                     ?i2___lwmod:
  2404                           	opt stack 0
  2405  000001                     i2lcdNibble@temp:
  2406                           	opt stack 0
  2407  000001                     i2EEPROM_read@address:
  2408                           	opt stack 0
  2409  000001                     i2___wmul@multiplier:
  2410                           	opt stack 0
  2411  000001                     i2___lwmod@dividend:
  2412                           	opt stack 0
  2413  000001                     i2strcpy@to:
  2414                           	opt stack 0
  2415                           
  2416                           ; 2 bytes @ 0x0
  2417  000001                     	ds	1
  2418  000002                     i2I2C_Master_Read@a:
  2419                           	opt stack 0
  2420  000002                     i2lcdNibble@data:
  2421                           	opt stack 0
  2422  000002                     i2_isdigit$1961:
  2423                           	opt stack 0
  2424  000002                     i2I2C_Master_Write@d:
  2425                           	opt stack 0
  2426                           
  2427                           ; 2 bytes @ 0x1
  2428  000002                     	ds	1
  2429  000003                     i2I2C_Master_Read@temp:
  2430                           	opt stack 0
  2431  000003                     i2lcdInst@data:
  2432                           	opt stack 0
  2433  000003                     i2putch@data:
  2434                           	opt stack 0
  2435  000003                     i2isdigit@c:
  2436                           	opt stack 0
  2437  000003                     i2___wmul@multiplicand:
  2438                           	opt stack 0
  2439  000003                     i2___lwmod@divisor:
  2440                           	opt stack 0
  2441  000003                     i2strcpy@from:
  2442                           	opt stack 0
  2443                           
  2444                           ; 2 bytes @ 0x2
  2445  000003                     	ds	1
  2446  000004                     i2getRTC@i:
  2447                           	opt stack 0
  2448                           
  2449                           ; 2 bytes @ 0x3
  2450  000004                     	ds	1
  2451  000005                     i2___lwmod@counter:
  2452                           	opt stack 0
  2453  000005                     i2___wmul@product:
  2454                           	opt stack 0
  2455  000005                     i2strcpy@cp:
  2456                           	opt stack 0
  2457                           
  2458                           ; 2 bytes @ 0x4
  2459  000005                     	ds	1
  2460  000006                     ?i2___lwdiv:
  2461                           	opt stack 0
  2462  000006                     i2___lwdiv@dividend:
  2463                           	opt stack 0
  2464                           
  2465                           ; 2 bytes @ 0x5
  2466  000006                     	ds	1
  2467  000007                     retrieveLog@logNum:
  2468                           	opt stack 0
  2469                           
  2470                           ; 2 bytes @ 0x6
  2471  000007                     	ds	1
  2472  000008                     i2___lwdiv@divisor:
  2473                           	opt stack 0
  2474                           
  2475                           ; 2 bytes @ 0x7
  2476  000008                     	ds	1
  2477  000009                     ??_retrieveLog:
  2478                           
  2479                           ; 1 bytes @ 0x8
  2480  000009                     	ds	1
  2481  00000A                     i2___lwdiv@quotient:
  2482                           	opt stack 0
  2483                           
  2484                           ; 2 bytes @ 0x9
  2485  00000A                     	ds	1
  2486  00000B                     retrieveLog@byte1:
  2487                           	opt stack 0
  2488                           
  2489                           ; 1 bytes @ 0xA
  2490  00000B                     	ds	1
  2491  00000C                     retrieveLog@byte2:
  2492                           	opt stack 0
  2493  00000C                     i2___lwdiv@counter:
  2494                           	opt stack 0
  2495                           
  2496                           ; 1 bytes @ 0xB
  2497  00000C                     	ds	1
  2498  00000D                     ?i2_printf:
  2499                           	opt stack 0
  2500  00000D                     retrieveLog@byte3:
  2501                           	opt stack 0
  2502  00000D                     i2printf@f:
  2503                           	opt stack 0
  2504                           
  2505                           ; 2 bytes @ 0xC
  2506  00000D                     	ds	1
  2507  00000E                     retrieveLog@i:
  2508                           	opt stack 0
  2509                           
  2510                           ; 2 bytes @ 0xD
  2511  00000E                     	ds	2
  2512  000010                     retrieveLog@addr:
  2513                           	opt stack 0
  2514                           
  2515                           ; 2 bytes @ 0xF
  2516  000010                     	ds	2
  2517  000012                     dispLogs@myLog:
  2518                           	opt stack 0
  2519                           
  2520                           ; 2 bytes @ 0x11
  2521  000012                     	ds	2
  2522  000014                     
  2523                           ; 1 bytes @ 0x13
  2524  000014                     	ds	5
  2525  000019                     ??i2_printf:
  2526                           
  2527                           ; 1 bytes @ 0x18
  2528  000019                     	ds	4
  2529  00001D                     i2printf@prec:
  2530                           	opt stack 0
  2531                           
  2532                           ; 1 bytes @ 0x1C
  2533  00001D                     	ds	1
  2534  00001E                     i2printf@cp:
  2535                           	opt stack 0
  2536                           
  2537                           ; 2 bytes @ 0x1D
  2538  00001E                     	ds	2
  2539  000020                     i2printf@ap:
  2540                           	opt stack 0
  2541                           
  2542                           ; 2 bytes @ 0x1F
  2543  000020                     	ds	2
  2544  000022                     i2printf@len:
  2545                           	opt stack 0
  2546                           
  2547                           ; 2 bytes @ 0x21
  2548  000022                     	ds	2
  2549  000024                     i2printf@val:
  2550                           	opt stack 0
  2551                           
  2552                           ; 2 bytes @ 0x23
  2553  000024                     	ds	2
  2554  000026                     i2printf@flag:
  2555                           	opt stack 0
  2556                           
  2557                           ; 1 bytes @ 0x25
  2558  000026                     	ds	1
  2559  000027                     i2printf@c:
  2560                           	opt stack 0
  2561                           
  2562                           ; 1 bytes @ 0x26
  2563  000027                     	ds	1
  2564  000028                     i2printf@width:
  2565                           	opt stack 0
  2566                           
  2567                           ; 2 bytes @ 0x27
  2568  000028                     	ds	2
  2569  00002A                     ??_printSortTimer:
  2570  00002A                     ??i2_printRTC:
  2571  00002A                     ?_inputHandler:
  2572                           	opt stack 0
  2573                           
  2574                           ; 2 bytes @ 0x29
  2575  00002A                     	ds	2
  2576  00002C                     ??_inputHandler:
  2577                           
  2578                           ; 1 bytes @ 0x2B
  2579  00002C                     	ds	1
  2580  00002D                     printSortTimer@hour:
  2581                           	opt stack 0
  2582  00002D                     i2printRTC@INT_time:
  2583                           	opt stack 0
  2584                           
  2585                           ; 14 bytes @ 0x2C
  2586  00002D                     	ds	2
  2587  00002F                     printSortTimer@curTime:
  2588                           	opt stack 0
  2589                           
  2590                           ; 14 bytes @ 0x2E
  2591  00002F                     	ds	12
  2592  00003B                     i2printRTC@RTC_month:
  2593                           	opt stack 0
  2594                           
  2595                           ; 2 bytes @ 0x3A
  2596  00003B                     	ds	2
  2597  00003D                     printSortTimer@start_sec:
  2598                           	opt stack 0
  2599  00003D                     i2printRTC@month:
  2600                           	opt stack 0
  2601                           
  2602                           ; 4 bytes @ 0x3C
  2603  00003D                     	ds	2
  2604  00003F                     printSortTimer@cur_sec:
  2605                           	opt stack 0
  2606                           
  2607                           ; 2 bytes @ 0x3E
  2608  00003F                     	ds	2
  2609  000041                     printSortTimer@min:
  2610                           	opt stack 0
  2611  000041                     i2printRTC@i:
  2612                           	opt stack 0
  2613                           
  2614                           ; 2 bytes @ 0x40
  2615  000041                     	ds	2
  2616  000043                     ??_updateMenu:
  2617  000043                     printSortTimer@sec:
  2618                           	opt stack 0
  2619                           
  2620                           ; 2 bytes @ 0x42
  2621  000043                     	ds	2
  2622  000045                     _printSortTimer$2437:
  2623                           	opt stack 0
  2624                           
  2625                           ; 2 bytes @ 0x44
  2626  000045                     	ds	2
  2627  000047                     printSortTimer@timeDiff:
  2628                           	opt stack 0
  2629                           
  2630                           ; 2 bytes @ 0x46
  2631  000047                     	ds	2
  2632  000049                     printSortTimer@i:
  2633                           	opt stack 0
  2634                           
  2635                           ; 2 bytes @ 0x48
  2636  000049                     	ds	2
  2637  00004B                     ??_handler:
  2638                           
  2639                           ; 1 bytes @ 0x4A
  2640  00004B                     	ds	16
  2641                           tblptru	equ	0xFF8
  2642                           tblptrh	equ	0xFF7
  2643                           tblptrl	equ	0xFF6
  2644                           tablat	equ	0xFF5
  2645                           postinc0	equ	0xFEE
  2646                           wreg	equ	0xFE8
  2647                           postdec1	equ	0xFE5
  2648                           fsr1l	equ	0xFE1
  2649                           
  2650 ;;
  2651 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2652 ;;
  2653 ;; *************** function _main *****************
  2654 ;; Defined at:
  2655 ;;		line 19 in file "main.c"
  2656 ;; Parameters:    Size  Location     Type
  2657 ;;		None
  2658 ;; Auto vars:     Size  Location     Type
  2659 ;;		None
  2660 ;; Return value:  Size  Location     Type
  2661 ;;                  1    wreg      void 
  2662 ;; Registers used:
  2663 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2664 ;; Tracked objects:
  2665 ;;		On entry : 0/0
  2666 ;;		On exit  : 0/0
  2667 ;;		Unchanged: 0/0
  2668 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2669 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2670 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2671 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2672 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2673 ;;Total ram usage:        0 bytes
  2674 ;; Hardware stack levels required when called:   13
  2675 ;; This function calls:
  2676 ;;		_I2C_Master_Init
  2677 ;;		_Test
  2678 ;;		_UI
  2679 ;;		_initLCD
  2680 ;;		_initTime
  2681 ;;		_initUI
  2682 ;;		_logRun
  2683 ;;		_machineConfig
  2684 ;;		_sort
  2685 ;;		_stopSignals
  2686 ;; This function is called by:
  2687 ;;		Startup code after reset
  2688 ;; This function uses a non-reentrant model
  2689 ;;
  2690                           
  2691                           	psect	text0
  2692  003966                     __ptext0:
  2693                           	opt stack 0
  2694  003966                     _main:
  2695                           	opt stack 18
  2696                           
  2697                           ;main.c: 20: machineConfig();
  2698                           
  2699                           ;incstack = 0
  2700  003966  EC38  F021         	call	_machineConfig	;wreg free
  2701                           
  2702                           ;main.c: 21: initLCD();
  2703  00396A  EC88  F022         	call	_initLCD	;wreg free
  2704                           
  2705                           ;main.c: 24: RTCflag = 0;
  2706  00396E  0E00               	movlw	0
  2707  003970  0100               	movlb	0	; () banked
  2708  003972  6FE3               	movwf	(_RTCflag+1)& (0+255),b
  2709  003974  0E00               	movlw	0
  2710  003976  6FE2               	movwf	_RTCflag& (0+255),b
  2711                           
  2712                           ;main.c: 25: if(RTCflag){
  2713  003978  0100               	movlb	0	; () banked
  2714  00397A  51E2               	movf	_RTCflag& (0+255),w,b
  2715  00397C  0100               	movlb	0	; () banked
  2716  00397E  11E3               	iorwf	(_RTCflag+1)& (0+255),w,b
  2717  003980  B4D8               	btfsc	status,2,c
  2718  003982  D016               	goto	l8468
  2719                           
  2720                           ; BSR set to: 0
  2721                           ;main.c: 26: initTime(0x42, 0x20, 0x15, 0x04, 0x15, 0x03, 0x17);
  2722  003984  0E20               	movlw	32
  2723  003986  0100               	movlb	0	; () banked
  2724  003988  6F80               	movwf	initTime@m& (0+255),b
  2725  00398A  0E15               	movlw	21
  2726  00398C  0100               	movlb	0	; () banked
  2727  00398E  6F81               	movwf	initTime@h& (0+255),b
  2728  003990  0E04               	movlw	4
  2729  003992  0100               	movlb	0	; () banked
  2730  003994  6F82               	movwf	initTime@w& (0+255),b
  2731  003996  0E15               	movlw	21
  2732  003998  0100               	movlb	0	; () banked
  2733  00399A  6F83               	movwf	initTime@DD& (0+255),b
  2734  00399C  0E03               	movlw	3
  2735  00399E  0100               	movlb	0	; () banked
  2736  0039A0  6F84               	movwf	initTime@MM& (0+255),b
  2737  0039A2  0E17               	movlw	23
  2738  0039A4  0100               	movlb	0	; () banked
  2739  0039A6  6F85               	movwf	initTime@YY& (0+255),b
  2740  0039A8  0E42               	movlw	66
  2741  0039AA  EC3B  F025         	call	_initTime
  2742                           
  2743                           ;main.c: 27: }
  2744  0039AE  D00B               	goto	l8470
  2745  0039B0                     l8468:
  2746                           
  2747                           ;main.c: 28: else{
  2748                           ;main.c: 29: I2C_Master_Init(10000);
  2749  0039B0  0E10               	movlw	16
  2750  0039B2  0100               	movlb	0	; () banked
  2751  0039B4  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  2752  0039B6  0E27               	movlw	39
  2753  0039B8  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  2754  0039BA  0E00               	movlw	0
  2755  0039BC  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  2756  0039BE  0E00               	movlw	0
  2757  0039C0  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  2758  0039C2  EC08  F021         	call	_I2C_Master_Init	;wreg free
  2759  0039C6                     l8470:
  2760                           
  2761                           ;main.c: 30: }
  2762                           ;main.c: 32: initUI();
  2763  0039C6  EC44  F024         	call	_initUI	;wreg free
  2764                           
  2765                           ;main.c: 33: first = 1;
  2766  0039CA  0E00               	movlw	0
  2767  0039CC  6E6E               	movwf	_first+1,c
  2768  0039CE  0E01               	movlw	1
  2769  0039D0  6E6D               	movwf	_first,c
  2770                           
  2771                           ;main.c: 44: switch(machine_state){
  2772                           
  2773                           ;main.c: 43: while(1){
  2774  0039D2  D017               	goto	l8492
  2775  0039D4                     l8474:
  2776                           
  2777                           ;main.c: 46: UI();
  2778  0039D4  EC65  F004         	call	_UI	;wreg free
  2779                           
  2780                           ;main.c: 47: break;
  2781  0039D8  D014               	goto	l8492
  2782  0039DA                     l8476:
  2783                           
  2784                           ;main.c: 49: sort();
  2785  0039DA  EC2A  F025         	call	_sort	;wreg free
  2786                           
  2787                           ;main.c: 50: break;
  2788  0039DE  D011               	goto	l8492
  2789  0039E0                     l8478:
  2790                           
  2791                           ;main.c: 52: stopSignals();
  2792  0039E0  EC67  F025         	call	_stopSignals	;wreg free
  2793                           
  2794                           ;main.c: 53: logRun();
  2795  0039E4  EC53  F019         	call	_logRun	;wreg free
  2796                           
  2797                           ;main.c: 54: first = 1;
  2798  0039E8  0E00               	movlw	0
  2799  0039EA  6E6E               	movwf	_first+1,c
  2800  0039EC  0E01               	movlw	1
  2801  0039EE  6E6D               	movwf	_first,c
  2802                           
  2803                           ;main.c: 55: UI();
  2804  0039F0  EC65  F004         	call	_UI	;wreg free
  2805                           
  2806                           ;main.c: 56: break;
  2807  0039F4  D006               	goto	l8492
  2808  0039F6                     l8486:
  2809                           
  2810                           ;main.c: 58: Test();
  2811  0039F6  EC83  F01A         	call	_Test	;wreg free
  2812                           
  2813                           ;main.c: 59: break;
  2814  0039FA  D003               	goto	l8492
  2815  0039FC                     l8488:
  2816                           
  2817                           ;main.c: 61: stopSignals();
  2818  0039FC  EC67  F025         	call	_stopSignals	;wreg free
  2819  003A00                     l487:
  2820  003A00  D7FF               	goto	l487
  2821  003A02                     l8492:
  2822  003A02  0100               	movlb	0	; () banked
  2823  003A04  51FC               	movf	_machine_state& (0+255),w,b
  2824                           
  2825                           ; Switch size 1, requested type "space"
  2826                           ; Number of cases is 5, Range of values is 0 to 4
  2827                           ; switch strategies available:
  2828                           ; Name         Instructions Cycles
  2829                           ; simple_byte           16     9 (average)
  2830                           ;	Chosen strategy is simple_byte
  2831  003A06  0A00               	xorlw	0	; case 0
  2832  003A08  B4D8               	btfsc	status,2,c
  2833  003A0A  D7E4               	goto	l8474
  2834  003A0C  0A01               	xorlw	1	; case 1
  2835  003A0E  B4D8               	btfsc	status,2,c
  2836  003A10  D7E4               	goto	l8476
  2837  003A12  0A03               	xorlw	3	; case 2
  2838  003A14  B4D8               	btfsc	status,2,c
  2839  003A16  D7E4               	goto	l8478
  2840  003A18  0A01               	xorlw	1	; case 3
  2841  003A1A  B4D8               	btfsc	status,2,c
  2842  003A1C  D7EC               	goto	l8486
  2843  003A1E  0A07               	xorlw	7	; case 4
  2844  003A20  B4D8               	btfsc	status,2,c
  2845  003A22  D7EC               	goto	l8488
  2846                           
  2847                           ; BSR set to: 0
  2848                           
  2849                           ; BSR set to: 0
  2850  003A24  D7EE               	goto	l8492
  2851  003A26                     __end_of_main:
  2852                           	opt stack 0
  2853                           tblptru	equ	0xFF8
  2854                           tblptrh	equ	0xFF7
  2855                           tblptrl	equ	0xFF6
  2856                           tablat	equ	0xFF5
  2857                           postinc0	equ	0xFEE
  2858                           wreg	equ	0xFE8
  2859                           postdec1	equ	0xFE5
  2860                           fsr1l	equ	0xFE1
  2861                           status	equ	0xFD8
  2862                           
  2863 ;; *************** function _stopSignals *****************
  2864 ;; Defined at:
  2865 ;;		line 70 in file "main.c"
  2866 ;; Parameters:    Size  Location     Type
  2867 ;;		None
  2868 ;; Auto vars:     Size  Location     Type
  2869 ;;		None
  2870 ;; Return value:  Size  Location     Type
  2871 ;;                  1    wreg      void 
  2872 ;; Registers used:
  2873 ;;		wreg, status,2
  2874 ;; Tracked objects:
  2875 ;;		On entry : 0/0
  2876 ;;		On exit  : 0/0
  2877 ;;		Unchanged: 0/0
  2878 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2879 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2880 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2881 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2882 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2883 ;;Total ram usage:        0 bytes
  2884 ;; Hardware stack levels used:    1
  2885 ;; Hardware stack levels required when called:    7
  2886 ;; This function calls:
  2887 ;;		Nothing
  2888 ;; This function is called by:
  2889 ;;		_main
  2890 ;; This function uses a non-reentrant model
  2891 ;;
  2892                           
  2893                           	psect	text1
  2894  004ACE                     __ptext1:
  2895                           	opt stack 0
  2896  004ACE                     _stopSignals:
  2897                           	opt stack 23
  2898                           
  2899                           ;main.c: 71: LATA = 0x00;
  2900                           
  2901                           ; BSR set to: 0
  2902                           ;incstack = 0
  2903  004ACE  0E00               	movlw	0
  2904  004AD0  6E89               	movwf	3977,c	;volatile
  2905                           
  2906                           ;main.c: 72: LATB = 0x00;
  2907  004AD2  0E00               	movlw	0
  2908  004AD4  6E8A               	movwf	3978,c	;volatile
  2909                           
  2910                           ;main.c: 73: LATC = 0x00;
  2911  004AD6  0E00               	movlw	0
  2912  004AD8  6E8B               	movwf	3979,c	;volatile
  2913                           
  2914                           ;main.c: 74: LATD = 0x00;
  2915  004ADA  0E00               	movlw	0
  2916  004ADC  6E8C               	movwf	3980,c	;volatile
  2917                           
  2918                           ;main.c: 75: LATE = 0x00;
  2919  004ADE  0E00               	movlw	0
  2920  004AE0  6E8D               	movwf	3981,c	;volatile
  2921  004AE2  0012               	return		;funcret
  2922  004AE4                     __end_of_stopSignals:
  2923                           	opt stack 0
  2924                           tblptru	equ	0xFF8
  2925                           tblptrh	equ	0xFF7
  2926                           tblptrl	equ	0xFF6
  2927                           tablat	equ	0xFF5
  2928                           postinc0	equ	0xFEE
  2929                           wreg	equ	0xFE8
  2930                           postdec1	equ	0xFE5
  2931                           fsr1l	equ	0xFE1
  2932                           status	equ	0xFD8
  2933                           
  2934 ;; *************** function _sort *****************
  2935 ;; Defined at:
  2936 ;;		line 56 in file "sort.c"
  2937 ;; Parameters:    Size  Location     Type
  2938 ;;		None
  2939 ;; Auto vars:     Size  Location     Type
  2940 ;;		None
  2941 ;; Return value:  Size  Location     Type
  2942 ;;                  1    wreg      void 
  2943 ;; Registers used:
  2944 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2945 ;; Tracked objects:
  2946 ;;		On entry : 0/0
  2947 ;;		On exit  : 0/0
  2948 ;;		Unchanged: 0/0
  2949 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2950 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2951 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2952 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2953 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2954 ;;Total ram usage:        0 bytes
  2955 ;; Hardware stack levels used:    1
  2956 ;; Hardware stack levels required when called:   12
  2957 ;; This function calls:
  2958 ;;		_Distribution
  2959 ;;		_ID
  2960 ;;		_Loading
  2961 ;; This function is called by:
  2962 ;;		_main
  2963 ;; This function uses a non-reentrant model
  2964 ;;
  2965                           
  2966                           	psect	text2
  2967  004A54                     __ptext2:
  2968                           	opt stack 0
  2969  004A54                     _sort:
  2970                           	opt stack 18
  2971                           
  2972                           ;sort.c: 57: if(machine_state == Sorting_state){
  2973                           
  2974                           ;incstack = 0
  2975  004A54  0100               	movlb	0	; () banked
  2976  004A56  05FC               	decf	_machine_state& (0+255),w,b
  2977  004A58  B4D8               	btfsc	status,2,c
  2978                           
  2979                           ; BSR set to: 0
  2980                           ;sort.c: 58: Loading();
  2981  004A5A  ECAC  F013         	call	_Loading	;wreg free
  2982                           
  2983                           ;sort.c: 59: }
  2984                           ;sort.c: 60: if(machine_state == Sorting_state){
  2985  004A5E  0100               	movlb	0	; () banked
  2986  004A60  05FC               	decf	_machine_state& (0+255),w,b
  2987  004A62  B4D8               	btfsc	status,2,c
  2988                           
  2989                           ; BSR set to: 0
  2990                           ;sort.c: 61: ID();
  2991  004A64  ECB9  F017         	call	_ID	;wreg free
  2992                           
  2993                           ;sort.c: 62: }
  2994                           ;sort.c: 63: if(machine_state == Sorting_state){
  2995  004A68  0100               	movlb	0	; () banked
  2996  004A6A  05FC               	decf	_machine_state& (0+255),w,b
  2997  004A6C  A4D8               	btfss	status,2,c
  2998  004A6E  0012               	return	
  2999                           
  3000                           ; BSR set to: 0
  3001                           ;sort.c: 64: Distribution();
  3002  004A70  ECC5  F014         	call	_Distribution	;wreg free
  3003  004A74  0012               	return	
  3004  004A76                     __end_of_sort:
  3005                           	opt stack 0
  3006                           tblptru	equ	0xFF8
  3007                           tblptrh	equ	0xFF7
  3008                           tblptrl	equ	0xFF6
  3009                           tablat	equ	0xFF5
  3010                           postinc0	equ	0xFEE
  3011                           wreg	equ	0xFE8
  3012                           postdec1	equ	0xFE5
  3013                           fsr1l	equ	0xFE1
  3014                           status	equ	0xFD8
  3015                           
  3016 ;; *************** function _Loading *****************
  3017 ;; Defined at:
  3018 ;;		line 68 in file "sort.c"
  3019 ;; Parameters:    Size  Location     Type
  3020 ;;		None
  3021 ;; Auto vars:     Size  Location     Type
  3022 ;;  i               2   56[BANK0 ] int 
  3023 ;;  i               2   54[BANK0 ] int 
  3024 ;;  i               2   58[BANK0 ] int 
  3025 ;;  addr            2   51[BANK0 ] unsigned short 
  3026 ;;  byte1           1   53[BANK0 ] unsigned char 
  3027 ;; Return value:  Size  Location     Type
  3028 ;;                  1    wreg      void 
  3029 ;; Registers used:
  3030 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3031 ;; Tracked objects:
  3032 ;;		On entry : 0/0
  3033 ;;		On exit  : 0/0
  3034 ;;		Unchanged: 0/0
  3035 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3036 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3037 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3038 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3039 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3040 ;;Total ram usage:       11 bytes
  3041 ;; Hardware stack levels used:    1
  3042 ;; Hardware stack levels required when called:   11
  3043 ;; This function calls:
  3044 ;;		_EEPROM_read
  3045 ;;		_EEPROM_write
  3046 ;;		_delay_ms
  3047 ;;		_getIR
  3048 ;;		_getMAG
  3049 ;;		_initGlobalVars
  3050 ;;		_initServos
  3051 ;;		_initSortTimer
  3052 ;;		_lcdInst
  3053 ;;		_readIR
  3054 ;; This function is called by:
  3055 ;;		_sort
  3056 ;; This function uses a non-reentrant model
  3057 ;;
  3058                           
  3059                           	psect	text3
  3060  002758                     __ptext3:
  3061                           	opt stack 0
  3062  002758                     _Loading:
  3063                           	opt stack 18
  3064                           
  3065                           ;sort.c: 69: if(first){
  3066                           
  3067                           ;incstack = 0
  3068  002758  506D               	movf	_first,w,c
  3069  00275A  106E               	iorwf	_first+1,w,c
  3070  00275C  B4D8               	btfsc	status,2,c
  3071  00275E  D074               	goto	l6658
  3072                           
  3073                           ;sort.c: 70: initGlobalVars();
  3074  002760  EC6C  F020         	call	_initGlobalVars	;wreg free
  3075                           
  3076                           ;sort.c: 71: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  3077  002764  0E01               	movlw	1
  3078  002766  EC98  F025         	call	_lcdInst
  3079  00276A  0E68               	movlw	104
  3080  00276C  0100               	movlb	0	; () banked
  3081  00276E  6FB1               	movwf	??_Loading& (0+255),b
  3082  002770  0EE4               	movlw	228
  3083  002772                     u7577:
  3084  002772  2EE8               	decfsz	wreg,f,c
  3085  002774  D7FE               	bra	u7577
  3086  002776  2FB1               	decfsz	??_Loading& (0+255),f,b
  3087  002778  D7FC               	bra	u7577
  3088  00277A  F000               	nop	
  3089                           
  3090                           ;sort.c: 72: initSortTimer();
  3091  00277C  ECD0  F01D         	call	_initSortTimer	;wreg free
  3092                           
  3093                           ;sort.c: 73: LATCbits.LATC5 = 1;
  3094  002780  8A8B               	bsf	3979,5,c	;volatile
  3095                           
  3096                           ;sort.c: 78: sel = EEPROM_read(0);
  3097  002782  0E00               	movlw	0
  3098  002784  0100               	movlb	0	; () banked
  3099  002786  6F81               	movwf	(EEPROM_read@address+1)& (0+255),b
  3100  002788  0E00               	movlw	0
  3101  00278A  6F80               	movwf	EEPROM_read@address& (0+255),b
  3102  00278C  EC5B  F025         	call	_EEPROM_read	;wreg free
  3103  002790  0100               	movlb	0	; () banked
  3104  002792  6FFD               	movwf	_sel& (0+255),b
  3105                           
  3106                           ; BSR set to: 0
  3107                           ;sort.c: 79: unsigned short addr = 1 + 11 * sel;
  3108  002794  0100               	movlb	0	; () banked
  3109  002796  51FD               	movf	_sel& (0+255),w,b
  3110  002798  0D0B               	mullw	11
  3111  00279A  0E01               	movlw	1
  3112  00279C  24F3               	addwf	prodl,w,c
  3113  00279E  0100               	movlb	0	; () banked
  3114  0027A0  6FB3               	movwf	Loading@addr& (0+255),b
  3115  0027A2  0E00               	movlw	0
  3116  0027A4  20F4               	addwfc	prodh,w,c
  3117  0027A6  0100               	movlb	0	; () banked
  3118  0027A8  6FB4               	movwf	(Loading@addr+1)& (0+255),b
  3119                           
  3120                           ; BSR set to: 0
  3121                           ;sort.c: 80: unsigned char byte1 = 0b01111111;
  3122  0027AA  0E7F               	movlw	127
  3123  0027AC  0100               	movlb	0	; () banked
  3124  0027AE  6FB5               	movwf	Loading@byte1& (0+255),b
  3125                           
  3126                           ; BSR set to: 0
  3127                           ;sort.c: 81: EEPROM_write(addr, byte1);
  3128  0027B0  C0B3  F0AB         	movff	Loading@addr,EEPROM_write@address
  3129  0027B4  C0B4  F0AC         	movff	Loading@addr+1,EEPROM_write@address+1
  3130  0027B8  C0B5  F0AD         	movff	Loading@byte1,EEPROM_write@data
  3131  0027BC  EC0D  F01B         	call	_EEPROM_write	;wreg free
  3132                           
  3133                           ;sort.c: 84: LATAbits.LATA5 = 0;
  3134  0027C0  9A89               	bcf	3977,5,c	;volatile
  3135                           
  3136                           ;sort.c: 86: for(int i=0; i<46; i++){
  3137  0027C2  0E00               	movlw	0
  3138  0027C4  0100               	movlb	0	; () banked
  3139  0027C6  6FBB               	movwf	(Loading@i+1)& (0+255),b
  3140  0027C8  0E00               	movlw	0
  3141  0027CA  6FBA               	movwf	Loading@i& (0+255),b
  3142                           
  3143                           ; BSR set to: 0
  3144  0027CC  0100               	movlb	0	; () banked
  3145  0027CE  BFBB               	btfsc	(Loading@i+1)& (0+255),7,b
  3146  0027D0  D008               	goto	l6646
  3147  0027D2  0100               	movlb	0	; () banked
  3148  0027D4  51BB               	movf	(Loading@i+1)& (0+255),w,b
  3149  0027D6  E126               	bnz	l732
  3150  0027D8  0E2E               	movlw	46
  3151  0027DA  0100               	movlb	0	; () banked
  3152  0027DC  5DBA               	subwf	Loading@i& (0+255),w,b
  3153  0027DE  B0D8               	btfsc	status,0,c
  3154  0027E0  D021               	goto	l732
  3155  0027E2                     l6646:
  3156                           
  3157                           ; BSR set to: 0
  3158                           ;sort.c: 87: LATAbits.LATA5 = !LATAbits.LATA5;
  3159  0027E2  BA89               	btfsc	3977,5,c	;volatile
  3160  0027E4  D004               	goto	u5100
  3161  0027E6  0100               	movlb	0	; () banked
  3162  0027E8  6BB1               	clrf	??_Loading& (0+255),b
  3163  0027EA  2BB1               	incf	??_Loading& (0+255),f,b
  3164  0027EC  D002               	goto	u5118
  3165  0027EE                     u5100:
  3166  0027EE  0100               	movlb	0	; () banked
  3167  0027F0  6BB1               	clrf	??_Loading& (0+255),b
  3168  0027F2                     u5118:
  3169  0027F2  0100               	movlb	0	; () banked
  3170  0027F4  3BB1               	swapf	??_Loading& (0+255),f,b
  3171  0027F6  47B1               	rlncf	??_Loading& (0+255),f,b
  3172  0027F8  5089               	movf	3977,w,c	;volatile
  3173  0027FA  0100               	movlb	0	; () banked
  3174  0027FC  19B1               	xorwf	??_Loading& (0+255),w,b
  3175  0027FE  0BDF               	andlw	-33
  3176  002800  19B1               	xorwf	??_Loading& (0+255),w,b
  3177  002802  6E89               	movwf	3977,c	;volatile
  3178                           
  3179                           ; BSR set to: 0
  3180                           ;sort.c: 88: delay_ms(45-i);
  3181  002804  0100               	movlb	0	; () banked
  3182  002806  51BA               	movf	Loading@i& (0+255),w,b
  3183  002808  0800               	sublw	0
  3184  00280A  0F2D               	addlw	45
  3185  00280C  ECCA  F024         	call	_delay_ms
  3186  002810  0100               	movlb	0	; () banked
  3187  002812  4BBA               	infsnz	Loading@i& (0+255),f,b
  3188  002814  2BBB               	incf	(Loading@i+1)& (0+255),f,b
  3189                           
  3190                           ; BSR set to: 0
  3191  002816  0100               	movlb	0	; () banked
  3192  002818  BFBB               	btfsc	(Loading@i+1)& (0+255),7,b
  3193  00281A  D7E3               	goto	l6646
  3194  00281C  0100               	movlb	0	; () banked
  3195  00281E  51BB               	movf	(Loading@i+1)& (0+255),w,b
  3196  002820  E101               	bnz	u5120
  3197  002822  D7DA               	goto	L1
  3198  002824                     u5120:
  3199  002824                     l732:
  3200                           
  3201                           ; BSR set to: 0
  3202                           ;sort.c: 89: }
  3203                           ;sort.c: 90: LATAbits.LATA5 = 1;
  3204  002824  8A89               	bsf	3977,5,c	;volatile
  3205                           
  3206                           ; BSR set to: 0
  3207                           ;sort.c: 93: initServos();
  3208  002826  EC94  F021         	call	_initServos	;wreg free
  3209                           
  3210                           ;sort.c: 94: _delay((unsigned long)((5000)*(32000000/4000.0)));
  3211  00282A  0ECB               	movlw	203
  3212  00282C  0100               	movlb	0	; () banked
  3213  00282E  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3214  002830  0EEC               	movlw	236
  3215  002832  0100               	movlb	0	; () banked
  3216  002834  6FB1               	movwf	??_Loading& (0+255),b
  3217  002836  0E84               	movlw	132
  3218  002838                     u7587:
  3219  002838  2EE8               	decfsz	wreg,f,c
  3220  00283A  D7FE               	bra	u7587
  3221  00283C  2FB1               	decfsz	??_Loading& (0+255),f,b
  3222  00283E  D7FC               	bra	u7587
  3223  002840  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3224  002842  D7FA               	bra	u7587
  3225  002844  F000               	nop	
  3226                           
  3227                           ;sort.c: 95: }
  3228  002846  0012               	return	
  3229  002848                     l6658:
  3230                           
  3231                           ;sort.c: 96: else{
  3232                           ;sort.c: 99: if(!f_loadingNewCan){
  3233  002848  0100               	movlb	0	; () banked
  3234  00284A  51EA               	movf	_f_loadingNewCan& (0+255),w,b
  3235  00284C  0100               	movlb	0	; () banked
  3236  00284E  11EB               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  3237  002850  A4D8               	btfss	status,2,c
  3238  002852  D018               	goto	l6674
  3239                           
  3240                           ; BSR set to: 0
  3241                           ;sort.c: 101: getIR();
  3242  002854  ECFA  F01F         	call	_getIR	;wreg free
  3243                           
  3244                           ;sort.c: 103: if(!f_loadingNewCan){
  3245  002858  0100               	movlb	0	; () banked
  3246  00285A  51EA               	movf	_f_loadingNewCan& (0+255),w,b
  3247  00285C  0100               	movlb	0	; () banked
  3248  00285E  11EB               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  3249  002860  B4D8               	btfsc	status,2,c
  3250  002862  0012               	return	
  3251                           
  3252                           ; BSR set to: 0
  3253                           ;sort.c: 107: else{
  3254                           ;sort.c: 108: count_total++;
  3255                           
  3256                           ; BSR set to: 0
  3257                           
  3258                           ; BSR set to: 0
  3259                           ;sort.c: 105: }
  3260                           
  3261                           ; BSR set to: 0
  3262                           ;sort.c: 104: return;
  3263  002864  0100               	movlb	0	; () banked
  3264  002866  4BFE               	infsnz	_count_total& (0+255),f,b
  3265  002868  2BFF               	incf	(_count_total+1)& (0+255),f,b
  3266                           
  3267                           ; BSR set to: 0
  3268                           ;sort.c: 109: if(count_total == 12){
  3269  00286A  0E0C               	movlw	12
  3270  00286C  0100               	movlb	0	; () banked
  3271  00286E  19FE               	xorwf	_count_total& (0+255),w,b
  3272  002870  0100               	movlb	0	; () banked
  3273  002872  11FF               	iorwf	(_count_total+1)& (0+255),w,b
  3274  002874  A4D8               	btfss	status,2,c
  3275  002876  0012               	return	
  3276                           
  3277                           ; BSR set to: 0
  3278                           ;sort.c: 110: f_lastCan = 1;
  3279  002878  0E00               	movlw	0
  3280  00287A  0100               	movlb	0	; () banked
  3281  00287C  6FE9               	movwf	(_f_lastCan+1)& (0+255),b
  3282  00287E  0E01               	movlw	1
  3283  002880  6FE8               	movwf	_f_lastCan& (0+255),b
  3284                           
  3285                           ; BSR set to: 0
  3286                           ;sort.c: 111: }
  3287                           ;sort.c: 112: }
  3288                           ;sort.c: 113: }
  3289                           
  3290                           ; BSR set to: 0
  3291  002882  0012               	return	
  3292  002884                     l6674:
  3293                           
  3294                           ; BSR set to: 0
  3295                           ;sort.c: 116: else if(f_ID_receive){
  3296  002884  5067               	movf	_f_ID_receive,w,c
  3297  002886  1068               	iorwf	_f_ID_receive+1,w,c
  3298  002888  B4D8               	btfsc	status,2,c
  3299  00288A  0012               	return	
  3300                           
  3301                           ; BSR set to: 0
  3302                           ;sort.c: 117: f_loadingNewCan = 0;
  3303  00288C  0E00               	movlw	0
  3304  00288E  0100               	movlb	0	; () banked
  3305  002890  6FEB               	movwf	(_f_loadingNewCan+1)& (0+255),b
  3306  002892  0E00               	movlw	0
  3307  002894  6FEA               	movwf	_f_loadingNewCan& (0+255),b
  3308                           
  3309                           ; BSR set to: 0
  3310                           ;sort.c: 118: _delay((unsigned long)((1500)*(32000000/4000.0)));
  3311  002896  0E3D               	movlw	61
  3312  002898  0100               	movlb	0	; () banked
  3313  00289A  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3314  00289C  0EE1               	movlw	225
  3315  00289E  0100               	movlb	0	; () banked
  3316  0028A0  6FB1               	movwf	??_Loading& (0+255),b
  3317  0028A2  0E3F               	movlw	63
  3318  0028A4                     u7597:
  3319  0028A4  2EE8               	decfsz	wreg,f,c
  3320  0028A6  D7FE               	bra	u7597
  3321  0028A8  2FB1               	decfsz	??_Loading& (0+255),f,b
  3322  0028AA  D7FC               	bra	u7597
  3323  0028AC  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3324  0028AE  D7FA               	bra	u7597
  3325  0028B0  D000               	nop2	
  3326                           
  3327                           ;sort.c: 119: LATAbits.LATA5 = 0;
  3328  0028B2  9A89               	bcf	3977,5,c	;volatile
  3329                           
  3330                           ;sort.c: 123: getMAG();
  3331  0028B4  EC3A  F023         	call	_getMAG	;wreg free
  3332                           
  3333                           ;sort.c: 124: sensor_outputs[0] = MAG_signal;
  3334  0028B8  C0E0  F0DA         	movff	_MAG_signal,_sensor_outputs
  3335  0028BC  C0E1  F0DB         	movff	_MAG_signal+1,_sensor_outputs+1
  3336                           
  3337                           ;sort.c: 126: if(sensor_outputs[0]){
  3338  0028C0  0100               	movlb	0	; () banked
  3339  0028C2  51DA               	movf	_sensor_outputs& (0+255),w,b
  3340  0028C4  0100               	movlb	0	; () banked
  3341  0028C6  11DB               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  3342  0028C8  B4D8               	btfsc	status,2,c
  3343  0028CA  D01D               	goto	l6700
  3344                           
  3345                           ; BSR set to: 0
  3346                           ;sort.c: 127: for(int i = 0; i<2500; i++){
  3347  0028CC  0E00               	movlw	0
  3348  0028CE  0100               	movlb	0	; () banked
  3349  0028D0  6FB7               	movwf	(Loading@i_1099+1)& (0+255),b
  3350  0028D2  0E00               	movlw	0
  3351  0028D4  6FB6               	movwf	Loading@i_1099& (0+255),b
  3352  0028D6                     l6690:
  3353                           
  3354                           ; BSR set to: 0
  3355  0028D6  0100               	movlb	0	; () banked
  3356  0028D8  BFB7               	btfsc	(Loading@i_1099+1)& (0+255),7,b
  3357  0028DA  D008               	goto	l742
  3358  0028DC  0EC4               	movlw	196
  3359  0028DE  0100               	movlb	0	; () banked
  3360  0028E0  5DB6               	subwf	Loading@i_1099& (0+255),w,b
  3361  0028E2  0E09               	movlw	9
  3362  0028E4  0100               	movlb	0	; () banked
  3363  0028E6  59B7               	subwfb	(Loading@i_1099+1)& (0+255),w,b
  3364  0028E8  B0D8               	btfsc	status,0,c
  3365  0028EA  D02A               	goto	l6712
  3366  0028EC                     l742:
  3367                           
  3368                           ; BSR set to: 0
  3369                           ;sort.c: 128: LATAbits.LATA4 = 1;
  3370  0028EC  8889               	bsf	3977,4,c	;volatile
  3371                           
  3372                           ; BSR set to: 0
  3373                           ;sort.c: 129: _delay((unsigned long)((70)*(32000000/4000000.0)));
  3374  0028EE  0EBA               	movlw	186
  3375  0028F0                     u7607:
  3376  0028F0  2EE8               	decfsz	wreg,f,c
  3377  0028F2  D7FE               	bra	u7607
  3378  0028F4  D000               	nop2	
  3379                           
  3380                           ;sort.c: 130: LATAbits.LATA4 = 0;
  3381  0028F6  9889               	bcf	3977,4,c	;volatile
  3382                           
  3383                           ;sort.c: 131: _delay((unsigned long)((30)*(32000000/4000000.0)));
  3384  0028F8  0E50               	movlw	80
  3385  0028FA                     u7617:
  3386  0028FA  2EE8               	decfsz	wreg,f,c
  3387  0028FC  D7FE               	bra	u7617
  3388  0028FE  0100               	movlb	0	; () banked
  3389  002900  4BB6               	infsnz	Loading@i_1099& (0+255),f,b
  3390  002902  2BB7               	incf	(Loading@i_1099+1)& (0+255),f,b
  3391  002904  D7E8               	goto	l6690
  3392  002906                     l6700:
  3393                           
  3394                           ; BSR set to: 0
  3395                           ;sort.c: 134: else{
  3396                           ;sort.c: 135: for(int i = 0; i<2500; i++){
  3397  002906  0E00               	movlw	0
  3398  002908  0100               	movlb	0	; () banked
  3399  00290A  6FB9               	movwf	(Loading@i_1100+1)& (0+255),b
  3400  00290C  0E00               	movlw	0
  3401  00290E  6FB8               	movwf	Loading@i_1100& (0+255),b
  3402  002910                     l6702:
  3403                           
  3404                           ; BSR set to: 0
  3405  002910  0100               	movlb	0	; () banked
  3406  002912  BFB9               	btfsc	(Loading@i_1100+1)& (0+255),7,b
  3407  002914  D008               	goto	l745
  3408  002916  0EC4               	movlw	196
  3409  002918  0100               	movlb	0	; () banked
  3410  00291A  5DB8               	subwf	Loading@i_1100& (0+255),w,b
  3411  00291C  0E09               	movlw	9
  3412  00291E  0100               	movlb	0	; () banked
  3413  002920  59B9               	subwfb	(Loading@i_1100+1)& (0+255),w,b
  3414  002922  B0D8               	btfsc	status,0,c
  3415  002924  D00D               	goto	l6712
  3416  002926                     l745:
  3417                           
  3418                           ; BSR set to: 0
  3419                           ;sort.c: 136: LATAbits.LATA4 = 1;
  3420  002926  8889               	bsf	3977,4,c	;volatile
  3421                           
  3422                           ; BSR set to: 0
  3423                           ;sort.c: 137: _delay((unsigned long)((58)*(32000000/4000000.0)));
  3424  002928  0E9A               	movlw	154
  3425  00292A                     u7627:
  3426  00292A  2EE8               	decfsz	wreg,f,c
  3427  00292C  D7FE               	bra	u7627
  3428  00292E  D000               	nop2	
  3429                           
  3430                           ;sort.c: 138: LATAbits.LATA4 = 0;
  3431  002930  9889               	bcf	3977,4,c	;volatile
  3432                           
  3433                           ;sort.c: 139: _delay((unsigned long)((42)*(32000000/4000000.0)));
  3434  002932  0E70               	movlw	112
  3435  002934                     u7637:
  3436  002934  2EE8               	decfsz	wreg,f,c
  3437  002936  D7FE               	bra	u7637
  3438  002938  0100               	movlb	0	; () banked
  3439  00293A  4BB8               	infsnz	Loading@i_1100& (0+255),f,b
  3440  00293C  2BB9               	incf	(Loading@i_1100+1)& (0+255),f,b
  3441  00293E  D7E8               	goto	l6702
  3442  002940                     l6712:
  3443                           
  3444                           ; BSR set to: 0
  3445                           ;sort.c: 140: }
  3446                           ;sort.c: 141: }
  3447                           ;sort.c: 143: _delay((unsigned long)((50)*(32000000/4000.0)));
  3448  002940  0E03               	movlw	3
  3449  002942  0100               	movlb	0	; () banked
  3450  002944  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3451  002946  0E08               	movlw	8
  3452  002948  0100               	movlb	0	; () banked
  3453  00294A  6FB1               	movwf	??_Loading& (0+255),b
  3454  00294C  0E77               	movlw	119
  3455  00294E                     u7647:
  3456  00294E  2EE8               	decfsz	wreg,f,c
  3457  002950  D7FE               	bra	u7647
  3458  002952  2FB1               	decfsz	??_Loading& (0+255),f,b
  3459  002954  D7FC               	bra	u7647
  3460  002956  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3461  002958  D7FA               	bra	u7647
  3462                           
  3463                           ;sort.c: 145: readIR();
  3464  00295A  EC3C  F022         	call	_readIR	;wreg free
  3465                           
  3466                           ;sort.c: 146: if(IR_signal==1){
  3467  00295E  0100               	movlb	0	; () banked
  3468  002960  05DE               	decf	_IR_signal& (0+255),w,b
  3469  002962  0100               	movlb	0	; () banked
  3470  002964  11DF               	iorwf	(_IR_signal+1)& (0+255),w,b
  3471  002966  A4D8               	btfss	status,2,c
  3472  002968  D00B               	goto	l6724
  3473                           
  3474                           ; BSR set to: 0
  3475                           ;sort.c: 147: LATAbits.LATA4 = 1;
  3476  00296A  8889               	bsf	3977,4,c	;volatile
  3477                           
  3478                           ; BSR set to: 0
  3479                           ;sort.c: 148: _delay((unsigned long)((250)*(32000000/4000000.0)));
  3480  00296C  0E03               	movlw	3
  3481  00296E  0100               	movlb	0	; () banked
  3482  002970  6FB1               	movwf	??_Loading& (0+255),b
  3483  002972  0E97               	movlw	151
  3484  002974                     u7657:
  3485  002974  2EE8               	decfsz	wreg,f,c
  3486  002976  D7FE               	bra	u7657
  3487  002978  2FB1               	decfsz	??_Loading& (0+255),f,b
  3488  00297A  D7FC               	bra	u7657
  3489  00297C  D000               	nop2	
  3490                           
  3491                           ;sort.c: 149: LATAbits.LATA4 = 0;
  3492  00297E  9889               	bcf	3977,4,c	;volatile
  3493  002980                     l6724:
  3494                           
  3495                           ;sort.c: 150: }
  3496                           ;sort.c: 151: f_can_coming_to_ID = 1;
  3497  002980  0E00               	movlw	0
  3498  002982  6E6A               	movwf	_f_can_coming_to_ID+1,c
  3499  002984  0E01               	movlw	1
  3500  002986  6E69               	movwf	_f_can_coming_to_ID,c
  3501  002988  0012               	return	
  3502  00298A                     __end_of_Loading:
  3503                           	opt stack 0
  3504                           tblptru	equ	0xFF8
  3505                           tblptrh	equ	0xFF7
  3506                           tblptrl	equ	0xFF6
  3507                           tablat	equ	0xFF5
  3508                           prodh	equ	0xFF4
  3509                           prodl	equ	0xFF3
  3510                           postinc0	equ	0xFEE
  3511                           wreg	equ	0xFE8
  3512                           postdec1	equ	0xFE5
  3513                           fsr1l	equ	0xFE1
  3514                           status	equ	0xFD8
  3515                           
  3516 ;; *************** function _initSortTimer *****************
  3517 ;; Defined at:
  3518 ;;		line 309 in file "sort.c"
  3519 ;; Parameters:    Size  Location     Type
  3520 ;;		None
  3521 ;; Auto vars:     Size  Location     Type
  3522 ;;  i               2    8[BANK0 ] int 
  3523 ;; Return value:  Size  Location     Type
  3524 ;;                  1    wreg      void 
  3525 ;; Registers used:
  3526 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3527 ;; Tracked objects:
  3528 ;;		On entry : 0/0
  3529 ;;		On exit  : 0/0
  3530 ;;		Unchanged: 0/0
  3531 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3532 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3533 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3534 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3535 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3536 ;;Total ram usage:        5 bytes
  3537 ;; Hardware stack levels used:    1
  3538 ;; Hardware stack levels required when called:   10
  3539 ;; This function calls:
  3540 ;;		_getRTC
  3541 ;; This function is called by:
  3542 ;;		_Loading
  3543 ;; This function uses a non-reentrant model
  3544 ;;
  3545                           
  3546                           	psect	text4
  3547  003BA0                     __ptext4:
  3548                           	opt stack 0
  3549  003BA0                     _initSortTimer:
  3550                           	opt stack 18
  3551                           
  3552                           ;sort.c: 311: getRTC();
  3553                           
  3554                           ;incstack = 0
  3555  003BA0  ECBC  F01E         	call	_getRTC	;wreg free
  3556                           
  3557                           ;sort.c: 312: for(int i = 0; i < 7; i++){
  3558  003BA4  0E00               	movlw	0
  3559  003BA6  0100               	movlb	0	; () banked
  3560  003BA8  6F89               	movwf	(initSortTimer@i+1)& (0+255),b
  3561  003BAA  0E00               	movlw	0
  3562  003BAC  6F88               	movwf	initSortTimer@i& (0+255),b
  3563  003BAE                     l6230:
  3564                           
  3565                           ; BSR set to: 0
  3566  003BAE  0100               	movlb	0	; () banked
  3567  003BB0  BF89               	btfsc	(initSortTimer@i+1)& (0+255),7,b
  3568  003BB2  D008               	goto	l6234
  3569  003BB4  0100               	movlb	0	; () banked
  3570  003BB6  5189               	movf	(initSortTimer@i+1)& (0+255),w,b
  3571  003BB8  E140               	bnz	l6240
  3572  003BBA  0E07               	movlw	7
  3573  003BBC  0100               	movlb	0	; () banked
  3574  003BBE  5D88               	subwf	initSortTimer@i& (0+255),w,b
  3575  003BC0  B0D8               	btfsc	status,0,c
  3576  003BC2  D03B               	goto	l6240
  3577  003BC4                     l6234:
  3578                           
  3579                           ; BSR set to: 0
  3580                           ;sort.c: 313: startTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  3581  003BC4  0E24               	movlw	low _time
  3582  003BC6  0100               	movlb	0	; () banked
  3583  003BC8  2588               	addwf	initSortTimer@i& (0+255),w,b
  3584  003BCA  6ED9               	movwf	fsr2l,c
  3585  003BCC  0E01               	movlw	high _time
  3586  003BCE  0100               	movlb	0	; () banked
  3587  003BD0  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  3588  003BD2  6EDA               	movwf	fsr2h,c
  3589  003BD4  50DF               	movf	indf2,w,c
  3590  003BD6  0100               	movlb	0	; () banked
  3591  003BD8  6F85               	movwf	??_initSortTimer& (0+255),b
  3592  003BDA  0100               	movlb	0	; () banked
  3593  003BDC  3B85               	swapf	??_initSortTimer& (0+255),f,b
  3594  003BDE  0E0F               	movlw	15
  3595  003BE0  1785               	andwf	??_initSortTimer& (0+255),f,b
  3596  003BE2  0E0F               	movlw	15
  3597  003BE4  0100               	movlb	0	; () banked
  3598  003BE6  1785               	andwf	??_initSortTimer& (0+255),f,b
  3599  003BE8  0100               	movlb	0	; () banked
  3600  003BEA  5185               	movf	??_initSortTimer& (0+255),w,b
  3601  003BEC  0D0A               	mullw	10
  3602  003BEE  0E24               	movlw	low _time
  3603  003BF0  0100               	movlb	0	; () banked
  3604  003BF2  2588               	addwf	initSortTimer@i& (0+255),w,b
  3605  003BF4  6ED9               	movwf	fsr2l,c
  3606  003BF6  0E01               	movlw	high _time
  3607  003BF8  0100               	movlb	0	; () banked
  3608  003BFA  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  3609  003BFC  6EDA               	movwf	fsr2h,c
  3610  003BFE  50DF               	movf	indf2,w,c
  3611  003C00  0B0F               	andlw	15
  3612  003C02  0100               	movlb	0	; () banked
  3613  003C04  6F86               	movwf	(??_initSortTimer+1)& (0+255),b
  3614  003C06  6B87               	clrf	(??_initSortTimer+2)& (0+255),b
  3615  003C08  50F3               	movf	prodl,w,c
  3616  003C0A  0100               	movlb	0	; () banked
  3617  003C0C  2786               	addwf	(??_initSortTimer+1)& (0+255),f,b
  3618  003C0E  50F4               	movf	prodh,w,c
  3619  003C10  0100               	movlb	0	; () banked
  3620  003C12  2387               	addwfc	(??_initSortTimer+2)& (0+255),f,b
  3621  003C14  90D8               	bcf	status,0,c
  3622  003C16  0100               	movlb	0	; () banked
  3623  003C18  3588               	rlcf	initSortTimer@i& (0+255),w,b
  3624  003C1A  6ED9               	movwf	fsr2l,c
  3625  003C1C  0100               	movlb	0	; () banked
  3626  003C1E  3589               	rlcf	(initSortTimer@i+1)& (0+255),w,b
  3627  003C20  6EDA               	movwf	fsr2h,c
  3628  003C22  0E0E               	movlw	low _startTime
  3629  003C24  26D9               	addwf	fsr2l,f,c
  3630  003C26  0E01               	movlw	high _startTime
  3631  003C28  22DA               	addwfc	fsr2h,f,c
  3632  003C2A  C086  FFDE         	movff	??_initSortTimer+1,postinc2
  3633  003C2E  C087  FFDD         	movff	??_initSortTimer+2,postdec2
  3634                           
  3635                           ; BSR set to: 0
  3636  003C32  0100               	movlb	0	; () banked
  3637  003C34  4B88               	infsnz	initSortTimer@i& (0+255),f,b
  3638  003C36  2B89               	incf	(initSortTimer@i+1)& (0+255),f,b
  3639  003C38  D7BA               	goto	l6230
  3640  003C3A                     l6240:
  3641                           
  3642                           ; BSR set to: 0
  3643                           ;sort.c: 314: }
  3644                           ;sort.c: 316: T0CON = 0b00010111;
  3645  003C3A  0E17               	movlw	23
  3646  003C3C  6ED5               	movwf	4053,c	;volatile
  3647                           
  3648                           ;sort.c: 325: TMR0H = 0b10000101;
  3649  003C3E  0E85               	movlw	133
  3650  003C40  6ED7               	movwf	4055,c	;volatile
  3651                           
  3652                           ;sort.c: 326: TMR0L = 0b11101110;
  3653  003C42  0EEE               	movlw	238
  3654  003C44  6ED6               	movwf	4054,c	;volatile
  3655                           
  3656                           ; BSR set to: 0
  3657                           ;sort.c: 327: TMR0ON = 1;
  3658  003C46  8ED5               	bsf	4053,7,c	;volatile
  3659                           
  3660                           ; BSR set to: 0
  3661  003C48  0012               	return		;funcret
  3662  003C4A                     __end_of_initSortTimer:
  3663                           	opt stack 0
  3664                           tblptru	equ	0xFF8
  3665                           tblptrh	equ	0xFF7
  3666                           tblptrl	equ	0xFF6
  3667                           tablat	equ	0xFF5
  3668                           prodh	equ	0xFF4
  3669                           prodl	equ	0xFF3
  3670                           postinc0	equ	0xFEE
  3671                           wreg	equ	0xFE8
  3672                           postdec1	equ	0xFE5
  3673                           fsr1l	equ	0xFE1
  3674                           indf2	equ	0xFDF
  3675                           postinc2	equ	0xFDE
  3676                           postdec2	equ	0xFDD
  3677                           fsr2h	equ	0xFDA
  3678                           fsr2l	equ	0xFD9
  3679                           status	equ	0xFD8
  3680                           
  3681 ;; *************** function _initGlobalVars *****************
  3682 ;; Defined at:
  3683 ;;		line 290 in file "sort.c"
  3684 ;; Parameters:    Size  Location     Type
  3685 ;;		None
  3686 ;; Auto vars:     Size  Location     Type
  3687 ;;		None
  3688 ;; Return value:  Size  Location     Type
  3689 ;;                  1    wreg      void 
  3690 ;; Registers used:
  3691 ;;		wreg, status,2
  3692 ;; Tracked objects:
  3693 ;;		On entry : 0/0
  3694 ;;		On exit  : 0/0
  3695 ;;		Unchanged: 0/0
  3696 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3697 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3698 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3699 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3700 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3701 ;;Total ram usage:        0 bytes
  3702 ;; Hardware stack levels used:    1
  3703 ;; Hardware stack levels required when called:    7
  3704 ;; This function calls:
  3705 ;;		Nothing
  3706 ;; This function is called by:
  3707 ;;		_Loading
  3708 ;; This function uses a non-reentrant model
  3709 ;;
  3710                           
  3711                           	psect	text5
  3712  0040D8                     __ptext5:
  3713                           	opt stack 0
  3714  0040D8                     _initGlobalVars:
  3715                           	opt stack 21
  3716                           
  3717                           ;sort.c: 292: first = 0;
  3718                           
  3719                           ; BSR set to: 0
  3720                           ;incstack = 0
  3721  0040D8  0E00               	movlw	0
  3722  0040DA  6E6E               	movwf	_first+1,c
  3723  0040DC  0E00               	movlw	0
  3724  0040DE  6E6D               	movwf	_first,c
  3725                           
  3726                           ;sort.c: 295: f_loadingNewCan = 0;
  3727  0040E0  0E00               	movlw	0
  3728  0040E2  0100               	movlb	0	; () banked
  3729  0040E4  6FEB               	movwf	(_f_loadingNewCan+1)& (0+255),b
  3730  0040E6  0E00               	movlw	0
  3731  0040E8  6FEA               	movwf	_f_loadingNewCan& (0+255),b
  3732                           
  3733                           ;sort.c: 296: f_lastCan = 0;
  3734  0040EA  0E00               	movlw	0
  3735  0040EC  0100               	movlb	0	; () banked
  3736  0040EE  6FE9               	movwf	(_f_lastCan+1)& (0+255),b
  3737  0040F0  0E00               	movlw	0
  3738  0040F2  6FE8               	movwf	_f_lastCan& (0+255),b
  3739                           
  3740                           ;sort.c: 297: f_ID_receive = 1;
  3741  0040F4  0E00               	movlw	0
  3742  0040F6  6E68               	movwf	_f_ID_receive+1,c
  3743  0040F8  0E01               	movlw	1
  3744  0040FA  6E67               	movwf	_f_ID_receive,c
  3745                           
  3746                           ;sort.c: 298: f_can_coming_to_ID = 0;
  3747  0040FC  0E00               	movlw	0
  3748  0040FE  6E6A               	movwf	_f_can_coming_to_ID+1,c
  3749  004100  0E00               	movlw	0
  3750  004102  6E69               	movwf	_f_can_coming_to_ID,c
  3751                           
  3752                           ;sort.c: 299: f_can_coming_to_distribution = 0;
  3753  004104  0E00               	movlw	0
  3754  004106  6E6C               	movwf	_f_can_coming_to_distribution+1,c
  3755  004108  0E00               	movlw	0
  3756  00410A  6E6B               	movwf	_f_can_coming_to_distribution,c
  3757                           
  3758                           ;sort.c: 300: f_can_distributed = 0;
  3759  00410C  0E00               	movlw	0
  3760  00410E  0101               	movlb	1	; () banked
  3761  004110  6F30               	movwf	(_f_can_distributed+1)& (0+255),b
  3762  004112  0E00               	movlw	0
  3763  004114  6F2F               	movwf	_f_can_distributed& (0+255),b
  3764                           
  3765                           ;sort.c: 303: count_total = 0;
  3766  004116  0E00               	movlw	0
  3767  004118  0100               	movlb	0	; () banked
  3768  00411A  6FFF               	movwf	(_count_total+1)& (0+255),b
  3769  00411C  0E00               	movlw	0
  3770  00411E  6FFE               	movwf	_count_total& (0+255),b
  3771                           
  3772                           ;sort.c: 304: count_pop_no_tab = 0;
  3773  004120  0E00               	movlw	0
  3774  004122  6E5E               	movwf	_count_pop_no_tab+1,c
  3775  004124  0E00               	movlw	0
  3776  004126  6E5D               	movwf	_count_pop_no_tab,c
  3777                           
  3778                           ;sort.c: 305: count_pop_w_tab = 0;
  3779  004128  0E00               	movlw	0
  3780  00412A  6E60               	movwf	_count_pop_w_tab+1,c
  3781  00412C  0E00               	movlw	0
  3782  00412E  6E5F               	movwf	_count_pop_w_tab,c
  3783                           
  3784                           ;sort.c: 306: count_can_w_lab = 0;
  3785  004130  0E00               	movlw	0
  3786  004132  0101               	movlb	1	; () banked
  3787  004134  6F2E               	movwf	(_count_can_w_lab+1)& (0+255),b
  3788  004136  0E00               	movlw	0
  3789  004138  6F2D               	movwf	_count_can_w_lab& (0+255),b
  3790                           
  3791                           ;sort.c: 307: count_can_no_lab = 0;
  3792  00413A  0E00               	movlw	0
  3793  00413C  0101               	movlb	1	; () banked
  3794  00413E  6F2C               	movwf	(_count_can_no_lab+1)& (0+255),b
  3795  004140  0E00               	movlw	0
  3796  004142  6F2B               	movwf	_count_can_no_lab& (0+255),b
  3797                           
  3798                           ; BSR set to: 1
  3799  004144  0012               	return		;funcret
  3800  004146                     __end_of_initGlobalVars:
  3801                           	opt stack 0
  3802                           tblptru	equ	0xFF8
  3803                           tblptrh	equ	0xFF7
  3804                           tblptrl	equ	0xFF6
  3805                           tablat	equ	0xFF5
  3806                           prodh	equ	0xFF4
  3807                           prodl	equ	0xFF3
  3808                           postinc0	equ	0xFEE
  3809                           wreg	equ	0xFE8
  3810                           postdec1	equ	0xFE5
  3811                           fsr1l	equ	0xFE1
  3812                           indf2	equ	0xFDF
  3813                           postinc2	equ	0xFDE
  3814                           postdec2	equ	0xFDD
  3815                           fsr2h	equ	0xFDA
  3816                           fsr2l	equ	0xFD9
  3817                           status	equ	0xFD8
  3818                           
  3819 ;; *************** function _getMAG *****************
  3820 ;; Defined at:
  3821 ;;		line 383 in file "sort.c"
  3822 ;; Parameters:    Size  Location     Type
  3823 ;;		None
  3824 ;; Auto vars:     Size  Location     Type
  3825 ;;		None
  3826 ;; Return value:  Size  Location     Type
  3827 ;;                  1    wreg      void 
  3828 ;; Registers used:
  3829 ;;		wreg, status,2, status,0, cstack
  3830 ;; Tracked objects:
  3831 ;;		On entry : 0/0
  3832 ;;		On exit  : 0/0
  3833 ;;		Unchanged: 0/0
  3834 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3835 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3836 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3837 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3838 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3839 ;;Total ram usage:        2 bytes
  3840 ;; Hardware stack levels used:    1
  3841 ;; Hardware stack levels required when called:    9
  3842 ;; This function calls:
  3843 ;;		_readMAG
  3844 ;; This function is called by:
  3845 ;;		_Loading
  3846 ;; This function uses a non-reentrant model
  3847 ;;
  3848                           
  3849                           	psect	text6
  3850  004674                     __ptext6:
  3851                           	opt stack 0
  3852  004674                     _getMAG:
  3853                           	opt stack 19
  3854                           
  3855                           ;sort.c: 384: readMAG();
  3856                           
  3857                           ; BSR set to: 1
  3858                           ;incstack = 0
  3859  004674  EC62  F022         	call	_readMAG	;wreg free
  3860                           
  3861                           ;sort.c: 386: if(MAG_signal==1){
  3862  004678  0100               	movlb	0	; () banked
  3863  00467A  05E0               	decf	_MAG_signal& (0+255),w,b
  3864  00467C  0100               	movlb	0	; () banked
  3865  00467E  11E1               	iorwf	(_MAG_signal+1)& (0+255),w,b
  3866  004680  A4D8               	btfss	status,2,c
  3867  004682  0012               	return	
  3868                           
  3869                           ; BSR set to: 0
  3870                           ;sort.c: 387: _delay((unsigned long)((500)*(32000000/4000.0)));
  3871  004684  0E15               	movlw	21
  3872  004686  0100               	movlb	0	; () banked
  3873  004688  6F87               	movwf	(??_getMAG+1)& (0+255),b
  3874  00468A  0E4B               	movlw	75
  3875  00468C  0100               	movlb	0	; () banked
  3876  00468E  6F86               	movwf	??_getMAG& (0+255),b
  3877  004690  0EBE               	movlw	190
  3878  004692                     u7667:
  3879  004692  2EE8               	decfsz	wreg,f,c
  3880  004694  D7FE               	bra	u7667
  3881  004696  2F86               	decfsz	??_getMAG& (0+255),f,b
  3882  004698  D7FC               	bra	u7667
  3883  00469A  2F87               	decfsz	(??_getMAG+1)& (0+255),f,b
  3884  00469C  D7FA               	bra	u7667
  3885  00469E  F000               	nop	
  3886                           
  3887                           ;sort.c: 388: readMAG();
  3888  0046A0  EC62  F022         	call	_readMAG	;wreg free
  3889  0046A4  0012               	return	
  3890  0046A6                     __end_of_getMAG:
  3891                           	opt stack 0
  3892                           tblptru	equ	0xFF8
  3893                           tblptrh	equ	0xFF7
  3894                           tblptrl	equ	0xFF6
  3895                           tablat	equ	0xFF5
  3896                           prodh	equ	0xFF4
  3897                           prodl	equ	0xFF3
  3898                           postinc0	equ	0xFEE
  3899                           wreg	equ	0xFE8
  3900                           postdec1	equ	0xFE5
  3901                           fsr1l	equ	0xFE1
  3902                           indf2	equ	0xFDF
  3903                           postinc2	equ	0xFDE
  3904                           postdec2	equ	0xFDD
  3905                           fsr2h	equ	0xFDA
  3906                           fsr2l	equ	0xFD9
  3907                           status	equ	0xFD8
  3908                           
  3909 ;; *************** function _getIR *****************
  3910 ;; Defined at:
  3911 ;;		line 367 in file "sort.c"
  3912 ;; Parameters:    Size  Location     Type
  3913 ;;		None
  3914 ;; Auto vars:     Size  Location     Type
  3915 ;;  i               2    7[BANK0 ] int 
  3916 ;; Return value:  Size  Location     Type
  3917 ;;                  1    wreg      void 
  3918 ;; Registers used:
  3919 ;;		wreg, status,2, status,0, cstack
  3920 ;; Tracked objects:
  3921 ;;		On entry : 0/0
  3922 ;;		On exit  : 0/0
  3923 ;;		Unchanged: 0/0
  3924 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3925 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3926 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3927 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3928 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3929 ;;Total ram usage:        3 bytes
  3930 ;; Hardware stack levels used:    1
  3931 ;; Hardware stack levels required when called:    9
  3932 ;; This function calls:
  3933 ;;		_readIR
  3934 ;; This function is called by:
  3935 ;;		_Loading
  3936 ;; This function uses a non-reentrant model
  3937 ;;
  3938                           
  3939                           	psect	text7
  3940  003FF4                     __ptext7:
  3941                           	opt stack 0
  3942  003FF4                     _getIR:
  3943                           	opt stack 19
  3944                           
  3945                           ;sort.c: 368: readIR();
  3946                           
  3947                           ;incstack = 0
  3948  003FF4  EC3C  F022         	call	_readIR	;wreg free
  3949                           
  3950                           ;sort.c: 369: for(int i = 0; i < 150; i++){
  3951  003FF8  0E00               	movlw	0
  3952  003FFA  0100               	movlb	0	; () banked
  3953  003FFC  6F88               	movwf	(getIR@i+1)& (0+255),b
  3954  003FFE  0E00               	movlw	0
  3955  004000  6F87               	movwf	getIR@i& (0+255),b
  3956  004002                     l6322:
  3957                           
  3958                           ; BSR set to: 0
  3959  004002  0100               	movlb	0	; () banked
  3960  004004  BF88               	btfsc	(getIR@i+1)& (0+255),7,b
  3961  004006  D008               	goto	l6326
  3962  004008  0100               	movlb	0	; () banked
  3963  00400A  5188               	movf	(getIR@i+1)& (0+255),w,b
  3964  00400C  E11A               	bnz	l6338
  3965  00400E  0E96               	movlw	150
  3966  004010  0100               	movlb	0	; () banked
  3967  004012  5D87               	subwf	getIR@i& (0+255),w,b
  3968  004014  B0D8               	btfsc	status,0,c
  3969  004016  D015               	goto	l6338
  3970  004018                     l6326:
  3971                           
  3972                           ; BSR set to: 0
  3973                           ;sort.c: 370: _delay((unsigned long)((500)*(32000000/4000000.0)));
  3974  004018  0E06               	movlw	6
  3975  00401A  0100               	movlb	0	; () banked
  3976  00401C  6F86               	movwf	??_getIR& (0+255),b
  3977  00401E  0E30               	movlw	48
  3978  004020                     u7677:
  3979  004020  2EE8               	decfsz	wreg,f,c
  3980  004022  D7FE               	bra	u7677
  3981  004024  2F86               	decfsz	??_getIR& (0+255),f,b
  3982  004026  D7FC               	bra	u7677
  3983  004028  F000               	nop	
  3984                           
  3985                           ;sort.c: 371: readIR();
  3986  00402A  EC3C  F022         	call	_readIR	;wreg free
  3987                           
  3988                           ;sort.c: 372: if(!IR_signal){
  3989  00402E  0100               	movlb	0	; () banked
  3990  004030  51DE               	movf	_IR_signal& (0+255),w,b
  3991  004032  0100               	movlb	0	; () banked
  3992  004034  11DF               	iorwf	(_IR_signal+1)& (0+255),w,b
  3993  004036  B4D8               	btfsc	status,2,c
  3994  004038  D004               	goto	l6338
  3995                           
  3996                           ; BSR set to: 0
  3997                           
  3998                           ; BSR set to: 0
  3999                           
  4000                           ; BSR set to: 0
  4001                           ;sort.c: 373: break;
  4002  00403A  0100               	movlb	0	; () banked
  4003  00403C  4B87               	infsnz	getIR@i& (0+255),f,b
  4004  00403E  2B88               	incf	(getIR@i+1)& (0+255),f,b
  4005  004040  D7E0               	goto	l6322
  4006  004042                     l6338:
  4007                           
  4008                           ; BSR set to: 0
  4009                           ;sort.c: 374: }
  4010                           ;sort.c: 375: }
  4011                           ;sort.c: 376: if(IR_signal==1){
  4012  004042  0100               	movlb	0	; () banked
  4013  004044  05DE               	decf	_IR_signal& (0+255),w,b
  4014  004046  0100               	movlb	0	; () banked
  4015  004048  11DF               	iorwf	(_IR_signal+1)& (0+255),w,b
  4016  00404A  A4D8               	btfss	status,2,c
  4017  00404C  D006               	goto	l6342
  4018                           
  4019                           ; BSR set to: 0
  4020                           ;sort.c: 377: f_loadingNewCan = 1;
  4021  00404E  0E00               	movlw	0
  4022  004050  0100               	movlb	0	; () banked
  4023  004052  6FEB               	movwf	(_f_loadingNewCan+1)& (0+255),b
  4024  004054  0E01               	movlw	1
  4025  004056  6FEA               	movwf	_f_loadingNewCan& (0+255),b
  4026                           
  4027                           ;sort.c: 378: }
  4028  004058  0012               	return	
  4029  00405A                     l6342:
  4030                           
  4031                           ; BSR set to: 0
  4032                           ;sort.c: 379: else{
  4033                           ;sort.c: 380: f_loadingNewCan = 0;
  4034  00405A  0E00               	movlw	0
  4035  00405C  0100               	movlb	0	; () banked
  4036  00405E  6FEB               	movwf	(_f_loadingNewCan+1)& (0+255),b
  4037  004060  0E00               	movlw	0
  4038  004062  6FEA               	movwf	_f_loadingNewCan& (0+255),b
  4039  004064  0012               	return	
  4040  004066                     __end_of_getIR:
  4041                           	opt stack 0
  4042                           tblptru	equ	0xFF8
  4043                           tblptrh	equ	0xFF7
  4044                           tblptrl	equ	0xFF6
  4045                           tablat	equ	0xFF5
  4046                           prodh	equ	0xFF4
  4047                           prodl	equ	0xFF3
  4048                           postinc0	equ	0xFEE
  4049                           wreg	equ	0xFE8
  4050                           postdec1	equ	0xFE5
  4051                           fsr1l	equ	0xFE1
  4052                           indf2	equ	0xFDF
  4053                           postinc2	equ	0xFDE
  4054                           postdec2	equ	0xFDD
  4055                           fsr2h	equ	0xFDA
  4056                           fsr2l	equ	0xFD9
  4057                           status	equ	0xFD8
  4058                           
  4059 ;; *************** function _readIR *****************
  4060 ;; Defined at:
  4061 ;;		line 23 in file "ADCFunctionality.c"
  4062 ;; Parameters:    Size  Location     Type
  4063 ;;		None
  4064 ;; Auto vars:     Size  Location     Type
  4065 ;;  res             2    4[BANK0 ] int 
  4066 ;; Return value:  Size  Location     Type
  4067 ;;                  1    wreg      void 
  4068 ;; Registers used:
  4069 ;;		wreg, status,2, status,0, cstack
  4070 ;; Tracked objects:
  4071 ;;		On entry : 0/0
  4072 ;;		On exit  : 0/0
  4073 ;;		Unchanged: 0/0
  4074 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4075 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4076 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4077 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4078 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4079 ;;Total ram usage:        4 bytes
  4080 ;; Hardware stack levels used:    1
  4081 ;; Hardware stack levels required when called:    8
  4082 ;; This function calls:
  4083 ;;		_readADC
  4084 ;; This function is called by:
  4085 ;;		_Loading
  4086 ;;		_getIR
  4087 ;; This function uses a non-reentrant model
  4088 ;;
  4089                           
  4090                           	psect	text8
  4091  004478                     __ptext8:
  4092                           	opt stack 0
  4093  004478                     _readIR:
  4094                           	opt stack 20
  4095                           
  4096                           ;ADCFunctionality.c: 24: readADC(0);
  4097                           
  4098                           ; BSR set to: 0
  4099                           ;incstack = 0
  4100  004478  0E00               	movlw	0
  4101  00447A  EC9F  F024         	call	_readADC
  4102                           
  4103                           ;ADCFunctionality.c: 25: int res = ADRESH<<8 | ADRESL;
  4104  00447E  50C3               	movf	4035,w,c	;volatile
  4105  004480  CFC4 F082          	movff	4036,??_readIR	;volatile
  4106  004484  0100               	movlb	0	; () banked
  4107  004486  6B83               	clrf	(??_readIR+1)& (0+255),b
  4108  004488  C082  F083         	movff	??_readIR,??_readIR+1
  4109  00448C  0100               	movlb	0	; () banked
  4110  00448E  6B82               	clrf	??_readIR& (0+255),b
  4111  004490  0100               	movlb	0	; () banked
  4112  004492  1182               	iorwf	??_readIR& (0+255),w,b
  4113  004494  0100               	movlb	0	; () banked
  4114  004496  6F84               	movwf	readIR@res& (0+255),b
  4115  004498  0100               	movlb	0	; () banked
  4116  00449A  5183               	movf	(??_readIR+1)& (0+255),w,b
  4117  00449C  0100               	movlb	0	; () banked
  4118  00449E  6F85               	movwf	(readIR@res+1)& (0+255),b
  4119                           
  4120                           ; BSR set to: 0
  4121                           ;ADCFunctionality.c: 26: IR_signal = (res > 1000) ? 1 : 0;
  4122  0044A0  0100               	movlb	0	; () banked
  4123  0044A2  BF85               	btfsc	(readIR@res+1)& (0+255),7,b
  4124  0044A4  D00A               	goto	u4040
  4125  0044A6  0EE9               	movlw	233
  4126  0044A8  0100               	movlb	0	; () banked
  4127  0044AA  5D84               	subwf	readIR@res& (0+255),w,b
  4128  0044AC  0E03               	movlw	3
  4129  0044AE  0100               	movlb	0	; () banked
  4130  0044B0  5985               	subwfb	(readIR@res+1)& (0+255),w,b
  4131  0044B2  A0D8               	btfss	status,0,c
  4132  0044B4  D002               	goto	u4040
  4133  0044B6  0E01               	movlw	1
  4134  0044B8  D001               	goto	u4050
  4135  0044BA                     u4040:
  4136  0044BA  0E00               	movlw	0
  4137  0044BC                     u4050:
  4138  0044BC  0100               	movlb	0	; () banked
  4139  0044BE  6FDE               	movwf	_IR_signal& (0+255),b
  4140  0044C0  6BDF               	clrf	(_IR_signal+1)& (0+255),b
  4141                           
  4142                           ; BSR set to: 0
  4143  0044C2  0012               	return		;funcret
  4144  0044C4                     __end_of_readIR:
  4145                           	opt stack 0
  4146                           tblptru	equ	0xFF8
  4147                           tblptrh	equ	0xFF7
  4148                           tblptrl	equ	0xFF6
  4149                           tablat	equ	0xFF5
  4150                           prodh	equ	0xFF4
  4151                           prodl	equ	0xFF3
  4152                           postinc0	equ	0xFEE
  4153                           wreg	equ	0xFE8
  4154                           postdec1	equ	0xFE5
  4155                           fsr1l	equ	0xFE1
  4156                           indf2	equ	0xFDF
  4157                           postinc2	equ	0xFDE
  4158                           postdec2	equ	0xFDD
  4159                           fsr2h	equ	0xFDA
  4160                           fsr2l	equ	0xFD9
  4161                           status	equ	0xFD8
  4162                           
  4163 ;; *************** function _ID *****************
  4164 ;; Defined at:
  4165 ;;		line 155 in file "sort.c"
  4166 ;; Parameters:    Size  Location     Type
  4167 ;;		None
  4168 ;; Auto vars:     Size  Location     Type
  4169 ;;  i               2    6[BANK0 ] int 
  4170 ;;  i               2    4[BANK0 ] int 
  4171 ;; Return value:  Size  Location     Type
  4172 ;;                  1    wreg      void 
  4173 ;; Registers used:
  4174 ;;		wreg, status,2, status,0, cstack
  4175 ;; Tracked objects:
  4176 ;;		On entry : 0/0
  4177 ;;		On exit  : 0/0
  4178 ;;		Unchanged: 0/0
  4179 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4180 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4181 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4182 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4183 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4184 ;;Total ram usage:        6 bytes
  4185 ;; Hardware stack levels used:    1
  4186 ;; Hardware stack levels required when called:    8
  4187 ;; This function calls:
  4188 ;;		_delay_ms
  4189 ;; This function is called by:
  4190 ;;		_sort
  4191 ;; This function uses a non-reentrant model
  4192 ;;
  4193                           
  4194                           	psect	text9
  4195  002F72                     __ptext9:
  4196                           	opt stack 0
  4197  002F72                     _ID:
  4198                           	opt stack 21
  4199                           
  4200                           ;sort.c: 156: if(f_can_coming_to_ID){
  4201                           
  4202                           ; BSR set to: 0
  4203                           ;incstack = 0
  4204  002F72  5069               	movf	_f_can_coming_to_ID,w,c
  4205  002F74  106A               	iorwf	_f_can_coming_to_ID+1,w,c
  4206  002F76  B4D8               	btfsc	status,2,c
  4207  002F78  0012               	return	
  4208                           
  4209                           ;sort.c: 158: _delay((unsigned long)((1500)*(32000000/4000.0)));
  4210  002F7A  0E3D               	movlw	61
  4211  002F7C  0100               	movlb	0	; () banked
  4212  002F7E  6F83               	movwf	(??_ID+1)& (0+255),b
  4213  002F80  0EE1               	movlw	225
  4214  002F82  0100               	movlb	0	; () banked
  4215  002F84  6F82               	movwf	??_ID& (0+255),b
  4216  002F86  0E3F               	movlw	63
  4217  002F88                     u7687:
  4218  002F88  2EE8               	decfsz	wreg,f,c
  4219  002F8A  D7FE               	bra	u7687
  4220  002F8C  2F82               	decfsz	??_ID& (0+255),f,b
  4221  002F8E  D7FC               	bra	u7687
  4222  002F90  2F83               	decfsz	(??_ID+1)& (0+255),f,b
  4223  002F92  D7FA               	bra	u7687
  4224  002F94  D000               	nop2	
  4225                           
  4226                           ;sort.c: 160: LATAbits.LATA3 = 1;
  4227  002F96  8689               	bsf	3977,3,c	;volatile
  4228                           
  4229                           ;sort.c: 161: _delay((unsigned long)((600)*(32000000/4000.0)));
  4230  002F98  0E19               	movlw	25
  4231  002F9A  0100               	movlb	0	; () banked
  4232  002F9C  6F83               	movwf	(??_ID+1)& (0+255),b
  4233  002F9E  0E5A               	movlw	90
  4234  002FA0  0100               	movlb	0	; () banked
  4235  002FA2  6F82               	movwf	??_ID& (0+255),b
  4236  002FA4  0EB1               	movlw	177
  4237  002FA6                     u7697:
  4238  002FA6  2EE8               	decfsz	wreg,f,c
  4239  002FA8  D7FE               	bra	u7697
  4240  002FAA  2F82               	decfsz	??_ID& (0+255),f,b
  4241  002FAC  D7FC               	bra	u7697
  4242  002FAE  2F83               	decfsz	(??_ID+1)& (0+255),f,b
  4243  002FB0  D7FA               	bra	u7697
  4244  002FB2  D000               	nop2	
  4245                           
  4246                           ;sort.c: 162: sensor_outputs[1] = PORTAbits.RA2;
  4247  002FB4  A480               	btfss	3968,2,c	;volatile
  4248  002FB6  D004               	goto	u5240
  4249  002FB8  0100               	movlb	0	; () banked
  4250  002FBA  6B82               	clrf	??_ID& (0+255),b
  4251  002FBC  2B82               	incf	??_ID& (0+255),f,b
  4252  002FBE  D002               	goto	u5248
  4253  002FC0                     u5240:
  4254  002FC0  0100               	movlb	0	; () banked
  4255  002FC2  6B82               	clrf	??_ID& (0+255),b
  4256  002FC4                     u5248:
  4257  002FC4  0100               	movlb	0	; () banked
  4258  002FC6  5182               	movf	??_ID& (0+255),w,b
  4259  002FC8  0100               	movlb	0	; () banked
  4260  002FCA  6FDC               	movwf	(_sensor_outputs+2)& (0+255),b
  4261  002FCC  6BDD               	clrf	(_sensor_outputs+3)& (0+255),b
  4262                           
  4263                           ; BSR set to: 0
  4264                           ;sort.c: 170: if(!sensor_outputs[0]){
  4265  002FCE  0100               	movlb	0	; () banked
  4266  002FD0  51DA               	movf	_sensor_outputs& (0+255),w,b
  4267  002FD2  0100               	movlb	0	; () banked
  4268  002FD4  11DB               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  4269  002FD6  A4D8               	btfss	status,2,c
  4270  002FD8  D014               	goto	l6746
  4271                           
  4272                           ; BSR set to: 0
  4273                           ;sort.c: 171: if(!sensor_outputs[1]){
  4274  002FDA  0100               	movlb	0	; () banked
  4275  002FDC  51DC               	movf	(_sensor_outputs+2)& (0+255),w,b
  4276  002FDE  0100               	movlb	0	; () banked
  4277  002FE0  11DD               	iorwf	(_sensor_outputs+3)& (0+255),w,b
  4278  002FE2  A4D8               	btfss	status,2,c
  4279  002FE4  D007               	goto	l6742
  4280                           
  4281                           ; BSR set to: 0
  4282                           ;sort.c: 172: count_pop_no_tab++;
  4283  002FE6  4A5D               	infsnz	_count_pop_no_tab,f,c
  4284  002FE8  2A5E               	incf	_count_pop_no_tab+1,f,c
  4285                           
  4286                           ; BSR set to: 0
  4287                           ;sort.c: 173: cur_can = 0;
  4288  002FEA  0E00               	movlw	0
  4289  002FEC  0100               	movlb	0	; () banked
  4290  002FEE  6FE5               	movwf	(_cur_can+1)& (0+255),b
  4291  002FF0  0E00               	movlw	0
  4292  002FF2  D006               	goto	L2
  4293  002FF4                     l6742:
  4294                           
  4295                           ; BSR set to: 0
  4296                           ;sort.c: 175: else{
  4297                           ;sort.c: 176: count_pop_w_tab++;
  4298  002FF4  4A5F               	infsnz	_count_pop_w_tab,f,c
  4299  002FF6  2A60               	incf	_count_pop_w_tab+1,f,c
  4300                           
  4301                           ; BSR set to: 0
  4302                           ;sort.c: 177: cur_can = 1;
  4303  002FF8  0E00               	movlw	0
  4304  002FFA  0100               	movlb	0	; () banked
  4305  002FFC  6FE5               	movwf	(_cur_can+1)& (0+255),b
  4306  002FFE  0E01               	movlw	1
  4307  003000                     L2:
  4308  003000  6FE4               	movwf	_cur_can& (0+255),b
  4309  003002                     l6746:
  4310                           
  4311                           ; BSR set to: 0
  4312                           ;sort.c: 178: }
  4313                           ;sort.c: 179: }
  4314                           ;sort.c: 180: if(sensor_outputs[0]){
  4315  003002  0100               	movlb	0	; () banked
  4316  003004  51DA               	movf	_sensor_outputs& (0+255),w,b
  4317  003006  0100               	movlb	0	; () banked
  4318  003008  11DB               	iorwf	(_sensor_outputs+1)& (0+255),w,b
  4319  00300A  B4D8               	btfsc	status,2,c
  4320  00300C  D016               	goto	l6758
  4321                           
  4322                           ; BSR set to: 0
  4323                           ;sort.c: 181: if(!sensor_outputs[1]){
  4324  00300E  0100               	movlb	0	; () banked
  4325  003010  51DC               	movf	(_sensor_outputs+2)& (0+255),w,b
  4326  003012  0100               	movlb	0	; () banked
  4327  003014  11DD               	iorwf	(_sensor_outputs+3)& (0+255),w,b
  4328  003016  A4D8               	btfss	status,2,c
  4329  003018  D008               	goto	l6754
  4330                           
  4331                           ; BSR set to: 0
  4332                           ;sort.c: 182: count_can_w_lab++;
  4333  00301A  0101               	movlb	1	; () banked
  4334  00301C  4B2D               	infsnz	_count_can_w_lab& (0+255),f,b
  4335  00301E  2B2E               	incf	(_count_can_w_lab+1)& (0+255),f,b
  4336                           
  4337                           ; BSR set to: 1
  4338                           ;sort.c: 183: cur_can = 2;
  4339  003020  0E00               	movlw	0
  4340  003022  0100               	movlb	0	; () banked
  4341  003024  6FE5               	movwf	(_cur_can+1)& (0+255),b
  4342  003026  0E02               	movlw	2
  4343  003028  D007               	goto	L3
  4344  00302A                     l6754:
  4345                           
  4346                           ; BSR set to: 0
  4347                           ;sort.c: 185: else{
  4348                           ;sort.c: 186: count_can_no_lab++;
  4349  00302A  0101               	movlb	1	; () banked
  4350  00302C  4B2B               	infsnz	_count_can_no_lab& (0+255),f,b
  4351  00302E  2B2C               	incf	(_count_can_no_lab+1)& (0+255),f,b
  4352                           
  4353                           ; BSR set to: 1
  4354                           ;sort.c: 187: cur_can = 3;
  4355  003030  0E00               	movlw	0
  4356  003032  0100               	movlb	0	; () banked
  4357  003034  6FE5               	movwf	(_cur_can+1)& (0+255),b
  4358  003036  0E03               	movlw	3
  4359  003038                     L3:
  4360  003038  6FE4               	movwf	_cur_can& (0+255),b
  4361  00303A                     l6758:
  4362                           
  4363                           ; BSR set to: 0
  4364                           ;sort.c: 188: }
  4365                           ;sort.c: 189: }
  4366                           ;sort.c: 190: LATAbits.LATA3 = 0;
  4367  00303A  9689               	bcf	3977,3,c	;volatile
  4368                           
  4369                           ; BSR set to: 0
  4370                           ;sort.c: 191: _delay((unsigned long)((200)*(32000000/4000.0)));
  4371  00303C  0E09               	movlw	9
  4372  00303E  0100               	movlb	0	; () banked
  4373  003040  6F83               	movwf	(??_ID+1)& (0+255),b
  4374  003042  0E1E               	movlw	30
  4375  003044  0100               	movlb	0	; () banked
  4376  003046  6F82               	movwf	??_ID& (0+255),b
  4377  003048  0EE4               	movlw	228
  4378  00304A                     u7707:
  4379  00304A  2EE8               	decfsz	wreg,f,c
  4380  00304C  D7FE               	bra	u7707
  4381  00304E  2F82               	decfsz	??_ID& (0+255),f,b
  4382  003050  D7FC               	bra	u7707
  4383  003052  2F83               	decfsz	(??_ID+1)& (0+255),f,b
  4384  003054  D7FA               	bra	u7707
  4385  003056  F000               	nop	
  4386                           
  4387                           ;sort.c: 192: LATAbits.LATA3 = 1;
  4388  003058  8689               	bsf	3977,3,c	;volatile
  4389                           
  4390                           ;sort.c: 195: for(int i=0;i<10000;i++)
  4391  00305A  0E00               	movlw	0
  4392  00305C  0100               	movlb	0	; () banked
  4393  00305E  6F85               	movwf	(ID@i+1)& (0+255),b
  4394  003060  0E00               	movlw	0
  4395  003062  6F84               	movwf	ID@i& (0+255),b
  4396  003064  0100               	movlb	0	; () banked
  4397  003066  BF85               	btfsc	(ID@i+1)& (0+255),7,b
  4398  003068  D008               	goto	l757
  4399  00306A  0E10               	movlw	16
  4400  00306C  0100               	movlb	0	; () banked
  4401  00306E  5D84               	subwf	ID@i& (0+255),w,b
  4402  003070  0E27               	movlw	39
  4403  003072  0100               	movlb	0	; () banked
  4404  003074  5985               	subwfb	(ID@i+1)& (0+255),w,b
  4405  003076  B0D8               	btfsc	status,0,c
  4406  003078  D00D               	goto	l758
  4407  00307A                     l757:
  4408                           
  4409                           ; BSR set to: 0
  4410                           ;sort.c: 196: {
  4411                           ;sort.c: 197: LATCbits.LATC0 = 1;
  4412  00307A  808B               	bsf	3979,0,c	;volatile
  4413                           
  4414                           ; BSR set to: 0
  4415                           ;sort.c: 198: _delay((unsigned long)((10)*(32000000/4000000.0)));
  4416  00307C  0E1A               	movlw	26
  4417  00307E                     u7717:
  4418  00307E  2EE8               	decfsz	wreg,f,c
  4419  003080  D7FE               	bra	u7717
  4420  003082  D000               	nop2	
  4421                           
  4422                           ;sort.c: 199: LATCbits.LATC0 = 0;
  4423  003084  908B               	bcf	3979,0,c	;volatile
  4424                           
  4425                           ;sort.c: 200: _delay((unsigned long)((90)*(32000000/4000000.0)));
  4426  003086  0EF0               	movlw	240
  4427  003088                     u7727:
  4428  003088  2EE8               	decfsz	wreg,f,c
  4429  00308A  D7FE               	bra	u7727
  4430  00308C  0100               	movlb	0	; () banked
  4431  00308E  4B84               	infsnz	ID@i& (0+255),f,b
  4432  003090  2B85               	incf	(ID@i+1)& (0+255),f,b
  4433  003092  D7E8               	goto	L4
  4434  003094                     l758:
  4435                           
  4436                           ; BSR set to: 0
  4437                           ;sort.c: 201: }
  4438                           ;sort.c: 202: LATCbits.LATC0 = 0;
  4439  003094  908B               	bcf	3979,0,c	;volatile
  4440                           
  4441                           ;sort.c: 204: LATAbits.LATA3 = 0;
  4442  003096  9689               	bcf	3977,3,c	;volatile
  4443                           
  4444                           ; BSR set to: 0
  4445                           ;sort.c: 208: f_can_coming_to_distribution = 1;
  4446  003098  0E00               	movlw	0
  4447  00309A  6E6C               	movwf	_f_can_coming_to_distribution+1,c
  4448  00309C  0E01               	movlw	1
  4449  00309E  6E6B               	movwf	_f_can_coming_to_distribution,c
  4450                           
  4451                           ; BSR set to: 0
  4452                           ;sort.c: 209: _delay((unsigned long)((1500)*(32000000/4000.0)));
  4453  0030A0  0E3D               	movlw	61
  4454  0030A2  0100               	movlb	0	; () banked
  4455  0030A4  6F83               	movwf	(??_ID+1)& (0+255),b
  4456  0030A6  0EE1               	movlw	225
  4457  0030A8  0100               	movlb	0	; () banked
  4458  0030AA  6F82               	movwf	??_ID& (0+255),b
  4459  0030AC  0E3F               	movlw	63
  4460  0030AE                     u7737:
  4461  0030AE  2EE8               	decfsz	wreg,f,c
  4462  0030B0  D7FE               	bra	u7737
  4463  0030B2  2F82               	decfsz	??_ID& (0+255),f,b
  4464  0030B4  D7FC               	bra	u7737
  4465  0030B6  2F83               	decfsz	(??_ID+1)& (0+255),f,b
  4466  0030B8  D7FA               	bra	u7737
  4467  0030BA  D000               	nop2	
  4468                           
  4469                           ;sort.c: 210: LATCbits.LATC0 = 1;
  4470  0030BC  808B               	bsf	3979,0,c	;volatile
  4471                           
  4472                           ;sort.c: 213: if(!f_lastCan){
  4473  0030BE  0100               	movlb	0	; () banked
  4474  0030C0  51E8               	movf	_f_lastCan& (0+255),w,b
  4475  0030C2  0100               	movlb	0	; () banked
  4476  0030C4  11E9               	iorwf	(_f_lastCan+1)& (0+255),w,b
  4477  0030C6  A4D8               	btfss	status,2,c
  4478  0030C8  D032               	goto	l6796
  4479                           
  4480                           ; BSR set to: 0
  4481                           ;sort.c: 214: for(int i=0; i<46; i++){
  4482  0030CA  0E00               	movlw	0
  4483  0030CC  0100               	movlb	0	; () banked
  4484  0030CE  6F87               	movwf	(ID@i_1112+1)& (0+255),b
  4485  0030D0  0E00               	movlw	0
  4486  0030D2  6F86               	movwf	ID@i_1112& (0+255),b
  4487                           
  4488                           ; BSR set to: 0
  4489  0030D4  0100               	movlb	0	; () banked
  4490  0030D6  BF87               	btfsc	(ID@i_1112+1)& (0+255),7,b
  4491  0030D8  D008               	goto	l6788
  4492  0030DA  0100               	movlb	0	; () banked
  4493  0030DC  5187               	movf	(ID@i_1112+1)& (0+255),w,b
  4494  0030DE  E126               	bnz	l761
  4495  0030E0  0E2E               	movlw	46
  4496  0030E2  0100               	movlb	0	; () banked
  4497  0030E4  5D86               	subwf	ID@i_1112& (0+255),w,b
  4498  0030E6  B0D8               	btfsc	status,0,c
  4499  0030E8  D021               	goto	l761
  4500  0030EA                     l6788:
  4501                           
  4502                           ; BSR set to: 0
  4503                           ;sort.c: 215: LATAbits.LATA5 = !LATAbits.LATA5;
  4504  0030EA  BA89               	btfsc	3977,5,c	;volatile
  4505  0030EC  D004               	goto	u5330
  4506  0030EE  0100               	movlb	0	; () banked
  4507  0030F0  6B82               	clrf	??_ID& (0+255),b
  4508  0030F2  2B82               	incf	??_ID& (0+255),f,b
  4509  0030F4  D002               	goto	u5348
  4510  0030F6                     u5330:
  4511  0030F6  0100               	movlb	0	; () banked
  4512  0030F8  6B82               	clrf	??_ID& (0+255),b
  4513  0030FA                     u5348:
  4514  0030FA  0100               	movlb	0	; () banked
  4515  0030FC  3B82               	swapf	??_ID& (0+255),f,b
  4516  0030FE  4782               	rlncf	??_ID& (0+255),f,b
  4517  003100  5089               	movf	3977,w,c	;volatile
  4518  003102  0100               	movlb	0	; () banked
  4519  003104  1982               	xorwf	??_ID& (0+255),w,b
  4520  003106  0BDF               	andlw	-33
  4521  003108  1982               	xorwf	??_ID& (0+255),w,b
  4522  00310A  6E89               	movwf	3977,c	;volatile
  4523                           
  4524                           ; BSR set to: 0
  4525                           ;sort.c: 216: delay_ms(45-i);
  4526  00310C  0100               	movlb	0	; () banked
  4527  00310E  5186               	movf	ID@i_1112& (0+255),w,b
  4528  003110  0800               	sublw	0
  4529  003112  0F2D               	addlw	45
  4530  003114  ECCA  F024         	call	_delay_ms
  4531  003118  0100               	movlb	0	; () banked
  4532  00311A  4B86               	infsnz	ID@i_1112& (0+255),f,b
  4533  00311C  2B87               	incf	(ID@i_1112+1)& (0+255),f,b
  4534                           
  4535                           ; BSR set to: 0
  4536  00311E  0100               	movlb	0	; () banked
  4537  003120  BF87               	btfsc	(ID@i_1112+1)& (0+255),7,b
  4538  003122  D7E3               	goto	l6788
  4539  003124  0100               	movlb	0	; () banked
  4540  003126  5187               	movf	(ID@i_1112+1)& (0+255),w,b
  4541  003128  E101               	bnz	u5350
  4542  00312A  D7DA               	goto	L5
  4543  00312C                     u5350:
  4544  00312C                     l761:
  4545                           
  4546                           ; BSR set to: 0
  4547                           ;sort.c: 217: }
  4548                           ;sort.c: 218: LATAbits.LATA5 = 1;
  4549  00312C  8A89               	bsf	3977,5,c	;volatile
  4550  00312E                     l6796:
  4551                           
  4552                           ; BSR set to: 0
  4553                           ;sort.c: 219: }
  4554                           ;sort.c: 221: f_can_coming_to_ID = 0;
  4555  00312E  0E00               	movlw	0
  4556  003130  6E6A               	movwf	_f_can_coming_to_ID+1,c
  4557  003132  0E00               	movlw	0
  4558  003134  6E69               	movwf	_f_can_coming_to_ID,c
  4559  003136  0012               	return	
  4560  003138                     __end_of_ID:
  4561                           	opt stack 0
  4562                           tblptru	equ	0xFF8
  4563                           tblptrh	equ	0xFF7
  4564                           tblptrl	equ	0xFF6
  4565                           tablat	equ	0xFF5
  4566                           prodh	equ	0xFF4
  4567                           prodl	equ	0xFF3
  4568                           postinc0	equ	0xFEE
  4569                           wreg	equ	0xFE8
  4570                           postdec1	equ	0xFE5
  4571                           fsr1l	equ	0xFE1
  4572                           indf2	equ	0xFDF
  4573                           postinc2	equ	0xFDE
  4574                           postdec2	equ	0xFDD
  4575                           fsr2h	equ	0xFDA
  4576                           fsr2l	equ	0xFD9
  4577                           status	equ	0xFD8
  4578                           
  4579 ;; *************** function _delay_ms *****************
  4580 ;; Defined at:
  4581 ;;		line 404 in file "sort.c"
  4582 ;; Parameters:    Size  Location     Type
  4583 ;;  milliseconds    1    wreg     unsigned char 
  4584 ;; Auto vars:     Size  Location     Type
  4585 ;;  milliseconds    1    1[BANK0 ] unsigned char 
  4586 ;; Return value:  Size  Location     Type
  4587 ;;                  1    wreg      void 
  4588 ;; Registers used:
  4589 ;;		wreg, status,2, status,0, cstack
  4590 ;; Tracked objects:
  4591 ;;		On entry : 0/0
  4592 ;;		On exit  : 0/0
  4593 ;;		Unchanged: 0/0
  4594 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4595 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4596 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4597 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4598 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4599 ;;Total ram usage:        2 bytes
  4600 ;; Hardware stack levels used:    1
  4601 ;; Hardware stack levels required when called:    7
  4602 ;; This function calls:
  4603 ;;		Nothing
  4604 ;; This function is called by:
  4605 ;;		_Loading
  4606 ;;		_ID
  4607 ;; This function uses a non-reentrant model
  4608 ;;
  4609                           
  4610                           	psect	text10
  4611  004994                     __ptext10:
  4612                           	opt stack 0
  4613  004994                     _delay_ms:
  4614                           	opt stack 21
  4615                           
  4616                           ;incstack = 0
  4617                           ;delay_ms@milliseconds stored from wreg
  4618  004994  0100               	movlb	0	; () banked
  4619  004996  6F81               	movwf	delay_ms@milliseconds& (0+255),b
  4620                           
  4621                           ;sort.c: 405: while(milliseconds > 0)
  4622  004998  D00B               	goto	l6302
  4623  00499A                     l6298:
  4624                           
  4625                           ;sort.c: 406: {
  4626                           ;sort.c: 407: milliseconds--;
  4627  00499A  0100               	movlb	0	; () banked
  4628  00499C  0781               	decf	delay_ms@milliseconds& (0+255),f,b
  4629                           
  4630                           ; BSR set to: 0
  4631                           ;sort.c: 408: _delay((unsigned long)((990)*(32000000/4000000.0)));
  4632  00499E  0E0B               	movlw	11
  4633  0049A0  0100               	movlb	0	; () banked
  4634  0049A2  6F80               	movwf	??_delay_ms& (0+255),b
  4635  0049A4  0E47               	movlw	71
  4636  0049A6                     u7747:
  4637  0049A6  2EE8               	decfsz	wreg,f,c
  4638  0049A8  D7FE               	bra	u7747
  4639  0049AA  2F80               	decfsz	??_delay_ms& (0+255),f,b
  4640  0049AC  D7FC               	bra	u7747
  4641  0049AE  D000               	nop2	
  4642  0049B0                     l6302:
  4643  0049B0  0100               	movlb	0	; () banked
  4644  0049B2  5181               	movf	delay_ms@milliseconds& (0+255),w,b
  4645  0049B4  0100               	movlb	0	; () banked
  4646  0049B6  B4D8               	btfsc	status,2,c
  4647  0049B8  0012               	return	
  4648  0049BA  D7EF               	goto	l6298
  4649  0049BC                     __end_of_delay_ms:
  4650                           	opt stack 0
  4651                           tblptru	equ	0xFF8
  4652                           tblptrh	equ	0xFF7
  4653                           tblptrl	equ	0xFF6
  4654                           tablat	equ	0xFF5
  4655                           prodh	equ	0xFF4
  4656                           prodl	equ	0xFF3
  4657                           postinc0	equ	0xFEE
  4658                           wreg	equ	0xFE8
  4659                           postdec1	equ	0xFE5
  4660                           fsr1l	equ	0xFE1
  4661                           indf2	equ	0xFDF
  4662                           postinc2	equ	0xFDE
  4663                           postdec2	equ	0xFDD
  4664                           fsr2h	equ	0xFDA
  4665                           fsr2l	equ	0xFD9
  4666                           status	equ	0xFD8
  4667                           
  4668 ;; *************** function _Distribution *****************
  4669 ;; Defined at:
  4670 ;;		line 224 in file "sort.c"
  4671 ;; Parameters:    Size  Location     Type
  4672 ;;		None
  4673 ;; Auto vars:     Size  Location     Type
  4674 ;;		None
  4675 ;; Return value:  Size  Location     Type
  4676 ;;                  1    wreg      void 
  4677 ;; Registers used:
  4678 ;;		wreg, status,2, status,0, cstack
  4679 ;; Tracked objects:
  4680 ;;		On entry : 0/0
  4681 ;;		On exit  : 0/0
  4682 ;;		Unchanged: 0/0
  4683 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4684 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4685 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4686 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4687 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4688 ;;Total ram usage:        2 bytes
  4689 ;; Hardware stack levels used:    1
  4690 ;; Hardware stack levels required when called:    8
  4691 ;; This function calls:
  4692 ;;		_updateServoPosition
  4693 ;; This function is called by:
  4694 ;;		_sort
  4695 ;; This function uses a non-reentrant model
  4696 ;;
  4697                           
  4698                           	psect	text11
  4699  00298A                     __ptext11:
  4700                           	opt stack 0
  4701  00298A                     _Distribution:
  4702                           	opt stack 21
  4703                           
  4704                           ;sort.c: 225: if(f_can_coming_to_distribution){
  4705                           
  4706                           ; BSR set to: 0
  4707                           ;incstack = 0
  4708  00298A  506B               	movf	_f_can_coming_to_distribution,w,c
  4709  00298C  106C               	iorwf	_f_can_coming_to_distribution+1,w,c
  4710  00298E  B4D8               	btfsc	status,2,c
  4711  002990  0012               	return	
  4712  002992  D034               	goto	l6812
  4713  002994                     l6802:
  4714                           
  4715                           ;sort.c: 235: updateServoPosition(500, 1);
  4716  002994  0E01               	movlw	1
  4717  002996  0100               	movlb	0	; () banked
  4718  002998  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4719  00299A  0EF4               	movlw	244
  4720  00299C  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4721  00299E  0E00               	movlw	0
  4722  0029A0  0100               	movlb	0	; () banked
  4723  0029A2  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4724  0029A4  0E01               	movlw	1
  4725  0029A6  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4726  0029A8  ECBF  F01F         	call	_updateServoPosition	;wreg free
  4727                           
  4728                           ;sort.c: 236: break;
  4729  0029AC  D03E               	goto	l6814
  4730  0029AE                     l6804:
  4731                           
  4732                           ;sort.c: 238: updateServoPosition(850, 1);
  4733  0029AE  0E03               	movlw	3
  4734  0029B0  0100               	movlb	0	; () banked
  4735  0029B2  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4736  0029B4  0E52               	movlw	82
  4737  0029B6  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4738  0029B8  0E00               	movlw	0
  4739  0029BA  0100               	movlb	0	; () banked
  4740  0029BC  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4741  0029BE  0E01               	movlw	1
  4742  0029C0  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4743  0029C2  ECBF  F01F         	call	_updateServoPosition	;wreg free
  4744                           
  4745                           ;sort.c: 239: break;
  4746  0029C6  D031               	goto	l6814
  4747  0029C8                     l6806:
  4748                           
  4749                           ;sort.c: 241: updateServoPosition(1670, 1);
  4750  0029C8  0E06               	movlw	6
  4751  0029CA  0100               	movlb	0	; () banked
  4752  0029CC  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4753  0029CE  0E86               	movlw	134
  4754  0029D0  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4755  0029D2  0E00               	movlw	0
  4756  0029D4  0100               	movlb	0	; () banked
  4757  0029D6  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4758  0029D8  0E01               	movlw	1
  4759  0029DA  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4760  0029DC  ECBF  F01F         	call	_updateServoPosition	;wreg free
  4761                           
  4762                           ;sort.c: 242: break;
  4763  0029E0  D024               	goto	l6814
  4764  0029E2                     l6808:
  4765                           
  4766                           ;sort.c: 244: updateServoPosition(2200, 1);
  4767  0029E2  0E08               	movlw	8
  4768  0029E4  0100               	movlb	0	; () banked
  4769  0029E6  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4770  0029E8  0E98               	movlw	152
  4771  0029EA  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4772  0029EC  0E00               	movlw	0
  4773  0029EE  0100               	movlb	0	; () banked
  4774  0029F0  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4775  0029F2  0E01               	movlw	1
  4776  0029F4  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4777  0029F6  ECBF  F01F         	call	_updateServoPosition	;wreg free
  4778                           
  4779                           ;sort.c: 248: }
  4780                           
  4781                           ;sort.c: 247: break;
  4782                           
  4783                           ;sort.c: 246: default:
  4784                           
  4785                           ;sort.c: 245: break;
  4786  0029FA  D017               	goto	l6814
  4787  0029FC                     l6812:
  4788  0029FC  C0E4  F088         	movff	_cur_can,??_Distribution
  4789  002A00  C0E5  F089         	movff	_cur_can+1,??_Distribution+1
  4790                           
  4791                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4792                           ; Switch size 1, requested type "space"
  4793                           ; Number of cases is 1, Range of values is 0 to 0
  4794                           ; switch strategies available:
  4795                           ; Name         Instructions Cycles
  4796                           ; simple_byte            4     3 (average)
  4797                           ;	Chosen strategy is simple_byte
  4798  002A04  0100               	movlb	0	; () banked
  4799  002A06  5189               	movf	(??_Distribution+1)& (0+255),w,b
  4800  002A08  0A00               	xorlw	0	; case 0
  4801  002A0A  A4D8               	btfss	status,2,c
  4802  002A0C  D00E               	goto	l6814
  4803                           
  4804                           ; BSR set to: 0
  4805                           ; Switch size 1, requested type "space"
  4806                           ; Number of cases is 4, Range of values is 0 to 3
  4807                           ; switch strategies available:
  4808                           ; Name         Instructions Cycles
  4809                           ; simple_byte           13     7 (average)
  4810                           ;	Chosen strategy is simple_byte
  4811  002A0E  0100               	movlb	0	; () banked
  4812  002A10  5188               	movf	??_Distribution& (0+255),w,b
  4813  002A12  0A00               	xorlw	0	; case 0
  4814  002A14  B4D8               	btfsc	status,2,c
  4815  002A16  D7BE               	goto	l6802
  4816  002A18  0A01               	xorlw	1	; case 1
  4817  002A1A  B4D8               	btfsc	status,2,c
  4818  002A1C  D7C8               	goto	l6804
  4819  002A1E  0A03               	xorlw	3	; case 2
  4820  002A20  B4D8               	btfsc	status,2,c
  4821  002A22  D7D2               	goto	l6806
  4822  002A24  0A01               	xorlw	1	; case 3
  4823  002A26  B4D8               	btfsc	status,2,c
  4824  002A28  D7DC               	goto	l6808
  4825  002A2A                     l6814:
  4826                           
  4827                           ;sort.c: 249: updateServoPosition(1050, 3);
  4828  002A2A  0E04               	movlw	4
  4829  002A2C  0100               	movlb	0	; () banked
  4830  002A2E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4831  002A30  0E1A               	movlw	26
  4832  002A32  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4833  002A34  0E00               	movlw	0
  4834  002A36  0100               	movlb	0	; () banked
  4835  002A38  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4836  002A3A  0E03               	movlw	3
  4837  002A3C  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4838  002A3E  ECBF  F01F         	call	_updateServoPosition	;wreg free
  4839                           
  4840                           ;sort.c: 250: _delay((unsigned long)((750)*(32000000/4000.0)));
  4841  002A42  0E1F               	movlw	31
  4842  002A44  0100               	movlb	0	; () banked
  4843  002A46  6F89               	movwf	(??_Distribution+1)& (0+255),b
  4844  002A48  0E71               	movlw	113
  4845  002A4A  0100               	movlb	0	; () banked
  4846  002A4C  6F88               	movwf	??_Distribution& (0+255),b
  4847  002A4E  0E1E               	movlw	30
  4848  002A50                     u7757:
  4849  002A50  2EE8               	decfsz	wreg,f,c
  4850  002A52  D7FE               	bra	u7757
  4851  002A54  2F88               	decfsz	??_Distribution& (0+255),f,b
  4852  002A56  D7FC               	bra	u7757
  4853  002A58  2F89               	decfsz	(??_Distribution+1)& (0+255),f,b
  4854  002A5A  D7FA               	bra	u7757
  4855  002A5C  F000               	nop	
  4856                           
  4857                           ;sort.c: 258: switch(cur_can){
  4858  002A5E  D034               	goto	l6828
  4859  002A60                     l6818:
  4860                           
  4861                           ;sort.c: 260: updateServoPosition(1260, 3);
  4862  002A60  0E04               	movlw	4
  4863  002A62  0100               	movlb	0	; () banked
  4864  002A64  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4865  002A66  0EEC               	movlw	236
  4866  002A68  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4867  002A6A  0E00               	movlw	0
  4868  002A6C  0100               	movlb	0	; () banked
  4869  002A6E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4870  002A70  0E03               	movlw	3
  4871  002A72  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4872  002A74  ECBF  F01F         	call	_updateServoPosition	;wreg free
  4873                           
  4874                           ;sort.c: 261: break;
  4875  002A78  D03E               	goto	l6830
  4876  002A7A                     l6820:
  4877                           
  4878                           ;sort.c: 263: updateServoPosition(1260, 3);
  4879  002A7A  0E04               	movlw	4
  4880  002A7C  0100               	movlb	0	; () banked
  4881  002A7E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4882  002A80  0EEC               	movlw	236
  4883  002A82  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4884  002A84  0E00               	movlw	0
  4885  002A86  0100               	movlb	0	; () banked
  4886  002A88  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4887  002A8A  0E03               	movlw	3
  4888  002A8C  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4889  002A8E  ECBF  F01F         	call	_updateServoPosition	;wreg free
  4890                           
  4891                           ;sort.c: 264: break;
  4892  002A92  D031               	goto	l6830
  4893  002A94                     l6822:
  4894                           
  4895                           ;sort.c: 266: updateServoPosition(1370, 3);
  4896  002A94  0E05               	movlw	5
  4897  002A96  0100               	movlb	0	; () banked
  4898  002A98  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4899  002A9A  0E5A               	movlw	90
  4900  002A9C  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4901  002A9E  0E00               	movlw	0
  4902  002AA0  0100               	movlb	0	; () banked
  4903  002AA2  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4904  002AA4  0E03               	movlw	3
  4905  002AA6  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4906  002AA8  ECBF  F01F         	call	_updateServoPosition	;wreg free
  4907                           
  4908                           ;sort.c: 267: break;
  4909  002AAC  D024               	goto	l6830
  4910  002AAE                     l6824:
  4911                           
  4912                           ;sort.c: 269: updateServoPosition(1370, 3);
  4913  002AAE  0E05               	movlw	5
  4914  002AB0  0100               	movlb	0	; () banked
  4915  002AB2  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4916  002AB4  0E5A               	movlw	90
  4917  002AB6  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4918  002AB8  0E00               	movlw	0
  4919  002ABA  0100               	movlb	0	; () banked
  4920  002ABC  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4921  002ABE  0E03               	movlw	3
  4922  002AC0  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4923  002AC2  ECBF  F01F         	call	_updateServoPosition	;wreg free
  4924                           
  4925                           ;sort.c: 273: }
  4926                           
  4927                           ;sort.c: 272: break;
  4928                           
  4929                           ;sort.c: 271: default:
  4930                           
  4931                           ;sort.c: 270: break;
  4932  002AC6  D017               	goto	l6830
  4933  002AC8                     l6828:
  4934  002AC8  C0E4  F088         	movff	_cur_can,??_Distribution
  4935  002ACC  C0E5  F089         	movff	_cur_can+1,??_Distribution+1
  4936                           
  4937                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4938                           ; Switch size 1, requested type "space"
  4939                           ; Number of cases is 1, Range of values is 0 to 0
  4940                           ; switch strategies available:
  4941                           ; Name         Instructions Cycles
  4942                           ; simple_byte            4     3 (average)
  4943                           ;	Chosen strategy is simple_byte
  4944  002AD0  0100               	movlb	0	; () banked
  4945  002AD2  5189               	movf	(??_Distribution+1)& (0+255),w,b
  4946  002AD4  0A00               	xorlw	0	; case 0
  4947  002AD6  A4D8               	btfss	status,2,c
  4948  002AD8  D00E               	goto	l6830
  4949                           
  4950                           ; BSR set to: 0
  4951                           ; Switch size 1, requested type "space"
  4952                           ; Number of cases is 4, Range of values is 0 to 3
  4953                           ; switch strategies available:
  4954                           ; Name         Instructions Cycles
  4955                           ; simple_byte           13     7 (average)
  4956                           ;	Chosen strategy is simple_byte
  4957  002ADA  0100               	movlb	0	; () banked
  4958  002ADC  5188               	movf	??_Distribution& (0+255),w,b
  4959  002ADE  0A00               	xorlw	0	; case 0
  4960  002AE0  B4D8               	btfsc	status,2,c
  4961  002AE2  D7BE               	goto	l6818
  4962  002AE4  0A01               	xorlw	1	; case 1
  4963  002AE6  B4D8               	btfsc	status,2,c
  4964  002AE8  D7C8               	goto	l6820
  4965  002AEA  0A03               	xorlw	3	; case 2
  4966  002AEC  B4D8               	btfsc	status,2,c
  4967  002AEE  D7D2               	goto	l6822
  4968  002AF0  0A01               	xorlw	1	; case 3
  4969  002AF2  B4D8               	btfsc	status,2,c
  4970  002AF4  D7DC               	goto	l6824
  4971  002AF6                     l6830:
  4972                           
  4973                           ;sort.c: 274: _delay((unsigned long)((2500)*(32000000/4000.0)));
  4974  002AF6  0E66               	movlw	102
  4975  002AF8  0100               	movlb	0	; () banked
  4976  002AFA  6F89               	movwf	(??_Distribution+1)& (0+255),b
  4977  002AFC  0E76               	movlw	118
  4978  002AFE  0100               	movlb	0	; () banked
  4979  002B00  6F88               	movwf	??_Distribution& (0+255),b
  4980  002B02  0EC1               	movlw	193
  4981  002B04                     u7767:
  4982  002B04  2EE8               	decfsz	wreg,f,c
  4983  002B06  D7FE               	bra	u7767
  4984  002B08  2F88               	decfsz	??_Distribution& (0+255),f,b
  4985  002B0A  D7FC               	bra	u7767
  4986  002B0C  2F89               	decfsz	(??_Distribution+1)& (0+255),f,b
  4987  002B0E  D7FA               	bra	u7767
  4988                           
  4989                           ;sort.c: 277: updateServoPosition(1050, 3);
  4990  002B10  0E04               	movlw	4
  4991  002B12  0100               	movlb	0	; () banked
  4992  002B14  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4993  002B16  0E1A               	movlw	26
  4994  002B18  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4995  002B1A  0E00               	movlw	0
  4996  002B1C  0100               	movlb	0	; () banked
  4997  002B1E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4998  002B20  0E03               	movlw	3
  4999  002B22  6F82               	movwf	updateServoPosition@timer& (0+255),b
  5000  002B24  ECBF  F01F         	call	_updateServoPosition	;wreg free
  5001                           
  5002                           ;sort.c: 278: _delay((unsigned long)((750)*(32000000/4000.0)));
  5003  002B28  0E1F               	movlw	31
  5004  002B2A  0100               	movlb	0	; () banked
  5005  002B2C  6F89               	movwf	(??_Distribution+1)& (0+255),b
  5006  002B2E  0E71               	movlw	113
  5007  002B30  0100               	movlb	0	; () banked
  5008  002B32  6F88               	movwf	??_Distribution& (0+255),b
  5009  002B34  0E1E               	movlw	30
  5010  002B36                     u7777:
  5011  002B36  2EE8               	decfsz	wreg,f,c
  5012  002B38  D7FE               	bra	u7777
  5013  002B3A  2F88               	decfsz	??_Distribution& (0+255),f,b
  5014  002B3C  D7FC               	bra	u7777
  5015  002B3E  2F89               	decfsz	(??_Distribution+1)& (0+255),f,b
  5016  002B40  D7FA               	bra	u7777
  5017  002B42  F000               	nop	
  5018                           
  5019                           ;sort.c: 279: updateServoPosition(1200, 1);
  5020  002B44  0E04               	movlw	4
  5021  002B46  0100               	movlb	0	; () banked
  5022  002B48  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  5023  002B4A  0EB0               	movlw	176
  5024  002B4C  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  5025  002B4E  0E00               	movlw	0
  5026  002B50  0100               	movlb	0	; () banked
  5027  002B52  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  5028  002B54  0E01               	movlw	1
  5029  002B56  6F82               	movwf	updateServoPosition@timer& (0+255),b
  5030  002B58  ECBF  F01F         	call	_updateServoPosition	;wreg free
  5031                           
  5032                           ;sort.c: 280: updateServoPosition(1050, 3);
  5033  002B5C  0E04               	movlw	4
  5034  002B5E  0100               	movlb	0	; () banked
  5035  002B60  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  5036  002B62  0E1A               	movlw	26
  5037  002B64  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  5038  002B66  0E00               	movlw	0
  5039  002B68  0100               	movlb	0	; () banked
  5040  002B6A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  5041  002B6C  0E03               	movlw	3
  5042  002B6E  6F82               	movwf	updateServoPosition@timer& (0+255),b
  5043  002B70  ECBF  F01F         	call	_updateServoPosition	;wreg free
  5044                           
  5045                           ;sort.c: 282: f_can_coming_to_distribution = 0;
  5046  002B74  0E00               	movlw	0
  5047  002B76  6E6C               	movwf	_f_can_coming_to_distribution+1,c
  5048  002B78  0E00               	movlw	0
  5049  002B7A  6E6B               	movwf	_f_can_coming_to_distribution,c
  5050                           
  5051                           ;sort.c: 283: f_can_distributed = 1;
  5052  002B7C  0E00               	movlw	0
  5053  002B7E  0101               	movlb	1	; () banked
  5054  002B80  6F30               	movwf	(_f_can_distributed+1)& (0+255),b
  5055  002B82  0E01               	movlw	1
  5056  002B84  6F2F               	movwf	_f_can_distributed& (0+255),b
  5057                           
  5058                           ; BSR set to: 1
  5059                           ;sort.c: 284: if(f_lastCan == 1){
  5060  002B86  0100               	movlb	0	; () banked
  5061  002B88  05E8               	decf	_f_lastCan& (0+255),w,b
  5062  002B8A  0100               	movlb	0	; () banked
  5063  002B8C  11E9               	iorwf	(_f_lastCan+1)& (0+255),w,b
  5064  002B8E  A4D8               	btfss	status,2,c
  5065  002B90  0012               	return	
  5066                           
  5067                           ; BSR set to: 0
  5068                           ;sort.c: 285: machine_state = DoneSorting_state;
  5069  002B92  0E02               	movlw	2
  5070  002B94  0100               	movlb	0	; () banked
  5071  002B96  6FFC               	movwf	_machine_state& (0+255),b
  5072                           
  5073                           ; BSR set to: 0
  5074  002B98  0012               	return	
  5075  002B9A                     __end_of_Distribution:
  5076                           	opt stack 0
  5077                           tblptru	equ	0xFF8
  5078                           tblptrh	equ	0xFF7
  5079                           tblptrl	equ	0xFF6
  5080                           tablat	equ	0xFF5
  5081                           prodh	equ	0xFF4
  5082                           prodl	equ	0xFF3
  5083                           postinc0	equ	0xFEE
  5084                           wreg	equ	0xFE8
  5085                           postdec1	equ	0xFE5
  5086                           fsr1l	equ	0xFE1
  5087                           indf2	equ	0xFDF
  5088                           postinc2	equ	0xFDE
  5089                           postdec2	equ	0xFDD
  5090                           fsr2h	equ	0xFDA
  5091                           fsr2l	equ	0xFD9
  5092                           status	equ	0xFD8
  5093                           
  5094 ;; *************** function _machineConfig *****************
  5095 ;; Defined at:
  5096 ;;		line 15 in file "MachineConfig.c"
  5097 ;; Parameters:    Size  Location     Type
  5098 ;;		None
  5099 ;; Auto vars:     Size  Location     Type
  5100 ;;		None
  5101 ;; Return value:  Size  Location     Type
  5102 ;;                  1    wreg      void 
  5103 ;; Registers used:
  5104 ;;		wreg, status,2
  5105 ;; Tracked objects:
  5106 ;;		On entry : 0/0
  5107 ;;		On exit  : 0/0
  5108 ;;		Unchanged: 0/0
  5109 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5110 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5111 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5112 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5113 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5114 ;;Total ram usage:        0 bytes
  5115 ;; Hardware stack levels used:    1
  5116 ;; Hardware stack levels required when called:    7
  5117 ;; This function calls:
  5118 ;;		Nothing
  5119 ;; This function is called by:
  5120 ;;		_main
  5121 ;; This function uses a non-reentrant model
  5122 ;;
  5123                           
  5124                           	psect	text12
  5125  004270                     __ptext12:
  5126                           	opt stack 0
  5127  004270                     _machineConfig:
  5128                           	opt stack 23
  5129                           
  5130                           ;MachineConfig.c: 17: OSCCON = 0xF0;
  5131                           
  5132                           ;incstack = 0
  5133  004270  0EF0               	movlw	240
  5134  004272  6ED3               	movwf	4051,c	;volatile
  5135                           
  5136                           ;MachineConfig.c: 18: OSCTUNEbits.PLLEN = 1;
  5137  004274  8C9B               	bsf	3995,6,c	;volatile
  5138                           
  5139                           ;MachineConfig.c: 22: TRISA = 0b00000111;
  5140  004276  0E07               	movlw	7
  5141  004278  6E92               	movwf	3986,c	;volatile
  5142                           
  5143                           ;MachineConfig.c: 24: TRISB = 0b11110010;
  5144  00427A  0EF2               	movlw	242
  5145  00427C  6E93               	movwf	3987,c	;volatile
  5146                           
  5147                           ;MachineConfig.c: 27: TRISC = 0x00;
  5148  00427E  0E00               	movlw	0
  5149  004280  6E94               	movwf	3988,c	;volatile
  5150                           
  5151                           ;MachineConfig.c: 31: TRISD = 0x00;
  5152  004282  0E00               	movlw	0
  5153  004284  6E95               	movwf	3989,c	;volatile
  5154                           
  5155                           ;MachineConfig.c: 34: TRISE = 0x00;
  5156  004286  0E00               	movlw	0
  5157  004288  6E96               	movwf	3990,c	;volatile
  5158                           
  5159                           ;MachineConfig.c: 37: LATA = 0x00;
  5160  00428A  0E00               	movlw	0
  5161  00428C  6E89               	movwf	3977,c	;volatile
  5162                           
  5163                           ;MachineConfig.c: 38: LATB = 0x00;
  5164  00428E  0E00               	movlw	0
  5165  004290  6E8A               	movwf	3978,c	;volatile
  5166                           
  5167                           ;MachineConfig.c: 39: LATC = 0x00;
  5168  004292  0E00               	movlw	0
  5169  004294  6E8B               	movwf	3979,c	;volatile
  5170                           
  5171                           ;MachineConfig.c: 40: LATD = 0x00;
  5172  004296  0E00               	movlw	0
  5173  004298  6E8C               	movwf	3980,c	;volatile
  5174                           
  5175                           ;MachineConfig.c: 41: LATE = 0x00;
  5176  00429A  0E00               	movlw	0
  5177  00429C  6E8D               	movwf	3981,c	;volatile
  5178                           
  5179                           ;MachineConfig.c: 43: nRBPU = 0;
  5180  00429E  9EF1               	bcf	intcon2,7,c	;volatile
  5181                           
  5182                           ;MachineConfig.c: 46: ADCON0 = 0x00;
  5183  0042A0  0E00               	movlw	0
  5184  0042A2  6EC2               	movwf	4034,c	;volatile
  5185                           
  5186                           ;MachineConfig.c: 47: ADCON1 = 0b00001101;
  5187  0042A4  0E0D               	movlw	13
  5188  0042A6  6EC1               	movwf	4033,c	;volatile
  5189                           
  5190                           ;MachineConfig.c: 50: CVRCON = 0x00;
  5191  0042A8  0E00               	movlw	0
  5192  0042AA  6EB5               	movwf	4021,c	;volatile
  5193                           
  5194                           ;MachineConfig.c: 51: CMCONbits.CIS = 0;
  5195  0042AC  96B4               	bcf	4020,3,c	;volatile
  5196                           
  5197                           ;MachineConfig.c: 52: ADCON2 = 0b10110001;
  5198  0042AE  0EB1               	movlw	177
  5199  0042B0  6EC0               	movwf	4032,c	;volatile
  5200                           
  5201                           ;MachineConfig.c: 55: INT1IE = 1;
  5202  0042B2  86F0               	bsf	intcon3,3,c	;volatile
  5203                           
  5204                           ;MachineConfig.c: 57: TMR0IE = 1;
  5205  0042B4  8AF2               	bsf	intcon,5,c	;volatile
  5206                           
  5207                           ;MachineConfig.c: 58: TMR1IE = 1;
  5208  0042B6  809D               	bsf	3997,0,c	;volatile
  5209                           
  5210                           ;MachineConfig.c: 59: T1CON = 0b10110000;
  5211  0042B8  0EB0               	movlw	176
  5212  0042BA  6ECD               	movwf	4045,c	;volatile
  5213                           
  5214                           ;MachineConfig.c: 60: T3CON = 0b10110000;
  5215  0042BC  0EB0               	movlw	176
  5216  0042BE  6EB1               	movwf	4017,c	;volatile
  5217                           
  5218                           ;MachineConfig.c: 61: TMR2IE = 1;
  5219  0042C0  829D               	bsf	3997,1,c	;volatile
  5220                           
  5221                           ;MachineConfig.c: 62: TMR3IE = 1;
  5222  0042C2  82A0               	bsf	4000,1,c	;volatile
  5223                           
  5224                           ;MachineConfig.c: 63: PEIE = 1;
  5225  0042C4  8CF2               	bsf	intcon,6,c	;volatile
  5226                           
  5227                           ;MachineConfig.c: 64: ADIE = 0;
  5228  0042C6  9C9D               	bcf	3997,6,c	;volatile
  5229                           
  5230                           ;MachineConfig.c: 65: (INTCONbits.GIE = 0);
  5231  0042C8  9EF2               	bcf	intcon,7,c	;volatile
  5232  0042CA  0012               	return		;funcret
  5233  0042CC                     __end_of_machineConfig:
  5234                           	opt stack 0
  5235                           tblptru	equ	0xFF8
  5236                           tblptrh	equ	0xFF7
  5237                           tblptrl	equ	0xFF6
  5238                           tablat	equ	0xFF5
  5239                           prodh	equ	0xFF4
  5240                           prodl	equ	0xFF3
  5241                           intcon	equ	0xFF2
  5242                           intcon2	equ	0xFF1
  5243                           intcon3	equ	0xFF0
  5244                           postinc0	equ	0xFEE
  5245                           wreg	equ	0xFE8
  5246                           postdec1	equ	0xFE5
  5247                           fsr1l	equ	0xFE1
  5248                           indf2	equ	0xFDF
  5249                           postinc2	equ	0xFDE
  5250                           postdec2	equ	0xFDD
  5251                           fsr2h	equ	0xFDA
  5252                           fsr2l	equ	0xFD9
  5253                           status	equ	0xFD8
  5254                           
  5255 ;; *************** function _logRun *****************
  5256 ;; Defined at:
  5257 ;;		line 84 in file "EEPROM.c"
  5258 ;; Parameters:    Size  Location     Type
  5259 ;;		None
  5260 ;; Auto vars:     Size  Location     Type
  5261 ;;  byte_i          1   53[BANK0 ] unsigned char 
  5262 ;;  i               2   55[BANK0 ] int 
  5263 ;;  num             1   49[BANK0 ] unsigned char 
  5264 ;;  addr            2   57[BANK0 ] unsigned short 
  5265 ;;  byte11          1   54[BANK0 ] unsigned char 
  5266 ;;  byte3           1   52[BANK0 ] unsigned char 
  5267 ;;  byte2           1   51[BANK0 ] unsigned char 
  5268 ;;  byte1           1   50[BANK0 ] unsigned char 
  5269 ;; Return value:  Size  Location     Type
  5270 ;;                  1    wreg      void 
  5271 ;; Registers used:
  5272 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5273 ;; Tracked objects:
  5274 ;;		On entry : 0/0
  5275 ;;		On exit  : 0/0
  5276 ;;		Unchanged: 0/0
  5277 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5278 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5279 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5280 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5281 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5282 ;;Total ram usage:       10 bytes
  5283 ;; Hardware stack levels used:    1
  5284 ;; Hardware stack levels required when called:   11
  5285 ;; This function calls:
  5286 ;;		_EEPROM_read
  5287 ;;		_EEPROM_write
  5288 ;; This function is called by:
  5289 ;;		_main
  5290 ;; This function uses a non-reentrant model
  5291 ;;
  5292                           
  5293                           	psect	text13
  5294  0032A6                     __ptext13:
  5295                           	opt stack 0
  5296  0032A6                     _logRun:
  5297                           	opt stack 19
  5298                           
  5299                           ;EEPROM.c: 97: sel = EEPROM_read(0);
  5300                           
  5301                           ;incstack = 0
  5302  0032A6  0E00               	movlw	0
  5303  0032A8  0100               	movlb	0	; () banked
  5304  0032AA  6F81               	movwf	(EEPROM_read@address+1)& (0+255),b
  5305  0032AC  0E00               	movlw	0
  5306  0032AE  6F80               	movwf	EEPROM_read@address& (0+255),b
  5307  0032B0  EC5B  F025         	call	_EEPROM_read	;wreg free
  5308  0032B4  0100               	movlb	0	; () banked
  5309  0032B6  6FFD               	movwf	_sel& (0+255),b
  5310                           
  5311                           ; BSR set to: 0
  5312                           ;EEPROM.c: 98: unsigned short addr = 1 + 11 * sel;
  5313  0032B8  0100               	movlb	0	; () banked
  5314  0032BA  51FD               	movf	_sel& (0+255),w,b
  5315  0032BC  0D0B               	mullw	11
  5316  0032BE  0E01               	movlw	1
  5317  0032C0  24F3               	addwf	prodl,w,c
  5318  0032C2  0100               	movlb	0	; () banked
  5319  0032C4  6FB9               	movwf	logRun@addr& (0+255),b
  5320  0032C6  0E00               	movlw	0
  5321  0032C8  20F4               	addwfc	prodh,w,c
  5322  0032CA  0100               	movlb	0	; () banked
  5323  0032CC  6FBA               	movwf	(logRun@addr+1)& (0+255),b
  5324                           
  5325                           ; BSR set to: 0
  5326                           ;EEPROM.c: 101: if (sel < 3){
  5327  0032CE  0E03               	movlw	3
  5328  0032D0  0100               	movlb	0	; () banked
  5329  0032D2  61FD               	cpfslt	_sel& (0+255),b
  5330  0032D4  D00E               	goto	l8332
  5331                           
  5332                           ; BSR set to: 0
  5333                           ;EEPROM.c: 102: unsigned char num = sel+1;
  5334  0032D6  0100               	movlb	0	; () banked
  5335  0032D8  29FD               	incf	_sel& (0+255),w,b
  5336  0032DA  0100               	movlb	0	; () banked
  5337  0032DC  6FB1               	movwf	logRun@num& (0+255),b
  5338                           
  5339                           ; BSR set to: 0
  5340                           ;EEPROM.c: 103: EEPROM_write(0, num);
  5341  0032DE  0E00               	movlw	0
  5342  0032E0  0100               	movlb	0	; () banked
  5343  0032E2  6FAC               	movwf	(EEPROM_write@address+1)& (0+255),b
  5344  0032E4  0E00               	movlw	0
  5345  0032E6  6FAB               	movwf	EEPROM_write@address& (0+255),b
  5346  0032E8  C0B1  F0AD         	movff	logRun@num,EEPROM_write@data
  5347  0032EC  EC0D  F01B         	call	_EEPROM_write	;wreg free
  5348                           
  5349                           ;EEPROM.c: 104: }
  5350  0032F0  D00A               	goto	l8334
  5351  0032F2                     l8332:
  5352                           
  5353                           ;EEPROM.c: 105: else{
  5354                           ;EEPROM.c: 106: EEPROM_write(0, 0);
  5355  0032F2  0E00               	movlw	0
  5356  0032F4  0100               	movlb	0	; () banked
  5357  0032F6  6FAC               	movwf	(EEPROM_write@address+1)& (0+255),b
  5358  0032F8  0E00               	movlw	0
  5359  0032FA  6FAB               	movwf	EEPROM_write@address& (0+255),b
  5360  0032FC  0E00               	movlw	0
  5361  0032FE  0100               	movlb	0	; () banked
  5362  003300  6FAD               	movwf	EEPROM_write@data& (0+255),b
  5363  003302  EC0D  F01B         	call	_EEPROM_write	;wreg free
  5364  003306                     l8334:
  5365                           
  5366                           ;EEPROM.c: 107: }
  5367                           ;EEPROM.c: 110: unsigned char byte1 = 0b10000000 | count_total;
  5368  003306  0100               	movlb	0	; () banked
  5369  003308  51FE               	movf	_count_total& (0+255),w,b
  5370  00330A  0980               	iorlw	128
  5371  00330C  0100               	movlb	0	; () banked
  5372  00330E  6FB2               	movwf	logRun@byte1& (0+255),b
  5373                           
  5374                           ; BSR set to: 0
  5375                           ;EEPROM.c: 111: EEPROM_write(addr, byte1);
  5376  003310  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  5377  003314  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  5378  003318  C0B2  F0AD         	movff	logRun@byte1,EEPROM_write@data
  5379  00331C  EC0D  F01B         	call	_EEPROM_write	;wreg free
  5380                           
  5381                           ;EEPROM.c: 112: addr++;
  5382  003320  0100               	movlb	0	; () banked
  5383  003322  4BB9               	infsnz	logRun@addr& (0+255),f,b
  5384  003324  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  5385                           
  5386                           ; BSR set to: 0
  5387                           ;EEPROM.c: 115: unsigned char byte2 = (count_pop_no_tab << 4) | count_pop_w_tab;
  5388  003326  385D               	swapf	_count_pop_no_tab,w,c
  5389  003328  0BF0               	andlw	240
  5390  00332A  105F               	iorwf	_count_pop_w_tab,w,c
  5391  00332C  0100               	movlb	0	; () banked
  5392  00332E  6FB3               	movwf	logRun@byte2& (0+255),b
  5393                           
  5394                           ; BSR set to: 0
  5395                           ;EEPROM.c: 116: EEPROM_write(addr, byte2);
  5396  003330  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  5397  003334  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  5398  003338  C0B3  F0AD         	movff	logRun@byte2,EEPROM_write@data
  5399  00333C  EC0D  F01B         	call	_EEPROM_write	;wreg free
  5400                           
  5401                           ;EEPROM.c: 117: addr++;
  5402  003340  0100               	movlb	0	; () banked
  5403  003342  4BB9               	infsnz	logRun@addr& (0+255),f,b
  5404  003344  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  5405                           
  5406                           ; BSR set to: 0
  5407                           ;EEPROM.c: 118: unsigned char byte3 = (count_can_w_lab << 4) | count_can_no_lab;
  5408  003346  0101               	movlb	1	; () banked
  5409  003348  392D               	swapf	_count_can_w_lab& (0+255),w,b
  5410  00334A  0BF0               	andlw	240
  5411  00334C  0101               	movlb	1	; () banked
  5412  00334E  112B               	iorwf	_count_can_no_lab& (0+255),w,b
  5413  003350  0100               	movlb	0	; () banked
  5414  003352  6FB4               	movwf	logRun@byte3& (0+255),b
  5415                           
  5416                           ; BSR set to: 0
  5417                           ;EEPROM.c: 119: EEPROM_write(addr, byte3);
  5418  003354  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  5419  003358  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  5420  00335C  C0B4  F0AD         	movff	logRun@byte3,EEPROM_write@data
  5421  003360  EC0D  F01B         	call	_EEPROM_write	;wreg free
  5422                           
  5423                           ;EEPROM.c: 120: addr++;
  5424  003364  0100               	movlb	0	; () banked
  5425  003366  4BB9               	infsnz	logRun@addr& (0+255),f,b
  5426  003368  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  5427                           
  5428                           ; BSR set to: 0
  5429                           ;EEPROM.c: 123: for(int i = 0; i < 7; i++){
  5430  00336A  0E00               	movlw	0
  5431  00336C  0100               	movlb	0	; () banked
  5432  00336E  6FB8               	movwf	(logRun@i+1)& (0+255),b
  5433  003370  0E00               	movlw	0
  5434  003372  6FB7               	movwf	logRun@i& (0+255),b
  5435                           
  5436                           ; BSR set to: 0
  5437  003374  0100               	movlb	0	; () banked
  5438  003376  BFB8               	btfsc	(logRun@i+1)& (0+255),7,b
  5439  003378  D008               	goto	l8358
  5440  00337A  0100               	movlb	0	; () banked
  5441  00337C  51B8               	movf	(logRun@i+1)& (0+255),w,b
  5442  00337E  E128               	bnz	l971
  5443  003380  0E07               	movlw	7
  5444  003382  0100               	movlb	0	; () banked
  5445  003384  5DB7               	subwf	logRun@i& (0+255),w,b
  5446  003386  B0D8               	btfsc	status,0,c
  5447  003388  D023               	goto	l971
  5448  00338A                     l8358:
  5449                           
  5450                           ; BSR set to: 0
  5451                           ;EEPROM.c: 124: unsigned char byte_i = startTime[i];
  5452  00338A  90D8               	bcf	status,0,c
  5453  00338C  0100               	movlb	0	; () banked
  5454  00338E  35B7               	rlcf	logRun@i& (0+255),w,b
  5455  003390  6ED9               	movwf	fsr2l,c
  5456  003392  0100               	movlb	0	; () banked
  5457  003394  35B8               	rlcf	(logRun@i+1)& (0+255),w,b
  5458  003396  6EDA               	movwf	fsr2h,c
  5459  003398  0E0E               	movlw	low _startTime
  5460  00339A  26D9               	addwf	fsr2l,f,c
  5461  00339C  0E01               	movlw	high _startTime
  5462  00339E  22DA               	addwfc	fsr2h,f,c
  5463  0033A0  50DF               	movf	indf2,w,c
  5464  0033A2  0100               	movlb	0	; () banked
  5465  0033A4  6FB5               	movwf	logRun@byte_i& (0+255),b
  5466                           
  5467                           ; BSR set to: 0
  5468                           ;EEPROM.c: 125: EEPROM_write(addr, byte_i);
  5469  0033A6  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  5470  0033AA  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  5471  0033AE  C0B5  F0AD         	movff	logRun@byte_i,EEPROM_write@data
  5472  0033B2  EC0D  F01B         	call	_EEPROM_write	;wreg free
  5473                           
  5474                           ;EEPROM.c: 126: addr++;
  5475  0033B6  0100               	movlb	0	; () banked
  5476  0033B8  4BB9               	infsnz	logRun@addr& (0+255),f,b
  5477  0033BA  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  5478                           
  5479                           ; BSR set to: 0
  5480  0033BC  0100               	movlb	0	; () banked
  5481  0033BE  4BB7               	infsnz	logRun@i& (0+255),f,b
  5482  0033C0  2BB8               	incf	(logRun@i+1)& (0+255),f,b
  5483                           
  5484                           ; BSR set to: 0
  5485  0033C2  0100               	movlb	0	; () banked
  5486  0033C4  BFB8               	btfsc	(logRun@i+1)& (0+255),7,b
  5487  0033C6  D7E1               	goto	l8358
  5488  0033C8  0100               	movlb	0	; () banked
  5489  0033CA  51B8               	movf	(logRun@i+1)& (0+255),w,b
  5490  0033CC  E101               	bnz	u7370
  5491  0033CE  D7D8               	goto	L6
  5492  0033D0                     u7370:
  5493  0033D0                     l971:
  5494                           
  5495                           ; BSR set to: 0
  5496                           ;EEPROM.c: 127: }
  5497                           ;EEPROM.c: 130: unsigned char byte11 = total_time;
  5498  0033D0  C0F8  F0B6         	movff	_total_time,logRun@byte11
  5499                           
  5500                           ; BSR set to: 0
  5501                           ;EEPROM.c: 131: EEPROM_write(addr, byte11);
  5502  0033D4  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  5503  0033D8  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  5504  0033DC  C0B6  F0AD         	movff	logRun@byte11,EEPROM_write@data
  5505  0033E0  EC0D  F01B         	call	_EEPROM_write	;wreg free
  5506  0033E4  0012               	return		;funcret
  5507  0033E6                     __end_of_logRun:
  5508                           	opt stack 0
  5509                           tblptru	equ	0xFF8
  5510                           tblptrh	equ	0xFF7
  5511                           tblptrl	equ	0xFF6
  5512                           tablat	equ	0xFF5
  5513                           prodh	equ	0xFF4
  5514                           prodl	equ	0xFF3
  5515                           intcon	equ	0xFF2
  5516                           intcon2	equ	0xFF1
  5517                           intcon3	equ	0xFF0
  5518                           postinc0	equ	0xFEE
  5519                           wreg	equ	0xFE8
  5520                           postdec1	equ	0xFE5
  5521                           fsr1l	equ	0xFE1
  5522                           indf2	equ	0xFDF
  5523                           postinc2	equ	0xFDE
  5524                           postdec2	equ	0xFDD
  5525                           fsr2h	equ	0xFDA
  5526                           fsr2l	equ	0xFD9
  5527                           status	equ	0xFD8
  5528                           
  5529 ;; *************** function _EEPROM_write *****************
  5530 ;; Defined at:
  5531 ;;		line 32 in file "EEPROM.c"
  5532 ;; Parameters:    Size  Location     Type
  5533 ;;  address         2   43[BANK0 ] unsigned short 
  5534 ;;  data            1   45[BANK0 ] unsigned char 
  5535 ;; Auto vars:     Size  Location     Type
  5536 ;;  i               1   48[BANK0 ] unsigned char 
  5537 ;;  i               1   47[BANK0 ] unsigned char 
  5538 ;; Return value:  Size  Location     Type
  5539 ;;                  1    wreg      void 
  5540 ;; Registers used:
  5541 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5542 ;; Tracked objects:
  5543 ;;		On entry : 0/0
  5544 ;;		On exit  : 0/0
  5545 ;;		Unchanged: 0/0
  5546 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5547 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5548 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5549 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5550 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5551 ;;Total ram usage:        6 bytes
  5552 ;; Hardware stack levels used:    1
  5553 ;; Hardware stack levels required when called:   10
  5554 ;; This function calls:
  5555 ;;		_EEPROM_read
  5556 ;;		_lcdInst
  5557 ;;		_printf
  5558 ;; This function is called by:
  5559 ;;		_Loading
  5560 ;;		_logRun
  5561 ;; This function uses a non-reentrant model
  5562 ;;
  5563                           
  5564                           	psect	text14
  5565  00361A                     __ptext14:
  5566                           	opt stack 0
  5567  00361A                     _EEPROM_write:
  5568                           	opt stack 18
  5569                           
  5570                           ;EEPROM.c: 33: EECON1bits.WREN = 1;
  5571                           
  5572                           ;incstack = 0
  5573  00361A  84A6               	bsf	4006,2,c	;volatile
  5574                           
  5575                           ;EEPROM.c: 36: EEADRH = (unsigned char)(address >> 8);
  5576  00361C  0100               	movlb	0	; () banked
  5577  00361E  51AC               	movf	(EEPROM_write@address+1)& (0+255),w,b
  5578  003620  6EAA               	movwf	4010,c	;volatile
  5579                           
  5580                           ; BSR set to: 0
  5581                           ;EEPROM.c: 37: EEADR = (unsigned char)address;
  5582  003622  C0AB  FFA9         	movff	EEPROM_write@address,4009	;volatile
  5583                           
  5584                           ; BSR set to: 0
  5585                           ;EEPROM.c: 39: EEDATA = data;
  5586  003626  C0AD  FFA8         	movff	EEPROM_write@data,4008	;volatile
  5587                           
  5588                           ; BSR set to: 0
  5589                           ;EEPROM.c: 40: EECON1bits.EEPGD = 0;
  5590  00362A  9EA6               	bcf	4006,7,c	;volatile
  5591                           
  5592                           ; BSR set to: 0
  5593                           ;EEPROM.c: 41: EECON1bits.CFGS = 0;
  5594  00362C  9CA6               	bcf	4006,6,c	;volatile
  5595                           
  5596                           ; BSR set to: 0
  5597                           ;EEPROM.c: 43: (INTCONbits.GIE = 0);
  5598  00362E  9EF2               	bcf	intcon,7,c	;volatile
  5599                           
  5600                           ;EEPROM.c: 45: EECON2 = 0x55;
  5601  003630  0E55               	movlw	85
  5602  003632  6EA7               	movwf	4007,c	;volatile
  5603                           
  5604                           ;EEPROM.c: 46: EECON2 = 0x0AA;
  5605  003634  0EAA               	movlw	170
  5606  003636  6EA7               	movwf	4007,c	;volatile
  5607                           
  5608                           ; BSR set to: 0
  5609                           ;EEPROM.c: 47: EECON1bits.WR = 1;
  5610  003638  82A6               	bsf	4006,1,c	;volatile
  5611                           
  5612                           ; BSR set to: 0
  5613                           ;EEPROM.c: 48: (INTCONbits.GIE = 1);
  5614  00363A  8EF2               	bsf	intcon,7,c	;volatile
  5615  00363C                     l949:
  5616  00363C  A8A1               	btfss	4001,4,c	;volatile
  5617  00363E  D7FE               	goto	l949
  5618                           
  5619                           ;EEPROM.c: 53: PIR2bits.EEIF = 0;
  5620  003640  98A1               	bcf	4001,4,c	;volatile
  5621                           
  5622                           ;EEPROM.c: 54: EECON1bits.WREN = 0;
  5623  003642  94A6               	bcf	4006,2,c	;volatile
  5624                           
  5625                           ;EEPROM.c: 57: if(debug){
  5626  003644  5061               	movf	_debug,w,c
  5627  003646  1062               	iorwf	_debug+1,w,c
  5628  003648  B4D8               	btfsc	status,2,c
  5629  00364A  0012               	return	
  5630                           
  5631                           ;EEPROM.c: 58: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  5632  00364C  0E01               	movlw	1
  5633  00364E  EC98  F025         	call	_lcdInst
  5634  003652  0E68               	movlw	104
  5635  003654  0100               	movlb	0	; () banked
  5636  003656  6FAE               	movwf	??_EEPROM_write& (0+255),b
  5637  003658  0EE4               	movlw	228
  5638  00365A                     u7787:
  5639  00365A  2EE8               	decfsz	wreg,f,c
  5640  00365C  D7FE               	bra	u7787
  5641  00365E  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  5642  003660  D7FC               	bra	u7787
  5643  003662  F000               	nop	
  5644                           
  5645                           ;EEPROM.c: 59: lcdInst(0b10000000);;
  5646  003664  0E80               	movlw	128
  5647  003666  EC98  F025         	call	_lcdInst
  5648                           
  5649                           ;EEPROM.c: 60: if(EEPROM_read(address)==data){
  5650  00366A  C0AB  F080         	movff	EEPROM_write@address,EEPROM_read@address
  5651  00366E  C0AC  F081         	movff	EEPROM_write@address+1,EEPROM_read@address+1
  5652  003672  EC5B  F025         	call	_EEPROM_read	;wreg free
  5653  003676  0100               	movlb	0	; () banked
  5654  003678  19AD               	xorwf	EEPROM_write@data& (0+255),w,b
  5655  00367A  A4D8               	btfss	status,2,c
  5656  00367C  D024               	goto	l6284
  5657                           
  5658                           ; BSR set to: 0
  5659                           ;EEPROM.c: 61: printf("(data: %u, addr: %u)", data, address);
  5660  00367E  0E34               	movlw	low STR_66
  5661  003680  0100               	movlb	0	; () banked
  5662  003682  6F8E               	movwf	printf@f& (0+255),b
  5663  003684  0EFB               	movlw	high STR_66
  5664  003686  0100               	movlb	0	; () banked
  5665  003688  6F8F               	movwf	(printf@f+1)& (0+255),b
  5666  00368A  C0AD  F090         	movff	EEPROM_write@data,?_printf+2
  5667  00368E  0100               	movlb	0	; () banked
  5668  003690  6B91               	clrf	(?_printf+3)& (0+255),b
  5669  003692  C0AB  F092         	movff	EEPROM_write@address,?_printf+4
  5670  003696  C0AC  F093         	movff	EEPROM_write@address+1,?_printf+5
  5671  00369A  ECB8  F008         	call	_printf	;wreg free
  5672                           
  5673                           ;EEPROM.c: 62: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));}
      +                          ;
  5674  00369E  0E00               	movlw	0
  5675  0036A0  0100               	movlb	0	; () banked
  5676  0036A2  6FAF               	movwf	EEPROM_write@i& (0+255),b
  5677  0036A4                     l6276:
  5678                           
  5679                           ; BSR set to: 0
  5680  0036A4  0E63               	movlw	99
  5681  0036A6  0100               	movlb	0	; () banked
  5682  0036A8  65AF               	cpfsgt	EEPROM_write@i& (0+255),b
  5683  0036AA  D001               	goto	l6280
  5684  0036AC  0012               	return	
  5685  0036AE                     l6280:
  5686                           
  5687                           ; BSR set to: 0
  5688  0036AE  0E68               	movlw	104
  5689  0036B0  0100               	movlb	0	; () banked
  5690  0036B2  6FAE               	movwf	??_EEPROM_write& (0+255),b
  5691  0036B4  0EE4               	movlw	228
  5692  0036B6                     u7797:
  5693  0036B6  2EE8               	decfsz	wreg,f,c
  5694  0036B8  D7FE               	bra	u7797
  5695  0036BA  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  5696  0036BC  D7FC               	bra	u7797
  5697  0036BE  F000               	nop	
  5698  0036C0  0100               	movlb	0	; () banked
  5699  0036C2  2BAF               	incf	EEPROM_write@i& (0+255),f,b
  5700  0036C4  D7EF               	goto	l6276
  5701  0036C6                     l6284:
  5702                           
  5703                           ; BSR set to: 0
  5704                           ;EEPROM.c: 64: else{ printf("FAILED"); for(char i=0;i<100;i++){_delay((unsigned long)((1
      +                          0)*(32000000/4000.0)));}; }
  5705  0036C6  0EBD               	movlw	low STR_67
  5706  0036C8  0100               	movlb	0	; () banked
  5707  0036CA  6F8E               	movwf	printf@f& (0+255),b
  5708  0036CC  0EFF               	movlw	high STR_67
  5709  0036CE  0100               	movlb	0	; () banked
  5710  0036D0  6F8F               	movwf	(printf@f+1)& (0+255),b
  5711  0036D2  ECB8  F008         	call	_printf	;wreg free
  5712  0036D6  0E00               	movlw	0
  5713  0036D8  0100               	movlb	0	; () banked
  5714  0036DA  6FB0               	movwf	EEPROM_write@i_1332& (0+255),b
  5715  0036DC                     l6288:
  5716                           
  5717                           ; BSR set to: 0
  5718  0036DC  0E63               	movlw	99
  5719  0036DE  0100               	movlb	0	; () banked
  5720  0036E0  65B0               	cpfsgt	EEPROM_write@i_1332& (0+255),b
  5721  0036E2  D001               	goto	l6292
  5722  0036E4  0012               	return	
  5723  0036E6                     l6292:
  5724                           
  5725                           ; BSR set to: 0
  5726  0036E6  0E68               	movlw	104
  5727  0036E8  0100               	movlb	0	; () banked
  5728  0036EA  6FAE               	movwf	??_EEPROM_write& (0+255),b
  5729  0036EC  0EE4               	movlw	228
  5730  0036EE                     u7807:
  5731  0036EE  2EE8               	decfsz	wreg,f,c
  5732  0036F0  D7FE               	bra	u7807
  5733  0036F2  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  5734  0036F4  D7FC               	bra	u7807
  5735  0036F6  F000               	nop	
  5736  0036F8  0100               	movlb	0	; () banked
  5737  0036FA  2BB0               	incf	EEPROM_write@i_1332& (0+255),f,b
  5738  0036FC  D7EF               	goto	l6288
  5739  0036FE                     __end_of_EEPROM_write:
  5740                           	opt stack 0
  5741                           tblptru	equ	0xFF8
  5742                           tblptrh	equ	0xFF7
  5743                           tblptrl	equ	0xFF6
  5744                           tablat	equ	0xFF5
  5745                           prodh	equ	0xFF4
  5746                           prodl	equ	0xFF3
  5747                           intcon	equ	0xFF2
  5748                           intcon2	equ	0xFF1
  5749                           intcon3	equ	0xFF0
  5750                           postinc0	equ	0xFEE
  5751                           wreg	equ	0xFE8
  5752                           postdec1	equ	0xFE5
  5753                           fsr1l	equ	0xFE1
  5754                           indf2	equ	0xFDF
  5755                           postinc2	equ	0xFDE
  5756                           postdec2	equ	0xFDD
  5757                           fsr2h	equ	0xFDA
  5758                           fsr2l	equ	0xFD9
  5759                           status	equ	0xFD8
  5760                           
  5761 ;; *************** function _EEPROM_read *****************
  5762 ;; Defined at:
  5763 ;;		line 68 in file "EEPROM.c"
  5764 ;; Parameters:    Size  Location     Type
  5765 ;;  address         2    0[BANK0 ] unsigned short 
  5766 ;; Auto vars:     Size  Location     Type
  5767 ;;		None
  5768 ;; Return value:  Size  Location     Type
  5769 ;;                  1    wreg      unsigned char 
  5770 ;; Registers used:
  5771 ;;		wreg, status,2
  5772 ;; Tracked objects:
  5773 ;;		On entry : 0/0
  5774 ;;		On exit  : 0/0
  5775 ;;		Unchanged: 0/0
  5776 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5777 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5778 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5779 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5780 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5781 ;;Total ram usage:        2 bytes
  5782 ;; Hardware stack levels used:    1
  5783 ;; Hardware stack levels required when called:    7
  5784 ;; This function calls:
  5785 ;;		Nothing
  5786 ;; This function is called by:
  5787 ;;		_Loading
  5788 ;;		_EEPROM_write
  5789 ;;		_logRun
  5790 ;; This function uses a non-reentrant model
  5791 ;;
  5792                           
  5793                           	psect	text15
  5794  004AB6                     __ptext15:
  5795                           	opt stack 0
  5796  004AB6                     _EEPROM_read:
  5797                           	opt stack 20
  5798                           
  5799                           ;EEPROM.c: 70: EEADRH = (unsigned char)(address >> 8);
  5800                           
  5801                           ;incstack = 0
  5802  004AB6  0100               	movlb	0	; () banked
  5803  004AB8  5181               	movf	(EEPROM_read@address+1)& (0+255),w,b
  5804  004ABA  6EAA               	movwf	4010,c	;volatile
  5805                           
  5806                           ; BSR set to: 0
  5807                           ;EEPROM.c: 71: EEADR = (unsigned char)address;
  5808  004ABC  C080  FFA9         	movff	EEPROM_read@address,4009	;volatile
  5809                           
  5810                           ; BSR set to: 0
  5811                           ;EEPROM.c: 73: EECON1bits.EEPGD = 0;
  5812  004AC0  9EA6               	bcf	4006,7,c	;volatile
  5813                           
  5814                           ; BSR set to: 0
  5815                           ;EEPROM.c: 74: EECON1bits.CFGS = 0;
  5816  004AC2  9CA6               	bcf	4006,6,c	;volatile
  5817                           
  5818                           ; BSR set to: 0
  5819                           ;EEPROM.c: 75: EECON1bits.RD = 1;
  5820  004AC4  80A6               	bsf	4006,0,c	;volatile
  5821  004AC6                     l962:
  5822  004AC6  B0A6               	btfsc	4006,0,c	;volatile
  5823  004AC8  D7FE               	goto	l962
  5824                           
  5825                           ;EEPROM.c: 81: return EEDATA;
  5826  004ACA  50A8               	movf	4008,w,c	;volatile
  5827  004ACC  0012               	return	
  5828  004ACE                     __end_of_EEPROM_read:
  5829                           	opt stack 0
  5830                           tblptru	equ	0xFF8
  5831                           tblptrh	equ	0xFF7
  5832                           tblptrl	equ	0xFF6
  5833                           tablat	equ	0xFF5
  5834                           prodh	equ	0xFF4
  5835                           prodl	equ	0xFF3
  5836                           intcon	equ	0xFF2
  5837                           intcon2	equ	0xFF1
  5838                           intcon3	equ	0xFF0
  5839                           postinc0	equ	0xFEE
  5840                           wreg	equ	0xFE8
  5841                           postdec1	equ	0xFE5
  5842                           fsr1l	equ	0xFE1
  5843                           indf2	equ	0xFDF
  5844                           postinc2	equ	0xFDE
  5845                           postdec2	equ	0xFDD
  5846                           fsr2h	equ	0xFDA
  5847                           fsr2l	equ	0xFD9
  5848                           status	equ	0xFD8
  5849                           
  5850 ;; *************** function _initUI *****************
  5851 ;; Defined at:
  5852 ;;		line 62 in file "UI.c"
  5853 ;; Parameters:    Size  Location     Type
  5854 ;;		None
  5855 ;; Auto vars:     Size  Location     Type
  5856 ;;		None
  5857 ;; Return value:  Size  Location     Type
  5858 ;;                  1    wreg      void 
  5859 ;; Registers used:
  5860 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5861 ;; Tracked objects:
  5862 ;;		On entry : 0/0
  5863 ;;		On exit  : 0/0
  5864 ;;		Unchanged: 0/0
  5865 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5866 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5867 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5868 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5869 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5870 ;;Total ram usage:        0 bytes
  5871 ;; Hardware stack levels used:    1
  5872 ;; Hardware stack levels required when called:   12
  5873 ;; This function calls:
  5874 ;;		_change_state_to_menu_start
  5875 ;;		_loadRTC
  5876 ;; This function is called by:
  5877 ;;		_main
  5878 ;; This function uses a non-reentrant model
  5879 ;;
  5880                           
  5881                           	psect	text16
  5882  004888                     __ptext16:
  5883                           	opt stack 0
  5884  004888                     _initUI:
  5885                           	opt stack 18
  5886                           
  5887                           ;UI.c: 63: (INTCONbits.GIE = 1);
  5888                           
  5889                           ;incstack = 0
  5890  004888  8EF2               	bsf	intcon,7,c	;volatile
  5891                           
  5892                           ;UI.c: 64: machine_state = UI_state;
  5893  00488A  0E00               	movlw	0
  5894  00488C  0100               	movlb	0	; () banked
  5895  00488E  6FFC               	movwf	_machine_state& (0+255),b
  5896                           
  5897                           ;UI.c: 65: logstate = 0;
  5898  004890  0E00               	movlw	0
  5899  004892  0100               	movlb	0	; () banked
  5900  004894  6FF7               	movwf	(_logstate+1)& (0+255),b
  5901  004896  0E00               	movlw	0
  5902  004898  6FF6               	movwf	_logstate& (0+255),b
  5903                           
  5904                           ; BSR set to: 0
  5905                           ;UI.c: 67: if(RTCflag){
  5906  00489A  0100               	movlb	0	; () banked
  5907  00489C  51E2               	movf	_RTCflag& (0+255),w,b
  5908  00489E  0100               	movlb	0	; () banked
  5909  0048A0  11E3               	iorwf	(_RTCflag+1)& (0+255),w,b
  5910  0048A2  A4D8               	btfss	status,2,c
  5911                           
  5912                           ; BSR set to: 0
  5913                           ;UI.c: 68: loadRTC();
  5914  0048A4  EC76  F01E         	call	_loadRTC	;wreg free
  5915                           
  5916                           ;UI.c: 69: }
  5917                           ;UI.c: 71: change_state_to_menu_start();
  5918  0048A8  EC89  F024         	call	_change_state_to_menu_start	;wreg free
  5919                           
  5920                           ;UI.c: 72: firstboot = 1;
  5921  0048AC  0E00               	movlw	0
  5922  0048AE  6E70               	movwf	_firstboot+1,c
  5923  0048B0  0E01               	movlw	1
  5924  0048B2  6E6F               	movwf	_firstboot,c
  5925  0048B4  0012               	return		;funcret
  5926  0048B6                     __end_of_initUI:
  5927                           	opt stack 0
  5928                           tblptru	equ	0xFF8
  5929                           tblptrh	equ	0xFF7
  5930                           tblptrl	equ	0xFF6
  5931                           tablat	equ	0xFF5
  5932                           prodh	equ	0xFF4
  5933                           prodl	equ	0xFF3
  5934                           intcon	equ	0xFF2
  5935                           intcon2	equ	0xFF1
  5936                           intcon3	equ	0xFF0
  5937                           postinc0	equ	0xFEE
  5938                           wreg	equ	0xFE8
  5939                           postdec1	equ	0xFE5
  5940                           fsr1l	equ	0xFE1
  5941                           indf2	equ	0xFDF
  5942                           postinc2	equ	0xFDE
  5943                           postdec2	equ	0xFDD
  5944                           fsr2h	equ	0xFDA
  5945                           fsr2l	equ	0xFD9
  5946                           status	equ	0xFD8
  5947                           
  5948 ;; *************** function _loadRTC *****************
  5949 ;; Defined at:
  5950 ;;		line 28 in file "RTC.c"
  5951 ;; Parameters:    Size  Location     Type
  5952 ;;		None
  5953 ;; Auto vars:     Size  Location     Type
  5954 ;;  i               2   22[BANK0 ] int 
  5955 ;; Return value:  Size  Location     Type
  5956 ;;                  1    wreg      void 
  5957 ;; Registers used:
  5958 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5959 ;; Tracked objects:
  5960 ;;		On entry : 0/0
  5961 ;;		On exit  : 0/0
  5962 ;;		Unchanged: 0/0
  5963 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5964 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5965 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5966 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5967 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5968 ;;Total ram usage:        3 bytes
  5969 ;; Hardware stack levels used:    1
  5970 ;; Hardware stack levels required when called:    9
  5971 ;; This function calls:
  5972 ;;		_I2C_Master_Init
  5973 ;;		_I2C_Master_Start
  5974 ;;		_I2C_Master_Stop
  5975 ;;		_I2C_Master_Write
  5976 ;; This function is called by:
  5977 ;;		_initUI
  5978 ;; This function uses a non-reentrant model
  5979 ;;
  5980                           
  5981                           	psect	text17
  5982  003CEC                     __ptext17:
  5983                           	opt stack 0
  5984  003CEC                     _loadRTC:
  5985                           	opt stack 20
  5986                           
  5987                           ;RTC.c: 30: I2C_Master_Init(10000);
  5988                           
  5989                           ;incstack = 0
  5990  003CEC  0E10               	movlw	16
  5991  003CEE  0100               	movlb	0	; () banked
  5992  003CF0  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  5993  003CF2  0E27               	movlw	39
  5994  003CF4  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  5995  003CF6  0E00               	movlw	0
  5996  003CF8  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  5997  003CFA  0E00               	movlw	0
  5998  003CFC  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  5999  003CFE  EC08  F021         	call	_I2C_Master_Init	;wreg free
  6000                           
  6001                           ;RTC.c: 32: (INTCONbits.GIE = 0);
  6002  003D02  9EF2               	bcf	intcon,7,c	;volatile
  6003                           
  6004                           ;RTC.c: 34: I2C_Master_Start();
  6005  003D04  ECBE  F025         	call	_I2C_Master_Start	;wreg free
  6006                           
  6007                           ;RTC.c: 35: I2C_Master_Write(0b11010000);
  6008  003D08  0E00               	movlw	0
  6009  003D0A  0100               	movlb	0	; () banked
  6010  003D0C  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  6011  003D0E  0ED0               	movlw	208
  6012  003D10  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  6013  003D12  ECAC  F025         	call	_I2C_Master_Write	;wreg free
  6014                           
  6015                           ;RTC.c: 36: I2C_Master_Write(0x00);
  6016  003D16  0E00               	movlw	0
  6017  003D18  0100               	movlb	0	; () banked
  6018  003D1A  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  6019  003D1C  0E00               	movlw	0
  6020  003D1E  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  6021  003D20  ECAC  F025         	call	_I2C_Master_Write	;wreg free
  6022                           
  6023                           ;RTC.c: 37: for(int i = 0; i<7; i++){
  6024  003D24  0E00               	movlw	0
  6025  003D26  0100               	movlb	0	; () banked
  6026  003D28  6F97               	movwf	(loadRTC@i+1)& (0+255),b
  6027  003D2A  0E00               	movlw	0
  6028  003D2C  6F96               	movwf	loadRTC@i& (0+255),b
  6029  003D2E                     l6430:
  6030                           
  6031                           ; BSR set to: 0
  6032  003D2E  0100               	movlb	0	; () banked
  6033  003D30  BF97               	btfsc	(loadRTC@i+1)& (0+255),7,b
  6034  003D32  D008               	goto	l6434
  6035  003D34  0100               	movlb	0	; () banked
  6036  003D36  5197               	movf	(loadRTC@i+1)& (0+255),w,b
  6037  003D38  E11B               	bnz	l6440
  6038  003D3A  0E07               	movlw	7
  6039  003D3C  0100               	movlb	0	; () banked
  6040  003D3E  5D96               	subwf	loadRTC@i& (0+255),w,b
  6041  003D40  B0D8               	btfsc	status,0,c
  6042  003D42  D016               	goto	l6440
  6043  003D44                     l6434:
  6044                           
  6045                           ; BSR set to: 0
  6046                           ;RTC.c: 38: I2C_Master_Write(time[i]);
  6047  003D44  0E24               	movlw	low _time
  6048  003D46  0100               	movlb	0	; () banked
  6049  003D48  2596               	addwf	loadRTC@i& (0+255),w,b
  6050  003D4A  6ED9               	movwf	fsr2l,c
  6051  003D4C  0E01               	movlw	high _time
  6052  003D4E  0100               	movlb	0	; () banked
  6053  003D50  2197               	addwfc	(loadRTC@i+1)& (0+255),w,b
  6054  003D52  6EDA               	movwf	fsr2h,c
  6055  003D54  50DF               	movf	indf2,w,c
  6056  003D56  0100               	movlb	0	; () banked
  6057  003D58  6F95               	movwf	??_loadRTC& (0+255),b
  6058  003D5A  0100               	movlb	0	; () banked
  6059  003D5C  5195               	movf	??_loadRTC& (0+255),w,b
  6060  003D5E  0100               	movlb	0	; () banked
  6061  003D60  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  6062  003D62  6B82               	clrf	(I2C_Master_Write@d+1)& (0+255),b
  6063  003D64  ECAC  F025         	call	_I2C_Master_Write	;wreg free
  6064  003D68  0100               	movlb	0	; () banked
  6065  003D6A  4B96               	infsnz	loadRTC@i& (0+255),f,b
  6066  003D6C  2B97               	incf	(loadRTC@i+1)& (0+255),f,b
  6067  003D6E  D7DF               	goto	l6430
  6068  003D70                     l6440:
  6069                           
  6070                           ; BSR set to: 0
  6071                           ;RTC.c: 39: }
  6072                           ;RTC.c: 40: I2C_Master_Stop();
  6073  003D70  ECBA  F025         	call	_I2C_Master_Stop	;wreg free
  6074                           
  6075                           ;RTC.c: 41: (INTCONbits.GIE = 1);
  6076  003D74  8EF2               	bsf	intcon,7,c	;volatile
  6077  003D76  0012               	return		;funcret
  6078  003D78                     __end_of_loadRTC:
  6079                           	opt stack 0
  6080                           tblptru	equ	0xFF8
  6081                           tblptrh	equ	0xFF7
  6082                           tblptrl	equ	0xFF6
  6083                           tablat	equ	0xFF5
  6084                           prodh	equ	0xFF4
  6085                           prodl	equ	0xFF3
  6086                           intcon	equ	0xFF2
  6087                           intcon2	equ	0xFF1
  6088                           intcon3	equ	0xFF0
  6089                           postinc0	equ	0xFEE
  6090                           wreg	equ	0xFE8
  6091                           postdec1	equ	0xFE5
  6092                           fsr1l	equ	0xFE1
  6093                           indf2	equ	0xFDF
  6094                           postinc2	equ	0xFDE
  6095                           postdec2	equ	0xFDD
  6096                           fsr2h	equ	0xFDA
  6097                           fsr2l	equ	0xFD9
  6098                           status	equ	0xFD8
  6099                           
  6100 ;; *************** function _I2C_Master_Init *****************
  6101 ;; Defined at:
  6102 ;;		line 15 in file "I2C.c"
  6103 ;; Parameters:    Size  Location     Type
  6104 ;;  c               4   13[BANK0 ] const unsigned long 
  6105 ;; Auto vars:     Size  Location     Type
  6106 ;;		None
  6107 ;; Return value:  Size  Location     Type
  6108 ;;                  1    wreg      void 
  6109 ;; Registers used:
  6110 ;;		wreg, status,2, status,0, cstack
  6111 ;; Tracked objects:
  6112 ;;		On entry : 0/0
  6113 ;;		On exit  : 0/0
  6114 ;;		Unchanged: 0/0
  6115 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6116 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6117 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6118 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6119 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6120 ;;Total ram usage:        8 bytes
  6121 ;; Hardware stack levels used:    1
  6122 ;; Hardware stack levels required when called:    8
  6123 ;; This function calls:
  6124 ;;		___lldiv
  6125 ;; This function is called by:
  6126 ;;		_main
  6127 ;;		_loadRTC
  6128 ;; This function uses a non-reentrant model
  6129 ;;
  6130                           
  6131                           	psect	text18
  6132  004210                     __ptext18:
  6133                           	opt stack 0
  6134  004210                     _I2C_Master_Init:
  6135                           	opt stack 20
  6136                           
  6137                           ;I2C.c: 18: SSPSTAT = 0b00000000;
  6138                           
  6139                           ;incstack = 0
  6140  004210  0E00               	movlw	0
  6141  004212  6EC7               	movwf	4039,c	;volatile
  6142                           
  6143                           ;I2C.c: 19: SSPCON1 = 0b00101000;
  6144  004214  0E28               	movlw	40
  6145  004216  6EC6               	movwf	4038,c	;volatile
  6146                           
  6147                           ;I2C.c: 20: SSPCON2 = 0b00000000;
  6148  004218  0E00               	movlw	0
  6149  00421A  6EC5               	movwf	4037,c	;volatile
  6150                           
  6151                           ;I2C.c: 21: SSPADD = (32000000/(4*c))-1;
  6152  00421C  0E00               	movlw	0
  6153  00421E  0100               	movlb	0	; () banked
  6154  004220  6F80               	movwf	___lldiv@dividend& (0+255),b
  6155  004222  0E48               	movlw	72
  6156  004224  6F81               	movwf	(___lldiv@dividend+1)& (0+255),b
  6157  004226  0EE8               	movlw	232
  6158  004228  6F82               	movwf	(___lldiv@dividend+2)& (0+255),b
  6159  00422A  0E01               	movlw	1
  6160  00422C  6F83               	movwf	(___lldiv@dividend+3)& (0+255),b
  6161  00422E  C08D  F091         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  6162  004232  C08E  F092         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  6163  004236  C08F  F093         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  6164  00423A  C090  F094         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  6165  00423E  0E02               	movlw	2
  6166  004240                     u4735:
  6167  004240  90D8               	bcf	status,0,c
  6168  004242  0100               	movlb	0	; () banked
  6169  004244  3791               	rlcf	??_I2C_Master_Init& (0+255),f,b
  6170  004246  3792               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
  6171  004248  3793               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
  6172  00424A  3794               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
  6173  00424C  2EE8               	decfsz	wreg,f,c
  6174  00424E  D7F8               	goto	u4735
  6175  004250  C091  F084         	movff	??_I2C_Master_Init,___lldiv@divisor
  6176  004254  C092  F085         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  6177  004258  C093  F086         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  6178  00425C  C094  F087         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  6179  004260  EC72  F01D         	call	___lldiv	;wreg free
  6180  004264  0100               	movlb	0	; () banked
  6181  004266  0580               	decf	?___lldiv& (0+255),w,b
  6182  004268  6EC8               	movwf	4040,c	;volatile
  6183                           
  6184                           ; BSR set to: 0
  6185                           ;I2C.c: 22: TRISC3 = 1;
  6186  00426A  8694               	bsf	3988,3,c	;volatile
  6187                           
  6188                           ; BSR set to: 0
  6189                           ;I2C.c: 23: TRISC4 = 1;
  6190  00426C  8894               	bsf	3988,4,c	;volatile
  6191                           
  6192                           ; BSR set to: 0
  6193  00426E  0012               	return		;funcret
  6194  004270                     __end_of_I2C_Master_Init:
  6195                           	opt stack 0
  6196                           tblptru	equ	0xFF8
  6197                           tblptrh	equ	0xFF7
  6198                           tblptrl	equ	0xFF6
  6199                           tablat	equ	0xFF5
  6200                           prodh	equ	0xFF4
  6201                           prodl	equ	0xFF3
  6202                           intcon	equ	0xFF2
  6203                           intcon2	equ	0xFF1
  6204                           intcon3	equ	0xFF0
  6205                           postinc0	equ	0xFEE
  6206                           wreg	equ	0xFE8
  6207                           postdec1	equ	0xFE5
  6208                           fsr1l	equ	0xFE1
  6209                           indf2	equ	0xFDF
  6210                           postinc2	equ	0xFDE
  6211                           postdec2	equ	0xFDD
  6212                           fsr2h	equ	0xFDA
  6213                           fsr2l	equ	0xFD9
  6214                           status	equ	0xFD8
  6215                           
  6216 ;; *************** function ___lldiv *****************
  6217 ;; Defined at:
  6218 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  6219 ;; Parameters:    Size  Location     Type
  6220 ;;  dividend        4    0[BANK0 ] unsigned long 
  6221 ;;  divisor         4    4[BANK0 ] unsigned long 
  6222 ;; Auto vars:     Size  Location     Type
  6223 ;;  quotient        4    8[BANK0 ] unsigned long 
  6224 ;;  counter         1   12[BANK0 ] unsigned char 
  6225 ;; Return value:  Size  Location     Type
  6226 ;;                  4    0[BANK0 ] unsigned long 
  6227 ;; Registers used:
  6228 ;;		wreg, status,2, status,0
  6229 ;; Tracked objects:
  6230 ;;		On entry : 0/0
  6231 ;;		On exit  : 0/0
  6232 ;;		Unchanged: 0/0
  6233 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6234 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6235 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6236 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6237 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6238 ;;Total ram usage:       13 bytes
  6239 ;; Hardware stack levels used:    1
  6240 ;; Hardware stack levels required when called:    7
  6241 ;; This function calls:
  6242 ;;		Nothing
  6243 ;; This function is called by:
  6244 ;;		_I2C_Master_Init
  6245 ;; This function uses a non-reentrant model
  6246 ;;
  6247                           
  6248                           	psect	text19
  6249  003AE4                     __ptext19:
  6250                           	opt stack 0
  6251  003AE4                     ___lldiv:
  6252                           	opt stack 20
  6253                           
  6254                           ; BSR set to: 0
  6255                           ;incstack = 0
  6256  003AE4  0E00               	movlw	0
  6257  003AE6  0100               	movlb	0	; () banked
  6258  003AE8  6F88               	movwf	___lldiv@quotient& (0+255),b
  6259  003AEA  0E00               	movlw	0
  6260  003AEC  6F89               	movwf	(___lldiv@quotient+1)& (0+255),b
  6261  003AEE  0E00               	movlw	0
  6262  003AF0  6F8A               	movwf	(___lldiv@quotient+2)& (0+255),b
  6263  003AF2  0E00               	movlw	0
  6264  003AF4  6F8B               	movwf	(___lldiv@quotient+3)& (0+255),b
  6265                           
  6266                           ; BSR set to: 0
  6267  003AF6  0100               	movlb	0	; () banked
  6268  003AF8  5184               	movf	___lldiv@divisor& (0+255),w,b
  6269  003AFA  0100               	movlb	0	; () banked
  6270  003AFC  1185               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  6271  003AFE  0100               	movlb	0	; () banked
  6272  003B00  1186               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  6273  003B02  0100               	movlb	0	; () banked
  6274  003B04  1187               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  6275  003B06  B4D8               	btfsc	status,2,c
  6276  003B08  D042               	goto	l1714
  6277                           
  6278                           ; BSR set to: 0
  6279  003B0A  0E01               	movlw	1
  6280  003B0C  0100               	movlb	0	; () banked
  6281  003B0E  6F8C               	movwf	___lldiv@counter& (0+255),b
  6282  003B10  D008               	goto	l5854
  6283  003B12                     l5852:
  6284                           
  6285                           ; BSR set to: 0
  6286  003B12  0100               	movlb	0	; () banked
  6287  003B14  90D8               	bcf	status,0,c
  6288  003B16  3784               	rlcf	___lldiv@divisor& (0+255),f,b
  6289  003B18  3785               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  6290  003B1A  3786               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  6291  003B1C  3787               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  6292  003B1E  0100               	movlb	0	; () banked
  6293  003B20  2B8C               	incf	___lldiv@counter& (0+255),f,b
  6294  003B22                     l5854:
  6295                           
  6296                           ; BSR set to: 0
  6297  003B22  0100               	movlb	0	; () banked
  6298  003B24  AF87               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  6299  003B26  D7F5               	goto	l5852
  6300  003B28                     l5856:
  6301                           
  6302                           ; BSR set to: 0
  6303  003B28  0100               	movlb	0	; () banked
  6304  003B2A  90D8               	bcf	status,0,c
  6305  003B2C  3788               	rlcf	___lldiv@quotient& (0+255),f,b
  6306  003B2E  3789               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  6307  003B30  378A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  6308  003B32  378B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  6309                           
  6310                           ; BSR set to: 0
  6311  003B34  0100               	movlb	0	; () banked
  6312  003B36  5184               	movf	___lldiv@divisor& (0+255),w,b
  6313  003B38  0100               	movlb	0	; () banked
  6314  003B3A  5D80               	subwf	___lldiv@dividend& (0+255),w,b
  6315  003B3C  0100               	movlb	0	; () banked
  6316  003B3E  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  6317  003B40  0100               	movlb	0	; () banked
  6318  003B42  5981               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  6319  003B44  0100               	movlb	0	; () banked
  6320  003B46  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  6321  003B48  0100               	movlb	0	; () banked
  6322  003B4A  5982               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  6323  003B4C  0100               	movlb	0	; () banked
  6324  003B4E  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  6325  003B50  0100               	movlb	0	; () banked
  6326  003B52  5983               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  6327  003B54  A0D8               	btfss	status,0,c
  6328  003B56  D012               	goto	l5864
  6329                           
  6330                           ; BSR set to: 0
  6331  003B58  0100               	movlb	0	; () banked
  6332  003B5A  5184               	movf	___lldiv@divisor& (0+255),w,b
  6333  003B5C  0100               	movlb	0	; () banked
  6334  003B5E  5F80               	subwf	___lldiv@dividend& (0+255),f,b
  6335  003B60  0100               	movlb	0	; () banked
  6336  003B62  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  6337  003B64  0100               	movlb	0	; () banked
  6338  003B66  5B81               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  6339  003B68  0100               	movlb	0	; () banked
  6340  003B6A  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  6341  003B6C  0100               	movlb	0	; () banked
  6342  003B6E  5B82               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  6343  003B70  0100               	movlb	0	; () banked
  6344  003B72  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  6345  003B74  0100               	movlb	0	; () banked
  6346  003B76  5B83               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  6347                           
  6348                           ; BSR set to: 0
  6349  003B78  0100               	movlb	0	; () banked
  6350  003B7A  8188               	bsf	___lldiv@quotient& (0+255),0,b
  6351  003B7C                     l5864:
  6352                           
  6353                           ; BSR set to: 0
  6354  003B7C  0100               	movlb	0	; () banked
  6355  003B7E  90D8               	bcf	status,0,c
  6356  003B80  3387               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  6357  003B82  3386               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  6358  003B84  3385               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  6359  003B86  3384               	rrcf	___lldiv@divisor& (0+255),f,b
  6360                           
  6361                           ; BSR set to: 0
  6362  003B88  0100               	movlb	0	; () banked
  6363  003B8A  2F8C               	decfsz	___lldiv@counter& (0+255),f,b
  6364  003B8C  D7CD               	goto	l5856
  6365  003B8E                     l1714:
  6366                           
  6367                           ; BSR set to: 0
  6368  003B8E  C088  F080         	movff	___lldiv@quotient,?___lldiv
  6369  003B92  C089  F081         	movff	___lldiv@quotient+1,?___lldiv+1
  6370  003B96  C08A  F082         	movff	___lldiv@quotient+2,?___lldiv+2
  6371  003B9A  C08B  F083         	movff	___lldiv@quotient+3,?___lldiv+3
  6372                           
  6373                           ; BSR set to: 0
  6374  003B9E  0012               	return		;funcret
  6375  003BA0                     __end_of___lldiv:
  6376                           	opt stack 0
  6377                           tblptru	equ	0xFF8
  6378                           tblptrh	equ	0xFF7
  6379                           tblptrl	equ	0xFF6
  6380                           tablat	equ	0xFF5
  6381                           prodh	equ	0xFF4
  6382                           prodl	equ	0xFF3
  6383                           intcon	equ	0xFF2
  6384                           intcon2	equ	0xFF1
  6385                           intcon3	equ	0xFF0
  6386                           postinc0	equ	0xFEE
  6387                           wreg	equ	0xFE8
  6388                           postdec1	equ	0xFE5
  6389                           fsr1l	equ	0xFE1
  6390                           indf2	equ	0xFDF
  6391                           postinc2	equ	0xFDE
  6392                           postdec2	equ	0xFDD
  6393                           fsr2h	equ	0xFDA
  6394                           fsr2l	equ	0xFD9
  6395                           status	equ	0xFD8
  6396                           
  6397 ;; *************** function _change_state_to_menu_start *****************
  6398 ;; Defined at:
  6399 ;;		line 474 in file "UI.c"
  6400 ;; Parameters:    Size  Location     Type
  6401 ;;		None
  6402 ;; Auto vars:     Size  Location     Type
  6403 ;;		None
  6404 ;; Return value:  Size  Location     Type
  6405 ;;                  1    wreg      void 
  6406 ;; Registers used:
  6407 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6408 ;; Tracked objects:
  6409 ;;		On entry : 0/0
  6410 ;;		On exit  : 0/0
  6411 ;;		Unchanged: 0/0
  6412 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6413 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6414 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6415 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6416 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6417 ;;Total ram usage:        0 bytes
  6418 ;; Hardware stack levels used:    1
  6419 ;; Hardware stack levels required when called:   11
  6420 ;; This function calls:
  6421 ;;		_lcdInst
  6422 ;;		_printRTC
  6423 ;;		_printf
  6424 ;; This function is called by:
  6425 ;;		_initUI
  6426 ;; This function uses a non-reentrant model
  6427 ;;
  6428                           
  6429                           	psect	text20
  6430  004912                     __ptext20:
  6431                           	opt stack 0
  6432  004912                     _change_state_to_menu_start:
  6433                           	opt stack 18
  6434                           
  6435                           ;UI.c: 475: cur_state = 0;
  6436                           
  6437                           ; BSR set to: 0
  6438                           ;incstack = 0
  6439  004912  0E00               	movlw	0
  6440  004914  0100               	movlb	0	; () banked
  6441  004916  6FE7               	movwf	(_cur_state+1)& (0+255),b
  6442  004918  0E00               	movlw	0
  6443  00491A  6FE6               	movwf	_cur_state& (0+255),b
  6444                           
  6445                           ; BSR set to: 0
  6446                           ;UI.c: 477: lcdInst(0b10000000);;
  6447  00491C  0E80               	movlw	128
  6448  00491E  EC98  F025         	call	_lcdInst
  6449                           
  6450                           ;UI.c: 478: printRTC();
  6451  004922  ECCC  F00F         	call	_printRTC	;wreg free
  6452                           
  6453                           ;UI.c: 479: lcdInst(0b11000000);;
  6454  004926  0EC0               	movlw	192
  6455  004928  EC98  F025         	call	_lcdInst
  6456                           
  6457                           ;UI.c: 480: printf("PUSH TO CONTINUE");
  6458  00492C  0EF7               	movlw	low STR_30
  6459  00492E  0100               	movlb	0	; () banked
  6460  004930  6F8E               	movwf	printf@f& (0+255),b
  6461  004932  0EFD               	movlw	high STR_30
  6462  004934  0100               	movlb	0	; () banked
  6463  004936  6F8F               	movwf	(printf@f+1)& (0+255),b
  6464  004938  ECB8  F008         	call	_printf	;wreg free
  6465  00493C  0012               	return		;funcret
  6466  00493E                     __end_of_change_state_to_menu_start:
  6467                           	opt stack 0
  6468                           tblptru	equ	0xFF8
  6469                           tblptrh	equ	0xFF7
  6470                           tblptrl	equ	0xFF6
  6471                           tablat	equ	0xFF5
  6472                           prodh	equ	0xFF4
  6473                           prodl	equ	0xFF3
  6474                           intcon	equ	0xFF2
  6475                           intcon2	equ	0xFF1
  6476                           intcon3	equ	0xFF0
  6477                           postinc0	equ	0xFEE
  6478                           wreg	equ	0xFE8
  6479                           postdec1	equ	0xFE5
  6480                           fsr1l	equ	0xFE1
  6481                           indf2	equ	0xFDF
  6482                           postinc2	equ	0xFDE
  6483                           postdec2	equ	0xFDD
  6484                           fsr2h	equ	0xFDA
  6485                           fsr2l	equ	0xFD9
  6486                           status	equ	0xFD8
  6487                           
  6488 ;; *************** function _initTime *****************
  6489 ;; Defined at:
  6490 ;;		line 17 in file "RTC.c"
  6491 ;; Parameters:    Size  Location     Type
  6492 ;;  s               1    wreg     unsigned char 
  6493 ;;  m               1    0[BANK0 ] unsigned char 
  6494 ;;  h               1    1[BANK0 ] unsigned char 
  6495 ;;  w               1    2[BANK0 ] unsigned char 
  6496 ;;  DD              1    3[BANK0 ] unsigned char 
  6497 ;;  MM              1    4[BANK0 ] unsigned char 
  6498 ;;  YY              1    5[BANK0 ] unsigned char 
  6499 ;; Auto vars:     Size  Location     Type
  6500 ;;  s               1    6[BANK0 ] unsigned char 
  6501 ;; Return value:  Size  Location     Type
  6502 ;;                  1    wreg      void 
  6503 ;; Registers used:
  6504 ;;		wreg
  6505 ;; Tracked objects:
  6506 ;;		On entry : 0/0
  6507 ;;		On exit  : 0/0
  6508 ;;		Unchanged: 0/0
  6509 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6510 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6511 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6512 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6513 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6514 ;;Total ram usage:        7 bytes
  6515 ;; Hardware stack levels used:    1
  6516 ;; Hardware stack levels required when called:    7
  6517 ;; This function calls:
  6518 ;;		Nothing
  6519 ;; This function is called by:
  6520 ;;		_main
  6521 ;; This function uses a non-reentrant model
  6522 ;;
  6523                           
  6524                           	psect	text21
  6525  004A76                     __ptext21:
  6526                           	opt stack 0
  6527  004A76                     _initTime:
  6528                           	opt stack 23
  6529                           
  6530                           ;incstack = 0
  6531                           ;initTime@s stored from wreg
  6532  004A76  0100               	movlb	0	; () banked
  6533  004A78  6F86               	movwf	initTime@s& (0+255),b
  6534                           
  6535                           ;RTC.c: 19: time[0] = s;
  6536  004A7A  C086  F124         	movff	initTime@s,_time
  6537                           
  6538                           ;RTC.c: 20: time[1] = m;
  6539  004A7E  C080  F125         	movff	initTime@m,_time+1
  6540                           
  6541                           ;RTC.c: 21: time[2] = h;
  6542  004A82  C081  F126         	movff	initTime@h,_time+2
  6543                           
  6544                           ;RTC.c: 22: time[3] = w;
  6545  004A86  C082  F127         	movff	initTime@w,_time+3
  6546                           
  6547                           ;RTC.c: 23: time[4] = DD;
  6548  004A8A  C083  F128         	movff	initTime@DD,_time+4
  6549                           
  6550                           ;RTC.c: 24: time[5] = MM;
  6551  004A8E  C084  F129         	movff	initTime@MM,_time+5
  6552                           
  6553                           ;RTC.c: 25: time[6] = YY;
  6554  004A92  C085  F12A         	movff	initTime@YY,_time+6
  6555  004A96  0012               	return		;funcret
  6556  004A98                     __end_of_initTime:
  6557                           	opt stack 0
  6558                           tblptru	equ	0xFF8
  6559                           tblptrh	equ	0xFF7
  6560                           tblptrl	equ	0xFF6
  6561                           tablat	equ	0xFF5
  6562                           prodh	equ	0xFF4
  6563                           prodl	equ	0xFF3
  6564                           intcon	equ	0xFF2
  6565                           intcon2	equ	0xFF1
  6566                           intcon3	equ	0xFF0
  6567                           postinc0	equ	0xFEE
  6568                           wreg	equ	0xFE8
  6569                           postdec1	equ	0xFE5
  6570                           fsr1l	equ	0xFE1
  6571                           indf2	equ	0xFDF
  6572                           postinc2	equ	0xFDE
  6573                           postdec2	equ	0xFDD
  6574                           fsr2h	equ	0xFDA
  6575                           fsr2l	equ	0xFD9
  6576                           status	equ	0xFD8
  6577                           
  6578 ;; *************** function _initLCD *****************
  6579 ;; Defined at:
  6580 ;;		line 48 in file "lcd.c"
  6581 ;; Parameters:    Size  Location     Type
  6582 ;;		None
  6583 ;; Auto vars:     Size  Location     Type
  6584 ;;		None
  6585 ;; Return value:  Size  Location     Type
  6586 ;;                  1    wreg      void 
  6587 ;; Registers used:
  6588 ;;		wreg, status,2, status,0, cstack
  6589 ;; Tracked objects:
  6590 ;;		On entry : 0/0
  6591 ;;		On exit  : 0/0
  6592 ;;		Unchanged: 0/0
  6593 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6594 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6595 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6596 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6597 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6598 ;;Total ram usage:        1 bytes
  6599 ;; Hardware stack levels used:    1
  6600 ;; Hardware stack levels required when called:    9
  6601 ;; This function calls:
  6602 ;;		_lcdInst
  6603 ;; This function is called by:
  6604 ;;		_main
  6605 ;; This function uses a non-reentrant model
  6606 ;;
  6607                           
  6608                           	psect	text22
  6609  004510                     __ptext22:
  6610                           	opt stack 0
  6611  004510                     _initLCD:
  6612                           	opt stack 21
  6613                           
  6614                           ;lcd.c: 49: _delay((unsigned long)((15)*(32000000/4000.0)));
  6615                           
  6616                           ;incstack = 0
  6617  004510  0E9C               	movlw	156
  6618  004512  0100               	movlb	0	; () banked
  6619  004514  6F83               	movwf	??_initLCD& (0+255),b
  6620  004516  0ED7               	movlw	215
  6621  004518                     u7817:
  6622  004518  2EE8               	decfsz	wreg,f,c
  6623  00451A  D7FE               	bra	u7817
  6624  00451C  2F83               	decfsz	??_initLCD& (0+255),f,b
  6625  00451E  D7FC               	bra	u7817
  6626                           
  6627                           ;lcd.c: 50: lcdInst(0b00110011);
  6628  004520  0E33               	movlw	51
  6629  004522  EC98  F025         	call	_lcdInst
  6630                           
  6631                           ;lcd.c: 51: lcdInst(0b00110010);
  6632  004526  0E32               	movlw	50
  6633  004528  EC98  F025         	call	_lcdInst
  6634                           
  6635                           ;lcd.c: 53: lcdInst(0b00101000);
  6636  00452C  0E28               	movlw	40
  6637  00452E  EC98  F025         	call	_lcdInst
  6638                           
  6639                           ;lcd.c: 54: lcdInst(0b00001100);
  6640  004532  0E0C               	movlw	12
  6641  004534  EC98  F025         	call	_lcdInst
  6642                           
  6643                           ;lcd.c: 55: lcdInst(0b00000110);
  6644  004538  0E06               	movlw	6
  6645  00453A  EC98  F025         	call	_lcdInst
  6646                           
  6647                           ;lcd.c: 56: lcdInst(0b00000001);
  6648  00453E  0E01               	movlw	1
  6649  004540  EC98  F025         	call	_lcdInst
  6650                           
  6651                           ;lcd.c: 57: _delay((unsigned long)((15)*(32000000/4000.0)));
  6652  004544  0E9C               	movlw	156
  6653  004546  0100               	movlb	0	; () banked
  6654  004548  6F83               	movwf	??_initLCD& (0+255),b
  6655  00454A  0ED7               	movlw	215
  6656  00454C                     u7827:
  6657  00454C  2EE8               	decfsz	wreg,f,c
  6658  00454E  D7FE               	bra	u7827
  6659  004550  2F83               	decfsz	??_initLCD& (0+255),f,b
  6660  004552  D7FC               	bra	u7827
  6661  004554  0012               	return		;funcret
  6662  004556                     __end_of_initLCD:
  6663                           	opt stack 0
  6664                           tblptru	equ	0xFF8
  6665                           tblptrh	equ	0xFF7
  6666                           tblptrl	equ	0xFF6
  6667                           tablat	equ	0xFF5
  6668                           prodh	equ	0xFF4
  6669                           prodl	equ	0xFF3
  6670                           intcon	equ	0xFF2
  6671                           intcon2	equ	0xFF1
  6672                           intcon3	equ	0xFF0
  6673                           postinc0	equ	0xFEE
  6674                           wreg	equ	0xFE8
  6675                           postdec1	equ	0xFE5
  6676                           fsr1l	equ	0xFE1
  6677                           indf2	equ	0xFDF
  6678                           postinc2	equ	0xFDE
  6679                           postdec2	equ	0xFDD
  6680                           fsr2h	equ	0xFDA
  6681                           fsr2l	equ	0xFD9
  6682                           status	equ	0xFD8
  6683                           
  6684 ;; *************** function _UI *****************
  6685 ;; Defined at:
  6686 ;;		line 76 in file "UI.c"
  6687 ;; Parameters:    Size  Location     Type
  6688 ;;		None
  6689 ;; Auto vars:     Size  Location     Type
  6690 ;;  i               1   73[BANK0 ] unsigned char 
  6691 ;;  i               1   85[BANK0 ] unsigned char 
  6692 ;;  i               1   84[BANK0 ] unsigned char 
  6693 ;;  i               1   83[BANK0 ] unsigned char 
  6694 ;;  i               1   82[BANK0 ] unsigned char 
  6695 ;;  i               1   81[BANK0 ] unsigned char 
  6696 ;;  i               1   80[BANK0 ] unsigned char 
  6697 ;;  i               1   79[BANK0 ] unsigned char 
  6698 ;;  i               1   78[BANK0 ] unsigned char 
  6699 ;;  i               1   77[BANK0 ] unsigned char 
  6700 ;;  i               1   76[BANK0 ] unsigned char 
  6701 ;;  i               1   75[BANK0 ] unsigned char 
  6702 ;;  i               1   74[BANK0 ] unsigned char 
  6703 ;;  month           4   86[BANK0 ] unsigned char [4]
  6704 ;;  i               1   72[BANK0 ] unsigned char 
  6705 ;; Return value:  Size  Location     Type
  6706 ;;                  1    wreg      void 
  6707 ;; Registers used:
  6708 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6709 ;; Tracked objects:
  6710 ;;		On entry : 0/0
  6711 ;;		On exit  : 0/0
  6712 ;;		Unchanged: 0/0
  6713 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6714 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6715 ;;      Locals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6716 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6717 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6718 ;;Total ram usage:       22 bytes
  6719 ;; Hardware stack levels used:    1
  6720 ;; Hardware stack levels required when called:   11
  6721 ;; This function calls:
  6722 ;;		___awdiv
  6723 ;;		___awmod
  6724 ;;		_change_state_to_menu_12
  6725 ;;		_change_state_to_menu_22
  6726 ;;		_lcdInst
  6727 ;;		_printRTC
  6728 ;;		_printf
  6729 ;;		_strcpy
  6730 ;; This function is called by:
  6731 ;;		_main
  6732 ;; This function uses a non-reentrant model
  6733 ;;
  6734                           
  6735                           	psect	text23
  6736  0008CA                     __ptext23:
  6737                           	opt stack 0
  6738  0008CA                     _UI:
  6739                           	opt stack 19
  6740                           
  6741                           ;UI.c: 77: if(machine_state == DoneSorting_state){
  6742                           
  6743                           ;incstack = 0
  6744  0008CA  0E02               	movlw	2
  6745  0008CC  0100               	movlb	0	; () banked
  6746  0008CE  19FC               	xorwf	_machine_state& (0+255),w,b
  6747  0008D0  A4D8               	btfss	status,2,c
  6748  0008D2  D075               	goto	l7760
  6749                           
  6750                           ; BSR set to: 0
  6751                           ;UI.c: 78: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  6752  0008D4  0E01               	movlw	1
  6753  0008D6  EC98  F025         	call	_lcdInst
  6754  0008DA  0E68               	movlw	104
  6755  0008DC  0100               	movlb	0	; () banked
  6756  0008DE  6FC4               	movwf	??_UI& (0+255),b
  6757  0008E0  0EE4               	movlw	228
  6758  0008E2                     u7837:
  6759  0008E2  2EE8               	decfsz	wreg,f,c
  6760  0008E4  D7FE               	bra	u7837
  6761  0008E6  2FC4               	decfsz	??_UI& (0+255),f,b
  6762  0008E8  D7FC               	bra	u7837
  6763  0008EA  F000               	nop	
  6764                           
  6765                           ;UI.c: 79: lcdInst(0b10000000);;
  6766  0008EC  0E80               	movlw	128
  6767  0008EE  EC98  F025         	call	_lcdInst
  6768                           
  6769                           ;UI.c: 80: printf("RESULTS IN LOG %d", sel+1);
  6770  0008F2  0EA3               	movlw	low STR_1
  6771  0008F4  0100               	movlb	0	; () banked
  6772  0008F6  6F8E               	movwf	printf@f& (0+255),b
  6773  0008F8  0EFB               	movlw	high STR_1
  6774  0008FA  0100               	movlb	0	; () banked
  6775  0008FC  6F8F               	movwf	(printf@f+1)& (0+255),b
  6776  0008FE  0E01               	movlw	1
  6777  000900  0100               	movlb	0	; () banked
  6778  000902  25FD               	addwf	_sel& (0+255),w,b
  6779  000904  0100               	movlb	0	; () banked
  6780  000906  6F90               	movwf	(?_printf+2)& (0+255),b
  6781  000908  0100               	movlb	0	; () banked
  6782  00090A  6B91               	clrf	(?_printf+3)& (0+255),b
  6783  00090C  0E00               	movlw	0
  6784  00090E  2391               	addwfc	(?_printf+3)& (0+255),f,b
  6785  000910  ECB8  F008         	call	_printf	;wreg free
  6786                           
  6787                           ;UI.c: 81: lcdInst(0b11000000);;
  6788  000914  0EC0               	movlw	192
  6789  000916  EC98  F025         	call	_lcdInst
  6790                           
  6791                           ;UI.c: 82: printf("TIME: %d:%02d", (total_time % 3600) / 60, (total_time % 3600) % 60);
  6792  00091A  0E0E               	movlw	14
  6793  00091C  0100               	movlb	0	; () banked
  6794  00091E  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  6795  000920  0E10               	movlw	16
  6796  000922  6F82               	movwf	___awmod@divisor& (0+255),b
  6797  000924  C0F8  F080         	movff	_total_time,___awmod@dividend
  6798  000928  C0F9  F081         	movff	_total_time+1,___awmod@dividend+1
  6799  00092C  EC25  F01E         	call	___awmod	;wreg free
  6800  000930  C080  F0C6         	movff	?___awmod,_UI$2317
  6801  000934  C081  F0C7         	movff	?___awmod+1,_UI$2317+1
  6802                           
  6803                           ;UI.c: 82: printf("TIME: %d:%02d", (total_time % 3600) / 60, (total_time % 3600) % 60);
  6804  000938  0E27               	movlw	low STR_2
  6805  00093A  0100               	movlb	0	; () banked
  6806  00093C  6F8E               	movwf	printf@f& (0+255),b
  6807  00093E  0EFF               	movlw	high STR_2
  6808  000940  0100               	movlb	0	; () banked
  6809  000942  6F8F               	movwf	(printf@f+1)& (0+255),b
  6810  000944  0E0E               	movlw	14
  6811  000946  0100               	movlb	0	; () banked
  6812  000948  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  6813  00094A  0E10               	movlw	16
  6814  00094C  6F82               	movwf	___awmod@divisor& (0+255),b
  6815  00094E  C0F8  F080         	movff	_total_time,___awmod@dividend
  6816  000952  C0F9  F081         	movff	_total_time+1,___awmod@dividend+1
  6817  000956  EC25  F01E         	call	___awmod	;wreg free
  6818  00095A  C080  F086         	movff	?___awmod,___awdiv@dividend
  6819  00095E  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  6820  000962  0E00               	movlw	0
  6821  000964  0100               	movlb	0	; () banked
  6822  000966  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  6823  000968  0E3C               	movlw	60
  6824  00096A  6F88               	movwf	___awdiv@divisor& (0+255),b
  6825  00096C  EC13  F01D         	call	___awdiv	;wreg free
  6826  000970  C086  F090         	movff	?___awdiv,?_printf+2
  6827  000974  C087  F091         	movff	?___awdiv+1,?_printf+3
  6828  000978  C0C6  F080         	movff	_UI$2317,___awmod@dividend
  6829  00097C  C0C7  F081         	movff	_UI$2317+1,___awmod@dividend+1
  6830  000980  0E00               	movlw	0
  6831  000982  0100               	movlb	0	; () banked
  6832  000984  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  6833  000986  0E3C               	movlw	60
  6834  000988  6F82               	movwf	___awmod@divisor& (0+255),b
  6835  00098A  EC25  F01E         	call	___awmod	;wreg free
  6836  00098E  C080  F092         	movff	?___awmod,?_printf+4
  6837  000992  C081  F093         	movff	?___awmod+1,?_printf+5
  6838  000996  ECB8  F008         	call	_printf	;wreg free
  6839                           
  6840                           ;UI.c: 83: machine_state = UI_state;
  6841  00099A  0E00               	movlw	0
  6842  00099C  0100               	movlb	0	; () banked
  6843  00099E  6FFC               	movwf	_machine_state& (0+255),b
  6844  0009A0                     l180:
  6845  0009A0  A281               	btfss	3969,1,c	;volatile
  6846  0009A2  D7FE               	goto	l180
  6847                           
  6848                           ;UI.c: 86: }
  6849                           ;UI.c: 87: if(cur_state==12){
  6850  0009A4  0E0C               	movlw	12
  6851  0009A6  0100               	movlb	0	; () banked
  6852  0009A8  19E6               	xorwf	_cur_state& (0+255),w,b
  6853  0009AA  0100               	movlb	0	; () banked
  6854  0009AC  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
  6855  0009AE  A4D8               	btfss	status,2,c
  6856  0009B0  D003               	goto	l7758
  6857                           
  6858                           ; BSR set to: 0
  6859                           ;UI.c: 88: change_state_to_menu_12();
  6860  0009B2  ECE8  F022         	call	_change_state_to_menu_12	;wreg free
  6861                           
  6862                           ;UI.c: 89: }
  6863  0009B6  D3D5               	goto	l8080
  6864  0009B8                     l7758:
  6865                           
  6866                           ;UI.c: 90: else{
  6867                           ;UI.c: 91: change_state_to_menu_22();
  6868  0009B8  ECCC  F022         	call	_change_state_to_menu_22	;wreg free
  6869                           
  6870                           ;UI.c: 92: }
  6871                           ;UI.c: 93: }
  6872  0009BC  D3D2               	goto	l8080
  6873  0009BE                     l7760:
  6874                           
  6875                           ;UI.c: 94: else if(cur_state == 0){
  6876  0009BE  0100               	movlb	0	; () banked
  6877  0009C0  51E6               	movf	_cur_state& (0+255),w,b
  6878  0009C2  0100               	movlb	0	; () banked
  6879  0009C4  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
  6880  0009C6  A4D8               	btfss	status,2,c
  6881  0009C8  D3CC               	goto	l8080
  6882                           
  6883                           ; BSR set to: 0
  6884                           ;UI.c: 95: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
  6885  0009CA  0E00               	movlw	0
  6886  0009CC  0100               	movlb	0	; () banked
  6887  0009CE  6FC8               	movwf	UI@i& (0+255),b
  6888  0009D0                     l7764:
  6889                           
  6890                           ; BSR set to: 0
  6891  0009D0  0E63               	movlw	99
  6892  0009D2  0100               	movlb	0	; () banked
  6893  0009D4  65C8               	cpfsgt	UI@i& (0+255),b
  6894  0009D6  D001               	goto	l7768
  6895  0009D8  D00C               	goto	l7772
  6896  0009DA                     l7768:
  6897                           
  6898                           ; BSR set to: 0
  6899  0009DA  0E68               	movlw	104
  6900  0009DC  0100               	movlb	0	; () banked
  6901  0009DE  6FC4               	movwf	??_UI& (0+255),b
  6902  0009E0  0EE4               	movlw	228
  6903  0009E2                     u7847:
  6904  0009E2  2EE8               	decfsz	wreg,f,c
  6905  0009E4  D7FE               	bra	u7847
  6906  0009E6  2FC4               	decfsz	??_UI& (0+255),f,b
  6907  0009E8  D7FC               	bra	u7847
  6908  0009EA  F000               	nop	
  6909  0009EC  0100               	movlb	0	; () banked
  6910  0009EE  2BC8               	incf	UI@i& (0+255),f,b
  6911  0009F0  D7EF               	goto	l7764
  6912  0009F2                     l7772:
  6913                           
  6914                           ; BSR set to: 0
  6915                           ;UI.c: 96: if(cur_state == 0){
  6916  0009F2  0100               	movlb	0	; () banked
  6917  0009F4  51E6               	movf	_cur_state& (0+255),w,b
  6918  0009F6  0100               	movlb	0	; () banked
  6919  0009F8  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
  6920  0009FA  A4D8               	btfss	status,2,c
  6921  0009FC  D3B2               	goto	l8080
  6922                           
  6923                           ; BSR set to: 0
  6924                           ;UI.c: 97: printRTC();
  6925  0009FE  ECCC  F00F         	call	_printRTC	;wreg free
  6926                           
  6927                           ;UI.c: 98: }
  6928                           ;UI.c: 99: }
  6929                           ;UI.c: 100: while(logstate){
  6930  000A02  D3AF               	goto	l8080
  6931  000A04                     l7776:
  6932                           
  6933                           ;UI.c: 102: if(!log_completion){
  6934  000A04  0100               	movlb	0	; () banked
  6935  000A06  51EE               	movf	_log_completion& (0+255),w,b
  6936  000A08  0100               	movlb	0	; () banked
  6937  000A0A  11EF               	iorwf	(_log_completion+1)& (0+255),w,b
  6938  000A0C  A4D8               	btfss	status,2,c
  6939  000A0E  D041               	goto	l7806
  6940                           
  6941                           ; BSR set to: 0
  6942                           ;UI.c: 103: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  6943  000A10  0E01               	movlw	1
  6944  000A12  EC98  F025         	call	_lcdInst
  6945  000A16  0E68               	movlw	104
  6946  000A18  0100               	movlb	0	; () banked
  6947  000A1A  6FC4               	movwf	??_UI& (0+255),b
  6948  000A1C  0EE4               	movlw	228
  6949  000A1E                     u7857:
  6950  000A1E  2EE8               	decfsz	wreg,f,c
  6951  000A20  D7FE               	bra	u7857
  6952  000A22  2FC4               	decfsz	??_UI& (0+255),f,b
  6953  000A24  D7FC               	bra	u7857
  6954  000A26  F000               	nop	
  6955                           
  6956                           ;UI.c: 104: lcdInst(0b10000000);;
  6957  000A28  0E80               	movlw	128
  6958  000A2A  EC98  F025         	call	_lcdInst
  6959                           
  6960                           ;UI.c: 105: printf("-- LOG %2d HERE--", log);
  6961  000A2E  0E91               	movlw	low STR_3
  6962  000A30  0100               	movlb	0	; () banked
  6963  000A32  6F8E               	movwf	printf@f& (0+255),b
  6964  000A34  0EFB               	movlw	high STR_3
  6965  000A36  0100               	movlb	0	; () banked
  6966  000A38  6F8F               	movwf	(printf@f+1)& (0+255),b
  6967  000A3A  C0EC  F090         	movff	_log,?_printf+2
  6968  000A3E  C0ED  F091         	movff	_log+1,?_printf+3
  6969  000A42  ECB8  F008         	call	_printf	;wreg free
  6970                           
  6971                           ;UI.c: 106: lcdInst(0b11000000);;
  6972  000A46  0EC0               	movlw	192
  6973  000A48  EC98  F025         	call	_lcdInst
  6974                           
  6975                           ;UI.c: 107: printf("DIDN'T COMPLETE");
  6976  000A4C  0E4A               	movlw	low STR_4
  6977  000A4E  0100               	movlb	0	; () banked
  6978  000A50  6F8E               	movwf	printf@f& (0+255),b
  6979  000A52  0EFE               	movlw	high STR_4
  6980  000A54  0100               	movlb	0	; () banked
  6981  000A56  6F8F               	movwf	(printf@f+1)& (0+255),b
  6982  000A58  ECB8  F008         	call	_printf	;wreg free
  6983  000A5C                     l7790:
  6984  000A5C  0E00               	movlw	0
  6985  000A5E  0100               	movlb	0	; () banked
  6986  000A60  6FC9               	movwf	UI@i_409& (0+255),b
  6987  000A62                     l7792:
  6988                           
  6989                           ; BSR set to: 0
  6990  000A62  0E63               	movlw	99
  6991  000A64  0100               	movlb	0	; () banked
  6992  000A66  65C9               	cpfsgt	UI@i_409& (0+255),b
  6993  000A68  D001               	goto	l7796
  6994  000A6A  D00C               	goto	l7800
  6995  000A6C                     l7796:
  6996                           
  6997                           ; BSR set to: 0
  6998  000A6C  0E68               	movlw	104
  6999  000A6E  0100               	movlb	0	; () banked
  7000  000A70  6FC4               	movwf	??_UI& (0+255),b
  7001  000A72  0EE4               	movlw	228
  7002  000A74                     u7867:
  7003  000A74  2EE8               	decfsz	wreg,f,c
  7004  000A76  D7FE               	bra	u7867
  7005  000A78  2FC4               	decfsz	??_UI& (0+255),f,b
  7006  000A7A  D7FC               	bra	u7867
  7007  000A7C  F000               	nop	
  7008  000A7E  0100               	movlb	0	; () banked
  7009  000A80  2BC9               	incf	UI@i_409& (0+255),f,b
  7010  000A82  D7EF               	goto	l7792
  7011  000A84                     l7800:
  7012                           
  7013                           ; BSR set to: 0
  7014  000A84  0100               	movlb	0	; () banked
  7015  000A86  51F6               	movf	_logstate& (0+255),w,b
  7016  000A88  0100               	movlb	0	; () banked
  7017  000A8A  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7018  000A8C  B4D8               	btfsc	status,2,c
  7019  000A8E  0012               	return	
  7020  000A90  D7E5               	goto	l7790
  7021  000A92                     l7806:
  7022                           
  7023                           ; BSR set to: 0
  7024                           ;UI.c: 111: else{
  7025                           ;UI.c: 112: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7026  000A92  0E01               	movlw	1
  7027  000A94  EC98  F025         	call	_lcdInst
  7028  000A98  0E68               	movlw	104
  7029  000A9A  0100               	movlb	0	; () banked
  7030  000A9C  6FC4               	movwf	??_UI& (0+255),b
  7031  000A9E  0EE4               	movlw	228
  7032  000AA0                     u7877:
  7033  000AA0  2EE8               	decfsz	wreg,f,c
  7034  000AA2  D7FE               	bra	u7877
  7035  000AA4  2FC4               	decfsz	??_UI& (0+255),f,b
  7036  000AA6  D7FC               	bra	u7877
  7037  000AA8  F000               	nop	
  7038                           
  7039                           ;UI.c: 113: lcdInst(0b10000000);;
  7040  000AAA  0E80               	movlw	128
  7041  000AAC  EC98  F025         	call	_lcdInst
  7042                           
  7043                           ;UI.c: 114: printf("-- LOG %2d HERE--", log);
  7044  000AB0  0E91               	movlw	low STR_3
  7045  000AB2  0100               	movlb	0	; () banked
  7046  000AB4  6F8E               	movwf	printf@f& (0+255),b
  7047  000AB6  0EFB               	movlw	high STR_3
  7048  000AB8  0100               	movlb	0	; () banked
  7049  000ABA  6F8F               	movwf	(printf@f+1)& (0+255),b
  7050  000ABC  C0EC  F090         	movff	_log,?_printf+2
  7051  000AC0  C0ED  F091         	movff	_log+1,?_printf+3
  7052  000AC4  ECB8  F008         	call	_printf	;wreg free
  7053                           
  7054                           ;UI.c: 115: lcdInst(0b11000000);;
  7055  000AC8  0EC0               	movlw	192
  7056  000ACA  EC98  F025         	call	_lcdInst
  7057                           
  7058                           ;UI.c: 116: printf("PAUSE < | BACK >");
  7059  000ACE  0EE6               	movlw	low STR_6
  7060  000AD0  0100               	movlb	0	; () banked
  7061  000AD2  6F8E               	movwf	printf@f& (0+255),b
  7062  000AD4  0EFD               	movlw	high STR_6
  7063  000AD6  0100               	movlb	0	; () banked
  7064  000AD8  6F8F               	movwf	(printf@f+1)& (0+255),b
  7065  000ADA  ECB8  F008         	call	_printf	;wreg free
  7066                           
  7067                           ;UI.c: 118: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7068  000ADE  0E00               	movlw	0
  7069  000AE0  0100               	movlb	0	; () banked
  7070  000AE2  6FCA               	movwf	UI@i_412& (0+255),b
  7071  000AE4                     l7820:
  7072                           
  7073                           ; BSR set to: 0
  7074  000AE4  0E63               	movlw	99
  7075  000AE6  0100               	movlb	0	; () banked
  7076  000AE8  65CA               	cpfsgt	UI@i_412& (0+255),b
  7077  000AEA  D001               	goto	l7824
  7078  000AEC  D00C               	goto	l7828
  7079  000AEE                     l7824:
  7080                           
  7081                           ; BSR set to: 0
  7082  000AEE  0E68               	movlw	104
  7083  000AF0  0100               	movlb	0	; () banked
  7084  000AF2  6FC4               	movwf	??_UI& (0+255),b
  7085  000AF4  0EE4               	movlw	228
  7086  000AF6                     u7887:
  7087  000AF6  2EE8               	decfsz	wreg,f,c
  7088  000AF8  D7FE               	bra	u7887
  7089  000AFA  2FC4               	decfsz	??_UI& (0+255),f,b
  7090  000AFC  D7FC               	bra	u7887
  7091  000AFE  F000               	nop	
  7092  000B00  0100               	movlb	0	; () banked
  7093  000B02  2BCA               	incf	UI@i_412& (0+255),f,b
  7094  000B04  D7EF               	goto	l7820
  7095  000B06                     l7828:
  7096                           
  7097                           ; BSR set to: 0
  7098  000B06  0100               	movlb	0	; () banked
  7099  000B08  51F6               	movf	_logstate& (0+255),w,b
  7100  000B0A  0100               	movlb	0	; () banked
  7101  000B0C  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7102  000B0E  B4D8               	btfsc	status,2,c
  7103  000B10  0012               	return	
  7104                           
  7105                           ; BSR set to: 0
  7106                           ;UI.c: 119: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7107                           
  7108                           ; BSR set to: 0
  7109                           
  7110                           ; BSR set to: 0
  7111  000B12  0E00               	movlw	0
  7112  000B14  0100               	movlb	0	; () banked
  7113  000B16  6FCB               	movwf	UI@i_413& (0+255),b
  7114  000B18                     l7834:
  7115                           
  7116                           ; BSR set to: 0
  7117  000B18  0E63               	movlw	99
  7118  000B1A  0100               	movlb	0	; () banked
  7119  000B1C  65CB               	cpfsgt	UI@i_413& (0+255),b
  7120  000B1E  D001               	goto	l7838
  7121  000B20  D00C               	goto	l7842
  7122  000B22                     l7838:
  7123                           
  7124                           ; BSR set to: 0
  7125  000B22  0E68               	movlw	104
  7126  000B24  0100               	movlb	0	; () banked
  7127  000B26  6FC4               	movwf	??_UI& (0+255),b
  7128  000B28  0EE4               	movlw	228
  7129  000B2A                     u7897:
  7130  000B2A  2EE8               	decfsz	wreg,f,c
  7131  000B2C  D7FE               	bra	u7897
  7132  000B2E  2FC4               	decfsz	??_UI& (0+255),f,b
  7133  000B30  D7FC               	bra	u7897
  7134  000B32  F000               	nop	
  7135  000B34  0100               	movlb	0	; () banked
  7136  000B36  2BCB               	incf	UI@i_413& (0+255),f,b
  7137  000B38  D7EF               	goto	l7834
  7138  000B3A                     l7842:
  7139                           
  7140                           ; BSR set to: 0
  7141  000B3A  0100               	movlb	0	; () banked
  7142  000B3C  51F6               	movf	_logstate& (0+255),w,b
  7143  000B3E  0100               	movlb	0	; () banked
  7144  000B40  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7145  000B42  B4D8               	btfsc	status,2,c
  7146  000B44  0012               	return	
  7147                           
  7148                           ; BSR set to: 0
  7149                           ;UI.c: 121: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7150                           
  7151                           ; BSR set to: 0
  7152                           
  7153                           ; BSR set to: 0
  7154  000B46  0E01               	movlw	1
  7155  000B48  EC98  F025         	call	_lcdInst
  7156  000B4C  0E68               	movlw	104
  7157  000B4E  0100               	movlb	0	; () banked
  7158  000B50  6FC4               	movwf	??_UI& (0+255),b
  7159  000B52  0EE4               	movlw	228
  7160  000B54                     u7907:
  7161  000B54  2EE8               	decfsz	wreg,f,c
  7162  000B56  D7FE               	bra	u7907
  7163  000B58  2FC4               	decfsz	??_UI& (0+255),f,b
  7164  000B5A  D7FC               	bra	u7907
  7165  000B5C  F000               	nop	
  7166                           
  7167                           ;UI.c: 122: lcdInst(0b10000000);;
  7168  000B5E  0E80               	movlw	128
  7169  000B60  EC98  F025         	call	_lcdInst
  7170                           
  7171                           ;UI.c: 123: printf("START:");
  7172  000B64  0EC4               	movlw	low STR_7
  7173  000B66  0100               	movlb	0	; () banked
  7174  000B68  6F8E               	movwf	printf@f& (0+255),b
  7175  000B6A  0EFF               	movlw	high STR_7
  7176  000B6C  0100               	movlb	0	; () banked
  7177  000B6E  6F8F               	movwf	(printf@f+1)& (0+255),b
  7178  000B70  ECB8  F008         	call	_printf	;wreg free
  7179                           
  7180                           ;UI.c: 124: lcdInst(0b11000000);;
  7181  000B74  0EC0               	movlw	192
  7182  000B76  EC98  F025         	call	_lcdInst
  7183                           
  7184                           ;UI.c: 125: char month[] = "MMM";
  7185  000B7A  C133  F0D6         	movff	UI@F3226,UI@month
  7186  000B7E  C134  F0D7         	movff	UI@F3226+1,UI@month+1
  7187  000B82  C135  F0D8         	movff	UI@F3226+2,UI@month+2
  7188  000B86  C136  F0D9         	movff	UI@F3226+3,UI@month+3
  7189                           
  7190                           ;UI.c: 126: switch(log_startTime[5]){
  7191  000B8A  D0C3               	goto	l7886
  7192  000B8C                     l7858:
  7193                           
  7194                           ;UI.c: 128: strcpy(month, "JAN");
  7195  000B8C  0ED6               	movlw	low UI@month
  7196  000B8E  0100               	movlb	0	; () banked
  7197  000B90  6F80               	movwf	strcpy@to& (0+255),b
  7198  000B92  0E00               	movlw	high UI@month
  7199  000B94  0100               	movlb	0	; () banked
  7200  000B96  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7201  000B98  0EDB               	movlw	low STR_8
  7202  000B9A  0100               	movlb	0	; () banked
  7203  000B9C  6F82               	movwf	strcpy@from& (0+255),b
  7204  000B9E  0EFF               	movlw	high STR_8
  7205  000BA0  0100               	movlb	0	; () banked
  7206  000BA2  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7207  000BA4  EC04  F023         	call	_strcpy	;wreg free
  7208                           
  7209                           ;UI.c: 129: break;
  7210  000BA8  D0E6               	goto	l7888
  7211  000BAA                     l7860:
  7212                           
  7213                           ;UI.c: 131: strcpy(month, "FEB");
  7214  000BAA  0ED6               	movlw	low UI@month
  7215  000BAC  0100               	movlb	0	; () banked
  7216  000BAE  6F80               	movwf	strcpy@to& (0+255),b
  7217  000BB0  0E00               	movlw	high UI@month
  7218  000BB2  0100               	movlb	0	; () banked
  7219  000BB4  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7220  000BB6  0ECB               	movlw	low STR_9
  7221  000BB8  0100               	movlb	0	; () banked
  7222  000BBA  6F82               	movwf	strcpy@from& (0+255),b
  7223  000BBC  0EFF               	movlw	high STR_9
  7224  000BBE  0100               	movlb	0	; () banked
  7225  000BC0  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7226  000BC2  EC04  F023         	call	_strcpy	;wreg free
  7227                           
  7228                           ;UI.c: 132: break;
  7229  000BC6  D0D7               	goto	l7888
  7230  000BC8                     l7862:
  7231                           
  7232                           ;UI.c: 134: strcpy(month, "MAR");
  7233  000BC8  0ED6               	movlw	low UI@month
  7234  000BCA  0100               	movlb	0	; () banked
  7235  000BCC  6F80               	movwf	strcpy@to& (0+255),b
  7236  000BCE  0E00               	movlw	high UI@month
  7237  000BD0  0100               	movlb	0	; () banked
  7238  000BD2  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7239  000BD4  0EE7               	movlw	low STR_10
  7240  000BD6  0100               	movlb	0	; () banked
  7241  000BD8  6F82               	movwf	strcpy@from& (0+255),b
  7242  000BDA  0EFF               	movlw	high STR_10
  7243  000BDC  0100               	movlb	0	; () banked
  7244  000BDE  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7245  000BE0  EC04  F023         	call	_strcpy	;wreg free
  7246                           
  7247                           ;UI.c: 135: break;
  7248  000BE4  D0C8               	goto	l7888
  7249  000BE6                     l7864:
  7250                           
  7251                           ;UI.c: 137: strcpy(month, "APR");
  7252  000BE6  0ED6               	movlw	low UI@month
  7253  000BE8  0100               	movlb	0	; () banked
  7254  000BEA  6F80               	movwf	strcpy@to& (0+255),b
  7255  000BEC  0E00               	movlw	high UI@month
  7256  000BEE  0100               	movlb	0	; () banked
  7257  000BF0  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7258  000BF2  0EEB               	movlw	low STR_11
  7259  000BF4  0100               	movlb	0	; () banked
  7260  000BF6  6F82               	movwf	strcpy@from& (0+255),b
  7261  000BF8  0EFF               	movlw	high STR_11
  7262  000BFA  0100               	movlb	0	; () banked
  7263  000BFC  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7264  000BFE  EC04  F023         	call	_strcpy	;wreg free
  7265                           
  7266                           ;UI.c: 138: break;
  7267  000C02  D0B9               	goto	l7888
  7268  000C04                     l7866:
  7269                           
  7270                           ;UI.c: 140: strcpy(month, "MAY");
  7271  000C04  0ED6               	movlw	low UI@month
  7272  000C06  0100               	movlb	0	; () banked
  7273  000C08  6F80               	movwf	strcpy@to& (0+255),b
  7274  000C0A  0E00               	movlw	high UI@month
  7275  000C0C  0100               	movlb	0	; () banked
  7276  000C0E  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7277  000C10  0EFB               	movlw	low STR_12
  7278  000C12  0100               	movlb	0	; () banked
  7279  000C14  6F82               	movwf	strcpy@from& (0+255),b
  7280  000C16  0EFF               	movlw	high STR_12
  7281  000C18  0100               	movlb	0	; () banked
  7282  000C1A  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7283  000C1C  EC04  F023         	call	_strcpy	;wreg free
  7284                           
  7285                           ;UI.c: 141: break;
  7286  000C20  D0AA               	goto	l7888
  7287  000C22                     l7868:
  7288                           
  7289                           ;UI.c: 143: strcpy(month, "JUN");
  7290  000C22  0ED6               	movlw	low UI@month
  7291  000C24  0100               	movlb	0	; () banked
  7292  000C26  6F80               	movwf	strcpy@to& (0+255),b
  7293  000C28  0E00               	movlw	high UI@month
  7294  000C2A  0100               	movlb	0	; () banked
  7295  000C2C  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7296  000C2E  0EDF               	movlw	low STR_13
  7297  000C30  0100               	movlb	0	; () banked
  7298  000C32  6F82               	movwf	strcpy@from& (0+255),b
  7299  000C34  0EFF               	movlw	high STR_13
  7300  000C36  0100               	movlb	0	; () banked
  7301  000C38  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7302  000C3A  EC04  F023         	call	_strcpy	;wreg free
  7303                           
  7304                           ;UI.c: 144: break;
  7305  000C3E  D09B               	goto	l7888
  7306  000C40                     l7870:
  7307                           
  7308                           ;UI.c: 146: strcpy(month, "JUL");
  7309  000C40  0ED6               	movlw	low UI@month
  7310  000C42  0100               	movlb	0	; () banked
  7311  000C44  6F80               	movwf	strcpy@to& (0+255),b
  7312  000C46  0E00               	movlw	high UI@month
  7313  000C48  0100               	movlb	0	; () banked
  7314  000C4A  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7315  000C4C  0ED7               	movlw	low STR_14
  7316  000C4E  0100               	movlb	0	; () banked
  7317  000C50  6F82               	movwf	strcpy@from& (0+255),b
  7318  000C52  0EFF               	movlw	high STR_14
  7319  000C54  0100               	movlb	0	; () banked
  7320  000C56  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7321  000C58  EC04  F023         	call	_strcpy	;wreg free
  7322                           
  7323                           ;UI.c: 147: break;
  7324  000C5C  D08C               	goto	l7888
  7325  000C5E                     l7872:
  7326                           
  7327                           ;UI.c: 149: strcpy(month, "AUG");
  7328  000C5E  0ED6               	movlw	low UI@month
  7329  000C60  0100               	movlb	0	; () banked
  7330  000C62  6F80               	movwf	strcpy@to& (0+255),b
  7331  000C64  0E00               	movlw	high UI@month
  7332  000C66  0100               	movlb	0	; () banked
  7333  000C68  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7334  000C6A  0ED3               	movlw	low STR_15
  7335  000C6C  0100               	movlb	0	; () banked
  7336  000C6E  6F82               	movwf	strcpy@from& (0+255),b
  7337  000C70  0EFF               	movlw	high STR_15
  7338  000C72  0100               	movlb	0	; () banked
  7339  000C74  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7340  000C76  EC04  F023         	call	_strcpy	;wreg free
  7341                           
  7342                           ;UI.c: 150: break;
  7343  000C7A  D07D               	goto	l7888
  7344  000C7C                     l7874:
  7345                           
  7346                           ;UI.c: 152: strcpy(month, "SEP");
  7347  000C7C  0ED6               	movlw	low UI@month
  7348  000C7E  0100               	movlb	0	; () banked
  7349  000C80  6F80               	movwf	strcpy@to& (0+255),b
  7350  000C82  0E00               	movlw	high UI@month
  7351  000C84  0100               	movlb	0	; () banked
  7352  000C86  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7353  000C88  0EE3               	movlw	low STR_16
  7354  000C8A  0100               	movlb	0	; () banked
  7355  000C8C  6F82               	movwf	strcpy@from& (0+255),b
  7356  000C8E  0EFF               	movlw	high STR_16
  7357  000C90  0100               	movlb	0	; () banked
  7358  000C92  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7359  000C94  EC04  F023         	call	_strcpy	;wreg free
  7360                           
  7361                           ;UI.c: 153: break;
  7362  000C98  D06E               	goto	l7888
  7363  000C9A                     l7876:
  7364                           
  7365                           ;UI.c: 155: strcpy(month, "OCT");
  7366  000C9A  0ED6               	movlw	low UI@month
  7367  000C9C  0100               	movlb	0	; () banked
  7368  000C9E  6F80               	movwf	strcpy@to& (0+255),b
  7369  000CA0  0E00               	movlw	high UI@month
  7370  000CA2  0100               	movlb	0	; () banked
  7371  000CA4  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7372  000CA6  0EF3               	movlw	low STR_17
  7373  000CA8  0100               	movlb	0	; () banked
  7374  000CAA  6F82               	movwf	strcpy@from& (0+255),b
  7375  000CAC  0EFF               	movlw	high STR_17
  7376  000CAE  0100               	movlb	0	; () banked
  7377  000CB0  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7378  000CB2  EC04  F023         	call	_strcpy	;wreg free
  7379                           
  7380                           ;UI.c: 156: break;
  7381  000CB6  D05F               	goto	l7888
  7382  000CB8                     l7878:
  7383                           
  7384                           ;UI.c: 158: strcpy(month, "NOV");
  7385  000CB8  0ED6               	movlw	low UI@month
  7386  000CBA  0100               	movlb	0	; () banked
  7387  000CBC  6F80               	movwf	strcpy@to& (0+255),b
  7388  000CBE  0E00               	movlw	high UI@month
  7389  000CC0  0100               	movlb	0	; () banked
  7390  000CC2  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7391  000CC4  0EF7               	movlw	low STR_18
  7392  000CC6  0100               	movlb	0	; () banked
  7393  000CC8  6F82               	movwf	strcpy@from& (0+255),b
  7394  000CCA  0EFF               	movlw	high STR_18
  7395  000CCC  0100               	movlb	0	; () banked
  7396  000CCE  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7397  000CD0  EC04  F023         	call	_strcpy	;wreg free
  7398                           
  7399                           ;UI.c: 159: break;
  7400  000CD4  D050               	goto	l7888
  7401  000CD6                     l7880:
  7402                           
  7403                           ;UI.c: 161: strcpy(month, "DEC");
  7404  000CD6  0ED6               	movlw	low UI@month
  7405  000CD8  0100               	movlb	0	; () banked
  7406  000CDA  6F80               	movwf	strcpy@to& (0+255),b
  7407  000CDC  0E00               	movlw	high UI@month
  7408  000CDE  0100               	movlb	0	; () banked
  7409  000CE0  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7410  000CE2  0ECF               	movlw	low STR_19
  7411  000CE4  0100               	movlb	0	; () banked
  7412  000CE6  6F82               	movwf	strcpy@from& (0+255),b
  7413  000CE8  0EFF               	movlw	high STR_19
  7414  000CEA  0100               	movlb	0	; () banked
  7415  000CEC  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7416  000CEE  EC04  F023         	call	_strcpy	;wreg free
  7417                           
  7418                           ;UI.c: 162: break;
  7419  000CF2  D041               	goto	l7888
  7420  000CF4                     l7882:
  7421                           
  7422                           ;UI.c: 164: strcpy(month, "ERR");
  7423  000CF4  0ED6               	movlw	low UI@month
  7424  000CF6  0100               	movlb	0	; () banked
  7425  000CF8  6F80               	movwf	strcpy@to& (0+255),b
  7426  000CFA  0E00               	movlw	high UI@month
  7427  000CFC  0100               	movlb	0	; () banked
  7428  000CFE  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7429  000D00  0EEF               	movlw	low STR_20
  7430  000D02  0100               	movlb	0	; () banked
  7431  000D04  6F82               	movwf	strcpy@from& (0+255),b
  7432  000D06  0EFF               	movlw	high STR_20
  7433  000D08  0100               	movlb	0	; () banked
  7434  000D0A  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7435  000D0C  EC04  F023         	call	_strcpy	;wreg free
  7436                           
  7437                           ;UI.c: 166: }
  7438                           
  7439                           ;UI.c: 165: break;
  7440  000D10  D032               	goto	l7888
  7441  000D12                     l7886:
  7442  000D12  EE21  F00A         	lfsr	2,_log_startTime+10
  7443  000D16  CFDE F0C4          	movff	postinc2,??_UI
  7444  000D1A  CFDD F0C5          	movff	postdec2,??_UI+1
  7445                           
  7446                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7447                           ; Switch size 1, requested type "space"
  7448                           ; Number of cases is 1, Range of values is 0 to 0
  7449                           ; switch strategies available:
  7450                           ; Name         Instructions Cycles
  7451                           ; simple_byte            4     3 (average)
  7452                           ;	Chosen strategy is simple_byte
  7453  000D1E  0100               	movlb	0	; () banked
  7454  000D20  51C5               	movf	(??_UI+1)& (0+255),w,b
  7455  000D22  0A00               	xorlw	0	; case 0
  7456  000D24  A4D8               	btfss	status,2,c
  7457  000D26  D7E6               	goto	l7882
  7458                           
  7459                           ; BSR set to: 0
  7460                           ; Switch size 1, requested type "space"
  7461                           ; Number of cases is 12, Range of values is 1 to 12
  7462                           ; switch strategies available:
  7463                           ; Name         Instructions Cycles
  7464                           ; simple_byte           37    19 (average)
  7465                           ;	Chosen strategy is simple_byte
  7466  000D28  0100               	movlb	0	; () banked
  7467  000D2A  51C4               	movf	??_UI& (0+255),w,b
  7468  000D2C  0A01               	xorlw	1	; case 1
  7469  000D2E  B4D8               	btfsc	status,2,c
  7470  000D30  D72D               	goto	l7858
  7471  000D32  0A03               	xorlw	3	; case 2
  7472  000D34  B4D8               	btfsc	status,2,c
  7473  000D36  D739               	goto	l7860
  7474  000D38  0A01               	xorlw	1	; case 3
  7475  000D3A  B4D8               	btfsc	status,2,c
  7476  000D3C  D745               	goto	l7862
  7477  000D3E  0A07               	xorlw	7	; case 4
  7478  000D40  B4D8               	btfsc	status,2,c
  7479  000D42  D751               	goto	l7864
  7480  000D44  0A01               	xorlw	1	; case 5
  7481  000D46  B4D8               	btfsc	status,2,c
  7482  000D48  D75D               	goto	l7866
  7483  000D4A  0A03               	xorlw	3	; case 6
  7484  000D4C  B4D8               	btfsc	status,2,c
  7485  000D4E  D769               	goto	l7868
  7486  000D50  0A01               	xorlw	1	; case 7
  7487  000D52  B4D8               	btfsc	status,2,c
  7488  000D54  D775               	goto	l7870
  7489  000D56  0A0F               	xorlw	15	; case 8
  7490  000D58  B4D8               	btfsc	status,2,c
  7491  000D5A  D781               	goto	l7872
  7492  000D5C  0A01               	xorlw	1	; case 9
  7493  000D5E  B4D8               	btfsc	status,2,c
  7494  000D60  D78D               	goto	l7874
  7495  000D62  0A03               	xorlw	3	; case 10
  7496  000D64  B4D8               	btfsc	status,2,c
  7497  000D66  D799               	goto	l7876
  7498  000D68  0A01               	xorlw	1	; case 11
  7499  000D6A  B4D8               	btfsc	status,2,c
  7500  000D6C  D7A5               	goto	l7878
  7501  000D6E  0A07               	xorlw	7	; case 12
  7502  000D70  B4D8               	btfsc	status,2,c
  7503  000D72  D7B1               	goto	l7880
  7504  000D74  D7BF               	goto	l7882
  7505  000D76                     l7888:
  7506                           
  7507                           ;UI.c: 167: printf("%02d%s | %02d:%02d:%02d", log_startTime[4],month,log_startTime[2],lo
      +                          g_startTime[1],log_startTime[0]);
  7508  000D76  0E1C               	movlw	low STR_21
  7509  000D78  0100               	movlb	0	; () banked
  7510  000D7A  6F8E               	movwf	printf@f& (0+255),b
  7511  000D7C  0EFB               	movlw	high STR_21
  7512  000D7E  0100               	movlb	0	; () banked
  7513  000D80  6F8F               	movwf	(printf@f+1)& (0+255),b
  7514  000D82  C108  F090         	movff	_log_startTime+8,?_printf+2
  7515  000D86  C109  F091         	movff	_log_startTime+9,?_printf+3
  7516  000D8A  0ED6               	movlw	low UI@month
  7517  000D8C  0100               	movlb	0	; () banked
  7518  000D8E  6F92               	movwf	(?_printf+4)& (0+255),b
  7519  000D90  0E00               	movlw	high UI@month
  7520  000D92  0100               	movlb	0	; () banked
  7521  000D94  6F93               	movwf	(?_printf+5)& (0+255),b
  7522  000D96  C104  F094         	movff	_log_startTime+4,?_printf+6
  7523  000D9A  C105  F095         	movff	_log_startTime+5,?_printf+7
  7524  000D9E  C102  F096         	movff	_log_startTime+2,?_printf+8
  7525  000DA2  C103  F097         	movff	_log_startTime+3,?_printf+9
  7526  000DA6  C100  F098         	movff	_log_startTime,?_printf+10
  7527  000DAA  C101  F099         	movff	_log_startTime+1,?_printf+11
  7528  000DAE  ECB8  F008         	call	_printf	;wreg free
  7529                           
  7530                           ;UI.c: 169: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7531  000DB2  0E00               	movlw	0
  7532  000DB4  0100               	movlb	0	; () banked
  7533  000DB6  6FCC               	movwf	UI@i_431& (0+255),b
  7534  000DB8                     l7892:
  7535                           
  7536                           ; BSR set to: 0
  7537  000DB8  0E63               	movlw	99
  7538  000DBA  0100               	movlb	0	; () banked
  7539  000DBC  65CC               	cpfsgt	UI@i_431& (0+255),b
  7540  000DBE  D001               	goto	l7896
  7541  000DC0  D00C               	goto	l7900
  7542  000DC2                     l7896:
  7543                           
  7544                           ; BSR set to: 0
  7545  000DC2  0E68               	movlw	104
  7546  000DC4  0100               	movlb	0	; () banked
  7547  000DC6  6FC4               	movwf	??_UI& (0+255),b
  7548  000DC8  0EE4               	movlw	228
  7549  000DCA                     u7917:
  7550  000DCA  2EE8               	decfsz	wreg,f,c
  7551  000DCC  D7FE               	bra	u7917
  7552  000DCE  2FC4               	decfsz	??_UI& (0+255),f,b
  7553  000DD0  D7FC               	bra	u7917
  7554  000DD2  F000               	nop	
  7555  000DD4  0100               	movlb	0	; () banked
  7556  000DD6  2BCC               	incf	UI@i_431& (0+255),f,b
  7557  000DD8  D7EF               	goto	l7892
  7558  000DDA                     l7900:
  7559                           
  7560                           ; BSR set to: 0
  7561  000DDA  0100               	movlb	0	; () banked
  7562  000DDC  51F6               	movf	_logstate& (0+255),w,b
  7563  000DDE  0100               	movlb	0	; () banked
  7564  000DE0  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7565  000DE2  B4D8               	btfsc	status,2,c
  7566  000DE4  0012               	return	
  7567                           
  7568                           ; BSR set to: 0
  7569                           ;UI.c: 170: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7570                           
  7571                           ; BSR set to: 0
  7572                           
  7573                           ; BSR set to: 0
  7574  000DE6  0E00               	movlw	0
  7575  000DE8  0100               	movlb	0	; () banked
  7576  000DEA  6FCD               	movwf	UI@i_432& (0+255),b
  7577  000DEC                     l7906:
  7578                           
  7579                           ; BSR set to: 0
  7580  000DEC  0E63               	movlw	99
  7581  000DEE  0100               	movlb	0	; () banked
  7582  000DF0  65CD               	cpfsgt	UI@i_432& (0+255),b
  7583  000DF2  D001               	goto	l7910
  7584  000DF4  D00C               	goto	l7914
  7585  000DF6                     l7910:
  7586                           
  7587                           ; BSR set to: 0
  7588  000DF6  0E68               	movlw	104
  7589  000DF8  0100               	movlb	0	; () banked
  7590  000DFA  6FC4               	movwf	??_UI& (0+255),b
  7591  000DFC  0EE4               	movlw	228
  7592  000DFE                     u7927:
  7593  000DFE  2EE8               	decfsz	wreg,f,c
  7594  000E00  D7FE               	bra	u7927
  7595  000E02  2FC4               	decfsz	??_UI& (0+255),f,b
  7596  000E04  D7FC               	bra	u7927
  7597  000E06  F000               	nop	
  7598  000E08  0100               	movlb	0	; () banked
  7599  000E0A  2BCD               	incf	UI@i_432& (0+255),f,b
  7600  000E0C  D7EF               	goto	l7906
  7601  000E0E                     l7914:
  7602                           
  7603                           ; BSR set to: 0
  7604  000E0E  0100               	movlb	0	; () banked
  7605  000E10  51F6               	movf	_logstate& (0+255),w,b
  7606  000E12  0100               	movlb	0	; () banked
  7607  000E14  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7608  000E16  B4D8               	btfsc	status,2,c
  7609  000E18  0012               	return	
  7610                           
  7611                           ; BSR set to: 0
  7612                           ;UI.c: 172: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7613                           
  7614                           ; BSR set to: 0
  7615                           
  7616                           ; BSR set to: 0
  7617  000E1A  0E01               	movlw	1
  7618  000E1C  EC98  F025         	call	_lcdInst
  7619  000E20  0E68               	movlw	104
  7620  000E22  0100               	movlb	0	; () banked
  7621  000E24  6FC4               	movwf	??_UI& (0+255),b
  7622  000E26  0EE4               	movlw	228
  7623  000E28                     u7937:
  7624  000E28  2EE8               	decfsz	wreg,f,c
  7625  000E2A  D7FE               	bra	u7937
  7626  000E2C  2FC4               	decfsz	??_UI& (0+255),f,b
  7627  000E2E  D7FC               	bra	u7937
  7628  000E30  F000               	nop	
  7629                           
  7630                           ;UI.c: 173: lcdInst(0b10000000);;
  7631  000E32  0E80               	movlw	128
  7632  000E34  EC98  F025         	call	_lcdInst
  7633                           
  7634                           ;UI.c: 174: printf("DURATION:");
  7635  000E38  0E9B               	movlw	low STR_22
  7636  000E3A  0100               	movlb	0	; () banked
  7637  000E3C  6F8E               	movwf	printf@f& (0+255),b
  7638  000E3E  0EFF               	movlw	high STR_22
  7639  000E40  0100               	movlb	0	; () banked
  7640  000E42  6F8F               	movwf	(printf@f+1)& (0+255),b
  7641  000E44  ECB8  F008         	call	_printf	;wreg free
  7642                           
  7643                           ;UI.c: 175: lcdInst(0b11000000);;
  7644  000E48  0EC0               	movlw	192
  7645  000E4A  EC98  F025         	call	_lcdInst
  7646                           
  7647                           ;UI.c: 176: printf("%d MIN %d SEC", (log_total_time % 3600) / 60, (log_total_time % 3600
      +                          ) % 60);
  7648  000E4E  0E0E               	movlw	14
  7649  000E50  0100               	movlb	0	; () banked
  7650  000E52  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7651  000E54  0E10               	movlw	16
  7652  000E56  6F82               	movwf	___awmod@divisor& (0+255),b
  7653  000E58  C0F4  F080         	movff	_log_total_time,___awmod@dividend
  7654  000E5C  C0F5  F081         	movff	_log_total_time+1,___awmod@dividend+1
  7655  000E60  EC25  F01E         	call	___awmod	;wreg free
  7656  000E64  C080  F0C6         	movff	?___awmod,_UI$2317
  7657  000E68  C081  F0C7         	movff	?___awmod+1,_UI$2317+1
  7658                           
  7659                           ;UI.c: 176: printf("%d MIN %d SEC", (log_total_time % 3600) / 60, (log_total_time % 3600
      +                          ) % 60);
  7660  000E6C  0E19               	movlw	low STR_23
  7661  000E6E  0100               	movlb	0	; () banked
  7662  000E70  6F8E               	movwf	printf@f& (0+255),b
  7663  000E72  0EFF               	movlw	high STR_23
  7664  000E74  0100               	movlb	0	; () banked
  7665  000E76  6F8F               	movwf	(printf@f+1)& (0+255),b
  7666  000E78  0E0E               	movlw	14
  7667  000E7A  0100               	movlb	0	; () banked
  7668  000E7C  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7669  000E7E  0E10               	movlw	16
  7670  000E80  6F82               	movwf	___awmod@divisor& (0+255),b
  7671  000E82  C0F4  F080         	movff	_log_total_time,___awmod@dividend
  7672  000E86  C0F5  F081         	movff	_log_total_time+1,___awmod@dividend+1
  7673  000E8A  EC25  F01E         	call	___awmod	;wreg free
  7674  000E8E  C080  F086         	movff	?___awmod,___awdiv@dividend
  7675  000E92  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  7676  000E96  0E00               	movlw	0
  7677  000E98  0100               	movlb	0	; () banked
  7678  000E9A  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  7679  000E9C  0E3C               	movlw	60
  7680  000E9E  6F88               	movwf	___awdiv@divisor& (0+255),b
  7681  000EA0  EC13  F01D         	call	___awdiv	;wreg free
  7682  000EA4  C086  F090         	movff	?___awdiv,?_printf+2
  7683  000EA8  C087  F091         	movff	?___awdiv+1,?_printf+3
  7684  000EAC  C0C6  F080         	movff	_UI$2317,___awmod@dividend
  7685  000EB0  C0C7  F081         	movff	_UI$2317+1,___awmod@dividend+1
  7686  000EB4  0E00               	movlw	0
  7687  000EB6  0100               	movlb	0	; () banked
  7688  000EB8  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7689  000EBA  0E3C               	movlw	60
  7690  000EBC  6F82               	movwf	___awmod@divisor& (0+255),b
  7691  000EBE  EC25  F01E         	call	___awmod	;wreg free
  7692  000EC2  C080  F092         	movff	?___awmod,?_printf+4
  7693  000EC6  C081  F093         	movff	?___awmod+1,?_printf+5
  7694  000ECA  ECB8  F008         	call	_printf	;wreg free
  7695                           
  7696                           ;UI.c: 178: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7697  000ECE  0E00               	movlw	0
  7698  000ED0  0100               	movlb	0	; () banked
  7699  000ED2  6FCE               	movwf	UI@i_435& (0+255),b
  7700  000ED4                     l7934:
  7701                           
  7702                           ; BSR set to: 0
  7703  000ED4  0E63               	movlw	99
  7704  000ED6  0100               	movlb	0	; () banked
  7705  000ED8  65CE               	cpfsgt	UI@i_435& (0+255),b
  7706  000EDA  D001               	goto	l7938
  7707  000EDC  D00C               	goto	l7942
  7708  000EDE                     l7938:
  7709                           
  7710                           ; BSR set to: 0
  7711  000EDE  0E68               	movlw	104
  7712  000EE0  0100               	movlb	0	; () banked
  7713  000EE2  6FC4               	movwf	??_UI& (0+255),b
  7714  000EE4  0EE4               	movlw	228
  7715  000EE6                     u7947:
  7716  000EE6  2EE8               	decfsz	wreg,f,c
  7717  000EE8  D7FE               	bra	u7947
  7718  000EEA  2FC4               	decfsz	??_UI& (0+255),f,b
  7719  000EEC  D7FC               	bra	u7947
  7720  000EEE  F000               	nop	
  7721  000EF0  0100               	movlb	0	; () banked
  7722  000EF2  2BCE               	incf	UI@i_435& (0+255),f,b
  7723  000EF4  D7EF               	goto	l7934
  7724  000EF6                     l7942:
  7725                           
  7726                           ; BSR set to: 0
  7727  000EF6  0100               	movlb	0	; () banked
  7728  000EF8  51F6               	movf	_logstate& (0+255),w,b
  7729  000EFA  0100               	movlb	0	; () banked
  7730  000EFC  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7731  000EFE  B4D8               	btfsc	status,2,c
  7732  000F00  0012               	return	
  7733                           
  7734                           ; BSR set to: 0
  7735                           ;UI.c: 179: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7736                           
  7737                           ; BSR set to: 0
  7738                           
  7739                           ; BSR set to: 0
  7740  000F02  0E00               	movlw	0
  7741  000F04  0100               	movlb	0	; () banked
  7742  000F06  6FCF               	movwf	UI@i_436& (0+255),b
  7743  000F08                     l7948:
  7744                           
  7745                           ; BSR set to: 0
  7746  000F08  0E63               	movlw	99
  7747  000F0A  0100               	movlb	0	; () banked
  7748  000F0C  65CF               	cpfsgt	UI@i_436& (0+255),b
  7749  000F0E  D001               	goto	l7952
  7750  000F10  D00C               	goto	l7956
  7751  000F12                     l7952:
  7752                           
  7753                           ; BSR set to: 0
  7754  000F12  0E68               	movlw	104
  7755  000F14  0100               	movlb	0	; () banked
  7756  000F16  6FC4               	movwf	??_UI& (0+255),b
  7757  000F18  0EE4               	movlw	228
  7758  000F1A                     u7957:
  7759  000F1A  2EE8               	decfsz	wreg,f,c
  7760  000F1C  D7FE               	bra	u7957
  7761  000F1E  2FC4               	decfsz	??_UI& (0+255),f,b
  7762  000F20  D7FC               	bra	u7957
  7763  000F22  F000               	nop	
  7764  000F24  0100               	movlb	0	; () banked
  7765  000F26  2BCF               	incf	UI@i_436& (0+255),f,b
  7766  000F28  D7EF               	goto	l7948
  7767  000F2A                     l7956:
  7768                           
  7769                           ; BSR set to: 0
  7770  000F2A  0100               	movlb	0	; () banked
  7771  000F2C  51F6               	movf	_logstate& (0+255),w,b
  7772  000F2E  0100               	movlb	0	; () banked
  7773  000F30  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7774  000F32  B4D8               	btfsc	status,2,c
  7775  000F34  0012               	return	
  7776                           
  7777                           ; BSR set to: 0
  7778                           ;UI.c: 181: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7779                           
  7780                           ; BSR set to: 0
  7781                           
  7782                           ; BSR set to: 0
  7783  000F36  0E01               	movlw	1
  7784  000F38  EC98  F025         	call	_lcdInst
  7785  000F3C  0E68               	movlw	104
  7786  000F3E  0100               	movlb	0	; () banked
  7787  000F40  6FC4               	movwf	??_UI& (0+255),b
  7788  000F42  0EE4               	movlw	228
  7789  000F44                     u7967:
  7790  000F44  2EE8               	decfsz	wreg,f,c
  7791  000F46  D7FE               	bra	u7967
  7792  000F48  2FC4               	decfsz	??_UI& (0+255),f,b
  7793  000F4A  D7FC               	bra	u7967
  7794  000F4C  F000               	nop	
  7795                           
  7796                           ;UI.c: 182: lcdInst(0b10000000);;
  7797  000F4E  0E80               	movlw	128
  7798  000F50  EC98  F025         	call	_lcdInst
  7799                           
  7800                           ;UI.c: 183: printf(" -- POP  CAN -- ");
  7801  000F54  0E3C               	movlw	low STR_24
  7802  000F56  0100               	movlb	0	; () banked
  7803  000F58  6F8E               	movwf	printf@f& (0+255),b
  7804  000F5A  0EFD               	movlw	high STR_24
  7805  000F5C  0100               	movlb	0	; () banked
  7806  000F5E  6F8F               	movwf	(printf@f+1)& (0+255),b
  7807  000F60  ECB8  F008         	call	_printf	;wreg free
  7808                           
  7809                           ;UI.c: 184: lcdInst(0b11000000);;
  7810  000F64  0EC0               	movlw	192
  7811  000F66  EC98  F025         	call	_lcdInst
  7812                           
  7813                           ;UI.c: 185: printf("NTAB: %d|TAB: %d", log_count_pop_no_tab, log_count_pop_w_tab);
  7814  000F6A  0E19               	movlw	low STR_25
  7815  000F6C  0100               	movlb	0	; () banked
  7816  000F6E  6F8E               	movwf	printf@f& (0+255),b
  7817  000F70  0EFE               	movlw	high STR_25
  7818  000F72  0100               	movlb	0	; () banked
  7819  000F74  6F8F               	movwf	(printf@f+1)& (0+255),b
  7820  000F76  C0F0  F090         	movff	_log_count_pop_no_tab,?_printf+2
  7821  000F7A  C0F1  F091         	movff	_log_count_pop_no_tab+1,?_printf+3
  7822  000F7E  C0F2  F092         	movff	_log_count_pop_w_tab,?_printf+4
  7823  000F82  C0F3  F093         	movff	_log_count_pop_w_tab+1,?_printf+5
  7824  000F86  ECB8  F008         	call	_printf	;wreg free
  7825                           
  7826                           ;UI.c: 187: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7827  000F8A  0E00               	movlw	0
  7828  000F8C  0100               	movlb	0	; () banked
  7829  000F8E  6FD0               	movwf	UI@i_439& (0+255),b
  7830  000F90                     l7974:
  7831                           
  7832                           ; BSR set to: 0
  7833  000F90  0E63               	movlw	99
  7834  000F92  0100               	movlb	0	; () banked
  7835  000F94  65D0               	cpfsgt	UI@i_439& (0+255),b
  7836  000F96  D001               	goto	l7978
  7837  000F98  D00C               	goto	l7982
  7838  000F9A                     l7978:
  7839                           
  7840                           ; BSR set to: 0
  7841  000F9A  0E68               	movlw	104
  7842  000F9C  0100               	movlb	0	; () banked
  7843  000F9E  6FC4               	movwf	??_UI& (0+255),b
  7844  000FA0  0EE4               	movlw	228
  7845  000FA2                     u7977:
  7846  000FA2  2EE8               	decfsz	wreg,f,c
  7847  000FA4  D7FE               	bra	u7977
  7848  000FA6  2FC4               	decfsz	??_UI& (0+255),f,b
  7849  000FA8  D7FC               	bra	u7977
  7850  000FAA  F000               	nop	
  7851  000FAC  0100               	movlb	0	; () banked
  7852  000FAE  2BD0               	incf	UI@i_439& (0+255),f,b
  7853  000FB0  D7EF               	goto	l7974
  7854  000FB2                     l7982:
  7855                           
  7856                           ; BSR set to: 0
  7857  000FB2  0100               	movlb	0	; () banked
  7858  000FB4  51F6               	movf	_logstate& (0+255),w,b
  7859  000FB6  0100               	movlb	0	; () banked
  7860  000FB8  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7861  000FBA  B4D8               	btfsc	status,2,c
  7862  000FBC  0012               	return	
  7863                           
  7864                           ; BSR set to: 0
  7865                           ;UI.c: 188: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7866                           
  7867                           ; BSR set to: 0
  7868                           
  7869                           ; BSR set to: 0
  7870  000FBE  0E00               	movlw	0
  7871  000FC0  0100               	movlb	0	; () banked
  7872  000FC2  6FD1               	movwf	UI@i_440& (0+255),b
  7873  000FC4                     l7988:
  7874                           
  7875                           ; BSR set to: 0
  7876  000FC4  0E63               	movlw	99
  7877  000FC6  0100               	movlb	0	; () banked
  7878  000FC8  65D1               	cpfsgt	UI@i_440& (0+255),b
  7879  000FCA  D001               	goto	l7992
  7880  000FCC  D00C               	goto	l7996
  7881  000FCE                     l7992:
  7882                           
  7883                           ; BSR set to: 0
  7884  000FCE  0E68               	movlw	104
  7885  000FD0  0100               	movlb	0	; () banked
  7886  000FD2  6FC4               	movwf	??_UI& (0+255),b
  7887  000FD4  0EE4               	movlw	228
  7888  000FD6                     u7987:
  7889  000FD6  2EE8               	decfsz	wreg,f,c
  7890  000FD8  D7FE               	bra	u7987
  7891  000FDA  2FC4               	decfsz	??_UI& (0+255),f,b
  7892  000FDC  D7FC               	bra	u7987
  7893  000FDE  F000               	nop	
  7894  000FE0  0100               	movlb	0	; () banked
  7895  000FE2  2BD1               	incf	UI@i_440& (0+255),f,b
  7896  000FE4  D7EF               	goto	l7988
  7897  000FE6                     l7996:
  7898                           
  7899                           ; BSR set to: 0
  7900  000FE6  0100               	movlb	0	; () banked
  7901  000FE8  51F6               	movf	_logstate& (0+255),w,b
  7902  000FEA  0100               	movlb	0	; () banked
  7903  000FEC  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7904  000FEE  B4D8               	btfsc	status,2,c
  7905  000FF0  0012               	return	
  7906                           
  7907                           ; BSR set to: 0
  7908                           ;UI.c: 190: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7909                           
  7910                           ; BSR set to: 0
  7911                           
  7912                           ; BSR set to: 0
  7913  000FF2  0E01               	movlw	1
  7914  000FF4  EC98  F025         	call	_lcdInst
  7915  000FF8  0E68               	movlw	104
  7916  000FFA  0100               	movlb	0	; () banked
  7917  000FFC  6FC4               	movwf	??_UI& (0+255),b
  7918  000FFE  0EE4               	movlw	228
  7919  001000                     u7997:
  7920  001000  2EE8               	decfsz	wreg,f,c
  7921  001002  D7FE               	bra	u7997
  7922  001004  2FC4               	decfsz	??_UI& (0+255),f,b
  7923  001006  D7FC               	bra	u7997
  7924  001008  F000               	nop	
  7925                           
  7926                           ;UI.c: 191: lcdInst(0b10000000);;
  7927  00100A  0E80               	movlw	128
  7928  00100C  EC98  F025         	call	_lcdInst
  7929                           
  7930                           ;UI.c: 192: printf(" -- SOUP CAN -- ");
  7931  001010  0E4D               	movlw	low STR_26
  7932  001012  0100               	movlb	0	; () banked
  7933  001014  6F8E               	movwf	printf@f& (0+255),b
  7934  001016  0EFD               	movlw	high STR_26
  7935  001018  0100               	movlb	0	; () banked
  7936  00101A  6F8F               	movwf	(printf@f+1)& (0+255),b
  7937  00101C  ECB8  F008         	call	_printf	;wreg free
  7938                           
  7939                           ;UI.c: 193: lcdInst(0b11000000);;
  7940  001020  0EC0               	movlw	192
  7941  001022  EC98  F025         	call	_lcdInst
  7942                           
  7943                           ;UI.c: 194: printf("NLAB: %d|LAB: %d", log_count_can_no_lab, log_count_can_w_lab);
  7944  001026  0E08               	movlw	low STR_27
  7945  001028  0100               	movlb	0	; () banked
  7946  00102A  6F8E               	movwf	printf@f& (0+255),b
  7947  00102C  0EFE               	movlw	high STR_27
  7948  00102E  0100               	movlb	0	; () banked
  7949  001030  6F8F               	movwf	(printf@f+1)& (0+255),b
  7950  001032  C071  F090         	movff	_log_count_can_no_lab,?_printf+2
  7951  001036  C072  F091         	movff	_log_count_can_no_lab+1,?_printf+3
  7952  00103A  C073  F092         	movff	_log_count_can_w_lab,?_printf+4
  7953  00103E  C074  F093         	movff	_log_count_can_w_lab+1,?_printf+5
  7954  001042  ECB8  F008         	call	_printf	;wreg free
  7955                           
  7956                           ;UI.c: 196: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7957  001046  0E00               	movlw	0
  7958  001048  0100               	movlb	0	; () banked
  7959  00104A  6FD2               	movwf	UI@i_443& (0+255),b
  7960  00104C                     l8014:
  7961                           
  7962                           ; BSR set to: 0
  7963  00104C  0E63               	movlw	99
  7964  00104E  0100               	movlb	0	; () banked
  7965  001050  65D2               	cpfsgt	UI@i_443& (0+255),b
  7966  001052  D001               	goto	l8018
  7967  001054  D00C               	goto	l8022
  7968  001056                     l8018:
  7969                           
  7970                           ; BSR set to: 0
  7971  001056  0E68               	movlw	104
  7972  001058  0100               	movlb	0	; () banked
  7973  00105A  6FC4               	movwf	??_UI& (0+255),b
  7974  00105C  0EE4               	movlw	228
  7975  00105E                     u8007:
  7976  00105E  2EE8               	decfsz	wreg,f,c
  7977  001060  D7FE               	bra	u8007
  7978  001062  2FC4               	decfsz	??_UI& (0+255),f,b
  7979  001064  D7FC               	bra	u8007
  7980  001066  F000               	nop	
  7981  001068  0100               	movlb	0	; () banked
  7982  00106A  2BD2               	incf	UI@i_443& (0+255),f,b
  7983  00106C  D7EF               	goto	l8014
  7984  00106E                     l8022:
  7985                           
  7986                           ; BSR set to: 0
  7987  00106E  0100               	movlb	0	; () banked
  7988  001070  51F6               	movf	_logstate& (0+255),w,b
  7989  001072  0100               	movlb	0	; () banked
  7990  001074  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7991  001076  B4D8               	btfsc	status,2,c
  7992  001078  0012               	return	
  7993                           
  7994                           ; BSR set to: 0
  7995                           ;UI.c: 197: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7996                           
  7997                           ; BSR set to: 0
  7998                           
  7999                           ; BSR set to: 0
  8000  00107A  0E00               	movlw	0
  8001  00107C  0100               	movlb	0	; () banked
  8002  00107E  6FD3               	movwf	UI@i_444& (0+255),b
  8003  001080                     l8028:
  8004                           
  8005                           ; BSR set to: 0
  8006  001080  0E63               	movlw	99
  8007  001082  0100               	movlb	0	; () banked
  8008  001084  65D3               	cpfsgt	UI@i_444& (0+255),b
  8009  001086  D001               	goto	l8032
  8010  001088  D00C               	goto	l8036
  8011  00108A                     l8032:
  8012                           
  8013                           ; BSR set to: 0
  8014  00108A  0E68               	movlw	104
  8015  00108C  0100               	movlb	0	; () banked
  8016  00108E  6FC4               	movwf	??_UI& (0+255),b
  8017  001090  0EE4               	movlw	228
  8018  001092                     u8017:
  8019  001092  2EE8               	decfsz	wreg,f,c
  8020  001094  D7FE               	bra	u8017
  8021  001096  2FC4               	decfsz	??_UI& (0+255),f,b
  8022  001098  D7FC               	bra	u8017
  8023  00109A  F000               	nop	
  8024  00109C  0100               	movlb	0	; () banked
  8025  00109E  2BD3               	incf	UI@i_444& (0+255),f,b
  8026  0010A0  D7EF               	goto	l8028
  8027  0010A2                     l8036:
  8028                           
  8029                           ; BSR set to: 0
  8030  0010A2  0100               	movlb	0	; () banked
  8031  0010A4  51F6               	movf	_logstate& (0+255),w,b
  8032  0010A6  0100               	movlb	0	; () banked
  8033  0010A8  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  8034  0010AA  B4D8               	btfsc	status,2,c
  8035  0010AC  0012               	return	
  8036                           
  8037                           ; BSR set to: 0
  8038                           ;UI.c: 199: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  8039                           
  8040                           ; BSR set to: 0
  8041                           
  8042                           ; BSR set to: 0
  8043  0010AE  0E01               	movlw	1
  8044  0010B0  EC98  F025         	call	_lcdInst
  8045  0010B4  0E68               	movlw	104
  8046  0010B6  0100               	movlb	0	; () banked
  8047  0010B8  6FC4               	movwf	??_UI& (0+255),b
  8048  0010BA  0EE4               	movlw	228
  8049  0010BC                     u8027:
  8050  0010BC  2EE8               	decfsz	wreg,f,c
  8051  0010BE  D7FE               	bra	u8027
  8052  0010C0  2FC4               	decfsz	??_UI& (0+255),f,b
  8053  0010C2  D7FC               	bra	u8027
  8054  0010C4  F000               	nop	
  8055                           
  8056                           ;UI.c: 200: lcdInst(0b10000000);;
  8057  0010C6  0E80               	movlw	128
  8058  0010C8  EC98  F025         	call	_lcdInst
  8059                           
  8060                           ;UI.c: 201: printf("-- TOTAL CANS --");
  8061  0010CC  0E5E               	movlw	low STR_28
  8062  0010CE  0100               	movlb	0	; () banked
  8063  0010D0  6F8E               	movwf	printf@f& (0+255),b
  8064  0010D2  0EFD               	movlw	high STR_28
  8065  0010D4  0100               	movlb	0	; () banked
  8066  0010D6  6F8F               	movwf	(printf@f+1)& (0+255),b
  8067  0010D8  ECB8  F008         	call	_printf	;wreg free
  8068                           
  8069                           ;UI.c: 202: lcdInst(0b11000000);;
  8070  0010DC  0EC0               	movlw	192
  8071  0010DE  EC98  F025         	call	_lcdInst
  8072                           
  8073                           ;UI.c: 203: printf("%d", log_count_total);
  8074  0010E2  0E16               	movlw	low (STR_27+14)
  8075  0010E4  0100               	movlb	0	; () banked
  8076  0010E6  6F8E               	movwf	printf@f& (0+255),b
  8077  0010E8  0EFE               	movlw	high (STR_27+14)
  8078  0010EA  0100               	movlb	0	; () banked
  8079  0010EC  6F8F               	movwf	(printf@f+1)& (0+255),b
  8080  0010EE  C075  F090         	movff	_log_count_total,?_printf+2
  8081  0010F2  C076  F091         	movff	_log_count_total+1,?_printf+3
  8082  0010F6  ECB8  F008         	call	_printf	;wreg free
  8083                           
  8084                           ;UI.c: 205: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8085  0010FA  0E00               	movlw	0
  8086  0010FC  0100               	movlb	0	; () banked
  8087  0010FE  6FD4               	movwf	UI@i_447& (0+255),b
  8088  001100                     l8054:
  8089                           
  8090                           ; BSR set to: 0
  8091  001100  0E63               	movlw	99
  8092  001102  0100               	movlb	0	; () banked
  8093  001104  65D4               	cpfsgt	UI@i_447& (0+255),b
  8094  001106  D001               	goto	l8058
  8095  001108  D00C               	goto	l8062
  8096  00110A                     l8058:
  8097                           
  8098                           ; BSR set to: 0
  8099  00110A  0E68               	movlw	104
  8100  00110C  0100               	movlb	0	; () banked
  8101  00110E  6FC4               	movwf	??_UI& (0+255),b
  8102  001110  0EE4               	movlw	228
  8103  001112                     u8037:
  8104  001112  2EE8               	decfsz	wreg,f,c
  8105  001114  D7FE               	bra	u8037
  8106  001116  2FC4               	decfsz	??_UI& (0+255),f,b
  8107  001118  D7FC               	bra	u8037
  8108  00111A  F000               	nop	
  8109  00111C  0100               	movlb	0	; () banked
  8110  00111E  2BD4               	incf	UI@i_447& (0+255),f,b
  8111  001120  D7EF               	goto	l8054
  8112  001122                     l8062:
  8113                           
  8114                           ; BSR set to: 0
  8115  001122  0100               	movlb	0	; () banked
  8116  001124  51F6               	movf	_logstate& (0+255),w,b
  8117  001126  0100               	movlb	0	; () banked
  8118  001128  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  8119  00112A  B4D8               	btfsc	status,2,c
  8120  00112C  0012               	return	
  8121                           
  8122                           ; BSR set to: 0
  8123                           ;UI.c: 206: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  8124                           
  8125                           ; BSR set to: 0
  8126                           
  8127                           ; BSR set to: 0
  8128  00112E  0E00               	movlw	0
  8129  001130  0100               	movlb	0	; () banked
  8130  001132  6FD5               	movwf	UI@i_448& (0+255),b
  8131  001134                     l8068:
  8132                           
  8133                           ; BSR set to: 0
  8134  001134  0E63               	movlw	99
  8135  001136  0100               	movlb	0	; () banked
  8136  001138  65D5               	cpfsgt	UI@i_448& (0+255),b
  8137  00113A  D001               	goto	l8072
  8138  00113C  D00C               	goto	l8076
  8139  00113E                     l8072:
  8140                           
  8141                           ; BSR set to: 0
  8142  00113E  0E68               	movlw	104
  8143  001140  0100               	movlb	0	; () banked
  8144  001142  6FC4               	movwf	??_UI& (0+255),b
  8145  001144  0EE4               	movlw	228
  8146  001146                     u8047:
  8147  001146  2EE8               	decfsz	wreg,f,c
  8148  001148  D7FE               	bra	u8047
  8149  00114A  2FC4               	decfsz	??_UI& (0+255),f,b
  8150  00114C  D7FC               	bra	u8047
  8151  00114E  F000               	nop	
  8152  001150  0100               	movlb	0	; () banked
  8153  001152  2BD5               	incf	UI@i_448& (0+255),f,b
  8154  001154  D7EF               	goto	l8068
  8155  001156                     l8076:
  8156                           
  8157                           ; BSR set to: 0
  8158  001156  0100               	movlb	0	; () banked
  8159  001158  51F6               	movf	_logstate& (0+255),w,b
  8160  00115A  0100               	movlb	0	; () banked
  8161  00115C  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  8162  00115E  B4D8               	btfsc	status,2,c
  8163  001160  0012               	return	
  8164  001162                     l8080:
  8165  001162  0100               	movlb	0	; () banked
  8166  001164  51F6               	movf	_logstate& (0+255),w,b
  8167  001166  0100               	movlb	0	; () banked
  8168  001168  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  8169  00116A  B4D8               	btfsc	status,2,c
  8170  00116C  0012               	return	
  8171  00116E  D44A               	goto	l7776
  8172  001170                     __end_of_UI:
  8173                           	opt stack 0
  8174                           tblptru	equ	0xFF8
  8175                           tblptrh	equ	0xFF7
  8176                           tblptrl	equ	0xFF6
  8177                           tablat	equ	0xFF5
  8178                           prodh	equ	0xFF4
  8179                           prodl	equ	0xFF3
  8180                           intcon	equ	0xFF2
  8181                           intcon2	equ	0xFF1
  8182                           intcon3	equ	0xFF0
  8183                           postinc0	equ	0xFEE
  8184                           wreg	equ	0xFE8
  8185                           postdec1	equ	0xFE5
  8186                           fsr1l	equ	0xFE1
  8187                           indf2	equ	0xFDF
  8188                           postinc2	equ	0xFDE
  8189                           postdec2	equ	0xFDD
  8190                           fsr2h	equ	0xFDA
  8191                           fsr2l	equ	0xFD9
  8192                           status	equ	0xFD8
  8193                           
  8194 ;; *************** function _printRTC *****************
  8195 ;; Defined at:
  8196 ;;		line 63 in file "RTC.c"
  8197 ;; Parameters:    Size  Location     Type
  8198 ;;		None
  8199 ;; Auto vars:     Size  Location     Type
  8200 ;;  i               2   66[BANK0 ] int 
  8201 ;;  INT_time       14   46[BANK0 ] int [7]
  8202 ;;  month           4   62[BANK0 ] unsigned char [4]
  8203 ;;  RTC_month       2   60[BANK0 ] int 
  8204 ;; Return value:  Size  Location     Type
  8205 ;;                  1    wreg      void 
  8206 ;; Registers used:
  8207 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8208 ;; Tracked objects:
  8209 ;;		On entry : 0/0
  8210 ;;		On exit  : 0/0
  8211 ;;		Unchanged: 0/0
  8212 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8213 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8214 ;;      Locals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8215 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8216 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8217 ;;Total ram usage:       25 bytes
  8218 ;; Hardware stack levels used:    1
  8219 ;; Hardware stack levels required when called:   10
  8220 ;; This function calls:
  8221 ;;		_getRTC
  8222 ;;		_lcdInst
  8223 ;;		_printf
  8224 ;;		_strcpy
  8225 ;; This function is called by:
  8226 ;;		_UI
  8227 ;;		_change_state_to_menu_start
  8228 ;; This function uses a non-reentrant model
  8229 ;;
  8230                           
  8231                           	psect	text24
  8232  001F98                     __ptext24:
  8233                           	opt stack 0
  8234  001F98                     _printRTC:
  8235                           	opt stack 18
  8236                           
  8237                           ;RTC.c: 64: getRTC();
  8238                           
  8239                           ; BSR set to: 0
  8240                           ;incstack = 0
  8241  001F98  ECBC  F01E         	call	_getRTC	;wreg free
  8242                           
  8243                           ;RTC.c: 65: char month[] = "MMM";
  8244  001F9C  C137  F0BE         	movff	printRTC@F3217,printRTC@month
  8245  001FA0  C138  F0BF         	movff	printRTC@F3217+1,printRTC@month+1
  8246  001FA4  C139  F0C0         	movff	printRTC@F3217+2,printRTC@month+2
  8247  001FA8  C13A  F0C1         	movff	printRTC@F3217+3,printRTC@month+3
  8248                           
  8249                           ;RTC.c: 66: int INT_time[7];
  8250                           ;RTC.c: 67: for(int i = 0; i < 7; i++){
  8251  001FAC  0E00               	movlw	0
  8252  001FAE  0100               	movlb	0	; () banked
  8253  001FB0  6FC3               	movwf	(printRTC@i+1)& (0+255),b
  8254  001FB2  0E00               	movlw	0
  8255  001FB4  6FC2               	movwf	printRTC@i& (0+255),b
  8256                           
  8257                           ; BSR set to: 0
  8258  001FB6  0100               	movlb	0	; () banked
  8259  001FB8  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
  8260  001FBA  D008               	goto	l6060
  8261  001FBC  0100               	movlb	0	; () banked
  8262  001FBE  51C3               	movf	(printRTC@i+1)& (0+255),w,b
  8263  001FC0  E146               	bnz	l602
  8264  001FC2  0E07               	movlw	7
  8265  001FC4  0100               	movlb	0	; () banked
  8266  001FC6  5DC2               	subwf	printRTC@i& (0+255),w,b
  8267  001FC8  B0D8               	btfsc	status,0,c
  8268  001FCA  D041               	goto	l602
  8269  001FCC                     l6060:
  8270                           
  8271                           ; BSR set to: 0
  8272                           ;RTC.c: 68: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  8273  001FCC  0E24               	movlw	low _time
  8274  001FCE  0100               	movlb	0	; () banked
  8275  001FD0  25C2               	addwf	printRTC@i& (0+255),w,b
  8276  001FD2  6ED9               	movwf	fsr2l,c
  8277  001FD4  0E01               	movlw	high _time
  8278  001FD6  0100               	movlb	0	; () banked
  8279  001FD8  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
  8280  001FDA  6EDA               	movwf	fsr2h,c
  8281  001FDC  50DF               	movf	indf2,w,c
  8282  001FDE  0100               	movlb	0	; () banked
  8283  001FE0  6FAB               	movwf	??_printRTC& (0+255),b
  8284  001FE2  0100               	movlb	0	; () banked
  8285  001FE4  3BAB               	swapf	??_printRTC& (0+255),f,b
  8286  001FE6  0E0F               	movlw	15
  8287  001FE8  17AB               	andwf	??_printRTC& (0+255),f,b
  8288  001FEA  0E0F               	movlw	15
  8289  001FEC  0100               	movlb	0	; () banked
  8290  001FEE  17AB               	andwf	??_printRTC& (0+255),f,b
  8291  001FF0  0100               	movlb	0	; () banked
  8292  001FF2  51AB               	movf	??_printRTC& (0+255),w,b
  8293  001FF4  0D0A               	mullw	10
  8294  001FF6  0E24               	movlw	low _time
  8295  001FF8  0100               	movlb	0	; () banked
  8296  001FFA  25C2               	addwf	printRTC@i& (0+255),w,b
  8297  001FFC  6ED9               	movwf	fsr2l,c
  8298  001FFE  0E01               	movlw	high _time
  8299  002000  0100               	movlb	0	; () banked
  8300  002002  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
  8301  002004  6EDA               	movwf	fsr2h,c
  8302  002006  50DF               	movf	indf2,w,c
  8303  002008  0B0F               	andlw	15
  8304  00200A  0100               	movlb	0	; () banked
  8305  00200C  6FAC               	movwf	(??_printRTC+1)& (0+255),b
  8306  00200E  6BAD               	clrf	(??_printRTC+2)& (0+255),b
  8307  002010  50F3               	movf	prodl,w,c
  8308  002012  0100               	movlb	0	; () banked
  8309  002014  27AC               	addwf	(??_printRTC+1)& (0+255),f,b
  8310  002016  50F4               	movf	prodh,w,c
  8311  002018  0100               	movlb	0	; () banked
  8312  00201A  23AD               	addwfc	(??_printRTC+2)& (0+255),f,b
  8313  00201C  90D8               	bcf	status,0,c
  8314  00201E  0100               	movlb	0	; () banked
  8315  002020  35C2               	rlcf	printRTC@i& (0+255),w,b
  8316  002022  6ED9               	movwf	fsr2l,c
  8317  002024  0100               	movlb	0	; () banked
  8318  002026  35C3               	rlcf	(printRTC@i+1)& (0+255),w,b
  8319  002028  6EDA               	movwf	fsr2h,c
  8320  00202A  0EAE               	movlw	low printRTC@INT_time
  8321  00202C  26D9               	addwf	fsr2l,f,c
  8322  00202E  0E00               	movlw	high printRTC@INT_time
  8323  002030  22DA               	addwfc	fsr2h,f,c
  8324  002032  C0AC  FFDE         	movff	??_printRTC+1,postinc2
  8325  002036  C0AD  FFDD         	movff	??_printRTC+2,postdec2
  8326                           
  8327                           ; BSR set to: 0
  8328  00203A  0100               	movlb	0	; () banked
  8329  00203C  4BC2               	infsnz	printRTC@i& (0+255),f,b
  8330  00203E  2BC3               	incf	(printRTC@i+1)& (0+255),f,b
  8331                           
  8332                           ; BSR set to: 0
  8333  002040  0100               	movlb	0	; () banked
  8334  002042  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
  8335  002044  D7C3               	goto	l6060
  8336  002046  0100               	movlb	0	; () banked
  8337  002048  51C3               	movf	(printRTC@i+1)& (0+255),w,b
  8338  00204A  E101               	bnz	u4750
  8339  00204C  D7BA               	goto	L7
  8340  00204E                     u4750:
  8341  00204E                     l602:
  8342                           
  8343                           ; BSR set to: 0
  8344                           ;RTC.c: 69: }
  8345                           ;RTC.c: 70: int RTC_month = INT_time[5];
  8346  00204E  C0B8  F0BC         	movff	printRTC@INT_time+10,printRTC@RTC_month
  8347  002052  C0B9  F0BD         	movff	printRTC@INT_time+11,printRTC@RTC_month+1
  8348                           
  8349                           ;RTC.c: 71: switch(RTC_month){
  8350  002056  D0B4               	goto	l6092
  8351  002058                     l6066:
  8352                           
  8353                           ; BSR set to: 0
  8354                           ;RTC.c: 73: strcpy(month, "JAN");
  8355  002058  0EBE               	movlw	low printRTC@month
  8356  00205A  0100               	movlb	0	; () banked
  8357  00205C  6F80               	movwf	strcpy@to& (0+255),b
  8358  00205E  0E00               	movlw	high printRTC@month
  8359  002060  0100               	movlb	0	; () banked
  8360  002062  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8361  002064  0EDB               	movlw	low STR_8
  8362  002066  0100               	movlb	0	; () banked
  8363  002068  6F82               	movwf	strcpy@from& (0+255),b
  8364  00206A  0EFF               	movlw	high STR_8
  8365  00206C  0100               	movlb	0	; () banked
  8366  00206E  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8367  002070  EC04  F023         	call	_strcpy	;wreg free
  8368                           
  8369                           ;RTC.c: 74: break;
  8370  002074  D0D4               	goto	l6094
  8371  002076                     l6068:
  8372                           
  8373                           ;RTC.c: 76: strcpy(month, "FEB");
  8374  002076  0EBE               	movlw	low printRTC@month
  8375  002078  0100               	movlb	0	; () banked
  8376  00207A  6F80               	movwf	strcpy@to& (0+255),b
  8377  00207C  0E00               	movlw	high printRTC@month
  8378  00207E  0100               	movlb	0	; () banked
  8379  002080  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8380  002082  0ECB               	movlw	low STR_9
  8381  002084  0100               	movlb	0	; () banked
  8382  002086  6F82               	movwf	strcpy@from& (0+255),b
  8383  002088  0EFF               	movlw	high STR_9
  8384  00208A  0100               	movlb	0	; () banked
  8385  00208C  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8386  00208E  EC04  F023         	call	_strcpy	;wreg free
  8387                           
  8388                           ;RTC.c: 77: break;
  8389  002092  D0C5               	goto	l6094
  8390  002094                     l6070:
  8391                           
  8392                           ;RTC.c: 79: strcpy(month, "MAR");
  8393  002094  0EBE               	movlw	low printRTC@month
  8394  002096  0100               	movlb	0	; () banked
  8395  002098  6F80               	movwf	strcpy@to& (0+255),b
  8396  00209A  0E00               	movlw	high printRTC@month
  8397  00209C  0100               	movlb	0	; () banked
  8398  00209E  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8399  0020A0  0EE7               	movlw	low STR_10
  8400  0020A2  0100               	movlb	0	; () banked
  8401  0020A4  6F82               	movwf	strcpy@from& (0+255),b
  8402  0020A6  0EFF               	movlw	high STR_10
  8403  0020A8  0100               	movlb	0	; () banked
  8404  0020AA  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8405  0020AC  EC04  F023         	call	_strcpy	;wreg free
  8406                           
  8407                           ;RTC.c: 80: break;
  8408  0020B0  D0B6               	goto	l6094
  8409  0020B2                     l6072:
  8410                           
  8411                           ;RTC.c: 82: strcpy(month, "APR");
  8412  0020B2  0EBE               	movlw	low printRTC@month
  8413  0020B4  0100               	movlb	0	; () banked
  8414  0020B6  6F80               	movwf	strcpy@to& (0+255),b
  8415  0020B8  0E00               	movlw	high printRTC@month
  8416  0020BA  0100               	movlb	0	; () banked
  8417  0020BC  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8418  0020BE  0EEB               	movlw	low STR_11
  8419  0020C0  0100               	movlb	0	; () banked
  8420  0020C2  6F82               	movwf	strcpy@from& (0+255),b
  8421  0020C4  0EFF               	movlw	high STR_11
  8422  0020C6  0100               	movlb	0	; () banked
  8423  0020C8  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8424  0020CA  EC04  F023         	call	_strcpy	;wreg free
  8425                           
  8426                           ;RTC.c: 83: break;
  8427  0020CE  D0A7               	goto	l6094
  8428  0020D0                     l6074:
  8429                           
  8430                           ;RTC.c: 85: strcpy(month, "MAY");
  8431  0020D0  0EBE               	movlw	low printRTC@month
  8432  0020D2  0100               	movlb	0	; () banked
  8433  0020D4  6F80               	movwf	strcpy@to& (0+255),b
  8434  0020D6  0E00               	movlw	high printRTC@month
  8435  0020D8  0100               	movlb	0	; () banked
  8436  0020DA  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8437  0020DC  0EFB               	movlw	low STR_12
  8438  0020DE  0100               	movlb	0	; () banked
  8439  0020E0  6F82               	movwf	strcpy@from& (0+255),b
  8440  0020E2  0EFF               	movlw	high STR_12
  8441  0020E4  0100               	movlb	0	; () banked
  8442  0020E6  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8443  0020E8  EC04  F023         	call	_strcpy	;wreg free
  8444                           
  8445                           ;RTC.c: 86: break;
  8446  0020EC  D098               	goto	l6094
  8447  0020EE                     l6076:
  8448                           
  8449                           ;RTC.c: 88: strcpy(month, "JUN");
  8450  0020EE  0EBE               	movlw	low printRTC@month
  8451  0020F0  0100               	movlb	0	; () banked
  8452  0020F2  6F80               	movwf	strcpy@to& (0+255),b
  8453  0020F4  0E00               	movlw	high printRTC@month
  8454  0020F6  0100               	movlb	0	; () banked
  8455  0020F8  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8456  0020FA  0EDF               	movlw	low STR_13
  8457  0020FC  0100               	movlb	0	; () banked
  8458  0020FE  6F82               	movwf	strcpy@from& (0+255),b
  8459  002100  0EFF               	movlw	high STR_13
  8460  002102  0100               	movlb	0	; () banked
  8461  002104  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8462  002106  EC04  F023         	call	_strcpy	;wreg free
  8463                           
  8464                           ;RTC.c: 89: break;
  8465  00210A  D089               	goto	l6094
  8466  00210C                     l6078:
  8467                           
  8468                           ;RTC.c: 91: strcpy(month, "JUL");
  8469  00210C  0EBE               	movlw	low printRTC@month
  8470  00210E  0100               	movlb	0	; () banked
  8471  002110  6F80               	movwf	strcpy@to& (0+255),b
  8472  002112  0E00               	movlw	high printRTC@month
  8473  002114  0100               	movlb	0	; () banked
  8474  002116  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8475  002118  0ED7               	movlw	low STR_14
  8476  00211A  0100               	movlb	0	; () banked
  8477  00211C  6F82               	movwf	strcpy@from& (0+255),b
  8478  00211E  0EFF               	movlw	high STR_14
  8479  002120  0100               	movlb	0	; () banked
  8480  002122  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8481  002124  EC04  F023         	call	_strcpy	;wreg free
  8482                           
  8483                           ;RTC.c: 92: break;
  8484  002128  D07A               	goto	l6094
  8485  00212A                     l6080:
  8486                           
  8487                           ;RTC.c: 94: strcpy(month, "AUG");
  8488  00212A  0EBE               	movlw	low printRTC@month
  8489  00212C  0100               	movlb	0	; () banked
  8490  00212E  6F80               	movwf	strcpy@to& (0+255),b
  8491  002130  0E00               	movlw	high printRTC@month
  8492  002132  0100               	movlb	0	; () banked
  8493  002134  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8494  002136  0ED3               	movlw	low STR_15
  8495  002138  0100               	movlb	0	; () banked
  8496  00213A  6F82               	movwf	strcpy@from& (0+255),b
  8497  00213C  0EFF               	movlw	high STR_15
  8498  00213E  0100               	movlb	0	; () banked
  8499  002140  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8500  002142  EC04  F023         	call	_strcpy	;wreg free
  8501                           
  8502                           ;RTC.c: 95: break;
  8503  002146  D06B               	goto	l6094
  8504  002148                     l6082:
  8505                           
  8506                           ;RTC.c: 97: strcpy(month, "SEP");
  8507  002148  0EBE               	movlw	low printRTC@month
  8508  00214A  0100               	movlb	0	; () banked
  8509  00214C  6F80               	movwf	strcpy@to& (0+255),b
  8510  00214E  0E00               	movlw	high printRTC@month
  8511  002150  0100               	movlb	0	; () banked
  8512  002152  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8513  002154  0EE3               	movlw	low STR_16
  8514  002156  0100               	movlb	0	; () banked
  8515  002158  6F82               	movwf	strcpy@from& (0+255),b
  8516  00215A  0EFF               	movlw	high STR_16
  8517  00215C  0100               	movlb	0	; () banked
  8518  00215E  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8519  002160  EC04  F023         	call	_strcpy	;wreg free
  8520                           
  8521                           ;RTC.c: 98: break;
  8522  002164  D05C               	goto	l6094
  8523  002166                     l6084:
  8524                           
  8525                           ;RTC.c: 100: strcpy(month, "OCT");
  8526  002166  0EBE               	movlw	low printRTC@month
  8527  002168  0100               	movlb	0	; () banked
  8528  00216A  6F80               	movwf	strcpy@to& (0+255),b
  8529  00216C  0E00               	movlw	high printRTC@month
  8530  00216E  0100               	movlb	0	; () banked
  8531  002170  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8532  002172  0EF3               	movlw	low STR_17
  8533  002174  0100               	movlb	0	; () banked
  8534  002176  6F82               	movwf	strcpy@from& (0+255),b
  8535  002178  0EFF               	movlw	high STR_17
  8536  00217A  0100               	movlb	0	; () banked
  8537  00217C  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8538  00217E  EC04  F023         	call	_strcpy	;wreg free
  8539                           
  8540                           ;RTC.c: 101: break;
  8541  002182  D04D               	goto	l6094
  8542  002184                     l6086:
  8543                           
  8544                           ;RTC.c: 103: strcpy(month, "NOV");
  8545  002184  0EBE               	movlw	low printRTC@month
  8546  002186  0100               	movlb	0	; () banked
  8547  002188  6F80               	movwf	strcpy@to& (0+255),b
  8548  00218A  0E00               	movlw	high printRTC@month
  8549  00218C  0100               	movlb	0	; () banked
  8550  00218E  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8551  002190  0EF7               	movlw	low STR_18
  8552  002192  0100               	movlb	0	; () banked
  8553  002194  6F82               	movwf	strcpy@from& (0+255),b
  8554  002196  0EFF               	movlw	high STR_18
  8555  002198  0100               	movlb	0	; () banked
  8556  00219A  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8557  00219C  EC04  F023         	call	_strcpy	;wreg free
  8558                           
  8559                           ;RTC.c: 104: break;
  8560  0021A0  D03E               	goto	l6094
  8561  0021A2                     l6088:
  8562                           
  8563                           ;RTC.c: 106: strcpy(month, "DEC");
  8564  0021A2  0EBE               	movlw	low printRTC@month
  8565  0021A4  0100               	movlb	0	; () banked
  8566  0021A6  6F80               	movwf	strcpy@to& (0+255),b
  8567  0021A8  0E00               	movlw	high printRTC@month
  8568  0021AA  0100               	movlb	0	; () banked
  8569  0021AC  6F81               	movwf	(strcpy@to+1)& (0+255),b
  8570  0021AE  0ECF               	movlw	low STR_19
  8571  0021B0  0100               	movlb	0	; () banked
  8572  0021B2  6F82               	movwf	strcpy@from& (0+255),b
  8573  0021B4  0EFF               	movlw	high STR_19
  8574  0021B6  0100               	movlb	0	; () banked
  8575  0021B8  6F83               	movwf	(strcpy@from+1)& (0+255),b
  8576  0021BA  EC04  F023         	call	_strcpy	;wreg free
  8577                           
  8578                           ;RTC.c: 108: }
  8579                           
  8580                           ;RTC.c: 107: break;
  8581  0021BE  D02F               	goto	l6094
  8582  0021C0                     l6092:
  8583  0021C0  C0BC  F0AB         	movff	printRTC@RTC_month,??_printRTC
  8584  0021C4  C0BD  F0AC         	movff	printRTC@RTC_month+1,??_printRTC+1
  8585                           
  8586                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8587                           ; Switch size 1, requested type "space"
  8588                           ; Number of cases is 1, Range of values is 0 to 0
  8589                           ; switch strategies available:
  8590                           ; Name         Instructions Cycles
  8591                           ; simple_byte            4     3 (average)
  8592                           ;	Chosen strategy is simple_byte
  8593  0021C8  0100               	movlb	0	; () banked
  8594  0021CA  51AC               	movf	(??_printRTC+1)& (0+255),w,b
  8595  0021CC  0A00               	xorlw	0	; case 0
  8596  0021CE  A4D8               	btfss	status,2,c
  8597  0021D0  D026               	goto	l6094
  8598                           
  8599                           ; BSR set to: 0
  8600                           ; Switch size 1, requested type "space"
  8601                           ; Number of cases is 12, Range of values is 1 to 12
  8602                           ; switch strategies available:
  8603                           ; Name         Instructions Cycles
  8604                           ; simple_byte           37    19 (average)
  8605                           ;	Chosen strategy is simple_byte
  8606  0021D2  0100               	movlb	0	; () banked
  8607  0021D4  51AB               	movf	??_printRTC& (0+255),w,b
  8608  0021D6  0A01               	xorlw	1	; case 1
  8609  0021D8  B4D8               	btfsc	status,2,c
  8610  0021DA  D73E               	goto	l6066
  8611  0021DC  0A03               	xorlw	3	; case 2
  8612  0021DE  B4D8               	btfsc	status,2,c
  8613  0021E0  D74A               	goto	l6068
  8614  0021E2  0A01               	xorlw	1	; case 3
  8615  0021E4  B4D8               	btfsc	status,2,c
  8616  0021E6  D756               	goto	l6070
  8617  0021E8  0A07               	xorlw	7	; case 4
  8618  0021EA  B4D8               	btfsc	status,2,c
  8619  0021EC  D762               	goto	l6072
  8620  0021EE  0A01               	xorlw	1	; case 5
  8621  0021F0  B4D8               	btfsc	status,2,c
  8622  0021F2  D76E               	goto	l6074
  8623  0021F4  0A03               	xorlw	3	; case 6
  8624  0021F6  B4D8               	btfsc	status,2,c
  8625  0021F8  D77A               	goto	l6076
  8626  0021FA  0A01               	xorlw	1	; case 7
  8627  0021FC  B4D8               	btfsc	status,2,c
  8628  0021FE  D786               	goto	l6078
  8629  002200  0A0F               	xorlw	15	; case 8
  8630  002202  B4D8               	btfsc	status,2,c
  8631  002204  D792               	goto	l6080
  8632  002206  0A01               	xorlw	1	; case 9
  8633  002208  B4D8               	btfsc	status,2,c
  8634  00220A  D79E               	goto	l6082
  8635  00220C  0A03               	xorlw	3	; case 10
  8636  00220E  B4D8               	btfsc	status,2,c
  8637  002210  D7AA               	goto	l6084
  8638  002212  0A01               	xorlw	1	; case 11
  8639  002214  B4D8               	btfsc	status,2,c
  8640  002216  D7B6               	goto	l6086
  8641  002218  0A07               	xorlw	7	; case 12
  8642  00221A  B4D8               	btfsc	status,2,c
  8643  00221C  D7C2               	goto	l6088
  8644  00221E                     l6094:
  8645                           
  8646                           ;RTC.c: 109: lcdInst(0b10000000);;
  8647  00221E  0E80               	movlw	128
  8648  002220  EC98  F025         	call	_lcdInst
  8649                           
  8650                           ;RTC.c: 110: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
  8651  002224  0E1C               	movlw	low STR_21
  8652  002226  0100               	movlb	0	; () banked
  8653  002228  6F8E               	movwf	printf@f& (0+255),b
  8654  00222A  0EFB               	movlw	high STR_21
  8655  00222C  0100               	movlb	0	; () banked
  8656  00222E  6F8F               	movwf	(printf@f+1)& (0+255),b
  8657  002230  C0B6  F090         	movff	printRTC@INT_time+8,?_printf+2
  8658  002234  C0B7  F091         	movff	printRTC@INT_time+9,?_printf+3
  8659  002238  0EBE               	movlw	low printRTC@month
  8660  00223A  0100               	movlb	0	; () banked
  8661  00223C  6F92               	movwf	(?_printf+4)& (0+255),b
  8662  00223E  0E00               	movlw	high printRTC@month
  8663  002240  0100               	movlb	0	; () banked
  8664  002242  6F93               	movwf	(?_printf+5)& (0+255),b
  8665  002244  C0B2  F094         	movff	printRTC@INT_time+4,?_printf+6
  8666  002248  C0B3  F095         	movff	printRTC@INT_time+5,?_printf+7
  8667  00224C  C0B0  F096         	movff	printRTC@INT_time+2,?_printf+8
  8668  002250  C0B1  F097         	movff	printRTC@INT_time+3,?_printf+9
  8669  002254  C0AE  F098         	movff	printRTC@INT_time,?_printf+10
  8670  002258  C0AF  F099         	movff	printRTC@INT_time+1,?_printf+11
  8671  00225C  ECB8  F008         	call	_printf	;wreg free
  8672  002260  0012               	return		;funcret
  8673  002262                     __end_of_printRTC:
  8674                           	opt stack 0
  8675                           tblptru	equ	0xFF8
  8676                           tblptrh	equ	0xFF7
  8677                           tblptrl	equ	0xFF6
  8678                           tablat	equ	0xFF5
  8679                           prodh	equ	0xFF4
  8680                           prodl	equ	0xFF3
  8681                           intcon	equ	0xFF2
  8682                           intcon2	equ	0xFF1
  8683                           intcon3	equ	0xFF0
  8684                           postinc0	equ	0xFEE
  8685                           wreg	equ	0xFE8
  8686                           postdec1	equ	0xFE5
  8687                           fsr1l	equ	0xFE1
  8688                           indf2	equ	0xFDF
  8689                           postinc2	equ	0xFDE
  8690                           postdec2	equ	0xFDD
  8691                           fsr2h	equ	0xFDA
  8692                           fsr2l	equ	0xFD9
  8693                           status	equ	0xFD8
  8694                           
  8695 ;; *************** function _strcpy *****************
  8696 ;; Defined at:
  8697 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
  8698 ;; Parameters:    Size  Location     Type
  8699 ;;  to              2    0[BANK0 ] PTR unsigned char 
  8700 ;;		 -> printRTC@month(4), UI@month(4), 
  8701 ;;  from            2    2[BANK0 ] PTR const unsigned char 
  8702 ;;		 -> STR_62(4), STR_61(4), STR_60(4), STR_59(4), 
  8703 ;;		 -> STR_58(4), STR_57(4), STR_56(4), STR_55(4), 
  8704 ;;		 -> STR_54(4), STR_53(4), STR_52(4), STR_51(4), 
  8705 ;;		 -> STR_20(4), STR_19(4), STR_18(4), STR_17(4), 
  8706 ;;		 -> STR_16(4), STR_15(4), STR_14(4), STR_13(4), 
  8707 ;;		 -> STR_12(4), STR_11(4), STR_10(4), STR_9(4), 
  8708 ;;		 -> STR_8(4), 
  8709 ;; Auto vars:     Size  Location     Type
  8710 ;;  cp              2    4[BANK0 ] PTR unsigned char 
  8711 ;;		 -> printRTC@month(4), UI@month(4), 
  8712 ;; Return value:  Size  Location     Type
  8713 ;;                  2    0[BANK0 ] PTR unsigned char 
  8714 ;; Registers used:
  8715 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  8716 ;; Tracked objects:
  8717 ;;		On entry : 0/0
  8718 ;;		On exit  : 0/0
  8719 ;;		Unchanged: 0/0
  8720 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8721 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8722 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8723 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8724 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8725 ;;Total ram usage:        6 bytes
  8726 ;; Hardware stack levels used:    1
  8727 ;; Hardware stack levels required when called:    7
  8728 ;; This function calls:
  8729 ;;		Nothing
  8730 ;; This function is called by:
  8731 ;;		_UI
  8732 ;;		_printRTC
  8733 ;; This function uses a non-reentrant model
  8734 ;;
  8735                           
  8736                           	psect	text25
  8737  004608                     __ptext25:
  8738                           	opt stack 0
  8739  004608                     _strcpy:
  8740                           	opt stack 20
  8741                           
  8742                           ;incstack = 0
  8743  004608  C080  F084         	movff	strcpy@to,strcpy@cp
  8744  00460C  C081  F085         	movff	strcpy@to+1,strcpy@cp+1
  8745  004610  D006               	goto	l5804
  8746  004612                     l5802:
  8747  004612  0100               	movlb	0	; () banked
  8748  004614  4B84               	infsnz	strcpy@cp& (0+255),f,b
  8749  004616  2B85               	incf	(strcpy@cp+1)& (0+255),f,b
  8750  004618  0100               	movlb	0	; () banked
  8751  00461A  4B82               	infsnz	strcpy@from& (0+255),f,b
  8752  00461C  2B83               	incf	(strcpy@from+1)& (0+255),f,b
  8753  00461E                     l5804:
  8754  00461E  C082  FFF6         	movff	strcpy@from,tblptrl
  8755  004622  C083  FFF7         	movff	strcpy@from+1,tblptrh
  8756  004626                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  8757  004626  6AF8               	clrf	tblptru,c
  8758  004628                     	endif
  8759  004628                     	if	0	;tblptru may be non-zero
  8760  004628                     	endif
  8761  004628  C084  FFD9         	movff	strcpy@cp,fsr2l
  8762  00462C  C085  FFDA         	movff	strcpy@cp+1,fsr2h
  8763  004630  0008               	tblrd		*
  8764  004632  CFF5 FFDF          	movff	tablat,indf2
  8765  004636  50DF               	movf	indf2,w,c
  8766  004638  B4D8               	btfsc	status,2,c
  8767  00463A  0012               	return	
  8768  00463C  D7EA               	goto	l5802
  8769  00463E                     __end_of_strcpy:
  8770                           	opt stack 0
  8771                           tblptru	equ	0xFF8
  8772                           tblptrh	equ	0xFF7
  8773                           tblptrl	equ	0xFF6
  8774                           tablat	equ	0xFF5
  8775                           prodh	equ	0xFF4
  8776                           prodl	equ	0xFF3
  8777                           intcon	equ	0xFF2
  8778                           intcon2	equ	0xFF1
  8779                           intcon3	equ	0xFF0
  8780                           postinc0	equ	0xFEE
  8781                           wreg	equ	0xFE8
  8782                           postdec1	equ	0xFE5
  8783                           fsr1l	equ	0xFE1
  8784                           indf2	equ	0xFDF
  8785                           postinc2	equ	0xFDE
  8786                           postdec2	equ	0xFDD
  8787                           fsr2h	equ	0xFDA
  8788                           fsr2l	equ	0xFD9
  8789                           status	equ	0xFD8
  8790                           
  8791 ;; *************** function _getRTC *****************
  8792 ;; Defined at:
  8793 ;;		line 44 in file "RTC.c"
  8794 ;; Parameters:    Size  Location     Type
  8795 ;;		None
  8796 ;; Auto vars:     Size  Location     Type
  8797 ;;  i               2    3[BANK0 ] int 
  8798 ;; Return value:  Size  Location     Type
  8799 ;;                  1    wreg      void 
  8800 ;; Registers used:
  8801 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8802 ;; Tracked objects:
  8803 ;;		On entry : 0/0
  8804 ;;		On exit  : 0/0
  8805 ;;		Unchanged: 0/0
  8806 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8807 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8808 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8809 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8810 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8811 ;;Total ram usage:        2 bytes
  8812 ;; Hardware stack levels used:    1
  8813 ;; Hardware stack levels required when called:    9
  8814 ;; This function calls:
  8815 ;;		_I2C_Master_Read
  8816 ;;		_I2C_Master_Start
  8817 ;;		_I2C_Master_Stop
  8818 ;;		_I2C_Master_Write
  8819 ;; This function is called by:
  8820 ;;		_printRTC
  8821 ;;		_initSortTimer
  8822 ;; This function uses a non-reentrant model
  8823 ;;
  8824                           
  8825                           	psect	text26
  8826  003D78                     __ptext26:
  8827                           	opt stack 0
  8828  003D78                     _getRTC:
  8829                           	opt stack 18
  8830                           
  8831                           ;RTC.c: 48: I2C_Master_Start();
  8832                           
  8833                           ;incstack = 0
  8834  003D78  ECBE  F025         	call	_I2C_Master_Start	;wreg free
  8835                           
  8836                           ;RTC.c: 49: I2C_Master_Write(0b11010000);
  8837  003D7C  0E00               	movlw	0
  8838  003D7E  0100               	movlb	0	; () banked
  8839  003D80  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  8840  003D82  0ED0               	movlw	208
  8841  003D84  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  8842  003D86  ECAC  F025         	call	_I2C_Master_Write	;wreg free
  8843                           
  8844                           ;RTC.c: 50: I2C_Master_Write(0x00);
  8845  003D8A  0E00               	movlw	0
  8846  003D8C  0100               	movlb	0	; () banked
  8847  003D8E  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  8848  003D90  0E00               	movlw	0
  8849  003D92  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  8850  003D94  ECAC  F025         	call	_I2C_Master_Write	;wreg free
  8851                           
  8852                           ;RTC.c: 51: I2C_Master_Stop();
  8853  003D98  ECBA  F025         	call	_I2C_Master_Stop	;wreg free
  8854                           
  8855                           ;RTC.c: 54: I2C_Master_Start();
  8856  003D9C  ECBE  F025         	call	_I2C_Master_Start	;wreg free
  8857                           
  8858                           ;RTC.c: 55: I2C_Master_Write(0b11010001);
  8859  003DA0  0E00               	movlw	0
  8860  003DA2  0100               	movlb	0	; () banked
  8861  003DA4  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  8862  003DA6  0ED1               	movlw	209
  8863  003DA8  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  8864  003DAA  ECAC  F025         	call	_I2C_Master_Write	;wreg free
  8865                           
  8866                           ;RTC.c: 56: for(int i = 0; i < 6; i++){
  8867  003DAE  0E00               	movlw	0
  8868  003DB0  0100               	movlb	0	; () banked
  8869  003DB2  6F84               	movwf	(getRTC@i+1)& (0+255),b
  8870  003DB4  0E00               	movlw	0
  8871  003DB6  6F83               	movwf	getRTC@i& (0+255),b
  8872  003DB8                     l5810:
  8873                           
  8874                           ; BSR set to: 0
  8875  003DB8  0100               	movlb	0	; () banked
  8876  003DBA  BF84               	btfsc	(getRTC@i+1)& (0+255),7,b
  8877  003DBC  D008               	goto	l5814
  8878  003DBE  0100               	movlb	0	; () banked
  8879  003DC0  5184               	movf	(getRTC@i+1)& (0+255),w,b
  8880  003DC2  E115               	bnz	l5820
  8881  003DC4  0E06               	movlw	6
  8882  003DC6  0100               	movlb	0	; () banked
  8883  003DC8  5D83               	subwf	getRTC@i& (0+255),w,b
  8884  003DCA  B0D8               	btfsc	status,0,c
  8885  003DCC  D010               	goto	l5820
  8886  003DCE                     l5814:
  8887                           
  8888                           ; BSR set to: 0
  8889                           ;RTC.c: 57: time[i] = I2C_Master_Read(1);
  8890  003DCE  0E24               	movlw	low _time
  8891  003DD0  0100               	movlb	0	; () banked
  8892  003DD2  2583               	addwf	getRTC@i& (0+255),w,b
  8893  003DD4  6ED9               	movwf	fsr2l,c
  8894  003DD6  0E01               	movlw	high _time
  8895  003DD8  0100               	movlb	0	; () banked
  8896  003DDA  2184               	addwfc	(getRTC@i+1)& (0+255),w,b
  8897  003DDC  6EDA               	movwf	fsr2h,c
  8898  003DDE  0E01               	movlw	1
  8899  003DE0  EC5B  F024         	call	_I2C_Master_Read
  8900  003DE4  6EDF               	movwf	indf2,c
  8901  003DE6  0100               	movlb	0	; () banked
  8902  003DE8  4B83               	infsnz	getRTC@i& (0+255),f,b
  8903  003DEA  2B84               	incf	(getRTC@i+1)& (0+255),f,b
  8904  003DEC  D7E5               	goto	l5810
  8905  003DEE                     l5820:
  8906                           
  8907                           ; BSR set to: 0
  8908                           ;RTC.c: 58: }
  8909                           ;RTC.c: 59: time[6] = I2C_Master_Read(0);
  8910  003DEE  0E00               	movlw	0
  8911  003DF0  EC5B  F024         	call	_I2C_Master_Read
  8912  003DF4  0101               	movlb	1	; () banked
  8913  003DF6  6F2A               	movwf	(_time+6)& (0+255),b
  8914                           
  8915                           ;RTC.c: 60: I2C_Master_Stop();
  8916  003DF8  ECBA  F025         	call	_I2C_Master_Stop	;wreg free
  8917  003DFC  0012               	return		;funcret
  8918  003DFE                     __end_of_getRTC:
  8919                           	opt stack 0
  8920                           tblptru	equ	0xFF8
  8921                           tblptrh	equ	0xFF7
  8922                           tblptrl	equ	0xFF6
  8923                           tablat	equ	0xFF5
  8924                           prodh	equ	0xFF4
  8925                           prodl	equ	0xFF3
  8926                           intcon	equ	0xFF2
  8927                           intcon2	equ	0xFF1
  8928                           intcon3	equ	0xFF0
  8929                           postinc0	equ	0xFEE
  8930                           wreg	equ	0xFE8
  8931                           postdec1	equ	0xFE5
  8932                           fsr1l	equ	0xFE1
  8933                           indf2	equ	0xFDF
  8934                           postinc2	equ	0xFDE
  8935                           postdec2	equ	0xFDD
  8936                           fsr2h	equ	0xFDA
  8937                           fsr2l	equ	0xFD9
  8938                           status	equ	0xFD8
  8939                           
  8940 ;; *************** function _I2C_Master_Write *****************
  8941 ;; Defined at:
  8942 ;;		line 49 in file "I2C.c"
  8943 ;; Parameters:    Size  Location     Type
  8944 ;;  d               2    1[BANK0 ] unsigned int 
  8945 ;; Auto vars:     Size  Location     Type
  8946 ;;		None
  8947 ;; Return value:  Size  Location     Type
  8948 ;;                  1    wreg      void 
  8949 ;; Registers used:
  8950 ;;		wreg, status,2, status,0, cstack
  8951 ;; Tracked objects:
  8952 ;;		On entry : 0/0
  8953 ;;		On exit  : 0/0
  8954 ;;		Unchanged: 0/0
  8955 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8956 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8957 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8958 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8959 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8960 ;;Total ram usage:        2 bytes
  8961 ;; Hardware stack levels used:    1
  8962 ;; Hardware stack levels required when called:    8
  8963 ;; This function calls:
  8964 ;;		_I2C_Master_Wait
  8965 ;; This function is called by:
  8966 ;;		_loadRTC
  8967 ;;		_getRTC
  8968 ;; This function uses a non-reentrant model
  8969 ;;
  8970                           
  8971                           	psect	text27
  8972  004B58                     __ptext27:
  8973                           	opt stack 0
  8974  004B58                     _I2C_Master_Write:
  8975                           	opt stack 18
  8976                           
  8977                           ;I2C.c: 51: I2C_Master_Wait();
  8978                           
  8979                           ;incstack = 0
  8980  004B58  EC7D  F025         	call	_I2C_Master_Wait	;wreg free
  8981                           
  8982                           ;I2C.c: 52: SSPBUF = d;
  8983  004B5C  C081  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  8984  004B60  0012               	return		;funcret
  8985  004B62                     __end_of_I2C_Master_Write:
  8986                           	opt stack 0
  8987                           tblptru	equ	0xFF8
  8988                           tblptrh	equ	0xFF7
  8989                           tblptrl	equ	0xFF6
  8990                           tablat	equ	0xFF5
  8991                           prodh	equ	0xFF4
  8992                           prodl	equ	0xFF3
  8993                           intcon	equ	0xFF2
  8994                           intcon2	equ	0xFF1
  8995                           intcon3	equ	0xFF0
  8996                           postinc0	equ	0xFEE
  8997                           wreg	equ	0xFE8
  8998                           postdec1	equ	0xFE5
  8999                           fsr1l	equ	0xFE1
  9000                           indf2	equ	0xFDF
  9001                           postinc2	equ	0xFDE
  9002                           postdec2	equ	0xFDD
  9003                           fsr2h	equ	0xFDA
  9004                           fsr2l	equ	0xFD9
  9005                           status	equ	0xFD8
  9006                           
  9007 ;; *************** function _I2C_Master_Stop *****************
  9008 ;; Defined at:
  9009 ;;		line 43 in file "I2C.c"
  9010 ;; Parameters:    Size  Location     Type
  9011 ;;		None
  9012 ;; Auto vars:     Size  Location     Type
  9013 ;;		None
  9014 ;; Return value:  Size  Location     Type
  9015 ;;                  1    wreg      void 
  9016 ;; Registers used:
  9017 ;;		wreg, status,2, status,0, cstack
  9018 ;; Tracked objects:
  9019 ;;		On entry : 0/0
  9020 ;;		On exit  : 0/0
  9021 ;;		Unchanged: 0/0
  9022 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9023 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9024 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9025 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9026 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9027 ;;Total ram usage:        0 bytes
  9028 ;; Hardware stack levels used:    1
  9029 ;; Hardware stack levels required when called:    8
  9030 ;; This function calls:
  9031 ;;		_I2C_Master_Wait
  9032 ;; This function is called by:
  9033 ;;		_loadRTC
  9034 ;;		_getRTC
  9035 ;; This function uses a non-reentrant model
  9036 ;;
  9037                           
  9038                           	psect	text28
  9039  004B74                     __ptext28:
  9040                           	opt stack 0
  9041  004B74                     _I2C_Master_Stop:
  9042                           	opt stack 18
  9043                           
  9044                           ;I2C.c: 45: I2C_Master_Wait();
  9045                           
  9046                           ;incstack = 0
  9047  004B74  EC7D  F025         	call	_I2C_Master_Wait	;wreg free
  9048                           
  9049                           ;I2C.c: 46: PEN = 1;
  9050  004B78  84C5               	bsf	4037,2,c	;volatile
  9051  004B7A  0012               	return		;funcret
  9052  004B7C                     __end_of_I2C_Master_Stop:
  9053                           	opt stack 0
  9054                           tblptru	equ	0xFF8
  9055                           tblptrh	equ	0xFF7
  9056                           tblptrl	equ	0xFF6
  9057                           tablat	equ	0xFF5
  9058                           prodh	equ	0xFF4
  9059                           prodl	equ	0xFF3
  9060                           intcon	equ	0xFF2
  9061                           intcon2	equ	0xFF1
  9062                           intcon3	equ	0xFF0
  9063                           postinc0	equ	0xFEE
  9064                           wreg	equ	0xFE8
  9065                           postdec1	equ	0xFE5
  9066                           fsr1l	equ	0xFE1
  9067                           indf2	equ	0xFDF
  9068                           postinc2	equ	0xFDE
  9069                           postdec2	equ	0xFDD
  9070                           fsr2h	equ	0xFDA
  9071                           fsr2l	equ	0xFD9
  9072                           status	equ	0xFD8
  9073                           
  9074 ;; *************** function _I2C_Master_Start *****************
  9075 ;; Defined at:
  9076 ;;		line 31 in file "I2C.c"
  9077 ;; Parameters:    Size  Location     Type
  9078 ;;		None
  9079 ;; Auto vars:     Size  Location     Type
  9080 ;;		None
  9081 ;; Return value:  Size  Location     Type
  9082 ;;                  1    wreg      void 
  9083 ;; Registers used:
  9084 ;;		wreg, status,2, status,0, cstack
  9085 ;; Tracked objects:
  9086 ;;		On entry : 0/0
  9087 ;;		On exit  : 0/0
  9088 ;;		Unchanged: 0/0
  9089 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9090 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9091 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9092 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9093 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9094 ;;Total ram usage:        0 bytes
  9095 ;; Hardware stack levels used:    1
  9096 ;; Hardware stack levels required when called:    8
  9097 ;; This function calls:
  9098 ;;		_I2C_Master_Wait
  9099 ;; This function is called by:
  9100 ;;		_loadRTC
  9101 ;;		_getRTC
  9102 ;; This function uses a non-reentrant model
  9103 ;;
  9104                           
  9105                           	psect	text29
  9106  004B7C                     __ptext29:
  9107                           	opt stack 0
  9108  004B7C                     _I2C_Master_Start:
  9109                           	opt stack 18
  9110                           
  9111                           ;I2C.c: 33: I2C_Master_Wait();
  9112                           
  9113                           ;incstack = 0
  9114  004B7C  EC7D  F025         	call	_I2C_Master_Wait	;wreg free
  9115                           
  9116                           ;I2C.c: 34: SEN = 1;
  9117  004B80  80C5               	bsf	4037,0,c	;volatile
  9118  004B82  0012               	return		;funcret
  9119  004B84                     __end_of_I2C_Master_Start:
  9120                           	opt stack 0
  9121                           tblptru	equ	0xFF8
  9122                           tblptrh	equ	0xFF7
  9123                           tblptrl	equ	0xFF6
  9124                           tablat	equ	0xFF5
  9125                           prodh	equ	0xFF4
  9126                           prodl	equ	0xFF3
  9127                           intcon	equ	0xFF2
  9128                           intcon2	equ	0xFF1
  9129                           intcon3	equ	0xFF0
  9130                           postinc0	equ	0xFEE
  9131                           wreg	equ	0xFE8
  9132                           postdec1	equ	0xFE5
  9133                           fsr1l	equ	0xFE1
  9134                           indf2	equ	0xFDF
  9135                           postinc2	equ	0xFDE
  9136                           postdec2	equ	0xFDD
  9137                           fsr2h	equ	0xFDA
  9138                           fsr2l	equ	0xFD9
  9139                           status	equ	0xFD8
  9140                           
  9141 ;; *************** function _I2C_Master_Read *****************
  9142 ;; Defined at:
  9143 ;;		line 55 in file "I2C.c"
  9144 ;; Parameters:    Size  Location     Type
  9145 ;;  a               1    wreg     unsigned char 
  9146 ;; Auto vars:     Size  Location     Type
  9147 ;;  a               1    1[BANK0 ] unsigned char 
  9148 ;;  temp            1    2[BANK0 ] unsigned char 
  9149 ;; Return value:  Size  Location     Type
  9150 ;;                  1    wreg      unsigned char 
  9151 ;; Registers used:
  9152 ;;		wreg, status,2, status,0, cstack
  9153 ;; Tracked objects:
  9154 ;;		On entry : 0/0
  9155 ;;		On exit  : 0/0
  9156 ;;		Unchanged: 0/0
  9157 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9158 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9159 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9160 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9161 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9162 ;;Total ram usage:        2 bytes
  9163 ;; Hardware stack levels used:    1
  9164 ;; Hardware stack levels required when called:    8
  9165 ;; This function calls:
  9166 ;;		_I2C_Master_Wait
  9167 ;; This function is called by:
  9168 ;;		_getRTC
  9169 ;; This function uses a non-reentrant model
  9170 ;;
  9171                           
  9172                           	psect	text30
  9173  0048B6                     __ptext30:
  9174                           	opt stack 0
  9175  0048B6                     _I2C_Master_Read:
  9176                           	opt stack 18
  9177                           
  9178                           ;incstack = 0
  9179                           ;I2C_Master_Read@a stored from wreg
  9180  0048B6  0100               	movlb	0	; () banked
  9181  0048B8  6F81               	movwf	I2C_Master_Read@a& (0+255),b
  9182                           
  9183                           ;I2C.c: 57: unsigned char temp;
  9184                           ;I2C.c: 58: I2C_Master_Wait();
  9185  0048BA  EC7D  F025         	call	_I2C_Master_Wait	;wreg free
  9186                           
  9187                           ;I2C.c: 59: RCEN = 1;
  9188  0048BE  86C5               	bsf	4037,3,c	;volatile
  9189                           
  9190                           ;I2C.c: 60: I2C_Master_Wait();
  9191  0048C0  EC7D  F025         	call	_I2C_Master_Wait	;wreg free
  9192                           
  9193                           ;I2C.c: 61: temp = SSPBUF;
  9194  0048C4  CFC9 F082          	movff	4041,I2C_Master_Read@temp	;volatile
  9195                           
  9196                           ;I2C.c: 62: I2C_Master_Wait();
  9197  0048C8  EC7D  F025         	call	_I2C_Master_Wait	;wreg free
  9198                           
  9199                           ;I2C.c: 63: ACKDT = (a)?0:1;
  9200  0048CC  0100               	movlb	0	; () banked
  9201  0048CE  5181               	movf	I2C_Master_Read@a& (0+255),w,b
  9202  0048D0  0100               	movlb	0	; () banked
  9203  0048D2  A4D8               	btfss	status,2,c
  9204  0048D4  D002               	goto	u3840
  9205  0048D6  8AC5               	bsf	4037,5,c	;volatile
  9206  0048D8  D001               	goto	l5498
  9207  0048DA                     u3840:
  9208  0048DA  9AC5               	bcf	4037,5,c	;volatile
  9209  0048DC                     l5498:
  9210                           
  9211                           ;I2C.c: 64: ACKEN = 1;
  9212  0048DC  88C5               	bsf	4037,4,c	;volatile
  9213                           
  9214                           ;I2C.c: 65: return temp;
  9215  0048DE  0100               	movlb	0	; () banked
  9216  0048E0  5182               	movf	I2C_Master_Read@temp& (0+255),w,b
  9217  0048E2  0012               	return	
  9218  0048E4                     __end_of_I2C_Master_Read:
  9219                           	opt stack 0
  9220                           tblptru	equ	0xFF8
  9221                           tblptrh	equ	0xFF7
  9222                           tblptrl	equ	0xFF6
  9223                           tablat	equ	0xFF5
  9224                           prodh	equ	0xFF4
  9225                           prodl	equ	0xFF3
  9226                           intcon	equ	0xFF2
  9227                           intcon2	equ	0xFF1
  9228                           intcon3	equ	0xFF0
  9229                           postinc0	equ	0xFEE
  9230                           wreg	equ	0xFE8
  9231                           postdec1	equ	0xFE5
  9232                           fsr1l	equ	0xFE1
  9233                           indf2	equ	0xFDF
  9234                           postinc2	equ	0xFDE
  9235                           postdec2	equ	0xFDD
  9236                           fsr2h	equ	0xFDA
  9237                           fsr2l	equ	0xFD9
  9238                           status	equ	0xFD8
  9239                           
  9240 ;; *************** function _I2C_Master_Wait *****************
  9241 ;; Defined at:
  9242 ;;		line 26 in file "I2C.c"
  9243 ;; Parameters:    Size  Location     Type
  9244 ;;		None
  9245 ;; Auto vars:     Size  Location     Type
  9246 ;;		None
  9247 ;; Return value:  Size  Location     Type
  9248 ;;                  1    wreg      void 
  9249 ;; Registers used:
  9250 ;;		wreg, status,2, status,0
  9251 ;; Tracked objects:
  9252 ;;		On entry : 0/0
  9253 ;;		On exit  : 0/0
  9254 ;;		Unchanged: 0/0
  9255 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9256 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9257 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9258 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9259 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9260 ;;Total ram usage:        1 bytes
  9261 ;; Hardware stack levels used:    1
  9262 ;; Hardware stack levels required when called:    7
  9263 ;; This function calls:
  9264 ;;		Nothing
  9265 ;; This function is called by:
  9266 ;;		_I2C_Master_Start
  9267 ;;		_I2C_Master_Stop
  9268 ;;		_I2C_Master_Write
  9269 ;;		_I2C_Master_Read
  9270 ;;		_I2C_Master_RepeatedStart
  9271 ;; This function uses a non-reentrant model
  9272 ;;
  9273                           
  9274                           	psect	text31
  9275  004AFA                     __ptext31:
  9276                           	opt stack 0
  9277  004AFA                     _I2C_Master_Wait:
  9278                           	opt stack 18
  9279  004AFA                     l66:
  9280  004AFA  B4C7               	btfsc	4039,2,c	;volatile
  9281  004AFC  D7FE               	goto	l66
  9282  004AFE  CFC5 F080          	movff	4037,??_I2C_Master_Wait	;volatile
  9283  004B02  0E1F               	movlw	31
  9284  004B04  0100               	movlb	0	; () banked
  9285  004B06  1780               	andwf	??_I2C_Master_Wait& (0+255),f,b
  9286  004B08  B4D8               	btfsc	status,2,c
  9287  004B0A  0012               	return	
  9288  004B0C  D7F6               	goto	l66
  9289  004B0E                     __end_of_I2C_Master_Wait:
  9290                           	opt stack 0
  9291                           tblptru	equ	0xFF8
  9292                           tblptrh	equ	0xFF7
  9293                           tblptrl	equ	0xFF6
  9294                           tablat	equ	0xFF5
  9295                           prodh	equ	0xFF4
  9296                           prodl	equ	0xFF3
  9297                           intcon	equ	0xFF2
  9298                           intcon2	equ	0xFF1
  9299                           intcon3	equ	0xFF0
  9300                           postinc0	equ	0xFEE
  9301                           wreg	equ	0xFE8
  9302                           postdec1	equ	0xFE5
  9303                           fsr1l	equ	0xFE1
  9304                           indf2	equ	0xFDF
  9305                           postinc2	equ	0xFDE
  9306                           postdec2	equ	0xFDD
  9307                           fsr2h	equ	0xFDA
  9308                           fsr2l	equ	0xFD9
  9309                           status	equ	0xFD8
  9310                           
  9311 ;; *************** function _change_state_to_menu_22 *****************
  9312 ;; Defined at:
  9313 ;;		line 498 in file "UI.c"
  9314 ;; Parameters:    Size  Location     Type
  9315 ;;		None
  9316 ;; Auto vars:     Size  Location     Type
  9317 ;;		None
  9318 ;; Return value:  Size  Location     Type
  9319 ;;                  1    wreg      void 
  9320 ;; Registers used:
  9321 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9322 ;; Tracked objects:
  9323 ;;		On entry : 0/0
  9324 ;;		On exit  : 0/0
  9325 ;;		Unchanged: 0/0
  9326 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9327 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9328 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9329 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9330 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9331 ;;Total ram usage:        0 bytes
  9332 ;; Hardware stack levels used:    1
  9333 ;; Hardware stack levels required when called:   10
  9334 ;; This function calls:
  9335 ;;		_lcdInst
  9336 ;;		_printf
  9337 ;; This function is called by:
  9338 ;;		_UI
  9339 ;; This function uses a non-reentrant model
  9340 ;;
  9341                           
  9342                           	psect	text32
  9343  004598                     __ptext32:
  9344                           	opt stack 0
  9345  004598                     _change_state_to_menu_22:
  9346                           	opt stack 19
  9347                           
  9348                           ;UI.c: 499: cur_state = 22;
  9349                           
  9350                           ; BSR set to: 0
  9351                           ;incstack = 0
  9352  004598  0E00               	movlw	0
  9353  00459A  0100               	movlb	0	; () banked
  9354  00459C  6FE7               	movwf	(_cur_state+1)& (0+255),b
  9355  00459E  0E16               	movlw	22
  9356  0045A0  6FE6               	movwf	_cur_state& (0+255),b
  9357                           
  9358                           ; BSR set to: 0
  9359                           ;UI.c: 501: lcdInst(0b10000000);;
  9360  0045A2  0E80               	movlw	128
  9361  0045A4  EC98  F025         	call	_lcdInst
  9362                           
  9363                           ;UI.c: 502: printf("2. SORT        <");
  9364  0045A8  0EC4               	movlw	low STR_34
  9365  0045AA  0100               	movlb	0	; () banked
  9366  0045AC  6F8E               	movwf	printf@f& (0+255),b
  9367  0045AE  0EFD               	movlw	high STR_34
  9368  0045B0  0100               	movlb	0	; () banked
  9369  0045B2  6F8F               	movwf	(printf@f+1)& (0+255),b
  9370  0045B4  ECB8  F008         	call	_printf	;wreg free
  9371                           
  9372                           ;UI.c: 503: lcdInst(0b11000000);;
  9373  0045B8  0EC0               	movlw	192
  9374  0045BA  EC98  F025         	call	_lcdInst
  9375                           
  9376                           ;UI.c: 504: printf("3. LOGS         ");
  9377  0045BE  0E09               	movlw	low STR_36
  9378  0045C0  0100               	movlb	0	; () banked
  9379  0045C2  6F8E               	movwf	printf@f& (0+255),b
  9380  0045C4  0EFD               	movlw	high STR_36
  9381  0045C6  0100               	movlb	0	; () banked
  9382  0045C8  6F8F               	movwf	(printf@f+1)& (0+255),b
  9383  0045CA  ECB8  F008         	call	_printf	;wreg free
  9384  0045CE  0012               	return		;funcret
  9385  0045D0                     __end_of_change_state_to_menu_22:
  9386                           	opt stack 0
  9387                           tblptru	equ	0xFF8
  9388                           tblptrh	equ	0xFF7
  9389                           tblptrl	equ	0xFF6
  9390                           tablat	equ	0xFF5
  9391                           prodh	equ	0xFF4
  9392                           prodl	equ	0xFF3
  9393                           intcon	equ	0xFF2
  9394                           intcon2	equ	0xFF1
  9395                           intcon3	equ	0xFF0
  9396                           postinc0	equ	0xFEE
  9397                           wreg	equ	0xFE8
  9398                           postdec1	equ	0xFE5
  9399                           fsr1l	equ	0xFE1
  9400                           indf2	equ	0xFDF
  9401                           postinc2	equ	0xFDE
  9402                           postdec2	equ	0xFDD
  9403                           fsr2h	equ	0xFDA
  9404                           fsr2l	equ	0xFD9
  9405                           status	equ	0xFD8
  9406                           
  9407 ;; *************** function _change_state_to_menu_12 *****************
  9408 ;; Defined at:
  9409 ;;		line 490 in file "UI.c"
  9410 ;; Parameters:    Size  Location     Type
  9411 ;;		None
  9412 ;; Auto vars:     Size  Location     Type
  9413 ;;		None
  9414 ;; Return value:  Size  Location     Type
  9415 ;;                  1    wreg      void 
  9416 ;; Registers used:
  9417 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9418 ;; Tracked objects:
  9419 ;;		On entry : 0/0
  9420 ;;		On exit  : 0/0
  9421 ;;		Unchanged: 0/0
  9422 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9423 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9424 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9425 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9426 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9427 ;;Total ram usage:        0 bytes
  9428 ;; Hardware stack levels used:    1
  9429 ;; Hardware stack levels required when called:   10
  9430 ;; This function calls:
  9431 ;;		_lcdInst
  9432 ;;		_printf
  9433 ;; This function is called by:
  9434 ;;		_UI
  9435 ;; This function uses a non-reentrant model
  9436 ;;
  9437                           
  9438                           	psect	text33
  9439  0045D0                     __ptext33:
  9440                           	opt stack 0
  9441  0045D0                     _change_state_to_menu_12:
  9442                           	opt stack 19
  9443                           
  9444                           ;UI.c: 491: cur_state = 12;
  9445                           
  9446                           ;incstack = 0
  9447  0045D0  0E00               	movlw	0
  9448  0045D2  0100               	movlb	0	; () banked
  9449  0045D4  6FE7               	movwf	(_cur_state+1)& (0+255),b
  9450  0045D6  0E0C               	movlw	12
  9451  0045D8  6FE6               	movwf	_cur_state& (0+255),b
  9452                           
  9453                           ; BSR set to: 0
  9454                           ;UI.c: 493: lcdInst(0b10000000);;
  9455  0045DA  0E80               	movlw	128
  9456  0045DC  EC98  F025         	call	_lcdInst
  9457                           
  9458                           ;UI.c: 494: printf("1. DATE/TIME    ");
  9459  0045E0  0E2B               	movlw	low STR_33
  9460  0045E2  0100               	movlb	0	; () banked
  9461  0045E4  6F8E               	movwf	printf@f& (0+255),b
  9462  0045E6  0EFD               	movlw	high STR_33
  9463  0045E8  0100               	movlb	0	; () banked
  9464  0045EA  6F8F               	movwf	(printf@f+1)& (0+255),b
  9465  0045EC  ECB8  F008         	call	_printf	;wreg free
  9466                           
  9467                           ;UI.c: 495: lcdInst(0b11000000);;
  9468  0045F0  0EC0               	movlw	192
  9469  0045F2  EC98  F025         	call	_lcdInst
  9470                           
  9471                           ;UI.c: 496: printf("2. SORT        <");
  9472  0045F6  0EC4               	movlw	low STR_34
  9473  0045F8  0100               	movlb	0	; () banked
  9474  0045FA  6F8E               	movwf	printf@f& (0+255),b
  9475  0045FC  0EFD               	movlw	high STR_34
  9476  0045FE  0100               	movlb	0	; () banked
  9477  004600  6F8F               	movwf	(printf@f+1)& (0+255),b
  9478  004602  ECB8  F008         	call	_printf	;wreg free
  9479  004606  0012               	return		;funcret
  9480  004608                     __end_of_change_state_to_menu_12:
  9481                           	opt stack 0
  9482                           tblptru	equ	0xFF8
  9483                           tblptrh	equ	0xFF7
  9484                           tblptrl	equ	0xFF6
  9485                           tablat	equ	0xFF5
  9486                           prodh	equ	0xFF4
  9487                           prodl	equ	0xFF3
  9488                           intcon	equ	0xFF2
  9489                           intcon2	equ	0xFF1
  9490                           intcon3	equ	0xFF0
  9491                           postinc0	equ	0xFEE
  9492                           wreg	equ	0xFE8
  9493                           postdec1	equ	0xFE5
  9494                           fsr1l	equ	0xFE1
  9495                           indf2	equ	0xFDF
  9496                           postinc2	equ	0xFDE
  9497                           postdec2	equ	0xFDD
  9498                           fsr2h	equ	0xFDA
  9499                           fsr2l	equ	0xFD9
  9500                           status	equ	0xFD8
  9501                           
  9502 ;; *************** function ___awmod *****************
  9503 ;; Defined at:
  9504 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
  9505 ;; Parameters:    Size  Location     Type
  9506 ;;  dividend        2    0[BANK0 ] int 
  9507 ;;  divisor         2    2[BANK0 ] int 
  9508 ;; Auto vars:     Size  Location     Type
  9509 ;;  sign            1    5[BANK0 ] unsigned char 
  9510 ;;  counter         1    4[BANK0 ] unsigned char 
  9511 ;; Return value:  Size  Location     Type
  9512 ;;                  2    0[BANK0 ] int 
  9513 ;; Registers used:
  9514 ;;		wreg, status,2, status,0
  9515 ;; Tracked objects:
  9516 ;;		On entry : 0/0
  9517 ;;		On exit  : 0/0
  9518 ;;		Unchanged: 0/0
  9519 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9520 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9521 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9522 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9523 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9524 ;;Total ram usage:        6 bytes
  9525 ;; Hardware stack levels used:    1
  9526 ;; Hardware stack levels required when called:    7
  9527 ;; This function calls:
  9528 ;;		Nothing
  9529 ;; This function is called by:
  9530 ;;		_UI
  9531 ;; This function uses a non-reentrant model
  9532 ;;
  9533                           
  9534                           	psect	text34
  9535  003C4A                     __ptext34:
  9536                           	opt stack 0
  9537  003C4A                     ___awmod:
  9538                           	opt stack 22
  9539                           
  9540                           ;incstack = 0
  9541  003C4A  0E00               	movlw	0
  9542  003C4C  0100               	movlb	0	; () banked
  9543  003C4E  6F85               	movwf	___awmod@sign& (0+255),b
  9544                           
  9545                           ; BSR set to: 0
  9546  003C50  0100               	movlb	0	; () banked
  9547  003C52  AF81               	btfss	(___awmod@dividend+1)& (0+255),7,b
  9548  003C54  D008               	goto	l7686
  9549                           
  9550                           ; BSR set to: 0
  9551  003C56  0100               	movlb	0	; () banked
  9552  003C58  6D80               	negf	___awmod@dividend& (0+255),b
  9553  003C5A  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
  9554  003C5C  B0D8               	btfsc	status,0,c
  9555  003C5E  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
  9556                           
  9557                           ; BSR set to: 0
  9558  003C60  0E01               	movlw	1
  9559  003C62  0100               	movlb	0	; () banked
  9560  003C64  6F85               	movwf	___awmod@sign& (0+255),b
  9561  003C66                     l7686:
  9562                           
  9563                           ; BSR set to: 0
  9564  003C66  0100               	movlb	0	; () banked
  9565  003C68  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
  9566  003C6A  D005               	goto	l7690
  9567                           
  9568                           ; BSR set to: 0
  9569  003C6C  0100               	movlb	0	; () banked
  9570  003C6E  6D82               	negf	___awmod@divisor& (0+255),b
  9571  003C70  1F83               	comf	(___awmod@divisor+1)& (0+255),f,b
  9572  003C72  B0D8               	btfsc	status,0,c
  9573  003C74  2B83               	incf	(___awmod@divisor+1)& (0+255),f,b
  9574  003C76                     l7690:
  9575                           
  9576                           ; BSR set to: 0
  9577  003C76  0100               	movlb	0	; () banked
  9578  003C78  5182               	movf	___awmod@divisor& (0+255),w,b
  9579  003C7A  0100               	movlb	0	; () banked
  9580  003C7C  1183               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  9581  003C7E  B4D8               	btfsc	status,2,c
  9582  003C80  D026               	goto	l7706
  9583                           
  9584                           ; BSR set to: 0
  9585  003C82  0E01               	movlw	1
  9586  003C84  0100               	movlb	0	; () banked
  9587  003C86  6F84               	movwf	___awmod@counter& (0+255),b
  9588  003C88  D006               	goto	l7696
  9589  003C8A                     l7694:
  9590                           
  9591                           ; BSR set to: 0
  9592  003C8A  0100               	movlb	0	; () banked
  9593  003C8C  90D8               	bcf	status,0,c
  9594  003C8E  3782               	rlcf	___awmod@divisor& (0+255),f,b
  9595  003C90  3783               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  9596  003C92  0100               	movlb	0	; () banked
  9597  003C94  2B84               	incf	___awmod@counter& (0+255),f,b
  9598  003C96                     l7696:
  9599                           
  9600                           ; BSR set to: 0
  9601  003C96  0100               	movlb	0	; () banked
  9602  003C98  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
  9603  003C9A  D7F7               	goto	l7694
  9604  003C9C                     l7698:
  9605                           
  9606                           ; BSR set to: 0
  9607  003C9C  0100               	movlb	0	; () banked
  9608  003C9E  5182               	movf	___awmod@divisor& (0+255),w,b
  9609  003CA0  0100               	movlb	0	; () banked
  9610  003CA2  5D80               	subwf	___awmod@dividend& (0+255),w,b
  9611  003CA4  0100               	movlb	0	; () banked
  9612  003CA6  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
  9613  003CA8  0100               	movlb	0	; () banked
  9614  003CAA  5981               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  9615  003CAC  A0D8               	btfss	status,0,c
  9616  003CAE  D008               	goto	l7702
  9617                           
  9618                           ; BSR set to: 0
  9619  003CB0  0100               	movlb	0	; () banked
  9620  003CB2  5182               	movf	___awmod@divisor& (0+255),w,b
  9621  003CB4  0100               	movlb	0	; () banked
  9622  003CB6  5F80               	subwf	___awmod@dividend& (0+255),f,b
  9623  003CB8  0100               	movlb	0	; () banked
  9624  003CBA  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
  9625  003CBC  0100               	movlb	0	; () banked
  9626  003CBE  5B81               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  9627  003CC0                     l7702:
  9628                           
  9629                           ; BSR set to: 0
  9630  003CC0  0100               	movlb	0	; () banked
  9631  003CC2  90D8               	bcf	status,0,c
  9632  003CC4  3383               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  9633  003CC6  3382               	rrcf	___awmod@divisor& (0+255),f,b
  9634                           
  9635                           ; BSR set to: 0
  9636  003CC8  0100               	movlb	0	; () banked
  9637  003CCA  2F84               	decfsz	___awmod@counter& (0+255),f,b
  9638  003CCC  D7E7               	goto	l7698
  9639  003CCE                     l7706:
  9640                           
  9641                           ; BSR set to: 0
  9642  003CCE  0100               	movlb	0	; () banked
  9643  003CD0  5185               	movf	___awmod@sign& (0+255),w,b
  9644  003CD2  0100               	movlb	0	; () banked
  9645  003CD4  B4D8               	btfsc	status,2,c
  9646  003CD6  D005               	goto	l7710
  9647                           
  9648                           ; BSR set to: 0
  9649  003CD8  0100               	movlb	0	; () banked
  9650  003CDA  6D80               	negf	___awmod@dividend& (0+255),b
  9651  003CDC  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
  9652  003CDE  B0D8               	btfsc	status,0,c
  9653  003CE0  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
  9654  003CE2                     l7710:
  9655                           
  9656                           ; BSR set to: 0
  9657  003CE2  C080  F080         	movff	___awmod@dividend,?___awmod
  9658  003CE6  C081  F081         	movff	___awmod@dividend+1,?___awmod+1
  9659  003CEA  0012               	return	
  9660  003CEC                     __end_of___awmod:
  9661                           	opt stack 0
  9662                           tblptru	equ	0xFF8
  9663                           tblptrh	equ	0xFF7
  9664                           tblptrl	equ	0xFF6
  9665                           tablat	equ	0xFF5
  9666                           prodh	equ	0xFF4
  9667                           prodl	equ	0xFF3
  9668                           intcon	equ	0xFF2
  9669                           intcon2	equ	0xFF1
  9670                           intcon3	equ	0xFF0
  9671                           postinc0	equ	0xFEE
  9672                           wreg	equ	0xFE8
  9673                           postdec1	equ	0xFE5
  9674                           fsr1l	equ	0xFE1
  9675                           indf2	equ	0xFDF
  9676                           postinc2	equ	0xFDE
  9677                           postdec2	equ	0xFDD
  9678                           fsr2h	equ	0xFDA
  9679                           fsr2l	equ	0xFD9
  9680                           status	equ	0xFD8
  9681                           
  9682 ;; *************** function ___awdiv *****************
  9683 ;; Defined at:
  9684 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
  9685 ;; Parameters:    Size  Location     Type
  9686 ;;  dividend        2    6[BANK0 ] int 
  9687 ;;  divisor         2    8[BANK0 ] int 
  9688 ;; Auto vars:     Size  Location     Type
  9689 ;;  quotient        2   12[BANK0 ] int 
  9690 ;;  sign            1   11[BANK0 ] unsigned char 
  9691 ;;  counter         1   10[BANK0 ] unsigned char 
  9692 ;; Return value:  Size  Location     Type
  9693 ;;                  2    6[BANK0 ] int 
  9694 ;; Registers used:
  9695 ;;		wreg, status,2, status,0
  9696 ;; Tracked objects:
  9697 ;;		On entry : 0/0
  9698 ;;		On exit  : 0/0
  9699 ;;		Unchanged: 0/0
  9700 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9701 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9702 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9703 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9704 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9705 ;;Total ram usage:        8 bytes
  9706 ;; Hardware stack levels used:    1
  9707 ;; Hardware stack levels required when called:    7
  9708 ;; This function calls:
  9709 ;;		Nothing
  9710 ;; This function is called by:
  9711 ;;		_UI
  9712 ;; This function uses a non-reentrant model
  9713 ;;
  9714                           
  9715                           	psect	text35
  9716  003A26                     __ptext35:
  9717                           	opt stack 0
  9718  003A26                     ___awdiv:
  9719                           	opt stack 22
  9720                           
  9721                           ; BSR set to: 0
  9722                           ;incstack = 0
  9723  003A26  0E00               	movlw	0
  9724  003A28  0100               	movlb	0	; () banked
  9725  003A2A  6F8B               	movwf	___awdiv@sign& (0+255),b
  9726                           
  9727                           ; BSR set to: 0
  9728  003A2C  0100               	movlb	0	; () banked
  9729  003A2E  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  9730  003A30  D008               	goto	l7642
  9731                           
  9732                           ; BSR set to: 0
  9733  003A32  0100               	movlb	0	; () banked
  9734  003A34  6D88               	negf	___awdiv@divisor& (0+255),b
  9735  003A36  1F89               	comf	(___awdiv@divisor+1)& (0+255),f,b
  9736  003A38  B0D8               	btfsc	status,0,c
  9737  003A3A  2B89               	incf	(___awdiv@divisor+1)& (0+255),f,b
  9738                           
  9739                           ; BSR set to: 0
  9740  003A3C  0E01               	movlw	1
  9741  003A3E  0100               	movlb	0	; () banked
  9742  003A40  6F8B               	movwf	___awdiv@sign& (0+255),b
  9743  003A42                     l7642:
  9744                           
  9745                           ; BSR set to: 0
  9746  003A42  0100               	movlb	0	; () banked
  9747  003A44  AF87               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  9748  003A46  D008               	goto	l7648
  9749                           
  9750                           ; BSR set to: 0
  9751  003A48  0100               	movlb	0	; () banked
  9752  003A4A  6D86               	negf	___awdiv@dividend& (0+255),b
  9753  003A4C  1F87               	comf	(___awdiv@dividend+1)& (0+255),f,b
  9754  003A4E  B0D8               	btfsc	status,0,c
  9755  003A50  2B87               	incf	(___awdiv@dividend+1)& (0+255),f,b
  9756                           
  9757                           ; BSR set to: 0
  9758  003A52  0E01               	movlw	1
  9759  003A54  0100               	movlb	0	; () banked
  9760  003A56  1B8B               	xorwf	___awdiv@sign& (0+255),f,b
  9761  003A58                     l7648:
  9762                           
  9763                           ; BSR set to: 0
  9764  003A58  0E00               	movlw	0
  9765  003A5A  0100               	movlb	0	; () banked
  9766  003A5C  6F8D               	movwf	(___awdiv@quotient+1)& (0+255),b
  9767  003A5E  0E00               	movlw	0
  9768  003A60  6F8C               	movwf	___awdiv@quotient& (0+255),b
  9769                           
  9770                           ; BSR set to: 0
  9771  003A62  0100               	movlb	0	; () banked
  9772  003A64  5188               	movf	___awdiv@divisor& (0+255),w,b
  9773  003A66  0100               	movlb	0	; () banked
  9774  003A68  1189               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  9775  003A6A  B4D8               	btfsc	status,2,c
  9776  003A6C  D02C               	goto	l7670
  9777                           
  9778                           ; BSR set to: 0
  9779  003A6E  0E01               	movlw	1
  9780  003A70  0100               	movlb	0	; () banked
  9781  003A72  6F8A               	movwf	___awdiv@counter& (0+255),b
  9782  003A74  D006               	goto	l7656
  9783  003A76                     l7654:
  9784                           
  9785                           ; BSR set to: 0
  9786  003A76  0100               	movlb	0	; () banked
  9787  003A78  90D8               	bcf	status,0,c
  9788  003A7A  3788               	rlcf	___awdiv@divisor& (0+255),f,b
  9789  003A7C  3789               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  9790  003A7E  0100               	movlb	0	; () banked
  9791  003A80  2B8A               	incf	___awdiv@counter& (0+255),f,b
  9792  003A82                     l7656:
  9793                           
  9794                           ; BSR set to: 0
  9795  003A82  0100               	movlb	0	; () banked
  9796  003A84  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  9797  003A86  D7F7               	goto	l7654
  9798  003A88                     l7658:
  9799                           
  9800                           ; BSR set to: 0
  9801  003A88  0100               	movlb	0	; () banked
  9802  003A8A  90D8               	bcf	status,0,c
  9803  003A8C  378C               	rlcf	___awdiv@quotient& (0+255),f,b
  9804  003A8E  378D               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  9805                           
  9806                           ; BSR set to: 0
  9807  003A90  0100               	movlb	0	; () banked
  9808  003A92  5188               	movf	___awdiv@divisor& (0+255),w,b
  9809  003A94  0100               	movlb	0	; () banked
  9810  003A96  5D86               	subwf	___awdiv@dividend& (0+255),w,b
  9811  003A98  0100               	movlb	0	; () banked
  9812  003A9A  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
  9813  003A9C  0100               	movlb	0	; () banked
  9814  003A9E  5987               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  9815  003AA0  A0D8               	btfss	status,0,c
  9816  003AA2  D00A               	goto	l7666
  9817                           
  9818                           ; BSR set to: 0
  9819  003AA4  0100               	movlb	0	; () banked
  9820  003AA6  5188               	movf	___awdiv@divisor& (0+255),w,b
  9821  003AA8  0100               	movlb	0	; () banked
  9822  003AAA  5F86               	subwf	___awdiv@dividend& (0+255),f,b
  9823  003AAC  0100               	movlb	0	; () banked
  9824  003AAE  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
  9825  003AB0  0100               	movlb	0	; () banked
  9826  003AB2  5B87               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  9827                           
  9828                           ; BSR set to: 0
  9829  003AB4  0100               	movlb	0	; () banked
  9830  003AB6  818C               	bsf	___awdiv@quotient& (0+255),0,b
  9831  003AB8                     l7666:
  9832                           
  9833                           ; BSR set to: 0
  9834  003AB8  0100               	movlb	0	; () banked
  9835  003ABA  90D8               	bcf	status,0,c
  9836  003ABC  3389               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  9837  003ABE  3388               	rrcf	___awdiv@divisor& (0+255),f,b
  9838                           
  9839                           ; BSR set to: 0
  9840  003AC0  0100               	movlb	0	; () banked
  9841  003AC2  2F8A               	decfsz	___awdiv@counter& (0+255),f,b
  9842  003AC4  D7E1               	goto	l7658
  9843  003AC6                     l7670:
  9844                           
  9845                           ; BSR set to: 0
  9846  003AC6  0100               	movlb	0	; () banked
  9847  003AC8  518B               	movf	___awdiv@sign& (0+255),w,b
  9848  003ACA  0100               	movlb	0	; () banked
  9849  003ACC  B4D8               	btfsc	status,2,c
  9850  003ACE  D005               	goto	l7674
  9851                           
  9852                           ; BSR set to: 0
  9853  003AD0  0100               	movlb	0	; () banked
  9854  003AD2  6D8C               	negf	___awdiv@quotient& (0+255),b
  9855  003AD4  1F8D               	comf	(___awdiv@quotient+1)& (0+255),f,b
  9856  003AD6  B0D8               	btfsc	status,0,c
  9857  003AD8  2B8D               	incf	(___awdiv@quotient+1)& (0+255),f,b
  9858  003ADA                     l7674:
  9859                           
  9860                           ; BSR set to: 0
  9861  003ADA  C08C  F086         	movff	___awdiv@quotient,?___awdiv
  9862  003ADE  C08D  F087         	movff	___awdiv@quotient+1,?___awdiv+1
  9863  003AE2  0012               	return	
  9864  003AE4                     __end_of___awdiv:
  9865                           	opt stack 0
  9866                           tblptru	equ	0xFF8
  9867                           tblptrh	equ	0xFF7
  9868                           tblptrl	equ	0xFF6
  9869                           tablat	equ	0xFF5
  9870                           prodh	equ	0xFF4
  9871                           prodl	equ	0xFF3
  9872                           intcon	equ	0xFF2
  9873                           intcon2	equ	0xFF1
  9874                           intcon3	equ	0xFF0
  9875                           postinc0	equ	0xFEE
  9876                           wreg	equ	0xFE8
  9877                           postdec1	equ	0xFE5
  9878                           fsr1l	equ	0xFE1
  9879                           indf2	equ	0xFDF
  9880                           postinc2	equ	0xFDE
  9881                           postdec2	equ	0xFDD
  9882                           fsr2h	equ	0xFDA
  9883                           fsr2l	equ	0xFD9
  9884                           status	equ	0xFD8
  9885                           
  9886 ;; *************** function _Test *****************
  9887 ;; Defined at:
  9888 ;;		line 30 in file "Test.c"
  9889 ;; Parameters:    Size  Location     Type
  9890 ;;		None
  9891 ;; Auto vars:     Size  Location     Type
  9892 ;;		None
  9893 ;; Return value:  Size  Location     Type
  9894 ;;                  1    wreg      void 
  9895 ;; Registers used:
  9896 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9897 ;; Tracked objects:
  9898 ;;		On entry : 0/0
  9899 ;;		On exit  : 0/0
  9900 ;;		Unchanged: 0/0
  9901 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9902 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9903 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9904 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9905 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9906 ;;Total ram usage:        2 bytes
  9907 ;; Hardware stack levels used:    1
  9908 ;; Hardware stack levels required when called:   11
  9909 ;; This function calls:
  9910 ;;		_BlockerTest
  9911 ;;		_BothServos
  9912 ;;		_EEPROMTest
  9913 ;;		_PortTestA5
  9914 ;;		_PortTests
  9915 ;;		_PusherTest
  9916 ;;		_SpeedTest
  9917 ;;		_actuatorTest
  9918 ;;		_algorithmTest
  9919 ;;		_lcdInst
  9920 ;;		_printf
  9921 ;;		_sensorTest
  9922 ;; This function is called by:
  9923 ;;		_main
  9924 ;; This function uses a non-reentrant model
  9925 ;;
  9926                           
  9927                           	psect	text36
  9928  003506                     __ptext36:
  9929                           	opt stack 0
  9930  003506                     _Test:
  9931                           	opt stack 19
  9932  003506                     
  9933                           ;Test.c: 33: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
  9934  003506  0E01               	movlw	1
  9935  003508  EC98  F025         	call	_lcdInst
  9936  00350C  0E68               	movlw	104
  9937  00350E  0100               	movlb	0	; () banked
  9938  003510  6FC6               	movwf	??_Test& (0+255),b
  9939  003512  0EE4               	movlw	228
  9940  003514                     u8057:
  9941  003514  2EE8               	decfsz	wreg,f,c
  9942  003516  D7FE               	bra	u8057
  9943  003518  2FC6               	decfsz	??_Test& (0+255),f,b
  9944  00351A  D7FC               	bra	u8057
  9945  00351C  F000               	nop	
  9946  00351E  0E80               	movlw	128
  9947  003520  EC98  F025         	call	_lcdInst
  9948                           
  9949                           ;Test.c: 34: printf("1.ALG|2.SNR|3.AC");
  9950  003524  0E70               	movlw	low STR_68
  9951  003526  0100               	movlb	0	; () banked
  9952  003528  6F8E               	movwf	printf@f& (0+255),b
  9953  00352A  0EFC               	movlw	high STR_68
  9954  00352C  0100               	movlb	0	; () banked
  9955  00352E  6F8F               	movwf	(printf@f+1)& (0+255),b
  9956  003530  ECB8  F008         	call	_printf	;wreg free
  9957                           
  9958                           ;Test.c: 35: lcdInst(0b11000000);;
  9959  003534  0EC0               	movlw	192
  9960  003536  EC98  F025         	call	_lcdInst
  9961                           
  9962                           ;Test.c: 36: printf("4.HI|5.TOG|6.EEP");
  9963  00353A  0EA3               	movlw	low STR_69
  9964  00353C  0100               	movlb	0	; () banked
  9965  00353E  6F8E               	movwf	printf@f& (0+255),b
  9966  003540  0EFC               	movlw	high STR_69
  9967  003542  0100               	movlb	0	; () banked
  9968  003544  6F8F               	movwf	(printf@f+1)& (0+255),b
  9969  003546  ECB8  F008         	call	_printf	;wreg free
  9970                           
  9971                           ;Test.c: 37: _delay((unsigned long)((100)*(32000000/4000.0)));
  9972  00354A  0E05               	movlw	5
  9973  00354C  0100               	movlb	0	; () banked
  9974  00354E  6FC7               	movwf	(??_Test+1)& (0+255),b
  9975  003550  0E0F               	movlw	15
  9976  003552  0100               	movlb	0	; () banked
  9977  003554  6FC6               	movwf	??_Test& (0+255),b
  9978  003556  0EF1               	movlw	241
  9979  003558                     u8067:
  9980  003558  2EE8               	decfsz	wreg,f,c
  9981  00355A  D7FE               	bra	u8067
  9982  00355C  2FC6               	decfsz	??_Test& (0+255),f,b
  9983  00355E  D7FC               	bra	u8067
  9984  003560  2FC7               	decfsz	(??_Test+1)& (0+255),f,b
  9985  003562  D7FA               	bra	u8067
  9986  003564                     l1063:
  9987  003564  A281               	btfss	3969,1,c	;volatile
  9988  003566  D7FE               	goto	l1063
  9989                           
  9990                           ;Test.c: 39: var = PORTB >> 4;
  9991  003568  CF81 F0C6          	movff	3969,??_Test	;volatile
  9992  00356C  0100               	movlb	0	; () banked
  9993  00356E  3BC6               	swapf	??_Test& (0+255),f,b
  9994  003570  0E0F               	movlw	15
  9995  003572  17C6               	andwf	??_Test& (0+255),f,b
  9996  003574  0100               	movlb	0	; () banked
  9997  003576  51C6               	movf	??_Test& (0+255),w,b
  9998  003578  0100               	movlb	0	; () banked
  9999  00357A  6FFA               	movwf	_var& (0+255),b
 10000  00357C  6BFB               	clrf	(_var+1)& (0+255),b
 10001                           
 10002                           ; BSR set to: 0
 10003                           ;Test.c: 40: var++;
 10004  00357E  0100               	movlb	0	; () banked
 10005  003580  4BFA               	infsnz	_var& (0+255),f,b
 10006  003582  2BFB               	incf	(_var+1)& (0+255),f,b
 10007  003584                     l1066:
 10008  003584  A281               	btfss	3969,1,c	;volatile
 10009  003586  D01F               	goto	l8410
 10010  003588  D7FD               	goto	l1066
 10011  00358A                     l8388:
 10012                           
 10013                           ;Test.c: 44: algorithmTest();
 10014  00358A  EC7F  F01B         	call	_algorithmTest	;wreg free
 10015                           
 10016                           ;Test.c: 45: break;
 10017  00358E  D7BB               	goto	l8370
 10018  003590                     l8390:
 10019                           
 10020                           ;Test.c: 47: sensorTest();
 10021  003590  EC4D  F00E         	call	_sensorTest	;wreg free
 10022                           
 10023                           ;Test.c: 48: break;
 10024  003594  D7B8               	goto	l8370
 10025  003596                     l8392:
 10026                           
 10027                           ;Test.c: 50: actuatorTest();
 10028  003596  EC09  F000         	call	_actuatorTest	;wreg free
 10029                           
 10030                           ;Test.c: 51: break;
 10031  00359A  D7B5               	goto	l8370
 10032  00359C                     l8394:
 10033                           
 10034                           ;Test.c: 53: PortTestA5();
 10035  00359C  EC66  F021         	call	_PortTestA5	;wreg free
 10036                           
 10037                           ;Test.c: 54: break;
 10038  0035A0  D7B2               	goto	l8370
 10039  0035A2                     l8396:
 10040                           
 10041                           ;Test.c: 57: SpeedTest();
 10042  0035A2  ECFF  F01E         	call	_SpeedTest	;wreg free
 10043                           
 10044                           ;Test.c: 58: break;
 10045  0035A6  D7AF               	goto	l8370
 10046  0035A8                     l8398:
 10047                           
 10048                           ;Test.c: 60: EEPROMTest();
 10049  0035A8  ECCA  F025         	call	_EEPROMTest	;wreg free
 10050                           
 10051                           ;Test.c: 61: break;
 10052  0035AC  D7AC               	goto	l8370
 10053  0035AE                     l8400:
 10054                           
 10055                           ;Test.c: 63: PusherTest();
 10056  0035AE  ECEA  F01B         	call	_PusherTest	;wreg free
 10057                           
 10058                           ;Test.c: 64: break;
 10059  0035B2  D7A9               	goto	l8370
 10060  0035B4                     l8402:
 10061                           
 10062                           ;Test.c: 66: PortTests();
 10063  0035B4  EC41  F01F         	call	_PortTests	;wreg free
 10064                           
 10065                           ;Test.c: 67: break;
 10066  0035B8  D7A6               	goto	l8370
 10067  0035BA                     l8404:
 10068                           
 10069                           ;Test.c: 69: BothServos();
 10070  0035BA  ECD4  F00A         	call	_BothServos	;wreg free
 10071                           
 10072                           ;Test.c: 70: break;
 10073  0035BE  D7A3               	goto	l8370
 10074  0035C0                     l8406:
 10075                           
 10076                           ;Test.c: 72: BlockerTest();
 10077  0035C0  EC4F  F01C         	call	_BlockerTest	;wreg free
 10078                           
 10079                           ;Test.c: 76: }
 10080                           
 10081                           ;Test.c: 75: break;
 10082                           
 10083                           ;Test.c: 74: default:
 10084                           
 10085                           ;Test.c: 73: break;
 10086  0035C4  D7A0               	goto	l8370
 10087  0035C6                     l8410:
 10088  0035C6  C0FA  F0C6         	movff	_var,??_Test
 10089  0035CA  C0FB  F0C7         	movff	_var+1,??_Test+1
 10090                           
 10091                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 10092                           ; Switch size 1, requested type "space"
 10093                           ; Number of cases is 1, Range of values is 0 to 0
 10094                           ; switch strategies available:
 10095                           ; Name         Instructions Cycles
 10096                           ; simple_byte            4     3 (average)
 10097                           ;	Chosen strategy is simple_byte
 10098  0035CE  0100               	movlb	0	; () banked
 10099  0035D0  51C7               	movf	(??_Test+1)& (0+255),w,b
 10100  0035D2  0A00               	xorlw	0	; case 0
 10101  0035D4  A4D8               	btfss	status,2,c
 10102  0035D6  D797               	goto	l8370
 10103                           
 10104                           ; BSR set to: 0
 10105                           ; Switch size 1, requested type "space"
 10106                           ; Number of cases is 10, Range of values is 1 to 11
 10107                           ; switch strategies available:
 10108                           ; Name         Instructions Cycles
 10109                           ; simple_byte           31    16 (average)
 10110                           ;	Chosen strategy is simple_byte
 10111  0035D8  0100               	movlb	0	; () banked
 10112  0035DA  51C6               	movf	??_Test& (0+255),w,b
 10113  0035DC  0A01               	xorlw	1	; case 1
 10114  0035DE  B4D8               	btfsc	status,2,c
 10115  0035E0  D7D4               	goto	l8388
 10116  0035E2  0A03               	xorlw	3	; case 2
 10117  0035E4  B4D8               	btfsc	status,2,c
 10118  0035E6  D7D4               	goto	l8390
 10119  0035E8  0A01               	xorlw	1	; case 3
 10120  0035EA  B4D8               	btfsc	status,2,c
 10121  0035EC  D7D4               	goto	l8392
 10122  0035EE  0A06               	xorlw	6	; case 5
 10123  0035F0  B4D8               	btfsc	status,2,c
 10124  0035F2  D7D4               	goto	l8394
 10125  0035F4  0A03               	xorlw	3	; case 6
 10126  0035F6  B4D8               	btfsc	status,2,c
 10127  0035F8  D7D4               	goto	l8396
 10128  0035FA  0A01               	xorlw	1	; case 7
 10129  0035FC  B4D8               	btfsc	status,2,c
 10130  0035FE  D7D4               	goto	l8398
 10131  003600  0A0F               	xorlw	15	; case 8
 10132  003602  B4D8               	btfsc	status,2,c
 10133  003604  D7D4               	goto	l8400
 10134  003606  0A01               	xorlw	1	; case 9
 10135  003608  B4D8               	btfsc	status,2,c
 10136  00360A  D7D4               	goto	l8402
 10137  00360C  0A03               	xorlw	3	; case 10
 10138  00360E  B4D8               	btfsc	status,2,c
 10139  003610  D7D4               	goto	l8404
 10140  003612  0A01               	xorlw	1	; case 11
 10141  003614  B4D8               	btfsc	status,2,c
 10142  003616  D7D4               	goto	l8406
 10143                           
 10144                           ; BSR set to: 0
 10145                           
 10146                           ; BSR set to: 0
 10147  003618  D776               	goto	l8370
 10148  00361A                     __end_of_Test:
 10149                           	opt stack 0
 10150                           tblptru	equ	0xFF8
 10151                           tblptrh	equ	0xFF7
 10152                           tblptrl	equ	0xFF6
 10153                           tablat	equ	0xFF5
 10154                           prodh	equ	0xFF4
 10155                           prodl	equ	0xFF3
 10156                           intcon	equ	0xFF2
 10157                           intcon2	equ	0xFF1
 10158                           intcon3	equ	0xFF0
 10159                           postinc0	equ	0xFEE
 10160                           wreg	equ	0xFE8
 10161                           postdec1	equ	0xFE5
 10162                           fsr1l	equ	0xFE1
 10163                           indf2	equ	0xFDF
 10164                           postinc2	equ	0xFDE
 10165                           postdec2	equ	0xFDD
 10166                           fsr2h	equ	0xFDA
 10167                           fsr2l	equ	0xFD9
 10168                           status	equ	0xFD8
 10169                           
 10170 ;; *************** function _sensorTest *****************
 10171 ;; Defined at:
 10172 ;;		line 124 in file "Test.c"
 10173 ;; Parameters:    Size  Location     Type
 10174 ;;		None
 10175 ;; Auto vars:     Size  Location     Type
 10176 ;;  res             2   45[BANK0 ] int 
 10177 ;; Return value:  Size  Location     Type
 10178 ;;                  1    wreg      void 
 10179 ;; Registers used:
 10180 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10181 ;; Tracked objects:
 10182 ;;		On entry : 0/0
 10183 ;;		On exit  : 0/0
 10184 ;;		Unchanged: 0/0
 10185 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10186 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10187 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10188 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10189 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10190 ;;Total ram usage:        4 bytes
 10191 ;; Hardware stack levels used:    1
 10192 ;; Hardware stack levels required when called:   10
 10193 ;; This function calls:
 10194 ;;		_lcdInst
 10195 ;;		_printf
 10196 ;;		_readADC
 10197 ;;		_readMAG
 10198 ;; This function is called by:
 10199 ;;		_Test
 10200 ;; This function uses a non-reentrant model
 10201 ;;
 10202                           
 10203                           	psect	text37
 10204  001C9A                     __ptext37:
 10205                           	opt stack 0
 10206  001C9A                     _sensorTest:
 10207                           	opt stack 19
 10208                           
 10209                           ;Test.c: 126: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10210                           
 10211                           ; BSR set to: 0
 10212                           ;incstack = 0
 10213  001C9A  0E01               	movlw	1
 10214  001C9C  EC98  F025         	call	_lcdInst
 10215  001CA0  0E68               	movlw	104
 10216  001CA2  0100               	movlb	0	; () banked
 10217  001CA4  6FAB               	movwf	??_sensorTest& (0+255),b
 10218  001CA6  0EE4               	movlw	228
 10219  001CA8                     u8077:
 10220  001CA8  2EE8               	decfsz	wreg,f,c
 10221  001CAA  D7FE               	bra	u8077
 10222  001CAC  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10223  001CAE  D7FC               	bra	u8077
 10224  001CB0  F000               	nop	
 10225  001CB2  0E80               	movlw	128
 10226  001CB4  EC98  F025         	call	_lcdInst
 10227                           
 10228                           ;Test.c: 127: printf("SENSORS");
 10229  001CB8  0EAE               	movlw	low STR_77
 10230  001CBA  0100               	movlb	0	; () banked
 10231  001CBC  6F8E               	movwf	printf@f& (0+255),b
 10232  001CBE  0EFF               	movlw	high STR_77
 10233  001CC0  0100               	movlb	0	; () banked
 10234  001CC2  6F8F               	movwf	(printf@f+1)& (0+255),b
 10235  001CC4  ECB8  F008         	call	_printf	;wreg free
 10236                           
 10237                           ;Test.c: 128: lcdInst(0b11000000);;
 10238  001CC8  0EC0               	movlw	192
 10239  001CCA  EC98  F025         	call	_lcdInst
 10240                           
 10241                           ;Test.c: 129: printf("PUSH TO START");
 10242  001CCE  0E0B               	movlw	low STR_71
 10243  001CD0  0100               	movlb	0	; () banked
 10244  001CD2  6F8E               	movwf	printf@f& (0+255),b
 10245  001CD4  0EFF               	movlw	high STR_71
 10246  001CD6  0100               	movlb	0	; () banked
 10247  001CD8  6F8F               	movwf	(printf@f+1)& (0+255),b
 10248  001CDA  ECB8  F008         	call	_printf	;wreg free
 10249                           
 10250                           ;Test.c: 130: _delay((unsigned long)((100)*(32000000/4000.0)));
 10251  001CDE  0E05               	movlw	5
 10252  001CE0  0100               	movlb	0	; () banked
 10253  001CE2  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 10254  001CE4  0E0F               	movlw	15
 10255  001CE6  0100               	movlb	0	; () banked
 10256  001CE8  6FAB               	movwf	??_sensorTest& (0+255),b
 10257  001CEA  0EF1               	movlw	241
 10258  001CEC                     u8087:
 10259  001CEC  2EE8               	decfsz	wreg,f,c
 10260  001CEE  D7FE               	bra	u8087
 10261  001CF0  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10262  001CF2  D7FC               	bra	u8087
 10263  001CF4  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 10264  001CF6  D7FA               	bra	u8087
 10265  001CF8                     l1096:
 10266  001CF8  A281               	btfss	3969,1,c	;volatile
 10267  001CFA  D7FE               	goto	l1096
 10268  001CFC                     l1099:
 10269  001CFC  B281               	btfsc	3969,1,c	;volatile
 10270  001CFE  D7FE               	goto	l1099
 10271                           
 10272                           ;Test.c: 133: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10273  001D00  0E01               	movlw	1
 10274  001D02  EC98  F025         	call	_lcdInst
 10275  001D06  0E68               	movlw	104
 10276  001D08  0100               	movlb	0	; () banked
 10277  001D0A  6FAB               	movwf	??_sensorTest& (0+255),b
 10278  001D0C  0EE4               	movlw	228
 10279  001D0E                     u8097:
 10280  001D0E  2EE8               	decfsz	wreg,f,c
 10281  001D10  D7FE               	bra	u8097
 10282  001D12  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10283  001D14  D7FC               	bra	u8097
 10284  001D16  F000               	nop	
 10285  001D18  0E80               	movlw	128
 10286  001D1A  EC98  F025         	call	_lcdInst
 10287                           
 10288                           ;Test.c: 138: printf("TST: IR SNSR");
 10289  001D1E  0E35               	movlw	low STR_79
 10290  001D20  0100               	movlb	0	; () banked
 10291  001D22  6F8E               	movwf	printf@f& (0+255),b
 10292  001D24  0EFF               	movlw	high STR_79
 10293  001D26  0100               	movlb	0	; () banked
 10294  001D28  6F8F               	movwf	(printf@f+1)& (0+255),b
 10295  001D2A  ECB8  F008         	call	_printf	;wreg free
 10296                           
 10297                           ;Test.c: 139: _delay((unsigned long)((100)*(32000000/4000.0)));
 10298  001D2E  0E05               	movlw	5
 10299  001D30  0100               	movlb	0	; () banked
 10300  001D32  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 10301  001D34  0E0F               	movlw	15
 10302  001D36  0100               	movlb	0	; () banked
 10303  001D38  6FAB               	movwf	??_sensorTest& (0+255),b
 10304  001D3A  0EF1               	movlw	241
 10305  001D3C                     u8107:
 10306  001D3C  2EE8               	decfsz	wreg,f,c
 10307  001D3E  D7FE               	bra	u8107
 10308  001D40  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10309  001D42  D7FC               	bra	u8107
 10310  001D44  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 10311  001D46  D7FA               	bra	u8107
 10312                           
 10313                           ;Test.c: 140: LATCbits.LATC5 = 1;
 10314  001D48  8A8B               	bsf	3979,5,c	;volatile
 10315                           
 10316                           ;Test.c: 142: while(PORTBbits.RB1 == 0){
 10317  001D4A  D05C               	goto	l6926
 10318  001D4C                     l6908:
 10319                           
 10320                           ;Test.c: 143: readADC(0);
 10321  001D4C  0E00               	movlw	0
 10322  001D4E  EC9F  F024         	call	_readADC
 10323                           
 10324                           ;Test.c: 144: int res = ADRESH<<8 | ADRESL;
 10325  001D52  50C3               	movf	4035,w,c	;volatile
 10326  001D54  CFC4 F0AB          	movff	4036,??_sensorTest	;volatile
 10327  001D58  0100               	movlb	0	; () banked
 10328  001D5A  6BAC               	clrf	(??_sensorTest+1)& (0+255),b
 10329  001D5C  C0AB  F0AC         	movff	??_sensorTest,??_sensorTest+1
 10330  001D60  0100               	movlb	0	; () banked
 10331  001D62  6BAB               	clrf	??_sensorTest& (0+255),b
 10332  001D64  0100               	movlb	0	; () banked
 10333  001D66  11AB               	iorwf	??_sensorTest& (0+255),w,b
 10334  001D68  0100               	movlb	0	; () banked
 10335  001D6A  6FAD               	movwf	sensorTest@res& (0+255),b
 10336  001D6C  0100               	movlb	0	; () banked
 10337  001D6E  51AC               	movf	(??_sensorTest+1)& (0+255),w,b
 10338  001D70  0100               	movlb	0	; () banked
 10339  001D72  6FAE               	movwf	(sensorTest@res+1)& (0+255),b
 10340                           
 10341                           ; BSR set to: 0
 10342                           ;Test.c: 145: IR_signal = (res > 1000) ? 1 : 0;
 10343  001D74  0100               	movlb	0	; () banked
 10344  001D76  BFAE               	btfsc	(sensorTest@res+1)& (0+255),7,b
 10345  001D78  D00A               	goto	u5420
 10346  001D7A  0EE9               	movlw	233
 10347  001D7C  0100               	movlb	0	; () banked
 10348  001D7E  5DAD               	subwf	sensorTest@res& (0+255),w,b
 10349  001D80  0E03               	movlw	3
 10350  001D82  0100               	movlb	0	; () banked
 10351  001D84  59AE               	subwfb	(sensorTest@res+1)& (0+255),w,b
 10352  001D86  A0D8               	btfss	status,0,c
 10353  001D88  D002               	goto	u5420
 10354  001D8A  0E01               	movlw	1
 10355  001D8C  D001               	goto	u5430
 10356  001D8E                     u5420:
 10357  001D8E  0E00               	movlw	0
 10358  001D90                     u5430:
 10359  001D90  0100               	movlb	0	; () banked
 10360  001D92  6FDE               	movwf	_IR_signal& (0+255),b
 10361  001D94  6BDF               	clrf	(_IR_signal+1)& (0+255),b
 10362                           
 10363                           ;Test.c: 147: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10364  001D96  0E01               	movlw	1
 10365  001D98  EC98  F025         	call	_lcdInst
 10366  001D9C  0E68               	movlw	104
 10367  001D9E  0100               	movlb	0	; () banked
 10368  001DA0  6FAB               	movwf	??_sensorTest& (0+255),b
 10369  001DA2  0EE4               	movlw	228
 10370  001DA4                     u8117:
 10371  001DA4  2EE8               	decfsz	wreg,f,c
 10372  001DA6  D7FE               	bra	u8117
 10373  001DA8  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10374  001DAA  D7FC               	bra	u8117
 10375  001DAC  F000               	nop	
 10376  001DAE  0E80               	movlw	128
 10377  001DB0  EC98  F025         	call	_lcdInst
 10378                           
 10379                           ;Test.c: 148: printf("IR_signal: %d ", IR_signal);
 10380  001DB4  0E5A               	movlw	low STR_80
 10381  001DB6  0100               	movlb	0	; () banked
 10382  001DB8  6F8E               	movwf	printf@f& (0+255),b
 10383  001DBA  0EFE               	movlw	high STR_80
 10384  001DBC  0100               	movlb	0	; () banked
 10385  001DBE  6F8F               	movwf	(printf@f+1)& (0+255),b
 10386  001DC0  C0DE  F090         	movff	_IR_signal,?_printf+2
 10387  001DC4  C0DF  F091         	movff	_IR_signal+1,?_printf+3
 10388  001DC8  ECB8  F008         	call	_printf	;wreg free
 10389                           
 10390                           ;Test.c: 149: lcdInst(0b11000000);;
 10391  001DCC  0EC0               	movlw	192
 10392  001DCE  EC98  F025         	call	_lcdInst
 10393                           
 10394                           ;Test.c: 150: printf("%d", res);
 10395  001DD2  0E16               	movlw	low (STR_27+14)
 10396  001DD4  0100               	movlb	0	; () banked
 10397  001DD6  6F8E               	movwf	printf@f& (0+255),b
 10398  001DD8  0EFE               	movlw	high (STR_27+14)
 10399  001DDA  0100               	movlb	0	; () banked
 10400  001DDC  6F8F               	movwf	(printf@f+1)& (0+255),b
 10401  001DDE  C0AD  F090         	movff	sensorTest@res,?_printf+2
 10402  001DE2  C0AE  F091         	movff	sensorTest@res+1,?_printf+3
 10403  001DE6  ECB8  F008         	call	_printf	;wreg free
 10404                           
 10405                           ;Test.c: 151: _delay((unsigned long)((100)*(32000000/4000.0)));
 10406  001DEA  0E05               	movlw	5
 10407  001DEC  0100               	movlb	0	; () banked
 10408  001DEE  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 10409  001DF0  0E0F               	movlw	15
 10410  001DF2  0100               	movlb	0	; () banked
 10411  001DF4  6FAB               	movwf	??_sensorTest& (0+255),b
 10412  001DF6  0EF1               	movlw	241
 10413  001DF8                     u8127:
 10414  001DF8  2EE8               	decfsz	wreg,f,c
 10415  001DFA  D7FE               	bra	u8127
 10416  001DFC  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10417  001DFE  D7FC               	bra	u8127
 10418  001E00  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 10419  001E02  D7FA               	bra	u8127
 10420  001E04                     l6926:
 10421  001E04  A281               	btfss	3969,1,c	;volatile
 10422  001E06  D7A2               	goto	l6908
 10423                           
 10424                           ;Test.c: 152: }
 10425                           ;Test.c: 153: LATCbits.LATC5 = 0;
 10426  001E08  9A8B               	bcf	3979,5,c	;volatile
 10427                           
 10428                           ;Test.c: 161: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10429  001E0A  0E01               	movlw	1
 10430  001E0C  EC98  F025         	call	_lcdInst
 10431  001E10  0E68               	movlw	104
 10432  001E12  0100               	movlb	0	; () banked
 10433  001E14  6FAB               	movwf	??_sensorTest& (0+255),b
 10434  001E16  0EE4               	movlw	228
 10435  001E18                     u8137:
 10436  001E18  2EE8               	decfsz	wreg,f,c
 10437  001E1A  D7FE               	bra	u8137
 10438  001E1C  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10439  001E1E  D7FC               	bra	u8137
 10440  001E20  F000               	nop	
 10441  001E22  0E80               	movlw	128
 10442  001E24  EC98  F025         	call	_lcdInst
 10443                           
 10444                           ;Test.c: 162: printf("TST: MAGNETISM");
 10445  001E28  0E87               	movlw	low STR_82
 10446  001E2A  0100               	movlb	0	; () banked
 10447  001E2C  6F8E               	movwf	printf@f& (0+255),b
 10448  001E2E  0EFE               	movlw	high STR_82
 10449  001E30  0100               	movlb	0	; () banked
 10450  001E32  6F8F               	movwf	(printf@f+1)& (0+255),b
 10451  001E34  ECB8  F008         	call	_printf	;wreg free
 10452                           
 10453                           ;Test.c: 163: _delay((unsigned long)((100)*(32000000/4000.0)));
 10454  001E38  0E05               	movlw	5
 10455  001E3A  0100               	movlb	0	; () banked
 10456  001E3C  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 10457  001E3E  0E0F               	movlw	15
 10458  001E40  0100               	movlb	0	; () banked
 10459  001E42  6FAB               	movwf	??_sensorTest& (0+255),b
 10460  001E44  0EF1               	movlw	241
 10461  001E46                     u8147:
 10462  001E46  2EE8               	decfsz	wreg,f,c
 10463  001E48  D7FE               	bra	u8147
 10464  001E4A  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10465  001E4C  D7FC               	bra	u8147
 10466  001E4E  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 10467  001E50  D7FA               	bra	u8147
 10468                           
 10469                           ;Test.c: 164: while(PORTBbits.RB1 == 0){
 10470  001E52  D021               	goto	l6944
 10471  001E54                     l6938:
 10472                           
 10473                           ;Test.c: 165: readMAG();
 10474  001E54  EC62  F022         	call	_readMAG	;wreg free
 10475                           
 10476                           ;Test.c: 166: lcdInst(0b10000000);;
 10477  001E58  0E80               	movlw	128
 10478  001E5A  EC98  F025         	call	_lcdInst
 10479                           
 10480                           ;Test.c: 167: lcdInst(0b11000000);;
 10481  001E5E  0EC0               	movlw	192
 10482  001E60  EC98  F025         	call	_lcdInst
 10483                           
 10484                           ;Test.c: 168: printf("MAG_signal: %d ", MAG_signal);
 10485  001E64  0E2A               	movlw	low STR_83
 10486  001E66  0100               	movlb	0	; () banked
 10487  001E68  6F8E               	movwf	printf@f& (0+255),b
 10488  001E6A  0EFE               	movlw	high STR_83
 10489  001E6C  0100               	movlb	0	; () banked
 10490  001E6E  6F8F               	movwf	(printf@f+1)& (0+255),b
 10491  001E70  C0E0  F090         	movff	_MAG_signal,?_printf+2
 10492  001E74  C0E1  F091         	movff	_MAG_signal+1,?_printf+3
 10493  001E78  ECB8  F008         	call	_printf	;wreg free
 10494                           
 10495                           ;Test.c: 169: _delay((unsigned long)((100)*(32000000/4000.0)));
 10496  001E7C  0E05               	movlw	5
 10497  001E7E  0100               	movlb	0	; () banked
 10498  001E80  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 10499  001E82  0E0F               	movlw	15
 10500  001E84  0100               	movlb	0	; () banked
 10501  001E86  6FAB               	movwf	??_sensorTest& (0+255),b
 10502  001E88  0EF1               	movlw	241
 10503  001E8A                     u8157:
 10504  001E8A  2EE8               	decfsz	wreg,f,c
 10505  001E8C  D7FE               	bra	u8157
 10506  001E8E  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10507  001E90  D7FC               	bra	u8157
 10508  001E92  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 10509  001E94  D7FA               	bra	u8157
 10510  001E96                     l6944:
 10511  001E96  A281               	btfss	3969,1,c	;volatile
 10512  001E98  D7DD               	goto	l6938
 10513                           
 10514                           ;Test.c: 170: }
 10515                           ;Test.c: 175: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10516  001E9A  0E01               	movlw	1
 10517  001E9C  EC98  F025         	call	_lcdInst
 10518  001EA0  0E68               	movlw	104
 10519  001EA2  0100               	movlb	0	; () banked
 10520  001EA4  6FAB               	movwf	??_sensorTest& (0+255),b
 10521  001EA6  0EE4               	movlw	228
 10522  001EA8                     u8167:
 10523  001EA8  2EE8               	decfsz	wreg,f,c
 10524  001EAA  D7FE               	bra	u8167
 10525  001EAC  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10526  001EAE  D7FC               	bra	u8167
 10527  001EB0  F000               	nop	
 10528  001EB2  0E80               	movlw	128
 10529  001EB4  EC98  F025         	call	_lcdInst
 10530                           
 10531                           ;Test.c: 176: printf("TST: COND");
 10532  001EB8  0E87               	movlw	low STR_84
 10533  001EBA  0100               	movlb	0	; () banked
 10534  001EBC  6F8E               	movwf	printf@f& (0+255),b
 10535  001EBE  0EFF               	movlw	high STR_84
 10536  001EC0  0100               	movlb	0	; () banked
 10537  001EC2  6F8F               	movwf	(printf@f+1)& (0+255),b
 10538  001EC4  ECB8  F008         	call	_printf	;wreg free
 10539                           
 10540                           ;Test.c: 177: _delay((unsigned long)((100)*(32000000/4000.0)));
 10541  001EC8  0E05               	movlw	5
 10542  001ECA  0100               	movlb	0	; () banked
 10543  001ECC  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
 10544  001ECE  0E0F               	movlw	15
 10545  001ED0  0100               	movlb	0	; () banked
 10546  001ED2  6FAB               	movwf	??_sensorTest& (0+255),b
 10547  001ED4  0EF1               	movlw	241
 10548  001ED6                     u8177:
 10549  001ED6  2EE8               	decfsz	wreg,f,c
 10550  001ED8  D7FE               	bra	u8177
 10551  001EDA  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10552  001EDC  D7FC               	bra	u8177
 10553  001EDE  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
 10554  001EE0  D7FA               	bra	u8177
 10555  001EE2                     l6956:
 10556                           
 10557                           ;Test.c: 179: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10558  001EE2  0E01               	movlw	1
 10559  001EE4  EC98  F025         	call	_lcdInst
 10560  001EE8  0E68               	movlw	104
 10561  001EEA  0100               	movlb	0	; () banked
 10562  001EEC  6FAB               	movwf	??_sensorTest& (0+255),b
 10563  001EEE  0EE4               	movlw	228
 10564  001EF0                     u8187:
 10565  001EF0  2EE8               	decfsz	wreg,f,c
 10566  001EF2  D7FE               	bra	u8187
 10567  001EF4  2FAB               	decfsz	??_sensorTest& (0+255),f,b
 10568  001EF6  D7FC               	bra	u8187
 10569  001EF8  F000               	nop	
 10570  001EFA  0E80               	movlw	128
 10571  001EFC  EC98  F025         	call	_lcdInst
 10572                           
 10573                           ;Test.c: 180: printf("TST: COND");
 10574  001F00  0E87               	movlw	low STR_84
 10575  001F02  0100               	movlb	0	; () banked
 10576  001F04  6F8E               	movwf	printf@f& (0+255),b
 10577  001F06  0EFF               	movlw	high STR_84
 10578  001F08  0100               	movlb	0	; () banked
 10579  001F0A  6F8F               	movwf	(printf@f+1)& (0+255),b
 10580  001F0C  ECB8  F008         	call	_printf	;wreg free
 10581                           
 10582                           ;Test.c: 181: while(PORTBbits.RB1 == 0){
 10583  001F10  D01B               	goto	l6968
 10584  001F12                     l6964:
 10585                           
 10586                           ;Test.c: 185: lcdInst(0b10000000);;lcdInst(0b11000000);;
 10587  001F12  0E80               	movlw	128
 10588  001F14  EC98  F025         	call	_lcdInst
 10589  001F18  0EC0               	movlw	192
 10590  001F1A  EC98  F025         	call	_lcdInst
 10591                           
 10592                           ;Test.c: 186: printf("COND: %d", PORTAbits.RA2);
 10593  001F1E  0EA5               	movlw	low STR_86
 10594  001F20  0100               	movlb	0	; () banked
 10595  001F22  6F8E               	movwf	printf@f& (0+255),b
 10596  001F24  0EFF               	movlw	high STR_86
 10597  001F26  0100               	movlb	0	; () banked
 10598  001F28  6F8F               	movwf	(printf@f+1)& (0+255),b
 10599  001F2A  A480               	btfss	3968,2,c	;volatile
 10600  001F2C  D004               	goto	u5460
 10601  001F2E  0100               	movlb	0	; () banked
 10602  001F30  6BAB               	clrf	??_sensorTest& (0+255),b
 10603  001F32  2BAB               	incf	??_sensorTest& (0+255),f,b
 10604  001F34  D002               	goto	u5468
 10605  001F36                     u5460:
 10606  001F36  0100               	movlb	0	; () banked
 10607  001F38  6BAB               	clrf	??_sensorTest& (0+255),b
 10608  001F3A                     u5468:
 10609  001F3A  0100               	movlb	0	; () banked
 10610  001F3C  51AB               	movf	??_sensorTest& (0+255),w,b
 10611  001F3E  0100               	movlb	0	; () banked
 10612  001F40  6F90               	movwf	(?_printf+2)& (0+255),b
 10613  001F42  6B91               	clrf	(?_printf+3)& (0+255),b
 10614  001F44  ECB8  F008         	call	_printf	;wreg free
 10615  001F48                     l6968:
 10616  001F48  A281               	btfss	3969,1,c	;volatile
 10617  001F4A  D7E3               	goto	l6964
 10618                           
 10619                           ;Test.c: 187: }
 10620                           ;Test.c: 188: if(PORTB >> 4 == 0b1111){
 10621  001F4C  3881               	swapf	3969,w,c	;volatile
 10622  001F4E  0B0F               	andlw	15
 10623  001F50  0A0F               	xorlw	15
 10624  001F52  B4D8               	btfsc	status,2,c
 10625  001F54  0012               	return	
 10626                           
 10627                           ;Test.c: 191: else{
 10628                           ;Test.c: 192: LATAbits.LATA3 = 1;
 10629                           
 10630                           ;Test.c: 190: }
 10631                           
 10632                           ;Test.c: 189: break;
 10633  001F56  8689               	bsf	3977,3,c	;volatile
 10634                           
 10635                           ;Test.c: 193: while(PORTBbits.RB1 == 1){
 10636  001F58  D01B               	goto	l6980
 10637  001F5A                     l6976:
 10638                           
 10639                           ;Test.c: 195: lcdInst(0b10000000);;lcdInst(0b11000000);;
 10640  001F5A  0E80               	movlw	128
 10641  001F5C  EC98  F025         	call	_lcdInst
 10642  001F60  0EC0               	movlw	192
 10643  001F62  EC98  F025         	call	_lcdInst
 10644                           
 10645                           ;Test.c: 196: printf("COND: %d", PORTAbits.RA2);
 10646  001F66  0EA5               	movlw	low STR_86
 10647  001F68  0100               	movlb	0	; () banked
 10648  001F6A  6F8E               	movwf	printf@f& (0+255),b
 10649  001F6C  0EFF               	movlw	high STR_86
 10650  001F6E  0100               	movlb	0	; () banked
 10651  001F70  6F8F               	movwf	(printf@f+1)& (0+255),b
 10652  001F72  A480               	btfss	3968,2,c	;volatile
 10653  001F74  D004               	goto	u5490
 10654  001F76  0100               	movlb	0	; () banked
 10655  001F78  6BAB               	clrf	??_sensorTest& (0+255),b
 10656  001F7A  2BAB               	incf	??_sensorTest& (0+255),f,b
 10657  001F7C  D002               	goto	u5498
 10658  001F7E                     u5490:
 10659  001F7E  0100               	movlb	0	; () banked
 10660  001F80  6BAB               	clrf	??_sensorTest& (0+255),b
 10661  001F82                     u5498:
 10662  001F82  0100               	movlb	0	; () banked
 10663  001F84  51AB               	movf	??_sensorTest& (0+255),w,b
 10664  001F86  0100               	movlb	0	; () banked
 10665  001F88  6F90               	movwf	(?_printf+2)& (0+255),b
 10666  001F8A  6B91               	clrf	(?_printf+3)& (0+255),b
 10667  001F8C  ECB8  F008         	call	_printf	;wreg free
 10668  001F90                     l6980:
 10669  001F90  B281               	btfsc	3969,1,c	;volatile
 10670  001F92  D7E3               	goto	l6976
 10671                           
 10672                           ;Test.c: 197: }
 10673                           ;Test.c: 198: LATAbits.LATA3 = ~1;
 10674  001F94  9689               	bcf	3977,3,c	;volatile
 10675  001F96  D7A5               	goto	l6956
 10676  001F98                     __end_of_sensorTest:
 10677                           	opt stack 0
 10678                           tblptru	equ	0xFF8
 10679                           tblptrh	equ	0xFF7
 10680                           tblptrl	equ	0xFF6
 10681                           tablat	equ	0xFF5
 10682                           prodh	equ	0xFF4
 10683                           prodl	equ	0xFF3
 10684                           intcon	equ	0xFF2
 10685                           intcon2	equ	0xFF1
 10686                           intcon3	equ	0xFF0
 10687                           postinc0	equ	0xFEE
 10688                           wreg	equ	0xFE8
 10689                           postdec1	equ	0xFE5
 10690                           fsr1l	equ	0xFE1
 10691                           indf2	equ	0xFDF
 10692                           postinc2	equ	0xFDE
 10693                           postdec2	equ	0xFDD
 10694                           fsr2h	equ	0xFDA
 10695                           fsr2l	equ	0xFD9
 10696                           status	equ	0xFD8
 10697                           
 10698 ;; *************** function _readMAG *****************
 10699 ;; Defined at:
 10700 ;;		line 29 in file "ADCFunctionality.c"
 10701 ;; Parameters:    Size  Location     Type
 10702 ;;		None
 10703 ;; Auto vars:     Size  Location     Type
 10704 ;;  res             2    4[BANK0 ] int 
 10705 ;; Return value:  Size  Location     Type
 10706 ;;                  1    wreg      void 
 10707 ;; Registers used:
 10708 ;;		wreg, status,2, status,0, cstack
 10709 ;; Tracked objects:
 10710 ;;		On entry : 0/0
 10711 ;;		On exit  : 0/0
 10712 ;;		Unchanged: 0/0
 10713 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10714 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10715 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10716 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10717 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10718 ;;Total ram usage:        4 bytes
 10719 ;; Hardware stack levels used:    1
 10720 ;; Hardware stack levels required when called:    8
 10721 ;; This function calls:
 10722 ;;		_readADC
 10723 ;; This function is called by:
 10724 ;;		_getMAG
 10725 ;;		_sensorTest
 10726 ;; This function uses a non-reentrant model
 10727 ;;
 10728                           
 10729                           	psect	text38
 10730  0044C4                     __ptext38:
 10731                           	opt stack 0
 10732  0044C4                     _readMAG:
 10733                           	opt stack 19
 10734                           
 10735                           ;ADCFunctionality.c: 30: readADC(1);
 10736                           
 10737                           ;incstack = 0
 10738  0044C4  0E01               	movlw	1
 10739  0044C6  EC9F  F024         	call	_readADC
 10740                           
 10741                           ;ADCFunctionality.c: 31: int res = ADRESH<<8 | ADRESL;
 10742  0044CA  50C3               	movf	4035,w,c	;volatile
 10743  0044CC  CFC4 F082          	movff	4036,??_readMAG	;volatile
 10744  0044D0  0100               	movlb	0	; () banked
 10745  0044D2  6B83               	clrf	(??_readMAG+1)& (0+255),b
 10746  0044D4  C082  F083         	movff	??_readMAG,??_readMAG+1
 10747  0044D8  0100               	movlb	0	; () banked
 10748  0044DA  6B82               	clrf	??_readMAG& (0+255),b
 10749  0044DC  0100               	movlb	0	; () banked
 10750  0044DE  1182               	iorwf	??_readMAG& (0+255),w,b
 10751  0044E0  0100               	movlb	0	; () banked
 10752  0044E2  6F84               	movwf	readMAG@res& (0+255),b
 10753  0044E4  0100               	movlb	0	; () banked
 10754  0044E6  5183               	movf	(??_readMAG+1)& (0+255),w,b
 10755  0044E8  0100               	movlb	0	; () banked
 10756  0044EA  6F85               	movwf	(readMAG@res+1)& (0+255),b
 10757                           
 10758                           ; BSR set to: 0
 10759                           ;ADCFunctionality.c: 32: MAG_signal = (res < 150) ? 1 : 0;
 10760  0044EC  0100               	movlb	0	; () banked
 10761  0044EE  BF85               	btfsc	(readMAG@res+1)& (0+255),7,b
 10762  0044F0  D008               	goto	u4061
 10763  0044F2  0100               	movlb	0	; () banked
 10764  0044F4  5185               	movf	(readMAG@res+1)& (0+255),w,b
 10765  0044F6  E107               	bnz	u4060
 10766  0044F8  0E96               	movlw	150
 10767  0044FA  0100               	movlb	0	; () banked
 10768  0044FC  5D84               	subwf	readMAG@res& (0+255),w,b
 10769  0044FE  B0D8               	btfsc	status,0,c
 10770  004500  D002               	goto	u4060
 10771  004502                     u4061:
 10772  004502  0E01               	movlw	1
 10773  004504  D001               	goto	u4070
 10774  004506                     u4060:
 10775  004506  0E00               	movlw	0
 10776  004508                     u4070:
 10777  004508  0100               	movlb	0	; () banked
 10778  00450A  6FE0               	movwf	_MAG_signal& (0+255),b
 10779  00450C  6BE1               	clrf	(_MAG_signal+1)& (0+255),b
 10780                           
 10781                           ; BSR set to: 0
 10782  00450E  0012               	return		;funcret
 10783  004510                     __end_of_readMAG:
 10784                           	opt stack 0
 10785                           tblptru	equ	0xFF8
 10786                           tblptrh	equ	0xFF7
 10787                           tblptrl	equ	0xFF6
 10788                           tablat	equ	0xFF5
 10789                           prodh	equ	0xFF4
 10790                           prodl	equ	0xFF3
 10791                           intcon	equ	0xFF2
 10792                           intcon2	equ	0xFF1
 10793                           intcon3	equ	0xFF0
 10794                           postinc0	equ	0xFEE
 10795                           wreg	equ	0xFE8
 10796                           postdec1	equ	0xFE5
 10797                           fsr1l	equ	0xFE1
 10798                           indf2	equ	0xFDF
 10799                           postinc2	equ	0xFDE
 10800                           postdec2	equ	0xFDD
 10801                           fsr2h	equ	0xFDA
 10802                           fsr2l	equ	0xFD9
 10803                           status	equ	0xFD8
 10804                           
 10805 ;; *************** function _readADC *****************
 10806 ;; Defined at:
 10807 ;;		line 15 in file "ADCFunctionality.c"
 10808 ;; Parameters:    Size  Location     Type
 10809 ;;  channel         1    wreg     unsigned char 
 10810 ;; Auto vars:     Size  Location     Type
 10811 ;;  channel         1    1[BANK0 ] unsigned char 
 10812 ;; Return value:  Size  Location     Type
 10813 ;;                  1    wreg      void 
 10814 ;; Registers used:
 10815 ;;		wreg, status,2, status,0, cstack
 10816 ;; Tracked objects:
 10817 ;;		On entry : 0/0
 10818 ;;		On exit  : 0/0
 10819 ;;		Unchanged: 0/0
 10820 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10821 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10822 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10823 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10824 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10825 ;;Total ram usage:        2 bytes
 10826 ;; Hardware stack levels used:    1
 10827 ;; Hardware stack levels required when called:    7
 10828 ;; This function calls:
 10829 ;;		Nothing
 10830 ;; This function is called by:
 10831 ;;		_readIR
 10832 ;;		_readMAG
 10833 ;;		_sensorTest
 10834 ;; This function uses a non-reentrant model
 10835 ;;
 10836                           
 10837                           	psect	text39
 10838  00493E                     __ptext39:
 10839                           	opt stack 0
 10840  00493E                     _readADC:
 10841                           	opt stack 20
 10842                           
 10843                           ; BSR set to: 0
 10844                           ;incstack = 0
 10845                           ;readADC@channel stored from wreg
 10846  00493E  0100               	movlb	0	; () banked
 10847  004940  6F81               	movwf	readADC@channel& (0+255),b
 10848                           
 10849                           ;ADCFunctionality.c: 17: ADCON0 = channel << 2;
 10850  004942  0100               	movlb	0	; () banked
 10851  004944  4581               	rlncf	readADC@channel& (0+255),w,b
 10852  004946  46E8               	rlncf	wreg,f,c
 10853  004948  0BFC               	andlw	252
 10854  00494A  6EC2               	movwf	4034,c	;volatile
 10855                           
 10856                           ; BSR set to: 0
 10857                           ;ADCFunctionality.c: 18: ADCON0bits.ADON = 1;
 10858  00494C  80C2               	bsf	4034,0,c	;volatile
 10859                           
 10860                           ; BSR set to: 0
 10861                           ;ADCFunctionality.c: 19: ADCON0bits.GO = 1;
 10862  00494E  82C2               	bsf	4034,1,c	;volatile
 10863                           
 10864                           ;ADCFunctionality.c: 20: while(ADCON0bits.GO_NOT_DONE){_delay((unsigned long)((5)*(32000
      +                          000/4000.0)));}
 10865  004950  D009               	goto	l5476
 10866  004952                     l5474:
 10867  004952  0E34               	movlw	52
 10868  004954  0100               	movlb	0	; () banked
 10869  004956  6F80               	movwf	??_readADC& (0+255),b
 10870  004958  0EF1               	movlw	241
 10871  00495A                     u8197:
 10872  00495A  2EE8               	decfsz	wreg,f,c
 10873  00495C  D7FE               	bra	u8197
 10874  00495E  2F80               	decfsz	??_readADC& (0+255),f,b
 10875  004960  D7FC               	bra	u8197
 10876  004962  D000               	nop2	
 10877  004964                     l5476:
 10878  004964  A2C2               	btfss	4034,1,c	;volatile
 10879  004966  0012               	return	
 10880  004968  D7F4               	goto	l5474
 10881  00496A                     __end_of_readADC:
 10882                           	opt stack 0
 10883                           tblptru	equ	0xFF8
 10884                           tblptrh	equ	0xFF7
 10885                           tblptrl	equ	0xFF6
 10886                           tablat	equ	0xFF5
 10887                           prodh	equ	0xFF4
 10888                           prodl	equ	0xFF3
 10889                           intcon	equ	0xFF2
 10890                           intcon2	equ	0xFF1
 10891                           intcon3	equ	0xFF0
 10892                           postinc0	equ	0xFEE
 10893                           wreg	equ	0xFE8
 10894                           postdec1	equ	0xFE5
 10895                           fsr1l	equ	0xFE1
 10896                           indf2	equ	0xFDF
 10897                           postinc2	equ	0xFDE
 10898                           postdec2	equ	0xFDD
 10899                           fsr2h	equ	0xFDA
 10900                           fsr2l	equ	0xFD9
 10901                           status	equ	0xFD8
 10902                           
 10903 ;; *************** function _algorithmTest *****************
 10904 ;; Defined at:
 10905 ;;		line 80 in file "Test.c"
 10906 ;; Parameters:    Size  Location     Type
 10907 ;;		None
 10908 ;; Auto vars:     Size  Location     Type
 10909 ;;		None
 10910 ;; Return value:  Size  Location     Type
 10911 ;;                  1    wreg      void 
 10912 ;; Registers used:
 10913 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10914 ;; Tracked objects:
 10915 ;;		On entry : 0/0
 10916 ;;		On exit  : 0/0
 10917 ;;		Unchanged: 0/0
 10918 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10919 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10920 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10921 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10922 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10923 ;;Total ram usage:        2 bytes
 10924 ;; Hardware stack levels used:    1
 10925 ;; Hardware stack levels required when called:   10
 10926 ;; This function calls:
 10927 ;;		_lcdInst
 10928 ;;		_printf
 10929 ;; This function is called by:
 10930 ;;		_Test
 10931 ;; This function uses a non-reentrant model
 10932 ;;
 10933                           
 10934                           	psect	text40
 10935  0036FE                     __ptext40:
 10936                           	opt stack 0
 10937  0036FE                     _algorithmTest:
 10938                           	opt stack 19
 10939                           
 10940                           ;Test.c: 82: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 10941                           
 10942                           ;incstack = 0
 10943  0036FE  0E01               	movlw	1
 10944  003700  EC98  F025         	call	_lcdInst
 10945  003704  0E68               	movlw	104
 10946  003706  0100               	movlb	0	; () banked
 10947  003708  6FAB               	movwf	??_algorithmTest& (0+255),b
 10948  00370A  0EE4               	movlw	228
 10949  00370C                     u8207:
 10950  00370C  2EE8               	decfsz	wreg,f,c
 10951  00370E  D7FE               	bra	u8207
 10952  003710  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 10953  003712  D7FC               	bra	u8207
 10954  003714  F000               	nop	
 10955  003716  0E80               	movlw	128
 10956  003718  EC98  F025         	call	_lcdInst
 10957                           
 10958                           ;Test.c: 83: printf("ALGORITHM TEST");
 10959  00371C  0ED2               	movlw	low STR_70
 10960  00371E  0100               	movlb	0	; () banked
 10961  003720  6F8E               	movwf	printf@f& (0+255),b
 10962  003722  0EFE               	movlw	high STR_70
 10963  003724  0100               	movlb	0	; () banked
 10964  003726  6F8F               	movwf	(printf@f+1)& (0+255),b
 10965  003728  ECB8  F008         	call	_printf	;wreg free
 10966                           
 10967                           ;Test.c: 84: lcdInst(0b11000000);;
 10968  00372C  0EC0               	movlw	192
 10969  00372E  EC98  F025         	call	_lcdInst
 10970                           
 10971                           ;Test.c: 85: printf("PUSH TO START");
 10972  003732  0E0B               	movlw	low STR_71
 10973  003734  0100               	movlb	0	; () banked
 10974  003736  6F8E               	movwf	printf@f& (0+255),b
 10975  003738  0EFF               	movlw	high STR_71
 10976  00373A  0100               	movlb	0	; () banked
 10977  00373C  6F8F               	movwf	(printf@f+1)& (0+255),b
 10978  00373E  ECB8  F008         	call	_printf	;wreg free
 10979                           
 10980                           ;Test.c: 86: _delay((unsigned long)((100)*(32000000/4000.0)));
 10981  003742  0E05               	movlw	5
 10982  003744  0100               	movlb	0	; () banked
 10983  003746  6FAC               	movwf	(??_algorithmTest+1)& (0+255),b
 10984  003748  0E0F               	movlw	15
 10985  00374A  0100               	movlb	0	; () banked
 10986  00374C  6FAB               	movwf	??_algorithmTest& (0+255),b
 10987  00374E  0EF1               	movlw	241
 10988  003750                     u8217:
 10989  003750  2EE8               	decfsz	wreg,f,c
 10990  003752  D7FE               	bra	u8217
 10991  003754  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 10992  003756  D7FC               	bra	u8217
 10993  003758  2FAC               	decfsz	(??_algorithmTest+1)& (0+255),f,b
 10994  00375A  D7FA               	bra	u8217
 10995  00375C                     l1087:
 10996  00375C  A281               	btfss	3969,1,c	;volatile
 10997  00375E  D7FE               	goto	l1087
 10998  003760                     l1090:
 10999  003760  B281               	btfsc	3969,1,c	;volatile
 11000  003762  D7FE               	goto	l1090
 11001                           
 11002                           ;Test.c: 89: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 11003  003764  0E01               	movlw	1
 11004  003766  EC98  F025         	call	_lcdInst
 11005  00376A  0E68               	movlw	104
 11006  00376C  0100               	movlb	0	; () banked
 11007  00376E  6FAB               	movwf	??_algorithmTest& (0+255),b
 11008  003770  0EE4               	movlw	228
 11009  003772                     u8227:
 11010  003772  2EE8               	decfsz	wreg,f,c
 11011  003774  D7FE               	bra	u8227
 11012  003776  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 11013  003778  D7FC               	bra	u8227
 11014  00377A  F000               	nop	
 11015  00377C  0E80               	movlw	128
 11016  00377E  EC98  F025         	call	_lcdInst
 11017                           
 11018                           ;Test.c: 94: printf("ALG1: 9 POPNOTAB");
 11019  003782  0E5F               	movlw	low STR_72
 11020  003784  0100               	movlb	0	; () banked
 11021  003786  6F8E               	movwf	printf@f& (0+255),b
 11022  003788  0EFC               	movlw	high STR_72
 11023  00378A  0100               	movlb	0	; () banked
 11024  00378C  6F8F               	movwf	(printf@f+1)& (0+255),b
 11025  00378E  ECB8  F008         	call	_printf	;wreg free
 11026                           
 11027                           ;Test.c: 101: printf("ALG2: 12 CANS");
 11028  003792  0EEF               	movlw	low STR_73
 11029  003794  0100               	movlb	0	; () banked
 11030  003796  6F8E               	movwf	printf@f& (0+255),b
 11031  003798  0EFE               	movlw	high STR_73
 11032  00379A  0100               	movlb	0	; () banked
 11033  00379C  6F8F               	movwf	(printf@f+1)& (0+255),b
 11034  00379E  ECB8  F008         	call	_printf	;wreg free
 11035                           
 11036                           ;Test.c: 110: printf("ALG3: 1 CAN");
 11037  0037A2  0E4F               	movlw	low STR_74
 11038  0037A4  0100               	movlb	0	; () banked
 11039  0037A6  6F8E               	movwf	printf@f& (0+255),b
 11040  0037A8  0EFF               	movlw	high STR_74
 11041  0037AA  0100               	movlb	0	; () banked
 11042  0037AC  6F8F               	movwf	(printf@f+1)& (0+255),b
 11043  0037AE  ECB8  F008         	call	_printf	;wreg free
 11044                           
 11045                           ;Test.c: 116: printf("ALG4: ALL CANS");
 11046  0037B2  0EB4               	movlw	low STR_75
 11047  0037B4  0100               	movlb	0	; () banked
 11048  0037B6  6F8E               	movwf	printf@f& (0+255),b
 11049  0037B8  0EFE               	movlw	high STR_75
 11050  0037BA  0100               	movlb	0	; () banked
 11051  0037BC  6F8F               	movwf	(printf@f+1)& (0+255),b
 11052  0037BE  ECB8  F008         	call	_printf	;wreg free
 11053                           
 11054                           ;Test.c: 121: printf("ALG5: NO CANS");
 11055  0037C2  0EFD               	movlw	low STR_76
 11056  0037C4  0100               	movlb	0	; () banked
 11057  0037C6  6F8E               	movwf	printf@f& (0+255),b
 11058  0037C8  0EFE               	movlw	high STR_76
 11059  0037CA  0100               	movlb	0	; () banked
 11060  0037CC  6F8F               	movwf	(printf@f+1)& (0+255),b
 11061  0037CE  ECB8  F008         	call	_printf	;wreg free
 11062  0037D2  0012               	return		;funcret
 11063  0037D4                     __end_of_algorithmTest:
 11064                           	opt stack 0
 11065                           tblptru	equ	0xFF8
 11066                           tblptrh	equ	0xFF7
 11067                           tblptrl	equ	0xFF6
 11068                           tablat	equ	0xFF5
 11069                           prodh	equ	0xFF4
 11070                           prodl	equ	0xFF3
 11071                           intcon	equ	0xFF2
 11072                           intcon2	equ	0xFF1
 11073                           intcon3	equ	0xFF0
 11074                           postinc0	equ	0xFEE
 11075                           wreg	equ	0xFE8
 11076                           postdec1	equ	0xFE5
 11077                           fsr1l	equ	0xFE1
 11078                           indf2	equ	0xFDF
 11079                           postinc2	equ	0xFDE
 11080                           postdec2	equ	0xFDD
 11081                           fsr2h	equ	0xFDA
 11082                           fsr2l	equ	0xFD9
 11083                           status	equ	0xFD8
 11084                           
 11085 ;; *************** function _actuatorTest *****************
 11086 ;; Defined at:
 11087 ;;		line 203 in file "Test.c"
 11088 ;; Parameters:    Size  Location     Type
 11089 ;;		None
 11090 ;; Auto vars:     Size  Location     Type
 11091 ;;  i               1   45[BANK0 ] unsigned char 
 11092 ;;  i               1   67[BANK0 ] unsigned char 
 11093 ;;  i               1   66[BANK0 ] unsigned char 
 11094 ;;  i               1   65[BANK0 ] unsigned char 
 11095 ;;  i               1   64[BANK0 ] unsigned char 
 11096 ;;  i               1   63[BANK0 ] unsigned char 
 11097 ;;  i               1   62[BANK0 ] unsigned char 
 11098 ;;  i               1   61[BANK0 ] unsigned char 
 11099 ;;  i               1   60[BANK0 ] unsigned char 
 11100 ;;  i               1   59[BANK0 ] unsigned char 
 11101 ;;  i               1   58[BANK0 ] unsigned char 
 11102 ;;  i               1   57[BANK0 ] unsigned char 
 11103 ;;  i               1   56[BANK0 ] unsigned char 
 11104 ;;  i               1   55[BANK0 ] unsigned char 
 11105 ;;  i               1   54[BANK0 ] unsigned char 
 11106 ;;  i               1   53[BANK0 ] unsigned char 
 11107 ;;  i               1   52[BANK0 ] unsigned char 
 11108 ;;  i               1   51[BANK0 ] unsigned char 
 11109 ;;  i               1   50[BANK0 ] unsigned char 
 11110 ;;  i               1   49[BANK0 ] unsigned char 
 11111 ;;  i               1   48[BANK0 ] unsigned char 
 11112 ;;  i               1   47[BANK0 ] unsigned char 
 11113 ;;  i               1   46[BANK0 ] unsigned char 
 11114 ;;  i               2   68[BANK0 ] int 
 11115 ;; Return value:  Size  Location     Type
 11116 ;;                  1    wreg      void 
 11117 ;; Registers used:
 11118 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11119 ;; Tracked objects:
 11120 ;;		On entry : 0/0
 11121 ;;		On exit  : 0/0
 11122 ;;		Unchanged: 0/0
 11123 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11124 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11125 ;;      Locals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11126 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11127 ;;      Totals:         0      27       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11128 ;;Total ram usage:       27 bytes
 11129 ;; Hardware stack levels used:    1
 11130 ;; Hardware stack levels required when called:   10
 11131 ;; This function calls:
 11132 ;;		_lcdInst
 11133 ;;		_printf
 11134 ;;		_updateServoPosition
 11135 ;; This function is called by:
 11136 ;;		_Test
 11137 ;; This function uses a non-reentrant model
 11138 ;;
 11139                           
 11140                           	psect	text41
 11141  000012                     __ptext41:
 11142                           	opt stack 0
 11143  000012                     _actuatorTest:
 11144                           	opt stack 19
 11145                           
 11146                           ;Test.c: 205: int i = 0;
 11147                           
 11148                           ;incstack = 0
 11149  000012  0E00               	movlw	0
 11150  000014  0100               	movlb	0	; () banked
 11151  000016  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 11152  000018  0E00               	movlw	0
 11153  00001A  6FC4               	movwf	actuatorTest@i& (0+255),b
 11154                           
 11155                           ; BSR set to: 0
 11156                           ;Test.c: 207: (INTCONbits.GIE = 1);
 11157  00001C  8EF2               	bsf	intcon,7,c	;volatile
 11158                           
 11159                           ; BSR set to: 0
 11160                           ;Test.c: 208: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11161  00001E  0E01               	movlw	1
 11162  000020  EC98  F025         	call	_lcdInst
 11163  000024  0E68               	movlw	104
 11164  000026  0100               	movlb	0	; () banked
 11165  000028  6FAB               	movwf	??_actuatorTest& (0+255),b
 11166  00002A  0EE4               	movlw	228
 11167  00002C                     u8237:
 11168  00002C  2EE8               	decfsz	wreg,f,c
 11169  00002E  D7FE               	bra	u8237
 11170  000030  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11171  000032  D7FC               	bra	u8237
 11172  000034  F000               	nop	
 11173  000036  0E80               	movlw	128
 11174  000038  EC98  F025         	call	_lcdInst
 11175                           
 11176                           ;Test.c: 209: printf("ACTUATORS");
 11177  00003C  0E91               	movlw	low STR_88
 11178  00003E  0100               	movlb	0	; () banked
 11179  000040  6F8E               	movwf	printf@f& (0+255),b
 11180  000042  0EFF               	movlw	high STR_88
 11181  000044  0100               	movlb	0	; () banked
 11182  000046  6F8F               	movwf	(printf@f+1)& (0+255),b
 11183  000048  ECB8  F008         	call	_printf	;wreg free
 11184                           
 11185                           ;Test.c: 210: lcdInst(0b11000000);;
 11186  00004C  0EC0               	movlw	192
 11187  00004E  EC98  F025         	call	_lcdInst
 11188                           
 11189                           ;Test.c: 211: printf("PUSH TO START");
 11190  000052  0E0B               	movlw	low STR_71
 11191  000054  0100               	movlb	0	; () banked
 11192  000056  6F8E               	movwf	printf@f& (0+255),b
 11193  000058  0EFF               	movlw	high STR_71
 11194  00005A  0100               	movlb	0	; () banked
 11195  00005C  6F8F               	movwf	(printf@f+1)& (0+255),b
 11196  00005E  ECB8  F008         	call	_printf	;wreg free
 11197                           
 11198                           ;Test.c: 212: _delay((unsigned long)((100)*(32000000/4000.0)));
 11199  000062  0E05               	movlw	5
 11200  000064  0100               	movlb	0	; () banked
 11201  000066  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 11202  000068  0E0F               	movlw	15
 11203  00006A  0100               	movlb	0	; () banked
 11204  00006C  6FAB               	movwf	??_actuatorTest& (0+255),b
 11205  00006E  0EF1               	movlw	241
 11206  000070                     u8247:
 11207  000070  2EE8               	decfsz	wreg,f,c
 11208  000072  D7FE               	bra	u8247
 11209  000074  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11210  000076  D7FC               	bra	u8247
 11211  000078  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 11212  00007A  D7FA               	bra	u8247
 11213  00007C                     l1122:
 11214  00007C  A281               	btfss	3969,1,c	;volatile
 11215  00007E  D7FE               	goto	l1122
 11216  000080                     l1125:
 11217  000080  B281               	btfsc	3969,1,c	;volatile
 11218  000082  D7FE               	goto	l1125
 11219                           
 11220                           ;Test.c: 215: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11221  000084  0E01               	movlw	1
 11222  000086  EC98  F025         	call	_lcdInst
 11223  00008A  0E68               	movlw	104
 11224  00008C  0100               	movlb	0	; () banked
 11225  00008E  6FAB               	movwf	??_actuatorTest& (0+255),b
 11226  000090  0EE4               	movlw	228
 11227  000092                     u8257:
 11228  000092  2EE8               	decfsz	wreg,f,c
 11229  000094  D7FE               	bra	u8257
 11230  000096  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11231  000098  D7FC               	bra	u8257
 11232  00009A  F000               	nop	
 11233  00009C  0E80               	movlw	128
 11234  00009E  EC98  F025         	call	_lcdInst
 11235                           
 11236                           ;Test.c: 220: printf("TST: DC MOTORS");
 11237  0000A2  0EC3               	movlw	low STR_90
 11238  0000A4  0100               	movlb	0	; () banked
 11239  0000A6  6F8E               	movwf	printf@f& (0+255),b
 11240  0000A8  0EFE               	movlw	high STR_90
 11241  0000AA  0100               	movlb	0	; () banked
 11242  0000AC  6F8F               	movwf	(printf@f+1)& (0+255),b
 11243  0000AE  ECB8  F008         	call	_printf	;wreg free
 11244                           
 11245                           ;Test.c: 221: lcdInst(0b11000000);;
 11246  0000B2  0EC0               	movlw	192
 11247  0000B4  EC98  F025         	call	_lcdInst
 11248                           
 11249                           ;Test.c: 222: printf("PIN RA5 HIGH.");
 11250  0000B8  0EE1               	movlw	low STR_91
 11251  0000BA  0100               	movlb	0	; () banked
 11252  0000BC  6F8E               	movwf	printf@f& (0+255),b
 11253  0000BE  0EFE               	movlw	high STR_91
 11254  0000C0  0100               	movlb	0	; () banked
 11255  0000C2  6F8F               	movwf	(printf@f+1)& (0+255),b
 11256  0000C4  ECB8  F008         	call	_printf	;wreg free
 11257                           
 11258                           ;Test.c: 223: LATAbits.LATA5 = 1;
 11259  0000C8  8A89               	bsf	3977,5,c	;volatile
 11260                           
 11261                           ;Test.c: 224: for(i=0;i<5;i++){for(char i=0;i<100;i++){_delay((unsigned long)((10)*(3200
      +                          0000/4000.0)));};}
 11262  0000CA  0E00               	movlw	0
 11263  0000CC  0100               	movlb	0	; () banked
 11264  0000CE  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 11265  0000D0  0E00               	movlw	0
 11266  0000D2  6FC4               	movwf	actuatorTest@i& (0+255),b
 11267                           
 11268                           ; BSR set to: 0
 11269  0000D4  0100               	movlb	0	; () banked
 11270  0000D6  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 11271  0000D8  D008               	goto	l7020
 11272  0000DA  0100               	movlb	0	; () banked
 11273  0000DC  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 11274  0000DE  E123               	bnz	l1129
 11275  0000E0  0E05               	movlw	5
 11276  0000E2  0100               	movlb	0	; () banked
 11277  0000E4  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 11278  0000E6  B0D8               	btfsc	status,0,c
 11279  0000E8  D01E               	goto	l1129
 11280  0000EA                     l7020:
 11281                           
 11282                           ; BSR set to: 0
 11283  0000EA  0E00               	movlw	0
 11284  0000EC  0100               	movlb	0	; () banked
 11285  0000EE  6FAD               	movwf	actuatorTest@i_1646& (0+255),b
 11286  0000F0                     l7022:
 11287                           
 11288                           ; BSR set to: 0
 11289  0000F0  0E63               	movlw	99
 11290  0000F2  0100               	movlb	0	; () banked
 11291  0000F4  65AD               	cpfsgt	actuatorTest@i_1646& (0+255),b
 11292  0000F6  D001               	goto	l7026
 11293  0000F8  D00C               	goto	l7030
 11294  0000FA                     l7026:
 11295                           
 11296                           ; BSR set to: 0
 11297  0000FA  0E68               	movlw	104
 11298  0000FC  0100               	movlb	0	; () banked
 11299  0000FE  6FAB               	movwf	??_actuatorTest& (0+255),b
 11300  000100  0EE4               	movlw	228
 11301  000102                     u8267:
 11302  000102  2EE8               	decfsz	wreg,f,c
 11303  000104  D7FE               	bra	u8267
 11304  000106  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11305  000108  D7FC               	bra	u8267
 11306  00010A  F000               	nop	
 11307  00010C  0100               	movlb	0	; () banked
 11308  00010E  2BAD               	incf	actuatorTest@i_1646& (0+255),f,b
 11309  000110  D7EF               	goto	l7022
 11310  000112                     l7030:
 11311                           
 11312                           ; BSR set to: 0
 11313  000112  0100               	movlb	0	; () banked
 11314  000114  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 11315  000116  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 11316                           
 11317                           ; BSR set to: 0
 11318  000118  0100               	movlb	0	; () banked
 11319  00011A  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 11320  00011C  D7E6               	goto	l7020
 11321  00011E  0100               	movlb	0	; () banked
 11322  000120  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 11323  000122  E101               	bnz	u5560
 11324  000124  D7DD               	goto	L8
 11325  000126                     u5560:
 11326  000126                     l1129:
 11327                           
 11328                           ; BSR set to: 0
 11329                           ;Test.c: 225: LATAbits.LATA5 = 0;
 11330  000126  9A89               	bcf	3977,5,c	;volatile
 11331                           
 11332                           ; BSR set to: 0
 11333                           ;Test.c: 226: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11334  000128  0E01               	movlw	1
 11335  00012A  EC98  F025         	call	_lcdInst
 11336  00012E  0E68               	movlw	104
 11337  000130  0100               	movlb	0	; () banked
 11338  000132  6FAB               	movwf	??_actuatorTest& (0+255),b
 11339  000134  0EE4               	movlw	228
 11340  000136                     u8277:
 11341  000136  2EE8               	decfsz	wreg,f,c
 11342  000138  D7FE               	bra	u8277
 11343  00013A  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11344  00013C  D7FC               	bra	u8277
 11345  00013E  F000               	nop	
 11346  000140  0E80               	movlw	128
 11347  000142  EC98  F025         	call	_lcdInst
 11348                           
 11349                           ;Test.c: 232: printf("TST: COND SOLN'D");
 11350  000146  0E81               	movlw	low STR_92
 11351  000148  0100               	movlb	0	; () banked
 11352  00014A  6F8E               	movwf	printf@f& (0+255),b
 11353  00014C  0EFC               	movlw	high STR_92
 11354  00014E  0100               	movlb	0	; () banked
 11355  000150  6F8F               	movwf	(printf@f+1)& (0+255),b
 11356  000152  ECB8  F008         	call	_printf	;wreg free
 11357                           
 11358                           ;Test.c: 233: lcdInst(0b11000000);;
 11359  000156  0EC0               	movlw	192
 11360  000158  EC98  F025         	call	_lcdInst
 11361                           
 11362                           ;Test.c: 234: printf("PIN RA3...");
 11363  00015C  0E5B               	movlw	low STR_93
 11364  00015E  0100               	movlb	0	; () banked
 11365  000160  6F8E               	movwf	printf@f& (0+255),b
 11366  000162  0EFF               	movlw	high STR_93
 11367  000164  0100               	movlb	0	; () banked
 11368  000166  6F8F               	movwf	(printf@f+1)& (0+255),b
 11369  000168  ECB8  F008         	call	_printf	;wreg free
 11370                           
 11371                           ;Test.c: 235: for(i=0;i<5;i++){
 11372  00016C  0E00               	movlw	0
 11373  00016E  0100               	movlb	0	; () banked
 11374  000170  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 11375  000172  0E00               	movlw	0
 11376  000174  6FC4               	movwf	actuatorTest@i& (0+255),b
 11377                           
 11378                           ; BSR set to: 0
 11379  000176  0100               	movlb	0	; () banked
 11380  000178  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 11381  00017A  D008               	goto	l1132
 11382  00017C  0100               	movlb	0	; () banked
 11383  00017E  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 11384  000180  E12C               	bnz	l1133
 11385  000182  0E05               	movlw	5
 11386  000184  0100               	movlb	0	; () banked
 11387  000186  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 11388  000188  B0D8               	btfsc	status,0,c
 11389  00018A  D027               	goto	l1133
 11390  00018C                     l1132:
 11391                           
 11392                           ; BSR set to: 0
 11393                           ;Test.c: 236: LATAbits.LATA3 = 1;
 11394  00018C  8689               	bsf	3977,3,c	;volatile
 11395                           
 11396                           ; BSR set to: 0
 11397                           ;Test.c: 237: _delay((unsigned long)((300)*(32000000/4000.0)));
 11398  00018E  0E0D               	movlw	13
 11399  000190  0100               	movlb	0	; () banked
 11400  000192  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 11401  000194  0E2D               	movlw	45
 11402  000196  0100               	movlb	0	; () banked
 11403  000198  6FAB               	movwf	??_actuatorTest& (0+255),b
 11404  00019A  0ED7               	movlw	215
 11405  00019C                     u8287:
 11406  00019C  2EE8               	decfsz	wreg,f,c
 11407  00019E  D7FE               	bra	u8287
 11408  0001A0  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11409  0001A2  D7FC               	bra	u8287
 11410  0001A4  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 11411  0001A6  D7FA               	bra	u8287
 11412  0001A8  D000               	nop2	
 11413                           
 11414                           ;Test.c: 238: LATAbits.LATA3 = ~1;
 11415  0001AA  9689               	bcf	3977,3,c	;volatile
 11416                           
 11417                           ;Test.c: 239: _delay((unsigned long)((1000-300)*(32000000/4000.0)));
 11418  0001AC  0E1D               	movlw	29
 11419  0001AE  0100               	movlb	0	; () banked
 11420  0001B0  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 11421  0001B2  0E69               	movlw	105
 11422  0001B4  0100               	movlb	0	; () banked
 11423  0001B6  6FAB               	movwf	??_actuatorTest& (0+255),b
 11424  0001B8  0EA5               	movlw	165
 11425  0001BA                     u8297:
 11426  0001BA  2EE8               	decfsz	wreg,f,c
 11427  0001BC  D7FE               	bra	u8297
 11428  0001BE  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11429  0001C0  D7FC               	bra	u8297
 11430  0001C2  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 11431  0001C4  D7FA               	bra	u8297
 11432  0001C6  0100               	movlb	0	; () banked
 11433  0001C8  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 11434  0001CA  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 11435  0001CC  0100               	movlb	0	; () banked
 11436  0001CE  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 11437  0001D0  D7DD               	goto	l1132
 11438  0001D2  0100               	movlb	0	; () banked
 11439  0001D4  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 11440  0001D6  E101               	bnz	u5580
 11441  0001D8  D7D4               	goto	L9
 11442  0001DA                     u5580:
 11443  0001DA                     l1133:
 11444                           
 11445                           ; BSR set to: 0
 11446                           ;Test.c: 240: }
 11447                           ;Test.c: 241: LATAbits.LATA3 = ~1;
 11448  0001DA  9689               	bcf	3977,3,c	;volatile
 11449                           
 11450                           ; BSR set to: 0
 11451                           ;Test.c: 242: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11452  0001DC  0E01               	movlw	1
 11453  0001DE  EC98  F025         	call	_lcdInst
 11454  0001E2  0E68               	movlw	104
 11455  0001E4  0100               	movlb	0	; () banked
 11456  0001E6  6FAB               	movwf	??_actuatorTest& (0+255),b
 11457  0001E8  0EE4               	movlw	228
 11458  0001EA                     u8307:
 11459  0001EA  2EE8               	decfsz	wreg,f,c
 11460  0001EC  D7FE               	bra	u8307
 11461  0001EE  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11462  0001F0  D7FC               	bra	u8307
 11463  0001F2  F000               	nop	
 11464  0001F4  0E80               	movlw	128
 11465  0001F6  EC98  F025         	call	_lcdInst
 11466                           
 11467                           ;Test.c: 248: printf("TST: PUSH SOLN'D");
 11468  0001FA  0E92               	movlw	low STR_94
 11469  0001FC  0100               	movlb	0	; () banked
 11470  0001FE  6F8E               	movwf	printf@f& (0+255),b
 11471  000200  0EFC               	movlw	high STR_94
 11472  000202  0100               	movlb	0	; () banked
 11473  000204  6F8F               	movwf	(printf@f+1)& (0+255),b
 11474  000206  ECB8  F008         	call	_printf	;wreg free
 11475                           
 11476                           ;Test.c: 249: lcdInst(0b11000000);;
 11477  00020A  0EC0               	movlw	192
 11478  00020C  EC98  F025         	call	_lcdInst
 11479                           
 11480                           ;Test.c: 250: printf("PIN RA4...");
 11481  000210  0E66               	movlw	low STR_95
 11482  000212  0100               	movlb	0	; () banked
 11483  000214  6F8E               	movwf	printf@f& (0+255),b
 11484  000216  0EFF               	movlw	high STR_95
 11485  000218  0100               	movlb	0	; () banked
 11486  00021A  6F8F               	movwf	(printf@f+1)& (0+255),b
 11487  00021C  ECB8  F008         	call	_printf	;wreg free
 11488                           
 11489                           ;Test.c: 251: for(i=0;i<5;i++){
 11490  000220  0E00               	movlw	0
 11491  000222  0100               	movlb	0	; () banked
 11492  000224  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 11493  000226  0E00               	movlw	0
 11494  000228  6FC4               	movwf	actuatorTest@i& (0+255),b
 11495                           
 11496                           ; BSR set to: 0
 11497  00022A  0100               	movlb	0	; () banked
 11498  00022C  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 11499  00022E  D008               	goto	l1134
 11500  000230  0100               	movlb	0	; () banked
 11501  000232  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 11502  000234  E12C               	bnz	l1135
 11503  000236  0E05               	movlw	5
 11504  000238  0100               	movlb	0	; () banked
 11505  00023A  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 11506  00023C  B0D8               	btfsc	status,0,c
 11507  00023E  D027               	goto	l1135
 11508  000240                     l1134:
 11509                           
 11510                           ; BSR set to: 0
 11511                           ;Test.c: 252: LATAbits.LATA4 = 1;
 11512  000240  8889               	bsf	3977,4,c	;volatile
 11513                           
 11514                           ; BSR set to: 0
 11515                           ;Test.c: 253: _delay((unsigned long)((300)*(32000000/4000.0)));
 11516  000242  0E0D               	movlw	13
 11517  000244  0100               	movlb	0	; () banked
 11518  000246  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 11519  000248  0E2D               	movlw	45
 11520  00024A  0100               	movlb	0	; () banked
 11521  00024C  6FAB               	movwf	??_actuatorTest& (0+255),b
 11522  00024E  0ED7               	movlw	215
 11523  000250                     u8317:
 11524  000250  2EE8               	decfsz	wreg,f,c
 11525  000252  D7FE               	bra	u8317
 11526  000254  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11527  000256  D7FC               	bra	u8317
 11528  000258  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 11529  00025A  D7FA               	bra	u8317
 11530  00025C  D000               	nop2	
 11531                           
 11532                           ;Test.c: 254: LATAbits.LATA4 = ~1;
 11533  00025E  9889               	bcf	3977,4,c	;volatile
 11534                           
 11535                           ;Test.c: 255: _delay((unsigned long)((1000-300)*(32000000/4000.0)));
 11536  000260  0E1D               	movlw	29
 11537  000262  0100               	movlb	0	; () banked
 11538  000264  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 11539  000266  0E69               	movlw	105
 11540  000268  0100               	movlb	0	; () banked
 11541  00026A  6FAB               	movwf	??_actuatorTest& (0+255),b
 11542  00026C  0EA5               	movlw	165
 11543  00026E                     u8327:
 11544  00026E  2EE8               	decfsz	wreg,f,c
 11545  000270  D7FE               	bra	u8327
 11546  000272  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11547  000274  D7FC               	bra	u8327
 11548  000276  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 11549  000278  D7FA               	bra	u8327
 11550  00027A  0100               	movlb	0	; () banked
 11551  00027C  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 11552  00027E  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 11553  000280  0100               	movlb	0	; () banked
 11554  000282  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 11555  000284  D7DD               	goto	l1134
 11556  000286  0100               	movlb	0	; () banked
 11557  000288  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 11558  00028A  E101               	bnz	u5600
 11559  00028C  D7D4               	goto	L10
 11560  00028E                     u5600:
 11561  00028E                     l1135:
 11562                           
 11563                           ; BSR set to: 0
 11564                           ;Test.c: 256: }
 11565                           ;Test.c: 257: LATAbits.LATA4 = ~1;
 11566  00028E  9889               	bcf	3977,4,c	;volatile
 11567                           
 11568                           ; BSR set to: 0
 11569                           ;Test.c: 258: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11570  000290  0E01               	movlw	1
 11571  000292  EC98  F025         	call	_lcdInst
 11572  000296  0E68               	movlw	104
 11573  000298  0100               	movlb	0	; () banked
 11574  00029A  6FAB               	movwf	??_actuatorTest& (0+255),b
 11575  00029C  0EE4               	movlw	228
 11576  00029E                     u8337:
 11577  00029E  2EE8               	decfsz	wreg,f,c
 11578  0002A0  D7FE               	bra	u8337
 11579  0002A2  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11580  0002A4  D7FC               	bra	u8337
 11581  0002A6  F000               	nop	
 11582  0002A8  0E80               	movlw	128
 11583  0002AA  EC98  F025         	call	_lcdInst
 11584                           
 11585                           ;Test.c: 261: machine_state = Sorting_state;
 11586  0002AE  0E01               	movlw	1
 11587  0002B0  0100               	movlb	0	; () banked
 11588  0002B2  6FFC               	movwf	_machine_state& (0+255),b
 11589                           
 11590                           ; BSR set to: 0
 11591                           ;Test.c: 262: was_low_1 = 0;
 11592  0002B4  0E00               	movlw	0
 11593  0002B6  6E7A               	movwf	_was_low_1+1,c	;volatile
 11594  0002B8  0E00               	movlw	0
 11595  0002BA  6E79               	movwf	_was_low_1,c	;volatile
 11596                           
 11597                           ; BSR set to: 0
 11598                           ;Test.c: 263: was_low_1 = 0;
 11599  0002BC  0E00               	movlw	0
 11600  0002BE  6E7A               	movwf	_was_low_1+1,c	;volatile
 11601  0002C0  0E00               	movlw	0
 11602  0002C2  6E79               	movwf	_was_low_1,c	;volatile
 11603                           
 11604                           ; BSR set to: 0
 11605                           ;Test.c: 270: printf("TST: PAN SERVO");
 11606  0002C4  0EA5               	movlw	low STR_96
 11607  0002C6  0100               	movlb	0	; () banked
 11608  0002C8  6F8E               	movwf	printf@f& (0+255),b
 11609  0002CA  0EFE               	movlw	high STR_96
 11610  0002CC  0100               	movlb	0	; () banked
 11611  0002CE  6F8F               	movwf	(printf@f+1)& (0+255),b
 11612  0002D0  ECB8  F008         	call	_printf	;wreg free
 11613                           
 11614                           ;Test.c: 271: lcdInst(0b11000000);;
 11615  0002D4  0EC0               	movlw	192
 11616  0002D6  EC98  F025         	call	_lcdInst
 11617                           
 11618                           ;Test.c: 272: printf("MIDDLE -- 2s    ");
 11619  0002DA  0E0A               	movlw	low STR_97
 11620  0002DC  0100               	movlb	0	; () banked
 11621  0002DE  6F8E               	movwf	printf@f& (0+255),b
 11622  0002E0  0EFC               	movlw	high STR_97
 11623  0002E2  0100               	movlb	0	; () banked
 11624  0002E4  6F8F               	movwf	(printf@f+1)& (0+255),b
 11625  0002E6  ECB8  F008         	call	_printf	;wreg free
 11626                           
 11627                           ;Test.c: 273: updateServoPosition(1200, 1);
 11628  0002EA  0E04               	movlw	4
 11629  0002EC  0100               	movlb	0	; () banked
 11630  0002EE  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11631  0002F0  0EB0               	movlw	176
 11632  0002F2  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11633  0002F4  0E00               	movlw	0
 11634  0002F6  0100               	movlb	0	; () banked
 11635  0002F8  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11636  0002FA  0E01               	movlw	1
 11637  0002FC  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11638  0002FE  ECBF  F01F         	call	_updateServoPosition	;wreg free
 11639                           
 11640                           ;Test.c: 274: TMR1ON = 1;
 11641  000302  80CD               	bsf	4045,0,c	;volatile
 11642                           
 11643                           ;Test.c: 275: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11644  000304  0E00               	movlw	0
 11645  000306  0100               	movlb	0	; () banked
 11646  000308  6FAE               	movwf	actuatorTest@i_1653& (0+255),b
 11647  00030A                     l7106:
 11648                           
 11649                           ; BSR set to: 0
 11650  00030A  0E63               	movlw	99
 11651  00030C  0100               	movlb	0	; () banked
 11652  00030E  65AE               	cpfsgt	actuatorTest@i_1653& (0+255),b
 11653  000310  D001               	goto	l7110
 11654  000312  D00C               	goto	l7114
 11655  000314                     l7110:
 11656                           
 11657                           ; BSR set to: 0
 11658  000314  0E68               	movlw	104
 11659  000316  0100               	movlb	0	; () banked
 11660  000318  6FAB               	movwf	??_actuatorTest& (0+255),b
 11661  00031A  0EE4               	movlw	228
 11662  00031C                     u8347:
 11663  00031C  2EE8               	decfsz	wreg,f,c
 11664  00031E  D7FE               	bra	u8347
 11665  000320  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11666  000322  D7FC               	bra	u8347
 11667  000324  F000               	nop	
 11668  000326  0100               	movlb	0	; () banked
 11669  000328  2BAE               	incf	actuatorTest@i_1653& (0+255),f,b
 11670  00032A  D7EF               	goto	l7106
 11671  00032C                     l7114:
 11672                           
 11673                           ; BSR set to: 0
 11674  00032C  0E00               	movlw	0
 11675  00032E  0100               	movlb	0	; () banked
 11676  000330  6FAF               	movwf	actuatorTest@i_1654& (0+255),b
 11677  000332                     l7116:
 11678                           
 11679                           ; BSR set to: 0
 11680  000332  0E63               	movlw	99
 11681  000334  0100               	movlb	0	; () banked
 11682  000336  65AF               	cpfsgt	actuatorTest@i_1654& (0+255),b
 11683  000338  D001               	goto	l7120
 11684  00033A  D00C               	goto	l7124
 11685  00033C                     l7120:
 11686                           
 11687                           ; BSR set to: 0
 11688  00033C  0E68               	movlw	104
 11689  00033E  0100               	movlb	0	; () banked
 11690  000340  6FAB               	movwf	??_actuatorTest& (0+255),b
 11691  000342  0EE4               	movlw	228
 11692  000344                     u8357:
 11693  000344  2EE8               	decfsz	wreg,f,c
 11694  000346  D7FE               	bra	u8357
 11695  000348  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11696  00034A  D7FC               	bra	u8357
 11697  00034C  F000               	nop	
 11698  00034E  0100               	movlb	0	; () banked
 11699  000350  2BAF               	incf	actuatorTest@i_1654& (0+255),f,b
 11700  000352  D7EF               	goto	l7116
 11701  000354                     l7124:
 11702                           
 11703                           ; BSR set to: 0
 11704                           ;Test.c: 277: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11705  000354  0E80               	movlw	128
 11706  000356  EC98  F025         	call	_lcdInst
 11707  00035A  0EC0               	movlw	192
 11708  00035C  EC98  F025         	call	_lcdInst
 11709                           
 11710                           ;Test.c: 278: printf("RIGHT -- 2s     ");
 11711  000360  0EF9               	movlw	low STR_98
 11712  000362  0100               	movlb	0	; () banked
 11713  000364  6F8E               	movwf	printf@f& (0+255),b
 11714  000366  0EFB               	movlw	high STR_98
 11715  000368  0100               	movlb	0	; () banked
 11716  00036A  6F8F               	movwf	(printf@f+1)& (0+255),b
 11717  00036C  ECB8  F008         	call	_printf	;wreg free
 11718                           
 11719                           ;Test.c: 279: updateServoPosition(500, 1);
 11720  000370  0E01               	movlw	1
 11721  000372  0100               	movlb	0	; () banked
 11722  000374  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11723  000376  0EF4               	movlw	244
 11724  000378  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11725  00037A  0E00               	movlw	0
 11726  00037C  0100               	movlb	0	; () banked
 11727  00037E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11728  000380  0E01               	movlw	1
 11729  000382  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11730  000384  ECBF  F01F         	call	_updateServoPosition	;wreg free
 11731                           
 11732                           ;Test.c: 280: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11733  000388  0E00               	movlw	0
 11734  00038A  0100               	movlb	0	; () banked
 11735  00038C  6FB0               	movwf	actuatorTest@i_1656& (0+255),b
 11736  00038E                     l7132:
 11737                           
 11738                           ; BSR set to: 0
 11739  00038E  0E63               	movlw	99
 11740  000390  0100               	movlb	0	; () banked
 11741  000392  65B0               	cpfsgt	actuatorTest@i_1656& (0+255),b
 11742  000394  D001               	goto	l7136
 11743  000396  D00C               	goto	l7140
 11744  000398                     l7136:
 11745                           
 11746                           ; BSR set to: 0
 11747  000398  0E68               	movlw	104
 11748  00039A  0100               	movlb	0	; () banked
 11749  00039C  6FAB               	movwf	??_actuatorTest& (0+255),b
 11750  00039E  0EE4               	movlw	228
 11751  0003A0                     u8367:
 11752  0003A0  2EE8               	decfsz	wreg,f,c
 11753  0003A2  D7FE               	bra	u8367
 11754  0003A4  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11755  0003A6  D7FC               	bra	u8367
 11756  0003A8  F000               	nop	
 11757  0003AA  0100               	movlb	0	; () banked
 11758  0003AC  2BB0               	incf	actuatorTest@i_1656& (0+255),f,b
 11759  0003AE  D7EF               	goto	l7132
 11760  0003B0                     l7140:
 11761                           
 11762                           ; BSR set to: 0
 11763  0003B0  0E00               	movlw	0
 11764  0003B2  0100               	movlb	0	; () banked
 11765  0003B4  6FB1               	movwf	actuatorTest@i_1657& (0+255),b
 11766  0003B6                     l7142:
 11767                           
 11768                           ; BSR set to: 0
 11769  0003B6  0E63               	movlw	99
 11770  0003B8  0100               	movlb	0	; () banked
 11771  0003BA  65B1               	cpfsgt	actuatorTest@i_1657& (0+255),b
 11772  0003BC  D001               	goto	l7146
 11773  0003BE  D00C               	goto	l7150
 11774  0003C0                     l7146:
 11775                           
 11776                           ; BSR set to: 0
 11777  0003C0  0E68               	movlw	104
 11778  0003C2  0100               	movlb	0	; () banked
 11779  0003C4  6FAB               	movwf	??_actuatorTest& (0+255),b
 11780  0003C6  0EE4               	movlw	228
 11781  0003C8                     u8377:
 11782  0003C8  2EE8               	decfsz	wreg,f,c
 11783  0003CA  D7FE               	bra	u8377
 11784  0003CC  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11785  0003CE  D7FC               	bra	u8377
 11786  0003D0  F000               	nop	
 11787  0003D2  0100               	movlb	0	; () banked
 11788  0003D4  2BB1               	incf	actuatorTest@i_1657& (0+255),f,b
 11789  0003D6  D7EF               	goto	l7142
 11790  0003D8                     l7150:
 11791                           
 11792                           ; BSR set to: 0
 11793                           ;Test.c: 282: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11794  0003D8  0E80               	movlw	128
 11795  0003DA  EC98  F025         	call	_lcdInst
 11796  0003DE  0EC0               	movlw	192
 11797  0003E0  EC98  F025         	call	_lcdInst
 11798                           
 11799                           ;Test.c: 283: printf("LEFT -- 2s      ");
 11800  0003E4  0ED7               	movlw	low STR_99
 11801  0003E6  0100               	movlb	0	; () banked
 11802  0003E8  6F8E               	movwf	printf@f& (0+255),b
 11803  0003EA  0EFB               	movlw	high STR_99
 11804  0003EC  0100               	movlb	0	; () banked
 11805  0003EE  6F8F               	movwf	(printf@f+1)& (0+255),b
 11806  0003F0  ECB8  F008         	call	_printf	;wreg free
 11807                           
 11808                           ;Test.c: 284: updateServoPosition(2200, 1);
 11809  0003F4  0E08               	movlw	8
 11810  0003F6  0100               	movlb	0	; () banked
 11811  0003F8  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11812  0003FA  0E98               	movlw	152
 11813  0003FC  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11814  0003FE  0E00               	movlw	0
 11815  000400  0100               	movlb	0	; () banked
 11816  000402  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11817  000404  0E01               	movlw	1
 11818  000406  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11819  000408  ECBF  F01F         	call	_updateServoPosition	;wreg free
 11820                           
 11821                           ;Test.c: 285: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11822  00040C  0E00               	movlw	0
 11823  00040E  0100               	movlb	0	; () banked
 11824  000410  6FB2               	movwf	actuatorTest@i_1659& (0+255),b
 11825  000412                     l7158:
 11826                           
 11827                           ; BSR set to: 0
 11828  000412  0E63               	movlw	99
 11829  000414  0100               	movlb	0	; () banked
 11830  000416  65B2               	cpfsgt	actuatorTest@i_1659& (0+255),b
 11831  000418  D001               	goto	l7162
 11832  00041A  D00C               	goto	l7166
 11833  00041C                     l7162:
 11834                           
 11835                           ; BSR set to: 0
 11836  00041C  0E68               	movlw	104
 11837  00041E  0100               	movlb	0	; () banked
 11838  000420  6FAB               	movwf	??_actuatorTest& (0+255),b
 11839  000422  0EE4               	movlw	228
 11840  000424                     u8387:
 11841  000424  2EE8               	decfsz	wreg,f,c
 11842  000426  D7FE               	bra	u8387
 11843  000428  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11844  00042A  D7FC               	bra	u8387
 11845  00042C  F000               	nop	
 11846  00042E  0100               	movlb	0	; () banked
 11847  000430  2BB2               	incf	actuatorTest@i_1659& (0+255),f,b
 11848  000432  D7EF               	goto	l7158
 11849  000434                     l7166:
 11850                           
 11851                           ; BSR set to: 0
 11852  000434  0E00               	movlw	0
 11853  000436  0100               	movlb	0	; () banked
 11854  000438  6FB3               	movwf	actuatorTest@i_1660& (0+255),b
 11855  00043A                     l7168:
 11856                           
 11857                           ; BSR set to: 0
 11858  00043A  0E63               	movlw	99
 11859  00043C  0100               	movlb	0	; () banked
 11860  00043E  65B3               	cpfsgt	actuatorTest@i_1660& (0+255),b
 11861  000440  D001               	goto	l7172
 11862  000442  D00C               	goto	l7176
 11863  000444                     l7172:
 11864                           
 11865                           ; BSR set to: 0
 11866  000444  0E68               	movlw	104
 11867  000446  0100               	movlb	0	; () banked
 11868  000448  6FAB               	movwf	??_actuatorTest& (0+255),b
 11869  00044A  0EE4               	movlw	228
 11870  00044C                     u8397:
 11871  00044C  2EE8               	decfsz	wreg,f,c
 11872  00044E  D7FE               	bra	u8397
 11873  000450  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11874  000452  D7FC               	bra	u8397
 11875  000454  F000               	nop	
 11876  000456  0100               	movlb	0	; () banked
 11877  000458  2BB3               	incf	actuatorTest@i_1660& (0+255),f,b
 11878  00045A  D7EF               	goto	l7168
 11879  00045C                     l7176:
 11880                           
 11881                           ; BSR set to: 0
 11882                           ;Test.c: 287: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11883  00045C  0E80               	movlw	128
 11884  00045E  EC98  F025         	call	_lcdInst
 11885  000462  0EC0               	movlw	192
 11886  000464  EC98  F025         	call	_lcdInst
 11887                           
 11888                           ;Test.c: 288: printf("MID-LEFT -- 2s  ");
 11889  000468  0E2C               	movlw	low STR_100
 11890  00046A  0100               	movlb	0	; () banked
 11891  00046C  6F8E               	movwf	printf@f& (0+255),b
 11892  00046E  0EFC               	movlw	high STR_100
 11893  000470  0100               	movlb	0	; () banked
 11894  000472  6F8F               	movwf	(printf@f+1)& (0+255),b
 11895  000474  ECB8  F008         	call	_printf	;wreg free
 11896                           
 11897                           ;Test.c: 289: updateServoPosition(1670, 1);
 11898  000478  0E06               	movlw	6
 11899  00047A  0100               	movlb	0	; () banked
 11900  00047C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11901  00047E  0E86               	movlw	134
 11902  000480  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11903  000482  0E00               	movlw	0
 11904  000484  0100               	movlb	0	; () banked
 11905  000486  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11906  000488  0E01               	movlw	1
 11907  00048A  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11908  00048C  ECBF  F01F         	call	_updateServoPosition	;wreg free
 11909                           
 11910                           ;Test.c: 290: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11911  000490  0E00               	movlw	0
 11912  000492  0100               	movlb	0	; () banked
 11913  000494  6FB4               	movwf	actuatorTest@i_1662& (0+255),b
 11914  000496                     l7184:
 11915                           
 11916                           ; BSR set to: 0
 11917  000496  0E63               	movlw	99
 11918  000498  0100               	movlb	0	; () banked
 11919  00049A  65B4               	cpfsgt	actuatorTest@i_1662& (0+255),b
 11920  00049C  D001               	goto	l7188
 11921  00049E  D00C               	goto	l7192
 11922  0004A0                     l7188:
 11923                           
 11924                           ; BSR set to: 0
 11925  0004A0  0E68               	movlw	104
 11926  0004A2  0100               	movlb	0	; () banked
 11927  0004A4  6FAB               	movwf	??_actuatorTest& (0+255),b
 11928  0004A6  0EE4               	movlw	228
 11929  0004A8                     u8407:
 11930  0004A8  2EE8               	decfsz	wreg,f,c
 11931  0004AA  D7FE               	bra	u8407
 11932  0004AC  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11933  0004AE  D7FC               	bra	u8407
 11934  0004B0  F000               	nop	
 11935  0004B2  0100               	movlb	0	; () banked
 11936  0004B4  2BB4               	incf	actuatorTest@i_1662& (0+255),f,b
 11937  0004B6  D7EF               	goto	l7184
 11938  0004B8                     l7192:
 11939                           
 11940                           ; BSR set to: 0
 11941  0004B8  0E00               	movlw	0
 11942  0004BA  0100               	movlb	0	; () banked
 11943  0004BC  6FB5               	movwf	actuatorTest@i_1663& (0+255),b
 11944  0004BE                     l7194:
 11945                           
 11946                           ; BSR set to: 0
 11947  0004BE  0E63               	movlw	99
 11948  0004C0  0100               	movlb	0	; () banked
 11949  0004C2  65B5               	cpfsgt	actuatorTest@i_1663& (0+255),b
 11950  0004C4  D001               	goto	l7198
 11951  0004C6  D00C               	goto	l7202
 11952  0004C8                     l7198:
 11953                           
 11954                           ; BSR set to: 0
 11955  0004C8  0E68               	movlw	104
 11956  0004CA  0100               	movlb	0	; () banked
 11957  0004CC  6FAB               	movwf	??_actuatorTest& (0+255),b
 11958  0004CE  0EE4               	movlw	228
 11959  0004D0                     u8417:
 11960  0004D0  2EE8               	decfsz	wreg,f,c
 11961  0004D2  D7FE               	bra	u8417
 11962  0004D4  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11963  0004D6  D7FC               	bra	u8417
 11964  0004D8  F000               	nop	
 11965  0004DA  0100               	movlb	0	; () banked
 11966  0004DC  2BB5               	incf	actuatorTest@i_1663& (0+255),f,b
 11967  0004DE  D7EF               	goto	l7194
 11968  0004E0                     l7202:
 11969                           
 11970                           ; BSR set to: 0
 11971                           ;Test.c: 292: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11972  0004E0  0E80               	movlw	128
 11973  0004E2  EC98  F025         	call	_lcdInst
 11974  0004E6  0EC0               	movlw	192
 11975  0004E8  EC98  F025         	call	_lcdInst
 11976                           
 11977                           ;Test.c: 293: printf("MID-RIGHT -- 2s ");
 11978  0004EC  0E3D               	movlw	low STR_101
 11979  0004EE  0100               	movlb	0	; () banked
 11980  0004F0  6F8E               	movwf	printf@f& (0+255),b
 11981  0004F2  0EFC               	movlw	high STR_101
 11982  0004F4  0100               	movlb	0	; () banked
 11983  0004F6  6F8F               	movwf	(printf@f+1)& (0+255),b
 11984  0004F8  ECB8  F008         	call	_printf	;wreg free
 11985                           
 11986                           ;Test.c: 294: updateServoPosition(850, 1);
 11987  0004FC  0E03               	movlw	3
 11988  0004FE  0100               	movlb	0	; () banked
 11989  000500  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11990  000502  0E52               	movlw	82
 11991  000504  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11992  000506  0E00               	movlw	0
 11993  000508  0100               	movlb	0	; () banked
 11994  00050A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11995  00050C  0E01               	movlw	1
 11996  00050E  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11997  000510  ECBF  F01F         	call	_updateServoPosition	;wreg free
 11998                           
 11999                           ;Test.c: 295: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12000  000514  0E00               	movlw	0
 12001  000516  0100               	movlb	0	; () banked
 12002  000518  6FB6               	movwf	actuatorTest@i_1665& (0+255),b
 12003  00051A                     l7210:
 12004                           
 12005                           ; BSR set to: 0
 12006  00051A  0E63               	movlw	99
 12007  00051C  0100               	movlb	0	; () banked
 12008  00051E  65B6               	cpfsgt	actuatorTest@i_1665& (0+255),b
 12009  000520  D001               	goto	l7214
 12010  000522  D00C               	goto	l7218
 12011  000524                     l7214:
 12012                           
 12013                           ; BSR set to: 0
 12014  000524  0E68               	movlw	104
 12015  000526  0100               	movlb	0	; () banked
 12016  000528  6FAB               	movwf	??_actuatorTest& (0+255),b
 12017  00052A  0EE4               	movlw	228
 12018  00052C                     u8427:
 12019  00052C  2EE8               	decfsz	wreg,f,c
 12020  00052E  D7FE               	bra	u8427
 12021  000530  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12022  000532  D7FC               	bra	u8427
 12023  000534  F000               	nop	
 12024  000536  0100               	movlb	0	; () banked
 12025  000538  2BB6               	incf	actuatorTest@i_1665& (0+255),f,b
 12026  00053A  D7EF               	goto	l7210
 12027  00053C                     l7218:
 12028                           
 12029                           ; BSR set to: 0
 12030  00053C  0E00               	movlw	0
 12031  00053E  0100               	movlb	0	; () banked
 12032  000540  6FB7               	movwf	actuatorTest@i_1666& (0+255),b
 12033  000542                     l7220:
 12034                           
 12035                           ; BSR set to: 0
 12036  000542  0E63               	movlw	99
 12037  000544  0100               	movlb	0	; () banked
 12038  000546  65B7               	cpfsgt	actuatorTest@i_1666& (0+255),b
 12039  000548  D001               	goto	l7224
 12040  00054A  D00C               	goto	l7228
 12041  00054C                     l7224:
 12042                           
 12043                           ; BSR set to: 0
 12044  00054C  0E68               	movlw	104
 12045  00054E  0100               	movlb	0	; () banked
 12046  000550  6FAB               	movwf	??_actuatorTest& (0+255),b
 12047  000552  0EE4               	movlw	228
 12048  000554                     u8437:
 12049  000554  2EE8               	decfsz	wreg,f,c
 12050  000556  D7FE               	bra	u8437
 12051  000558  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12052  00055A  D7FC               	bra	u8437
 12053  00055C  F000               	nop	
 12054  00055E  0100               	movlb	0	; () banked
 12055  000560  2BB7               	incf	actuatorTest@i_1666& (0+255),f,b
 12056  000562  D7EF               	goto	l7220
 12057  000564                     l7228:
 12058                           
 12059                           ; BSR set to: 0
 12060                           ;Test.c: 297: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12061  000564  0E80               	movlw	128
 12062  000566  EC98  F025         	call	_lcdInst
 12063  00056A  0EC0               	movlw	192
 12064  00056C  EC98  F025         	call	_lcdInst
 12065                           
 12066                           ;Test.c: 298: printf("MID -- 2s       ");
 12067  000570  0EB5               	movlw	low STR_102
 12068  000572  0100               	movlb	0	; () banked
 12069  000574  6F8E               	movwf	printf@f& (0+255),b
 12070  000576  0EFB               	movlw	high STR_102
 12071  000578  0100               	movlb	0	; () banked
 12072  00057A  6F8F               	movwf	(printf@f+1)& (0+255),b
 12073  00057C  ECB8  F008         	call	_printf	;wreg free
 12074                           
 12075                           ;Test.c: 299: updateServoPosition(1200, 1);
 12076  000580  0E04               	movlw	4
 12077  000582  0100               	movlb	0	; () banked
 12078  000584  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12079  000586  0EB0               	movlw	176
 12080  000588  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12081  00058A  0E00               	movlw	0
 12082  00058C  0100               	movlb	0	; () banked
 12083  00058E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12084  000590  0E01               	movlw	1
 12085  000592  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12086  000594  ECBF  F01F         	call	_updateServoPosition	;wreg free
 12087                           
 12088                           ;Test.c: 300: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12089  000598  0E00               	movlw	0
 12090  00059A  0100               	movlb	0	; () banked
 12091  00059C  6FB8               	movwf	actuatorTest@i_1668& (0+255),b
 12092  00059E                     l7236:
 12093                           
 12094                           ; BSR set to: 0
 12095  00059E  0E63               	movlw	99
 12096  0005A0  0100               	movlb	0	; () banked
 12097  0005A2  65B8               	cpfsgt	actuatorTest@i_1668& (0+255),b
 12098  0005A4  D001               	goto	l7240
 12099  0005A6  D00C               	goto	l7244
 12100  0005A8                     l7240:
 12101                           
 12102                           ; BSR set to: 0
 12103  0005A8  0E68               	movlw	104
 12104  0005AA  0100               	movlb	0	; () banked
 12105  0005AC  6FAB               	movwf	??_actuatorTest& (0+255),b
 12106  0005AE  0EE4               	movlw	228
 12107  0005B0                     u8447:
 12108  0005B0  2EE8               	decfsz	wreg,f,c
 12109  0005B2  D7FE               	bra	u8447
 12110  0005B4  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12111  0005B6  D7FC               	bra	u8447
 12112  0005B8  F000               	nop	
 12113  0005BA  0100               	movlb	0	; () banked
 12114  0005BC  2BB8               	incf	actuatorTest@i_1668& (0+255),f,b
 12115  0005BE  D7EF               	goto	l7236
 12116  0005C0                     l7244:
 12117                           
 12118                           ; BSR set to: 0
 12119  0005C0  0E00               	movlw	0
 12120  0005C2  0100               	movlb	0	; () banked
 12121  0005C4  6FB9               	movwf	actuatorTest@i_1669& (0+255),b
 12122  0005C6                     l7246:
 12123                           
 12124                           ; BSR set to: 0
 12125  0005C6  0E63               	movlw	99
 12126  0005C8  0100               	movlb	0	; () banked
 12127  0005CA  65B9               	cpfsgt	actuatorTest@i_1669& (0+255),b
 12128  0005CC  D001               	goto	l7250
 12129  0005CE  D00C               	goto	l1159
 12130  0005D0                     l7250:
 12131                           
 12132                           ; BSR set to: 0
 12133  0005D0  0E68               	movlw	104
 12134  0005D2  0100               	movlb	0	; () banked
 12135  0005D4  6FAB               	movwf	??_actuatorTest& (0+255),b
 12136  0005D6  0EE4               	movlw	228
 12137  0005D8                     u8457:
 12138  0005D8  2EE8               	decfsz	wreg,f,c
 12139  0005DA  D7FE               	bra	u8457
 12140  0005DC  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12141  0005DE  D7FC               	bra	u8457
 12142  0005E0  F000               	nop	
 12143  0005E2  0100               	movlb	0	; () banked
 12144  0005E4  2BB9               	incf	actuatorTest@i_1669& (0+255),f,b
 12145  0005E6  D7EF               	goto	l7246
 12146  0005E8                     l1159:
 12147                           
 12148                           ; BSR set to: 0
 12149                           ;Test.c: 301: TMR1ON = 0;
 12150  0005E8  90CD               	bcf	4045,0,c	;volatile
 12151                           
 12152                           ; BSR set to: 0
 12153                           ;Test.c: 308: printf("TST: TILT SERVO");
 12154  0005EA  0E3A               	movlw	low STR_103
 12155  0005EC  0100               	movlb	0	; () banked
 12156  0005EE  6F8E               	movwf	printf@f& (0+255),b
 12157  0005F0  0EFE               	movlw	high STR_103
 12158  0005F2  0100               	movlb	0	; () banked
 12159  0005F4  6F8F               	movwf	(printf@f+1)& (0+255),b
 12160  0005F6  ECB8  F008         	call	_printf	;wreg free
 12161                           
 12162                           ;Test.c: 309: lcdInst(0b11000000);;
 12163  0005FA  0EC0               	movlw	192
 12164  0005FC  EC98  F025         	call	_lcdInst
 12165                           
 12166                           ;Test.c: 310: printf("LEVEL -- 2s     ");
 12167  000600  0EE8               	movlw	low STR_104
 12168  000602  0100               	movlb	0	; () banked
 12169  000604  6F8E               	movwf	printf@f& (0+255),b
 12170  000606  0EFB               	movlw	high STR_104
 12171  000608  0100               	movlb	0	; () banked
 12172  00060A  6F8F               	movwf	(printf@f+1)& (0+255),b
 12173  00060C  ECB8  F008         	call	_printf	;wreg free
 12174                           
 12175                           ;Test.c: 311: updateServoPosition(1050, 3);
 12176  000610  0E04               	movlw	4
 12177  000612  0100               	movlb	0	; () banked
 12178  000614  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12179  000616  0E1A               	movlw	26
 12180  000618  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12181  00061A  0E00               	movlw	0
 12182  00061C  0100               	movlb	0	; () banked
 12183  00061E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12184  000620  0E03               	movlw	3
 12185  000622  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12186  000624  ECBF  F01F         	call	_updateServoPosition	;wreg free
 12187                           
 12188                           ;Test.c: 312: TMR3ON = 1;
 12189  000628  80B1               	bsf	4017,0,c	;volatile
 12190                           
 12191                           ;Test.c: 313: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12192  00062A  0E00               	movlw	0
 12193  00062C  0100               	movlb	0	; () banked
 12194  00062E  6FBA               	movwf	actuatorTest@i_1672& (0+255),b
 12195  000630                     l7264:
 12196                           
 12197                           ; BSR set to: 0
 12198  000630  0E63               	movlw	99
 12199  000632  0100               	movlb	0	; () banked
 12200  000634  65BA               	cpfsgt	actuatorTest@i_1672& (0+255),b
 12201  000636  D001               	goto	l7268
 12202  000638  D00C               	goto	l7272
 12203  00063A                     l7268:
 12204                           
 12205                           ; BSR set to: 0
 12206  00063A  0E68               	movlw	104
 12207  00063C  0100               	movlb	0	; () banked
 12208  00063E  6FAB               	movwf	??_actuatorTest& (0+255),b
 12209  000640  0EE4               	movlw	228
 12210  000642                     u8467:
 12211  000642  2EE8               	decfsz	wreg,f,c
 12212  000644  D7FE               	bra	u8467
 12213  000646  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12214  000648  D7FC               	bra	u8467
 12215  00064A  F000               	nop	
 12216  00064C  0100               	movlb	0	; () banked
 12217  00064E  2BBA               	incf	actuatorTest@i_1672& (0+255),f,b
 12218  000650  D7EF               	goto	l7264
 12219  000652                     l7272:
 12220                           
 12221                           ; BSR set to: 0
 12222  000652  0E00               	movlw	0
 12223  000654  0100               	movlb	0	; () banked
 12224  000656  6FBB               	movwf	actuatorTest@i_1673& (0+255),b
 12225  000658                     l7274:
 12226                           
 12227                           ; BSR set to: 0
 12228  000658  0E63               	movlw	99
 12229  00065A  0100               	movlb	0	; () banked
 12230  00065C  65BB               	cpfsgt	actuatorTest@i_1673& (0+255),b
 12231  00065E  D001               	goto	l7278
 12232  000660  D00C               	goto	l7282
 12233  000662                     l7278:
 12234                           
 12235                           ; BSR set to: 0
 12236  000662  0E68               	movlw	104
 12237  000664  0100               	movlb	0	; () banked
 12238  000666  6FAB               	movwf	??_actuatorTest& (0+255),b
 12239  000668  0EE4               	movlw	228
 12240  00066A                     u8477:
 12241  00066A  2EE8               	decfsz	wreg,f,c
 12242  00066C  D7FE               	bra	u8477
 12243  00066E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12244  000670  D7FC               	bra	u8477
 12245  000672  F000               	nop	
 12246  000674  0100               	movlb	0	; () banked
 12247  000676  2BBB               	incf	actuatorTest@i_1673& (0+255),f,b
 12248  000678  D7EF               	goto	l7274
 12249  00067A                     l7282:
 12250                           
 12251                           ; BSR set to: 0
 12252                           ;Test.c: 315: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12253  00067A  0E80               	movlw	128
 12254  00067C  EC98  F025         	call	_lcdInst
 12255  000680  0EC0               	movlw	192
 12256  000682  EC98  F025         	call	_lcdInst
 12257                           
 12258                           ;Test.c: 316: printf("DROP -- 2s      ");
 12259  000686  0EC6               	movlw	low STR_105
 12260  000688  0100               	movlb	0	; () banked
 12261  00068A  6F8E               	movwf	printf@f& (0+255),b
 12262  00068C  0EFB               	movlw	high STR_105
 12263  00068E  0100               	movlb	0	; () banked
 12264  000690  6F8F               	movwf	(printf@f+1)& (0+255),b
 12265  000692  ECB8  F008         	call	_printf	;wreg free
 12266                           
 12267                           ;Test.c: 317: updateServoPosition(1260, 3);
 12268  000696  0E04               	movlw	4
 12269  000698  0100               	movlb	0	; () banked
 12270  00069A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12271  00069C  0EEC               	movlw	236
 12272  00069E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12273  0006A0  0E00               	movlw	0
 12274  0006A2  0100               	movlb	0	; () banked
 12275  0006A4  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12276  0006A6  0E03               	movlw	3
 12277  0006A8  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12278  0006AA  ECBF  F01F         	call	_updateServoPosition	;wreg free
 12279                           
 12280                           ;Test.c: 318: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12281  0006AE  0E00               	movlw	0
 12282  0006B0  0100               	movlb	0	; () banked
 12283  0006B2  6FBC               	movwf	actuatorTest@i_1675& (0+255),b
 12284  0006B4                     l7290:
 12285                           
 12286                           ; BSR set to: 0
 12287  0006B4  0E63               	movlw	99
 12288  0006B6  0100               	movlb	0	; () banked
 12289  0006B8  65BC               	cpfsgt	actuatorTest@i_1675& (0+255),b
 12290  0006BA  D001               	goto	l7294
 12291  0006BC  D00C               	goto	l7298
 12292  0006BE                     l7294:
 12293                           
 12294                           ; BSR set to: 0
 12295  0006BE  0E68               	movlw	104
 12296  0006C0  0100               	movlb	0	; () banked
 12297  0006C2  6FAB               	movwf	??_actuatorTest& (0+255),b
 12298  0006C4  0EE4               	movlw	228
 12299  0006C6                     u8487:
 12300  0006C6  2EE8               	decfsz	wreg,f,c
 12301  0006C8  D7FE               	bra	u8487
 12302  0006CA  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12303  0006CC  D7FC               	bra	u8487
 12304  0006CE  F000               	nop	
 12305  0006D0  0100               	movlb	0	; () banked
 12306  0006D2  2BBC               	incf	actuatorTest@i_1675& (0+255),f,b
 12307  0006D4  D7EF               	goto	l7290
 12308  0006D6                     l7298:
 12309                           
 12310                           ; BSR set to: 0
 12311  0006D6  0E00               	movlw	0
 12312  0006D8  0100               	movlb	0	; () banked
 12313  0006DA  6FBD               	movwf	actuatorTest@i_1676& (0+255),b
 12314  0006DC                     l7300:
 12315                           
 12316                           ; BSR set to: 0
 12317  0006DC  0E63               	movlw	99
 12318  0006DE  0100               	movlb	0	; () banked
 12319  0006E0  65BD               	cpfsgt	actuatorTest@i_1676& (0+255),b
 12320  0006E2  D001               	goto	l7304
 12321  0006E4  D00C               	goto	l7308
 12322  0006E6                     l7304:
 12323                           
 12324                           ; BSR set to: 0
 12325  0006E6  0E68               	movlw	104
 12326  0006E8  0100               	movlb	0	; () banked
 12327  0006EA  6FAB               	movwf	??_actuatorTest& (0+255),b
 12328  0006EC  0EE4               	movlw	228
 12329  0006EE                     u8497:
 12330  0006EE  2EE8               	decfsz	wreg,f,c
 12331  0006F0  D7FE               	bra	u8497
 12332  0006F2  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12333  0006F4  D7FC               	bra	u8497
 12334  0006F6  F000               	nop	
 12335  0006F8  0100               	movlb	0	; () banked
 12336  0006FA  2BBD               	incf	actuatorTest@i_1676& (0+255),f,b
 12337  0006FC  D7EF               	goto	l7300
 12338  0006FE                     l7308:
 12339                           
 12340                           ; BSR set to: 0
 12341                           ;Test.c: 320: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12342  0006FE  0E80               	movlw	128
 12343  000700  EC98  F025         	call	_lcdInst
 12344  000704  0EC0               	movlw	192
 12345  000706  EC98  F025         	call	_lcdInst
 12346                           
 12347                           ;Test.c: 321: printf("LEVEL -- 2s     ");
 12348  00070A  0EE8               	movlw	low STR_104
 12349  00070C  0100               	movlb	0	; () banked
 12350  00070E  6F8E               	movwf	printf@f& (0+255),b
 12351  000710  0EFB               	movlw	high STR_104
 12352  000712  0100               	movlb	0	; () banked
 12353  000714  6F8F               	movwf	(printf@f+1)& (0+255),b
 12354  000716  ECB8  F008         	call	_printf	;wreg free
 12355                           
 12356                           ;Test.c: 322: updateServoPosition(1050, 3);
 12357  00071A  0E04               	movlw	4
 12358  00071C  0100               	movlb	0	; () banked
 12359  00071E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12360  000720  0E1A               	movlw	26
 12361  000722  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12362  000724  0E00               	movlw	0
 12363  000726  0100               	movlb	0	; () banked
 12364  000728  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12365  00072A  0E03               	movlw	3
 12366  00072C  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12367  00072E  ECBF  F01F         	call	_updateServoPosition	;wreg free
 12368                           
 12369                           ;Test.c: 323: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12370  000732  0E00               	movlw	0
 12371  000734  0100               	movlb	0	; () banked
 12372  000736  6FBE               	movwf	actuatorTest@i_1678& (0+255),b
 12373  000738                     l7316:
 12374                           
 12375                           ; BSR set to: 0
 12376  000738  0E63               	movlw	99
 12377  00073A  0100               	movlb	0	; () banked
 12378  00073C  65BE               	cpfsgt	actuatorTest@i_1678& (0+255),b
 12379  00073E  D001               	goto	l7320
 12380  000740  D00C               	goto	l7324
 12381  000742                     l7320:
 12382                           
 12383                           ; BSR set to: 0
 12384  000742  0E68               	movlw	104
 12385  000744  0100               	movlb	0	; () banked
 12386  000746  6FAB               	movwf	??_actuatorTest& (0+255),b
 12387  000748  0EE4               	movlw	228
 12388  00074A                     u8507:
 12389  00074A  2EE8               	decfsz	wreg,f,c
 12390  00074C  D7FE               	bra	u8507
 12391  00074E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12392  000750  D7FC               	bra	u8507
 12393  000752  F000               	nop	
 12394  000754  0100               	movlb	0	; () banked
 12395  000756  2BBE               	incf	actuatorTest@i_1678& (0+255),f,b
 12396  000758  D7EF               	goto	l7316
 12397  00075A                     l7324:
 12398                           
 12399                           ; BSR set to: 0
 12400  00075A  0E00               	movlw	0
 12401  00075C  0100               	movlb	0	; () banked
 12402  00075E  6FBF               	movwf	actuatorTest@i_1679& (0+255),b
 12403  000760                     l7326:
 12404                           
 12405                           ; BSR set to: 0
 12406  000760  0E63               	movlw	99
 12407  000762  0100               	movlb	0	; () banked
 12408  000764  65BF               	cpfsgt	actuatorTest@i_1679& (0+255),b
 12409  000766  D001               	goto	l7330
 12410  000768  D00C               	goto	l1171
 12411  00076A                     l7330:
 12412                           
 12413                           ; BSR set to: 0
 12414  00076A  0E68               	movlw	104
 12415  00076C  0100               	movlb	0	; () banked
 12416  00076E  6FAB               	movwf	??_actuatorTest& (0+255),b
 12417  000770  0EE4               	movlw	228
 12418  000772                     u8517:
 12419  000772  2EE8               	decfsz	wreg,f,c
 12420  000774  D7FE               	bra	u8517
 12421  000776  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12422  000778  D7FC               	bra	u8517
 12423  00077A  F000               	nop	
 12424  00077C  0100               	movlb	0	; () banked
 12425  00077E  2BBF               	incf	actuatorTest@i_1679& (0+255),f,b
 12426  000780  D7EF               	goto	l7326
 12427  000782                     l1171:
 12428                           
 12429                           ; BSR set to: 0
 12430                           ;Test.c: 324: TMR3ON = 0;
 12431  000782  90B1               	bcf	4017,0,c	;volatile
 12432                           
 12433                           ;Test.c: 325: (INTCONbits.GIE = 0);
 12434  000784  9EF2               	bcf	intcon,7,c	;volatile
 12435                           
 12436                           ; BSR set to: 0
 12437                           ;Test.c: 330: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12438  000786  0E01               	movlw	1
 12439  000788  EC98  F025         	call	_lcdInst
 12440  00078C  0E68               	movlw	104
 12441  00078E  0100               	movlb	0	; () banked
 12442  000790  6FAB               	movwf	??_actuatorTest& (0+255),b
 12443  000792  0EE4               	movlw	228
 12444  000794                     u8527:
 12445  000794  2EE8               	decfsz	wreg,f,c
 12446  000796  D7FE               	bra	u8527
 12447  000798  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12448  00079A  D7FC               	bra	u8527
 12449  00079C  F000               	nop	
 12450  00079E  0E80               	movlw	128
 12451  0007A0  EC98  F025         	call	_lcdInst
 12452                           
 12453                           ;Test.c: 331: printf("TST: CAM SERVO");
 12454  0007A4  0E96               	movlw	low STR_107
 12455  0007A6  0100               	movlb	0	; () banked
 12456  0007A8  6F8E               	movwf	printf@f& (0+255),b
 12457  0007AA  0EFE               	movlw	high STR_107
 12458  0007AC  0100               	movlb	0	; () banked
 12459  0007AE  6F8F               	movwf	(printf@f+1)& (0+255),b
 12460  0007B0  ECB8  F008         	call	_printf	;wreg free
 12461                           
 12462                           ;Test.c: 332: lcdInst(0b11000000);;
 12463  0007B4  0EC0               	movlw	192
 12464  0007B6  EC98  F025         	call	_lcdInst
 12465                           
 12466                           ;Test.c: 333: printf("CAM UP  |RC0=1");
 12467  0007BA  0E78               	movlw	low STR_108
 12468  0007BC  0100               	movlb	0	; () banked
 12469  0007BE  6F8E               	movwf	printf@f& (0+255),b
 12470  0007C0  0EFE               	movlw	high STR_108
 12471  0007C2  0100               	movlb	0	; () banked
 12472  0007C4  6F8F               	movwf	(printf@f+1)& (0+255),b
 12473  0007C6  ECB8  F008         	call	_printf	;wreg free
 12474                           
 12475                           ;Test.c: 334: LATCbits.LATC0 = 1;
 12476  0007CA  808B               	bsf	3979,0,c	;volatile
 12477                           
 12478                           ;Test.c: 335: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12479  0007CC  0E00               	movlw	0
 12480  0007CE  0100               	movlb	0	; () banked
 12481  0007D0  6FC0               	movwf	actuatorTest@i_1682& (0+255),b
 12482  0007D2                     l7350:
 12483                           
 12484                           ; BSR set to: 0
 12485  0007D2  0E63               	movlw	99
 12486  0007D4  0100               	movlb	0	; () banked
 12487  0007D6  65C0               	cpfsgt	actuatorTest@i_1682& (0+255),b
 12488  0007D8  D001               	goto	l7354
 12489  0007DA  D00C               	goto	l7358
 12490  0007DC                     l7354:
 12491                           
 12492                           ; BSR set to: 0
 12493  0007DC  0E68               	movlw	104
 12494  0007DE  0100               	movlb	0	; () banked
 12495  0007E0  6FAB               	movwf	??_actuatorTest& (0+255),b
 12496  0007E2  0EE4               	movlw	228
 12497  0007E4                     u8537:
 12498  0007E4  2EE8               	decfsz	wreg,f,c
 12499  0007E6  D7FE               	bra	u8537
 12500  0007E8  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12501  0007EA  D7FC               	bra	u8537
 12502  0007EC  F000               	nop	
 12503  0007EE  0100               	movlb	0	; () banked
 12504  0007F0  2BC0               	incf	actuatorTest@i_1682& (0+255),f,b
 12505  0007F2  D7EF               	goto	l7350
 12506  0007F4                     l7358:
 12507                           
 12508                           ; BSR set to: 0
 12509  0007F4  0E00               	movlw	0
 12510  0007F6  0100               	movlb	0	; () banked
 12511  0007F8  6FC1               	movwf	actuatorTest@i_1683& (0+255),b
 12512  0007FA                     l7360:
 12513                           
 12514                           ; BSR set to: 0
 12515  0007FA  0E63               	movlw	99
 12516  0007FC  0100               	movlb	0	; () banked
 12517  0007FE  65C1               	cpfsgt	actuatorTest@i_1683& (0+255),b
 12518  000800  D001               	goto	l7364
 12519  000802  D00C               	goto	l7368
 12520  000804                     l7364:
 12521                           
 12522                           ; BSR set to: 0
 12523  000804  0E68               	movlw	104
 12524  000806  0100               	movlb	0	; () banked
 12525  000808  6FAB               	movwf	??_actuatorTest& (0+255),b
 12526  00080A  0EE4               	movlw	228
 12527  00080C                     u8547:
 12528  00080C  2EE8               	decfsz	wreg,f,c
 12529  00080E  D7FE               	bra	u8547
 12530  000810  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12531  000812  D7FC               	bra	u8547
 12532  000814  F000               	nop	
 12533  000816  0100               	movlb	0	; () banked
 12534  000818  2BC1               	incf	actuatorTest@i_1683& (0+255),f,b
 12535  00081A  D7EF               	goto	l7360
 12536  00081C                     l7368:
 12537                           
 12538                           ; BSR set to: 0
 12539                           ;Test.c: 336: lcdInst(0b10000000);;lcdInst(0b11000000);;
 12540  00081C  0E80               	movlw	128
 12541  00081E  EC98  F025         	call	_lcdInst
 12542  000822  0EC0               	movlw	192
 12543  000824  EC98  F025         	call	_lcdInst
 12544                           
 12545                           ;Test.c: 337: printf("CAM DWN |RC0=0");
 12546  000828  0E69               	movlw	low STR_109
 12547  00082A  0100               	movlb	0	; () banked
 12548  00082C  6F8E               	movwf	printf@f& (0+255),b
 12549  00082E  0EFE               	movlw	high STR_109
 12550  000830  0100               	movlb	0	; () banked
 12551  000832  6F8F               	movwf	(printf@f+1)& (0+255),b
 12552  000834  ECB8  F008         	call	_printf	;wreg free
 12553                           
 12554                           ;Test.c: 340: for(i=0;i<10000;i++)
 12555  000838  0E00               	movlw	0
 12556  00083A  0100               	movlb	0	; () banked
 12557  00083C  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 12558  00083E  0E00               	movlw	0
 12559  000840  6FC4               	movwf	actuatorTest@i& (0+255),b
 12560  000842                     l7374:
 12561                           
 12562                           ; BSR set to: 0
 12563  000842  0100               	movlb	0	; () banked
 12564  000844  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 12565  000846  D008               	goto	l1176
 12566  000848  0E10               	movlw	16
 12567  00084A  0100               	movlb	0	; () banked
 12568  00084C  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 12569  00084E  0E27               	movlw	39
 12570  000850  0100               	movlb	0	; () banked
 12571  000852  59C5               	subwfb	(actuatorTest@i+1)& (0+255),w,b
 12572  000854  B0D8               	btfsc	status,0,c
 12573  000856  D00D               	goto	l7384
 12574  000858                     l1176:
 12575                           
 12576                           ; BSR set to: 0
 12577                           ;Test.c: 341: {
 12578                           ;Test.c: 342: LATCbits.LATC0 = 1;
 12579  000858  808B               	bsf	3979,0,c	;volatile
 12580                           
 12581                           ; BSR set to: 0
 12582                           ;Test.c: 343: _delay((unsigned long)((10)*(32000000/4000000.0)));
 12583  00085A  0E1A               	movlw	26
 12584  00085C                     u8557:
 12585  00085C  2EE8               	decfsz	wreg,f,c
 12586  00085E  D7FE               	bra	u8557
 12587  000860  D000               	nop2	
 12588                           
 12589                           ;Test.c: 344: LATCbits.LATC0 = 0;
 12590  000862  908B               	bcf	3979,0,c	;volatile
 12591                           
 12592                           ;Test.c: 345: _delay((unsigned long)((90)*(32000000/4000000.0)));
 12593  000864  0EF0               	movlw	240
 12594  000866                     u8567:
 12595  000866  2EE8               	decfsz	wreg,f,c
 12596  000868  D7FE               	bra	u8567
 12597  00086A  0100               	movlb	0	; () banked
 12598  00086C  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 12599  00086E  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 12600  000870  D7E8               	goto	l7374
 12601  000872                     l7384:
 12602                           
 12603                           ; BSR set to: 0
 12604                           ;Test.c: 346: }
 12605                           ;Test.c: 348: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12606  000872  0E00               	movlw	0
 12607  000874  0100               	movlb	0	; () banked
 12608  000876  6FC2               	movwf	actuatorTest@i_1685& (0+255),b
 12609  000878                     l7386:
 12610                           
 12611                           ; BSR set to: 0
 12612  000878  0E63               	movlw	99
 12613  00087A  0100               	movlb	0	; () banked
 12614  00087C  65C2               	cpfsgt	actuatorTest@i_1685& (0+255),b
 12615  00087E  D001               	goto	l7390
 12616  000880  D00C               	goto	l7394
 12617  000882                     l7390:
 12618                           
 12619                           ; BSR set to: 0
 12620  000882  0E68               	movlw	104
 12621  000884  0100               	movlb	0	; () banked
 12622  000886  6FAB               	movwf	??_actuatorTest& (0+255),b
 12623  000888  0EE4               	movlw	228
 12624  00088A                     u8577:
 12625  00088A  2EE8               	decfsz	wreg,f,c
 12626  00088C  D7FE               	bra	u8577
 12627  00088E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12628  000890  D7FC               	bra	u8577
 12629  000892  F000               	nop	
 12630  000894  0100               	movlb	0	; () banked
 12631  000896  2BC2               	incf	actuatorTest@i_1685& (0+255),f,b
 12632  000898  D7EF               	goto	l7386
 12633  00089A                     l7394:
 12634                           
 12635                           ; BSR set to: 0
 12636  00089A  0E00               	movlw	0
 12637  00089C  0100               	movlb	0	; () banked
 12638  00089E  6FC3               	movwf	actuatorTest@i_1686& (0+255),b
 12639  0008A0                     l7396:
 12640                           
 12641                           ; BSR set to: 0
 12642  0008A0  0E63               	movlw	99
 12643  0008A2  0100               	movlb	0	; () banked
 12644  0008A4  65C3               	cpfsgt	actuatorTest@i_1686& (0+255),b
 12645  0008A6  D001               	goto	l7400
 12646  0008A8  D00C               	goto	l7404
 12647  0008AA                     l7400:
 12648                           
 12649                           ; BSR set to: 0
 12650  0008AA  0E68               	movlw	104
 12651  0008AC  0100               	movlb	0	; () banked
 12652  0008AE  6FAB               	movwf	??_actuatorTest& (0+255),b
 12653  0008B0  0EE4               	movlw	228
 12654  0008B2                     u8587:
 12655  0008B2  2EE8               	decfsz	wreg,f,c
 12656  0008B4  D7FE               	bra	u8587
 12657  0008B6  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 12658  0008B8  D7FC               	bra	u8587
 12659  0008BA  F000               	nop	
 12660  0008BC  0100               	movlb	0	; () banked
 12661  0008BE  2BC3               	incf	actuatorTest@i_1686& (0+255),f,b
 12662  0008C0  D7EF               	goto	l7396
 12663  0008C2                     l7404:
 12664                           
 12665                           ; BSR set to: 0
 12666                           ;Test.c: 349: machine_state = Testing_state;
 12667  0008C2  0E03               	movlw	3
 12668  0008C4  0100               	movlb	0	; () banked
 12669  0008C6  6FFC               	movwf	_machine_state& (0+255),b
 12670                           
 12671                           ; BSR set to: 0
 12672  0008C8  0012               	return		;funcret
 12673  0008CA                     __end_of_actuatorTest:
 12674                           	opt stack 0
 12675                           tblptru	equ	0xFF8
 12676                           tblptrh	equ	0xFF7
 12677                           tblptrl	equ	0xFF6
 12678                           tablat	equ	0xFF5
 12679                           prodh	equ	0xFF4
 12680                           prodl	equ	0xFF3
 12681                           intcon	equ	0xFF2
 12682                           intcon2	equ	0xFF1
 12683                           intcon3	equ	0xFF0
 12684                           postinc0	equ	0xFEE
 12685                           wreg	equ	0xFE8
 12686                           postdec1	equ	0xFE5
 12687                           fsr1l	equ	0xFE1
 12688                           indf2	equ	0xFDF
 12689                           postinc2	equ	0xFDE
 12690                           postdec2	equ	0xFDD
 12691                           fsr2h	equ	0xFDA
 12692                           fsr2l	equ	0xFD9
 12693                           status	equ	0xFD8
 12694                           
 12695 ;; *************** function _SpeedTest *****************
 12696 ;; Defined at:
 12697 ;;		line 528 in file "Test.c"
 12698 ;; Parameters:    Size  Location     Type
 12699 ;;		None
 12700 ;; Auto vars:     Size  Location     Type
 12701 ;;		None
 12702 ;; Return value:  Size  Location     Type
 12703 ;;                  1    wreg      void 
 12704 ;; Registers used:
 12705 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12706 ;; Tracked objects:
 12707 ;;		On entry : 0/0
 12708 ;;		On exit  : 0/0
 12709 ;;		Unchanged: 0/0
 12710 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12711 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12712 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12713 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12714 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12715 ;;Total ram usage:        1 bytes
 12716 ;; Hardware stack levels used:    1
 12717 ;; Hardware stack levels required when called:   10
 12718 ;; This function calls:
 12719 ;;		_lcdInst
 12720 ;;		_printf
 12721 ;; This function is called by:
 12722 ;;		_Test
 12723 ;; This function uses a non-reentrant model
 12724 ;;
 12725                           
 12726                           	psect	text42
 12727  003DFE                     __ptext42:
 12728                           	opt stack 0
 12729  003DFE                     _SpeedTest:
 12730                           	opt stack 19
 12731                           
 12732                           ;Test.c: 530: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12733                           
 12734                           ; BSR set to: 0
 12735                           ;incstack = 0
 12736  003DFE  0E01               	movlw	1
 12737  003E00  EC98  F025         	call	_lcdInst
 12738  003E04  0E68               	movlw	104
 12739  003E06  0100               	movlb	0	; () banked
 12740  003E08  6FAB               	movwf	??_SpeedTest& (0+255),b
 12741  003E0A  0EE4               	movlw	228
 12742  003E0C                     u8597:
 12743  003E0C  2EE8               	decfsz	wreg,f,c
 12744  003E0E  D7FE               	bra	u8597
 12745  003E10  2FAB               	decfsz	??_SpeedTest& (0+255),f,b
 12746  003E12  D7FC               	bra	u8597
 12747  003E14  F000               	nop	
 12748  003E16  0E80               	movlw	128
 12749  003E18  EC98  F025         	call	_lcdInst
 12750                           
 12751                           ;Test.c: 531: printf("S: D WILL RETURN ");
 12752  003E1C  0E6D               	movlw	low STR_116
 12753  003E1E  0100               	movlb	0	; () banked
 12754  003E20  6F8E               	movwf	printf@f& (0+255),b
 12755  003E22  0EFB               	movlw	high STR_116
 12756  003E24  0100               	movlb	0	; () banked
 12757  003E26  6F8F               	movwf	(printf@f+1)& (0+255),b
 12758  003E28  ECB8  F008         	call	_printf	;wreg free
 12759                           
 12760                           ;Test.c: 532: lcdInst(0b11000000);;
 12761  003E2C  0EC0               	movlw	192
 12762  003E2E  EC98  F025         	call	_lcdInst
 12763                           
 12764                           ;Test.c: 533: printf("OTHER SETS RA5   ");
 12765  003E32  0E5B               	movlw	low STR_112
 12766  003E34  0100               	movlb	0	; () banked
 12767  003E36  6F8E               	movwf	printf@f& (0+255),b
 12768  003E38  0EFB               	movlw	high STR_112
 12769  003E3A  0100               	movlb	0	; () banked
 12770  003E3C  6F8F               	movwf	(printf@f+1)& (0+255),b
 12771  003E3E  ECB8  F008         	call	_printf	;wreg free
 12772  003E42                     l1259:
 12773  003E42  A281               	btfss	3969,1,c	;volatile
 12774  003E44  D7FE               	goto	l1259
 12775                           
 12776                           ;Test.c: 538: }
 12777                           ;Test.c: 539: if(PORTB >> 4 == 0b1111){
 12778  003E46  3881               	swapf	3969,w,c	;volatile
 12779  003E48  0B0F               	andlw	15
 12780  003E4A  0A0F               	xorlw	15
 12781  003E4C  B4D8               	btfsc	status,2,c
 12782  003E4E  0012               	return	
 12783  003E50  D014               	goto	l7446
 12784  003E52                     l1266:
 12785                           
 12786                           ;Test.c: 544: LATAbits.LATA5 = 1;
 12787  003E52  8A89               	bsf	3977,5,c	;volatile
 12788                           
 12789                           ;Test.c: 545: _delay((unsigned long)((5)*(32000000/4000.0)));
 12790  003E54  0E34               	movlw	52
 12791  003E56  0100               	movlb	0	; () banked
 12792  003E58  6FAB               	movwf	??_SpeedTest& (0+255),b
 12793  003E5A  0EF1               	movlw	241
 12794  003E5C                     u8607:
 12795  003E5C  2EE8               	decfsz	wreg,f,c
 12796  003E5E  D7FE               	bra	u8607
 12797  003E60  2FAB               	decfsz	??_SpeedTest& (0+255),f,b
 12798  003E62  D7FC               	bra	u8607
 12799  003E64  D000               	nop2	
 12800                           
 12801                           ;Test.c: 546: LATAbits.LATA5 = 0;
 12802  003E66  9A89               	bcf	3977,5,c	;volatile
 12803                           
 12804                           ;Test.c: 547: _delay((unsigned long)((5)*(32000000/4000.0)));
 12805  003E68  0E34               	movlw	52
 12806  003E6A  0100               	movlb	0	; () banked
 12807  003E6C  6FAB               	movwf	??_SpeedTest& (0+255),b
 12808  003E6E  0EF1               	movlw	241
 12809  003E70                     u8617:
 12810  003E70  2EE8               	decfsz	wreg,f,c
 12811  003E72  D7FE               	bra	u8617
 12812  003E74  2FAB               	decfsz	??_SpeedTest& (0+255),f,b
 12813  003E76  D7FC               	bra	u8617
 12814  003E78  D000               	nop2	
 12815  003E7A                     l7446:
 12816  003E7A  B281               	btfsc	3969,1,c	;volatile
 12817  003E7C  D7EA               	goto	l1266
 12818                           
 12819                           ;Test.c: 550: }
 12820                           ;Test.c: 551: LATAbits.LATA5 = 0;
 12821  003E7E  9A89               	bcf	3977,5,c	;volatile
 12822  003E80  D7E0               	goto	l1259
 12823  003E82                     __end_of_SpeedTest:
 12824                           	opt stack 0
 12825                           tblptru	equ	0xFF8
 12826                           tblptrh	equ	0xFF7
 12827                           tblptrl	equ	0xFF6
 12828                           tablat	equ	0xFF5
 12829                           prodh	equ	0xFF4
 12830                           prodl	equ	0xFF3
 12831                           intcon	equ	0xFF2
 12832                           intcon2	equ	0xFF1
 12833                           intcon3	equ	0xFF0
 12834                           postinc0	equ	0xFEE
 12835                           wreg	equ	0xFE8
 12836                           postdec1	equ	0xFE5
 12837                           fsr1l	equ	0xFE1
 12838                           indf2	equ	0xFDF
 12839                           postinc2	equ	0xFDE
 12840                           postdec2	equ	0xFDD
 12841                           fsr2h	equ	0xFDA
 12842                           fsr2l	equ	0xFD9
 12843                           status	equ	0xFD8
 12844                           
 12845 ;; *************** function _PusherTest *****************
 12846 ;; Defined at:
 12847 ;;		line 467 in file "Test.c"
 12848 ;; Parameters:    Size  Location     Type
 12849 ;;		None
 12850 ;; Auto vars:     Size  Location     Type
 12851 ;;  i               2   46[BANK0 ] int 
 12852 ;;  i               2   44[BANK0 ] int 
 12853 ;; Return value:  Size  Location     Type
 12854 ;;                  1    wreg      void 
 12855 ;; Registers used:
 12856 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12857 ;; Tracked objects:
 12858 ;;		On entry : 0/0
 12859 ;;		On exit  : 0/0
 12860 ;;		Unchanged: 0/0
 12861 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12862 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12863 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12864 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12865 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12866 ;;Total ram usage:        5 bytes
 12867 ;; Hardware stack levels used:    1
 12868 ;; Hardware stack levels required when called:   10
 12869 ;; This function calls:
 12870 ;;		_lcdInst
 12871 ;;		_printf
 12872 ;; This function is called by:
 12873 ;;		_Test
 12874 ;; This function uses a non-reentrant model
 12875 ;;
 12876                           
 12877                           	psect	text43
 12878  0037D4                     __ptext43:
 12879                           	opt stack 0
 12880  0037D4                     _PusherTest:
 12881                           	opt stack 19
 12882                           
 12883                           ;Test.c: 468: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12884                           
 12885                           ;incstack = 0
 12886  0037D4  0E01               	movlw	1
 12887  0037D6  EC98  F025         	call	_lcdInst
 12888  0037DA  0E68               	movlw	104
 12889  0037DC  0100               	movlb	0	; () banked
 12890  0037DE  6FAB               	movwf	??_PusherTest& (0+255),b
 12891  0037E0  0EE4               	movlw	228
 12892  0037E2                     u8627:
 12893  0037E2  2EE8               	decfsz	wreg,f,c
 12894  0037E4  D7FE               	bra	u8627
 12895  0037E6  2FAB               	decfsz	??_PusherTest& (0+255),f,b
 12896  0037E8  D7FC               	bra	u8627
 12897  0037EA  F000               	nop	
 12898  0037EC  0E80               	movlw	128
 12899  0037EE  EC98  F025         	call	_lcdInst
 12900                           
 12901                           ;Test.c: 469: printf("PUSHER TST");
 12902  0037F2  0E71               	movlw	low STR_113
 12903  0037F4  0100               	movlb	0	; () banked
 12904  0037F6  6F8E               	movwf	printf@f& (0+255),b
 12905  0037F8  0EFF               	movlw	high STR_113
 12906  0037FA  0100               	movlb	0	; () banked
 12907  0037FC  6F8F               	movwf	(printf@f+1)& (0+255),b
 12908  0037FE  ECB8  F008         	call	_printf	;wreg free
 12909  003802                     l1224:
 12910  003802  A281               	btfss	3969,1,c	;volatile
 12911  003804  D7FE               	goto	l1224
 12912                           
 12913                           ;Test.c: 475: }
 12914                           ;Test.c: 476: if(PORTB >> 4 == 0b1111){
 12915  003806  3881               	swapf	3969,w,c	;volatile
 12916  003808  0B0F               	andlw	15
 12917  00380A  0A0F               	xorlw	15
 12918  00380C  B4D8               	btfsc	status,2,c
 12919  00380E  0012               	return	
 12920                           
 12921                           ;Test.c: 481: else if(PORTB >> 4 == 0b0101){
 12922                           
 12923                           ;Test.c: 478: }
 12924                           
 12925                           ;Test.c: 477: break;
 12926  003810  3881               	swapf	3969,w,c	;volatile
 12927  003812  0B0F               	andlw	15
 12928  003814  0A05               	xorlw	5
 12929  003816  A4D8               	btfss	status,2,c
 12930  003818  D01D               	goto	l7476
 12931                           
 12932                           ;Test.c: 482: for(int i = 0; i<3000; i++){
 12933  00381A  0E00               	movlw	0
 12934  00381C  0100               	movlb	0	; () banked
 12935  00381E  6FAD               	movwf	(PusherTest@i+1)& (0+255),b
 12936  003820  0E00               	movlw	0
 12937  003822  6FAC               	movwf	PusherTest@i& (0+255),b
 12938  003824                     l7466:
 12939                           
 12940                           ; BSR set to: 0
 12941  003824  0100               	movlb	0	; () banked
 12942  003826  BFAD               	btfsc	(PusherTest@i+1)& (0+255),7,b
 12943  003828  D008               	goto	l1231
 12944  00382A  0EB8               	movlw	184
 12945  00382C  0100               	movlb	0	; () banked
 12946  00382E  5DAC               	subwf	PusherTest@i& (0+255),w,b
 12947  003830  0E0B               	movlw	11
 12948  003832  0100               	movlb	0	; () banked
 12949  003834  59AD               	subwfb	(PusherTest@i+1)& (0+255),w,b
 12950  003836  B0D8               	btfsc	status,0,c
 12951  003838  D02F               	goto	l1237
 12952  00383A                     l1231:
 12953                           
 12954                           ; BSR set to: 0
 12955                           ;Test.c: 483: LATAbits.LATA4 = 1;
 12956  00383A  8889               	bsf	3977,4,c	;volatile
 12957                           
 12958                           ; BSR set to: 0
 12959                           ;Test.c: 484: _delay((unsigned long)((75)*(32000000/4000000.0)));
 12960  00383C  0EC8               	movlw	200
 12961  00383E                     u8637:
 12962  00383E  2EE8               	decfsz	wreg,f,c
 12963  003840  D7FE               	bra	u8637
 12964                           
 12965                           ;Test.c: 485: LATAbits.LATA4 = 0;
 12966  003842  9889               	bcf	3977,4,c	;volatile
 12967                           
 12968                           ;Test.c: 486: _delay((unsigned long)((25)*(32000000/4000000.0)));
 12969  003844  0E42               	movlw	66
 12970  003846                     u8647:
 12971  003846  2EE8               	decfsz	wreg,f,c
 12972  003848  D7FE               	bra	u8647
 12973  00384A  D000               	nop2	
 12974  00384C  0100               	movlb	0	; () banked
 12975  00384E  4BAC               	infsnz	PusherTest@i& (0+255),f,b
 12976  003850  2BAD               	incf	(PusherTest@i+1)& (0+255),f,b
 12977  003852  D7E8               	goto	l7466
 12978  003854                     l7476:
 12979                           
 12980                           ;Test.c: 489: else if (PORTB >> 4 == 0b110){
 12981  003854  3881               	swapf	3969,w,c	;volatile
 12982  003856  0B0F               	andlw	15
 12983  003858  0A06               	xorlw	6
 12984  00385A  A4D8               	btfss	status,2,c
 12985  00385C  D01D               	goto	l1237
 12986                           
 12987                           ;Test.c: 490: for(int i = 0; i<3000; i++){
 12988  00385E  0E00               	movlw	0
 12989  003860  0100               	movlb	0	; () banked
 12990  003862  6FAF               	movwf	(PusherTest@i_1699+1)& (0+255),b
 12991  003864  0E00               	movlw	0
 12992  003866  6FAE               	movwf	PusherTest@i_1699& (0+255),b
 12993  003868                     l7480:
 12994                           
 12995                           ; BSR set to: 0
 12996  003868  0100               	movlb	0	; () banked
 12997  00386A  BFAF               	btfsc	(PusherTest@i_1699+1)& (0+255),7,b
 12998  00386C  D008               	goto	l1235
 12999  00386E  0EB8               	movlw	184
 13000  003870  0100               	movlb	0	; () banked
 13001  003872  5DAE               	subwf	PusherTest@i_1699& (0+255),w,b
 13002  003874  0E0B               	movlw	11
 13003  003876  0100               	movlb	0	; () banked
 13004  003878  59AF               	subwfb	(PusherTest@i_1699+1)& (0+255),w,b
 13005  00387A  B0D8               	btfsc	status,0,c
 13006  00387C  D00D               	goto	l1237
 13007  00387E                     l1235:
 13008                           
 13009                           ; BSR set to: 0
 13010                           ;Test.c: 491: LATAbits.LATA4 = 1;
 13011  00387E  8889               	bsf	3977,4,c	;volatile
 13012                           
 13013                           ; BSR set to: 0
 13014                           ;Test.c: 492: _delay((unsigned long)((58)*(32000000/4000000.0)));
 13015  003880  0E9A               	movlw	154
 13016  003882                     u8657:
 13017  003882  2EE8               	decfsz	wreg,f,c
 13018  003884  D7FE               	bra	u8657
 13019  003886  D000               	nop2	
 13020                           
 13021                           ;Test.c: 493: LATAbits.LATA4 = 0;
 13022  003888  9889               	bcf	3977,4,c	;volatile
 13023                           
 13024                           ;Test.c: 494: _delay((unsigned long)((42)*(32000000/4000000.0)));
 13025  00388A  0E70               	movlw	112
 13026  00388C                     u8667:
 13027  00388C  2EE8               	decfsz	wreg,f,c
 13028  00388E  D7FE               	bra	u8667
 13029  003890  0100               	movlb	0	; () banked
 13030  003892  4BAE               	infsnz	PusherTest@i_1699& (0+255),f,b
 13031  003894  2BAF               	incf	(PusherTest@i_1699+1)& (0+255),f,b
 13032  003896  D7E8               	goto	l7480
 13033  003898                     l1237:
 13034  003898  A281               	btfss	3969,1,c	;volatile
 13035  00389A  D7B3               	goto	l1224
 13036  00389C  D7FD               	goto	l1237
 13037  00389E                     __end_of_PusherTest:
 13038                           	opt stack 0
 13039                           tblptru	equ	0xFF8
 13040                           tblptrh	equ	0xFF7
 13041                           tblptrl	equ	0xFF6
 13042                           tablat	equ	0xFF5
 13043                           prodh	equ	0xFF4
 13044                           prodl	equ	0xFF3
 13045                           intcon	equ	0xFF2
 13046                           intcon2	equ	0xFF1
 13047                           intcon3	equ	0xFF0
 13048                           postinc0	equ	0xFEE
 13049                           wreg	equ	0xFE8
 13050                           postdec1	equ	0xFE5
 13051                           fsr1l	equ	0xFE1
 13052                           indf2	equ	0xFDF
 13053                           postinc2	equ	0xFDE
 13054                           postdec2	equ	0xFDD
 13055                           fsr2h	equ	0xFDA
 13056                           fsr2l	equ	0xFD9
 13057                           status	equ	0xFD8
 13058                           
 13059 ;; *************** function _PortTests *****************
 13060 ;; Defined at:
 13061 ;;		line 409 in file "Test.c"
 13062 ;; Parameters:    Size  Location     Type
 13063 ;;		None
 13064 ;; Auto vars:     Size  Location     Type
 13065 ;;		None
 13066 ;; Return value:  Size  Location     Type
 13067 ;;                  1    wreg      void 
 13068 ;; Registers used:
 13069 ;;		wreg, status,2, status,0
 13070 ;; Tracked objects:
 13071 ;;		On entry : 0/0
 13072 ;;		On exit  : 0/0
 13073 ;;		Unchanged: 0/0
 13074 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13075 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13076 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13077 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13078 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13079 ;;Total ram usage:        2 bytes
 13080 ;; Hardware stack levels used:    1
 13081 ;; Hardware stack levels required when called:    7
 13082 ;; This function calls:
 13083 ;;		Nothing
 13084 ;; This function is called by:
 13085 ;;		_Test
 13086 ;; This function uses a non-reentrant model
 13087 ;;
 13088                           
 13089                           	psect	text44
 13090  003E82                     __ptext44:
 13091                           	opt stack 0
 13092  003E82                     _PortTests:
 13093                           	opt stack 22
 13094  003E82                     l1189:
 13095  003E82  A281               	btfss	3969,1,c	;volatile
 13096  003E84  D7FE               	goto	l1189
 13097                           
 13098                           ;Test.c: 413: var = PORTB >> 4;
 13099  003E86  CF81 F080          	movff	3969,??_PortTests	;volatile
 13100  003E8A  0100               	movlb	0	; () banked
 13101  003E8C  3B80               	swapf	??_PortTests& (0+255),f,b
 13102  003E8E  0E0F               	movlw	15
 13103  003E90  1780               	andwf	??_PortTests& (0+255),f,b
 13104  003E92  0100               	movlb	0	; () banked
 13105  003E94  5180               	movf	??_PortTests& (0+255),w,b
 13106  003E96  0100               	movlb	0	; () banked
 13107  003E98  6FFA               	movwf	_var& (0+255),b
 13108  003E9A  6BFB               	clrf	(_var+1)& (0+255),b
 13109                           
 13110                           ;Test.c: 414: switch(var){
 13111  003E9C  D00C               	goto	l7494
 13112  003E9E                     l1193:
 13113                           
 13114                           ; BSR set to: 0
 13115                           ;Test.c: 416: LATEbits.LATE0 = 1;
 13116  003E9E  808D               	bsf	3981,0,c	;volatile
 13117                           
 13118                           ;Test.c: 417: break;
 13119  003EA0  D027               	goto	l1201
 13120  003EA2                     l1195:
 13121                           
 13122                           ; BSR set to: 0
 13123                           ;Test.c: 419: LATEbits.LATE1 = 1;
 13124  003EA2  828D               	bsf	3981,1,c	;volatile
 13125                           
 13126                           ;Test.c: 420: break;
 13127  003EA4  D025               	goto	l1201
 13128  003EA6                     l1196:
 13129                           
 13130                           ; BSR set to: 0
 13131                           ;Test.c: 422: LATDbits.LATD0 = 1;
 13132  003EA6  808C               	bsf	3980,0,c	;volatile
 13133                           
 13134                           ;Test.c: 423: break;
 13135  003EA8  D023               	goto	l1201
 13136  003EAA                     l1197:
 13137                           
 13138                           ; BSR set to: 0
 13139                           ;Test.c: 425: LATAbits.LATA3 = 1;
 13140  003EAA  8689               	bsf	3977,3,c	;volatile
 13141                           
 13142                           ;Test.c: 426: break;
 13143  003EAC  D021               	goto	l1201
 13144  003EAE                     l1198:
 13145                           
 13146                           ; BSR set to: 0
 13147                           ;Test.c: 428: LATAbits.LATA4 = 1;
 13148  003EAE  8889               	bsf	3977,4,c	;volatile
 13149                           
 13150                           ;Test.c: 429: break;
 13151  003EB0  D01F               	goto	l1201
 13152  003EB2                     l1199:
 13153                           
 13154                           ; BSR set to: 0
 13155                           ;Test.c: 431: LATAbits.LATA5 = 1;
 13156  003EB2  8A89               	bsf	3977,5,c	;volatile
 13157                           
 13158                           ; BSR set to: 0
 13159                           ;Test.c: 435: }
 13160                           
 13161                           ; BSR set to: 0
 13162                           ;Test.c: 434: break;
 13163                           
 13164                           ;Test.c: 433: default:
 13165                           
 13166                           ;Test.c: 432: break;
 13167  003EB4  D01D               	goto	l1201
 13168  003EB6                     l7494:
 13169                           
 13170                           ; BSR set to: 0
 13171  003EB6  C0FA  F080         	movff	_var,??_PortTests
 13172  003EBA  C0FB  F081         	movff	_var+1,??_PortTests+1
 13173                           
 13174                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 13175                           ; Switch size 1, requested type "space"
 13176                           ; Number of cases is 1, Range of values is 0 to 0
 13177                           ; switch strategies available:
 13178                           ; Name         Instructions Cycles
 13179                           ; simple_byte            4     3 (average)
 13180                           ;	Chosen strategy is simple_byte
 13181  003EBE  0100               	movlb	0	; () banked
 13182  003EC0  5181               	movf	(??_PortTests+1)& (0+255),w,b
 13183  003EC2  0A00               	xorlw	0	; case 0
 13184  003EC4  A4D8               	btfss	status,2,c
 13185  003EC6  D014               	goto	l1201
 13186                           
 13187                           ; BSR set to: 0
 13188                           ; Switch size 1, requested type "space"
 13189                           ; Number of cases is 6, Range of values is 0 to 5
 13190                           ; switch strategies available:
 13191                           ; Name         Instructions Cycles
 13192                           ; simple_byte           19    10 (average)
 13193                           ;	Chosen strategy is simple_byte
 13194  003EC8  0100               	movlb	0	; () banked
 13195  003ECA  5180               	movf	??_PortTests& (0+255),w,b
 13196  003ECC  0A00               	xorlw	0	; case 0
 13197  003ECE  B4D8               	btfsc	status,2,c
 13198  003ED0  D7E6               	goto	l1193
 13199  003ED2  0A01               	xorlw	1	; case 1
 13200  003ED4  B4D8               	btfsc	status,2,c
 13201  003ED6  D7E5               	goto	l1195
 13202  003ED8  0A03               	xorlw	3	; case 2
 13203  003EDA  B4D8               	btfsc	status,2,c
 13204  003EDC  D7E4               	goto	l1196
 13205  003EDE  0A01               	xorlw	1	; case 3
 13206  003EE0  B4D8               	btfsc	status,2,c
 13207  003EE2  D7E3               	goto	l1197
 13208  003EE4  0A07               	xorlw	7	; case 4
 13209  003EE6  B4D8               	btfsc	status,2,c
 13210  003EE8  D7E2               	goto	l1198
 13211  003EEA  0A01               	xorlw	1	; case 5
 13212  003EEC  B4D8               	btfsc	status,2,c
 13213  003EEE  D7E1               	goto	l1199
 13214  003EF0                     l1201:
 13215  003EF0  B281               	btfsc	3969,1,c	;volatile
 13216  003EF2  D7FE               	goto	l1201
 13217                           
 13218                           ;Test.c: 437: __nop();
 13219  003EF4  F000               	nop	
 13220                           
 13221                           ;Test.c: 438: __nop();
 13222  003EF6  F000               	nop	
 13223                           
 13224                           ;Test.c: 439: LATA = 0x00;
 13225  003EF8  0E00               	movlw	0
 13226  003EFA  6E89               	movwf	3977,c	;volatile
 13227                           
 13228                           ;Test.c: 440: LATE = 0x00;
 13229  003EFC  0E00               	movlw	0
 13230  003EFE  6E8D               	movwf	3981,c	;volatile
 13231                           
 13232                           ;Test.c: 441: LATD = 0x00; }
 13233  003F00  0E00               	movlw	0
 13234  003F02  6E8C               	movwf	3980,c	;volatile
 13235  003F04  D7BE               	goto	l1189
 13236  003F06                     __end_of_PortTests:
 13237                           	opt stack 0
 13238                           tblptru	equ	0xFF8
 13239                           tblptrh	equ	0xFF7
 13240                           tblptrl	equ	0xFF6
 13241                           tablat	equ	0xFF5
 13242                           prodh	equ	0xFF4
 13243                           prodl	equ	0xFF3
 13244                           intcon	equ	0xFF2
 13245                           intcon2	equ	0xFF1
 13246                           intcon3	equ	0xFF0
 13247                           postinc0	equ	0xFEE
 13248                           wreg	equ	0xFE8
 13249                           postdec1	equ	0xFE5
 13250                           fsr1l	equ	0xFE1
 13251                           indf2	equ	0xFDF
 13252                           postinc2	equ	0xFDE
 13253                           postdec2	equ	0xFDD
 13254                           fsr2h	equ	0xFDA
 13255                           fsr2l	equ	0xFD9
 13256                           status	equ	0xFD8
 13257                           
 13258 ;; *************** function _PortTestA5 *****************
 13259 ;; Defined at:
 13260 ;;		line 444 in file "Test.c"
 13261 ;; Parameters:    Size  Location     Type
 13262 ;;		None
 13263 ;; Auto vars:     Size  Location     Type
 13264 ;;		None
 13265 ;; Return value:  Size  Location     Type
 13266 ;;                  1    wreg      void 
 13267 ;; Registers used:
 13268 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13269 ;; Tracked objects:
 13270 ;;		On entry : 0/0
 13271 ;;		On exit  : 0/0
 13272 ;;		Unchanged: 0/0
 13273 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13274 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13275 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13276 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13277 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13278 ;;Total ram usage:        1 bytes
 13279 ;; Hardware stack levels used:    1
 13280 ;; Hardware stack levels required when called:   10
 13281 ;; This function calls:
 13282 ;;		_lcdInst
 13283 ;;		_printf
 13284 ;; This function is called by:
 13285 ;;		_Test
 13286 ;; This function uses a non-reentrant model
 13287 ;;
 13288                           
 13289                           	psect	text45
 13290  0042CC                     __ptext45:
 13291                           	opt stack 0
 13292  0042CC                     _PortTestA5:
 13293                           	opt stack 19
 13294                           
 13295                           ;Test.c: 445: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13296                           
 13297                           ;incstack = 0
 13298  0042CC  0E01               	movlw	1
 13299  0042CE  EC98  F025         	call	_lcdInst
 13300  0042D2  0E68               	movlw	104
 13301  0042D4  0100               	movlb	0	; () banked
 13302  0042D6  6FAB               	movwf	??_PortTestA5& (0+255),b
 13303  0042D8  0EE4               	movlw	228
 13304  0042DA                     u8677:
 13305  0042DA  2EE8               	decfsz	wreg,f,c
 13306  0042DC  D7FE               	bra	u8677
 13307  0042DE  2FAB               	decfsz	??_PortTestA5& (0+255),f,b
 13308  0042E0  D7FC               	bra	u8677
 13309  0042E2  F000               	nop	
 13310  0042E4  0E80               	movlw	128
 13311  0042E6  EC98  F025         	call	_lcdInst
 13312                           
 13313                           ;Test.c: 446: printf("D WILL RETURN    ");
 13314  0042EA  0E49               	movlw	low STR_111
 13315  0042EC  0100               	movlb	0	; () banked
 13316  0042EE  6F8E               	movwf	printf@f& (0+255),b
 13317  0042F0  0EFB               	movlw	high STR_111
 13318  0042F2  0100               	movlb	0	; () banked
 13319  0042F4  6F8F               	movwf	(printf@f+1)& (0+255),b
 13320  0042F6  ECB8  F008         	call	_printf	;wreg free
 13321                           
 13322                           ;Test.c: 447: lcdInst(0b11000000);;
 13323  0042FA  0EC0               	movlw	192
 13324  0042FC  EC98  F025         	call	_lcdInst
 13325                           
 13326                           ;Test.c: 448: printf("OTHER SETS RA5   ");
 13327  004300  0E5B               	movlw	low STR_112
 13328  004302  0100               	movlb	0	; () banked
 13329  004304  6F8E               	movwf	printf@f& (0+255),b
 13330  004306  0EFB               	movlw	high STR_112
 13331  004308  0100               	movlb	0	; () banked
 13332  00430A  6F8F               	movwf	(printf@f+1)& (0+255),b
 13333  00430C  ECB8  F008         	call	_printf	;wreg free
 13334  004310                     l1210:
 13335  004310  A281               	btfss	3969,1,c	;volatile
 13336  004312  D7FE               	goto	l1210
 13337                           
 13338                           ;Test.c: 453: }
 13339                           ;Test.c: 454: if(PORTB >> 4 == 0b1111){
 13340  004314  3881               	swapf	3969,w,c	;volatile
 13341  004316  0B0F               	andlw	15
 13342  004318  0A0F               	xorlw	15
 13343  00431A  B4D8               	btfsc	status,2,c
 13344  00431C  0012               	return	
 13345                           
 13346                           ;Test.c: 457: else{
 13347                           ;Test.c: 458: LATAbits.LATA5 = 1;
 13348                           
 13349                           ;Test.c: 456: }
 13350                           
 13351                           ;Test.c: 455: break;
 13352  00431E  8A89               	bsf	3977,5,c	;volatile
 13353  004320                     l1216:
 13354  004320  B281               	btfsc	3969,1,c	;volatile
 13355  004322  D7FE               	goto	l1216
 13356                           
 13357                           ;Test.c: 461: }
 13358                           ;Test.c: 462: LATAbits.LATA5 = 0;
 13359  004324  9A89               	bcf	3977,5,c	;volatile
 13360  004326  D7F4               	goto	l1210
 13361  004328                     __end_of_PortTestA5:
 13362                           	opt stack 0
 13363                           tblptru	equ	0xFF8
 13364                           tblptrh	equ	0xFF7
 13365                           tblptrl	equ	0xFF6
 13366                           tablat	equ	0xFF5
 13367                           prodh	equ	0xFF4
 13368                           prodl	equ	0xFF3
 13369                           intcon	equ	0xFF2
 13370                           intcon2	equ	0xFF1
 13371                           intcon3	equ	0xFF0
 13372                           postinc0	equ	0xFEE
 13373                           wreg	equ	0xFE8
 13374                           postdec1	equ	0xFE5
 13375                           fsr1l	equ	0xFE1
 13376                           indf2	equ	0xFDF
 13377                           postinc2	equ	0xFDE
 13378                           postdec2	equ	0xFDD
 13379                           fsr2h	equ	0xFDA
 13380                           fsr2l	equ	0xFD9
 13381                           status	equ	0xFD8
 13382                           
 13383 ;; *************** function _EEPROMTest *****************
 13384 ;; Defined at:
 13385 ;;		line 556 in file "Test.c"
 13386 ;; Parameters:    Size  Location     Type
 13387 ;;		None
 13388 ;; Auto vars:     Size  Location     Type
 13389 ;;		None
 13390 ;; Return value:  Size  Location     Type
 13391 ;;                  1    wreg      void 
 13392 ;; Registers used:
 13393 ;;		None
 13394 ;; Tracked objects:
 13395 ;;		On entry : 0/0
 13396 ;;		On exit  : 0/0
 13397 ;;		Unchanged: 0/0
 13398 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13399 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13400 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13401 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13402 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13403 ;;Total ram usage:        0 bytes
 13404 ;; Hardware stack levels used:    1
 13405 ;; Hardware stack levels required when called:    7
 13406 ;; This function calls:
 13407 ;;		Nothing
 13408 ;; This function is called by:
 13409 ;;		_Test
 13410 ;; This function uses a non-reentrant model
 13411 ;;
 13412                           
 13413                           	psect	text46
 13414  004B94                     __ptext46:
 13415                           	opt stack 0
 13416  004B94                     _EEPROMTest:
 13417                           	opt stack 22
 13418                           
 13419                           ;incstack = 0
 13420  004B94  0012               	return		;funcret
 13421  004B96                     __end_of_EEPROMTest:
 13422                           	opt stack 0
 13423                           tblptru	equ	0xFF8
 13424                           tblptrh	equ	0xFF7
 13425                           tblptrl	equ	0xFF6
 13426                           tablat	equ	0xFF5
 13427                           prodh	equ	0xFF4
 13428                           prodl	equ	0xFF3
 13429                           intcon	equ	0xFF2
 13430                           intcon2	equ	0xFF1
 13431                           intcon3	equ	0xFF0
 13432                           postinc0	equ	0xFEE
 13433                           wreg	equ	0xFE8
 13434                           postdec1	equ	0xFE5
 13435                           fsr1l	equ	0xFE1
 13436                           indf2	equ	0xFDF
 13437                           postinc2	equ	0xFDE
 13438                           postdec2	equ	0xFDD
 13439                           fsr2h	equ	0xFDA
 13440                           fsr2l	equ	0xFD9
 13441                           status	equ	0xFD8
 13442                           
 13443 ;; *************** function _BothServos *****************
 13444 ;; Defined at:
 13445 ;;		line 352 in file "Test.c"
 13446 ;; Parameters:    Size  Location     Type
 13447 ;;		None
 13448 ;; Auto vars:     Size  Location     Type
 13449 ;;		None
 13450 ;; Return value:  Size  Location     Type
 13451 ;;                  1    wreg      void 
 13452 ;; Registers used:
 13453 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13454 ;; Tracked objects:
 13455 ;;		On entry : 0/0
 13456 ;;		On exit  : 0/0
 13457 ;;		Unchanged: 0/0
 13458 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13459 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13460 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13461 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13462 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13463 ;;Total ram usage:        2 bytes
 13464 ;; Hardware stack levels used:    1
 13465 ;; Hardware stack levels required when called:   10
 13466 ;; This function calls:
 13467 ;;		_initServos
 13468 ;;		_lcdInst
 13469 ;;		_printf
 13470 ;;		_updateServoPosition
 13471 ;; This function is called by:
 13472 ;;		_Test
 13473 ;; This function uses a non-reentrant model
 13474 ;;
 13475                           
 13476                           	psect	text47
 13477  0015A8                     __ptext47:
 13478                           	opt stack 0
 13479  0015A8                     _BothServos:
 13480                           	opt stack 19
 13481                           
 13482                           ;Test.c: 353: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 13483                           
 13484                           ;incstack = 0
 13485  0015A8  0E01               	movlw	1
 13486  0015AA  EC98  F025         	call	_lcdInst
 13487  0015AE  0E68               	movlw	104
 13488  0015B0  0100               	movlb	0	; () banked
 13489  0015B2  6FAB               	movwf	??_BothServos& (0+255),b
 13490  0015B4  0EE4               	movlw	228
 13491  0015B6                     u8687:
 13492  0015B6  2EE8               	decfsz	wreg,f,c
 13493  0015B8  D7FE               	bra	u8687
 13494  0015BA  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13495  0015BC  D7FC               	bra	u8687
 13496  0015BE  F000               	nop	
 13497  0015C0  0E80               	movlw	128
 13498  0015C2  EC98  F025         	call	_lcdInst
 13499                           
 13500                           ;Test.c: 354: printf("TST: BOTH SERVOS");
 13501  0015C6  0EB4               	movlw	low STR_110
 13502  0015C8  0100               	movlb	0	; () banked
 13503  0015CA  6F8E               	movwf	printf@f& (0+255),b
 13504  0015CC  0EFC               	movlw	high STR_110
 13505  0015CE  0100               	movlb	0	; () banked
 13506  0015D0  6F8F               	movwf	(printf@f+1)& (0+255),b
 13507  0015D2  ECB8  F008         	call	_printf	;wreg free
 13508                           
 13509                           ;Test.c: 355: TMR1ON = 1;
 13510  0015D6  80CD               	bsf	4045,0,c	;volatile
 13511                           
 13512                           ;Test.c: 356: TMR3ON = 1;
 13513  0015D8  80B1               	bsf	4017,0,c	;volatile
 13514                           
 13515                           ;Test.c: 357: machine_state = Sorting_state;
 13516  0015DA  0E01               	movlw	1
 13517  0015DC  0100               	movlb	0	; () banked
 13518  0015DE  6FFC               	movwf	_machine_state& (0+255),b
 13519                           
 13520                           ; BSR set to: 0
 13521                           ;Test.c: 358: was_low_1 = 0;
 13522  0015E0  0E00               	movlw	0
 13523  0015E2  6E7A               	movwf	_was_low_1+1,c	;volatile
 13524  0015E4  0E00               	movlw	0
 13525  0015E6  6E79               	movwf	_was_low_1,c	;volatile
 13526                           
 13527                           ; BSR set to: 0
 13528                           ;Test.c: 359: was_low_3 = 0;
 13529  0015E8  0E00               	movlw	0
 13530  0015EA  6E7C               	movwf	_was_low_3+1,c	;volatile
 13531  0015EC  0E00               	movlw	0
 13532  0015EE  6E7B               	movwf	_was_low_3,c	;volatile
 13533                           
 13534                           ; BSR set to: 0
 13535                           ;Test.c: 365: initServos();
 13536  0015F0  EC94  F021         	call	_initServos	;wreg free
 13537                           
 13538                           ;Test.c: 366: _delay((unsigned long)((1500)*(32000000/4000.0)));
 13539  0015F4  0E3D               	movlw	61
 13540  0015F6  0100               	movlb	0	; () banked
 13541  0015F8  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13542  0015FA  0EE1               	movlw	225
 13543  0015FC  0100               	movlb	0	; () banked
 13544  0015FE  6FAB               	movwf	??_BothServos& (0+255),b
 13545  001600  0E3F               	movlw	63
 13546  001602                     u8697:
 13547  001602  2EE8               	decfsz	wreg,f,c
 13548  001604  D7FE               	bra	u8697
 13549  001606  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13550  001608  D7FC               	bra	u8697
 13551  00160A  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13552  00160C  D7FA               	bra	u8697
 13553  00160E  D000               	nop2	
 13554                           
 13555                           ;Test.c: 368: updateServoPosition(500, 1);
 13556  001610  0E01               	movlw	1
 13557  001612  0100               	movlb	0	; () banked
 13558  001614  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13559  001616  0EF4               	movlw	244
 13560  001618  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13561  00161A  0E00               	movlw	0
 13562  00161C  0100               	movlb	0	; () banked
 13563  00161E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13564  001620  0E01               	movlw	1
 13565  001622  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13566  001624  ECBF  F01F         	call	_updateServoPosition	;wreg free
 13567                           
 13568                           ;Test.c: 369: updateServoPosition(1050, 3);
 13569  001628  0E04               	movlw	4
 13570  00162A  0100               	movlb	0	; () banked
 13571  00162C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13572  00162E  0E1A               	movlw	26
 13573  001630  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13574  001632  0E00               	movlw	0
 13575  001634  0100               	movlb	0	; () banked
 13576  001636  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13577  001638  0E03               	movlw	3
 13578  00163A  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13579  00163C  ECBF  F01F         	call	_updateServoPosition	;wreg free
 13580                           
 13581                           ;Test.c: 370: _delay((unsigned long)((750)*(32000000/4000.0)));
 13582  001640  0E1F               	movlw	31
 13583  001642  0100               	movlb	0	; () banked
 13584  001644  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13585  001646  0E71               	movlw	113
 13586  001648  0100               	movlb	0	; () banked
 13587  00164A  6FAB               	movwf	??_BothServos& (0+255),b
 13588  00164C  0E1E               	movlw	30
 13589  00164E                     u8707:
 13590  00164E  2EE8               	decfsz	wreg,f,c
 13591  001650  D7FE               	bra	u8707
 13592  001652  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13593  001654  D7FC               	bra	u8707
 13594  001656  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13595  001658  D7FA               	bra	u8707
 13596  00165A  F000               	nop	
 13597                           
 13598                           ;Test.c: 371: updateServoPosition(1260, 3);
 13599  00165C  0E04               	movlw	4
 13600  00165E  0100               	movlb	0	; () banked
 13601  001660  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13602  001662  0EEC               	movlw	236
 13603  001664  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13604  001666  0E00               	movlw	0
 13605  001668  0100               	movlb	0	; () banked
 13606  00166A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13607  00166C  0E03               	movlw	3
 13608  00166E  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13609  001670  ECBF  F01F         	call	_updateServoPosition	;wreg free
 13610                           
 13611                           ;Test.c: 372: _delay((unsigned long)((2500)*(32000000/4000.0)));
 13612  001674  0E66               	movlw	102
 13613  001676  0100               	movlb	0	; () banked
 13614  001678  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13615  00167A  0E76               	movlw	118
 13616  00167C  0100               	movlb	0	; () banked
 13617  00167E  6FAB               	movwf	??_BothServos& (0+255),b
 13618  001680  0EC1               	movlw	193
 13619  001682                     u8717:
 13620  001682  2EE8               	decfsz	wreg,f,c
 13621  001684  D7FE               	bra	u8717
 13622  001686  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13623  001688  D7FC               	bra	u8717
 13624  00168A  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13625  00168C  D7FA               	bra	u8717
 13626                           
 13627                           ;Test.c: 373: updateServoPosition(1050, 3);
 13628  00168E  0E04               	movlw	4
 13629  001690  0100               	movlb	0	; () banked
 13630  001692  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13631  001694  0E1A               	movlw	26
 13632  001696  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13633  001698  0E00               	movlw	0
 13634  00169A  0100               	movlb	0	; () banked
 13635  00169C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13636  00169E  0E03               	movlw	3
 13637  0016A0  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13638  0016A2  ECBF  F01F         	call	_updateServoPosition	;wreg free
 13639                           
 13640                           ;Test.c: 374: _delay((unsigned long)((750)*(32000000/4000.0)));
 13641  0016A6  0E1F               	movlw	31
 13642  0016A8  0100               	movlb	0	; () banked
 13643  0016AA  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13644  0016AC  0E71               	movlw	113
 13645  0016AE  0100               	movlb	0	; () banked
 13646  0016B0  6FAB               	movwf	??_BothServos& (0+255),b
 13647  0016B2  0E1E               	movlw	30
 13648  0016B4                     u8727:
 13649  0016B4  2EE8               	decfsz	wreg,f,c
 13650  0016B6  D7FE               	bra	u8727
 13651  0016B8  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13652  0016BA  D7FC               	bra	u8727
 13653  0016BC  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13654  0016BE  D7FA               	bra	u8727
 13655  0016C0  F000               	nop	
 13656                           
 13657                           ;Test.c: 376: updateServoPosition(850, 1);
 13658  0016C2  0E03               	movlw	3
 13659  0016C4  0100               	movlb	0	; () banked
 13660  0016C6  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13661  0016C8  0E52               	movlw	82
 13662  0016CA  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13663  0016CC  0E00               	movlw	0
 13664  0016CE  0100               	movlb	0	; () banked
 13665  0016D0  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13666  0016D2  0E01               	movlw	1
 13667  0016D4  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13668  0016D6  ECBF  F01F         	call	_updateServoPosition	;wreg free
 13669                           
 13670                           ;Test.c: 377: updateServoPosition(1050, 3);
 13671  0016DA  0E04               	movlw	4
 13672  0016DC  0100               	movlb	0	; () banked
 13673  0016DE  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13674  0016E0  0E1A               	movlw	26
 13675  0016E2  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13676  0016E4  0E00               	movlw	0
 13677  0016E6  0100               	movlb	0	; () banked
 13678  0016E8  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13679  0016EA  0E03               	movlw	3
 13680  0016EC  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13681  0016EE  ECBF  F01F         	call	_updateServoPosition	;wreg free
 13682                           
 13683                           ;Test.c: 378: _delay((unsigned long)((750)*(32000000/4000.0)));
 13684  0016F2  0E1F               	movlw	31
 13685  0016F4  0100               	movlb	0	; () banked
 13686  0016F6  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13687  0016F8  0E71               	movlw	113
 13688  0016FA  0100               	movlb	0	; () banked
 13689  0016FC  6FAB               	movwf	??_BothServos& (0+255),b
 13690  0016FE  0E1E               	movlw	30
 13691  001700                     u8737:
 13692  001700  2EE8               	decfsz	wreg,f,c
 13693  001702  D7FE               	bra	u8737
 13694  001704  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13695  001706  D7FC               	bra	u8737
 13696  001708  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13697  00170A  D7FA               	bra	u8737
 13698  00170C  F000               	nop	
 13699                           
 13700                           ;Test.c: 379: updateServoPosition(1260, 3);
 13701  00170E  0E04               	movlw	4
 13702  001710  0100               	movlb	0	; () banked
 13703  001712  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13704  001714  0EEC               	movlw	236
 13705  001716  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13706  001718  0E00               	movlw	0
 13707  00171A  0100               	movlb	0	; () banked
 13708  00171C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13709  00171E  0E03               	movlw	3
 13710  001720  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13711  001722  ECBF  F01F         	call	_updateServoPosition	;wreg free
 13712                           
 13713                           ;Test.c: 380: _delay((unsigned long)((2500)*(32000000/4000.0)));
 13714  001726  0E66               	movlw	102
 13715  001728  0100               	movlb	0	; () banked
 13716  00172A  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13717  00172C  0E76               	movlw	118
 13718  00172E  0100               	movlb	0	; () banked
 13719  001730  6FAB               	movwf	??_BothServos& (0+255),b
 13720  001732  0EC1               	movlw	193
 13721  001734                     u8747:
 13722  001734  2EE8               	decfsz	wreg,f,c
 13723  001736  D7FE               	bra	u8747
 13724  001738  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13725  00173A  D7FC               	bra	u8747
 13726  00173C  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13727  00173E  D7FA               	bra	u8747
 13728                           
 13729                           ;Test.c: 381: updateServoPosition(1050, 3);
 13730  001740  0E04               	movlw	4
 13731  001742  0100               	movlb	0	; () banked
 13732  001744  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13733  001746  0E1A               	movlw	26
 13734  001748  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13735  00174A  0E00               	movlw	0
 13736  00174C  0100               	movlb	0	; () banked
 13737  00174E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13738  001750  0E03               	movlw	3
 13739  001752  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13740  001754  ECBF  F01F         	call	_updateServoPosition	;wreg free
 13741                           
 13742                           ;Test.c: 382: _delay((unsigned long)((750)*(32000000/4000.0)));
 13743  001758  0E1F               	movlw	31
 13744  00175A  0100               	movlb	0	; () banked
 13745  00175C  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13746  00175E  0E71               	movlw	113
 13747  001760  0100               	movlb	0	; () banked
 13748  001762  6FAB               	movwf	??_BothServos& (0+255),b
 13749  001764  0E1E               	movlw	30
 13750  001766                     u8757:
 13751  001766  2EE8               	decfsz	wreg,f,c
 13752  001768  D7FE               	bra	u8757
 13753  00176A  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13754  00176C  D7FC               	bra	u8757
 13755  00176E  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13756  001770  D7FA               	bra	u8757
 13757  001772  F000               	nop	
 13758                           
 13759                           ;Test.c: 384: updateServoPosition(1200, 1);
 13760  001774  0E04               	movlw	4
 13761  001776  0100               	movlb	0	; () banked
 13762  001778  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13763  00177A  0EB0               	movlw	176
 13764  00177C  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13765  00177E  0E00               	movlw	0
 13766  001780  0100               	movlb	0	; () banked
 13767  001782  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13768  001784  0E01               	movlw	1
 13769  001786  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13770  001788  ECBF  F01F         	call	_updateServoPosition	;wreg free
 13771                           
 13772                           ;Test.c: 385: updateServoPosition(1050, 3);
 13773  00178C  0E04               	movlw	4
 13774  00178E  0100               	movlb	0	; () banked
 13775  001790  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13776  001792  0E1A               	movlw	26
 13777  001794  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13778  001796  0E00               	movlw	0
 13779  001798  0100               	movlb	0	; () banked
 13780  00179A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13781  00179C  0E03               	movlw	3
 13782  00179E  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13783  0017A0  ECBF  F01F         	call	_updateServoPosition	;wreg free
 13784                           
 13785                           ;Test.c: 386: _delay((unsigned long)((1500)*(32000000/4000.0)));
 13786  0017A4  0E3D               	movlw	61
 13787  0017A6  0100               	movlb	0	; () banked
 13788  0017A8  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13789  0017AA  0EE1               	movlw	225
 13790  0017AC  0100               	movlb	0	; () banked
 13791  0017AE  6FAB               	movwf	??_BothServos& (0+255),b
 13792  0017B0  0E3F               	movlw	63
 13793  0017B2                     u8767:
 13794  0017B2  2EE8               	decfsz	wreg,f,c
 13795  0017B4  D7FE               	bra	u8767
 13796  0017B6  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13797  0017B8  D7FC               	bra	u8767
 13798  0017BA  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13799  0017BC  D7FA               	bra	u8767
 13800  0017BE  D000               	nop2	
 13801                           
 13802                           ;Test.c: 388: updateServoPosition(1670, 1);
 13803  0017C0  0E06               	movlw	6
 13804  0017C2  0100               	movlb	0	; () banked
 13805  0017C4  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13806  0017C6  0E86               	movlw	134
 13807  0017C8  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13808  0017CA  0E00               	movlw	0
 13809  0017CC  0100               	movlb	0	; () banked
 13810  0017CE  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13811  0017D0  0E01               	movlw	1
 13812  0017D2  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13813  0017D4  ECBF  F01F         	call	_updateServoPosition	;wreg free
 13814                           
 13815                           ;Test.c: 389: updateServoPosition(1050, 3);
 13816  0017D8  0E04               	movlw	4
 13817  0017DA  0100               	movlb	0	; () banked
 13818  0017DC  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13819  0017DE  0E1A               	movlw	26
 13820  0017E0  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13821  0017E2  0E00               	movlw	0
 13822  0017E4  0100               	movlb	0	; () banked
 13823  0017E6  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13824  0017E8  0E03               	movlw	3
 13825  0017EA  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13826  0017EC  ECBF  F01F         	call	_updateServoPosition	;wreg free
 13827                           
 13828                           ;Test.c: 390: _delay((unsigned long)((750)*(32000000/4000.0)));
 13829  0017F0  0E1F               	movlw	31
 13830  0017F2  0100               	movlb	0	; () banked
 13831  0017F4  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13832  0017F6  0E71               	movlw	113
 13833  0017F8  0100               	movlb	0	; () banked
 13834  0017FA  6FAB               	movwf	??_BothServos& (0+255),b
 13835  0017FC  0E1E               	movlw	30
 13836  0017FE                     u8777:
 13837  0017FE  2EE8               	decfsz	wreg,f,c
 13838  001800  D7FE               	bra	u8777
 13839  001802  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13840  001804  D7FC               	bra	u8777
 13841  001806  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13842  001808  D7FA               	bra	u8777
 13843  00180A  F000               	nop	
 13844                           
 13845                           ;Test.c: 391: updateServoPosition(1370, 3);
 13846  00180C  0E05               	movlw	5
 13847  00180E  0100               	movlb	0	; () banked
 13848  001810  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13849  001812  0E5A               	movlw	90
 13850  001814  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13851  001816  0E00               	movlw	0
 13852  001818  0100               	movlb	0	; () banked
 13853  00181A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13854  00181C  0E03               	movlw	3
 13855  00181E  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13856  001820  ECBF  F01F         	call	_updateServoPosition	;wreg free
 13857                           
 13858                           ;Test.c: 392: _delay((unsigned long)((2500)*(32000000/4000.0)));
 13859  001824  0E66               	movlw	102
 13860  001826  0100               	movlb	0	; () banked
 13861  001828  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13862  00182A  0E76               	movlw	118
 13863  00182C  0100               	movlb	0	; () banked
 13864  00182E  6FAB               	movwf	??_BothServos& (0+255),b
 13865  001830  0EC1               	movlw	193
 13866  001832                     u8787:
 13867  001832  2EE8               	decfsz	wreg,f,c
 13868  001834  D7FE               	bra	u8787
 13869  001836  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13870  001838  D7FC               	bra	u8787
 13871  00183A  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13872  00183C  D7FA               	bra	u8787
 13873                           
 13874                           ;Test.c: 393: updateServoPosition(1050, 3);
 13875  00183E  0E04               	movlw	4
 13876  001840  0100               	movlb	0	; () banked
 13877  001842  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13878  001844  0E1A               	movlw	26
 13879  001846  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13880  001848  0E00               	movlw	0
 13881  00184A  0100               	movlb	0	; () banked
 13882  00184C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13883  00184E  0E03               	movlw	3
 13884  001850  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13885  001852  ECBF  F01F         	call	_updateServoPosition	;wreg free
 13886                           
 13887                           ;Test.c: 394: _delay((unsigned long)((750)*(32000000/4000.0)));
 13888  001856  0E1F               	movlw	31
 13889  001858  0100               	movlb	0	; () banked
 13890  00185A  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13891  00185C  0E71               	movlw	113
 13892  00185E  0100               	movlb	0	; () banked
 13893  001860  6FAB               	movwf	??_BothServos& (0+255),b
 13894  001862  0E1E               	movlw	30
 13895  001864                     u8797:
 13896  001864  2EE8               	decfsz	wreg,f,c
 13897  001866  D7FE               	bra	u8797
 13898  001868  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13899  00186A  D7FC               	bra	u8797
 13900  00186C  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13901  00186E  D7FA               	bra	u8797
 13902  001870  F000               	nop	
 13903                           
 13904                           ;Test.c: 396: updateServoPosition(2200, 1);
 13905  001872  0E08               	movlw	8
 13906  001874  0100               	movlb	0	; () banked
 13907  001876  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13908  001878  0E98               	movlw	152
 13909  00187A  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13910  00187C  0E00               	movlw	0
 13911  00187E  0100               	movlb	0	; () banked
 13912  001880  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13913  001882  0E01               	movlw	1
 13914  001884  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13915  001886  ECBF  F01F         	call	_updateServoPosition	;wreg free
 13916                           
 13917                           ;Test.c: 397: updateServoPosition(1050, 3);
 13918  00188A  0E04               	movlw	4
 13919  00188C  0100               	movlb	0	; () banked
 13920  00188E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13921  001890  0E1A               	movlw	26
 13922  001892  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13923  001894  0E00               	movlw	0
 13924  001896  0100               	movlb	0	; () banked
 13925  001898  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13926  00189A  0E03               	movlw	3
 13927  00189C  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13928  00189E  ECBF  F01F         	call	_updateServoPosition	;wreg free
 13929                           
 13930                           ;Test.c: 398: _delay((unsigned long)((750)*(32000000/4000.0)));
 13931  0018A2  0E1F               	movlw	31
 13932  0018A4  0100               	movlb	0	; () banked
 13933  0018A6  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13934  0018A8  0E71               	movlw	113
 13935  0018AA  0100               	movlb	0	; () banked
 13936  0018AC  6FAB               	movwf	??_BothServos& (0+255),b
 13937  0018AE  0E1E               	movlw	30
 13938  0018B0                     u8807:
 13939  0018B0  2EE8               	decfsz	wreg,f,c
 13940  0018B2  D7FE               	bra	u8807
 13941  0018B4  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13942  0018B6  D7FC               	bra	u8807
 13943  0018B8  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13944  0018BA  D7FA               	bra	u8807
 13945  0018BC  F000               	nop	
 13946                           
 13947                           ;Test.c: 399: updateServoPosition(1370, 3);
 13948  0018BE  0E05               	movlw	5
 13949  0018C0  0100               	movlb	0	; () banked
 13950  0018C2  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13951  0018C4  0E5A               	movlw	90
 13952  0018C6  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13953  0018C8  0E00               	movlw	0
 13954  0018CA  0100               	movlb	0	; () banked
 13955  0018CC  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13956  0018CE  0E03               	movlw	3
 13957  0018D0  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13958  0018D2  ECBF  F01F         	call	_updateServoPosition	;wreg free
 13959                           
 13960                           ;Test.c: 400: _delay((unsigned long)((2500)*(32000000/4000.0)));
 13961  0018D6  0E66               	movlw	102
 13962  0018D8  0100               	movlb	0	; () banked
 13963  0018DA  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13964  0018DC  0E76               	movlw	118
 13965  0018DE  0100               	movlb	0	; () banked
 13966  0018E0  6FAB               	movwf	??_BothServos& (0+255),b
 13967  0018E2  0EC1               	movlw	193
 13968  0018E4                     u8817:
 13969  0018E4  2EE8               	decfsz	wreg,f,c
 13970  0018E6  D7FE               	bra	u8817
 13971  0018E8  2FAB               	decfsz	??_BothServos& (0+255),f,b
 13972  0018EA  D7FC               	bra	u8817
 13973  0018EC  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 13974  0018EE  D7FA               	bra	u8817
 13975                           
 13976                           ;Test.c: 401: updateServoPosition(1050, 3);
 13977  0018F0  0E04               	movlw	4
 13978  0018F2  0100               	movlb	0	; () banked
 13979  0018F4  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 13980  0018F6  0E1A               	movlw	26
 13981  0018F8  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 13982  0018FA  0E00               	movlw	0
 13983  0018FC  0100               	movlb	0	; () banked
 13984  0018FE  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 13985  001900  0E03               	movlw	3
 13986  001902  6F82               	movwf	updateServoPosition@timer& (0+255),b
 13987  001904  ECBF  F01F         	call	_updateServoPosition	;wreg free
 13988                           
 13989                           ;Test.c: 402: _delay((unsigned long)((750)*(32000000/4000.0)));
 13990  001908  0E1F               	movlw	31
 13991  00190A  0100               	movlb	0	; () banked
 13992  00190C  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 13993  00190E  0E71               	movlw	113
 13994  001910  0100               	movlb	0	; () banked
 13995  001912  6FAB               	movwf	??_BothServos& (0+255),b
 13996  001914  0E1E               	movlw	30
 13997  001916                     u8827:
 13998  001916  2EE8               	decfsz	wreg,f,c
 13999  001918  D7FE               	bra	u8827
 14000  00191A  2FAB               	decfsz	??_BothServos& (0+255),f,b
 14001  00191C  D7FC               	bra	u8827
 14002  00191E  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 14003  001920  D7FA               	bra	u8827
 14004  001922  F000               	nop	
 14005                           
 14006                           ;Test.c: 404: TMR1ON = 0;
 14007  001924  90CD               	bcf	4045,0,c	;volatile
 14008                           
 14009                           ;Test.c: 405: TMR3ON = 0;
 14010  001926  90B1               	bcf	4017,0,c	;volatile
 14011                           
 14012                           ;Test.c: 406: (INTCONbits.GIE = 0);
 14013  001928  9EF2               	bcf	intcon,7,c	;volatile
 14014  00192A  0012               	return		;funcret
 14015  00192C                     __end_of_BothServos:
 14016                           	opt stack 0
 14017                           tblptru	equ	0xFF8
 14018                           tblptrh	equ	0xFF7
 14019                           tblptrl	equ	0xFF6
 14020                           tablat	equ	0xFF5
 14021                           prodh	equ	0xFF4
 14022                           prodl	equ	0xFF3
 14023                           intcon	equ	0xFF2
 14024                           intcon2	equ	0xFF1
 14025                           intcon3	equ	0xFF0
 14026                           postinc0	equ	0xFEE
 14027                           wreg	equ	0xFE8
 14028                           postdec1	equ	0xFE5
 14029                           fsr1l	equ	0xFE1
 14030                           indf2	equ	0xFDF
 14031                           postinc2	equ	0xFDE
 14032                           postdec2	equ	0xFDD
 14033                           fsr2h	equ	0xFDA
 14034                           fsr2l	equ	0xFD9
 14035                           status	equ	0xFD8
 14036                           
 14037 ;; *************** function _initServos *****************
 14038 ;; Defined at:
 14039 ;;		line 329 in file "sort.c"
 14040 ;; Parameters:    Size  Location     Type
 14041 ;;		None
 14042 ;; Auto vars:     Size  Location     Type
 14043 ;;		None
 14044 ;; Return value:  Size  Location     Type
 14045 ;;                  1    wreg      void 
 14046 ;; Registers used:
 14047 ;;		wreg, status,2, status,0, cstack
 14048 ;; Tracked objects:
 14049 ;;		On entry : 0/0
 14050 ;;		On exit  : 0/0
 14051 ;;		Unchanged: 0/0
 14052 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14053 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14054 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14055 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14056 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14057 ;;Total ram usage:        1 bytes
 14058 ;; Hardware stack levels used:    1
 14059 ;; Hardware stack levels required when called:    8
 14060 ;; This function calls:
 14061 ;;		_updateServoPosition
 14062 ;; This function is called by:
 14063 ;;		_Loading
 14064 ;;		_BothServos
 14065 ;; This function uses a non-reentrant model
 14066 ;;
 14067                           
 14068                           	psect	text48
 14069  004328                     __ptext48:
 14070                           	opt stack 0
 14071  004328                     _initServos:
 14072                           	opt stack 20
 14073                           
 14074                           ;sort.c: 330: updateServoPosition(1200, 1);
 14075                           
 14076                           ;incstack = 0
 14077  004328  0E04               	movlw	4
 14078  00432A  0100               	movlb	0	; () banked
 14079  00432C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14080  00432E  0EB0               	movlw	176
 14081  004330  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14082  004332  0E00               	movlw	0
 14083  004334  0100               	movlb	0	; () banked
 14084  004336  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14085  004338  0E01               	movlw	1
 14086  00433A  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14087  00433C  ECBF  F01F         	call	_updateServoPosition	;wreg free
 14088                           
 14089                           ;sort.c: 331: updateServoPosition(1050, 3);
 14090  004340  0E04               	movlw	4
 14091  004342  0100               	movlb	0	; () banked
 14092  004344  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14093  004346  0E1A               	movlw	26
 14094  004348  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14095  00434A  0E00               	movlw	0
 14096  00434C  0100               	movlb	0	; () banked
 14097  00434E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14098  004350  0E03               	movlw	3
 14099  004352  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14100  004354  ECBF  F01F         	call	_updateServoPosition	;wreg free
 14101                           
 14102                           ;sort.c: 332: TMR1ON = 1;
 14103  004358  80CD               	bsf	4045,0,c	;volatile
 14104                           
 14105                           ;sort.c: 333: was_low_1 = 0;
 14106  00435A  0E00               	movlw	0
 14107  00435C  6E7A               	movwf	_was_low_1+1,c	;volatile
 14108  00435E  0E00               	movlw	0
 14109  004360  6E79               	movwf	_was_low_1,c	;volatile
 14110                           
 14111                           ;sort.c: 334: _delay((unsigned long)((5)*(32000000/4000.0)));
 14112  004362  0E34               	movlw	52
 14113  004364  0100               	movlb	0	; () banked
 14114  004366  6F88               	movwf	??_initServos& (0+255),b
 14115  004368  0EF1               	movlw	241
 14116  00436A                     u8837:
 14117  00436A  2EE8               	decfsz	wreg,f,c
 14118  00436C  D7FE               	bra	u8837
 14119  00436E  2F88               	decfsz	??_initServos& (0+255),f,b
 14120  004370  D7FC               	bra	u8837
 14121  004372  D000               	nop2	
 14122                           
 14123                           ;sort.c: 335: TMR3ON = 1;
 14124  004374  80B1               	bsf	4017,0,c	;volatile
 14125                           
 14126                           ;sort.c: 336: was_low_3 = 0;
 14127  004376  0E00               	movlw	0
 14128  004378  6E7C               	movwf	_was_low_3+1,c	;volatile
 14129  00437A  0E00               	movlw	0
 14130  00437C  6E7B               	movwf	_was_low_3,c	;volatile
 14131                           
 14132                           ;sort.c: 338: LATCbits.LATC0 = 1;
 14133  00437E  808B               	bsf	3979,0,c	;volatile
 14134  004380  0012               	return		;funcret
 14135  004382                     __end_of_initServos:
 14136                           	opt stack 0
 14137                           tblptru	equ	0xFF8
 14138                           tblptrh	equ	0xFF7
 14139                           tblptrl	equ	0xFF6
 14140                           tablat	equ	0xFF5
 14141                           prodh	equ	0xFF4
 14142                           prodl	equ	0xFF3
 14143                           intcon	equ	0xFF2
 14144                           intcon2	equ	0xFF1
 14145                           intcon3	equ	0xFF0
 14146                           postinc0	equ	0xFEE
 14147                           wreg	equ	0xFE8
 14148                           postdec1	equ	0xFE5
 14149                           fsr1l	equ	0xFE1
 14150                           indf2	equ	0xFDF
 14151                           postinc2	equ	0xFDE
 14152                           postdec2	equ	0xFDD
 14153                           fsr2h	equ	0xFDA
 14154                           fsr2l	equ	0xFD9
 14155                           status	equ	0xFD8
 14156                           
 14157 ;; *************** function _updateServoPosition *****************
 14158 ;; Defined at:
 14159 ;;		line 392 in file "sort.c"
 14160 ;; Parameters:    Size  Location     Type
 14161 ;;  time_us         2    0[BANK0 ] int 
 14162 ;;  timer           2    2[BANK0 ] int 
 14163 ;; Auto vars:     Size  Location     Type
 14164 ;;  my_time         2    6[BANK0 ] unsigned int 
 14165 ;; Return value:  Size  Location     Type
 14166 ;;                  1    wreg      void 
 14167 ;; Registers used:
 14168 ;;		wreg, status,2, status,0
 14169 ;; Tracked objects:
 14170 ;;		On entry : 0/0
 14171 ;;		On exit  : 0/0
 14172 ;;		Unchanged: 0/0
 14173 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14174 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14175 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14176 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14177 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14178 ;;Total ram usage:        8 bytes
 14179 ;; Hardware stack levels used:    1
 14180 ;; Hardware stack levels required when called:    7
 14181 ;; This function calls:
 14182 ;;		Nothing
 14183 ;; This function is called by:
 14184 ;;		_Distribution
 14185 ;;		_initServos
 14186 ;;		_actuatorTest
 14187 ;;		_BothServos
 14188 ;; This function uses a non-reentrant model
 14189 ;;
 14190                           
 14191                           	psect	text49
 14192  003F7E                     __ptext49:
 14193                           	opt stack 0
 14194  003F7E                     _updateServoPosition:
 14195                           	opt stack 20
 14196                           
 14197                           ;sort.c: 393: unsigned int my_time = 65535 - time_us;
 14198                           
 14199                           ;incstack = 0
 14200  003F7E  C080  F084         	movff	updateServoPosition@time_us,??_updateServoPosition
 14201  003F82  C081  F085         	movff	updateServoPosition@time_us+1,??_updateServoPosition+1
 14202  003F86  0100               	movlb	0	; () banked
 14203  003F88  1F84               	comf	??_updateServoPosition& (0+255),f,b
 14204  003F8A  1F85               	comf	(??_updateServoPosition+1)& (0+255),f,b
 14205  003F8C  4B84               	infsnz	??_updateServoPosition& (0+255),f,b
 14206  003F8E  2B85               	incf	(??_updateServoPosition+1)& (0+255),f,b
 14207  003F90  0EFF               	movlw	255
 14208  003F92  0100               	movlb	0	; () banked
 14209  003F94  2584               	addwf	??_updateServoPosition& (0+255),w,b
 14210  003F96  0100               	movlb	0	; () banked
 14211  003F98  6F86               	movwf	updateServoPosition@my_time& (0+255),b
 14212  003F9A  0EFF               	movlw	255
 14213  003F9C  0100               	movlb	0	; () banked
 14214  003F9E  2185               	addwfc	(??_updateServoPosition+1)& (0+255),w,b
 14215  003FA0  0100               	movlb	0	; () banked
 14216  003FA2  6F87               	movwf	(updateServoPosition@my_time+1)& (0+255),b
 14217                           
 14218                           ;sort.c: 394: switch(timer){
 14219  003FA4  D015               	goto	l5840
 14220  003FA6                     l5838:
 14221                           
 14222                           ; BSR set to: 0
 14223                           ;sort.c: 396: servoTimes[0] = my_time >> 8;
 14224  003FA6  0100               	movlb	0	; () banked
 14225  003FA8  5187               	movf	(updateServoPosition@my_time+1)& (0+255),w,b
 14226  003FAA  0101               	movlb	1	; () banked
 14227  003FAC  6F1C               	movwf	_servoTimes& (0+255),b
 14228  003FAE  6B1D               	clrf	(_servoTimes+1)& (0+255),b
 14229                           
 14230                           ;sort.c: 397: servoTimes[1] = my_time & 0xFF;
 14231  003FB0  0100               	movlb	0	; () banked
 14232  003FB2  5186               	movf	updateServoPosition@my_time& (0+255),w,b
 14233  003FB4  0101               	movlb	1	; () banked
 14234  003FB6  6F1E               	movwf	(_servoTimes+2)& (0+255),b
 14235  003FB8  6B1F               	clrf	(_servoTimes+3)& (0+255),b
 14236  003FBA                     l815:
 14237                           
 14238                           ;sort.c: 399: servoTimes[2] = my_time >> 8;
 14239  003FBA  0100               	movlb	0	; () banked
 14240  003FBC  5187               	movf	(updateServoPosition@my_time+1)& (0+255),w,b
 14241  003FBE  0101               	movlb	1	; () banked
 14242  003FC0  6F20               	movwf	(_servoTimes+4)& (0+255),b
 14243  003FC2  6B21               	clrf	(_servoTimes+5)& (0+255),b
 14244                           
 14245                           ;sort.c: 400: servoTimes[3] = my_time & 0xFF;
 14246  003FC4  0100               	movlb	0	; () banked
 14247  003FC6  5186               	movf	updateServoPosition@my_time& (0+255),w,b
 14248  003FC8  0101               	movlb	1	; () banked
 14249  003FCA  6F22               	movwf	(_servoTimes+6)& (0+255),b
 14250  003FCC  6B23               	clrf	(_servoTimes+7)& (0+255),b
 14251                           
 14252                           ;sort.c: 401: }
 14253  003FCE  0012               	return	
 14254  003FD0                     l5840:
 14255  003FD0  C082  F084         	movff	updateServoPosition@timer,??_updateServoPosition
 14256  003FD4  C083  F085         	movff	updateServoPosition@timer+1,??_updateServoPosition+1
 14257                           
 14258                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 14259                           ; Switch size 1, requested type "space"
 14260                           ; Number of cases is 1, Range of values is 0 to 0
 14261                           ; switch strategies available:
 14262                           ; Name         Instructions Cycles
 14263                           ; simple_byte            4     3 (average)
 14264                           ;	Chosen strategy is simple_byte
 14265  003FD8  0100               	movlb	0	; () banked
 14266  003FDA  5185               	movf	(??_updateServoPosition+1)& (0+255),w,b
 14267  003FDC  0A00               	xorlw	0	; case 0
 14268  003FDE  A4D8               	btfss	status,2,c
 14269  003FE0  0012               	return	
 14270                           
 14271                           ; BSR set to: 0
 14272                           ; Switch size 1, requested type "space"
 14273                           ; Number of cases is 2, Range of values is 1 to 3
 14274                           ; switch strategies available:
 14275                           ; Name         Instructions Cycles
 14276                           ; simple_byte            7     4 (average)
 14277                           ;	Chosen strategy is simple_byte
 14278  003FE2  0100               	movlb	0	; () banked
 14279  003FE4  5184               	movf	??_updateServoPosition& (0+255),w,b
 14280  003FE6  0A01               	xorlw	1	; case 1
 14281  003FE8  B4D8               	btfsc	status,2,c
 14282  003FEA  D7DD               	goto	l5838
 14283  003FEC  0A02               	xorlw	2	; case 3
 14284  003FEE  A4D8               	btfss	status,2,c
 14285  003FF0  0012               	return	
 14286  003FF2  D7E3               	goto	l815
 14287  003FF4                     __end_of_updateServoPosition:
 14288                           	opt stack 0
 14289                           tblptru	equ	0xFF8
 14290                           tblptrh	equ	0xFF7
 14291                           tblptrl	equ	0xFF6
 14292                           tablat	equ	0xFF5
 14293                           prodh	equ	0xFF4
 14294                           prodl	equ	0xFF3
 14295                           intcon	equ	0xFF2
 14296                           intcon2	equ	0xFF1
 14297                           intcon3	equ	0xFF0
 14298                           postinc0	equ	0xFEE
 14299                           wreg	equ	0xFE8
 14300                           postdec1	equ	0xFE5
 14301                           fsr1l	equ	0xFE1
 14302                           indf2	equ	0xFDF
 14303                           postinc2	equ	0xFDE
 14304                           postdec2	equ	0xFDD
 14305                           fsr2h	equ	0xFDA
 14306                           fsr2l	equ	0xFD9
 14307                           status	equ	0xFD8
 14308                           
 14309 ;; *************** function _BlockerTest *****************
 14310 ;; Defined at:
 14311 ;;		line 568 in file "Test.c"
 14312 ;; Parameters:    Size  Location     Type
 14313 ;;		None
 14314 ;; Auto vars:     Size  Location     Type
 14315 ;;  i               2   44[BANK0 ] int 
 14316 ;;  flag            2   46[BANK0 ] int 
 14317 ;; Return value:  Size  Location     Type
 14318 ;;                  1    wreg      void 
 14319 ;; Registers used:
 14320 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14321 ;; Tracked objects:
 14322 ;;		On entry : 0/0
 14323 ;;		On exit  : 0/0
 14324 ;;		Unchanged: 0/0
 14325 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14326 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14327 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14328 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14329 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14330 ;;Total ram usage:        5 bytes
 14331 ;; Hardware stack levels used:    1
 14332 ;; Hardware stack levels required when called:   10
 14333 ;; This function calls:
 14334 ;;		_lcdInst
 14335 ;;		_printf
 14336 ;; This function is called by:
 14337 ;;		_Test
 14338 ;; This function uses a non-reentrant model
 14339 ;;
 14340                           
 14341                           	psect	text50
 14342  00389E                     __ptext50:
 14343                           	opt stack 0
 14344  00389E                     _BlockerTest:
 14345                           	opt stack 19
 14346                           
 14347                           ;Test.c: 569: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 14348                           
 14349                           ;incstack = 0
 14350  00389E  0E01               	movlw	1
 14351  0038A0  EC98  F025         	call	_lcdInst
 14352  0038A4  0E68               	movlw	104
 14353  0038A6  0100               	movlb	0	; () banked
 14354  0038A8  6FAB               	movwf	??_BlockerTest& (0+255),b
 14355  0038AA  0EE4               	movlw	228
 14356  0038AC                     u8847:
 14357  0038AC  2EE8               	decfsz	wreg,f,c
 14358  0038AE  D7FE               	bra	u8847
 14359  0038B0  2FAB               	decfsz	??_BlockerTest& (0+255),f,b
 14360  0038B2  D7FC               	bra	u8847
 14361  0038B4  F000               	nop	
 14362  0038B6  0E80               	movlw	128
 14363  0038B8  EC98  F025         	call	_lcdInst
 14364                           
 14365                           ;Test.c: 570: printf("D WILL RETURN    ");
 14366  0038BC  0E49               	movlw	low STR_111
 14367  0038BE  0100               	movlb	0	; () banked
 14368  0038C0  6F8E               	movwf	printf@f& (0+255),b
 14369  0038C2  0EFB               	movlw	high STR_111
 14370  0038C4  0100               	movlb	0	; () banked
 14371  0038C6  6F8F               	movwf	(printf@f+1)& (0+255),b
 14372  0038C8  ECB8  F008         	call	_printf	;wreg free
 14373                           
 14374                           ;Test.c: 571: lcdInst(0b11000000);;
 14375  0038CC  0EC0               	movlw	192
 14376  0038CE  EC98  F025         	call	_lcdInst
 14377                           
 14378                           ;Test.c: 572: printf("OTHER TOGGLES CAM");
 14379  0038D2  0E7F               	movlw	low STR_119
 14380  0038D4  0100               	movlb	0	; () banked
 14381  0038D6  6F8E               	movwf	printf@f& (0+255),b
 14382  0038D8  0EFB               	movlw	high STR_119
 14383  0038DA  0100               	movlb	0	; () banked
 14384  0038DC  6F8F               	movwf	(printf@f+1)& (0+255),b
 14385  0038DE  ECB8  F008         	call	_printf	;wreg free
 14386                           
 14387                           ;Test.c: 573: int flag = 1;
 14388  0038E2  0E00               	movlw	0
 14389  0038E4  0100               	movlb	0	; () banked
 14390  0038E6  6FAF               	movwf	(BlockerTest@flag+1)& (0+255),b
 14391  0038E8  0E01               	movlw	1
 14392  0038EA  6FAE               	movwf	BlockerTest@flag& (0+255),b
 14393  0038EC                     l1276:
 14394  0038EC  A281               	btfss	3969,1,c	;volatile
 14395  0038EE  D7FE               	goto	l1276
 14396                           
 14397                           ;Test.c: 576: if(PORTB >> 4 == 0b1111){
 14398  0038F0  3881               	swapf	3969,w,c	;volatile
 14399  0038F2  0B0F               	andlw	15
 14400  0038F4  0A0F               	xorlw	15
 14401  0038F6  B4D8               	btfsc	status,2,c
 14402  0038F8  0012               	return	
 14403                           
 14404                           ;Test.c: 579: else{
 14405                           ;Test.c: 580: if(flag){
 14406                           
 14407                           ;Test.c: 578: }
 14408                           
 14409                           ;Test.c: 577: break;
 14410  0038FA  0100               	movlb	0	; () banked
 14411  0038FC  51AE               	movf	BlockerTest@flag& (0+255),w,b
 14412  0038FE  0100               	movlb	0	; () banked
 14413  003900  11AF               	iorwf	(BlockerTest@flag+1)& (0+255),w,b
 14414  003902  B4D8               	btfsc	status,2,c
 14415  003904  D007               	goto	l7620
 14416                           
 14417                           ; BSR set to: 0
 14418                           ;Test.c: 581: LATCbits.LATC0 = 1;
 14419  003906  808B               	bsf	3979,0,c	;volatile
 14420  003908  D023               	goto	l7632
 14421  00390A                     u6271:
 14422  00390A  0E01               	movlw	1
 14423  00390C                     u6280:
 14424  00390C  0100               	movlb	0	; () banked
 14425  00390E  6FAE               	movwf	BlockerTest@flag& (0+255),b
 14426  003910  6BAF               	clrf	(BlockerTest@flag+1)& (0+255),b
 14427                           
 14428                           ;Test.c: 583: }
 14429  003912  D026               	goto	l1286
 14430  003914                     l7620:
 14431                           
 14432                           ; BSR set to: 0
 14433                           ;Test.c: 584: else{
 14434                           ;Test.c: 585: for(int i=0;i<5000;i++)
 14435  003914  0E00               	movlw	0
 14436  003916  0100               	movlb	0	; () banked
 14437  003918  6FAD               	movwf	(BlockerTest@i+1)& (0+255),b
 14438  00391A  0E00               	movlw	0
 14439  00391C  6FAC               	movwf	BlockerTest@i& (0+255),b
 14440  00391E                     l7622:
 14441                           
 14442                           ; BSR set to: 0
 14443  00391E  0100               	movlb	0	; () banked
 14444  003920  BFAD               	btfsc	(BlockerTest@i+1)& (0+255),7,b
 14445  003922  D008               	goto	l1284
 14446  003924  0E88               	movlw	136
 14447  003926  0100               	movlb	0	; () banked
 14448  003928  5DAC               	subwf	BlockerTest@i& (0+255),w,b
 14449  00392A  0E13               	movlw	19
 14450  00392C  0100               	movlb	0	; () banked
 14451  00392E  59AD               	subwfb	(BlockerTest@i+1)& (0+255),w,b
 14452  003930  B0D8               	btfsc	status,0,c
 14453  003932  D00D               	goto	l1285
 14454  003934                     l1284:
 14455                           
 14456                           ; BSR set to: 0
 14457                           ;Test.c: 586: {
 14458                           ;Test.c: 587: LATCbits.LATC0 = 1;
 14459  003934  808B               	bsf	3979,0,c	;volatile
 14460                           
 14461                           ; BSR set to: 0
 14462                           ;Test.c: 588: _delay((unsigned long)((10)*(32000000/4000000.0)));
 14463  003936  0E1A               	movlw	26
 14464  003938                     u8857:
 14465  003938  2EE8               	decfsz	wreg,f,c
 14466  00393A  D7FE               	bra	u8857
 14467  00393C  D000               	nop2	
 14468                           
 14469                           ;Test.c: 589: LATCbits.LATC0 = 0;
 14470  00393E  908B               	bcf	3979,0,c	;volatile
 14471                           
 14472                           ;Test.c: 590: _delay((unsigned long)((90)*(32000000/4000000.0)));
 14473  003940  0EF0               	movlw	240
 14474  003942                     u8867:
 14475  003942  2EE8               	decfsz	wreg,f,c
 14476  003944  D7FE               	bra	u8867
 14477  003946  0100               	movlb	0	; () banked
 14478  003948  4BAC               	infsnz	BlockerTest@i& (0+255),f,b
 14479  00394A  2BAD               	incf	(BlockerTest@i+1)& (0+255),f,b
 14480  00394C  D7E8               	goto	l7622
 14481  00394E                     l1285:
 14482                           
 14483                           ; BSR set to: 0
 14484                           ;Test.c: 591: }
 14485                           ;Test.c: 592: LATCbits.LATC0 = 0;
 14486  00394E  908B               	bcf	3979,0,c	;volatile
 14487  003950                     l7632:
 14488                           
 14489                           ; BSR set to: 0
 14490                           ;Test.c: 593: flag = !flag;
 14491  003950  0100               	movlb	0	; () banked
 14492  003952  51AE               	movf	BlockerTest@flag& (0+255),w,b
 14493  003954  0100               	movlb	0	; () banked
 14494  003956  11AF               	iorwf	(BlockerTest@flag+1)& (0+255),w,b
 14495  003958  B4D8               	btfsc	status,2,c
 14496  00395A  D7D7               	goto	u6271
 14497  00395C  0E00               	movlw	0
 14498  00395E  D7D6               	goto	u6280
 14499  003960                     l1286:
 14500  003960  A281               	btfss	3969,1,c	;volatile
 14501  003962  D7C4               	goto	l1276
 14502  003964  D7FD               	goto	l1286
 14503  003966                     __end_of_BlockerTest:
 14504                           	opt stack 0
 14505                           tblptru	equ	0xFF8
 14506                           tblptrh	equ	0xFF7
 14507                           tblptrl	equ	0xFF6
 14508                           tablat	equ	0xFF5
 14509                           prodh	equ	0xFF4
 14510                           prodl	equ	0xFF3
 14511                           intcon	equ	0xFF2
 14512                           intcon2	equ	0xFF1
 14513                           intcon3	equ	0xFF0
 14514                           postinc0	equ	0xFEE
 14515                           wreg	equ	0xFE8
 14516                           postdec1	equ	0xFE5
 14517                           fsr1l	equ	0xFE1
 14518                           indf2	equ	0xFDF
 14519                           postinc2	equ	0xFDE
 14520                           postdec2	equ	0xFDD
 14521                           fsr2h	equ	0xFDA
 14522                           fsr2l	equ	0xFD9
 14523                           status	equ	0xFD8
 14524                           
 14525 ;; *************** function _printf *****************
 14526 ;; Defined at:
 14527 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 14528 ;; Parameters:    Size  Location     Type
 14529 ;;  f               2   14[BANK0 ] PTR const unsigned char 
 14530 ;;		 -> STR_119(18), STR_118(18), STR_117(18), STR_116(18), 
 14531 ;;		 -> STR_115(17), STR_114(17), STR_113(11), STR_112(18), 
 14532 ;;		 -> STR_111(18), STR_110(17), STR_109(15), STR_108(15), 
 14533 ;;		 -> STR_107(15), STR_106(17), STR_105(17), STR_104(17), 
 14534 ;;		 -> STR_103(16), STR_102(17), STR_101(17), STR_100(17), 
 14535 ;;		 -> STR_99(17), STR_98(17), STR_97(17), STR_96(15), 
 14536 ;;		 -> STR_95(11), STR_94(17), STR_93(11), STR_92(17), 
 14537 ;;		 -> STR_91(14), STR_90(15), STR_89(14), STR_88(10), 
 14538 ;;		 -> STR_87(9), STR_86(9), STR_85(10), STR_84(10), 
 14539 ;;		 -> STR_83(16), STR_82(15), STR_81(3), STR_80(15), 
 14540 ;;		 -> STR_79(13), STR_78(14), STR_77(8), STR_76(14), 
 14541 ;;		 -> STR_75(15), STR_74(12), STR_73(14), STR_72(17), 
 14542 ;;		 -> STR_71(14), STR_70(15), STR_69(17), STR_68(17), 
 14543 ;;		 -> STR_67(7), STR_66(21), STR_65(13), STR_64(11), 
 14544 ;;		 -> STR_63(24), STR_50(17), STR_49(17), STR_48(17), 
 14545 ;;		 -> STR_47(17), STR_46(17), STR_45(17), STR_44(17), 
 14546 ;;		 -> STR_43(17), STR_42(17), STR_41(17), STR_40(17), 
 14547 ;;		 -> STR_39(17), STR_38(17), STR_37(17), STR_36(17), 
 14548 ;;		 -> STR_35(17), STR_34(17), STR_33(17), STR_32(17), 
 14549 ;;		 -> STR_31(17), STR_30(17), STR_29(3), STR_28(17), 
 14550 ;;		 -> STR_27(17), STR_26(17), STR_25(17), STR_24(17), 
 14551 ;;		 -> STR_23(14), STR_22(10), STR_21(24), STR_7(7), 
 14552 ;;		 -> STR_6(17), STR_5(18), STR_4(16), STR_3(18), 
 14553 ;;		 -> STR_2(14), STR_1(18), 
 14554 ;; Auto vars:     Size  Location     Type
 14555 ;;  tmpval          4    0        struct .
 14556 ;;  width           2   41[BANK0 ] int 
 14557 ;;  val             2   37[BANK0 ] unsigned int 
 14558 ;;  len             2   35[BANK0 ] unsigned int 
 14559 ;;  ap              2   33[BANK0 ] PTR void [1]
 14560 ;;		 -> ?i2_printf(2), ?_printf(2), 
 14561 ;;  cp              2   31[BANK0 ] PTR const unsigned char 
 14562 ;;		 -> STR_120(7), count_total(2), printRTC@month(4), UI@month(4), 
 14563 ;;  c               1   40[BANK0 ] char 
 14564 ;;  flag            1   39[BANK0 ] unsigned char 
 14565 ;;  prec            1   30[BANK0 ] char 
 14566 ;; Return value:  Size  Location     Type
 14567 ;;                  2   14[BANK0 ] int 
 14568 ;; Registers used:
 14569 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14570 ;; Tracked objects:
 14571 ;;		On entry : 0/0
 14572 ;;		On exit  : 0/0
 14573 ;;		Unchanged: 0/0
 14574 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14575 ;;      Params:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14576 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14577 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14578 ;;      Totals:         0      29       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14579 ;;Total ram usage:       29 bytes
 14580 ;; Hardware stack levels used:    1
 14581 ;; Hardware stack levels required when called:    9
 14582 ;; This function calls:
 14583 ;;		___lwdiv
 14584 ;;		___lwmod
 14585 ;;		___wmul
 14586 ;;		_isdigit
 14587 ;;		_putch
 14588 ;; This function is called by:
 14589 ;;		_UI
 14590 ;;		_change_state_to_menu_start
 14591 ;;		_change_state_to_menu_12
 14592 ;;		_change_state_to_menu_22
 14593 ;;		_printRTC
 14594 ;;		_EEPROM_write
 14595 ;;		_Test
 14596 ;;		_algorithmTest
 14597 ;;		_sensorTest
 14598 ;;		_actuatorTest
 14599 ;;		_BothServos
 14600 ;;		_PortTestA5
 14601 ;;		_PusherTest
 14602 ;;		_SpeedTest
 14603 ;;		_BlockerTest
 14604 ;;		_ToggleTestA5
 14605 ;; This function uses a non-reentrant model
 14606 ;;
 14607                           
 14608                           	psect	text51
 14609  001170                     __ptext51:
 14610                           	opt stack 0
 14611  001170                     _printf:
 14612                           	opt stack 18
 14613                           
 14614                           ;doprnt.c: 466: va_list ap;
 14615                           ;doprnt.c: 499: signed char c;
 14616                           ;doprnt.c: 501: int width;
 14617                           ;doprnt.c: 506: signed char prec;
 14618                           ;doprnt.c: 508: unsigned char flag;
 14619                           ;doprnt.c: 523: union {
 14620                           ;doprnt.c: 524: unsigned long vd;
 14621                           ;doprnt.c: 525: double integ;
 14622                           ;doprnt.c: 526: } tmpval;
 14623                           ;doprnt.c: 528: unsigned int val;
 14624                           ;doprnt.c: 529: unsigned len;
 14625                           ;doprnt.c: 530: const char * cp;
 14626                           ;doprnt.c: 533: *ap = __va_start();
 14627                           
 14628                           ;incstack = 0
 14629  001170  0E90               	movlw	low (?_printf+2)
 14630  001172  0100               	movlb	0	; () banked
 14631  001174  6FA1               	movwf	printf@ap& (0+255),b
 14632  001176  0E00               	movlw	high (?_printf+2)
 14633  001178  0100               	movlb	0	; () banked
 14634  00117A  6FA2               	movwf	(printf@ap+1)& (0+255),b
 14635                           
 14636                           ;doprnt.c: 536: while(c = *f++) {
 14637  00117C  D205               	goto	l5798
 14638  00117E                     l5668:
 14639                           
 14640                           ; BSR set to: 0
 14641                           ;doprnt.c: 538: if(c != '%')
 14642  00117E  0E25               	movlw	37
 14643  001180  0100               	movlb	0	; () banked
 14644  001182  19A8               	xorwf	printf@c& (0+255),w,b
 14645  001184  B4D8               	btfsc	status,2,c
 14646  001186  D005               	goto	l5672
 14647                           
 14648                           ; BSR set to: 0
 14649                           ;doprnt.c: 540: {
 14650                           ;doprnt.c: 541: (putch(c) );
 14651  001188  0100               	movlb	0	; () banked
 14652  00118A  51A8               	movf	printf@c& (0+255),w,b
 14653  00118C  EC90  F025         	call	_putch
 14654                           
 14655                           ;doprnt.c: 542: continue;
 14656  001190  D1FB               	goto	l5798
 14657  001192                     l5672:
 14658                           
 14659                           ;doprnt.c: 543: }
 14660                           ;doprnt.c: 546: width = 0;
 14661  001192  0E00               	movlw	0
 14662  001194  0100               	movlb	0	; () banked
 14663  001196  6FAA               	movwf	(printf@width+1)& (0+255),b
 14664  001198  0E00               	movlw	0
 14665  00119A  6FA9               	movwf	printf@width& (0+255),b
 14666                           
 14667                           ;doprnt.c: 548: flag = 0;
 14668  00119C  0E00               	movlw	0
 14669  00119E  0100               	movlb	0	; () banked
 14670  0011A0  6FA7               	movwf	printf@flag& (0+255),b
 14671                           
 14672                           ; BSR set to: 0
 14673                           ;doprnt.c: 551: switch(*f) {
 14674                           
 14675                           ;doprnt.c: 550: for(;;) {
 14676  0011A2  D005               	goto	l5678
 14677  0011A4                     l5674:
 14678                           
 14679                           ;doprnt.c: 580: flag |= 0x04;
 14680  0011A4  0100               	movlb	0	; () banked
 14681  0011A6  85A7               	bsf	printf@flag& (0+255),2,b
 14682                           
 14683                           ;doprnt.c: 581: f++;
 14684  0011A8  0100               	movlb	0	; () banked
 14685  0011AA  4B8E               	infsnz	printf@f& (0+255),f,b
 14686  0011AC  2B8F               	incf	(printf@f+1)& (0+255),f,b
 14687  0011AE                     l5678:
 14688  0011AE  C08E  FFF6         	movff	printf@f,tblptrl
 14689  0011B2  C08F  FFF7         	movff	printf@f+1,tblptrh
 14690  0011B6                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 14691  0011B6  6AF8               	clrf	tblptru,c
 14692  0011B8                     	endif
 14693  0011B8                     	if	0	;tblptru may be non-zero
 14694  0011B8                     	endif
 14695  0011B8  0008               	tblrd		*
 14696  0011BA  50F5               	movf	tablat,w,c
 14697                           
 14698                           ; Switch size 1, requested type "space"
 14699                           ; Number of cases is 1, Range of values is 48 to 48
 14700                           ; switch strategies available:
 14701                           ; Name         Instructions Cycles
 14702                           ; simple_byte            4     3 (average)
 14703                           ;	Chosen strategy is simple_byte
 14704  0011BC  0A30               	xorlw	48	; case 48
 14705  0011BE  B4D8               	btfsc	status,2,c
 14706  0011C0  D7F1               	goto	l5674
 14707                           
 14708                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 14709                           
 14710                           ;doprnt.c: 586: }
 14711                           
 14712                           ;doprnt.c: 585: break;
 14713  0011C2  C08E  FFF6         	movff	printf@f,tblptrl
 14714  0011C6  C08F  FFF7         	movff	printf@f+1,tblptrh
 14715  0011CA                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 14716  0011CA  6AF8               	clrf	tblptru,c
 14717  0011CC                     	endif
 14718  0011CC                     	if	0	;tblptru may be non-zero
 14719  0011CC                     	endif
 14720  0011CC  0008               	tblrd		*
 14721  0011CE  50F5               	movf	tablat,w,c
 14722  0011D0  ECB5  F024         	call	_isdigit
 14723  0011D4  A0D8               	btfss	status,0,c
 14724  0011D6  D0D2               	goto	l5726
 14725                           
 14726                           ;doprnt.c: 598: width = 0;
 14727  0011D8  0E00               	movlw	0
 14728  0011DA  0100               	movlb	0	; () banked
 14729  0011DC  6FAA               	movwf	(printf@width+1)& (0+255),b
 14730  0011DE  0E00               	movlw	0
 14731  0011E0  6FA9               	movwf	printf@width& (0+255),b
 14732  0011E2                     l5684:
 14733                           
 14734                           ;doprnt.c: 600: width *= 10;
 14735  0011E2  C0A9  F080         	movff	printf@width,___wmul@multiplier
 14736  0011E6  C0AA  F081         	movff	printf@width+1,___wmul@multiplier+1
 14737  0011EA  0E00               	movlw	0
 14738  0011EC  0100               	movlb	0	; () banked
 14739  0011EE  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
 14740  0011F0  0E0A               	movlw	10
 14741  0011F2  6F82               	movwf	___wmul@multiplicand& (0+255),b
 14742  0011F4  EC1F  F023         	call	___wmul	;wreg free
 14743  0011F8  C080  F0A9         	movff	?___wmul,printf@width
 14744  0011FC  C081  F0AA         	movff	?___wmul+1,printf@width+1
 14745                           
 14746                           ;doprnt.c: 601: width += *f++ - '0';
 14747  001200  0ED0               	movlw	208
 14748  001202  0100               	movlb	0	; () banked
 14749  001204  6F9A               	movwf	??_printf& (0+255),b
 14750  001206  0EFF               	movlw	255
 14751  001208  0100               	movlb	0	; () banked
 14752  00120A  6F9B               	movwf	(??_printf+1)& (0+255),b
 14753  00120C  C08E  FFF6         	movff	printf@f,tblptrl
 14754  001210  C08F  FFF7         	movff	printf@f+1,tblptrh
 14755  001214                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 14756  001214  6AF8               	clrf	tblptru,c
 14757  001216                     	endif
 14758  001216                     	if	0	;tblptru may be non-zero
 14759  001216                     	endif
 14760  001216  0008               	tblrd		*
 14761  001218  50F5               	movf	tablat,w,c
 14762  00121A  0100               	movlb	0	; () banked
 14763  00121C  6F9C               	movwf	(??_printf+2)& (0+255),b
 14764  00121E  6B9D               	clrf	(??_printf+3)& (0+255),b
 14765  001220  0100               	movlb	0	; () banked
 14766  001222  519A               	movf	??_printf& (0+255),w,b
 14767  001224  0100               	movlb	0	; () banked
 14768  001226  279C               	addwf	(??_printf+2)& (0+255),f,b
 14769  001228  0100               	movlb	0	; () banked
 14770  00122A  519B               	movf	(??_printf+1)& (0+255),w,b
 14771  00122C  0100               	movlb	0	; () banked
 14772  00122E  239D               	addwfc	(??_printf+3)& (0+255),f,b
 14773  001230  0100               	movlb	0	; () banked
 14774  001232  519C               	movf	(??_printf+2)& (0+255),w,b
 14775  001234  0100               	movlb	0	; () banked
 14776  001236  27A9               	addwf	printf@width& (0+255),f,b
 14777  001238  0100               	movlb	0	; () banked
 14778  00123A  519D               	movf	(??_printf+3)& (0+255),w,b
 14779  00123C  0100               	movlb	0	; () banked
 14780  00123E  23AA               	addwfc	(printf@width+1)& (0+255),f,b
 14781                           
 14782                           ; BSR set to: 0
 14783  001240  0100               	movlb	0	; () banked
 14784  001242  4B8E               	infsnz	printf@f& (0+255),f,b
 14785  001244  2B8F               	incf	(printf@f+1)& (0+255),f,b
 14786                           
 14787                           ; BSR set to: 0
 14788                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 14789  001246  C08E  FFF6         	movff	printf@f,tblptrl
 14790  00124A  C08F  FFF7         	movff	printf@f+1,tblptrh
 14791  00124E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 14792  00124E  6AF8               	clrf	tblptru,c
 14793  001250                     	endif
 14794  001250                     	if	0	;tblptru may be non-zero
 14795  001250                     	endif
 14796  001250  0008               	tblrd		*
 14797  001252  50F5               	movf	tablat,w,c
 14798  001254  ECB5  F024         	call	_isdigit
 14799  001258  A0D8               	btfss	status,0,c
 14800  00125A  D090               	goto	l5726
 14801  00125C  D7C2               	goto	l5684
 14802  00125E                     l5692:
 14803                           
 14804                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 14805  00125E  C0A1  FFD9         	movff	printf@ap,fsr2l
 14806  001262  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 14807  001266  CFDE F09F          	movff	postinc2,printf@cp
 14808  00126A  CFDD F0A0          	movff	postdec2,printf@cp+1
 14809  00126E  0E02               	movlw	2
 14810  001270  0100               	movlb	0	; () banked
 14811  001272  27A1               	addwf	printf@ap& (0+255),f,b
 14812  001274  0E00               	movlw	0
 14813  001276  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 14814                           
 14815                           ; BSR set to: 0
 14816                           ;doprnt.c: 740: if(!cp)
 14817  001278  0100               	movlb	0	; () banked
 14818  00127A  519F               	movf	printf@cp& (0+255),w,b
 14819  00127C  0100               	movlb	0	; () banked
 14820  00127E  11A0               	iorwf	(printf@cp+1)& (0+255),w,b
 14821  001280  A4D8               	btfss	status,2,c
 14822  001282  D006               	goto	l5700
 14823                           
 14824                           ; BSR set to: 0
 14825                           ;doprnt.c: 741: cp = "(null)";
 14826  001284  0EB6               	movlw	low STR_120
 14827  001286  0100               	movlb	0	; () banked
 14828  001288  6F9F               	movwf	printf@cp& (0+255),b
 14829  00128A  0EFF               	movlw	high STR_120
 14830  00128C  0100               	movlb	0	; () banked
 14831  00128E  6FA0               	movwf	(printf@cp+1)& (0+255),b
 14832  001290                     l5700:
 14833                           
 14834                           ; BSR set to: 0
 14835                           ;doprnt.c: 745: len = 0;
 14836  001290  0E00               	movlw	0
 14837  001292  0100               	movlb	0	; () banked
 14838  001294  6FA4               	movwf	(printf@len+1)& (0+255),b
 14839  001296  0E00               	movlw	0
 14840  001298  6FA3               	movwf	printf@len& (0+255),b
 14841                           
 14842                           ;doprnt.c: 746: while(cp[len])
 14843  00129A  D003               	goto	l5704
 14844  00129C                     l5702:
 14845                           
 14846                           ;doprnt.c: 747: len++;
 14847  00129C  0100               	movlb	0	; () banked
 14848  00129E  4BA3               	infsnz	printf@len& (0+255),f,b
 14849  0012A0  2BA4               	incf	(printf@len+1)& (0+255),f,b
 14850  0012A2                     l5704:
 14851                           
 14852                           ; BSR set to: 0
 14853  0012A2  0100               	movlb	0	; () banked
 14854  0012A4  51A3               	movf	printf@len& (0+255),w,b
 14855  0012A6  0100               	movlb	0	; () banked
 14856  0012A8  259F               	addwf	printf@cp& (0+255),w,b
 14857  0012AA  0100               	movlb	0	; () banked
 14858  0012AC  6F9A               	movwf	??_printf& (0+255),b
 14859  0012AE  0100               	movlb	0	; () banked
 14860  0012B0  51A4               	movf	(printf@len+1)& (0+255),w,b
 14861  0012B2  0100               	movlb	0	; () banked
 14862  0012B4  21A0               	addwfc	(printf@cp+1)& (0+255),w,b
 14863  0012B6  0100               	movlb	0	; () banked
 14864  0012B8  6F9B               	movwf	(??_printf+1)& (0+255),b
 14865  0012BA  C09A  FFF6         	movff	??_printf,tblptrl
 14866  0012BE  C09B  FFF7         	movff	??_printf+1,tblptrh
 14867  0012C2  0E00               	movlw	low (__mediumconst shr (0+16))
 14868  0012C4  6EF8               	movwf	tblptru,c
 14869  0012C6  0E0F               	movlw	(high __ramtop+-1)
 14870  0012C8  64F7               	cpfsgt	tblptrh,c
 14871  0012CA  D003               	bra	u4127
 14872  0012CC  0008               	tblrd		*
 14873  0012CE  50F5               	movf	tablat,w,c
 14874  0012D0  D005               	bra	u4120
 14875  0012D2                     u4127:
 14876  0012D2  CFF6 FFE9          	movff	tblptrl,fsr0l
 14877  0012D6  CFF7 FFEA          	movff	tblptrh,fsr0h
 14878  0012DA  50EF               	movf	indf0,w,c
 14879  0012DC                     u4120:
 14880  0012DC  0900               	iorlw	0
 14881  0012DE  A4D8               	btfss	status,2,c
 14882  0012E0  D7DD               	goto	l5702
 14883                           
 14884                           ;doprnt.c: 757: if(width > len)
 14885  0012E2  0100               	movlb	0	; () banked
 14886  0012E4  51A9               	movf	printf@width& (0+255),w,b
 14887  0012E6  0100               	movlb	0	; () banked
 14888  0012E8  5DA3               	subwf	printf@len& (0+255),w,b
 14889  0012EA  0100               	movlb	0	; () banked
 14890  0012EC  51AA               	movf	(printf@width+1)& (0+255),w,b
 14891  0012EE  0100               	movlb	0	; () banked
 14892  0012F0  59A4               	subwfb	(printf@len+1)& (0+255),w,b
 14893  0012F2  B0D8               	btfsc	status,0,c
 14894  0012F4  D009               	goto	l5710
 14895                           
 14896                           ; BSR set to: 0
 14897                           ;doprnt.c: 758: width -= len;
 14898  0012F6  0100               	movlb	0	; () banked
 14899  0012F8  51A3               	movf	printf@len& (0+255),w,b
 14900  0012FA  0100               	movlb	0	; () banked
 14901  0012FC  5FA9               	subwf	printf@width& (0+255),f,b
 14902  0012FE  0100               	movlb	0	; () banked
 14903  001300  51A4               	movf	(printf@len+1)& (0+255),w,b
 14904  001302  0100               	movlb	0	; () banked
 14905  001304  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
 14906  001306  D009               	goto	l5714
 14907  001308                     l5710:
 14908                           
 14909                           ; BSR set to: 0
 14910                           ;doprnt.c: 759: else
 14911                           ;doprnt.c: 760: width = 0;
 14912  001308  0E00               	movlw	0
 14913  00130A  0100               	movlb	0	; () banked
 14914  00130C  6FAA               	movwf	(printf@width+1)& (0+255),b
 14915  00130E  0E00               	movlw	0
 14916  001310  6FA9               	movwf	printf@width& (0+255),b
 14917                           
 14918                           ; BSR set to: 0
 14919                           ;doprnt.c: 764: while(width--)
 14920  001312  D003               	goto	l5714
 14921  001314                     l5712:
 14922                           
 14923                           ; BSR set to: 0
 14924                           ;doprnt.c: 765: (putch(' ') );
 14925  001314  0E20               	movlw	32
 14926  001316  EC90  F025         	call	_putch
 14927  00131A                     l5714:
 14928  00131A  0100               	movlb	0	; () banked
 14929  00131C  07A9               	decf	printf@width& (0+255),f,b
 14930  00131E  A0D8               	btfss	status,0,c
 14931  001320  07AA               	decf	(printf@width+1)& (0+255),f,b
 14932  001322  0100               	movlb	0	; () banked
 14933  001324  29A9               	incf	printf@width& (0+255),w,b
 14934  001326  E1F6               	bnz	l5712
 14935  001328  0100               	movlb	0	; () banked
 14936  00132A  29AA               	incf	(printf@width+1)& (0+255),w,b
 14937  00132C  B4D8               	btfsc	status,2,c
 14938  00132E  D017               	goto	l5720
 14939  001330  D7F1               	goto	l5712
 14940  001332                     l5716:
 14941                           
 14942                           ; BSR set to: 0
 14943                           ;doprnt.c: 768: (putch(*cp++) );
 14944  001332  C09F  FFF6         	movff	printf@cp,tblptrl
 14945  001336  C0A0  FFF7         	movff	printf@cp+1,tblptrh
 14946  00133A  0E00               	movlw	low (__mediumconst shr (0+16))
 14947  00133C  6EF8               	movwf	tblptru,c
 14948  00133E  0E0F               	movlw	(high __ramtop+-1)
 14949  001340  64F7               	cpfsgt	tblptrh,c
 14950  001342  D003               	bra	u4167
 14951  001344  0008               	tblrd		*
 14952  001346  50F5               	movf	tablat,w,c
 14953  001348  D005               	bra	u4160
 14954  00134A                     u4167:
 14955  00134A  CFF6 FFE9          	movff	tblptrl,fsr0l
 14956  00134E  CFF7 FFEA          	movff	tblptrh,fsr0h
 14957  001352  50EF               	movf	indf0,w,c
 14958  001354                     u4160:
 14959  001354  EC90  F025         	call	_putch
 14960  001358  0100               	movlb	0	; () banked
 14961  00135A  4B9F               	infsnz	printf@cp& (0+255),f,b
 14962  00135C  2BA0               	incf	(printf@cp+1)& (0+255),f,b
 14963  00135E                     l5720:
 14964                           
 14965                           ; BSR set to: 0
 14966  00135E  0100               	movlb	0	; () banked
 14967  001360  07A3               	decf	printf@len& (0+255),f,b
 14968  001362  A0D8               	btfss	status,0,c
 14969  001364  07A4               	decf	(printf@len+1)& (0+255),f,b
 14970  001366  0100               	movlb	0	; () banked
 14971  001368  29A3               	incf	printf@len& (0+255),w,b
 14972  00136A  E1E3               	bnz	l5716
 14973  00136C  0100               	movlb	0	; () banked
 14974  00136E  29A4               	incf	(printf@len+1)& (0+255),w,b
 14975  001370  B4D8               	btfsc	status,2,c
 14976  001372  D10A               	goto	l5798
 14977  001374  D7DE               	goto	l5716
 14978  001376                     l5722:
 14979                           
 14980                           ; BSR set to: 0
 14981                           ;doprnt.c: 818: flag |= 0x40;
 14982  001376  0100               	movlb	0	; () banked
 14983  001378  8DA7               	bsf	printf@flag& (0+255),6,b
 14984                           
 14985                           ; BSR set to: 0
 14986                           ;doprnt.c: 822: }
 14987                           
 14988                           ;doprnt.c: 819: break;
 14989  00137A  D01D               	goto	l1320
 14990  00137C                     l5726:
 14991  00137C  C08E  FFF6         	movff	printf@f,tblptrl
 14992  001380  C08F  FFF7         	movff	printf@f+1,tblptrh
 14993  001384  0100               	movlb	0	; () banked
 14994  001386  4B8E               	infsnz	printf@f& (0+255),f,b
 14995  001388  2B8F               	incf	(printf@f+1)& (0+255),f,b
 14996  00138A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 14997  00138A  6AF8               	clrf	tblptru,c
 14998  00138C                     	endif
 14999  00138C                     	if	0	;tblptru may be non-zero
 15000  00138C                     	endif
 15001  00138C  0008               	tblrd		*
 15002  00138E  CFF5 F0A8          	movff	tablat,printf@c
 15003  001392  0100               	movlb	0	; () banked
 15004  001394  51A8               	movf	printf@c& (0+255),w,b
 15005                           
 15006                           ; Switch size 1, requested type "space"
 15007                           ; Number of cases is 5, Range of values is 0 to 117
 15008                           ; switch strategies available:
 15009                           ; Name         Instructions Cycles
 15010                           ; simple_byte           16     9 (average)
 15011                           ;	Chosen strategy is simple_byte
 15012  001396  0A00               	xorlw	0	; case 0
 15013  001398  B4D8               	btfsc	status,2,c
 15014  00139A  0012               	return	
 15015  00139C  0A64               	xorlw	100	; case 100
 15016  00139E  B4D8               	btfsc	status,2,c
 15017  0013A0  D00A               	goto	l1320
 15018  0013A2  0A0D               	xorlw	13	; case 105
 15019  0013A4  B4D8               	btfsc	status,2,c
 15020  0013A6  D007               	goto	l1320
 15021  0013A8  0A1A               	xorlw	26	; case 115
 15022  0013AA  B4D8               	btfsc	status,2,c
 15023  0013AC  D758               	goto	l5692
 15024  0013AE  0A06               	xorlw	6	; case 117
 15025  0013B0  B4D8               	btfsc	status,2,c
 15026  0013B2  D7E1               	goto	l5722
 15027  0013B4  D0E9               	goto	l5798
 15028  0013B6                     l1320:
 15029                           
 15030                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
 15031  0013B6  0100               	movlb	0	; () banked
 15032  0013B8  BDA7               	btfsc	printf@flag& (0+255),6,b
 15033  0013BA  D019               	goto	l5738
 15034                           
 15035                           ; BSR set to: 0
 15036                           ;doprnt.c: 1253: {
 15037                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 15038  0013BC  C0A1  FFD9         	movff	printf@ap,fsr2l
 15039  0013C0  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 15040  0013C4  CFDE F0A5          	movff	postinc2,printf@val
 15041  0013C8  CFDD F0A6          	movff	postdec2,printf@val+1
 15042                           
 15043                           ; BSR set to: 0
 15044  0013CC  0E02               	movlw	2
 15045  0013CE  0100               	movlb	0	; () banked
 15046  0013D0  27A1               	addwf	printf@ap& (0+255),f,b
 15047  0013D2  0E00               	movlw	0
 15048  0013D4  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 15049                           
 15050                           ; BSR set to: 0
 15051                           ;doprnt.c: 1261: if((int)val < 0) {
 15052  0013D6  0100               	movlb	0	; () banked
 15053  0013D8  AFA6               	btfss	(printf@val+1)& (0+255),7,b
 15054  0013DA  D016               	goto	l5742
 15055                           
 15056                           ; BSR set to: 0
 15057                           ;doprnt.c: 1262: flag |= 0x03;
 15058  0013DC  0E03               	movlw	3
 15059  0013DE  0100               	movlb	0	; () banked
 15060  0013E0  13A7               	iorwf	printf@flag& (0+255),f,b
 15061                           
 15062                           ; BSR set to: 0
 15063                           ;doprnt.c: 1263: val = -val;
 15064  0013E2  0100               	movlb	0	; () banked
 15065  0013E4  6DA5               	negf	printf@val& (0+255),b
 15066  0013E6  1FA6               	comf	(printf@val+1)& (0+255),f,b
 15067  0013E8  B0D8               	btfsc	status,0,c
 15068  0013EA  2BA6               	incf	(printf@val+1)& (0+255),f,b
 15069                           
 15070                           ; BSR set to: 0
 15071                           ;doprnt.c: 1264: }
 15072                           ;doprnt.c: 1266: }
 15073  0013EC  D00D               	goto	l5742
 15074  0013EE                     l5738:
 15075                           
 15076                           ; BSR set to: 0
 15077                           ;doprnt.c: 1268: else
 15078                           ;doprnt.c: 1273: {
 15079                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 15080  0013EE  C0A1  FFD9         	movff	printf@ap,fsr2l
 15081  0013F2  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 15082  0013F6  CFDE F0A5          	movff	postinc2,printf@val
 15083  0013FA  CFDD F0A6          	movff	postdec2,printf@val+1
 15084                           
 15085                           ; BSR set to: 0
 15086  0013FE  0E02               	movlw	2
 15087  001400  0100               	movlb	0	; () banked
 15088  001402  27A1               	addwf	printf@ap& (0+255),f,b
 15089  001404  0E00               	movlw	0
 15090  001406  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 15091  001408                     l5742:
 15092                           
 15093                           ; BSR set to: 0
 15094                           ;doprnt.c: 1287: }
 15095                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 15096  001408  0E01               	movlw	1
 15097  00140A  0100               	movlb	0	; () banked
 15098  00140C  6FA8               	movwf	printf@c& (0+255),b
 15099  00140E                     l5744:
 15100                           
 15101                           ; BSR set to: 0
 15102  00140E  0E05               	movlw	5
 15103  001410  0100               	movlb	0	; () banked
 15104  001412  19A8               	xorwf	printf@c& (0+255),w,b
 15105  001414  B4D8               	btfsc	status,2,c
 15106  001416  D019               	goto	l5756
 15107                           
 15108                           ; BSR set to: 0
 15109                           ;doprnt.c: 1306: if(val < dpowers[c])
 15110                           
 15111                           ; BSR set to: 0
 15112                           
 15113                           ; BSR set to: 0
 15114  001418  0100               	movlb	0	; () banked
 15115  00141A  51A8               	movf	printf@c& (0+255),w,b
 15116  00141C  0D02               	mullw	2
 15117  00141E  0E12               	movlw	low _dpowers
 15118  001420  24F3               	addwf	prodl,w,c
 15119  001422  6EF6               	movwf	tblptrl,c
 15120  001424  0EFB               	movlw	high _dpowers
 15121  001426  20F4               	addwfc	prodh,w,c
 15122  001428  6EF7               	movwf	tblptrh,c
 15123  00142A                     	if	1	;There are 3 active tblptr bytes
 15124  00142A  6AF8               	clrf	tblptru,c
 15125  00142C  0E00               	movlw	low (__mediumconst shr (0+16))
 15126  00142E  22F8               	addwfc	tblptru,f,c
 15127  001430                     	endif
 15128  001430  0009               	tblrd		*+
 15129  001432  50F5               	movf	tablat,w,c
 15130  001434  0100               	movlb	0	; () banked
 15131  001436  5DA5               	subwf	printf@val& (0+255),w,b
 15132  001438  0009               	tblrd		*+
 15133  00143A  50F5               	movf	tablat,w,c
 15134  00143C  0100               	movlb	0	; () banked
 15135  00143E  59A6               	subwfb	(printf@val+1)& (0+255),w,b
 15136  001440  A0D8               	btfss	status,0,c
 15137  001442  D003               	goto	l5756
 15138                           
 15139                           ; BSR set to: 0
 15140                           
 15141                           ; BSR set to: 0
 15142                           
 15143                           ; BSR set to: 0
 15144                           ;doprnt.c: 1307: break;
 15145  001444  0100               	movlb	0	; () banked
 15146  001446  2BA8               	incf	printf@c& (0+255),f,b
 15147  001448  D7E2               	goto	l5744
 15148  00144A                     l5756:
 15149                           
 15150                           ; BSR set to: 0
 15151                           ;doprnt.c: 1345: if(width && flag & 0x03)
 15152  00144A  0100               	movlb	0	; () banked
 15153  00144C  51A9               	movf	printf@width& (0+255),w,b
 15154  00144E  0100               	movlb	0	; () banked
 15155  001450  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 15156  001452  B4D8               	btfsc	status,2,c
 15157  001454  D00B               	goto	l5762
 15158                           
 15159                           ; BSR set to: 0
 15160  001456  C0A7  F09A         	movff	printf@flag,??_printf
 15161  00145A  0E03               	movlw	3
 15162  00145C  0100               	movlb	0	; () banked
 15163  00145E  179A               	andwf	??_printf& (0+255),f,b
 15164  001460  B4D8               	btfsc	status,2,c
 15165  001462  D004               	goto	l5762
 15166                           
 15167                           ; BSR set to: 0
 15168                           ;doprnt.c: 1346: width--;
 15169  001464  0100               	movlb	0	; () banked
 15170  001466  07A9               	decf	printf@width& (0+255),f,b
 15171  001468  A0D8               	btfss	status,0,c
 15172  00146A  07AA               	decf	(printf@width+1)& (0+255),f,b
 15173  00146C                     l5762:
 15174                           
 15175                           ; BSR set to: 0
 15176                           ;doprnt.c: 1381: if(width > c)
 15177  00146C  0E80               	movlw	128
 15178  00146E  0100               	movlb	0	; () banked
 15179  001470  BFA8               	btfsc	printf@c& (0+255),7,b
 15180  001472  0E7F               	movlw	127
 15181  001474  0100               	movlb	0	; () banked
 15182  001476  6F9A               	movwf	??_printf& (0+255),b
 15183  001478  0100               	movlb	0	; () banked
 15184  00147A  51A9               	movf	printf@width& (0+255),w,b
 15185  00147C  0100               	movlb	0	; () banked
 15186  00147E  5DA8               	subwf	printf@c& (0+255),w,b
 15187  001480  0100               	movlb	0	; () banked
 15188  001482  51AA               	movf	(printf@width+1)& (0+255),w,b
 15189  001484  0A80               	xorlw	128
 15190  001486  0100               	movlb	0	; () banked
 15191  001488  599A               	subwfb	??_printf& (0+255),w,b
 15192  00148A  B0D8               	btfsc	status,0,c
 15193  00148C  D00B               	goto	l5766
 15194                           
 15195                           ; BSR set to: 0
 15196                           ;doprnt.c: 1382: width -= c;
 15197  00148E  0100               	movlb	0	; () banked
 15198  001490  51A8               	movf	printf@c& (0+255),w,b
 15199  001492  0100               	movlb	0	; () banked
 15200  001494  5FA9               	subwf	printf@width& (0+255),f,b
 15201  001496  0E00               	movlw	0
 15202  001498  0100               	movlb	0	; () banked
 15203  00149A  BFA8               	btfsc	printf@c& (0+255),7,b
 15204  00149C  0EFF               	movlw	255
 15205  00149E  0100               	movlb	0	; () banked
 15206  0014A0  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
 15207  0014A2  D005               	goto	l5768
 15208  0014A4                     l5766:
 15209                           
 15210                           ; BSR set to: 0
 15211                           ;doprnt.c: 1383: else
 15212                           ;doprnt.c: 1384: width = 0;
 15213  0014A4  0E00               	movlw	0
 15214  0014A6  0100               	movlb	0	; () banked
 15215  0014A8  6FAA               	movwf	(printf@width+1)& (0+255),b
 15216  0014AA  0E00               	movlw	0
 15217  0014AC  6FA9               	movwf	printf@width& (0+255),b
 15218  0014AE                     l5768:
 15219                           
 15220                           ; BSR set to: 0
 15221                           ;doprnt.c: 1387: if(flag & 0x04) {
 15222  0014AE  0100               	movlb	0	; () banked
 15223  0014B0  A5A7               	btfss	printf@flag& (0+255),2,b
 15224  0014B2  D018               	goto	l5780
 15225                           
 15226                           ; BSR set to: 0
 15227                           ;doprnt.c: 1392: if(flag & 0x03)
 15228  0014B4  C0A7  F09A         	movff	printf@flag,??_printf
 15229  0014B8  0E03               	movlw	3
 15230  0014BA  0100               	movlb	0	; () banked
 15231  0014BC  179A               	andwf	??_printf& (0+255),f,b
 15232  0014BE  B4D8               	btfsc	status,2,c
 15233  0014C0  D003               	goto	l5774
 15234                           
 15235                           ; BSR set to: 0
 15236                           ;doprnt.c: 1393: (putch('-') );
 15237  0014C2  0E2D               	movlw	45
 15238  0014C4  EC90  F025         	call	_putch
 15239  0014C8                     l5774:
 15240                           
 15241                           ;doprnt.c: 1415: if(width)
 15242  0014C8  0100               	movlb	0	; () banked
 15243  0014CA  51A9               	movf	printf@width& (0+255),w,b
 15244  0014CC  0100               	movlb	0	; () banked
 15245  0014CE  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 15246  0014D0  B4D8               	btfsc	status,2,c
 15247  0014D2  D025               	goto	l5790
 15248                           
 15249                           ; BSR set to: 0
 15250                           ;doprnt.c: 1417: (putch('0') );
 15251                           
 15252                           ; BSR set to: 0
 15253                           
 15254                           ;doprnt.c: 1416: do
 15255  0014D4  0E30               	movlw	48
 15256  0014D6  EC90  F025         	call	_putch
 15257                           
 15258                           ;doprnt.c: 1418: while(--width);
 15259  0014DA  0100               	movlb	0	; () banked
 15260  0014DC  07A9               	decf	printf@width& (0+255),f,b
 15261  0014DE  A0D8               	btfss	status,0,c
 15262  0014E0  07AA               	decf	(printf@width+1)& (0+255),f,b
 15263  0014E2  D7F2               	goto	l5774
 15264  0014E4                     l5780:
 15265                           
 15266                           ; BSR set to: 0
 15267                           ;doprnt.c: 1422: {
 15268                           ;doprnt.c: 1424: if(width
 15269                           ;doprnt.c: 1428: )
 15270  0014E4  0100               	movlb	0	; () banked
 15271  0014E6  51A9               	movf	printf@width& (0+255),w,b
 15272  0014E8  0100               	movlb	0	; () banked
 15273  0014EA  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 15274  0014EC  B4D8               	btfsc	status,2,c
 15275  0014EE  D00D               	goto	l5786
 15276  0014F0                     l5782:
 15277                           
 15278                           ; BSR set to: 0
 15279                           ;doprnt.c: 1430: (putch(' ') );
 15280  0014F0  0E20               	movlw	32
 15281  0014F2  EC90  F025         	call	_putch
 15282                           
 15283                           ;doprnt.c: 1431: while(--width);
 15284  0014F6  0100               	movlb	0	; () banked
 15285  0014F8  07A9               	decf	printf@width& (0+255),f,b
 15286  0014FA  A0D8               	btfss	status,0,c
 15287  0014FC  07AA               	decf	(printf@width+1)& (0+255),f,b
 15288  0014FE  0100               	movlb	0	; () banked
 15289  001500  51A9               	movf	printf@width& (0+255),w,b
 15290  001502  0100               	movlb	0	; () banked
 15291  001504  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 15292  001506  A4D8               	btfss	status,2,c
 15293  001508  D7F3               	goto	l5782
 15294  00150A                     l5786:
 15295                           
 15296                           ; BSR set to: 0
 15297                           ;doprnt.c: 1438: if(flag & 0x03)
 15298  00150A  C0A7  F09A         	movff	printf@flag,??_printf
 15299  00150E  0E03               	movlw	3
 15300  001510  0100               	movlb	0	; () banked
 15301  001512  179A               	andwf	??_printf& (0+255),f,b
 15302  001514  B4D8               	btfsc	status,2,c
 15303  001516  D003               	goto	l5790
 15304                           
 15305                           ; BSR set to: 0
 15306                           ;doprnt.c: 1439: (putch('-') );
 15307  001518  0E2D               	movlw	45
 15308  00151A  EC90  F025         	call	_putch
 15309  00151E                     l5790:
 15310                           
 15311                           ;doprnt.c: 1469: }
 15312                           ;doprnt.c: 1472: prec = c;
 15313  00151E  C0A8  F09E         	movff	printf@c,printf@prec
 15314                           
 15315                           ;doprnt.c: 1474: while(prec--) {
 15316  001522  D02C               	goto	l5796
 15317  001524                     l5792:
 15318                           
 15319                           ;doprnt.c: 1478: {
 15320                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 15321  001524  0100               	movlb	0	; () banked
 15322  001526  519E               	movf	printf@prec& (0+255),w,b
 15323  001528  0D02               	mullw	2
 15324  00152A  0E12               	movlw	low _dpowers
 15325  00152C  24F3               	addwf	prodl,w,c
 15326  00152E  6EF6               	movwf	tblptrl,c
 15327  001530  0EFB               	movlw	high _dpowers
 15328  001532  20F4               	addwfc	prodh,w,c
 15329  001534  6EF7               	movwf	tblptrh,c
 15330  001536                     	if	1	;There are 3 active tblptr bytes
 15331  001536  6AF8               	clrf	tblptru,c
 15332  001538  0E00               	movlw	low (__mediumconst shr (0+16))
 15333  00153A  22F8               	addwfc	tblptru,f,c
 15334  00153C                     	endif
 15335  00153C  0009               	tblrd		*+
 15336  00153E  CFF5 F082          	movff	tablat,___lwdiv@divisor
 15337  001542  000A               	tblrd		*-
 15338  001544  CFF5 F083          	movff	tablat,___lwdiv@divisor+1
 15339  001548  C0A5  F080         	movff	printf@val,___lwdiv@dividend
 15340  00154C  C0A6  F081         	movff	printf@val+1,___lwdiv@dividend+1
 15341  001550  EC83  F01F         	call	___lwdiv	;wreg free
 15342  001554  C080  F087         	movff	?___lwdiv,___lwmod@dividend
 15343  001558  C081  F088         	movff	?___lwdiv+1,___lwmod@dividend+1
 15344  00155C  0E00               	movlw	0
 15345  00155E  0100               	movlb	0	; () banked
 15346  001560  6F8A               	movwf	(___lwmod@divisor+1)& (0+255),b
 15347  001562  0E0A               	movlw	10
 15348  001564  6F89               	movwf	___lwmod@divisor& (0+255),b
 15349  001566  ECD7  F020         	call	___lwmod	;wreg free
 15350  00156A  0100               	movlb	0	; () banked
 15351  00156C  5187               	movf	?___lwmod& (0+255),w,b
 15352  00156E  0F30               	addlw	48
 15353  001570  0100               	movlb	0	; () banked
 15354  001572  6FA8               	movwf	printf@c& (0+255),b
 15355                           
 15356                           ; BSR set to: 0
 15357                           ;doprnt.c: 1523: }
 15358                           ;doprnt.c: 1524: (putch(c) );
 15359  001574  0100               	movlb	0	; () banked
 15360  001576  51A8               	movf	printf@c& (0+255),w,b
 15361  001578  EC90  F025         	call	_putch
 15362  00157C                     l5796:
 15363  00157C  0100               	movlb	0	; () banked
 15364  00157E  079E               	decf	printf@prec& (0+255),f,b
 15365  001580  0100               	movlb	0	; () banked
 15366  001582  299E               	incf	printf@prec& (0+255),w,b
 15367  001584  A4D8               	btfss	status,2,c
 15368  001586  D7CE               	goto	l5792
 15369  001588                     l5798:
 15370  001588  C08E  FFF6         	movff	printf@f,tblptrl
 15371  00158C  C08F  FFF7         	movff	printf@f+1,tblptrh
 15372  001590  0100               	movlb	0	; () banked
 15373  001592  4B8E               	infsnz	printf@f& (0+255),f,b
 15374  001594  2B8F               	incf	(printf@f+1)& (0+255),f,b
 15375  001596                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 15376  001596  6AF8               	clrf	tblptru,c
 15377  001598                     	endif
 15378  001598                     	if	0	;tblptru may be non-zero
 15379  001598                     	endif
 15380  001598  0008               	tblrd		*
 15381  00159A  CFF5 F0A8          	movff	tablat,printf@c
 15382  00159E  0100               	movlb	0	; () banked
 15383  0015A0  51A8               	movf	printf@c& (0+255),w,b
 15384  0015A2  B4D8               	btfsc	status,2,c
 15385  0015A4  0012               	return	
 15386  0015A6  D5EB               	goto	l5668
 15387  0015A8                     __end_of_printf:
 15388                           	opt stack 0
 15389                           tblptru	equ	0xFF8
 15390                           tblptrh	equ	0xFF7
 15391                           tblptrl	equ	0xFF6
 15392                           tablat	equ	0xFF5
 15393                           prodh	equ	0xFF4
 15394                           prodl	equ	0xFF3
 15395                           intcon	equ	0xFF2
 15396                           intcon2	equ	0xFF1
 15397                           intcon3	equ	0xFF0
 15398                           indf0	equ	0xFEF
 15399                           postinc0	equ	0xFEE
 15400                           fsr0h	equ	0xFEA
 15401                           fsr0l	equ	0xFE9
 15402                           wreg	equ	0xFE8
 15403                           postdec1	equ	0xFE5
 15404                           fsr1l	equ	0xFE1
 15405                           indf2	equ	0xFDF
 15406                           postinc2	equ	0xFDE
 15407                           postdec2	equ	0xFDD
 15408                           fsr2h	equ	0xFDA
 15409                           fsr2l	equ	0xFD9
 15410                           status	equ	0xFD8
 15411                           
 15412 ;; *************** function _putch *****************
 15413 ;; Defined at:
 15414 ;;		line 20 in file "lcd.c"
 15415 ;; Parameters:    Size  Location     Type
 15416 ;;  data            1    wreg     unsigned char 
 15417 ;; Auto vars:     Size  Location     Type
 15418 ;;  data            1    2[BANK0 ] unsigned char 
 15419 ;; Return value:  Size  Location     Type
 15420 ;;                  1    wreg      void 
 15421 ;; Registers used:
 15422 ;;		wreg, status,2, status,0, cstack
 15423 ;; Tracked objects:
 15424 ;;		On entry : 0/0
 15425 ;;		On exit  : 0/0
 15426 ;;		Unchanged: 0/0
 15427 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15428 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15429 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15430 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15431 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15432 ;;Total ram usage:        1 bytes
 15433 ;; Hardware stack levels used:    1
 15434 ;; Hardware stack levels required when called:    8
 15435 ;; This function calls:
 15436 ;;		_lcdNibble
 15437 ;; This function is called by:
 15438 ;;		_printf
 15439 ;; This function uses a non-reentrant model
 15440 ;;
 15441                           
 15442                           	psect	text52
 15443  004B20                     __ptext52:
 15444                           	opt stack 0
 15445  004B20                     _putch:
 15446                           	opt stack 18
 15447                           
 15448                           ;incstack = 0
 15449                           ;putch@data stored from wreg
 15450  004B20  0100               	movlb	0	; () banked
 15451  004B22  6F82               	movwf	putch@data& (0+255),b
 15452                           
 15453                           ;lcd.c: 21: LATDbits.LATD2 = 1;
 15454  004B24  848C               	bsf	3980,2,c	;volatile
 15455                           
 15456                           ;lcd.c: 22: lcdNibble(data);
 15457  004B26  0100               	movlb	0	; () banked
 15458  004B28  5182               	movf	putch@data& (0+255),w,b
 15459  004B2A  ECA3  F020         	call	_lcdNibble
 15460  004B2E  0012               	return		;funcret
 15461  004B30                     __end_of_putch:
 15462                           	opt stack 0
 15463                           tblptru	equ	0xFF8
 15464                           tblptrh	equ	0xFF7
 15465                           tblptrl	equ	0xFF6
 15466                           tablat	equ	0xFF5
 15467                           prodh	equ	0xFF4
 15468                           prodl	equ	0xFF3
 15469                           intcon	equ	0xFF2
 15470                           intcon2	equ	0xFF1
 15471                           intcon3	equ	0xFF0
 15472                           indf0	equ	0xFEF
 15473                           postinc0	equ	0xFEE
 15474                           fsr0h	equ	0xFEA
 15475                           fsr0l	equ	0xFE9
 15476                           wreg	equ	0xFE8
 15477                           postdec1	equ	0xFE5
 15478                           fsr1l	equ	0xFE1
 15479                           indf2	equ	0xFDF
 15480                           postinc2	equ	0xFDE
 15481                           postdec2	equ	0xFDD
 15482                           fsr2h	equ	0xFDA
 15483                           fsr2l	equ	0xFD9
 15484                           status	equ	0xFD8
 15485                           
 15486 ;; *************** function _isdigit *****************
 15487 ;; Defined at:
 15488 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 15489 ;; Parameters:    Size  Location     Type
 15490 ;;  c               1    wreg     unsigned char 
 15491 ;; Auto vars:     Size  Location     Type
 15492 ;;  c               1    2[BANK0 ] unsigned char 
 15493 ;; Return value:  Size  Location     Type
 15494 ;;		None               void
 15495 ;; Registers used:
 15496 ;;		wreg, status,2, status,0
 15497 ;; Tracked objects:
 15498 ;;		On entry : 0/0
 15499 ;;		On exit  : 0/0
 15500 ;;		Unchanged: 0/0
 15501 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15502 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15503 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15504 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15505 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15506 ;;Total ram usage:        3 bytes
 15507 ;; Hardware stack levels used:    1
 15508 ;; Hardware stack levels required when called:    7
 15509 ;; This function calls:
 15510 ;;		Nothing
 15511 ;; This function is called by:
 15512 ;;		_printf
 15513 ;; This function uses a non-reentrant model
 15514 ;;
 15515                           
 15516                           	psect	text53
 15517  00496A                     __ptext53:
 15518                           	opt stack 0
 15519  00496A                     _isdigit:
 15520                           	opt stack 19
 15521                           
 15522                           ;incstack = 0
 15523                           ;isdigit@c stored from wreg
 15524  00496A  0100               	movlb	0	; () banked
 15525  00496C  6F82               	movwf	isdigit@c& (0+255),b
 15526  00496E  0E00               	movlw	0
 15527  004970  0100               	movlb	0	; () banked
 15528  004972  6F81               	movwf	_isdigit$1961& (0+255),b
 15529                           
 15530                           ; BSR set to: 0
 15531  004974  0E3A               	movlw	58
 15532  004976  0100               	movlb	0	; () banked
 15533  004978  6182               	cpfslt	isdigit@c& (0+255),b
 15534  00497A  D007               	goto	l5516
 15535                           
 15536                           ; BSR set to: 0
 15537  00497C  0E2F               	movlw	47
 15538  00497E  0100               	movlb	0	; () banked
 15539  004980  6582               	cpfsgt	isdigit@c& (0+255),b
 15540  004982  D003               	goto	l5516
 15541                           
 15542                           ; BSR set to: 0
 15543  004984  0E01               	movlw	1
 15544  004986  0100               	movlb	0	; () banked
 15545  004988  6F81               	movwf	_isdigit$1961& (0+255),b
 15546  00498A                     l5516:
 15547                           
 15548                           ; BSR set to: 0
 15549  00498A  C081  F080         	movff	_isdigit$1961,??_isdigit
 15550  00498E  0100               	movlb	0	; () banked
 15551  004990  3180               	rrcf	??_isdigit& (0+255),w,b
 15552  004992  0012               	return	
 15553  004994                     __end_of_isdigit:
 15554                           	opt stack 0
 15555                           tblptru	equ	0xFF8
 15556                           tblptrh	equ	0xFF7
 15557                           tblptrl	equ	0xFF6
 15558                           tablat	equ	0xFF5
 15559                           prodh	equ	0xFF4
 15560                           prodl	equ	0xFF3
 15561                           intcon	equ	0xFF2
 15562                           intcon2	equ	0xFF1
 15563                           intcon3	equ	0xFF0
 15564                           indf0	equ	0xFEF
 15565                           postinc0	equ	0xFEE
 15566                           fsr0h	equ	0xFEA
 15567                           fsr0l	equ	0xFE9
 15568                           wreg	equ	0xFE8
 15569                           postdec1	equ	0xFE5
 15570                           fsr1l	equ	0xFE1
 15571                           indf2	equ	0xFDF
 15572                           postinc2	equ	0xFDE
 15573                           postdec2	equ	0xFDD
 15574                           fsr2h	equ	0xFDA
 15575                           fsr2l	equ	0xFD9
 15576                           status	equ	0xFD8
 15577                           
 15578 ;; *************** function ___wmul *****************
 15579 ;; Defined at:
 15580 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 15581 ;; Parameters:    Size  Location     Type
 15582 ;;  multiplier      2    0[BANK0 ] unsigned int 
 15583 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 15584 ;; Auto vars:     Size  Location     Type
 15585 ;;  product         2    4[BANK0 ] unsigned int 
 15586 ;; Return value:  Size  Location     Type
 15587 ;;                  2    0[BANK0 ] unsigned int 
 15588 ;; Registers used:
 15589 ;;		wreg, status,2, status,0, prodl, prodh
 15590 ;; Tracked objects:
 15591 ;;		On entry : 0/0
 15592 ;;		On exit  : 0/0
 15593 ;;		Unchanged: 0/0
 15594 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15595 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15596 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15597 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15598 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15599 ;;Total ram usage:        6 bytes
 15600 ;; Hardware stack levels used:    1
 15601 ;; Hardware stack levels required when called:    7
 15602 ;; This function calls:
 15603 ;;		Nothing
 15604 ;; This function is called by:
 15605 ;;		_printf
 15606 ;; This function uses a non-reentrant model
 15607 ;;
 15608                           
 15609                           	psect	text54
 15610  00463E                     __ptext54:
 15611                           	opt stack 0
 15612  00463E                     ___wmul:
 15613                           	opt stack 19
 15614                           
 15615                           ; BSR set to: 0
 15616                           ;incstack = 0
 15617  00463E  0100               	movlb	0	; () banked
 15618  004640  5180               	movf	___wmul@multiplier& (0+255),w,b
 15619  004642  0100               	movlb	0	; () banked
 15620  004644  0382               	mulwf	___wmul@multiplicand& (0+255),b
 15621  004646  CFF3 F084          	movff	prodl,___wmul@product
 15622  00464A  CFF4 F085          	movff	prodh,___wmul@product+1
 15623  00464E  0100               	movlb	0	; () banked
 15624  004650  5180               	movf	___wmul@multiplier& (0+255),w,b
 15625  004652  0100               	movlb	0	; () banked
 15626  004654  0383               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 15627  004656  50F3               	movf	prodl,w,c
 15628  004658  0100               	movlb	0	; () banked
 15629  00465A  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 15630  00465C  0100               	movlb	0	; () banked
 15631  00465E  5181               	movf	(___wmul@multiplier+1)& (0+255),w,b
 15632  004660  0100               	movlb	0	; () banked
 15633  004662  0382               	mulwf	___wmul@multiplicand& (0+255),b
 15634  004664  50F3               	movf	prodl,w,c
 15635  004666  0100               	movlb	0	; () banked
 15636  004668  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 15637                           
 15638                           ; BSR set to: 0
 15639  00466A  C084  F080         	movff	___wmul@product,?___wmul
 15640  00466E  C085  F081         	movff	___wmul@product+1,?___wmul+1
 15641  004672  0012               	return	
 15642  004674                     __end_of___wmul:
 15643                           	opt stack 0
 15644                           tblptru	equ	0xFF8
 15645                           tblptrh	equ	0xFF7
 15646                           tblptrl	equ	0xFF6
 15647                           tablat	equ	0xFF5
 15648                           prodh	equ	0xFF4
 15649                           prodl	equ	0xFF3
 15650                           intcon	equ	0xFF2
 15651                           intcon2	equ	0xFF1
 15652                           intcon3	equ	0xFF0
 15653                           indf0	equ	0xFEF
 15654                           postinc0	equ	0xFEE
 15655                           fsr0h	equ	0xFEA
 15656                           fsr0l	equ	0xFE9
 15657                           wreg	equ	0xFE8
 15658                           postdec1	equ	0xFE5
 15659                           fsr1l	equ	0xFE1
 15660                           indf2	equ	0xFDF
 15661                           postinc2	equ	0xFDE
 15662                           postdec2	equ	0xFDD
 15663                           fsr2h	equ	0xFDA
 15664                           fsr2l	equ	0xFD9
 15665                           status	equ	0xFD8
 15666                           
 15667 ;; *************** function ___lwmod *****************
 15668 ;; Defined at:
 15669 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 15670 ;; Parameters:    Size  Location     Type
 15671 ;;  dividend        2    7[BANK0 ] unsigned int 
 15672 ;;  divisor         2    9[BANK0 ] unsigned int 
 15673 ;; Auto vars:     Size  Location     Type
 15674 ;;  counter         1   11[BANK0 ] unsigned char 
 15675 ;; Return value:  Size  Location     Type
 15676 ;;                  2    7[BANK0 ] unsigned int 
 15677 ;; Registers used:
 15678 ;;		wreg, status,2, status,0
 15679 ;; Tracked objects:
 15680 ;;		On entry : 0/0
 15681 ;;		On exit  : 0/0
 15682 ;;		Unchanged: 0/0
 15683 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15684 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15685 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15686 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15687 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15688 ;;Total ram usage:        5 bytes
 15689 ;; Hardware stack levels used:    1
 15690 ;; Hardware stack levels required when called:    7
 15691 ;; This function calls:
 15692 ;;		Nothing
 15693 ;; This function is called by:
 15694 ;;		_printf
 15695 ;; This function uses a non-reentrant model
 15696 ;;
 15697                           
 15698                           	psect	text55
 15699  0041AE                     __ptext55:
 15700                           	opt stack 0
 15701  0041AE                     ___lwmod:
 15702                           	opt stack 19
 15703                           
 15704                           ; BSR set to: 0
 15705                           ;incstack = 0
 15706  0041AE  0100               	movlb	0	; () banked
 15707  0041B0  5189               	movf	___lwmod@divisor& (0+255),w,b
 15708  0041B2  0100               	movlb	0	; () banked
 15709  0041B4  118A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
 15710  0041B6  B4D8               	btfsc	status,2,c
 15711  0041B8  D026               	goto	l1777
 15712                           
 15713                           ; BSR set to: 0
 15714  0041BA  0E01               	movlw	1
 15715  0041BC  0100               	movlb	0	; () banked
 15716  0041BE  6F8B               	movwf	___lwmod@counter& (0+255),b
 15717  0041C0  D006               	goto	l5554
 15718  0041C2                     l5552:
 15719                           
 15720                           ; BSR set to: 0
 15721  0041C2  0100               	movlb	0	; () banked
 15722  0041C4  90D8               	bcf	status,0,c
 15723  0041C6  3789               	rlcf	___lwmod@divisor& (0+255),f,b
 15724  0041C8  378A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 15725  0041CA  0100               	movlb	0	; () banked
 15726  0041CC  2B8B               	incf	___lwmod@counter& (0+255),f,b
 15727  0041CE                     l5554:
 15728                           
 15729                           ; BSR set to: 0
 15730  0041CE  0100               	movlb	0	; () banked
 15731  0041D0  AF8A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 15732  0041D2  D7F7               	goto	l5552
 15733  0041D4                     l5556:
 15734                           
 15735                           ; BSR set to: 0
 15736  0041D4  0100               	movlb	0	; () banked
 15737  0041D6  5189               	movf	___lwmod@divisor& (0+255),w,b
 15738  0041D8  0100               	movlb	0	; () banked
 15739  0041DA  5D87               	subwf	___lwmod@dividend& (0+255),w,b
 15740  0041DC  0100               	movlb	0	; () banked
 15741  0041DE  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 15742  0041E0  0100               	movlb	0	; () banked
 15743  0041E2  5988               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 15744  0041E4  A0D8               	btfss	status,0,c
 15745  0041E6  D008               	goto	l5560
 15746                           
 15747                           ; BSR set to: 0
 15748  0041E8  0100               	movlb	0	; () banked
 15749  0041EA  5189               	movf	___lwmod@divisor& (0+255),w,b
 15750  0041EC  0100               	movlb	0	; () banked
 15751  0041EE  5F87               	subwf	___lwmod@dividend& (0+255),f,b
 15752  0041F0  0100               	movlb	0	; () banked
 15753  0041F2  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 15754  0041F4  0100               	movlb	0	; () banked
 15755  0041F6  5B88               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 15756  0041F8                     l5560:
 15757                           
 15758                           ; BSR set to: 0
 15759  0041F8  0100               	movlb	0	; () banked
 15760  0041FA  90D8               	bcf	status,0,c
 15761  0041FC  338A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 15762  0041FE  3389               	rrcf	___lwmod@divisor& (0+255),f,b
 15763                           
 15764                           ; BSR set to: 0
 15765  004200  0100               	movlb	0	; () banked
 15766  004202  2F8B               	decfsz	___lwmod@counter& (0+255),f,b
 15767  004204  D7E7               	goto	l5556
 15768  004206                     l1777:
 15769                           
 15770                           ; BSR set to: 0
 15771  004206  C087  F087         	movff	___lwmod@dividend,?___lwmod
 15772  00420A  C088  F088         	movff	___lwmod@dividend+1,?___lwmod+1
 15773                           
 15774                           ; BSR set to: 0
 15775  00420E  0012               	return		;funcret
 15776  004210                     __end_of___lwmod:
 15777                           	opt stack 0
 15778                           tblptru	equ	0xFF8
 15779                           tblptrh	equ	0xFF7
 15780                           tblptrl	equ	0xFF6
 15781                           tablat	equ	0xFF5
 15782                           prodh	equ	0xFF4
 15783                           prodl	equ	0xFF3
 15784                           intcon	equ	0xFF2
 15785                           intcon2	equ	0xFF1
 15786                           intcon3	equ	0xFF0
 15787                           indf0	equ	0xFEF
 15788                           postinc0	equ	0xFEE
 15789                           fsr0h	equ	0xFEA
 15790                           fsr0l	equ	0xFE9
 15791                           wreg	equ	0xFE8
 15792                           postdec1	equ	0xFE5
 15793                           fsr1l	equ	0xFE1
 15794                           indf2	equ	0xFDF
 15795                           postinc2	equ	0xFDE
 15796                           postdec2	equ	0xFDD
 15797                           fsr2h	equ	0xFDA
 15798                           fsr2l	equ	0xFD9
 15799                           status	equ	0xFD8
 15800                           
 15801 ;; *************** function ___lwdiv *****************
 15802 ;; Defined at:
 15803 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 15804 ;; Parameters:    Size  Location     Type
 15805 ;;  dividend        2    0[BANK0 ] unsigned int 
 15806 ;;  divisor         2    2[BANK0 ] unsigned int 
 15807 ;; Auto vars:     Size  Location     Type
 15808 ;;  quotient        2    4[BANK0 ] unsigned int 
 15809 ;;  counter         1    6[BANK0 ] unsigned char 
 15810 ;; Return value:  Size  Location     Type
 15811 ;;                  2    0[BANK0 ] unsigned int 
 15812 ;; Registers used:
 15813 ;;		wreg, status,2, status,0
 15814 ;; Tracked objects:
 15815 ;;		On entry : 0/0
 15816 ;;		On exit  : 0/0
 15817 ;;		Unchanged: 0/0
 15818 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15819 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15820 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15821 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15822 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15823 ;;Total ram usage:        7 bytes
 15824 ;; Hardware stack levels used:    1
 15825 ;; Hardware stack levels required when called:    7
 15826 ;; This function calls:
 15827 ;;		Nothing
 15828 ;; This function is called by:
 15829 ;;		_printf
 15830 ;; This function uses a non-reentrant model
 15831 ;;
 15832                           
 15833                           	psect	text56
 15834  003F06                     __ptext56:
 15835                           	opt stack 0
 15836  003F06                     ___lwdiv:
 15837                           	opt stack 19
 15838                           
 15839                           ; BSR set to: 0
 15840                           ;incstack = 0
 15841  003F06  0E00               	movlw	0
 15842  003F08  0100               	movlb	0	; () banked
 15843  003F0A  6F85               	movwf	(___lwdiv@quotient+1)& (0+255),b
 15844  003F0C  0E00               	movlw	0
 15845  003F0E  6F84               	movwf	___lwdiv@quotient& (0+255),b
 15846                           
 15847                           ; BSR set to: 0
 15848  003F10  0100               	movlb	0	; () banked
 15849  003F12  5182               	movf	___lwdiv@divisor& (0+255),w,b
 15850  003F14  0100               	movlb	0	; () banked
 15851  003F16  1183               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
 15852  003F18  B4D8               	btfsc	status,2,c
 15853  003F1A  D02C               	goto	l1767
 15854                           
 15855                           ; BSR set to: 0
 15856  003F1C  0E01               	movlw	1
 15857  003F1E  0100               	movlb	0	; () banked
 15858  003F20  6F86               	movwf	___lwdiv@counter& (0+255),b
 15859  003F22  D006               	goto	l5534
 15860  003F24                     l5532:
 15861                           
 15862                           ; BSR set to: 0
 15863  003F24  0100               	movlb	0	; () banked
 15864  003F26  90D8               	bcf	status,0,c
 15865  003F28  3782               	rlcf	___lwdiv@divisor& (0+255),f,b
 15866  003F2A  3783               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 15867  003F2C  0100               	movlb	0	; () banked
 15868  003F2E  2B86               	incf	___lwdiv@counter& (0+255),f,b
 15869  003F30                     l5534:
 15870                           
 15871                           ; BSR set to: 0
 15872  003F30  0100               	movlb	0	; () banked
 15873  003F32  AF83               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 15874  003F34  D7F7               	goto	l5532
 15875  003F36                     l5536:
 15876                           
 15877                           ; BSR set to: 0
 15878  003F36  0100               	movlb	0	; () banked
 15879  003F38  90D8               	bcf	status,0,c
 15880  003F3A  3784               	rlcf	___lwdiv@quotient& (0+255),f,b
 15881  003F3C  3785               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 15882                           
 15883                           ; BSR set to: 0
 15884  003F3E  0100               	movlb	0	; () banked
 15885  003F40  5182               	movf	___lwdiv@divisor& (0+255),w,b
 15886  003F42  0100               	movlb	0	; () banked
 15887  003F44  5D80               	subwf	___lwdiv@dividend& (0+255),w,b
 15888  003F46  0100               	movlb	0	; () banked
 15889  003F48  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 15890  003F4A  0100               	movlb	0	; () banked
 15891  003F4C  5981               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 15892  003F4E  A0D8               	btfss	status,0,c
 15893  003F50  D00A               	goto	l5544
 15894                           
 15895                           ; BSR set to: 0
 15896  003F52  0100               	movlb	0	; () banked
 15897  003F54  5182               	movf	___lwdiv@divisor& (0+255),w,b
 15898  003F56  0100               	movlb	0	; () banked
 15899  003F58  5F80               	subwf	___lwdiv@dividend& (0+255),f,b
 15900  003F5A  0100               	movlb	0	; () banked
 15901  003F5C  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 15902  003F5E  0100               	movlb	0	; () banked
 15903  003F60  5B81               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 15904                           
 15905                           ; BSR set to: 0
 15906  003F62  0100               	movlb	0	; () banked
 15907  003F64  8184               	bsf	___lwdiv@quotient& (0+255),0,b
 15908  003F66                     l5544:
 15909                           
 15910                           ; BSR set to: 0
 15911  003F66  0100               	movlb	0	; () banked
 15912  003F68  90D8               	bcf	status,0,c
 15913  003F6A  3383               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 15914  003F6C  3382               	rrcf	___lwdiv@divisor& (0+255),f,b
 15915                           
 15916                           ; BSR set to: 0
 15917  003F6E  0100               	movlb	0	; () banked
 15918  003F70  2F86               	decfsz	___lwdiv@counter& (0+255),f,b
 15919  003F72  D7E1               	goto	l5536
 15920  003F74                     l1767:
 15921                           
 15922                           ; BSR set to: 0
 15923  003F74  C084  F080         	movff	___lwdiv@quotient,?___lwdiv
 15924  003F78  C085  F081         	movff	___lwdiv@quotient+1,?___lwdiv+1
 15925                           
 15926                           ; BSR set to: 0
 15927  003F7C  0012               	return		;funcret
 15928  003F7E                     __end_of___lwdiv:
 15929                           	opt stack 0
 15930                           tblptru	equ	0xFF8
 15931                           tblptrh	equ	0xFF7
 15932                           tblptrl	equ	0xFF6
 15933                           tablat	equ	0xFF5
 15934                           prodh	equ	0xFF4
 15935                           prodl	equ	0xFF3
 15936                           intcon	equ	0xFF2
 15937                           intcon2	equ	0xFF1
 15938                           intcon3	equ	0xFF0
 15939                           indf0	equ	0xFEF
 15940                           postinc0	equ	0xFEE
 15941                           fsr0h	equ	0xFEA
 15942                           fsr0l	equ	0xFE9
 15943                           wreg	equ	0xFE8
 15944                           postdec1	equ	0xFE5
 15945                           fsr1l	equ	0xFE1
 15946                           indf2	equ	0xFDF
 15947                           postinc2	equ	0xFDE
 15948                           postdec2	equ	0xFDD
 15949                           fsr2h	equ	0xFDA
 15950                           fsr2l	equ	0xFD9
 15951                           status	equ	0xFD8
 15952                           
 15953 ;; *************** function _lcdInst *****************
 15954 ;; Defined at:
 15955 ;;		line 15 in file "lcd.c"
 15956 ;; Parameters:    Size  Location     Type
 15957 ;;  data            1    wreg     unsigned char 
 15958 ;; Auto vars:     Size  Location     Type
 15959 ;;  data            1    2[BANK0 ] unsigned char 
 15960 ;; Return value:  Size  Location     Type
 15961 ;;                  1    wreg      void 
 15962 ;; Registers used:
 15963 ;;		wreg, status,2, status,0, cstack
 15964 ;; Tracked objects:
 15965 ;;		On entry : 0/0
 15966 ;;		On exit  : 0/0
 15967 ;;		Unchanged: 0/0
 15968 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15969 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15970 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15971 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15972 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15973 ;;Total ram usage:        1 bytes
 15974 ;; Hardware stack levels used:    1
 15975 ;; Hardware stack levels required when called:    8
 15976 ;; This function calls:
 15977 ;;		_lcdNibble
 15978 ;; This function is called by:
 15979 ;;		_UI
 15980 ;;		_change_state_to_menu_start
 15981 ;;		_change_state_to_menu_12
 15982 ;;		_change_state_to_menu_22
 15983 ;;		_initLCD
 15984 ;;		_printRTC
 15985 ;;		_Loading
 15986 ;;		_EEPROM_write
 15987 ;;		_Test
 15988 ;;		_algorithmTest
 15989 ;;		_sensorTest
 15990 ;;		_actuatorTest
 15991 ;;		_BothServos
 15992 ;;		_PortTestA5
 15993 ;;		_PusherTest
 15994 ;;		_SpeedTest
 15995 ;;		_BlockerTest
 15996 ;;		_ToggleTestA5
 15997 ;; This function uses a non-reentrant model
 15998 ;;
 15999                           
 16000                           	psect	text57
 16001  004B30                     __ptext57:
 16002                           	opt stack 0
 16003  004B30                     _lcdInst:
 16004                           	opt stack 20
 16005                           
 16006                           ; BSR set to: 0
 16007                           ;incstack = 0
 16008                           ;lcdInst@data stored from wreg
 16009  004B30  0100               	movlb	0	; () banked
 16010  004B32  6F82               	movwf	lcdInst@data& (0+255),b
 16011                           
 16012                           ;lcd.c: 16: LATDbits.LATD2 = 0;
 16013  004B34  948C               	bcf	3980,2,c	;volatile
 16014                           
 16015                           ;lcd.c: 17: lcdNibble(data);
 16016  004B36  0100               	movlb	0	; () banked
 16017  004B38  5182               	movf	lcdInst@data& (0+255),w,b
 16018  004B3A  ECA3  F020         	call	_lcdNibble
 16019  004B3E  0012               	return		;funcret
 16020  004B40                     __end_of_lcdInst:
 16021                           	opt stack 0
 16022                           tblptru	equ	0xFF8
 16023                           tblptrh	equ	0xFF7
 16024                           tblptrl	equ	0xFF6
 16025                           tablat	equ	0xFF5
 16026                           prodh	equ	0xFF4
 16027                           prodl	equ	0xFF3
 16028                           intcon	equ	0xFF2
 16029                           intcon2	equ	0xFF1
 16030                           intcon3	equ	0xFF0
 16031                           indf0	equ	0xFEF
 16032                           postinc0	equ	0xFEE
 16033                           fsr0h	equ	0xFEA
 16034                           fsr0l	equ	0xFE9
 16035                           wreg	equ	0xFE8
 16036                           postdec1	equ	0xFE5
 16037                           fsr1l	equ	0xFE1
 16038                           indf2	equ	0xFDF
 16039                           postinc2	equ	0xFDE
 16040                           postdec2	equ	0xFDD
 16041                           fsr2h	equ	0xFDA
 16042                           fsr2l	equ	0xFD9
 16043                           status	equ	0xFD8
 16044                           
 16045 ;; *************** function _lcdNibble *****************
 16046 ;; Defined at:
 16047 ;;		line 25 in file "lcd.c"
 16048 ;; Parameters:    Size  Location     Type
 16049 ;;  data            1    wreg     unsigned char 
 16050 ;; Auto vars:     Size  Location     Type
 16051 ;;  data            1    1[BANK0 ] unsigned char 
 16052 ;;  temp            1    0[BANK0 ] unsigned char 
 16053 ;; Return value:  Size  Location     Type
 16054 ;;                  1    wreg      void 
 16055 ;; Registers used:
 16056 ;;		wreg, status,2, status,0
 16057 ;; Tracked objects:
 16058 ;;		On entry : 0/0
 16059 ;;		On exit  : 0/0
 16060 ;;		Unchanged: 0/0
 16061 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16062 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16063 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16064 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16065 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16066 ;;Total ram usage:        2 bytes
 16067 ;; Hardware stack levels used:    1
 16068 ;; Hardware stack levels required when called:    7
 16069 ;; This function calls:
 16070 ;;		Nothing
 16071 ;; This function is called by:
 16072 ;;		_lcdInst
 16073 ;;		_putch
 16074 ;; This function uses a non-reentrant model
 16075 ;;
 16076                           
 16077                           	psect	text58
 16078  004146                     __ptext58:
 16079                           	opt stack 0
 16080  004146                     _lcdNibble:
 16081                           	opt stack 20
 16082                           
 16083                           ;incstack = 0
 16084                           ;lcdNibble@data stored from wreg
 16085  004146  0100               	movlb	0	; () banked
 16086  004148  6F81               	movwf	lcdNibble@data& (0+255),b
 16087                           
 16088                           ;lcd.c: 27: char temp = data & 0xF0;
 16089  00414A  0100               	movlb	0	; () banked
 16090  00414C  5181               	movf	lcdNibble@data& (0+255),w,b
 16091  00414E  0BF0               	andlw	240
 16092  004150  0100               	movlb	0	; () banked
 16093  004152  6F80               	movwf	lcdNibble@temp& (0+255),b
 16094                           
 16095                           ;lcd.c: 28: LATD = LATD & 0x0F;
 16096  004154  508C               	movf	3980,w,c	;volatile
 16097  004156  0B0F               	andlw	15
 16098  004158  6E8C               	movwf	3980,c	;volatile
 16099                           
 16100                           ;lcd.c: 29: LATD = temp | LATD;
 16101  00415A  0100               	movlb	0	; () banked
 16102  00415C  5180               	movf	lcdNibble@temp& (0+255),w,b
 16103  00415E  108C               	iorwf	3980,w,c	;volatile
 16104  004160  6E8C               	movwf	3980,c	;volatile
 16105                           
 16106                           ; BSR set to: 0
 16107                           ;lcd.c: 31: LATDbits.LATD3 = 1;
 16108  004162  868C               	bsf	3980,3,c	;volatile
 16109                           
 16110                           ; BSR set to: 0
 16111                           ;lcd.c: 32: _delay((unsigned long)((25)*(32000000/4000000.0)));
 16112  004164  0E42               	movlw	66
 16113  004166                     u8877:
 16114  004166  2EE8               	decfsz	wreg,f,c
 16115  004168  D7FE               	bra	u8877
 16116  00416A  D000               	nop2	
 16117                           
 16118                           ;lcd.c: 33: LATDbits.LATD3 = 0;
 16119  00416C  968C               	bcf	3980,3,c	;volatile
 16120                           
 16121                           ;lcd.c: 34: _delay((unsigned long)((25)*(32000000/4000000.0)));
 16122  00416E  0E42               	movlw	66
 16123  004170                     u8887:
 16124  004170  2EE8               	decfsz	wreg,f,c
 16125  004172  D7FE               	bra	u8887
 16126  004174  D000               	nop2	
 16127                           
 16128                           ;lcd.c: 36: data = data << 4;
 16129  004176  0100               	movlb	0	; () banked
 16130  004178  3981               	swapf	lcdNibble@data& (0+255),w,b
 16131  00417A  0BF0               	andlw	240
 16132  00417C  0100               	movlb	0	; () banked
 16133  00417E  6F81               	movwf	lcdNibble@data& (0+255),b
 16134                           
 16135                           ;lcd.c: 38: temp = data & 0xF0;
 16136  004180  0100               	movlb	0	; () banked
 16137  004182  5181               	movf	lcdNibble@data& (0+255),w,b
 16138  004184  0BF0               	andlw	240
 16139  004186  0100               	movlb	0	; () banked
 16140  004188  6F80               	movwf	lcdNibble@temp& (0+255),b
 16141                           
 16142                           ;lcd.c: 39: LATD = LATD & 0x0F;
 16143  00418A  508C               	movf	3980,w,c	;volatile
 16144  00418C  0B0F               	andlw	15
 16145  00418E  6E8C               	movwf	3980,c	;volatile
 16146                           
 16147                           ;lcd.c: 40: LATD = temp | LATD;
 16148  004190  0100               	movlb	0	; () banked
 16149  004192  5180               	movf	lcdNibble@temp& (0+255),w,b
 16150  004194  108C               	iorwf	3980,w,c	;volatile
 16151  004196  6E8C               	movwf	3980,c	;volatile
 16152                           
 16153                           ; BSR set to: 0
 16154                           ;lcd.c: 42: LATDbits.LATD3 = 1;
 16155  004198  868C               	bsf	3980,3,c	;volatile
 16156                           
 16157                           ; BSR set to: 0
 16158                           ;lcd.c: 43: _delay((unsigned long)((25)*(32000000/4000000.0)));
 16159  00419A  0E42               	movlw	66
 16160  00419C                     u8897:
 16161  00419C  2EE8               	decfsz	wreg,f,c
 16162  00419E  D7FE               	bra	u8897
 16163  0041A0  D000               	nop2	
 16164                           
 16165                           ;lcd.c: 44: LATDbits.LATD3 = 0;
 16166  0041A2  968C               	bcf	3980,3,c	;volatile
 16167                           
 16168                           ;lcd.c: 45: _delay((unsigned long)((25)*(32000000/4000000.0)));
 16169  0041A4  0E42               	movlw	66
 16170  0041A6                     u8907:
 16171  0041A6  2EE8               	decfsz	wreg,f,c
 16172  0041A8  D7FE               	bra	u8907
 16173  0041AA  D000               	nop2	
 16174  0041AC  0012               	return		;funcret
 16175  0041AE                     __end_of_lcdNibble:
 16176                           	opt stack 0
 16177                           tblptru	equ	0xFF8
 16178                           tblptrh	equ	0xFF7
 16179                           tblptrl	equ	0xFF6
 16180                           tablat	equ	0xFF5
 16181                           prodh	equ	0xFF4
 16182                           prodl	equ	0xFF3
 16183                           intcon	equ	0xFF2
 16184                           intcon2	equ	0xFF1
 16185                           intcon3	equ	0xFF0
 16186                           indf0	equ	0xFEF
 16187                           postinc0	equ	0xFEE
 16188                           fsr0h	equ	0xFEA
 16189                           fsr0l	equ	0xFE9
 16190                           wreg	equ	0xFE8
 16191                           postdec1	equ	0xFE5
 16192                           fsr1l	equ	0xFE1
 16193                           indf2	equ	0xFDF
 16194                           postinc2	equ	0xFDE
 16195                           postdec2	equ	0xFDD
 16196                           fsr2h	equ	0xFDA
 16197                           fsr2l	equ	0xFD9
 16198                           status	equ	0xFD8
 16199                           
 16200 ;; *************** function _handler *****************
 16201 ;; Defined at:
 16202 ;;		line 16 in file "interruptHandler.c"
 16203 ;; Parameters:    Size  Location     Type
 16204 ;;		None
 16205 ;; Auto vars:     Size  Location     Type
 16206 ;;		None
 16207 ;; Return value:  Size  Location     Type
 16208 ;;                  1    wreg      void 
 16209 ;; Registers used:
 16210 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16211 ;; Tracked objects:
 16212 ;;		On entry : 0/0
 16213 ;;		On exit  : 0/0
 16214 ;;		Unchanged: 0/0
 16215 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16216 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16217 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16218 ;;      Temps:         16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16219 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16220 ;;Total ram usage:       16 bytes
 16221 ;; Hardware stack levels used:    1
 16222 ;; Hardware stack levels required when called:    6
 16223 ;; This function calls:
 16224 ;;		_printSortTimer
 16225 ;;		_updateMenu
 16226 ;; This function is called by:
 16227 ;;		Interrupt level 2
 16228 ;; This function uses a non-reentrant model
 16229 ;;
 16230                           
 16231                           	psect	intcode
 16232  000008                     __pintcode:
 16233                           	opt stack 0
 16234  000008                     _handler:
 16235                           	opt stack 18
 16236                           
 16237                           ;incstack = 0
 16238  000008  827E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 16239  00000A  ED9C  F018         	call	int_func,f	;refresh shadow registers
 16240                           tblptru	equ	0xFF8
 16241                           tblptrh	equ	0xFF7
 16242                           tblptrl	equ	0xFF6
 16243                           tablat	equ	0xFF5
 16244                           prodh	equ	0xFF4
 16245                           prodl	equ	0xFF3
 16246                           intcon	equ	0xFF2
 16247                           intcon2	equ	0xFF1
 16248                           intcon3	equ	0xFF0
 16249                           indf0	equ	0xFEF
 16250                           postinc0	equ	0xFEE
 16251                           fsr0h	equ	0xFEA
 16252                           fsr0l	equ	0xFE9
 16253                           wreg	equ	0xFE8
 16254                           postdec1	equ	0xFE5
 16255                           fsr1l	equ	0xFE1
 16256                           indf2	equ	0xFDF
 16257                           postinc2	equ	0xFDE
 16258                           postdec2	equ	0xFDD
 16259                           fsr2h	equ	0xFDA
 16260                           fsr2l	equ	0xFD9
 16261                           status	equ	0xFD8
 16262                           
 16263                           	psect	intcode_body
 16264  003138                     __pintcode_body:
 16265                           	opt stack 18
 16266  003138                     int_func:
 16267                           	opt stack 18
 16268  003138  0006               	pop		; remove dummy address from shadow register refresh
 16269  00313A  CFFA F04D          	movff	pclath,??_handler+2
 16270  00313E  CFFB F04E          	movff	pclatu,??_handler+3
 16271  003142  CFE9 F04F          	movff	fsr0l,??_handler+4
 16272  003146  CFEA F050          	movff	fsr0h,??_handler+5
 16273  00314A  CFE1 F051          	movff	fsr1l,??_handler+6
 16274  00314E  CFE2 F052          	movff	fsr1h,??_handler+7
 16275  003152  CFD9 F053          	movff	fsr2l,??_handler+8
 16276  003156  CFDA F054          	movff	fsr2h,??_handler+9
 16277  00315A  CFF3 F055          	movff	prodl,??_handler+10
 16278  00315E  CFF4 F056          	movff	prodh,??_handler+11
 16279  003162  CFF6 F057          	movff	tblptrl,??_handler+12
 16280  003166  CFF7 F058          	movff	tblptrh,??_handler+13
 16281  00316A  CFF8 F059          	movff	tblptru,??_handler+14
 16282  00316E  CFF5 F05A          	movff	tablat,??_handler+15
 16283                           
 16284                           ;interruptHandler.c: 18: if(INT1IF){
 16285  003172  A0F0               	btfss	intcon3,0,c	;volatile
 16286  003174  D020               	goto	i2l8508
 16287                           
 16288                           ;interruptHandler.c: 19: INT1IF = 0;
 16289  003176  90F0               	bcf	intcon3,0,c	;volatile
 16290                           
 16291                           ;interruptHandler.c: 20: if(machine_state == UI_state) {
 16292  003178  0100               	movlb	0	; () banked
 16293  00317A  51FC               	movf	_machine_state& (0+255),w,b
 16294  00317C  A4D8               	btfss	status,2,c
 16295  00317E  D01B               	goto	i2l8508
 16296                           
 16297                           ; BSR set to: 0
 16298                           ;interruptHandler.c: 21: input = keys[(PORTB & 0xF0) >> 4];
 16299  003180  3881               	swapf	3969,w,c	;volatile
 16300  003182  0B0F               	andlw	15
 16301  003184  0B0F               	andlw	15
 16302  003186  6E4B               	movwf	??_handler& (0+255),c
 16303  003188  6A4C               	clrf	(??_handler+1)& (0+255),c
 16304  00318A  0E01               	movlw	low _keys
 16305  00318C  244B               	addwf	??_handler,w,c
 16306  00318E  6EF6               	movwf	tblptrl,c
 16307  003190  0EFB               	movlw	high _keys
 16308  003192  204C               	addwfc	??_handler+1,w,c
 16309  003194  6EF7               	movwf	tblptrh,c
 16310  003196                     	if	1	;There are 3 active tblptr bytes
 16311  003196  6AF8               	clrf	tblptru,c
 16312  003198  0E00               	movlw	low (__mediumconst shr (0+16))
 16313  00319A  22F8               	addwfc	tblptru,f,c
 16314  00319C                     	endif
 16315  00319C  0008               	tblrd		*
 16316  00319E  CFF5 F07D          	movff	tablat,_input	;volatile
 16317                           
 16318                           ; BSR set to: 0
 16319                           ;interruptHandler.c: 23: if(input == '*'){
 16320  0031A2  0E2A               	movlw	42
 16321  0031A4  187D               	xorwf	_input,w,c	;volatile
 16322  0031A6  A4D8               	btfss	status,2,c
 16323  0031A8  D004               	goto	i2l8506
 16324                           
 16325                           ; BSR set to: 0
 16326                           ;interruptHandler.c: 24: machine_state = Testing_state;
 16327  0031AA  0E03               	movlw	3
 16328  0031AC  0100               	movlb	0	; () banked
 16329  0031AE  6FFC               	movwf	_machine_state& (0+255),b
 16330                           
 16331                           ;interruptHandler.c: 25: }
 16332  0031B0  D002               	goto	i2l8508
 16333  0031B2                     i2l8506:
 16334                           
 16335                           ; BSR set to: 0
 16336                           ;interruptHandler.c: 26: else{
 16337                           ;interruptHandler.c: 27: updateMenu();
 16338  0031B2  EC31  F011         	call	_updateMenu	;wreg free
 16339  0031B6                     i2l8508:
 16340                           
 16341                           ;interruptHandler.c: 28: }
 16342                           ;interruptHandler.c: 29: }
 16343                           ;interruptHandler.c: 30: }
 16344                           ;interruptHandler.c: 33: if(TMR0IF){
 16345  0031B6  A4F2               	btfss	intcon,2,c	;volatile
 16346  0031B8  D00C               	goto	i2l8522
 16347                           
 16348                           ;interruptHandler.c: 34: TMR0IF = 0;
 16349  0031BA  94F2               	bcf	intcon,2,c	;volatile
 16350                           
 16351                           ;interruptHandler.c: 35: if(machine_state == Sorting_state){
 16352  0031BC  0100               	movlb	0	; () banked
 16353  0031BE  05FC               	decf	_machine_state& (0+255),w,b
 16354  0031C0  A4D8               	btfss	status,2,c
 16355  0031C2  D007               	goto	i2l8522
 16356                           
 16357                           ; BSR set to: 0
 16358                           ;interruptHandler.c: 36: printSortTimer();
 16359  0031C4  ECCD  F015         	call	_printSortTimer	;wreg free
 16360                           
 16361                           ;interruptHandler.c: 38: TMR0H = 0b10000101;
 16362  0031C8  0E85               	movlw	133
 16363  0031CA  6ED7               	movwf	4055,c	;volatile
 16364                           
 16365                           ;interruptHandler.c: 39: TMR0L = 0b11101110;
 16366  0031CC  0EEE               	movlw	238
 16367  0031CE  6ED6               	movwf	4054,c	;volatile
 16368                           
 16369                           ;interruptHandler.c: 40: TMR0ON = 1;
 16370  0031D0  8ED5               	bsf	4053,7,c	;volatile
 16371  0031D2                     i2l8522:
 16372                           
 16373                           ;interruptHandler.c: 41: }
 16374                           ;interruptHandler.c: 42: }
 16375                           ;interruptHandler.c: 45: if(TMR1IF){
 16376  0031D2  A09E               	btfss	3998,0,c	;volatile
 16377  0031D4  D024               	goto	i2l8546
 16378                           
 16379                           ;interruptHandler.c: 46: TMR1IF = 0;
 16380  0031D6  909E               	bcf	3998,0,c	;volatile
 16381                           
 16382                           ;interruptHandler.c: 47: TMR1ON = 0;
 16383  0031D8  90CD               	bcf	4045,0,c	;volatile
 16384                           
 16385                           ;interruptHandler.c: 48: if(machine_state == Sorting_state){
 16386  0031DA  0100               	movlb	0	; () banked
 16387  0031DC  05FC               	decf	_machine_state& (0+255),w,b
 16388  0031DE  A4D8               	btfss	status,2,c
 16389  0031E0  D01E               	goto	i2l8546
 16390                           
 16391                           ; BSR set to: 0
 16392                           ;interruptHandler.c: 49: if(was_low_1){
 16393  0031E2  5079               	movf	_was_low_1,w,c	;volatile
 16394  0031E4  107A               	iorwf	_was_low_1+1,w,c	;volatile
 16395  0031E6  B4D8               	btfsc	status,2,c
 16396  0031E8  D00A               	goto	i2l880
 16397                           
 16398                           ; BSR set to: 0
 16399                           ;interruptHandler.c: 50: LATCbits.LATC1 = 1;
 16400  0031EA  828B               	bsf	3979,1,c	;volatile
 16401                           
 16402                           ; BSR set to: 0
 16403                           ;interruptHandler.c: 51: was_low_1 = 0;
 16404  0031EC  0E00               	movlw	0
 16405  0031EE  6E7A               	movwf	_was_low_1+1,c	;volatile
 16406  0031F0  0E00               	movlw	0
 16407  0031F2  6E79               	movwf	_was_low_1,c	;volatile
 16408                           
 16409                           ; BSR set to: 0
 16410                           ;interruptHandler.c: 52: TMR1H = servoTimes[0];
 16411  0031F4  C11C  FFCF         	movff	_servoTimes,4047	;volatile
 16412                           
 16413                           ; BSR set to: 0
 16414                           ;interruptHandler.c: 53: TMR1L = servoTimes[1];
 16415  0031F8  C11E  FFCE         	movff	_servoTimes+2,4046	;volatile
 16416                           
 16417                           ;interruptHandler.c: 54: }
 16418  0031FC  D00F               	goto	i2l8544
 16419  0031FE                     i2l880:
 16420                           
 16421                           ; BSR set to: 0
 16422                           ;interruptHandler.c: 55: else{
 16423                           ;interruptHandler.c: 56: LATCbits.LATC1 = 0;
 16424  0031FE  928B               	bcf	3979,1,c	;volatile
 16425                           
 16426                           ; BSR set to: 0
 16427                           ;interruptHandler.c: 57: was_low_1 = 1;
 16428  003200  0E00               	movlw	0
 16429  003202  6E7A               	movwf	_was_low_1+1,c	;volatile
 16430  003204  0E01               	movlw	1
 16431  003206  6E79               	movwf	_was_low_1,c	;volatile
 16432                           
 16433                           ; BSR set to: 0
 16434                           ;interruptHandler.c: 58: TMR1H = 20000 - servoTimes[0];
 16435  003208  0101               	movlb	1	; () banked
 16436  00320A  511C               	movf	_servoTimes& (0+255),w,b
 16437  00320C  0800               	sublw	0
 16438  00320E  0F20               	addlw	32
 16439  003210  6ECF               	movwf	4047,c	;volatile
 16440                           
 16441                           ; BSR set to: 1
 16442                           ;interruptHandler.c: 59: TMR1L = 20000 - servoTimes[1];
 16443  003212  0101               	movlb	1	; () banked
 16444  003214  511E               	movf	(_servoTimes+2)& (0+255),w,b
 16445  003216  0800               	sublw	0
 16446  003218  0F20               	addlw	32
 16447  00321A  6ECE               	movwf	4046,c	;volatile
 16448  00321C                     i2l8544:
 16449                           
 16450                           ;interruptHandler.c: 60: }
 16451                           ;interruptHandler.c: 61: TMR1ON = 1;
 16452  00321C  80CD               	bsf	4045,0,c	;volatile
 16453  00321E                     i2l8546:
 16454                           
 16455                           ;interruptHandler.c: 62: }
 16456                           ;interruptHandler.c: 63: }
 16457                           ;interruptHandler.c: 65: if(TMR3IF){
 16458  00321E  A2A1               	btfss	4001,1,c	;volatile
 16459  003220  D024               	goto	i2l886
 16460                           
 16461                           ;interruptHandler.c: 66: TMR3IF = 0;
 16462  003222  92A1               	bcf	4001,1,c	;volatile
 16463                           
 16464                           ;interruptHandler.c: 67: TMR3ON = 0;
 16465  003224  90B1               	bcf	4017,0,c	;volatile
 16466                           
 16467                           ;interruptHandler.c: 68: if(machine_state == Sorting_state){
 16468  003226  0100               	movlb	0	; () banked
 16469  003228  05FC               	decf	_machine_state& (0+255),w,b
 16470  00322A  A4D8               	btfss	status,2,c
 16471  00322C  D01E               	goto	i2l886
 16472                           
 16473                           ; BSR set to: 0
 16474                           ;interruptHandler.c: 69: if(was_low_3){
 16475  00322E  507B               	movf	_was_low_3,w,c	;volatile
 16476  003230  107C               	iorwf	_was_low_3+1,w,c	;volatile
 16477  003232  B4D8               	btfsc	status,2,c
 16478  003234  D00A               	goto	i2l884
 16479                           
 16480                           ; BSR set to: 0
 16481                           ;interruptHandler.c: 70: LATCbits.LATC2 = 1;
 16482  003236  848B               	bsf	3979,2,c	;volatile
 16483                           
 16484                           ; BSR set to: 0
 16485                           ;interruptHandler.c: 71: was_low_3 = 0;
 16486  003238  0E00               	movlw	0
 16487  00323A  6E7C               	movwf	_was_low_3+1,c	;volatile
 16488  00323C  0E00               	movlw	0
 16489  00323E  6E7B               	movwf	_was_low_3,c	;volatile
 16490                           
 16491                           ; BSR set to: 0
 16492                           ;interruptHandler.c: 72: TMR3H = servoTimes[2];
 16493  003240  C120  FFB3         	movff	_servoTimes+4,4019	;volatile
 16494                           
 16495                           ; BSR set to: 0
 16496                           ;interruptHandler.c: 73: TMR3L = servoTimes[3];
 16497  003244  C122  FFB2         	movff	_servoTimes+6,4018	;volatile
 16498                           
 16499                           ;interruptHandler.c: 74: }
 16500  003248  D00F               	goto	i2l8568
 16501  00324A                     i2l884:
 16502                           
 16503                           ; BSR set to: 0
 16504                           ;interruptHandler.c: 75: else{
 16505                           ;interruptHandler.c: 76: LATCbits.LATC2 = 0;
 16506  00324A  948B               	bcf	3979,2,c	;volatile
 16507                           
 16508                           ; BSR set to: 0
 16509                           ;interruptHandler.c: 77: was_low_3 = 1;
 16510  00324C  0E00               	movlw	0
 16511  00324E  6E7C               	movwf	_was_low_3+1,c	;volatile
 16512  003250  0E01               	movlw	1
 16513  003252  6E7B               	movwf	_was_low_3,c	;volatile
 16514                           
 16515                           ; BSR set to: 0
 16516                           ;interruptHandler.c: 78: TMR3H = 20000 - servoTimes[2];
 16517  003254  0101               	movlb	1	; () banked
 16518  003256  5120               	movf	(_servoTimes+4)& (0+255),w,b
 16519  003258  0800               	sublw	0
 16520  00325A  0F20               	addlw	32
 16521  00325C  6EB3               	movwf	4019,c	;volatile
 16522                           
 16523                           ; BSR set to: 1
 16524                           ;interruptHandler.c: 79: TMR3L = 20000 - servoTimes[3];
 16525  00325E  0101               	movlb	1	; () banked
 16526  003260  5122               	movf	(_servoTimes+6)& (0+255),w,b
 16527  003262  0800               	sublw	0
 16528  003264  0F20               	addlw	32
 16529  003266  6EB2               	movwf	4018,c	;volatile
 16530  003268                     i2l8568:
 16531                           
 16532                           ;interruptHandler.c: 80: }
 16533                           ;interruptHandler.c: 81: TMR3ON = 1;
 16534  003268  80B1               	bsf	4017,0,c	;volatile
 16535  00326A                     i2l886:
 16536  00326A  C05A  FFF5         	movff	??_handler+15,tablat
 16537  00326E  C059  FFF8         	movff	??_handler+14,tblptru
 16538  003272  C058  FFF7         	movff	??_handler+13,tblptrh
 16539  003276  C057  FFF6         	movff	??_handler+12,tblptrl
 16540  00327A  C056  FFF4         	movff	??_handler+11,prodh
 16541  00327E  C055  FFF3         	movff	??_handler+10,prodl
 16542  003282  C054  FFDA         	movff	??_handler+9,fsr2h
 16543  003286  C053  FFD9         	movff	??_handler+8,fsr2l
 16544  00328A  C052  FFE2         	movff	??_handler+7,fsr1h
 16545  00328E  C051  FFE1         	movff	??_handler+6,fsr1l
 16546  003292  C050  FFEA         	movff	??_handler+5,fsr0h
 16547  003296  C04F  FFE9         	movff	??_handler+4,fsr0l
 16548  00329A  C04E  FFFB         	movff	??_handler+3,pclatu
 16549  00329E  C04D  FFFA         	movff	??_handler+2,pclath
 16550  0032A2  927E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 16551  0032A4  0011               	retfie		f
 16552  0032A6                     __end_of_handler:
 16553                           	opt stack 0
 16554                           pclatu	equ	0xFFB
 16555                           pclath	equ	0xFFA
 16556                           tblptru	equ	0xFF8
 16557                           tblptrh	equ	0xFF7
 16558                           tblptrl	equ	0xFF6
 16559                           tablat	equ	0xFF5
 16560                           prodh	equ	0xFF4
 16561                           prodl	equ	0xFF3
 16562                           intcon	equ	0xFF2
 16563                           intcon2	equ	0xFF1
 16564                           intcon3	equ	0xFF0
 16565                           indf0	equ	0xFEF
 16566                           postinc0	equ	0xFEE
 16567                           fsr0h	equ	0xFEA
 16568                           fsr0l	equ	0xFE9
 16569                           wreg	equ	0xFE8
 16570                           postdec1	equ	0xFE5
 16571                           fsr1h	equ	0xFE2
 16572                           fsr1l	equ	0xFE1
 16573                           indf2	equ	0xFDF
 16574                           postinc2	equ	0xFDE
 16575                           postdec2	equ	0xFDD
 16576                           fsr2h	equ	0xFDA
 16577                           fsr2l	equ	0xFD9
 16578                           status	equ	0xFD8
 16579                           
 16580 ;; *************** function _updateMenu *****************
 16581 ;; Defined at:
 16582 ;;		line 213 in file "UI.c"
 16583 ;; Parameters:    Size  Location     Type
 16584 ;;		None
 16585 ;; Auto vars:     Size  Location     Type
 16586 ;;		None
 16587 ;; Return value:  Size  Location     Type
 16588 ;;                  1    wreg      void 
 16589 ;; Registers used:
 16590 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16591 ;; Tracked objects:
 16592 ;;		On entry : 0/0
 16593 ;;		On exit  : 0/0
 16594 ;;		Unchanged: 0/0
 16595 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16596 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16597 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16598 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16599 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16600 ;;Total ram usage:        2 bytes
 16601 ;; Hardware stack levels used:    1
 16602 ;; Hardware stack levels required when called:    5
 16603 ;; This function calls:
 16604 ;;		_change_state_to_logs_11
 16605 ;;		_change_state_to_logs_12
 16606 ;;		_change_state_to_logs_22
 16607 ;;		_change_state_to_logs_23
 16608 ;;		_change_state_to_logs_33
 16609 ;;		_change_state_to_logs_34
 16610 ;;		_change_state_to_menu_11
 16611 ;;		_change_state_to_menu_23
 16612 ;;		_dispLogs
 16613 ;;		_inputHandler
 16614 ;;		i2_change_state_to_menu_12
 16615 ;;		i2_change_state_to_menu_22
 16616 ;;		i2_change_state_to_menu_start
 16617 ;; This function is called by:
 16618 ;;		_handler
 16619 ;; This function uses a non-reentrant model
 16620 ;;
 16621                           
 16622                           	psect	text60
 16623  002262                     __ptext60:
 16624                           	opt stack 0
 16625  002262                     _updateMenu:
 16626                           	opt stack 18
 16627                           
 16628                           ;UI.c: 214: up = 0; down = 0; enter = 0; back = 0;
 16629                           
 16630                           ;incstack = 0
 16631  002262  0E00               	movlw	0
 16632  002264  6E78               	movwf	_up+1,c
 16633  002266  0E00               	movlw	0
 16634  002268  6E77               	movwf	_up,c
 16635  00226A  0E00               	movlw	0
 16636  00226C  6E64               	movwf	_down+1,c
 16637  00226E  0E00               	movlw	0
 16638  002270  6E63               	movwf	_down,c
 16639  002272  0E00               	movlw	0
 16640  002274  6E66               	movwf	_enter+1,c
 16641  002276  0E00               	movlw	0
 16642  002278  6E65               	movwf	_enter,c
 16643  00227A  0E00               	movlw	0
 16644  00227C  6E5C               	movwf	_back+1,c
 16645  00227E  0E00               	movlw	0
 16646  002280  6E5B               	movwf	_back,c
 16647                           
 16648                           ;UI.c: 215: (INTCONbits.GIE = 0);
 16649  002282  9EF2               	bcf	intcon,7,c	;volatile
 16650                           
 16651                           ;UI.c: 217: if (inputHandler()
 16652                           ;UI.c: 220: ){
 16653  002284  ECC6  F016         	call	_inputHandler	;wreg free
 16654  002288  502A               	movf	?_inputHandler,w,c
 16655  00228A  102B               	iorwf	?_inputHandler+1,w,c
 16656  00228C  A4D8               	btfss	status,2,c
 16657  00228E  D112               	goto	i2l8242
 16658  002290  D146               	goto	i2l257
 16659  002292                     i2l8094:
 16660                           
 16661                           ;UI.c: 224: change_state_to_menu_11();
 16662  002292  ECB4  F023         	call	_change_state_to_menu_11	;wreg free
 16663                           
 16664                           ;UI.c: 225: break;
 16665  002296  D143               	goto	i2l257
 16666  002298                     i2l8096:
 16667                           
 16668                           ;UI.c: 228: if(up){
 16669  002298  5077               	movf	_up,w,c
 16670  00229A  1078               	iorwf	_up+1,w,c
 16671  00229C  B4D8               	btfsc	status,2,c
 16672  00229E  D003               	goto	i2l8100
 16673                           
 16674                           ;UI.c: 229: change_state_to_menu_23();
 16675  0022A0  EC9C  F023         	call	_change_state_to_menu_23	;wreg free
 16676                           
 16677                           ;UI.c: 230: }
 16678  0022A4  D13C               	goto	i2l257
 16679  0022A6                     i2l8100:
 16680                           
 16681                           ;UI.c: 231: else if(down){
 16682  0022A6  5063               	movf	_down,w,c
 16683  0022A8  1064               	iorwf	_down+1,w,c
 16684  0022AA  B4D8               	btfsc	status,2,c
 16685  0022AC  D003               	goto	i2l8104
 16686                           
 16687                           ;UI.c: 232: change_state_to_menu_12();
 16688  0022AE  EC84  F023         	call	i2_change_state_to_menu_12	;wreg free
 16689                           
 16690                           ;UI.c: 233: }
 16691  0022B2  D135               	goto	i2l257
 16692  0022B4                     i2l8104:
 16693                           
 16694                           ;UI.c: 234: else if(enter){
 16695  0022B4  5065               	movf	_enter,w,c
 16696  0022B6  1066               	iorwf	_enter+1,w,c
 16697  0022B8  B4D8               	btfsc	status,2,c
 16698  0022BA  D131               	goto	i2l257
 16699                           
 16700                           ;UI.c: 235: change_state_to_menu_start();
 16701  0022BC  ECDE  F024         	call	i2_change_state_to_menu_start	;wreg free
 16702                           
 16703                           ;UI.c: 236: }
 16704                           ;UI.c: 237: break;
 16705  0022C0  D12E               	goto	i2l257
 16706  0022C2                     i2l8108:
 16707                           
 16708                           ;UI.c: 240: if(up){
 16709  0022C2  5077               	movf	_up,w,c
 16710  0022C4  1078               	iorwf	_up+1,w,c
 16711  0022C6  B4D8               	btfsc	status,2,c
 16712  0022C8  D003               	goto	i2l8112
 16713                           
 16714                           ;UI.c: 241: change_state_to_menu_11();
 16715  0022CA  ECB4  F023         	call	_change_state_to_menu_11	;wreg free
 16716                           
 16717                           ;UI.c: 242: }
 16718  0022CE  D127               	goto	i2l257
 16719  0022D0                     i2l8112:
 16720                           
 16721                           ;UI.c: 243: else if(down){
 16722  0022D0  5063               	movf	_down,w,c
 16723  0022D2  1064               	iorwf	_down+1,w,c
 16724  0022D4  B4D8               	btfsc	status,2,c
 16725  0022D6  D011               	goto	i2l8128
 16726                           
 16727                           ;UI.c: 244: change_state_to_menu_23();
 16728  0022D8  EC9C  F023         	call	_change_state_to_menu_23	;wreg free
 16729                           
 16730                           ;UI.c: 245: }
 16731  0022DC  D120               	goto	i2l257
 16732  0022DE                     i2l8120:
 16733                           
 16734                           ;UI.c: 252: if(up){
 16735  0022DE  5077               	movf	_up,w,c
 16736  0022E0  1078               	iorwf	_up+1,w,c
 16737  0022E2  B4D8               	btfsc	status,2,c
 16738  0022E4  D003               	goto	i2l8124
 16739                           
 16740                           ;UI.c: 253: change_state_to_menu_11();
 16741  0022E6  ECB4  F023         	call	_change_state_to_menu_11	;wreg free
 16742                           
 16743                           ;UI.c: 254: }
 16744  0022EA  D119               	goto	i2l257
 16745  0022EC                     i2l8124:
 16746                           
 16747                           ;UI.c: 255: else if(down){
 16748  0022EC  5063               	movf	_down,w,c
 16749  0022EE  1064               	iorwf	_down+1,w,c
 16750  0022F0  B4D8               	btfsc	status,2,c
 16751  0022F2  D003               	goto	i2l8128
 16752                           
 16753                           ;UI.c: 256: change_state_to_menu_23();
 16754  0022F4  EC9C  F023         	call	_change_state_to_menu_23	;wreg free
 16755                           
 16756                           ;UI.c: 257: }
 16757  0022F8  D112               	goto	i2l257
 16758  0022FA                     i2l8128:
 16759                           
 16760                           ;UI.c: 258: else if(enter){
 16761  0022FA  5065               	movf	_enter,w,c
 16762  0022FC  1066               	iorwf	_enter+1,w,c
 16763  0022FE  B4D8               	btfsc	status,2,c
 16764  002300  D10E               	goto	i2l257
 16765                           
 16766                           ;UI.c: 259: machine_state = Sorting_state;
 16767  002302  0E01               	movlw	1
 16768  002304  0100               	movlb	0	; () banked
 16769  002306  6FFC               	movwf	_machine_state& (0+255),b
 16770                           
 16771                           ; BSR set to: 0
 16772                           ;UI.c: 260: }
 16773                           ;UI.c: 261: break;
 16774                           
 16775                           ; BSR set to: 0
 16776                           
 16777                           ; BSR set to: 0
 16778  002308  D10A               	goto	i2l257
 16779  00230A                     i2l8132:
 16780                           
 16781                           ;UI.c: 264: if(up){
 16782  00230A  5077               	movf	_up,w,c
 16783  00230C  1078               	iorwf	_up+1,w,c
 16784  00230E  B4D8               	btfsc	status,2,c
 16785  002310  D003               	goto	i2l8136
 16786                           
 16787                           ;UI.c: 265: change_state_to_menu_22();
 16788  002312  EC6C  F023         	call	i2_change_state_to_menu_22	;wreg free
 16789                           
 16790                           ;UI.c: 266: }
 16791  002316  D103               	goto	i2l257
 16792  002318                     i2l8136:
 16793                           
 16794                           ;UI.c: 267: else if(down){
 16795  002318  5063               	movf	_down,w,c
 16796  00231A  1064               	iorwf	_down+1,w,c
 16797  00231C  B4D8               	btfsc	status,2,c
 16798  00231E  D003               	goto	i2l8140
 16799                           
 16800                           ;UI.c: 268: change_state_to_menu_11();
 16801  002320  ECB4  F023         	call	_change_state_to_menu_11	;wreg free
 16802                           
 16803                           ;UI.c: 269: }
 16804  002324  D0FC               	goto	i2l257
 16805  002326                     i2l8140:
 16806                           
 16807                           ;UI.c: 270: else if(enter){
 16808  002326  5065               	movf	_enter,w,c
 16809  002328  1066               	iorwf	_enter+1,w,c
 16810  00232A  B4D8               	btfsc	status,2,c
 16811  00232C  D0F8               	goto	i2l257
 16812                           
 16813                           ;UI.c: 271: change_state_to_logs_11();
 16814  00232E  EC2C  F024         	call	_change_state_to_logs_11	;wreg free
 16815                           
 16816                           ;UI.c: 272: }
 16817                           ;UI.c: 273: break;
 16818  002332  D0F5               	goto	i2l257
 16819  002334                     i2l8144:
 16820                           
 16821                           ;UI.c: 276: if(up){
 16822  002334  5077               	movf	_up,w,c
 16823  002336  1078               	iorwf	_up+1,w,c
 16824  002338  B4D8               	btfsc	status,2,c
 16825  00233A  D003               	goto	i2l8148
 16826                           
 16827                           ;UI.c: 277: change_state_to_logs_34();
 16828  00233C  ECCC  F023         	call	_change_state_to_logs_34	;wreg free
 16829                           
 16830                           ;UI.c: 278: }
 16831  002340  D0EE               	goto	i2l257
 16832  002342                     i2l8148:
 16833                           
 16834                           ;UI.c: 279: else if(down){
 16835  002342  5063               	movf	_down,w,c
 16836  002344  1064               	iorwf	_down+1,w,c
 16837  002346  B4D8               	btfsc	status,2,c
 16838  002348  D003               	goto	i2l8152
 16839                           
 16840                           ;UI.c: 280: change_state_to_logs_12();
 16841  00234A  EC14  F024         	call	_change_state_to_logs_12	;wreg free
 16842                           
 16843                           ;UI.c: 281: }
 16844  00234E  D0E7               	goto	i2l257
 16845  002350                     i2l8152:
 16846                           
 16847                           ;UI.c: 282: else if(enter){
 16848  002350  5065               	movf	_enter,w,c
 16849  002352  1066               	iorwf	_enter+1,w,c
 16850  002354  B4D8               	btfsc	status,2,c
 16851  002356  D007               	goto	i2l8156
 16852                           
 16853                           ;UI.c: 283: dispLogs(1);
 16854  002358  0E00               	movlw	0
 16855  00235A  6E13               	movwf	dispLogs@myLog+1,c
 16856  00235C  0E01               	movlw	1
 16857  00235E  6E12               	movwf	dispLogs@myLog,c
 16858  002360  EC18  F025         	call	_dispLogs	;wreg free
 16859                           
 16860                           ;UI.c: 284: }
 16861  002364  D0DC               	goto	i2l257
 16862  002366                     i2l8156:
 16863                           
 16864                           ;UI.c: 285: else if(back){
 16865  002366  505B               	movf	_back,w,c
 16866  002368  105C               	iorwf	_back+1,w,c
 16867  00236A  B4D8               	btfsc	status,2,c
 16868  00236C  D0D8               	goto	i2l257
 16869                           
 16870                           ;UI.c: 286: change_state_to_menu_23();
 16871  00236E  EC9C  F023         	call	_change_state_to_menu_23	;wreg free
 16872                           
 16873                           ;UI.c: 287: }
 16874                           ;UI.c: 288: break;
 16875  002372  D0D5               	goto	i2l257
 16876  002374                     i2l8160:
 16877                           
 16878                           ;UI.c: 291: if(up){
 16879  002374  5077               	movf	_up,w,c
 16880  002376  1078               	iorwf	_up+1,w,c
 16881  002378  B4D8               	btfsc	status,2,c
 16882  00237A  D003               	goto	i2l8164
 16883                           
 16884                           ;UI.c: 292: change_state_to_logs_11();
 16885  00237C  EC2C  F024         	call	_change_state_to_logs_11	;wreg free
 16886                           
 16887                           ;UI.c: 293: }
 16888  002380  D0CE               	goto	i2l257
 16889  002382                     i2l8164:
 16890                           
 16891                           ;UI.c: 294: else if(down){
 16892  002382  5063               	movf	_down,w,c
 16893  002384  1064               	iorwf	_down+1,w,c
 16894  002386  B4D8               	btfsc	status,2,c
 16895  002388  D003               	goto	i2l8168
 16896                           
 16897                           ;UI.c: 295: change_state_to_logs_23();
 16898  00238A  EC72  F024         	call	_change_state_to_logs_23	;wreg free
 16899                           
 16900                           ;UI.c: 296: }
 16901  00238E  D0C7               	goto	i2l257
 16902  002390                     i2l8168:
 16903                           
 16904                           ;UI.c: 297: else if(enter){
 16905  002390  5065               	movf	_enter,w,c
 16906  002392  1066               	iorwf	_enter+1,w,c
 16907  002394  B4D8               	btfsc	status,2,c
 16908  002396  D007               	goto	i2l8172
 16909                           
 16910                           ;UI.c: 298: dispLogs(2);
 16911  002398  0E00               	movlw	0
 16912  00239A  6E13               	movwf	dispLogs@myLog+1,c
 16913  00239C  0E02               	movlw	2
 16914  00239E  6E12               	movwf	dispLogs@myLog,c
 16915  0023A0  EC18  F025         	call	_dispLogs	;wreg free
 16916                           
 16917                           ;UI.c: 299: }
 16918  0023A4  D0BC               	goto	i2l257
 16919  0023A6                     i2l8172:
 16920                           
 16921                           ;UI.c: 300: else if(back){
 16922  0023A6  505B               	movf	_back,w,c
 16923  0023A8  105C               	iorwf	_back+1,w,c
 16924  0023AA  B4D8               	btfsc	status,2,c
 16925  0023AC  D0B8               	goto	i2l257
 16926                           
 16927                           ;UI.c: 301: change_state_to_menu_23();
 16928  0023AE  EC9C  F023         	call	_change_state_to_menu_23	;wreg free
 16929                           
 16930                           ;UI.c: 302: }
 16931                           ;UI.c: 303: break;
 16932  0023B2  D0B5               	goto	i2l257
 16933  0023B4                     i2l8176:
 16934                           
 16935                           ;UI.c: 306: if(up){
 16936  0023B4  5077               	movf	_up,w,c
 16937  0023B6  1078               	iorwf	_up+1,w,c
 16938  0023B8  B4D8               	btfsc	status,2,c
 16939  0023BA  D003               	goto	i2l8180
 16940                           
 16941                           ;UI.c: 307: change_state_to_logs_11();
 16942  0023BC  EC2C  F024         	call	_change_state_to_logs_11	;wreg free
 16943                           
 16944                           ;UI.c: 308: }
 16945  0023C0  D0AE               	goto	i2l257
 16946  0023C2                     i2l8180:
 16947                           
 16948                           ;UI.c: 309: else if(down){
 16949  0023C2  5063               	movf	_down,w,c
 16950  0023C4  1064               	iorwf	_down+1,w,c
 16951  0023C6  B4D8               	btfsc	status,2,c
 16952  0023C8  D003               	goto	i2l8184
 16953                           
 16954                           ;UI.c: 310: change_state_to_logs_23();
 16955  0023CA  EC72  F024         	call	_change_state_to_logs_23	;wreg free
 16956                           
 16957                           ;UI.c: 311: }
 16958  0023CE  D0A7               	goto	i2l257
 16959  0023D0                     i2l8184:
 16960                           
 16961                           ;UI.c: 312: else if(enter){
 16962  0023D0  5065               	movf	_enter,w,c
 16963  0023D2  1066               	iorwf	_enter+1,w,c
 16964  0023D4  B4D8               	btfsc	status,2,c
 16965  0023D6  D007               	goto	i2l8188
 16966                           
 16967                           ;UI.c: 313: dispLogs(2);
 16968  0023D8  0E00               	movlw	0
 16969  0023DA  6E13               	movwf	dispLogs@myLog+1,c
 16970  0023DC  0E02               	movlw	2
 16971  0023DE  6E12               	movwf	dispLogs@myLog,c
 16972  0023E0  EC18  F025         	call	_dispLogs	;wreg free
 16973                           
 16974                           ;UI.c: 314: }
 16975  0023E4  D09C               	goto	i2l257
 16976  0023E6                     i2l8188:
 16977                           
 16978                           ;UI.c: 315: else if(back){
 16979  0023E6  505B               	movf	_back,w,c
 16980  0023E8  105C               	iorwf	_back+1,w,c
 16981  0023EA  B4D8               	btfsc	status,2,c
 16982  0023EC  D098               	goto	i2l257
 16983                           
 16984                           ;UI.c: 316: change_state_to_menu_23();
 16985  0023EE  EC9C  F023         	call	_change_state_to_menu_23	;wreg free
 16986                           
 16987                           ;UI.c: 317: }
 16988                           ;UI.c: 318: break;
 16989  0023F2  D095               	goto	i2l257
 16990  0023F4                     i2l8192:
 16991                           
 16992                           ;UI.c: 321: if(up){
 16993  0023F4  5077               	movf	_up,w,c
 16994  0023F6  1078               	iorwf	_up+1,w,c
 16995  0023F8  B4D8               	btfsc	status,2,c
 16996  0023FA  D003               	goto	i2l8196
 16997                           
 16998                           ;UI.c: 322: change_state_to_logs_22();
 16999  0023FC  ECFC  F023         	call	_change_state_to_logs_22	;wreg free
 17000                           
 17001                           ;UI.c: 323: }
 17002  002400  D08E               	goto	i2l257
 17003  002402                     i2l8196:
 17004                           
 17005                           ;UI.c: 324: else if(down){
 17006  002402  5063               	movf	_down,w,c
 17007  002404  1064               	iorwf	_down+1,w,c
 17008  002406  B4D8               	btfsc	status,2,c
 17009  002408  D003               	goto	i2l8200
 17010                           
 17011                           ;UI.c: 325: change_state_to_logs_34();
 17012  00240A  ECCC  F023         	call	_change_state_to_logs_34	;wreg free
 17013                           
 17014                           ;UI.c: 326: }
 17015  00240E  D087               	goto	i2l257
 17016  002410                     i2l8200:
 17017                           
 17018                           ;UI.c: 327: else if(enter){
 17019  002410  5065               	movf	_enter,w,c
 17020  002412  1066               	iorwf	_enter+1,w,c
 17021  002414  B4D8               	btfsc	status,2,c
 17022  002416  D007               	goto	i2l8204
 17023                           
 17024                           ;UI.c: 328: dispLogs(3);
 17025  002418  0E00               	movlw	0
 17026  00241A  6E13               	movwf	dispLogs@myLog+1,c
 17027  00241C  0E03               	movlw	3
 17028  00241E  6E12               	movwf	dispLogs@myLog,c
 17029  002420  EC18  F025         	call	_dispLogs	;wreg free
 17030                           
 17031                           ;UI.c: 329: }
 17032  002424  D07C               	goto	i2l257
 17033  002426                     i2l8204:
 17034                           
 17035                           ;UI.c: 330: else if(back){
 17036  002426  505B               	movf	_back,w,c
 17037  002428  105C               	iorwf	_back+1,w,c
 17038  00242A  B4D8               	btfsc	status,2,c
 17039  00242C  D078               	goto	i2l257
 17040                           
 17041                           ;UI.c: 331: change_state_to_menu_23();
 17042  00242E  EC9C  F023         	call	_change_state_to_menu_23	;wreg free
 17043                           
 17044                           ;UI.c: 332: }
 17045                           ;UI.c: 333: break;
 17046  002432  D075               	goto	i2l257
 17047  002434                     i2l8208:
 17048                           
 17049                           ;UI.c: 336: if(up){
 17050  002434  5077               	movf	_up,w,c
 17051  002436  1078               	iorwf	_up+1,w,c
 17052  002438  B4D8               	btfsc	status,2,c
 17053  00243A  D003               	goto	i2l8212
 17054                           
 17055                           ;UI.c: 337: change_state_to_logs_22();
 17056  00243C  ECFC  F023         	call	_change_state_to_logs_22	;wreg free
 17057                           
 17058                           ;UI.c: 338: }
 17059  002440  D06E               	goto	i2l257
 17060  002442                     i2l8212:
 17061                           
 17062                           ;UI.c: 339: else if(down){
 17063  002442  5063               	movf	_down,w,c
 17064  002444  1064               	iorwf	_down+1,w,c
 17065  002446  B4D8               	btfsc	status,2,c
 17066  002448  D003               	goto	i2l8216
 17067                           
 17068                           ;UI.c: 340: change_state_to_logs_34();
 17069  00244A  ECCC  F023         	call	_change_state_to_logs_34	;wreg free
 17070                           
 17071                           ;UI.c: 341: }
 17072  00244E  D067               	goto	i2l257
 17073  002450                     i2l8216:
 17074                           
 17075                           ;UI.c: 342: else if(enter){
 17076  002450  5065               	movf	_enter,w,c
 17077  002452  1066               	iorwf	_enter+1,w,c
 17078  002454  B4D8               	btfsc	status,2,c
 17079  002456  D007               	goto	i2l8220
 17080                           
 17081                           ;UI.c: 343: dispLogs(3);
 17082  002458  0E00               	movlw	0
 17083  00245A  6E13               	movwf	dispLogs@myLog+1,c
 17084  00245C  0E03               	movlw	3
 17085  00245E  6E12               	movwf	dispLogs@myLog,c
 17086  002460  EC18  F025         	call	_dispLogs	;wreg free
 17087                           
 17088                           ;UI.c: 344: }
 17089  002464  D05C               	goto	i2l257
 17090  002466                     i2l8220:
 17091                           
 17092                           ;UI.c: 345: else if(back){
 17093  002466  505B               	movf	_back,w,c
 17094  002468  105C               	iorwf	_back+1,w,c
 17095  00246A  B4D8               	btfsc	status,2,c
 17096  00246C  D058               	goto	i2l257
 17097                           
 17098                           ;UI.c: 346: change_state_to_menu_23();
 17099  00246E  EC9C  F023         	call	_change_state_to_menu_23	;wreg free
 17100                           
 17101                           ;UI.c: 347: }
 17102                           ;UI.c: 348: break;
 17103  002472  D055               	goto	i2l257
 17104  002474                     i2l8224:
 17105                           
 17106                           ;UI.c: 351: if(up){
 17107  002474  5077               	movf	_up,w,c
 17108  002476  1078               	iorwf	_up+1,w,c
 17109  002478  B4D8               	btfsc	status,2,c
 17110  00247A  D003               	goto	i2l8228
 17111                           
 17112                           ;UI.c: 352: change_state_to_logs_33();
 17113  00247C  ECE4  F023         	call	_change_state_to_logs_33	;wreg free
 17114                           
 17115                           ;UI.c: 353: }
 17116  002480  D04E               	goto	i2l257
 17117  002482                     i2l8228:
 17118                           
 17119                           ;UI.c: 354: else if(down){
 17120  002482  5063               	movf	_down,w,c
 17121  002484  1064               	iorwf	_down+1,w,c
 17122  002486  B4D8               	btfsc	status,2,c
 17123  002488  D003               	goto	i2l8232
 17124                           
 17125                           ;UI.c: 355: change_state_to_logs_11();
 17126  00248A  EC2C  F024         	call	_change_state_to_logs_11	;wreg free
 17127                           
 17128                           ;UI.c: 356: }
 17129  00248E  D047               	goto	i2l257
 17130  002490                     i2l8232:
 17131                           
 17132                           ;UI.c: 357: else if(enter){
 17133  002490  5065               	movf	_enter,w,c
 17134  002492  1066               	iorwf	_enter+1,w,c
 17135  002494  B4D8               	btfsc	status,2,c
 17136  002496  D007               	goto	i2l8236
 17137                           
 17138                           ;UI.c: 358: dispLogs(4);
 17139  002498  0E00               	movlw	0
 17140  00249A  6E13               	movwf	dispLogs@myLog+1,c
 17141  00249C  0E04               	movlw	4
 17142  00249E  6E12               	movwf	dispLogs@myLog,c
 17143  0024A0  EC18  F025         	call	_dispLogs	;wreg free
 17144                           
 17145                           ;UI.c: 359: }
 17146  0024A4  D03C               	goto	i2l257
 17147  0024A6                     i2l8236:
 17148                           
 17149                           ;UI.c: 360: else if(back){
 17150  0024A6  505B               	movf	_back,w,c
 17151  0024A8  105C               	iorwf	_back+1,w,c
 17152  0024AA  B4D8               	btfsc	status,2,c
 17153  0024AC  D038               	goto	i2l257
 17154                           
 17155                           ;UI.c: 361: change_state_to_menu_23();
 17156  0024AE  EC9C  F023         	call	_change_state_to_menu_23	;wreg free
 17157                           
 17158                           ;UI.c: 367: }
 17159                           
 17160                           ;UI.c: 366: break;
 17161                           
 17162                           ;UI.c: 365: default:
 17163                           
 17164                           ;UI.c: 362: }
 17165                           ;UI.c: 363: break;
 17166  0024B2  D035               	goto	i2l257
 17167  0024B4                     i2l8242:
 17168  0024B4  C0E6  F043         	movff	_cur_state,??_updateMenu
 17169  0024B8  C0E7  F044         	movff	_cur_state+1,??_updateMenu+1
 17170                           
 17171                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 3 sub-sw
      +                          itches
 17172                           ; Switch size 1, requested type "space"
 17173                           ; Number of cases is 3, Range of values is 0 to 4
 17174                           ; switch strategies available:
 17175                           ; Name         Instructions Cycles
 17176                           ; simple_byte           10     6 (average)
 17177                           ;	Chosen strategy is simple_byte
 17178  0024BC  5044               	movf	??_updateMenu+1,w,c
 17179  0024BE  0A00               	xorlw	0	; case 0
 17180  0024C0  B4D8               	btfsc	status,2,c
 17181  0024C2  D007               	goto	i2l8878
 17182  0024C4  0A03               	xorlw	3	; case 3
 17183  0024C6  B4D8               	btfsc	status,2,c
 17184  0024C8  D015               	goto	i2l8880
 17185  0024CA  0A07               	xorlw	7	; case 4
 17186  0024CC  B4D8               	btfsc	status,2,c
 17187  0024CE  D020               	goto	i2l8882
 17188  0024D0  D026               	goto	i2l257
 17189  0024D2                     i2l8878:
 17190                           
 17191                           ; Switch size 1, requested type "space"
 17192                           ; Number of cases is 5, Range of values is 0 to 23
 17193                           ; switch strategies available:
 17194                           ; Name         Instructions Cycles
 17195                           ; simple_byte           16     9 (average)
 17196                           ;	Chosen strategy is simple_byte
 17197  0024D2  5043               	movf	??_updateMenu,w,c
 17198  0024D4  0A00               	xorlw	0	; case 0
 17199  0024D6  B4D8               	btfsc	status,2,c
 17200  0024D8  D6DC               	goto	i2l8094
 17201  0024DA  0A0B               	xorlw	11	; case 11
 17202  0024DC  B4D8               	btfsc	status,2,c
 17203  0024DE  D6DC               	goto	i2l8096
 17204  0024E0  0A07               	xorlw	7	; case 12
 17205  0024E2  B4D8               	btfsc	status,2,c
 17206  0024E4  D6EE               	goto	i2l8108
 17207  0024E6  0A1A               	xorlw	26	; case 22
 17208  0024E8  B4D8               	btfsc	status,2,c
 17209  0024EA  D6F9               	goto	i2l8120
 17210  0024EC  0A01               	xorlw	1	; case 23
 17211  0024EE  B4D8               	btfsc	status,2,c
 17212  0024F0  D70C               	goto	i2l8132
 17213  0024F2  D015               	goto	i2l257
 17214  0024F4                     i2l8880:
 17215                           
 17216                           ; Switch size 1, requested type "space"
 17217                           ; Number of cases is 4, Range of values is 243 to 255
 17218                           ; switch strategies available:
 17219                           ; Name         Instructions Cycles
 17220                           ; simple_byte           13     7 (average)
 17221                           ;	Chosen strategy is simple_byte
 17222  0024F4  5043               	movf	??_updateMenu,w,c
 17223  0024F6  0AF3               	xorlw	243	; case 243
 17224  0024F8  B4D8               	btfsc	status,2,c
 17225  0024FA  D71C               	goto	i2l8144
 17226  0024FC  0A07               	xorlw	7	; case 244
 17227  0024FE  B4D8               	btfsc	status,2,c
 17228  002500  D739               	goto	i2l8160
 17229  002502  0A0A               	xorlw	10	; case 254
 17230  002504  B4D8               	btfsc	status,2,c
 17231  002506  D756               	goto	i2l8176
 17232  002508  0A01               	xorlw	1	; case 255
 17233  00250A  B4D8               	btfsc	status,2,c
 17234  00250C  D773               	goto	i2l8192
 17235  00250E  D007               	goto	i2l257
 17236  002510                     i2l8882:
 17237                           
 17238                           ; Switch size 1, requested type "space"
 17239                           ; Number of cases is 2, Range of values is 9 to 10
 17240                           ; switch strategies available:
 17241                           ; Name         Instructions Cycles
 17242                           ; simple_byte            7     4 (average)
 17243                           ;	Chosen strategy is simple_byte
 17244  002510  5043               	movf	??_updateMenu,w,c
 17245  002512  0A09               	xorlw	9	; case 9
 17246  002514  B4D8               	btfsc	status,2,c
 17247  002516  D78E               	goto	i2l8208
 17248  002518  0A03               	xorlw	3	; case 10
 17249  00251A  B4D8               	btfsc	status,2,c
 17250  00251C  D7AB               	goto	i2l8224
 17251  00251E                     i2l257:
 17252                           
 17253                           ;UI.c: 368: }
 17254                           ;UI.c: 369: (INTCONbits.GIE = 1);
 17255  00251E  8EF2               	bsf	intcon,7,c	;volatile
 17256  002520  0012               	return		;funcret
 17257  002522                     __end_of_updateMenu:
 17258                           	opt stack 0
 17259                           pclatu	equ	0xFFB
 17260                           pclath	equ	0xFFA
 17261                           tblptru	equ	0xFF8
 17262                           tblptrh	equ	0xFF7
 17263                           tblptrl	equ	0xFF6
 17264                           tablat	equ	0xFF5
 17265                           prodh	equ	0xFF4
 17266                           prodl	equ	0xFF3
 17267                           intcon	equ	0xFF2
 17268                           intcon2	equ	0xFF1
 17269                           intcon3	equ	0xFF0
 17270                           indf0	equ	0xFEF
 17271                           postinc0	equ	0xFEE
 17272                           fsr0h	equ	0xFEA
 17273                           fsr0l	equ	0xFE9
 17274                           wreg	equ	0xFE8
 17275                           postdec1	equ	0xFE5
 17276                           fsr1h	equ	0xFE2
 17277                           fsr1l	equ	0xFE1
 17278                           indf2	equ	0xFDF
 17279                           postinc2	equ	0xFDE
 17280                           postdec2	equ	0xFDD
 17281                           fsr2h	equ	0xFDA
 17282                           fsr2l	equ	0xFD9
 17283                           status	equ	0xFD8
 17284                           
 17285 ;; *************** function i2_change_state_to_menu_start *****************
 17286 ;; Defined at:
 17287 ;;		line 474 in file "UI.c"
 17288 ;; Parameters:    Size  Location     Type
 17289 ;;		None
 17290 ;; Auto vars:     Size  Location     Type
 17291 ;;		None
 17292 ;; Return value:  Size  Location     Type
 17293 ;;                  1    wreg      void 
 17294 ;; Registers used:
 17295 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17296 ;; Tracked objects:
 17297 ;;		On entry : 0/0
 17298 ;;		On exit  : 0/0
 17299 ;;		Unchanged: 0/0
 17300 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17301 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17302 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17303 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17304 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17305 ;;Total ram usage:        0 bytes
 17306 ;; Hardware stack levels used:    1
 17307 ;; Hardware stack levels required when called:    4
 17308 ;; This function calls:
 17309 ;;		i2_lcdInst
 17310 ;;		i2_printRTC
 17311 ;;		i2_printf
 17312 ;; This function is called by:
 17313 ;;		_updateMenu
 17314 ;; This function uses a non-reentrant model
 17315 ;;
 17316                           
 17317                           	psect	text61
 17318  0049BC                     __ptext61:
 17319                           	opt stack 0
 17320  0049BC                     i2_change_state_to_menu_start:
 17321                           	opt stack 18
 17322                           
 17323                           ;UI.c: 475: cur_state = 0;
 17324                           
 17325                           ;incstack = 0
 17326  0049BC  0E00               	movlw	0
 17327  0049BE  0100               	movlb	0	; () banked
 17328  0049C0  6FE7               	movwf	(_cur_state+1)& (0+255),b
 17329  0049C2  0E00               	movlw	0
 17330  0049C4  6FE6               	movwf	_cur_state& (0+255),b
 17331                           
 17332                           ; BSR set to: 0
 17333                           ;UI.c: 477: lcdInst(0b10000000);;
 17334  0049C6  0E80               	movlw	128
 17335  0049C8  ECA6  F025         	call	i2_lcdInst
 17336                           
 17337                           ;UI.c: 478: printRTC();
 17338  0049CC  EC91  F012         	call	i2_printRTC	;wreg free
 17339                           
 17340                           ;UI.c: 479: lcdInst(0b11000000);;
 17341  0049D0  0EC0               	movlw	192
 17342  0049D2  ECA6  F025         	call	i2_lcdInst
 17343                           
 17344                           ;UI.c: 480: printf("PUSH TO CONTINUE");
 17345  0049D6  0EF7               	movlw	low STR_30
 17346  0049D8  6E0D               	movwf	i2printf@f,c
 17347  0049DA  0EFD               	movlw	high STR_30
 17348  0049DC  6E0E               	movwf	i2printf@f+1,c
 17349  0049DE  EC96  F00C         	call	i2_printf	;wreg free
 17350  0049E2  0012               	return		;funcret
 17351  0049E4                     __end_ofi2_change_state_to_menu_start:
 17352                           	opt stack 0
 17353                           pclatu	equ	0xFFB
 17354                           pclath	equ	0xFFA
 17355                           tblptru	equ	0xFF8
 17356                           tblptrh	equ	0xFF7
 17357                           tblptrl	equ	0xFF6
 17358                           tablat	equ	0xFF5
 17359                           prodh	equ	0xFF4
 17360                           prodl	equ	0xFF3
 17361                           intcon	equ	0xFF2
 17362                           intcon2	equ	0xFF1
 17363                           intcon3	equ	0xFF0
 17364                           indf0	equ	0xFEF
 17365                           postinc0	equ	0xFEE
 17366                           fsr0h	equ	0xFEA
 17367                           fsr0l	equ	0xFE9
 17368                           wreg	equ	0xFE8
 17369                           postdec1	equ	0xFE5
 17370                           fsr1h	equ	0xFE2
 17371                           fsr1l	equ	0xFE1
 17372                           indf2	equ	0xFDF
 17373                           postinc2	equ	0xFDE
 17374                           postdec2	equ	0xFDD
 17375                           fsr2h	equ	0xFDA
 17376                           fsr2l	equ	0xFD9
 17377                           status	equ	0xFD8
 17378                           
 17379 ;; *************** function i2_printRTC *****************
 17380 ;; Defined at:
 17381 ;;		line 63 in file "RTC.c"
 17382 ;; Parameters:    Size  Location     Type
 17383 ;;		None
 17384 ;; Auto vars:     Size  Location     Type
 17385 ;;  printRTC       14   44[COMRAM] int [7]
 17386 ;;  printRTC        4   60[COMRAM] unsigned char [4]
 17387 ;;  printRTC        2   64[COMRAM] int 
 17388 ;;  printRTC        2   58[COMRAM] int 
 17389 ;; Return value:  Size  Location     Type
 17390 ;;                  1    wreg      void 
 17391 ;; Registers used:
 17392 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17393 ;; Tracked objects:
 17394 ;;		On entry : 0/0
 17395 ;;		On exit  : 0/0
 17396 ;;		Unchanged: 0/0
 17397 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17398 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17399 ;;      Locals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17400 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17401 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17402 ;;Total ram usage:       25 bytes
 17403 ;; Hardware stack levels used:    1
 17404 ;; Hardware stack levels required when called:    3
 17405 ;; This function calls:
 17406 ;;		i2_getRTC
 17407 ;;		i2_lcdInst
 17408 ;;		i2_printf
 17409 ;;		i2_strcpy
 17410 ;; This function is called by:
 17411 ;;		i2_change_state_to_menu_start
 17412 ;; This function uses a non-reentrant model
 17413 ;;
 17414                           
 17415                           	psect	text62
 17416  002522                     __ptext62:
 17417                           	opt stack 0
 17418  002522                     i2_printRTC:
 17419                           	opt stack 18
 17420                           
 17421                           ;RTC.c: 64: getRTC();
 17422                           
 17423                           ;incstack = 0
 17424  002522  EC33  F020         	call	i2_getRTC	;wreg free
 17425                           
 17426                           ;RTC.c: 65: char month[] = "MMM";
 17427  002526  C137  F03D         	movff	printRTC@F3217,i2printRTC@month
 17428  00252A  C138  F03E         	movff	printRTC@F3217+1,i2printRTC@month+1
 17429  00252E  C139  F03F         	movff	printRTC@F3217+2,i2printRTC@month+2
 17430  002532  C13A  F040         	movff	printRTC@F3217+3,i2printRTC@month+3
 17431                           
 17432                           ;RTC.c: 66: int INT_time[7];
 17433                           ;RTC.c: 67: for(int i = 0; i < 7; i++){
 17434  002536  0E00               	movlw	0
 17435  002538  6E42               	movwf	i2printRTC@i+1,c
 17436  00253A  0E00               	movlw	0
 17437  00253C  6E41               	movwf	i2printRTC@i,c
 17438  00253E  BE42               	btfsc	i2printRTC@i+1,7,c
 17439  002540  D006               	goto	i2l6382
 17440  002542  5042               	movf	i2printRTC@i+1,w,c
 17441  002544  E135               	bnz	i2l602
 17442  002546  0E07               	movlw	7
 17443  002548  5C41               	subwf	i2printRTC@i,w,c
 17444  00254A  B0D8               	btfsc	status,0,c
 17445  00254C  D031               	goto	i2l602
 17446  00254E                     i2l6382:
 17447                           
 17448                           ;RTC.c: 68: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 17449  00254E  0E24               	movlw	low _time
 17450  002550  2441               	addwf	i2printRTC@i,w,c
 17451  002552  6ED9               	movwf	fsr2l,c
 17452  002554  0E01               	movlw	high _time
 17453  002556  2042               	addwfc	i2printRTC@i+1,w,c
 17454  002558  6EDA               	movwf	fsr2h,c
 17455  00255A  50DF               	movf	indf2,w,c
 17456  00255C  6E2A               	movwf	??i2_printRTC& (0+255),c
 17457  00255E  3A2A               	swapf	??i2_printRTC,f,c
 17458  002560  0E0F               	movlw	15
 17459  002562  162A               	andwf	??i2_printRTC,f,c
 17460  002564  0E0F               	movlw	15
 17461  002566  162A               	andwf	??i2_printRTC,f,c
 17462  002568  502A               	movf	??i2_printRTC,w,c
 17463  00256A  0D0A               	mullw	10
 17464  00256C  0E24               	movlw	low _time
 17465  00256E  2441               	addwf	i2printRTC@i,w,c
 17466  002570  6ED9               	movwf	fsr2l,c
 17467  002572  0E01               	movlw	high _time
 17468  002574  2042               	addwfc	i2printRTC@i+1,w,c
 17469  002576  6EDA               	movwf	fsr2h,c
 17470  002578  50DF               	movf	indf2,w,c
 17471  00257A  0B0F               	andlw	15
 17472  00257C  6E2B               	movwf	(??i2_printRTC+1)& (0+255),c
 17473  00257E  6A2C               	clrf	(??i2_printRTC+2)& (0+255),c
 17474  002580  50F3               	movf	prodl,w,c
 17475  002582  262B               	addwf	??i2_printRTC+1,f,c
 17476  002584  50F4               	movf	prodh,w,c
 17477  002586  222C               	addwfc	??i2_printRTC+2,f,c
 17478  002588  90D8               	bcf	status,0,c
 17479  00258A  3441               	rlcf	i2printRTC@i,w,c
 17480  00258C  6ED9               	movwf	fsr2l,c
 17481  00258E  3442               	rlcf	i2printRTC@i+1,w,c
 17482  002590  6EDA               	movwf	fsr2h,c
 17483  002592  0E2D               	movlw	low i2printRTC@INT_time
 17484  002594  26D9               	addwf	fsr2l,f,c
 17485  002596  0E00               	movlw	high i2printRTC@INT_time
 17486  002598  22DA               	addwfc	fsr2h,f,c
 17487  00259A  C02B  FFDE         	movff	??i2_printRTC+1,postinc2
 17488  00259E  C02C  FFDD         	movff	??i2_printRTC+2,postdec2
 17489  0025A2  4A41               	infsnz	i2printRTC@i,f,c
 17490  0025A4  2A42               	incf	i2printRTC@i+1,f,c
 17491  0025A6  BE42               	btfsc	i2printRTC@i+1,7,c
 17492  0025A8  D7D2               	goto	i2l6382
 17493  0025AA  5042               	movf	i2printRTC@i+1,w,c
 17494  0025AC  E101               	bnz	i2u494_40
 17495  0025AE  D7CB               	goto	L11
 17496  0025B0                     i2u494_40:
 17497  0025B0                     i2l602:
 17498                           
 17499                           ;RTC.c: 69: }
 17500                           ;RTC.c: 70: int RTC_month = INT_time[5];
 17501  0025B0  C037  F03B         	movff	i2printRTC@INT_time+10,i2printRTC@RTC_month
 17502  0025B4  C038  F03C         	movff	i2printRTC@INT_time+11,i2printRTC@RTC_month+1
 17503                           
 17504                           ;RTC.c: 71: switch(RTC_month){
 17505  0025B8  D084               	goto	i2l6414
 17506  0025BA                     i2l6388:
 17507                           
 17508                           ;RTC.c: 73: strcpy(month, "JAN");
 17509  0025BA  0E3D               	movlw	low i2printRTC@month
 17510  0025BC  6E01               	movwf	i2strcpy@to,c
 17511  0025BE  0E00               	movlw	high i2printRTC@month
 17512  0025C0  6E02               	movwf	i2strcpy@to+1,c
 17513  0025C2  0EDB               	movlw	low STR_8
 17514  0025C4  6E03               	movwf	i2strcpy@from,c
 17515  0025C6  0EFF               	movlw	high STR_8
 17516  0025C8  6E04               	movwf	i2strcpy@from+1,c
 17517  0025CA  EC53  F023         	call	i2_strcpy	;wreg free
 17518                           
 17519                           ;RTC.c: 74: break;
 17520  0025CE  D0A6               	goto	i2l6416
 17521  0025D0                     i2l6390:
 17522                           
 17523                           ;RTC.c: 76: strcpy(month, "FEB");
 17524  0025D0  0E3D               	movlw	low i2printRTC@month
 17525  0025D2  6E01               	movwf	i2strcpy@to,c
 17526  0025D4  0E00               	movlw	high i2printRTC@month
 17527  0025D6  6E02               	movwf	i2strcpy@to+1,c
 17528  0025D8  0ECB               	movlw	low STR_9
 17529  0025DA  6E03               	movwf	i2strcpy@from,c
 17530  0025DC  0EFF               	movlw	high STR_9
 17531  0025DE  6E04               	movwf	i2strcpy@from+1,c
 17532  0025E0  EC53  F023         	call	i2_strcpy	;wreg free
 17533                           
 17534                           ;RTC.c: 77: break;
 17535  0025E4  D09B               	goto	i2l6416
 17536  0025E6                     i2l6392:
 17537                           
 17538                           ;RTC.c: 79: strcpy(month, "MAR");
 17539  0025E6  0E3D               	movlw	low i2printRTC@month
 17540  0025E8  6E01               	movwf	i2strcpy@to,c
 17541  0025EA  0E00               	movlw	high i2printRTC@month
 17542  0025EC  6E02               	movwf	i2strcpy@to+1,c
 17543  0025EE  0EE7               	movlw	low STR_10
 17544  0025F0  6E03               	movwf	i2strcpy@from,c
 17545  0025F2  0EFF               	movlw	high STR_10
 17546  0025F4  6E04               	movwf	i2strcpy@from+1,c
 17547  0025F6  EC53  F023         	call	i2_strcpy	;wreg free
 17548                           
 17549                           ;RTC.c: 80: break;
 17550  0025FA  D090               	goto	i2l6416
 17551  0025FC                     i2l6394:
 17552                           
 17553                           ;RTC.c: 82: strcpy(month, "APR");
 17554  0025FC  0E3D               	movlw	low i2printRTC@month
 17555  0025FE  6E01               	movwf	i2strcpy@to,c
 17556  002600  0E00               	movlw	high i2printRTC@month
 17557  002602  6E02               	movwf	i2strcpy@to+1,c
 17558  002604  0EEB               	movlw	low STR_11
 17559  002606  6E03               	movwf	i2strcpy@from,c
 17560  002608  0EFF               	movlw	high STR_11
 17561  00260A  6E04               	movwf	i2strcpy@from+1,c
 17562  00260C  EC53  F023         	call	i2_strcpy	;wreg free
 17563                           
 17564                           ;RTC.c: 83: break;
 17565  002610  D085               	goto	i2l6416
 17566  002612                     i2l6396:
 17567                           
 17568                           ;RTC.c: 85: strcpy(month, "MAY");
 17569  002612  0E3D               	movlw	low i2printRTC@month
 17570  002614  6E01               	movwf	i2strcpy@to,c
 17571  002616  0E00               	movlw	high i2printRTC@month
 17572  002618  6E02               	movwf	i2strcpy@to+1,c
 17573  00261A  0EFB               	movlw	low STR_12
 17574  00261C  6E03               	movwf	i2strcpy@from,c
 17575  00261E  0EFF               	movlw	high STR_12
 17576  002620  6E04               	movwf	i2strcpy@from+1,c
 17577  002622  EC53  F023         	call	i2_strcpy	;wreg free
 17578                           
 17579                           ;RTC.c: 86: break;
 17580  002626  D07A               	goto	i2l6416
 17581  002628                     i2l6398:
 17582                           
 17583                           ;RTC.c: 88: strcpy(month, "JUN");
 17584  002628  0E3D               	movlw	low i2printRTC@month
 17585  00262A  6E01               	movwf	i2strcpy@to,c
 17586  00262C  0E00               	movlw	high i2printRTC@month
 17587  00262E  6E02               	movwf	i2strcpy@to+1,c
 17588  002630  0EDF               	movlw	low STR_13
 17589  002632  6E03               	movwf	i2strcpy@from,c
 17590  002634  0EFF               	movlw	high STR_13
 17591  002636  6E04               	movwf	i2strcpy@from+1,c
 17592  002638  EC53  F023         	call	i2_strcpy	;wreg free
 17593                           
 17594                           ;RTC.c: 89: break;
 17595  00263C  D06F               	goto	i2l6416
 17596  00263E                     i2l6400:
 17597                           
 17598                           ;RTC.c: 91: strcpy(month, "JUL");
 17599  00263E  0E3D               	movlw	low i2printRTC@month
 17600  002640  6E01               	movwf	i2strcpy@to,c
 17601  002642  0E00               	movlw	high i2printRTC@month
 17602  002644  6E02               	movwf	i2strcpy@to+1,c
 17603  002646  0ED7               	movlw	low STR_14
 17604  002648  6E03               	movwf	i2strcpy@from,c
 17605  00264A  0EFF               	movlw	high STR_14
 17606  00264C  6E04               	movwf	i2strcpy@from+1,c
 17607  00264E  EC53  F023         	call	i2_strcpy	;wreg free
 17608                           
 17609                           ;RTC.c: 92: break;
 17610  002652  D064               	goto	i2l6416
 17611  002654                     i2l6402:
 17612                           
 17613                           ;RTC.c: 94: strcpy(month, "AUG");
 17614  002654  0E3D               	movlw	low i2printRTC@month
 17615  002656  6E01               	movwf	i2strcpy@to,c
 17616  002658  0E00               	movlw	high i2printRTC@month
 17617  00265A  6E02               	movwf	i2strcpy@to+1,c
 17618  00265C  0ED3               	movlw	low STR_15
 17619  00265E  6E03               	movwf	i2strcpy@from,c
 17620  002660  0EFF               	movlw	high STR_15
 17621  002662  6E04               	movwf	i2strcpy@from+1,c
 17622  002664  EC53  F023         	call	i2_strcpy	;wreg free
 17623                           
 17624                           ;RTC.c: 95: break;
 17625  002668  D059               	goto	i2l6416
 17626  00266A                     i2l6404:
 17627                           
 17628                           ;RTC.c: 97: strcpy(month, "SEP");
 17629  00266A  0E3D               	movlw	low i2printRTC@month
 17630  00266C  6E01               	movwf	i2strcpy@to,c
 17631  00266E  0E00               	movlw	high i2printRTC@month
 17632  002670  6E02               	movwf	i2strcpy@to+1,c
 17633  002672  0EE3               	movlw	low STR_16
 17634  002674  6E03               	movwf	i2strcpy@from,c
 17635  002676  0EFF               	movlw	high STR_16
 17636  002678  6E04               	movwf	i2strcpy@from+1,c
 17637  00267A  EC53  F023         	call	i2_strcpy	;wreg free
 17638                           
 17639                           ;RTC.c: 98: break;
 17640  00267E  D04E               	goto	i2l6416
 17641  002680                     i2l6406:
 17642                           
 17643                           ;RTC.c: 100: strcpy(month, "OCT");
 17644  002680  0E3D               	movlw	low i2printRTC@month
 17645  002682  6E01               	movwf	i2strcpy@to,c
 17646  002684  0E00               	movlw	high i2printRTC@month
 17647  002686  6E02               	movwf	i2strcpy@to+1,c
 17648  002688  0EF3               	movlw	low STR_17
 17649  00268A  6E03               	movwf	i2strcpy@from,c
 17650  00268C  0EFF               	movlw	high STR_17
 17651  00268E  6E04               	movwf	i2strcpy@from+1,c
 17652  002690  EC53  F023         	call	i2_strcpy	;wreg free
 17653                           
 17654                           ;RTC.c: 101: break;
 17655  002694  D043               	goto	i2l6416
 17656  002696                     i2l6408:
 17657                           
 17658                           ;RTC.c: 103: strcpy(month, "NOV");
 17659  002696  0E3D               	movlw	low i2printRTC@month
 17660  002698  6E01               	movwf	i2strcpy@to,c
 17661  00269A  0E00               	movlw	high i2printRTC@month
 17662  00269C  6E02               	movwf	i2strcpy@to+1,c
 17663  00269E  0EF7               	movlw	low STR_18
 17664  0026A0  6E03               	movwf	i2strcpy@from,c
 17665  0026A2  0EFF               	movlw	high STR_18
 17666  0026A4  6E04               	movwf	i2strcpy@from+1,c
 17667  0026A6  EC53  F023         	call	i2_strcpy	;wreg free
 17668                           
 17669                           ;RTC.c: 104: break;
 17670  0026AA  D038               	goto	i2l6416
 17671  0026AC                     i2l6410:
 17672                           
 17673                           ;RTC.c: 106: strcpy(month, "DEC");
 17674  0026AC  0E3D               	movlw	low i2printRTC@month
 17675  0026AE  6E01               	movwf	i2strcpy@to,c
 17676  0026B0  0E00               	movlw	high i2printRTC@month
 17677  0026B2  6E02               	movwf	i2strcpy@to+1,c
 17678  0026B4  0ECF               	movlw	low STR_19
 17679  0026B6  6E03               	movwf	i2strcpy@from,c
 17680  0026B8  0EFF               	movlw	high STR_19
 17681  0026BA  6E04               	movwf	i2strcpy@from+1,c
 17682  0026BC  EC53  F023         	call	i2_strcpy	;wreg free
 17683                           
 17684                           ;RTC.c: 108: }
 17685                           
 17686                           ;RTC.c: 107: break;
 17687  0026C0  D02D               	goto	i2l6416
 17688  0026C2                     i2l6414:
 17689  0026C2  C03B  F02A         	movff	i2printRTC@RTC_month,??i2_printRTC
 17690  0026C6  C03C  F02B         	movff	i2printRTC@RTC_month+1,??i2_printRTC+1
 17691                           
 17692                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 17693                           ; Switch size 1, requested type "space"
 17694                           ; Number of cases is 1, Range of values is 0 to 0
 17695                           ; switch strategies available:
 17696                           ; Name         Instructions Cycles
 17697                           ; simple_byte            4     3 (average)
 17698                           ;	Chosen strategy is simple_byte
 17699  0026CA  502B               	movf	??i2_printRTC+1,w,c
 17700  0026CC  0A00               	xorlw	0	; case 0
 17701  0026CE  A4D8               	btfss	status,2,c
 17702  0026D0  D025               	goto	i2l6416
 17703                           
 17704                           ; Switch size 1, requested type "space"
 17705                           ; Number of cases is 12, Range of values is 1 to 12
 17706                           ; switch strategies available:
 17707                           ; Name         Instructions Cycles
 17708                           ; simple_byte           37    19 (average)
 17709                           ;	Chosen strategy is simple_byte
 17710  0026D2  502A               	movf	??i2_printRTC,w,c
 17711  0026D4  0A01               	xorlw	1	; case 1
 17712  0026D6  B4D8               	btfsc	status,2,c
 17713  0026D8  D770               	goto	i2l6388
 17714  0026DA  0A03               	xorlw	3	; case 2
 17715  0026DC  B4D8               	btfsc	status,2,c
 17716  0026DE  D778               	goto	i2l6390
 17717  0026E0  0A01               	xorlw	1	; case 3
 17718  0026E2  B4D8               	btfsc	status,2,c
 17719  0026E4  D780               	goto	i2l6392
 17720  0026E6  0A07               	xorlw	7	; case 4
 17721  0026E8  B4D8               	btfsc	status,2,c
 17722  0026EA  D788               	goto	i2l6394
 17723  0026EC  0A01               	xorlw	1	; case 5
 17724  0026EE  B4D8               	btfsc	status,2,c
 17725  0026F0  D790               	goto	i2l6396
 17726  0026F2  0A03               	xorlw	3	; case 6
 17727  0026F4  B4D8               	btfsc	status,2,c
 17728  0026F6  D798               	goto	i2l6398
 17729  0026F8  0A01               	xorlw	1	; case 7
 17730  0026FA  B4D8               	btfsc	status,2,c
 17731  0026FC  D7A0               	goto	i2l6400
 17732  0026FE  0A0F               	xorlw	15	; case 8
 17733  002700  B4D8               	btfsc	status,2,c
 17734  002702  D7A8               	goto	i2l6402
 17735  002704  0A01               	xorlw	1	; case 9
 17736  002706  B4D8               	btfsc	status,2,c
 17737  002708  D7B0               	goto	i2l6404
 17738  00270A  0A03               	xorlw	3	; case 10
 17739  00270C  B4D8               	btfsc	status,2,c
 17740  00270E  D7B8               	goto	i2l6406
 17741  002710  0A01               	xorlw	1	; case 11
 17742  002712  B4D8               	btfsc	status,2,c
 17743  002714  D7C0               	goto	i2l6408
 17744  002716  0A07               	xorlw	7	; case 12
 17745  002718  B4D8               	btfsc	status,2,c
 17746  00271A  D7C8               	goto	i2l6410
 17747  00271C                     i2l6416:
 17748                           
 17749                           ;RTC.c: 109: lcdInst(0b10000000);;
 17750  00271C  0E80               	movlw	128
 17751  00271E  ECA6  F025         	call	i2_lcdInst
 17752                           
 17753                           ;RTC.c: 110: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
 17754  002722  0E1C               	movlw	low STR_21
 17755  002724  6E0D               	movwf	i2printf@f,c
 17756  002726  0EFB               	movlw	high STR_21
 17757  002728  6E0E               	movwf	i2printf@f+1,c
 17758  00272A  C035  F00F         	movff	i2printRTC@INT_time+8,?i2_printf+2
 17759  00272E  C036  F010         	movff	i2printRTC@INT_time+9,?i2_printf+3
 17760  002732  0E3D               	movlw	low i2printRTC@month
 17761  002734  6E11               	movwf	?i2_printf+4,c
 17762  002736  0E00               	movlw	high i2printRTC@month
 17763  002738  6E12               	movwf	?i2_printf+5,c
 17764  00273A  C031  F013         	movff	i2printRTC@INT_time+4,?i2_printf+6
 17765  00273E  C032  F014         	movff	i2printRTC@INT_time+5,?i2_printf+7
 17766  002742  C02F  F015         	movff	i2printRTC@INT_time+2,?i2_printf+8
 17767  002746  C030  F016         	movff	i2printRTC@INT_time+3,?i2_printf+9
 17768  00274A  C02D  F017         	movff	i2printRTC@INT_time,?i2_printf+10
 17769  00274E  C02E  F018         	movff	i2printRTC@INT_time+1,?i2_printf+11
 17770  002752  EC96  F00C         	call	i2_printf	;wreg free
 17771  002756  0012               	return		;funcret
 17772  002758                     __end_ofi2_printRTC:
 17773                           	opt stack 0
 17774                           pclatu	equ	0xFFB
 17775                           pclath	equ	0xFFA
 17776                           tblptru	equ	0xFF8
 17777                           tblptrh	equ	0xFF7
 17778                           tblptrl	equ	0xFF6
 17779                           tablat	equ	0xFF5
 17780                           prodh	equ	0xFF4
 17781                           prodl	equ	0xFF3
 17782                           intcon	equ	0xFF2
 17783                           intcon2	equ	0xFF1
 17784                           intcon3	equ	0xFF0
 17785                           indf0	equ	0xFEF
 17786                           postinc0	equ	0xFEE
 17787                           fsr0h	equ	0xFEA
 17788                           fsr0l	equ	0xFE9
 17789                           wreg	equ	0xFE8
 17790                           postdec1	equ	0xFE5
 17791                           fsr1h	equ	0xFE2
 17792                           fsr1l	equ	0xFE1
 17793                           indf2	equ	0xFDF
 17794                           postinc2	equ	0xFDE
 17795                           postdec2	equ	0xFDD
 17796                           fsr2h	equ	0xFDA
 17797                           fsr2l	equ	0xFD9
 17798                           status	equ	0xFD8
 17799                           
 17800 ;; *************** function i2_strcpy *****************
 17801 ;; Defined at:
 17802 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
 17803 ;; Parameters:    Size  Location     Type
 17804 ;;  to              2    0[COMRAM] PTR unsigned char 
 17805 ;;		 -> printRTC@month(4), UI@month(4), 
 17806 ;;  from            2    2[COMRAM] PTR const unsigned char 
 17807 ;;		 -> STR_62(4), STR_61(4), STR_60(4), STR_59(4), 
 17808 ;;		 -> STR_58(4), STR_57(4), STR_56(4), STR_55(4), 
 17809 ;;		 -> STR_54(4), STR_53(4), STR_52(4), STR_51(4), 
 17810 ;;		 -> STR_20(4), STR_19(4), STR_18(4), STR_17(4), 
 17811 ;;		 -> STR_16(4), STR_15(4), STR_14(4), STR_13(4), 
 17812 ;;		 -> STR_12(4), STR_11(4), STR_10(4), STR_9(4), 
 17813 ;;		 -> STR_8(4), 
 17814 ;; Auto vars:     Size  Location     Type
 17815 ;;  strcpy          2    4[COMRAM] PTR unsigned char 
 17816 ;;		 -> printRTC@month(4), UI@month(4), 
 17817 ;; Return value:  Size  Location     Type
 17818 ;;                  2    0[COMRAM] PTR unsigned char 
 17819 ;; Registers used:
 17820 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 17821 ;; Tracked objects:
 17822 ;;		On entry : 0/0
 17823 ;;		On exit  : 0/0
 17824 ;;		Unchanged: 0/0
 17825 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17826 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17827 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17828 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17829 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17830 ;;Total ram usage:        6 bytes
 17831 ;; Hardware stack levels used:    1
 17832 ;; This function calls:
 17833 ;;		Nothing
 17834 ;; This function is called by:
 17835 ;;		i2_printRTC
 17836 ;; This function uses a non-reentrant model
 17837 ;;
 17838                           
 17839                           	psect	text63
 17840  0046A6                     __ptext63:
 17841                           	opt stack 0
 17842  0046A6                     i2_strcpy:
 17843                           	opt stack 20
 17844                           
 17845                           ;incstack = 0
 17846  0046A6  C001  F005         	movff	i2strcpy@to,i2strcpy@cp
 17847  0046AA  C002  F006         	movff	i2strcpy@to+1,i2strcpy@cp+1
 17848  0046AE  D004               	goto	i2l6040
 17849  0046B0                     i2l6038:
 17850  0046B0  4A05               	infsnz	i2strcpy@cp,f,c
 17851  0046B2  2A06               	incf	i2strcpy@cp+1,f,c
 17852  0046B4  4A03               	infsnz	i2strcpy@from,f,c
 17853  0046B6  2A04               	incf	i2strcpy@from+1,f,c
 17854  0046B8                     i2l6040:
 17855  0046B8  C003  FFF6         	movff	i2strcpy@from,tblptrl
 17856  0046BC  C004  FFF7         	movff	i2strcpy@from+1,tblptrh
 17857  0046C0                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 17858  0046C0  6AF8               	clrf	tblptru,c
 17859  0046C2                     	endif
 17860  0046C2                     	if	0	;tblptru may be non-zero
 17861  0046C2                     	endif
 17862  0046C2  C005  FFD9         	movff	i2strcpy@cp,fsr2l
 17863  0046C6  C006  FFDA         	movff	i2strcpy@cp+1,fsr2h
 17864  0046CA  0008               	tblrd		*
 17865  0046CC  CFF5 FFDF          	movff	tablat,indf2
 17866  0046D0  50DF               	movf	indf2,w,c
 17867  0046D2  B4D8               	btfsc	status,2,c
 17868  0046D4  0012               	return	
 17869  0046D6  D7EC               	goto	i2l6038
 17870  0046D8                     __end_ofi2_strcpy:
 17871                           	opt stack 0
 17872                           pclatu	equ	0xFFB
 17873                           pclath	equ	0xFFA
 17874                           tblptru	equ	0xFF8
 17875                           tblptrh	equ	0xFF7
 17876                           tblptrl	equ	0xFF6
 17877                           tablat	equ	0xFF5
 17878                           prodh	equ	0xFF4
 17879                           prodl	equ	0xFF3
 17880                           intcon	equ	0xFF2
 17881                           intcon2	equ	0xFF1
 17882                           intcon3	equ	0xFF0
 17883                           indf0	equ	0xFEF
 17884                           postinc0	equ	0xFEE
 17885                           fsr0h	equ	0xFEA
 17886                           fsr0l	equ	0xFE9
 17887                           wreg	equ	0xFE8
 17888                           postdec1	equ	0xFE5
 17889                           fsr1h	equ	0xFE2
 17890                           fsr1l	equ	0xFE1
 17891                           indf2	equ	0xFDF
 17892                           postinc2	equ	0xFDE
 17893                           postdec2	equ	0xFDD
 17894                           fsr2h	equ	0xFDA
 17895                           fsr2l	equ	0xFD9
 17896                           status	equ	0xFD8
 17897                           
 17898 ;; *************** function _inputHandler *****************
 17899 ;; Defined at:
 17900 ;;		line 372 in file "UI.c"
 17901 ;; Parameters:    Size  Location     Type
 17902 ;;		None
 17903 ;; Auto vars:     Size  Location     Type
 17904 ;;		None
 17905 ;; Return value:  Size  Location     Type
 17906 ;;                  2   41[COMRAM] int 
 17907 ;; Registers used:
 17908 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17909 ;; Tracked objects:
 17910 ;;		On entry : 0/0
 17911 ;;		On exit  : 0/0
 17912 ;;		Unchanged: 0/0
 17913 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17914 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17915 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17916 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17917 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17918 ;;Total ram usage:        4 bytes
 17919 ;; Hardware stack levels used:    1
 17920 ;; Hardware stack levels required when called:    4
 17921 ;; This function calls:
 17922 ;;		_change_state_to_logs_11
 17923 ;;		_change_state_to_logs_12
 17924 ;;		_change_state_to_logs_22
 17925 ;;		_change_state_to_logs_23
 17926 ;;		_change_state_to_logs_33
 17927 ;;		_change_state_to_logs_34
 17928 ;;		_change_state_to_menu_11
 17929 ;;		_change_state_to_menu_23
 17930 ;;		i2_change_state_to_menu_12
 17931 ;;		i2_change_state_to_menu_22
 17932 ;; This function is called by:
 17933 ;;		_updateMenu
 17934 ;; This function uses a non-reentrant model
 17935 ;;
 17936                           
 17937                           	psect	text64
 17938  002D8C                     __ptext64:
 17939                           	opt stack 0
 17940  002D8C                     _inputHandler:
 17941                           	opt stack 18
 17942                           
 17943                           ;UI.c: 377: if(firstboot){
 17944                           
 17945                           ;incstack = 0
 17946  002D8C  506F               	movf	_firstboot,w,c
 17947  002D8E  1070               	iorwf	_firstboot+1,w,c
 17948  002D90  B4D8               	btfsc	status,2,c
 17949  002D92  D00B               	goto	i2l6484
 17950                           
 17951                           ;UI.c: 378: change_state_to_menu_11();
 17952  002D94  ECB4  F023         	call	_change_state_to_menu_11	;wreg free
 17953                           
 17954                           ;UI.c: 379: firstboot = 0;
 17955  002D98  0E00               	movlw	0
 17956  002D9A  6E70               	movwf	_firstboot+1,c
 17957  002D9C  0E00               	movlw	0
 17958  002D9E  6E6F               	movwf	_firstboot,c
 17959                           
 17960                           ;UI.c: 380: return 0;
 17961  002DA0  0E00               	movlw	0
 17962  002DA2  6E2B               	movwf	?_inputHandler+1,c
 17963  002DA4  0E00               	movlw	0
 17964  002DA6  6E2A               	movwf	?_inputHandler,c
 17965  002DA8  0012               	return	
 17966  002DAA                     i2l6484:
 17967                           
 17968                           ;UI.c: 381: }
 17969                           ;UI.c: 382: if (logstate){
 17970  002DAA  0100               	movlb	0	; () banked
 17971  002DAC  51F6               	movf	_logstate& (0+255),w,b
 17972  002DAE  0100               	movlb	0	; () banked
 17973  002DB0  11F7               	iorwf	(_logstate+1)& (0+255),w,b
 17974  002DB2  B4D8               	btfsc	status,2,c
 17975  002DB4  D0C7               	goto	i2l6602
 17976                           
 17977                           ; BSR set to: 0
 17978                           ;UI.c: 383: if(input == 'C' && PORTBbits.RB1 == 1){
 17979  002DB6  0E43               	movlw	67
 17980  002DB8  187D               	xorwf	_input,w,c	;volatile
 17981  002DBA  A4D8               	btfss	status,2,c
 17982  002DBC  D012               	goto	i2l6502
 17983                           
 17984                           ; BSR set to: 0
 17985  002DBE  B281               	btfsc	3969,1,c	;volatile
 17986  002DC0  D009               	goto	i2l6494
 17987  002DC2  D00F               	goto	i2l6502
 17988  002DC4                     i2l6492:
 17989                           
 17990                           ;UI.c: 386: _delay((unsigned long)((10)*(32000000/4000.0)));
 17991  002DC4  0E68               	movlw	104
 17992  002DC6  6E2C               	movwf	??_inputHandler& (0+255),c
 17993  002DC8  0EE4               	movlw	228
 17994  002DCA                     i2u891_47:
 17995  002DCA  2EE8               	decfsz	wreg,f,c
 17996  002DCC  D7FE               	bra	i2u891_47
 17997  002DCE  2E2C               	decfsz	??_inputHandler& (0+255),f,c
 17998  002DD0  D7FC               	bra	i2u891_47
 17999  002DD2  D000               	nop2	
 18000  002DD4                     i2l6494:
 18001  002DD4  B281               	btfsc	3969,1,c	;volatile
 18002  002DD6  D7F6               	goto	i2l6492
 18003  002DD8                     i2l6496:
 18004                           
 18005                           ;UI.c: 387: }
 18006                           ;UI.c: 388: return 0;
 18007  002DD8  0E00               	movlw	0
 18008  002DDA  6E2B               	movwf	?_inputHandler+1,c
 18009  002DDC  0E00               	movlw	0
 18010  002DDE  6E2A               	movwf	?_inputHandler,c
 18011  002DE0  0012               	return	
 18012  002DE2                     i2l6502:
 18013                           
 18014                           ;UI.c: 390: else if (input == 'D'){
 18015  002DE2  0E44               	movlw	68
 18016  002DE4  187D               	xorwf	_input,w,c	;volatile
 18017  002DE6  A4D8               	btfss	status,2,c
 18018  002DE8  D7F7               	goto	i2l6496
 18019                           
 18020                           ;UI.c: 392: logstate = 0;
 18021  002DEA  0E00               	movlw	0
 18022  002DEC  0100               	movlb	0	; () banked
 18023  002DEE  6FF7               	movwf	(_logstate+1)& (0+255),b
 18024  002DF0  0E00               	movlw	0
 18025  002DF2  6FF6               	movwf	_logstate& (0+255),b
 18026                           
 18027                           ;UI.c: 393: switch(cur_state){
 18028  002DF4  D012               	goto	i2l6520
 18029  002DF6                     i2l6506:
 18030                           
 18031                           ;UI.c: 395: change_state_to_logs_11();
 18032  002DF6  EC2C  F024         	call	_change_state_to_logs_11	;wreg free
 18033                           
 18034                           ;UI.c: 396: break;
 18035  002DFA  D7EE               	goto	i2l6496
 18036  002DFC                     i2l6508:
 18037                           
 18038                           ;UI.c: 398: change_state_to_logs_12();
 18039  002DFC  EC14  F024         	call	_change_state_to_logs_12	;wreg free
 18040                           
 18041                           ;UI.c: 399: break;
 18042  002E00  D7EB               	goto	i2l6496
 18043  002E02                     i2l6510:
 18044                           
 18045                           ;UI.c: 401: change_state_to_logs_22();
 18046  002E02  ECFC  F023         	call	_change_state_to_logs_22	;wreg free
 18047                           
 18048                           ;UI.c: 402: break;
 18049  002E06  D7E8               	goto	i2l6496
 18050  002E08                     i2l6512:
 18051                           
 18052                           ;UI.c: 404: change_state_to_logs_23();
 18053  002E08  EC72  F024         	call	_change_state_to_logs_23	;wreg free
 18054                           
 18055                           ;UI.c: 405: break;
 18056  002E0C  D7E5               	goto	i2l6496
 18057  002E0E                     i2l6514:
 18058                           
 18059                           ;UI.c: 407: change_state_to_logs_33();
 18060  002E0E  ECE4  F023         	call	_change_state_to_logs_33	;wreg free
 18061                           
 18062                           ;UI.c: 408: break;
 18063  002E12  D7E2               	goto	i2l6496
 18064  002E14                     i2l6516:
 18065                           
 18066                           ;UI.c: 410: change_state_to_logs_34();
 18067  002E14  ECCC  F023         	call	_change_state_to_logs_34	;wreg free
 18068                           
 18069                           ;UI.c: 412: }
 18070                           
 18071                           ;UI.c: 411: break;
 18072  002E18  D7DF               	goto	i2l6496
 18073  002E1A                     i2l6520:
 18074  002E1A  C0E6  F02C         	movff	_cur_state,??_inputHandler
 18075  002E1E  C0E7  F02D         	movff	_cur_state+1,??_inputHandler+1
 18076                           
 18077                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
 18078                           ; Switch size 1, requested type "space"
 18079                           ; Number of cases is 2, Range of values is 3 to 4
 18080                           ; switch strategies available:
 18081                           ; Name         Instructions Cycles
 18082                           ; simple_byte            7     4 (average)
 18083                           ;	Chosen strategy is simple_byte
 18084  002E22  502D               	movf	??_inputHandler+1,w,c
 18085  002E24  0A03               	xorlw	3	; case 3
 18086  002E26  B4D8               	btfsc	status,2,c
 18087  002E28  D004               	goto	i2l8886
 18088  002E2A  0A07               	xorlw	7	; case 4
 18089  002E2C  B4D8               	btfsc	status,2,c
 18090  002E2E  D00F               	goto	i2l8888
 18091  002E30  D7D3               	goto	i2l6496
 18092  002E32                     i2l8886:
 18093                           
 18094                           ; Switch size 1, requested type "space"
 18095                           ; Number of cases is 4, Range of values is 243 to 255
 18096                           ; switch strategies available:
 18097                           ; Name         Instructions Cycles
 18098                           ; simple_byte           13     7 (average)
 18099                           ;	Chosen strategy is simple_byte
 18100  002E32  502C               	movf	??_inputHandler,w,c
 18101  002E34  0AF3               	xorlw	243	; case 243
 18102  002E36  B4D8               	btfsc	status,2,c
 18103  002E38  D7DE               	goto	i2l6506
 18104  002E3A  0A07               	xorlw	7	; case 244
 18105  002E3C  B4D8               	btfsc	status,2,c
 18106  002E3E  D7DE               	goto	i2l6508
 18107  002E40  0A0A               	xorlw	10	; case 254
 18108  002E42  B4D8               	btfsc	status,2,c
 18109  002E44  D7DE               	goto	i2l6510
 18110  002E46  0A01               	xorlw	1	; case 255
 18111  002E48  B4D8               	btfsc	status,2,c
 18112  002E4A  D7DE               	goto	i2l6512
 18113  002E4C  D7C5               	goto	i2l6496
 18114  002E4E                     i2l8888:
 18115                           
 18116                           ; Switch size 1, requested type "space"
 18117                           ; Number of cases is 2, Range of values is 9 to 10
 18118                           ; switch strategies available:
 18119                           ; Name         Instructions Cycles
 18120                           ; simple_byte            7     4 (average)
 18121                           ;	Chosen strategy is simple_byte
 18122  002E4E  502C               	movf	??_inputHandler,w,c
 18123  002E50  0A09               	xorlw	9	; case 9
 18124  002E52  B4D8               	btfsc	status,2,c
 18125  002E54  D7DC               	goto	i2l6514
 18126  002E56  0A03               	xorlw	3	; case 10
 18127  002E58  B4D8               	btfsc	status,2,c
 18128  002E5A  D7DC               	goto	i2l6516
 18129  002E5C  D7BD               	goto	i2l6496
 18130  002E5E                     i2l6532:
 18131                           
 18132                           ;UI.c: 422: if(cur_state == 11){
 18133  002E5E  0E0B               	movlw	11
 18134  002E60  0100               	movlb	0	; () banked
 18135  002E62  19E6               	xorwf	_cur_state& (0+255),w,b
 18136  002E64  0100               	movlb	0	; () banked
 18137  002E66  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
 18138  002E68  A4D8               	btfss	status,2,c
 18139  002E6A  D005               	goto	i2l6540
 18140                           
 18141                           ; BSR set to: 0
 18142                           ;UI.c: 423: return 0;
 18143  002E6C  0E00               	movlw	0
 18144  002E6E  6E2B               	movwf	?_inputHandler+1,c
 18145  002E70  0E00               	movlw	0
 18146  002E72  6E2A               	movwf	?_inputHandler,c
 18147                           
 18148                           ; BSR set to: 0
 18149  002E74  0012               	return	
 18150  002E76                     i2l6540:
 18151                           
 18152                           ; BSR set to: 0
 18153                           ;UI.c: 425: else{
 18154                           ;UI.c: 426: change_state_to_menu_11();
 18155  002E76  ECB4  F023         	call	_change_state_to_menu_11	;wreg free
 18156                           
 18157                           ;UI.c: 427: }
 18158                           ;UI.c: 428: return 0;
 18159  002E7A  0E00               	movlw	0
 18160  002E7C  6E2B               	movwf	?_inputHandler+1,c
 18161  002E7E  0E00               	movlw	0
 18162  002E80  6E2A               	movwf	?_inputHandler,c
 18163  002E82  0012               	return	
 18164  002E84                     i2l6546:
 18165                           
 18166                           ;UI.c: 430: if(cur_state == 22 | cur_state == 12){
 18167  002E84  0E16               	movlw	22
 18168  002E86  0100               	movlb	0	; () banked
 18169  002E88  19E6               	xorwf	_cur_state& (0+255),w,b
 18170  002E8A  0100               	movlb	0	; () banked
 18171  002E8C  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
 18172  002E8E  B4D8               	btfsc	status,2,c
 18173  002E90  D007               	goto	i2l6550
 18174                           
 18175                           ; BSR set to: 0
 18176  002E92  0E0C               	movlw	12
 18177  002E94  0100               	movlb	0	; () banked
 18178  002E96  19E6               	xorwf	_cur_state& (0+255),w,b
 18179  002E98  0100               	movlb	0	; () banked
 18180  002E9A  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
 18181  002E9C  A4D8               	btfss	status,2,c
 18182  002E9E  D005               	goto	i2l6556
 18183  002EA0                     i2l6550:
 18184                           
 18185                           ; BSR set to: 0
 18186                           ;UI.c: 431: return 0;
 18187  002EA0  0E00               	movlw	0
 18188  002EA2  6E2B               	movwf	?_inputHandler+1,c
 18189  002EA4  0E00               	movlw	0
 18190  002EA6  6E2A               	movwf	?_inputHandler,c
 18191                           
 18192                           ; BSR set to: 0
 18193  002EA8  0012               	return	
 18194  002EAA                     i2l6556:
 18195                           
 18196                           ; BSR set to: 0
 18197                           ;UI.c: 433: else if(cur_state == 23){
 18198  002EAA  0E17               	movlw	23
 18199  002EAC  0100               	movlb	0	; () banked
 18200  002EAE  19E6               	xorwf	_cur_state& (0+255),w,b
 18201  002EB0  0100               	movlb	0	; () banked
 18202  002EB2  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
 18203  002EB4  A4D8               	btfss	status,2,c
 18204  002EB6  D003               	goto	i2l6560
 18205                           
 18206                           ; BSR set to: 0
 18207                           ;UI.c: 434: change_state_to_menu_22();
 18208  002EB8  EC6C  F023         	call	i2_change_state_to_menu_22	;wreg free
 18209                           
 18210                           ;UI.c: 435: }
 18211  002EBC  D002               	goto	i2l6562
 18212  002EBE                     i2l6560:
 18213                           
 18214                           ;UI.c: 436: else{
 18215                           ;UI.c: 437: change_state_to_menu_12();
 18216  002EBE  EC84  F023         	call	i2_change_state_to_menu_12	;wreg free
 18217  002EC2                     i2l6562:
 18218                           
 18219                           ;UI.c: 438: }
 18220                           ;UI.c: 439: return 0;
 18221  002EC2  0E00               	movlw	0
 18222  002EC4  6E2B               	movwf	?_inputHandler+1,c
 18223  002EC6  0E00               	movlw	0
 18224  002EC8  6E2A               	movwf	?_inputHandler,c
 18225  002ECA  0012               	return	
 18226  002ECC                     i2l6566:
 18227                           
 18228                           ;UI.c: 441: if(cur_state == 23){
 18229  002ECC  0E17               	movlw	23
 18230  002ECE  0100               	movlb	0	; () banked
 18231  002ED0  19E6               	xorwf	_cur_state& (0+255),w,b
 18232  002ED2  0100               	movlb	0	; () banked
 18233  002ED4  11E7               	iorwf	(_cur_state+1)& (0+255),w,b
 18234  002ED6  A4D8               	btfss	status,2,c
 18235  002ED8  D005               	goto	i2l6574
 18236                           
 18237                           ; BSR set to: 0
 18238                           ;UI.c: 442: return 0;
 18239  002EDA  0E00               	movlw	0
 18240  002EDC  6E2B               	movwf	?_inputHandler+1,c
 18241  002EDE  0E00               	movlw	0
 18242  002EE0  6E2A               	movwf	?_inputHandler,c
 18243                           
 18244                           ; BSR set to: 0
 18245  002EE2  0012               	return	
 18246  002EE4                     i2l6574:
 18247                           
 18248                           ; BSR set to: 0
 18249                           ;UI.c: 444: else{
 18250                           ;UI.c: 445: change_state_to_menu_23();
 18251  002EE4  EC9C  F023         	call	_change_state_to_menu_23	;wreg free
 18252                           
 18253                           ;UI.c: 446: }
 18254                           ;UI.c: 447: return 0;
 18255  002EE8  0E00               	movlw	0
 18256  002EEA  6E2B               	movwf	?_inputHandler+1,c
 18257  002EEC  0E00               	movlw	0
 18258  002EEE  6E2A               	movwf	?_inputHandler,c
 18259  002EF0  0012               	return	
 18260  002EF2                     i2l6580:
 18261                           
 18262                           ;UI.c: 450: up = 1;
 18263  002EF2  0E00               	movlw	0
 18264  002EF4  6E78               	movwf	_up+1,c
 18265  002EF6  0E01               	movlw	1
 18266  002EF8  6E77               	movwf	_up,c
 18267                           
 18268                           ;UI.c: 451: return 1;
 18269  002EFA  0E00               	movlw	0
 18270  002EFC  6E2B               	movwf	?_inputHandler+1,c
 18271  002EFE  0E01               	movlw	1
 18272  002F00  6E2A               	movwf	?_inputHandler,c
 18273  002F02  0012               	return	
 18274  002F04                     i2l6584:
 18275                           
 18276                           ;UI.c: 453: down = 1;
 18277  002F04  0E00               	movlw	0
 18278  002F06  6E64               	movwf	_down+1,c
 18279  002F08  0E01               	movlw	1
 18280  002F0A  6E63               	movwf	_down,c
 18281                           
 18282                           ;UI.c: 454: return 1;
 18283  002F0C  0E00               	movlw	0
 18284  002F0E  6E2B               	movwf	?_inputHandler+1,c
 18285  002F10  0E01               	movlw	1
 18286  002F12  6E2A               	movwf	?_inputHandler,c
 18287  002F14  0012               	return	
 18288  002F16                     i2l6588:
 18289                           
 18290                           ;UI.c: 456: enter = 1;
 18291  002F16  0E00               	movlw	0
 18292  002F18  6E66               	movwf	_enter+1,c
 18293  002F1A  0E01               	movlw	1
 18294  002F1C  6E65               	movwf	_enter,c
 18295                           
 18296                           ;UI.c: 457: return 1;
 18297  002F1E  0E00               	movlw	0
 18298  002F20  6E2B               	movwf	?_inputHandler+1,c
 18299  002F22  0E01               	movlw	1
 18300  002F24  6E2A               	movwf	?_inputHandler,c
 18301  002F26  0012               	return	
 18302  002F28                     i2l6592:
 18303                           
 18304                           ;UI.c: 459: back = 1;
 18305  002F28  0E00               	movlw	0
 18306  002F2A  6E5C               	movwf	_back+1,c
 18307  002F2C  0E01               	movlw	1
 18308  002F2E  6E5B               	movwf	_back,c
 18309                           
 18310                           ;UI.c: 460: return 1;
 18311  002F30  0E00               	movlw	0
 18312  002F32  6E2B               	movwf	?_inputHandler+1,c
 18313  002F34  0E01               	movlw	1
 18314  002F36  6E2A               	movwf	?_inputHandler,c
 18315  002F38  0012               	return	
 18316  002F3A                     i2l6596:
 18317                           
 18318                           ;UI.c: 463: return 1;
 18319  002F3A  0E00               	movlw	0
 18320  002F3C  6E2B               	movwf	?_inputHandler+1,c
 18321  002F3E  0E01               	movlw	1
 18322  002F40  6E2A               	movwf	?_inputHandler,c
 18323                           
 18324                           ;UI.c: 464: }
 18325  002F42  0012               	return	
 18326  002F44                     i2l6602:
 18327  002F44  507D               	movf	_input,w,c	;volatile
 18328                           
 18329                           ; Switch size 1, requested type "space"
 18330                           ; Number of cases is 7, Range of values is 49 to 68
 18331                           ; switch strategies available:
 18332                           ; Name         Instructions Cycles
 18333                           ; simple_byte           22    12 (average)
 18334                           ;	Chosen strategy is simple_byte
 18335  002F46  0A31               	xorlw	49	; case 49
 18336  002F48  B4D8               	btfsc	status,2,c
 18337  002F4A  D789               	goto	i2l6532
 18338  002F4C  0A03               	xorlw	3	; case 50
 18339  002F4E  B4D8               	btfsc	status,2,c
 18340  002F50  D799               	goto	i2l6546
 18341  002F52  0A01               	xorlw	1	; case 51
 18342  002F54  B4D8               	btfsc	status,2,c
 18343  002F56  D7BA               	goto	i2l6566
 18344  002F58  0A72               	xorlw	114	; case 65
 18345  002F5A  B4D8               	btfsc	status,2,c
 18346  002F5C  D7CA               	goto	i2l6580
 18347  002F5E  0A03               	xorlw	3	; case 66
 18348  002F60  B4D8               	btfsc	status,2,c
 18349  002F62  D7D0               	goto	i2l6584
 18350  002F64  0A01               	xorlw	1	; case 67
 18351  002F66  B4D8               	btfsc	status,2,c
 18352  002F68  D7D6               	goto	i2l6588
 18353  002F6A  0A07               	xorlw	7	; case 68
 18354  002F6C  B4D8               	btfsc	status,2,c
 18355  002F6E  D7DC               	goto	i2l6592
 18356  002F70  D7E4               	goto	i2l6596
 18357  002F72                     __end_of_inputHandler:
 18358                           	opt stack 0
 18359                           pclatu	equ	0xFFB
 18360                           pclath	equ	0xFFA
 18361                           tblptru	equ	0xFF8
 18362                           tblptrh	equ	0xFF7
 18363                           tblptrl	equ	0xFF6
 18364                           tablat	equ	0xFF5
 18365                           prodh	equ	0xFF4
 18366                           prodl	equ	0xFF3
 18367                           intcon	equ	0xFF2
 18368                           intcon2	equ	0xFF1
 18369                           intcon3	equ	0xFF0
 18370                           indf0	equ	0xFEF
 18371                           postinc0	equ	0xFEE
 18372                           fsr0h	equ	0xFEA
 18373                           fsr0l	equ	0xFE9
 18374                           wreg	equ	0xFE8
 18375                           postdec1	equ	0xFE5
 18376                           fsr1h	equ	0xFE2
 18377                           fsr1l	equ	0xFE1
 18378                           indf2	equ	0xFDF
 18379                           postinc2	equ	0xFDE
 18380                           postdec2	equ	0xFDD
 18381                           fsr2h	equ	0xFDA
 18382                           fsr2l	equ	0xFD9
 18383                           status	equ	0xFD8
 18384                           
 18385 ;; *************** function i2_change_state_to_menu_22 *****************
 18386 ;; Defined at:
 18387 ;;		line 498 in file "UI.c"
 18388 ;; Parameters:    Size  Location     Type
 18389 ;;		None
 18390 ;; Auto vars:     Size  Location     Type
 18391 ;;		None
 18392 ;; Return value:  Size  Location     Type
 18393 ;;                  1    wreg      void 
 18394 ;; Registers used:
 18395 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18396 ;; Tracked objects:
 18397 ;;		On entry : 0/0
 18398 ;;		On exit  : 0/0
 18399 ;;		Unchanged: 0/0
 18400 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18401 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18402 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18403 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18404 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18405 ;;Total ram usage:        0 bytes
 18406 ;; Hardware stack levels used:    1
 18407 ;; Hardware stack levels required when called:    3
 18408 ;; This function calls:
 18409 ;;		i2_lcdInst
 18410 ;;		i2_printf
 18411 ;; This function is called by:
 18412 ;;		_updateMenu
 18413 ;;		_inputHandler
 18414 ;; This function uses a non-reentrant model
 18415 ;;
 18416                           
 18417                           	psect	text65
 18418  0046D8                     __ptext65:
 18419                           	opt stack 0
 18420  0046D8                     i2_change_state_to_menu_22:
 18421                           	opt stack 19
 18422                           
 18423                           ;UI.c: 499: cur_state = 22;
 18424                           
 18425                           ;incstack = 0
 18426  0046D8  0E00               	movlw	0
 18427  0046DA  0100               	movlb	0	; () banked
 18428  0046DC  6FE7               	movwf	(_cur_state+1)& (0+255),b
 18429  0046DE  0E16               	movlw	22
 18430  0046E0  6FE6               	movwf	_cur_state& (0+255),b
 18431                           
 18432                           ; BSR set to: 0
 18433                           ;UI.c: 501: lcdInst(0b10000000);;
 18434  0046E2  0E80               	movlw	128
 18435  0046E4  ECA6  F025         	call	i2_lcdInst
 18436                           
 18437                           ;UI.c: 502: printf("2. SORT        <");
 18438  0046E8  0EC4               	movlw	low STR_34
 18439  0046EA  6E0D               	movwf	i2printf@f,c
 18440  0046EC  0EFD               	movlw	high STR_34
 18441  0046EE  6E0E               	movwf	i2printf@f+1,c
 18442  0046F0  EC96  F00C         	call	i2_printf	;wreg free
 18443                           
 18444                           ;UI.c: 503: lcdInst(0b11000000);;
 18445  0046F4  0EC0               	movlw	192
 18446  0046F6  ECA6  F025         	call	i2_lcdInst
 18447                           
 18448                           ;UI.c: 504: printf("3. LOGS         ");
 18449  0046FA  0E09               	movlw	low STR_36
 18450  0046FC  6E0D               	movwf	i2printf@f,c
 18451  0046FE  0EFD               	movlw	high STR_36
 18452  004700  6E0E               	movwf	i2printf@f+1,c
 18453  004702  EC96  F00C         	call	i2_printf	;wreg free
 18454  004706  0012               	return		;funcret
 18455  004708                     __end_ofi2_change_state_to_menu_22:
 18456                           	opt stack 0
 18457                           pclatu	equ	0xFFB
 18458                           pclath	equ	0xFFA
 18459                           tblptru	equ	0xFF8
 18460                           tblptrh	equ	0xFF7
 18461                           tblptrl	equ	0xFF6
 18462                           tablat	equ	0xFF5
 18463                           prodh	equ	0xFF4
 18464                           prodl	equ	0xFF3
 18465                           intcon	equ	0xFF2
 18466                           intcon2	equ	0xFF1
 18467                           intcon3	equ	0xFF0
 18468                           indf0	equ	0xFEF
 18469                           postinc0	equ	0xFEE
 18470                           fsr0h	equ	0xFEA
 18471                           fsr0l	equ	0xFE9
 18472                           wreg	equ	0xFE8
 18473                           postdec1	equ	0xFE5
 18474                           fsr1h	equ	0xFE2
 18475                           fsr1l	equ	0xFE1
 18476                           indf2	equ	0xFDF
 18477                           postinc2	equ	0xFDE
 18478                           postdec2	equ	0xFDD
 18479                           fsr2h	equ	0xFDA
 18480                           fsr2l	equ	0xFD9
 18481                           status	equ	0xFD8
 18482                           
 18483 ;; *************** function i2_change_state_to_menu_12 *****************
 18484 ;; Defined at:
 18485 ;;		line 490 in file "UI.c"
 18486 ;; Parameters:    Size  Location     Type
 18487 ;;		None
 18488 ;; Auto vars:     Size  Location     Type
 18489 ;;		None
 18490 ;; Return value:  Size  Location     Type
 18491 ;;                  1    wreg      void 
 18492 ;; Registers used:
 18493 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18494 ;; Tracked objects:
 18495 ;;		On entry : 0/0
 18496 ;;		On exit  : 0/0
 18497 ;;		Unchanged: 0/0
 18498 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18499 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18500 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18501 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18502 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18503 ;;Total ram usage:        0 bytes
 18504 ;; Hardware stack levels used:    1
 18505 ;; Hardware stack levels required when called:    3
 18506 ;; This function calls:
 18507 ;;		i2_lcdInst
 18508 ;;		i2_printf
 18509 ;; This function is called by:
 18510 ;;		_updateMenu
 18511 ;;		_inputHandler
 18512 ;; This function uses a non-reentrant model
 18513 ;;
 18514                           
 18515                           	psect	text66
 18516  004708                     __ptext66:
 18517                           	opt stack 0
 18518  004708                     i2_change_state_to_menu_12:
 18519                           	opt stack 19
 18520                           
 18521                           ;UI.c: 491: cur_state = 12;
 18522                           
 18523                           ;incstack = 0
 18524  004708  0E00               	movlw	0
 18525  00470A  0100               	movlb	0	; () banked
 18526  00470C  6FE7               	movwf	(_cur_state+1)& (0+255),b
 18527  00470E  0E0C               	movlw	12
 18528  004710  6FE6               	movwf	_cur_state& (0+255),b
 18529                           
 18530                           ; BSR set to: 0
 18531                           ;UI.c: 493: lcdInst(0b10000000);;
 18532  004712  0E80               	movlw	128
 18533  004714  ECA6  F025         	call	i2_lcdInst
 18534                           
 18535                           ;UI.c: 494: printf("1. DATE/TIME    ");
 18536  004718  0E2B               	movlw	low STR_33
 18537  00471A  6E0D               	movwf	i2printf@f,c
 18538  00471C  0EFD               	movlw	high STR_33
 18539  00471E  6E0E               	movwf	i2printf@f+1,c
 18540  004720  EC96  F00C         	call	i2_printf	;wreg free
 18541                           
 18542                           ;UI.c: 495: lcdInst(0b11000000);;
 18543  004724  0EC0               	movlw	192
 18544  004726  ECA6  F025         	call	i2_lcdInst
 18545                           
 18546                           ;UI.c: 496: printf("2. SORT        <");
 18547  00472A  0EC4               	movlw	low STR_34
 18548  00472C  6E0D               	movwf	i2printf@f,c
 18549  00472E  0EFD               	movlw	high STR_34
 18550  004730  6E0E               	movwf	i2printf@f+1,c
 18551  004732  EC96  F00C         	call	i2_printf	;wreg free
 18552  004736  0012               	return		;funcret
 18553  004738                     __end_ofi2_change_state_to_menu_12:
 18554                           	opt stack 0
 18555                           pclatu	equ	0xFFB
 18556                           pclath	equ	0xFFA
 18557                           tblptru	equ	0xFF8
 18558                           tblptrh	equ	0xFF7
 18559                           tblptrl	equ	0xFF6
 18560                           tablat	equ	0xFF5
 18561                           prodh	equ	0xFF4
 18562                           prodl	equ	0xFF3
 18563                           intcon	equ	0xFF2
 18564                           intcon2	equ	0xFF1
 18565                           intcon3	equ	0xFF0
 18566                           indf0	equ	0xFEF
 18567                           postinc0	equ	0xFEE
 18568                           fsr0h	equ	0xFEA
 18569                           fsr0l	equ	0xFE9
 18570                           wreg	equ	0xFE8
 18571                           postdec1	equ	0xFE5
 18572                           fsr1h	equ	0xFE2
 18573                           fsr1l	equ	0xFE1
 18574                           indf2	equ	0xFDF
 18575                           postinc2	equ	0xFDE
 18576                           postdec2	equ	0xFDD
 18577                           fsr2h	equ	0xFDA
 18578                           fsr2l	equ	0xFD9
 18579                           status	equ	0xFD8
 18580                           
 18581 ;; *************** function _change_state_to_menu_23 *****************
 18582 ;; Defined at:
 18583 ;;		line 506 in file "UI.c"
 18584 ;; Parameters:    Size  Location     Type
 18585 ;;		None
 18586 ;; Auto vars:     Size  Location     Type
 18587 ;;		None
 18588 ;; Return value:  Size  Location     Type
 18589 ;;                  1    wreg      void 
 18590 ;; Registers used:
 18591 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18592 ;; Tracked objects:
 18593 ;;		On entry : 0/0
 18594 ;;		On exit  : 0/0
 18595 ;;		Unchanged: 0/0
 18596 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18597 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18598 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18599 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18600 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18601 ;;Total ram usage:        0 bytes
 18602 ;; Hardware stack levels used:    1
 18603 ;; Hardware stack levels required when called:    3
 18604 ;; This function calls:
 18605 ;;		i2_lcdInst
 18606 ;;		i2_printf
 18607 ;; This function is called by:
 18608 ;;		_updateMenu
 18609 ;;		_inputHandler
 18610 ;; This function uses a non-reentrant model
 18611 ;;
 18612                           
 18613                           	psect	text67
 18614  004738                     __ptext67:
 18615                           	opt stack 0
 18616  004738                     _change_state_to_menu_23:
 18617                           	opt stack 18
 18618                           
 18619                           ;UI.c: 507: cur_state = 23;
 18620                           
 18621                           ;incstack = 0
 18622  004738  0E00               	movlw	0
 18623  00473A  0100               	movlb	0	; () banked
 18624  00473C  6FE7               	movwf	(_cur_state+1)& (0+255),b
 18625  00473E  0E17               	movlw	23
 18626  004740  6FE6               	movwf	_cur_state& (0+255),b
 18627                           
 18628                           ; BSR set to: 0
 18629                           ;UI.c: 509: lcdInst(0b10000000);;
 18630  004742  0E80               	movlw	128
 18631  004744  ECA6  F025         	call	i2_lcdInst
 18632                           
 18633                           ;UI.c: 510: printf("2. SORT         ");
 18634  004748  0E1A               	movlw	low STR_32
 18635  00474A  6E0D               	movwf	i2printf@f,c
 18636  00474C  0EFD               	movlw	high STR_32
 18637  00474E  6E0E               	movwf	i2printf@f+1,c
 18638  004750  EC96  F00C         	call	i2_printf	;wreg free
 18639                           
 18640                           ;UI.c: 511: lcdInst(0b11000000);;
 18641  004754  0EC0               	movlw	192
 18642  004756  ECA6  F025         	call	i2_lcdInst
 18643                           
 18644                           ;UI.c: 512: printf("3. LOGS        <");
 18645  00475A  0EB3               	movlw	low STR_38
 18646  00475C  6E0D               	movwf	i2printf@f,c
 18647  00475E  0EFD               	movlw	high STR_38
 18648  004760  6E0E               	movwf	i2printf@f+1,c
 18649  004762  EC96  F00C         	call	i2_printf	;wreg free
 18650  004766  0012               	return		;funcret
 18651  004768                     __end_of_change_state_to_menu_23:
 18652                           	opt stack 0
 18653                           pclatu	equ	0xFFB
 18654                           pclath	equ	0xFFA
 18655                           tblptru	equ	0xFF8
 18656                           tblptrh	equ	0xFF7
 18657                           tblptrl	equ	0xFF6
 18658                           tablat	equ	0xFF5
 18659                           prodh	equ	0xFF4
 18660                           prodl	equ	0xFF3
 18661                           intcon	equ	0xFF2
 18662                           intcon2	equ	0xFF1
 18663                           intcon3	equ	0xFF0
 18664                           indf0	equ	0xFEF
 18665                           postinc0	equ	0xFEE
 18666                           fsr0h	equ	0xFEA
 18667                           fsr0l	equ	0xFE9
 18668                           wreg	equ	0xFE8
 18669                           postdec1	equ	0xFE5
 18670                           fsr1h	equ	0xFE2
 18671                           fsr1l	equ	0xFE1
 18672                           indf2	equ	0xFDF
 18673                           postinc2	equ	0xFDE
 18674                           postdec2	equ	0xFDD
 18675                           fsr2h	equ	0xFDA
 18676                           fsr2l	equ	0xFD9
 18677                           status	equ	0xFD8
 18678                           
 18679 ;; *************** function _change_state_to_menu_11 *****************
 18680 ;; Defined at:
 18681 ;;		line 482 in file "UI.c"
 18682 ;; Parameters:    Size  Location     Type
 18683 ;;		None
 18684 ;; Auto vars:     Size  Location     Type
 18685 ;;		None
 18686 ;; Return value:  Size  Location     Type
 18687 ;;                  1    wreg      void 
 18688 ;; Registers used:
 18689 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18690 ;; Tracked objects:
 18691 ;;		On entry : 0/0
 18692 ;;		On exit  : 0/0
 18693 ;;		Unchanged: 0/0
 18694 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18695 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18696 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18697 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18698 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18699 ;;Total ram usage:        0 bytes
 18700 ;; Hardware stack levels used:    1
 18701 ;; Hardware stack levels required when called:    3
 18702 ;; This function calls:
 18703 ;;		i2_lcdInst
 18704 ;;		i2_printf
 18705 ;; This function is called by:
 18706 ;;		_updateMenu
 18707 ;;		_inputHandler
 18708 ;; This function uses a non-reentrant model
 18709 ;;
 18710                           
 18711                           	psect	text68
 18712  004768                     __ptext68:
 18713                           	opt stack 0
 18714  004768                     _change_state_to_menu_11:
 18715                           	opt stack 18
 18716                           
 18717                           ;UI.c: 483: cur_state = 11;
 18718                           
 18719                           ;incstack = 0
 18720  004768  0E00               	movlw	0
 18721  00476A  0100               	movlb	0	; () banked
 18722  00476C  6FE7               	movwf	(_cur_state+1)& (0+255),b
 18723  00476E  0E0B               	movlw	11
 18724  004770  6FE6               	movwf	_cur_state& (0+255),b
 18725                           
 18726                           ; BSR set to: 0
 18727                           ;UI.c: 485: lcdInst(0b10000000);;
 18728  004772  0E80               	movlw	128
 18729  004774  ECA6  F025         	call	i2_lcdInst
 18730                           
 18731                           ;UI.c: 486: printf("1. DATE/TIME   <");
 18732  004778  0ED5               	movlw	low STR_31
 18733  00477A  6E0D               	movwf	i2printf@f,c
 18734  00477C  0EFD               	movlw	high STR_31
 18735  00477E  6E0E               	movwf	i2printf@f+1,c
 18736  004780  EC96  F00C         	call	i2_printf	;wreg free
 18737                           
 18738                           ;UI.c: 487: lcdInst(0b11000000);;
 18739  004784  0EC0               	movlw	192
 18740  004786  ECA6  F025         	call	i2_lcdInst
 18741                           
 18742                           ;UI.c: 488: printf("2. SORT         ");
 18743  00478A  0E1A               	movlw	low STR_32
 18744  00478C  6E0D               	movwf	i2printf@f,c
 18745  00478E  0EFD               	movlw	high STR_32
 18746  004790  6E0E               	movwf	i2printf@f+1,c
 18747  004792  EC96  F00C         	call	i2_printf	;wreg free
 18748  004796  0012               	return		;funcret
 18749  004798                     __end_of_change_state_to_menu_11:
 18750                           	opt stack 0
 18751                           pclatu	equ	0xFFB
 18752                           pclath	equ	0xFFA
 18753                           tblptru	equ	0xFF8
 18754                           tblptrh	equ	0xFF7
 18755                           tblptrl	equ	0xFF6
 18756                           tablat	equ	0xFF5
 18757                           prodh	equ	0xFF4
 18758                           prodl	equ	0xFF3
 18759                           intcon	equ	0xFF2
 18760                           intcon2	equ	0xFF1
 18761                           intcon3	equ	0xFF0
 18762                           indf0	equ	0xFEF
 18763                           postinc0	equ	0xFEE
 18764                           fsr0h	equ	0xFEA
 18765                           fsr0l	equ	0xFE9
 18766                           wreg	equ	0xFE8
 18767                           postdec1	equ	0xFE5
 18768                           fsr1h	equ	0xFE2
 18769                           fsr1l	equ	0xFE1
 18770                           indf2	equ	0xFDF
 18771                           postinc2	equ	0xFDE
 18772                           postdec2	equ	0xFDD
 18773                           fsr2h	equ	0xFDA
 18774                           fsr2l	equ	0xFD9
 18775                           status	equ	0xFD8
 18776                           
 18777 ;; *************** function _change_state_to_logs_34 *****************
 18778 ;; Defined at:
 18779 ;;		line 549 in file "UI.c"
 18780 ;; Parameters:    Size  Location     Type
 18781 ;;		None
 18782 ;; Auto vars:     Size  Location     Type
 18783 ;;		None
 18784 ;; Return value:  Size  Location     Type
 18785 ;;                  1    wreg      void 
 18786 ;; Registers used:
 18787 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18788 ;; Tracked objects:
 18789 ;;		On entry : 0/0
 18790 ;;		On exit  : 0/0
 18791 ;;		Unchanged: 0/0
 18792 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18793 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18794 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18795 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18796 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18797 ;;Total ram usage:        0 bytes
 18798 ;; Hardware stack levels used:    1
 18799 ;; Hardware stack levels required when called:    3
 18800 ;; This function calls:
 18801 ;;		i2_lcdInst
 18802 ;;		i2_printf
 18803 ;; This function is called by:
 18804 ;;		_updateMenu
 18805 ;;		_inputHandler
 18806 ;; This function uses a non-reentrant model
 18807 ;;
 18808                           
 18809                           	psect	text69
 18810  004798                     __ptext69:
 18811                           	opt stack 0
 18812  004798                     _change_state_to_logs_34:
 18813                           	opt stack 18
 18814                           
 18815                           ;UI.c: 550: cur_state = 1034;
 18816                           
 18817                           ;incstack = 0
 18818  004798  0E04               	movlw	4
 18819  00479A  0100               	movlb	0	; () banked
 18820  00479C  6FE7               	movwf	(_cur_state+1)& (0+255),b
 18821  00479E  0E0A               	movlw	10
 18822  0047A0  6FE6               	movwf	_cur_state& (0+255),b
 18823                           
 18824                           ; BSR set to: 0
 18825                           ;UI.c: 551: lcdInst(0b10000000);;
 18826  0047A2  0E80               	movlw	128
 18827  0047A4  ECA6  F025         	call	i2_lcdInst
 18828                           
 18829                           ;UI.c: 552: printf("LOG 3           ");
 18830  0047A8  0EE7               	movlw	low STR_44
 18831  0047AA  6E0D               	movwf	i2printf@f,c
 18832  0047AC  0EFC               	movlw	high STR_44
 18833  0047AE  6E0E               	movwf	i2printf@f+1,c
 18834  0047B0  EC96  F00C         	call	i2_printf	;wreg free
 18835                           
 18836                           ;UI.c: 553: lcdInst(0b11000000);;
 18837  0047B4  0EC0               	movlw	192
 18838  0047B6  ECA6  F025         	call	i2_lcdInst
 18839                           
 18840                           ;UI.c: 554: printf("LOG 4          <");
 18841  0047BA  0EA2               	movlw	low STR_50
 18842  0047BC  6E0D               	movwf	i2printf@f,c
 18843  0047BE  0EFD               	movlw	high STR_50
 18844  0047C0  6E0E               	movwf	i2printf@f+1,c
 18845  0047C2  EC96  F00C         	call	i2_printf	;wreg free
 18846  0047C6  0012               	return		;funcret
 18847  0047C8                     __end_of_change_state_to_logs_34:
 18848                           	opt stack 0
 18849                           pclatu	equ	0xFFB
 18850                           pclath	equ	0xFFA
 18851                           tblptru	equ	0xFF8
 18852                           tblptrh	equ	0xFF7
 18853                           tblptrl	equ	0xFF6
 18854                           tablat	equ	0xFF5
 18855                           prodh	equ	0xFF4
 18856                           prodl	equ	0xFF3
 18857                           intcon	equ	0xFF2
 18858                           intcon2	equ	0xFF1
 18859                           intcon3	equ	0xFF0
 18860                           indf0	equ	0xFEF
 18861                           postinc0	equ	0xFEE
 18862                           fsr0h	equ	0xFEA
 18863                           fsr0l	equ	0xFE9
 18864                           wreg	equ	0xFE8
 18865                           postdec1	equ	0xFE5
 18866                           fsr1h	equ	0xFE2
 18867                           fsr1l	equ	0xFE1
 18868                           indf2	equ	0xFDF
 18869                           postinc2	equ	0xFDE
 18870                           postdec2	equ	0xFDD
 18871                           fsr2h	equ	0xFDA
 18872                           fsr2l	equ	0xFD9
 18873                           status	equ	0xFD8
 18874                           
 18875 ;; *************** function _change_state_to_logs_33 *****************
 18876 ;; Defined at:
 18877 ;;		line 542 in file "UI.c"
 18878 ;; Parameters:    Size  Location     Type
 18879 ;;		None
 18880 ;; Auto vars:     Size  Location     Type
 18881 ;;		None
 18882 ;; Return value:  Size  Location     Type
 18883 ;;                  1    wreg      void 
 18884 ;; Registers used:
 18885 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18886 ;; Tracked objects:
 18887 ;;		On entry : 0/0
 18888 ;;		On exit  : 0/0
 18889 ;;		Unchanged: 0/0
 18890 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18891 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18892 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18893 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18894 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18895 ;;Total ram usage:        0 bytes
 18896 ;; Hardware stack levels used:    1
 18897 ;; Hardware stack levels required when called:    3
 18898 ;; This function calls:
 18899 ;;		i2_lcdInst
 18900 ;;		i2_printf
 18901 ;; This function is called by:
 18902 ;;		_updateMenu
 18903 ;;		_inputHandler
 18904 ;; This function uses a non-reentrant model
 18905 ;;
 18906                           
 18907                           	psect	text70
 18908  0047C8                     __ptext70:
 18909                           	opt stack 0
 18910  0047C8                     _change_state_to_logs_33:
 18911                           	opt stack 18
 18912                           
 18913                           ;UI.c: 543: cur_state = 1033;
 18914                           
 18915                           ;incstack = 0
 18916  0047C8  0E04               	movlw	4
 18917  0047CA  0100               	movlb	0	; () banked
 18918  0047CC  6FE7               	movwf	(_cur_state+1)& (0+255),b
 18919  0047CE  0E09               	movlw	9
 18920  0047D0  6FE6               	movwf	_cur_state& (0+255),b
 18921                           
 18922                           ; BSR set to: 0
 18923                           ;UI.c: 544: lcdInst(0b10000000);;
 18924  0047D2  0E80               	movlw	128
 18925  0047D4  ECA6  F025         	call	i2_lcdInst
 18926                           
 18927                           ;UI.c: 545: printf("LOG 3          <");
 18928  0047D8  0E91               	movlw	low STR_46
 18929  0047DA  6E0D               	movwf	i2printf@f,c
 18930  0047DC  0EFD               	movlw	high STR_46
 18931  0047DE  6E0E               	movwf	i2printf@f+1,c
 18932  0047E0  EC96  F00C         	call	i2_printf	;wreg free
 18933                           
 18934                           ;UI.c: 546: lcdInst(0b11000000);;
 18935  0047E4  0EC0               	movlw	192
 18936  0047E6  ECA6  F025         	call	i2_lcdInst
 18937                           
 18938                           ;UI.c: 547: printf("LOG 4           ");
 18939  0047EA  0EF8               	movlw	low STR_48
 18940  0047EC  6E0D               	movwf	i2printf@f,c
 18941  0047EE  0EFC               	movlw	high STR_48
 18942  0047F0  6E0E               	movwf	i2printf@f+1,c
 18943  0047F2  EC96  F00C         	call	i2_printf	;wreg free
 18944  0047F6  0012               	return		;funcret
 18945  0047F8                     __end_of_change_state_to_logs_33:
 18946                           	opt stack 0
 18947                           pclatu	equ	0xFFB
 18948                           pclath	equ	0xFFA
 18949                           tblptru	equ	0xFF8
 18950                           tblptrh	equ	0xFF7
 18951                           tblptrl	equ	0xFF6
 18952                           tablat	equ	0xFF5
 18953                           prodh	equ	0xFF4
 18954                           prodl	equ	0xFF3
 18955                           intcon	equ	0xFF2
 18956                           intcon2	equ	0xFF1
 18957                           intcon3	equ	0xFF0
 18958                           indf0	equ	0xFEF
 18959                           postinc0	equ	0xFEE
 18960                           fsr0h	equ	0xFEA
 18961                           fsr0l	equ	0xFE9
 18962                           wreg	equ	0xFE8
 18963                           postdec1	equ	0xFE5
 18964                           fsr1h	equ	0xFE2
 18965                           fsr1l	equ	0xFE1
 18966                           indf2	equ	0xFDF
 18967                           postinc2	equ	0xFDE
 18968                           postdec2	equ	0xFDD
 18969                           fsr2h	equ	0xFDA
 18970                           fsr2l	equ	0xFD9
 18971                           status	equ	0xFD8
 18972                           
 18973 ;; *************** function _change_state_to_logs_23 *****************
 18974 ;; Defined at:
 18975 ;;		line 535 in file "UI.c"
 18976 ;; Parameters:    Size  Location     Type
 18977 ;;		None
 18978 ;; Auto vars:     Size  Location     Type
 18979 ;;		None
 18980 ;; Return value:  Size  Location     Type
 18981 ;;                  1    wreg      void 
 18982 ;; Registers used:
 18983 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18984 ;; Tracked objects:
 18985 ;;		On entry : 0/0
 18986 ;;		On exit  : 0/0
 18987 ;;		Unchanged: 0/0
 18988 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18989 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18990 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18991 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18992 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18993 ;;Total ram usage:        0 bytes
 18994 ;; Hardware stack levels used:    1
 18995 ;; Hardware stack levels required when called:    3
 18996 ;; This function calls:
 18997 ;;		i2_lcdInst
 18998 ;;		i2_printf
 18999 ;; This function is called by:
 19000 ;;		_updateMenu
 19001 ;;		_inputHandler
 19002 ;; This function uses a non-reentrant model
 19003 ;;
 19004                           
 19005                           	psect	text71
 19006  0048E4                     __ptext71:
 19007                           	opt stack 0
 19008  0048E4                     _change_state_to_logs_23:
 19009                           	opt stack 18
 19010                           
 19011                           ;UI.c: 536: cur_state = 1023;
 19012                           
 19013                           ;incstack = 0
 19014  0048E4  0E03               	movlw	3
 19015  0048E6  0100               	movlb	0	; () banked
 19016  0048E8  6FE7               	movwf	(_cur_state+1)& (0+255),b
 19017  0048EA  69E6               	setf	_cur_state& (0+255),b
 19018                           
 19019                           ; BSR set to: 0
 19020                           ;UI.c: 537: lcdInst(0b10000000);;
 19021  0048EC  0E80               	movlw	128
 19022  0048EE  ECA6  F025         	call	i2_lcdInst
 19023                           
 19024                           ;UI.c: 538: printf("LOG 2           ");
 19025  0048F2  0ED6               	movlw	low STR_40
 19026  0048F4  6E0D               	movwf	i2printf@f,c
 19027  0048F6  0EFC               	movlw	high STR_40
 19028  0048F8  6E0E               	movwf	i2printf@f+1,c
 19029  0048FA  EC96  F00C         	call	i2_printf	;wreg free
 19030                           
 19031                           ;UI.c: 539: lcdInst(0b11000000);;
 19032  0048FE  0EC0               	movlw	192
 19033  004900  ECA6  F025         	call	i2_lcdInst
 19034                           
 19035                           ;UI.c: 540: printf("LOG 3          <");
 19036  004904  0E91               	movlw	low STR_46
 19037  004906  6E0D               	movwf	i2printf@f,c
 19038  004908  0EFD               	movlw	high STR_46
 19039  00490A  6E0E               	movwf	i2printf@f+1,c
 19040  00490C  EC96  F00C         	call	i2_printf	;wreg free
 19041  004910  0012               	return		;funcret
 19042  004912                     __end_of_change_state_to_logs_23:
 19043                           	opt stack 0
 19044                           pclatu	equ	0xFFB
 19045                           pclath	equ	0xFFA
 19046                           tblptru	equ	0xFF8
 19047                           tblptrh	equ	0xFF7
 19048                           tblptrl	equ	0xFF6
 19049                           tablat	equ	0xFF5
 19050                           prodh	equ	0xFF4
 19051                           prodl	equ	0xFF3
 19052                           intcon	equ	0xFF2
 19053                           intcon2	equ	0xFF1
 19054                           intcon3	equ	0xFF0
 19055                           indf0	equ	0xFEF
 19056                           postinc0	equ	0xFEE
 19057                           fsr0h	equ	0xFEA
 19058                           fsr0l	equ	0xFE9
 19059                           wreg	equ	0xFE8
 19060                           postdec1	equ	0xFE5
 19061                           fsr1h	equ	0xFE2
 19062                           fsr1l	equ	0xFE1
 19063                           indf2	equ	0xFDF
 19064                           postinc2	equ	0xFDE
 19065                           postdec2	equ	0xFDD
 19066                           fsr2h	equ	0xFDA
 19067                           fsr2l	equ	0xFD9
 19068                           status	equ	0xFD8
 19069                           
 19070 ;; *************** function _change_state_to_logs_22 *****************
 19071 ;; Defined at:
 19072 ;;		line 528 in file "UI.c"
 19073 ;; Parameters:    Size  Location     Type
 19074 ;;		None
 19075 ;; Auto vars:     Size  Location     Type
 19076 ;;		None
 19077 ;; Return value:  Size  Location     Type
 19078 ;;                  1    wreg      void 
 19079 ;; Registers used:
 19080 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19081 ;; Tracked objects:
 19082 ;;		On entry : 0/0
 19083 ;;		On exit  : 0/0
 19084 ;;		Unchanged: 0/0
 19085 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19086 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19087 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19088 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19089 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19090 ;;Total ram usage:        0 bytes
 19091 ;; Hardware stack levels used:    1
 19092 ;; Hardware stack levels required when called:    3
 19093 ;; This function calls:
 19094 ;;		i2_lcdInst
 19095 ;;		i2_printf
 19096 ;; This function is called by:
 19097 ;;		_updateMenu
 19098 ;;		_inputHandler
 19099 ;; This function uses a non-reentrant model
 19100 ;;
 19101                           
 19102                           	psect	text72
 19103  0047F8                     __ptext72:
 19104                           	opt stack 0
 19105  0047F8                     _change_state_to_logs_22:
 19106                           	opt stack 18
 19107                           
 19108                           ;UI.c: 529: cur_state = 1022;
 19109                           
 19110                           ;incstack = 0
 19111  0047F8  0E03               	movlw	3
 19112  0047FA  0100               	movlb	0	; () banked
 19113  0047FC  6FE7               	movwf	(_cur_state+1)& (0+255),b
 19114  0047FE  0EFE               	movlw	254
 19115  004800  6FE6               	movwf	_cur_state& (0+255),b
 19116                           
 19117                           ; BSR set to: 0
 19118                           ;UI.c: 530: lcdInst(0b10000000);;
 19119  004802  0E80               	movlw	128
 19120  004804  ECA6  F025         	call	i2_lcdInst
 19121                           
 19122                           ;UI.c: 531: printf("LOG 2          <");
 19123  004808  0E80               	movlw	low STR_42
 19124  00480A  6E0D               	movwf	i2printf@f,c
 19125  00480C  0EFD               	movlw	high STR_42
 19126  00480E  6E0E               	movwf	i2printf@f+1,c
 19127  004810  EC96  F00C         	call	i2_printf	;wreg free
 19128                           
 19129                           ;UI.c: 532: lcdInst(0b11000000);;
 19130  004814  0EC0               	movlw	192
 19131  004816  ECA6  F025         	call	i2_lcdInst
 19132                           
 19133                           ;UI.c: 533: printf("LOG 3           ");
 19134  00481A  0EE7               	movlw	low STR_44
 19135  00481C  6E0D               	movwf	i2printf@f,c
 19136  00481E  0EFC               	movlw	high STR_44
 19137  004820  6E0E               	movwf	i2printf@f+1,c
 19138  004822  EC96  F00C         	call	i2_printf	;wreg free
 19139  004826  0012               	return		;funcret
 19140  004828                     __end_of_change_state_to_logs_22:
 19141                           	opt stack 0
 19142                           pclatu	equ	0xFFB
 19143                           pclath	equ	0xFFA
 19144                           tblptru	equ	0xFF8
 19145                           tblptrh	equ	0xFF7
 19146                           tblptrl	equ	0xFF6
 19147                           tablat	equ	0xFF5
 19148                           prodh	equ	0xFF4
 19149                           prodl	equ	0xFF3
 19150                           intcon	equ	0xFF2
 19151                           intcon2	equ	0xFF1
 19152                           intcon3	equ	0xFF0
 19153                           indf0	equ	0xFEF
 19154                           postinc0	equ	0xFEE
 19155                           fsr0h	equ	0xFEA
 19156                           fsr0l	equ	0xFE9
 19157                           wreg	equ	0xFE8
 19158                           postdec1	equ	0xFE5
 19159                           fsr1h	equ	0xFE2
 19160                           fsr1l	equ	0xFE1
 19161                           indf2	equ	0xFDF
 19162                           postinc2	equ	0xFDE
 19163                           postdec2	equ	0xFDD
 19164                           fsr2h	equ	0xFDA
 19165                           fsr2l	equ	0xFD9
 19166                           status	equ	0xFD8
 19167                           
 19168 ;; *************** function _change_state_to_logs_12 *****************
 19169 ;; Defined at:
 19170 ;;		line 521 in file "UI.c"
 19171 ;; Parameters:    Size  Location     Type
 19172 ;;		None
 19173 ;; Auto vars:     Size  Location     Type
 19174 ;;		None
 19175 ;; Return value:  Size  Location     Type
 19176 ;;                  1    wreg      void 
 19177 ;; Registers used:
 19178 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19179 ;; Tracked objects:
 19180 ;;		On entry : 0/0
 19181 ;;		On exit  : 0/0
 19182 ;;		Unchanged: 0/0
 19183 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19184 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19185 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19186 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19187 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19188 ;;Total ram usage:        0 bytes
 19189 ;; Hardware stack levels used:    1
 19190 ;; Hardware stack levels required when called:    3
 19191 ;; This function calls:
 19192 ;;		i2_lcdInst
 19193 ;;		i2_printf
 19194 ;; This function is called by:
 19195 ;;		_updateMenu
 19196 ;;		_inputHandler
 19197 ;; This function uses a non-reentrant model
 19198 ;;
 19199                           
 19200                           	psect	text73
 19201  004828                     __ptext73:
 19202                           	opt stack 0
 19203  004828                     _change_state_to_logs_12:
 19204                           	opt stack 18
 19205                           
 19206                           ;UI.c: 522: cur_state = 1012;
 19207                           
 19208                           ;incstack = 0
 19209  004828  0E03               	movlw	3
 19210  00482A  0100               	movlb	0	; () banked
 19211  00482C  6FE7               	movwf	(_cur_state+1)& (0+255),b
 19212  00482E  0EF4               	movlw	244
 19213  004830  6FE6               	movwf	_cur_state& (0+255),b
 19214                           
 19215                           ; BSR set to: 0
 19216                           ;UI.c: 523: lcdInst(0b10000000);;
 19217  004832  0E80               	movlw	128
 19218  004834  ECA6  F025         	call	i2_lcdInst
 19219                           
 19220                           ;UI.c: 524: printf("LOG 1           ");
 19221  004838  0EC5               	movlw	low STR_41
 19222  00483A  6E0D               	movwf	i2printf@f,c
 19223  00483C  0EFC               	movlw	high STR_41
 19224  00483E  6E0E               	movwf	i2printf@f+1,c
 19225  004840  EC96  F00C         	call	i2_printf	;wreg free
 19226                           
 19227                           ;UI.c: 525: lcdInst(0b11000000);;
 19228  004844  0EC0               	movlw	192
 19229  004846  ECA6  F025         	call	i2_lcdInst
 19230                           
 19231                           ;UI.c: 526: printf("LOG 2          <");
 19232  00484A  0E80               	movlw	low STR_42
 19233  00484C  6E0D               	movwf	i2printf@f,c
 19234  00484E  0EFD               	movlw	high STR_42
 19235  004850  6E0E               	movwf	i2printf@f+1,c
 19236  004852  EC96  F00C         	call	i2_printf	;wreg free
 19237  004856  0012               	return		;funcret
 19238  004858                     __end_of_change_state_to_logs_12:
 19239                           	opt stack 0
 19240                           pclatu	equ	0xFFB
 19241                           pclath	equ	0xFFA
 19242                           tblptru	equ	0xFF8
 19243                           tblptrh	equ	0xFF7
 19244                           tblptrl	equ	0xFF6
 19245                           tablat	equ	0xFF5
 19246                           prodh	equ	0xFF4
 19247                           prodl	equ	0xFF3
 19248                           intcon	equ	0xFF2
 19249                           intcon2	equ	0xFF1
 19250                           intcon3	equ	0xFF0
 19251                           indf0	equ	0xFEF
 19252                           postinc0	equ	0xFEE
 19253                           fsr0h	equ	0xFEA
 19254                           fsr0l	equ	0xFE9
 19255                           wreg	equ	0xFE8
 19256                           postdec1	equ	0xFE5
 19257                           fsr1h	equ	0xFE2
 19258                           fsr1l	equ	0xFE1
 19259                           indf2	equ	0xFDF
 19260                           postinc2	equ	0xFDE
 19261                           postdec2	equ	0xFDD
 19262                           fsr2h	equ	0xFDA
 19263                           fsr2l	equ	0xFD9
 19264                           status	equ	0xFD8
 19265                           
 19266 ;; *************** function _change_state_to_logs_11 *****************
 19267 ;; Defined at:
 19268 ;;		line 514 in file "UI.c"
 19269 ;; Parameters:    Size  Location     Type
 19270 ;;		None
 19271 ;; Auto vars:     Size  Location     Type
 19272 ;;		None
 19273 ;; Return value:  Size  Location     Type
 19274 ;;                  1    wreg      void 
 19275 ;; Registers used:
 19276 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19277 ;; Tracked objects:
 19278 ;;		On entry : 0/0
 19279 ;;		On exit  : 0/0
 19280 ;;		Unchanged: 0/0
 19281 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19282 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19283 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19284 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19285 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19286 ;;Total ram usage:        0 bytes
 19287 ;; Hardware stack levels used:    1
 19288 ;; Hardware stack levels required when called:    3
 19289 ;; This function calls:
 19290 ;;		i2_lcdInst
 19291 ;;		i2_printf
 19292 ;; This function is called by:
 19293 ;;		_updateMenu
 19294 ;;		_inputHandler
 19295 ;; This function uses a non-reentrant model
 19296 ;;
 19297                           
 19298                           	psect	text74
 19299  004858                     __ptext74:
 19300                           	opt stack 0
 19301  004858                     _change_state_to_logs_11:
 19302                           	opt stack 18
 19303                           
 19304                           ;UI.c: 515: cur_state = 1011;
 19305                           
 19306                           ;incstack = 0
 19307  004858  0E03               	movlw	3
 19308  00485A  0100               	movlb	0	; () banked
 19309  00485C  6FE7               	movwf	(_cur_state+1)& (0+255),b
 19310  00485E  0EF3               	movlw	243
 19311  004860  6FE6               	movwf	_cur_state& (0+255),b
 19312                           
 19313                           ; BSR set to: 0
 19314                           ;UI.c: 516: lcdInst(0b10000000);;
 19315  004862  0E80               	movlw	128
 19316  004864  ECA6  F025         	call	i2_lcdInst
 19317                           
 19318                           ;UI.c: 517: printf("LOG 1          <");
 19319  004868  0E6F               	movlw	low STR_39
 19320  00486A  6E0D               	movwf	i2printf@f,c
 19321  00486C  0EFD               	movlw	high STR_39
 19322  00486E  6E0E               	movwf	i2printf@f+1,c
 19323  004870  EC96  F00C         	call	i2_printf	;wreg free
 19324                           
 19325                           ;UI.c: 518: lcdInst(0b11000000);;
 19326  004874  0EC0               	movlw	192
 19327  004876  ECA6  F025         	call	i2_lcdInst
 19328                           
 19329                           ;UI.c: 519: printf("LOG 2           ");
 19330  00487A  0ED6               	movlw	low STR_40
 19331  00487C  6E0D               	movwf	i2printf@f,c
 19332  00487E  0EFC               	movlw	high STR_40
 19333  004880  6E0E               	movwf	i2printf@f+1,c
 19334  004882  EC96  F00C         	call	i2_printf	;wreg free
 19335  004886  0012               	return		;funcret
 19336  004888                     __end_of_change_state_to_logs_11:
 19337                           	opt stack 0
 19338                           pclatu	equ	0xFFB
 19339                           pclath	equ	0xFFA
 19340                           tblptru	equ	0xFF8
 19341                           tblptrh	equ	0xFF7
 19342                           tblptrl	equ	0xFF6
 19343                           tablat	equ	0xFF5
 19344                           prodh	equ	0xFF4
 19345                           prodl	equ	0xFF3
 19346                           intcon	equ	0xFF2
 19347                           intcon2	equ	0xFF1
 19348                           intcon3	equ	0xFF0
 19349                           indf0	equ	0xFEF
 19350                           postinc0	equ	0xFEE
 19351                           fsr0h	equ	0xFEA
 19352                           fsr0l	equ	0xFE9
 19353                           wreg	equ	0xFE8
 19354                           postdec1	equ	0xFE5
 19355                           fsr1h	equ	0xFE2
 19356                           fsr1l	equ	0xFE1
 19357                           indf2	equ	0xFDF
 19358                           postinc2	equ	0xFDE
 19359                           postdec2	equ	0xFDD
 19360                           fsr2h	equ	0xFDA
 19361                           fsr2l	equ	0xFD9
 19362                           status	equ	0xFD8
 19363                           
 19364 ;; *************** function _dispLogs *****************
 19365 ;; Defined at:
 19366 ;;		line 467 in file "UI.c"
 19367 ;; Parameters:    Size  Location     Type
 19368 ;;  myLog           2   17[COMRAM] int 
 19369 ;; Auto vars:     Size  Location     Type
 19370 ;;		None
 19371 ;; Return value:  Size  Location     Type
 19372 ;;                  1    wreg      void 
 19373 ;; Registers used:
 19374 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 19375 ;; Tracked objects:
 19376 ;;		On entry : 0/0
 19377 ;;		On exit  : 0/0
 19378 ;;		Unchanged: 0/0
 19379 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19380 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19381 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19382 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19383 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19384 ;;Total ram usage:        2 bytes
 19385 ;; Hardware stack levels used:    1
 19386 ;; Hardware stack levels required when called:    2
 19387 ;; This function calls:
 19388 ;;		_retrieveLog
 19389 ;; This function is called by:
 19390 ;;		_updateMenu
 19391 ;; This function uses a non-reentrant model
 19392 ;;
 19393                           
 19394                           	psect	text75
 19395  004A30                     __ptext75:
 19396                           	opt stack 0
 19397  004A30                     _dispLogs:
 19398                           	opt stack 20
 19399                           
 19400                           ;UI.c: 468: logstate = 1;
 19401                           
 19402                           ;incstack = 0
 19403  004A30  0E00               	movlw	0
 19404  004A32  0100               	movlb	0	; () banked
 19405  004A34  6FF7               	movwf	(_logstate+1)& (0+255),b
 19406  004A36  0E01               	movlw	1
 19407  004A38  6FF6               	movwf	_logstate& (0+255),b
 19408                           
 19409                           ; BSR set to: 0
 19410                           ;UI.c: 469: log = myLog;
 19411  004A3A  C012  F0EC         	movff	dispLogs@myLog,_log
 19412  004A3E  C013  F0ED         	movff	dispLogs@myLog+1,_log+1
 19413                           
 19414                           ; BSR set to: 0
 19415                           ;UI.c: 470: retrieveLog(myLog - 1);
 19416  004A42  0EFF               	movlw	255
 19417  004A44  2412               	addwf	dispLogs@myLog,w,c
 19418  004A46  6E07               	movwf	retrieveLog@logNum,c
 19419  004A48  0EFF               	movlw	255
 19420  004A4A  2013               	addwfc	dispLogs@myLog+1,w,c
 19421  004A4C  6E08               	movwf	retrieveLog@logNum+1,c
 19422  004A4E  ECF3  F019         	call	_retrieveLog	;wreg free
 19423  004A52  0012               	return		;funcret
 19424  004A54                     __end_of_dispLogs:
 19425                           	opt stack 0
 19426                           pclatu	equ	0xFFB
 19427                           pclath	equ	0xFFA
 19428                           tblptru	equ	0xFF8
 19429                           tblptrh	equ	0xFF7
 19430                           tblptrl	equ	0xFF6
 19431                           tablat	equ	0xFF5
 19432                           prodh	equ	0xFF4
 19433                           prodl	equ	0xFF3
 19434                           intcon	equ	0xFF2
 19435                           intcon2	equ	0xFF1
 19436                           intcon3	equ	0xFF0
 19437                           indf0	equ	0xFEF
 19438                           postinc0	equ	0xFEE
 19439                           fsr0h	equ	0xFEA
 19440                           fsr0l	equ	0xFE9
 19441                           wreg	equ	0xFE8
 19442                           postdec1	equ	0xFE5
 19443                           fsr1h	equ	0xFE2
 19444                           fsr1l	equ	0xFE1
 19445                           indf2	equ	0xFDF
 19446                           postinc2	equ	0xFDE
 19447                           postdec2	equ	0xFDD
 19448                           fsr2h	equ	0xFDA
 19449                           fsr2l	equ	0xFD9
 19450                           status	equ	0xFD8
 19451                           
 19452 ;; *************** function _retrieveLog *****************
 19453 ;; Defined at:
 19454 ;;		line 134 in file "EEPROM.c"
 19455 ;; Parameters:    Size  Location     Type
 19456 ;;  logNum          2    6[COMRAM] int 
 19457 ;; Auto vars:     Size  Location     Type
 19458 ;;  i               2   13[COMRAM] int 
 19459 ;;  addr            2   15[COMRAM] unsigned short 
 19460 ;;  byte3           1   12[COMRAM] unsigned char 
 19461 ;;  byte2           1   11[COMRAM] unsigned char 
 19462 ;;  byte1           1   10[COMRAM] unsigned char 
 19463 ;; Return value:  Size  Location     Type
 19464 ;;                  1    wreg      void 
 19465 ;; Registers used:
 19466 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 19467 ;; Tracked objects:
 19468 ;;		On entry : 0/0
 19469 ;;		On exit  : 0/0
 19470 ;;		Unchanged: 0/0
 19471 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19472 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19473 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19474 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19475 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19476 ;;Total ram usage:       11 bytes
 19477 ;; Hardware stack levels used:    1
 19478 ;; Hardware stack levels required when called:    1
 19479 ;; This function calls:
 19480 ;;		i2_EEPROM_read
 19481 ;;		i2___wmul
 19482 ;; This function is called by:
 19483 ;;		_dispLogs
 19484 ;; This function uses a non-reentrant model
 19485 ;;
 19486                           
 19487                           	psect	text76
 19488  0033E6                     __ptext76:
 19489                           	opt stack 0
 19490  0033E6                     _retrieveLog:
 19491                           	opt stack 20
 19492                           
 19493                           ;EEPROM.c: 140: unsigned short addr = 1 + logNum * 11;
 19494                           
 19495                           ;incstack = 0
 19496  0033E6  C007  F001         	movff	retrieveLog@logNum,i2___wmul@multiplier
 19497  0033EA  C008  F002         	movff	retrieveLog@logNum+1,i2___wmul@multiplier+1
 19498  0033EE  0E00               	movlw	0
 19499  0033F0  6E04               	movwf	i2___wmul@multiplicand+1,c
 19500  0033F2  0E0B               	movlw	11
 19501  0033F4  6E03               	movwf	i2___wmul@multiplicand,c
 19502  0033F6  ECF2  F024         	call	i2___wmul	;wreg free
 19503  0033FA  0E01               	movlw	1
 19504  0033FC  2401               	addwf	?i2___wmul,w,c
 19505  0033FE  6E10               	movwf	retrieveLog@addr,c
 19506  003400  0E00               	movlw	0
 19507  003402  2002               	addwfc	?i2___wmul+1,w,c
 19508  003404  6E11               	movwf	retrieveLog@addr+1,c
 19509                           
 19510                           ;EEPROM.c: 143: unsigned char byte1 = EEPROM_read(addr);
 19511  003406  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 19512  00340A  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 19513  00340E  EC72  F025         	call	i2_EEPROM_read	;wreg free
 19514  003412  6E0B               	movwf	retrieveLog@byte1,c
 19515                           
 19516                           ;EEPROM.c: 144: log_completion = (int)(byte1 & 0b10000000);
 19517  003414  C00B  F009         	movff	retrieveLog@byte1,??_retrieveLog
 19518  003418  0E80               	movlw	128
 19519  00341A  1609               	andwf	??_retrieveLog,f,c
 19520  00341C  5009               	movf	??_retrieveLog,w,c
 19521  00341E  0100               	movlb	0	; () banked
 19522  003420  6FEE               	movwf	_log_completion& (0+255),b
 19523  003422  6BEF               	clrf	(_log_completion+1)& (0+255),b
 19524                           
 19525                           ; BSR set to: 0
 19526                           ;EEPROM.c: 145: log_count_total = (int)(byte1 & 0b00001111);
 19527  003424  C00B  F009         	movff	retrieveLog@byte1,??_retrieveLog
 19528  003428  0E0F               	movlw	15
 19529  00342A  1609               	andwf	??_retrieveLog,f,c
 19530  00342C  5009               	movf	??_retrieveLog,w,c
 19531  00342E  6E75               	movwf	_log_count_total,c
 19532  003430  6A76               	clrf	_log_count_total+1,c
 19533                           
 19534                           ; BSR set to: 0
 19535                           ;EEPROM.c: 146: addr++;
 19536  003432  4A10               	infsnz	retrieveLog@addr,f,c
 19537  003434  2A11               	incf	retrieveLog@addr+1,f,c
 19538                           
 19539                           ; BSR set to: 0
 19540                           ;EEPROM.c: 149: unsigned char byte2 = EEPROM_read(addr);
 19541  003436  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 19542  00343A  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 19543  00343E  EC72  F025         	call	i2_EEPROM_read	;wreg free
 19544  003442  6E0C               	movwf	retrieveLog@byte2,c
 19545                           
 19546                           ;EEPROM.c: 150: log_count_pop_no_tab = (int)((byte2 & 0b11110000)>> 4);
 19547  003444  C00C  F009         	movff	retrieveLog@byte2,??_retrieveLog
 19548  003448  3A09               	swapf	??_retrieveLog,f,c
 19549  00344A  0E0F               	movlw	15
 19550  00344C  1609               	andwf	??_retrieveLog,f,c
 19551  00344E  0E0F               	movlw	15
 19552  003450  1609               	andwf	??_retrieveLog,f,c
 19553  003452  5009               	movf	??_retrieveLog,w,c
 19554  003454  0100               	movlb	0	; () banked
 19555  003456  6FF0               	movwf	_log_count_pop_no_tab& (0+255),b
 19556  003458  6BF1               	clrf	(_log_count_pop_no_tab+1)& (0+255),b
 19557                           
 19558                           ; BSR set to: 0
 19559                           ;EEPROM.c: 151: log_count_pop_w_tab = (int)(byte2 & 0b00001111);
 19560  00345A  C00C  F009         	movff	retrieveLog@byte2,??_retrieveLog
 19561  00345E  0E0F               	movlw	15
 19562  003460  1609               	andwf	??_retrieveLog,f,c
 19563  003462  5009               	movf	??_retrieveLog,w,c
 19564  003464  0100               	movlb	0	; () banked
 19565  003466  6FF2               	movwf	_log_count_pop_w_tab& (0+255),b
 19566  003468  6BF3               	clrf	(_log_count_pop_w_tab+1)& (0+255),b
 19567                           
 19568                           ; BSR set to: 0
 19569                           ;EEPROM.c: 152: addr++;
 19570  00346A  4A10               	infsnz	retrieveLog@addr,f,c
 19571  00346C  2A11               	incf	retrieveLog@addr+1,f,c
 19572                           
 19573                           ; BSR set to: 0
 19574                           ;EEPROM.c: 153: unsigned char byte3 = EEPROM_read(addr);
 19575  00346E  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 19576  003472  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 19577  003476  EC72  F025         	call	i2_EEPROM_read	;wreg free
 19578  00347A  6E0D               	movwf	retrieveLog@byte3,c
 19579                           
 19580                           ;EEPROM.c: 154: log_count_can_w_lab = (int)((byte3 & 0b11110000)>> 4);
 19581  00347C  C00D  F009         	movff	retrieveLog@byte3,??_retrieveLog
 19582  003480  3A09               	swapf	??_retrieveLog,f,c
 19583  003482  0E0F               	movlw	15
 19584  003484  1609               	andwf	??_retrieveLog,f,c
 19585  003486  0E0F               	movlw	15
 19586  003488  1609               	andwf	??_retrieveLog,f,c
 19587  00348A  5009               	movf	??_retrieveLog,w,c
 19588  00348C  6E73               	movwf	_log_count_can_w_lab,c
 19589  00348E  6A74               	clrf	_log_count_can_w_lab+1,c
 19590                           
 19591                           ;EEPROM.c: 155: log_count_can_no_lab = (int)(byte3 & 0b00001111);
 19592  003490  C00D  F009         	movff	retrieveLog@byte3,??_retrieveLog
 19593  003494  0E0F               	movlw	15
 19594  003496  1609               	andwf	??_retrieveLog,f,c
 19595  003498  5009               	movf	??_retrieveLog,w,c
 19596  00349A  6E71               	movwf	_log_count_can_no_lab,c
 19597  00349C  6A72               	clrf	_log_count_can_no_lab+1,c
 19598                           
 19599                           ;EEPROM.c: 156: addr++;
 19600  00349E  4A10               	infsnz	retrieveLog@addr,f,c
 19601  0034A0  2A11               	incf	retrieveLog@addr+1,f,c
 19602                           
 19603                           ;EEPROM.c: 159: for(int i = 0; i < 7; i++){
 19604  0034A2  0E00               	movlw	0
 19605  0034A4  6E0F               	movwf	retrieveLog@i+1,c
 19606  0034A6  0E00               	movlw	0
 19607  0034A8  6E0E               	movwf	retrieveLog@i,c
 19608  0034AA                     i2l6210:
 19609  0034AA  BE0F               	btfsc	retrieveLog@i+1,7,c
 19610  0034AC  D006               	goto	i2l6214
 19611  0034AE  500F               	movf	retrieveLog@i+1,w,c
 19612  0034B0  E11E               	bnz	i2l6222
 19613  0034B2  0E07               	movlw	7
 19614  0034B4  5C0E               	subwf	retrieveLog@i,w,c
 19615  0034B6  B0D8               	btfsc	status,0,c
 19616  0034B8  D01A               	goto	i2l6222
 19617  0034BA                     i2l6214:
 19618                           
 19619                           ;EEPROM.c: 160: log_startTime[i] = (int)EEPROM_read(addr);
 19620  0034BA  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 19621  0034BE  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 19622  0034C2  EC72  F025         	call	i2_EEPROM_read	;wreg free
 19623  0034C6  6E09               	movwf	??_retrieveLog& (0+255),c
 19624  0034C8  6A0A               	clrf	(??_retrieveLog+1)& (0+255),c
 19625  0034CA  90D8               	bcf	status,0,c
 19626  0034CC  340E               	rlcf	retrieveLog@i,w,c
 19627  0034CE  6ED9               	movwf	fsr2l,c
 19628  0034D0  340F               	rlcf	retrieveLog@i+1,w,c
 19629  0034D2  6EDA               	movwf	fsr2h,c
 19630  0034D4  0E00               	movlw	low _log_startTime
 19631  0034D6  26D9               	addwf	fsr2l,f,c
 19632  0034D8  0E01               	movlw	high _log_startTime
 19633  0034DA  22DA               	addwfc	fsr2h,f,c
 19634  0034DC  C009  FFDE         	movff	??_retrieveLog,postinc2
 19635  0034E0  C00A  FFDD         	movff	??_retrieveLog+1,postdec2
 19636                           
 19637                           ;EEPROM.c: 161: addr++;
 19638  0034E4  4A10               	infsnz	retrieveLog@addr,f,c
 19639  0034E6  2A11               	incf	retrieveLog@addr+1,f,c
 19640  0034E8  4A0E               	infsnz	retrieveLog@i,f,c
 19641  0034EA  2A0F               	incf	retrieveLog@i+1,f,c
 19642  0034EC  D7DE               	goto	i2l6210
 19643  0034EE                     i2l6222:
 19644                           
 19645                           ;EEPROM.c: 162: }
 19646                           ;EEPROM.c: 165: log_total_time = (int)EEPROM_read(addr);
 19647  0034EE  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 19648  0034F2  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 19649  0034F6  EC72  F025         	call	i2_EEPROM_read	;wreg free
 19650  0034FA  6E09               	movwf	??_retrieveLog& (0+255),c
 19651  0034FC  5009               	movf	??_retrieveLog,w,c
 19652  0034FE  0100               	movlb	0	; () banked
 19653  003500  6FF4               	movwf	_log_total_time& (0+255),b
 19654  003502  6BF5               	clrf	(_log_total_time+1)& (0+255),b
 19655                           
 19656                           ; BSR set to: 0
 19657  003504  0012               	return		;funcret
 19658  003506                     __end_of_retrieveLog:
 19659                           	opt stack 0
 19660                           pclatu	equ	0xFFB
 19661                           pclath	equ	0xFFA
 19662                           tblptru	equ	0xFF8
 19663                           tblptrh	equ	0xFF7
 19664                           tblptrl	equ	0xFF6
 19665                           tablat	equ	0xFF5
 19666                           prodh	equ	0xFF4
 19667                           prodl	equ	0xFF3
 19668                           intcon	equ	0xFF2
 19669                           intcon2	equ	0xFF1
 19670                           intcon3	equ	0xFF0
 19671                           indf0	equ	0xFEF
 19672                           postinc0	equ	0xFEE
 19673                           fsr0h	equ	0xFEA
 19674                           fsr0l	equ	0xFE9
 19675                           wreg	equ	0xFE8
 19676                           postdec1	equ	0xFE5
 19677                           fsr1h	equ	0xFE2
 19678                           fsr1l	equ	0xFE1
 19679                           indf2	equ	0xFDF
 19680                           postinc2	equ	0xFDE
 19681                           postdec2	equ	0xFDD
 19682                           fsr2h	equ	0xFDA
 19683                           fsr2l	equ	0xFD9
 19684                           status	equ	0xFD8
 19685                           
 19686 ;; *************** function i2_EEPROM_read *****************
 19687 ;; Defined at:
 19688 ;;		line 68 in file "EEPROM.c"
 19689 ;; Parameters:    Size  Location     Type
 19690 ;;  address         2    0[COMRAM] unsigned short 
 19691 ;; Auto vars:     Size  Location     Type
 19692 ;;		None
 19693 ;; Return value:  Size  Location     Type
 19694 ;;                  1    wreg      unsigned char 
 19695 ;; Registers used:
 19696 ;;		wreg, status,2
 19697 ;; Tracked objects:
 19698 ;;		On entry : 0/0
 19699 ;;		On exit  : 0/0
 19700 ;;		Unchanged: 0/0
 19701 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19702 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19703 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19704 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19705 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19706 ;;Total ram usage:        2 bytes
 19707 ;; Hardware stack levels used:    1
 19708 ;; This function calls:
 19709 ;;		Nothing
 19710 ;; This function is called by:
 19711 ;;		_retrieveLog
 19712 ;; This function uses a non-reentrant model
 19713 ;;
 19714                           
 19715                           	psect	text77
 19716  004AE4                     __ptext77:
 19717                           	opt stack 0
 19718  004AE4                     i2_EEPROM_read:
 19719                           	opt stack 20
 19720                           
 19721                           ;EEPROM.c: 70: EEADRH = (unsigned char)(address >> 8);
 19722                           
 19723                           ; BSR set to: 0
 19724                           ;incstack = 0
 19725  004AE4  5002               	movf	i2EEPROM_read@address+1,w,c
 19726  004AE6  6EAA               	movwf	4010,c	;volatile
 19727                           
 19728                           ;EEPROM.c: 71: EEADR = (unsigned char)address;
 19729  004AE8  C001  FFA9         	movff	i2EEPROM_read@address,4009	;volatile
 19730                           
 19731                           ;EEPROM.c: 73: EECON1bits.EEPGD = 0;
 19732  004AEC  9EA6               	bcf	4006,7,c	;volatile
 19733                           
 19734                           ;EEPROM.c: 74: EECON1bits.CFGS = 0;
 19735  004AEE  9CA6               	bcf	4006,6,c	;volatile
 19736                           
 19737                           ;EEPROM.c: 75: EECON1bits.RD = 1;
 19738  004AF0  80A6               	bsf	4006,0,c	;volatile
 19739  004AF2                     i2l962:
 19740  004AF2  B0A6               	btfsc	4006,0,c	;volatile
 19741  004AF4  D7FE               	goto	i2l962
 19742                           
 19743                           ;EEPROM.c: 81: return EEDATA;
 19744  004AF6  50A8               	movf	4008,w,c	;volatile
 19745  004AF8  0012               	return	
 19746  004AFA                     __end_ofi2_EEPROM_read:
 19747                           	opt stack 0
 19748                           pclatu	equ	0xFFB
 19749                           pclath	equ	0xFFA
 19750                           tblptru	equ	0xFF8
 19751                           tblptrh	equ	0xFF7
 19752                           tblptrl	equ	0xFF6
 19753                           tablat	equ	0xFF5
 19754                           prodh	equ	0xFF4
 19755                           prodl	equ	0xFF3
 19756                           intcon	equ	0xFF2
 19757                           intcon2	equ	0xFF1
 19758                           intcon3	equ	0xFF0
 19759                           indf0	equ	0xFEF
 19760                           postinc0	equ	0xFEE
 19761                           fsr0h	equ	0xFEA
 19762                           fsr0l	equ	0xFE9
 19763                           wreg	equ	0xFE8
 19764                           postdec1	equ	0xFE5
 19765                           fsr1h	equ	0xFE2
 19766                           fsr1l	equ	0xFE1
 19767                           indf2	equ	0xFDF
 19768                           postinc2	equ	0xFDE
 19769                           postdec2	equ	0xFDD
 19770                           fsr2h	equ	0xFDA
 19771                           fsr2l	equ	0xFD9
 19772                           status	equ	0xFD8
 19773                           
 19774 ;; *************** function _printSortTimer *****************
 19775 ;; Defined at:
 19776 ;;		line 340 in file "sort.c"
 19777 ;; Parameters:    Size  Location     Type
 19778 ;;		None
 19779 ;; Auto vars:     Size  Location     Type
 19780 ;;  i               2   72[COMRAM] int 
 19781 ;;  curTime        14   46[COMRAM] int [7]
 19782 ;;  timeDiff        2   70[COMRAM] unsigned int 
 19783 ;;  sec             2   66[COMRAM] int 
 19784 ;;  min             2   64[COMRAM] int 
 19785 ;;  cur_sec         2   62[COMRAM] unsigned int 
 19786 ;;  start_sec       2   60[COMRAM] unsigned int 
 19787 ;;  hour            2   44[COMRAM] int 
 19788 ;; Return value:  Size  Location     Type
 19789 ;;                  1    wreg      void 
 19790 ;; Registers used:
 19791 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19792 ;; Tracked objects:
 19793 ;;		On entry : 0/0
 19794 ;;		On exit  : 0/0
 19795 ;;		Unchanged: 0/0
 19796 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19797 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19798 ;;      Locals:        30       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19799 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19800 ;;      Totals:        33       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19801 ;;Total ram usage:       33 bytes
 19802 ;; Hardware stack levels used:    1
 19803 ;; Hardware stack levels required when called:    3
 19804 ;; This function calls:
 19805 ;;		i2___lwdiv
 19806 ;;		i2___lwmod
 19807 ;;		i2___wmul
 19808 ;;		i2_getRTC
 19809 ;;		i2_lcdInst
 19810 ;;		i2_printf
 19811 ;; This function is called by:
 19812 ;;		_handler
 19813 ;; This function uses a non-reentrant model
 19814 ;;
 19815                           
 19816                           	psect	text78
 19817  002B9A                     __ptext78:
 19818                           	opt stack 0
 19819  002B9A                     _printSortTimer:
 19820                           	opt stack 20
 19821                           
 19822                           ;sort.c: 341: getRTC();
 19823                           
 19824                           ;incstack = 0
 19825  002B9A  EC33  F020         	call	i2_getRTC	;wreg free
 19826                           
 19827                           ;sort.c: 342: int curTime[7];
 19828                           ;sort.c: 343: for(int i = 0; i < 7; i++){
 19829  002B9E  0E00               	movlw	0
 19830  002BA0  6E4A               	movwf	printSortTimer@i+1,c
 19831  002BA2  0E00               	movlw	0
 19832  002BA4  6E49               	movwf	printSortTimer@i,c
 19833  002BA6                     i2l8420:
 19834  002BA6  BE4A               	btfsc	printSortTimer@i+1,7,c
 19835  002BA8  D006               	goto	i2l8424
 19836  002BAA  504A               	movf	printSortTimer@i+1,w,c
 19837  002BAC  E131               	bnz	i2l8430
 19838  002BAE  0E07               	movlw	7
 19839  002BB0  5C49               	subwf	printSortTimer@i,w,c
 19840  002BB2  B0D8               	btfsc	status,0,c
 19841  002BB4  D02D               	goto	i2l8430
 19842  002BB6                     i2l8424:
 19843                           
 19844                           ;sort.c: 344: curTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 19845  002BB6  0E24               	movlw	low _time
 19846  002BB8  2449               	addwf	printSortTimer@i,w,c
 19847  002BBA  6ED9               	movwf	fsr2l,c
 19848  002BBC  0E01               	movlw	high _time
 19849  002BBE  204A               	addwfc	printSortTimer@i+1,w,c
 19850  002BC0  6EDA               	movwf	fsr2h,c
 19851  002BC2  50DF               	movf	indf2,w,c
 19852  002BC4  6E2A               	movwf	??_printSortTimer& (0+255),c
 19853  002BC6  3A2A               	swapf	??_printSortTimer,f,c
 19854  002BC8  0E0F               	movlw	15
 19855  002BCA  162A               	andwf	??_printSortTimer,f,c
 19856  002BCC  0E0F               	movlw	15
 19857  002BCE  162A               	andwf	??_printSortTimer,f,c
 19858  002BD0  502A               	movf	??_printSortTimer,w,c
 19859  002BD2  0D0A               	mullw	10
 19860  002BD4  0E24               	movlw	low _time
 19861  002BD6  2449               	addwf	printSortTimer@i,w,c
 19862  002BD8  6ED9               	movwf	fsr2l,c
 19863  002BDA  0E01               	movlw	high _time
 19864  002BDC  204A               	addwfc	printSortTimer@i+1,w,c
 19865  002BDE  6EDA               	movwf	fsr2h,c
 19866  002BE0  50DF               	movf	indf2,w,c
 19867  002BE2  0B0F               	andlw	15
 19868  002BE4  6E2B               	movwf	(??_printSortTimer+1)& (0+255),c
 19869  002BE6  6A2C               	clrf	(??_printSortTimer+2)& (0+255),c
 19870  002BE8  50F3               	movf	prodl,w,c
 19871  002BEA  262B               	addwf	??_printSortTimer+1,f,c
 19872  002BEC  50F4               	movf	prodh,w,c
 19873  002BEE  222C               	addwfc	??_printSortTimer+2,f,c
 19874  002BF0  90D8               	bcf	status,0,c
 19875  002BF2  3449               	rlcf	printSortTimer@i,w,c
 19876  002BF4  6ED9               	movwf	fsr2l,c
 19877  002BF6  344A               	rlcf	printSortTimer@i+1,w,c
 19878  002BF8  6EDA               	movwf	fsr2h,c
 19879  002BFA  0E2F               	movlw	low printSortTimer@curTime
 19880  002BFC  26D9               	addwf	fsr2l,f,c
 19881  002BFE  0E00               	movlw	high printSortTimer@curTime
 19882  002C00  22DA               	addwfc	fsr2h,f,c
 19883  002C02  C02B  FFDE         	movff	??_printSortTimer+1,postinc2
 19884  002C06  C02C  FFDD         	movff	??_printSortTimer+2,postdec2
 19885  002C0A  4A49               	infsnz	printSortTimer@i,f,c
 19886  002C0C  2A4A               	incf	printSortTimer@i+1,f,c
 19887  002C0E  D7CB               	goto	i2l8420
 19888  002C10                     i2l8430:
 19889                           
 19890                           ;sort.c: 345: }
 19891                           ;sort.c: 346: unsigned int start_sec = startTime[0] + startTime[1]*60 + startTime[2]*360
      +                          0;
 19892  002C10  C110  F001         	movff	_startTime+2,i2___wmul@multiplier
 19893  002C14  C111  F002         	movff	_startTime+3,i2___wmul@multiplier+1
 19894  002C18  0E00               	movlw	0
 19895  002C1A  6E04               	movwf	i2___wmul@multiplicand+1,c
 19896  002C1C  0E3C               	movlw	60
 19897  002C1E  6E03               	movwf	i2___wmul@multiplicand,c
 19898  002C20  ECF2  F024         	call	i2___wmul	;wreg free
 19899  002C24  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 19900  002C28  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 19901  002C2C  C112  F001         	movff	_startTime+4,i2___wmul@multiplier
 19902  002C30  C113  F002         	movff	_startTime+5,i2___wmul@multiplier+1
 19903  002C34  0E0E               	movlw	14
 19904  002C36  6E04               	movwf	i2___wmul@multiplicand+1,c
 19905  002C38  0E10               	movlw	16
 19906  002C3A  6E03               	movwf	i2___wmul@multiplicand,c
 19907  002C3C  ECF2  F024         	call	i2___wmul	;wreg free
 19908  002C40  5001               	movf	?i2___wmul,w,c
 19909  002C42  262A               	addwf	??_printSortTimer,f,c
 19910  002C44  5002               	movf	?i2___wmul+1,w,c
 19911  002C46  222B               	addwfc	??_printSortTimer+1,f,c
 19912  002C48  0101               	movlb	1	; () banked
 19913  002C4A  510E               	movf	_startTime& (0+255),w,b
 19914  002C4C  242A               	addwf	??_printSortTimer,w,c
 19915  002C4E  6E3D               	movwf	printSortTimer@start_sec,c
 19916  002C50  0101               	movlb	1	; () banked
 19917  002C52  510F               	movf	(_startTime+1)& (0+255),w,b
 19918  002C54  202B               	addwfc	??_printSortTimer+1,w,c
 19919  002C56  6E3E               	movwf	printSortTimer@start_sec+1,c
 19920                           
 19921                           ;sort.c: 347: unsigned int cur_sec = curTime[0] + curTime[1]*60 + curTime[2]*3600;
 19922  002C58  C031  F001         	movff	printSortTimer@curTime+2,i2___wmul@multiplier
 19923  002C5C  C032  F002         	movff	printSortTimer@curTime+3,i2___wmul@multiplier+1
 19924  002C60  0E00               	movlw	0
 19925  002C62  6E04               	movwf	i2___wmul@multiplicand+1,c
 19926  002C64  0E3C               	movlw	60
 19927  002C66  6E03               	movwf	i2___wmul@multiplicand,c
 19928  002C68  ECF2  F024         	call	i2___wmul	;wreg free
 19929  002C6C  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 19930  002C70  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 19931  002C74  C033  F001         	movff	printSortTimer@curTime+4,i2___wmul@multiplier
 19932  002C78  C034  F002         	movff	printSortTimer@curTime+5,i2___wmul@multiplier+1
 19933  002C7C  0E0E               	movlw	14
 19934  002C7E  6E04               	movwf	i2___wmul@multiplicand+1,c
 19935  002C80  0E10               	movlw	16
 19936  002C82  6E03               	movwf	i2___wmul@multiplicand,c
 19937  002C84  ECF2  F024         	call	i2___wmul	;wreg free
 19938  002C88  5001               	movf	?i2___wmul,w,c
 19939  002C8A  262A               	addwf	??_printSortTimer,f,c
 19940  002C8C  5002               	movf	?i2___wmul+1,w,c
 19941  002C8E  222B               	addwfc	??_printSortTimer+1,f,c
 19942  002C90  502F               	movf	printSortTimer@curTime,w,c
 19943  002C92  242A               	addwf	??_printSortTimer,w,c
 19944  002C94  6E3F               	movwf	printSortTimer@cur_sec,c
 19945  002C96  5030               	movf	printSortTimer@curTime+1,w,c
 19946  002C98  202B               	addwfc	??_printSortTimer+1,w,c
 19947  002C9A  6E40               	movwf	printSortTimer@cur_sec+1,c
 19948                           
 19949                           ;sort.c: 348: unsigned int timeDiff = cur_sec - start_sec;
 19950  002C9C  C03D  F02A         	movff	printSortTimer@start_sec,??_printSortTimer
 19951  002CA0  C03E  F02B         	movff	printSortTimer@start_sec+1,??_printSortTimer+1
 19952  002CA4  1E2A               	comf	??_printSortTimer,f,c
 19953  002CA6  1E2B               	comf	??_printSortTimer+1,f,c
 19954  002CA8  4A2A               	infsnz	??_printSortTimer,f,c
 19955  002CAA  2A2B               	incf	??_printSortTimer+1,f,c
 19956  002CAC  503F               	movf	printSortTimer@cur_sec,w,c
 19957  002CAE  242A               	addwf	??_printSortTimer,w,c
 19958  002CB0  6E47               	movwf	printSortTimer@timeDiff,c
 19959  002CB2  5040               	movf	printSortTimer@cur_sec+1,w,c
 19960  002CB4  202B               	addwfc	??_printSortTimer+1,w,c
 19961  002CB6  6E48               	movwf	printSortTimer@timeDiff+1,c
 19962                           
 19963                           ;sort.c: 350: total_time = timeDiff;
 19964  002CB8  C047  F0F8         	movff	printSortTimer@timeDiff,_total_time
 19965  002CBC  C048  F0F9         	movff	printSortTimer@timeDiff+1,_total_time+1
 19966                           
 19967                           ;sort.c: 352: if(timeDiff >= 179){
 19968  002CC0  5048               	movf	printSortTimer@timeDiff+1,w,c
 19969  002CC2  E104               	bnz	i2u742_40
 19970  002CC4  0EB3               	movlw	179
 19971  002CC6  5C47               	subwf	printSortTimer@timeDiff,w,c
 19972  002CC8  A0D8               	btfss	status,0,c
 19973  002CCA  D003               	goto	i2l8440
 19974  002CCC                     i2u742_40:
 19975                           
 19976                           ;sort.c: 353: machine_state = DoneSorting_state;
 19977  002CCC  0E02               	movlw	2
 19978  002CCE  0100               	movlb	0	; () banked
 19979  002CD0  6FFC               	movwf	_machine_state& (0+255),b
 19980  002CD2                     i2l8440:
 19981                           
 19982                           ;sort.c: 355: }
 19983                           ;sort.c: 357: int hour = timeDiff / 3600;
 19984  002CD2  C047  F006         	movff	printSortTimer@timeDiff,i2___lwdiv@dividend
 19985  002CD6  C048  F007         	movff	printSortTimer@timeDiff+1,i2___lwdiv@dividend+1
 19986  002CDA  0E0E               	movlw	14
 19987  002CDC  6E09               	movwf	i2___lwdiv@divisor+1,c
 19988  002CDE  0E10               	movlw	16
 19989  002CE0  6E08               	movwf	i2___lwdiv@divisor,c
 19990  002CE2  ECEC  F021         	call	i2___lwdiv	;wreg free
 19991  002CE6  C006  F02D         	movff	?i2___lwdiv,printSortTimer@hour
 19992  002CEA  C007  F02E         	movff	?i2___lwdiv+1,printSortTimer@hour+1
 19993                           
 19994                           ;sort.c: 358: int min = (timeDiff % 3600) / 60;
 19995  002CEE  0E0E               	movlw	14
 19996  002CF0  6E04               	movwf	i2___lwmod@divisor+1,c
 19997  002CF2  0E10               	movlw	16
 19998  002CF4  6E03               	movwf	i2___lwmod@divisor,c
 19999  002CF6  C047  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 20000  002CFA  C048  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 20001  002CFE  ECAB  F022         	call	i2___lwmod	;wreg free
 20002  002D02  C001  F006         	movff	?i2___lwmod,i2___lwdiv@dividend
 20003  002D06  C002  F007         	movff	?i2___lwmod+1,i2___lwdiv@dividend+1
 20004  002D0A  0E00               	movlw	0
 20005  002D0C  6E09               	movwf	i2___lwdiv@divisor+1,c
 20006  002D0E  0E3C               	movlw	60
 20007  002D10  6E08               	movwf	i2___lwdiv@divisor,c
 20008  002D12  ECEC  F021         	call	i2___lwdiv	;wreg free
 20009  002D16  C006  F041         	movff	?i2___lwdiv,printSortTimer@min
 20010  002D1A  C007  F042         	movff	?i2___lwdiv+1,printSortTimer@min+1
 20011                           
 20012                           ;sort.c: 359: int sec = (timeDiff % 3600) % 60;
 20013  002D1E  0E0E               	movlw	14
 20014  002D20  6E04               	movwf	i2___lwmod@divisor+1,c
 20015  002D22  0E10               	movlw	16
 20016  002D24  6E03               	movwf	i2___lwmod@divisor,c
 20017  002D26  C047  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 20018  002D2A  C048  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 20019  002D2E  ECAB  F022         	call	i2___lwmod	;wreg free
 20020  002D32  C001  F045         	movff	?i2___lwmod,_printSortTimer$2437
 20021  002D36  C002  F046         	movff	?i2___lwmod+1,_printSortTimer$2437+1
 20022                           
 20023                           ;sort.c: 359: int sec = (timeDiff % 3600) % 60;
 20024  002D3A  C045  F001         	movff	_printSortTimer$2437,i2___lwmod@dividend
 20025  002D3E  C046  F002         	movff	_printSortTimer$2437+1,i2___lwmod@dividend+1
 20026  002D42  0E00               	movlw	0
 20027  002D44  6E04               	movwf	i2___lwmod@divisor+1,c
 20028  002D46  0E3C               	movlw	60
 20029  002D48  6E03               	movwf	i2___lwmod@divisor,c
 20030  002D4A  ECAB  F022         	call	i2___lwmod	;wreg free
 20031  002D4E  C001  F043         	movff	?i2___lwmod,printSortTimer@sec
 20032  002D52  C002  F044         	movff	?i2___lwmod+1,printSortTimer@sec+1
 20033                           
 20034                           ;sort.c: 361: lcdInst(0b10000000);;
 20035  002D56  0E80               	movlw	128
 20036  002D58  ECA6  F025         	call	i2_lcdInst
 20037                           
 20038                           ;sort.c: 362: printf("SORTING...");
 20039  002D5C  0E7C               	movlw	low STR_64
 20040  002D5E  6E0D               	movwf	i2printf@f,c
 20041  002D60  0EFF               	movlw	high STR_64
 20042  002D62  6E0E               	movwf	i2printf@f+1,c
 20043  002D64  EC96  F00C         	call	i2_printf	;wreg free
 20044                           
 20045                           ;sort.c: 363: lcdInst(0b11000000);;
 20046  002D68  0EC0               	movlw	192
 20047  002D6A  ECA6  F025         	call	i2_lcdInst
 20048                           
 20049                           ;sort.c: 364: printf("TIME %d:%02d", min, sec);
 20050  002D6E  0E42               	movlw	low STR_65
 20051  002D70  6E0D               	movwf	i2printf@f,c
 20052  002D72  0EFF               	movlw	high STR_65
 20053  002D74  6E0E               	movwf	i2printf@f+1,c
 20054  002D76  C041  F00F         	movff	printSortTimer@min,?i2_printf+2
 20055  002D7A  C042  F010         	movff	printSortTimer@min+1,?i2_printf+3
 20056  002D7E  C043  F011         	movff	printSortTimer@sec,?i2_printf+4
 20057  002D82  C044  F012         	movff	printSortTimer@sec+1,?i2_printf+5
 20058  002D86  EC96  F00C         	call	i2_printf	;wreg free
 20059  002D8A  0012               	return		;funcret
 20060  002D8C                     __end_of_printSortTimer:
 20061                           	opt stack 0
 20062                           pclatu	equ	0xFFB
 20063                           pclath	equ	0xFFA
 20064                           tblptru	equ	0xFF8
 20065                           tblptrh	equ	0xFF7
 20066                           tblptrl	equ	0xFF6
 20067                           tablat	equ	0xFF5
 20068                           prodh	equ	0xFF4
 20069                           prodl	equ	0xFF3
 20070                           intcon	equ	0xFF2
 20071                           intcon2	equ	0xFF1
 20072                           intcon3	equ	0xFF0
 20073                           indf0	equ	0xFEF
 20074                           postinc0	equ	0xFEE
 20075                           fsr0h	equ	0xFEA
 20076                           fsr0l	equ	0xFE9
 20077                           wreg	equ	0xFE8
 20078                           postdec1	equ	0xFE5
 20079                           fsr1h	equ	0xFE2
 20080                           fsr1l	equ	0xFE1
 20081                           indf2	equ	0xFDF
 20082                           postinc2	equ	0xFDE
 20083                           postdec2	equ	0xFDD
 20084                           fsr2h	equ	0xFDA
 20085                           fsr2l	equ	0xFD9
 20086                           status	equ	0xFD8
 20087                           
 20088 ;; *************** function i2_printf *****************
 20089 ;; Defined at:
 20090 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 20091 ;; Parameters:    Size  Location     Type
 20092 ;;  f               2   12[COMRAM] PTR const unsigned char 
 20093 ;;		 -> STR_119(18), STR_118(18), STR_117(18), STR_116(18), 
 20094 ;;		 -> STR_115(17), STR_114(17), STR_113(11), STR_112(18), 
 20095 ;;		 -> STR_111(18), STR_110(17), STR_109(15), STR_108(15), 
 20096 ;;		 -> STR_107(15), STR_106(17), STR_105(17), STR_104(17), 
 20097 ;;		 -> STR_103(16), STR_102(17), STR_101(17), STR_100(17), 
 20098 ;;		 -> STR_99(17), STR_98(17), STR_97(17), STR_96(15), 
 20099 ;;		 -> STR_95(11), STR_94(17), STR_93(11), STR_92(17), 
 20100 ;;		 -> STR_91(14), STR_90(15), STR_89(14), STR_88(10), 
 20101 ;;		 -> STR_87(9), STR_86(9), STR_85(10), STR_84(10), 
 20102 ;;		 -> STR_83(16), STR_82(15), STR_81(3), STR_80(15), 
 20103 ;;		 -> STR_79(13), STR_78(14), STR_77(8), STR_76(14), 
 20104 ;;		 -> STR_75(15), STR_74(12), STR_73(14), STR_72(17), 
 20105 ;;		 -> STR_71(14), STR_70(15), STR_69(17), STR_68(17), 
 20106 ;;		 -> STR_67(7), STR_66(21), STR_65(13), STR_64(11), 
 20107 ;;		 -> STR_63(24), STR_50(17), STR_49(17), STR_48(17), 
 20108 ;;		 -> STR_47(17), STR_46(17), STR_45(17), STR_44(17), 
 20109 ;;		 -> STR_43(17), STR_42(17), STR_41(17), STR_40(17), 
 20110 ;;		 -> STR_39(17), STR_38(17), STR_37(17), STR_36(17), 
 20111 ;;		 -> STR_35(17), STR_34(17), STR_33(17), STR_32(17), 
 20112 ;;		 -> STR_31(17), STR_30(17), STR_29(3), STR_28(17), 
 20113 ;;		 -> STR_27(17), STR_26(17), STR_25(17), STR_24(17), 
 20114 ;;		 -> STR_23(14), STR_22(10), STR_21(24), STR_7(7), 
 20115 ;;		 -> STR_6(17), STR_5(18), STR_4(16), STR_3(18), 
 20116 ;;		 -> STR_2(14), STR_1(18), 
 20117 ;; Auto vars:     Size  Location     Type
 20118 ;;  printf          4    0        struct .
 20119 ;;  printf          2   39[COMRAM] int 
 20120 ;;  printf          2   35[COMRAM] unsigned int 
 20121 ;;  printf          2   33[COMRAM] unsigned int 
 20122 ;;  printf          2   31[COMRAM] PTR void [1]
 20123 ;;		 -> ?i2_printf(2), ?_printf(2), 
 20124 ;;  printf          2   29[COMRAM] PTR const unsigned char 
 20125 ;;		 -> STR_120(7), count_total(2), printRTC@month(4), UI@month(4), 
 20126 ;;  printf          1   38[COMRAM] char 
 20127 ;;  printf          1   37[COMRAM] unsigned char 
 20128 ;;  printf          1   28[COMRAM] char 
 20129 ;; Return value:  Size  Location     Type
 20130 ;;                  2   12[COMRAM] int 
 20131 ;; Registers used:
 20132 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20133 ;; Tracked objects:
 20134 ;;		On entry : 0/0
 20135 ;;		On exit  : 0/0
 20136 ;;		Unchanged: 0/0
 20137 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20138 ;;      Params:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20139 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20140 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20141 ;;      Totals:        29       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20142 ;;Total ram usage:       29 bytes
 20143 ;; Hardware stack levels used:    1
 20144 ;; Hardware stack levels required when called:    2
 20145 ;; This function calls:
 20146 ;;		i2___lwdiv
 20147 ;;		i2___lwmod
 20148 ;;		i2___wmul
 20149 ;;		i2_isdigit
 20150 ;;		i2_putch
 20151 ;; This function is called by:
 20152 ;;		_change_state_to_menu_11
 20153 ;;		_change_state_to_menu_23
 20154 ;;		_change_state_to_logs_11
 20155 ;;		_change_state_to_logs_12
 20156 ;;		_change_state_to_logs_22
 20157 ;;		_change_state_to_logs_23
 20158 ;;		_change_state_to_logs_33
 20159 ;;		_change_state_to_logs_34
 20160 ;;		_printSortTimer
 20161 ;;		i2_change_state_to_menu_start
 20162 ;;		i2_change_state_to_menu_12
 20163 ;;		i2_change_state_to_menu_22
 20164 ;;		i2_printRTC
 20165 ;; This function uses a non-reentrant model
 20166 ;;
 20167                           
 20168                           	psect	text79
 20169  00192C                     __ptext79:
 20170                           	opt stack 0
 20171  00192C                     i2_printf:
 20172                           	opt stack 19
 20173                           
 20174                           ;doprnt.c: 466: va_list ap;
 20175                           ;doprnt.c: 499: signed char c;
 20176                           ;doprnt.c: 501: int width;
 20177                           ;doprnt.c: 506: signed char prec;
 20178                           ;doprnt.c: 508: unsigned char flag;
 20179                           ;doprnt.c: 523: union {
 20180                           ;doprnt.c: 524: unsigned long vd;
 20181                           ;doprnt.c: 525: double integ;
 20182                           ;doprnt.c: 526: } tmpval;
 20183                           ;doprnt.c: 528: unsigned int val;
 20184                           ;doprnt.c: 529: unsigned len;
 20185                           ;doprnt.c: 530: const char * cp;
 20186                           ;doprnt.c: 533: *ap = __va_start();
 20187                           
 20188                           ;incstack = 0
 20189  00192C  0E0F               	movlw	low (?i2_printf+2)
 20190  00192E  6E20               	movwf	i2printf@ap,c
 20191  001930  0E00               	movlw	high (?i2_printf+2)
 20192  001932  6E21               	movwf	i2printf@ap+1,c
 20193                           
 20194                           ;doprnt.c: 536: while(c = *f++) {
 20195  001934  D1A4               	goto	i2l6034
 20196  001936                     i2l5904:
 20197                           
 20198                           ;doprnt.c: 538: if(c != '%')
 20199  001936  0E25               	movlw	37
 20200  001938  1827               	xorwf	i2printf@c,w,c
 20201  00193A  B4D8               	btfsc	status,2,c
 20202  00193C  D004               	goto	i2l5908
 20203                           
 20204                           ;doprnt.c: 540: {
 20205                           ;doprnt.c: 541: (putch(c) );
 20206  00193E  5027               	movf	i2printf@c,w,c
 20207  001940  ECA0  F025         	call	i2_putch
 20208                           
 20209                           ;doprnt.c: 542: continue;
 20210  001944  D19C               	goto	i2l6034
 20211  001946                     i2l5908:
 20212                           
 20213                           ;doprnt.c: 543: }
 20214                           ;doprnt.c: 546: width = 0;
 20215  001946  0E00               	movlw	0
 20216  001948  6E29               	movwf	i2printf@width+1,c
 20217  00194A  0E00               	movlw	0
 20218  00194C  6E28               	movwf	i2printf@width,c
 20219                           
 20220                           ;doprnt.c: 548: flag = 0;
 20221  00194E  0E00               	movlw	0
 20222  001950  6E26               	movwf	i2printf@flag,c
 20223                           
 20224                           ;doprnt.c: 551: switch(*f) {
 20225                           
 20226                           ;doprnt.c: 550: for(;;) {
 20227  001952  D003               	goto	i2l5914
 20228  001954                     i2l5910:
 20229                           
 20230                           ;doprnt.c: 580: flag |= 0x04;
 20231  001954  8426               	bsf	i2printf@flag,2,c
 20232                           
 20233                           ;doprnt.c: 581: f++;
 20234  001956  4A0D               	infsnz	i2printf@f,f,c
 20235  001958  2A0E               	incf	i2printf@f+1,f,c
 20236  00195A                     i2l5914:
 20237  00195A  C00D  FFF6         	movff	i2printf@f,tblptrl
 20238  00195E  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 20239  001962                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 20240  001962  6AF8               	clrf	tblptru,c
 20241  001964                     	endif
 20242  001964                     	if	0	;tblptru may be non-zero
 20243  001964                     	endif
 20244  001964  0008               	tblrd		*
 20245  001966  50F5               	movf	tablat,w,c
 20246                           
 20247                           ; Switch size 1, requested type "space"
 20248                           ; Number of cases is 1, Range of values is 48 to 48
 20249                           ; switch strategies available:
 20250                           ; Name         Instructions Cycles
 20251                           ; simple_byte            4     3 (average)
 20252                           ;	Chosen strategy is simple_byte
 20253  001968  0A30               	xorlw	48	; case 48
 20254  00196A  B4D8               	btfsc	status,2,c
 20255  00196C  D7F3               	goto	i2l5910
 20256                           
 20257                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 20258                           
 20259                           ;doprnt.c: 586: }
 20260                           
 20261                           ;doprnt.c: 585: break;
 20262  00196E  C00D  FFF6         	movff	i2printf@f,tblptrl
 20263  001972  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 20264  001976                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 20265  001976  6AF8               	clrf	tblptru,c
 20266  001978                     	endif
 20267  001978                     	if	0	;tblptru may be non-zero
 20268  001978                     	endif
 20269  001978  0008               	tblrd		*
 20270  00197A  50F5               	movf	tablat,w,c
 20271  00197C  EC4C  F025         	call	i2_isdigit
 20272  001980  A0D8               	btfss	status,0,c
 20273  001982  D0A6               	goto	i2l5962
 20274                           
 20275                           ;doprnt.c: 598: width = 0;
 20276  001984  0E00               	movlw	0
 20277  001986  6E29               	movwf	i2printf@width+1,c
 20278  001988  0E00               	movlw	0
 20279  00198A  6E28               	movwf	i2printf@width,c
 20280  00198C                     i2l5920:
 20281                           
 20282                           ;doprnt.c: 600: width *= 10;
 20283  00198C  C028  F001         	movff	i2printf@width,i2___wmul@multiplier
 20284  001990  C029  F002         	movff	i2printf@width+1,i2___wmul@multiplier+1
 20285  001994  0E00               	movlw	0
 20286  001996  6E04               	movwf	i2___wmul@multiplicand+1,c
 20287  001998  0E0A               	movlw	10
 20288  00199A  6E03               	movwf	i2___wmul@multiplicand,c
 20289  00199C  ECF2  F024         	call	i2___wmul	;wreg free
 20290  0019A0  C001  F028         	movff	?i2___wmul,i2printf@width
 20291  0019A4  C002  F029         	movff	?i2___wmul+1,i2printf@width+1
 20292                           
 20293                           ;doprnt.c: 601: width += *f++ - '0';
 20294  0019A8  0ED0               	movlw	208
 20295  0019AA  6E19               	movwf	??i2_printf& (0+255),c
 20296  0019AC  0EFF               	movlw	255
 20297  0019AE  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 20298  0019B0  C00D  FFF6         	movff	i2printf@f,tblptrl
 20299  0019B4  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 20300  0019B8                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 20301  0019B8  6AF8               	clrf	tblptru,c
 20302  0019BA                     	endif
 20303  0019BA                     	if	0	;tblptru may be non-zero
 20304  0019BA                     	endif
 20305  0019BA  0008               	tblrd		*
 20306  0019BC  50F5               	movf	tablat,w,c
 20307  0019BE  6E1B               	movwf	(??i2_printf+2)& (0+255),c
 20308  0019C0  6A1C               	clrf	(??i2_printf+3)& (0+255),c
 20309  0019C2  5019               	movf	??i2_printf,w,c
 20310  0019C4  261B               	addwf	??i2_printf+2,f,c
 20311  0019C6  501A               	movf	??i2_printf+1,w,c
 20312  0019C8  221C               	addwfc	??i2_printf+3,f,c
 20313  0019CA  501B               	movf	??i2_printf+2,w,c
 20314  0019CC  2628               	addwf	i2printf@width,f,c
 20315  0019CE  501C               	movf	??i2_printf+3,w,c
 20316  0019D0  2229               	addwfc	i2printf@width+1,f,c
 20317  0019D2  4A0D               	infsnz	i2printf@f,f,c
 20318  0019D4  2A0E               	incf	i2printf@f+1,f,c
 20319                           
 20320                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 20321  0019D6  C00D  FFF6         	movff	i2printf@f,tblptrl
 20322  0019DA  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 20323  0019DE                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 20324  0019DE  6AF8               	clrf	tblptru,c
 20325  0019E0                     	endif
 20326  0019E0                     	if	0	;tblptru may be non-zero
 20327  0019E0                     	endif
 20328  0019E0  0008               	tblrd		*
 20329  0019E2  50F5               	movf	tablat,w,c
 20330  0019E4  EC4C  F025         	call	i2_isdigit
 20331  0019E8  A0D8               	btfss	status,0,c
 20332  0019EA  D072               	goto	i2l5962
 20333  0019EC  D7CF               	goto	i2l5920
 20334  0019EE                     i2l5928:
 20335                           
 20336                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 20337  0019EE  C020  FFD9         	movff	i2printf@ap,fsr2l
 20338  0019F2  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 20339  0019F6  CFDE F01E          	movff	postinc2,i2printf@cp
 20340  0019FA  CFDD F01F          	movff	postdec2,i2printf@cp+1
 20341  0019FE  0E02               	movlw	2
 20342  001A00  2620               	addwf	i2printf@ap,f,c
 20343  001A02  0E00               	movlw	0
 20344  001A04  2221               	addwfc	i2printf@ap+1,f,c
 20345                           
 20346                           ;doprnt.c: 740: if(!cp)
 20347  001A06  501E               	movf	i2printf@cp,w,c
 20348  001A08  101F               	iorwf	i2printf@cp+1,w,c
 20349  001A0A  A4D8               	btfss	status,2,c
 20350  001A0C  D004               	goto	i2l5936
 20351                           
 20352                           ;doprnt.c: 741: cp = "(null)";
 20353  001A0E  0EB6               	movlw	low STR_120
 20354  001A10  6E1E               	movwf	i2printf@cp,c
 20355  001A12  0EFF               	movlw	high STR_120
 20356  001A14  6E1F               	movwf	i2printf@cp+1,c
 20357  001A16                     i2l5936:
 20358                           
 20359                           ;doprnt.c: 745: len = 0;
 20360  001A16  0E00               	movlw	0
 20361  001A18  6E23               	movwf	i2printf@len+1,c
 20362  001A1A  0E00               	movlw	0
 20363  001A1C  6E22               	movwf	i2printf@len,c
 20364                           
 20365                           ;doprnt.c: 746: while(cp[len])
 20366  001A1E  D002               	goto	i2l5940
 20367  001A20                     i2l5938:
 20368                           
 20369                           ;doprnt.c: 747: len++;
 20370  001A20  4A22               	infsnz	i2printf@len,f,c
 20371  001A22  2A23               	incf	i2printf@len+1,f,c
 20372  001A24                     i2l5940:
 20373  001A24  5022               	movf	i2printf@len,w,c
 20374  001A26  241E               	addwf	i2printf@cp,w,c
 20375  001A28  6E19               	movwf	??i2_printf& (0+255),c
 20376  001A2A  5023               	movf	i2printf@len+1,w,c
 20377  001A2C  201F               	addwfc	i2printf@cp+1,w,c
 20378  001A2E  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 20379  001A30  C019  FFF6         	movff	??i2_printf,tblptrl
 20380  001A34  C01A  FFF7         	movff	??i2_printf+1,tblptrh
 20381  001A38  0E00               	movlw	low (__mediumconst shr (0+16))
 20382  001A3A  6EF8               	movwf	tblptru,c
 20383  001A3C  0E0F               	movlw	(high __ramtop+-1)
 20384  001A3E  64F7               	cpfsgt	tblptrh,c
 20385  001A40  D003               	bra	i2u449_47
 20386  001A42  0008               	tblrd		*
 20387  001A44  50F5               	movf	tablat,w,c
 20388  001A46  D005               	bra	i2u449_40
 20389  001A48                     i2u449_47:
 20390  001A48  CFF6 FFE9          	movff	tblptrl,fsr0l
 20391  001A4C  CFF7 FFEA          	movff	tblptrh,fsr0h
 20392  001A50  50EF               	movf	indf0,w,c
 20393  001A52                     i2u449_40:
 20394  001A52  0900               	iorlw	0
 20395  001A54  A4D8               	btfss	status,2,c
 20396  001A56  D7E4               	goto	i2l5938
 20397                           
 20398                           ;doprnt.c: 757: if(width > len)
 20399  001A58  5028               	movf	i2printf@width,w,c
 20400  001A5A  5C22               	subwf	i2printf@len,w,c
 20401  001A5C  5029               	movf	i2printf@width+1,w,c
 20402  001A5E  5823               	subwfb	i2printf@len+1,w,c
 20403  001A60  B0D8               	btfsc	status,0,c
 20404  001A62  D005               	goto	i2l5946
 20405                           
 20406                           ;doprnt.c: 758: width -= len;
 20407  001A64  5022               	movf	i2printf@len,w,c
 20408  001A66  5E28               	subwf	i2printf@width,f,c
 20409  001A68  5023               	movf	i2printf@len+1,w,c
 20410  001A6A  5A29               	subwfb	i2printf@width+1,f,c
 20411  001A6C  D008               	goto	i2l5950
 20412  001A6E                     i2l5946:
 20413                           
 20414                           ;doprnt.c: 759: else
 20415                           ;doprnt.c: 760: width = 0;
 20416  001A6E  0E00               	movlw	0
 20417  001A70  6E29               	movwf	i2printf@width+1,c
 20418  001A72  0E00               	movlw	0
 20419  001A74  6E28               	movwf	i2printf@width,c
 20420                           
 20421                           ;doprnt.c: 764: while(width--)
 20422  001A76  D003               	goto	i2l5950
 20423  001A78                     i2l5948:
 20424                           
 20425                           ;doprnt.c: 765: (putch(' ') );
 20426  001A78  0E20               	movlw	32
 20427  001A7A  ECA0  F025         	call	i2_putch
 20428  001A7E                     i2l5950:
 20429  001A7E  0628               	decf	i2printf@width,f,c
 20430  001A80  A0D8               	btfss	status,0,c
 20431  001A82  0629               	decf	i2printf@width+1,f,c
 20432  001A84  2828               	incf	i2printf@width,w,c
 20433  001A86  E1F8               	bnz	i2l5948
 20434  001A88  2829               	incf	i2printf@width+1,w,c
 20435  001A8A  B4D8               	btfsc	status,2,c
 20436  001A8C  D016               	goto	i2l5956
 20437  001A8E  D7F4               	goto	i2l5948
 20438  001A90                     i2l5952:
 20439                           
 20440                           ;doprnt.c: 768: (putch(*cp++) );
 20441  001A90  C01E  FFF6         	movff	i2printf@cp,tblptrl
 20442  001A94  C01F  FFF7         	movff	i2printf@cp+1,tblptrh
 20443  001A98  0E00               	movlw	low (__mediumconst shr (0+16))
 20444  001A9A  6EF8               	movwf	tblptru,c
 20445  001A9C  0E0F               	movlw	(high __ramtop+-1)
 20446  001A9E  64F7               	cpfsgt	tblptrh,c
 20447  001AA0  D003               	bra	i2u453_47
 20448  001AA2  0008               	tblrd		*
 20449  001AA4  50F5               	movf	tablat,w,c
 20450  001AA6  D005               	bra	i2u453_40
 20451  001AA8                     i2u453_47:
 20452  001AA8  CFF6 FFE9          	movff	tblptrl,fsr0l
 20453  001AAC  CFF7 FFEA          	movff	tblptrh,fsr0h
 20454  001AB0  50EF               	movf	indf0,w,c
 20455  001AB2                     i2u453_40:
 20456  001AB2  ECA0  F025         	call	i2_putch
 20457  001AB6  4A1E               	infsnz	i2printf@cp,f,c
 20458  001AB8  2A1F               	incf	i2printf@cp+1,f,c
 20459  001ABA                     i2l5956:
 20460  001ABA  0622               	decf	i2printf@len,f,c
 20461  001ABC  A0D8               	btfss	status,0,c
 20462  001ABE  0623               	decf	i2printf@len+1,f,c
 20463  001AC0  2822               	incf	i2printf@len,w,c
 20464  001AC2  E1E6               	bnz	i2l5952
 20465  001AC4  2823               	incf	i2printf@len+1,w,c
 20466  001AC6  B4D8               	btfsc	status,2,c
 20467  001AC8  D0DA               	goto	i2l6034
 20468  001ACA  D7E2               	goto	i2l5952
 20469  001ACC                     i2l5958:
 20470                           
 20471                           ;doprnt.c: 818: flag |= 0x40;
 20472  001ACC  8C26               	bsf	i2printf@flag,6,c
 20473                           
 20474                           ;doprnt.c: 822: }
 20475                           
 20476                           ;doprnt.c: 819: break;
 20477  001ACE  D01B               	goto	i2l1320
 20478  001AD0                     i2l5962:
 20479  001AD0  C00D  FFF6         	movff	i2printf@f,tblptrl
 20480  001AD4  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 20481  001AD8  4A0D               	infsnz	i2printf@f,f,c
 20482  001ADA  2A0E               	incf	i2printf@f+1,f,c
 20483  001ADC                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 20484  001ADC  6AF8               	clrf	tblptru,c
 20485  001ADE                     	endif
 20486  001ADE                     	if	0	;tblptru may be non-zero
 20487  001ADE                     	endif
 20488  001ADE  0008               	tblrd		*
 20489  001AE0  CFF5 F027          	movff	tablat,i2printf@c
 20490  001AE4  5027               	movf	i2printf@c,w,c
 20491                           
 20492                           ; Switch size 1, requested type "space"
 20493                           ; Number of cases is 5, Range of values is 0 to 117
 20494                           ; switch strategies available:
 20495                           ; Name         Instructions Cycles
 20496                           ; simple_byte           16     9 (average)
 20497                           ;	Chosen strategy is simple_byte
 20498  001AE6  0A00               	xorlw	0	; case 0
 20499  001AE8  B4D8               	btfsc	status,2,c
 20500  001AEA  0012               	return	
 20501  001AEC  0A64               	xorlw	100	; case 100
 20502  001AEE  B4D8               	btfsc	status,2,c
 20503  001AF0  D00A               	goto	i2l1320
 20504  001AF2  0A0D               	xorlw	13	; case 105
 20505  001AF4  B4D8               	btfsc	status,2,c
 20506  001AF6  D007               	goto	i2l1320
 20507  001AF8  0A1A               	xorlw	26	; case 115
 20508  001AFA  B4D8               	btfsc	status,2,c
 20509  001AFC  D778               	goto	i2l5928
 20510  001AFE  0A06               	xorlw	6	; case 117
 20511  001B00  B4D8               	btfsc	status,2,c
 20512  001B02  D7E4               	goto	i2l5958
 20513  001B04  D0BC               	goto	i2l6034
 20514  001B06                     i2l1320:
 20515                           
 20516                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
 20517  001B06  BC26               	btfsc	i2printf@flag,6,c
 20518  001B08  D015               	goto	i2l5974
 20519                           
 20520                           ;doprnt.c: 1253: {
 20521                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 20522  001B0A  C020  FFD9         	movff	i2printf@ap,fsr2l
 20523  001B0E  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 20524  001B12  CFDE F024          	movff	postinc2,i2printf@val
 20525  001B16  CFDD F025          	movff	postdec2,i2printf@val+1
 20526  001B1A  0E02               	movlw	2
 20527  001B1C  2620               	addwf	i2printf@ap,f,c
 20528  001B1E  0E00               	movlw	0
 20529  001B20  2221               	addwfc	i2printf@ap+1,f,c
 20530                           
 20531                           ;doprnt.c: 1261: if((int)val < 0) {
 20532  001B22  AE25               	btfss	i2printf@val+1,7,c
 20533  001B24  D013               	goto	i2l5978
 20534                           
 20535                           ;doprnt.c: 1262: flag |= 0x03;
 20536  001B26  0E03               	movlw	3
 20537  001B28  1226               	iorwf	i2printf@flag,f,c
 20538                           
 20539                           ;doprnt.c: 1263: val = -val;
 20540  001B2A  6C24               	negf	i2printf@val,c
 20541  001B2C  1E25               	comf	i2printf@val+1,f,c
 20542  001B2E  B0D8               	btfsc	status,0,c
 20543  001B30  2A25               	incf	i2printf@val+1,f,c
 20544                           
 20545                           ;doprnt.c: 1264: }
 20546                           ;doprnt.c: 1266: }
 20547  001B32  D00C               	goto	i2l5978
 20548  001B34                     i2l5974:
 20549                           
 20550                           ;doprnt.c: 1268: else
 20551                           ;doprnt.c: 1273: {
 20552                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 20553  001B34  C020  FFD9         	movff	i2printf@ap,fsr2l
 20554  001B38  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 20555  001B3C  CFDE F024          	movff	postinc2,i2printf@val
 20556  001B40  CFDD F025          	movff	postdec2,i2printf@val+1
 20557  001B44  0E02               	movlw	2
 20558  001B46  2620               	addwf	i2printf@ap,f,c
 20559  001B48  0E00               	movlw	0
 20560  001B4A  2221               	addwfc	i2printf@ap+1,f,c
 20561  001B4C                     i2l5978:
 20562                           
 20563                           ;doprnt.c: 1287: }
 20564                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 20565  001B4C  0E01               	movlw	1
 20566  001B4E  6E27               	movwf	i2printf@c,c
 20567  001B50                     i2l5980:
 20568  001B50  0E05               	movlw	5
 20569  001B52  1827               	xorwf	i2printf@c,w,c
 20570  001B54  B4D8               	btfsc	status,2,c
 20571  001B56  D015               	goto	i2l5992
 20572                           
 20573                           ;doprnt.c: 1306: if(val < dpowers[c])
 20574  001B58  5027               	movf	i2printf@c,w,c
 20575  001B5A  0D02               	mullw	2
 20576  001B5C  0E12               	movlw	low _dpowers
 20577  001B5E  24F3               	addwf	prodl,w,c
 20578  001B60  6EF6               	movwf	tblptrl,c
 20579  001B62  0EFB               	movlw	high _dpowers
 20580  001B64  20F4               	addwfc	prodh,w,c
 20581  001B66  6EF7               	movwf	tblptrh,c
 20582  001B68                     	if	1	;There are 3 active tblptr bytes
 20583  001B68  6AF8               	clrf	tblptru,c
 20584  001B6A  0E00               	movlw	low (__mediumconst shr (0+16))
 20585  001B6C  22F8               	addwfc	tblptru,f,c
 20586  001B6E                     	endif
 20587  001B6E  0009               	tblrd		*+
 20588  001B70  50F5               	movf	tablat,w,c
 20589  001B72  5C24               	subwf	i2printf@val,w,c
 20590  001B74  0009               	tblrd		*+
 20591  001B76  50F5               	movf	tablat,w,c
 20592  001B78  5825               	subwfb	i2printf@val+1,w,c
 20593  001B7A  A0D8               	btfss	status,0,c
 20594  001B7C  D002               	goto	i2l5992
 20595                           
 20596                           ;doprnt.c: 1307: break;
 20597  001B7E  2A27               	incf	i2printf@c,f,c
 20598  001B80  D7E7               	goto	i2l5980
 20599  001B82                     i2l5992:
 20600                           
 20601                           ;doprnt.c: 1345: if(width && flag & 0x03)
 20602  001B82  5028               	movf	i2printf@width,w,c
 20603  001B84  1029               	iorwf	i2printf@width+1,w,c
 20604  001B86  B4D8               	btfsc	status,2,c
 20605  001B88  D009               	goto	i2l5998
 20606  001B8A  C026  F019         	movff	i2printf@flag,??i2_printf
 20607  001B8E  0E03               	movlw	3
 20608  001B90  1619               	andwf	??i2_printf,f,c
 20609  001B92  B4D8               	btfsc	status,2,c
 20610  001B94  D003               	goto	i2l5998
 20611                           
 20612                           ;doprnt.c: 1346: width--;
 20613  001B96  0628               	decf	i2printf@width,f,c
 20614  001B98  A0D8               	btfss	status,0,c
 20615  001B9A  0629               	decf	i2printf@width+1,f,c
 20616  001B9C                     i2l5998:
 20617                           
 20618                           ;doprnt.c: 1381: if(width > c)
 20619  001B9C  0E80               	movlw	128
 20620  001B9E  BE27               	btfsc	i2printf@c,7,c
 20621  001BA0  0E7F               	movlw	127
 20622  001BA2  6E19               	movwf	??i2_printf& (0+255),c
 20623  001BA4  5028               	movf	i2printf@width,w,c
 20624  001BA6  5C27               	subwf	i2printf@c,w,c
 20625  001BA8  5029               	movf	i2printf@width+1,w,c
 20626  001BAA  0A80               	xorlw	128
 20627  001BAC  5819               	subwfb	??i2_printf& (0+255),w,c
 20628  001BAE  B0D8               	btfsc	status,0,c
 20629  001BB0  D007               	goto	i2l6002
 20630                           
 20631                           ;doprnt.c: 1382: width -= c;
 20632  001BB2  5027               	movf	i2printf@c,w,c
 20633  001BB4  5E28               	subwf	i2printf@width,f,c
 20634  001BB6  0E00               	movlw	0
 20635  001BB8  BE27               	btfsc	i2printf@c,7,c
 20636  001BBA  0EFF               	movlw	255
 20637  001BBC  5A29               	subwfb	i2printf@width+1,f,c
 20638  001BBE  D004               	goto	i2l6004
 20639  001BC0                     i2l6002:
 20640                           
 20641                           ;doprnt.c: 1383: else
 20642                           ;doprnt.c: 1384: width = 0;
 20643  001BC0  0E00               	movlw	0
 20644  001BC2  6E29               	movwf	i2printf@width+1,c
 20645  001BC4  0E00               	movlw	0
 20646  001BC6  6E28               	movwf	i2printf@width,c
 20647  001BC8                     i2l6004:
 20648                           
 20649                           ;doprnt.c: 1387: if(flag & 0x04) {
 20650  001BC8  A426               	btfss	i2printf@flag,2,c
 20651  001BCA  D014               	goto	i2l6016
 20652                           
 20653                           ;doprnt.c: 1392: if(flag & 0x03)
 20654  001BCC  C026  F019         	movff	i2printf@flag,??i2_printf
 20655  001BD0  0E03               	movlw	3
 20656  001BD2  1619               	andwf	??i2_printf,f,c
 20657  001BD4  B4D8               	btfsc	status,2,c
 20658  001BD6  D003               	goto	i2l6010
 20659                           
 20660                           ;doprnt.c: 1393: (putch('-') );
 20661  001BD8  0E2D               	movlw	45
 20662  001BDA  ECA0  F025         	call	i2_putch
 20663  001BDE                     i2l6010:
 20664                           
 20665                           ;doprnt.c: 1415: if(width)
 20666  001BDE  5028               	movf	i2printf@width,w,c
 20667  001BE0  1029               	iorwf	i2printf@width+1,w,c
 20668  001BE2  B4D8               	btfsc	status,2,c
 20669  001BE4  D01E               	goto	i2l6026
 20670                           
 20671                           ;doprnt.c: 1417: (putch('0') );
 20672                           
 20673                           ;doprnt.c: 1416: do
 20674  001BE6  0E30               	movlw	48
 20675  001BE8  ECA0  F025         	call	i2_putch
 20676                           
 20677                           ;doprnt.c: 1418: while(--width);
 20678  001BEC  0628               	decf	i2printf@width,f,c
 20679  001BEE  A0D8               	btfss	status,0,c
 20680  001BF0  0629               	decf	i2printf@width+1,f,c
 20681  001BF2  D7F5               	goto	i2l6010
 20682  001BF4                     i2l6016:
 20683                           
 20684                           ;doprnt.c: 1422: {
 20685                           ;doprnt.c: 1424: if(width
 20686                           ;doprnt.c: 1428: )
 20687  001BF4  5028               	movf	i2printf@width,w,c
 20688  001BF6  1029               	iorwf	i2printf@width+1,w,c
 20689  001BF8  B4D8               	btfsc	status,2,c
 20690  001BFA  D00A               	goto	i2l6022
 20691  001BFC                     i2l6018:
 20692                           
 20693                           ;doprnt.c: 1430: (putch(' ') );
 20694  001BFC  0E20               	movlw	32
 20695  001BFE  ECA0  F025         	call	i2_putch
 20696                           
 20697                           ;doprnt.c: 1431: while(--width);
 20698  001C02  0628               	decf	i2printf@width,f,c
 20699  001C04  A0D8               	btfss	status,0,c
 20700  001C06  0629               	decf	i2printf@width+1,f,c
 20701  001C08  5028               	movf	i2printf@width,w,c
 20702  001C0A  1029               	iorwf	i2printf@width+1,w,c
 20703  001C0C  A4D8               	btfss	status,2,c
 20704  001C0E  D7F6               	goto	i2l6018
 20705  001C10                     i2l6022:
 20706                           
 20707                           ;doprnt.c: 1438: if(flag & 0x03)
 20708  001C10  C026  F019         	movff	i2printf@flag,??i2_printf
 20709  001C14  0E03               	movlw	3
 20710  001C16  1619               	andwf	??i2_printf,f,c
 20711  001C18  B4D8               	btfsc	status,2,c
 20712  001C1A  D003               	goto	i2l6026
 20713                           
 20714                           ;doprnt.c: 1439: (putch('-') );
 20715  001C1C  0E2D               	movlw	45
 20716  001C1E  ECA0  F025         	call	i2_putch
 20717  001C22                     i2l6026:
 20718                           
 20719                           ;doprnt.c: 1469: }
 20720                           ;doprnt.c: 1472: prec = c;
 20721  001C22  C027  F01D         	movff	i2printf@c,i2printf@prec
 20722                           
 20723                           ;doprnt.c: 1474: while(prec--) {
 20724  001C26  D027               	goto	i2l6032
 20725  001C28                     i2l6028:
 20726                           
 20727                           ;doprnt.c: 1478: {
 20728                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 20729  001C28  501D               	movf	i2printf@prec,w,c
 20730  001C2A  0D02               	mullw	2
 20731  001C2C  0E12               	movlw	low _dpowers
 20732  001C2E  24F3               	addwf	prodl,w,c
 20733  001C30  6EF6               	movwf	tblptrl,c
 20734  001C32  0EFB               	movlw	high _dpowers
 20735  001C34  20F4               	addwfc	prodh,w,c
 20736  001C36  6EF7               	movwf	tblptrh,c
 20737  001C38                     	if	1	;There are 3 active tblptr bytes
 20738  001C38  6AF8               	clrf	tblptru,c
 20739  001C3A  0E00               	movlw	low (__mediumconst shr (0+16))
 20740  001C3C  22F8               	addwfc	tblptru,f,c
 20741  001C3E                     	endif
 20742  001C3E  0009               	tblrd		*+
 20743  001C40  CFF5 F008          	movff	tablat,i2___lwdiv@divisor
 20744  001C44  000A               	tblrd		*-
 20745  001C46  CFF5 F009          	movff	tablat,i2___lwdiv@divisor+1
 20746  001C4A  C024  F006         	movff	i2printf@val,i2___lwdiv@dividend
 20747  001C4E  C025  F007         	movff	i2printf@val+1,i2___lwdiv@dividend+1
 20748  001C52  ECEC  F021         	call	i2___lwdiv	;wreg free
 20749  001C56  C006  F001         	movff	?i2___lwdiv,i2___lwmod@dividend
 20750  001C5A  C007  F002         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
 20751  001C5E  0E00               	movlw	0
 20752  001C60  6E04               	movwf	i2___lwmod@divisor+1,c
 20753  001C62  0E0A               	movlw	10
 20754  001C64  6E03               	movwf	i2___lwmod@divisor,c
 20755  001C66  ECAB  F022         	call	i2___lwmod	;wreg free
 20756  001C6A  5001               	movf	?i2___lwmod,w,c
 20757  001C6C  0F30               	addlw	48
 20758  001C6E  6E27               	movwf	i2printf@c,c
 20759                           
 20760                           ;doprnt.c: 1523: }
 20761                           ;doprnt.c: 1524: (putch(c) );
 20762  001C70  5027               	movf	i2printf@c,w,c
 20763  001C72  ECA0  F025         	call	i2_putch
 20764  001C76                     i2l6032:
 20765  001C76  061D               	decf	i2printf@prec,f,c
 20766  001C78  281D               	incf	i2printf@prec,w,c
 20767  001C7A  A4D8               	btfss	status,2,c
 20768  001C7C  D7D5               	goto	i2l6028
 20769  001C7E                     i2l6034:
 20770  001C7E  C00D  FFF6         	movff	i2printf@f,tblptrl
 20771  001C82  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 20772  001C86  4A0D               	infsnz	i2printf@f,f,c
 20773  001C88  2A0E               	incf	i2printf@f+1,f,c
 20774  001C8A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 20775  001C8A  6AF8               	clrf	tblptru,c
 20776  001C8C                     	endif
 20777  001C8C                     	if	0	;tblptru may be non-zero
 20778  001C8C                     	endif
 20779  001C8C  0008               	tblrd		*
 20780  001C8E  CFF5 F027          	movff	tablat,i2printf@c
 20781  001C92  5027               	movf	i2printf@c,w,c
 20782  001C94  B4D8               	btfsc	status,2,c
 20783  001C96  0012               	return	
 20784  001C98  D64E               	goto	i2l5904
 20785  001C9A                     __end_ofi2_printf:
 20786                           	opt stack 0
 20787                           pclatu	equ	0xFFB
 20788                           pclath	equ	0xFFA
 20789                           tblptru	equ	0xFF8
 20790                           tblptrh	equ	0xFF7
 20791                           tblptrl	equ	0xFF6
 20792                           tablat	equ	0xFF5
 20793                           prodh	equ	0xFF4
 20794                           prodl	equ	0xFF3
 20795                           intcon	equ	0xFF2
 20796                           intcon2	equ	0xFF1
 20797                           intcon3	equ	0xFF0
 20798                           indf0	equ	0xFEF
 20799                           postinc0	equ	0xFEE
 20800                           fsr0h	equ	0xFEA
 20801                           fsr0l	equ	0xFE9
 20802                           wreg	equ	0xFE8
 20803                           postdec1	equ	0xFE5
 20804                           fsr1h	equ	0xFE2
 20805                           fsr1l	equ	0xFE1
 20806                           indf2	equ	0xFDF
 20807                           postinc2	equ	0xFDE
 20808                           postdec2	equ	0xFDD
 20809                           fsr2h	equ	0xFDA
 20810                           fsr2l	equ	0xFD9
 20811                           status	equ	0xFD8
 20812                           
 20813 ;; *************** function i2_putch *****************
 20814 ;; Defined at:
 20815 ;;		line 20 in file "lcd.c"
 20816 ;; Parameters:    Size  Location     Type
 20817 ;;  data            1    wreg     unsigned char 
 20818 ;; Auto vars:     Size  Location     Type
 20819 ;;  data            1    2[COMRAM] unsigned char 
 20820 ;; Return value:  Size  Location     Type
 20821 ;;                  1    wreg      void 
 20822 ;; Registers used:
 20823 ;;		wreg, status,2, status,0, cstack
 20824 ;; Tracked objects:
 20825 ;;		On entry : 0/0
 20826 ;;		On exit  : 0/0
 20827 ;;		Unchanged: 0/0
 20828 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20829 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20830 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20831 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20832 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20833 ;;Total ram usage:        1 bytes
 20834 ;; Hardware stack levels used:    1
 20835 ;; Hardware stack levels required when called:    1
 20836 ;; This function calls:
 20837 ;;		i2_lcdNibble
 20838 ;; This function is called by:
 20839 ;;		i2_printf
 20840 ;; This function uses a non-reentrant model
 20841 ;;
 20842                           
 20843                           	psect	text80
 20844  004B40                     __ptext80:
 20845                           	opt stack 0
 20846  004B40                     i2_putch:
 20847                           	opt stack 19
 20848                           
 20849                           ;incstack = 0
 20850                           ;i2putch@data stored from wreg
 20851  004B40  6E03               	movwf	i2putch@data,c
 20852                           
 20853                           ;lcd.c: 21: LATDbits.LATD2 = 1;
 20854  004B42  848C               	bsf	3980,2,c	;volatile
 20855                           
 20856                           ;lcd.c: 22: lcdNibble(data);
 20857  004B44  5003               	movf	i2putch@data,w,c
 20858  004B46  ECC1  F021         	call	i2_lcdNibble
 20859  004B4A  0012               	return		;funcret
 20860  004B4C                     __end_ofi2_putch:
 20861                           	opt stack 0
 20862                           pclatu	equ	0xFFB
 20863                           pclath	equ	0xFFA
 20864                           tblptru	equ	0xFF8
 20865                           tblptrh	equ	0xFF7
 20866                           tblptrl	equ	0xFF6
 20867                           tablat	equ	0xFF5
 20868                           prodh	equ	0xFF4
 20869                           prodl	equ	0xFF3
 20870                           intcon	equ	0xFF2
 20871                           intcon2	equ	0xFF1
 20872                           intcon3	equ	0xFF0
 20873                           indf0	equ	0xFEF
 20874                           postinc0	equ	0xFEE
 20875                           fsr0h	equ	0xFEA
 20876                           fsr0l	equ	0xFE9
 20877                           wreg	equ	0xFE8
 20878                           postdec1	equ	0xFE5
 20879                           fsr1h	equ	0xFE2
 20880                           fsr1l	equ	0xFE1
 20881                           indf2	equ	0xFDF
 20882                           postinc2	equ	0xFDE
 20883                           postdec2	equ	0xFDD
 20884                           fsr2h	equ	0xFDA
 20885                           fsr2l	equ	0xFD9
 20886                           status	equ	0xFD8
 20887                           
 20888 ;; *************** function i2_isdigit *****************
 20889 ;; Defined at:
 20890 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 20891 ;; Parameters:    Size  Location     Type
 20892 ;;  c               1    wreg     unsigned char 
 20893 ;; Auto vars:     Size  Location     Type
 20894 ;;  c               1    2[COMRAM] unsigned char 
 20895 ;; Return value:  Size  Location     Type
 20896 ;;		None               void
 20897 ;; Registers used:
 20898 ;;		wreg, status,2, status,0
 20899 ;; Tracked objects:
 20900 ;;		On entry : 0/0
 20901 ;;		On exit  : 0/0
 20902 ;;		Unchanged: 0/0
 20903 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20904 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20905 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20906 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20907 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20908 ;;Total ram usage:        3 bytes
 20909 ;; Hardware stack levels used:    1
 20910 ;; This function calls:
 20911 ;;		Nothing
 20912 ;; This function is called by:
 20913 ;;		i2_printf
 20914 ;; This function uses a non-reentrant model
 20915 ;;
 20916                           
 20917                           	psect	text81
 20918  004A98                     __ptext81:
 20919                           	opt stack 0
 20920  004A98                     i2_isdigit:
 20921                           	opt stack 20
 20922                           
 20923                           ;incstack = 0
 20924                           ;i2isdigit@c stored from wreg
 20925  004A98  6E03               	movwf	i2isdigit@c,c
 20926  004A9A  0E00               	movlw	0
 20927  004A9C  6E02               	movwf	i2_isdigit$1961,c
 20928  004A9E  0E3A               	movlw	58
 20929  004AA0  6003               	cpfslt	i2isdigit@c,c
 20930  004AA2  D005               	goto	i2l5608
 20931  004AA4  0E2F               	movlw	47
 20932  004AA6  6403               	cpfsgt	i2isdigit@c,c
 20933  004AA8  D002               	goto	i2l5608
 20934  004AAA  0E01               	movlw	1
 20935  004AAC  6E02               	movwf	i2_isdigit$1961,c
 20936  004AAE                     i2l5608:
 20937  004AAE  C002  F001         	movff	i2_isdigit$1961,??i2_isdigit
 20938  004AB2  3001               	rrcf	??i2_isdigit,w,c
 20939  004AB4  0012               	return	
 20940  004AB6                     __end_ofi2_isdigit:
 20941                           	opt stack 0
 20942                           pclatu	equ	0xFFB
 20943                           pclath	equ	0xFFA
 20944                           tblptru	equ	0xFF8
 20945                           tblptrh	equ	0xFF7
 20946                           tblptrl	equ	0xFF6
 20947                           tablat	equ	0xFF5
 20948                           prodh	equ	0xFF4
 20949                           prodl	equ	0xFF3
 20950                           intcon	equ	0xFF2
 20951                           intcon2	equ	0xFF1
 20952                           intcon3	equ	0xFF0
 20953                           indf0	equ	0xFEF
 20954                           postinc0	equ	0xFEE
 20955                           fsr0h	equ	0xFEA
 20956                           fsr0l	equ	0xFE9
 20957                           wreg	equ	0xFE8
 20958                           postdec1	equ	0xFE5
 20959                           fsr1h	equ	0xFE2
 20960                           fsr1l	equ	0xFE1
 20961                           indf2	equ	0xFDF
 20962                           postinc2	equ	0xFDE
 20963                           postdec2	equ	0xFDD
 20964                           fsr2h	equ	0xFDA
 20965                           fsr2l	equ	0xFD9
 20966                           status	equ	0xFD8
 20967                           
 20968 ;; *************** function i2___wmul *****************
 20969 ;; Defined at:
 20970 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 20971 ;; Parameters:    Size  Location     Type
 20972 ;;  multiplier      2    0[COMRAM] unsigned int 
 20973 ;;  multiplicand    2    2[COMRAM] unsigned int 
 20974 ;; Auto vars:     Size  Location     Type
 20975 ;;  __wmul          2    4[COMRAM] unsigned int 
 20976 ;; Return value:  Size  Location     Type
 20977 ;;                  2    0[COMRAM] unsigned int 
 20978 ;; Registers used:
 20979 ;;		wreg, status,2, status,0, prodl, prodh
 20980 ;; Tracked objects:
 20981 ;;		On entry : 0/0
 20982 ;;		On exit  : 0/0
 20983 ;;		Unchanged: 0/0
 20984 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20985 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20986 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20987 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20988 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20989 ;;Total ram usage:        6 bytes
 20990 ;; Hardware stack levels used:    1
 20991 ;; This function calls:
 20992 ;;		Nothing
 20993 ;; This function is called by:
 20994 ;;		_printSortTimer
 20995 ;;		_retrieveLog
 20996 ;;		i2_printf
 20997 ;; This function uses a non-reentrant model
 20998 ;;
 20999                           
 21000                           	psect	text82
 21001  0049E4                     __ptext82:
 21002                           	opt stack 0
 21003  0049E4                     i2___wmul:
 21004                           	opt stack 20
 21005                           
 21006                           ;incstack = 0
 21007  0049E4  5001               	movf	i2___wmul@multiplier,w,c
 21008  0049E6  0203               	mulwf	i2___wmul@multiplicand,c
 21009  0049E8  CFF3 F005          	movff	prodl,i2___wmul@product
 21010  0049EC  CFF4 F006          	movff	prodh,i2___wmul@product+1
 21011  0049F0  5001               	movf	i2___wmul@multiplier,w,c
 21012  0049F2  0204               	mulwf	i2___wmul@multiplicand+1,c
 21013  0049F4  50F3               	movf	prodl,w,c
 21014  0049F6  2606               	addwf	i2___wmul@product+1,f,c
 21015  0049F8  5002               	movf	i2___wmul@multiplier+1,w,c
 21016  0049FA  0203               	mulwf	i2___wmul@multiplicand,c
 21017  0049FC  50F3               	movf	prodl,w,c
 21018  0049FE  2606               	addwf	i2___wmul@product+1,f,c
 21019  004A00  C005  F001         	movff	i2___wmul@product,?i2___wmul
 21020  004A04  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
 21021  004A08  0012               	return	
 21022  004A0A                     __end_ofi2___wmul:
 21023                           	opt stack 0
 21024                           pclatu	equ	0xFFB
 21025                           pclath	equ	0xFFA
 21026                           tblptru	equ	0xFF8
 21027                           tblptrh	equ	0xFF7
 21028                           tblptrl	equ	0xFF6
 21029                           tablat	equ	0xFF5
 21030                           prodh	equ	0xFF4
 21031                           prodl	equ	0xFF3
 21032                           intcon	equ	0xFF2
 21033                           intcon2	equ	0xFF1
 21034                           intcon3	equ	0xFF0
 21035                           indf0	equ	0xFEF
 21036                           postinc0	equ	0xFEE
 21037                           fsr0h	equ	0xFEA
 21038                           fsr0l	equ	0xFE9
 21039                           wreg	equ	0xFE8
 21040                           postdec1	equ	0xFE5
 21041                           fsr1h	equ	0xFE2
 21042                           fsr1l	equ	0xFE1
 21043                           indf2	equ	0xFDF
 21044                           postinc2	equ	0xFDE
 21045                           postdec2	equ	0xFDD
 21046                           fsr2h	equ	0xFDA
 21047                           fsr2l	equ	0xFD9
 21048                           status	equ	0xFD8
 21049                           
 21050 ;; *************** function i2___lwmod *****************
 21051 ;; Defined at:
 21052 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 21053 ;; Parameters:    Size  Location     Type
 21054 ;;  dividend        2    0[COMRAM] unsigned int 
 21055 ;;  divisor         2    2[COMRAM] unsigned int 
 21056 ;; Auto vars:     Size  Location     Type
 21057 ;;  __lwmod         1    4[COMRAM] unsigned char 
 21058 ;; Return value:  Size  Location     Type
 21059 ;;                  2    0[COMRAM] unsigned int 
 21060 ;; Registers used:
 21061 ;;		wreg, status,2, status,0
 21062 ;; Tracked objects:
 21063 ;;		On entry : 0/0
 21064 ;;		On exit  : 0/0
 21065 ;;		Unchanged: 0/0
 21066 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21067 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21068 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21069 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21070 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21071 ;;Total ram usage:        5 bytes
 21072 ;; Hardware stack levels used:    1
 21073 ;; This function calls:
 21074 ;;		Nothing
 21075 ;; This function is called by:
 21076 ;;		_printSortTimer
 21077 ;;		i2_printf
 21078 ;; This function uses a non-reentrant model
 21079 ;;
 21080                           
 21081                           	psect	text83
 21082  004556                     __ptext83:
 21083                           	opt stack 0
 21084  004556                     i2___lwmod:
 21085                           	opt stack 20
 21086                           
 21087                           ;incstack = 0
 21088  004556  5003               	movf	i2___lwmod@divisor,w,c
 21089  004558  1004               	iorwf	i2___lwmod@divisor+1,w,c
 21090  00455A  B4D8               	btfsc	status,2,c
 21091  00455C  D018               	goto	i2l1777
 21092  00455E  0E01               	movlw	1
 21093  004560  6E05               	movwf	i2___lwmod@counter,c
 21094  004562  D004               	goto	i2l5640
 21095  004564                     i2l5638:
 21096  004564  90D8               	bcf	status,0,c
 21097  004566  3603               	rlcf	i2___lwmod@divisor,f,c
 21098  004568  3604               	rlcf	i2___lwmod@divisor+1,f,c
 21099  00456A  2A05               	incf	i2___lwmod@counter,f,c
 21100  00456C                     i2l5640:
 21101  00456C  AE04               	btfss	i2___lwmod@divisor+1,7,c
 21102  00456E  D7FA               	goto	i2l5638
 21103  004570                     i2l5642:
 21104  004570  5003               	movf	i2___lwmod@divisor,w,c
 21105  004572  5C01               	subwf	i2___lwmod@dividend,w,c
 21106  004574  5004               	movf	i2___lwmod@divisor+1,w,c
 21107  004576  5802               	subwfb	i2___lwmod@dividend+1,w,c
 21108  004578  A0D8               	btfss	status,0,c
 21109  00457A  D004               	goto	i2l5646
 21110  00457C  5003               	movf	i2___lwmod@divisor,w,c
 21111  00457E  5E01               	subwf	i2___lwmod@dividend,f,c
 21112  004580  5004               	movf	i2___lwmod@divisor+1,w,c
 21113  004582  5A02               	subwfb	i2___lwmod@dividend+1,f,c
 21114  004584                     i2l5646:
 21115  004584  90D8               	bcf	status,0,c
 21116  004586  3204               	rrcf	i2___lwmod@divisor+1,f,c
 21117  004588  3203               	rrcf	i2___lwmod@divisor,f,c
 21118  00458A  2E05               	decfsz	i2___lwmod@counter,f,c
 21119  00458C  D7F1               	goto	i2l5642
 21120  00458E                     i2l1777:
 21121  00458E  C001  F001         	movff	i2___lwmod@dividend,?i2___lwmod
 21122  004592  C002  F002         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
 21123  004596  0012               	return		;funcret
 21124  004598                     __end_ofi2___lwmod:
 21125                           	opt stack 0
 21126                           pclatu	equ	0xFFB
 21127                           pclath	equ	0xFFA
 21128                           tblptru	equ	0xFF8
 21129                           tblptrh	equ	0xFF7
 21130                           tblptrl	equ	0xFF6
 21131                           tablat	equ	0xFF5
 21132                           prodh	equ	0xFF4
 21133                           prodl	equ	0xFF3
 21134                           intcon	equ	0xFF2
 21135                           intcon2	equ	0xFF1
 21136                           intcon3	equ	0xFF0
 21137                           indf0	equ	0xFEF
 21138                           postinc0	equ	0xFEE
 21139                           fsr0h	equ	0xFEA
 21140                           fsr0l	equ	0xFE9
 21141                           wreg	equ	0xFE8
 21142                           postdec1	equ	0xFE5
 21143                           fsr1h	equ	0xFE2
 21144                           fsr1l	equ	0xFE1
 21145                           indf2	equ	0xFDF
 21146                           postinc2	equ	0xFDE
 21147                           postdec2	equ	0xFDD
 21148                           fsr2h	equ	0xFDA
 21149                           fsr2l	equ	0xFD9
 21150                           status	equ	0xFD8
 21151                           
 21152 ;; *************** function i2___lwdiv *****************
 21153 ;; Defined at:
 21154 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 21155 ;; Parameters:    Size  Location     Type
 21156 ;;  dividend        2    5[COMRAM] unsigned int 
 21157 ;;  divisor         2    7[COMRAM] unsigned int 
 21158 ;; Auto vars:     Size  Location     Type
 21159 ;;  __lwdiv         2    9[COMRAM] unsigned int 
 21160 ;;  __lwdiv         1   11[COMRAM] unsigned char 
 21161 ;; Return value:  Size  Location     Type
 21162 ;;                  2    5[COMRAM] unsigned int 
 21163 ;; Registers used:
 21164 ;;		wreg, status,2, status,0
 21165 ;; Tracked objects:
 21166 ;;		On entry : 0/0
 21167 ;;		On exit  : 0/0
 21168 ;;		Unchanged: 0/0
 21169 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21170 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21171 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21172 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21173 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21174 ;;Total ram usage:        7 bytes
 21175 ;; Hardware stack levels used:    1
 21176 ;; This function calls:
 21177 ;;		Nothing
 21178 ;; This function is called by:
 21179 ;;		_printSortTimer
 21180 ;;		i2_printf
 21181 ;; This function uses a non-reentrant model
 21182 ;;
 21183                           
 21184                           	psect	text84
 21185  0043D8                     __ptext84:
 21186                           	opt stack 0
 21187  0043D8                     i2___lwdiv:
 21188                           	opt stack 20
 21189                           
 21190                           ;incstack = 0
 21191  0043D8  0E00               	movlw	0
 21192  0043DA  6E0B               	movwf	i2___lwdiv@quotient+1,c
 21193  0043DC  0E00               	movlw	0
 21194  0043DE  6E0A               	movwf	i2___lwdiv@quotient,c
 21195  0043E0  5008               	movf	i2___lwdiv@divisor,w,c
 21196  0043E2  1009               	iorwf	i2___lwdiv@divisor+1,w,c
 21197  0043E4  B4D8               	btfsc	status,2,c
 21198  0043E6  D01C               	goto	i2l1767
 21199  0043E8  0E01               	movlw	1
 21200  0043EA  6E0C               	movwf	i2___lwdiv@counter,c
 21201  0043EC  D004               	goto	i2l5620
 21202  0043EE                     i2l5618:
 21203  0043EE  90D8               	bcf	status,0,c
 21204  0043F0  3608               	rlcf	i2___lwdiv@divisor,f,c
 21205  0043F2  3609               	rlcf	i2___lwdiv@divisor+1,f,c
 21206  0043F4  2A0C               	incf	i2___lwdiv@counter,f,c
 21207  0043F6                     i2l5620:
 21208  0043F6  AE09               	btfss	i2___lwdiv@divisor+1,7,c
 21209  0043F8  D7FA               	goto	i2l5618
 21210  0043FA                     i2l5622:
 21211  0043FA  90D8               	bcf	status,0,c
 21212  0043FC  360A               	rlcf	i2___lwdiv@quotient,f,c
 21213  0043FE  360B               	rlcf	i2___lwdiv@quotient+1,f,c
 21214  004400  5008               	movf	i2___lwdiv@divisor,w,c
 21215  004402  5C06               	subwf	i2___lwdiv@dividend,w,c
 21216  004404  5009               	movf	i2___lwdiv@divisor+1,w,c
 21217  004406  5807               	subwfb	i2___lwdiv@dividend+1,w,c
 21218  004408  A0D8               	btfss	status,0,c
 21219  00440A  D005               	goto	i2l5630
 21220  00440C  5008               	movf	i2___lwdiv@divisor,w,c
 21221  00440E  5E06               	subwf	i2___lwdiv@dividend,f,c
 21222  004410  5009               	movf	i2___lwdiv@divisor+1,w,c
 21223  004412  5A07               	subwfb	i2___lwdiv@dividend+1,f,c
 21224  004414  800A               	bsf	i2___lwdiv@quotient,0,c
 21225  004416                     i2l5630:
 21226  004416  90D8               	bcf	status,0,c
 21227  004418  3209               	rrcf	i2___lwdiv@divisor+1,f,c
 21228  00441A  3208               	rrcf	i2___lwdiv@divisor,f,c
 21229  00441C  2E0C               	decfsz	i2___lwdiv@counter,f,c
 21230  00441E  D7ED               	goto	i2l5622
 21231  004420                     i2l1767:
 21232  004420  C00A  F006         	movff	i2___lwdiv@quotient,?i2___lwdiv
 21233  004424  C00B  F007         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
 21234  004428  0012               	return		;funcret
 21235  00442A                     __end_ofi2___lwdiv:
 21236                           	opt stack 0
 21237                           pclatu	equ	0xFFB
 21238                           pclath	equ	0xFFA
 21239                           tblptru	equ	0xFF8
 21240                           tblptrh	equ	0xFF7
 21241                           tblptrl	equ	0xFF6
 21242                           tablat	equ	0xFF5
 21243                           prodh	equ	0xFF4
 21244                           prodl	equ	0xFF3
 21245                           intcon	equ	0xFF2
 21246                           intcon2	equ	0xFF1
 21247                           intcon3	equ	0xFF0
 21248                           indf0	equ	0xFEF
 21249                           postinc0	equ	0xFEE
 21250                           fsr0h	equ	0xFEA
 21251                           fsr0l	equ	0xFE9
 21252                           wreg	equ	0xFE8
 21253                           postdec1	equ	0xFE5
 21254                           fsr1h	equ	0xFE2
 21255                           fsr1l	equ	0xFE1
 21256                           indf2	equ	0xFDF
 21257                           postinc2	equ	0xFDE
 21258                           postdec2	equ	0xFDD
 21259                           fsr2h	equ	0xFDA
 21260                           fsr2l	equ	0xFD9
 21261                           status	equ	0xFD8
 21262                           
 21263 ;; *************** function i2_lcdInst *****************
 21264 ;; Defined at:
 21265 ;;		line 15 in file "lcd.c"
 21266 ;; Parameters:    Size  Location     Type
 21267 ;;  data            1    wreg     unsigned char 
 21268 ;; Auto vars:     Size  Location     Type
 21269 ;;  data            1    2[COMRAM] unsigned char 
 21270 ;; Return value:  Size  Location     Type
 21271 ;;                  1    wreg      void 
 21272 ;; Registers used:
 21273 ;;		wreg, status,2, status,0, cstack
 21274 ;; Tracked objects:
 21275 ;;		On entry : 0/0
 21276 ;;		On exit  : 0/0
 21277 ;;		Unchanged: 0/0
 21278 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21279 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21280 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21281 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21282 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21283 ;;Total ram usage:        1 bytes
 21284 ;; Hardware stack levels used:    1
 21285 ;; Hardware stack levels required when called:    1
 21286 ;; This function calls:
 21287 ;;		i2_lcdNibble
 21288 ;; This function is called by:
 21289 ;;		_change_state_to_menu_11
 21290 ;;		_change_state_to_menu_23
 21291 ;;		_change_state_to_logs_11
 21292 ;;		_change_state_to_logs_12
 21293 ;;		_change_state_to_logs_22
 21294 ;;		_change_state_to_logs_23
 21295 ;;		_change_state_to_logs_33
 21296 ;;		_change_state_to_logs_34
 21297 ;;		_printSortTimer
 21298 ;;		i2_change_state_to_menu_start
 21299 ;;		i2_change_state_to_menu_12
 21300 ;;		i2_change_state_to_menu_22
 21301 ;;		i2_printRTC
 21302 ;; This function uses a non-reentrant model
 21303 ;;
 21304                           
 21305                           	psect	text85
 21306  004B4C                     __ptext85:
 21307                           	opt stack 0
 21308  004B4C                     i2_lcdInst:
 21309                           	opt stack 19
 21310                           
 21311                           ;incstack = 0
 21312                           ;i2lcdInst@data stored from wreg
 21313  004B4C  6E03               	movwf	i2lcdInst@data,c
 21314                           
 21315                           ;lcd.c: 16: LATDbits.LATD2 = 0;
 21316  004B4E  948C               	bcf	3980,2,c	;volatile
 21317                           
 21318                           ;lcd.c: 17: lcdNibble(data);
 21319  004B50  5003               	movf	i2lcdInst@data,w,c
 21320  004B52  ECC1  F021         	call	i2_lcdNibble
 21321  004B56  0012               	return		;funcret
 21322  004B58                     __end_ofi2_lcdInst:
 21323                           	opt stack 0
 21324                           pclatu	equ	0xFFB
 21325                           pclath	equ	0xFFA
 21326                           tblptru	equ	0xFF8
 21327                           tblptrh	equ	0xFF7
 21328                           tblptrl	equ	0xFF6
 21329                           tablat	equ	0xFF5
 21330                           prodh	equ	0xFF4
 21331                           prodl	equ	0xFF3
 21332                           intcon	equ	0xFF2
 21333                           intcon2	equ	0xFF1
 21334                           intcon3	equ	0xFF0
 21335                           indf0	equ	0xFEF
 21336                           postinc0	equ	0xFEE
 21337                           fsr0h	equ	0xFEA
 21338                           fsr0l	equ	0xFE9
 21339                           wreg	equ	0xFE8
 21340                           postdec1	equ	0xFE5
 21341                           fsr1h	equ	0xFE2
 21342                           fsr1l	equ	0xFE1
 21343                           indf2	equ	0xFDF
 21344                           postinc2	equ	0xFDE
 21345                           postdec2	equ	0xFDD
 21346                           fsr2h	equ	0xFDA
 21347                           fsr2l	equ	0xFD9
 21348                           status	equ	0xFD8
 21349                           
 21350 ;; *************** function i2_lcdNibble *****************
 21351 ;; Defined at:
 21352 ;;		line 25 in file "lcd.c"
 21353 ;; Parameters:    Size  Location     Type
 21354 ;;  data            1    wreg     unsigned char 
 21355 ;; Auto vars:     Size  Location     Type
 21356 ;;  data            1    1[COMRAM] unsigned char 
 21357 ;;  lcdNibble       1    0[COMRAM] unsigned char 
 21358 ;; Return value:  Size  Location     Type
 21359 ;;                  1    wreg      void 
 21360 ;; Registers used:
 21361 ;;		wreg, status,2, status,0
 21362 ;; Tracked objects:
 21363 ;;		On entry : 0/0
 21364 ;;		On exit  : 0/0
 21365 ;;		Unchanged: 0/0
 21366 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21367 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21368 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21369 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21370 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21371 ;;Total ram usage:        2 bytes
 21372 ;; Hardware stack levels used:    1
 21373 ;; This function calls:
 21374 ;;		Nothing
 21375 ;; This function is called by:
 21376 ;;		i2_lcdInst
 21377 ;;		i2_putch
 21378 ;; This function uses a non-reentrant model
 21379 ;;
 21380                           
 21381                           	psect	text86
 21382  004382                     __ptext86:
 21383                           	opt stack 0
 21384  004382                     i2_lcdNibble:
 21385                           	opt stack 19
 21386                           
 21387                           ;incstack = 0
 21388                           ;i2lcdNibble@data stored from wreg
 21389  004382  6E02               	movwf	i2lcdNibble@data,c
 21390                           
 21391                           ;lcd.c: 27: char temp = data & 0xF0;
 21392  004384  5002               	movf	i2lcdNibble@data,w,c
 21393  004386  0BF0               	andlw	240
 21394  004388  6E01               	movwf	i2lcdNibble@temp,c
 21395                           
 21396                           ;lcd.c: 28: LATD = LATD & 0x0F;
 21397  00438A  508C               	movf	3980,w,c	;volatile
 21398  00438C  0B0F               	andlw	15
 21399  00438E  6E8C               	movwf	3980,c	;volatile
 21400                           
 21401                           ;lcd.c: 29: LATD = temp | LATD;
 21402  004390  5001               	movf	i2lcdNibble@temp,w,c
 21403  004392  108C               	iorwf	3980,w,c	;volatile
 21404  004394  6E8C               	movwf	3980,c	;volatile
 21405                           
 21406                           ;lcd.c: 31: LATDbits.LATD3 = 1;
 21407  004396  868C               	bsf	3980,3,c	;volatile
 21408                           
 21409                           ;lcd.c: 32: _delay((unsigned long)((25)*(32000000/4000000.0)));
 21410  004398  0E42               	movlw	66
 21411  00439A                     i2u892_47:
 21412  00439A  2EE8               	decfsz	wreg,f,c
 21413  00439C  D7FE               	bra	i2u892_47
 21414  00439E  D000               	nop2	
 21415                           
 21416                           ;lcd.c: 33: LATDbits.LATD3 = 0;
 21417  0043A0  968C               	bcf	3980,3,c	;volatile
 21418                           
 21419                           ;lcd.c: 34: _delay((unsigned long)((25)*(32000000/4000000.0)));
 21420  0043A2  0E42               	movlw	66
 21421  0043A4                     i2u893_47:
 21422  0043A4  2EE8               	decfsz	wreg,f,c
 21423  0043A6  D7FE               	bra	i2u893_47
 21424  0043A8  D000               	nop2	
 21425                           
 21426                           ;lcd.c: 36: data = data << 4;
 21427  0043AA  3802               	swapf	i2lcdNibble@data,w,c
 21428  0043AC  0BF0               	andlw	240
 21429  0043AE  6E02               	movwf	i2lcdNibble@data,c
 21430                           
 21431                           ;lcd.c: 38: temp = data & 0xF0;
 21432  0043B0  5002               	movf	i2lcdNibble@data,w,c
 21433  0043B2  0BF0               	andlw	240
 21434  0043B4  6E01               	movwf	i2lcdNibble@temp,c
 21435                           
 21436                           ;lcd.c: 39: LATD = LATD & 0x0F;
 21437  0043B6  508C               	movf	3980,w,c	;volatile
 21438  0043B8  0B0F               	andlw	15
 21439  0043BA  6E8C               	movwf	3980,c	;volatile
 21440                           
 21441                           ;lcd.c: 40: LATD = temp | LATD;
 21442  0043BC  5001               	movf	i2lcdNibble@temp,w,c
 21443  0043BE  108C               	iorwf	3980,w,c	;volatile
 21444  0043C0  6E8C               	movwf	3980,c	;volatile
 21445                           
 21446                           ;lcd.c: 42: LATDbits.LATD3 = 1;
 21447  0043C2  868C               	bsf	3980,3,c	;volatile
 21448                           
 21449                           ;lcd.c: 43: _delay((unsigned long)((25)*(32000000/4000000.0)));
 21450  0043C4  0E42               	movlw	66
 21451  0043C6                     i2u894_47:
 21452  0043C6  2EE8               	decfsz	wreg,f,c
 21453  0043C8  D7FE               	bra	i2u894_47
 21454  0043CA  D000               	nop2	
 21455                           
 21456                           ;lcd.c: 44: LATDbits.LATD3 = 0;
 21457  0043CC  968C               	bcf	3980,3,c	;volatile
 21458                           
 21459                           ;lcd.c: 45: _delay((unsigned long)((25)*(32000000/4000000.0)));
 21460  0043CE  0E42               	movlw	66
 21461  0043D0                     i2u895_47:
 21462  0043D0  2EE8               	decfsz	wreg,f,c
 21463  0043D2  D7FE               	bra	i2u895_47
 21464  0043D4  D000               	nop2	
 21465  0043D6  0012               	return		;funcret
 21466  0043D8                     __end_ofi2_lcdNibble:
 21467                           	opt stack 0
 21468                           pclatu	equ	0xFFB
 21469                           pclath	equ	0xFFA
 21470                           tblptru	equ	0xFF8
 21471                           tblptrh	equ	0xFF7
 21472                           tblptrl	equ	0xFF6
 21473                           tablat	equ	0xFF5
 21474                           prodh	equ	0xFF4
 21475                           prodl	equ	0xFF3
 21476                           intcon	equ	0xFF2
 21477                           intcon2	equ	0xFF1
 21478                           intcon3	equ	0xFF0
 21479                           indf0	equ	0xFEF
 21480                           postinc0	equ	0xFEE
 21481                           fsr0h	equ	0xFEA
 21482                           fsr0l	equ	0xFE9
 21483                           wreg	equ	0xFE8
 21484                           postdec1	equ	0xFE5
 21485                           fsr1h	equ	0xFE2
 21486                           fsr1l	equ	0xFE1
 21487                           indf2	equ	0xFDF
 21488                           postinc2	equ	0xFDE
 21489                           postdec2	equ	0xFDD
 21490                           fsr2h	equ	0xFDA
 21491                           fsr2l	equ	0xFD9
 21492                           status	equ	0xFD8
 21493                           
 21494 ;; *************** function i2_getRTC *****************
 21495 ;; Defined at:
 21496 ;;		line 44 in file "RTC.c"
 21497 ;; Parameters:    Size  Location     Type
 21498 ;;		None
 21499 ;; Auto vars:     Size  Location     Type
 21500 ;;  getRTC          2    3[COMRAM] int 
 21501 ;; Return value:  Size  Location     Type
 21502 ;;                  1    wreg      void 
 21503 ;; Registers used:
 21504 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 21505 ;; Tracked objects:
 21506 ;;		On entry : 0/0
 21507 ;;		On exit  : 0/0
 21508 ;;		Unchanged: 0/0
 21509 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21510 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21511 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21512 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21513 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21514 ;;Total ram usage:        2 bytes
 21515 ;; Hardware stack levels used:    1
 21516 ;; Hardware stack levels required when called:    2
 21517 ;; This function calls:
 21518 ;;		i2_I2C_Master_Read
 21519 ;;		i2_I2C_Master_Start
 21520 ;;		i2_I2C_Master_Stop
 21521 ;;		i2_I2C_Master_Write
 21522 ;; This function is called by:
 21523 ;;		_printSortTimer
 21524 ;;		i2_printRTC
 21525 ;; This function uses a non-reentrant model
 21526 ;;
 21527                           
 21528                           	psect	text87
 21529  004066                     __ptext87:
 21530                           	opt stack 0
 21531  004066                     i2_getRTC:
 21532                           	opt stack 18
 21533                           
 21534                           ;RTC.c: 48: I2C_Master_Start();
 21535                           
 21536                           ;incstack = 0
 21537  004066  ECC6  F025         	call	i2_I2C_Master_Start	;wreg free
 21538                           
 21539                           ;RTC.c: 49: I2C_Master_Write(0b11010000);
 21540  00406A  0E00               	movlw	0
 21541  00406C  6E03               	movwf	i2I2C_Master_Write@d+1,c
 21542  00406E  0ED0               	movlw	208
 21543  004070  6E02               	movwf	i2I2C_Master_Write@d,c
 21544  004072  ECB1  F025         	call	i2_I2C_Master_Write	;wreg free
 21545                           
 21546                           ;RTC.c: 50: I2C_Master_Write(0x00);
 21547  004076  0E00               	movlw	0
 21548  004078  6E03               	movwf	i2I2C_Master_Write@d+1,c
 21549  00407A  0E00               	movlw	0
 21550  00407C  6E02               	movwf	i2I2C_Master_Write@d,c
 21551  00407E  ECB1  F025         	call	i2_I2C_Master_Write	;wreg free
 21552                           
 21553                           ;RTC.c: 51: I2C_Master_Stop();
 21554  004082  ECC2  F025         	call	i2_I2C_Master_Stop	;wreg free
 21555                           
 21556                           ;RTC.c: 54: I2C_Master_Start();
 21557  004086  ECC6  F025         	call	i2_I2C_Master_Start	;wreg free
 21558                           
 21559                           ;RTC.c: 55: I2C_Master_Write(0b11010001);
 21560  00408A  0E00               	movlw	0
 21561  00408C  6E03               	movwf	i2I2C_Master_Write@d+1,c
 21562  00408E  0ED1               	movlw	209
 21563  004090  6E02               	movwf	i2I2C_Master_Write@d,c
 21564  004092  ECB1  F025         	call	i2_I2C_Master_Write	;wreg free
 21565                           
 21566                           ;RTC.c: 56: for(int i = 0; i < 6; i++){
 21567  004096  0E00               	movlw	0
 21568  004098  6E05               	movwf	i2getRTC@i+1,c
 21569  00409A  0E00               	movlw	0
 21570  00409C  6E04               	movwf	i2getRTC@i,c
 21571  00409E                     i2l5876:
 21572  00409E  BE05               	btfsc	i2getRTC@i+1,7,c
 21573  0040A0  D006               	goto	i2l5880
 21574  0040A2  5005               	movf	i2getRTC@i+1,w,c
 21575  0040A4  E111               	bnz	i2l5886
 21576  0040A6  0E06               	movlw	6
 21577  0040A8  5C04               	subwf	i2getRTC@i,w,c
 21578  0040AA  B0D8               	btfsc	status,0,c
 21579  0040AC  D00D               	goto	i2l5886
 21580  0040AE                     i2l5880:
 21581                           
 21582                           ;RTC.c: 57: time[i] = I2C_Master_Read(1);
 21583  0040AE  0E24               	movlw	low _time
 21584  0040B0  2404               	addwf	i2getRTC@i,w,c
 21585  0040B2  6ED9               	movwf	fsr2l,c
 21586  0040B4  0E01               	movlw	high _time
 21587  0040B6  2005               	addwfc	i2getRTC@i+1,w,c
 21588  0040B8  6EDA               	movwf	fsr2h,c
 21589  0040BA  0E01               	movlw	1
 21590  0040BC  EC05  F025         	call	i2_I2C_Master_Read
 21591  0040C0  6EDF               	movwf	indf2,c
 21592  0040C2  4A04               	infsnz	i2getRTC@i,f,c
 21593  0040C4  2A05               	incf	i2getRTC@i+1,f,c
 21594  0040C6  D7EB               	goto	i2l5876
 21595  0040C8                     i2l5886:
 21596                           
 21597                           ;RTC.c: 58: }
 21598                           ;RTC.c: 59: time[6] = I2C_Master_Read(0);
 21599  0040C8  0E00               	movlw	0
 21600  0040CA  EC05  F025         	call	i2_I2C_Master_Read
 21601  0040CE  0101               	movlb	1	; () banked
 21602  0040D0  6F2A               	movwf	(_time+6)& (0+255),b
 21603                           
 21604                           ;RTC.c: 60: I2C_Master_Stop();
 21605  0040D2  ECC2  F025         	call	i2_I2C_Master_Stop	;wreg free
 21606  0040D6  0012               	return		;funcret
 21607  0040D8                     __end_ofi2_getRTC:
 21608                           	opt stack 0
 21609                           pclatu	equ	0xFFB
 21610                           pclath	equ	0xFFA
 21611                           tblptru	equ	0xFF8
 21612                           tblptrh	equ	0xFF7
 21613                           tblptrl	equ	0xFF6
 21614                           tablat	equ	0xFF5
 21615                           prodh	equ	0xFF4
 21616                           prodl	equ	0xFF3
 21617                           intcon	equ	0xFF2
 21618                           intcon2	equ	0xFF1
 21619                           intcon3	equ	0xFF0
 21620                           indf0	equ	0xFEF
 21621                           postinc0	equ	0xFEE
 21622                           fsr0h	equ	0xFEA
 21623                           fsr0l	equ	0xFE9
 21624                           wreg	equ	0xFE8
 21625                           postdec1	equ	0xFE5
 21626                           fsr1h	equ	0xFE2
 21627                           fsr1l	equ	0xFE1
 21628                           indf2	equ	0xFDF
 21629                           postinc2	equ	0xFDE
 21630                           postdec2	equ	0xFDD
 21631                           fsr2h	equ	0xFDA
 21632                           fsr2l	equ	0xFD9
 21633                           status	equ	0xFD8
 21634                           
 21635 ;; *************** function i2_I2C_Master_Write *****************
 21636 ;; Defined at:
 21637 ;;		line 49 in file "I2C.c"
 21638 ;; Parameters:    Size  Location     Type
 21639 ;;  d               2    1[COMRAM] unsigned int 
 21640 ;; Auto vars:     Size  Location     Type
 21641 ;;		None
 21642 ;; Return value:  Size  Location     Type
 21643 ;;                  1    wreg      void 
 21644 ;; Registers used:
 21645 ;;		wreg, status,2, status,0, cstack
 21646 ;; Tracked objects:
 21647 ;;		On entry : 0/0
 21648 ;;		On exit  : 0/0
 21649 ;;		Unchanged: 0/0
 21650 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21651 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21652 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21653 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21654 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21655 ;;Total ram usage:        2 bytes
 21656 ;; Hardware stack levels used:    1
 21657 ;; Hardware stack levels required when called:    1
 21658 ;; This function calls:
 21659 ;;		i2_I2C_Master_Wait
 21660 ;; This function is called by:
 21661 ;;		i2_getRTC
 21662 ;; This function uses a non-reentrant model
 21663 ;;
 21664                           
 21665                           	psect	text88
 21666  004B62                     __ptext88:
 21667                           	opt stack 0
 21668  004B62                     i2_I2C_Master_Write:
 21669                           	opt stack 18
 21670                           
 21671                           ;I2C.c: 51: I2C_Master_Wait();
 21672                           
 21673                           ;incstack = 0
 21674  004B62  EC87  F025         	call	i2_I2C_Master_Wait	;wreg free
 21675                           
 21676                           ;I2C.c: 52: SSPBUF = d;
 21677  004B66  C002  FFC9         	movff	i2I2C_Master_Write@d,4041	;volatile
 21678  004B6A  0012               	return		;funcret
 21679  004B6C                     __end_ofi2_I2C_Master_Write:
 21680                           	opt stack 0
 21681                           pclatu	equ	0xFFB
 21682                           pclath	equ	0xFFA
 21683                           tblptru	equ	0xFF8
 21684                           tblptrh	equ	0xFF7
 21685                           tblptrl	equ	0xFF6
 21686                           tablat	equ	0xFF5
 21687                           prodh	equ	0xFF4
 21688                           prodl	equ	0xFF3
 21689                           intcon	equ	0xFF2
 21690                           intcon2	equ	0xFF1
 21691                           intcon3	equ	0xFF0
 21692                           indf0	equ	0xFEF
 21693                           postinc0	equ	0xFEE
 21694                           fsr0h	equ	0xFEA
 21695                           fsr0l	equ	0xFE9
 21696                           wreg	equ	0xFE8
 21697                           postdec1	equ	0xFE5
 21698                           fsr1h	equ	0xFE2
 21699                           fsr1l	equ	0xFE1
 21700                           indf2	equ	0xFDF
 21701                           postinc2	equ	0xFDE
 21702                           postdec2	equ	0xFDD
 21703                           fsr2h	equ	0xFDA
 21704                           fsr2l	equ	0xFD9
 21705                           status	equ	0xFD8
 21706                           
 21707 ;; *************** function i2_I2C_Master_Stop *****************
 21708 ;; Defined at:
 21709 ;;		line 43 in file "I2C.c"
 21710 ;; Parameters:    Size  Location     Type
 21711 ;;		None
 21712 ;; Auto vars:     Size  Location     Type
 21713 ;;		None
 21714 ;; Return value:  Size  Location     Type
 21715 ;;                  1    wreg      void 
 21716 ;; Registers used:
 21717 ;;		wreg, status,2, status,0, cstack
 21718 ;; Tracked objects:
 21719 ;;		On entry : 0/0
 21720 ;;		On exit  : 0/0
 21721 ;;		Unchanged: 0/0
 21722 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21723 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21724 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21725 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21726 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21727 ;;Total ram usage:        0 bytes
 21728 ;; Hardware stack levels used:    1
 21729 ;; Hardware stack levels required when called:    1
 21730 ;; This function calls:
 21731 ;;		i2_I2C_Master_Wait
 21732 ;; This function is called by:
 21733 ;;		i2_getRTC
 21734 ;; This function uses a non-reentrant model
 21735 ;;
 21736                           
 21737                           	psect	text89
 21738  004B84                     __ptext89:
 21739                           	opt stack 0
 21740  004B84                     i2_I2C_Master_Stop:
 21741                           	opt stack 18
 21742                           
 21743                           ;I2C.c: 45: I2C_Master_Wait();
 21744                           
 21745                           ;incstack = 0
 21746  004B84  EC87  F025         	call	i2_I2C_Master_Wait	;wreg free
 21747                           
 21748                           ;I2C.c: 46: PEN = 1;
 21749  004B88  84C5               	bsf	4037,2,c	;volatile
 21750  004B8A  0012               	return		;funcret
 21751  004B8C                     __end_ofi2_I2C_Master_Stop:
 21752                           	opt stack 0
 21753                           pclatu	equ	0xFFB
 21754                           pclath	equ	0xFFA
 21755                           tblptru	equ	0xFF8
 21756                           tblptrh	equ	0xFF7
 21757                           tblptrl	equ	0xFF6
 21758                           tablat	equ	0xFF5
 21759                           prodh	equ	0xFF4
 21760                           prodl	equ	0xFF3
 21761                           intcon	equ	0xFF2
 21762                           intcon2	equ	0xFF1
 21763                           intcon3	equ	0xFF0
 21764                           indf0	equ	0xFEF
 21765                           postinc0	equ	0xFEE
 21766                           fsr0h	equ	0xFEA
 21767                           fsr0l	equ	0xFE9
 21768                           wreg	equ	0xFE8
 21769                           postdec1	equ	0xFE5
 21770                           fsr1h	equ	0xFE2
 21771                           fsr1l	equ	0xFE1
 21772                           indf2	equ	0xFDF
 21773                           postinc2	equ	0xFDE
 21774                           postdec2	equ	0xFDD
 21775                           fsr2h	equ	0xFDA
 21776                           fsr2l	equ	0xFD9
 21777                           status	equ	0xFD8
 21778                           
 21779 ;; *************** function i2_I2C_Master_Start *****************
 21780 ;; Defined at:
 21781 ;;		line 31 in file "I2C.c"
 21782 ;; Parameters:    Size  Location     Type
 21783 ;;		None
 21784 ;; Auto vars:     Size  Location     Type
 21785 ;;		None
 21786 ;; Return value:  Size  Location     Type
 21787 ;;                  1    wreg      void 
 21788 ;; Registers used:
 21789 ;;		wreg, status,2, status,0, cstack
 21790 ;; Tracked objects:
 21791 ;;		On entry : 0/0
 21792 ;;		On exit  : 0/0
 21793 ;;		Unchanged: 0/0
 21794 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21795 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21796 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21797 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21798 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21799 ;;Total ram usage:        0 bytes
 21800 ;; Hardware stack levels used:    1
 21801 ;; Hardware stack levels required when called:    1
 21802 ;; This function calls:
 21803 ;;		i2_I2C_Master_Wait
 21804 ;; This function is called by:
 21805 ;;		i2_getRTC
 21806 ;; This function uses a non-reentrant model
 21807 ;;
 21808                           
 21809                           	psect	text90
 21810  004B8C                     __ptext90:
 21811                           	opt stack 0
 21812  004B8C                     i2_I2C_Master_Start:
 21813                           	opt stack 18
 21814                           
 21815                           ;I2C.c: 33: I2C_Master_Wait();
 21816                           
 21817                           ;incstack = 0
 21818  004B8C  EC87  F025         	call	i2_I2C_Master_Wait	;wreg free
 21819                           
 21820                           ;I2C.c: 34: SEN = 1;
 21821  004B90  80C5               	bsf	4037,0,c	;volatile
 21822  004B92  0012               	return		;funcret
 21823  004B94                     __end_ofi2_I2C_Master_Start:
 21824                           	opt stack 0
 21825                           pclatu	equ	0xFFB
 21826                           pclath	equ	0xFFA
 21827                           tblptru	equ	0xFF8
 21828                           tblptrh	equ	0xFF7
 21829                           tblptrl	equ	0xFF6
 21830                           tablat	equ	0xFF5
 21831                           prodh	equ	0xFF4
 21832                           prodl	equ	0xFF3
 21833                           intcon	equ	0xFF2
 21834                           intcon2	equ	0xFF1
 21835                           intcon3	equ	0xFF0
 21836                           indf0	equ	0xFEF
 21837                           postinc0	equ	0xFEE
 21838                           fsr0h	equ	0xFEA
 21839                           fsr0l	equ	0xFE9
 21840                           wreg	equ	0xFE8
 21841                           postdec1	equ	0xFE5
 21842                           fsr1h	equ	0xFE2
 21843                           fsr1l	equ	0xFE1
 21844                           indf2	equ	0xFDF
 21845                           postinc2	equ	0xFDE
 21846                           postdec2	equ	0xFDD
 21847                           fsr2h	equ	0xFDA
 21848                           fsr2l	equ	0xFD9
 21849                           status	equ	0xFD8
 21850                           
 21851 ;; *************** function i2_I2C_Master_Read *****************
 21852 ;; Defined at:
 21853 ;;		line 55 in file "I2C.c"
 21854 ;; Parameters:    Size  Location     Type
 21855 ;;  a               1    wreg     unsigned char 
 21856 ;; Auto vars:     Size  Location     Type
 21857 ;;  a               1    1[COMRAM] unsigned char 
 21858 ;;  I2C_Master_R    1    2[COMRAM] unsigned char 
 21859 ;; Return value:  Size  Location     Type
 21860 ;;                  1    wreg      unsigned char 
 21861 ;; Registers used:
 21862 ;;		wreg, status,2, status,0, cstack
 21863 ;; Tracked objects:
 21864 ;;		On entry : 0/0
 21865 ;;		On exit  : 0/0
 21866 ;;		Unchanged: 0/0
 21867 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21868 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21869 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21870 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21871 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21872 ;;Total ram usage:        2 bytes
 21873 ;; Hardware stack levels used:    1
 21874 ;; Hardware stack levels required when called:    1
 21875 ;; This function calls:
 21876 ;;		i2_I2C_Master_Wait
 21877 ;; This function is called by:
 21878 ;;		i2_getRTC
 21879 ;; This function uses a non-reentrant model
 21880 ;;
 21881                           
 21882                           	psect	text91
 21883  004A0A                     __ptext91:
 21884                           	opt stack 0
 21885  004A0A                     i2_I2C_Master_Read:
 21886                           	opt stack 18
 21887                           
 21888                           ;incstack = 0
 21889                           ;i2I2C_Master_Read@a stored from wreg
 21890  004A0A  6E02               	movwf	i2I2C_Master_Read@a,c
 21891                           
 21892                           ;I2C.c: 57: unsigned char temp;
 21893                           ;I2C.c: 58: I2C_Master_Wait();
 21894  004A0C  EC87  F025         	call	i2_I2C_Master_Wait	;wreg free
 21895                           
 21896                           ;I2C.c: 59: RCEN = 1;
 21897  004A10  86C5               	bsf	4037,3,c	;volatile
 21898                           
 21899                           ;I2C.c: 60: I2C_Master_Wait();
 21900  004A12  EC87  F025         	call	i2_I2C_Master_Wait	;wreg free
 21901                           
 21902                           ;I2C.c: 61: temp = SSPBUF;
 21903  004A16  CFC9 F003          	movff	4041,i2I2C_Master_Read@temp	;volatile
 21904                           
 21905                           ;I2C.c: 62: I2C_Master_Wait();
 21906  004A1A  EC87  F025         	call	i2_I2C_Master_Wait	;wreg free
 21907                           
 21908                           ;I2C.c: 63: ACKDT = (a)?0:1;
 21909  004A1E  5002               	movf	i2I2C_Master_Read@a,w,c
 21910  004A20  A4D8               	btfss	status,2,c
 21911  004A22  D002               	goto	i2u394_40
 21912  004A24  8AC5               	bsf	4037,5,c	;volatile
 21913  004A26  D001               	goto	i2l5584
 21914  004A28                     i2u394_40:
 21915  004A28  9AC5               	bcf	4037,5,c	;volatile
 21916  004A2A                     i2l5584:
 21917                           
 21918                           ;I2C.c: 64: ACKEN = 1;
 21919  004A2A  88C5               	bsf	4037,4,c	;volatile
 21920                           
 21921                           ;I2C.c: 65: return temp;
 21922  004A2C  5003               	movf	i2I2C_Master_Read@temp,w,c
 21923  004A2E  0012               	return	
 21924  004A30                     __end_ofi2_I2C_Master_Read:
 21925                           	opt stack 0
 21926                           pclatu	equ	0xFFB
 21927                           pclath	equ	0xFFA
 21928                           tblptru	equ	0xFF8
 21929                           tblptrh	equ	0xFF7
 21930                           tblptrl	equ	0xFF6
 21931                           tablat	equ	0xFF5
 21932                           prodh	equ	0xFF4
 21933                           prodl	equ	0xFF3
 21934                           intcon	equ	0xFF2
 21935                           intcon2	equ	0xFF1
 21936                           intcon3	equ	0xFF0
 21937                           indf0	equ	0xFEF
 21938                           postinc0	equ	0xFEE
 21939                           fsr0h	equ	0xFEA
 21940                           fsr0l	equ	0xFE9
 21941                           wreg	equ	0xFE8
 21942                           postdec1	equ	0xFE5
 21943                           fsr1h	equ	0xFE2
 21944                           fsr1l	equ	0xFE1
 21945                           indf2	equ	0xFDF
 21946                           postinc2	equ	0xFDE
 21947                           postdec2	equ	0xFDD
 21948                           fsr2h	equ	0xFDA
 21949                           fsr2l	equ	0xFD9
 21950                           status	equ	0xFD8
 21951                           
 21952 ;; *************** function i2_I2C_Master_Wait *****************
 21953 ;; Defined at:
 21954 ;;		line 26 in file "I2C.c"
 21955 ;; Parameters:    Size  Location     Type
 21956 ;;		None
 21957 ;; Auto vars:     Size  Location     Type
 21958 ;;		None
 21959 ;; Return value:  Size  Location     Type
 21960 ;;                  1    wreg      void 
 21961 ;; Registers used:
 21962 ;;		wreg, status,2, status,0
 21963 ;; Tracked objects:
 21964 ;;		On entry : 0/0
 21965 ;;		On exit  : 0/0
 21966 ;;		Unchanged: 0/0
 21967 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21968 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21969 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21970 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21971 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21972 ;;Total ram usage:        1 bytes
 21973 ;; Hardware stack levels used:    1
 21974 ;; This function calls:
 21975 ;;		Nothing
 21976 ;; This function is called by:
 21977 ;;		i2_I2C_Master_Start
 21978 ;;		i2_I2C_Master_Stop
 21979 ;;		i2_I2C_Master_Write
 21980 ;;		i2_I2C_Master_Read
 21981 ;; This function uses a non-reentrant model
 21982 ;;
 21983                           
 21984                           	psect	text92
 21985  004B0E                     __ptext92:
 21986                           	opt stack 0
 21987  004B0E                     i2_I2C_Master_Wait:
 21988                           	opt stack 18
 21989  004B0E                     i2l66:
 21990  004B0E  B4C7               	btfsc	4039,2,c	;volatile
 21991  004B10  D7FE               	goto	i2l66
 21992  004B12  CFC5 F001          	movff	4037,??i2_I2C_Master_Wait	;volatile
 21993  004B16  0E1F               	movlw	31
 21994  004B18  1601               	andwf	??i2_I2C_Master_Wait,f,c
 21995  004B1A  B4D8               	btfsc	status,2,c
 21996  004B1C  0012               	return	
 21997  004B1E  D7F7               	goto	i2l66
 21998  004B20                     __end_ofi2_I2C_Master_Wait:
 21999                           	opt stack 0
 22000                           pclatu	equ	0xFFB
 22001                           pclath	equ	0xFFA
 22002                           tblptru	equ	0xFF8
 22003                           tblptrh	equ	0xFF7
 22004                           tblptrl	equ	0xFF6
 22005                           tablat	equ	0xFF5
 22006                           prodh	equ	0xFF4
 22007                           prodl	equ	0xFF3
 22008                           intcon	equ	0xFF2
 22009                           intcon2	equ	0xFF1
 22010                           intcon3	equ	0xFF0
 22011                           indf0	equ	0xFEF
 22012                           postinc0	equ	0xFEE
 22013                           fsr0h	equ	0xFEA
 22014                           fsr0l	equ	0xFE9
 22015                           wreg	equ	0xFE8
 22016                           postdec1	equ	0xFE5
 22017                           fsr1h	equ	0xFE2
 22018                           fsr1l	equ	0xFE1
 22019                           indf2	equ	0xFDF
 22020                           postinc2	equ	0xFDE
 22021                           postdec2	equ	0xFDD
 22022                           fsr2h	equ	0xFDA
 22023                           fsr2l	equ	0xFD9
 22024                           status	equ	0xFD8
 22025                           pclatu	equ	0xFFB
 22026                           pclath	equ	0xFFA
 22027                           tblptru	equ	0xFF8
 22028                           tblptrh	equ	0xFF7
 22029                           tblptrl	equ	0xFF6
 22030                           tablat	equ	0xFF5
 22031                           prodh	equ	0xFF4
 22032                           prodl	equ	0xFF3
 22033                           intcon	equ	0xFF2
 22034                           intcon2	equ	0xFF1
 22035                           intcon3	equ	0xFF0
 22036                           indf0	equ	0xFEF
 22037                           postinc0	equ	0xFEE
 22038                           fsr0h	equ	0xFEA
 22039                           fsr0l	equ	0xFE9
 22040                           wreg	equ	0xFE8
 22041                           postdec1	equ	0xFE5
 22042                           fsr1h	equ	0xFE2
 22043                           fsr1l	equ	0xFE1
 22044                           indf2	equ	0xFDF
 22045                           postinc2	equ	0xFDE
 22046                           postdec2	equ	0xFDD
 22047                           fsr2h	equ	0xFDA
 22048                           fsr2l	equ	0xFD9
 22049                           status	equ	0xFD8
 22050                           
 22051                           	psect	rparam
 22052  0000                     pclatu	equ	0xFFB
 22053                           pclath	equ	0xFFA
 22054                           tblptru	equ	0xFF8
 22055                           tblptrh	equ	0xFF7
 22056                           tblptrl	equ	0xFF6
 22057                           tablat	equ	0xFF5
 22058                           prodh	equ	0xFF4
 22059                           prodl	equ	0xFF3
 22060                           intcon	equ	0xFF2
 22061                           intcon2	equ	0xFF1
 22062                           intcon3	equ	0xFF0
 22063                           indf0	equ	0xFEF
 22064                           postinc0	equ	0xFEE
 22065                           fsr0h	equ	0xFEA
 22066                           fsr0l	equ	0xFE9
 22067                           wreg	equ	0xFE8
 22068                           postdec1	equ	0xFE5
 22069                           fsr1h	equ	0xFE2
 22070                           fsr1l	equ	0xFE1
 22071                           indf2	equ	0xFDF
 22072                           postinc2	equ	0xFDE
 22073                           postdec2	equ	0xFDD
 22074                           fsr2h	equ	0xFDA
 22075                           fsr2l	equ	0xFD9
 22076                           status	equ	0xFD8
 22077                           
 22078                           	psect	temp
 22079  00007E                     btemp:
 22080                           	opt stack 0
 22081  00007E                     	ds	1
 22082  0000                     int$flags	set	btemp
 22083                           pclatu	equ	0xFFB
 22084                           pclath	equ	0xFFA
 22085                           tblptru	equ	0xFF8
 22086                           tblptrh	equ	0xFF7
 22087                           tblptrl	equ	0xFF6
 22088                           tablat	equ	0xFF5
 22089                           prodh	equ	0xFF4
 22090                           prodl	equ	0xFF3
 22091                           intcon	equ	0xFF2
 22092                           intcon2	equ	0xFF1
 22093                           intcon3	equ	0xFF0
 22094                           indf0	equ	0xFEF
 22095                           postinc0	equ	0xFEE
 22096                           fsr0h	equ	0xFEA
 22097                           fsr0l	equ	0xFE9
 22098                           wreg	equ	0xFE8
 22099                           postdec1	equ	0xFE5
 22100                           fsr1h	equ	0xFE2
 22101                           fsr1l	equ	0xFE1
 22102                           indf2	equ	0xFDF
 22103                           postinc2	equ	0xFDE
 22104                           postdec2	equ	0xFDD
 22105                           fsr2h	equ	0xFDA
 22106                           fsr2l	equ	0xFD9
 22107                           status	equ	0xFD8


Data Sizes:
    Strings     1251
    Constant    27
    Data        8
    BSS         124
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     90     125
    BANK0           128     90     128
    BANK1           256      0      59
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    strcpy@from	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_62(CODE[4]), STR_61(CODE[4]), STR_60(CODE[4]), STR_59(CODE[4]), 
		 -> STR_58(CODE[4]), STR_57(CODE[4]), STR_56(CODE[4]), STR_55(CODE[4]), 
		 -> STR_54(CODE[4]), STR_53(CODE[4]), STR_52(CODE[4]), STR_51(CODE[4]), 
		 -> STR_20(CODE[4]), STR_19(CODE[4]), STR_18(CODE[4]), STR_17(CODE[4]), 
		 -> STR_16(CODE[4]), STR_15(CODE[4]), STR_14(CODE[4]), STR_13(CODE[4]), 
		 -> STR_12(CODE[4]), STR_11(CODE[4]), STR_10(CODE[4]), STR_9(CODE[4]), 
		 -> STR_8(CODE[4]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_120(CODE[7]), count_total(BANK0[2]), printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 24
		 -> STR_119(CODE[18]), STR_118(CODE[18]), STR_117(CODE[18]), STR_116(CODE[18]), 
		 -> STR_115(CODE[17]), STR_114(CODE[17]), STR_113(CODE[11]), STR_112(CODE[18]), 
		 -> STR_111(CODE[18]), STR_110(CODE[17]), STR_109(CODE[15]), STR_108(CODE[15]), 
		 -> STR_107(CODE[15]), STR_106(CODE[17]), STR_105(CODE[17]), STR_104(CODE[17]), 
		 -> STR_103(CODE[16]), STR_102(CODE[17]), STR_101(CODE[17]), STR_100(CODE[17]), 
		 -> STR_99(CODE[17]), STR_98(CODE[17]), STR_97(CODE[17]), STR_96(CODE[15]), 
		 -> STR_95(CODE[11]), STR_94(CODE[17]), STR_93(CODE[11]), STR_92(CODE[17]), 
		 -> STR_91(CODE[14]), STR_90(CODE[15]), STR_89(CODE[14]), STR_88(CODE[10]), 
		 -> STR_87(CODE[9]), STR_86(CODE[9]), STR_85(CODE[10]), STR_84(CODE[10]), 
		 -> STR_83(CODE[16]), STR_82(CODE[15]), STR_81(CODE[3]), STR_80(CODE[15]), 
		 -> STR_79(CODE[13]), STR_78(CODE[14]), STR_77(CODE[8]), STR_76(CODE[14]), 
		 -> STR_75(CODE[15]), STR_74(CODE[12]), STR_73(CODE[14]), STR_72(CODE[17]), 
		 -> STR_71(CODE[14]), STR_70(CODE[15]), STR_69(CODE[17]), STR_68(CODE[17]), 
		 -> STR_67(CODE[7]), STR_66(CODE[21]), STR_65(CODE[13]), STR_64(CODE[11]), 
		 -> STR_63(CODE[24]), STR_50(CODE[17]), STR_49(CODE[17]), STR_48(CODE[17]), 
		 -> STR_47(CODE[17]), STR_46(CODE[17]), STR_45(CODE[17]), STR_44(CODE[17]), 
		 -> STR_43(CODE[17]), STR_42(CODE[17]), STR_41(CODE[17]), STR_40(CODE[17]), 
		 -> STR_39(CODE[17]), STR_38(CODE[17]), STR_37(CODE[17]), STR_36(CODE[17]), 
		 -> STR_35(CODE[17]), STR_34(CODE[17]), STR_33(CODE[17]), STR_32(CODE[17]), 
		 -> STR_31(CODE[17]), STR_30(CODE[17]), STR_29(CODE[3]), STR_28(CODE[17]), 
		 -> STR_27(CODE[17]), STR_26(CODE[17]), STR_25(CODE[17]), STR_24(CODE[17]), 
		 -> STR_23(CODE[14]), STR_22(CODE[10]), STR_21(CODE[24]), STR_7(CODE[7]), 
		 -> STR_6(CODE[17]), STR_5(CODE[18]), STR_4(CODE[16]), STR_3(CODE[18]), 
		 -> STR_2(CODE[14]), STR_1(CODE[18]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _handler in COMRAM

    _handler->_printSortTimer
    i2_change_state_to_menu_start->i2_printRTC
    i2_printRTC->i2_printf
    i2_change_state_to_menu_22->i2_printf
    i2_change_state_to_menu_12->i2_printf
    _change_state_to_menu_23->i2_printf
    _change_state_to_menu_11->i2_printf
    _change_state_to_logs_34->i2_printf
    _change_state_to_logs_33->i2_printf
    _change_state_to_logs_23->i2_printf
    _change_state_to_logs_22->i2_printf
    _change_state_to_logs_12->i2_printf
    _change_state_to_logs_11->i2_printf
    _dispLogs->_retrieveLog
    _retrieveLog->i2___wmul
    _printSortTimer->i2_printf
    i2_printf->i2___lwdiv
    i2_putch->i2_lcdNibble
    i2___lwdiv->i2___lwmod
    i2_lcdInst->i2_lcdNibble
    i2_getRTC->i2_I2C_Master_Read
    i2_getRTC->i2_I2C_Master_Write
    i2_I2C_Master_Write->i2_I2C_Master_Wait
    i2_I2C_Master_Stop->i2_I2C_Master_Wait
    i2_I2C_Master_Start->i2_I2C_Master_Wait
    i2_I2C_Master_Read->i2_I2C_Master_Wait

Critical Paths under _main in BANK0

    _main->_UI
    _sort->_Loading
    _Loading->_EEPROM_write
    _initSortTimer->_getRTC
    _getMAG->_readMAG
    _getIR->_readIR
    _readIR->_readADC
    _ID->_delay_ms
    _Distribution->_updateServoPosition
    _logRun->_EEPROM_write
    _EEPROM_write->_printf
    _loadRTC->_I2C_Master_Init
    _I2C_Master_Init->___lldiv
    _change_state_to_menu_start->_printRTC
    _initLCD->_lcdInst
    _UI->_printRTC
    _printRTC->_printf
    _getRTC->_I2C_Master_Read
    _getRTC->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _change_state_to_menu_22->_printf
    _change_state_to_menu_12->_printf
    ___awdiv->___awmod
    _Test->_actuatorTest
    _sensorTest->_printf
    _readMAG->_readADC
    _algorithmTest->_printf
    _actuatorTest->_printf
    _SpeedTest->_printf
    _PusherTest->_printf
    _PortTestA5->_printf
    _BothServos->_printf
    _initServos->_updateServoPosition
    _BlockerTest->_printf
    _printf->___awdiv
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _lcdInst->_lcdNibble

Critical Paths under _handler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _handler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _handler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _handler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _handler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _handler in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _handler in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _handler in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _handler in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _handler in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _handler in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _handler in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _handler in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _handler in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _handler in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _handler in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  196151
                    _I2C_Master_Init
                               _Test
                                 _UI
                            _initLCD
                           _initTime
                             _initUI
                             _logRun
                      _machineConfig
                               _sort
                        _stopSignals
 ---------------------------------------------------------------------------------
 (1) _stopSignals                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _sort                                                 0     0      0   22732
                       _Distribution
                                 _ID
                            _Loading
 ---------------------------------------------------------------------------------
 (2) _Loading                                             11    11      0   17214
                                             49 BANK0     11    11      0
                        _EEPROM_read
                       _EEPROM_write
                           _delay_ms
                              _getIR
                             _getMAG
                     _initGlobalVars
                         _initServos
                      _initSortTimer
                            _lcdInst
                             _readIR
 ---------------------------------------------------------------------------------
 (3) _initSortTimer                                        5     5      0     631
                                              5 BANK0      5     5      0
                             _getRTC
 ---------------------------------------------------------------------------------
 (3) _initGlobalVars                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _getMAG                                               2     2      0      45
                                              6 BANK0      2     2      0
                            _readMAG
 ---------------------------------------------------------------------------------
 (3) _getIR                                                3     3      0      91
                                              6 BANK0      3     3      0
                             _readIR
 ---------------------------------------------------------------------------------
 (3) _readIR                                               4     4      0      45
                                              2 BANK0      4     4      0
                            _readADC
 ---------------------------------------------------------------------------------
 (2) _ID                                                   6     6      0     137
                                              2 BANK0      6     6      0
                           _delay_ms
 ---------------------------------------------------------------------------------
 (3) _delay_ms                                             2     2      0      23
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _Distribution                                         2     2      0    5381
                                              8 BANK0      2     2      0
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (1) _machineConfig                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _logRun                                              10    10      0   10978
                                             49 BANK0     10    10      0
                        _EEPROM_read
                       _EEPROM_write
 ---------------------------------------------------------------------------------
 (3) _EEPROM_write                                         6     3      3   10231
                                             43 BANK0      6     3      3
                        _EEPROM_read
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (4) _EEPROM_read                                          2     0      2     426
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _initUI                                               0     0      0   22352
         _change_state_to_menu_start
                            _loadRTC
 ---------------------------------------------------------------------------------
 (2) _loadRTC                                              3     3      0     914
                                             21 BANK0      3     3      0
                    _I2C_Master_Init
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Init                                      8     4      4     440
                                             13 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     290
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_start                           0     0      0   21438
                            _lcdInst
                           _printRTC
                             _printf
 ---------------------------------------------------------------------------------
 (1) _initTime                                             7     1      6     538
                                              0 BANK0      7     1      6
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                              3 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _UI                                                  24    24      0   44456
                                             68 BANK0     22    22      0
                            ___awdiv
                            ___awmod
            _change_state_to_menu_12
            _change_state_to_menu_22
                            _lcdInst
                           _printRTC
                             _printf
                             _strcpy
 ---------------------------------------------------------------------------------
 (3) _printRTC                                            25    25      0   12903
                                             43 BANK0     25    25      0
                             _getRTC
                            _lcdInst
                             _printf
                             _strcpy
 ---------------------------------------------------------------------------------
 (4) _strcpy                                               6     2      4    3275
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) _getRTC                                               2     2      0     519
                                              3 BANK0      2     2      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Write                                     2     0      2     406
                                              1 BANK0      2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Read                                      2     2      0      45
                                              1 BANK0      2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (6) _I2C_Master_Wait                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_22                              0     0      0    8535
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_12                              0     0      0    8535
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4    1064
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     556
                                              6 BANK0      8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (1) _Test                                                 2     2      0   94520
                                             70 BANK0      2     2      0
                        _BlockerTest
                         _BothServos
                         _EEPROMTest
                         _PortTestA5
                          _PortTests
                         _PusherTest
                          _SpeedTest
                       _actuatorTest
                      _algorithmTest
                            _lcdInst
                             _printf
                         _sensorTest
 ---------------------------------------------------------------------------------
 (2) _sensorTest                                           4     4      0    8647
                                             43 BANK0      4     4      0
                            _lcdInst
                             _printf
                            _readADC
                            _readMAG
 ---------------------------------------------------------------------------------
 (4) _readMAG                                              4     4      0      45
                                              2 BANK0      4     4      0
                            _readADC
 ---------------------------------------------------------------------------------
 (4) _readADC                                              2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _algorithmTest                                        2     2      0    8535
                                             43 BANK0      2     2      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _actuatorTest                                        27    27      0   15159
                                             43 BANK0     27    27      0
                            _lcdInst
                             _printf
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (2) _SpeedTest                                            1     1      0    8535
                                             43 BANK0      1     1      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _PusherTest                                           5     5      0    8627
                                             43 BANK0      5     5      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _PortTests                                            2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _PortTestA5                                           1     1      0    8535
                                             43 BANK0      1     1      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _EEPROMTest                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _BothServos                                           2     2      0   19297
                                             43 BANK0      2     2      0
                         _initServos
                            _lcdInst
                             _printf
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (3) _initServos                                           1     1      0    5381
                                              8 BANK0      1     1      0
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (4) _updateServoPosition                                  8     4      4    5381
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (2) _BlockerTest                                          5     5      0    8650
                                             43 BANK0      5     5      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (4) _printf                                              33    21     12    8400
                                             14 BANK0     29    17     12
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (5) _isdigit                                              3     3      0      68
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     669
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              5     1      4     515
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              7     3      4     442
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) _lcdInst                                              1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     113
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _handler                                             16    16      0   76936
                                             74 COMRAM    16    16      0
                     _printSortTimer
                         _updateMenu
 ---------------------------------------------------------------------------------
 (8) _updateMenu                                           2     2      0   71999
                                             66 COMRAM     2     2      0
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
                           _dispLogs
                       _inputHandler
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
       i2_change_state_to_menu_start
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_start                         0     0      0    7744
                          i2_lcdInst
                         i2_printRTC
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) i2_printRTC                                         25    25      0    4605
                                             41 COMRAM    25    25      0
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
                           i2_strcpy
 ---------------------------------------------------------------------------------
 (11) i2_strcpy                                            6     2      4     699
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (9) _inputHandler                                         4     2      2   31390
                                             41 COMRAM     4     2      2
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_22                            0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_12                            0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_23                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_11                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_34                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_33                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_23                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_22                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_12                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_11                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) _dispLogs                                             2     0      2    1475
                                             17 COMRAM     2     0      2
                        _retrieveLog
 ---------------------------------------------------------------------------------
 (10) _retrieveLog                                        11     9      2    1047
                                              6 COMRAM    11     9      2
                      i2_EEPROM_read
                           i2___wmul
 ---------------------------------------------------------------------------------
 (11) i2_EEPROM_read                                       2     0      2     174
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (8) _printSortTimer                                      33    33      0    4937
                                             41 COMRAM    33    33      0
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) i2_printf                                           33    21     12    3004
                                             12 COMRAM    29    17     12
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch
 ---------------------------------------------------------------------------------
 (11) i2_putch                                             1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (11) i2_isdigit                                           3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (11) i2___wmul                                            6     2      4     469
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (11) i2___lwmod                                           5     1      4     367
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (11) i2___lwdiv                                           7     3      4     318
                                              5 COMRAM     7     3      4
                          i2___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (11) i2_lcdInst                                           1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (12) i2_lcdNibble                                         2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (11) i2_getRTC                                            2     2      0     213
                                              3 COMRAM     2     2      0
                  i2_I2C_Master_Read
                 i2_I2C_Master_Start
                  i2_I2C_Master_Stop
                 i2_I2C_Master_Write
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Write                                  2     0      2     100
                                              1 COMRAM     2     0      2
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Stop                                   0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Start                                  0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Read                                   2     2      0      45
                                              1 COMRAM     2     2      0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (13) i2_I2C_Master_Wait                                   1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
     ___lldiv
   _Test
     _BlockerTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _BothServos
       _initServos
         _updateServoPosition
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _updateServoPosition
     _EEPROMTest
     _PortTestA5
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _PortTests
     _PusherTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _SpeedTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _actuatorTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _updateServoPosition
     _algorithmTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _lcdInst
       _lcdNibble
     _printf
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
     _sensorTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _readADC
       _readMAG
         _readADC
   _UI
     ___awdiv
       ___awmod (ARG)
     ___awmod
     _change_state_to_menu_12
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _change_state_to_menu_22
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _lcdInst
       _lcdNibble
     _printRTC
       _getRTC
         _I2C_Master_Read
           _I2C_Master_Wait
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _strcpy
     _printf
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
     _strcpy
   _initLCD
     _lcdInst
       _lcdNibble
   _initTime
   _initUI
     _change_state_to_menu_start
       _lcdInst
         _lcdNibble
       _printRTC
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
         _lcdInst
           _lcdNibble
         _printf
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _lcdNibble
         _strcpy
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _loadRTC
       _I2C_Master_Init
         ___lldiv
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
   _logRun
     _EEPROM_read
     _EEPROM_write
       _EEPROM_read
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
   _machineConfig
   _sort
     _Distribution
       _updateServoPosition
     _ID
       _delay_ms
     _Loading
       _EEPROM_read
       _EEPROM_write
         _EEPROM_read
         _lcdInst
           _lcdNibble
         _printf
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _lcdNibble
       _delay_ms
       _getIR
         _readIR
           _readADC
       _getMAG
         _readMAG
           _readADC
       _initGlobalVars
       _initServos
         _updateServoPosition
       _initSortTimer
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
       _lcdInst
         _lcdNibble
       _readIR
         _readADC
   _stopSignals

 _handler (ROOT)
   _printSortTimer
     i2___lwdiv
       i2___lwmod (ARG)
     i2___lwmod
     i2___wmul
     i2_getRTC
       i2_I2C_Master_Read
         i2_I2C_Master_Wait
       i2_I2C_Master_Start
         i2_I2C_Master_Wait
       i2_I2C_Master_Stop
         i2_I2C_Master_Wait
       i2_I2C_Master_Write
         i2_I2C_Master_Wait
     i2_lcdInst
       i2_lcdNibble
     i2_printf
       i2___lwdiv
         i2___lwmod (ARG)
       i2___lwmod
       i2___wmul
       i2_isdigit
       i2_putch
         i2_lcdNibble
   _updateMenu
     _change_state_to_logs_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_33
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_34
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _dispLogs
       _retrieveLog
         i2_EEPROM_read
         i2___wmul
     _inputHandler
       _change_state_to_logs_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_33
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_34
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
     i2_change_state_to_menu_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_start
       i2_lcdInst
         i2_lcdNibble
       i2_printRTC
         i2_getRTC
           i2_I2C_Master_Read
             i2_I2C_Master_Wait
           i2_I2C_Master_Start
             i2_I2C_Master_Wait
           i2_I2C_Master_Stop
             i2_I2C_Master_Wait
           i2_I2C_Master_Write
             i2_I2C_Master_Wait
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
         i2_strcpy
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      3B       7       23.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     5A      80       5      100.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     5A      7D       1       99.2%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     138      34        0.0%
DATA                 0      0     138       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Wed Mar 29 00:09:16 2017

                                    _i 0131                     i2_I2C_Master_Start 4B8C  
                   i2_I2C_Master_Write 4B62                                     l66 4AFA  
                                   _ID 2F72                            __CFG_CPD$ON 000000  
                                   _UI 08CA                           ___awdiv@sign 008B  
                                   _up 0077                    ___wmul@multiplicand 0082  
                   i2___lwdiv@dividend 0006                            __CFG_BORV$3 000000  
                   EEPROM_read@address 0080                           __CFG_CP0$OFF 000000  
                         __CFG_CP1$OFF 000000                           __CFG_CP2$OFF 000000  
                         __CFG_CP3$OFF 000000                                    ID@i 0084  
                                  ?_ID 0001                                    ?_UI 0001  
                                  UI@i 00C8                                    l180 09A0  
                                  l602 204E                                    l732 2824  
                                  l742 28EC                                    l815 3FBA  
                                  l487 3A00                                    l761 312C  
                                  l745 2926                                    l757 307A  
                                  l758 3094                                    l962 4AC6  
                                  l971 33D0                                    l949 363C  
                         __CFG_CPB$OFF 000000                                    _PEN 007E2A  
                                  _SEN 007E28                    ?i2_I2C_Master_Start 0001  
                       ?_machineConfig 0001                    ?i2_I2C_Master_Write 0002  
                                  _log 00EC                                    _sel 00FD  
                                  _var 00FA                           ___awmod@sign 0085  
                                  wreg 000FE8                    i2printRTC@RTC_month 003B  
                  __end_of_BlockerTest 3966                    _log_count_can_w_lab 0073  
      __end_of_change_state_to_menu_11 4798        __end_of_change_state_to_menu_12 4608  
      __end_of_change_state_to_menu_22 45D0        __end_of_change_state_to_menu_23 4768  
         _f_can_coming_to_distribution 006B                         ??_Distribution 0088  
      __end_of_change_state_to_logs_11 4888        __end_of_change_state_to_logs_12 4858  
      __end_of_change_state_to_logs_22 4828        __end_of_change_state_to_logs_23 4912  
      __end_of_change_state_to_logs_33 47F8        __end_of_change_state_to_logs_34 47C8  
                                 ??_ID 0082                                   ??_UI 00C4  
                         __CFG_LVP$OFF 000000                           __CFG_WDT$OFF 000000  
                                 l1201 3EF0                                   l1210 4310  
                                 l1122 007C                                   l1132 018C  
                                 l1133 01DA                                   l1125 0080  
                                 l1134 0240                                   l1231 383A  
                                 l1135 028E                                   l1063 3564  
                                 l1320 13B6                                   l1216 4320  
                                 l1224 3802                                   l1129 0126  
                                 l1090 3760                                   l1066 3584  
                                 l1235 387E                                   l1171 0782  
                                 l1237 3898                                   l1159 05E8  
                                 l1087 375C                                   l1176 0858  
                                 l1096 1CF8                                   l1193 3E9E  
                                 l1266 3E52                                   l1195 3EA2  
                                 l1259 3E42                                   l1099 1CFC  
                                 l1284 3934                                   l1276 38EC  
                                 l1196 3EA6                                   l1285 394E  
                                 l1197 3EAA                                   l1189 3E82  
                                 l1286 3960                                   l1198 3EAE  
                                 l1199 3EB2                                   l1714 3B8E  
                                 l1767 3F74                                   l1777 4206  
                                 l7020 00EA                                   l6060 1FCC  
                                 l7110 0314                                   l7030 0112  
                                 l7022 00F0                                   l6070 2094  
                                 l6302 49B0                                   l6230 3BAE  
                                 l7120 033C                                   l6080 212A  
                                 l6072 20B2                                   l6240 3C3A  
                                 l7210 051A                                   l7202 04E0  
                                 l7114 032C                                   l7106 030A  
                                 l7026 00FA                                   l6082 2148  
                                 l6074 20D0                                   l6066 2058  
                                 l6322 4002                                   l6234 3BC4  
                                 l5532 3F24                                   l5516 498A  
                                 l5700 1290                                   l7300 06DC  
                                 l7220 0542                                   l7140 03B0  
                                 l7132 038E                                   l7124 0354  
                                 l7116 0332                                   l6084 2166  
                                 l6076 20EE                                   l6068 2076  
                                 l6092 21C0                                   l5534 3F30  
                                 l5710 1308                                   l5702 129C  
                                 l7214 0524                                   l7150 03D8  
                                 l7142 03B6                                   l6086 2184  
                                 l6078 210C                                   l6094 221E  
                                 l8022 106E                                   l8014 104C  
                                 l6430 3D2E                                   l6342 405A  
                                 l6326 4018                                   l5544 3F66  
                                 l5536 3F36                                   l5560 41F8  
                                 l5552 41C2                                   l5720 135E  
                                 l5712 1314                                   l5704 12A2  
                                 l7400 08AA                                   l7320 0742  
                                 l7304 06E6                                   l7240 05A8  
                                 l7224 054C                                   l7136 0398  
                                 l6088 21A2                                   l8032 108A  
                                 l6440 3D70                                   l6280 36AE  
                                 l5554 41CE                                   l5722 1376  
                                 l5714 131A                                   l7330 076A  
                                 l7250 05D0                                   l7218 053C  
                                 l7162 041C                                   l7146 03C0  
                                 l5474 4952                                   l5810 3DB8  
                                 l5802 4612                                   l8018 1056  
                                 l6434 3D44                                   l6338 4042  
                                 l5556 41D4                                   l5716 1332  
                                 l7404 08C2                                   l7324 075A  
                                 l7316 0738                                   l7308 06FE  
                                 l7244 05C0                                   l7236 059E  
                                 l7228 0564                                   l7172 0444  
                                 l5476 4964                                   l5820 3DEE  
                                 l5804 461E                                   l8036 10A2  
                                 l8028 1080                                   l6292 36E6  
                                 l6276 36A4                                   l6284 36C6  
                                 l6700 2906                                   l5742 1408  
                                 l5726 137C                                   l7350 07D2  
                                 l7326 0760                                   l7246 05C6  
                                 l7166 0434                                   l7158 0412  
                                 l5814 3DCE                                   l8062 1122  
                                 l8054 1100                                   l6702 2910  
                                 _ADIE 007CEE                                   l5744 140E  
                                 l5672 1192                                   l5840 3FD0  
                                 l7360 07FA                                   l7272 0652  
                                 l7264 0630                                   l7192 04B8  
                                 l7184 0496                                   l7176 045C  
                                 l7168 043A                                   l8400 35AE  
                                 l8072 113E                                   l8080 1162  
                                 l6288 36DC                                   l6712 2940  
                                 l5762 146C                                   l5738 13EE  
                                 l5674 11A4                                   l7354 07DC  
                                 l7290 06B4                                   l7282 067A  
                                 l7274 0658                                   l7194 04BE  
                                 l8402 35B4                                   l8410 35C6  
                                 l5498 48DC                                   l8058 110A  
                                 l6802 2994                                   l6298 499A  
                                 l5780 14E4                                   l5756 144A  
                                 l5692 125E                                   l5684 11E2  
                                 l5668 117E                                   l7620 3914  
                                 l7364 0804                                   l7268 063A  
                                 l7188 04A0                                   l8404 35BA  
                                 l8076 1156                                   l8068 1134  
                                 l5852 3B12                                   l8332 32F2  
                                 l6820 2A7A                                   l6804 29AE  
                                 l6812 29FC                                   l6724 2980  
                                 l5782 14F0                                   l5790 151E  
                                 l5774 14C8                                   l5766 14A4  
                                 l5678 11AE                                   l7622 391E  
                                 l5838 3FA6                                   l7446 3E7A  
                                 l7390 0882                                   l7374 0842  
                                 l7358 07F4                                   l7294 06BE  
                                 l7278 0662                                   l7198 04C8  
                                 l8406 35C0                                   l7710 3CE2  
                                 l7702 3CC0                                   l5854 3B22  
                                 l8334 3306                                   l6822 2A94  
                                 l6830 2AF6                                   l6806 29C8  
                                 l6814 2A2A                                   l6742 2FF4  
                                 l6646 27E2                                   l5792 1524  
                                 l5768 14AE                                   l7632 3950  
                                 l7480 3868                                   l7384 0872  
                                 l7368 081C                                   l7800 0A84  
                                 l5864 3B7C                                   l5856 3B28  
                                 l6824 2AAE                                   l6808 29E2  
                                 l5786 150A                                   l7466 3824  
                                 l7394 089A                                   l7386 0878  
                                 l7298 06D6                                   l8370 3506  
                                 l7642 3A42                                   l7706 3CCE  
                                 l6818 2A60                                   l6754 302A  
                                 l6746 3002                                   l6690 28D6  
                                 l6674 2884                                   l6658 2848  
                                 l5796 157C                                   l7476 3854  
                                 l7396 08A0                                   l6908 1D4C  
                                 l7900 0DDA                                   l7820 0AE4  
                                 l6828 2AC8                                   l5798 1588  
                                 l7494 3EB6                                   l6926 1E04  
                                 l8390 3590                                   l7654 3A76  
                                 l7670 3AC6                                   l7910 0DF6  
                                 l7806 0A92                                   l8358 338A  
                                 l6758 303A                                   l8470 39C6  
                                 l6944 1E96                                   l8392 3596  
                                 l7656 3A82                                   l7648 3A58  
                                 l7824 0AEE                                   l7760 09BE  
                                 l6938 1E54                                   l8394 359C  
                                 l7674 3ADA                                   l7666 3AB8  
                                 l7658 3A88                                   l7690 3C76  
                                 l7914 0E0E                                   l7906 0DEC  
                                 l7842 0B3A                                   l7834 0B18  
                                 l8474 39D4                                   l6980 1F90  
                                 l6964 1F12                                   l6956 1EE2  
                                 l8396 35A2                                   l8388 358A  
                                 l7860 0BAA                                   l7828 0B06  
                                 l7772 09F2                                   l7764 09D0  
                                 l6788 30EA                                   l6796 312E  
                                 l8476 39DA                                   l8492 3A02  
                                 l8468 39B0                                   l8398 35A8  
                                 l7694 3C8A                                   l7686 3C66  
                                 l7942 0EF6                                   l7934 0ED4  
                                 l7870 0C40                                   l7862 0BC8  
                                 l7838 0B22                                   l7790 0A5C  
                                 l7758 09B8                                   l8486 39F6  
                                 l8478 39E0                                   l6976 1F5A  
                                 l6968 1F48                                   l7696 3C96  
                                 l7952 0F12                                   l7880 0CD6  
                                 l7872 0C5E                                   l7864 0BE6  
                                 l7792 0A62                                   l7776 0A04  
                                 l7768 09DA                                   l8488 39FC  
                                 l7698 3C9C                                   l7938 0EDE  
                                 l7882 0CF4                                   l7874 0C7C  
                                 l7866 0C04                                   l7858 0B8C  
                                 l7956 0F2A                                   l7948 0F08  
                                 l7892 0DB8                                   l7876 0C9A  
                                 l7868 0C22                                   l7796 0A6C  
                                 l7982 0FB2                                   l7974 0F90  
                                 l7878 0CB8                                   l7886 0D12  
                                 l7992 0FCE                                   l7896 0DC2  
                                 l7888 0D76                                   l7978 0F9A  
                                 l7996 0FE6                                   l7988 0FC4  
                                 STR_1 FBA3                                   STR_2 FF27  
                                 STR_3 FB91                                   STR_4 FE4A  
                                 STR_5 FB91                                   STR_6 FDE6  
                                 STR_7 FFC4                                   STR_8 FFDB  
                                 STR_9 FFCB                                   _LATA 000F89  
                                 _LATB 000F8A                                   _LATC 000F8B  
                                 _LATD 000F8C                                   _LATE 000F8D  
                                 u4120 12DC                                   u4040 44BA  
                                 u4050 44BC                                   u4060 4506  
                                 u5100 27EE                                   u4061 4502  
                                 u4070 4508                                   u4127 12D2  
                                 u4160 1354                                   u5120 2824  
                                 u5118 27F2                                   u4167 134A  
                                 u5240 2FC0                                   u5330 30F6  
                                 _PEIE 007F96                                   u5420 1D8E  
                                 u5430 1D90                                   u5350 312C  
                                 u5600 028E                                   u3840 48DA  
                                 u5248 2FC4                                   u5460 1F36  
                                 u5348 30FA                                   _RCEN 007E2B  
                                 u4750 204E                                   u6271 390A  
                                 u8007 105E                                   u4735 4240  
                                 u6280 390C                                   u5560 0126  
                                 u8017 1092                                   u5490 1F7E  
                                 u8107 1D3C                                   u8027 10BC  
                                 u5580 01DA                                   u5468 1F3A  
                                 u8117 1DA4                                   u8037 1112  
                                 u8207 370C                                   u8127 1DF8  
                                 u8047 1146                                   u8217 3750  
                                 u8137 1E18                                   u8057 3514  
                                 i2l66 4B0E                                   u5498 1F82  
                                 u7370 33D0                                   u8307 01EA  
                                 u8227 3772                                   u8147 1E46  
                                 u8067 3558                                   u8317 0250  
                                 u8237 002C                                   u8157 1E8A  
                                 u8077 1CA8                                   u8407 04A8  
                                 u8327 026E                                   u8247 0070  
                                 u8167 1EA8                                   u8087 1CEC  
                                 u7607 28F0                                   u8417 04D0  
                                 u8337 029E                                   u8257 0092  
                                 u8177 1ED6                                   u8097 1D0E  
                                 u7617 28FA                                   u8507 074A  
                                 u8427 052C                                   u8347 031C  
                                 u8267 0102                                   u8187 1EF0  
                                 u7707 304A                                   u7627 292A  
                                 u8517 0772                                   u8437 0554  
                                 u8357 0344                                   u8277 0136  
                                 u8197 495A                                   u7717 307E  
                                 u7637 2934                                   u8607 3E5C  
                                 u8527 0794                                   u8447 05B0  
                                 u8367 03A0                                   u8287 019C  
                                 u7807 36EE                                   u7727 3088  
                                 u7647 294E                                   u8617 3E70  
                                 u8537 07E4                                   u8457 05D8  
                                 u8377 03C8                                   u8297 01BA  
                                 u7817 4518                                   u7737 30AE  
                                 u7657 2974                                   u7577 2772  
                                 u8707 164E                                   u8627 37E2  
                                 u8547 080C                                   u8467 0642  
                                 u8387 0424                                   u7907 0B54  
                                 u7827 454C                                   u7747 49A6  
                                 u7667 4692                                   u7587 2838  
                                 u8717 1682                                   u8637 383E  
                                 u8557 085C                                   u8477 066A  
                                 u8397 044C                                   u7917 0DCA  
                                 u7837 08E2                                   u7757 2A50  
                                 u7677 4020                                   u7597 28A4  
                                 u8807 18B0                                   u8727 16B4  
                                 u8647 3846                                   u8567 0866  
                                 u8487 06C6                                   u7927 0DFE  
                                 u7847 09E2                                   u7767 2B04  
                                 u7687 2F88                                   u8817 18E4  
                                 u8737 1700                                   u8657 3882  
                                 u8577 088A                                   u8497 06EE  
                                 u7937 0E28                                   u7857 0A1E  
                                 u7777 2B36                                   u7697 2FA6  
                                 u8907 41A6                                   u8827 1916  
                                 u8747 1734                                   u8667 388C  
                                 u8587 08B2                                   u7947 0EE6  
                                 u7867 0A74                                   u7787 365A  
                                 u8837 436A                                   u8757 1766  
                                 u8677 42DA                                   u8597 3E0C  
                                 u7957 0F1A                                   u7877 0AA0  
                                 u7797 36B6                                   u8847 38AC  
                                 u8767 17B2                                   u8687 15B6  
                                 u7967 0F44                                   u7887 0AF6  
                                 u8857 3938                                   u8777 17FE  
                                 u8697 1602                                   u7977 0FA2  
                                 u7897 0B2A                                   u8867 3942  
                                 u8787 1832                                   u7987 0FD6  
                                 u8877 4166                                   u8797 1864  
                                 u7997 1000                                   u8887 4170  
                                 u8897 419C                                   _RSEN 007E29  
                          _stopSignals 4ACE                                   _Test 3506  
                                 _back 005B                                   _main 3966  
                                 _down 0063                                   _keys FB01  
                                 _time 0124                                   fsr0h 000FEA  
                                 fsr1h 000FE2                     i2___lwdiv@quotient 000A  
                                 indf0 000FEF                                   fsr2h 000FDA  
                                 fsr0l 000FE9                                   indf2 000FDF  
                                 fsr1l 000FE1                                   fsr2l 000FD9  
                                 _sort 4A54                                   btemp 007E  
                 ??i2_I2C_Master_Start 0002                   ??i2_I2C_Master_Write 0004  
                                 prodh 000FF4                                   prodl 000FF3  
                                 start 000E                          __CFG_IESO$OFF 000000  
                 _log_count_can_no_lab 0071                        __end_ofi2_putch 4B4C  
                  __size_of_EEPROMTest 0002                          __CFG_MCLRE$ON 000000  
                         ___param_bank 000000                             i2_printRTC 2522  
                          i2_lcdNibble 4382                        __end_of_Loading 298A  
                 __end_of_actuatorTest 08CA                       ?_I2C_Master_Init 008D  
                     ?_I2C_Master_Read 0001                       ?_I2C_Master_Wait 0001  
          ??i2_change_state_to_menu_12 002A            ??i2_change_state_to_menu_22 002A  
                     ?_I2C_Master_Stop 0001                                  ?_Test 0001  
                 __end_of_EEPROM_write 36FE                                  ?_main 0001  
                                _ACKEN 007E2C                                  _ACKDT 007E2D  
                      __end_of___awdiv 3AE4                                  _EEADR 000FA9  
                                STR_10 FFE7                                  STR_11 FFEB  
                                STR_12 FFFB                                  STR_20 FFEF  
                                STR_13 FFDF                                  STR_21 FB1C  
                                STR_14 FFD7                                  STR_22 FF9B  
                                STR_30 FDF7                                  STR_15 FFD3  
                                STR_23 FF19                                  STR_31 FDD5  
                                STR_16 FFE3                                  STR_24 FD3C  
                                STR_32 FD1A                                  STR_40 FCD6  
                                STR_17 FFF3                                  STR_25 FE19  
                                STR_33 FD2B                                  STR_41 FCC5  
                                STR_18 FFF7                                  STR_34 FDC4  
                                STR_50 FDA2                                  STR_42 FD80  
                                STR_26 FD4D                                  STR_43 FD80  
                                STR_35 FDC4                                  STR_51 FFDB  
                                STR_19 FFCF                                  STR_27 FE08  
                                STR_52 FFCB                                  STR_60 FFF3  
                                STR_28 FD5E                                  STR_36 FD09  
                                STR_44 FCE7                        __end_of___awmod 3CEC  
                                STR_45 FCD6                                  STR_37 FD1A  
                                STR_53 FFE7                                  STR_61 FFF7  
                                STR_29 FE16                                  STR_62 FFCF  
                                STR_54 FFEB                                  STR_70 FED2  
                                STR_38 FDB3                                  STR_46 FD91  
                                STR_47 FD91                                  STR_55 FFFB  
                                STR_63 FB1C                                  STR_71 FF0B  
                                STR_39 FD6F                                  STR_56 FFDF  
                                STR_64 FF7C                                  STR_80 FE5A  
                                STR_48 FCF8                                  STR_72 FC5F  
                                STR_49 FCE7                                  STR_57 FFD7  
                                STR_81 FE16                                  STR_65 FF42  
                                STR_73 FEEF                                  STR_58 FFD3  
                                STR_74 FF4F                                  STR_90 FEC3  
                                STR_82 FE87                                  STR_66 FB34  
                                STR_59 FFE3                                  STR_67 FFBD  
                                STR_91 FEE1                                  STR_75 FEB4  
                                STR_83 FE2A                                  STR_84 FF87  
                                STR_76 FEFD                                  STR_92 FC81  
                                STR_68 FC70                                  STR_85 FF87  
                                STR_77 FFAE                                  STR_93 FF5B  
                                STR_69 FCA3                                  STR_78 FF0B  
                                STR_86 FFA5                                  STR_94 FC92  
                                STR_87 FFA5                                  STR_95 FF66  
                                STR_79 FF35                                  STR_88 FF91  
                                STR_96 FEA5                                  STR_89 FF0B  
                                STR_97 FC0A                                  STR_98 FBF9  
                                STR_99 FBD7                                  ?_sort 0001  
                      __end_of___lldiv 3BA0                                  _T0CON 000FD5  
                      ___awdiv@divisor 0088                                  _T1CON 000FCD  
                                _T3CON 000FB1                        __end_of___lwdiv 3F7E  
                      __end_of___lwmod 4210                                  i2l257 251E  
                                i2l602 25B0                                  i2l880 31FE  
                                i2l962 4AF2                                  i2l884 324A  
                      ___awdiv@counter 008A                                  i2l886 326A  
                                _TMR0H 000FD7                                  _TMR1H 000FCF  
                                _TMR0L 000FD6                                  _TMR3H 000FB3  
                                _TMR1L 000FCE                                  _TMR3L 000FB2  
                           _BothServos 15A8                                  _PORTB 000F81  
                                _TRISA 000F92                                  _TRISB 000F93  
                                _TRISC 000F94                                  _TRISD 000F95  
                                _TRISE 000F96                          __CFG_PWRT$OFF 000000  
                        __CFG_WRT0$OFF 000000                          __CFG_WRT1$OFF 000000  
                        __CFG_WRT2$OFF 000000                          __CFG_WRT3$OFF 000000  
                      __end_of_lcdInst 4B40                        __end_of_handler 32A6  
                       __CFG_EBTR0$OFF 000000                         __CFG_FCMEN$OFF 000000  
                       __CFG_EBTR1$OFF 000000                         __CFG_EBTR2$OFF 000000  
                       __CFG_EBTR3$OFF 000000                                  _nRBPU 007F8F  
                        __CFG_WRTB$OFF 000000                          __CFG_WRTC$OFF 000000  
                        __CFG_WRTD$OFF 000000                        __end_of_readADC 496A  
                      __end_of_initLCD 4556                         __CFG_EBTRB$OFF 000000  
                                _debug 0061                             i2isdigit@c 0003  
                                _getIR 3FF4                        __end_of_loadRTC 3D78  
                      __end_of_readMAG 4510                        __end_of_dpowers FB1C  
                                _first 006D                                  _enter 0065  
                      __end_of_isdigit 4994                                  _input 007D  
                                _putch 4B20                                  pclath 000FFA  
                                tablat 000FF5                       __end_ofi2___wmul 4A0A  
                     __end_ofi2_getRTC 40D8                    _log_count_pop_w_tab 00F2  
                                status 000FD8                         __CFG_PBADEN$ON 000000  
                        i2printf@width 0028                       __end_ofi2_printf 1C9A  
                   __size_ofi2___lwdiv 0052                     __size_ofi2___lwmod 0042  
                     __end_ofi2_strcpy 46D8                            Loading@addr 00B3  
                     _count_can_no_lab 012B                   __size_of_EEPROM_read 0018  
                      __initialization 442A                           __end_of_Test 361A  
                   __size_ofi2_lcdInst 000C                           __end_of_main 3A26  
                         __end_of_keys FB12                           __end_of_sort 4A76  
                           i2printf@ap 0020                             i2printf@cp 001E  
                   __size_ofi2_isdigit 001E                       PusherTest@i_1699 00AE  
                          _BlockerTest 389E                                 ??_Test 00C6  
  __size_of_change_state_to_menu_start 002C                        ??_machineConfig 0080  
                               ??_main 00DA                                 ??_sort 00BC  
                        __activetblptr 000003             updateServoPosition@my_time 0086  
           updateServoPosition@time_us 0080                             i2strcpy@cp 0005  
                           i2strcpy@to 0001                      ?_I2C_Master_Start 0001  
                  EEPROM_write@address 00AB                 __size_ofi2_EEPROM_read 0016  
                    ?_I2C_Master_Write 0081                                 ?_getIR 0001  
                   ??_I2C_Master_Start 0081                                 _ADCON0 000FC2  
                               _ADCON1 000FC1                     ??_I2C_Master_Write 0083  
                               _ADCON2 000FC0                                 STR_100 FC2C  
                               STR_101 FC3D                                 STR_110 FCB4  
                               STR_102 FBB5                                 STR_103 FE3A  
                               STR_111 FB49                                 STR_120 FFB6  
                               STR_104 FBE8                                 STR_112 FB5B  
                               STR_113 FF71                                 STR_105 FBC6  
                               STR_106 FBE8                                 STR_114 FC1B  
                               _ADRESH 000FC4                                 STR_107 FE96  
                               STR_115 FC4E                                 STR_108 FE78  
                               STR_116 FB6D                                 _EEADRH 000FAA  
                               STR_117 FB5B                                 STR_109 FE69  
                               STR_118 FB49                                 _ADRESL 000FC3  
                               STR_119 FB7F                                 _EEDATA 000FA8  
                               _EECON2 000FA7                       ___awdiv@dividend 0086  
                      i2lcdNibble@data 0002                                 ?_putch 0001  
               __size_of_initSortTimer 00AA                        i2lcdNibble@temp 0001  
            i2_change_state_to_menu_12 4708              i2_change_state_to_menu_22 46D8  
                               _INT1IE 007F83                                 _INT1IF 007F80  
                               _CVRCON 000FB5                                 i2l1320 1B06  
                               i2l6010 1BDE                                 i2l6002 1BC0  
                               i2l6004 1BC8                                 i2l6022 1C10  
                               i2l1767 4420                                 i2l6032 1C76  
                               i2l6016 1BF4                                 i2l6040 46B8  
                               i2l1777 458E                                 i2l6018 1BFC  
                               i2l6026 1C22                                 i2l6034 1C7E  
                               i2l6210 34AA                                 i2l6028 1C28  
                               i2l6222 34EE                                 i2l6214 34BA  
                               i2l6038 46B0                                 i2l6400 263E  
                               i2l6410 26AC                                 i2l6402 2654  
                               i2l5620 43F6                                 i2l6404 266A  
                               i2l8100 22A6                                 i2l5630 4416  
                               i2l5622 43FA                                 i2l6510 2E02  
                               i2l6502 2DE2                                 i2l6406 2680  
                               i2l6414 26C2                                 i2l5640 456C  
                               i2l5608 4AAE                                 i2l6512 2E08  
                               i2l6520 2E1A                                 i2l6408 2696  
                               i2l6416 271C                                 i2l8200 2410  
                               i2l8120 22DE                                 i2l8112 22D0  
                               i2l8104 22B4                                 i2l5618 43EE  
                               i2l5642 4570                                 i2l6514 2E0E  
                               i2l6506 2DF6                                 i2l6602 2F44  
                               i2l6540 2E76                                 i2l6532 2E5E  
                               i2l6516 2E14                                 i2l6508 2DFC  
                               i2l8220 2466                                 i2l8212 2442  
                               i2l8204 2426                                 i2l8140 2326  
                               i2l8132 230A                                 i2l8124 22EC  
                               i2l8108 22C2                                 i2l5646 4584  
                               i2l5638 4564                                 i2l5910 1954  
                               i2l6550 2EA0                                 i2l6390 25D0  
                               i2l6382 254E                                 i2l5584 4A2A  
                               i2l5920 198C                                 i2l5904 1936  
                               i2l6560 2EBE                                 i2l6392 25E6  
                               i2l8232 2490                                 i2l8224 2474  
                               i2l8216 2450                                 i2l8208 2434  
                               i2l8160 2374                                 i2l8152 2350  
                               i2l8144 2334                                 i2l8136 2318  
                               i2l8128 22FA                                 i2l5914 195A  
                               i2l6562 2EC2                                 i2l6546 2E84  
                               i2l6394 25FC                                 i2l8242 24B4  
                               i2l5940 1A24                                 i2l5908 1946  
                               i2l8420 2BA6                                 i2l6580 2EF2  
                               i2l6556 2EAA                                 i2l6492 2DC4  
                               i2l6484 2DAA                                 i2l6396 2612  
                               i2l6388 25BA                                 i2l8236 24A6  
                               i2l8228 2482                                 i2l8180 23C2  
                               i2l8172 23A6                                 i2l8164 2382  
                               i2l8156 2366                                 i2l8148 2342  
                               i2l5950 1A7E                                 i2l8430 2C10  
                               i2l6574 2EE4                                 i2l6566 2ECC  
                               i2l6494 2DD4                                 i2l6398 2628  
                               i2l8094 2292                                 i2l5880 40AE  
                               i2l5952 1A90                                 i2l5936 1A16  
                               i2l5928 19EE                                 i2l8440 2CD2  
                               i2l8424 2BB6                                 i2l6592 2F28  
                               i2l6584 2F04                                 i2l6496 2DD8  
                               i2l8192 23F4                                 i2l8184 23D0  
                               i2l8176 23B4                                 i2l8168 2390  
                               i2l8096 2298                                 i2l5946 1A6E  
                               i2l5938 1A20                                 i2l5962 1AD0  
                               i2l8522 31D2                                 i2l8506 31B2  
                               i2l5876 409E                                 i2l5980 1B50  
                               i2l5956 1ABA                                 i2l5948 1A78  
                               i2l6596 2F3A                                 i2l6588 2F16  
                               i2l8196 2402                                 i2l8188 23E6  
                               i2l8508 31B6                                 i2l5886 40C8  
                               i2l5974 1B34                                 i2l5958 1ACC  
                               i2l5992 1B82                                 i2l8544 321C  
                               i2l5978 1B4C                                 i2l8546 321E  
                               i2l5998 1B9C                                 i2l8568 3268  
                               i2l8880 24F4                                 i2l8882 2510  
                               i2l8886 2E32                                 i2l8878 24D2  
                               i2l8888 2E4E                                 _OSCCON 000FD3  
                               _TMR0IE 007F95                                 _TMR0IF 007F92  
                            ??i2_putch 0003                                 _TMR1IE 007CE8  
                               _TMR1IF 007CF0                                 _TMR2IE 007CE9  
                               _TMR3IE 007D01                                 _TMR3IF 007D09  
                               _TMR0ON 007EAF                                 _TMR1ON 007E68  
                               _TMR3ON 007D88                                 _SSPADD 000FC8  
                               _TRISC3 007CA3                                 _TRISC4 007CA4  
                               _SSPBUF 000FC9                              ??_Loading 00B1  
                     __end_of_delay_ms 49BC                   delay_ms@milliseconds 0081  
                       __CFG_XINST$OFF 000000                       __end_of_dispLogs 4A54  
                          ?i2_printRTC 0001                       retrieveLog@byte1 000B  
                     retrieveLog@byte2 000C                       retrieveLog@byte3 000D  
                 __end_of_Distribution 2B9A                                 ___wmul 463E  
                            ??___awdiv 008A                         __CFG_STVREN$ON 000000  
                               _getMAG 4674                              ??___awmod 0084  
                          logRun@byte1 00B2                            logRun@byte2 00B3  
                          logRun@byte3 00B4                                 _getRTC 3D78  
                            ??___lldiv 0088                              ??___lwdiv 0084  
                            ??___lwmod 008B                       ??_printSortTimer 002A  
                     __end_of_initTime 4A98                                 _initUI 4888  
                               _readIR 4478                                 _logRun 32A6  
                               getIR@i 0087                                 clear_0 4450  
                               clear_1 445C                                 clear_2 4468  
                     ___awdiv@quotient 008C                        ___awmod@divisor 0082  
                           _PortTestA5 42CC                        ___awmod@counter 0084  
                            ??_lcdInst 0082                                 _printf 1170  
                            ??_handler 004B                __size_of_initGlobalVars 006E  
                         ?_retrieveLog 0007                                 _strcpy 4608  
                   __size_of_SpeedTest 0084                              ??_readADC 0080  
                            ??_initLCD 0083                              ??_loadRTC 0095  
                            ??_readMAG 0082   __end_ofi2_change_state_to_menu_start 49E4  
__size_ofi2_change_state_to_menu_start 0028           i2_change_state_to_menu_start 49BC  
                          ?_BothServos 0001                           ??_EEPROMTest 0080  
                            ??_isdigit 0080                     __size_of_PortTests 0084  
                    __end_ofi2___lwdiv 442A                       __end_of_printRTC 2262  
                         __mediumconst FB00                      __end_ofi2___lwmod 4598  
                               tblptrh 000FF7                                 tblptrl 000FF6  
                               tblptru 000FF8                   _log_count_pop_no_tab 00F0  
                __end_of_algorithmTest 37D4                      __end_ofi2_lcdInst 4B58  
                           _PusherTest 37D4                      __end_ofi2_isdigit 4AB6  
                           __accesstop 0080                __end_of__initialization 446E  
                        ?_inputHandler 002A                          ___rparam_used 000001  
              printSortTimer@start_sec 003D                  __size_of_actuatorTest 08B8  
                        i2_EEPROM_read 4AE4                           Loading@byte1 00B5  
                   i2___lwmod@dividend 0001                     __end_of_EEPROMTest 4B96  
                       __pcstackCOMRAM 0001                  __size_of_EEPROM_write 00E4  
                         __pidataBANK1 4B6C                          __end_of_getIR 4066  
                          i2printRTC@i 0041                          _initSortTimer 3BA0  
          __end_of_updateServoPosition 3FF4                          __end_of_putch 4B30  
                          i2printf@len 0022                            i2printf@val 0024  
                           __end_of_ID 3138                             __end_of_UI 1170  
                   printSortTimer@hour 002D                              ?i2___wmul 0001  
                   __size_of_lcdNibble 0068                              ?i2_getRTC 0001  
                          i2putch@data 0003                  printSortTimer@curTime 002F  
   __end_of_change_state_to_menu_start 493E          ?i2_change_state_to_menu_start 0001  
           _change_state_to_menu_start 4912                  printSortTimer@cur_sec 003F  
                            ?i2_printf 000D                                ??_getIR 0086  
                            ?i2_strcpy 0001                       _count_pop_no_tab 005D  
                  __size_ofi2_printRTC 0236                                ??_putch 0082  
                         _actuatorTest 0012                             __pbssBANK0 00DA  
                           __pbssBANK1 0100                           ?_stopSignals 0001  
                       ??_inputHandler 002C                           _EEPROM_write 361A  
             ?_change_state_to_menu_11 0001               ?_change_state_to_menu_12 0001  
             ?_change_state_to_menu_22 0001                                UI@F3226 0133  
             ?_change_state_to_menu_23 0001                      __end_of_SpeedTest 3E82  
                       ?i2_EEPROM_read 0001               ?_change_state_to_logs_11 0001  
             ?_change_state_to_logs_12 0001               ?_change_state_to_logs_22 0001  
             ?_change_state_to_logs_23 0001               ?_change_state_to_logs_33 0001  
             ?_change_state_to_logs_34 0001                    __size_of_BothServos 0384  
                    __end_of_PortTests 3F06                      printRTC@RTC_month 00BC  
                         ?i2_lcdNibble 0001                                UI@i_412 00CA  
                              UI@i_413 00CB                                UI@i_431 00CC  
                              UI@i_440 00D1                                UI@i_432 00CD  
                              UI@i_409 00C9                                UI@i_443 00D2  
                              UI@i_435 00CE                                UI@i_444 00D3  
                              UI@i_436 00CF                                UI@i_447 00D4  
                              UI@i_439 00D0                                UI@i_448 00D5  
                       ?_initSortTimer 0001                                ?___wmul 0080  
                              ?_getMAG 0001                                ?_getRTC 0001  
                              ?_initUI 0001                                ?_readIR 0001  
                              ?_logRun 0001               updateServoPosition@timer 0082  
                              UI@month 00D6                            ?_PortTestA5 0001  
                              ?_printf 008E                                _UI$2317 00C6  
                              ?_strcpy 0080                             ??i2___wmul 0005  
                           ??i2_getRTC 0004                              ?_delay_ms 0001  
                           ??i2_printf 0019                             ??i2_strcpy 0005  
                            ?_dispLogs 0012                                _SSPCON1 000FC6  
                              _SSPCON2 000FC5                            ?_PusherTest 0001  
                              _SSPSTAT 000FC7                                _RTCflag 00E2  
                              i2_putch 4B40                              ?_initTime 0080  
                      _f_loadingNewCan 00EA                        i2printRTC@month 003D  
                __size_of_Distribution 0210            __size_ofi2_I2C_Master_Start 0008  
                    __end_of_lcdNibble 41AE                                _Loading 2758  
          __size_ofi2_I2C_Master_Write 000A                       EEPROM_write@data 00AD  
                              __Hparam 0000                                __Lparam 0000  
   __size_ofi2_change_state_to_menu_12 0030     __size_ofi2_change_state_to_menu_22 0030  
                            ?_printRTC 0001                                ___awdiv 3A26  
                              ___awmod 3C4A                             _initServos 4328  
                              ___lldiv 3AE4                        __size_of___wmul 0036  
                      __size_of_getMAG 0032                                ___lwdiv 3F06  
                              ___lwmod 41AE                        __size_of_getRTC 0086  
                      printSortTimer@i 0049                              _CMCONbits 000FB4  
                    retrieveLog@logNum 0007                           logRun@byte11 00B6  
                         ?_BlockerTest 0001                        __size_of_initUI 002E  
                      __size_of_readIR 004C                                __pcinit 442A  
                 i2EEPROM_read@address 0001                        __size_of_logRun 0140  
                         logRun@byte_i 00B5                                __ramtop 1000  
                       _initGlobalVars 40D8                                _lcdInst 4B30  
                              _handler 0008                                __ptext0 3966  
                              __ptext1 4ACE                                __ptext2 4A54  
                              __ptext3 2758                                __ptext4 3BA0  
                              __ptext5 40D8                                __ptext6 4674  
                              __ptext7 3FF4                                __ptext8 4478  
                              __ptext9 2F72                        __size_of_printf 0438  
                              _readADC 493E                        __size_of_strcpy 0036  
                              _initLCD 4510                                _cur_can 00E4  
                              _loadRTC 3CEC                                _readMAG 44C4  
                              _dpowers FB12                     actuatorTest@i_1660 00B3  
                   actuatorTest@i_1653 00AE                     actuatorTest@i_1662 00B4  
                   actuatorTest@i_1654 00AF                     actuatorTest@i_1646 00AD  
                   actuatorTest@i_1663 00B5                     actuatorTest@i_1672 00BA  
                   actuatorTest@i_1656 00B0                     actuatorTest@i_1673 00BB  
                   actuatorTest@i_1665 00B6                     actuatorTest@i_1657 00B1  
                   actuatorTest@i_1682 00C0                     actuatorTest@i_1666 00B7  
                   actuatorTest@i_1683 00C1                     actuatorTest@i_1675 00BC  
                   actuatorTest@i_1659 00B2                     actuatorTest@i_1676 00BD  
                   actuatorTest@i_1668 00B8                     actuatorTest@i_1685 00C2  
                   actuatorTest@i_1669 00B9                     actuatorTest@i_1686 00C3  
                   actuatorTest@i_1678 00BE                     actuatorTest@i_1679 00BF  
                              _isdigit 496A                       ___awmod@dividend 0080  
                              getRTC@i 0083                   __size_of_retrieveLog 0120  
                           ??_delay_ms 0080               __size_of_I2C_Master_Init 0060  
             __size_of_I2C_Master_Read 002E                          _log_startTime 0100  
             __size_of_I2C_Master_Wait 0014               __size_of_I2C_Master_Stop 0008  
                           ??_dispLogs 0014                           _Distribution 298A  
                       __pintcode_body 3138                   end_of_initialization 446E  
                              logRun@i 00B7                             ??_initTime 0086  
                      ??i2_EEPROM_read 0003                                int_func 3138  
                  i2___wmul@multiplier 0001                          ??_EEPROM_read 0082  
                  __size_of_PortTestA5 005C              __size_of_I2C_Master_Start 0008  
            __size_of_I2C_Master_Write 000A                        ___lldiv@divisor 0084  
                      ___lldiv@counter 008C                        ??_initSortTimer 0085  
                              printf@c 00A8                           ??i2_printRTC 002A  
                              printf@f 008E                             ??_printRTC 00AB  
                     I2C_Master_Init@c 008D                       I2C_Master_Read@a 0081  
                              postdec1 000FE5                                postdec2 000FDD  
                              postinc0 000FEE                                postinc2 000FDE  
               __end_of_initGlobalVars 4146                             _sensorTest 1C9A  
                  __size_of_PusherTest 00CA                             _servoTimes 011C  
                            _PORTAbits 000F80                              _PORTBbits 000F81  
                 __end_of_inputHandler 2F72                           ??_BothServos 00AB  
                __end_of_machineConfig 42CC                             _updateMenu 2262  
                    i2_I2C_Master_Read 4A0A                              _IR_signal 00DE  
                    i2_I2C_Master_Wait 4B0E                      i2_I2C_Master_Stop 4B84  
                    i2___lwdiv@divisor 0008                        _log_count_total 0075  
                            i2___lwdiv 43D8                              i2___lwmod 4556  
                    i2___lwdiv@counter 000C                     ?i2_I2C_Master_Read 0001  
                   ?i2_I2C_Master_Wait 0001                     __end_ofi2_printRTC 2758  
                   ?i2_I2C_Master_Stop 0001                          actuatorTest@i 00C4  
         ??_change_state_to_menu_start 00C4                              i2_lcdInst 4B4C  
                        Loading@i_1100 00B8                          Loading@i_1099 00B6  
                           _total_time 00F8                            printf@width 00A9  
                 __size_of_stopSignals 0016                    ??i2_I2C_Master_Read 0002  
                            i2_isdigit 4A98                    ??i2_I2C_Master_Wait 0001  
                  ??i2_I2C_Master_Stop 0002                              i2getRTC@i 0004  
                   __end_of_BothServos 192C                            PusherTest@i 00AC  
                  __end_of_EEPROM_read 4ACE                            ?_initServos 0001  
                      ?_initGlobalVars 0001                         __end_of___wmul 4674  
                       __end_of_getMAG 46A6                         __end_of_getRTC 3DFE  
                 __size_ofi2_lcdNibble 0056                          EEPROM_write@i 00AF  
                        i2lcdInst@data 0003                         __end_of_initUI 48B6  
                       __end_of_readIR 44C4                         __end_of_logRun 33E6  
                     i2___wmul@product 0005                         __end_of_printf 15A8  
                         i2printf@flag 0026                         __end_of_strcpy 463E  
            __end_ofi2_I2C_Master_Read 4A30              __end_ofi2_I2C_Master_Wait 4B20  
                         i2printf@prec 001D                    start_initialization 442A  
            __end_ofi2_I2C_Master_Stop 4B8C                             readMAG@res 0084  
                    __size_ofi2___wmul 0026                        _count_can_w_lab 012D  
          ?_change_state_to_menu_start 0001                      __size_ofi2_getRTC 0072  
                            i2printf@c 0027                              i2printf@f 000D  
                   EEPROM_write@i_1332 00B0                  i2I2C_Master_Read@temp 0003  
                           ?i2___lwdiv 0006                             ?i2___lwmod 0001  
                    __size_ofi2_printf 036E                      __size_ofi2_strcpy 0032  
                    ??_I2C_Master_Init 0091                      ??_I2C_Master_Read 0081  
                    ??_I2C_Master_Wait 0080                             ?i2_lcdInst 0001  
                    ??_I2C_Master_Stop 0081                       __CFG_OSC$INTIO67 000000  
                           ?i2_isdigit 0001                             initTime@DD 0083  
                           initTime@MM 0084                             initTime@YY 0085  
                      retrieveLog@addr 0010                             logRun@addr 00B9  
                            _SpeedTest 3DFE                               ??___wmul 0084  
                             ??_getMAG 0086                               ??_getRTC 0083  
               __size_of_algorithmTest 00D6                              _PortTests 3E82  
                          ?_sensorTest 0001                            __pdataBANK1 0133  
                     __CFG_LPT1OSC$OFF 000000                               ??_initUI 00C4  
                             ??_readIR 0082                               ??_logRun 00B1  
                             ID@i_1112 0086                           ??_PortTestA5 00AB  
               printSortTimer@timeDiff 0047       __size_of_change_state_to_menu_11 0030  
     __size_of_change_state_to_menu_12 0038       __size_of_change_state_to_menu_22 0038  
     __size_of_change_state_to_menu_23 0030                               ??_printf 009A  
     __size_of_change_state_to_logs_11 0030       __size_of_change_state_to_logs_12 0030  
     __size_of_change_state_to_logs_22 0030       __size_of_change_state_to_logs_23 002E  
     __size_of_change_state_to_logs_33 0030       __size_of_change_state_to_logs_34 0030  
                             ??_strcpy 0084                    _printSortTimer$2437 0045  
                 __size_of_BlockerTest 00C8                            __pbssCOMRAM 005B  
         __size_of_updateServoPosition 0076                            ?_updateMenu 0001  
                        __pcstackBANK0 0080                __size_of_printSortTimer 01F2  
                    i2___lwmod@divisor 0003                      i2___lwmod@counter 0005  
                         _isdigit$1961 0081                           ??_PusherTest 00AB  
                    __size_of_delay_ms 0028                         initSortTimer@i 0088  
                    printSortTimer@min 0041                      printSortTimer@sec 0043  
                  __size_of_initServos 005A                      __size_of_dispLogs 0024  
                     printRTC@INT_time 00AE                           i2strcpy@from 0003  
                             ?i2_putch 0001                        _count_pop_w_tab 005F  
                          _EEPROM_read 4AB6                     __end_of_PortTestA5 4328  
                     _I2C_Master_Start 4B7C                              _f_lastCan 00E8  
                             ?_Loading 0001                    i2I2C_Master_Write@d 0002  
                     _I2C_Master_Write 4B58                      __size_of_initTime 0022  
                     ___lwdiv@dividend 0080                      __CFG_CCP2MX$PORTC 000000  
                            __pintcode 0008                             ?_SpeedTest 0001  
                        __pmediumconst FB00                              _lcdNibble 4146  
                __size_of_inputHandler 01E6                               ?___awdiv 0086  
                             ?___awmod 0080                               ?___lldiv 0080  
                       _sensor_outputs 00DA                               ?___lwdiv 0080  
                           ?_PortTests 0001                               ?___lwmod 0087  
                    __size_of_printRTC 02CA                     __end_of_PusherTest 389E  
                             ?_lcdInst 0001                               ?_handler 0001  
                             ?_readADC 0001                               ?_initLCD 0001  
                             ?_loadRTC 0001                               ?_readMAG 0001  
                             ?_isdigit 0001             __size_ofi2_I2C_Master_Read 0026  
           __size_ofi2_I2C_Master_Wait 0012             __size_ofi2_I2C_Master_Stop 0008  
                            _firstboot 006F                              _cur_state 00E6  
                     ___lwdiv@quotient 0084                         __size_of_getIR 0072  
                        _algorithmTest 36FE                            ??i2___lwdiv 000A  
                          ??i2___lwmod 0005                         __size_of_putch 0010  
                          __size_of_ID 01C6                            __size_of_UI 08A6  
                  __size_of_sensorTest 02FE             __end_ofi2_I2C_Master_Start 4B94  
           __end_ofi2_I2C_Master_Write 4B6C                            ??i2_lcdInst 0003  
                       ___wmul@product 0084                               _LATAbits 000F89  
                             _LATCbits 000F8B                               _LATDbits 000F8C  
                             _LATEbits 000F8D                           _inputHandler 2D8C  
                          ??i2_isdigit 0001                           BlockerTest@i 00AC  
                             _PIR2bits 000FA1                               i2u453_40 1AB2  
                             i2u453_47 1AA8                               i2u449_40 1A52  
                             i2u449_47 1A48                               i2u394_40 4A28  
                             i2u742_40 2CCC                               i2u494_40 25B0  
                             i2u891_47 2DCA                               i2u892_47 439A  
                             i2u893_47 43A4                               i2u894_47 43C6  
                             i2u895_47 43D0                    __size_of_updateMenu 02C0  
                       _log_completion 00EE                       __CFG_WDTPS$32768 000000  
                           ?_lcdNibble 0001                              _was_low_1 0079  
                            _was_low_3 007B                          ??_retrieveLog 0009  
                           _ADCON0bits 000FC2                      ___wmul@multiplier 0080  
                            _startTime 010E                               i2___wmul 49E4  
                        lcdNibble@data 0081                               i2_getRTC 4066  
                           printf@flag 00A7                          lcdNibble@temp 0080  
                           printf@prec 009E                               Loading@i 00BA  
                             i2_printf 192C                               i2_strcpy 46A6  
                       ?_algorithmTest 0001                    I2C_Master_Read@temp 0082  
                            copy_data0 443E                              readIR@res 0084  
                     __size_ofi2_putch 000C                             _EECON1bits 000FA6  
                __end_ofi2_EEPROM_read 4AFA                            _count_total 00FE  
                     ??_initGlobalVars 0080                               __Hrparam 0000  
                     __size_of_Loading 0232                              initTime@h 0081  
                            initTime@m 0080                              initTime@s 0086  
                            initTime@w 0082                               __Lrparam 0000  
                   __CFG_BOREN$SBORDIS 000000                              logRun@num 00B1  
                          ??_SpeedTest 00AB                  __end_of_initSortTimer 3C4A  
                         ??_initServos 0088                            ??_PortTests 0080  
                     __size_of___awdiv 00BE                       __size_of___awmod 00A2  
              _change_state_to_menu_11 4768             ?i2_change_state_to_menu_12 0001  
              _change_state_to_menu_12 45D0             ?i2_change_state_to_menu_22 0001  
              _change_state_to_menu_22 4598                _change_state_to_menu_23 4738  
                i2___wmul@multiplicand 0003                       __size_of___lldiv 00BC  
                     __size_of___lwdiv 0078                _change_state_to_logs_11 4858  
              _change_state_to_logs_12 4828                _change_state_to_logs_22 47F8  
              _change_state_to_logs_23 48E4                _change_state_to_logs_33 47C8  
              _change_state_to_logs_34 4798                       __size_of___lwmod 0062  
                       readADC@channel 0081                     i2I2C_Master_Read@a 0002  
                     __size_of_lcdInst 0010                       __size_of_handler 329E  
                           _EEPROMTest 4B94                        _I2C_Master_Init 4210  
                     __size_of_readADC 002C                        _I2C_Master_Read 48B6  
                     __size_of_initLCD 0046                           _f_ID_receive 0067  
                     __size_of_loadRTC 008C                       __size_of_readMAG 004C  
                      _I2C_Master_Wait 4AFA                        _I2C_Master_Stop 4B74  
                      BlockerTest@flag 00AE                       __size_of_isdigit 002A  
                             _delay_ms 4994                         _printSortTimer 2B9A  
                      ___lwdiv@divisor 0082                        ___lwdiv@counter 0086  
                  __end_of_retrieveLog 3506                               __ptext10 4994  
                             __ptext11 298A                               __ptext20 4912  
                             __ptext12 4270                               __ptext21 4A76  
                             __ptext13 32A6                               __ptext30 48B6  
                             __ptext22 4510                               __ptext14 361A  
                             __ptext31 4AFA                               __ptext23 08CA  
                             __ptext15 4AB6                               __ptext40 36FE  
                             __ptext32 4598                               __ptext24 1F98  
                             __ptext16 4888                               __ptext41 0012  
                             __ptext33 45D0                               __ptext25 4608  
                             __ptext17 3CEC                               __ptext50 389E  
                             __ptext42 3DFE                               __ptext34 3C4A  
                             __ptext26 3D78                               __ptext18 4210  
                             __ptext51 1170                               __ptext43 37D4  
                             __ptext35 3A26                               __ptext27 4B58  
                             __ptext19 3AE4                               __ptext60 2262  
                             __ptext52 4B20                               __ptext44 3E82  
                             __ptext36 3506                               __ptext28 4B74  
                             __ptext61 49BC                               __ptext53 496A  
                             __ptext45 42CC                               __ptext37 1C9A  
                             __ptext29 4B7C                               __ptext70 47C8  
                             __ptext62 2522                               __ptext54 463E  
                             __ptext46 4B94                               __ptext38 44C4  
                             __ptext71 48E4                               __ptext63 46A6  
                             __ptext55 41AE                               __ptext47 15A8  
                             __ptext39 493E                               __ptext80 4B40  
                             __ptext72 47F8                               __ptext64 2D8C  
                             __ptext56 3F06                               __ptext48 4328  
                             __ptext81 4A98                               __ptext73 4828  
                             __ptext65 46D8                               __ptext57 4B30  
                             __ptext49 3F7E                               __ptext90 4B8C  
                             __ptext82 49E4                               __ptext74 4858  
                             __ptext66 4708                               __ptext58 4146  
                             __ptext91 4A0A                               __ptext83 4556  
                             __ptext75 4A30                               __ptext67 4738  
                             __ptext92 4B0E                               __ptext84 43D8  
                             __ptext76 33E6                               __ptext68 4768  
                             __ptext85 4B4C                               __ptext77 4AE4  
                             __ptext69 4798                               __ptext86 4382  
                             __ptext78 2B9A                               __ptext87 4066  
                             __ptext79 192C                               __ptext88 4B62  
                             __ptext89 4B84                               _dispLogs 4A30  
                        ?_actuatorTest 0001                          ??_stopSignals 0080  
                           strcpy@from 0082                         i2_isdigit$1961 0002  
                   __end_of_initServos 4382                          __size_of_Test 0114  
                        ?_EEPROM_write 00AB                               _initTime 4A76  
                        __size_of_main 00C0                          __size_of_sort 0022  
       ??i2_change_state_to_menu_start 0043                               _logstate 00F6  
                  _updateServoPosition 3F7E                 __size_of_machineConfig 005C  
                        ??i2_lcdNibble 0001                               _printRTC 1F98  
                          ??_lcdNibble 0080                              printRTC@i 00C2  
                             int$flags 007E                           ??_sensorTest 00AB  
                       _log_total_time 00F4                     _f_can_coming_to_ID 0069  
                            printf@len 00A3                              printf@val 00A5  
    __end_ofi2_change_state_to_menu_12 4738      __end_ofi2_change_state_to_menu_22 4708  
                             loadRTC@i 0096                 __end_of_printSortTimer 2D8C  
                            putch@data 0082               __end_of_I2C_Master_Start 4B84  
                          _OSCTUNEbits 000F9B               __end_of_I2C_Master_Write 4B62  
                           _INTCONbits 000FF2                   ?_updateServoPosition 0080  
                         ??_updateMenu 0043                        ??_algorithmTest 00AB  
                           _MAG_signal 00E0                               isdigit@c 0082  
                        sensorTest@res 00AD                         ??_actuatorTest 00AB  
                             intlevel2 0000                         ??_EEPROM_write 00AE  
                   __end_of_sensorTest 1F98                       ___lwmod@dividend 0087  
                     ___lldiv@dividend 0080                           ?_EEPROM_read 0080  
                  __end_of_stopSignals 4AE4              ??_change_state_to_menu_11 002A  
            ??_change_state_to_menu_12 00AB              ??_change_state_to_menu_22 00AB  
            ??_change_state_to_menu_23 002A              ??_change_state_to_logs_11 002A  
            ??_change_state_to_logs_12 002A              ??_change_state_to_logs_22 002A  
            ??_change_state_to_logs_23 002A              ??_change_state_to_logs_33 002A  
            ??_change_state_to_logs_34 002A                               printf@ap 00A1  
                             printf@cp 009F                     __end_of_updateMenu 2522  
              __end_of_I2C_Master_Init 4270                __end_of_I2C_Master_Read 48E4  
              __end_of_I2C_Master_Wait 4B0E                          ??_BlockerTest 00AB  
              __end_of_I2C_Master_Stop 4B7C                            lcdInst@data 0082  
                        printRTC@F3217 0137                           retrieveLog@i 000E  
                          _retrieveLog 33E6                    __end_ofi2_lcdNibble 43D8  
                ??_updateServoPosition 0084                        ?_printSortTimer 0001  
                     ___lldiv@quotient 0088                      I2C_Master_Write@d 0081  
                          ?_EEPROMTest 0001                        ___lwmod@divisor 0089  
                    _f_can_distributed 012F                               strcpy@cp 0084  
                             strcpy@to 0080                          _machineConfig 4270  
                      ___lwmod@counter 008B                          printRTC@month 00BE  
                        ?_Distribution 0001                          _machine_state 00FC  
                        dispLogs@myLog 0012                     i2printRTC@INT_time 002D  
