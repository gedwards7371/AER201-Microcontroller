

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Wed Mar 15 11:44:31 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	text45,global,reloc=2,class=CODE,delta=1
    60                           	psect	text46,global,reloc=2,class=CODE,delta=1
    61                           	psect	text47,global,reloc=2,class=CODE,delta=1
    62                           	psect	text48,global,reloc=2,class=CODE,delta=1
    63                           	psect	text49,global,reloc=2,class=CODE,delta=1
    64                           	psect	text50,global,reloc=2,class=CODE,delta=1
    65                           	psect	text51,global,reloc=2,class=CODE,delta=1
    66                           	psect	text52,global,reloc=2,class=CODE,delta=1
    67                           	psect	text53,global,reloc=2,class=CODE,delta=1
    68                           	psect	text54,global,reloc=2,class=CODE,delta=1
    69                           	psect	text55,global,reloc=2,class=CODE,delta=1
    70                           	psect	text56,global,reloc=2,class=CODE,delta=1
    71                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    72                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    73                           	psect	text58,global,reloc=2,class=CODE,delta=1
    74                           	psect	text59,global,reloc=2,class=CODE,delta=1
    75                           	psect	text60,global,reloc=2,class=CODE,delta=1
    76                           	psect	text61,global,reloc=2,class=CODE,delta=1
    77                           	psect	text62,global,reloc=2,class=CODE,delta=1
    78                           	psect	text63,global,reloc=2,class=CODE,delta=1
    79                           	psect	text64,global,reloc=2,class=CODE,delta=1
    80                           	psect	text65,global,reloc=2,class=CODE,delta=1
    81                           	psect	text66,global,reloc=2,class=CODE,delta=1
    82                           	psect	text67,global,reloc=2,class=CODE,delta=1
    83                           	psect	text68,global,reloc=2,class=CODE,delta=1
    84                           	psect	text69,global,reloc=2,class=CODE,delta=1
    85                           	psect	text70,global,reloc=2,class=CODE,delta=1
    86                           	psect	text71,global,reloc=2,class=CODE,delta=1
    87                           	psect	text72,global,reloc=2,class=CODE,delta=1
    88                           	psect	text73,global,reloc=2,class=CODE,delta=1
    89                           	psect	text74,global,reloc=2,class=CODE,delta=1
    90                           	psect	text75,global,reloc=2,class=CODE,delta=1
    91                           	psect	text76,global,reloc=2,class=CODE,delta=1
    92                           	psect	text77,global,reloc=2,class=CODE,delta=1
    93                           	psect	text78,global,reloc=2,class=CODE,delta=1
    94                           	psect	text79,global,reloc=2,class=CODE,delta=1
    95                           	psect	text80,global,reloc=2,class=CODE,delta=1
    96                           	psect	text81,global,reloc=2,class=CODE,delta=1
    97                           	psect	text82,global,reloc=2,class=CODE,delta=1
    98                           	psect	text83,global,reloc=2,class=CODE,delta=1
    99                           	psect	text84,global,reloc=2,class=CODE,delta=1
   100                           	psect	text85,global,reloc=2,class=CODE,delta=1
   101                           	psect	text86,global,reloc=2,class=CODE,delta=1
   102                           	psect	text87,global,reloc=2,class=CODE,delta=1
   103                           	psect	text88,global,reloc=2,class=CODE,delta=1
   104                           	psect	text89,global,reloc=2,class=CODE,delta=1
   105                           	psect	text90,global,reloc=2,class=CODE,delta=1
   106                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   107                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   108                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   109  0000                     
   110                           ; Version 1.40
   111                           ; Generated 01/12/2016 GMT
   112                           ; 
   113                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
   114                           ; All rights reserved.
   115                           ; 
   116                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   117                           ; 
   118                           ; Redistribution and use in source and binary forms, with or without modification, are
   119                           ; permitted provided that the following conditions are met:
   120                           ; 
   121                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   122                           ;        conditions and the following disclaimer.
   123                           ; 
   124                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   125                           ;        of conditions and the following disclaimer in the documentation and/or other
   126                           ;        materials provided with the distribution.
   127                           ; 
   128                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   129                           ;        software without specific prior written permission.
   130                           ; 
   131                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   132                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   133                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   134                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   135                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   136                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   137                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   138                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   139                           ; 
   140                           ; 
   141                           ; Code-generator required, PIC18F4620 Definitions
   142                           ; 
   143                           ; SFR Addresses
   144  0000                     
   145                           	psect	idataBANK1
   146  004586                     __pidataBANK1:
   147                           	opt stack 0
   148                           
   149                           ;initializer for UI@F3222
   150  004586  4D                 	db	77
   151  004587  4D                 	db	77
   152  004588  4D                 	db	77
   153  004589  00                 	db	0
   154                           
   155                           ;initializer for printRTC@F3213
   156  00458A  4D                 	db	77
   157  00458B  4D                 	db	77
   158  00458C  4D                 	db	77
   159  00458D  00                 	db	0
   160                           
   161                           	psect	mediumconst
   162  00FB26                     __pmediumconst:
   163                           	opt stack 0
   164  00FB26  00                 	db	0
   165  00FB27                     _keys:
   166                           	opt stack 0
   167  00FB27  31                 	db	49
   168  00FB28  32                 	db	50
   169  00FB29  33                 	db	51
   170  00FB2A  41                 	db	65
   171  00FB2B  34                 	db	52
   172  00FB2C  35                 	db	53
   173  00FB2D  36                 	db	54
   174  00FB2E  42                 	db	66
   175  00FB2F  37                 	db	55
   176  00FB30  38                 	db	56
   177  00FB31  39                 	db	57
   178  00FB32  43                 	db	67
   179  00FB33  2A                 	db	42
   180  00FB34  30                 	db	48
   181  00FB35  23                 	db	35
   182  00FB36  44                 	db	68
   183  00FB37  00                 	db	0
   184  00FB38                     __end_of_keys:
   185                           	opt stack 0
   186  00FB38                     _dpowers:
   187                           	opt stack 0
   188  00FB38  0001               	dw	1
   189  00FB3A  000A               	dw	10
   190  00FB3C  0064               	dw	100
   191  00FB3E  03E8               	dw	1000
   192  00FB40  2710               	dw	10000
   193  00FB42                     __end_of_dpowers:
   194                           	opt stack 0
   195  0000                     _ADCON0	set	4034
   196  0000                     _ADCON0bits	set	4034
   197  0000                     _ADCON1	set	4033
   198  0000                     _ADCON2	set	4032
   199  0000                     _ADRESH	set	4036
   200  0000                     _ADRESL	set	4035
   201  0000                     _CMCONbits	set	4020
   202  0000                     _CVRCON	set	4021
   203  0000                     _EEADR	set	4009
   204  0000                     _EEADRH	set	4010
   205  0000                     _EECON1bits	set	4006
   206  0000                     _EECON2	set	4007
   207  0000                     _EEDATA	set	4008
   208  0000                     _INTCONbits	set	4082
   209  0000                     _LATA	set	3977
   210  0000                     _LATAbits	set	3977
   211  0000                     _LATB	set	3978
   212  0000                     _LATC	set	3979
   213  0000                     _LATCbits	set	3979
   214  0000                     _LATD	set	3980
   215  0000                     _LATDbits	set	3980
   216  0000                     _LATE	set	3981
   217  0000                     _LATEbits	set	3981
   218  0000                     _OSCCON	set	4051
   219  0000                     _OSCTUNEbits	set	3995
   220  0000                     _PIR2bits	set	4001
   221  0000                     _PORTAbits	set	3968
   222  0000                     _PORTB	set	3969
   223  0000                     _PORTBbits	set	3969
   224  0000                     _SSPADD	set	4040
   225  0000                     _SSPBUF	set	4041
   226  0000                     _SSPCON1	set	4038
   227  0000                     _SSPCON2	set	4037
   228  0000                     _SSPSTAT	set	4039
   229  0000                     _T0CON	set	4053
   230  0000                     _T1CON	set	4045
   231  0000                     _T3CON	set	4017
   232  0000                     _TMR0H	set	4055
   233  0000                     _TMR0L	set	4054
   234  0000                     _TMR1H	set	4047
   235  0000                     _TMR1L	set	4046
   236  0000                     _TMR3H	set	4019
   237  0000                     _TMR3L	set	4018
   238  0000                     _TRISA	set	3986
   239  0000                     _TRISB	set	3987
   240  0000                     _TRISC	set	3988
   241  0000                     _TRISD	set	3989
   242  0000                     _TRISE	set	3990
   243  0000                     _ACKDT	set	32301
   244  0000                     _ACKEN	set	32300
   245  0000                     _ADIE	set	31982
   246  0000                     _INT1IE	set	32643
   247  0000                     _INT1IF	set	32640
   248  0000                     _PEIE	set	32662
   249  0000                     _PEN	set	32298
   250  0000                     _RCEN	set	32299
   251  0000                     _RSEN	set	32297
   252  0000                     _SEN	set	32296
   253  0000                     _TMR0IE	set	32661
   254  0000                     _TMR0IF	set	32658
   255  0000                     _TMR0ON	set	32431
   256  0000                     _TMR1IE	set	31976
   257  0000                     _TMR1IF	set	31984
   258  0000                     _TMR1ON	set	32360
   259  0000                     _TMR2IE	set	31977
   260  0000                     _TMR3IE	set	32001
   261  0000                     _TMR3IF	set	32009
   262  0000                     _TMR3ON	set	32136
   263  0000                     _TRISC3	set	31907
   264  0000                     _TRISC4	set	31908
   265  0000                     _nRBPU	set	32655
   266  00FB42                     STR_21:
   267  00FB42  25                 	db	37
   268  00FB43  30                 	db	48	;'0'
   269  00FB44  32                 	db	50	;'2'
   270  00FB45  64                 	db	100	;'d'
   271  00FB46  25                 	db	37
   272  00FB47  73                 	db	115	;'s'
   273  00FB48  20                 	db	32
   274  00FB49  7C                 	db	124
   275  00FB4A  20                 	db	32
   276  00FB4B  25                 	db	37
   277  00FB4C  30                 	db	48	;'0'
   278  00FB4D  32                 	db	50	;'2'
   279  00FB4E  64                 	db	100	;'d'
   280  00FB4F  3A                 	db	58	;':'
   281  00FB50  25                 	db	37
   282  00FB51  30                 	db	48	;'0'
   283  00FB52  32                 	db	50	;'2'
   284  00FB53  64                 	db	100	;'d'
   285  00FB54  3A                 	db	58	;':'
   286  00FB55  25                 	db	37
   287  00FB56  30                 	db	48	;'0'
   288  00FB57  32                 	db	50	;'2'
   289  00FB58  64                 	db	100	;'d'
   290  00FB59  00                 	db	0
   291  00FB5A                     STR_66:
   292  00FB5A  28                 	db	40
   293  00FB5B  64                 	db	100	;'d'
   294  00FB5C  61                 	db	97	;'a'
   295  00FB5D  74                 	db	116	;'t'
   296  00FB5E  61                 	db	97	;'a'
   297  00FB5F  3A                 	db	58	;':'
   298  00FB60  20                 	db	32
   299  00FB61  25                 	db	37
   300  00FB62  75                 	db	117	;'u'
   301  00FB63  2C                 	db	44
   302  00FB64  20                 	db	32
   303  00FB65  61                 	db	97	;'a'
   304  00FB66  64                 	db	100	;'d'
   305  00FB67  64                 	db	100	;'d'
   306  00FB68  72                 	db	114	;'r'
   307  00FB69  3A                 	db	58	;':'
   308  00FB6A  20                 	db	32
   309  00FB6B  25                 	db	37
   310  00FB6C  75                 	db	117	;'u'
   311  00FB6D  29                 	db	41
   312  00FB6E  00                 	db	0
   313  00FB6F                     STR_27:
   314  00FB6F  4E                 	db	78	;'N'
   315  00FB70  4F                 	db	79	;'O'
   316  00FB71  20                 	db	32
   317  00FB72  4C                 	db	76	;'L'
   318  00FB73  41                 	db	65	;'A'
   319  00FB74  42                 	db	66	;'B'
   320  00FB75  3A                 	db	58	;':'
   321  00FB76  20                 	db	32
   322  00FB77  25                 	db	37
   323  00FB78  64                 	db	100	;'d'
   324  00FB79  7C                 	db	124
   325  00FB7A  4C                 	db	76	;'L'
   326  00FB7B  41                 	db	65	;'A'
   327  00FB7C  42                 	db	66	;'B'
   328  00FB7D  3A                 	db	58	;':'
   329  00FB7E  20                 	db	32
   330  00FB7F  25                 	db	37
   331  00FB80  64                 	db	100	;'d'
   332  00FB81  00                 	db	0
   333  00FB82                     STR_25:
   334  00FB82  4E                 	db	78	;'N'
   335  00FB83  4F                 	db	79	;'O'
   336  00FB84  20                 	db	32
   337  00FB85  54                 	db	84	;'T'
   338  00FB86  41                 	db	65	;'A'
   339  00FB87  42                 	db	66	;'B'
   340  00FB88  3A                 	db	58	;':'
   341  00FB89  20                 	db	32
   342  00FB8A  25                 	db	37
   343  00FB8B  64                 	db	100	;'d'
   344  00FB8C  7C                 	db	124
   345  00FB8D  54                 	db	84	;'T'
   346  00FB8E  41                 	db	65	;'A'
   347  00FB8F  42                 	db	66	;'B'
   348  00FB90  3A                 	db	58	;':'
   349  00FB91  20                 	db	32
   350  00FB92  25                 	db	37
   351  00FB93  64                 	db	100	;'d'
   352  00FB94  00                 	db	0
   353  00FB95                     STR_106:
   354  00FB95  44                 	db	68	;'D'
   355  00FB96  20                 	db	32
   356  00FB97  57                 	db	87	;'W'
   357  00FB98  49                 	db	73	;'I'
   358  00FB99  4C                 	db	76	;'L'
   359  00FB9A  4C                 	db	76	;'L'
   360  00FB9B  20                 	db	32
   361  00FB9C  52                 	db	82	;'R'
   362  00FB9D  45                 	db	69	;'E'
   363  00FB9E  54                 	db	84	;'T'
   364  00FB9F  55                 	db	85	;'U'
   365  00FBA0  52                 	db	82	;'R'
   366  00FBA1  4E                 	db	78	;'N'
   367  00FBA2  20                 	db	32
   368  00FBA3  20                 	db	32
   369  00FBA4  20                 	db	32
   370  00FBA5  20                 	db	32
   371  00FBA6  00                 	db	0
   372  00FBA7                     STR_107:
   373  00FBA7  4F                 	db	79	;'O'
   374  00FBA8  54                 	db	84	;'T'
   375  00FBA9  48                 	db	72	;'H'
   376  00FBAA  45                 	db	69	;'E'
   377  00FBAB  52                 	db	82	;'R'
   378  00FBAC  20                 	db	32
   379  00FBAD  53                 	db	83	;'S'
   380  00FBAE  45                 	db	69	;'E'
   381  00FBAF  54                 	db	84	;'T'
   382  00FBB0  53                 	db	83	;'S'
   383  00FBB1  20                 	db	32
   384  00FBB2  52                 	db	82	;'R'
   385  00FBB3  41                 	db	65	;'A'
   386  00FBB4  35                 	db	53	;'5'
   387  00FBB5  20                 	db	32
   388  00FBB6  20                 	db	32
   389  00FBB7  20                 	db	32
   390  00FBB8  00                 	db	0
   391  00FBB9                     STR_3:
   392  00FBB9  2D                 	db	45
   393  00FBBA  2D                 	db	45
   394  00FBBB  20                 	db	32
   395  00FBBC  4C                 	db	76	;'L'
   396  00FBBD  4F                 	db	79	;'O'
   397  00FBBE  47                 	db	71	;'G'
   398  00FBBF  20                 	db	32
   399  00FBC0  25                 	db	37
   400  00FBC1  32                 	db	50	;'2'
   401  00FBC2  64                 	db	100	;'d'
   402  00FBC3  20                 	db	32
   403  00FBC4  48                 	db	72	;'H'
   404  00FBC5  45                 	db	69	;'E'
   405  00FBC6  52                 	db	82	;'R'
   406  00FBC7  45                 	db	69	;'E'
   407  00FBC8  2D                 	db	45
   408  00FBC9  2D                 	db	45
   409  00FBCA  00                 	db	0
   410  00FBCB                     STR_1:
   411  00FBCB  52                 	db	82	;'R'
   412  00FBCC  45                 	db	69	;'E'
   413  00FBCD  53                 	db	83	;'S'
   414  00FBCE  55                 	db	85	;'U'
   415  00FBCF  4C                 	db	76	;'L'
   416  00FBD0  54                 	db	84	;'T'
   417  00FBD1  53                 	db	83	;'S'
   418  00FBD2  20                 	db	32
   419  00FBD3  49                 	db	73	;'I'
   420  00FBD4  4E                 	db	78	;'N'
   421  00FBD5  20                 	db	32
   422  00FBD6  4C                 	db	76	;'L'
   423  00FBD7  4F                 	db	79	;'O'
   424  00FBD8  47                 	db	71	;'G'
   425  00FBD9  20                 	db	32
   426  00FBDA  25                 	db	37
   427  00FBDB  64                 	db	100	;'d'
   428  00FBDC  00                 	db	0
   429  00FBDD                     STR_97:
   430  00FBDD  4D                 	db	77	;'M'
   431  00FBDE  49                 	db	73	;'I'
   432  00FBDF  44                 	db	68	;'D'
   433  00FBE0  20                 	db	32
   434  00FBE1  2D                 	db	45
   435  00FBE2  2D                 	db	45
   436  00FBE3  20                 	db	32
   437  00FBE4  32                 	db	50	;'2'
   438  00FBE5  73                 	db	115	;'s'
   439  00FBE6  20                 	db	32
   440  00FBE7  20                 	db	32
   441  00FBE8  20                 	db	32
   442  00FBE9  20                 	db	32
   443  00FBEA  20                 	db	32
   444  00FBEB  20                 	db	32
   445  00FBEC  20                 	db	32
   446  00FBED  00                 	db	0
   447  00FBEE                     STR_100:
   448  00FBEE  44                 	db	68	;'D'
   449  00FBEF  52                 	db	82	;'R'
   450  00FBF0  4F                 	db	79	;'O'
   451  00FBF1  50                 	db	80	;'P'
   452  00FBF2  20                 	db	32
   453  00FBF3  2D                 	db	45
   454  00FBF4  2D                 	db	45
   455  00FBF5  20                 	db	32
   456  00FBF6  32                 	db	50	;'2'
   457  00FBF7  73                 	db	115	;'s'
   458  00FBF8  20                 	db	32
   459  00FBF9  20                 	db	32
   460  00FBFA  20                 	db	32
   461  00FBFB  20                 	db	32
   462  00FBFC  20                 	db	32
   463  00FBFD  20                 	db	32
   464  00FBFE  00                 	db	0
   465  00FBFF                     STR_94:
   466  00FBFF  4C                 	db	76	;'L'
   467  00FC00  45                 	db	69	;'E'
   468  00FC01  46                 	db	70	;'F'
   469  00FC02  54                 	db	84	;'T'
   470  00FC03  20                 	db	32
   471  00FC04  2D                 	db	45
   472  00FC05  2D                 	db	45
   473  00FC06  20                 	db	32
   474  00FC07  32                 	db	50	;'2'
   475  00FC08  73                 	db	115	;'s'
   476  00FC09  20                 	db	32
   477  00FC0A  20                 	db	32
   478  00FC0B  20                 	db	32
   479  00FC0C  20                 	db	32
   480  00FC0D  20                 	db	32
   481  00FC0E  20                 	db	32
   482  00FC0F  00                 	db	0
   483  00FC10                     STR_99:
   484  00FC10  4C                 	db	76	;'L'
   485  00FC11  45                 	db	69	;'E'
   486  00FC12  56                 	db	86	;'V'
   487  00FC13  45                 	db	69	;'E'
   488  00FC14  4C                 	db	76	;'L'
   489  00FC15  20                 	db	32
   490  00FC16  2D                 	db	45
   491  00FC17  2D                 	db	45
   492  00FC18  20                 	db	32
   493  00FC19  32                 	db	50	;'2'
   494  00FC1A  73                 	db	115	;'s'
   495  00FC1B  20                 	db	32
   496  00FC1C  20                 	db	32
   497  00FC1D  20                 	db	32
   498  00FC1E  20                 	db	32
   499  00FC1F  20                 	db	32
   500  00FC20  00                 	db	0
   501  00FC21                     STR_93:
   502  00FC21  52                 	db	82	;'R'
   503  00FC22  49                 	db	73	;'I'
   504  00FC23  47                 	db	71	;'G'
   505  00FC24  48                 	db	72	;'H'
   506  00FC25  54                 	db	84	;'T'
   507  00FC26  20                 	db	32
   508  00FC27  2D                 	db	45
   509  00FC28  2D                 	db	45
   510  00FC29  20                 	db	32
   511  00FC2A  32                 	db	50	;'2'
   512  00FC2B  73                 	db	115	;'s'
   513  00FC2C  20                 	db	32
   514  00FC2D  20                 	db	32
   515  00FC2E  20                 	db	32
   516  00FC2F  20                 	db	32
   517  00FC30  20                 	db	32
   518  00FC31  00                 	db	0
   519  00FC32                     STR_92:
   520  00FC32  4D                 	db	77	;'M'
   521  00FC33  49                 	db	73	;'I'
   522  00FC34  44                 	db	68	;'D'
   523  00FC35  44                 	db	68	;'D'
   524  00FC36  4C                 	db	76	;'L'
   525  00FC37  45                 	db	69	;'E'
   526  00FC38  20                 	db	32
   527  00FC39  2D                 	db	45
   528  00FC3A  2D                 	db	45
   529  00FC3B  20                 	db	32
   530  00FC3C  32                 	db	50	;'2'
   531  00FC3D  73                 	db	115	;'s'
   532  00FC3E  20                 	db	32
   533  00FC3F  20                 	db	32
   534  00FC40  20                 	db	32
   535  00FC41  20                 	db	32
   536  00FC42  00                 	db	0
   537  00FC43                     STR_110:
   538  00FC43  44                 	db	68	;'D'
   539  00FC44  20                 	db	32
   540  00FC45  57                 	db	87	;'W'
   541  00FC46  49                 	db	73	;'I'
   542  00FC47  4C                 	db	76	;'L'
   543  00FC48  4C                 	db	76	;'L'
   544  00FC49  20                 	db	32
   545  00FC4A  52                 	db	82	;'R'
   546  00FC4B  45                 	db	69	;'E'
   547  00FC4C  54                 	db	84	;'T'
   548  00FC4D  55                 	db	85	;'U'
   549  00FC4E  52                 	db	82	;'R'
   550  00FC4F  4E                 	db	78	;'N'
   551  00FC50  20                 	db	32
   552  00FC51  20                 	db	32
   553  00FC52  20                 	db	32
   554  00FC53  00                 	db	0
   555  00FC54                     STR_95:
   556  00FC54  4D                 	db	77	;'M'
   557  00FC55  49                 	db	73	;'I'
   558  00FC56  44                 	db	68	;'D'
   559  00FC57  2D                 	db	45
   560  00FC58  4C                 	db	76	;'L'
   561  00FC59  45                 	db	69	;'E'
   562  00FC5A  46                 	db	70	;'F'
   563  00FC5B  54                 	db	84	;'T'
   564  00FC5C  20                 	db	32
   565  00FC5D  2D                 	db	45
   566  00FC5E  2D                 	db	45
   567  00FC5F  20                 	db	32
   568  00FC60  32                 	db	50	;'2'
   569  00FC61  73                 	db	115	;'s'
   570  00FC62  20                 	db	32
   571  00FC63  20                 	db	32
   572  00FC64  00                 	db	0
   573  00FC65                     STR_96:
   574  00FC65  4D                 	db	77	;'M'
   575  00FC66  49                 	db	73	;'I'
   576  00FC67  44                 	db	68	;'D'
   577  00FC68  2D                 	db	45
   578  00FC69  52                 	db	82	;'R'
   579  00FC6A  49                 	db	73	;'I'
   580  00FC6B  47                 	db	71	;'G'
   581  00FC6C  48                 	db	72	;'H'
   582  00FC6D  54                 	db	84	;'T'
   583  00FC6E  20                 	db	32
   584  00FC6F  2D                 	db	45
   585  00FC70  2D                 	db	45
   586  00FC71  20                 	db	32
   587  00FC72  32                 	db	50	;'2'
   588  00FC73  73                 	db	115	;'s'
   589  00FC74  20                 	db	32
   590  00FC75  00                 	db	0
   591  00FC76                     STR_111:
   592  00FC76  45                 	db	69	;'E'
   593  00FC77  4C                 	db	76	;'L'
   594  00FC78  53                 	db	83	;'S'
   595  00FC79  45                 	db	69	;'E'
   596  00FC7A  20                 	db	32
   597  00FC7B  54                 	db	84	;'T'
   598  00FC7C  4F                 	db	79	;'O'
   599  00FC7D  47                 	db	71	;'G'
   600  00FC7E  47                 	db	71	;'G'
   601  00FC7F  4C                 	db	76	;'L'
   602  00FC80  45                 	db	69	;'E'
   603  00FC81  53                 	db	83	;'S'
   604  00FC82  20                 	db	32
   605  00FC83  52                 	db	82	;'R'
   606  00FC84  41                 	db	65	;'A'
   607  00FC85  35                 	db	53	;'5'
   608  00FC86  00                 	db	0
   609  00FC87                     STR_72:
   610  00FC87  41                 	db	65	;'A'
   611  00FC88  4C                 	db	76	;'L'
   612  00FC89  47                 	db	71	;'G'
   613  00FC8A  31                 	db	49	;'1'
   614  00FC8B  3A                 	db	58	;':'
   615  00FC8C  20                 	db	32
   616  00FC8D  39                 	db	57	;'9'
   617  00FC8E  20                 	db	32
   618  00FC8F  50                 	db	80	;'P'
   619  00FC90  4F                 	db	79	;'O'
   620  00FC91  50                 	db	80	;'P'
   621  00FC92  4E                 	db	78	;'N'
   622  00FC93  4F                 	db	79	;'O'
   623  00FC94  54                 	db	84	;'T'
   624  00FC95  41                 	db	65	;'A'
   625  00FC96  42                 	db	66	;'B'
   626  00FC97  00                 	db	0
   627  00FC98                     STR_68:
   628  00FC98  31                 	db	49	;'1'
   629  00FC99  2E                 	db	46
   630  00FC9A  41                 	db	65	;'A'
   631  00FC9B  4C                 	db	76	;'L'
   632  00FC9C  47                 	db	71	;'G'
   633  00FC9D  7C                 	db	124
   634  00FC9E  32                 	db	50	;'2'
   635  00FC9F  2E                 	db	46
   636  00FCA0  53                 	db	83	;'S'
   637  00FCA1  4E                 	db	78	;'N'
   638  00FCA2  52                 	db	82	;'R'
   639  00FCA3  7C                 	db	124
   640  00FCA4  33                 	db	51	;'3'
   641  00FCA5  2E                 	db	46
   642  00FCA6  41                 	db	65	;'A'
   643  00FCA7  43                 	db	67	;'C'
   644  00FCA8  00                 	db	0
   645  00FCA9                     STR_87:
   646  00FCA9  54                 	db	84	;'T'
   647  00FCAA  53                 	db	83	;'S'
   648  00FCAB  54                 	db	84	;'T'
   649  00FCAC  3A                 	db	58	;':'
   650  00FCAD  20                 	db	32
   651  00FCAE  43                 	db	67	;'C'
   652  00FCAF  4F                 	db	79	;'O'
   653  00FCB0  4E                 	db	78	;'N'
   654  00FCB1  44                 	db	68	;'D'
   655  00FCB2  20                 	db	32
   656  00FCB3  53                 	db	83	;'S'
   657  00FCB4  4F                 	db	79	;'O'
   658  00FCB5  4C                 	db	76	;'L'
   659  00FCB6  4E                 	db	78	;'N'
   660  00FCB7  27                 	db	39
   661  00FCB8  44                 	db	68	;'D'
   662  00FCB9  00                 	db	0
   663  00FCBA                     STR_89:
   664  00FCBA  54                 	db	84	;'T'
   665  00FCBB  53                 	db	83	;'S'
   666  00FCBC  54                 	db	84	;'T'
   667  00FCBD  3A                 	db	58	;':'
   668  00FCBE  20                 	db	32
   669  00FCBF  50                 	db	80	;'P'
   670  00FCC0  55                 	db	85	;'U'
   671  00FCC1  53                 	db	83	;'S'
   672  00FCC2  48                 	db	72	;'H'
   673  00FCC3  20                 	db	32
   674  00FCC4  53                 	db	83	;'S'
   675  00FCC5  4F                 	db	79	;'O'
   676  00FCC6  4C                 	db	76	;'L'
   677  00FCC7  4E                 	db	78	;'N'
   678  00FCC8  27                 	db	39
   679  00FCC9  44                 	db	68	;'D'
   680  00FCCA  00                 	db	0
   681  00FCCB                     STR_69:
   682  00FCCB  34                 	db	52	;'4'
   683  00FCCC  2E                 	db	46
   684  00FCCD  48                 	db	72	;'H'
   685  00FCCE  49                 	db	73	;'I'
   686  00FCCF  7C                 	db	124
   687  00FCD0  35                 	db	53	;'5'
   688  00FCD1  2E                 	db	46
   689  00FCD2  54                 	db	84	;'T'
   690  00FCD3  4F                 	db	79	;'O'
   691  00FCD4  47                 	db	71	;'G'
   692  00FCD5  7C                 	db	124
   693  00FCD6  36                 	db	54	;'6'
   694  00FCD7  2E                 	db	46
   695  00FCD8  45                 	db	69	;'E'
   696  00FCD9  45                 	db	69	;'E'
   697  00FCDA  50                 	db	80	;'P'
   698  00FCDB  00                 	db	0
   699  00FCDC                     STR_105:
   700  00FCDC  54                 	db	84	;'T'
   701  00FCDD  53                 	db	83	;'S'
   702  00FCDE  54                 	db	84	;'T'
   703  00FCDF  3A                 	db	58	;':'
   704  00FCE0  20                 	db	32
   705  00FCE1  42                 	db	66	;'B'
   706  00FCE2  4F                 	db	79	;'O'
   707  00FCE3  54                 	db	84	;'T'
   708  00FCE4  48                 	db	72	;'H'
   709  00FCE5  20                 	db	32
   710  00FCE6  53                 	db	83	;'S'
   711  00FCE7  45                 	db	69	;'E'
   712  00FCE8  52                 	db	82	;'R'
   713  00FCE9  56                 	db	86	;'V'
   714  00FCEA  4F                 	db	79	;'O'
   715  00FCEB  53                 	db	83	;'S'
   716  00FCEC  00                 	db	0
   717  00FCED                     STR_41:
   718  00FCED  4C                 	db	76	;'L'
   719  00FCEE  4F                 	db	79	;'O'
   720  00FCEF  47                 	db	71	;'G'
   721  00FCF0  20                 	db	32
   722  00FCF1  31                 	db	49	;'1'
   723  00FCF2  20                 	db	32
   724  00FCF3  20                 	db	32
   725  00FCF4  20                 	db	32
   726  00FCF5  20                 	db	32
   727  00FCF6  20                 	db	32
   728  00FCF7  20                 	db	32
   729  00FCF8  20                 	db	32
   730  00FCF9  20                 	db	32
   731  00FCFA  20                 	db	32
   732  00FCFB  20                 	db	32
   733  00FCFC  20                 	db	32
   734  00FCFD  00                 	db	0
   735  00FCFE                     STR_40:
   736  00FCFE  4C                 	db	76	;'L'
   737  00FCFF  4F                 	db	79	;'O'
   738  00FD00  47                 	db	71	;'G'
   739  00FD01  20                 	db	32
   740  00FD02  32                 	db	50	;'2'
   741  00FD03  20                 	db	32
   742  00FD04  20                 	db	32
   743  00FD05  20                 	db	32
   744  00FD06  20                 	db	32
   745  00FD07  20                 	db	32
   746  00FD08  20                 	db	32
   747  00FD09  20                 	db	32
   748  00FD0A  20                 	db	32
   749  00FD0B  20                 	db	32
   750  00FD0C  20                 	db	32
   751  00FD0D  20                 	db	32
   752  00FD0E  00                 	db	0
   753  00FD0F                     STR_44:
   754  00FD0F  4C                 	db	76	;'L'
   755  00FD10  4F                 	db	79	;'O'
   756  00FD11  47                 	db	71	;'G'
   757  00FD12  20                 	db	32
   758  00FD13  33                 	db	51	;'3'
   759  00FD14  20                 	db	32
   760  00FD15  20                 	db	32
   761  00FD16  20                 	db	32
   762  00FD17  20                 	db	32
   763  00FD18  20                 	db	32
   764  00FD19  20                 	db	32
   765  00FD1A  20                 	db	32
   766  00FD1B  20                 	db	32
   767  00FD1C  20                 	db	32
   768  00FD1D  20                 	db	32
   769  00FD1E  20                 	db	32
   770  00FD1F  00                 	db	0
   771  00FD20                     STR_48:
   772  00FD20  4C                 	db	76	;'L'
   773  00FD21  4F                 	db	79	;'O'
   774  00FD22  47                 	db	71	;'G'
   775  00FD23  20                 	db	32
   776  00FD24  34                 	db	52	;'4'
   777  00FD25  20                 	db	32
   778  00FD26  20                 	db	32
   779  00FD27  20                 	db	32
   780  00FD28  20                 	db	32
   781  00FD29  20                 	db	32
   782  00FD2A  20                 	db	32
   783  00FD2B  20                 	db	32
   784  00FD2C  20                 	db	32
   785  00FD2D  20                 	db	32
   786  00FD2E  20                 	db	32
   787  00FD2F  20                 	db	32
   788  00FD30  00                 	db	0
   789  00FD31                     STR_36:
   790  00FD31  33                 	db	51	;'3'
   791  00FD32  2E                 	db	46
   792  00FD33  20                 	db	32
   793  00FD34  4C                 	db	76	;'L'
   794  00FD35  4F                 	db	79	;'O'
   795  00FD36  47                 	db	71	;'G'
   796  00FD37  53                 	db	83	;'S'
   797  00FD38  20                 	db	32
   798  00FD39  20                 	db	32
   799  00FD3A  20                 	db	32
   800  00FD3B  20                 	db	32
   801  00FD3C  20                 	db	32
   802  00FD3D  20                 	db	32
   803  00FD3E  20                 	db	32
   804  00FD3F  20                 	db	32
   805  00FD40  20                 	db	32
   806  00FD41  00                 	db	0
   807  00FD42                     STR_32:
   808  00FD42  32                 	db	50	;'2'
   809  00FD43  2E                 	db	46
   810  00FD44  20                 	db	32
   811  00FD45  53                 	db	83	;'S'
   812  00FD46  4F                 	db	79	;'O'
   813  00FD47  52                 	db	82	;'R'
   814  00FD48  54                 	db	84	;'T'
   815  00FD49  20                 	db	32
   816  00FD4A  20                 	db	32
   817  00FD4B  20                 	db	32
   818  00FD4C  20                 	db	32
   819  00FD4D  20                 	db	32
   820  00FD4E  20                 	db	32
   821  00FD4F  20                 	db	32
   822  00FD50  20                 	db	32
   823  00FD51  20                 	db	32
   824  00FD52  00                 	db	0
   825  00FD53                     STR_33:
   826  00FD53  31                 	db	49	;'1'
   827  00FD54  2E                 	db	46
   828  00FD55  20                 	db	32
   829  00FD56  44                 	db	68	;'D'
   830  00FD57  41                 	db	65	;'A'
   831  00FD58  54                 	db	84	;'T'
   832  00FD59  45                 	db	69	;'E'
   833  00FD5A  2F                 	db	47
   834  00FD5B  54                 	db	84	;'T'
   835  00FD5C  49                 	db	73	;'I'
   836  00FD5D  4D                 	db	77	;'M'
   837  00FD5E  45                 	db	69	;'E'
   838  00FD5F  20                 	db	32
   839  00FD60  20                 	db	32
   840  00FD61  20                 	db	32
   841  00FD62  20                 	db	32
   842  00FD63  00                 	db	0
   843  00FD64                     STR_24:
   844  00FD64  20                 	db	32
   845  00FD65  2D                 	db	45
   846  00FD66  2D                 	db	45
   847  00FD67  20                 	db	32
   848  00FD68  50                 	db	80	;'P'
   849  00FD69  4F                 	db	79	;'O'
   850  00FD6A  50                 	db	80	;'P'
   851  00FD6B  20                 	db	32
   852  00FD6C  20                 	db	32
   853  00FD6D  43                 	db	67	;'C'
   854  00FD6E  41                 	db	65	;'A'
   855  00FD6F  4E                 	db	78	;'N'
   856  00FD70  20                 	db	32
   857  00FD71  2D                 	db	45
   858  00FD72  2D                 	db	45
   859  00FD73  20                 	db	32
   860  00FD74  00                 	db	0
   861  00FD75                     STR_26:
   862  00FD75  20                 	db	32
   863  00FD76  2D                 	db	45
   864  00FD77  2D                 	db	45
   865  00FD78  20                 	db	32
   866  00FD79  53                 	db	83	;'S'
   867  00FD7A  4F                 	db	79	;'O'
   868  00FD7B  55                 	db	85	;'U'
   869  00FD7C  50                 	db	80	;'P'
   870  00FD7D  20                 	db	32
   871  00FD7E  43                 	db	67	;'C'
   872  00FD7F  41                 	db	65	;'A'
   873  00FD80  4E                 	db	78	;'N'
   874  00FD81  20                 	db	32
   875  00FD82  2D                 	db	45
   876  00FD83  2D                 	db	45
   877  00FD84  20                 	db	32
   878  00FD85  00                 	db	0
   879  00FD86                     STR_28:
   880  00FD86  2D                 	db	45
   881  00FD87  2D                 	db	45
   882  00FD88  20                 	db	32
   883  00FD89  54                 	db	84	;'T'
   884  00FD8A  4F                 	db	79	;'O'
   885  00FD8B  54                 	db	84	;'T'
   886  00FD8C  41                 	db	65	;'A'
   887  00FD8D  4C                 	db	76	;'L'
   888  00FD8E  20                 	db	32
   889  00FD8F  43                 	db	67	;'C'
   890  00FD90  41                 	db	65	;'A'
   891  00FD91  4E                 	db	78	;'N'
   892  00FD92  53                 	db	83	;'S'
   893  00FD93  20                 	db	32
   894  00FD94  2D                 	db	45
   895  00FD95  2D                 	db	45
   896  00FD96  00                 	db	0
   897  00FD97                     STR_39:
   898  00FD97  4C                 	db	76	;'L'
   899  00FD98  4F                 	db	79	;'O'
   900  00FD99  47                 	db	71	;'G'
   901  00FD9A  20                 	db	32
   902  00FD9B  31                 	db	49	;'1'
   903  00FD9C  20                 	db	32
   904  00FD9D  20                 	db	32
   905  00FD9E  20                 	db	32
   906  00FD9F  20                 	db	32
   907  00FDA0  20                 	db	32
   908  00FDA1  20                 	db	32
   909  00FDA2  20                 	db	32
   910  00FDA3  20                 	db	32
   911  00FDA4  20                 	db	32
   912  00FDA5  20                 	db	32
   913  00FDA6  3C                 	db	60	;'<'
   914  00FDA7  00                 	db	0
   915  00FDA8                     STR_42:
   916  00FDA8  4C                 	db	76	;'L'
   917  00FDA9  4F                 	db	79	;'O'
   918  00FDAA  47                 	db	71	;'G'
   919  00FDAB  20                 	db	32
   920  00FDAC  32                 	db	50	;'2'
   921  00FDAD  20                 	db	32
   922  00FDAE  20                 	db	32
   923  00FDAF  20                 	db	32
   924  00FDB0  20                 	db	32
   925  00FDB1  20                 	db	32
   926  00FDB2  20                 	db	32
   927  00FDB3  20                 	db	32
   928  00FDB4  20                 	db	32
   929  00FDB5  20                 	db	32
   930  00FDB6  20                 	db	32
   931  00FDB7  3C                 	db	60	;'<'
   932  00FDB8  00                 	db	0
   933  00FDB9                     STR_46:
   934  00FDB9  4C                 	db	76	;'L'
   935  00FDBA  4F                 	db	79	;'O'
   936  00FDBB  47                 	db	71	;'G'
   937  00FDBC  20                 	db	32
   938  00FDBD  33                 	db	51	;'3'
   939  00FDBE  20                 	db	32
   940  00FDBF  20                 	db	32
   941  00FDC0  20                 	db	32
   942  00FDC1  20                 	db	32
   943  00FDC2  20                 	db	32
   944  00FDC3  20                 	db	32
   945  00FDC4  20                 	db	32
   946  00FDC5  20                 	db	32
   947  00FDC6  20                 	db	32
   948  00FDC7  20                 	db	32
   949  00FDC8  3C                 	db	60	;'<'
   950  00FDC9  00                 	db	0
   951  00FDCA                     STR_50:
   952  00FDCA  4C                 	db	76	;'L'
   953  00FDCB  4F                 	db	79	;'O'
   954  00FDCC  47                 	db	71	;'G'
   955  00FDCD  20                 	db	32
   956  00FDCE  34                 	db	52	;'4'
   957  00FDCF  20                 	db	32
   958  00FDD0  20                 	db	32
   959  00FDD1  20                 	db	32
   960  00FDD2  20                 	db	32
   961  00FDD3  20                 	db	32
   962  00FDD4  20                 	db	32
   963  00FDD5  20                 	db	32
   964  00FDD6  20                 	db	32
   965  00FDD7  20                 	db	32
   966  00FDD8  20                 	db	32
   967  00FDD9  3C                 	db	60	;'<'
   968  00FDDA  00                 	db	0
   969  00FDDB                     STR_38:
   970  00FDDB  33                 	db	51	;'3'
   971  00FDDC  2E                 	db	46
   972  00FDDD  20                 	db	32
   973  00FDDE  4C                 	db	76	;'L'
   974  00FDDF  4F                 	db	79	;'O'
   975  00FDE0  47                 	db	71	;'G'
   976  00FDE1  53                 	db	83	;'S'
   977  00FDE2  20                 	db	32
   978  00FDE3  20                 	db	32
   979  00FDE4  20                 	db	32
   980  00FDE5  20                 	db	32
   981  00FDE6  20                 	db	32
   982  00FDE7  20                 	db	32
   983  00FDE8  20                 	db	32
   984  00FDE9  20                 	db	32
   985  00FDEA  3C                 	db	60	;'<'
   986  00FDEB  00                 	db	0
   987  00FDEC                     STR_34:
   988  00FDEC  32                 	db	50	;'2'
   989  00FDED  2E                 	db	46
   990  00FDEE  20                 	db	32
   991  00FDEF  53                 	db	83	;'S'
   992  00FDF0  4F                 	db	79	;'O'
   993  00FDF1  52                 	db	82	;'R'
   994  00FDF2  54                 	db	84	;'T'
   995  00FDF3  20                 	db	32
   996  00FDF4  20                 	db	32
   997  00FDF5  20                 	db	32
   998  00FDF6  20                 	db	32
   999  00FDF7  20                 	db	32
  1000  00FDF8  20                 	db	32
  1001  00FDF9  20                 	db	32
  1002  00FDFA  20                 	db	32
  1003  00FDFB  3C                 	db	60	;'<'
  1004  00FDFC  00                 	db	0
  1005  00FDFD                     STR_31:
  1006  00FDFD  31                 	db	49	;'1'
  1007  00FDFE  2E                 	db	46
  1008  00FDFF  20                 	db	32
  1009  00FE00  44                 	db	68	;'D'
  1010  00FE01  41                 	db	65	;'A'
  1011  00FE02  54                 	db	84	;'T'
  1012  00FE03  45                 	db	69	;'E'
  1013  00FE04  2F                 	db	47
  1014  00FE05  54                 	db	84	;'T'
  1015  00FE06  49                 	db	73	;'I'
  1016  00FE07  4D                 	db	77	;'M'
  1017  00FE08  45                 	db	69	;'E'
  1018  00FE09  20                 	db	32
  1019  00FE0A  20                 	db	32
  1020  00FE0B  20                 	db	32
  1021  00FE0C  3C                 	db	60	;'<'
  1022  00FE0D  00                 	db	0
  1023  00FE0E                     STR_6:
  1024  00FE0E  50                 	db	80	;'P'
  1025  00FE0F  41                 	db	65	;'A'
  1026  00FE10  55                 	db	85	;'U'
  1027  00FE11  53                 	db	83	;'S'
  1028  00FE12  45                 	db	69	;'E'
  1029  00FE13  20                 	db	32
  1030  00FE14  3C                 	db	60	;'<'
  1031  00FE15  20                 	db	32
  1032  00FE16  7C                 	db	124
  1033  00FE17  20                 	db	32
  1034  00FE18  42                 	db	66	;'B'
  1035  00FE19  41                 	db	65	;'A'
  1036  00FE1A  43                 	db	67	;'C'
  1037  00FE1B  4B                 	db	75	;'K'
  1038  00FE1C  20                 	db	32
  1039  00FE1D  3E                 	db	62	;'>'
  1040  00FE1E  00                 	db	0
  1041  00FE1F                     STR_30:
  1042  00FE1F  50                 	db	80	;'P'
  1043  00FE20  55                 	db	85	;'U'
  1044  00FE21  53                 	db	83	;'S'
  1045  00FE22  48                 	db	72	;'H'
  1046  00FE23  20                 	db	32
  1047  00FE24  54                 	db	84	;'T'
  1048  00FE25  4F                 	db	79	;'O'
  1049  00FE26  20                 	db	32
  1050  00FE27  43                 	db	67	;'C'
  1051  00FE28  4F                 	db	79	;'O'
  1052  00FE29  4E                 	db	78	;'N'
  1053  00FE2A  54                 	db	84	;'T'
  1054  00FE2B  49                 	db	73	;'I'
  1055  00FE2C  4E                 	db	78	;'N'
  1056  00FE2D  55                 	db	85	;'U'
  1057  00FE2E  45                 	db	69	;'E'
  1058  00FE2F  00                 	db	0
  1059  00FE30                     STR_82:
  1060  00FE30  4D                 	db	77	;'M'
  1061  00FE31  41                 	db	65	;'A'
  1062  00FE32  47                 	db	71	;'G'
  1063  00FE33  5F                 	db	95	;'_'
  1064  00FE34  73                 	db	115	;'s'
  1065  00FE35  69                 	db	105	;'i'
  1066  00FE36  67                 	db	103	;'g'
  1067  00FE37  6E                 	db	110	;'n'
  1068  00FE38  61                 	db	97	;'a'
  1069  00FE39  6C                 	db	108	;'l'
  1070  00FE3A  3A                 	db	58	;':'
  1071  00FE3B  20                 	db	32
  1072  00FE3C  25                 	db	37
  1073  00FE3D  64                 	db	100	;'d'
  1074  00FE3E  20                 	db	32
  1075  00FE3F  00                 	db	0
  1076  00FE40                     STR_98:
  1077  00FE40  54                 	db	84	;'T'
  1078  00FE41  53                 	db	83	;'S'
  1079  00FE42  54                 	db	84	;'T'
  1080  00FE43  3A                 	db	58	;':'
  1081  00FE44  20                 	db	32
  1082  00FE45  54                 	db	84	;'T'
  1083  00FE46  49                 	db	73	;'I'
  1084  00FE47  4C                 	db	76	;'L'
  1085  00FE48  54                 	db	84	;'T'
  1086  00FE49  20                 	db	32
  1087  00FE4A  53                 	db	83	;'S'
  1088  00FE4B  45                 	db	69	;'E'
  1089  00FE4C  52                 	db	82	;'R'
  1090  00FE4D  56                 	db	86	;'V'
  1091  00FE4E  4F                 	db	79	;'O'
  1092  00FE4F  00                 	db	0
  1093  00FE50                     STR_4:
  1094  00FE50  44                 	db	68	;'D'
  1095  00FE51  49                 	db	73	;'I'
  1096  00FE52  44                 	db	68	;'D'
  1097  00FE53  4E                 	db	78	;'N'
  1098  00FE54  27                 	db	39
  1099  00FE55  54                 	db	84	;'T'
  1100  00FE56  20                 	db	32
  1101  00FE57  43                 	db	67	;'C'
  1102  00FE58  4F                 	db	79	;'O'
  1103  00FE59  4D                 	db	77	;'M'
  1104  00FE5A  50                 	db	80	;'P'
  1105  00FE5B  4C                 	db	76	;'L'
  1106  00FE5C  45                 	db	69	;'E'
  1107  00FE5D  54                 	db	84	;'T'
  1108  00FE5E  45                 	db	69	;'E'
  1109  00FE5F  00                 	db	0
  1110  00FE60                     STR_80:
  1111  00FE60  49                 	db	73	;'I'
  1112  00FE61  52                 	db	82	;'R'
  1113  00FE62  5F                 	db	95	;'_'
  1114  00FE63  73                 	db	115	;'s'
  1115  00FE64  69                 	db	105	;'i'
  1116  00FE65  67                 	db	103	;'g'
  1117  00FE66  6E                 	db	110	;'n'
  1118  00FE67  61                 	db	97	;'a'
  1119  00FE68  6C                 	db	108	;'l'
  1120  00FE69  3A                 	db	58	;':'
  1121  00FE6A  20                 	db	32
  1122  00FE6B  25                 	db	37
  1123  00FE6C  64                 	db	100	;'d'
  1124  00FE6D  20                 	db	32
  1125  00FE6E  00                 	db	0
  1126  00FE6F                     STR_104:
  1127  00FE6F  43                 	db	67	;'C'
  1128  00FE70  41                 	db	65	;'A'
  1129  00FE71  4D                 	db	77	;'M'
  1130  00FE72  20                 	db	32
  1131  00FE73  44                 	db	68	;'D'
  1132  00FE74  57                 	db	87	;'W'
  1133  00FE75  4E                 	db	78	;'N'
  1134  00FE76  20                 	db	32
  1135  00FE77  7C                 	db	124
  1136  00FE78  52                 	db	82	;'R'
  1137  00FE79  43                 	db	67	;'C'
  1138  00FE7A  30                 	db	48	;'0'
  1139  00FE7B  3D                 	db	61	;'='
  1140  00FE7C  30                 	db	48	;'0'
  1141  00FE7D  00                 	db	0
  1142  00FE7E                     STR_103:
  1143  00FE7E  43                 	db	67	;'C'
  1144  00FE7F  41                 	db	65	;'A'
  1145  00FE80  4D                 	db	77	;'M'
  1146  00FE81  20                 	db	32
  1147  00FE82  55                 	db	85	;'U'
  1148  00FE83  50                 	db	80	;'P'
  1149  00FE84  20                 	db	32
  1150  00FE85  20                 	db	32
  1151  00FE86  7C                 	db	124
  1152  00FE87  52                 	db	82	;'R'
  1153  00FE88  43                 	db	67	;'C'
  1154  00FE89  30                 	db	48	;'0'
  1155  00FE8A  3D                 	db	61	;'='
  1156  00FE8B  31                 	db	49	;'1'
  1157  00FE8C  00                 	db	0
  1158  00FE8D                     STR_81:
  1159  00FE8D  54                 	db	84	;'T'
  1160  00FE8E  53                 	db	83	;'S'
  1161  00FE8F  54                 	db	84	;'T'
  1162  00FE90  3A                 	db	58	;':'
  1163  00FE91  20                 	db	32
  1164  00FE92  4D                 	db	77	;'M'
  1165  00FE93  41                 	db	65	;'A'
  1166  00FE94  47                 	db	71	;'G'
  1167  00FE95  4E                 	db	78	;'N'
  1168  00FE96  45                 	db	69	;'E'
  1169  00FE97  54                 	db	84	;'T'
  1170  00FE98  49                 	db	73	;'I'
  1171  00FE99  53                 	db	83	;'S'
  1172  00FE9A  4D                 	db	77	;'M'
  1173  00FE9B  00                 	db	0
  1174  00FE9C                     STR_102:
  1175  00FE9C  54                 	db	84	;'T'
  1176  00FE9D  53                 	db	83	;'S'
  1177  00FE9E  54                 	db	84	;'T'
  1178  00FE9F  3A                 	db	58	;':'
  1179  00FEA0  20                 	db	32
  1180  00FEA1  43                 	db	67	;'C'
  1181  00FEA2  41                 	db	65	;'A'
  1182  00FEA3  4D                 	db	77	;'M'
  1183  00FEA4  20                 	db	32
  1184  00FEA5  53                 	db	83	;'S'
  1185  00FEA6  45                 	db	69	;'E'
  1186  00FEA7  52                 	db	82	;'R'
  1187  00FEA8  56                 	db	86	;'V'
  1188  00FEA9  4F                 	db	79	;'O'
  1189  00FEAA  00                 	db	0
  1190  00FEAB                     STR_91:
  1191  00FEAB  54                 	db	84	;'T'
  1192  00FEAC  53                 	db	83	;'S'
  1193  00FEAD  54                 	db	84	;'T'
  1194  00FEAE  3A                 	db	58	;':'
  1195  00FEAF  20                 	db	32
  1196  00FEB0  50                 	db	80	;'P'
  1197  00FEB1  41                 	db	65	;'A'
  1198  00FEB2  4E                 	db	78	;'N'
  1199  00FEB3  20                 	db	32
  1200  00FEB4  53                 	db	83	;'S'
  1201  00FEB5  45                 	db	69	;'E'
  1202  00FEB6  52                 	db	82	;'R'
  1203  00FEB7  56                 	db	86	;'V'
  1204  00FEB8  4F                 	db	79	;'O'
  1205  00FEB9  00                 	db	0
  1206  00FEBA                     STR_75:
  1207  00FEBA  41                 	db	65	;'A'
  1208  00FEBB  4C                 	db	76	;'L'
  1209  00FEBC  47                 	db	71	;'G'
  1210  00FEBD  34                 	db	52	;'4'
  1211  00FEBE  3A                 	db	58	;':'
  1212  00FEBF  20                 	db	32
  1213  00FEC0  41                 	db	65	;'A'
  1214  00FEC1  4C                 	db	76	;'L'
  1215  00FEC2  4C                 	db	76	;'L'
  1216  00FEC3  20                 	db	32
  1217  00FEC4  43                 	db	67	;'C'
  1218  00FEC5  41                 	db	65	;'A'
  1219  00FEC6  4E                 	db	78	;'N'
  1220  00FEC7  53                 	db	83	;'S'
  1221  00FEC8  00                 	db	0
  1222  00FEC9                     STR_85:
  1223  00FEC9  54                 	db	84	;'T'
  1224  00FECA  53                 	db	83	;'S'
  1225  00FECB  54                 	db	84	;'T'
  1226  00FECC  3A                 	db	58	;':'
  1227  00FECD  20                 	db	32
  1228  00FECE  44                 	db	68	;'D'
  1229  00FECF  43                 	db	67	;'C'
  1230  00FED0  20                 	db	32
  1231  00FED1  4D                 	db	77	;'M'
  1232  00FED2  4F                 	db	79	;'O'
  1233  00FED3  54                 	db	84	;'T'
  1234  00FED4  4F                 	db	79	;'O'
  1235  00FED5  52                 	db	82	;'R'
  1236  00FED6  53                 	db	83	;'S'
  1237  00FED7  00                 	db	0
  1238  00FED8                     STR_70:
  1239  00FED8  41                 	db	65	;'A'
  1240  00FED9  4C                 	db	76	;'L'
  1241  00FEDA  47                 	db	71	;'G'
  1242  00FEDB  4F                 	db	79	;'O'
  1243  00FEDC  52                 	db	82	;'R'
  1244  00FEDD  49                 	db	73	;'I'
  1245  00FEDE  54                 	db	84	;'T'
  1246  00FEDF  48                 	db	72	;'H'
  1247  00FEE0  4D                 	db	77	;'M'
  1248  00FEE1  20                 	db	32
  1249  00FEE2  54                 	db	84	;'T'
  1250  00FEE3  45                 	db	69	;'E'
  1251  00FEE4  53                 	db	83	;'S'
  1252  00FEE5  54                 	db	84	;'T'
  1253  00FEE6  00                 	db	0
  1254  00FEE7                     STR_86:
  1255  00FEE7  50                 	db	80	;'P'
  1256  00FEE8  49                 	db	73	;'I'
  1257  00FEE9  4E                 	db	78	;'N'
  1258  00FEEA  20                 	db	32
  1259  00FEEB  52                 	db	82	;'R'
  1260  00FEEC  41                 	db	65	;'A'
  1261  00FEED  35                 	db	53	;'5'
  1262  00FEEE  20                 	db	32
  1263  00FEEF  48                 	db	72	;'H'
  1264  00FEF0  49                 	db	73	;'I'
  1265  00FEF1  47                 	db	71	;'G'
  1266  00FEF2  48                 	db	72	;'H'
  1267  00FEF3  2E                 	db	46
  1268  00FEF4  00                 	db	0
  1269  00FEF5                     STR_73:
  1270  00FEF5  41                 	db	65	;'A'
  1271  00FEF6  4C                 	db	76	;'L'
  1272  00FEF7  47                 	db	71	;'G'
  1273  00FEF8  32                 	db	50	;'2'
  1274  00FEF9  3A                 	db	58	;':'
  1275  00FEFA  20                 	db	32
  1276  00FEFB  31                 	db	49	;'1'
  1277  00FEFC  32                 	db	50	;'2'
  1278  00FEFD  20                 	db	32
  1279  00FEFE  43                 	db	67	;'C'
  1280  00FEFF  41                 	db	65	;'A'
  1281  00FF00  4E                 	db	78	;'N'
  1282  00FF01  53                 	db	83	;'S'
  1283  00FF02  00                 	db	0
  1284  00FF03                     STR_76:
  1285  00FF03  41                 	db	65	;'A'
  1286  00FF04  4C                 	db	76	;'L'
  1287  00FF05  47                 	db	71	;'G'
  1288  00FF06  35                 	db	53	;'5'
  1289  00FF07  3A                 	db	58	;':'
  1290  00FF08  20                 	db	32
  1291  00FF09  4E                 	db	78	;'N'
  1292  00FF0A  4F                 	db	79	;'O'
  1293  00FF0B  20                 	db	32
  1294  00FF0C  43                 	db	67	;'C'
  1295  00FF0D  41                 	db	65	;'A'
  1296  00FF0E  4E                 	db	78	;'N'
  1297  00FF0F  53                 	db	83	;'S'
  1298  00FF10  00                 	db	0
  1299  00FF11                     STR_71:
  1300  00FF11  50                 	db	80	;'P'
  1301  00FF12  55                 	db	85	;'U'
  1302  00FF13  53                 	db	83	;'S'
  1303  00FF14  48                 	db	72	;'H'
  1304  00FF15  20                 	db	32
  1305  00FF16  54                 	db	84	;'T'
  1306  00FF17  4F                 	db	79	;'O'
  1307  00FF18  20                 	db	32
  1308  00FF19  53                 	db	83	;'S'
  1309  00FF1A  54                 	db	84	;'T'
  1310  00FF1B  41                 	db	65	;'A'
  1311  00FF1C  52                 	db	82	;'R'
  1312  00FF1D  54                 	db	84	;'T'
  1313  00FF1E  00                 	db	0
  1314  00FF1F                     STR_23:
  1315  00FF1F  25                 	db	37
  1316  00FF20  64                 	db	100	;'d'
  1317  00FF21  20                 	db	32
  1318  00FF22  4D                 	db	77	;'M'
  1319  00FF23  49                 	db	73	;'I'
  1320  00FF24  4E                 	db	78	;'N'
  1321  00FF25  20                 	db	32
  1322  00FF26  25                 	db	37
  1323  00FF27  64                 	db	100	;'d'
  1324  00FF28  20                 	db	32
  1325  00FF29  53                 	db	83	;'S'
  1326  00FF2A  45                 	db	69	;'E'
  1327  00FF2B  43                 	db	67	;'C'
  1328  00FF2C  00                 	db	0
  1329  00FF2D                     STR_2:
  1330  00FF2D  54                 	db	84	;'T'
  1331  00FF2E  49                 	db	73	;'I'
  1332  00FF2F  4D                 	db	77	;'M'
  1333  00FF30  45                 	db	69	;'E'
  1334  00FF31  3A                 	db	58	;':'
  1335  00FF32  20                 	db	32
  1336  00FF33  25                 	db	37
  1337  00FF34  64                 	db	100	;'d'
  1338  00FF35  3A                 	db	58	;':'
  1339  00FF36  25                 	db	37
  1340  00FF37  30                 	db	48	;'0'
  1341  00FF38  32                 	db	50	;'2'
  1342  00FF39  64                 	db	100	;'d'
  1343  00FF3A  00                 	db	0
  1344  00FF3B                     STR_79:
  1345  00FF3B  54                 	db	84	;'T'
  1346  00FF3C  53                 	db	83	;'S'
  1347  00FF3D  54                 	db	84	;'T'
  1348  00FF3E  3A                 	db	58	;':'
  1349  00FF3F  20                 	db	32
  1350  00FF40  49                 	db	73	;'I'
  1351  00FF41  52                 	db	82	;'R'
  1352  00FF42  20                 	db	32
  1353  00FF43  53                 	db	83	;'S'
  1354  00FF44  4E                 	db	78	;'N'
  1355  00FF45  53                 	db	83	;'S'
  1356  00FF46  52                 	db	82	;'R'
  1357  00FF47  00                 	db	0
  1358  00FF48                     STR_108:
  1359  00FF48  53                 	db	83	;'S'
  1360  00FF49  4F                 	db	79	;'O'
  1361  00FF4A  4C                 	db	76	;'L'
  1362  00FF4B  45                 	db	69	;'E'
  1363  00FF4C  4E                 	db	78	;'N'
  1364  00FF4D  4F                 	db	79	;'O'
  1365  00FF4E  49                 	db	73	;'I'
  1366  00FF4F  44                 	db	68	;'D'
  1367  00FF50  20                 	db	32
  1368  00FF51  54                 	db	84	;'T'
  1369  00FF52  53                 	db	83	;'S'
  1370  00FF53  54                 	db	84	;'T'
  1371  00FF54  00                 	db	0
  1372  00FF55                     STR_65:
  1373  00FF55  54                 	db	84	;'T'
  1374  00FF56  49                 	db	73	;'I'
  1375  00FF57  4D                 	db	77	;'M'
  1376  00FF58  45                 	db	69	;'E'
  1377  00FF59  20                 	db	32
  1378  00FF5A  25                 	db	37
  1379  00FF5B  64                 	db	100	;'d'
  1380  00FF5C  3A                 	db	58	;':'
  1381  00FF5D  25                 	db	37
  1382  00FF5E  30                 	db	48	;'0'
  1383  00FF5F  32                 	db	50	;'2'
  1384  00FF60  64                 	db	100	;'d'
  1385  00FF61  00                 	db	0
  1386  00FF62                     STR_74:
  1387  00FF62  41                 	db	65	;'A'
  1388  00FF63  4C                 	db	76	;'L'
  1389  00FF64  47                 	db	71	;'G'
  1390  00FF65  33                 	db	51	;'3'
  1391  00FF66  3A                 	db	58	;':'
  1392  00FF67  20                 	db	32
  1393  00FF68  31                 	db	49	;'1'
  1394  00FF69  20                 	db	32
  1395  00FF6A  43                 	db	67	;'C'
  1396  00FF6B  41                 	db	65	;'A'
  1397  00FF6C  4E                 	db	78	;'N'
  1398  00FF6D  00                 	db	0
  1399  00FF6E                     STR_88:
  1400  00FF6E  50                 	db	80	;'P'
  1401  00FF6F  49                 	db	73	;'I'
  1402  00FF70  4E                 	db	78	;'N'
  1403  00FF71  20                 	db	32
  1404  00FF72  52                 	db	82	;'R'
  1405  00FF73  41                 	db	65	;'A'
  1406  00FF74  33                 	db	51	;'3'
  1407  00FF75  2E                 	db	46
  1408  00FF76  2E                 	db	46
  1409  00FF77  2E                 	db	46
  1410  00FF78  00                 	db	0
  1411  00FF79                     STR_90:
  1412  00FF79  50                 	db	80	;'P'
  1413  00FF7A  49                 	db	73	;'I'
  1414  00FF7B  4E                 	db	78	;'N'
  1415  00FF7C  20                 	db	32
  1416  00FF7D  52                 	db	82	;'R'
  1417  00FF7E  41                 	db	65	;'A'
  1418  00FF7F  34                 	db	52	;'4'
  1419  00FF80  2E                 	db	46
  1420  00FF81  2E                 	db	46
  1421  00FF82  2E                 	db	46
  1422  00FF83  00                 	db	0
  1423  00FF84                     STR_64:
  1424  00FF84  53                 	db	83	;'S'
  1425  00FF85  4F                 	db	79	;'O'
  1426  00FF86  52                 	db	82	;'R'
  1427  00FF87  54                 	db	84	;'T'
  1428  00FF88  49                 	db	73	;'I'
  1429  00FF89  4E                 	db	78	;'N'
  1430  00FF8A  47                 	db	71	;'G'
  1431  00FF8B  2E                 	db	46
  1432  00FF8C  2E                 	db	46
  1433  00FF8D  2E                 	db	46
  1434  00FF8E  00                 	db	0
  1435  00FF8F                     STR_109:
  1436  00FF8F  50                 	db	80	;'P'
  1437  00FF90  55                 	db	85	;'U'
  1438  00FF91  53                 	db	83	;'S'
  1439  00FF92  48                 	db	72	;'H'
  1440  00FF93  20                 	db	32
  1441  00FF94  44                 	db	68	;'D'
  1442  00FF95  4F                 	db	79	;'O'
  1443  00FF96  4E                 	db	78	;'N'
  1444  00FF97  45                 	db	69	;'E'
  1445  00FF98  00                 	db	0
  1446  00FF99                     STR_83:
  1447  00FF99  41                 	db	65	;'A'
  1448  00FF9A  43                 	db	67	;'C'
  1449  00FF9B  54                 	db	84	;'T'
  1450  00FF9C  55                 	db	85	;'U'
  1451  00FF9D  41                 	db	65	;'A'
  1452  00FF9E  54                 	db	84	;'T'
  1453  00FF9F  4F                 	db	79	;'O'
  1454  00FFA0  52                 	db	82	;'R'
  1455  00FFA1  53                 	db	83	;'S'
  1456  00FFA2  00                 	db	0
  1457  00FFA3                     STR_22:
  1458  00FFA3  44                 	db	68	;'D'
  1459  00FFA4  55                 	db	85	;'U'
  1460  00FFA5  52                 	db	82	;'R'
  1461  00FFA6  41                 	db	65	;'A'
  1462  00FFA7  54                 	db	84	;'T'
  1463  00FFA8  49                 	db	73	;'I'
  1464  00FFA9  4F                 	db	79	;'O'
  1465  00FFAA  4E                 	db	78	;'N'
  1466  00FFAB  3A                 	db	58	;':'
  1467  00FFAC  00                 	db	0
  1468  00FFAD                     STR_77:
  1469  00FFAD  53                 	db	83	;'S'
  1470  00FFAE  45                 	db	69	;'E'
  1471  00FFAF  4E                 	db	78	;'N'
  1472  00FFB0  53                 	db	83	;'S'
  1473  00FFB1  4F                 	db	79	;'O'
  1474  00FFB2  52                 	db	82	;'R'
  1475  00FFB3  53                 	db	83	;'S'
  1476  00FFB4  00                 	db	0
  1477  00FFB5                     STR_112:
  1478  00FFB5  28                 	db	40
  1479  00FFB6  6E                 	db	110	;'n'
  1480  00FFB7  75                 	db	117	;'u'
  1481  00FFB8  6C                 	db	108	;'l'
  1482  00FFB9  6C                 	db	108	;'l'
  1483  00FFBA  29                 	db	41
  1484  00FFBB  00                 	db	0
  1485  00FFBC                     STR_67:
  1486  00FFBC  46                 	db	70	;'F'
  1487  00FFBD  41                 	db	65	;'A'
  1488  00FFBE  49                 	db	73	;'I'
  1489  00FFBF  4C                 	db	76	;'L'
  1490  00FFC0  45                 	db	69	;'E'
  1491  00FFC1  44                 	db	68	;'D'
  1492  00FFC2  00                 	db	0
  1493  00FFC3                     STR_7:
  1494  00FFC3  53                 	db	83	;'S'
  1495  00FFC4  54                 	db	84	;'T'
  1496  00FFC5  41                 	db	65	;'A'
  1497  00FFC6  52                 	db	82	;'R'
  1498  00FFC7  54                 	db	84	;'T'
  1499  00FFC8  3A                 	db	58	;':'
  1500  00FFC9  00                 	db	0
  1501  00FFCA                     STR_9:
  1502  00FFCA  46                 	db	70	;'F'
  1503  00FFCB  45                 	db	69	;'E'
  1504  00FFCC  42                 	db	66	;'B'
  1505  00FFCD  00                 	db	0
  1506  00FFCE                     STR_19:
  1507  00FFCE  44                 	db	68	;'D'
  1508  00FFCF  45                 	db	69	;'E'
  1509  00FFD0  43                 	db	67	;'C'
  1510  00FFD1  00                 	db	0
  1511  00FFD2                     STR_15:
  1512  00FFD2  41                 	db	65	;'A'
  1513  00FFD3  55                 	db	85	;'U'
  1514  00FFD4  47                 	db	71	;'G'
  1515  00FFD5  00                 	db	0
  1516  00FFD6                     STR_14:
  1517  00FFD6  4A                 	db	74	;'J'
  1518  00FFD7  55                 	db	85	;'U'
  1519  00FFD8  4C                 	db	76	;'L'
  1520  00FFD9  00                 	db	0
  1521  00FFDA                     STR_8:
  1522  00FFDA  4A                 	db	74	;'J'
  1523  00FFDB  41                 	db	65	;'A'
  1524  00FFDC  4E                 	db	78	;'N'
  1525  00FFDD  00                 	db	0
  1526  00FFDE                     STR_13:
  1527  00FFDE  4A                 	db	74	;'J'
  1528  00FFDF  55                 	db	85	;'U'
  1529  00FFE0  4E                 	db	78	;'N'
  1530  00FFE1  00                 	db	0
  1531  00FFE2                     STR_16:
  1532  00FFE2  53                 	db	83	;'S'
  1533  00FFE3  45                 	db	69	;'E'
  1534  00FFE4  50                 	db	80	;'P'
  1535  00FFE5  00                 	db	0
  1536  00FFE6                     STR_10:
  1537  00FFE6  4D                 	db	77	;'M'
  1538  00FFE7  41                 	db	65	;'A'
  1539  00FFE8  52                 	db	82	;'R'
  1540  00FFE9  00                 	db	0
  1541  00FFEA                     STR_11:
  1542  00FFEA  41                 	db	65	;'A'
  1543  00FFEB  50                 	db	80	;'P'
  1544  00FFEC  52                 	db	82	;'R'
  1545  00FFED  00                 	db	0
  1546  00FFEE                     STR_20:
  1547  00FFEE  45                 	db	69	;'E'
  1548  00FFEF  52                 	db	82	;'R'
  1549  00FFF0  52                 	db	82	;'R'
  1550  00FFF1  00                 	db	0
  1551  00FFF2                     STR_17:
  1552  00FFF2  4F                 	db	79	;'O'
  1553  00FFF3  43                 	db	67	;'C'
  1554  00FFF4  54                 	db	84	;'T'
  1555  00FFF5  00                 	db	0
  1556  00FFF6                     STR_18:
  1557  00FFF6  4E                 	db	78	;'N'
  1558  00FFF7  4F                 	db	79	;'O'
  1559  00FFF8  56                 	db	86	;'V'
  1560  00FFF9  00                 	db	0
  1561  00FFFA                     STR_12:
  1562  00FFFA  4D                 	db	77	;'M'
  1563  00FFFB  41                 	db	65	;'A'
  1564  00FFFC  59                 	db	89	;'Y'
  1565  00FFFD  00                 	db	0
  1566  0000                     
  1567                           ; #config settings
  1568  00FFFE  00                 	db	0	; dummy byte at the end
  1569  0000                     
  1570                           	psect	cinit
  1571  003E32                     __pcinit:
  1572                           	opt stack 0
  1573  003E32                     start_initialization:
  1574                           	opt stack 0
  1575  003E32                     __initialization:
  1576                           	opt stack 0
  1577                           
  1578                           ; Initialize objects allocated to BANK1 (8 bytes)
  1579                           ; load TBLPTR registers with __pidataBANK1
  1580  003E32  0E86               	movlw	low __pidataBANK1
  1581  003E34  6EF6               	movwf	tblptrl,c
  1582  003E36  0E45               	movlw	high __pidataBANK1
  1583  003E38  6EF7               	movwf	tblptrh,c
  1584  003E3A  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1585  003E3C  6EF8               	movwf	tblptru,c
  1586  003E3E  EE01  F02D         	lfsr	0,__pdataBANK1
  1587  003E42  EE10 F008          	lfsr	1,8
  1588  003E46                     copy_data0:
  1589  003E46  0009               	tblrd		*+
  1590  003E48  CFF5 FFEE          	movff	tablat,postinc0
  1591  003E4C  50E5               	movf	postdec1,w,c
  1592  003E4E  50E1               	movf	fsr1l,w,c
  1593  003E50  E1FA               	bnz	copy_data0
  1594                           
  1595                           ; Clear objects allocated to BANK1 (45 bytes)
  1596  003E52  EE01  F000         	lfsr	0,__pbssBANK1
  1597  003E56  0E2D               	movlw	45
  1598  003E58                     clear_0:
  1599  003E58  6AEE               	clrf	postinc0,c
  1600  003E5A  06E8               	decf	wreg,f,c
  1601  003E5C  E1FD               	bnz	clear_0
  1602                           
  1603                           ; Clear objects allocated to BANK0 (38 bytes)
  1604  003E5E  EE00  F0DA         	lfsr	0,__pbssBANK0
  1605  003E62  0E26               	movlw	38
  1606  003E64                     clear_1:
  1607  003E64  6AEE               	clrf	postinc0,c
  1608  003E66  06E8               	decf	wreg,f,c
  1609  003E68  E1FD               	bnz	clear_1
  1610                           
  1611                           ; Clear objects allocated to COMRAM (35 bytes)
  1612  003E6A  EE00  F05B         	lfsr	0,__pbssCOMRAM
  1613  003E6E  0E23               	movlw	35
  1614  003E70                     clear_2:
  1615  003E70  6AEE               	clrf	postinc0,c
  1616  003E72  06E8               	decf	wreg,f,c
  1617  003E74  E1FD               	bnz	clear_2
  1618  003E76                     end_of_initialization:
  1619                           	opt stack 0
  1620  003E76                     __end_of__initialization:
  1621                           	opt stack 0
  1622  003E76  907E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1623  003E78  927E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1624  003E7A  0100               	movlb	0
  1625  003E7C  EF69  F01B         	goto	_main	;jump to C main() function
  1626                           tblptru	equ	0xFF8
  1627                           tblptrh	equ	0xFF7
  1628                           tblptrl	equ	0xFF6
  1629                           tablat	equ	0xFF5
  1630                           postinc0	equ	0xFEE
  1631                           wreg	equ	0xFE8
  1632                           postdec1	equ	0xFE5
  1633                           fsr1l	equ	0xFE1
  1634                           
  1635                           	psect	bssCOMRAM
  1636  00005B                     __pbssCOMRAM:
  1637                           	opt stack 0
  1638  00005B                     _back:
  1639                           	opt stack 0
  1640  00005B                     	ds	2
  1641  00005D                     _count_can_no_lab:
  1642                           	opt stack 0
  1643  00005D                     	ds	2
  1644  00005F                     _count_can_w_lab:
  1645                           	opt stack 0
  1646  00005F                     	ds	2
  1647  000061                     _count_pop_no_tab:
  1648                           	opt stack 0
  1649  000061                     	ds	2
  1650  000063                     _count_pop_w_tab:
  1651                           	opt stack 0
  1652  000063                     	ds	2
  1653  000065                     _cur_can:
  1654                           	opt stack 0
  1655  000065                     	ds	2
  1656  000067                     _down:
  1657                           	opt stack 0
  1658  000067                     	ds	2
  1659  000069                     _enter:
  1660                           	opt stack 0
  1661  000069                     	ds	2
  1662  00006B                     _f_ID_receive:
  1663                           	opt stack 0
  1664  00006B                     	ds	2
  1665  00006D                     _f_can_coming_to_ID:
  1666                           	opt stack 0
  1667  00006D                     	ds	2
  1668  00006F                     _f_can_coming_to_distribution:
  1669                           	opt stack 0
  1670  00006F                     	ds	2
  1671  000071                     _f_can_distributed:
  1672                           	opt stack 0
  1673  000071                     	ds	2
  1674  000073                     _f_lastCan:
  1675                           	opt stack 0
  1676  000073                     	ds	2
  1677  000075                     _firstboot:
  1678                           	opt stack 0
  1679  000075                     	ds	2
  1680  000077                     _up:
  1681                           	opt stack 0
  1682  000077                     	ds	2
  1683  000079                     _was_low_1:
  1684                           	opt stack 0
  1685  000079                     	ds	2
  1686  00007B                     _was_low_3:
  1687                           	opt stack 0
  1688  00007B                     	ds	2
  1689  00007D                     _input:
  1690                           	opt stack 0
  1691  00007D                     	ds	1
  1692                           tblptru	equ	0xFF8
  1693                           tblptrh	equ	0xFF7
  1694                           tblptrl	equ	0xFF6
  1695                           tablat	equ	0xFF5
  1696                           postinc0	equ	0xFEE
  1697                           wreg	equ	0xFE8
  1698                           postdec1	equ	0xFE5
  1699                           fsr1l	equ	0xFE1
  1700                           
  1701                           	psect	bssBANK0
  1702  0000DA                     __pbssBANK0:
  1703                           	opt stack 0
  1704  0000DA                     _IR_signal:
  1705                           	opt stack 0
  1706  0000DA                     	ds	2
  1707  0000DC                     _MAG_signal:
  1708                           	opt stack 0
  1709  0000DC                     	ds	2
  1710  0000DE                     _cur_state:
  1711                           	opt stack 0
  1712  0000DE                     	ds	2
  1713  0000E0                     _debug:
  1714                           	opt stack 0
  1715  0000E0                     	ds	2
  1716  0000E2                     _f_loadingNewCan:
  1717                           	opt stack 0
  1718  0000E2                     	ds	2
  1719  0000E4                     _first:
  1720                           	opt stack 0
  1721  0000E4                     	ds	2
  1722  0000E6                     _log:
  1723                           	opt stack 0
  1724  0000E6                     	ds	2
  1725  0000E8                     _log_completion:
  1726                           	opt stack 0
  1727  0000E8                     	ds	2
  1728  0000EA                     _log_count_can_no_lab:
  1729                           	opt stack 0
  1730  0000EA                     	ds	2
  1731  0000EC                     _log_count_can_w_lab:
  1732                           	opt stack 0
  1733  0000EC                     	ds	2
  1734  0000EE                     _log_count_pop_no_tab:
  1735                           	opt stack 0
  1736  0000EE                     	ds	2
  1737  0000F0                     _log_count_pop_w_tab:
  1738                           	opt stack 0
  1739  0000F0                     	ds	2
  1740  0000F2                     _log_count_total:
  1741                           	opt stack 0
  1742  0000F2                     	ds	2
  1743  0000F4                     _log_total_time:
  1744                           	opt stack 0
  1745  0000F4                     	ds	2
  1746  0000F6                     _logstate:
  1747                           	opt stack 0
  1748  0000F6                     	ds	2
  1749  0000F8                     _total_time:
  1750                           	opt stack 0
  1751  0000F8                     	ds	2
  1752  0000FA                     _var:
  1753                           	opt stack 0
  1754  0000FA                     	ds	2
  1755  0000FC                     _machine_state:
  1756                           	opt stack 0
  1757  0000FC                     	ds	1
  1758  0000FD                     _sel:
  1759                           	opt stack 0
  1760  0000FD                     	ds	1
  1761  0000FE                     _count_total:
  1762                           	opt stack 0
  1763  0000FE                     	ds	2
  1764                           tblptru	equ	0xFF8
  1765                           tblptrh	equ	0xFF7
  1766                           tblptrl	equ	0xFF6
  1767                           tablat	equ	0xFF5
  1768                           postinc0	equ	0xFEE
  1769                           wreg	equ	0xFE8
  1770                           postdec1	equ	0xFE5
  1771                           fsr1l	equ	0xFE1
  1772                           
  1773                           	psect	bssBANK1
  1774  000100                     __pbssBANK1:
  1775                           	opt stack 0
  1776  000100                     _log_startTime:
  1777                           	opt stack 0
  1778  000100                     	ds	14
  1779  00010E                     _startTime:
  1780                           	opt stack 0
  1781  00010E                     	ds	14
  1782  00011C                     _servoTimes:
  1783                           	opt stack 0
  1784  00011C                     	ds	8
  1785  000124                     _time:
  1786                           	opt stack 0
  1787  000124                     	ds	7
  1788  00012B                     _i:
  1789                           	opt stack 0
  1790  00012B                     	ds	2
  1791                           tblptru	equ	0xFF8
  1792                           tblptrh	equ	0xFF7
  1793                           tblptrl	equ	0xFF6
  1794                           tablat	equ	0xFF5
  1795                           postinc0	equ	0xFEE
  1796                           wreg	equ	0xFE8
  1797                           postdec1	equ	0xFE5
  1798                           fsr1l	equ	0xFE1
  1799                           
  1800                           	psect	dataBANK1
  1801  00012D                     __pdataBANK1:
  1802                           	opt stack 0
  1803  00012D                     UI@F3222:
  1804                           	opt stack 0
  1805  00012D                     	ds	4
  1806  000131                     printRTC@F3213:
  1807                           	opt stack 0
  1808  000131                     	ds	4
  1809                           tblptru	equ	0xFF8
  1810                           tblptrh	equ	0xFF7
  1811                           tblptrl	equ	0xFF6
  1812                           tablat	equ	0xFF5
  1813                           postinc0	equ	0xFEE
  1814                           wreg	equ	0xFE8
  1815                           postdec1	equ	0xFE5
  1816                           fsr1l	equ	0xFE1
  1817                           
  1818                           	psect	cstackBANK0
  1819  000080                     __pcstackBANK0:
  1820                           	opt stack 0
  1821  000080                     ??_delay_ms:
  1822  000080                     ??_PortTests:
  1823  000080                     ??_isdigit:
  1824  000080                     ??_readADC:
  1825  000080                     ??_I2C_Master_Wait:
  1826  000080                     ?___wmul:
  1827                           	opt stack 0
  1828  000080                     ?___awmod:
  1829                           	opt stack 0
  1830  000080                     ?___lwdiv:
  1831                           	opt stack 0
  1832  000080                     ?___lldiv:
  1833                           	opt stack 0
  1834  000080                     lcdNibble@temp:
  1835                           	opt stack 0
  1836  000080                     initTime@m:
  1837                           	opt stack 0
  1838  000080                     updateServoPosition@time_us:
  1839                           	opt stack 0
  1840  000080                     EEPROM_read@address:
  1841                           	opt stack 0
  1842  000080                     ___wmul@multiplier:
  1843                           	opt stack 0
  1844  000080                     ___awmod@dividend:
  1845                           	opt stack 0
  1846  000080                     ___lwdiv@dividend:
  1847                           	opt stack 0
  1848  000080                     strcpy@to:
  1849                           	opt stack 0
  1850  000080                     ___lldiv@dividend:
  1851                           	opt stack 0
  1852                           
  1853                           ; 4 bytes @ 0x0
  1854  000080                     	ds	1
  1855  000081                     readADC@channel:
  1856                           	opt stack 0
  1857  000081                     I2C_Master_Read@a:
  1858                           	opt stack 0
  1859  000081                     lcdNibble@data:
  1860                           	opt stack 0
  1861  000081                     initTime@h:
  1862                           	opt stack 0
  1863  000081                     delay_ms@milliseconds:
  1864                           	opt stack 0
  1865  000081                     _isdigit$1887:
  1866                           	opt stack 0
  1867  000081                     I2C_Master_Write@d:
  1868                           	opt stack 0
  1869                           
  1870                           ; 2 bytes @ 0x1
  1871  000081                     	ds	1
  1872  000082                     ??_readIR:
  1873  000082                     ??_readMAG:
  1874  000082                     I2C_Master_Read@temp:
  1875                           	opt stack 0
  1876  000082                     lcdInst@data:
  1877                           	opt stack 0
  1878  000082                     putch@data:
  1879                           	opt stack 0
  1880  000082                     initTime@w:
  1881                           	opt stack 0
  1882  000082                     isdigit@c:
  1883                           	opt stack 0
  1884  000082                     updateServoPosition@timer:
  1885                           	opt stack 0
  1886  000082                     ___wmul@multiplicand:
  1887                           	opt stack 0
  1888  000082                     ___awmod@divisor:
  1889                           	opt stack 0
  1890  000082                     ___lwdiv@divisor:
  1891                           	opt stack 0
  1892  000082                     strcpy@from:
  1893                           	opt stack 0
  1894                           
  1895                           ; 2 bytes @ 0x2
  1896  000082                     	ds	1
  1897  000083                     ??_initLCD:
  1898  000083                     initTime@DD:
  1899                           	opt stack 0
  1900  000083                     getRTC@i:
  1901                           	opt stack 0
  1902                           
  1903                           ; 2 bytes @ 0x3
  1904  000083                     	ds	1
  1905  000084                     ??_updateServoPosition:
  1906  000084                     initTime@MM:
  1907                           	opt stack 0
  1908  000084                     ___awmod@counter:
  1909                           	opt stack 0
  1910  000084                     readIR@res:
  1911                           	opt stack 0
  1912  000084                     readMAG@res:
  1913                           	opt stack 0
  1914  000084                     ___wmul@product:
  1915                           	opt stack 0
  1916  000084                     ___lwdiv@quotient:
  1917                           	opt stack 0
  1918  000084                     strcpy@cp:
  1919                           	opt stack 0
  1920  000084                     ___lldiv@divisor:
  1921                           	opt stack 0
  1922                           
  1923                           ; 4 bytes @ 0x4
  1924  000084                     	ds	1
  1925  000085                     ??_initSortTimer:
  1926  000085                     initTime@YY:
  1927                           	opt stack 0
  1928  000085                     ___awmod@sign:
  1929                           	opt stack 0
  1930                           
  1931                           ; 1 bytes @ 0x5
  1932  000085                     	ds	1
  1933  000086                     ??_ID:
  1934  000086                     ??_getIR:
  1935  000086                     ?___awdiv:
  1936                           	opt stack 0
  1937  000086                     initTime@s:
  1938                           	opt stack 0
  1939  000086                     ___lwdiv@counter:
  1940                           	opt stack 0
  1941  000086                     updateServoPosition@my_time:
  1942                           	opt stack 0
  1943  000086                     ___awdiv@dividend:
  1944                           	opt stack 0
  1945                           
  1946                           ; 2 bytes @ 0x6
  1947  000086                     	ds	1
  1948  000087                     ?___lwmod:
  1949                           	opt stack 0
  1950  000087                     ___lwmod@dividend:
  1951                           	opt stack 0
  1952                           
  1953                           ; 2 bytes @ 0x7
  1954  000087                     	ds	1
  1955  000088                     ??_Distribution:
  1956  000088                     ??_initServos:
  1957  000088                     initSortTimer@i:
  1958                           	opt stack 0
  1959  000088                     ___awdiv@divisor:
  1960                           	opt stack 0
  1961  000088                     ___lldiv@quotient:
  1962                           	opt stack 0
  1963  000088                     ID@sensor_outputs:
  1964                           	opt stack 0
  1965                           
  1966                           ; 6 bytes @ 0x8
  1967  000088                     	ds	1
  1968  000089                     ___lwmod@divisor:
  1969                           	opt stack 0
  1970                           
  1971                           ; 2 bytes @ 0x9
  1972  000089                     	ds	1
  1973  00008A                     ___awdiv@counter:
  1974                           	opt stack 0
  1975                           
  1976                           ; 1 bytes @ 0xA
  1977  00008A                     	ds	1
  1978  00008B                     ___awdiv@sign:
  1979                           	opt stack 0
  1980  00008B                     ___lwmod@counter:
  1981                           	opt stack 0
  1982                           
  1983                           ; 1 bytes @ 0xB
  1984  00008B                     	ds	1
  1985  00008C                     ___lldiv@counter:
  1986                           	opt stack 0
  1987  00008C                     ___awdiv@quotient:
  1988                           	opt stack 0
  1989                           
  1990                           ; 2 bytes @ 0xC
  1991  00008C                     	ds	1
  1992  00008D                     I2C_Master_Init@c:
  1993                           	opt stack 0
  1994                           
  1995                           ; 4 bytes @ 0xD
  1996  00008D                     	ds	1
  1997  00008E                     ?_printf:
  1998                           	opt stack 0
  1999  00008E                     printf@f:
  2000                           	opt stack 0
  2001                           
  2002                           ; 2 bytes @ 0xE
  2003  00008E                     	ds	3
  2004  000091                     ??_I2C_Master_Init:
  2005                           
  2006                           ; 1 bytes @ 0x11
  2007  000091                     	ds	4
  2008  000095                     ??_loadRTC:
  2009                           
  2010                           ; 1 bytes @ 0x15
  2011  000095                     	ds	1
  2012  000096                     loadRTC@i:
  2013                           	opt stack 0
  2014                           
  2015                           ; 2 bytes @ 0x16
  2016  000096                     	ds	4
  2017  00009A                     ??_printf:
  2018                           
  2019                           ; 1 bytes @ 0x1A
  2020  00009A                     	ds	4
  2021  00009E                     printf@prec:
  2022                           	opt stack 0
  2023                           
  2024                           ; 1 bytes @ 0x1E
  2025  00009E                     	ds	1
  2026  00009F                     printf@cp:
  2027                           	opt stack 0
  2028                           
  2029                           ; 2 bytes @ 0x1F
  2030  00009F                     	ds	2
  2031  0000A1                     printf@ap:
  2032                           	opt stack 0
  2033                           
  2034                           ; 2 bytes @ 0x21
  2035  0000A1                     	ds	2
  2036  0000A3                     printf@len:
  2037                           	opt stack 0
  2038                           
  2039                           ; 2 bytes @ 0x23
  2040  0000A3                     	ds	2
  2041  0000A5                     printf@val:
  2042                           	opt stack 0
  2043                           
  2044                           ; 2 bytes @ 0x25
  2045  0000A5                     	ds	2
  2046  0000A7                     printf@flag:
  2047                           	opt stack 0
  2048                           
  2049                           ; 1 bytes @ 0x27
  2050  0000A7                     	ds	1
  2051  0000A8                     printf@c:
  2052                           	opt stack 0
  2053                           
  2054                           ; 1 bytes @ 0x28
  2055  0000A8                     	ds	1
  2056  0000A9                     printf@width:
  2057                           	opt stack 0
  2058                           
  2059                           ; 2 bytes @ 0x29
  2060  0000A9                     	ds	2
  2061  0000AB                     ??_printRTC:
  2062  0000AB                     ??_algorithmTest:
  2063  0000AB                     ??_sensorTest:
  2064  0000AB                     ??_actuatorTest:
  2065  0000AB                     ??_PortTestA5:
  2066  0000AB                     ??_ToggleTestA5:
  2067  0000AB                     ??_SolenoidTestA5:
  2068  0000AB                     ??_BothServos:
  2069  0000AB                     EEPROM_write@address:
  2070                           	opt stack 0
  2071                           
  2072                           ; 2 bytes @ 0x2B
  2073  0000AB                     	ds	1
  2074  0000AC                     ToggleTestA5@on:
  2075                           	opt stack 0
  2076                           
  2077                           ; 2 bytes @ 0x2C
  2078  0000AC                     	ds	1
  2079  0000AD                     EEPROM_write@data:
  2080                           	opt stack 0
  2081  0000AD                     actuatorTest@i_1578:
  2082                           	opt stack 0
  2083  0000AD                     SolenoidTestA5@i:
  2084                           	opt stack 0
  2085                           
  2086                           ; 2 bytes @ 0x2D
  2087  0000AD                     	ds	1
  2088  0000AE                     ??_EEPROM_write:
  2089  0000AE                     actuatorTest@i_1585:
  2090                           	opt stack 0
  2091  0000AE                     printRTC@INT_time:
  2092                           	opt stack 0
  2093                           
  2094                           ; 14 bytes @ 0x2E
  2095  0000AE                     	ds	1
  2096  0000AF                     EEPROM_write@i:
  2097                           	opt stack 0
  2098  0000AF                     actuatorTest@i_1586:
  2099                           	opt stack 0
  2100  0000AF                     SolenoidTestA5@i_1631:
  2101                           	opt stack 0
  2102                           
  2103                           ; 1 bytes @ 0x2F
  2104  0000AF                     	ds	1
  2105  0000B0                     EEPROM_write@i_1319:
  2106                           	opt stack 0
  2107  0000B0                     actuatorTest@i_1588:
  2108                           	opt stack 0
  2109  0000B0                     SolenoidTestA5@i_1633:
  2110                           	opt stack 0
  2111                           
  2112                           ; 1 bytes @ 0x30
  2113  0000B0                     	ds	1
  2114  0000B1                     ??_Loading:
  2115  0000B1                     logRun@num:
  2116                           	opt stack 0
  2117  0000B1                     actuatorTest@i_1589:
  2118                           	opt stack 0
  2119                           
  2120                           ; 1 bytes @ 0x31
  2121  0000B1                     	ds	1
  2122  0000B2                     logRun@byte1:
  2123                           	opt stack 0
  2124  0000B2                     actuatorTest@i_1591:
  2125                           	opt stack 0
  2126                           
  2127                           ; 1 bytes @ 0x32
  2128  0000B2                     	ds	1
  2129  0000B3                     logRun@byte2:
  2130                           	opt stack 0
  2131  0000B3                     actuatorTest@i_1592:
  2132                           	opt stack 0
  2133  0000B3                     Loading@addr:
  2134                           	opt stack 0
  2135                           
  2136                           ; 2 bytes @ 0x33
  2137  0000B3                     	ds	1
  2138  0000B4                     logRun@byte3:
  2139                           	opt stack 0
  2140  0000B4                     actuatorTest@i_1594:
  2141                           	opt stack 0
  2142                           
  2143                           ; 1 bytes @ 0x34
  2144  0000B4                     	ds	1
  2145  0000B5                     Loading@byte1:
  2146                           	opt stack 0
  2147  0000B5                     logRun@byte_i:
  2148                           	opt stack 0
  2149  0000B5                     actuatorTest@i_1595:
  2150                           	opt stack 0
  2151                           
  2152                           ; 1 bytes @ 0x35
  2153  0000B5                     	ds	1
  2154  0000B6                     logRun@byte11:
  2155                           	opt stack 0
  2156  0000B6                     actuatorTest@i_1597:
  2157                           	opt stack 0
  2158  0000B6                     Loading@i:
  2159                           	opt stack 0
  2160                           
  2161                           ; 2 bytes @ 0x36
  2162  0000B6                     	ds	1
  2163  0000B7                     actuatorTest@i_1598:
  2164                           	opt stack 0
  2165  0000B7                     logRun@i:
  2166                           	opt stack 0
  2167                           
  2168                           ; 2 bytes @ 0x37
  2169  0000B7                     	ds	1
  2170  0000B8                     actuatorTest@i_1600:
  2171                           	opt stack 0
  2172                           
  2173                           ; 1 bytes @ 0x38
  2174  0000B8                     	ds	1
  2175  0000B9                     actuatorTest@i_1601:
  2176                           	opt stack 0
  2177  0000B9                     logRun@addr:
  2178                           	opt stack 0
  2179                           
  2180                           ; 2 bytes @ 0x39
  2181  0000B9                     	ds	1
  2182  0000BA                     actuatorTest@i_1604:
  2183                           	opt stack 0
  2184                           
  2185                           ; 1 bytes @ 0x3A
  2186  0000BA                     	ds	1
  2187  0000BB                     actuatorTest@i_1605:
  2188                           	opt stack 0
  2189                           
  2190                           ; 1 bytes @ 0x3B
  2191  0000BB                     	ds	1
  2192  0000BC                     actuatorTest@i_1607:
  2193                           	opt stack 0
  2194  0000BC                     printRTC@RTC_month:
  2195                           	opt stack 0
  2196                           
  2197                           ; 2 bytes @ 0x3C
  2198  0000BC                     	ds	1
  2199  0000BD                     actuatorTest@i_1608:
  2200                           	opt stack 0
  2201                           
  2202                           ; 1 bytes @ 0x3D
  2203  0000BD                     	ds	1
  2204  0000BE                     actuatorTest@i_1610:
  2205                           	opt stack 0
  2206  0000BE                     printRTC@month:
  2207                           	opt stack 0
  2208                           
  2209                           ; 4 bytes @ 0x3E
  2210  0000BE                     	ds	1
  2211  0000BF                     actuatorTest@i_1611:
  2212                           	opt stack 0
  2213                           
  2214                           ; 1 bytes @ 0x3F
  2215  0000BF                     	ds	1
  2216  0000C0                     actuatorTest@i_1614:
  2217                           	opt stack 0
  2218                           
  2219                           ; 1 bytes @ 0x40
  2220  0000C0                     	ds	1
  2221  0000C1                     actuatorTest@i_1615:
  2222                           	opt stack 0
  2223                           
  2224                           ; 1 bytes @ 0x41
  2225  0000C1                     	ds	1
  2226  0000C2                     actuatorTest@i_1617:
  2227                           	opt stack 0
  2228  0000C2                     printRTC@i:
  2229                           	opt stack 0
  2230                           
  2231                           ; 2 bytes @ 0x42
  2232  0000C2                     	ds	1
  2233  0000C3                     actuatorTest@i_1618:
  2234                           	opt stack 0
  2235                           
  2236                           ; 1 bytes @ 0x43
  2237  0000C3                     	ds	1
  2238  0000C4                     ??_UI:
  2239  0000C4                     actuatorTest@i:
  2240                           	opt stack 0
  2241                           
  2242                           ; 2 bytes @ 0x44
  2243  0000C4                     	ds	2
  2244  0000C6                     ??_Test:
  2245  0000C6                     _UI$2240:
  2246                           	opt stack 0
  2247                           
  2248                           ; 2 bytes @ 0x46
  2249  0000C6                     	ds	2
  2250  0000C8                     UI@i:
  2251                           	opt stack 0
  2252                           
  2253                           ; 1 bytes @ 0x48
  2254  0000C8                     	ds	1
  2255  0000C9                     UI@i_408:
  2256                           	opt stack 0
  2257                           
  2258                           ; 1 bytes @ 0x49
  2259  0000C9                     	ds	1
  2260  0000CA                     UI@i_411:
  2261                           	opt stack 0
  2262                           
  2263                           ; 1 bytes @ 0x4A
  2264  0000CA                     	ds	1
  2265  0000CB                     UI@i_412:
  2266                           	opt stack 0
  2267                           
  2268                           ; 1 bytes @ 0x4B
  2269  0000CB                     	ds	1
  2270  0000CC                     UI@i_430:
  2271                           	opt stack 0
  2272                           
  2273                           ; 1 bytes @ 0x4C
  2274  0000CC                     	ds	1
  2275  0000CD                     UI@i_431:
  2276                           	opt stack 0
  2277                           
  2278                           ; 1 bytes @ 0x4D
  2279  0000CD                     	ds	1
  2280  0000CE                     UI@i_434:
  2281                           	opt stack 0
  2282                           
  2283                           ; 1 bytes @ 0x4E
  2284  0000CE                     	ds	1
  2285  0000CF                     UI@i_435:
  2286                           	opt stack 0
  2287                           
  2288                           ; 1 bytes @ 0x4F
  2289  0000CF                     	ds	1
  2290  0000D0                     UI@i_438:
  2291                           	opt stack 0
  2292                           
  2293                           ; 1 bytes @ 0x50
  2294  0000D0                     	ds	1
  2295  0000D1                     UI@i_439:
  2296                           	opt stack 0
  2297                           
  2298                           ; 1 bytes @ 0x51
  2299  0000D1                     	ds	1
  2300  0000D2                     UI@i_442:
  2301                           	opt stack 0
  2302                           
  2303                           ; 1 bytes @ 0x52
  2304  0000D2                     	ds	1
  2305  0000D3                     UI@i_443:
  2306                           	opt stack 0
  2307                           
  2308                           ; 1 bytes @ 0x53
  2309  0000D3                     	ds	1
  2310  0000D4                     UI@i_446:
  2311                           	opt stack 0
  2312                           
  2313                           ; 1 bytes @ 0x54
  2314  0000D4                     	ds	1
  2315  0000D5                     UI@i_447:
  2316                           	opt stack 0
  2317                           
  2318                           ; 1 bytes @ 0x55
  2319  0000D5                     	ds	1
  2320  0000D6                     UI@month:
  2321                           	opt stack 0
  2322                           
  2323                           ; 4 bytes @ 0x56
  2324  0000D6                     	ds	4
  2325  0000DA                     tblptru	equ	0xFF8
  2326                           tblptrh	equ	0xFF7
  2327                           tblptrl	equ	0xFF6
  2328                           tablat	equ	0xFF5
  2329                           postinc0	equ	0xFEE
  2330                           wreg	equ	0xFE8
  2331                           postdec1	equ	0xFE5
  2332                           fsr1l	equ	0xFE1
  2333                           
  2334                           ; 1 bytes @ 0x5A
  2335                           
  2336                           	psect	cstackCOMRAM
  2337  000001                     __pcstackCOMRAM:
  2338                           	opt stack 0
  2339  000001                     ??i2_I2C_Master_Wait:
  2340  000001                     ??i2_isdigit:
  2341  000001                     ?i2___wmul:
  2342                           	opt stack 0
  2343  000001                     ?i2___lwmod:
  2344                           	opt stack 0
  2345  000001                     i2lcdNibble@temp:
  2346                           	opt stack 0
  2347  000001                     i2EEPROM_read@address:
  2348                           	opt stack 0
  2349  000001                     i2___wmul@multiplier:
  2350                           	opt stack 0
  2351  000001                     i2___lwmod@dividend:
  2352                           	opt stack 0
  2353  000001                     i2strcpy@to:
  2354                           	opt stack 0
  2355                           
  2356                           ; 2 bytes @ 0x0
  2357  000001                     	ds	1
  2358  000002                     i2I2C_Master_Read@a:
  2359                           	opt stack 0
  2360  000002                     i2lcdNibble@data:
  2361                           	opt stack 0
  2362  000002                     i2_isdigit$1887:
  2363                           	opt stack 0
  2364  000002                     i2I2C_Master_Write@d:
  2365                           	opt stack 0
  2366                           
  2367                           ; 2 bytes @ 0x1
  2368  000002                     	ds	1
  2369  000003                     i2I2C_Master_Read@temp:
  2370                           	opt stack 0
  2371  000003                     i2lcdInst@data:
  2372                           	opt stack 0
  2373  000003                     i2putch@data:
  2374                           	opt stack 0
  2375  000003                     i2isdigit@c:
  2376                           	opt stack 0
  2377  000003                     i2___wmul@multiplicand:
  2378                           	opt stack 0
  2379  000003                     i2___lwmod@divisor:
  2380                           	opt stack 0
  2381  000003                     i2strcpy@from:
  2382                           	opt stack 0
  2383                           
  2384                           ; 2 bytes @ 0x2
  2385  000003                     	ds	1
  2386  000004                     i2getRTC@i:
  2387                           	opt stack 0
  2388                           
  2389                           ; 2 bytes @ 0x3
  2390  000004                     	ds	1
  2391  000005                     i2___lwmod@counter:
  2392                           	opt stack 0
  2393  000005                     i2___wmul@product:
  2394                           	opt stack 0
  2395  000005                     i2strcpy@cp:
  2396                           	opt stack 0
  2397                           
  2398                           ; 2 bytes @ 0x4
  2399  000005                     	ds	1
  2400  000006                     ?i2___lwdiv:
  2401                           	opt stack 0
  2402  000006                     i2___lwdiv@dividend:
  2403                           	opt stack 0
  2404                           
  2405                           ; 2 bytes @ 0x5
  2406  000006                     	ds	1
  2407  000007                     retrieveLog@logNum:
  2408                           	opt stack 0
  2409                           
  2410                           ; 2 bytes @ 0x6
  2411  000007                     	ds	1
  2412  000008                     i2___lwdiv@divisor:
  2413                           	opt stack 0
  2414                           
  2415                           ; 2 bytes @ 0x7
  2416  000008                     	ds	1
  2417  000009                     ??_retrieveLog:
  2418                           
  2419                           ; 1 bytes @ 0x8
  2420  000009                     	ds	1
  2421  00000A                     i2___lwdiv@quotient:
  2422                           	opt stack 0
  2423                           
  2424                           ; 2 bytes @ 0x9
  2425  00000A                     	ds	1
  2426  00000B                     retrieveLog@byte1:
  2427                           	opt stack 0
  2428                           
  2429                           ; 1 bytes @ 0xA
  2430  00000B                     	ds	1
  2431  00000C                     retrieveLog@byte2:
  2432                           	opt stack 0
  2433  00000C                     i2___lwdiv@counter:
  2434                           	opt stack 0
  2435                           
  2436                           ; 1 bytes @ 0xB
  2437  00000C                     	ds	1
  2438  00000D                     ?i2_printf:
  2439                           	opt stack 0
  2440  00000D                     retrieveLog@byte3:
  2441                           	opt stack 0
  2442  00000D                     i2printf@f:
  2443                           	opt stack 0
  2444                           
  2445                           ; 2 bytes @ 0xC
  2446  00000D                     	ds	1
  2447  00000E                     retrieveLog@i:
  2448                           	opt stack 0
  2449                           
  2450                           ; 2 bytes @ 0xD
  2451  00000E                     	ds	2
  2452  000010                     retrieveLog@addr:
  2453                           	opt stack 0
  2454                           
  2455                           ; 2 bytes @ 0xF
  2456  000010                     	ds	2
  2457  000012                     dispLogs@myLog:
  2458                           	opt stack 0
  2459                           
  2460                           ; 2 bytes @ 0x11
  2461  000012                     	ds	2
  2462  000014                     
  2463                           ; 1 bytes @ 0x13
  2464  000014                     	ds	5
  2465  000019                     ??i2_printf:
  2466                           
  2467                           ; 1 bytes @ 0x18
  2468  000019                     	ds	4
  2469  00001D                     i2printf@prec:
  2470                           	opt stack 0
  2471                           
  2472                           ; 1 bytes @ 0x1C
  2473  00001D                     	ds	1
  2474  00001E                     i2printf@cp:
  2475                           	opt stack 0
  2476                           
  2477                           ; 2 bytes @ 0x1D
  2478  00001E                     	ds	2
  2479  000020                     i2printf@ap:
  2480                           	opt stack 0
  2481                           
  2482                           ; 2 bytes @ 0x1F
  2483  000020                     	ds	2
  2484  000022                     i2printf@len:
  2485                           	opt stack 0
  2486                           
  2487                           ; 2 bytes @ 0x21
  2488  000022                     	ds	2
  2489  000024                     i2printf@val:
  2490                           	opt stack 0
  2491                           
  2492                           ; 2 bytes @ 0x23
  2493  000024                     	ds	2
  2494  000026                     i2printf@flag:
  2495                           	opt stack 0
  2496                           
  2497                           ; 1 bytes @ 0x25
  2498  000026                     	ds	1
  2499  000027                     i2printf@c:
  2500                           	opt stack 0
  2501                           
  2502                           ; 1 bytes @ 0x26
  2503  000027                     	ds	1
  2504  000028                     i2printf@width:
  2505                           	opt stack 0
  2506                           
  2507                           ; 2 bytes @ 0x27
  2508  000028                     	ds	2
  2509  00002A                     ??_printSortTimer:
  2510  00002A                     ??i2_printRTC:
  2511  00002A                     ?_inputHandler:
  2512                           	opt stack 0
  2513                           
  2514                           ; 2 bytes @ 0x29
  2515  00002A                     	ds	2
  2516  00002C                     ??_inputHandler:
  2517                           
  2518                           ; 1 bytes @ 0x2B
  2519  00002C                     	ds	1
  2520  00002D                     printSortTimer@hour:
  2521                           	opt stack 0
  2522  00002D                     i2printRTC@INT_time:
  2523                           	opt stack 0
  2524                           
  2525                           ; 14 bytes @ 0x2C
  2526  00002D                     	ds	2
  2527  00002F                     printSortTimer@curTime:
  2528                           	opt stack 0
  2529                           
  2530                           ; 14 bytes @ 0x2E
  2531  00002F                     	ds	12
  2532  00003B                     i2printRTC@RTC_month:
  2533                           	opt stack 0
  2534                           
  2535                           ; 2 bytes @ 0x3A
  2536  00003B                     	ds	2
  2537  00003D                     printSortTimer@start_sec:
  2538                           	opt stack 0
  2539  00003D                     i2printRTC@month:
  2540                           	opt stack 0
  2541                           
  2542                           ; 4 bytes @ 0x3C
  2543  00003D                     	ds	2
  2544  00003F                     printSortTimer@cur_sec:
  2545                           	opt stack 0
  2546                           
  2547                           ; 2 bytes @ 0x3E
  2548  00003F                     	ds	2
  2549  000041                     printSortTimer@min:
  2550                           	opt stack 0
  2551  000041                     i2printRTC@i:
  2552                           	opt stack 0
  2553                           
  2554                           ; 2 bytes @ 0x40
  2555  000041                     	ds	2
  2556  000043                     ??_updateMenu:
  2557  000043                     printSortTimer@sec:
  2558                           	opt stack 0
  2559                           
  2560                           ; 2 bytes @ 0x42
  2561  000043                     	ds	2
  2562  000045                     _printSortTimer$2360:
  2563                           	opt stack 0
  2564                           
  2565                           ; 2 bytes @ 0x44
  2566  000045                     	ds	2
  2567  000047                     printSortTimer@timeDiff:
  2568                           	opt stack 0
  2569                           
  2570                           ; 2 bytes @ 0x46
  2571  000047                     	ds	2
  2572  000049                     printSortTimer@i:
  2573                           	opt stack 0
  2574                           
  2575                           ; 2 bytes @ 0x48
  2576  000049                     	ds	2
  2577  00004B                     ??_handler:
  2578                           
  2579                           ; 1 bytes @ 0x4A
  2580  00004B                     	ds	16
  2581                           tblptru	equ	0xFF8
  2582                           tblptrh	equ	0xFF7
  2583                           tblptrl	equ	0xFF6
  2584                           tablat	equ	0xFF5
  2585                           postinc0	equ	0xFEE
  2586                           wreg	equ	0xFE8
  2587                           postdec1	equ	0xFE5
  2588                           fsr1l	equ	0xFE1
  2589                           
  2590 ;;
  2591 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2592 ;;
  2593 ;; *************** function _main *****************
  2594 ;; Defined at:
  2595 ;;		line 18 in file "main.c"
  2596 ;; Parameters:    Size  Location     Type
  2597 ;;		None
  2598 ;; Auto vars:     Size  Location     Type
  2599 ;;		None
  2600 ;; Return value:  Size  Location     Type
  2601 ;;                  1    wreg      void 
  2602 ;; Registers used:
  2603 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2604 ;; Tracked objects:
  2605 ;;		On entry : 0/0
  2606 ;;		On exit  : 0/0
  2607 ;;		Unchanged: 0/0
  2608 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2609 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2610 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2611 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2612 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2613 ;;Total ram usage:        0 bytes
  2614 ;; Hardware stack levels required when called:   13
  2615 ;; This function calls:
  2616 ;;		_Test
  2617 ;;		_UI
  2618 ;;		_initLCD
  2619 ;;		_initTime
  2620 ;;		_initUI
  2621 ;;		_logRun
  2622 ;;		_machineConfig
  2623 ;;		_sort
  2624 ;;		_stopSignals
  2625 ;; This function is called by:
  2626 ;;		Startup code after reset
  2627 ;; This function uses a non-reentrant model
  2628 ;;
  2629                           
  2630                           	psect	text0
  2631  0036D2                     __ptext0:
  2632                           	opt stack 0
  2633  0036D2                     _main:
  2634                           	opt stack 18
  2635                           
  2636                           ;main.c: 19: machineConfig();
  2637                           
  2638                           ;incstack = 0
  2639  0036D2  EC3C  F01E         	call	_machineConfig	;wreg free
  2640                           
  2641                           ;main.c: 20: initLCD();
  2642  0036D6  ECB3  F01F         	call	_initLCD	;wreg free
  2643                           
  2644                           ;main.c: 21: initTime(0x42, 0x20, 0x13, 0x04, 0x01, 0x03, 0x17);
  2645  0036DA  0E20               	movlw	32
  2646  0036DC  0100               	movlb	0	; () banked
  2647  0036DE  6F80               	movwf	initTime@m& (0+255),b
  2648  0036E0  0E13               	movlw	19
  2649  0036E2  0100               	movlb	0	; () banked
  2650  0036E4  6F81               	movwf	initTime@h& (0+255),b
  2651  0036E6  0E04               	movlw	4
  2652  0036E8  0100               	movlb	0	; () banked
  2653  0036EA  6F82               	movwf	initTime@w& (0+255),b
  2654  0036EC  0E01               	movlw	1
  2655  0036EE  0100               	movlb	0	; () banked
  2656  0036F0  6F83               	movwf	initTime@DD& (0+255),b
  2657  0036F2  0E03               	movlw	3
  2658  0036F4  0100               	movlb	0	; () banked
  2659  0036F6  6F84               	movwf	initTime@MM& (0+255),b
  2660  0036F8  0E17               	movlw	23
  2661  0036FA  0100               	movlb	0	; () banked
  2662  0036FC  6F85               	movwf	initTime@YY& (0+255),b
  2663  0036FE  0E42               	movlw	66
  2664  003700  EC48  F022         	call	_initTime
  2665                           
  2666                           ;main.c: 22: initUI();
  2667  003704  EC13  F022         	call	_initUI	;wreg free
  2668                           
  2669                           ;main.c: 23: first = 1;
  2670  003708  0E00               	movlw	0
  2671  00370A  0100               	movlb	0	; () banked
  2672  00370C  6FE5               	movwf	(_first+1)& (0+255),b
  2673  00370E  0E01               	movlw	1
  2674  003710  6FE4               	movwf	_first& (0+255),b
  2675                           
  2676                           ; BSR set to: 0
  2677                           ;main.c: 34: switch(machine_state){
  2678                           
  2679                           ;main.c: 33: while(1){
  2680  003712  D018               	goto	l7924
  2681  003714                     l7906:
  2682                           
  2683                           ; BSR set to: 0
  2684                           ;main.c: 36: UI();
  2685  003714  EC09  F000         	call	_UI	;wreg free
  2686                           
  2687                           ;main.c: 37: break;
  2688  003718  D015               	goto	l7924
  2689  00371A                     l7908:
  2690                           
  2691                           ;main.c: 39: sort();
  2692  00371A  EC37  F022         	call	_sort	;wreg free
  2693                           
  2694                           ;main.c: 40: break;
  2695  00371E  D012               	goto	l7924
  2696  003720                     l7910:
  2697                           
  2698                           ;main.c: 42: stopSignals();
  2699  003720  EC74  F022         	call	_stopSignals	;wreg free
  2700                           
  2701                           ;main.c: 43: logRun();
  2702  003724  EC68  F016         	call	_logRun	;wreg free
  2703                           
  2704                           ;main.c: 44: first = 1;
  2705  003728  0E00               	movlw	0
  2706  00372A  0100               	movlb	0	; () banked
  2707  00372C  6FE5               	movwf	(_first+1)& (0+255),b
  2708  00372E  0E01               	movlw	1
  2709  003730  6FE4               	movwf	_first& (0+255),b
  2710                           
  2711                           ; BSR set to: 0
  2712                           ;main.c: 45: UI();
  2713  003732  EC09  F000         	call	_UI	;wreg free
  2714                           
  2715                           ;main.c: 46: break;
  2716  003736  D006               	goto	l7924
  2717  003738                     l7918:
  2718                           
  2719                           ;main.c: 48: Test();
  2720  003738  EC24  F018         	call	_Test	;wreg free
  2721                           
  2722                           ;main.c: 49: break;
  2723  00373C  D003               	goto	l7924
  2724  00373E                     l7920:
  2725                           
  2726                           ;main.c: 51: stopSignals();
  2727  00373E  EC74  F022         	call	_stopSignals	;wreg free
  2728  003742                     l478:
  2729  003742  D7FF               	goto	l478
  2730  003744                     l7924:
  2731  003744  0100               	movlb	0	; () banked
  2732  003746  51FC               	movf	_machine_state& (0+255),w,b
  2733                           
  2734                           ; Switch size 1, requested type "space"
  2735                           ; Number of cases is 5, Range of values is 0 to 4
  2736                           ; switch strategies available:
  2737                           ; Name         Instructions Cycles
  2738                           ; simple_byte           16     9 (average)
  2739                           ;	Chosen strategy is simple_byte
  2740  003748  0A00               	xorlw	0	; case 0
  2741  00374A  B4D8               	btfsc	status,2,c
  2742  00374C  D7E3               	goto	l7906
  2743  00374E  0A01               	xorlw	1	; case 1
  2744  003750  B4D8               	btfsc	status,2,c
  2745  003752  D7E3               	goto	l7908
  2746  003754  0A03               	xorlw	3	; case 2
  2747  003756  B4D8               	btfsc	status,2,c
  2748  003758  D7E3               	goto	l7910
  2749  00375A  0A01               	xorlw	1	; case 3
  2750  00375C  B4D8               	btfsc	status,2,c
  2751  00375E  D7EC               	goto	l7918
  2752  003760  0A07               	xorlw	7	; case 4
  2753  003762  B4D8               	btfsc	status,2,c
  2754  003764  D7EC               	goto	l7920
  2755                           
  2756                           ; BSR set to: 0
  2757                           
  2758                           ; BSR set to: 0
  2759  003766  D7EE               	goto	l7924
  2760  003768                     __end_of_main:
  2761                           	opt stack 0
  2762                           tblptru	equ	0xFF8
  2763                           tblptrh	equ	0xFF7
  2764                           tblptrl	equ	0xFF6
  2765                           tablat	equ	0xFF5
  2766                           postinc0	equ	0xFEE
  2767                           wreg	equ	0xFE8
  2768                           postdec1	equ	0xFE5
  2769                           fsr1l	equ	0xFE1
  2770                           status	equ	0xFD8
  2771                           
  2772 ;; *************** function _stopSignals *****************
  2773 ;; Defined at:
  2774 ;;		line 60 in file "main.c"
  2775 ;; Parameters:    Size  Location     Type
  2776 ;;		None
  2777 ;; Auto vars:     Size  Location     Type
  2778 ;;		None
  2779 ;; Return value:  Size  Location     Type
  2780 ;;                  1    wreg      void 
  2781 ;; Registers used:
  2782 ;;		wreg, status,2
  2783 ;; Tracked objects:
  2784 ;;		On entry : 0/0
  2785 ;;		On exit  : 0/0
  2786 ;;		Unchanged: 0/0
  2787 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2788 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2789 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2790 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2791 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2792 ;;Total ram usage:        0 bytes
  2793 ;; Hardware stack levels used:    1
  2794 ;; Hardware stack levels required when called:    7
  2795 ;; This function calls:
  2796 ;;		Nothing
  2797 ;; This function is called by:
  2798 ;;		_main
  2799 ;; This function uses a non-reentrant model
  2800 ;;
  2801                           
  2802                           	psect	text1
  2803  0044E8                     __ptext1:
  2804                           	opt stack 0
  2805  0044E8                     _stopSignals:
  2806                           	opt stack 23
  2807                           
  2808                           ;main.c: 61: LATA = 0x00;
  2809                           
  2810                           ; BSR set to: 0
  2811                           ;incstack = 0
  2812  0044E8  0E00               	movlw	0
  2813  0044EA  6E89               	movwf	3977,c	;volatile
  2814                           
  2815                           ;main.c: 62: LATB = 0x00;
  2816  0044EC  0E00               	movlw	0
  2817  0044EE  6E8A               	movwf	3978,c	;volatile
  2818                           
  2819                           ;main.c: 63: LATC = 0x00;
  2820  0044F0  0E00               	movlw	0
  2821  0044F2  6E8B               	movwf	3979,c	;volatile
  2822                           
  2823                           ;main.c: 64: LATD = 0x00;
  2824  0044F4  0E00               	movlw	0
  2825  0044F6  6E8C               	movwf	3980,c	;volatile
  2826                           
  2827                           ;main.c: 65: LATE = 0x00;
  2828  0044F8  0E00               	movlw	0
  2829  0044FA  6E8D               	movwf	3981,c	;volatile
  2830  0044FC  0012               	return		;funcret
  2831  0044FE                     __end_of_stopSignals:
  2832                           	opt stack 0
  2833                           tblptru	equ	0xFF8
  2834                           tblptrh	equ	0xFF7
  2835                           tblptrl	equ	0xFF6
  2836                           tablat	equ	0xFF5
  2837                           postinc0	equ	0xFEE
  2838                           wreg	equ	0xFE8
  2839                           postdec1	equ	0xFE5
  2840                           fsr1l	equ	0xFE1
  2841                           status	equ	0xFD8
  2842                           
  2843 ;; *************** function _sort *****************
  2844 ;; Defined at:
  2845 ;;		line 55 in file "sort.c"
  2846 ;; Parameters:    Size  Location     Type
  2847 ;;		None
  2848 ;; Auto vars:     Size  Location     Type
  2849 ;;		None
  2850 ;; Return value:  Size  Location     Type
  2851 ;;                  1    wreg      void 
  2852 ;; Registers used:
  2853 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2854 ;; Tracked objects:
  2855 ;;		On entry : 0/0
  2856 ;;		On exit  : 0/0
  2857 ;;		Unchanged: 0/0
  2858 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2859 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2860 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2861 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2862 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2863 ;;Total ram usage:        0 bytes
  2864 ;; Hardware stack levels used:    1
  2865 ;; Hardware stack levels required when called:   12
  2866 ;; This function calls:
  2867 ;;		_Distribution
  2868 ;;		_ID
  2869 ;;		_Loading
  2870 ;; This function is called by:
  2871 ;;		_main
  2872 ;; This function uses a non-reentrant model
  2873 ;;
  2874                           
  2875                           	psect	text2
  2876  00446E                     __ptext2:
  2877                           	opt stack 0
  2878  00446E                     _sort:
  2879                           	opt stack 18
  2880                           
  2881                           ;sort.c: 56: if(machine_state == Sorting_state){
  2882                           
  2883                           ;incstack = 0
  2884  00446E  0100               	movlb	0	; () banked
  2885  004470  05FC               	decf	_machine_state& (0+255),w,b
  2886  004472  B4D8               	btfsc	status,2,c
  2887                           
  2888                           ; BSR set to: 0
  2889                           ;sort.c: 57: Loading();
  2890  004474  EC21  F015         	call	_Loading	;wreg free
  2891                           
  2892                           ;sort.c: 58: }
  2893                           ;sort.c: 59: if(machine_state == Sorting_state){
  2894  004478  0100               	movlb	0	; () banked
  2895  00447A  05FC               	decf	_machine_state& (0+255),w,b
  2896  00447C  B4D8               	btfsc	status,2,c
  2897                           
  2898                           ; BSR set to: 0
  2899                           ;sort.c: 60: ID();
  2900  00447E  EC06  F017         	call	_ID	;wreg free
  2901                           
  2902                           ;sort.c: 61: }
  2903                           ;sort.c: 62: if(machine_state == Sorting_state){
  2904  004482  0100               	movlb	0	; () banked
  2905  004484  05FC               	decf	_machine_state& (0+255),w,b
  2906  004486  A4D8               	btfss	status,2,c
  2907  004488  0012               	return	
  2908                           
  2909                           ; BSR set to: 0
  2910                           ;sort.c: 63: Distribution();
  2911  00448A  ECC8  F015         	call	_Distribution	;wreg free
  2912  00448E  0012               	return	
  2913  004490                     __end_of_sort:
  2914                           	opt stack 0
  2915                           tblptru	equ	0xFF8
  2916                           tblptrh	equ	0xFF7
  2917                           tblptrl	equ	0xFF6
  2918                           tablat	equ	0xFF5
  2919                           postinc0	equ	0xFEE
  2920                           wreg	equ	0xFE8
  2921                           postdec1	equ	0xFE5
  2922                           fsr1l	equ	0xFE1
  2923                           status	equ	0xFD8
  2924                           
  2925 ;; *************** function _Loading *****************
  2926 ;; Defined at:
  2927 ;;		line 67 in file "sort.c"
  2928 ;; Parameters:    Size  Location     Type
  2929 ;;		None
  2930 ;; Auto vars:     Size  Location     Type
  2931 ;;  i               2   54[BANK0 ] int 
  2932 ;;  addr            2   51[BANK0 ] unsigned short 
  2933 ;;  byte1           1   53[BANK0 ] unsigned char 
  2934 ;; Return value:  Size  Location     Type
  2935 ;;                  1    wreg      void 
  2936 ;; Registers used:
  2937 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2938 ;; Tracked objects:
  2939 ;;		On entry : 0/0
  2940 ;;		On exit  : 0/0
  2941 ;;		Unchanged: 0/0
  2942 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2943 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2944 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2945 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2946 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2947 ;;Total ram usage:        7 bytes
  2948 ;; Hardware stack levels used:    1
  2949 ;; Hardware stack levels required when called:   11
  2950 ;; This function calls:
  2951 ;;		_EEPROM_read
  2952 ;;		_EEPROM_write
  2953 ;;		_delay_ms
  2954 ;;		_getIR
  2955 ;;		_initGlobalVars
  2956 ;;		_initServos
  2957 ;;		_initSortTimer
  2958 ;;		_lcdInst
  2959 ;; This function is called by:
  2960 ;;		_sort
  2961 ;; This function uses a non-reentrant model
  2962 ;;
  2963                           
  2964                           	psect	text3
  2965  002A42                     __ptext3:
  2966                           	opt stack 0
  2967  002A42                     _Loading:
  2968                           	opt stack 18
  2969                           
  2970                           ;sort.c: 68: if(first){
  2971                           
  2972                           ;incstack = 0
  2973  002A42  0100               	movlb	0	; () banked
  2974  002A44  51E4               	movf	_first& (0+255),w,b
  2975  002A46  0100               	movlb	0	; () banked
  2976  002A48  11E5               	iorwf	(_first+1)& (0+255),w,b
  2977  002A4A  B4D8               	btfsc	status,2,c
  2978  002A4C  D066               	goto	l6280
  2979                           
  2980                           ; BSR set to: 0
  2981                           ;sort.c: 69: initGlobalVars();
  2982  002A4E  EC73  F01D         	call	_initGlobalVars	;wreg free
  2983                           
  2984                           ;sort.c: 70: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  2985  002A52  0E01               	movlw	1
  2986  002A54  ECA5  F022         	call	_lcdInst
  2987  002A58  0E68               	movlw	104
  2988  002A5A  0100               	movlb	0	; () banked
  2989  002A5C  6FB1               	movwf	??_Loading& (0+255),b
  2990  002A5E  0EE4               	movlw	228
  2991  002A60                     u6817:
  2992  002A60  2EE8               	decfsz	wreg,f,c
  2993  002A62  D7FE               	bra	u6817
  2994  002A64  2FB1               	decfsz	??_Loading& (0+255),f,b
  2995  002A66  D7FC               	bra	u6817
  2996  002A68  F000               	nop	
  2997                           
  2998                           ;sort.c: 71: initSortTimer();
  2999  002A6A  ECC3  F01A         	call	_initSortTimer	;wreg free
  3000                           
  3001                           ;sort.c: 72: LATAbits.LATA6 = 1;
  3002  002A6E  8C89               	bsf	3977,6,c	;volatile
  3003                           
  3004                           ;sort.c: 77: sel = EEPROM_read(0);
  3005  002A70  0E00               	movlw	0
  3006  002A72  0100               	movlb	0	; () banked
  3007  002A74  6F81               	movwf	(EEPROM_read@address+1)& (0+255),b
  3008  002A76  0E00               	movlw	0
  3009  002A78  6F80               	movwf	EEPROM_read@address& (0+255),b
  3010  002A7A  EC68  F022         	call	_EEPROM_read	;wreg free
  3011  002A7E  0100               	movlb	0	; () banked
  3012  002A80  6FFD               	movwf	_sel& (0+255),b
  3013                           
  3014                           ; BSR set to: 0
  3015                           ;sort.c: 78: unsigned short addr = 1 + 11 * sel;
  3016  002A82  0100               	movlb	0	; () banked
  3017  002A84  51FD               	movf	_sel& (0+255),w,b
  3018  002A86  0D0B               	mullw	11
  3019  002A88  0E01               	movlw	1
  3020  002A8A  24F3               	addwf	prodl,w,c
  3021  002A8C  0100               	movlb	0	; () banked
  3022  002A8E  6FB3               	movwf	Loading@addr& (0+255),b
  3023  002A90  0E00               	movlw	0
  3024  002A92  20F4               	addwfc	prodh,w,c
  3025  002A94  0100               	movlb	0	; () banked
  3026  002A96  6FB4               	movwf	(Loading@addr+1)& (0+255),b
  3027                           
  3028                           ; BSR set to: 0
  3029                           ;sort.c: 79: unsigned char byte1 = 0b01111111;
  3030  002A98  0E7F               	movlw	127
  3031  002A9A  0100               	movlb	0	; () banked
  3032  002A9C  6FB5               	movwf	Loading@byte1& (0+255),b
  3033                           
  3034                           ; BSR set to: 0
  3035                           ;sort.c: 80: EEPROM_write(addr, byte1);
  3036  002A9E  C0B3  F0AB         	movff	Loading@addr,EEPROM_write@address
  3037  002AA2  C0B4  F0AC         	movff	Loading@addr+1,EEPROM_write@address+1
  3038  002AA6  C0B5  F0AD         	movff	Loading@byte1,EEPROM_write@data
  3039  002AAA  EC27  F019         	call	_EEPROM_write	;wreg free
  3040                           
  3041                           ;sort.c: 83: LATAbits.LATA5 = 0;
  3042  002AAE  9A89               	bcf	3977,5,c	;volatile
  3043                           
  3044                           ;sort.c: 84: for(int i=0; i<46; i++){
  3045  002AB0  0E00               	movlw	0
  3046  002AB2  0100               	movlb	0	; () banked
  3047  002AB4  6FB7               	movwf	(Loading@i+1)& (0+255),b
  3048  002AB6  0E00               	movlw	0
  3049  002AB8  6FB6               	movwf	Loading@i& (0+255),b
  3050                           
  3051                           ; BSR set to: 0
  3052  002ABA  0100               	movlb	0	; () banked
  3053  002ABC  BFB7               	btfsc	(Loading@i+1)& (0+255),7,b
  3054  002ABE  D008               	goto	l6270
  3055  002AC0  0100               	movlb	0	; () banked
  3056  002AC2  51B7               	movf	(Loading@i+1)& (0+255),w,b
  3057  002AC4  E126               	bnz	l719
  3058  002AC6  0E2E               	movlw	46
  3059  002AC8  0100               	movlb	0	; () banked
  3060  002ACA  5DB6               	subwf	Loading@i& (0+255),w,b
  3061  002ACC  B0D8               	btfsc	status,0,c
  3062  002ACE  D021               	goto	l719
  3063  002AD0                     l6270:
  3064                           
  3065                           ; BSR set to: 0
  3066                           ;sort.c: 85: LATAbits.LATA5 = !LATAbits.LATA5;
  3067  002AD0  BA89               	btfsc	3977,5,c	;volatile
  3068  002AD2  D004               	goto	u4690
  3069  002AD4  0100               	movlb	0	; () banked
  3070  002AD6  6BB1               	clrf	??_Loading& (0+255),b
  3071  002AD8  2BB1               	incf	??_Loading& (0+255),f,b
  3072  002ADA  D002               	goto	u4708
  3073  002ADC                     u4690:
  3074  002ADC  0100               	movlb	0	; () banked
  3075  002ADE  6BB1               	clrf	??_Loading& (0+255),b
  3076  002AE0                     u4708:
  3077  002AE0  0100               	movlb	0	; () banked
  3078  002AE2  3BB1               	swapf	??_Loading& (0+255),f,b
  3079  002AE4  47B1               	rlncf	??_Loading& (0+255),f,b
  3080  002AE6  5089               	movf	3977,w,c	;volatile
  3081  002AE8  0100               	movlb	0	; () banked
  3082  002AEA  19B1               	xorwf	??_Loading& (0+255),w,b
  3083  002AEC  0BDF               	andlw	-33
  3084  002AEE  19B1               	xorwf	??_Loading& (0+255),w,b
  3085  002AF0  6E89               	movwf	3977,c	;volatile
  3086                           
  3087                           ; BSR set to: 0
  3088                           ;sort.c: 86: delay_ms(45-i);
  3089  002AF2  0100               	movlb	0	; () banked
  3090  002AF4  51B6               	movf	Loading@i& (0+255),w,b
  3091  002AF6  0800               	sublw	0
  3092  002AF8  0F2D               	addlw	45
  3093  002AFA  ECC5  F021         	call	_delay_ms
  3094  002AFE  0100               	movlb	0	; () banked
  3095  002B00  4BB6               	infsnz	Loading@i& (0+255),f,b
  3096  002B02  2BB7               	incf	(Loading@i+1)& (0+255),f,b
  3097                           
  3098                           ; BSR set to: 0
  3099  002B04  0100               	movlb	0	; () banked
  3100  002B06  BFB7               	btfsc	(Loading@i+1)& (0+255),7,b
  3101  002B08  D7E3               	goto	l6270
  3102  002B0A  0100               	movlb	0	; () banked
  3103  002B0C  51B7               	movf	(Loading@i+1)& (0+255),w,b
  3104  002B0E  E101               	bnz	u4710
  3105  002B10  D7DA               	goto	L1
  3106  002B12                     u4710:
  3107  002B12                     l719:
  3108                           
  3109                           ; BSR set to: 0
  3110                           ;sort.c: 87: }
  3111                           ;sort.c: 88: LATAbits.LATA5 = 1;
  3112  002B12  8A89               	bsf	3977,5,c	;volatile
  3113                           
  3114                           ; BSR set to: 0
  3115                           ;sort.c: 91: initServos();
  3116  002B14  EC98  F01E         	call	_initServos	;wreg free
  3117                           
  3118                           ;sort.c: 92: }
  3119  002B18  0012               	return	
  3120  002B1A                     l6280:
  3121                           
  3122                           ;sort.c: 93: else{
  3123                           ;sort.c: 96: if(!f_loadingNewCan){
  3124  002B1A  0100               	movlb	0	; () banked
  3125  002B1C  51E2               	movf	_f_loadingNewCan& (0+255),w,b
  3126  002B1E  0100               	movlb	0	; () banked
  3127  002B20  11E3               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  3128  002B22  A4D8               	btfss	status,2,c
  3129  002B24  D017               	goto	l6296
  3130                           
  3131                           ; BSR set to: 0
  3132                           ;sort.c: 98: getIR();
  3133  002B26  EC40  F01F         	call	_getIR	;wreg free
  3134                           
  3135                           ;sort.c: 100: if(!f_loadingNewCan){
  3136  002B2A  0100               	movlb	0	; () banked
  3137  002B2C  51E2               	movf	_f_loadingNewCan& (0+255),w,b
  3138  002B2E  0100               	movlb	0	; () banked
  3139  002B30  11E3               	iorwf	(_f_loadingNewCan+1)& (0+255),w,b
  3140  002B32  B4D8               	btfsc	status,2,c
  3141  002B34  0012               	return	
  3142                           
  3143                           ; BSR set to: 0
  3144                           ;sort.c: 104: else{
  3145                           ;sort.c: 105: count_total++;
  3146                           
  3147                           ; BSR set to: 0
  3148                           
  3149                           ; BSR set to: 0
  3150                           ;sort.c: 102: }
  3151                           
  3152                           ; BSR set to: 0
  3153                           ;sort.c: 101: return;
  3154  002B36  0100               	movlb	0	; () banked
  3155  002B38  4BFE               	infsnz	_count_total& (0+255),f,b
  3156  002B3A  2BFF               	incf	(_count_total+1)& (0+255),f,b
  3157                           
  3158                           ; BSR set to: 0
  3159                           ;sort.c: 106: if(count_total == 12){
  3160  002B3C  0E0C               	movlw	12
  3161  002B3E  0100               	movlb	0	; () banked
  3162  002B40  19FE               	xorwf	_count_total& (0+255),w,b
  3163  002B42  0100               	movlb	0	; () banked
  3164  002B44  11FF               	iorwf	(_count_total+1)& (0+255),w,b
  3165  002B46  A4D8               	btfss	status,2,c
  3166  002B48  0012               	return	
  3167                           
  3168                           ; BSR set to: 0
  3169                           ;sort.c: 107: f_lastCan = 1;
  3170  002B4A  0E00               	movlw	0
  3171  002B4C  6E74               	movwf	_f_lastCan+1,c
  3172  002B4E  0E01               	movlw	1
  3173  002B50  6E73               	movwf	_f_lastCan,c
  3174                           
  3175                           ; BSR set to: 0
  3176                           ;sort.c: 108: }
  3177                           ;sort.c: 109: }
  3178                           ;sort.c: 110: }
  3179                           
  3180                           ; BSR set to: 0
  3181  002B52  0012               	return	
  3182  002B54                     l6296:
  3183                           
  3184                           ; BSR set to: 0
  3185                           ;sort.c: 113: else if(f_ID_receive){
  3186  002B54  506B               	movf	_f_ID_receive,w,c
  3187  002B56  106C               	iorwf	_f_ID_receive+1,w,c
  3188  002B58  B4D8               	btfsc	status,2,c
  3189  002B5A  0012               	return	
  3190                           
  3191                           ; BSR set to: 0
  3192                           ;sort.c: 114: f_loadingNewCan = 0;
  3193  002B5C  0E00               	movlw	0
  3194  002B5E  0100               	movlb	0	; () banked
  3195  002B60  6FE3               	movwf	(_f_loadingNewCan+1)& (0+255),b
  3196  002B62  0E00               	movlw	0
  3197  002B64  6FE2               	movwf	_f_loadingNewCan& (0+255),b
  3198                           
  3199                           ; BSR set to: 0
  3200                           ;sort.c: 115: LATAbits.LATA4 = 1;
  3201  002B66  8889               	bsf	3977,4,c	;volatile
  3202                           
  3203                           ;sort.c: 116: f_can_coming_to_ID = 1;
  3204  002B68  0E00               	movlw	0
  3205  002B6A  6E6E               	movwf	_f_can_coming_to_ID+1,c
  3206  002B6C  0E01               	movlw	1
  3207  002B6E  6E6D               	movwf	_f_can_coming_to_ID,c
  3208                           
  3209                           ; BSR set to: 0
  3210                           ;sort.c: 117: _delay((unsigned long)((300)*(32000000/4000.0)));
  3211  002B70  0E0D               	movlw	13
  3212  002B72  0100               	movlb	0	; () banked
  3213  002B74  6FB2               	movwf	(??_Loading+1)& (0+255),b
  3214  002B76  0E2D               	movlw	45
  3215  002B78  0100               	movlb	0	; () banked
  3216  002B7A  6FB1               	movwf	??_Loading& (0+255),b
  3217  002B7C  0ED7               	movlw	215
  3218  002B7E                     u6827:
  3219  002B7E  2EE8               	decfsz	wreg,f,c
  3220  002B80  D7FE               	bra	u6827
  3221  002B82  2FB1               	decfsz	??_Loading& (0+255),f,b
  3222  002B84  D7FC               	bra	u6827
  3223  002B86  2FB2               	decfsz	(??_Loading+1)& (0+255),f,b
  3224  002B88  D7FA               	bra	u6827
  3225  002B8A  D000               	nop2	
  3226                           
  3227                           ;sort.c: 118: LATAbits.LATA4 = 0;
  3228  002B8C  9889               	bcf	3977,4,c	;volatile
  3229  002B8E  0012               	return	
  3230  002B90                     __end_of_Loading:
  3231                           	opt stack 0
  3232                           tblptru	equ	0xFF8
  3233                           tblptrh	equ	0xFF7
  3234                           tblptrl	equ	0xFF6
  3235                           tablat	equ	0xFF5
  3236                           prodh	equ	0xFF4
  3237                           prodl	equ	0xFF3
  3238                           postinc0	equ	0xFEE
  3239                           wreg	equ	0xFE8
  3240                           postdec1	equ	0xFE5
  3241                           fsr1l	equ	0xFE1
  3242                           status	equ	0xFD8
  3243                           
  3244 ;; *************** function _initSortTimer *****************
  3245 ;; Defined at:
  3246 ;;		line 234 in file "sort.c"
  3247 ;; Parameters:    Size  Location     Type
  3248 ;;		None
  3249 ;; Auto vars:     Size  Location     Type
  3250 ;;  i               2    8[BANK0 ] int 
  3251 ;; Return value:  Size  Location     Type
  3252 ;;                  1    wreg      void 
  3253 ;; Registers used:
  3254 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3255 ;; Tracked objects:
  3256 ;;		On entry : 0/0
  3257 ;;		On exit  : 0/0
  3258 ;;		Unchanged: 0/0
  3259 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3260 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3261 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3262 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3263 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3264 ;;Total ram usage:        5 bytes
  3265 ;; Hardware stack levels used:    1
  3266 ;; Hardware stack levels required when called:   10
  3267 ;; This function calls:
  3268 ;;		_getRTC
  3269 ;; This function is called by:
  3270 ;;		_Loading
  3271 ;; This function uses a non-reentrant model
  3272 ;;
  3273                           
  3274                           	psect	text4
  3275  003586                     __ptext4:
  3276                           	opt stack 0
  3277  003586                     _initSortTimer:
  3278                           	opt stack 18
  3279                           
  3280                           ;sort.c: 236: getRTC();
  3281                           
  3282                           ;incstack = 0
  3283  003586  EC3E  F01C         	call	_getRTC	;wreg free
  3284                           
  3285                           ;sort.c: 237: for(int i = 0; i < 7; i++){
  3286  00358A  0E00               	movlw	0
  3287  00358C  0100               	movlb	0	; () banked
  3288  00358E  6F89               	movwf	(initSortTimer@i+1)& (0+255),b
  3289  003590  0E00               	movlw	0
  3290  003592  6F88               	movwf	initSortTimer@i& (0+255),b
  3291  003594                     l5876:
  3292                           
  3293                           ; BSR set to: 0
  3294  003594  0100               	movlb	0	; () banked
  3295  003596  BF89               	btfsc	(initSortTimer@i+1)& (0+255),7,b
  3296  003598  D008               	goto	l5880
  3297  00359A  0100               	movlb	0	; () banked
  3298  00359C  5189               	movf	(initSortTimer@i+1)& (0+255),w,b
  3299  00359E  E140               	bnz	l5886
  3300  0035A0  0E07               	movlw	7
  3301  0035A2  0100               	movlb	0	; () banked
  3302  0035A4  5D88               	subwf	initSortTimer@i& (0+255),w,b
  3303  0035A6  B0D8               	btfsc	status,0,c
  3304  0035A8  D03B               	goto	l5886
  3305  0035AA                     l5880:
  3306                           
  3307                           ; BSR set to: 0
  3308                           ;sort.c: 238: startTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  3309  0035AA  0E24               	movlw	low _time
  3310  0035AC  0100               	movlb	0	; () banked
  3311  0035AE  2588               	addwf	initSortTimer@i& (0+255),w,b
  3312  0035B0  6ED9               	movwf	fsr2l,c
  3313  0035B2  0E01               	movlw	high _time
  3314  0035B4  0100               	movlb	0	; () banked
  3315  0035B6  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  3316  0035B8  6EDA               	movwf	fsr2h,c
  3317  0035BA  50DF               	movf	indf2,w,c
  3318  0035BC  0100               	movlb	0	; () banked
  3319  0035BE  6F85               	movwf	??_initSortTimer& (0+255),b
  3320  0035C0  0100               	movlb	0	; () banked
  3321  0035C2  3B85               	swapf	??_initSortTimer& (0+255),f,b
  3322  0035C4  0E0F               	movlw	15
  3323  0035C6  1785               	andwf	??_initSortTimer& (0+255),f,b
  3324  0035C8  0E0F               	movlw	15
  3325  0035CA  0100               	movlb	0	; () banked
  3326  0035CC  1785               	andwf	??_initSortTimer& (0+255),f,b
  3327  0035CE  0100               	movlb	0	; () banked
  3328  0035D0  5185               	movf	??_initSortTimer& (0+255),w,b
  3329  0035D2  0D0A               	mullw	10
  3330  0035D4  0E24               	movlw	low _time
  3331  0035D6  0100               	movlb	0	; () banked
  3332  0035D8  2588               	addwf	initSortTimer@i& (0+255),w,b
  3333  0035DA  6ED9               	movwf	fsr2l,c
  3334  0035DC  0E01               	movlw	high _time
  3335  0035DE  0100               	movlb	0	; () banked
  3336  0035E0  2189               	addwfc	(initSortTimer@i+1)& (0+255),w,b
  3337  0035E2  6EDA               	movwf	fsr2h,c
  3338  0035E4  50DF               	movf	indf2,w,c
  3339  0035E6  0B0F               	andlw	15
  3340  0035E8  0100               	movlb	0	; () banked
  3341  0035EA  6F86               	movwf	(??_initSortTimer+1)& (0+255),b
  3342  0035EC  6B87               	clrf	(??_initSortTimer+2)& (0+255),b
  3343  0035EE  50F3               	movf	prodl,w,c
  3344  0035F0  0100               	movlb	0	; () banked
  3345  0035F2  2786               	addwf	(??_initSortTimer+1)& (0+255),f,b
  3346  0035F4  50F4               	movf	prodh,w,c
  3347  0035F6  0100               	movlb	0	; () banked
  3348  0035F8  2387               	addwfc	(??_initSortTimer+2)& (0+255),f,b
  3349  0035FA  90D8               	bcf	status,0,c
  3350  0035FC  0100               	movlb	0	; () banked
  3351  0035FE  3588               	rlcf	initSortTimer@i& (0+255),w,b
  3352  003600  6ED9               	movwf	fsr2l,c
  3353  003602  0100               	movlb	0	; () banked
  3354  003604  3589               	rlcf	(initSortTimer@i+1)& (0+255),w,b
  3355  003606  6EDA               	movwf	fsr2h,c
  3356  003608  0E0E               	movlw	low _startTime
  3357  00360A  26D9               	addwf	fsr2l,f,c
  3358  00360C  0E01               	movlw	high _startTime
  3359  00360E  22DA               	addwfc	fsr2h,f,c
  3360  003610  C086  FFDE         	movff	??_initSortTimer+1,postinc2
  3361  003614  C087  FFDD         	movff	??_initSortTimer+2,postdec2
  3362                           
  3363                           ; BSR set to: 0
  3364  003618  0100               	movlb	0	; () banked
  3365  00361A  4B88               	infsnz	initSortTimer@i& (0+255),f,b
  3366  00361C  2B89               	incf	(initSortTimer@i+1)& (0+255),f,b
  3367  00361E  D7BA               	goto	l5876
  3368  003620                     l5886:
  3369                           
  3370                           ; BSR set to: 0
  3371                           ;sort.c: 239: }
  3372                           ;sort.c: 241: T0CON = 0b00010111;
  3373  003620  0E17               	movlw	23
  3374  003622  6ED5               	movwf	4053,c	;volatile
  3375                           
  3376                           ;sort.c: 250: TMR0H = 0b10000101;
  3377  003624  0E85               	movlw	133
  3378  003626  6ED7               	movwf	4055,c	;volatile
  3379                           
  3380                           ;sort.c: 251: TMR0L = 0b11101110;
  3381  003628  0EEE               	movlw	238
  3382  00362A  6ED6               	movwf	4054,c	;volatile
  3383                           
  3384                           ; BSR set to: 0
  3385                           ;sort.c: 252: TMR0ON = 1;
  3386  00362C  8ED5               	bsf	4053,7,c	;volatile
  3387                           
  3388                           ; BSR set to: 0
  3389  00362E  0012               	return		;funcret
  3390  003630                     __end_of_initSortTimer:
  3391                           	opt stack 0
  3392                           tblptru	equ	0xFF8
  3393                           tblptrh	equ	0xFF7
  3394                           tblptrl	equ	0xFF6
  3395                           tablat	equ	0xFF5
  3396                           prodh	equ	0xFF4
  3397                           prodl	equ	0xFF3
  3398                           postinc0	equ	0xFEE
  3399                           wreg	equ	0xFE8
  3400                           postdec1	equ	0xFE5
  3401                           fsr1l	equ	0xFE1
  3402                           indf2	equ	0xFDF
  3403                           postinc2	equ	0xFDE
  3404                           postdec2	equ	0xFDD
  3405                           fsr2h	equ	0xFDA
  3406                           fsr2l	equ	0xFD9
  3407                           status	equ	0xFD8
  3408                           
  3409 ;; *************** function _initGlobalVars *****************
  3410 ;; Defined at:
  3411 ;;		line 215 in file "sort.c"
  3412 ;; Parameters:    Size  Location     Type
  3413 ;;		None
  3414 ;; Auto vars:     Size  Location     Type
  3415 ;;		None
  3416 ;; Return value:  Size  Location     Type
  3417 ;;                  1    wreg      void 
  3418 ;; Registers used:
  3419 ;;		wreg, status,2
  3420 ;; Tracked objects:
  3421 ;;		On entry : 0/0
  3422 ;;		On exit  : 0/0
  3423 ;;		Unchanged: 0/0
  3424 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3425 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3426 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3427 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3428 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3429 ;;Total ram usage:        0 bytes
  3430 ;; Hardware stack levels used:    1
  3431 ;; Hardware stack levels required when called:    7
  3432 ;; This function calls:
  3433 ;;		Nothing
  3434 ;; This function is called by:
  3435 ;;		_Loading
  3436 ;; This function uses a non-reentrant model
  3437 ;;
  3438                           
  3439                           	psect	text5
  3440  003AE6                     __ptext5:
  3441                           	opt stack 0
  3442  003AE6                     _initGlobalVars:
  3443                           	opt stack 21
  3444                           
  3445                           ;sort.c: 217: first = 0;
  3446                           
  3447                           ; BSR set to: 0
  3448                           ;incstack = 0
  3449  003AE6  0E00               	movlw	0
  3450  003AE8  0100               	movlb	0	; () banked
  3451  003AEA  6FE5               	movwf	(_first+1)& (0+255),b
  3452  003AEC  0E00               	movlw	0
  3453  003AEE  6FE4               	movwf	_first& (0+255),b
  3454                           
  3455                           ;sort.c: 220: f_loadingNewCan = 0;
  3456  003AF0  0E00               	movlw	0
  3457  003AF2  0100               	movlb	0	; () banked
  3458  003AF4  6FE3               	movwf	(_f_loadingNewCan+1)& (0+255),b
  3459  003AF6  0E00               	movlw	0
  3460  003AF8  6FE2               	movwf	_f_loadingNewCan& (0+255),b
  3461                           
  3462                           ;sort.c: 221: f_lastCan = 0;
  3463  003AFA  0E00               	movlw	0
  3464  003AFC  6E74               	movwf	_f_lastCan+1,c
  3465  003AFE  0E00               	movlw	0
  3466  003B00  6E73               	movwf	_f_lastCan,c
  3467                           
  3468                           ;sort.c: 222: f_ID_receive = 1;
  3469  003B02  0E00               	movlw	0
  3470  003B04  6E6C               	movwf	_f_ID_receive+1,c
  3471  003B06  0E01               	movlw	1
  3472  003B08  6E6B               	movwf	_f_ID_receive,c
  3473                           
  3474                           ;sort.c: 223: f_can_coming_to_ID = 0;
  3475  003B0A  0E00               	movlw	0
  3476  003B0C  6E6E               	movwf	_f_can_coming_to_ID+1,c
  3477  003B0E  0E00               	movlw	0
  3478  003B10  6E6D               	movwf	_f_can_coming_to_ID,c
  3479                           
  3480                           ;sort.c: 224: f_can_coming_to_distribution = 0;
  3481  003B12  0E00               	movlw	0
  3482  003B14  6E70               	movwf	_f_can_coming_to_distribution+1,c
  3483  003B16  0E00               	movlw	0
  3484  003B18  6E6F               	movwf	_f_can_coming_to_distribution,c
  3485                           
  3486                           ;sort.c: 225: f_can_distributed = 0;
  3487  003B1A  0E00               	movlw	0
  3488  003B1C  6E72               	movwf	_f_can_distributed+1,c
  3489  003B1E  0E00               	movlw	0
  3490  003B20  6E71               	movwf	_f_can_distributed,c
  3491                           
  3492                           ;sort.c: 228: count_total = 0;
  3493  003B22  0E00               	movlw	0
  3494  003B24  0100               	movlb	0	; () banked
  3495  003B26  6FFF               	movwf	(_count_total+1)& (0+255),b
  3496  003B28  0E00               	movlw	0
  3497  003B2A  6FFE               	movwf	_count_total& (0+255),b
  3498                           
  3499                           ;sort.c: 229: count_pop_no_tab = 0;
  3500  003B2C  0E00               	movlw	0
  3501  003B2E  6E62               	movwf	_count_pop_no_tab+1,c
  3502  003B30  0E00               	movlw	0
  3503  003B32  6E61               	movwf	_count_pop_no_tab,c
  3504                           
  3505                           ;sort.c: 230: count_pop_w_tab = 0;
  3506  003B34  0E00               	movlw	0
  3507  003B36  6E64               	movwf	_count_pop_w_tab+1,c
  3508  003B38  0E00               	movlw	0
  3509  003B3A  6E63               	movwf	_count_pop_w_tab,c
  3510                           
  3511                           ;sort.c: 231: count_can_w_lab = 0;
  3512  003B3C  0E00               	movlw	0
  3513  003B3E  6E60               	movwf	_count_can_w_lab+1,c
  3514  003B40  0E00               	movlw	0
  3515  003B42  6E5F               	movwf	_count_can_w_lab,c
  3516                           
  3517                           ;sort.c: 232: count_can_no_lab = 0;
  3518  003B44  0E00               	movlw	0
  3519  003B46  6E5E               	movwf	_count_can_no_lab+1,c
  3520  003B48  0E00               	movlw	0
  3521  003B4A  6E5D               	movwf	_count_can_no_lab,c
  3522                           
  3523                           ; BSR set to: 0
  3524  003B4C  0012               	return		;funcret
  3525  003B4E                     __end_of_initGlobalVars:
  3526                           	opt stack 0
  3527                           tblptru	equ	0xFF8
  3528                           tblptrh	equ	0xFF7
  3529                           tblptrl	equ	0xFF6
  3530                           tablat	equ	0xFF5
  3531                           prodh	equ	0xFF4
  3532                           prodl	equ	0xFF3
  3533                           postinc0	equ	0xFEE
  3534                           wreg	equ	0xFE8
  3535                           postdec1	equ	0xFE5
  3536                           fsr1l	equ	0xFE1
  3537                           indf2	equ	0xFDF
  3538                           postinc2	equ	0xFDE
  3539                           postdec2	equ	0xFDD
  3540                           fsr2h	equ	0xFDA
  3541                           fsr2l	equ	0xFD9
  3542                           status	equ	0xFD8
  3543                           
  3544 ;; *************** function _getIR *****************
  3545 ;; Defined at:
  3546 ;;		line 291 in file "sort.c"
  3547 ;; Parameters:    Size  Location     Type
  3548 ;;		None
  3549 ;; Auto vars:     Size  Location     Type
  3550 ;;		None
  3551 ;; Return value:  Size  Location     Type
  3552 ;;                  1    wreg      void 
  3553 ;; Registers used:
  3554 ;;		wreg, status,2, status,0, cstack
  3555 ;; Tracked objects:
  3556 ;;		On entry : 0/0
  3557 ;;		On exit  : 0/0
  3558 ;;		Unchanged: 0/0
  3559 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3560 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3561 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3562 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3563 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3564 ;;Total ram usage:        2 bytes
  3565 ;; Hardware stack levels used:    1
  3566 ;; Hardware stack levels required when called:    9
  3567 ;; This function calls:
  3568 ;;		_readIR
  3569 ;; This function is called by:
  3570 ;;		_Loading
  3571 ;; This function uses a non-reentrant model
  3572 ;;
  3573                           
  3574                           	psect	text6
  3575  003E80                     __ptext6:
  3576                           	opt stack 0
  3577  003E80                     _getIR:
  3578                           	opt stack 19
  3579                           
  3580                           ;sort.c: 292: readIR();
  3581                           
  3582                           ; BSR set to: 0
  3583                           ;incstack = 0
  3584  003E80  EC8D  F01F         	call	_readIR	;wreg free
  3585                           
  3586                           ;sort.c: 293: if(IR_signal==1){
  3587  003E84  0100               	movlb	0	; () banked
  3588  003E86  05DA               	decf	_IR_signal& (0+255),w,b
  3589  003E88  0100               	movlb	0	; () banked
  3590  003E8A  11DB               	iorwf	(_IR_signal+1)& (0+255),w,b
  3591  003E8C  A4D8               	btfss	status,2,c
  3592  003E8E  0012               	return	
  3593                           
  3594                           ; BSR set to: 0
  3595                           ;sort.c: 294: _delay((unsigned long)((100)*(32000000/4000.0)));
  3596  003E90  0E05               	movlw	5
  3597  003E92  0100               	movlb	0	; () banked
  3598  003E94  6F87               	movwf	(??_getIR+1)& (0+255),b
  3599  003E96  0E0F               	movlw	15
  3600  003E98  0100               	movlb	0	; () banked
  3601  003E9A  6F86               	movwf	??_getIR& (0+255),b
  3602  003E9C  0EF1               	movlw	241
  3603  003E9E                     u6837:
  3604  003E9E  2EE8               	decfsz	wreg,f,c
  3605  003EA0  D7FE               	bra	u6837
  3606  003EA2  2F86               	decfsz	??_getIR& (0+255),f,b
  3607  003EA4  D7FC               	bra	u6837
  3608  003EA6  2F87               	decfsz	(??_getIR+1)& (0+255),f,b
  3609  003EA8  D7FA               	bra	u6837
  3610                           
  3611                           ;sort.c: 295: if(IR_signal==1){
  3612  003EAA  0100               	movlb	0	; () banked
  3613  003EAC  05DA               	decf	_IR_signal& (0+255),w,b
  3614  003EAE  0100               	movlb	0	; () banked
  3615  003EB0  11DB               	iorwf	(_IR_signal+1)& (0+255),w,b
  3616  003EB2  A4D8               	btfss	status,2,c
  3617  003EB4  D006               	goto	l5974
  3618                           
  3619                           ; BSR set to: 0
  3620                           ;sort.c: 296: f_loadingNewCan = 1;
  3621  003EB6  0E00               	movlw	0
  3622  003EB8  0100               	movlb	0	; () banked
  3623  003EBA  6FE3               	movwf	(_f_loadingNewCan+1)& (0+255),b
  3624  003EBC  0E01               	movlw	1
  3625  003EBE  6FE2               	movwf	_f_loadingNewCan& (0+255),b
  3626                           
  3627                           ;sort.c: 297: }
  3628  003EC0  0012               	return	
  3629  003EC2                     l5974:
  3630                           
  3631                           ; BSR set to: 0
  3632                           ;sort.c: 298: else{
  3633                           ;sort.c: 299: f_loadingNewCan = 0;
  3634  003EC2  0E00               	movlw	0
  3635  003EC4  0100               	movlb	0	; () banked
  3636  003EC6  6FE3               	movwf	(_f_loadingNewCan+1)& (0+255),b
  3637  003EC8  0E00               	movlw	0
  3638  003ECA  6FE2               	movwf	_f_loadingNewCan& (0+255),b
  3639                           
  3640                           ; BSR set to: 0
  3641  003ECC  0012               	return	
  3642  003ECE                     __end_of_getIR:
  3643                           	opt stack 0
  3644                           tblptru	equ	0xFF8
  3645                           tblptrh	equ	0xFF7
  3646                           tblptrl	equ	0xFF6
  3647                           tablat	equ	0xFF5
  3648                           prodh	equ	0xFF4
  3649                           prodl	equ	0xFF3
  3650                           postinc0	equ	0xFEE
  3651                           wreg	equ	0xFE8
  3652                           postdec1	equ	0xFE5
  3653                           fsr1l	equ	0xFE1
  3654                           indf2	equ	0xFDF
  3655                           postinc2	equ	0xFDE
  3656                           postdec2	equ	0xFDD
  3657                           fsr2h	equ	0xFDA
  3658                           fsr2l	equ	0xFD9
  3659                           status	equ	0xFD8
  3660                           
  3661 ;; *************** function _delay_ms *****************
  3662 ;; Defined at:
  3663 ;;		line 316 in file "sort.c"
  3664 ;; Parameters:    Size  Location     Type
  3665 ;;  milliseconds    1    wreg     unsigned char 
  3666 ;; Auto vars:     Size  Location     Type
  3667 ;;  milliseconds    1    1[BANK0 ] unsigned char 
  3668 ;; Return value:  Size  Location     Type
  3669 ;;                  1    wreg      void 
  3670 ;; Registers used:
  3671 ;;		wreg, status,2, status,0, cstack
  3672 ;; Tracked objects:
  3673 ;;		On entry : 0/0
  3674 ;;		On exit  : 0/0
  3675 ;;		Unchanged: 0/0
  3676 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3677 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3678 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3679 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3680 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3681 ;;Total ram usage:        2 bytes
  3682 ;; Hardware stack levels used:    1
  3683 ;; Hardware stack levels required when called:    7
  3684 ;; This function calls:
  3685 ;;		Nothing
  3686 ;; This function is called by:
  3687 ;;		_Loading
  3688 ;; This function uses a non-reentrant model
  3689 ;;
  3690                           
  3691                           	psect	text7
  3692  00438A                     __ptext7:
  3693                           	opt stack 0
  3694  00438A                     _delay_ms:
  3695                           	opt stack 21
  3696                           
  3697                           ; BSR set to: 0
  3698                           ;incstack = 0
  3699                           ;delay_ms@milliseconds stored from wreg
  3700  00438A  0100               	movlb	0	; () banked
  3701  00438C  6F81               	movwf	delay_ms@milliseconds& (0+255),b
  3702                           
  3703                           ;sort.c: 317: while(milliseconds > 0)
  3704  00438E  D00B               	goto	l5948
  3705  004390                     l5944:
  3706                           
  3707                           ;sort.c: 318: {
  3708                           ;sort.c: 319: milliseconds--;
  3709  004390  0100               	movlb	0	; () banked
  3710  004392  0781               	decf	delay_ms@milliseconds& (0+255),f,b
  3711                           
  3712                           ; BSR set to: 0
  3713                           ;sort.c: 320: _delay((unsigned long)((990)*(32000000/4000000.0)));
  3714  004394  0E0B               	movlw	11
  3715  004396  0100               	movlb	0	; () banked
  3716  004398  6F80               	movwf	??_delay_ms& (0+255),b
  3717  00439A  0E47               	movlw	71
  3718  00439C                     u6847:
  3719  00439C  2EE8               	decfsz	wreg,f,c
  3720  00439E  D7FE               	bra	u6847
  3721  0043A0  2F80               	decfsz	??_delay_ms& (0+255),f,b
  3722  0043A2  D7FC               	bra	u6847
  3723  0043A4  D000               	nop2	
  3724  0043A6                     l5948:
  3725  0043A6  0100               	movlb	0	; () banked
  3726  0043A8  5181               	movf	delay_ms@milliseconds& (0+255),w,b
  3727  0043AA  0100               	movlb	0	; () banked
  3728  0043AC  B4D8               	btfsc	status,2,c
  3729  0043AE  0012               	return	
  3730  0043B0  D7EF               	goto	l5944
  3731  0043B2                     __end_of_delay_ms:
  3732                           	opt stack 0
  3733                           tblptru	equ	0xFF8
  3734                           tblptrh	equ	0xFF7
  3735                           tblptrl	equ	0xFF6
  3736                           tablat	equ	0xFF5
  3737                           prodh	equ	0xFF4
  3738                           prodl	equ	0xFF3
  3739                           postinc0	equ	0xFEE
  3740                           wreg	equ	0xFE8
  3741                           postdec1	equ	0xFE5
  3742                           fsr1l	equ	0xFE1
  3743                           indf2	equ	0xFDF
  3744                           postinc2	equ	0xFDE
  3745                           postdec2	equ	0xFDD
  3746                           fsr2h	equ	0xFDA
  3747                           fsr2l	equ	0xFD9
  3748                           status	equ	0xFD8
  3749                           
  3750 ;; *************** function _ID *****************
  3751 ;; Defined at:
  3752 ;;		line 122 in file "sort.c"
  3753 ;; Parameters:    Size  Location     Type
  3754 ;;		None
  3755 ;; Auto vars:     Size  Location     Type
  3756 ;;  sensor_outpu    6    8[BANK0 ] int [3]
  3757 ;; Return value:  Size  Location     Type
  3758 ;;                  1    wreg      void 
  3759 ;; Registers used:
  3760 ;;		wreg, status,2, status,0, cstack
  3761 ;; Tracked objects:
  3762 ;;		On entry : 0/0
  3763 ;;		On exit  : 0/0
  3764 ;;		Unchanged: 0/0
  3765 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3766 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3767 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3768 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3769 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3770 ;;Total ram usage:        8 bytes
  3771 ;; Hardware stack levels used:    1
  3772 ;; Hardware stack levels required when called:    9
  3773 ;; This function calls:
  3774 ;;		_readMAG
  3775 ;; This function is called by:
  3776 ;;		_sort
  3777 ;; This function uses a non-reentrant model
  3778 ;;
  3779                           
  3780                           	psect	text8
  3781  002E0C                     __ptext8:
  3782                           	opt stack 0
  3783  002E0C                     _ID:
  3784                           	opt stack 20
  3785                           
  3786                           ;sort.c: 123: if(f_can_coming_to_ID){
  3787                           
  3788                           ; BSR set to: 0
  3789                           ;incstack = 0
  3790  002E0C  506D               	movf	_f_can_coming_to_ID,w,c
  3791  002E0E  106E               	iorwf	_f_can_coming_to_ID+1,w,c
  3792  002E10  B4D8               	btfsc	status,2,c
  3793  002E12  0012               	return	
  3794                           
  3795                           ;sort.c: 125: _delay((unsigned long)((500)*(32000000/4000.0)));
  3796  002E14  0E15               	movlw	21
  3797  002E16  0100               	movlb	0	; () banked
  3798  002E18  6F87               	movwf	(??_ID+1)& (0+255),b
  3799  002E1A  0E4B               	movlw	75
  3800  002E1C  0100               	movlb	0	; () banked
  3801  002E1E  6F86               	movwf	??_ID& (0+255),b
  3802  002E20  0EBE               	movlw	190
  3803  002E22                     u6857:
  3804  002E22  2EE8               	decfsz	wreg,f,c
  3805  002E24  D7FE               	bra	u6857
  3806  002E26  2F86               	decfsz	??_ID& (0+255),f,b
  3807  002E28  D7FC               	bra	u6857
  3808  002E2A  2F87               	decfsz	(??_ID+1)& (0+255),f,b
  3809  002E2C  D7FA               	bra	u6857
  3810  002E2E  F000               	nop	
  3811                           
  3812                           ;sort.c: 130: int sensor_outputs[3];
  3813                           ;sort.c: 134: sensor_outputs[0] = PORTAbits.RA2;
  3814  002E30  A480               	btfss	3968,2,c	;volatile
  3815  002E32  D004               	goto	u4770
  3816  002E34  0100               	movlb	0	; () banked
  3817  002E36  6B86               	clrf	??_ID& (0+255),b
  3818  002E38  2B86               	incf	??_ID& (0+255),f,b
  3819  002E3A  D002               	goto	u4778
  3820  002E3C                     u4770:
  3821  002E3C  0100               	movlb	0	; () banked
  3822  002E3E  6B86               	clrf	??_ID& (0+255),b
  3823  002E40                     u4778:
  3824  002E40  0100               	movlb	0	; () banked
  3825  002E42  5186               	movf	??_ID& (0+255),w,b
  3826  002E44  0100               	movlb	0	; () banked
  3827  002E46  6F88               	movwf	ID@sensor_outputs& (0+255),b
  3828  002E48  6B89               	clrf	(ID@sensor_outputs+1)& (0+255),b
  3829                           
  3830                           ; BSR set to: 0
  3831                           ;sort.c: 136: if(!sensor_outputs[0]){
  3832  002E4A  0100               	movlb	0	; () banked
  3833  002E4C  5188               	movf	ID@sensor_outputs& (0+255),w,b
  3834  002E4E  0100               	movlb	0	; () banked
  3835  002E50  1189               	iorwf	(ID@sensor_outputs+1)& (0+255),w,b
  3836  002E52  A4D8               	btfss	status,2,c
  3837  002E54  D029               	goto	l6328
  3838                           
  3839                           ; BSR set to: 0
  3840                           ;sort.c: 137: readMAG();
  3841  002E56  EC67  F01F         	call	_readMAG	;wreg free
  3842                           
  3843                           ;sort.c: 138: sensor_outputs[1] = MAG_signal;
  3844  002E5A  C0DC  F08A         	movff	_MAG_signal,ID@sensor_outputs+2
  3845  002E5E  C0DD  F08B         	movff	_MAG_signal+1,ID@sensor_outputs+3
  3846                           
  3847                           ;sort.c: 139: if(!sensor_outputs[1]){
  3848  002E62  0100               	movlb	0	; () banked
  3849  002E64  518A               	movf	(ID@sensor_outputs+2)& (0+255),w,b
  3850  002E66  0100               	movlb	0	; () banked
  3851  002E68  118B               	iorwf	(ID@sensor_outputs+3)& (0+255),w,b
  3852  002E6A  A4D8               	btfss	status,2,c
  3853  002E6C  D01D               	goto	l6328
  3854                           
  3855                           ; BSR set to: 0
  3856                           ;sort.c: 140: LATAbits.LATA3 = 1;
  3857  002E6E  8689               	bsf	3977,3,c	;volatile
  3858                           
  3859                           ; BSR set to: 0
  3860                           ;sort.c: 142: _delay((unsigned long)((300)*(32000000/4000.0)));
  3861  002E70  0E0D               	movlw	13
  3862  002E72  0100               	movlb	0	; () banked
  3863  002E74  6F87               	movwf	(??_ID+1)& (0+255),b
  3864  002E76  0E2D               	movlw	45
  3865  002E78  0100               	movlb	0	; () banked
  3866  002E7A  6F86               	movwf	??_ID& (0+255),b
  3867  002E7C  0ED7               	movlw	215
  3868  002E7E                     u6867:
  3869  002E7E  2EE8               	decfsz	wreg,f,c
  3870  002E80  D7FE               	bra	u6867
  3871  002E82  2F86               	decfsz	??_ID& (0+255),f,b
  3872  002E84  D7FC               	bra	u6867
  3873  002E86  2F87               	decfsz	(??_ID+1)& (0+255),f,b
  3874  002E88  D7FA               	bra	u6867
  3875  002E8A  D000               	nop2	
  3876                           
  3877                           ;sort.c: 143: sensor_outputs[2] = PORTAbits.RA2;
  3878  002E8C  A480               	btfss	3968,2,c	;volatile
  3879  002E8E  D004               	goto	u4800
  3880  002E90  0100               	movlb	0	; () banked
  3881  002E92  6B86               	clrf	??_ID& (0+255),b
  3882  002E94  2B86               	incf	??_ID& (0+255),f,b
  3883  002E96  D002               	goto	u4808
  3884  002E98                     u4800:
  3885  002E98  0100               	movlb	0	; () banked
  3886  002E9A  6B86               	clrf	??_ID& (0+255),b
  3887  002E9C                     u4808:
  3888  002E9C  0100               	movlb	0	; () banked
  3889  002E9E  5186               	movf	??_ID& (0+255),w,b
  3890  002EA0  0100               	movlb	0	; () banked
  3891  002EA2  6F8C               	movwf	(ID@sensor_outputs+4)& (0+255),b
  3892  002EA4  6B8D               	clrf	(ID@sensor_outputs+5)& (0+255),b
  3893                           
  3894                           ; BSR set to: 0
  3895                           ;sort.c: 144: LATAbits.LATA3 = 0;
  3896  002EA6  9689               	bcf	3977,3,c	;volatile
  3897  002EA8                     l6328:
  3898                           
  3899                           ; BSR set to: 0
  3900                           ;sort.c: 145: }
  3901                           ;sort.c: 146: }
  3902                           ;sort.c: 149: if(!sensor_outputs[0]){
  3903  002EA8  0100               	movlb	0	; () banked
  3904  002EAA  5188               	movf	ID@sensor_outputs& (0+255),w,b
  3905  002EAC  0100               	movlb	0	; () banked
  3906  002EAE  1189               	iorwf	(ID@sensor_outputs+1)& (0+255),w,b
  3907  002EB0  A4D8               	btfss	status,2,c
  3908  002EB2  D01E               	goto	l6346
  3909                           
  3910                           ; BSR set to: 0
  3911                           ;sort.c: 150: if(!sensor_outputs[1]){
  3912  002EB4  0100               	movlb	0	; () banked
  3913  002EB6  518A               	movf	(ID@sensor_outputs+2)& (0+255),w,b
  3914  002EB8  0100               	movlb	0	; () banked
  3915  002EBA  118B               	iorwf	(ID@sensor_outputs+3)& (0+255),w,b
  3916  002EBC  A4D8               	btfss	status,2,c
  3917  002EBE  D012               	goto	l6342
  3918                           
  3919                           ; BSR set to: 0
  3920                           ;sort.c: 151: if(!sensor_outputs[2]){
  3921  002EC0  0100               	movlb	0	; () banked
  3922  002EC2  518C               	movf	(ID@sensor_outputs+4)& (0+255),w,b
  3923  002EC4  0100               	movlb	0	; () banked
  3924  002EC6  118D               	iorwf	(ID@sensor_outputs+5)& (0+255),w,b
  3925  002EC8  A4D8               	btfss	status,2,c
  3926  002ECA  D006               	goto	l6338
  3927                           
  3928                           ; BSR set to: 0
  3929                           ;sort.c: 152: count_pop_no_tab++;
  3930  002ECC  4A61               	infsnz	_count_pop_no_tab,f,c
  3931  002ECE  2A62               	incf	_count_pop_no_tab+1,f,c
  3932                           
  3933                           ; BSR set to: 0
  3934                           ;sort.c: 153: cur_can = 0;
  3935  002ED0  0E00               	movlw	0
  3936  002ED2  6E66               	movwf	_cur_can+1,c
  3937  002ED4  0E00               	movlw	0
  3938  002ED6  D011               	goto	L4
  3939  002ED8                     l6338:
  3940                           
  3941                           ; BSR set to: 0
  3942                           ;sort.c: 155: else{
  3943                           ;sort.c: 156: count_pop_w_tab++;
  3944  002ED8  4A63               	infsnz	_count_pop_w_tab,f,c
  3945  002EDA  2A64               	incf	_count_pop_w_tab+1,f,c
  3946                           
  3947                           ; BSR set to: 0
  3948                           ;sort.c: 157: cur_can = 1;
  3949  002EDC  0E00               	movlw	0
  3950  002EDE  6E66               	movwf	_cur_can+1,c
  3951  002EE0  0E01               	movlw	1
  3952  002EE2  D00B               	goto	L4
  3953  002EE4                     l6342:
  3954                           
  3955                           ; BSR set to: 0
  3956                           ;sort.c: 160: else{
  3957                           ;sort.c: 161: count_can_w_lab++;
  3958  002EE4  4A5F               	infsnz	_count_can_w_lab,f,c
  3959  002EE6  2A60               	incf	_count_can_w_lab+1,f,c
  3960                           
  3961                           ; BSR set to: 0
  3962                           ;sort.c: 162: cur_can = 2;
  3963  002EE8  0E00               	movlw	0
  3964  002EEA  6E66               	movwf	_cur_can+1,c
  3965  002EEC  0E02               	movlw	2
  3966  002EEE  D005               	goto	L4
  3967  002EF0                     l6346:
  3968                           
  3969                           ; BSR set to: 0
  3970                           ;sort.c: 165: else{
  3971                           ;sort.c: 166: count_can_no_lab++;
  3972  002EF0  4A5D               	infsnz	_count_can_no_lab,f,c
  3973  002EF2  2A5E               	incf	_count_can_no_lab+1,f,c
  3974                           
  3975                           ; BSR set to: 0
  3976                           ;sort.c: 167: cur_can = 3;
  3977  002EF4  0E00               	movlw	0
  3978  002EF6  6E66               	movwf	_cur_can+1,c
  3979  002EF8  0E03               	movlw	3
  3980  002EFA                     L4:
  3981  002EFA  6E65               	movwf	_cur_can,c
  3982                           
  3983                           ; BSR set to: 0
  3984                           ;sort.c: 168: }
  3985                           ;sort.c: 170: LATCbits.LATC0 = 1;
  3986                           
  3987                           ; BSR set to: 0
  3988  002EFC  808B               	bsf	3979,0,c	;volatile
  3989                           
  3990                           ; BSR set to: 0
  3991                           ;sort.c: 171: f_can_coming_to_distribution = 1;
  3992  002EFE  0E00               	movlw	0
  3993  002F00  6E70               	movwf	_f_can_coming_to_distribution+1,c
  3994  002F02  0E01               	movlw	1
  3995  002F04  6E6F               	movwf	_f_can_coming_to_distribution,c
  3996                           
  3997                           ; BSR set to: 0
  3998                           ;sort.c: 172: _delay((unsigned long)((500)*(32000000/4000.0)));
  3999  002F06  0E15               	movlw	21
  4000  002F08  0100               	movlb	0	; () banked
  4001  002F0A  6F87               	movwf	(??_ID+1)& (0+255),b
  4002  002F0C  0E4B               	movlw	75
  4003  002F0E  0100               	movlb	0	; () banked
  4004  002F10  6F86               	movwf	??_ID& (0+255),b
  4005  002F12  0EBE               	movlw	190
  4006  002F14                     u6877:
  4007  002F14  2EE8               	decfsz	wreg,f,c
  4008  002F16  D7FE               	bra	u6877
  4009  002F18  2F86               	decfsz	??_ID& (0+255),f,b
  4010  002F1A  D7FC               	bra	u6877
  4011  002F1C  2F87               	decfsz	(??_ID+1)& (0+255),f,b
  4012  002F1E  D7FA               	bra	u6877
  4013  002F20  F000               	nop	
  4014                           
  4015                           ;sort.c: 173: LATCbits.LATC0 = 0;
  4016  002F22  908B               	bcf	3979,0,c	;volatile
  4017                           
  4018                           ;sort.c: 175: f_can_coming_to_ID = 0;
  4019  002F24  0E00               	movlw	0
  4020  002F26  6E6E               	movwf	_f_can_coming_to_ID+1,c
  4021  002F28  0E00               	movlw	0
  4022  002F2A  6E6D               	movwf	_f_can_coming_to_ID,c
  4023  002F2C  0012               	return	
  4024  002F2E                     __end_of_ID:
  4025                           	opt stack 0
  4026                           tblptru	equ	0xFF8
  4027                           tblptrh	equ	0xFF7
  4028                           tblptrl	equ	0xFF6
  4029                           tablat	equ	0xFF5
  4030                           prodh	equ	0xFF4
  4031                           prodl	equ	0xFF3
  4032                           postinc0	equ	0xFEE
  4033                           wreg	equ	0xFE8
  4034                           postdec1	equ	0xFE5
  4035                           fsr1l	equ	0xFE1
  4036                           indf2	equ	0xFDF
  4037                           postinc2	equ	0xFDE
  4038                           postdec2	equ	0xFDD
  4039                           fsr2h	equ	0xFDA
  4040                           fsr2l	equ	0xFD9
  4041                           status	equ	0xFD8
  4042                           
  4043 ;; *************** function _Distribution *****************
  4044 ;; Defined at:
  4045 ;;		line 178 in file "sort.c"
  4046 ;; Parameters:    Size  Location     Type
  4047 ;;		None
  4048 ;; Auto vars:     Size  Location     Type
  4049 ;;		None
  4050 ;; Return value:  Size  Location     Type
  4051 ;;                  1    wreg      void 
  4052 ;; Registers used:
  4053 ;;		wreg, status,2, status,0, cstack
  4054 ;; Tracked objects:
  4055 ;;		On entry : 0/0
  4056 ;;		On exit  : 0/0
  4057 ;;		Unchanged: 0/0
  4058 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4059 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4060 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4061 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4062 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4063 ;;Total ram usage:        2 bytes
  4064 ;; Hardware stack levels used:    1
  4065 ;; Hardware stack levels required when called:    8
  4066 ;; This function calls:
  4067 ;;		_updateServoPosition
  4068 ;; This function is called by:
  4069 ;;		_sort
  4070 ;; This function uses a non-reentrant model
  4071 ;;
  4072                           
  4073                           	psect	text9
  4074  002B90                     __ptext9:
  4075                           	opt stack 0
  4076  002B90                     _Distribution:
  4077                           	opt stack 21
  4078                           
  4079                           ;sort.c: 179: if(f_can_coming_to_distribution){
  4080                           
  4081                           ;incstack = 0
  4082  002B90  506F               	movf	_f_can_coming_to_distribution,w,c
  4083  002B92  1070               	iorwf	_f_can_coming_to_distribution+1,w,c
  4084  002B94  B4D8               	btfsc	status,2,c
  4085  002B96  0012               	return	
  4086  002B98  D034               	goto	l6374
  4087  002B9A                     l6364:
  4088                           
  4089                           ;sort.c: 184: updateServoPosition(500, 1);
  4090  002B9A  0E01               	movlw	1
  4091  002B9C  0100               	movlb	0	; () banked
  4092  002B9E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4093  002BA0  0EF4               	movlw	244
  4094  002BA2  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4095  002BA4  0E00               	movlw	0
  4096  002BA6  0100               	movlb	0	; () banked
  4097  002BA8  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4098  002BAA  0E01               	movlw	1
  4099  002BAC  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4100  002BAE  ECFF  F01C         	call	_updateServoPosition	;wreg free
  4101                           
  4102                           ;sort.c: 185: break;
  4103  002BB2  D03E               	goto	l6376
  4104  002BB4                     l6366:
  4105                           
  4106                           ;sort.c: 187: updateServoPosition(700, 1);
  4107  002BB4  0E02               	movlw	2
  4108  002BB6  0100               	movlb	0	; () banked
  4109  002BB8  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4110  002BBA  0EBC               	movlw	188
  4111  002BBC  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4112  002BBE  0E00               	movlw	0
  4113  002BC0  0100               	movlb	0	; () banked
  4114  002BC2  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4115  002BC4  0E01               	movlw	1
  4116  002BC6  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4117  002BC8  ECFF  F01C         	call	_updateServoPosition	;wreg free
  4118                           
  4119                           ;sort.c: 188: break;
  4120  002BCC  D031               	goto	l6376
  4121  002BCE                     l6368:
  4122                           
  4123                           ;sort.c: 190: updateServoPosition(1650, 1);
  4124  002BCE  0E06               	movlw	6
  4125  002BD0  0100               	movlb	0	; () banked
  4126  002BD2  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4127  002BD4  0E72               	movlw	114
  4128  002BD6  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4129  002BD8  0E00               	movlw	0
  4130  002BDA  0100               	movlb	0	; () banked
  4131  002BDC  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4132  002BDE  0E01               	movlw	1
  4133  002BE0  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4134  002BE2  ECFF  F01C         	call	_updateServoPosition	;wreg free
  4135                           
  4136                           ;sort.c: 191: break;
  4137  002BE6  D024               	goto	l6376
  4138  002BE8                     l6370:
  4139                           
  4140                           ;sort.c: 193: updateServoPosition(2000, 1);
  4141  002BE8  0E07               	movlw	7
  4142  002BEA  0100               	movlb	0	; () banked
  4143  002BEC  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4144  002BEE  0ED0               	movlw	208
  4145  002BF0  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4146  002BF2  0E00               	movlw	0
  4147  002BF4  0100               	movlb	0	; () banked
  4148  002BF6  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4149  002BF8  0E01               	movlw	1
  4150  002BFA  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4151  002BFC  ECFF  F01C         	call	_updateServoPosition	;wreg free
  4152                           
  4153                           ;sort.c: 197: }
  4154                           
  4155                           ;sort.c: 196: break;
  4156                           
  4157                           ;sort.c: 195: default:
  4158                           
  4159                           ;sort.c: 194: break;
  4160  002C00  D017               	goto	l6376
  4161  002C02                     l6374:
  4162  002C02  C065  F088         	movff	_cur_can,??_Distribution
  4163  002C06  C066  F089         	movff	_cur_can+1,??_Distribution+1
  4164                           
  4165                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4166                           ; Switch size 1, requested type "space"
  4167                           ; Number of cases is 1, Range of values is 0 to 0
  4168                           ; switch strategies available:
  4169                           ; Name         Instructions Cycles
  4170                           ; simple_byte            4     3 (average)
  4171                           ;	Chosen strategy is simple_byte
  4172  002C0A  0100               	movlb	0	; () banked
  4173  002C0C  5189               	movf	(??_Distribution+1)& (0+255),w,b
  4174  002C0E  0A00               	xorlw	0	; case 0
  4175  002C10  A4D8               	btfss	status,2,c
  4176  002C12  D00E               	goto	l6376
  4177                           
  4178                           ; BSR set to: 0
  4179                           ; Switch size 1, requested type "space"
  4180                           ; Number of cases is 4, Range of values is 0 to 3
  4181                           ; switch strategies available:
  4182                           ; Name         Instructions Cycles
  4183                           ; simple_byte           13     7 (average)
  4184                           ;	Chosen strategy is simple_byte
  4185  002C14  0100               	movlb	0	; () banked
  4186  002C16  5188               	movf	??_Distribution& (0+255),w,b
  4187  002C18  0A00               	xorlw	0	; case 0
  4188  002C1A  B4D8               	btfsc	status,2,c
  4189  002C1C  D7BE               	goto	l6364
  4190  002C1E  0A01               	xorlw	1	; case 1
  4191  002C20  B4D8               	btfsc	status,2,c
  4192  002C22  D7C8               	goto	l6366
  4193  002C24  0A03               	xorlw	3	; case 2
  4194  002C26  B4D8               	btfsc	status,2,c
  4195  002C28  D7D2               	goto	l6368
  4196  002C2A  0A01               	xorlw	1	; case 3
  4197  002C2C  B4D8               	btfsc	status,2,c
  4198  002C2E  D7DC               	goto	l6370
  4199  002C30                     l6376:
  4200                           
  4201                           ;sort.c: 198: _delay((unsigned long)((500)*(32000000/4000.0)));
  4202  002C30  0E15               	movlw	21
  4203  002C32  0100               	movlb	0	; () banked
  4204  002C34  6F89               	movwf	(??_Distribution+1)& (0+255),b
  4205  002C36  0E4B               	movlw	75
  4206  002C38  0100               	movlb	0	; () banked
  4207  002C3A  6F88               	movwf	??_Distribution& (0+255),b
  4208  002C3C  0EBE               	movlw	190
  4209  002C3E                     u6887:
  4210  002C3E  2EE8               	decfsz	wreg,f,c
  4211  002C40  D7FE               	bra	u6887
  4212  002C42  2F88               	decfsz	??_Distribution& (0+255),f,b
  4213  002C44  D7FC               	bra	u6887
  4214  002C46  2F89               	decfsz	(??_Distribution+1)& (0+255),f,b
  4215  002C48  D7FA               	bra	u6887
  4216  002C4A  F000               	nop	
  4217                           
  4218                           ;sort.c: 201: updateServoPosition(1350, 3);
  4219  002C4C  0E05               	movlw	5
  4220  002C4E  0100               	movlb	0	; () banked
  4221  002C50  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4222  002C52  0E46               	movlw	70
  4223  002C54  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4224  002C56  0E00               	movlw	0
  4225  002C58  0100               	movlb	0	; () banked
  4226  002C5A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4227  002C5C  0E03               	movlw	3
  4228  002C5E  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4229  002C60  ECFF  F01C         	call	_updateServoPosition	;wreg free
  4230                           
  4231                           ;sort.c: 202: _delay((unsigned long)((500)*(32000000/4000.0)));
  4232  002C64  0E15               	movlw	21
  4233  002C66  0100               	movlb	0	; () banked
  4234  002C68  6F89               	movwf	(??_Distribution+1)& (0+255),b
  4235  002C6A  0E4B               	movlw	75
  4236  002C6C  0100               	movlb	0	; () banked
  4237  002C6E  6F88               	movwf	??_Distribution& (0+255),b
  4238  002C70  0EBE               	movlw	190
  4239  002C72                     u6897:
  4240  002C72  2EE8               	decfsz	wreg,f,c
  4241  002C74  D7FE               	bra	u6897
  4242  002C76  2F88               	decfsz	??_Distribution& (0+255),f,b
  4243  002C78  D7FC               	bra	u6897
  4244  002C7A  2F89               	decfsz	(??_Distribution+1)& (0+255),f,b
  4245  002C7C  D7FA               	bra	u6897
  4246  002C7E  F000               	nop	
  4247                           
  4248                           ;sort.c: 205: updateServoPosition(1250, 1);
  4249  002C80  0E04               	movlw	4
  4250  002C82  0100               	movlb	0	; () banked
  4251  002C84  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4252  002C86  0EE2               	movlw	226
  4253  002C88  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4254  002C8A  0E00               	movlw	0
  4255  002C8C  0100               	movlb	0	; () banked
  4256  002C8E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4257  002C90  0E01               	movlw	1
  4258  002C92  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4259  002C94  ECFF  F01C         	call	_updateServoPosition	;wreg free
  4260                           
  4261                           ;sort.c: 206: updateServoPosition(1150, 3);
  4262  002C98  0E04               	movlw	4
  4263  002C9A  0100               	movlb	0	; () banked
  4264  002C9C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
  4265  002C9E  0E7E               	movlw	126
  4266  002CA0  6F80               	movwf	updateServoPosition@time_us& (0+255),b
  4267  002CA2  0E00               	movlw	0
  4268  002CA4  0100               	movlb	0	; () banked
  4269  002CA6  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
  4270  002CA8  0E03               	movlw	3
  4271  002CAA  6F82               	movwf	updateServoPosition@timer& (0+255),b
  4272  002CAC  ECFF  F01C         	call	_updateServoPosition	;wreg free
  4273                           
  4274                           ;sort.c: 207: f_can_coming_to_distribution = 0;
  4275  002CB0  0E00               	movlw	0
  4276  002CB2  6E70               	movwf	_f_can_coming_to_distribution+1,c
  4277  002CB4  0E00               	movlw	0
  4278  002CB6  6E6F               	movwf	_f_can_coming_to_distribution,c
  4279                           
  4280                           ;sort.c: 208: f_can_distributed = 1;
  4281  002CB8  0E00               	movlw	0
  4282  002CBA  6E72               	movwf	_f_can_distributed+1,c
  4283  002CBC  0E01               	movlw	1
  4284  002CBE  6E71               	movwf	_f_can_distributed,c
  4285                           
  4286                           ;sort.c: 209: if(f_lastCan == 1){
  4287  002CC0  0473               	decf	_f_lastCan,w,c
  4288  002CC2  1074               	iorwf	_f_lastCan+1,w,c
  4289  002CC4  A4D8               	btfss	status,2,c
  4290  002CC6  0012               	return	
  4291                           
  4292                           ;sort.c: 210: machine_state = DoneSorting_state;
  4293  002CC8  0E02               	movlw	2
  4294  002CCA  0100               	movlb	0	; () banked
  4295  002CCC  6FFC               	movwf	_machine_state& (0+255),b
  4296                           
  4297                           ; BSR set to: 0
  4298  002CCE  0012               	return	
  4299  002CD0                     __end_of_Distribution:
  4300                           	opt stack 0
  4301                           tblptru	equ	0xFF8
  4302                           tblptrh	equ	0xFF7
  4303                           tblptrl	equ	0xFF6
  4304                           tablat	equ	0xFF5
  4305                           prodh	equ	0xFF4
  4306                           prodl	equ	0xFF3
  4307                           postinc0	equ	0xFEE
  4308                           wreg	equ	0xFE8
  4309                           postdec1	equ	0xFE5
  4310                           fsr1l	equ	0xFE1
  4311                           indf2	equ	0xFDF
  4312                           postinc2	equ	0xFDE
  4313                           postdec2	equ	0xFDD
  4314                           fsr2h	equ	0xFDA
  4315                           fsr2l	equ	0xFD9
  4316                           status	equ	0xFD8
  4317                           
  4318 ;; *************** function _machineConfig *****************
  4319 ;; Defined at:
  4320 ;;		line 15 in file "MachineConfig.c"
  4321 ;; Parameters:    Size  Location     Type
  4322 ;;		None
  4323 ;; Auto vars:     Size  Location     Type
  4324 ;;		None
  4325 ;; Return value:  Size  Location     Type
  4326 ;;                  1    wreg      void 
  4327 ;; Registers used:
  4328 ;;		wreg, status,2
  4329 ;; Tracked objects:
  4330 ;;		On entry : 0/0
  4331 ;;		On exit  : 0/0
  4332 ;;		Unchanged: 0/0
  4333 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4334 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4335 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4336 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4337 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4338 ;;Total ram usage:        0 bytes
  4339 ;; Hardware stack levels used:    1
  4340 ;; Hardware stack levels required when called:    7
  4341 ;; This function calls:
  4342 ;;		Nothing
  4343 ;; This function is called by:
  4344 ;;		_main
  4345 ;; This function uses a non-reentrant model
  4346 ;;
  4347                           
  4348                           	psect	text10
  4349  003C78                     __ptext10:
  4350                           	opt stack 0
  4351  003C78                     _machineConfig:
  4352                           	opt stack 23
  4353                           
  4354                           ;MachineConfig.c: 17: OSCCON = 0xF0;
  4355                           
  4356                           ;incstack = 0
  4357  003C78  0EF0               	movlw	240
  4358  003C7A  6ED3               	movwf	4051,c	;volatile
  4359                           
  4360                           ;MachineConfig.c: 18: OSCTUNEbits.PLLEN = 1;
  4361  003C7C  8C9B               	bsf	3995,6,c	;volatile
  4362                           
  4363                           ;MachineConfig.c: 22: TRISA = 0b01000111;
  4364  003C7E  0E47               	movlw	71
  4365  003C80  6E92               	movwf	3986,c	;volatile
  4366                           
  4367                           ;MachineConfig.c: 24: TRISB = 0b11110010;
  4368  003C82  0EF2               	movlw	242
  4369  003C84  6E93               	movwf	3987,c	;volatile
  4370                           
  4371                           ;MachineConfig.c: 27: TRISC = 0x00;
  4372  003C86  0E00               	movlw	0
  4373  003C88  6E94               	movwf	3988,c	;volatile
  4374                           
  4375                           ;MachineConfig.c: 31: TRISD = 0x00;
  4376  003C8A  0E00               	movlw	0
  4377  003C8C  6E95               	movwf	3989,c	;volatile
  4378                           
  4379                           ;MachineConfig.c: 34: TRISE = 0x00;
  4380  003C8E  0E00               	movlw	0
  4381  003C90  6E96               	movwf	3990,c	;volatile
  4382                           
  4383                           ;MachineConfig.c: 37: LATA = 0x00;
  4384  003C92  0E00               	movlw	0
  4385  003C94  6E89               	movwf	3977,c	;volatile
  4386                           
  4387                           ;MachineConfig.c: 38: LATB = 0x00;
  4388  003C96  0E00               	movlw	0
  4389  003C98  6E8A               	movwf	3978,c	;volatile
  4390                           
  4391                           ;MachineConfig.c: 39: LATC = 0x00;
  4392  003C9A  0E00               	movlw	0
  4393  003C9C  6E8B               	movwf	3979,c	;volatile
  4394                           
  4395                           ;MachineConfig.c: 40: LATD = 0x00;
  4396  003C9E  0E00               	movlw	0
  4397  003CA0  6E8C               	movwf	3980,c	;volatile
  4398                           
  4399                           ;MachineConfig.c: 41: LATE = 0x00;
  4400  003CA2  0E00               	movlw	0
  4401  003CA4  6E8D               	movwf	3981,c	;volatile
  4402                           
  4403                           ;MachineConfig.c: 43: nRBPU = 0;
  4404  003CA6  9EF1               	bcf	intcon2,7,c	;volatile
  4405                           
  4406                           ;MachineConfig.c: 46: ADCON0 = 0x00;
  4407  003CA8  0E00               	movlw	0
  4408  003CAA  6EC2               	movwf	4034,c	;volatile
  4409                           
  4410                           ;MachineConfig.c: 47: ADCON1 = 0b00001101;
  4411  003CAC  0E0D               	movlw	13
  4412  003CAE  6EC1               	movwf	4033,c	;volatile
  4413                           
  4414                           ;MachineConfig.c: 50: CVRCON = 0x00;
  4415  003CB0  0E00               	movlw	0
  4416  003CB2  6EB5               	movwf	4021,c	;volatile
  4417                           
  4418                           ;MachineConfig.c: 51: CMCONbits.CIS = 0;
  4419  003CB4  96B4               	bcf	4020,3,c	;volatile
  4420                           
  4421                           ;MachineConfig.c: 52: ADCON2 = 0b10110001;
  4422  003CB6  0EB1               	movlw	177
  4423  003CB8  6EC0               	movwf	4032,c	;volatile
  4424                           
  4425                           ;MachineConfig.c: 55: INT1IE = 1;
  4426  003CBA  86F0               	bsf	intcon3,3,c	;volatile
  4427                           
  4428                           ;MachineConfig.c: 57: TMR0IE = 1;
  4429  003CBC  8AF2               	bsf	intcon,5,c	;volatile
  4430                           
  4431                           ;MachineConfig.c: 58: TMR1IE = 1;
  4432  003CBE  809D               	bsf	3997,0,c	;volatile
  4433                           
  4434                           ;MachineConfig.c: 59: T1CON = 0b10110000;
  4435  003CC0  0EB0               	movlw	176
  4436  003CC2  6ECD               	movwf	4045,c	;volatile
  4437                           
  4438                           ;MachineConfig.c: 60: T3CON = 0b10110000;
  4439  003CC4  0EB0               	movlw	176
  4440  003CC6  6EB1               	movwf	4017,c	;volatile
  4441                           
  4442                           ;MachineConfig.c: 61: TMR2IE = 1;
  4443  003CC8  829D               	bsf	3997,1,c	;volatile
  4444                           
  4445                           ;MachineConfig.c: 62: TMR3IE = 1;
  4446  003CCA  82A0               	bsf	4000,1,c	;volatile
  4447                           
  4448                           ;MachineConfig.c: 63: PEIE = 1;
  4449  003CCC  8CF2               	bsf	intcon,6,c	;volatile
  4450                           
  4451                           ;MachineConfig.c: 64: ADIE = 0;
  4452  003CCE  9C9D               	bcf	3997,6,c	;volatile
  4453                           
  4454                           ;MachineConfig.c: 65: (INTCONbits.GIE = 0);
  4455  003CD0  9EF2               	bcf	intcon,7,c	;volatile
  4456  003CD2  0012               	return		;funcret
  4457  003CD4                     __end_of_machineConfig:
  4458                           	opt stack 0
  4459                           tblptru	equ	0xFF8
  4460                           tblptrh	equ	0xFF7
  4461                           tblptrl	equ	0xFF6
  4462                           tablat	equ	0xFF5
  4463                           prodh	equ	0xFF4
  4464                           prodl	equ	0xFF3
  4465                           intcon	equ	0xFF2
  4466                           intcon2	equ	0xFF1
  4467                           intcon3	equ	0xFF0
  4468                           postinc0	equ	0xFEE
  4469                           wreg	equ	0xFE8
  4470                           postdec1	equ	0xFE5
  4471                           fsr1l	equ	0xFE1
  4472                           indf2	equ	0xFDF
  4473                           postinc2	equ	0xFDE
  4474                           postdec2	equ	0xFDD
  4475                           fsr2h	equ	0xFDA
  4476                           fsr2l	equ	0xFD9
  4477                           status	equ	0xFD8
  4478                           
  4479 ;; *************** function _logRun *****************
  4480 ;; Defined at:
  4481 ;;		line 84 in file "EEPROM.c"
  4482 ;; Parameters:    Size  Location     Type
  4483 ;;		None
  4484 ;; Auto vars:     Size  Location     Type
  4485 ;;  byte_i          1   53[BANK0 ] unsigned char 
  4486 ;;  i               2   55[BANK0 ] int 
  4487 ;;  num             1   49[BANK0 ] unsigned char 
  4488 ;;  addr            2   57[BANK0 ] unsigned short 
  4489 ;;  byte11          1   54[BANK0 ] unsigned char 
  4490 ;;  byte3           1   52[BANK0 ] unsigned char 
  4491 ;;  byte2           1   51[BANK0 ] unsigned char 
  4492 ;;  byte1           1   50[BANK0 ] unsigned char 
  4493 ;; Return value:  Size  Location     Type
  4494 ;;                  1    wreg      void 
  4495 ;; Registers used:
  4496 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4497 ;; Tracked objects:
  4498 ;;		On entry : 0/0
  4499 ;;		On exit  : 0/0
  4500 ;;		Unchanged: 0/0
  4501 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4502 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4503 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4504 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4505 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4506 ;;Total ram usage:       10 bytes
  4507 ;; Hardware stack levels used:    1
  4508 ;; Hardware stack levels required when called:   11
  4509 ;; This function calls:
  4510 ;;		_EEPROM_read
  4511 ;;		_EEPROM_write
  4512 ;; This function is called by:
  4513 ;;		_main
  4514 ;; This function uses a non-reentrant model
  4515 ;;
  4516                           
  4517                           	psect	text11
  4518  002CD0                     __ptext11:
  4519                           	opt stack 0
  4520  002CD0                     _logRun:
  4521                           	opt stack 19
  4522                           
  4523                           ;EEPROM.c: 97: sel = EEPROM_read(0);
  4524                           
  4525                           ;incstack = 0
  4526  002CD0  0E00               	movlw	0
  4527  002CD2  0100               	movlb	0	; () banked
  4528  002CD4  6F81               	movwf	(EEPROM_read@address+1)& (0+255),b
  4529  002CD6  0E00               	movlw	0
  4530  002CD8  6F80               	movwf	EEPROM_read@address& (0+255),b
  4531  002CDA  EC68  F022         	call	_EEPROM_read	;wreg free
  4532  002CDE  0100               	movlb	0	; () banked
  4533  002CE0  6FFD               	movwf	_sel& (0+255),b
  4534                           
  4535                           ; BSR set to: 0
  4536                           ;EEPROM.c: 98: unsigned short addr = 1 + 11 * sel;
  4537  002CE2  0100               	movlb	0	; () banked
  4538  002CE4  51FD               	movf	_sel& (0+255),w,b
  4539  002CE6  0D0B               	mullw	11
  4540  002CE8  0E01               	movlw	1
  4541  002CEA  24F3               	addwf	prodl,w,c
  4542  002CEC  0100               	movlb	0	; () banked
  4543  002CEE  6FB9               	movwf	logRun@addr& (0+255),b
  4544  002CF0  0E00               	movlw	0
  4545  002CF2  20F4               	addwfc	prodh,w,c
  4546  002CF4  0100               	movlb	0	; () banked
  4547  002CF6  6FBA               	movwf	(logRun@addr+1)& (0+255),b
  4548                           
  4549                           ; BSR set to: 0
  4550                           ;EEPROM.c: 101: if (sel < 3){
  4551  002CF8  0E03               	movlw	3
  4552  002CFA  0100               	movlb	0	; () banked
  4553  002CFC  61FD               	cpfslt	_sel& (0+255),b
  4554  002CFE  D00E               	goto	l7770
  4555                           
  4556                           ; BSR set to: 0
  4557                           ;EEPROM.c: 102: unsigned char num = sel+1;
  4558  002D00  0100               	movlb	0	; () banked
  4559  002D02  29FD               	incf	_sel& (0+255),w,b
  4560  002D04  0100               	movlb	0	; () banked
  4561  002D06  6FB1               	movwf	logRun@num& (0+255),b
  4562                           
  4563                           ; BSR set to: 0
  4564                           ;EEPROM.c: 103: EEPROM_write(0, num);
  4565  002D08  0E00               	movlw	0
  4566  002D0A  0100               	movlb	0	; () banked
  4567  002D0C  6FAC               	movwf	(EEPROM_write@address+1)& (0+255),b
  4568  002D0E  0E00               	movlw	0
  4569  002D10  6FAB               	movwf	EEPROM_write@address& (0+255),b
  4570  002D12  C0B1  F0AD         	movff	logRun@num,EEPROM_write@data
  4571  002D16  EC27  F019         	call	_EEPROM_write	;wreg free
  4572                           
  4573                           ;EEPROM.c: 104: }
  4574  002D1A  D00A               	goto	l7772
  4575  002D1C                     l7770:
  4576                           
  4577                           ;EEPROM.c: 105: else{
  4578                           ;EEPROM.c: 106: EEPROM_write(0, 0);
  4579  002D1C  0E00               	movlw	0
  4580  002D1E  0100               	movlb	0	; () banked
  4581  002D20  6FAC               	movwf	(EEPROM_write@address+1)& (0+255),b
  4582  002D22  0E00               	movlw	0
  4583  002D24  6FAB               	movwf	EEPROM_write@address& (0+255),b
  4584  002D26  0E00               	movlw	0
  4585  002D28  0100               	movlb	0	; () banked
  4586  002D2A  6FAD               	movwf	EEPROM_write@data& (0+255),b
  4587  002D2C  EC27  F019         	call	_EEPROM_write	;wreg free
  4588  002D30                     l7772:
  4589                           
  4590                           ;EEPROM.c: 107: }
  4591                           ;EEPROM.c: 110: unsigned char byte1 = 0b10000000 | count_total;
  4592  002D30  0100               	movlb	0	; () banked
  4593  002D32  51FE               	movf	_count_total& (0+255),w,b
  4594  002D34  0980               	iorlw	128
  4595  002D36  0100               	movlb	0	; () banked
  4596  002D38  6FB2               	movwf	logRun@byte1& (0+255),b
  4597                           
  4598                           ; BSR set to: 0
  4599                           ;EEPROM.c: 111: EEPROM_write(addr, byte1);
  4600  002D3A  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  4601  002D3E  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  4602  002D42  C0B2  F0AD         	movff	logRun@byte1,EEPROM_write@data
  4603  002D46  EC27  F019         	call	_EEPROM_write	;wreg free
  4604                           
  4605                           ;EEPROM.c: 112: addr++;
  4606  002D4A  0100               	movlb	0	; () banked
  4607  002D4C  4BB9               	infsnz	logRun@addr& (0+255),f,b
  4608  002D4E  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  4609                           
  4610                           ; BSR set to: 0
  4611                           ;EEPROM.c: 115: unsigned char byte2 = (count_pop_no_tab << 4) | count_pop_w_tab;
  4612  002D50  3861               	swapf	_count_pop_no_tab,w,c
  4613  002D52  0BF0               	andlw	240
  4614  002D54  1063               	iorwf	_count_pop_w_tab,w,c
  4615  002D56  0100               	movlb	0	; () banked
  4616  002D58  6FB3               	movwf	logRun@byte2& (0+255),b
  4617                           
  4618                           ; BSR set to: 0
  4619                           ;EEPROM.c: 116: EEPROM_write(addr, byte2);
  4620  002D5A  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  4621  002D5E  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  4622  002D62  C0B3  F0AD         	movff	logRun@byte2,EEPROM_write@data
  4623  002D66  EC27  F019         	call	_EEPROM_write	;wreg free
  4624                           
  4625                           ;EEPROM.c: 117: addr++;
  4626  002D6A  0100               	movlb	0	; () banked
  4627  002D6C  4BB9               	infsnz	logRun@addr& (0+255),f,b
  4628  002D6E  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  4629                           
  4630                           ; BSR set to: 0
  4631                           ;EEPROM.c: 118: unsigned char byte3 = (count_can_w_lab << 4) | count_can_no_lab;
  4632  002D70  385F               	swapf	_count_can_w_lab,w,c
  4633  002D72  0BF0               	andlw	240
  4634  002D74  105D               	iorwf	_count_can_no_lab,w,c
  4635  002D76  0100               	movlb	0	; () banked
  4636  002D78  6FB4               	movwf	logRun@byte3& (0+255),b
  4637                           
  4638                           ; BSR set to: 0
  4639                           ;EEPROM.c: 119: EEPROM_write(addr, byte3);
  4640  002D7A  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  4641  002D7E  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  4642  002D82  C0B4  F0AD         	movff	logRun@byte3,EEPROM_write@data
  4643  002D86  EC27  F019         	call	_EEPROM_write	;wreg free
  4644                           
  4645                           ;EEPROM.c: 120: addr++;
  4646  002D8A  0100               	movlb	0	; () banked
  4647  002D8C  4BB9               	infsnz	logRun@addr& (0+255),f,b
  4648  002D8E  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  4649                           
  4650                           ; BSR set to: 0
  4651                           ;EEPROM.c: 123: for(int i = 0; i < 7; i++){
  4652  002D90  0E00               	movlw	0
  4653  002D92  0100               	movlb	0	; () banked
  4654  002D94  6FB8               	movwf	(logRun@i+1)& (0+255),b
  4655  002D96  0E00               	movlw	0
  4656  002D98  6FB7               	movwf	logRun@i& (0+255),b
  4657                           
  4658                           ; BSR set to: 0
  4659  002D9A  0100               	movlb	0	; () banked
  4660  002D9C  BFB8               	btfsc	(logRun@i+1)& (0+255),7,b
  4661  002D9E  D008               	goto	l7796
  4662  002DA0  0100               	movlb	0	; () banked
  4663  002DA2  51B8               	movf	(logRun@i+1)& (0+255),w,b
  4664  002DA4  E128               	bnz	l935
  4665  002DA6  0E07               	movlw	7
  4666  002DA8  0100               	movlb	0	; () banked
  4667  002DAA  5DB7               	subwf	logRun@i& (0+255),w,b
  4668  002DAC  B0D8               	btfsc	status,0,c
  4669  002DAE  D023               	goto	l935
  4670  002DB0                     l7796:
  4671                           
  4672                           ; BSR set to: 0
  4673                           ;EEPROM.c: 124: unsigned char byte_i = startTime[i];
  4674  002DB0  90D8               	bcf	status,0,c
  4675  002DB2  0100               	movlb	0	; () banked
  4676  002DB4  35B7               	rlcf	logRun@i& (0+255),w,b
  4677  002DB6  6ED9               	movwf	fsr2l,c
  4678  002DB8  0100               	movlb	0	; () banked
  4679  002DBA  35B8               	rlcf	(logRun@i+1)& (0+255),w,b
  4680  002DBC  6EDA               	movwf	fsr2h,c
  4681  002DBE  0E0E               	movlw	low _startTime
  4682  002DC0  26D9               	addwf	fsr2l,f,c
  4683  002DC2  0E01               	movlw	high _startTime
  4684  002DC4  22DA               	addwfc	fsr2h,f,c
  4685  002DC6  50DF               	movf	indf2,w,c
  4686  002DC8  0100               	movlb	0	; () banked
  4687  002DCA  6FB5               	movwf	logRun@byte_i& (0+255),b
  4688                           
  4689                           ; BSR set to: 0
  4690                           ;EEPROM.c: 125: EEPROM_write(addr, byte_i);
  4691  002DCC  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  4692  002DD0  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  4693  002DD4  C0B5  F0AD         	movff	logRun@byte_i,EEPROM_write@data
  4694  002DD8  EC27  F019         	call	_EEPROM_write	;wreg free
  4695                           
  4696                           ;EEPROM.c: 126: addr++;
  4697  002DDC  0100               	movlb	0	; () banked
  4698  002DDE  4BB9               	infsnz	logRun@addr& (0+255),f,b
  4699  002DE0  2BBA               	incf	(logRun@addr+1)& (0+255),f,b
  4700                           
  4701                           ; BSR set to: 0
  4702  002DE2  0100               	movlb	0	; () banked
  4703  002DE4  4BB7               	infsnz	logRun@i& (0+255),f,b
  4704  002DE6  2BB8               	incf	(logRun@i+1)& (0+255),f,b
  4705                           
  4706                           ; BSR set to: 0
  4707  002DE8  0100               	movlb	0	; () banked
  4708  002DEA  BFB8               	btfsc	(logRun@i+1)& (0+255),7,b
  4709  002DEC  D7E1               	goto	l7796
  4710  002DEE  0100               	movlb	0	; () banked
  4711  002DF0  51B8               	movf	(logRun@i+1)& (0+255),w,b
  4712  002DF2  E101               	bnz	u6640
  4713  002DF4  D7D8               	goto	L5
  4714  002DF6                     u6640:
  4715  002DF6                     l935:
  4716                           
  4717                           ; BSR set to: 0
  4718                           ;EEPROM.c: 127: }
  4719                           ;EEPROM.c: 130: unsigned char byte11 = total_time;
  4720  002DF6  C0F8  F0B6         	movff	_total_time,logRun@byte11
  4721                           
  4722                           ; BSR set to: 0
  4723                           ;EEPROM.c: 131: EEPROM_write(addr, byte11);
  4724  002DFA  C0B9  F0AB         	movff	logRun@addr,EEPROM_write@address
  4725  002DFE  C0BA  F0AC         	movff	logRun@addr+1,EEPROM_write@address+1
  4726  002E02  C0B6  F0AD         	movff	logRun@byte11,EEPROM_write@data
  4727  002E06  EC27  F019         	call	_EEPROM_write	;wreg free
  4728  002E0A  0012               	return		;funcret
  4729  002E0C                     __end_of_logRun:
  4730                           	opt stack 0
  4731                           tblptru	equ	0xFF8
  4732                           tblptrh	equ	0xFF7
  4733                           tblptrl	equ	0xFF6
  4734                           tablat	equ	0xFF5
  4735                           prodh	equ	0xFF4
  4736                           prodl	equ	0xFF3
  4737                           intcon	equ	0xFF2
  4738                           intcon2	equ	0xFF1
  4739                           intcon3	equ	0xFF0
  4740                           postinc0	equ	0xFEE
  4741                           wreg	equ	0xFE8
  4742                           postdec1	equ	0xFE5
  4743                           fsr1l	equ	0xFE1
  4744                           indf2	equ	0xFDF
  4745                           postinc2	equ	0xFDE
  4746                           postdec2	equ	0xFDD
  4747                           fsr2h	equ	0xFDA
  4748                           fsr2l	equ	0xFD9
  4749                           status	equ	0xFD8
  4750                           
  4751 ;; *************** function _EEPROM_write *****************
  4752 ;; Defined at:
  4753 ;;		line 32 in file "EEPROM.c"
  4754 ;; Parameters:    Size  Location     Type
  4755 ;;  address         2   43[BANK0 ] unsigned short 
  4756 ;;  data            1   45[BANK0 ] unsigned char 
  4757 ;; Auto vars:     Size  Location     Type
  4758 ;;  i               1   48[BANK0 ] unsigned char 
  4759 ;;  i               1   47[BANK0 ] unsigned char 
  4760 ;; Return value:  Size  Location     Type
  4761 ;;                  1    wreg      void 
  4762 ;; Registers used:
  4763 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4764 ;; Tracked objects:
  4765 ;;		On entry : 0/0
  4766 ;;		On exit  : 0/0
  4767 ;;		Unchanged: 0/0
  4768 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4769 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4770 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4771 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4772 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4773 ;;Total ram usage:        6 bytes
  4774 ;; Hardware stack levels used:    1
  4775 ;; Hardware stack levels required when called:   10
  4776 ;; This function calls:
  4777 ;;		_EEPROM_read
  4778 ;;		_lcdInst
  4779 ;;		_printf
  4780 ;; This function is called by:
  4781 ;;		_Loading
  4782 ;;		_logRun
  4783 ;; This function uses a non-reentrant model
  4784 ;;
  4785                           
  4786                           	psect	text12
  4787  00324E                     __ptext12:
  4788                           	opt stack 0
  4789  00324E                     _EEPROM_write:
  4790                           	opt stack 18
  4791                           
  4792                           ;EEPROM.c: 33: EECON1bits.WREN = 1;
  4793                           
  4794                           ;incstack = 0
  4795  00324E  84A6               	bsf	4006,2,c	;volatile
  4796                           
  4797                           ;EEPROM.c: 36: EEADRH = (unsigned char)(address >> 8);
  4798  003250  0100               	movlb	0	; () banked
  4799  003252  51AC               	movf	(EEPROM_write@address+1)& (0+255),w,b
  4800  003254  6EAA               	movwf	4010,c	;volatile
  4801                           
  4802                           ; BSR set to: 0
  4803                           ;EEPROM.c: 37: EEADR = (unsigned char)address;
  4804  003256  C0AB  FFA9         	movff	EEPROM_write@address,4009	;volatile
  4805                           
  4806                           ; BSR set to: 0
  4807                           ;EEPROM.c: 39: EEDATA = data;
  4808  00325A  C0AD  FFA8         	movff	EEPROM_write@data,4008	;volatile
  4809                           
  4810                           ; BSR set to: 0
  4811                           ;EEPROM.c: 40: EECON1bits.EEPGD = 0;
  4812  00325E  9EA6               	bcf	4006,7,c	;volatile
  4813                           
  4814                           ; BSR set to: 0
  4815                           ;EEPROM.c: 41: EECON1bits.CFGS = 0;
  4816  003260  9CA6               	bcf	4006,6,c	;volatile
  4817                           
  4818                           ; BSR set to: 0
  4819                           ;EEPROM.c: 43: (INTCONbits.GIE = 0);
  4820  003262  9EF2               	bcf	intcon,7,c	;volatile
  4821                           
  4822                           ;EEPROM.c: 45: EECON2 = 0x55;
  4823  003264  0E55               	movlw	85
  4824  003266  6EA7               	movwf	4007,c	;volatile
  4825                           
  4826                           ;EEPROM.c: 46: EECON2 = 0x0AA;
  4827  003268  0EAA               	movlw	170
  4828  00326A  6EA7               	movwf	4007,c	;volatile
  4829                           
  4830                           ; BSR set to: 0
  4831                           ;EEPROM.c: 47: EECON1bits.WR = 1;
  4832  00326C  82A6               	bsf	4006,1,c	;volatile
  4833                           
  4834                           ; BSR set to: 0
  4835                           ;EEPROM.c: 48: (INTCONbits.GIE = 1);
  4836  00326E  8EF2               	bsf	intcon,7,c	;volatile
  4837  003270                     l913:
  4838  003270  A8A1               	btfss	4001,4,c	;volatile
  4839  003272  D7FE               	goto	l913
  4840                           
  4841                           ;EEPROM.c: 53: PIR2bits.EEIF = 0;
  4842  003274  98A1               	bcf	4001,4,c	;volatile
  4843                           
  4844                           ;EEPROM.c: 54: EECON1bits.WREN = 0;
  4845  003276  94A6               	bcf	4006,2,c	;volatile
  4846                           
  4847                           ;EEPROM.c: 57: if(debug){
  4848  003278  0100               	movlb	0	; () banked
  4849  00327A  51E0               	movf	_debug& (0+255),w,b
  4850  00327C  0100               	movlb	0	; () banked
  4851  00327E  11E1               	iorwf	(_debug+1)& (0+255),w,b
  4852  003280  B4D8               	btfsc	status,2,c
  4853  003282  0012               	return	
  4854                           
  4855                           ; BSR set to: 0
  4856                           ;EEPROM.c: 58: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  4857  003284  0E01               	movlw	1
  4858  003286  ECA5  F022         	call	_lcdInst
  4859  00328A  0E68               	movlw	104
  4860  00328C  0100               	movlb	0	; () banked
  4861  00328E  6FAE               	movwf	??_EEPROM_write& (0+255),b
  4862  003290  0EE4               	movlw	228
  4863  003292                     u6907:
  4864  003292  2EE8               	decfsz	wreg,f,c
  4865  003294  D7FE               	bra	u6907
  4866  003296  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  4867  003298  D7FC               	bra	u6907
  4868  00329A  F000               	nop	
  4869                           
  4870                           ;EEPROM.c: 59: lcdInst(0b10000000);;
  4871  00329C  0E80               	movlw	128
  4872  00329E  ECA5  F022         	call	_lcdInst
  4873                           
  4874                           ;EEPROM.c: 60: if(EEPROM_read(address)==data){
  4875  0032A2  C0AB  F080         	movff	EEPROM_write@address,EEPROM_read@address
  4876  0032A6  C0AC  F081         	movff	EEPROM_write@address+1,EEPROM_read@address+1
  4877  0032AA  EC68  F022         	call	_EEPROM_read	;wreg free
  4878  0032AE  0100               	movlb	0	; () banked
  4879  0032B0  19AD               	xorwf	EEPROM_write@data& (0+255),w,b
  4880  0032B2  A4D8               	btfss	status,2,c
  4881  0032B4  D024               	goto	l5930
  4882                           
  4883                           ; BSR set to: 0
  4884                           ;EEPROM.c: 61: printf("(data: %u, addr: %u)", data, address);
  4885  0032B6  0E5A               	movlw	low STR_66
  4886  0032B8  0100               	movlb	0	; () banked
  4887  0032BA  6F8E               	movwf	printf@f& (0+255),b
  4888  0032BC  0EFB               	movlw	high STR_66
  4889  0032BE  0100               	movlb	0	; () banked
  4890  0032C0  6F8F               	movwf	(printf@f+1)& (0+255),b
  4891  0032C2  C0AD  F090         	movff	EEPROM_write@data,?_printf+2
  4892  0032C6  0100               	movlb	0	; () banked
  4893  0032C8  6B91               	clrf	(?_printf+3)& (0+255),b
  4894  0032CA  C0AB  F092         	movff	EEPROM_write@address,?_printf+4
  4895  0032CE  C0AC  F093         	movff	EEPROM_write@address+1,?_printf+5
  4896  0032D2  EC9C  F008         	call	_printf	;wreg free
  4897                           
  4898                           ;EEPROM.c: 62: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));}
      +                          ;
  4899  0032D6  0E00               	movlw	0
  4900  0032D8  0100               	movlb	0	; () banked
  4901  0032DA  6FAF               	movwf	EEPROM_write@i& (0+255),b
  4902  0032DC                     l5922:
  4903                           
  4904                           ; BSR set to: 0
  4905  0032DC  0E63               	movlw	99
  4906  0032DE  0100               	movlb	0	; () banked
  4907  0032E0  65AF               	cpfsgt	EEPROM_write@i& (0+255),b
  4908  0032E2  D001               	goto	l5926
  4909  0032E4  0012               	return	
  4910  0032E6                     l5926:
  4911                           
  4912                           ; BSR set to: 0
  4913  0032E6  0E68               	movlw	104
  4914  0032E8  0100               	movlb	0	; () banked
  4915  0032EA  6FAE               	movwf	??_EEPROM_write& (0+255),b
  4916  0032EC  0EE4               	movlw	228
  4917  0032EE                     u6917:
  4918  0032EE  2EE8               	decfsz	wreg,f,c
  4919  0032F0  D7FE               	bra	u6917
  4920  0032F2  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  4921  0032F4  D7FC               	bra	u6917
  4922  0032F6  F000               	nop	
  4923  0032F8  0100               	movlb	0	; () banked
  4924  0032FA  2BAF               	incf	EEPROM_write@i& (0+255),f,b
  4925  0032FC  D7EF               	goto	l5922
  4926  0032FE                     l5930:
  4927                           
  4928                           ; BSR set to: 0
  4929                           ;EEPROM.c: 64: else{ printf("FAILED"); for(char i=0;i<100;i++){_delay((unsigned long)((1
      +                          0)*(32000000/4000.0)));}; }
  4930  0032FE  0EBC               	movlw	low STR_67
  4931  003300  0100               	movlb	0	; () banked
  4932  003302  6F8E               	movwf	printf@f& (0+255),b
  4933  003304  0EFF               	movlw	high STR_67
  4934  003306  0100               	movlb	0	; () banked
  4935  003308  6F8F               	movwf	(printf@f+1)& (0+255),b
  4936  00330A  EC9C  F008         	call	_printf	;wreg free
  4937  00330E  0E00               	movlw	0
  4938  003310  0100               	movlb	0	; () banked
  4939  003312  6FB0               	movwf	EEPROM_write@i_1319& (0+255),b
  4940  003314                     l5934:
  4941                           
  4942                           ; BSR set to: 0
  4943  003314  0E63               	movlw	99
  4944  003316  0100               	movlb	0	; () banked
  4945  003318  65B0               	cpfsgt	EEPROM_write@i_1319& (0+255),b
  4946  00331A  D001               	goto	l5938
  4947  00331C  0012               	return	
  4948  00331E                     l5938:
  4949                           
  4950                           ; BSR set to: 0
  4951  00331E  0E68               	movlw	104
  4952  003320  0100               	movlb	0	; () banked
  4953  003322  6FAE               	movwf	??_EEPROM_write& (0+255),b
  4954  003324  0EE4               	movlw	228
  4955  003326                     u6927:
  4956  003326  2EE8               	decfsz	wreg,f,c
  4957  003328  D7FE               	bra	u6927
  4958  00332A  2FAE               	decfsz	??_EEPROM_write& (0+255),f,b
  4959  00332C  D7FC               	bra	u6927
  4960  00332E  F000               	nop	
  4961  003330  0100               	movlb	0	; () banked
  4962  003332  2BB0               	incf	EEPROM_write@i_1319& (0+255),f,b
  4963  003334  D7EF               	goto	l5934
  4964  003336                     __end_of_EEPROM_write:
  4965                           	opt stack 0
  4966                           tblptru	equ	0xFF8
  4967                           tblptrh	equ	0xFF7
  4968                           tblptrl	equ	0xFF6
  4969                           tablat	equ	0xFF5
  4970                           prodh	equ	0xFF4
  4971                           prodl	equ	0xFF3
  4972                           intcon	equ	0xFF2
  4973                           intcon2	equ	0xFF1
  4974                           intcon3	equ	0xFF0
  4975                           postinc0	equ	0xFEE
  4976                           wreg	equ	0xFE8
  4977                           postdec1	equ	0xFE5
  4978                           fsr1l	equ	0xFE1
  4979                           indf2	equ	0xFDF
  4980                           postinc2	equ	0xFDE
  4981                           postdec2	equ	0xFDD
  4982                           fsr2h	equ	0xFDA
  4983                           fsr2l	equ	0xFD9
  4984                           status	equ	0xFD8
  4985                           
  4986 ;; *************** function _EEPROM_read *****************
  4987 ;; Defined at:
  4988 ;;		line 68 in file "EEPROM.c"
  4989 ;; Parameters:    Size  Location     Type
  4990 ;;  address         2    0[BANK0 ] unsigned short 
  4991 ;; Auto vars:     Size  Location     Type
  4992 ;;		None
  4993 ;; Return value:  Size  Location     Type
  4994 ;;                  1    wreg      unsigned char 
  4995 ;; Registers used:
  4996 ;;		wreg, status,2
  4997 ;; Tracked objects:
  4998 ;;		On entry : 0/0
  4999 ;;		On exit  : 0/0
  5000 ;;		Unchanged: 0/0
  5001 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5002 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5003 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5004 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5005 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5006 ;;Total ram usage:        2 bytes
  5007 ;; Hardware stack levels used:    1
  5008 ;; Hardware stack levels required when called:    7
  5009 ;; This function calls:
  5010 ;;		Nothing
  5011 ;; This function is called by:
  5012 ;;		_Loading
  5013 ;;		_EEPROM_write
  5014 ;;		_logRun
  5015 ;; This function uses a non-reentrant model
  5016 ;;
  5017                           
  5018                           	psect	text13
  5019  0044D0                     __ptext13:
  5020                           	opt stack 0
  5021  0044D0                     _EEPROM_read:
  5022                           	opt stack 20
  5023                           
  5024                           ;EEPROM.c: 70: EEADRH = (unsigned char)(address >> 8);
  5025                           
  5026                           ; BSR set to: 0
  5027                           ;incstack = 0
  5028  0044D0  0100               	movlb	0	; () banked
  5029  0044D2  5181               	movf	(EEPROM_read@address+1)& (0+255),w,b
  5030  0044D4  6EAA               	movwf	4010,c	;volatile
  5031                           
  5032                           ; BSR set to: 0
  5033                           ;EEPROM.c: 71: EEADR = (unsigned char)address;
  5034  0044D6  C080  FFA9         	movff	EEPROM_read@address,4009	;volatile
  5035                           
  5036                           ; BSR set to: 0
  5037                           ;EEPROM.c: 73: EECON1bits.EEPGD = 0;
  5038  0044DA  9EA6               	bcf	4006,7,c	;volatile
  5039                           
  5040                           ; BSR set to: 0
  5041                           ;EEPROM.c: 74: EECON1bits.CFGS = 0;
  5042  0044DC  9CA6               	bcf	4006,6,c	;volatile
  5043                           
  5044                           ; BSR set to: 0
  5045                           ;EEPROM.c: 75: EECON1bits.RD = 1;
  5046  0044DE  80A6               	bsf	4006,0,c	;volatile
  5047  0044E0                     l926:
  5048  0044E0  B0A6               	btfsc	4006,0,c	;volatile
  5049  0044E2  D7FE               	goto	l926
  5050                           
  5051                           ;EEPROM.c: 81: return EEDATA;
  5052  0044E4  50A8               	movf	4008,w,c	;volatile
  5053  0044E6  0012               	return	
  5054  0044E8                     __end_of_EEPROM_read:
  5055                           	opt stack 0
  5056                           tblptru	equ	0xFF8
  5057                           tblptrh	equ	0xFF7
  5058                           tblptrl	equ	0xFF6
  5059                           tablat	equ	0xFF5
  5060                           prodh	equ	0xFF4
  5061                           prodl	equ	0xFF3
  5062                           intcon	equ	0xFF2
  5063                           intcon2	equ	0xFF1
  5064                           intcon3	equ	0xFF0
  5065                           postinc0	equ	0xFEE
  5066                           wreg	equ	0xFE8
  5067                           postdec1	equ	0xFE5
  5068                           fsr1l	equ	0xFE1
  5069                           indf2	equ	0xFDF
  5070                           postinc2	equ	0xFDE
  5071                           postdec2	equ	0xFDD
  5072                           fsr2h	equ	0xFDA
  5073                           fsr2l	equ	0xFD9
  5074                           status	equ	0xFD8
  5075                           
  5076 ;; *************** function _initUI *****************
  5077 ;; Defined at:
  5078 ;;		line 62 in file "UI.c"
  5079 ;; Parameters:    Size  Location     Type
  5080 ;;		None
  5081 ;; Auto vars:     Size  Location     Type
  5082 ;;		None
  5083 ;; Return value:  Size  Location     Type
  5084 ;;                  1    wreg      void 
  5085 ;; Registers used:
  5086 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5087 ;; Tracked objects:
  5088 ;;		On entry : 0/0
  5089 ;;		On exit  : 0/0
  5090 ;;		Unchanged: 0/0
  5091 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5092 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5093 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5094 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5095 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5096 ;;Total ram usage:        0 bytes
  5097 ;; Hardware stack levels used:    1
  5098 ;; Hardware stack levels required when called:   12
  5099 ;; This function calls:
  5100 ;;		_change_state_to_menu_start
  5101 ;;		_loadRTC
  5102 ;; This function is called by:
  5103 ;;		_main
  5104 ;; This function uses a non-reentrant model
  5105 ;;
  5106                           
  5107                           	psect	text14
  5108  004426                     __ptext14:
  5109                           	opt stack 0
  5110  004426                     _initUI:
  5111                           	opt stack 18
  5112                           
  5113                           ;UI.c: 63: (INTCONbits.GIE = 1);
  5114                           
  5115                           ;incstack = 0
  5116  004426  8EF2               	bsf	intcon,7,c	;volatile
  5117                           
  5118                           ;UI.c: 64: machine_state = UI_state;
  5119  004428  0E00               	movlw	0
  5120  00442A  0100               	movlb	0	; () banked
  5121  00442C  6FFC               	movwf	_machine_state& (0+255),b
  5122                           
  5123                           ;UI.c: 65: logstate = 0;
  5124  00442E  0E00               	movlw	0
  5125  004430  0100               	movlb	0	; () banked
  5126  004432  6FF7               	movwf	(_logstate+1)& (0+255),b
  5127  004434  0E00               	movlw	0
  5128  004436  6FF6               	movwf	_logstate& (0+255),b
  5129                           
  5130                           ; BSR set to: 0
  5131                           ;UI.c: 67: loadRTC();
  5132  004438  ECB4  F01B         	call	_loadRTC	;wreg free
  5133                           
  5134                           ;UI.c: 69: change_state_to_menu_start();
  5135  00443C  EC84  F021         	call	_change_state_to_menu_start	;wreg free
  5136                           
  5137                           ;UI.c: 70: firstboot = 1;
  5138  004440  0E00               	movlw	0
  5139  004442  6E76               	movwf	_firstboot+1,c
  5140  004444  0E01               	movlw	1
  5141  004446  6E75               	movwf	_firstboot,c
  5142  004448  0012               	return		;funcret
  5143  00444A                     __end_of_initUI:
  5144                           	opt stack 0
  5145                           tblptru	equ	0xFF8
  5146                           tblptrh	equ	0xFF7
  5147                           tblptrl	equ	0xFF6
  5148                           tablat	equ	0xFF5
  5149                           prodh	equ	0xFF4
  5150                           prodl	equ	0xFF3
  5151                           intcon	equ	0xFF2
  5152                           intcon2	equ	0xFF1
  5153                           intcon3	equ	0xFF0
  5154                           postinc0	equ	0xFEE
  5155                           wreg	equ	0xFE8
  5156                           postdec1	equ	0xFE5
  5157                           fsr1l	equ	0xFE1
  5158                           indf2	equ	0xFDF
  5159                           postinc2	equ	0xFDE
  5160                           postdec2	equ	0xFDD
  5161                           fsr2h	equ	0xFDA
  5162                           fsr2l	equ	0xFD9
  5163                           status	equ	0xFD8
  5164                           
  5165 ;; *************** function _loadRTC *****************
  5166 ;; Defined at:
  5167 ;;		line 28 in file "RTC.c"
  5168 ;; Parameters:    Size  Location     Type
  5169 ;;		None
  5170 ;; Auto vars:     Size  Location     Type
  5171 ;;  i               2   22[BANK0 ] int 
  5172 ;; Return value:  Size  Location     Type
  5173 ;;                  1    wreg      void 
  5174 ;; Registers used:
  5175 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5176 ;; Tracked objects:
  5177 ;;		On entry : 0/0
  5178 ;;		On exit  : 0/0
  5179 ;;		Unchanged: 0/0
  5180 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5181 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5182 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5183 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5184 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5185 ;;Total ram usage:        3 bytes
  5186 ;; Hardware stack levels used:    1
  5187 ;; Hardware stack levels required when called:    9
  5188 ;; This function calls:
  5189 ;;		_I2C_Master_Init
  5190 ;;		_I2C_Master_Start
  5191 ;;		_I2C_Master_Stop
  5192 ;;		_I2C_Master_Write
  5193 ;; This function is called by:
  5194 ;;		_initUI
  5195 ;; This function uses a non-reentrant model
  5196 ;;
  5197                           
  5198                           	psect	text15
  5199  003768                     __ptext15:
  5200                           	opt stack 0
  5201  003768                     _loadRTC:
  5202                           	opt stack 20
  5203                           
  5204                           ;RTC.c: 30: I2C_Master_Init(10000);
  5205                           
  5206                           ;incstack = 0
  5207  003768  0E10               	movlw	16
  5208  00376A  0100               	movlb	0	; () banked
  5209  00376C  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  5210  00376E  0E27               	movlw	39
  5211  003770  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  5212  003772  0E00               	movlw	0
  5213  003774  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  5214  003776  0E00               	movlw	0
  5215  003778  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  5216  00377A  EC0C  F01E         	call	_I2C_Master_Init	;wreg free
  5217                           
  5218                           ;RTC.c: 32: (INTCONbits.GIE = 0);
  5219  00377E  9EF2               	bcf	intcon,7,c	;volatile
  5220                           
  5221                           ;RTC.c: 34: I2C_Master_Start();
  5222  003780  ECCB  F022         	call	_I2C_Master_Start	;wreg free
  5223                           
  5224                           ;RTC.c: 35: I2C_Master_Write(0b11010000);
  5225  003784  0E00               	movlw	0
  5226  003786  0100               	movlb	0	; () banked
  5227  003788  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5228  00378A  0ED0               	movlw	208
  5229  00378C  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  5230  00378E  ECB9  F022         	call	_I2C_Master_Write	;wreg free
  5231                           
  5232                           ;RTC.c: 36: I2C_Master_Write(0x00);
  5233  003792  0E00               	movlw	0
  5234  003794  0100               	movlb	0	; () banked
  5235  003796  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5236  003798  0E00               	movlw	0
  5237  00379A  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  5238  00379C  ECB9  F022         	call	_I2C_Master_Write	;wreg free
  5239                           
  5240                           ;RTC.c: 37: for(int i = 0; i<7; i++){
  5241  0037A0  0E00               	movlw	0
  5242  0037A2  0100               	movlb	0	; () banked
  5243  0037A4  6F97               	movwf	(loadRTC@i+1)& (0+255),b
  5244  0037A6  0E00               	movlw	0
  5245  0037A8  6F96               	movwf	loadRTC@i& (0+255),b
  5246  0037AA                     l6054:
  5247                           
  5248                           ; BSR set to: 0
  5249  0037AA  0100               	movlb	0	; () banked
  5250  0037AC  BF97               	btfsc	(loadRTC@i+1)& (0+255),7,b
  5251  0037AE  D008               	goto	l6058
  5252  0037B0  0100               	movlb	0	; () banked
  5253  0037B2  5197               	movf	(loadRTC@i+1)& (0+255),w,b
  5254  0037B4  E11B               	bnz	l6064
  5255  0037B6  0E07               	movlw	7
  5256  0037B8  0100               	movlb	0	; () banked
  5257  0037BA  5D96               	subwf	loadRTC@i& (0+255),w,b
  5258  0037BC  B0D8               	btfsc	status,0,c
  5259  0037BE  D016               	goto	l6064
  5260  0037C0                     l6058:
  5261                           
  5262                           ; BSR set to: 0
  5263                           ;RTC.c: 38: I2C_Master_Write(time[i]);
  5264  0037C0  0E24               	movlw	low _time
  5265  0037C2  0100               	movlb	0	; () banked
  5266  0037C4  2596               	addwf	loadRTC@i& (0+255),w,b
  5267  0037C6  6ED9               	movwf	fsr2l,c
  5268  0037C8  0E01               	movlw	high _time
  5269  0037CA  0100               	movlb	0	; () banked
  5270  0037CC  2197               	addwfc	(loadRTC@i+1)& (0+255),w,b
  5271  0037CE  6EDA               	movwf	fsr2h,c
  5272  0037D0  50DF               	movf	indf2,w,c
  5273  0037D2  0100               	movlb	0	; () banked
  5274  0037D4  6F95               	movwf	??_loadRTC& (0+255),b
  5275  0037D6  0100               	movlb	0	; () banked
  5276  0037D8  5195               	movf	??_loadRTC& (0+255),w,b
  5277  0037DA  0100               	movlb	0	; () banked
  5278  0037DC  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  5279  0037DE  6B82               	clrf	(I2C_Master_Write@d+1)& (0+255),b
  5280  0037E0  ECB9  F022         	call	_I2C_Master_Write	;wreg free
  5281  0037E4  0100               	movlb	0	; () banked
  5282  0037E6  4B96               	infsnz	loadRTC@i& (0+255),f,b
  5283  0037E8  2B97               	incf	(loadRTC@i+1)& (0+255),f,b
  5284  0037EA  D7DF               	goto	l6054
  5285  0037EC                     l6064:
  5286                           
  5287                           ; BSR set to: 0
  5288                           ;RTC.c: 39: }
  5289                           ;RTC.c: 40: I2C_Master_Stop();
  5290  0037EC  ECC7  F022         	call	_I2C_Master_Stop	;wreg free
  5291                           
  5292                           ;RTC.c: 41: (INTCONbits.GIE = 1);
  5293  0037F0  8EF2               	bsf	intcon,7,c	;volatile
  5294  0037F2  0012               	return		;funcret
  5295  0037F4                     __end_of_loadRTC:
  5296                           	opt stack 0
  5297                           tblptru	equ	0xFF8
  5298                           tblptrh	equ	0xFF7
  5299                           tblptrl	equ	0xFF6
  5300                           tablat	equ	0xFF5
  5301                           prodh	equ	0xFF4
  5302                           prodl	equ	0xFF3
  5303                           intcon	equ	0xFF2
  5304                           intcon2	equ	0xFF1
  5305                           intcon3	equ	0xFF0
  5306                           postinc0	equ	0xFEE
  5307                           wreg	equ	0xFE8
  5308                           postdec1	equ	0xFE5
  5309                           fsr1l	equ	0xFE1
  5310                           indf2	equ	0xFDF
  5311                           postinc2	equ	0xFDE
  5312                           postdec2	equ	0xFDD
  5313                           fsr2h	equ	0xFDA
  5314                           fsr2l	equ	0xFD9
  5315                           status	equ	0xFD8
  5316                           
  5317 ;; *************** function _I2C_Master_Init *****************
  5318 ;; Defined at:
  5319 ;;		line 15 in file "I2C.c"
  5320 ;; Parameters:    Size  Location     Type
  5321 ;;  c               4   13[BANK0 ] const unsigned long 
  5322 ;; Auto vars:     Size  Location     Type
  5323 ;;		None
  5324 ;; Return value:  Size  Location     Type
  5325 ;;                  1    wreg      void 
  5326 ;; Registers used:
  5327 ;;		wreg, status,2, status,0, cstack
  5328 ;; Tracked objects:
  5329 ;;		On entry : 0/0
  5330 ;;		On exit  : 0/0
  5331 ;;		Unchanged: 0/0
  5332 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5333 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5334 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5335 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5336 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5337 ;;Total ram usage:        8 bytes
  5338 ;; Hardware stack levels used:    1
  5339 ;; Hardware stack levels required when called:    8
  5340 ;; This function calls:
  5341 ;;		___lldiv
  5342 ;; This function is called by:
  5343 ;;		_loadRTC
  5344 ;; This function uses a non-reentrant model
  5345 ;;
  5346                           
  5347                           	psect	text16
  5348  003C18                     __ptext16:
  5349                           	opt stack 0
  5350  003C18                     _I2C_Master_Init:
  5351                           	opt stack 20
  5352                           
  5353                           ;I2C.c: 18: SSPSTAT = 0b00000000;
  5354                           
  5355                           ;incstack = 0
  5356  003C18  0E00               	movlw	0
  5357  003C1A  6EC7               	movwf	4039,c	;volatile
  5358                           
  5359                           ;I2C.c: 19: SSPCON1 = 0b00101000;
  5360  003C1C  0E28               	movlw	40
  5361  003C1E  6EC6               	movwf	4038,c	;volatile
  5362                           
  5363                           ;I2C.c: 20: SSPCON2 = 0b00000000;
  5364  003C20  0E00               	movlw	0
  5365  003C22  6EC5               	movwf	4037,c	;volatile
  5366                           
  5367                           ;I2C.c: 21: SSPADD = (32000000/(4*c))-1;
  5368  003C24  0E00               	movlw	0
  5369  003C26  0100               	movlb	0	; () banked
  5370  003C28  6F80               	movwf	___lldiv@dividend& (0+255),b
  5371  003C2A  0E48               	movlw	72
  5372  003C2C  6F81               	movwf	(___lldiv@dividend+1)& (0+255),b
  5373  003C2E  0EE8               	movlw	232
  5374  003C30  6F82               	movwf	(___lldiv@dividend+2)& (0+255),b
  5375  003C32  0E01               	movlw	1
  5376  003C34  6F83               	movwf	(___lldiv@dividend+3)& (0+255),b
  5377  003C36  C08D  F091         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  5378  003C3A  C08E  F092         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  5379  003C3E  C08F  F093         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  5380  003C42  C090  F094         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  5381  003C46  0E02               	movlw	2
  5382  003C48                     u4355:
  5383  003C48  90D8               	bcf	status,0,c
  5384  003C4A  0100               	movlb	0	; () banked
  5385  003C4C  3791               	rlcf	??_I2C_Master_Init& (0+255),f,b
  5386  003C4E  3792               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
  5387  003C50  3793               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
  5388  003C52  3794               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
  5389  003C54  2EE8               	decfsz	wreg,f,c
  5390  003C56  D7F8               	goto	u4355
  5391  003C58  C091  F084         	movff	??_I2C_Master_Init,___lldiv@divisor
  5392  003C5C  C092  F085         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  5393  003C60  C093  F086         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  5394  003C64  C094  F087         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  5395  003C68  EC65  F01A         	call	___lldiv	;wreg free
  5396  003C6C  0100               	movlb	0	; () banked
  5397  003C6E  0580               	decf	?___lldiv& (0+255),w,b
  5398  003C70  6EC8               	movwf	4040,c	;volatile
  5399                           
  5400                           ; BSR set to: 0
  5401                           ;I2C.c: 22: TRISC3 = 1;
  5402  003C72  8694               	bsf	3988,3,c	;volatile
  5403                           
  5404                           ; BSR set to: 0
  5405                           ;I2C.c: 23: TRISC4 = 1;
  5406  003C74  8894               	bsf	3988,4,c	;volatile
  5407                           
  5408                           ; BSR set to: 0
  5409  003C76  0012               	return		;funcret
  5410  003C78                     __end_of_I2C_Master_Init:
  5411                           	opt stack 0
  5412                           tblptru	equ	0xFF8
  5413                           tblptrh	equ	0xFF7
  5414                           tblptrl	equ	0xFF6
  5415                           tablat	equ	0xFF5
  5416                           prodh	equ	0xFF4
  5417                           prodl	equ	0xFF3
  5418                           intcon	equ	0xFF2
  5419                           intcon2	equ	0xFF1
  5420                           intcon3	equ	0xFF0
  5421                           postinc0	equ	0xFEE
  5422                           wreg	equ	0xFE8
  5423                           postdec1	equ	0xFE5
  5424                           fsr1l	equ	0xFE1
  5425                           indf2	equ	0xFDF
  5426                           postinc2	equ	0xFDE
  5427                           postdec2	equ	0xFDD
  5428                           fsr2h	equ	0xFDA
  5429                           fsr2l	equ	0xFD9
  5430                           status	equ	0xFD8
  5431                           
  5432 ;; *************** function ___lldiv *****************
  5433 ;; Defined at:
  5434 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  5435 ;; Parameters:    Size  Location     Type
  5436 ;;  dividend        4    0[BANK0 ] unsigned long 
  5437 ;;  divisor         4    4[BANK0 ] unsigned long 
  5438 ;; Auto vars:     Size  Location     Type
  5439 ;;  quotient        4    8[BANK0 ] unsigned long 
  5440 ;;  counter         1   12[BANK0 ] unsigned char 
  5441 ;; Return value:  Size  Location     Type
  5442 ;;                  4    0[BANK0 ] unsigned long 
  5443 ;; Registers used:
  5444 ;;		wreg, status,2, status,0
  5445 ;; Tracked objects:
  5446 ;;		On entry : 0/0
  5447 ;;		On exit  : 0/0
  5448 ;;		Unchanged: 0/0
  5449 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5450 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5451 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5452 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5453 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5454 ;;Total ram usage:       13 bytes
  5455 ;; Hardware stack levels used:    1
  5456 ;; Hardware stack levels required when called:    7
  5457 ;; This function calls:
  5458 ;;		Nothing
  5459 ;; This function is called by:
  5460 ;;		_I2C_Master_Init
  5461 ;; This function uses a non-reentrant model
  5462 ;;
  5463                           
  5464                           	psect	text17
  5465  0034CA                     __ptext17:
  5466                           	opt stack 0
  5467  0034CA                     ___lldiv:
  5468                           	opt stack 20
  5469                           
  5470                           ; BSR set to: 0
  5471                           ;incstack = 0
  5472  0034CA  0E00               	movlw	0
  5473  0034CC  0100               	movlb	0	; () banked
  5474  0034CE  6F88               	movwf	___lldiv@quotient& (0+255),b
  5475  0034D0  0E00               	movlw	0
  5476  0034D2  6F89               	movwf	(___lldiv@quotient+1)& (0+255),b
  5477  0034D4  0E00               	movlw	0
  5478  0034D6  6F8A               	movwf	(___lldiv@quotient+2)& (0+255),b
  5479  0034D8  0E00               	movlw	0
  5480  0034DA  6F8B               	movwf	(___lldiv@quotient+3)& (0+255),b
  5481                           
  5482                           ; BSR set to: 0
  5483  0034DC  0100               	movlb	0	; () banked
  5484  0034DE  5184               	movf	___lldiv@divisor& (0+255),w,b
  5485  0034E0  0100               	movlb	0	; () banked
  5486  0034E2  1185               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  5487  0034E4  0100               	movlb	0	; () banked
  5488  0034E6  1186               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  5489  0034E8  0100               	movlb	0	; () banked
  5490  0034EA  1187               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  5491  0034EC  B4D8               	btfsc	status,2,c
  5492  0034EE  D042               	goto	l1618
  5493                           
  5494                           ; BSR set to: 0
  5495  0034F0  0E01               	movlw	1
  5496  0034F2  0100               	movlb	0	; () banked
  5497  0034F4  6F8C               	movwf	___lldiv@counter& (0+255),b
  5498  0034F6  D008               	goto	l5494
  5499  0034F8                     l5492:
  5500                           
  5501                           ; BSR set to: 0
  5502  0034F8  0100               	movlb	0	; () banked
  5503  0034FA  90D8               	bcf	status,0,c
  5504  0034FC  3784               	rlcf	___lldiv@divisor& (0+255),f,b
  5505  0034FE  3785               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  5506  003500  3786               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  5507  003502  3787               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  5508  003504  0100               	movlb	0	; () banked
  5509  003506  2B8C               	incf	___lldiv@counter& (0+255),f,b
  5510  003508                     l5494:
  5511                           
  5512                           ; BSR set to: 0
  5513  003508  0100               	movlb	0	; () banked
  5514  00350A  AF87               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  5515  00350C  D7F5               	goto	l5492
  5516  00350E                     l5496:
  5517                           
  5518                           ; BSR set to: 0
  5519  00350E  0100               	movlb	0	; () banked
  5520  003510  90D8               	bcf	status,0,c
  5521  003512  3788               	rlcf	___lldiv@quotient& (0+255),f,b
  5522  003514  3789               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  5523  003516  378A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  5524  003518  378B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  5525                           
  5526                           ; BSR set to: 0
  5527  00351A  0100               	movlb	0	; () banked
  5528  00351C  5184               	movf	___lldiv@divisor& (0+255),w,b
  5529  00351E  0100               	movlb	0	; () banked
  5530  003520  5D80               	subwf	___lldiv@dividend& (0+255),w,b
  5531  003522  0100               	movlb	0	; () banked
  5532  003524  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  5533  003526  0100               	movlb	0	; () banked
  5534  003528  5981               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  5535  00352A  0100               	movlb	0	; () banked
  5536  00352C  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  5537  00352E  0100               	movlb	0	; () banked
  5538  003530  5982               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  5539  003532  0100               	movlb	0	; () banked
  5540  003534  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  5541  003536  0100               	movlb	0	; () banked
  5542  003538  5983               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  5543  00353A  A0D8               	btfss	status,0,c
  5544  00353C  D012               	goto	l5504
  5545                           
  5546                           ; BSR set to: 0
  5547  00353E  0100               	movlb	0	; () banked
  5548  003540  5184               	movf	___lldiv@divisor& (0+255),w,b
  5549  003542  0100               	movlb	0	; () banked
  5550  003544  5F80               	subwf	___lldiv@dividend& (0+255),f,b
  5551  003546  0100               	movlb	0	; () banked
  5552  003548  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  5553  00354A  0100               	movlb	0	; () banked
  5554  00354C  5B81               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  5555  00354E  0100               	movlb	0	; () banked
  5556  003550  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  5557  003552  0100               	movlb	0	; () banked
  5558  003554  5B82               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  5559  003556  0100               	movlb	0	; () banked
  5560  003558  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  5561  00355A  0100               	movlb	0	; () banked
  5562  00355C  5B83               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  5563                           
  5564                           ; BSR set to: 0
  5565  00355E  0100               	movlb	0	; () banked
  5566  003560  8188               	bsf	___lldiv@quotient& (0+255),0,b
  5567  003562                     l5504:
  5568                           
  5569                           ; BSR set to: 0
  5570  003562  0100               	movlb	0	; () banked
  5571  003564  90D8               	bcf	status,0,c
  5572  003566  3387               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  5573  003568  3386               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  5574  00356A  3385               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  5575  00356C  3384               	rrcf	___lldiv@divisor& (0+255),f,b
  5576                           
  5577                           ; BSR set to: 0
  5578  00356E  0100               	movlb	0	; () banked
  5579  003570  2F8C               	decfsz	___lldiv@counter& (0+255),f,b
  5580  003572  D7CD               	goto	l5496
  5581  003574                     l1618:
  5582                           
  5583                           ; BSR set to: 0
  5584  003574  C088  F080         	movff	___lldiv@quotient,?___lldiv
  5585  003578  C089  F081         	movff	___lldiv@quotient+1,?___lldiv+1
  5586  00357C  C08A  F082         	movff	___lldiv@quotient+2,?___lldiv+2
  5587  003580  C08B  F083         	movff	___lldiv@quotient+3,?___lldiv+3
  5588                           
  5589                           ; BSR set to: 0
  5590  003584  0012               	return		;funcret
  5591  003586                     __end_of___lldiv:
  5592                           	opt stack 0
  5593                           tblptru	equ	0xFF8
  5594                           tblptrh	equ	0xFF7
  5595                           tblptrl	equ	0xFF6
  5596                           tablat	equ	0xFF5
  5597                           prodh	equ	0xFF4
  5598                           prodl	equ	0xFF3
  5599                           intcon	equ	0xFF2
  5600                           intcon2	equ	0xFF1
  5601                           intcon3	equ	0xFF0
  5602                           postinc0	equ	0xFEE
  5603                           wreg	equ	0xFE8
  5604                           postdec1	equ	0xFE5
  5605                           fsr1l	equ	0xFE1
  5606                           indf2	equ	0xFDF
  5607                           postinc2	equ	0xFDE
  5608                           postdec2	equ	0xFDD
  5609                           fsr2h	equ	0xFDA
  5610                           fsr2l	equ	0xFD9
  5611                           status	equ	0xFD8
  5612                           
  5613 ;; *************** function _change_state_to_menu_start *****************
  5614 ;; Defined at:
  5615 ;;		line 472 in file "UI.c"
  5616 ;; Parameters:    Size  Location     Type
  5617 ;;		None
  5618 ;; Auto vars:     Size  Location     Type
  5619 ;;		None
  5620 ;; Return value:  Size  Location     Type
  5621 ;;                  1    wreg      void 
  5622 ;; Registers used:
  5623 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5624 ;; Tracked objects:
  5625 ;;		On entry : 0/0
  5626 ;;		On exit  : 0/0
  5627 ;;		Unchanged: 0/0
  5628 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5629 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5630 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5631 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5632 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5633 ;;Total ram usage:        0 bytes
  5634 ;; Hardware stack levels used:    1
  5635 ;; Hardware stack levels required when called:   11
  5636 ;; This function calls:
  5637 ;;		_lcdInst
  5638 ;;		_printRTC
  5639 ;;		_printf
  5640 ;; This function is called by:
  5641 ;;		_initUI
  5642 ;; This function uses a non-reentrant model
  5643 ;;
  5644                           
  5645                           	psect	text18
  5646  004308                     __ptext18:
  5647                           	opt stack 0
  5648  004308                     _change_state_to_menu_start:
  5649                           	opt stack 18
  5650                           
  5651                           ;UI.c: 473: cur_state = 0;
  5652                           
  5653                           ; BSR set to: 0
  5654                           ;incstack = 0
  5655  004308  0E00               	movlw	0
  5656  00430A  0100               	movlb	0	; () banked
  5657  00430C  6FDF               	movwf	(_cur_state+1)& (0+255),b
  5658  00430E  0E00               	movlw	0
  5659  004310  6FDE               	movwf	_cur_state& (0+255),b
  5660                           
  5661                           ; BSR set to: 0
  5662                           ;UI.c: 475: lcdInst(0b10000000);;
  5663  004312  0E80               	movlw	128
  5664  004314  ECA5  F022         	call	_lcdInst
  5665                           
  5666                           ;UI.c: 476: printRTC();
  5667  004318  ECE7  F00D         	call	_printRTC	;wreg free
  5668                           
  5669                           ;UI.c: 477: lcdInst(0b11000000);;
  5670  00431C  0EC0               	movlw	192
  5671  00431E  ECA5  F022         	call	_lcdInst
  5672                           
  5673                           ;UI.c: 478: printf("PUSH TO CONTINUE");
  5674  004322  0E1F               	movlw	low STR_30
  5675  004324  0100               	movlb	0	; () banked
  5676  004326  6F8E               	movwf	printf@f& (0+255),b
  5677  004328  0EFE               	movlw	high STR_30
  5678  00432A  0100               	movlb	0	; () banked
  5679  00432C  6F8F               	movwf	(printf@f+1)& (0+255),b
  5680  00432E  EC9C  F008         	call	_printf	;wreg free
  5681  004332  0012               	return		;funcret
  5682  004334                     __end_of_change_state_to_menu_start:
  5683                           	opt stack 0
  5684                           tblptru	equ	0xFF8
  5685                           tblptrh	equ	0xFF7
  5686                           tblptrl	equ	0xFF6
  5687                           tablat	equ	0xFF5
  5688                           prodh	equ	0xFF4
  5689                           prodl	equ	0xFF3
  5690                           intcon	equ	0xFF2
  5691                           intcon2	equ	0xFF1
  5692                           intcon3	equ	0xFF0
  5693                           postinc0	equ	0xFEE
  5694                           wreg	equ	0xFE8
  5695                           postdec1	equ	0xFE5
  5696                           fsr1l	equ	0xFE1
  5697                           indf2	equ	0xFDF
  5698                           postinc2	equ	0xFDE
  5699                           postdec2	equ	0xFDD
  5700                           fsr2h	equ	0xFDA
  5701                           fsr2l	equ	0xFD9
  5702                           status	equ	0xFD8
  5703                           
  5704 ;; *************** function _initTime *****************
  5705 ;; Defined at:
  5706 ;;		line 17 in file "RTC.c"
  5707 ;; Parameters:    Size  Location     Type
  5708 ;;  s               1    wreg     unsigned char 
  5709 ;;  m               1    0[BANK0 ] unsigned char 
  5710 ;;  h               1    1[BANK0 ] unsigned char 
  5711 ;;  w               1    2[BANK0 ] unsigned char 
  5712 ;;  DD              1    3[BANK0 ] unsigned char 
  5713 ;;  MM              1    4[BANK0 ] unsigned char 
  5714 ;;  YY              1    5[BANK0 ] unsigned char 
  5715 ;; Auto vars:     Size  Location     Type
  5716 ;;  s               1    6[BANK0 ] unsigned char 
  5717 ;; Return value:  Size  Location     Type
  5718 ;;                  1    wreg      void 
  5719 ;; Registers used:
  5720 ;;		wreg
  5721 ;; Tracked objects:
  5722 ;;		On entry : 0/0
  5723 ;;		On exit  : 0/0
  5724 ;;		Unchanged: 0/0
  5725 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5726 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5727 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5728 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5729 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5730 ;;Total ram usage:        7 bytes
  5731 ;; Hardware stack levels used:    1
  5732 ;; Hardware stack levels required when called:    7
  5733 ;; This function calls:
  5734 ;;		Nothing
  5735 ;; This function is called by:
  5736 ;;		_main
  5737 ;; This function uses a non-reentrant model
  5738 ;;
  5739                           
  5740                           	psect	text19
  5741  004490                     __ptext19:
  5742                           	opt stack 0
  5743  004490                     _initTime:
  5744                           	opt stack 23
  5745                           
  5746                           ;incstack = 0
  5747                           ;initTime@s stored from wreg
  5748  004490  0100               	movlb	0	; () banked
  5749  004492  6F86               	movwf	initTime@s& (0+255),b
  5750                           
  5751                           ;RTC.c: 19: time[0] = s;
  5752  004494  C086  F124         	movff	initTime@s,_time
  5753                           
  5754                           ;RTC.c: 20: time[1] = m;
  5755  004498  C080  F125         	movff	initTime@m,_time+1
  5756                           
  5757                           ;RTC.c: 21: time[2] = h;
  5758  00449C  C081  F126         	movff	initTime@h,_time+2
  5759                           
  5760                           ;RTC.c: 22: time[3] = w;
  5761  0044A0  C082  F127         	movff	initTime@w,_time+3
  5762                           
  5763                           ;RTC.c: 23: time[4] = DD;
  5764  0044A4  C083  F128         	movff	initTime@DD,_time+4
  5765                           
  5766                           ;RTC.c: 24: time[5] = MM;
  5767  0044A8  C084  F129         	movff	initTime@MM,_time+5
  5768                           
  5769                           ;RTC.c: 25: time[6] = YY;
  5770  0044AC  C085  F12A         	movff	initTime@YY,_time+6
  5771  0044B0  0012               	return		;funcret
  5772  0044B2                     __end_of_initTime:
  5773                           	opt stack 0
  5774                           tblptru	equ	0xFF8
  5775                           tblptrh	equ	0xFF7
  5776                           tblptrl	equ	0xFF6
  5777                           tablat	equ	0xFF5
  5778                           prodh	equ	0xFF4
  5779                           prodl	equ	0xFF3
  5780                           intcon	equ	0xFF2
  5781                           intcon2	equ	0xFF1
  5782                           intcon3	equ	0xFF0
  5783                           postinc0	equ	0xFEE
  5784                           wreg	equ	0xFE8
  5785                           postdec1	equ	0xFE5
  5786                           fsr1l	equ	0xFE1
  5787                           indf2	equ	0xFDF
  5788                           postinc2	equ	0xFDE
  5789                           postdec2	equ	0xFDD
  5790                           fsr2h	equ	0xFDA
  5791                           fsr2l	equ	0xFD9
  5792                           status	equ	0xFD8
  5793                           
  5794 ;; *************** function _initLCD *****************
  5795 ;; Defined at:
  5796 ;;		line 48 in file "lcd.c"
  5797 ;; Parameters:    Size  Location     Type
  5798 ;;		None
  5799 ;; Auto vars:     Size  Location     Type
  5800 ;;		None
  5801 ;; Return value:  Size  Location     Type
  5802 ;;                  1    wreg      void 
  5803 ;; Registers used:
  5804 ;;		wreg, status,2, status,0, cstack
  5805 ;; Tracked objects:
  5806 ;;		On entry : 0/0
  5807 ;;		On exit  : 0/0
  5808 ;;		Unchanged: 0/0
  5809 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5810 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5811 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5812 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5813 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5814 ;;Total ram usage:        1 bytes
  5815 ;; Hardware stack levels used:    1
  5816 ;; Hardware stack levels required when called:    9
  5817 ;; This function calls:
  5818 ;;		_lcdInst
  5819 ;; This function is called by:
  5820 ;;		_main
  5821 ;; This function uses a non-reentrant model
  5822 ;;
  5823                           
  5824                           	psect	text20
  5825  003F66                     __ptext20:
  5826                           	opt stack 0
  5827  003F66                     _initLCD:
  5828                           	opt stack 21
  5829                           
  5830                           ;lcd.c: 49: _delay((unsigned long)((15)*(32000000/4000.0)));
  5831                           
  5832                           ;incstack = 0
  5833  003F66  0E9C               	movlw	156
  5834  003F68  0100               	movlb	0	; () banked
  5835  003F6A  6F83               	movwf	??_initLCD& (0+255),b
  5836  003F6C  0ED7               	movlw	215
  5837  003F6E                     u6937:
  5838  003F6E  2EE8               	decfsz	wreg,f,c
  5839  003F70  D7FE               	bra	u6937
  5840  003F72  2F83               	decfsz	??_initLCD& (0+255),f,b
  5841  003F74  D7FC               	bra	u6937
  5842                           
  5843                           ;lcd.c: 50: lcdInst(0b00110011);
  5844  003F76  0E33               	movlw	51
  5845  003F78  ECA5  F022         	call	_lcdInst
  5846                           
  5847                           ;lcd.c: 51: lcdInst(0b00110010);
  5848  003F7C  0E32               	movlw	50
  5849  003F7E  ECA5  F022         	call	_lcdInst
  5850                           
  5851                           ;lcd.c: 53: lcdInst(0b00101000);
  5852  003F82  0E28               	movlw	40
  5853  003F84  ECA5  F022         	call	_lcdInst
  5854                           
  5855                           ;lcd.c: 54: lcdInst(0b00001100);
  5856  003F88  0E0C               	movlw	12
  5857  003F8A  ECA5  F022         	call	_lcdInst
  5858                           
  5859                           ;lcd.c: 55: lcdInst(0b00000110);
  5860  003F8E  0E06               	movlw	6
  5861  003F90  ECA5  F022         	call	_lcdInst
  5862                           
  5863                           ;lcd.c: 56: lcdInst(0b00000001);
  5864  003F94  0E01               	movlw	1
  5865  003F96  ECA5  F022         	call	_lcdInst
  5866                           
  5867                           ;lcd.c: 57: _delay((unsigned long)((15)*(32000000/4000.0)));
  5868  003F9A  0E9C               	movlw	156
  5869  003F9C  0100               	movlb	0	; () banked
  5870  003F9E  6F83               	movwf	??_initLCD& (0+255),b
  5871  003FA0  0ED7               	movlw	215
  5872  003FA2                     u6947:
  5873  003FA2  2EE8               	decfsz	wreg,f,c
  5874  003FA4  D7FE               	bra	u6947
  5875  003FA6  2F83               	decfsz	??_initLCD& (0+255),f,b
  5876  003FA8  D7FC               	bra	u6947
  5877  003FAA  0012               	return		;funcret
  5878  003FAC                     __end_of_initLCD:
  5879                           	opt stack 0
  5880                           tblptru	equ	0xFF8
  5881                           tblptrh	equ	0xFF7
  5882                           tblptrl	equ	0xFF6
  5883                           tablat	equ	0xFF5
  5884                           prodh	equ	0xFF4
  5885                           prodl	equ	0xFF3
  5886                           intcon	equ	0xFF2
  5887                           intcon2	equ	0xFF1
  5888                           intcon3	equ	0xFF0
  5889                           postinc0	equ	0xFEE
  5890                           wreg	equ	0xFE8
  5891                           postdec1	equ	0xFE5
  5892                           fsr1l	equ	0xFE1
  5893                           indf2	equ	0xFDF
  5894                           postinc2	equ	0xFDE
  5895                           postdec2	equ	0xFDD
  5896                           fsr2h	equ	0xFDA
  5897                           fsr2l	equ	0xFD9
  5898                           status	equ	0xFD8
  5899                           
  5900 ;; *************** function _UI *****************
  5901 ;; Defined at:
  5902 ;;		line 74 in file "UI.c"
  5903 ;; Parameters:    Size  Location     Type
  5904 ;;		None
  5905 ;; Auto vars:     Size  Location     Type
  5906 ;;  i               1   73[BANK0 ] unsigned char 
  5907 ;;  i               1   85[BANK0 ] unsigned char 
  5908 ;;  i               1   84[BANK0 ] unsigned char 
  5909 ;;  i               1   83[BANK0 ] unsigned char 
  5910 ;;  i               1   82[BANK0 ] unsigned char 
  5911 ;;  i               1   81[BANK0 ] unsigned char 
  5912 ;;  i               1   80[BANK0 ] unsigned char 
  5913 ;;  i               1   79[BANK0 ] unsigned char 
  5914 ;;  i               1   78[BANK0 ] unsigned char 
  5915 ;;  i               1   77[BANK0 ] unsigned char 
  5916 ;;  i               1   76[BANK0 ] unsigned char 
  5917 ;;  i               1   75[BANK0 ] unsigned char 
  5918 ;;  i               1   74[BANK0 ] unsigned char 
  5919 ;;  month           4   86[BANK0 ] unsigned char [4]
  5920 ;;  i               1   72[BANK0 ] unsigned char 
  5921 ;; Return value:  Size  Location     Type
  5922 ;;                  1    wreg      void 
  5923 ;; Registers used:
  5924 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5925 ;; Tracked objects:
  5926 ;;		On entry : 0/0
  5927 ;;		On exit  : 0/0
  5928 ;;		Unchanged: 0/0
  5929 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5930 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5931 ;;      Locals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5932 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5933 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5934 ;;Total ram usage:       22 bytes
  5935 ;; Hardware stack levels used:    1
  5936 ;; Hardware stack levels required when called:   11
  5937 ;; This function calls:
  5938 ;;		___awdiv
  5939 ;;		___awmod
  5940 ;;		_change_state_to_menu_12
  5941 ;;		_change_state_to_menu_22
  5942 ;;		_lcdInst
  5943 ;;		_printRTC
  5944 ;;		_printf
  5945 ;;		_strcpy
  5946 ;; This function is called by:
  5947 ;;		_main
  5948 ;; This function uses a non-reentrant model
  5949 ;;
  5950                           
  5951                           	psect	text21
  5952  000012                     __ptext21:
  5953                           	opt stack 0
  5954  000012                     _UI:
  5955                           	opt stack 19
  5956                           
  5957                           ;UI.c: 75: if(machine_state == DoneSorting_state){
  5958                           
  5959                           ;incstack = 0
  5960  000012  0E02               	movlw	2
  5961  000014  0100               	movlb	0	; () banked
  5962  000016  19FC               	xorwf	_machine_state& (0+255),w,b
  5963  000018  A4D8               	btfss	status,2,c
  5964  00001A  D075               	goto	l7198
  5965                           
  5966                           ; BSR set to: 0
  5967                           ;UI.c: 76: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  5968  00001C  0E01               	movlw	1
  5969  00001E  ECA5  F022         	call	_lcdInst
  5970  000022  0E68               	movlw	104
  5971  000024  0100               	movlb	0	; () banked
  5972  000026  6FC4               	movwf	??_UI& (0+255),b
  5973  000028  0EE4               	movlw	228
  5974  00002A                     u6957:
  5975  00002A  2EE8               	decfsz	wreg,f,c
  5976  00002C  D7FE               	bra	u6957
  5977  00002E  2FC4               	decfsz	??_UI& (0+255),f,b
  5978  000030  D7FC               	bra	u6957
  5979  000032  F000               	nop	
  5980                           
  5981                           ;UI.c: 77: lcdInst(0b10000000);;
  5982  000034  0E80               	movlw	128
  5983  000036  ECA5  F022         	call	_lcdInst
  5984                           
  5985                           ;UI.c: 78: printf("RESULTS IN LOG %d", sel+1);
  5986  00003A  0ECB               	movlw	low STR_1
  5987  00003C  0100               	movlb	0	; () banked
  5988  00003E  6F8E               	movwf	printf@f& (0+255),b
  5989  000040  0EFB               	movlw	high STR_1
  5990  000042  0100               	movlb	0	; () banked
  5991  000044  6F8F               	movwf	(printf@f+1)& (0+255),b
  5992  000046  0E01               	movlw	1
  5993  000048  0100               	movlb	0	; () banked
  5994  00004A  25FD               	addwf	_sel& (0+255),w,b
  5995  00004C  0100               	movlb	0	; () banked
  5996  00004E  6F90               	movwf	(?_printf+2)& (0+255),b
  5997  000050  0100               	movlb	0	; () banked
  5998  000052  6B91               	clrf	(?_printf+3)& (0+255),b
  5999  000054  0E00               	movlw	0
  6000  000056  2391               	addwfc	(?_printf+3)& (0+255),f,b
  6001  000058  EC9C  F008         	call	_printf	;wreg free
  6002                           
  6003                           ;UI.c: 79: lcdInst(0b11000000);;
  6004  00005C  0EC0               	movlw	192
  6005  00005E  ECA5  F022         	call	_lcdInst
  6006                           
  6007                           ;UI.c: 80: printf("TIME: %d:%02d", (total_time % 3600) / 60, (total_time % 3600) % 60);
  6008  000062  0E0E               	movlw	14
  6009  000064  0100               	movlb	0	; () banked
  6010  000066  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  6011  000068  0E10               	movlw	16
  6012  00006A  6F82               	movwf	___awmod@divisor& (0+255),b
  6013  00006C  C0F8  F080         	movff	_total_time,___awmod@dividend
  6014  000070  C0F9  F081         	movff	_total_time+1,___awmod@dividend+1
  6015  000074  EC18  F01B         	call	___awmod	;wreg free
  6016  000078  C080  F0C6         	movff	?___awmod,_UI$2240
  6017  00007C  C081  F0C7         	movff	?___awmod+1,_UI$2240+1
  6018                           
  6019                           ;UI.c: 80: printf("TIME: %d:%02d", (total_time % 3600) / 60, (total_time % 3600) % 60);
  6020  000080  0E2D               	movlw	low STR_2
  6021  000082  0100               	movlb	0	; () banked
  6022  000084  6F8E               	movwf	printf@f& (0+255),b
  6023  000086  0EFF               	movlw	high STR_2
  6024  000088  0100               	movlb	0	; () banked
  6025  00008A  6F8F               	movwf	(printf@f+1)& (0+255),b
  6026  00008C  0E0E               	movlw	14
  6027  00008E  0100               	movlb	0	; () banked
  6028  000090  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  6029  000092  0E10               	movlw	16
  6030  000094  6F82               	movwf	___awmod@divisor& (0+255),b
  6031  000096  C0F8  F080         	movff	_total_time,___awmod@dividend
  6032  00009A  C0F9  F081         	movff	_total_time+1,___awmod@dividend+1
  6033  00009E  EC18  F01B         	call	___awmod	;wreg free
  6034  0000A2  C080  F086         	movff	?___awmod,___awdiv@dividend
  6035  0000A6  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  6036  0000AA  0E00               	movlw	0
  6037  0000AC  0100               	movlb	0	; () banked
  6038  0000AE  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  6039  0000B0  0E3C               	movlw	60
  6040  0000B2  6F88               	movwf	___awdiv@divisor& (0+255),b
  6041  0000B4  EC06  F01A         	call	___awdiv	;wreg free
  6042  0000B8  C086  F090         	movff	?___awdiv,?_printf+2
  6043  0000BC  C087  F091         	movff	?___awdiv+1,?_printf+3
  6044  0000C0  C0C6  F080         	movff	_UI$2240,___awmod@dividend
  6045  0000C4  C0C7  F081         	movff	_UI$2240+1,___awmod@dividend+1
  6046  0000C8  0E00               	movlw	0
  6047  0000CA  0100               	movlb	0	; () banked
  6048  0000CC  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  6049  0000CE  0E3C               	movlw	60
  6050  0000D0  6F82               	movwf	___awmod@divisor& (0+255),b
  6051  0000D2  EC18  F01B         	call	___awmod	;wreg free
  6052  0000D6  C080  F092         	movff	?___awmod,?_printf+4
  6053  0000DA  C081  F093         	movff	?___awmod+1,?_printf+5
  6054  0000DE  EC9C  F008         	call	_printf	;wreg free
  6055                           
  6056                           ;UI.c: 81: machine_state = UI_state;
  6057  0000E2  0E00               	movlw	0
  6058  0000E4  0100               	movlb	0	; () banked
  6059  0000E6  6FFC               	movwf	_machine_state& (0+255),b
  6060  0000E8                     l177:
  6061  0000E8  A281               	btfss	3969,1,c	;volatile
  6062  0000EA  D7FE               	goto	l177
  6063                           
  6064                           ;UI.c: 84: }
  6065                           ;UI.c: 85: if(cur_state==12){
  6066  0000EC  0E0C               	movlw	12
  6067  0000EE  0100               	movlb	0	; () banked
  6068  0000F0  19DE               	xorwf	_cur_state& (0+255),w,b
  6069  0000F2  0100               	movlb	0	; () banked
  6070  0000F4  11DF               	iorwf	(_cur_state+1)& (0+255),w,b
  6071  0000F6  A4D8               	btfss	status,2,c
  6072  0000F8  D003               	goto	l7196
  6073                           
  6074                           ; BSR set to: 0
  6075                           ;UI.c: 86: change_state_to_menu_12();
  6076  0000FA  EC13  F020         	call	_change_state_to_menu_12	;wreg free
  6077                           
  6078                           ;UI.c: 87: }
  6079  0000FE  D3D5               	goto	l7518
  6080  000100                     l7196:
  6081                           
  6082                           ;UI.c: 88: else{
  6083                           ;UI.c: 89: change_state_to_menu_22();
  6084  000100  ECF7  F01F         	call	_change_state_to_menu_22	;wreg free
  6085                           
  6086                           ;UI.c: 90: }
  6087                           ;UI.c: 91: }
  6088  000104  D3D2               	goto	l7518
  6089  000106                     l7198:
  6090                           
  6091                           ;UI.c: 92: else if(cur_state == 0){
  6092  000106  0100               	movlb	0	; () banked
  6093  000108  51DE               	movf	_cur_state& (0+255),w,b
  6094  00010A  0100               	movlb	0	; () banked
  6095  00010C  11DF               	iorwf	(_cur_state+1)& (0+255),w,b
  6096  00010E  A4D8               	btfss	status,2,c
  6097  000110  D3CC               	goto	l7518
  6098                           
  6099                           ; BSR set to: 0
  6100                           ;UI.c: 93: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
  6101  000112  0E00               	movlw	0
  6102  000114  0100               	movlb	0	; () banked
  6103  000116  6FC8               	movwf	UI@i& (0+255),b
  6104  000118                     l7202:
  6105                           
  6106                           ; BSR set to: 0
  6107  000118  0E63               	movlw	99
  6108  00011A  0100               	movlb	0	; () banked
  6109  00011C  65C8               	cpfsgt	UI@i& (0+255),b
  6110  00011E  D001               	goto	l7206
  6111  000120  D00C               	goto	l7210
  6112  000122                     l7206:
  6113                           
  6114                           ; BSR set to: 0
  6115  000122  0E68               	movlw	104
  6116  000124  0100               	movlb	0	; () banked
  6117  000126  6FC4               	movwf	??_UI& (0+255),b
  6118  000128  0EE4               	movlw	228
  6119  00012A                     u6967:
  6120  00012A  2EE8               	decfsz	wreg,f,c
  6121  00012C  D7FE               	bra	u6967
  6122  00012E  2FC4               	decfsz	??_UI& (0+255),f,b
  6123  000130  D7FC               	bra	u6967
  6124  000132  F000               	nop	
  6125  000134  0100               	movlb	0	; () banked
  6126  000136  2BC8               	incf	UI@i& (0+255),f,b
  6127  000138  D7EF               	goto	l7202
  6128  00013A                     l7210:
  6129                           
  6130                           ; BSR set to: 0
  6131                           ;UI.c: 94: if(cur_state == 0){
  6132  00013A  0100               	movlb	0	; () banked
  6133  00013C  51DE               	movf	_cur_state& (0+255),w,b
  6134  00013E  0100               	movlb	0	; () banked
  6135  000140  11DF               	iorwf	(_cur_state+1)& (0+255),w,b
  6136  000142  A4D8               	btfss	status,2,c
  6137  000144  D3B2               	goto	l7518
  6138                           
  6139                           ; BSR set to: 0
  6140                           ;UI.c: 95: printRTC();
  6141  000146  ECE7  F00D         	call	_printRTC	;wreg free
  6142                           
  6143                           ;UI.c: 96: }
  6144                           ;UI.c: 97: }
  6145                           ;UI.c: 98: while(logstate){
  6146  00014A  D3AF               	goto	l7518
  6147  00014C                     l7214:
  6148                           
  6149                           ;UI.c: 100: if(!log_completion){
  6150  00014C  0100               	movlb	0	; () banked
  6151  00014E  51E8               	movf	_log_completion& (0+255),w,b
  6152  000150  0100               	movlb	0	; () banked
  6153  000152  11E9               	iorwf	(_log_completion+1)& (0+255),w,b
  6154  000154  A4D8               	btfss	status,2,c
  6155  000156  D041               	goto	l7244
  6156                           
  6157                           ; BSR set to: 0
  6158                           ;UI.c: 101: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  6159  000158  0E01               	movlw	1
  6160  00015A  ECA5  F022         	call	_lcdInst
  6161  00015E  0E68               	movlw	104
  6162  000160  0100               	movlb	0	; () banked
  6163  000162  6FC4               	movwf	??_UI& (0+255),b
  6164  000164  0EE4               	movlw	228
  6165  000166                     u6977:
  6166  000166  2EE8               	decfsz	wreg,f,c
  6167  000168  D7FE               	bra	u6977
  6168  00016A  2FC4               	decfsz	??_UI& (0+255),f,b
  6169  00016C  D7FC               	bra	u6977
  6170  00016E  F000               	nop	
  6171                           
  6172                           ;UI.c: 102: lcdInst(0b10000000);;
  6173  000170  0E80               	movlw	128
  6174  000172  ECA5  F022         	call	_lcdInst
  6175                           
  6176                           ;UI.c: 103: printf("-- LOG %2d HERE--", log);
  6177  000176  0EB9               	movlw	low STR_3
  6178  000178  0100               	movlb	0	; () banked
  6179  00017A  6F8E               	movwf	printf@f& (0+255),b
  6180  00017C  0EFB               	movlw	high STR_3
  6181  00017E  0100               	movlb	0	; () banked
  6182  000180  6F8F               	movwf	(printf@f+1)& (0+255),b
  6183  000182  C0E6  F090         	movff	_log,?_printf+2
  6184  000186  C0E7  F091         	movff	_log+1,?_printf+3
  6185  00018A  EC9C  F008         	call	_printf	;wreg free
  6186                           
  6187                           ;UI.c: 104: lcdInst(0b11000000);;
  6188  00018E  0EC0               	movlw	192
  6189  000190  ECA5  F022         	call	_lcdInst
  6190                           
  6191                           ;UI.c: 105: printf("DIDN'T COMPLETE");
  6192  000194  0E50               	movlw	low STR_4
  6193  000196  0100               	movlb	0	; () banked
  6194  000198  6F8E               	movwf	printf@f& (0+255),b
  6195  00019A  0EFE               	movlw	high STR_4
  6196  00019C  0100               	movlb	0	; () banked
  6197  00019E  6F8F               	movwf	(printf@f+1)& (0+255),b
  6198  0001A0  EC9C  F008         	call	_printf	;wreg free
  6199  0001A4                     l7228:
  6200  0001A4  0E00               	movlw	0
  6201  0001A6  0100               	movlb	0	; () banked
  6202  0001A8  6FC9               	movwf	UI@i_408& (0+255),b
  6203  0001AA                     l7230:
  6204                           
  6205                           ; BSR set to: 0
  6206  0001AA  0E63               	movlw	99
  6207  0001AC  0100               	movlb	0	; () banked
  6208  0001AE  65C9               	cpfsgt	UI@i_408& (0+255),b
  6209  0001B0  D001               	goto	l7234
  6210  0001B2  D00C               	goto	l7238
  6211  0001B4                     l7234:
  6212                           
  6213                           ; BSR set to: 0
  6214  0001B4  0E68               	movlw	104
  6215  0001B6  0100               	movlb	0	; () banked
  6216  0001B8  6FC4               	movwf	??_UI& (0+255),b
  6217  0001BA  0EE4               	movlw	228
  6218  0001BC                     u6987:
  6219  0001BC  2EE8               	decfsz	wreg,f,c
  6220  0001BE  D7FE               	bra	u6987
  6221  0001C0  2FC4               	decfsz	??_UI& (0+255),f,b
  6222  0001C2  D7FC               	bra	u6987
  6223  0001C4  F000               	nop	
  6224  0001C6  0100               	movlb	0	; () banked
  6225  0001C8  2BC9               	incf	UI@i_408& (0+255),f,b
  6226  0001CA  D7EF               	goto	l7230
  6227  0001CC                     l7238:
  6228                           
  6229                           ; BSR set to: 0
  6230  0001CC  0100               	movlb	0	; () banked
  6231  0001CE  51F6               	movf	_logstate& (0+255),w,b
  6232  0001D0  0100               	movlb	0	; () banked
  6233  0001D2  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  6234  0001D4  B4D8               	btfsc	status,2,c
  6235  0001D6  0012               	return	
  6236  0001D8  D7E5               	goto	l7228
  6237  0001DA                     l7244:
  6238                           
  6239                           ; BSR set to: 0
  6240                           ;UI.c: 109: else{
  6241                           ;UI.c: 110: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  6242  0001DA  0E01               	movlw	1
  6243  0001DC  ECA5  F022         	call	_lcdInst
  6244  0001E0  0E68               	movlw	104
  6245  0001E2  0100               	movlb	0	; () banked
  6246  0001E4  6FC4               	movwf	??_UI& (0+255),b
  6247  0001E6  0EE4               	movlw	228
  6248  0001E8                     u6997:
  6249  0001E8  2EE8               	decfsz	wreg,f,c
  6250  0001EA  D7FE               	bra	u6997
  6251  0001EC  2FC4               	decfsz	??_UI& (0+255),f,b
  6252  0001EE  D7FC               	bra	u6997
  6253  0001F0  F000               	nop	
  6254                           
  6255                           ;UI.c: 111: lcdInst(0b10000000);;
  6256  0001F2  0E80               	movlw	128
  6257  0001F4  ECA5  F022         	call	_lcdInst
  6258                           
  6259                           ;UI.c: 112: printf("-- LOG %2d HERE--", log);
  6260  0001F8  0EB9               	movlw	low STR_3
  6261  0001FA  0100               	movlb	0	; () banked
  6262  0001FC  6F8E               	movwf	printf@f& (0+255),b
  6263  0001FE  0EFB               	movlw	high STR_3
  6264  000200  0100               	movlb	0	; () banked
  6265  000202  6F8F               	movwf	(printf@f+1)& (0+255),b
  6266  000204  C0E6  F090         	movff	_log,?_printf+2
  6267  000208  C0E7  F091         	movff	_log+1,?_printf+3
  6268  00020C  EC9C  F008         	call	_printf	;wreg free
  6269                           
  6270                           ;UI.c: 113: lcdInst(0b11000000);;
  6271  000210  0EC0               	movlw	192
  6272  000212  ECA5  F022         	call	_lcdInst
  6273                           
  6274                           ;UI.c: 114: printf("PAUSE < | BACK >");
  6275  000216  0E0E               	movlw	low STR_6
  6276  000218  0100               	movlb	0	; () banked
  6277  00021A  6F8E               	movwf	printf@f& (0+255),b
  6278  00021C  0EFE               	movlw	high STR_6
  6279  00021E  0100               	movlb	0	; () banked
  6280  000220  6F8F               	movwf	(printf@f+1)& (0+255),b
  6281  000222  EC9C  F008         	call	_printf	;wreg free
  6282                           
  6283                           ;UI.c: 116: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  6284  000226  0E00               	movlw	0
  6285  000228  0100               	movlb	0	; () banked
  6286  00022A  6FCA               	movwf	UI@i_411& (0+255),b
  6287  00022C                     l7258:
  6288                           
  6289                           ; BSR set to: 0
  6290  00022C  0E63               	movlw	99
  6291  00022E  0100               	movlb	0	; () banked
  6292  000230  65CA               	cpfsgt	UI@i_411& (0+255),b
  6293  000232  D001               	goto	l7262
  6294  000234  D00C               	goto	l7266
  6295  000236                     l7262:
  6296                           
  6297                           ; BSR set to: 0
  6298  000236  0E68               	movlw	104
  6299  000238  0100               	movlb	0	; () banked
  6300  00023A  6FC4               	movwf	??_UI& (0+255),b
  6301  00023C  0EE4               	movlw	228
  6302  00023E                     u7007:
  6303  00023E  2EE8               	decfsz	wreg,f,c
  6304  000240  D7FE               	bra	u7007
  6305  000242  2FC4               	decfsz	??_UI& (0+255),f,b
  6306  000244  D7FC               	bra	u7007
  6307  000246  F000               	nop	
  6308  000248  0100               	movlb	0	; () banked
  6309  00024A  2BCA               	incf	UI@i_411& (0+255),f,b
  6310  00024C  D7EF               	goto	l7258
  6311  00024E                     l7266:
  6312                           
  6313                           ; BSR set to: 0
  6314  00024E  0100               	movlb	0	; () banked
  6315  000250  51F6               	movf	_logstate& (0+255),w,b
  6316  000252  0100               	movlb	0	; () banked
  6317  000254  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  6318  000256  B4D8               	btfsc	status,2,c
  6319  000258  0012               	return	
  6320                           
  6321                           ; BSR set to: 0
  6322                           ;UI.c: 117: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  6323                           
  6324                           ; BSR set to: 0
  6325                           
  6326                           ; BSR set to: 0
  6327  00025A  0E00               	movlw	0
  6328  00025C  0100               	movlb	0	; () banked
  6329  00025E  6FCB               	movwf	UI@i_412& (0+255),b
  6330  000260                     l7272:
  6331                           
  6332                           ; BSR set to: 0
  6333  000260  0E63               	movlw	99
  6334  000262  0100               	movlb	0	; () banked
  6335  000264  65CB               	cpfsgt	UI@i_412& (0+255),b
  6336  000266  D001               	goto	l7276
  6337  000268  D00C               	goto	l7280
  6338  00026A                     l7276:
  6339                           
  6340                           ; BSR set to: 0
  6341  00026A  0E68               	movlw	104
  6342  00026C  0100               	movlb	0	; () banked
  6343  00026E  6FC4               	movwf	??_UI& (0+255),b
  6344  000270  0EE4               	movlw	228
  6345  000272                     u7017:
  6346  000272  2EE8               	decfsz	wreg,f,c
  6347  000274  D7FE               	bra	u7017
  6348  000276  2FC4               	decfsz	??_UI& (0+255),f,b
  6349  000278  D7FC               	bra	u7017
  6350  00027A  F000               	nop	
  6351  00027C  0100               	movlb	0	; () banked
  6352  00027E  2BCB               	incf	UI@i_412& (0+255),f,b
  6353  000280  D7EF               	goto	l7272
  6354  000282                     l7280:
  6355                           
  6356                           ; BSR set to: 0
  6357  000282  0100               	movlb	0	; () banked
  6358  000284  51F6               	movf	_logstate& (0+255),w,b
  6359  000286  0100               	movlb	0	; () banked
  6360  000288  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  6361  00028A  B4D8               	btfsc	status,2,c
  6362  00028C  0012               	return	
  6363                           
  6364                           ; BSR set to: 0
  6365                           ;UI.c: 119: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  6366                           
  6367                           ; BSR set to: 0
  6368                           
  6369                           ; BSR set to: 0
  6370  00028E  0E01               	movlw	1
  6371  000290  ECA5  F022         	call	_lcdInst
  6372  000294  0E68               	movlw	104
  6373  000296  0100               	movlb	0	; () banked
  6374  000298  6FC4               	movwf	??_UI& (0+255),b
  6375  00029A  0EE4               	movlw	228
  6376  00029C                     u7027:
  6377  00029C  2EE8               	decfsz	wreg,f,c
  6378  00029E  D7FE               	bra	u7027
  6379  0002A0  2FC4               	decfsz	??_UI& (0+255),f,b
  6380  0002A2  D7FC               	bra	u7027
  6381  0002A4  F000               	nop	
  6382                           
  6383                           ;UI.c: 120: lcdInst(0b10000000);;
  6384  0002A6  0E80               	movlw	128
  6385  0002A8  ECA5  F022         	call	_lcdInst
  6386                           
  6387                           ;UI.c: 121: printf("START:");
  6388  0002AC  0EC3               	movlw	low STR_7
  6389  0002AE  0100               	movlb	0	; () banked
  6390  0002B0  6F8E               	movwf	printf@f& (0+255),b
  6391  0002B2  0EFF               	movlw	high STR_7
  6392  0002B4  0100               	movlb	0	; () banked
  6393  0002B6  6F8F               	movwf	(printf@f+1)& (0+255),b
  6394  0002B8  EC9C  F008         	call	_printf	;wreg free
  6395                           
  6396                           ;UI.c: 122: lcdInst(0b11000000);;
  6397  0002BC  0EC0               	movlw	192
  6398  0002BE  ECA5  F022         	call	_lcdInst
  6399                           
  6400                           ;UI.c: 123: char month[] = "MMM";
  6401  0002C2  C12D  F0D6         	movff	UI@F3222,UI@month
  6402  0002C6  C12E  F0D7         	movff	UI@F3222+1,UI@month+1
  6403  0002CA  C12F  F0D8         	movff	UI@F3222+2,UI@month+2
  6404  0002CE  C130  F0D9         	movff	UI@F3222+3,UI@month+3
  6405                           
  6406                           ;UI.c: 124: switch(log_startTime[5]){
  6407  0002D2  D0C3               	goto	l7324
  6408  0002D4                     l7296:
  6409                           
  6410                           ;UI.c: 126: strcpy(month, "JAN");
  6411  0002D4  0ED6               	movlw	low UI@month
  6412  0002D6  0100               	movlb	0	; () banked
  6413  0002D8  6F80               	movwf	strcpy@to& (0+255),b
  6414  0002DA  0E00               	movlw	high UI@month
  6415  0002DC  0100               	movlb	0	; () banked
  6416  0002DE  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6417  0002E0  0EDA               	movlw	low STR_8
  6418  0002E2  0100               	movlb	0	; () banked
  6419  0002E4  6F82               	movwf	strcpy@from& (0+255),b
  6420  0002E6  0EFF               	movlw	high STR_8
  6421  0002E8  0100               	movlb	0	; () banked
  6422  0002EA  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6423  0002EC  EC2F  F020         	call	_strcpy	;wreg free
  6424                           
  6425                           ;UI.c: 127: break;
  6426  0002F0  D0E6               	goto	l7326
  6427  0002F2                     l7298:
  6428                           
  6429                           ;UI.c: 129: strcpy(month, "FEB");
  6430  0002F2  0ED6               	movlw	low UI@month
  6431  0002F4  0100               	movlb	0	; () banked
  6432  0002F6  6F80               	movwf	strcpy@to& (0+255),b
  6433  0002F8  0E00               	movlw	high UI@month
  6434  0002FA  0100               	movlb	0	; () banked
  6435  0002FC  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6436  0002FE  0ECA               	movlw	low STR_9
  6437  000300  0100               	movlb	0	; () banked
  6438  000302  6F82               	movwf	strcpy@from& (0+255),b
  6439  000304  0EFF               	movlw	high STR_9
  6440  000306  0100               	movlb	0	; () banked
  6441  000308  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6442  00030A  EC2F  F020         	call	_strcpy	;wreg free
  6443                           
  6444                           ;UI.c: 130: break;
  6445  00030E  D0D7               	goto	l7326
  6446  000310                     l7300:
  6447                           
  6448                           ;UI.c: 132: strcpy(month, "MAR");
  6449  000310  0ED6               	movlw	low UI@month
  6450  000312  0100               	movlb	0	; () banked
  6451  000314  6F80               	movwf	strcpy@to& (0+255),b
  6452  000316  0E00               	movlw	high UI@month
  6453  000318  0100               	movlb	0	; () banked
  6454  00031A  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6455  00031C  0EE6               	movlw	low STR_10
  6456  00031E  0100               	movlb	0	; () banked
  6457  000320  6F82               	movwf	strcpy@from& (0+255),b
  6458  000322  0EFF               	movlw	high STR_10
  6459  000324  0100               	movlb	0	; () banked
  6460  000326  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6461  000328  EC2F  F020         	call	_strcpy	;wreg free
  6462                           
  6463                           ;UI.c: 133: break;
  6464  00032C  D0C8               	goto	l7326
  6465  00032E                     l7302:
  6466                           
  6467                           ;UI.c: 135: strcpy(month, "APR");
  6468  00032E  0ED6               	movlw	low UI@month
  6469  000330  0100               	movlb	0	; () banked
  6470  000332  6F80               	movwf	strcpy@to& (0+255),b
  6471  000334  0E00               	movlw	high UI@month
  6472  000336  0100               	movlb	0	; () banked
  6473  000338  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6474  00033A  0EEA               	movlw	low STR_11
  6475  00033C  0100               	movlb	0	; () banked
  6476  00033E  6F82               	movwf	strcpy@from& (0+255),b
  6477  000340  0EFF               	movlw	high STR_11
  6478  000342  0100               	movlb	0	; () banked
  6479  000344  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6480  000346  EC2F  F020         	call	_strcpy	;wreg free
  6481                           
  6482                           ;UI.c: 136: break;
  6483  00034A  D0B9               	goto	l7326
  6484  00034C                     l7304:
  6485                           
  6486                           ;UI.c: 138: strcpy(month, "MAY");
  6487  00034C  0ED6               	movlw	low UI@month
  6488  00034E  0100               	movlb	0	; () banked
  6489  000350  6F80               	movwf	strcpy@to& (0+255),b
  6490  000352  0E00               	movlw	high UI@month
  6491  000354  0100               	movlb	0	; () banked
  6492  000356  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6493  000358  0EFA               	movlw	low STR_12
  6494  00035A  0100               	movlb	0	; () banked
  6495  00035C  6F82               	movwf	strcpy@from& (0+255),b
  6496  00035E  0EFF               	movlw	high STR_12
  6497  000360  0100               	movlb	0	; () banked
  6498  000362  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6499  000364  EC2F  F020         	call	_strcpy	;wreg free
  6500                           
  6501                           ;UI.c: 139: break;
  6502  000368  D0AA               	goto	l7326
  6503  00036A                     l7306:
  6504                           
  6505                           ;UI.c: 141: strcpy(month, "JUN");
  6506  00036A  0ED6               	movlw	low UI@month
  6507  00036C  0100               	movlb	0	; () banked
  6508  00036E  6F80               	movwf	strcpy@to& (0+255),b
  6509  000370  0E00               	movlw	high UI@month
  6510  000372  0100               	movlb	0	; () banked
  6511  000374  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6512  000376  0EDE               	movlw	low STR_13
  6513  000378  0100               	movlb	0	; () banked
  6514  00037A  6F82               	movwf	strcpy@from& (0+255),b
  6515  00037C  0EFF               	movlw	high STR_13
  6516  00037E  0100               	movlb	0	; () banked
  6517  000380  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6518  000382  EC2F  F020         	call	_strcpy	;wreg free
  6519                           
  6520                           ;UI.c: 142: break;
  6521  000386  D09B               	goto	l7326
  6522  000388                     l7308:
  6523                           
  6524                           ;UI.c: 144: strcpy(month, "JUL");
  6525  000388  0ED6               	movlw	low UI@month
  6526  00038A  0100               	movlb	0	; () banked
  6527  00038C  6F80               	movwf	strcpy@to& (0+255),b
  6528  00038E  0E00               	movlw	high UI@month
  6529  000390  0100               	movlb	0	; () banked
  6530  000392  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6531  000394  0ED6               	movlw	low STR_14
  6532  000396  0100               	movlb	0	; () banked
  6533  000398  6F82               	movwf	strcpy@from& (0+255),b
  6534  00039A  0EFF               	movlw	high STR_14
  6535  00039C  0100               	movlb	0	; () banked
  6536  00039E  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6537  0003A0  EC2F  F020         	call	_strcpy	;wreg free
  6538                           
  6539                           ;UI.c: 145: break;
  6540  0003A4  D08C               	goto	l7326
  6541  0003A6                     l7310:
  6542                           
  6543                           ;UI.c: 147: strcpy(month, "AUG");
  6544  0003A6  0ED6               	movlw	low UI@month
  6545  0003A8  0100               	movlb	0	; () banked
  6546  0003AA  6F80               	movwf	strcpy@to& (0+255),b
  6547  0003AC  0E00               	movlw	high UI@month
  6548  0003AE  0100               	movlb	0	; () banked
  6549  0003B0  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6550  0003B2  0ED2               	movlw	low STR_15
  6551  0003B4  0100               	movlb	0	; () banked
  6552  0003B6  6F82               	movwf	strcpy@from& (0+255),b
  6553  0003B8  0EFF               	movlw	high STR_15
  6554  0003BA  0100               	movlb	0	; () banked
  6555  0003BC  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6556  0003BE  EC2F  F020         	call	_strcpy	;wreg free
  6557                           
  6558                           ;UI.c: 148: break;
  6559  0003C2  D07D               	goto	l7326
  6560  0003C4                     l7312:
  6561                           
  6562                           ;UI.c: 150: strcpy(month, "SEP");
  6563  0003C4  0ED6               	movlw	low UI@month
  6564  0003C6  0100               	movlb	0	; () banked
  6565  0003C8  6F80               	movwf	strcpy@to& (0+255),b
  6566  0003CA  0E00               	movlw	high UI@month
  6567  0003CC  0100               	movlb	0	; () banked
  6568  0003CE  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6569  0003D0  0EE2               	movlw	low STR_16
  6570  0003D2  0100               	movlb	0	; () banked
  6571  0003D4  6F82               	movwf	strcpy@from& (0+255),b
  6572  0003D6  0EFF               	movlw	high STR_16
  6573  0003D8  0100               	movlb	0	; () banked
  6574  0003DA  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6575  0003DC  EC2F  F020         	call	_strcpy	;wreg free
  6576                           
  6577                           ;UI.c: 151: break;
  6578  0003E0  D06E               	goto	l7326
  6579  0003E2                     l7314:
  6580                           
  6581                           ;UI.c: 153: strcpy(month, "OCT");
  6582  0003E2  0ED6               	movlw	low UI@month
  6583  0003E4  0100               	movlb	0	; () banked
  6584  0003E6  6F80               	movwf	strcpy@to& (0+255),b
  6585  0003E8  0E00               	movlw	high UI@month
  6586  0003EA  0100               	movlb	0	; () banked
  6587  0003EC  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6588  0003EE  0EF2               	movlw	low STR_17
  6589  0003F0  0100               	movlb	0	; () banked
  6590  0003F2  6F82               	movwf	strcpy@from& (0+255),b
  6591  0003F4  0EFF               	movlw	high STR_17
  6592  0003F6  0100               	movlb	0	; () banked
  6593  0003F8  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6594  0003FA  EC2F  F020         	call	_strcpy	;wreg free
  6595                           
  6596                           ;UI.c: 154: break;
  6597  0003FE  D05F               	goto	l7326
  6598  000400                     l7316:
  6599                           
  6600                           ;UI.c: 156: strcpy(month, "NOV");
  6601  000400  0ED6               	movlw	low UI@month
  6602  000402  0100               	movlb	0	; () banked
  6603  000404  6F80               	movwf	strcpy@to& (0+255),b
  6604  000406  0E00               	movlw	high UI@month
  6605  000408  0100               	movlb	0	; () banked
  6606  00040A  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6607  00040C  0EF6               	movlw	low STR_18
  6608  00040E  0100               	movlb	0	; () banked
  6609  000410  6F82               	movwf	strcpy@from& (0+255),b
  6610  000412  0EFF               	movlw	high STR_18
  6611  000414  0100               	movlb	0	; () banked
  6612  000416  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6613  000418  EC2F  F020         	call	_strcpy	;wreg free
  6614                           
  6615                           ;UI.c: 157: break;
  6616  00041C  D050               	goto	l7326
  6617  00041E                     l7318:
  6618                           
  6619                           ;UI.c: 159: strcpy(month, "DEC");
  6620  00041E  0ED6               	movlw	low UI@month
  6621  000420  0100               	movlb	0	; () banked
  6622  000422  6F80               	movwf	strcpy@to& (0+255),b
  6623  000424  0E00               	movlw	high UI@month
  6624  000426  0100               	movlb	0	; () banked
  6625  000428  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6626  00042A  0ECE               	movlw	low STR_19
  6627  00042C  0100               	movlb	0	; () banked
  6628  00042E  6F82               	movwf	strcpy@from& (0+255),b
  6629  000430  0EFF               	movlw	high STR_19
  6630  000432  0100               	movlb	0	; () banked
  6631  000434  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6632  000436  EC2F  F020         	call	_strcpy	;wreg free
  6633                           
  6634                           ;UI.c: 160: break;
  6635  00043A  D041               	goto	l7326
  6636  00043C                     l7320:
  6637                           
  6638                           ;UI.c: 162: strcpy(month, "ERR");
  6639  00043C  0ED6               	movlw	low UI@month
  6640  00043E  0100               	movlb	0	; () banked
  6641  000440  6F80               	movwf	strcpy@to& (0+255),b
  6642  000442  0E00               	movlw	high UI@month
  6643  000444  0100               	movlb	0	; () banked
  6644  000446  6F81               	movwf	(strcpy@to+1)& (0+255),b
  6645  000448  0EEE               	movlw	low STR_20
  6646  00044A  0100               	movlb	0	; () banked
  6647  00044C  6F82               	movwf	strcpy@from& (0+255),b
  6648  00044E  0EFF               	movlw	high STR_20
  6649  000450  0100               	movlb	0	; () banked
  6650  000452  6F83               	movwf	(strcpy@from+1)& (0+255),b
  6651  000454  EC2F  F020         	call	_strcpy	;wreg free
  6652                           
  6653                           ;UI.c: 164: }
  6654                           
  6655                           ;UI.c: 163: break;
  6656  000458  D032               	goto	l7326
  6657  00045A                     l7324:
  6658  00045A  EE21  F00A         	lfsr	2,_log_startTime+10
  6659  00045E  CFDE F0C4          	movff	postinc2,??_UI
  6660  000462  CFDD F0C5          	movff	postdec2,??_UI+1
  6661                           
  6662                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6663                           ; Switch size 1, requested type "space"
  6664                           ; Number of cases is 1, Range of values is 0 to 0
  6665                           ; switch strategies available:
  6666                           ; Name         Instructions Cycles
  6667                           ; simple_byte            4     3 (average)
  6668                           ;	Chosen strategy is simple_byte
  6669  000466  0100               	movlb	0	; () banked
  6670  000468  51C5               	movf	(??_UI+1)& (0+255),w,b
  6671  00046A  0A00               	xorlw	0	; case 0
  6672  00046C  A4D8               	btfss	status,2,c
  6673  00046E  D7E6               	goto	l7320
  6674                           
  6675                           ; BSR set to: 0
  6676                           ; Switch size 1, requested type "space"
  6677                           ; Number of cases is 12, Range of values is 1 to 12
  6678                           ; switch strategies available:
  6679                           ; Name         Instructions Cycles
  6680                           ; simple_byte           37    19 (average)
  6681                           ;	Chosen strategy is simple_byte
  6682  000470  0100               	movlb	0	; () banked
  6683  000472  51C4               	movf	??_UI& (0+255),w,b
  6684  000474  0A01               	xorlw	1	; case 1
  6685  000476  B4D8               	btfsc	status,2,c
  6686  000478  D72D               	goto	l7296
  6687  00047A  0A03               	xorlw	3	; case 2
  6688  00047C  B4D8               	btfsc	status,2,c
  6689  00047E  D739               	goto	l7298
  6690  000480  0A01               	xorlw	1	; case 3
  6691  000482  B4D8               	btfsc	status,2,c
  6692  000484  D745               	goto	l7300
  6693  000486  0A07               	xorlw	7	; case 4
  6694  000488  B4D8               	btfsc	status,2,c
  6695  00048A  D751               	goto	l7302
  6696  00048C  0A01               	xorlw	1	; case 5
  6697  00048E  B4D8               	btfsc	status,2,c
  6698  000490  D75D               	goto	l7304
  6699  000492  0A03               	xorlw	3	; case 6
  6700  000494  B4D8               	btfsc	status,2,c
  6701  000496  D769               	goto	l7306
  6702  000498  0A01               	xorlw	1	; case 7
  6703  00049A  B4D8               	btfsc	status,2,c
  6704  00049C  D775               	goto	l7308
  6705  00049E  0A0F               	xorlw	15	; case 8
  6706  0004A0  B4D8               	btfsc	status,2,c
  6707  0004A2  D781               	goto	l7310
  6708  0004A4  0A01               	xorlw	1	; case 9
  6709  0004A6  B4D8               	btfsc	status,2,c
  6710  0004A8  D78D               	goto	l7312
  6711  0004AA  0A03               	xorlw	3	; case 10
  6712  0004AC  B4D8               	btfsc	status,2,c
  6713  0004AE  D799               	goto	l7314
  6714  0004B0  0A01               	xorlw	1	; case 11
  6715  0004B2  B4D8               	btfsc	status,2,c
  6716  0004B4  D7A5               	goto	l7316
  6717  0004B6  0A07               	xorlw	7	; case 12
  6718  0004B8  B4D8               	btfsc	status,2,c
  6719  0004BA  D7B1               	goto	l7318
  6720  0004BC  D7BF               	goto	l7320
  6721  0004BE                     l7326:
  6722                           
  6723                           ;UI.c: 165: printf("%02d%s | %02d:%02d:%02d", log_startTime[4],month,log_startTime[2],lo
      +                          g_startTime[1],log_startTime[0]);
  6724  0004BE  0E42               	movlw	low STR_21
  6725  0004C0  0100               	movlb	0	; () banked
  6726  0004C2  6F8E               	movwf	printf@f& (0+255),b
  6727  0004C4  0EFB               	movlw	high STR_21
  6728  0004C6  0100               	movlb	0	; () banked
  6729  0004C8  6F8F               	movwf	(printf@f+1)& (0+255),b
  6730  0004CA  C108  F090         	movff	_log_startTime+8,?_printf+2
  6731  0004CE  C109  F091         	movff	_log_startTime+9,?_printf+3
  6732  0004D2  0ED6               	movlw	low UI@month
  6733  0004D4  0100               	movlb	0	; () banked
  6734  0004D6  6F92               	movwf	(?_printf+4)& (0+255),b
  6735  0004D8  0E00               	movlw	high UI@month
  6736  0004DA  0100               	movlb	0	; () banked
  6737  0004DC  6F93               	movwf	(?_printf+5)& (0+255),b
  6738  0004DE  C104  F094         	movff	_log_startTime+4,?_printf+6
  6739  0004E2  C105  F095         	movff	_log_startTime+5,?_printf+7
  6740  0004E6  C102  F096         	movff	_log_startTime+2,?_printf+8
  6741  0004EA  C103  F097         	movff	_log_startTime+3,?_printf+9
  6742  0004EE  C100  F098         	movff	_log_startTime,?_printf+10
  6743  0004F2  C101  F099         	movff	_log_startTime+1,?_printf+11
  6744  0004F6  EC9C  F008         	call	_printf	;wreg free
  6745                           
  6746                           ;UI.c: 167: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  6747  0004FA  0E00               	movlw	0
  6748  0004FC  0100               	movlb	0	; () banked
  6749  0004FE  6FCC               	movwf	UI@i_430& (0+255),b
  6750  000500                     l7330:
  6751                           
  6752                           ; BSR set to: 0
  6753  000500  0E63               	movlw	99
  6754  000502  0100               	movlb	0	; () banked
  6755  000504  65CC               	cpfsgt	UI@i_430& (0+255),b
  6756  000506  D001               	goto	l7334
  6757  000508  D00C               	goto	l7338
  6758  00050A                     l7334:
  6759                           
  6760                           ; BSR set to: 0
  6761  00050A  0E68               	movlw	104
  6762  00050C  0100               	movlb	0	; () banked
  6763  00050E  6FC4               	movwf	??_UI& (0+255),b
  6764  000510  0EE4               	movlw	228
  6765  000512                     u7037:
  6766  000512  2EE8               	decfsz	wreg,f,c
  6767  000514  D7FE               	bra	u7037
  6768  000516  2FC4               	decfsz	??_UI& (0+255),f,b
  6769  000518  D7FC               	bra	u7037
  6770  00051A  F000               	nop	
  6771  00051C  0100               	movlb	0	; () banked
  6772  00051E  2BCC               	incf	UI@i_430& (0+255),f,b
  6773  000520  D7EF               	goto	l7330
  6774  000522                     l7338:
  6775                           
  6776                           ; BSR set to: 0
  6777  000522  0100               	movlb	0	; () banked
  6778  000524  51F6               	movf	_logstate& (0+255),w,b
  6779  000526  0100               	movlb	0	; () banked
  6780  000528  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  6781  00052A  B4D8               	btfsc	status,2,c
  6782  00052C  0012               	return	
  6783                           
  6784                           ; BSR set to: 0
  6785                           ;UI.c: 168: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  6786                           
  6787                           ; BSR set to: 0
  6788                           
  6789                           ; BSR set to: 0
  6790  00052E  0E00               	movlw	0
  6791  000530  0100               	movlb	0	; () banked
  6792  000532  6FCD               	movwf	UI@i_431& (0+255),b
  6793  000534                     l7344:
  6794                           
  6795                           ; BSR set to: 0
  6796  000534  0E63               	movlw	99
  6797  000536  0100               	movlb	0	; () banked
  6798  000538  65CD               	cpfsgt	UI@i_431& (0+255),b
  6799  00053A  D001               	goto	l7348
  6800  00053C  D00C               	goto	l7352
  6801  00053E                     l7348:
  6802                           
  6803                           ; BSR set to: 0
  6804  00053E  0E68               	movlw	104
  6805  000540  0100               	movlb	0	; () banked
  6806  000542  6FC4               	movwf	??_UI& (0+255),b
  6807  000544  0EE4               	movlw	228
  6808  000546                     u7047:
  6809  000546  2EE8               	decfsz	wreg,f,c
  6810  000548  D7FE               	bra	u7047
  6811  00054A  2FC4               	decfsz	??_UI& (0+255),f,b
  6812  00054C  D7FC               	bra	u7047
  6813  00054E  F000               	nop	
  6814  000550  0100               	movlb	0	; () banked
  6815  000552  2BCD               	incf	UI@i_431& (0+255),f,b
  6816  000554  D7EF               	goto	l7344
  6817  000556                     l7352:
  6818                           
  6819                           ; BSR set to: 0
  6820  000556  0100               	movlb	0	; () banked
  6821  000558  51F6               	movf	_logstate& (0+255),w,b
  6822  00055A  0100               	movlb	0	; () banked
  6823  00055C  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  6824  00055E  B4D8               	btfsc	status,2,c
  6825  000560  0012               	return	
  6826                           
  6827                           ; BSR set to: 0
  6828                           ;UI.c: 170: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  6829                           
  6830                           ; BSR set to: 0
  6831                           
  6832                           ; BSR set to: 0
  6833  000562  0E01               	movlw	1
  6834  000564  ECA5  F022         	call	_lcdInst
  6835  000568  0E68               	movlw	104
  6836  00056A  0100               	movlb	0	; () banked
  6837  00056C  6FC4               	movwf	??_UI& (0+255),b
  6838  00056E  0EE4               	movlw	228
  6839  000570                     u7057:
  6840  000570  2EE8               	decfsz	wreg,f,c
  6841  000572  D7FE               	bra	u7057
  6842  000574  2FC4               	decfsz	??_UI& (0+255),f,b
  6843  000576  D7FC               	bra	u7057
  6844  000578  F000               	nop	
  6845                           
  6846                           ;UI.c: 171: lcdInst(0b10000000);;
  6847  00057A  0E80               	movlw	128
  6848  00057C  ECA5  F022         	call	_lcdInst
  6849                           
  6850                           ;UI.c: 172: printf("DURATION:");
  6851  000580  0EA3               	movlw	low STR_22
  6852  000582  0100               	movlb	0	; () banked
  6853  000584  6F8E               	movwf	printf@f& (0+255),b
  6854  000586  0EFF               	movlw	high STR_22
  6855  000588  0100               	movlb	0	; () banked
  6856  00058A  6F8F               	movwf	(printf@f+1)& (0+255),b
  6857  00058C  EC9C  F008         	call	_printf	;wreg free
  6858                           
  6859                           ;UI.c: 173: lcdInst(0b11000000);;
  6860  000590  0EC0               	movlw	192
  6861  000592  ECA5  F022         	call	_lcdInst
  6862                           
  6863                           ;UI.c: 174: printf("%d MIN %d SEC", (log_total_time % 3600) / 60, (log_total_time % 3600
      +                          ) % 60);
  6864  000596  0E0E               	movlw	14
  6865  000598  0100               	movlb	0	; () banked
  6866  00059A  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  6867  00059C  0E10               	movlw	16
  6868  00059E  6F82               	movwf	___awmod@divisor& (0+255),b
  6869  0005A0  C0F4  F080         	movff	_log_total_time,___awmod@dividend
  6870  0005A4  C0F5  F081         	movff	_log_total_time+1,___awmod@dividend+1
  6871  0005A8  EC18  F01B         	call	___awmod	;wreg free
  6872  0005AC  C080  F0C6         	movff	?___awmod,_UI$2240
  6873  0005B0  C081  F0C7         	movff	?___awmod+1,_UI$2240+1
  6874                           
  6875                           ;UI.c: 174: printf("%d MIN %d SEC", (log_total_time % 3600) / 60, (log_total_time % 3600
      +                          ) % 60);
  6876  0005B4  0E1F               	movlw	low STR_23
  6877  0005B6  0100               	movlb	0	; () banked
  6878  0005B8  6F8E               	movwf	printf@f& (0+255),b
  6879  0005BA  0EFF               	movlw	high STR_23
  6880  0005BC  0100               	movlb	0	; () banked
  6881  0005BE  6F8F               	movwf	(printf@f+1)& (0+255),b
  6882  0005C0  0E0E               	movlw	14
  6883  0005C2  0100               	movlb	0	; () banked
  6884  0005C4  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  6885  0005C6  0E10               	movlw	16
  6886  0005C8  6F82               	movwf	___awmod@divisor& (0+255),b
  6887  0005CA  C0F4  F080         	movff	_log_total_time,___awmod@dividend
  6888  0005CE  C0F5  F081         	movff	_log_total_time+1,___awmod@dividend+1
  6889  0005D2  EC18  F01B         	call	___awmod	;wreg free
  6890  0005D6  C080  F086         	movff	?___awmod,___awdiv@dividend
  6891  0005DA  C081  F087         	movff	?___awmod+1,___awdiv@dividend+1
  6892  0005DE  0E00               	movlw	0
  6893  0005E0  0100               	movlb	0	; () banked
  6894  0005E2  6F89               	movwf	(___awdiv@divisor+1)& (0+255),b
  6895  0005E4  0E3C               	movlw	60
  6896  0005E6  6F88               	movwf	___awdiv@divisor& (0+255),b
  6897  0005E8  EC06  F01A         	call	___awdiv	;wreg free
  6898  0005EC  C086  F090         	movff	?___awdiv,?_printf+2
  6899  0005F0  C087  F091         	movff	?___awdiv+1,?_printf+3
  6900  0005F4  C0C6  F080         	movff	_UI$2240,___awmod@dividend
  6901  0005F8  C0C7  F081         	movff	_UI$2240+1,___awmod@dividend+1
  6902  0005FC  0E00               	movlw	0
  6903  0005FE  0100               	movlb	0	; () banked
  6904  000600  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  6905  000602  0E3C               	movlw	60
  6906  000604  6F82               	movwf	___awmod@divisor& (0+255),b
  6907  000606  EC18  F01B         	call	___awmod	;wreg free
  6908  00060A  C080  F092         	movff	?___awmod,?_printf+4
  6909  00060E  C081  F093         	movff	?___awmod+1,?_printf+5
  6910  000612  EC9C  F008         	call	_printf	;wreg free
  6911                           
  6912                           ;UI.c: 176: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  6913  000616  0E00               	movlw	0
  6914  000618  0100               	movlb	0	; () banked
  6915  00061A  6FCE               	movwf	UI@i_434& (0+255),b
  6916  00061C                     l7372:
  6917                           
  6918                           ; BSR set to: 0
  6919  00061C  0E63               	movlw	99
  6920  00061E  0100               	movlb	0	; () banked
  6921  000620  65CE               	cpfsgt	UI@i_434& (0+255),b
  6922  000622  D001               	goto	l7376
  6923  000624  D00C               	goto	l7380
  6924  000626                     l7376:
  6925                           
  6926                           ; BSR set to: 0
  6927  000626  0E68               	movlw	104
  6928  000628  0100               	movlb	0	; () banked
  6929  00062A  6FC4               	movwf	??_UI& (0+255),b
  6930  00062C  0EE4               	movlw	228
  6931  00062E                     u7067:
  6932  00062E  2EE8               	decfsz	wreg,f,c
  6933  000630  D7FE               	bra	u7067
  6934  000632  2FC4               	decfsz	??_UI& (0+255),f,b
  6935  000634  D7FC               	bra	u7067
  6936  000636  F000               	nop	
  6937  000638  0100               	movlb	0	; () banked
  6938  00063A  2BCE               	incf	UI@i_434& (0+255),f,b
  6939  00063C  D7EF               	goto	l7372
  6940  00063E                     l7380:
  6941                           
  6942                           ; BSR set to: 0
  6943  00063E  0100               	movlb	0	; () banked
  6944  000640  51F6               	movf	_logstate& (0+255),w,b
  6945  000642  0100               	movlb	0	; () banked
  6946  000644  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  6947  000646  B4D8               	btfsc	status,2,c
  6948  000648  0012               	return	
  6949                           
  6950                           ; BSR set to: 0
  6951                           ;UI.c: 177: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  6952                           
  6953                           ; BSR set to: 0
  6954                           
  6955                           ; BSR set to: 0
  6956  00064A  0E00               	movlw	0
  6957  00064C  0100               	movlb	0	; () banked
  6958  00064E  6FCF               	movwf	UI@i_435& (0+255),b
  6959  000650                     l7386:
  6960                           
  6961                           ; BSR set to: 0
  6962  000650  0E63               	movlw	99
  6963  000652  0100               	movlb	0	; () banked
  6964  000654  65CF               	cpfsgt	UI@i_435& (0+255),b
  6965  000656  D001               	goto	l7390
  6966  000658  D00C               	goto	l7394
  6967  00065A                     l7390:
  6968                           
  6969                           ; BSR set to: 0
  6970  00065A  0E68               	movlw	104
  6971  00065C  0100               	movlb	0	; () banked
  6972  00065E  6FC4               	movwf	??_UI& (0+255),b
  6973  000660  0EE4               	movlw	228
  6974  000662                     u7077:
  6975  000662  2EE8               	decfsz	wreg,f,c
  6976  000664  D7FE               	bra	u7077
  6977  000666  2FC4               	decfsz	??_UI& (0+255),f,b
  6978  000668  D7FC               	bra	u7077
  6979  00066A  F000               	nop	
  6980  00066C  0100               	movlb	0	; () banked
  6981  00066E  2BCF               	incf	UI@i_435& (0+255),f,b
  6982  000670  D7EF               	goto	l7386
  6983  000672                     l7394:
  6984                           
  6985                           ; BSR set to: 0
  6986  000672  0100               	movlb	0	; () banked
  6987  000674  51F6               	movf	_logstate& (0+255),w,b
  6988  000676  0100               	movlb	0	; () banked
  6989  000678  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  6990  00067A  B4D8               	btfsc	status,2,c
  6991  00067C  0012               	return	
  6992                           
  6993                           ; BSR set to: 0
  6994                           ;UI.c: 179: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  6995                           
  6996                           ; BSR set to: 0
  6997                           
  6998                           ; BSR set to: 0
  6999  00067E  0E01               	movlw	1
  7000  000680  ECA5  F022         	call	_lcdInst
  7001  000684  0E68               	movlw	104
  7002  000686  0100               	movlb	0	; () banked
  7003  000688  6FC4               	movwf	??_UI& (0+255),b
  7004  00068A  0EE4               	movlw	228
  7005  00068C                     u7087:
  7006  00068C  2EE8               	decfsz	wreg,f,c
  7007  00068E  D7FE               	bra	u7087
  7008  000690  2FC4               	decfsz	??_UI& (0+255),f,b
  7009  000692  D7FC               	bra	u7087
  7010  000694  F000               	nop	
  7011                           
  7012                           ;UI.c: 180: lcdInst(0b10000000);;
  7013  000696  0E80               	movlw	128
  7014  000698  ECA5  F022         	call	_lcdInst
  7015                           
  7016                           ;UI.c: 181: printf(" -- POP  CAN -- ");
  7017  00069C  0E64               	movlw	low STR_24
  7018  00069E  0100               	movlb	0	; () banked
  7019  0006A0  6F8E               	movwf	printf@f& (0+255),b
  7020  0006A2  0EFD               	movlw	high STR_24
  7021  0006A4  0100               	movlb	0	; () banked
  7022  0006A6  6F8F               	movwf	(printf@f+1)& (0+255),b
  7023  0006A8  EC9C  F008         	call	_printf	;wreg free
  7024                           
  7025                           ;UI.c: 182: lcdInst(0b11000000);;
  7026  0006AC  0EC0               	movlw	192
  7027  0006AE  ECA5  F022         	call	_lcdInst
  7028                           
  7029                           ;UI.c: 183: printf("NO TAB: %d|TAB: %d", log_count_pop_no_tab, log_count_pop_w_tab);
  7030  0006B2  0E82               	movlw	low STR_25
  7031  0006B4  0100               	movlb	0	; () banked
  7032  0006B6  6F8E               	movwf	printf@f& (0+255),b
  7033  0006B8  0EFB               	movlw	high STR_25
  7034  0006BA  0100               	movlb	0	; () banked
  7035  0006BC  6F8F               	movwf	(printf@f+1)& (0+255),b
  7036  0006BE  C0EE  F090         	movff	_log_count_pop_no_tab,?_printf+2
  7037  0006C2  C0EF  F091         	movff	_log_count_pop_no_tab+1,?_printf+3
  7038  0006C6  C0F0  F092         	movff	_log_count_pop_w_tab,?_printf+4
  7039  0006CA  C0F1  F093         	movff	_log_count_pop_w_tab+1,?_printf+5
  7040  0006CE  EC9C  F008         	call	_printf	;wreg free
  7041                           
  7042                           ;UI.c: 185: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7043  0006D2  0E00               	movlw	0
  7044  0006D4  0100               	movlb	0	; () banked
  7045  0006D6  6FD0               	movwf	UI@i_438& (0+255),b
  7046  0006D8                     l7412:
  7047                           
  7048                           ; BSR set to: 0
  7049  0006D8  0E63               	movlw	99
  7050  0006DA  0100               	movlb	0	; () banked
  7051  0006DC  65D0               	cpfsgt	UI@i_438& (0+255),b
  7052  0006DE  D001               	goto	l7416
  7053  0006E0  D00C               	goto	l7420
  7054  0006E2                     l7416:
  7055                           
  7056                           ; BSR set to: 0
  7057  0006E2  0E68               	movlw	104
  7058  0006E4  0100               	movlb	0	; () banked
  7059  0006E6  6FC4               	movwf	??_UI& (0+255),b
  7060  0006E8  0EE4               	movlw	228
  7061  0006EA                     u7097:
  7062  0006EA  2EE8               	decfsz	wreg,f,c
  7063  0006EC  D7FE               	bra	u7097
  7064  0006EE  2FC4               	decfsz	??_UI& (0+255),f,b
  7065  0006F0  D7FC               	bra	u7097
  7066  0006F2  F000               	nop	
  7067  0006F4  0100               	movlb	0	; () banked
  7068  0006F6  2BD0               	incf	UI@i_438& (0+255),f,b
  7069  0006F8  D7EF               	goto	l7412
  7070  0006FA                     l7420:
  7071                           
  7072                           ; BSR set to: 0
  7073  0006FA  0100               	movlb	0	; () banked
  7074  0006FC  51F6               	movf	_logstate& (0+255),w,b
  7075  0006FE  0100               	movlb	0	; () banked
  7076  000700  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7077  000702  B4D8               	btfsc	status,2,c
  7078  000704  0012               	return	
  7079                           
  7080                           ; BSR set to: 0
  7081                           ;UI.c: 186: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7082                           
  7083                           ; BSR set to: 0
  7084                           
  7085                           ; BSR set to: 0
  7086  000706  0E00               	movlw	0
  7087  000708  0100               	movlb	0	; () banked
  7088  00070A  6FD1               	movwf	UI@i_439& (0+255),b
  7089  00070C                     l7426:
  7090                           
  7091                           ; BSR set to: 0
  7092  00070C  0E63               	movlw	99
  7093  00070E  0100               	movlb	0	; () banked
  7094  000710  65D1               	cpfsgt	UI@i_439& (0+255),b
  7095  000712  D001               	goto	l7430
  7096  000714  D00C               	goto	l7434
  7097  000716                     l7430:
  7098                           
  7099                           ; BSR set to: 0
  7100  000716  0E68               	movlw	104
  7101  000718  0100               	movlb	0	; () banked
  7102  00071A  6FC4               	movwf	??_UI& (0+255),b
  7103  00071C  0EE4               	movlw	228
  7104  00071E                     u7107:
  7105  00071E  2EE8               	decfsz	wreg,f,c
  7106  000720  D7FE               	bra	u7107
  7107  000722  2FC4               	decfsz	??_UI& (0+255),f,b
  7108  000724  D7FC               	bra	u7107
  7109  000726  F000               	nop	
  7110  000728  0100               	movlb	0	; () banked
  7111  00072A  2BD1               	incf	UI@i_439& (0+255),f,b
  7112  00072C  D7EF               	goto	l7426
  7113  00072E                     l7434:
  7114                           
  7115                           ; BSR set to: 0
  7116  00072E  0100               	movlb	0	; () banked
  7117  000730  51F6               	movf	_logstate& (0+255),w,b
  7118  000732  0100               	movlb	0	; () banked
  7119  000734  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7120  000736  B4D8               	btfsc	status,2,c
  7121  000738  0012               	return	
  7122                           
  7123                           ; BSR set to: 0
  7124                           ;UI.c: 188: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7125                           
  7126                           ; BSR set to: 0
  7127                           
  7128                           ; BSR set to: 0
  7129  00073A  0E01               	movlw	1
  7130  00073C  ECA5  F022         	call	_lcdInst
  7131  000740  0E68               	movlw	104
  7132  000742  0100               	movlb	0	; () banked
  7133  000744  6FC4               	movwf	??_UI& (0+255),b
  7134  000746  0EE4               	movlw	228
  7135  000748                     u7117:
  7136  000748  2EE8               	decfsz	wreg,f,c
  7137  00074A  D7FE               	bra	u7117
  7138  00074C  2FC4               	decfsz	??_UI& (0+255),f,b
  7139  00074E  D7FC               	bra	u7117
  7140  000750  F000               	nop	
  7141                           
  7142                           ;UI.c: 189: lcdInst(0b10000000);;
  7143  000752  0E80               	movlw	128
  7144  000754  ECA5  F022         	call	_lcdInst
  7145                           
  7146                           ;UI.c: 190: printf(" -- SOUP CAN -- ");
  7147  000758  0E75               	movlw	low STR_26
  7148  00075A  0100               	movlb	0	; () banked
  7149  00075C  6F8E               	movwf	printf@f& (0+255),b
  7150  00075E  0EFD               	movlw	high STR_26
  7151  000760  0100               	movlb	0	; () banked
  7152  000762  6F8F               	movwf	(printf@f+1)& (0+255),b
  7153  000764  EC9C  F008         	call	_printf	;wreg free
  7154                           
  7155                           ;UI.c: 191: lcdInst(0b11000000);;
  7156  000768  0EC0               	movlw	192
  7157  00076A  ECA5  F022         	call	_lcdInst
  7158                           
  7159                           ;UI.c: 192: printf("NO LAB: %d|LAB: %d", log_count_can_no_lab, log_count_can_w_lab);
  7160  00076E  0E6F               	movlw	low STR_27
  7161  000770  0100               	movlb	0	; () banked
  7162  000772  6F8E               	movwf	printf@f& (0+255),b
  7163  000774  0EFB               	movlw	high STR_27
  7164  000776  0100               	movlb	0	; () banked
  7165  000778  6F8F               	movwf	(printf@f+1)& (0+255),b
  7166  00077A  C0EA  F090         	movff	_log_count_can_no_lab,?_printf+2
  7167  00077E  C0EB  F091         	movff	_log_count_can_no_lab+1,?_printf+3
  7168  000782  C0EC  F092         	movff	_log_count_can_w_lab,?_printf+4
  7169  000786  C0ED  F093         	movff	_log_count_can_w_lab+1,?_printf+5
  7170  00078A  EC9C  F008         	call	_printf	;wreg free
  7171                           
  7172                           ;UI.c: 194: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7173  00078E  0E00               	movlw	0
  7174  000790  0100               	movlb	0	; () banked
  7175  000792  6FD2               	movwf	UI@i_442& (0+255),b
  7176  000794                     l7452:
  7177                           
  7178                           ; BSR set to: 0
  7179  000794  0E63               	movlw	99
  7180  000796  0100               	movlb	0	; () banked
  7181  000798  65D2               	cpfsgt	UI@i_442& (0+255),b
  7182  00079A  D001               	goto	l7456
  7183  00079C  D00C               	goto	l7460
  7184  00079E                     l7456:
  7185                           
  7186                           ; BSR set to: 0
  7187  00079E  0E68               	movlw	104
  7188  0007A0  0100               	movlb	0	; () banked
  7189  0007A2  6FC4               	movwf	??_UI& (0+255),b
  7190  0007A4  0EE4               	movlw	228
  7191  0007A6                     u7127:
  7192  0007A6  2EE8               	decfsz	wreg,f,c
  7193  0007A8  D7FE               	bra	u7127
  7194  0007AA  2FC4               	decfsz	??_UI& (0+255),f,b
  7195  0007AC  D7FC               	bra	u7127
  7196  0007AE  F000               	nop	
  7197  0007B0  0100               	movlb	0	; () banked
  7198  0007B2  2BD2               	incf	UI@i_442& (0+255),f,b
  7199  0007B4  D7EF               	goto	l7452
  7200  0007B6                     l7460:
  7201                           
  7202                           ; BSR set to: 0
  7203  0007B6  0100               	movlb	0	; () banked
  7204  0007B8  51F6               	movf	_logstate& (0+255),w,b
  7205  0007BA  0100               	movlb	0	; () banked
  7206  0007BC  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7207  0007BE  B4D8               	btfsc	status,2,c
  7208  0007C0  0012               	return	
  7209                           
  7210                           ; BSR set to: 0
  7211                           ;UI.c: 195: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7212                           
  7213                           ; BSR set to: 0
  7214                           
  7215                           ; BSR set to: 0
  7216  0007C2  0E00               	movlw	0
  7217  0007C4  0100               	movlb	0	; () banked
  7218  0007C6  6FD3               	movwf	UI@i_443& (0+255),b
  7219  0007C8                     l7466:
  7220                           
  7221                           ; BSR set to: 0
  7222  0007C8  0E63               	movlw	99
  7223  0007CA  0100               	movlb	0	; () banked
  7224  0007CC  65D3               	cpfsgt	UI@i_443& (0+255),b
  7225  0007CE  D001               	goto	l7470
  7226  0007D0  D00C               	goto	l7474
  7227  0007D2                     l7470:
  7228                           
  7229                           ; BSR set to: 0
  7230  0007D2  0E68               	movlw	104
  7231  0007D4  0100               	movlb	0	; () banked
  7232  0007D6  6FC4               	movwf	??_UI& (0+255),b
  7233  0007D8  0EE4               	movlw	228
  7234  0007DA                     u7137:
  7235  0007DA  2EE8               	decfsz	wreg,f,c
  7236  0007DC  D7FE               	bra	u7137
  7237  0007DE  2FC4               	decfsz	??_UI& (0+255),f,b
  7238  0007E0  D7FC               	bra	u7137
  7239  0007E2  F000               	nop	
  7240  0007E4  0100               	movlb	0	; () banked
  7241  0007E6  2BD3               	incf	UI@i_443& (0+255),f,b
  7242  0007E8  D7EF               	goto	l7466
  7243  0007EA                     l7474:
  7244                           
  7245                           ; BSR set to: 0
  7246  0007EA  0100               	movlb	0	; () banked
  7247  0007EC  51F6               	movf	_logstate& (0+255),w,b
  7248  0007EE  0100               	movlb	0	; () banked
  7249  0007F0  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7250  0007F2  B4D8               	btfsc	status,2,c
  7251  0007F4  0012               	return	
  7252                           
  7253                           ; BSR set to: 0
  7254                           ;UI.c: 197: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;
  7255                           
  7256                           ; BSR set to: 0
  7257                           
  7258                           ; BSR set to: 0
  7259  0007F6  0E01               	movlw	1
  7260  0007F8  ECA5  F022         	call	_lcdInst
  7261  0007FC  0E68               	movlw	104
  7262  0007FE  0100               	movlb	0	; () banked
  7263  000800  6FC4               	movwf	??_UI& (0+255),b
  7264  000802  0EE4               	movlw	228
  7265  000804                     u7147:
  7266  000804  2EE8               	decfsz	wreg,f,c
  7267  000806  D7FE               	bra	u7147
  7268  000808  2FC4               	decfsz	??_UI& (0+255),f,b
  7269  00080A  D7FC               	bra	u7147
  7270  00080C  F000               	nop	
  7271                           
  7272                           ;UI.c: 198: lcdInst(0b10000000);;
  7273  00080E  0E80               	movlw	128
  7274  000810  ECA5  F022         	call	_lcdInst
  7275                           
  7276                           ;UI.c: 199: printf("-- TOTAL CANS --");
  7277  000814  0E86               	movlw	low STR_28
  7278  000816  0100               	movlb	0	; () banked
  7279  000818  6F8E               	movwf	printf@f& (0+255),b
  7280  00081A  0EFD               	movlw	high STR_28
  7281  00081C  0100               	movlb	0	; () banked
  7282  00081E  6F8F               	movwf	(printf@f+1)& (0+255),b
  7283  000820  EC9C  F008         	call	_printf	;wreg free
  7284                           
  7285                           ;UI.c: 200: lcdInst(0b11000000);;
  7286  000824  0EC0               	movlw	192
  7287  000826  ECA5  F022         	call	_lcdInst
  7288                           
  7289                           ;UI.c: 201: printf("%d", log_count_total);
  7290  00082A  0E7F               	movlw	low (STR_27+16)
  7291  00082C  0100               	movlb	0	; () banked
  7292  00082E  6F8E               	movwf	printf@f& (0+255),b
  7293  000830  0EFB               	movlw	high (STR_27+16)
  7294  000832  0100               	movlb	0	; () banked
  7295  000834  6F8F               	movwf	(printf@f+1)& (0+255),b
  7296  000836  C0F2  F090         	movff	_log_count_total,?_printf+2
  7297  00083A  C0F3  F091         	movff	_log_count_total+1,?_printf+3
  7298  00083E  EC9C  F008         	call	_printf	;wreg free
  7299                           
  7300                           ;UI.c: 203: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7301  000842  0E00               	movlw	0
  7302  000844  0100               	movlb	0	; () banked
  7303  000846  6FD4               	movwf	UI@i_446& (0+255),b
  7304  000848                     l7492:
  7305                           
  7306                           ; BSR set to: 0
  7307  000848  0E63               	movlw	99
  7308  00084A  0100               	movlb	0	; () banked
  7309  00084C  65D4               	cpfsgt	UI@i_446& (0+255),b
  7310  00084E  D001               	goto	l7496
  7311  000850  D00C               	goto	l7500
  7312  000852                     l7496:
  7313                           
  7314                           ; BSR set to: 0
  7315  000852  0E68               	movlw	104
  7316  000854  0100               	movlb	0	; () banked
  7317  000856  6FC4               	movwf	??_UI& (0+255),b
  7318  000858  0EE4               	movlw	228
  7319  00085A                     u7157:
  7320  00085A  2EE8               	decfsz	wreg,f,c
  7321  00085C  D7FE               	bra	u7157
  7322  00085E  2FC4               	decfsz	??_UI& (0+255),f,b
  7323  000860  D7FC               	bra	u7157
  7324  000862  F000               	nop	
  7325  000864  0100               	movlb	0	; () banked
  7326  000866  2BD4               	incf	UI@i_446& (0+255),f,b
  7327  000868  D7EF               	goto	l7492
  7328  00086A                     l7500:
  7329                           
  7330                           ; BSR set to: 0
  7331  00086A  0100               	movlb	0	; () banked
  7332  00086C  51F6               	movf	_logstate& (0+255),w,b
  7333  00086E  0100               	movlb	0	; () banked
  7334  000870  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7335  000872  B4D8               	btfsc	status,2,c
  7336  000874  0012               	return	
  7337                           
  7338                           ; BSR set to: 0
  7339                           ;UI.c: 204: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};if
      +                          (!logstate){break;}
  7340                           
  7341                           ; BSR set to: 0
  7342                           
  7343                           ; BSR set to: 0
  7344  000876  0E00               	movlw	0
  7345  000878  0100               	movlb	0	; () banked
  7346  00087A  6FD5               	movwf	UI@i_447& (0+255),b
  7347  00087C                     l7506:
  7348                           
  7349                           ; BSR set to: 0
  7350  00087C  0E63               	movlw	99
  7351  00087E  0100               	movlb	0	; () banked
  7352  000880  65D5               	cpfsgt	UI@i_447& (0+255),b
  7353  000882  D001               	goto	l7510
  7354  000884  D00C               	goto	l7514
  7355  000886                     l7510:
  7356                           
  7357                           ; BSR set to: 0
  7358  000886  0E68               	movlw	104
  7359  000888  0100               	movlb	0	; () banked
  7360  00088A  6FC4               	movwf	??_UI& (0+255),b
  7361  00088C  0EE4               	movlw	228
  7362  00088E                     u7167:
  7363  00088E  2EE8               	decfsz	wreg,f,c
  7364  000890  D7FE               	bra	u7167
  7365  000892  2FC4               	decfsz	??_UI& (0+255),f,b
  7366  000894  D7FC               	bra	u7167
  7367  000896  F000               	nop	
  7368  000898  0100               	movlb	0	; () banked
  7369  00089A  2BD5               	incf	UI@i_447& (0+255),f,b
  7370  00089C  D7EF               	goto	l7506
  7371  00089E                     l7514:
  7372                           
  7373                           ; BSR set to: 0
  7374  00089E  0100               	movlb	0	; () banked
  7375  0008A0  51F6               	movf	_logstate& (0+255),w,b
  7376  0008A2  0100               	movlb	0	; () banked
  7377  0008A4  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7378  0008A6  B4D8               	btfsc	status,2,c
  7379  0008A8  0012               	return	
  7380  0008AA                     l7518:
  7381  0008AA  0100               	movlb	0	; () banked
  7382  0008AC  51F6               	movf	_logstate& (0+255),w,b
  7383  0008AE  0100               	movlb	0	; () banked
  7384  0008B0  11F7               	iorwf	(_logstate+1)& (0+255),w,b
  7385  0008B2  B4D8               	btfsc	status,2,c
  7386  0008B4  0012               	return	
  7387  0008B6  D44A               	goto	l7214
  7388  0008B8                     __end_of_UI:
  7389                           	opt stack 0
  7390                           tblptru	equ	0xFF8
  7391                           tblptrh	equ	0xFF7
  7392                           tblptrl	equ	0xFF6
  7393                           tablat	equ	0xFF5
  7394                           prodh	equ	0xFF4
  7395                           prodl	equ	0xFF3
  7396                           intcon	equ	0xFF2
  7397                           intcon2	equ	0xFF1
  7398                           intcon3	equ	0xFF0
  7399                           postinc0	equ	0xFEE
  7400                           wreg	equ	0xFE8
  7401                           postdec1	equ	0xFE5
  7402                           fsr1l	equ	0xFE1
  7403                           indf2	equ	0xFDF
  7404                           postinc2	equ	0xFDE
  7405                           postdec2	equ	0xFDD
  7406                           fsr2h	equ	0xFDA
  7407                           fsr2l	equ	0xFD9
  7408                           status	equ	0xFD8
  7409                           
  7410 ;; *************** function _printRTC *****************
  7411 ;; Defined at:
  7412 ;;		line 63 in file "RTC.c"
  7413 ;; Parameters:    Size  Location     Type
  7414 ;;		None
  7415 ;; Auto vars:     Size  Location     Type
  7416 ;;  i               2   66[BANK0 ] int 
  7417 ;;  INT_time       14   46[BANK0 ] int [7]
  7418 ;;  month           4   62[BANK0 ] unsigned char [4]
  7419 ;;  RTC_month       2   60[BANK0 ] int 
  7420 ;; Return value:  Size  Location     Type
  7421 ;;                  1    wreg      void 
  7422 ;; Registers used:
  7423 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7424 ;; Tracked objects:
  7425 ;;		On entry : 0/0
  7426 ;;		On exit  : 0/0
  7427 ;;		Unchanged: 0/0
  7428 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7429 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7430 ;;      Locals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7431 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7432 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7433 ;;Total ram usage:       25 bytes
  7434 ;; Hardware stack levels used:    1
  7435 ;; Hardware stack levels required when called:   10
  7436 ;; This function calls:
  7437 ;;		_getRTC
  7438 ;;		_lcdInst
  7439 ;;		_printf
  7440 ;;		_strcpy
  7441 ;; This function is called by:
  7442 ;;		_UI
  7443 ;;		_change_state_to_menu_start
  7444 ;; This function uses a non-reentrant model
  7445 ;;
  7446                           
  7447                           	psect	text22
  7448  001BCE                     __ptext22:
  7449                           	opt stack 0
  7450  001BCE                     _printRTC:
  7451                           	opt stack 18
  7452                           
  7453                           ;RTC.c: 64: getRTC();
  7454                           
  7455                           ; BSR set to: 0
  7456                           ;incstack = 0
  7457  001BCE  EC3E  F01C         	call	_getRTC	;wreg free
  7458                           
  7459                           ;RTC.c: 65: char month[] = "MMM";
  7460  001BD2  C131  F0BE         	movff	printRTC@F3213,printRTC@month
  7461  001BD6  C132  F0BF         	movff	printRTC@F3213+1,printRTC@month+1
  7462  001BDA  C133  F0C0         	movff	printRTC@F3213+2,printRTC@month+2
  7463  001BDE  C134  F0C1         	movff	printRTC@F3213+3,printRTC@month+3
  7464                           
  7465                           ;RTC.c: 66: int INT_time[7];
  7466                           ;RTC.c: 67: for(int i = 0; i < 7; i++){
  7467  001BE2  0E00               	movlw	0
  7468  001BE4  0100               	movlb	0	; () banked
  7469  001BE6  6FC3               	movwf	(printRTC@i+1)& (0+255),b
  7470  001BE8  0E00               	movlw	0
  7471  001BEA  6FC2               	movwf	printRTC@i& (0+255),b
  7472                           
  7473                           ; BSR set to: 0
  7474  001BEC  0100               	movlb	0	; () banked
  7475  001BEE  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
  7476  001BF0  D008               	goto	l5706
  7477  001BF2  0100               	movlb	0	; () banked
  7478  001BF4  51C3               	movf	(printRTC@i+1)& (0+255),w,b
  7479  001BF6  E146               	bnz	l593
  7480  001BF8  0E07               	movlw	7
  7481  001BFA  0100               	movlb	0	; () banked
  7482  001BFC  5DC2               	subwf	printRTC@i& (0+255),w,b
  7483  001BFE  B0D8               	btfsc	status,0,c
  7484  001C00  D041               	goto	l593
  7485  001C02                     l5706:
  7486                           
  7487                           ; BSR set to: 0
  7488                           ;RTC.c: 68: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  7489  001C02  0E24               	movlw	low _time
  7490  001C04  0100               	movlb	0	; () banked
  7491  001C06  25C2               	addwf	printRTC@i& (0+255),w,b
  7492  001C08  6ED9               	movwf	fsr2l,c
  7493  001C0A  0E01               	movlw	high _time
  7494  001C0C  0100               	movlb	0	; () banked
  7495  001C0E  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
  7496  001C10  6EDA               	movwf	fsr2h,c
  7497  001C12  50DF               	movf	indf2,w,c
  7498  001C14  0100               	movlb	0	; () banked
  7499  001C16  6FAB               	movwf	??_printRTC& (0+255),b
  7500  001C18  0100               	movlb	0	; () banked
  7501  001C1A  3BAB               	swapf	??_printRTC& (0+255),f,b
  7502  001C1C  0E0F               	movlw	15
  7503  001C1E  17AB               	andwf	??_printRTC& (0+255),f,b
  7504  001C20  0E0F               	movlw	15
  7505  001C22  0100               	movlb	0	; () banked
  7506  001C24  17AB               	andwf	??_printRTC& (0+255),f,b
  7507  001C26  0100               	movlb	0	; () banked
  7508  001C28  51AB               	movf	??_printRTC& (0+255),w,b
  7509  001C2A  0D0A               	mullw	10
  7510  001C2C  0E24               	movlw	low _time
  7511  001C2E  0100               	movlb	0	; () banked
  7512  001C30  25C2               	addwf	printRTC@i& (0+255),w,b
  7513  001C32  6ED9               	movwf	fsr2l,c
  7514  001C34  0E01               	movlw	high _time
  7515  001C36  0100               	movlb	0	; () banked
  7516  001C38  21C3               	addwfc	(printRTC@i+1)& (0+255),w,b
  7517  001C3A  6EDA               	movwf	fsr2h,c
  7518  001C3C  50DF               	movf	indf2,w,c
  7519  001C3E  0B0F               	andlw	15
  7520  001C40  0100               	movlb	0	; () banked
  7521  001C42  6FAC               	movwf	(??_printRTC+1)& (0+255),b
  7522  001C44  6BAD               	clrf	(??_printRTC+2)& (0+255),b
  7523  001C46  50F3               	movf	prodl,w,c
  7524  001C48  0100               	movlb	0	; () banked
  7525  001C4A  27AC               	addwf	(??_printRTC+1)& (0+255),f,b
  7526  001C4C  50F4               	movf	prodh,w,c
  7527  001C4E  0100               	movlb	0	; () banked
  7528  001C50  23AD               	addwfc	(??_printRTC+2)& (0+255),f,b
  7529  001C52  90D8               	bcf	status,0,c
  7530  001C54  0100               	movlb	0	; () banked
  7531  001C56  35C2               	rlcf	printRTC@i& (0+255),w,b
  7532  001C58  6ED9               	movwf	fsr2l,c
  7533  001C5A  0100               	movlb	0	; () banked
  7534  001C5C  35C3               	rlcf	(printRTC@i+1)& (0+255),w,b
  7535  001C5E  6EDA               	movwf	fsr2h,c
  7536  001C60  0EAE               	movlw	low printRTC@INT_time
  7537  001C62  26D9               	addwf	fsr2l,f,c
  7538  001C64  0E00               	movlw	high printRTC@INT_time
  7539  001C66  22DA               	addwfc	fsr2h,f,c
  7540  001C68  C0AC  FFDE         	movff	??_printRTC+1,postinc2
  7541  001C6C  C0AD  FFDD         	movff	??_printRTC+2,postdec2
  7542                           
  7543                           ; BSR set to: 0
  7544  001C70  0100               	movlb	0	; () banked
  7545  001C72  4BC2               	infsnz	printRTC@i& (0+255),f,b
  7546  001C74  2BC3               	incf	(printRTC@i+1)& (0+255),f,b
  7547                           
  7548                           ; BSR set to: 0
  7549  001C76  0100               	movlb	0	; () banked
  7550  001C78  BFC3               	btfsc	(printRTC@i+1)& (0+255),7,b
  7551  001C7A  D7C3               	goto	l5706
  7552  001C7C  0100               	movlb	0	; () banked
  7553  001C7E  51C3               	movf	(printRTC@i+1)& (0+255),w,b
  7554  001C80  E101               	bnz	u4370
  7555  001C82  D7BA               	goto	L6
  7556  001C84                     u4370:
  7557  001C84                     l593:
  7558                           
  7559                           ; BSR set to: 0
  7560                           ;RTC.c: 69: }
  7561                           ;RTC.c: 70: int RTC_month = INT_time[5];
  7562  001C84  C0B8  F0BC         	movff	printRTC@INT_time+10,printRTC@RTC_month
  7563  001C88  C0B9  F0BD         	movff	printRTC@INT_time+11,printRTC@RTC_month+1
  7564                           
  7565                           ;RTC.c: 71: switch(RTC_month){
  7566  001C8C  D0B4               	goto	l5738
  7567  001C8E                     l5712:
  7568                           
  7569                           ; BSR set to: 0
  7570                           ;RTC.c: 73: strcpy(month, "JAN");
  7571  001C8E  0EBE               	movlw	low printRTC@month
  7572  001C90  0100               	movlb	0	; () banked
  7573  001C92  6F80               	movwf	strcpy@to& (0+255),b
  7574  001C94  0E00               	movlw	high printRTC@month
  7575  001C96  0100               	movlb	0	; () banked
  7576  001C98  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7577  001C9A  0EDA               	movlw	low STR_8
  7578  001C9C  0100               	movlb	0	; () banked
  7579  001C9E  6F82               	movwf	strcpy@from& (0+255),b
  7580  001CA0  0EFF               	movlw	high STR_8
  7581  001CA2  0100               	movlb	0	; () banked
  7582  001CA4  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7583  001CA6  EC2F  F020         	call	_strcpy	;wreg free
  7584                           
  7585                           ;RTC.c: 74: break;
  7586  001CAA  D0D4               	goto	l5740
  7587  001CAC                     l5714:
  7588                           
  7589                           ;RTC.c: 76: strcpy(month, "FEB");
  7590  001CAC  0EBE               	movlw	low printRTC@month
  7591  001CAE  0100               	movlb	0	; () banked
  7592  001CB0  6F80               	movwf	strcpy@to& (0+255),b
  7593  001CB2  0E00               	movlw	high printRTC@month
  7594  001CB4  0100               	movlb	0	; () banked
  7595  001CB6  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7596  001CB8  0ECA               	movlw	low STR_9
  7597  001CBA  0100               	movlb	0	; () banked
  7598  001CBC  6F82               	movwf	strcpy@from& (0+255),b
  7599  001CBE  0EFF               	movlw	high STR_9
  7600  001CC0  0100               	movlb	0	; () banked
  7601  001CC2  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7602  001CC4  EC2F  F020         	call	_strcpy	;wreg free
  7603                           
  7604                           ;RTC.c: 77: break;
  7605  001CC8  D0C5               	goto	l5740
  7606  001CCA                     l5716:
  7607                           
  7608                           ;RTC.c: 79: strcpy(month, "MAR");
  7609  001CCA  0EBE               	movlw	low printRTC@month
  7610  001CCC  0100               	movlb	0	; () banked
  7611  001CCE  6F80               	movwf	strcpy@to& (0+255),b
  7612  001CD0  0E00               	movlw	high printRTC@month
  7613  001CD2  0100               	movlb	0	; () banked
  7614  001CD4  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7615  001CD6  0EE6               	movlw	low STR_10
  7616  001CD8  0100               	movlb	0	; () banked
  7617  001CDA  6F82               	movwf	strcpy@from& (0+255),b
  7618  001CDC  0EFF               	movlw	high STR_10
  7619  001CDE  0100               	movlb	0	; () banked
  7620  001CE0  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7621  001CE2  EC2F  F020         	call	_strcpy	;wreg free
  7622                           
  7623                           ;RTC.c: 80: break;
  7624  001CE6  D0B6               	goto	l5740
  7625  001CE8                     l5718:
  7626                           
  7627                           ;RTC.c: 82: strcpy(month, "APR");
  7628  001CE8  0EBE               	movlw	low printRTC@month
  7629  001CEA  0100               	movlb	0	; () banked
  7630  001CEC  6F80               	movwf	strcpy@to& (0+255),b
  7631  001CEE  0E00               	movlw	high printRTC@month
  7632  001CF0  0100               	movlb	0	; () banked
  7633  001CF2  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7634  001CF4  0EEA               	movlw	low STR_11
  7635  001CF6  0100               	movlb	0	; () banked
  7636  001CF8  6F82               	movwf	strcpy@from& (0+255),b
  7637  001CFA  0EFF               	movlw	high STR_11
  7638  001CFC  0100               	movlb	0	; () banked
  7639  001CFE  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7640  001D00  EC2F  F020         	call	_strcpy	;wreg free
  7641                           
  7642                           ;RTC.c: 83: break;
  7643  001D04  D0A7               	goto	l5740
  7644  001D06                     l5720:
  7645                           
  7646                           ;RTC.c: 85: strcpy(month, "MAY");
  7647  001D06  0EBE               	movlw	low printRTC@month
  7648  001D08  0100               	movlb	0	; () banked
  7649  001D0A  6F80               	movwf	strcpy@to& (0+255),b
  7650  001D0C  0E00               	movlw	high printRTC@month
  7651  001D0E  0100               	movlb	0	; () banked
  7652  001D10  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7653  001D12  0EFA               	movlw	low STR_12
  7654  001D14  0100               	movlb	0	; () banked
  7655  001D16  6F82               	movwf	strcpy@from& (0+255),b
  7656  001D18  0EFF               	movlw	high STR_12
  7657  001D1A  0100               	movlb	0	; () banked
  7658  001D1C  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7659  001D1E  EC2F  F020         	call	_strcpy	;wreg free
  7660                           
  7661                           ;RTC.c: 86: break;
  7662  001D22  D098               	goto	l5740
  7663  001D24                     l5722:
  7664                           
  7665                           ;RTC.c: 88: strcpy(month, "JUN");
  7666  001D24  0EBE               	movlw	low printRTC@month
  7667  001D26  0100               	movlb	0	; () banked
  7668  001D28  6F80               	movwf	strcpy@to& (0+255),b
  7669  001D2A  0E00               	movlw	high printRTC@month
  7670  001D2C  0100               	movlb	0	; () banked
  7671  001D2E  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7672  001D30  0EDE               	movlw	low STR_13
  7673  001D32  0100               	movlb	0	; () banked
  7674  001D34  6F82               	movwf	strcpy@from& (0+255),b
  7675  001D36  0EFF               	movlw	high STR_13
  7676  001D38  0100               	movlb	0	; () banked
  7677  001D3A  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7678  001D3C  EC2F  F020         	call	_strcpy	;wreg free
  7679                           
  7680                           ;RTC.c: 89: break;
  7681  001D40  D089               	goto	l5740
  7682  001D42                     l5724:
  7683                           
  7684                           ;RTC.c: 91: strcpy(month, "JUL");
  7685  001D42  0EBE               	movlw	low printRTC@month
  7686  001D44  0100               	movlb	0	; () banked
  7687  001D46  6F80               	movwf	strcpy@to& (0+255),b
  7688  001D48  0E00               	movlw	high printRTC@month
  7689  001D4A  0100               	movlb	0	; () banked
  7690  001D4C  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7691  001D4E  0ED6               	movlw	low STR_14
  7692  001D50  0100               	movlb	0	; () banked
  7693  001D52  6F82               	movwf	strcpy@from& (0+255),b
  7694  001D54  0EFF               	movlw	high STR_14
  7695  001D56  0100               	movlb	0	; () banked
  7696  001D58  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7697  001D5A  EC2F  F020         	call	_strcpy	;wreg free
  7698                           
  7699                           ;RTC.c: 92: break;
  7700  001D5E  D07A               	goto	l5740
  7701  001D60                     l5726:
  7702                           
  7703                           ;RTC.c: 94: strcpy(month, "AUG");
  7704  001D60  0EBE               	movlw	low printRTC@month
  7705  001D62  0100               	movlb	0	; () banked
  7706  001D64  6F80               	movwf	strcpy@to& (0+255),b
  7707  001D66  0E00               	movlw	high printRTC@month
  7708  001D68  0100               	movlb	0	; () banked
  7709  001D6A  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7710  001D6C  0ED2               	movlw	low STR_15
  7711  001D6E  0100               	movlb	0	; () banked
  7712  001D70  6F82               	movwf	strcpy@from& (0+255),b
  7713  001D72  0EFF               	movlw	high STR_15
  7714  001D74  0100               	movlb	0	; () banked
  7715  001D76  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7716  001D78  EC2F  F020         	call	_strcpy	;wreg free
  7717                           
  7718                           ;RTC.c: 95: break;
  7719  001D7C  D06B               	goto	l5740
  7720  001D7E                     l5728:
  7721                           
  7722                           ;RTC.c: 97: strcpy(month, "SEP");
  7723  001D7E  0EBE               	movlw	low printRTC@month
  7724  001D80  0100               	movlb	0	; () banked
  7725  001D82  6F80               	movwf	strcpy@to& (0+255),b
  7726  001D84  0E00               	movlw	high printRTC@month
  7727  001D86  0100               	movlb	0	; () banked
  7728  001D88  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7729  001D8A  0EE2               	movlw	low STR_16
  7730  001D8C  0100               	movlb	0	; () banked
  7731  001D8E  6F82               	movwf	strcpy@from& (0+255),b
  7732  001D90  0EFF               	movlw	high STR_16
  7733  001D92  0100               	movlb	0	; () banked
  7734  001D94  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7735  001D96  EC2F  F020         	call	_strcpy	;wreg free
  7736                           
  7737                           ;RTC.c: 98: break;
  7738  001D9A  D05C               	goto	l5740
  7739  001D9C                     l5730:
  7740                           
  7741                           ;RTC.c: 100: strcpy(month, "OCT");
  7742  001D9C  0EBE               	movlw	low printRTC@month
  7743  001D9E  0100               	movlb	0	; () banked
  7744  001DA0  6F80               	movwf	strcpy@to& (0+255),b
  7745  001DA2  0E00               	movlw	high printRTC@month
  7746  001DA4  0100               	movlb	0	; () banked
  7747  001DA6  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7748  001DA8  0EF2               	movlw	low STR_17
  7749  001DAA  0100               	movlb	0	; () banked
  7750  001DAC  6F82               	movwf	strcpy@from& (0+255),b
  7751  001DAE  0EFF               	movlw	high STR_17
  7752  001DB0  0100               	movlb	0	; () banked
  7753  001DB2  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7754  001DB4  EC2F  F020         	call	_strcpy	;wreg free
  7755                           
  7756                           ;RTC.c: 101: break;
  7757  001DB8  D04D               	goto	l5740
  7758  001DBA                     l5732:
  7759                           
  7760                           ;RTC.c: 103: strcpy(month, "NOV");
  7761  001DBA  0EBE               	movlw	low printRTC@month
  7762  001DBC  0100               	movlb	0	; () banked
  7763  001DBE  6F80               	movwf	strcpy@to& (0+255),b
  7764  001DC0  0E00               	movlw	high printRTC@month
  7765  001DC2  0100               	movlb	0	; () banked
  7766  001DC4  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7767  001DC6  0EF6               	movlw	low STR_18
  7768  001DC8  0100               	movlb	0	; () banked
  7769  001DCA  6F82               	movwf	strcpy@from& (0+255),b
  7770  001DCC  0EFF               	movlw	high STR_18
  7771  001DCE  0100               	movlb	0	; () banked
  7772  001DD0  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7773  001DD2  EC2F  F020         	call	_strcpy	;wreg free
  7774                           
  7775                           ;RTC.c: 104: break;
  7776  001DD6  D03E               	goto	l5740
  7777  001DD8                     l5734:
  7778                           
  7779                           ;RTC.c: 106: strcpy(month, "DEC");
  7780  001DD8  0EBE               	movlw	low printRTC@month
  7781  001DDA  0100               	movlb	0	; () banked
  7782  001DDC  6F80               	movwf	strcpy@to& (0+255),b
  7783  001DDE  0E00               	movlw	high printRTC@month
  7784  001DE0  0100               	movlb	0	; () banked
  7785  001DE2  6F81               	movwf	(strcpy@to+1)& (0+255),b
  7786  001DE4  0ECE               	movlw	low STR_19
  7787  001DE6  0100               	movlb	0	; () banked
  7788  001DE8  6F82               	movwf	strcpy@from& (0+255),b
  7789  001DEA  0EFF               	movlw	high STR_19
  7790  001DEC  0100               	movlb	0	; () banked
  7791  001DEE  6F83               	movwf	(strcpy@from+1)& (0+255),b
  7792  001DF0  EC2F  F020         	call	_strcpy	;wreg free
  7793                           
  7794                           ;RTC.c: 108: }
  7795                           
  7796                           ;RTC.c: 107: break;
  7797  001DF4  D02F               	goto	l5740
  7798  001DF6                     l5738:
  7799  001DF6  C0BC  F0AB         	movff	printRTC@RTC_month,??_printRTC
  7800  001DFA  C0BD  F0AC         	movff	printRTC@RTC_month+1,??_printRTC+1
  7801                           
  7802                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7803                           ; Switch size 1, requested type "space"
  7804                           ; Number of cases is 1, Range of values is 0 to 0
  7805                           ; switch strategies available:
  7806                           ; Name         Instructions Cycles
  7807                           ; simple_byte            4     3 (average)
  7808                           ;	Chosen strategy is simple_byte
  7809  001DFE  0100               	movlb	0	; () banked
  7810  001E00  51AC               	movf	(??_printRTC+1)& (0+255),w,b
  7811  001E02  0A00               	xorlw	0	; case 0
  7812  001E04  A4D8               	btfss	status,2,c
  7813  001E06  D026               	goto	l5740
  7814                           
  7815                           ; BSR set to: 0
  7816                           ; Switch size 1, requested type "space"
  7817                           ; Number of cases is 12, Range of values is 1 to 12
  7818                           ; switch strategies available:
  7819                           ; Name         Instructions Cycles
  7820                           ; simple_byte           37    19 (average)
  7821                           ;	Chosen strategy is simple_byte
  7822  001E08  0100               	movlb	0	; () banked
  7823  001E0A  51AB               	movf	??_printRTC& (0+255),w,b
  7824  001E0C  0A01               	xorlw	1	; case 1
  7825  001E0E  B4D8               	btfsc	status,2,c
  7826  001E10  D73E               	goto	l5712
  7827  001E12  0A03               	xorlw	3	; case 2
  7828  001E14  B4D8               	btfsc	status,2,c
  7829  001E16  D74A               	goto	l5714
  7830  001E18  0A01               	xorlw	1	; case 3
  7831  001E1A  B4D8               	btfsc	status,2,c
  7832  001E1C  D756               	goto	l5716
  7833  001E1E  0A07               	xorlw	7	; case 4
  7834  001E20  B4D8               	btfsc	status,2,c
  7835  001E22  D762               	goto	l5718
  7836  001E24  0A01               	xorlw	1	; case 5
  7837  001E26  B4D8               	btfsc	status,2,c
  7838  001E28  D76E               	goto	l5720
  7839  001E2A  0A03               	xorlw	3	; case 6
  7840  001E2C  B4D8               	btfsc	status,2,c
  7841  001E2E  D77A               	goto	l5722
  7842  001E30  0A01               	xorlw	1	; case 7
  7843  001E32  B4D8               	btfsc	status,2,c
  7844  001E34  D786               	goto	l5724
  7845  001E36  0A0F               	xorlw	15	; case 8
  7846  001E38  B4D8               	btfsc	status,2,c
  7847  001E3A  D792               	goto	l5726
  7848  001E3C  0A01               	xorlw	1	; case 9
  7849  001E3E  B4D8               	btfsc	status,2,c
  7850  001E40  D79E               	goto	l5728
  7851  001E42  0A03               	xorlw	3	; case 10
  7852  001E44  B4D8               	btfsc	status,2,c
  7853  001E46  D7AA               	goto	l5730
  7854  001E48  0A01               	xorlw	1	; case 11
  7855  001E4A  B4D8               	btfsc	status,2,c
  7856  001E4C  D7B6               	goto	l5732
  7857  001E4E  0A07               	xorlw	7	; case 12
  7858  001E50  B4D8               	btfsc	status,2,c
  7859  001E52  D7C2               	goto	l5734
  7860  001E54                     l5740:
  7861                           
  7862                           ;RTC.c: 109: lcdInst(0b10000000);;
  7863  001E54  0E80               	movlw	128
  7864  001E56  ECA5  F022         	call	_lcdInst
  7865                           
  7866                           ;RTC.c: 110: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
  7867  001E5A  0E42               	movlw	low STR_21
  7868  001E5C  0100               	movlb	0	; () banked
  7869  001E5E  6F8E               	movwf	printf@f& (0+255),b
  7870  001E60  0EFB               	movlw	high STR_21
  7871  001E62  0100               	movlb	0	; () banked
  7872  001E64  6F8F               	movwf	(printf@f+1)& (0+255),b
  7873  001E66  C0B6  F090         	movff	printRTC@INT_time+8,?_printf+2
  7874  001E6A  C0B7  F091         	movff	printRTC@INT_time+9,?_printf+3
  7875  001E6E  0EBE               	movlw	low printRTC@month
  7876  001E70  0100               	movlb	0	; () banked
  7877  001E72  6F92               	movwf	(?_printf+4)& (0+255),b
  7878  001E74  0E00               	movlw	high printRTC@month
  7879  001E76  0100               	movlb	0	; () banked
  7880  001E78  6F93               	movwf	(?_printf+5)& (0+255),b
  7881  001E7A  C0B2  F094         	movff	printRTC@INT_time+4,?_printf+6
  7882  001E7E  C0B3  F095         	movff	printRTC@INT_time+5,?_printf+7
  7883  001E82  C0B0  F096         	movff	printRTC@INT_time+2,?_printf+8
  7884  001E86  C0B1  F097         	movff	printRTC@INT_time+3,?_printf+9
  7885  001E8A  C0AE  F098         	movff	printRTC@INT_time,?_printf+10
  7886  001E8E  C0AF  F099         	movff	printRTC@INT_time+1,?_printf+11
  7887  001E92  EC9C  F008         	call	_printf	;wreg free
  7888  001E96  0012               	return		;funcret
  7889  001E98                     __end_of_printRTC:
  7890                           	opt stack 0
  7891                           tblptru	equ	0xFF8
  7892                           tblptrh	equ	0xFF7
  7893                           tblptrl	equ	0xFF6
  7894                           tablat	equ	0xFF5
  7895                           prodh	equ	0xFF4
  7896                           prodl	equ	0xFF3
  7897                           intcon	equ	0xFF2
  7898                           intcon2	equ	0xFF1
  7899                           intcon3	equ	0xFF0
  7900                           postinc0	equ	0xFEE
  7901                           wreg	equ	0xFE8
  7902                           postdec1	equ	0xFE5
  7903                           fsr1l	equ	0xFE1
  7904                           indf2	equ	0xFDF
  7905                           postinc2	equ	0xFDE
  7906                           postdec2	equ	0xFDD
  7907                           fsr2h	equ	0xFDA
  7908                           fsr2l	equ	0xFD9
  7909                           status	equ	0xFD8
  7910                           
  7911 ;; *************** function _strcpy *****************
  7912 ;; Defined at:
  7913 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
  7914 ;; Parameters:    Size  Location     Type
  7915 ;;  to              2    0[BANK0 ] PTR unsigned char 
  7916 ;;		 -> printRTC@month(4), UI@month(4), 
  7917 ;;  from            2    2[BANK0 ] PTR const unsigned char 
  7918 ;;		 -> STR_62(4), STR_61(4), STR_60(4), STR_59(4), 
  7919 ;;		 -> STR_58(4), STR_57(4), STR_56(4), STR_55(4), 
  7920 ;;		 -> STR_54(4), STR_53(4), STR_52(4), STR_51(4), 
  7921 ;;		 -> STR_20(4), STR_19(4), STR_18(4), STR_17(4), 
  7922 ;;		 -> STR_16(4), STR_15(4), STR_14(4), STR_13(4), 
  7923 ;;		 -> STR_12(4), STR_11(4), STR_10(4), STR_9(4), 
  7924 ;;		 -> STR_8(4), 
  7925 ;; Auto vars:     Size  Location     Type
  7926 ;;  cp              2    4[BANK0 ] PTR unsigned char 
  7927 ;;		 -> printRTC@month(4), UI@month(4), 
  7928 ;; Return value:  Size  Location     Type
  7929 ;;                  2    0[BANK0 ] PTR unsigned char 
  7930 ;; Registers used:
  7931 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  7932 ;; Tracked objects:
  7933 ;;		On entry : 0/0
  7934 ;;		On exit  : 0/0
  7935 ;;		Unchanged: 0/0
  7936 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7937 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7938 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7939 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7940 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7941 ;;Total ram usage:        6 bytes
  7942 ;; Hardware stack levels used:    1
  7943 ;; Hardware stack levels required when called:    7
  7944 ;; This function calls:
  7945 ;;		Nothing
  7946 ;; This function is called by:
  7947 ;;		_UI
  7948 ;;		_printRTC
  7949 ;; This function uses a non-reentrant model
  7950 ;;
  7951                           
  7952                           	psect	text23
  7953  00405E                     __ptext23:
  7954                           	opt stack 0
  7955  00405E                     _strcpy:
  7956                           	opt stack 20
  7957                           
  7958                           ;incstack = 0
  7959  00405E  C080  F084         	movff	strcpy@to,strcpy@cp
  7960  004062  C081  F085         	movff	strcpy@to+1,strcpy@cp+1
  7961  004066  D006               	goto	l5444
  7962  004068                     l5442:
  7963  004068  0100               	movlb	0	; () banked
  7964  00406A  4B84               	infsnz	strcpy@cp& (0+255),f,b
  7965  00406C  2B85               	incf	(strcpy@cp+1)& (0+255),f,b
  7966  00406E  0100               	movlb	0	; () banked
  7967  004070  4B82               	infsnz	strcpy@from& (0+255),f,b
  7968  004072  2B83               	incf	(strcpy@from+1)& (0+255),f,b
  7969  004074                     l5444:
  7970  004074  C082  FFF6         	movff	strcpy@from,tblptrl
  7971  004078  C083  FFF7         	movff	strcpy@from+1,tblptrh
  7972  00407C                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  7973  00407C  6AF8               	clrf	tblptru,c
  7974  00407E                     	endif
  7975  00407E                     	if	0	;tblptru may be non-zero
  7976  00407E                     	endif
  7977  00407E  C084  FFD9         	movff	strcpy@cp,fsr2l
  7978  004082  C085  FFDA         	movff	strcpy@cp+1,fsr2h
  7979  004086  0008               	tblrd		*
  7980  004088  CFF5 FFDF          	movff	tablat,indf2
  7981  00408C  50DF               	movf	indf2,w,c
  7982  00408E  B4D8               	btfsc	status,2,c
  7983  004090  0012               	return	
  7984  004092  D7EA               	goto	l5442
  7985  004094                     __end_of_strcpy:
  7986                           	opt stack 0
  7987                           tblptru	equ	0xFF8
  7988                           tblptrh	equ	0xFF7
  7989                           tblptrl	equ	0xFF6
  7990                           tablat	equ	0xFF5
  7991                           prodh	equ	0xFF4
  7992                           prodl	equ	0xFF3
  7993                           intcon	equ	0xFF2
  7994                           intcon2	equ	0xFF1
  7995                           intcon3	equ	0xFF0
  7996                           postinc0	equ	0xFEE
  7997                           wreg	equ	0xFE8
  7998                           postdec1	equ	0xFE5
  7999                           fsr1l	equ	0xFE1
  8000                           indf2	equ	0xFDF
  8001                           postinc2	equ	0xFDE
  8002                           postdec2	equ	0xFDD
  8003                           fsr2h	equ	0xFDA
  8004                           fsr2l	equ	0xFD9
  8005                           status	equ	0xFD8
  8006                           
  8007 ;; *************** function _getRTC *****************
  8008 ;; Defined at:
  8009 ;;		line 44 in file "RTC.c"
  8010 ;; Parameters:    Size  Location     Type
  8011 ;;		None
  8012 ;; Auto vars:     Size  Location     Type
  8013 ;;  i               2    3[BANK0 ] int 
  8014 ;; Return value:  Size  Location     Type
  8015 ;;                  1    wreg      void 
  8016 ;; Registers used:
  8017 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8018 ;; Tracked objects:
  8019 ;;		On entry : 0/0
  8020 ;;		On exit  : 0/0
  8021 ;;		Unchanged: 0/0
  8022 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8023 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8024 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8025 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8026 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8027 ;;Total ram usage:        2 bytes
  8028 ;; Hardware stack levels used:    1
  8029 ;; Hardware stack levels required when called:    9
  8030 ;; This function calls:
  8031 ;;		_I2C_Master_Read
  8032 ;;		_I2C_Master_Start
  8033 ;;		_I2C_Master_Stop
  8034 ;;		_I2C_Master_Write
  8035 ;; This function is called by:
  8036 ;;		_printRTC
  8037 ;;		_initSortTimer
  8038 ;; This function uses a non-reentrant model
  8039 ;;
  8040                           
  8041                           	psect	text24
  8042  00387C                     __ptext24:
  8043                           	opt stack 0
  8044  00387C                     _getRTC:
  8045                           	opt stack 18
  8046                           
  8047                           ;RTC.c: 48: I2C_Master_Start();
  8048                           
  8049                           ;incstack = 0
  8050  00387C  ECCB  F022         	call	_I2C_Master_Start	;wreg free
  8051                           
  8052                           ;RTC.c: 49: I2C_Master_Write(0b11010000);
  8053  003880  0E00               	movlw	0
  8054  003882  0100               	movlb	0	; () banked
  8055  003884  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  8056  003886  0ED0               	movlw	208
  8057  003888  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  8058  00388A  ECB9  F022         	call	_I2C_Master_Write	;wreg free
  8059                           
  8060                           ;RTC.c: 50: I2C_Master_Write(0x00);
  8061  00388E  0E00               	movlw	0
  8062  003890  0100               	movlb	0	; () banked
  8063  003892  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  8064  003894  0E00               	movlw	0
  8065  003896  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  8066  003898  ECB9  F022         	call	_I2C_Master_Write	;wreg free
  8067                           
  8068                           ;RTC.c: 51: I2C_Master_Stop();
  8069  00389C  ECC7  F022         	call	_I2C_Master_Stop	;wreg free
  8070                           
  8071                           ;RTC.c: 54: I2C_Master_Start();
  8072  0038A0  ECCB  F022         	call	_I2C_Master_Start	;wreg free
  8073                           
  8074                           ;RTC.c: 55: I2C_Master_Write(0b11010001);
  8075  0038A4  0E00               	movlw	0
  8076  0038A6  0100               	movlb	0	; () banked
  8077  0038A8  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  8078  0038AA  0ED1               	movlw	209
  8079  0038AC  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  8080  0038AE  ECB9  F022         	call	_I2C_Master_Write	;wreg free
  8081                           
  8082                           ;RTC.c: 56: for(int i = 0; i < 6; i++){
  8083  0038B2  0E00               	movlw	0
  8084  0038B4  0100               	movlb	0	; () banked
  8085  0038B6  6F84               	movwf	(getRTC@i+1)& (0+255),b
  8086  0038B8  0E00               	movlw	0
  8087  0038BA  6F83               	movwf	getRTC@i& (0+255),b
  8088  0038BC                     l5450:
  8089                           
  8090                           ; BSR set to: 0
  8091  0038BC  0100               	movlb	0	; () banked
  8092  0038BE  BF84               	btfsc	(getRTC@i+1)& (0+255),7,b
  8093  0038C0  D008               	goto	l5454
  8094  0038C2  0100               	movlb	0	; () banked
  8095  0038C4  5184               	movf	(getRTC@i+1)& (0+255),w,b
  8096  0038C6  E115               	bnz	l5460
  8097  0038C8  0E06               	movlw	6
  8098  0038CA  0100               	movlb	0	; () banked
  8099  0038CC  5D83               	subwf	getRTC@i& (0+255),w,b
  8100  0038CE  B0D8               	btfsc	status,0,c
  8101  0038D0  D010               	goto	l5460
  8102  0038D2                     l5454:
  8103                           
  8104                           ; BSR set to: 0
  8105                           ;RTC.c: 57: time[i] = I2C_Master_Read(1);
  8106  0038D2  0E24               	movlw	low _time
  8107  0038D4  0100               	movlb	0	; () banked
  8108  0038D6  2583               	addwf	getRTC@i& (0+255),w,b
  8109  0038D8  6ED9               	movwf	fsr2l,c
  8110  0038DA  0E01               	movlw	high _time
  8111  0038DC  0100               	movlb	0	; () banked
  8112  0038DE  2184               	addwfc	(getRTC@i+1)& (0+255),w,b
  8113  0038E0  6EDA               	movwf	fsr2h,c
  8114  0038E2  0E01               	movlw	1
  8115  0038E4  EC56  F021         	call	_I2C_Master_Read
  8116  0038E8  6EDF               	movwf	indf2,c
  8117  0038EA  0100               	movlb	0	; () banked
  8118  0038EC  4B83               	infsnz	getRTC@i& (0+255),f,b
  8119  0038EE  2B84               	incf	(getRTC@i+1)& (0+255),f,b
  8120  0038F0  D7E5               	goto	l5450
  8121  0038F2                     l5460:
  8122                           
  8123                           ; BSR set to: 0
  8124                           ;RTC.c: 58: }
  8125                           ;RTC.c: 59: time[6] = I2C_Master_Read(0);
  8126  0038F2  0E00               	movlw	0
  8127  0038F4  EC56  F021         	call	_I2C_Master_Read
  8128  0038F8  0101               	movlb	1	; () banked
  8129  0038FA  6F2A               	movwf	(_time+6)& (0+255),b
  8130                           
  8131                           ;RTC.c: 60: I2C_Master_Stop();
  8132  0038FC  ECC7  F022         	call	_I2C_Master_Stop	;wreg free
  8133  003900  0012               	return		;funcret
  8134  003902                     __end_of_getRTC:
  8135                           	opt stack 0
  8136                           tblptru	equ	0xFF8
  8137                           tblptrh	equ	0xFF7
  8138                           tblptrl	equ	0xFF6
  8139                           tablat	equ	0xFF5
  8140                           prodh	equ	0xFF4
  8141                           prodl	equ	0xFF3
  8142                           intcon	equ	0xFF2
  8143                           intcon2	equ	0xFF1
  8144                           intcon3	equ	0xFF0
  8145                           postinc0	equ	0xFEE
  8146                           wreg	equ	0xFE8
  8147                           postdec1	equ	0xFE5
  8148                           fsr1l	equ	0xFE1
  8149                           indf2	equ	0xFDF
  8150                           postinc2	equ	0xFDE
  8151                           postdec2	equ	0xFDD
  8152                           fsr2h	equ	0xFDA
  8153                           fsr2l	equ	0xFD9
  8154                           status	equ	0xFD8
  8155                           
  8156 ;; *************** function _I2C_Master_Write *****************
  8157 ;; Defined at:
  8158 ;;		line 49 in file "I2C.c"
  8159 ;; Parameters:    Size  Location     Type
  8160 ;;  d               2    1[BANK0 ] unsigned int 
  8161 ;; Auto vars:     Size  Location     Type
  8162 ;;		None
  8163 ;; Return value:  Size  Location     Type
  8164 ;;                  1    wreg      void 
  8165 ;; Registers used:
  8166 ;;		wreg, status,2, status,0, cstack
  8167 ;; Tracked objects:
  8168 ;;		On entry : 0/0
  8169 ;;		On exit  : 0/0
  8170 ;;		Unchanged: 0/0
  8171 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8172 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8173 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8174 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8175 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8176 ;;Total ram usage:        2 bytes
  8177 ;; Hardware stack levels used:    1
  8178 ;; Hardware stack levels required when called:    8
  8179 ;; This function calls:
  8180 ;;		_I2C_Master_Wait
  8181 ;; This function is called by:
  8182 ;;		_loadRTC
  8183 ;;		_getRTC
  8184 ;; This function uses a non-reentrant model
  8185 ;;
  8186                           
  8187                           	psect	text25
  8188  004572                     __ptext25:
  8189                           	opt stack 0
  8190  004572                     _I2C_Master_Write:
  8191                           	opt stack 18
  8192                           
  8193                           ;I2C.c: 51: I2C_Master_Wait();
  8194                           
  8195                           ;incstack = 0
  8196  004572  EC8A  F022         	call	_I2C_Master_Wait	;wreg free
  8197                           
  8198                           ;I2C.c: 52: SSPBUF = d;
  8199  004576  C081  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  8200  00457A  0012               	return		;funcret
  8201  00457C                     __end_of_I2C_Master_Write:
  8202                           	opt stack 0
  8203                           tblptru	equ	0xFF8
  8204                           tblptrh	equ	0xFF7
  8205                           tblptrl	equ	0xFF6
  8206                           tablat	equ	0xFF5
  8207                           prodh	equ	0xFF4
  8208                           prodl	equ	0xFF3
  8209                           intcon	equ	0xFF2
  8210                           intcon2	equ	0xFF1
  8211                           intcon3	equ	0xFF0
  8212                           postinc0	equ	0xFEE
  8213                           wreg	equ	0xFE8
  8214                           postdec1	equ	0xFE5
  8215                           fsr1l	equ	0xFE1
  8216                           indf2	equ	0xFDF
  8217                           postinc2	equ	0xFDE
  8218                           postdec2	equ	0xFDD
  8219                           fsr2h	equ	0xFDA
  8220                           fsr2l	equ	0xFD9
  8221                           status	equ	0xFD8
  8222                           
  8223 ;; *************** function _I2C_Master_Stop *****************
  8224 ;; Defined at:
  8225 ;;		line 43 in file "I2C.c"
  8226 ;; Parameters:    Size  Location     Type
  8227 ;;		None
  8228 ;; Auto vars:     Size  Location     Type
  8229 ;;		None
  8230 ;; Return value:  Size  Location     Type
  8231 ;;                  1    wreg      void 
  8232 ;; Registers used:
  8233 ;;		wreg, status,2, status,0, cstack
  8234 ;; Tracked objects:
  8235 ;;		On entry : 0/0
  8236 ;;		On exit  : 0/0
  8237 ;;		Unchanged: 0/0
  8238 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8239 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8240 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8241 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8242 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8243 ;;Total ram usage:        0 bytes
  8244 ;; Hardware stack levels used:    1
  8245 ;; Hardware stack levels required when called:    8
  8246 ;; This function calls:
  8247 ;;		_I2C_Master_Wait
  8248 ;; This function is called by:
  8249 ;;		_loadRTC
  8250 ;;		_getRTC
  8251 ;; This function uses a non-reentrant model
  8252 ;;
  8253                           
  8254                           	psect	text26
  8255  00458E                     __ptext26:
  8256                           	opt stack 0
  8257  00458E                     _I2C_Master_Stop:
  8258                           	opt stack 18
  8259                           
  8260                           ;I2C.c: 45: I2C_Master_Wait();
  8261                           
  8262                           ;incstack = 0
  8263  00458E  EC8A  F022         	call	_I2C_Master_Wait	;wreg free
  8264                           
  8265                           ;I2C.c: 46: PEN = 1;
  8266  004592  84C5               	bsf	4037,2,c	;volatile
  8267  004594  0012               	return		;funcret
  8268  004596                     __end_of_I2C_Master_Stop:
  8269                           	opt stack 0
  8270                           tblptru	equ	0xFF8
  8271                           tblptrh	equ	0xFF7
  8272                           tblptrl	equ	0xFF6
  8273                           tablat	equ	0xFF5
  8274                           prodh	equ	0xFF4
  8275                           prodl	equ	0xFF3
  8276                           intcon	equ	0xFF2
  8277                           intcon2	equ	0xFF1
  8278                           intcon3	equ	0xFF0
  8279                           postinc0	equ	0xFEE
  8280                           wreg	equ	0xFE8
  8281                           postdec1	equ	0xFE5
  8282                           fsr1l	equ	0xFE1
  8283                           indf2	equ	0xFDF
  8284                           postinc2	equ	0xFDE
  8285                           postdec2	equ	0xFDD
  8286                           fsr2h	equ	0xFDA
  8287                           fsr2l	equ	0xFD9
  8288                           status	equ	0xFD8
  8289                           
  8290 ;; *************** function _I2C_Master_Start *****************
  8291 ;; Defined at:
  8292 ;;		line 31 in file "I2C.c"
  8293 ;; Parameters:    Size  Location     Type
  8294 ;;		None
  8295 ;; Auto vars:     Size  Location     Type
  8296 ;;		None
  8297 ;; Return value:  Size  Location     Type
  8298 ;;                  1    wreg      void 
  8299 ;; Registers used:
  8300 ;;		wreg, status,2, status,0, cstack
  8301 ;; Tracked objects:
  8302 ;;		On entry : 0/0
  8303 ;;		On exit  : 0/0
  8304 ;;		Unchanged: 0/0
  8305 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8306 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8307 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8308 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8309 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8310 ;;Total ram usage:        0 bytes
  8311 ;; Hardware stack levels used:    1
  8312 ;; Hardware stack levels required when called:    8
  8313 ;; This function calls:
  8314 ;;		_I2C_Master_Wait
  8315 ;; This function is called by:
  8316 ;;		_loadRTC
  8317 ;;		_getRTC
  8318 ;; This function uses a non-reentrant model
  8319 ;;
  8320                           
  8321                           	psect	text27
  8322  004596                     __ptext27:
  8323                           	opt stack 0
  8324  004596                     _I2C_Master_Start:
  8325                           	opt stack 18
  8326                           
  8327                           ;I2C.c: 33: I2C_Master_Wait();
  8328                           
  8329                           ;incstack = 0
  8330  004596  EC8A  F022         	call	_I2C_Master_Wait	;wreg free
  8331                           
  8332                           ;I2C.c: 34: SEN = 1;
  8333  00459A  80C5               	bsf	4037,0,c	;volatile
  8334  00459C  0012               	return		;funcret
  8335  00459E                     __end_of_I2C_Master_Start:
  8336                           	opt stack 0
  8337                           tblptru	equ	0xFF8
  8338                           tblptrh	equ	0xFF7
  8339                           tblptrl	equ	0xFF6
  8340                           tablat	equ	0xFF5
  8341                           prodh	equ	0xFF4
  8342                           prodl	equ	0xFF3
  8343                           intcon	equ	0xFF2
  8344                           intcon2	equ	0xFF1
  8345                           intcon3	equ	0xFF0
  8346                           postinc0	equ	0xFEE
  8347                           wreg	equ	0xFE8
  8348                           postdec1	equ	0xFE5
  8349                           fsr1l	equ	0xFE1
  8350                           indf2	equ	0xFDF
  8351                           postinc2	equ	0xFDE
  8352                           postdec2	equ	0xFDD
  8353                           fsr2h	equ	0xFDA
  8354                           fsr2l	equ	0xFD9
  8355                           status	equ	0xFD8
  8356                           
  8357 ;; *************** function _I2C_Master_Read *****************
  8358 ;; Defined at:
  8359 ;;		line 55 in file "I2C.c"
  8360 ;; Parameters:    Size  Location     Type
  8361 ;;  a               1    wreg     unsigned char 
  8362 ;; Auto vars:     Size  Location     Type
  8363 ;;  a               1    1[BANK0 ] unsigned char 
  8364 ;;  temp            1    2[BANK0 ] unsigned char 
  8365 ;; Return value:  Size  Location     Type
  8366 ;;                  1    wreg      unsigned char 
  8367 ;; Registers used:
  8368 ;;		wreg, status,2, status,0, cstack
  8369 ;; Tracked objects:
  8370 ;;		On entry : 0/0
  8371 ;;		On exit  : 0/0
  8372 ;;		Unchanged: 0/0
  8373 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8374 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8375 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8376 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8377 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8378 ;;Total ram usage:        2 bytes
  8379 ;; Hardware stack levels used:    1
  8380 ;; Hardware stack levels required when called:    8
  8381 ;; This function calls:
  8382 ;;		_I2C_Master_Wait
  8383 ;; This function is called by:
  8384 ;;		_getRTC
  8385 ;; This function uses a non-reentrant model
  8386 ;;
  8387                           
  8388                           	psect	text28
  8389  0042AC                     __ptext28:
  8390                           	opt stack 0
  8391  0042AC                     _I2C_Master_Read:
  8392                           	opt stack 18
  8393                           
  8394                           ;incstack = 0
  8395                           ;I2C_Master_Read@a stored from wreg
  8396  0042AC  0100               	movlb	0	; () banked
  8397  0042AE  6F81               	movwf	I2C_Master_Read@a& (0+255),b
  8398                           
  8399                           ;I2C.c: 57: unsigned char temp;
  8400                           ;I2C.c: 58: I2C_Master_Wait();
  8401  0042B0  EC8A  F022         	call	_I2C_Master_Wait	;wreg free
  8402                           
  8403                           ;I2C.c: 59: RCEN = 1;
  8404  0042B4  86C5               	bsf	4037,3,c	;volatile
  8405                           
  8406                           ;I2C.c: 60: I2C_Master_Wait();
  8407  0042B6  EC8A  F022         	call	_I2C_Master_Wait	;wreg free
  8408                           
  8409                           ;I2C.c: 61: temp = SSPBUF;
  8410  0042BA  CFC9 F082          	movff	4041,I2C_Master_Read@temp	;volatile
  8411                           
  8412                           ;I2C.c: 62: I2C_Master_Wait();
  8413  0042BE  EC8A  F022         	call	_I2C_Master_Wait	;wreg free
  8414                           
  8415                           ;I2C.c: 63: ACKDT = (a)?0:1;
  8416  0042C2  0100               	movlb	0	; () banked
  8417  0042C4  5181               	movf	I2C_Master_Read@a& (0+255),w,b
  8418  0042C6  0100               	movlb	0	; () banked
  8419  0042C8  A4D8               	btfss	status,2,c
  8420  0042CA  D002               	goto	u3460
  8421  0042CC  8AC5               	bsf	4037,5,c	;volatile
  8422  0042CE  D001               	goto	l5144
  8423  0042D0                     u3460:
  8424  0042D0  9AC5               	bcf	4037,5,c	;volatile
  8425  0042D2                     l5144:
  8426                           
  8427                           ;I2C.c: 64: ACKEN = 1;
  8428  0042D2  88C5               	bsf	4037,4,c	;volatile
  8429                           
  8430                           ;I2C.c: 65: return temp;
  8431  0042D4  0100               	movlb	0	; () banked
  8432  0042D6  5182               	movf	I2C_Master_Read@temp& (0+255),w,b
  8433  0042D8  0012               	return	
  8434  0042DA                     __end_of_I2C_Master_Read:
  8435                           	opt stack 0
  8436                           tblptru	equ	0xFF8
  8437                           tblptrh	equ	0xFF7
  8438                           tblptrl	equ	0xFF6
  8439                           tablat	equ	0xFF5
  8440                           prodh	equ	0xFF4
  8441                           prodl	equ	0xFF3
  8442                           intcon	equ	0xFF2
  8443                           intcon2	equ	0xFF1
  8444                           intcon3	equ	0xFF0
  8445                           postinc0	equ	0xFEE
  8446                           wreg	equ	0xFE8
  8447                           postdec1	equ	0xFE5
  8448                           fsr1l	equ	0xFE1
  8449                           indf2	equ	0xFDF
  8450                           postinc2	equ	0xFDE
  8451                           postdec2	equ	0xFDD
  8452                           fsr2h	equ	0xFDA
  8453                           fsr2l	equ	0xFD9
  8454                           status	equ	0xFD8
  8455                           
  8456 ;; *************** function _I2C_Master_Wait *****************
  8457 ;; Defined at:
  8458 ;;		line 26 in file "I2C.c"
  8459 ;; Parameters:    Size  Location     Type
  8460 ;;		None
  8461 ;; Auto vars:     Size  Location     Type
  8462 ;;		None
  8463 ;; Return value:  Size  Location     Type
  8464 ;;                  1    wreg      void 
  8465 ;; Registers used:
  8466 ;;		wreg, status,2, status,0
  8467 ;; Tracked objects:
  8468 ;;		On entry : 0/0
  8469 ;;		On exit  : 0/0
  8470 ;;		Unchanged: 0/0
  8471 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8472 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8473 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8474 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8475 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8476 ;;Total ram usage:        1 bytes
  8477 ;; Hardware stack levels used:    1
  8478 ;; Hardware stack levels required when called:    7
  8479 ;; This function calls:
  8480 ;;		Nothing
  8481 ;; This function is called by:
  8482 ;;		_I2C_Master_Start
  8483 ;;		_I2C_Master_Stop
  8484 ;;		_I2C_Master_Write
  8485 ;;		_I2C_Master_Read
  8486 ;;		_I2C_Master_RepeatedStart
  8487 ;; This function uses a non-reentrant model
  8488 ;;
  8489                           
  8490                           	psect	text29
  8491  004514                     __ptext29:
  8492                           	opt stack 0
  8493  004514                     _I2C_Master_Wait:
  8494                           	opt stack 18
  8495  004514                     l66:
  8496  004514  B4C7               	btfsc	4039,2,c	;volatile
  8497  004516  D7FE               	goto	l66
  8498  004518  CFC5 F080          	movff	4037,??_I2C_Master_Wait	;volatile
  8499  00451C  0E1F               	movlw	31
  8500  00451E  0100               	movlb	0	; () banked
  8501  004520  1780               	andwf	??_I2C_Master_Wait& (0+255),f,b
  8502  004522  B4D8               	btfsc	status,2,c
  8503  004524  0012               	return	
  8504  004526  D7F6               	goto	l66
  8505  004528                     __end_of_I2C_Master_Wait:
  8506                           	opt stack 0
  8507                           tblptru	equ	0xFF8
  8508                           tblptrh	equ	0xFF7
  8509                           tblptrl	equ	0xFF6
  8510                           tablat	equ	0xFF5
  8511                           prodh	equ	0xFF4
  8512                           prodl	equ	0xFF3
  8513                           intcon	equ	0xFF2
  8514                           intcon2	equ	0xFF1
  8515                           intcon3	equ	0xFF0
  8516                           postinc0	equ	0xFEE
  8517                           wreg	equ	0xFE8
  8518                           postdec1	equ	0xFE5
  8519                           fsr1l	equ	0xFE1
  8520                           indf2	equ	0xFDF
  8521                           postinc2	equ	0xFDE
  8522                           postdec2	equ	0xFDD
  8523                           fsr2h	equ	0xFDA
  8524                           fsr2l	equ	0xFD9
  8525                           status	equ	0xFD8
  8526                           
  8527 ;; *************** function _change_state_to_menu_22 *****************
  8528 ;; Defined at:
  8529 ;;		line 496 in file "UI.c"
  8530 ;; Parameters:    Size  Location     Type
  8531 ;;		None
  8532 ;; Auto vars:     Size  Location     Type
  8533 ;;		None
  8534 ;; Return value:  Size  Location     Type
  8535 ;;                  1    wreg      void 
  8536 ;; Registers used:
  8537 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8538 ;; Tracked objects:
  8539 ;;		On entry : 0/0
  8540 ;;		On exit  : 0/0
  8541 ;;		Unchanged: 0/0
  8542 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8543 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8544 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8545 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8546 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8547 ;;Total ram usage:        0 bytes
  8548 ;; Hardware stack levels used:    1
  8549 ;; Hardware stack levels required when called:   10
  8550 ;; This function calls:
  8551 ;;		_lcdInst
  8552 ;;		_printf
  8553 ;; This function is called by:
  8554 ;;		_UI
  8555 ;; This function uses a non-reentrant model
  8556 ;;
  8557                           
  8558                           	psect	text30
  8559  003FEE                     __ptext30:
  8560                           	opt stack 0
  8561  003FEE                     _change_state_to_menu_22:
  8562                           	opt stack 19
  8563                           
  8564                           ;UI.c: 497: cur_state = 22;
  8565                           
  8566                           ; BSR set to: 0
  8567                           ;incstack = 0
  8568  003FEE  0E00               	movlw	0
  8569  003FF0  0100               	movlb	0	; () banked
  8570  003FF2  6FDF               	movwf	(_cur_state+1)& (0+255),b
  8571  003FF4  0E16               	movlw	22
  8572  003FF6  6FDE               	movwf	_cur_state& (0+255),b
  8573                           
  8574                           ; BSR set to: 0
  8575                           ;UI.c: 499: lcdInst(0b10000000);;
  8576  003FF8  0E80               	movlw	128
  8577  003FFA  ECA5  F022         	call	_lcdInst
  8578                           
  8579                           ;UI.c: 500: printf("2. SORT        <");
  8580  003FFE  0EEC               	movlw	low STR_34
  8581  004000  0100               	movlb	0	; () banked
  8582  004002  6F8E               	movwf	printf@f& (0+255),b
  8583  004004  0EFD               	movlw	high STR_34
  8584  004006  0100               	movlb	0	; () banked
  8585  004008  6F8F               	movwf	(printf@f+1)& (0+255),b
  8586  00400A  EC9C  F008         	call	_printf	;wreg free
  8587                           
  8588                           ;UI.c: 501: lcdInst(0b11000000);;
  8589  00400E  0EC0               	movlw	192
  8590  004010  ECA5  F022         	call	_lcdInst
  8591                           
  8592                           ;UI.c: 502: printf("3. LOGS         ");
  8593  004014  0E31               	movlw	low STR_36
  8594  004016  0100               	movlb	0	; () banked
  8595  004018  6F8E               	movwf	printf@f& (0+255),b
  8596  00401A  0EFD               	movlw	high STR_36
  8597  00401C  0100               	movlb	0	; () banked
  8598  00401E  6F8F               	movwf	(printf@f+1)& (0+255),b
  8599  004020  EC9C  F008         	call	_printf	;wreg free
  8600  004024  0012               	return		;funcret
  8601  004026                     __end_of_change_state_to_menu_22:
  8602                           	opt stack 0
  8603                           tblptru	equ	0xFF8
  8604                           tblptrh	equ	0xFF7
  8605                           tblptrl	equ	0xFF6
  8606                           tablat	equ	0xFF5
  8607                           prodh	equ	0xFF4
  8608                           prodl	equ	0xFF3
  8609                           intcon	equ	0xFF2
  8610                           intcon2	equ	0xFF1
  8611                           intcon3	equ	0xFF0
  8612                           postinc0	equ	0xFEE
  8613                           wreg	equ	0xFE8
  8614                           postdec1	equ	0xFE5
  8615                           fsr1l	equ	0xFE1
  8616                           indf2	equ	0xFDF
  8617                           postinc2	equ	0xFDE
  8618                           postdec2	equ	0xFDD
  8619                           fsr2h	equ	0xFDA
  8620                           fsr2l	equ	0xFD9
  8621                           status	equ	0xFD8
  8622                           
  8623 ;; *************** function _change_state_to_menu_12 *****************
  8624 ;; Defined at:
  8625 ;;		line 488 in file "UI.c"
  8626 ;; Parameters:    Size  Location     Type
  8627 ;;		None
  8628 ;; Auto vars:     Size  Location     Type
  8629 ;;		None
  8630 ;; Return value:  Size  Location     Type
  8631 ;;                  1    wreg      void 
  8632 ;; Registers used:
  8633 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8634 ;; Tracked objects:
  8635 ;;		On entry : 0/0
  8636 ;;		On exit  : 0/0
  8637 ;;		Unchanged: 0/0
  8638 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8639 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8640 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8641 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8642 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8643 ;;Total ram usage:        0 bytes
  8644 ;; Hardware stack levels used:    1
  8645 ;; Hardware stack levels required when called:   10
  8646 ;; This function calls:
  8647 ;;		_lcdInst
  8648 ;;		_printf
  8649 ;; This function is called by:
  8650 ;;		_UI
  8651 ;; This function uses a non-reentrant model
  8652 ;;
  8653                           
  8654                           	psect	text31
  8655  004026                     __ptext31:
  8656                           	opt stack 0
  8657  004026                     _change_state_to_menu_12:
  8658                           	opt stack 19
  8659                           
  8660                           ;UI.c: 489: cur_state = 12;
  8661                           
  8662                           ;incstack = 0
  8663  004026  0E00               	movlw	0
  8664  004028  0100               	movlb	0	; () banked
  8665  00402A  6FDF               	movwf	(_cur_state+1)& (0+255),b
  8666  00402C  0E0C               	movlw	12
  8667  00402E  6FDE               	movwf	_cur_state& (0+255),b
  8668                           
  8669                           ; BSR set to: 0
  8670                           ;UI.c: 491: lcdInst(0b10000000);;
  8671  004030  0E80               	movlw	128
  8672  004032  ECA5  F022         	call	_lcdInst
  8673                           
  8674                           ;UI.c: 492: printf("1. DATE/TIME    ");
  8675  004036  0E53               	movlw	low STR_33
  8676  004038  0100               	movlb	0	; () banked
  8677  00403A  6F8E               	movwf	printf@f& (0+255),b
  8678  00403C  0EFD               	movlw	high STR_33
  8679  00403E  0100               	movlb	0	; () banked
  8680  004040  6F8F               	movwf	(printf@f+1)& (0+255),b
  8681  004042  EC9C  F008         	call	_printf	;wreg free
  8682                           
  8683                           ;UI.c: 493: lcdInst(0b11000000);;
  8684  004046  0EC0               	movlw	192
  8685  004048  ECA5  F022         	call	_lcdInst
  8686                           
  8687                           ;UI.c: 494: printf("2. SORT        <");
  8688  00404C  0EEC               	movlw	low STR_34
  8689  00404E  0100               	movlb	0	; () banked
  8690  004050  6F8E               	movwf	printf@f& (0+255),b
  8691  004052  0EFD               	movlw	high STR_34
  8692  004054  0100               	movlb	0	; () banked
  8693  004056  6F8F               	movwf	(printf@f+1)& (0+255),b
  8694  004058  EC9C  F008         	call	_printf	;wreg free
  8695  00405C  0012               	return		;funcret
  8696  00405E                     __end_of_change_state_to_menu_12:
  8697                           	opt stack 0
  8698                           tblptru	equ	0xFF8
  8699                           tblptrh	equ	0xFF7
  8700                           tblptrl	equ	0xFF6
  8701                           tablat	equ	0xFF5
  8702                           prodh	equ	0xFF4
  8703                           prodl	equ	0xFF3
  8704                           intcon	equ	0xFF2
  8705                           intcon2	equ	0xFF1
  8706                           intcon3	equ	0xFF0
  8707                           postinc0	equ	0xFEE
  8708                           wreg	equ	0xFE8
  8709                           postdec1	equ	0xFE5
  8710                           fsr1l	equ	0xFE1
  8711                           indf2	equ	0xFDF
  8712                           postinc2	equ	0xFDE
  8713                           postdec2	equ	0xFDD
  8714                           fsr2h	equ	0xFDA
  8715                           fsr2l	equ	0xFD9
  8716                           status	equ	0xFD8
  8717                           
  8718 ;; *************** function ___awmod *****************
  8719 ;; Defined at:
  8720 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
  8721 ;; Parameters:    Size  Location     Type
  8722 ;;  dividend        2    0[BANK0 ] int 
  8723 ;;  divisor         2    2[BANK0 ] int 
  8724 ;; Auto vars:     Size  Location     Type
  8725 ;;  sign            1    5[BANK0 ] unsigned char 
  8726 ;;  counter         1    4[BANK0 ] unsigned char 
  8727 ;; Return value:  Size  Location     Type
  8728 ;;                  2    0[BANK0 ] int 
  8729 ;; Registers used:
  8730 ;;		wreg, status,2, status,0
  8731 ;; Tracked objects:
  8732 ;;		On entry : 0/0
  8733 ;;		On exit  : 0/0
  8734 ;;		Unchanged: 0/0
  8735 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8736 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8737 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8738 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8739 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8740 ;;Total ram usage:        6 bytes
  8741 ;; Hardware stack levels used:    1
  8742 ;; Hardware stack levels required when called:    7
  8743 ;; This function calls:
  8744 ;;		Nothing
  8745 ;; This function is called by:
  8746 ;;		_UI
  8747 ;; This function uses a non-reentrant model
  8748 ;;
  8749                           
  8750                           	psect	text32
  8751  003630                     __ptext32:
  8752                           	opt stack 0
  8753  003630                     ___awmod:
  8754                           	opt stack 22
  8755                           
  8756                           ;incstack = 0
  8757  003630  0E00               	movlw	0
  8758  003632  0100               	movlb	0	; () banked
  8759  003634  6F85               	movwf	___awmod@sign& (0+255),b
  8760                           
  8761                           ; BSR set to: 0
  8762  003636  0100               	movlb	0	; () banked
  8763  003638  AF81               	btfss	(___awmod@dividend+1)& (0+255),7,b
  8764  00363A  D008               	goto	l7126
  8765                           
  8766                           ; BSR set to: 0
  8767  00363C  0100               	movlb	0	; () banked
  8768  00363E  6D80               	negf	___awmod@dividend& (0+255),b
  8769  003640  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
  8770  003642  B0D8               	btfsc	status,0,c
  8771  003644  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
  8772                           
  8773                           ; BSR set to: 0
  8774  003646  0E01               	movlw	1
  8775  003648  0100               	movlb	0	; () banked
  8776  00364A  6F85               	movwf	___awmod@sign& (0+255),b
  8777  00364C                     l7126:
  8778                           
  8779                           ; BSR set to: 0
  8780  00364C  0100               	movlb	0	; () banked
  8781  00364E  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
  8782  003650  D005               	goto	l7130
  8783                           
  8784                           ; BSR set to: 0
  8785  003652  0100               	movlb	0	; () banked
  8786  003654  6D82               	negf	___awmod@divisor& (0+255),b
  8787  003656  1F83               	comf	(___awmod@divisor+1)& (0+255),f,b
  8788  003658  B0D8               	btfsc	status,0,c
  8789  00365A  2B83               	incf	(___awmod@divisor+1)& (0+255),f,b
  8790  00365C                     l7130:
  8791                           
  8792                           ; BSR set to: 0
  8793  00365C  0100               	movlb	0	; () banked
  8794  00365E  5182               	movf	___awmod@divisor& (0+255),w,b
  8795  003660  0100               	movlb	0	; () banked
  8796  003662  1183               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  8797  003664  B4D8               	btfsc	status,2,c
  8798  003666  D026               	goto	l7146
  8799                           
  8800                           ; BSR set to: 0
  8801  003668  0E01               	movlw	1
  8802  00366A  0100               	movlb	0	; () banked
  8803  00366C  6F84               	movwf	___awmod@counter& (0+255),b
  8804  00366E  D006               	goto	l7136
  8805  003670                     l7134:
  8806                           
  8807                           ; BSR set to: 0
  8808  003670  0100               	movlb	0	; () banked
  8809  003672  90D8               	bcf	status,0,c
  8810  003674  3782               	rlcf	___awmod@divisor& (0+255),f,b
  8811  003676  3783               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  8812  003678  0100               	movlb	0	; () banked
  8813  00367A  2B84               	incf	___awmod@counter& (0+255),f,b
  8814  00367C                     l7136:
  8815                           
  8816                           ; BSR set to: 0
  8817  00367C  0100               	movlb	0	; () banked
  8818  00367E  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
  8819  003680  D7F7               	goto	l7134
  8820  003682                     l7138:
  8821                           
  8822                           ; BSR set to: 0
  8823  003682  0100               	movlb	0	; () banked
  8824  003684  5182               	movf	___awmod@divisor& (0+255),w,b
  8825  003686  0100               	movlb	0	; () banked
  8826  003688  5D80               	subwf	___awmod@dividend& (0+255),w,b
  8827  00368A  0100               	movlb	0	; () banked
  8828  00368C  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
  8829  00368E  0100               	movlb	0	; () banked
  8830  003690  5981               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  8831  003692  A0D8               	btfss	status,0,c
  8832  003694  D008               	goto	l7142
  8833                           
  8834                           ; BSR set to: 0
  8835  003696  0100               	movlb	0	; () banked
  8836  003698  5182               	movf	___awmod@divisor& (0+255),w,b
  8837  00369A  0100               	movlb	0	; () banked
  8838  00369C  5F80               	subwf	___awmod@dividend& (0+255),f,b
  8839  00369E  0100               	movlb	0	; () banked
  8840  0036A0  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
  8841  0036A2  0100               	movlb	0	; () banked
  8842  0036A4  5B81               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  8843  0036A6                     l7142:
  8844                           
  8845                           ; BSR set to: 0
  8846  0036A6  0100               	movlb	0	; () banked
  8847  0036A8  90D8               	bcf	status,0,c
  8848  0036AA  3383               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  8849  0036AC  3382               	rrcf	___awmod@divisor& (0+255),f,b
  8850                           
  8851                           ; BSR set to: 0
  8852  0036AE  0100               	movlb	0	; () banked
  8853  0036B0  2F84               	decfsz	___awmod@counter& (0+255),f,b
  8854  0036B2  D7E7               	goto	l7138
  8855  0036B4                     l7146:
  8856                           
  8857                           ; BSR set to: 0
  8858  0036B4  0100               	movlb	0	; () banked
  8859  0036B6  5185               	movf	___awmod@sign& (0+255),w,b
  8860  0036B8  0100               	movlb	0	; () banked
  8861  0036BA  B4D8               	btfsc	status,2,c
  8862  0036BC  D005               	goto	l7150
  8863                           
  8864                           ; BSR set to: 0
  8865  0036BE  0100               	movlb	0	; () banked
  8866  0036C0  6D80               	negf	___awmod@dividend& (0+255),b
  8867  0036C2  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
  8868  0036C4  B0D8               	btfsc	status,0,c
  8869  0036C6  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
  8870  0036C8                     l7150:
  8871                           
  8872                           ; BSR set to: 0
  8873  0036C8  C080  F080         	movff	___awmod@dividend,?___awmod
  8874  0036CC  C081  F081         	movff	___awmod@dividend+1,?___awmod+1
  8875  0036D0  0012               	return	
  8876  0036D2                     __end_of___awmod:
  8877                           	opt stack 0
  8878                           tblptru	equ	0xFF8
  8879                           tblptrh	equ	0xFF7
  8880                           tblptrl	equ	0xFF6
  8881                           tablat	equ	0xFF5
  8882                           prodh	equ	0xFF4
  8883                           prodl	equ	0xFF3
  8884                           intcon	equ	0xFF2
  8885                           intcon2	equ	0xFF1
  8886                           intcon3	equ	0xFF0
  8887                           postinc0	equ	0xFEE
  8888                           wreg	equ	0xFE8
  8889                           postdec1	equ	0xFE5
  8890                           fsr1l	equ	0xFE1
  8891                           indf2	equ	0xFDF
  8892                           postinc2	equ	0xFDE
  8893                           postdec2	equ	0xFDD
  8894                           fsr2h	equ	0xFDA
  8895                           fsr2l	equ	0xFD9
  8896                           status	equ	0xFD8
  8897                           
  8898 ;; *************** function ___awdiv *****************
  8899 ;; Defined at:
  8900 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
  8901 ;; Parameters:    Size  Location     Type
  8902 ;;  dividend        2    6[BANK0 ] int 
  8903 ;;  divisor         2    8[BANK0 ] int 
  8904 ;; Auto vars:     Size  Location     Type
  8905 ;;  quotient        2   12[BANK0 ] int 
  8906 ;;  sign            1   11[BANK0 ] unsigned char 
  8907 ;;  counter         1   10[BANK0 ] unsigned char 
  8908 ;; Return value:  Size  Location     Type
  8909 ;;                  2    6[BANK0 ] int 
  8910 ;; Registers used:
  8911 ;;		wreg, status,2, status,0
  8912 ;; Tracked objects:
  8913 ;;		On entry : 0/0
  8914 ;;		On exit  : 0/0
  8915 ;;		Unchanged: 0/0
  8916 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8917 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8918 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8919 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8920 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8921 ;;Total ram usage:        8 bytes
  8922 ;; Hardware stack levels used:    1
  8923 ;; Hardware stack levels required when called:    7
  8924 ;; This function calls:
  8925 ;;		Nothing
  8926 ;; This function is called by:
  8927 ;;		_UI
  8928 ;; This function uses a non-reentrant model
  8929 ;;
  8930                           
  8931                           	psect	text33
  8932  00340C                     __ptext33:
  8933                           	opt stack 0
  8934  00340C                     ___awdiv:
  8935                           	opt stack 22
  8936                           
  8937                           ; BSR set to: 0
  8938                           ;incstack = 0
  8939  00340C  0E00               	movlw	0
  8940  00340E  0100               	movlb	0	; () banked
  8941  003410  6F8B               	movwf	___awdiv@sign& (0+255),b
  8942                           
  8943                           ; BSR set to: 0
  8944  003412  0100               	movlb	0	; () banked
  8945  003414  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  8946  003416  D008               	goto	l7082
  8947                           
  8948                           ; BSR set to: 0
  8949  003418  0100               	movlb	0	; () banked
  8950  00341A  6D88               	negf	___awdiv@divisor& (0+255),b
  8951  00341C  1F89               	comf	(___awdiv@divisor+1)& (0+255),f,b
  8952  00341E  B0D8               	btfsc	status,0,c
  8953  003420  2B89               	incf	(___awdiv@divisor+1)& (0+255),f,b
  8954                           
  8955                           ; BSR set to: 0
  8956  003422  0E01               	movlw	1
  8957  003424  0100               	movlb	0	; () banked
  8958  003426  6F8B               	movwf	___awdiv@sign& (0+255),b
  8959  003428                     l7082:
  8960                           
  8961                           ; BSR set to: 0
  8962  003428  0100               	movlb	0	; () banked
  8963  00342A  AF87               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  8964  00342C  D008               	goto	l7088
  8965                           
  8966                           ; BSR set to: 0
  8967  00342E  0100               	movlb	0	; () banked
  8968  003430  6D86               	negf	___awdiv@dividend& (0+255),b
  8969  003432  1F87               	comf	(___awdiv@dividend+1)& (0+255),f,b
  8970  003434  B0D8               	btfsc	status,0,c
  8971  003436  2B87               	incf	(___awdiv@dividend+1)& (0+255),f,b
  8972                           
  8973                           ; BSR set to: 0
  8974  003438  0E01               	movlw	1
  8975  00343A  0100               	movlb	0	; () banked
  8976  00343C  1B8B               	xorwf	___awdiv@sign& (0+255),f,b
  8977  00343E                     l7088:
  8978                           
  8979                           ; BSR set to: 0
  8980  00343E  0E00               	movlw	0
  8981  003440  0100               	movlb	0	; () banked
  8982  003442  6F8D               	movwf	(___awdiv@quotient+1)& (0+255),b
  8983  003444  0E00               	movlw	0
  8984  003446  6F8C               	movwf	___awdiv@quotient& (0+255),b
  8985                           
  8986                           ; BSR set to: 0
  8987  003448  0100               	movlb	0	; () banked
  8988  00344A  5188               	movf	___awdiv@divisor& (0+255),w,b
  8989  00344C  0100               	movlb	0	; () banked
  8990  00344E  1189               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  8991  003450  B4D8               	btfsc	status,2,c
  8992  003452  D02C               	goto	l7110
  8993                           
  8994                           ; BSR set to: 0
  8995  003454  0E01               	movlw	1
  8996  003456  0100               	movlb	0	; () banked
  8997  003458  6F8A               	movwf	___awdiv@counter& (0+255),b
  8998  00345A  D006               	goto	l7096
  8999  00345C                     l7094:
  9000                           
  9001                           ; BSR set to: 0
  9002  00345C  0100               	movlb	0	; () banked
  9003  00345E  90D8               	bcf	status,0,c
  9004  003460  3788               	rlcf	___awdiv@divisor& (0+255),f,b
  9005  003462  3789               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  9006  003464  0100               	movlb	0	; () banked
  9007  003466  2B8A               	incf	___awdiv@counter& (0+255),f,b
  9008  003468                     l7096:
  9009                           
  9010                           ; BSR set to: 0
  9011  003468  0100               	movlb	0	; () banked
  9012  00346A  AF89               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  9013  00346C  D7F7               	goto	l7094
  9014  00346E                     l7098:
  9015                           
  9016                           ; BSR set to: 0
  9017  00346E  0100               	movlb	0	; () banked
  9018  003470  90D8               	bcf	status,0,c
  9019  003472  378C               	rlcf	___awdiv@quotient& (0+255),f,b
  9020  003474  378D               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  9021                           
  9022                           ; BSR set to: 0
  9023  003476  0100               	movlb	0	; () banked
  9024  003478  5188               	movf	___awdiv@divisor& (0+255),w,b
  9025  00347A  0100               	movlb	0	; () banked
  9026  00347C  5D86               	subwf	___awdiv@dividend& (0+255),w,b
  9027  00347E  0100               	movlb	0	; () banked
  9028  003480  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
  9029  003482  0100               	movlb	0	; () banked
  9030  003484  5987               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  9031  003486  A0D8               	btfss	status,0,c
  9032  003488  D00A               	goto	l7106
  9033                           
  9034                           ; BSR set to: 0
  9035  00348A  0100               	movlb	0	; () banked
  9036  00348C  5188               	movf	___awdiv@divisor& (0+255),w,b
  9037  00348E  0100               	movlb	0	; () banked
  9038  003490  5F86               	subwf	___awdiv@dividend& (0+255),f,b
  9039  003492  0100               	movlb	0	; () banked
  9040  003494  5189               	movf	(___awdiv@divisor+1)& (0+255),w,b
  9041  003496  0100               	movlb	0	; () banked
  9042  003498  5B87               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  9043                           
  9044                           ; BSR set to: 0
  9045  00349A  0100               	movlb	0	; () banked
  9046  00349C  818C               	bsf	___awdiv@quotient& (0+255),0,b
  9047  00349E                     l7106:
  9048                           
  9049                           ; BSR set to: 0
  9050  00349E  0100               	movlb	0	; () banked
  9051  0034A0  90D8               	bcf	status,0,c
  9052  0034A2  3389               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  9053  0034A4  3388               	rrcf	___awdiv@divisor& (0+255),f,b
  9054                           
  9055                           ; BSR set to: 0
  9056  0034A6  0100               	movlb	0	; () banked
  9057  0034A8  2F8A               	decfsz	___awdiv@counter& (0+255),f,b
  9058  0034AA  D7E1               	goto	l7098
  9059  0034AC                     l7110:
  9060                           
  9061                           ; BSR set to: 0
  9062  0034AC  0100               	movlb	0	; () banked
  9063  0034AE  518B               	movf	___awdiv@sign& (0+255),w,b
  9064  0034B0  0100               	movlb	0	; () banked
  9065  0034B2  B4D8               	btfsc	status,2,c
  9066  0034B4  D005               	goto	l7114
  9067                           
  9068                           ; BSR set to: 0
  9069  0034B6  0100               	movlb	0	; () banked
  9070  0034B8  6D8C               	negf	___awdiv@quotient& (0+255),b
  9071  0034BA  1F8D               	comf	(___awdiv@quotient+1)& (0+255),f,b
  9072  0034BC  B0D8               	btfsc	status,0,c
  9073  0034BE  2B8D               	incf	(___awdiv@quotient+1)& (0+255),f,b
  9074  0034C0                     l7114:
  9075                           
  9076                           ; BSR set to: 0
  9077  0034C0  C08C  F086         	movff	___awdiv@quotient,?___awdiv
  9078  0034C4  C08D  F087         	movff	___awdiv@quotient+1,?___awdiv+1
  9079  0034C8  0012               	return	
  9080  0034CA                     __end_of___awdiv:
  9081                           	opt stack 0
  9082                           tblptru	equ	0xFF8
  9083                           tblptrh	equ	0xFF7
  9084                           tblptrl	equ	0xFF6
  9085                           tablat	equ	0xFF5
  9086                           prodh	equ	0xFF4
  9087                           prodl	equ	0xFF3
  9088                           intcon	equ	0xFF2
  9089                           intcon2	equ	0xFF1
  9090                           intcon3	equ	0xFF0
  9091                           postinc0	equ	0xFEE
  9092                           wreg	equ	0xFE8
  9093                           postdec1	equ	0xFE5
  9094                           fsr1l	equ	0xFE1
  9095                           indf2	equ	0xFDF
  9096                           postinc2	equ	0xFDE
  9097                           postdec2	equ	0xFDD
  9098                           fsr2h	equ	0xFDA
  9099                           fsr2l	equ	0xFD9
  9100                           status	equ	0xFD8
  9101                           
  9102 ;; *************** function _Test *****************
  9103 ;; Defined at:
  9104 ;;		line 28 in file "Test.c"
  9105 ;; Parameters:    Size  Location     Type
  9106 ;;		None
  9107 ;; Auto vars:     Size  Location     Type
  9108 ;;		None
  9109 ;; Return value:  Size  Location     Type
  9110 ;;                  1    wreg      void 
  9111 ;; Registers used:
  9112 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9113 ;; Tracked objects:
  9114 ;;		On entry : 0/0
  9115 ;;		On exit  : 0/0
  9116 ;;		Unchanged: 0/0
  9117 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9118 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9119 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9120 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9121 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9122 ;;Total ram usage:        2 bytes
  9123 ;; Hardware stack levels used:    1
  9124 ;; Hardware stack levels required when called:   11
  9125 ;; This function calls:
  9126 ;;		_BothServos
  9127 ;;		_EEPROMTest
  9128 ;;		_PortTestA5
  9129 ;;		_PortTests
  9130 ;;		_SolenoidTestA5
  9131 ;;		_ToggleTestA5
  9132 ;;		_actuatorTest
  9133 ;;		_algorithmTest
  9134 ;;		_lcdInst
  9135 ;;		_printf
  9136 ;;		_sensorTest
  9137 ;; This function is called by:
  9138 ;;		_main
  9139 ;; This function uses a non-reentrant model
  9140 ;;
  9141                           
  9142                           	psect	text34
  9143  003048                     __ptext34:
  9144                           	opt stack 0
  9145  003048                     _Test:
  9146                           	opt stack 19
  9147  003048                     
  9148                           ;Test.c: 31: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
  9149  003048  0E01               	movlw	1
  9150  00304A  ECA5  F022         	call	_lcdInst
  9151  00304E  0E68               	movlw	104
  9152  003050  0100               	movlb	0	; () banked
  9153  003052  6FC6               	movwf	??_Test& (0+255),b
  9154  003054  0EE4               	movlw	228
  9155  003056                     u7177:
  9156  003056  2EE8               	decfsz	wreg,f,c
  9157  003058  D7FE               	bra	u7177
  9158  00305A  2FC6               	decfsz	??_Test& (0+255),f,b
  9159  00305C  D7FC               	bra	u7177
  9160  00305E  F000               	nop	
  9161  003060  0E80               	movlw	128
  9162  003062  ECA5  F022         	call	_lcdInst
  9163                           
  9164                           ;Test.c: 32: printf("1.ALG|2.SNR|3.AC");
  9165  003066  0E98               	movlw	low STR_68
  9166  003068  0100               	movlb	0	; () banked
  9167  00306A  6F8E               	movwf	printf@f& (0+255),b
  9168  00306C  0EFC               	movlw	high STR_68
  9169  00306E  0100               	movlb	0	; () banked
  9170  003070  6F8F               	movwf	(printf@f+1)& (0+255),b
  9171  003072  EC9C  F008         	call	_printf	;wreg free
  9172                           
  9173                           ;Test.c: 33: lcdInst(0b11000000);;
  9174  003076  0EC0               	movlw	192
  9175  003078  ECA5  F022         	call	_lcdInst
  9176                           
  9177                           ;Test.c: 34: printf("4.HI|5.TOG|6.EEP");
  9178  00307C  0ECB               	movlw	low STR_69
  9179  00307E  0100               	movlb	0	; () banked
  9180  003080  6F8E               	movwf	printf@f& (0+255),b
  9181  003082  0EFC               	movlw	high STR_69
  9182  003084  0100               	movlb	0	; () banked
  9183  003086  6F8F               	movwf	(printf@f+1)& (0+255),b
  9184  003088  EC9C  F008         	call	_printf	;wreg free
  9185                           
  9186                           ;Test.c: 35: _delay((unsigned long)((100)*(32000000/4000.0)));
  9187  00308C  0E05               	movlw	5
  9188  00308E  0100               	movlb	0	; () banked
  9189  003090  6FC7               	movwf	(??_Test+1)& (0+255),b
  9190  003092  0E0F               	movlw	15
  9191  003094  0100               	movlb	0	; () banked
  9192  003096  6FC6               	movwf	??_Test& (0+255),b
  9193  003098  0EF1               	movlw	241
  9194  00309A                     u7187:
  9195  00309A  2EE8               	decfsz	wreg,f,c
  9196  00309C  D7FE               	bra	u7187
  9197  00309E  2FC6               	decfsz	??_Test& (0+255),f,b
  9198  0030A0  D7FC               	bra	u7187
  9199  0030A2  2FC7               	decfsz	(??_Test+1)& (0+255),f,b
  9200  0030A4  D7FA               	bra	u7187
  9201  0030A6                     l1017:
  9202  0030A6  A281               	btfss	3969,1,c	;volatile
  9203  0030A8  D7FE               	goto	l1017
  9204                           
  9205                           ;Test.c: 37: var = PORTB >> 4;
  9206  0030AA  CF81 F0C6          	movff	3969,??_Test	;volatile
  9207  0030AE  0100               	movlb	0	; () banked
  9208  0030B0  3BC6               	swapf	??_Test& (0+255),f,b
  9209  0030B2  0E0F               	movlw	15
  9210  0030B4  17C6               	andwf	??_Test& (0+255),f,b
  9211  0030B6  0100               	movlb	0	; () banked
  9212  0030B8  51C6               	movf	??_Test& (0+255),w,b
  9213  0030BA  0100               	movlb	0	; () banked
  9214  0030BC  6FFA               	movwf	_var& (0+255),b
  9215  0030BE  6BFB               	clrf	(_var+1)& (0+255),b
  9216                           
  9217                           ; BSR set to: 0
  9218                           ;Test.c: 38: var++;
  9219  0030C0  0100               	movlb	0	; () banked
  9220  0030C2  4BFA               	infsnz	_var& (0+255),f,b
  9221  0030C4  2BFB               	incf	(_var+1)& (0+255),f,b
  9222  0030C6                     l1020:
  9223  0030C6  A281               	btfss	3969,1,c	;volatile
  9224  0030C8  D01C               	goto	l7846
  9225  0030CA  D7FD               	goto	l1020
  9226  0030CC                     l7826:
  9227                           
  9228                           ;Test.c: 42: algorithmTest();
  9229  0030CC  EC9B  F019         	call	_algorithmTest	;wreg free
  9230                           
  9231                           ;Test.c: 43: break;
  9232  0030D0  D7BB               	goto	l7808
  9233  0030D2                     l7828:
  9234                           
  9235                           ;Test.c: 45: sensorTest();
  9236  0030D2  ECB3  F013         	call	_sensorTest	;wreg free
  9237                           
  9238                           ;Test.c: 46: break;
  9239  0030D6  D7B8               	goto	l7808
  9240  0030D8                     l7830:
  9241                           
  9242                           ;Test.c: 48: actuatorTest();
  9243  0030D8  EC5C  F004         	call	_actuatorTest	;wreg free
  9244                           
  9245                           ;Test.c: 49: break;
  9246  0030DC  D7B5               	goto	l7808
  9247  0030DE                     l7832:
  9248                           
  9249                           ;Test.c: 51: PortTestA5();
  9250  0030DE  EC6A  F01E         	call	_PortTestA5	;wreg free
  9251                           
  9252                           ;Test.c: 52: break;
  9253  0030E2  D7B2               	goto	l7808
  9254  0030E4                     l7834:
  9255                           
  9256                           ;Test.c: 54: ToggleTestA5();
  9257  0030E4  ECFA  F01B         	call	_ToggleTestA5	;wreg free
  9258                           
  9259                           ;Test.c: 55: break;
  9260  0030E8  D7AF               	goto	l7808
  9261  0030EA                     l7836:
  9262                           
  9263                           ;Test.c: 57: EEPROMTest();
  9264  0030EA  ECD7  F022         	call	_EEPROMTest	;wreg free
  9265                           
  9266                           ;Test.c: 58: break;
  9267  0030EE  D7AC               	goto	l7808
  9268  0030F0                     l7838:
  9269                           
  9270                           ;Test.c: 60: SolenoidTestA5();
  9271  0030F0  ECA8  F018         	call	_SolenoidTestA5	;wreg free
  9272                           
  9273                           ;Test.c: 61: break;
  9274  0030F4  D7A9               	goto	l7808
  9275  0030F6                     l7840:
  9276                           
  9277                           ;Test.c: 63: PortTests();
  9278  0030F6  EC81  F01C         	call	_PortTests	;wreg free
  9279                           
  9280                           ;Test.c: 64: break;
  9281  0030FA  D7A6               	goto	l7808
  9282  0030FC                     l7842:
  9283                           
  9284                           ;Test.c: 66: BothServos();
  9285  0030FC  EC6F  F00C         	call	_BothServos	;wreg free
  9286                           
  9287                           ;Test.c: 70: }
  9288                           
  9289                           ;Test.c: 69: break;
  9290                           
  9291                           ;Test.c: 68: default:
  9292                           
  9293                           ;Test.c: 67: break;
  9294  003100  D7A3               	goto	l7808
  9295  003102                     l7846:
  9296  003102  C0FA  F0C6         	movff	_var,??_Test
  9297  003106  C0FB  F0C7         	movff	_var+1,??_Test+1
  9298                           
  9299                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9300                           ; Switch size 1, requested type "space"
  9301                           ; Number of cases is 1, Range of values is 0 to 0
  9302                           ; switch strategies available:
  9303                           ; Name         Instructions Cycles
  9304                           ; simple_byte            4     3 (average)
  9305                           ;	Chosen strategy is simple_byte
  9306  00310A  0100               	movlb	0	; () banked
  9307  00310C  51C7               	movf	(??_Test+1)& (0+255),w,b
  9308  00310E  0A00               	xorlw	0	; case 0
  9309  003110  A4D8               	btfss	status,2,c
  9310  003112  D79A               	goto	l7808
  9311                           
  9312                           ; BSR set to: 0
  9313                           ; Switch size 1, requested type "space"
  9314                           ; Number of cases is 9, Range of values is 1 to 10
  9315                           ; switch strategies available:
  9316                           ; Name         Instructions Cycles
  9317                           ; simple_byte           28    15 (average)
  9318                           ;	Chosen strategy is simple_byte
  9319  003114  0100               	movlb	0	; () banked
  9320  003116  51C6               	movf	??_Test& (0+255),w,b
  9321  003118  0A01               	xorlw	1	; case 1
  9322  00311A  B4D8               	btfsc	status,2,c
  9323  00311C  D7D7               	goto	l7826
  9324  00311E  0A03               	xorlw	3	; case 2
  9325  003120  B4D8               	btfsc	status,2,c
  9326  003122  D7D7               	goto	l7828
  9327  003124  0A01               	xorlw	1	; case 3
  9328  003126  B4D8               	btfsc	status,2,c
  9329  003128  D7D7               	goto	l7830
  9330  00312A  0A06               	xorlw	6	; case 5
  9331  00312C  B4D8               	btfsc	status,2,c
  9332  00312E  D7D7               	goto	l7832
  9333  003130  0A03               	xorlw	3	; case 6
  9334  003132  B4D8               	btfsc	status,2,c
  9335  003134  D7D7               	goto	l7834
  9336  003136  0A01               	xorlw	1	; case 7
  9337  003138  B4D8               	btfsc	status,2,c
  9338  00313A  D7D7               	goto	l7836
  9339  00313C  0A0F               	xorlw	15	; case 8
  9340  00313E  B4D8               	btfsc	status,2,c
  9341  003140  D7D7               	goto	l7838
  9342  003142  0A01               	xorlw	1	; case 9
  9343  003144  B4D8               	btfsc	status,2,c
  9344  003146  D7D7               	goto	l7840
  9345  003148  0A03               	xorlw	3	; case 10
  9346  00314A  B4D8               	btfsc	status,2,c
  9347  00314C  D7D7               	goto	l7842
  9348                           
  9349                           ; BSR set to: 0
  9350                           
  9351                           ; BSR set to: 0
  9352  00314E  D77C               	goto	l7808
  9353  003150                     __end_of_Test:
  9354                           	opt stack 0
  9355                           tblptru	equ	0xFF8
  9356                           tblptrh	equ	0xFF7
  9357                           tblptrl	equ	0xFF6
  9358                           tablat	equ	0xFF5
  9359                           prodh	equ	0xFF4
  9360                           prodl	equ	0xFF3
  9361                           intcon	equ	0xFF2
  9362                           intcon2	equ	0xFF1
  9363                           intcon3	equ	0xFF0
  9364                           postinc0	equ	0xFEE
  9365                           wreg	equ	0xFE8
  9366                           postdec1	equ	0xFE5
  9367                           fsr1l	equ	0xFE1
  9368                           indf2	equ	0xFDF
  9369                           postinc2	equ	0xFDE
  9370                           postdec2	equ	0xFDD
  9371                           fsr2h	equ	0xFDA
  9372                           fsr2l	equ	0xFD9
  9373                           status	equ	0xFD8
  9374                           
  9375 ;; *************** function _sensorTest *****************
  9376 ;; Defined at:
  9377 ;;		line 118 in file "Test.c"
  9378 ;; Parameters:    Size  Location     Type
  9379 ;;		None
  9380 ;; Auto vars:     Size  Location     Type
  9381 ;;		None
  9382 ;; Return value:  Size  Location     Type
  9383 ;;                  1    wreg      void 
  9384 ;; Registers used:
  9385 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9386 ;; Tracked objects:
  9387 ;;		On entry : 0/0
  9388 ;;		On exit  : 0/0
  9389 ;;		Unchanged: 0/0
  9390 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9391 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9392 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9393 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9394 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9395 ;;Total ram usage:        2 bytes
  9396 ;; Hardware stack levels used:    1
  9397 ;; Hardware stack levels required when called:   10
  9398 ;; This function calls:
  9399 ;;		_lcdInst
  9400 ;;		_printf
  9401 ;;		_readIR
  9402 ;;		_readMAG
  9403 ;; This function is called by:
  9404 ;;		_Test
  9405 ;; This function uses a non-reentrant model
  9406 ;;
  9407                           
  9408                           	psect	text35
  9409  002766                     __ptext35:
  9410                           	opt stack 0
  9411  002766                     _sensorTest:
  9412                           	opt stack 19
  9413                           
  9414                           ;Test.c: 120: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
  9415                           
  9416                           ; BSR set to: 0
  9417                           ;incstack = 0
  9418  002766  0E01               	movlw	1
  9419  002768  ECA5  F022         	call	_lcdInst
  9420  00276C  0E68               	movlw	104
  9421  00276E  0100               	movlb	0	; () banked
  9422  002770  6FAB               	movwf	??_sensorTest& (0+255),b
  9423  002772  0EE4               	movlw	228
  9424  002774                     u7197:
  9425  002774  2EE8               	decfsz	wreg,f,c
  9426  002776  D7FE               	bra	u7197
  9427  002778  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9428  00277A  D7FC               	bra	u7197
  9429  00277C  F000               	nop	
  9430  00277E  0E80               	movlw	128
  9431  002780  ECA5  F022         	call	_lcdInst
  9432                           
  9433                           ;Test.c: 121: printf("SENSORS");
  9434  002784  0EAD               	movlw	low STR_77
  9435  002786  0100               	movlb	0	; () banked
  9436  002788  6F8E               	movwf	printf@f& (0+255),b
  9437  00278A  0EFF               	movlw	high STR_77
  9438  00278C  0100               	movlb	0	; () banked
  9439  00278E  6F8F               	movwf	(printf@f+1)& (0+255),b
  9440  002790  EC9C  F008         	call	_printf	;wreg free
  9441                           
  9442                           ;Test.c: 122: lcdInst(0b11000000);;
  9443  002794  0EC0               	movlw	192
  9444  002796  ECA5  F022         	call	_lcdInst
  9445                           
  9446                           ;Test.c: 123: printf("PUSH TO START");
  9447  00279A  0E11               	movlw	low STR_71
  9448  00279C  0100               	movlb	0	; () banked
  9449  00279E  6F8E               	movwf	printf@f& (0+255),b
  9450  0027A0  0EFF               	movlw	high STR_71
  9451  0027A2  0100               	movlb	0	; () banked
  9452  0027A4  6F8F               	movwf	(printf@f+1)& (0+255),b
  9453  0027A6  EC9C  F008         	call	_printf	;wreg free
  9454                           
  9455                           ;Test.c: 124: _delay((unsigned long)((100)*(32000000/4000.0)));
  9456  0027AA  0E05               	movlw	5
  9457  0027AC  0100               	movlb	0	; () banked
  9458  0027AE  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
  9459  0027B0  0E0F               	movlw	15
  9460  0027B2  0100               	movlb	0	; () banked
  9461  0027B4  6FAB               	movwf	??_sensorTest& (0+255),b
  9462  0027B6  0EF1               	movlw	241
  9463  0027B8                     u7207:
  9464  0027B8  2EE8               	decfsz	wreg,f,c
  9465  0027BA  D7FE               	bra	u7207
  9466  0027BC  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9467  0027BE  D7FC               	bra	u7207
  9468  0027C0  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
  9469  0027C2  D7FA               	bra	u7207
  9470  0027C4                     l1049:
  9471  0027C4  A281               	btfss	3969,1,c	;volatile
  9472  0027C6  D7FE               	goto	l1049
  9473  0027C8                     l1052:
  9474  0027C8  B281               	btfsc	3969,1,c	;volatile
  9475  0027CA  D7FE               	goto	l1052
  9476                           
  9477                           ;Test.c: 127: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
  9478  0027CC  0E01               	movlw	1
  9479  0027CE  ECA5  F022         	call	_lcdInst
  9480  0027D2  0E68               	movlw	104
  9481  0027D4  0100               	movlb	0	; () banked
  9482  0027D6  6FAB               	movwf	??_sensorTest& (0+255),b
  9483  0027D8  0EE4               	movlw	228
  9484  0027DA                     u7217:
  9485  0027DA  2EE8               	decfsz	wreg,f,c
  9486  0027DC  D7FE               	bra	u7217
  9487  0027DE  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9488  0027E0  D7FC               	bra	u7217
  9489  0027E2  F000               	nop	
  9490  0027E4  0E80               	movlw	128
  9491  0027E6  ECA5  F022         	call	_lcdInst
  9492                           
  9493                           ;Test.c: 132: printf("TST: IR SNSR");
  9494  0027EA  0E3B               	movlw	low STR_79
  9495  0027EC  0100               	movlb	0	; () banked
  9496  0027EE  6F8E               	movwf	printf@f& (0+255),b
  9497  0027F0  0EFF               	movlw	high STR_79
  9498  0027F2  0100               	movlb	0	; () banked
  9499  0027F4  6F8F               	movwf	(printf@f+1)& (0+255),b
  9500  0027F6  EC9C  F008         	call	_printf	;wreg free
  9501                           
  9502                           ;Test.c: 133: _delay((unsigned long)((100)*(32000000/4000.0)));
  9503  0027FA  0E05               	movlw	5
  9504  0027FC  0100               	movlb	0	; () banked
  9505  0027FE  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
  9506  002800  0E0F               	movlw	15
  9507  002802  0100               	movlb	0	; () banked
  9508  002804  6FAB               	movwf	??_sensorTest& (0+255),b
  9509  002806  0EF1               	movlw	241
  9510  002808                     u7227:
  9511  002808  2EE8               	decfsz	wreg,f,c
  9512  00280A  D7FE               	bra	u7227
  9513  00280C  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9514  00280E  D7FC               	bra	u7227
  9515  002810  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
  9516  002812  D7FA               	bra	u7227
  9517                           
  9518                           ;Test.c: 134: LATAbits.LATA6 = 1;
  9519  002814  8C89               	bsf	3977,6,c	;volatile
  9520                           
  9521                           ;Test.c: 135: while(PORTBbits.RB1 == 0){
  9522  002816  D021               	goto	l6456
  9523  002818                     l6450:
  9524                           
  9525                           ;Test.c: 136: readIR();
  9526  002818  EC8D  F01F         	call	_readIR	;wreg free
  9527                           
  9528                           ;Test.c: 137: lcdInst(0b10000000);;
  9529  00281C  0E80               	movlw	128
  9530  00281E  ECA5  F022         	call	_lcdInst
  9531                           
  9532                           ;Test.c: 138: lcdInst(0b11000000);;
  9533  002822  0EC0               	movlw	192
  9534  002824  ECA5  F022         	call	_lcdInst
  9535                           
  9536                           ;Test.c: 139: printf("IR_signal: %d ", IR_signal);
  9537  002828  0E60               	movlw	low STR_80
  9538  00282A  0100               	movlb	0	; () banked
  9539  00282C  6F8E               	movwf	printf@f& (0+255),b
  9540  00282E  0EFE               	movlw	high STR_80
  9541  002830  0100               	movlb	0	; () banked
  9542  002832  6F8F               	movwf	(printf@f+1)& (0+255),b
  9543  002834  C0DA  F090         	movff	_IR_signal,?_printf+2
  9544  002838  C0DB  F091         	movff	_IR_signal+1,?_printf+3
  9545  00283C  EC9C  F008         	call	_printf	;wreg free
  9546                           
  9547                           ;Test.c: 140: _delay((unsigned long)((100)*(32000000/4000.0)));
  9548  002840  0E05               	movlw	5
  9549  002842  0100               	movlb	0	; () banked
  9550  002844  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
  9551  002846  0E0F               	movlw	15
  9552  002848  0100               	movlb	0	; () banked
  9553  00284A  6FAB               	movwf	??_sensorTest& (0+255),b
  9554  00284C  0EF1               	movlw	241
  9555  00284E                     u7237:
  9556  00284E  2EE8               	decfsz	wreg,f,c
  9557  002850  D7FE               	bra	u7237
  9558  002852  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9559  002854  D7FC               	bra	u7237
  9560  002856  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
  9561  002858  D7FA               	bra	u7237
  9562  00285A                     l6456:
  9563  00285A  A281               	btfss	3969,1,c	;volatile
  9564  00285C  D7DD               	goto	l6450
  9565                           
  9566                           ;Test.c: 141: }
  9567                           ;Test.c: 142: LATAbits.LATA6 = 0;
  9568  00285E  9C89               	bcf	3977,6,c	;volatile
  9569                           
  9570                           ;Test.c: 149: printf("TST: MAGNETISM");
  9571  002860  0E8D               	movlw	low STR_81
  9572  002862  0100               	movlb	0	; () banked
  9573  002864  6F8E               	movwf	printf@f& (0+255),b
  9574  002866  0EFE               	movlw	high STR_81
  9575  002868  0100               	movlb	0	; () banked
  9576  00286A  6F8F               	movwf	(printf@f+1)& (0+255),b
  9577  00286C  EC9C  F008         	call	_printf	;wreg free
  9578                           
  9579                           ;Test.c: 150: _delay((unsigned long)((100)*(32000000/4000.0)));
  9580  002870  0E05               	movlw	5
  9581  002872  0100               	movlb	0	; () banked
  9582  002874  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
  9583  002876  0E0F               	movlw	15
  9584  002878  0100               	movlb	0	; () banked
  9585  00287A  6FAB               	movwf	??_sensorTest& (0+255),b
  9586  00287C  0EF1               	movlw	241
  9587  00287E                     u7247:
  9588  00287E  2EE8               	decfsz	wreg,f,c
  9589  002880  D7FE               	bra	u7247
  9590  002882  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9591  002884  D7FC               	bra	u7247
  9592  002886  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
  9593  002888  D7FA               	bra	u7247
  9594                           
  9595                           ;Test.c: 151: while(PORTBbits.RB1 == 0){
  9596  00288A  D021               	goto	l6468
  9597  00288C                     l6462:
  9598                           
  9599                           ;Test.c: 152: readMAG();
  9600  00288C  EC67  F01F         	call	_readMAG	;wreg free
  9601                           
  9602                           ;Test.c: 153: lcdInst(0b10000000);;
  9603  002890  0E80               	movlw	128
  9604  002892  ECA5  F022         	call	_lcdInst
  9605                           
  9606                           ;Test.c: 154: lcdInst(0b11000000);;
  9607  002896  0EC0               	movlw	192
  9608  002898  ECA5  F022         	call	_lcdInst
  9609                           
  9610                           ;Test.c: 155: printf("MAG_signal: %d ", MAG_signal);
  9611  00289C  0E30               	movlw	low STR_82
  9612  00289E  0100               	movlb	0	; () banked
  9613  0028A0  6F8E               	movwf	printf@f& (0+255),b
  9614  0028A2  0EFE               	movlw	high STR_82
  9615  0028A4  0100               	movlb	0	; () banked
  9616  0028A6  6F8F               	movwf	(printf@f+1)& (0+255),b
  9617  0028A8  C0DC  F090         	movff	_MAG_signal,?_printf+2
  9618  0028AC  C0DD  F091         	movff	_MAG_signal+1,?_printf+3
  9619  0028B0  EC9C  F008         	call	_printf	;wreg free
  9620                           
  9621                           ;Test.c: 156: _delay((unsigned long)((100)*(32000000/4000.0)));
  9622  0028B4  0E05               	movlw	5
  9623  0028B6  0100               	movlb	0	; () banked
  9624  0028B8  6FAC               	movwf	(??_sensorTest+1)& (0+255),b
  9625  0028BA  0E0F               	movlw	15
  9626  0028BC  0100               	movlb	0	; () banked
  9627  0028BE  6FAB               	movwf	??_sensorTest& (0+255),b
  9628  0028C0  0EF1               	movlw	241
  9629  0028C2                     u7257:
  9630  0028C2  2EE8               	decfsz	wreg,f,c
  9631  0028C4  D7FE               	bra	u7257
  9632  0028C6  2FAB               	decfsz	??_sensorTest& (0+255),f,b
  9633  0028C8  D7FC               	bra	u7257
  9634  0028CA  2FAC               	decfsz	(??_sensorTest+1)& (0+255),f,b
  9635  0028CC  D7FA               	bra	u7257
  9636  0028CE                     l6468:
  9637  0028CE  B281               	btfsc	3969,1,c	;volatile
  9638  0028D0  0012               	return	
  9639  0028D2  D7DC               	goto	l6462
  9640  0028D4                     __end_of_sensorTest:
  9641                           	opt stack 0
  9642                           tblptru	equ	0xFF8
  9643                           tblptrh	equ	0xFF7
  9644                           tblptrl	equ	0xFF6
  9645                           tablat	equ	0xFF5
  9646                           prodh	equ	0xFF4
  9647                           prodl	equ	0xFF3
  9648                           intcon	equ	0xFF2
  9649                           intcon2	equ	0xFF1
  9650                           intcon3	equ	0xFF0
  9651                           postinc0	equ	0xFEE
  9652                           wreg	equ	0xFE8
  9653                           postdec1	equ	0xFE5
  9654                           fsr1l	equ	0xFE1
  9655                           indf2	equ	0xFDF
  9656                           postinc2	equ	0xFDE
  9657                           postdec2	equ	0xFDD
  9658                           fsr2h	equ	0xFDA
  9659                           fsr2l	equ	0xFD9
  9660                           status	equ	0xFD8
  9661                           
  9662 ;; *************** function _readMAG *****************
  9663 ;; Defined at:
  9664 ;;		line 29 in file "ADCFunctionality.c"
  9665 ;; Parameters:    Size  Location     Type
  9666 ;;		None
  9667 ;; Auto vars:     Size  Location     Type
  9668 ;;  res             2    4[BANK0 ] int 
  9669 ;; Return value:  Size  Location     Type
  9670 ;;                  1    wreg      void 
  9671 ;; Registers used:
  9672 ;;		wreg, status,2, status,0, cstack
  9673 ;; Tracked objects:
  9674 ;;		On entry : 0/0
  9675 ;;		On exit  : 0/0
  9676 ;;		Unchanged: 0/0
  9677 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9678 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9679 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9680 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9681 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9682 ;;Total ram usage:        4 bytes
  9683 ;; Hardware stack levels used:    1
  9684 ;; Hardware stack levels required when called:    8
  9685 ;; This function calls:
  9686 ;;		_readADC
  9687 ;; This function is called by:
  9688 ;;		_ID
  9689 ;;		_sensorTest
  9690 ;; This function uses a non-reentrant model
  9691 ;;
  9692                           
  9693                           	psect	text36
  9694  003ECE                     __ptext36:
  9695                           	opt stack 0
  9696  003ECE                     _readMAG:
  9697                           	opt stack 20
  9698                           
  9699                           ;ADCFunctionality.c: 30: readADC(1);
  9700                           
  9701                           ;incstack = 0
  9702  003ECE  0E01               	movlw	1
  9703  003ED0  EC9A  F021         	call	_readADC
  9704                           
  9705                           ;ADCFunctionality.c: 31: int res = ADRESH<<8 | ADRESL;
  9706  003ED4  50C3               	movf	4035,w,c	;volatile
  9707  003ED6  CFC4 F082          	movff	4036,??_readMAG	;volatile
  9708  003EDA  0100               	movlb	0	; () banked
  9709  003EDC  6B83               	clrf	(??_readMAG+1)& (0+255),b
  9710  003EDE  C082  F083         	movff	??_readMAG,??_readMAG+1
  9711  003EE2  0100               	movlb	0	; () banked
  9712  003EE4  6B82               	clrf	??_readMAG& (0+255),b
  9713  003EE6  0100               	movlb	0	; () banked
  9714  003EE8  1182               	iorwf	??_readMAG& (0+255),w,b
  9715  003EEA  0100               	movlb	0	; () banked
  9716  003EEC  6F84               	movwf	readMAG@res& (0+255),b
  9717  003EEE  0100               	movlb	0	; () banked
  9718  003EF0  5183               	movf	(??_readMAG+1)& (0+255),w,b
  9719  003EF2  0100               	movlb	0	; () banked
  9720  003EF4  6F85               	movwf	(readMAG@res+1)& (0+255),b
  9721                           
  9722                           ; BSR set to: 0
  9723                           ;ADCFunctionality.c: 32: MAG_signal = (res < 150) ? 1 : 0;
  9724  003EF6  0100               	movlb	0	; () banked
  9725  003EF8  BF85               	btfsc	(readMAG@res+1)& (0+255),7,b
  9726  003EFA  D008               	goto	u4331
  9727  003EFC  0100               	movlb	0	; () banked
  9728  003EFE  5185               	movf	(readMAG@res+1)& (0+255),w,b
  9729  003F00  E107               	bnz	u4330
  9730  003F02  0E96               	movlw	150
  9731  003F04  0100               	movlb	0	; () banked
  9732  003F06  5D84               	subwf	readMAG@res& (0+255),w,b
  9733  003F08  B0D8               	btfsc	status,0,c
  9734  003F0A  D002               	goto	u4330
  9735  003F0C                     u4331:
  9736  003F0C  0E01               	movlw	1
  9737  003F0E  D001               	goto	u4340
  9738  003F10                     u4330:
  9739  003F10  0E00               	movlw	0
  9740  003F12                     u4340:
  9741  003F12  0100               	movlb	0	; () banked
  9742  003F14  6FDC               	movwf	_MAG_signal& (0+255),b
  9743  003F16  6BDD               	clrf	(_MAG_signal+1)& (0+255),b
  9744                           
  9745                           ; BSR set to: 0
  9746  003F18  0012               	return		;funcret
  9747  003F1A                     __end_of_readMAG:
  9748                           	opt stack 0
  9749                           tblptru	equ	0xFF8
  9750                           tblptrh	equ	0xFF7
  9751                           tblptrl	equ	0xFF6
  9752                           tablat	equ	0xFF5
  9753                           prodh	equ	0xFF4
  9754                           prodl	equ	0xFF3
  9755                           intcon	equ	0xFF2
  9756                           intcon2	equ	0xFF1
  9757                           intcon3	equ	0xFF0
  9758                           postinc0	equ	0xFEE
  9759                           wreg	equ	0xFE8
  9760                           postdec1	equ	0xFE5
  9761                           fsr1l	equ	0xFE1
  9762                           indf2	equ	0xFDF
  9763                           postinc2	equ	0xFDE
  9764                           postdec2	equ	0xFDD
  9765                           fsr2h	equ	0xFDA
  9766                           fsr2l	equ	0xFD9
  9767                           status	equ	0xFD8
  9768                           
  9769 ;; *************** function _readIR *****************
  9770 ;; Defined at:
  9771 ;;		line 23 in file "ADCFunctionality.c"
  9772 ;; Parameters:    Size  Location     Type
  9773 ;;		None
  9774 ;; Auto vars:     Size  Location     Type
  9775 ;;  res             2    4[BANK0 ] int 
  9776 ;; Return value:  Size  Location     Type
  9777 ;;                  1    wreg      void 
  9778 ;; Registers used:
  9779 ;;		wreg, status,2, status,0, cstack
  9780 ;; Tracked objects:
  9781 ;;		On entry : 0/0
  9782 ;;		On exit  : 0/0
  9783 ;;		Unchanged: 0/0
  9784 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9785 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9786 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9787 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9788 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9789 ;;Total ram usage:        4 bytes
  9790 ;; Hardware stack levels used:    1
  9791 ;; Hardware stack levels required when called:    8
  9792 ;; This function calls:
  9793 ;;		_readADC
  9794 ;; This function is called by:
  9795 ;;		_getIR
  9796 ;;		_sensorTest
  9797 ;; This function uses a non-reentrant model
  9798 ;;
  9799                           
  9800                           	psect	text37
  9801  003F1A                     __ptext37:
  9802                           	opt stack 0
  9803  003F1A                     _readIR:
  9804                           	opt stack 19
  9805                           
  9806                           ;ADCFunctionality.c: 24: readADC(0);
  9807                           
  9808                           ; BSR set to: 0
  9809                           ;incstack = 0
  9810  003F1A  0E00               	movlw	0
  9811  003F1C  EC9A  F021         	call	_readADC
  9812                           
  9813                           ;ADCFunctionality.c: 25: int res = ADRESH<<8 | ADRESL;
  9814  003F20  50C3               	movf	4035,w,c	;volatile
  9815  003F22  CFC4 F082          	movff	4036,??_readIR	;volatile
  9816  003F26  0100               	movlb	0	; () banked
  9817  003F28  6B83               	clrf	(??_readIR+1)& (0+255),b
  9818  003F2A  C082  F083         	movff	??_readIR,??_readIR+1
  9819  003F2E  0100               	movlb	0	; () banked
  9820  003F30  6B82               	clrf	??_readIR& (0+255),b
  9821  003F32  0100               	movlb	0	; () banked
  9822  003F34  1182               	iorwf	??_readIR& (0+255),w,b
  9823  003F36  0100               	movlb	0	; () banked
  9824  003F38  6F84               	movwf	readIR@res& (0+255),b
  9825  003F3A  0100               	movlb	0	; () banked
  9826  003F3C  5183               	movf	(??_readIR+1)& (0+255),w,b
  9827  003F3E  0100               	movlb	0	; () banked
  9828  003F40  6F85               	movwf	(readIR@res+1)& (0+255),b
  9829                           
  9830                           ; BSR set to: 0
  9831                           ;ADCFunctionality.c: 26: IR_signal = (res > 900) ? 1 : 0;
  9832  003F42  0100               	movlb	0	; () banked
  9833  003F44  BF85               	btfsc	(readIR@res+1)& (0+255),7,b
  9834  003F46  D00A               	goto	u3660
  9835  003F48  0E85               	movlw	133
  9836  003F4A  0100               	movlb	0	; () banked
  9837  003F4C  5D84               	subwf	readIR@res& (0+255),w,b
  9838  003F4E  0E03               	movlw	3
  9839  003F50  0100               	movlb	0	; () banked
  9840  003F52  5985               	subwfb	(readIR@res+1)& (0+255),w,b
  9841  003F54  A0D8               	btfss	status,0,c
  9842  003F56  D002               	goto	u3660
  9843  003F58  0E01               	movlw	1
  9844  003F5A  D001               	goto	u3670
  9845  003F5C                     u3660:
  9846  003F5C  0E00               	movlw	0
  9847  003F5E                     u3670:
  9848  003F5E  0100               	movlb	0	; () banked
  9849  003F60  6FDA               	movwf	_IR_signal& (0+255),b
  9850  003F62  6BDB               	clrf	(_IR_signal+1)& (0+255),b
  9851                           
  9852                           ; BSR set to: 0
  9853  003F64  0012               	return		;funcret
  9854  003F66                     __end_of_readIR:
  9855                           	opt stack 0
  9856                           tblptru	equ	0xFF8
  9857                           tblptrh	equ	0xFF7
  9858                           tblptrl	equ	0xFF6
  9859                           tablat	equ	0xFF5
  9860                           prodh	equ	0xFF4
  9861                           prodl	equ	0xFF3
  9862                           intcon	equ	0xFF2
  9863                           intcon2	equ	0xFF1
  9864                           intcon3	equ	0xFF0
  9865                           postinc0	equ	0xFEE
  9866                           wreg	equ	0xFE8
  9867                           postdec1	equ	0xFE5
  9868                           fsr1l	equ	0xFE1
  9869                           indf2	equ	0xFDF
  9870                           postinc2	equ	0xFDE
  9871                           postdec2	equ	0xFDD
  9872                           fsr2h	equ	0xFDA
  9873                           fsr2l	equ	0xFD9
  9874                           status	equ	0xFD8
  9875                           
  9876 ;; *************** function _readADC *****************
  9877 ;; Defined at:
  9878 ;;		line 15 in file "ADCFunctionality.c"
  9879 ;; Parameters:    Size  Location     Type
  9880 ;;  channel         1    wreg     unsigned char 
  9881 ;; Auto vars:     Size  Location     Type
  9882 ;;  channel         1    1[BANK0 ] unsigned char 
  9883 ;; Return value:  Size  Location     Type
  9884 ;;                  1    wreg      void 
  9885 ;; Registers used:
  9886 ;;		wreg, status,2, status,0, cstack
  9887 ;; Tracked objects:
  9888 ;;		On entry : 0/0
  9889 ;;		On exit  : 0/0
  9890 ;;		Unchanged: 0/0
  9891 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9892 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9893 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9894 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9895 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9896 ;;Total ram usage:        2 bytes
  9897 ;; Hardware stack levels used:    1
  9898 ;; Hardware stack levels required when called:    7
  9899 ;; This function calls:
  9900 ;;		Nothing
  9901 ;; This function is called by:
  9902 ;;		_readIR
  9903 ;;		_readMAG
  9904 ;; This function uses a non-reentrant model
  9905 ;;
  9906                           
  9907                           	psect	text38
  9908  004334                     __ptext38:
  9909                           	opt stack 0
  9910  004334                     _readADC:
  9911                           	opt stack 19
  9912                           
  9913                           ; BSR set to: 0
  9914                           ;incstack = 0
  9915                           ;readADC@channel stored from wreg
  9916  004334  0100               	movlb	0	; () banked
  9917  004336  6F81               	movwf	readADC@channel& (0+255),b
  9918                           
  9919                           ;ADCFunctionality.c: 17: ADCON0 = channel << 2;
  9920  004338  0100               	movlb	0	; () banked
  9921  00433A  4581               	rlncf	readADC@channel& (0+255),w,b
  9922  00433C  46E8               	rlncf	wreg,f,c
  9923  00433E  0BFC               	andlw	252
  9924  004340  6EC2               	movwf	4034,c	;volatile
  9925                           
  9926                           ; BSR set to: 0
  9927                           ;ADCFunctionality.c: 18: ADCON0bits.ADON = 1;
  9928  004342  80C2               	bsf	4034,0,c	;volatile
  9929                           
  9930                           ; BSR set to: 0
  9931                           ;ADCFunctionality.c: 19: ADCON0bits.GO = 1;
  9932  004344  82C2               	bsf	4034,1,c	;volatile
  9933                           
  9934                           ;ADCFunctionality.c: 20: while(ADCON0bits.GO_NOT_DONE){_delay((unsigned long)((5)*(32000
      +                          000/4000.0)));}
  9935  004346  D009               	goto	l5122
  9936  004348                     l5120:
  9937  004348  0E34               	movlw	52
  9938  00434A  0100               	movlb	0	; () banked
  9939  00434C  6F80               	movwf	??_readADC& (0+255),b
  9940  00434E  0EF1               	movlw	241
  9941  004350                     u7267:
  9942  004350  2EE8               	decfsz	wreg,f,c
  9943  004352  D7FE               	bra	u7267
  9944  004354  2F80               	decfsz	??_readADC& (0+255),f,b
  9945  004356  D7FC               	bra	u7267
  9946  004358  D000               	nop2	
  9947  00435A                     l5122:
  9948  00435A  A2C2               	btfss	4034,1,c	;volatile
  9949  00435C  0012               	return	
  9950  00435E  D7F4               	goto	l5120
  9951  004360                     __end_of_readADC:
  9952                           	opt stack 0
  9953                           tblptru	equ	0xFF8
  9954                           tblptrh	equ	0xFF7
  9955                           tblptrl	equ	0xFF6
  9956                           tablat	equ	0xFF5
  9957                           prodh	equ	0xFF4
  9958                           prodl	equ	0xFF3
  9959                           intcon	equ	0xFF2
  9960                           intcon2	equ	0xFF1
  9961                           intcon3	equ	0xFF0
  9962                           postinc0	equ	0xFEE
  9963                           wreg	equ	0xFE8
  9964                           postdec1	equ	0xFE5
  9965                           fsr1l	equ	0xFE1
  9966                           indf2	equ	0xFDF
  9967                           postinc2	equ	0xFDE
  9968                           postdec2	equ	0xFDD
  9969                           fsr2h	equ	0xFDA
  9970                           fsr2l	equ	0xFD9
  9971                           status	equ	0xFD8
  9972                           
  9973 ;; *************** function _algorithmTest *****************
  9974 ;; Defined at:
  9975 ;;		line 74 in file "Test.c"
  9976 ;; Parameters:    Size  Location     Type
  9977 ;;		None
  9978 ;; Auto vars:     Size  Location     Type
  9979 ;;		None
  9980 ;; Return value:  Size  Location     Type
  9981 ;;                  1    wreg      void 
  9982 ;; Registers used:
  9983 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9984 ;; Tracked objects:
  9985 ;;		On entry : 0/0
  9986 ;;		On exit  : 0/0
  9987 ;;		Unchanged: 0/0
  9988 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9989 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9990 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9991 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9992 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9993 ;;Total ram usage:        2 bytes
  9994 ;; Hardware stack levels used:    1
  9995 ;; Hardware stack levels required when called:   10
  9996 ;; This function calls:
  9997 ;;		_lcdInst
  9998 ;;		_printf
  9999 ;; This function is called by:
 10000 ;;		_Test
 10001 ;; This function uses a non-reentrant model
 10002 ;;
 10003                           
 10004                           	psect	text39
 10005  003336                     __ptext39:
 10006                           	opt stack 0
 10007  003336                     _algorithmTest:
 10008                           	opt stack 19
 10009                           
 10010                           ;Test.c: 76: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 10011                           
 10012                           ;incstack = 0
 10013  003336  0E01               	movlw	1
 10014  003338  ECA5  F022         	call	_lcdInst
 10015  00333C  0E68               	movlw	104
 10016  00333E  0100               	movlb	0	; () banked
 10017  003340  6FAB               	movwf	??_algorithmTest& (0+255),b
 10018  003342  0EE4               	movlw	228
 10019  003344                     u7277:
 10020  003344  2EE8               	decfsz	wreg,f,c
 10021  003346  D7FE               	bra	u7277
 10022  003348  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 10023  00334A  D7FC               	bra	u7277
 10024  00334C  F000               	nop	
 10025  00334E  0E80               	movlw	128
 10026  003350  ECA5  F022         	call	_lcdInst
 10027                           
 10028                           ;Test.c: 77: printf("ALGORITHM TEST");
 10029  003354  0ED8               	movlw	low STR_70
 10030  003356  0100               	movlb	0	; () banked
 10031  003358  6F8E               	movwf	printf@f& (0+255),b
 10032  00335A  0EFE               	movlw	high STR_70
 10033  00335C  0100               	movlb	0	; () banked
 10034  00335E  6F8F               	movwf	(printf@f+1)& (0+255),b
 10035  003360  EC9C  F008         	call	_printf	;wreg free
 10036                           
 10037                           ;Test.c: 78: lcdInst(0b11000000);;
 10038  003364  0EC0               	movlw	192
 10039  003366  ECA5  F022         	call	_lcdInst
 10040                           
 10041                           ;Test.c: 79: printf("PUSH TO START");
 10042  00336A  0E11               	movlw	low STR_71
 10043  00336C  0100               	movlb	0	; () banked
 10044  00336E  6F8E               	movwf	printf@f& (0+255),b
 10045  003370  0EFF               	movlw	high STR_71
 10046  003372  0100               	movlb	0	; () banked
 10047  003374  6F8F               	movwf	(printf@f+1)& (0+255),b
 10048  003376  EC9C  F008         	call	_printf	;wreg free
 10049                           
 10050                           ;Test.c: 80: _delay((unsigned long)((100)*(32000000/4000.0)));
 10051  00337A  0E05               	movlw	5
 10052  00337C  0100               	movlb	0	; () banked
 10053  00337E  6FAC               	movwf	(??_algorithmTest+1)& (0+255),b
 10054  003380  0E0F               	movlw	15
 10055  003382  0100               	movlb	0	; () banked
 10056  003384  6FAB               	movwf	??_algorithmTest& (0+255),b
 10057  003386  0EF1               	movlw	241
 10058  003388                     u7287:
 10059  003388  2EE8               	decfsz	wreg,f,c
 10060  00338A  D7FE               	bra	u7287
 10061  00338C  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 10062  00338E  D7FC               	bra	u7287
 10063  003390  2FAC               	decfsz	(??_algorithmTest+1)& (0+255),f,b
 10064  003392  D7FA               	bra	u7287
 10065  003394                     l1040:
 10066  003394  A281               	btfss	3969,1,c	;volatile
 10067  003396  D7FE               	goto	l1040
 10068  003398                     l1043:
 10069  003398  B281               	btfsc	3969,1,c	;volatile
 10070  00339A  D7FE               	goto	l1043
 10071                           
 10072                           ;Test.c: 83: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b10
      +                          000000);;
 10073  00339C  0E01               	movlw	1
 10074  00339E  ECA5  F022         	call	_lcdInst
 10075  0033A2  0E68               	movlw	104
 10076  0033A4  0100               	movlb	0	; () banked
 10077  0033A6  6FAB               	movwf	??_algorithmTest& (0+255),b
 10078  0033A8  0EE4               	movlw	228
 10079  0033AA                     u7297:
 10080  0033AA  2EE8               	decfsz	wreg,f,c
 10081  0033AC  D7FE               	bra	u7297
 10082  0033AE  2FAB               	decfsz	??_algorithmTest& (0+255),f,b
 10083  0033B0  D7FC               	bra	u7297
 10084  0033B2  F000               	nop	
 10085  0033B4  0E80               	movlw	128
 10086  0033B6  ECA5  F022         	call	_lcdInst
 10087                           
 10088                           ;Test.c: 88: printf("ALG1: 9 POPNOTAB");
 10089  0033BA  0E87               	movlw	low STR_72
 10090  0033BC  0100               	movlb	0	; () banked
 10091  0033BE  6F8E               	movwf	printf@f& (0+255),b
 10092  0033C0  0EFC               	movlw	high STR_72
 10093  0033C2  0100               	movlb	0	; () banked
 10094  0033C4  6F8F               	movwf	(printf@f+1)& (0+255),b
 10095  0033C6  EC9C  F008         	call	_printf	;wreg free
 10096                           
 10097                           ;Test.c: 95: printf("ALG2: 12 CANS");
 10098  0033CA  0EF5               	movlw	low STR_73
 10099  0033CC  0100               	movlb	0	; () banked
 10100  0033CE  6F8E               	movwf	printf@f& (0+255),b
 10101  0033D0  0EFE               	movlw	high STR_73
 10102  0033D2  0100               	movlb	0	; () banked
 10103  0033D4  6F8F               	movwf	(printf@f+1)& (0+255),b
 10104  0033D6  EC9C  F008         	call	_printf	;wreg free
 10105                           
 10106                           ;Test.c: 104: printf("ALG3: 1 CAN");
 10107  0033DA  0E62               	movlw	low STR_74
 10108  0033DC  0100               	movlb	0	; () banked
 10109  0033DE  6F8E               	movwf	printf@f& (0+255),b
 10110  0033E0  0EFF               	movlw	high STR_74
 10111  0033E2  0100               	movlb	0	; () banked
 10112  0033E4  6F8F               	movwf	(printf@f+1)& (0+255),b
 10113  0033E6  EC9C  F008         	call	_printf	;wreg free
 10114                           
 10115                           ;Test.c: 110: printf("ALG4: ALL CANS");
 10116  0033EA  0EBA               	movlw	low STR_75
 10117  0033EC  0100               	movlb	0	; () banked
 10118  0033EE  6F8E               	movwf	printf@f& (0+255),b
 10119  0033F0  0EFE               	movlw	high STR_75
 10120  0033F2  0100               	movlb	0	; () banked
 10121  0033F4  6F8F               	movwf	(printf@f+1)& (0+255),b
 10122  0033F6  EC9C  F008         	call	_printf	;wreg free
 10123                           
 10124                           ;Test.c: 115: printf("ALG5: NO CANS");
 10125  0033FA  0E03               	movlw	low STR_76
 10126  0033FC  0100               	movlb	0	; () banked
 10127  0033FE  6F8E               	movwf	printf@f& (0+255),b
 10128  003400  0EFF               	movlw	high STR_76
 10129  003402  0100               	movlb	0	; () banked
 10130  003404  6F8F               	movwf	(printf@f+1)& (0+255),b
 10131  003406  EC9C  F008         	call	_printf	;wreg free
 10132  00340A  0012               	return		;funcret
 10133  00340C                     __end_of_algorithmTest:
 10134                           	opt stack 0
 10135                           tblptru	equ	0xFF8
 10136                           tblptrh	equ	0xFF7
 10137                           tblptrl	equ	0xFF6
 10138                           tablat	equ	0xFF5
 10139                           prodh	equ	0xFF4
 10140                           prodl	equ	0xFF3
 10141                           intcon	equ	0xFF2
 10142                           intcon2	equ	0xFF1
 10143                           intcon3	equ	0xFF0
 10144                           postinc0	equ	0xFEE
 10145                           wreg	equ	0xFE8
 10146                           postdec1	equ	0xFE5
 10147                           fsr1l	equ	0xFE1
 10148                           indf2	equ	0xFDF
 10149                           postinc2	equ	0xFDE
 10150                           postdec2	equ	0xFDD
 10151                           fsr2h	equ	0xFDA
 10152                           fsr2l	equ	0xFD9
 10153                           status	equ	0xFD8
 10154                           
 10155 ;; *************** function _actuatorTest *****************
 10156 ;; Defined at:
 10157 ;;		line 160 in file "Test.c"
 10158 ;; Parameters:    Size  Location     Type
 10159 ;;		None
 10160 ;; Auto vars:     Size  Location     Type
 10161 ;;  i               1   45[BANK0 ] unsigned char 
 10162 ;;  i               1   67[BANK0 ] unsigned char 
 10163 ;;  i               1   66[BANK0 ] unsigned char 
 10164 ;;  i               1   65[BANK0 ] unsigned char 
 10165 ;;  i               1   64[BANK0 ] unsigned char 
 10166 ;;  i               1   63[BANK0 ] unsigned char 
 10167 ;;  i               1   62[BANK0 ] unsigned char 
 10168 ;;  i               1   61[BANK0 ] unsigned char 
 10169 ;;  i               1   60[BANK0 ] unsigned char 
 10170 ;;  i               1   59[BANK0 ] unsigned char 
 10171 ;;  i               1   58[BANK0 ] unsigned char 
 10172 ;;  i               1   57[BANK0 ] unsigned char 
 10173 ;;  i               1   56[BANK0 ] unsigned char 
 10174 ;;  i               1   55[BANK0 ] unsigned char 
 10175 ;;  i               1   54[BANK0 ] unsigned char 
 10176 ;;  i               1   53[BANK0 ] unsigned char 
 10177 ;;  i               1   52[BANK0 ] unsigned char 
 10178 ;;  i               1   51[BANK0 ] unsigned char 
 10179 ;;  i               1   50[BANK0 ] unsigned char 
 10180 ;;  i               1   49[BANK0 ] unsigned char 
 10181 ;;  i               1   48[BANK0 ] unsigned char 
 10182 ;;  i               1   47[BANK0 ] unsigned char 
 10183 ;;  i               1   46[BANK0 ] unsigned char 
 10184 ;;  i               2   68[BANK0 ] int 
 10185 ;; Return value:  Size  Location     Type
 10186 ;;                  1    wreg      void 
 10187 ;; Registers used:
 10188 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10189 ;; Tracked objects:
 10190 ;;		On entry : 0/0
 10191 ;;		On exit  : 0/0
 10192 ;;		Unchanged: 0/0
 10193 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10194 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10195 ;;      Locals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10196 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10197 ;;      Totals:         0      27       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10198 ;;Total ram usage:       27 bytes
 10199 ;; Hardware stack levels used:    1
 10200 ;; Hardware stack levels required when called:   10
 10201 ;; This function calls:
 10202 ;;		_lcdInst
 10203 ;;		_printf
 10204 ;;		_updateServoPosition
 10205 ;; This function is called by:
 10206 ;;		_Test
 10207 ;; This function uses a non-reentrant model
 10208 ;;
 10209                           
 10210                           	psect	text40
 10211  0008B8                     __ptext40:
 10212                           	opt stack 0
 10213  0008B8                     _actuatorTest:
 10214                           	opt stack 19
 10215                           
 10216                           ;Test.c: 162: int i = 0;
 10217                           
 10218                           ;incstack = 0
 10219  0008B8  0E00               	movlw	0
 10220  0008BA  0100               	movlb	0	; () banked
 10221  0008BC  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 10222  0008BE  0E00               	movlw	0
 10223  0008C0  6FC4               	movwf	actuatorTest@i& (0+255),b
 10224                           
 10225                           ; BSR set to: 0
 10226                           ;Test.c: 164: (INTCONbits.GIE = 1);
 10227  0008C2  8EF2               	bsf	intcon,7,c	;volatile
 10228                           
 10229                           ; BSR set to: 0
 10230                           ;Test.c: 165: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10231  0008C4  0E01               	movlw	1
 10232  0008C6  ECA5  F022         	call	_lcdInst
 10233  0008CA  0E68               	movlw	104
 10234  0008CC  0100               	movlb	0	; () banked
 10235  0008CE  6FAB               	movwf	??_actuatorTest& (0+255),b
 10236  0008D0  0EE4               	movlw	228
 10237  0008D2                     u7307:
 10238  0008D2  2EE8               	decfsz	wreg,f,c
 10239  0008D4  D7FE               	bra	u7307
 10240  0008D6  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10241  0008D8  D7FC               	bra	u7307
 10242  0008DA  F000               	nop	
 10243  0008DC  0E80               	movlw	128
 10244  0008DE  ECA5  F022         	call	_lcdInst
 10245                           
 10246                           ;Test.c: 166: printf("ACTUATORS");
 10247  0008E2  0E99               	movlw	low STR_83
 10248  0008E4  0100               	movlb	0	; () banked
 10249  0008E6  6F8E               	movwf	printf@f& (0+255),b
 10250  0008E8  0EFF               	movlw	high STR_83
 10251  0008EA  0100               	movlb	0	; () banked
 10252  0008EC  6F8F               	movwf	(printf@f+1)& (0+255),b
 10253  0008EE  EC9C  F008         	call	_printf	;wreg free
 10254                           
 10255                           ;Test.c: 167: lcdInst(0b11000000);;
 10256  0008F2  0EC0               	movlw	192
 10257  0008F4  ECA5  F022         	call	_lcdInst
 10258                           
 10259                           ;Test.c: 168: printf("PUSH TO START");
 10260  0008F8  0E11               	movlw	low STR_71
 10261  0008FA  0100               	movlb	0	; () banked
 10262  0008FC  6F8E               	movwf	printf@f& (0+255),b
 10263  0008FE  0EFF               	movlw	high STR_71
 10264  000900  0100               	movlb	0	; () banked
 10265  000902  6F8F               	movwf	(printf@f+1)& (0+255),b
 10266  000904  EC9C  F008         	call	_printf	;wreg free
 10267                           
 10268                           ;Test.c: 169: _delay((unsigned long)((100)*(32000000/4000.0)));
 10269  000908  0E05               	movlw	5
 10270  00090A  0100               	movlb	0	; () banked
 10271  00090C  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 10272  00090E  0E0F               	movlw	15
 10273  000910  0100               	movlb	0	; () banked
 10274  000912  6FAB               	movwf	??_actuatorTest& (0+255),b
 10275  000914  0EF1               	movlw	241
 10276  000916                     u7317:
 10277  000916  2EE8               	decfsz	wreg,f,c
 10278  000918  D7FE               	bra	u7317
 10279  00091A  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10280  00091C  D7FC               	bra	u7317
 10281  00091E  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 10282  000920  D7FA               	bra	u7317
 10283  000922                     l1064:
 10284  000922  A281               	btfss	3969,1,c	;volatile
 10285  000924  D7FE               	goto	l1064
 10286  000926                     l1067:
 10287  000926  B281               	btfsc	3969,1,c	;volatile
 10288  000928  D7FE               	goto	l1067
 10289                           
 10290                           ;Test.c: 172: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10291  00092A  0E01               	movlw	1
 10292  00092C  ECA5  F022         	call	_lcdInst
 10293  000930  0E68               	movlw	104
 10294  000932  0100               	movlb	0	; () banked
 10295  000934  6FAB               	movwf	??_actuatorTest& (0+255),b
 10296  000936  0EE4               	movlw	228
 10297  000938                     u7327:
 10298  000938  2EE8               	decfsz	wreg,f,c
 10299  00093A  D7FE               	bra	u7327
 10300  00093C  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10301  00093E  D7FC               	bra	u7327
 10302  000940  F000               	nop	
 10303  000942  0E80               	movlw	128
 10304  000944  ECA5  F022         	call	_lcdInst
 10305                           
 10306                           ;Test.c: 177: printf("TST: DC MOTORS");
 10307  000948  0EC9               	movlw	low STR_85
 10308  00094A  0100               	movlb	0	; () banked
 10309  00094C  6F8E               	movwf	printf@f& (0+255),b
 10310  00094E  0EFE               	movlw	high STR_85
 10311  000950  0100               	movlb	0	; () banked
 10312  000952  6F8F               	movwf	(printf@f+1)& (0+255),b
 10313  000954  EC9C  F008         	call	_printf	;wreg free
 10314                           
 10315                           ;Test.c: 178: lcdInst(0b11000000);;
 10316  000958  0EC0               	movlw	192
 10317  00095A  ECA5  F022         	call	_lcdInst
 10318                           
 10319                           ;Test.c: 179: printf("PIN RA5 HIGH.");
 10320  00095E  0EE7               	movlw	low STR_86
 10321  000960  0100               	movlb	0	; () banked
 10322  000962  6F8E               	movwf	printf@f& (0+255),b
 10323  000964  0EFE               	movlw	high STR_86
 10324  000966  0100               	movlb	0	; () banked
 10325  000968  6F8F               	movwf	(printf@f+1)& (0+255),b
 10326  00096A  EC9C  F008         	call	_printf	;wreg free
 10327                           
 10328                           ;Test.c: 180: LATAbits.LATA5 = 1;
 10329  00096E  8A89               	bsf	3977,5,c	;volatile
 10330                           
 10331                           ;Test.c: 181: for(i=0;i<5;i++){for(char i=0;i<100;i++){_delay((unsigned long)((10)*(3200
      +                          0000/4000.0)));};}
 10332  000970  0E00               	movlw	0
 10333  000972  0100               	movlb	0	; () banked
 10334  000974  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 10335  000976  0E00               	movlw	0
 10336  000978  6FC4               	movwf	actuatorTest@i& (0+255),b
 10337                           
 10338                           ; BSR set to: 0
 10339  00097A  0100               	movlb	0	; () banked
 10340  00097C  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 10341  00097E  D008               	goto	l6508
 10342  000980  0100               	movlb	0	; () banked
 10343  000982  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 10344  000984  E123               	bnz	l1071
 10345  000986  0E05               	movlw	5
 10346  000988  0100               	movlb	0	; () banked
 10347  00098A  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 10348  00098C  B0D8               	btfsc	status,0,c
 10349  00098E  D01E               	goto	l1071
 10350  000990                     l6508:
 10351                           
 10352                           ; BSR set to: 0
 10353  000990  0E00               	movlw	0
 10354  000992  0100               	movlb	0	; () banked
 10355  000994  6FAD               	movwf	actuatorTest@i_1578& (0+255),b
 10356  000996                     l6510:
 10357                           
 10358                           ; BSR set to: 0
 10359  000996  0E63               	movlw	99
 10360  000998  0100               	movlb	0	; () banked
 10361  00099A  65AD               	cpfsgt	actuatorTest@i_1578& (0+255),b
 10362  00099C  D001               	goto	l6514
 10363  00099E  D00C               	goto	l6518
 10364  0009A0                     l6514:
 10365                           
 10366                           ; BSR set to: 0
 10367  0009A0  0E68               	movlw	104
 10368  0009A2  0100               	movlb	0	; () banked
 10369  0009A4  6FAB               	movwf	??_actuatorTest& (0+255),b
 10370  0009A6  0EE4               	movlw	228
 10371  0009A8                     u7337:
 10372  0009A8  2EE8               	decfsz	wreg,f,c
 10373  0009AA  D7FE               	bra	u7337
 10374  0009AC  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10375  0009AE  D7FC               	bra	u7337
 10376  0009B0  F000               	nop	
 10377  0009B2  0100               	movlb	0	; () banked
 10378  0009B4  2BAD               	incf	actuatorTest@i_1578& (0+255),f,b
 10379  0009B6  D7EF               	goto	l6510
 10380  0009B8                     l6518:
 10381                           
 10382                           ; BSR set to: 0
 10383  0009B8  0100               	movlb	0	; () banked
 10384  0009BA  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 10385  0009BC  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 10386                           
 10387                           ; BSR set to: 0
 10388  0009BE  0100               	movlb	0	; () banked
 10389  0009C0  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 10390  0009C2  D7E6               	goto	l6508
 10391  0009C4  0100               	movlb	0	; () banked
 10392  0009C6  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 10393  0009C8  E101               	bnz	u4970
 10394  0009CA  D7DD               	goto	L7
 10395  0009CC                     u4970:
 10396  0009CC                     l1071:
 10397                           
 10398                           ; BSR set to: 0
 10399                           ;Test.c: 182: LATAbits.LATA5 = 0;
 10400  0009CC  9A89               	bcf	3977,5,c	;volatile
 10401                           
 10402                           ; BSR set to: 0
 10403                           ;Test.c: 183: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10404  0009CE  0E01               	movlw	1
 10405  0009D0  ECA5  F022         	call	_lcdInst
 10406  0009D4  0E68               	movlw	104
 10407  0009D6  0100               	movlb	0	; () banked
 10408  0009D8  6FAB               	movwf	??_actuatorTest& (0+255),b
 10409  0009DA  0EE4               	movlw	228
 10410  0009DC                     u7347:
 10411  0009DC  2EE8               	decfsz	wreg,f,c
 10412  0009DE  D7FE               	bra	u7347
 10413  0009E0  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10414  0009E2  D7FC               	bra	u7347
 10415  0009E4  F000               	nop	
 10416  0009E6  0E80               	movlw	128
 10417  0009E8  ECA5  F022         	call	_lcdInst
 10418                           
 10419                           ;Test.c: 189: printf("TST: COND SOLN'D");
 10420  0009EC  0EA9               	movlw	low STR_87
 10421  0009EE  0100               	movlb	0	; () banked
 10422  0009F0  6F8E               	movwf	printf@f& (0+255),b
 10423  0009F2  0EFC               	movlw	high STR_87
 10424  0009F4  0100               	movlb	0	; () banked
 10425  0009F6  6F8F               	movwf	(printf@f+1)& (0+255),b
 10426  0009F8  EC9C  F008         	call	_printf	;wreg free
 10427                           
 10428                           ;Test.c: 190: lcdInst(0b11000000);;
 10429  0009FC  0EC0               	movlw	192
 10430  0009FE  ECA5  F022         	call	_lcdInst
 10431                           
 10432                           ;Test.c: 191: printf("PIN RA3...");
 10433  000A02  0E6E               	movlw	low STR_88
 10434  000A04  0100               	movlb	0	; () banked
 10435  000A06  6F8E               	movwf	printf@f& (0+255),b
 10436  000A08  0EFF               	movlw	high STR_88
 10437  000A0A  0100               	movlb	0	; () banked
 10438  000A0C  6F8F               	movwf	(printf@f+1)& (0+255),b
 10439  000A0E  EC9C  F008         	call	_printf	;wreg free
 10440                           
 10441                           ;Test.c: 192: for(i=0;i<5;i++){
 10442  000A12  0E00               	movlw	0
 10443  000A14  0100               	movlb	0	; () banked
 10444  000A16  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 10445  000A18  0E00               	movlw	0
 10446  000A1A  6FC4               	movwf	actuatorTest@i& (0+255),b
 10447                           
 10448                           ; BSR set to: 0
 10449  000A1C  0100               	movlb	0	; () banked
 10450  000A1E  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 10451  000A20  D008               	goto	l1074
 10452  000A22  0100               	movlb	0	; () banked
 10453  000A24  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 10454  000A26  E12C               	bnz	l1075
 10455  000A28  0E05               	movlw	5
 10456  000A2A  0100               	movlb	0	; () banked
 10457  000A2C  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 10458  000A2E  B0D8               	btfsc	status,0,c
 10459  000A30  D027               	goto	l1075
 10460  000A32                     l1074:
 10461                           
 10462                           ; BSR set to: 0
 10463                           ;Test.c: 193: LATAbits.LATA3 = 1;
 10464  000A32  8689               	bsf	3977,3,c	;volatile
 10465                           
 10466                           ; BSR set to: 0
 10467                           ;Test.c: 194: _delay((unsigned long)((300)*(32000000/4000.0)));
 10468  000A34  0E0D               	movlw	13
 10469  000A36  0100               	movlb	0	; () banked
 10470  000A38  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 10471  000A3A  0E2D               	movlw	45
 10472  000A3C  0100               	movlb	0	; () banked
 10473  000A3E  6FAB               	movwf	??_actuatorTest& (0+255),b
 10474  000A40  0ED7               	movlw	215
 10475  000A42                     u7357:
 10476  000A42  2EE8               	decfsz	wreg,f,c
 10477  000A44  D7FE               	bra	u7357
 10478  000A46  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10479  000A48  D7FC               	bra	u7357
 10480  000A4A  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 10481  000A4C  D7FA               	bra	u7357
 10482  000A4E  D000               	nop2	
 10483                           
 10484                           ;Test.c: 195: LATAbits.LATA3 = ~1;
 10485  000A50  9689               	bcf	3977,3,c	;volatile
 10486                           
 10487                           ;Test.c: 196: _delay((unsigned long)((1000-300)*(32000000/4000.0)));
 10488  000A52  0E1D               	movlw	29
 10489  000A54  0100               	movlb	0	; () banked
 10490  000A56  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 10491  000A58  0E69               	movlw	105
 10492  000A5A  0100               	movlb	0	; () banked
 10493  000A5C  6FAB               	movwf	??_actuatorTest& (0+255),b
 10494  000A5E  0EA5               	movlw	165
 10495  000A60                     u7367:
 10496  000A60  2EE8               	decfsz	wreg,f,c
 10497  000A62  D7FE               	bra	u7367
 10498  000A64  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10499  000A66  D7FC               	bra	u7367
 10500  000A68  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 10501  000A6A  D7FA               	bra	u7367
 10502  000A6C  0100               	movlb	0	; () banked
 10503  000A6E  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 10504  000A70  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 10505  000A72  0100               	movlb	0	; () banked
 10506  000A74  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 10507  000A76  D7DD               	goto	l1074
 10508  000A78  0100               	movlb	0	; () banked
 10509  000A7A  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 10510  000A7C  E101               	bnz	u4990
 10511  000A7E  D7D4               	goto	L8
 10512  000A80                     u4990:
 10513  000A80                     l1075:
 10514                           
 10515                           ; BSR set to: 0
 10516                           ;Test.c: 197: }
 10517                           ;Test.c: 198: LATAbits.LATA3 = ~1;
 10518  000A80  9689               	bcf	3977,3,c	;volatile
 10519                           
 10520                           ; BSR set to: 0
 10521                           ;Test.c: 199: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10522  000A82  0E01               	movlw	1
 10523  000A84  ECA5  F022         	call	_lcdInst
 10524  000A88  0E68               	movlw	104
 10525  000A8A  0100               	movlb	0	; () banked
 10526  000A8C  6FAB               	movwf	??_actuatorTest& (0+255),b
 10527  000A8E  0EE4               	movlw	228
 10528  000A90                     u7377:
 10529  000A90  2EE8               	decfsz	wreg,f,c
 10530  000A92  D7FE               	bra	u7377
 10531  000A94  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10532  000A96  D7FC               	bra	u7377
 10533  000A98  F000               	nop	
 10534  000A9A  0E80               	movlw	128
 10535  000A9C  ECA5  F022         	call	_lcdInst
 10536                           
 10537                           ;Test.c: 205: printf("TST: PUSH SOLN'D");
 10538  000AA0  0EBA               	movlw	low STR_89
 10539  000AA2  0100               	movlb	0	; () banked
 10540  000AA4  6F8E               	movwf	printf@f& (0+255),b
 10541  000AA6  0EFC               	movlw	high STR_89
 10542  000AA8  0100               	movlb	0	; () banked
 10543  000AAA  6F8F               	movwf	(printf@f+1)& (0+255),b
 10544  000AAC  EC9C  F008         	call	_printf	;wreg free
 10545                           
 10546                           ;Test.c: 206: lcdInst(0b11000000);;
 10547  000AB0  0EC0               	movlw	192
 10548  000AB2  ECA5  F022         	call	_lcdInst
 10549                           
 10550                           ;Test.c: 207: printf("PIN RA4...");
 10551  000AB6  0E79               	movlw	low STR_90
 10552  000AB8  0100               	movlb	0	; () banked
 10553  000ABA  6F8E               	movwf	printf@f& (0+255),b
 10554  000ABC  0EFF               	movlw	high STR_90
 10555  000ABE  0100               	movlb	0	; () banked
 10556  000AC0  6F8F               	movwf	(printf@f+1)& (0+255),b
 10557  000AC2  EC9C  F008         	call	_printf	;wreg free
 10558                           
 10559                           ;Test.c: 208: for(i=0;i<5;i++){
 10560  000AC6  0E00               	movlw	0
 10561  000AC8  0100               	movlb	0	; () banked
 10562  000ACA  6FC5               	movwf	(actuatorTest@i+1)& (0+255),b
 10563  000ACC  0E00               	movlw	0
 10564  000ACE  6FC4               	movwf	actuatorTest@i& (0+255),b
 10565                           
 10566                           ; BSR set to: 0
 10567  000AD0  0100               	movlb	0	; () banked
 10568  000AD2  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 10569  000AD4  D008               	goto	l1076
 10570  000AD6  0100               	movlb	0	; () banked
 10571  000AD8  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 10572  000ADA  E12C               	bnz	l1077
 10573  000ADC  0E05               	movlw	5
 10574  000ADE  0100               	movlb	0	; () banked
 10575  000AE0  5DC4               	subwf	actuatorTest@i& (0+255),w,b
 10576  000AE2  B0D8               	btfsc	status,0,c
 10577  000AE4  D027               	goto	l1077
 10578  000AE6                     l1076:
 10579                           
 10580                           ; BSR set to: 0
 10581                           ;Test.c: 209: LATAbits.LATA4 = 1;
 10582  000AE6  8889               	bsf	3977,4,c	;volatile
 10583                           
 10584                           ; BSR set to: 0
 10585                           ;Test.c: 210: _delay((unsigned long)((300)*(32000000/4000.0)));
 10586  000AE8  0E0D               	movlw	13
 10587  000AEA  0100               	movlb	0	; () banked
 10588  000AEC  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 10589  000AEE  0E2D               	movlw	45
 10590  000AF0  0100               	movlb	0	; () banked
 10591  000AF2  6FAB               	movwf	??_actuatorTest& (0+255),b
 10592  000AF4  0ED7               	movlw	215
 10593  000AF6                     u7387:
 10594  000AF6  2EE8               	decfsz	wreg,f,c
 10595  000AF8  D7FE               	bra	u7387
 10596  000AFA  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10597  000AFC  D7FC               	bra	u7387
 10598  000AFE  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 10599  000B00  D7FA               	bra	u7387
 10600  000B02  D000               	nop2	
 10601                           
 10602                           ;Test.c: 211: LATAbits.LATA4 = ~1;
 10603  000B04  9889               	bcf	3977,4,c	;volatile
 10604                           
 10605                           ;Test.c: 212: _delay((unsigned long)((1000-300)*(32000000/4000.0)));
 10606  000B06  0E1D               	movlw	29
 10607  000B08  0100               	movlb	0	; () banked
 10608  000B0A  6FAC               	movwf	(??_actuatorTest+1)& (0+255),b
 10609  000B0C  0E69               	movlw	105
 10610  000B0E  0100               	movlb	0	; () banked
 10611  000B10  6FAB               	movwf	??_actuatorTest& (0+255),b
 10612  000B12  0EA5               	movlw	165
 10613  000B14                     u7397:
 10614  000B14  2EE8               	decfsz	wreg,f,c
 10615  000B16  D7FE               	bra	u7397
 10616  000B18  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10617  000B1A  D7FC               	bra	u7397
 10618  000B1C  2FAC               	decfsz	(??_actuatorTest+1)& (0+255),f,b
 10619  000B1E  D7FA               	bra	u7397
 10620  000B20  0100               	movlb	0	; () banked
 10621  000B22  4BC4               	infsnz	actuatorTest@i& (0+255),f,b
 10622  000B24  2BC5               	incf	(actuatorTest@i+1)& (0+255),f,b
 10623  000B26  0100               	movlb	0	; () banked
 10624  000B28  BFC5               	btfsc	(actuatorTest@i+1)& (0+255),7,b
 10625  000B2A  D7DD               	goto	l1076
 10626  000B2C  0100               	movlb	0	; () banked
 10627  000B2E  51C5               	movf	(actuatorTest@i+1)& (0+255),w,b
 10628  000B30  E101               	bnz	u5010
 10629  000B32  D7D4               	goto	L9
 10630  000B34                     u5010:
 10631  000B34                     l1077:
 10632                           
 10633                           ; BSR set to: 0
 10634                           ;Test.c: 213: }
 10635                           ;Test.c: 214: LATAbits.LATA4 = ~1;
 10636  000B34  9889               	bcf	3977,4,c	;volatile
 10637                           
 10638                           ; BSR set to: 0
 10639                           ;Test.c: 215: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 10640  000B36  0E01               	movlw	1
 10641  000B38  ECA5  F022         	call	_lcdInst
 10642  000B3C  0E68               	movlw	104
 10643  000B3E  0100               	movlb	0	; () banked
 10644  000B40  6FAB               	movwf	??_actuatorTest& (0+255),b
 10645  000B42  0EE4               	movlw	228
 10646  000B44                     u7407:
 10647  000B44  2EE8               	decfsz	wreg,f,c
 10648  000B46  D7FE               	bra	u7407
 10649  000B48  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10650  000B4A  D7FC               	bra	u7407
 10651  000B4C  F000               	nop	
 10652  000B4E  0E80               	movlw	128
 10653  000B50  ECA5  F022         	call	_lcdInst
 10654                           
 10655                           ;Test.c: 218: machine_state = Sorting_state;
 10656  000B54  0E01               	movlw	1
 10657  000B56  0100               	movlb	0	; () banked
 10658  000B58  6FFC               	movwf	_machine_state& (0+255),b
 10659                           
 10660                           ; BSR set to: 0
 10661                           ;Test.c: 219: was_low_1 = 0;
 10662  000B5A  0E00               	movlw	0
 10663  000B5C  6E7A               	movwf	_was_low_1+1,c	;volatile
 10664  000B5E  0E00               	movlw	0
 10665  000B60  6E79               	movwf	_was_low_1,c	;volatile
 10666                           
 10667                           ; BSR set to: 0
 10668                           ;Test.c: 220: was_low_1 = 0;
 10669  000B62  0E00               	movlw	0
 10670  000B64  6E7A               	movwf	_was_low_1+1,c	;volatile
 10671  000B66  0E00               	movlw	0
 10672  000B68  6E79               	movwf	_was_low_1,c	;volatile
 10673                           
 10674                           ; BSR set to: 0
 10675                           ;Test.c: 227: printf("TST: PAN SERVO");
 10676  000B6A  0EAB               	movlw	low STR_91
 10677  000B6C  0100               	movlb	0	; () banked
 10678  000B6E  6F8E               	movwf	printf@f& (0+255),b
 10679  000B70  0EFE               	movlw	high STR_91
 10680  000B72  0100               	movlb	0	; () banked
 10681  000B74  6F8F               	movwf	(printf@f+1)& (0+255),b
 10682  000B76  EC9C  F008         	call	_printf	;wreg free
 10683                           
 10684                           ;Test.c: 228: lcdInst(0b11000000);;
 10685  000B7A  0EC0               	movlw	192
 10686  000B7C  ECA5  F022         	call	_lcdInst
 10687                           
 10688                           ;Test.c: 229: printf("MIDDLE -- 2s    ");
 10689  000B80  0E32               	movlw	low STR_92
 10690  000B82  0100               	movlb	0	; () banked
 10691  000B84  6F8E               	movwf	printf@f& (0+255),b
 10692  000B86  0EFC               	movlw	high STR_92
 10693  000B88  0100               	movlb	0	; () banked
 10694  000B8A  6F8F               	movwf	(printf@f+1)& (0+255),b
 10695  000B8C  EC9C  F008         	call	_printf	;wreg free
 10696                           
 10697                           ;Test.c: 230: updateServoPosition(1250, 1);
 10698  000B90  0E04               	movlw	4
 10699  000B92  0100               	movlb	0	; () banked
 10700  000B94  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 10701  000B96  0EE2               	movlw	226
 10702  000B98  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 10703  000B9A  0E00               	movlw	0
 10704  000B9C  0100               	movlb	0	; () banked
 10705  000B9E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 10706  000BA0  0E01               	movlw	1
 10707  000BA2  6F82               	movwf	updateServoPosition@timer& (0+255),b
 10708  000BA4  ECFF  F01C         	call	_updateServoPosition	;wreg free
 10709                           
 10710                           ;Test.c: 231: TMR1ON = 1;
 10711  000BA8  80CD               	bsf	4045,0,c	;volatile
 10712                           
 10713                           ;Test.c: 232: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 10714  000BAA  0E00               	movlw	0
 10715  000BAC  0100               	movlb	0	; () banked
 10716  000BAE  6FAE               	movwf	actuatorTest@i_1585& (0+255),b
 10717  000BB0                     l6594:
 10718                           
 10719                           ; BSR set to: 0
 10720  000BB0  0E63               	movlw	99
 10721  000BB2  0100               	movlb	0	; () banked
 10722  000BB4  65AE               	cpfsgt	actuatorTest@i_1585& (0+255),b
 10723  000BB6  D001               	goto	l6598
 10724  000BB8  D00C               	goto	l6602
 10725  000BBA                     l6598:
 10726                           
 10727                           ; BSR set to: 0
 10728  000BBA  0E68               	movlw	104
 10729  000BBC  0100               	movlb	0	; () banked
 10730  000BBE  6FAB               	movwf	??_actuatorTest& (0+255),b
 10731  000BC0  0EE4               	movlw	228
 10732  000BC2                     u7417:
 10733  000BC2  2EE8               	decfsz	wreg,f,c
 10734  000BC4  D7FE               	bra	u7417
 10735  000BC6  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10736  000BC8  D7FC               	bra	u7417
 10737  000BCA  F000               	nop	
 10738  000BCC  0100               	movlb	0	; () banked
 10739  000BCE  2BAE               	incf	actuatorTest@i_1585& (0+255),f,b
 10740  000BD0  D7EF               	goto	l6594
 10741  000BD2                     l6602:
 10742                           
 10743                           ; BSR set to: 0
 10744  000BD2  0E00               	movlw	0
 10745  000BD4  0100               	movlb	0	; () banked
 10746  000BD6  6FAF               	movwf	actuatorTest@i_1586& (0+255),b
 10747  000BD8                     l6604:
 10748                           
 10749                           ; BSR set to: 0
 10750  000BD8  0E63               	movlw	99
 10751  000BDA  0100               	movlb	0	; () banked
 10752  000BDC  65AF               	cpfsgt	actuatorTest@i_1586& (0+255),b
 10753  000BDE  D001               	goto	l6608
 10754  000BE0  D00C               	goto	l6612
 10755  000BE2                     l6608:
 10756                           
 10757                           ; BSR set to: 0
 10758  000BE2  0E68               	movlw	104
 10759  000BE4  0100               	movlb	0	; () banked
 10760  000BE6  6FAB               	movwf	??_actuatorTest& (0+255),b
 10761  000BE8  0EE4               	movlw	228
 10762  000BEA                     u7427:
 10763  000BEA  2EE8               	decfsz	wreg,f,c
 10764  000BEC  D7FE               	bra	u7427
 10765  000BEE  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10766  000BF0  D7FC               	bra	u7427
 10767  000BF2  F000               	nop	
 10768  000BF4  0100               	movlb	0	; () banked
 10769  000BF6  2BAF               	incf	actuatorTest@i_1586& (0+255),f,b
 10770  000BF8  D7EF               	goto	l6604
 10771  000BFA                     l6612:
 10772                           
 10773                           ; BSR set to: 0
 10774                           ;Test.c: 234: lcdInst(0b10000000);;lcdInst(0b11000000);;
 10775  000BFA  0E80               	movlw	128
 10776  000BFC  ECA5  F022         	call	_lcdInst
 10777  000C00  0EC0               	movlw	192
 10778  000C02  ECA5  F022         	call	_lcdInst
 10779                           
 10780                           ;Test.c: 235: printf("RIGHT -- 2s     ");
 10781  000C06  0E21               	movlw	low STR_93
 10782  000C08  0100               	movlb	0	; () banked
 10783  000C0A  6F8E               	movwf	printf@f& (0+255),b
 10784  000C0C  0EFC               	movlw	high STR_93
 10785  000C0E  0100               	movlb	0	; () banked
 10786  000C10  6F8F               	movwf	(printf@f+1)& (0+255),b
 10787  000C12  EC9C  F008         	call	_printf	;wreg free
 10788                           
 10789                           ;Test.c: 236: updateServoPosition(500, 1);
 10790  000C16  0E01               	movlw	1
 10791  000C18  0100               	movlb	0	; () banked
 10792  000C1A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 10793  000C1C  0EF4               	movlw	244
 10794  000C1E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 10795  000C20  0E00               	movlw	0
 10796  000C22  0100               	movlb	0	; () banked
 10797  000C24  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 10798  000C26  0E01               	movlw	1
 10799  000C28  6F82               	movwf	updateServoPosition@timer& (0+255),b
 10800  000C2A  ECFF  F01C         	call	_updateServoPosition	;wreg free
 10801                           
 10802                           ;Test.c: 237: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 10803  000C2E  0E00               	movlw	0
 10804  000C30  0100               	movlb	0	; () banked
 10805  000C32  6FB0               	movwf	actuatorTest@i_1588& (0+255),b
 10806  000C34                     l6620:
 10807                           
 10808                           ; BSR set to: 0
 10809  000C34  0E63               	movlw	99
 10810  000C36  0100               	movlb	0	; () banked
 10811  000C38  65B0               	cpfsgt	actuatorTest@i_1588& (0+255),b
 10812  000C3A  D001               	goto	l6624
 10813  000C3C  D00C               	goto	l6628
 10814  000C3E                     l6624:
 10815                           
 10816                           ; BSR set to: 0
 10817  000C3E  0E68               	movlw	104
 10818  000C40  0100               	movlb	0	; () banked
 10819  000C42  6FAB               	movwf	??_actuatorTest& (0+255),b
 10820  000C44  0EE4               	movlw	228
 10821  000C46                     u7437:
 10822  000C46  2EE8               	decfsz	wreg,f,c
 10823  000C48  D7FE               	bra	u7437
 10824  000C4A  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10825  000C4C  D7FC               	bra	u7437
 10826  000C4E  F000               	nop	
 10827  000C50  0100               	movlb	0	; () banked
 10828  000C52  2BB0               	incf	actuatorTest@i_1588& (0+255),f,b
 10829  000C54  D7EF               	goto	l6620
 10830  000C56                     l6628:
 10831                           
 10832                           ; BSR set to: 0
 10833  000C56  0E00               	movlw	0
 10834  000C58  0100               	movlb	0	; () banked
 10835  000C5A  6FB1               	movwf	actuatorTest@i_1589& (0+255),b
 10836  000C5C                     l6630:
 10837                           
 10838                           ; BSR set to: 0
 10839  000C5C  0E63               	movlw	99
 10840  000C5E  0100               	movlb	0	; () banked
 10841  000C60  65B1               	cpfsgt	actuatorTest@i_1589& (0+255),b
 10842  000C62  D001               	goto	l6634
 10843  000C64  D00C               	goto	l6638
 10844  000C66                     l6634:
 10845                           
 10846                           ; BSR set to: 0
 10847  000C66  0E68               	movlw	104
 10848  000C68  0100               	movlb	0	; () banked
 10849  000C6A  6FAB               	movwf	??_actuatorTest& (0+255),b
 10850  000C6C  0EE4               	movlw	228
 10851  000C6E                     u7447:
 10852  000C6E  2EE8               	decfsz	wreg,f,c
 10853  000C70  D7FE               	bra	u7447
 10854  000C72  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10855  000C74  D7FC               	bra	u7447
 10856  000C76  F000               	nop	
 10857  000C78  0100               	movlb	0	; () banked
 10858  000C7A  2BB1               	incf	actuatorTest@i_1589& (0+255),f,b
 10859  000C7C  D7EF               	goto	l6630
 10860  000C7E                     l6638:
 10861                           
 10862                           ; BSR set to: 0
 10863                           ;Test.c: 239: lcdInst(0b10000000);;lcdInst(0b11000000);;
 10864  000C7E  0E80               	movlw	128
 10865  000C80  ECA5  F022         	call	_lcdInst
 10866  000C84  0EC0               	movlw	192
 10867  000C86  ECA5  F022         	call	_lcdInst
 10868                           
 10869                           ;Test.c: 240: printf("LEFT -- 2s      ");
 10870  000C8A  0EFF               	movlw	low STR_94
 10871  000C8C  0100               	movlb	0	; () banked
 10872  000C8E  6F8E               	movwf	printf@f& (0+255),b
 10873  000C90  0EFB               	movlw	high STR_94
 10874  000C92  0100               	movlb	0	; () banked
 10875  000C94  6F8F               	movwf	(printf@f+1)& (0+255),b
 10876  000C96  EC9C  F008         	call	_printf	;wreg free
 10877                           
 10878                           ;Test.c: 241: updateServoPosition(2000, 1);
 10879  000C9A  0E07               	movlw	7
 10880  000C9C  0100               	movlb	0	; () banked
 10881  000C9E  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 10882  000CA0  0ED0               	movlw	208
 10883  000CA2  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 10884  000CA4  0E00               	movlw	0
 10885  000CA6  0100               	movlb	0	; () banked
 10886  000CA8  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 10887  000CAA  0E01               	movlw	1
 10888  000CAC  6F82               	movwf	updateServoPosition@timer& (0+255),b
 10889  000CAE  ECFF  F01C         	call	_updateServoPosition	;wreg free
 10890                           
 10891                           ;Test.c: 242: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 10892  000CB2  0E00               	movlw	0
 10893  000CB4  0100               	movlb	0	; () banked
 10894  000CB6  6FB2               	movwf	actuatorTest@i_1591& (0+255),b
 10895  000CB8                     l6646:
 10896                           
 10897                           ; BSR set to: 0
 10898  000CB8  0E63               	movlw	99
 10899  000CBA  0100               	movlb	0	; () banked
 10900  000CBC  65B2               	cpfsgt	actuatorTest@i_1591& (0+255),b
 10901  000CBE  D001               	goto	l6650
 10902  000CC0  D00C               	goto	l6654
 10903  000CC2                     l6650:
 10904                           
 10905                           ; BSR set to: 0
 10906  000CC2  0E68               	movlw	104
 10907  000CC4  0100               	movlb	0	; () banked
 10908  000CC6  6FAB               	movwf	??_actuatorTest& (0+255),b
 10909  000CC8  0EE4               	movlw	228
 10910  000CCA                     u7457:
 10911  000CCA  2EE8               	decfsz	wreg,f,c
 10912  000CCC  D7FE               	bra	u7457
 10913  000CCE  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10914  000CD0  D7FC               	bra	u7457
 10915  000CD2  F000               	nop	
 10916  000CD4  0100               	movlb	0	; () banked
 10917  000CD6  2BB2               	incf	actuatorTest@i_1591& (0+255),f,b
 10918  000CD8  D7EF               	goto	l6646
 10919  000CDA                     l6654:
 10920                           
 10921                           ; BSR set to: 0
 10922  000CDA  0E00               	movlw	0
 10923  000CDC  0100               	movlb	0	; () banked
 10924  000CDE  6FB3               	movwf	actuatorTest@i_1592& (0+255),b
 10925  000CE0                     l6656:
 10926                           
 10927                           ; BSR set to: 0
 10928  000CE0  0E63               	movlw	99
 10929  000CE2  0100               	movlb	0	; () banked
 10930  000CE4  65B3               	cpfsgt	actuatorTest@i_1592& (0+255),b
 10931  000CE6  D001               	goto	l6660
 10932  000CE8  D00C               	goto	l6664
 10933  000CEA                     l6660:
 10934                           
 10935                           ; BSR set to: 0
 10936  000CEA  0E68               	movlw	104
 10937  000CEC  0100               	movlb	0	; () banked
 10938  000CEE  6FAB               	movwf	??_actuatorTest& (0+255),b
 10939  000CF0  0EE4               	movlw	228
 10940  000CF2                     u7467:
 10941  000CF2  2EE8               	decfsz	wreg,f,c
 10942  000CF4  D7FE               	bra	u7467
 10943  000CF6  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 10944  000CF8  D7FC               	bra	u7467
 10945  000CFA  F000               	nop	
 10946  000CFC  0100               	movlb	0	; () banked
 10947  000CFE  2BB3               	incf	actuatorTest@i_1592& (0+255),f,b
 10948  000D00  D7EF               	goto	l6656
 10949  000D02                     l6664:
 10950                           
 10951                           ; BSR set to: 0
 10952                           ;Test.c: 244: lcdInst(0b10000000);;lcdInst(0b11000000);;
 10953  000D02  0E80               	movlw	128
 10954  000D04  ECA5  F022         	call	_lcdInst
 10955  000D08  0EC0               	movlw	192
 10956  000D0A  ECA5  F022         	call	_lcdInst
 10957                           
 10958                           ;Test.c: 245: printf("MID-LEFT -- 2s  ");
 10959  000D0E  0E54               	movlw	low STR_95
 10960  000D10  0100               	movlb	0	; () banked
 10961  000D12  6F8E               	movwf	printf@f& (0+255),b
 10962  000D14  0EFC               	movlw	high STR_95
 10963  000D16  0100               	movlb	0	; () banked
 10964  000D18  6F8F               	movwf	(printf@f+1)& (0+255),b
 10965  000D1A  EC9C  F008         	call	_printf	;wreg free
 10966                           
 10967                           ;Test.c: 246: updateServoPosition(1650, 1);
 10968  000D1E  0E06               	movlw	6
 10969  000D20  0100               	movlb	0	; () banked
 10970  000D22  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 10971  000D24  0E72               	movlw	114
 10972  000D26  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 10973  000D28  0E00               	movlw	0
 10974  000D2A  0100               	movlb	0	; () banked
 10975  000D2C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 10976  000D2E  0E01               	movlw	1
 10977  000D30  6F82               	movwf	updateServoPosition@timer& (0+255),b
 10978  000D32  ECFF  F01C         	call	_updateServoPosition	;wreg free
 10979                           
 10980                           ;Test.c: 247: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 10981  000D36  0E00               	movlw	0
 10982  000D38  0100               	movlb	0	; () banked
 10983  000D3A  6FB4               	movwf	actuatorTest@i_1594& (0+255),b
 10984  000D3C                     l6672:
 10985                           
 10986                           ; BSR set to: 0
 10987  000D3C  0E63               	movlw	99
 10988  000D3E  0100               	movlb	0	; () banked
 10989  000D40  65B4               	cpfsgt	actuatorTest@i_1594& (0+255),b
 10990  000D42  D001               	goto	l6676
 10991  000D44  D00C               	goto	l6680
 10992  000D46                     l6676:
 10993                           
 10994                           ; BSR set to: 0
 10995  000D46  0E68               	movlw	104
 10996  000D48  0100               	movlb	0	; () banked
 10997  000D4A  6FAB               	movwf	??_actuatorTest& (0+255),b
 10998  000D4C  0EE4               	movlw	228
 10999  000D4E                     u7477:
 11000  000D4E  2EE8               	decfsz	wreg,f,c
 11001  000D50  D7FE               	bra	u7477
 11002  000D52  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11003  000D54  D7FC               	bra	u7477
 11004  000D56  F000               	nop	
 11005  000D58  0100               	movlb	0	; () banked
 11006  000D5A  2BB4               	incf	actuatorTest@i_1594& (0+255),f,b
 11007  000D5C  D7EF               	goto	l6672
 11008  000D5E                     l6680:
 11009                           
 11010                           ; BSR set to: 0
 11011  000D5E  0E00               	movlw	0
 11012  000D60  0100               	movlb	0	; () banked
 11013  000D62  6FB5               	movwf	actuatorTest@i_1595& (0+255),b
 11014  000D64                     l6682:
 11015                           
 11016                           ; BSR set to: 0
 11017  000D64  0E63               	movlw	99
 11018  000D66  0100               	movlb	0	; () banked
 11019  000D68  65B5               	cpfsgt	actuatorTest@i_1595& (0+255),b
 11020  000D6A  D001               	goto	l6686
 11021  000D6C  D00C               	goto	l6690
 11022  000D6E                     l6686:
 11023                           
 11024                           ; BSR set to: 0
 11025  000D6E  0E68               	movlw	104
 11026  000D70  0100               	movlb	0	; () banked
 11027  000D72  6FAB               	movwf	??_actuatorTest& (0+255),b
 11028  000D74  0EE4               	movlw	228
 11029  000D76                     u7487:
 11030  000D76  2EE8               	decfsz	wreg,f,c
 11031  000D78  D7FE               	bra	u7487
 11032  000D7A  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11033  000D7C  D7FC               	bra	u7487
 11034  000D7E  F000               	nop	
 11035  000D80  0100               	movlb	0	; () banked
 11036  000D82  2BB5               	incf	actuatorTest@i_1595& (0+255),f,b
 11037  000D84  D7EF               	goto	l6682
 11038  000D86                     l6690:
 11039                           
 11040                           ; BSR set to: 0
 11041                           ;Test.c: 249: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11042  000D86  0E80               	movlw	128
 11043  000D88  ECA5  F022         	call	_lcdInst
 11044  000D8C  0EC0               	movlw	192
 11045  000D8E  ECA5  F022         	call	_lcdInst
 11046                           
 11047                           ;Test.c: 250: printf("MID-RIGHT -- 2s ");
 11048  000D92  0E65               	movlw	low STR_96
 11049  000D94  0100               	movlb	0	; () banked
 11050  000D96  6F8E               	movwf	printf@f& (0+255),b
 11051  000D98  0EFC               	movlw	high STR_96
 11052  000D9A  0100               	movlb	0	; () banked
 11053  000D9C  6F8F               	movwf	(printf@f+1)& (0+255),b
 11054  000D9E  EC9C  F008         	call	_printf	;wreg free
 11055                           
 11056                           ;Test.c: 251: updateServoPosition(700, 1);
 11057  000DA2  0E02               	movlw	2
 11058  000DA4  0100               	movlb	0	; () banked
 11059  000DA6  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11060  000DA8  0EBC               	movlw	188
 11061  000DAA  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11062  000DAC  0E00               	movlw	0
 11063  000DAE  0100               	movlb	0	; () banked
 11064  000DB0  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11065  000DB2  0E01               	movlw	1
 11066  000DB4  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11067  000DB6  ECFF  F01C         	call	_updateServoPosition	;wreg free
 11068                           
 11069                           ;Test.c: 252: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11070  000DBA  0E00               	movlw	0
 11071  000DBC  0100               	movlb	0	; () banked
 11072  000DBE  6FB6               	movwf	actuatorTest@i_1597& (0+255),b
 11073  000DC0                     l6698:
 11074                           
 11075                           ; BSR set to: 0
 11076  000DC0  0E63               	movlw	99
 11077  000DC2  0100               	movlb	0	; () banked
 11078  000DC4  65B6               	cpfsgt	actuatorTest@i_1597& (0+255),b
 11079  000DC6  D001               	goto	l6702
 11080  000DC8  D00C               	goto	l6706
 11081  000DCA                     l6702:
 11082                           
 11083                           ; BSR set to: 0
 11084  000DCA  0E68               	movlw	104
 11085  000DCC  0100               	movlb	0	; () banked
 11086  000DCE  6FAB               	movwf	??_actuatorTest& (0+255),b
 11087  000DD0  0EE4               	movlw	228
 11088  000DD2                     u7497:
 11089  000DD2  2EE8               	decfsz	wreg,f,c
 11090  000DD4  D7FE               	bra	u7497
 11091  000DD6  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11092  000DD8  D7FC               	bra	u7497
 11093  000DDA  F000               	nop	
 11094  000DDC  0100               	movlb	0	; () banked
 11095  000DDE  2BB6               	incf	actuatorTest@i_1597& (0+255),f,b
 11096  000DE0  D7EF               	goto	l6698
 11097  000DE2                     l6706:
 11098                           
 11099                           ; BSR set to: 0
 11100  000DE2  0E00               	movlw	0
 11101  000DE4  0100               	movlb	0	; () banked
 11102  000DE6  6FB7               	movwf	actuatorTest@i_1598& (0+255),b
 11103  000DE8                     l6708:
 11104                           
 11105                           ; BSR set to: 0
 11106  000DE8  0E63               	movlw	99
 11107  000DEA  0100               	movlb	0	; () banked
 11108  000DEC  65B7               	cpfsgt	actuatorTest@i_1598& (0+255),b
 11109  000DEE  D001               	goto	l6712
 11110  000DF0  D00C               	goto	l6716
 11111  000DF2                     l6712:
 11112                           
 11113                           ; BSR set to: 0
 11114  000DF2  0E68               	movlw	104
 11115  000DF4  0100               	movlb	0	; () banked
 11116  000DF6  6FAB               	movwf	??_actuatorTest& (0+255),b
 11117  000DF8  0EE4               	movlw	228
 11118  000DFA                     u7507:
 11119  000DFA  2EE8               	decfsz	wreg,f,c
 11120  000DFC  D7FE               	bra	u7507
 11121  000DFE  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11122  000E00  D7FC               	bra	u7507
 11123  000E02  F000               	nop	
 11124  000E04  0100               	movlb	0	; () banked
 11125  000E06  2BB7               	incf	actuatorTest@i_1598& (0+255),f,b
 11126  000E08  D7EF               	goto	l6708
 11127  000E0A                     l6716:
 11128                           
 11129                           ; BSR set to: 0
 11130                           ;Test.c: 254: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11131  000E0A  0E80               	movlw	128
 11132  000E0C  ECA5  F022         	call	_lcdInst
 11133  000E10  0EC0               	movlw	192
 11134  000E12  ECA5  F022         	call	_lcdInst
 11135                           
 11136                           ;Test.c: 255: printf("MID -- 2s       ");
 11137  000E16  0EDD               	movlw	low STR_97
 11138  000E18  0100               	movlb	0	; () banked
 11139  000E1A  6F8E               	movwf	printf@f& (0+255),b
 11140  000E1C  0EFB               	movlw	high STR_97
 11141  000E1E  0100               	movlb	0	; () banked
 11142  000E20  6F8F               	movwf	(printf@f+1)& (0+255),b
 11143  000E22  EC9C  F008         	call	_printf	;wreg free
 11144                           
 11145                           ;Test.c: 256: updateServoPosition(1250, 1);
 11146  000E26  0E04               	movlw	4
 11147  000E28  0100               	movlb	0	; () banked
 11148  000E2A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11149  000E2C  0EE2               	movlw	226
 11150  000E2E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11151  000E30  0E00               	movlw	0
 11152  000E32  0100               	movlb	0	; () banked
 11153  000E34  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11154  000E36  0E01               	movlw	1
 11155  000E38  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11156  000E3A  ECFF  F01C         	call	_updateServoPosition	;wreg free
 11157                           
 11158                           ;Test.c: 257: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11159  000E3E  0E00               	movlw	0
 11160  000E40  0100               	movlb	0	; () banked
 11161  000E42  6FB8               	movwf	actuatorTest@i_1600& (0+255),b
 11162  000E44                     l6724:
 11163                           
 11164                           ; BSR set to: 0
 11165  000E44  0E63               	movlw	99
 11166  000E46  0100               	movlb	0	; () banked
 11167  000E48  65B8               	cpfsgt	actuatorTest@i_1600& (0+255),b
 11168  000E4A  D001               	goto	l6728
 11169  000E4C  D00C               	goto	l6732
 11170  000E4E                     l6728:
 11171                           
 11172                           ; BSR set to: 0
 11173  000E4E  0E68               	movlw	104
 11174  000E50  0100               	movlb	0	; () banked
 11175  000E52  6FAB               	movwf	??_actuatorTest& (0+255),b
 11176  000E54  0EE4               	movlw	228
 11177  000E56                     u7517:
 11178  000E56  2EE8               	decfsz	wreg,f,c
 11179  000E58  D7FE               	bra	u7517
 11180  000E5A  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11181  000E5C  D7FC               	bra	u7517
 11182  000E5E  F000               	nop	
 11183  000E60  0100               	movlb	0	; () banked
 11184  000E62  2BB8               	incf	actuatorTest@i_1600& (0+255),f,b
 11185  000E64  D7EF               	goto	l6724
 11186  000E66                     l6732:
 11187                           
 11188                           ; BSR set to: 0
 11189  000E66  0E00               	movlw	0
 11190  000E68  0100               	movlb	0	; () banked
 11191  000E6A  6FB9               	movwf	actuatorTest@i_1601& (0+255),b
 11192  000E6C                     l6734:
 11193                           
 11194                           ; BSR set to: 0
 11195  000E6C  0E63               	movlw	99
 11196  000E6E  0100               	movlb	0	; () banked
 11197  000E70  65B9               	cpfsgt	actuatorTest@i_1601& (0+255),b
 11198  000E72  D001               	goto	l6738
 11199  000E74  D00C               	goto	l1101
 11200  000E76                     l6738:
 11201                           
 11202                           ; BSR set to: 0
 11203  000E76  0E68               	movlw	104
 11204  000E78  0100               	movlb	0	; () banked
 11205  000E7A  6FAB               	movwf	??_actuatorTest& (0+255),b
 11206  000E7C  0EE4               	movlw	228
 11207  000E7E                     u7527:
 11208  000E7E  2EE8               	decfsz	wreg,f,c
 11209  000E80  D7FE               	bra	u7527
 11210  000E82  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11211  000E84  D7FC               	bra	u7527
 11212  000E86  F000               	nop	
 11213  000E88  0100               	movlb	0	; () banked
 11214  000E8A  2BB9               	incf	actuatorTest@i_1601& (0+255),f,b
 11215  000E8C  D7EF               	goto	l6734
 11216  000E8E                     l1101:
 11217                           
 11218                           ; BSR set to: 0
 11219                           ;Test.c: 258: TMR1ON = 0;
 11220  000E8E  90CD               	bcf	4045,0,c	;volatile
 11221                           
 11222                           ; BSR set to: 0
 11223                           ;Test.c: 265: printf("TST: TILT SERVO");
 11224  000E90  0E40               	movlw	low STR_98
 11225  000E92  0100               	movlb	0	; () banked
 11226  000E94  6F8E               	movwf	printf@f& (0+255),b
 11227  000E96  0EFE               	movlw	high STR_98
 11228  000E98  0100               	movlb	0	; () banked
 11229  000E9A  6F8F               	movwf	(printf@f+1)& (0+255),b
 11230  000E9C  EC9C  F008         	call	_printf	;wreg free
 11231                           
 11232                           ;Test.c: 266: lcdInst(0b11000000);;
 11233  000EA0  0EC0               	movlw	192
 11234  000EA2  ECA5  F022         	call	_lcdInst
 11235                           
 11236                           ;Test.c: 267: printf("LEVEL -- 2s     ");
 11237  000EA6  0E10               	movlw	low STR_99
 11238  000EA8  0100               	movlb	0	; () banked
 11239  000EAA  6F8E               	movwf	printf@f& (0+255),b
 11240  000EAC  0EFC               	movlw	high STR_99
 11241  000EAE  0100               	movlb	0	; () banked
 11242  000EB0  6F8F               	movwf	(printf@f+1)& (0+255),b
 11243  000EB2  EC9C  F008         	call	_printf	;wreg free
 11244                           
 11245                           ;Test.c: 268: updateServoPosition(1150, 3);
 11246  000EB6  0E04               	movlw	4
 11247  000EB8  0100               	movlb	0	; () banked
 11248  000EBA  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11249  000EBC  0E7E               	movlw	126
 11250  000EBE  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11251  000EC0  0E00               	movlw	0
 11252  000EC2  0100               	movlb	0	; () banked
 11253  000EC4  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11254  000EC6  0E03               	movlw	3
 11255  000EC8  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11256  000ECA  ECFF  F01C         	call	_updateServoPosition	;wreg free
 11257                           
 11258                           ;Test.c: 269: TMR3ON = 1;
 11259  000ECE  80B1               	bsf	4017,0,c	;volatile
 11260                           
 11261                           ;Test.c: 270: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11262  000ED0  0E00               	movlw	0
 11263  000ED2  0100               	movlb	0	; () banked
 11264  000ED4  6FBA               	movwf	actuatorTest@i_1604& (0+255),b
 11265  000ED6                     l6752:
 11266                           
 11267                           ; BSR set to: 0
 11268  000ED6  0E63               	movlw	99
 11269  000ED8  0100               	movlb	0	; () banked
 11270  000EDA  65BA               	cpfsgt	actuatorTest@i_1604& (0+255),b
 11271  000EDC  D001               	goto	l6756
 11272  000EDE  D00C               	goto	l6760
 11273  000EE0                     l6756:
 11274                           
 11275                           ; BSR set to: 0
 11276  000EE0  0E68               	movlw	104
 11277  000EE2  0100               	movlb	0	; () banked
 11278  000EE4  6FAB               	movwf	??_actuatorTest& (0+255),b
 11279  000EE6  0EE4               	movlw	228
 11280  000EE8                     u7537:
 11281  000EE8  2EE8               	decfsz	wreg,f,c
 11282  000EEA  D7FE               	bra	u7537
 11283  000EEC  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11284  000EEE  D7FC               	bra	u7537
 11285  000EF0  F000               	nop	
 11286  000EF2  0100               	movlb	0	; () banked
 11287  000EF4  2BBA               	incf	actuatorTest@i_1604& (0+255),f,b
 11288  000EF6  D7EF               	goto	l6752
 11289  000EF8                     l6760:
 11290                           
 11291                           ; BSR set to: 0
 11292  000EF8  0E00               	movlw	0
 11293  000EFA  0100               	movlb	0	; () banked
 11294  000EFC  6FBB               	movwf	actuatorTest@i_1605& (0+255),b
 11295  000EFE                     l6762:
 11296                           
 11297                           ; BSR set to: 0
 11298  000EFE  0E63               	movlw	99
 11299  000F00  0100               	movlb	0	; () banked
 11300  000F02  65BB               	cpfsgt	actuatorTest@i_1605& (0+255),b
 11301  000F04  D001               	goto	l6766
 11302  000F06  D00C               	goto	l6770
 11303  000F08                     l6766:
 11304                           
 11305                           ; BSR set to: 0
 11306  000F08  0E68               	movlw	104
 11307  000F0A  0100               	movlb	0	; () banked
 11308  000F0C  6FAB               	movwf	??_actuatorTest& (0+255),b
 11309  000F0E  0EE4               	movlw	228
 11310  000F10                     u7547:
 11311  000F10  2EE8               	decfsz	wreg,f,c
 11312  000F12  D7FE               	bra	u7547
 11313  000F14  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11314  000F16  D7FC               	bra	u7547
 11315  000F18  F000               	nop	
 11316  000F1A  0100               	movlb	0	; () banked
 11317  000F1C  2BBB               	incf	actuatorTest@i_1605& (0+255),f,b
 11318  000F1E  D7EF               	goto	l6762
 11319  000F20                     l6770:
 11320                           
 11321                           ; BSR set to: 0
 11322                           ;Test.c: 272: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11323  000F20  0E80               	movlw	128
 11324  000F22  ECA5  F022         	call	_lcdInst
 11325  000F26  0EC0               	movlw	192
 11326  000F28  ECA5  F022         	call	_lcdInst
 11327                           
 11328                           ;Test.c: 273: printf("DROP -- 2s      ");
 11329  000F2C  0EEE               	movlw	low STR_100
 11330  000F2E  0100               	movlb	0	; () banked
 11331  000F30  6F8E               	movwf	printf@f& (0+255),b
 11332  000F32  0EFB               	movlw	high STR_100
 11333  000F34  0100               	movlb	0	; () banked
 11334  000F36  6F8F               	movwf	(printf@f+1)& (0+255),b
 11335  000F38  EC9C  F008         	call	_printf	;wreg free
 11336                           
 11337                           ;Test.c: 274: updateServoPosition(1350, 3);
 11338  000F3C  0E05               	movlw	5
 11339  000F3E  0100               	movlb	0	; () banked
 11340  000F40  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11341  000F42  0E46               	movlw	70
 11342  000F44  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11343  000F46  0E00               	movlw	0
 11344  000F48  0100               	movlb	0	; () banked
 11345  000F4A  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11346  000F4C  0E03               	movlw	3
 11347  000F4E  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11348  000F50  ECFF  F01C         	call	_updateServoPosition	;wreg free
 11349                           
 11350                           ;Test.c: 275: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11351  000F54  0E00               	movlw	0
 11352  000F56  0100               	movlb	0	; () banked
 11353  000F58  6FBC               	movwf	actuatorTest@i_1607& (0+255),b
 11354  000F5A                     l6778:
 11355                           
 11356                           ; BSR set to: 0
 11357  000F5A  0E63               	movlw	99
 11358  000F5C  0100               	movlb	0	; () banked
 11359  000F5E  65BC               	cpfsgt	actuatorTest@i_1607& (0+255),b
 11360  000F60  D001               	goto	l6782
 11361  000F62  D00C               	goto	l6786
 11362  000F64                     l6782:
 11363                           
 11364                           ; BSR set to: 0
 11365  000F64  0E68               	movlw	104
 11366  000F66  0100               	movlb	0	; () banked
 11367  000F68  6FAB               	movwf	??_actuatorTest& (0+255),b
 11368  000F6A  0EE4               	movlw	228
 11369  000F6C                     u7557:
 11370  000F6C  2EE8               	decfsz	wreg,f,c
 11371  000F6E  D7FE               	bra	u7557
 11372  000F70  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11373  000F72  D7FC               	bra	u7557
 11374  000F74  F000               	nop	
 11375  000F76  0100               	movlb	0	; () banked
 11376  000F78  2BBC               	incf	actuatorTest@i_1607& (0+255),f,b
 11377  000F7A  D7EF               	goto	l6778
 11378  000F7C                     l6786:
 11379                           
 11380                           ; BSR set to: 0
 11381  000F7C  0E00               	movlw	0
 11382  000F7E  0100               	movlb	0	; () banked
 11383  000F80  6FBD               	movwf	actuatorTest@i_1608& (0+255),b
 11384  000F82                     l6788:
 11385                           
 11386                           ; BSR set to: 0
 11387  000F82  0E63               	movlw	99
 11388  000F84  0100               	movlb	0	; () banked
 11389  000F86  65BD               	cpfsgt	actuatorTest@i_1608& (0+255),b
 11390  000F88  D001               	goto	l6792
 11391  000F8A  D00C               	goto	l6796
 11392  000F8C                     l6792:
 11393                           
 11394                           ; BSR set to: 0
 11395  000F8C  0E68               	movlw	104
 11396  000F8E  0100               	movlb	0	; () banked
 11397  000F90  6FAB               	movwf	??_actuatorTest& (0+255),b
 11398  000F92  0EE4               	movlw	228
 11399  000F94                     u7567:
 11400  000F94  2EE8               	decfsz	wreg,f,c
 11401  000F96  D7FE               	bra	u7567
 11402  000F98  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11403  000F9A  D7FC               	bra	u7567
 11404  000F9C  F000               	nop	
 11405  000F9E  0100               	movlb	0	; () banked
 11406  000FA0  2BBD               	incf	actuatorTest@i_1608& (0+255),f,b
 11407  000FA2  D7EF               	goto	l6788
 11408  000FA4                     l6796:
 11409                           
 11410                           ; BSR set to: 0
 11411                           ;Test.c: 277: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11412  000FA4  0E80               	movlw	128
 11413  000FA6  ECA5  F022         	call	_lcdInst
 11414  000FAA  0EC0               	movlw	192
 11415  000FAC  ECA5  F022         	call	_lcdInst
 11416                           
 11417                           ;Test.c: 278: printf("LEVEL -- 2s     ");
 11418  000FB0  0E10               	movlw	low STR_99
 11419  000FB2  0100               	movlb	0	; () banked
 11420  000FB4  6F8E               	movwf	printf@f& (0+255),b
 11421  000FB6  0EFC               	movlw	high STR_99
 11422  000FB8  0100               	movlb	0	; () banked
 11423  000FBA  6F8F               	movwf	(printf@f+1)& (0+255),b
 11424  000FBC  EC9C  F008         	call	_printf	;wreg free
 11425                           
 11426                           ;Test.c: 279: updateServoPosition(1150, 3);
 11427  000FC0  0E04               	movlw	4
 11428  000FC2  0100               	movlb	0	; () banked
 11429  000FC4  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 11430  000FC6  0E7E               	movlw	126
 11431  000FC8  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 11432  000FCA  0E00               	movlw	0
 11433  000FCC  0100               	movlb	0	; () banked
 11434  000FCE  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 11435  000FD0  0E03               	movlw	3
 11436  000FD2  6F82               	movwf	updateServoPosition@timer& (0+255),b
 11437  000FD4  ECFF  F01C         	call	_updateServoPosition	;wreg free
 11438                           
 11439                           ;Test.c: 280: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11440  000FD8  0E00               	movlw	0
 11441  000FDA  0100               	movlb	0	; () banked
 11442  000FDC  6FBE               	movwf	actuatorTest@i_1610& (0+255),b
 11443  000FDE                     l6804:
 11444                           
 11445                           ; BSR set to: 0
 11446  000FDE  0E63               	movlw	99
 11447  000FE0  0100               	movlb	0	; () banked
 11448  000FE2  65BE               	cpfsgt	actuatorTest@i_1610& (0+255),b
 11449  000FE4  D001               	goto	l6808
 11450  000FE6  D00C               	goto	l6812
 11451  000FE8                     l6808:
 11452                           
 11453                           ; BSR set to: 0
 11454  000FE8  0E68               	movlw	104
 11455  000FEA  0100               	movlb	0	; () banked
 11456  000FEC  6FAB               	movwf	??_actuatorTest& (0+255),b
 11457  000FEE  0EE4               	movlw	228
 11458  000FF0                     u7577:
 11459  000FF0  2EE8               	decfsz	wreg,f,c
 11460  000FF2  D7FE               	bra	u7577
 11461  000FF4  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11462  000FF6  D7FC               	bra	u7577
 11463  000FF8  F000               	nop	
 11464  000FFA  0100               	movlb	0	; () banked
 11465  000FFC  2BBE               	incf	actuatorTest@i_1610& (0+255),f,b
 11466  000FFE  D7EF               	goto	l6804
 11467  001000                     l6812:
 11468                           
 11469                           ; BSR set to: 0
 11470  001000  0E00               	movlw	0
 11471  001002  0100               	movlb	0	; () banked
 11472  001004  6FBF               	movwf	actuatorTest@i_1611& (0+255),b
 11473  001006                     l6814:
 11474                           
 11475                           ; BSR set to: 0
 11476  001006  0E63               	movlw	99
 11477  001008  0100               	movlb	0	; () banked
 11478  00100A  65BF               	cpfsgt	actuatorTest@i_1611& (0+255),b
 11479  00100C  D001               	goto	l6818
 11480  00100E  D00C               	goto	l1113
 11481  001010                     l6818:
 11482                           
 11483                           ; BSR set to: 0
 11484  001010  0E68               	movlw	104
 11485  001012  0100               	movlb	0	; () banked
 11486  001014  6FAB               	movwf	??_actuatorTest& (0+255),b
 11487  001016  0EE4               	movlw	228
 11488  001018                     u7587:
 11489  001018  2EE8               	decfsz	wreg,f,c
 11490  00101A  D7FE               	bra	u7587
 11491  00101C  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11492  00101E  D7FC               	bra	u7587
 11493  001020  F000               	nop	
 11494  001022  0100               	movlb	0	; () banked
 11495  001024  2BBF               	incf	actuatorTest@i_1611& (0+255),f,b
 11496  001026  D7EF               	goto	l6814
 11497  001028                     l1113:
 11498                           
 11499                           ; BSR set to: 0
 11500                           ;Test.c: 281: TMR3ON = 0;
 11501  001028  90B1               	bcf	4017,0,c	;volatile
 11502                           
 11503                           ;Test.c: 282: (INTCONbits.GIE = 0);
 11504  00102A  9EF2               	bcf	intcon,7,c	;volatile
 11505                           
 11506                           ; BSR set to: 0
 11507                           ;Test.c: 287: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11508  00102C  0E01               	movlw	1
 11509  00102E  ECA5  F022         	call	_lcdInst
 11510  001032  0E68               	movlw	104
 11511  001034  0100               	movlb	0	; () banked
 11512  001036  6FAB               	movwf	??_actuatorTest& (0+255),b
 11513  001038  0EE4               	movlw	228
 11514  00103A                     u7597:
 11515  00103A  2EE8               	decfsz	wreg,f,c
 11516  00103C  D7FE               	bra	u7597
 11517  00103E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11518  001040  D7FC               	bra	u7597
 11519  001042  F000               	nop	
 11520  001044  0E80               	movlw	128
 11521  001046  ECA5  F022         	call	_lcdInst
 11522                           
 11523                           ;Test.c: 288: printf("TST: CAM SERVO");
 11524  00104A  0E9C               	movlw	low STR_102
 11525  00104C  0100               	movlb	0	; () banked
 11526  00104E  6F8E               	movwf	printf@f& (0+255),b
 11527  001050  0EFE               	movlw	high STR_102
 11528  001052  0100               	movlb	0	; () banked
 11529  001054  6F8F               	movwf	(printf@f+1)& (0+255),b
 11530  001056  EC9C  F008         	call	_printf	;wreg free
 11531                           
 11532                           ;Test.c: 289: lcdInst(0b11000000);;
 11533  00105A  0EC0               	movlw	192
 11534  00105C  ECA5  F022         	call	_lcdInst
 11535                           
 11536                           ;Test.c: 290: printf("CAM UP  |RC0=1");
 11537  001060  0E7E               	movlw	low STR_103
 11538  001062  0100               	movlb	0	; () banked
 11539  001064  6F8E               	movwf	printf@f& (0+255),b
 11540  001066  0EFE               	movlw	high STR_103
 11541  001068  0100               	movlb	0	; () banked
 11542  00106A  6F8F               	movwf	(printf@f+1)& (0+255),b
 11543  00106C  EC9C  F008         	call	_printf	;wreg free
 11544                           
 11545                           ;Test.c: 291: LATCbits.LATC0 = 0;
 11546  001070  908B               	bcf	3979,0,c	;volatile
 11547                           
 11548                           ;Test.c: 292: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11549  001072  0E00               	movlw	0
 11550  001074  0100               	movlb	0	; () banked
 11551  001076  6FC0               	movwf	actuatorTest@i_1614& (0+255),b
 11552  001078                     l6838:
 11553                           
 11554                           ; BSR set to: 0
 11555  001078  0E63               	movlw	99
 11556  00107A  0100               	movlb	0	; () banked
 11557  00107C  65C0               	cpfsgt	actuatorTest@i_1614& (0+255),b
 11558  00107E  D001               	goto	l6842
 11559  001080  D00C               	goto	l6846
 11560  001082                     l6842:
 11561                           
 11562                           ; BSR set to: 0
 11563  001082  0E68               	movlw	104
 11564  001084  0100               	movlb	0	; () banked
 11565  001086  6FAB               	movwf	??_actuatorTest& (0+255),b
 11566  001088  0EE4               	movlw	228
 11567  00108A                     u7607:
 11568  00108A  2EE8               	decfsz	wreg,f,c
 11569  00108C  D7FE               	bra	u7607
 11570  00108E  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11571  001090  D7FC               	bra	u7607
 11572  001092  F000               	nop	
 11573  001094  0100               	movlb	0	; () banked
 11574  001096  2BC0               	incf	actuatorTest@i_1614& (0+255),f,b
 11575  001098  D7EF               	goto	l6838
 11576  00109A                     l6846:
 11577                           
 11578                           ; BSR set to: 0
 11579  00109A  0E00               	movlw	0
 11580  00109C  0100               	movlb	0	; () banked
 11581  00109E  6FC1               	movwf	actuatorTest@i_1615& (0+255),b
 11582  0010A0                     l6848:
 11583                           
 11584                           ; BSR set to: 0
 11585  0010A0  0E63               	movlw	99
 11586  0010A2  0100               	movlb	0	; () banked
 11587  0010A4  65C1               	cpfsgt	actuatorTest@i_1615& (0+255),b
 11588  0010A6  D001               	goto	l6852
 11589  0010A8  D00C               	goto	l6856
 11590  0010AA                     l6852:
 11591                           
 11592                           ; BSR set to: 0
 11593  0010AA  0E68               	movlw	104
 11594  0010AC  0100               	movlb	0	; () banked
 11595  0010AE  6FAB               	movwf	??_actuatorTest& (0+255),b
 11596  0010B0  0EE4               	movlw	228
 11597  0010B2                     u7617:
 11598  0010B2  2EE8               	decfsz	wreg,f,c
 11599  0010B4  D7FE               	bra	u7617
 11600  0010B6  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11601  0010B8  D7FC               	bra	u7617
 11602  0010BA  F000               	nop	
 11603  0010BC  0100               	movlb	0	; () banked
 11604  0010BE  2BC1               	incf	actuatorTest@i_1615& (0+255),f,b
 11605  0010C0  D7EF               	goto	l6848
 11606  0010C2                     l6856:
 11607                           
 11608                           ; BSR set to: 0
 11609                           ;Test.c: 293: lcdInst(0b10000000);;lcdInst(0b11000000);;
 11610  0010C2  0E80               	movlw	128
 11611  0010C4  ECA5  F022         	call	_lcdInst
 11612  0010C8  0EC0               	movlw	192
 11613  0010CA  ECA5  F022         	call	_lcdInst
 11614                           
 11615                           ;Test.c: 294: LATCbits.LATC0 = 1;
 11616  0010CE  808B               	bsf	3979,0,c	;volatile
 11617                           
 11618                           ;Test.c: 295: printf("CAM DWN |RC0=0");
 11619  0010D0  0E6F               	movlw	low STR_104
 11620  0010D2  0100               	movlb	0	; () banked
 11621  0010D4  6F8E               	movwf	printf@f& (0+255),b
 11622  0010D6  0EFE               	movlw	high STR_104
 11623  0010D8  0100               	movlb	0	; () banked
 11624  0010DA  6F8F               	movwf	(printf@f+1)& (0+255),b
 11625  0010DC  EC9C  F008         	call	_printf	;wreg free
 11626                           
 11627                           ;Test.c: 296: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
      +                          for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11628  0010E0  0E00               	movlw	0
 11629  0010E2  0100               	movlb	0	; () banked
 11630  0010E4  6FC2               	movwf	actuatorTest@i_1617& (0+255),b
 11631  0010E6                     l6864:
 11632                           
 11633                           ; BSR set to: 0
 11634  0010E6  0E63               	movlw	99
 11635  0010E8  0100               	movlb	0	; () banked
 11636  0010EA  65C2               	cpfsgt	actuatorTest@i_1617& (0+255),b
 11637  0010EC  D001               	goto	l6868
 11638  0010EE  D00C               	goto	l6872
 11639  0010F0                     l6868:
 11640                           
 11641                           ; BSR set to: 0
 11642  0010F0  0E68               	movlw	104
 11643  0010F2  0100               	movlb	0	; () banked
 11644  0010F4  6FAB               	movwf	??_actuatorTest& (0+255),b
 11645  0010F6  0EE4               	movlw	228
 11646  0010F8                     u7627:
 11647  0010F8  2EE8               	decfsz	wreg,f,c
 11648  0010FA  D7FE               	bra	u7627
 11649  0010FC  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11650  0010FE  D7FC               	bra	u7627
 11651  001100  F000               	nop	
 11652  001102  0100               	movlb	0	; () banked
 11653  001104  2BC2               	incf	actuatorTest@i_1617& (0+255),f,b
 11654  001106  D7EF               	goto	l6864
 11655  001108                     l6872:
 11656                           
 11657                           ; BSR set to: 0
 11658  001108  0E00               	movlw	0
 11659  00110A  0100               	movlb	0	; () banked
 11660  00110C  6FC3               	movwf	actuatorTest@i_1618& (0+255),b
 11661  00110E                     l6874:
 11662                           
 11663                           ; BSR set to: 0
 11664  00110E  0E63               	movlw	99
 11665  001110  0100               	movlb	0	; () banked
 11666  001112  65C3               	cpfsgt	actuatorTest@i_1618& (0+255),b
 11667  001114  D001               	goto	l6878
 11668  001116  D00C               	goto	l6882
 11669  001118                     l6878:
 11670                           
 11671                           ; BSR set to: 0
 11672  001118  0E68               	movlw	104
 11673  00111A  0100               	movlb	0	; () banked
 11674  00111C  6FAB               	movwf	??_actuatorTest& (0+255),b
 11675  00111E  0EE4               	movlw	228
 11676  001120                     u7637:
 11677  001120  2EE8               	decfsz	wreg,f,c
 11678  001122  D7FE               	bra	u7637
 11679  001124  2FAB               	decfsz	??_actuatorTest& (0+255),f,b
 11680  001126  D7FC               	bra	u7637
 11681  001128  F000               	nop	
 11682  00112A  0100               	movlb	0	; () banked
 11683  00112C  2BC3               	incf	actuatorTest@i_1618& (0+255),f,b
 11684  00112E  D7EF               	goto	l6874
 11685  001130                     l6882:
 11686                           
 11687                           ; BSR set to: 0
 11688                           ;Test.c: 297: machine_state = Testing_state;
 11689  001130  0E03               	movlw	3
 11690  001132  0100               	movlb	0	; () banked
 11691  001134  6FFC               	movwf	_machine_state& (0+255),b
 11692                           
 11693                           ; BSR set to: 0
 11694  001136  0012               	return		;funcret
 11695  001138                     __end_of_actuatorTest:
 11696                           	opt stack 0
 11697                           tblptru	equ	0xFF8
 11698                           tblptrh	equ	0xFF7
 11699                           tblptrl	equ	0xFF6
 11700                           tablat	equ	0xFF5
 11701                           prodh	equ	0xFF4
 11702                           prodl	equ	0xFF3
 11703                           intcon	equ	0xFF2
 11704                           intcon2	equ	0xFF1
 11705                           intcon3	equ	0xFF0
 11706                           postinc0	equ	0xFEE
 11707                           wreg	equ	0xFE8
 11708                           postdec1	equ	0xFE5
 11709                           fsr1l	equ	0xFE1
 11710                           indf2	equ	0xFDF
 11711                           postinc2	equ	0xFDE
 11712                           postdec2	equ	0xFDD
 11713                           fsr2h	equ	0xFDA
 11714                           fsr2l	equ	0xFD9
 11715                           status	equ	0xFD8
 11716                           
 11717 ;; *************** function _ToggleTestA5 *****************
 11718 ;; Defined at:
 11719 ;;		line 442 in file "Test.c"
 11720 ;; Parameters:    Size  Location     Type
 11721 ;;		None
 11722 ;; Auto vars:     Size  Location     Type
 11723 ;;  on              2   44[BANK0 ] int 
 11724 ;; Return value:  Size  Location     Type
 11725 ;;                  1    wreg      void 
 11726 ;; Registers used:
 11727 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11728 ;; Tracked objects:
 11729 ;;		On entry : 0/0
 11730 ;;		On exit  : 0/0
 11731 ;;		Unchanged: 0/0
 11732 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11733 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11734 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11735 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11736 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11737 ;;Total ram usage:        3 bytes
 11738 ;; Hardware stack levels used:    1
 11739 ;; Hardware stack levels required when called:   10
 11740 ;; This function calls:
 11741 ;;		_lcdInst
 11742 ;;		_printf
 11743 ;; This function is called by:
 11744 ;;		_Test
 11745 ;; This function uses a non-reentrant model
 11746 ;;
 11747                           
 11748                           	psect	text41
 11749  0037F4                     __ptext41:
 11750                           	opt stack 0
 11751  0037F4                     _ToggleTestA5:
 11752                           	opt stack 19
 11753                           
 11754                           ;Test.c: 443: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11755                           
 11756                           ; BSR set to: 0
 11757                           ;incstack = 0
 11758  0037F4  0E01               	movlw	1
 11759  0037F6  ECA5  F022         	call	_lcdInst
 11760  0037FA  0E68               	movlw	104
 11761  0037FC  0100               	movlb	0	; () banked
 11762  0037FE  6FAB               	movwf	??_ToggleTestA5& (0+255),b
 11763  003800  0EE4               	movlw	228
 11764  003802                     u7647:
 11765  003802  2EE8               	decfsz	wreg,f,c
 11766  003804  D7FE               	bra	u7647
 11767  003806  2FAB               	decfsz	??_ToggleTestA5& (0+255),f,b
 11768  003808  D7FC               	bra	u7647
 11769  00380A  F000               	nop	
 11770  00380C  0E80               	movlw	128
 11771  00380E  ECA5  F022         	call	_lcdInst
 11772                           
 11773                           ;Test.c: 444: printf("D WILL RETURN   ");
 11774  003812  0E43               	movlw	low STR_110
 11775  003814  0100               	movlb	0	; () banked
 11776  003816  6F8E               	movwf	printf@f& (0+255),b
 11777  003818  0EFC               	movlw	high STR_110
 11778  00381A  0100               	movlb	0	; () banked
 11779  00381C  6F8F               	movwf	(printf@f+1)& (0+255),b
 11780  00381E  EC9C  F008         	call	_printf	;wreg free
 11781                           
 11782                           ;Test.c: 445: lcdInst(0b11000000);;
 11783  003822  0EC0               	movlw	192
 11784  003824  ECA5  F022         	call	_lcdInst
 11785                           
 11786                           ;Test.c: 446: printf("ELSE TOGGLES RA5");
 11787  003828  0E76               	movlw	low STR_111
 11788  00382A  0100               	movlb	0	; () banked
 11789  00382C  6F8E               	movwf	printf@f& (0+255),b
 11790  00382E  0EFC               	movlw	high STR_111
 11791  003830  0100               	movlb	0	; () banked
 11792  003832  6F8F               	movwf	(printf@f+1)& (0+255),b
 11793  003834  EC9C  F008         	call	_printf	;wreg free
 11794                           
 11795                           ;Test.c: 447: int on = 0;
 11796  003838  0E00               	movlw	0
 11797  00383A  0100               	movlb	0	; () banked
 11798  00383C  6FAD               	movwf	(ToggleTestA5@on+1)& (0+255),b
 11799  00383E  0E00               	movlw	0
 11800  003840  6FAC               	movwf	ToggleTestA5@on& (0+255),b
 11801  003842                     l1179:
 11802  003842  A281               	btfss	3969,1,c	;volatile
 11803  003844  D7FE               	goto	l1179
 11804                           
 11805                           ;Test.c: 452: }
 11806                           ;Test.c: 453: if(PORTB >> 4 == 0b1111){
 11807  003846  3881               	swapf	3969,w,c	;volatile
 11808  003848  0B0F               	andlw	15
 11809  00384A  0A0F               	xorlw	15
 11810  00384C  B4D8               	btfsc	status,2,c
 11811  00384E  0012               	return	
 11812                           
 11813                           ;Test.c: 456: else{
 11814                           ;Test.c: 457: if(on == 0){
 11815                           
 11816                           ;Test.c: 455: }
 11817                           
 11818                           ;Test.c: 454: break;
 11819  003850  0100               	movlb	0	; () banked
 11820  003852  51AC               	movf	ToggleTestA5@on& (0+255),w,b
 11821  003854  0100               	movlb	0	; () banked
 11822  003856  11AD               	iorwf	(ToggleTestA5@on+1)& (0+255),w,b
 11823  003858  A4D8               	btfss	status,2,c
 11824  00385A  D007               	goto	l6928
 11825                           
 11826                           ; BSR set to: 0
 11827                           ;Test.c: 458: on = 1;
 11828  00385C  0E00               	movlw	0
 11829  00385E  0100               	movlb	0	; () banked
 11830  003860  6FAD               	movwf	(ToggleTestA5@on+1)& (0+255),b
 11831  003862  0E01               	movlw	1
 11832  003864  6FAC               	movwf	ToggleTestA5@on& (0+255),b
 11833                           
 11834                           ; BSR set to: 0
 11835                           ;Test.c: 459: LATAbits.LATA5 = 1;
 11836  003866  8A89               	bsf	3977,5,c	;volatile
 11837                           
 11838                           ;Test.c: 460: }
 11839  003868  D006               	goto	l1187
 11840  00386A                     l6928:
 11841                           
 11842                           ; BSR set to: 0
 11843                           ;Test.c: 461: else{
 11844                           ;Test.c: 462: on = 0;
 11845  00386A  0E00               	movlw	0
 11846  00386C  0100               	movlb	0	; () banked
 11847  00386E  6FAD               	movwf	(ToggleTestA5@on+1)& (0+255),b
 11848  003870  0E00               	movlw	0
 11849  003872  6FAC               	movwf	ToggleTestA5@on& (0+255),b
 11850                           
 11851                           ; BSR set to: 0
 11852                           ;Test.c: 463: LATAbits.LATA5 = 0;
 11853  003874  9A89               	bcf	3977,5,c	;volatile
 11854  003876                     l1187:
 11855  003876  A281               	btfss	3969,1,c	;volatile
 11856  003878  D7E4               	goto	l1179
 11857  00387A  D7FD               	goto	l1187
 11858  00387C                     __end_of_ToggleTestA5:
 11859                           	opt stack 0
 11860                           tblptru	equ	0xFF8
 11861                           tblptrh	equ	0xFF7
 11862                           tblptrl	equ	0xFF6
 11863                           tablat	equ	0xFF5
 11864                           prodh	equ	0xFF4
 11865                           prodl	equ	0xFF3
 11866                           intcon	equ	0xFF2
 11867                           intcon2	equ	0xFF1
 11868                           intcon3	equ	0xFF0
 11869                           postinc0	equ	0xFEE
 11870                           wreg	equ	0xFE8
 11871                           postdec1	equ	0xFE5
 11872                           fsr1l	equ	0xFE1
 11873                           indf2	equ	0xFDF
 11874                           postinc2	equ	0xFDE
 11875                           postdec2	equ	0xFDD
 11876                           fsr2h	equ	0xFDA
 11877                           fsr2l	equ	0xFD9
 11878                           status	equ	0xFD8
 11879                           
 11880 ;; *************** function _SolenoidTestA5 *****************
 11881 ;; Defined at:
 11882 ;;		line 418 in file "Test.c"
 11883 ;; Parameters:    Size  Location     Type
 11884 ;;		None
 11885 ;; Auto vars:     Size  Location     Type
 11886 ;;  i               1   47[BANK0 ] unsigned char 
 11887 ;;  i               1   48[BANK0 ] unsigned char 
 11888 ;;  i               2   45[BANK0 ] int 
 11889 ;; Return value:  Size  Location     Type
 11890 ;;                  1    wreg      void 
 11891 ;; Registers used:
 11892 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11893 ;; Tracked objects:
 11894 ;;		On entry : 0/0
 11895 ;;		On exit  : 0/0
 11896 ;;		Unchanged: 0/0
 11897 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11898 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11899 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11900 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11901 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11902 ;;Total ram usage:        6 bytes
 11903 ;; Hardware stack levels used:    1
 11904 ;; Hardware stack levels required when called:   10
 11905 ;; This function calls:
 11906 ;;		_lcdInst
 11907 ;;		_printf
 11908 ;; This function is called by:
 11909 ;;		_Test
 11910 ;; This function uses a non-reentrant model
 11911 ;;
 11912                           
 11913                           	psect	text42
 11914  003150                     __ptext42:
 11915                           	opt stack 0
 11916  003150                     _SolenoidTestA5:
 11917                           	opt stack 19
 11918  003150                     
 11919                           ;Test.c: 420: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 11920  003150  0E01               	movlw	1
 11921  003152  ECA5  F022         	call	_lcdInst
 11922  003156  0E68               	movlw	104
 11923  003158  0100               	movlb	0	; () banked
 11924  00315A  6FAB               	movwf	??_SolenoidTestA5& (0+255),b
 11925  00315C  0EE4               	movlw	228
 11926  00315E                     u7657:
 11927  00315E  2EE8               	decfsz	wreg,f,c
 11928  003160  D7FE               	bra	u7657
 11929  003162  2FAB               	decfsz	??_SolenoidTestA5& (0+255),f,b
 11930  003164  D7FC               	bra	u7657
 11931  003166  F000               	nop	
 11932  003168  0E80               	movlw	128
 11933  00316A  ECA5  F022         	call	_lcdInst
 11934                           
 11935                           ;Test.c: 421: printf("SOLENOID TST");
 11936  00316E  0E48               	movlw	low STR_108
 11937  003170  0100               	movlb	0	; () banked
 11938  003172  6F8E               	movwf	printf@f& (0+255),b
 11939  003174  0EFF               	movlw	high STR_108
 11940  003176  0100               	movlb	0	; () banked
 11941  003178  6F8F               	movwf	(printf@f+1)& (0+255),b
 11942  00317A  EC9C  F008         	call	_printf	;wreg free
 11943                           
 11944                           ;Test.c: 422: lcdInst(0b11000000);;
 11945  00317E  0EC0               	movlw	192
 11946  003180  ECA5  F022         	call	_lcdInst
 11947  003184                     l1164:
 11948  003184  A281               	btfss	3969,1,c	;volatile
 11949  003186  D7FE               	goto	l1164
 11950                           
 11951                           ;Test.c: 427: }
 11952                           ;Test.c: 429: for(int i = 0; i < 3; i++){
 11953  003188  0E00               	movlw	0
 11954  00318A  0100               	movlb	0	; () banked
 11955  00318C  6FAE               	movwf	(SolenoidTestA5@i+1)& (0+255),b
 11956  00318E  0E00               	movlw	0
 11957  003190  6FAD               	movwf	SolenoidTestA5@i& (0+255),b
 11958  003192                     l6944:
 11959                           
 11960                           ; BSR set to: 0
 11961  003192  0100               	movlb	0	; () banked
 11962  003194  BFAE               	btfsc	(SolenoidTestA5@i+1)& (0+255),7,b
 11963  003196  D008               	goto	l6948
 11964  003198  0100               	movlb	0	; () banked
 11965  00319A  51AE               	movf	(SolenoidTestA5@i+1)& (0+255),w,b
 11966  00319C  E12D               	bnz	l6964
 11967  00319E  0E03               	movlw	3
 11968  0031A0  0100               	movlb	0	; () banked
 11969  0031A2  5DAD               	subwf	SolenoidTestA5@i& (0+255),w,b
 11970  0031A4  B0D8               	btfsc	status,0,c
 11971  0031A6  D028               	goto	l6964
 11972  0031A8                     l6948:
 11973                           
 11974                           ; BSR set to: 0
 11975                           ;Test.c: 430: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 11976  0031A8  0E00               	movlw	0
 11977  0031AA  0100               	movlb	0	; () banked
 11978  0031AC  6FAF               	movwf	SolenoidTestA5@i_1631& (0+255),b
 11979  0031AE                     l6950:
 11980                           
 11981                           ; BSR set to: 0
 11982  0031AE  0E63               	movlw	99
 11983  0031B0  0100               	movlb	0	; () banked
 11984  0031B2  65AF               	cpfsgt	SolenoidTestA5@i_1631& (0+255),b
 11985  0031B4  D001               	goto	l6954
 11986  0031B6  D00C               	goto	l1170
 11987  0031B8                     l6954:
 11988                           
 11989                           ; BSR set to: 0
 11990  0031B8  0E68               	movlw	104
 11991  0031BA  0100               	movlb	0	; () banked
 11992  0031BC  6FAB               	movwf	??_SolenoidTestA5& (0+255),b
 11993  0031BE  0EE4               	movlw	228
 11994  0031C0                     u7667:
 11995  0031C0  2EE8               	decfsz	wreg,f,c
 11996  0031C2  D7FE               	bra	u7667
 11997  0031C4  2FAB               	decfsz	??_SolenoidTestA5& (0+255),f,b
 11998  0031C6  D7FC               	bra	u7667
 11999  0031C8  F000               	nop	
 12000  0031CA  0100               	movlb	0	; () banked
 12001  0031CC  2BAF               	incf	SolenoidTestA5@i_1631& (0+255),f,b
 12002  0031CE  D7EF               	goto	l6950
 12003  0031D0                     l1170:
 12004                           
 12005                           ; BSR set to: 0
 12006                           ;Test.c: 431: LATAbits.LATA5 = 1;
 12007  0031D0  8A89               	bsf	3977,5,c	;volatile
 12008                           
 12009                           ; BSR set to: 0
 12010                           ;Test.c: 432: _delay((unsigned long)((150)*(32000000/4000.0)));
 12011  0031D2  0E07               	movlw	7
 12012  0031D4  0100               	movlb	0	; () banked
 12013  0031D6  6FAC               	movwf	(??_SolenoidTestA5+1)& (0+255),b
 12014  0031D8  0E17               	movlw	23
 12015  0031DA  0100               	movlb	0	; () banked
 12016  0031DC  6FAB               	movwf	??_SolenoidTestA5& (0+255),b
 12017  0031DE  0E6A               	movlw	106
 12018  0031E0                     u7677:
 12019  0031E0  2EE8               	decfsz	wreg,f,c
 12020  0031E2  D7FE               	bra	u7677
 12021  0031E4  2FAB               	decfsz	??_SolenoidTestA5& (0+255),f,b
 12022  0031E6  D7FC               	bra	u7677
 12023  0031E8  2FAC               	decfsz	(??_SolenoidTestA5+1)& (0+255),f,b
 12024  0031EA  D7FA               	bra	u7677
 12025  0031EC  F000               	nop	
 12026                           
 12027                           ;Test.c: 433: LATAbits.LATA5 = 0;
 12028  0031EE  9A89               	bcf	3977,5,c	;volatile
 12029  0031F0  0100               	movlb	0	; () banked
 12030  0031F2  4BAD               	infsnz	SolenoidTestA5@i& (0+255),f,b
 12031  0031F4  2BAE               	incf	(SolenoidTestA5@i+1)& (0+255),f,b
 12032  0031F6  D7CD               	goto	l6944
 12033  0031F8                     l6964:
 12034                           
 12035                           ; BSR set to: 0
 12036                           ;Test.c: 434: }
 12037                           ;Test.c: 436: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12038  0031F8  0E01               	movlw	1
 12039  0031FA  ECA5  F022         	call	_lcdInst
 12040  0031FE  0E68               	movlw	104
 12041  003200  0100               	movlb	0	; () banked
 12042  003202  6FAB               	movwf	??_SolenoidTestA5& (0+255),b
 12043  003204  0EE4               	movlw	228
 12044  003206                     u7687:
 12045  003206  2EE8               	decfsz	wreg,f,c
 12046  003208  D7FE               	bra	u7687
 12047  00320A  2FAB               	decfsz	??_SolenoidTestA5& (0+255),f,b
 12048  00320C  D7FC               	bra	u7687
 12049  00320E  F000               	nop	
 12050  003210  0E80               	movlw	128
 12051  003212  ECA5  F022         	call	_lcdInst
 12052                           
 12053                           ;Test.c: 437: printf("PUSH DONE");
 12054  003216  0E8F               	movlw	low STR_109
 12055  003218  0100               	movlb	0	; () banked
 12056  00321A  6F8E               	movwf	printf@f& (0+255),b
 12057  00321C  0EFF               	movlw	high STR_109
 12058  00321E  0100               	movlb	0	; () banked
 12059  003220  6F8F               	movwf	(printf@f+1)& (0+255),b
 12060  003222  EC9C  F008         	call	_printf	;wreg free
 12061                           
 12062                           ;Test.c: 438: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(32000000/4000.0)));};
 12063  003226  0E00               	movlw	0
 12064  003228  0100               	movlb	0	; () banked
 12065  00322A  6FB0               	movwf	SolenoidTestA5@i_1633& (0+255),b
 12066  00322C                     l6974:
 12067                           
 12068                           ; BSR set to: 0
 12069  00322C  0E63               	movlw	99
 12070  00322E  0100               	movlb	0	; () banked
 12071  003230  65B0               	cpfsgt	SolenoidTestA5@i_1633& (0+255),b
 12072  003232  D001               	goto	l6978
 12073  003234  D78D               	goto	l6932
 12074  003236                     l6978:
 12075                           
 12076                           ; BSR set to: 0
 12077  003236  0E68               	movlw	104
 12078  003238  0100               	movlb	0	; () banked
 12079  00323A  6FAB               	movwf	??_SolenoidTestA5& (0+255),b
 12080  00323C  0EE4               	movlw	228
 12081  00323E                     u7697:
 12082  00323E  2EE8               	decfsz	wreg,f,c
 12083  003240  D7FE               	bra	u7697
 12084  003242  2FAB               	decfsz	??_SolenoidTestA5& (0+255),f,b
 12085  003244  D7FC               	bra	u7697
 12086  003246  F000               	nop	
 12087  003248  0100               	movlb	0	; () banked
 12088  00324A  2BB0               	incf	SolenoidTestA5@i_1633& (0+255),f,b
 12089  00324C  D7EF               	goto	l6974
 12090  00324E                     __end_of_SolenoidTestA5:
 12091                           	opt stack 0
 12092                           tblptru	equ	0xFF8
 12093                           tblptrh	equ	0xFF7
 12094                           tblptrl	equ	0xFF6
 12095                           tablat	equ	0xFF5
 12096                           prodh	equ	0xFF4
 12097                           prodl	equ	0xFF3
 12098                           intcon	equ	0xFF2
 12099                           intcon2	equ	0xFF1
 12100                           intcon3	equ	0xFF0
 12101                           postinc0	equ	0xFEE
 12102                           wreg	equ	0xFE8
 12103                           postdec1	equ	0xFE5
 12104                           fsr1l	equ	0xFE1
 12105                           indf2	equ	0xFDF
 12106                           postinc2	equ	0xFDE
 12107                           postdec2	equ	0xFDD
 12108                           fsr2h	equ	0xFDA
 12109                           fsr2l	equ	0xFD9
 12110                           status	equ	0xFD8
 12111                           
 12112 ;; *************** function _PortTests *****************
 12113 ;; Defined at:
 12114 ;;		line 349 in file "Test.c"
 12115 ;; Parameters:    Size  Location     Type
 12116 ;;		None
 12117 ;; Auto vars:     Size  Location     Type
 12118 ;;		None
 12119 ;; Return value:  Size  Location     Type
 12120 ;;                  1    wreg      void 
 12121 ;; Registers used:
 12122 ;;		wreg, status,2, status,0
 12123 ;; Tracked objects:
 12124 ;;		On entry : 0/0
 12125 ;;		On exit  : 0/0
 12126 ;;		Unchanged: 0/0
 12127 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12128 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12129 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12130 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12131 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12132 ;;Total ram usage:        2 bytes
 12133 ;; Hardware stack levels used:    1
 12134 ;; Hardware stack levels required when called:    7
 12135 ;; This function calls:
 12136 ;;		Nothing
 12137 ;; This function is called by:
 12138 ;;		_Test
 12139 ;; This function uses a non-reentrant model
 12140 ;;
 12141                           
 12142                           	psect	text43
 12143  003902                     __ptext43:
 12144                           	opt stack 0
 12145  003902                     _PortTests:
 12146                           	opt stack 22
 12147  003902                     l1129:
 12148  003902  A281               	btfss	3969,1,c	;volatile
 12149  003904  D7FE               	goto	l1129
 12150                           
 12151                           ;Test.c: 353: var = PORTB >> 4;
 12152  003906  CF81 F080          	movff	3969,??_PortTests	;volatile
 12153  00390A  0100               	movlb	0	; () banked
 12154  00390C  3B80               	swapf	??_PortTests& (0+255),f,b
 12155  00390E  0E0F               	movlw	15
 12156  003910  1780               	andwf	??_PortTests& (0+255),f,b
 12157  003912  0100               	movlb	0	; () banked
 12158  003914  5180               	movf	??_PortTests& (0+255),w,b
 12159  003916  0100               	movlb	0	; () banked
 12160  003918  6FFA               	movwf	_var& (0+255),b
 12161  00391A  6BFB               	clrf	(_var+1)& (0+255),b
 12162                           
 12163                           ;Test.c: 354: switch(var){
 12164  00391C  D00C               	goto	l6986
 12165  00391E                     l1133:
 12166                           
 12167                           ; BSR set to: 0
 12168                           ;Test.c: 356: LATEbits.LATE0 = 1;
 12169  00391E  808D               	bsf	3981,0,c	;volatile
 12170                           
 12171                           ;Test.c: 357: break;
 12172  003920  D027               	goto	l1141
 12173  003922                     l1135:
 12174                           
 12175                           ; BSR set to: 0
 12176                           ;Test.c: 359: LATEbits.LATE1 = 1;
 12177  003922  828D               	bsf	3981,1,c	;volatile
 12178                           
 12179                           ;Test.c: 360: break;
 12180  003924  D025               	goto	l1141
 12181  003926                     l1136:
 12182                           
 12183                           ; BSR set to: 0
 12184                           ;Test.c: 362: LATDbits.LATD0 = 1;
 12185  003926  808C               	bsf	3980,0,c	;volatile
 12186                           
 12187                           ;Test.c: 363: break;
 12188  003928  D023               	goto	l1141
 12189  00392A                     l1137:
 12190                           
 12191                           ; BSR set to: 0
 12192                           ;Test.c: 365: LATAbits.LATA3 = 1;
 12193  00392A  8689               	bsf	3977,3,c	;volatile
 12194                           
 12195                           ;Test.c: 366: break;
 12196  00392C  D021               	goto	l1141
 12197  00392E                     l1138:
 12198                           
 12199                           ; BSR set to: 0
 12200                           ;Test.c: 368: LATAbits.LATA4 = 1;
 12201  00392E  8889               	bsf	3977,4,c	;volatile
 12202                           
 12203                           ;Test.c: 369: break;
 12204  003930  D01F               	goto	l1141
 12205  003932                     l1139:
 12206                           
 12207                           ; BSR set to: 0
 12208                           ;Test.c: 371: LATAbits.LATA5 = 1;
 12209  003932  8A89               	bsf	3977,5,c	;volatile
 12210                           
 12211                           ; BSR set to: 0
 12212                           ;Test.c: 375: }
 12213                           
 12214                           ; BSR set to: 0
 12215                           ;Test.c: 374: break;
 12216                           
 12217                           ;Test.c: 373: default:
 12218                           
 12219                           ;Test.c: 372: break;
 12220  003934  D01D               	goto	l1141
 12221  003936                     l6986:
 12222                           
 12223                           ; BSR set to: 0
 12224  003936  C0FA  F080         	movff	_var,??_PortTests
 12225  00393A  C0FB  F081         	movff	_var+1,??_PortTests+1
 12226                           
 12227                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 12228                           ; Switch size 1, requested type "space"
 12229                           ; Number of cases is 1, Range of values is 0 to 0
 12230                           ; switch strategies available:
 12231                           ; Name         Instructions Cycles
 12232                           ; simple_byte            4     3 (average)
 12233                           ;	Chosen strategy is simple_byte
 12234  00393E  0100               	movlb	0	; () banked
 12235  003940  5181               	movf	(??_PortTests+1)& (0+255),w,b
 12236  003942  0A00               	xorlw	0	; case 0
 12237  003944  A4D8               	btfss	status,2,c
 12238  003946  D014               	goto	l1141
 12239                           
 12240                           ; BSR set to: 0
 12241                           ; Switch size 1, requested type "space"
 12242                           ; Number of cases is 6, Range of values is 0 to 5
 12243                           ; switch strategies available:
 12244                           ; Name         Instructions Cycles
 12245                           ; simple_byte           19    10 (average)
 12246                           ;	Chosen strategy is simple_byte
 12247  003948  0100               	movlb	0	; () banked
 12248  00394A  5180               	movf	??_PortTests& (0+255),w,b
 12249  00394C  0A00               	xorlw	0	; case 0
 12250  00394E  B4D8               	btfsc	status,2,c
 12251  003950  D7E6               	goto	l1133
 12252  003952  0A01               	xorlw	1	; case 1
 12253  003954  B4D8               	btfsc	status,2,c
 12254  003956  D7E5               	goto	l1135
 12255  003958  0A03               	xorlw	3	; case 2
 12256  00395A  B4D8               	btfsc	status,2,c
 12257  00395C  D7E4               	goto	l1136
 12258  00395E  0A01               	xorlw	1	; case 3
 12259  003960  B4D8               	btfsc	status,2,c
 12260  003962  D7E3               	goto	l1137
 12261  003964  0A07               	xorlw	7	; case 4
 12262  003966  B4D8               	btfsc	status,2,c
 12263  003968  D7E2               	goto	l1138
 12264  00396A  0A01               	xorlw	1	; case 5
 12265  00396C  B4D8               	btfsc	status,2,c
 12266  00396E  D7E1               	goto	l1139
 12267  003970                     l1141:
 12268  003970  B281               	btfsc	3969,1,c	;volatile
 12269  003972  D7FE               	goto	l1141
 12270                           
 12271                           ;Test.c: 377: __nop();
 12272  003974  F000               	nop	
 12273                           
 12274                           ;Test.c: 378: __nop();
 12275  003976  F000               	nop	
 12276                           
 12277                           ;Test.c: 379: LATA = 0x00;
 12278  003978  0E00               	movlw	0
 12279  00397A  6E89               	movwf	3977,c	;volatile
 12280                           
 12281                           ;Test.c: 380: LATE = 0x00;
 12282  00397C  0E00               	movlw	0
 12283  00397E  6E8D               	movwf	3981,c	;volatile
 12284                           
 12285                           ;Test.c: 381: LATD = 0x00; }
 12286  003980  0E00               	movlw	0
 12287  003982  6E8C               	movwf	3980,c	;volatile
 12288  003984  D7BE               	goto	l1129
 12289  003986                     __end_of_PortTests:
 12290                           	opt stack 0
 12291                           tblptru	equ	0xFF8
 12292                           tblptrh	equ	0xFF7
 12293                           tblptrl	equ	0xFF6
 12294                           tablat	equ	0xFF5
 12295                           prodh	equ	0xFF4
 12296                           prodl	equ	0xFF3
 12297                           intcon	equ	0xFF2
 12298                           intcon2	equ	0xFF1
 12299                           intcon3	equ	0xFF0
 12300                           postinc0	equ	0xFEE
 12301                           wreg	equ	0xFE8
 12302                           postdec1	equ	0xFE5
 12303                           fsr1l	equ	0xFE1
 12304                           indf2	equ	0xFDF
 12305                           postinc2	equ	0xFDE
 12306                           postdec2	equ	0xFDD
 12307                           fsr2h	equ	0xFDA
 12308                           fsr2l	equ	0xFD9
 12309                           status	equ	0xFD8
 12310                           
 12311 ;; *************** function _PortTestA5 *****************
 12312 ;; Defined at:
 12313 ;;		line 384 in file "Test.c"
 12314 ;; Parameters:    Size  Location     Type
 12315 ;;		None
 12316 ;; Auto vars:     Size  Location     Type
 12317 ;;		None
 12318 ;; Return value:  Size  Location     Type
 12319 ;;                  1    wreg      void 
 12320 ;; Registers used:
 12321 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12322 ;; Tracked objects:
 12323 ;;		On entry : 0/0
 12324 ;;		On exit  : 0/0
 12325 ;;		Unchanged: 0/0
 12326 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12327 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12328 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12329 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12330 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12331 ;;Total ram usage:        1 bytes
 12332 ;; Hardware stack levels used:    1
 12333 ;; Hardware stack levels required when called:   10
 12334 ;; This function calls:
 12335 ;;		_lcdInst
 12336 ;;		_printf
 12337 ;; This function is called by:
 12338 ;;		_Test
 12339 ;; This function uses a non-reentrant model
 12340 ;;
 12341                           
 12342                           	psect	text44
 12343  003CD4                     __ptext44:
 12344                           	opt stack 0
 12345  003CD4                     _PortTestA5:
 12346                           	opt stack 19
 12347                           
 12348                           ;Test.c: 385: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12349                           
 12350                           ;incstack = 0
 12351  003CD4  0E01               	movlw	1
 12352  003CD6  ECA5  F022         	call	_lcdInst
 12353  003CDA  0E68               	movlw	104
 12354  003CDC  0100               	movlb	0	; () banked
 12355  003CDE  6FAB               	movwf	??_PortTestA5& (0+255),b
 12356  003CE0  0EE4               	movlw	228
 12357  003CE2                     u7707:
 12358  003CE2  2EE8               	decfsz	wreg,f,c
 12359  003CE4  D7FE               	bra	u7707
 12360  003CE6  2FAB               	decfsz	??_PortTestA5& (0+255),f,b
 12361  003CE8  D7FC               	bra	u7707
 12362  003CEA  F000               	nop	
 12363  003CEC  0E80               	movlw	128
 12364  003CEE  ECA5  F022         	call	_lcdInst
 12365                           
 12366                           ;Test.c: 386: printf("D WILL RETURN    ");
 12367  003CF2  0E95               	movlw	low STR_106
 12368  003CF4  0100               	movlb	0	; () banked
 12369  003CF6  6F8E               	movwf	printf@f& (0+255),b
 12370  003CF8  0EFB               	movlw	high STR_106
 12371  003CFA  0100               	movlb	0	; () banked
 12372  003CFC  6F8F               	movwf	(printf@f+1)& (0+255),b
 12373  003CFE  EC9C  F008         	call	_printf	;wreg free
 12374                           
 12375                           ;Test.c: 387: lcdInst(0b11000000);;
 12376  003D02  0EC0               	movlw	192
 12377  003D04  ECA5  F022         	call	_lcdInst
 12378                           
 12379                           ;Test.c: 388: printf("OTHER SETS RA5   ");
 12380  003D08  0EA7               	movlw	low STR_107
 12381  003D0A  0100               	movlb	0	; () banked
 12382  003D0C  6F8E               	movwf	printf@f& (0+255),b
 12383  003D0E  0EFB               	movlw	high STR_107
 12384  003D10  0100               	movlb	0	; () banked
 12385  003D12  6F8F               	movwf	(printf@f+1)& (0+255),b
 12386  003D14  EC9C  F008         	call	_printf	;wreg free
 12387  003D18                     l1150:
 12388  003D18  A281               	btfss	3969,1,c	;volatile
 12389  003D1A  D7FE               	goto	l1150
 12390                           
 12391                           ;Test.c: 393: }
 12392                           ;Test.c: 394: if(PORTB >> 4 == 0b1111){
 12393  003D1C  3881               	swapf	3969,w,c	;volatile
 12394  003D1E  0B0F               	andlw	15
 12395  003D20  0A0F               	xorlw	15
 12396  003D22  B4D8               	btfsc	status,2,c
 12397  003D24  0012               	return	
 12398                           
 12399                           ;Test.c: 397: else{
 12400                           ;Test.c: 398: LATAbits.LATA5 = 1;
 12401                           
 12402                           ;Test.c: 396: }
 12403                           
 12404                           ;Test.c: 395: break;
 12405  003D26  8A89               	bsf	3977,5,c	;volatile
 12406  003D28                     l1156:
 12407  003D28  B281               	btfsc	3969,1,c	;volatile
 12408  003D2A  D7FE               	goto	l1156
 12409                           
 12410                           ;Test.c: 401: }
 12411                           ;Test.c: 413: LATAbits.LATA5 = 0;
 12412  003D2C  9A89               	bcf	3977,5,c	;volatile
 12413  003D2E  D7F4               	goto	l1150
 12414  003D30                     __end_of_PortTestA5:
 12415                           	opt stack 0
 12416                           tblptru	equ	0xFF8
 12417                           tblptrh	equ	0xFF7
 12418                           tblptrl	equ	0xFF6
 12419                           tablat	equ	0xFF5
 12420                           prodh	equ	0xFF4
 12421                           prodl	equ	0xFF3
 12422                           intcon	equ	0xFF2
 12423                           intcon2	equ	0xFF1
 12424                           intcon3	equ	0xFF0
 12425                           postinc0	equ	0xFEE
 12426                           wreg	equ	0xFE8
 12427                           postdec1	equ	0xFE5
 12428                           fsr1l	equ	0xFE1
 12429                           indf2	equ	0xFDF
 12430                           postinc2	equ	0xFDE
 12431                           postdec2	equ	0xFDD
 12432                           fsr2h	equ	0xFDA
 12433                           fsr2l	equ	0xFD9
 12434                           status	equ	0xFD8
 12435                           
 12436 ;; *************** function _EEPROMTest *****************
 12437 ;; Defined at:
 12438 ;;		line 470 in file "Test.c"
 12439 ;; Parameters:    Size  Location     Type
 12440 ;;		None
 12441 ;; Auto vars:     Size  Location     Type
 12442 ;;		None
 12443 ;; Return value:  Size  Location     Type
 12444 ;;                  1    wreg      void 
 12445 ;; Registers used:
 12446 ;;		None
 12447 ;; Tracked objects:
 12448 ;;		On entry : 0/0
 12449 ;;		On exit  : 0/0
 12450 ;;		Unchanged: 0/0
 12451 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12452 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12453 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12454 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12455 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12456 ;;Total ram usage:        0 bytes
 12457 ;; Hardware stack levels used:    1
 12458 ;; Hardware stack levels required when called:    7
 12459 ;; This function calls:
 12460 ;;		Nothing
 12461 ;; This function is called by:
 12462 ;;		_Test
 12463 ;; This function uses a non-reentrant model
 12464 ;;
 12465                           
 12466                           	psect	text45
 12467  0045AE                     __ptext45:
 12468                           	opt stack 0
 12469  0045AE                     _EEPROMTest:
 12470                           	opt stack 22
 12471                           
 12472                           ;incstack = 0
 12473  0045AE  0012               	return		;funcret
 12474  0045B0                     __end_of_EEPROMTest:
 12475                           	opt stack 0
 12476                           tblptru	equ	0xFF8
 12477                           tblptrh	equ	0xFF7
 12478                           tblptrl	equ	0xFF6
 12479                           tablat	equ	0xFF5
 12480                           prodh	equ	0xFF4
 12481                           prodl	equ	0xFF3
 12482                           intcon	equ	0xFF2
 12483                           intcon2	equ	0xFF1
 12484                           intcon3	equ	0xFF0
 12485                           postinc0	equ	0xFEE
 12486                           wreg	equ	0xFE8
 12487                           postdec1	equ	0xFE5
 12488                           fsr1l	equ	0xFE1
 12489                           indf2	equ	0xFDF
 12490                           postinc2	equ	0xFDE
 12491                           postdec2	equ	0xFDD
 12492                           fsr2h	equ	0xFDA
 12493                           fsr2l	equ	0xFD9
 12494                           status	equ	0xFD8
 12495                           
 12496 ;; *************** function _BothServos *****************
 12497 ;; Defined at:
 12498 ;;		line 300 in file "Test.c"
 12499 ;; Parameters:    Size  Location     Type
 12500 ;;		None
 12501 ;; Auto vars:     Size  Location     Type
 12502 ;;		None
 12503 ;; Return value:  Size  Location     Type
 12504 ;;                  1    wreg      void 
 12505 ;; Registers used:
 12506 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12507 ;; Tracked objects:
 12508 ;;		On entry : 0/0
 12509 ;;		On exit  : 0/0
 12510 ;;		Unchanged: 0/0
 12511 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12512 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12513 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12514 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12515 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12516 ;;Total ram usage:        2 bytes
 12517 ;; Hardware stack levels used:    1
 12518 ;; Hardware stack levels required when called:   10
 12519 ;; This function calls:
 12520 ;;		_initServos
 12521 ;;		_lcdInst
 12522 ;;		_printf
 12523 ;;		_updateServoPosition
 12524 ;; This function is called by:
 12525 ;;		_Test
 12526 ;; This function uses a non-reentrant model
 12527 ;;
 12528                           
 12529                           	psect	text46
 12530  0018DE                     __ptext46:
 12531                           	opt stack 0
 12532  0018DE                     _BothServos:
 12533                           	opt stack 19
 12534                           
 12535                           ;Test.c: 301: lcdInst(0x01);_delay((unsigned long)((10)*(32000000/4000.0)));;lcdInst(0b1
      +                          0000000);;
 12536                           
 12537                           ;incstack = 0
 12538  0018DE  0E01               	movlw	1
 12539  0018E0  ECA5  F022         	call	_lcdInst
 12540  0018E4  0E68               	movlw	104
 12541  0018E6  0100               	movlb	0	; () banked
 12542  0018E8  6FAB               	movwf	??_BothServos& (0+255),b
 12543  0018EA  0EE4               	movlw	228
 12544  0018EC                     u7717:
 12545  0018EC  2EE8               	decfsz	wreg,f,c
 12546  0018EE  D7FE               	bra	u7717
 12547  0018F0  2FAB               	decfsz	??_BothServos& (0+255),f,b
 12548  0018F2  D7FC               	bra	u7717
 12549  0018F4  F000               	nop	
 12550  0018F6  0E80               	movlw	128
 12551  0018F8  ECA5  F022         	call	_lcdInst
 12552                           
 12553                           ;Test.c: 302: printf("TST: BOTH SERVOS");
 12554  0018FC  0EDC               	movlw	low STR_105
 12555  0018FE  0100               	movlb	0	; () banked
 12556  001900  6F8E               	movwf	printf@f& (0+255),b
 12557  001902  0EFC               	movlw	high STR_105
 12558  001904  0100               	movlb	0	; () banked
 12559  001906  6F8F               	movwf	(printf@f+1)& (0+255),b
 12560  001908  EC9C  F008         	call	_printf	;wreg free
 12561                           
 12562                           ;Test.c: 303: TMR1ON = 1;
 12563  00190C  80CD               	bsf	4045,0,c	;volatile
 12564                           
 12565                           ;Test.c: 304: TMR3ON = 1;
 12566  00190E  80B1               	bsf	4017,0,c	;volatile
 12567                           
 12568                           ;Test.c: 305: machine_state = Sorting_state;
 12569  001910  0E01               	movlw	1
 12570  001912  0100               	movlb	0	; () banked
 12571  001914  6FFC               	movwf	_machine_state& (0+255),b
 12572                           
 12573                           ; BSR set to: 0
 12574                           ;Test.c: 306: was_low_1 = 0;
 12575  001916  0E00               	movlw	0
 12576  001918  6E7A               	movwf	_was_low_1+1,c	;volatile
 12577  00191A  0E00               	movlw	0
 12578  00191C  6E79               	movwf	_was_low_1,c	;volatile
 12579                           
 12580                           ; BSR set to: 0
 12581                           ;Test.c: 307: was_low_1 = 0;
 12582  00191E  0E00               	movlw	0
 12583  001920  6E7A               	movwf	_was_low_1+1,c	;volatile
 12584  001922  0E00               	movlw	0
 12585  001924  6E79               	movwf	_was_low_1,c	;volatile
 12586                           
 12587                           ; BSR set to: 0
 12588                           ;Test.c: 313: initServos();
 12589  001926  EC98  F01E         	call	_initServos	;wreg free
 12590                           
 12591                           ;Test.c: 314: _delay((unsigned long)((1500)*(32000000/4000.0)));
 12592  00192A  0E3D               	movlw	61
 12593  00192C  0100               	movlb	0	; () banked
 12594  00192E  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 12595  001930  0EE1               	movlw	225
 12596  001932  0100               	movlb	0	; () banked
 12597  001934  6FAB               	movwf	??_BothServos& (0+255),b
 12598  001936  0E3F               	movlw	63
 12599  001938                     u7727:
 12600  001938  2EE8               	decfsz	wreg,f,c
 12601  00193A  D7FE               	bra	u7727
 12602  00193C  2FAB               	decfsz	??_BothServos& (0+255),f,b
 12603  00193E  D7FC               	bra	u7727
 12604  001940  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 12605  001942  D7FA               	bra	u7727
 12606  001944  D000               	nop2	
 12607                           
 12608                           ;Test.c: 315: updateServoPosition(500, 1);
 12609  001946  0E01               	movlw	1
 12610  001948  0100               	movlb	0	; () banked
 12611  00194A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12612  00194C  0EF4               	movlw	244
 12613  00194E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12614  001950  0E00               	movlw	0
 12615  001952  0100               	movlb	0	; () banked
 12616  001954  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12617  001956  0E01               	movlw	1
 12618  001958  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12619  00195A  ECFF  F01C         	call	_updateServoPosition	;wreg free
 12620                           
 12621                           ;Test.c: 316: updateServoPosition(1350, 3);
 12622  00195E  0E05               	movlw	5
 12623  001960  0100               	movlb	0	; () banked
 12624  001962  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12625  001964  0E46               	movlw	70
 12626  001966  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12627  001968  0E00               	movlw	0
 12628  00196A  0100               	movlb	0	; () banked
 12629  00196C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12630  00196E  0E03               	movlw	3
 12631  001970  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12632  001972  ECFF  F01C         	call	_updateServoPosition	;wreg free
 12633                           
 12634                           ;Test.c: 317: _delay((unsigned long)((750)*(32000000/4000.0)));
 12635  001976  0E1F               	movlw	31
 12636  001978  0100               	movlb	0	; () banked
 12637  00197A  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 12638  00197C  0E71               	movlw	113
 12639  00197E  0100               	movlb	0	; () banked
 12640  001980  6FAB               	movwf	??_BothServos& (0+255),b
 12641  001982  0E1E               	movlw	30
 12642  001984                     u7737:
 12643  001984  2EE8               	decfsz	wreg,f,c
 12644  001986  D7FE               	bra	u7737
 12645  001988  2FAB               	decfsz	??_BothServos& (0+255),f,b
 12646  00198A  D7FC               	bra	u7737
 12647  00198C  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 12648  00198E  D7FA               	bra	u7737
 12649  001990  F000               	nop	
 12650                           
 12651                           ;Test.c: 318: updateServoPosition(1150, 3);
 12652  001992  0E04               	movlw	4
 12653  001994  0100               	movlb	0	; () banked
 12654  001996  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12655  001998  0E7E               	movlw	126
 12656  00199A  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12657  00199C  0E00               	movlw	0
 12658  00199E  0100               	movlb	0	; () banked
 12659  0019A0  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12660  0019A2  0E03               	movlw	3
 12661  0019A4  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12662  0019A6  ECFF  F01C         	call	_updateServoPosition	;wreg free
 12663                           
 12664                           ;Test.c: 319: _delay((unsigned long)((750)*(32000000/4000.0)));
 12665  0019AA  0E1F               	movlw	31
 12666  0019AC  0100               	movlb	0	; () banked
 12667  0019AE  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 12668  0019B0  0E71               	movlw	113
 12669  0019B2  0100               	movlb	0	; () banked
 12670  0019B4  6FAB               	movwf	??_BothServos& (0+255),b
 12671  0019B6  0E1E               	movlw	30
 12672  0019B8                     u7747:
 12673  0019B8  2EE8               	decfsz	wreg,f,c
 12674  0019BA  D7FE               	bra	u7747
 12675  0019BC  2FAB               	decfsz	??_BothServos& (0+255),f,b
 12676  0019BE  D7FC               	bra	u7747
 12677  0019C0  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 12678  0019C2  D7FA               	bra	u7747
 12679  0019C4  F000               	nop	
 12680                           
 12681                           ;Test.c: 321: updateServoPosition(700, 1);
 12682  0019C6  0E02               	movlw	2
 12683  0019C8  0100               	movlb	0	; () banked
 12684  0019CA  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12685  0019CC  0EBC               	movlw	188
 12686  0019CE  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12687  0019D0  0E00               	movlw	0
 12688  0019D2  0100               	movlb	0	; () banked
 12689  0019D4  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12690  0019D6  0E01               	movlw	1
 12691  0019D8  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12692  0019DA  ECFF  F01C         	call	_updateServoPosition	;wreg free
 12693                           
 12694                           ;Test.c: 322: updateServoPosition(1350, 3);
 12695  0019DE  0E05               	movlw	5
 12696  0019E0  0100               	movlb	0	; () banked
 12697  0019E2  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12698  0019E4  0E46               	movlw	70
 12699  0019E6  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12700  0019E8  0E00               	movlw	0
 12701  0019EA  0100               	movlb	0	; () banked
 12702  0019EC  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12703  0019EE  0E03               	movlw	3
 12704  0019F0  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12705  0019F2  ECFF  F01C         	call	_updateServoPosition	;wreg free
 12706                           
 12707                           ;Test.c: 323: _delay((unsigned long)((750)*(32000000/4000.0)));
 12708  0019F6  0E1F               	movlw	31
 12709  0019F8  0100               	movlb	0	; () banked
 12710  0019FA  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 12711  0019FC  0E71               	movlw	113
 12712  0019FE  0100               	movlb	0	; () banked
 12713  001A00  6FAB               	movwf	??_BothServos& (0+255),b
 12714  001A02  0E1E               	movlw	30
 12715  001A04                     u7757:
 12716  001A04  2EE8               	decfsz	wreg,f,c
 12717  001A06  D7FE               	bra	u7757
 12718  001A08  2FAB               	decfsz	??_BothServos& (0+255),f,b
 12719  001A0A  D7FC               	bra	u7757
 12720  001A0C  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 12721  001A0E  D7FA               	bra	u7757
 12722  001A10  F000               	nop	
 12723                           
 12724                           ;Test.c: 324: updateServoPosition(1150, 3);
 12725  001A12  0E04               	movlw	4
 12726  001A14  0100               	movlb	0	; () banked
 12727  001A16  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12728  001A18  0E7E               	movlw	126
 12729  001A1A  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12730  001A1C  0E00               	movlw	0
 12731  001A1E  0100               	movlb	0	; () banked
 12732  001A20  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12733  001A22  0E03               	movlw	3
 12734  001A24  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12735  001A26  ECFF  F01C         	call	_updateServoPosition	;wreg free
 12736                           
 12737                           ;Test.c: 325: _delay((unsigned long)((750)*(32000000/4000.0)));
 12738  001A2A  0E1F               	movlw	31
 12739  001A2C  0100               	movlb	0	; () banked
 12740  001A2E  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 12741  001A30  0E71               	movlw	113
 12742  001A32  0100               	movlb	0	; () banked
 12743  001A34  6FAB               	movwf	??_BothServos& (0+255),b
 12744  001A36  0E1E               	movlw	30
 12745  001A38                     u7767:
 12746  001A38  2EE8               	decfsz	wreg,f,c
 12747  001A3A  D7FE               	bra	u7767
 12748  001A3C  2FAB               	decfsz	??_BothServos& (0+255),f,b
 12749  001A3E  D7FC               	bra	u7767
 12750  001A40  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 12751  001A42  D7FA               	bra	u7767
 12752  001A44  F000               	nop	
 12753                           
 12754                           ;Test.c: 327: updateServoPosition(1250, 1);
 12755  001A46  0E04               	movlw	4
 12756  001A48  0100               	movlb	0	; () banked
 12757  001A4A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12758  001A4C  0EE2               	movlw	226
 12759  001A4E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12760  001A50  0E00               	movlw	0
 12761  001A52  0100               	movlb	0	; () banked
 12762  001A54  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12763  001A56  0E01               	movlw	1
 12764  001A58  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12765  001A5A  ECFF  F01C         	call	_updateServoPosition	;wreg free
 12766                           
 12767                           ;Test.c: 328: updateServoPosition(1350, 3);
 12768  001A5E  0E05               	movlw	5
 12769  001A60  0100               	movlb	0	; () banked
 12770  001A62  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12771  001A64  0E46               	movlw	70
 12772  001A66  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12773  001A68  0E00               	movlw	0
 12774  001A6A  0100               	movlb	0	; () banked
 12775  001A6C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12776  001A6E  0E03               	movlw	3
 12777  001A70  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12778  001A72  ECFF  F01C         	call	_updateServoPosition	;wreg free
 12779                           
 12780                           ;Test.c: 329: _delay((unsigned long)((750)*(32000000/4000.0)));
 12781  001A76  0E1F               	movlw	31
 12782  001A78  0100               	movlb	0	; () banked
 12783  001A7A  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 12784  001A7C  0E71               	movlw	113
 12785  001A7E  0100               	movlb	0	; () banked
 12786  001A80  6FAB               	movwf	??_BothServos& (0+255),b
 12787  001A82  0E1E               	movlw	30
 12788  001A84                     u7777:
 12789  001A84  2EE8               	decfsz	wreg,f,c
 12790  001A86  D7FE               	bra	u7777
 12791  001A88  2FAB               	decfsz	??_BothServos& (0+255),f,b
 12792  001A8A  D7FC               	bra	u7777
 12793  001A8C  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 12794  001A8E  D7FA               	bra	u7777
 12795  001A90  F000               	nop	
 12796                           
 12797                           ;Test.c: 330: updateServoPosition(1150, 3);
 12798  001A92  0E04               	movlw	4
 12799  001A94  0100               	movlb	0	; () banked
 12800  001A96  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12801  001A98  0E7E               	movlw	126
 12802  001A9A  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12803  001A9C  0E00               	movlw	0
 12804  001A9E  0100               	movlb	0	; () banked
 12805  001AA0  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12806  001AA2  0E03               	movlw	3
 12807  001AA4  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12808  001AA6  ECFF  F01C         	call	_updateServoPosition	;wreg free
 12809                           
 12810                           ;Test.c: 331: _delay((unsigned long)((750)*(32000000/4000.0)));
 12811  001AAA  0E1F               	movlw	31
 12812  001AAC  0100               	movlb	0	; () banked
 12813  001AAE  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 12814  001AB0  0E71               	movlw	113
 12815  001AB2  0100               	movlb	0	; () banked
 12816  001AB4  6FAB               	movwf	??_BothServos& (0+255),b
 12817  001AB6  0E1E               	movlw	30
 12818  001AB8                     u7787:
 12819  001AB8  2EE8               	decfsz	wreg,f,c
 12820  001ABA  D7FE               	bra	u7787
 12821  001ABC  2FAB               	decfsz	??_BothServos& (0+255),f,b
 12822  001ABE  D7FC               	bra	u7787
 12823  001AC0  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 12824  001AC2  D7FA               	bra	u7787
 12825  001AC4  F000               	nop	
 12826                           
 12827                           ;Test.c: 333: updateServoPosition(1650, 1);
 12828  001AC6  0E06               	movlw	6
 12829  001AC8  0100               	movlb	0	; () banked
 12830  001ACA  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12831  001ACC  0E72               	movlw	114
 12832  001ACE  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12833  001AD0  0E00               	movlw	0
 12834  001AD2  0100               	movlb	0	; () banked
 12835  001AD4  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12836  001AD6  0E01               	movlw	1
 12837  001AD8  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12838  001ADA  ECFF  F01C         	call	_updateServoPosition	;wreg free
 12839                           
 12840                           ;Test.c: 334: updateServoPosition(1350, 3);
 12841  001ADE  0E05               	movlw	5
 12842  001AE0  0100               	movlb	0	; () banked
 12843  001AE2  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12844  001AE4  0E46               	movlw	70
 12845  001AE6  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12846  001AE8  0E00               	movlw	0
 12847  001AEA  0100               	movlb	0	; () banked
 12848  001AEC  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12849  001AEE  0E03               	movlw	3
 12850  001AF0  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12851  001AF2  ECFF  F01C         	call	_updateServoPosition	;wreg free
 12852                           
 12853                           ;Test.c: 335: _delay((unsigned long)((750)*(32000000/4000.0)));
 12854  001AF6  0E1F               	movlw	31
 12855  001AF8  0100               	movlb	0	; () banked
 12856  001AFA  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 12857  001AFC  0E71               	movlw	113
 12858  001AFE  0100               	movlb	0	; () banked
 12859  001B00  6FAB               	movwf	??_BothServos& (0+255),b
 12860  001B02  0E1E               	movlw	30
 12861  001B04                     u7797:
 12862  001B04  2EE8               	decfsz	wreg,f,c
 12863  001B06  D7FE               	bra	u7797
 12864  001B08  2FAB               	decfsz	??_BothServos& (0+255),f,b
 12865  001B0A  D7FC               	bra	u7797
 12866  001B0C  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 12867  001B0E  D7FA               	bra	u7797
 12868  001B10  F000               	nop	
 12869                           
 12870                           ;Test.c: 336: updateServoPosition(1150, 3);
 12871  001B12  0E04               	movlw	4
 12872  001B14  0100               	movlb	0	; () banked
 12873  001B16  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12874  001B18  0E7E               	movlw	126
 12875  001B1A  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12876  001B1C  0E00               	movlw	0
 12877  001B1E  0100               	movlb	0	; () banked
 12878  001B20  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12879  001B22  0E03               	movlw	3
 12880  001B24  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12881  001B26  ECFF  F01C         	call	_updateServoPosition	;wreg free
 12882                           
 12883                           ;Test.c: 337: _delay((unsigned long)((750)*(32000000/4000.0)));
 12884  001B2A  0E1F               	movlw	31
 12885  001B2C  0100               	movlb	0	; () banked
 12886  001B2E  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 12887  001B30  0E71               	movlw	113
 12888  001B32  0100               	movlb	0	; () banked
 12889  001B34  6FAB               	movwf	??_BothServos& (0+255),b
 12890  001B36  0E1E               	movlw	30
 12891  001B38                     u7807:
 12892  001B38  2EE8               	decfsz	wreg,f,c
 12893  001B3A  D7FE               	bra	u7807
 12894  001B3C  2FAB               	decfsz	??_BothServos& (0+255),f,b
 12895  001B3E  D7FC               	bra	u7807
 12896  001B40  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 12897  001B42  D7FA               	bra	u7807
 12898  001B44  F000               	nop	
 12899                           
 12900                           ;Test.c: 339: updateServoPosition(2000, 1);
 12901  001B46  0E07               	movlw	7
 12902  001B48  0100               	movlb	0	; () banked
 12903  001B4A  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12904  001B4C  0ED0               	movlw	208
 12905  001B4E  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12906  001B50  0E00               	movlw	0
 12907  001B52  0100               	movlb	0	; () banked
 12908  001B54  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12909  001B56  0E01               	movlw	1
 12910  001B58  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12911  001B5A  ECFF  F01C         	call	_updateServoPosition	;wreg free
 12912                           
 12913                           ;Test.c: 340: updateServoPosition(1350, 3);
 12914  001B5E  0E05               	movlw	5
 12915  001B60  0100               	movlb	0	; () banked
 12916  001B62  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12917  001B64  0E46               	movlw	70
 12918  001B66  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12919  001B68  0E00               	movlw	0
 12920  001B6A  0100               	movlb	0	; () banked
 12921  001B6C  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12922  001B6E  0E03               	movlw	3
 12923  001B70  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12924  001B72  ECFF  F01C         	call	_updateServoPosition	;wreg free
 12925                           
 12926                           ;Test.c: 341: _delay((unsigned long)((750)*(32000000/4000.0)));
 12927  001B76  0E1F               	movlw	31
 12928  001B78  0100               	movlb	0	; () banked
 12929  001B7A  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 12930  001B7C  0E71               	movlw	113
 12931  001B7E  0100               	movlb	0	; () banked
 12932  001B80  6FAB               	movwf	??_BothServos& (0+255),b
 12933  001B82  0E1E               	movlw	30
 12934  001B84                     u7817:
 12935  001B84  2EE8               	decfsz	wreg,f,c
 12936  001B86  D7FE               	bra	u7817
 12937  001B88  2FAB               	decfsz	??_BothServos& (0+255),f,b
 12938  001B8A  D7FC               	bra	u7817
 12939  001B8C  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 12940  001B8E  D7FA               	bra	u7817
 12941  001B90  F000               	nop	
 12942                           
 12943                           ;Test.c: 342: updateServoPosition(1150, 3);
 12944  001B92  0E04               	movlw	4
 12945  001B94  0100               	movlb	0	; () banked
 12946  001B96  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 12947  001B98  0E7E               	movlw	126
 12948  001B9A  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 12949  001B9C  0E00               	movlw	0
 12950  001B9E  0100               	movlb	0	; () banked
 12951  001BA0  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 12952  001BA2  0E03               	movlw	3
 12953  001BA4  6F82               	movwf	updateServoPosition@timer& (0+255),b
 12954  001BA6  ECFF  F01C         	call	_updateServoPosition	;wreg free
 12955                           
 12956                           ;Test.c: 343: _delay((unsigned long)((750)*(32000000/4000.0)));
 12957  001BAA  0E1F               	movlw	31
 12958  001BAC  0100               	movlb	0	; () banked
 12959  001BAE  6FAC               	movwf	(??_BothServos+1)& (0+255),b
 12960  001BB0  0E71               	movlw	113
 12961  001BB2  0100               	movlb	0	; () banked
 12962  001BB4  6FAB               	movwf	??_BothServos& (0+255),b
 12963  001BB6  0E1E               	movlw	30
 12964  001BB8                     u7827:
 12965  001BB8  2EE8               	decfsz	wreg,f,c
 12966  001BBA  D7FE               	bra	u7827
 12967  001BBC  2FAB               	decfsz	??_BothServos& (0+255),f,b
 12968  001BBE  D7FC               	bra	u7827
 12969  001BC0  2FAC               	decfsz	(??_BothServos+1)& (0+255),f,b
 12970  001BC2  D7FA               	bra	u7827
 12971  001BC4  F000               	nop	
 12972                           
 12973                           ;Test.c: 345: TMR1ON = 0;
 12974  001BC6  90CD               	bcf	4045,0,c	;volatile
 12975                           
 12976                           ;Test.c: 346: TMR3ON = 0;
 12977  001BC8  90B1               	bcf	4017,0,c	;volatile
 12978                           
 12979                           ;Test.c: 347: (INTCONbits.GIE = 0);
 12980  001BCA  9EF2               	bcf	intcon,7,c	;volatile
 12981  001BCC  0012               	return		;funcret
 12982  001BCE                     __end_of_BothServos:
 12983                           	opt stack 0
 12984                           tblptru	equ	0xFF8
 12985                           tblptrh	equ	0xFF7
 12986                           tblptrl	equ	0xFF6
 12987                           tablat	equ	0xFF5
 12988                           prodh	equ	0xFF4
 12989                           prodl	equ	0xFF3
 12990                           intcon	equ	0xFF2
 12991                           intcon2	equ	0xFF1
 12992                           intcon3	equ	0xFF0
 12993                           postinc0	equ	0xFEE
 12994                           wreg	equ	0xFE8
 12995                           postdec1	equ	0xFE5
 12996                           fsr1l	equ	0xFE1
 12997                           indf2	equ	0xFDF
 12998                           postinc2	equ	0xFDE
 12999                           postdec2	equ	0xFDD
 13000                           fsr2h	equ	0xFDA
 13001                           fsr2l	equ	0xFD9
 13002                           status	equ	0xFD8
 13003                           
 13004 ;; *************** function _printf *****************
 13005 ;; Defined at:
 13006 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 13007 ;; Parameters:    Size  Location     Type
 13008 ;;  f               2   14[BANK0 ] PTR const unsigned char 
 13009 ;;		 -> STR_111(17), STR_110(17), STR_109(10), STR_108(13), 
 13010 ;;		 -> STR_107(18), STR_106(18), STR_105(17), STR_104(15), 
 13011 ;;		 -> STR_103(15), STR_102(15), STR_101(17), STR_100(17), 
 13012 ;;		 -> STR_99(17), STR_98(16), STR_97(17), STR_96(17), 
 13013 ;;		 -> STR_95(17), STR_94(17), STR_93(17), STR_92(17), 
 13014 ;;		 -> STR_91(15), STR_90(11), STR_89(17), STR_88(11), 
 13015 ;;		 -> STR_87(17), STR_86(14), STR_85(15), STR_84(14), 
 13016 ;;		 -> STR_83(10), STR_82(16), STR_81(15), STR_80(15), 
 13017 ;;		 -> STR_79(13), STR_78(14), STR_77(8), STR_76(14), 
 13018 ;;		 -> STR_75(15), STR_74(12), STR_73(14), STR_72(17), 
 13019 ;;		 -> STR_71(14), STR_70(15), STR_69(17), STR_68(17), 
 13020 ;;		 -> STR_67(7), STR_66(21), STR_65(13), STR_64(11), 
 13021 ;;		 -> STR_63(24), STR_50(17), STR_49(17), STR_48(17), 
 13022 ;;		 -> STR_47(17), STR_46(17), STR_45(17), STR_44(17), 
 13023 ;;		 -> STR_43(17), STR_42(17), STR_41(17), STR_40(17), 
 13024 ;;		 -> STR_39(17), STR_38(17), STR_37(17), STR_36(17), 
 13025 ;;		 -> STR_35(17), STR_34(17), STR_33(17), STR_32(17), 
 13026 ;;		 -> STR_31(17), STR_30(17), STR_29(3), STR_28(17), 
 13027 ;;		 -> STR_27(19), STR_26(17), STR_25(19), STR_24(17), 
 13028 ;;		 -> STR_23(14), STR_22(10), STR_21(24), STR_7(7), 
 13029 ;;		 -> STR_6(17), STR_5(18), STR_4(16), STR_3(18), 
 13030 ;;		 -> STR_2(14), STR_1(18), 
 13031 ;; Auto vars:     Size  Location     Type
 13032 ;;  tmpval          4    0        struct .
 13033 ;;  width           2   41[BANK0 ] int 
 13034 ;;  val             2   37[BANK0 ] unsigned int 
 13035 ;;  len             2   35[BANK0 ] unsigned int 
 13036 ;;  ap              2   33[BANK0 ] PTR void [1]
 13037 ;;		 -> ?i2_printf(2), ?_printf(2), 
 13038 ;;  cp              2   31[BANK0 ] PTR const unsigned char 
 13039 ;;		 -> STR_112(7), count_total(2), printRTC@month(4), UI@month(4), 
 13040 ;;  c               1   40[BANK0 ] char 
 13041 ;;  flag            1   39[BANK0 ] unsigned char 
 13042 ;;  prec            1   30[BANK0 ] char 
 13043 ;; Return value:  Size  Location     Type
 13044 ;;                  2   14[BANK0 ] int 
 13045 ;; Registers used:
 13046 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13047 ;; Tracked objects:
 13048 ;;		On entry : 0/0
 13049 ;;		On exit  : 0/0
 13050 ;;		Unchanged: 0/0
 13051 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13052 ;;      Params:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13053 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13054 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13055 ;;      Totals:         0      29       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13056 ;;Total ram usage:       29 bytes
 13057 ;; Hardware stack levels used:    1
 13058 ;; Hardware stack levels required when called:    9
 13059 ;; This function calls:
 13060 ;;		___lwdiv
 13061 ;;		___lwmod
 13062 ;;		___wmul
 13063 ;;		_isdigit
 13064 ;;		_putch
 13065 ;; This function is called by:
 13066 ;;		_UI
 13067 ;;		_change_state_to_menu_start
 13068 ;;		_change_state_to_menu_12
 13069 ;;		_change_state_to_menu_22
 13070 ;;		_printRTC
 13071 ;;		_EEPROM_write
 13072 ;;		_Test
 13073 ;;		_algorithmTest
 13074 ;;		_sensorTest
 13075 ;;		_actuatorTest
 13076 ;;		_BothServos
 13077 ;;		_PortTestA5
 13078 ;;		_SolenoidTestA5
 13079 ;;		_ToggleTestA5
 13080 ;; This function uses a non-reentrant model
 13081 ;;
 13082                           
 13083                           	psect	text47
 13084  001138                     __ptext47:
 13085                           	opt stack 0
 13086  001138                     _printf:
 13087                           	opt stack 18
 13088                           
 13089                           ;doprnt.c: 466: va_list ap;
 13090                           ;doprnt.c: 499: signed char c;
 13091                           ;doprnt.c: 501: int width;
 13092                           ;doprnt.c: 506: signed char prec;
 13093                           ;doprnt.c: 508: unsigned char flag;
 13094                           ;doprnt.c: 523: union {
 13095                           ;doprnt.c: 524: unsigned long vd;
 13096                           ;doprnt.c: 525: double integ;
 13097                           ;doprnt.c: 526: } tmpval;
 13098                           ;doprnt.c: 528: unsigned int val;
 13099                           ;doprnt.c: 529: unsigned len;
 13100                           ;doprnt.c: 530: const char * cp;
 13101                           ;doprnt.c: 533: *ap = __va_start();
 13102                           
 13103                           ;incstack = 0
 13104  001138  0E90               	movlw	low (?_printf+2)
 13105  00113A  0100               	movlb	0	; () banked
 13106  00113C  6FA1               	movwf	printf@ap& (0+255),b
 13107  00113E  0E00               	movlw	high (?_printf+2)
 13108  001140  0100               	movlb	0	; () banked
 13109  001142  6FA2               	movwf	(printf@ap+1)& (0+255),b
 13110                           
 13111                           ;doprnt.c: 536: while(c = *f++) {
 13112  001144  D205               	goto	l5438
 13113  001146                     l5308:
 13114                           
 13115                           ; BSR set to: 0
 13116                           ;doprnt.c: 538: if(c != '%')
 13117  001146  0E25               	movlw	37
 13118  001148  0100               	movlb	0	; () banked
 13119  00114A  19A8               	xorwf	printf@c& (0+255),w,b
 13120  00114C  B4D8               	btfsc	status,2,c
 13121  00114E  D005               	goto	l5312
 13122                           
 13123                           ; BSR set to: 0
 13124                           ;doprnt.c: 540: {
 13125                           ;doprnt.c: 541: (putch(c) );
 13126  001150  0100               	movlb	0	; () banked
 13127  001152  51A8               	movf	printf@c& (0+255),w,b
 13128  001154  EC9D  F022         	call	_putch
 13129                           
 13130                           ;doprnt.c: 542: continue;
 13131  001158  D1FB               	goto	l5438
 13132  00115A                     l5312:
 13133                           
 13134                           ;doprnt.c: 543: }
 13135                           ;doprnt.c: 546: width = 0;
 13136  00115A  0E00               	movlw	0
 13137  00115C  0100               	movlb	0	; () banked
 13138  00115E  6FAA               	movwf	(printf@width+1)& (0+255),b
 13139  001160  0E00               	movlw	0
 13140  001162  6FA9               	movwf	printf@width& (0+255),b
 13141                           
 13142                           ;doprnt.c: 548: flag = 0;
 13143  001164  0E00               	movlw	0
 13144  001166  0100               	movlb	0	; () banked
 13145  001168  6FA7               	movwf	printf@flag& (0+255),b
 13146                           
 13147                           ; BSR set to: 0
 13148                           ;doprnt.c: 551: switch(*f) {
 13149                           
 13150                           ;doprnt.c: 550: for(;;) {
 13151  00116A  D005               	goto	l5318
 13152  00116C                     l5314:
 13153                           
 13154                           ;doprnt.c: 580: flag |= 0x04;
 13155  00116C  0100               	movlb	0	; () banked
 13156  00116E  85A7               	bsf	printf@flag& (0+255),2,b
 13157                           
 13158                           ;doprnt.c: 581: f++;
 13159  001170  0100               	movlb	0	; () banked
 13160  001172  4B8E               	infsnz	printf@f& (0+255),f,b
 13161  001174  2B8F               	incf	(printf@f+1)& (0+255),f,b
 13162  001176                     l5318:
 13163  001176  C08E  FFF6         	movff	printf@f,tblptrl
 13164  00117A  C08F  FFF7         	movff	printf@f+1,tblptrh
 13165  00117E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 13166  00117E  6AF8               	clrf	tblptru,c
 13167  001180                     	endif
 13168  001180                     	if	0	;tblptru may be non-zero
 13169  001180                     	endif
 13170  001180  0008               	tblrd		*
 13171  001182  50F5               	movf	tablat,w,c
 13172                           
 13173                           ; Switch size 1, requested type "space"
 13174                           ; Number of cases is 1, Range of values is 48 to 48
 13175                           ; switch strategies available:
 13176                           ; Name         Instructions Cycles
 13177                           ; simple_byte            4     3 (average)
 13178                           ;	Chosen strategy is simple_byte
 13179  001184  0A30               	xorlw	48	; case 48
 13180  001186  B4D8               	btfsc	status,2,c
 13181  001188  D7F1               	goto	l5314
 13182                           
 13183                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 13184                           
 13185                           ;doprnt.c: 586: }
 13186                           
 13187                           ;doprnt.c: 585: break;
 13188  00118A  C08E  FFF6         	movff	printf@f,tblptrl
 13189  00118E  C08F  FFF7         	movff	printf@f+1,tblptrh
 13190  001192                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 13191  001192  6AF8               	clrf	tblptru,c
 13192  001194                     	endif
 13193  001194                     	if	0	;tblptru may be non-zero
 13194  001194                     	endif
 13195  001194  0008               	tblrd		*
 13196  001196  50F5               	movf	tablat,w,c
 13197  001198  ECB0  F021         	call	_isdigit
 13198  00119C  A0D8               	btfss	status,0,c
 13199  00119E  D0D2               	goto	l5366
 13200                           
 13201                           ;doprnt.c: 598: width = 0;
 13202  0011A0  0E00               	movlw	0
 13203  0011A2  0100               	movlb	0	; () banked
 13204  0011A4  6FAA               	movwf	(printf@width+1)& (0+255),b
 13205  0011A6  0E00               	movlw	0
 13206  0011A8  6FA9               	movwf	printf@width& (0+255),b
 13207  0011AA                     l5324:
 13208                           
 13209                           ;doprnt.c: 600: width *= 10;
 13210  0011AA  C0A9  F080         	movff	printf@width,___wmul@multiplier
 13211  0011AE  C0AA  F081         	movff	printf@width+1,___wmul@multiplier+1
 13212  0011B2  0E00               	movlw	0
 13213  0011B4  0100               	movlb	0	; () banked
 13214  0011B6  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
 13215  0011B8  0E0A               	movlw	10
 13216  0011BA  6F82               	movwf	___wmul@multiplicand& (0+255),b
 13217  0011BC  EC4A  F020         	call	___wmul	;wreg free
 13218  0011C0  C080  F0A9         	movff	?___wmul,printf@width
 13219  0011C4  C081  F0AA         	movff	?___wmul+1,printf@width+1
 13220                           
 13221                           ;doprnt.c: 601: width += *f++ - '0';
 13222  0011C8  0ED0               	movlw	208
 13223  0011CA  0100               	movlb	0	; () banked
 13224  0011CC  6F9A               	movwf	??_printf& (0+255),b
 13225  0011CE  0EFF               	movlw	255
 13226  0011D0  0100               	movlb	0	; () banked
 13227  0011D2  6F9B               	movwf	(??_printf+1)& (0+255),b
 13228  0011D4  C08E  FFF6         	movff	printf@f,tblptrl
 13229  0011D8  C08F  FFF7         	movff	printf@f+1,tblptrh
 13230  0011DC                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 13231  0011DC  6AF8               	clrf	tblptru,c
 13232  0011DE                     	endif
 13233  0011DE                     	if	0	;tblptru may be non-zero
 13234  0011DE                     	endif
 13235  0011DE  0008               	tblrd		*
 13236  0011E0  50F5               	movf	tablat,w,c
 13237  0011E2  0100               	movlb	0	; () banked
 13238  0011E4  6F9C               	movwf	(??_printf+2)& (0+255),b
 13239  0011E6  6B9D               	clrf	(??_printf+3)& (0+255),b
 13240  0011E8  0100               	movlb	0	; () banked
 13241  0011EA  519A               	movf	??_printf& (0+255),w,b
 13242  0011EC  0100               	movlb	0	; () banked
 13243  0011EE  279C               	addwf	(??_printf+2)& (0+255),f,b
 13244  0011F0  0100               	movlb	0	; () banked
 13245  0011F2  519B               	movf	(??_printf+1)& (0+255),w,b
 13246  0011F4  0100               	movlb	0	; () banked
 13247  0011F6  239D               	addwfc	(??_printf+3)& (0+255),f,b
 13248  0011F8  0100               	movlb	0	; () banked
 13249  0011FA  519C               	movf	(??_printf+2)& (0+255),w,b
 13250  0011FC  0100               	movlb	0	; () banked
 13251  0011FE  27A9               	addwf	printf@width& (0+255),f,b
 13252  001200  0100               	movlb	0	; () banked
 13253  001202  519D               	movf	(??_printf+3)& (0+255),w,b
 13254  001204  0100               	movlb	0	; () banked
 13255  001206  23AA               	addwfc	(printf@width+1)& (0+255),f,b
 13256                           
 13257                           ; BSR set to: 0
 13258  001208  0100               	movlb	0	; () banked
 13259  00120A  4B8E               	infsnz	printf@f& (0+255),f,b
 13260  00120C  2B8F               	incf	(printf@f+1)& (0+255),f,b
 13261                           
 13262                           ; BSR set to: 0
 13263                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 13264  00120E  C08E  FFF6         	movff	printf@f,tblptrl
 13265  001212  C08F  FFF7         	movff	printf@f+1,tblptrh
 13266  001216                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 13267  001216  6AF8               	clrf	tblptru,c
 13268  001218                     	endif
 13269  001218                     	if	0	;tblptru may be non-zero
 13270  001218                     	endif
 13271  001218  0008               	tblrd		*
 13272  00121A  50F5               	movf	tablat,w,c
 13273  00121C  ECB0  F021         	call	_isdigit
 13274  001220  A0D8               	btfss	status,0,c
 13275  001222  D090               	goto	l5366
 13276  001224  D7C2               	goto	l5324
 13277  001226                     l5332:
 13278                           
 13279                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 13280  001226  C0A1  FFD9         	movff	printf@ap,fsr2l
 13281  00122A  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 13282  00122E  CFDE F09F          	movff	postinc2,printf@cp
 13283  001232  CFDD F0A0          	movff	postdec2,printf@cp+1
 13284  001236  0E02               	movlw	2
 13285  001238  0100               	movlb	0	; () banked
 13286  00123A  27A1               	addwf	printf@ap& (0+255),f,b
 13287  00123C  0E00               	movlw	0
 13288  00123E  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 13289                           
 13290                           ; BSR set to: 0
 13291                           ;doprnt.c: 740: if(!cp)
 13292  001240  0100               	movlb	0	; () banked
 13293  001242  519F               	movf	printf@cp& (0+255),w,b
 13294  001244  0100               	movlb	0	; () banked
 13295  001246  11A0               	iorwf	(printf@cp+1)& (0+255),w,b
 13296  001248  A4D8               	btfss	status,2,c
 13297  00124A  D006               	goto	l5340
 13298                           
 13299                           ; BSR set to: 0
 13300                           ;doprnt.c: 741: cp = "(null)";
 13301  00124C  0EB5               	movlw	low STR_112
 13302  00124E  0100               	movlb	0	; () banked
 13303  001250  6F9F               	movwf	printf@cp& (0+255),b
 13304  001252  0EFF               	movlw	high STR_112
 13305  001254  0100               	movlb	0	; () banked
 13306  001256  6FA0               	movwf	(printf@cp+1)& (0+255),b
 13307  001258                     l5340:
 13308                           
 13309                           ; BSR set to: 0
 13310                           ;doprnt.c: 745: len = 0;
 13311  001258  0E00               	movlw	0
 13312  00125A  0100               	movlb	0	; () banked
 13313  00125C  6FA4               	movwf	(printf@len+1)& (0+255),b
 13314  00125E  0E00               	movlw	0
 13315  001260  6FA3               	movwf	printf@len& (0+255),b
 13316                           
 13317                           ;doprnt.c: 746: while(cp[len])
 13318  001262  D003               	goto	l5344
 13319  001264                     l5342:
 13320                           
 13321                           ;doprnt.c: 747: len++;
 13322  001264  0100               	movlb	0	; () banked
 13323  001266  4BA3               	infsnz	printf@len& (0+255),f,b
 13324  001268  2BA4               	incf	(printf@len+1)& (0+255),f,b
 13325  00126A                     l5344:
 13326                           
 13327                           ; BSR set to: 0
 13328  00126A  0100               	movlb	0	; () banked
 13329  00126C  51A3               	movf	printf@len& (0+255),w,b
 13330  00126E  0100               	movlb	0	; () banked
 13331  001270  259F               	addwf	printf@cp& (0+255),w,b
 13332  001272  0100               	movlb	0	; () banked
 13333  001274  6F9A               	movwf	??_printf& (0+255),b
 13334  001276  0100               	movlb	0	; () banked
 13335  001278  51A4               	movf	(printf@len+1)& (0+255),w,b
 13336  00127A  0100               	movlb	0	; () banked
 13337  00127C  21A0               	addwfc	(printf@cp+1)& (0+255),w,b
 13338  00127E  0100               	movlb	0	; () banked
 13339  001280  6F9B               	movwf	(??_printf+1)& (0+255),b
 13340  001282  C09A  FFF6         	movff	??_printf,tblptrl
 13341  001286  C09B  FFF7         	movff	??_printf+1,tblptrh
 13342  00128A  0E00               	movlw	low (__mediumconst shr (0+16))
 13343  00128C  6EF8               	movwf	tblptru,c
 13344  00128E  0E0F               	movlw	(high __ramtop+-1)
 13345  001290  64F7               	cpfsgt	tblptrh,c
 13346  001292  D003               	bra	u3727
 13347  001294  0008               	tblrd		*
 13348  001296  50F5               	movf	tablat,w,c
 13349  001298  D005               	bra	u3720
 13350  00129A                     u3727:
 13351  00129A  CFF6 FFE9          	movff	tblptrl,fsr0l
 13352  00129E  CFF7 FFEA          	movff	tblptrh,fsr0h
 13353  0012A2  50EF               	movf	indf0,w,c
 13354  0012A4                     u3720:
 13355  0012A4  0900               	iorlw	0
 13356  0012A6  A4D8               	btfss	status,2,c
 13357  0012A8  D7DD               	goto	l5342
 13358                           
 13359                           ;doprnt.c: 757: if(width > len)
 13360  0012AA  0100               	movlb	0	; () banked
 13361  0012AC  51A9               	movf	printf@width& (0+255),w,b
 13362  0012AE  0100               	movlb	0	; () banked
 13363  0012B0  5DA3               	subwf	printf@len& (0+255),w,b
 13364  0012B2  0100               	movlb	0	; () banked
 13365  0012B4  51AA               	movf	(printf@width+1)& (0+255),w,b
 13366  0012B6  0100               	movlb	0	; () banked
 13367  0012B8  59A4               	subwfb	(printf@len+1)& (0+255),w,b
 13368  0012BA  B0D8               	btfsc	status,0,c
 13369  0012BC  D009               	goto	l5350
 13370                           
 13371                           ; BSR set to: 0
 13372                           ;doprnt.c: 758: width -= len;
 13373  0012BE  0100               	movlb	0	; () banked
 13374  0012C0  51A3               	movf	printf@len& (0+255),w,b
 13375  0012C2  0100               	movlb	0	; () banked
 13376  0012C4  5FA9               	subwf	printf@width& (0+255),f,b
 13377  0012C6  0100               	movlb	0	; () banked
 13378  0012C8  51A4               	movf	(printf@len+1)& (0+255),w,b
 13379  0012CA  0100               	movlb	0	; () banked
 13380  0012CC  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
 13381  0012CE  D009               	goto	l5354
 13382  0012D0                     l5350:
 13383                           
 13384                           ; BSR set to: 0
 13385                           ;doprnt.c: 759: else
 13386                           ;doprnt.c: 760: width = 0;
 13387  0012D0  0E00               	movlw	0
 13388  0012D2  0100               	movlb	0	; () banked
 13389  0012D4  6FAA               	movwf	(printf@width+1)& (0+255),b
 13390  0012D6  0E00               	movlw	0
 13391  0012D8  6FA9               	movwf	printf@width& (0+255),b
 13392                           
 13393                           ; BSR set to: 0
 13394                           ;doprnt.c: 764: while(width--)
 13395  0012DA  D003               	goto	l5354
 13396  0012DC                     l5352:
 13397                           
 13398                           ; BSR set to: 0
 13399                           ;doprnt.c: 765: (putch(' ') );
 13400  0012DC  0E20               	movlw	32
 13401  0012DE  EC9D  F022         	call	_putch
 13402  0012E2                     l5354:
 13403  0012E2  0100               	movlb	0	; () banked
 13404  0012E4  07A9               	decf	printf@width& (0+255),f,b
 13405  0012E6  A0D8               	btfss	status,0,c
 13406  0012E8  07AA               	decf	(printf@width+1)& (0+255),f,b
 13407  0012EA  0100               	movlb	0	; () banked
 13408  0012EC  29A9               	incf	printf@width& (0+255),w,b
 13409  0012EE  E1F6               	bnz	l5352
 13410  0012F0  0100               	movlb	0	; () banked
 13411  0012F2  29AA               	incf	(printf@width+1)& (0+255),w,b
 13412  0012F4  B4D8               	btfsc	status,2,c
 13413  0012F6  D017               	goto	l5360
 13414  0012F8  D7F1               	goto	l5352
 13415  0012FA                     l5356:
 13416                           
 13417                           ; BSR set to: 0
 13418                           ;doprnt.c: 768: (putch(*cp++) );
 13419  0012FA  C09F  FFF6         	movff	printf@cp,tblptrl
 13420  0012FE  C0A0  FFF7         	movff	printf@cp+1,tblptrh
 13421  001302  0E00               	movlw	low (__mediumconst shr (0+16))
 13422  001304  6EF8               	movwf	tblptru,c
 13423  001306  0E0F               	movlw	(high __ramtop+-1)
 13424  001308  64F7               	cpfsgt	tblptrh,c
 13425  00130A  D003               	bra	u3767
 13426  00130C  0008               	tblrd		*
 13427  00130E  50F5               	movf	tablat,w,c
 13428  001310  D005               	bra	u3760
 13429  001312                     u3767:
 13430  001312  CFF6 FFE9          	movff	tblptrl,fsr0l
 13431  001316  CFF7 FFEA          	movff	tblptrh,fsr0h
 13432  00131A  50EF               	movf	indf0,w,c
 13433  00131C                     u3760:
 13434  00131C  EC9D  F022         	call	_putch
 13435  001320  0100               	movlb	0	; () banked
 13436  001322  4B9F               	infsnz	printf@cp& (0+255),f,b
 13437  001324  2BA0               	incf	(printf@cp+1)& (0+255),f,b
 13438  001326                     l5360:
 13439                           
 13440                           ; BSR set to: 0
 13441  001326  0100               	movlb	0	; () banked
 13442  001328  07A3               	decf	printf@len& (0+255),f,b
 13443  00132A  A0D8               	btfss	status,0,c
 13444  00132C  07A4               	decf	(printf@len+1)& (0+255),f,b
 13445  00132E  0100               	movlb	0	; () banked
 13446  001330  29A3               	incf	printf@len& (0+255),w,b
 13447  001332  E1E3               	bnz	l5356
 13448  001334  0100               	movlb	0	; () banked
 13449  001336  29A4               	incf	(printf@len+1)& (0+255),w,b
 13450  001338  B4D8               	btfsc	status,2,c
 13451  00133A  D10A               	goto	l5438
 13452  00133C  D7DE               	goto	l5356
 13453  00133E                     l5362:
 13454                           
 13455                           ; BSR set to: 0
 13456                           ;doprnt.c: 818: flag |= 0x40;
 13457  00133E  0100               	movlb	0	; () banked
 13458  001340  8DA7               	bsf	printf@flag& (0+255),6,b
 13459                           
 13460                           ; BSR set to: 0
 13461                           ;doprnt.c: 822: }
 13462                           
 13463                           ;doprnt.c: 819: break;
 13464  001342  D01D               	goto	l1224
 13465  001344                     l5366:
 13466  001344  C08E  FFF6         	movff	printf@f,tblptrl
 13467  001348  C08F  FFF7         	movff	printf@f+1,tblptrh
 13468  00134C  0100               	movlb	0	; () banked
 13469  00134E  4B8E               	infsnz	printf@f& (0+255),f,b
 13470  001350  2B8F               	incf	(printf@f+1)& (0+255),f,b
 13471  001352                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 13472  001352  6AF8               	clrf	tblptru,c
 13473  001354                     	endif
 13474  001354                     	if	0	;tblptru may be non-zero
 13475  001354                     	endif
 13476  001354  0008               	tblrd		*
 13477  001356  CFF5 F0A8          	movff	tablat,printf@c
 13478  00135A  0100               	movlb	0	; () banked
 13479  00135C  51A8               	movf	printf@c& (0+255),w,b
 13480                           
 13481                           ; Switch size 1, requested type "space"
 13482                           ; Number of cases is 5, Range of values is 0 to 117
 13483                           ; switch strategies available:
 13484                           ; Name         Instructions Cycles
 13485                           ; simple_byte           16     9 (average)
 13486                           ;	Chosen strategy is simple_byte
 13487  00135E  0A00               	xorlw	0	; case 0
 13488  001360  B4D8               	btfsc	status,2,c
 13489  001362  0012               	return	
 13490  001364  0A64               	xorlw	100	; case 100
 13491  001366  B4D8               	btfsc	status,2,c
 13492  001368  D00A               	goto	l1224
 13493  00136A  0A0D               	xorlw	13	; case 105
 13494  00136C  B4D8               	btfsc	status,2,c
 13495  00136E  D007               	goto	l1224
 13496  001370  0A1A               	xorlw	26	; case 115
 13497  001372  B4D8               	btfsc	status,2,c
 13498  001374  D758               	goto	l5332
 13499  001376  0A06               	xorlw	6	; case 117
 13500  001378  B4D8               	btfsc	status,2,c
 13501  00137A  D7E1               	goto	l5362
 13502  00137C  D0E9               	goto	l5438
 13503  00137E                     l1224:
 13504                           
 13505                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
 13506  00137E  0100               	movlb	0	; () banked
 13507  001380  BDA7               	btfsc	printf@flag& (0+255),6,b
 13508  001382  D019               	goto	l5378
 13509                           
 13510                           ; BSR set to: 0
 13511                           ;doprnt.c: 1253: {
 13512                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 13513  001384  C0A1  FFD9         	movff	printf@ap,fsr2l
 13514  001388  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 13515  00138C  CFDE F0A5          	movff	postinc2,printf@val
 13516  001390  CFDD F0A6          	movff	postdec2,printf@val+1
 13517                           
 13518                           ; BSR set to: 0
 13519  001394  0E02               	movlw	2
 13520  001396  0100               	movlb	0	; () banked
 13521  001398  27A1               	addwf	printf@ap& (0+255),f,b
 13522  00139A  0E00               	movlw	0
 13523  00139C  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 13524                           
 13525                           ; BSR set to: 0
 13526                           ;doprnt.c: 1261: if((int)val < 0) {
 13527  00139E  0100               	movlb	0	; () banked
 13528  0013A0  AFA6               	btfss	(printf@val+1)& (0+255),7,b
 13529  0013A2  D016               	goto	l5382
 13530                           
 13531                           ; BSR set to: 0
 13532                           ;doprnt.c: 1262: flag |= 0x03;
 13533  0013A4  0E03               	movlw	3
 13534  0013A6  0100               	movlb	0	; () banked
 13535  0013A8  13A7               	iorwf	printf@flag& (0+255),f,b
 13536                           
 13537                           ; BSR set to: 0
 13538                           ;doprnt.c: 1263: val = -val;
 13539  0013AA  0100               	movlb	0	; () banked
 13540  0013AC  6DA5               	negf	printf@val& (0+255),b
 13541  0013AE  1FA6               	comf	(printf@val+1)& (0+255),f,b
 13542  0013B0  B0D8               	btfsc	status,0,c
 13543  0013B2  2BA6               	incf	(printf@val+1)& (0+255),f,b
 13544                           
 13545                           ; BSR set to: 0
 13546                           ;doprnt.c: 1264: }
 13547                           ;doprnt.c: 1266: }
 13548  0013B4  D00D               	goto	l5382
 13549  0013B6                     l5378:
 13550                           
 13551                           ; BSR set to: 0
 13552                           ;doprnt.c: 1268: else
 13553                           ;doprnt.c: 1273: {
 13554                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 13555  0013B6  C0A1  FFD9         	movff	printf@ap,fsr2l
 13556  0013BA  C0A2  FFDA         	movff	printf@ap+1,fsr2h
 13557  0013BE  CFDE F0A5          	movff	postinc2,printf@val
 13558  0013C2  CFDD F0A6          	movff	postdec2,printf@val+1
 13559                           
 13560                           ; BSR set to: 0
 13561  0013C6  0E02               	movlw	2
 13562  0013C8  0100               	movlb	0	; () banked
 13563  0013CA  27A1               	addwf	printf@ap& (0+255),f,b
 13564  0013CC  0E00               	movlw	0
 13565  0013CE  23A2               	addwfc	(printf@ap+1)& (0+255),f,b
 13566  0013D0                     l5382:
 13567                           
 13568                           ; BSR set to: 0
 13569                           ;doprnt.c: 1287: }
 13570                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 13571  0013D0  0E01               	movlw	1
 13572  0013D2  0100               	movlb	0	; () banked
 13573  0013D4  6FA8               	movwf	printf@c& (0+255),b
 13574  0013D6                     l5384:
 13575                           
 13576                           ; BSR set to: 0
 13577  0013D6  0E05               	movlw	5
 13578  0013D8  0100               	movlb	0	; () banked
 13579  0013DA  19A8               	xorwf	printf@c& (0+255),w,b
 13580  0013DC  B4D8               	btfsc	status,2,c
 13581  0013DE  D019               	goto	l5396
 13582                           
 13583                           ; BSR set to: 0
 13584                           ;doprnt.c: 1306: if(val < dpowers[c])
 13585                           
 13586                           ; BSR set to: 0
 13587                           
 13588                           ; BSR set to: 0
 13589  0013E0  0100               	movlb	0	; () banked
 13590  0013E2  51A8               	movf	printf@c& (0+255),w,b
 13591  0013E4  0D02               	mullw	2
 13592  0013E6  0E38               	movlw	low _dpowers
 13593  0013E8  24F3               	addwf	prodl,w,c
 13594  0013EA  6EF6               	movwf	tblptrl,c
 13595  0013EC  0EFB               	movlw	high _dpowers
 13596  0013EE  20F4               	addwfc	prodh,w,c
 13597  0013F0  6EF7               	movwf	tblptrh,c
 13598  0013F2                     	if	1	;There are 3 active tblptr bytes
 13599  0013F2  6AF8               	clrf	tblptru,c
 13600  0013F4  0E00               	movlw	low (__mediumconst shr (0+16))
 13601  0013F6  22F8               	addwfc	tblptru,f,c
 13602  0013F8                     	endif
 13603  0013F8  0009               	tblrd		*+
 13604  0013FA  50F5               	movf	tablat,w,c
 13605  0013FC  0100               	movlb	0	; () banked
 13606  0013FE  5DA5               	subwf	printf@val& (0+255),w,b
 13607  001400  0009               	tblrd		*+
 13608  001402  50F5               	movf	tablat,w,c
 13609  001404  0100               	movlb	0	; () banked
 13610  001406  59A6               	subwfb	(printf@val+1)& (0+255),w,b
 13611  001408  A0D8               	btfss	status,0,c
 13612  00140A  D003               	goto	l5396
 13613                           
 13614                           ; BSR set to: 0
 13615                           
 13616                           ; BSR set to: 0
 13617                           
 13618                           ; BSR set to: 0
 13619                           ;doprnt.c: 1307: break;
 13620  00140C  0100               	movlb	0	; () banked
 13621  00140E  2BA8               	incf	printf@c& (0+255),f,b
 13622  001410  D7E2               	goto	l5384
 13623  001412                     l5396:
 13624                           
 13625                           ; BSR set to: 0
 13626                           ;doprnt.c: 1345: if(width && flag & 0x03)
 13627  001412  0100               	movlb	0	; () banked
 13628  001414  51A9               	movf	printf@width& (0+255),w,b
 13629  001416  0100               	movlb	0	; () banked
 13630  001418  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 13631  00141A  B4D8               	btfsc	status,2,c
 13632  00141C  D00B               	goto	l5402
 13633                           
 13634                           ; BSR set to: 0
 13635  00141E  C0A7  F09A         	movff	printf@flag,??_printf
 13636  001422  0E03               	movlw	3
 13637  001424  0100               	movlb	0	; () banked
 13638  001426  179A               	andwf	??_printf& (0+255),f,b
 13639  001428  B4D8               	btfsc	status,2,c
 13640  00142A  D004               	goto	l5402
 13641                           
 13642                           ; BSR set to: 0
 13643                           ;doprnt.c: 1346: width--;
 13644  00142C  0100               	movlb	0	; () banked
 13645  00142E  07A9               	decf	printf@width& (0+255),f,b
 13646  001430  A0D8               	btfss	status,0,c
 13647  001432  07AA               	decf	(printf@width+1)& (0+255),f,b
 13648  001434                     l5402:
 13649                           
 13650                           ; BSR set to: 0
 13651                           ;doprnt.c: 1381: if(width > c)
 13652  001434  0E80               	movlw	128
 13653  001436  0100               	movlb	0	; () banked
 13654  001438  BFA8               	btfsc	printf@c& (0+255),7,b
 13655  00143A  0E7F               	movlw	127
 13656  00143C  0100               	movlb	0	; () banked
 13657  00143E  6F9A               	movwf	??_printf& (0+255),b
 13658  001440  0100               	movlb	0	; () banked
 13659  001442  51A9               	movf	printf@width& (0+255),w,b
 13660  001444  0100               	movlb	0	; () banked
 13661  001446  5DA8               	subwf	printf@c& (0+255),w,b
 13662  001448  0100               	movlb	0	; () banked
 13663  00144A  51AA               	movf	(printf@width+1)& (0+255),w,b
 13664  00144C  0A80               	xorlw	128
 13665  00144E  0100               	movlb	0	; () banked
 13666  001450  599A               	subwfb	??_printf& (0+255),w,b
 13667  001452  B0D8               	btfsc	status,0,c
 13668  001454  D00B               	goto	l5406
 13669                           
 13670                           ; BSR set to: 0
 13671                           ;doprnt.c: 1382: width -= c;
 13672  001456  0100               	movlb	0	; () banked
 13673  001458  51A8               	movf	printf@c& (0+255),w,b
 13674  00145A  0100               	movlb	0	; () banked
 13675  00145C  5FA9               	subwf	printf@width& (0+255),f,b
 13676  00145E  0E00               	movlw	0
 13677  001460  0100               	movlb	0	; () banked
 13678  001462  BFA8               	btfsc	printf@c& (0+255),7,b
 13679  001464  0EFF               	movlw	255
 13680  001466  0100               	movlb	0	; () banked
 13681  001468  5BAA               	subwfb	(printf@width+1)& (0+255),f,b
 13682  00146A  D005               	goto	l5408
 13683  00146C                     l5406:
 13684                           
 13685                           ; BSR set to: 0
 13686                           ;doprnt.c: 1383: else
 13687                           ;doprnt.c: 1384: width = 0;
 13688  00146C  0E00               	movlw	0
 13689  00146E  0100               	movlb	0	; () banked
 13690  001470  6FAA               	movwf	(printf@width+1)& (0+255),b
 13691  001472  0E00               	movlw	0
 13692  001474  6FA9               	movwf	printf@width& (0+255),b
 13693  001476                     l5408:
 13694                           
 13695                           ; BSR set to: 0
 13696                           ;doprnt.c: 1387: if(flag & 0x04) {
 13697  001476  0100               	movlb	0	; () banked
 13698  001478  A5A7               	btfss	printf@flag& (0+255),2,b
 13699  00147A  D018               	goto	l5420
 13700                           
 13701                           ; BSR set to: 0
 13702                           ;doprnt.c: 1392: if(flag & 0x03)
 13703  00147C  C0A7  F09A         	movff	printf@flag,??_printf
 13704  001480  0E03               	movlw	3
 13705  001482  0100               	movlb	0	; () banked
 13706  001484  179A               	andwf	??_printf& (0+255),f,b
 13707  001486  B4D8               	btfsc	status,2,c
 13708  001488  D003               	goto	l5414
 13709                           
 13710                           ; BSR set to: 0
 13711                           ;doprnt.c: 1393: (putch('-') );
 13712  00148A  0E2D               	movlw	45
 13713  00148C  EC9D  F022         	call	_putch
 13714  001490                     l5414:
 13715                           
 13716                           ;doprnt.c: 1415: if(width)
 13717  001490  0100               	movlb	0	; () banked
 13718  001492  51A9               	movf	printf@width& (0+255),w,b
 13719  001494  0100               	movlb	0	; () banked
 13720  001496  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 13721  001498  B4D8               	btfsc	status,2,c
 13722  00149A  D025               	goto	l5430
 13723                           
 13724                           ; BSR set to: 0
 13725                           ;doprnt.c: 1417: (putch('0') );
 13726                           
 13727                           ; BSR set to: 0
 13728                           
 13729                           ;doprnt.c: 1416: do
 13730  00149C  0E30               	movlw	48
 13731  00149E  EC9D  F022         	call	_putch
 13732                           
 13733                           ;doprnt.c: 1418: while(--width);
 13734  0014A2  0100               	movlb	0	; () banked
 13735  0014A4  07A9               	decf	printf@width& (0+255),f,b
 13736  0014A6  A0D8               	btfss	status,0,c
 13737  0014A8  07AA               	decf	(printf@width+1)& (0+255),f,b
 13738  0014AA  D7F2               	goto	l5414
 13739  0014AC                     l5420:
 13740                           
 13741                           ; BSR set to: 0
 13742                           ;doprnt.c: 1422: {
 13743                           ;doprnt.c: 1424: if(width
 13744                           ;doprnt.c: 1428: )
 13745  0014AC  0100               	movlb	0	; () banked
 13746  0014AE  51A9               	movf	printf@width& (0+255),w,b
 13747  0014B0  0100               	movlb	0	; () banked
 13748  0014B2  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 13749  0014B4  B4D8               	btfsc	status,2,c
 13750  0014B6  D00D               	goto	l5426
 13751  0014B8                     l5422:
 13752                           
 13753                           ; BSR set to: 0
 13754                           ;doprnt.c: 1430: (putch(' ') );
 13755  0014B8  0E20               	movlw	32
 13756  0014BA  EC9D  F022         	call	_putch
 13757                           
 13758                           ;doprnt.c: 1431: while(--width);
 13759  0014BE  0100               	movlb	0	; () banked
 13760  0014C0  07A9               	decf	printf@width& (0+255),f,b
 13761  0014C2  A0D8               	btfss	status,0,c
 13762  0014C4  07AA               	decf	(printf@width+1)& (0+255),f,b
 13763  0014C6  0100               	movlb	0	; () banked
 13764  0014C8  51A9               	movf	printf@width& (0+255),w,b
 13765  0014CA  0100               	movlb	0	; () banked
 13766  0014CC  11AA               	iorwf	(printf@width+1)& (0+255),w,b
 13767  0014CE  A4D8               	btfss	status,2,c
 13768  0014D0  D7F3               	goto	l5422
 13769  0014D2                     l5426:
 13770                           
 13771                           ; BSR set to: 0
 13772                           ;doprnt.c: 1438: if(flag & 0x03)
 13773  0014D2  C0A7  F09A         	movff	printf@flag,??_printf
 13774  0014D6  0E03               	movlw	3
 13775  0014D8  0100               	movlb	0	; () banked
 13776  0014DA  179A               	andwf	??_printf& (0+255),f,b
 13777  0014DC  B4D8               	btfsc	status,2,c
 13778  0014DE  D003               	goto	l5430
 13779                           
 13780                           ; BSR set to: 0
 13781                           ;doprnt.c: 1439: (putch('-') );
 13782  0014E0  0E2D               	movlw	45
 13783  0014E2  EC9D  F022         	call	_putch
 13784  0014E6                     l5430:
 13785                           
 13786                           ;doprnt.c: 1469: }
 13787                           ;doprnt.c: 1472: prec = c;
 13788  0014E6  C0A8  F09E         	movff	printf@c,printf@prec
 13789                           
 13790                           ;doprnt.c: 1474: while(prec--) {
 13791  0014EA  D02C               	goto	l5436
 13792  0014EC                     l5432:
 13793                           
 13794                           ;doprnt.c: 1478: {
 13795                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 13796  0014EC  0100               	movlb	0	; () banked
 13797  0014EE  519E               	movf	printf@prec& (0+255),w,b
 13798  0014F0  0D02               	mullw	2
 13799  0014F2  0E38               	movlw	low _dpowers
 13800  0014F4  24F3               	addwf	prodl,w,c
 13801  0014F6  6EF6               	movwf	tblptrl,c
 13802  0014F8  0EFB               	movlw	high _dpowers
 13803  0014FA  20F4               	addwfc	prodh,w,c
 13804  0014FC  6EF7               	movwf	tblptrh,c
 13805  0014FE                     	if	1	;There are 3 active tblptr bytes
 13806  0014FE  6AF8               	clrf	tblptru,c
 13807  001500  0E00               	movlw	low (__mediumconst shr (0+16))
 13808  001502  22F8               	addwfc	tblptru,f,c
 13809  001504                     	endif
 13810  001504  0009               	tblrd		*+
 13811  001506  CFF5 F082          	movff	tablat,___lwdiv@divisor
 13812  00150A  000A               	tblrd		*-
 13813  00150C  CFF5 F083          	movff	tablat,___lwdiv@divisor+1
 13814  001510  C0A5  F080         	movff	printf@val,___lwdiv@dividend
 13815  001514  C0A6  F081         	movff	printf@val+1,___lwdiv@dividend+1
 13816  001518  ECC3  F01C         	call	___lwdiv	;wreg free
 13817  00151C  C080  F087         	movff	?___lwdiv,___lwmod@dividend
 13818  001520  C081  F088         	movff	?___lwdiv+1,___lwmod@dividend+1
 13819  001524  0E00               	movlw	0
 13820  001526  0100               	movlb	0	; () banked
 13821  001528  6F8A               	movwf	(___lwmod@divisor+1)& (0+255),b
 13822  00152A  0E0A               	movlw	10
 13823  00152C  6F89               	movwf	___lwmod@divisor& (0+255),b
 13824  00152E  ECDB  F01D         	call	___lwmod	;wreg free
 13825  001532  0100               	movlb	0	; () banked
 13826  001534  5187               	movf	?___lwmod& (0+255),w,b
 13827  001536  0F30               	addlw	48
 13828  001538  0100               	movlb	0	; () banked
 13829  00153A  6FA8               	movwf	printf@c& (0+255),b
 13830                           
 13831                           ; BSR set to: 0
 13832                           ;doprnt.c: 1523: }
 13833                           ;doprnt.c: 1524: (putch(c) );
 13834  00153C  0100               	movlb	0	; () banked
 13835  00153E  51A8               	movf	printf@c& (0+255),w,b
 13836  001540  EC9D  F022         	call	_putch
 13837  001544                     l5436:
 13838  001544  0100               	movlb	0	; () banked
 13839  001546  079E               	decf	printf@prec& (0+255),f,b
 13840  001548  0100               	movlb	0	; () banked
 13841  00154A  299E               	incf	printf@prec& (0+255),w,b
 13842  00154C  A4D8               	btfss	status,2,c
 13843  00154E  D7CE               	goto	l5432
 13844  001550                     l5438:
 13845  001550  C08E  FFF6         	movff	printf@f,tblptrl
 13846  001554  C08F  FFF7         	movff	printf@f+1,tblptrh
 13847  001558  0100               	movlb	0	; () banked
 13848  00155A  4B8E               	infsnz	printf@f& (0+255),f,b
 13849  00155C  2B8F               	incf	(printf@f+1)& (0+255),f,b
 13850  00155E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 13851  00155E  6AF8               	clrf	tblptru,c
 13852  001560                     	endif
 13853  001560                     	if	0	;tblptru may be non-zero
 13854  001560                     	endif
 13855  001560  0008               	tblrd		*
 13856  001562  CFF5 F0A8          	movff	tablat,printf@c
 13857  001566  0100               	movlb	0	; () banked
 13858  001568  51A8               	movf	printf@c& (0+255),w,b
 13859  00156A  B4D8               	btfsc	status,2,c
 13860  00156C  0012               	return	
 13861  00156E  D5EB               	goto	l5308
 13862  001570                     __end_of_printf:
 13863                           	opt stack 0
 13864                           tblptru	equ	0xFF8
 13865                           tblptrh	equ	0xFF7
 13866                           tblptrl	equ	0xFF6
 13867                           tablat	equ	0xFF5
 13868                           prodh	equ	0xFF4
 13869                           prodl	equ	0xFF3
 13870                           intcon	equ	0xFF2
 13871                           intcon2	equ	0xFF1
 13872                           intcon3	equ	0xFF0
 13873                           indf0	equ	0xFEF
 13874                           postinc0	equ	0xFEE
 13875                           fsr0h	equ	0xFEA
 13876                           fsr0l	equ	0xFE9
 13877                           wreg	equ	0xFE8
 13878                           postdec1	equ	0xFE5
 13879                           fsr1l	equ	0xFE1
 13880                           indf2	equ	0xFDF
 13881                           postinc2	equ	0xFDE
 13882                           postdec2	equ	0xFDD
 13883                           fsr2h	equ	0xFDA
 13884                           fsr2l	equ	0xFD9
 13885                           status	equ	0xFD8
 13886                           
 13887 ;; *************** function _putch *****************
 13888 ;; Defined at:
 13889 ;;		line 20 in file "lcd.c"
 13890 ;; Parameters:    Size  Location     Type
 13891 ;;  data            1    wreg     unsigned char 
 13892 ;; Auto vars:     Size  Location     Type
 13893 ;;  data            1    2[BANK0 ] unsigned char 
 13894 ;; Return value:  Size  Location     Type
 13895 ;;                  1    wreg      void 
 13896 ;; Registers used:
 13897 ;;		wreg, status,2, status,0, cstack
 13898 ;; Tracked objects:
 13899 ;;		On entry : 0/0
 13900 ;;		On exit  : 0/0
 13901 ;;		Unchanged: 0/0
 13902 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13903 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13904 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13905 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13906 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13907 ;;Total ram usage:        1 bytes
 13908 ;; Hardware stack levels used:    1
 13909 ;; Hardware stack levels required when called:    8
 13910 ;; This function calls:
 13911 ;;		_lcdNibble
 13912 ;; This function is called by:
 13913 ;;		_printf
 13914 ;; This function uses a non-reentrant model
 13915 ;;
 13916                           
 13917                           	psect	text48
 13918  00453A                     __ptext48:
 13919                           	opt stack 0
 13920  00453A                     _putch:
 13921                           	opt stack 18
 13922                           
 13923                           ;incstack = 0
 13924                           ;putch@data stored from wreg
 13925  00453A  0100               	movlb	0	; () banked
 13926  00453C  6F82               	movwf	putch@data& (0+255),b
 13927                           
 13928                           ;lcd.c: 21: LATDbits.LATD2 = 1;
 13929  00453E  848C               	bsf	3980,2,c	;volatile
 13930                           
 13931                           ;lcd.c: 22: lcdNibble(data);
 13932  004540  0100               	movlb	0	; () banked
 13933  004542  5182               	movf	putch@data& (0+255),w,b
 13934  004544  ECA7  F01D         	call	_lcdNibble
 13935  004548  0012               	return		;funcret
 13936  00454A                     __end_of_putch:
 13937                           	opt stack 0
 13938                           tblptru	equ	0xFF8
 13939                           tblptrh	equ	0xFF7
 13940                           tblptrl	equ	0xFF6
 13941                           tablat	equ	0xFF5
 13942                           prodh	equ	0xFF4
 13943                           prodl	equ	0xFF3
 13944                           intcon	equ	0xFF2
 13945                           intcon2	equ	0xFF1
 13946                           intcon3	equ	0xFF0
 13947                           indf0	equ	0xFEF
 13948                           postinc0	equ	0xFEE
 13949                           fsr0h	equ	0xFEA
 13950                           fsr0l	equ	0xFE9
 13951                           wreg	equ	0xFE8
 13952                           postdec1	equ	0xFE5
 13953                           fsr1l	equ	0xFE1
 13954                           indf2	equ	0xFDF
 13955                           postinc2	equ	0xFDE
 13956                           postdec2	equ	0xFDD
 13957                           fsr2h	equ	0xFDA
 13958                           fsr2l	equ	0xFD9
 13959                           status	equ	0xFD8
 13960                           
 13961 ;; *************** function _isdigit *****************
 13962 ;; Defined at:
 13963 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 13964 ;; Parameters:    Size  Location     Type
 13965 ;;  c               1    wreg     unsigned char 
 13966 ;; Auto vars:     Size  Location     Type
 13967 ;;  c               1    2[BANK0 ] unsigned char 
 13968 ;; Return value:  Size  Location     Type
 13969 ;;		None               void
 13970 ;; Registers used:
 13971 ;;		wreg, status,2, status,0
 13972 ;; Tracked objects:
 13973 ;;		On entry : 0/0
 13974 ;;		On exit  : 0/0
 13975 ;;		Unchanged: 0/0
 13976 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13977 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13978 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13979 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13980 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13981 ;;Total ram usage:        3 bytes
 13982 ;; Hardware stack levels used:    1
 13983 ;; Hardware stack levels required when called:    7
 13984 ;; This function calls:
 13985 ;;		Nothing
 13986 ;; This function is called by:
 13987 ;;		_printf
 13988 ;; This function uses a non-reentrant model
 13989 ;;
 13990                           
 13991                           	psect	text49
 13992  004360                     __ptext49:
 13993                           	opt stack 0
 13994  004360                     _isdigit:
 13995                           	opt stack 19
 13996                           
 13997                           ;incstack = 0
 13998                           ;isdigit@c stored from wreg
 13999  004360  0100               	movlb	0	; () banked
 14000  004362  6F82               	movwf	isdigit@c& (0+255),b
 14001  004364  0E00               	movlw	0
 14002  004366  0100               	movlb	0	; () banked
 14003  004368  6F81               	movwf	_isdigit$1887& (0+255),b
 14004                           
 14005                           ; BSR set to: 0
 14006  00436A  0E3A               	movlw	58
 14007  00436C  0100               	movlb	0	; () banked
 14008  00436E  6182               	cpfslt	isdigit@c& (0+255),b
 14009  004370  D007               	goto	l5162
 14010                           
 14011                           ; BSR set to: 0
 14012  004372  0E2F               	movlw	47
 14013  004374  0100               	movlb	0	; () banked
 14014  004376  6582               	cpfsgt	isdigit@c& (0+255),b
 14015  004378  D003               	goto	l5162
 14016                           
 14017                           ; BSR set to: 0
 14018  00437A  0E01               	movlw	1
 14019  00437C  0100               	movlb	0	; () banked
 14020  00437E  6F81               	movwf	_isdigit$1887& (0+255),b
 14021  004380                     l5162:
 14022                           
 14023                           ; BSR set to: 0
 14024  004380  C081  F080         	movff	_isdigit$1887,??_isdigit
 14025  004384  0100               	movlb	0	; () banked
 14026  004386  3180               	rrcf	??_isdigit& (0+255),w,b
 14027  004388  0012               	return	
 14028  00438A                     __end_of_isdigit:
 14029                           	opt stack 0
 14030                           tblptru	equ	0xFF8
 14031                           tblptrh	equ	0xFF7
 14032                           tblptrl	equ	0xFF6
 14033                           tablat	equ	0xFF5
 14034                           prodh	equ	0xFF4
 14035                           prodl	equ	0xFF3
 14036                           intcon	equ	0xFF2
 14037                           intcon2	equ	0xFF1
 14038                           intcon3	equ	0xFF0
 14039                           indf0	equ	0xFEF
 14040                           postinc0	equ	0xFEE
 14041                           fsr0h	equ	0xFEA
 14042                           fsr0l	equ	0xFE9
 14043                           wreg	equ	0xFE8
 14044                           postdec1	equ	0xFE5
 14045                           fsr1l	equ	0xFE1
 14046                           indf2	equ	0xFDF
 14047                           postinc2	equ	0xFDE
 14048                           postdec2	equ	0xFDD
 14049                           fsr2h	equ	0xFDA
 14050                           fsr2l	equ	0xFD9
 14051                           status	equ	0xFD8
 14052                           
 14053 ;; *************** function ___wmul *****************
 14054 ;; Defined at:
 14055 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 14056 ;; Parameters:    Size  Location     Type
 14057 ;;  multiplier      2    0[BANK0 ] unsigned int 
 14058 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 14059 ;; Auto vars:     Size  Location     Type
 14060 ;;  product         2    4[BANK0 ] unsigned int 
 14061 ;; Return value:  Size  Location     Type
 14062 ;;                  2    0[BANK0 ] unsigned int 
 14063 ;; Registers used:
 14064 ;;		wreg, status,2, status,0, prodl, prodh
 14065 ;; Tracked objects:
 14066 ;;		On entry : 0/0
 14067 ;;		On exit  : 0/0
 14068 ;;		Unchanged: 0/0
 14069 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14070 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14071 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14072 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14073 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14074 ;;Total ram usage:        6 bytes
 14075 ;; Hardware stack levels used:    1
 14076 ;; Hardware stack levels required when called:    7
 14077 ;; This function calls:
 14078 ;;		Nothing
 14079 ;; This function is called by:
 14080 ;;		_printf
 14081 ;; This function uses a non-reentrant model
 14082 ;;
 14083                           
 14084                           	psect	text50
 14085  004094                     __ptext50:
 14086                           	opt stack 0
 14087  004094                     ___wmul:
 14088                           	opt stack 19
 14089                           
 14090                           ; BSR set to: 0
 14091                           ;incstack = 0
 14092  004094  0100               	movlb	0	; () banked
 14093  004096  5180               	movf	___wmul@multiplier& (0+255),w,b
 14094  004098  0100               	movlb	0	; () banked
 14095  00409A  0382               	mulwf	___wmul@multiplicand& (0+255),b
 14096  00409C  CFF3 F084          	movff	prodl,___wmul@product
 14097  0040A0  CFF4 F085          	movff	prodh,___wmul@product+1
 14098  0040A4  0100               	movlb	0	; () banked
 14099  0040A6  5180               	movf	___wmul@multiplier& (0+255),w,b
 14100  0040A8  0100               	movlb	0	; () banked
 14101  0040AA  0383               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 14102  0040AC  50F3               	movf	prodl,w,c
 14103  0040AE  0100               	movlb	0	; () banked
 14104  0040B0  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 14105  0040B2  0100               	movlb	0	; () banked
 14106  0040B4  5181               	movf	(___wmul@multiplier+1)& (0+255),w,b
 14107  0040B6  0100               	movlb	0	; () banked
 14108  0040B8  0382               	mulwf	___wmul@multiplicand& (0+255),b
 14109  0040BA  50F3               	movf	prodl,w,c
 14110  0040BC  0100               	movlb	0	; () banked
 14111  0040BE  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 14112                           
 14113                           ; BSR set to: 0
 14114  0040C0  C084  F080         	movff	___wmul@product,?___wmul
 14115  0040C4  C085  F081         	movff	___wmul@product+1,?___wmul+1
 14116  0040C8  0012               	return	
 14117  0040CA                     __end_of___wmul:
 14118                           	opt stack 0
 14119                           tblptru	equ	0xFF8
 14120                           tblptrh	equ	0xFF7
 14121                           tblptrl	equ	0xFF6
 14122                           tablat	equ	0xFF5
 14123                           prodh	equ	0xFF4
 14124                           prodl	equ	0xFF3
 14125                           intcon	equ	0xFF2
 14126                           intcon2	equ	0xFF1
 14127                           intcon3	equ	0xFF0
 14128                           indf0	equ	0xFEF
 14129                           postinc0	equ	0xFEE
 14130                           fsr0h	equ	0xFEA
 14131                           fsr0l	equ	0xFE9
 14132                           wreg	equ	0xFE8
 14133                           postdec1	equ	0xFE5
 14134                           fsr1l	equ	0xFE1
 14135                           indf2	equ	0xFDF
 14136                           postinc2	equ	0xFDE
 14137                           postdec2	equ	0xFDD
 14138                           fsr2h	equ	0xFDA
 14139                           fsr2l	equ	0xFD9
 14140                           status	equ	0xFD8
 14141                           
 14142 ;; *************** function ___lwmod *****************
 14143 ;; Defined at:
 14144 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 14145 ;; Parameters:    Size  Location     Type
 14146 ;;  dividend        2    7[BANK0 ] unsigned int 
 14147 ;;  divisor         2    9[BANK0 ] unsigned int 
 14148 ;; Auto vars:     Size  Location     Type
 14149 ;;  counter         1   11[BANK0 ] unsigned char 
 14150 ;; Return value:  Size  Location     Type
 14151 ;;                  2    7[BANK0 ] unsigned int 
 14152 ;; Registers used:
 14153 ;;		wreg, status,2, status,0
 14154 ;; Tracked objects:
 14155 ;;		On entry : 0/0
 14156 ;;		On exit  : 0/0
 14157 ;;		Unchanged: 0/0
 14158 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14159 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14160 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14161 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14162 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14163 ;;Total ram usage:        5 bytes
 14164 ;; Hardware stack levels used:    1
 14165 ;; Hardware stack levels required when called:    7
 14166 ;; This function calls:
 14167 ;;		Nothing
 14168 ;; This function is called by:
 14169 ;;		_printf
 14170 ;; This function uses a non-reentrant model
 14171 ;;
 14172                           
 14173                           	psect	text51
 14174  003BB6                     __ptext51:
 14175                           	opt stack 0
 14176  003BB6                     ___lwmod:
 14177                           	opt stack 19
 14178                           
 14179                           ; BSR set to: 0
 14180                           ;incstack = 0
 14181  003BB6  0100               	movlb	0	; () banked
 14182  003BB8  5189               	movf	___lwmod@divisor& (0+255),w,b
 14183  003BBA  0100               	movlb	0	; () banked
 14184  003BBC  118A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
 14185  003BBE  B4D8               	btfsc	status,2,c
 14186  003BC0  D026               	goto	l1681
 14187                           
 14188                           ; BSR set to: 0
 14189  003BC2  0E01               	movlw	1
 14190  003BC4  0100               	movlb	0	; () banked
 14191  003BC6  6F8B               	movwf	___lwmod@counter& (0+255),b
 14192  003BC8  D006               	goto	l5200
 14193  003BCA                     l5198:
 14194                           
 14195                           ; BSR set to: 0
 14196  003BCA  0100               	movlb	0	; () banked
 14197  003BCC  90D8               	bcf	status,0,c
 14198  003BCE  3789               	rlcf	___lwmod@divisor& (0+255),f,b
 14199  003BD0  378A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 14200  003BD2  0100               	movlb	0	; () banked
 14201  003BD4  2B8B               	incf	___lwmod@counter& (0+255),f,b
 14202  003BD6                     l5200:
 14203                           
 14204                           ; BSR set to: 0
 14205  003BD6  0100               	movlb	0	; () banked
 14206  003BD8  AF8A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 14207  003BDA  D7F7               	goto	l5198
 14208  003BDC                     l5202:
 14209                           
 14210                           ; BSR set to: 0
 14211  003BDC  0100               	movlb	0	; () banked
 14212  003BDE  5189               	movf	___lwmod@divisor& (0+255),w,b
 14213  003BE0  0100               	movlb	0	; () banked
 14214  003BE2  5D87               	subwf	___lwmod@dividend& (0+255),w,b
 14215  003BE4  0100               	movlb	0	; () banked
 14216  003BE6  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 14217  003BE8  0100               	movlb	0	; () banked
 14218  003BEA  5988               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 14219  003BEC  A0D8               	btfss	status,0,c
 14220  003BEE  D008               	goto	l5206
 14221                           
 14222                           ; BSR set to: 0
 14223  003BF0  0100               	movlb	0	; () banked
 14224  003BF2  5189               	movf	___lwmod@divisor& (0+255),w,b
 14225  003BF4  0100               	movlb	0	; () banked
 14226  003BF6  5F87               	subwf	___lwmod@dividend& (0+255),f,b
 14227  003BF8  0100               	movlb	0	; () banked
 14228  003BFA  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 14229  003BFC  0100               	movlb	0	; () banked
 14230  003BFE  5B88               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 14231  003C00                     l5206:
 14232                           
 14233                           ; BSR set to: 0
 14234  003C00  0100               	movlb	0	; () banked
 14235  003C02  90D8               	bcf	status,0,c
 14236  003C04  338A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 14237  003C06  3389               	rrcf	___lwmod@divisor& (0+255),f,b
 14238                           
 14239                           ; BSR set to: 0
 14240  003C08  0100               	movlb	0	; () banked
 14241  003C0A  2F8B               	decfsz	___lwmod@counter& (0+255),f,b
 14242  003C0C  D7E7               	goto	l5202
 14243  003C0E                     l1681:
 14244                           
 14245                           ; BSR set to: 0
 14246  003C0E  C087  F087         	movff	___lwmod@dividend,?___lwmod
 14247  003C12  C088  F088         	movff	___lwmod@dividend+1,?___lwmod+1
 14248                           
 14249                           ; BSR set to: 0
 14250  003C16  0012               	return		;funcret
 14251  003C18                     __end_of___lwmod:
 14252                           	opt stack 0
 14253                           tblptru	equ	0xFF8
 14254                           tblptrh	equ	0xFF7
 14255                           tblptrl	equ	0xFF6
 14256                           tablat	equ	0xFF5
 14257                           prodh	equ	0xFF4
 14258                           prodl	equ	0xFF3
 14259                           intcon	equ	0xFF2
 14260                           intcon2	equ	0xFF1
 14261                           intcon3	equ	0xFF0
 14262                           indf0	equ	0xFEF
 14263                           postinc0	equ	0xFEE
 14264                           fsr0h	equ	0xFEA
 14265                           fsr0l	equ	0xFE9
 14266                           wreg	equ	0xFE8
 14267                           postdec1	equ	0xFE5
 14268                           fsr1l	equ	0xFE1
 14269                           indf2	equ	0xFDF
 14270                           postinc2	equ	0xFDE
 14271                           postdec2	equ	0xFDD
 14272                           fsr2h	equ	0xFDA
 14273                           fsr2l	equ	0xFD9
 14274                           status	equ	0xFD8
 14275                           
 14276 ;; *************** function ___lwdiv *****************
 14277 ;; Defined at:
 14278 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 14279 ;; Parameters:    Size  Location     Type
 14280 ;;  dividend        2    0[BANK0 ] unsigned int 
 14281 ;;  divisor         2    2[BANK0 ] unsigned int 
 14282 ;; Auto vars:     Size  Location     Type
 14283 ;;  quotient        2    4[BANK0 ] unsigned int 
 14284 ;;  counter         1    6[BANK0 ] unsigned char 
 14285 ;; Return value:  Size  Location     Type
 14286 ;;                  2    0[BANK0 ] unsigned int 
 14287 ;; Registers used:
 14288 ;;		wreg, status,2, status,0
 14289 ;; Tracked objects:
 14290 ;;		On entry : 0/0
 14291 ;;		On exit  : 0/0
 14292 ;;		Unchanged: 0/0
 14293 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14294 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14295 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14296 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14297 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14298 ;;Total ram usage:        7 bytes
 14299 ;; Hardware stack levels used:    1
 14300 ;; Hardware stack levels required when called:    7
 14301 ;; This function calls:
 14302 ;;		Nothing
 14303 ;; This function is called by:
 14304 ;;		_printf
 14305 ;; This function uses a non-reentrant model
 14306 ;;
 14307                           
 14308                           	psect	text52
 14309  003986                     __ptext52:
 14310                           	opt stack 0
 14311  003986                     ___lwdiv:
 14312                           	opt stack 19
 14313                           
 14314                           ; BSR set to: 0
 14315                           ;incstack = 0
 14316  003986  0E00               	movlw	0
 14317  003988  0100               	movlb	0	; () banked
 14318  00398A  6F85               	movwf	(___lwdiv@quotient+1)& (0+255),b
 14319  00398C  0E00               	movlw	0
 14320  00398E  6F84               	movwf	___lwdiv@quotient& (0+255),b
 14321                           
 14322                           ; BSR set to: 0
 14323  003990  0100               	movlb	0	; () banked
 14324  003992  5182               	movf	___lwdiv@divisor& (0+255),w,b
 14325  003994  0100               	movlb	0	; () banked
 14326  003996  1183               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
 14327  003998  B4D8               	btfsc	status,2,c
 14328  00399A  D02C               	goto	l1671
 14329                           
 14330                           ; BSR set to: 0
 14331  00399C  0E01               	movlw	1
 14332  00399E  0100               	movlb	0	; () banked
 14333  0039A0  6F86               	movwf	___lwdiv@counter& (0+255),b
 14334  0039A2  D006               	goto	l5180
 14335  0039A4                     l5178:
 14336                           
 14337                           ; BSR set to: 0
 14338  0039A4  0100               	movlb	0	; () banked
 14339  0039A6  90D8               	bcf	status,0,c
 14340  0039A8  3782               	rlcf	___lwdiv@divisor& (0+255),f,b
 14341  0039AA  3783               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 14342  0039AC  0100               	movlb	0	; () banked
 14343  0039AE  2B86               	incf	___lwdiv@counter& (0+255),f,b
 14344  0039B0                     l5180:
 14345                           
 14346                           ; BSR set to: 0
 14347  0039B0  0100               	movlb	0	; () banked
 14348  0039B2  AF83               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 14349  0039B4  D7F7               	goto	l5178
 14350  0039B6                     l5182:
 14351                           
 14352                           ; BSR set to: 0
 14353  0039B6  0100               	movlb	0	; () banked
 14354  0039B8  90D8               	bcf	status,0,c
 14355  0039BA  3784               	rlcf	___lwdiv@quotient& (0+255),f,b
 14356  0039BC  3785               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 14357                           
 14358                           ; BSR set to: 0
 14359  0039BE  0100               	movlb	0	; () banked
 14360  0039C0  5182               	movf	___lwdiv@divisor& (0+255),w,b
 14361  0039C2  0100               	movlb	0	; () banked
 14362  0039C4  5D80               	subwf	___lwdiv@dividend& (0+255),w,b
 14363  0039C6  0100               	movlb	0	; () banked
 14364  0039C8  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 14365  0039CA  0100               	movlb	0	; () banked
 14366  0039CC  5981               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 14367  0039CE  A0D8               	btfss	status,0,c
 14368  0039D0  D00A               	goto	l5190
 14369                           
 14370                           ; BSR set to: 0
 14371  0039D2  0100               	movlb	0	; () banked
 14372  0039D4  5182               	movf	___lwdiv@divisor& (0+255),w,b
 14373  0039D6  0100               	movlb	0	; () banked
 14374  0039D8  5F80               	subwf	___lwdiv@dividend& (0+255),f,b
 14375  0039DA  0100               	movlb	0	; () banked
 14376  0039DC  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 14377  0039DE  0100               	movlb	0	; () banked
 14378  0039E0  5B81               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 14379                           
 14380                           ; BSR set to: 0
 14381  0039E2  0100               	movlb	0	; () banked
 14382  0039E4  8184               	bsf	___lwdiv@quotient& (0+255),0,b
 14383  0039E6                     l5190:
 14384                           
 14385                           ; BSR set to: 0
 14386  0039E6  0100               	movlb	0	; () banked
 14387  0039E8  90D8               	bcf	status,0,c
 14388  0039EA  3383               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 14389  0039EC  3382               	rrcf	___lwdiv@divisor& (0+255),f,b
 14390                           
 14391                           ; BSR set to: 0
 14392  0039EE  0100               	movlb	0	; () banked
 14393  0039F0  2F86               	decfsz	___lwdiv@counter& (0+255),f,b
 14394  0039F2  D7E1               	goto	l5182
 14395  0039F4                     l1671:
 14396                           
 14397                           ; BSR set to: 0
 14398  0039F4  C084  F080         	movff	___lwdiv@quotient,?___lwdiv
 14399  0039F8  C085  F081         	movff	___lwdiv@quotient+1,?___lwdiv+1
 14400                           
 14401                           ; BSR set to: 0
 14402  0039FC  0012               	return		;funcret
 14403  0039FE                     __end_of___lwdiv:
 14404                           	opt stack 0
 14405                           tblptru	equ	0xFF8
 14406                           tblptrh	equ	0xFF7
 14407                           tblptrl	equ	0xFF6
 14408                           tablat	equ	0xFF5
 14409                           prodh	equ	0xFF4
 14410                           prodl	equ	0xFF3
 14411                           intcon	equ	0xFF2
 14412                           intcon2	equ	0xFF1
 14413                           intcon3	equ	0xFF0
 14414                           indf0	equ	0xFEF
 14415                           postinc0	equ	0xFEE
 14416                           fsr0h	equ	0xFEA
 14417                           fsr0l	equ	0xFE9
 14418                           wreg	equ	0xFE8
 14419                           postdec1	equ	0xFE5
 14420                           fsr1l	equ	0xFE1
 14421                           indf2	equ	0xFDF
 14422                           postinc2	equ	0xFDE
 14423                           postdec2	equ	0xFDD
 14424                           fsr2h	equ	0xFDA
 14425                           fsr2l	equ	0xFD9
 14426                           status	equ	0xFD8
 14427                           
 14428 ;; *************** function _lcdInst *****************
 14429 ;; Defined at:
 14430 ;;		line 15 in file "lcd.c"
 14431 ;; Parameters:    Size  Location     Type
 14432 ;;  data            1    wreg     unsigned char 
 14433 ;; Auto vars:     Size  Location     Type
 14434 ;;  data            1    2[BANK0 ] unsigned char 
 14435 ;; Return value:  Size  Location     Type
 14436 ;;                  1    wreg      void 
 14437 ;; Registers used:
 14438 ;;		wreg, status,2, status,0, cstack
 14439 ;; Tracked objects:
 14440 ;;		On entry : 0/0
 14441 ;;		On exit  : 0/0
 14442 ;;		Unchanged: 0/0
 14443 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14444 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14445 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14446 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14447 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14448 ;;Total ram usage:        1 bytes
 14449 ;; Hardware stack levels used:    1
 14450 ;; Hardware stack levels required when called:    8
 14451 ;; This function calls:
 14452 ;;		_lcdNibble
 14453 ;; This function is called by:
 14454 ;;		_UI
 14455 ;;		_change_state_to_menu_start
 14456 ;;		_change_state_to_menu_12
 14457 ;;		_change_state_to_menu_22
 14458 ;;		_initLCD
 14459 ;;		_printRTC
 14460 ;;		_Loading
 14461 ;;		_EEPROM_write
 14462 ;;		_Test
 14463 ;;		_algorithmTest
 14464 ;;		_sensorTest
 14465 ;;		_actuatorTest
 14466 ;;		_BothServos
 14467 ;;		_PortTestA5
 14468 ;;		_SolenoidTestA5
 14469 ;;		_ToggleTestA5
 14470 ;; This function uses a non-reentrant model
 14471 ;;
 14472                           
 14473                           	psect	text53
 14474  00454A                     __ptext53:
 14475                           	opt stack 0
 14476  00454A                     _lcdInst:
 14477                           	opt stack 20
 14478                           
 14479                           ; BSR set to: 0
 14480                           ;incstack = 0
 14481                           ;lcdInst@data stored from wreg
 14482  00454A  0100               	movlb	0	; () banked
 14483  00454C  6F82               	movwf	lcdInst@data& (0+255),b
 14484                           
 14485                           ;lcd.c: 16: LATDbits.LATD2 = 0;
 14486  00454E  948C               	bcf	3980,2,c	;volatile
 14487                           
 14488                           ;lcd.c: 17: lcdNibble(data);
 14489  004550  0100               	movlb	0	; () banked
 14490  004552  5182               	movf	lcdInst@data& (0+255),w,b
 14491  004554  ECA7  F01D         	call	_lcdNibble
 14492  004558  0012               	return		;funcret
 14493  00455A                     __end_of_lcdInst:
 14494                           	opt stack 0
 14495                           tblptru	equ	0xFF8
 14496                           tblptrh	equ	0xFF7
 14497                           tblptrl	equ	0xFF6
 14498                           tablat	equ	0xFF5
 14499                           prodh	equ	0xFF4
 14500                           prodl	equ	0xFF3
 14501                           intcon	equ	0xFF2
 14502                           intcon2	equ	0xFF1
 14503                           intcon3	equ	0xFF0
 14504                           indf0	equ	0xFEF
 14505                           postinc0	equ	0xFEE
 14506                           fsr0h	equ	0xFEA
 14507                           fsr0l	equ	0xFE9
 14508                           wreg	equ	0xFE8
 14509                           postdec1	equ	0xFE5
 14510                           fsr1l	equ	0xFE1
 14511                           indf2	equ	0xFDF
 14512                           postinc2	equ	0xFDE
 14513                           postdec2	equ	0xFDD
 14514                           fsr2h	equ	0xFDA
 14515                           fsr2l	equ	0xFD9
 14516                           status	equ	0xFD8
 14517                           
 14518 ;; *************** function _lcdNibble *****************
 14519 ;; Defined at:
 14520 ;;		line 25 in file "lcd.c"
 14521 ;; Parameters:    Size  Location     Type
 14522 ;;  data            1    wreg     unsigned char 
 14523 ;; Auto vars:     Size  Location     Type
 14524 ;;  data            1    1[BANK0 ] unsigned char 
 14525 ;;  temp            1    0[BANK0 ] unsigned char 
 14526 ;; Return value:  Size  Location     Type
 14527 ;;                  1    wreg      void 
 14528 ;; Registers used:
 14529 ;;		wreg, status,2, status,0
 14530 ;; Tracked objects:
 14531 ;;		On entry : 0/0
 14532 ;;		On exit  : 0/0
 14533 ;;		Unchanged: 0/0
 14534 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14535 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14536 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14537 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14538 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14539 ;;Total ram usage:        2 bytes
 14540 ;; Hardware stack levels used:    1
 14541 ;; Hardware stack levels required when called:    7
 14542 ;; This function calls:
 14543 ;;		Nothing
 14544 ;; This function is called by:
 14545 ;;		_lcdInst
 14546 ;;		_putch
 14547 ;; This function uses a non-reentrant model
 14548 ;;
 14549                           
 14550                           	psect	text54
 14551  003B4E                     __ptext54:
 14552                           	opt stack 0
 14553  003B4E                     _lcdNibble:
 14554                           	opt stack 20
 14555                           
 14556                           ;incstack = 0
 14557                           ;lcdNibble@data stored from wreg
 14558  003B4E  0100               	movlb	0	; () banked
 14559  003B50  6F81               	movwf	lcdNibble@data& (0+255),b
 14560                           
 14561                           ;lcd.c: 27: char temp = data & 0xF0;
 14562  003B52  0100               	movlb	0	; () banked
 14563  003B54  5181               	movf	lcdNibble@data& (0+255),w,b
 14564  003B56  0BF0               	andlw	240
 14565  003B58  0100               	movlb	0	; () banked
 14566  003B5A  6F80               	movwf	lcdNibble@temp& (0+255),b
 14567                           
 14568                           ;lcd.c: 28: LATD = LATD & 0x0F;
 14569  003B5C  508C               	movf	3980,w,c	;volatile
 14570  003B5E  0B0F               	andlw	15
 14571  003B60  6E8C               	movwf	3980,c	;volatile
 14572                           
 14573                           ;lcd.c: 29: LATD = temp | LATD;
 14574  003B62  0100               	movlb	0	; () banked
 14575  003B64  5180               	movf	lcdNibble@temp& (0+255),w,b
 14576  003B66  108C               	iorwf	3980,w,c	;volatile
 14577  003B68  6E8C               	movwf	3980,c	;volatile
 14578                           
 14579                           ; BSR set to: 0
 14580                           ;lcd.c: 31: LATDbits.LATD3 = 1;
 14581  003B6A  868C               	bsf	3980,3,c	;volatile
 14582                           
 14583                           ; BSR set to: 0
 14584                           ;lcd.c: 32: _delay((unsigned long)((25)*(32000000/4000000.0)));
 14585  003B6C  0E42               	movlw	66
 14586  003B6E                     u7837:
 14587  003B6E  2EE8               	decfsz	wreg,f,c
 14588  003B70  D7FE               	bra	u7837
 14589  003B72  D000               	nop2	
 14590                           
 14591                           ;lcd.c: 33: LATDbits.LATD3 = 0;
 14592  003B74  968C               	bcf	3980,3,c	;volatile
 14593                           
 14594                           ;lcd.c: 34: _delay((unsigned long)((25)*(32000000/4000000.0)));
 14595  003B76  0E42               	movlw	66
 14596  003B78                     u7847:
 14597  003B78  2EE8               	decfsz	wreg,f,c
 14598  003B7A  D7FE               	bra	u7847
 14599  003B7C  D000               	nop2	
 14600                           
 14601                           ;lcd.c: 36: data = data << 4;
 14602  003B7E  0100               	movlb	0	; () banked
 14603  003B80  3981               	swapf	lcdNibble@data& (0+255),w,b
 14604  003B82  0BF0               	andlw	240
 14605  003B84  0100               	movlb	0	; () banked
 14606  003B86  6F81               	movwf	lcdNibble@data& (0+255),b
 14607                           
 14608                           ;lcd.c: 38: temp = data & 0xF0;
 14609  003B88  0100               	movlb	0	; () banked
 14610  003B8A  5181               	movf	lcdNibble@data& (0+255),w,b
 14611  003B8C  0BF0               	andlw	240
 14612  003B8E  0100               	movlb	0	; () banked
 14613  003B90  6F80               	movwf	lcdNibble@temp& (0+255),b
 14614                           
 14615                           ;lcd.c: 39: LATD = LATD & 0x0F;
 14616  003B92  508C               	movf	3980,w,c	;volatile
 14617  003B94  0B0F               	andlw	15
 14618  003B96  6E8C               	movwf	3980,c	;volatile
 14619                           
 14620                           ;lcd.c: 40: LATD = temp | LATD;
 14621  003B98  0100               	movlb	0	; () banked
 14622  003B9A  5180               	movf	lcdNibble@temp& (0+255),w,b
 14623  003B9C  108C               	iorwf	3980,w,c	;volatile
 14624  003B9E  6E8C               	movwf	3980,c	;volatile
 14625                           
 14626                           ; BSR set to: 0
 14627                           ;lcd.c: 42: LATDbits.LATD3 = 1;
 14628  003BA0  868C               	bsf	3980,3,c	;volatile
 14629                           
 14630                           ; BSR set to: 0
 14631                           ;lcd.c: 43: _delay((unsigned long)((25)*(32000000/4000000.0)));
 14632  003BA2  0E42               	movlw	66
 14633  003BA4                     u7857:
 14634  003BA4  2EE8               	decfsz	wreg,f,c
 14635  003BA6  D7FE               	bra	u7857
 14636  003BA8  D000               	nop2	
 14637                           
 14638                           ;lcd.c: 44: LATDbits.LATD3 = 0;
 14639  003BAA  968C               	bcf	3980,3,c	;volatile
 14640                           
 14641                           ;lcd.c: 45: _delay((unsigned long)((25)*(32000000/4000000.0)));
 14642  003BAC  0E42               	movlw	66
 14643  003BAE                     u7867:
 14644  003BAE  2EE8               	decfsz	wreg,f,c
 14645  003BB0  D7FE               	bra	u7867
 14646  003BB2  D000               	nop2	
 14647  003BB4  0012               	return		;funcret
 14648  003BB6                     __end_of_lcdNibble:
 14649                           	opt stack 0
 14650                           tblptru	equ	0xFF8
 14651                           tblptrh	equ	0xFF7
 14652                           tblptrl	equ	0xFF6
 14653                           tablat	equ	0xFF5
 14654                           prodh	equ	0xFF4
 14655                           prodl	equ	0xFF3
 14656                           intcon	equ	0xFF2
 14657                           intcon2	equ	0xFF1
 14658                           intcon3	equ	0xFF0
 14659                           indf0	equ	0xFEF
 14660                           postinc0	equ	0xFEE
 14661                           fsr0h	equ	0xFEA
 14662                           fsr0l	equ	0xFE9
 14663                           wreg	equ	0xFE8
 14664                           postdec1	equ	0xFE5
 14665                           fsr1l	equ	0xFE1
 14666                           indf2	equ	0xFDF
 14667                           postinc2	equ	0xFDE
 14668                           postdec2	equ	0xFDD
 14669                           fsr2h	equ	0xFDA
 14670                           fsr2l	equ	0xFD9
 14671                           status	equ	0xFD8
 14672                           
 14673 ;; *************** function _initServos *****************
 14674 ;; Defined at:
 14675 ;;		line 254 in file "sort.c"
 14676 ;; Parameters:    Size  Location     Type
 14677 ;;		None
 14678 ;; Auto vars:     Size  Location     Type
 14679 ;;		None
 14680 ;; Return value:  Size  Location     Type
 14681 ;;                  1    wreg      void 
 14682 ;; Registers used:
 14683 ;;		wreg, status,2, status,0, cstack
 14684 ;; Tracked objects:
 14685 ;;		On entry : 0/0
 14686 ;;		On exit  : 0/0
 14687 ;;		Unchanged: 0/0
 14688 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14689 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14690 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14691 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14692 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14693 ;;Total ram usage:        1 bytes
 14694 ;; Hardware stack levels used:    1
 14695 ;; Hardware stack levels required when called:    8
 14696 ;; This function calls:
 14697 ;;		_updateServoPosition
 14698 ;; This function is called by:
 14699 ;;		_Loading
 14700 ;;		_BothServos
 14701 ;; This function uses a non-reentrant model
 14702 ;;
 14703                           
 14704                           	psect	text55
 14705  003D30                     __ptext55:
 14706                           	opt stack 0
 14707  003D30                     _initServos:
 14708                           	opt stack 20
 14709                           
 14710                           ;sort.c: 255: updateServoPosition(1250, 1);
 14711                           
 14712                           ;incstack = 0
 14713  003D30  0E04               	movlw	4
 14714  003D32  0100               	movlb	0	; () banked
 14715  003D34  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14716  003D36  0EE2               	movlw	226
 14717  003D38  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14718  003D3A  0E00               	movlw	0
 14719  003D3C  0100               	movlb	0	; () banked
 14720  003D3E  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14721  003D40  0E01               	movlw	1
 14722  003D42  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14723  003D44  ECFF  F01C         	call	_updateServoPosition	;wreg free
 14724                           
 14725                           ;sort.c: 256: updateServoPosition(1150, 3);
 14726  003D48  0E04               	movlw	4
 14727  003D4A  0100               	movlb	0	; () banked
 14728  003D4C  6F81               	movwf	(updateServoPosition@time_us+1)& (0+255),b
 14729  003D4E  0E7E               	movlw	126
 14730  003D50  6F80               	movwf	updateServoPosition@time_us& (0+255),b
 14731  003D52  0E00               	movlw	0
 14732  003D54  0100               	movlb	0	; () banked
 14733  003D56  6F83               	movwf	(updateServoPosition@timer+1)& (0+255),b
 14734  003D58  0E03               	movlw	3
 14735  003D5A  6F82               	movwf	updateServoPosition@timer& (0+255),b
 14736  003D5C  ECFF  F01C         	call	_updateServoPosition	;wreg free
 14737                           
 14738                           ;sort.c: 257: TMR1ON = 1;
 14739  003D60  80CD               	bsf	4045,0,c	;volatile
 14740                           
 14741                           ;sort.c: 258: was_low_1 = 0;
 14742  003D62  0E00               	movlw	0
 14743  003D64  6E7A               	movwf	_was_low_1+1,c	;volatile
 14744  003D66  0E00               	movlw	0
 14745  003D68  6E79               	movwf	_was_low_1,c	;volatile
 14746                           
 14747                           ;sort.c: 259: _delay((unsigned long)((5)*(32000000/4000.0)));
 14748  003D6A  0E34               	movlw	52
 14749  003D6C  0100               	movlb	0	; () banked
 14750  003D6E  6F88               	movwf	??_initServos& (0+255),b
 14751  003D70  0EF1               	movlw	241
 14752  003D72                     u7877:
 14753  003D72  2EE8               	decfsz	wreg,f,c
 14754  003D74  D7FE               	bra	u7877
 14755  003D76  2F88               	decfsz	??_initServos& (0+255),f,b
 14756  003D78  D7FC               	bra	u7877
 14757  003D7A  D000               	nop2	
 14758                           
 14759                           ;sort.c: 260: TMR3ON = 1;
 14760  003D7C  80B1               	bsf	4017,0,c	;volatile
 14761                           
 14762                           ;sort.c: 261: was_low_3 = 0;
 14763  003D7E  0E00               	movlw	0
 14764  003D80  6E7C               	movwf	_was_low_3+1,c	;volatile
 14765  003D82  0E00               	movlw	0
 14766  003D84  6E7B               	movwf	_was_low_3,c	;volatile
 14767                           
 14768                           ;sort.c: 262: LATCbits.LATC0 = 0;
 14769  003D86  908B               	bcf	3979,0,c	;volatile
 14770  003D88  0012               	return		;funcret
 14771  003D8A                     __end_of_initServos:
 14772                           	opt stack 0
 14773                           tblptru	equ	0xFF8
 14774                           tblptrh	equ	0xFF7
 14775                           tblptrl	equ	0xFF6
 14776                           tablat	equ	0xFF5
 14777                           prodh	equ	0xFF4
 14778                           prodl	equ	0xFF3
 14779                           intcon	equ	0xFF2
 14780                           intcon2	equ	0xFF1
 14781                           intcon3	equ	0xFF0
 14782                           indf0	equ	0xFEF
 14783                           postinc0	equ	0xFEE
 14784                           fsr0h	equ	0xFEA
 14785                           fsr0l	equ	0xFE9
 14786                           wreg	equ	0xFE8
 14787                           postdec1	equ	0xFE5
 14788                           fsr1l	equ	0xFE1
 14789                           indf2	equ	0xFDF
 14790                           postinc2	equ	0xFDE
 14791                           postdec2	equ	0xFDD
 14792                           fsr2h	equ	0xFDA
 14793                           fsr2l	equ	0xFD9
 14794                           status	equ	0xFD8
 14795                           
 14796 ;; *************** function _updateServoPosition *****************
 14797 ;; Defined at:
 14798 ;;		line 304 in file "sort.c"
 14799 ;; Parameters:    Size  Location     Type
 14800 ;;  time_us         2    0[BANK0 ] int 
 14801 ;;  timer           2    2[BANK0 ] int 
 14802 ;; Auto vars:     Size  Location     Type
 14803 ;;  my_time         2    6[BANK0 ] unsigned int 
 14804 ;; Return value:  Size  Location     Type
 14805 ;;                  1    wreg      void 
 14806 ;; Registers used:
 14807 ;;		wreg, status,2, status,0
 14808 ;; Tracked objects:
 14809 ;;		On entry : 0/0
 14810 ;;		On exit  : 0/0
 14811 ;;		Unchanged: 0/0
 14812 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14813 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14814 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14815 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14816 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14817 ;;Total ram usage:        8 bytes
 14818 ;; Hardware stack levels used:    1
 14819 ;; Hardware stack levels required when called:    7
 14820 ;; This function calls:
 14821 ;;		Nothing
 14822 ;; This function is called by:
 14823 ;;		_Distribution
 14824 ;;		_initServos
 14825 ;;		_actuatorTest
 14826 ;;		_BothServos
 14827 ;; This function uses a non-reentrant model
 14828 ;;
 14829                           
 14830                           	psect	text56
 14831  0039FE                     __ptext56:
 14832                           	opt stack 0
 14833  0039FE                     _updateServoPosition:
 14834                           	opt stack 20
 14835                           
 14836                           ;sort.c: 305: unsigned int my_time = 65535 - time_us;
 14837                           
 14838                           ;incstack = 0
 14839  0039FE  C080  F084         	movff	updateServoPosition@time_us,??_updateServoPosition
 14840  003A02  C081  F085         	movff	updateServoPosition@time_us+1,??_updateServoPosition+1
 14841  003A06  0100               	movlb	0	; () banked
 14842  003A08  1F84               	comf	??_updateServoPosition& (0+255),f,b
 14843  003A0A  1F85               	comf	(??_updateServoPosition+1)& (0+255),f,b
 14844  003A0C  4B84               	infsnz	??_updateServoPosition& (0+255),f,b
 14845  003A0E  2B85               	incf	(??_updateServoPosition+1)& (0+255),f,b
 14846  003A10  0EFF               	movlw	255
 14847  003A12  0100               	movlb	0	; () banked
 14848  003A14  2584               	addwf	??_updateServoPosition& (0+255),w,b
 14849  003A16  0100               	movlb	0	; () banked
 14850  003A18  6F86               	movwf	updateServoPosition@my_time& (0+255),b
 14851  003A1A  0EFF               	movlw	255
 14852  003A1C  0100               	movlb	0	; () banked
 14853  003A1E  2185               	addwfc	(??_updateServoPosition+1)& (0+255),w,b
 14854  003A20  0100               	movlb	0	; () banked
 14855  003A22  6F87               	movwf	(updateServoPosition@my_time+1)& (0+255),b
 14856                           
 14857                           ;sort.c: 306: switch(timer){
 14858  003A24  D015               	goto	l5480
 14859  003A26                     l5478:
 14860                           
 14861                           ; BSR set to: 0
 14862                           ;sort.c: 308: servoTimes[0] = my_time >> 8;
 14863  003A26  0100               	movlb	0	; () banked
 14864  003A28  5187               	movf	(updateServoPosition@my_time+1)& (0+255),w,b
 14865  003A2A  0101               	movlb	1	; () banked
 14866  003A2C  6F1C               	movwf	_servoTimes& (0+255),b
 14867  003A2E  6B1D               	clrf	(_servoTimes+1)& (0+255),b
 14868                           
 14869                           ;sort.c: 309: servoTimes[1] = my_time & 0xFF;
 14870  003A30  0100               	movlb	0	; () banked
 14871  003A32  5186               	movf	updateServoPosition@my_time& (0+255),w,b
 14872  003A34  0101               	movlb	1	; () banked
 14873  003A36  6F1E               	movwf	(_servoTimes+2)& (0+255),b
 14874  003A38  6B1F               	clrf	(_servoTimes+3)& (0+255),b
 14875  003A3A                     l779:
 14876                           
 14877                           ;sort.c: 311: servoTimes[2] = my_time >> 8;
 14878  003A3A  0100               	movlb	0	; () banked
 14879  003A3C  5187               	movf	(updateServoPosition@my_time+1)& (0+255),w,b
 14880  003A3E  0101               	movlb	1	; () banked
 14881  003A40  6F20               	movwf	(_servoTimes+4)& (0+255),b
 14882  003A42  6B21               	clrf	(_servoTimes+5)& (0+255),b
 14883                           
 14884                           ;sort.c: 312: servoTimes[3] = my_time & 0xFF;
 14885  003A44  0100               	movlb	0	; () banked
 14886  003A46  5186               	movf	updateServoPosition@my_time& (0+255),w,b
 14887  003A48  0101               	movlb	1	; () banked
 14888  003A4A  6F22               	movwf	(_servoTimes+6)& (0+255),b
 14889  003A4C  6B23               	clrf	(_servoTimes+7)& (0+255),b
 14890                           
 14891                           ;sort.c: 313: }
 14892  003A4E  0012               	return	
 14893  003A50                     l5480:
 14894  003A50  C082  F084         	movff	updateServoPosition@timer,??_updateServoPosition
 14895  003A54  C083  F085         	movff	updateServoPosition@timer+1,??_updateServoPosition+1
 14896                           
 14897                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 14898                           ; Switch size 1, requested type "space"
 14899                           ; Number of cases is 1, Range of values is 0 to 0
 14900                           ; switch strategies available:
 14901                           ; Name         Instructions Cycles
 14902                           ; simple_byte            4     3 (average)
 14903                           ;	Chosen strategy is simple_byte
 14904  003A58  0100               	movlb	0	; () banked
 14905  003A5A  5185               	movf	(??_updateServoPosition+1)& (0+255),w,b
 14906  003A5C  0A00               	xorlw	0	; case 0
 14907  003A5E  A4D8               	btfss	status,2,c
 14908  003A60  0012               	return	
 14909                           
 14910                           ; BSR set to: 0
 14911                           ; Switch size 1, requested type "space"
 14912                           ; Number of cases is 2, Range of values is 1 to 3
 14913                           ; switch strategies available:
 14914                           ; Name         Instructions Cycles
 14915                           ; simple_byte            7     4 (average)
 14916                           ;	Chosen strategy is simple_byte
 14917  003A62  0100               	movlb	0	; () banked
 14918  003A64  5184               	movf	??_updateServoPosition& (0+255),w,b
 14919  003A66  0A01               	xorlw	1	; case 1
 14920  003A68  B4D8               	btfsc	status,2,c
 14921  003A6A  D7DD               	goto	l5478
 14922  003A6C  0A02               	xorlw	2	; case 3
 14923  003A6E  A4D8               	btfss	status,2,c
 14924  003A70  0012               	return	
 14925  003A72  D7E3               	goto	l779
 14926  003A74                     __end_of_updateServoPosition:
 14927                           	opt stack 0
 14928                           tblptru	equ	0xFF8
 14929                           tblptrh	equ	0xFF7
 14930                           tblptrl	equ	0xFF6
 14931                           tablat	equ	0xFF5
 14932                           prodh	equ	0xFF4
 14933                           prodl	equ	0xFF3
 14934                           intcon	equ	0xFF2
 14935                           intcon2	equ	0xFF1
 14936                           intcon3	equ	0xFF0
 14937                           indf0	equ	0xFEF
 14938                           postinc0	equ	0xFEE
 14939                           fsr0h	equ	0xFEA
 14940                           fsr0l	equ	0xFE9
 14941                           wreg	equ	0xFE8
 14942                           postdec1	equ	0xFE5
 14943                           fsr1l	equ	0xFE1
 14944                           indf2	equ	0xFDF
 14945                           postinc2	equ	0xFDE
 14946                           postdec2	equ	0xFDD
 14947                           fsr2h	equ	0xFDA
 14948                           fsr2l	equ	0xFD9
 14949                           status	equ	0xFD8
 14950                           
 14951 ;; *************** function _handler *****************
 14952 ;; Defined at:
 14953 ;;		line 16 in file "interruptHandler.c"
 14954 ;; Parameters:    Size  Location     Type
 14955 ;;		None
 14956 ;; Auto vars:     Size  Location     Type
 14957 ;;		None
 14958 ;; Return value:  Size  Location     Type
 14959 ;;                  1    wreg      void 
 14960 ;; Registers used:
 14961 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14962 ;; Tracked objects:
 14963 ;;		On entry : 0/0
 14964 ;;		On exit  : 0/0
 14965 ;;		Unchanged: 0/0
 14966 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14967 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14968 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14969 ;;      Temps:         16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14970 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14971 ;;Total ram usage:       16 bytes
 14972 ;; Hardware stack levels used:    1
 14973 ;; Hardware stack levels required when called:    6
 14974 ;; This function calls:
 14975 ;;		_printSortTimer
 14976 ;;		_updateMenu
 14977 ;; This function is called by:
 14978 ;;		Interrupt level 2
 14979 ;; This function uses a non-reentrant model
 14980 ;;
 14981                           
 14982                           	psect	intcode
 14983  000008                     __pintcode:
 14984                           	opt stack 0
 14985  000008                     _handler:
 14986                           	opt stack 18
 14987                           
 14988                           ;incstack = 0
 14989  000008  827E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 14990  00000A  ED6A  F014         	call	int_func,f	;refresh shadow registers
 14991                           tblptru	equ	0xFF8
 14992                           tblptrh	equ	0xFF7
 14993                           tblptrl	equ	0xFF6
 14994                           tablat	equ	0xFF5
 14995                           prodh	equ	0xFF4
 14996                           prodl	equ	0xFF3
 14997                           intcon	equ	0xFF2
 14998                           intcon2	equ	0xFF1
 14999                           intcon3	equ	0xFF0
 15000                           indf0	equ	0xFEF
 15001                           postinc0	equ	0xFEE
 15002                           fsr0h	equ	0xFEA
 15003                           fsr0l	equ	0xFE9
 15004                           wreg	equ	0xFE8
 15005                           postdec1	equ	0xFE5
 15006                           fsr1l	equ	0xFE1
 15007                           indf2	equ	0xFDF
 15008                           postinc2	equ	0xFDE
 15009                           postdec2	equ	0xFDD
 15010                           fsr2h	equ	0xFDA
 15011                           fsr2l	equ	0xFD9
 15012                           status	equ	0xFD8
 15013                           
 15014                           	psect	intcode_body
 15015  0028D4                     __pintcode_body:
 15016                           	opt stack 18
 15017  0028D4                     int_func:
 15018                           	opt stack 18
 15019  0028D4  0006               	pop		; remove dummy address from shadow register refresh
 15020  0028D6  CFFA F04D          	movff	pclath,??_handler+2
 15021  0028DA  CFFB F04E          	movff	pclatu,??_handler+3
 15022  0028DE  CFE9 F04F          	movff	fsr0l,??_handler+4
 15023  0028E2  CFEA F050          	movff	fsr0h,??_handler+5
 15024  0028E6  CFE1 F051          	movff	fsr1l,??_handler+6
 15025  0028EA  CFE2 F052          	movff	fsr1h,??_handler+7
 15026  0028EE  CFD9 F053          	movff	fsr2l,??_handler+8
 15027  0028F2  CFDA F054          	movff	fsr2h,??_handler+9
 15028  0028F6  CFF3 F055          	movff	prodl,??_handler+10
 15029  0028FA  CFF4 F056          	movff	prodh,??_handler+11
 15030  0028FE  CFF6 F057          	movff	tblptrl,??_handler+12
 15031  002902  CFF7 F058          	movff	tblptrh,??_handler+13
 15032  002906  CFF8 F059          	movff	tblptru,??_handler+14
 15033  00290A  CFF5 F05A          	movff	tablat,??_handler+15
 15034                           
 15035                           ;interruptHandler.c: 18: if(INT1IF){
 15036  00290E  A0F0               	btfss	intcon3,0,c	;volatile
 15037  002910  D020               	goto	i2l7940
 15038                           
 15039                           ;interruptHandler.c: 19: INT1IF = 0;
 15040  002912  90F0               	bcf	intcon3,0,c	;volatile
 15041                           
 15042                           ;interruptHandler.c: 20: if(machine_state == UI_state) {
 15043  002914  0100               	movlb	0	; () banked
 15044  002916  51FC               	movf	_machine_state& (0+255),w,b
 15045  002918  A4D8               	btfss	status,2,c
 15046  00291A  D01B               	goto	i2l7940
 15047                           
 15048                           ; BSR set to: 0
 15049                           ;interruptHandler.c: 21: input = keys[(PORTB & 0xF0) >> 4];
 15050  00291C  3881               	swapf	3969,w,c	;volatile
 15051  00291E  0B0F               	andlw	15
 15052  002920  0B0F               	andlw	15
 15053  002922  6E4B               	movwf	??_handler& (0+255),c
 15054  002924  6A4C               	clrf	(??_handler+1)& (0+255),c
 15055  002926  0E27               	movlw	low _keys
 15056  002928  244B               	addwf	??_handler,w,c
 15057  00292A  6EF6               	movwf	tblptrl,c
 15058  00292C  0EFB               	movlw	high _keys
 15059  00292E  204C               	addwfc	??_handler+1,w,c
 15060  002930  6EF7               	movwf	tblptrh,c
 15061  002932                     	if	1	;There are 3 active tblptr bytes
 15062  002932  6AF8               	clrf	tblptru,c
 15063  002934  0E00               	movlw	low (__mediumconst shr (0+16))
 15064  002936  22F8               	addwfc	tblptru,f,c
 15065  002938                     	endif
 15066  002938  0008               	tblrd		*
 15067  00293A  CFF5 F07D          	movff	tablat,_input	;volatile
 15068                           
 15069                           ; BSR set to: 0
 15070                           ;interruptHandler.c: 23: if(input == '*'){
 15071  00293E  0E2A               	movlw	42
 15072  002940  187D               	xorwf	_input,w,c	;volatile
 15073  002942  A4D8               	btfss	status,2,c
 15074  002944  D004               	goto	i2l7938
 15075                           
 15076                           ; BSR set to: 0
 15077                           ;interruptHandler.c: 24: machine_state = Testing_state;
 15078  002946  0E03               	movlw	3
 15079  002948  0100               	movlb	0	; () banked
 15080  00294A  6FFC               	movwf	_machine_state& (0+255),b
 15081                           
 15082                           ;interruptHandler.c: 25: }
 15083  00294C  D002               	goto	i2l7940
 15084  00294E                     i2l7938:
 15085                           
 15086                           ; BSR set to: 0
 15087                           ;interruptHandler.c: 26: else{
 15088                           ;interruptHandler.c: 27: updateMenu();
 15089  00294E  EC4C  F00F         	call	_updateMenu	;wreg free
 15090  002952                     i2l7940:
 15091                           
 15092                           ;interruptHandler.c: 28: }
 15093                           ;interruptHandler.c: 29: }
 15094                           ;interruptHandler.c: 30: }
 15095                           ;interruptHandler.c: 33: if(TMR0IF){
 15096  002952  A4F2               	btfss	intcon,2,c	;volatile
 15097  002954  D00C               	goto	i2l7954
 15098                           
 15099                           ;interruptHandler.c: 34: TMR0IF = 0;
 15100  002956  94F2               	bcf	intcon,2,c	;volatile
 15101                           
 15102                           ;interruptHandler.c: 35: if(machine_state == Sorting_state){
 15103  002958  0100               	movlb	0	; () banked
 15104  00295A  05FC               	decf	_machine_state& (0+255),w,b
 15105  00295C  A4D8               	btfss	status,2,c
 15106  00295E  D007               	goto	i2l7954
 15107                           
 15108                           ; BSR set to: 0
 15109                           ;interruptHandler.c: 36: printSortTimer();
 15110  002960  ECC7  F011         	call	_printSortTimer	;wreg free
 15111                           
 15112                           ;interruptHandler.c: 38: TMR0H = 0b10000101;
 15113  002964  0E85               	movlw	133
 15114  002966  6ED7               	movwf	4055,c	;volatile
 15115                           
 15116                           ;interruptHandler.c: 39: TMR0L = 0b11101110;
 15117  002968  0EEE               	movlw	238
 15118  00296A  6ED6               	movwf	4054,c	;volatile
 15119                           
 15120                           ;interruptHandler.c: 40: TMR0ON = 1;
 15121  00296C  8ED5               	bsf	4053,7,c	;volatile
 15122  00296E                     i2l7954:
 15123                           
 15124                           ;interruptHandler.c: 41: }
 15125                           ;interruptHandler.c: 42: }
 15126                           ;interruptHandler.c: 45: if(TMR1IF){
 15127  00296E  A09E               	btfss	3998,0,c	;volatile
 15128  002970  D024               	goto	i2l7978
 15129                           
 15130                           ;interruptHandler.c: 46: TMR1IF = 0;
 15131  002972  909E               	bcf	3998,0,c	;volatile
 15132                           
 15133                           ;interruptHandler.c: 47: TMR1ON = 0;
 15134  002974  90CD               	bcf	4045,0,c	;volatile
 15135                           
 15136                           ;interruptHandler.c: 48: if(machine_state == Sorting_state){
 15137  002976  0100               	movlb	0	; () banked
 15138  002978  05FC               	decf	_machine_state& (0+255),w,b
 15139  00297A  A4D8               	btfss	status,2,c
 15140  00297C  D01E               	goto	i2l7978
 15141                           
 15142                           ; BSR set to: 0
 15143                           ;interruptHandler.c: 49: if(was_low_1){
 15144  00297E  5079               	movf	_was_low_1,w,c	;volatile
 15145  002980  107A               	iorwf	_was_low_1+1,w,c	;volatile
 15146  002982  B4D8               	btfsc	status,2,c
 15147  002984  D00A               	goto	i2l844
 15148                           
 15149                           ; BSR set to: 0
 15150                           ;interruptHandler.c: 50: LATCbits.LATC1 = 1;
 15151  002986  828B               	bsf	3979,1,c	;volatile
 15152                           
 15153                           ; BSR set to: 0
 15154                           ;interruptHandler.c: 51: was_low_1 = 0;
 15155  002988  0E00               	movlw	0
 15156  00298A  6E7A               	movwf	_was_low_1+1,c	;volatile
 15157  00298C  0E00               	movlw	0
 15158  00298E  6E79               	movwf	_was_low_1,c	;volatile
 15159                           
 15160                           ; BSR set to: 0
 15161                           ;interruptHandler.c: 52: TMR1H = servoTimes[0];
 15162  002990  C11C  FFCF         	movff	_servoTimes,4047	;volatile
 15163                           
 15164                           ; BSR set to: 0
 15165                           ;interruptHandler.c: 53: TMR1L = servoTimes[1];
 15166  002994  C11E  FFCE         	movff	_servoTimes+2,4046	;volatile
 15167                           
 15168                           ;interruptHandler.c: 54: }
 15169  002998  D00F               	goto	i2l7976
 15170  00299A                     i2l844:
 15171                           
 15172                           ; BSR set to: 0
 15173                           ;interruptHandler.c: 55: else{
 15174                           ;interruptHandler.c: 56: LATCbits.LATC1 = 0;
 15175  00299A  928B               	bcf	3979,1,c	;volatile
 15176                           
 15177                           ; BSR set to: 0
 15178                           ;interruptHandler.c: 57: was_low_1 = 1;
 15179  00299C  0E00               	movlw	0
 15180  00299E  6E7A               	movwf	_was_low_1+1,c	;volatile
 15181  0029A0  0E01               	movlw	1
 15182  0029A2  6E79               	movwf	_was_low_1,c	;volatile
 15183                           
 15184                           ; BSR set to: 0
 15185                           ;interruptHandler.c: 58: TMR1H = 20000 - servoTimes[0];
 15186  0029A4  0101               	movlb	1	; () banked
 15187  0029A6  511C               	movf	_servoTimes& (0+255),w,b
 15188  0029A8  0800               	sublw	0
 15189  0029AA  0F20               	addlw	32
 15190  0029AC  6ECF               	movwf	4047,c	;volatile
 15191                           
 15192                           ; BSR set to: 1
 15193                           ;interruptHandler.c: 59: TMR1L = 20000 - servoTimes[1];
 15194  0029AE  0101               	movlb	1	; () banked
 15195  0029B0  511E               	movf	(_servoTimes+2)& (0+255),w,b
 15196  0029B2  0800               	sublw	0
 15197  0029B4  0F20               	addlw	32
 15198  0029B6  6ECE               	movwf	4046,c	;volatile
 15199  0029B8                     i2l7976:
 15200                           
 15201                           ;interruptHandler.c: 60: }
 15202                           ;interruptHandler.c: 61: TMR1ON = 1;
 15203  0029B8  80CD               	bsf	4045,0,c	;volatile
 15204  0029BA                     i2l7978:
 15205                           
 15206                           ;interruptHandler.c: 62: }
 15207                           ;interruptHandler.c: 63: }
 15208                           ;interruptHandler.c: 65: if(TMR3IF){
 15209  0029BA  A2A1               	btfss	4001,1,c	;volatile
 15210  0029BC  D024               	goto	i2l850
 15211                           
 15212                           ;interruptHandler.c: 66: TMR3IF = 0;
 15213  0029BE  92A1               	bcf	4001,1,c	;volatile
 15214                           
 15215                           ;interruptHandler.c: 67: TMR3ON = 0;
 15216  0029C0  90B1               	bcf	4017,0,c	;volatile
 15217                           
 15218                           ;interruptHandler.c: 68: if(machine_state == Sorting_state){
 15219  0029C2  0100               	movlb	0	; () banked
 15220  0029C4  05FC               	decf	_machine_state& (0+255),w,b
 15221  0029C6  A4D8               	btfss	status,2,c
 15222  0029C8  D01E               	goto	i2l850
 15223                           
 15224                           ; BSR set to: 0
 15225                           ;interruptHandler.c: 69: if(was_low_3){
 15226  0029CA  507B               	movf	_was_low_3,w,c	;volatile
 15227  0029CC  107C               	iorwf	_was_low_3+1,w,c	;volatile
 15228  0029CE  B4D8               	btfsc	status,2,c
 15229  0029D0  D00A               	goto	i2l848
 15230                           
 15231                           ; BSR set to: 0
 15232                           ;interruptHandler.c: 70: LATCbits.LATC2 = 1;
 15233  0029D2  848B               	bsf	3979,2,c	;volatile
 15234                           
 15235                           ; BSR set to: 0
 15236                           ;interruptHandler.c: 71: was_low_3 = 0;
 15237  0029D4  0E00               	movlw	0
 15238  0029D6  6E7C               	movwf	_was_low_3+1,c	;volatile
 15239  0029D8  0E00               	movlw	0
 15240  0029DA  6E7B               	movwf	_was_low_3,c	;volatile
 15241                           
 15242                           ; BSR set to: 0
 15243                           ;interruptHandler.c: 72: TMR3H = servoTimes[2];
 15244  0029DC  C120  FFB3         	movff	_servoTimes+4,4019	;volatile
 15245                           
 15246                           ; BSR set to: 0
 15247                           ;interruptHandler.c: 73: TMR3L = servoTimes[3];
 15248  0029E0  C122  FFB2         	movff	_servoTimes+6,4018	;volatile
 15249                           
 15250                           ;interruptHandler.c: 74: }
 15251  0029E4  D00F               	goto	i2l8000
 15252  0029E6                     i2l848:
 15253                           
 15254                           ; BSR set to: 0
 15255                           ;interruptHandler.c: 75: else{
 15256                           ;interruptHandler.c: 76: LATCbits.LATC2 = 0;
 15257  0029E6  948B               	bcf	3979,2,c	;volatile
 15258                           
 15259                           ; BSR set to: 0
 15260                           ;interruptHandler.c: 77: was_low_3 = 1;
 15261  0029E8  0E00               	movlw	0
 15262  0029EA  6E7C               	movwf	_was_low_3+1,c	;volatile
 15263  0029EC  0E01               	movlw	1
 15264  0029EE  6E7B               	movwf	_was_low_3,c	;volatile
 15265                           
 15266                           ; BSR set to: 0
 15267                           ;interruptHandler.c: 78: TMR3H = 20000 - servoTimes[2];
 15268  0029F0  0101               	movlb	1	; () banked
 15269  0029F2  5120               	movf	(_servoTimes+4)& (0+255),w,b
 15270  0029F4  0800               	sublw	0
 15271  0029F6  0F20               	addlw	32
 15272  0029F8  6EB3               	movwf	4019,c	;volatile
 15273                           
 15274                           ; BSR set to: 1
 15275                           ;interruptHandler.c: 79: TMR3L = 20000 - servoTimes[3];
 15276  0029FA  0101               	movlb	1	; () banked
 15277  0029FC  5122               	movf	(_servoTimes+6)& (0+255),w,b
 15278  0029FE  0800               	sublw	0
 15279  002A00  0F20               	addlw	32
 15280  002A02  6EB2               	movwf	4018,c	;volatile
 15281  002A04                     i2l8000:
 15282                           
 15283                           ;interruptHandler.c: 80: }
 15284                           ;interruptHandler.c: 81: TMR3ON = 1;
 15285  002A04  80B1               	bsf	4017,0,c	;volatile
 15286  002A06                     i2l850:
 15287  002A06  C05A  FFF5         	movff	??_handler+15,tablat
 15288  002A0A  C059  FFF8         	movff	??_handler+14,tblptru
 15289  002A0E  C058  FFF7         	movff	??_handler+13,tblptrh
 15290  002A12  C057  FFF6         	movff	??_handler+12,tblptrl
 15291  002A16  C056  FFF4         	movff	??_handler+11,prodh
 15292  002A1A  C055  FFF3         	movff	??_handler+10,prodl
 15293  002A1E  C054  FFDA         	movff	??_handler+9,fsr2h
 15294  002A22  C053  FFD9         	movff	??_handler+8,fsr2l
 15295  002A26  C052  FFE2         	movff	??_handler+7,fsr1h
 15296  002A2A  C051  FFE1         	movff	??_handler+6,fsr1l
 15297  002A2E  C050  FFEA         	movff	??_handler+5,fsr0h
 15298  002A32  C04F  FFE9         	movff	??_handler+4,fsr0l
 15299  002A36  C04E  FFFB         	movff	??_handler+3,pclatu
 15300  002A3A  C04D  FFFA         	movff	??_handler+2,pclath
 15301  002A3E  927E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 15302  002A40  0011               	retfie		f
 15303  002A42                     __end_of_handler:
 15304                           	opt stack 0
 15305                           pclatu	equ	0xFFB
 15306                           pclath	equ	0xFFA
 15307                           tblptru	equ	0xFF8
 15308                           tblptrh	equ	0xFF7
 15309                           tblptrl	equ	0xFF6
 15310                           tablat	equ	0xFF5
 15311                           prodh	equ	0xFF4
 15312                           prodl	equ	0xFF3
 15313                           intcon	equ	0xFF2
 15314                           intcon2	equ	0xFF1
 15315                           intcon3	equ	0xFF0
 15316                           indf0	equ	0xFEF
 15317                           postinc0	equ	0xFEE
 15318                           fsr0h	equ	0xFEA
 15319                           fsr0l	equ	0xFE9
 15320                           wreg	equ	0xFE8
 15321                           postdec1	equ	0xFE5
 15322                           fsr1h	equ	0xFE2
 15323                           fsr1l	equ	0xFE1
 15324                           indf2	equ	0xFDF
 15325                           postinc2	equ	0xFDE
 15326                           postdec2	equ	0xFDD
 15327                           fsr2h	equ	0xFDA
 15328                           fsr2l	equ	0xFD9
 15329                           status	equ	0xFD8
 15330                           
 15331 ;; *************** function _updateMenu *****************
 15332 ;; Defined at:
 15333 ;;		line 211 in file "UI.c"
 15334 ;; Parameters:    Size  Location     Type
 15335 ;;		None
 15336 ;; Auto vars:     Size  Location     Type
 15337 ;;		None
 15338 ;; Return value:  Size  Location     Type
 15339 ;;                  1    wreg      void 
 15340 ;; Registers used:
 15341 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15342 ;; Tracked objects:
 15343 ;;		On entry : 0/0
 15344 ;;		On exit  : 0/0
 15345 ;;		Unchanged: 0/0
 15346 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15347 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15348 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15349 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15350 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15351 ;;Total ram usage:        2 bytes
 15352 ;; Hardware stack levels used:    1
 15353 ;; Hardware stack levels required when called:    5
 15354 ;; This function calls:
 15355 ;;		_change_state_to_logs_11
 15356 ;;		_change_state_to_logs_12
 15357 ;;		_change_state_to_logs_22
 15358 ;;		_change_state_to_logs_23
 15359 ;;		_change_state_to_logs_33
 15360 ;;		_change_state_to_logs_34
 15361 ;;		_change_state_to_menu_11
 15362 ;;		_change_state_to_menu_23
 15363 ;;		_dispLogs
 15364 ;;		_inputHandler
 15365 ;;		i2_change_state_to_menu_12
 15366 ;;		i2_change_state_to_menu_22
 15367 ;;		i2_change_state_to_menu_start
 15368 ;; This function is called by:
 15369 ;;		_handler
 15370 ;; This function uses a non-reentrant model
 15371 ;;
 15372                           
 15373                           	psect	text58
 15374  001E98                     __ptext58:
 15375                           	opt stack 0
 15376  001E98                     _updateMenu:
 15377                           	opt stack 18
 15378                           
 15379                           ;UI.c: 212: up = 0; down = 0; enter = 0; back = 0;
 15380                           
 15381                           ;incstack = 0
 15382  001E98  0E00               	movlw	0
 15383  001E9A  6E78               	movwf	_up+1,c
 15384  001E9C  0E00               	movlw	0
 15385  001E9E  6E77               	movwf	_up,c
 15386  001EA0  0E00               	movlw	0
 15387  001EA2  6E68               	movwf	_down+1,c
 15388  001EA4  0E00               	movlw	0
 15389  001EA6  6E67               	movwf	_down,c
 15390  001EA8  0E00               	movlw	0
 15391  001EAA  6E6A               	movwf	_enter+1,c
 15392  001EAC  0E00               	movlw	0
 15393  001EAE  6E69               	movwf	_enter,c
 15394  001EB0  0E00               	movlw	0
 15395  001EB2  6E5C               	movwf	_back+1,c
 15396  001EB4  0E00               	movlw	0
 15397  001EB6  6E5B               	movwf	_back,c
 15398                           
 15399                           ;UI.c: 213: (INTCONbits.GIE = 0);
 15400  001EB8  9EF2               	bcf	intcon,7,c	;volatile
 15401                           
 15402                           ;UI.c: 215: if (inputHandler()
 15403                           ;UI.c: 218: ){
 15404  001EBA  ECC0  F012         	call	_inputHandler	;wreg free
 15405  001EBE  502A               	movf	?_inputHandler,w,c
 15406  001EC0  102B               	iorwf	?_inputHandler+1,w,c
 15407  001EC2  A4D8               	btfss	status,2,c
 15408  001EC4  D112               	goto	i2l7680
 15409  001EC6  D146               	goto	i2l254
 15410  001EC8                     i2l7532:
 15411                           
 15412                           ;UI.c: 222: change_state_to_menu_11();
 15413  001EC8  ECC6  F020         	call	_change_state_to_menu_11	;wreg free
 15414                           
 15415                           ;UI.c: 223: break;
 15416  001ECC  D143               	goto	i2l254
 15417  001ECE                     i2l7534:
 15418                           
 15419                           ;UI.c: 226: if(up){
 15420  001ECE  5077               	movf	_up,w,c
 15421  001ED0  1078               	iorwf	_up+1,w,c
 15422  001ED2  B4D8               	btfsc	status,2,c
 15423  001ED4  D003               	goto	i2l7538
 15424                           
 15425                           ;UI.c: 227: change_state_to_menu_23();
 15426  001ED6  ECAE  F020         	call	_change_state_to_menu_23	;wreg free
 15427                           
 15428                           ;UI.c: 228: }
 15429  001EDA  D13C               	goto	i2l254
 15430  001EDC                     i2l7538:
 15431                           
 15432                           ;UI.c: 229: else if(down){
 15433  001EDC  5067               	movf	_down,w,c
 15434  001EDE  1068               	iorwf	_down+1,w,c
 15435  001EE0  B4D8               	btfsc	status,2,c
 15436  001EE2  D003               	goto	i2l7542
 15437                           
 15438                           ;UI.c: 230: change_state_to_menu_12();
 15439  001EE4  EC96  F020         	call	i2_change_state_to_menu_12	;wreg free
 15440                           
 15441                           ;UI.c: 231: }
 15442  001EE8  D135               	goto	i2l254
 15443  001EEA                     i2l7542:
 15444                           
 15445                           ;UI.c: 232: else if(enter){
 15446  001EEA  5069               	movf	_enter,w,c
 15447  001EEC  106A               	iorwf	_enter+1,w,c
 15448  001EEE  B4D8               	btfsc	status,2,c
 15449  001EF0  D131               	goto	i2l254
 15450                           
 15451                           ;UI.c: 233: change_state_to_menu_start();
 15452  001EF2  ECD9  F021         	call	i2_change_state_to_menu_start	;wreg free
 15453                           
 15454                           ;UI.c: 234: }
 15455                           ;UI.c: 235: break;
 15456  001EF6  D12E               	goto	i2l254
 15457  001EF8                     i2l7546:
 15458                           
 15459                           ;UI.c: 238: if(up){
 15460  001EF8  5077               	movf	_up,w,c
 15461  001EFA  1078               	iorwf	_up+1,w,c
 15462  001EFC  B4D8               	btfsc	status,2,c
 15463  001EFE  D003               	goto	i2l7550
 15464                           
 15465                           ;UI.c: 239: change_state_to_menu_11();
 15466  001F00  ECC6  F020         	call	_change_state_to_menu_11	;wreg free
 15467                           
 15468                           ;UI.c: 240: }
 15469  001F04  D127               	goto	i2l254
 15470  001F06                     i2l7550:
 15471                           
 15472                           ;UI.c: 241: else if(down){
 15473  001F06  5067               	movf	_down,w,c
 15474  001F08  1068               	iorwf	_down+1,w,c
 15475  001F0A  B4D8               	btfsc	status,2,c
 15476  001F0C  D011               	goto	i2l7566
 15477                           
 15478                           ;UI.c: 242: change_state_to_menu_23();
 15479  001F0E  ECAE  F020         	call	_change_state_to_menu_23	;wreg free
 15480                           
 15481                           ;UI.c: 243: }
 15482  001F12  D120               	goto	i2l254
 15483  001F14                     i2l7558:
 15484                           
 15485                           ;UI.c: 250: if(up){
 15486  001F14  5077               	movf	_up,w,c
 15487  001F16  1078               	iorwf	_up+1,w,c
 15488  001F18  B4D8               	btfsc	status,2,c
 15489  001F1A  D003               	goto	i2l7562
 15490                           
 15491                           ;UI.c: 251: change_state_to_menu_11();
 15492  001F1C  ECC6  F020         	call	_change_state_to_menu_11	;wreg free
 15493                           
 15494                           ;UI.c: 252: }
 15495  001F20  D119               	goto	i2l254
 15496  001F22                     i2l7562:
 15497                           
 15498                           ;UI.c: 253: else if(down){
 15499  001F22  5067               	movf	_down,w,c
 15500  001F24  1068               	iorwf	_down+1,w,c
 15501  001F26  B4D8               	btfsc	status,2,c
 15502  001F28  D003               	goto	i2l7566
 15503                           
 15504                           ;UI.c: 254: change_state_to_menu_23();
 15505  001F2A  ECAE  F020         	call	_change_state_to_menu_23	;wreg free
 15506                           
 15507                           ;UI.c: 255: }
 15508  001F2E  D112               	goto	i2l254
 15509  001F30                     i2l7566:
 15510                           
 15511                           ;UI.c: 256: else if(enter){
 15512  001F30  5069               	movf	_enter,w,c
 15513  001F32  106A               	iorwf	_enter+1,w,c
 15514  001F34  B4D8               	btfsc	status,2,c
 15515  001F36  D10E               	goto	i2l254
 15516                           
 15517                           ;UI.c: 257: machine_state = Sorting_state;
 15518  001F38  0E01               	movlw	1
 15519  001F3A  0100               	movlb	0	; () banked
 15520  001F3C  6FFC               	movwf	_machine_state& (0+255),b
 15521                           
 15522                           ; BSR set to: 0
 15523                           ;UI.c: 258: }
 15524                           ;UI.c: 259: break;
 15525                           
 15526                           ; BSR set to: 0
 15527                           
 15528                           ; BSR set to: 0
 15529  001F3E  D10A               	goto	i2l254
 15530  001F40                     i2l7570:
 15531                           
 15532                           ;UI.c: 262: if(up){
 15533  001F40  5077               	movf	_up,w,c
 15534  001F42  1078               	iorwf	_up+1,w,c
 15535  001F44  B4D8               	btfsc	status,2,c
 15536  001F46  D003               	goto	i2l7574
 15537                           
 15538                           ;UI.c: 263: change_state_to_menu_22();
 15539  001F48  EC7E  F020         	call	i2_change_state_to_menu_22	;wreg free
 15540                           
 15541                           ;UI.c: 264: }
 15542  001F4C  D103               	goto	i2l254
 15543  001F4E                     i2l7574:
 15544                           
 15545                           ;UI.c: 265: else if(down){
 15546  001F4E  5067               	movf	_down,w,c
 15547  001F50  1068               	iorwf	_down+1,w,c
 15548  001F52  B4D8               	btfsc	status,2,c
 15549  001F54  D003               	goto	i2l7578
 15550                           
 15551                           ;UI.c: 266: change_state_to_menu_11();
 15552  001F56  ECC6  F020         	call	_change_state_to_menu_11	;wreg free
 15553                           
 15554                           ;UI.c: 267: }
 15555  001F5A  D0FC               	goto	i2l254
 15556  001F5C                     i2l7578:
 15557                           
 15558                           ;UI.c: 268: else if(enter){
 15559  001F5C  5069               	movf	_enter,w,c
 15560  001F5E  106A               	iorwf	_enter+1,w,c
 15561  001F60  B4D8               	btfsc	status,2,c
 15562  001F62  D0F8               	goto	i2l254
 15563                           
 15564                           ;UI.c: 269: change_state_to_logs_11();
 15565  001F64  EC3E  F021         	call	_change_state_to_logs_11	;wreg free
 15566                           
 15567                           ;UI.c: 270: }
 15568                           ;UI.c: 271: break;
 15569  001F68  D0F5               	goto	i2l254
 15570  001F6A                     i2l7582:
 15571                           
 15572                           ;UI.c: 274: if(up){
 15573  001F6A  5077               	movf	_up,w,c
 15574  001F6C  1078               	iorwf	_up+1,w,c
 15575  001F6E  B4D8               	btfsc	status,2,c
 15576  001F70  D003               	goto	i2l7586
 15577                           
 15578                           ;UI.c: 275: change_state_to_logs_34();
 15579  001F72  ECDE  F020         	call	_change_state_to_logs_34	;wreg free
 15580                           
 15581                           ;UI.c: 276: }
 15582  001F76  D0EE               	goto	i2l254
 15583  001F78                     i2l7586:
 15584                           
 15585                           ;UI.c: 277: else if(down){
 15586  001F78  5067               	movf	_down,w,c
 15587  001F7A  1068               	iorwf	_down+1,w,c
 15588  001F7C  B4D8               	btfsc	status,2,c
 15589  001F7E  D003               	goto	i2l7590
 15590                           
 15591                           ;UI.c: 278: change_state_to_logs_12();
 15592  001F80  EC26  F021         	call	_change_state_to_logs_12	;wreg free
 15593                           
 15594                           ;UI.c: 279: }
 15595  001F84  D0E7               	goto	i2l254
 15596  001F86                     i2l7590:
 15597                           
 15598                           ;UI.c: 280: else if(enter){
 15599  001F86  5069               	movf	_enter,w,c
 15600  001F88  106A               	iorwf	_enter+1,w,c
 15601  001F8A  B4D8               	btfsc	status,2,c
 15602  001F8C  D007               	goto	i2l7594
 15603                           
 15604                           ;UI.c: 281: dispLogs(1);
 15605  001F8E  0E00               	movlw	0
 15606  001F90  6E13               	movwf	dispLogs@myLog+1,c
 15607  001F92  0E01               	movlw	1
 15608  001F94  6E12               	movwf	dispLogs@myLog,c
 15609  001F96  EC25  F022         	call	_dispLogs	;wreg free
 15610                           
 15611                           ;UI.c: 282: }
 15612  001F9A  D0DC               	goto	i2l254
 15613  001F9C                     i2l7594:
 15614                           
 15615                           ;UI.c: 283: else if(back){
 15616  001F9C  505B               	movf	_back,w,c
 15617  001F9E  105C               	iorwf	_back+1,w,c
 15618  001FA0  B4D8               	btfsc	status,2,c
 15619  001FA2  D0D8               	goto	i2l254
 15620                           
 15621                           ;UI.c: 284: change_state_to_menu_23();
 15622  001FA4  ECAE  F020         	call	_change_state_to_menu_23	;wreg free
 15623                           
 15624                           ;UI.c: 285: }
 15625                           ;UI.c: 286: break;
 15626  001FA8  D0D5               	goto	i2l254
 15627  001FAA                     i2l7598:
 15628                           
 15629                           ;UI.c: 289: if(up){
 15630  001FAA  5077               	movf	_up,w,c
 15631  001FAC  1078               	iorwf	_up+1,w,c
 15632  001FAE  B4D8               	btfsc	status,2,c
 15633  001FB0  D003               	goto	i2l7602
 15634                           
 15635                           ;UI.c: 290: change_state_to_logs_11();
 15636  001FB2  EC3E  F021         	call	_change_state_to_logs_11	;wreg free
 15637                           
 15638                           ;UI.c: 291: }
 15639  001FB6  D0CE               	goto	i2l254
 15640  001FB8                     i2l7602:
 15641                           
 15642                           ;UI.c: 292: else if(down){
 15643  001FB8  5067               	movf	_down,w,c
 15644  001FBA  1068               	iorwf	_down+1,w,c
 15645  001FBC  B4D8               	btfsc	status,2,c
 15646  001FBE  D003               	goto	i2l7606
 15647                           
 15648                           ;UI.c: 293: change_state_to_logs_23();
 15649  001FC0  EC6D  F021         	call	_change_state_to_logs_23	;wreg free
 15650                           
 15651                           ;UI.c: 294: }
 15652  001FC4  D0C7               	goto	i2l254
 15653  001FC6                     i2l7606:
 15654                           
 15655                           ;UI.c: 295: else if(enter){
 15656  001FC6  5069               	movf	_enter,w,c
 15657  001FC8  106A               	iorwf	_enter+1,w,c
 15658  001FCA  B4D8               	btfsc	status,2,c
 15659  001FCC  D007               	goto	i2l7610
 15660                           
 15661                           ;UI.c: 296: dispLogs(2);
 15662  001FCE  0E00               	movlw	0
 15663  001FD0  6E13               	movwf	dispLogs@myLog+1,c
 15664  001FD2  0E02               	movlw	2
 15665  001FD4  6E12               	movwf	dispLogs@myLog,c
 15666  001FD6  EC25  F022         	call	_dispLogs	;wreg free
 15667                           
 15668                           ;UI.c: 297: }
 15669  001FDA  D0BC               	goto	i2l254
 15670  001FDC                     i2l7610:
 15671                           
 15672                           ;UI.c: 298: else if(back){
 15673  001FDC  505B               	movf	_back,w,c
 15674  001FDE  105C               	iorwf	_back+1,w,c
 15675  001FE0  B4D8               	btfsc	status,2,c
 15676  001FE2  D0B8               	goto	i2l254
 15677                           
 15678                           ;UI.c: 299: change_state_to_menu_23();
 15679  001FE4  ECAE  F020         	call	_change_state_to_menu_23	;wreg free
 15680                           
 15681                           ;UI.c: 300: }
 15682                           ;UI.c: 301: break;
 15683  001FE8  D0B5               	goto	i2l254
 15684  001FEA                     i2l7614:
 15685                           
 15686                           ;UI.c: 304: if(up){
 15687  001FEA  5077               	movf	_up,w,c
 15688  001FEC  1078               	iorwf	_up+1,w,c
 15689  001FEE  B4D8               	btfsc	status,2,c
 15690  001FF0  D003               	goto	i2l7618
 15691                           
 15692                           ;UI.c: 305: change_state_to_logs_11();
 15693  001FF2  EC3E  F021         	call	_change_state_to_logs_11	;wreg free
 15694                           
 15695                           ;UI.c: 306: }
 15696  001FF6  D0AE               	goto	i2l254
 15697  001FF8                     i2l7618:
 15698                           
 15699                           ;UI.c: 307: else if(down){
 15700  001FF8  5067               	movf	_down,w,c
 15701  001FFA  1068               	iorwf	_down+1,w,c
 15702  001FFC  B4D8               	btfsc	status,2,c
 15703  001FFE  D003               	goto	i2l7622
 15704                           
 15705                           ;UI.c: 308: change_state_to_logs_23();
 15706  002000  EC6D  F021         	call	_change_state_to_logs_23	;wreg free
 15707                           
 15708                           ;UI.c: 309: }
 15709  002004  D0A7               	goto	i2l254
 15710  002006                     i2l7622:
 15711                           
 15712                           ;UI.c: 310: else if(enter){
 15713  002006  5069               	movf	_enter,w,c
 15714  002008  106A               	iorwf	_enter+1,w,c
 15715  00200A  B4D8               	btfsc	status,2,c
 15716  00200C  D007               	goto	i2l7626
 15717                           
 15718                           ;UI.c: 311: dispLogs(2);
 15719  00200E  0E00               	movlw	0
 15720  002010  6E13               	movwf	dispLogs@myLog+1,c
 15721  002012  0E02               	movlw	2
 15722  002014  6E12               	movwf	dispLogs@myLog,c
 15723  002016  EC25  F022         	call	_dispLogs	;wreg free
 15724                           
 15725                           ;UI.c: 312: }
 15726  00201A  D09C               	goto	i2l254
 15727  00201C                     i2l7626:
 15728                           
 15729                           ;UI.c: 313: else if(back){
 15730  00201C  505B               	movf	_back,w,c
 15731  00201E  105C               	iorwf	_back+1,w,c
 15732  002020  B4D8               	btfsc	status,2,c
 15733  002022  D098               	goto	i2l254
 15734                           
 15735                           ;UI.c: 314: change_state_to_menu_23();
 15736  002024  ECAE  F020         	call	_change_state_to_menu_23	;wreg free
 15737                           
 15738                           ;UI.c: 315: }
 15739                           ;UI.c: 316: break;
 15740  002028  D095               	goto	i2l254
 15741  00202A                     i2l7630:
 15742                           
 15743                           ;UI.c: 319: if(up){
 15744  00202A  5077               	movf	_up,w,c
 15745  00202C  1078               	iorwf	_up+1,w,c
 15746  00202E  B4D8               	btfsc	status,2,c
 15747  002030  D003               	goto	i2l7634
 15748                           
 15749                           ;UI.c: 320: change_state_to_logs_22();
 15750  002032  EC0E  F021         	call	_change_state_to_logs_22	;wreg free
 15751                           
 15752                           ;UI.c: 321: }
 15753  002036  D08E               	goto	i2l254
 15754  002038                     i2l7634:
 15755                           
 15756                           ;UI.c: 322: else if(down){
 15757  002038  5067               	movf	_down,w,c
 15758  00203A  1068               	iorwf	_down+1,w,c
 15759  00203C  B4D8               	btfsc	status,2,c
 15760  00203E  D003               	goto	i2l7638
 15761                           
 15762                           ;UI.c: 323: change_state_to_logs_34();
 15763  002040  ECDE  F020         	call	_change_state_to_logs_34	;wreg free
 15764                           
 15765                           ;UI.c: 324: }
 15766  002044  D087               	goto	i2l254
 15767  002046                     i2l7638:
 15768                           
 15769                           ;UI.c: 325: else if(enter){
 15770  002046  5069               	movf	_enter,w,c
 15771  002048  106A               	iorwf	_enter+1,w,c
 15772  00204A  B4D8               	btfsc	status,2,c
 15773  00204C  D007               	goto	i2l7642
 15774                           
 15775                           ;UI.c: 326: dispLogs(3);
 15776  00204E  0E00               	movlw	0
 15777  002050  6E13               	movwf	dispLogs@myLog+1,c
 15778  002052  0E03               	movlw	3
 15779  002054  6E12               	movwf	dispLogs@myLog,c
 15780  002056  EC25  F022         	call	_dispLogs	;wreg free
 15781                           
 15782                           ;UI.c: 327: }
 15783  00205A  D07C               	goto	i2l254
 15784  00205C                     i2l7642:
 15785                           
 15786                           ;UI.c: 328: else if(back){
 15787  00205C  505B               	movf	_back,w,c
 15788  00205E  105C               	iorwf	_back+1,w,c
 15789  002060  B4D8               	btfsc	status,2,c
 15790  002062  D078               	goto	i2l254
 15791                           
 15792                           ;UI.c: 329: change_state_to_menu_23();
 15793  002064  ECAE  F020         	call	_change_state_to_menu_23	;wreg free
 15794                           
 15795                           ;UI.c: 330: }
 15796                           ;UI.c: 331: break;
 15797  002068  D075               	goto	i2l254
 15798  00206A                     i2l7646:
 15799                           
 15800                           ;UI.c: 334: if(up){
 15801  00206A  5077               	movf	_up,w,c
 15802  00206C  1078               	iorwf	_up+1,w,c
 15803  00206E  B4D8               	btfsc	status,2,c
 15804  002070  D003               	goto	i2l7650
 15805                           
 15806                           ;UI.c: 335: change_state_to_logs_22();
 15807  002072  EC0E  F021         	call	_change_state_to_logs_22	;wreg free
 15808                           
 15809                           ;UI.c: 336: }
 15810  002076  D06E               	goto	i2l254
 15811  002078                     i2l7650:
 15812                           
 15813                           ;UI.c: 337: else if(down){
 15814  002078  5067               	movf	_down,w,c
 15815  00207A  1068               	iorwf	_down+1,w,c
 15816  00207C  B4D8               	btfsc	status,2,c
 15817  00207E  D003               	goto	i2l7654
 15818                           
 15819                           ;UI.c: 338: change_state_to_logs_34();
 15820  002080  ECDE  F020         	call	_change_state_to_logs_34	;wreg free
 15821                           
 15822                           ;UI.c: 339: }
 15823  002084  D067               	goto	i2l254
 15824  002086                     i2l7654:
 15825                           
 15826                           ;UI.c: 340: else if(enter){
 15827  002086  5069               	movf	_enter,w,c
 15828  002088  106A               	iorwf	_enter+1,w,c
 15829  00208A  B4D8               	btfsc	status,2,c
 15830  00208C  D007               	goto	i2l7658
 15831                           
 15832                           ;UI.c: 341: dispLogs(3);
 15833  00208E  0E00               	movlw	0
 15834  002090  6E13               	movwf	dispLogs@myLog+1,c
 15835  002092  0E03               	movlw	3
 15836  002094  6E12               	movwf	dispLogs@myLog,c
 15837  002096  EC25  F022         	call	_dispLogs	;wreg free
 15838                           
 15839                           ;UI.c: 342: }
 15840  00209A  D05C               	goto	i2l254
 15841  00209C                     i2l7658:
 15842                           
 15843                           ;UI.c: 343: else if(back){
 15844  00209C  505B               	movf	_back,w,c
 15845  00209E  105C               	iorwf	_back+1,w,c
 15846  0020A0  B4D8               	btfsc	status,2,c
 15847  0020A2  D058               	goto	i2l254
 15848                           
 15849                           ;UI.c: 344: change_state_to_menu_23();
 15850  0020A4  ECAE  F020         	call	_change_state_to_menu_23	;wreg free
 15851                           
 15852                           ;UI.c: 345: }
 15853                           ;UI.c: 346: break;
 15854  0020A8  D055               	goto	i2l254
 15855  0020AA                     i2l7662:
 15856                           
 15857                           ;UI.c: 349: if(up){
 15858  0020AA  5077               	movf	_up,w,c
 15859  0020AC  1078               	iorwf	_up+1,w,c
 15860  0020AE  B4D8               	btfsc	status,2,c
 15861  0020B0  D003               	goto	i2l7666
 15862                           
 15863                           ;UI.c: 350: change_state_to_logs_33();
 15864  0020B2  ECF6  F020         	call	_change_state_to_logs_33	;wreg free
 15865                           
 15866                           ;UI.c: 351: }
 15867  0020B6  D04E               	goto	i2l254
 15868  0020B8                     i2l7666:
 15869                           
 15870                           ;UI.c: 352: else if(down){
 15871  0020B8  5067               	movf	_down,w,c
 15872  0020BA  1068               	iorwf	_down+1,w,c
 15873  0020BC  B4D8               	btfsc	status,2,c
 15874  0020BE  D003               	goto	i2l7670
 15875                           
 15876                           ;UI.c: 353: change_state_to_logs_11();
 15877  0020C0  EC3E  F021         	call	_change_state_to_logs_11	;wreg free
 15878                           
 15879                           ;UI.c: 354: }
 15880  0020C4  D047               	goto	i2l254
 15881  0020C6                     i2l7670:
 15882                           
 15883                           ;UI.c: 355: else if(enter){
 15884  0020C6  5069               	movf	_enter,w,c
 15885  0020C8  106A               	iorwf	_enter+1,w,c
 15886  0020CA  B4D8               	btfsc	status,2,c
 15887  0020CC  D007               	goto	i2l7674
 15888                           
 15889                           ;UI.c: 356: dispLogs(4);
 15890  0020CE  0E00               	movlw	0
 15891  0020D0  6E13               	movwf	dispLogs@myLog+1,c
 15892  0020D2  0E04               	movlw	4
 15893  0020D4  6E12               	movwf	dispLogs@myLog,c
 15894  0020D6  EC25  F022         	call	_dispLogs	;wreg free
 15895                           
 15896                           ;UI.c: 357: }
 15897  0020DA  D03C               	goto	i2l254
 15898  0020DC                     i2l7674:
 15899                           
 15900                           ;UI.c: 358: else if(back){
 15901  0020DC  505B               	movf	_back,w,c
 15902  0020DE  105C               	iorwf	_back+1,w,c
 15903  0020E0  B4D8               	btfsc	status,2,c
 15904  0020E2  D038               	goto	i2l254
 15905                           
 15906                           ;UI.c: 359: change_state_to_menu_23();
 15907  0020E4  ECAE  F020         	call	_change_state_to_menu_23	;wreg free
 15908                           
 15909                           ;UI.c: 365: }
 15910                           
 15911                           ;UI.c: 364: break;
 15912                           
 15913                           ;UI.c: 363: default:
 15914                           
 15915                           ;UI.c: 360: }
 15916                           ;UI.c: 361: break;
 15917  0020E8  D035               	goto	i2l254
 15918  0020EA                     i2l7680:
 15919  0020EA  C0DE  F043         	movff	_cur_state,??_updateMenu
 15920  0020EE  C0DF  F044         	movff	_cur_state+1,??_updateMenu+1
 15921                           
 15922                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 3 sub-sw
      +                          itches
 15923                           ; Switch size 1, requested type "space"
 15924                           ; Number of cases is 3, Range of values is 0 to 4
 15925                           ; switch strategies available:
 15926                           ; Name         Instructions Cycles
 15927                           ; simple_byte           10     6 (average)
 15928                           ;	Chosen strategy is simple_byte
 15929  0020F2  5044               	movf	??_updateMenu+1,w,c
 15930  0020F4  0A00               	xorlw	0	; case 0
 15931  0020F6  B4D8               	btfsc	status,2,c
 15932  0020F8  D007               	goto	i2l8264
 15933  0020FA  0A03               	xorlw	3	; case 3
 15934  0020FC  B4D8               	btfsc	status,2,c
 15935  0020FE  D015               	goto	i2l8266
 15936  002100  0A07               	xorlw	7	; case 4
 15937  002102  B4D8               	btfsc	status,2,c
 15938  002104  D020               	goto	i2l8268
 15939  002106  D026               	goto	i2l254
 15940  002108                     i2l8264:
 15941                           
 15942                           ; Switch size 1, requested type "space"
 15943                           ; Number of cases is 5, Range of values is 0 to 23
 15944                           ; switch strategies available:
 15945                           ; Name         Instructions Cycles
 15946                           ; simple_byte           16     9 (average)
 15947                           ;	Chosen strategy is simple_byte
 15948  002108  5043               	movf	??_updateMenu,w,c
 15949  00210A  0A00               	xorlw	0	; case 0
 15950  00210C  B4D8               	btfsc	status,2,c
 15951  00210E  D6DC               	goto	i2l7532
 15952  002110  0A0B               	xorlw	11	; case 11
 15953  002112  B4D8               	btfsc	status,2,c
 15954  002114  D6DC               	goto	i2l7534
 15955  002116  0A07               	xorlw	7	; case 12
 15956  002118  B4D8               	btfsc	status,2,c
 15957  00211A  D6EE               	goto	i2l7546
 15958  00211C  0A1A               	xorlw	26	; case 22
 15959  00211E  B4D8               	btfsc	status,2,c
 15960  002120  D6F9               	goto	i2l7558
 15961  002122  0A01               	xorlw	1	; case 23
 15962  002124  B4D8               	btfsc	status,2,c
 15963  002126  D70C               	goto	i2l7570
 15964  002128  D015               	goto	i2l254
 15965  00212A                     i2l8266:
 15966                           
 15967                           ; Switch size 1, requested type "space"
 15968                           ; Number of cases is 4, Range of values is 243 to 255
 15969                           ; switch strategies available:
 15970                           ; Name         Instructions Cycles
 15971                           ; simple_byte           13     7 (average)
 15972                           ;	Chosen strategy is simple_byte
 15973  00212A  5043               	movf	??_updateMenu,w,c
 15974  00212C  0AF3               	xorlw	243	; case 243
 15975  00212E  B4D8               	btfsc	status,2,c
 15976  002130  D71C               	goto	i2l7582
 15977  002132  0A07               	xorlw	7	; case 244
 15978  002134  B4D8               	btfsc	status,2,c
 15979  002136  D739               	goto	i2l7598
 15980  002138  0A0A               	xorlw	10	; case 254
 15981  00213A  B4D8               	btfsc	status,2,c
 15982  00213C  D756               	goto	i2l7614
 15983  00213E  0A01               	xorlw	1	; case 255
 15984  002140  B4D8               	btfsc	status,2,c
 15985  002142  D773               	goto	i2l7630
 15986  002144  D007               	goto	i2l254
 15987  002146                     i2l8268:
 15988                           
 15989                           ; Switch size 1, requested type "space"
 15990                           ; Number of cases is 2, Range of values is 9 to 10
 15991                           ; switch strategies available:
 15992                           ; Name         Instructions Cycles
 15993                           ; simple_byte            7     4 (average)
 15994                           ;	Chosen strategy is simple_byte
 15995  002146  5043               	movf	??_updateMenu,w,c
 15996  002148  0A09               	xorlw	9	; case 9
 15997  00214A  B4D8               	btfsc	status,2,c
 15998  00214C  D78E               	goto	i2l7646
 15999  00214E  0A03               	xorlw	3	; case 10
 16000  002150  B4D8               	btfsc	status,2,c
 16001  002152  D7AB               	goto	i2l7662
 16002  002154                     i2l254:
 16003                           
 16004                           ;UI.c: 366: }
 16005                           ;UI.c: 367: (INTCONbits.GIE = 1);
 16006  002154  8EF2               	bsf	intcon,7,c	;volatile
 16007  002156  0012               	return		;funcret
 16008  002158                     __end_of_updateMenu:
 16009                           	opt stack 0
 16010                           pclatu	equ	0xFFB
 16011                           pclath	equ	0xFFA
 16012                           tblptru	equ	0xFF8
 16013                           tblptrh	equ	0xFF7
 16014                           tblptrl	equ	0xFF6
 16015                           tablat	equ	0xFF5
 16016                           prodh	equ	0xFF4
 16017                           prodl	equ	0xFF3
 16018                           intcon	equ	0xFF2
 16019                           intcon2	equ	0xFF1
 16020                           intcon3	equ	0xFF0
 16021                           indf0	equ	0xFEF
 16022                           postinc0	equ	0xFEE
 16023                           fsr0h	equ	0xFEA
 16024                           fsr0l	equ	0xFE9
 16025                           wreg	equ	0xFE8
 16026                           postdec1	equ	0xFE5
 16027                           fsr1h	equ	0xFE2
 16028                           fsr1l	equ	0xFE1
 16029                           indf2	equ	0xFDF
 16030                           postinc2	equ	0xFDE
 16031                           postdec2	equ	0xFDD
 16032                           fsr2h	equ	0xFDA
 16033                           fsr2l	equ	0xFD9
 16034                           status	equ	0xFD8
 16035                           
 16036 ;; *************** function i2_change_state_to_menu_start *****************
 16037 ;; Defined at:
 16038 ;;		line 472 in file "UI.c"
 16039 ;; Parameters:    Size  Location     Type
 16040 ;;		None
 16041 ;; Auto vars:     Size  Location     Type
 16042 ;;		None
 16043 ;; Return value:  Size  Location     Type
 16044 ;;                  1    wreg      void 
 16045 ;; Registers used:
 16046 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16047 ;; Tracked objects:
 16048 ;;		On entry : 0/0
 16049 ;;		On exit  : 0/0
 16050 ;;		Unchanged: 0/0
 16051 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16052 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16053 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16054 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16055 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16056 ;;Total ram usage:        0 bytes
 16057 ;; Hardware stack levels used:    1
 16058 ;; Hardware stack levels required when called:    4
 16059 ;; This function calls:
 16060 ;;		i2_lcdInst
 16061 ;;		i2_printRTC
 16062 ;;		i2_printf
 16063 ;; This function is called by:
 16064 ;;		_updateMenu
 16065 ;; This function uses a non-reentrant model
 16066 ;;
 16067                           
 16068                           	psect	text59
 16069  0043B2                     __ptext59:
 16070                           	opt stack 0
 16071  0043B2                     i2_change_state_to_menu_start:
 16072                           	opt stack 18
 16073                           
 16074                           ;UI.c: 473: cur_state = 0;
 16075                           
 16076                           ;incstack = 0
 16077  0043B2  0E00               	movlw	0
 16078  0043B4  0100               	movlb	0	; () banked
 16079  0043B6  6FDF               	movwf	(_cur_state+1)& (0+255),b
 16080  0043B8  0E00               	movlw	0
 16081  0043BA  6FDE               	movwf	_cur_state& (0+255),b
 16082                           
 16083                           ; BSR set to: 0
 16084                           ;UI.c: 475: lcdInst(0b10000000);;
 16085  0043BC  0E80               	movlw	128
 16086  0043BE  ECB3  F022         	call	i2_lcdInst
 16087                           
 16088                           ;UI.c: 476: printRTC();
 16089  0043C2  ECAC  F010         	call	i2_printRTC	;wreg free
 16090                           
 16091                           ;UI.c: 477: lcdInst(0b11000000);;
 16092  0043C6  0EC0               	movlw	192
 16093  0043C8  ECB3  F022         	call	i2_lcdInst
 16094                           
 16095                           ;UI.c: 478: printf("PUSH TO CONTINUE");
 16096  0043CC  0E1F               	movlw	low STR_30
 16097  0043CE  6E0D               	movwf	i2printf@f,c
 16098  0043D0  0EFE               	movlw	high STR_30
 16099  0043D2  6E0E               	movwf	i2printf@f+1,c
 16100  0043D4  ECB8  F00A         	call	i2_printf	;wreg free
 16101  0043D8  0012               	return		;funcret
 16102  0043DA                     __end_ofi2_change_state_to_menu_start:
 16103                           	opt stack 0
 16104                           pclatu	equ	0xFFB
 16105                           pclath	equ	0xFFA
 16106                           tblptru	equ	0xFF8
 16107                           tblptrh	equ	0xFF7
 16108                           tblptrl	equ	0xFF6
 16109                           tablat	equ	0xFF5
 16110                           prodh	equ	0xFF4
 16111                           prodl	equ	0xFF3
 16112                           intcon	equ	0xFF2
 16113                           intcon2	equ	0xFF1
 16114                           intcon3	equ	0xFF0
 16115                           indf0	equ	0xFEF
 16116                           postinc0	equ	0xFEE
 16117                           fsr0h	equ	0xFEA
 16118                           fsr0l	equ	0xFE9
 16119                           wreg	equ	0xFE8
 16120                           postdec1	equ	0xFE5
 16121                           fsr1h	equ	0xFE2
 16122                           fsr1l	equ	0xFE1
 16123                           indf2	equ	0xFDF
 16124                           postinc2	equ	0xFDE
 16125                           postdec2	equ	0xFDD
 16126                           fsr2h	equ	0xFDA
 16127                           fsr2l	equ	0xFD9
 16128                           status	equ	0xFD8
 16129                           
 16130 ;; *************** function i2_printRTC *****************
 16131 ;; Defined at:
 16132 ;;		line 63 in file "RTC.c"
 16133 ;; Parameters:    Size  Location     Type
 16134 ;;		None
 16135 ;; Auto vars:     Size  Location     Type
 16136 ;;  printRTC       14   44[COMRAM] int [7]
 16137 ;;  printRTC        4   60[COMRAM] unsigned char [4]
 16138 ;;  printRTC        2   64[COMRAM] int 
 16139 ;;  printRTC        2   58[COMRAM] int 
 16140 ;; Return value:  Size  Location     Type
 16141 ;;                  1    wreg      void 
 16142 ;; Registers used:
 16143 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16144 ;; Tracked objects:
 16145 ;;		On entry : 0/0
 16146 ;;		On exit  : 0/0
 16147 ;;		Unchanged: 0/0
 16148 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16149 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16150 ;;      Locals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16151 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16152 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16153 ;;Total ram usage:       25 bytes
 16154 ;; Hardware stack levels used:    1
 16155 ;; Hardware stack levels required when called:    3
 16156 ;; This function calls:
 16157 ;;		i2_getRTC
 16158 ;;		i2_lcdInst
 16159 ;;		i2_printf
 16160 ;;		i2_strcpy
 16161 ;; This function is called by:
 16162 ;;		i2_change_state_to_menu_start
 16163 ;; This function uses a non-reentrant model
 16164 ;;
 16165                           
 16166                           	psect	text60
 16167  002158                     __ptext60:
 16168                           	opt stack 0
 16169  002158                     i2_printRTC:
 16170                           	opt stack 18
 16171                           
 16172                           ;RTC.c: 64: getRTC();
 16173                           
 16174                           ;incstack = 0
 16175  002158  EC3A  F01D         	call	i2_getRTC	;wreg free
 16176                           
 16177                           ;RTC.c: 65: char month[] = "MMM";
 16178  00215C  C131  F03D         	movff	printRTC@F3213,i2printRTC@month
 16179  002160  C132  F03E         	movff	printRTC@F3213+1,i2printRTC@month+1
 16180  002164  C133  F03F         	movff	printRTC@F3213+2,i2printRTC@month+2
 16181  002168  C134  F040         	movff	printRTC@F3213+3,i2printRTC@month+3
 16182                           
 16183                           ;RTC.c: 66: int INT_time[7];
 16184                           ;RTC.c: 67: for(int i = 0; i < 7; i++){
 16185  00216C  0E00               	movlw	0
 16186  00216E  6E42               	movwf	i2printRTC@i+1,c
 16187  002170  0E00               	movlw	0
 16188  002172  6E41               	movwf	i2printRTC@i,c
 16189  002174  BE42               	btfsc	i2printRTC@i+1,7,c
 16190  002176  D006               	goto	i2l6006
 16191  002178  5042               	movf	i2printRTC@i+1,w,c
 16192  00217A  E135               	bnz	i2l593
 16193  00217C  0E07               	movlw	7
 16194  00217E  5C41               	subwf	i2printRTC@i,w,c
 16195  002180  B0D8               	btfsc	status,0,c
 16196  002182  D031               	goto	i2l593
 16197  002184                     i2l6006:
 16198                           
 16199                           ;RTC.c: 68: INT_time[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 16200  002184  0E24               	movlw	low _time
 16201  002186  2441               	addwf	i2printRTC@i,w,c
 16202  002188  6ED9               	movwf	fsr2l,c
 16203  00218A  0E01               	movlw	high _time
 16204  00218C  2042               	addwfc	i2printRTC@i+1,w,c
 16205  00218E  6EDA               	movwf	fsr2h,c
 16206  002190  50DF               	movf	indf2,w,c
 16207  002192  6E2A               	movwf	??i2_printRTC& (0+255),c
 16208  002194  3A2A               	swapf	??i2_printRTC,f,c
 16209  002196  0E0F               	movlw	15
 16210  002198  162A               	andwf	??i2_printRTC,f,c
 16211  00219A  0E0F               	movlw	15
 16212  00219C  162A               	andwf	??i2_printRTC,f,c
 16213  00219E  502A               	movf	??i2_printRTC,w,c
 16214  0021A0  0D0A               	mullw	10
 16215  0021A2  0E24               	movlw	low _time
 16216  0021A4  2441               	addwf	i2printRTC@i,w,c
 16217  0021A6  6ED9               	movwf	fsr2l,c
 16218  0021A8  0E01               	movlw	high _time
 16219  0021AA  2042               	addwfc	i2printRTC@i+1,w,c
 16220  0021AC  6EDA               	movwf	fsr2h,c
 16221  0021AE  50DF               	movf	indf2,w,c
 16222  0021B0  0B0F               	andlw	15
 16223  0021B2  6E2B               	movwf	(??i2_printRTC+1)& (0+255),c
 16224  0021B4  6A2C               	clrf	(??i2_printRTC+2)& (0+255),c
 16225  0021B6  50F3               	movf	prodl,w,c
 16226  0021B8  262B               	addwf	??i2_printRTC+1,f,c
 16227  0021BA  50F4               	movf	prodh,w,c
 16228  0021BC  222C               	addwfc	??i2_printRTC+2,f,c
 16229  0021BE  90D8               	bcf	status,0,c
 16230  0021C0  3441               	rlcf	i2printRTC@i,w,c
 16231  0021C2  6ED9               	movwf	fsr2l,c
 16232  0021C4  3442               	rlcf	i2printRTC@i+1,w,c
 16233  0021C6  6EDA               	movwf	fsr2h,c
 16234  0021C8  0E2D               	movlw	low i2printRTC@INT_time
 16235  0021CA  26D9               	addwf	fsr2l,f,c
 16236  0021CC  0E00               	movlw	high i2printRTC@INT_time
 16237  0021CE  22DA               	addwfc	fsr2h,f,c
 16238  0021D0  C02B  FFDE         	movff	??i2_printRTC+1,postinc2
 16239  0021D4  C02C  FFDD         	movff	??i2_printRTC+2,postdec2
 16240  0021D8  4A41               	infsnz	i2printRTC@i,f,c
 16241  0021DA  2A42               	incf	i2printRTC@i+1,f,c
 16242  0021DC  BE42               	btfsc	i2printRTC@i+1,7,c
 16243  0021DE  D7D2               	goto	i2l6006
 16244  0021E0  5042               	movf	i2printRTC@i+1,w,c
 16245  0021E2  E101               	bnz	i2u453_40
 16246  0021E4  D7CB               	goto	L10
 16247  0021E6                     i2u453_40:
 16248  0021E6                     i2l593:
 16249                           
 16250                           ;RTC.c: 69: }
 16251                           ;RTC.c: 70: int RTC_month = INT_time[5];
 16252  0021E6  C037  F03B         	movff	i2printRTC@INT_time+10,i2printRTC@RTC_month
 16253  0021EA  C038  F03C         	movff	i2printRTC@INT_time+11,i2printRTC@RTC_month+1
 16254                           
 16255                           ;RTC.c: 71: switch(RTC_month){
 16256  0021EE  D084               	goto	i2l6038
 16257  0021F0                     i2l6012:
 16258                           
 16259                           ;RTC.c: 73: strcpy(month, "JAN");
 16260  0021F0  0E3D               	movlw	low i2printRTC@month
 16261  0021F2  6E01               	movwf	i2strcpy@to,c
 16262  0021F4  0E00               	movlw	high i2printRTC@month
 16263  0021F6  6E02               	movwf	i2strcpy@to+1,c
 16264  0021F8  0EDA               	movlw	low STR_8
 16265  0021FA  6E03               	movwf	i2strcpy@from,c
 16266  0021FC  0EFF               	movlw	high STR_8
 16267  0021FE  6E04               	movwf	i2strcpy@from+1,c
 16268  002200  EC65  F020         	call	i2_strcpy	;wreg free
 16269                           
 16270                           ;RTC.c: 74: break;
 16271  002204  D0A6               	goto	i2l6040
 16272  002206                     i2l6014:
 16273                           
 16274                           ;RTC.c: 76: strcpy(month, "FEB");
 16275  002206  0E3D               	movlw	low i2printRTC@month
 16276  002208  6E01               	movwf	i2strcpy@to,c
 16277  00220A  0E00               	movlw	high i2printRTC@month
 16278  00220C  6E02               	movwf	i2strcpy@to+1,c
 16279  00220E  0ECA               	movlw	low STR_9
 16280  002210  6E03               	movwf	i2strcpy@from,c
 16281  002212  0EFF               	movlw	high STR_9
 16282  002214  6E04               	movwf	i2strcpy@from+1,c
 16283  002216  EC65  F020         	call	i2_strcpy	;wreg free
 16284                           
 16285                           ;RTC.c: 77: break;
 16286  00221A  D09B               	goto	i2l6040
 16287  00221C                     i2l6016:
 16288                           
 16289                           ;RTC.c: 79: strcpy(month, "MAR");
 16290  00221C  0E3D               	movlw	low i2printRTC@month
 16291  00221E  6E01               	movwf	i2strcpy@to,c
 16292  002220  0E00               	movlw	high i2printRTC@month
 16293  002222  6E02               	movwf	i2strcpy@to+1,c
 16294  002224  0EE6               	movlw	low STR_10
 16295  002226  6E03               	movwf	i2strcpy@from,c
 16296  002228  0EFF               	movlw	high STR_10
 16297  00222A  6E04               	movwf	i2strcpy@from+1,c
 16298  00222C  EC65  F020         	call	i2_strcpy	;wreg free
 16299                           
 16300                           ;RTC.c: 80: break;
 16301  002230  D090               	goto	i2l6040
 16302  002232                     i2l6018:
 16303                           
 16304                           ;RTC.c: 82: strcpy(month, "APR");
 16305  002232  0E3D               	movlw	low i2printRTC@month
 16306  002234  6E01               	movwf	i2strcpy@to,c
 16307  002236  0E00               	movlw	high i2printRTC@month
 16308  002238  6E02               	movwf	i2strcpy@to+1,c
 16309  00223A  0EEA               	movlw	low STR_11
 16310  00223C  6E03               	movwf	i2strcpy@from,c
 16311  00223E  0EFF               	movlw	high STR_11
 16312  002240  6E04               	movwf	i2strcpy@from+1,c
 16313  002242  EC65  F020         	call	i2_strcpy	;wreg free
 16314                           
 16315                           ;RTC.c: 83: break;
 16316  002246  D085               	goto	i2l6040
 16317  002248                     i2l6020:
 16318                           
 16319                           ;RTC.c: 85: strcpy(month, "MAY");
 16320  002248  0E3D               	movlw	low i2printRTC@month
 16321  00224A  6E01               	movwf	i2strcpy@to,c
 16322  00224C  0E00               	movlw	high i2printRTC@month
 16323  00224E  6E02               	movwf	i2strcpy@to+1,c
 16324  002250  0EFA               	movlw	low STR_12
 16325  002252  6E03               	movwf	i2strcpy@from,c
 16326  002254  0EFF               	movlw	high STR_12
 16327  002256  6E04               	movwf	i2strcpy@from+1,c
 16328  002258  EC65  F020         	call	i2_strcpy	;wreg free
 16329                           
 16330                           ;RTC.c: 86: break;
 16331  00225C  D07A               	goto	i2l6040
 16332  00225E                     i2l6022:
 16333                           
 16334                           ;RTC.c: 88: strcpy(month, "JUN");
 16335  00225E  0E3D               	movlw	low i2printRTC@month
 16336  002260  6E01               	movwf	i2strcpy@to,c
 16337  002262  0E00               	movlw	high i2printRTC@month
 16338  002264  6E02               	movwf	i2strcpy@to+1,c
 16339  002266  0EDE               	movlw	low STR_13
 16340  002268  6E03               	movwf	i2strcpy@from,c
 16341  00226A  0EFF               	movlw	high STR_13
 16342  00226C  6E04               	movwf	i2strcpy@from+1,c
 16343  00226E  EC65  F020         	call	i2_strcpy	;wreg free
 16344                           
 16345                           ;RTC.c: 89: break;
 16346  002272  D06F               	goto	i2l6040
 16347  002274                     i2l6024:
 16348                           
 16349                           ;RTC.c: 91: strcpy(month, "JUL");
 16350  002274  0E3D               	movlw	low i2printRTC@month
 16351  002276  6E01               	movwf	i2strcpy@to,c
 16352  002278  0E00               	movlw	high i2printRTC@month
 16353  00227A  6E02               	movwf	i2strcpy@to+1,c
 16354  00227C  0ED6               	movlw	low STR_14
 16355  00227E  6E03               	movwf	i2strcpy@from,c
 16356  002280  0EFF               	movlw	high STR_14
 16357  002282  6E04               	movwf	i2strcpy@from+1,c
 16358  002284  EC65  F020         	call	i2_strcpy	;wreg free
 16359                           
 16360                           ;RTC.c: 92: break;
 16361  002288  D064               	goto	i2l6040
 16362  00228A                     i2l6026:
 16363                           
 16364                           ;RTC.c: 94: strcpy(month, "AUG");
 16365  00228A  0E3D               	movlw	low i2printRTC@month
 16366  00228C  6E01               	movwf	i2strcpy@to,c
 16367  00228E  0E00               	movlw	high i2printRTC@month
 16368  002290  6E02               	movwf	i2strcpy@to+1,c
 16369  002292  0ED2               	movlw	low STR_15
 16370  002294  6E03               	movwf	i2strcpy@from,c
 16371  002296  0EFF               	movlw	high STR_15
 16372  002298  6E04               	movwf	i2strcpy@from+1,c
 16373  00229A  EC65  F020         	call	i2_strcpy	;wreg free
 16374                           
 16375                           ;RTC.c: 95: break;
 16376  00229E  D059               	goto	i2l6040
 16377  0022A0                     i2l6028:
 16378                           
 16379                           ;RTC.c: 97: strcpy(month, "SEP");
 16380  0022A0  0E3D               	movlw	low i2printRTC@month
 16381  0022A2  6E01               	movwf	i2strcpy@to,c
 16382  0022A4  0E00               	movlw	high i2printRTC@month
 16383  0022A6  6E02               	movwf	i2strcpy@to+1,c
 16384  0022A8  0EE2               	movlw	low STR_16
 16385  0022AA  6E03               	movwf	i2strcpy@from,c
 16386  0022AC  0EFF               	movlw	high STR_16
 16387  0022AE  6E04               	movwf	i2strcpy@from+1,c
 16388  0022B0  EC65  F020         	call	i2_strcpy	;wreg free
 16389                           
 16390                           ;RTC.c: 98: break;
 16391  0022B4  D04E               	goto	i2l6040
 16392  0022B6                     i2l6030:
 16393                           
 16394                           ;RTC.c: 100: strcpy(month, "OCT");
 16395  0022B6  0E3D               	movlw	low i2printRTC@month
 16396  0022B8  6E01               	movwf	i2strcpy@to,c
 16397  0022BA  0E00               	movlw	high i2printRTC@month
 16398  0022BC  6E02               	movwf	i2strcpy@to+1,c
 16399  0022BE  0EF2               	movlw	low STR_17
 16400  0022C0  6E03               	movwf	i2strcpy@from,c
 16401  0022C2  0EFF               	movlw	high STR_17
 16402  0022C4  6E04               	movwf	i2strcpy@from+1,c
 16403  0022C6  EC65  F020         	call	i2_strcpy	;wreg free
 16404                           
 16405                           ;RTC.c: 101: break;
 16406  0022CA  D043               	goto	i2l6040
 16407  0022CC                     i2l6032:
 16408                           
 16409                           ;RTC.c: 103: strcpy(month, "NOV");
 16410  0022CC  0E3D               	movlw	low i2printRTC@month
 16411  0022CE  6E01               	movwf	i2strcpy@to,c
 16412  0022D0  0E00               	movlw	high i2printRTC@month
 16413  0022D2  6E02               	movwf	i2strcpy@to+1,c
 16414  0022D4  0EF6               	movlw	low STR_18
 16415  0022D6  6E03               	movwf	i2strcpy@from,c
 16416  0022D8  0EFF               	movlw	high STR_18
 16417  0022DA  6E04               	movwf	i2strcpy@from+1,c
 16418  0022DC  EC65  F020         	call	i2_strcpy	;wreg free
 16419                           
 16420                           ;RTC.c: 104: break;
 16421  0022E0  D038               	goto	i2l6040
 16422  0022E2                     i2l6034:
 16423                           
 16424                           ;RTC.c: 106: strcpy(month, "DEC");
 16425  0022E2  0E3D               	movlw	low i2printRTC@month
 16426  0022E4  6E01               	movwf	i2strcpy@to,c
 16427  0022E6  0E00               	movlw	high i2printRTC@month
 16428  0022E8  6E02               	movwf	i2strcpy@to+1,c
 16429  0022EA  0ECE               	movlw	low STR_19
 16430  0022EC  6E03               	movwf	i2strcpy@from,c
 16431  0022EE  0EFF               	movlw	high STR_19
 16432  0022F0  6E04               	movwf	i2strcpy@from+1,c
 16433  0022F2  EC65  F020         	call	i2_strcpy	;wreg free
 16434                           
 16435                           ;RTC.c: 108: }
 16436                           
 16437                           ;RTC.c: 107: break;
 16438  0022F6  D02D               	goto	i2l6040
 16439  0022F8                     i2l6038:
 16440  0022F8  C03B  F02A         	movff	i2printRTC@RTC_month,??i2_printRTC
 16441  0022FC  C03C  F02B         	movff	i2printRTC@RTC_month+1,??i2_printRTC+1
 16442                           
 16443                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 16444                           ; Switch size 1, requested type "space"
 16445                           ; Number of cases is 1, Range of values is 0 to 0
 16446                           ; switch strategies available:
 16447                           ; Name         Instructions Cycles
 16448                           ; simple_byte            4     3 (average)
 16449                           ;	Chosen strategy is simple_byte
 16450  002300  502B               	movf	??i2_printRTC+1,w,c
 16451  002302  0A00               	xorlw	0	; case 0
 16452  002304  A4D8               	btfss	status,2,c
 16453  002306  D025               	goto	i2l6040
 16454                           
 16455                           ; Switch size 1, requested type "space"
 16456                           ; Number of cases is 12, Range of values is 1 to 12
 16457                           ; switch strategies available:
 16458                           ; Name         Instructions Cycles
 16459                           ; simple_byte           37    19 (average)
 16460                           ;	Chosen strategy is simple_byte
 16461  002308  502A               	movf	??i2_printRTC,w,c
 16462  00230A  0A01               	xorlw	1	; case 1
 16463  00230C  B4D8               	btfsc	status,2,c
 16464  00230E  D770               	goto	i2l6012
 16465  002310  0A03               	xorlw	3	; case 2
 16466  002312  B4D8               	btfsc	status,2,c
 16467  002314  D778               	goto	i2l6014
 16468  002316  0A01               	xorlw	1	; case 3
 16469  002318  B4D8               	btfsc	status,2,c
 16470  00231A  D780               	goto	i2l6016
 16471  00231C  0A07               	xorlw	7	; case 4
 16472  00231E  B4D8               	btfsc	status,2,c
 16473  002320  D788               	goto	i2l6018
 16474  002322  0A01               	xorlw	1	; case 5
 16475  002324  B4D8               	btfsc	status,2,c
 16476  002326  D790               	goto	i2l6020
 16477  002328  0A03               	xorlw	3	; case 6
 16478  00232A  B4D8               	btfsc	status,2,c
 16479  00232C  D798               	goto	i2l6022
 16480  00232E  0A01               	xorlw	1	; case 7
 16481  002330  B4D8               	btfsc	status,2,c
 16482  002332  D7A0               	goto	i2l6024
 16483  002334  0A0F               	xorlw	15	; case 8
 16484  002336  B4D8               	btfsc	status,2,c
 16485  002338  D7A8               	goto	i2l6026
 16486  00233A  0A01               	xorlw	1	; case 9
 16487  00233C  B4D8               	btfsc	status,2,c
 16488  00233E  D7B0               	goto	i2l6028
 16489  002340  0A03               	xorlw	3	; case 10
 16490  002342  B4D8               	btfsc	status,2,c
 16491  002344  D7B8               	goto	i2l6030
 16492  002346  0A01               	xorlw	1	; case 11
 16493  002348  B4D8               	btfsc	status,2,c
 16494  00234A  D7C0               	goto	i2l6032
 16495  00234C  0A07               	xorlw	7	; case 12
 16496  00234E  B4D8               	btfsc	status,2,c
 16497  002350  D7C8               	goto	i2l6034
 16498  002352                     i2l6040:
 16499                           
 16500                           ;RTC.c: 109: lcdInst(0b10000000);;
 16501  002352  0E80               	movlw	128
 16502  002354  ECB3  F022         	call	i2_lcdInst
 16503                           
 16504                           ;RTC.c: 110: printf("%02d%s | %02d:%02d:%02d", INT_time[4],month,INT_time[2],INT_time[1]
      +                          ,INT_time[0]);
 16505  002358  0E42               	movlw	low STR_21
 16506  00235A  6E0D               	movwf	i2printf@f,c
 16507  00235C  0EFB               	movlw	high STR_21
 16508  00235E  6E0E               	movwf	i2printf@f+1,c
 16509  002360  C035  F00F         	movff	i2printRTC@INT_time+8,?i2_printf+2
 16510  002364  C036  F010         	movff	i2printRTC@INT_time+9,?i2_printf+3
 16511  002368  0E3D               	movlw	low i2printRTC@month
 16512  00236A  6E11               	movwf	?i2_printf+4,c
 16513  00236C  0E00               	movlw	high i2printRTC@month
 16514  00236E  6E12               	movwf	?i2_printf+5,c
 16515  002370  C031  F013         	movff	i2printRTC@INT_time+4,?i2_printf+6
 16516  002374  C032  F014         	movff	i2printRTC@INT_time+5,?i2_printf+7
 16517  002378  C02F  F015         	movff	i2printRTC@INT_time+2,?i2_printf+8
 16518  00237C  C030  F016         	movff	i2printRTC@INT_time+3,?i2_printf+9
 16519  002380  C02D  F017         	movff	i2printRTC@INT_time,?i2_printf+10
 16520  002384  C02E  F018         	movff	i2printRTC@INT_time+1,?i2_printf+11
 16521  002388  ECB8  F00A         	call	i2_printf	;wreg free
 16522  00238C  0012               	return		;funcret
 16523  00238E                     __end_ofi2_printRTC:
 16524                           	opt stack 0
 16525                           pclatu	equ	0xFFB
 16526                           pclath	equ	0xFFA
 16527                           tblptru	equ	0xFF8
 16528                           tblptrh	equ	0xFF7
 16529                           tblptrl	equ	0xFF6
 16530                           tablat	equ	0xFF5
 16531                           prodh	equ	0xFF4
 16532                           prodl	equ	0xFF3
 16533                           intcon	equ	0xFF2
 16534                           intcon2	equ	0xFF1
 16535                           intcon3	equ	0xFF0
 16536                           indf0	equ	0xFEF
 16537                           postinc0	equ	0xFEE
 16538                           fsr0h	equ	0xFEA
 16539                           fsr0l	equ	0xFE9
 16540                           wreg	equ	0xFE8
 16541                           postdec1	equ	0xFE5
 16542                           fsr1h	equ	0xFE2
 16543                           fsr1l	equ	0xFE1
 16544                           indf2	equ	0xFDF
 16545                           postinc2	equ	0xFDE
 16546                           postdec2	equ	0xFDD
 16547                           fsr2h	equ	0xFDA
 16548                           fsr2l	equ	0xFD9
 16549                           status	equ	0xFD8
 16550                           
 16551 ;; *************** function i2_strcpy *****************
 16552 ;; Defined at:
 16553 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
 16554 ;; Parameters:    Size  Location     Type
 16555 ;;  to              2    0[COMRAM] PTR unsigned char 
 16556 ;;		 -> printRTC@month(4), UI@month(4), 
 16557 ;;  from            2    2[COMRAM] PTR const unsigned char 
 16558 ;;		 -> STR_62(4), STR_61(4), STR_60(4), STR_59(4), 
 16559 ;;		 -> STR_58(4), STR_57(4), STR_56(4), STR_55(4), 
 16560 ;;		 -> STR_54(4), STR_53(4), STR_52(4), STR_51(4), 
 16561 ;;		 -> STR_20(4), STR_19(4), STR_18(4), STR_17(4), 
 16562 ;;		 -> STR_16(4), STR_15(4), STR_14(4), STR_13(4), 
 16563 ;;		 -> STR_12(4), STR_11(4), STR_10(4), STR_9(4), 
 16564 ;;		 -> STR_8(4), 
 16565 ;; Auto vars:     Size  Location     Type
 16566 ;;  strcpy          2    4[COMRAM] PTR unsigned char 
 16567 ;;		 -> printRTC@month(4), UI@month(4), 
 16568 ;; Return value:  Size  Location     Type
 16569 ;;                  2    0[COMRAM] PTR unsigned char 
 16570 ;; Registers used:
 16571 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 16572 ;; Tracked objects:
 16573 ;;		On entry : 0/0
 16574 ;;		On exit  : 0/0
 16575 ;;		Unchanged: 0/0
 16576 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16577 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16578 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16579 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16580 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16581 ;;Total ram usage:        6 bytes
 16582 ;; Hardware stack levels used:    1
 16583 ;; This function calls:
 16584 ;;		Nothing
 16585 ;; This function is called by:
 16586 ;;		i2_printRTC
 16587 ;; This function uses a non-reentrant model
 16588 ;;
 16589                           
 16590                           	psect	text61
 16591  0040CA                     __ptext61:
 16592                           	opt stack 0
 16593  0040CA                     i2_strcpy:
 16594                           	opt stack 20
 16595                           
 16596                           ;incstack = 0
 16597  0040CA  C001  F005         	movff	i2strcpy@to,i2strcpy@cp
 16598  0040CE  C002  F006         	movff	i2strcpy@to+1,i2strcpy@cp+1
 16599  0040D2  D004               	goto	i2l5680
 16600  0040D4                     i2l5678:
 16601  0040D4  4A05               	infsnz	i2strcpy@cp,f,c
 16602  0040D6  2A06               	incf	i2strcpy@cp+1,f,c
 16603  0040D8  4A03               	infsnz	i2strcpy@from,f,c
 16604  0040DA  2A04               	incf	i2strcpy@from+1,f,c
 16605  0040DC                     i2l5680:
 16606  0040DC  C003  FFF6         	movff	i2strcpy@from,tblptrl
 16607  0040E0  C004  FFF7         	movff	i2strcpy@from+1,tblptrh
 16608  0040E4                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 16609  0040E4  6AF8               	clrf	tblptru,c
 16610  0040E6                     	endif
 16611  0040E6                     	if	0	;tblptru may be non-zero
 16612  0040E6                     	endif
 16613  0040E6  C005  FFD9         	movff	i2strcpy@cp,fsr2l
 16614  0040EA  C006  FFDA         	movff	i2strcpy@cp+1,fsr2h
 16615  0040EE  0008               	tblrd		*
 16616  0040F0  CFF5 FFDF          	movff	tablat,indf2
 16617  0040F4  50DF               	movf	indf2,w,c
 16618  0040F6  B4D8               	btfsc	status,2,c
 16619  0040F8  0012               	return	
 16620  0040FA  D7EC               	goto	i2l5678
 16621  0040FC                     __end_ofi2_strcpy:
 16622                           	opt stack 0
 16623                           pclatu	equ	0xFFB
 16624                           pclath	equ	0xFFA
 16625                           tblptru	equ	0xFF8
 16626                           tblptrh	equ	0xFF7
 16627                           tblptrl	equ	0xFF6
 16628                           tablat	equ	0xFF5
 16629                           prodh	equ	0xFF4
 16630                           prodl	equ	0xFF3
 16631                           intcon	equ	0xFF2
 16632                           intcon2	equ	0xFF1
 16633                           intcon3	equ	0xFF0
 16634                           indf0	equ	0xFEF
 16635                           postinc0	equ	0xFEE
 16636                           fsr0h	equ	0xFEA
 16637                           fsr0l	equ	0xFE9
 16638                           wreg	equ	0xFE8
 16639                           postdec1	equ	0xFE5
 16640                           fsr1h	equ	0xFE2
 16641                           fsr1l	equ	0xFE1
 16642                           indf2	equ	0xFDF
 16643                           postinc2	equ	0xFDE
 16644                           postdec2	equ	0xFDD
 16645                           fsr2h	equ	0xFDA
 16646                           fsr2l	equ	0xFD9
 16647                           status	equ	0xFD8
 16648                           
 16649 ;; *************** function _inputHandler *****************
 16650 ;; Defined at:
 16651 ;;		line 370 in file "UI.c"
 16652 ;; Parameters:    Size  Location     Type
 16653 ;;		None
 16654 ;; Auto vars:     Size  Location     Type
 16655 ;;		None
 16656 ;; Return value:  Size  Location     Type
 16657 ;;                  2   41[COMRAM] int 
 16658 ;; Registers used:
 16659 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16660 ;; Tracked objects:
 16661 ;;		On entry : 0/0
 16662 ;;		On exit  : 0/0
 16663 ;;		Unchanged: 0/0
 16664 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16665 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16666 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16667 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16668 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16669 ;;Total ram usage:        4 bytes
 16670 ;; Hardware stack levels used:    1
 16671 ;; Hardware stack levels required when called:    4
 16672 ;; This function calls:
 16673 ;;		_change_state_to_logs_11
 16674 ;;		_change_state_to_logs_12
 16675 ;;		_change_state_to_logs_22
 16676 ;;		_change_state_to_logs_23
 16677 ;;		_change_state_to_logs_33
 16678 ;;		_change_state_to_logs_34
 16679 ;;		_change_state_to_menu_11
 16680 ;;		_change_state_to_menu_23
 16681 ;;		i2_change_state_to_menu_12
 16682 ;;		i2_change_state_to_menu_22
 16683 ;; This function is called by:
 16684 ;;		_updateMenu
 16685 ;; This function uses a non-reentrant model
 16686 ;;
 16687                           
 16688                           	psect	text62
 16689  002580                     __ptext62:
 16690                           	opt stack 0
 16691  002580                     _inputHandler:
 16692                           	opt stack 18
 16693                           
 16694                           ;UI.c: 375: if(firstboot){
 16695                           
 16696                           ;incstack = 0
 16697  002580  5075               	movf	_firstboot,w,c
 16698  002582  1076               	iorwf	_firstboot+1,w,c
 16699  002584  B4D8               	btfsc	status,2,c
 16700  002586  D00B               	goto	i2l6108
 16701                           
 16702                           ;UI.c: 376: change_state_to_menu_11();
 16703  002588  ECC6  F020         	call	_change_state_to_menu_11	;wreg free
 16704                           
 16705                           ;UI.c: 377: firstboot = 0;
 16706  00258C  0E00               	movlw	0
 16707  00258E  6E76               	movwf	_firstboot+1,c
 16708  002590  0E00               	movlw	0
 16709  002592  6E75               	movwf	_firstboot,c
 16710                           
 16711                           ;UI.c: 378: return 0;
 16712  002594  0E00               	movlw	0
 16713  002596  6E2B               	movwf	?_inputHandler+1,c
 16714  002598  0E00               	movlw	0
 16715  00259A  6E2A               	movwf	?_inputHandler,c
 16716  00259C  0012               	return	
 16717  00259E                     i2l6108:
 16718                           
 16719                           ;UI.c: 379: }
 16720                           ;UI.c: 380: if (logstate){
 16721  00259E  0100               	movlb	0	; () banked
 16722  0025A0  51F6               	movf	_logstate& (0+255),w,b
 16723  0025A2  0100               	movlb	0	; () banked
 16724  0025A4  11F7               	iorwf	(_logstate+1)& (0+255),w,b
 16725  0025A6  B4D8               	btfsc	status,2,c
 16726  0025A8  D0C7               	goto	i2l6226
 16727                           
 16728                           ; BSR set to: 0
 16729                           ;UI.c: 381: if(input == 'C' && PORTBbits.RB1 == 1){
 16730  0025AA  0E43               	movlw	67
 16731  0025AC  187D               	xorwf	_input,w,c	;volatile
 16732  0025AE  A4D8               	btfss	status,2,c
 16733  0025B0  D012               	goto	i2l6126
 16734                           
 16735                           ; BSR set to: 0
 16736  0025B2  B281               	btfsc	3969,1,c	;volatile
 16737  0025B4  D009               	goto	i2l6118
 16738  0025B6  D00F               	goto	i2l6126
 16739  0025B8                     i2l6116:
 16740                           
 16741                           ;UI.c: 384: _delay((unsigned long)((10)*(32000000/4000.0)));
 16742  0025B8  0E68               	movlw	104
 16743  0025BA  6E2C               	movwf	??_inputHandler& (0+255),c
 16744  0025BC  0EE4               	movlw	228
 16745  0025BE                     i2u788_47:
 16746  0025BE  2EE8               	decfsz	wreg,f,c
 16747  0025C0  D7FE               	bra	i2u788_47
 16748  0025C2  2E2C               	decfsz	??_inputHandler& (0+255),f,c
 16749  0025C4  D7FC               	bra	i2u788_47
 16750  0025C6  D000               	nop2	
 16751  0025C8                     i2l6118:
 16752  0025C8  B281               	btfsc	3969,1,c	;volatile
 16753  0025CA  D7F6               	goto	i2l6116
 16754  0025CC                     i2l6120:
 16755                           
 16756                           ;UI.c: 385: }
 16757                           ;UI.c: 386: return 0;
 16758  0025CC  0E00               	movlw	0
 16759  0025CE  6E2B               	movwf	?_inputHandler+1,c
 16760  0025D0  0E00               	movlw	0
 16761  0025D2  6E2A               	movwf	?_inputHandler,c
 16762  0025D4  0012               	return	
 16763  0025D6                     i2l6126:
 16764                           
 16765                           ;UI.c: 388: else if (input == 'D'){
 16766  0025D6  0E44               	movlw	68
 16767  0025D8  187D               	xorwf	_input,w,c	;volatile
 16768  0025DA  A4D8               	btfss	status,2,c
 16769  0025DC  D7F7               	goto	i2l6120
 16770                           
 16771                           ;UI.c: 390: logstate = 0;
 16772  0025DE  0E00               	movlw	0
 16773  0025E0  0100               	movlb	0	; () banked
 16774  0025E2  6FF7               	movwf	(_logstate+1)& (0+255),b
 16775  0025E4  0E00               	movlw	0
 16776  0025E6  6FF6               	movwf	_logstate& (0+255),b
 16777                           
 16778                           ;UI.c: 391: switch(cur_state){
 16779  0025E8  D012               	goto	i2l6144
 16780  0025EA                     i2l6130:
 16781                           
 16782                           ;UI.c: 393: change_state_to_logs_11();
 16783  0025EA  EC3E  F021         	call	_change_state_to_logs_11	;wreg free
 16784                           
 16785                           ;UI.c: 394: break;
 16786  0025EE  D7EE               	goto	i2l6120
 16787  0025F0                     i2l6132:
 16788                           
 16789                           ;UI.c: 396: change_state_to_logs_12();
 16790  0025F0  EC26  F021         	call	_change_state_to_logs_12	;wreg free
 16791                           
 16792                           ;UI.c: 397: break;
 16793  0025F4  D7EB               	goto	i2l6120
 16794  0025F6                     i2l6134:
 16795                           
 16796                           ;UI.c: 399: change_state_to_logs_22();
 16797  0025F6  EC0E  F021         	call	_change_state_to_logs_22	;wreg free
 16798                           
 16799                           ;UI.c: 400: break;
 16800  0025FA  D7E8               	goto	i2l6120
 16801  0025FC                     i2l6136:
 16802                           
 16803                           ;UI.c: 402: change_state_to_logs_23();
 16804  0025FC  EC6D  F021         	call	_change_state_to_logs_23	;wreg free
 16805                           
 16806                           ;UI.c: 403: break;
 16807  002600  D7E5               	goto	i2l6120
 16808  002602                     i2l6138:
 16809                           
 16810                           ;UI.c: 405: change_state_to_logs_33();
 16811  002602  ECF6  F020         	call	_change_state_to_logs_33	;wreg free
 16812                           
 16813                           ;UI.c: 406: break;
 16814  002606  D7E2               	goto	i2l6120
 16815  002608                     i2l6140:
 16816                           
 16817                           ;UI.c: 408: change_state_to_logs_34();
 16818  002608  ECDE  F020         	call	_change_state_to_logs_34	;wreg free
 16819                           
 16820                           ;UI.c: 410: }
 16821                           
 16822                           ;UI.c: 409: break;
 16823  00260C  D7DF               	goto	i2l6120
 16824  00260E                     i2l6144:
 16825  00260E  C0DE  F02C         	movff	_cur_state,??_inputHandler
 16826  002612  C0DF  F02D         	movff	_cur_state+1,??_inputHandler+1
 16827                           
 16828                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
 16829                           ; Switch size 1, requested type "space"
 16830                           ; Number of cases is 2, Range of values is 3 to 4
 16831                           ; switch strategies available:
 16832                           ; Name         Instructions Cycles
 16833                           ; simple_byte            7     4 (average)
 16834                           ;	Chosen strategy is simple_byte
 16835  002616  502D               	movf	??_inputHandler+1,w,c
 16836  002618  0A03               	xorlw	3	; case 3
 16837  00261A  B4D8               	btfsc	status,2,c
 16838  00261C  D004               	goto	i2l8272
 16839  00261E  0A07               	xorlw	7	; case 4
 16840  002620  B4D8               	btfsc	status,2,c
 16841  002622  D00F               	goto	i2l8274
 16842  002624  D7D3               	goto	i2l6120
 16843  002626                     i2l8272:
 16844                           
 16845                           ; Switch size 1, requested type "space"
 16846                           ; Number of cases is 4, Range of values is 243 to 255
 16847                           ; switch strategies available:
 16848                           ; Name         Instructions Cycles
 16849                           ; simple_byte           13     7 (average)
 16850                           ;	Chosen strategy is simple_byte
 16851  002626  502C               	movf	??_inputHandler,w,c
 16852  002628  0AF3               	xorlw	243	; case 243
 16853  00262A  B4D8               	btfsc	status,2,c
 16854  00262C  D7DE               	goto	i2l6130
 16855  00262E  0A07               	xorlw	7	; case 244
 16856  002630  B4D8               	btfsc	status,2,c
 16857  002632  D7DE               	goto	i2l6132
 16858  002634  0A0A               	xorlw	10	; case 254
 16859  002636  B4D8               	btfsc	status,2,c
 16860  002638  D7DE               	goto	i2l6134
 16861  00263A  0A01               	xorlw	1	; case 255
 16862  00263C  B4D8               	btfsc	status,2,c
 16863  00263E  D7DE               	goto	i2l6136
 16864  002640  D7C5               	goto	i2l6120
 16865  002642                     i2l8274:
 16866                           
 16867                           ; Switch size 1, requested type "space"
 16868                           ; Number of cases is 2, Range of values is 9 to 10
 16869                           ; switch strategies available:
 16870                           ; Name         Instructions Cycles
 16871                           ; simple_byte            7     4 (average)
 16872                           ;	Chosen strategy is simple_byte
 16873  002642  502C               	movf	??_inputHandler,w,c
 16874  002644  0A09               	xorlw	9	; case 9
 16875  002646  B4D8               	btfsc	status,2,c
 16876  002648  D7DC               	goto	i2l6138
 16877  00264A  0A03               	xorlw	3	; case 10
 16878  00264C  B4D8               	btfsc	status,2,c
 16879  00264E  D7DC               	goto	i2l6140
 16880  002650  D7BD               	goto	i2l6120
 16881  002652                     i2l6156:
 16882                           
 16883                           ;UI.c: 420: if(cur_state == 11){
 16884  002652  0E0B               	movlw	11
 16885  002654  0100               	movlb	0	; () banked
 16886  002656  19DE               	xorwf	_cur_state& (0+255),w,b
 16887  002658  0100               	movlb	0	; () banked
 16888  00265A  11DF               	iorwf	(_cur_state+1)& (0+255),w,b
 16889  00265C  A4D8               	btfss	status,2,c
 16890  00265E  D005               	goto	i2l6164
 16891                           
 16892                           ; BSR set to: 0
 16893                           ;UI.c: 421: return 0;
 16894  002660  0E00               	movlw	0
 16895  002662  6E2B               	movwf	?_inputHandler+1,c
 16896  002664  0E00               	movlw	0
 16897  002666  6E2A               	movwf	?_inputHandler,c
 16898                           
 16899                           ; BSR set to: 0
 16900  002668  0012               	return	
 16901  00266A                     i2l6164:
 16902                           
 16903                           ; BSR set to: 0
 16904                           ;UI.c: 423: else{
 16905                           ;UI.c: 424: change_state_to_menu_11();
 16906  00266A  ECC6  F020         	call	_change_state_to_menu_11	;wreg free
 16907                           
 16908                           ;UI.c: 425: }
 16909                           ;UI.c: 426: return 0;
 16910  00266E  0E00               	movlw	0
 16911  002670  6E2B               	movwf	?_inputHandler+1,c
 16912  002672  0E00               	movlw	0
 16913  002674  6E2A               	movwf	?_inputHandler,c
 16914  002676  0012               	return	
 16915  002678                     i2l6170:
 16916                           
 16917                           ;UI.c: 428: if(cur_state == 22 | cur_state == 12){
 16918  002678  0E16               	movlw	22
 16919  00267A  0100               	movlb	0	; () banked
 16920  00267C  19DE               	xorwf	_cur_state& (0+255),w,b
 16921  00267E  0100               	movlb	0	; () banked
 16922  002680  11DF               	iorwf	(_cur_state+1)& (0+255),w,b
 16923  002682  B4D8               	btfsc	status,2,c
 16924  002684  D007               	goto	i2l6174
 16925                           
 16926                           ; BSR set to: 0
 16927  002686  0E0C               	movlw	12
 16928  002688  0100               	movlb	0	; () banked
 16929  00268A  19DE               	xorwf	_cur_state& (0+255),w,b
 16930  00268C  0100               	movlb	0	; () banked
 16931  00268E  11DF               	iorwf	(_cur_state+1)& (0+255),w,b
 16932  002690  A4D8               	btfss	status,2,c
 16933  002692  D005               	goto	i2l6180
 16934  002694                     i2l6174:
 16935                           
 16936                           ; BSR set to: 0
 16937                           ;UI.c: 429: return 0;
 16938  002694  0E00               	movlw	0
 16939  002696  6E2B               	movwf	?_inputHandler+1,c
 16940  002698  0E00               	movlw	0
 16941  00269A  6E2A               	movwf	?_inputHandler,c
 16942                           
 16943                           ; BSR set to: 0
 16944  00269C  0012               	return	
 16945  00269E                     i2l6180:
 16946                           
 16947                           ; BSR set to: 0
 16948                           ;UI.c: 431: else if(cur_state == 23){
 16949  00269E  0E17               	movlw	23
 16950  0026A0  0100               	movlb	0	; () banked
 16951  0026A2  19DE               	xorwf	_cur_state& (0+255),w,b
 16952  0026A4  0100               	movlb	0	; () banked
 16953  0026A6  11DF               	iorwf	(_cur_state+1)& (0+255),w,b
 16954  0026A8  A4D8               	btfss	status,2,c
 16955  0026AA  D003               	goto	i2l6184
 16956                           
 16957                           ; BSR set to: 0
 16958                           ;UI.c: 432: change_state_to_menu_22();
 16959  0026AC  EC7E  F020         	call	i2_change_state_to_menu_22	;wreg free
 16960                           
 16961                           ;UI.c: 433: }
 16962  0026B0  D002               	goto	i2l6186
 16963  0026B2                     i2l6184:
 16964                           
 16965                           ;UI.c: 434: else{
 16966                           ;UI.c: 435: change_state_to_menu_12();
 16967  0026B2  EC96  F020         	call	i2_change_state_to_menu_12	;wreg free
 16968  0026B6                     i2l6186:
 16969                           
 16970                           ;UI.c: 436: }
 16971                           ;UI.c: 437: return 0;
 16972  0026B6  0E00               	movlw	0
 16973  0026B8  6E2B               	movwf	?_inputHandler+1,c
 16974  0026BA  0E00               	movlw	0
 16975  0026BC  6E2A               	movwf	?_inputHandler,c
 16976  0026BE  0012               	return	
 16977  0026C0                     i2l6190:
 16978                           
 16979                           ;UI.c: 439: if(cur_state == 23){
 16980  0026C0  0E17               	movlw	23
 16981  0026C2  0100               	movlb	0	; () banked
 16982  0026C4  19DE               	xorwf	_cur_state& (0+255),w,b
 16983  0026C6  0100               	movlb	0	; () banked
 16984  0026C8  11DF               	iorwf	(_cur_state+1)& (0+255),w,b
 16985  0026CA  A4D8               	btfss	status,2,c
 16986  0026CC  D005               	goto	i2l6198
 16987                           
 16988                           ; BSR set to: 0
 16989                           ;UI.c: 440: return 0;
 16990  0026CE  0E00               	movlw	0
 16991  0026D0  6E2B               	movwf	?_inputHandler+1,c
 16992  0026D2  0E00               	movlw	0
 16993  0026D4  6E2A               	movwf	?_inputHandler,c
 16994                           
 16995                           ; BSR set to: 0
 16996  0026D6  0012               	return	
 16997  0026D8                     i2l6198:
 16998                           
 16999                           ; BSR set to: 0
 17000                           ;UI.c: 442: else{
 17001                           ;UI.c: 443: change_state_to_menu_23();
 17002  0026D8  ECAE  F020         	call	_change_state_to_menu_23	;wreg free
 17003                           
 17004                           ;UI.c: 444: }
 17005                           ;UI.c: 445: return 0;
 17006  0026DC  0E00               	movlw	0
 17007  0026DE  6E2B               	movwf	?_inputHandler+1,c
 17008  0026E0  0E00               	movlw	0
 17009  0026E2  6E2A               	movwf	?_inputHandler,c
 17010  0026E4  0012               	return	
 17011  0026E6                     i2l6204:
 17012                           
 17013                           ;UI.c: 448: up = 1;
 17014  0026E6  0E00               	movlw	0
 17015  0026E8  6E78               	movwf	_up+1,c
 17016  0026EA  0E01               	movlw	1
 17017  0026EC  6E77               	movwf	_up,c
 17018                           
 17019                           ;UI.c: 449: return 1;
 17020  0026EE  0E00               	movlw	0
 17021  0026F0  6E2B               	movwf	?_inputHandler+1,c
 17022  0026F2  0E01               	movlw	1
 17023  0026F4  6E2A               	movwf	?_inputHandler,c
 17024  0026F6  0012               	return	
 17025  0026F8                     i2l6208:
 17026                           
 17027                           ;UI.c: 451: down = 1;
 17028  0026F8  0E00               	movlw	0
 17029  0026FA  6E68               	movwf	_down+1,c
 17030  0026FC  0E01               	movlw	1
 17031  0026FE  6E67               	movwf	_down,c
 17032                           
 17033                           ;UI.c: 452: return 1;
 17034  002700  0E00               	movlw	0
 17035  002702  6E2B               	movwf	?_inputHandler+1,c
 17036  002704  0E01               	movlw	1
 17037  002706  6E2A               	movwf	?_inputHandler,c
 17038  002708  0012               	return	
 17039  00270A                     i2l6212:
 17040                           
 17041                           ;UI.c: 454: enter = 1;
 17042  00270A  0E00               	movlw	0
 17043  00270C  6E6A               	movwf	_enter+1,c
 17044  00270E  0E01               	movlw	1
 17045  002710  6E69               	movwf	_enter,c
 17046                           
 17047                           ;UI.c: 455: return 1;
 17048  002712  0E00               	movlw	0
 17049  002714  6E2B               	movwf	?_inputHandler+1,c
 17050  002716  0E01               	movlw	1
 17051  002718  6E2A               	movwf	?_inputHandler,c
 17052  00271A  0012               	return	
 17053  00271C                     i2l6216:
 17054                           
 17055                           ;UI.c: 457: back = 1;
 17056  00271C  0E00               	movlw	0
 17057  00271E  6E5C               	movwf	_back+1,c
 17058  002720  0E01               	movlw	1
 17059  002722  6E5B               	movwf	_back,c
 17060                           
 17061                           ;UI.c: 458: return 1;
 17062  002724  0E00               	movlw	0
 17063  002726  6E2B               	movwf	?_inputHandler+1,c
 17064  002728  0E01               	movlw	1
 17065  00272A  6E2A               	movwf	?_inputHandler,c
 17066  00272C  0012               	return	
 17067  00272E                     i2l6220:
 17068                           
 17069                           ;UI.c: 461: return 1;
 17070  00272E  0E00               	movlw	0
 17071  002730  6E2B               	movwf	?_inputHandler+1,c
 17072  002732  0E01               	movlw	1
 17073  002734  6E2A               	movwf	?_inputHandler,c
 17074                           
 17075                           ;UI.c: 462: }
 17076  002736  0012               	return	
 17077  002738                     i2l6226:
 17078  002738  507D               	movf	_input,w,c	;volatile
 17079                           
 17080                           ; Switch size 1, requested type "space"
 17081                           ; Number of cases is 7, Range of values is 49 to 68
 17082                           ; switch strategies available:
 17083                           ; Name         Instructions Cycles
 17084                           ; simple_byte           22    12 (average)
 17085                           ;	Chosen strategy is simple_byte
 17086  00273A  0A31               	xorlw	49	; case 49
 17087  00273C  B4D8               	btfsc	status,2,c
 17088  00273E  D789               	goto	i2l6156
 17089  002740  0A03               	xorlw	3	; case 50
 17090  002742  B4D8               	btfsc	status,2,c
 17091  002744  D799               	goto	i2l6170
 17092  002746  0A01               	xorlw	1	; case 51
 17093  002748  B4D8               	btfsc	status,2,c
 17094  00274A  D7BA               	goto	i2l6190
 17095  00274C  0A72               	xorlw	114	; case 65
 17096  00274E  B4D8               	btfsc	status,2,c
 17097  002750  D7CA               	goto	i2l6204
 17098  002752  0A03               	xorlw	3	; case 66
 17099  002754  B4D8               	btfsc	status,2,c
 17100  002756  D7D0               	goto	i2l6208
 17101  002758  0A01               	xorlw	1	; case 67
 17102  00275A  B4D8               	btfsc	status,2,c
 17103  00275C  D7D6               	goto	i2l6212
 17104  00275E  0A07               	xorlw	7	; case 68
 17105  002760  B4D8               	btfsc	status,2,c
 17106  002762  D7DC               	goto	i2l6216
 17107  002764  D7E4               	goto	i2l6220
 17108  002766                     __end_of_inputHandler:
 17109                           	opt stack 0
 17110                           pclatu	equ	0xFFB
 17111                           pclath	equ	0xFFA
 17112                           tblptru	equ	0xFF8
 17113                           tblptrh	equ	0xFF7
 17114                           tblptrl	equ	0xFF6
 17115                           tablat	equ	0xFF5
 17116                           prodh	equ	0xFF4
 17117                           prodl	equ	0xFF3
 17118                           intcon	equ	0xFF2
 17119                           intcon2	equ	0xFF1
 17120                           intcon3	equ	0xFF0
 17121                           indf0	equ	0xFEF
 17122                           postinc0	equ	0xFEE
 17123                           fsr0h	equ	0xFEA
 17124                           fsr0l	equ	0xFE9
 17125                           wreg	equ	0xFE8
 17126                           postdec1	equ	0xFE5
 17127                           fsr1h	equ	0xFE2
 17128                           fsr1l	equ	0xFE1
 17129                           indf2	equ	0xFDF
 17130                           postinc2	equ	0xFDE
 17131                           postdec2	equ	0xFDD
 17132                           fsr2h	equ	0xFDA
 17133                           fsr2l	equ	0xFD9
 17134                           status	equ	0xFD8
 17135                           
 17136 ;; *************** function i2_change_state_to_menu_22 *****************
 17137 ;; Defined at:
 17138 ;;		line 496 in file "UI.c"
 17139 ;; Parameters:    Size  Location     Type
 17140 ;;		None
 17141 ;; Auto vars:     Size  Location     Type
 17142 ;;		None
 17143 ;; Return value:  Size  Location     Type
 17144 ;;                  1    wreg      void 
 17145 ;; Registers used:
 17146 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17147 ;; Tracked objects:
 17148 ;;		On entry : 0/0
 17149 ;;		On exit  : 0/0
 17150 ;;		Unchanged: 0/0
 17151 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17152 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17153 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17154 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17155 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17156 ;;Total ram usage:        0 bytes
 17157 ;; Hardware stack levels used:    1
 17158 ;; Hardware stack levels required when called:    3
 17159 ;; This function calls:
 17160 ;;		i2_lcdInst
 17161 ;;		i2_printf
 17162 ;; This function is called by:
 17163 ;;		_updateMenu
 17164 ;;		_inputHandler
 17165 ;; This function uses a non-reentrant model
 17166 ;;
 17167                           
 17168                           	psect	text63
 17169  0040FC                     __ptext63:
 17170                           	opt stack 0
 17171  0040FC                     i2_change_state_to_menu_22:
 17172                           	opt stack 19
 17173                           
 17174                           ;UI.c: 497: cur_state = 22;
 17175                           
 17176                           ;incstack = 0
 17177  0040FC  0E00               	movlw	0
 17178  0040FE  0100               	movlb	0	; () banked
 17179  004100  6FDF               	movwf	(_cur_state+1)& (0+255),b
 17180  004102  0E16               	movlw	22
 17181  004104  6FDE               	movwf	_cur_state& (0+255),b
 17182                           
 17183                           ; BSR set to: 0
 17184                           ;UI.c: 499: lcdInst(0b10000000);;
 17185  004106  0E80               	movlw	128
 17186  004108  ECB3  F022         	call	i2_lcdInst
 17187                           
 17188                           ;UI.c: 500: printf("2. SORT        <");
 17189  00410C  0EEC               	movlw	low STR_34
 17190  00410E  6E0D               	movwf	i2printf@f,c
 17191  004110  0EFD               	movlw	high STR_34
 17192  004112  6E0E               	movwf	i2printf@f+1,c
 17193  004114  ECB8  F00A         	call	i2_printf	;wreg free
 17194                           
 17195                           ;UI.c: 501: lcdInst(0b11000000);;
 17196  004118  0EC0               	movlw	192
 17197  00411A  ECB3  F022         	call	i2_lcdInst
 17198                           
 17199                           ;UI.c: 502: printf("3. LOGS         ");
 17200  00411E  0E31               	movlw	low STR_36
 17201  004120  6E0D               	movwf	i2printf@f,c
 17202  004122  0EFD               	movlw	high STR_36
 17203  004124  6E0E               	movwf	i2printf@f+1,c
 17204  004126  ECB8  F00A         	call	i2_printf	;wreg free
 17205  00412A  0012               	return		;funcret
 17206  00412C                     __end_ofi2_change_state_to_menu_22:
 17207                           	opt stack 0
 17208                           pclatu	equ	0xFFB
 17209                           pclath	equ	0xFFA
 17210                           tblptru	equ	0xFF8
 17211                           tblptrh	equ	0xFF7
 17212                           tblptrl	equ	0xFF6
 17213                           tablat	equ	0xFF5
 17214                           prodh	equ	0xFF4
 17215                           prodl	equ	0xFF3
 17216                           intcon	equ	0xFF2
 17217                           intcon2	equ	0xFF1
 17218                           intcon3	equ	0xFF0
 17219                           indf0	equ	0xFEF
 17220                           postinc0	equ	0xFEE
 17221                           fsr0h	equ	0xFEA
 17222                           fsr0l	equ	0xFE9
 17223                           wreg	equ	0xFE8
 17224                           postdec1	equ	0xFE5
 17225                           fsr1h	equ	0xFE2
 17226                           fsr1l	equ	0xFE1
 17227                           indf2	equ	0xFDF
 17228                           postinc2	equ	0xFDE
 17229                           postdec2	equ	0xFDD
 17230                           fsr2h	equ	0xFDA
 17231                           fsr2l	equ	0xFD9
 17232                           status	equ	0xFD8
 17233                           
 17234 ;; *************** function i2_change_state_to_menu_12 *****************
 17235 ;; Defined at:
 17236 ;;		line 488 in file "UI.c"
 17237 ;; Parameters:    Size  Location     Type
 17238 ;;		None
 17239 ;; Auto vars:     Size  Location     Type
 17240 ;;		None
 17241 ;; Return value:  Size  Location     Type
 17242 ;;                  1    wreg      void 
 17243 ;; Registers used:
 17244 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17245 ;; Tracked objects:
 17246 ;;		On entry : 0/0
 17247 ;;		On exit  : 0/0
 17248 ;;		Unchanged: 0/0
 17249 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17250 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17251 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17252 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17253 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17254 ;;Total ram usage:        0 bytes
 17255 ;; Hardware stack levels used:    1
 17256 ;; Hardware stack levels required when called:    3
 17257 ;; This function calls:
 17258 ;;		i2_lcdInst
 17259 ;;		i2_printf
 17260 ;; This function is called by:
 17261 ;;		_updateMenu
 17262 ;;		_inputHandler
 17263 ;; This function uses a non-reentrant model
 17264 ;;
 17265                           
 17266                           	psect	text64
 17267  00412C                     __ptext64:
 17268                           	opt stack 0
 17269  00412C                     i2_change_state_to_menu_12:
 17270                           	opt stack 19
 17271                           
 17272                           ;UI.c: 489: cur_state = 12;
 17273                           
 17274                           ;incstack = 0
 17275  00412C  0E00               	movlw	0
 17276  00412E  0100               	movlb	0	; () banked
 17277  004130  6FDF               	movwf	(_cur_state+1)& (0+255),b
 17278  004132  0E0C               	movlw	12
 17279  004134  6FDE               	movwf	_cur_state& (0+255),b
 17280                           
 17281                           ; BSR set to: 0
 17282                           ;UI.c: 491: lcdInst(0b10000000);;
 17283  004136  0E80               	movlw	128
 17284  004138  ECB3  F022         	call	i2_lcdInst
 17285                           
 17286                           ;UI.c: 492: printf("1. DATE/TIME    ");
 17287  00413C  0E53               	movlw	low STR_33
 17288  00413E  6E0D               	movwf	i2printf@f,c
 17289  004140  0EFD               	movlw	high STR_33
 17290  004142  6E0E               	movwf	i2printf@f+1,c
 17291  004144  ECB8  F00A         	call	i2_printf	;wreg free
 17292                           
 17293                           ;UI.c: 493: lcdInst(0b11000000);;
 17294  004148  0EC0               	movlw	192
 17295  00414A  ECB3  F022         	call	i2_lcdInst
 17296                           
 17297                           ;UI.c: 494: printf("2. SORT        <");
 17298  00414E  0EEC               	movlw	low STR_34
 17299  004150  6E0D               	movwf	i2printf@f,c
 17300  004152  0EFD               	movlw	high STR_34
 17301  004154  6E0E               	movwf	i2printf@f+1,c
 17302  004156  ECB8  F00A         	call	i2_printf	;wreg free
 17303  00415A  0012               	return		;funcret
 17304  00415C                     __end_ofi2_change_state_to_menu_12:
 17305                           	opt stack 0
 17306                           pclatu	equ	0xFFB
 17307                           pclath	equ	0xFFA
 17308                           tblptru	equ	0xFF8
 17309                           tblptrh	equ	0xFF7
 17310                           tblptrl	equ	0xFF6
 17311                           tablat	equ	0xFF5
 17312                           prodh	equ	0xFF4
 17313                           prodl	equ	0xFF3
 17314                           intcon	equ	0xFF2
 17315                           intcon2	equ	0xFF1
 17316                           intcon3	equ	0xFF0
 17317                           indf0	equ	0xFEF
 17318                           postinc0	equ	0xFEE
 17319                           fsr0h	equ	0xFEA
 17320                           fsr0l	equ	0xFE9
 17321                           wreg	equ	0xFE8
 17322                           postdec1	equ	0xFE5
 17323                           fsr1h	equ	0xFE2
 17324                           fsr1l	equ	0xFE1
 17325                           indf2	equ	0xFDF
 17326                           postinc2	equ	0xFDE
 17327                           postdec2	equ	0xFDD
 17328                           fsr2h	equ	0xFDA
 17329                           fsr2l	equ	0xFD9
 17330                           status	equ	0xFD8
 17331                           
 17332 ;; *************** function _change_state_to_menu_23 *****************
 17333 ;; Defined at:
 17334 ;;		line 504 in file "UI.c"
 17335 ;; Parameters:    Size  Location     Type
 17336 ;;		None
 17337 ;; Auto vars:     Size  Location     Type
 17338 ;;		None
 17339 ;; Return value:  Size  Location     Type
 17340 ;;                  1    wreg      void 
 17341 ;; Registers used:
 17342 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17343 ;; Tracked objects:
 17344 ;;		On entry : 0/0
 17345 ;;		On exit  : 0/0
 17346 ;;		Unchanged: 0/0
 17347 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17348 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17349 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17350 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17351 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17352 ;;Total ram usage:        0 bytes
 17353 ;; Hardware stack levels used:    1
 17354 ;; Hardware stack levels required when called:    3
 17355 ;; This function calls:
 17356 ;;		i2_lcdInst
 17357 ;;		i2_printf
 17358 ;; This function is called by:
 17359 ;;		_updateMenu
 17360 ;;		_inputHandler
 17361 ;; This function uses a non-reentrant model
 17362 ;;
 17363                           
 17364                           	psect	text65
 17365  00415C                     __ptext65:
 17366                           	opt stack 0
 17367  00415C                     _change_state_to_menu_23:
 17368                           	opt stack 18
 17369                           
 17370                           ;UI.c: 505: cur_state = 23;
 17371                           
 17372                           ;incstack = 0
 17373  00415C  0E00               	movlw	0
 17374  00415E  0100               	movlb	0	; () banked
 17375  004160  6FDF               	movwf	(_cur_state+1)& (0+255),b
 17376  004162  0E17               	movlw	23
 17377  004164  6FDE               	movwf	_cur_state& (0+255),b
 17378                           
 17379                           ; BSR set to: 0
 17380                           ;UI.c: 507: lcdInst(0b10000000);;
 17381  004166  0E80               	movlw	128
 17382  004168  ECB3  F022         	call	i2_lcdInst
 17383                           
 17384                           ;UI.c: 508: printf("2. SORT         ");
 17385  00416C  0E42               	movlw	low STR_32
 17386  00416E  6E0D               	movwf	i2printf@f,c
 17387  004170  0EFD               	movlw	high STR_32
 17388  004172  6E0E               	movwf	i2printf@f+1,c
 17389  004174  ECB8  F00A         	call	i2_printf	;wreg free
 17390                           
 17391                           ;UI.c: 509: lcdInst(0b11000000);;
 17392  004178  0EC0               	movlw	192
 17393  00417A  ECB3  F022         	call	i2_lcdInst
 17394                           
 17395                           ;UI.c: 510: printf("3. LOGS        <");
 17396  00417E  0EDB               	movlw	low STR_38
 17397  004180  6E0D               	movwf	i2printf@f,c
 17398  004182  0EFD               	movlw	high STR_38
 17399  004184  6E0E               	movwf	i2printf@f+1,c
 17400  004186  ECB8  F00A         	call	i2_printf	;wreg free
 17401  00418A  0012               	return		;funcret
 17402  00418C                     __end_of_change_state_to_menu_23:
 17403                           	opt stack 0
 17404                           pclatu	equ	0xFFB
 17405                           pclath	equ	0xFFA
 17406                           tblptru	equ	0xFF8
 17407                           tblptrh	equ	0xFF7
 17408                           tblptrl	equ	0xFF6
 17409                           tablat	equ	0xFF5
 17410                           prodh	equ	0xFF4
 17411                           prodl	equ	0xFF3
 17412                           intcon	equ	0xFF2
 17413                           intcon2	equ	0xFF1
 17414                           intcon3	equ	0xFF0
 17415                           indf0	equ	0xFEF
 17416                           postinc0	equ	0xFEE
 17417                           fsr0h	equ	0xFEA
 17418                           fsr0l	equ	0xFE9
 17419                           wreg	equ	0xFE8
 17420                           postdec1	equ	0xFE5
 17421                           fsr1h	equ	0xFE2
 17422                           fsr1l	equ	0xFE1
 17423                           indf2	equ	0xFDF
 17424                           postinc2	equ	0xFDE
 17425                           postdec2	equ	0xFDD
 17426                           fsr2h	equ	0xFDA
 17427                           fsr2l	equ	0xFD9
 17428                           status	equ	0xFD8
 17429                           
 17430 ;; *************** function _change_state_to_menu_11 *****************
 17431 ;; Defined at:
 17432 ;;		line 480 in file "UI.c"
 17433 ;; Parameters:    Size  Location     Type
 17434 ;;		None
 17435 ;; Auto vars:     Size  Location     Type
 17436 ;;		None
 17437 ;; Return value:  Size  Location     Type
 17438 ;;                  1    wreg      void 
 17439 ;; Registers used:
 17440 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17441 ;; Tracked objects:
 17442 ;;		On entry : 0/0
 17443 ;;		On exit  : 0/0
 17444 ;;		Unchanged: 0/0
 17445 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17446 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17447 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17448 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17449 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17450 ;;Total ram usage:        0 bytes
 17451 ;; Hardware stack levels used:    1
 17452 ;; Hardware stack levels required when called:    3
 17453 ;; This function calls:
 17454 ;;		i2_lcdInst
 17455 ;;		i2_printf
 17456 ;; This function is called by:
 17457 ;;		_updateMenu
 17458 ;;		_inputHandler
 17459 ;; This function uses a non-reentrant model
 17460 ;;
 17461                           
 17462                           	psect	text66
 17463  00418C                     __ptext66:
 17464                           	opt stack 0
 17465  00418C                     _change_state_to_menu_11:
 17466                           	opt stack 18
 17467                           
 17468                           ;UI.c: 481: cur_state = 11;
 17469                           
 17470                           ;incstack = 0
 17471  00418C  0E00               	movlw	0
 17472  00418E  0100               	movlb	0	; () banked
 17473  004190  6FDF               	movwf	(_cur_state+1)& (0+255),b
 17474  004192  0E0B               	movlw	11
 17475  004194  6FDE               	movwf	_cur_state& (0+255),b
 17476                           
 17477                           ; BSR set to: 0
 17478                           ;UI.c: 483: lcdInst(0b10000000);;
 17479  004196  0E80               	movlw	128
 17480  004198  ECB3  F022         	call	i2_lcdInst
 17481                           
 17482                           ;UI.c: 484: printf("1. DATE/TIME   <");
 17483  00419C  0EFD               	movlw	low STR_31
 17484  00419E  6E0D               	movwf	i2printf@f,c
 17485  0041A0  0EFD               	movlw	high STR_31
 17486  0041A2  6E0E               	movwf	i2printf@f+1,c
 17487  0041A4  ECB8  F00A         	call	i2_printf	;wreg free
 17488                           
 17489                           ;UI.c: 485: lcdInst(0b11000000);;
 17490  0041A8  0EC0               	movlw	192
 17491  0041AA  ECB3  F022         	call	i2_lcdInst
 17492                           
 17493                           ;UI.c: 486: printf("2. SORT         ");
 17494  0041AE  0E42               	movlw	low STR_32
 17495  0041B0  6E0D               	movwf	i2printf@f,c
 17496  0041B2  0EFD               	movlw	high STR_32
 17497  0041B4  6E0E               	movwf	i2printf@f+1,c
 17498  0041B6  ECB8  F00A         	call	i2_printf	;wreg free
 17499  0041BA  0012               	return		;funcret
 17500  0041BC                     __end_of_change_state_to_menu_11:
 17501                           	opt stack 0
 17502                           pclatu	equ	0xFFB
 17503                           pclath	equ	0xFFA
 17504                           tblptru	equ	0xFF8
 17505                           tblptrh	equ	0xFF7
 17506                           tblptrl	equ	0xFF6
 17507                           tablat	equ	0xFF5
 17508                           prodh	equ	0xFF4
 17509                           prodl	equ	0xFF3
 17510                           intcon	equ	0xFF2
 17511                           intcon2	equ	0xFF1
 17512                           intcon3	equ	0xFF0
 17513                           indf0	equ	0xFEF
 17514                           postinc0	equ	0xFEE
 17515                           fsr0h	equ	0xFEA
 17516                           fsr0l	equ	0xFE9
 17517                           wreg	equ	0xFE8
 17518                           postdec1	equ	0xFE5
 17519                           fsr1h	equ	0xFE2
 17520                           fsr1l	equ	0xFE1
 17521                           indf2	equ	0xFDF
 17522                           postinc2	equ	0xFDE
 17523                           postdec2	equ	0xFDD
 17524                           fsr2h	equ	0xFDA
 17525                           fsr2l	equ	0xFD9
 17526                           status	equ	0xFD8
 17527                           
 17528 ;; *************** function _change_state_to_logs_34 *****************
 17529 ;; Defined at:
 17530 ;;		line 547 in file "UI.c"
 17531 ;; Parameters:    Size  Location     Type
 17532 ;;		None
 17533 ;; Auto vars:     Size  Location     Type
 17534 ;;		None
 17535 ;; Return value:  Size  Location     Type
 17536 ;;                  1    wreg      void 
 17537 ;; Registers used:
 17538 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17539 ;; Tracked objects:
 17540 ;;		On entry : 0/0
 17541 ;;		On exit  : 0/0
 17542 ;;		Unchanged: 0/0
 17543 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17544 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17545 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17546 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17547 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17548 ;;Total ram usage:        0 bytes
 17549 ;; Hardware stack levels used:    1
 17550 ;; Hardware stack levels required when called:    3
 17551 ;; This function calls:
 17552 ;;		i2_lcdInst
 17553 ;;		i2_printf
 17554 ;; This function is called by:
 17555 ;;		_updateMenu
 17556 ;;		_inputHandler
 17557 ;; This function uses a non-reentrant model
 17558 ;;
 17559                           
 17560                           	psect	text67
 17561  0041BC                     __ptext67:
 17562                           	opt stack 0
 17563  0041BC                     _change_state_to_logs_34:
 17564                           	opt stack 18
 17565                           
 17566                           ;UI.c: 548: cur_state = 1034;
 17567                           
 17568                           ;incstack = 0
 17569  0041BC  0E04               	movlw	4
 17570  0041BE  0100               	movlb	0	; () banked
 17571  0041C0  6FDF               	movwf	(_cur_state+1)& (0+255),b
 17572  0041C2  0E0A               	movlw	10
 17573  0041C4  6FDE               	movwf	_cur_state& (0+255),b
 17574                           
 17575                           ; BSR set to: 0
 17576                           ;UI.c: 549: lcdInst(0b10000000);;
 17577  0041C6  0E80               	movlw	128
 17578  0041C8  ECB3  F022         	call	i2_lcdInst
 17579                           
 17580                           ;UI.c: 550: printf("LOG 3           ");
 17581  0041CC  0E0F               	movlw	low STR_44
 17582  0041CE  6E0D               	movwf	i2printf@f,c
 17583  0041D0  0EFD               	movlw	high STR_44
 17584  0041D2  6E0E               	movwf	i2printf@f+1,c
 17585  0041D4  ECB8  F00A         	call	i2_printf	;wreg free
 17586                           
 17587                           ;UI.c: 551: lcdInst(0b11000000);;
 17588  0041D8  0EC0               	movlw	192
 17589  0041DA  ECB3  F022         	call	i2_lcdInst
 17590                           
 17591                           ;UI.c: 552: printf("LOG 4          <");
 17592  0041DE  0ECA               	movlw	low STR_50
 17593  0041E0  6E0D               	movwf	i2printf@f,c
 17594  0041E2  0EFD               	movlw	high STR_50
 17595  0041E4  6E0E               	movwf	i2printf@f+1,c
 17596  0041E6  ECB8  F00A         	call	i2_printf	;wreg free
 17597  0041EA  0012               	return		;funcret
 17598  0041EC                     __end_of_change_state_to_logs_34:
 17599                           	opt stack 0
 17600                           pclatu	equ	0xFFB
 17601                           pclath	equ	0xFFA
 17602                           tblptru	equ	0xFF8
 17603                           tblptrh	equ	0xFF7
 17604                           tblptrl	equ	0xFF6
 17605                           tablat	equ	0xFF5
 17606                           prodh	equ	0xFF4
 17607                           prodl	equ	0xFF3
 17608                           intcon	equ	0xFF2
 17609                           intcon2	equ	0xFF1
 17610                           intcon3	equ	0xFF0
 17611                           indf0	equ	0xFEF
 17612                           postinc0	equ	0xFEE
 17613                           fsr0h	equ	0xFEA
 17614                           fsr0l	equ	0xFE9
 17615                           wreg	equ	0xFE8
 17616                           postdec1	equ	0xFE5
 17617                           fsr1h	equ	0xFE2
 17618                           fsr1l	equ	0xFE1
 17619                           indf2	equ	0xFDF
 17620                           postinc2	equ	0xFDE
 17621                           postdec2	equ	0xFDD
 17622                           fsr2h	equ	0xFDA
 17623                           fsr2l	equ	0xFD9
 17624                           status	equ	0xFD8
 17625                           
 17626 ;; *************** function _change_state_to_logs_33 *****************
 17627 ;; Defined at:
 17628 ;;		line 540 in file "UI.c"
 17629 ;; Parameters:    Size  Location     Type
 17630 ;;		None
 17631 ;; Auto vars:     Size  Location     Type
 17632 ;;		None
 17633 ;; Return value:  Size  Location     Type
 17634 ;;                  1    wreg      void 
 17635 ;; Registers used:
 17636 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17637 ;; Tracked objects:
 17638 ;;		On entry : 0/0
 17639 ;;		On exit  : 0/0
 17640 ;;		Unchanged: 0/0
 17641 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17642 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17643 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17644 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17645 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17646 ;;Total ram usage:        0 bytes
 17647 ;; Hardware stack levels used:    1
 17648 ;; Hardware stack levels required when called:    3
 17649 ;; This function calls:
 17650 ;;		i2_lcdInst
 17651 ;;		i2_printf
 17652 ;; This function is called by:
 17653 ;;		_updateMenu
 17654 ;;		_inputHandler
 17655 ;; This function uses a non-reentrant model
 17656 ;;
 17657                           
 17658                           	psect	text68
 17659  0041EC                     __ptext68:
 17660                           	opt stack 0
 17661  0041EC                     _change_state_to_logs_33:
 17662                           	opt stack 18
 17663                           
 17664                           ;UI.c: 541: cur_state = 1033;
 17665                           
 17666                           ;incstack = 0
 17667  0041EC  0E04               	movlw	4
 17668  0041EE  0100               	movlb	0	; () banked
 17669  0041F0  6FDF               	movwf	(_cur_state+1)& (0+255),b
 17670  0041F2  0E09               	movlw	9
 17671  0041F4  6FDE               	movwf	_cur_state& (0+255),b
 17672                           
 17673                           ; BSR set to: 0
 17674                           ;UI.c: 542: lcdInst(0b10000000);;
 17675  0041F6  0E80               	movlw	128
 17676  0041F8  ECB3  F022         	call	i2_lcdInst
 17677                           
 17678                           ;UI.c: 543: printf("LOG 3          <");
 17679  0041FC  0EB9               	movlw	low STR_46
 17680  0041FE  6E0D               	movwf	i2printf@f,c
 17681  004200  0EFD               	movlw	high STR_46
 17682  004202  6E0E               	movwf	i2printf@f+1,c
 17683  004204  ECB8  F00A         	call	i2_printf	;wreg free
 17684                           
 17685                           ;UI.c: 544: lcdInst(0b11000000);;
 17686  004208  0EC0               	movlw	192
 17687  00420A  ECB3  F022         	call	i2_lcdInst
 17688                           
 17689                           ;UI.c: 545: printf("LOG 4           ");
 17690  00420E  0E20               	movlw	low STR_48
 17691  004210  6E0D               	movwf	i2printf@f,c
 17692  004212  0EFD               	movlw	high STR_48
 17693  004214  6E0E               	movwf	i2printf@f+1,c
 17694  004216  ECB8  F00A         	call	i2_printf	;wreg free
 17695  00421A  0012               	return		;funcret
 17696  00421C                     __end_of_change_state_to_logs_33:
 17697                           	opt stack 0
 17698                           pclatu	equ	0xFFB
 17699                           pclath	equ	0xFFA
 17700                           tblptru	equ	0xFF8
 17701                           tblptrh	equ	0xFF7
 17702                           tblptrl	equ	0xFF6
 17703                           tablat	equ	0xFF5
 17704                           prodh	equ	0xFF4
 17705                           prodl	equ	0xFF3
 17706                           intcon	equ	0xFF2
 17707                           intcon2	equ	0xFF1
 17708                           intcon3	equ	0xFF0
 17709                           indf0	equ	0xFEF
 17710                           postinc0	equ	0xFEE
 17711                           fsr0h	equ	0xFEA
 17712                           fsr0l	equ	0xFE9
 17713                           wreg	equ	0xFE8
 17714                           postdec1	equ	0xFE5
 17715                           fsr1h	equ	0xFE2
 17716                           fsr1l	equ	0xFE1
 17717                           indf2	equ	0xFDF
 17718                           postinc2	equ	0xFDE
 17719                           postdec2	equ	0xFDD
 17720                           fsr2h	equ	0xFDA
 17721                           fsr2l	equ	0xFD9
 17722                           status	equ	0xFD8
 17723                           
 17724 ;; *************** function _change_state_to_logs_23 *****************
 17725 ;; Defined at:
 17726 ;;		line 533 in file "UI.c"
 17727 ;; Parameters:    Size  Location     Type
 17728 ;;		None
 17729 ;; Auto vars:     Size  Location     Type
 17730 ;;		None
 17731 ;; Return value:  Size  Location     Type
 17732 ;;                  1    wreg      void 
 17733 ;; Registers used:
 17734 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17735 ;; Tracked objects:
 17736 ;;		On entry : 0/0
 17737 ;;		On exit  : 0/0
 17738 ;;		Unchanged: 0/0
 17739 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17740 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17741 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17742 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17743 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17744 ;;Total ram usage:        0 bytes
 17745 ;; Hardware stack levels used:    1
 17746 ;; Hardware stack levels required when called:    3
 17747 ;; This function calls:
 17748 ;;		i2_lcdInst
 17749 ;;		i2_printf
 17750 ;; This function is called by:
 17751 ;;		_updateMenu
 17752 ;;		_inputHandler
 17753 ;; This function uses a non-reentrant model
 17754 ;;
 17755                           
 17756                           	psect	text69
 17757  0042DA                     __ptext69:
 17758                           	opt stack 0
 17759  0042DA                     _change_state_to_logs_23:
 17760                           	opt stack 18
 17761                           
 17762                           ;UI.c: 534: cur_state = 1023;
 17763                           
 17764                           ;incstack = 0
 17765  0042DA  0E03               	movlw	3
 17766  0042DC  0100               	movlb	0	; () banked
 17767  0042DE  6FDF               	movwf	(_cur_state+1)& (0+255),b
 17768  0042E0  69DE               	setf	_cur_state& (0+255),b
 17769                           
 17770                           ; BSR set to: 0
 17771                           ;UI.c: 535: lcdInst(0b10000000);;
 17772  0042E2  0E80               	movlw	128
 17773  0042E4  ECB3  F022         	call	i2_lcdInst
 17774                           
 17775                           ;UI.c: 536: printf("LOG 2           ");
 17776  0042E8  0EFE               	movlw	low STR_40
 17777  0042EA  6E0D               	movwf	i2printf@f,c
 17778  0042EC  0EFC               	movlw	high STR_40
 17779  0042EE  6E0E               	movwf	i2printf@f+1,c
 17780  0042F0  ECB8  F00A         	call	i2_printf	;wreg free
 17781                           
 17782                           ;UI.c: 537: lcdInst(0b11000000);;
 17783  0042F4  0EC0               	movlw	192
 17784  0042F6  ECB3  F022         	call	i2_lcdInst
 17785                           
 17786                           ;UI.c: 538: printf("LOG 3          <");
 17787  0042FA  0EB9               	movlw	low STR_46
 17788  0042FC  6E0D               	movwf	i2printf@f,c
 17789  0042FE  0EFD               	movlw	high STR_46
 17790  004300  6E0E               	movwf	i2printf@f+1,c
 17791  004302  ECB8  F00A         	call	i2_printf	;wreg free
 17792  004306  0012               	return		;funcret
 17793  004308                     __end_of_change_state_to_logs_23:
 17794                           	opt stack 0
 17795                           pclatu	equ	0xFFB
 17796                           pclath	equ	0xFFA
 17797                           tblptru	equ	0xFF8
 17798                           tblptrh	equ	0xFF7
 17799                           tblptrl	equ	0xFF6
 17800                           tablat	equ	0xFF5
 17801                           prodh	equ	0xFF4
 17802                           prodl	equ	0xFF3
 17803                           intcon	equ	0xFF2
 17804                           intcon2	equ	0xFF1
 17805                           intcon3	equ	0xFF0
 17806                           indf0	equ	0xFEF
 17807                           postinc0	equ	0xFEE
 17808                           fsr0h	equ	0xFEA
 17809                           fsr0l	equ	0xFE9
 17810                           wreg	equ	0xFE8
 17811                           postdec1	equ	0xFE5
 17812                           fsr1h	equ	0xFE2
 17813                           fsr1l	equ	0xFE1
 17814                           indf2	equ	0xFDF
 17815                           postinc2	equ	0xFDE
 17816                           postdec2	equ	0xFDD
 17817                           fsr2h	equ	0xFDA
 17818                           fsr2l	equ	0xFD9
 17819                           status	equ	0xFD8
 17820                           
 17821 ;; *************** function _change_state_to_logs_22 *****************
 17822 ;; Defined at:
 17823 ;;		line 526 in file "UI.c"
 17824 ;; Parameters:    Size  Location     Type
 17825 ;;		None
 17826 ;; Auto vars:     Size  Location     Type
 17827 ;;		None
 17828 ;; Return value:  Size  Location     Type
 17829 ;;                  1    wreg      void 
 17830 ;; Registers used:
 17831 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17832 ;; Tracked objects:
 17833 ;;		On entry : 0/0
 17834 ;;		On exit  : 0/0
 17835 ;;		Unchanged: 0/0
 17836 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17837 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17838 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17839 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17840 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17841 ;;Total ram usage:        0 bytes
 17842 ;; Hardware stack levels used:    1
 17843 ;; Hardware stack levels required when called:    3
 17844 ;; This function calls:
 17845 ;;		i2_lcdInst
 17846 ;;		i2_printf
 17847 ;; This function is called by:
 17848 ;;		_updateMenu
 17849 ;;		_inputHandler
 17850 ;; This function uses a non-reentrant model
 17851 ;;
 17852                           
 17853                           	psect	text70
 17854  00421C                     __ptext70:
 17855                           	opt stack 0
 17856  00421C                     _change_state_to_logs_22:
 17857                           	opt stack 18
 17858                           
 17859                           ;UI.c: 527: cur_state = 1022;
 17860                           
 17861                           ;incstack = 0
 17862  00421C  0E03               	movlw	3
 17863  00421E  0100               	movlb	0	; () banked
 17864  004220  6FDF               	movwf	(_cur_state+1)& (0+255),b
 17865  004222  0EFE               	movlw	254
 17866  004224  6FDE               	movwf	_cur_state& (0+255),b
 17867                           
 17868                           ; BSR set to: 0
 17869                           ;UI.c: 528: lcdInst(0b10000000);;
 17870  004226  0E80               	movlw	128
 17871  004228  ECB3  F022         	call	i2_lcdInst
 17872                           
 17873                           ;UI.c: 529: printf("LOG 2          <");
 17874  00422C  0EA8               	movlw	low STR_42
 17875  00422E  6E0D               	movwf	i2printf@f,c
 17876  004230  0EFD               	movlw	high STR_42
 17877  004232  6E0E               	movwf	i2printf@f+1,c
 17878  004234  ECB8  F00A         	call	i2_printf	;wreg free
 17879                           
 17880                           ;UI.c: 530: lcdInst(0b11000000);;
 17881  004238  0EC0               	movlw	192
 17882  00423A  ECB3  F022         	call	i2_lcdInst
 17883                           
 17884                           ;UI.c: 531: printf("LOG 3           ");
 17885  00423E  0E0F               	movlw	low STR_44
 17886  004240  6E0D               	movwf	i2printf@f,c
 17887  004242  0EFD               	movlw	high STR_44
 17888  004244  6E0E               	movwf	i2printf@f+1,c
 17889  004246  ECB8  F00A         	call	i2_printf	;wreg free
 17890  00424A  0012               	return		;funcret
 17891  00424C                     __end_of_change_state_to_logs_22:
 17892                           	opt stack 0
 17893                           pclatu	equ	0xFFB
 17894                           pclath	equ	0xFFA
 17895                           tblptru	equ	0xFF8
 17896                           tblptrh	equ	0xFF7
 17897                           tblptrl	equ	0xFF6
 17898                           tablat	equ	0xFF5
 17899                           prodh	equ	0xFF4
 17900                           prodl	equ	0xFF3
 17901                           intcon	equ	0xFF2
 17902                           intcon2	equ	0xFF1
 17903                           intcon3	equ	0xFF0
 17904                           indf0	equ	0xFEF
 17905                           postinc0	equ	0xFEE
 17906                           fsr0h	equ	0xFEA
 17907                           fsr0l	equ	0xFE9
 17908                           wreg	equ	0xFE8
 17909                           postdec1	equ	0xFE5
 17910                           fsr1h	equ	0xFE2
 17911                           fsr1l	equ	0xFE1
 17912                           indf2	equ	0xFDF
 17913                           postinc2	equ	0xFDE
 17914                           postdec2	equ	0xFDD
 17915                           fsr2h	equ	0xFDA
 17916                           fsr2l	equ	0xFD9
 17917                           status	equ	0xFD8
 17918                           
 17919 ;; *************** function _change_state_to_logs_12 *****************
 17920 ;; Defined at:
 17921 ;;		line 519 in file "UI.c"
 17922 ;; Parameters:    Size  Location     Type
 17923 ;;		None
 17924 ;; Auto vars:     Size  Location     Type
 17925 ;;		None
 17926 ;; Return value:  Size  Location     Type
 17927 ;;                  1    wreg      void 
 17928 ;; Registers used:
 17929 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17930 ;; Tracked objects:
 17931 ;;		On entry : 0/0
 17932 ;;		On exit  : 0/0
 17933 ;;		Unchanged: 0/0
 17934 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17935 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17936 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17937 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17938 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17939 ;;Total ram usage:        0 bytes
 17940 ;; Hardware stack levels used:    1
 17941 ;; Hardware stack levels required when called:    3
 17942 ;; This function calls:
 17943 ;;		i2_lcdInst
 17944 ;;		i2_printf
 17945 ;; This function is called by:
 17946 ;;		_updateMenu
 17947 ;;		_inputHandler
 17948 ;; This function uses a non-reentrant model
 17949 ;;
 17950                           
 17951                           	psect	text71
 17952  00424C                     __ptext71:
 17953                           	opt stack 0
 17954  00424C                     _change_state_to_logs_12:
 17955                           	opt stack 18
 17956                           
 17957                           ;UI.c: 520: cur_state = 1012;
 17958                           
 17959                           ;incstack = 0
 17960  00424C  0E03               	movlw	3
 17961  00424E  0100               	movlb	0	; () banked
 17962  004250  6FDF               	movwf	(_cur_state+1)& (0+255),b
 17963  004252  0EF4               	movlw	244
 17964  004254  6FDE               	movwf	_cur_state& (0+255),b
 17965                           
 17966                           ; BSR set to: 0
 17967                           ;UI.c: 521: lcdInst(0b10000000);;
 17968  004256  0E80               	movlw	128
 17969  004258  ECB3  F022         	call	i2_lcdInst
 17970                           
 17971                           ;UI.c: 522: printf("LOG 1           ");
 17972  00425C  0EED               	movlw	low STR_41
 17973  00425E  6E0D               	movwf	i2printf@f,c
 17974  004260  0EFC               	movlw	high STR_41
 17975  004262  6E0E               	movwf	i2printf@f+1,c
 17976  004264  ECB8  F00A         	call	i2_printf	;wreg free
 17977                           
 17978                           ;UI.c: 523: lcdInst(0b11000000);;
 17979  004268  0EC0               	movlw	192
 17980  00426A  ECB3  F022         	call	i2_lcdInst
 17981                           
 17982                           ;UI.c: 524: printf("LOG 2          <");
 17983  00426E  0EA8               	movlw	low STR_42
 17984  004270  6E0D               	movwf	i2printf@f,c
 17985  004272  0EFD               	movlw	high STR_42
 17986  004274  6E0E               	movwf	i2printf@f+1,c
 17987  004276  ECB8  F00A         	call	i2_printf	;wreg free
 17988  00427A  0012               	return		;funcret
 17989  00427C                     __end_of_change_state_to_logs_12:
 17990                           	opt stack 0
 17991                           pclatu	equ	0xFFB
 17992                           pclath	equ	0xFFA
 17993                           tblptru	equ	0xFF8
 17994                           tblptrh	equ	0xFF7
 17995                           tblptrl	equ	0xFF6
 17996                           tablat	equ	0xFF5
 17997                           prodh	equ	0xFF4
 17998                           prodl	equ	0xFF3
 17999                           intcon	equ	0xFF2
 18000                           intcon2	equ	0xFF1
 18001                           intcon3	equ	0xFF0
 18002                           indf0	equ	0xFEF
 18003                           postinc0	equ	0xFEE
 18004                           fsr0h	equ	0xFEA
 18005                           fsr0l	equ	0xFE9
 18006                           wreg	equ	0xFE8
 18007                           postdec1	equ	0xFE5
 18008                           fsr1h	equ	0xFE2
 18009                           fsr1l	equ	0xFE1
 18010                           indf2	equ	0xFDF
 18011                           postinc2	equ	0xFDE
 18012                           postdec2	equ	0xFDD
 18013                           fsr2h	equ	0xFDA
 18014                           fsr2l	equ	0xFD9
 18015                           status	equ	0xFD8
 18016                           
 18017 ;; *************** function _change_state_to_logs_11 *****************
 18018 ;; Defined at:
 18019 ;;		line 512 in file "UI.c"
 18020 ;; Parameters:    Size  Location     Type
 18021 ;;		None
 18022 ;; Auto vars:     Size  Location     Type
 18023 ;;		None
 18024 ;; Return value:  Size  Location     Type
 18025 ;;                  1    wreg      void 
 18026 ;; Registers used:
 18027 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18028 ;; Tracked objects:
 18029 ;;		On entry : 0/0
 18030 ;;		On exit  : 0/0
 18031 ;;		Unchanged: 0/0
 18032 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18033 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18034 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18035 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18036 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18037 ;;Total ram usage:        0 bytes
 18038 ;; Hardware stack levels used:    1
 18039 ;; Hardware stack levels required when called:    3
 18040 ;; This function calls:
 18041 ;;		i2_lcdInst
 18042 ;;		i2_printf
 18043 ;; This function is called by:
 18044 ;;		_updateMenu
 18045 ;;		_inputHandler
 18046 ;; This function uses a non-reentrant model
 18047 ;;
 18048                           
 18049                           	psect	text72
 18050  00427C                     __ptext72:
 18051                           	opt stack 0
 18052  00427C                     _change_state_to_logs_11:
 18053                           	opt stack 18
 18054                           
 18055                           ;UI.c: 513: cur_state = 1011;
 18056                           
 18057                           ;incstack = 0
 18058  00427C  0E03               	movlw	3
 18059  00427E  0100               	movlb	0	; () banked
 18060  004280  6FDF               	movwf	(_cur_state+1)& (0+255),b
 18061  004282  0EF3               	movlw	243
 18062  004284  6FDE               	movwf	_cur_state& (0+255),b
 18063                           
 18064                           ; BSR set to: 0
 18065                           ;UI.c: 514: lcdInst(0b10000000);;
 18066  004286  0E80               	movlw	128
 18067  004288  ECB3  F022         	call	i2_lcdInst
 18068                           
 18069                           ;UI.c: 515: printf("LOG 1          <");
 18070  00428C  0E97               	movlw	low STR_39
 18071  00428E  6E0D               	movwf	i2printf@f,c
 18072  004290  0EFD               	movlw	high STR_39
 18073  004292  6E0E               	movwf	i2printf@f+1,c
 18074  004294  ECB8  F00A         	call	i2_printf	;wreg free
 18075                           
 18076                           ;UI.c: 516: lcdInst(0b11000000);;
 18077  004298  0EC0               	movlw	192
 18078  00429A  ECB3  F022         	call	i2_lcdInst
 18079                           
 18080                           ;UI.c: 517: printf("LOG 2           ");
 18081  00429E  0EFE               	movlw	low STR_40
 18082  0042A0  6E0D               	movwf	i2printf@f,c
 18083  0042A2  0EFC               	movlw	high STR_40
 18084  0042A4  6E0E               	movwf	i2printf@f+1,c
 18085  0042A6  ECB8  F00A         	call	i2_printf	;wreg free
 18086  0042AA  0012               	return		;funcret
 18087  0042AC                     __end_of_change_state_to_logs_11:
 18088                           	opt stack 0
 18089                           pclatu	equ	0xFFB
 18090                           pclath	equ	0xFFA
 18091                           tblptru	equ	0xFF8
 18092                           tblptrh	equ	0xFF7
 18093                           tblptrl	equ	0xFF6
 18094                           tablat	equ	0xFF5
 18095                           prodh	equ	0xFF4
 18096                           prodl	equ	0xFF3
 18097                           intcon	equ	0xFF2
 18098                           intcon2	equ	0xFF1
 18099                           intcon3	equ	0xFF0
 18100                           indf0	equ	0xFEF
 18101                           postinc0	equ	0xFEE
 18102                           fsr0h	equ	0xFEA
 18103                           fsr0l	equ	0xFE9
 18104                           wreg	equ	0xFE8
 18105                           postdec1	equ	0xFE5
 18106                           fsr1h	equ	0xFE2
 18107                           fsr1l	equ	0xFE1
 18108                           indf2	equ	0xFDF
 18109                           postinc2	equ	0xFDE
 18110                           postdec2	equ	0xFDD
 18111                           fsr2h	equ	0xFDA
 18112                           fsr2l	equ	0xFD9
 18113                           status	equ	0xFD8
 18114                           
 18115 ;; *************** function _dispLogs *****************
 18116 ;; Defined at:
 18117 ;;		line 465 in file "UI.c"
 18118 ;; Parameters:    Size  Location     Type
 18119 ;;  myLog           2   17[COMRAM] int 
 18120 ;; Auto vars:     Size  Location     Type
 18121 ;;		None
 18122 ;; Return value:  Size  Location     Type
 18123 ;;                  1    wreg      void 
 18124 ;; Registers used:
 18125 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 18126 ;; Tracked objects:
 18127 ;;		On entry : 0/0
 18128 ;;		On exit  : 0/0
 18129 ;;		Unchanged: 0/0
 18130 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18131 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18132 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18133 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18134 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18135 ;;Total ram usage:        2 bytes
 18136 ;; Hardware stack levels used:    1
 18137 ;; Hardware stack levels required when called:    2
 18138 ;; This function calls:
 18139 ;;		_retrieveLog
 18140 ;; This function is called by:
 18141 ;;		_updateMenu
 18142 ;; This function uses a non-reentrant model
 18143 ;;
 18144                           
 18145                           	psect	text73
 18146  00444A                     __ptext73:
 18147                           	opt stack 0
 18148  00444A                     _dispLogs:
 18149                           	opt stack 20
 18150                           
 18151                           ;UI.c: 466: logstate = 1;
 18152                           
 18153                           ;incstack = 0
 18154  00444A  0E00               	movlw	0
 18155  00444C  0100               	movlb	0	; () banked
 18156  00444E  6FF7               	movwf	(_logstate+1)& (0+255),b
 18157  004450  0E01               	movlw	1
 18158  004452  6FF6               	movwf	_logstate& (0+255),b
 18159                           
 18160                           ; BSR set to: 0
 18161                           ;UI.c: 467: log = myLog;
 18162  004454  C012  F0E6         	movff	dispLogs@myLog,_log
 18163  004458  C013  F0E7         	movff	dispLogs@myLog+1,_log+1
 18164                           
 18165                           ; BSR set to: 0
 18166                           ;UI.c: 468: retrieveLog(myLog - 1);
 18167  00445C  0EFF               	movlw	255
 18168  00445E  2412               	addwf	dispLogs@myLog,w,c
 18169  004460  6E07               	movwf	retrieveLog@logNum,c
 18170  004462  0EFF               	movlw	255
 18171  004464  2013               	addwfc	dispLogs@myLog+1,w,c
 18172  004466  6E08               	movwf	retrieveLog@logNum+1,c
 18173  004468  EC97  F017         	call	_retrieveLog	;wreg free
 18174  00446C  0012               	return		;funcret
 18175  00446E                     __end_of_dispLogs:
 18176                           	opt stack 0
 18177                           pclatu	equ	0xFFB
 18178                           pclath	equ	0xFFA
 18179                           tblptru	equ	0xFF8
 18180                           tblptrh	equ	0xFF7
 18181                           tblptrl	equ	0xFF6
 18182                           tablat	equ	0xFF5
 18183                           prodh	equ	0xFF4
 18184                           prodl	equ	0xFF3
 18185                           intcon	equ	0xFF2
 18186                           intcon2	equ	0xFF1
 18187                           intcon3	equ	0xFF0
 18188                           indf0	equ	0xFEF
 18189                           postinc0	equ	0xFEE
 18190                           fsr0h	equ	0xFEA
 18191                           fsr0l	equ	0xFE9
 18192                           wreg	equ	0xFE8
 18193                           postdec1	equ	0xFE5
 18194                           fsr1h	equ	0xFE2
 18195                           fsr1l	equ	0xFE1
 18196                           indf2	equ	0xFDF
 18197                           postinc2	equ	0xFDE
 18198                           postdec2	equ	0xFDD
 18199                           fsr2h	equ	0xFDA
 18200                           fsr2l	equ	0xFD9
 18201                           status	equ	0xFD8
 18202                           
 18203 ;; *************** function _retrieveLog *****************
 18204 ;; Defined at:
 18205 ;;		line 134 in file "EEPROM.c"
 18206 ;; Parameters:    Size  Location     Type
 18207 ;;  logNum          2    6[COMRAM] int 
 18208 ;; Auto vars:     Size  Location     Type
 18209 ;;  i               2   13[COMRAM] int 
 18210 ;;  addr            2   15[COMRAM] unsigned short 
 18211 ;;  byte3           1   12[COMRAM] unsigned char 
 18212 ;;  byte2           1   11[COMRAM] unsigned char 
 18213 ;;  byte1           1   10[COMRAM] unsigned char 
 18214 ;; Return value:  Size  Location     Type
 18215 ;;                  1    wreg      void 
 18216 ;; Registers used:
 18217 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 18218 ;; Tracked objects:
 18219 ;;		On entry : 0/0
 18220 ;;		On exit  : 0/0
 18221 ;;		Unchanged: 0/0
 18222 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18223 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18224 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18225 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18226 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18227 ;;Total ram usage:       11 bytes
 18228 ;; Hardware stack levels used:    1
 18229 ;; Hardware stack levels required when called:    1
 18230 ;; This function calls:
 18231 ;;		i2_EEPROM_read
 18232 ;;		i2___wmul
 18233 ;; This function is called by:
 18234 ;;		_dispLogs
 18235 ;; This function uses a non-reentrant model
 18236 ;;
 18237                           
 18238                           	psect	text74
 18239  002F2E                     __ptext74:
 18240                           	opt stack 0
 18241  002F2E                     _retrieveLog:
 18242                           	opt stack 20
 18243                           
 18244                           ;EEPROM.c: 140: unsigned short addr = 1 + logNum * 11;
 18245                           
 18246                           ;incstack = 0
 18247  002F2E  C007  F001         	movff	retrieveLog@logNum,i2___wmul@multiplier
 18248  002F32  C008  F002         	movff	retrieveLog@logNum+1,i2___wmul@multiplier+1
 18249  002F36  0E00               	movlw	0
 18250  002F38  6E04               	movwf	i2___wmul@multiplicand+1,c
 18251  002F3A  0E0B               	movlw	11
 18252  002F3C  6E03               	movwf	i2___wmul@multiplicand,c
 18253  002F3E  ECED  F021         	call	i2___wmul	;wreg free
 18254  002F42  0E01               	movlw	1
 18255  002F44  2401               	addwf	?i2___wmul,w,c
 18256  002F46  6E10               	movwf	retrieveLog@addr,c
 18257  002F48  0E00               	movlw	0
 18258  002F4A  2002               	addwfc	?i2___wmul+1,w,c
 18259  002F4C  6E11               	movwf	retrieveLog@addr+1,c
 18260                           
 18261                           ;EEPROM.c: 143: unsigned char byte1 = EEPROM_read(addr);
 18262  002F4E  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 18263  002F52  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 18264  002F56  EC7F  F022         	call	i2_EEPROM_read	;wreg free
 18265  002F5A  6E0B               	movwf	retrieveLog@byte1,c
 18266                           
 18267                           ;EEPROM.c: 144: log_completion = (int)(byte1 & 0b10000000);
 18268  002F5C  C00B  F009         	movff	retrieveLog@byte1,??_retrieveLog
 18269  002F60  0E80               	movlw	128
 18270  002F62  1609               	andwf	??_retrieveLog,f,c
 18271  002F64  5009               	movf	??_retrieveLog,w,c
 18272  002F66  0100               	movlb	0	; () banked
 18273  002F68  6FE8               	movwf	_log_completion& (0+255),b
 18274  002F6A  6BE9               	clrf	(_log_completion+1)& (0+255),b
 18275                           
 18276                           ; BSR set to: 0
 18277                           ;EEPROM.c: 145: log_count_total = (int)(byte1 & 0b00001111);
 18278  002F6C  C00B  F009         	movff	retrieveLog@byte1,??_retrieveLog
 18279  002F70  0E0F               	movlw	15
 18280  002F72  1609               	andwf	??_retrieveLog,f,c
 18281  002F74  5009               	movf	??_retrieveLog,w,c
 18282  002F76  0100               	movlb	0	; () banked
 18283  002F78  6FF2               	movwf	_log_count_total& (0+255),b
 18284  002F7A  6BF3               	clrf	(_log_count_total+1)& (0+255),b
 18285                           
 18286                           ; BSR set to: 0
 18287                           ;EEPROM.c: 146: addr++;
 18288  002F7C  4A10               	infsnz	retrieveLog@addr,f,c
 18289  002F7E  2A11               	incf	retrieveLog@addr+1,f,c
 18290                           
 18291                           ; BSR set to: 0
 18292                           ;EEPROM.c: 149: unsigned char byte2 = EEPROM_read(addr);
 18293  002F80  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 18294  002F84  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 18295  002F88  EC7F  F022         	call	i2_EEPROM_read	;wreg free
 18296  002F8C  6E0C               	movwf	retrieveLog@byte2,c
 18297                           
 18298                           ;EEPROM.c: 150: log_count_pop_no_tab = (int)(byte2 & 0b11110000);
 18299  002F8E  C00C  F009         	movff	retrieveLog@byte2,??_retrieveLog
 18300  002F92  0EF0               	movlw	240
 18301  002F94  1609               	andwf	??_retrieveLog,f,c
 18302  002F96  5009               	movf	??_retrieveLog,w,c
 18303  002F98  0100               	movlb	0	; () banked
 18304  002F9A  6FEE               	movwf	_log_count_pop_no_tab& (0+255),b
 18305  002F9C  6BEF               	clrf	(_log_count_pop_no_tab+1)& (0+255),b
 18306                           
 18307                           ; BSR set to: 0
 18308                           ;EEPROM.c: 151: log_count_pop_w_tab = (int)(byte2 & 0b00001111);
 18309  002F9E  C00C  F009         	movff	retrieveLog@byte2,??_retrieveLog
 18310  002FA2  0E0F               	movlw	15
 18311  002FA4  1609               	andwf	??_retrieveLog,f,c
 18312  002FA6  5009               	movf	??_retrieveLog,w,c
 18313  002FA8  0100               	movlb	0	; () banked
 18314  002FAA  6FF0               	movwf	_log_count_pop_w_tab& (0+255),b
 18315  002FAC  6BF1               	clrf	(_log_count_pop_w_tab+1)& (0+255),b
 18316                           
 18317                           ; BSR set to: 0
 18318                           ;EEPROM.c: 152: addr++;
 18319  002FAE  4A10               	infsnz	retrieveLog@addr,f,c
 18320  002FB0  2A11               	incf	retrieveLog@addr+1,f,c
 18321                           
 18322                           ; BSR set to: 0
 18323                           ;EEPROM.c: 153: unsigned char byte3 = EEPROM_read(addr);
 18324  002FB2  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 18325  002FB6  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 18326  002FBA  EC7F  F022         	call	i2_EEPROM_read	;wreg free
 18327  002FBE  6E0D               	movwf	retrieveLog@byte3,c
 18328                           
 18329                           ;EEPROM.c: 154: log_count_can_w_lab = (int)(byte3 & 0b11110000);
 18330  002FC0  C00D  F009         	movff	retrieveLog@byte3,??_retrieveLog
 18331  002FC4  0EF0               	movlw	240
 18332  002FC6  1609               	andwf	??_retrieveLog,f,c
 18333  002FC8  5009               	movf	??_retrieveLog,w,c
 18334  002FCA  0100               	movlb	0	; () banked
 18335  002FCC  6FEC               	movwf	_log_count_can_w_lab& (0+255),b
 18336  002FCE  6BED               	clrf	(_log_count_can_w_lab+1)& (0+255),b
 18337                           
 18338                           ; BSR set to: 0
 18339                           ;EEPROM.c: 155: log_count_can_no_lab = (int)(byte3 & 0b00001111);
 18340  002FD0  C00D  F009         	movff	retrieveLog@byte3,??_retrieveLog
 18341  002FD4  0E0F               	movlw	15
 18342  002FD6  1609               	andwf	??_retrieveLog,f,c
 18343  002FD8  5009               	movf	??_retrieveLog,w,c
 18344  002FDA  0100               	movlb	0	; () banked
 18345  002FDC  6FEA               	movwf	_log_count_can_no_lab& (0+255),b
 18346  002FDE  6BEB               	clrf	(_log_count_can_no_lab+1)& (0+255),b
 18347                           
 18348                           ; BSR set to: 0
 18349                           ;EEPROM.c: 156: addr++;
 18350  002FE0  4A10               	infsnz	retrieveLog@addr,f,c
 18351  002FE2  2A11               	incf	retrieveLog@addr+1,f,c
 18352                           
 18353                           ; BSR set to: 0
 18354                           ;EEPROM.c: 159: for(int i = 0; i < 7; i++){
 18355  002FE4  0E00               	movlw	0
 18356  002FE6  6E0F               	movwf	retrieveLog@i+1,c
 18357  002FE8  0E00               	movlw	0
 18358  002FEA  6E0E               	movwf	retrieveLog@i,c
 18359  002FEC                     i2l5856:
 18360                           
 18361                           ; BSR set to: 0
 18362  002FEC  BE0F               	btfsc	retrieveLog@i+1,7,c
 18363  002FEE  D006               	goto	i2l5860
 18364  002FF0  500F               	movf	retrieveLog@i+1,w,c
 18365  002FF2  E11E               	bnz	i2l5868
 18366  002FF4  0E07               	movlw	7
 18367  002FF6  5C0E               	subwf	retrieveLog@i,w,c
 18368  002FF8  B0D8               	btfsc	status,0,c
 18369  002FFA  D01A               	goto	i2l5868
 18370  002FFC                     i2l5860:
 18371                           
 18372                           ;EEPROM.c: 160: log_startTime[i] = (int)EEPROM_read(addr);
 18373  002FFC  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 18374  003000  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 18375  003004  EC7F  F022         	call	i2_EEPROM_read	;wreg free
 18376  003008  6E09               	movwf	??_retrieveLog& (0+255),c
 18377  00300A  6A0A               	clrf	(??_retrieveLog+1)& (0+255),c
 18378  00300C  90D8               	bcf	status,0,c
 18379  00300E  340E               	rlcf	retrieveLog@i,w,c
 18380  003010  6ED9               	movwf	fsr2l,c
 18381  003012  340F               	rlcf	retrieveLog@i+1,w,c
 18382  003014  6EDA               	movwf	fsr2h,c
 18383  003016  0E00               	movlw	low _log_startTime
 18384  003018  26D9               	addwf	fsr2l,f,c
 18385  00301A  0E01               	movlw	high _log_startTime
 18386  00301C  22DA               	addwfc	fsr2h,f,c
 18387  00301E  C009  FFDE         	movff	??_retrieveLog,postinc2
 18388  003022  C00A  FFDD         	movff	??_retrieveLog+1,postdec2
 18389                           
 18390                           ;EEPROM.c: 161: addr++;
 18391  003026  4A10               	infsnz	retrieveLog@addr,f,c
 18392  003028  2A11               	incf	retrieveLog@addr+1,f,c
 18393  00302A  4A0E               	infsnz	retrieveLog@i,f,c
 18394  00302C  2A0F               	incf	retrieveLog@i+1,f,c
 18395  00302E  D7DE               	goto	i2l5856
 18396  003030                     i2l5868:
 18397                           
 18398                           ;EEPROM.c: 162: }
 18399                           ;EEPROM.c: 165: log_total_time = (int)EEPROM_read(addr);
 18400  003030  C010  F001         	movff	retrieveLog@addr,i2EEPROM_read@address
 18401  003034  C011  F002         	movff	retrieveLog@addr+1,i2EEPROM_read@address+1
 18402  003038  EC7F  F022         	call	i2_EEPROM_read	;wreg free
 18403  00303C  6E09               	movwf	??_retrieveLog& (0+255),c
 18404  00303E  5009               	movf	??_retrieveLog,w,c
 18405  003040  0100               	movlb	0	; () banked
 18406  003042  6FF4               	movwf	_log_total_time& (0+255),b
 18407  003044  6BF5               	clrf	(_log_total_time+1)& (0+255),b
 18408                           
 18409                           ; BSR set to: 0
 18410  003046  0012               	return		;funcret
 18411  003048                     __end_of_retrieveLog:
 18412                           	opt stack 0
 18413                           pclatu	equ	0xFFB
 18414                           pclath	equ	0xFFA
 18415                           tblptru	equ	0xFF8
 18416                           tblptrh	equ	0xFF7
 18417                           tblptrl	equ	0xFF6
 18418                           tablat	equ	0xFF5
 18419                           prodh	equ	0xFF4
 18420                           prodl	equ	0xFF3
 18421                           intcon	equ	0xFF2
 18422                           intcon2	equ	0xFF1
 18423                           intcon3	equ	0xFF0
 18424                           indf0	equ	0xFEF
 18425                           postinc0	equ	0xFEE
 18426                           fsr0h	equ	0xFEA
 18427                           fsr0l	equ	0xFE9
 18428                           wreg	equ	0xFE8
 18429                           postdec1	equ	0xFE5
 18430                           fsr1h	equ	0xFE2
 18431                           fsr1l	equ	0xFE1
 18432                           indf2	equ	0xFDF
 18433                           postinc2	equ	0xFDE
 18434                           postdec2	equ	0xFDD
 18435                           fsr2h	equ	0xFDA
 18436                           fsr2l	equ	0xFD9
 18437                           status	equ	0xFD8
 18438                           
 18439 ;; *************** function i2_EEPROM_read *****************
 18440 ;; Defined at:
 18441 ;;		line 68 in file "EEPROM.c"
 18442 ;; Parameters:    Size  Location     Type
 18443 ;;  address         2    0[COMRAM] unsigned short 
 18444 ;; Auto vars:     Size  Location     Type
 18445 ;;		None
 18446 ;; Return value:  Size  Location     Type
 18447 ;;                  1    wreg      unsigned char 
 18448 ;; Registers used:
 18449 ;;		wreg, status,2
 18450 ;; Tracked objects:
 18451 ;;		On entry : 0/0
 18452 ;;		On exit  : 0/0
 18453 ;;		Unchanged: 0/0
 18454 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18455 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18456 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18457 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18458 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18459 ;;Total ram usage:        2 bytes
 18460 ;; Hardware stack levels used:    1
 18461 ;; This function calls:
 18462 ;;		Nothing
 18463 ;; This function is called by:
 18464 ;;		_retrieveLog
 18465 ;; This function uses a non-reentrant model
 18466 ;;
 18467                           
 18468                           	psect	text75
 18469  0044FE                     __ptext75:
 18470                           	opt stack 0
 18471  0044FE                     i2_EEPROM_read:
 18472                           	opt stack 20
 18473                           
 18474                           ;EEPROM.c: 70: EEADRH = (unsigned char)(address >> 8);
 18475                           
 18476                           ; BSR set to: 0
 18477                           ;incstack = 0
 18478  0044FE  5002               	movf	i2EEPROM_read@address+1,w,c
 18479  004500  6EAA               	movwf	4010,c	;volatile
 18480                           
 18481                           ;EEPROM.c: 71: EEADR = (unsigned char)address;
 18482  004502  C001  FFA9         	movff	i2EEPROM_read@address,4009	;volatile
 18483                           
 18484                           ;EEPROM.c: 73: EECON1bits.EEPGD = 0;
 18485  004506  9EA6               	bcf	4006,7,c	;volatile
 18486                           
 18487                           ;EEPROM.c: 74: EECON1bits.CFGS = 0;
 18488  004508  9CA6               	bcf	4006,6,c	;volatile
 18489                           
 18490                           ;EEPROM.c: 75: EECON1bits.RD = 1;
 18491  00450A  80A6               	bsf	4006,0,c	;volatile
 18492  00450C                     i2l926:
 18493  00450C  B0A6               	btfsc	4006,0,c	;volatile
 18494  00450E  D7FE               	goto	i2l926
 18495                           
 18496                           ;EEPROM.c: 81: return EEDATA;
 18497  004510  50A8               	movf	4008,w,c	;volatile
 18498  004512  0012               	return	
 18499  004514                     __end_ofi2_EEPROM_read:
 18500                           	opt stack 0
 18501                           pclatu	equ	0xFFB
 18502                           pclath	equ	0xFFA
 18503                           tblptru	equ	0xFF8
 18504                           tblptrh	equ	0xFF7
 18505                           tblptrl	equ	0xFF6
 18506                           tablat	equ	0xFF5
 18507                           prodh	equ	0xFF4
 18508                           prodl	equ	0xFF3
 18509                           intcon	equ	0xFF2
 18510                           intcon2	equ	0xFF1
 18511                           intcon3	equ	0xFF0
 18512                           indf0	equ	0xFEF
 18513                           postinc0	equ	0xFEE
 18514                           fsr0h	equ	0xFEA
 18515                           fsr0l	equ	0xFE9
 18516                           wreg	equ	0xFE8
 18517                           postdec1	equ	0xFE5
 18518                           fsr1h	equ	0xFE2
 18519                           fsr1l	equ	0xFE1
 18520                           indf2	equ	0xFDF
 18521                           postinc2	equ	0xFDE
 18522                           postdec2	equ	0xFDD
 18523                           fsr2h	equ	0xFDA
 18524                           fsr2l	equ	0xFD9
 18525                           status	equ	0xFD8
 18526                           
 18527 ;; *************** function _printSortTimer *****************
 18528 ;; Defined at:
 18529 ;;		line 264 in file "sort.c"
 18530 ;; Parameters:    Size  Location     Type
 18531 ;;		None
 18532 ;; Auto vars:     Size  Location     Type
 18533 ;;  i               2   72[COMRAM] int 
 18534 ;;  curTime        14   46[COMRAM] int [7]
 18535 ;;  timeDiff        2   70[COMRAM] unsigned int 
 18536 ;;  sec             2   66[COMRAM] int 
 18537 ;;  min             2   64[COMRAM] int 
 18538 ;;  cur_sec         2   62[COMRAM] unsigned int 
 18539 ;;  start_sec       2   60[COMRAM] unsigned int 
 18540 ;;  hour            2   44[COMRAM] int 
 18541 ;; Return value:  Size  Location     Type
 18542 ;;                  1    wreg      void 
 18543 ;; Registers used:
 18544 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18545 ;; Tracked objects:
 18546 ;;		On entry : 0/0
 18547 ;;		On exit  : 0/0
 18548 ;;		Unchanged: 0/0
 18549 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18550 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18551 ;;      Locals:        30       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18552 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18553 ;;      Totals:        33       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18554 ;;Total ram usage:       33 bytes
 18555 ;; Hardware stack levels used:    1
 18556 ;; Hardware stack levels required when called:    3
 18557 ;; This function calls:
 18558 ;;		i2___lwdiv
 18559 ;;		i2___lwmod
 18560 ;;		i2___wmul
 18561 ;;		i2_getRTC
 18562 ;;		i2_lcdInst
 18563 ;;		i2_printf
 18564 ;; This function is called by:
 18565 ;;		_handler
 18566 ;; This function uses a non-reentrant model
 18567 ;;
 18568                           
 18569                           	psect	text76
 18570  00238E                     __ptext76:
 18571                           	opt stack 0
 18572  00238E                     _printSortTimer:
 18573                           	opt stack 20
 18574                           
 18575                           ;sort.c: 265: getRTC();
 18576                           
 18577                           ;incstack = 0
 18578  00238E  EC3A  F01D         	call	i2_getRTC	;wreg free
 18579                           
 18580                           ;sort.c: 266: int curTime[7];
 18581                           ;sort.c: 267: for(int i = 0; i < 7; i++){
 18582  002392  0E00               	movlw	0
 18583  002394  6E4A               	movwf	printSortTimer@i+1,c
 18584  002396  0E00               	movlw	0
 18585  002398  6E49               	movwf	printSortTimer@i,c
 18586  00239A                     i2l7856:
 18587  00239A  BE4A               	btfsc	printSortTimer@i+1,7,c
 18588  00239C  D006               	goto	i2l7860
 18589  00239E  504A               	movf	printSortTimer@i+1,w,c
 18590  0023A0  E131               	bnz	i2l7866
 18591  0023A2  0E07               	movlw	7
 18592  0023A4  5C49               	subwf	printSortTimer@i,w,c
 18593  0023A6  B0D8               	btfsc	status,0,c
 18594  0023A8  D02D               	goto	i2l7866
 18595  0023AA                     i2l7860:
 18596                           
 18597                           ;sort.c: 268: curTime[i] = (time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
 18598  0023AA  0E24               	movlw	low _time
 18599  0023AC  2449               	addwf	printSortTimer@i,w,c
 18600  0023AE  6ED9               	movwf	fsr2l,c
 18601  0023B0  0E01               	movlw	high _time
 18602  0023B2  204A               	addwfc	printSortTimer@i+1,w,c
 18603  0023B4  6EDA               	movwf	fsr2h,c
 18604  0023B6  50DF               	movf	indf2,w,c
 18605  0023B8  6E2A               	movwf	??_printSortTimer& (0+255),c
 18606  0023BA  3A2A               	swapf	??_printSortTimer,f,c
 18607  0023BC  0E0F               	movlw	15
 18608  0023BE  162A               	andwf	??_printSortTimer,f,c
 18609  0023C0  0E0F               	movlw	15
 18610  0023C2  162A               	andwf	??_printSortTimer,f,c
 18611  0023C4  502A               	movf	??_printSortTimer,w,c
 18612  0023C6  0D0A               	mullw	10
 18613  0023C8  0E24               	movlw	low _time
 18614  0023CA  2449               	addwf	printSortTimer@i,w,c
 18615  0023CC  6ED9               	movwf	fsr2l,c
 18616  0023CE  0E01               	movlw	high _time
 18617  0023D0  204A               	addwfc	printSortTimer@i+1,w,c
 18618  0023D2  6EDA               	movwf	fsr2h,c
 18619  0023D4  50DF               	movf	indf2,w,c
 18620  0023D6  0B0F               	andlw	15
 18621  0023D8  6E2B               	movwf	(??_printSortTimer+1)& (0+255),c
 18622  0023DA  6A2C               	clrf	(??_printSortTimer+2)& (0+255),c
 18623  0023DC  50F3               	movf	prodl,w,c
 18624  0023DE  262B               	addwf	??_printSortTimer+1,f,c
 18625  0023E0  50F4               	movf	prodh,w,c
 18626  0023E2  222C               	addwfc	??_printSortTimer+2,f,c
 18627  0023E4  90D8               	bcf	status,0,c
 18628  0023E6  3449               	rlcf	printSortTimer@i,w,c
 18629  0023E8  6ED9               	movwf	fsr2l,c
 18630  0023EA  344A               	rlcf	printSortTimer@i+1,w,c
 18631  0023EC  6EDA               	movwf	fsr2h,c
 18632  0023EE  0E2F               	movlw	low printSortTimer@curTime
 18633  0023F0  26D9               	addwf	fsr2l,f,c
 18634  0023F2  0E00               	movlw	high printSortTimer@curTime
 18635  0023F4  22DA               	addwfc	fsr2h,f,c
 18636  0023F6  C02B  FFDE         	movff	??_printSortTimer+1,postinc2
 18637  0023FA  C02C  FFDD         	movff	??_printSortTimer+2,postdec2
 18638  0023FE  4A49               	infsnz	printSortTimer@i,f,c
 18639  002400  2A4A               	incf	printSortTimer@i+1,f,c
 18640  002402  D7CB               	goto	i2l7856
 18641  002404                     i2l7866:
 18642                           
 18643                           ;sort.c: 269: }
 18644                           ;sort.c: 270: unsigned int start_sec = startTime[0] + startTime[1]*60 + startTime[2]*360
      +                          0;
 18645  002404  C110  F001         	movff	_startTime+2,i2___wmul@multiplier
 18646  002408  C111  F002         	movff	_startTime+3,i2___wmul@multiplier+1
 18647  00240C  0E00               	movlw	0
 18648  00240E  6E04               	movwf	i2___wmul@multiplicand+1,c
 18649  002410  0E3C               	movlw	60
 18650  002412  6E03               	movwf	i2___wmul@multiplicand,c
 18651  002414  ECED  F021         	call	i2___wmul	;wreg free
 18652  002418  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 18653  00241C  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 18654  002420  C112  F001         	movff	_startTime+4,i2___wmul@multiplier
 18655  002424  C113  F002         	movff	_startTime+5,i2___wmul@multiplier+1
 18656  002428  0E0E               	movlw	14
 18657  00242A  6E04               	movwf	i2___wmul@multiplicand+1,c
 18658  00242C  0E10               	movlw	16
 18659  00242E  6E03               	movwf	i2___wmul@multiplicand,c
 18660  002430  ECED  F021         	call	i2___wmul	;wreg free
 18661  002434  5001               	movf	?i2___wmul,w,c
 18662  002436  262A               	addwf	??_printSortTimer,f,c
 18663  002438  5002               	movf	?i2___wmul+1,w,c
 18664  00243A  222B               	addwfc	??_printSortTimer+1,f,c
 18665  00243C  0101               	movlb	1	; () banked
 18666  00243E  510E               	movf	_startTime& (0+255),w,b
 18667  002440  242A               	addwf	??_printSortTimer,w,c
 18668  002442  6E3D               	movwf	printSortTimer@start_sec,c
 18669  002444  0101               	movlb	1	; () banked
 18670  002446  510F               	movf	(_startTime+1)& (0+255),w,b
 18671  002448  202B               	addwfc	??_printSortTimer+1,w,c
 18672  00244A  6E3E               	movwf	printSortTimer@start_sec+1,c
 18673                           
 18674                           ;sort.c: 271: unsigned int cur_sec = curTime[0] + curTime[1]*60 + curTime[2]*3600;
 18675  00244C  C031  F001         	movff	printSortTimer@curTime+2,i2___wmul@multiplier
 18676  002450  C032  F002         	movff	printSortTimer@curTime+3,i2___wmul@multiplier+1
 18677  002454  0E00               	movlw	0
 18678  002456  6E04               	movwf	i2___wmul@multiplicand+1,c
 18679  002458  0E3C               	movlw	60
 18680  00245A  6E03               	movwf	i2___wmul@multiplicand,c
 18681  00245C  ECED  F021         	call	i2___wmul	;wreg free
 18682  002460  C001  F02A         	movff	?i2___wmul,??_printSortTimer
 18683  002464  C002  F02B         	movff	?i2___wmul+1,??_printSortTimer+1
 18684  002468  C033  F001         	movff	printSortTimer@curTime+4,i2___wmul@multiplier
 18685  00246C  C034  F002         	movff	printSortTimer@curTime+5,i2___wmul@multiplier+1
 18686  002470  0E0E               	movlw	14
 18687  002472  6E04               	movwf	i2___wmul@multiplicand+1,c
 18688  002474  0E10               	movlw	16
 18689  002476  6E03               	movwf	i2___wmul@multiplicand,c
 18690  002478  ECED  F021         	call	i2___wmul	;wreg free
 18691  00247C  5001               	movf	?i2___wmul,w,c
 18692  00247E  262A               	addwf	??_printSortTimer,f,c
 18693  002480  5002               	movf	?i2___wmul+1,w,c
 18694  002482  222B               	addwfc	??_printSortTimer+1,f,c
 18695  002484  502F               	movf	printSortTimer@curTime,w,c
 18696  002486  242A               	addwf	??_printSortTimer,w,c
 18697  002488  6E3F               	movwf	printSortTimer@cur_sec,c
 18698  00248A  5030               	movf	printSortTimer@curTime+1,w,c
 18699  00248C  202B               	addwfc	??_printSortTimer+1,w,c
 18700  00248E  6E40               	movwf	printSortTimer@cur_sec+1,c
 18701                           
 18702                           ;sort.c: 272: unsigned int timeDiff = cur_sec - start_sec;
 18703  002490  C03D  F02A         	movff	printSortTimer@start_sec,??_printSortTimer
 18704  002494  C03E  F02B         	movff	printSortTimer@start_sec+1,??_printSortTimer+1
 18705  002498  1E2A               	comf	??_printSortTimer,f,c
 18706  00249A  1E2B               	comf	??_printSortTimer+1,f,c
 18707  00249C  4A2A               	infsnz	??_printSortTimer,f,c
 18708  00249E  2A2B               	incf	??_printSortTimer+1,f,c
 18709  0024A0  503F               	movf	printSortTimer@cur_sec,w,c
 18710  0024A2  242A               	addwf	??_printSortTimer,w,c
 18711  0024A4  6E47               	movwf	printSortTimer@timeDiff,c
 18712  0024A6  5040               	movf	printSortTimer@cur_sec+1,w,c
 18713  0024A8  202B               	addwfc	??_printSortTimer+1,w,c
 18714  0024AA  6E48               	movwf	printSortTimer@timeDiff+1,c
 18715                           
 18716                           ;sort.c: 274: total_time = timeDiff;
 18717  0024AC  C047  F0F8         	movff	printSortTimer@timeDiff,_total_time
 18718  0024B0  C048  F0F9         	movff	printSortTimer@timeDiff+1,_total_time+1
 18719                           
 18720                           ;sort.c: 276: if(timeDiff >= 10){
 18721  0024B4  5048               	movf	printSortTimer@timeDiff+1,w,c
 18722  0024B6  E104               	bnz	i2u669_40
 18723  0024B8  0E0A               	movlw	10
 18724  0024BA  5C47               	subwf	printSortTimer@timeDiff,w,c
 18725  0024BC  A0D8               	btfss	status,0,c
 18726  0024BE  D003               	goto	i2l7876
 18727  0024C0                     i2u669_40:
 18728                           
 18729                           ;sort.c: 277: machine_state = DoneSorting_state;
 18730  0024C0  0E02               	movlw	2
 18731  0024C2  0100               	movlb	0	; () banked
 18732  0024C4  6FFC               	movwf	_machine_state& (0+255),b
 18733  0024C6                     i2l7876:
 18734                           
 18735                           ;sort.c: 279: }
 18736                           ;sort.c: 281: int hour = timeDiff / 3600;
 18737  0024C6  C047  F006         	movff	printSortTimer@timeDiff,i2___lwdiv@dividend
 18738  0024CA  C048  F007         	movff	printSortTimer@timeDiff+1,i2___lwdiv@dividend+1
 18739  0024CE  0E0E               	movlw	14
 18740  0024D0  6E09               	movwf	i2___lwdiv@divisor+1,c
 18741  0024D2  0E10               	movlw	16
 18742  0024D4  6E08               	movwf	i2___lwdiv@divisor,c
 18743  0024D6  ECF0  F01E         	call	i2___lwdiv	;wreg free
 18744  0024DA  C006  F02D         	movff	?i2___lwdiv,printSortTimer@hour
 18745  0024DE  C007  F02E         	movff	?i2___lwdiv+1,printSortTimer@hour+1
 18746                           
 18747                           ;sort.c: 282: int min = (timeDiff % 3600) / 60;
 18748  0024E2  0E0E               	movlw	14
 18749  0024E4  6E04               	movwf	i2___lwmod@divisor+1,c
 18750  0024E6  0E10               	movlw	16
 18751  0024E8  6E03               	movwf	i2___lwmod@divisor,c
 18752  0024EA  C047  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 18753  0024EE  C048  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 18754  0024F2  ECD6  F01F         	call	i2___lwmod	;wreg free
 18755  0024F6  C001  F006         	movff	?i2___lwmod,i2___lwdiv@dividend
 18756  0024FA  C002  F007         	movff	?i2___lwmod+1,i2___lwdiv@dividend+1
 18757  0024FE  0E00               	movlw	0
 18758  002500  6E09               	movwf	i2___lwdiv@divisor+1,c
 18759  002502  0E3C               	movlw	60
 18760  002504  6E08               	movwf	i2___lwdiv@divisor,c
 18761  002506  ECF0  F01E         	call	i2___lwdiv	;wreg free
 18762  00250A  C006  F041         	movff	?i2___lwdiv,printSortTimer@min
 18763  00250E  C007  F042         	movff	?i2___lwdiv+1,printSortTimer@min+1
 18764                           
 18765                           ;sort.c: 283: int sec = (timeDiff % 3600) % 60;
 18766  002512  0E0E               	movlw	14
 18767  002514  6E04               	movwf	i2___lwmod@divisor+1,c
 18768  002516  0E10               	movlw	16
 18769  002518  6E03               	movwf	i2___lwmod@divisor,c
 18770  00251A  C047  F001         	movff	printSortTimer@timeDiff,i2___lwmod@dividend
 18771  00251E  C048  F002         	movff	printSortTimer@timeDiff+1,i2___lwmod@dividend+1
 18772  002522  ECD6  F01F         	call	i2___lwmod	;wreg free
 18773  002526  C001  F045         	movff	?i2___lwmod,_printSortTimer$2360
 18774  00252A  C002  F046         	movff	?i2___lwmod+1,_printSortTimer$2360+1
 18775                           
 18776                           ;sort.c: 283: int sec = (timeDiff % 3600) % 60;
 18777  00252E  C045  F001         	movff	_printSortTimer$2360,i2___lwmod@dividend
 18778  002532  C046  F002         	movff	_printSortTimer$2360+1,i2___lwmod@dividend+1
 18779  002536  0E00               	movlw	0
 18780  002538  6E04               	movwf	i2___lwmod@divisor+1,c
 18781  00253A  0E3C               	movlw	60
 18782  00253C  6E03               	movwf	i2___lwmod@divisor,c
 18783  00253E  ECD6  F01F         	call	i2___lwmod	;wreg free
 18784  002542  C001  F043         	movff	?i2___lwmod,printSortTimer@sec
 18785  002546  C002  F044         	movff	?i2___lwmod+1,printSortTimer@sec+1
 18786                           
 18787                           ;sort.c: 285: lcdInst(0b10000000);;
 18788  00254A  0E80               	movlw	128
 18789  00254C  ECB3  F022         	call	i2_lcdInst
 18790                           
 18791                           ;sort.c: 286: printf("SORTING...");
 18792  002550  0E84               	movlw	low STR_64
 18793  002552  6E0D               	movwf	i2printf@f,c
 18794  002554  0EFF               	movlw	high STR_64
 18795  002556  6E0E               	movwf	i2printf@f+1,c
 18796  002558  ECB8  F00A         	call	i2_printf	;wreg free
 18797                           
 18798                           ;sort.c: 287: lcdInst(0b11000000);;
 18799  00255C  0EC0               	movlw	192
 18800  00255E  ECB3  F022         	call	i2_lcdInst
 18801                           
 18802                           ;sort.c: 288: printf("TIME %d:%02d", min, sec);
 18803  002562  0E55               	movlw	low STR_65
 18804  002564  6E0D               	movwf	i2printf@f,c
 18805  002566  0EFF               	movlw	high STR_65
 18806  002568  6E0E               	movwf	i2printf@f+1,c
 18807  00256A  C041  F00F         	movff	printSortTimer@min,?i2_printf+2
 18808  00256E  C042  F010         	movff	printSortTimer@min+1,?i2_printf+3
 18809  002572  C043  F011         	movff	printSortTimer@sec,?i2_printf+4
 18810  002576  C044  F012         	movff	printSortTimer@sec+1,?i2_printf+5
 18811  00257A  ECB8  F00A         	call	i2_printf	;wreg free
 18812  00257E  0012               	return		;funcret
 18813  002580                     __end_of_printSortTimer:
 18814                           	opt stack 0
 18815                           pclatu	equ	0xFFB
 18816                           pclath	equ	0xFFA
 18817                           tblptru	equ	0xFF8
 18818                           tblptrh	equ	0xFF7
 18819                           tblptrl	equ	0xFF6
 18820                           tablat	equ	0xFF5
 18821                           prodh	equ	0xFF4
 18822                           prodl	equ	0xFF3
 18823                           intcon	equ	0xFF2
 18824                           intcon2	equ	0xFF1
 18825                           intcon3	equ	0xFF0
 18826                           indf0	equ	0xFEF
 18827                           postinc0	equ	0xFEE
 18828                           fsr0h	equ	0xFEA
 18829                           fsr0l	equ	0xFE9
 18830                           wreg	equ	0xFE8
 18831                           postdec1	equ	0xFE5
 18832                           fsr1h	equ	0xFE2
 18833                           fsr1l	equ	0xFE1
 18834                           indf2	equ	0xFDF
 18835                           postinc2	equ	0xFDE
 18836                           postdec2	equ	0xFDD
 18837                           fsr2h	equ	0xFDA
 18838                           fsr2l	equ	0xFD9
 18839                           status	equ	0xFD8
 18840                           
 18841 ;; *************** function i2_printf *****************
 18842 ;; Defined at:
 18843 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 18844 ;; Parameters:    Size  Location     Type
 18845 ;;  f               2   12[COMRAM] PTR const unsigned char 
 18846 ;;		 -> STR_111(17), STR_110(17), STR_109(10), STR_108(13), 
 18847 ;;		 -> STR_107(18), STR_106(18), STR_105(17), STR_104(15), 
 18848 ;;		 -> STR_103(15), STR_102(15), STR_101(17), STR_100(17), 
 18849 ;;		 -> STR_99(17), STR_98(16), STR_97(17), STR_96(17), 
 18850 ;;		 -> STR_95(17), STR_94(17), STR_93(17), STR_92(17), 
 18851 ;;		 -> STR_91(15), STR_90(11), STR_89(17), STR_88(11), 
 18852 ;;		 -> STR_87(17), STR_86(14), STR_85(15), STR_84(14), 
 18853 ;;		 -> STR_83(10), STR_82(16), STR_81(15), STR_80(15), 
 18854 ;;		 -> STR_79(13), STR_78(14), STR_77(8), STR_76(14), 
 18855 ;;		 -> STR_75(15), STR_74(12), STR_73(14), STR_72(17), 
 18856 ;;		 -> STR_71(14), STR_70(15), STR_69(17), STR_68(17), 
 18857 ;;		 -> STR_67(7), STR_66(21), STR_65(13), STR_64(11), 
 18858 ;;		 -> STR_63(24), STR_50(17), STR_49(17), STR_48(17), 
 18859 ;;		 -> STR_47(17), STR_46(17), STR_45(17), STR_44(17), 
 18860 ;;		 -> STR_43(17), STR_42(17), STR_41(17), STR_40(17), 
 18861 ;;		 -> STR_39(17), STR_38(17), STR_37(17), STR_36(17), 
 18862 ;;		 -> STR_35(17), STR_34(17), STR_33(17), STR_32(17), 
 18863 ;;		 -> STR_31(17), STR_30(17), STR_29(3), STR_28(17), 
 18864 ;;		 -> STR_27(19), STR_26(17), STR_25(19), STR_24(17), 
 18865 ;;		 -> STR_23(14), STR_22(10), STR_21(24), STR_7(7), 
 18866 ;;		 -> STR_6(17), STR_5(18), STR_4(16), STR_3(18), 
 18867 ;;		 -> STR_2(14), STR_1(18), 
 18868 ;; Auto vars:     Size  Location     Type
 18869 ;;  printf          4    0        struct .
 18870 ;;  printf          2   39[COMRAM] int 
 18871 ;;  printf          2   35[COMRAM] unsigned int 
 18872 ;;  printf          2   33[COMRAM] unsigned int 
 18873 ;;  printf          2   31[COMRAM] PTR void [1]
 18874 ;;		 -> ?i2_printf(2), ?_printf(2), 
 18875 ;;  printf          2   29[COMRAM] PTR const unsigned char 
 18876 ;;		 -> STR_112(7), count_total(2), printRTC@month(4), UI@month(4), 
 18877 ;;  printf          1   38[COMRAM] char 
 18878 ;;  printf          1   37[COMRAM] unsigned char 
 18879 ;;  printf          1   28[COMRAM] char 
 18880 ;; Return value:  Size  Location     Type
 18881 ;;                  2   12[COMRAM] int 
 18882 ;; Registers used:
 18883 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18884 ;; Tracked objects:
 18885 ;;		On entry : 0/0
 18886 ;;		On exit  : 0/0
 18887 ;;		Unchanged: 0/0
 18888 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18889 ;;      Params:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18890 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18891 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18892 ;;      Totals:        29       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18893 ;;Total ram usage:       29 bytes
 18894 ;; Hardware stack levels used:    1
 18895 ;; Hardware stack levels required when called:    2
 18896 ;; This function calls:
 18897 ;;		i2___lwdiv
 18898 ;;		i2___lwmod
 18899 ;;		i2___wmul
 18900 ;;		i2_isdigit
 18901 ;;		i2_putch
 18902 ;; This function is called by:
 18903 ;;		_change_state_to_menu_11
 18904 ;;		_change_state_to_menu_23
 18905 ;;		_change_state_to_logs_11
 18906 ;;		_change_state_to_logs_12
 18907 ;;		_change_state_to_logs_22
 18908 ;;		_change_state_to_logs_23
 18909 ;;		_change_state_to_logs_33
 18910 ;;		_change_state_to_logs_34
 18911 ;;		_printSortTimer
 18912 ;;		i2_change_state_to_menu_start
 18913 ;;		i2_change_state_to_menu_12
 18914 ;;		i2_change_state_to_menu_22
 18915 ;;		i2_printRTC
 18916 ;; This function uses a non-reentrant model
 18917 ;;
 18918                           
 18919                           	psect	text77
 18920  001570                     __ptext77:
 18921                           	opt stack 0
 18922  001570                     i2_printf:
 18923                           	opt stack 19
 18924                           
 18925                           ;doprnt.c: 466: va_list ap;
 18926                           ;doprnt.c: 499: signed char c;
 18927                           ;doprnt.c: 501: int width;
 18928                           ;doprnt.c: 506: signed char prec;
 18929                           ;doprnt.c: 508: unsigned char flag;
 18930                           ;doprnt.c: 523: union {
 18931                           ;doprnt.c: 524: unsigned long vd;
 18932                           ;doprnt.c: 525: double integ;
 18933                           ;doprnt.c: 526: } tmpval;
 18934                           ;doprnt.c: 528: unsigned int val;
 18935                           ;doprnt.c: 529: unsigned len;
 18936                           ;doprnt.c: 530: const char * cp;
 18937                           ;doprnt.c: 533: *ap = __va_start();
 18938                           
 18939                           ;incstack = 0
 18940  001570  0E0F               	movlw	low (?i2_printf+2)
 18941  001572  6E20               	movwf	i2printf@ap,c
 18942  001574  0E00               	movlw	high (?i2_printf+2)
 18943  001576  6E21               	movwf	i2printf@ap+1,c
 18944                           
 18945                           ;doprnt.c: 536: while(c = *f++) {
 18946  001578  D1A4               	goto	i2l5674
 18947  00157A                     i2l5544:
 18948                           
 18949                           ;doprnt.c: 538: if(c != '%')
 18950  00157A  0E25               	movlw	37
 18951  00157C  1827               	xorwf	i2printf@c,w,c
 18952  00157E  B4D8               	btfsc	status,2,c
 18953  001580  D004               	goto	i2l5548
 18954                           
 18955                           ;doprnt.c: 540: {
 18956                           ;doprnt.c: 541: (putch(c) );
 18957  001582  5027               	movf	i2printf@c,w,c
 18958  001584  ECAD  F022         	call	i2_putch
 18959                           
 18960                           ;doprnt.c: 542: continue;
 18961  001588  D19C               	goto	i2l5674
 18962  00158A                     i2l5548:
 18963                           
 18964                           ;doprnt.c: 543: }
 18965                           ;doprnt.c: 546: width = 0;
 18966  00158A  0E00               	movlw	0
 18967  00158C  6E29               	movwf	i2printf@width+1,c
 18968  00158E  0E00               	movlw	0
 18969  001590  6E28               	movwf	i2printf@width,c
 18970                           
 18971                           ;doprnt.c: 548: flag = 0;
 18972  001592  0E00               	movlw	0
 18973  001594  6E26               	movwf	i2printf@flag,c
 18974                           
 18975                           ;doprnt.c: 551: switch(*f) {
 18976                           
 18977                           ;doprnt.c: 550: for(;;) {
 18978  001596  D003               	goto	i2l5554
 18979  001598                     i2l5550:
 18980                           
 18981                           ;doprnt.c: 580: flag |= 0x04;
 18982  001598  8426               	bsf	i2printf@flag,2,c
 18983                           
 18984                           ;doprnt.c: 581: f++;
 18985  00159A  4A0D               	infsnz	i2printf@f,f,c
 18986  00159C  2A0E               	incf	i2printf@f+1,f,c
 18987  00159E                     i2l5554:
 18988  00159E  C00D  FFF6         	movff	i2printf@f,tblptrl
 18989  0015A2  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 18990  0015A6                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 18991  0015A6  6AF8               	clrf	tblptru,c
 18992  0015A8                     	endif
 18993  0015A8                     	if	0	;tblptru may be non-zero
 18994  0015A8                     	endif
 18995  0015A8  0008               	tblrd		*
 18996  0015AA  50F5               	movf	tablat,w,c
 18997                           
 18998                           ; Switch size 1, requested type "space"
 18999                           ; Number of cases is 1, Range of values is 48 to 48
 19000                           ; switch strategies available:
 19001                           ; Name         Instructions Cycles
 19002                           ; simple_byte            4     3 (average)
 19003                           ;	Chosen strategy is simple_byte
 19004  0015AC  0A30               	xorlw	48	; case 48
 19005  0015AE  B4D8               	btfsc	status,2,c
 19006  0015B0  D7F3               	goto	i2l5550
 19007                           
 19008                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 19009                           
 19010                           ;doprnt.c: 586: }
 19011                           
 19012                           ;doprnt.c: 585: break;
 19013  0015B2  C00D  FFF6         	movff	i2printf@f,tblptrl
 19014  0015B6  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 19015  0015BA                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 19016  0015BA  6AF8               	clrf	tblptru,c
 19017  0015BC                     	endif
 19018  0015BC                     	if	0	;tblptru may be non-zero
 19019  0015BC                     	endif
 19020  0015BC  0008               	tblrd		*
 19021  0015BE  50F5               	movf	tablat,w,c
 19022  0015C0  EC59  F022         	call	i2_isdigit
 19023  0015C4  A0D8               	btfss	status,0,c
 19024  0015C6  D0A6               	goto	i2l5602
 19025                           
 19026                           ;doprnt.c: 598: width = 0;
 19027  0015C8  0E00               	movlw	0
 19028  0015CA  6E29               	movwf	i2printf@width+1,c
 19029  0015CC  0E00               	movlw	0
 19030  0015CE  6E28               	movwf	i2printf@width,c
 19031  0015D0                     i2l5560:
 19032                           
 19033                           ;doprnt.c: 600: width *= 10;
 19034  0015D0  C028  F001         	movff	i2printf@width,i2___wmul@multiplier
 19035  0015D4  C029  F002         	movff	i2printf@width+1,i2___wmul@multiplier+1
 19036  0015D8  0E00               	movlw	0
 19037  0015DA  6E04               	movwf	i2___wmul@multiplicand+1,c
 19038  0015DC  0E0A               	movlw	10
 19039  0015DE  6E03               	movwf	i2___wmul@multiplicand,c
 19040  0015E0  ECED  F021         	call	i2___wmul	;wreg free
 19041  0015E4  C001  F028         	movff	?i2___wmul,i2printf@width
 19042  0015E8  C002  F029         	movff	?i2___wmul+1,i2printf@width+1
 19043                           
 19044                           ;doprnt.c: 601: width += *f++ - '0';
 19045  0015EC  0ED0               	movlw	208
 19046  0015EE  6E19               	movwf	??i2_printf& (0+255),c
 19047  0015F0  0EFF               	movlw	255
 19048  0015F2  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 19049  0015F4  C00D  FFF6         	movff	i2printf@f,tblptrl
 19050  0015F8  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 19051  0015FC                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 19052  0015FC  6AF8               	clrf	tblptru,c
 19053  0015FE                     	endif
 19054  0015FE                     	if	0	;tblptru may be non-zero
 19055  0015FE                     	endif
 19056  0015FE  0008               	tblrd		*
 19057  001600  50F5               	movf	tablat,w,c
 19058  001602  6E1B               	movwf	(??i2_printf+2)& (0+255),c
 19059  001604  6A1C               	clrf	(??i2_printf+3)& (0+255),c
 19060  001606  5019               	movf	??i2_printf,w,c
 19061  001608  261B               	addwf	??i2_printf+2,f,c
 19062  00160A  501A               	movf	??i2_printf+1,w,c
 19063  00160C  221C               	addwfc	??i2_printf+3,f,c
 19064  00160E  501B               	movf	??i2_printf+2,w,c
 19065  001610  2628               	addwf	i2printf@width,f,c
 19066  001612  501C               	movf	??i2_printf+3,w,c
 19067  001614  2229               	addwfc	i2printf@width+1,f,c
 19068  001616  4A0D               	infsnz	i2printf@f,f,c
 19069  001618  2A0E               	incf	i2printf@f+1,f,c
 19070                           
 19071                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 19072  00161A  C00D  FFF6         	movff	i2printf@f,tblptrl
 19073  00161E  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 19074  001622                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 19075  001622  6AF8               	clrf	tblptru,c
 19076  001624                     	endif
 19077  001624                     	if	0	;tblptru may be non-zero
 19078  001624                     	endif
 19079  001624  0008               	tblrd		*
 19080  001626  50F5               	movf	tablat,w,c
 19081  001628  EC59  F022         	call	i2_isdigit
 19082  00162C  A0D8               	btfss	status,0,c
 19083  00162E  D072               	goto	i2l5602
 19084  001630  D7CF               	goto	i2l5560
 19085  001632                     i2l5568:
 19086                           
 19087                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 19088  001632  C020  FFD9         	movff	i2printf@ap,fsr2l
 19089  001636  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 19090  00163A  CFDE F01E          	movff	postinc2,i2printf@cp
 19091  00163E  CFDD F01F          	movff	postdec2,i2printf@cp+1
 19092  001642  0E02               	movlw	2
 19093  001644  2620               	addwf	i2printf@ap,f,c
 19094  001646  0E00               	movlw	0
 19095  001648  2221               	addwfc	i2printf@ap+1,f,c
 19096                           
 19097                           ;doprnt.c: 740: if(!cp)
 19098  00164A  501E               	movf	i2printf@cp,w,c
 19099  00164C  101F               	iorwf	i2printf@cp+1,w,c
 19100  00164E  A4D8               	btfss	status,2,c
 19101  001650  D004               	goto	i2l5576
 19102                           
 19103                           ;doprnt.c: 741: cp = "(null)";
 19104  001652  0EB5               	movlw	low STR_112
 19105  001654  6E1E               	movwf	i2printf@cp,c
 19106  001656  0EFF               	movlw	high STR_112
 19107  001658  6E1F               	movwf	i2printf@cp+1,c
 19108  00165A                     i2l5576:
 19109                           
 19110                           ;doprnt.c: 745: len = 0;
 19111  00165A  0E00               	movlw	0
 19112  00165C  6E23               	movwf	i2printf@len+1,c
 19113  00165E  0E00               	movlw	0
 19114  001660  6E22               	movwf	i2printf@len,c
 19115                           
 19116                           ;doprnt.c: 746: while(cp[len])
 19117  001662  D002               	goto	i2l5580
 19118  001664                     i2l5578:
 19119                           
 19120                           ;doprnt.c: 747: len++;
 19121  001664  4A22               	infsnz	i2printf@len,f,c
 19122  001666  2A23               	incf	i2printf@len+1,f,c
 19123  001668                     i2l5580:
 19124  001668  5022               	movf	i2printf@len,w,c
 19125  00166A  241E               	addwf	i2printf@cp,w,c
 19126  00166C  6E19               	movwf	??i2_printf& (0+255),c
 19127  00166E  5023               	movf	i2printf@len+1,w,c
 19128  001670  201F               	addwfc	i2printf@cp+1,w,c
 19129  001672  6E1A               	movwf	(??i2_printf+1)& (0+255),c
 19130  001674  C019  FFF6         	movff	??i2_printf,tblptrl
 19131  001678  C01A  FFF7         	movff	??i2_printf+1,tblptrh
 19132  00167C  0E00               	movlw	low (__mediumconst shr (0+16))
 19133  00167E  6EF8               	movwf	tblptru,c
 19134  001680  0E0F               	movlw	(high __ramtop+-1)
 19135  001682  64F7               	cpfsgt	tblptrh,c
 19136  001684  D003               	bra	i2u409_47
 19137  001686  0008               	tblrd		*
 19138  001688  50F5               	movf	tablat,w,c
 19139  00168A  D005               	bra	i2u409_40
 19140  00168C                     i2u409_47:
 19141  00168C  CFF6 FFE9          	movff	tblptrl,fsr0l
 19142  001690  CFF7 FFEA          	movff	tblptrh,fsr0h
 19143  001694  50EF               	movf	indf0,w,c
 19144  001696                     i2u409_40:
 19145  001696  0900               	iorlw	0
 19146  001698  A4D8               	btfss	status,2,c
 19147  00169A  D7E4               	goto	i2l5578
 19148                           
 19149                           ;doprnt.c: 757: if(width > len)
 19150  00169C  5028               	movf	i2printf@width,w,c
 19151  00169E  5C22               	subwf	i2printf@len,w,c
 19152  0016A0  5029               	movf	i2printf@width+1,w,c
 19153  0016A2  5823               	subwfb	i2printf@len+1,w,c
 19154  0016A4  B0D8               	btfsc	status,0,c
 19155  0016A6  D005               	goto	i2l5586
 19156                           
 19157                           ;doprnt.c: 758: width -= len;
 19158  0016A8  5022               	movf	i2printf@len,w,c
 19159  0016AA  5E28               	subwf	i2printf@width,f,c
 19160  0016AC  5023               	movf	i2printf@len+1,w,c
 19161  0016AE  5A29               	subwfb	i2printf@width+1,f,c
 19162  0016B0  D008               	goto	i2l5590
 19163  0016B2                     i2l5586:
 19164                           
 19165                           ;doprnt.c: 759: else
 19166                           ;doprnt.c: 760: width = 0;
 19167  0016B2  0E00               	movlw	0
 19168  0016B4  6E29               	movwf	i2printf@width+1,c
 19169  0016B6  0E00               	movlw	0
 19170  0016B8  6E28               	movwf	i2printf@width,c
 19171                           
 19172                           ;doprnt.c: 764: while(width--)
 19173  0016BA  D003               	goto	i2l5590
 19174  0016BC                     i2l5588:
 19175                           
 19176                           ;doprnt.c: 765: (putch(' ') );
 19177  0016BC  0E20               	movlw	32
 19178  0016BE  ECAD  F022         	call	i2_putch
 19179  0016C2                     i2l5590:
 19180  0016C2  0628               	decf	i2printf@width,f,c
 19181  0016C4  A0D8               	btfss	status,0,c
 19182  0016C6  0629               	decf	i2printf@width+1,f,c
 19183  0016C8  2828               	incf	i2printf@width,w,c
 19184  0016CA  E1F8               	bnz	i2l5588
 19185  0016CC  2829               	incf	i2printf@width+1,w,c
 19186  0016CE  B4D8               	btfsc	status,2,c
 19187  0016D0  D016               	goto	i2l5596
 19188  0016D2  D7F4               	goto	i2l5588
 19189  0016D4                     i2l5592:
 19190                           
 19191                           ;doprnt.c: 768: (putch(*cp++) );
 19192  0016D4  C01E  FFF6         	movff	i2printf@cp,tblptrl
 19193  0016D8  C01F  FFF7         	movff	i2printf@cp+1,tblptrh
 19194  0016DC  0E00               	movlw	low (__mediumconst shr (0+16))
 19195  0016DE  6EF8               	movwf	tblptru,c
 19196  0016E0  0E0F               	movlw	(high __ramtop+-1)
 19197  0016E2  64F7               	cpfsgt	tblptrh,c
 19198  0016E4  D003               	bra	i2u413_47
 19199  0016E6  0008               	tblrd		*
 19200  0016E8  50F5               	movf	tablat,w,c
 19201  0016EA  D005               	bra	i2u413_40
 19202  0016EC                     i2u413_47:
 19203  0016EC  CFF6 FFE9          	movff	tblptrl,fsr0l
 19204  0016F0  CFF7 FFEA          	movff	tblptrh,fsr0h
 19205  0016F4  50EF               	movf	indf0,w,c
 19206  0016F6                     i2u413_40:
 19207  0016F6  ECAD  F022         	call	i2_putch
 19208  0016FA  4A1E               	infsnz	i2printf@cp,f,c
 19209  0016FC  2A1F               	incf	i2printf@cp+1,f,c
 19210  0016FE                     i2l5596:
 19211  0016FE  0622               	decf	i2printf@len,f,c
 19212  001700  A0D8               	btfss	status,0,c
 19213  001702  0623               	decf	i2printf@len+1,f,c
 19214  001704  2822               	incf	i2printf@len,w,c
 19215  001706  E1E6               	bnz	i2l5592
 19216  001708  2823               	incf	i2printf@len+1,w,c
 19217  00170A  B4D8               	btfsc	status,2,c
 19218  00170C  D0DA               	goto	i2l5674
 19219  00170E  D7E2               	goto	i2l5592
 19220  001710                     i2l5598:
 19221                           
 19222                           ;doprnt.c: 818: flag |= 0x40;
 19223  001710  8C26               	bsf	i2printf@flag,6,c
 19224                           
 19225                           ;doprnt.c: 822: }
 19226                           
 19227                           ;doprnt.c: 819: break;
 19228  001712  D01B               	goto	i2l1224
 19229  001714                     i2l5602:
 19230  001714  C00D  FFF6         	movff	i2printf@f,tblptrl
 19231  001718  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 19232  00171C  4A0D               	infsnz	i2printf@f,f,c
 19233  00171E  2A0E               	incf	i2printf@f+1,f,c
 19234  001720                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 19235  001720  6AF8               	clrf	tblptru,c
 19236  001722                     	endif
 19237  001722                     	if	0	;tblptru may be non-zero
 19238  001722                     	endif
 19239  001722  0008               	tblrd		*
 19240  001724  CFF5 F027          	movff	tablat,i2printf@c
 19241  001728  5027               	movf	i2printf@c,w,c
 19242                           
 19243                           ; Switch size 1, requested type "space"
 19244                           ; Number of cases is 5, Range of values is 0 to 117
 19245                           ; switch strategies available:
 19246                           ; Name         Instructions Cycles
 19247                           ; simple_byte           16     9 (average)
 19248                           ;	Chosen strategy is simple_byte
 19249  00172A  0A00               	xorlw	0	; case 0
 19250  00172C  B4D8               	btfsc	status,2,c
 19251  00172E  0012               	return	
 19252  001730  0A64               	xorlw	100	; case 100
 19253  001732  B4D8               	btfsc	status,2,c
 19254  001734  D00A               	goto	i2l1224
 19255  001736  0A0D               	xorlw	13	; case 105
 19256  001738  B4D8               	btfsc	status,2,c
 19257  00173A  D007               	goto	i2l1224
 19258  00173C  0A1A               	xorlw	26	; case 115
 19259  00173E  B4D8               	btfsc	status,2,c
 19260  001740  D778               	goto	i2l5568
 19261  001742  0A06               	xorlw	6	; case 117
 19262  001744  B4D8               	btfsc	status,2,c
 19263  001746  D7E4               	goto	i2l5598
 19264  001748  D0BC               	goto	i2l5674
 19265  00174A                     i2l1224:
 19266                           
 19267                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
 19268  00174A  BC26               	btfsc	i2printf@flag,6,c
 19269  00174C  D015               	goto	i2l5614
 19270                           
 19271                           ;doprnt.c: 1253: {
 19272                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 19273  00174E  C020  FFD9         	movff	i2printf@ap,fsr2l
 19274  001752  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 19275  001756  CFDE F024          	movff	postinc2,i2printf@val
 19276  00175A  CFDD F025          	movff	postdec2,i2printf@val+1
 19277  00175E  0E02               	movlw	2
 19278  001760  2620               	addwf	i2printf@ap,f,c
 19279  001762  0E00               	movlw	0
 19280  001764  2221               	addwfc	i2printf@ap+1,f,c
 19281                           
 19282                           ;doprnt.c: 1261: if((int)val < 0) {
 19283  001766  AE25               	btfss	i2printf@val+1,7,c
 19284  001768  D013               	goto	i2l5618
 19285                           
 19286                           ;doprnt.c: 1262: flag |= 0x03;
 19287  00176A  0E03               	movlw	3
 19288  00176C  1226               	iorwf	i2printf@flag,f,c
 19289                           
 19290                           ;doprnt.c: 1263: val = -val;
 19291  00176E  6C24               	negf	i2printf@val,c
 19292  001770  1E25               	comf	i2printf@val+1,f,c
 19293  001772  B0D8               	btfsc	status,0,c
 19294  001774  2A25               	incf	i2printf@val+1,f,c
 19295                           
 19296                           ;doprnt.c: 1264: }
 19297                           ;doprnt.c: 1266: }
 19298  001776  D00C               	goto	i2l5618
 19299  001778                     i2l5614:
 19300                           
 19301                           ;doprnt.c: 1268: else
 19302                           ;doprnt.c: 1273: {
 19303                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 19304  001778  C020  FFD9         	movff	i2printf@ap,fsr2l
 19305  00177C  C021  FFDA         	movff	i2printf@ap+1,fsr2h
 19306  001780  CFDE F024          	movff	postinc2,i2printf@val
 19307  001784  CFDD F025          	movff	postdec2,i2printf@val+1
 19308  001788  0E02               	movlw	2
 19309  00178A  2620               	addwf	i2printf@ap,f,c
 19310  00178C  0E00               	movlw	0
 19311  00178E  2221               	addwfc	i2printf@ap+1,f,c
 19312  001790                     i2l5618:
 19313                           
 19314                           ;doprnt.c: 1287: }
 19315                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 19316  001790  0E01               	movlw	1
 19317  001792  6E27               	movwf	i2printf@c,c
 19318  001794                     i2l5620:
 19319  001794  0E05               	movlw	5
 19320  001796  1827               	xorwf	i2printf@c,w,c
 19321  001798  B4D8               	btfsc	status,2,c
 19322  00179A  D015               	goto	i2l5632
 19323                           
 19324                           ;doprnt.c: 1306: if(val < dpowers[c])
 19325  00179C  5027               	movf	i2printf@c,w,c
 19326  00179E  0D02               	mullw	2
 19327  0017A0  0E38               	movlw	low _dpowers
 19328  0017A2  24F3               	addwf	prodl,w,c
 19329  0017A4  6EF6               	movwf	tblptrl,c
 19330  0017A6  0EFB               	movlw	high _dpowers
 19331  0017A8  20F4               	addwfc	prodh,w,c
 19332  0017AA  6EF7               	movwf	tblptrh,c
 19333  0017AC                     	if	1	;There are 3 active tblptr bytes
 19334  0017AC  6AF8               	clrf	tblptru,c
 19335  0017AE  0E00               	movlw	low (__mediumconst shr (0+16))
 19336  0017B0  22F8               	addwfc	tblptru,f,c
 19337  0017B2                     	endif
 19338  0017B2  0009               	tblrd		*+
 19339  0017B4  50F5               	movf	tablat,w,c
 19340  0017B6  5C24               	subwf	i2printf@val,w,c
 19341  0017B8  0009               	tblrd		*+
 19342  0017BA  50F5               	movf	tablat,w,c
 19343  0017BC  5825               	subwfb	i2printf@val+1,w,c
 19344  0017BE  A0D8               	btfss	status,0,c
 19345  0017C0  D002               	goto	i2l5632
 19346                           
 19347                           ;doprnt.c: 1307: break;
 19348  0017C2  2A27               	incf	i2printf@c,f,c
 19349  0017C4  D7E7               	goto	i2l5620
 19350  0017C6                     i2l5632:
 19351                           
 19352                           ;doprnt.c: 1345: if(width && flag & 0x03)
 19353  0017C6  5028               	movf	i2printf@width,w,c
 19354  0017C8  1029               	iorwf	i2printf@width+1,w,c
 19355  0017CA  B4D8               	btfsc	status,2,c
 19356  0017CC  D009               	goto	i2l5638
 19357  0017CE  C026  F019         	movff	i2printf@flag,??i2_printf
 19358  0017D2  0E03               	movlw	3
 19359  0017D4  1619               	andwf	??i2_printf,f,c
 19360  0017D6  B4D8               	btfsc	status,2,c
 19361  0017D8  D003               	goto	i2l5638
 19362                           
 19363                           ;doprnt.c: 1346: width--;
 19364  0017DA  0628               	decf	i2printf@width,f,c
 19365  0017DC  A0D8               	btfss	status,0,c
 19366  0017DE  0629               	decf	i2printf@width+1,f,c
 19367  0017E0                     i2l5638:
 19368                           
 19369                           ;doprnt.c: 1381: if(width > c)
 19370  0017E0  0E80               	movlw	128
 19371  0017E2  BE27               	btfsc	i2printf@c,7,c
 19372  0017E4  0E7F               	movlw	127
 19373  0017E6  6E19               	movwf	??i2_printf& (0+255),c
 19374  0017E8  5028               	movf	i2printf@width,w,c
 19375  0017EA  5C27               	subwf	i2printf@c,w,c
 19376  0017EC  5029               	movf	i2printf@width+1,w,c
 19377  0017EE  0A80               	xorlw	128
 19378  0017F0  5819               	subwfb	??i2_printf& (0+255),w,c
 19379  0017F2  B0D8               	btfsc	status,0,c
 19380  0017F4  D007               	goto	i2l5642
 19381                           
 19382                           ;doprnt.c: 1382: width -= c;
 19383  0017F6  5027               	movf	i2printf@c,w,c
 19384  0017F8  5E28               	subwf	i2printf@width,f,c
 19385  0017FA  0E00               	movlw	0
 19386  0017FC  BE27               	btfsc	i2printf@c,7,c
 19387  0017FE  0EFF               	movlw	255
 19388  001800  5A29               	subwfb	i2printf@width+1,f,c
 19389  001802  D004               	goto	i2l5644
 19390  001804                     i2l5642:
 19391                           
 19392                           ;doprnt.c: 1383: else
 19393                           ;doprnt.c: 1384: width = 0;
 19394  001804  0E00               	movlw	0
 19395  001806  6E29               	movwf	i2printf@width+1,c
 19396  001808  0E00               	movlw	0
 19397  00180A  6E28               	movwf	i2printf@width,c
 19398  00180C                     i2l5644:
 19399                           
 19400                           ;doprnt.c: 1387: if(flag & 0x04) {
 19401  00180C  A426               	btfss	i2printf@flag,2,c
 19402  00180E  D014               	goto	i2l5656
 19403                           
 19404                           ;doprnt.c: 1392: if(flag & 0x03)
 19405  001810  C026  F019         	movff	i2printf@flag,??i2_printf
 19406  001814  0E03               	movlw	3
 19407  001816  1619               	andwf	??i2_printf,f,c
 19408  001818  B4D8               	btfsc	status,2,c
 19409  00181A  D003               	goto	i2l5650
 19410                           
 19411                           ;doprnt.c: 1393: (putch('-') );
 19412  00181C  0E2D               	movlw	45
 19413  00181E  ECAD  F022         	call	i2_putch
 19414  001822                     i2l5650:
 19415                           
 19416                           ;doprnt.c: 1415: if(width)
 19417  001822  5028               	movf	i2printf@width,w,c
 19418  001824  1029               	iorwf	i2printf@width+1,w,c
 19419  001826  B4D8               	btfsc	status,2,c
 19420  001828  D01E               	goto	i2l5666
 19421                           
 19422                           ;doprnt.c: 1417: (putch('0') );
 19423                           
 19424                           ;doprnt.c: 1416: do
 19425  00182A  0E30               	movlw	48
 19426  00182C  ECAD  F022         	call	i2_putch
 19427                           
 19428                           ;doprnt.c: 1418: while(--width);
 19429  001830  0628               	decf	i2printf@width,f,c
 19430  001832  A0D8               	btfss	status,0,c
 19431  001834  0629               	decf	i2printf@width+1,f,c
 19432  001836  D7F5               	goto	i2l5650
 19433  001838                     i2l5656:
 19434                           
 19435                           ;doprnt.c: 1422: {
 19436                           ;doprnt.c: 1424: if(width
 19437                           ;doprnt.c: 1428: )
 19438  001838  5028               	movf	i2printf@width,w,c
 19439  00183A  1029               	iorwf	i2printf@width+1,w,c
 19440  00183C  B4D8               	btfsc	status,2,c
 19441  00183E  D00A               	goto	i2l5662
 19442  001840                     i2l5658:
 19443                           
 19444                           ;doprnt.c: 1430: (putch(' ') );
 19445  001840  0E20               	movlw	32
 19446  001842  ECAD  F022         	call	i2_putch
 19447                           
 19448                           ;doprnt.c: 1431: while(--width);
 19449  001846  0628               	decf	i2printf@width,f,c
 19450  001848  A0D8               	btfss	status,0,c
 19451  00184A  0629               	decf	i2printf@width+1,f,c
 19452  00184C  5028               	movf	i2printf@width,w,c
 19453  00184E  1029               	iorwf	i2printf@width+1,w,c
 19454  001850  A4D8               	btfss	status,2,c
 19455  001852  D7F6               	goto	i2l5658
 19456  001854                     i2l5662:
 19457                           
 19458                           ;doprnt.c: 1438: if(flag & 0x03)
 19459  001854  C026  F019         	movff	i2printf@flag,??i2_printf
 19460  001858  0E03               	movlw	3
 19461  00185A  1619               	andwf	??i2_printf,f,c
 19462  00185C  B4D8               	btfsc	status,2,c
 19463  00185E  D003               	goto	i2l5666
 19464                           
 19465                           ;doprnt.c: 1439: (putch('-') );
 19466  001860  0E2D               	movlw	45
 19467  001862  ECAD  F022         	call	i2_putch
 19468  001866                     i2l5666:
 19469                           
 19470                           ;doprnt.c: 1469: }
 19471                           ;doprnt.c: 1472: prec = c;
 19472  001866  C027  F01D         	movff	i2printf@c,i2printf@prec
 19473                           
 19474                           ;doprnt.c: 1474: while(prec--) {
 19475  00186A  D027               	goto	i2l5672
 19476  00186C                     i2l5668:
 19477                           
 19478                           ;doprnt.c: 1478: {
 19479                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 19480  00186C  501D               	movf	i2printf@prec,w,c
 19481  00186E  0D02               	mullw	2
 19482  001870  0E38               	movlw	low _dpowers
 19483  001872  24F3               	addwf	prodl,w,c
 19484  001874  6EF6               	movwf	tblptrl,c
 19485  001876  0EFB               	movlw	high _dpowers
 19486  001878  20F4               	addwfc	prodh,w,c
 19487  00187A  6EF7               	movwf	tblptrh,c
 19488  00187C                     	if	1	;There are 3 active tblptr bytes
 19489  00187C  6AF8               	clrf	tblptru,c
 19490  00187E  0E00               	movlw	low (__mediumconst shr (0+16))
 19491  001880  22F8               	addwfc	tblptru,f,c
 19492  001882                     	endif
 19493  001882  0009               	tblrd		*+
 19494  001884  CFF5 F008          	movff	tablat,i2___lwdiv@divisor
 19495  001888  000A               	tblrd		*-
 19496  00188A  CFF5 F009          	movff	tablat,i2___lwdiv@divisor+1
 19497  00188E  C024  F006         	movff	i2printf@val,i2___lwdiv@dividend
 19498  001892  C025  F007         	movff	i2printf@val+1,i2___lwdiv@dividend+1
 19499  001896  ECF0  F01E         	call	i2___lwdiv	;wreg free
 19500  00189A  C006  F001         	movff	?i2___lwdiv,i2___lwmod@dividend
 19501  00189E  C007  F002         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
 19502  0018A2  0E00               	movlw	0
 19503  0018A4  6E04               	movwf	i2___lwmod@divisor+1,c
 19504  0018A6  0E0A               	movlw	10
 19505  0018A8  6E03               	movwf	i2___lwmod@divisor,c
 19506  0018AA  ECD6  F01F         	call	i2___lwmod	;wreg free
 19507  0018AE  5001               	movf	?i2___lwmod,w,c
 19508  0018B0  0F30               	addlw	48
 19509  0018B2  6E27               	movwf	i2printf@c,c
 19510                           
 19511                           ;doprnt.c: 1523: }
 19512                           ;doprnt.c: 1524: (putch(c) );
 19513  0018B4  5027               	movf	i2printf@c,w,c
 19514  0018B6  ECAD  F022         	call	i2_putch
 19515  0018BA                     i2l5672:
 19516  0018BA  061D               	decf	i2printf@prec,f,c
 19517  0018BC  281D               	incf	i2printf@prec,w,c
 19518  0018BE  A4D8               	btfss	status,2,c
 19519  0018C0  D7D5               	goto	i2l5668
 19520  0018C2                     i2l5674:
 19521  0018C2  C00D  FFF6         	movff	i2printf@f,tblptrl
 19522  0018C6  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 19523  0018CA  4A0D               	infsnz	i2printf@f,f,c
 19524  0018CC  2A0E               	incf	i2printf@f+1,f,c
 19525  0018CE                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 19526  0018CE  6AF8               	clrf	tblptru,c
 19527  0018D0                     	endif
 19528  0018D0                     	if	0	;tblptru may be non-zero
 19529  0018D0                     	endif
 19530  0018D0  0008               	tblrd		*
 19531  0018D2  CFF5 F027          	movff	tablat,i2printf@c
 19532  0018D6  5027               	movf	i2printf@c,w,c
 19533  0018D8  B4D8               	btfsc	status,2,c
 19534  0018DA  0012               	return	
 19535  0018DC  D64E               	goto	i2l5544
 19536  0018DE                     __end_ofi2_printf:
 19537                           	opt stack 0
 19538                           pclatu	equ	0xFFB
 19539                           pclath	equ	0xFFA
 19540                           tblptru	equ	0xFF8
 19541                           tblptrh	equ	0xFF7
 19542                           tblptrl	equ	0xFF6
 19543                           tablat	equ	0xFF5
 19544                           prodh	equ	0xFF4
 19545                           prodl	equ	0xFF3
 19546                           intcon	equ	0xFF2
 19547                           intcon2	equ	0xFF1
 19548                           intcon3	equ	0xFF0
 19549                           indf0	equ	0xFEF
 19550                           postinc0	equ	0xFEE
 19551                           fsr0h	equ	0xFEA
 19552                           fsr0l	equ	0xFE9
 19553                           wreg	equ	0xFE8
 19554                           postdec1	equ	0xFE5
 19555                           fsr1h	equ	0xFE2
 19556                           fsr1l	equ	0xFE1
 19557                           indf2	equ	0xFDF
 19558                           postinc2	equ	0xFDE
 19559                           postdec2	equ	0xFDD
 19560                           fsr2h	equ	0xFDA
 19561                           fsr2l	equ	0xFD9
 19562                           status	equ	0xFD8
 19563                           
 19564 ;; *************** function i2_putch *****************
 19565 ;; Defined at:
 19566 ;;		line 20 in file "lcd.c"
 19567 ;; Parameters:    Size  Location     Type
 19568 ;;  data            1    wreg     unsigned char 
 19569 ;; Auto vars:     Size  Location     Type
 19570 ;;  data            1    2[COMRAM] unsigned char 
 19571 ;; Return value:  Size  Location     Type
 19572 ;;                  1    wreg      void 
 19573 ;; Registers used:
 19574 ;;		wreg, status,2, status,0, cstack
 19575 ;; Tracked objects:
 19576 ;;		On entry : 0/0
 19577 ;;		On exit  : 0/0
 19578 ;;		Unchanged: 0/0
 19579 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19580 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19581 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19582 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19583 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19584 ;;Total ram usage:        1 bytes
 19585 ;; Hardware stack levels used:    1
 19586 ;; Hardware stack levels required when called:    1
 19587 ;; This function calls:
 19588 ;;		i2_lcdNibble
 19589 ;; This function is called by:
 19590 ;;		i2_printf
 19591 ;; This function uses a non-reentrant model
 19592 ;;
 19593                           
 19594                           	psect	text78
 19595  00455A                     __ptext78:
 19596                           	opt stack 0
 19597  00455A                     i2_putch:
 19598                           	opt stack 19
 19599                           
 19600                           ;incstack = 0
 19601                           ;i2putch@data stored from wreg
 19602  00455A  6E03               	movwf	i2putch@data,c
 19603                           
 19604                           ;lcd.c: 21: LATDbits.LATD2 = 1;
 19605  00455C  848C               	bsf	3980,2,c	;volatile
 19606                           
 19607                           ;lcd.c: 22: lcdNibble(data);
 19608  00455E  5003               	movf	i2putch@data,w,c
 19609  004560  ECC5  F01E         	call	i2_lcdNibble
 19610  004564  0012               	return		;funcret
 19611  004566                     __end_ofi2_putch:
 19612                           	opt stack 0
 19613                           pclatu	equ	0xFFB
 19614                           pclath	equ	0xFFA
 19615                           tblptru	equ	0xFF8
 19616                           tblptrh	equ	0xFF7
 19617                           tblptrl	equ	0xFF6
 19618                           tablat	equ	0xFF5
 19619                           prodh	equ	0xFF4
 19620                           prodl	equ	0xFF3
 19621                           intcon	equ	0xFF2
 19622                           intcon2	equ	0xFF1
 19623                           intcon3	equ	0xFF0
 19624                           indf0	equ	0xFEF
 19625                           postinc0	equ	0xFEE
 19626                           fsr0h	equ	0xFEA
 19627                           fsr0l	equ	0xFE9
 19628                           wreg	equ	0xFE8
 19629                           postdec1	equ	0xFE5
 19630                           fsr1h	equ	0xFE2
 19631                           fsr1l	equ	0xFE1
 19632                           indf2	equ	0xFDF
 19633                           postinc2	equ	0xFDE
 19634                           postdec2	equ	0xFDD
 19635                           fsr2h	equ	0xFDA
 19636                           fsr2l	equ	0xFD9
 19637                           status	equ	0xFD8
 19638                           
 19639 ;; *************** function i2_isdigit *****************
 19640 ;; Defined at:
 19641 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 19642 ;; Parameters:    Size  Location     Type
 19643 ;;  c               1    wreg     unsigned char 
 19644 ;; Auto vars:     Size  Location     Type
 19645 ;;  c               1    2[COMRAM] unsigned char 
 19646 ;; Return value:  Size  Location     Type
 19647 ;;		None               void
 19648 ;; Registers used:
 19649 ;;		wreg, status,2, status,0
 19650 ;; Tracked objects:
 19651 ;;		On entry : 0/0
 19652 ;;		On exit  : 0/0
 19653 ;;		Unchanged: 0/0
 19654 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19655 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19656 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19657 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19658 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19659 ;;Total ram usage:        3 bytes
 19660 ;; Hardware stack levels used:    1
 19661 ;; This function calls:
 19662 ;;		Nothing
 19663 ;; This function is called by:
 19664 ;;		i2_printf
 19665 ;; This function uses a non-reentrant model
 19666 ;;
 19667                           
 19668                           	psect	text79
 19669  0044B2                     __ptext79:
 19670                           	opt stack 0
 19671  0044B2                     i2_isdigit:
 19672                           	opt stack 20
 19673                           
 19674                           ;incstack = 0
 19675                           ;i2isdigit@c stored from wreg
 19676  0044B2  6E03               	movwf	i2isdigit@c,c
 19677  0044B4  0E00               	movlw	0
 19678  0044B6  6E02               	movwf	i2_isdigit$1887,c
 19679  0044B8  0E3A               	movlw	58
 19680  0044BA  6003               	cpfslt	i2isdigit@c,c
 19681  0044BC  D005               	goto	i2l5254
 19682  0044BE  0E2F               	movlw	47
 19683  0044C0  6403               	cpfsgt	i2isdigit@c,c
 19684  0044C2  D002               	goto	i2l5254
 19685  0044C4  0E01               	movlw	1
 19686  0044C6  6E02               	movwf	i2_isdigit$1887,c
 19687  0044C8                     i2l5254:
 19688  0044C8  C002  F001         	movff	i2_isdigit$1887,??i2_isdigit
 19689  0044CC  3001               	rrcf	??i2_isdigit,w,c
 19690  0044CE  0012               	return	
 19691  0044D0                     __end_ofi2_isdigit:
 19692                           	opt stack 0
 19693                           pclatu	equ	0xFFB
 19694                           pclath	equ	0xFFA
 19695                           tblptru	equ	0xFF8
 19696                           tblptrh	equ	0xFF7
 19697                           tblptrl	equ	0xFF6
 19698                           tablat	equ	0xFF5
 19699                           prodh	equ	0xFF4
 19700                           prodl	equ	0xFF3
 19701                           intcon	equ	0xFF2
 19702                           intcon2	equ	0xFF1
 19703                           intcon3	equ	0xFF0
 19704                           indf0	equ	0xFEF
 19705                           postinc0	equ	0xFEE
 19706                           fsr0h	equ	0xFEA
 19707                           fsr0l	equ	0xFE9
 19708                           wreg	equ	0xFE8
 19709                           postdec1	equ	0xFE5
 19710                           fsr1h	equ	0xFE2
 19711                           fsr1l	equ	0xFE1
 19712                           indf2	equ	0xFDF
 19713                           postinc2	equ	0xFDE
 19714                           postdec2	equ	0xFDD
 19715                           fsr2h	equ	0xFDA
 19716                           fsr2l	equ	0xFD9
 19717                           status	equ	0xFD8
 19718                           
 19719 ;; *************** function i2___wmul *****************
 19720 ;; Defined at:
 19721 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 19722 ;; Parameters:    Size  Location     Type
 19723 ;;  multiplier      2    0[COMRAM] unsigned int 
 19724 ;;  multiplicand    2    2[COMRAM] unsigned int 
 19725 ;; Auto vars:     Size  Location     Type
 19726 ;;  __wmul          2    4[COMRAM] unsigned int 
 19727 ;; Return value:  Size  Location     Type
 19728 ;;                  2    0[COMRAM] unsigned int 
 19729 ;; Registers used:
 19730 ;;		wreg, status,2, status,0, prodl, prodh
 19731 ;; Tracked objects:
 19732 ;;		On entry : 0/0
 19733 ;;		On exit  : 0/0
 19734 ;;		Unchanged: 0/0
 19735 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19736 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19737 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19738 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19739 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19740 ;;Total ram usage:        6 bytes
 19741 ;; Hardware stack levels used:    1
 19742 ;; This function calls:
 19743 ;;		Nothing
 19744 ;; This function is called by:
 19745 ;;		_printSortTimer
 19746 ;;		_retrieveLog
 19747 ;;		i2_printf
 19748 ;; This function uses a non-reentrant model
 19749 ;;
 19750                           
 19751                           	psect	text80
 19752  0043DA                     __ptext80:
 19753                           	opt stack 0
 19754  0043DA                     i2___wmul:
 19755                           	opt stack 20
 19756                           
 19757                           ;incstack = 0
 19758  0043DA  5001               	movf	i2___wmul@multiplier,w,c
 19759  0043DC  0203               	mulwf	i2___wmul@multiplicand,c
 19760  0043DE  CFF3 F005          	movff	prodl,i2___wmul@product
 19761  0043E2  CFF4 F006          	movff	prodh,i2___wmul@product+1
 19762  0043E6  5001               	movf	i2___wmul@multiplier,w,c
 19763  0043E8  0204               	mulwf	i2___wmul@multiplicand+1,c
 19764  0043EA  50F3               	movf	prodl,w,c
 19765  0043EC  2606               	addwf	i2___wmul@product+1,f,c
 19766  0043EE  5002               	movf	i2___wmul@multiplier+1,w,c
 19767  0043F0  0203               	mulwf	i2___wmul@multiplicand,c
 19768  0043F2  50F3               	movf	prodl,w,c
 19769  0043F4  2606               	addwf	i2___wmul@product+1,f,c
 19770  0043F6  C005  F001         	movff	i2___wmul@product,?i2___wmul
 19771  0043FA  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
 19772  0043FE  0012               	return	
 19773  004400                     __end_ofi2___wmul:
 19774                           	opt stack 0
 19775                           pclatu	equ	0xFFB
 19776                           pclath	equ	0xFFA
 19777                           tblptru	equ	0xFF8
 19778                           tblptrh	equ	0xFF7
 19779                           tblptrl	equ	0xFF6
 19780                           tablat	equ	0xFF5
 19781                           prodh	equ	0xFF4
 19782                           prodl	equ	0xFF3
 19783                           intcon	equ	0xFF2
 19784                           intcon2	equ	0xFF1
 19785                           intcon3	equ	0xFF0
 19786                           indf0	equ	0xFEF
 19787                           postinc0	equ	0xFEE
 19788                           fsr0h	equ	0xFEA
 19789                           fsr0l	equ	0xFE9
 19790                           wreg	equ	0xFE8
 19791                           postdec1	equ	0xFE5
 19792                           fsr1h	equ	0xFE2
 19793                           fsr1l	equ	0xFE1
 19794                           indf2	equ	0xFDF
 19795                           postinc2	equ	0xFDE
 19796                           postdec2	equ	0xFDD
 19797                           fsr2h	equ	0xFDA
 19798                           fsr2l	equ	0xFD9
 19799                           status	equ	0xFD8
 19800                           
 19801 ;; *************** function i2___lwmod *****************
 19802 ;; Defined at:
 19803 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 19804 ;; Parameters:    Size  Location     Type
 19805 ;;  dividend        2    0[COMRAM] unsigned int 
 19806 ;;  divisor         2    2[COMRAM] unsigned int 
 19807 ;; Auto vars:     Size  Location     Type
 19808 ;;  __lwmod         1    4[COMRAM] unsigned char 
 19809 ;; Return value:  Size  Location     Type
 19810 ;;                  2    0[COMRAM] unsigned int 
 19811 ;; Registers used:
 19812 ;;		wreg, status,2, status,0
 19813 ;; Tracked objects:
 19814 ;;		On entry : 0/0
 19815 ;;		On exit  : 0/0
 19816 ;;		Unchanged: 0/0
 19817 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19818 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19819 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19820 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19821 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19822 ;;Total ram usage:        5 bytes
 19823 ;; Hardware stack levels used:    1
 19824 ;; This function calls:
 19825 ;;		Nothing
 19826 ;; This function is called by:
 19827 ;;		_printSortTimer
 19828 ;;		i2_printf
 19829 ;; This function uses a non-reentrant model
 19830 ;;
 19831                           
 19832                           	psect	text81
 19833  003FAC                     __ptext81:
 19834                           	opt stack 0
 19835  003FAC                     i2___lwmod:
 19836                           	opt stack 20
 19837                           
 19838                           ;incstack = 0
 19839  003FAC  5003               	movf	i2___lwmod@divisor,w,c
 19840  003FAE  1004               	iorwf	i2___lwmod@divisor+1,w,c
 19841  003FB0  B4D8               	btfsc	status,2,c
 19842  003FB2  D018               	goto	i2l1681
 19843  003FB4  0E01               	movlw	1
 19844  003FB6  6E05               	movwf	i2___lwmod@counter,c
 19845  003FB8  D004               	goto	i2l5286
 19846  003FBA                     i2l5284:
 19847  003FBA  90D8               	bcf	status,0,c
 19848  003FBC  3603               	rlcf	i2___lwmod@divisor,f,c
 19849  003FBE  3604               	rlcf	i2___lwmod@divisor+1,f,c
 19850  003FC0  2A05               	incf	i2___lwmod@counter,f,c
 19851  003FC2                     i2l5286:
 19852  003FC2  AE04               	btfss	i2___lwmod@divisor+1,7,c
 19853  003FC4  D7FA               	goto	i2l5284
 19854  003FC6                     i2l5288:
 19855  003FC6  5003               	movf	i2___lwmod@divisor,w,c
 19856  003FC8  5C01               	subwf	i2___lwmod@dividend,w,c
 19857  003FCA  5004               	movf	i2___lwmod@divisor+1,w,c
 19858  003FCC  5802               	subwfb	i2___lwmod@dividend+1,w,c
 19859  003FCE  A0D8               	btfss	status,0,c
 19860  003FD0  D004               	goto	i2l5292
 19861  003FD2  5003               	movf	i2___lwmod@divisor,w,c
 19862  003FD4  5E01               	subwf	i2___lwmod@dividend,f,c
 19863  003FD6  5004               	movf	i2___lwmod@divisor+1,w,c
 19864  003FD8  5A02               	subwfb	i2___lwmod@dividend+1,f,c
 19865  003FDA                     i2l5292:
 19866  003FDA  90D8               	bcf	status,0,c
 19867  003FDC  3204               	rrcf	i2___lwmod@divisor+1,f,c
 19868  003FDE  3203               	rrcf	i2___lwmod@divisor,f,c
 19869  003FE0  2E05               	decfsz	i2___lwmod@counter,f,c
 19870  003FE2  D7F1               	goto	i2l5288
 19871  003FE4                     i2l1681:
 19872  003FE4  C001  F001         	movff	i2___lwmod@dividend,?i2___lwmod
 19873  003FE8  C002  F002         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
 19874  003FEC  0012               	return		;funcret
 19875  003FEE                     __end_ofi2___lwmod:
 19876                           	opt stack 0
 19877                           pclatu	equ	0xFFB
 19878                           pclath	equ	0xFFA
 19879                           tblptru	equ	0xFF8
 19880                           tblptrh	equ	0xFF7
 19881                           tblptrl	equ	0xFF6
 19882                           tablat	equ	0xFF5
 19883                           prodh	equ	0xFF4
 19884                           prodl	equ	0xFF3
 19885                           intcon	equ	0xFF2
 19886                           intcon2	equ	0xFF1
 19887                           intcon3	equ	0xFF0
 19888                           indf0	equ	0xFEF
 19889                           postinc0	equ	0xFEE
 19890                           fsr0h	equ	0xFEA
 19891                           fsr0l	equ	0xFE9
 19892                           wreg	equ	0xFE8
 19893                           postdec1	equ	0xFE5
 19894                           fsr1h	equ	0xFE2
 19895                           fsr1l	equ	0xFE1
 19896                           indf2	equ	0xFDF
 19897                           postinc2	equ	0xFDE
 19898                           postdec2	equ	0xFDD
 19899                           fsr2h	equ	0xFDA
 19900                           fsr2l	equ	0xFD9
 19901                           status	equ	0xFD8
 19902                           
 19903 ;; *************** function i2___lwdiv *****************
 19904 ;; Defined at:
 19905 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 19906 ;; Parameters:    Size  Location     Type
 19907 ;;  dividend        2    5[COMRAM] unsigned int 
 19908 ;;  divisor         2    7[COMRAM] unsigned int 
 19909 ;; Auto vars:     Size  Location     Type
 19910 ;;  __lwdiv         2    9[COMRAM] unsigned int 
 19911 ;;  __lwdiv         1   11[COMRAM] unsigned char 
 19912 ;; Return value:  Size  Location     Type
 19913 ;;                  2    5[COMRAM] unsigned int 
 19914 ;; Registers used:
 19915 ;;		wreg, status,2, status,0
 19916 ;; Tracked objects:
 19917 ;;		On entry : 0/0
 19918 ;;		On exit  : 0/0
 19919 ;;		Unchanged: 0/0
 19920 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19921 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19922 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19923 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19924 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19925 ;;Total ram usage:        7 bytes
 19926 ;; Hardware stack levels used:    1
 19927 ;; This function calls:
 19928 ;;		Nothing
 19929 ;; This function is called by:
 19930 ;;		_printSortTimer
 19931 ;;		i2_printf
 19932 ;; This function uses a non-reentrant model
 19933 ;;
 19934                           
 19935                           	psect	text82
 19936  003DE0                     __ptext82:
 19937                           	opt stack 0
 19938  003DE0                     i2___lwdiv:
 19939                           	opt stack 20
 19940                           
 19941                           ;incstack = 0
 19942  003DE0  0E00               	movlw	0
 19943  003DE2  6E0B               	movwf	i2___lwdiv@quotient+1,c
 19944  003DE4  0E00               	movlw	0
 19945  003DE6  6E0A               	movwf	i2___lwdiv@quotient,c
 19946  003DE8  5008               	movf	i2___lwdiv@divisor,w,c
 19947  003DEA  1009               	iorwf	i2___lwdiv@divisor+1,w,c
 19948  003DEC  B4D8               	btfsc	status,2,c
 19949  003DEE  D01C               	goto	i2l1671
 19950  003DF0  0E01               	movlw	1
 19951  003DF2  6E0C               	movwf	i2___lwdiv@counter,c
 19952  003DF4  D004               	goto	i2l5266
 19953  003DF6                     i2l5264:
 19954  003DF6  90D8               	bcf	status,0,c
 19955  003DF8  3608               	rlcf	i2___lwdiv@divisor,f,c
 19956  003DFA  3609               	rlcf	i2___lwdiv@divisor+1,f,c
 19957  003DFC  2A0C               	incf	i2___lwdiv@counter,f,c
 19958  003DFE                     i2l5266:
 19959  003DFE  AE09               	btfss	i2___lwdiv@divisor+1,7,c
 19960  003E00  D7FA               	goto	i2l5264
 19961  003E02                     i2l5268:
 19962  003E02  90D8               	bcf	status,0,c
 19963  003E04  360A               	rlcf	i2___lwdiv@quotient,f,c
 19964  003E06  360B               	rlcf	i2___lwdiv@quotient+1,f,c
 19965  003E08  5008               	movf	i2___lwdiv@divisor,w,c
 19966  003E0A  5C06               	subwf	i2___lwdiv@dividend,w,c
 19967  003E0C  5009               	movf	i2___lwdiv@divisor+1,w,c
 19968  003E0E  5807               	subwfb	i2___lwdiv@dividend+1,w,c
 19969  003E10  A0D8               	btfss	status,0,c
 19970  003E12  D005               	goto	i2l5276
 19971  003E14  5008               	movf	i2___lwdiv@divisor,w,c
 19972  003E16  5E06               	subwf	i2___lwdiv@dividend,f,c
 19973  003E18  5009               	movf	i2___lwdiv@divisor+1,w,c
 19974  003E1A  5A07               	subwfb	i2___lwdiv@dividend+1,f,c
 19975  003E1C  800A               	bsf	i2___lwdiv@quotient,0,c
 19976  003E1E                     i2l5276:
 19977  003E1E  90D8               	bcf	status,0,c
 19978  003E20  3209               	rrcf	i2___lwdiv@divisor+1,f,c
 19979  003E22  3208               	rrcf	i2___lwdiv@divisor,f,c
 19980  003E24  2E0C               	decfsz	i2___lwdiv@counter,f,c
 19981  003E26  D7ED               	goto	i2l5268
 19982  003E28                     i2l1671:
 19983  003E28  C00A  F006         	movff	i2___lwdiv@quotient,?i2___lwdiv
 19984  003E2C  C00B  F007         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
 19985  003E30  0012               	return		;funcret
 19986  003E32                     __end_ofi2___lwdiv:
 19987                           	opt stack 0
 19988                           pclatu	equ	0xFFB
 19989                           pclath	equ	0xFFA
 19990                           tblptru	equ	0xFF8
 19991                           tblptrh	equ	0xFF7
 19992                           tblptrl	equ	0xFF6
 19993                           tablat	equ	0xFF5
 19994                           prodh	equ	0xFF4
 19995                           prodl	equ	0xFF3
 19996                           intcon	equ	0xFF2
 19997                           intcon2	equ	0xFF1
 19998                           intcon3	equ	0xFF0
 19999                           indf0	equ	0xFEF
 20000                           postinc0	equ	0xFEE
 20001                           fsr0h	equ	0xFEA
 20002                           fsr0l	equ	0xFE9
 20003                           wreg	equ	0xFE8
 20004                           postdec1	equ	0xFE5
 20005                           fsr1h	equ	0xFE2
 20006                           fsr1l	equ	0xFE1
 20007                           indf2	equ	0xFDF
 20008                           postinc2	equ	0xFDE
 20009                           postdec2	equ	0xFDD
 20010                           fsr2h	equ	0xFDA
 20011                           fsr2l	equ	0xFD9
 20012                           status	equ	0xFD8
 20013                           
 20014 ;; *************** function i2_lcdInst *****************
 20015 ;; Defined at:
 20016 ;;		line 15 in file "lcd.c"
 20017 ;; Parameters:    Size  Location     Type
 20018 ;;  data            1    wreg     unsigned char 
 20019 ;; Auto vars:     Size  Location     Type
 20020 ;;  data            1    2[COMRAM] unsigned char 
 20021 ;; Return value:  Size  Location     Type
 20022 ;;                  1    wreg      void 
 20023 ;; Registers used:
 20024 ;;		wreg, status,2, status,0, cstack
 20025 ;; Tracked objects:
 20026 ;;		On entry : 0/0
 20027 ;;		On exit  : 0/0
 20028 ;;		Unchanged: 0/0
 20029 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20030 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20031 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20032 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20033 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20034 ;;Total ram usage:        1 bytes
 20035 ;; Hardware stack levels used:    1
 20036 ;; Hardware stack levels required when called:    1
 20037 ;; This function calls:
 20038 ;;		i2_lcdNibble
 20039 ;; This function is called by:
 20040 ;;		_change_state_to_menu_11
 20041 ;;		_change_state_to_menu_23
 20042 ;;		_change_state_to_logs_11
 20043 ;;		_change_state_to_logs_12
 20044 ;;		_change_state_to_logs_22
 20045 ;;		_change_state_to_logs_23
 20046 ;;		_change_state_to_logs_33
 20047 ;;		_change_state_to_logs_34
 20048 ;;		_printSortTimer
 20049 ;;		i2_change_state_to_menu_start
 20050 ;;		i2_change_state_to_menu_12
 20051 ;;		i2_change_state_to_menu_22
 20052 ;;		i2_printRTC
 20053 ;; This function uses a non-reentrant model
 20054 ;;
 20055                           
 20056                           	psect	text83
 20057  004566                     __ptext83:
 20058                           	opt stack 0
 20059  004566                     i2_lcdInst:
 20060                           	opt stack 19
 20061                           
 20062                           ;incstack = 0
 20063                           ;i2lcdInst@data stored from wreg
 20064  004566  6E03               	movwf	i2lcdInst@data,c
 20065                           
 20066                           ;lcd.c: 16: LATDbits.LATD2 = 0;
 20067  004568  948C               	bcf	3980,2,c	;volatile
 20068                           
 20069                           ;lcd.c: 17: lcdNibble(data);
 20070  00456A  5003               	movf	i2lcdInst@data,w,c
 20071  00456C  ECC5  F01E         	call	i2_lcdNibble
 20072  004570  0012               	return		;funcret
 20073  004572                     __end_ofi2_lcdInst:
 20074                           	opt stack 0
 20075                           pclatu	equ	0xFFB
 20076                           pclath	equ	0xFFA
 20077                           tblptru	equ	0xFF8
 20078                           tblptrh	equ	0xFF7
 20079                           tblptrl	equ	0xFF6
 20080                           tablat	equ	0xFF5
 20081                           prodh	equ	0xFF4
 20082                           prodl	equ	0xFF3
 20083                           intcon	equ	0xFF2
 20084                           intcon2	equ	0xFF1
 20085                           intcon3	equ	0xFF0
 20086                           indf0	equ	0xFEF
 20087                           postinc0	equ	0xFEE
 20088                           fsr0h	equ	0xFEA
 20089                           fsr0l	equ	0xFE9
 20090                           wreg	equ	0xFE8
 20091                           postdec1	equ	0xFE5
 20092                           fsr1h	equ	0xFE2
 20093                           fsr1l	equ	0xFE1
 20094                           indf2	equ	0xFDF
 20095                           postinc2	equ	0xFDE
 20096                           postdec2	equ	0xFDD
 20097                           fsr2h	equ	0xFDA
 20098                           fsr2l	equ	0xFD9
 20099                           status	equ	0xFD8
 20100                           
 20101 ;; *************** function i2_lcdNibble *****************
 20102 ;; Defined at:
 20103 ;;		line 25 in file "lcd.c"
 20104 ;; Parameters:    Size  Location     Type
 20105 ;;  data            1    wreg     unsigned char 
 20106 ;; Auto vars:     Size  Location     Type
 20107 ;;  data            1    1[COMRAM] unsigned char 
 20108 ;;  lcdNibble       1    0[COMRAM] unsigned char 
 20109 ;; Return value:  Size  Location     Type
 20110 ;;                  1    wreg      void 
 20111 ;; Registers used:
 20112 ;;		wreg, status,2, status,0
 20113 ;; Tracked objects:
 20114 ;;		On entry : 0/0
 20115 ;;		On exit  : 0/0
 20116 ;;		Unchanged: 0/0
 20117 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20118 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20119 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20120 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20121 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20122 ;;Total ram usage:        2 bytes
 20123 ;; Hardware stack levels used:    1
 20124 ;; This function calls:
 20125 ;;		Nothing
 20126 ;; This function is called by:
 20127 ;;		i2_lcdInst
 20128 ;;		i2_putch
 20129 ;; This function uses a non-reentrant model
 20130 ;;
 20131                           
 20132                           	psect	text84
 20133  003D8A                     __ptext84:
 20134                           	opt stack 0
 20135  003D8A                     i2_lcdNibble:
 20136                           	opt stack 19
 20137                           
 20138                           ;incstack = 0
 20139                           ;i2lcdNibble@data stored from wreg
 20140  003D8A  6E02               	movwf	i2lcdNibble@data,c
 20141                           
 20142                           ;lcd.c: 27: char temp = data & 0xF0;
 20143  003D8C  5002               	movf	i2lcdNibble@data,w,c
 20144  003D8E  0BF0               	andlw	240
 20145  003D90  6E01               	movwf	i2lcdNibble@temp,c
 20146                           
 20147                           ;lcd.c: 28: LATD = LATD & 0x0F;
 20148  003D92  508C               	movf	3980,w,c	;volatile
 20149  003D94  0B0F               	andlw	15
 20150  003D96  6E8C               	movwf	3980,c	;volatile
 20151                           
 20152                           ;lcd.c: 29: LATD = temp | LATD;
 20153  003D98  5001               	movf	i2lcdNibble@temp,w,c
 20154  003D9A  108C               	iorwf	3980,w,c	;volatile
 20155  003D9C  6E8C               	movwf	3980,c	;volatile
 20156                           
 20157                           ;lcd.c: 31: LATDbits.LATD3 = 1;
 20158  003D9E  868C               	bsf	3980,3,c	;volatile
 20159                           
 20160                           ;lcd.c: 32: _delay((unsigned long)((25)*(32000000/4000000.0)));
 20161  003DA0  0E42               	movlw	66
 20162  003DA2                     i2u789_47:
 20163  003DA2  2EE8               	decfsz	wreg,f,c
 20164  003DA4  D7FE               	bra	i2u789_47
 20165  003DA6  D000               	nop2	
 20166                           
 20167                           ;lcd.c: 33: LATDbits.LATD3 = 0;
 20168  003DA8  968C               	bcf	3980,3,c	;volatile
 20169                           
 20170                           ;lcd.c: 34: _delay((unsigned long)((25)*(32000000/4000000.0)));
 20171  003DAA  0E42               	movlw	66
 20172  003DAC                     i2u790_47:
 20173  003DAC  2EE8               	decfsz	wreg,f,c
 20174  003DAE  D7FE               	bra	i2u790_47
 20175  003DB0  D000               	nop2	
 20176                           
 20177                           ;lcd.c: 36: data = data << 4;
 20178  003DB2  3802               	swapf	i2lcdNibble@data,w,c
 20179  003DB4  0BF0               	andlw	240
 20180  003DB6  6E02               	movwf	i2lcdNibble@data,c
 20181                           
 20182                           ;lcd.c: 38: temp = data & 0xF0;
 20183  003DB8  5002               	movf	i2lcdNibble@data,w,c
 20184  003DBA  0BF0               	andlw	240
 20185  003DBC  6E01               	movwf	i2lcdNibble@temp,c
 20186                           
 20187                           ;lcd.c: 39: LATD = LATD & 0x0F;
 20188  003DBE  508C               	movf	3980,w,c	;volatile
 20189  003DC0  0B0F               	andlw	15
 20190  003DC2  6E8C               	movwf	3980,c	;volatile
 20191                           
 20192                           ;lcd.c: 40: LATD = temp | LATD;
 20193  003DC4  5001               	movf	i2lcdNibble@temp,w,c
 20194  003DC6  108C               	iorwf	3980,w,c	;volatile
 20195  003DC8  6E8C               	movwf	3980,c	;volatile
 20196                           
 20197                           ;lcd.c: 42: LATDbits.LATD3 = 1;
 20198  003DCA  868C               	bsf	3980,3,c	;volatile
 20199                           
 20200                           ;lcd.c: 43: _delay((unsigned long)((25)*(32000000/4000000.0)));
 20201  003DCC  0E42               	movlw	66
 20202  003DCE                     i2u791_47:
 20203  003DCE  2EE8               	decfsz	wreg,f,c
 20204  003DD0  D7FE               	bra	i2u791_47
 20205  003DD2  D000               	nop2	
 20206                           
 20207                           ;lcd.c: 44: LATDbits.LATD3 = 0;
 20208  003DD4  968C               	bcf	3980,3,c	;volatile
 20209                           
 20210                           ;lcd.c: 45: _delay((unsigned long)((25)*(32000000/4000000.0)));
 20211  003DD6  0E42               	movlw	66
 20212  003DD8                     i2u792_47:
 20213  003DD8  2EE8               	decfsz	wreg,f,c
 20214  003DDA  D7FE               	bra	i2u792_47
 20215  003DDC  D000               	nop2	
 20216  003DDE  0012               	return		;funcret
 20217  003DE0                     __end_ofi2_lcdNibble:
 20218                           	opt stack 0
 20219                           pclatu	equ	0xFFB
 20220                           pclath	equ	0xFFA
 20221                           tblptru	equ	0xFF8
 20222                           tblptrh	equ	0xFF7
 20223                           tblptrl	equ	0xFF6
 20224                           tablat	equ	0xFF5
 20225                           prodh	equ	0xFF4
 20226                           prodl	equ	0xFF3
 20227                           intcon	equ	0xFF2
 20228                           intcon2	equ	0xFF1
 20229                           intcon3	equ	0xFF0
 20230                           indf0	equ	0xFEF
 20231                           postinc0	equ	0xFEE
 20232                           fsr0h	equ	0xFEA
 20233                           fsr0l	equ	0xFE9
 20234                           wreg	equ	0xFE8
 20235                           postdec1	equ	0xFE5
 20236                           fsr1h	equ	0xFE2
 20237                           fsr1l	equ	0xFE1
 20238                           indf2	equ	0xFDF
 20239                           postinc2	equ	0xFDE
 20240                           postdec2	equ	0xFDD
 20241                           fsr2h	equ	0xFDA
 20242                           fsr2l	equ	0xFD9
 20243                           status	equ	0xFD8
 20244                           
 20245 ;; *************** function i2_getRTC *****************
 20246 ;; Defined at:
 20247 ;;		line 44 in file "RTC.c"
 20248 ;; Parameters:    Size  Location     Type
 20249 ;;		None
 20250 ;; Auto vars:     Size  Location     Type
 20251 ;;  getRTC          2    3[COMRAM] int 
 20252 ;; Return value:  Size  Location     Type
 20253 ;;                  1    wreg      void 
 20254 ;; Registers used:
 20255 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 20256 ;; Tracked objects:
 20257 ;;		On entry : 0/0
 20258 ;;		On exit  : 0/0
 20259 ;;		Unchanged: 0/0
 20260 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20261 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20262 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20263 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20264 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20265 ;;Total ram usage:        2 bytes
 20266 ;; Hardware stack levels used:    1
 20267 ;; Hardware stack levels required when called:    2
 20268 ;; This function calls:
 20269 ;;		i2_I2C_Master_Read
 20270 ;;		i2_I2C_Master_Start
 20271 ;;		i2_I2C_Master_Stop
 20272 ;;		i2_I2C_Master_Write
 20273 ;; This function is called by:
 20274 ;;		_printSortTimer
 20275 ;;		i2_printRTC
 20276 ;; This function uses a non-reentrant model
 20277 ;;
 20278                           
 20279                           	psect	text85
 20280  003A74                     __ptext85:
 20281                           	opt stack 0
 20282  003A74                     i2_getRTC:
 20283                           	opt stack 18
 20284                           
 20285                           ;RTC.c: 48: I2C_Master_Start();
 20286                           
 20287                           ;incstack = 0
 20288  003A74  ECD3  F022         	call	i2_I2C_Master_Start	;wreg free
 20289                           
 20290                           ;RTC.c: 49: I2C_Master_Write(0b11010000);
 20291  003A78  0E00               	movlw	0
 20292  003A7A  6E03               	movwf	i2I2C_Master_Write@d+1,c
 20293  003A7C  0ED0               	movlw	208
 20294  003A7E  6E02               	movwf	i2I2C_Master_Write@d,c
 20295  003A80  ECBE  F022         	call	i2_I2C_Master_Write	;wreg free
 20296                           
 20297                           ;RTC.c: 50: I2C_Master_Write(0x00);
 20298  003A84  0E00               	movlw	0
 20299  003A86  6E03               	movwf	i2I2C_Master_Write@d+1,c
 20300  003A88  0E00               	movlw	0
 20301  003A8A  6E02               	movwf	i2I2C_Master_Write@d,c
 20302  003A8C  ECBE  F022         	call	i2_I2C_Master_Write	;wreg free
 20303                           
 20304                           ;RTC.c: 51: I2C_Master_Stop();
 20305  003A90  ECCF  F022         	call	i2_I2C_Master_Stop	;wreg free
 20306                           
 20307                           ;RTC.c: 54: I2C_Master_Start();
 20308  003A94  ECD3  F022         	call	i2_I2C_Master_Start	;wreg free
 20309                           
 20310                           ;RTC.c: 55: I2C_Master_Write(0b11010001);
 20311  003A98  0E00               	movlw	0
 20312  003A9A  6E03               	movwf	i2I2C_Master_Write@d+1,c
 20313  003A9C  0ED1               	movlw	209
 20314  003A9E  6E02               	movwf	i2I2C_Master_Write@d,c
 20315  003AA0  ECBE  F022         	call	i2_I2C_Master_Write	;wreg free
 20316                           
 20317                           ;RTC.c: 56: for(int i = 0; i < 6; i++){
 20318  003AA4  0E00               	movlw	0
 20319  003AA6  6E05               	movwf	i2getRTC@i+1,c
 20320  003AA8  0E00               	movlw	0
 20321  003AAA  6E04               	movwf	i2getRTC@i,c
 20322  003AAC                     i2l5516:
 20323  003AAC  BE05               	btfsc	i2getRTC@i+1,7,c
 20324  003AAE  D006               	goto	i2l5520
 20325  003AB0  5005               	movf	i2getRTC@i+1,w,c
 20326  003AB2  E111               	bnz	i2l5526
 20327  003AB4  0E06               	movlw	6
 20328  003AB6  5C04               	subwf	i2getRTC@i,w,c
 20329  003AB8  B0D8               	btfsc	status,0,c
 20330  003ABA  D00D               	goto	i2l5526
 20331  003ABC                     i2l5520:
 20332                           
 20333                           ;RTC.c: 57: time[i] = I2C_Master_Read(1);
 20334  003ABC  0E24               	movlw	low _time
 20335  003ABE  2404               	addwf	i2getRTC@i,w,c
 20336  003AC0  6ED9               	movwf	fsr2l,c
 20337  003AC2  0E01               	movlw	high _time
 20338  003AC4  2005               	addwfc	i2getRTC@i+1,w,c
 20339  003AC6  6EDA               	movwf	fsr2h,c
 20340  003AC8  0E01               	movlw	1
 20341  003ACA  EC00  F022         	call	i2_I2C_Master_Read
 20342  003ACE  6EDF               	movwf	indf2,c
 20343  003AD0  4A04               	infsnz	i2getRTC@i,f,c
 20344  003AD2  2A05               	incf	i2getRTC@i+1,f,c
 20345  003AD4  D7EB               	goto	i2l5516
 20346  003AD6                     i2l5526:
 20347                           
 20348                           ;RTC.c: 58: }
 20349                           ;RTC.c: 59: time[6] = I2C_Master_Read(0);
 20350  003AD6  0E00               	movlw	0
 20351  003AD8  EC00  F022         	call	i2_I2C_Master_Read
 20352  003ADC  0101               	movlb	1	; () banked
 20353  003ADE  6F2A               	movwf	(_time+6)& (0+255),b
 20354                           
 20355                           ;RTC.c: 60: I2C_Master_Stop();
 20356  003AE0  ECCF  F022         	call	i2_I2C_Master_Stop	;wreg free
 20357  003AE4  0012               	return		;funcret
 20358  003AE6                     __end_ofi2_getRTC:
 20359                           	opt stack 0
 20360                           pclatu	equ	0xFFB
 20361                           pclath	equ	0xFFA
 20362                           tblptru	equ	0xFF8
 20363                           tblptrh	equ	0xFF7
 20364                           tblptrl	equ	0xFF6
 20365                           tablat	equ	0xFF5
 20366                           prodh	equ	0xFF4
 20367                           prodl	equ	0xFF3
 20368                           intcon	equ	0xFF2
 20369                           intcon2	equ	0xFF1
 20370                           intcon3	equ	0xFF0
 20371                           indf0	equ	0xFEF
 20372                           postinc0	equ	0xFEE
 20373                           fsr0h	equ	0xFEA
 20374                           fsr0l	equ	0xFE9
 20375                           wreg	equ	0xFE8
 20376                           postdec1	equ	0xFE5
 20377                           fsr1h	equ	0xFE2
 20378                           fsr1l	equ	0xFE1
 20379                           indf2	equ	0xFDF
 20380                           postinc2	equ	0xFDE
 20381                           postdec2	equ	0xFDD
 20382                           fsr2h	equ	0xFDA
 20383                           fsr2l	equ	0xFD9
 20384                           status	equ	0xFD8
 20385                           
 20386 ;; *************** function i2_I2C_Master_Write *****************
 20387 ;; Defined at:
 20388 ;;		line 49 in file "I2C.c"
 20389 ;; Parameters:    Size  Location     Type
 20390 ;;  d               2    1[COMRAM] unsigned int 
 20391 ;; Auto vars:     Size  Location     Type
 20392 ;;		None
 20393 ;; Return value:  Size  Location     Type
 20394 ;;                  1    wreg      void 
 20395 ;; Registers used:
 20396 ;;		wreg, status,2, status,0, cstack
 20397 ;; Tracked objects:
 20398 ;;		On entry : 0/0
 20399 ;;		On exit  : 0/0
 20400 ;;		Unchanged: 0/0
 20401 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20402 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20403 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20404 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20405 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20406 ;;Total ram usage:        2 bytes
 20407 ;; Hardware stack levels used:    1
 20408 ;; Hardware stack levels required when called:    1
 20409 ;; This function calls:
 20410 ;;		i2_I2C_Master_Wait
 20411 ;; This function is called by:
 20412 ;;		i2_getRTC
 20413 ;; This function uses a non-reentrant model
 20414 ;;
 20415                           
 20416                           	psect	text86
 20417  00457C                     __ptext86:
 20418                           	opt stack 0
 20419  00457C                     i2_I2C_Master_Write:
 20420                           	opt stack 18
 20421                           
 20422                           ;I2C.c: 51: I2C_Master_Wait();
 20423                           
 20424                           ;incstack = 0
 20425  00457C  EC94  F022         	call	i2_I2C_Master_Wait	;wreg free
 20426                           
 20427                           ;I2C.c: 52: SSPBUF = d;
 20428  004580  C002  FFC9         	movff	i2I2C_Master_Write@d,4041	;volatile
 20429  004584  0012               	return		;funcret
 20430  004586                     __end_ofi2_I2C_Master_Write:
 20431                           	opt stack 0
 20432                           pclatu	equ	0xFFB
 20433                           pclath	equ	0xFFA
 20434                           tblptru	equ	0xFF8
 20435                           tblptrh	equ	0xFF7
 20436                           tblptrl	equ	0xFF6
 20437                           tablat	equ	0xFF5
 20438                           prodh	equ	0xFF4
 20439                           prodl	equ	0xFF3
 20440                           intcon	equ	0xFF2
 20441                           intcon2	equ	0xFF1
 20442                           intcon3	equ	0xFF0
 20443                           indf0	equ	0xFEF
 20444                           postinc0	equ	0xFEE
 20445                           fsr0h	equ	0xFEA
 20446                           fsr0l	equ	0xFE9
 20447                           wreg	equ	0xFE8
 20448                           postdec1	equ	0xFE5
 20449                           fsr1h	equ	0xFE2
 20450                           fsr1l	equ	0xFE1
 20451                           indf2	equ	0xFDF
 20452                           postinc2	equ	0xFDE
 20453                           postdec2	equ	0xFDD
 20454                           fsr2h	equ	0xFDA
 20455                           fsr2l	equ	0xFD9
 20456                           status	equ	0xFD8
 20457                           
 20458 ;; *************** function i2_I2C_Master_Stop *****************
 20459 ;; Defined at:
 20460 ;;		line 43 in file "I2C.c"
 20461 ;; Parameters:    Size  Location     Type
 20462 ;;		None
 20463 ;; Auto vars:     Size  Location     Type
 20464 ;;		None
 20465 ;; Return value:  Size  Location     Type
 20466 ;;                  1    wreg      void 
 20467 ;; Registers used:
 20468 ;;		wreg, status,2, status,0, cstack
 20469 ;; Tracked objects:
 20470 ;;		On entry : 0/0
 20471 ;;		On exit  : 0/0
 20472 ;;		Unchanged: 0/0
 20473 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20474 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20475 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20476 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20477 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20478 ;;Total ram usage:        0 bytes
 20479 ;; Hardware stack levels used:    1
 20480 ;; Hardware stack levels required when called:    1
 20481 ;; This function calls:
 20482 ;;		i2_I2C_Master_Wait
 20483 ;; This function is called by:
 20484 ;;		i2_getRTC
 20485 ;; This function uses a non-reentrant model
 20486 ;;
 20487                           
 20488                           	psect	text87
 20489  00459E                     __ptext87:
 20490                           	opt stack 0
 20491  00459E                     i2_I2C_Master_Stop:
 20492                           	opt stack 18
 20493                           
 20494                           ;I2C.c: 45: I2C_Master_Wait();
 20495                           
 20496                           ;incstack = 0
 20497  00459E  EC94  F022         	call	i2_I2C_Master_Wait	;wreg free
 20498                           
 20499                           ;I2C.c: 46: PEN = 1;
 20500  0045A2  84C5               	bsf	4037,2,c	;volatile
 20501  0045A4  0012               	return		;funcret
 20502  0045A6                     __end_ofi2_I2C_Master_Stop:
 20503                           	opt stack 0
 20504                           pclatu	equ	0xFFB
 20505                           pclath	equ	0xFFA
 20506                           tblptru	equ	0xFF8
 20507                           tblptrh	equ	0xFF7
 20508                           tblptrl	equ	0xFF6
 20509                           tablat	equ	0xFF5
 20510                           prodh	equ	0xFF4
 20511                           prodl	equ	0xFF3
 20512                           intcon	equ	0xFF2
 20513                           intcon2	equ	0xFF1
 20514                           intcon3	equ	0xFF0
 20515                           indf0	equ	0xFEF
 20516                           postinc0	equ	0xFEE
 20517                           fsr0h	equ	0xFEA
 20518                           fsr0l	equ	0xFE9
 20519                           wreg	equ	0xFE8
 20520                           postdec1	equ	0xFE5
 20521                           fsr1h	equ	0xFE2
 20522                           fsr1l	equ	0xFE1
 20523                           indf2	equ	0xFDF
 20524                           postinc2	equ	0xFDE
 20525                           postdec2	equ	0xFDD
 20526                           fsr2h	equ	0xFDA
 20527                           fsr2l	equ	0xFD9
 20528                           status	equ	0xFD8
 20529                           
 20530 ;; *************** function i2_I2C_Master_Start *****************
 20531 ;; Defined at:
 20532 ;;		line 31 in file "I2C.c"
 20533 ;; Parameters:    Size  Location     Type
 20534 ;;		None
 20535 ;; Auto vars:     Size  Location     Type
 20536 ;;		None
 20537 ;; Return value:  Size  Location     Type
 20538 ;;                  1    wreg      void 
 20539 ;; Registers used:
 20540 ;;		wreg, status,2, status,0, cstack
 20541 ;; Tracked objects:
 20542 ;;		On entry : 0/0
 20543 ;;		On exit  : 0/0
 20544 ;;		Unchanged: 0/0
 20545 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20546 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20547 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20548 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20549 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20550 ;;Total ram usage:        0 bytes
 20551 ;; Hardware stack levels used:    1
 20552 ;; Hardware stack levels required when called:    1
 20553 ;; This function calls:
 20554 ;;		i2_I2C_Master_Wait
 20555 ;; This function is called by:
 20556 ;;		i2_getRTC
 20557 ;; This function uses a non-reentrant model
 20558 ;;
 20559                           
 20560                           	psect	text88
 20561  0045A6                     __ptext88:
 20562                           	opt stack 0
 20563  0045A6                     i2_I2C_Master_Start:
 20564                           	opt stack 18
 20565                           
 20566                           ;I2C.c: 33: I2C_Master_Wait();
 20567                           
 20568                           ;incstack = 0
 20569  0045A6  EC94  F022         	call	i2_I2C_Master_Wait	;wreg free
 20570                           
 20571                           ;I2C.c: 34: SEN = 1;
 20572  0045AA  80C5               	bsf	4037,0,c	;volatile
 20573  0045AC  0012               	return		;funcret
 20574  0045AE                     __end_ofi2_I2C_Master_Start:
 20575                           	opt stack 0
 20576                           pclatu	equ	0xFFB
 20577                           pclath	equ	0xFFA
 20578                           tblptru	equ	0xFF8
 20579                           tblptrh	equ	0xFF7
 20580                           tblptrl	equ	0xFF6
 20581                           tablat	equ	0xFF5
 20582                           prodh	equ	0xFF4
 20583                           prodl	equ	0xFF3
 20584                           intcon	equ	0xFF2
 20585                           intcon2	equ	0xFF1
 20586                           intcon3	equ	0xFF0
 20587                           indf0	equ	0xFEF
 20588                           postinc0	equ	0xFEE
 20589                           fsr0h	equ	0xFEA
 20590                           fsr0l	equ	0xFE9
 20591                           wreg	equ	0xFE8
 20592                           postdec1	equ	0xFE5
 20593                           fsr1h	equ	0xFE2
 20594                           fsr1l	equ	0xFE1
 20595                           indf2	equ	0xFDF
 20596                           postinc2	equ	0xFDE
 20597                           postdec2	equ	0xFDD
 20598                           fsr2h	equ	0xFDA
 20599                           fsr2l	equ	0xFD9
 20600                           status	equ	0xFD8
 20601                           
 20602 ;; *************** function i2_I2C_Master_Read *****************
 20603 ;; Defined at:
 20604 ;;		line 55 in file "I2C.c"
 20605 ;; Parameters:    Size  Location     Type
 20606 ;;  a               1    wreg     unsigned char 
 20607 ;; Auto vars:     Size  Location     Type
 20608 ;;  a               1    1[COMRAM] unsigned char 
 20609 ;;  I2C_Master_R    1    2[COMRAM] unsigned char 
 20610 ;; Return value:  Size  Location     Type
 20611 ;;                  1    wreg      unsigned char 
 20612 ;; Registers used:
 20613 ;;		wreg, status,2, status,0, cstack
 20614 ;; Tracked objects:
 20615 ;;		On entry : 0/0
 20616 ;;		On exit  : 0/0
 20617 ;;		Unchanged: 0/0
 20618 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20619 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20620 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20621 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20622 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20623 ;;Total ram usage:        2 bytes
 20624 ;; Hardware stack levels used:    1
 20625 ;; Hardware stack levels required when called:    1
 20626 ;; This function calls:
 20627 ;;		i2_I2C_Master_Wait
 20628 ;; This function is called by:
 20629 ;;		i2_getRTC
 20630 ;; This function uses a non-reentrant model
 20631 ;;
 20632                           
 20633                           	psect	text89
 20634  004400                     __ptext89:
 20635                           	opt stack 0
 20636  004400                     i2_I2C_Master_Read:
 20637                           	opt stack 18
 20638                           
 20639                           ;incstack = 0
 20640                           ;i2I2C_Master_Read@a stored from wreg
 20641  004400  6E02               	movwf	i2I2C_Master_Read@a,c
 20642                           
 20643                           ;I2C.c: 57: unsigned char temp;
 20644                           ;I2C.c: 58: I2C_Master_Wait();
 20645  004402  EC94  F022         	call	i2_I2C_Master_Wait	;wreg free
 20646                           
 20647                           ;I2C.c: 59: RCEN = 1;
 20648  004406  86C5               	bsf	4037,3,c	;volatile
 20649                           
 20650                           ;I2C.c: 60: I2C_Master_Wait();
 20651  004408  EC94  F022         	call	i2_I2C_Master_Wait	;wreg free
 20652                           
 20653                           ;I2C.c: 61: temp = SSPBUF;
 20654  00440C  CFC9 F003          	movff	4041,i2I2C_Master_Read@temp	;volatile
 20655                           
 20656                           ;I2C.c: 62: I2C_Master_Wait();
 20657  004410  EC94  F022         	call	i2_I2C_Master_Wait	;wreg free
 20658                           
 20659                           ;I2C.c: 63: ACKDT = (a)?0:1;
 20660  004414  5002               	movf	i2I2C_Master_Read@a,w,c
 20661  004416  A4D8               	btfss	status,2,c
 20662  004418  D002               	goto	i2u356_40
 20663  00441A  8AC5               	bsf	4037,5,c	;volatile
 20664  00441C  D001               	goto	i2l5230
 20665  00441E                     i2u356_40:
 20666  00441E  9AC5               	bcf	4037,5,c	;volatile
 20667  004420                     i2l5230:
 20668                           
 20669                           ;I2C.c: 64: ACKEN = 1;
 20670  004420  88C5               	bsf	4037,4,c	;volatile
 20671                           
 20672                           ;I2C.c: 65: return temp;
 20673  004422  5003               	movf	i2I2C_Master_Read@temp,w,c
 20674  004424  0012               	return	
 20675  004426                     __end_ofi2_I2C_Master_Read:
 20676                           	opt stack 0
 20677                           pclatu	equ	0xFFB
 20678                           pclath	equ	0xFFA
 20679                           tblptru	equ	0xFF8
 20680                           tblptrh	equ	0xFF7
 20681                           tblptrl	equ	0xFF6
 20682                           tablat	equ	0xFF5
 20683                           prodh	equ	0xFF4
 20684                           prodl	equ	0xFF3
 20685                           intcon	equ	0xFF2
 20686                           intcon2	equ	0xFF1
 20687                           intcon3	equ	0xFF0
 20688                           indf0	equ	0xFEF
 20689                           postinc0	equ	0xFEE
 20690                           fsr0h	equ	0xFEA
 20691                           fsr0l	equ	0xFE9
 20692                           wreg	equ	0xFE8
 20693                           postdec1	equ	0xFE5
 20694                           fsr1h	equ	0xFE2
 20695                           fsr1l	equ	0xFE1
 20696                           indf2	equ	0xFDF
 20697                           postinc2	equ	0xFDE
 20698                           postdec2	equ	0xFDD
 20699                           fsr2h	equ	0xFDA
 20700                           fsr2l	equ	0xFD9
 20701                           status	equ	0xFD8
 20702                           
 20703 ;; *************** function i2_I2C_Master_Wait *****************
 20704 ;; Defined at:
 20705 ;;		line 26 in file "I2C.c"
 20706 ;; Parameters:    Size  Location     Type
 20707 ;;		None
 20708 ;; Auto vars:     Size  Location     Type
 20709 ;;		None
 20710 ;; Return value:  Size  Location     Type
 20711 ;;                  1    wreg      void 
 20712 ;; Registers used:
 20713 ;;		wreg, status,2, status,0
 20714 ;; Tracked objects:
 20715 ;;		On entry : 0/0
 20716 ;;		On exit  : 0/0
 20717 ;;		Unchanged: 0/0
 20718 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20719 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20720 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20721 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20722 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20723 ;;Total ram usage:        1 bytes
 20724 ;; Hardware stack levels used:    1
 20725 ;; This function calls:
 20726 ;;		Nothing
 20727 ;; This function is called by:
 20728 ;;		i2_I2C_Master_Start
 20729 ;;		i2_I2C_Master_Stop
 20730 ;;		i2_I2C_Master_Write
 20731 ;;		i2_I2C_Master_Read
 20732 ;; This function uses a non-reentrant model
 20733 ;;
 20734                           
 20735                           	psect	text90
 20736  004528                     __ptext90:
 20737                           	opt stack 0
 20738  004528                     i2_I2C_Master_Wait:
 20739                           	opt stack 18
 20740  004528                     i2l66:
 20741  004528  B4C7               	btfsc	4039,2,c	;volatile
 20742  00452A  D7FE               	goto	i2l66
 20743  00452C  CFC5 F001          	movff	4037,??i2_I2C_Master_Wait	;volatile
 20744  004530  0E1F               	movlw	31
 20745  004532  1601               	andwf	??i2_I2C_Master_Wait,f,c
 20746  004534  B4D8               	btfsc	status,2,c
 20747  004536  0012               	return	
 20748  004538  D7F7               	goto	i2l66
 20749  00453A                     __end_ofi2_I2C_Master_Wait:
 20750                           	opt stack 0
 20751                           pclatu	equ	0xFFB
 20752                           pclath	equ	0xFFA
 20753                           tblptru	equ	0xFF8
 20754                           tblptrh	equ	0xFF7
 20755                           tblptrl	equ	0xFF6
 20756                           tablat	equ	0xFF5
 20757                           prodh	equ	0xFF4
 20758                           prodl	equ	0xFF3
 20759                           intcon	equ	0xFF2
 20760                           intcon2	equ	0xFF1
 20761                           intcon3	equ	0xFF0
 20762                           indf0	equ	0xFEF
 20763                           postinc0	equ	0xFEE
 20764                           fsr0h	equ	0xFEA
 20765                           fsr0l	equ	0xFE9
 20766                           wreg	equ	0xFE8
 20767                           postdec1	equ	0xFE5
 20768                           fsr1h	equ	0xFE2
 20769                           fsr1l	equ	0xFE1
 20770                           indf2	equ	0xFDF
 20771                           postinc2	equ	0xFDE
 20772                           postdec2	equ	0xFDD
 20773                           fsr2h	equ	0xFDA
 20774                           fsr2l	equ	0xFD9
 20775                           status	equ	0xFD8
 20776                           pclatu	equ	0xFFB
 20777                           pclath	equ	0xFFA
 20778                           tblptru	equ	0xFF8
 20779                           tblptrh	equ	0xFF7
 20780                           tblptrl	equ	0xFF6
 20781                           tablat	equ	0xFF5
 20782                           prodh	equ	0xFF4
 20783                           prodl	equ	0xFF3
 20784                           intcon	equ	0xFF2
 20785                           intcon2	equ	0xFF1
 20786                           intcon3	equ	0xFF0
 20787                           indf0	equ	0xFEF
 20788                           postinc0	equ	0xFEE
 20789                           fsr0h	equ	0xFEA
 20790                           fsr0l	equ	0xFE9
 20791                           wreg	equ	0xFE8
 20792                           postdec1	equ	0xFE5
 20793                           fsr1h	equ	0xFE2
 20794                           fsr1l	equ	0xFE1
 20795                           indf2	equ	0xFDF
 20796                           postinc2	equ	0xFDE
 20797                           postdec2	equ	0xFDD
 20798                           fsr2h	equ	0xFDA
 20799                           fsr2l	equ	0xFD9
 20800                           status	equ	0xFD8
 20801                           
 20802                           	psect	rparam
 20803  0000                     pclatu	equ	0xFFB
 20804                           pclath	equ	0xFFA
 20805                           tblptru	equ	0xFF8
 20806                           tblptrh	equ	0xFF7
 20807                           tblptrl	equ	0xFF6
 20808                           tablat	equ	0xFF5
 20809                           prodh	equ	0xFF4
 20810                           prodl	equ	0xFF3
 20811                           intcon	equ	0xFF2
 20812                           intcon2	equ	0xFF1
 20813                           intcon3	equ	0xFF0
 20814                           indf0	equ	0xFEF
 20815                           postinc0	equ	0xFEE
 20816                           fsr0h	equ	0xFEA
 20817                           fsr0l	equ	0xFE9
 20818                           wreg	equ	0xFE8
 20819                           postdec1	equ	0xFE5
 20820                           fsr1h	equ	0xFE2
 20821                           fsr1l	equ	0xFE1
 20822                           indf2	equ	0xFDF
 20823                           postinc2	equ	0xFDE
 20824                           postdec2	equ	0xFDD
 20825                           fsr2h	equ	0xFDA
 20826                           fsr2l	equ	0xFD9
 20827                           status	equ	0xFD8
 20828                           
 20829                           	psect	temp
 20830  00007E                     btemp:
 20831                           	opt stack 0
 20832  00007E                     	ds	1
 20833  0000                     int$flags	set	btemp
 20834                           pclatu	equ	0xFFB
 20835                           pclath	equ	0xFFA
 20836                           tblptru	equ	0xFF8
 20837                           tblptrh	equ	0xFF7
 20838                           tblptrl	equ	0xFF6
 20839                           tablat	equ	0xFF5
 20840                           prodh	equ	0xFF4
 20841                           prodl	equ	0xFF3
 20842                           intcon	equ	0xFF2
 20843                           intcon2	equ	0xFF1
 20844                           intcon3	equ	0xFF0
 20845                           indf0	equ	0xFEF
 20846                           postinc0	equ	0xFEE
 20847                           fsr0h	equ	0xFEA
 20848                           fsr0l	equ	0xFE9
 20849                           wreg	equ	0xFE8
 20850                           postdec1	equ	0xFE5
 20851                           fsr1h	equ	0xFE2
 20852                           fsr1l	equ	0xFE1
 20853                           indf2	equ	0xFDF
 20854                           postinc2	equ	0xFDE
 20855                           postdec2	equ	0xFDD
 20856                           fsr2h	equ	0xFDA
 20857                           fsr2l	equ	0xFD9
 20858                           status	equ	0xFD8


Data Sizes:
    Strings     1212
    Constant    27
    Data        8
    BSS         118
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     90     125
    BANK0           128     90     128
    BANK1           256      0      53
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    strcpy@from	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_62(CODE[4]), STR_61(CODE[4]), STR_60(CODE[4]), STR_59(CODE[4]), 
		 -> STR_58(CODE[4]), STR_57(CODE[4]), STR_56(CODE[4]), STR_55(CODE[4]), 
		 -> STR_54(CODE[4]), STR_53(CODE[4]), STR_52(CODE[4]), STR_51(CODE[4]), 
		 -> STR_20(CODE[4]), STR_19(CODE[4]), STR_18(CODE[4]), STR_17(CODE[4]), 
		 -> STR_16(CODE[4]), STR_15(CODE[4]), STR_14(CODE[4]), STR_13(CODE[4]), 
		 -> STR_12(CODE[4]), STR_11(CODE[4]), STR_10(CODE[4]), STR_9(CODE[4]), 
		 -> STR_8(CODE[4]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_112(CODE[7]), count_total(BANK0[2]), printRTC@month(BANK0[4]), UI@month(BANK0[4]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 24
		 -> STR_111(CODE[17]), STR_110(CODE[17]), STR_109(CODE[10]), STR_108(CODE[13]), 
		 -> STR_107(CODE[18]), STR_106(CODE[18]), STR_105(CODE[17]), STR_104(CODE[15]), 
		 -> STR_103(CODE[15]), STR_102(CODE[15]), STR_101(CODE[17]), STR_100(CODE[17]), 
		 -> STR_99(CODE[17]), STR_98(CODE[16]), STR_97(CODE[17]), STR_96(CODE[17]), 
		 -> STR_95(CODE[17]), STR_94(CODE[17]), STR_93(CODE[17]), STR_92(CODE[17]), 
		 -> STR_91(CODE[15]), STR_90(CODE[11]), STR_89(CODE[17]), STR_88(CODE[11]), 
		 -> STR_87(CODE[17]), STR_86(CODE[14]), STR_85(CODE[15]), STR_84(CODE[14]), 
		 -> STR_83(CODE[10]), STR_82(CODE[16]), STR_81(CODE[15]), STR_80(CODE[15]), 
		 -> STR_79(CODE[13]), STR_78(CODE[14]), STR_77(CODE[8]), STR_76(CODE[14]), 
		 -> STR_75(CODE[15]), STR_74(CODE[12]), STR_73(CODE[14]), STR_72(CODE[17]), 
		 -> STR_71(CODE[14]), STR_70(CODE[15]), STR_69(CODE[17]), STR_68(CODE[17]), 
		 -> STR_67(CODE[7]), STR_66(CODE[21]), STR_65(CODE[13]), STR_64(CODE[11]), 
		 -> STR_63(CODE[24]), STR_50(CODE[17]), STR_49(CODE[17]), STR_48(CODE[17]), 
		 -> STR_47(CODE[17]), STR_46(CODE[17]), STR_45(CODE[17]), STR_44(CODE[17]), 
		 -> STR_43(CODE[17]), STR_42(CODE[17]), STR_41(CODE[17]), STR_40(CODE[17]), 
		 -> STR_39(CODE[17]), STR_38(CODE[17]), STR_37(CODE[17]), STR_36(CODE[17]), 
		 -> STR_35(CODE[17]), STR_34(CODE[17]), STR_33(CODE[17]), STR_32(CODE[17]), 
		 -> STR_31(CODE[17]), STR_30(CODE[17]), STR_29(CODE[3]), STR_28(CODE[17]), 
		 -> STR_27(CODE[19]), STR_26(CODE[17]), STR_25(CODE[19]), STR_24(CODE[17]), 
		 -> STR_23(CODE[14]), STR_22(CODE[10]), STR_21(CODE[24]), STR_7(CODE[7]), 
		 -> STR_6(CODE[17]), STR_5(CODE[18]), STR_4(CODE[16]), STR_3(CODE[18]), 
		 -> STR_2(CODE[14]), STR_1(CODE[18]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 4
		 -> printRTC@month(BANK0[4]), UI@month(BANK0[4]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _handler in COMRAM

    _handler->_printSortTimer
    i2_change_state_to_menu_start->i2_printRTC
    i2_printRTC->i2_printf
    i2_change_state_to_menu_22->i2_printf
    i2_change_state_to_menu_12->i2_printf
    _change_state_to_menu_23->i2_printf
    _change_state_to_menu_11->i2_printf
    _change_state_to_logs_34->i2_printf
    _change_state_to_logs_33->i2_printf
    _change_state_to_logs_23->i2_printf
    _change_state_to_logs_22->i2_printf
    _change_state_to_logs_12->i2_printf
    _change_state_to_logs_11->i2_printf
    _dispLogs->_retrieveLog
    _retrieveLog->i2___wmul
    _printSortTimer->i2_printf
    i2_printf->i2___lwdiv
    i2_putch->i2_lcdNibble
    i2___lwdiv->i2___lwmod
    i2_lcdInst->i2_lcdNibble
    i2_getRTC->i2_I2C_Master_Read
    i2_getRTC->i2_I2C_Master_Write
    i2_I2C_Master_Write->i2_I2C_Master_Wait
    i2_I2C_Master_Stop->i2_I2C_Master_Wait
    i2_I2C_Master_Start->i2_I2C_Master_Wait
    i2_I2C_Master_Read->i2_I2C_Master_Wait

Critical Paths under _main in BANK0

    _main->_UI
    _sort->_Loading
    _Loading->_EEPROM_write
    _initSortTimer->_getRTC
    _getIR->_readIR
    _ID->_readMAG
    _Distribution->_updateServoPosition
    _logRun->_EEPROM_write
    _EEPROM_write->_printf
    _loadRTC->_I2C_Master_Init
    _I2C_Master_Init->___lldiv
    _change_state_to_menu_start->_printRTC
    _initLCD->_lcdInst
    _UI->_printRTC
    _printRTC->_printf
    _getRTC->_I2C_Master_Read
    _getRTC->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _change_state_to_menu_22->_printf
    _change_state_to_menu_12->_printf
    ___awdiv->___awmod
    _Test->_actuatorTest
    _sensorTest->_printf
    _readMAG->_readADC
    _readIR->_readADC
    _algorithmTest->_printf
    _actuatorTest->_printf
    _ToggleTestA5->_printf
    _SolenoidTestA5->_printf
    _PortTestA5->_printf
    _BothServos->_printf
    _printf->___awdiv
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _lcdInst->_lcdNibble
    _initServos->_updateServoPosition

Critical Paths under _handler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _handler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _handler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _handler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _handler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _handler in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _handler in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _handler in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _handler in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _handler in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _handler in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _handler in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _handler in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _handler in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _handler in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _handler in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  173530
                               _Test
                                 _UI
                            _initLCD
                           _initTime
                             _initUI
                             _logRun
                      _machineConfig
                               _sort
                        _stopSignals
 ---------------------------------------------------------------------------------
 (1) _stopSignals                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _sort                                                 0     0      0   20014
                       _Distribution
                                 _ID
                            _Loading
 ---------------------------------------------------------------------------------
 (2) _Loading                                              7     7      0   15450
                                             49 BANK0      7     7      0
                        _EEPROM_read
                       _EEPROM_write
                           _delay_ms
                              _getIR
                     _initGlobalVars
                         _initServos
                      _initSortTimer
                            _lcdInst
 ---------------------------------------------------------------------------------
 (3) _initSortTimer                                        5     5      0     631
                                              5 BANK0      5     5      0
                             _getRTC
 ---------------------------------------------------------------------------------
 (3) _initGlobalVars                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _getIR                                                2     2      0      45
                                              6 BANK0      2     2      0
                             _readIR
 ---------------------------------------------------------------------------------
 (3) _delay_ms                                             2     2      0      23
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _ID                                                   8     8      0     207
                                              6 BANK0      8     8      0
                            _readMAG
 ---------------------------------------------------------------------------------
 (2) _Distribution                                         2     2      0    4357
                                              8 BANK0      2     2      0
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (1) _machineConfig                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _logRun                                              10    10      0   10466
                                             49 BANK0     10    10      0
                        _EEPROM_read
                       _EEPROM_write
 ---------------------------------------------------------------------------------
 (3) _EEPROM_write                                         6     3      3    9719
                                             43 BANK0      6     3      3
                        _EEPROM_read
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (4) _EEPROM_read                                          2     0      2     426
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _initUI                                               0     0      0   21264
         _change_state_to_menu_start
                            _loadRTC
 ---------------------------------------------------------------------------------
 (2) _loadRTC                                              3     3      0     850
                                             21 BANK0      3     3      0
                    _I2C_Master_Init
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Init                                      8     4      4     376
                                             13 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     290
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_start                           0     0      0   20414
                            _lcdInst
                           _printRTC
                             _printf
 ---------------------------------------------------------------------------------
 (1) _initTime                                             7     1      6     538
                                              0 BANK0      7     1      6
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                              3 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _UI                                                  24    24      0   42408
                                             68 BANK0     22    22      0
                            ___awdiv
                            ___awmod
            _change_state_to_menu_12
            _change_state_to_menu_22
                            _lcdInst
                           _printRTC
                             _printf
                             _strcpy
 ---------------------------------------------------------------------------------
 (3) _printRTC                                            25    25      0   12391
                                             43 BANK0     25    25      0
                             _getRTC
                            _lcdInst
                             _printf
                             _strcpy
 ---------------------------------------------------------------------------------
 (4) _strcpy                                               6     2      4    3275
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) _getRTC                                               2     2      0     519
                                              3 BANK0      2     2      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Write                                     2     0      2     406
                                              1 BANK0      2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Read                                      2     2      0      45
                                              1 BANK0      2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (6) _I2C_Master_Wait                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_22                              0     0      0    8023
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _change_state_to_menu_12                              0     0      0    8023
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4    1064
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     556
                                              6 BANK0      8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (1) _Test                                                 2     2      0   78705
                                             70 BANK0      2     2      0
                         _BothServos
                         _EEPROMTest
                         _PortTestA5
                          _PortTests
                     _SolenoidTestA5
                       _ToggleTestA5
                       _actuatorTest
                      _algorithmTest
                            _lcdInst
                             _printf
                         _sensorTest
 ---------------------------------------------------------------------------------
 (2) _sensorTest                                           2     2      0    8113
                                             43 BANK0      2     2      0
                            _lcdInst
                             _printf
                             _readIR
                            _readMAG
 ---------------------------------------------------------------------------------
 (3) _readMAG                                              4     4      0      45
                                              2 BANK0      4     4      0
                            _readADC
 ---------------------------------------------------------------------------------
 (4) _readIR                                               4     4      0      45
                                              2 BANK0      4     4      0
                            _readADC
 ---------------------------------------------------------------------------------
 (5) _readADC                                              2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _algorithmTest                                        2     2      0    8023
                                             43 BANK0      2     2      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _actuatorTest                                        27    27      0   13577
                                             43 BANK0     27    27      0
                            _lcdInst
                             _printf
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (2) _ToggleTestA5                                         3     3      0    8048
                                             43 BANK0      3     3      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _SolenoidTestA5                                       6     6      0    8161
                                             43 BANK0      6     6      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _PortTests                                            2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _PortTestA5                                           1     1      0    8023
                                             43 BANK0      1     1      0
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _EEPROMTest                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _BothServos                                           2     2      0   16737
                                             43 BANK0      2     2      0
                         _initServos
                            _lcdInst
                             _printf
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (4) _printf                                              33    21     12    7888
                                             14 BANK0     29    17     12
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (5) _isdigit                                              3     3      0      68
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     669
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              5     1      4     515
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              7     3      4     442
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) _lcdInst                                              1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     113
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _initServos                                           1     1      0    4357
                                              8 BANK0      1     1      0
                _updateServoPosition
 ---------------------------------------------------------------------------------
 (4) _updateServoPosition                                  8     4      4    4357
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _handler                                             16    16      0   76936
                                             74 COMRAM    16    16      0
                     _printSortTimer
                         _updateMenu
 ---------------------------------------------------------------------------------
 (8) _updateMenu                                           2     2      0   71999
                                             66 COMRAM     2     2      0
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
                           _dispLogs
                       _inputHandler
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
       i2_change_state_to_menu_start
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_start                         0     0      0    7744
                          i2_lcdInst
                         i2_printRTC
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) i2_printRTC                                         25    25      0    4605
                                             41 COMRAM    25    25      0
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
                           i2_strcpy
 ---------------------------------------------------------------------------------
 (11) i2_strcpy                                            6     2      4     699
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (9) _inputHandler                                         4     2      2   31390
                                             41 COMRAM     4     2      2
            _change_state_to_logs_11
            _change_state_to_logs_12
            _change_state_to_logs_22
            _change_state_to_logs_23
            _change_state_to_logs_33
            _change_state_to_logs_34
            _change_state_to_menu_11
            _change_state_to_menu_23
          i2_change_state_to_menu_12
          i2_change_state_to_menu_22
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_22                            0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) i2_change_state_to_menu_12                            0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_23                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_menu_11                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_34                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_33                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_23                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_22                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_12                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) _change_state_to_logs_11                             0     0      0    3139
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) _dispLogs                                             2     0      2    1475
                                             17 COMRAM     2     0      2
                        _retrieveLog
 ---------------------------------------------------------------------------------
 (10) _retrieveLog                                        11     9      2    1047
                                              6 COMRAM    11     9      2
                      i2_EEPROM_read
                           i2___wmul
 ---------------------------------------------------------------------------------
 (11) i2_EEPROM_read                                       2     0      2     174
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (8) _printSortTimer                                      33    33      0    4937
                                             41 COMRAM    33    33      0
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                           i2_getRTC
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) i2_printf                                           33    21     12    3004
                                             12 COMRAM    29    17     12
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch
 ---------------------------------------------------------------------------------
 (11) i2_putch                                             1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (11) i2_isdigit                                           3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (11) i2___wmul                                            6     2      4     469
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (11) i2___lwmod                                           5     1      4     367
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (11) i2___lwdiv                                           7     3      4     318
                                              5 COMRAM     7     3      4
                          i2___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (11) i2_lcdInst                                           1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (12) i2_lcdNibble                                         2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (11) i2_getRTC                                            2     2      0     213
                                              3 COMRAM     2     2      0
                  i2_I2C_Master_Read
                 i2_I2C_Master_Start
                  i2_I2C_Master_Stop
                 i2_I2C_Master_Write
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Write                                  2     0      2     100
                                              1 COMRAM     2     0      2
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Stop                                   0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Start                                  0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Read                                   2     2      0      45
                                              1 COMRAM     2     2      0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (13) i2_I2C_Master_Wait                                   1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Test
     _BothServos
       _initServos
         _updateServoPosition
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _updateServoPosition
     _EEPROMTest
     _PortTestA5
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _PortTests
     _SolenoidTestA5
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _ToggleTestA5
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _actuatorTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _updateServoPosition
     _algorithmTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _lcdInst
       _lcdNibble
     _printf
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
     _sensorTest
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _readIR
         _readADC
       _readMAG
         _readADC
   _UI
     ___awdiv
       ___awmod (ARG)
     ___awmod
     _change_state_to_menu_12
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _change_state_to_menu_22
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _lcdInst
       _lcdNibble
     _printRTC
       _getRTC
         _I2C_Master_Read
           _I2C_Master_Wait
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
       _strcpy
     _printf
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
     _strcpy
   _initLCD
     _lcdInst
       _lcdNibble
   _initTime
   _initUI
     _change_state_to_menu_start
       _lcdInst
         _lcdNibble
       _printRTC
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
         _lcdInst
           _lcdNibble
         _printf
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _lcdNibble
         _strcpy
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
     _loadRTC
       _I2C_Master_Init
         ___lldiv
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
   _logRun
     _EEPROM_read
     _EEPROM_write
       _EEPROM_read
       _lcdInst
         _lcdNibble
       _printf
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
           ___lwdiv (ARG)
         ___wmul (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _lcdNibble
   _machineConfig
   _sort
     _Distribution
       _updateServoPosition
     _ID
       _readMAG
         _readADC
     _Loading
       _EEPROM_read
       _EEPROM_write
         _EEPROM_read
         _lcdInst
           _lcdNibble
         _printf
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _lcdNibble
       _delay_ms
       _getIR
         _readIR
           _readADC
       _initGlobalVars
       _initServos
         _updateServoPosition
       _initSortTimer
         _getRTC
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
       _lcdInst
         _lcdNibble
   _stopSignals

 _handler (ROOT)
   _printSortTimer
     i2___lwdiv
       i2___lwmod (ARG)
     i2___lwmod
     i2___wmul
     i2_getRTC
       i2_I2C_Master_Read
         i2_I2C_Master_Wait
       i2_I2C_Master_Start
         i2_I2C_Master_Wait
       i2_I2C_Master_Stop
         i2_I2C_Master_Wait
       i2_I2C_Master_Write
         i2_I2C_Master_Wait
     i2_lcdInst
       i2_lcdNibble
     i2_printf
       i2___lwdiv
         i2___lwmod (ARG)
       i2___lwmod
       i2___wmul
       i2_isdigit
       i2_putch
         i2_lcdNibble
   _updateMenu
     _change_state_to_logs_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_33
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_logs_34
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_11
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _change_state_to_menu_23
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _dispLogs
       _retrieveLog
         i2_EEPROM_read
         i2___wmul
     _inputHandler
       _change_state_to_logs_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_33
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_logs_34
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_11
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       _change_state_to_menu_23
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_12
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_change_state_to_menu_22
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
     i2_change_state_to_menu_12
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_22
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_change_state_to_menu_start
       i2_lcdInst
         i2_lcdNibble
       i2_printRTC
         i2_getRTC
           i2_I2C_Master_Read
             i2_I2C_Master_Wait
           i2_I2C_Master_Start
             i2_I2C_Master_Wait
           i2_I2C_Master_Stop
             i2_I2C_Master_Wait
           i2_I2C_Master_Write
             i2_I2C_Master_Wait
         i2_lcdInst
           i2_lcdNibble
         i2_printf
           i2___lwdiv
             i2___lwmod (ARG)
           i2___lwmod
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
         i2_strcpy
       i2_printf
         i2___lwdiv
           i2___lwmod (ARG)
         i2___lwmod
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      35       7       20.7%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     5A      80       5      100.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     5A      7D       1       99.2%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     132      34        0.0%
DATA                 0      0     132       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Wed Mar 15 11:44:31 2017

                                    _i 012B                     i2_I2C_Master_Start 45A6  
                   i2_I2C_Master_Write 457C                                     l66 4514  
                                   _ID 2E0C                            __CFG_CPD$ON 000000  
                                   _UI 0012                           ___awdiv@sign 008B  
                                   _up 0077                    ___wmul@multiplicand 0082  
                   i2___lwdiv@dividend 0006                            __CFG_BORV$3 000000  
                   EEPROM_read@address 0080                           __CFG_CP0$OFF 000000  
                         __CFG_CP1$OFF 000000                           __CFG_CP2$OFF 000000  
                         __CFG_CP3$OFF 000000                                    ?_ID 0001  
                                  ?_UI 0001                                    UI@i 00C8  
                                  l177 00E8                                    l478 3742  
                                  l719 2B12                                    l593 1C84  
                                  l913 3270                                    l926 44E0  
                                  l935 2DF6                                    l779 3A3A  
                         __CFG_CPB$OFF 000000                                    _PEN 007E2A  
                                  _SEN 007E28                    ?i2_I2C_Master_Start 0001  
                       ?_machineConfig 0001                    ?i2_I2C_Master_Write 0002  
                                  _log 00E6                                    _sel 00FD  
                                  _var 00FA                           ___awmod@sign 0085  
                                  wreg 000FE8                    i2printRTC@RTC_month 003B  
                  _log_count_can_w_lab 00EC        __end_of_change_state_to_menu_11 41BC  
      __end_of_change_state_to_menu_12 405E        __end_of_change_state_to_menu_22 4026  
      __end_of_change_state_to_menu_23 418C           _f_can_coming_to_distribution 006F  
                       ??_Distribution 0088        __end_of_change_state_to_logs_11 42AC  
      __end_of_change_state_to_logs_12 427C        __end_of_change_state_to_logs_22 424C  
      __end_of_change_state_to_logs_23 4308        __end_of_change_state_to_logs_33 421C  
      __end_of_change_state_to_logs_34 41EC                                   ??_ID 0086  
                                 ??_UI 00C4                           __CFG_LVP$OFF 000000  
                         __CFG_WDT$OFF 000000                                   l1020 30C6  
                                 l1101 0E8E                                   l1040 3394  
                                 l1113 1028                                   l1017 30A6  
                                 l1043 3398                                   l1052 27C8  
                                 l1141 3970                                   l1133 391E  
                                 l1150 3D18                                   l1135 3922  
                                 l1071 09CC                                   l1224 137E  
                                 l1136 3926                                   l1064 0922  
                                 l1137 392A                                   l1129 3902  
                                 l1049 27C4                                   l1138 392E  
                                 l1170 31D0                                   l1074 0A32  
                                 l1139 3932                                   l1075 0A80  
                                 l1067 0926                                   l1156 3D28  
                                 l1164 3184                                   l1076 0AE6  
                                 l1077 0B34                                   l1187 3876  
                                 l1179 3842                                   l1618 3574  
                                 l1671 39F4                                   l5200 3BD6  
                                 l5120 4348                                   l1681 3C0E  
                                 l5202 3BDC                                   l5122 435A  
                                 l5206 3C00                                   l5312 115A  
                                 l5144 42D2                                   l5162 4380  
                                 l5402 1434                                   l5314 116C  
                                 l5180 39B0                                   l5420 14AC  
                                 l5340 1258                                   l5332 1226  
                                 l5324 11AA                                   l5308 1146  
                                 l5190 39E6                                   l5182 39B6  
                                 l5422 14B8                                   l5430 14E6  
                                 l5414 1490                                   l5406 146C  
                                 l5350 12D0                                   l5342 1264  
                                 l5318 1176                                   l7110 34AC  
                                 l6054 37AA                                   l5432 14EC  
                                 l5408 1476                                   l5360 1326  
                                 l5352 12DC                                   l5344 126A  
                                 l5504 3562                                   l6064 37EC  
                                 l5178 39A4                                   l5426 14D2  
                                 l5362 133E                                   l5354 12E2  
                                 l7114 34C0                                   l7106 349E  
                                 l7130 365C                                   l5450 38BC  
                                 l5442 4068                                   l7210 013A  
                                 l7202 0118                                   l6058 37C0  
                                 l5436 1544                                   l5356 12FA  
                                 l5460 38F2                                   l5444 4074  
                                 l7300 0310                                   l5198 3BCA  
                                 l5382 13D0                                   l5366 1344  
                                 l5438 1550                                   l6510 0996  
                                 l7150 36C8                                   l7142 36A6  
                                 l7134 3670                                   l7126 364C  
                                 l5454 38D2                                   l7310 03A6  
                                 l7302 032E                                   l7230 01AA  
                                 l7214 014C                                   l7206 0122  
                                 l6342 2EE4                                   l6270 2AD0  
                                 l5480 3A50                                   l5384 13D6  
                                 l7136 367C                                   l5720 1D06  
                                 l5712 1C8E                                   l7320 043C  
                                 l7312 03C4                                   l7304 034C  
                                 l6328 2EA8                                   l6280 2B1A  
                                 l5378 13B6                                   l6602 0BD2  
                                 l6514 09A0                                   l6450 2818  
                                 l7082 3428                                   l7138 3682  
                                 l7146 36B4                                   l5730 1D9C  
                                 l5722 1D24                                   l5714 1CAC  
                                 l5706 1C02                                   l7330 0500  
                                 l7314 03E2                                   l7306 036A  
                                 l7234 01B4                                   l6370 2BE8  
                                 l6338 2ED8                                   l6346 2EF0  
                                 l5396 1412                                   l6620 0C34  
                                 l6612 0BFA                                   l6604 0BD8  
                                 l6508 0990                                   l5732 1DBA  
                                 l5724 1D42                                   l5716 1CCA  
                                 l5740 1E54                                   l7500 086A  
                                 l7420 06FA                                   l7412 06D8  
                                 l7316 0400                                   l7308 0388  
                                 l7324 045A                                   l7228 01A4  
                                 l7244 01DA                                   l5492 34F8  
                                 l6364 2B9A                                   l5478 3A26  
                                 l6702 0DCA                                   l6630 0C5C  
                                 l6518 09B8                                   l6462 288C  
                                 l7094 345C                                   l5734 1DD8  
                                 l5726 1D60                                   l5718 1CE8  
                                 l7510 0886                                   l7430 0716  
                                 l7334 050A                                   l7318 041E  
                                 l7326 04BE                                   l7262 0236  
                                 l7238 01CC                                   l5494 3508  
                                 l6366 2BB4                                   l6374 2C02  
                                 _ADIE 007CEE                                   l6712 0DF2  
                                 l6624 0C3E                                   l6608 0BE2  
                                 l6456 285A                                   l7096 3468  
                                 l7088 343E                                   l5728 1D7E  
                                 l7416 06E2                                   l7352 0556  
                                 l7344 0534                                   l7280 0282  
                                 l7272 0260                                   l5496 350E  
                                 l6368 2BCE                                   l6376 2C30  
                                 l6296 2B54                                   l6706 0DE2  
                                 l6650 0CC2                                   l6634 0C66  
                                 l7098 346E                                   l5738 1DF6  
                                 l7514 089E                                   l7506 087C  
                                 l7434 072E                                   l7426 070C  
                                 l7338 0522                                   l7266 024E  
                                 l7258 022C                                   l5922 32DC  
                                 l5930 32FE                                   l6812 1000  
                                 l6804 0FDE                                   l6732 0E66  
                                 l6724 0E44                                   l6716 0E0A  
                                 l6708 0DE8                                   l6660 0CEA  
                                 l6628 0C56                                   l6468 28CE  
                                 l7460 07B6                                   l7452 0794  
                                 l7380 063E                                   l7372 061C  
                                 l7348 053E                                   l7276 026A  
                                 l7196 0100                                   l6814 1006  
                                 l6734 0E6C                                   l6654 0CDA  
                                 l6646 0CB8                                   l6638 0C7E  
                                 l7470 07D2                                   l7390 065A  
                                 l7518 08AA                                   l7198 0106  
                                 l5934 3314                                   l5926 32E6  
                                 l6808 0FE8                                   l6760 0EF8  
                                 l6752 0ED6                                   l6728 0E4E  
                                 l6680 0D5E                                   l6672 0D3C  
                                 l6664 0D02                                   l6656 0CE0  
                                 l7456 079E                                   l7376 0626  
                                 l7296 02D4                                   l5944 4390  
                                 l5880 35AA                                   l6842 1082  
                                 l6818 1010                                   l6770 0F20  
                                 l6762 0EFE                                   l6738 0E76  
                                 l6690 0D86                                   l6682 0D64  
                                 l6594 0BB0                                   l7474 07EA  
                                 l7466 07C8                                   l7394 0672  
                                 l7386 0650                                   l7298 02F2  
                                 l5938 331E                                   l6932 3150  
                                 l6852 10AA                                   l6756 0EE0  
                                 l6676 0D46                                   l7492 0848  
                                 l5948 43A6                                   l5876 3594  
                                 l6950 31AE                                   l6846 109A  
                                 l6838 1078                                   l6782 0F64  
                                 l6766 0F08                                   l6686 0D6E  
                                 l6598 0BBA                                   l7830 30D8  
                                 l5974 3EC2                                   l5886 3620  
                                 l7910 3720                                   l6944 3192  
                                 l6928 386A                                   l6872 1108  
                                 l6864 10E6                                   l6856 10C2  
                                 l6848 10A0                                   l6792 0F8C  
                                 l7840 30F6                                   l7832 30DE  
                                 l7808 3048                                   l7496 0852  
                                 l7920 373E                                   l6954 31B8  
                                 l6882 1130                                   l6874 110E  
                                 l6786 0F7C                                   l6778 0F5A  
                                 l6698 0DC0                                   l7842 30FC  
                                 l7834 30E4                                   l7826 30CC  
                                 l7770 2D1C                                   l7906 3714  
                                 l6964 31F8                                   l6948 31A8  
                                 l6868 10F0                                   l6796 0FA4  
                                 l6788 0F82                                   l7836 30EA  
                                 l7828 30D2                                   l7772 2D30  
                                 l7908 371A                                   l7924 3744  
                                 l6974 322C                                   l6878 1118  
                                 l7838 30F0                                   l7846 3102  
                                 l7918 3738                                   l6986 3936  
                                 l6978 3236                                   l7796 2DB0  
                                 STR_1 FBCB                                   STR_2 FF2D  
                                 STR_3 FBB9                                   STR_4 FE50  
                                 STR_5 FBB9                                   STR_6 FE0E  
                                 STR_7 FFC3                                   STR_8 FFDA  
                                 STR_9 FFCA                                   _LATA 000F89  
                                 _LATB 000F8A                                   _LATC 000F8B  
                                 _LATD 000F8C                                   _LATE 000F8D  
                                 u5010 0B34                                   u4330 3F10  
                                 u4331 3F0C                                   u4340 3F12  
                                 u3460 42D0                                   u3720 12A4  
                                 u4370 1C84                                   u4355 3C48  
                                 _PEIE 007F96                                   u3660 3F5C  
                                 u3670 3F5E                                   u4710 2B12  
                                 u3727 129A                                   u7007 023E  
                                 u3760 131C                                   u4800 2E98  
                                 u7017 0272                                   u7107 071E  
                                 u7027 029C                                   u4708 2AE0  
                                 _RCEN 007E2B                                   u7117 0748  
                                 u7037 0512                                   u3767 1312  
                                 u7207 27B8                                   u7127 07A6  
                                 u7047 0546                                   u4808 2E9C  
                                 u7217 27DA                                   u7137 07DA  
                                 u7057 0570                                   u4770 2E3C  
                                 u4690 2ADC                                   u7307 08D2  
                                 u7227 2808                                   u7147 0804  
                                 u7067 062E                                   u7317 0916  
                                 u7237 284E                                   u7157 085A  
                                 u7077 0662                                   u7407 0B44  
                                 u7327 0938                                   u7247 287E  
                                 u7167 088E                                   u7087 068C  
                                 u6640 2DF6                                   u7417 0BC2  
                                 u7337 09A8                                   u7257 28C2  
                                 u7177 3056                                   u7097 06EA  
                                 i2l66 4528                                   u4970 09CC  
                                 u4778 2E40                                   u7507 0DFA  
                                 u7427 0BEA                                   u7347 09DC  
                                 u7267 4350                                   u7187 309A  
                                 u7517 0E56                                   u7437 0C46  
                                 u7357 0A42                                   u7277 3344  
                                 u7197 2774                                   u4990 0A80  
                                 u7607 108A                                   u7527 0E7E  
                                 u7447 0C6E                                   u7367 0A60  
                                 u7287 3388                                   u7617 10B2  
                                 u7537 0EE8                                   u7457 0CCA  
                                 u7377 0A90                                   u7297 33AA  
                                 u6817 2A60                                   u7707 3CE2  
                                 u7627 10F8                                   u7547 0F10  
                                 u7467 0CF2                                   u7387 0AF6  
                                 u6907 3292                                   u6827 2B7E  
                                 u7717 18EC                                   u7637 1120  
                                 u7557 0F6C                                   u7477 0D4E  
                                 u7397 0B14                                   u6917 32EE  
                                 u6837 3E9E                                   u7807 1B38  
                                 u7727 1938                                   u7647 3802  
                                 u7567 0F94                                   u7487 0D76  
                                 u6927 3326                                   u6847 439C  
                                 u7817 1B84                                   u7737 1984  
                                 u7657 315E                                   u7577 0FF0  
                                 u7497 0DD2                                   u6937 3F6E  
                                 u6857 2E22                                   u7827 1BB8  
                                 u7747 19B8                                   u7667 31C0  
                                 u7587 1018                                   u6947 3FA2  
                                 u6867 2E7E                                   u7837 3B6E  
                                 u7757 1A04                                   u7677 31E0  
                                 u7597 103A                                   u6957 002A  
                                 u6877 2F14                                   u7847 3B78  
                                 u7767 1A38                                   u7687 3206  
                                 u6967 012A                                   u6887 2C3E  
                                 u7857 3BA4                                   u7777 1A84  
                                 u7697 323E                                   u6977 0166  
                                 u6897 2C72                                   u7867 3BAE  
                                 u7787 1AB8                                   u6987 01BC  
                                 u7877 3D72                                   u7797 1B04  
                                 u6997 01E8                                   _RSEN 007E29  
                          _stopSignals 44E8                                   _Test 3048  
                                 _back 005B                                   _main 36D2  
                                 _down 0067                                   _keys FB27  
                                 _time 0124                                   fsr0h 000FEA  
                                 fsr1h 000FE2                     i2___lwdiv@quotient 000A  
                                 indf0 000FEF                                   fsr2h 000FDA  
                                 fsr0l 000FE9                                   indf2 000FDF  
                                 fsr1l 000FE1                                   fsr2l 000FD9  
                                 _sort 446E                                   btemp 007E  
                 ??i2_I2C_Master_Start 0002                       ??_SolenoidTestA5 00AB  
                 ??i2_I2C_Master_Write 0004                                   prodh 000FF4  
                                 prodl 000FF3                                   start 000E  
                        __CFG_IESO$OFF 000000                   _log_count_can_no_lab 00EA  
                      __end_ofi2_putch 4566                    __size_of_EEPROMTest 0002  
                        __CFG_MCLRE$ON 000000                           ___param_bank 000000  
                           i2_printRTC 2158                            i2_lcdNibble 3D8A  
                      __end_of_Loading 2B90                   __end_of_actuatorTest 1138  
                     ?_I2C_Master_Init 008D                       ?_I2C_Master_Read 0001  
                     ?_I2C_Master_Wait 0001            ??i2_change_state_to_menu_12 002A  
          ??i2_change_state_to_menu_22 002A                       ?_I2C_Master_Stop 0001  
                                ?_Test 0001                   __end_of_EEPROM_write 3336  
                                ?_main 0001                                  _ACKEN 007E2C  
                                _ACKDT 007E2D                        __end_of___awdiv 34CA  
                                _EEADR 000FA9                                  STR_10 FFE6  
                                STR_11 FFEA                                  STR_12 FFFA  
                                STR_20 FFEE                                  STR_13 FFDE  
                                STR_21 FB42                                  STR_14 FFD6  
                                STR_22 FFA3                                  STR_30 FE1F  
                                STR_15 FFD2                                  STR_23 FF1F  
                                STR_31 FDFD                                  STR_16 FFE2  
                                STR_24 FD64                                  STR_32 FD42  
                                STR_40 FCFE                                  STR_17 FFF2  
                                STR_33 FD53                                  STR_41 FCED  
                                STR_25 FB82                                  STR_18 FFF6  
                                STR_34 FDEC                                  STR_50 FDCA  
                                STR_42 FDA8                                  STR_26 FD75  
                                STR_43 FDA8                                  STR_35 FDEC  
                                STR_51 FFDA                                  STR_19 FFCE  
                                STR_27 FB6F                                  STR_52 FFCA  
                                STR_60 FFF2                                  STR_28 FD86  
                                STR_36 FD31                                  STR_44 FD0F  
                      __end_of___awmod 36D2                                  STR_45 FCFE  
                                STR_37 FD42                                  STR_53 FFE6  
                                STR_61 FFF6                                  STR_29 FB7F  
                                STR_62 FFCE                                  STR_54 FFEA  
                                STR_70 FED8                                  STR_38 FDDB  
                                STR_46 FDB9                                  STR_47 FDB9  
                                STR_55 FFFA                                  STR_63 FB42  
                                STR_71 FF11                                  STR_39 FD97  
                                STR_56 FFDE                                  STR_64 FF84  
                                STR_80 FE60                                  STR_48 FD20  
                                STR_72 FC87                                  STR_49 FD0F  
                                STR_57 FFD6                                  STR_65 FF55  
                                STR_73 FEF5                                  STR_81 FE8D  
                                STR_58 FFD2                                  STR_90 FF79  
                                STR_74 FF62                                  STR_82 FE30  
                                STR_66 FB5A                                  STR_59 FFE2  
                                STR_67 FFBC                                  STR_83 FF99  
                                STR_75 FEBA                                  STR_91 FEAB  
                                STR_84 FF11                                  STR_76 FF03  
                                STR_68 FC98                                  STR_92 FC32  
                                STR_77 FFAD                                  STR_85 FEC9  
                                STR_69 FCCB                                  STR_93 FC21  
                                STR_78 FF11                                  STR_86 FEE7  
                                STR_94 FBFF                                  STR_79 FF3B  
                                STR_87 FCA9                                  STR_95 FC54  
                                STR_88 FF6E                                  STR_96 FC65  
                                STR_89 FCBA                                  STR_97 FBDD  
                                STR_98 FE40                                  STR_99 FC10  
                                ?_sort 0001                        __end_of___lldiv 3586  
                                _T0CON 000FD5                        ___awdiv@divisor 0088  
                                _T1CON 000FCD                                  _T3CON 000FB1  
                      __end_of___lwdiv 39FE                        __end_of___lwmod 3C18  
                                i2l254 2154                                  i2l593 21E6  
                                i2l850 2A06                                  i2l844 299A  
                                i2l926 450C                                  i2l848 29E6  
                      ___awdiv@counter 008A                                  _TMR0H 000FD7  
                                _TMR1H 000FCF                                  _TMR0L 000FD6  
                                _TMR3H 000FB3                                  _TMR1L 000FCE  
                                _TMR3L 000FB2                             _BothServos 18DE  
                                _PORTB 000F81                                  _TRISA 000F92  
                                _TRISB 000F93                                  _TRISC 000F94  
                                _TRISD 000F95                                  _TRISE 000F96  
                        __CFG_PWRT$OFF 000000                          __CFG_WRT0$OFF 000000  
                        __CFG_WRT1$OFF 000000                          __CFG_WRT2$OFF 000000  
                        __CFG_WRT3$OFF 000000                        __end_of_lcdInst 455A  
                      __end_of_handler 2A42                         __CFG_EBTR0$OFF 000000  
                       __CFG_FCMEN$OFF 000000                         __CFG_EBTR1$OFF 000000  
                       __CFG_EBTR2$OFF 000000                         __CFG_EBTR3$OFF 000000  
                                _nRBPU 007F8F                          __CFG_WRTB$OFF 000000  
                        __CFG_WRTC$OFF 000000                          __CFG_WRTD$OFF 000000  
                      __end_of_readADC 4360                        __end_of_initLCD 3FAC  
                       __CFG_EBTRB$OFF 000000                                  _debug 00E0  
                           i2isdigit@c 0003                                  _getIR 3E80  
                      __end_of_loadRTC 37F4                        __end_of_readMAG 3F1A  
                      __end_of_dpowers FB42                                  _first 00E4  
                                _enter 0069                        __end_of_isdigit 438A  
                                _input 007D                                  _putch 453A  
                                pclath 000FFA                                  tablat 000FF5  
                     __end_ofi2___wmul 4400                       __end_ofi2_getRTC 3AE6  
                  _log_count_pop_w_tab 00F0                                  status 000FD8  
                       __CFG_PBADEN$ON 000000                          i2printf@width 0028  
                     __end_ofi2_printf 18DE                     __size_ofi2___lwdiv 0052  
                   __size_ofi2___lwmod 0042                       __end_ofi2_strcpy 40FC  
                          Loading@addr 00B3                       _count_can_no_lab 005D  
                 __size_of_EEPROM_read 0018                        __initialization 3E32  
                         __end_of_Test 3150                     __size_ofi2_lcdInst 000C  
                         __end_of_main 3768                           __end_of_keys FB38  
                         __end_of_sort 4490                             i2printf@ap 0020  
                           i2printf@cp 001E                     __size_ofi2_isdigit 001E  
                               ??_Test 00C6    __size_of_change_state_to_menu_start 002C  
                      ??_machineConfig 0080                                 ??_main 00DA  
                               ??_sort 00B8                          __activetblptr 000003  
           updateServoPosition@my_time 0086             updateServoPosition@time_us 0080  
                           i2strcpy@cp 0005                             i2strcpy@to 0001  
                    ?_I2C_Master_Start 0001                    EEPROM_write@address 00AB  
               __size_ofi2_EEPROM_read 0016                      ?_I2C_Master_Write 0081  
                               ?_getIR 0001                     ??_I2C_Master_Start 0081  
                               _ADCON0 000FC2                                 _ADCON1 000FC1  
                   ??_I2C_Master_Write 0083                                 _ADCON2 000FC0  
                               STR_100 FBEE                                 STR_101 FC10  
                               STR_102 FE9C                                 STR_110 FC43  
                               STR_103 FE7E                                 STR_111 FC76  
                               STR_112 FFB5                                 STR_104 FE6F  
                               STR_105 FCDC                                 STR_106 FB95  
                               _ADRESH 000FC4                                 STR_107 FBA7  
                               STR_108 FF48                                 _EEADRH 000FAA  
                               STR_109 FF8F                                 _ADRESL 000FC3  
                               _EEDATA 000FA8                                 _EECON2 000FA7  
                     ___awdiv@dividend 0086                        i2lcdNibble@data 0002  
                               ?_putch 0001                 __size_of_initSortTimer 00AA  
                      i2lcdNibble@temp 0001              i2_change_state_to_menu_12 412C  
            i2_change_state_to_menu_22 40FC                                 _INT1IE 007F83  
                               _INT1IF 007F80                                 _CVRCON 000FB5  
                               i2l1224 174A                                 i2l1671 3E28  
                               i2l1681 3FE4                                 i2l6020 2248  
                               i2l6012 21F0                                 i2l5230 4420  
                               i2l6030 22B6                                 i2l6022 225E  
                               i2l6014 2206                                 i2l6006 2184  
                               i2l6120 25CC                                 i2l6032 22CC  
                               i2l6024 2274                                 i2l6016 221C  
                               i2l6040 2352                                 i2l6130 25EA  
                               i2l6034 22E2                                 i2l6026 228A  
                               i2l6018 2232                                 i2l6220 272E  
                               i2l6212 270A                                 i2l6204 26E6  
                               i2l6140 2608                                 i2l6132 25F0  
                               i2l6116 25B8                                 i2l6108 259E  
                               i2l6028 22A0                                 i2l5254 44C8  
                               i2l6134 25F6                                 i2l6118 25C8  
                               i2l6126 25D6                                 i2l6038 22F8  
                               i2l5520 3ABC                                 i2l5264 3DF6  
                               i2l6216 271C                                 i2l6208 26F8  
                               i2l6136 25FC                                 i2l6144 260E  
                               i2l8000 2A04                                 i2l5266 3DFE  
                               i2l5602 1714                                 i2l6170 2678  
                               i2l6138 2602                                 i2l6226 2738  
                               i2l5516 3AAC                                 i2l5276 3E1E  
                               i2l5268 3E02                                 i2l5292 3FDA  
                               i2l5284 3FBA                                 i2l5620 1794  
                               i2l6180 269E                                 i2l6164 266A  
                               i2l6156 2652                                 i2l5526 3AD6  
                               i2l5286 3FC2                                 i2l5614 1778  
                               i2l5550 1598                                 i2l6190 26C0  
                               i2l6174 2694                                 i2l5288 3FC6  
                               i2l5632 17C6                                 i2l5560 15D0  
                               i2l5544 157A                                 i2l6184 26B2  
                               i2l5650 1822                                 i2l5642 1804  
                               i2l5618 1790                                 i2l5554 159E  
                               i2l6186 26B6                                 i2l5644 180C  
                               i2l5580 1668                                 i2l5548 158A  
                               i2l5662 1854                                 i2l5638 17E0  
                               i2l5590 16C2                                 i2l6198 26D8  
                               i2l5672 18BA                                 i2l5656 1838  
                               i2l5592 16D4                                 i2l5576 165A  
                               i2l5568 1632                                 i2l5680 40DC  
                               i2l5658 1840                                 i2l5666 1866  
                               i2l5586 16B2                                 i2l5578 1664  
                               i2l5674 18C2                                 i2l7610 1FDC  
                               i2l7602 1FB8                                 i2l5668 186C  
                               i2l5596 16FE                                 i2l5588 16BC  
                               i2l5860 2FFC                                 i2l7532 1EC8  
                               i2l5598 1710                                 i2l5678 40D4  
                               i2l7630 202A                                 i2l7622 2006  
                               i2l7614 1FEA                                 i2l7606 1FC6  
                               i2l7550 1F06                                 i2l7542 1EEA  
                               i2l7534 1ECE                                 i2l5856 2FEC  
                               i2l8272 2626                                 i2l8264 2108  
                               i2l8274 2642                                 i2l8266 212A  
                               i2l7650 2078                                 i2l7642 205C  
                               i2l7634 2038                                 i2l7626 201C  
                               i2l7618 1FF8                                 i2l7570 1F40  
                               i2l7562 1F22                                 i2l7546 1EF8  
                               i2l7538 1EDC                                 i2l5868 3030  
                               i2l8268 2146                                 i2l7670 20C6  
                               i2l7662 20AA                                 i2l7654 2086  
                               i2l7646 206A                                 i2l7638 2046  
                               i2l7590 1F86                                 i2l7582 1F6A  
                               i2l7574 1F4E                                 i2l7566 1F30  
                               i2l7558 1F14                                 i2l7680 20EA  
                               i2l7674 20DC                                 i2l7666 20B8  
                               i2l7658 209C                                 i2l7594 1F9C  
                               i2l7586 1F78                                 i2l7578 1F5C  
                               i2l7860 23AA                                 i2l7940 2952  
                               i2l7598 1FAA                                 i2l7856 239A  
                               i2l7866 2404                                 i2l7954 296E  
                               i2l7938 294E                                 i2l7876 24C6  
                               i2l7976 29B8                                 i2l7978 29BA  
                               _OSCCON 000FD3                                 _TMR0IE 007F95  
                               _TMR0IF 007F92                              ??i2_putch 0003  
                               _TMR1IE 007CE8                                 _TMR1IF 007CF0  
                               _TMR2IE 007CE9                                 _TMR3IE 007D01  
                               _TMR3IF 007D09                                 _TMR0ON 007EAF  
                               _TMR1ON 007E68                                 _TMR3ON 007D88  
                               _SSPADD 000FC8                                 _TRISC3 007CA3  
                               _TRISC4 007CA4                                 _SSPBUF 000FC9  
                            ??_Loading 00B1                       __end_of_delay_ms 43B2  
                 delay_ms@milliseconds 0081                         __CFG_XINST$OFF 000000  
                     ID@sensor_outputs 0088                       __end_of_dispLogs 446E  
                          ?i2_printRTC 0001                       retrieveLog@byte1 000B  
                     retrieveLog@byte2 000C                       retrieveLog@byte3 000D  
                 __end_of_Distribution 2CD0                                 ___wmul 4094  
                            ??___awdiv 008A                         __CFG_STVREN$ON 000000  
                            ??___awmod 0084                            logRun@byte1 00B2  
                          logRun@byte2 00B3                            logRun@byte3 00B4  
                               _getRTC 387C                              ??___lldiv 0088  
                            ??___lwdiv 0084                              ??___lwmod 008B  
                     ??_printSortTimer 002A                       __end_of_initTime 44B2  
                               _initUI 4426                                 _readIR 3F1A  
                               _logRun 2CD0                                 clear_0 3E58  
                               clear_1 3E64                                 clear_2 3E70  
                     ___awdiv@quotient 008C                        ___awmod@divisor 0082  
                           _PortTestA5 3CD4                        ___awmod@counter 0084  
                            ??_lcdInst 0082                                 _printf 1138  
                            ??_handler 004B                __size_of_initGlobalVars 0068  
                         ?_retrieveLog 0007                                 _strcpy 405E  
                            ??_readADC 0080                              ??_initLCD 0083  
                            ??_loadRTC 0095                              ??_readMAG 0082  
 __end_ofi2_change_state_to_menu_start 43DA  __size_ofi2_change_state_to_menu_start 0028  
         i2_change_state_to_menu_start 43B2                            ?_BothServos 0001  
                         ??_EEPROMTest 0080                              ??_isdigit 0080  
                   __size_of_PortTests 0084                      __end_ofi2___lwdiv 3E32  
                     __end_of_printRTC 1E98                           __mediumconst FB26  
                    __end_ofi2___lwmod 3FEE                                 tblptrh 000FF7  
                               tblptrl 000FF6                                 tblptru 000FF8  
                 _log_count_pop_no_tab 00EE                  __end_of_algorithmTest 340C  
                    __end_ofi2_lcdInst 4572                      __end_ofi2_isdigit 44D0  
                           __accesstop 0080                __end_of__initialization 3E76  
                        ?_inputHandler 002A                          ___rparam_used 000001  
              printSortTimer@start_sec 003D                  __size_of_actuatorTest 0880  
                        i2_EEPROM_read 44FE                           Loading@byte1 00B5  
                   i2___lwmod@dividend 0001                     __end_of_EEPROMTest 45B0  
                       __pcstackCOMRAM 0001                  __size_of_EEPROM_write 00E8  
                         __pidataBANK1 4586                          __end_of_getIR 3ECE  
                          i2printRTC@i 0041                          _initSortTimer 3586  
          __end_of_updateServoPosition 3A74                          __end_of_putch 454A  
                          i2printf@len 0022                            i2printf@val 0024  
                           __end_of_ID 2F2E                             __end_of_UI 08B8  
                   printSortTimer@hour 002D                              ?i2___wmul 0001  
                   __size_of_lcdNibble 0068                              ?i2_getRTC 0001  
                          i2putch@data 0003                  printSortTimer@curTime 002F  
   __end_of_change_state_to_menu_start 4334          ?i2_change_state_to_menu_start 0001  
           _change_state_to_menu_start 4308                  printSortTimer@cur_sec 003F  
                            ?i2_printf 000D                                ??_getIR 0086  
                            ?i2_strcpy 0001                       _count_pop_no_tab 0061  
                  __size_ofi2_printRTC 0236                                ??_putch 0082  
                         _actuatorTest 08B8                             __pbssBANK0 00DA  
                           __pbssBANK1 0100                           ?_stopSignals 0001  
                       ??_inputHandler 002C                           _EEPROM_write 324E  
                              UI@F3222 012D               ?_change_state_to_menu_11 0001  
             ?_change_state_to_menu_12 0001               ?_change_state_to_menu_22 0001  
             ?_change_state_to_menu_23 0001                         ?i2_EEPROM_read 0001  
             ?_change_state_to_logs_11 0001               ?_change_state_to_logs_12 0001  
             ?_change_state_to_logs_22 0001               ?_change_state_to_logs_23 0001  
             ?_change_state_to_logs_33 0001               ?_change_state_to_logs_34 0001  
                  __size_of_BothServos 02F0                      __end_of_PortTests 3986  
                    printRTC@RTC_month 00BC                           ?i2_lcdNibble 0001  
                              UI@i_411 00CA                                UI@i_412 00CB  
                              UI@i_430 00CC                                UI@i_431 00CD  
                              UI@i_408 00C9                                UI@i_442 00D2  
                              UI@i_434 00CE                                UI@i_443 00D3  
                              UI@i_435 00CF                                UI@i_446 00D4  
                              UI@i_438 00D0                                UI@i_447 00D5  
                              UI@i_439 00D1                         ?_initSortTimer 0001  
                              ?___wmul 0080                                ?_getRTC 0001  
                              ?_initUI 0001                                ?_readIR 0001  
                              ?_logRun 0001               updateServoPosition@timer 0082  
                              UI@month 00D6                            ?_PortTestA5 0001  
                              ?_printf 008E                                _UI$2240 00C6  
                              ?_strcpy 0080                             ??i2___wmul 0005  
                           ??i2_getRTC 0004                              ?_delay_ms 0001  
                           ??i2_printf 0019                             ??i2_strcpy 0005  
                            ?_dispLogs 0012                                _SSPCON1 000FC6  
                              _SSPCON2 000FC5                                _SSPSTAT 000FC7  
                              i2_putch 455A                              ?_initTime 0080  
                      _f_loadingNewCan 00E2                        i2printRTC@month 003D  
                __size_of_Distribution 0140            __size_ofi2_I2C_Master_Start 0008  
                    __end_of_lcdNibble 3BB6                                _Loading 2A42  
          __size_ofi2_I2C_Master_Write 000A                       EEPROM_write@data 00AD  
                              __Hparam 0000                                __Lparam 0000  
   __size_ofi2_change_state_to_menu_12 0030     __size_ofi2_change_state_to_menu_22 0030  
                            ?_printRTC 0001                                ___awdiv 340C  
                              ___awmod 3630                             _initServos 3D30  
                              ___lldiv 34CA                        __size_of___wmul 0036  
                              ___lwdiv 3986                                ___lwmod 3BB6  
                      __size_of_getRTC 0086                        printSortTimer@i 0049  
                            _CMCONbits 000FB4                      retrieveLog@logNum 0007  
                         logRun@byte11 00B6                        __size_of_initUI 0024  
                      __size_of_readIR 004C                                __pcinit 3E32  
                 i2EEPROM_read@address 0001                        __size_of_logRun 013C  
                         logRun@byte_i 00B5                                __ramtop 1000  
                       _initGlobalVars 3AE6                                _lcdInst 454A  
                              _handler 0008                                __ptext0 36D2  
                              __ptext1 44E8                                __ptext2 446E  
                              __ptext3 2A42                                __ptext4 3586  
                              __ptext5 3AE6                                __ptext6 3E80  
                              __ptext7 438A                                __ptext8 2E0C  
                              __ptext9 2B90                        __size_of_printf 0438  
                              _readADC 4334                        __size_of_strcpy 0036  
                              _initLCD 3F66                                _cur_can 0065  
                              _loadRTC 3768                                _readMAG 3ECE  
                              _dpowers FB38                     actuatorTest@i_1600 00B8  
                   actuatorTest@i_1601 00B9                     actuatorTest@i_1610 00BE  
                   actuatorTest@i_1611 00BF                     actuatorTest@i_1604 00BA  
                   actuatorTest@i_1605 00BB                     actuatorTest@i_1614 00C0  
                   actuatorTest@i_1615 00C1                     actuatorTest@i_1607 00BC  
                   actuatorTest@i_1608 00BD                     actuatorTest@i_1617 00C2  
                   actuatorTest@i_1618 00C3                     actuatorTest@i_1591 00B2  
                   actuatorTest@i_1592 00B3                     actuatorTest@i_1585 00AE  
                   actuatorTest@i_1594 00B4                     actuatorTest@i_1586 00AF  
                   actuatorTest@i_1578 00AD                     actuatorTest@i_1595 00B5  
                   actuatorTest@i_1588 00B0                     actuatorTest@i_1597 00B6  
                   actuatorTest@i_1589 00B1                     actuatorTest@i_1598 00B7  
                              _isdigit 4360                          ?_ToggleTestA5 0001  
                     ___awmod@dividend 0080                                getRTC@i 0083  
                 __size_of_retrieveLog 011A                             ??_delay_ms 0080  
             __size_of_I2C_Master_Init 0060               __size_of_I2C_Master_Read 002E  
                        _log_startTime 0100               __size_of_I2C_Master_Wait 0014  
             __size_of_I2C_Master_Stop 0008                             ??_dispLogs 0014  
                         _Distribution 2B90                         __pintcode_body 28D4  
                 end_of_initialization 3E76                                logRun@i 00B7  
                           ??_initTime 0086                        ??i2_EEPROM_read 0003  
                 SolenoidTestA5@i_1631 00AF                   SolenoidTestA5@i_1633 00B0  
                              int_func 28D4                    i2___wmul@multiplier 0001  
                        ??_EEPROM_read 0082                    __size_of_PortTestA5 005C  
            __size_of_I2C_Master_Start 0008              __size_of_I2C_Master_Write 000A  
                      ___lldiv@divisor 0084                        ___lldiv@counter 008C  
                      ??_initSortTimer 0085                                printf@c 00A8  
                         ??i2_printRTC 002A                                printf@f 008E  
                           ??_printRTC 00AB                       I2C_Master_Init@c 008D  
                     I2C_Master_Read@a 0081                                postdec1 000FE5  
                              postdec2 000FDD                                postinc0 000FEE  
                              postinc2 000FDE                 __end_of_initGlobalVars 3B4E  
                           _sensorTest 2766                __size_of_SolenoidTestA5 00FE  
                           _servoTimes 011C                              _PORTAbits 000F80  
                            _PORTBbits 000F81                   __end_of_inputHandler 2766  
                         ??_BothServos 00AB                         ??_ToggleTestA5 00AB  
                __end_of_machineConfig 3CD4                             _updateMenu 1E98  
                    i2_I2C_Master_Read 4400                              _IR_signal 00DA  
                    i2_I2C_Master_Wait 4528                      i2_I2C_Master_Stop 459E  
                    i2___lwdiv@divisor 0008                        _log_count_total 00F2  
                            i2___lwdiv 3DE0                              i2___lwmod 3FAC  
                    i2___lwdiv@counter 000C                     ?i2_I2C_Master_Read 0001  
                   ?i2_I2C_Master_Wait 0001                     __end_ofi2_printRTC 238E  
                   ?i2_I2C_Master_Stop 0001                          actuatorTest@i 00C4  
         ??_change_state_to_menu_start 00C4                              i2_lcdInst 4566  
                           _total_time 00F8                            printf@width 00A9  
                 __size_of_stopSignals 0016                    ??i2_I2C_Master_Read 0002  
                            i2_isdigit 44B2                    ??i2_I2C_Master_Wait 0001  
                  ??i2_I2C_Master_Stop 0002                              i2getRTC@i 0004  
                   __end_of_BothServos 1BCE                    __end_of_EEPROM_read 44E8  
                          ?_initServos 0001                        ?_initGlobalVars 0001  
                       __end_of___wmul 40CA                         __end_of_getRTC 3902  
                 __size_ofi2_lcdNibble 0056                          EEPROM_write@i 00AF  
                        i2lcdInst@data 0003                         __end_of_initUI 444A  
                       __end_of_readIR 3F66                         __end_of_logRun 2E0C  
                     i2___wmul@product 0005                         __end_of_printf 1570  
                         i2printf@flag 0026                         __end_of_strcpy 4094  
            __end_ofi2_I2C_Master_Read 4426              __end_ofi2_I2C_Master_Wait 453A  
                         i2printf@prec 001D                    start_initialization 3E32  
            __end_ofi2_I2C_Master_Stop 45A6                             readMAG@res 0084  
                    __size_ofi2___wmul 0026                        _count_can_w_lab 005F  
          ?_change_state_to_menu_start 0001                      __size_ofi2_getRTC 0072  
                            i2printf@c 0027                              i2printf@f 000D  
                   EEPROM_write@i_1319 00B0                  i2I2C_Master_Read@temp 0003  
                           ?i2___lwdiv 0006                             ?i2___lwmod 0001  
                    __size_ofi2_printf 036E                      __size_ofi2_strcpy 0032  
                    ??_I2C_Master_Init 0091                      ??_I2C_Master_Read 0081  
                    ??_I2C_Master_Wait 0080                             ?i2_lcdInst 0001  
                    ??_I2C_Master_Stop 0081                       __CFG_OSC$INTIO67 000000  
                           ?i2_isdigit 0001                             initTime@DD 0083  
                           initTime@MM 0084                             initTime@YY 0085  
                      retrieveLog@addr 0010                             logRun@addr 00B9  
                             ??___wmul 0084                               ??_getRTC 0083  
               __size_of_algorithmTest 00D6                              _PortTests 3902  
                          ?_sensorTest 0001                            __pdataBANK1 012D  
                     __CFG_LPT1OSC$OFF 000000                               ??_initUI 00C4  
                             ??_readIR 0082                               ??_logRun 00B1  
                         ??_PortTestA5 00AB                 printSortTimer@timeDiff 0047  
     __size_of_change_state_to_menu_11 0030       __size_of_change_state_to_menu_12 0038  
     __size_of_change_state_to_menu_22 0038       __size_of_change_state_to_menu_23 0030  
                             ??_printf 009A       __size_of_change_state_to_logs_11 0030  
     __size_of_change_state_to_logs_12 0030       __size_of_change_state_to_logs_22 0030  
     __size_of_change_state_to_logs_23 002E       __size_of_change_state_to_logs_33 0030  
     __size_of_change_state_to_logs_34 0030                               ??_strcpy 0084  
                  _printSortTimer$2360 0045                            __pbssCOMRAM 005B  
         __size_of_updateServoPosition 0076                            ?_updateMenu 0001  
                        __pcstackBANK0 0080                __size_of_printSortTimer 01F2  
                    i2___lwmod@divisor 0003                      i2___lwmod@counter 0005  
                         _isdigit$1887 0081                      __size_of_delay_ms 0028  
                       initSortTimer@i 0088                      printSortTimer@min 0041  
                    printSortTimer@sec 0043                    __size_of_initServos 005A  
                    __size_of_dispLogs 0024                       printRTC@INT_time 00AE  
                         i2strcpy@from 0003                               ?i2_putch 0001  
                      _count_pop_w_tab 0063                            _EEPROM_read 44D0  
                   __end_of_PortTestA5 3D30                       _I2C_Master_Start 4596  
                            _f_lastCan 0073                               ?_Loading 0001  
                  i2I2C_Master_Write@d 0002                       _I2C_Master_Write 4572  
                    __size_of_initTime 0022                   __end_of_ToggleTestA5 387C  
                     ___lwdiv@dividend 0080                      __CFG_CCP2MX$PORTC 000000  
                            __pintcode 0008                          __pmediumconst FB26  
                            _lcdNibble 3B4E                  __size_of_inputHandler 01E6  
                             ?___awdiv 0086                               ?___awmod 0080  
                             ?___lldiv 0080                               ?___lwdiv 0080  
                           ?_PortTests 0001                               ?___lwmod 0087  
                       _SolenoidTestA5 3150                      __size_of_printRTC 02CA  
                             ?_lcdInst 0001                               ?_handler 0001  
                             ?_readADC 0001                               ?_initLCD 0001  
                             ?_loadRTC 0001                               ?_readMAG 0001  
                             ?_isdigit 0001             __size_ofi2_I2C_Master_Read 0026  
           __size_ofi2_I2C_Master_Wait 0012             __size_ofi2_I2C_Master_Stop 0008  
                            _firstboot 0075                              _cur_state 00DE  
                     ___lwdiv@quotient 0084                         __size_of_getIR 004E  
                        _algorithmTest 3336                            ??i2___lwdiv 000A  
                          ??i2___lwmod 0005                         __size_of_putch 0010  
                          __size_of_ID 0122                            __size_of_UI 08A6  
                       ToggleTestA5@on 00AC                    __size_of_sensorTest 016E  
           __end_ofi2_I2C_Master_Start 45AE             __end_ofi2_I2C_Master_Write 4586  
                          ??i2_lcdInst 0003                         ___wmul@product 0084  
                             _LATAbits 000F89                               _LATCbits 000F8B  
                             _LATDbits 000F8C                               _LATEbits 000F8D  
                         _inputHandler 2580                            ??i2_isdigit 0001  
                             i2u413_40 16F6                               i2u413_47 16EC  
                             i2u409_40 1696                               i2u409_47 168C  
                             _PIR2bits 000FA1                               i2u356_40 441E  
                             i2u453_40 21E6                               i2u669_40 24C0  
                             i2u790_47 3DAC                               i2u791_47 3DCE  
                             i2u792_47 3DD8                               i2u788_47 25BE  
                             i2u789_47 3DA2                    __size_of_updateMenu 02C0  
                       _log_completion 00E8                       __CFG_WDTPS$32768 000000  
               __end_of_SolenoidTestA5 324E                             ?_lcdNibble 0001  
                            _was_low_1 0079                              _was_low_3 007B  
                        ??_retrieveLog 0009                             _ADCON0bits 000FC2  
                    ___wmul@multiplier 0080                              _startTime 010E  
                             i2___wmul 43DA                          lcdNibble@data 0081  
                             i2_getRTC 3A74                             printf@flag 00A7  
                        lcdNibble@temp 0080                             printf@prec 009E  
                             Loading@i 00B6                               i2_printf 1570  
                             i2_strcpy 40CA                         ?_algorithmTest 0001  
                  I2C_Master_Read@temp 0082                              copy_data0 3E46  
                            readIR@res 0084                       __size_ofi2_putch 000C  
                           _EECON1bits 000FA6                  __end_ofi2_EEPROM_read 4514  
                          _count_total 00FE                       ??_initGlobalVars 0080  
                      SolenoidTestA5@i 00AD                               __Hrparam 0000  
                     __size_of_Loading 014E                              initTime@h 0081  
                            initTime@m 0080                              initTime@s 0086  
                            initTime@w 0082                               __Lrparam 0000  
                   __CFG_BOREN$SBORDIS 000000                              logRun@num 00B1  
                      ?_SolenoidTestA5 0001                  __end_of_initSortTimer 3630  
                         ??_initServos 0088                            ??_PortTests 0080  
                     __size_of___awdiv 00BE                       __size_of___awmod 00A2  
              _change_state_to_menu_11 418C             ?i2_change_state_to_menu_12 0001  
              _change_state_to_menu_12 4026             ?i2_change_state_to_menu_22 0001  
              _change_state_to_menu_22 3FEE                _change_state_to_menu_23 415C  
                i2___wmul@multiplicand 0003                       __size_of___lldiv 00BC  
                     __size_of___lwdiv 0078                _change_state_to_logs_11 427C  
              _change_state_to_logs_12 424C                _change_state_to_logs_22 421C  
              _change_state_to_logs_23 42DA                _change_state_to_logs_33 41EC  
              _change_state_to_logs_34 41BC                       __size_of___lwmod 0062  
                       readADC@channel 0081                     i2I2C_Master_Read@a 0002  
                     __size_of_lcdInst 0010                       __size_of_handler 2A3A  
                           _EEPROMTest 45AE                        _I2C_Master_Init 3C18  
                     __size_of_readADC 002C                        _I2C_Master_Read 42AC  
                     __size_of_initLCD 0046                           _f_ID_receive 006B  
                     __size_of_loadRTC 008C                       __size_of_readMAG 004C  
                      _I2C_Master_Wait 4514                        _I2C_Master_Stop 458E  
                     __size_of_isdigit 002A                               _delay_ms 438A  
                       _printSortTimer 238E                        ___lwdiv@divisor 0082  
                      ___lwdiv@counter 0086                    __end_of_retrieveLog 3048  
                             __ptext10 3C78                               __ptext11 2CD0  
                             __ptext20 3F66                               __ptext12 324E  
                             __ptext21 0012                               __ptext13 44D0  
                             __ptext30 3FEE                               __ptext22 1BCE  
                             __ptext14 4426                               __ptext31 4026  
                             __ptext23 405E                               __ptext15 3768  
                             __ptext40 08B8                               __ptext32 3630  
                             __ptext24 387C                               __ptext16 3C18  
                             __ptext41 37F4                               __ptext33 340C  
                             __ptext25 4572                               __ptext17 34CA  
                             __ptext50 4094                               __ptext42 3150  
                             __ptext34 3048                               __ptext26 458E  
                             __ptext18 4308                               __ptext51 3BB6  
                             __ptext43 3902                               __ptext35 2766  
                             __ptext27 4596                               __ptext19 4490  
                             __ptext60 2158                               __ptext52 3986  
                             __ptext44 3CD4                               __ptext36 3ECE  
                             __ptext28 42AC                               __ptext61 40CA  
                             __ptext53 454A                               __ptext45 45AE  
                             __ptext37 3F1A                               __ptext29 4514  
                             __ptext70 421C                               __ptext62 2580  
                             __ptext54 3B4E                               __ptext46 18DE  
                             __ptext38 4334                               __ptext71 424C  
                             __ptext63 40FC                               __ptext55 3D30  
                             __ptext47 1138                               __ptext39 3336  
                             __ptext80 43DA                               __ptext72 427C  
                             __ptext64 412C                               __ptext56 39FE  
                             __ptext48 453A                               __ptext81 3FAC  
                             __ptext73 444A                               __ptext65 415C  
                             __ptext49 4360                               __ptext90 4528  
                             __ptext82 3DE0                               __ptext74 2F2E  
                             __ptext66 418C                               __ptext58 1E98  
                             __ptext83 4566                               __ptext75 44FE  
                             __ptext67 41BC                               __ptext59 43B2  
                             __ptext84 3D8A                               __ptext76 238E  
                             __ptext68 41EC                               __ptext85 3A74  
                             __ptext77 1570                               __ptext69 42DA  
                             __ptext86 457C                               __ptext78 455A  
                             __ptext87 459E                               __ptext79 44B2  
                             __ptext88 45A6                               __ptext89 4400  
                             _dispLogs 444A                          ?_actuatorTest 0001  
                        ??_stopSignals 0080                  __size_of_ToggleTestA5 0088  
                           strcpy@from 0082                         i2_isdigit$1887 0002  
                   __end_of_initServos 3D8A                          __size_of_Test 0108  
                        ?_EEPROM_write 00AB                               _initTime 4490  
                        __size_of_main 0096                          __size_of_sort 0022  
       ??i2_change_state_to_menu_start 0043                               _logstate 00F6  
                  _updateServoPosition 39FE                 __size_of_machineConfig 005C  
                        ??i2_lcdNibble 0001                               _printRTC 1BCE  
                          ??_lcdNibble 0080                              printRTC@i 00C2  
                             int$flags 007E                           ??_sensorTest 00AB  
                       _log_total_time 00F4                     _f_can_coming_to_ID 006D  
                            printf@len 00A3                              printf@val 00A5  
    __end_ofi2_change_state_to_menu_12 415C      __end_ofi2_change_state_to_menu_22 412C  
                             loadRTC@i 0096                 __end_of_printSortTimer 2580  
                            putch@data 0082               __end_of_I2C_Master_Start 459E  
                          _OSCTUNEbits 000F9B               __end_of_I2C_Master_Write 457C  
                           _INTCONbits 000FF2                   ?_updateServoPosition 0080  
                         _ToggleTestA5 37F4                           ??_updateMenu 0043  
                      ??_algorithmTest 00AB                             _MAG_signal 00DC  
                             isdigit@c 0082                         ??_actuatorTest 00AB  
                             intlevel2 0000                         ??_EEPROM_write 00AE  
                   __end_of_sensorTest 28D4                       ___lwmod@dividend 0087  
                     ___lldiv@dividend 0080                           ?_EEPROM_read 0080  
                  __end_of_stopSignals 44FE              ??_change_state_to_menu_11 002A  
            ??_change_state_to_menu_12 00AB              ??_change_state_to_menu_22 00AB  
            ??_change_state_to_menu_23 002A              ??_change_state_to_logs_11 002A  
            ??_change_state_to_logs_12 002A              ??_change_state_to_logs_22 002A  
            ??_change_state_to_logs_23 002A              ??_change_state_to_logs_33 002A  
            ??_change_state_to_logs_34 002A                               printf@ap 00A1  
                             printf@cp 009F                     __end_of_updateMenu 2158  
              __end_of_I2C_Master_Init 3C78                __end_of_I2C_Master_Read 42DA  
              __end_of_I2C_Master_Wait 4528                __end_of_I2C_Master_Stop 4596  
                        printRTC@F3213 0131                            lcdInst@data 0082  
                         retrieveLog@i 000E                            _retrieveLog 2F2E  
                  __end_ofi2_lcdNibble 3DE0                  ??_updateServoPosition 0084  
                      ?_printSortTimer 0001                       ___lldiv@quotient 0088  
                    I2C_Master_Write@d 0081                            ?_EEPROMTest 0001  
                      ___lwmod@divisor 0089                      _f_can_distributed 0071  
                             strcpy@cp 0084                               strcpy@to 0080  
                        _machineConfig 3C78                        ___lwmod@counter 008B  
                        printRTC@month 00BE                          ?_Distribution 0001  
                        _machine_state 00FC                          dispLogs@myLog 0012  
                   i2printRTC@INT_time 002D  
